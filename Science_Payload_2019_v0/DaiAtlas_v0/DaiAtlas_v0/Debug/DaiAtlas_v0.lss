
DaiAtlas_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000270  00802000  00005402  00005496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ce  00802270  00802270  00005706  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000dc8  00000000  00000000  000057a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020cc5  00000000  00000000  00006570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005ae4  00000000  00000000  00027235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001465c  00000000  00000000  0002cd19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004250  00000000  00000000  00041378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003bd8c  00000000  00000000  000455c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018949  00000000  00000000  00081354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cc8  00000000  00000000  00099ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00011378  00000000  00000000  0009a968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__vector_10>
      2c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_11>
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	e9 c2       	rjmp	.+1490   	; 0x608 <__vector_13>
      36:	00 00       	nop
      38:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_14>
      3c:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_15>
      40:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_16>
      44:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_17>
      48:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_18>
      4c:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_19>
      50:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_20>
      54:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_21>
      58:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_22>
      5c:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_23>
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c1       	rjmp	.+774    	; 0x3a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c1       	rjmp	.+770    	; 0x3a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c1       	rjmp	.+766    	; 0x3a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c1       	rjmp	.+762    	; 0x3a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d9 c2       	rjmp	.+1458   	; 0x66c <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__vector_47>
      c0:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_48>
      c4:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__vector_49>
      c8:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_50>
      cc:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_51>
      d0:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_52>
      d4:	67 c1       	rjmp	.+718    	; 0x3a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	65 c1       	rjmp	.+714    	; 0x3a4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	63 c1       	rjmp	.+710    	; 0x3a4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	61 c1       	rjmp	.+706    	; 0x3a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	5c c5       	rjmp	.+2744   	; 0xbd6 <__vector_71>
     11e:	00 00       	nop
     120:	97 c5       	rjmp	.+2862   	; 0xc50 <__vector_72>
     122:	00 00       	nop
     124:	d2 c5       	rjmp	.+2980   	; 0xcca <__vector_73>
     126:	00 00       	nop
     128:	0d c6       	rjmp	.+3098   	; 0xd44 <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	39 c1       	rjmp	.+626    	; 0x3a4 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_77>
     138:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_78>
     13c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_79>
     140:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_80>
     144:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_81>
     148:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_82>
     14c:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_83>
     150:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_84>
     154:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_85>
     158:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_86>
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__vector_91>
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	fb c0       	rjmp	.+502    	; 0x3a4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f9 c0       	rjmp	.+498    	; 0x3a4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	f7 c0       	rjmp	.+494    	; 0x3a4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	f5 c0       	rjmp	.+490    	; 0x3a4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	f3 c0       	rjmp	.+486    	; 0x3a4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	f1 c0       	rjmp	.+482    	; 0x3a4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	ef c0       	rjmp	.+478    	; 0x3a4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ed c0       	rjmp	.+474    	; 0x3a4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	eb c0       	rjmp	.+470    	; 0x3a4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e9 c0       	rjmp	.+466    	; 0x3a4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	e7 c0       	rjmp	.+462    	; 0x3a4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c0       	rjmp	.+442    	; 0x3a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c0       	rjmp	.+434    	; 0x3a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <usart_init_rs232+0x4c>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	12 e2       	ldi	r17, 0x22	; 34
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	f4 e5       	ldi	r31, 0x54	; 84
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 37       	cpi	r26, 0x70	; 112
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	23 e2       	ldi	r18, 0x23	; 35
     38e:	a0 e7       	ldi	r26, 0x70	; 112
     390:	b2 e2       	ldi	r27, 0x22	; 34
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	ae 33       	cpi	r26, 0x3E	; 62
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <main>
     3a0:	0c 94 ff 29 	jmp	0x53fe	; 0x53fe <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     3b0:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <stdio_base>
     3b4:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <stdio_base+0x1>
     3b8:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <ptr_get>
     3bc:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <ptr_get+0x1>
     3c0:	be 01       	movw	r22, r28
     3c2:	6f 5f       	subi	r22, 0xFF	; 255
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	19 95       	eicall
	return c;
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ca:	08 2e       	mov	r0, r24
     3cc:	00 0c       	add	r0, r0
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0f 90       	pop	r0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     3d8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     3da:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <stdio_base>
     3de:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <stdio_base+0x1>
     3e2:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <ptr_put>
     3e6:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <ptr_put+0x1>
     3ea:	19 95       	eicall
     3ec:	99 23       	and	r25, r25
     3ee:	1c f0       	brlt	.+6      	; 0x3f6 <_write+0x1e>
		return -1;
	}
	return 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     3fa:	08 95       	ret

000003fc <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3fc:	81 15       	cp	r24, r1
     3fe:	92 40       	sbci	r25, 0x02	; 2
     400:	59 f4       	brne	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     402:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <__data_end>
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	98 0f       	add	r25, r24
     40a:	90 93 70 22 	sts	0x2270, r25	; 0x802270 <__data_end>
     40e:	81 11       	cpse	r24, r1
     410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     412:	62 e0       	ldi	r22, 0x02	; 2
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	4a c6       	rjmp	.+3220   	; 0x10ac <sysclk_enable_module>
     418:	08 95       	ret

0000041a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     41a:	81 15       	cp	r24, r1
     41c:	92 40       	sbci	r25, 0x02	; 2
     41e:	51 f4       	brne	.+20     	; 0x434 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     420:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <__data_end>
     424:	81 50       	subi	r24, 0x01	; 1
     426:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <__data_end>
     42a:	81 11       	cpse	r24, r1
     42c:	03 c0       	rjmp	.+6      	; 0x434 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	52 c6       	rjmp	.+3236   	; 0x10d8 <sysclk_disable_module>
     434:	08 95       	ret

00000436 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	1f 92       	push	r1
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     44a:	8f b7       	in	r24, 0x3f	; 63
     44c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     44e:	f8 94       	cli
	return flags;
     450:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     452:	c7 01       	movw	r24, r14
     454:	d3 df       	rcall	.-90     	; 0x3fc <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     456:	f7 01       	movw	r30, r14
     458:	80 81       	ld	r24, Z
     45a:	81 60       	ori	r24, 0x01	; 1
     45c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     45e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     460:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <sleepmgr_locks+0x1>
     464:	8f 3f       	cpi	r24, 0xFF	; 255
     466:	09 f4       	brne	.+2      	; 0x46a <adc_enable+0x34>
     468:	ff cf       	rjmp	.-2      	; 0x468 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     46a:	8f b7       	in	r24, 0x3f	; 63
     46c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     46e:	f8 94       	cli
	return flags;
     470:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     472:	ee ec       	ldi	r30, 0xCE	; 206
     474:	f2 e2       	ldi	r31, 0x22	; 34
     476:	81 81       	ldd	r24, Z+1	; 0x01
     478:	8f 5f       	subi	r24, 0xFF	; 255
     47a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     47c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	08 95       	ret

0000048e <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	1f 92       	push	r1
     496:	1f 92       	push	r1
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     49c:	2f b7       	in	r18, 0x3f	; 63
     49e:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     4a0:	f8 94       	cli
	return flags;
     4a2:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 81       	ld	r18, Z
     4a8:	2e 7f       	andi	r18, 0xFE	; 254
     4aa:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     4ac:	b6 df       	rcall	.-148    	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ae:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     4b0:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <sleepmgr_locks+0x1>
     4b4:	81 11       	cpse	r24, r1
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <adc_disable+0x2c>
     4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <adc_disable+0x2a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4ba:	8f b7       	in	r24, 0x3f	; 63
     4bc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     4be:	f8 94       	cli
	return flags;
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     4c2:	ee ec       	ldi	r30, 0xCE	; 206
     4c4:	f2 e2       	ldi	r31, 0x22	; 34
     4c6:	81 81       	ldd	r24, Z+1	; 0x01
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4cc:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	08 95       	ret

000004da <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     4de:	e0 91 71 22 	lds	r30, 0x2271	; 0x802271 <transfer>
     4e2:	f0 91 72 22 	lds	r31, 0x2272	; 0x802272 <transfer+0x1>
     4e6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     4e8:	83 ff       	sbrs	r24, 3
     4ea:	08 c0       	rjmp	.+16     	; 0x4fc <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     4ec:	88 60       	ori	r24, 0x08	; 8
     4ee:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     4f0:	83 e0       	ldi	r24, 0x03	; 3
     4f2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     4f4:	86 ef       	ldi	r24, 0xF6	; 246
     4f6:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <transfer+0xa>
     4fa:	83 c0       	rjmp	.+262    	; 0x602 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     4fc:	98 2f       	mov	r25, r24
     4fe:	94 71       	andi	r25, 0x14	; 20
     500:	31 f0       	breq	.+12     	; 0x50e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <transfer+0xa>
     50c:	7a c0       	rjmp	.+244    	; 0x602 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     50e:	86 ff       	sbrs	r24, 6
     510:	43 c0       	rjmp	.+134    	; 0x598 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     512:	c1 e7       	ldi	r28, 0x71	; 113
     514:	d2 e2       	ldi	r29, 0x22	; 34
     516:	aa 81       	ldd	r26, Y+2	; 0x02
     518:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     51a:	8c 81       	ldd	r24, Y+4	; 0x04
     51c:	9d 81       	ldd	r25, Y+5	; 0x05
     51e:	14 96       	adiw	r26, 0x04	; 4
     520:	2d 91       	ld	r18, X+
     522:	3c 91       	ld	r19, X
     524:	15 97       	sbiw	r26, 0x05	; 5
     526:	82 17       	cp	r24, r18
     528:	93 07       	cpc	r25, r19
     52a:	6c f4       	brge	.+26     	; 0x546 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     52c:	9c 01       	movw	r18, r24
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	20 93 75 22 	sts	0x2275, r18	; 0x802275 <transfer+0x4>
     536:	30 93 76 22 	sts	0x2276, r19	; 0x802276 <transfer+0x5>
     53a:	a8 0f       	add	r26, r24
     53c:	b9 1f       	adc	r27, r25
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	8c 91       	ld	r24, X
     542:	87 83       	std	Z+7, r24	; 0x07
     544:	5e c0       	rjmp	.+188    	; 0x602 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     546:	80 91 77 22 	lds	r24, 0x2277	; 0x802277 <transfer+0x6>
     54a:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <transfer+0x7>
     54e:	18 96       	adiw	r26, 0x08	; 8
     550:	2d 91       	ld	r18, X+
     552:	3c 91       	ld	r19, X
     554:	19 97       	sbiw	r26, 0x09	; 9
     556:	82 17       	cp	r24, r18
     558:	93 07       	cpc	r25, r19
     55a:	c8 f4       	brcc	.+50     	; 0x58e <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     55c:	20 91 79 22 	lds	r18, 0x2279	; 0x802279 <transfer+0x8>
     560:	22 23       	and	r18, r18
     562:	21 f0       	breq	.+8      	; 0x56c <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     564:	86 81       	ldd	r24, Z+6	; 0x06
     566:	81 60       	ori	r24, 0x01	; 1
     568:	86 83       	std	Z+6, r24	; 0x06
     56a:	4b c0       	rjmp	.+150    	; 0x602 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     56c:	16 96       	adiw	r26, 0x06	; 6
     56e:	2d 91       	ld	r18, X+
     570:	3c 91       	ld	r19, X
     572:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     574:	ac 01       	movw	r20, r24
     576:	4f 5f       	subi	r20, 0xFF	; 255
     578:	5f 4f       	sbci	r21, 0xFF	; 255
     57a:	40 93 77 22 	sts	0x2277, r20	; 0x802277 <transfer+0x6>
     57e:	50 93 78 22 	sts	0x2278, r21	; 0x802278 <transfer+0x7>
     582:	d9 01       	movw	r26, r18
     584:	a8 0f       	add	r26, r24
     586:	b9 1f       	adc	r27, r25
     588:	8c 91       	ld	r24, X
     58a:	87 83       	std	Z+7, r24	; 0x07
     58c:	3a c0       	rjmp	.+116    	; 0x602 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     592:	10 92 7b 22 	sts	0x227B, r1	; 0x80227b <transfer+0xa>
     596:	35 c0       	rjmp	.+106    	; 0x602 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     598:	88 23       	and	r24, r24
     59a:	84 f5       	brge	.+96     	; 0x5fc <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     59c:	a1 e7       	ldi	r26, 0x71	; 113
     59e:	b2 e2       	ldi	r27, 0x22	; 34
     5a0:	12 96       	adiw	r26, 0x02	; 2
     5a2:	cd 91       	ld	r28, X+
     5a4:	dc 91       	ld	r29, X
     5a6:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     5a8:	16 96       	adiw	r26, 0x06	; 6
     5aa:	8d 91       	ld	r24, X+
     5ac:	9c 91       	ld	r25, X
     5ae:	17 97       	sbiw	r26, 0x07	; 7
     5b0:	28 85       	ldd	r18, Y+8	; 0x08
     5b2:	39 85       	ldd	r19, Y+9	; 0x09
     5b4:	82 17       	cp	r24, r18
     5b6:	93 07       	cpc	r25, r19
     5b8:	d8 f4       	brcc	.+54     	; 0x5f0 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     5ba:	6e 81       	ldd	r22, Y+6	; 0x06
     5bc:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     5be:	9c 01       	movw	r18, r24
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
     5c4:	20 93 77 22 	sts	0x2277, r18	; 0x802277 <transfer+0x6>
     5c8:	30 93 78 22 	sts	0x2278, r19	; 0x802278 <transfer+0x7>
     5cc:	47 81       	ldd	r20, Z+7	; 0x07
     5ce:	db 01       	movw	r26, r22
     5d0:	a8 0f       	add	r26, r24
     5d2:	b9 1f       	adc	r27, r25
     5d4:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     5d6:	88 85       	ldd	r24, Y+8	; 0x08
     5d8:	99 85       	ldd	r25, Y+9	; 0x09
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	18 f4       	brcc	.+6      	; 0x5e6 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	83 83       	std	Z+3, r24	; 0x03
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     5e6:	87 e0       	ldi	r24, 0x07	; 7
     5e8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     5ea:	10 92 7b 22 	sts	0x227B, r1	; 0x80227b <transfer+0xa>
     5ee:	09 c0       	rjmp	.+18     	; 0x602 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     5f4:	89 ef       	ldi	r24, 0xF9	; 249
     5f6:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <transfer+0xa>
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     5fc:	8b ef       	ldi	r24, 0xFB	; 251
     5fe:	80 93 7b 22 	sts	0x227B, r24	; 0x80227b <transfer+0xa>
	}
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	08 b6       	in	r0, 0x38	; 56
     614:	0f 92       	push	r0
     616:	18 be       	out	0x38, r1	; 56
     618:	09 b6       	in	r0, 0x39	; 57
     61a:	0f 92       	push	r0
     61c:	19 be       	out	0x39, r1	; 57
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	1b be       	out	0x3b, r1	; 59
     624:	2f 93       	push	r18
     626:	3f 93       	push	r19
     628:	4f 93       	push	r20
     62a:	5f 93       	push	r21
     62c:	6f 93       	push	r22
     62e:	7f 93       	push	r23
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	bf 93       	push	r27
     638:	ef 93       	push	r30
     63a:	ff 93       	push	r31
     63c:	4e df       	rcall	.-356    	; 0x4da <twim_interrupt_handler>
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	bf 91       	pop	r27
     644:	af 91       	pop	r26
     646:	9f 91       	pop	r25
     648:	8f 91       	pop	r24
     64a:	7f 91       	pop	r23
     64c:	6f 91       	pop	r22
     64e:	5f 91       	pop	r21
     650:	4f 91       	pop	r20
     652:	3f 91       	pop	r19
     654:	2f 91       	pop	r18
     656:	0f 90       	pop	r0
     658:	0b be       	out	0x3b, r0	; 59
     65a:	0f 90       	pop	r0
     65c:	09 be       	out	0x39, r0	; 57
     65e:	0f 90       	pop	r0
     660:	08 be       	out	0x38, r0	; 56
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     66c:	1f 92       	push	r1
     66e:	0f 92       	push	r0
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	0f 92       	push	r0
     674:	11 24       	eor	r1, r1
     676:	08 b6       	in	r0, 0x38	; 56
     678:	0f 92       	push	r0
     67a:	18 be       	out	0x38, r1	; 56
     67c:	09 b6       	in	r0, 0x39	; 57
     67e:	0f 92       	push	r0
     680:	19 be       	out	0x39, r1	; 57
     682:	0b b6       	in	r0, 0x3b	; 59
     684:	0f 92       	push	r0
     686:	1b be       	out	0x3b, r1	; 59
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	ef 93       	push	r30
     69e:	ff 93       	push	r31
     6a0:	1c df       	rcall	.-456    	; 0x4da <twim_interrupt_handler>
     6a2:	ff 91       	pop	r31
     6a4:	ef 91       	pop	r30
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	0f 90       	pop	r0
     6bc:	0b be       	out	0x3b, r0	; 59
     6be:	0f 90       	pop	r0
     6c0:	09 be       	out	0x39, r0	; 57
     6c2:	0f 90       	pop	r0
     6c4:	08 be       	out	0x38, r0	; 56
     6c6:	0f 90       	pop	r0
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	0f 90       	pop	r0
     6cc:	1f 90       	pop	r1
     6ce:	18 95       	reti

000006d0 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     6d0:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     6d2:	db 01       	movw	r26, r22
     6d4:	14 96       	adiw	r26, 0x04	; 4
     6d6:	8c 91       	ld	r24, X
     6d8:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     6da:	88 eb       	ldi	r24, 0xB8	; 184
     6dc:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     6e2:	e1 e7       	ldi	r30, 0x71	; 113
     6e4:	f2 e2       	ldi	r31, 0x22	; 34
     6e6:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     6e8:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     6ea:	e0 ea       	ldi	r30, 0xA0	; 160
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	82 60       	ori	r24, 0x02	; 2
     6f2:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     6f4:	78 94       	sei

	return STATUS_OK;
}
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	08 95       	ret

000006fa <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	1f 92       	push	r1
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	9c 01       	movw	r18, r24
     706:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     708:	89 2b       	or	r24, r25
     70a:	09 f4       	brne	.+2      	; 0x70e <twi_master_transfer+0x14>
     70c:	51 c0       	rjmp	.+162    	; 0x7b0 <twi_master_transfer+0xb6>
     70e:	30 97       	sbiw	r30, 0x00	; 0
     710:	09 f4       	brne	.+2      	; 0x714 <twi_master_transfer+0x1a>
     712:	50 c0       	rjmp	.+160    	; 0x7b4 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     714:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     716:	80 91 7a 22 	lds	r24, 0x227A	; 0x80227a <transfer+0x9>
     71a:	88 23       	and	r24, r24
     71c:	19 f0       	breq	.+6      	; 0x724 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     71e:	99 23       	and	r25, r25
     720:	f1 f3       	breq	.-4      	; 0x71e <twi_master_transfer+0x24>
     722:	4a c0       	rjmp	.+148    	; 0x7b8 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     724:	8f b7       	in	r24, 0x3f	; 63
     726:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     728:	f8 94       	cli
	return flags;
     72a:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     72c:	a1 e7       	ldi	r26, 0x71	; 113
     72e:	b2 e2       	ldi	r27, 0x22	; 34
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	19 96       	adiw	r26, 0x09	; 9
     734:	9c 93       	st	X, r25
     736:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     738:	90 e8       	ldi	r25, 0x80	; 128
     73a:	1a 96       	adiw	r26, 0x0a	; 10
     73c:	9c 93       	st	X, r25
     73e:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     740:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     742:	2d 93       	st	X+, r18
     744:	3c 93       	st	X, r19
     746:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     748:	12 96       	adiw	r26, 0x02	; 2
     74a:	6d 93       	st	X+, r22
     74c:	7c 93       	st	X, r23
     74e:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     750:	14 96       	adiw	r26, 0x04	; 4
     752:	1d 92       	st	X+, r1
     754:	1c 92       	st	X, r1
     756:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     758:	16 96       	adiw	r26, 0x06	; 6
     75a:	1d 92       	st	X+, r1
     75c:	1c 92       	st	X, r1
     75e:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     760:	18 96       	adiw	r26, 0x08	; 8
     762:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     764:	80 81       	ld	r24, Z
     766:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     768:	64 81       	ldd	r22, Z+4	; 0x04
     76a:	75 81       	ldd	r23, Z+5	; 0x05
     76c:	67 2b       	or	r22, r23
     76e:	11 f4       	brne	.+4      	; 0x774 <twi_master_transfer+0x7a>
     770:	41 11       	cpse	r20, r1
     772:	03 c0       	rjmp	.+6      	; 0x77a <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     774:	f9 01       	movw	r30, r18
     776:	86 83       	std	Z+6, r24	; 0x06
     778:	03 c0       	rjmp	.+6      	; 0x780 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     77a:	81 60       	ori	r24, 0x01	; 1
     77c:	f9 01       	movw	r30, r18
     77e:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     780:	e1 e7       	ldi	r30, 0x71	; 113
     782:	f2 e2       	ldi	r31, 0x22	; 34
     784:	92 85       	ldd	r25, Z+10	; 0x0a
     786:	90 38       	cpi	r25, 0x80	; 128
     788:	e9 f3       	breq	.-6      	; 0x784 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     78a:	f9 01       	movw	r30, r18
     78c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     78e:	83 70       	andi	r24, 0x03	; 3
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	49 f0       	breq	.+18     	; 0x7a6 <twi_master_transfer+0xac>
     794:	a1 e7       	ldi	r26, 0x71	; 113
     796:	b2 e2       	ldi	r27, 0x22	; 34
     798:	ed 91       	ld	r30, X+
     79a:	fc 91       	ld	r31, X
     79c:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     79e:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     7a0:	83 70       	andi	r24, 0x03	; 3
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	c9 f7       	brne	.-14     	; 0x798 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
     7a6:	e1 e7       	ldi	r30, 0x71	; 113
     7a8:	f2 e2       	ldi	r31, 0x22	; 34
     7aa:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     7ac:	11 86       	std	Z+9, r1	; 0x09
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     7b0:	88 ef       	ldi	r24, 0xF8	; 248
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <twi_master_transfer+0xc0>
     7b4:	88 ef       	ldi	r24, 0xF8	; 248
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     7b8:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     7c2:	fc 01       	movw	r30, r24
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	95 ff       	sbrs	r25, 5
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <usart_putchar+0x2>
     7ca:	60 83       	st	Z, r22
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	08 95       	ret

000007d2 <usart_getchar>:
     7d2:	fc 01       	movw	r30, r24
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	99 23       	and	r25, r25
     7d8:	ec f7       	brge	.-6      	; 0x7d4 <usart_getchar+0x2>
     7da:	80 81       	ld	r24, Z
     7dc:	08 95       	ret

000007de <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     7de:	4f 92       	push	r4
     7e0:	5f 92       	push	r5
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	7c 01       	movw	r14, r24
     7fa:	4a 01       	movw	r8, r20
     7fc:	5b 01       	movw	r10, r22
     7fe:	28 01       	movw	r4, r16
     800:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     802:	fc 01       	movw	r30, r24
     804:	84 81       	ldd	r24, Z+4	; 0x04
     806:	82 ff       	sbrs	r24, 2
     808:	16 c0       	rjmp	.+44     	; 0x836 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     80a:	d9 01       	movw	r26, r18
     80c:	c8 01       	movw	r24, r16
     80e:	68 94       	set
     810:	12 f8       	bld	r1, 2
     812:	b6 95       	lsr	r27
     814:	a7 95       	ror	r26
     816:	97 95       	ror	r25
     818:	87 95       	ror	r24
     81a:	16 94       	lsr	r1
     81c:	d1 f7       	brne	.-12     	; 0x812 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     81e:	b9 01       	movw	r22, r18
     820:	a8 01       	movw	r20, r16
     822:	03 2e       	mov	r0, r19
     824:	36 e1       	ldi	r19, 0x16	; 22
     826:	76 95       	lsr	r23
     828:	67 95       	ror	r22
     82a:	57 95       	ror	r21
     82c:	47 95       	ror	r20
     82e:	3a 95       	dec	r19
     830:	d1 f7       	brne	.-12     	; 0x826 <usart_set_baudrate+0x48>
     832:	30 2d       	mov	r19, r0
     834:	15 c0       	rjmp	.+42     	; 0x860 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     836:	d9 01       	movw	r26, r18
     838:	c8 01       	movw	r24, r16
     83a:	68 94       	set
     83c:	13 f8       	bld	r1, 3
     83e:	b6 95       	lsr	r27
     840:	a7 95       	ror	r26
     842:	97 95       	ror	r25
     844:	87 95       	ror	r24
     846:	16 94       	lsr	r1
     848:	d1 f7       	brne	.-12     	; 0x83e <usart_set_baudrate+0x60>
		min_rate /= 2;
     84a:	b9 01       	movw	r22, r18
     84c:	a8 01       	movw	r20, r16
     84e:	03 2e       	mov	r0, r19
     850:	37 e1       	ldi	r19, 0x17	; 23
     852:	76 95       	lsr	r23
     854:	67 95       	ror	r22
     856:	57 95       	ror	r21
     858:	47 95       	ror	r20
     85a:	3a 95       	dec	r19
     85c:	d1 f7       	brne	.-12     	; 0x852 <usart_set_baudrate+0x74>
     85e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     860:	88 15       	cp	r24, r8
     862:	99 05       	cpc	r25, r9
     864:	aa 05       	cpc	r26, r10
     866:	bb 05       	cpc	r27, r11
     868:	08 f4       	brcc	.+2      	; 0x86c <usart_set_baudrate+0x8e>
     86a:	a6 c0       	rjmp	.+332    	; 0x9b8 <usart_set_baudrate+0x1da>
     86c:	84 16       	cp	r8, r20
     86e:	95 06       	cpc	r9, r21
     870:	a6 06       	cpc	r10, r22
     872:	b7 06       	cpc	r11, r23
     874:	08 f4       	brcc	.+2      	; 0x878 <usart_set_baudrate+0x9a>
     876:	a2 c0       	rjmp	.+324    	; 0x9bc <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     878:	f7 01       	movw	r30, r14
     87a:	84 81       	ldd	r24, Z+4	; 0x04
     87c:	82 fd       	sbrc	r24, 2
     87e:	04 c0       	rjmp	.+8      	; 0x888 <usart_set_baudrate+0xaa>
		baud *= 2;
     880:	88 0c       	add	r8, r8
     882:	99 1c       	adc	r9, r9
     884:	aa 1c       	adc	r10, r10
     886:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     888:	c3 01       	movw	r24, r6
     88a:	b2 01       	movw	r22, r4
     88c:	a5 01       	movw	r20, r10
     88e:	94 01       	movw	r18, r8
     890:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     894:	2f 3f       	cpi	r18, 0xFF	; 255
     896:	31 05       	cpc	r19, r1
     898:	41 05       	cpc	r20, r1
     89a:	51 05       	cpc	r21, r1
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <usart_set_baudrate+0xc2>
     89e:	90 c0       	rjmp	.+288    	; 0x9c0 <usart_set_baudrate+0x1e2>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	c9 ef       	ldi	r28, 0xF9	; 249
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <usart_set_baudrate+0xd8>
     8ac:	28 17       	cp	r18, r24
     8ae:	39 07       	cpc	r19, r25
     8b0:	4a 07       	cpc	r20, r26
     8b2:	5b 07       	cpc	r21, r27
     8b4:	58 f0       	brcs	.+22     	; 0x8cc <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	aa 1f       	adc	r26, r26
     8bc:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     8be:	cd 3f       	cpi	r28, 0xFD	; 253
     8c0:	0c f4       	brge	.+2      	; 0x8c4 <usart_set_baudrate+0xe6>
			limit |= 1;
     8c2:	81 60       	ori	r24, 0x01	; 1
     8c4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     8c6:	c7 30       	cpi	r28, 0x07	; 7
     8c8:	89 f7       	brne	.-30     	; 0x8ac <usart_set_baudrate+0xce>
     8ca:	4f c0       	rjmp	.+158    	; 0x96a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     8cc:	cc 23       	and	r28, r28
     8ce:	0c f0       	brlt	.+2      	; 0x8d2 <usart_set_baudrate+0xf4>
     8d0:	4c c0       	rjmp	.+152    	; 0x96a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8d2:	d5 01       	movw	r26, r10
     8d4:	c4 01       	movw	r24, r8
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	aa 1f       	adc	r26, r26
     8dc:	bb 1f       	adc	r27, r27
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	aa 1f       	adc	r26, r26
     8ec:	bb 1f       	adc	r27, r27
     8ee:	48 1a       	sub	r4, r24
     8f0:	59 0a       	sbc	r5, r25
     8f2:	6a 0a       	sbc	r6, r26
     8f4:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     8f6:	ce 3f       	cpi	r28, 0xFE	; 254
     8f8:	f4 f4       	brge	.+60     	; 0x936 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     8fa:	8d ef       	ldi	r24, 0xFD	; 253
     8fc:	9f ef       	ldi	r25, 0xFF	; 255
     8fe:	8c 1b       	sub	r24, r28
     900:	91 09       	sbc	r25, r1
     902:	c7 fd       	sbrc	r28, 7
     904:	93 95       	inc	r25
     906:	04 c0       	rjmp	.+8      	; 0x910 <usart_set_baudrate+0x132>
     908:	44 0c       	add	r4, r4
     90a:	55 1c       	adc	r5, r5
     90c:	66 1c       	adc	r6, r6
     90e:	77 1c       	adc	r7, r7
     910:	8a 95       	dec	r24
     912:	d2 f7       	brpl	.-12     	; 0x908 <usart_set_baudrate+0x12a>
     914:	d5 01       	movw	r26, r10
     916:	c4 01       	movw	r24, r8
     918:	b6 95       	lsr	r27
     91a:	a7 95       	ror	r26
     91c:	97 95       	ror	r25
     91e:	87 95       	ror	r24
     920:	bc 01       	movw	r22, r24
     922:	cd 01       	movw	r24, r26
     924:	64 0d       	add	r22, r4
     926:	75 1d       	adc	r23, r5
     928:	86 1d       	adc	r24, r6
     92a:	97 1d       	adc	r25, r7
     92c:	a5 01       	movw	r20, r10
     92e:	94 01       	movw	r18, r8
     930:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
     934:	37 c0       	rjmp	.+110    	; 0x9a4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	8c 0f       	add	r24, r28
     93a:	a5 01       	movw	r20, r10
     93c:	94 01       	movw	r18, r8
     93e:	04 c0       	rjmp	.+8      	; 0x948 <usart_set_baudrate+0x16a>
     940:	22 0f       	add	r18, r18
     942:	33 1f       	adc	r19, r19
     944:	44 1f       	adc	r20, r20
     946:	55 1f       	adc	r21, r21
     948:	8a 95       	dec	r24
     94a:	d2 f7       	brpl	.-12     	; 0x940 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     94c:	da 01       	movw	r26, r20
     94e:	c9 01       	movw	r24, r18
     950:	b6 95       	lsr	r27
     952:	a7 95       	ror	r26
     954:	97 95       	ror	r25
     956:	87 95       	ror	r24
     958:	bc 01       	movw	r22, r24
     95a:	cd 01       	movw	r24, r26
     95c:	64 0d       	add	r22, r4
     95e:	75 1d       	adc	r23, r5
     960:	86 1d       	adc	r24, r6
     962:	97 1d       	adc	r25, r7
     964:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
     968:	1d c0       	rjmp	.+58     	; 0x9a4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	8c 0f       	add	r24, r28
     96e:	a5 01       	movw	r20, r10
     970:	94 01       	movw	r18, r8
     972:	04 c0       	rjmp	.+8      	; 0x97c <usart_set_baudrate+0x19e>
     974:	22 0f       	add	r18, r18
     976:	33 1f       	adc	r19, r19
     978:	44 1f       	adc	r20, r20
     97a:	55 1f       	adc	r21, r21
     97c:	8a 95       	dec	r24
     97e:	d2 f7       	brpl	.-12     	; 0x974 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     980:	da 01       	movw	r26, r20
     982:	c9 01       	movw	r24, r18
     984:	b6 95       	lsr	r27
     986:	a7 95       	ror	r26
     988:	97 95       	ror	r25
     98a:	87 95       	ror	r24
     98c:	bc 01       	movw	r22, r24
     98e:	cd 01       	movw	r24, r26
     990:	64 0d       	add	r22, r4
     992:	75 1d       	adc	r23, r5
     994:	86 1d       	adc	r24, r6
     996:	97 1d       	adc	r25, r7
     998:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
     99c:	21 50       	subi	r18, 0x01	; 1
     99e:	31 09       	sbc	r19, r1
     9a0:	41 09       	sbc	r20, r1
     9a2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     9a4:	83 2f       	mov	r24, r19
     9a6:	8f 70       	andi	r24, 0x0F	; 15
     9a8:	c2 95       	swap	r28
     9aa:	c0 7f       	andi	r28, 0xF0	; 240
     9ac:	c8 2b       	or	r28, r24
     9ae:	f7 01       	movw	r30, r14
     9b0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     9b2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	18 c0       	rjmp	.+48     	; 0x9e8 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	16 c0       	rjmp	.+44     	; 0x9e8 <usart_set_baudrate+0x20a>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	14 c0       	rjmp	.+40     	; 0x9e8 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     9c0:	d5 01       	movw	r26, r10
     9c2:	c4 01       	movw	r24, r8
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	aa 1f       	adc	r26, r26
     9ca:	bb 1f       	adc	r27, r27
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	aa 1f       	adc	r26, r26
     9d2:	bb 1f       	adc	r27, r27
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	aa 1f       	adc	r26, r26
     9da:	bb 1f       	adc	r27, r27
     9dc:	48 1a       	sub	r4, r24
     9de:	59 0a       	sbc	r5, r25
     9e0:	6a 0a       	sbc	r6, r26
     9e2:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9e4:	c9 ef       	ldi	r28, 0xF9	; 249
     9e6:	89 cf       	rjmp	.-238    	; 0x8fa <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	08 95       	ret

00000a04 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	ec 01       	movw	r28, r24
     a0e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	09 f4       	brne	.+2      	; 0xa16 <usart_init_rs232+0x12>
     a14:	be c0       	rjmp	.+380    	; 0xb92 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     a16:	80 3c       	cpi	r24, 0xC0	; 192
     a18:	91 05       	cpc	r25, r1
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     a1c:	60 e1       	ldi	r22, 0x10	; 16
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	45 d3       	rcall	.+1674   	; 0x10ac <sysclk_enable_module>
     a22:	b7 c0       	rjmp	.+366    	; 0xb92 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     a24:	c1 15       	cp	r28, r1
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	d8 07       	cpc	r29, r24
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     a2c:	64 e0       	ldi	r22, 0x04	; 4
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	3d d3       	rcall	.+1658   	; 0x10ac <sysclk_enable_module>
     a32:	af c0       	rjmp	.+350    	; 0xb92 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     a34:	c0 38       	cpi	r28, 0x80	; 128
     a36:	e1 e0       	ldi	r30, 0x01	; 1
     a38:	de 07       	cpc	r29, r30
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	35 d3       	rcall	.+1642   	; 0x10ac <sysclk_enable_module>
     a42:	a7 c0       	rjmp	.+334    	; 0xb92 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     a44:	c1 15       	cp	r28, r1
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0x50>
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	2d d3       	rcall	.+1626   	; 0x10ac <sysclk_enable_module>
     a52:	9f c0       	rjmp	.+318    	; 0xb92 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     a54:	c0 38       	cpi	r28, 0x80	; 128
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0x60>
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	25 d3       	rcall	.+1610   	; 0x10ac <sysclk_enable_module>
     a62:	97 c0       	rjmp	.+302    	; 0xb92 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     a64:	c1 15       	cp	r28, r1
     a66:	e2 e0       	ldi	r30, 0x02	; 2
     a68:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x70>
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	1d d3       	rcall	.+1594   	; 0x10ac <sysclk_enable_module>
     a72:	8f c0       	rjmp	.+286    	; 0xb92 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     a74:	c0 32       	cpi	r28, 0x20	; 32
     a76:	f3 e0       	ldi	r31, 0x03	; 3
     a78:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x80>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	15 d3       	rcall	.+1578   	; 0x10ac <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     a82:	87 c0       	rjmp	.+270    	; 0xb92 <usart_init_rs232+0x18e>
     a84:	c1 15       	cp	r28, r1
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x90>
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	0d d3       	rcall	.+1562   	; 0x10ac <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a92:	7f c0       	rjmp	.+254    	; 0xb92 <usart_init_rs232+0x18e>
     a94:	c1 15       	cp	r28, r1
     a96:	e9 e0       	ldi	r30, 0x09	; 9
     a98:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0xa0>
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	05 d3       	rcall	.+1546   	; 0x10ac <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     aa2:	77 c0       	rjmp	.+238    	; 0xb92 <usart_init_rs232+0x18e>
     aa4:	c1 15       	cp	r28, r1
     aa6:	fa e0       	ldi	r31, 0x0A	; 10
     aa8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0xb0>
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	85 e0       	ldi	r24, 0x05	; 5
     ab0:	fd d2       	rcall	.+1530   	; 0x10ac <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     ab2:	6f c0       	rjmp	.+222    	; 0xb92 <usart_init_rs232+0x18e>
     ab4:	c0 34       	cpi	r28, 0x40	; 64
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0xc0>
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	f5 d2       	rcall	.+1514   	; 0x10ac <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     ac2:	67 c0       	rjmp	.+206    	; 0xb92 <usart_init_rs232+0x18e>
     ac4:	c0 34       	cpi	r28, 0x40	; 64
     ac6:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     ac8:	de 07       	cpc	r29, r30
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0xd0>
     acc:	62 e0       	ldi	r22, 0x02	; 2
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	ed d2       	rcall	.+1498   	; 0x10ac <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     ad2:	5f c0       	rjmp	.+190    	; 0xb92 <usart_init_rs232+0x18e>
     ad4:	c0 39       	cpi	r28, 0x90	; 144
     ad6:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     ad8:	df 07       	cpc	r29, r31
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0xe0>
     adc:	64 e0       	ldi	r22, 0x04	; 4
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	e5 d2       	rcall	.+1482   	; 0x10ac <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     ae2:	57 c0       	rjmp	.+174    	; 0xb92 <usart_init_rs232+0x18e>
     ae4:	c0 39       	cpi	r28, 0x90	; 144
     ae6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     ae8:	d8 07       	cpc	r29, r24
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0xf0>
     aec:	64 e0       	ldi	r22, 0x04	; 4
     aee:	84 e0       	ldi	r24, 0x04	; 4
     af0:	dd d2       	rcall	.+1466   	; 0x10ac <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     af2:	4f c0       	rjmp	.+158    	; 0xb92 <usart_init_rs232+0x18e>
     af4:	c0 39       	cpi	r28, 0x90	; 144
     af6:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     af8:	de 07       	cpc	r29, r30
     afa:	21 f4       	brne	.+8      	; 0xb04 <usart_init_rs232+0x100>
     afc:	64 e0       	ldi	r22, 0x04	; 4
     afe:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     b00:	d5 d2       	rcall	.+1450   	; 0x10ac <sysclk_enable_module>
     b02:	47 c0       	rjmp	.+142    	; 0xb92 <usart_init_rs232+0x18e>
     b04:	c0 3c       	cpi	r28, 0xC0	; 192
     b06:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     b08:	df 07       	cpc	r29, r31
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart_init_rs232+0x110>
     b0c:	68 e0       	ldi	r22, 0x08	; 8
     b0e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     b10:	cd d2       	rcall	.+1434   	; 0x10ac <sysclk_enable_module>
     b12:	3f c0       	rjmp	.+126    	; 0xb92 <usart_init_rs232+0x18e>
     b14:	c0 3c       	cpi	r28, 0xC0	; 192
     b16:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     b18:	d8 07       	cpc	r29, r24
     b1a:	21 f4       	brne	.+8      	; 0xb24 <usart_init_rs232+0x120>
     b1c:	68 e0       	ldi	r22, 0x08	; 8
     b1e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     b20:	c5 d2       	rcall	.+1418   	; 0x10ac <sysclk_enable_module>
     b22:	37 c0       	rjmp	.+110    	; 0xb92 <usart_init_rs232+0x18e>
     b24:	c0 3a       	cpi	r28, 0xA0	; 160
     b26:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     b28:	de 07       	cpc	r29, r30
     b2a:	21 f4       	brne	.+8      	; 0xb34 <usart_init_rs232+0x130>
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     b30:	bd d2       	rcall	.+1402   	; 0x10ac <sysclk_enable_module>
     b32:	2f c0       	rjmp	.+94     	; 0xb92 <usart_init_rs232+0x18e>
     b34:	c0 3a       	cpi	r28, 0xA0	; 160
     b36:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b38:	df 07       	cpc	r29, r31
     b3a:	21 f4       	brne	.+8      	; 0xb44 <usart_init_rs232+0x140>
     b3c:	60 e1       	ldi	r22, 0x10	; 16
     b3e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b40:	b5 d2       	rcall	.+1386   	; 0x10ac <sysclk_enable_module>
     b42:	27 c0       	rjmp	.+78     	; 0xb92 <usart_init_rs232+0x18e>
     b44:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	d8 07       	cpc	r29, r24
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_rs232+0x150>
     b4c:	60 e1       	ldi	r22, 0x10	; 16
     b4e:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b50:	ad d2       	rcall	.+1370   	; 0x10ac <sysclk_enable_module>
     b52:	1f c0       	rjmp	.+62     	; 0xb92 <usart_init_rs232+0x18e>
     b54:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b56:	e8 e0       	ldi	r30, 0x08	; 8
     b58:	de 07       	cpc	r29, r30
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_rs232+0x160>
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b60:	a5 d2       	rcall	.+1354   	; 0x10ac <sysclk_enable_module>
     b62:	17 c0       	rjmp	.+46     	; 0xb92 <usart_init_rs232+0x18e>
     b64:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b66:	f9 e0       	ldi	r31, 0x09	; 9
     b68:	df 07       	cpc	r29, r31
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_rs232+0x170>
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b70:	9d d2       	rcall	.+1338   	; 0x10ac <sysclk_enable_module>
     b72:	0f c0       	rjmp	.+30     	; 0xb92 <usart_init_rs232+0x18e>
     b74:	c0 38       	cpi	r28, 0x80	; 128
     b76:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b78:	d8 07       	cpc	r29, r24
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_rs232+0x180>
     b7c:	60 e4       	ldi	r22, 0x40	; 64
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	95 d2       	rcall	.+1322   	; 0x10ac <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <usart_init_rs232+0x18e>
     b84:	c0 3a       	cpi	r28, 0xA0	; 160
     b86:	e4 e0       	ldi	r30, 0x04	; 4
     b88:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b8a:	19 f4       	brne	.+6      	; 0xb92 <usart_init_rs232+0x18e>
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     b90:	8d d2       	rcall	.+1306   	; 0x10ac <sysclk_enable_module>
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     b96:	8d 83       	std	Y+5, r24	; 0x05
     b98:	f8 01       	movw	r30, r16
     b9a:	95 81       	ldd	r25, Z+5	; 0x05
     b9c:	84 81       	ldd	r24, Z+4	; 0x04
     b9e:	89 2b       	or	r24, r25
     ba0:	96 81       	ldd	r25, Z+6	; 0x06
     ba2:	91 11       	cpse	r25, r1
     ba4:	98 e0       	ldi	r25, 0x08	; 8
     ba6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     ba8:	8d 83       	std	Y+5, r24	; 0x05
     baa:	f8 01       	movw	r30, r16
     bac:	40 81       	ld	r20, Z
     bae:	51 81       	ldd	r21, Z+1	; 0x01
     bb0:	62 81       	ldd	r22, Z+2	; 0x02
     bb2:	73 81       	ldd	r23, Z+3	; 0x03
     bb4:	00 e8       	ldi	r16, 0x80	; 128
     bb6:	14 e8       	ldi	r17, 0x84	; 132
     bb8:	2e e1       	ldi	r18, 0x1E	; 30
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	ce 01       	movw	r24, r28
     bbe:	0f de       	rcall	.-994    	; 0x7de <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	98 60       	ori	r25, 0x08	; 8
     bc4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	90 61       	ori	r25, 0x10	; 16
     bca:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	08 b6       	in	r0, 0x38	; 56
     be2:	0f 92       	push	r0
     be4:	18 be       	out	0x38, r1	; 56
     be6:	09 b6       	in	r0, 0x39	; 57
     be8:	0f 92       	push	r0
     bea:	19 be       	out	0x39, r1	; 57
     bec:	0b b6       	in	r0, 0x3b	; 59
     bee:	0f 92       	push	r0
     bf0:	1b be       	out	0x3b, r1	; 59
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     c0a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     c0e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     c12:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <adca_callback>
     c16:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <adca_callback+0x1>
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	19 95       	eicall
}
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0b be       	out	0x3b, r0	; 59
     c3e:	0f 90       	pop	r0
     c40:	09 be       	out	0x39, r0	; 57
     c42:	0f 90       	pop	r0
     c44:	08 be       	out	0x38, r0	; 56
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	08 b6       	in	r0, 0x38	; 56
     c5c:	0f 92       	push	r0
     c5e:	18 be       	out	0x38, r1	; 56
     c60:	09 b6       	in	r0, 0x39	; 57
     c62:	0f 92       	push	r0
     c64:	19 be       	out	0x39, r1	; 57
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	1b be       	out	0x3b, r1	; 59
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     c84:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     c88:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     c8c:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <adca_callback>
     c90:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <adca_callback+0x1>
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	19 95       	eicall
}
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	0b be       	out	0x3b, r0	; 59
     cb8:	0f 90       	pop	r0
     cba:	09 be       	out	0x39, r0	; 57
     cbc:	0f 90       	pop	r0
     cbe:	08 be       	out	0x38, r0	; 56
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	08 b6       	in	r0, 0x38	; 56
     cd6:	0f 92       	push	r0
     cd8:	18 be       	out	0x38, r1	; 56
     cda:	09 b6       	in	r0, 0x39	; 57
     cdc:	0f 92       	push	r0
     cde:	19 be       	out	0x39, r1	; 57
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	1b be       	out	0x3b, r1	; 59
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     cfe:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     d02:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     d06:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <adca_callback>
     d0a:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <adca_callback+0x1>
     d0e:	64 e0       	ldi	r22, 0x04	; 4
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	19 95       	eicall
}
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0b be       	out	0x3b, r0	; 59
     d32:	0f 90       	pop	r0
     d34:	09 be       	out	0x39, r0	; 57
     d36:	0f 90       	pop	r0
     d38:	08 be       	out	0x38, r0	; 56
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	08 b6       	in	r0, 0x38	; 56
     d50:	0f 92       	push	r0
     d52:	18 be       	out	0x38, r1	; 56
     d54:	09 b6       	in	r0, 0x39	; 57
     d56:	0f 92       	push	r0
     d58:	19 be       	out	0x39, r1	; 57
     d5a:	0b b6       	in	r0, 0x3b	; 59
     d5c:	0f 92       	push	r0
     d5e:	1b be       	out	0x3b, r1	; 59
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     d78:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     d7c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     d80:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <adca_callback>
     d84:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <adca_callback+0x1>
     d88:	68 e0       	ldi	r22, 0x08	; 8
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	19 95       	eicall
}
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	09 be       	out	0x39, r0	; 57
     db0:	0f 90       	pop	r0
     db2:	08 be       	out	0x38, r0	; 56
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	1f 92       	push	r1
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     dd6:	81 15       	cp	r24, r1
     dd8:	22 e0       	ldi	r18, 0x02	; 2
     dda:	92 07       	cpc	r25, r18
     ddc:	09 f0       	breq	.+2      	; 0xde0 <adc_write_configuration+0x22>
     dde:	3c c0       	rjmp	.+120    	; 0xe58 <adc_write_configuration+0x9a>
     de0:	7b 01       	movw	r14, r22
     de2:	8c 01       	movw	r16, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     de4:	61 e2       	ldi	r22, 0x21	; 33
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     dee:	c8 2e       	mov	r12, r24
     df0:	d1 2c       	mov	r13, r1
     df2:	60 e2       	ldi	r22, 0x20	; 32
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     dfc:	dc 2c       	mov	r13, r12
     dfe:	cc 24       	eor	r12, r12
     e00:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e02:	8f b7       	in	r24, 0x3f	; 63
     e04:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e06:	f8 94       	cli
	return flags;
     e08:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     e0a:	c8 01       	movw	r24, r16
     e0c:	f7 da       	rcall	.-2578   	; 0x3fc <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     e0e:	f8 01       	movw	r30, r16
     e10:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	90 83       	st	Z, r25
	adc->CAL = cal;
     e16:	c4 86       	std	Z+12, r12	; 0x0c
     e18:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     e1a:	f7 01       	movw	r30, r14
     e1c:	25 81       	ldd	r18, Z+5	; 0x05
     e1e:	36 81       	ldd	r19, Z+6	; 0x06
     e20:	f8 01       	movw	r30, r16
     e22:	20 8f       	std	Z+24, r18	; 0x18
     e24:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     e26:	f7 01       	movw	r30, r14
     e28:	92 81       	ldd	r25, Z+2	; 0x02
     e2a:	f8 01       	movw	r30, r16
     e2c:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     e2e:	f7 01       	movw	r30, r14
     e30:	94 81       	ldd	r25, Z+4	; 0x04
     e32:	f8 01       	movw	r30, r16
     e34:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     e36:	f7 01       	movw	r30, r14
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	f8 01       	movw	r30, r16
     e3c:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     e3e:	f7 01       	movw	r30, r14
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	f8 01       	movw	r30, r16
     e44:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     e46:	81 70       	andi	r24, 0x01	; 1
     e48:	f7 01       	movw	r30, r14
     e4a:	90 81       	ld	r25, Z
     e4c:	89 2b       	or	r24, r25
     e4e:	f8 01       	movw	r30, r16
     e50:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     e52:	c8 01       	movw	r24, r16
     e54:	e2 da       	rcall	.-2620   	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e56:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	08 95       	ret

00000e6e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	1f 92       	push	r1
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8c 01       	movw	r16, r24
     e84:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e86:	8f b7       	in	r24, 0x3f	; 63
     e88:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e8a:	f8 94       	cli
	return flags;
     e8c:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     e8e:	c8 01       	movw	r24, r16
     e90:	b5 da       	rcall	.-2710   	; 0x3fc <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     e92:	f8 01       	movw	r30, r16
     e94:	80 81       	ld	r24, Z
     e96:	80 7c       	andi	r24, 0xC0	; 192
     e98:	f7 01       	movw	r30, r14
     e9a:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 8d       	ldd	r24, Z+24	; 0x18
     ea0:	91 8d       	ldd	r25, Z+25	; 0x19
     ea2:	f7 01       	movw	r30, r14
     ea4:	85 83       	std	Z+5, r24	; 0x05
     ea6:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     ea8:	f8 01       	movw	r30, r16
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	f7 01       	movw	r30, r14
     eae:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     eb0:	f8 01       	movw	r30, r16
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	f7 01       	movw	r30, r14
     eb6:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     eb8:	f8 01       	movw	r30, r16
     eba:	83 81       	ldd	r24, Z+3	; 0x03
     ebc:	f7 01       	movw	r30, r14
     ebe:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     ec0:	f8 01       	movw	r30, r16
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	f7 01       	movw	r30, r14
     ec6:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     ec8:	c8 01       	movw	r24, r16
     eca:	a7 da       	rcall	.-2738   	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ecc:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     ece:	0f 90       	pop	r0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	08 95       	ret

00000ee0 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     ee0:	af 92       	push	r10
     ee2:	bf 92       	push	r11
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	1f 92       	push	r1
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	6c 01       	movw	r12, r24
     efc:	b6 2e       	mov	r11, r22
     efe:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f00:	86 2f       	mov	r24, r22
     f02:	83 70       	andi	r24, 0x03	; 3
     f04:	29 f4       	brne	.+10     	; 0xf10 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     f06:	96 2f       	mov	r25, r22
     f08:	96 95       	lsr	r25
     f0a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f10:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f12:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f14:	90 ff       	sbrs	r25, 0
		index++;
     f16:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     f18:	86 01       	movw	r16, r12
     f1a:	00 5e       	subi	r16, 0xE0	; 224
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	98 e0       	ldi	r25, 0x08	; 8
     f20:	89 9f       	mul	r24, r25
     f22:	00 0d       	add	r16, r0
     f24:	11 1d       	adc	r17, r1
     f26:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f28:	8f b7       	in	r24, 0x3f	; 63
     f2a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f2c:	f8 94       	cli
	return flags;
     f2e:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     f30:	c6 01       	movw	r24, r12
     f32:	64 da       	rcall	.-2872   	; 0x3fc <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     f34:	f7 01       	movw	r30, r14
     f36:	80 81       	ld	r24, Z
     f38:	f8 01       	movw	r30, r16
     f3a:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     f3c:	f7 01       	movw	r30, r14
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	f8 01       	movw	r30, r16
     f42:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     f44:	f7 01       	movw	r30, r14
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	f8 01       	movw	r30, r16
     f4a:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     f4c:	b0 fe       	sbrs	r11, 0
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     f50:	f7 01       	movw	r30, r14
     f52:	83 81       	ldd	r24, Z+3	; 0x03
     f54:	f8 01       	movw	r30, r16
     f56:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     f58:	c6 01       	movw	r24, r12
     f5a:	5f da       	rcall	.-2882   	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f5c:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     f5e:	0f 90       	pop	r0
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	08 95       	ret

00000f76 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	1f 92       	push	r1
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	6c 01       	movw	r12, r24
     f92:	b6 2e       	mov	r11, r22
     f94:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f96:	86 2f       	mov	r24, r22
     f98:	83 70       	andi	r24, 0x03	; 3
     f9a:	29 f4       	brne	.+10     	; 0xfa6 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     f9c:	96 2f       	mov	r25, r22
     f9e:	96 95       	lsr	r25
     fa0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     fa6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     faa:	90 ff       	sbrs	r25, 0
		index++;
     fac:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     fae:	86 01       	movw	r16, r12
     fb0:	00 5e       	subi	r16, 0xE0	; 224
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	98 e0       	ldi	r25, 0x08	; 8
     fb6:	89 9f       	mul	r24, r25
     fb8:	00 0d       	add	r16, r0
     fba:	11 1d       	adc	r17, r1
     fbc:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fbe:	8f b7       	in	r24, 0x3f	; 63
     fc0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fc2:	f8 94       	cli
	return flags;
     fc4:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     fc6:	c6 01       	movw	r24, r12
     fc8:	19 da       	rcall	.-3022   	; 0x3fc <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     fca:	f8 01       	movw	r30, r16
     fcc:	80 81       	ld	r24, Z
     fce:	f7 01       	movw	r30, r14
     fd0:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     fd2:	f8 01       	movw	r30, r16
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	f7 01       	movw	r30, r14
     fd8:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     fda:	f8 01       	movw	r30, r16
     fdc:	81 81       	ldd	r24, Z+1	; 0x01
     fde:	f7 01       	movw	r30, r14
     fe0:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     fe2:	b0 fe       	sbrs	r11, 0
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     fe6:	f8 01       	movw	r30, r16
     fe8:	86 81       	ldd	r24, Z+6	; 0x06
     fea:	f7 01       	movw	r30, r14
     fec:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     fee:	c6 01       	movw	r24, r12
     ff0:	14 da       	rcall	.-3032   	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ff2:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	08 95       	ret

0000100c <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	7c 01       	movw	r14, r24
    101a:	8b 01       	movw	r16, r22
    101c:	ea 01       	movw	r28, r20
	while (len) {
    101e:	20 97       	sbiw	r28, 0x00	; 0
    1020:	39 f0       	breq	.+14     	; 0x1030 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1022:	f8 01       	movw	r30, r16
    1024:	61 91       	ld	r22, Z+
    1026:	8f 01       	movw	r16, r30
    1028:	c7 01       	movw	r24, r14
    102a:	cb db       	rcall	.-2154   	; 0x7c2 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    102c:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    102e:	c9 f7       	brne	.-14     	; 0x1022 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	08 95       	ret

00001040 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	1f 92       	push	r1
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1052:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1056:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    105a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    105e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1062:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1066:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    106a:	8f b7       	in	r24, 0x3f	; 63
    106c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    106e:	f8 94       	cli
	return flags;
    1070:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1072:	e0 e5       	ldi	r30, 0x50	; 80
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	84 60       	ori	r24, 0x04	; 4
    107a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    107c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    107e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1080:	82 ff       	sbrs	r24, 2
    1082:	fd cf       	rjmp	.-6      	; 0x107e <sysclk_init+0x3e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1084:	8f b7       	in	r24, 0x3f	; 63
    1086:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1088:	f8 94       	cli
	return flags;
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
		Assert((ref_id == OSC_ID_RC32KHZ) || (ref_id == OSC_ID_XOSC));
		if (ref_id == OSC_ID_XOSC) {
			osc_enable(OSC_ID_RC32KHZ);
			OSC.DFLLCTRL |= OSC_RC2MCREF_bm;
		} else {
			OSC.DFLLCTRL &= ~(OSC_RC2MCREF_bm);
    108c:	e0 e5       	ldi	r30, 0x50	; 80
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	86 81       	ldd	r24, Z+6	; 0x06
    1092:	8e 7f       	andi	r24, 0xFE	; 254
    1094:	86 83       	std	Z+6, r24	; 0x06
		}
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    1096:	e8 e6       	ldi	r30, 0x68	; 104
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10a0:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	1f 92       	push	r1
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10b6:	9f b7       	in	r25, 0x3f	; 63
    10b8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10ba:	f8 94       	cli
	return flags;
    10bc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    10be:	e8 2f       	mov	r30, r24
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	e0 59       	subi	r30, 0x90	; 144
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	60 95       	com	r22
    10c8:	80 81       	ld	r24, Z
    10ca:	68 23       	and	r22, r24
    10cc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10ce:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	1f 92       	push	r1
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10e2:	9f b7       	in	r25, 0x3f	; 63
    10e4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10e6:	f8 94       	cli
	return flags;
    10e8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    10ea:	e8 2f       	mov	r30, r24
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	e0 59       	subi	r30, 0x90	; 144
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	68 2b       	or	r22, r24
    10f6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10f8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    10fa:	0f 90       	pop	r0
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	1f 92       	push	r1
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	e0 e0       	ldi	r30, 0x00	; 0
    1112:	f4 e0       	ldi	r31, 0x04	; 4
    1114:	81 81       	ldd	r24, Z+1	; 0x01
    1116:	80 fd       	sbrc	r24, 0
    1118:	fd cf       	rjmp	.-6      	; 0x1114 <rtc_get_time+0x12>
    111a:	8f b7       	in	r24, 0x3f	; 63
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	f8 94       	cli
    1120:	29 81       	ldd	r18, Y+1	; 0x01
    1122:	40 91 d4 22 	lds	r20, 0x22D4	; 0x8022d4 <rtc_data>
    1126:	50 91 d5 22 	lds	r21, 0x22D5	; 0x8022d5 <rtc_data+0x1>
    112a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    112e:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	31 f4       	brne	.+12     	; 0x1142 <rtc_get_time+0x40>
    1136:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
    113a:	30 ff       	sbrs	r19, 0
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <rtc_get_time+0x40>
    113e:	4f 5f       	subi	r20, 0xFF	; 255
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	2f bf       	out	0x3f, r18	; 63
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	ba 01       	movw	r22, r20
    114a:	55 27       	eor	r21, r21
    114c:	44 27       	eor	r20, r20
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	8a 01       	movw	r16, r20
    1154:	9b 01       	movw	r18, r22
    1156:	08 2b       	or	r16, r24
    1158:	19 2b       	or	r17, r25
    115a:	2a 2b       	or	r18, r26
    115c:	3b 2b       	or	r19, r27
    115e:	c9 01       	movw	r24, r18
    1160:	b8 01       	movw	r22, r16
    1162:	0f 90       	pop	r0
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	97 df       	rcall	.-210    	; 0x10ac <sysclk_enable_module>
	RTC.PER = 0xffff;
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	f4 e0       	ldi	r31, 0x04	; 4
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	82 87       	std	Z+10, r24	; 0x0a
    1188:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    118a:	10 86       	std	Z+8, r1	; 0x08
    118c:	11 86       	std	Z+9, r1	; 0x09
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    118e:	80 91 d1 22 	lds	r24, 0x22D1	; 0x8022d1 <sleepmgr_locks+0x3>
    1192:	8f 3f       	cpi	r24, 0xFF	; 255
    1194:	09 f4       	brne	.+2      	; 0x1198 <rtc_init+0x2a>
    1196:	ff cf       	rjmp	.-2      	; 0x1196 <rtc_init+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1198:	8f b7       	in	r24, 0x3f	; 63
    119a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    119c:	f8 94       	cli
	return flags;
    119e:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    11a0:	ee ec       	ldi	r30, 0xCE	; 206
    11a2:	f2 e2       	ldi	r31, 0x22	; 34
    11a4:	83 81       	ldd	r24, Z+3	; 0x03
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11aa:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    11ac:	e0 e0       	ldi	r30, 0x00	; 0
    11ae:	f4 e0       	ldi	r31, 0x04	; 4
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	80 83       	st	Z, r24
}
    11b8:	0f 90       	pop	r0
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    11c0:	1f 92       	push	r1
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	0f 92       	push	r0
    11c8:	11 24       	eor	r1, r1
    11ca:	08 b6       	in	r0, 0x38	; 56
    11cc:	0f 92       	push	r0
    11ce:	18 be       	out	0x38, r1	; 56
    11d0:	0b b6       	in	r0, 0x3b	; 59
    11d2:	0f 92       	push	r0
    11d4:	1b be       	out	0x3b, r1	; 59
    11d6:	8f 93       	push	r24
    11d8:	9f 93       	push	r25
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
	rtc_data.counter_high++;
    11de:	e4 ed       	ldi	r30, 0xD4	; 212
    11e0:	f2 e2       	ldi	r31, 0x22	; 34
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	80 83       	st	Z, r24
    11ea:	91 83       	std	Z+1, r25	; 0x01
}
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	0f 90       	pop	r0
    11f6:	0b be       	out	0x3b, r0	; 59
    11f8:	0f 90       	pop	r0
    11fa:	08 be       	out	0x38, r0	; 56
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	08 b6       	in	r0, 0x38	; 56
    1212:	0f 92       	push	r0
    1214:	18 be       	out	0x38, r1	; 56
    1216:	09 b6       	in	r0, 0x39	; 57
    1218:	0f 92       	push	r0
    121a:	19 be       	out	0x39, r1	; 57
    121c:	0b b6       	in	r0, 0x3b	; 59
    121e:	0f 92       	push	r0
    1220:	1b be       	out	0x3b, r1	; 59
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1246:	e4 ed       	ldi	r30, 0xD4	; 212
    1248:	f2 e2       	ldi	r31, 0x22	; 34
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	22 81       	ldd	r18, Z+2	; 0x02
    1250:	33 81       	ldd	r19, Z+3	; 0x03
    1252:	82 17       	cp	r24, r18
    1254:	93 07       	cpc	r25, r19
    1256:	f0 f1       	brcs	.+124    	; 0x12d4 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
    125e:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <rtc_data+0x6>
    1262:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <rtc_data+0x7>
    1266:	30 97       	sbiw	r30, 0x00	; 0
    1268:	a9 f1       	breq	.+106    	; 0x12d4 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    126a:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    126e:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    1272:	a0 e0       	ldi	r26, 0x00	; 0
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	dc 01       	movw	r26, r24
    1278:	99 27       	eor	r25, r25
    127a:	88 27       	eor	r24, r24
    127c:	ab 01       	movw	r20, r22
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	8c 01       	movw	r16, r24
    1284:	9d 01       	movw	r18, r26
    1286:	04 2b       	or	r16, r20
    1288:	15 2b       	or	r17, r21
    128a:	26 2b       	or	r18, r22
    128c:	37 2b       	or	r19, r23
    128e:	c9 01       	movw	r24, r18
    1290:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    1292:	a4 ed       	ldi	r26, 0xD4	; 212
    1294:	b2 e2       	ldi	r27, 0x22	; 34
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	0d 91       	ld	r16, X+
    129a:	1c 91       	ld	r17, X
    129c:	13 97       	sbiw	r26, 0x03	; 3
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	98 01       	movw	r18, r16
    12a4:	11 27       	eor	r17, r17
    12a6:	00 27       	eor	r16, r16
    12a8:	14 96       	adiw	r26, 0x04	; 4
    12aa:	cd 90       	ld	r12, X+
    12ac:	dc 90       	ld	r13, X
    12ae:	15 97       	sbiw	r26, 0x05	; 5
    12b0:	e1 2c       	mov	r14, r1
    12b2:	f1 2c       	mov	r15, r1
    12b4:	0c 29       	or	r16, r12
    12b6:	1d 29       	or	r17, r13
    12b8:	2e 29       	or	r18, r14
    12ba:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    12bc:	06 17       	cp	r16, r22
    12be:	17 07       	cpc	r17, r23
    12c0:	28 07       	cpc	r18, r24
    12c2:	39 07       	cpc	r19, r25
    12c4:	30 f0       	brcs	.+12     	; 0x12d2 <__vector_11+0xcc>
				count = alarm + 1;
    12c6:	c9 01       	movw	r24, r18
    12c8:	b8 01       	movw	r22, r16
    12ca:	6f 5f       	subi	r22, 0xFF	; 255
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    12d2:	19 95       	eicall
		}
	}
}
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	08 b6       	in	r0, 0x38	; 56
    131a:	0f 92       	push	r0
    131c:	18 be       	out	0x38, r1	; 56
    131e:	09 b6       	in	r0, 0x39	; 57
    1320:	0f 92       	push	r0
    1322:	19 be       	out	0x39, r1	; 57
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	1b be       	out	0x3b, r1	; 59
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    1342:	e0 91 ae 22 	lds	r30, 0x22AE	; 0x8022ae <tc_tcc0_ovf_callback>
    1346:	f0 91 af 22 	lds	r31, 0x22AF	; 0x8022af <tc_tcc0_ovf_callback+0x1>
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
    134e:	19 95       	eicall
	}
}
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	09 be       	out	0x39, r0	; 57
    1370:	0f 90       	pop	r0
    1372:	08 be       	out	0x38, r0	; 56
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	08 b6       	in	r0, 0x38	; 56
    138a:	0f 92       	push	r0
    138c:	18 be       	out	0x38, r1	; 56
    138e:	09 b6       	in	r0, 0x39	; 57
    1390:	0f 92       	push	r0
    1392:	19 be       	out	0x39, r1	; 57
    1394:	0b b6       	in	r0, 0x3b	; 59
    1396:	0f 92       	push	r0
    1398:	1b be       	out	0x3b, r1	; 59
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    13b2:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <tc_tcc0_err_callback>
    13b6:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <tc_tcc0_err_callback+0x1>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_15+0x42>
		tc_tcc0_err_callback();
    13be:	19 95       	eicall
	}
}
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	09 be       	out	0x39, r0	; 57
    13e0:	0f 90       	pop	r0
    13e2:	08 be       	out	0x38, r0	; 56
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	08 b6       	in	r0, 0x38	; 56
    13fa:	0f 92       	push	r0
    13fc:	18 be       	out	0x38, r1	; 56
    13fe:	09 b6       	in	r0, 0x39	; 57
    1400:	0f 92       	push	r0
    1402:	19 be       	out	0x39, r1	; 57
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	1b be       	out	0x3b, r1	; 59
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    1422:	e0 91 aa 22 	lds	r30, 0x22AA	; 0x8022aa <tc_tcc0_cca_callback>
    1426:	f0 91 ab 22 	lds	r31, 0x22AB	; 0x8022ab <tc_tcc0_cca_callback+0x1>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_16+0x42>
		tc_tcc0_cca_callback();
    142e:	19 95       	eicall
	}
}
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	09 be       	out	0x39, r0	; 57
    1450:	0f 90       	pop	r0
    1452:	08 be       	out	0x38, r0	; 56
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	08 b6       	in	r0, 0x38	; 56
    146a:	0f 92       	push	r0
    146c:	18 be       	out	0x38, r1	; 56
    146e:	09 b6       	in	r0, 0x39	; 57
    1470:	0f 92       	push	r0
    1472:	19 be       	out	0x39, r1	; 57
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	1b be       	out	0x3b, r1	; 59
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    1492:	e0 91 a8 22 	lds	r30, 0x22A8	; 0x8022a8 <tc_tcc0_ccb_callback>
    1496:	f0 91 a9 22 	lds	r31, 0x22A9	; 0x8022a9 <tc_tcc0_ccb_callback+0x1>
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    149e:	19 95       	eicall
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0b be       	out	0x3b, r0	; 59
    14bc:	0f 90       	pop	r0
    14be:	09 be       	out	0x39, r0	; 57
    14c0:	0f 90       	pop	r0
    14c2:	08 be       	out	0x38, r0	; 56
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	08 b6       	in	r0, 0x38	; 56
    14da:	0f 92       	push	r0
    14dc:	18 be       	out	0x38, r1	; 56
    14de:	09 b6       	in	r0, 0x39	; 57
    14e0:	0f 92       	push	r0
    14e2:	19 be       	out	0x39, r1	; 57
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	1b be       	out	0x3b, r1	; 59
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    1502:	e0 91 a6 22 	lds	r30, 0x22A6	; 0x8022a6 <tc_tcc0_ccc_callback>
    1506:	f0 91 a7 22 	lds	r31, 0x22A7	; 0x8022a7 <tc_tcc0_ccc_callback+0x1>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    150e:	19 95       	eicall
	}
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	09 be       	out	0x39, r0	; 57
    1530:	0f 90       	pop	r0
    1532:	08 be       	out	0x38, r0	; 56
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	08 b6       	in	r0, 0x38	; 56
    154a:	0f 92       	push	r0
    154c:	18 be       	out	0x38, r1	; 56
    154e:	09 b6       	in	r0, 0x39	; 57
    1550:	0f 92       	push	r0
    1552:	19 be       	out	0x39, r1	; 57
    1554:	0b b6       	in	r0, 0x3b	; 59
    1556:	0f 92       	push	r0
    1558:	1b be       	out	0x3b, r1	; 59
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1572:	e0 91 a4 22 	lds	r30, 0x22A4	; 0x8022a4 <tc_tcc0_ccd_callback>
    1576:	f0 91 a5 22 	lds	r31, 0x22A5	; 0x8022a5 <tc_tcc0_ccd_callback+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    157e:	19 95       	eicall
	}
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	09 be       	out	0x39, r0	; 57
    15a0:	0f 90       	pop	r0
    15a2:	08 be       	out	0x38, r0	; 56
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	08 b6       	in	r0, 0x38	; 56
    15ba:	0f 92       	push	r0
    15bc:	18 be       	out	0x38, r1	; 56
    15be:	09 b6       	in	r0, 0x39	; 57
    15c0:	0f 92       	push	r0
    15c2:	19 be       	out	0x39, r1	; 57
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	1b be       	out	0x3b, r1	; 59
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    15e2:	e0 91 a2 22 	lds	r30, 0x22A2	; 0x8022a2 <tc_tcc1_ovf_callback>
    15e6:	f0 91 a3 22 	lds	r31, 0x22A3	; 0x8022a3 <tc_tcc1_ovf_callback+0x1>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    15ee:	19 95       	eicall
	}
}
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0b be       	out	0x3b, r0	; 59
    160c:	0f 90       	pop	r0
    160e:	09 be       	out	0x39, r0	; 57
    1610:	0f 90       	pop	r0
    1612:	08 be       	out	0x38, r0	; 56
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	08 b6       	in	r0, 0x38	; 56
    162a:	0f 92       	push	r0
    162c:	18 be       	out	0x38, r1	; 56
    162e:	09 b6       	in	r0, 0x39	; 57
    1630:	0f 92       	push	r0
    1632:	19 be       	out	0x39, r1	; 57
    1634:	0b b6       	in	r0, 0x3b	; 59
    1636:	0f 92       	push	r0
    1638:	1b be       	out	0x3b, r1	; 59
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1652:	e0 91 a0 22 	lds	r30, 0x22A0	; 0x8022a0 <tc_tcc1_err_callback>
    1656:	f0 91 a1 22 	lds	r31, 0x22A1	; 0x8022a1 <tc_tcc1_err_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_21+0x42>
		tc_tcc1_err_callback();
    165e:	19 95       	eicall
	}
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	09 be       	out	0x39, r0	; 57
    1680:	0f 90       	pop	r0
    1682:	08 be       	out	0x38, r0	; 56
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	08 b6       	in	r0, 0x38	; 56
    169a:	0f 92       	push	r0
    169c:	18 be       	out	0x38, r1	; 56
    169e:	09 b6       	in	r0, 0x39	; 57
    16a0:	0f 92       	push	r0
    16a2:	19 be       	out	0x39, r1	; 57
    16a4:	0b b6       	in	r0, 0x3b	; 59
    16a6:	0f 92       	push	r0
    16a8:	1b be       	out	0x3b, r1	; 59
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    16c2:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <tc_tcc1_cca_callback>
    16c6:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <tc_tcc1_cca_callback+0x1>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
    16ce:	19 95       	eicall
	}
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	09 be       	out	0x39, r0	; 57
    16f0:	0f 90       	pop	r0
    16f2:	08 be       	out	0x38, r0	; 56
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	08 b6       	in	r0, 0x38	; 56
    170a:	0f 92       	push	r0
    170c:	18 be       	out	0x38, r1	; 56
    170e:	09 b6       	in	r0, 0x39	; 57
    1710:	0f 92       	push	r0
    1712:	19 be       	out	0x39, r1	; 57
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	1b be       	out	0x3b, r1	; 59
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1732:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <tc_tcc1_ccb_callback>
    1736:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <tc_tcc1_ccb_callback+0x1>
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    173e:	19 95       	eicall
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	09 be       	out	0x39, r0	; 57
    1760:	0f 90       	pop	r0
    1762:	08 be       	out	0x38, r0	; 56
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	08 b6       	in	r0, 0x38	; 56
    177a:	0f 92       	push	r0
    177c:	18 be       	out	0x38, r1	; 56
    177e:	09 b6       	in	r0, 0x39	; 57
    1780:	0f 92       	push	r0
    1782:	19 be       	out	0x39, r1	; 57
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	1b be       	out	0x3b, r1	; 59
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    17a2:	e0 91 9a 22 	lds	r30, 0x229A	; 0x80229a <tc_tcd0_ovf_callback>
    17a6:	f0 91 9b 22 	lds	r31, 0x229B	; 0x80229b <tc_tcd0_ovf_callback+0x1>
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    17ae:	19 95       	eicall
	}
}
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	09 be       	out	0x39, r0	; 57
    17d0:	0f 90       	pop	r0
    17d2:	08 be       	out	0x38, r0	; 56
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	08 b6       	in	r0, 0x38	; 56
    17ea:	0f 92       	push	r0
    17ec:	18 be       	out	0x38, r1	; 56
    17ee:	09 b6       	in	r0, 0x39	; 57
    17f0:	0f 92       	push	r0
    17f2:	19 be       	out	0x39, r1	; 57
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	1b be       	out	0x3b, r1	; 59
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1812:	e0 91 98 22 	lds	r30, 0x2298	; 0x802298 <tc_tcd0_err_callback>
    1816:	f0 91 99 22 	lds	r31, 0x2299	; 0x802299 <tc_tcd0_err_callback+0x1>
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_78+0x42>
		tc_tcd0_err_callback();
    181e:	19 95       	eicall
	}
}
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	09 be       	out	0x39, r0	; 57
    1840:	0f 90       	pop	r0
    1842:	08 be       	out	0x38, r0	; 56
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	08 b6       	in	r0, 0x38	; 56
    185a:	0f 92       	push	r0
    185c:	18 be       	out	0x38, r1	; 56
    185e:	09 b6       	in	r0, 0x39	; 57
    1860:	0f 92       	push	r0
    1862:	19 be       	out	0x39, r1	; 57
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	1b be       	out	0x3b, r1	; 59
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1882:	e0 91 96 22 	lds	r30, 0x2296	; 0x802296 <tc_tcd0_cca_callback>
    1886:	f0 91 97 22 	lds	r31, 0x2297	; 0x802297 <tc_tcd0_cca_callback+0x1>
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <__vector_79+0x42>
		tc_tcd0_cca_callback();
    188e:	19 95       	eicall
	}
}
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	09 be       	out	0x39, r0	; 57
    18b0:	0f 90       	pop	r0
    18b2:	08 be       	out	0x38, r0	; 56
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	08 b6       	in	r0, 0x38	; 56
    18ca:	0f 92       	push	r0
    18cc:	18 be       	out	0x38, r1	; 56
    18ce:	09 b6       	in	r0, 0x39	; 57
    18d0:	0f 92       	push	r0
    18d2:	19 be       	out	0x39, r1	; 57
    18d4:	0b b6       	in	r0, 0x3b	; 59
    18d6:	0f 92       	push	r0
    18d8:	1b be       	out	0x3b, r1	; 59
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    18f2:	e0 91 94 22 	lds	r30, 0x2294	; 0x802294 <tc_tcd0_ccb_callback>
    18f6:	f0 91 95 22 	lds	r31, 0x2295	; 0x802295 <tc_tcd0_ccb_callback+0x1>
    18fa:	30 97       	sbiw	r30, 0x00	; 0
    18fc:	09 f0       	breq	.+2      	; 0x1900 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    18fe:	19 95       	eicall
	}
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0b be       	out	0x3b, r0	; 59
    191c:	0f 90       	pop	r0
    191e:	09 be       	out	0x39, r0	; 57
    1920:	0f 90       	pop	r0
    1922:	08 be       	out	0x38, r0	; 56
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	08 b6       	in	r0, 0x38	; 56
    193a:	0f 92       	push	r0
    193c:	18 be       	out	0x38, r1	; 56
    193e:	09 b6       	in	r0, 0x39	; 57
    1940:	0f 92       	push	r0
    1942:	19 be       	out	0x39, r1	; 57
    1944:	0b b6       	in	r0, 0x3b	; 59
    1946:	0f 92       	push	r0
    1948:	1b be       	out	0x3b, r1	; 59
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1962:	e0 91 92 22 	lds	r30, 0x2292	; 0x802292 <tc_tcd0_ccc_callback>
    1966:	f0 91 93 22 	lds	r31, 0x2293	; 0x802293 <tc_tcd0_ccc_callback+0x1>
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	09 f0       	breq	.+2      	; 0x1970 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    196e:	19 95       	eicall
	}
}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0b be       	out	0x3b, r0	; 59
    198c:	0f 90       	pop	r0
    198e:	09 be       	out	0x39, r0	; 57
    1990:	0f 90       	pop	r0
    1992:	08 be       	out	0x38, r0	; 56
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	08 b6       	in	r0, 0x38	; 56
    19aa:	0f 92       	push	r0
    19ac:	18 be       	out	0x38, r1	; 56
    19ae:	09 b6       	in	r0, 0x39	; 57
    19b0:	0f 92       	push	r0
    19b2:	19 be       	out	0x39, r1	; 57
    19b4:	0b b6       	in	r0, 0x3b	; 59
    19b6:	0f 92       	push	r0
    19b8:	1b be       	out	0x3b, r1	; 59
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    19d2:	e0 91 90 22 	lds	r30, 0x2290	; 0x802290 <tc_tcd0_ccd_callback>
    19d6:	f0 91 91 22 	lds	r31, 0x2291	; 0x802291 <tc_tcd0_ccd_callback+0x1>
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    19de:	19 95       	eicall
	}
}
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0b be       	out	0x3b, r0	; 59
    19fc:	0f 90       	pop	r0
    19fe:	09 be       	out	0x39, r0	; 57
    1a00:	0f 90       	pop	r0
    1a02:	08 be       	out	0x38, r0	; 56
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	08 b6       	in	r0, 0x38	; 56
    1a1a:	0f 92       	push	r0
    1a1c:	18 be       	out	0x38, r1	; 56
    1a1e:	09 b6       	in	r0, 0x39	; 57
    1a20:	0f 92       	push	r0
    1a22:	19 be       	out	0x39, r1	; 57
    1a24:	0b b6       	in	r0, 0x3b	; 59
    1a26:	0f 92       	push	r0
    1a28:	1b be       	out	0x3b, r1	; 59
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1a42:	e0 91 8e 22 	lds	r30, 0x228E	; 0x80228e <tc_tcd1_ovf_callback>
    1a46:	f0 91 8f 22 	lds	r31, 0x228F	; 0x80228f <tc_tcd1_ovf_callback+0x1>
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    1a4e:	19 95       	eicall
	}
}
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	09 be       	out	0x39, r0	; 57
    1a70:	0f 90       	pop	r0
    1a72:	08 be       	out	0x38, r0	; 56
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	08 b6       	in	r0, 0x38	; 56
    1a8a:	0f 92       	push	r0
    1a8c:	18 be       	out	0x38, r1	; 56
    1a8e:	09 b6       	in	r0, 0x39	; 57
    1a90:	0f 92       	push	r0
    1a92:	19 be       	out	0x39, r1	; 57
    1a94:	0b b6       	in	r0, 0x3b	; 59
    1a96:	0f 92       	push	r0
    1a98:	1b be       	out	0x3b, r1	; 59
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1ab2:	e0 91 8c 22 	lds	r30, 0x228C	; 0x80228c <tc_tcd1_err_callback>
    1ab6:	f0 91 8d 22 	lds	r31, 0x228D	; 0x80228d <tc_tcd1_err_callback+0x1>
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_84+0x42>
		tc_tcd1_err_callback();
    1abe:	19 95       	eicall
	}
}
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0b be       	out	0x3b, r0	; 59
    1adc:	0f 90       	pop	r0
    1ade:	09 be       	out	0x39, r0	; 57
    1ae0:	0f 90       	pop	r0
    1ae2:	08 be       	out	0x38, r0	; 56
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	08 b6       	in	r0, 0x38	; 56
    1afa:	0f 92       	push	r0
    1afc:	18 be       	out	0x38, r1	; 56
    1afe:	09 b6       	in	r0, 0x39	; 57
    1b00:	0f 92       	push	r0
    1b02:	19 be       	out	0x39, r1	; 57
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	1b be       	out	0x3b, r1	; 59
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1b22:	e0 91 8a 22 	lds	r30, 0x228A	; 0x80228a <tc_tcd1_cca_callback>
    1b26:	f0 91 8b 22 	lds	r31, 0x228B	; 0x80228b <tc_tcd1_cca_callback+0x1>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    1b2e:	19 95       	eicall
	}
}
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	bf 91       	pop	r27
    1b36:	af 91       	pop	r26
    1b38:	9f 91       	pop	r25
    1b3a:	8f 91       	pop	r24
    1b3c:	7f 91       	pop	r23
    1b3e:	6f 91       	pop	r22
    1b40:	5f 91       	pop	r21
    1b42:	4f 91       	pop	r20
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	09 be       	out	0x39, r0	; 57
    1b50:	0f 90       	pop	r0
    1b52:	08 be       	out	0x38, r0	; 56
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	08 b6       	in	r0, 0x38	; 56
    1b6a:	0f 92       	push	r0
    1b6c:	18 be       	out	0x38, r1	; 56
    1b6e:	09 b6       	in	r0, 0x39	; 57
    1b70:	0f 92       	push	r0
    1b72:	19 be       	out	0x39, r1	; 57
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	1b be       	out	0x3b, r1	; 59
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1b92:	e0 91 88 22 	lds	r30, 0x2288	; 0x802288 <tc_tcd1_ccb_callback>
    1b96:	f0 91 89 22 	lds	r31, 0x2289	; 0x802289 <tc_tcd1_ccb_callback+0x1>
    1b9a:	30 97       	sbiw	r30, 0x00	; 0
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    1b9e:	19 95       	eicall
	}
}
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0b be       	out	0x3b, r0	; 59
    1bbc:	0f 90       	pop	r0
    1bbe:	09 be       	out	0x39, r0	; 57
    1bc0:	0f 90       	pop	r0
    1bc2:	08 be       	out	0x38, r0	; 56
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1bce:	1f 92       	push	r1
    1bd0:	0f 92       	push	r0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	08 b6       	in	r0, 0x38	; 56
    1bda:	0f 92       	push	r0
    1bdc:	18 be       	out	0x38, r1	; 56
    1bde:	09 b6       	in	r0, 0x39	; 57
    1be0:	0f 92       	push	r0
    1be2:	19 be       	out	0x39, r1	; 57
    1be4:	0b b6       	in	r0, 0x3b	; 59
    1be6:	0f 92       	push	r0
    1be8:	1b be       	out	0x3b, r1	; 59
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1c02:	e0 91 86 22 	lds	r30, 0x2286	; 0x802286 <tc_tce0_ovf_callback>
    1c06:	f0 91 87 22 	lds	r31, 0x2287	; 0x802287 <tc_tce0_ovf_callback+0x1>
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1c0e:	19 95       	eicall
	}
}
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	7f 91       	pop	r23
    1c1e:	6f 91       	pop	r22
    1c20:	5f 91       	pop	r21
    1c22:	4f 91       	pop	r20
    1c24:	3f 91       	pop	r19
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0b be       	out	0x3b, r0	; 59
    1c2c:	0f 90       	pop	r0
    1c2e:	09 be       	out	0x39, r0	; 57
    1c30:	0f 90       	pop	r0
    1c32:	08 be       	out	0x38, r0	; 56
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	08 b6       	in	r0, 0x38	; 56
    1c4a:	0f 92       	push	r0
    1c4c:	18 be       	out	0x38, r1	; 56
    1c4e:	09 b6       	in	r0, 0x39	; 57
    1c50:	0f 92       	push	r0
    1c52:	19 be       	out	0x39, r1	; 57
    1c54:	0b b6       	in	r0, 0x3b	; 59
    1c56:	0f 92       	push	r0
    1c58:	1b be       	out	0x3b, r1	; 59
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1c72:	e0 91 84 22 	lds	r30, 0x2284	; 0x802284 <tc_tce0_err_callback>
    1c76:	f0 91 85 22 	lds	r31, 0x2285	; 0x802285 <tc_tce0_err_callback+0x1>
    1c7a:	30 97       	sbiw	r30, 0x00	; 0
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <__vector_48+0x42>
		tc_tce0_err_callback();
    1c7e:	19 95       	eicall
	}
}
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0b be       	out	0x3b, r0	; 59
    1c9c:	0f 90       	pop	r0
    1c9e:	09 be       	out	0x39, r0	; 57
    1ca0:	0f 90       	pop	r0
    1ca2:	08 be       	out	0x38, r0	; 56
    1ca4:	0f 90       	pop	r0
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	0f 90       	pop	r0
    1caa:	1f 90       	pop	r1
    1cac:	18 95       	reti

00001cae <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1cae:	1f 92       	push	r1
    1cb0:	0f 92       	push	r0
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	0f 92       	push	r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	08 b6       	in	r0, 0x38	; 56
    1cba:	0f 92       	push	r0
    1cbc:	18 be       	out	0x38, r1	; 56
    1cbe:	09 b6       	in	r0, 0x39	; 57
    1cc0:	0f 92       	push	r0
    1cc2:	19 be       	out	0x39, r1	; 57
    1cc4:	0b b6       	in	r0, 0x3b	; 59
    1cc6:	0f 92       	push	r0
    1cc8:	1b be       	out	0x3b, r1	; 59
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1ce2:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <tc_tce0_cca_callback>
    1ce6:	f0 91 83 22 	lds	r31, 0x2283	; 0x802283 <tc_tce0_cca_callback+0x1>
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__vector_49+0x42>
		tc_tce0_cca_callback();
    1cee:	19 95       	eicall
	}
}
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	bf 91       	pop	r27
    1cf6:	af 91       	pop	r26
    1cf8:	9f 91       	pop	r25
    1cfa:	8f 91       	pop	r24
    1cfc:	7f 91       	pop	r23
    1cfe:	6f 91       	pop	r22
    1d00:	5f 91       	pop	r21
    1d02:	4f 91       	pop	r20
    1d04:	3f 91       	pop	r19
    1d06:	2f 91       	pop	r18
    1d08:	0f 90       	pop	r0
    1d0a:	0b be       	out	0x3b, r0	; 59
    1d0c:	0f 90       	pop	r0
    1d0e:	09 be       	out	0x39, r0	; 57
    1d10:	0f 90       	pop	r0
    1d12:	08 be       	out	0x38, r0	; 56
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	08 b6       	in	r0, 0x38	; 56
    1d2a:	0f 92       	push	r0
    1d2c:	18 be       	out	0x38, r1	; 56
    1d2e:	09 b6       	in	r0, 0x39	; 57
    1d30:	0f 92       	push	r0
    1d32:	19 be       	out	0x39, r1	; 57
    1d34:	0b b6       	in	r0, 0x3b	; 59
    1d36:	0f 92       	push	r0
    1d38:	1b be       	out	0x3b, r1	; 59
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1d52:	e0 91 80 22 	lds	r30, 0x2280	; 0x802280 <tc_tce0_ccb_callback>
    1d56:	f0 91 81 22 	lds	r31, 0x2281	; 0x802281 <tc_tce0_ccb_callback+0x1>
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    1d5e:	19 95       	eicall
	}
}
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0b be       	out	0x3b, r0	; 59
    1d7c:	0f 90       	pop	r0
    1d7e:	09 be       	out	0x39, r0	; 57
    1d80:	0f 90       	pop	r0
    1d82:	08 be       	out	0x38, r0	; 56
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1d8e:	1f 92       	push	r1
    1d90:	0f 92       	push	r0
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	0f 92       	push	r0
    1d96:	11 24       	eor	r1, r1
    1d98:	08 b6       	in	r0, 0x38	; 56
    1d9a:	0f 92       	push	r0
    1d9c:	18 be       	out	0x38, r1	; 56
    1d9e:	09 b6       	in	r0, 0x39	; 57
    1da0:	0f 92       	push	r0
    1da2:	19 be       	out	0x39, r1	; 57
    1da4:	0b b6       	in	r0, 0x3b	; 59
    1da6:	0f 92       	push	r0
    1da8:	1b be       	out	0x3b, r1	; 59
    1daa:	2f 93       	push	r18
    1dac:	3f 93       	push	r19
    1dae:	4f 93       	push	r20
    1db0:	5f 93       	push	r21
    1db2:	6f 93       	push	r22
    1db4:	7f 93       	push	r23
    1db6:	8f 93       	push	r24
    1db8:	9f 93       	push	r25
    1dba:	af 93       	push	r26
    1dbc:	bf 93       	push	r27
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1dc2:	e0 91 7e 22 	lds	r30, 0x227E	; 0x80227e <tc_tce0_ccc_callback>
    1dc6:	f0 91 7f 22 	lds	r31, 0x227F	; 0x80227f <tc_tce0_ccc_callback+0x1>
    1dca:	30 97       	sbiw	r30, 0x00	; 0
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1dce:	19 95       	eicall
	}
}
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0b be       	out	0x3b, r0	; 59
    1dec:	0f 90       	pop	r0
    1dee:	09 be       	out	0x39, r0	; 57
    1df0:	0f 90       	pop	r0
    1df2:	08 be       	out	0x38, r0	; 56
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1dfe:	1f 92       	push	r1
    1e00:	0f 92       	push	r0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	0f 92       	push	r0
    1e06:	11 24       	eor	r1, r1
    1e08:	08 b6       	in	r0, 0x38	; 56
    1e0a:	0f 92       	push	r0
    1e0c:	18 be       	out	0x38, r1	; 56
    1e0e:	09 b6       	in	r0, 0x39	; 57
    1e10:	0f 92       	push	r0
    1e12:	19 be       	out	0x39, r1	; 57
    1e14:	0b b6       	in	r0, 0x3b	; 59
    1e16:	0f 92       	push	r0
    1e18:	1b be       	out	0x3b, r1	; 59
    1e1a:	2f 93       	push	r18
    1e1c:	3f 93       	push	r19
    1e1e:	4f 93       	push	r20
    1e20:	5f 93       	push	r21
    1e22:	6f 93       	push	r22
    1e24:	7f 93       	push	r23
    1e26:	8f 93       	push	r24
    1e28:	9f 93       	push	r25
    1e2a:	af 93       	push	r26
    1e2c:	bf 93       	push	r27
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1e32:	e0 91 7c 22 	lds	r30, 0x227C	; 0x80227c <tc_tce0_ccd_callback>
    1e36:	f0 91 7d 22 	lds	r31, 0x227D	; 0x80227d <tc_tce0_ccd_callback+0x1>
    1e3a:	30 97       	sbiw	r30, 0x00	; 0
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    1e3e:	19 95       	eicall
	}
}
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0b be       	out	0x3b, r0	; 59
    1e5c:	0f 90       	pop	r0
    1e5e:	09 be       	out	0x39, r0	; 57
    1e60:	0f 90       	pop	r0
    1e62:	08 be       	out	0x38, r0	; 56
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	0f 90       	pop	r0
    1e6a:	1f 90       	pop	r1
    1e6c:	18 95       	reti

00001e6e <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	1f 92       	push	r1
    1e76:	1f 92       	push	r1
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e7c:	2f b7       	in	r18, 0x3f	; 63
    1e7e:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1e80:	f8 94       	cli
	return flags;
    1e82:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1e84:	28 2f       	mov	r18, r24
    1e86:	39 2f       	mov	r19, r25
    1e88:	21 15       	cp	r18, r1
    1e8a:	88 e0       	ldi	r24, 0x08	; 8
    1e8c:	38 07       	cpc	r19, r24
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	83 e0       	ldi	r24, 0x03	; 3
    1e94:	0b d9       	rcall	.-3562   	; 0x10ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1e96:	64 e0       	ldi	r22, 0x04	; 4
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	08 d9       	rcall	.-3568   	; 0x10ac <sysclk_enable_module>
    1e9c:	2d c0       	rjmp	.+90     	; 0x1ef8 <tc_enable+0x8a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1e9e:	20 34       	cpi	r18, 0x40	; 64
    1ea0:	88 e0       	ldi	r24, 0x08	; 8
    1ea2:	38 07       	cpc	r19, r24
    1ea4:	39 f4       	brne	.+14     	; 0x1eb4 <tc_enable+0x46>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	00 d9       	rcall	.-3584   	; 0x10ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1eac:	64 e0       	ldi	r22, 0x04	; 4
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	fd d8       	rcall	.-3590   	; 0x10ac <sysclk_enable_module>
    1eb2:	22 c0       	rjmp	.+68     	; 0x1ef8 <tc_enable+0x8a>
    1eb4:	21 15       	cp	r18, r1
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1eb6:	89 e0       	ldi	r24, 0x09	; 9
    1eb8:	38 07       	cpc	r19, r24
    1eba:	39 f4       	brne	.+14     	; 0x1eca <tc_enable+0x5c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	84 e0       	ldi	r24, 0x04	; 4
    1ec0:	f5 d8       	rcall	.-3606   	; 0x10ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1ec2:	64 e0       	ldi	r22, 0x04	; 4
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	f2 d8       	rcall	.-3612   	; 0x10ac <sysclk_enable_module>
    1ec8:	17 c0       	rjmp	.+46     	; 0x1ef8 <tc_enable+0x8a>
    1eca:	20 34       	cpi	r18, 0x40	; 64
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1ecc:	89 e0       	ldi	r24, 0x09	; 9
    1ece:	38 07       	cpc	r19, r24
    1ed0:	39 f4       	brne	.+14     	; 0x1ee0 <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ed2:	62 e0       	ldi	r22, 0x02	; 2
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	ea d8       	rcall	.-3628   	; 0x10ac <sysclk_enable_module>
    1ed8:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1eda:	84 e0       	ldi	r24, 0x04	; 4
    1edc:	e7 d8       	rcall	.-3634   	; 0x10ac <sysclk_enable_module>
    1ede:	0c c0       	rjmp	.+24     	; 0x1ef8 <tc_enable+0x8a>
    1ee0:	21 15       	cp	r18, r1
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1ee2:	3a 40       	sbci	r19, 0x0A	; 10
    1ee4:	39 f4       	brne	.+14     	; 0x1ef4 <tc_enable+0x86>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	85 e0       	ldi	r24, 0x05	; 5
    1eea:	e0 d8       	rcall	.-3648   	; 0x10ac <sysclk_enable_module>
    1eec:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1eee:	85 e0       	ldi	r24, 0x05	; 5
    1ef0:	dd d8       	rcall	.-3654   	; 0x10ac <sysclk_enable_module>
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <tc_enable+0x8a>
    1ef4:	1f bf       	out	0x3f, r17	; 63
    1ef6:	10 c0       	rjmp	.+32     	; 0x1f18 <tc_enable+0xaa>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ef8:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <sleepmgr_locks+0x1>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1efc:	8f 3f       	cpi	r24, 0xFF	; 255
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <tc_enable+0x94>
    1f00:	ff cf       	rjmp	.-2      	; 0x1f00 <tc_enable+0x92>
    1f02:	8f b7       	in	r24, 0x3f	; 63
    1f04:	89 83       	std	Y+1, r24	; 0x01

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f06:	f8 94       	cli
    1f08:	99 81       	ldd	r25, Y+1	; 0x01
	cpu_irq_disable();
    1f0a:	ee ec       	ldi	r30, 0xCE	; 206
	return flags;
    1f0c:	f2 e2       	ldi	r31, 0x22	; 34
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1f0e:	81 81       	ldd	r24, Z+1	; 0x01
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	81 83       	std	Z+1, r24	; 0x01
    1f14:	9f bf       	out	0x3f, r25	; 63
    1f16:	1f bf       	out	0x3f, r17	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	08 95       	ret

00001f24 <pwm_set_frequency>:
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1f32:	6b 01       	movw	r12, r22
    1f34:	e1 2c       	mov	r14, r1
    1f36:	f1 2c       	mov	r15, r1
    1f38:	60 e8       	ldi	r22, 0x80	; 128
    1f3a:	74 e8       	ldi	r23, 0x84	; 132
    1f3c:	8e e1       	ldi	r24, 0x1E	; 30
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a7 01       	movw	r20, r14
    1f42:	96 01       	movw	r18, r12
    1f44:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	2f ef       	ldi	r18, 0xFF	; 255
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
	if (smallest_div < 1) {
    1f58:	21 15       	cp	r18, r1
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	29 f4       	brne	.+10     	; 0x1f68 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	2d c0       	rjmp	.+90     	; 0x1fc2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	28 f4       	brcc	.+10     	; 0x1f78 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    1f72:	22 e0       	ldi	r18, 0x02	; 2
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	25 c0       	rjmp	.+74     	; 0x1fc2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    1f78:	24 30       	cpi	r18, 0x04	; 4
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	28 f4       	brcc	.+10     	; 0x1f88 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1f82:	24 e0       	ldi	r18, 0x04	; 4
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	1d c0       	rjmp	.+58     	; 0x1fc2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1f88:	28 30       	cpi	r18, 0x08	; 8
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    1f8e:	84 e0       	ldi	r24, 0x04	; 4
    1f90:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1f92:	28 e0       	ldi	r18, 0x08	; 8
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	15 c0       	rjmp	.+42     	; 0x1fc2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1f98:	20 34       	cpi	r18, 0x40	; 64
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	28 f4       	brcc	.+10     	; 0x1fa8 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    1f9e:	85 e0       	ldi	r24, 0x05	; 5
    1fa0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1fa2:	20 e4       	ldi	r18, 0x40	; 64
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	0d c0       	rjmp	.+26     	; 0x1fc2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1fa8:	2f 3f       	cpi	r18, 0xFF	; 255
    1faa:	31 05       	cpc	r19, r1
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <pwm_set_frequency+0x8c>
    1fae:	28 f4       	brcc	.+10     	; 0x1fba <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    1fb0:	86 e0       	ldi	r24, 0x06	; 6
    1fb2:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	31 e0       	ldi	r19, 0x01	; 1
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1fba:	87 e0       	ldi	r24, 0x07	; 7
    1fbc:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	60 e8       	ldi	r22, 0x80	; 128
    1fc8:	74 e8       	ldi	r23, 0x84	; 132
    1fca:	8e e1       	ldi	r24, 0x1E	; 30
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	a7 01       	movw	r20, r14
    1fd8:	96 01       	movw	r18, r12
    1fda:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
    1fde:	2d 83       	std	Y+5, r18	; 0x05
    1fe0:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1fe2:	24 36       	cpi	r18, 0x64	; 100
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	18 f4       	brcc	.+6      	; 0x1fee <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1fe8:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    1fea:	1d 82       	std	Y+5, r1	; 0x05
    1fec:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	08 95       	ret

00001ffc <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	ec 01       	movw	r28, r24
    2006:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2008:	62 30       	cpi	r22, 0x02	; 2
    200a:	91 f1       	breq	.+100    	; 0x2070 <pwm_init+0x74>
    200c:	28 f4       	brcc	.+10     	; 0x2018 <pwm_init+0x1c>
    200e:	66 23       	and	r22, r22
    2010:	49 f0       	breq	.+18     	; 0x2024 <pwm_init+0x28>
    2012:	61 30       	cpi	r22, 0x01	; 1
    2014:	d1 f0       	breq	.+52     	; 0x204a <pwm_init+0x4e>
    2016:	64 c0       	rjmp	.+200    	; 0x20e0 <pwm_init+0xe4>
    2018:	63 30       	cpi	r22, 0x03	; 3
    201a:	e9 f1       	breq	.+122    	; 0x2096 <pwm_init+0x9a>
    201c:	64 30       	cpi	r22, 0x04	; 4
    201e:	09 f4       	brne	.+2      	; 0x2022 <pwm_init+0x26>
    2020:	4d c0       	rjmp	.+154    	; 0x20bc <pwm_init+0xc0>
    2022:	5e c0       	rjmp	.+188    	; 0x20e0 <pwm_init+0xe4>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	98 e0       	ldi	r25, 0x08	; 8
    2028:	88 83       	st	Y, r24
    202a:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    202c:	e0 e4       	ldi	r30, 0x40	; 64
    202e:	f6 e0       	ldi	r31, 0x06	; 6
    2030:	30 81       	ld	r19, Z
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	2f ef       	ldi	r18, 0xFF	; 255
    2038:	24 0f       	add	r18, r20
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <pwm_init+0x44>
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	2a 95       	dec	r18
    2042:	e2 f7       	brpl	.-8      	; 0x203c <pwm_init+0x40>
    2044:	83 2b       	or	r24, r19
    2046:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2048:	4b c0       	rjmp	.+150    	; 0x20e0 <pwm_init+0xe4>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    204a:	80 e4       	ldi	r24, 0x40	; 64
    204c:	98 e0       	ldi	r25, 0x08	; 8
    204e:	88 83       	st	Y, r24
    2050:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2052:	e0 e4       	ldi	r30, 0x40	; 64
    2054:	f6 e0       	ldi	r31, 0x06	; 6
    2056:	30 81       	ld	r19, Z
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	23 e0       	ldi	r18, 0x03	; 3
    205e:	24 0f       	add	r18, r20
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <pwm_init+0x6a>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	2a 95       	dec	r18
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <pwm_init+0x66>
    206a:	83 2b       	or	r24, r19
    206c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    206e:	38 c0       	rjmp	.+112    	; 0x20e0 <pwm_init+0xe4>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	99 e0       	ldi	r25, 0x09	; 9
    2074:	88 83       	st	Y, r24
    2076:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2078:	e0 e6       	ldi	r30, 0x60	; 96
    207a:	f6 e0       	ldi	r31, 0x06	; 6
    207c:	30 81       	ld	r19, Z
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	2f ef       	ldi	r18, 0xFF	; 255
    2084:	24 0f       	add	r18, r20
    2086:	02 c0       	rjmp	.+4      	; 0x208c <pwm_init+0x90>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	2a 95       	dec	r18
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <pwm_init+0x8c>
    2090:	83 2b       	or	r24, r19
    2092:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2094:	25 c0       	rjmp	.+74     	; 0x20e0 <pwm_init+0xe4>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2096:	80 e4       	ldi	r24, 0x40	; 64
    2098:	99 e0       	ldi	r25, 0x09	; 9
    209a:	88 83       	st	Y, r24
    209c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    209e:	e0 e6       	ldi	r30, 0x60	; 96
    20a0:	f6 e0       	ldi	r31, 0x06	; 6
    20a2:	30 81       	ld	r19, Z
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	23 e0       	ldi	r18, 0x03	; 3
    20aa:	24 0f       	add	r18, r20
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <pwm_init+0xb6>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	2a 95       	dec	r18
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <pwm_init+0xb2>
    20b6:	83 2b       	or	r24, r19
    20b8:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    20ba:	12 c0       	rjmp	.+36     	; 0x20e0 <pwm_init+0xe4>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	9a e0       	ldi	r25, 0x0A	; 10
    20c0:	88 83       	st	Y, r24
    20c2:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    20c4:	e0 e8       	ldi	r30, 0x80	; 128
    20c6:	f6 e0       	ldi	r31, 0x06	; 6
    20c8:	30 81       	ld	r19, Z
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	2f ef       	ldi	r18, 0xFF	; 255
    20d0:	24 0f       	add	r18, r20
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <pwm_init+0xdc>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	2a 95       	dec	r18
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <pwm_init+0xd8>
    20dc:	83 2b       	or	r24, r19
    20de:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    20e0:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    20e2:	42 30       	cpi	r20, 0x02	; 2
    20e4:	61 f0       	breq	.+24     	; 0x20fe <pwm_init+0x102>
    20e6:	18 f4       	brcc	.+6      	; 0x20ee <pwm_init+0xf2>
    20e8:	41 30       	cpi	r20, 0x01	; 1
    20ea:	31 f0       	breq	.+12     	; 0x20f8 <pwm_init+0xfc>
    20ec:	10 c0       	rjmp	.+32     	; 0x210e <pwm_init+0x112>
    20ee:	43 30       	cpi	r20, 0x03	; 3
    20f0:	49 f0       	breq	.+18     	; 0x2104 <pwm_init+0x108>
    20f2:	44 30       	cpi	r20, 0x04	; 4
    20f4:	51 f0       	breq	.+20     	; 0x210a <pwm_init+0x10e>
    20f6:	0b c0       	rjmp	.+22     	; 0x210e <pwm_init+0x112>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    20f8:	80 e1       	ldi	r24, 0x10	; 16
    20fa:	8b 83       	std	Y+3, r24	; 0x03
		break;
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <pwm_init+0x112>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2102:	05 c0       	rjmp	.+10     	; 0x210e <pwm_init+0x112>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2104:	80 e4       	ldi	r24, 0x40	; 64
    2106:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2108:	02 c0       	rjmp	.+4      	; 0x210e <pwm_init+0x112>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    210e:	88 81       	ld	r24, Y
    2110:	99 81       	ldd	r25, Y+1	; 0x01
    2112:	ad de       	rcall	.-678    	; 0x1e6e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2114:	e8 81       	ld	r30, Y
    2116:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2118:	81 81       	ldd	r24, Z+1	; 0x01
    211a:	88 7f       	andi	r24, 0xF8	; 248
    211c:	83 60       	ori	r24, 0x03	; 3
    211e:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2120:	1d 82       	std	Y+5, r1	; 0x05
    2122:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2124:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2126:	e8 81       	ld	r30, Y
    2128:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    212a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    212c:	80 7f       	andi	r24, 0xF0	; 240
    212e:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2130:	b8 01       	movw	r22, r16
    2132:	ce 01       	movw	r24, r28
    2134:	f7 de       	rcall	.-530    	; 0x1f24 <pwm_set_frequency>
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2146:	2d 81       	ldd	r18, Y+5	; 0x05
    2148:	3e 81       	ldd	r19, Y+6	; 0x06
    214a:	a6 2f       	mov	r26, r22
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <__umulhisi3>
    2152:	24 e6       	ldi	r18, 0x64	; 100
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__udivmodsi4>
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	e8 81       	ld	r30, Y
    2162:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2164:	e6 fd       	sbrc	r30, 6
    2166:	17 c0       	rjmp	.+46     	; 0x2196 <pwm_start+0x56>
		switch (channel_index) {
    2168:	82 30       	cpi	r24, 0x02	; 2
    216a:	61 f0       	breq	.+24     	; 0x2184 <pwm_start+0x44>
    216c:	18 f4       	brcc	.+6      	; 0x2174 <pwm_start+0x34>
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	31 f0       	breq	.+12     	; 0x217e <pwm_start+0x3e>
    2172:	1b c0       	rjmp	.+54     	; 0x21aa <pwm_start+0x6a>
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	49 f0       	breq	.+18     	; 0x218a <pwm_start+0x4a>
    2178:	84 30       	cpi	r24, 0x04	; 4
    217a:	51 f0       	breq	.+20     	; 0x2190 <pwm_start+0x50>
    217c:	16 c0       	rjmp	.+44     	; 0x21aa <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    217e:	20 af       	std	Z+56, r18	; 0x38
    2180:	31 af       	std	Z+57, r19	; 0x39
    2182:	13 c0       	rjmp	.+38     	; 0x21aa <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2184:	22 af       	std	Z+58, r18	; 0x3a
    2186:	33 af       	std	Z+59, r19	; 0x3b
    2188:	10 c0       	rjmp	.+32     	; 0x21aa <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    218a:	24 af       	std	Z+60, r18	; 0x3c
    218c:	35 af       	std	Z+61, r19	; 0x3d
    218e:	0d c0       	rjmp	.+26     	; 0x21aa <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2190:	26 af       	std	Z+62, r18	; 0x3e
    2192:	37 af       	std	Z+63, r19	; 0x3f
    2194:	0a c0       	rjmp	.+20     	; 0x21aa <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	19 f0       	breq	.+6      	; 0x21a0 <pwm_start+0x60>
    219a:	82 30       	cpi	r24, 0x02	; 2
    219c:	21 f0       	breq	.+8      	; 0x21a6 <pwm_start+0x66>
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    21a0:	20 af       	std	Z+56, r18	; 0x38
    21a2:	31 af       	std	Z+57, r19	; 0x39
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    21a6:	22 af       	std	Z+58, r18	; 0x3a
    21a8:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	e8 81       	ld	r30, Y
    21b0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    21b2:	86 a3       	std	Z+38, r24	; 0x26
    21b4:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	e8 81       	ld	r30, Y
    21ba:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    21bc:	e6 fd       	sbrc	r30, 6
    21be:	04 c0       	rjmp	.+8      	; 0x21c8 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	89 2b       	or	r24, r25
    21c4:	81 83       	std	Z+1, r24	; 0x01
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	80 73       	andi	r24, 0x30	; 48
    21cc:	89 2b       	or	r24, r25
    21ce:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    21d0:	e8 81       	ld	r30, Y
    21d2:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    21d4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    21d6:	80 7f       	andi	r24, 0xF0	; 240
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	89 2b       	or	r24, r25
    21dc:	80 83       	st	Z, r24
}
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    21e4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    21e8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    21ea:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    21ec:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    21f0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    21f2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    21f6:	08 95       	ret

000021f8 <adc_init>:

#include "asf.h"
#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask, uint8_t pos)
{
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	2b 97       	sbiw	r28, 0x0b	; 11
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	7c 01       	movw	r14, r24
    2210:	06 2f       	mov	r16, r22
    2212:	14 2f       	mov	r17, r20
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    2214:	be 01       	movw	r22, r28
    2216:	6f 5f       	subi	r22, 0xFF	; 255
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	0e 94 37 07 	call	0xe6e	; 0xe6e <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    221e:	ae 01       	movw	r20, r28
    2220:	48 5f       	subi	r20, 0xF8	; 248
    2222:	5f 4f       	sbci	r21, 0xFF	; 255
    2224:	60 2f       	mov	r22, r16
    2226:	c7 01       	movw	r24, r14
    2228:	0e 94 bb 07 	call	0xf76	; 0xf76 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	8f 78       	andi	r24, 0x8F	; 143
    2232:	80 61       	ori	r24, 0x10	; 16
    2234:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    2236:	89 2f       	mov	r24, r25
    2238:	81 7e       	andi	r24, 0xE1	; 225
    223a:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    223c:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	8d 83       	std	Y+5, r24	; 0x05
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
	if (pos >= ADCCH_POS_TEMPSENSE) {
    2242:	10 31       	cpi	r17, 0x10	; 16
    2244:	38 f0       	brcs	.+14     	; 0x2254 <adc_init+0x5c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    2246:	18 86       	std	Y+8, r1	; 0x08
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    2248:	10 51       	subi	r17, 0x10	; 16
    224a:	11 0f       	add	r17, r17
    224c:	11 0f       	add	r17, r17
    224e:	11 0f       	add	r17, r17
    2250:	19 87       	std	Y+9, r17	; 0x09
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <adc_init+0x68>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2258:	11 0f       	add	r17, r17
    225a:	11 0f       	add	r17, r17
    225c:	11 0f       	add	r17, r17
    225e:	19 87       	std	Y+9, r17	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, pos, ADCCH_NEG_NONE, 1);
	adc_write_configuration(adc, &adc_conf);
    2260:	be 01       	movw	r22, r28
    2262:	6f 5f       	subi	r22, 0xFF	; 255
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	c7 01       	movw	r24, r14
    2268:	0e 94 df 06 	call	0xdbe	; 0xdbe <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    226c:	ae 01       	movw	r20, r28
    226e:	48 5f       	subi	r20, 0xF8	; 248
    2270:	5f 4f       	sbci	r21, 0xFF	; 255
    2272:	60 2f       	mov	r22, r16
    2274:	c7 01       	movw	r24, r14
    2276:	0e 94 70 07 	call	0xee0	; 0xee0 <adcch_write_configuration>
	
	
}
    227a:	2b 96       	adiw	r28, 0x0b	; 11
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	08 95       	ret

0000228e <thermistor_init>:
void thermistor_init(void)
{
	adc_init(&THERM_ADC,THERM_ADC_CH,THERM_POS);
    228e:	46 e0       	ldi	r20, 0x06	; 6
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	92 e0       	ldi	r25, 0x02	; 2
    2296:	b0 df       	rcall	.-160    	; 0x21f8 <adc_init>
	
	if(DEBUG) printf("Thermistor Initialized.\n");
    2298:	84 e1       	ldi	r24, 0x14	; 20
    229a:	90 e2       	ldi	r25, 0x20	; 32
    229c:	0c 94 07 28 	jmp	0x500e	; 0x500e <puts>
    22a0:	08 95       	ret

000022a2 <volt_init>:
}
void volt_init(void)
{
	adc_init(&VOLT_ADC,VOLT_ADC_CH, VOLT_POS);
    22a2:	45 e0       	ldi	r20, 0x05	; 5
    22a4:	62 e0       	ldi	r22, 0x02	; 2
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	92 e0       	ldi	r25, 0x02	; 2
    22aa:	a6 df       	rcall	.-180    	; 0x21f8 <adc_init>
	
	if(DEBUG) printf("Voltage Initialized.\n");
    22ac:	8c e2       	ldi	r24, 0x2C	; 44
    22ae:	90 e2       	ldi	r25, 0x20	; 32
    22b0:	0c 94 07 28 	jmp	0x500e	; 0x500e <puts>
    22b4:	08 95       	ret

000022b6 <getADCRead>:
}


float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	1f 92       	push	r1
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	7c 01       	movw	r14, r24
    22ca:	16 2f       	mov	r17, r22
		adc_enable(adc);
    22cc:	0e 94 1b 02 	call	0x436	; 0x436 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    22d0:	8f b7       	in	r24, 0x3f	; 63
    22d2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    22d4:	f8 94       	cli
	return flags;
    22d6:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    22d8:	f7 01       	movw	r30, r14
    22da:	80 81       	ld	r24, Z
    22dc:	21 2f       	mov	r18, r17
    22de:	22 0f       	add	r18, r18
    22e0:	22 0f       	add	r18, r18
    22e2:	82 2b       	or	r24, r18
    22e4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    22e6:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    22e8:	f7 01       	movw	r30, r14
    22ea:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    22ec:	81 23       	and	r24, r17
    22ee:	18 13       	cpse	r17, r24
    22f0:	fb cf       	rjmp	.-10     	; 0x22e8 <getADCRead+0x32>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    22f2:	16 83       	std	Z+6, r17	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    22f4:	81 2f       	mov	r24, r17
    22f6:	83 70       	andi	r24, 0x03	; 3
    22f8:	21 f4       	brne	.+8      	; 0x2302 <getADCRead+0x4c>
		index += 2;
		ch_mask >>= 2;
    22fa:	16 95       	lsr	r17
    22fc:	16 95       	lsr	r17
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <getADCRead+0x4e>
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    2302:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    2304:	10 ff       	sbrs	r17, 0
		index++;
    2306:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    2308:	f7 01       	movw	r30, r14
    230a:	b0 96       	adiw	r30, 0x20	; 32
    230c:	98 e0       	ldi	r25, 0x08	; 8
    230e:	89 9f       	mul	r24, r25
    2310:	e0 0d       	add	r30, r0
    2312:	f1 1d       	adc	r31, r1
    2314:	11 24       	eor	r1, r1
		
		
		adc_start_conversion(adc, ch_mask);
		adc_wait_for_interrupt_flag(adc, ch_mask);
		uint16_t adcReading = adc_get_result(adc, ch_mask);
    2316:	04 81       	ldd	r16, Z+4	; 0x04
    2318:	15 81       	ldd	r17, Z+5	; 0x05
		//printf("ADC reading = %u\n", adcReading);
		//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
		//printf("voltage: %f \n", voltage);
		
		adc_disable(adc);
    231a:	c7 01       	movw	r24, r14
    231c:	0e 94 47 02 	call	0x48e	; 0x48e <adc_disable>
		return adcReading;
    2320:	b8 01       	movw	r22, r16
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 41 20 	call	0x4082	; 0x4082 <__floatunsisf>
	
}
    232a:	0f 90       	pop	r0
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	08 95       	ret

0000233a <getVoltage>:
float getVoltage(void)
{
	float adc_val = getADCRead(&VOLT_ADC,VOLT_ADC_CH)/4096.0*2;
    233a:	62 e0       	ldi	r22, 0x02	; 2
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	92 e0       	ldi	r25, 0x02	; 2
    2340:	ba df       	rcall	.-140    	; 0x22b6 <getADCRead>
	if(DEBUG && DEBUG_ADC) printf("volt: %f\n",adc_val);
	return adc_val;
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	59 e3       	ldi	r21, 0x39	; 57
    234a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__mulsf3>
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
    2352:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__addsf3>

00002356 <getTemperature>:
}
float getTemperature(void)
{
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	ac df       	rcall	.-168    	; 0x22b6 <getADCRead>
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
    235e:	25 ee       	ldi	r18, 0xE5	; 229
    2360:	30 ed       	ldi	r19, 0xD0	; 208
    2362:	42 e2       	ldi	r20, 0x22	; 34
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__mulsf3>
    236a:	9b 01       	movw	r18, r22
    236c:	ac 01       	movw	r20, r24
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	80 e8       	ldi	r24, 0x80	; 128
    2374:	95 e4       	ldi	r25, 0x45	; 69
    2376:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__divsf3>
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__subsf3>
    2386:	0e 94 22 21 	call	0x4244	; 0x4244 <log>
	if(DEBUG && DEBUG_ADC) printf("temp: %f\n", temperature-273.15);
	return (temperature - 273.15);
    238a:	2c e7       	ldi	r18, 0x7C	; 124
    238c:	34 ed       	ldi	r19, 0xD4	; 212
    238e:	43 e8       	ldi	r20, 0x83	; 131
    2390:	59 e3       	ldi	r21, 0x39	; 57
    2392:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__mulsf3>
    2396:	2f e0       	ldi	r18, 0x0F	; 15
    2398:	3f ec       	ldi	r19, 0xCF	; 207
    239a:	4b e5       	ldi	r20, 0x5B	; 91
    239c:	5b e3       	ldi	r21, 0x3B	; 59
    239e:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__addsf3>
    23a2:	9b 01       	movw	r18, r22
    23a4:	ac 01       	movw	r20, r24
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	80 e8       	ldi	r24, 0x80	; 128
    23ac:	9f e3       	ldi	r25, 0x3F	; 63
    23ae:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__divsf3>
    23b2:	0e 94 15 20 	call	0x402a	; 0x402a <__fixunssfsi>
    23b6:	0e 94 41 20 	call	0x4082	; 0x4082 <__floatunsisf>
    23ba:	23 e3       	ldi	r18, 0x33	; 51
    23bc:	33 e9       	ldi	r19, 0x93	; 147
    23be:	48 e8       	ldi	r20, 0x88	; 136
    23c0:	53 e4       	ldi	r21, 0x43	; 67
    23c2:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__subsf3>

000023c6 <bno055_init>:
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	return com_rslt;
}
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <bno055_init+0x8>
    23ce:	1f 92       	push	r1
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	19 82       	std	Y+1, r1	; 0x01
    23d6:	1a 82       	std	Y+2, r1	; 0x02
    23d8:	1b 82       	std	Y+3, r1	; 0x03
    23da:	1c 82       	std	Y+4, r1	; 0x04
    23dc:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <p_bno055>
    23e0:	90 93 b1 22 	sts	0x22B1, r25	; 0x8022b1 <p_bno055+0x1>
    23e4:	dc 01       	movw	r26, r24
    23e6:	19 96       	adiw	r26, 0x09	; 9
    23e8:	ed 91       	ld	r30, X+
    23ea:	fc 91       	ld	r31, X
    23ec:	1a 97       	sbiw	r26, 0x0a	; 10
    23ee:	21 e0       	ldi	r18, 0x01	; 1
    23f0:	ae 01       	movw	r20, r28
    23f2:	4e 5f       	subi	r20, 0xFE	; 254
    23f4:	5f 4f       	sbci	r21, 0xFF	; 255
    23f6:	67 e0       	ldi	r22, 0x07	; 7
    23f8:	18 96       	adiw	r26, 0x08	; 8
    23fa:	8c 91       	ld	r24, X
    23fc:	19 95       	eicall
    23fe:	18 2f       	mov	r17, r24
    2400:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2404:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2408:	1b 96       	adiw	r26, 0x0b	; 11
    240a:	ed 91       	ld	r30, X+
    240c:	fc 91       	ld	r31, X
    240e:	1c 97       	sbiw	r26, 0x0c	; 12
    2410:	21 e0       	ldi	r18, 0x01	; 1
    2412:	ae 01       	movw	r20, r28
    2414:	4f 5f       	subi	r20, 0xFF	; 255
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	18 96       	adiw	r26, 0x08	; 8
    241c:	8c 91       	ld	r24, X
    241e:	19 95       	eicall
    2420:	18 0f       	add	r17, r24
    2422:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2426:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	8c 93       	st	X, r24
    242e:	1b 96       	adiw	r26, 0x0b	; 11
    2430:	ed 91       	ld	r30, X+
    2432:	fc 91       	ld	r31, X
    2434:	1c 97       	sbiw	r26, 0x0c	; 12
    2436:	21 e0       	ldi	r18, 0x01	; 1
    2438:	ae 01       	movw	r20, r28
    243a:	4f 5f       	subi	r20, 0xFF	; 255
    243c:	5f 4f       	sbci	r21, 0xFF	; 255
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	18 96       	adiw	r26, 0x08	; 8
    2442:	8c 91       	ld	r24, X
    2444:	19 95       	eicall
    2446:	18 0f       	add	r17, r24
    2448:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    244c:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	14 96       	adiw	r26, 0x04	; 4
    2454:	8c 93       	st	X, r24
    2456:	14 97       	sbiw	r26, 0x04	; 4
    2458:	1b 96       	adiw	r26, 0x0b	; 11
    245a:	ed 91       	ld	r30, X+
    245c:	fc 91       	ld	r31, X
    245e:	1c 97       	sbiw	r26, 0x0c	; 12
    2460:	21 e0       	ldi	r18, 0x01	; 1
    2462:	ae 01       	movw	r20, r28
    2464:	4f 5f       	subi	r20, 0xFF	; 255
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	18 96       	adiw	r26, 0x08	; 8
    246c:	8c 91       	ld	r24, X
    246e:	19 95       	eicall
    2470:	18 0f       	add	r17, r24
    2472:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2476:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	15 96       	adiw	r26, 0x05	; 5
    247e:	8c 93       	st	X, r24
    2480:	15 97       	sbiw	r26, 0x05	; 5
    2482:	1b 96       	adiw	r26, 0x0b	; 11
    2484:	ed 91       	ld	r30, X+
    2486:	fc 91       	ld	r31, X
    2488:	1c 97       	sbiw	r26, 0x0c	; 12
    248a:	21 e0       	ldi	r18, 0x01	; 1
    248c:	ae 01       	movw	r20, r28
    248e:	4f 5f       	subi	r20, 0xFF	; 255
    2490:	5f 4f       	sbci	r21, 0xFF	; 255
    2492:	63 e0       	ldi	r22, 0x03	; 3
    2494:	18 96       	adiw	r26, 0x08	; 8
    2496:	8c 91       	ld	r24, X
    2498:	19 95       	eicall
    249a:	18 0f       	add	r17, r24
    249c:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    24a0:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	16 96       	adiw	r26, 0x06	; 6
    24a8:	8c 93       	st	X, r24
    24aa:	16 97       	sbiw	r26, 0x06	; 6
    24ac:	1b 96       	adiw	r26, 0x0b	; 11
    24ae:	ed 91       	ld	r30, X+
    24b0:	fc 91       	ld	r31, X
    24b2:	1c 97       	sbiw	r26, 0x0c	; 12
    24b4:	21 e0       	ldi	r18, 0x01	; 1
    24b6:	ae 01       	movw	r20, r28
    24b8:	4f 5f       	subi	r20, 0xFF	; 255
    24ba:	5f 4f       	sbci	r21, 0xFF	; 255
    24bc:	66 e0       	ldi	r22, 0x06	; 6
    24be:	18 96       	adiw	r26, 0x08	; 8
    24c0:	8c 91       	ld	r24, X
    24c2:	19 95       	eicall
    24c4:	18 0f       	add	r17, r24
    24c6:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    24ca:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	17 96       	adiw	r26, 0x07	; 7
    24d2:	8c 93       	st	X, r24
    24d4:	17 97       	sbiw	r26, 0x07	; 7
    24d6:	1b 96       	adiw	r26, 0x0b	; 11
    24d8:	ed 91       	ld	r30, X+
    24da:	fc 91       	ld	r31, X
    24dc:	1c 97       	sbiw	r26, 0x0c	; 12
    24de:	22 e0       	ldi	r18, 0x02	; 2
    24e0:	ae 01       	movw	r20, r28
    24e2:	4d 5f       	subi	r20, 0xFD	; 253
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	64 e0       	ldi	r22, 0x04	; 4
    24e8:	18 96       	adiw	r26, 0x08	; 8
    24ea:	8c 91       	ld	r24, X
    24ec:	19 95       	eicall
    24ee:	18 0f       	add	r17, r24
    24f0:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    24f4:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	98 2f       	mov	r25, r24
    24fe:	88 27       	eor	r24, r24
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	82 2b       	or	r24, r18
    2504:	11 96       	adiw	r26, 0x01	; 1
    2506:	8d 93       	st	X+, r24
    2508:	9c 93       	st	X, r25
    250a:	12 97       	sbiw	r26, 0x02	; 2
    250c:	1b 96       	adiw	r26, 0x0b	; 11
    250e:	ed 91       	ld	r30, X+
    2510:	fc 91       	ld	r31, X
    2512:	1c 97       	sbiw	r26, 0x0c	; 12
    2514:	21 e0       	ldi	r18, 0x01	; 1
    2516:	ae 01       	movw	r20, r28
    2518:	4f 5f       	subi	r20, 0xFF	; 255
    251a:	5f 4f       	sbci	r21, 0xFF	; 255
    251c:	67 e0       	ldi	r22, 0x07	; 7
    251e:	18 96       	adiw	r26, 0x08	; 8
    2520:	8c 91       	ld	r24, X
    2522:	19 95       	eicall
    2524:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2528:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    252c:	99 81       	ldd	r25, Y+1	; 0x01
    252e:	93 83       	std	Z+3, r25	; 0x03
    2530:	81 0f       	add	r24, r17
    2532:	24 96       	adiw	r28, 0x04	; 4
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	08 95       	ret

00002540 <bno055_write_register>:
    2540:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2544:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2548:	10 97       	sbiw	r26, 0x00	; 0
    254a:	59 f0       	breq	.+22     	; 0x2562 <bno055_write_register+0x22>
    254c:	24 2f       	mov	r18, r20
    254e:	ab 01       	movw	r20, r22
    2550:	68 2f       	mov	r22, r24
    2552:	19 96       	adiw	r26, 0x09	; 9
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	1a 97       	sbiw	r26, 0x0a	; 10
    255a:	18 96       	adiw	r26, 0x08	; 8
    255c:	8c 91       	ld	r24, X
    255e:	19 95       	eicall
    2560:	08 95       	ret
    2562:	81 e8       	ldi	r24, 0x81	; 129
    2564:	08 95       	ret

00002566 <bno055_write_page_id>:
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	1f 92       	push	r1
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	19 82       	std	Y+1, r1	; 0x01
    2574:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2578:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    257c:	10 97       	sbiw	r26, 0x00	; 0
    257e:	41 f1       	breq	.+80     	; 0x25d0 <bno055_write_page_id+0x6a>
    2580:	18 2f       	mov	r17, r24
    2582:	1b 96       	adiw	r26, 0x0b	; 11
    2584:	ed 91       	ld	r30, X+
    2586:	fc 91       	ld	r31, X
    2588:	1c 97       	sbiw	r26, 0x0c	; 12
    258a:	21 e0       	ldi	r18, 0x01	; 1
    258c:	ae 01       	movw	r20, r28
    258e:	4f 5f       	subi	r20, 0xFF	; 255
    2590:	5f 4f       	sbci	r21, 0xFF	; 255
    2592:	67 e0       	ldi	r22, 0x07	; 7
    2594:	18 96       	adiw	r26, 0x08	; 8
    2596:	8c 91       	ld	r24, X
    2598:	19 95       	eicall
    259a:	81 11       	cpse	r24, r1
    259c:	1b c0       	rjmp	.+54     	; 0x25d4 <bno055_write_page_id+0x6e>
    259e:	19 83       	std	Y+1, r17	; 0x01
    25a0:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    25a4:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    25a8:	19 96       	adiw	r26, 0x09	; 9
    25aa:	ed 91       	ld	r30, X+
    25ac:	fc 91       	ld	r31, X
    25ae:	1a 97       	sbiw	r26, 0x0a	; 10
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	ae 01       	movw	r20, r28
    25b4:	4f 5f       	subi	r20, 0xFF	; 255
    25b6:	5f 4f       	sbci	r21, 0xFF	; 255
    25b8:	67 e0       	ldi	r22, 0x07	; 7
    25ba:	18 96       	adiw	r26, 0x08	; 8
    25bc:	8c 91       	ld	r24, X
    25be:	19 95       	eicall
    25c0:	81 11       	cpse	r24, r1
    25c2:	09 c0       	rjmp	.+18     	; 0x25d6 <bno055_write_page_id+0x70>
    25c4:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    25c8:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    25cc:	13 83       	std	Z+3, r17	; 0x03
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <bno055_write_page_id+0x70>
    25d0:	81 e8       	ldi	r24, 0x81	; 129
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <bno055_write_page_id+0x70>
    25d4:	8f ef       	ldi	r24, 0xFF	; 255
    25d6:	0f 90       	pop	r0
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	08 95       	ret

000025e0 <bno055_read_euler_hrp>:
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <bno055_read_euler_hrp+0xa>
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <bno055_read_euler_hrp+0xc>
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	8c 01       	movw	r16, r24
    25f2:	fe 01       	movw	r30, r28
    25f4:	31 96       	adiw	r30, 0x01	; 1
    25f6:	96 e0       	ldi	r25, 0x06	; 6
    25f8:	df 01       	movw	r26, r30
    25fa:	1d 92       	st	X+, r1
    25fc:	9a 95       	dec	r25
    25fe:	e9 f7       	brne	.-6      	; 0x25fa <bno055_read_euler_hrp+0x1a>
    2600:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2604:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2608:	30 97       	sbiw	r30, 0x00	; 0
    260a:	09 f4       	brne	.+2      	; 0x260e <bno055_read_euler_hrp+0x2e>
    260c:	3e c0       	rjmp	.+124    	; 0x268a <bno055_read_euler_hrp+0xaa>
    260e:	83 81       	ldd	r24, Z+3	; 0x03
    2610:	88 23       	and	r24, r24
    2612:	59 f0       	breq	.+22     	; 0x262a <bno055_read_euler_hrp+0x4a>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	a7 df       	rcall	.-178    	; 0x2566 <bno055_write_page_id>
    2618:	88 23       	and	r24, r24
    261a:	39 f0       	breq	.+14     	; 0x262a <bno055_read_euler_hrp+0x4a>
    261c:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2620:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2624:	83 81       	ldd	r24, Z+3	; 0x03
    2626:	81 11       	cpse	r24, r1
    2628:	32 c0       	rjmp	.+100    	; 0x268e <bno055_read_euler_hrp+0xae>
    262a:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    262e:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2632:	1b 96       	adiw	r26, 0x0b	; 11
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	1c 97       	sbiw	r26, 0x0c	; 12
    263a:	26 e0       	ldi	r18, 0x06	; 6
    263c:	ae 01       	movw	r20, r28
    263e:	4f 5f       	subi	r20, 0xFF	; 255
    2640:	5f 4f       	sbci	r21, 0xFF	; 255
    2642:	6a e1       	ldi	r22, 0x1A	; 26
    2644:	18 96       	adiw	r26, 0x08	; 8
    2646:	8c 91       	ld	r24, X
    2648:	19 95       	eicall
    264a:	2a 81       	ldd	r18, Y+2	; 0x02
    264c:	02 2e       	mov	r0, r18
    264e:	00 0c       	add	r0, r0
    2650:	33 0b       	sbc	r19, r19
    2652:	32 2f       	mov	r19, r18
    2654:	22 27       	eor	r18, r18
    2656:	99 81       	ldd	r25, Y+1	; 0x01
    2658:	29 2b       	or	r18, r25
    265a:	f8 01       	movw	r30, r16
    265c:	20 83       	st	Z, r18
    265e:	31 83       	std	Z+1, r19	; 0x01
    2660:	2c 81       	ldd	r18, Y+4	; 0x04
    2662:	02 2e       	mov	r0, r18
    2664:	00 0c       	add	r0, r0
    2666:	33 0b       	sbc	r19, r19
    2668:	32 2f       	mov	r19, r18
    266a:	22 27       	eor	r18, r18
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	29 2b       	or	r18, r25
    2670:	22 83       	std	Z+2, r18	; 0x02
    2672:	33 83       	std	Z+3, r19	; 0x03
    2674:	2e 81       	ldd	r18, Y+6	; 0x06
    2676:	02 2e       	mov	r0, r18
    2678:	00 0c       	add	r0, r0
    267a:	33 0b       	sbc	r19, r19
    267c:	32 2f       	mov	r19, r18
    267e:	22 27       	eor	r18, r18
    2680:	9d 81       	ldd	r25, Y+5	; 0x05
    2682:	29 2b       	or	r18, r25
    2684:	24 83       	std	Z+4, r18	; 0x04
    2686:	35 83       	std	Z+5, r19	; 0x05
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <bno055_read_euler_hrp+0xb0>
    268a:	81 e8       	ldi	r24, 0x81	; 129
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <bno055_read_euler_hrp+0xb0>
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	26 96       	adiw	r28, 0x06	; 6
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	08 95       	ret

000026a0 <bno055_read_linear_accel_xyz>:
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <bno055_read_linear_accel_xyz+0xa>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <bno055_read_linear_accel_xyz+0xc>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	8c 01       	movw	r16, r24
    26b2:	fe 01       	movw	r30, r28
    26b4:	31 96       	adiw	r30, 0x01	; 1
    26b6:	96 e0       	ldi	r25, 0x06	; 6
    26b8:	df 01       	movw	r26, r30
    26ba:	1d 92       	st	X+, r1
    26bc:	9a 95       	dec	r25
    26be:	e9 f7       	brne	.-6      	; 0x26ba <bno055_read_linear_accel_xyz+0x1a>
    26c0:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    26c4:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    26c8:	30 97       	sbiw	r30, 0x00	; 0
    26ca:	09 f4       	brne	.+2      	; 0x26ce <bno055_read_linear_accel_xyz+0x2e>
    26cc:	3e c0       	rjmp	.+124    	; 0x274a <bno055_read_linear_accel_xyz+0xaa>
    26ce:	83 81       	ldd	r24, Z+3	; 0x03
    26d0:	88 23       	and	r24, r24
    26d2:	59 f0       	breq	.+22     	; 0x26ea <bno055_read_linear_accel_xyz+0x4a>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	47 df       	rcall	.-370    	; 0x2566 <bno055_write_page_id>
    26d8:	88 23       	and	r24, r24
    26da:	39 f0       	breq	.+14     	; 0x26ea <bno055_read_linear_accel_xyz+0x4a>
    26dc:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    26e0:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    26e4:	83 81       	ldd	r24, Z+3	; 0x03
    26e6:	81 11       	cpse	r24, r1
    26e8:	32 c0       	rjmp	.+100    	; 0x274e <bno055_read_linear_accel_xyz+0xae>
    26ea:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    26ee:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    26f2:	1b 96       	adiw	r26, 0x0b	; 11
    26f4:	ed 91       	ld	r30, X+
    26f6:	fc 91       	ld	r31, X
    26f8:	1c 97       	sbiw	r26, 0x0c	; 12
    26fa:	26 e0       	ldi	r18, 0x06	; 6
    26fc:	ae 01       	movw	r20, r28
    26fe:	4f 5f       	subi	r20, 0xFF	; 255
    2700:	5f 4f       	sbci	r21, 0xFF	; 255
    2702:	68 e2       	ldi	r22, 0x28	; 40
    2704:	18 96       	adiw	r26, 0x08	; 8
    2706:	8c 91       	ld	r24, X
    2708:	19 95       	eicall
    270a:	2a 81       	ldd	r18, Y+2	; 0x02
    270c:	02 2e       	mov	r0, r18
    270e:	00 0c       	add	r0, r0
    2710:	33 0b       	sbc	r19, r19
    2712:	32 2f       	mov	r19, r18
    2714:	22 27       	eor	r18, r18
    2716:	99 81       	ldd	r25, Y+1	; 0x01
    2718:	29 2b       	or	r18, r25
    271a:	f8 01       	movw	r30, r16
    271c:	20 83       	st	Z, r18
    271e:	31 83       	std	Z+1, r19	; 0x01
    2720:	2c 81       	ldd	r18, Y+4	; 0x04
    2722:	02 2e       	mov	r0, r18
    2724:	00 0c       	add	r0, r0
    2726:	33 0b       	sbc	r19, r19
    2728:	32 2f       	mov	r19, r18
    272a:	22 27       	eor	r18, r18
    272c:	9b 81       	ldd	r25, Y+3	; 0x03
    272e:	29 2b       	or	r18, r25
    2730:	22 83       	std	Z+2, r18	; 0x02
    2732:	33 83       	std	Z+3, r19	; 0x03
    2734:	2e 81       	ldd	r18, Y+6	; 0x06
    2736:	02 2e       	mov	r0, r18
    2738:	00 0c       	add	r0, r0
    273a:	33 0b       	sbc	r19, r19
    273c:	32 2f       	mov	r19, r18
    273e:	22 27       	eor	r18, r18
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	29 2b       	or	r18, r25
    2744:	24 83       	std	Z+4, r18	; 0x04
    2746:	35 83       	std	Z+5, r19	; 0x05
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <bno055_read_linear_accel_xyz+0xb0>
    274a:	81 e8       	ldi	r24, 0x81	; 129
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <bno055_read_linear_accel_xyz+0xb0>
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	26 96       	adiw	r28, 0x06	; 6
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	08 95       	ret

00002760 <bno055_convert_double_linear_accel_xyz_msq>:
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	00 d0       	rcall	.+0      	; 0x276c <bno055_convert_double_linear_accel_xyz_msq+0xc>
    276c:	00 d0       	rcall	.+0      	; 0x276e <bno055_convert_double_linear_accel_xyz_msq+0xe>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	8c 01       	movw	r16, r24
    2774:	19 82       	std	Y+1, r1	; 0x01
    2776:	1a 82       	std	Y+2, r1	; 0x02
    2778:	1b 82       	std	Y+3, r1	; 0x03
    277a:	1c 82       	std	Y+4, r1	; 0x04
    277c:	1d 82       	std	Y+5, r1	; 0x05
    277e:	1e 82       	std	Y+6, r1	; 0x06
    2780:	ce 01       	movw	r24, r28
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	8d df       	rcall	.-230    	; 0x26a0 <bno055_read_linear_accel_xyz>
    2786:	f8 2e       	mov	r15, r24
    2788:	81 11       	cpse	r24, r1
    278a:	3a c0       	rjmp	.+116    	; 0x2800 <bno055_convert_double_linear_accel_xyz_msq+0xa0>
    278c:	69 81       	ldd	r22, Y+1	; 0x01
    278e:	7a 81       	ldd	r23, Y+2	; 0x02
    2790:	07 2e       	mov	r0, r23
    2792:	00 0c       	add	r0, r0
    2794:	88 0b       	sbc	r24, r24
    2796:	99 0b       	sbc	r25, r25
    2798:	0e 94 43 20 	call	0x4086	; 0x4086 <__floatsisf>
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	48 ec       	ldi	r20, 0xC8	; 200
    27a2:	52 e4       	ldi	r21, 0x42	; 66
    27a4:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__divsf3>
    27a8:	f8 01       	movw	r30, r16
    27aa:	60 83       	st	Z, r22
    27ac:	71 83       	std	Z+1, r23	; 0x01
    27ae:	82 83       	std	Z+2, r24	; 0x02
    27b0:	93 83       	std	Z+3, r25	; 0x03
    27b2:	6b 81       	ldd	r22, Y+3	; 0x03
    27b4:	7c 81       	ldd	r23, Y+4	; 0x04
    27b6:	07 2e       	mov	r0, r23
    27b8:	00 0c       	add	r0, r0
    27ba:	88 0b       	sbc	r24, r24
    27bc:	99 0b       	sbc	r25, r25
    27be:	0e 94 43 20 	call	0x4086	; 0x4086 <__floatsisf>
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	48 ec       	ldi	r20, 0xC8	; 200
    27c8:	52 e4       	ldi	r21, 0x42	; 66
    27ca:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__divsf3>
    27ce:	f8 01       	movw	r30, r16
    27d0:	64 83       	std	Z+4, r22	; 0x04
    27d2:	75 83       	std	Z+5, r23	; 0x05
    27d4:	86 83       	std	Z+6, r24	; 0x06
    27d6:	97 83       	std	Z+7, r25	; 0x07
    27d8:	6d 81       	ldd	r22, Y+5	; 0x05
    27da:	7e 81       	ldd	r23, Y+6	; 0x06
    27dc:	07 2e       	mov	r0, r23
    27de:	00 0c       	add	r0, r0
    27e0:	88 0b       	sbc	r24, r24
    27e2:	99 0b       	sbc	r25, r25
    27e4:	0e 94 43 20 	call	0x4086	; 0x4086 <__floatsisf>
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	48 ec       	ldi	r20, 0xC8	; 200
    27ee:	52 e4       	ldi	r21, 0x42	; 66
    27f0:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__divsf3>
    27f4:	f8 01       	movw	r30, r16
    27f6:	60 87       	std	Z+8, r22	; 0x08
    27f8:	71 87       	std	Z+9, r23	; 0x09
    27fa:	82 87       	std	Z+10, r24	; 0x0a
    27fc:	93 87       	std	Z+11, r25	; 0x0b
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <bno055_convert_double_linear_accel_xyz_msq+0xa4>
    2800:	ff 24       	eor	r15, r15
    2802:	fa 94       	dec	r15
    2804:	8f 2d       	mov	r24, r15
    2806:	26 96       	adiw	r28, 0x06	; 6
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	08 95       	ret

00002818 <bno055_get_mag_calib_stat>:
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	1f 92       	push	r1
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	19 82       	std	Y+1, r1	; 0x01
    2828:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    282c:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2830:	30 97       	sbiw	r30, 0x00	; 0
    2832:	21 f1       	breq	.+72     	; 0x287c <bno055_get_mag_calib_stat+0x64>
    2834:	8c 01       	movw	r16, r24
    2836:	83 81       	ldd	r24, Z+3	; 0x03
    2838:	88 23       	and	r24, r24
    283a:	59 f0       	breq	.+22     	; 0x2852 <bno055_get_mag_calib_stat+0x3a>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	93 de       	rcall	.-730    	; 0x2566 <bno055_write_page_id>
    2840:	88 23       	and	r24, r24
    2842:	39 f0       	breq	.+14     	; 0x2852 <bno055_get_mag_calib_stat+0x3a>
    2844:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2848:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    284c:	83 81       	ldd	r24, Z+3	; 0x03
    284e:	81 11       	cpse	r24, r1
    2850:	17 c0       	rjmp	.+46     	; 0x2880 <bno055_get_mag_calib_stat+0x68>
    2852:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2856:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    285a:	1b 96       	adiw	r26, 0x0b	; 11
    285c:	ed 91       	ld	r30, X+
    285e:	fc 91       	ld	r31, X
    2860:	1c 97       	sbiw	r26, 0x0c	; 12
    2862:	21 e0       	ldi	r18, 0x01	; 1
    2864:	ae 01       	movw	r20, r28
    2866:	4f 5f       	subi	r20, 0xFF	; 255
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	65 e3       	ldi	r22, 0x35	; 53
    286c:	18 96       	adiw	r26, 0x08	; 8
    286e:	8c 91       	ld	r24, X
    2870:	19 95       	eicall
    2872:	99 81       	ldd	r25, Y+1	; 0x01
    2874:	93 70       	andi	r25, 0x03	; 3
    2876:	f8 01       	movw	r30, r16
    2878:	90 83       	st	Z, r25
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <bno055_get_mag_calib_stat+0x6a>
    287c:	81 e8       	ldi	r24, 0x81	; 129
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <bno055_get_mag_calib_stat+0x6a>
    2880:	8f ef       	ldi	r24, 0xFF	; 255
    2882:	0f 90       	pop	r0
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	08 95       	ret

0000288e <bno055_get_accel_calib_stat>:
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	1f 92       	push	r1
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    28a2:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    28a6:	30 97       	sbiw	r30, 0x00	; 0
    28a8:	49 f1       	breq	.+82     	; 0x28fc <bno055_get_accel_calib_stat+0x6e>
    28aa:	8c 01       	movw	r16, r24
    28ac:	83 81       	ldd	r24, Z+3	; 0x03
    28ae:	88 23       	and	r24, r24
    28b0:	59 f0       	breq	.+22     	; 0x28c8 <bno055_get_accel_calib_stat+0x3a>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	58 de       	rcall	.-848    	; 0x2566 <bno055_write_page_id>
    28b6:	88 23       	and	r24, r24
    28b8:	39 f0       	breq	.+14     	; 0x28c8 <bno055_get_accel_calib_stat+0x3a>
    28ba:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    28be:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    28c2:	83 81       	ldd	r24, Z+3	; 0x03
    28c4:	81 11       	cpse	r24, r1
    28c6:	1c c0       	rjmp	.+56     	; 0x2900 <bno055_get_accel_calib_stat+0x72>
    28c8:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    28cc:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    28d0:	1b 96       	adiw	r26, 0x0b	; 11
    28d2:	ed 91       	ld	r30, X+
    28d4:	fc 91       	ld	r31, X
    28d6:	1c 97       	sbiw	r26, 0x0c	; 12
    28d8:	21 e0       	ldi	r18, 0x01	; 1
    28da:	ae 01       	movw	r20, r28
    28dc:	4f 5f       	subi	r20, 0xFF	; 255
    28de:	5f 4f       	sbci	r21, 0xFF	; 255
    28e0:	65 e3       	ldi	r22, 0x35	; 53
    28e2:	18 96       	adiw	r26, 0x08	; 8
    28e4:	8c 91       	ld	r24, X
    28e6:	19 95       	eicall
    28e8:	29 81       	ldd	r18, Y+1	; 0x01
    28ea:	2c 70       	andi	r18, 0x0C	; 12
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	35 95       	asr	r19
    28f0:	27 95       	ror	r18
    28f2:	35 95       	asr	r19
    28f4:	27 95       	ror	r18
    28f6:	f8 01       	movw	r30, r16
    28f8:	20 83       	st	Z, r18
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <bno055_get_accel_calib_stat+0x74>
    28fc:	81 e8       	ldi	r24, 0x81	; 129
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <bno055_get_accel_calib_stat+0x74>
    2900:	8f ef       	ldi	r24, 0xFF	; 255
    2902:	0f 90       	pop	r0
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	08 95       	ret

0000290e <bno055_get_gyro_calib_stat>:
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	1f 92       	push	r1
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	19 82       	std	Y+1, r1	; 0x01
    291e:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2922:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2926:	30 97       	sbiw	r30, 0x00	; 0
    2928:	69 f1       	breq	.+90     	; 0x2984 <bno055_get_gyro_calib_stat+0x76>
    292a:	8c 01       	movw	r16, r24
    292c:	83 81       	ldd	r24, Z+3	; 0x03
    292e:	88 23       	and	r24, r24
    2930:	59 f0       	breq	.+22     	; 0x2948 <bno055_get_gyro_calib_stat+0x3a>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	18 de       	rcall	.-976    	; 0x2566 <bno055_write_page_id>
    2936:	88 23       	and	r24, r24
    2938:	39 f0       	breq	.+14     	; 0x2948 <bno055_get_gyro_calib_stat+0x3a>
    293a:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    293e:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2942:	83 81       	ldd	r24, Z+3	; 0x03
    2944:	81 11       	cpse	r24, r1
    2946:	20 c0       	rjmp	.+64     	; 0x2988 <bno055_get_gyro_calib_stat+0x7a>
    2948:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    294c:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2950:	1b 96       	adiw	r26, 0x0b	; 11
    2952:	ed 91       	ld	r30, X+
    2954:	fc 91       	ld	r31, X
    2956:	1c 97       	sbiw	r26, 0x0c	; 12
    2958:	21 e0       	ldi	r18, 0x01	; 1
    295a:	ae 01       	movw	r20, r28
    295c:	4f 5f       	subi	r20, 0xFF	; 255
    295e:	5f 4f       	sbci	r21, 0xFF	; 255
    2960:	65 e3       	ldi	r22, 0x35	; 53
    2962:	18 96       	adiw	r26, 0x08	; 8
    2964:	8c 91       	ld	r24, X
    2966:	19 95       	eicall
    2968:	29 81       	ldd	r18, Y+1	; 0x01
    296a:	20 73       	andi	r18, 0x30	; 48
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	35 95       	asr	r19
    2970:	27 95       	ror	r18
    2972:	35 95       	asr	r19
    2974:	27 95       	ror	r18
    2976:	35 95       	asr	r19
    2978:	27 95       	ror	r18
    297a:	35 95       	asr	r19
    297c:	27 95       	ror	r18
    297e:	f8 01       	movw	r30, r16
    2980:	20 83       	st	Z, r18
    2982:	03 c0       	rjmp	.+6      	; 0x298a <bno055_get_gyro_calib_stat+0x7c>
    2984:	81 e8       	ldi	r24, 0x81	; 129
    2986:	01 c0       	rjmp	.+2      	; 0x298a <bno055_get_gyro_calib_stat+0x7c>
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	0f 90       	pop	r0
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	08 95       	ret

00002996 <bno055_get_sys_calib_stat>:
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	1f 92       	push	r1
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	19 82       	std	Y+1, r1	; 0x01
    29a6:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    29aa:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    29ae:	30 97       	sbiw	r30, 0x00	; 0
    29b0:	39 f1       	breq	.+78     	; 0x2a00 <bno055_get_sys_calib_stat+0x6a>
    29b2:	8c 01       	movw	r16, r24
    29b4:	83 81       	ldd	r24, Z+3	; 0x03
    29b6:	88 23       	and	r24, r24
    29b8:	59 f0       	breq	.+22     	; 0x29d0 <bno055_get_sys_calib_stat+0x3a>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	d4 dd       	rcall	.-1112   	; 0x2566 <bno055_write_page_id>
    29be:	88 23       	and	r24, r24
    29c0:	39 f0       	breq	.+14     	; 0x29d0 <bno055_get_sys_calib_stat+0x3a>
    29c2:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    29c6:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    29ca:	83 81       	ldd	r24, Z+3	; 0x03
    29cc:	81 11       	cpse	r24, r1
    29ce:	1a c0       	rjmp	.+52     	; 0x2a04 <bno055_get_sys_calib_stat+0x6e>
    29d0:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    29d4:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    29d8:	1b 96       	adiw	r26, 0x0b	; 11
    29da:	ed 91       	ld	r30, X+
    29dc:	fc 91       	ld	r31, X
    29de:	1c 97       	sbiw	r26, 0x0c	; 12
    29e0:	21 e0       	ldi	r18, 0x01	; 1
    29e2:	ae 01       	movw	r20, r28
    29e4:	4f 5f       	subi	r20, 0xFF	; 255
    29e6:	5f 4f       	sbci	r21, 0xFF	; 255
    29e8:	65 e3       	ldi	r22, 0x35	; 53
    29ea:	18 96       	adiw	r26, 0x08	; 8
    29ec:	8c 91       	ld	r24, X
    29ee:	19 95       	eicall
    29f0:	99 81       	ldd	r25, Y+1	; 0x01
    29f2:	92 95       	swap	r25
    29f4:	96 95       	lsr	r25
    29f6:	96 95       	lsr	r25
    29f8:	93 70       	andi	r25, 0x03	; 3
    29fa:	f8 01       	movw	r30, r16
    29fc:	90 83       	st	Z, r25
    29fe:	03 c0       	rjmp	.+6      	; 0x2a06 <bno055_get_sys_calib_stat+0x70>
    2a00:	81 e8       	ldi	r24, 0x81	; 129
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <bno055_get_sys_calib_stat+0x70>
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	0f 90       	pop	r0
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <bno055_get_euler_unit>:
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	1f 92       	push	r1
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	19 82       	std	Y+1, r1	; 0x01
    2a22:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2a26:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2a2a:	30 97       	sbiw	r30, 0x00	; 0
    2a2c:	31 f1       	breq	.+76     	; 0x2a7a <bno055_get_euler_unit+0x68>
    2a2e:	8c 01       	movw	r16, r24
    2a30:	83 81       	ldd	r24, Z+3	; 0x03
    2a32:	88 23       	and	r24, r24
    2a34:	59 f0       	breq	.+22     	; 0x2a4c <bno055_get_euler_unit+0x3a>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	96 dd       	rcall	.-1236   	; 0x2566 <bno055_write_page_id>
    2a3a:	88 23       	and	r24, r24
    2a3c:	39 f0       	breq	.+14     	; 0x2a4c <bno055_get_euler_unit+0x3a>
    2a3e:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2a42:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2a46:	83 81       	ldd	r24, Z+3	; 0x03
    2a48:	81 11       	cpse	r24, r1
    2a4a:	19 c0       	rjmp	.+50     	; 0x2a7e <bno055_get_euler_unit+0x6c>
    2a4c:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2a50:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2a54:	1b 96       	adiw	r26, 0x0b	; 11
    2a56:	ed 91       	ld	r30, X+
    2a58:	fc 91       	ld	r31, X
    2a5a:	1c 97       	sbiw	r26, 0x0c	; 12
    2a5c:	21 e0       	ldi	r18, 0x01	; 1
    2a5e:	ae 01       	movw	r20, r28
    2a60:	4f 5f       	subi	r20, 0xFF	; 255
    2a62:	5f 4f       	sbci	r21, 0xFF	; 255
    2a64:	6b e3       	ldi	r22, 0x3B	; 59
    2a66:	18 96       	adiw	r26, 0x08	; 8
    2a68:	8c 91       	ld	r24, X
    2a6a:	19 95       	eicall
    2a6c:	99 81       	ldd	r25, Y+1	; 0x01
    2a6e:	92 fb       	bst	r25, 2
    2a70:	99 27       	eor	r25, r25
    2a72:	90 f9       	bld	r25, 0
    2a74:	f8 01       	movw	r30, r16
    2a76:	90 83       	st	Z, r25
    2a78:	03 c0       	rjmp	.+6      	; 0x2a80 <bno055_get_euler_unit+0x6e>
    2a7a:	81 e8       	ldi	r24, 0x81	; 129
    2a7c:	01 c0       	rjmp	.+2      	; 0x2a80 <bno055_get_euler_unit+0x6e>
    2a7e:	8f ef       	ldi	r24, 0xFF	; 255
    2a80:	0f 90       	pop	r0
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	08 95       	ret

00002a8c <bno055_get_operation_mode>:
    2a8c:	0f 93       	push	r16
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	1f 92       	push	r1
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	19 82       	std	Y+1, r1	; 0x01
    2a9c:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2aa0:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2aa4:	30 97       	sbiw	r30, 0x00	; 0
    2aa6:	21 f1       	breq	.+72     	; 0x2af0 <bno055_get_operation_mode+0x64>
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	83 81       	ldd	r24, Z+3	; 0x03
    2aac:	88 23       	and	r24, r24
    2aae:	59 f0       	breq	.+22     	; 0x2ac6 <bno055_get_operation_mode+0x3a>
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	59 dd       	rcall	.-1358   	; 0x2566 <bno055_write_page_id>
    2ab4:	88 23       	and	r24, r24
    2ab6:	39 f0       	breq	.+14     	; 0x2ac6 <bno055_get_operation_mode+0x3a>
    2ab8:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2abc:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2ac0:	83 81       	ldd	r24, Z+3	; 0x03
    2ac2:	81 11       	cpse	r24, r1
    2ac4:	17 c0       	rjmp	.+46     	; 0x2af4 <bno055_get_operation_mode+0x68>
    2ac6:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2aca:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2ace:	1b 96       	adiw	r26, 0x0b	; 11
    2ad0:	ed 91       	ld	r30, X+
    2ad2:	fc 91       	ld	r31, X
    2ad4:	1c 97       	sbiw	r26, 0x0c	; 12
    2ad6:	21 e0       	ldi	r18, 0x01	; 1
    2ad8:	ae 01       	movw	r20, r28
    2ada:	4f 5f       	subi	r20, 0xFF	; 255
    2adc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ade:	6d e3       	ldi	r22, 0x3D	; 61
    2ae0:	18 96       	adiw	r26, 0x08	; 8
    2ae2:	8c 91       	ld	r24, X
    2ae4:	19 95       	eicall
    2ae6:	99 81       	ldd	r25, Y+1	; 0x01
    2ae8:	9f 70       	andi	r25, 0x0F	; 15
    2aea:	f8 01       	movw	r30, r16
    2aec:	90 83       	st	Z, r25
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <bno055_get_operation_mode+0x6a>
    2af0:	81 e8       	ldi	r24, 0x81	; 129
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <bno055_get_operation_mode+0x6a>
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	0f 90       	pop	r0
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <bno055_set_operation_mode>:
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	1f 92       	push	r1
    2b0c:	1f 92       	push	r1
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	19 82       	std	Y+1, r1	; 0x01
    2b14:	1a 82       	std	Y+2, r1	; 0x02
    2b16:	20 91 b0 22 	lds	r18, 0x22B0	; 0x8022b0 <p_bno055>
    2b1a:	30 91 b1 22 	lds	r19, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2b1e:	23 2b       	or	r18, r19
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <bno055_set_operation_mode+0x22>
    2b22:	9c c0       	rjmp	.+312    	; 0x2c5c <bno055_set_operation_mode+0x15a>
    2b24:	08 2f       	mov	r16, r24
    2b26:	ce 01       	movw	r24, r28
    2b28:	02 96       	adiw	r24, 0x02	; 2
    2b2a:	b0 df       	rcall	.-160    	; 0x2a8c <bno055_get_operation_mode>
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	98 c0       	rjmp	.+304    	; 0x2c60 <bno055_set_operation_mode+0x15e>
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	81 11       	cpse	r24, r1
    2b34:	35 c0       	rjmp	.+106    	; 0x2ba0 <bno055_set_operation_mode+0x9e>
    2b36:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2b3a:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2b3e:	1b 96       	adiw	r26, 0x0b	; 11
    2b40:	ed 91       	ld	r30, X+
    2b42:	fc 91       	ld	r31, X
    2b44:	1c 97       	sbiw	r26, 0x0c	; 12
    2b46:	21 e0       	ldi	r18, 0x01	; 1
    2b48:	ae 01       	movw	r20, r28
    2b4a:	4f 5f       	subi	r20, 0xFF	; 255
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	6d e3       	ldi	r22, 0x3D	; 61
    2b50:	18 96       	adiw	r26, 0x08	; 8
    2b52:	8c 91       	ld	r24, X
    2b54:	19 95       	eicall
    2b56:	81 11       	cpse	r24, r1
    2b58:	85 c0       	rjmp	.+266    	; 0x2c64 <bno055_set_operation_mode+0x162>
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	98 2f       	mov	r25, r24
    2b5e:	90 7f       	andi	r25, 0xF0	; 240
    2b60:	80 2f       	mov	r24, r16
    2b62:	8f 70       	andi	r24, 0x0F	; 15
    2b64:	89 2b       	or	r24, r25
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2b6c:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2b70:	19 96       	adiw	r26, 0x09	; 9
    2b72:	ed 91       	ld	r30, X+
    2b74:	fc 91       	ld	r31, X
    2b76:	1a 97       	sbiw	r26, 0x0a	; 10
    2b78:	21 e0       	ldi	r18, 0x01	; 1
    2b7a:	ae 01       	movw	r20, r28
    2b7c:	4f 5f       	subi	r20, 0xFF	; 255
    2b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b80:	6d e3       	ldi	r22, 0x3D	; 61
    2b82:	18 96       	adiw	r26, 0x08	; 8
    2b84:	8c 91       	ld	r24, X
    2b86:	19 95       	eicall
    2b88:	18 2f       	mov	r17, r24
    2b8a:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2b8e:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2b92:	05 84       	ldd	r0, Z+13	; 0x0d
    2b94:	f6 85       	ldd	r31, Z+14	; 0x0e
    2b96:	e0 2d       	mov	r30, r0
    2b98:	88 e5       	ldi	r24, 0x58	; 88
    2b9a:	92 e0       	ldi	r25, 0x02	; 2
    2b9c:	19 95       	eicall
    2b9e:	65 c0       	rjmp	.+202    	; 0x2c6a <bno055_set_operation_mode+0x168>
    2ba0:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2ba4:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2ba8:	1b 96       	adiw	r26, 0x0b	; 11
    2baa:	ed 91       	ld	r30, X+
    2bac:	fc 91       	ld	r31, X
    2bae:	1c 97       	sbiw	r26, 0x0c	; 12
    2bb0:	21 e0       	ldi	r18, 0x01	; 1
    2bb2:	ae 01       	movw	r20, r28
    2bb4:	4f 5f       	subi	r20, 0xFF	; 255
    2bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb8:	6d e3       	ldi	r22, 0x3D	; 61
    2bba:	18 96       	adiw	r26, 0x08	; 8
    2bbc:	8c 91       	ld	r24, X
    2bbe:	19 95       	eicall
    2bc0:	18 2f       	mov	r17, r24
    2bc2:	81 11       	cpse	r24, r1
    2bc4:	14 c0       	rjmp	.+40     	; 0x2bee <bno055_set_operation_mode+0xec>
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	80 7f       	andi	r24, 0xF0	; 240
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	be 01       	movw	r22, r28
    2bd0:	6f 5f       	subi	r22, 0xFF	; 255
    2bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd4:	8d e3       	ldi	r24, 0x3D	; 61
    2bd6:	b4 dc       	rcall	.-1688   	; 0x2540 <bno055_write_register>
    2bd8:	18 2f       	mov	r17, r24
    2bda:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2bde:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2be2:	05 84       	ldd	r0, Z+13	; 0x0d
    2be4:	f6 85       	ldd	r31, Z+14	; 0x0e
    2be6:	e0 2d       	mov	r30, r0
    2be8:	84 e1       	ldi	r24, 0x14	; 20
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	19 95       	eicall
    2bee:	00 23       	and	r16, r16
    2bf0:	e1 f1       	breq	.+120    	; 0x2c6a <bno055_set_operation_mode+0x168>
    2bf2:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2bf6:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2bfa:	1b 96       	adiw	r26, 0x0b	; 11
    2bfc:	ed 91       	ld	r30, X+
    2bfe:	fc 91       	ld	r31, X
    2c00:	1c 97       	sbiw	r26, 0x0c	; 12
    2c02:	21 e0       	ldi	r18, 0x01	; 1
    2c04:	ae 01       	movw	r20, r28
    2c06:	4f 5f       	subi	r20, 0xFF	; 255
    2c08:	5f 4f       	sbci	r21, 0xFF	; 255
    2c0a:	6d e3       	ldi	r22, 0x3D	; 61
    2c0c:	18 96       	adiw	r26, 0x08	; 8
    2c0e:	8c 91       	ld	r24, X
    2c10:	19 95       	eicall
    2c12:	81 11       	cpse	r24, r1
    2c14:	29 c0       	rjmp	.+82     	; 0x2c68 <bno055_set_operation_mode+0x166>
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	98 2f       	mov	r25, r24
    2c1a:	90 7f       	andi	r25, 0xF0	; 240
    2c1c:	80 2f       	mov	r24, r16
    2c1e:	8f 70       	andi	r24, 0x0F	; 15
    2c20:	89 2b       	or	r24, r25
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2c28:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2c2c:	19 96       	adiw	r26, 0x09	; 9
    2c2e:	ed 91       	ld	r30, X+
    2c30:	fc 91       	ld	r31, X
    2c32:	1a 97       	sbiw	r26, 0x0a	; 10
    2c34:	21 e0       	ldi	r18, 0x01	; 1
    2c36:	ae 01       	movw	r20, r28
    2c38:	4f 5f       	subi	r20, 0xFF	; 255
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3c:	6d e3       	ldi	r22, 0x3D	; 61
    2c3e:	18 96       	adiw	r26, 0x08	; 8
    2c40:	8c 91       	ld	r24, X
    2c42:	19 95       	eicall
    2c44:	18 2f       	mov	r17, r24
    2c46:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <p_bno055>
    2c4a:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2c4e:	05 84       	ldd	r0, Z+13	; 0x0d
    2c50:	f6 85       	ldd	r31, Z+14	; 0x0e
    2c52:	e0 2d       	mov	r30, r0
    2c54:	88 e5       	ldi	r24, 0x58	; 88
    2c56:	92 e0       	ldi	r25, 0x02	; 2
    2c58:	19 95       	eicall
    2c5a:	07 c0       	rjmp	.+14     	; 0x2c6a <bno055_set_operation_mode+0x168>
    2c5c:	11 e8       	ldi	r17, 0x81	; 129
    2c5e:	05 c0       	rjmp	.+10     	; 0x2c6a <bno055_set_operation_mode+0x168>
    2c60:	1f ef       	ldi	r17, 0xFF	; 255
    2c62:	03 c0       	rjmp	.+6      	; 0x2c6a <bno055_set_operation_mode+0x168>
    2c64:	18 2f       	mov	r17, r24
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <bno055_set_operation_mode+0x168>
    2c68:	18 2f       	mov	r17, r24
    2c6a:	81 2f       	mov	r24, r17
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	08 95       	ret

00002c7a <bno055_set_euler_unit>:
    2c7a:	0f 93       	push	r16
    2c7c:	1f 93       	push	r17
    2c7e:	cf 93       	push	r28
    2c80:	df 93       	push	r29
    2c82:	1f 92       	push	r1
    2c84:	1f 92       	push	r1
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	19 82       	std	Y+1, r1	; 0x01
    2c8c:	1a 82       	std	Y+2, r1	; 0x02
    2c8e:	20 91 b0 22 	lds	r18, 0x22B0	; 0x8022b0 <p_bno055>
    2c92:	30 91 b1 22 	lds	r19, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2c96:	23 2b       	or	r18, r19
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <bno055_set_euler_unit+0x22>
    2c9a:	44 c0       	rjmp	.+136    	; 0x2d24 <bno055_set_euler_unit+0xaa>
    2c9c:	08 2f       	mov	r16, r24
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	02 96       	adiw	r24, 0x02	; 2
    2ca2:	f4 de       	rcall	.-536    	; 0x2a8c <bno055_get_operation_mode>
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	35 c0       	rjmp	.+106    	; 0x2d12 <bno055_set_euler_unit+0x98>
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	88 23       	and	r24, r24
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <bno055_set_euler_unit+0x3c>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	28 df       	rcall	.-432    	; 0x2b02 <bno055_set_operation_mode>
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	30 c0       	rjmp	.+96     	; 0x2d16 <bno055_set_euler_unit+0x9c>
    2cb6:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2cba:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2cbe:	1b 96       	adiw	r26, 0x0b	; 11
    2cc0:	ed 91       	ld	r30, X+
    2cc2:	fc 91       	ld	r31, X
    2cc4:	1c 97       	sbiw	r26, 0x0c	; 12
    2cc6:	21 e0       	ldi	r18, 0x01	; 1
    2cc8:	ae 01       	movw	r20, r28
    2cca:	4f 5f       	subi	r20, 0xFF	; 255
    2ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cce:	6b e3       	ldi	r22, 0x3B	; 59
    2cd0:	18 96       	adiw	r26, 0x08	; 8
    2cd2:	8c 91       	ld	r24, X
    2cd4:	19 95       	eicall
    2cd6:	18 2f       	mov	r17, r24
    2cd8:	81 11       	cpse	r24, r1
    2cda:	1e c0       	rjmp	.+60     	; 0x2d18 <bno055_set_euler_unit+0x9e>
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	98 2f       	mov	r25, r24
    2ce0:	9b 7f       	andi	r25, 0xFB	; 251
    2ce2:	80 2f       	mov	r24, r16
    2ce4:	88 0f       	add	r24, r24
    2ce6:	88 0f       	add	r24, r24
    2ce8:	84 70       	andi	r24, 0x04	; 4
    2cea:	89 2b       	or	r24, r25
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2cf2:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2cf6:	19 96       	adiw	r26, 0x09	; 9
    2cf8:	ed 91       	ld	r30, X+
    2cfa:	fc 91       	ld	r31, X
    2cfc:	1a 97       	sbiw	r26, 0x0a	; 10
    2cfe:	21 e0       	ldi	r18, 0x01	; 1
    2d00:	ae 01       	movw	r20, r28
    2d02:	4f 5f       	subi	r20, 0xFF	; 255
    2d04:	5f 4f       	sbci	r21, 0xFF	; 255
    2d06:	6b e3       	ldi	r22, 0x3B	; 59
    2d08:	18 96       	adiw	r26, 0x08	; 8
    2d0a:	8c 91       	ld	r24, X
    2d0c:	19 95       	eicall
    2d0e:	18 2f       	mov	r17, r24
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <bno055_set_euler_unit+0x9e>
    2d12:	1f ef       	ldi	r17, 0xFF	; 255
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <bno055_set_euler_unit+0x9e>
    2d16:	1f ef       	ldi	r17, 0xFF	; 255
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	88 23       	and	r24, r24
    2d1c:	29 f0       	breq	.+10     	; 0x2d28 <bno055_set_euler_unit+0xae>
    2d1e:	f1 de       	rcall	.-542    	; 0x2b02 <bno055_set_operation_mode>
    2d20:	81 0f       	add	r24, r17
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <bno055_set_euler_unit+0xb0>
    2d24:	81 e8       	ldi	r24, 0x81	; 129
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <bno055_set_euler_unit+0xb0>
    2d28:	81 2f       	mov	r24, r17
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	08 95       	ret

00002d38 <bno055_convert_double_euler_hpr_deg>:
    2d38:	ef 92       	push	r14
    2d3a:	ff 92       	push	r15
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	27 97       	sbiw	r28, 0x07	; 7
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	7c 01       	movw	r14, r24
    2d4e:	19 82       	std	Y+1, r1	; 0x01
    2d50:	1a 82       	std	Y+2, r1	; 0x02
    2d52:	1b 82       	std	Y+3, r1	; 0x03
    2d54:	1c 82       	std	Y+4, r1	; 0x04
    2d56:	1d 82       	std	Y+5, r1	; 0x05
    2d58:	1e 82       	std	Y+6, r1	; 0x06
    2d5a:	1f 82       	std	Y+7, r1	; 0x07
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	07 96       	adiw	r24, 0x07	; 7
    2d60:	58 de       	rcall	.-848    	; 0x2a12 <bno055_get_euler_unit>
    2d62:	18 2f       	mov	r17, r24
    2d64:	8f 81       	ldd	r24, Y+7	; 0x07
    2d66:	88 23       	and	r24, r24
    2d68:	19 f0       	breq	.+6      	; 0x2d70 <bno055_convert_double_euler_hpr_deg+0x38>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	86 df       	rcall	.-244    	; 0x2c7a <bno055_set_euler_unit>
    2d6e:	18 0f       	add	r17, r24
    2d70:	11 11       	cpse	r17, r1
    2d72:	3f c0       	rjmp	.+126    	; 0x2df2 <bno055_convert_double_euler_hpr_deg+0xba>
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	33 dc       	rcall	.-1946   	; 0x25e0 <bno055_read_euler_hrp>
    2d7a:	81 11       	cpse	r24, r1
    2d7c:	3c c0       	rjmp	.+120    	; 0x2df6 <bno055_convert_double_euler_hpr_deg+0xbe>
    2d7e:	69 81       	ldd	r22, Y+1	; 0x01
    2d80:	7a 81       	ldd	r23, Y+2	; 0x02
    2d82:	07 2e       	mov	r0, r23
    2d84:	00 0c       	add	r0, r0
    2d86:	88 0b       	sbc	r24, r24
    2d88:	99 0b       	sbc	r25, r25
    2d8a:	0e 94 43 20 	call	0x4086	; 0x4086 <__floatsisf>
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5d e3       	ldi	r21, 0x3D	; 61
    2d96:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__mulsf3>
    2d9a:	f7 01       	movw	r30, r14
    2d9c:	60 83       	st	Z, r22
    2d9e:	71 83       	std	Z+1, r23	; 0x01
    2da0:	82 83       	std	Z+2, r24	; 0x02
    2da2:	93 83       	std	Z+3, r25	; 0x03
    2da4:	6d 81       	ldd	r22, Y+5	; 0x05
    2da6:	7e 81       	ldd	r23, Y+6	; 0x06
    2da8:	07 2e       	mov	r0, r23
    2daa:	00 0c       	add	r0, r0
    2dac:	88 0b       	sbc	r24, r24
    2dae:	99 0b       	sbc	r25, r25
    2db0:	0e 94 43 20 	call	0x4086	; 0x4086 <__floatsisf>
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5d e3       	ldi	r21, 0x3D	; 61
    2dbc:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__mulsf3>
    2dc0:	f7 01       	movw	r30, r14
    2dc2:	60 87       	std	Z+8, r22	; 0x08
    2dc4:	71 87       	std	Z+9, r23	; 0x09
    2dc6:	82 87       	std	Z+10, r24	; 0x0a
    2dc8:	93 87       	std	Z+11, r25	; 0x0b
    2dca:	6b 81       	ldd	r22, Y+3	; 0x03
    2dcc:	7c 81       	ldd	r23, Y+4	; 0x04
    2dce:	07 2e       	mov	r0, r23
    2dd0:	00 0c       	add	r0, r0
    2dd2:	88 0b       	sbc	r24, r24
    2dd4:	99 0b       	sbc	r25, r25
    2dd6:	0e 94 43 20 	call	0x4086	; 0x4086 <__floatsisf>
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	5d e3       	ldi	r21, 0x3D	; 61
    2de2:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__mulsf3>
    2de6:	f7 01       	movw	r30, r14
    2de8:	64 83       	std	Z+4, r22	; 0x04
    2dea:	75 83       	std	Z+5, r23	; 0x05
    2dec:	86 83       	std	Z+6, r24	; 0x06
    2dee:	97 83       	std	Z+7, r25	; 0x07
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <bno055_convert_double_euler_hpr_deg+0xc0>
    2df2:	1f ef       	ldi	r17, 0xFF	; 255
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <bno055_convert_double_euler_hpr_deg+0xc0>
    2df6:	1f ef       	ldi	r17, 0xFF	; 255
    2df8:	81 2f       	mov	r24, r17
    2dfa:	27 96       	adiw	r28, 0x07	; 7
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	08 95       	ret

00002e0c <bno055_set_power_mode>:
 *	@note For detailed about LOWPOWER mode
 *	refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	1f 92       	push	r1
    2e16:	1f 92       	push	r1
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
u8 data_u8r = BNO055_INIT_VALUE;
    2e1c:	19 82       	std	Y+1, r1	; 0x01
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    2e1e:	1a 82       	std	Y+2, r1	; 0x02
s8 stat_s8 = BNO055_ERROR;
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    2e20:	20 91 b0 22 	lds	r18, 0x22B0	; 0x8022b0 <p_bno055>
    2e24:	30 91 b1 22 	lds	r19, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2e28:	23 2b       	or	r18, r19
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <bno055_set_power_mode+0x22>
    2e2c:	42 c0       	rjmp	.+132    	; 0x2eb2 <bno055_set_power_mode+0xa6>
    2e2e:	08 2f       	mov	r16, r24
	return BNO055_E_NULL_PTR;
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    2e30:	ce 01       	movw	r24, r28
    2e32:	02 96       	adiw	r24, 0x02	; 2
    2e34:	2b de       	rcall	.-938    	; 0x2a8c <bno055_get_operation_mode>
		if (stat_s8 == BNO055_SUCCESS) {
    2e36:	81 11       	cpse	r24, r1
    2e38:	33 c0       	rjmp	.+102    	; 0x2ea0 <bno055_set_power_mode+0x94>
			if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	88 23       	and	r24, r24
    2e3e:	21 f0       	breq	.+8      	; 0x2e48 <bno055_set_power_mode+0x3c>
				stat_s8 += bno055_set_operation_mode
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	5f de       	rcall	.-834    	; 0x2b02 <bno055_set_operation_mode>
				(BNO055_OPERATION_MODE_CONFIG);
			if (stat_s8 == BNO055_SUCCESS) {
    2e44:	81 11       	cpse	r24, r1
    2e46:	2e c0       	rjmp	.+92     	; 0x2ea4 <bno055_set_power_mode+0x98>
				/* Write the value of power mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2e48:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2e4c:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2e50:	1b 96       	adiw	r26, 0x0b	; 11
    2e52:	ed 91       	ld	r30, X+
    2e54:	fc 91       	ld	r31, X
    2e56:	1c 97       	sbiw	r26, 0x0c	; 12
    2e58:	21 e0       	ldi	r18, 0x01	; 1
    2e5a:	ae 01       	movw	r20, r28
    2e5c:	4f 5f       	subi	r20, 0xFF	; 255
    2e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e60:	6e e3       	ldi	r22, 0x3E	; 62
    2e62:	18 96       	adiw	r26, 0x08	; 8
    2e64:	8c 91       	ld	r24, X
    2e66:	19 95       	eicall
    2e68:	18 2f       	mov	r17, r24
				(p_bno055->dev_addr,
				BNO055_POWER_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    2e6a:	81 11       	cpse	r24, r1
    2e6c:	1c c0       	rjmp	.+56     	; 0x2ea6 <bno055_set_power_mode+0x9a>
					data_u8r =
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	98 2f       	mov	r25, r24
    2e72:	9c 7f       	andi	r25, 0xFC	; 252
    2e74:	80 2f       	mov	r24, r16
    2e76:	83 70       	andi	r24, 0x03	; 3
    2e78:	89 2b       	or	r24, r25
    2e7a:	89 83       	std	Y+1, r24	; 0x01
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    2e7c:	a0 91 b0 22 	lds	r26, 0x22B0	; 0x8022b0 <p_bno055>
    2e80:	b0 91 b1 22 	lds	r27, 0x22B1	; 0x8022b1 <p_bno055+0x1>
    2e84:	19 96       	adiw	r26, 0x09	; 9
    2e86:	ed 91       	ld	r30, X+
    2e88:	fc 91       	ld	r31, X
    2e8a:	1a 97       	sbiw	r26, 0x0a	; 10
    2e8c:	21 e0       	ldi	r18, 0x01	; 1
    2e8e:	ae 01       	movw	r20, r28
    2e90:	4f 5f       	subi	r20, 0xFF	; 255
    2e92:	5f 4f       	sbci	r21, 0xFF	; 255
    2e94:	6e e3       	ldi	r22, 0x3E	; 62
    2e96:	18 96       	adiw	r26, 0x08	; 8
    2e98:	8c 91       	ld	r24, X
    2e9a:	19 95       	eicall
    2e9c:	18 2f       	mov	r17, r24
    2e9e:	03 c0       	rjmp	.+6      	; 0x2ea6 <bno055_set_power_mode+0x9a>
				}
			} else {
			com_rslt = BNO055_ERROR;
			}
		} else {
		com_rslt = BNO055_ERROR;
    2ea0:	1f ef       	ldi	r17, 0xFF	; 255
    2ea2:	01 c0       	rjmp	.+2      	; 0x2ea6 <bno055_set_power_mode+0x9a>
					BNO055_POWER_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
				}
			} else {
			com_rslt = BNO055_ERROR;
    2ea4:	1f ef       	ldi	r17, 0xFF	; 255
			}
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	88 23       	and	r24, r24
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
    2eaa:	29 f0       	breq	.+10     	; 0x2eb6 <bno055_set_power_mode+0xaa>
    2eac:	2a de       	rcall	.-940    	; 0x2b02 <bno055_set_operation_mode>
    2eae:	81 0f       	add	r24, r17
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <bno055_set_power_mode+0xac>
u8 data_u8r = BNO055_INIT_VALUE;
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
s8 stat_s8 = BNO055_ERROR;
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
	return BNO055_E_NULL_PTR;
    2eb2:	81 e8       	ldi	r24, 0x81	; 129
    2eb4:	01 c0       	rjmp	.+2      	; 0x2eb8 <bno055_set_power_mode+0xac>
    2eb6:	81 2f       	mov	r24, r17
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
		(prev_opmode_u8);
	return com_rslt;
}
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	08 95       	ret

00002ec6 <__portable_avr_delay_cycles>:
}

double imu_accel_z()
{
	return bno055_linear_accel.z;
}
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <__portable_avr_delay_cycles+0xa>
    2ec8:	61 50       	subi	r22, 0x01	; 1
    2eca:	71 09       	sbc	r23, r1
    2ecc:	81 09       	sbc	r24, r1
    2ece:	91 09       	sbc	r25, r1
    2ed0:	61 15       	cp	r22, r1
    2ed2:	71 05       	cpc	r23, r1
    2ed4:	81 05       	cpc	r24, r1
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	b9 f7       	brne	.-18     	; 0x2ec8 <__portable_avr_delay_cycles+0x2>
    2eda:	08 95       	ret

00002edc <BNO055_delay_msek>:
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	c9 f1       	breq	.+114    	; 0x2f66 <BNO055_delay_msek+0x8a>
    2ef4:	68 94       	set
    2ef6:	aa 24       	eor	r10, r10
    2ef8:	a7 f8       	bld	r10, 7
    2efa:	0f 2e       	mov	r0, r31
    2efc:	f4 e8       	ldi	r31, 0x84	; 132
    2efe:	bf 2e       	mov	r11, r31
    2f00:	f0 2d       	mov	r31, r0
    2f02:	0f 2e       	mov	r0, r31
    2f04:	fe e1       	ldi	r31, 0x1E	; 30
    2f06:	cf 2e       	mov	r12, r31
    2f08:	f0 2d       	mov	r31, r0
    2f0a:	d1 2c       	mov	r13, r1
    2f0c:	e1 2c       	mov	r14, r1
    2f0e:	f1 2c       	mov	r15, r1
    2f10:	00 e0       	ldi	r16, 0x00	; 0
    2f12:	10 e0       	ldi	r17, 0x00	; 0
    2f14:	28 2f       	mov	r18, r24
    2f16:	39 2f       	mov	r19, r25
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__muldi3>
    2f28:	0f 2e       	mov	r0, r31
    2f2a:	f6 e0       	ldi	r31, 0x06	; 6
    2f2c:	af 2e       	mov	r10, r31
    2f2e:	f0 2d       	mov	r31, r0
    2f30:	b1 2c       	mov	r11, r1
    2f32:	c1 2c       	mov	r12, r1
    2f34:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__udivdi3>
    2f38:	29 51       	subi	r18, 0x19	; 25
    2f3a:	3c 4f       	sbci	r19, 0xFC	; 252
    2f3c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f40:	6f 4f       	sbci	r22, 0xFF	; 255
    2f42:	7f 4f       	sbci	r23, 0xFF	; 255
    2f44:	8f 4f       	sbci	r24, 0xFF	; 255
    2f46:	9f 4f       	sbci	r25, 0xFF	; 255
    2f48:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__floatundisf>
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a e7       	ldi	r20, 0x7A	; 122
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	c8 d7       	rcall	.+3984   	; 0x3ee6 <__divsf3>
    2f56:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__fixunssfdi>
    2f5a:	62 2f       	mov	r22, r18
    2f5c:	73 2f       	mov	r23, r19
    2f5e:	84 2f       	mov	r24, r20
    2f60:	95 2f       	mov	r25, r21
    2f62:	b1 df       	rcall	.-158    	; 0x2ec6 <__portable_avr_delay_cycles>
    2f64:	05 c0       	rjmp	.+10     	; 0x2f70 <BNO055_delay_msek+0x94>
    2f66:	61 e0       	ldi	r22, 0x01	; 1
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	ab df       	rcall	.-170    	; 0x2ec6 <__portable_avr_delay_cycles>
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	bf 90       	pop	r11
    2f82:	af 90       	pop	r10
    2f84:	08 95       	ret

00002f86 <BNO055_I2C_bus_write>:
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	cb 54       	subi	r28, 0x4B	; 75
    2f9a:	d1 09       	sbc	r29, r1
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	f8 2e       	mov	r15, r24
    2fa2:	06 2f       	mov	r16, r22
    2fa4:	6a 01       	movw	r12, r20
    2fa6:	12 2f       	mov	r17, r18
    2fa8:	22 30       	cpi	r18, 0x02	; 2
    2faa:	40 f0       	brcs	.+16     	; 0x2fbc <BNO055_I2C_bus_write+0x36>
    2fac:	81 e4       	ldi	r24, 0x41	; 65
    2fae:	90 e2       	ldi	r25, 0x20	; 32
    2fb0:	9f 93       	push	r25
    2fb2:	8f 93       	push	r24
    2fb4:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	19 82       	std	Y+1, r1	; 0x01
    2fbe:	f6 01       	movw	r30, r12
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8a 83       	std	Y+2, r24	; 0x02
    2fc4:	01 50       	subi	r16, 0x01	; 1
    2fc6:	23 96       	adiw	r28, 0x03	; 3
    2fc8:	0f af       	std	Y+63, r16	; 0x3f
    2fca:	23 97       	sbiw	r28, 0x03	; 3
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	27 96       	adiw	r28, 0x07	; 7
    2fd2:	8e af       	std	Y+62, r24	; 0x3e
    2fd4:	9f af       	std	Y+63, r25	; 0x3f
    2fd6:	27 97       	sbiw	r28, 0x07	; 7
    2fd8:	22 96       	adiw	r28, 0x02	; 2
    2fda:	ff ae       	std	Y+63, r15	; 0x3f
    2fdc:	22 97       	sbiw	r28, 0x02	; 2
    2fde:	ce 01       	movw	r24, r28
    2fe0:	01 96       	adiw	r24, 0x01	; 1
    2fe2:	29 96       	adiw	r28, 0x09	; 9
    2fe4:	8e af       	std	Y+62, r24	; 0x3e
    2fe6:	9f af       	std	Y+63, r25	; 0x3f
    2fe8:	29 97       	sbiw	r28, 0x09	; 9
    2fea:	1f 5f       	subi	r17, 0xFF	; 255
    2fec:	21 2f       	mov	r18, r17
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	2b 96       	adiw	r28, 0x0b	; 11
    2ff2:	2e af       	std	Y+62, r18	; 0x3e
    2ff4:	3f af       	std	Y+63, r19	; 0x3f
    2ff6:	2b 97       	sbiw	r28, 0x0b	; 11
    2ff8:	2c 96       	adiw	r28, 0x0c	; 12
    2ffa:	1f ae       	std	Y+63, r1	; 0x3f
    2ffc:	2c 97       	sbiw	r28, 0x0c	; 12
    2ffe:	40 e0       	ldi	r20, 0x00	; 0
    3000:	be 01       	movw	r22, r28
    3002:	6f 5b       	subi	r22, 0xBF	; 191
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	80 e8       	ldi	r24, 0x80	; 128
    3008:	94 e0       	ldi	r25, 0x04	; 4
    300a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <twi_master_transfer>
    300e:	c5 5b       	subi	r28, 0xB5	; 181
    3010:	df 4f       	sbci	r29, 0xFF	; 255
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	08 95       	ret

00003026 <BNO055_I2C_bus_read>:
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	cb 54       	subi	r28, 0x4B	; 75
    303e:	d1 09       	sbc	r29, r1
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	5a 01       	movw	r10, r20
    3046:	ae 01       	movw	r20, r28
    3048:	4f 5f       	subi	r20, 0xFF	; 255
    304a:	5f 4f       	sbci	r21, 0xFF	; 255
    304c:	7a 01       	movw	r14, r20
    304e:	90 e4       	ldi	r25, 0x40	; 64
    3050:	fa 01       	movw	r30, r20
    3052:	11 92       	st	Z+, r1
    3054:	9a 95       	dec	r25
    3056:	e9 f7       	brne	.-6      	; 0x3052 <BNO055_I2C_bus_read+0x2c>
    3058:	23 96       	adiw	r28, 0x03	; 3
    305a:	6f af       	std	Y+63, r22	; 0x3f
    305c:	23 97       	sbiw	r28, 0x03	; 3
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	50 e0       	ldi	r21, 0x00	; 0
    3062:	27 96       	adiw	r28, 0x07	; 7
    3064:	4e af       	std	Y+62, r20	; 0x3e
    3066:	5f af       	std	Y+63, r21	; 0x3f
    3068:	27 97       	sbiw	r28, 0x07	; 7
    306a:	22 96       	adiw	r28, 0x02	; 2
    306c:	8f af       	std	Y+63, r24	; 0x3f
    306e:	22 97       	sbiw	r28, 0x02	; 2
    3070:	29 96       	adiw	r28, 0x09	; 9
    3072:	ee ae       	std	Y+62, r14	; 0x3e
    3074:	ff ae       	std	Y+63, r15	; 0x3f
    3076:	29 97       	sbiw	r28, 0x09	; 9
    3078:	02 2f       	mov	r16, r18
    307a:	10 e0       	ldi	r17, 0x00	; 0
    307c:	2b 96       	adiw	r28, 0x0b	; 11
    307e:	0e af       	std	Y+62, r16	; 0x3e
    3080:	1f af       	std	Y+63, r17	; 0x3f
    3082:	2b 97       	sbiw	r28, 0x0b	; 11
    3084:	2c 96       	adiw	r28, 0x0c	; 12
    3086:	1f ae       	std	Y+63, r1	; 0x3f
    3088:	2c 97       	sbiw	r28, 0x0c	; 12
    308a:	be 01       	movw	r22, r28
    308c:	6f 5b       	subi	r22, 0xBF	; 191
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	80 e8       	ldi	r24, 0x80	; 128
    3092:	94 e0       	ldi	r25, 0x04	; 4
    3094:	0e 94 7d 03 	call	0x6fa	; 0x6fa <twi_master_transfer>
    3098:	d8 2e       	mov	r13, r24
    309a:	a8 01       	movw	r20, r16
    309c:	b7 01       	movw	r22, r14
    309e:	c5 01       	movw	r24, r10
    30a0:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <memcpy>
    30a4:	8d 2d       	mov	r24, r13
    30a6:	c5 5b       	subi	r28, 0xB5	; 181
    30a8:	df 4f       	sbci	r29, 0xFF	; 255
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	df 91       	pop	r29
    30b0:	cf 91       	pop	r28
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	ff 90       	pop	r15
    30b8:	ef 90       	pop	r14
    30ba:	df 90       	pop	r13
    30bc:	bf 90       	pop	r11
    30be:	af 90       	pop	r10
    30c0:	08 95       	ret

000030c2 <imu_init>:
    30c2:	0f 93       	push	r16
    30c4:	1f 93       	push	r17
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	2a 97       	sbiw	r28, 0x0a	; 10
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	60 e4       	ldi	r22, 0x40	; 64
    30d6:	83 e0       	ldi	r24, 0x03	; 3
    30d8:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    30dc:	60 e4       	ldi	r22, 0x40	; 64
    30de:	83 e0       	ldi	r24, 0x03	; 3
    30e0:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    30e4:	8e 01       	movw	r16, r28
    30e6:	0f 5f       	subi	r16, 0xFF	; 255
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	89 e0       	ldi	r24, 0x09	; 9
    30ec:	f8 01       	movw	r30, r16
    30ee:	11 92       	st	Z+, r1
    30f0:	8a 95       	dec	r24
    30f2:	e9 f7       	brne	.-6      	; 0x30ee <imu_init+0x2c>
    30f4:	80 e8       	ldi	r24, 0x80	; 128
    30f6:	9a e1       	ldi	r25, 0x1A	; 26
    30f8:	a6 e0       	ldi	r26, 0x06	; 6
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	ab 83       	std	Y+3, r26	; 0x03
    3102:	bc 83       	std	Y+4, r27	; 0x04
    3104:	83 e2       	ldi	r24, 0x23	; 35
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	a0 e0       	ldi	r26, 0x00	; 0
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	af 83       	std	Y+7, r26	; 0x07
    3112:	b8 87       	std	Y+8, r27	; 0x08
    3114:	60 e4       	ldi	r22, 0x40	; 64
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    311c:	b8 01       	movw	r22, r16
    311e:	80 e8       	ldi	r24, 0x80	; 128
    3120:	94 e0       	ldi	r25, 0x04	; 4
    3122:	0e 94 68 03 	call	0x6d0	; 0x6d0 <twi_master_init>
    3126:	e0 e8       	ldi	r30, 0x80	; 128
    3128:	f4 e0       	ldi	r31, 0x04	; 4
    312a:	81 81       	ldd	r24, Z+1	; 0x01
    312c:	88 60       	ori	r24, 0x08	; 8
    312e:	81 83       	std	Z+1, r24	; 0x01
    3130:	e1 e0       	ldi	r30, 0x01	; 1
    3132:	f3 e2       	ldi	r31, 0x23	; 35
    3134:	83 ec       	ldi	r24, 0xC3	; 195
    3136:	97 e1       	ldi	r25, 0x17	; 23
    3138:	81 87       	std	Z+9, r24	; 0x09
    313a:	92 87       	std	Z+10, r25	; 0x0a
    313c:	83 e1       	ldi	r24, 0x13	; 19
    313e:	98 e1       	ldi	r25, 0x18	; 24
    3140:	83 87       	std	Z+11, r24	; 0x0b
    3142:	94 87       	std	Z+12, r25	; 0x0c
    3144:	8e e6       	ldi	r24, 0x6E	; 110
    3146:	97 e1       	ldi	r25, 0x17	; 23
    3148:	85 87       	std	Z+13, r24	; 0x0d
    314a:	96 87       	std	Z+14, r25	; 0x0e
    314c:	88 e2       	ldi	r24, 0x28	; 40
    314e:	80 87       	std	Z+8, r24	; 0x08
    3150:	cf 01       	movw	r24, r30
    3152:	39 d9       	rcall	.-3470   	; 0x23c6 <bno055_init>
    3154:	88 23       	and	r24, r24
    3156:	81 f0       	breq	.+32     	; 0x3178 <imu_init+0xb6>
    3158:	28 2f       	mov	r18, r24
    315a:	08 2e       	mov	r0, r24
    315c:	00 0c       	add	r0, r0
    315e:	33 0b       	sbc	r19, r19
    3160:	3f 93       	push	r19
    3162:	8f 93       	push	r24
    3164:	87 ec       	ldi	r24, 0xC7	; 199
    3166:	90 e2       	ldi	r25, 0x20	; 32
    3168:	9f 93       	push	r25
    316a:	8f 93       	push	r24
    316c:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	48 de       	rcall	.-880    	; 0x2e0c <bno055_set_power_mode>
    317c:	8c e0       	ldi	r24, 0x0C	; 12
    317e:	c1 dc       	rcall	.-1662   	; 0x2b02 <bno055_set_operation_mode>
    3180:	18 2f       	mov	r17, r24
    3182:	88 23       	and	r24, r24
    3184:	81 f0       	breq	.+32     	; 0x31a6 <imu_init+0xe4>
    3186:	81 2f       	mov	r24, r17
    3188:	01 2e       	mov	r0, r17
    318a:	00 0c       	add	r0, r0
    318c:	99 0b       	sbc	r25, r25
    318e:	9f 93       	push	r25
    3190:	1f 93       	push	r17
    3192:	8b ee       	ldi	r24, 0xEB	; 235
    3194:	90 e2       	ldi	r25, 0x20	; 32
    3196:	9f 93       	push	r25
    3198:	8f 93       	push	r24
    319a:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	1a 86       	std	Y+10, r1	; 0x0a
    31a8:	ce 01       	movw	r24, r28
    31aa:	0a 96       	adiw	r24, 0x0a	; 10
    31ac:	6f dc       	rcall	.-1826   	; 0x2a8c <bno055_get_operation_mode>
    31ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b0:	8c 30       	cpi	r24, 0x0C	; 12
    31b2:	99 f0       	breq	.+38     	; 0x31da <imu_init+0x118>
    31b4:	21 2f       	mov	r18, r17
    31b6:	01 2e       	mov	r0, r17
    31b8:	00 0c       	add	r0, r0
    31ba:	33 0b       	sbc	r19, r19
    31bc:	3f 93       	push	r19
    31be:	1f 93       	push	r17
    31c0:	1f 92       	push	r1
    31c2:	9c e0       	ldi	r25, 0x0C	; 12
    31c4:	9f 93       	push	r25
    31c6:	1f 92       	push	r1
    31c8:	8f 93       	push	r24
    31ca:	89 e0       	ldi	r24, 0x09	; 9
    31cc:	91 e2       	ldi	r25, 0x21	; 33
    31ce:	9f 93       	push	r25
    31d0:	8f 93       	push	r24
    31d2:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	82 e5       	ldi	r24, 0x52	; 82
    31dc:	91 e2       	ldi	r25, 0x21	; 33
    31de:	0e 94 07 28 	call	0x500e	; 0x500e <puts>
    31e2:	2a 96       	adiw	r28, 0x0a	; 10
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <imu_update>:
    31f2:	80 e1       	ldi	r24, 0x10	; 16
    31f4:	93 e2       	ldi	r25, 0x23	; 35
    31f6:	b4 da       	rcall	.-2712   	; 0x2760 <bno055_convert_double_linear_accel_xyz_msq>
    31f8:	8c e1       	ldi	r24, 0x1C	; 28
    31fa:	93 e2       	ldi	r25, 0x23	; 35
    31fc:	9d dd       	rcall	.-1222   	; 0x2d38 <bno055_convert_double_euler_hpr_deg>
    31fe:	89 e2       	ldi	r24, 0x29	; 41
    3200:	93 e2       	ldi	r25, 0x23	; 35
    3202:	45 db       	rcall	.-2422   	; 0x288e <bno055_get_accel_calib_stat>
    3204:	8b e2       	ldi	r24, 0x2B	; 43
    3206:	93 e2       	ldi	r25, 0x23	; 35
    3208:	82 db       	rcall	.-2300   	; 0x290e <bno055_get_gyro_calib_stat>
    320a:	88 e2       	ldi	r24, 0x28	; 40
    320c:	93 e2       	ldi	r25, 0x23	; 35
    320e:	04 db       	rcall	.-2552   	; 0x2818 <bno055_get_mag_calib_stat>
    3210:	8a e2       	ldi	r24, 0x2A	; 42
    3212:	93 e2       	ldi	r25, 0x23	; 35
    3214:	c0 cb       	rjmp	.-2176   	; 0x2996 <bno055_get_sys_calib_stat>
    3216:	08 95       	ret

00003218 <imu_roll>:



double imu_roll()
{
	return bno055_euler.r;
    3218:	60 91 20 23 	lds	r22, 0x2320	; 0x802320 <bno055_euler+0x4>
    321c:	70 91 21 23 	lds	r23, 0x2321	; 0x802321 <bno055_euler+0x5>
    3220:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <bno055_euler+0x6>
    3224:	90 91 23 23 	lds	r25, 0x2323	; 0x802323 <bno055_euler+0x7>
}
    3228:	08 95       	ret

0000322a <imu_pitch>:

double imu_pitch()
{
	return bno055_euler.p;
    322a:	60 91 24 23 	lds	r22, 0x2324	; 0x802324 <bno055_euler+0x8>
    322e:	70 91 25 23 	lds	r23, 0x2325	; 0x802325 <bno055_euler+0x9>
    3232:	80 91 26 23 	lds	r24, 0x2326	; 0x802326 <bno055_euler+0xa>
    3236:	90 91 27 23 	lds	r25, 0x2327	; 0x802327 <bno055_euler+0xb>
}
    323a:	08 95       	ret

0000323c <imu_heading>:

double imu_heading()
{
	return bno055_euler.h;
    323c:	60 91 1c 23 	lds	r22, 0x231C	; 0x80231c <bno055_euler>
    3240:	70 91 1d 23 	lds	r23, 0x231D	; 0x80231d <bno055_euler+0x1>
    3244:	80 91 1e 23 	lds	r24, 0x231E	; 0x80231e <bno055_euler+0x2>
    3248:	90 91 1f 23 	lds	r25, 0x231F	; 0x80231f <bno055_euler+0x3>
}
    324c:	08 95       	ret

0000324e <servo_init>:

void servo_init(void)
{
	
	
	pwm_init(&pwm_cfg, SERVO_TC, SERVO_PWM, 500);
    324e:	24 ef       	ldi	r18, 0xF4	; 244
    3250:	31 e0       	ldi	r19, 0x01	; 1
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	64 e0       	ldi	r22, 0x04	; 4
    3256:	8c e2       	ldi	r24, 0x2C	; 44
    3258:	93 e2       	ldi	r25, 0x23	; 35
    325a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pwm_init>
	
	if(DEBUG) printf("Servos Initialized.\n");
    325e:	83 e6       	ldi	r24, 0x63	; 99
    3260:	91 e2       	ldi	r25, 0x21	; 33
    3262:	0c 94 07 28 	jmp	0x500e	; 0x500e <puts>
    3266:	08 95       	ret

00003268 <set_servo>:
}

void set_servo(uint16_t dutyCycle)
{
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	c8 2f       	mov	r28, r24
    326e:	d9 2f       	mov	r29, r25
	pwm_start(&pwm_cfg,dutyCycle);
    3270:	68 2f       	mov	r22, r24
    3272:	8c e2       	ldi	r24, 0x2C	; 44
    3274:	93 e2       	ldi	r25, 0x23	; 35
    3276:	0e 94 a0 10 	call	0x2140	; 0x2140 <pwm_start>
	if(DEBUG) printf("Set Servo to duty cycle of %u\n", dutyCycle);
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	87 e7       	ldi	r24, 0x77	; 119
    3280:	91 e2       	ldi	r25, 0x21	; 33
    3282:	9f 93       	push	r25
    3284:	8f 93       	push	r24
    3286:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
}
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	08 95       	ret

00003298 <buzz_on>:



void buzz_on(void)
{
	PORTC.DIRSET |= 0b00000001;
    3298:	e0 e4       	ldi	r30, 0x40	; 64
    329a:	f6 e0       	ldi	r31, 0x06	; 6
    329c:	81 81       	ldd	r24, Z+1	; 0x01
    329e:	81 60       	ori	r24, 0x01	; 1
    32a0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= 0b00000001;
    32a2:	85 81       	ldd	r24, Z+5	; 0x05
    32a4:	81 60       	ori	r24, 0x01	; 1
    32a6:	85 83       	std	Z+5, r24	; 0x05
	
	if(DEBUG) printf("Buzzer ON\n");
    32a8:	86 e9       	ldi	r24, 0x96	; 150
    32aa:	91 e2       	ldi	r25, 0x21	; 33
    32ac:	0c 94 07 28 	jmp	0x500e	; 0x500e <puts>
    32b0:	08 95       	ret

000032b2 <buzz_off>:
	
}
void buzz_off(void)
{
	PORTC.DIRSET |= 0b00000001;
    32b2:	e0 e4       	ldi	r30, 0x40	; 64
    32b4:	f6 e0       	ldi	r31, 0x06	; 6
    32b6:	81 81       	ldd	r24, Z+1	; 0x01
    32b8:	81 60       	ori	r24, 0x01	; 1
    32ba:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET &= 0b11111110;
    32bc:	85 81       	ldd	r24, Z+5	; 0x05
    32be:	8e 7f       	andi	r24, 0xFE	; 254
    32c0:	85 83       	std	Z+5, r24	; 0x05
	
	if(DEBUG) printf("Buzzer OFF\n");
    32c2:	80 ea       	ldi	r24, 0xA0	; 160
    32c4:	91 e2       	ldi	r25, 0x21	; 33
    32c6:	0c 94 07 28 	jmp	0x500e	; 0x500e <puts>
    32ca:	08 95       	ret

000032cc <newOLogInit>:


void newOLogInit()//initializes the openLog uart communication interface
{
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    32cc:	e2 eb       	ldi	r30, 0xB2	; 178
    32ce:	f2 e2       	ldi	r31, 0x22	; 34
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	92 ec       	ldi	r25, 0xC2	; 194
    32d4:	a1 e0       	ldi	r26, 0x01	; 1
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	86 83       	std	Z+6, r24	; 0x06
    32da:	97 83       	std	Z+7, r25	; 0x07
    32dc:	a0 87       	std	Z+8, r26	; 0x08
    32de:	b1 87       	std	Z+9, r27	; 0x09
    openLog.Port=P_OPENLOG_PORT;
    32e0:	80 e4       	ldi	r24, 0x40	; 64
    32e2:	96 e0       	ldi	r25, 0x06	; 6
    32e4:	80 83       	st	Z, r24
    32e6:	91 83       	std	Z+1, r25	; 0x01
	openLog.Usart=P_OPENLOG_UART;
    32e8:	80 ea       	ldi	r24, 0xA0	; 160
    32ea:	98 e0       	ldi	r25, 0x08	; 8
    32ec:	82 83       	std	Z+2, r24	; 0x02
    32ee:	93 83       	std	Z+3, r25	; 0x03
	openLog.tx=OPENLOG_TX_PIN;
    32f0:	88 e0       	ldi	r24, 0x08	; 8
    32f2:	85 83       	std	Z+5, r24	; 0x05
	openLog.rx=OPENLOG_RX_PIN;
    32f4:	84 e0       	ldi	r24, 0x04	; 4
    32f6:	84 83       	std	Z+4, r24	; 0x04
	uart_init(&openLog);//function that initializes uart
    32f8:	cf 01       	movw	r24, r30
    32fa:	11 d0       	rcall	.+34     	; 0x331e <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n");
    32fc:	8b ea       	ldi	r24, 0xAB	; 171
    32fe:	91 e2       	ldi	r25, 0x21	; 33
    3300:	0c 94 07 28 	jmp	0x500e	; 0x500e <puts>
    3304:	08 95       	ret

00003306 <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	eb 01       	movw	r28, r22
    330c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <usart_getchar>
    3310:	88 83       	st	Y, r24
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	08 95       	ret

00003318 <usart_serial_putchar>:
    3318:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <usart_putchar>
    331c:	08 95       	ret

0000331e <uart_init>:
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	27 97       	sbiw	r28, 0x07	; 7
    3330:	cd bf       	out	0x3d, r28	; 61
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	7c 01       	movw	r14, r24
    3336:	fc 01       	movw	r30, r24
    3338:	86 81       	ldd	r24, Z+6	; 0x06
    333a:	97 81       	ldd	r25, Z+7	; 0x07
    333c:	a0 85       	ldd	r26, Z+8	; 0x08
    333e:	b1 85       	ldd	r27, Z+9	; 0x09
    3340:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <usart_options.6525>
    3344:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <usart_options.6525+0x1>
    3348:	a0 93 0f 20 	sts	0x200F, r26	; 0x80200f <usart_options.6525+0x2>
    334c:	b0 93 10 20 	sts	0x2010, r27	; 0x802010 <usart_options.6525+0x3>
    3350:	01 90       	ld	r0, Z+
    3352:	f0 81       	ld	r31, Z
    3354:	e0 2d       	mov	r30, r0
    3356:	90 81       	ld	r25, Z
    3358:	d7 01       	movw	r26, r14
    335a:	15 96       	adiw	r26, 0x05	; 5
    335c:	8c 91       	ld	r24, X
    335e:	15 97       	sbiw	r26, 0x05	; 5
    3360:	89 2b       	or	r24, r25
    3362:	80 83       	st	Z, r24
    3364:	ed 91       	ld	r30, X+
    3366:	fc 91       	ld	r31, X
    3368:	11 97       	sbiw	r26, 0x01	; 1
    336a:	94 81       	ldd	r25, Z+4	; 0x04
    336c:	15 96       	adiw	r26, 0x05	; 5
    336e:	8c 91       	ld	r24, X
    3370:	15 97       	sbiw	r26, 0x05	; 5
    3372:	89 2b       	or	r24, r25
    3374:	84 83       	std	Z+4, r24	; 0x04
    3376:	ed 91       	ld	r30, X+
    3378:	fc 91       	ld	r31, X
    337a:	11 97       	sbiw	r26, 0x01	; 1
    337c:	90 81       	ld	r25, Z
    337e:	14 96       	adiw	r26, 0x04	; 4
    3380:	8c 91       	ld	r24, X
    3382:	14 97       	sbiw	r26, 0x04	; 4
    3384:	80 95       	com	r24
    3386:	89 23       	and	r24, r25
    3388:	80 83       	st	Z, r24
    338a:	12 96       	adiw	r26, 0x02	; 2
    338c:	0d 91       	ld	r16, X+
    338e:	1c 91       	ld	r17, X
    3390:	13 97       	sbiw	r26, 0x03	; 3
    3392:	01 15       	cp	r16, r1
    3394:	11 05       	cpc	r17, r1
    3396:	09 f4       	brne	.+2      	; 0x339a <uart_init+0x7c>
    3398:	21 c1       	rjmp	.+578    	; 0x35dc <uart_init+0x2be>
    339a:	00 3c       	cpi	r16, 0xC0	; 192
    339c:	11 05       	cpc	r17, r1
    339e:	29 f4       	brne	.+10     	; 0x33aa <uart_init+0x8c>
    33a0:	60 e1       	ldi	r22, 0x10	; 16
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    33a8:	cd c0       	rjmp	.+410    	; 0x3544 <uart_init+0x226>
    33aa:	01 15       	cp	r16, r1
    33ac:	b4 e0       	ldi	r27, 0x04	; 4
    33ae:	1b 07       	cpc	r17, r27
    33b0:	29 f4       	brne	.+10     	; 0x33bc <uart_init+0x9e>
    33b2:	64 e0       	ldi	r22, 0x04	; 4
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    33ba:	c4 c0       	rjmp	.+392    	; 0x3544 <uart_init+0x226>
    33bc:	00 38       	cpi	r16, 0x80	; 128
    33be:	e1 e0       	ldi	r30, 0x01	; 1
    33c0:	1e 07       	cpc	r17, r30
    33c2:	29 f4       	brne	.+10     	; 0x33ce <uart_init+0xb0>
    33c4:	62 e0       	ldi	r22, 0x02	; 2
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    33cc:	bb c0       	rjmp	.+374    	; 0x3544 <uart_init+0x226>
    33ce:	01 15       	cp	r16, r1
    33d0:	f1 e0       	ldi	r31, 0x01	; 1
    33d2:	1f 07       	cpc	r17, r31
    33d4:	29 f4       	brne	.+10     	; 0x33e0 <uart_init+0xc2>
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    33de:	b2 c0       	rjmp	.+356    	; 0x3544 <uart_init+0x226>
    33e0:	00 38       	cpi	r16, 0x80	; 128
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	18 07       	cpc	r17, r24
    33e6:	29 f4       	brne	.+10     	; 0x33f2 <uart_init+0xd4>
    33e8:	61 e0       	ldi	r22, 0x01	; 1
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    33f0:	a9 c0       	rjmp	.+338    	; 0x3544 <uart_init+0x226>
    33f2:	01 15       	cp	r16, r1
    33f4:	a2 e0       	ldi	r26, 0x02	; 2
    33f6:	1a 07       	cpc	r17, r26
    33f8:	29 f4       	brne	.+10     	; 0x3404 <uart_init+0xe6>
    33fa:	62 e0       	ldi	r22, 0x02	; 2
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3402:	a0 c0       	rjmp	.+320    	; 0x3544 <uart_init+0x226>
    3404:	00 32       	cpi	r16, 0x20	; 32
    3406:	b3 e0       	ldi	r27, 0x03	; 3
    3408:	1b 07       	cpc	r17, r27
    340a:	29 f4       	brne	.+10     	; 0x3416 <uart_init+0xf8>
    340c:	64 e0       	ldi	r22, 0x04	; 4
    340e:	82 e0       	ldi	r24, 0x02	; 2
    3410:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3414:	97 c0       	rjmp	.+302    	; 0x3544 <uart_init+0x226>
    3416:	01 15       	cp	r16, r1
    3418:	e8 e0       	ldi	r30, 0x08	; 8
    341a:	1e 07       	cpc	r17, r30
    341c:	29 f4       	brne	.+10     	; 0x3428 <uart_init+0x10a>
    341e:	61 e0       	ldi	r22, 0x01	; 1
    3420:	83 e0       	ldi	r24, 0x03	; 3
    3422:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3426:	8e c0       	rjmp	.+284    	; 0x3544 <uart_init+0x226>
    3428:	01 15       	cp	r16, r1
    342a:	f9 e0       	ldi	r31, 0x09	; 9
    342c:	1f 07       	cpc	r17, r31
    342e:	29 f4       	brne	.+10     	; 0x343a <uart_init+0x11c>
    3430:	61 e0       	ldi	r22, 0x01	; 1
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3438:	85 c0       	rjmp	.+266    	; 0x3544 <uart_init+0x226>
    343a:	01 15       	cp	r16, r1
    343c:	8a e0       	ldi	r24, 0x0A	; 10
    343e:	18 07       	cpc	r17, r24
    3440:	29 f4       	brne	.+10     	; 0x344c <uart_init+0x12e>
    3442:	61 e0       	ldi	r22, 0x01	; 1
    3444:	85 e0       	ldi	r24, 0x05	; 5
    3446:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    344a:	7c c0       	rjmp	.+248    	; 0x3544 <uart_init+0x226>
    344c:	00 34       	cpi	r16, 0x40	; 64
    344e:	a8 e0       	ldi	r26, 0x08	; 8
    3450:	1a 07       	cpc	r17, r26
    3452:	29 f4       	brne	.+10     	; 0x345e <uart_init+0x140>
    3454:	62 e0       	ldi	r22, 0x02	; 2
    3456:	83 e0       	ldi	r24, 0x03	; 3
    3458:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    345c:	73 c0       	rjmp	.+230    	; 0x3544 <uart_init+0x226>
    345e:	00 34       	cpi	r16, 0x40	; 64
    3460:	b9 e0       	ldi	r27, 0x09	; 9
    3462:	1b 07       	cpc	r17, r27
    3464:	29 f4       	brne	.+10     	; 0x3470 <uart_init+0x152>
    3466:	62 e0       	ldi	r22, 0x02	; 2
    3468:	84 e0       	ldi	r24, 0x04	; 4
    346a:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    346e:	6a c0       	rjmp	.+212    	; 0x3544 <uart_init+0x226>
    3470:	00 39       	cpi	r16, 0x90	; 144
    3472:	e8 e0       	ldi	r30, 0x08	; 8
    3474:	1e 07       	cpc	r17, r30
    3476:	29 f4       	brne	.+10     	; 0x3482 <uart_init+0x164>
    3478:	64 e0       	ldi	r22, 0x04	; 4
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3480:	61 c0       	rjmp	.+194    	; 0x3544 <uart_init+0x226>
    3482:	00 39       	cpi	r16, 0x90	; 144
    3484:	f9 e0       	ldi	r31, 0x09	; 9
    3486:	1f 07       	cpc	r17, r31
    3488:	29 f4       	brne	.+10     	; 0x3494 <uart_init+0x176>
    348a:	64 e0       	ldi	r22, 0x04	; 4
    348c:	84 e0       	ldi	r24, 0x04	; 4
    348e:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3492:	58 c0       	rjmp	.+176    	; 0x3544 <uart_init+0x226>
    3494:	00 39       	cpi	r16, 0x90	; 144
    3496:	8a e0       	ldi	r24, 0x0A	; 10
    3498:	18 07       	cpc	r17, r24
    349a:	29 f4       	brne	.+10     	; 0x34a6 <uart_init+0x188>
    349c:	64 e0       	ldi	r22, 0x04	; 4
    349e:	85 e0       	ldi	r24, 0x05	; 5
    34a0:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    34a4:	4f c0       	rjmp	.+158    	; 0x3544 <uart_init+0x226>
    34a6:	00 3c       	cpi	r16, 0xC0	; 192
    34a8:	a8 e0       	ldi	r26, 0x08	; 8
    34aa:	1a 07       	cpc	r17, r26
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <uart_init+0x19a>
    34ae:	68 e0       	ldi	r22, 0x08	; 8
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    34b6:	46 c0       	rjmp	.+140    	; 0x3544 <uart_init+0x226>
    34b8:	00 3c       	cpi	r16, 0xC0	; 192
    34ba:	b9 e0       	ldi	r27, 0x09	; 9
    34bc:	1b 07       	cpc	r17, r27
    34be:	29 f4       	brne	.+10     	; 0x34ca <uart_init+0x1ac>
    34c0:	68 e0       	ldi	r22, 0x08	; 8
    34c2:	84 e0       	ldi	r24, 0x04	; 4
    34c4:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    34c8:	3d c0       	rjmp	.+122    	; 0x3544 <uart_init+0x226>
    34ca:	00 3a       	cpi	r16, 0xA0	; 160
    34cc:	e8 e0       	ldi	r30, 0x08	; 8
    34ce:	1e 07       	cpc	r17, r30
    34d0:	29 f4       	brne	.+10     	; 0x34dc <uart_init+0x1be>
    34d2:	60 e1       	ldi	r22, 0x10	; 16
    34d4:	83 e0       	ldi	r24, 0x03	; 3
    34d6:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    34da:	34 c0       	rjmp	.+104    	; 0x3544 <uart_init+0x226>
    34dc:	00 3a       	cpi	r16, 0xA0	; 160
    34de:	f9 e0       	ldi	r31, 0x09	; 9
    34e0:	1f 07       	cpc	r17, r31
    34e2:	29 f4       	brne	.+10     	; 0x34ee <uart_init+0x1d0>
    34e4:	60 e1       	ldi	r22, 0x10	; 16
    34e6:	84 e0       	ldi	r24, 0x04	; 4
    34e8:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    34ec:	2b c0       	rjmp	.+86     	; 0x3544 <uart_init+0x226>
    34ee:	00 3a       	cpi	r16, 0xA0	; 160
    34f0:	8a e0       	ldi	r24, 0x0A	; 10
    34f2:	18 07       	cpc	r17, r24
    34f4:	29 f4       	brne	.+10     	; 0x3500 <uart_init+0x1e2>
    34f6:	60 e1       	ldi	r22, 0x10	; 16
    34f8:	85 e0       	ldi	r24, 0x05	; 5
    34fa:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    34fe:	22 c0       	rjmp	.+68     	; 0x3544 <uart_init+0x226>
    3500:	00 3b       	cpi	r16, 0xB0	; 176
    3502:	a8 e0       	ldi	r26, 0x08	; 8
    3504:	1a 07       	cpc	r17, r26
    3506:	29 f4       	brne	.+10     	; 0x3512 <uart_init+0x1f4>
    3508:	60 e2       	ldi	r22, 0x20	; 32
    350a:	83 e0       	ldi	r24, 0x03	; 3
    350c:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3510:	19 c0       	rjmp	.+50     	; 0x3544 <uart_init+0x226>
    3512:	00 3b       	cpi	r16, 0xB0	; 176
    3514:	b9 e0       	ldi	r27, 0x09	; 9
    3516:	1b 07       	cpc	r17, r27
    3518:	29 f4       	brne	.+10     	; 0x3524 <uart_init+0x206>
    351a:	60 e2       	ldi	r22, 0x20	; 32
    351c:	84 e0       	ldi	r24, 0x04	; 4
    351e:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3522:	10 c0       	rjmp	.+32     	; 0x3544 <uart_init+0x226>
    3524:	00 38       	cpi	r16, 0x80	; 128
    3526:	e4 e0       	ldi	r30, 0x04	; 4
    3528:	1e 07       	cpc	r17, r30
    352a:	29 f4       	brne	.+10     	; 0x3536 <uart_init+0x218>
    352c:	60 e4       	ldi	r22, 0x40	; 64
    352e:	83 e0       	ldi	r24, 0x03	; 3
    3530:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3534:	07 c0       	rjmp	.+14     	; 0x3544 <uart_init+0x226>
    3536:	00 3a       	cpi	r16, 0xA0	; 160
    3538:	14 40       	sbci	r17, 0x04	; 4
    353a:	21 f4       	brne	.+8      	; 0x3544 <uart_init+0x226>
    353c:	60 e4       	ldi	r22, 0x40	; 64
    353e:	85 e0       	ldi	r24, 0x05	; 5
    3540:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3544:	d7 01       	movw	r26, r14
    3546:	12 96       	adiw	r26, 0x02	; 2
    3548:	0d 91       	ld	r16, X+
    354a:	1c 91       	ld	r17, X
    354c:	13 97       	sbiw	r26, 0x03	; 3
    354e:	ed e0       	ldi	r30, 0x0D	; 13
    3550:	f0 e2       	ldi	r31, 0x20	; 32
    3552:	84 81       	ldd	r24, Z+4	; 0x04
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	85 81       	ldd	r24, Z+5	; 0x05
    3558:	8e 83       	std	Y+6, r24	; 0x06
    355a:	86 81       	ldd	r24, Z+6	; 0x06
    355c:	8f 83       	std	Y+7, r24	; 0x07
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01
    3562:	a2 81       	ldd	r26, Z+2	; 0x02
    3564:	b3 81       	ldd	r27, Z+3	; 0x03
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	9a 83       	std	Y+2, r25	; 0x02
    356a:	ab 83       	std	Y+3, r26	; 0x03
    356c:	bc 83       	std	Y+4, r27	; 0x04
    356e:	78 01       	movw	r14, r16
    3570:	00 3a       	cpi	r16, 0xA0	; 160
    3572:	b8 e0       	ldi	r27, 0x08	; 8
    3574:	1b 07       	cpc	r17, r27
    3576:	29 f4       	brne	.+10     	; 0x3582 <uart_init+0x264>
    3578:	60 e1       	ldi	r22, 0x10	; 16
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3580:	13 c0       	rjmp	.+38     	; 0x35a8 <uart_init+0x28a>
    3582:	00 3b       	cpi	r16, 0xB0	; 176
    3584:	e8 e0       	ldi	r30, 0x08	; 8
    3586:	1e 07       	cpc	r17, r30
    3588:	29 f4       	brne	.+10     	; 0x3594 <uart_init+0x276>
    358a:	60 e2       	ldi	r22, 0x20	; 32
    358c:	83 e0       	ldi	r24, 0x03	; 3
    358e:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    3592:	14 c0       	rjmp	.+40     	; 0x35bc <uart_init+0x29e>
    3594:	f0 ea       	ldi	r31, 0xA0	; 160
    3596:	ef 16       	cp	r14, r31
    3598:	f9 e0       	ldi	r31, 0x09	; 9
    359a:	ff 06       	cpc	r15, r31
    359c:	29 f4       	brne	.+10     	; 0x35a8 <uart_init+0x28a>
    359e:	60 e1       	ldi	r22, 0x10	; 16
    35a0:	84 e0       	ldi	r24, 0x04	; 4
    35a2:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    35a6:	13 c0       	rjmp	.+38     	; 0x35ce <uart_init+0x2b0>
    35a8:	80 eb       	ldi	r24, 0xB0	; 176
    35aa:	e8 16       	cp	r14, r24
    35ac:	89 e0       	ldi	r24, 0x09	; 9
    35ae:	f8 06       	cpc	r15, r24
    35b0:	29 f4       	brne	.+10     	; 0x35bc <uart_init+0x29e>
    35b2:	60 e2       	ldi	r22, 0x20	; 32
    35b4:	84 e0       	ldi	r24, 0x04	; 4
    35b6:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    35ba:	09 c0       	rjmp	.+18     	; 0x35ce <uart_init+0x2b0>
    35bc:	a0 ea       	ldi	r26, 0xA0	; 160
    35be:	ea 16       	cp	r14, r26
    35c0:	aa e0       	ldi	r26, 0x0A	; 10
    35c2:	fa 06       	cpc	r15, r26
    35c4:	21 f4       	brne	.+8      	; 0x35ce <uart_init+0x2b0>
    35c6:	60 e1       	ldi	r22, 0x10	; 16
    35c8:	85 e0       	ldi	r24, 0x05	; 5
    35ca:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
    35ce:	be 01       	movw	r22, r28
    35d0:	6f 5f       	subi	r22, 0xFF	; 255
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	c8 01       	movw	r24, r16
    35d6:	0e 94 02 05 	call	0xa04	; 0xa04 <usart_init_rs232>
    35da:	13 c0       	rjmp	.+38     	; 0x3602 <uart_init+0x2e4>
    35dc:	ed e0       	ldi	r30, 0x0D	; 13
    35de:	f0 e2       	ldi	r31, 0x20	; 32
    35e0:	84 81       	ldd	r24, Z+4	; 0x04
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	85 81       	ldd	r24, Z+5	; 0x05
    35e6:	8e 83       	std	Y+6, r24	; 0x06
    35e8:	86 81       	ldd	r24, Z+6	; 0x06
    35ea:	8f 83       	std	Y+7, r24	; 0x07
    35ec:	80 81       	ld	r24, Z
    35ee:	91 81       	ldd	r25, Z+1	; 0x01
    35f0:	a2 81       	ldd	r26, Z+2	; 0x02
    35f2:	b3 81       	ldd	r27, Z+3	; 0x03
    35f4:	89 83       	std	Y+1, r24	; 0x01
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	ab 83       	std	Y+3, r26	; 0x03
    35fa:	bc 83       	std	Y+4, r27	; 0x04
    35fc:	e1 2c       	mov	r14, r1
    35fe:	f1 2c       	mov	r15, r1
    3600:	c9 cf       	rjmp	.-110    	; 0x3594 <uart_init+0x276>
    3602:	27 96       	adiw	r28, 0x07	; 7
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	ff 90       	pop	r15
    3612:	ef 90       	pop	r14
    3614:	08 95       	ret

00003616 <uart_terminal_init>:

void uart_terminal_init()
{
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	27 97       	sbiw	r28, 0x07	; 7
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3624:	60 e1       	ldi	r22, 0x10	; 16
    3626:	85 e0       	ldi	r24, 0x05	; 5
    3628:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    362c:	e0 e8       	ldi	r30, 0x80	; 128
    362e:	f6 e0       	ldi	r31, 0x06	; 6
    3630:	80 81       	ld	r24, Z
    3632:	88 60       	ori	r24, 0x08	; 8
    3634:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    3636:	80 ea       	ldi	r24, 0xA0	; 160
    3638:	9a e0       	ldi	r25, 0x0A	; 10
    363a:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <stdio_base>
    363e:	90 93 cb 22 	sts	0x22CB, r25	; 0x8022cb <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3642:	8c e8       	ldi	r24, 0x8C	; 140
    3644:	99 e1       	ldi	r25, 0x19	; 25
    3646:	80 93 c8 22 	sts	0x22C8, r24	; 0x8022c8 <ptr_put>
    364a:	90 93 c9 22 	sts	0x22C9, r25	; 0x8022c9 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    364e:	83 e8       	ldi	r24, 0x83	; 131
    3650:	99 e1       	ldi	r25, 0x19	; 25
    3652:	80 93 c6 22 	sts	0x22C6, r24	; 0x8022c6 <ptr_get>
    3656:	90 93 c7 22 	sts	0x22C7, r25	; 0x8022c7 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    365a:	e6 e0       	ldi	r30, 0x06	; 6
    365c:	f0 e2       	ldi	r31, 0x20	; 32
    365e:	84 81       	ldd	r24, Z+4	; 0x04
    3660:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3662:	85 81       	ldd	r24, Z+5	; 0x05
    3664:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    3666:	86 81       	ldd	r24, Z+6	; 0x06
    3668:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    366a:	80 81       	ld	r24, Z
    366c:	91 81       	ldd	r25, Z+1	; 0x01
    366e:	a2 81       	ldd	r26, Z+2	; 0x02
    3670:	b3 81       	ldd	r27, Z+3	; 0x03
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	ab 83       	std	Y+3, r26	; 0x03
    3678:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    367a:	60 e1       	ldi	r22, 0x10	; 16
    367c:	85 e0       	ldi	r24, 0x05	; 5
    367e:	0e 94 56 08 	call	0x10ac	; 0x10ac <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3682:	be 01       	movw	r22, r28
    3684:	6f 5f       	subi	r22, 0xFF	; 255
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	80 ea       	ldi	r24, 0xA0	; 160
    368a:	9a e0       	ldi	r25, 0x0A	; 10
    368c:	0e 94 02 05 	call	0xa04	; 0xa04 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    3690:	63 ed       	ldi	r22, 0xD3	; 211
    3692:	71 e0       	ldi	r23, 0x01	; 1
    3694:	8c ee       	ldi	r24, 0xEC	; 236
    3696:	91 e0       	ldi	r25, 0x01	; 1
    3698:	0e 94 6e 27 	call	0x4edc	; 0x4edc <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    369c:	84 ed       	ldi	r24, 0xD4	; 212
    369e:	91 e2       	ldi	r25, 0x21	; 33
    36a0:	0e 94 07 28 	call	0x500e	; 0x500e <puts>
		printf("UART Initialized\n");
    36a4:	89 ef       	ldi	r24, 0xF9	; 249
    36a6:	91 e2       	ldi	r25, 0x21	; 33
    36a8:	0e 94 07 28 	call	0x500e	; 0x500e <puts>
	}
}
    36ac:	27 96       	adiw	r28, 0x07	; 7
    36ae:	cd bf       	out	0x3d, r28	; 61
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	08 95       	ret

000036b8 <xbee_init>:
#include "Xbee.h"
static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

void xbee_init()
{
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
	xbee_uart.Baud=XBEEBAUD;
    36bc:	ec eb       	ldi	r30, 0xBC	; 188
    36be:	f2 e2       	ldi	r31, 0x22	; 34
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	92 ec       	ldi	r25, 0xC2	; 194
    36c4:	a1 e0       	ldi	r26, 0x01	; 1
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	86 83       	std	Z+6, r24	; 0x06
    36ca:	97 83       	std	Z+7, r25	; 0x07
    36cc:	a0 87       	std	Z+8, r26	; 0x08
    36ce:	b1 87       	std	Z+9, r27	; 0x09
	xbee_uart.Port=P_XBEEPORT;
    36d0:	80 e6       	ldi	r24, 0x60	; 96
    36d2:	96 e0       	ldi	r25, 0x06	; 6
    36d4:	80 83       	st	Z, r24
    36d6:	91 83       	std	Z+1, r25	; 0x01
	xbee_uart.Usart=P_XBEEUART;
    36d8:	c0 ea       	ldi	r28, 0xA0	; 160
    36da:	d9 e0       	ldi	r29, 0x09	; 9
    36dc:	c2 83       	std	Z+2, r28	; 0x02
    36de:	d3 83       	std	Z+3, r29	; 0x03
	xbee_uart.tx=XBEETXPIN;
    36e0:	88 e0       	ldi	r24, 0x08	; 8
    36e2:	85 83       	std	Z+5, r24	; 0x05
	xbee_uart.rx=XBEERXPIN;
    36e4:	84 e0       	ldi	r24, 0x04	; 4
    36e6:	84 83       	std	Z+4, r24	; 0x04
	uart_init(&xbee_uart);
    36e8:	cf 01       	movw	r24, r30
    36ea:	19 de       	rcall	.-974    	; 0x331e <uart_init>
	XBEE_UART.CTRLA=0x14;
    36ec:	84 e1       	ldi	r24, 0x14	; 20
    36ee:	8b 83       	std	Y+3, r24	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    36f0:	8a e0       	ldi	r24, 0x0A	; 10
    36f2:	92 e2       	ldi	r25, 0x22	; 34
    36f4:	0e 94 07 28 	call	0x500e	; 0x500e <puts>
}
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	08 95       	ret

000036fe <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	c8 2f       	mov	r28, r24
    3704:	d9 2f       	mov	r29, r25
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    3706:	a8 2f       	mov	r26, r24
    3708:	b9 2f       	mov	r27, r25
    370a:	fd 01       	movw	r30, r26
    370c:	01 90       	ld	r0, Z+
    370e:	00 20       	and	r0, r0
    3710:	e9 f7       	brne	.-6      	; 0x370c <xbeeWrite+0xe>
    3712:	31 97       	sbiw	r30, 0x01	; 1
    3714:	af 01       	movw	r20, r30
    3716:	4a 1b       	sub	r20, r26
    3718:	5b 0b       	sbc	r21, r27
    371a:	68 2f       	mov	r22, r24
    371c:	79 2f       	mov	r23, r25
    371e:	80 ea       	ldi	r24, 0xA0	; 160
    3720:	99 e0       	ldi	r25, 0x09	; 9
    3722:	0e 94 06 08 	call	0x100c	; 0x100c <usart_serial_write_packet>
	if(DEBUG) printf("%s \n",(const)data);
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	8c e1       	ldi	r24, 0x1C	; 28
    372c:	92 e2       	ldi	r25, 0x22	; 34
    372e:	9f 93       	push	r25
    3730:	8f 93       	push	r24
    3732:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
}
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	08 95       	ret

00003744 <__vector_91>:

ISR(READ_INTURUPT)
{
    3744:	1f 92       	push	r1
    3746:	0f 92       	push	r0
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	0f 92       	push	r0
    374c:	11 24       	eor	r1, r1
    374e:	08 b6       	in	r0, 0x38	; 56
    3750:	0f 92       	push	r0
    3752:	18 be       	out	0x38, r1	; 56
    3754:	8f 93       	push	r24
	XbeeRx=XBEE_UART.DATA;
    3756:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    375a:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <XbeeRx>
    375e:	8f 91       	pop	r24
    3760:	0f 90       	pop	r0
    3762:	08 be       	out	0x38, r0	; 56
    3764:	0f 90       	pop	r0
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	0f 90       	pop	r0
    376a:	1f 90       	pop	r1
    376c:	18 95       	reti

0000376e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    3778:	c6 2f       	mov	r28, r22
    377a:	d0 e0       	ldi	r29, 0x00	; 0
    377c:	de 01       	movw	r26, r28
    377e:	02 2e       	mov	r0, r18
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <ioport_configure_port_pin+0x18>
    3782:	b5 95       	asr	r27
    3784:	a7 95       	ror	r26
    3786:	0a 94       	dec	r0
    3788:	e2 f7       	brpl	.-8      	; 0x3782 <ioport_configure_port_pin+0x14>
    378a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    378c:	50 8b       	std	Z+16, r21	; 0x10
    378e:	2f 5f       	subi	r18, 0xFF	; 255
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3794:	28 30       	cpi	r18, 0x08	; 8
    3796:	31 05       	cpc	r19, r1
    3798:	89 f7       	brne	.-30     	; 0x377c <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    379a:	40 ff       	sbrs	r20, 0
    379c:	0a c0       	rjmp	.+20     	; 0x37b2 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    379e:	41 ff       	sbrs	r20, 1
    37a0:	03 c0       	rjmp	.+6      	; 0x37a8 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    37a2:	fc 01       	movw	r30, r24
    37a4:	65 83       	std	Z+5, r22	; 0x05
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    37a8:	fc 01       	movw	r30, r24
    37aa:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    37ac:	fc 01       	movw	r30, r24
    37ae:	61 83       	std	Z+1, r22	; 0x01
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    37b2:	fc 01       	movw	r30, r24
    37b4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	08 95       	ret

000037bc <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    37bc:	43 e0       	ldi	r20, 0x03	; 3
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	96 e0       	ldi	r25, 0x06	; 6
    37c6:	d3 df       	rcall	.-90     	; 0x376e <ioport_configure_port_pin>
    37c8:	43 e0       	ldi	r20, 0x03	; 3
    37ca:	50 e0       	ldi	r21, 0x00	; 0
    37cc:	62 e0       	ldi	r22, 0x02	; 2
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	96 e0       	ldi	r25, 0x06	; 6
    37d2:	cd df       	rcall	.-102    	; 0x376e <ioport_configure_port_pin>
    37d4:	43 e0       	ldi	r20, 0x03	; 3
    37d6:	50 e0       	ldi	r21, 0x00	; 0
    37d8:	64 e0       	ldi	r22, 0x04	; 4
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	96 e0       	ldi	r25, 0x06	; 6
    37de:	c7 df       	rcall	.-114    	; 0x376e <ioport_configure_port_pin>
    37e0:	43 e0       	ldi	r20, 0x03	; 3
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	68 e0       	ldi	r22, 0x08	; 8
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	96 e0       	ldi	r25, 0x06	; 6
    37ea:	c1 df       	rcall	.-126    	; 0x376e <ioport_configure_port_pin>
    37ec:	43 e0       	ldi	r20, 0x03	; 3
    37ee:	50 e0       	ldi	r21, 0x00	; 0
    37f0:	60 e1       	ldi	r22, 0x10	; 16
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	96 e0       	ldi	r25, 0x06	; 6
    37f6:	bb df       	rcall	.-138    	; 0x376e <ioport_configure_port_pin>
    37f8:	43 e0       	ldi	r20, 0x03	; 3
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	60 e2       	ldi	r22, 0x20	; 32
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	96 e0       	ldi	r25, 0x06	; 6
    3802:	b5 df       	rcall	.-150    	; 0x376e <ioport_configure_port_pin>
    3804:	43 e0       	ldi	r20, 0x03	; 3
    3806:	50 e0       	ldi	r21, 0x00	; 0
    3808:	60 e4       	ldi	r22, 0x40	; 64
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	96 e0       	ldi	r25, 0x06	; 6
    380e:	af df       	rcall	.-162    	; 0x376e <ioport_configure_port_pin>
    3810:	43 e0       	ldi	r20, 0x03	; 3
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	60 e8       	ldi	r22, 0x80	; 128
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	96 e0       	ldi	r25, 0x06	; 6
    381a:	a9 df       	rcall	.-174    	; 0x376e <ioport_configure_port_pin>
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	58 e1       	ldi	r21, 0x18	; 24
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	80 e2       	ldi	r24, 0x20	; 32
    3824:	96 e0       	ldi	r25, 0x06	; 6
    3826:	a3 df       	rcall	.-186    	; 0x376e <ioport_configure_port_pin>
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	58 e1       	ldi	r21, 0x18	; 24
    382c:	62 e0       	ldi	r22, 0x02	; 2
    382e:	80 e2       	ldi	r24, 0x20	; 32
    3830:	96 e0       	ldi	r25, 0x06	; 6
    3832:	9d df       	rcall	.-198    	; 0x376e <ioport_configure_port_pin>
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	58 e1       	ldi	r21, 0x18	; 24
    3838:	64 e0       	ldi	r22, 0x04	; 4
    383a:	80 e2       	ldi	r24, 0x20	; 32
    383c:	96 e0       	ldi	r25, 0x06	; 6
    383e:	97 df       	rcall	.-210    	; 0x376e <ioport_configure_port_pin>
    3840:	40 e0       	ldi	r20, 0x00	; 0
    3842:	58 e1       	ldi	r21, 0x18	; 24
    3844:	68 e0       	ldi	r22, 0x08	; 8
    3846:	80 e2       	ldi	r24, 0x20	; 32
    3848:	96 e0       	ldi	r25, 0x06	; 6
    384a:	91 cf       	rjmp	.-222    	; 0x376e <ioport_configure_port_pin>
    384c:	08 95       	ret

0000384e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    384e:	04 c0       	rjmp	.+8      	; 0x3858 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3850:	61 50       	subi	r22, 0x01	; 1
    3852:	71 09       	sbc	r23, r1
    3854:	81 09       	sbc	r24, r1
    3856:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3858:	61 15       	cp	r22, r1
    385a:	71 05       	cpc	r23, r1
    385c:	81 05       	cpc	r24, r1
    385e:	91 05       	cpc	r25, r1
    3860:	b9 f7       	brne	.-18     	; 0x3850 <__portable_avr_delay_cycles+0x2>
    3862:	08 95       	ret

00003864 <write_telem_to_xbee>:
		
	}
}

void write_telem_to_xbee()
{
    3864:	2f 92       	push	r2
    3866:	3f 92       	push	r3
    3868:	4f 92       	push	r4
    386a:	5f 92       	push	r5
    386c:	6f 92       	push	r6
    386e:	7f 92       	push	r7
    3870:	8f 92       	push	r8
    3872:	9f 92       	push	r9
    3874:	af 92       	push	r10
    3876:	bf 92       	push	r11
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	c8 5b       	subi	r28, 0xB8	; 184
    388e:	d1 40       	sbci	r29, 0x01	; 1
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	de bf       	out	0x3e, r29	; 62
	char telemetryString [255];
	*telemetryString = '\0';
    3894:	19 82       	std	Y+1, r1	; 0x01
	char s_teamID[] = "2118";
    3896:	ce 01       	movw	r24, r28
    3898:	93 95       	inc	r25
    389a:	cb 55       	subi	r28, 0x5B	; 91
    389c:	de 4f       	sbci	r29, 0xFE	; 254
    389e:	88 83       	st	Y, r24
    38a0:	99 83       	std	Y+1, r25	; 0x01
    38a2:	c5 5a       	subi	r28, 0xA5	; 165
    38a4:	d1 40       	sbci	r29, 0x01	; 1
    38a6:	85 e0       	ldi	r24, 0x05	; 5
    38a8:	ea e5       	ldi	r30, 0x5A	; 90
    38aa:	f2 e2       	ldi	r31, 0x22	; 34
    38ac:	de 01       	movw	r26, r28
    38ae:	b3 95       	inc	r27
    38b0:	01 90       	ld	r0, Z+
    38b2:	0d 92       	st	X+, r0
    38b4:	8a 95       	dec	r24
    38b6:	e1 f7       	brne	.-8      	; 0x38b0 <write_telem_to_xbee+0x4c>
	char s_roll [10];
	char s_spinRate [10];
	char s_flightState [10];
	char s_cardinalDir [10];
	
	sprintf(s_missionTime, "%i", missionTime);
    38b8:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <missionTime+0x3>
    38bc:	8f 93       	push	r24
    38be:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <missionTime+0x2>
    38c2:	8f 93       	push	r24
    38c4:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <missionTime+0x1>
    38c8:	8f 93       	push	r24
    38ca:	80 91 e0 22 	lds	r24, 0x22E0	; 0x8022e0 <missionTime>
    38ce:	8f 93       	push	r24
    38d0:	0f 2e       	mov	r0, r31
    38d2:	f1 e2       	ldi	r31, 0x21	; 33
    38d4:	ef 2e       	mov	r14, r31
    38d6:	f2 e2       	ldi	r31, 0x22	; 34
    38d8:	ff 2e       	mov	r15, r31
    38da:	f0 2d       	mov	r31, r0
    38dc:	ff 92       	push	r15
    38de:	ef 92       	push	r14
    38e0:	4e 01       	movw	r8, r28
    38e2:	9b ef       	ldi	r25, 0xFB	; 251
    38e4:	89 1a       	sub	r8, r25
    38e6:	9e ef       	ldi	r25, 0xFE	; 254
    38e8:	99 0a       	sbc	r9, r25
    38ea:	9f 92       	push	r9
    38ec:	8f 92       	push	r8
    38ee:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_packetCount, "%i", packetCount);
    38f2:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <packetCount+0x3>
    38f6:	8f 93       	push	r24
    38f8:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <packetCount+0x2>
    38fc:	8f 93       	push	r24
    38fe:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <packetCount+0x1>
    3902:	8f 93       	push	r24
    3904:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <packetCount>
    3908:	8f 93       	push	r24
    390a:	ff 92       	push	r15
    390c:	ef 92       	push	r14
    390e:	ce 01       	movw	r24, r28
    3910:	81 5f       	subi	r24, 0xF1	; 241
    3912:	9e 4f       	sbci	r25, 0xFE	; 254
    3914:	c9 55       	subi	r28, 0x59	; 89
    3916:	de 4f       	sbci	r29, 0xFE	; 254
    3918:	88 83       	st	Y, r24
    391a:	99 83       	std	Y+1, r25	; 0x01
    391c:	c7 5a       	subi	r28, 0xA7	; 167
    391e:	d1 40       	sbci	r29, 0x01	; 1
    3920:	9f 93       	push	r25
    3922:	8f 93       	push	r24
    3924:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_altitude, "%f", altitude);
    3928:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <altitude+0x3>
    392c:	8f 93       	push	r24
    392e:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <altitude+0x2>
    3932:	8f 93       	push	r24
    3934:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <altitude+0x1>
    3938:	8f 93       	push	r24
    393a:	80 91 f1 22 	lds	r24, 0x22F1	; 0x8022f1 <altitude>
    393e:	8f 93       	push	r24
    3940:	04 e2       	ldi	r16, 0x24	; 36
    3942:	12 e2       	ldi	r17, 0x22	; 34
    3944:	1f 93       	push	r17
    3946:	0f 93       	push	r16
    3948:	ce 01       	movw	r24, r28
    394a:	87 5e       	subi	r24, 0xE7	; 231
    394c:	9e 4f       	sbci	r25, 0xFE	; 254
    394e:	c7 55       	subi	r28, 0x57	; 87
    3950:	de 4f       	sbci	r29, 0xFE	; 254
    3952:	88 83       	st	Y, r24
    3954:	99 83       	std	Y+1, r25	; 0x01
    3956:	c9 5a       	subi	r28, 0xA9	; 169
    3958:	d1 40       	sbci	r29, 0x01	; 1
    395a:	9f 93       	push	r25
    395c:	8f 93       	push	r24
    395e:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_pressure, "%i",pressure);
    3962:	80 91 eb 22 	lds	r24, 0x22EB	; 0x8022eb <pressure+0x3>
    3966:	8f 93       	push	r24
    3968:	80 91 ea 22 	lds	r24, 0x22EA	; 0x8022ea <pressure+0x2>
    396c:	8f 93       	push	r24
    396e:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <pressure+0x1>
    3972:	8f 93       	push	r24
    3974:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <pressure>
    3978:	8f 93       	push	r24
    397a:	ff 92       	push	r15
    397c:	ef 92       	push	r14
    397e:	ce 01       	movw	r24, r28
    3980:	8d 5d       	subi	r24, 0xDD	; 221
    3982:	9e 4f       	sbci	r25, 0xFE	; 254
    3984:	c5 55       	subi	r28, 0x55	; 85
    3986:	de 4f       	sbci	r29, 0xFE	; 254
    3988:	88 83       	st	Y, r24
    398a:	99 83       	std	Y+1, r25	; 0x01
    398c:	cb 5a       	subi	r28, 0xAB	; 171
    398e:	d1 40       	sbci	r29, 0x01	; 1
    3990:	9f 93       	push	r25
    3992:	8f 93       	push	r24
    3994:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_temp, "%f", temper);
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <temper+0x3>
    39a0:	8f 93       	push	r24
    39a2:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <temper+0x2>
    39a6:	8f 93       	push	r24
    39a8:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <temper+0x1>
    39ac:	8f 93       	push	r24
    39ae:	80 91 dc 22 	lds	r24, 0x22DC	; 0x8022dc <temper>
    39b2:	8f 93       	push	r24
    39b4:	1f 93       	push	r17
    39b6:	0f 93       	push	r16
    39b8:	1e 01       	movw	r2, r28
    39ba:	93 ed       	ldi	r25, 0xD3	; 211
    39bc:	29 1a       	sub	r2, r25
    39be:	9e ef       	ldi	r25, 0xFE	; 254
    39c0:	39 0a       	sbc	r3, r25
    39c2:	3f 92       	push	r3
    39c4:	2f 92       	push	r2
    39c6:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_voltage, "%f", voltage);
    39ca:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <voltage+0x3>
    39ce:	8f 93       	push	r24
    39d0:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <voltage+0x2>
    39d4:	8f 93       	push	r24
    39d6:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <voltage+0x1>
    39da:	8f 93       	push	r24
    39dc:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <voltage>
    39e0:	8f 93       	push	r24
    39e2:	1f 93       	push	r17
    39e4:	0f 93       	push	r16
    39e6:	2e 01       	movw	r4, r28
    39e8:	89 ec       	ldi	r24, 0xC9	; 201
    39ea:	48 1a       	sub	r4, r24
    39ec:	8e ef       	ldi	r24, 0xFE	; 254
    39ee:	58 0a       	sbc	r5, r24
    39f0:	5f 92       	push	r5
    39f2:	4f 92       	push	r4
    39f4:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_gpsTime, " ");
    39f8:	ce 01       	movw	r24, r28
    39fa:	8f 5b       	subi	r24, 0xBF	; 191
    39fc:	9e 4f       	sbci	r25, 0xFE	; 254
    39fe:	c3 55       	subi	r28, 0x53	; 83
    3a00:	de 4f       	sbci	r29, 0xFE	; 254
    3a02:	88 83       	st	Y, r24
    3a04:	99 83       	std	Y+1, r25	; 0x01
    3a06:	cd 5a       	subi	r28, 0xAD	; 173
    3a08:	d1 40       	sbci	r29, 0x01	; 1
    3a0a:	68 94       	set
    3a0c:	cc 24       	eor	r12, r12
    3a0e:	c5 f8       	bld	r12, 5
    3a10:	d1 2c       	mov	r13, r1
    3a12:	cf 5b       	subi	r28, 0xBF	; 191
    3a14:	de 4f       	sbci	r29, 0xFE	; 254
    3a16:	c8 82       	st	Y, r12
    3a18:	d9 82       	std	Y+1, r13	; 0x01
    3a1a:	c1 54       	subi	r28, 0x41	; 65
    3a1c:	d1 40       	sbci	r29, 0x01	; 1
	sprintf(s_gpsLat, " ");
    3a1e:	0a 96       	adiw	r24, 0x0a	; 10
    3a20:	c1 55       	subi	r28, 0x51	; 81
    3a22:	de 4f       	sbci	r29, 0xFE	; 254
    3a24:	88 83       	st	Y, r24
    3a26:	99 83       	std	Y+1, r25	; 0x01
    3a28:	cf 5a       	subi	r28, 0xAF	; 175
    3a2a:	d1 40       	sbci	r29, 0x01	; 1
    3a2c:	c5 5b       	subi	r28, 0xB5	; 181
    3a2e:	de 4f       	sbci	r29, 0xFE	; 254
    3a30:	c8 82       	st	Y, r12
    3a32:	d9 82       	std	Y+1, r13	; 0x01
    3a34:	cb 54       	subi	r28, 0x4B	; 75
    3a36:	d1 40       	sbci	r29, 0x01	; 1
	sprintf(s_gpsLong, " ");
    3a38:	0a 96       	adiw	r24, 0x0a	; 10
    3a3a:	cf 54       	subi	r28, 0x4F	; 79
    3a3c:	de 4f       	sbci	r29, 0xFE	; 254
    3a3e:	88 83       	st	Y, r24
    3a40:	99 83       	std	Y+1, r25	; 0x01
    3a42:	c1 5b       	subi	r28, 0xB1	; 177
    3a44:	d1 40       	sbci	r29, 0x01	; 1
    3a46:	cb 5a       	subi	r28, 0xAB	; 171
    3a48:	de 4f       	sbci	r29, 0xFE	; 254
    3a4a:	c8 82       	st	Y, r12
    3a4c:	d9 82       	std	Y+1, r13	; 0x01
    3a4e:	c5 55       	subi	r28, 0x55	; 85
    3a50:	d1 40       	sbci	r29, 0x01	; 1
	sprintf(s_gpsAlt, " ");
    3a52:	0a 96       	adiw	r24, 0x0a	; 10
    3a54:	cd 54       	subi	r28, 0x4D	; 77
    3a56:	de 4f       	sbci	r29, 0xFE	; 254
    3a58:	88 83       	st	Y, r24
    3a5a:	99 83       	std	Y+1, r25	; 0x01
    3a5c:	c3 5b       	subi	r28, 0xB3	; 179
    3a5e:	d1 40       	sbci	r29, 0x01	; 1
    3a60:	c1 5a       	subi	r28, 0xA1	; 161
    3a62:	de 4f       	sbci	r29, 0xFE	; 254
    3a64:	c8 82       	st	Y, r12
    3a66:	d9 82       	std	Y+1, r13	; 0x01
    3a68:	cf 55       	subi	r28, 0x5F	; 95
    3a6a:	d1 40       	sbci	r29, 0x01	; 1
	sprintf(s_gpsSats, " ");
    3a6c:	0a 96       	adiw	r24, 0x0a	; 10
    3a6e:	cb 54       	subi	r28, 0x4B	; 75
    3a70:	de 4f       	sbci	r29, 0xFE	; 254
    3a72:	88 83       	st	Y, r24
    3a74:	99 83       	std	Y+1, r25	; 0x01
    3a76:	c5 5b       	subi	r28, 0xB5	; 181
    3a78:	d1 40       	sbci	r29, 0x01	; 1
    3a7a:	c7 59       	subi	r28, 0x97	; 151
    3a7c:	de 4f       	sbci	r29, 0xFE	; 254
    3a7e:	c8 82       	st	Y, r12
    3a80:	d9 82       	std	Y+1, r13	; 0x01
    3a82:	c9 56       	subi	r28, 0x69	; 105
    3a84:	d1 40       	sbci	r29, 0x01	; 1
	sprintf(s_pitch, "%f", pitch);
    3a86:	80 91 f8 22 	lds	r24, 0x22F8	; 0x8022f8 <pitch+0x3>
    3a8a:	8f 93       	push	r24
    3a8c:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <pitch+0x2>
    3a90:	8f 93       	push	r24
    3a92:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <pitch+0x1>
    3a96:	8f 93       	push	r24
    3a98:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <pitch>
    3a9c:	8f 93       	push	r24
    3a9e:	1f 93       	push	r17
    3aa0:	0f 93       	push	r16
    3aa2:	3e 01       	movw	r6, r28
    3aa4:	9d e8       	ldi	r25, 0x8D	; 141
    3aa6:	69 1a       	sub	r6, r25
    3aa8:	9e ef       	ldi	r25, 0xFE	; 254
    3aaa:	79 0a       	sbc	r7, r25
    3aac:	7f 92       	push	r7
    3aae:	6f 92       	push	r6
    3ab0:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_roll, "%f", roll);
    3ab4:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <roll+0x3>
    3ab8:	8f 93       	push	r24
    3aba:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <roll+0x2>
    3abe:	8f 93       	push	r24
    3ac0:	80 91 fa 22 	lds	r24, 0x22FA	; 0x8022fa <roll+0x1>
    3ac4:	8f 93       	push	r24
    3ac6:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <roll>
    3aca:	8f 93       	push	r24
    3acc:	1f 93       	push	r17
    3ace:	0f 93       	push	r16
    3ad0:	5e 01       	movw	r10, r28
    3ad2:	83 e8       	ldi	r24, 0x83	; 131
    3ad4:	a8 1a       	sub	r10, r24
    3ad6:	8e ef       	ldi	r24, 0xFE	; 254
    3ad8:	b8 0a       	sbc	r11, r24
    3ada:	bf 92       	push	r11
    3adc:	af 92       	push	r10
    3ade:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_spinRate, " ");
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	89 57       	subi	r24, 0x79	; 121
    3ae6:	9e 4f       	sbci	r25, 0xFE	; 254
    3ae8:	c9 54       	subi	r28, 0x49	; 73
    3aea:	de 4f       	sbci	r29, 0xFE	; 254
    3aec:	88 83       	st	Y, r24
    3aee:	99 83       	std	Y+1, r25	; 0x01
    3af0:	c7 5b       	subi	r28, 0xB7	; 183
    3af2:	d1 40       	sbci	r29, 0x01	; 1
    3af4:	c9 57       	subi	r28, 0x79	; 121
    3af6:	de 4f       	sbci	r29, 0xFE	; 254
    3af8:	c8 82       	st	Y, r12
    3afa:	d9 82       	std	Y+1, r13	; 0x01
    3afc:	c7 58       	subi	r28, 0x87	; 135
    3afe:	d1 40       	sbci	r29, 0x01	; 1
	sprintf(s_flightState, "%i", flightState);
    3b00:	cd bf       	out	0x3d, r28	; 61
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <flightState>
    3b08:	1f 92       	push	r1
    3b0a:	8f 93       	push	r24
    3b0c:	ff 92       	push	r15
    3b0e:	ef 92       	push	r14
    3b10:	7e 01       	movw	r14, r28
    3b12:	9f e6       	ldi	r25, 0x6F	; 111
    3b14:	e9 1a       	sub	r14, r25
    3b16:	9e ef       	ldi	r25, 0xFE	; 254
    3b18:	f9 0a       	sbc	r15, r25
    3b1a:	ff 92       	push	r15
    3b1c:	ef 92       	push	r14
    3b1e:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	sprintf(s_cardinalDir, "%f", heading);
    3b22:	80 91 00 23 	lds	r24, 0x2300	; 0x802300 <heading+0x3>
    3b26:	8f 93       	push	r24
    3b28:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <heading+0x2>
    3b2c:	8f 93       	push	r24
    3b2e:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <heading+0x1>
    3b32:	8f 93       	push	r24
    3b34:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <heading>
    3b38:	8f 93       	push	r24
    3b3a:	1f 93       	push	r17
    3b3c:	0f 93       	push	r16
    3b3e:	8e 01       	movw	r16, r28
    3b40:	05 56       	subi	r16, 0x65	; 101
    3b42:	1e 4f       	sbci	r17, 0xFE	; 254
    3b44:	1f 93       	push	r17
    3b46:	0f 93       	push	r16
    3b48:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	
	
	sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
    3b4c:	1f 93       	push	r17
    3b4e:	0f 93       	push	r16
    3b50:	ff 92       	push	r15
    3b52:	ef 92       	push	r14
    3b54:	c8 54       	subi	r28, 0x48	; 72
    3b56:	de 4f       	sbci	r29, 0xFE	; 254
    3b58:	88 81       	ld	r24, Y
    3b5a:	c8 5b       	subi	r28, 0xB8	; 184
    3b5c:	d1 40       	sbci	r29, 0x01	; 1
    3b5e:	8f 93       	push	r24
    3b60:	c9 54       	subi	r28, 0x49	; 73
    3b62:	de 4f       	sbci	r29, 0xFE	; 254
    3b64:	98 81       	ld	r25, Y
    3b66:	c7 5b       	subi	r28, 0xB7	; 183
    3b68:	d1 40       	sbci	r29, 0x01	; 1
    3b6a:	9f 93       	push	r25
    3b6c:	bf 92       	push	r11
    3b6e:	af 92       	push	r10
    3b70:	7f 92       	push	r7
    3b72:	6f 92       	push	r6
    3b74:	ca 54       	subi	r28, 0x4A	; 74
    3b76:	de 4f       	sbci	r29, 0xFE	; 254
    3b78:	88 81       	ld	r24, Y
    3b7a:	c6 5b       	subi	r28, 0xB6	; 182
    3b7c:	d1 40       	sbci	r29, 0x01	; 1
    3b7e:	8f 93       	push	r24
    3b80:	cb 54       	subi	r28, 0x4B	; 75
    3b82:	de 4f       	sbci	r29, 0xFE	; 254
    3b84:	98 81       	ld	r25, Y
    3b86:	c5 5b       	subi	r28, 0xB5	; 181
    3b88:	d1 40       	sbci	r29, 0x01	; 1
    3b8a:	9f 93       	push	r25
    3b8c:	cc 54       	subi	r28, 0x4C	; 76
    3b8e:	de 4f       	sbci	r29, 0xFE	; 254
    3b90:	88 81       	ld	r24, Y
    3b92:	c4 5b       	subi	r28, 0xB4	; 180
    3b94:	d1 40       	sbci	r29, 0x01	; 1
    3b96:	8f 93       	push	r24
    3b98:	cd 54       	subi	r28, 0x4D	; 77
    3b9a:	de 4f       	sbci	r29, 0xFE	; 254
    3b9c:	98 81       	ld	r25, Y
    3b9e:	c3 5b       	subi	r28, 0xB3	; 179
    3ba0:	d1 40       	sbci	r29, 0x01	; 1
    3ba2:	9f 93       	push	r25
    3ba4:	ce 54       	subi	r28, 0x4E	; 78
    3ba6:	de 4f       	sbci	r29, 0xFE	; 254
    3ba8:	88 81       	ld	r24, Y
    3baa:	c2 5b       	subi	r28, 0xB2	; 178
    3bac:	d1 40       	sbci	r29, 0x01	; 1
    3bae:	8f 93       	push	r24
    3bb0:	cf 54       	subi	r28, 0x4F	; 79
    3bb2:	de 4f       	sbci	r29, 0xFE	; 254
    3bb4:	98 81       	ld	r25, Y
    3bb6:	c1 5b       	subi	r28, 0xB1	; 177
    3bb8:	d1 40       	sbci	r29, 0x01	; 1
    3bba:	9f 93       	push	r25
    3bbc:	c0 55       	subi	r28, 0x50	; 80
    3bbe:	de 4f       	sbci	r29, 0xFE	; 254
    3bc0:	88 81       	ld	r24, Y
    3bc2:	c0 5b       	subi	r28, 0xB0	; 176
    3bc4:	d1 40       	sbci	r29, 0x01	; 1
    3bc6:	8f 93       	push	r24
    3bc8:	c1 55       	subi	r28, 0x51	; 81
    3bca:	de 4f       	sbci	r29, 0xFE	; 254
    3bcc:	98 81       	ld	r25, Y
    3bce:	cf 5a       	subi	r28, 0xAF	; 175
    3bd0:	d1 40       	sbci	r29, 0x01	; 1
    3bd2:	9f 93       	push	r25
    3bd4:	c2 55       	subi	r28, 0x52	; 82
    3bd6:	de 4f       	sbci	r29, 0xFE	; 254
    3bd8:	88 81       	ld	r24, Y
    3bda:	ce 5a       	subi	r28, 0xAE	; 174
    3bdc:	d1 40       	sbci	r29, 0x01	; 1
    3bde:	8f 93       	push	r24
    3be0:	c3 55       	subi	r28, 0x53	; 83
    3be2:	de 4f       	sbci	r29, 0xFE	; 254
    3be4:	98 81       	ld	r25, Y
    3be6:	cd 5a       	subi	r28, 0xAD	; 173
    3be8:	d1 40       	sbci	r29, 0x01	; 1
    3bea:	9f 93       	push	r25
    3bec:	5f 92       	push	r5
    3bee:	4f 92       	push	r4
    3bf0:	3f 92       	push	r3
    3bf2:	2f 92       	push	r2
    3bf4:	c4 55       	subi	r28, 0x54	; 84
    3bf6:	de 4f       	sbci	r29, 0xFE	; 254
    3bf8:	88 81       	ld	r24, Y
    3bfa:	cc 5a       	subi	r28, 0xAC	; 172
    3bfc:	d1 40       	sbci	r29, 0x01	; 1
    3bfe:	8f 93       	push	r24
    3c00:	c5 55       	subi	r28, 0x55	; 85
    3c02:	de 4f       	sbci	r29, 0xFE	; 254
    3c04:	98 81       	ld	r25, Y
    3c06:	cb 5a       	subi	r28, 0xAB	; 171
    3c08:	d1 40       	sbci	r29, 0x01	; 1
    3c0a:	9f 93       	push	r25
    3c0c:	c6 55       	subi	r28, 0x56	; 86
    3c0e:	de 4f       	sbci	r29, 0xFE	; 254
    3c10:	88 81       	ld	r24, Y
    3c12:	ca 5a       	subi	r28, 0xAA	; 170
    3c14:	d1 40       	sbci	r29, 0x01	; 1
    3c16:	8f 93       	push	r24
    3c18:	c7 55       	subi	r28, 0x57	; 87
    3c1a:	de 4f       	sbci	r29, 0xFE	; 254
    3c1c:	98 81       	ld	r25, Y
    3c1e:	c9 5a       	subi	r28, 0xA9	; 169
    3c20:	d1 40       	sbci	r29, 0x01	; 1
    3c22:	9f 93       	push	r25
    3c24:	c8 55       	subi	r28, 0x58	; 88
    3c26:	de 4f       	sbci	r29, 0xFE	; 254
    3c28:	88 81       	ld	r24, Y
    3c2a:	c8 5a       	subi	r28, 0xA8	; 168
    3c2c:	d1 40       	sbci	r29, 0x01	; 1
    3c2e:	8f 93       	push	r24
    3c30:	c9 55       	subi	r28, 0x59	; 89
    3c32:	de 4f       	sbci	r29, 0xFE	; 254
    3c34:	98 81       	ld	r25, Y
    3c36:	c7 5a       	subi	r28, 0xA7	; 167
    3c38:	d1 40       	sbci	r29, 0x01	; 1
    3c3a:	9f 93       	push	r25
    3c3c:	9f 92       	push	r9
    3c3e:	8f 92       	push	r8
    3c40:	ca 55       	subi	r28, 0x5A	; 90
    3c42:	de 4f       	sbci	r29, 0xFE	; 254
    3c44:	88 81       	ld	r24, Y
    3c46:	c6 5a       	subi	r28, 0xA6	; 166
    3c48:	d1 40       	sbci	r29, 0x01	; 1
    3c4a:	8f 93       	push	r24
    3c4c:	cb 55       	subi	r28, 0x5B	; 91
    3c4e:	de 4f       	sbci	r29, 0xFE	; 254
    3c50:	98 81       	ld	r25, Y
    3c52:	c5 5a       	subi	r28, 0xA5	; 165
    3c54:	d1 40       	sbci	r29, 0x01	; 1
    3c56:	9f 93       	push	r25
    3c58:	87 e2       	ldi	r24, 0x27	; 39
    3c5a:	92 e2       	ldi	r25, 0x22	; 34
    3c5c:	9f 93       	push	r25
    3c5e:	8f 93       	push	r24
    3c60:	0a 59       	subi	r16, 0x9A	; 154
    3c62:	11 40       	sbci	r17, 0x01	; 1
    3c64:	1f 93       	push	r17
    3c66:	0f 93       	push	r16
    3c68:	0e 94 37 28 	call	0x506e	; 0x506e <sprintf>
	s_roll,
	s_spinRate,
	s_flightState,
	s_cardinalDir);
	
	xbeeWrite(telemetryString);
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	c8 01       	movw	r24, r16
    3c72:	45 dd       	rcall	.-1398   	; 0x36fe <xbeeWrite>
}
    3c74:	c8 54       	subi	r28, 0x48	; 72
    3c76:	de 4f       	sbci	r29, 0xFE	; 254
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	ff 90       	pop	r15
    3c86:	ef 90       	pop	r14
    3c88:	df 90       	pop	r13
    3c8a:	cf 90       	pop	r12
    3c8c:	bf 90       	pop	r11
    3c8e:	af 90       	pop	r10
    3c90:	9f 90       	pop	r9
    3c92:	8f 90       	pop	r8
    3c94:	7f 90       	pop	r7
    3c96:	6f 90       	pop	r6
    3c98:	5f 90       	pop	r5
    3c9a:	4f 90       	pop	r4
    3c9c:	3f 90       	pop	r3
    3c9e:	2f 90       	pop	r2
    3ca0:	08 95       	ret

00003ca2 <main>:

void print_calibration_data(void);

int main (void)
{
	board_init();
    3ca2:	8c dd       	rcall	.-1256   	; 0x37bc <board_init>
	sysclk_init();
    3ca4:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_init>
	rtc_init();
    3ca8:	0e 94 b7 08 	call	0x116e	; 0x116e <rtc_init>
	
	packetCount = 0;
    3cac:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <packetCount>
    3cb0:	10 92 ee 22 	sts	0x22EE, r1	; 0x8022ee <packetCount+0x1>
    3cb4:	10 92 ef 22 	sts	0x22EF, r1	; 0x8022ef <packetCount+0x2>
    3cb8:	10 92 f0 22 	sts	0x22F0, r1	; 0x8022f0 <packetCount+0x3>
	missionTime = rtc_get_time();
    3cbc:	0e 94 81 08 	call	0x1102	; 0x1102 <rtc_get_time>
    3cc0:	60 93 e0 22 	sts	0x22E0, r22	; 0x8022e0 <missionTime>
    3cc4:	70 93 e1 22 	sts	0x22E1, r23	; 0x8022e1 <missionTime+0x1>
    3cc8:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <missionTime+0x2>
    3ccc:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <missionTime+0x3>
	printf("%f", missionTime);
    3cd0:	9f 93       	push	r25
    3cd2:	8f 93       	push	r24
    3cd4:	7f 93       	push	r23
    3cd6:	6f 93       	push	r22
    3cd8:	84 e2       	ldi	r24, 0x24	; 36
    3cda:	92 e2       	ldi	r25, 0x22	; 34
    3cdc:	9f 93       	push	r25
    3cde:	8f 93       	push	r24
    3ce0:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <printf>
	}
	

	
	uart_terminal_init();
	newOLogInit();
    3ce4:	98 dc       	rcall	.-1744   	; 0x3616 <uart_terminal_init>
    3ce6:	f2 da       	rcall	.-2588   	; 0x32cc <newOLogInit>

	printf("uart is working\n");
    3ce8:	8f e5       	ldi	r24, 0x5F	; 95
    3cea:	92 e2       	ldi	r25, 0x22	; 34
    3cec:	0e 94 07 28 	call	0x500e	; 0x500e <puts>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    3cf0:	e0 ea       	ldi	r30, 0xA0	; 160
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	87 e0       	ldi	r24, 0x07	; 7
    3cf6:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    3cf8:	82 81       	ldd	r24, Z+2	; 0x02
    3cfa:	80 68       	ori	r24, 0x80	; 128
	//char* s_cardinalDir= (char*)malloc(10 * sizeof(char));

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	cpu_irq_enable();
    3cfc:	82 83       	std	Z+2, r24	; 0x02

	
	imu_init();
    3cfe:	78 94       	sei
    3d00:	e0 d9       	rcall	.-3136   	; 0x30c2 <imu_init>
	delay_s(1);
    3d02:	66 e1       	ldi	r22, 0x16	; 22
    3d04:	76 e1       	ldi	r23, 0x16	; 22
    3d06:	85 e0       	ldi	r24, 0x05	; 5
	xbee_init();
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	a1 dd       	rcall	.-1214   	; 0x384e <__portable_avr_delay_cycles>
	servo_init();
    3d0c:	d5 dc       	rcall	.-1622   	; 0x36b8 <xbee_init>
	thermistor_init();
    3d0e:	9f da       	rcall	.-2754   	; 0x324e <servo_init>
	volt_init();
    3d10:	0e 94 47 11 	call	0x228e	; 0x228e <thermistor_init>
	
	
	

	uint8_t servoPos = 0;
	set_servo(0);
    3d14:	0e 94 51 11 	call	0x22a2	; 0x22a2 <volt_init>
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
	buzz_on();
    3d1c:	a5 da       	rcall	.-2742   	; 0x3268 <set_servo>
    3d1e:	bc da       	rcall	.-2696   	; 0x3298 <buzz_on>
	buzz_off();
    3d20:	c8 da       	rcall	.-2672   	; 0x32b2 <buzz_off>
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
	
	
	
	

	uint8_t servoPos = 0;
    3d2e:	c0 e0       	ldi	r28, 0x00	; 0

		//Get Telemetry
		missionTime = rtc_get_time();
		packetCount++;
		//pressure = getPressure();
		altitude = pressure / 9000; // TODO: finish function
    3d30:	0f 2e       	mov	r0, r31
    3d32:	f8 e2       	ldi	r31, 0x28	; 40
    3d34:	cf 2e       	mov	r12, r31
    3d36:	f3 e2       	ldi	r31, 0x23	; 35
    3d38:	df 2e       	mov	r13, r31
    3d3a:	e1 2c       	mov	r14, r1
    3d3c:	f1 2c       	mov	r15, r1
    3d3e:	f0 2d       	mov	r31, r0
	set_servo(0);
	buzz_on();
	buzz_off();
	while (1)
	{
		imu_update();
    3d40:	58 da       	rcall	.-2896   	; 0x31f2 <imu_update>
    3d42:	0e 94 81 08 	call	0x1102	; 0x1102 <rtc_get_time>
		
		//printf("Pitch: %i\nRoll: %i\nYaw: %i\n",(int)imu_pitch(), (int)imu_roll(), (int)imu_heading());
		//printf("CALBRATION STATUSES:  Accel: %u, Gyro: %u, Mag: %u, Sys: %u\n", imu_accel_cal(), imu_gyro_cal(), imu_mag_cal(), imu_sys_cal());

		//Get Telemetry
		missionTime = rtc_get_time();
    3d46:	60 93 e0 22 	sts	0x22E0, r22	; 0x8022e0 <missionTime>
    3d4a:	70 93 e1 22 	sts	0x22E1, r23	; 0x8022e1 <missionTime+0x1>
    3d4e:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <missionTime+0x2>
    3d52:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <missionTime+0x3>
    3d56:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <packetCount>
		packetCount++;
    3d5a:	90 91 ee 22 	lds	r25, 0x22EE	; 0x8022ee <packetCount+0x1>
    3d5e:	a0 91 ef 22 	lds	r26, 0x22EF	; 0x8022ef <packetCount+0x2>
    3d62:	b0 91 f0 22 	lds	r27, 0x22F0	; 0x8022f0 <packetCount+0x3>
    3d66:	01 96       	adiw	r24, 0x01	; 1
    3d68:	a1 1d       	adc	r26, r1
    3d6a:	b1 1d       	adc	r27, r1
    3d6c:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <packetCount>
    3d70:	90 93 ee 22 	sts	0x22EE, r25	; 0x8022ee <packetCount+0x1>
    3d74:	a0 93 ef 22 	sts	0x22EF, r26	; 0x8022ef <packetCount+0x2>
    3d78:	b0 93 f0 22 	sts	0x22F0, r27	; 0x8022f0 <packetCount+0x3>
		//pressure = getPressure();
		altitude = pressure / 9000; // TODO: finish function
    3d7c:	60 91 e8 22 	lds	r22, 0x22E8	; 0x8022e8 <pressure>
    3d80:	70 91 e9 22 	lds	r23, 0x22E9	; 0x8022e9 <pressure+0x1>
    3d84:	80 91 ea 22 	lds	r24, 0x22EA	; 0x8022ea <pressure+0x2>
    3d88:	90 91 eb 22 	lds	r25, 0x22EB	; 0x8022eb <pressure+0x3>
    3d8c:	a7 01       	movw	r20, r14
    3d8e:	96 01       	movw	r18, r12
    3d90:	d4 d6       	rcall	.+3496   	; 0x4b3a <__divmodsi4>
    3d92:	ca 01       	movw	r24, r20
    3d94:	b9 01       	movw	r22, r18
    3d96:	77 d1       	rcall	.+750    	; 0x4086 <__floatsisf>
    3d98:	60 93 f1 22 	sts	0x22F1, r22	; 0x8022f1 <altitude>
    3d9c:	70 93 f2 22 	sts	0x22F2, r23	; 0x8022f2 <altitude+0x1>
    3da0:	80 93 f3 22 	sts	0x22F3, r24	; 0x8022f3 <altitude+0x2>
    3da4:	90 93 f4 22 	sts	0x22F4, r25	; 0x8022f4 <altitude+0x3>
    3da8:	0e 94 ab 11 	call	0x2356	; 0x2356 <getTemperature>
		temper = getTemperature();
    3dac:	60 93 dc 22 	sts	0x22DC, r22	; 0x8022dc <temper>
    3db0:	70 93 dd 22 	sts	0x22DD, r23	; 0x8022dd <temper+0x1>
    3db4:	80 93 de 22 	sts	0x22DE, r24	; 0x8022de <temper+0x2>
    3db8:	90 93 df 22 	sts	0x22DF, r25	; 0x8022df <temper+0x3>
		voltage = getVoltage();
    3dbc:	0e 94 9d 11 	call	0x233a	; 0x233a <getVoltage>
    3dc0:	60 93 e4 22 	sts	0x22E4, r22	; 0x8022e4 <voltage>
    3dc4:	70 93 e5 22 	sts	0x22E5, r23	; 0x8022e5 <voltage+0x1>
    3dc8:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <voltage+0x2>
    3dcc:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <voltage+0x3>

		set_servo(servoPos);
    3dd0:	8c 2f       	mov	r24, r28
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
		servoPos +=100;
    3dd4:	49 da       	rcall	.-2926   	; 0x3268 <set_servo>
		pitch = imu_pitch();
    3dd6:	cc 59       	subi	r28, 0x9C	; 156
    3dd8:	28 da       	rcall	.-2992   	; 0x322a <imu_pitch>
    3dda:	60 93 f5 22 	sts	0x22F5, r22	; 0x8022f5 <pitch>
    3dde:	70 93 f6 22 	sts	0x22F6, r23	; 0x8022f6 <pitch+0x1>
    3de2:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <pitch+0x2>
    3de6:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <pitch+0x3>
		roll = imu_roll();
    3dea:	16 da       	rcall	.-3028   	; 0x3218 <imu_roll>
    3dec:	60 93 f9 22 	sts	0x22F9, r22	; 0x8022f9 <roll>
    3df0:	70 93 fa 22 	sts	0x22FA, r23	; 0x8022fa <roll+0x1>
    3df4:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <roll+0x2>
		heading = imu_heading();
    3df8:	90 93 fc 22 	sts	0x22FC, r25	; 0x8022fc <roll+0x3>
    3dfc:	1f da       	rcall	.-3010   	; 0x323c <imu_heading>
    3dfe:	60 93 fd 22 	sts	0x22FD, r22	; 0x8022fd <heading>
    3e02:	70 93 fe 22 	sts	0x22FE, r23	; 0x8022fe <heading+0x1>
    3e06:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <heading+0x2>
    3e0a:	90 93 00 23 	sts	0x2300, r25	; 0x802300 <heading+0x3>
		
		
		write_telem_to_xbee();
    3e0e:	2a dd       	rcall	.-1452   	; 0x3864 <write_telem_to_xbee>
		
		
		
		delay_ms(1000);
    3e10:	66 e1       	ldi	r22, 0x16	; 22
    3e12:	76 e1       	ldi	r23, 0x16	; 22
    3e14:	85 e0       	ldi	r24, 0x05	; 5
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	1a dd       	rcall	.-1484   	; 0x384e <__portable_avr_delay_cycles>
    3e1a:	92 cf       	rjmp	.-220    	; 0x3d40 <main+0x9e>

00003e1c <__subsf3>:
    3e1c:	50 58       	subi	r21, 0x80	; 128

00003e1e <__addsf3>:
    3e1e:	bb 27       	eor	r27, r27
    3e20:	aa 27       	eor	r26, r26
    3e22:	0e d0       	rcall	.+28     	; 0x3e40 <__addsf3x>
    3e24:	d0 c1       	rjmp	.+928    	; 0x41c6 <__fp_round>
    3e26:	c1 d1       	rcall	.+898    	; 0x41aa <__fp_pscA>
    3e28:	30 f0       	brcs	.+12     	; 0x3e36 <__addsf3+0x18>
    3e2a:	c6 d1       	rcall	.+908    	; 0x41b8 <__fp_pscB>
    3e2c:	20 f0       	brcs	.+8      	; 0x3e36 <__addsf3+0x18>
    3e2e:	31 f4       	brne	.+12     	; 0x3e3c <__addsf3+0x1e>
    3e30:	9f 3f       	cpi	r25, 0xFF	; 255
    3e32:	11 f4       	brne	.+4      	; 0x3e38 <__addsf3+0x1a>
    3e34:	1e f4       	brtc	.+6      	; 0x3e3c <__addsf3+0x1e>
    3e36:	a6 c1       	rjmp	.+844    	; 0x4184 <__fp_nan>
    3e38:	0e f4       	brtc	.+2      	; 0x3e3c <__addsf3+0x1e>
    3e3a:	e0 95       	com	r30
    3e3c:	e7 fb       	bst	r30, 7
    3e3e:	9c c1       	rjmp	.+824    	; 0x4178 <__fp_inf>

00003e40 <__addsf3x>:
    3e40:	e9 2f       	mov	r30, r25
    3e42:	d2 d1       	rcall	.+932    	; 0x41e8 <__fp_split3>
    3e44:	80 f3       	brcs	.-32     	; 0x3e26 <__addsf3+0x8>
    3e46:	ba 17       	cp	r27, r26
    3e48:	62 07       	cpc	r22, r18
    3e4a:	73 07       	cpc	r23, r19
    3e4c:	84 07       	cpc	r24, r20
    3e4e:	95 07       	cpc	r25, r21
    3e50:	18 f0       	brcs	.+6      	; 0x3e58 <__addsf3x+0x18>
    3e52:	71 f4       	brne	.+28     	; 0x3e70 <__addsf3x+0x30>
    3e54:	9e f5       	brtc	.+102    	; 0x3ebc <__addsf3x+0x7c>
    3e56:	ea c1       	rjmp	.+980    	; 0x422c <__fp_zero>
    3e58:	0e f4       	brtc	.+2      	; 0x3e5c <__addsf3x+0x1c>
    3e5a:	e0 95       	com	r30
    3e5c:	0b 2e       	mov	r0, r27
    3e5e:	ba 2f       	mov	r27, r26
    3e60:	a0 2d       	mov	r26, r0
    3e62:	0b 01       	movw	r0, r22
    3e64:	b9 01       	movw	r22, r18
    3e66:	90 01       	movw	r18, r0
    3e68:	0c 01       	movw	r0, r24
    3e6a:	ca 01       	movw	r24, r20
    3e6c:	a0 01       	movw	r20, r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	ff 27       	eor	r31, r31
    3e72:	59 1b       	sub	r21, r25
    3e74:	99 f0       	breq	.+38     	; 0x3e9c <__addsf3x+0x5c>
    3e76:	59 3f       	cpi	r21, 0xF9	; 249
    3e78:	50 f4       	brcc	.+20     	; 0x3e8e <__addsf3x+0x4e>
    3e7a:	50 3e       	cpi	r21, 0xE0	; 224
    3e7c:	68 f1       	brcs	.+90     	; 0x3ed8 <__addsf3x+0x98>
    3e7e:	1a 16       	cp	r1, r26
    3e80:	f0 40       	sbci	r31, 0x00	; 0
    3e82:	a2 2f       	mov	r26, r18
    3e84:	23 2f       	mov	r18, r19
    3e86:	34 2f       	mov	r19, r20
    3e88:	44 27       	eor	r20, r20
    3e8a:	58 5f       	subi	r21, 0xF8	; 248
    3e8c:	f3 cf       	rjmp	.-26     	; 0x3e74 <__addsf3x+0x34>
    3e8e:	46 95       	lsr	r20
    3e90:	37 95       	ror	r19
    3e92:	27 95       	ror	r18
    3e94:	a7 95       	ror	r26
    3e96:	f0 40       	sbci	r31, 0x00	; 0
    3e98:	53 95       	inc	r21
    3e9a:	c9 f7       	brne	.-14     	; 0x3e8e <__addsf3x+0x4e>
    3e9c:	7e f4       	brtc	.+30     	; 0x3ebc <__addsf3x+0x7c>
    3e9e:	1f 16       	cp	r1, r31
    3ea0:	ba 0b       	sbc	r27, r26
    3ea2:	62 0b       	sbc	r22, r18
    3ea4:	73 0b       	sbc	r23, r19
    3ea6:	84 0b       	sbc	r24, r20
    3ea8:	ba f0       	brmi	.+46     	; 0x3ed8 <__addsf3x+0x98>
    3eaa:	91 50       	subi	r25, 0x01	; 1
    3eac:	a1 f0       	breq	.+40     	; 0x3ed6 <__addsf3x+0x96>
    3eae:	ff 0f       	add	r31, r31
    3eb0:	bb 1f       	adc	r27, r27
    3eb2:	66 1f       	adc	r22, r22
    3eb4:	77 1f       	adc	r23, r23
    3eb6:	88 1f       	adc	r24, r24
    3eb8:	c2 f7       	brpl	.-16     	; 0x3eaa <__addsf3x+0x6a>
    3eba:	0e c0       	rjmp	.+28     	; 0x3ed8 <__addsf3x+0x98>
    3ebc:	ba 0f       	add	r27, r26
    3ebe:	62 1f       	adc	r22, r18
    3ec0:	73 1f       	adc	r23, r19
    3ec2:	84 1f       	adc	r24, r20
    3ec4:	48 f4       	brcc	.+18     	; 0x3ed8 <__addsf3x+0x98>
    3ec6:	87 95       	ror	r24
    3ec8:	77 95       	ror	r23
    3eca:	67 95       	ror	r22
    3ecc:	b7 95       	ror	r27
    3ece:	f7 95       	ror	r31
    3ed0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ed2:	08 f0       	brcs	.+2      	; 0x3ed6 <__addsf3x+0x96>
    3ed4:	b3 cf       	rjmp	.-154    	; 0x3e3c <__addsf3+0x1e>
    3ed6:	93 95       	inc	r25
    3ed8:	88 0f       	add	r24, r24
    3eda:	08 f0       	brcs	.+2      	; 0x3ede <__addsf3x+0x9e>
    3edc:	99 27       	eor	r25, r25
    3ede:	ee 0f       	add	r30, r30
    3ee0:	97 95       	ror	r25
    3ee2:	87 95       	ror	r24
    3ee4:	08 95       	ret

00003ee6 <__divsf3>:
    3ee6:	0c d0       	rcall	.+24     	; 0x3f00 <__divsf3x>
    3ee8:	6e c1       	rjmp	.+732    	; 0x41c6 <__fp_round>
    3eea:	66 d1       	rcall	.+716    	; 0x41b8 <__fp_pscB>
    3eec:	40 f0       	brcs	.+16     	; 0x3efe <__divsf3+0x18>
    3eee:	5d d1       	rcall	.+698    	; 0x41aa <__fp_pscA>
    3ef0:	30 f0       	brcs	.+12     	; 0x3efe <__divsf3+0x18>
    3ef2:	21 f4       	brne	.+8      	; 0x3efc <__divsf3+0x16>
    3ef4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ef6:	19 f0       	breq	.+6      	; 0x3efe <__divsf3+0x18>
    3ef8:	3f c1       	rjmp	.+638    	; 0x4178 <__fp_inf>
    3efa:	51 11       	cpse	r21, r1
    3efc:	98 c1       	rjmp	.+816    	; 0x422e <__fp_szero>
    3efe:	42 c1       	rjmp	.+644    	; 0x4184 <__fp_nan>

00003f00 <__divsf3x>:
    3f00:	73 d1       	rcall	.+742    	; 0x41e8 <__fp_split3>
    3f02:	98 f3       	brcs	.-26     	; 0x3eea <__divsf3+0x4>

00003f04 <__divsf3_pse>:
    3f04:	99 23       	and	r25, r25
    3f06:	c9 f3       	breq	.-14     	; 0x3efa <__divsf3+0x14>
    3f08:	55 23       	and	r21, r21
    3f0a:	b1 f3       	breq	.-20     	; 0x3ef8 <__divsf3+0x12>
    3f0c:	95 1b       	sub	r25, r21
    3f0e:	55 0b       	sbc	r21, r21
    3f10:	bb 27       	eor	r27, r27
    3f12:	aa 27       	eor	r26, r26
    3f14:	62 17       	cp	r22, r18
    3f16:	73 07       	cpc	r23, r19
    3f18:	84 07       	cpc	r24, r20
    3f1a:	38 f0       	brcs	.+14     	; 0x3f2a <__divsf3_pse+0x26>
    3f1c:	9f 5f       	subi	r25, 0xFF	; 255
    3f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f20:	22 0f       	add	r18, r18
    3f22:	33 1f       	adc	r19, r19
    3f24:	44 1f       	adc	r20, r20
    3f26:	aa 1f       	adc	r26, r26
    3f28:	a9 f3       	breq	.-22     	; 0x3f14 <__divsf3_pse+0x10>
    3f2a:	33 d0       	rcall	.+102    	; 0x3f92 <__divsf3_pse+0x8e>
    3f2c:	0e 2e       	mov	r0, r30
    3f2e:	3a f0       	brmi	.+14     	; 0x3f3e <__divsf3_pse+0x3a>
    3f30:	e0 e8       	ldi	r30, 0x80	; 128
    3f32:	30 d0       	rcall	.+96     	; 0x3f94 <__divsf3_pse+0x90>
    3f34:	91 50       	subi	r25, 0x01	; 1
    3f36:	50 40       	sbci	r21, 0x00	; 0
    3f38:	e6 95       	lsr	r30
    3f3a:	00 1c       	adc	r0, r0
    3f3c:	ca f7       	brpl	.-14     	; 0x3f30 <__divsf3_pse+0x2c>
    3f3e:	29 d0       	rcall	.+82     	; 0x3f92 <__divsf3_pse+0x8e>
    3f40:	fe 2f       	mov	r31, r30
    3f42:	27 d0       	rcall	.+78     	; 0x3f92 <__divsf3_pse+0x8e>
    3f44:	66 0f       	add	r22, r22
    3f46:	77 1f       	adc	r23, r23
    3f48:	88 1f       	adc	r24, r24
    3f4a:	bb 1f       	adc	r27, r27
    3f4c:	26 17       	cp	r18, r22
    3f4e:	37 07       	cpc	r19, r23
    3f50:	48 07       	cpc	r20, r24
    3f52:	ab 07       	cpc	r26, r27
    3f54:	b0 e8       	ldi	r27, 0x80	; 128
    3f56:	09 f0       	breq	.+2      	; 0x3f5a <__divsf3_pse+0x56>
    3f58:	bb 0b       	sbc	r27, r27
    3f5a:	80 2d       	mov	r24, r0
    3f5c:	bf 01       	movw	r22, r30
    3f5e:	ff 27       	eor	r31, r31
    3f60:	93 58       	subi	r25, 0x83	; 131
    3f62:	5f 4f       	sbci	r21, 0xFF	; 255
    3f64:	2a f0       	brmi	.+10     	; 0x3f70 <__divsf3_pse+0x6c>
    3f66:	9e 3f       	cpi	r25, 0xFE	; 254
    3f68:	51 05       	cpc	r21, r1
    3f6a:	68 f0       	brcs	.+26     	; 0x3f86 <__divsf3_pse+0x82>
    3f6c:	05 c1       	rjmp	.+522    	; 0x4178 <__fp_inf>
    3f6e:	5f c1       	rjmp	.+702    	; 0x422e <__fp_szero>
    3f70:	5f 3f       	cpi	r21, 0xFF	; 255
    3f72:	ec f3       	brlt	.-6      	; 0x3f6e <__divsf3_pse+0x6a>
    3f74:	98 3e       	cpi	r25, 0xE8	; 232
    3f76:	dc f3       	brlt	.-10     	; 0x3f6e <__divsf3_pse+0x6a>
    3f78:	86 95       	lsr	r24
    3f7a:	77 95       	ror	r23
    3f7c:	67 95       	ror	r22
    3f7e:	b7 95       	ror	r27
    3f80:	f7 95       	ror	r31
    3f82:	9f 5f       	subi	r25, 0xFF	; 255
    3f84:	c9 f7       	brne	.-14     	; 0x3f78 <__divsf3_pse+0x74>
    3f86:	88 0f       	add	r24, r24
    3f88:	91 1d       	adc	r25, r1
    3f8a:	96 95       	lsr	r25
    3f8c:	87 95       	ror	r24
    3f8e:	97 f9       	bld	r25, 7
    3f90:	08 95       	ret
    3f92:	e1 e0       	ldi	r30, 0x01	; 1
    3f94:	66 0f       	add	r22, r22
    3f96:	77 1f       	adc	r23, r23
    3f98:	88 1f       	adc	r24, r24
    3f9a:	bb 1f       	adc	r27, r27
    3f9c:	62 17       	cp	r22, r18
    3f9e:	73 07       	cpc	r23, r19
    3fa0:	84 07       	cpc	r24, r20
    3fa2:	ba 07       	cpc	r27, r26
    3fa4:	20 f0       	brcs	.+8      	; 0x3fae <__divsf3_pse+0xaa>
    3fa6:	62 1b       	sub	r22, r18
    3fa8:	73 0b       	sbc	r23, r19
    3faa:	84 0b       	sbc	r24, r20
    3fac:	ba 0b       	sbc	r27, r26
    3fae:	ee 1f       	adc	r30, r30
    3fb0:	88 f7       	brcc	.-30     	; 0x3f94 <__divsf3_pse+0x90>
    3fb2:	e0 95       	com	r30
    3fb4:	08 95       	ret

00003fb6 <__fixsfdi>:
    3fb6:	be e3       	ldi	r27, 0x3E	; 62
    3fb8:	04 d0       	rcall	.+8      	; 0x3fc2 <__fixunssfdi+0x2>
    3fba:	08 f4       	brcc	.+2      	; 0x3fbe <__fixsfdi+0x8>
    3fbc:	90 e8       	ldi	r25, 0x80	; 128
    3fbe:	08 95       	ret

00003fc0 <__fixunssfdi>:
    3fc0:	bf e3       	ldi	r27, 0x3F	; 63
    3fc2:	22 27       	eor	r18, r18
    3fc4:	33 27       	eor	r19, r19
    3fc6:	a9 01       	movw	r20, r18
    3fc8:	17 d1       	rcall	.+558    	; 0x41f8 <__fp_splitA>
    3fca:	58 f1       	brcs	.+86     	; 0x4022 <__stack+0x23>
    3fcc:	9f 57       	subi	r25, 0x7F	; 127
    3fce:	40 f1       	brcs	.+80     	; 0x4020 <__stack+0x21>
    3fd0:	b9 17       	cp	r27, r25
    3fd2:	38 f1       	brcs	.+78     	; 0x4022 <__stack+0x23>
    3fd4:	bf e3       	ldi	r27, 0x3F	; 63
    3fd6:	b9 1b       	sub	r27, r25
    3fd8:	99 27       	eor	r25, r25
    3fda:	b8 50       	subi	r27, 0x08	; 8
    3fdc:	3a f4       	brpl	.+14     	; 0x3fec <__fixunssfdi+0x2c>
    3fde:	66 0f       	add	r22, r22
    3fe0:	77 1f       	adc	r23, r23
    3fe2:	88 1f       	adc	r24, r24
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	b3 95       	inc	r27
    3fe8:	d2 f3       	brmi	.-12     	; 0x3fde <__fixunssfdi+0x1e>
    3fea:	16 c0       	rjmp	.+44     	; 0x4018 <__stack+0x19>
    3fec:	b8 50       	subi	r27, 0x08	; 8
    3fee:	4a f0       	brmi	.+18     	; 0x4002 <__stack+0x3>
    3ff0:	23 2f       	mov	r18, r19
    3ff2:	34 2f       	mov	r19, r20
    3ff4:	45 2f       	mov	r20, r21
    3ff6:	56 2f       	mov	r21, r22
    3ff8:	67 2f       	mov	r22, r23
    3ffa:	78 2f       	mov	r23, r24
    3ffc:	88 27       	eor	r24, r24
    3ffe:	b8 50       	subi	r27, 0x08	; 8
    4000:	ba f7       	brpl	.-18     	; 0x3ff0 <__fixunssfdi+0x30>
    4002:	b8 5f       	subi	r27, 0xF8	; 248
    4004:	49 f0       	breq	.+18     	; 0x4018 <__stack+0x19>
    4006:	86 95       	lsr	r24
    4008:	77 95       	ror	r23
    400a:	67 95       	ror	r22
    400c:	57 95       	ror	r21
    400e:	47 95       	ror	r20
    4010:	37 95       	ror	r19
    4012:	27 95       	ror	r18
    4014:	ba 95       	dec	r27
    4016:	b9 f7       	brne	.-18     	; 0x4006 <__stack+0x7>
    4018:	0e f4       	brtc	.+2      	; 0x401c <__stack+0x1d>
    401a:	b7 d0       	rcall	.+366    	; 0x418a <__fp_negdi>
    401c:	88 94       	clc
    401e:	08 95       	ret
    4020:	88 94       	clc
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	70 e0       	ldi	r23, 0x00	; 0
    4026:	cb 01       	movw	r24, r22
    4028:	08 95       	ret

0000402a <__fixunssfsi>:
    402a:	e6 d0       	rcall	.+460    	; 0x41f8 <__fp_splitA>
    402c:	88 f0       	brcs	.+34     	; 0x4050 <__fixunssfsi+0x26>
    402e:	9f 57       	subi	r25, 0x7F	; 127
    4030:	90 f0       	brcs	.+36     	; 0x4056 <__fixunssfsi+0x2c>
    4032:	b9 2f       	mov	r27, r25
    4034:	99 27       	eor	r25, r25
    4036:	b7 51       	subi	r27, 0x17	; 23
    4038:	a0 f0       	brcs	.+40     	; 0x4062 <__fixunssfsi+0x38>
    403a:	d1 f0       	breq	.+52     	; 0x4070 <__fixunssfsi+0x46>
    403c:	66 0f       	add	r22, r22
    403e:	77 1f       	adc	r23, r23
    4040:	88 1f       	adc	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	1a f0       	brmi	.+6      	; 0x404c <__fixunssfsi+0x22>
    4046:	ba 95       	dec	r27
    4048:	c9 f7       	brne	.-14     	; 0x403c <__fixunssfsi+0x12>
    404a:	12 c0       	rjmp	.+36     	; 0x4070 <__fixunssfsi+0x46>
    404c:	b1 30       	cpi	r27, 0x01	; 1
    404e:	81 f0       	breq	.+32     	; 0x4070 <__fixunssfsi+0x46>
    4050:	ed d0       	rcall	.+474    	; 0x422c <__fp_zero>
    4052:	b1 e0       	ldi	r27, 0x01	; 1
    4054:	08 95       	ret
    4056:	ea c0       	rjmp	.+468    	; 0x422c <__fp_zero>
    4058:	67 2f       	mov	r22, r23
    405a:	78 2f       	mov	r23, r24
    405c:	88 27       	eor	r24, r24
    405e:	b8 5f       	subi	r27, 0xF8	; 248
    4060:	39 f0       	breq	.+14     	; 0x4070 <__fixunssfsi+0x46>
    4062:	b9 3f       	cpi	r27, 0xF9	; 249
    4064:	cc f3       	brlt	.-14     	; 0x4058 <__fixunssfsi+0x2e>
    4066:	86 95       	lsr	r24
    4068:	77 95       	ror	r23
    406a:	67 95       	ror	r22
    406c:	b3 95       	inc	r27
    406e:	d9 f7       	brne	.-10     	; 0x4066 <__fixunssfsi+0x3c>
    4070:	3e f4       	brtc	.+14     	; 0x4080 <__fixunssfsi+0x56>
    4072:	90 95       	com	r25
    4074:	80 95       	com	r24
    4076:	70 95       	com	r23
    4078:	61 95       	neg	r22
    407a:	7f 4f       	sbci	r23, 0xFF	; 255
    407c:	8f 4f       	sbci	r24, 0xFF	; 255
    407e:	9f 4f       	sbci	r25, 0xFF	; 255
    4080:	08 95       	ret

00004082 <__floatunsisf>:
    4082:	e8 94       	clt
    4084:	09 c0       	rjmp	.+18     	; 0x4098 <__floatsisf+0x12>

00004086 <__floatsisf>:
    4086:	97 fb       	bst	r25, 7
    4088:	3e f4       	brtc	.+14     	; 0x4098 <__floatsisf+0x12>
    408a:	90 95       	com	r25
    408c:	80 95       	com	r24
    408e:	70 95       	com	r23
    4090:	61 95       	neg	r22
    4092:	7f 4f       	sbci	r23, 0xFF	; 255
    4094:	8f 4f       	sbci	r24, 0xFF	; 255
    4096:	9f 4f       	sbci	r25, 0xFF	; 255
    4098:	99 23       	and	r25, r25
    409a:	a9 f0       	breq	.+42     	; 0x40c6 <__floatsisf+0x40>
    409c:	f9 2f       	mov	r31, r25
    409e:	96 e9       	ldi	r25, 0x96	; 150
    40a0:	bb 27       	eor	r27, r27
    40a2:	93 95       	inc	r25
    40a4:	f6 95       	lsr	r31
    40a6:	87 95       	ror	r24
    40a8:	77 95       	ror	r23
    40aa:	67 95       	ror	r22
    40ac:	b7 95       	ror	r27
    40ae:	f1 11       	cpse	r31, r1
    40b0:	f8 cf       	rjmp	.-16     	; 0x40a2 <__floatsisf+0x1c>
    40b2:	fa f4       	brpl	.+62     	; 0x40f2 <__floatsisf+0x6c>
    40b4:	bb 0f       	add	r27, r27
    40b6:	11 f4       	brne	.+4      	; 0x40bc <__floatsisf+0x36>
    40b8:	60 ff       	sbrs	r22, 0
    40ba:	1b c0       	rjmp	.+54     	; 0x40f2 <__floatsisf+0x6c>
    40bc:	6f 5f       	subi	r22, 0xFF	; 255
    40be:	7f 4f       	sbci	r23, 0xFF	; 255
    40c0:	8f 4f       	sbci	r24, 0xFF	; 255
    40c2:	9f 4f       	sbci	r25, 0xFF	; 255
    40c4:	16 c0       	rjmp	.+44     	; 0x40f2 <__floatsisf+0x6c>
    40c6:	88 23       	and	r24, r24
    40c8:	11 f0       	breq	.+4      	; 0x40ce <__floatsisf+0x48>
    40ca:	96 e9       	ldi	r25, 0x96	; 150
    40cc:	11 c0       	rjmp	.+34     	; 0x40f0 <__floatsisf+0x6a>
    40ce:	77 23       	and	r23, r23
    40d0:	21 f0       	breq	.+8      	; 0x40da <__floatsisf+0x54>
    40d2:	9e e8       	ldi	r25, 0x8E	; 142
    40d4:	87 2f       	mov	r24, r23
    40d6:	76 2f       	mov	r23, r22
    40d8:	05 c0       	rjmp	.+10     	; 0x40e4 <__floatsisf+0x5e>
    40da:	66 23       	and	r22, r22
    40dc:	71 f0       	breq	.+28     	; 0x40fa <__floatsisf+0x74>
    40de:	96 e8       	ldi	r25, 0x86	; 134
    40e0:	86 2f       	mov	r24, r22
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	60 e0       	ldi	r22, 0x00	; 0
    40e6:	2a f0       	brmi	.+10     	; 0x40f2 <__floatsisf+0x6c>
    40e8:	9a 95       	dec	r25
    40ea:	66 0f       	add	r22, r22
    40ec:	77 1f       	adc	r23, r23
    40ee:	88 1f       	adc	r24, r24
    40f0:	da f7       	brpl	.-10     	; 0x40e8 <__floatsisf+0x62>
    40f2:	88 0f       	add	r24, r24
    40f4:	96 95       	lsr	r25
    40f6:	87 95       	ror	r24
    40f8:	97 f9       	bld	r25, 7
    40fa:	08 95       	ret

000040fc <__floatundisf>:
    40fc:	e8 94       	clt

000040fe <__fp_di2sf>:
    40fe:	f9 2f       	mov	r31, r25
    4100:	96 eb       	ldi	r25, 0xB6	; 182
    4102:	ff 23       	and	r31, r31
    4104:	81 f0       	breq	.+32     	; 0x4126 <__fp_di2sf+0x28>
    4106:	12 16       	cp	r1, r18
    4108:	13 06       	cpc	r1, r19
    410a:	14 06       	cpc	r1, r20
    410c:	44 0b       	sbc	r20, r20
    410e:	93 95       	inc	r25
    4110:	f6 95       	lsr	r31
    4112:	87 95       	ror	r24
    4114:	77 95       	ror	r23
    4116:	67 95       	ror	r22
    4118:	57 95       	ror	r21
    411a:	40 40       	sbci	r20, 0x00	; 0
    411c:	ff 23       	and	r31, r31
    411e:	b9 f7       	brne	.-18     	; 0x410e <__fp_di2sf+0x10>
    4120:	1b c0       	rjmp	.+54     	; 0x4158 <__fp_di2sf+0x5a>
    4122:	99 27       	eor	r25, r25
    4124:	08 95       	ret
    4126:	88 23       	and	r24, r24
    4128:	51 f4       	brne	.+20     	; 0x413e <__fp_di2sf+0x40>
    412a:	98 50       	subi	r25, 0x08	; 8
    412c:	d2 f7       	brpl	.-12     	; 0x4122 <__fp_di2sf+0x24>
    412e:	87 2b       	or	r24, r23
    4130:	76 2f       	mov	r23, r22
    4132:	65 2f       	mov	r22, r21
    4134:	54 2f       	mov	r21, r20
    4136:	43 2f       	mov	r20, r19
    4138:	32 2f       	mov	r19, r18
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	b1 f3       	breq	.-20     	; 0x412a <__fp_di2sf+0x2c>
    413e:	12 16       	cp	r1, r18
    4140:	13 06       	cpc	r1, r19
    4142:	14 06       	cpc	r1, r20
    4144:	44 0b       	sbc	r20, r20
    4146:	88 23       	and	r24, r24
    4148:	3a f0       	brmi	.+14     	; 0x4158 <__fp_di2sf+0x5a>
    414a:	9a 95       	dec	r25
    414c:	44 0f       	add	r20, r20
    414e:	55 1f       	adc	r21, r21
    4150:	66 1f       	adc	r22, r22
    4152:	77 1f       	adc	r23, r23
    4154:	88 1f       	adc	r24, r24
    4156:	ca f7       	brpl	.-14     	; 0x414a <__fp_di2sf+0x4c>
    4158:	55 23       	and	r21, r21
    415a:	4a f4       	brpl	.+18     	; 0x416e <__fp_di2sf+0x70>
    415c:	44 0f       	add	r20, r20
    415e:	55 1f       	adc	r21, r21
    4160:	11 f4       	brne	.+4      	; 0x4166 <__fp_di2sf+0x68>
    4162:	60 ff       	sbrs	r22, 0
    4164:	04 c0       	rjmp	.+8      	; 0x416e <__fp_di2sf+0x70>
    4166:	6f 5f       	subi	r22, 0xFF	; 255
    4168:	7f 4f       	sbci	r23, 0xFF	; 255
    416a:	8f 4f       	sbci	r24, 0xFF	; 255
    416c:	9f 4f       	sbci	r25, 0xFF	; 255
    416e:	88 0f       	add	r24, r24
    4170:	96 95       	lsr	r25
    4172:	87 95       	ror	r24
    4174:	97 f9       	bld	r25, 7
    4176:	08 95       	ret

00004178 <__fp_inf>:
    4178:	97 f9       	bld	r25, 7
    417a:	9f 67       	ori	r25, 0x7F	; 127
    417c:	80 e8       	ldi	r24, 0x80	; 128
    417e:	70 e0       	ldi	r23, 0x00	; 0
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	08 95       	ret

00004184 <__fp_nan>:
    4184:	9f ef       	ldi	r25, 0xFF	; 255
    4186:	80 ec       	ldi	r24, 0xC0	; 192
    4188:	08 95       	ret

0000418a <__fp_negdi>:
    418a:	90 95       	com	r25
    418c:	80 95       	com	r24
    418e:	70 95       	com	r23
    4190:	60 95       	com	r22
    4192:	50 95       	com	r21
    4194:	40 95       	com	r20
    4196:	30 95       	com	r19
    4198:	21 95       	neg	r18
    419a:	3f 4f       	sbci	r19, 0xFF	; 255
    419c:	4f 4f       	sbci	r20, 0xFF	; 255
    419e:	5f 4f       	sbci	r21, 0xFF	; 255
    41a0:	6f 4f       	sbci	r22, 0xFF	; 255
    41a2:	7f 4f       	sbci	r23, 0xFF	; 255
    41a4:	8f 4f       	sbci	r24, 0xFF	; 255
    41a6:	9f 4f       	sbci	r25, 0xFF	; 255
    41a8:	08 95       	ret

000041aa <__fp_pscA>:
    41aa:	00 24       	eor	r0, r0
    41ac:	0a 94       	dec	r0
    41ae:	16 16       	cp	r1, r22
    41b0:	17 06       	cpc	r1, r23
    41b2:	18 06       	cpc	r1, r24
    41b4:	09 06       	cpc	r0, r25
    41b6:	08 95       	ret

000041b8 <__fp_pscB>:
    41b8:	00 24       	eor	r0, r0
    41ba:	0a 94       	dec	r0
    41bc:	12 16       	cp	r1, r18
    41be:	13 06       	cpc	r1, r19
    41c0:	14 06       	cpc	r1, r20
    41c2:	05 06       	cpc	r0, r21
    41c4:	08 95       	ret

000041c6 <__fp_round>:
    41c6:	09 2e       	mov	r0, r25
    41c8:	03 94       	inc	r0
    41ca:	00 0c       	add	r0, r0
    41cc:	11 f4       	brne	.+4      	; 0x41d2 <__fp_round+0xc>
    41ce:	88 23       	and	r24, r24
    41d0:	52 f0       	brmi	.+20     	; 0x41e6 <__fp_round+0x20>
    41d2:	bb 0f       	add	r27, r27
    41d4:	40 f4       	brcc	.+16     	; 0x41e6 <__fp_round+0x20>
    41d6:	bf 2b       	or	r27, r31
    41d8:	11 f4       	brne	.+4      	; 0x41de <__fp_round+0x18>
    41da:	60 ff       	sbrs	r22, 0
    41dc:	04 c0       	rjmp	.+8      	; 0x41e6 <__fp_round+0x20>
    41de:	6f 5f       	subi	r22, 0xFF	; 255
    41e0:	7f 4f       	sbci	r23, 0xFF	; 255
    41e2:	8f 4f       	sbci	r24, 0xFF	; 255
    41e4:	9f 4f       	sbci	r25, 0xFF	; 255
    41e6:	08 95       	ret

000041e8 <__fp_split3>:
    41e8:	57 fd       	sbrc	r21, 7
    41ea:	90 58       	subi	r25, 0x80	; 128
    41ec:	44 0f       	add	r20, r20
    41ee:	55 1f       	adc	r21, r21
    41f0:	59 f0       	breq	.+22     	; 0x4208 <__fp_splitA+0x10>
    41f2:	5f 3f       	cpi	r21, 0xFF	; 255
    41f4:	71 f0       	breq	.+28     	; 0x4212 <__fp_splitA+0x1a>
    41f6:	47 95       	ror	r20

000041f8 <__fp_splitA>:
    41f8:	88 0f       	add	r24, r24
    41fa:	97 fb       	bst	r25, 7
    41fc:	99 1f       	adc	r25, r25
    41fe:	61 f0       	breq	.+24     	; 0x4218 <__fp_splitA+0x20>
    4200:	9f 3f       	cpi	r25, 0xFF	; 255
    4202:	79 f0       	breq	.+30     	; 0x4222 <__fp_splitA+0x2a>
    4204:	87 95       	ror	r24
    4206:	08 95       	ret
    4208:	12 16       	cp	r1, r18
    420a:	13 06       	cpc	r1, r19
    420c:	14 06       	cpc	r1, r20
    420e:	55 1f       	adc	r21, r21
    4210:	f2 cf       	rjmp	.-28     	; 0x41f6 <__fp_split3+0xe>
    4212:	46 95       	lsr	r20
    4214:	f1 df       	rcall	.-30     	; 0x41f8 <__fp_splitA>
    4216:	08 c0       	rjmp	.+16     	; 0x4228 <__fp_splitA+0x30>
    4218:	16 16       	cp	r1, r22
    421a:	17 06       	cpc	r1, r23
    421c:	18 06       	cpc	r1, r24
    421e:	99 1f       	adc	r25, r25
    4220:	f1 cf       	rjmp	.-30     	; 0x4204 <__fp_splitA+0xc>
    4222:	86 95       	lsr	r24
    4224:	71 05       	cpc	r23, r1
    4226:	61 05       	cpc	r22, r1
    4228:	08 94       	sec
    422a:	08 95       	ret

0000422c <__fp_zero>:
    422c:	e8 94       	clt

0000422e <__fp_szero>:
    422e:	bb 27       	eor	r27, r27
    4230:	66 27       	eor	r22, r22
    4232:	77 27       	eor	r23, r23
    4234:	cb 01       	movw	r24, r22
    4236:	97 f9       	bld	r25, 7
    4238:	08 95       	ret
    423a:	0e f0       	brts	.+2      	; 0x423e <__fp_szero+0x10>
    423c:	a6 c0       	rjmp	.+332    	; 0x438a <__fp_mpack>
    423e:	a2 cf       	rjmp	.-188    	; 0x4184 <__fp_nan>
    4240:	68 94       	set
    4242:	9a cf       	rjmp	.-204    	; 0x4178 <__fp_inf>

00004244 <log>:
    4244:	d9 df       	rcall	.-78     	; 0x41f8 <__fp_splitA>
    4246:	c8 f3       	brcs	.-14     	; 0x423a <__fp_szero+0xc>
    4248:	99 23       	and	r25, r25
    424a:	d1 f3       	breq	.-12     	; 0x4240 <__fp_szero+0x12>
    424c:	c6 f3       	brts	.-16     	; 0x423e <__fp_szero+0x10>
    424e:	df 93       	push	r29
    4250:	cf 93       	push	r28
    4252:	1f 93       	push	r17
    4254:	0f 93       	push	r16
    4256:	ff 92       	push	r15
    4258:	c9 2f       	mov	r28, r25
    425a:	dd 27       	eor	r29, r29
    425c:	88 23       	and	r24, r24
    425e:	2a f0       	brmi	.+10     	; 0x426a <log+0x26>
    4260:	21 97       	sbiw	r28, 0x01	; 1
    4262:	66 0f       	add	r22, r22
    4264:	77 1f       	adc	r23, r23
    4266:	88 1f       	adc	r24, r24
    4268:	da f7       	brpl	.-10     	; 0x4260 <log+0x1c>
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e8       	ldi	r20, 0x80	; 128
    4270:	5f eb       	ldi	r21, 0xBF	; 191
    4272:	9f e3       	ldi	r25, 0x3F	; 63
    4274:	88 39       	cpi	r24, 0x98	; 152
    4276:	20 f0       	brcs	.+8      	; 0x4280 <log+0x3c>
    4278:	80 3e       	cpi	r24, 0xE0	; 224
    427a:	30 f0       	brcs	.+12     	; 0x4288 <log+0x44>
    427c:	21 96       	adiw	r28, 0x01	; 1
    427e:	8f 77       	andi	r24, 0x7F	; 127
    4280:	ce dd       	rcall	.-1124   	; 0x3e1e <__addsf3>
    4282:	ec ef       	ldi	r30, 0xFC	; 252
    4284:	f1 e0       	ldi	r31, 0x01	; 1
    4286:	03 c0       	rjmp	.+6      	; 0x428e <log+0x4a>
    4288:	ca dd       	rcall	.-1132   	; 0x3e1e <__addsf3>
    428a:	e9 e2       	ldi	r30, 0x29	; 41
    428c:	f2 e0       	ldi	r31, 0x02	; 2
    428e:	8b d0       	rcall	.+278    	; 0x43a6 <__fp_powser>
    4290:	8b 01       	movw	r16, r22
    4292:	be 01       	movw	r22, r28
    4294:	ec 01       	movw	r28, r24
    4296:	fb 2e       	mov	r15, r27
    4298:	6f 57       	subi	r22, 0x7F	; 127
    429a:	71 09       	sbc	r23, r1
    429c:	75 95       	asr	r23
    429e:	77 1f       	adc	r23, r23
    42a0:	88 0b       	sbc	r24, r24
    42a2:	99 0b       	sbc	r25, r25
    42a4:	f0 de       	rcall	.-544    	; 0x4086 <__floatsisf>
    42a6:	28 e1       	ldi	r18, 0x18	; 24
    42a8:	32 e7       	ldi	r19, 0x72	; 114
    42aa:	41 e3       	ldi	r20, 0x31	; 49
    42ac:	5f e3       	ldi	r21, 0x3F	; 63
    42ae:	16 d0       	rcall	.+44     	; 0x42dc <__mulsf3x>
    42b0:	af 2d       	mov	r26, r15
    42b2:	98 01       	movw	r18, r16
    42b4:	ae 01       	movw	r20, r28
    42b6:	ff 90       	pop	r15
    42b8:	0f 91       	pop	r16
    42ba:	1f 91       	pop	r17
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	bf dd       	rcall	.-1154   	; 0x3e40 <__addsf3x>
    42c2:	81 cf       	rjmp	.-254    	; 0x41c6 <__fp_round>

000042c4 <__mulsf3>:
    42c4:	0b d0       	rcall	.+22     	; 0x42dc <__mulsf3x>
    42c6:	7f cf       	rjmp	.-258    	; 0x41c6 <__fp_round>
    42c8:	70 df       	rcall	.-288    	; 0x41aa <__fp_pscA>
    42ca:	28 f0       	brcs	.+10     	; 0x42d6 <__mulsf3+0x12>
    42cc:	75 df       	rcall	.-278    	; 0x41b8 <__fp_pscB>
    42ce:	18 f0       	brcs	.+6      	; 0x42d6 <__mulsf3+0x12>
    42d0:	95 23       	and	r25, r21
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <__mulsf3+0x12>
    42d4:	51 cf       	rjmp	.-350    	; 0x4178 <__fp_inf>
    42d6:	56 cf       	rjmp	.-340    	; 0x4184 <__fp_nan>
    42d8:	11 24       	eor	r1, r1
    42da:	a9 cf       	rjmp	.-174    	; 0x422e <__fp_szero>

000042dc <__mulsf3x>:
    42dc:	85 df       	rcall	.-246    	; 0x41e8 <__fp_split3>
    42de:	a0 f3       	brcs	.-24     	; 0x42c8 <__mulsf3+0x4>

000042e0 <__mulsf3_pse>:
    42e0:	95 9f       	mul	r25, r21
    42e2:	d1 f3       	breq	.-12     	; 0x42d8 <__mulsf3+0x14>
    42e4:	95 0f       	add	r25, r21
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	55 1f       	adc	r21, r21
    42ea:	62 9f       	mul	r22, r18
    42ec:	f0 01       	movw	r30, r0
    42ee:	72 9f       	mul	r23, r18
    42f0:	bb 27       	eor	r27, r27
    42f2:	f0 0d       	add	r31, r0
    42f4:	b1 1d       	adc	r27, r1
    42f6:	63 9f       	mul	r22, r19
    42f8:	aa 27       	eor	r26, r26
    42fa:	f0 0d       	add	r31, r0
    42fc:	b1 1d       	adc	r27, r1
    42fe:	aa 1f       	adc	r26, r26
    4300:	64 9f       	mul	r22, r20
    4302:	66 27       	eor	r22, r22
    4304:	b0 0d       	add	r27, r0
    4306:	a1 1d       	adc	r26, r1
    4308:	66 1f       	adc	r22, r22
    430a:	82 9f       	mul	r24, r18
    430c:	22 27       	eor	r18, r18
    430e:	b0 0d       	add	r27, r0
    4310:	a1 1d       	adc	r26, r1
    4312:	62 1f       	adc	r22, r18
    4314:	73 9f       	mul	r23, r19
    4316:	b0 0d       	add	r27, r0
    4318:	a1 1d       	adc	r26, r1
    431a:	62 1f       	adc	r22, r18
    431c:	83 9f       	mul	r24, r19
    431e:	a0 0d       	add	r26, r0
    4320:	61 1d       	adc	r22, r1
    4322:	22 1f       	adc	r18, r18
    4324:	74 9f       	mul	r23, r20
    4326:	33 27       	eor	r19, r19
    4328:	a0 0d       	add	r26, r0
    432a:	61 1d       	adc	r22, r1
    432c:	23 1f       	adc	r18, r19
    432e:	84 9f       	mul	r24, r20
    4330:	60 0d       	add	r22, r0
    4332:	21 1d       	adc	r18, r1
    4334:	82 2f       	mov	r24, r18
    4336:	76 2f       	mov	r23, r22
    4338:	6a 2f       	mov	r22, r26
    433a:	11 24       	eor	r1, r1
    433c:	9f 57       	subi	r25, 0x7F	; 127
    433e:	50 40       	sbci	r21, 0x00	; 0
    4340:	8a f0       	brmi	.+34     	; 0x4364 <__mulsf3_pse+0x84>
    4342:	e1 f0       	breq	.+56     	; 0x437c <__mulsf3_pse+0x9c>
    4344:	88 23       	and	r24, r24
    4346:	4a f0       	brmi	.+18     	; 0x435a <__mulsf3_pse+0x7a>
    4348:	ee 0f       	add	r30, r30
    434a:	ff 1f       	adc	r31, r31
    434c:	bb 1f       	adc	r27, r27
    434e:	66 1f       	adc	r22, r22
    4350:	77 1f       	adc	r23, r23
    4352:	88 1f       	adc	r24, r24
    4354:	91 50       	subi	r25, 0x01	; 1
    4356:	50 40       	sbci	r21, 0x00	; 0
    4358:	a9 f7       	brne	.-22     	; 0x4344 <__mulsf3_pse+0x64>
    435a:	9e 3f       	cpi	r25, 0xFE	; 254
    435c:	51 05       	cpc	r21, r1
    435e:	70 f0       	brcs	.+28     	; 0x437c <__mulsf3_pse+0x9c>
    4360:	0b cf       	rjmp	.-490    	; 0x4178 <__fp_inf>
    4362:	65 cf       	rjmp	.-310    	; 0x422e <__fp_szero>
    4364:	5f 3f       	cpi	r21, 0xFF	; 255
    4366:	ec f3       	brlt	.-6      	; 0x4362 <__mulsf3_pse+0x82>
    4368:	98 3e       	cpi	r25, 0xE8	; 232
    436a:	dc f3       	brlt	.-10     	; 0x4362 <__mulsf3_pse+0x82>
    436c:	86 95       	lsr	r24
    436e:	77 95       	ror	r23
    4370:	67 95       	ror	r22
    4372:	b7 95       	ror	r27
    4374:	f7 95       	ror	r31
    4376:	e7 95       	ror	r30
    4378:	9f 5f       	subi	r25, 0xFF	; 255
    437a:	c1 f7       	brne	.-16     	; 0x436c <__mulsf3_pse+0x8c>
    437c:	fe 2b       	or	r31, r30
    437e:	88 0f       	add	r24, r24
    4380:	91 1d       	adc	r25, r1
    4382:	96 95       	lsr	r25
    4384:	87 95       	ror	r24
    4386:	97 f9       	bld	r25, 7
    4388:	08 95       	ret

0000438a <__fp_mpack>:
    438a:	9f 3f       	cpi	r25, 0xFF	; 255
    438c:	31 f0       	breq	.+12     	; 0x439a <__fp_mpack_finite+0xc>

0000438e <__fp_mpack_finite>:
    438e:	91 50       	subi	r25, 0x01	; 1
    4390:	20 f4       	brcc	.+8      	; 0x439a <__fp_mpack_finite+0xc>
    4392:	87 95       	ror	r24
    4394:	77 95       	ror	r23
    4396:	67 95       	ror	r22
    4398:	b7 95       	ror	r27
    439a:	88 0f       	add	r24, r24
    439c:	91 1d       	adc	r25, r1
    439e:	96 95       	lsr	r25
    43a0:	87 95       	ror	r24
    43a2:	97 f9       	bld	r25, 7
    43a4:	08 95       	ret

000043a6 <__fp_powser>:
    43a6:	df 93       	push	r29
    43a8:	cf 93       	push	r28
    43aa:	1f 93       	push	r17
    43ac:	0f 93       	push	r16
    43ae:	ff 92       	push	r15
    43b0:	ef 92       	push	r14
    43b2:	df 92       	push	r13
    43b4:	7b 01       	movw	r14, r22
    43b6:	8c 01       	movw	r16, r24
    43b8:	68 94       	set
    43ba:	05 c0       	rjmp	.+10     	; 0x43c6 <__fp_powser+0x20>
    43bc:	da 2e       	mov	r13, r26
    43be:	ef 01       	movw	r28, r30
    43c0:	8d df       	rcall	.-230    	; 0x42dc <__mulsf3x>
    43c2:	fe 01       	movw	r30, r28
    43c4:	e8 94       	clt
    43c6:	a5 91       	lpm	r26, Z+
    43c8:	25 91       	lpm	r18, Z+
    43ca:	35 91       	lpm	r19, Z+
    43cc:	45 91       	lpm	r20, Z+
    43ce:	55 91       	lpm	r21, Z+
    43d0:	ae f3       	brts	.-22     	; 0x43bc <__fp_powser+0x16>
    43d2:	ef 01       	movw	r28, r30
    43d4:	35 dd       	rcall	.-1430   	; 0x3e40 <__addsf3x>
    43d6:	fe 01       	movw	r30, r28
    43d8:	97 01       	movw	r18, r14
    43da:	a8 01       	movw	r20, r16
    43dc:	da 94       	dec	r13
    43de:	79 f7       	brne	.-34     	; 0x43be <__fp_powser+0x18>
    43e0:	df 90       	pop	r13
    43e2:	ef 90       	pop	r14
    43e4:	ff 90       	pop	r15
    43e6:	0f 91       	pop	r16
    43e8:	1f 91       	pop	r17
    43ea:	cf 91       	pop	r28
    43ec:	df 91       	pop	r29
    43ee:	08 95       	ret

000043f0 <vfprintf>:
    43f0:	2f 92       	push	r2
    43f2:	3f 92       	push	r3
    43f4:	4f 92       	push	r4
    43f6:	5f 92       	push	r5
    43f8:	6f 92       	push	r6
    43fa:	7f 92       	push	r7
    43fc:	8f 92       	push	r8
    43fe:	9f 92       	push	r9
    4400:	af 92       	push	r10
    4402:	bf 92       	push	r11
    4404:	cf 92       	push	r12
    4406:	df 92       	push	r13
    4408:	ef 92       	push	r14
    440a:	ff 92       	push	r15
    440c:	0f 93       	push	r16
    440e:	1f 93       	push	r17
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	60 97       	sbiw	r28, 0x10	; 16
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	7c 01       	movw	r14, r24
    4420:	1b 01       	movw	r2, r22
    4422:	6a 01       	movw	r12, r20
    4424:	fc 01       	movw	r30, r24
    4426:	16 82       	std	Z+6, r1	; 0x06
    4428:	17 82       	std	Z+7, r1	; 0x07
    442a:	83 81       	ldd	r24, Z+3	; 0x03
    442c:	81 ff       	sbrs	r24, 1
    442e:	2a c3       	rjmp	.+1620   	; 0x4a84 <vfprintf+0x694>
    4430:	9e 01       	movw	r18, r28
    4432:	2f 5f       	subi	r18, 0xFF	; 255
    4434:	3f 4f       	sbci	r19, 0xFF	; 255
    4436:	39 01       	movw	r6, r18
    4438:	f7 01       	movw	r30, r14
    443a:	93 81       	ldd	r25, Z+3	; 0x03
    443c:	f1 01       	movw	r30, r2
    443e:	93 fd       	sbrc	r25, 3
    4440:	85 91       	lpm	r24, Z+
    4442:	93 ff       	sbrs	r25, 3
    4444:	81 91       	ld	r24, Z+
    4446:	1f 01       	movw	r2, r30
    4448:	88 23       	and	r24, r24
    444a:	09 f4       	brne	.+2      	; 0x444e <vfprintf+0x5e>
    444c:	17 c3       	rjmp	.+1582   	; 0x4a7c <vfprintf+0x68c>
    444e:	85 32       	cpi	r24, 0x25	; 37
    4450:	39 f4       	brne	.+14     	; 0x4460 <vfprintf+0x70>
    4452:	93 fd       	sbrc	r25, 3
    4454:	85 91       	lpm	r24, Z+
    4456:	93 ff       	sbrs	r25, 3
    4458:	81 91       	ld	r24, Z+
    445a:	1f 01       	movw	r2, r30
    445c:	85 32       	cpi	r24, 0x25	; 37
    445e:	31 f4       	brne	.+12     	; 0x446c <vfprintf+0x7c>
    4460:	b7 01       	movw	r22, r14
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	85 d5       	rcall	.+2826   	; 0x4f70 <fputc>
    4466:	56 01       	movw	r10, r12
    4468:	65 01       	movw	r12, r10
    446a:	e6 cf       	rjmp	.-52     	; 0x4438 <vfprintf+0x48>
    446c:	10 e0       	ldi	r17, 0x00	; 0
    446e:	51 2c       	mov	r5, r1
    4470:	91 2c       	mov	r9, r1
    4472:	ff e1       	ldi	r31, 0x1F	; 31
    4474:	f9 15       	cp	r31, r9
    4476:	d8 f0       	brcs	.+54     	; 0x44ae <vfprintf+0xbe>
    4478:	8b 32       	cpi	r24, 0x2B	; 43
    447a:	79 f0       	breq	.+30     	; 0x449a <vfprintf+0xaa>
    447c:	38 f4       	brcc	.+14     	; 0x448c <vfprintf+0x9c>
    447e:	80 32       	cpi	r24, 0x20	; 32
    4480:	79 f0       	breq	.+30     	; 0x44a0 <vfprintf+0xb0>
    4482:	83 32       	cpi	r24, 0x23	; 35
    4484:	a1 f4       	brne	.+40     	; 0x44ae <vfprintf+0xbe>
    4486:	f9 2d       	mov	r31, r9
    4488:	f0 61       	ori	r31, 0x10	; 16
    448a:	2e c0       	rjmp	.+92     	; 0x44e8 <vfprintf+0xf8>
    448c:	8d 32       	cpi	r24, 0x2D	; 45
    448e:	61 f0       	breq	.+24     	; 0x44a8 <vfprintf+0xb8>
    4490:	80 33       	cpi	r24, 0x30	; 48
    4492:	69 f4       	brne	.+26     	; 0x44ae <vfprintf+0xbe>
    4494:	29 2d       	mov	r18, r9
    4496:	21 60       	ori	r18, 0x01	; 1
    4498:	2d c0       	rjmp	.+90     	; 0x44f4 <vfprintf+0x104>
    449a:	39 2d       	mov	r19, r9
    449c:	32 60       	ori	r19, 0x02	; 2
    449e:	93 2e       	mov	r9, r19
    44a0:	89 2d       	mov	r24, r9
    44a2:	84 60       	ori	r24, 0x04	; 4
    44a4:	98 2e       	mov	r9, r24
    44a6:	2a c0       	rjmp	.+84     	; 0x44fc <vfprintf+0x10c>
    44a8:	e9 2d       	mov	r30, r9
    44aa:	e8 60       	ori	r30, 0x08	; 8
    44ac:	15 c0       	rjmp	.+42     	; 0x44d8 <vfprintf+0xe8>
    44ae:	97 fc       	sbrc	r9, 7
    44b0:	2d c0       	rjmp	.+90     	; 0x450c <vfprintf+0x11c>
    44b2:	20 ed       	ldi	r18, 0xD0	; 208
    44b4:	28 0f       	add	r18, r24
    44b6:	2a 30       	cpi	r18, 0x0A	; 10
    44b8:	88 f4       	brcc	.+34     	; 0x44dc <vfprintf+0xec>
    44ba:	96 fe       	sbrs	r9, 6
    44bc:	06 c0       	rjmp	.+12     	; 0x44ca <vfprintf+0xda>
    44be:	3a e0       	ldi	r19, 0x0A	; 10
    44c0:	13 9f       	mul	r17, r19
    44c2:	20 0d       	add	r18, r0
    44c4:	11 24       	eor	r1, r1
    44c6:	12 2f       	mov	r17, r18
    44c8:	19 c0       	rjmp	.+50     	; 0x44fc <vfprintf+0x10c>
    44ca:	8a e0       	ldi	r24, 0x0A	; 10
    44cc:	58 9e       	mul	r5, r24
    44ce:	20 0d       	add	r18, r0
    44d0:	11 24       	eor	r1, r1
    44d2:	52 2e       	mov	r5, r18
    44d4:	e9 2d       	mov	r30, r9
    44d6:	e0 62       	ori	r30, 0x20	; 32
    44d8:	9e 2e       	mov	r9, r30
    44da:	10 c0       	rjmp	.+32     	; 0x44fc <vfprintf+0x10c>
    44dc:	8e 32       	cpi	r24, 0x2E	; 46
    44de:	31 f4       	brne	.+12     	; 0x44ec <vfprintf+0xfc>
    44e0:	96 fc       	sbrc	r9, 6
    44e2:	cc c2       	rjmp	.+1432   	; 0x4a7c <vfprintf+0x68c>
    44e4:	f9 2d       	mov	r31, r9
    44e6:	f0 64       	ori	r31, 0x40	; 64
    44e8:	9f 2e       	mov	r9, r31
    44ea:	08 c0       	rjmp	.+16     	; 0x44fc <vfprintf+0x10c>
    44ec:	8c 36       	cpi	r24, 0x6C	; 108
    44ee:	21 f4       	brne	.+8      	; 0x44f8 <vfprintf+0x108>
    44f0:	29 2d       	mov	r18, r9
    44f2:	20 68       	ori	r18, 0x80	; 128
    44f4:	92 2e       	mov	r9, r18
    44f6:	02 c0       	rjmp	.+4      	; 0x44fc <vfprintf+0x10c>
    44f8:	88 36       	cpi	r24, 0x68	; 104
    44fa:	41 f4       	brne	.+16     	; 0x450c <vfprintf+0x11c>
    44fc:	f1 01       	movw	r30, r2
    44fe:	93 fd       	sbrc	r25, 3
    4500:	85 91       	lpm	r24, Z+
    4502:	93 ff       	sbrs	r25, 3
    4504:	81 91       	ld	r24, Z+
    4506:	1f 01       	movw	r2, r30
    4508:	81 11       	cpse	r24, r1
    450a:	b3 cf       	rjmp	.-154    	; 0x4472 <vfprintf+0x82>
    450c:	9b eb       	ldi	r25, 0xBB	; 187
    450e:	98 0f       	add	r25, r24
    4510:	93 30       	cpi	r25, 0x03	; 3
    4512:	20 f4       	brcc	.+8      	; 0x451c <vfprintf+0x12c>
    4514:	99 2d       	mov	r25, r9
    4516:	90 61       	ori	r25, 0x10	; 16
    4518:	80 5e       	subi	r24, 0xE0	; 224
    451a:	07 c0       	rjmp	.+14     	; 0x452a <vfprintf+0x13a>
    451c:	9b e9       	ldi	r25, 0x9B	; 155
    451e:	98 0f       	add	r25, r24
    4520:	93 30       	cpi	r25, 0x03	; 3
    4522:	08 f0       	brcs	.+2      	; 0x4526 <vfprintf+0x136>
    4524:	59 c1       	rjmp	.+690    	; 0x47d8 <vfprintf+0x3e8>
    4526:	99 2d       	mov	r25, r9
    4528:	9f 7e       	andi	r25, 0xEF	; 239
    452a:	96 ff       	sbrs	r25, 6
    452c:	16 e0       	ldi	r17, 0x06	; 6
    452e:	9f 73       	andi	r25, 0x3F	; 63
    4530:	99 2e       	mov	r9, r25
    4532:	85 36       	cpi	r24, 0x65	; 101
    4534:	19 f4       	brne	.+6      	; 0x453c <vfprintf+0x14c>
    4536:	90 64       	ori	r25, 0x40	; 64
    4538:	99 2e       	mov	r9, r25
    453a:	08 c0       	rjmp	.+16     	; 0x454c <vfprintf+0x15c>
    453c:	86 36       	cpi	r24, 0x66	; 102
    453e:	21 f4       	brne	.+8      	; 0x4548 <vfprintf+0x158>
    4540:	39 2f       	mov	r19, r25
    4542:	30 68       	ori	r19, 0x80	; 128
    4544:	93 2e       	mov	r9, r19
    4546:	02 c0       	rjmp	.+4      	; 0x454c <vfprintf+0x15c>
    4548:	11 11       	cpse	r17, r1
    454a:	11 50       	subi	r17, 0x01	; 1
    454c:	97 fe       	sbrs	r9, 7
    454e:	07 c0       	rjmp	.+14     	; 0x455e <vfprintf+0x16e>
    4550:	1c 33       	cpi	r17, 0x3C	; 60
    4552:	50 f4       	brcc	.+20     	; 0x4568 <vfprintf+0x178>
    4554:	44 24       	eor	r4, r4
    4556:	43 94       	inc	r4
    4558:	41 0e       	add	r4, r17
    455a:	27 e0       	ldi	r18, 0x07	; 7
    455c:	0b c0       	rjmp	.+22     	; 0x4574 <vfprintf+0x184>
    455e:	18 30       	cpi	r17, 0x08	; 8
    4560:	38 f0       	brcs	.+14     	; 0x4570 <vfprintf+0x180>
    4562:	27 e0       	ldi	r18, 0x07	; 7
    4564:	17 e0       	ldi	r17, 0x07	; 7
    4566:	05 c0       	rjmp	.+10     	; 0x4572 <vfprintf+0x182>
    4568:	27 e0       	ldi	r18, 0x07	; 7
    456a:	9c e3       	ldi	r25, 0x3C	; 60
    456c:	49 2e       	mov	r4, r25
    456e:	02 c0       	rjmp	.+4      	; 0x4574 <vfprintf+0x184>
    4570:	21 2f       	mov	r18, r17
    4572:	41 2c       	mov	r4, r1
    4574:	56 01       	movw	r10, r12
    4576:	84 e0       	ldi	r24, 0x04	; 4
    4578:	a8 0e       	add	r10, r24
    457a:	b1 1c       	adc	r11, r1
    457c:	f6 01       	movw	r30, r12
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	82 81       	ldd	r24, Z+2	; 0x02
    4584:	93 81       	ldd	r25, Z+3	; 0x03
    4586:	04 2d       	mov	r16, r4
    4588:	a3 01       	movw	r20, r6
    458a:	b1 d3       	rcall	.+1890   	; 0x4cee <__ftoa_engine>
    458c:	6c 01       	movw	r12, r24
    458e:	f9 81       	ldd	r31, Y+1	; 0x01
    4590:	fc 87       	std	Y+12, r31	; 0x0c
    4592:	f0 ff       	sbrs	r31, 0
    4594:	02 c0       	rjmp	.+4      	; 0x459a <vfprintf+0x1aa>
    4596:	f3 ff       	sbrs	r31, 3
    4598:	06 c0       	rjmp	.+12     	; 0x45a6 <vfprintf+0x1b6>
    459a:	91 fc       	sbrc	r9, 1
    459c:	06 c0       	rjmp	.+12     	; 0x45aa <vfprintf+0x1ba>
    459e:	92 fe       	sbrs	r9, 2
    45a0:	06 c0       	rjmp	.+12     	; 0x45ae <vfprintf+0x1be>
    45a2:	00 e2       	ldi	r16, 0x20	; 32
    45a4:	05 c0       	rjmp	.+10     	; 0x45b0 <vfprintf+0x1c0>
    45a6:	0d e2       	ldi	r16, 0x2D	; 45
    45a8:	03 c0       	rjmp	.+6      	; 0x45b0 <vfprintf+0x1c0>
    45aa:	0b e2       	ldi	r16, 0x2B	; 43
    45ac:	01 c0       	rjmp	.+2      	; 0x45b0 <vfprintf+0x1c0>
    45ae:	00 e0       	ldi	r16, 0x00	; 0
    45b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    45b2:	8c 70       	andi	r24, 0x0C	; 12
    45b4:	19 f0       	breq	.+6      	; 0x45bc <vfprintf+0x1cc>
    45b6:	01 11       	cpse	r16, r1
    45b8:	43 c2       	rjmp	.+1158   	; 0x4a40 <vfprintf+0x650>
    45ba:	80 c2       	rjmp	.+1280   	; 0x4abc <vfprintf+0x6cc>
    45bc:	97 fe       	sbrs	r9, 7
    45be:	10 c0       	rjmp	.+32     	; 0x45e0 <vfprintf+0x1f0>
    45c0:	4c 0c       	add	r4, r12
    45c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    45c4:	f4 ff       	sbrs	r31, 4
    45c6:	04 c0       	rjmp	.+8      	; 0x45d0 <vfprintf+0x1e0>
    45c8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ca:	81 33       	cpi	r24, 0x31	; 49
    45cc:	09 f4       	brne	.+2      	; 0x45d0 <vfprintf+0x1e0>
    45ce:	4a 94       	dec	r4
    45d0:	14 14       	cp	r1, r4
    45d2:	74 f5       	brge	.+92     	; 0x4630 <vfprintf+0x240>
    45d4:	28 e0       	ldi	r18, 0x08	; 8
    45d6:	24 15       	cp	r18, r4
    45d8:	78 f5       	brcc	.+94     	; 0x4638 <vfprintf+0x248>
    45da:	88 e0       	ldi	r24, 0x08	; 8
    45dc:	48 2e       	mov	r4, r24
    45de:	2c c0       	rjmp	.+88     	; 0x4638 <vfprintf+0x248>
    45e0:	96 fc       	sbrc	r9, 6
    45e2:	2a c0       	rjmp	.+84     	; 0x4638 <vfprintf+0x248>
    45e4:	81 2f       	mov	r24, r17
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	8c 15       	cp	r24, r12
    45ea:	9d 05       	cpc	r25, r13
    45ec:	9c f0       	brlt	.+38     	; 0x4614 <vfprintf+0x224>
    45ee:	3c ef       	ldi	r19, 0xFC	; 252
    45f0:	c3 16       	cp	r12, r19
    45f2:	3f ef       	ldi	r19, 0xFF	; 255
    45f4:	d3 06       	cpc	r13, r19
    45f6:	74 f0       	brlt	.+28     	; 0x4614 <vfprintf+0x224>
    45f8:	89 2d       	mov	r24, r9
    45fa:	80 68       	ori	r24, 0x80	; 128
    45fc:	98 2e       	mov	r9, r24
    45fe:	0a c0       	rjmp	.+20     	; 0x4614 <vfprintf+0x224>
    4600:	e2 e0       	ldi	r30, 0x02	; 2
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	ec 0f       	add	r30, r28
    4606:	fd 1f       	adc	r31, r29
    4608:	e1 0f       	add	r30, r17
    460a:	f1 1d       	adc	r31, r1
    460c:	80 81       	ld	r24, Z
    460e:	80 33       	cpi	r24, 0x30	; 48
    4610:	19 f4       	brne	.+6      	; 0x4618 <vfprintf+0x228>
    4612:	11 50       	subi	r17, 0x01	; 1
    4614:	11 11       	cpse	r17, r1
    4616:	f4 cf       	rjmp	.-24     	; 0x4600 <vfprintf+0x210>
    4618:	97 fe       	sbrs	r9, 7
    461a:	0e c0       	rjmp	.+28     	; 0x4638 <vfprintf+0x248>
    461c:	44 24       	eor	r4, r4
    461e:	43 94       	inc	r4
    4620:	41 0e       	add	r4, r17
    4622:	81 2f       	mov	r24, r17
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	c8 16       	cp	r12, r24
    4628:	d9 06       	cpc	r13, r25
    462a:	2c f4       	brge	.+10     	; 0x4636 <vfprintf+0x246>
    462c:	1c 19       	sub	r17, r12
    462e:	04 c0       	rjmp	.+8      	; 0x4638 <vfprintf+0x248>
    4630:	44 24       	eor	r4, r4
    4632:	43 94       	inc	r4
    4634:	01 c0       	rjmp	.+2      	; 0x4638 <vfprintf+0x248>
    4636:	10 e0       	ldi	r17, 0x00	; 0
    4638:	97 fe       	sbrs	r9, 7
    463a:	06 c0       	rjmp	.+12     	; 0x4648 <vfprintf+0x258>
    463c:	1c 14       	cp	r1, r12
    463e:	1d 04       	cpc	r1, r13
    4640:	34 f4       	brge	.+12     	; 0x464e <vfprintf+0x25e>
    4642:	c6 01       	movw	r24, r12
    4644:	01 96       	adiw	r24, 0x01	; 1
    4646:	05 c0       	rjmp	.+10     	; 0x4652 <vfprintf+0x262>
    4648:	85 e0       	ldi	r24, 0x05	; 5
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <vfprintf+0x262>
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	01 11       	cpse	r16, r1
    4654:	01 96       	adiw	r24, 0x01	; 1
    4656:	11 23       	and	r17, r17
    4658:	31 f0       	breq	.+12     	; 0x4666 <vfprintf+0x276>
    465a:	21 2f       	mov	r18, r17
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	2f 5f       	subi	r18, 0xFF	; 255
    4660:	3f 4f       	sbci	r19, 0xFF	; 255
    4662:	82 0f       	add	r24, r18
    4664:	93 1f       	adc	r25, r19
    4666:	25 2d       	mov	r18, r5
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	82 17       	cp	r24, r18
    466c:	93 07       	cpc	r25, r19
    466e:	14 f4       	brge	.+4      	; 0x4674 <vfprintf+0x284>
    4670:	58 1a       	sub	r5, r24
    4672:	01 c0       	rjmp	.+2      	; 0x4676 <vfprintf+0x286>
    4674:	51 2c       	mov	r5, r1
    4676:	89 2d       	mov	r24, r9
    4678:	89 70       	andi	r24, 0x09	; 9
    467a:	41 f4       	brne	.+16     	; 0x468c <vfprintf+0x29c>
    467c:	55 20       	and	r5, r5
    467e:	31 f0       	breq	.+12     	; 0x468c <vfprintf+0x29c>
    4680:	b7 01       	movw	r22, r14
    4682:	80 e2       	ldi	r24, 0x20	; 32
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	74 d4       	rcall	.+2280   	; 0x4f70 <fputc>
    4688:	5a 94       	dec	r5
    468a:	f8 cf       	rjmp	.-16     	; 0x467c <vfprintf+0x28c>
    468c:	00 23       	and	r16, r16
    468e:	21 f0       	breq	.+8      	; 0x4698 <vfprintf+0x2a8>
    4690:	b7 01       	movw	r22, r14
    4692:	80 2f       	mov	r24, r16
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	6c d4       	rcall	.+2264   	; 0x4f70 <fputc>
    4698:	93 fc       	sbrc	r9, 3
    469a:	08 c0       	rjmp	.+16     	; 0x46ac <vfprintf+0x2bc>
    469c:	55 20       	and	r5, r5
    469e:	31 f0       	breq	.+12     	; 0x46ac <vfprintf+0x2bc>
    46a0:	b7 01       	movw	r22, r14
    46a2:	80 e3       	ldi	r24, 0x30	; 48
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	64 d4       	rcall	.+2248   	; 0x4f70 <fputc>
    46a8:	5a 94       	dec	r5
    46aa:	f8 cf       	rjmp	.-16     	; 0x469c <vfprintf+0x2ac>
    46ac:	97 fe       	sbrs	r9, 7
    46ae:	4a c0       	rjmp	.+148    	; 0x4744 <vfprintf+0x354>
    46b0:	46 01       	movw	r8, r12
    46b2:	d7 fe       	sbrs	r13, 7
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <vfprintf+0x2ca>
    46b6:	81 2c       	mov	r8, r1
    46b8:	91 2c       	mov	r9, r1
    46ba:	c6 01       	movw	r24, r12
    46bc:	88 19       	sub	r24, r8
    46be:	99 09       	sbc	r25, r9
    46c0:	f3 01       	movw	r30, r6
    46c2:	e8 0f       	add	r30, r24
    46c4:	f9 1f       	adc	r31, r25
    46c6:	ed 87       	std	Y+13, r30	; 0x0d
    46c8:	fe 87       	std	Y+14, r31	; 0x0e
    46ca:	96 01       	movw	r18, r12
    46cc:	24 19       	sub	r18, r4
    46ce:	31 09       	sbc	r19, r1
    46d0:	2f 87       	std	Y+15, r18	; 0x0f
    46d2:	38 8b       	std	Y+16, r19	; 0x10
    46d4:	01 2f       	mov	r16, r17
    46d6:	10 e0       	ldi	r17, 0x00	; 0
    46d8:	11 95       	neg	r17
    46da:	01 95       	neg	r16
    46dc:	11 09       	sbc	r17, r1
    46de:	3f ef       	ldi	r19, 0xFF	; 255
    46e0:	83 16       	cp	r8, r19
    46e2:	93 06       	cpc	r9, r19
    46e4:	21 f4       	brne	.+8      	; 0x46ee <vfprintf+0x2fe>
    46e6:	b7 01       	movw	r22, r14
    46e8:	8e e2       	ldi	r24, 0x2E	; 46
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	41 d4       	rcall	.+2178   	; 0x4f70 <fputc>
    46ee:	c8 14       	cp	r12, r8
    46f0:	d9 04       	cpc	r13, r9
    46f2:	4c f0       	brlt	.+18     	; 0x4706 <vfprintf+0x316>
    46f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    46f6:	98 89       	ldd	r25, Y+16	; 0x10
    46f8:	88 15       	cp	r24, r8
    46fa:	99 05       	cpc	r25, r9
    46fc:	24 f4       	brge	.+8      	; 0x4706 <vfprintf+0x316>
    46fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    4700:	fe 85       	ldd	r31, Y+14	; 0x0e
    4702:	81 81       	ldd	r24, Z+1	; 0x01
    4704:	01 c0       	rjmp	.+2      	; 0x4708 <vfprintf+0x318>
    4706:	80 e3       	ldi	r24, 0x30	; 48
    4708:	f1 e0       	ldi	r31, 0x01	; 1
    470a:	8f 1a       	sub	r8, r31
    470c:	91 08       	sbc	r9, r1
    470e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4710:	3e 85       	ldd	r19, Y+14	; 0x0e
    4712:	2f 5f       	subi	r18, 0xFF	; 255
    4714:	3f 4f       	sbci	r19, 0xFF	; 255
    4716:	2d 87       	std	Y+13, r18	; 0x0d
    4718:	3e 87       	std	Y+14, r19	; 0x0e
    471a:	80 16       	cp	r8, r16
    471c:	91 06       	cpc	r9, r17
    471e:	24 f0       	brlt	.+8      	; 0x4728 <vfprintf+0x338>
    4720:	b7 01       	movw	r22, r14
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	25 d4       	rcall	.+2122   	; 0x4f70 <fputc>
    4726:	db cf       	rjmp	.-74     	; 0x46de <vfprintf+0x2ee>
    4728:	c8 14       	cp	r12, r8
    472a:	d9 04       	cpc	r13, r9
    472c:	41 f4       	brne	.+16     	; 0x473e <vfprintf+0x34e>
    472e:	9a 81       	ldd	r25, Y+2	; 0x02
    4730:	96 33       	cpi	r25, 0x36	; 54
    4732:	20 f4       	brcc	.+8      	; 0x473c <vfprintf+0x34c>
    4734:	95 33       	cpi	r25, 0x35	; 53
    4736:	19 f4       	brne	.+6      	; 0x473e <vfprintf+0x34e>
    4738:	3c 85       	ldd	r19, Y+12	; 0x0c
    473a:	34 ff       	sbrs	r19, 4
    473c:	81 e3       	ldi	r24, 0x31	; 49
    473e:	b7 01       	movw	r22, r14
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	48 c0       	rjmp	.+144    	; 0x47d4 <vfprintf+0x3e4>
    4744:	8a 81       	ldd	r24, Y+2	; 0x02
    4746:	81 33       	cpi	r24, 0x31	; 49
    4748:	19 f0       	breq	.+6      	; 0x4750 <vfprintf+0x360>
    474a:	9c 85       	ldd	r25, Y+12	; 0x0c
    474c:	9f 7e       	andi	r25, 0xEF	; 239
    474e:	9c 87       	std	Y+12, r25	; 0x0c
    4750:	b7 01       	movw	r22, r14
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	0d d4       	rcall	.+2074   	; 0x4f70 <fputc>
    4756:	11 11       	cpse	r17, r1
    4758:	05 c0       	rjmp	.+10     	; 0x4764 <vfprintf+0x374>
    475a:	94 fc       	sbrc	r9, 4
    475c:	16 c0       	rjmp	.+44     	; 0x478a <vfprintf+0x39a>
    475e:	85 e6       	ldi	r24, 0x65	; 101
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	15 c0       	rjmp	.+42     	; 0x478e <vfprintf+0x39e>
    4764:	b7 01       	movw	r22, r14
    4766:	8e e2       	ldi	r24, 0x2E	; 46
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	02 d4       	rcall	.+2052   	; 0x4f70 <fputc>
    476c:	1e 5f       	subi	r17, 0xFE	; 254
    476e:	82 e0       	ldi	r24, 0x02	; 2
    4770:	01 e0       	ldi	r16, 0x01	; 1
    4772:	08 0f       	add	r16, r24
    4774:	f3 01       	movw	r30, r6
    4776:	e8 0f       	add	r30, r24
    4778:	f1 1d       	adc	r31, r1
    477a:	80 81       	ld	r24, Z
    477c:	b7 01       	movw	r22, r14
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	f7 d3       	rcall	.+2030   	; 0x4f70 <fputc>
    4782:	80 2f       	mov	r24, r16
    4784:	01 13       	cpse	r16, r17
    4786:	f4 cf       	rjmp	.-24     	; 0x4770 <vfprintf+0x380>
    4788:	e8 cf       	rjmp	.-48     	; 0x475a <vfprintf+0x36a>
    478a:	85 e4       	ldi	r24, 0x45	; 69
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	b7 01       	movw	r22, r14
    4790:	ef d3       	rcall	.+2014   	; 0x4f70 <fputc>
    4792:	d7 fc       	sbrc	r13, 7
    4794:	06 c0       	rjmp	.+12     	; 0x47a2 <vfprintf+0x3b2>
    4796:	c1 14       	cp	r12, r1
    4798:	d1 04       	cpc	r13, r1
    479a:	41 f4       	brne	.+16     	; 0x47ac <vfprintf+0x3bc>
    479c:	ec 85       	ldd	r30, Y+12	; 0x0c
    479e:	e4 ff       	sbrs	r30, 4
    47a0:	05 c0       	rjmp	.+10     	; 0x47ac <vfprintf+0x3bc>
    47a2:	d1 94       	neg	r13
    47a4:	c1 94       	neg	r12
    47a6:	d1 08       	sbc	r13, r1
    47a8:	8d e2       	ldi	r24, 0x2D	; 45
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <vfprintf+0x3be>
    47ac:	8b e2       	ldi	r24, 0x2B	; 43
    47ae:	b7 01       	movw	r22, r14
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	de d3       	rcall	.+1980   	; 0x4f70 <fputc>
    47b4:	80 e3       	ldi	r24, 0x30	; 48
    47b6:	2a e0       	ldi	r18, 0x0A	; 10
    47b8:	c2 16       	cp	r12, r18
    47ba:	d1 04       	cpc	r13, r1
    47bc:	2c f0       	brlt	.+10     	; 0x47c8 <vfprintf+0x3d8>
    47be:	8f 5f       	subi	r24, 0xFF	; 255
    47c0:	fa e0       	ldi	r31, 0x0A	; 10
    47c2:	cf 1a       	sub	r12, r31
    47c4:	d1 08       	sbc	r13, r1
    47c6:	f7 cf       	rjmp	.-18     	; 0x47b6 <vfprintf+0x3c6>
    47c8:	b7 01       	movw	r22, r14
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	d1 d3       	rcall	.+1954   	; 0x4f70 <fputc>
    47ce:	b7 01       	movw	r22, r14
    47d0:	c6 01       	movw	r24, r12
    47d2:	c0 96       	adiw	r24, 0x30	; 48
    47d4:	cd d3       	rcall	.+1946   	; 0x4f70 <fputc>
    47d6:	49 c1       	rjmp	.+658    	; 0x4a6a <vfprintf+0x67a>
    47d8:	83 36       	cpi	r24, 0x63	; 99
    47da:	31 f0       	breq	.+12     	; 0x47e8 <vfprintf+0x3f8>
    47dc:	83 37       	cpi	r24, 0x73	; 115
    47de:	79 f0       	breq	.+30     	; 0x47fe <vfprintf+0x40e>
    47e0:	83 35       	cpi	r24, 0x53	; 83
    47e2:	09 f0       	breq	.+2      	; 0x47e6 <vfprintf+0x3f6>
    47e4:	52 c0       	rjmp	.+164    	; 0x488a <vfprintf+0x49a>
    47e6:	1f c0       	rjmp	.+62     	; 0x4826 <vfprintf+0x436>
    47e8:	56 01       	movw	r10, r12
    47ea:	32 e0       	ldi	r19, 0x02	; 2
    47ec:	a3 0e       	add	r10, r19
    47ee:	b1 1c       	adc	r11, r1
    47f0:	f6 01       	movw	r30, r12
    47f2:	80 81       	ld	r24, Z
    47f4:	89 83       	std	Y+1, r24	; 0x01
    47f6:	01 e0       	ldi	r16, 0x01	; 1
    47f8:	10 e0       	ldi	r17, 0x00	; 0
    47fa:	63 01       	movw	r12, r6
    47fc:	11 c0       	rjmp	.+34     	; 0x4820 <vfprintf+0x430>
    47fe:	56 01       	movw	r10, r12
    4800:	f2 e0       	ldi	r31, 0x02	; 2
    4802:	af 0e       	add	r10, r31
    4804:	b1 1c       	adc	r11, r1
    4806:	f6 01       	movw	r30, r12
    4808:	c0 80       	ld	r12, Z
    480a:	d1 80       	ldd	r13, Z+1	; 0x01
    480c:	96 fe       	sbrs	r9, 6
    480e:	03 c0       	rjmp	.+6      	; 0x4816 <vfprintf+0x426>
    4810:	61 2f       	mov	r22, r17
    4812:	70 e0       	ldi	r23, 0x00	; 0
    4814:	02 c0       	rjmp	.+4      	; 0x481a <vfprintf+0x42a>
    4816:	6f ef       	ldi	r22, 0xFF	; 255
    4818:	7f ef       	ldi	r23, 0xFF	; 255
    481a:	c6 01       	movw	r24, r12
    481c:	54 d3       	rcall	.+1704   	; 0x4ec6 <strnlen>
    481e:	8c 01       	movw	r16, r24
    4820:	f9 2d       	mov	r31, r9
    4822:	ff 77       	andi	r31, 0x7F	; 127
    4824:	13 c0       	rjmp	.+38     	; 0x484c <vfprintf+0x45c>
    4826:	56 01       	movw	r10, r12
    4828:	22 e0       	ldi	r18, 0x02	; 2
    482a:	a2 0e       	add	r10, r18
    482c:	b1 1c       	adc	r11, r1
    482e:	f6 01       	movw	r30, r12
    4830:	c0 80       	ld	r12, Z
    4832:	d1 80       	ldd	r13, Z+1	; 0x01
    4834:	96 fe       	sbrs	r9, 6
    4836:	03 c0       	rjmp	.+6      	; 0x483e <vfprintf+0x44e>
    4838:	61 2f       	mov	r22, r17
    483a:	70 e0       	ldi	r23, 0x00	; 0
    483c:	02 c0       	rjmp	.+4      	; 0x4842 <vfprintf+0x452>
    483e:	6f ef       	ldi	r22, 0xFF	; 255
    4840:	7f ef       	ldi	r23, 0xFF	; 255
    4842:	c6 01       	movw	r24, r12
    4844:	2c d3       	rcall	.+1624   	; 0x4e9e <strnlen_P>
    4846:	8c 01       	movw	r16, r24
    4848:	f9 2d       	mov	r31, r9
    484a:	f0 68       	ori	r31, 0x80	; 128
    484c:	9f 2e       	mov	r9, r31
    484e:	f3 fd       	sbrc	r31, 3
    4850:	18 c0       	rjmp	.+48     	; 0x4882 <vfprintf+0x492>
    4852:	85 2d       	mov	r24, r5
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	08 17       	cp	r16, r24
    4858:	19 07       	cpc	r17, r25
    485a:	98 f4       	brcc	.+38     	; 0x4882 <vfprintf+0x492>
    485c:	b7 01       	movw	r22, r14
    485e:	80 e2       	ldi	r24, 0x20	; 32
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	86 d3       	rcall	.+1804   	; 0x4f70 <fputc>
    4864:	5a 94       	dec	r5
    4866:	f5 cf       	rjmp	.-22     	; 0x4852 <vfprintf+0x462>
    4868:	f6 01       	movw	r30, r12
    486a:	97 fc       	sbrc	r9, 7
    486c:	85 91       	lpm	r24, Z+
    486e:	97 fe       	sbrs	r9, 7
    4870:	81 91       	ld	r24, Z+
    4872:	6f 01       	movw	r12, r30
    4874:	b7 01       	movw	r22, r14
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	7b d3       	rcall	.+1782   	; 0x4f70 <fputc>
    487a:	51 10       	cpse	r5, r1
    487c:	5a 94       	dec	r5
    487e:	01 50       	subi	r16, 0x01	; 1
    4880:	11 09       	sbc	r17, r1
    4882:	01 15       	cp	r16, r1
    4884:	11 05       	cpc	r17, r1
    4886:	81 f7       	brne	.-32     	; 0x4868 <vfprintf+0x478>
    4888:	f0 c0       	rjmp	.+480    	; 0x4a6a <vfprintf+0x67a>
    488a:	84 36       	cpi	r24, 0x64	; 100
    488c:	11 f0       	breq	.+4      	; 0x4892 <vfprintf+0x4a2>
    488e:	89 36       	cpi	r24, 0x69	; 105
    4890:	59 f5       	brne	.+86     	; 0x48e8 <vfprintf+0x4f8>
    4892:	56 01       	movw	r10, r12
    4894:	97 fe       	sbrs	r9, 7
    4896:	09 c0       	rjmp	.+18     	; 0x48aa <vfprintf+0x4ba>
    4898:	24 e0       	ldi	r18, 0x04	; 4
    489a:	a2 0e       	add	r10, r18
    489c:	b1 1c       	adc	r11, r1
    489e:	f6 01       	movw	r30, r12
    48a0:	60 81       	ld	r22, Z
    48a2:	71 81       	ldd	r23, Z+1	; 0x01
    48a4:	82 81       	ldd	r24, Z+2	; 0x02
    48a6:	93 81       	ldd	r25, Z+3	; 0x03
    48a8:	0a c0       	rjmp	.+20     	; 0x48be <vfprintf+0x4ce>
    48aa:	f2 e0       	ldi	r31, 0x02	; 2
    48ac:	af 0e       	add	r10, r31
    48ae:	b1 1c       	adc	r11, r1
    48b0:	f6 01       	movw	r30, r12
    48b2:	60 81       	ld	r22, Z
    48b4:	71 81       	ldd	r23, Z+1	; 0x01
    48b6:	07 2e       	mov	r0, r23
    48b8:	00 0c       	add	r0, r0
    48ba:	88 0b       	sbc	r24, r24
    48bc:	99 0b       	sbc	r25, r25
    48be:	f9 2d       	mov	r31, r9
    48c0:	ff 76       	andi	r31, 0x6F	; 111
    48c2:	9f 2e       	mov	r9, r31
    48c4:	97 ff       	sbrs	r25, 7
    48c6:	09 c0       	rjmp	.+18     	; 0x48da <vfprintf+0x4ea>
    48c8:	90 95       	com	r25
    48ca:	80 95       	com	r24
    48cc:	70 95       	com	r23
    48ce:	61 95       	neg	r22
    48d0:	7f 4f       	sbci	r23, 0xFF	; 255
    48d2:	8f 4f       	sbci	r24, 0xFF	; 255
    48d4:	9f 4f       	sbci	r25, 0xFF	; 255
    48d6:	f0 68       	ori	r31, 0x80	; 128
    48d8:	9f 2e       	mov	r9, r31
    48da:	2a e0       	ldi	r18, 0x0A	; 10
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	a3 01       	movw	r20, r6
    48e0:	ee d3       	rcall	.+2012   	; 0x50be <__ultoa_invert>
    48e2:	c8 2e       	mov	r12, r24
    48e4:	c6 18       	sub	r12, r6
    48e6:	3e c0       	rjmp	.+124    	; 0x4964 <vfprintf+0x574>
    48e8:	09 2d       	mov	r16, r9
    48ea:	85 37       	cpi	r24, 0x75	; 117
    48ec:	21 f4       	brne	.+8      	; 0x48f6 <vfprintf+0x506>
    48ee:	0f 7e       	andi	r16, 0xEF	; 239
    48f0:	2a e0       	ldi	r18, 0x0A	; 10
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	1d c0       	rjmp	.+58     	; 0x4930 <vfprintf+0x540>
    48f6:	09 7f       	andi	r16, 0xF9	; 249
    48f8:	8f 36       	cpi	r24, 0x6F	; 111
    48fa:	91 f0       	breq	.+36     	; 0x4920 <vfprintf+0x530>
    48fc:	18 f4       	brcc	.+6      	; 0x4904 <vfprintf+0x514>
    48fe:	88 35       	cpi	r24, 0x58	; 88
    4900:	59 f0       	breq	.+22     	; 0x4918 <vfprintf+0x528>
    4902:	bc c0       	rjmp	.+376    	; 0x4a7c <vfprintf+0x68c>
    4904:	80 37       	cpi	r24, 0x70	; 112
    4906:	19 f0       	breq	.+6      	; 0x490e <vfprintf+0x51e>
    4908:	88 37       	cpi	r24, 0x78	; 120
    490a:	11 f0       	breq	.+4      	; 0x4910 <vfprintf+0x520>
    490c:	b7 c0       	rjmp	.+366    	; 0x4a7c <vfprintf+0x68c>
    490e:	00 61       	ori	r16, 0x10	; 16
    4910:	04 ff       	sbrs	r16, 4
    4912:	09 c0       	rjmp	.+18     	; 0x4926 <vfprintf+0x536>
    4914:	04 60       	ori	r16, 0x04	; 4
    4916:	07 c0       	rjmp	.+14     	; 0x4926 <vfprintf+0x536>
    4918:	94 fe       	sbrs	r9, 4
    491a:	08 c0       	rjmp	.+16     	; 0x492c <vfprintf+0x53c>
    491c:	06 60       	ori	r16, 0x06	; 6
    491e:	06 c0       	rjmp	.+12     	; 0x492c <vfprintf+0x53c>
    4920:	28 e0       	ldi	r18, 0x08	; 8
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	05 c0       	rjmp	.+10     	; 0x4930 <vfprintf+0x540>
    4926:	20 e1       	ldi	r18, 0x10	; 16
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	02 c0       	rjmp	.+4      	; 0x4930 <vfprintf+0x540>
    492c:	20 e1       	ldi	r18, 0x10	; 16
    492e:	32 e0       	ldi	r19, 0x02	; 2
    4930:	56 01       	movw	r10, r12
    4932:	07 ff       	sbrs	r16, 7
    4934:	09 c0       	rjmp	.+18     	; 0x4948 <vfprintf+0x558>
    4936:	84 e0       	ldi	r24, 0x04	; 4
    4938:	a8 0e       	add	r10, r24
    493a:	b1 1c       	adc	r11, r1
    493c:	f6 01       	movw	r30, r12
    493e:	60 81       	ld	r22, Z
    4940:	71 81       	ldd	r23, Z+1	; 0x01
    4942:	82 81       	ldd	r24, Z+2	; 0x02
    4944:	93 81       	ldd	r25, Z+3	; 0x03
    4946:	08 c0       	rjmp	.+16     	; 0x4958 <vfprintf+0x568>
    4948:	f2 e0       	ldi	r31, 0x02	; 2
    494a:	af 0e       	add	r10, r31
    494c:	b1 1c       	adc	r11, r1
    494e:	f6 01       	movw	r30, r12
    4950:	60 81       	ld	r22, Z
    4952:	71 81       	ldd	r23, Z+1	; 0x01
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	a3 01       	movw	r20, r6
    495a:	b1 d3       	rcall	.+1890   	; 0x50be <__ultoa_invert>
    495c:	c8 2e       	mov	r12, r24
    495e:	c6 18       	sub	r12, r6
    4960:	0f 77       	andi	r16, 0x7F	; 127
    4962:	90 2e       	mov	r9, r16
    4964:	96 fe       	sbrs	r9, 6
    4966:	0b c0       	rjmp	.+22     	; 0x497e <vfprintf+0x58e>
    4968:	09 2d       	mov	r16, r9
    496a:	0e 7f       	andi	r16, 0xFE	; 254
    496c:	c1 16       	cp	r12, r17
    496e:	50 f4       	brcc	.+20     	; 0x4984 <vfprintf+0x594>
    4970:	94 fe       	sbrs	r9, 4
    4972:	0a c0       	rjmp	.+20     	; 0x4988 <vfprintf+0x598>
    4974:	92 fc       	sbrc	r9, 2
    4976:	08 c0       	rjmp	.+16     	; 0x4988 <vfprintf+0x598>
    4978:	09 2d       	mov	r16, r9
    497a:	0e 7e       	andi	r16, 0xEE	; 238
    497c:	05 c0       	rjmp	.+10     	; 0x4988 <vfprintf+0x598>
    497e:	dc 2c       	mov	r13, r12
    4980:	09 2d       	mov	r16, r9
    4982:	03 c0       	rjmp	.+6      	; 0x498a <vfprintf+0x59a>
    4984:	dc 2c       	mov	r13, r12
    4986:	01 c0       	rjmp	.+2      	; 0x498a <vfprintf+0x59a>
    4988:	d1 2e       	mov	r13, r17
    498a:	04 ff       	sbrs	r16, 4
    498c:	0d c0       	rjmp	.+26     	; 0x49a8 <vfprintf+0x5b8>
    498e:	fe 01       	movw	r30, r28
    4990:	ec 0d       	add	r30, r12
    4992:	f1 1d       	adc	r31, r1
    4994:	80 81       	ld	r24, Z
    4996:	80 33       	cpi	r24, 0x30	; 48
    4998:	11 f4       	brne	.+4      	; 0x499e <vfprintf+0x5ae>
    499a:	09 7e       	andi	r16, 0xE9	; 233
    499c:	09 c0       	rjmp	.+18     	; 0x49b0 <vfprintf+0x5c0>
    499e:	02 ff       	sbrs	r16, 2
    49a0:	06 c0       	rjmp	.+12     	; 0x49ae <vfprintf+0x5be>
    49a2:	d3 94       	inc	r13
    49a4:	d3 94       	inc	r13
    49a6:	04 c0       	rjmp	.+8      	; 0x49b0 <vfprintf+0x5c0>
    49a8:	80 2f       	mov	r24, r16
    49aa:	86 78       	andi	r24, 0x86	; 134
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <vfprintf+0x5c0>
    49ae:	d3 94       	inc	r13
    49b0:	03 fd       	sbrc	r16, 3
    49b2:	10 c0       	rjmp	.+32     	; 0x49d4 <vfprintf+0x5e4>
    49b4:	00 ff       	sbrs	r16, 0
    49b6:	06 c0       	rjmp	.+12     	; 0x49c4 <vfprintf+0x5d4>
    49b8:	1c 2d       	mov	r17, r12
    49ba:	d5 14       	cp	r13, r5
    49bc:	78 f4       	brcc	.+30     	; 0x49dc <vfprintf+0x5ec>
    49be:	15 0d       	add	r17, r5
    49c0:	1d 19       	sub	r17, r13
    49c2:	0c c0       	rjmp	.+24     	; 0x49dc <vfprintf+0x5ec>
    49c4:	d5 14       	cp	r13, r5
    49c6:	50 f4       	brcc	.+20     	; 0x49dc <vfprintf+0x5ec>
    49c8:	b7 01       	movw	r22, r14
    49ca:	80 e2       	ldi	r24, 0x20	; 32
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	d0 d2       	rcall	.+1440   	; 0x4f70 <fputc>
    49d0:	d3 94       	inc	r13
    49d2:	f8 cf       	rjmp	.-16     	; 0x49c4 <vfprintf+0x5d4>
    49d4:	d5 14       	cp	r13, r5
    49d6:	10 f4       	brcc	.+4      	; 0x49dc <vfprintf+0x5ec>
    49d8:	5d 18       	sub	r5, r13
    49da:	01 c0       	rjmp	.+2      	; 0x49de <vfprintf+0x5ee>
    49dc:	51 2c       	mov	r5, r1
    49de:	04 ff       	sbrs	r16, 4
    49e0:	0f c0       	rjmp	.+30     	; 0x4a00 <vfprintf+0x610>
    49e2:	b7 01       	movw	r22, r14
    49e4:	80 e3       	ldi	r24, 0x30	; 48
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	c3 d2       	rcall	.+1414   	; 0x4f70 <fputc>
    49ea:	02 ff       	sbrs	r16, 2
    49ec:	16 c0       	rjmp	.+44     	; 0x4a1a <vfprintf+0x62a>
    49ee:	01 fd       	sbrc	r16, 1
    49f0:	03 c0       	rjmp	.+6      	; 0x49f8 <vfprintf+0x608>
    49f2:	88 e7       	ldi	r24, 0x78	; 120
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	02 c0       	rjmp	.+4      	; 0x49fc <vfprintf+0x60c>
    49f8:	88 e5       	ldi	r24, 0x58	; 88
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	b7 01       	movw	r22, r14
    49fe:	0c c0       	rjmp	.+24     	; 0x4a18 <vfprintf+0x628>
    4a00:	80 2f       	mov	r24, r16
    4a02:	86 78       	andi	r24, 0x86	; 134
    4a04:	51 f0       	breq	.+20     	; 0x4a1a <vfprintf+0x62a>
    4a06:	01 ff       	sbrs	r16, 1
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <vfprintf+0x61e>
    4a0a:	8b e2       	ldi	r24, 0x2B	; 43
    4a0c:	01 c0       	rjmp	.+2      	; 0x4a10 <vfprintf+0x620>
    4a0e:	80 e2       	ldi	r24, 0x20	; 32
    4a10:	07 fd       	sbrc	r16, 7
    4a12:	8d e2       	ldi	r24, 0x2D	; 45
    4a14:	b7 01       	movw	r22, r14
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	ab d2       	rcall	.+1366   	; 0x4f70 <fputc>
    4a1a:	c1 16       	cp	r12, r17
    4a1c:	30 f4       	brcc	.+12     	; 0x4a2a <vfprintf+0x63a>
    4a1e:	b7 01       	movw	r22, r14
    4a20:	80 e3       	ldi	r24, 0x30	; 48
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	a5 d2       	rcall	.+1354   	; 0x4f70 <fputc>
    4a26:	11 50       	subi	r17, 0x01	; 1
    4a28:	f8 cf       	rjmp	.-16     	; 0x4a1a <vfprintf+0x62a>
    4a2a:	ca 94       	dec	r12
    4a2c:	f3 01       	movw	r30, r6
    4a2e:	ec 0d       	add	r30, r12
    4a30:	f1 1d       	adc	r31, r1
    4a32:	80 81       	ld	r24, Z
    4a34:	b7 01       	movw	r22, r14
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	9b d2       	rcall	.+1334   	; 0x4f70 <fputc>
    4a3a:	c1 10       	cpse	r12, r1
    4a3c:	f6 cf       	rjmp	.-20     	; 0x4a2a <vfprintf+0x63a>
    4a3e:	15 c0       	rjmp	.+42     	; 0x4a6a <vfprintf+0x67a>
    4a40:	f4 e0       	ldi	r31, 0x04	; 4
    4a42:	f5 15       	cp	r31, r5
    4a44:	50 f5       	brcc	.+84     	; 0x4a9a <vfprintf+0x6aa>
    4a46:	84 e0       	ldi	r24, 0x04	; 4
    4a48:	58 1a       	sub	r5, r24
    4a4a:	93 fe       	sbrs	r9, 3
    4a4c:	1e c0       	rjmp	.+60     	; 0x4a8a <vfprintf+0x69a>
    4a4e:	01 11       	cpse	r16, r1
    4a50:	25 c0       	rjmp	.+74     	; 0x4a9c <vfprintf+0x6ac>
    4a52:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a54:	23 ff       	sbrs	r18, 3
    4a56:	27 c0       	rjmp	.+78     	; 0x4aa6 <vfprintf+0x6b6>
    4a58:	06 e5       	ldi	r16, 0x56	; 86
    4a5a:	12 e0       	ldi	r17, 0x02	; 2
    4a5c:	39 2d       	mov	r19, r9
    4a5e:	30 71       	andi	r19, 0x10	; 16
    4a60:	93 2e       	mov	r9, r19
    4a62:	f8 01       	movw	r30, r16
    4a64:	84 91       	lpm	r24, Z
    4a66:	81 11       	cpse	r24, r1
    4a68:	21 c0       	rjmp	.+66     	; 0x4aac <vfprintf+0x6bc>
    4a6a:	55 20       	and	r5, r5
    4a6c:	09 f4       	brne	.+2      	; 0x4a70 <vfprintf+0x680>
    4a6e:	fc cc       	rjmp	.-1544   	; 0x4468 <vfprintf+0x78>
    4a70:	b7 01       	movw	r22, r14
    4a72:	80 e2       	ldi	r24, 0x20	; 32
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	7c d2       	rcall	.+1272   	; 0x4f70 <fputc>
    4a78:	5a 94       	dec	r5
    4a7a:	f7 cf       	rjmp	.-18     	; 0x4a6a <vfprintf+0x67a>
    4a7c:	f7 01       	movw	r30, r14
    4a7e:	86 81       	ldd	r24, Z+6	; 0x06
    4a80:	97 81       	ldd	r25, Z+7	; 0x07
    4a82:	23 c0       	rjmp	.+70     	; 0x4aca <vfprintf+0x6da>
    4a84:	8f ef       	ldi	r24, 0xFF	; 255
    4a86:	9f ef       	ldi	r25, 0xFF	; 255
    4a88:	20 c0       	rjmp	.+64     	; 0x4aca <vfprintf+0x6da>
    4a8a:	b7 01       	movw	r22, r14
    4a8c:	80 e2       	ldi	r24, 0x20	; 32
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	6f d2       	rcall	.+1246   	; 0x4f70 <fputc>
    4a92:	5a 94       	dec	r5
    4a94:	51 10       	cpse	r5, r1
    4a96:	f9 cf       	rjmp	.-14     	; 0x4a8a <vfprintf+0x69a>
    4a98:	da cf       	rjmp	.-76     	; 0x4a4e <vfprintf+0x65e>
    4a9a:	51 2c       	mov	r5, r1
    4a9c:	b7 01       	movw	r22, r14
    4a9e:	80 2f       	mov	r24, r16
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	66 d2       	rcall	.+1228   	; 0x4f70 <fputc>
    4aa4:	d6 cf       	rjmp	.-84     	; 0x4a52 <vfprintf+0x662>
    4aa6:	0a e5       	ldi	r16, 0x5A	; 90
    4aa8:	12 e0       	ldi	r17, 0x02	; 2
    4aaa:	d8 cf       	rjmp	.-80     	; 0x4a5c <vfprintf+0x66c>
    4aac:	91 10       	cpse	r9, r1
    4aae:	80 52       	subi	r24, 0x20	; 32
    4ab0:	b7 01       	movw	r22, r14
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	5d d2       	rcall	.+1210   	; 0x4f70 <fputc>
    4ab6:	0f 5f       	subi	r16, 0xFF	; 255
    4ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aba:	d3 cf       	rjmp	.-90     	; 0x4a62 <vfprintf+0x672>
    4abc:	23 e0       	ldi	r18, 0x03	; 3
    4abe:	25 15       	cp	r18, r5
    4ac0:	10 f4       	brcc	.+4      	; 0x4ac6 <vfprintf+0x6d6>
    4ac2:	83 e0       	ldi	r24, 0x03	; 3
    4ac4:	c1 cf       	rjmp	.-126    	; 0x4a48 <vfprintf+0x658>
    4ac6:	51 2c       	mov	r5, r1
    4ac8:	c4 cf       	rjmp	.-120    	; 0x4a52 <vfprintf+0x662>
    4aca:	60 96       	adiw	r28, 0x10	; 16
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	1f 91       	pop	r17
    4ad6:	0f 91       	pop	r16
    4ad8:	ff 90       	pop	r15
    4ada:	ef 90       	pop	r14
    4adc:	df 90       	pop	r13
    4ade:	cf 90       	pop	r12
    4ae0:	bf 90       	pop	r11
    4ae2:	af 90       	pop	r10
    4ae4:	9f 90       	pop	r9
    4ae6:	8f 90       	pop	r8
    4ae8:	7f 90       	pop	r7
    4aea:	6f 90       	pop	r6
    4aec:	5f 90       	pop	r5
    4aee:	4f 90       	pop	r4
    4af0:	3f 90       	pop	r3
    4af2:	2f 90       	pop	r2
    4af4:	08 95       	ret

00004af6 <__udivmodsi4>:
    4af6:	a1 e2       	ldi	r26, 0x21	; 33
    4af8:	1a 2e       	mov	r1, r26
    4afa:	aa 1b       	sub	r26, r26
    4afc:	bb 1b       	sub	r27, r27
    4afe:	fd 01       	movw	r30, r26
    4b00:	0d c0       	rjmp	.+26     	; 0x4b1c <__udivmodsi4_ep>

00004b02 <__udivmodsi4_loop>:
    4b02:	aa 1f       	adc	r26, r26
    4b04:	bb 1f       	adc	r27, r27
    4b06:	ee 1f       	adc	r30, r30
    4b08:	ff 1f       	adc	r31, r31
    4b0a:	a2 17       	cp	r26, r18
    4b0c:	b3 07       	cpc	r27, r19
    4b0e:	e4 07       	cpc	r30, r20
    4b10:	f5 07       	cpc	r31, r21
    4b12:	20 f0       	brcs	.+8      	; 0x4b1c <__udivmodsi4_ep>
    4b14:	a2 1b       	sub	r26, r18
    4b16:	b3 0b       	sbc	r27, r19
    4b18:	e4 0b       	sbc	r30, r20
    4b1a:	f5 0b       	sbc	r31, r21

00004b1c <__udivmodsi4_ep>:
    4b1c:	66 1f       	adc	r22, r22
    4b1e:	77 1f       	adc	r23, r23
    4b20:	88 1f       	adc	r24, r24
    4b22:	99 1f       	adc	r25, r25
    4b24:	1a 94       	dec	r1
    4b26:	69 f7       	brne	.-38     	; 0x4b02 <__udivmodsi4_loop>
    4b28:	60 95       	com	r22
    4b2a:	70 95       	com	r23
    4b2c:	80 95       	com	r24
    4b2e:	90 95       	com	r25
    4b30:	9b 01       	movw	r18, r22
    4b32:	ac 01       	movw	r20, r24
    4b34:	bd 01       	movw	r22, r26
    4b36:	cf 01       	movw	r24, r30
    4b38:	08 95       	ret

00004b3a <__divmodsi4>:
    4b3a:	05 2e       	mov	r0, r21
    4b3c:	97 fb       	bst	r25, 7
    4b3e:	16 f4       	brtc	.+4      	; 0x4b44 <__divmodsi4+0xa>
    4b40:	00 94       	com	r0
    4b42:	0f d0       	rcall	.+30     	; 0x4b62 <__negsi2>
    4b44:	57 fd       	sbrc	r21, 7
    4b46:	05 d0       	rcall	.+10     	; 0x4b52 <__divmodsi4_neg2>
    4b48:	d6 df       	rcall	.-84     	; 0x4af6 <__udivmodsi4>
    4b4a:	07 fc       	sbrc	r0, 7
    4b4c:	02 d0       	rcall	.+4      	; 0x4b52 <__divmodsi4_neg2>
    4b4e:	46 f4       	brtc	.+16     	; 0x4b60 <__divmodsi4_exit>
    4b50:	08 c0       	rjmp	.+16     	; 0x4b62 <__negsi2>

00004b52 <__divmodsi4_neg2>:
    4b52:	50 95       	com	r21
    4b54:	40 95       	com	r20
    4b56:	30 95       	com	r19
    4b58:	21 95       	neg	r18
    4b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    4b5e:	5f 4f       	sbci	r21, 0xFF	; 255

00004b60 <__divmodsi4_exit>:
    4b60:	08 95       	ret

00004b62 <__negsi2>:
    4b62:	90 95       	com	r25
    4b64:	80 95       	com	r24
    4b66:	70 95       	com	r23
    4b68:	61 95       	neg	r22
    4b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b70:	08 95       	ret

00004b72 <__umulhisi3>:
    4b72:	a2 9f       	mul	r26, r18
    4b74:	b0 01       	movw	r22, r0
    4b76:	b3 9f       	mul	r27, r19
    4b78:	c0 01       	movw	r24, r0
    4b7a:	a3 9f       	mul	r26, r19
    4b7c:	70 0d       	add	r23, r0
    4b7e:	81 1d       	adc	r24, r1
    4b80:	11 24       	eor	r1, r1
    4b82:	91 1d       	adc	r25, r1
    4b84:	b2 9f       	mul	r27, r18
    4b86:	70 0d       	add	r23, r0
    4b88:	81 1d       	adc	r24, r1
    4b8a:	11 24       	eor	r1, r1
    4b8c:	91 1d       	adc	r25, r1
    4b8e:	08 95       	ret

00004b90 <__muldi3>:
    4b90:	df 93       	push	r29
    4b92:	cf 93       	push	r28
    4b94:	1f 93       	push	r17
    4b96:	0f 93       	push	r16
    4b98:	9a 9d       	mul	r25, r10
    4b9a:	f0 2d       	mov	r31, r0
    4b9c:	21 9f       	mul	r18, r17
    4b9e:	f0 0d       	add	r31, r0
    4ba0:	8b 9d       	mul	r24, r11
    4ba2:	f0 0d       	add	r31, r0
    4ba4:	8a 9d       	mul	r24, r10
    4ba6:	e0 2d       	mov	r30, r0
    4ba8:	f1 0d       	add	r31, r1
    4baa:	03 9f       	mul	r16, r19
    4bac:	f0 0d       	add	r31, r0
    4bae:	02 9f       	mul	r16, r18
    4bb0:	e0 0d       	add	r30, r0
    4bb2:	f1 1d       	adc	r31, r1
    4bb4:	4e 9d       	mul	r20, r14
    4bb6:	e0 0d       	add	r30, r0
    4bb8:	f1 1d       	adc	r31, r1
    4bba:	5e 9d       	mul	r21, r14
    4bbc:	f0 0d       	add	r31, r0
    4bbe:	4f 9d       	mul	r20, r15
    4bc0:	f0 0d       	add	r31, r0
    4bc2:	7f 93       	push	r23
    4bc4:	6f 93       	push	r22
    4bc6:	bf 92       	push	r11
    4bc8:	af 92       	push	r10
    4bca:	5f 93       	push	r21
    4bcc:	4f 93       	push	r20
    4bce:	d5 01       	movw	r26, r10
    4bd0:	d0 df       	rcall	.-96     	; 0x4b72 <__umulhisi3>
    4bd2:	8b 01       	movw	r16, r22
    4bd4:	ac 01       	movw	r20, r24
    4bd6:	d7 01       	movw	r26, r14
    4bd8:	cc df       	rcall	.-104    	; 0x4b72 <__umulhisi3>
    4bda:	eb 01       	movw	r28, r22
    4bdc:	e8 0f       	add	r30, r24
    4bde:	f9 1f       	adc	r31, r25
    4be0:	d6 01       	movw	r26, r12
    4be2:	1f d0       	rcall	.+62     	; 0x4c22 <__muldi3_6>
    4be4:	2f 91       	pop	r18
    4be6:	3f 91       	pop	r19
    4be8:	d6 01       	movw	r26, r12
    4bea:	c3 df       	rcall	.-122    	; 0x4b72 <__umulhisi3>
    4bec:	c6 0f       	add	r28, r22
    4bee:	d7 1f       	adc	r29, r23
    4bf0:	e8 1f       	adc	r30, r24
    4bf2:	f9 1f       	adc	r31, r25
    4bf4:	af 91       	pop	r26
    4bf6:	bf 91       	pop	r27
    4bf8:	14 d0       	rcall	.+40     	; 0x4c22 <__muldi3_6>
    4bfa:	2f 91       	pop	r18
    4bfc:	3f 91       	pop	r19
    4bfe:	b9 df       	rcall	.-142    	; 0x4b72 <__umulhisi3>
    4c00:	c6 0f       	add	r28, r22
    4c02:	d7 1f       	adc	r29, r23
    4c04:	e8 1f       	adc	r30, r24
    4c06:	f9 1f       	adc	r31, r25
    4c08:	d6 01       	movw	r26, r12
    4c0a:	b3 df       	rcall	.-154    	; 0x4b72 <__umulhisi3>
    4c0c:	e6 0f       	add	r30, r22
    4c0e:	f7 1f       	adc	r31, r23
    4c10:	98 01       	movw	r18, r16
    4c12:	be 01       	movw	r22, r28
    4c14:	cf 01       	movw	r24, r30
    4c16:	11 24       	eor	r1, r1
    4c18:	0f 91       	pop	r16
    4c1a:	1f 91       	pop	r17
    4c1c:	cf 91       	pop	r28
    4c1e:	df 91       	pop	r29
    4c20:	08 95       	ret

00004c22 <__muldi3_6>:
    4c22:	a7 df       	rcall	.-178    	; 0x4b72 <__umulhisi3>
    4c24:	46 0f       	add	r20, r22
    4c26:	57 1f       	adc	r21, r23
    4c28:	c8 1f       	adc	r28, r24
    4c2a:	d9 1f       	adc	r29, r25
    4c2c:	08 f4       	brcc	.+2      	; 0x4c30 <__muldi3_6+0xe>
    4c2e:	31 96       	adiw	r30, 0x01	; 1
    4c30:	08 95       	ret

00004c32 <__umoddi3>:
    4c32:	68 94       	set
    4c34:	01 c0       	rjmp	.+2      	; 0x4c38 <__udivdi3_umoddi3>

00004c36 <__udivdi3>:
    4c36:	e8 94       	clt

00004c38 <__udivdi3_umoddi3>:
    4c38:	8f 92       	push	r8
    4c3a:	9f 92       	push	r9
    4c3c:	cf 93       	push	r28
    4c3e:	df 93       	push	r29
    4c40:	05 d0       	rcall	.+10     	; 0x4c4c <__udivmod64>
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	9f 90       	pop	r9
    4c48:	8f 90       	pop	r8
    4c4a:	08 95       	ret

00004c4c <__udivmod64>:
    4c4c:	88 24       	eor	r8, r8
    4c4e:	99 24       	eor	r9, r9
    4c50:	f4 01       	movw	r30, r8
    4c52:	e4 01       	movw	r28, r8
    4c54:	b0 e4       	ldi	r27, 0x40	; 64
    4c56:	9f 93       	push	r25
    4c58:	aa 27       	eor	r26, r26
    4c5a:	9a 15       	cp	r25, r10
    4c5c:	8b 04       	cpc	r8, r11
    4c5e:	9c 04       	cpc	r9, r12
    4c60:	ed 05       	cpc	r30, r13
    4c62:	fe 05       	cpc	r31, r14
    4c64:	cf 05       	cpc	r28, r15
    4c66:	d0 07       	cpc	r29, r16
    4c68:	a1 07       	cpc	r26, r17
    4c6a:	98 f4       	brcc	.+38     	; 0x4c92 <__udivmod64+0x46>
    4c6c:	ad 2f       	mov	r26, r29
    4c6e:	dc 2f       	mov	r29, r28
    4c70:	cf 2f       	mov	r28, r31
    4c72:	fe 2f       	mov	r31, r30
    4c74:	e9 2d       	mov	r30, r9
    4c76:	98 2c       	mov	r9, r8
    4c78:	89 2e       	mov	r8, r25
    4c7a:	98 2f       	mov	r25, r24
    4c7c:	87 2f       	mov	r24, r23
    4c7e:	76 2f       	mov	r23, r22
    4c80:	65 2f       	mov	r22, r21
    4c82:	54 2f       	mov	r21, r20
    4c84:	43 2f       	mov	r20, r19
    4c86:	32 2f       	mov	r19, r18
    4c88:	22 27       	eor	r18, r18
    4c8a:	b8 50       	subi	r27, 0x08	; 8
    4c8c:	31 f7       	brne	.-52     	; 0x4c5a <__udivmod64+0xe>
    4c8e:	bf 91       	pop	r27
    4c90:	27 c0       	rjmp	.+78     	; 0x4ce0 <__udivmod64+0x94>
    4c92:	1b 2e       	mov	r1, r27
    4c94:	bf 91       	pop	r27
    4c96:	bb 27       	eor	r27, r27
    4c98:	22 0f       	add	r18, r18
    4c9a:	33 1f       	adc	r19, r19
    4c9c:	44 1f       	adc	r20, r20
    4c9e:	55 1f       	adc	r21, r21
    4ca0:	66 1f       	adc	r22, r22
    4ca2:	77 1f       	adc	r23, r23
    4ca4:	88 1f       	adc	r24, r24
    4ca6:	99 1f       	adc	r25, r25
    4ca8:	88 1c       	adc	r8, r8
    4caa:	99 1c       	adc	r9, r9
    4cac:	ee 1f       	adc	r30, r30
    4cae:	ff 1f       	adc	r31, r31
    4cb0:	cc 1f       	adc	r28, r28
    4cb2:	dd 1f       	adc	r29, r29
    4cb4:	aa 1f       	adc	r26, r26
    4cb6:	bb 1f       	adc	r27, r27
    4cb8:	8a 14       	cp	r8, r10
    4cba:	9b 04       	cpc	r9, r11
    4cbc:	ec 05       	cpc	r30, r12
    4cbe:	fd 05       	cpc	r31, r13
    4cc0:	ce 05       	cpc	r28, r14
    4cc2:	df 05       	cpc	r29, r15
    4cc4:	a0 07       	cpc	r26, r16
    4cc6:	b1 07       	cpc	r27, r17
    4cc8:	48 f0       	brcs	.+18     	; 0x4cdc <__udivmod64+0x90>
    4cca:	8a 18       	sub	r8, r10
    4ccc:	9b 08       	sbc	r9, r11
    4cce:	ec 09       	sbc	r30, r12
    4cd0:	fd 09       	sbc	r31, r13
    4cd2:	ce 09       	sbc	r28, r14
    4cd4:	df 09       	sbc	r29, r15
    4cd6:	a0 0b       	sbc	r26, r16
    4cd8:	b1 0b       	sbc	r27, r17
    4cda:	21 60       	ori	r18, 0x01	; 1
    4cdc:	1a 94       	dec	r1
    4cde:	e1 f6       	brne	.-72     	; 0x4c98 <__udivmod64+0x4c>
    4ce0:	2e f4       	brtc	.+10     	; 0x4cec <__udivmod64+0xa0>
    4ce2:	94 01       	movw	r18, r8
    4ce4:	af 01       	movw	r20, r30
    4ce6:	be 01       	movw	r22, r28
    4ce8:	cd 01       	movw	r24, r26
    4cea:	00 0c       	add	r0, r0
    4cec:	08 95       	ret

00004cee <__ftoa_engine>:
    4cee:	28 30       	cpi	r18, 0x08	; 8
    4cf0:	08 f0       	brcs	.+2      	; 0x4cf4 <__ftoa_engine+0x6>
    4cf2:	27 e0       	ldi	r18, 0x07	; 7
    4cf4:	33 27       	eor	r19, r19
    4cf6:	da 01       	movw	r26, r20
    4cf8:	99 0f       	add	r25, r25
    4cfa:	31 1d       	adc	r19, r1
    4cfc:	87 fd       	sbrc	r24, 7
    4cfe:	91 60       	ori	r25, 0x01	; 1
    4d00:	00 96       	adiw	r24, 0x00	; 0
    4d02:	61 05       	cpc	r22, r1
    4d04:	71 05       	cpc	r23, r1
    4d06:	39 f4       	brne	.+14     	; 0x4d16 <__ftoa_engine+0x28>
    4d08:	32 60       	ori	r19, 0x02	; 2
    4d0a:	2e 5f       	subi	r18, 0xFE	; 254
    4d0c:	3d 93       	st	X+, r19
    4d0e:	30 e3       	ldi	r19, 0x30	; 48
    4d10:	2a 95       	dec	r18
    4d12:	e1 f7       	brne	.-8      	; 0x4d0c <__ftoa_engine+0x1e>
    4d14:	08 95       	ret
    4d16:	9f 3f       	cpi	r25, 0xFF	; 255
    4d18:	30 f0       	brcs	.+12     	; 0x4d26 <__ftoa_engine+0x38>
    4d1a:	80 38       	cpi	r24, 0x80	; 128
    4d1c:	71 05       	cpc	r23, r1
    4d1e:	61 05       	cpc	r22, r1
    4d20:	09 f0       	breq	.+2      	; 0x4d24 <__ftoa_engine+0x36>
    4d22:	3c 5f       	subi	r19, 0xFC	; 252
    4d24:	3c 5f       	subi	r19, 0xFC	; 252
    4d26:	3d 93       	st	X+, r19
    4d28:	91 30       	cpi	r25, 0x01	; 1
    4d2a:	08 f0       	brcs	.+2      	; 0x4d2e <__ftoa_engine+0x40>
    4d2c:	80 68       	ori	r24, 0x80	; 128
    4d2e:	91 1d       	adc	r25, r1
    4d30:	df 93       	push	r29
    4d32:	cf 93       	push	r28
    4d34:	1f 93       	push	r17
    4d36:	0f 93       	push	r16
    4d38:	ff 92       	push	r15
    4d3a:	ef 92       	push	r14
    4d3c:	19 2f       	mov	r17, r25
    4d3e:	98 7f       	andi	r25, 0xF8	; 248
    4d40:	96 95       	lsr	r25
    4d42:	e9 2f       	mov	r30, r25
    4d44:	96 95       	lsr	r25
    4d46:	96 95       	lsr	r25
    4d48:	e9 0f       	add	r30, r25
    4d4a:	ff 27       	eor	r31, r31
    4d4c:	e8 54       	subi	r30, 0x48	; 72
    4d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    4d50:	99 27       	eor	r25, r25
    4d52:	33 27       	eor	r19, r19
    4d54:	ee 24       	eor	r14, r14
    4d56:	ff 24       	eor	r15, r15
    4d58:	a7 01       	movw	r20, r14
    4d5a:	e7 01       	movw	r28, r14
    4d5c:	05 90       	lpm	r0, Z+
    4d5e:	08 94       	sec
    4d60:	07 94       	ror	r0
    4d62:	28 f4       	brcc	.+10     	; 0x4d6e <__ftoa_engine+0x80>
    4d64:	36 0f       	add	r19, r22
    4d66:	e7 1e       	adc	r14, r23
    4d68:	f8 1e       	adc	r15, r24
    4d6a:	49 1f       	adc	r20, r25
    4d6c:	51 1d       	adc	r21, r1
    4d6e:	66 0f       	add	r22, r22
    4d70:	77 1f       	adc	r23, r23
    4d72:	88 1f       	adc	r24, r24
    4d74:	99 1f       	adc	r25, r25
    4d76:	06 94       	lsr	r0
    4d78:	a1 f7       	brne	.-24     	; 0x4d62 <__ftoa_engine+0x74>
    4d7a:	05 90       	lpm	r0, Z+
    4d7c:	07 94       	ror	r0
    4d7e:	28 f4       	brcc	.+10     	; 0x4d8a <__ftoa_engine+0x9c>
    4d80:	e7 0e       	add	r14, r23
    4d82:	f8 1e       	adc	r15, r24
    4d84:	49 1f       	adc	r20, r25
    4d86:	56 1f       	adc	r21, r22
    4d88:	c1 1d       	adc	r28, r1
    4d8a:	77 0f       	add	r23, r23
    4d8c:	88 1f       	adc	r24, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	66 1f       	adc	r22, r22
    4d92:	06 94       	lsr	r0
    4d94:	a1 f7       	brne	.-24     	; 0x4d7e <__ftoa_engine+0x90>
    4d96:	05 90       	lpm	r0, Z+
    4d98:	07 94       	ror	r0
    4d9a:	28 f4       	brcc	.+10     	; 0x4da6 <__ftoa_engine+0xb8>
    4d9c:	f8 0e       	add	r15, r24
    4d9e:	49 1f       	adc	r20, r25
    4da0:	56 1f       	adc	r21, r22
    4da2:	c7 1f       	adc	r28, r23
    4da4:	d1 1d       	adc	r29, r1
    4da6:	88 0f       	add	r24, r24
    4da8:	99 1f       	adc	r25, r25
    4daa:	66 1f       	adc	r22, r22
    4dac:	77 1f       	adc	r23, r23
    4dae:	06 94       	lsr	r0
    4db0:	a1 f7       	brne	.-24     	; 0x4d9a <__ftoa_engine+0xac>
    4db2:	05 90       	lpm	r0, Z+
    4db4:	07 94       	ror	r0
    4db6:	20 f4       	brcc	.+8      	; 0x4dc0 <__ftoa_engine+0xd2>
    4db8:	49 0f       	add	r20, r25
    4dba:	56 1f       	adc	r21, r22
    4dbc:	c7 1f       	adc	r28, r23
    4dbe:	d8 1f       	adc	r29, r24
    4dc0:	99 0f       	add	r25, r25
    4dc2:	66 1f       	adc	r22, r22
    4dc4:	77 1f       	adc	r23, r23
    4dc6:	88 1f       	adc	r24, r24
    4dc8:	06 94       	lsr	r0
    4dca:	a9 f7       	brne	.-22     	; 0x4db6 <__ftoa_engine+0xc8>
    4dcc:	84 91       	lpm	r24, Z
    4dce:	10 95       	com	r17
    4dd0:	17 70       	andi	r17, 0x07	; 7
    4dd2:	41 f0       	breq	.+16     	; 0x4de4 <__ftoa_engine+0xf6>
    4dd4:	d6 95       	lsr	r29
    4dd6:	c7 95       	ror	r28
    4dd8:	57 95       	ror	r21
    4dda:	47 95       	ror	r20
    4ddc:	f7 94       	ror	r15
    4dde:	e7 94       	ror	r14
    4de0:	1a 95       	dec	r17
    4de2:	c1 f7       	brne	.-16     	; 0x4dd4 <__ftoa_engine+0xe6>
    4de4:	ee e5       	ldi	r30, 0x5E	; 94
    4de6:	f2 e0       	ldi	r31, 0x02	; 2
    4de8:	68 94       	set
    4dea:	15 90       	lpm	r1, Z+
    4dec:	15 91       	lpm	r17, Z+
    4dee:	35 91       	lpm	r19, Z+
    4df0:	65 91       	lpm	r22, Z+
    4df2:	95 91       	lpm	r25, Z+
    4df4:	05 90       	lpm	r0, Z+
    4df6:	7f e2       	ldi	r23, 0x2F	; 47
    4df8:	73 95       	inc	r23
    4dfa:	e1 18       	sub	r14, r1
    4dfc:	f1 0a       	sbc	r15, r17
    4dfe:	43 0b       	sbc	r20, r19
    4e00:	56 0b       	sbc	r21, r22
    4e02:	c9 0b       	sbc	r28, r25
    4e04:	d0 09       	sbc	r29, r0
    4e06:	c0 f7       	brcc	.-16     	; 0x4df8 <__ftoa_engine+0x10a>
    4e08:	e1 0c       	add	r14, r1
    4e0a:	f1 1e       	adc	r15, r17
    4e0c:	43 1f       	adc	r20, r19
    4e0e:	56 1f       	adc	r21, r22
    4e10:	c9 1f       	adc	r28, r25
    4e12:	d0 1d       	adc	r29, r0
    4e14:	7e f4       	brtc	.+30     	; 0x4e34 <__ftoa_engine+0x146>
    4e16:	70 33       	cpi	r23, 0x30	; 48
    4e18:	11 f4       	brne	.+4      	; 0x4e1e <__ftoa_engine+0x130>
    4e1a:	8a 95       	dec	r24
    4e1c:	e6 cf       	rjmp	.-52     	; 0x4dea <__ftoa_engine+0xfc>
    4e1e:	e8 94       	clt
    4e20:	01 50       	subi	r16, 0x01	; 1
    4e22:	30 f0       	brcs	.+12     	; 0x4e30 <__ftoa_engine+0x142>
    4e24:	08 0f       	add	r16, r24
    4e26:	0a f4       	brpl	.+2      	; 0x4e2a <__ftoa_engine+0x13c>
    4e28:	00 27       	eor	r16, r16
    4e2a:	02 17       	cp	r16, r18
    4e2c:	08 f4       	brcc	.+2      	; 0x4e30 <__ftoa_engine+0x142>
    4e2e:	20 2f       	mov	r18, r16
    4e30:	23 95       	inc	r18
    4e32:	02 2f       	mov	r16, r18
    4e34:	7a 33       	cpi	r23, 0x3A	; 58
    4e36:	28 f0       	brcs	.+10     	; 0x4e42 <__ftoa_engine+0x154>
    4e38:	79 e3       	ldi	r23, 0x39	; 57
    4e3a:	7d 93       	st	X+, r23
    4e3c:	2a 95       	dec	r18
    4e3e:	e9 f7       	brne	.-6      	; 0x4e3a <__ftoa_engine+0x14c>
    4e40:	10 c0       	rjmp	.+32     	; 0x4e62 <__ftoa_engine+0x174>
    4e42:	7d 93       	st	X+, r23
    4e44:	2a 95       	dec	r18
    4e46:	89 f6       	brne	.-94     	; 0x4dea <__ftoa_engine+0xfc>
    4e48:	06 94       	lsr	r0
    4e4a:	97 95       	ror	r25
    4e4c:	67 95       	ror	r22
    4e4e:	37 95       	ror	r19
    4e50:	17 95       	ror	r17
    4e52:	17 94       	ror	r1
    4e54:	e1 18       	sub	r14, r1
    4e56:	f1 0a       	sbc	r15, r17
    4e58:	43 0b       	sbc	r20, r19
    4e5a:	56 0b       	sbc	r21, r22
    4e5c:	c9 0b       	sbc	r28, r25
    4e5e:	d0 09       	sbc	r29, r0
    4e60:	98 f0       	brcs	.+38     	; 0x4e88 <__ftoa_engine+0x19a>
    4e62:	23 95       	inc	r18
    4e64:	7e 91       	ld	r23, -X
    4e66:	73 95       	inc	r23
    4e68:	7a 33       	cpi	r23, 0x3A	; 58
    4e6a:	08 f0       	brcs	.+2      	; 0x4e6e <__ftoa_engine+0x180>
    4e6c:	70 e3       	ldi	r23, 0x30	; 48
    4e6e:	7c 93       	st	X, r23
    4e70:	20 13       	cpse	r18, r16
    4e72:	b8 f7       	brcc	.-18     	; 0x4e62 <__ftoa_engine+0x174>
    4e74:	7e 91       	ld	r23, -X
    4e76:	70 61       	ori	r23, 0x10	; 16
    4e78:	7d 93       	st	X+, r23
    4e7a:	30 f0       	brcs	.+12     	; 0x4e88 <__ftoa_engine+0x19a>
    4e7c:	83 95       	inc	r24
    4e7e:	71 e3       	ldi	r23, 0x31	; 49
    4e80:	7d 93       	st	X+, r23
    4e82:	70 e3       	ldi	r23, 0x30	; 48
    4e84:	2a 95       	dec	r18
    4e86:	e1 f7       	brne	.-8      	; 0x4e80 <__ftoa_engine+0x192>
    4e88:	11 24       	eor	r1, r1
    4e8a:	ef 90       	pop	r14
    4e8c:	ff 90       	pop	r15
    4e8e:	0f 91       	pop	r16
    4e90:	1f 91       	pop	r17
    4e92:	cf 91       	pop	r28
    4e94:	df 91       	pop	r29
    4e96:	99 27       	eor	r25, r25
    4e98:	87 fd       	sbrc	r24, 7
    4e9a:	90 95       	com	r25
    4e9c:	08 95       	ret

00004e9e <strnlen_P>:
    4e9e:	fc 01       	movw	r30, r24
    4ea0:	05 90       	lpm	r0, Z+
    4ea2:	61 50       	subi	r22, 0x01	; 1
    4ea4:	70 40       	sbci	r23, 0x00	; 0
    4ea6:	01 10       	cpse	r0, r1
    4ea8:	d8 f7       	brcc	.-10     	; 0x4ea0 <strnlen_P+0x2>
    4eaa:	80 95       	com	r24
    4eac:	90 95       	com	r25
    4eae:	8e 0f       	add	r24, r30
    4eb0:	9f 1f       	adc	r25, r31
    4eb2:	08 95       	ret

00004eb4 <memcpy>:
    4eb4:	fb 01       	movw	r30, r22
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	02 c0       	rjmp	.+4      	; 0x4ebe <memcpy+0xa>
    4eba:	01 90       	ld	r0, Z+
    4ebc:	0d 92       	st	X+, r0
    4ebe:	41 50       	subi	r20, 0x01	; 1
    4ec0:	50 40       	sbci	r21, 0x00	; 0
    4ec2:	d8 f7       	brcc	.-10     	; 0x4eba <memcpy+0x6>
    4ec4:	08 95       	ret

00004ec6 <strnlen>:
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	61 50       	subi	r22, 0x01	; 1
    4eca:	70 40       	sbci	r23, 0x00	; 0
    4ecc:	01 90       	ld	r0, Z+
    4ece:	01 10       	cpse	r0, r1
    4ed0:	d8 f7       	brcc	.-10     	; 0x4ec8 <strnlen+0x2>
    4ed2:	80 95       	com	r24
    4ed4:	90 95       	com	r25
    4ed6:	8e 0f       	add	r24, r30
    4ed8:	9f 1f       	adc	r25, r31
    4eda:	08 95       	ret

00004edc <fdevopen>:
    4edc:	0f 93       	push	r16
    4ede:	1f 93       	push	r17
    4ee0:	cf 93       	push	r28
    4ee2:	df 93       	push	r29
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	31 f4       	brne	.+12     	; 0x4ef4 <fdevopen+0x18>
    4ee8:	61 15       	cp	r22, r1
    4eea:	71 05       	cpc	r23, r1
    4eec:	19 f4       	brne	.+6      	; 0x4ef4 <fdevopen+0x18>
    4eee:	80 e0       	ldi	r24, 0x00	; 0
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	39 c0       	rjmp	.+114    	; 0x4f66 <fdevopen+0x8a>
    4ef4:	8b 01       	movw	r16, r22
    4ef6:	ec 01       	movw	r28, r24
    4ef8:	6e e0       	ldi	r22, 0x0E	; 14
    4efa:	70 e0       	ldi	r23, 0x00	; 0
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	3c d1       	rcall	.+632    	; 0x517a <calloc>
    4f02:	fc 01       	movw	r30, r24
    4f04:	89 2b       	or	r24, r25
    4f06:	99 f3       	breq	.-26     	; 0x4eee <fdevopen+0x12>
    4f08:	80 e8       	ldi	r24, 0x80	; 128
    4f0a:	83 83       	std	Z+3, r24	; 0x03
    4f0c:	01 15       	cp	r16, r1
    4f0e:	11 05       	cpc	r17, r1
    4f10:	71 f0       	breq	.+28     	; 0x4f2e <fdevopen+0x52>
    4f12:	02 87       	std	Z+10, r16	; 0x0a
    4f14:	13 87       	std	Z+11, r17	; 0x0b
    4f16:	81 e8       	ldi	r24, 0x81	; 129
    4f18:	83 83       	std	Z+3, r24	; 0x03
    4f1a:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <__iob>
    4f1e:	90 91 35 23 	lds	r25, 0x2335	; 0x802335 <__iob+0x1>
    4f22:	89 2b       	or	r24, r25
    4f24:	21 f4       	brne	.+8      	; 0x4f2e <fdevopen+0x52>
    4f26:	e0 93 34 23 	sts	0x2334, r30	; 0x802334 <__iob>
    4f2a:	f0 93 35 23 	sts	0x2335, r31	; 0x802335 <__iob+0x1>
    4f2e:	20 97       	sbiw	r28, 0x00	; 0
    4f30:	c9 f0       	breq	.+50     	; 0x4f64 <fdevopen+0x88>
    4f32:	c0 87       	std	Z+8, r28	; 0x08
    4f34:	d1 87       	std	Z+9, r29	; 0x09
    4f36:	83 81       	ldd	r24, Z+3	; 0x03
    4f38:	82 60       	ori	r24, 0x02	; 2
    4f3a:	83 83       	std	Z+3, r24	; 0x03
    4f3c:	80 91 36 23 	lds	r24, 0x2336	; 0x802336 <__iob+0x2>
    4f40:	90 91 37 23 	lds	r25, 0x2337	; 0x802337 <__iob+0x3>
    4f44:	89 2b       	or	r24, r25
    4f46:	71 f4       	brne	.+28     	; 0x4f64 <fdevopen+0x88>
    4f48:	e0 93 36 23 	sts	0x2336, r30	; 0x802336 <__iob+0x2>
    4f4c:	f0 93 37 23 	sts	0x2337, r31	; 0x802337 <__iob+0x3>
    4f50:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <__iob+0x4>
    4f54:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <__iob+0x5>
    4f58:	89 2b       	or	r24, r25
    4f5a:	21 f4       	brne	.+8      	; 0x4f64 <fdevopen+0x88>
    4f5c:	e0 93 38 23 	sts	0x2338, r30	; 0x802338 <__iob+0x4>
    4f60:	f0 93 39 23 	sts	0x2339, r31	; 0x802339 <__iob+0x5>
    4f64:	cf 01       	movw	r24, r30
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	1f 91       	pop	r17
    4f6c:	0f 91       	pop	r16
    4f6e:	08 95       	ret

00004f70 <fputc>:
    4f70:	0f 93       	push	r16
    4f72:	1f 93       	push	r17
    4f74:	cf 93       	push	r28
    4f76:	df 93       	push	r29
    4f78:	fb 01       	movw	r30, r22
    4f7a:	23 81       	ldd	r18, Z+3	; 0x03
    4f7c:	21 fd       	sbrc	r18, 1
    4f7e:	03 c0       	rjmp	.+6      	; 0x4f86 <fputc+0x16>
    4f80:	8f ef       	ldi	r24, 0xFF	; 255
    4f82:	9f ef       	ldi	r25, 0xFF	; 255
    4f84:	2c c0       	rjmp	.+88     	; 0x4fde <fputc+0x6e>
    4f86:	22 ff       	sbrs	r18, 2
    4f88:	16 c0       	rjmp	.+44     	; 0x4fb6 <fputc+0x46>
    4f8a:	46 81       	ldd	r20, Z+6	; 0x06
    4f8c:	57 81       	ldd	r21, Z+7	; 0x07
    4f8e:	24 81       	ldd	r18, Z+4	; 0x04
    4f90:	35 81       	ldd	r19, Z+5	; 0x05
    4f92:	42 17       	cp	r20, r18
    4f94:	53 07       	cpc	r21, r19
    4f96:	44 f4       	brge	.+16     	; 0x4fa8 <fputc+0x38>
    4f98:	a0 81       	ld	r26, Z
    4f9a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f9c:	9d 01       	movw	r18, r26
    4f9e:	2f 5f       	subi	r18, 0xFF	; 255
    4fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa2:	20 83       	st	Z, r18
    4fa4:	31 83       	std	Z+1, r19	; 0x01
    4fa6:	8c 93       	st	X, r24
    4fa8:	26 81       	ldd	r18, Z+6	; 0x06
    4faa:	37 81       	ldd	r19, Z+7	; 0x07
    4fac:	2f 5f       	subi	r18, 0xFF	; 255
    4fae:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb0:	26 83       	std	Z+6, r18	; 0x06
    4fb2:	37 83       	std	Z+7, r19	; 0x07
    4fb4:	14 c0       	rjmp	.+40     	; 0x4fde <fputc+0x6e>
    4fb6:	8b 01       	movw	r16, r22
    4fb8:	ec 01       	movw	r28, r24
    4fba:	fb 01       	movw	r30, r22
    4fbc:	00 84       	ldd	r0, Z+8	; 0x08
    4fbe:	f1 85       	ldd	r31, Z+9	; 0x09
    4fc0:	e0 2d       	mov	r30, r0
    4fc2:	19 95       	eicall
    4fc4:	89 2b       	or	r24, r25
    4fc6:	e1 f6       	brne	.-72     	; 0x4f80 <fputc+0x10>
    4fc8:	d8 01       	movw	r26, r16
    4fca:	16 96       	adiw	r26, 0x06	; 6
    4fcc:	8d 91       	ld	r24, X+
    4fce:	9c 91       	ld	r25, X
    4fd0:	17 97       	sbiw	r26, 0x07	; 7
    4fd2:	01 96       	adiw	r24, 0x01	; 1
    4fd4:	16 96       	adiw	r26, 0x06	; 6
    4fd6:	8d 93       	st	X+, r24
    4fd8:	9c 93       	st	X, r25
    4fda:	17 97       	sbiw	r26, 0x07	; 7
    4fdc:	ce 01       	movw	r24, r28
    4fde:	df 91       	pop	r29
    4fe0:	cf 91       	pop	r28
    4fe2:	1f 91       	pop	r17
    4fe4:	0f 91       	pop	r16
    4fe6:	08 95       	ret

00004fe8 <printf>:
    4fe8:	cf 93       	push	r28
    4fea:	df 93       	push	r29
    4fec:	cd b7       	in	r28, 0x3d	; 61
    4fee:	de b7       	in	r29, 0x3e	; 62
    4ff0:	ae 01       	movw	r20, r28
    4ff2:	4a 5f       	subi	r20, 0xFA	; 250
    4ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ff6:	fa 01       	movw	r30, r20
    4ff8:	61 91       	ld	r22, Z+
    4ffa:	71 91       	ld	r23, Z+
    4ffc:	af 01       	movw	r20, r30
    4ffe:	80 91 36 23 	lds	r24, 0x2336	; 0x802336 <__iob+0x2>
    5002:	90 91 37 23 	lds	r25, 0x2337	; 0x802337 <__iob+0x3>
    5006:	f4 d9       	rcall	.-3096   	; 0x43f0 <vfprintf>
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	08 95       	ret

0000500e <puts>:
    500e:	0f 93       	push	r16
    5010:	1f 93       	push	r17
    5012:	cf 93       	push	r28
    5014:	df 93       	push	r29
    5016:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <__iob+0x2>
    501a:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <__iob+0x3>
    501e:	23 81       	ldd	r18, Z+3	; 0x03
    5020:	21 ff       	sbrs	r18, 1
    5022:	1b c0       	rjmp	.+54     	; 0x505a <puts+0x4c>
    5024:	8c 01       	movw	r16, r24
    5026:	d0 e0       	ldi	r29, 0x00	; 0
    5028:	c0 e0       	ldi	r28, 0x00	; 0
    502a:	f8 01       	movw	r30, r16
    502c:	81 91       	ld	r24, Z+
    502e:	8f 01       	movw	r16, r30
    5030:	60 91 36 23 	lds	r22, 0x2336	; 0x802336 <__iob+0x2>
    5034:	70 91 37 23 	lds	r23, 0x2337	; 0x802337 <__iob+0x3>
    5038:	db 01       	movw	r26, r22
    503a:	18 96       	adiw	r26, 0x08	; 8
    503c:	ed 91       	ld	r30, X+
    503e:	fc 91       	ld	r31, X
    5040:	19 97       	sbiw	r26, 0x09	; 9
    5042:	88 23       	and	r24, r24
    5044:	31 f0       	breq	.+12     	; 0x5052 <puts+0x44>
    5046:	19 95       	eicall
    5048:	89 2b       	or	r24, r25
    504a:	79 f3       	breq	.-34     	; 0x502a <puts+0x1c>
    504c:	df ef       	ldi	r29, 0xFF	; 255
    504e:	cf ef       	ldi	r28, 0xFF	; 255
    5050:	ec cf       	rjmp	.-40     	; 0x502a <puts+0x1c>
    5052:	8a e0       	ldi	r24, 0x0A	; 10
    5054:	19 95       	eicall
    5056:	89 2b       	or	r24, r25
    5058:	19 f0       	breq	.+6      	; 0x5060 <puts+0x52>
    505a:	8f ef       	ldi	r24, 0xFF	; 255
    505c:	9f ef       	ldi	r25, 0xFF	; 255
    505e:	02 c0       	rjmp	.+4      	; 0x5064 <puts+0x56>
    5060:	8d 2f       	mov	r24, r29
    5062:	9c 2f       	mov	r25, r28
    5064:	df 91       	pop	r29
    5066:	cf 91       	pop	r28
    5068:	1f 91       	pop	r17
    506a:	0f 91       	pop	r16
    506c:	08 95       	ret

0000506e <sprintf>:
    506e:	0f 93       	push	r16
    5070:	1f 93       	push	r17
    5072:	cf 93       	push	r28
    5074:	df 93       	push	r29
    5076:	cd b7       	in	r28, 0x3d	; 61
    5078:	de b7       	in	r29, 0x3e	; 62
    507a:	2e 97       	sbiw	r28, 0x0e	; 14
    507c:	cd bf       	out	0x3d, r28	; 61
    507e:	de bf       	out	0x3e, r29	; 62
    5080:	0e 89       	ldd	r16, Y+22	; 0x16
    5082:	1f 89       	ldd	r17, Y+23	; 0x17
    5084:	86 e0       	ldi	r24, 0x06	; 6
    5086:	8c 83       	std	Y+4, r24	; 0x04
    5088:	09 83       	std	Y+1, r16	; 0x01
    508a:	1a 83       	std	Y+2, r17	; 0x02
    508c:	8f ef       	ldi	r24, 0xFF	; 255
    508e:	9f e7       	ldi	r25, 0x7F	; 127
    5090:	8d 83       	std	Y+5, r24	; 0x05
    5092:	9e 83       	std	Y+6, r25	; 0x06
    5094:	ae 01       	movw	r20, r28
    5096:	46 5e       	subi	r20, 0xE6	; 230
    5098:	5f 4f       	sbci	r21, 0xFF	; 255
    509a:	68 8d       	ldd	r22, Y+24	; 0x18
    509c:	79 8d       	ldd	r23, Y+25	; 0x19
    509e:	ce 01       	movw	r24, r28
    50a0:	01 96       	adiw	r24, 0x01	; 1
    50a2:	a6 d9       	rcall	.-3252   	; 0x43f0 <vfprintf>
    50a4:	ef 81       	ldd	r30, Y+7	; 0x07
    50a6:	f8 85       	ldd	r31, Y+8	; 0x08
    50a8:	e0 0f       	add	r30, r16
    50aa:	f1 1f       	adc	r31, r17
    50ac:	10 82       	st	Z, r1
    50ae:	2e 96       	adiw	r28, 0x0e	; 14
    50b0:	cd bf       	out	0x3d, r28	; 61
    50b2:	de bf       	out	0x3e, r29	; 62
    50b4:	df 91       	pop	r29
    50b6:	cf 91       	pop	r28
    50b8:	1f 91       	pop	r17
    50ba:	0f 91       	pop	r16
    50bc:	08 95       	ret

000050be <__ultoa_invert>:
    50be:	fa 01       	movw	r30, r20
    50c0:	aa 27       	eor	r26, r26
    50c2:	28 30       	cpi	r18, 0x08	; 8
    50c4:	51 f1       	breq	.+84     	; 0x511a <__ultoa_invert+0x5c>
    50c6:	20 31       	cpi	r18, 0x10	; 16
    50c8:	81 f1       	breq	.+96     	; 0x512a <__ultoa_invert+0x6c>
    50ca:	e8 94       	clt
    50cc:	6f 93       	push	r22
    50ce:	6e 7f       	andi	r22, 0xFE	; 254
    50d0:	6e 5f       	subi	r22, 0xFE	; 254
    50d2:	7f 4f       	sbci	r23, 0xFF	; 255
    50d4:	8f 4f       	sbci	r24, 0xFF	; 255
    50d6:	9f 4f       	sbci	r25, 0xFF	; 255
    50d8:	af 4f       	sbci	r26, 0xFF	; 255
    50da:	b1 e0       	ldi	r27, 0x01	; 1
    50dc:	3e d0       	rcall	.+124    	; 0x515a <__ultoa_invert+0x9c>
    50de:	b4 e0       	ldi	r27, 0x04	; 4
    50e0:	3c d0       	rcall	.+120    	; 0x515a <__ultoa_invert+0x9c>
    50e2:	67 0f       	add	r22, r23
    50e4:	78 1f       	adc	r23, r24
    50e6:	89 1f       	adc	r24, r25
    50e8:	9a 1f       	adc	r25, r26
    50ea:	a1 1d       	adc	r26, r1
    50ec:	68 0f       	add	r22, r24
    50ee:	79 1f       	adc	r23, r25
    50f0:	8a 1f       	adc	r24, r26
    50f2:	91 1d       	adc	r25, r1
    50f4:	a1 1d       	adc	r26, r1
    50f6:	6a 0f       	add	r22, r26
    50f8:	71 1d       	adc	r23, r1
    50fa:	81 1d       	adc	r24, r1
    50fc:	91 1d       	adc	r25, r1
    50fe:	a1 1d       	adc	r26, r1
    5100:	20 d0       	rcall	.+64     	; 0x5142 <__ultoa_invert+0x84>
    5102:	09 f4       	brne	.+2      	; 0x5106 <__ultoa_invert+0x48>
    5104:	68 94       	set
    5106:	3f 91       	pop	r19
    5108:	2a e0       	ldi	r18, 0x0A	; 10
    510a:	26 9f       	mul	r18, r22
    510c:	11 24       	eor	r1, r1
    510e:	30 19       	sub	r19, r0
    5110:	30 5d       	subi	r19, 0xD0	; 208
    5112:	31 93       	st	Z+, r19
    5114:	de f6       	brtc	.-74     	; 0x50cc <__ultoa_invert+0xe>
    5116:	cf 01       	movw	r24, r30
    5118:	08 95       	ret
    511a:	46 2f       	mov	r20, r22
    511c:	47 70       	andi	r20, 0x07	; 7
    511e:	40 5d       	subi	r20, 0xD0	; 208
    5120:	41 93       	st	Z+, r20
    5122:	b3 e0       	ldi	r27, 0x03	; 3
    5124:	0f d0       	rcall	.+30     	; 0x5144 <__ultoa_invert+0x86>
    5126:	c9 f7       	brne	.-14     	; 0x511a <__ultoa_invert+0x5c>
    5128:	f6 cf       	rjmp	.-20     	; 0x5116 <__ultoa_invert+0x58>
    512a:	46 2f       	mov	r20, r22
    512c:	4f 70       	andi	r20, 0x0F	; 15
    512e:	40 5d       	subi	r20, 0xD0	; 208
    5130:	4a 33       	cpi	r20, 0x3A	; 58
    5132:	18 f0       	brcs	.+6      	; 0x513a <__ultoa_invert+0x7c>
    5134:	49 5d       	subi	r20, 0xD9	; 217
    5136:	31 fd       	sbrc	r19, 1
    5138:	40 52       	subi	r20, 0x20	; 32
    513a:	41 93       	st	Z+, r20
    513c:	02 d0       	rcall	.+4      	; 0x5142 <__ultoa_invert+0x84>
    513e:	a9 f7       	brne	.-22     	; 0x512a <__ultoa_invert+0x6c>
    5140:	ea cf       	rjmp	.-44     	; 0x5116 <__ultoa_invert+0x58>
    5142:	b4 e0       	ldi	r27, 0x04	; 4
    5144:	a6 95       	lsr	r26
    5146:	97 95       	ror	r25
    5148:	87 95       	ror	r24
    514a:	77 95       	ror	r23
    514c:	67 95       	ror	r22
    514e:	ba 95       	dec	r27
    5150:	c9 f7       	brne	.-14     	; 0x5144 <__ultoa_invert+0x86>
    5152:	00 97       	sbiw	r24, 0x00	; 0
    5154:	61 05       	cpc	r22, r1
    5156:	71 05       	cpc	r23, r1
    5158:	08 95       	ret
    515a:	9b 01       	movw	r18, r22
    515c:	ac 01       	movw	r20, r24
    515e:	0a 2e       	mov	r0, r26
    5160:	06 94       	lsr	r0
    5162:	57 95       	ror	r21
    5164:	47 95       	ror	r20
    5166:	37 95       	ror	r19
    5168:	27 95       	ror	r18
    516a:	ba 95       	dec	r27
    516c:	c9 f7       	brne	.-14     	; 0x5160 <__ultoa_invert+0xa2>
    516e:	62 0f       	add	r22, r18
    5170:	73 1f       	adc	r23, r19
    5172:	84 1f       	adc	r24, r20
    5174:	95 1f       	adc	r25, r21
    5176:	a0 1d       	adc	r26, r0
    5178:	08 95       	ret

0000517a <calloc>:
    517a:	0f 93       	push	r16
    517c:	1f 93       	push	r17
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    5182:	86 9f       	mul	r24, r22
    5184:	80 01       	movw	r16, r0
    5186:	87 9f       	mul	r24, r23
    5188:	10 0d       	add	r17, r0
    518a:	96 9f       	mul	r25, r22
    518c:	10 0d       	add	r17, r0
    518e:	11 24       	eor	r1, r1
    5190:	c8 01       	movw	r24, r16
    5192:	0d d0       	rcall	.+26     	; 0x51ae <malloc>
    5194:	ec 01       	movw	r28, r24
    5196:	00 97       	sbiw	r24, 0x00	; 0
    5198:	21 f0       	breq	.+8      	; 0x51a2 <calloc+0x28>
    519a:	a8 01       	movw	r20, r16
    519c:	60 e0       	ldi	r22, 0x00	; 0
    519e:	70 e0       	ldi	r23, 0x00	; 0
    51a0:	27 d1       	rcall	.+590    	; 0x53f0 <memset>
    51a2:	ce 01       	movw	r24, r28
    51a4:	df 91       	pop	r29
    51a6:	cf 91       	pop	r28
    51a8:	1f 91       	pop	r17
    51aa:	0f 91       	pop	r16
    51ac:	08 95       	ret

000051ae <malloc>:
    51ae:	0f 93       	push	r16
    51b0:	1f 93       	push	r17
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	82 30       	cpi	r24, 0x02	; 2
    51b8:	91 05       	cpc	r25, r1
    51ba:	10 f4       	brcc	.+4      	; 0x51c0 <malloc+0x12>
    51bc:	82 e0       	ldi	r24, 0x02	; 2
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <__flp>
    51c4:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <__flp+0x1>
    51c8:	20 e0       	ldi	r18, 0x00	; 0
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	a0 e0       	ldi	r26, 0x00	; 0
    51ce:	b0 e0       	ldi	r27, 0x00	; 0
    51d0:	30 97       	sbiw	r30, 0x00	; 0
    51d2:	19 f1       	breq	.+70     	; 0x521a <malloc+0x6c>
    51d4:	40 81       	ld	r20, Z
    51d6:	51 81       	ldd	r21, Z+1	; 0x01
    51d8:	02 81       	ldd	r16, Z+2	; 0x02
    51da:	13 81       	ldd	r17, Z+3	; 0x03
    51dc:	48 17       	cp	r20, r24
    51de:	59 07       	cpc	r21, r25
    51e0:	c8 f0       	brcs	.+50     	; 0x5214 <malloc+0x66>
    51e2:	84 17       	cp	r24, r20
    51e4:	95 07       	cpc	r25, r21
    51e6:	69 f4       	brne	.+26     	; 0x5202 <malloc+0x54>
    51e8:	10 97       	sbiw	r26, 0x00	; 0
    51ea:	31 f0       	breq	.+12     	; 0x51f8 <malloc+0x4a>
    51ec:	12 96       	adiw	r26, 0x02	; 2
    51ee:	0c 93       	st	X, r16
    51f0:	12 97       	sbiw	r26, 0x02	; 2
    51f2:	13 96       	adiw	r26, 0x03	; 3
    51f4:	1c 93       	st	X, r17
    51f6:	27 c0       	rjmp	.+78     	; 0x5246 <malloc+0x98>
    51f8:	00 93 3c 23 	sts	0x233C, r16	; 0x80233c <__flp>
    51fc:	10 93 3d 23 	sts	0x233D, r17	; 0x80233d <__flp+0x1>
    5200:	22 c0       	rjmp	.+68     	; 0x5246 <malloc+0x98>
    5202:	21 15       	cp	r18, r1
    5204:	31 05       	cpc	r19, r1
    5206:	19 f0       	breq	.+6      	; 0x520e <malloc+0x60>
    5208:	42 17       	cp	r20, r18
    520a:	53 07       	cpc	r21, r19
    520c:	18 f4       	brcc	.+6      	; 0x5214 <malloc+0x66>
    520e:	9a 01       	movw	r18, r20
    5210:	bd 01       	movw	r22, r26
    5212:	ef 01       	movw	r28, r30
    5214:	df 01       	movw	r26, r30
    5216:	f8 01       	movw	r30, r16
    5218:	db cf       	rjmp	.-74     	; 0x51d0 <malloc+0x22>
    521a:	21 15       	cp	r18, r1
    521c:	31 05       	cpc	r19, r1
    521e:	f9 f0       	breq	.+62     	; 0x525e <malloc+0xb0>
    5220:	28 1b       	sub	r18, r24
    5222:	39 0b       	sbc	r19, r25
    5224:	24 30       	cpi	r18, 0x04	; 4
    5226:	31 05       	cpc	r19, r1
    5228:	80 f4       	brcc	.+32     	; 0x524a <malloc+0x9c>
    522a:	8a 81       	ldd	r24, Y+2	; 0x02
    522c:	9b 81       	ldd	r25, Y+3	; 0x03
    522e:	61 15       	cp	r22, r1
    5230:	71 05       	cpc	r23, r1
    5232:	21 f0       	breq	.+8      	; 0x523c <malloc+0x8e>
    5234:	fb 01       	movw	r30, r22
    5236:	82 83       	std	Z+2, r24	; 0x02
    5238:	93 83       	std	Z+3, r25	; 0x03
    523a:	04 c0       	rjmp	.+8      	; 0x5244 <malloc+0x96>
    523c:	80 93 3c 23 	sts	0x233C, r24	; 0x80233c <__flp>
    5240:	90 93 3d 23 	sts	0x233D, r25	; 0x80233d <__flp+0x1>
    5244:	fe 01       	movw	r30, r28
    5246:	32 96       	adiw	r30, 0x02	; 2
    5248:	44 c0       	rjmp	.+136    	; 0x52d2 <malloc+0x124>
    524a:	fe 01       	movw	r30, r28
    524c:	e2 0f       	add	r30, r18
    524e:	f3 1f       	adc	r31, r19
    5250:	81 93       	st	Z+, r24
    5252:	91 93       	st	Z+, r25
    5254:	22 50       	subi	r18, 0x02	; 2
    5256:	31 09       	sbc	r19, r1
    5258:	28 83       	st	Y, r18
    525a:	39 83       	std	Y+1, r19	; 0x01
    525c:	3a c0       	rjmp	.+116    	; 0x52d2 <malloc+0x124>
    525e:	20 91 3a 23 	lds	r18, 0x233A	; 0x80233a <__brkval>
    5262:	30 91 3b 23 	lds	r19, 0x233B	; 0x80233b <__brkval+0x1>
    5266:	23 2b       	or	r18, r19
    5268:	41 f4       	brne	.+16     	; 0x527a <malloc+0xcc>
    526a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    526e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5272:	20 93 3a 23 	sts	0x233A, r18	; 0x80233a <__brkval>
    5276:	30 93 3b 23 	sts	0x233B, r19	; 0x80233b <__brkval+0x1>
    527a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    527e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    5282:	21 15       	cp	r18, r1
    5284:	31 05       	cpc	r19, r1
    5286:	41 f4       	brne	.+16     	; 0x5298 <malloc+0xea>
    5288:	2d b7       	in	r18, 0x3d	; 61
    528a:	3e b7       	in	r19, 0x3e	; 62
    528c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5290:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5294:	24 1b       	sub	r18, r20
    5296:	35 0b       	sbc	r19, r21
    5298:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <__brkval>
    529c:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <__brkval+0x1>
    52a0:	e2 17       	cp	r30, r18
    52a2:	f3 07       	cpc	r31, r19
    52a4:	a0 f4       	brcc	.+40     	; 0x52ce <malloc+0x120>
    52a6:	2e 1b       	sub	r18, r30
    52a8:	3f 0b       	sbc	r19, r31
    52aa:	28 17       	cp	r18, r24
    52ac:	39 07       	cpc	r19, r25
    52ae:	78 f0       	brcs	.+30     	; 0x52ce <malloc+0x120>
    52b0:	ac 01       	movw	r20, r24
    52b2:	4e 5f       	subi	r20, 0xFE	; 254
    52b4:	5f 4f       	sbci	r21, 0xFF	; 255
    52b6:	24 17       	cp	r18, r20
    52b8:	35 07       	cpc	r19, r21
    52ba:	48 f0       	brcs	.+18     	; 0x52ce <malloc+0x120>
    52bc:	4e 0f       	add	r20, r30
    52be:	5f 1f       	adc	r21, r31
    52c0:	40 93 3a 23 	sts	0x233A, r20	; 0x80233a <__brkval>
    52c4:	50 93 3b 23 	sts	0x233B, r21	; 0x80233b <__brkval+0x1>
    52c8:	81 93       	st	Z+, r24
    52ca:	91 93       	st	Z+, r25
    52cc:	02 c0       	rjmp	.+4      	; 0x52d2 <malloc+0x124>
    52ce:	e0 e0       	ldi	r30, 0x00	; 0
    52d0:	f0 e0       	ldi	r31, 0x00	; 0
    52d2:	cf 01       	movw	r24, r30
    52d4:	df 91       	pop	r29
    52d6:	cf 91       	pop	r28
    52d8:	1f 91       	pop	r17
    52da:	0f 91       	pop	r16
    52dc:	08 95       	ret

000052de <free>:
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	00 97       	sbiw	r24, 0x00	; 0
    52e4:	09 f4       	brne	.+2      	; 0x52e8 <free+0xa>
    52e6:	81 c0       	rjmp	.+258    	; 0x53ea <free+0x10c>
    52e8:	fc 01       	movw	r30, r24
    52ea:	32 97       	sbiw	r30, 0x02	; 2
    52ec:	12 82       	std	Z+2, r1	; 0x02
    52ee:	13 82       	std	Z+3, r1	; 0x03
    52f0:	a0 91 3c 23 	lds	r26, 0x233C	; 0x80233c <__flp>
    52f4:	b0 91 3d 23 	lds	r27, 0x233D	; 0x80233d <__flp+0x1>
    52f8:	10 97       	sbiw	r26, 0x00	; 0
    52fa:	81 f4       	brne	.+32     	; 0x531c <free+0x3e>
    52fc:	20 81       	ld	r18, Z
    52fe:	31 81       	ldd	r19, Z+1	; 0x01
    5300:	82 0f       	add	r24, r18
    5302:	93 1f       	adc	r25, r19
    5304:	20 91 3a 23 	lds	r18, 0x233A	; 0x80233a <__brkval>
    5308:	30 91 3b 23 	lds	r19, 0x233B	; 0x80233b <__brkval+0x1>
    530c:	28 17       	cp	r18, r24
    530e:	39 07       	cpc	r19, r25
    5310:	51 f5       	brne	.+84     	; 0x5366 <free+0x88>
    5312:	e0 93 3a 23 	sts	0x233A, r30	; 0x80233a <__brkval>
    5316:	f0 93 3b 23 	sts	0x233B, r31	; 0x80233b <__brkval+0x1>
    531a:	67 c0       	rjmp	.+206    	; 0x53ea <free+0x10c>
    531c:	ed 01       	movw	r28, r26
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	ce 17       	cp	r28, r30
    5324:	df 07       	cpc	r29, r31
    5326:	40 f4       	brcc	.+16     	; 0x5338 <free+0x5a>
    5328:	4a 81       	ldd	r20, Y+2	; 0x02
    532a:	5b 81       	ldd	r21, Y+3	; 0x03
    532c:	9e 01       	movw	r18, r28
    532e:	41 15       	cp	r20, r1
    5330:	51 05       	cpc	r21, r1
    5332:	f1 f0       	breq	.+60     	; 0x5370 <free+0x92>
    5334:	ea 01       	movw	r28, r20
    5336:	f5 cf       	rjmp	.-22     	; 0x5322 <free+0x44>
    5338:	c2 83       	std	Z+2, r28	; 0x02
    533a:	d3 83       	std	Z+3, r29	; 0x03
    533c:	40 81       	ld	r20, Z
    533e:	51 81       	ldd	r21, Z+1	; 0x01
    5340:	84 0f       	add	r24, r20
    5342:	95 1f       	adc	r25, r21
    5344:	c8 17       	cp	r28, r24
    5346:	d9 07       	cpc	r29, r25
    5348:	59 f4       	brne	.+22     	; 0x5360 <free+0x82>
    534a:	88 81       	ld	r24, Y
    534c:	99 81       	ldd	r25, Y+1	; 0x01
    534e:	84 0f       	add	r24, r20
    5350:	95 1f       	adc	r25, r21
    5352:	02 96       	adiw	r24, 0x02	; 2
    5354:	80 83       	st	Z, r24
    5356:	91 83       	std	Z+1, r25	; 0x01
    5358:	8a 81       	ldd	r24, Y+2	; 0x02
    535a:	9b 81       	ldd	r25, Y+3	; 0x03
    535c:	82 83       	std	Z+2, r24	; 0x02
    535e:	93 83       	std	Z+3, r25	; 0x03
    5360:	21 15       	cp	r18, r1
    5362:	31 05       	cpc	r19, r1
    5364:	29 f4       	brne	.+10     	; 0x5370 <free+0x92>
    5366:	e0 93 3c 23 	sts	0x233C, r30	; 0x80233c <__flp>
    536a:	f0 93 3d 23 	sts	0x233D, r31	; 0x80233d <__flp+0x1>
    536e:	3d c0       	rjmp	.+122    	; 0x53ea <free+0x10c>
    5370:	e9 01       	movw	r28, r18
    5372:	ea 83       	std	Y+2, r30	; 0x02
    5374:	fb 83       	std	Y+3, r31	; 0x03
    5376:	49 91       	ld	r20, Y+
    5378:	59 91       	ld	r21, Y+
    537a:	c4 0f       	add	r28, r20
    537c:	d5 1f       	adc	r29, r21
    537e:	ec 17       	cp	r30, r28
    5380:	fd 07       	cpc	r31, r29
    5382:	61 f4       	brne	.+24     	; 0x539c <free+0xbe>
    5384:	80 81       	ld	r24, Z
    5386:	91 81       	ldd	r25, Z+1	; 0x01
    5388:	84 0f       	add	r24, r20
    538a:	95 1f       	adc	r25, r21
    538c:	02 96       	adiw	r24, 0x02	; 2
    538e:	e9 01       	movw	r28, r18
    5390:	88 83       	st	Y, r24
    5392:	99 83       	std	Y+1, r25	; 0x01
    5394:	82 81       	ldd	r24, Z+2	; 0x02
    5396:	93 81       	ldd	r25, Z+3	; 0x03
    5398:	8a 83       	std	Y+2, r24	; 0x02
    539a:	9b 83       	std	Y+3, r25	; 0x03
    539c:	e0 e0       	ldi	r30, 0x00	; 0
    539e:	f0 e0       	ldi	r31, 0x00	; 0
    53a0:	12 96       	adiw	r26, 0x02	; 2
    53a2:	8d 91       	ld	r24, X+
    53a4:	9c 91       	ld	r25, X
    53a6:	13 97       	sbiw	r26, 0x03	; 3
    53a8:	00 97       	sbiw	r24, 0x00	; 0
    53aa:	19 f0       	breq	.+6      	; 0x53b2 <free+0xd4>
    53ac:	fd 01       	movw	r30, r26
    53ae:	dc 01       	movw	r26, r24
    53b0:	f7 cf       	rjmp	.-18     	; 0x53a0 <free+0xc2>
    53b2:	8d 91       	ld	r24, X+
    53b4:	9c 91       	ld	r25, X
    53b6:	11 97       	sbiw	r26, 0x01	; 1
    53b8:	9d 01       	movw	r18, r26
    53ba:	2e 5f       	subi	r18, 0xFE	; 254
    53bc:	3f 4f       	sbci	r19, 0xFF	; 255
    53be:	82 0f       	add	r24, r18
    53c0:	93 1f       	adc	r25, r19
    53c2:	20 91 3a 23 	lds	r18, 0x233A	; 0x80233a <__brkval>
    53c6:	30 91 3b 23 	lds	r19, 0x233B	; 0x80233b <__brkval+0x1>
    53ca:	28 17       	cp	r18, r24
    53cc:	39 07       	cpc	r19, r25
    53ce:	69 f4       	brne	.+26     	; 0x53ea <free+0x10c>
    53d0:	30 97       	sbiw	r30, 0x00	; 0
    53d2:	29 f4       	brne	.+10     	; 0x53de <free+0x100>
    53d4:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <__flp>
    53d8:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <__flp+0x1>
    53dc:	02 c0       	rjmp	.+4      	; 0x53e2 <free+0x104>
    53de:	12 82       	std	Z+2, r1	; 0x02
    53e0:	13 82       	std	Z+3, r1	; 0x03
    53e2:	a0 93 3a 23 	sts	0x233A, r26	; 0x80233a <__brkval>
    53e6:	b0 93 3b 23 	sts	0x233B, r27	; 0x80233b <__brkval+0x1>
    53ea:	df 91       	pop	r29
    53ec:	cf 91       	pop	r28
    53ee:	08 95       	ret

000053f0 <memset>:
    53f0:	dc 01       	movw	r26, r24
    53f2:	01 c0       	rjmp	.+2      	; 0x53f6 <memset+0x6>
    53f4:	6d 93       	st	X+, r22
    53f6:	41 50       	subi	r20, 0x01	; 1
    53f8:	50 40       	sbci	r21, 0x00	; 0
    53fa:	e0 f7       	brcc	.-8      	; 0x53f4 <memset+0x4>
    53fc:	08 95       	ret

000053fe <_exit>:
    53fe:	f8 94       	cli

00005400 <__stop_program>:
    5400:	ff cf       	rjmp	.-2      	; 0x5400 <__stop_program>
