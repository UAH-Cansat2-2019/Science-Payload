
DaiAtlas_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  000034a4  00003538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  00802092  00802092  000035ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c78  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c614  00000000  00000000  000042e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ebc  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001066f  00000000  00000000  000257b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003ff0  00000000  00000000  00035e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003af8a  00000000  00000000  00039e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017b4f  00000000  00000000  00074d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bf8  00000000  00000000  0008c8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000078f3  00000000  00000000  0008d4e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	ea c5       	rjmp	.+3028   	; 0xbfe <__vector_10>
      2a:	00 00       	nop
      2c:	0b c6       	rjmp	.+3094   	; 0xc44 <__vector_11>
      2e:	00 00       	nop
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	22 c2       	rjmp	.+1092   	; 0x47a <__vector_13>
      36:	00 00       	nop
      38:	89 c6       	rjmp	.+3346   	; 0xd4c <__vector_14>
      3a:	00 00       	nop
      3c:	bf c6       	rjmp	.+3454   	; 0xdbc <__vector_15>
      3e:	00 00       	nop
      40:	f5 c6       	rjmp	.+3562   	; 0xe2c <__vector_16>
      42:	00 00       	nop
      44:	2b c7       	rjmp	.+3670   	; 0xe9c <__vector_17>
      46:	00 00       	nop
      48:	61 c7       	rjmp	.+3778   	; 0xf0c <__vector_18>
      4a:	00 00       	nop
      4c:	97 c7       	rjmp	.+3886   	; 0xf7c <__vector_19>
      4e:	00 00       	nop
      50:	cd c7       	rjmp	.+3994   	; 0xfec <__vector_20>
      52:	00 00       	nop
      54:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_21>
      58:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_22>
      5c:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	56 c1       	rjmp	.+684    	; 0x34a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	54 c1       	rjmp	.+680    	; 0x34a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	52 c1       	rjmp	.+676    	; 0x34a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	50 c1       	rjmp	.+672    	; 0x34a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	12 c2       	rjmp	.+1060   	; 0x4de <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__vector_47>
      c0:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__vector_48>
      c4:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__vector_49>
      c8:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_50>
      cc:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_51>
      d0:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_52>
      d4:	3a c1       	rjmp	.+628    	; 0x34a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	38 c1       	rjmp	.+624    	; 0x34a <__bad_interrupt>
      da:	00 00       	nop
      dc:	36 c1       	rjmp	.+620    	; 0x34a <__bad_interrupt>
      de:	00 00       	nop
      e0:	34 c1       	rjmp	.+616    	; 0x34a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2a c1       	rjmp	.+596    	; 0x34a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	16 c4       	rjmp	.+2092   	; 0x94a <__vector_71>
     11e:	00 00       	nop
     120:	51 c4       	rjmp	.+2210   	; 0x9c4 <__vector_72>
     122:	00 00       	nop
     124:	8c c4       	rjmp	.+2328   	; 0xa3e <__vector_73>
     126:	00 00       	nop
     128:	c7 c4       	rjmp	.+2446   	; 0xab8 <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c c1       	rjmp	.+536    	; 0x34a <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_77>
     138:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_78>
     13c:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_79>
     140:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_80>
     144:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_81>
     148:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_82>
     14c:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_83>
     150:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_84>
     154:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_85>
     158:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__vector_91>
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	ce c0       	rjmp	.+412    	; 0x34a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	cc c0       	rjmp	.+408    	; 0x34a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ca c0       	rjmp	.+404    	; 0x34a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c8 c0       	rjmp	.+400    	; 0x34a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c6 c0       	rjmp	.+396    	; 0x34a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c4 c0       	rjmp	.+392    	; 0x34a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c2 c0       	rjmp	.+388    	; 0x34a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c0 c0       	rjmp	.+384    	; 0x34a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	be c0       	rjmp	.+380    	; 0x34a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	bc c0       	rjmp	.+376    	; 0x34a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ba c0       	rjmp	.+372    	; 0x34a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b6 c0       	rjmp	.+364    	; 0x34a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e4 ea       	ldi	r30, 0xA4	; 164
     31e:	f4 e3       	ldi	r31, 0x34	; 52
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a2 39       	cpi	r26, 0x92	; 146
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	21 e2       	ldi	r18, 0x21	; 33
     334:	a2 e9       	ldi	r26, 0x92	; 146
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a4 31       	cpi	r26, 0x14	; 20
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 6d 13 	call	0x26da	; 0x26da <main>
     346:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     350:	e0 91 92 20 	lds	r30, 0x2092	; 0x802092 <__data_end>
     354:	f0 91 93 20 	lds	r31, 0x2093	; 0x802093 <__data_end+0x1>
     358:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     35a:	83 ff       	sbrs	r24, 3
     35c:	08 c0       	rjmp	.+16     	; 0x36e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     35e:	88 60       	ori	r24, 0x08	; 8
     360:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     366:	86 ef       	ldi	r24, 0xF6	; 246
     368:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <__data_end+0xa>
     36c:	83 c0       	rjmp	.+262    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     36e:	98 2f       	mov	r25, r24
     370:	94 71       	andi	r25, 0x14	; 20
     372:	31 f0       	breq	.+12     	; 0x380 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <__data_end+0xa>
     37e:	7a c0       	rjmp	.+244    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     380:	86 ff       	sbrs	r24, 6
     382:	43 c0       	rjmp	.+134    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     384:	c2 e9       	ldi	r28, 0x92	; 146
     386:	d0 e2       	ldi	r29, 0x20	; 32
     388:	aa 81       	ldd	r26, Y+2	; 0x02
     38a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     38c:	8c 81       	ldd	r24, Y+4	; 0x04
     38e:	9d 81       	ldd	r25, Y+5	; 0x05
     390:	14 96       	adiw	r26, 0x04	; 4
     392:	2d 91       	ld	r18, X+
     394:	3c 91       	ld	r19, X
     396:	15 97       	sbiw	r26, 0x05	; 5
     398:	82 17       	cp	r24, r18
     39a:	93 07       	cpc	r25, r19
     39c:	6c f4       	brge	.+26     	; 0x3b8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     39e:	9c 01       	movw	r18, r24
     3a0:	2f 5f       	subi	r18, 0xFF	; 255
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	20 93 96 20 	sts	0x2096, r18	; 0x802096 <__data_end+0x4>
     3a8:	30 93 97 20 	sts	0x2097, r19	; 0x802097 <__data_end+0x5>
     3ac:	a8 0f       	add	r26, r24
     3ae:	b9 1f       	adc	r27, r25
     3b0:	11 96       	adiw	r26, 0x01	; 1
     3b2:	8c 91       	ld	r24, X
     3b4:	87 83       	std	Z+7, r24	; 0x07
     3b6:	5e c0       	rjmp	.+188    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	} else if (transfer.data_count < pkg->length) {
     3b8:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <__data_end+0x6>
     3bc:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <__data_end+0x7>
     3c0:	18 96       	adiw	r26, 0x08	; 8
     3c2:	2d 91       	ld	r18, X+
     3c4:	3c 91       	ld	r19, X
     3c6:	19 97       	sbiw	r26, 0x09	; 9
     3c8:	82 17       	cp	r24, r18
     3ca:	93 07       	cpc	r25, r19
     3cc:	c8 f4       	brcc	.+50     	; 0x400 <__LOCK_REGION_LENGTH__>

		if (transfer.read) {
     3ce:	20 91 9a 20 	lds	r18, 0x209A	; 0x80209a <__data_end+0x8>
     3d2:	22 23       	and	r18, r18
     3d4:	21 f0       	breq	.+8      	; 0x3de <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     3d6:	86 81       	ldd	r24, Z+6	; 0x06
     3d8:	81 60       	ori	r24, 0x01	; 1
     3da:	86 83       	std	Z+6, r24	; 0x06
     3dc:	4b c0       	rjmp	.+150    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

		} else {
			const uint8_t * const data = pkg->buffer;
     3de:	16 96       	adiw	r26, 0x06	; 6
     3e0:	2d 91       	ld	r18, X+
     3e2:	3c 91       	ld	r19, X
     3e4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     3e6:	ac 01       	movw	r20, r24
     3e8:	4f 5f       	subi	r20, 0xFF	; 255
     3ea:	5f 4f       	sbci	r21, 0xFF	; 255
     3ec:	40 93 98 20 	sts	0x2098, r20	; 0x802098 <__data_end+0x6>
     3f0:	50 93 99 20 	sts	0x2099, r21	; 0x802099 <__data_end+0x7>
     3f4:	d9 01       	movw	r26, r18
     3f6:	a8 0f       	add	r26, r24
     3f8:	b9 1f       	adc	r27, r25
     3fa:	8c 91       	ld	r24, X
     3fc:	87 83       	std	Z+7, r24	; 0x07
     3fe:	3a c0       	rjmp	.+116    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     404:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <__data_end+0xa>
     408:	35 c0       	rjmp	.+106    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     40a:	88 23       	and	r24, r24
     40c:	84 f5       	brge	.+96     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     40e:	a2 e9       	ldi	r26, 0x92	; 146
     410:	b0 e2       	ldi	r27, 0x20	; 32
     412:	12 96       	adiw	r26, 0x02	; 2
     414:	cd 91       	ld	r28, X+
     416:	dc 91       	ld	r29, X
     418:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     41a:	16 96       	adiw	r26, 0x06	; 6
     41c:	8d 91       	ld	r24, X+
     41e:	9c 91       	ld	r25, X
     420:	17 97       	sbiw	r26, 0x07	; 7
     422:	28 85       	ldd	r18, Y+8	; 0x08
     424:	39 85       	ldd	r19, Y+9	; 0x09
     426:	82 17       	cp	r24, r18
     428:	93 07       	cpc	r25, r19
     42a:	d8 f4       	brcc	.+54     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

		uint8_t * const data = pkg->buffer;
     42c:	6e 81       	ldd	r22, Y+6	; 0x06
     42e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     430:	9c 01       	movw	r18, r24
     432:	2f 5f       	subi	r18, 0xFF	; 255
     434:	3f 4f       	sbci	r19, 0xFF	; 255
     436:	20 93 98 20 	sts	0x2098, r18	; 0x802098 <__data_end+0x6>
     43a:	30 93 99 20 	sts	0x2099, r19	; 0x802099 <__data_end+0x7>
     43e:	47 81       	ldd	r20, Z+7	; 0x07
     440:	db 01       	movw	r26, r22
     442:	a8 0f       	add	r26, r24
     444:	b9 1f       	adc	r27, r25
     446:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     448:	88 85       	ldd	r24, Y+8	; 0x08
     44a:	99 85       	ldd	r25, Y+9	; 0x09
     44c:	28 17       	cp	r18, r24
     44e:	39 07       	cpc	r19, r25
     450:	18 f4       	brcc	.+6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	83 83       	std	Z+3, r24	; 0x03
     456:	0e c0       	rjmp	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     45c:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <__data_end+0xa>
     460:	09 c0       	rjmp	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     466:	89 ef       	ldi	r24, 0xF9	; 249
     468:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <__data_end+0xa>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     46e:	8b ef       	ldi	r24, 0xFB	; 251
     470:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <__data_end+0xa>
	}
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	08 b6       	in	r0, 0x38	; 56
     486:	0f 92       	push	r0
     488:	18 be       	out	0x38, r1	; 56
     48a:	09 b6       	in	r0, 0x39	; 57
     48c:	0f 92       	push	r0
     48e:	19 be       	out	0x39, r1	; 57
     490:	0b b6       	in	r0, 0x3b	; 59
     492:	0f 92       	push	r0
     494:	1b be       	out	0x3b, r1	; 59
     496:	2f 93       	push	r18
     498:	3f 93       	push	r19
     49a:	4f 93       	push	r20
     49c:	5f 93       	push	r21
     49e:	6f 93       	push	r22
     4a0:	7f 93       	push	r23
     4a2:	8f 93       	push	r24
     4a4:	9f 93       	push	r25
     4a6:	af 93       	push	r26
     4a8:	bf 93       	push	r27
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
     4ae:	4e df       	rcall	.-356    	; 0x34c <twim_interrupt_handler>
     4b0:	ff 91       	pop	r31
     4b2:	ef 91       	pop	r30
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	7f 91       	pop	r23
     4be:	6f 91       	pop	r22
     4c0:	5f 91       	pop	r21
     4c2:	4f 91       	pop	r20
     4c4:	3f 91       	pop	r19
     4c6:	2f 91       	pop	r18
     4c8:	0f 90       	pop	r0
     4ca:	0b be       	out	0x3b, r0	; 59
     4cc:	0f 90       	pop	r0
     4ce:	09 be       	out	0x39, r0	; 57
     4d0:	0f 90       	pop	r0
     4d2:	08 be       	out	0x38, r0	; 56
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	08 b6       	in	r0, 0x38	; 56
     4ea:	0f 92       	push	r0
     4ec:	18 be       	out	0x38, r1	; 56
     4ee:	09 b6       	in	r0, 0x39	; 57
     4f0:	0f 92       	push	r0
     4f2:	19 be       	out	0x39, r1	; 57
     4f4:	0b b6       	in	r0, 0x3b	; 59
     4f6:	0f 92       	push	r0
     4f8:	1b be       	out	0x3b, r1	; 59
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	4f 93       	push	r20
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
     512:	1c df       	rcall	.-456    	; 0x34c <twim_interrupt_handler>
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	bf 91       	pop	r27
     51a:	af 91       	pop	r26
     51c:	9f 91       	pop	r25
     51e:	8f 91       	pop	r24
     520:	7f 91       	pop	r23
     522:	6f 91       	pop	r22
     524:	5f 91       	pop	r21
     526:	4f 91       	pop	r20
     528:	3f 91       	pop	r19
     52a:	2f 91       	pop	r18
     52c:	0f 90       	pop	r0
     52e:	0b be       	out	0x3b, r0	; 59
     530:	0f 90       	pop	r0
     532:	09 be       	out	0x39, r0	; 57
     534:	0f 90       	pop	r0
     536:	08 be       	out	0x38, r0	; 56
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     542:	fc 01       	movw	r30, r24
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	95 ff       	sbrs	r25, 5
     548:	fd cf       	rjmp	.-6      	; 0x544 <usart_putchar+0x2>
     54a:	60 83       	st	Z, r22
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	08 95       	ret

00000552 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     552:	4f 92       	push	r4
     554:	5f 92       	push	r5
     556:	6f 92       	push	r6
     558:	7f 92       	push	r7
     55a:	8f 92       	push	r8
     55c:	9f 92       	push	r9
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	7c 01       	movw	r14, r24
     56e:	4a 01       	movw	r8, r20
     570:	5b 01       	movw	r10, r22
     572:	28 01       	movw	r4, r16
     574:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     576:	fc 01       	movw	r30, r24
     578:	84 81       	ldd	r24, Z+4	; 0x04
     57a:	82 ff       	sbrs	r24, 2
     57c:	16 c0       	rjmp	.+44     	; 0x5aa <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     57e:	d9 01       	movw	r26, r18
     580:	c8 01       	movw	r24, r16
     582:	68 94       	set
     584:	12 f8       	bld	r1, 2
     586:	b6 95       	lsr	r27
     588:	a7 95       	ror	r26
     58a:	97 95       	ror	r25
     58c:	87 95       	ror	r24
     58e:	16 94       	lsr	r1
     590:	d1 f7       	brne	.-12     	; 0x586 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     592:	b9 01       	movw	r22, r18
     594:	a8 01       	movw	r20, r16
     596:	03 2e       	mov	r0, r19
     598:	36 e1       	ldi	r19, 0x16	; 22
     59a:	76 95       	lsr	r23
     59c:	67 95       	ror	r22
     59e:	57 95       	ror	r21
     5a0:	47 95       	ror	r20
     5a2:	3a 95       	dec	r19
     5a4:	d1 f7       	brne	.-12     	; 0x59a <usart_set_baudrate+0x48>
     5a6:	30 2d       	mov	r19, r0
     5a8:	15 c0       	rjmp	.+42     	; 0x5d4 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     5aa:	d9 01       	movw	r26, r18
     5ac:	c8 01       	movw	r24, r16
     5ae:	68 94       	set
     5b0:	13 f8       	bld	r1, 3
     5b2:	b6 95       	lsr	r27
     5b4:	a7 95       	ror	r26
     5b6:	97 95       	ror	r25
     5b8:	87 95       	ror	r24
     5ba:	16 94       	lsr	r1
     5bc:	d1 f7       	brne	.-12     	; 0x5b2 <usart_set_baudrate+0x60>
		min_rate /= 2;
     5be:	b9 01       	movw	r22, r18
     5c0:	a8 01       	movw	r20, r16
     5c2:	03 2e       	mov	r0, r19
     5c4:	37 e1       	ldi	r19, 0x17	; 23
     5c6:	76 95       	lsr	r23
     5c8:	67 95       	ror	r22
     5ca:	57 95       	ror	r21
     5cc:	47 95       	ror	r20
     5ce:	3a 95       	dec	r19
     5d0:	d1 f7       	brne	.-12     	; 0x5c6 <usart_set_baudrate+0x74>
     5d2:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5d4:	88 15       	cp	r24, r8
     5d6:	99 05       	cpc	r25, r9
     5d8:	aa 05       	cpc	r26, r10
     5da:	bb 05       	cpc	r27, r11
     5dc:	08 f4       	brcc	.+2      	; 0x5e0 <usart_set_baudrate+0x8e>
     5de:	a6 c0       	rjmp	.+332    	; 0x72c <usart_set_baudrate+0x1da>
     5e0:	84 16       	cp	r8, r20
     5e2:	95 06       	cpc	r9, r21
     5e4:	a6 06       	cpc	r10, r22
     5e6:	b7 06       	cpc	r11, r23
     5e8:	08 f4       	brcc	.+2      	; 0x5ec <usart_set_baudrate+0x9a>
     5ea:	a2 c0       	rjmp	.+324    	; 0x730 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5ec:	f7 01       	movw	r30, r14
     5ee:	84 81       	ldd	r24, Z+4	; 0x04
     5f0:	82 fd       	sbrc	r24, 2
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <usart_set_baudrate+0xaa>
		baud *= 2;
     5f4:	88 0c       	add	r8, r8
     5f6:	99 1c       	adc	r9, r9
     5f8:	aa 1c       	adc	r10, r10
     5fa:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     5fc:	c3 01       	movw	r24, r6
     5fe:	b2 01       	movw	r22, r4
     600:	a5 01       	movw	r20, r10
     602:	94 01       	movw	r18, r8
     604:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     608:	2f 3f       	cpi	r18, 0xFF	; 255
     60a:	31 05       	cpc	r19, r1
     60c:	41 05       	cpc	r20, r1
     60e:	51 05       	cpc	r21, r1
     610:	08 f4       	brcc	.+2      	; 0x614 <usart_set_baudrate+0xc2>
     612:	90 c0       	rjmp	.+288    	; 0x734 <usart_set_baudrate+0x1e2>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	a0 e0       	ldi	r26, 0x00	; 0
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	c9 ef       	ldi	r28, 0xF9	; 249
     61e:	05 c0       	rjmp	.+10     	; 0x62a <usart_set_baudrate+0xd8>
     620:	28 17       	cp	r18, r24
     622:	39 07       	cpc	r19, r25
     624:	4a 07       	cpc	r20, r26
     626:	5b 07       	cpc	r21, r27
     628:	58 f0       	brcs	.+22     	; 0x640 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	aa 1f       	adc	r26, r26
     630:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     632:	cd 3f       	cpi	r28, 0xFD	; 253
     634:	0c f4       	brge	.+2      	; 0x638 <usart_set_baudrate+0xe6>
			limit |= 1;
     636:	81 60       	ori	r24, 0x01	; 1
     638:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     63a:	c7 30       	cpi	r28, 0x07	; 7
     63c:	89 f7       	brne	.-30     	; 0x620 <usart_set_baudrate+0xce>
     63e:	4f c0       	rjmp	.+158    	; 0x6de <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     640:	cc 23       	and	r28, r28
     642:	0c f0       	brlt	.+2      	; 0x646 <usart_set_baudrate+0xf4>
     644:	4c c0       	rjmp	.+152    	; 0x6de <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     646:	d5 01       	movw	r26, r10
     648:	c4 01       	movw	r24, r8
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	aa 1f       	adc	r26, r26
     650:	bb 1f       	adc	r27, r27
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	aa 1f       	adc	r26, r26
     658:	bb 1f       	adc	r27, r27
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	aa 1f       	adc	r26, r26
     660:	bb 1f       	adc	r27, r27
     662:	48 1a       	sub	r4, r24
     664:	59 0a       	sbc	r5, r25
     666:	6a 0a       	sbc	r6, r26
     668:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     66a:	ce 3f       	cpi	r28, 0xFE	; 254
     66c:	f4 f4       	brge	.+60     	; 0x6aa <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     66e:	8d ef       	ldi	r24, 0xFD	; 253
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	8c 1b       	sub	r24, r28
     674:	91 09       	sbc	r25, r1
     676:	c7 fd       	sbrc	r28, 7
     678:	93 95       	inc	r25
     67a:	04 c0       	rjmp	.+8      	; 0x684 <usart_set_baudrate+0x132>
     67c:	44 0c       	add	r4, r4
     67e:	55 1c       	adc	r5, r5
     680:	66 1c       	adc	r6, r6
     682:	77 1c       	adc	r7, r7
     684:	8a 95       	dec	r24
     686:	d2 f7       	brpl	.-12     	; 0x67c <usart_set_baudrate+0x12a>
     688:	d5 01       	movw	r26, r10
     68a:	c4 01       	movw	r24, r8
     68c:	b6 95       	lsr	r27
     68e:	a7 95       	ror	r26
     690:	97 95       	ror	r25
     692:	87 95       	ror	r24
     694:	bc 01       	movw	r22, r24
     696:	cd 01       	movw	r24, r26
     698:	64 0d       	add	r22, r4
     69a:	75 1d       	adc	r23, r5
     69c:	86 1d       	adc	r24, r6
     69e:	97 1d       	adc	r25, r7
     6a0:	a5 01       	movw	r20, r10
     6a2:	94 01       	movw	r18, r8
     6a4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
     6a8:	37 c0       	rjmp	.+110    	; 0x718 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	8c 0f       	add	r24, r28
     6ae:	a5 01       	movw	r20, r10
     6b0:	94 01       	movw	r18, r8
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <usart_set_baudrate+0x16a>
     6b4:	22 0f       	add	r18, r18
     6b6:	33 1f       	adc	r19, r19
     6b8:	44 1f       	adc	r20, r20
     6ba:	55 1f       	adc	r21, r21
     6bc:	8a 95       	dec	r24
     6be:	d2 f7       	brpl	.-12     	; 0x6b4 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     6c0:	da 01       	movw	r26, r20
     6c2:	c9 01       	movw	r24, r18
     6c4:	b6 95       	lsr	r27
     6c6:	a7 95       	ror	r26
     6c8:	97 95       	ror	r25
     6ca:	87 95       	ror	r24
     6cc:	bc 01       	movw	r22, r24
     6ce:	cd 01       	movw	r24, r26
     6d0:	64 0d       	add	r22, r4
     6d2:	75 1d       	adc	r23, r5
     6d4:	86 1d       	adc	r24, r6
     6d6:	97 1d       	adc	r25, r7
     6d8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
     6dc:	1d c0       	rjmp	.+58     	; 0x718 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	8c 0f       	add	r24, r28
     6e2:	a5 01       	movw	r20, r10
     6e4:	94 01       	movw	r18, r8
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <usart_set_baudrate+0x19e>
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	44 1f       	adc	r20, r20
     6ee:	55 1f       	adc	r21, r21
     6f0:	8a 95       	dec	r24
     6f2:	d2 f7       	brpl	.-12     	; 0x6e8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     6f4:	da 01       	movw	r26, r20
     6f6:	c9 01       	movw	r24, r18
     6f8:	b6 95       	lsr	r27
     6fa:	a7 95       	ror	r26
     6fc:	97 95       	ror	r25
     6fe:	87 95       	ror	r24
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	64 0d       	add	r22, r4
     706:	75 1d       	adc	r23, r5
     708:	86 1d       	adc	r24, r6
     70a:	97 1d       	adc	r25, r7
     70c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
     710:	21 50       	subi	r18, 0x01	; 1
     712:	31 09       	sbc	r19, r1
     714:	41 09       	sbc	r20, r1
     716:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     718:	83 2f       	mov	r24, r19
     71a:	8f 70       	andi	r24, 0x0F	; 15
     71c:	c2 95       	swap	r28
     71e:	c0 7f       	andi	r28, 0xF0	; 240
     720:	c8 2b       	or	r28, r24
     722:	f7 01       	movw	r30, r14
     724:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     726:	26 83       	std	Z+6, r18	; 0x06

	return true;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	18 c0       	rjmp	.+48     	; 0x75c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	16 c0       	rjmp	.+44     	; 0x75c <usart_set_baudrate+0x20a>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	14 c0       	rjmp	.+40     	; 0x75c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     734:	d5 01       	movw	r26, r10
     736:	c4 01       	movw	r24, r8
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	aa 1f       	adc	r26, r26
     73e:	bb 1f       	adc	r27, r27
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	aa 1f       	adc	r26, r26
     746:	bb 1f       	adc	r27, r27
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	aa 1f       	adc	r26, r26
     74e:	bb 1f       	adc	r27, r27
     750:	48 1a       	sub	r4, r24
     752:	59 0a       	sbc	r5, r25
     754:	6a 0a       	sbc	r6, r26
     756:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     758:	c9 ef       	ldi	r28, 0xF9	; 249
     75a:	89 cf       	rjmp	.-238    	; 0x66e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	08 95       	ret

00000778 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	09 f4       	brne	.+2      	; 0x78a <usart_init_rs232+0x12>
     788:	be c0       	rjmp	.+380    	; 0x906 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     78a:	80 3c       	cpi	r24, 0xC0	; 192
     78c:	91 05       	cpc	r25, r1
     78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     790:	60 e1       	ldi	r22, 0x10	; 16
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	1e d2       	rcall	.+1084   	; 0xbd2 <sysclk_enable_module>
     796:	b7 c0       	rjmp	.+366    	; 0x906 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     798:	c1 15       	cp	r28, r1
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	d8 07       	cpc	r29, r24
     79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     7a0:	64 e0       	ldi	r22, 0x04	; 4
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	16 d2       	rcall	.+1068   	; 0xbd2 <sysclk_enable_module>
     7a6:	af c0       	rjmp	.+350    	; 0x906 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     7a8:	c0 38       	cpi	r28, 0x80	; 128
     7aa:	e1 e0       	ldi	r30, 0x01	; 1
     7ac:	de 07       	cpc	r29, r30
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     7b0:	62 e0       	ldi	r22, 0x02	; 2
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	0e d2       	rcall	.+1052   	; 0xbd2 <sysclk_enable_module>
     7b6:	a7 c0       	rjmp	.+334    	; 0x906 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     7b8:	c1 15       	cp	r28, r1
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x50>
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	06 d2       	rcall	.+1036   	; 0xbd2 <sysclk_enable_module>
     7c6:	9f c0       	rjmp	.+318    	; 0x906 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     7c8:	c0 38       	cpi	r28, 0x80	; 128
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x60>
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	fe d1       	rcall	.+1020   	; 0xbd2 <sysclk_enable_module>
     7d6:	97 c0       	rjmp	.+302    	; 0x906 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     7d8:	c1 15       	cp	r28, r1
     7da:	e2 e0       	ldi	r30, 0x02	; 2
     7dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x70>
     7e0:	62 e0       	ldi	r22, 0x02	; 2
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	f6 d1       	rcall	.+1004   	; 0xbd2 <sysclk_enable_module>
     7e6:	8f c0       	rjmp	.+286    	; 0x906 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     7e8:	c0 32       	cpi	r28, 0x20	; 32
     7ea:	f3 e0       	ldi	r31, 0x03	; 3
     7ec:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0x80>
     7f0:	64 e0       	ldi	r22, 0x04	; 4
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	ee d1       	rcall	.+988    	; 0xbd2 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     7f6:	87 c0       	rjmp	.+270    	; 0x906 <usart_init_rs232+0x18e>
     7f8:	c1 15       	cp	r28, r1
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0x90>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	e6 d1       	rcall	.+972    	; 0xbd2 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     806:	7f c0       	rjmp	.+254    	; 0x906 <usart_init_rs232+0x18e>
     808:	c1 15       	cp	r28, r1
     80a:	e9 e0       	ldi	r30, 0x09	; 9
     80c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xa0>
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	84 e0       	ldi	r24, 0x04	; 4
     814:	de d1       	rcall	.+956    	; 0xbd2 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     816:	77 c0       	rjmp	.+238    	; 0x906 <usart_init_rs232+0x18e>
     818:	c1 15       	cp	r28, r1
     81a:	fa e0       	ldi	r31, 0x0A	; 10
     81c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xb0>
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	85 e0       	ldi	r24, 0x05	; 5
     824:	d6 d1       	rcall	.+940    	; 0xbd2 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     826:	6f c0       	rjmp	.+222    	; 0x906 <usart_init_rs232+0x18e>
     828:	c0 34       	cpi	r28, 0x40	; 64
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xc0>
     830:	62 e0       	ldi	r22, 0x02	; 2
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	ce d1       	rcall	.+924    	; 0xbd2 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     836:	67 c0       	rjmp	.+206    	; 0x906 <usart_init_rs232+0x18e>
     838:	c0 34       	cpi	r28, 0x40	; 64
     83a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     83c:	de 07       	cpc	r29, r30
     83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xd0>
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	c6 d1       	rcall	.+908    	; 0xbd2 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     846:	5f c0       	rjmp	.+190    	; 0x906 <usart_init_rs232+0x18e>
     848:	c0 39       	cpi	r28, 0x90	; 144
     84a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     84c:	df 07       	cpc	r29, r31
     84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0xe0>
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	be d1       	rcall	.+892    	; 0xbd2 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     856:	57 c0       	rjmp	.+174    	; 0x906 <usart_init_rs232+0x18e>
     858:	c0 39       	cpi	r28, 0x90	; 144
     85a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     85c:	d8 07       	cpc	r29, r24
     85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0xf0>
     860:	64 e0       	ldi	r22, 0x04	; 4
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	b6 d1       	rcall	.+876    	; 0xbd2 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     866:	4f c0       	rjmp	.+158    	; 0x906 <usart_init_rs232+0x18e>
     868:	c0 39       	cpi	r28, 0x90	; 144
     86a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     86c:	de 07       	cpc	r29, r30
     86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x100>
     870:	64 e0       	ldi	r22, 0x04	; 4
     872:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     874:	ae d1       	rcall	.+860    	; 0xbd2 <sysclk_enable_module>
     876:	47 c0       	rjmp	.+142    	; 0x906 <usart_init_rs232+0x18e>
     878:	c0 3c       	cpi	r28, 0xC0	; 192
     87a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     87c:	df 07       	cpc	r29, r31
     87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x110>
     880:	68 e0       	ldi	r22, 0x08	; 8
     882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     884:	a6 d1       	rcall	.+844    	; 0xbd2 <sysclk_enable_module>
     886:	3f c0       	rjmp	.+126    	; 0x906 <usart_init_rs232+0x18e>
     888:	c0 3c       	cpi	r28, 0xC0	; 192
     88a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     88c:	d8 07       	cpc	r29, r24
     88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x120>
     890:	68 e0       	ldi	r22, 0x08	; 8
     892:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     894:	9e d1       	rcall	.+828    	; 0xbd2 <sysclk_enable_module>
     896:	37 c0       	rjmp	.+110    	; 0x906 <usart_init_rs232+0x18e>
     898:	c0 3a       	cpi	r28, 0xA0	; 160
     89a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     89c:	de 07       	cpc	r29, r30
     89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x130>
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     8a4:	96 d1       	rcall	.+812    	; 0xbd2 <sysclk_enable_module>
     8a6:	2f c0       	rjmp	.+94     	; 0x906 <usart_init_rs232+0x18e>
     8a8:	c0 3a       	cpi	r28, 0xA0	; 160
     8aa:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     8ac:	df 07       	cpc	r29, r31
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x140>
     8b0:	60 e1       	ldi	r22, 0x10	; 16
     8b2:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     8b4:	8e d1       	rcall	.+796    	; 0xbd2 <sysclk_enable_module>
     8b6:	27 c0       	rjmp	.+78     	; 0x906 <usart_init_rs232+0x18e>
     8b8:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     8ba:	8a e0       	ldi	r24, 0x0A	; 10
     8bc:	d8 07       	cpc	r29, r24
     8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x150>
     8c0:	60 e1       	ldi	r22, 0x10	; 16
     8c2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     8c4:	86 d1       	rcall	.+780    	; 0xbd2 <sysclk_enable_module>
     8c6:	1f c0       	rjmp	.+62     	; 0x906 <usart_init_rs232+0x18e>
     8c8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     8ca:	e8 e0       	ldi	r30, 0x08	; 8
     8cc:	de 07       	cpc	r29, r30
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x160>
     8d0:	60 e2       	ldi	r22, 0x20	; 32
     8d2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     8d4:	7e d1       	rcall	.+764    	; 0xbd2 <sysclk_enable_module>
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <usart_init_rs232+0x18e>
     8d8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     8da:	f9 e0       	ldi	r31, 0x09	; 9
     8dc:	df 07       	cpc	r29, r31
     8de:	21 f4       	brne	.+8      	; 0x8e8 <usart_init_rs232+0x170>
     8e0:	60 e2       	ldi	r22, 0x20	; 32
     8e2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     8e4:	76 d1       	rcall	.+748    	; 0xbd2 <sysclk_enable_module>
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <usart_init_rs232+0x18e>
     8e8:	c0 38       	cpi	r28, 0x80	; 128
     8ea:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     8ec:	d8 07       	cpc	r29, r24
     8ee:	21 f4       	brne	.+8      	; 0x8f8 <usart_init_rs232+0x180>
     8f0:	60 e4       	ldi	r22, 0x40	; 64
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	6e d1       	rcall	.+732    	; 0xbd2 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <usart_init_rs232+0x18e>
     8f8:	c0 3a       	cpi	r28, 0xA0	; 160
     8fa:	e4 e0       	ldi	r30, 0x04	; 4
     8fc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     8fe:	19 f4       	brne	.+6      	; 0x906 <usart_init_rs232+0x18e>
     900:	60 e4       	ldi	r22, 0x40	; 64
     902:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     904:	66 d1       	rcall	.+716    	; 0xbd2 <sysclk_enable_module>
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     90a:	8d 83       	std	Y+5, r24	; 0x05
     90c:	f8 01       	movw	r30, r16
     90e:	95 81       	ldd	r25, Z+5	; 0x05
     910:	84 81       	ldd	r24, Z+4	; 0x04
     912:	89 2b       	or	r24, r25
     914:	96 81       	ldd	r25, Z+6	; 0x06
     916:	91 11       	cpse	r25, r1
     918:	98 e0       	ldi	r25, 0x08	; 8
     91a:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     91c:	8d 83       	std	Y+5, r24	; 0x05
     91e:	f8 01       	movw	r30, r16
     920:	40 81       	ld	r20, Z
     922:	51 81       	ldd	r21, Z+1	; 0x01
     924:	62 81       	ldd	r22, Z+2	; 0x02
     926:	73 81       	ldd	r23, Z+3	; 0x03
     928:	00 e8       	ldi	r16, 0x80	; 128
     92a:	14 e8       	ldi	r17, 0x84	; 132
     92c:	2e e1       	ldi	r18, 0x1E	; 30
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	ce 01       	movw	r24, r28
     932:	0f de       	rcall	.-994    	; 0x552 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     934:	9c 81       	ldd	r25, Y+4	; 0x04
     936:	98 60       	ori	r25, 0x08	; 8
     938:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	90 61       	ori	r25, 0x10	; 16
     93e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	08 95       	ret

0000094a <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	08 b6       	in	r0, 0x38	; 56
     956:	0f 92       	push	r0
     958:	18 be       	out	0x38, r1	; 56
     95a:	09 b6       	in	r0, 0x39	; 57
     95c:	0f 92       	push	r0
     95e:	19 be       	out	0x39, r1	; 57
     960:	0b b6       	in	r0, 0x3b	; 59
     962:	0f 92       	push	r0
     964:	1b be       	out	0x3b, r1	; 59
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     97e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     982:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     986:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <adca_callback>
     98a:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <adca_callback+0x1>
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	19 95       	eicall
}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0b be       	out	0x3b, r0	; 59
     9b2:	0f 90       	pop	r0
     9b4:	09 be       	out	0x39, r0	; 57
     9b6:	0f 90       	pop	r0
     9b8:	08 be       	out	0x38, r0	; 56
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	08 b6       	in	r0, 0x38	; 56
     9d0:	0f 92       	push	r0
     9d2:	18 be       	out	0x38, r1	; 56
     9d4:	09 b6       	in	r0, 0x39	; 57
     9d6:	0f 92       	push	r0
     9d8:	19 be       	out	0x39, r1	; 57
     9da:	0b b6       	in	r0, 0x3b	; 59
     9dc:	0f 92       	push	r0
     9de:	1b be       	out	0x3b, r1	; 59
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     9f8:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     9fc:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     a00:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <adca_callback>
     a04:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <adca_callback+0x1>
     a08:	62 e0       	ldi	r22, 0x02	; 2
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	19 95       	eicall
}
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	0f 90       	pop	r0
     a2a:	0b be       	out	0x3b, r0	; 59
     a2c:	0f 90       	pop	r0
     a2e:	09 be       	out	0x39, r0	; 57
     a30:	0f 90       	pop	r0
     a32:	08 be       	out	0x38, r0	; 56
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	08 b6       	in	r0, 0x38	; 56
     a4a:	0f 92       	push	r0
     a4c:	18 be       	out	0x38, r1	; 56
     a4e:	09 b6       	in	r0, 0x39	; 57
     a50:	0f 92       	push	r0
     a52:	19 be       	out	0x39, r1	; 57
     a54:	0b b6       	in	r0, 0x3b	; 59
     a56:	0f 92       	push	r0
     a58:	1b be       	out	0x3b, r1	; 59
     a5a:	2f 93       	push	r18
     a5c:	3f 93       	push	r19
     a5e:	4f 93       	push	r20
     a60:	5f 93       	push	r21
     a62:	6f 93       	push	r22
     a64:	7f 93       	push	r23
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     a72:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     a76:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     a7a:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <adca_callback>
     a7e:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <adca_callback+0x1>
     a82:	64 e0       	ldi	r22, 0x04	; 4
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	19 95       	eicall
}
     a8a:	ff 91       	pop	r31
     a8c:	ef 91       	pop	r30
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	7f 91       	pop	r23
     a98:	6f 91       	pop	r22
     a9a:	5f 91       	pop	r21
     a9c:	4f 91       	pop	r20
     a9e:	3f 91       	pop	r19
     aa0:	2f 91       	pop	r18
     aa2:	0f 90       	pop	r0
     aa4:	0b be       	out	0x3b, r0	; 59
     aa6:	0f 90       	pop	r0
     aa8:	09 be       	out	0x39, r0	; 57
     aaa:	0f 90       	pop	r0
     aac:	08 be       	out	0x38, r0	; 56
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	08 b6       	in	r0, 0x38	; 56
     ac4:	0f 92       	push	r0
     ac6:	18 be       	out	0x38, r1	; 56
     ac8:	09 b6       	in	r0, 0x39	; 57
     aca:	0f 92       	push	r0
     acc:	19 be       	out	0x39, r1	; 57
     ace:	0b b6       	in	r0, 0x3b	; 59
     ad0:	0f 92       	push	r0
     ad2:	1b be       	out	0x3b, r1	; 59
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     aec:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     af0:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     af4:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <adca_callback>
     af8:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <adca_callback+0x1>
     afc:	68 e0       	ldi	r22, 0x08	; 8
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	19 95       	eicall
}
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0b be       	out	0x3b, r0	; 59
     b20:	0f 90       	pop	r0
     b22:	09 be       	out	0x39, r0	; 57
     b24:	0f 90       	pop	r0
     b26:	08 be       	out	0x38, r0	; 56
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f 90       	pop	r0
     b2e:	1f 90       	pop	r1
     b30:	18 95       	reti

00000b32 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	7c 01       	movw	r14, r24
     b40:	8b 01       	movw	r16, r22
     b42:	ea 01       	movw	r28, r20
	while (len) {
     b44:	20 97       	sbiw	r28, 0x00	; 0
     b46:	39 f0       	breq	.+14     	; 0xb56 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     b48:	f8 01       	movw	r30, r16
     b4a:	61 91       	ld	r22, Z+
     b4c:	8f 01       	movw	r16, r30
     b4e:	c7 01       	movw	r24, r14
     b50:	f8 dc       	rcall	.-1552   	; 0x542 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     b52:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     b54:	c9 f7       	brne	.-14     	; 0xb48 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	08 95       	ret

00000b66 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	1f 92       	push	r1
     b6c:	1f 92       	push	r1
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b78:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     b7c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     b80:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     b84:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     b88:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     b8c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b90:	8f b7       	in	r24, 0x3f	; 63
     b92:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b94:	f8 94       	cli
	return flags;
     b96:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     b98:	e0 e5       	ldi	r30, 0x50	; 80
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ba2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     ba6:	82 ff       	sbrs	r24, 2
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <sysclk_init+0x3e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     baa:	8f b7       	in	r24, 0x3f	; 63
     bac:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     bae:	f8 94       	cli
	return flags;
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
		Assert((ref_id == OSC_ID_RC32KHZ) || (ref_id == OSC_ID_XOSC));
		if (ref_id == OSC_ID_XOSC) {
			osc_enable(OSC_ID_RC32KHZ);
			OSC.DFLLCTRL |= OSC_RC2MCREF_bm;
		} else {
			OSC.DFLLCTRL &= ~(OSC_RC2MCREF_bm);
     bb2:	e0 e5       	ldi	r30, 0x50	; 80
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	86 81       	ldd	r24, Z+6	; 0x06
     bb8:	8e 7f       	andi	r24, 0xFE	; 254
     bba:	86 83       	std	Z+6, r24	; 0x06
		}
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
     bbc:	e8 e6       	ldi	r30, 0x68	; 104
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bc6:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	1f 92       	push	r1
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bdc:	9f b7       	in	r25, 0x3f	; 63
     bde:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     be0:	f8 94       	cli
	return flags;
     be2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     be4:	e8 2f       	mov	r30, r24
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	e0 59       	subi	r30, 0x90	; 144
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 95       	com	r22
     bee:	80 81       	ld	r24, Z
     bf0:	68 23       	and	r22, r24
     bf2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bf4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     bf6:	0f 90       	pop	r0
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	08 b6       	in	r0, 0x38	; 56
     c0a:	0f 92       	push	r0
     c0c:	18 be       	out	0x38, r1	; 56
     c0e:	0b b6       	in	r0, 0x3b	; 59
     c10:	0f 92       	push	r0
     c12:	1b be       	out	0x3b, r1	; 59
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
	rtc_data.counter_high++;
     c1c:	e9 ee       	ldi	r30, 0xE9	; 233
     c1e:	f0 e2       	ldi	r31, 0x20	; 32
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	80 83       	st	Z, r24
     c28:	91 83       	std	Z+1, r25	; 0x01
}
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	0f 90       	pop	r0
     c34:	0b be       	out	0x3b, r0	; 59
     c36:	0f 90       	pop	r0
     c38:	08 be       	out	0x38, r0	; 56
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	08 b6       	in	r0, 0x38	; 56
     c50:	0f 92       	push	r0
     c52:	18 be       	out	0x38, r1	; 56
     c54:	09 b6       	in	r0, 0x39	; 57
     c56:	0f 92       	push	r0
     c58:	19 be       	out	0x39, r1	; 57
     c5a:	0b b6       	in	r0, 0x3b	; 59
     c5c:	0f 92       	push	r0
     c5e:	1b be       	out	0x3b, r1	; 59
     c60:	cf 92       	push	r12
     c62:	df 92       	push	r13
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     c84:	e9 ee       	ldi	r30, 0xE9	; 233
     c86:	f0 e2       	ldi	r31, 0x20	; 32
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	22 81       	ldd	r18, Z+2	; 0x02
     c8e:	33 81       	ldd	r19, Z+3	; 0x03
     c90:	82 17       	cp	r24, r18
     c92:	93 07       	cpc	r25, r19
     c94:	f0 f1       	brcs	.+124    	; 0xd12 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     c9c:	e0 91 ef 20 	lds	r30, 0x20EF	; 0x8020ef <rtc_data+0x6>
     ca0:	f0 91 f0 20 	lds	r31, 0x20F0	; 0x8020f0 <rtc_data+0x7>
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	a9 f1       	breq	.+106    	; 0xd12 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     ca8:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     cac:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	dc 01       	movw	r26, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	88 27       	eor	r24, r24
     cba:	ab 01       	movw	r20, r22
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	8c 01       	movw	r16, r24
     cc2:	9d 01       	movw	r18, r26
     cc4:	04 2b       	or	r16, r20
     cc6:	15 2b       	or	r17, r21
     cc8:	26 2b       	or	r18, r22
     cca:	37 2b       	or	r19, r23
     ccc:	c9 01       	movw	r24, r18
     cce:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     cd0:	a9 ee       	ldi	r26, 0xE9	; 233
     cd2:	b0 e2       	ldi	r27, 0x20	; 32
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	0d 91       	ld	r16, X+
     cd8:	1c 91       	ld	r17, X
     cda:	13 97       	sbiw	r26, 0x03	; 3
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	98 01       	movw	r18, r16
     ce2:	11 27       	eor	r17, r17
     ce4:	00 27       	eor	r16, r16
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	cd 90       	ld	r12, X+
     cea:	dc 90       	ld	r13, X
     cec:	15 97       	sbiw	r26, 0x05	; 5
     cee:	e1 2c       	mov	r14, r1
     cf0:	f1 2c       	mov	r15, r1
     cf2:	0c 29       	or	r16, r12
     cf4:	1d 29       	or	r17, r13
     cf6:	2e 29       	or	r18, r14
     cf8:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     cfa:	06 17       	cp	r16, r22
     cfc:	17 07       	cpc	r17, r23
     cfe:	28 07       	cpc	r18, r24
     d00:	39 07       	cpc	r19, r25
     d02:	30 f0       	brcs	.+12     	; 0xd10 <__vector_11+0xcc>
				count = alarm + 1;
     d04:	c9 01       	movw	r24, r18
     d06:	b8 01       	movw	r22, r16
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	8f 4f       	sbci	r24, 0xFF	; 255
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     d10:	19 95       	eicall
		}
	}
}
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	7f 91       	pop	r23
     d20:	6f 91       	pop	r22
     d22:	5f 91       	pop	r21
     d24:	4f 91       	pop	r20
     d26:	3f 91       	pop	r19
     d28:	2f 91       	pop	r18
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	09 be       	out	0x39, r0	; 57
     d3e:	0f 90       	pop	r0
     d40:	08 be       	out	0x38, r0	; 56
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	1f 90       	pop	r1
     d4a:	18 95       	reti

00000d4c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	08 b6       	in	r0, 0x38	; 56
     d58:	0f 92       	push	r0
     d5a:	18 be       	out	0x38, r1	; 56
     d5c:	09 b6       	in	r0, 0x39	; 57
     d5e:	0f 92       	push	r0
     d60:	19 be       	out	0x39, r1	; 57
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	1b be       	out	0x3b, r1	; 59
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     d80:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcc0_ovf_callback>
     d84:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcc0_ovf_callback+0x1>
     d88:	30 97       	sbiw	r30, 0x00	; 0
     d8a:	09 f0       	breq	.+2      	; 0xd8e <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     d8c:	19 95       	eicall
	}
}
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	0b be       	out	0x3b, r0	; 59
     daa:	0f 90       	pop	r0
     dac:	09 be       	out	0x39, r0	; 57
     dae:	0f 90       	pop	r0
     db0:	08 be       	out	0x38, r0	; 56
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	08 b6       	in	r0, 0x38	; 56
     dc8:	0f 92       	push	r0
     dca:	18 be       	out	0x38, r1	; 56
     dcc:	09 b6       	in	r0, 0x39	; 57
     dce:	0f 92       	push	r0
     dd0:	19 be       	out	0x39, r1	; 57
     dd2:	0b b6       	in	r0, 0x3b	; 59
     dd4:	0f 92       	push	r0
     dd6:	1b be       	out	0x3b, r1	; 59
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     df0:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcc0_err_callback>
     df4:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcc0_err_callback+0x1>
     df8:	30 97       	sbiw	r30, 0x00	; 0
     dfa:	09 f0       	breq	.+2      	; 0xdfe <__vector_15+0x42>
		tc_tcc0_err_callback();
     dfc:	19 95       	eicall
	}
}
     dfe:	ff 91       	pop	r31
     e00:	ef 91       	pop	r30
     e02:	bf 91       	pop	r27
     e04:	af 91       	pop	r26
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	7f 91       	pop	r23
     e0c:	6f 91       	pop	r22
     e0e:	5f 91       	pop	r21
     e10:	4f 91       	pop	r20
     e12:	3f 91       	pop	r19
     e14:	2f 91       	pop	r18
     e16:	0f 90       	pop	r0
     e18:	0b be       	out	0x3b, r0	; 59
     e1a:	0f 90       	pop	r0
     e1c:	09 be       	out	0x39, r0	; 57
     e1e:	0f 90       	pop	r0
     e20:	08 be       	out	0x38, r0	; 56
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	08 b6       	in	r0, 0x38	; 56
     e38:	0f 92       	push	r0
     e3a:	18 be       	out	0x38, r1	; 56
     e3c:	09 b6       	in	r0, 0x39	; 57
     e3e:	0f 92       	push	r0
     e40:	19 be       	out	0x39, r1	; 57
     e42:	0b b6       	in	r0, 0x3b	; 59
     e44:	0f 92       	push	r0
     e46:	1b be       	out	0x3b, r1	; 59
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     e60:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc0_cca_callback>
     e64:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc0_cca_callback+0x1>
     e68:	30 97       	sbiw	r30, 0x00	; 0
     e6a:	09 f0       	breq	.+2      	; 0xe6e <__vector_16+0x42>
		tc_tcc0_cca_callback();
     e6c:	19 95       	eicall
	}
}
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	7f 91       	pop	r23
     e7c:	6f 91       	pop	r22
     e7e:	5f 91       	pop	r21
     e80:	4f 91       	pop	r20
     e82:	3f 91       	pop	r19
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0b be       	out	0x3b, r0	; 59
     e8a:	0f 90       	pop	r0
     e8c:	09 be       	out	0x39, r0	; 57
     e8e:	0f 90       	pop	r0
     e90:	08 be       	out	0x38, r0	; 56
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	08 b6       	in	r0, 0x38	; 56
     ea8:	0f 92       	push	r0
     eaa:	18 be       	out	0x38, r1	; 56
     eac:	09 b6       	in	r0, 0x39	; 57
     eae:	0f 92       	push	r0
     eb0:	19 be       	out	0x39, r1	; 57
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	1b be       	out	0x3b, r1	; 59
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     ed0:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcc0_ccb_callback>
     ed4:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcc0_ccb_callback+0x1>
     ed8:	30 97       	sbiw	r30, 0x00	; 0
     eda:	09 f0       	breq	.+2      	; 0xede <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     edc:	19 95       	eicall
	}
}
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0b be       	out	0x3b, r0	; 59
     efa:	0f 90       	pop	r0
     efc:	09 be       	out	0x39, r0	; 57
     efe:	0f 90       	pop	r0
     f00:	08 be       	out	0x38, r0	; 56
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	08 b6       	in	r0, 0x38	; 56
     f18:	0f 92       	push	r0
     f1a:	18 be       	out	0x38, r1	; 56
     f1c:	09 b6       	in	r0, 0x39	; 57
     f1e:	0f 92       	push	r0
     f20:	19 be       	out	0x39, r1	; 57
     f22:	0b b6       	in	r0, 0x3b	; 59
     f24:	0f 92       	push	r0
     f26:	1b be       	out	0x3b, r1	; 59
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     f40:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcc0_ccc_callback>
     f44:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcc0_ccc_callback+0x1>
     f48:	30 97       	sbiw	r30, 0x00	; 0
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     f4c:	19 95       	eicall
	}
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0b be       	out	0x3b, r0	; 59
     f6a:	0f 90       	pop	r0
     f6c:	09 be       	out	0x39, r0	; 57
     f6e:	0f 90       	pop	r0
     f70:	08 be       	out	0x38, r0	; 56
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	08 b6       	in	r0, 0x38	; 56
     f88:	0f 92       	push	r0
     f8a:	18 be       	out	0x38, r1	; 56
     f8c:	09 b6       	in	r0, 0x39	; 57
     f8e:	0f 92       	push	r0
     f90:	19 be       	out	0x39, r1	; 57
     f92:	0b b6       	in	r0, 0x3b	; 59
     f94:	0f 92       	push	r0
     f96:	1b be       	out	0x3b, r1	; 59
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     fb0:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcc0_ccd_callback>
     fb4:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcc0_ccd_callback+0x1>
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	09 f0       	breq	.+2      	; 0xfbe <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     fbc:	19 95       	eicall
	}
}
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	bf 91       	pop	r27
     fc4:	af 91       	pop	r26
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	7f 91       	pop	r23
     fcc:	6f 91       	pop	r22
     fce:	5f 91       	pop	r21
     fd0:	4f 91       	pop	r20
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0b be       	out	0x3b, r0	; 59
     fda:	0f 90       	pop	r0
     fdc:	09 be       	out	0x39, r0	; 57
     fde:	0f 90       	pop	r0
     fe0:	08 be       	out	0x38, r0	; 56
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	08 b6       	in	r0, 0x38	; 56
     ff8:	0f 92       	push	r0
     ffa:	18 be       	out	0x38, r1	; 56
     ffc:	09 b6       	in	r0, 0x39	; 57
     ffe:	0f 92       	push	r0
    1000:	19 be       	out	0x39, r1	; 57
    1002:	0b b6       	in	r0, 0x3b	; 59
    1004:	0f 92       	push	r0
    1006:	1b be       	out	0x3b, r1	; 59
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1020:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcc1_ovf_callback>
    1024:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcc1_ovf_callback+0x1>
    1028:	30 97       	sbiw	r30, 0x00	; 0
    102a:	09 f0       	breq	.+2      	; 0x102e <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    102c:	19 95       	eicall
	}
}
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0b be       	out	0x3b, r0	; 59
    104a:	0f 90       	pop	r0
    104c:	09 be       	out	0x39, r0	; 57
    104e:	0f 90       	pop	r0
    1050:	08 be       	out	0x38, r0	; 56
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	08 b6       	in	r0, 0x38	; 56
    1068:	0f 92       	push	r0
    106a:	18 be       	out	0x38, r1	; 56
    106c:	09 b6       	in	r0, 0x39	; 57
    106e:	0f 92       	push	r0
    1070:	19 be       	out	0x39, r1	; 57
    1072:	0b b6       	in	r0, 0x3b	; 59
    1074:	0f 92       	push	r0
    1076:	1b be       	out	0x3b, r1	; 59
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1090:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcc1_err_callback>
    1094:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcc1_err_callback+0x1>
    1098:	30 97       	sbiw	r30, 0x00	; 0
    109a:	09 f0       	breq	.+2      	; 0x109e <__vector_21+0x42>
		tc_tcc1_err_callback();
    109c:	19 95       	eicall
	}
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0b be       	out	0x3b, r0	; 59
    10ba:	0f 90       	pop	r0
    10bc:	09 be       	out	0x39, r0	; 57
    10be:	0f 90       	pop	r0
    10c0:	08 be       	out	0x38, r0	; 56
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	08 b6       	in	r0, 0x38	; 56
    10d8:	0f 92       	push	r0
    10da:	18 be       	out	0x38, r1	; 56
    10dc:	09 b6       	in	r0, 0x39	; 57
    10de:	0f 92       	push	r0
    10e0:	19 be       	out	0x39, r1	; 57
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	1b be       	out	0x3b, r1	; 59
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1100:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcc1_cca_callback>
    1104:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcc1_cca_callback+0x1>
    1108:	30 97       	sbiw	r30, 0x00	; 0
    110a:	09 f0       	breq	.+2      	; 0x110e <__vector_22+0x42>
		tc_tcc1_cca_callback();
    110c:	19 95       	eicall
	}
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	09 be       	out	0x39, r0	; 57
    112e:	0f 90       	pop	r0
    1130:	08 be       	out	0x38, r0	; 56
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	08 b6       	in	r0, 0x38	; 56
    1148:	0f 92       	push	r0
    114a:	18 be       	out	0x38, r1	; 56
    114c:	09 b6       	in	r0, 0x39	; 57
    114e:	0f 92       	push	r0
    1150:	19 be       	out	0x39, r1	; 57
    1152:	0b b6       	in	r0, 0x3b	; 59
    1154:	0f 92       	push	r0
    1156:	1b be       	out	0x3b, r1	; 59
    1158:	2f 93       	push	r18
    115a:	3f 93       	push	r19
    115c:	4f 93       	push	r20
    115e:	5f 93       	push	r21
    1160:	6f 93       	push	r22
    1162:	7f 93       	push	r23
    1164:	8f 93       	push	r24
    1166:	9f 93       	push	r25
    1168:	af 93       	push	r26
    116a:	bf 93       	push	r27
    116c:	ef 93       	push	r30
    116e:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1170:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcc1_ccb_callback>
    1174:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcc1_ccb_callback+0x1>
    1178:	30 97       	sbiw	r30, 0x00	; 0
    117a:	09 f0       	breq	.+2      	; 0x117e <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    117c:	19 95       	eicall
	}
}
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0b be       	out	0x3b, r0	; 59
    119a:	0f 90       	pop	r0
    119c:	09 be       	out	0x39, r0	; 57
    119e:	0f 90       	pop	r0
    11a0:	08 be       	out	0x38, r0	; 56
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	08 b6       	in	r0, 0x38	; 56
    11b8:	0f 92       	push	r0
    11ba:	18 be       	out	0x38, r1	; 56
    11bc:	09 b6       	in	r0, 0x39	; 57
    11be:	0f 92       	push	r0
    11c0:	19 be       	out	0x39, r1	; 57
    11c2:	0b b6       	in	r0, 0x3b	; 59
    11c4:	0f 92       	push	r0
    11c6:	1b be       	out	0x3b, r1	; 59
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    11e0:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcd0_ovf_callback>
    11e4:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcd0_ovf_callback+0x1>
    11e8:	30 97       	sbiw	r30, 0x00	; 0
    11ea:	09 f0       	breq	.+2      	; 0x11ee <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    11ec:	19 95       	eicall
	}
}
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	bf 91       	pop	r27
    11f4:	af 91       	pop	r26
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	7f 91       	pop	r23
    11fc:	6f 91       	pop	r22
    11fe:	5f 91       	pop	r21
    1200:	4f 91       	pop	r20
    1202:	3f 91       	pop	r19
    1204:	2f 91       	pop	r18
    1206:	0f 90       	pop	r0
    1208:	0b be       	out	0x3b, r0	; 59
    120a:	0f 90       	pop	r0
    120c:	09 be       	out	0x39, r0	; 57
    120e:	0f 90       	pop	r0
    1210:	08 be       	out	0x38, r0	; 56
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	08 b6       	in	r0, 0x38	; 56
    1228:	0f 92       	push	r0
    122a:	18 be       	out	0x38, r1	; 56
    122c:	09 b6       	in	r0, 0x39	; 57
    122e:	0f 92       	push	r0
    1230:	19 be       	out	0x39, r1	; 57
    1232:	0b b6       	in	r0, 0x3b	; 59
    1234:	0f 92       	push	r0
    1236:	1b be       	out	0x3b, r1	; 59
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1250:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcd0_err_callback>
    1254:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcd0_err_callback+0x1>
    1258:	30 97       	sbiw	r30, 0x00	; 0
    125a:	09 f0       	breq	.+2      	; 0x125e <__vector_78+0x42>
		tc_tcd0_err_callback();
    125c:	19 95       	eicall
	}
}
    125e:	ff 91       	pop	r31
    1260:	ef 91       	pop	r30
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	7f 91       	pop	r23
    126c:	6f 91       	pop	r22
    126e:	5f 91       	pop	r21
    1270:	4f 91       	pop	r20
    1272:	3f 91       	pop	r19
    1274:	2f 91       	pop	r18
    1276:	0f 90       	pop	r0
    1278:	0b be       	out	0x3b, r0	; 59
    127a:	0f 90       	pop	r0
    127c:	09 be       	out	0x39, r0	; 57
    127e:	0f 90       	pop	r0
    1280:	08 be       	out	0x38, r0	; 56
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	08 b6       	in	r0, 0x38	; 56
    1298:	0f 92       	push	r0
    129a:	18 be       	out	0x38, r1	; 56
    129c:	09 b6       	in	r0, 0x39	; 57
    129e:	0f 92       	push	r0
    12a0:	19 be       	out	0x39, r1	; 57
    12a2:	0b b6       	in	r0, 0x3b	; 59
    12a4:	0f 92       	push	r0
    12a6:	1b be       	out	0x3b, r1	; 59
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    12c0:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd0_cca_callback>
    12c4:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd0_cca_callback+0x1>
    12c8:	30 97       	sbiw	r30, 0x00	; 0
    12ca:	09 f0       	breq	.+2      	; 0x12ce <__vector_79+0x42>
		tc_tcd0_cca_callback();
    12cc:	19 95       	eicall
	}
}
    12ce:	ff 91       	pop	r31
    12d0:	ef 91       	pop	r30
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	7f 91       	pop	r23
    12dc:	6f 91       	pop	r22
    12de:	5f 91       	pop	r21
    12e0:	4f 91       	pop	r20
    12e2:	3f 91       	pop	r19
    12e4:	2f 91       	pop	r18
    12e6:	0f 90       	pop	r0
    12e8:	0b be       	out	0x3b, r0	; 59
    12ea:	0f 90       	pop	r0
    12ec:	09 be       	out	0x39, r0	; 57
    12ee:	0f 90       	pop	r0
    12f0:	08 be       	out	0x38, r0	; 56
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	08 b6       	in	r0, 0x38	; 56
    1308:	0f 92       	push	r0
    130a:	18 be       	out	0x38, r1	; 56
    130c:	09 b6       	in	r0, 0x39	; 57
    130e:	0f 92       	push	r0
    1310:	19 be       	out	0x39, r1	; 57
    1312:	0b b6       	in	r0, 0x3b	; 59
    1314:	0f 92       	push	r0
    1316:	1b be       	out	0x3b, r1	; 59
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1330:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcd0_ccb_callback>
    1334:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcd0_ccb_callback+0x1>
    1338:	30 97       	sbiw	r30, 0x00	; 0
    133a:	09 f0       	breq	.+2      	; 0x133e <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    133c:	19 95       	eicall
	}
}
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0b be       	out	0x3b, r0	; 59
    135a:	0f 90       	pop	r0
    135c:	09 be       	out	0x39, r0	; 57
    135e:	0f 90       	pop	r0
    1360:	08 be       	out	0x38, r0	; 56
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	18 95       	reti

0000136c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	08 b6       	in	r0, 0x38	; 56
    1378:	0f 92       	push	r0
    137a:	18 be       	out	0x38, r1	; 56
    137c:	09 b6       	in	r0, 0x39	; 57
    137e:	0f 92       	push	r0
    1380:	19 be       	out	0x39, r1	; 57
    1382:	0b b6       	in	r0, 0x3b	; 59
    1384:	0f 92       	push	r0
    1386:	1b be       	out	0x3b, r1	; 59
    1388:	2f 93       	push	r18
    138a:	3f 93       	push	r19
    138c:	4f 93       	push	r20
    138e:	5f 93       	push	r21
    1390:	6f 93       	push	r22
    1392:	7f 93       	push	r23
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	af 93       	push	r26
    139a:	bf 93       	push	r27
    139c:	ef 93       	push	r30
    139e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    13a0:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tcd0_ccc_callback>
    13a4:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tcd0_ccc_callback+0x1>
    13a8:	30 97       	sbiw	r30, 0x00	; 0
    13aa:	09 f0       	breq	.+2      	; 0x13ae <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    13ac:	19 95       	eicall
	}
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0b be       	out	0x3b, r0	; 59
    13ca:	0f 90       	pop	r0
    13cc:	09 be       	out	0x39, r0	; 57
    13ce:	0f 90       	pop	r0
    13d0:	08 be       	out	0x38, r0	; 56
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	08 b6       	in	r0, 0x38	; 56
    13e8:	0f 92       	push	r0
    13ea:	18 be       	out	0x38, r1	; 56
    13ec:	09 b6       	in	r0, 0x39	; 57
    13ee:	0f 92       	push	r0
    13f0:	19 be       	out	0x39, r1	; 57
    13f2:	0b b6       	in	r0, 0x3b	; 59
    13f4:	0f 92       	push	r0
    13f6:	1b be       	out	0x3b, r1	; 59
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1410:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tcd0_ccd_callback>
    1414:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tcd0_ccd_callback+0x1>
    1418:	30 97       	sbiw	r30, 0x00	; 0
    141a:	09 f0       	breq	.+2      	; 0x141e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    141c:	19 95       	eicall
	}
}
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	bf 91       	pop	r27
    1424:	af 91       	pop	r26
    1426:	9f 91       	pop	r25
    1428:	8f 91       	pop	r24
    142a:	7f 91       	pop	r23
    142c:	6f 91       	pop	r22
    142e:	5f 91       	pop	r21
    1430:	4f 91       	pop	r20
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0b be       	out	0x3b, r0	; 59
    143a:	0f 90       	pop	r0
    143c:	09 be       	out	0x39, r0	; 57
    143e:	0f 90       	pop	r0
    1440:	08 be       	out	0x38, r0	; 56
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	08 b6       	in	r0, 0x38	; 56
    1458:	0f 92       	push	r0
    145a:	18 be       	out	0x38, r1	; 56
    145c:	09 b6       	in	r0, 0x39	; 57
    145e:	0f 92       	push	r0
    1460:	19 be       	out	0x39, r1	; 57
    1462:	0b b6       	in	r0, 0x3b	; 59
    1464:	0f 92       	push	r0
    1466:	1b be       	out	0x3b, r1	; 59
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1480:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tcd1_ovf_callback>
    1484:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tcd1_ovf_callback+0x1>
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	09 f0       	breq	.+2      	; 0x148e <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    148c:	19 95       	eicall
	}
}
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0b be       	out	0x3b, r0	; 59
    14aa:	0f 90       	pop	r0
    14ac:	09 be       	out	0x39, r0	; 57
    14ae:	0f 90       	pop	r0
    14b0:	08 be       	out	0x38, r0	; 56
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	0f 90       	pop	r0
    14b8:	1f 90       	pop	r1
    14ba:	18 95       	reti

000014bc <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	08 b6       	in	r0, 0x38	; 56
    14c8:	0f 92       	push	r0
    14ca:	18 be       	out	0x38, r1	; 56
    14cc:	09 b6       	in	r0, 0x39	; 57
    14ce:	0f 92       	push	r0
    14d0:	19 be       	out	0x39, r1	; 57
    14d2:	0b b6       	in	r0, 0x3b	; 59
    14d4:	0f 92       	push	r0
    14d6:	1b be       	out	0x3b, r1	; 59
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    14f0:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tcd1_err_callback>
    14f4:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tcd1_err_callback+0x1>
    14f8:	30 97       	sbiw	r30, 0x00	; 0
    14fa:	09 f0       	breq	.+2      	; 0x14fe <__vector_84+0x42>
		tc_tcd1_err_callback();
    14fc:	19 95       	eicall
	}
}
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0b be       	out	0x3b, r0	; 59
    151a:	0f 90       	pop	r0
    151c:	09 be       	out	0x39, r0	; 57
    151e:	0f 90       	pop	r0
    1520:	08 be       	out	0x38, r0	; 56
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	08 b6       	in	r0, 0x38	; 56
    1538:	0f 92       	push	r0
    153a:	18 be       	out	0x38, r1	; 56
    153c:	09 b6       	in	r0, 0x39	; 57
    153e:	0f 92       	push	r0
    1540:	19 be       	out	0x39, r1	; 57
    1542:	0b b6       	in	r0, 0x3b	; 59
    1544:	0f 92       	push	r0
    1546:	1b be       	out	0x3b, r1	; 59
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1560:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tcd1_cca_callback>
    1564:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tcd1_cca_callback+0x1>
    1568:	30 97       	sbiw	r30, 0x00	; 0
    156a:	09 f0       	breq	.+2      	; 0x156e <__vector_85+0x42>
		tc_tcd1_cca_callback();
    156c:	19 95       	eicall
	}
}
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	bf 91       	pop	r27
    1574:	af 91       	pop	r26
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	7f 91       	pop	r23
    157c:	6f 91       	pop	r22
    157e:	5f 91       	pop	r21
    1580:	4f 91       	pop	r20
    1582:	3f 91       	pop	r19
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	0b be       	out	0x3b, r0	; 59
    158a:	0f 90       	pop	r0
    158c:	09 be       	out	0x39, r0	; 57
    158e:	0f 90       	pop	r0
    1590:	08 be       	out	0x38, r0	; 56
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	08 b6       	in	r0, 0x38	; 56
    15a8:	0f 92       	push	r0
    15aa:	18 be       	out	0x38, r1	; 56
    15ac:	09 b6       	in	r0, 0x39	; 57
    15ae:	0f 92       	push	r0
    15b0:	19 be       	out	0x39, r1	; 57
    15b2:	0b b6       	in	r0, 0x3b	; 59
    15b4:	0f 92       	push	r0
    15b6:	1b be       	out	0x3b, r1	; 59
    15b8:	2f 93       	push	r18
    15ba:	3f 93       	push	r19
    15bc:	4f 93       	push	r20
    15be:	5f 93       	push	r21
    15c0:	6f 93       	push	r22
    15c2:	7f 93       	push	r23
    15c4:	8f 93       	push	r24
    15c6:	9f 93       	push	r25
    15c8:	af 93       	push	r26
    15ca:	bf 93       	push	r27
    15cc:	ef 93       	push	r30
    15ce:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    15d0:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tcd1_ccb_callback>
    15d4:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tcd1_ccb_callback+0x1>
    15d8:	30 97       	sbiw	r30, 0x00	; 0
    15da:	09 f0       	breq	.+2      	; 0x15de <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    15dc:	19 95       	eicall
	}
}
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0b be       	out	0x3b, r0	; 59
    15fa:	0f 90       	pop	r0
    15fc:	09 be       	out	0x39, r0	; 57
    15fe:	0f 90       	pop	r0
    1600:	08 be       	out	0x38, r0	; 56
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    160c:	1f 92       	push	r1
    160e:	0f 92       	push	r0
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	0f 92       	push	r0
    1614:	11 24       	eor	r1, r1
    1616:	08 b6       	in	r0, 0x38	; 56
    1618:	0f 92       	push	r0
    161a:	18 be       	out	0x38, r1	; 56
    161c:	09 b6       	in	r0, 0x39	; 57
    161e:	0f 92       	push	r0
    1620:	19 be       	out	0x39, r1	; 57
    1622:	0b b6       	in	r0, 0x3b	; 59
    1624:	0f 92       	push	r0
    1626:	1b be       	out	0x3b, r1	; 59
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1640:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tce0_ovf_callback>
    1644:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tce0_ovf_callback+0x1>
    1648:	30 97       	sbiw	r30, 0x00	; 0
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_47+0x42>
		tc_tce0_ovf_callback();
    164c:	19 95       	eicall
	}
}
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0b be       	out	0x3b, r0	; 59
    166a:	0f 90       	pop	r0
    166c:	09 be       	out	0x39, r0	; 57
    166e:	0f 90       	pop	r0
    1670:	08 be       	out	0x38, r0	; 56
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	08 b6       	in	r0, 0x38	; 56
    1688:	0f 92       	push	r0
    168a:	18 be       	out	0x38, r1	; 56
    168c:	09 b6       	in	r0, 0x39	; 57
    168e:	0f 92       	push	r0
    1690:	19 be       	out	0x39, r1	; 57
    1692:	0b b6       	in	r0, 0x3b	; 59
    1694:	0f 92       	push	r0
    1696:	1b be       	out	0x3b, r1	; 59
    1698:	2f 93       	push	r18
    169a:	3f 93       	push	r19
    169c:	4f 93       	push	r20
    169e:	5f 93       	push	r21
    16a0:	6f 93       	push	r22
    16a2:	7f 93       	push	r23
    16a4:	8f 93       	push	r24
    16a6:	9f 93       	push	r25
    16a8:	af 93       	push	r26
    16aa:	bf 93       	push	r27
    16ac:	ef 93       	push	r30
    16ae:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    16b0:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tce0_err_callback>
    16b4:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tce0_err_callback+0x1>
    16b8:	30 97       	sbiw	r30, 0x00	; 0
    16ba:	09 f0       	breq	.+2      	; 0x16be <__vector_48+0x42>
		tc_tce0_err_callback();
    16bc:	19 95       	eicall
	}
}
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0b be       	out	0x3b, r0	; 59
    16da:	0f 90       	pop	r0
    16dc:	09 be       	out	0x39, r0	; 57
    16de:	0f 90       	pop	r0
    16e0:	08 be       	out	0x38, r0	; 56
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti

000016ec <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    16ec:	1f 92       	push	r1
    16ee:	0f 92       	push	r0
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	08 b6       	in	r0, 0x38	; 56
    16f8:	0f 92       	push	r0
    16fa:	18 be       	out	0x38, r1	; 56
    16fc:	09 b6       	in	r0, 0x39	; 57
    16fe:	0f 92       	push	r0
    1700:	19 be       	out	0x39, r1	; 57
    1702:	0b b6       	in	r0, 0x3b	; 59
    1704:	0f 92       	push	r0
    1706:	1b be       	out	0x3b, r1	; 59
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1720:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tce0_cca_callback>
    1724:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tce0_cca_callback+0x1>
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	09 f0       	breq	.+2      	; 0x172e <__vector_49+0x42>
		tc_tce0_cca_callback();
    172c:	19 95       	eicall
	}
}
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0b be       	out	0x3b, r0	; 59
    174a:	0f 90       	pop	r0
    174c:	09 be       	out	0x39, r0	; 57
    174e:	0f 90       	pop	r0
    1750:	08 be       	out	0x38, r0	; 56
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	08 b6       	in	r0, 0x38	; 56
    1768:	0f 92       	push	r0
    176a:	18 be       	out	0x38, r1	; 56
    176c:	09 b6       	in	r0, 0x39	; 57
    176e:	0f 92       	push	r0
    1770:	19 be       	out	0x39, r1	; 57
    1772:	0b b6       	in	r0, 0x3b	; 59
    1774:	0f 92       	push	r0
    1776:	1b be       	out	0x3b, r1	; 59
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1790:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tce0_ccb_callback>
    1794:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tce0_ccb_callback+0x1>
    1798:	30 97       	sbiw	r30, 0x00	; 0
    179a:	09 f0       	breq	.+2      	; 0x179e <__vector_50+0x42>
		tc_tce0_ccb_callback();
    179c:	19 95       	eicall
	}
}
    179e:	ff 91       	pop	r31
    17a0:	ef 91       	pop	r30
    17a2:	bf 91       	pop	r27
    17a4:	af 91       	pop	r26
    17a6:	9f 91       	pop	r25
    17a8:	8f 91       	pop	r24
    17aa:	7f 91       	pop	r23
    17ac:	6f 91       	pop	r22
    17ae:	5f 91       	pop	r21
    17b0:	4f 91       	pop	r20
    17b2:	3f 91       	pop	r19
    17b4:	2f 91       	pop	r18
    17b6:	0f 90       	pop	r0
    17b8:	0b be       	out	0x3b, r0	; 59
    17ba:	0f 90       	pop	r0
    17bc:	09 be       	out	0x39, r0	; 57
    17be:	0f 90       	pop	r0
    17c0:	08 be       	out	0x38, r0	; 56
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	08 b6       	in	r0, 0x38	; 56
    17d8:	0f 92       	push	r0
    17da:	18 be       	out	0x38, r1	; 56
    17dc:	09 b6       	in	r0, 0x39	; 57
    17de:	0f 92       	push	r0
    17e0:	19 be       	out	0x39, r1	; 57
    17e2:	0b b6       	in	r0, 0x3b	; 59
    17e4:	0f 92       	push	r0
    17e6:	1b be       	out	0x3b, r1	; 59
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1800:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tce0_ccc_callback>
    1804:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tce0_ccc_callback+0x1>
    1808:	30 97       	sbiw	r30, 0x00	; 0
    180a:	09 f0       	breq	.+2      	; 0x180e <__vector_51+0x42>
		tc_tce0_ccc_callback();
    180c:	19 95       	eicall
	}
}
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0b be       	out	0x3b, r0	; 59
    182a:	0f 90       	pop	r0
    182c:	09 be       	out	0x39, r0	; 57
    182e:	0f 90       	pop	r0
    1830:	08 be       	out	0x38, r0	; 56
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	08 b6       	in	r0, 0x38	; 56
    1848:	0f 92       	push	r0
    184a:	18 be       	out	0x38, r1	; 56
    184c:	09 b6       	in	r0, 0x39	; 57
    184e:	0f 92       	push	r0
    1850:	19 be       	out	0x39, r1	; 57
    1852:	0b b6       	in	r0, 0x3b	; 59
    1854:	0f 92       	push	r0
    1856:	1b be       	out	0x3b, r1	; 59
    1858:	2f 93       	push	r18
    185a:	3f 93       	push	r19
    185c:	4f 93       	push	r20
    185e:	5f 93       	push	r21
    1860:	6f 93       	push	r22
    1862:	7f 93       	push	r23
    1864:	8f 93       	push	r24
    1866:	9f 93       	push	r25
    1868:	af 93       	push	r26
    186a:	bf 93       	push	r27
    186c:	ef 93       	push	r30
    186e:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1870:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tce0_ccd_callback>
    1874:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tce0_ccd_callback+0x1>
    1878:	30 97       	sbiw	r30, 0x00	; 0
    187a:	09 f0       	breq	.+2      	; 0x187e <__vector_52+0x42>
		tc_tce0_ccd_callback();
    187c:	19 95       	eicall
	}
}
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	bf 91       	pop	r27
    1884:	af 91       	pop	r26
    1886:	9f 91       	pop	r25
    1888:	8f 91       	pop	r24
    188a:	7f 91       	pop	r23
    188c:	6f 91       	pop	r22
    188e:	5f 91       	pop	r21
    1890:	4f 91       	pop	r20
    1892:	3f 91       	pop	r19
    1894:	2f 91       	pop	r18
    1896:	0f 90       	pop	r0
    1898:	0b be       	out	0x3b, r0	; 59
    189a:	0f 90       	pop	r0
    189c:	09 be       	out	0x39, r0	; 57
    189e:	0f 90       	pop	r0
    18a0:	08 be       	out	0x38, r0	; 56
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <bno055_write_register>:
			}
		} else {
		com_rslt = BNO055_ERROR;
		}
	return com_rslt;
}
    18ac:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    18b0:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    18b4:	10 97       	sbiw	r26, 0x00	; 0
    18b6:	59 f0       	breq	.+22     	; 0x18ce <bno055_write_register+0x22>
    18b8:	24 2f       	mov	r18, r20
    18ba:	ab 01       	movw	r20, r22
    18bc:	68 2f       	mov	r22, r24
    18be:	19 96       	adiw	r26, 0x09	; 9
    18c0:	ed 91       	ld	r30, X+
    18c2:	fc 91       	ld	r31, X
    18c4:	1a 97       	sbiw	r26, 0x0a	; 10
    18c6:	18 96       	adiw	r26, 0x08	; 8
    18c8:	8c 91       	ld	r24, X
    18ca:	19 95       	eicall
    18cc:	08 95       	ret
    18ce:	81 e8       	ldi	r24, 0x81	; 129
    18d0:	08 95       	ret

000018d2 <bno055_write_page_id>:
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	1f 92       	push	r1
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	19 82       	std	Y+1, r1	; 0x01
    18e0:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    18e4:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    18e8:	10 97       	sbiw	r26, 0x00	; 0
    18ea:	41 f1       	breq	.+80     	; 0x193c <bno055_write_page_id+0x6a>
    18ec:	18 2f       	mov	r17, r24
    18ee:	1b 96       	adiw	r26, 0x0b	; 11
    18f0:	ed 91       	ld	r30, X+
    18f2:	fc 91       	ld	r31, X
    18f4:	1c 97       	sbiw	r26, 0x0c	; 12
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	ae 01       	movw	r20, r28
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	67 e0       	ldi	r22, 0x07	; 7
    1900:	18 96       	adiw	r26, 0x08	; 8
    1902:	8c 91       	ld	r24, X
    1904:	19 95       	eicall
    1906:	81 11       	cpse	r24, r1
    1908:	1b c0       	rjmp	.+54     	; 0x1940 <bno055_write_page_id+0x6e>
    190a:	19 83       	std	Y+1, r17	; 0x01
    190c:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1910:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1914:	19 96       	adiw	r26, 0x09	; 9
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	1a 97       	sbiw	r26, 0x0a	; 10
    191c:	21 e0       	ldi	r18, 0x01	; 1
    191e:	ae 01       	movw	r20, r28
    1920:	4f 5f       	subi	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	67 e0       	ldi	r22, 0x07	; 7
    1926:	18 96       	adiw	r26, 0x08	; 8
    1928:	8c 91       	ld	r24, X
    192a:	19 95       	eicall
    192c:	81 11       	cpse	r24, r1
    192e:	09 c0       	rjmp	.+18     	; 0x1942 <bno055_write_page_id+0x70>
    1930:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1934:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1938:	13 83       	std	Z+3, r17	; 0x03
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <bno055_write_page_id+0x70>
    193c:	81 e8       	ldi	r24, 0x81	; 129
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <bno055_write_page_id+0x70>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	0f 90       	pop	r0
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	08 95       	ret

0000194c <bno055_read_euler_hrp>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	00 d0       	rcall	.+0      	; 0x1956 <bno055_read_euler_hrp+0xa>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <bno055_read_euler_hrp+0xc>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8c 01       	movw	r16, r24
    195e:	fe 01       	movw	r30, r28
    1960:	31 96       	adiw	r30, 0x01	; 1
    1962:	96 e0       	ldi	r25, 0x06	; 6
    1964:	df 01       	movw	r26, r30
    1966:	1d 92       	st	X+, r1
    1968:	9a 95       	dec	r25
    196a:	e9 f7       	brne	.-6      	; 0x1966 <bno055_read_euler_hrp+0x1a>
    196c:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1970:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1974:	30 97       	sbiw	r30, 0x00	; 0
    1976:	09 f4       	brne	.+2      	; 0x197a <bno055_read_euler_hrp+0x2e>
    1978:	3e c0       	rjmp	.+124    	; 0x19f6 <bno055_read_euler_hrp+0xaa>
    197a:	83 81       	ldd	r24, Z+3	; 0x03
    197c:	88 23       	and	r24, r24
    197e:	59 f0       	breq	.+22     	; 0x1996 <bno055_read_euler_hrp+0x4a>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	a7 df       	rcall	.-178    	; 0x18d2 <bno055_write_page_id>
    1984:	88 23       	and	r24, r24
    1986:	39 f0       	breq	.+14     	; 0x1996 <bno055_read_euler_hrp+0x4a>
    1988:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    198c:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1990:	83 81       	ldd	r24, Z+3	; 0x03
    1992:	81 11       	cpse	r24, r1
    1994:	32 c0       	rjmp	.+100    	; 0x19fa <bno055_read_euler_hrp+0xae>
    1996:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    199a:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    199e:	1b 96       	adiw	r26, 0x0b	; 11
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	1c 97       	sbiw	r26, 0x0c	; 12
    19a6:	26 e0       	ldi	r18, 0x06	; 6
    19a8:	ae 01       	movw	r20, r28
    19aa:	4f 5f       	subi	r20, 0xFF	; 255
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255
    19ae:	6a e1       	ldi	r22, 0x1A	; 26
    19b0:	18 96       	adiw	r26, 0x08	; 8
    19b2:	8c 91       	ld	r24, X
    19b4:	19 95       	eicall
    19b6:	2a 81       	ldd	r18, Y+2	; 0x02
    19b8:	02 2e       	mov	r0, r18
    19ba:	00 0c       	add	r0, r0
    19bc:	33 0b       	sbc	r19, r19
    19be:	32 2f       	mov	r19, r18
    19c0:	22 27       	eor	r18, r18
    19c2:	99 81       	ldd	r25, Y+1	; 0x01
    19c4:	29 2b       	or	r18, r25
    19c6:	f8 01       	movw	r30, r16
    19c8:	20 83       	st	Z, r18
    19ca:	31 83       	std	Z+1, r19	; 0x01
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	02 2e       	mov	r0, r18
    19d0:	00 0c       	add	r0, r0
    19d2:	33 0b       	sbc	r19, r19
    19d4:	32 2f       	mov	r19, r18
    19d6:	22 27       	eor	r18, r18
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	29 2b       	or	r18, r25
    19dc:	22 83       	std	Z+2, r18	; 0x02
    19de:	33 83       	std	Z+3, r19	; 0x03
    19e0:	2e 81       	ldd	r18, Y+6	; 0x06
    19e2:	02 2e       	mov	r0, r18
    19e4:	00 0c       	add	r0, r0
    19e6:	33 0b       	sbc	r19, r19
    19e8:	32 2f       	mov	r19, r18
    19ea:	22 27       	eor	r18, r18
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	29 2b       	or	r18, r25
    19f0:	24 83       	std	Z+4, r18	; 0x04
    19f2:	35 83       	std	Z+5, r19	; 0x05
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <bno055_read_euler_hrp+0xb0>
    19f6:	81 e8       	ldi	r24, 0x81	; 129
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <bno055_read_euler_hrp+0xb0>
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	26 96       	adiw	r28, 0x06	; 6
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	08 95       	ret

00001a0c <bno055_read_linear_accel_xyz>:
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <bno055_read_linear_accel_xyz+0xa>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <bno055_read_linear_accel_xyz+0xc>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	8c 01       	movw	r16, r24
    1a1e:	fe 01       	movw	r30, r28
    1a20:	31 96       	adiw	r30, 0x01	; 1
    1a22:	96 e0       	ldi	r25, 0x06	; 6
    1a24:	df 01       	movw	r26, r30
    1a26:	1d 92       	st	X+, r1
    1a28:	9a 95       	dec	r25
    1a2a:	e9 f7       	brne	.-6      	; 0x1a26 <bno055_read_linear_accel_xyz+0x1a>
    1a2c:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1a30:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1a34:	30 97       	sbiw	r30, 0x00	; 0
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <bno055_read_linear_accel_xyz+0x2e>
    1a38:	3e c0       	rjmp	.+124    	; 0x1ab6 <bno055_read_linear_accel_xyz+0xaa>
    1a3a:	83 81       	ldd	r24, Z+3	; 0x03
    1a3c:	88 23       	and	r24, r24
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <bno055_read_linear_accel_xyz+0x4a>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	47 df       	rcall	.-370    	; 0x18d2 <bno055_write_page_id>
    1a44:	88 23       	and	r24, r24
    1a46:	39 f0       	breq	.+14     	; 0x1a56 <bno055_read_linear_accel_xyz+0x4a>
    1a48:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1a4c:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1a50:	83 81       	ldd	r24, Z+3	; 0x03
    1a52:	81 11       	cpse	r24, r1
    1a54:	32 c0       	rjmp	.+100    	; 0x1aba <bno055_read_linear_accel_xyz+0xae>
    1a56:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1a5a:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1a5e:	1b 96       	adiw	r26, 0x0b	; 11
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	1c 97       	sbiw	r26, 0x0c	; 12
    1a66:	26 e0       	ldi	r18, 0x06	; 6
    1a68:	ae 01       	movw	r20, r28
    1a6a:	4f 5f       	subi	r20, 0xFF	; 255
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	68 e2       	ldi	r22, 0x28	; 40
    1a70:	18 96       	adiw	r26, 0x08	; 8
    1a72:	8c 91       	ld	r24, X
    1a74:	19 95       	eicall
    1a76:	2a 81       	ldd	r18, Y+2	; 0x02
    1a78:	02 2e       	mov	r0, r18
    1a7a:	00 0c       	add	r0, r0
    1a7c:	33 0b       	sbc	r19, r19
    1a7e:	32 2f       	mov	r19, r18
    1a80:	22 27       	eor	r18, r18
    1a82:	99 81       	ldd	r25, Y+1	; 0x01
    1a84:	29 2b       	or	r18, r25
    1a86:	f8 01       	movw	r30, r16
    1a88:	20 83       	st	Z, r18
    1a8a:	31 83       	std	Z+1, r19	; 0x01
    1a8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8e:	02 2e       	mov	r0, r18
    1a90:	00 0c       	add	r0, r0
    1a92:	33 0b       	sbc	r19, r19
    1a94:	32 2f       	mov	r19, r18
    1a96:	22 27       	eor	r18, r18
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	29 2b       	or	r18, r25
    1a9c:	22 83       	std	Z+2, r18	; 0x02
    1a9e:	33 83       	std	Z+3, r19	; 0x03
    1aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	00 0c       	add	r0, r0
    1aa6:	33 0b       	sbc	r19, r19
    1aa8:	32 2f       	mov	r19, r18
    1aaa:	22 27       	eor	r18, r18
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	29 2b       	or	r18, r25
    1ab0:	24 83       	std	Z+4, r18	; 0x04
    1ab2:	35 83       	std	Z+5, r19	; 0x05
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <bno055_read_linear_accel_xyz+0xb0>
    1ab6:	81 e8       	ldi	r24, 0x81	; 129
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <bno055_read_linear_accel_xyz+0xb0>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	26 96       	adiw	r28, 0x06	; 6
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	08 95       	ret

00001acc <bno055_convert_double_linear_accel_xyz_msq>:
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <bno055_convert_double_linear_accel_xyz_msq+0xc>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <bno055_convert_double_linear_accel_xyz_msq+0xe>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8c 01       	movw	r16, r24
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	1a 82       	std	Y+2, r1	; 0x02
    1ae4:	1b 82       	std	Y+3, r1	; 0x03
    1ae6:	1c 82       	std	Y+4, r1	; 0x04
    1ae8:	1d 82       	std	Y+5, r1	; 0x05
    1aea:	1e 82       	std	Y+6, r1	; 0x06
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	8d df       	rcall	.-230    	; 0x1a0c <bno055_read_linear_accel_xyz>
    1af2:	f8 2e       	mov	r15, r24
    1af4:	81 11       	cpse	r24, r1
    1af6:	34 c0       	rjmp	.+104    	; 0x1b60 <bno055_convert_double_linear_accel_xyz_msq+0x94>
    1af8:	69 81       	ldd	r22, Y+1	; 0x01
    1afa:	7a 81       	ldd	r23, Y+2	; 0x02
    1afc:	07 2e       	mov	r0, r23
    1afe:	00 0c       	add	r0, r0
    1b00:	88 0b       	sbc	r24, r24
    1b02:	99 0b       	sbc	r25, r25
    1b04:	6e d6       	rcall	.+3292   	; 0x27e2 <__floatsisf>
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	48 ec       	ldi	r20, 0xC8	; 200
    1b0c:	52 e4       	ldi	r21, 0x42	; 66
    1b0e:	ff d5       	rcall	.+3070   	; 0x270e <__divsf3>
    1b10:	f8 01       	movw	r30, r16
    1b12:	60 83       	st	Z, r22
    1b14:	71 83       	std	Z+1, r23	; 0x01
    1b16:	82 83       	std	Z+2, r24	; 0x02
    1b18:	93 83       	std	Z+3, r25	; 0x03
    1b1a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b1c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b1e:	07 2e       	mov	r0, r23
    1b20:	00 0c       	add	r0, r0
    1b22:	88 0b       	sbc	r24, r24
    1b24:	99 0b       	sbc	r25, r25
    1b26:	5d d6       	rcall	.+3258   	; 0x27e2 <__floatsisf>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	48 ec       	ldi	r20, 0xC8	; 200
    1b2e:	52 e4       	ldi	r21, 0x42	; 66
    1b30:	ee d5       	rcall	.+3036   	; 0x270e <__divsf3>
    1b32:	f8 01       	movw	r30, r16
    1b34:	64 83       	std	Z+4, r22	; 0x04
    1b36:	75 83       	std	Z+5, r23	; 0x05
    1b38:	86 83       	std	Z+6, r24	; 0x06
    1b3a:	97 83       	std	Z+7, r25	; 0x07
    1b3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b40:	07 2e       	mov	r0, r23
    1b42:	00 0c       	add	r0, r0
    1b44:	88 0b       	sbc	r24, r24
    1b46:	99 0b       	sbc	r25, r25
    1b48:	4c d6       	rcall	.+3224   	; 0x27e2 <__floatsisf>
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	48 ec       	ldi	r20, 0xC8	; 200
    1b50:	52 e4       	ldi	r21, 0x42	; 66
    1b52:	dd d5       	rcall	.+3002   	; 0x270e <__divsf3>
    1b54:	f8 01       	movw	r30, r16
    1b56:	60 87       	std	Z+8, r22	; 0x08
    1b58:	71 87       	std	Z+9, r23	; 0x09
    1b5a:	82 87       	std	Z+10, r24	; 0x0a
    1b5c:	93 87       	std	Z+11, r25	; 0x0b
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <bno055_convert_double_linear_accel_xyz_msq+0x98>
    1b60:	ff 24       	eor	r15, r15
    1b62:	fa 94       	dec	r15
    1b64:	8f 2d       	mov	r24, r15
    1b66:	26 96       	adiw	r28, 0x06	; 6
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	08 95       	ret

00001b78 <bno055_get_mag_calib_stat>:
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	1f 92       	push	r1
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	19 82       	std	Y+1, r1	; 0x01
    1b88:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1b8c:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1b90:	30 97       	sbiw	r30, 0x00	; 0
    1b92:	21 f1       	breq	.+72     	; 0x1bdc <bno055_get_mag_calib_stat+0x64>
    1b94:	8c 01       	movw	r16, r24
    1b96:	83 81       	ldd	r24, Z+3	; 0x03
    1b98:	88 23       	and	r24, r24
    1b9a:	59 f0       	breq	.+22     	; 0x1bb2 <bno055_get_mag_calib_stat+0x3a>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	99 de       	rcall	.-718    	; 0x18d2 <bno055_write_page_id>
    1ba0:	88 23       	and	r24, r24
    1ba2:	39 f0       	breq	.+14     	; 0x1bb2 <bno055_get_mag_calib_stat+0x3a>
    1ba4:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1ba8:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1bac:	83 81       	ldd	r24, Z+3	; 0x03
    1bae:	81 11       	cpse	r24, r1
    1bb0:	17 c0       	rjmp	.+46     	; 0x1be0 <bno055_get_mag_calib_stat+0x68>
    1bb2:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1bb6:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1bba:	1b 96       	adiw	r26, 0x0b	; 11
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	1c 97       	sbiw	r26, 0x0c	; 12
    1bc2:	21 e0       	ldi	r18, 0x01	; 1
    1bc4:	ae 01       	movw	r20, r28
    1bc6:	4f 5f       	subi	r20, 0xFF	; 255
    1bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bca:	65 e3       	ldi	r22, 0x35	; 53
    1bcc:	18 96       	adiw	r26, 0x08	; 8
    1bce:	8c 91       	ld	r24, X
    1bd0:	19 95       	eicall
    1bd2:	99 81       	ldd	r25, Y+1	; 0x01
    1bd4:	93 70       	andi	r25, 0x03	; 3
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	90 83       	st	Z, r25
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <bno055_get_mag_calib_stat+0x6a>
    1bdc:	81 e8       	ldi	r24, 0x81	; 129
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <bno055_get_mag_calib_stat+0x6a>
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	0f 90       	pop	r0
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	08 95       	ret

00001bee <bno055_get_accel_calib_stat>:
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	1f 92       	push	r1
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1c02:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1c06:	30 97       	sbiw	r30, 0x00	; 0
    1c08:	49 f1       	breq	.+82     	; 0x1c5c <bno055_get_accel_calib_stat+0x6e>
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	83 81       	ldd	r24, Z+3	; 0x03
    1c0e:	88 23       	and	r24, r24
    1c10:	59 f0       	breq	.+22     	; 0x1c28 <bno055_get_accel_calib_stat+0x3a>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	5e de       	rcall	.-836    	; 0x18d2 <bno055_write_page_id>
    1c16:	88 23       	and	r24, r24
    1c18:	39 f0       	breq	.+14     	; 0x1c28 <bno055_get_accel_calib_stat+0x3a>
    1c1a:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1c1e:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1c22:	83 81       	ldd	r24, Z+3	; 0x03
    1c24:	81 11       	cpse	r24, r1
    1c26:	1c c0       	rjmp	.+56     	; 0x1c60 <bno055_get_accel_calib_stat+0x72>
    1c28:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1c2c:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1c30:	1b 96       	adiw	r26, 0x0b	; 11
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	1c 97       	sbiw	r26, 0x0c	; 12
    1c38:	21 e0       	ldi	r18, 0x01	; 1
    1c3a:	ae 01       	movw	r20, r28
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	65 e3       	ldi	r22, 0x35	; 53
    1c42:	18 96       	adiw	r26, 0x08	; 8
    1c44:	8c 91       	ld	r24, X
    1c46:	19 95       	eicall
    1c48:	29 81       	ldd	r18, Y+1	; 0x01
    1c4a:	2c 70       	andi	r18, 0x0C	; 12
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	35 95       	asr	r19
    1c50:	27 95       	ror	r18
    1c52:	35 95       	asr	r19
    1c54:	27 95       	ror	r18
    1c56:	f8 01       	movw	r30, r16
    1c58:	20 83       	st	Z, r18
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <bno055_get_accel_calib_stat+0x74>
    1c5c:	81 e8       	ldi	r24, 0x81	; 129
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <bno055_get_accel_calib_stat+0x74>
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	0f 90       	pop	r0
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	08 95       	ret

00001c6e <bno055_get_gyro_calib_stat>:
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	1f 92       	push	r1
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	19 82       	std	Y+1, r1	; 0x01
    1c7e:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1c82:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1c86:	30 97       	sbiw	r30, 0x00	; 0
    1c88:	69 f1       	breq	.+90     	; 0x1ce4 <bno055_get_gyro_calib_stat+0x76>
    1c8a:	8c 01       	movw	r16, r24
    1c8c:	83 81       	ldd	r24, Z+3	; 0x03
    1c8e:	88 23       	and	r24, r24
    1c90:	59 f0       	breq	.+22     	; 0x1ca8 <bno055_get_gyro_calib_stat+0x3a>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	1e de       	rcall	.-964    	; 0x18d2 <bno055_write_page_id>
    1c96:	88 23       	and	r24, r24
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <bno055_get_gyro_calib_stat+0x3a>
    1c9a:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1c9e:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1ca2:	83 81       	ldd	r24, Z+3	; 0x03
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	20 c0       	rjmp	.+64     	; 0x1ce8 <bno055_get_gyro_calib_stat+0x7a>
    1ca8:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1cac:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1cb0:	1b 96       	adiw	r26, 0x0b	; 11
    1cb2:	ed 91       	ld	r30, X+
    1cb4:	fc 91       	ld	r31, X
    1cb6:	1c 97       	sbiw	r26, 0x0c	; 12
    1cb8:	21 e0       	ldi	r18, 0x01	; 1
    1cba:	ae 01       	movw	r20, r28
    1cbc:	4f 5f       	subi	r20, 0xFF	; 255
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	65 e3       	ldi	r22, 0x35	; 53
    1cc2:	18 96       	adiw	r26, 0x08	; 8
    1cc4:	8c 91       	ld	r24, X
    1cc6:	19 95       	eicall
    1cc8:	29 81       	ldd	r18, Y+1	; 0x01
    1cca:	20 73       	andi	r18, 0x30	; 48
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	35 95       	asr	r19
    1cd0:	27 95       	ror	r18
    1cd2:	35 95       	asr	r19
    1cd4:	27 95       	ror	r18
    1cd6:	35 95       	asr	r19
    1cd8:	27 95       	ror	r18
    1cda:	35 95       	asr	r19
    1cdc:	27 95       	ror	r18
    1cde:	f8 01       	movw	r30, r16
    1ce0:	20 83       	st	Z, r18
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <bno055_get_gyro_calib_stat+0x7c>
    1ce4:	81 e8       	ldi	r24, 0x81	; 129
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <bno055_get_gyro_calib_stat+0x7c>
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	0f 90       	pop	r0
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <bno055_get_sys_calib_stat>:
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	1f 92       	push	r1
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	19 82       	std	Y+1, r1	; 0x01
    1d06:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1d0a:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1d0e:	30 97       	sbiw	r30, 0x00	; 0
    1d10:	39 f1       	breq	.+78     	; 0x1d60 <bno055_get_sys_calib_stat+0x6a>
    1d12:	8c 01       	movw	r16, r24
    1d14:	83 81       	ldd	r24, Z+3	; 0x03
    1d16:	88 23       	and	r24, r24
    1d18:	59 f0       	breq	.+22     	; 0x1d30 <bno055_get_sys_calib_stat+0x3a>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	da dd       	rcall	.-1100   	; 0x18d2 <bno055_write_page_id>
    1d1e:	88 23       	and	r24, r24
    1d20:	39 f0       	breq	.+14     	; 0x1d30 <bno055_get_sys_calib_stat+0x3a>
    1d22:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1d26:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1d2a:	83 81       	ldd	r24, Z+3	; 0x03
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	1a c0       	rjmp	.+52     	; 0x1d64 <bno055_get_sys_calib_stat+0x6e>
    1d30:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1d34:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1d38:	1b 96       	adiw	r26, 0x0b	; 11
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
    1d3e:	1c 97       	sbiw	r26, 0x0c	; 12
    1d40:	21 e0       	ldi	r18, 0x01	; 1
    1d42:	ae 01       	movw	r20, r28
    1d44:	4f 5f       	subi	r20, 0xFF	; 255
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	65 e3       	ldi	r22, 0x35	; 53
    1d4a:	18 96       	adiw	r26, 0x08	; 8
    1d4c:	8c 91       	ld	r24, X
    1d4e:	19 95       	eicall
    1d50:	99 81       	ldd	r25, Y+1	; 0x01
    1d52:	92 95       	swap	r25
    1d54:	96 95       	lsr	r25
    1d56:	96 95       	lsr	r25
    1d58:	93 70       	andi	r25, 0x03	; 3
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	90 83       	st	Z, r25
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <bno055_get_sys_calib_stat+0x70>
    1d60:	81 e8       	ldi	r24, 0x81	; 129
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <bno055_get_sys_calib_stat+0x70>
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	08 95       	ret

00001d72 <bno055_get_euler_unit>:
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	1f 92       	push	r1
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	19 82       	std	Y+1, r1	; 0x01
    1d82:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1d86:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1d8a:	30 97       	sbiw	r30, 0x00	; 0
    1d8c:	31 f1       	breq	.+76     	; 0x1dda <bno055_get_euler_unit+0x68>
    1d8e:	8c 01       	movw	r16, r24
    1d90:	83 81       	ldd	r24, Z+3	; 0x03
    1d92:	88 23       	and	r24, r24
    1d94:	59 f0       	breq	.+22     	; 0x1dac <bno055_get_euler_unit+0x3a>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	9c dd       	rcall	.-1224   	; 0x18d2 <bno055_write_page_id>
    1d9a:	88 23       	and	r24, r24
    1d9c:	39 f0       	breq	.+14     	; 0x1dac <bno055_get_euler_unit+0x3a>
    1d9e:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1da2:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1da6:	83 81       	ldd	r24, Z+3	; 0x03
    1da8:	81 11       	cpse	r24, r1
    1daa:	19 c0       	rjmp	.+50     	; 0x1dde <bno055_get_euler_unit+0x6c>
    1dac:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1db0:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1db4:	1b 96       	adiw	r26, 0x0b	; 11
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	1c 97       	sbiw	r26, 0x0c	; 12
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	ae 01       	movw	r20, r28
    1dc0:	4f 5f       	subi	r20, 0xFF	; 255
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc4:	6b e3       	ldi	r22, 0x3B	; 59
    1dc6:	18 96       	adiw	r26, 0x08	; 8
    1dc8:	8c 91       	ld	r24, X
    1dca:	19 95       	eicall
    1dcc:	99 81       	ldd	r25, Y+1	; 0x01
    1dce:	92 fb       	bst	r25, 2
    1dd0:	99 27       	eor	r25, r25
    1dd2:	90 f9       	bld	r25, 0
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	90 83       	st	Z, r25
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <bno055_get_euler_unit+0x6e>
    1dda:	81 e8       	ldi	r24, 0x81	; 129
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <bno055_get_euler_unit+0x6e>
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	0f 90       	pop	r0
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <bno055_get_operation_mode>:
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	1f 92       	push	r1
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1e00:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1e04:	30 97       	sbiw	r30, 0x00	; 0
    1e06:	21 f1       	breq	.+72     	; 0x1e50 <bno055_get_operation_mode+0x64>
    1e08:	8c 01       	movw	r16, r24
    1e0a:	83 81       	ldd	r24, Z+3	; 0x03
    1e0c:	88 23       	and	r24, r24
    1e0e:	59 f0       	breq	.+22     	; 0x1e26 <bno055_get_operation_mode+0x3a>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	5f dd       	rcall	.-1346   	; 0x18d2 <bno055_write_page_id>
    1e14:	88 23       	and	r24, r24
    1e16:	39 f0       	breq	.+14     	; 0x1e26 <bno055_get_operation_mode+0x3a>
    1e18:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1e1c:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1e20:	83 81       	ldd	r24, Z+3	; 0x03
    1e22:	81 11       	cpse	r24, r1
    1e24:	17 c0       	rjmp	.+46     	; 0x1e54 <bno055_get_operation_mode+0x68>
    1e26:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1e2a:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1e2e:	1b 96       	adiw	r26, 0x0b	; 11
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
    1e34:	1c 97       	sbiw	r26, 0x0c	; 12
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	ae 01       	movw	r20, r28
    1e3a:	4f 5f       	subi	r20, 0xFF	; 255
    1e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3e:	6d e3       	ldi	r22, 0x3D	; 61
    1e40:	18 96       	adiw	r26, 0x08	; 8
    1e42:	8c 91       	ld	r24, X
    1e44:	19 95       	eicall
    1e46:	99 81       	ldd	r25, Y+1	; 0x01
    1e48:	9f 70       	andi	r25, 0x0F	; 15
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	90 83       	st	Z, r25
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <bno055_get_operation_mode+0x6a>
    1e50:	81 e8       	ldi	r24, 0x81	; 129
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <bno055_get_operation_mode+0x6a>
    1e54:	8f ef       	ldi	r24, 0xFF	; 255
    1e56:	0f 90       	pop	r0
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <bno055_set_operation_mode>:
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	1f 92       	push	r1
    1e6c:	1f 92       	push	r1
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	19 82       	std	Y+1, r1	; 0x01
    1e74:	1a 82       	std	Y+2, r1	; 0x02
    1e76:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <p_bno055>
    1e7a:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1e7e:	23 2b       	or	r18, r19
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <bno055_set_operation_mode+0x22>
    1e82:	9c c0       	rjmp	.+312    	; 0x1fbc <bno055_set_operation_mode+0x15a>
    1e84:	08 2f       	mov	r16, r24
    1e86:	ce 01       	movw	r24, r28
    1e88:	02 96       	adiw	r24, 0x02	; 2
    1e8a:	b0 df       	rcall	.-160    	; 0x1dec <bno055_get_operation_mode>
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	98 c0       	rjmp	.+304    	; 0x1fc0 <bno055_set_operation_mode+0x15e>
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	81 11       	cpse	r24, r1
    1e94:	35 c0       	rjmp	.+106    	; 0x1f00 <bno055_set_operation_mode+0x9e>
    1e96:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1e9a:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1e9e:	1b 96       	adiw	r26, 0x0b	; 11
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	1c 97       	sbiw	r26, 0x0c	; 12
    1ea6:	21 e0       	ldi	r18, 0x01	; 1
    1ea8:	ae 01       	movw	r20, r28
    1eaa:	4f 5f       	subi	r20, 0xFF	; 255
    1eac:	5f 4f       	sbci	r21, 0xFF	; 255
    1eae:	6d e3       	ldi	r22, 0x3D	; 61
    1eb0:	18 96       	adiw	r26, 0x08	; 8
    1eb2:	8c 91       	ld	r24, X
    1eb4:	19 95       	eicall
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	85 c0       	rjmp	.+266    	; 0x1fc4 <bno055_set_operation_mode+0x162>
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	90 7f       	andi	r25, 0xF0	; 240
    1ec0:	80 2f       	mov	r24, r16
    1ec2:	8f 70       	andi	r24, 0x0F	; 15
    1ec4:	89 2b       	or	r24, r25
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1ecc:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1ed0:	19 96       	adiw	r26, 0x09	; 9
    1ed2:	ed 91       	ld	r30, X+
    1ed4:	fc 91       	ld	r31, X
    1ed6:	1a 97       	sbiw	r26, 0x0a	; 10
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	ae 01       	movw	r20, r28
    1edc:	4f 5f       	subi	r20, 0xFF	; 255
    1ede:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee0:	6d e3       	ldi	r22, 0x3D	; 61
    1ee2:	18 96       	adiw	r26, 0x08	; 8
    1ee4:	8c 91       	ld	r24, X
    1ee6:	19 95       	eicall
    1ee8:	18 2f       	mov	r17, r24
    1eea:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1eee:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1ef2:	05 84       	ldd	r0, Z+13	; 0x0d
    1ef4:	f6 85       	ldd	r31, Z+14	; 0x0e
    1ef6:	e0 2d       	mov	r30, r0
    1ef8:	88 e5       	ldi	r24, 0x58	; 88
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	19 95       	eicall
    1efe:	65 c0       	rjmp	.+202    	; 0x1fca <bno055_set_operation_mode+0x168>
    1f00:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1f04:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1f08:	1b 96       	adiw	r26, 0x0b	; 11
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	1c 97       	sbiw	r26, 0x0c	; 12
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	ae 01       	movw	r20, r28
    1f14:	4f 5f       	subi	r20, 0xFF	; 255
    1f16:	5f 4f       	sbci	r21, 0xFF	; 255
    1f18:	6d e3       	ldi	r22, 0x3D	; 61
    1f1a:	18 96       	adiw	r26, 0x08	; 8
    1f1c:	8c 91       	ld	r24, X
    1f1e:	19 95       	eicall
    1f20:	18 2f       	mov	r17, r24
    1f22:	81 11       	cpse	r24, r1
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <bno055_set_operation_mode+0xec>
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	80 7f       	andi	r24, 0xF0	; 240
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	be 01       	movw	r22, r28
    1f30:	6f 5f       	subi	r22, 0xFF	; 255
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	8d e3       	ldi	r24, 0x3D	; 61
    1f36:	ba dc       	rcall	.-1676   	; 0x18ac <bno055_write_register>
    1f38:	18 2f       	mov	r17, r24
    1f3a:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1f3e:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1f42:	05 84       	ldd	r0, Z+13	; 0x0d
    1f44:	f6 85       	ldd	r31, Z+14	; 0x0e
    1f46:	e0 2d       	mov	r30, r0
    1f48:	84 e1       	ldi	r24, 0x14	; 20
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	19 95       	eicall
    1f4e:	00 23       	and	r16, r16
    1f50:	e1 f1       	breq	.+120    	; 0x1fca <bno055_set_operation_mode+0x168>
    1f52:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1f56:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1f5a:	1b 96       	adiw	r26, 0x0b	; 11
    1f5c:	ed 91       	ld	r30, X+
    1f5e:	fc 91       	ld	r31, X
    1f60:	1c 97       	sbiw	r26, 0x0c	; 12
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	ae 01       	movw	r20, r28
    1f66:	4f 5f       	subi	r20, 0xFF	; 255
    1f68:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6a:	6d e3       	ldi	r22, 0x3D	; 61
    1f6c:	18 96       	adiw	r26, 0x08	; 8
    1f6e:	8c 91       	ld	r24, X
    1f70:	19 95       	eicall
    1f72:	81 11       	cpse	r24, r1
    1f74:	29 c0       	rjmp	.+82     	; 0x1fc8 <bno055_set_operation_mode+0x166>
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	98 2f       	mov	r25, r24
    1f7a:	90 7f       	andi	r25, 0xF0	; 240
    1f7c:	80 2f       	mov	r24, r16
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	89 2b       	or	r24, r25
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    1f88:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1f8c:	19 96       	adiw	r26, 0x09	; 9
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fc 91       	ld	r31, X
    1f92:	1a 97       	sbiw	r26, 0x0a	; 10
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	ae 01       	movw	r20, r28
    1f98:	4f 5f       	subi	r20, 0xFF	; 255
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	6d e3       	ldi	r22, 0x3D	; 61
    1f9e:	18 96       	adiw	r26, 0x08	; 8
    1fa0:	8c 91       	ld	r24, X
    1fa2:	19 95       	eicall
    1fa4:	18 2f       	mov	r17, r24
    1fa6:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <p_bno055>
    1faa:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1fae:	05 84       	ldd	r0, Z+13	; 0x0d
    1fb0:	f6 85       	ldd	r31, Z+14	; 0x0e
    1fb2:	e0 2d       	mov	r30, r0
    1fb4:	88 e5       	ldi	r24, 0x58	; 88
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	19 95       	eicall
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <bno055_set_operation_mode+0x168>
    1fbc:	11 e8       	ldi	r17, 0x81	; 129
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <bno055_set_operation_mode+0x168>
    1fc0:	1f ef       	ldi	r17, 0xFF	; 255
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <bno055_set_operation_mode+0x168>
    1fc4:	18 2f       	mov	r17, r24
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <bno055_set_operation_mode+0x168>
    1fc8:	18 2f       	mov	r17, r24
    1fca:	81 2f       	mov	r24, r17
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret

00001fda <bno055_set_euler_unit>:
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	1f 92       	push	r1
    1fe4:	1f 92       	push	r1
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	19 82       	std	Y+1, r1	; 0x01
    1fec:	1a 82       	std	Y+2, r1	; 0x02
    1fee:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <p_bno055>
    1ff2:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    1ff6:	23 2b       	or	r18, r19
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <bno055_set_euler_unit+0x22>
    1ffa:	44 c0       	rjmp	.+136    	; 0x2084 <bno055_set_euler_unit+0xaa>
    1ffc:	08 2f       	mov	r16, r24
    1ffe:	ce 01       	movw	r24, r28
    2000:	02 96       	adiw	r24, 0x02	; 2
    2002:	f4 de       	rcall	.-536    	; 0x1dec <bno055_get_operation_mode>
    2004:	81 11       	cpse	r24, r1
    2006:	35 c0       	rjmp	.+106    	; 0x2072 <bno055_set_euler_unit+0x98>
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	88 23       	and	r24, r24
    200c:	21 f0       	breq	.+8      	; 0x2016 <bno055_set_euler_unit+0x3c>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	28 df       	rcall	.-432    	; 0x1e62 <bno055_set_operation_mode>
    2012:	81 11       	cpse	r24, r1
    2014:	30 c0       	rjmp	.+96     	; 0x2076 <bno055_set_euler_unit+0x9c>
    2016:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    201a:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    201e:	1b 96       	adiw	r26, 0x0b	; 11
    2020:	ed 91       	ld	r30, X+
    2022:	fc 91       	ld	r31, X
    2024:	1c 97       	sbiw	r26, 0x0c	; 12
    2026:	21 e0       	ldi	r18, 0x01	; 1
    2028:	ae 01       	movw	r20, r28
    202a:	4f 5f       	subi	r20, 0xFF	; 255
    202c:	5f 4f       	sbci	r21, 0xFF	; 255
    202e:	6b e3       	ldi	r22, 0x3B	; 59
    2030:	18 96       	adiw	r26, 0x08	; 8
    2032:	8c 91       	ld	r24, X
    2034:	19 95       	eicall
    2036:	18 2f       	mov	r17, r24
    2038:	81 11       	cpse	r24, r1
    203a:	1e c0       	rjmp	.+60     	; 0x2078 <bno055_set_euler_unit+0x9e>
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	98 2f       	mov	r25, r24
    2040:	9b 7f       	andi	r25, 0xFB	; 251
    2042:	80 2f       	mov	r24, r16
    2044:	88 0f       	add	r24, r24
    2046:	88 0f       	add	r24, r24
    2048:	84 70       	andi	r24, 0x04	; 4
    204a:	89 2b       	or	r24, r25
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	a0 91 d1 20 	lds	r26, 0x20D1	; 0x8020d1 <p_bno055>
    2052:	b0 91 d2 20 	lds	r27, 0x20D2	; 0x8020d2 <p_bno055+0x1>
    2056:	19 96       	adiw	r26, 0x09	; 9
    2058:	ed 91       	ld	r30, X+
    205a:	fc 91       	ld	r31, X
    205c:	1a 97       	sbiw	r26, 0x0a	; 10
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	ae 01       	movw	r20, r28
    2062:	4f 5f       	subi	r20, 0xFF	; 255
    2064:	5f 4f       	sbci	r21, 0xFF	; 255
    2066:	6b e3       	ldi	r22, 0x3B	; 59
    2068:	18 96       	adiw	r26, 0x08	; 8
    206a:	8c 91       	ld	r24, X
    206c:	19 95       	eicall
    206e:	18 2f       	mov	r17, r24
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <bno055_set_euler_unit+0x9e>
    2072:	1f ef       	ldi	r17, 0xFF	; 255
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <bno055_set_euler_unit+0x9e>
    2076:	1f ef       	ldi	r17, 0xFF	; 255
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	88 23       	and	r24, r24
    207c:	29 f0       	breq	.+10     	; 0x2088 <bno055_set_euler_unit+0xae>
    207e:	f1 de       	rcall	.-542    	; 0x1e62 <bno055_set_operation_mode>
    2080:	81 0f       	add	r24, r17
    2082:	03 c0       	rjmp	.+6      	; 0x208a <bno055_set_euler_unit+0xb0>
    2084:	81 e8       	ldi	r24, 0x81	; 129
    2086:	01 c0       	rjmp	.+2      	; 0x208a <bno055_set_euler_unit+0xb0>
    2088:	81 2f       	mov	r24, r17
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	08 95       	ret

00002098 <bno055_convert_double_euler_hpr_deg>:
 *
 */

BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(
struct bno055_euler_double_t *euler_hpr)
{
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	27 97       	sbiw	r28, 0x07	; 7
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	7c 01       	movw	r14, r24
	/* Variable used to return value of
	communication routine*/
	BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
	struct bno055_euler_t reg_euler = {BNO055_INIT_VALUE,
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	1a 82       	std	Y+2, r1	; 0x02
    20b2:	1b 82       	std	Y+3, r1	; 0x03
    20b4:	1c 82       	std	Y+4, r1	; 0x04
    20b6:	1d 82       	std	Y+5, r1	; 0x05
    20b8:	1e 82       	std	Y+6, r1	; 0x06
	BNO055_INIT_VALUE, BNO055_INIT_VALUE};
	u8 euler_unit_u8 = BNO055_INIT_VALUE;
    20ba:	1f 82       	std	Y+7, r1	; 0x07
	/* Read the current Euler unit and set the
	unit as degree if the unit is in radians */
	com_rslt = bno055_get_euler_unit(&euler_unit_u8);
    20bc:	ce 01       	movw	r24, r28
    20be:	07 96       	adiw	r24, 0x07	; 7
    20c0:	58 de       	rcall	.-848    	; 0x1d72 <bno055_get_euler_unit>
    20c2:	18 2f       	mov	r17, r24
	if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
    20c4:	8f 81       	ldd	r24, Y+7	; 0x07
    20c6:	88 23       	and	r24, r24
    20c8:	19 f0       	breq	.+6      	; 0x20d0 <bno055_convert_double_euler_hpr_deg+0x38>
		com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	86 df       	rcall	.-244    	; 0x1fda <bno055_set_euler_unit>
    20ce:	18 0f       	add	r17, r24
	if (com_rslt == BNO055_SUCCESS) {
    20d0:	11 11       	cpse	r17, r1
    20d2:	39 c0       	rjmp	.+114    	; 0x2146 <bno055_convert_double_euler_hpr_deg+0xae>
		/* Read Euler raw h data*/
			com_rslt += bno055_read_euler_hrp(&reg_euler);
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	39 dc       	rcall	.-1934   	; 0x194c <bno055_read_euler_hrp>
		if (com_rslt == BNO055_SUCCESS) {
    20da:	81 11       	cpse	r24, r1
    20dc:	36 c0       	rjmp	.+108    	; 0x214a <bno055_convert_double_euler_hpr_deg+0xb2>
			/* Convert raw Euler hrp to degree*/
			euler_hpr->h =
    20de:	69 81       	ldd	r22, Y+1	; 0x01
    20e0:	7a 81       	ldd	r23, Y+2	; 0x02
    20e2:	07 2e       	mov	r0, r23
    20e4:	00 0c       	add	r0, r0
    20e6:	88 0b       	sbc	r24, r24
    20e8:	99 0b       	sbc	r25, r25
    20ea:	7b d3       	rcall	.+1782   	; 0x27e2 <__floatsisf>
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5d e3       	ldi	r21, 0x3D	; 61
    20f4:	02 d4       	rcall	.+2052   	; 0x28fa <__mulsf3>
    20f6:	f7 01       	movw	r30, r14
    20f8:	60 83       	st	Z, r22
    20fa:	71 83       	std	Z+1, r23	; 0x01
    20fc:	82 83       	std	Z+2, r24	; 0x02
    20fe:	93 83       	std	Z+3, r25	; 0x03
			(double)(reg_euler.h/BNO055_EULER_DIV_DEG);
			euler_hpr->p =
    2100:	6d 81       	ldd	r22, Y+5	; 0x05
    2102:	7e 81       	ldd	r23, Y+6	; 0x06
    2104:	07 2e       	mov	r0, r23
    2106:	00 0c       	add	r0, r0
    2108:	88 0b       	sbc	r24, r24
    210a:	99 0b       	sbc	r25, r25
    210c:	6a d3       	rcall	.+1748   	; 0x27e2 <__floatsisf>
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5d e3       	ldi	r21, 0x3D	; 61
    2116:	f1 d3       	rcall	.+2018   	; 0x28fa <__mulsf3>
    2118:	f7 01       	movw	r30, r14
    211a:	60 87       	std	Z+8, r22	; 0x08
    211c:	71 87       	std	Z+9, r23	; 0x09
    211e:	82 87       	std	Z+10, r24	; 0x0a
    2120:	93 87       	std	Z+11, r25	; 0x0b
			(double)(reg_euler.p/BNO055_EULER_DIV_DEG);
			euler_hpr->r =
    2122:	6b 81       	ldd	r22, Y+3	; 0x03
    2124:	7c 81       	ldd	r23, Y+4	; 0x04
    2126:	07 2e       	mov	r0, r23
    2128:	00 0c       	add	r0, r0
    212a:	88 0b       	sbc	r24, r24
    212c:	99 0b       	sbc	r25, r25
    212e:	59 d3       	rcall	.+1714   	; 0x27e2 <__floatsisf>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5d e3       	ldi	r21, 0x3D	; 61
    2138:	e0 d3       	rcall	.+1984   	; 0x28fa <__mulsf3>
    213a:	f7 01       	movw	r30, r14
    213c:	64 83       	std	Z+4, r22	; 0x04
    213e:	75 83       	std	Z+5, r23	; 0x05
    2140:	86 83       	std	Z+6, r24	; 0x06
    2142:	97 83       	std	Z+7, r25	; 0x07
    2144:	03 c0       	rjmp	.+6      	; 0x214c <bno055_convert_double_euler_hpr_deg+0xb4>
    2146:	1f ef       	ldi	r17, 0xFF	; 255
			(double)(reg_euler.r/BNO055_EULER_DIV_DEG);
		} else {
		com_rslt = BNO055_ERROR;
		}
	} else {
	com_rslt = BNO055_ERROR;
    2148:	01 c0       	rjmp	.+2      	; 0x214c <bno055_convert_double_euler_hpr_deg+0xb4>
    214a:	1f ef       	ldi	r17, 0xFF	; 255
			euler_hpr->p =
			(double)(reg_euler.p/BNO055_EULER_DIV_DEG);
			euler_hpr->r =
			(double)(reg_euler.r/BNO055_EULER_DIV_DEG);
		} else {
		com_rslt = BNO055_ERROR;
    214c:	81 2f       	mov	r24, r17
		}
	} else {
	com_rslt = BNO055_ERROR;
	}
	return com_rslt;
}
    214e:	27 96       	adiw	r28, 0x07	; 7
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	08 95       	ret

00002160 <imu_update>:
    2160:	81 ef       	ldi	r24, 0xF1	; 241
	
}

void imu_update()
{
	bno055_convert_double_linear_accel_xyz_msq(&bno055_linear_accel);
    2162:	90 e2       	ldi	r25, 0x20	; 32
    2164:	b3 dc       	rcall	.-1690   	; 0x1acc <bno055_convert_double_linear_accel_xyz_msq>
	bno055_convert_double_euler_hpr_deg(&bno055_euler);
    2166:	8d ef       	ldi	r24, 0xFD	; 253
    2168:	90 e2       	ldi	r25, 0x20	; 32
    216a:	96 df       	rcall	.-212    	; 0x2098 <bno055_convert_double_euler_hpr_deg>
	
	bno055_get_accel_calib_stat(&accel_calib);
    216c:	8a e0       	ldi	r24, 0x0A	; 10
    216e:	91 e2       	ldi	r25, 0x21	; 33
    2170:	3e dd       	rcall	.-1412   	; 0x1bee <bno055_get_accel_calib_stat>
	bno055_get_gyro_calib_stat(&gyro_calib);
    2172:	8c e0       	ldi	r24, 0x0C	; 12
    2174:	91 e2       	ldi	r25, 0x21	; 33
    2176:	7b dd       	rcall	.-1290   	; 0x1c6e <bno055_get_gyro_calib_stat>
	bno055_get_mag_calib_stat(&mag_calib);
    2178:	89 e0       	ldi	r24, 0x09	; 9
    217a:	91 e2       	ldi	r25, 0x21	; 33
    217c:	fd dc       	rcall	.-1542   	; 0x1b78 <bno055_get_mag_calib_stat>
	bno055_get_sys_calib_stat(&sys_calib);
    217e:	8b e0       	ldi	r24, 0x0B	; 11
    2180:	91 e2       	ldi	r25, 0x21	; 33
    2182:	b9 cd       	rjmp	.-1166   	; 0x1cf6 <bno055_get_sys_calib_stat>
    2184:	08 95       	ret

00002186 <newOLogInit>:


void newOLogInit()//initializes the openLog uart communication interface
{
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    2186:	e3 ed       	ldi	r30, 0xD3	; 211
    2188:	f0 e2       	ldi	r31, 0x20	; 32
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	92 ec       	ldi	r25, 0xC2	; 194
    218e:	a1 e0       	ldi	r26, 0x01	; 1
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	86 83       	std	Z+6, r24	; 0x06
    2194:	97 83       	std	Z+7, r25	; 0x07
    2196:	a0 87       	std	Z+8, r26	; 0x08
    2198:	b1 87       	std	Z+9, r27	; 0x09
    openLog.Port=P_OPENLOG_PORT;
    219a:	80 e4       	ldi	r24, 0x40	; 64
    219c:	96 e0       	ldi	r25, 0x06	; 6
    219e:	80 83       	st	Z, r24
    21a0:	91 83       	std	Z+1, r25	; 0x01
	openLog.Usart=P_OPENLOG_UART;
    21a2:	80 ea       	ldi	r24, 0xA0	; 160
    21a4:	98 e0       	ldi	r25, 0x08	; 8
    21a6:	82 83       	std	Z+2, r24	; 0x02
    21a8:	93 83       	std	Z+3, r25	; 0x03
	openLog.tx=OPENLOG_TX_PIN;
    21aa:	88 e0       	ldi	r24, 0x08	; 8
    21ac:	85 83       	std	Z+5, r24	; 0x05
	openLog.rx=OPENLOG_RX_PIN;
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	84 83       	std	Z+4, r24	; 0x04
	uart_init(&openLog);//function that initializes uart
    21b2:	cf 01       	movw	r24, r30
    21b4:	24 d0       	rcall	.+72     	; 0x21fe <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n");
    21b6:	87 e0       	ldi	r24, 0x07	; 7
    21b8:	90 e2       	ldi	r25, 0x20	; 32
    21ba:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <puts>
    21be:	08 95       	ret

000021c0 <openLogWrite>:
}
void openLogWrite(char * data)
{
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
	UARTWriteArray(openLog,data);
    21c8:	7c 01       	movw	r14, r24
    21ca:	00 91 d3 20 	lds	r16, 0x20D3	; 0x8020d3 <openLog>
    21ce:	10 91 d4 20 	lds	r17, 0x20D4	; 0x8020d4 <openLog+0x1>
    21d2:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <openLog+0x2>
    21d6:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <openLog+0x3>
    21da:	40 91 d7 20 	lds	r20, 0x20D7	; 0x8020d7 <openLog+0x4>
    21de:	50 91 d8 20 	lds	r21, 0x20D8	; 0x8020d8 <openLog+0x5>
    21e2:	60 91 d9 20 	lds	r22, 0x20D9	; 0x8020d9 <openLog+0x6>
    21e6:	70 91 da 20 	lds	r23, 0x20DA	; 0x8020da <openLog+0x7>
    21ea:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <openLog+0x8>
    21ee:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <openLog+0x9>
    21f2:	81 d1       	rcall	.+770    	; 0x24f6 <UARTWriteArray>
}
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	08 95       	ret

000021fe <uart_init>:
	
}
void UARTReadArray(uart_device device,char * data)
{
	usart_serial_read_packet(device.Usart,data,sizeof(data));
}
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	27 97       	sbiw	r28, 0x07	; 7
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	7c 01       	movw	r14, r24
    2216:	fc 01       	movw	r30, r24
    2218:	86 81       	ldd	r24, Z+6	; 0x06
    221a:	97 81       	ldd	r25, Z+7	; 0x07
    221c:	a0 85       	ldd	r26, Z+8	; 0x08
    221e:	b1 85       	ldd	r27, Z+9	; 0x09
    2220:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    2224:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    2228:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    222c:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
    2230:	01 90       	ld	r0, Z+
    2232:	f0 81       	ld	r31, Z
    2234:	e0 2d       	mov	r30, r0
    2236:	90 81       	ld	r25, Z
    2238:	d7 01       	movw	r26, r14
    223a:	15 96       	adiw	r26, 0x05	; 5
    223c:	8c 91       	ld	r24, X
    223e:	15 97       	sbiw	r26, 0x05	; 5
    2240:	89 2b       	or	r24, r25
    2242:	80 83       	st	Z, r24
    2244:	ed 91       	ld	r30, X+
    2246:	fc 91       	ld	r31, X
    2248:	11 97       	sbiw	r26, 0x01	; 1
    224a:	94 81       	ldd	r25, Z+4	; 0x04
    224c:	15 96       	adiw	r26, 0x05	; 5
    224e:	8c 91       	ld	r24, X
    2250:	15 97       	sbiw	r26, 0x05	; 5
    2252:	89 2b       	or	r24, r25
    2254:	84 83       	std	Z+4, r24	; 0x04
    2256:	ed 91       	ld	r30, X+
    2258:	fc 91       	ld	r31, X
    225a:	11 97       	sbiw	r26, 0x01	; 1
    225c:	90 81       	ld	r25, Z
    225e:	14 96       	adiw	r26, 0x04	; 4
    2260:	8c 91       	ld	r24, X
    2262:	14 97       	sbiw	r26, 0x04	; 4
    2264:	80 95       	com	r24
    2266:	89 23       	and	r24, r25
    2268:	80 83       	st	Z, r24
    226a:	12 96       	adiw	r26, 0x02	; 2
    226c:	0d 91       	ld	r16, X+
    226e:	1c 91       	ld	r17, X
    2270:	13 97       	sbiw	r26, 0x03	; 3
    2272:	01 15       	cp	r16, r1
    2274:	11 05       	cpc	r17, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <uart_init+0x7c>
    2278:	21 c1       	rjmp	.+578    	; 0x24bc <uart_init+0x2be>
    227a:	00 3c       	cpi	r16, 0xC0	; 192
    227c:	11 05       	cpc	r17, r1
    227e:	29 f4       	brne	.+10     	; 0x228a <uart_init+0x8c>
    2280:	60 e1       	ldi	r22, 0x10	; 16
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2288:	cd c0       	rjmp	.+410    	; 0x2424 <uart_init+0x226>
    228a:	01 15       	cp	r16, r1
    228c:	b4 e0       	ldi	r27, 0x04	; 4
    228e:	1b 07       	cpc	r17, r27
    2290:	29 f4       	brne	.+10     	; 0x229c <uart_init+0x9e>
    2292:	64 e0       	ldi	r22, 0x04	; 4
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    229a:	c4 c0       	rjmp	.+392    	; 0x2424 <uart_init+0x226>
    229c:	00 38       	cpi	r16, 0x80	; 128
    229e:	e1 e0       	ldi	r30, 0x01	; 1
    22a0:	1e 07       	cpc	r17, r30
    22a2:	29 f4       	brne	.+10     	; 0x22ae <uart_init+0xb0>
    22a4:	62 e0       	ldi	r22, 0x02	; 2
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    22ac:	bb c0       	rjmp	.+374    	; 0x2424 <uart_init+0x226>
    22ae:	01 15       	cp	r16, r1
    22b0:	f1 e0       	ldi	r31, 0x01	; 1
    22b2:	1f 07       	cpc	r17, r31
    22b4:	29 f4       	brne	.+10     	; 0x22c0 <uart_init+0xc2>
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    22be:	b2 c0       	rjmp	.+356    	; 0x2424 <uart_init+0x226>
    22c0:	00 38       	cpi	r16, 0x80	; 128
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	18 07       	cpc	r17, r24
    22c6:	29 f4       	brne	.+10     	; 0x22d2 <uart_init+0xd4>
    22c8:	61 e0       	ldi	r22, 0x01	; 1
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    22d0:	a9 c0       	rjmp	.+338    	; 0x2424 <uart_init+0x226>
    22d2:	01 15       	cp	r16, r1
    22d4:	a2 e0       	ldi	r26, 0x02	; 2
    22d6:	1a 07       	cpc	r17, r26
    22d8:	29 f4       	brne	.+10     	; 0x22e4 <uart_init+0xe6>
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    22e2:	a0 c0       	rjmp	.+320    	; 0x2424 <uart_init+0x226>
    22e4:	00 32       	cpi	r16, 0x20	; 32
    22e6:	b3 e0       	ldi	r27, 0x03	; 3
    22e8:	1b 07       	cpc	r17, r27
    22ea:	29 f4       	brne	.+10     	; 0x22f6 <uart_init+0xf8>
    22ec:	64 e0       	ldi	r22, 0x04	; 4
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    22f4:	97 c0       	rjmp	.+302    	; 0x2424 <uart_init+0x226>
    22f6:	01 15       	cp	r16, r1
    22f8:	e8 e0       	ldi	r30, 0x08	; 8
    22fa:	1e 07       	cpc	r17, r30
    22fc:	29 f4       	brne	.+10     	; 0x2308 <uart_init+0x10a>
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2306:	8e c0       	rjmp	.+284    	; 0x2424 <uart_init+0x226>
    2308:	01 15       	cp	r16, r1
    230a:	f9 e0       	ldi	r31, 0x09	; 9
    230c:	1f 07       	cpc	r17, r31
    230e:	29 f4       	brne	.+10     	; 0x231a <uart_init+0x11c>
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2318:	85 c0       	rjmp	.+266    	; 0x2424 <uart_init+0x226>
    231a:	01 15       	cp	r16, r1
    231c:	8a e0       	ldi	r24, 0x0A	; 10
    231e:	18 07       	cpc	r17, r24
    2320:	29 f4       	brne	.+10     	; 0x232c <uart_init+0x12e>
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	85 e0       	ldi	r24, 0x05	; 5
    2326:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    232a:	7c c0       	rjmp	.+248    	; 0x2424 <uart_init+0x226>
    232c:	00 34       	cpi	r16, 0x40	; 64
    232e:	a8 e0       	ldi	r26, 0x08	; 8
    2330:	1a 07       	cpc	r17, r26
    2332:	29 f4       	brne	.+10     	; 0x233e <uart_init+0x140>
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    233c:	73 c0       	rjmp	.+230    	; 0x2424 <uart_init+0x226>
    233e:	00 34       	cpi	r16, 0x40	; 64
    2340:	b9 e0       	ldi	r27, 0x09	; 9
    2342:	1b 07       	cpc	r17, r27
    2344:	29 f4       	brne	.+10     	; 0x2350 <uart_init+0x152>
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    234e:	6a c0       	rjmp	.+212    	; 0x2424 <uart_init+0x226>
    2350:	00 39       	cpi	r16, 0x90	; 144
    2352:	e8 e0       	ldi	r30, 0x08	; 8
    2354:	1e 07       	cpc	r17, r30
    2356:	29 f4       	brne	.+10     	; 0x2362 <uart_init+0x164>
    2358:	64 e0       	ldi	r22, 0x04	; 4
    235a:	83 e0       	ldi	r24, 0x03	; 3
    235c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2360:	61 c0       	rjmp	.+194    	; 0x2424 <uart_init+0x226>
    2362:	00 39       	cpi	r16, 0x90	; 144
    2364:	f9 e0       	ldi	r31, 0x09	; 9
    2366:	1f 07       	cpc	r17, r31
    2368:	29 f4       	brne	.+10     	; 0x2374 <uart_init+0x176>
    236a:	64 e0       	ldi	r22, 0x04	; 4
    236c:	84 e0       	ldi	r24, 0x04	; 4
    236e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2372:	58 c0       	rjmp	.+176    	; 0x2424 <uart_init+0x226>
    2374:	00 39       	cpi	r16, 0x90	; 144
    2376:	8a e0       	ldi	r24, 0x0A	; 10
    2378:	18 07       	cpc	r17, r24
    237a:	29 f4       	brne	.+10     	; 0x2386 <uart_init+0x188>
    237c:	64 e0       	ldi	r22, 0x04	; 4
    237e:	85 e0       	ldi	r24, 0x05	; 5
    2380:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2384:	4f c0       	rjmp	.+158    	; 0x2424 <uart_init+0x226>
    2386:	00 3c       	cpi	r16, 0xC0	; 192
    2388:	a8 e0       	ldi	r26, 0x08	; 8
    238a:	1a 07       	cpc	r17, r26
    238c:	29 f4       	brne	.+10     	; 0x2398 <uart_init+0x19a>
    238e:	68 e0       	ldi	r22, 0x08	; 8
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2396:	46 c0       	rjmp	.+140    	; 0x2424 <uart_init+0x226>
    2398:	00 3c       	cpi	r16, 0xC0	; 192
    239a:	b9 e0       	ldi	r27, 0x09	; 9
    239c:	1b 07       	cpc	r17, r27
    239e:	29 f4       	brne	.+10     	; 0x23aa <uart_init+0x1ac>
    23a0:	68 e0       	ldi	r22, 0x08	; 8
    23a2:	84 e0       	ldi	r24, 0x04	; 4
    23a4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    23a8:	3d c0       	rjmp	.+122    	; 0x2424 <uart_init+0x226>
    23aa:	00 3a       	cpi	r16, 0xA0	; 160
    23ac:	e8 e0       	ldi	r30, 0x08	; 8
    23ae:	1e 07       	cpc	r17, r30
    23b0:	29 f4       	brne	.+10     	; 0x23bc <uart_init+0x1be>
    23b2:	60 e1       	ldi	r22, 0x10	; 16
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    23ba:	34 c0       	rjmp	.+104    	; 0x2424 <uart_init+0x226>
    23bc:	00 3a       	cpi	r16, 0xA0	; 160
    23be:	f9 e0       	ldi	r31, 0x09	; 9
    23c0:	1f 07       	cpc	r17, r31
    23c2:	29 f4       	brne	.+10     	; 0x23ce <uart_init+0x1d0>
    23c4:	60 e1       	ldi	r22, 0x10	; 16
    23c6:	84 e0       	ldi	r24, 0x04	; 4
    23c8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    23cc:	2b c0       	rjmp	.+86     	; 0x2424 <uart_init+0x226>
    23ce:	00 3a       	cpi	r16, 0xA0	; 160
    23d0:	8a e0       	ldi	r24, 0x0A	; 10
    23d2:	18 07       	cpc	r17, r24
    23d4:	29 f4       	brne	.+10     	; 0x23e0 <uart_init+0x1e2>
    23d6:	60 e1       	ldi	r22, 0x10	; 16
    23d8:	85 e0       	ldi	r24, 0x05	; 5
    23da:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    23de:	22 c0       	rjmp	.+68     	; 0x2424 <uart_init+0x226>
    23e0:	00 3b       	cpi	r16, 0xB0	; 176
    23e2:	a8 e0       	ldi	r26, 0x08	; 8
    23e4:	1a 07       	cpc	r17, r26
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <uart_init+0x1f4>
    23e8:	60 e2       	ldi	r22, 0x20	; 32
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    23f0:	19 c0       	rjmp	.+50     	; 0x2424 <uart_init+0x226>
    23f2:	00 3b       	cpi	r16, 0xB0	; 176
    23f4:	b9 e0       	ldi	r27, 0x09	; 9
    23f6:	1b 07       	cpc	r17, r27
    23f8:	29 f4       	brne	.+10     	; 0x2404 <uart_init+0x206>
    23fa:	60 e2       	ldi	r22, 0x20	; 32
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2402:	10 c0       	rjmp	.+32     	; 0x2424 <uart_init+0x226>
    2404:	00 38       	cpi	r16, 0x80	; 128
    2406:	e4 e0       	ldi	r30, 0x04	; 4
    2408:	1e 07       	cpc	r17, r30
    240a:	29 f4       	brne	.+10     	; 0x2416 <uart_init+0x218>
    240c:	60 e4       	ldi	r22, 0x40	; 64
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2414:	07 c0       	rjmp	.+14     	; 0x2424 <uart_init+0x226>
    2416:	00 3a       	cpi	r16, 0xA0	; 160
    2418:	14 40       	sbci	r17, 0x04	; 4
    241a:	21 f4       	brne	.+8      	; 0x2424 <uart_init+0x226>
    241c:	60 e4       	ldi	r22, 0x40	; 64
    241e:	85 e0       	ldi	r24, 0x05	; 5
    2420:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2424:	d7 01       	movw	r26, r14
    2426:	12 96       	adiw	r26, 0x02	; 2
    2428:	0d 91       	ld	r16, X+
    242a:	1c 91       	ld	r17, X
    242c:	13 97       	sbiw	r26, 0x03	; 3
    242e:	e0 e0       	ldi	r30, 0x00	; 0
    2430:	f0 e2       	ldi	r31, 0x20	; 32
    2432:	84 81       	ldd	r24, Z+4	; 0x04
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	85 81       	ldd	r24, Z+5	; 0x05
    2438:	8e 83       	std	Y+6, r24	; 0x06
    243a:	86 81       	ldd	r24, Z+6	; 0x06
    243c:	8f 83       	std	Y+7, r24	; 0x07
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	a2 81       	ldd	r26, Z+2	; 0x02
    2444:	b3 81       	ldd	r27, Z+3	; 0x03
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	ab 83       	std	Y+3, r26	; 0x03
    244c:	bc 83       	std	Y+4, r27	; 0x04
    244e:	78 01       	movw	r14, r16
    2450:	00 3a       	cpi	r16, 0xA0	; 160
    2452:	b8 e0       	ldi	r27, 0x08	; 8
    2454:	1b 07       	cpc	r17, r27
    2456:	29 f4       	brne	.+10     	; 0x2462 <uart_init+0x264>
    2458:	60 e1       	ldi	r22, 0x10	; 16
    245a:	83 e0       	ldi	r24, 0x03	; 3
    245c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2460:	13 c0       	rjmp	.+38     	; 0x2488 <uart_init+0x28a>
    2462:	00 3b       	cpi	r16, 0xB0	; 176
    2464:	e8 e0       	ldi	r30, 0x08	; 8
    2466:	1e 07       	cpc	r17, r30
    2468:	29 f4       	brne	.+10     	; 0x2474 <uart_init+0x276>
    246a:	60 e2       	ldi	r22, 0x20	; 32
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <uart_init+0x29e>
    2474:	f0 ea       	ldi	r31, 0xA0	; 160
    2476:	ef 16       	cp	r14, r31
    2478:	f9 e0       	ldi	r31, 0x09	; 9
    247a:	ff 06       	cpc	r15, r31
    247c:	29 f4       	brne	.+10     	; 0x2488 <uart_init+0x28a>
    247e:	60 e1       	ldi	r22, 0x10	; 16
    2480:	84 e0       	ldi	r24, 0x04	; 4
    2482:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    2486:	13 c0       	rjmp	.+38     	; 0x24ae <uart_init+0x2b0>
    2488:	80 eb       	ldi	r24, 0xB0	; 176
    248a:	e8 16       	cp	r14, r24
    248c:	89 e0       	ldi	r24, 0x09	; 9
    248e:	f8 06       	cpc	r15, r24
    2490:	29 f4       	brne	.+10     	; 0x249c <uart_init+0x29e>
    2492:	60 e2       	ldi	r22, 0x20	; 32
    2494:	84 e0       	ldi	r24, 0x04	; 4
    2496:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    249a:	09 c0       	rjmp	.+18     	; 0x24ae <uart_init+0x2b0>
    249c:	a0 ea       	ldi	r26, 0xA0	; 160
    249e:	ea 16       	cp	r14, r26
    24a0:	aa e0       	ldi	r26, 0x0A	; 10
    24a2:	fa 06       	cpc	r15, r26
    24a4:	21 f4       	brne	.+8      	; 0x24ae <uart_init+0x2b0>
    24a6:	60 e1       	ldi	r22, 0x10	; 16
    24a8:	85 e0       	ldi	r24, 0x05	; 5
    24aa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <sysclk_enable_module>
    24ae:	be 01       	movw	r22, r28
    24b0:	6f 5f       	subi	r22, 0xFF	; 255
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	c8 01       	movw	r24, r16
    24b6:	0e 94 bc 03 	call	0x778	; 0x778 <usart_init_rs232>
    24ba:	13 c0       	rjmp	.+38     	; 0x24e2 <uart_init+0x2e4>
    24bc:	e0 e0       	ldi	r30, 0x00	; 0
    24be:	f0 e2       	ldi	r31, 0x20	; 32
    24c0:	84 81       	ldd	r24, Z+4	; 0x04
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	85 81       	ldd	r24, Z+5	; 0x05
    24c6:	8e 83       	std	Y+6, r24	; 0x06
    24c8:	86 81       	ldd	r24, Z+6	; 0x06
    24ca:	8f 83       	std	Y+7, r24	; 0x07
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	a2 81       	ldd	r26, Z+2	; 0x02
    24d2:	b3 81       	ldd	r27, Z+3	; 0x03
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	ab 83       	std	Y+3, r26	; 0x03
    24da:	bc 83       	std	Y+4, r27	; 0x04
    24dc:	e1 2c       	mov	r14, r1
    24de:	f1 2c       	mov	r15, r1
    24e0:	c9 cf       	rjmp	.-110    	; 0x2474 <uart_init+0x276>
    24e2:	27 96       	adiw	r28, 0x07	; 7
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	08 95       	ret

000024f6 <UARTWriteArray>:
void UARTWriteArray(uart_device device, char * data)//uses usart to write an array of data to the specified device
{
    24f6:	ef 92       	push	r14
    24f8:	ff 92       	push	r15
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	cf 93       	push	r28
    2500:	df 93       	push	r29
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	2a 97       	sbiw	r28, 0x0a	; 10
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	2b 83       	std	Y+3, r18	; 0x03
    250e:	3c 83       	std	Y+4, r19	; 0x04
    2510:	b7 01       	movw	r22, r14
	usart_serial_write_packet(device.Usart,data,sizeof(data));
    2512:	42 e0       	ldi	r20, 0x02	; 2
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	0e 94 99 05 	call	0xb32	; 0xb32 <usart_serial_write_packet>
}
    251e:	2a 96       	adiw	r28, 0x0a	; 10
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	ff 90       	pop	r15
    252e:	ef 90       	pop	r14
    2530:	08 95       	ret

00002532 <xbee_init>:
#include "Xbee.h"
static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

void xbee_init()
{
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
	xbee_uart.Baud=XBEEBAUD;
    2536:	ed ed       	ldi	r30, 0xDD	; 221
    2538:	f0 e2       	ldi	r31, 0x20	; 32
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	92 ec       	ldi	r25, 0xC2	; 194
    253e:	a1 e0       	ldi	r26, 0x01	; 1
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	86 83       	std	Z+6, r24	; 0x06
    2544:	97 83       	std	Z+7, r25	; 0x07
    2546:	a0 87       	std	Z+8, r26	; 0x08
    2548:	b1 87       	std	Z+9, r27	; 0x09
	xbee_uart.Port=P_XBEEPORT;
    254a:	80 e6       	ldi	r24, 0x60	; 96
    254c:	96 e0       	ldi	r25, 0x06	; 6
    254e:	80 83       	st	Z, r24
    2550:	91 83       	std	Z+1, r25	; 0x01
	xbee_uart.Usart=P_XBEEUART;
    2552:	c0 ea       	ldi	r28, 0xA0	; 160
    2554:	d9 e0       	ldi	r29, 0x09	; 9
    2556:	c2 83       	std	Z+2, r28	; 0x02
    2558:	d3 83       	std	Z+3, r29	; 0x03
	xbee_uart.tx=XBEETXPIN;
    255a:	88 e0       	ldi	r24, 0x08	; 8
    255c:	85 83       	std	Z+5, r24	; 0x05
	xbee_uart.rx=XBEERXPIN;
    255e:	84 e0       	ldi	r24, 0x04	; 4
    2560:	84 83       	std	Z+4, r24	; 0x04
	uart_init(&xbee_uart);
    2562:	cf 01       	movw	r24, r30
    2564:	4c de       	rcall	.-872    	; 0x21fe <uart_init>
	XBEE_UART.CTRLA=0x14;
    2566:	84 e1       	ldi	r24, 0x14	; 20
    2568:	8b 83       	std	Y+3, r24	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    256a:	80 e3       	ldi	r24, 0x30	; 48
    256c:	90 e2       	ldi	r25, 0x20	; 32
    256e:	0a d7       	rcall	.+3604   	; 0x3384 <puts>
}
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	c8 2f       	mov	r28, r24
    257c:	d9 2f       	mov	r29, r25
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    257e:	a8 2f       	mov	r26, r24
    2580:	b9 2f       	mov	r27, r25
    2582:	fd 01       	movw	r30, r26
    2584:	01 90       	ld	r0, Z+
    2586:	00 20       	and	r0, r0
    2588:	e9 f7       	brne	.-6      	; 0x2584 <xbeeWrite+0xe>
    258a:	31 97       	sbiw	r30, 0x01	; 1
    258c:	af 01       	movw	r20, r30
    258e:	4a 1b       	sub	r20, r26
    2590:	5b 0b       	sbc	r21, r27
    2592:	68 2f       	mov	r22, r24
    2594:	79 2f       	mov	r23, r25
    2596:	80 ea       	ldi	r24, 0xA0	; 160
    2598:	99 e0       	ldi	r25, 0x09	; 9
    259a:	0e 94 99 05 	call	0xb32	; 0xb32 <usart_serial_write_packet>
	if(DEBUG) printf("%s \n",(const)data);
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	82 e4       	ldi	r24, 0x42	; 66
    25a4:	90 e2       	ldi	r25, 0x20	; 32
    25a6:	9f 93       	push	r25
    25a8:	8f 93       	push	r24
    25aa:	d9 d6       	rcall	.+3506   	; 0x335e <printf>
}
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <__vector_91>:

ISR(READ_INTURUPT)
{
    25ba:	1f 92       	push	r1
    25bc:	0f 92       	push	r0
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	0f 92       	push	r0
    25c2:	11 24       	eor	r1, r1
    25c4:	08 b6       	in	r0, 0x38	; 56
    25c6:	0f 92       	push	r0
    25c8:	18 be       	out	0x38, r1	; 56
    25ca:	8f 93       	push	r24
	XbeeRx=XBEE_UART.DATA;
    25cc:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    25d0:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <XbeeRx>
    25d4:	8f 91       	pop	r24
    25d6:	0f 90       	pop	r0
    25d8:	08 be       	out	0x38, r0	; 56
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	0f 90       	pop	r0
    25e0:	1f 90       	pop	r1
    25e2:	18 95       	reti

000025e4 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    25ee:	c6 2f       	mov	r28, r22
    25f0:	d0 e0       	ldi	r29, 0x00	; 0
    25f2:	de 01       	movw	r26, r28
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <ioport_configure_port_pin+0x18>
    25f8:	b5 95       	asr	r27
    25fa:	a7 95       	ror	r26
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <ioport_configure_port_pin+0x14>
    2600:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2602:	50 8b       	std	Z+16, r21	; 0x10
    2604:	2f 5f       	subi	r18, 0xFF	; 255
    2606:	3f 4f       	sbci	r19, 0xFF	; 255
    2608:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    260a:	28 30       	cpi	r18, 0x08	; 8
    260c:	31 05       	cpc	r19, r1
    260e:	89 f7       	brne	.-30     	; 0x25f2 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2610:	40 ff       	sbrs	r20, 0
    2612:	0a c0       	rjmp	.+20     	; 0x2628 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2614:	41 ff       	sbrs	r20, 1
    2616:	03 c0       	rjmp	.+6      	; 0x261e <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2618:	fc 01       	movw	r30, r24
    261a:	65 83       	std	Z+5, r22	; 0x05
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    261e:	fc 01       	movw	r30, r24
    2620:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2622:	fc 01       	movw	r30, r24
    2624:	61 83       	std	Z+1, r22	; 0x01
    2626:	02 c0       	rjmp	.+4      	; 0x262c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2628:	fc 01       	movw	r30, r24
    262a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	08 95       	ret

00002632 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2632:	43 e0       	ldi	r20, 0x03	; 3
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	96 e0       	ldi	r25, 0x06	; 6
    263c:	d3 df       	rcall	.-90     	; 0x25e4 <ioport_configure_port_pin>
    263e:	43 e0       	ldi	r20, 0x03	; 3
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	62 e0       	ldi	r22, 0x02	; 2
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	96 e0       	ldi	r25, 0x06	; 6
    2648:	cd df       	rcall	.-102    	; 0x25e4 <ioport_configure_port_pin>
    264a:	43 e0       	ldi	r20, 0x03	; 3
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	64 e0       	ldi	r22, 0x04	; 4
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	96 e0       	ldi	r25, 0x06	; 6
    2654:	c7 df       	rcall	.-114    	; 0x25e4 <ioport_configure_port_pin>
    2656:	43 e0       	ldi	r20, 0x03	; 3
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	68 e0       	ldi	r22, 0x08	; 8
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	96 e0       	ldi	r25, 0x06	; 6
    2660:	c1 df       	rcall	.-126    	; 0x25e4 <ioport_configure_port_pin>
    2662:	43 e0       	ldi	r20, 0x03	; 3
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	60 e1       	ldi	r22, 0x10	; 16
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	96 e0       	ldi	r25, 0x06	; 6
    266c:	bb df       	rcall	.-138    	; 0x25e4 <ioport_configure_port_pin>
    266e:	43 e0       	ldi	r20, 0x03	; 3
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	60 e2       	ldi	r22, 0x20	; 32
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	96 e0       	ldi	r25, 0x06	; 6
    2678:	b5 df       	rcall	.-150    	; 0x25e4 <ioport_configure_port_pin>
    267a:	43 e0       	ldi	r20, 0x03	; 3
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	60 e4       	ldi	r22, 0x40	; 64
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	96 e0       	ldi	r25, 0x06	; 6
    2684:	af df       	rcall	.-162    	; 0x25e4 <ioport_configure_port_pin>
    2686:	43 e0       	ldi	r20, 0x03	; 3
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	60 e8       	ldi	r22, 0x80	; 128
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	96 e0       	ldi	r25, 0x06	; 6
    2690:	a9 df       	rcall	.-174    	; 0x25e4 <ioport_configure_port_pin>
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	58 e1       	ldi	r21, 0x18	; 24
    2696:	61 e0       	ldi	r22, 0x01	; 1
    2698:	80 e2       	ldi	r24, 0x20	; 32
    269a:	96 e0       	ldi	r25, 0x06	; 6
    269c:	a3 df       	rcall	.-186    	; 0x25e4 <ioport_configure_port_pin>
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	58 e1       	ldi	r21, 0x18	; 24
    26a2:	62 e0       	ldi	r22, 0x02	; 2
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	96 e0       	ldi	r25, 0x06	; 6
    26a8:	9d df       	rcall	.-198    	; 0x25e4 <ioport_configure_port_pin>
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	58 e1       	ldi	r21, 0x18	; 24
    26ae:	64 e0       	ldi	r22, 0x04	; 4
    26b0:	80 e2       	ldi	r24, 0x20	; 32
    26b2:	96 e0       	ldi	r25, 0x06	; 6
    26b4:	97 df       	rcall	.-210    	; 0x25e4 <ioport_configure_port_pin>
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	58 e1       	ldi	r21, 0x18	; 24
    26ba:	68 e0       	ldi	r22, 0x08	; 8
    26bc:	80 e2       	ldi	r24, 0x20	; 32
    26be:	96 e0       	ldi	r25, 0x06	; 6
    26c0:	91 cf       	rjmp	.-222    	; 0x25e4 <ioport_configure_port_pin>
    26c2:	08 95       	ret

000026c4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26c6:	61 50       	subi	r22, 0x01	; 1
    26c8:	71 09       	sbc	r23, r1
    26ca:	81 09       	sbc	r24, r1
    26cc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26ce:	61 15       	cp	r22, r1
    26d0:	71 05       	cpc	r23, r1
    26d2:	81 05       	cpc	r24, r1
    26d4:	91 05       	cpc	r25, r1
    26d6:	b9 f7       	brne	.-18     	; 0x26c6 <__portable_avr_delay_cycles+0x2>
    26d8:	08 95       	ret

000026da <main>:

void print_calibration_data(void);

int main (void)
{
	board_init();
    26da:	ab df       	rcall	.-170    	; 0x2632 <board_init>
	sysclk_init();
    26dc:	0e 94 b3 05 	call	0xb66	; 0xb66 <sysclk_init>
	}
	

	
	//uart_terminal_init();
	newOLogInit();
    26e0:	52 dd       	rcall	.-1372   	; 0x2186 <newOLogInit>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    26e2:	e0 ea       	ldi	r30, 0xA0	; 160
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	87 e0       	ldi	r24, 0x07	; 7
    26e8:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	80 68       	ori	r24, 0x80	; 128
	cpu_irq_enable();

	
	//imu_init();
	//delay_s(1);
	xbee_init();
    26ee:	82 83       	std	Z+2, r24	; 0x02
    26f0:	78 94       	sei
	//set_servo(0);
	//buzz_on();
	//buzz_off();
	while (1)
	{
		imu_update();
    26f2:	1f df       	rcall	.-450    	; 0x2532 <xbee_init>
		//set_servo(servoPos);
		//servoPos +=100;
		//pitch = imu_pitch();
		//roll = imu_roll();
		//heading = imu_heading();
		openLogWrite("Hello There!");
    26f4:	35 dd       	rcall	.-1430   	; 0x2160 <imu_update>
    26f6:	87 e4       	ldi	r24, 0x47	; 71
    26f8:	90 e2       	ldi	r25, 0x20	; 32
		xbeeWrite("Hello There!");
    26fa:	62 dd       	rcall	.-1340   	; 0x21c0 <openLogWrite>
    26fc:	87 e4       	ldi	r24, 0x47	; 71
    26fe:	90 e2       	ldi	r25, 0x20	; 32
		
		//write_telem_to_xbee();
		
		
		
		delay_ms(1000);
    2700:	3a df       	rcall	.-396    	; 0x2576 <xbeeWrite>
    2702:	66 e1       	ldi	r22, 0x16	; 22
    2704:	76 e1       	ldi	r23, 0x16	; 22
    2706:	85 e0       	ldi	r24, 0x05	; 5
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	dc df       	rcall	.-72     	; 0x26c4 <__portable_avr_delay_cycles>
    270c:	f3 cf       	rjmp	.-26     	; 0x26f4 <main+0x1a>

0000270e <__divsf3>:
    270e:	0c d0       	rcall	.+24     	; 0x2728 <__divsf3x>
    2710:	ba c0       	rjmp	.+372    	; 0x2886 <__fp_round>
    2712:	b2 d0       	rcall	.+356    	; 0x2878 <__fp_pscB>
    2714:	40 f0       	brcs	.+16     	; 0x2726 <__divsf3+0x18>
    2716:	a9 d0       	rcall	.+338    	; 0x286a <__fp_pscA>
    2718:	30 f0       	brcs	.+12     	; 0x2726 <__divsf3+0x18>
    271a:	21 f4       	brne	.+8      	; 0x2724 <__divsf3+0x16>
    271c:	5f 3f       	cpi	r21, 0xFF	; 255
    271e:	19 f0       	breq	.+6      	; 0x2726 <__divsf3+0x18>
    2720:	9b c0       	rjmp	.+310    	; 0x2858 <__fp_inf>
    2722:	51 11       	cpse	r21, r1
    2724:	e4 c0       	rjmp	.+456    	; 0x28ee <__fp_szero>
    2726:	9e c0       	rjmp	.+316    	; 0x2864 <__fp_nan>

00002728 <__divsf3x>:
    2728:	bf d0       	rcall	.+382    	; 0x28a8 <__fp_split3>
    272a:	98 f3       	brcs	.-26     	; 0x2712 <__divsf3+0x4>

0000272c <__divsf3_pse>:
    272c:	99 23       	and	r25, r25
    272e:	c9 f3       	breq	.-14     	; 0x2722 <__divsf3+0x14>
    2730:	55 23       	and	r21, r21
    2732:	b1 f3       	breq	.-20     	; 0x2720 <__divsf3+0x12>
    2734:	95 1b       	sub	r25, r21
    2736:	55 0b       	sbc	r21, r21
    2738:	bb 27       	eor	r27, r27
    273a:	aa 27       	eor	r26, r26
    273c:	62 17       	cp	r22, r18
    273e:	73 07       	cpc	r23, r19
    2740:	84 07       	cpc	r24, r20
    2742:	38 f0       	brcs	.+14     	; 0x2752 <__divsf3_pse+0x26>
    2744:	9f 5f       	subi	r25, 0xFF	; 255
    2746:	5f 4f       	sbci	r21, 0xFF	; 255
    2748:	22 0f       	add	r18, r18
    274a:	33 1f       	adc	r19, r19
    274c:	44 1f       	adc	r20, r20
    274e:	aa 1f       	adc	r26, r26
    2750:	a9 f3       	breq	.-22     	; 0x273c <__divsf3_pse+0x10>
    2752:	33 d0       	rcall	.+102    	; 0x27ba <__divsf3_pse+0x8e>
    2754:	0e 2e       	mov	r0, r30
    2756:	3a f0       	brmi	.+14     	; 0x2766 <__divsf3_pse+0x3a>
    2758:	e0 e8       	ldi	r30, 0x80	; 128
    275a:	30 d0       	rcall	.+96     	; 0x27bc <__divsf3_pse+0x90>
    275c:	91 50       	subi	r25, 0x01	; 1
    275e:	50 40       	sbci	r21, 0x00	; 0
    2760:	e6 95       	lsr	r30
    2762:	00 1c       	adc	r0, r0
    2764:	ca f7       	brpl	.-14     	; 0x2758 <__divsf3_pse+0x2c>
    2766:	29 d0       	rcall	.+82     	; 0x27ba <__divsf3_pse+0x8e>
    2768:	fe 2f       	mov	r31, r30
    276a:	27 d0       	rcall	.+78     	; 0x27ba <__divsf3_pse+0x8e>
    276c:	66 0f       	add	r22, r22
    276e:	77 1f       	adc	r23, r23
    2770:	88 1f       	adc	r24, r24
    2772:	bb 1f       	adc	r27, r27
    2774:	26 17       	cp	r18, r22
    2776:	37 07       	cpc	r19, r23
    2778:	48 07       	cpc	r20, r24
    277a:	ab 07       	cpc	r26, r27
    277c:	b0 e8       	ldi	r27, 0x80	; 128
    277e:	09 f0       	breq	.+2      	; 0x2782 <__divsf3_pse+0x56>
    2780:	bb 0b       	sbc	r27, r27
    2782:	80 2d       	mov	r24, r0
    2784:	bf 01       	movw	r22, r30
    2786:	ff 27       	eor	r31, r31
    2788:	93 58       	subi	r25, 0x83	; 131
    278a:	5f 4f       	sbci	r21, 0xFF	; 255
    278c:	2a f0       	brmi	.+10     	; 0x2798 <__divsf3_pse+0x6c>
    278e:	9e 3f       	cpi	r25, 0xFE	; 254
    2790:	51 05       	cpc	r21, r1
    2792:	68 f0       	brcs	.+26     	; 0x27ae <__divsf3_pse+0x82>
    2794:	61 c0       	rjmp	.+194    	; 0x2858 <__fp_inf>
    2796:	ab c0       	rjmp	.+342    	; 0x28ee <__fp_szero>
    2798:	5f 3f       	cpi	r21, 0xFF	; 255
    279a:	ec f3       	brlt	.-6      	; 0x2796 <__divsf3_pse+0x6a>
    279c:	98 3e       	cpi	r25, 0xE8	; 232
    279e:	dc f3       	brlt	.-10     	; 0x2796 <__divsf3_pse+0x6a>
    27a0:	86 95       	lsr	r24
    27a2:	77 95       	ror	r23
    27a4:	67 95       	ror	r22
    27a6:	b7 95       	ror	r27
    27a8:	f7 95       	ror	r31
    27aa:	9f 5f       	subi	r25, 0xFF	; 255
    27ac:	c9 f7       	brne	.-14     	; 0x27a0 <__divsf3_pse+0x74>
    27ae:	88 0f       	add	r24, r24
    27b0:	91 1d       	adc	r25, r1
    27b2:	96 95       	lsr	r25
    27b4:	87 95       	ror	r24
    27b6:	97 f9       	bld	r25, 7
    27b8:	08 95       	ret
    27ba:	e1 e0       	ldi	r30, 0x01	; 1
    27bc:	66 0f       	add	r22, r22
    27be:	77 1f       	adc	r23, r23
    27c0:	88 1f       	adc	r24, r24
    27c2:	bb 1f       	adc	r27, r27
    27c4:	62 17       	cp	r22, r18
    27c6:	73 07       	cpc	r23, r19
    27c8:	84 07       	cpc	r24, r20
    27ca:	ba 07       	cpc	r27, r26
    27cc:	20 f0       	brcs	.+8      	; 0x27d6 <__divsf3_pse+0xaa>
    27ce:	62 1b       	sub	r22, r18
    27d0:	73 0b       	sbc	r23, r19
    27d2:	84 0b       	sbc	r24, r20
    27d4:	ba 0b       	sbc	r27, r26
    27d6:	ee 1f       	adc	r30, r30
    27d8:	88 f7       	brcc	.-30     	; 0x27bc <__divsf3_pse+0x90>
    27da:	e0 95       	com	r30
    27dc:	08 95       	ret

000027de <__floatunsisf>:
    27de:	e8 94       	clt
    27e0:	09 c0       	rjmp	.+18     	; 0x27f4 <__floatsisf+0x12>

000027e2 <__floatsisf>:
    27e2:	97 fb       	bst	r25, 7
    27e4:	3e f4       	brtc	.+14     	; 0x27f4 <__floatsisf+0x12>
    27e6:	90 95       	com	r25
    27e8:	80 95       	com	r24
    27ea:	70 95       	com	r23
    27ec:	61 95       	neg	r22
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	8f 4f       	sbci	r24, 0xFF	; 255
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	99 23       	and	r25, r25
    27f6:	a9 f0       	breq	.+42     	; 0x2822 <__floatsisf+0x40>
    27f8:	f9 2f       	mov	r31, r25
    27fa:	96 e9       	ldi	r25, 0x96	; 150
    27fc:	bb 27       	eor	r27, r27
    27fe:	93 95       	inc	r25
    2800:	f6 95       	lsr	r31
    2802:	87 95       	ror	r24
    2804:	77 95       	ror	r23
    2806:	67 95       	ror	r22
    2808:	b7 95       	ror	r27
    280a:	f1 11       	cpse	r31, r1
    280c:	f8 cf       	rjmp	.-16     	; 0x27fe <__floatsisf+0x1c>
    280e:	fa f4       	brpl	.+62     	; 0x284e <__floatsisf+0x6c>
    2810:	bb 0f       	add	r27, r27
    2812:	11 f4       	brne	.+4      	; 0x2818 <__floatsisf+0x36>
    2814:	60 ff       	sbrs	r22, 0
    2816:	1b c0       	rjmp	.+54     	; 0x284e <__floatsisf+0x6c>
    2818:	6f 5f       	subi	r22, 0xFF	; 255
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	8f 4f       	sbci	r24, 0xFF	; 255
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	16 c0       	rjmp	.+44     	; 0x284e <__floatsisf+0x6c>
    2822:	88 23       	and	r24, r24
    2824:	11 f0       	breq	.+4      	; 0x282a <__floatsisf+0x48>
    2826:	96 e9       	ldi	r25, 0x96	; 150
    2828:	11 c0       	rjmp	.+34     	; 0x284c <__floatsisf+0x6a>
    282a:	77 23       	and	r23, r23
    282c:	21 f0       	breq	.+8      	; 0x2836 <__floatsisf+0x54>
    282e:	9e e8       	ldi	r25, 0x8E	; 142
    2830:	87 2f       	mov	r24, r23
    2832:	76 2f       	mov	r23, r22
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <__floatsisf+0x5e>
    2836:	66 23       	and	r22, r22
    2838:	71 f0       	breq	.+28     	; 0x2856 <__floatsisf+0x74>
    283a:	96 e8       	ldi	r25, 0x86	; 134
    283c:	86 2f       	mov	r24, r22
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	2a f0       	brmi	.+10     	; 0x284e <__floatsisf+0x6c>
    2844:	9a 95       	dec	r25
    2846:	66 0f       	add	r22, r22
    2848:	77 1f       	adc	r23, r23
    284a:	88 1f       	adc	r24, r24
    284c:	da f7       	brpl	.-10     	; 0x2844 <__floatsisf+0x62>
    284e:	88 0f       	add	r24, r24
    2850:	96 95       	lsr	r25
    2852:	87 95       	ror	r24
    2854:	97 f9       	bld	r25, 7
    2856:	08 95       	ret

00002858 <__fp_inf>:
    2858:	97 f9       	bld	r25, 7
    285a:	9f 67       	ori	r25, 0x7F	; 127
    285c:	80 e8       	ldi	r24, 0x80	; 128
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	08 95       	ret

00002864 <__fp_nan>:
    2864:	9f ef       	ldi	r25, 0xFF	; 255
    2866:	80 ec       	ldi	r24, 0xC0	; 192
    2868:	08 95       	ret

0000286a <__fp_pscA>:
    286a:	00 24       	eor	r0, r0
    286c:	0a 94       	dec	r0
    286e:	16 16       	cp	r1, r22
    2870:	17 06       	cpc	r1, r23
    2872:	18 06       	cpc	r1, r24
    2874:	09 06       	cpc	r0, r25
    2876:	08 95       	ret

00002878 <__fp_pscB>:
    2878:	00 24       	eor	r0, r0
    287a:	0a 94       	dec	r0
    287c:	12 16       	cp	r1, r18
    287e:	13 06       	cpc	r1, r19
    2880:	14 06       	cpc	r1, r20
    2882:	05 06       	cpc	r0, r21
    2884:	08 95       	ret

00002886 <__fp_round>:
    2886:	09 2e       	mov	r0, r25
    2888:	03 94       	inc	r0
    288a:	00 0c       	add	r0, r0
    288c:	11 f4       	brne	.+4      	; 0x2892 <__fp_round+0xc>
    288e:	88 23       	and	r24, r24
    2890:	52 f0       	brmi	.+20     	; 0x28a6 <__fp_round+0x20>
    2892:	bb 0f       	add	r27, r27
    2894:	40 f4       	brcc	.+16     	; 0x28a6 <__fp_round+0x20>
    2896:	bf 2b       	or	r27, r31
    2898:	11 f4       	brne	.+4      	; 0x289e <__fp_round+0x18>
    289a:	60 ff       	sbrs	r22, 0
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <__fp_round+0x20>
    289e:	6f 5f       	subi	r22, 0xFF	; 255
    28a0:	7f 4f       	sbci	r23, 0xFF	; 255
    28a2:	8f 4f       	sbci	r24, 0xFF	; 255
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	08 95       	ret

000028a8 <__fp_split3>:
    28a8:	57 fd       	sbrc	r21, 7
    28aa:	90 58       	subi	r25, 0x80	; 128
    28ac:	44 0f       	add	r20, r20
    28ae:	55 1f       	adc	r21, r21
    28b0:	59 f0       	breq	.+22     	; 0x28c8 <__fp_splitA+0x10>
    28b2:	5f 3f       	cpi	r21, 0xFF	; 255
    28b4:	71 f0       	breq	.+28     	; 0x28d2 <__fp_splitA+0x1a>
    28b6:	47 95       	ror	r20

000028b8 <__fp_splitA>:
    28b8:	88 0f       	add	r24, r24
    28ba:	97 fb       	bst	r25, 7
    28bc:	99 1f       	adc	r25, r25
    28be:	61 f0       	breq	.+24     	; 0x28d8 <__fp_splitA+0x20>
    28c0:	9f 3f       	cpi	r25, 0xFF	; 255
    28c2:	79 f0       	breq	.+30     	; 0x28e2 <__fp_splitA+0x2a>
    28c4:	87 95       	ror	r24
    28c6:	08 95       	ret
    28c8:	12 16       	cp	r1, r18
    28ca:	13 06       	cpc	r1, r19
    28cc:	14 06       	cpc	r1, r20
    28ce:	55 1f       	adc	r21, r21
    28d0:	f2 cf       	rjmp	.-28     	; 0x28b6 <__fp_split3+0xe>
    28d2:	46 95       	lsr	r20
    28d4:	f1 df       	rcall	.-30     	; 0x28b8 <__fp_splitA>
    28d6:	08 c0       	rjmp	.+16     	; 0x28e8 <__fp_splitA+0x30>
    28d8:	16 16       	cp	r1, r22
    28da:	17 06       	cpc	r1, r23
    28dc:	18 06       	cpc	r1, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	f1 cf       	rjmp	.-30     	; 0x28c4 <__fp_splitA+0xc>
    28e2:	86 95       	lsr	r24
    28e4:	71 05       	cpc	r23, r1
    28e6:	61 05       	cpc	r22, r1
    28e8:	08 94       	sec
    28ea:	08 95       	ret

000028ec <__fp_zero>:
    28ec:	e8 94       	clt

000028ee <__fp_szero>:
    28ee:	bb 27       	eor	r27, r27
    28f0:	66 27       	eor	r22, r22
    28f2:	77 27       	eor	r23, r23
    28f4:	cb 01       	movw	r24, r22
    28f6:	97 f9       	bld	r25, 7
    28f8:	08 95       	ret

000028fa <__mulsf3>:
    28fa:	0b d0       	rcall	.+22     	; 0x2912 <__mulsf3x>
    28fc:	c4 cf       	rjmp	.-120    	; 0x2886 <__fp_round>
    28fe:	b5 df       	rcall	.-150    	; 0x286a <__fp_pscA>
    2900:	28 f0       	brcs	.+10     	; 0x290c <__mulsf3+0x12>
    2902:	ba df       	rcall	.-140    	; 0x2878 <__fp_pscB>
    2904:	18 f0       	brcs	.+6      	; 0x290c <__mulsf3+0x12>
    2906:	95 23       	and	r25, r21
    2908:	09 f0       	breq	.+2      	; 0x290c <__mulsf3+0x12>
    290a:	a6 cf       	rjmp	.-180    	; 0x2858 <__fp_inf>
    290c:	ab cf       	rjmp	.-170    	; 0x2864 <__fp_nan>
    290e:	11 24       	eor	r1, r1
    2910:	ee cf       	rjmp	.-36     	; 0x28ee <__fp_szero>

00002912 <__mulsf3x>:
    2912:	ca df       	rcall	.-108    	; 0x28a8 <__fp_split3>
    2914:	a0 f3       	brcs	.-24     	; 0x28fe <__mulsf3+0x4>

00002916 <__mulsf3_pse>:
    2916:	95 9f       	mul	r25, r21
    2918:	d1 f3       	breq	.-12     	; 0x290e <__mulsf3+0x14>
    291a:	95 0f       	add	r25, r21
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	55 1f       	adc	r21, r21
    2920:	62 9f       	mul	r22, r18
    2922:	f0 01       	movw	r30, r0
    2924:	72 9f       	mul	r23, r18
    2926:	bb 27       	eor	r27, r27
    2928:	f0 0d       	add	r31, r0
    292a:	b1 1d       	adc	r27, r1
    292c:	63 9f       	mul	r22, r19
    292e:	aa 27       	eor	r26, r26
    2930:	f0 0d       	add	r31, r0
    2932:	b1 1d       	adc	r27, r1
    2934:	aa 1f       	adc	r26, r26
    2936:	64 9f       	mul	r22, r20
    2938:	66 27       	eor	r22, r22
    293a:	b0 0d       	add	r27, r0
    293c:	a1 1d       	adc	r26, r1
    293e:	66 1f       	adc	r22, r22
    2940:	82 9f       	mul	r24, r18
    2942:	22 27       	eor	r18, r18
    2944:	b0 0d       	add	r27, r0
    2946:	a1 1d       	adc	r26, r1
    2948:	62 1f       	adc	r22, r18
    294a:	73 9f       	mul	r23, r19
    294c:	b0 0d       	add	r27, r0
    294e:	a1 1d       	adc	r26, r1
    2950:	62 1f       	adc	r22, r18
    2952:	83 9f       	mul	r24, r19
    2954:	a0 0d       	add	r26, r0
    2956:	61 1d       	adc	r22, r1
    2958:	22 1f       	adc	r18, r18
    295a:	74 9f       	mul	r23, r20
    295c:	33 27       	eor	r19, r19
    295e:	a0 0d       	add	r26, r0
    2960:	61 1d       	adc	r22, r1
    2962:	23 1f       	adc	r18, r19
    2964:	84 9f       	mul	r24, r20
    2966:	60 0d       	add	r22, r0
    2968:	21 1d       	adc	r18, r1
    296a:	82 2f       	mov	r24, r18
    296c:	76 2f       	mov	r23, r22
    296e:	6a 2f       	mov	r22, r26
    2970:	11 24       	eor	r1, r1
    2972:	9f 57       	subi	r25, 0x7F	; 127
    2974:	50 40       	sbci	r21, 0x00	; 0
    2976:	8a f0       	brmi	.+34     	; 0x299a <__mulsf3_pse+0x84>
    2978:	e1 f0       	breq	.+56     	; 0x29b2 <__mulsf3_pse+0x9c>
    297a:	88 23       	and	r24, r24
    297c:	4a f0       	brmi	.+18     	; 0x2990 <__mulsf3_pse+0x7a>
    297e:	ee 0f       	add	r30, r30
    2980:	ff 1f       	adc	r31, r31
    2982:	bb 1f       	adc	r27, r27
    2984:	66 1f       	adc	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	88 1f       	adc	r24, r24
    298a:	91 50       	subi	r25, 0x01	; 1
    298c:	50 40       	sbci	r21, 0x00	; 0
    298e:	a9 f7       	brne	.-22     	; 0x297a <__mulsf3_pse+0x64>
    2990:	9e 3f       	cpi	r25, 0xFE	; 254
    2992:	51 05       	cpc	r21, r1
    2994:	70 f0       	brcs	.+28     	; 0x29b2 <__mulsf3_pse+0x9c>
    2996:	60 cf       	rjmp	.-320    	; 0x2858 <__fp_inf>
    2998:	aa cf       	rjmp	.-172    	; 0x28ee <__fp_szero>
    299a:	5f 3f       	cpi	r21, 0xFF	; 255
    299c:	ec f3       	brlt	.-6      	; 0x2998 <__mulsf3_pse+0x82>
    299e:	98 3e       	cpi	r25, 0xE8	; 232
    29a0:	dc f3       	brlt	.-10     	; 0x2998 <__mulsf3_pse+0x82>
    29a2:	86 95       	lsr	r24
    29a4:	77 95       	ror	r23
    29a6:	67 95       	ror	r22
    29a8:	b7 95       	ror	r27
    29aa:	f7 95       	ror	r31
    29ac:	e7 95       	ror	r30
    29ae:	9f 5f       	subi	r25, 0xFF	; 255
    29b0:	c1 f7       	brne	.-16     	; 0x29a2 <__mulsf3_pse+0x8c>
    29b2:	fe 2b       	or	r31, r30
    29b4:	88 0f       	add	r24, r24
    29b6:	91 1d       	adc	r25, r1
    29b8:	96 95       	lsr	r25
    29ba:	87 95       	ror	r24
    29bc:	97 f9       	bld	r25, 7
    29be:	08 95       	ret

000029c0 <vfprintf>:
    29c0:	2f 92       	push	r2
    29c2:	3f 92       	push	r3
    29c4:	4f 92       	push	r4
    29c6:	5f 92       	push	r5
    29c8:	6f 92       	push	r6
    29ca:	7f 92       	push	r7
    29cc:	8f 92       	push	r8
    29ce:	9f 92       	push	r9
    29d0:	af 92       	push	r10
    29d2:	bf 92       	push	r11
    29d4:	cf 92       	push	r12
    29d6:	df 92       	push	r13
    29d8:	ef 92       	push	r14
    29da:	ff 92       	push	r15
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	60 97       	sbiw	r28, 0x10	; 16
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	7c 01       	movw	r14, r24
    29f0:	1b 01       	movw	r2, r22
    29f2:	6a 01       	movw	r12, r20
    29f4:	fc 01       	movw	r30, r24
    29f6:	16 82       	std	Z+6, r1	; 0x06
    29f8:	17 82       	std	Z+7, r1	; 0x07
    29fa:	83 81       	ldd	r24, Z+3	; 0x03
    29fc:	81 ff       	sbrs	r24, 1
    29fe:	2a c3       	rjmp	.+1620   	; 0x3054 <vfprintf+0x694>
    2a00:	9e 01       	movw	r18, r28
    2a02:	2f 5f       	subi	r18, 0xFF	; 255
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	39 01       	movw	r6, r18
    2a08:	f7 01       	movw	r30, r14
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	f1 01       	movw	r30, r2
    2a0e:	93 fd       	sbrc	r25, 3
    2a10:	85 91       	lpm	r24, Z+
    2a12:	93 ff       	sbrs	r25, 3
    2a14:	81 91       	ld	r24, Z+
    2a16:	1f 01       	movw	r2, r30
    2a18:	88 23       	and	r24, r24
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <vfprintf+0x5e>
    2a1c:	17 c3       	rjmp	.+1582   	; 0x304c <vfprintf+0x68c>
    2a1e:	85 32       	cpi	r24, 0x25	; 37
    2a20:	39 f4       	brne	.+14     	; 0x2a30 <vfprintf+0x70>
    2a22:	93 fd       	sbrc	r25, 3
    2a24:	85 91       	lpm	r24, Z+
    2a26:	93 ff       	sbrs	r25, 3
    2a28:	81 91       	ld	r24, Z+
    2a2a:	1f 01       	movw	r2, r30
    2a2c:	85 32       	cpi	r24, 0x25	; 37
    2a2e:	31 f4       	brne	.+12     	; 0x2a3c <vfprintf+0x7c>
    2a30:	b7 01       	movw	r22, r14
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	58 d4       	rcall	.+2224   	; 0x32e6 <fputc>
    2a36:	56 01       	movw	r10, r12
    2a38:	65 01       	movw	r12, r10
    2a3a:	e6 cf       	rjmp	.-52     	; 0x2a08 <vfprintf+0x48>
    2a3c:	10 e0       	ldi	r17, 0x00	; 0
    2a3e:	51 2c       	mov	r5, r1
    2a40:	91 2c       	mov	r9, r1
    2a42:	ff e1       	ldi	r31, 0x1F	; 31
    2a44:	f9 15       	cp	r31, r9
    2a46:	d8 f0       	brcs	.+54     	; 0x2a7e <vfprintf+0xbe>
    2a48:	8b 32       	cpi	r24, 0x2B	; 43
    2a4a:	79 f0       	breq	.+30     	; 0x2a6a <vfprintf+0xaa>
    2a4c:	38 f4       	brcc	.+14     	; 0x2a5c <vfprintf+0x9c>
    2a4e:	80 32       	cpi	r24, 0x20	; 32
    2a50:	79 f0       	breq	.+30     	; 0x2a70 <vfprintf+0xb0>
    2a52:	83 32       	cpi	r24, 0x23	; 35
    2a54:	a1 f4       	brne	.+40     	; 0x2a7e <vfprintf+0xbe>
    2a56:	f9 2d       	mov	r31, r9
    2a58:	f0 61       	ori	r31, 0x10	; 16
    2a5a:	2e c0       	rjmp	.+92     	; 0x2ab8 <vfprintf+0xf8>
    2a5c:	8d 32       	cpi	r24, 0x2D	; 45
    2a5e:	61 f0       	breq	.+24     	; 0x2a78 <vfprintf+0xb8>
    2a60:	80 33       	cpi	r24, 0x30	; 48
    2a62:	69 f4       	brne	.+26     	; 0x2a7e <vfprintf+0xbe>
    2a64:	29 2d       	mov	r18, r9
    2a66:	21 60       	ori	r18, 0x01	; 1
    2a68:	2d c0       	rjmp	.+90     	; 0x2ac4 <vfprintf+0x104>
    2a6a:	39 2d       	mov	r19, r9
    2a6c:	32 60       	ori	r19, 0x02	; 2
    2a6e:	93 2e       	mov	r9, r19
    2a70:	89 2d       	mov	r24, r9
    2a72:	84 60       	ori	r24, 0x04	; 4
    2a74:	98 2e       	mov	r9, r24
    2a76:	2a c0       	rjmp	.+84     	; 0x2acc <vfprintf+0x10c>
    2a78:	e9 2d       	mov	r30, r9
    2a7a:	e8 60       	ori	r30, 0x08	; 8
    2a7c:	15 c0       	rjmp	.+42     	; 0x2aa8 <vfprintf+0xe8>
    2a7e:	97 fc       	sbrc	r9, 7
    2a80:	2d c0       	rjmp	.+90     	; 0x2adc <vfprintf+0x11c>
    2a82:	20 ed       	ldi	r18, 0xD0	; 208
    2a84:	28 0f       	add	r18, r24
    2a86:	2a 30       	cpi	r18, 0x0A	; 10
    2a88:	88 f4       	brcc	.+34     	; 0x2aac <vfprintf+0xec>
    2a8a:	96 fe       	sbrs	r9, 6
    2a8c:	06 c0       	rjmp	.+12     	; 0x2a9a <vfprintf+0xda>
    2a8e:	3a e0       	ldi	r19, 0x0A	; 10
    2a90:	13 9f       	mul	r17, r19
    2a92:	20 0d       	add	r18, r0
    2a94:	11 24       	eor	r1, r1
    2a96:	12 2f       	mov	r17, r18
    2a98:	19 c0       	rjmp	.+50     	; 0x2acc <vfprintf+0x10c>
    2a9a:	8a e0       	ldi	r24, 0x0A	; 10
    2a9c:	58 9e       	mul	r5, r24
    2a9e:	20 0d       	add	r18, r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	52 2e       	mov	r5, r18
    2aa4:	e9 2d       	mov	r30, r9
    2aa6:	e0 62       	ori	r30, 0x20	; 32
    2aa8:	9e 2e       	mov	r9, r30
    2aaa:	10 c0       	rjmp	.+32     	; 0x2acc <vfprintf+0x10c>
    2aac:	8e 32       	cpi	r24, 0x2E	; 46
    2aae:	31 f4       	brne	.+12     	; 0x2abc <vfprintf+0xfc>
    2ab0:	96 fc       	sbrc	r9, 6
    2ab2:	cc c2       	rjmp	.+1432   	; 0x304c <vfprintf+0x68c>
    2ab4:	f9 2d       	mov	r31, r9
    2ab6:	f0 64       	ori	r31, 0x40	; 64
    2ab8:	9f 2e       	mov	r9, r31
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <vfprintf+0x10c>
    2abc:	8c 36       	cpi	r24, 0x6C	; 108
    2abe:	21 f4       	brne	.+8      	; 0x2ac8 <vfprintf+0x108>
    2ac0:	29 2d       	mov	r18, r9
    2ac2:	20 68       	ori	r18, 0x80	; 128
    2ac4:	92 2e       	mov	r9, r18
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <vfprintf+0x10c>
    2ac8:	88 36       	cpi	r24, 0x68	; 104
    2aca:	41 f4       	brne	.+16     	; 0x2adc <vfprintf+0x11c>
    2acc:	f1 01       	movw	r30, r2
    2ace:	93 fd       	sbrc	r25, 3
    2ad0:	85 91       	lpm	r24, Z+
    2ad2:	93 ff       	sbrs	r25, 3
    2ad4:	81 91       	ld	r24, Z+
    2ad6:	1f 01       	movw	r2, r30
    2ad8:	81 11       	cpse	r24, r1
    2ada:	b3 cf       	rjmp	.-154    	; 0x2a42 <vfprintf+0x82>
    2adc:	9b eb       	ldi	r25, 0xBB	; 187
    2ade:	98 0f       	add	r25, r24
    2ae0:	93 30       	cpi	r25, 0x03	; 3
    2ae2:	20 f4       	brcc	.+8      	; 0x2aec <vfprintf+0x12c>
    2ae4:	99 2d       	mov	r25, r9
    2ae6:	90 61       	ori	r25, 0x10	; 16
    2ae8:	80 5e       	subi	r24, 0xE0	; 224
    2aea:	07 c0       	rjmp	.+14     	; 0x2afa <vfprintf+0x13a>
    2aec:	9b e9       	ldi	r25, 0x9B	; 155
    2aee:	98 0f       	add	r25, r24
    2af0:	93 30       	cpi	r25, 0x03	; 3
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <vfprintf+0x136>
    2af4:	59 c1       	rjmp	.+690    	; 0x2da8 <vfprintf+0x3e8>
    2af6:	99 2d       	mov	r25, r9
    2af8:	9f 7e       	andi	r25, 0xEF	; 239
    2afa:	96 ff       	sbrs	r25, 6
    2afc:	16 e0       	ldi	r17, 0x06	; 6
    2afe:	9f 73       	andi	r25, 0x3F	; 63
    2b00:	99 2e       	mov	r9, r25
    2b02:	85 36       	cpi	r24, 0x65	; 101
    2b04:	19 f4       	brne	.+6      	; 0x2b0c <vfprintf+0x14c>
    2b06:	90 64       	ori	r25, 0x40	; 64
    2b08:	99 2e       	mov	r9, r25
    2b0a:	08 c0       	rjmp	.+16     	; 0x2b1c <vfprintf+0x15c>
    2b0c:	86 36       	cpi	r24, 0x66	; 102
    2b0e:	21 f4       	brne	.+8      	; 0x2b18 <vfprintf+0x158>
    2b10:	39 2f       	mov	r19, r25
    2b12:	30 68       	ori	r19, 0x80	; 128
    2b14:	93 2e       	mov	r9, r19
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <vfprintf+0x15c>
    2b18:	11 11       	cpse	r17, r1
    2b1a:	11 50       	subi	r17, 0x01	; 1
    2b1c:	97 fe       	sbrs	r9, 7
    2b1e:	07 c0       	rjmp	.+14     	; 0x2b2e <vfprintf+0x16e>
    2b20:	1c 33       	cpi	r17, 0x3C	; 60
    2b22:	50 f4       	brcc	.+20     	; 0x2b38 <vfprintf+0x178>
    2b24:	44 24       	eor	r4, r4
    2b26:	43 94       	inc	r4
    2b28:	41 0e       	add	r4, r17
    2b2a:	27 e0       	ldi	r18, 0x07	; 7
    2b2c:	0b c0       	rjmp	.+22     	; 0x2b44 <vfprintf+0x184>
    2b2e:	18 30       	cpi	r17, 0x08	; 8
    2b30:	38 f0       	brcs	.+14     	; 0x2b40 <vfprintf+0x180>
    2b32:	27 e0       	ldi	r18, 0x07	; 7
    2b34:	17 e0       	ldi	r17, 0x07	; 7
    2b36:	05 c0       	rjmp	.+10     	; 0x2b42 <vfprintf+0x182>
    2b38:	27 e0       	ldi	r18, 0x07	; 7
    2b3a:	9c e3       	ldi	r25, 0x3C	; 60
    2b3c:	49 2e       	mov	r4, r25
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <vfprintf+0x184>
    2b40:	21 2f       	mov	r18, r17
    2b42:	41 2c       	mov	r4, r1
    2b44:	56 01       	movw	r10, r12
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	a8 0e       	add	r10, r24
    2b4a:	b1 1c       	adc	r11, r1
    2b4c:	f6 01       	movw	r30, r12
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	04 2d       	mov	r16, r4
    2b58:	a3 01       	movw	r20, r6
    2b5a:	d7 d2       	rcall	.+1454   	; 0x310a <__ftoa_engine>
    2b5c:	6c 01       	movw	r12, r24
    2b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b60:	fc 87       	std	Y+12, r31	; 0x0c
    2b62:	f0 ff       	sbrs	r31, 0
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <vfprintf+0x1aa>
    2b66:	f3 ff       	sbrs	r31, 3
    2b68:	06 c0       	rjmp	.+12     	; 0x2b76 <vfprintf+0x1b6>
    2b6a:	91 fc       	sbrc	r9, 1
    2b6c:	06 c0       	rjmp	.+12     	; 0x2b7a <vfprintf+0x1ba>
    2b6e:	92 fe       	sbrs	r9, 2
    2b70:	06 c0       	rjmp	.+12     	; 0x2b7e <vfprintf+0x1be>
    2b72:	00 e2       	ldi	r16, 0x20	; 32
    2b74:	05 c0       	rjmp	.+10     	; 0x2b80 <vfprintf+0x1c0>
    2b76:	0d e2       	ldi	r16, 0x2D	; 45
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <vfprintf+0x1c0>
    2b7a:	0b e2       	ldi	r16, 0x2B	; 43
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <vfprintf+0x1c0>
    2b7e:	00 e0       	ldi	r16, 0x00	; 0
    2b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b82:	8c 70       	andi	r24, 0x0C	; 12
    2b84:	19 f0       	breq	.+6      	; 0x2b8c <vfprintf+0x1cc>
    2b86:	01 11       	cpse	r16, r1
    2b88:	43 c2       	rjmp	.+1158   	; 0x3010 <vfprintf+0x650>
    2b8a:	80 c2       	rjmp	.+1280   	; 0x308c <vfprintf+0x6cc>
    2b8c:	97 fe       	sbrs	r9, 7
    2b8e:	10 c0       	rjmp	.+32     	; 0x2bb0 <vfprintf+0x1f0>
    2b90:	4c 0c       	add	r4, r12
    2b92:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b94:	f4 ff       	sbrs	r31, 4
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <vfprintf+0x1e0>
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	81 33       	cpi	r24, 0x31	; 49
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <vfprintf+0x1e0>
    2b9e:	4a 94       	dec	r4
    2ba0:	14 14       	cp	r1, r4
    2ba2:	74 f5       	brge	.+92     	; 0x2c00 <vfprintf+0x240>
    2ba4:	28 e0       	ldi	r18, 0x08	; 8
    2ba6:	24 15       	cp	r18, r4
    2ba8:	78 f5       	brcc	.+94     	; 0x2c08 <vfprintf+0x248>
    2baa:	88 e0       	ldi	r24, 0x08	; 8
    2bac:	48 2e       	mov	r4, r24
    2bae:	2c c0       	rjmp	.+88     	; 0x2c08 <vfprintf+0x248>
    2bb0:	96 fc       	sbrc	r9, 6
    2bb2:	2a c0       	rjmp	.+84     	; 0x2c08 <vfprintf+0x248>
    2bb4:	81 2f       	mov	r24, r17
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	8c 15       	cp	r24, r12
    2bba:	9d 05       	cpc	r25, r13
    2bbc:	9c f0       	brlt	.+38     	; 0x2be4 <vfprintf+0x224>
    2bbe:	3c ef       	ldi	r19, 0xFC	; 252
    2bc0:	c3 16       	cp	r12, r19
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	d3 06       	cpc	r13, r19
    2bc6:	74 f0       	brlt	.+28     	; 0x2be4 <vfprintf+0x224>
    2bc8:	89 2d       	mov	r24, r9
    2bca:	80 68       	ori	r24, 0x80	; 128
    2bcc:	98 2e       	mov	r9, r24
    2bce:	0a c0       	rjmp	.+20     	; 0x2be4 <vfprintf+0x224>
    2bd0:	e2 e0       	ldi	r30, 0x02	; 2
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	ec 0f       	add	r30, r28
    2bd6:	fd 1f       	adc	r31, r29
    2bd8:	e1 0f       	add	r30, r17
    2bda:	f1 1d       	adc	r31, r1
    2bdc:	80 81       	ld	r24, Z
    2bde:	80 33       	cpi	r24, 0x30	; 48
    2be0:	19 f4       	brne	.+6      	; 0x2be8 <vfprintf+0x228>
    2be2:	11 50       	subi	r17, 0x01	; 1
    2be4:	11 11       	cpse	r17, r1
    2be6:	f4 cf       	rjmp	.-24     	; 0x2bd0 <vfprintf+0x210>
    2be8:	97 fe       	sbrs	r9, 7
    2bea:	0e c0       	rjmp	.+28     	; 0x2c08 <vfprintf+0x248>
    2bec:	44 24       	eor	r4, r4
    2bee:	43 94       	inc	r4
    2bf0:	41 0e       	add	r4, r17
    2bf2:	81 2f       	mov	r24, r17
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	c8 16       	cp	r12, r24
    2bf8:	d9 06       	cpc	r13, r25
    2bfa:	2c f4       	brge	.+10     	; 0x2c06 <vfprintf+0x246>
    2bfc:	1c 19       	sub	r17, r12
    2bfe:	04 c0       	rjmp	.+8      	; 0x2c08 <vfprintf+0x248>
    2c00:	44 24       	eor	r4, r4
    2c02:	43 94       	inc	r4
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <vfprintf+0x248>
    2c06:	10 e0       	ldi	r17, 0x00	; 0
    2c08:	97 fe       	sbrs	r9, 7
    2c0a:	06 c0       	rjmp	.+12     	; 0x2c18 <vfprintf+0x258>
    2c0c:	1c 14       	cp	r1, r12
    2c0e:	1d 04       	cpc	r1, r13
    2c10:	34 f4       	brge	.+12     	; 0x2c1e <vfprintf+0x25e>
    2c12:	c6 01       	movw	r24, r12
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	05 c0       	rjmp	.+10     	; 0x2c22 <vfprintf+0x262>
    2c18:	85 e0       	ldi	r24, 0x05	; 5
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <vfprintf+0x262>
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	01 11       	cpse	r16, r1
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	11 23       	and	r17, r17
    2c28:	31 f0       	breq	.+12     	; 0x2c36 <vfprintf+0x276>
    2c2a:	21 2f       	mov	r18, r17
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	2f 5f       	subi	r18, 0xFF	; 255
    2c30:	3f 4f       	sbci	r19, 0xFF	; 255
    2c32:	82 0f       	add	r24, r18
    2c34:	93 1f       	adc	r25, r19
    2c36:	25 2d       	mov	r18, r5
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	82 17       	cp	r24, r18
    2c3c:	93 07       	cpc	r25, r19
    2c3e:	14 f4       	brge	.+4      	; 0x2c44 <vfprintf+0x284>
    2c40:	58 1a       	sub	r5, r24
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <vfprintf+0x286>
    2c44:	51 2c       	mov	r5, r1
    2c46:	89 2d       	mov	r24, r9
    2c48:	89 70       	andi	r24, 0x09	; 9
    2c4a:	41 f4       	brne	.+16     	; 0x2c5c <vfprintf+0x29c>
    2c4c:	55 20       	and	r5, r5
    2c4e:	31 f0       	breq	.+12     	; 0x2c5c <vfprintf+0x29c>
    2c50:	b7 01       	movw	r22, r14
    2c52:	80 e2       	ldi	r24, 0x20	; 32
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	47 d3       	rcall	.+1678   	; 0x32e6 <fputc>
    2c58:	5a 94       	dec	r5
    2c5a:	f8 cf       	rjmp	.-16     	; 0x2c4c <vfprintf+0x28c>
    2c5c:	00 23       	and	r16, r16
    2c5e:	21 f0       	breq	.+8      	; 0x2c68 <vfprintf+0x2a8>
    2c60:	b7 01       	movw	r22, r14
    2c62:	80 2f       	mov	r24, r16
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	3f d3       	rcall	.+1662   	; 0x32e6 <fputc>
    2c68:	93 fc       	sbrc	r9, 3
    2c6a:	08 c0       	rjmp	.+16     	; 0x2c7c <vfprintf+0x2bc>
    2c6c:	55 20       	and	r5, r5
    2c6e:	31 f0       	breq	.+12     	; 0x2c7c <vfprintf+0x2bc>
    2c70:	b7 01       	movw	r22, r14
    2c72:	80 e3       	ldi	r24, 0x30	; 48
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	37 d3       	rcall	.+1646   	; 0x32e6 <fputc>
    2c78:	5a 94       	dec	r5
    2c7a:	f8 cf       	rjmp	.-16     	; 0x2c6c <vfprintf+0x2ac>
    2c7c:	97 fe       	sbrs	r9, 7
    2c7e:	4a c0       	rjmp	.+148    	; 0x2d14 <vfprintf+0x354>
    2c80:	46 01       	movw	r8, r12
    2c82:	d7 fe       	sbrs	r13, 7
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <vfprintf+0x2ca>
    2c86:	81 2c       	mov	r8, r1
    2c88:	91 2c       	mov	r9, r1
    2c8a:	c6 01       	movw	r24, r12
    2c8c:	88 19       	sub	r24, r8
    2c8e:	99 09       	sbc	r25, r9
    2c90:	f3 01       	movw	r30, r6
    2c92:	e8 0f       	add	r30, r24
    2c94:	f9 1f       	adc	r31, r25
    2c96:	ed 87       	std	Y+13, r30	; 0x0d
    2c98:	fe 87       	std	Y+14, r31	; 0x0e
    2c9a:	96 01       	movw	r18, r12
    2c9c:	24 19       	sub	r18, r4
    2c9e:	31 09       	sbc	r19, r1
    2ca0:	2f 87       	std	Y+15, r18	; 0x0f
    2ca2:	38 8b       	std	Y+16, r19	; 0x10
    2ca4:	01 2f       	mov	r16, r17
    2ca6:	10 e0       	ldi	r17, 0x00	; 0
    2ca8:	11 95       	neg	r17
    2caa:	01 95       	neg	r16
    2cac:	11 09       	sbc	r17, r1
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	83 16       	cp	r8, r19
    2cb2:	93 06       	cpc	r9, r19
    2cb4:	21 f4       	brne	.+8      	; 0x2cbe <vfprintf+0x2fe>
    2cb6:	b7 01       	movw	r22, r14
    2cb8:	8e e2       	ldi	r24, 0x2E	; 46
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	14 d3       	rcall	.+1576   	; 0x32e6 <fputc>
    2cbe:	c8 14       	cp	r12, r8
    2cc0:	d9 04       	cpc	r13, r9
    2cc2:	4c f0       	brlt	.+18     	; 0x2cd6 <vfprintf+0x316>
    2cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc6:	98 89       	ldd	r25, Y+16	; 0x10
    2cc8:	88 15       	cp	r24, r8
    2cca:	99 05       	cpc	r25, r9
    2ccc:	24 f4       	brge	.+8      	; 0x2cd6 <vfprintf+0x316>
    2cce:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cd0:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cd2:	81 81       	ldd	r24, Z+1	; 0x01
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <vfprintf+0x318>
    2cd6:	80 e3       	ldi	r24, 0x30	; 48
    2cd8:	f1 e0       	ldi	r31, 0x01	; 1
    2cda:	8f 1a       	sub	r8, r31
    2cdc:	91 08       	sbc	r9, r1
    2cde:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ce0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ce2:	2f 5f       	subi	r18, 0xFF	; 255
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	2d 87       	std	Y+13, r18	; 0x0d
    2ce8:	3e 87       	std	Y+14, r19	; 0x0e
    2cea:	80 16       	cp	r8, r16
    2cec:	91 06       	cpc	r9, r17
    2cee:	24 f0       	brlt	.+8      	; 0x2cf8 <vfprintf+0x338>
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	f8 d2       	rcall	.+1520   	; 0x32e6 <fputc>
    2cf6:	db cf       	rjmp	.-74     	; 0x2cae <vfprintf+0x2ee>
    2cf8:	c8 14       	cp	r12, r8
    2cfa:	d9 04       	cpc	r13, r9
    2cfc:	41 f4       	brne	.+16     	; 0x2d0e <vfprintf+0x34e>
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	96 33       	cpi	r25, 0x36	; 54
    2d02:	20 f4       	brcc	.+8      	; 0x2d0c <vfprintf+0x34c>
    2d04:	95 33       	cpi	r25, 0x35	; 53
    2d06:	19 f4       	brne	.+6      	; 0x2d0e <vfprintf+0x34e>
    2d08:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d0a:	34 ff       	sbrs	r19, 4
    2d0c:	81 e3       	ldi	r24, 0x31	; 49
    2d0e:	b7 01       	movw	r22, r14
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	48 c0       	rjmp	.+144    	; 0x2da4 <vfprintf+0x3e4>
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	81 33       	cpi	r24, 0x31	; 49
    2d18:	19 f0       	breq	.+6      	; 0x2d20 <vfprintf+0x360>
    2d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d1c:	9f 7e       	andi	r25, 0xEF	; 239
    2d1e:	9c 87       	std	Y+12, r25	; 0x0c
    2d20:	b7 01       	movw	r22, r14
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	e0 d2       	rcall	.+1472   	; 0x32e6 <fputc>
    2d26:	11 11       	cpse	r17, r1
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <vfprintf+0x374>
    2d2a:	94 fc       	sbrc	r9, 4
    2d2c:	16 c0       	rjmp	.+44     	; 0x2d5a <vfprintf+0x39a>
    2d2e:	85 e6       	ldi	r24, 0x65	; 101
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	15 c0       	rjmp	.+42     	; 0x2d5e <vfprintf+0x39e>
    2d34:	b7 01       	movw	r22, r14
    2d36:	8e e2       	ldi	r24, 0x2E	; 46
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	d5 d2       	rcall	.+1450   	; 0x32e6 <fputc>
    2d3c:	1e 5f       	subi	r17, 0xFE	; 254
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	01 e0       	ldi	r16, 0x01	; 1
    2d42:	08 0f       	add	r16, r24
    2d44:	f3 01       	movw	r30, r6
    2d46:	e8 0f       	add	r30, r24
    2d48:	f1 1d       	adc	r31, r1
    2d4a:	80 81       	ld	r24, Z
    2d4c:	b7 01       	movw	r22, r14
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	ca d2       	rcall	.+1428   	; 0x32e6 <fputc>
    2d52:	80 2f       	mov	r24, r16
    2d54:	01 13       	cpse	r16, r17
    2d56:	f4 cf       	rjmp	.-24     	; 0x2d40 <vfprintf+0x380>
    2d58:	e8 cf       	rjmp	.-48     	; 0x2d2a <vfprintf+0x36a>
    2d5a:	85 e4       	ldi	r24, 0x45	; 69
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	b7 01       	movw	r22, r14
    2d60:	c2 d2       	rcall	.+1412   	; 0x32e6 <fputc>
    2d62:	d7 fc       	sbrc	r13, 7
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <vfprintf+0x3b2>
    2d66:	c1 14       	cp	r12, r1
    2d68:	d1 04       	cpc	r13, r1
    2d6a:	41 f4       	brne	.+16     	; 0x2d7c <vfprintf+0x3bc>
    2d6c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d6e:	e4 ff       	sbrs	r30, 4
    2d70:	05 c0       	rjmp	.+10     	; 0x2d7c <vfprintf+0x3bc>
    2d72:	d1 94       	neg	r13
    2d74:	c1 94       	neg	r12
    2d76:	d1 08       	sbc	r13, r1
    2d78:	8d e2       	ldi	r24, 0x2D	; 45
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <vfprintf+0x3be>
    2d7c:	8b e2       	ldi	r24, 0x2B	; 43
    2d7e:	b7 01       	movw	r22, r14
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	b1 d2       	rcall	.+1378   	; 0x32e6 <fputc>
    2d84:	80 e3       	ldi	r24, 0x30	; 48
    2d86:	2a e0       	ldi	r18, 0x0A	; 10
    2d88:	c2 16       	cp	r12, r18
    2d8a:	d1 04       	cpc	r13, r1
    2d8c:	2c f0       	brlt	.+10     	; 0x2d98 <vfprintf+0x3d8>
    2d8e:	8f 5f       	subi	r24, 0xFF	; 255
    2d90:	fa e0       	ldi	r31, 0x0A	; 10
    2d92:	cf 1a       	sub	r12, r31
    2d94:	d1 08       	sbc	r13, r1
    2d96:	f7 cf       	rjmp	.-18     	; 0x2d86 <vfprintf+0x3c6>
    2d98:	b7 01       	movw	r22, r14
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	a4 d2       	rcall	.+1352   	; 0x32e6 <fputc>
    2d9e:	b7 01       	movw	r22, r14
    2da0:	c6 01       	movw	r24, r12
    2da2:	c0 96       	adiw	r24, 0x30	; 48
    2da4:	a0 d2       	rcall	.+1344   	; 0x32e6 <fputc>
    2da6:	49 c1       	rjmp	.+658    	; 0x303a <vfprintf+0x67a>
    2da8:	83 36       	cpi	r24, 0x63	; 99
    2daa:	31 f0       	breq	.+12     	; 0x2db8 <vfprintf+0x3f8>
    2dac:	83 37       	cpi	r24, 0x73	; 115
    2dae:	79 f0       	breq	.+30     	; 0x2dce <vfprintf+0x40e>
    2db0:	83 35       	cpi	r24, 0x53	; 83
    2db2:	09 f0       	breq	.+2      	; 0x2db6 <vfprintf+0x3f6>
    2db4:	52 c0       	rjmp	.+164    	; 0x2e5a <vfprintf+0x49a>
    2db6:	1f c0       	rjmp	.+62     	; 0x2df6 <vfprintf+0x436>
    2db8:	56 01       	movw	r10, r12
    2dba:	32 e0       	ldi	r19, 0x02	; 2
    2dbc:	a3 0e       	add	r10, r19
    2dbe:	b1 1c       	adc	r11, r1
    2dc0:	f6 01       	movw	r30, r12
    2dc2:	80 81       	ld	r24, Z
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	01 e0       	ldi	r16, 0x01	; 1
    2dc8:	10 e0       	ldi	r17, 0x00	; 0
    2dca:	63 01       	movw	r12, r6
    2dcc:	11 c0       	rjmp	.+34     	; 0x2df0 <vfprintf+0x430>
    2dce:	56 01       	movw	r10, r12
    2dd0:	f2 e0       	ldi	r31, 0x02	; 2
    2dd2:	af 0e       	add	r10, r31
    2dd4:	b1 1c       	adc	r11, r1
    2dd6:	f6 01       	movw	r30, r12
    2dd8:	c0 80       	ld	r12, Z
    2dda:	d1 80       	ldd	r13, Z+1	; 0x01
    2ddc:	96 fe       	sbrs	r9, 6
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <vfprintf+0x426>
    2de0:	61 2f       	mov	r22, r17
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <vfprintf+0x42a>
    2de6:	6f ef       	ldi	r22, 0xFF	; 255
    2de8:	7f ef       	ldi	r23, 0xFF	; 255
    2dea:	c6 01       	movw	r24, r12
    2dec:	71 d2       	rcall	.+1250   	; 0x32d0 <strnlen>
    2dee:	8c 01       	movw	r16, r24
    2df0:	f9 2d       	mov	r31, r9
    2df2:	ff 77       	andi	r31, 0x7F	; 127
    2df4:	13 c0       	rjmp	.+38     	; 0x2e1c <vfprintf+0x45c>
    2df6:	56 01       	movw	r10, r12
    2df8:	22 e0       	ldi	r18, 0x02	; 2
    2dfa:	a2 0e       	add	r10, r18
    2dfc:	b1 1c       	adc	r11, r1
    2dfe:	f6 01       	movw	r30, r12
    2e00:	c0 80       	ld	r12, Z
    2e02:	d1 80       	ldd	r13, Z+1	; 0x01
    2e04:	96 fe       	sbrs	r9, 6
    2e06:	03 c0       	rjmp	.+6      	; 0x2e0e <vfprintf+0x44e>
    2e08:	61 2f       	mov	r22, r17
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <vfprintf+0x452>
    2e0e:	6f ef       	ldi	r22, 0xFF	; 255
    2e10:	7f ef       	ldi	r23, 0xFF	; 255
    2e12:	c6 01       	movw	r24, r12
    2e14:	52 d2       	rcall	.+1188   	; 0x32ba <strnlen_P>
    2e16:	8c 01       	movw	r16, r24
    2e18:	f9 2d       	mov	r31, r9
    2e1a:	f0 68       	ori	r31, 0x80	; 128
    2e1c:	9f 2e       	mov	r9, r31
    2e1e:	f3 fd       	sbrc	r31, 3
    2e20:	18 c0       	rjmp	.+48     	; 0x2e52 <vfprintf+0x492>
    2e22:	85 2d       	mov	r24, r5
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	08 17       	cp	r16, r24
    2e28:	19 07       	cpc	r17, r25
    2e2a:	98 f4       	brcc	.+38     	; 0x2e52 <vfprintf+0x492>
    2e2c:	b7 01       	movw	r22, r14
    2e2e:	80 e2       	ldi	r24, 0x20	; 32
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	59 d2       	rcall	.+1202   	; 0x32e6 <fputc>
    2e34:	5a 94       	dec	r5
    2e36:	f5 cf       	rjmp	.-22     	; 0x2e22 <vfprintf+0x462>
    2e38:	f6 01       	movw	r30, r12
    2e3a:	97 fc       	sbrc	r9, 7
    2e3c:	85 91       	lpm	r24, Z+
    2e3e:	97 fe       	sbrs	r9, 7
    2e40:	81 91       	ld	r24, Z+
    2e42:	6f 01       	movw	r12, r30
    2e44:	b7 01       	movw	r22, r14
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	4e d2       	rcall	.+1180   	; 0x32e6 <fputc>
    2e4a:	51 10       	cpse	r5, r1
    2e4c:	5a 94       	dec	r5
    2e4e:	01 50       	subi	r16, 0x01	; 1
    2e50:	11 09       	sbc	r17, r1
    2e52:	01 15       	cp	r16, r1
    2e54:	11 05       	cpc	r17, r1
    2e56:	81 f7       	brne	.-32     	; 0x2e38 <vfprintf+0x478>
    2e58:	f0 c0       	rjmp	.+480    	; 0x303a <vfprintf+0x67a>
    2e5a:	84 36       	cpi	r24, 0x64	; 100
    2e5c:	11 f0       	breq	.+4      	; 0x2e62 <vfprintf+0x4a2>
    2e5e:	89 36       	cpi	r24, 0x69	; 105
    2e60:	59 f5       	brne	.+86     	; 0x2eb8 <vfprintf+0x4f8>
    2e62:	56 01       	movw	r10, r12
    2e64:	97 fe       	sbrs	r9, 7
    2e66:	09 c0       	rjmp	.+18     	; 0x2e7a <vfprintf+0x4ba>
    2e68:	24 e0       	ldi	r18, 0x04	; 4
    2e6a:	a2 0e       	add	r10, r18
    2e6c:	b1 1c       	adc	r11, r1
    2e6e:	f6 01       	movw	r30, r12
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	0a c0       	rjmp	.+20     	; 0x2e8e <vfprintf+0x4ce>
    2e7a:	f2 e0       	ldi	r31, 0x02	; 2
    2e7c:	af 0e       	add	r10, r31
    2e7e:	b1 1c       	adc	r11, r1
    2e80:	f6 01       	movw	r30, r12
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	07 2e       	mov	r0, r23
    2e88:	00 0c       	add	r0, r0
    2e8a:	88 0b       	sbc	r24, r24
    2e8c:	99 0b       	sbc	r25, r25
    2e8e:	f9 2d       	mov	r31, r9
    2e90:	ff 76       	andi	r31, 0x6F	; 111
    2e92:	9f 2e       	mov	r9, r31
    2e94:	97 ff       	sbrs	r25, 7
    2e96:	09 c0       	rjmp	.+18     	; 0x2eaa <vfprintf+0x4ea>
    2e98:	90 95       	com	r25
    2e9a:	80 95       	com	r24
    2e9c:	70 95       	com	r23
    2e9e:	61 95       	neg	r22
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea6:	f0 68       	ori	r31, 0x80	; 128
    2ea8:	9f 2e       	mov	r9, r31
    2eaa:	2a e0       	ldi	r18, 0x0A	; 10
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	a3 01       	movw	r20, r6
    2eb0:	99 d2       	rcall	.+1330   	; 0x33e4 <__ultoa_invert>
    2eb2:	c8 2e       	mov	r12, r24
    2eb4:	c6 18       	sub	r12, r6
    2eb6:	3e c0       	rjmp	.+124    	; 0x2f34 <vfprintf+0x574>
    2eb8:	09 2d       	mov	r16, r9
    2eba:	85 37       	cpi	r24, 0x75	; 117
    2ebc:	21 f4       	brne	.+8      	; 0x2ec6 <vfprintf+0x506>
    2ebe:	0f 7e       	andi	r16, 0xEF	; 239
    2ec0:	2a e0       	ldi	r18, 0x0A	; 10
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	1d c0       	rjmp	.+58     	; 0x2f00 <vfprintf+0x540>
    2ec6:	09 7f       	andi	r16, 0xF9	; 249
    2ec8:	8f 36       	cpi	r24, 0x6F	; 111
    2eca:	91 f0       	breq	.+36     	; 0x2ef0 <vfprintf+0x530>
    2ecc:	18 f4       	brcc	.+6      	; 0x2ed4 <vfprintf+0x514>
    2ece:	88 35       	cpi	r24, 0x58	; 88
    2ed0:	59 f0       	breq	.+22     	; 0x2ee8 <vfprintf+0x528>
    2ed2:	bc c0       	rjmp	.+376    	; 0x304c <vfprintf+0x68c>
    2ed4:	80 37       	cpi	r24, 0x70	; 112
    2ed6:	19 f0       	breq	.+6      	; 0x2ede <vfprintf+0x51e>
    2ed8:	88 37       	cpi	r24, 0x78	; 120
    2eda:	11 f0       	breq	.+4      	; 0x2ee0 <vfprintf+0x520>
    2edc:	b7 c0       	rjmp	.+366    	; 0x304c <vfprintf+0x68c>
    2ede:	00 61       	ori	r16, 0x10	; 16
    2ee0:	04 ff       	sbrs	r16, 4
    2ee2:	09 c0       	rjmp	.+18     	; 0x2ef6 <vfprintf+0x536>
    2ee4:	04 60       	ori	r16, 0x04	; 4
    2ee6:	07 c0       	rjmp	.+14     	; 0x2ef6 <vfprintf+0x536>
    2ee8:	94 fe       	sbrs	r9, 4
    2eea:	08 c0       	rjmp	.+16     	; 0x2efc <vfprintf+0x53c>
    2eec:	06 60       	ori	r16, 0x06	; 6
    2eee:	06 c0       	rjmp	.+12     	; 0x2efc <vfprintf+0x53c>
    2ef0:	28 e0       	ldi	r18, 0x08	; 8
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	05 c0       	rjmp	.+10     	; 0x2f00 <vfprintf+0x540>
    2ef6:	20 e1       	ldi	r18, 0x10	; 16
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <vfprintf+0x540>
    2efc:	20 e1       	ldi	r18, 0x10	; 16
    2efe:	32 e0       	ldi	r19, 0x02	; 2
    2f00:	56 01       	movw	r10, r12
    2f02:	07 ff       	sbrs	r16, 7
    2f04:	09 c0       	rjmp	.+18     	; 0x2f18 <vfprintf+0x558>
    2f06:	84 e0       	ldi	r24, 0x04	; 4
    2f08:	a8 0e       	add	r10, r24
    2f0a:	b1 1c       	adc	r11, r1
    2f0c:	f6 01       	movw	r30, r12
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	08 c0       	rjmp	.+16     	; 0x2f28 <vfprintf+0x568>
    2f18:	f2 e0       	ldi	r31, 0x02	; 2
    2f1a:	af 0e       	add	r10, r31
    2f1c:	b1 1c       	adc	r11, r1
    2f1e:	f6 01       	movw	r30, r12
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a3 01       	movw	r20, r6
    2f2a:	5c d2       	rcall	.+1208   	; 0x33e4 <__ultoa_invert>
    2f2c:	c8 2e       	mov	r12, r24
    2f2e:	c6 18       	sub	r12, r6
    2f30:	0f 77       	andi	r16, 0x7F	; 127
    2f32:	90 2e       	mov	r9, r16
    2f34:	96 fe       	sbrs	r9, 6
    2f36:	0b c0       	rjmp	.+22     	; 0x2f4e <vfprintf+0x58e>
    2f38:	09 2d       	mov	r16, r9
    2f3a:	0e 7f       	andi	r16, 0xFE	; 254
    2f3c:	c1 16       	cp	r12, r17
    2f3e:	50 f4       	brcc	.+20     	; 0x2f54 <vfprintf+0x594>
    2f40:	94 fe       	sbrs	r9, 4
    2f42:	0a c0       	rjmp	.+20     	; 0x2f58 <vfprintf+0x598>
    2f44:	92 fc       	sbrc	r9, 2
    2f46:	08 c0       	rjmp	.+16     	; 0x2f58 <vfprintf+0x598>
    2f48:	09 2d       	mov	r16, r9
    2f4a:	0e 7e       	andi	r16, 0xEE	; 238
    2f4c:	05 c0       	rjmp	.+10     	; 0x2f58 <vfprintf+0x598>
    2f4e:	dc 2c       	mov	r13, r12
    2f50:	09 2d       	mov	r16, r9
    2f52:	03 c0       	rjmp	.+6      	; 0x2f5a <vfprintf+0x59a>
    2f54:	dc 2c       	mov	r13, r12
    2f56:	01 c0       	rjmp	.+2      	; 0x2f5a <vfprintf+0x59a>
    2f58:	d1 2e       	mov	r13, r17
    2f5a:	04 ff       	sbrs	r16, 4
    2f5c:	0d c0       	rjmp	.+26     	; 0x2f78 <vfprintf+0x5b8>
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ec 0d       	add	r30, r12
    2f62:	f1 1d       	adc	r31, r1
    2f64:	80 81       	ld	r24, Z
    2f66:	80 33       	cpi	r24, 0x30	; 48
    2f68:	11 f4       	brne	.+4      	; 0x2f6e <vfprintf+0x5ae>
    2f6a:	09 7e       	andi	r16, 0xE9	; 233
    2f6c:	09 c0       	rjmp	.+18     	; 0x2f80 <vfprintf+0x5c0>
    2f6e:	02 ff       	sbrs	r16, 2
    2f70:	06 c0       	rjmp	.+12     	; 0x2f7e <vfprintf+0x5be>
    2f72:	d3 94       	inc	r13
    2f74:	d3 94       	inc	r13
    2f76:	04 c0       	rjmp	.+8      	; 0x2f80 <vfprintf+0x5c0>
    2f78:	80 2f       	mov	r24, r16
    2f7a:	86 78       	andi	r24, 0x86	; 134
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <vfprintf+0x5c0>
    2f7e:	d3 94       	inc	r13
    2f80:	03 fd       	sbrc	r16, 3
    2f82:	10 c0       	rjmp	.+32     	; 0x2fa4 <vfprintf+0x5e4>
    2f84:	00 ff       	sbrs	r16, 0
    2f86:	06 c0       	rjmp	.+12     	; 0x2f94 <vfprintf+0x5d4>
    2f88:	1c 2d       	mov	r17, r12
    2f8a:	d5 14       	cp	r13, r5
    2f8c:	78 f4       	brcc	.+30     	; 0x2fac <vfprintf+0x5ec>
    2f8e:	15 0d       	add	r17, r5
    2f90:	1d 19       	sub	r17, r13
    2f92:	0c c0       	rjmp	.+24     	; 0x2fac <vfprintf+0x5ec>
    2f94:	d5 14       	cp	r13, r5
    2f96:	50 f4       	brcc	.+20     	; 0x2fac <vfprintf+0x5ec>
    2f98:	b7 01       	movw	r22, r14
    2f9a:	80 e2       	ldi	r24, 0x20	; 32
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a3 d1       	rcall	.+838    	; 0x32e6 <fputc>
    2fa0:	d3 94       	inc	r13
    2fa2:	f8 cf       	rjmp	.-16     	; 0x2f94 <vfprintf+0x5d4>
    2fa4:	d5 14       	cp	r13, r5
    2fa6:	10 f4       	brcc	.+4      	; 0x2fac <vfprintf+0x5ec>
    2fa8:	5d 18       	sub	r5, r13
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <vfprintf+0x5ee>
    2fac:	51 2c       	mov	r5, r1
    2fae:	04 ff       	sbrs	r16, 4
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <vfprintf+0x610>
    2fb2:	b7 01       	movw	r22, r14
    2fb4:	80 e3       	ldi	r24, 0x30	; 48
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	96 d1       	rcall	.+812    	; 0x32e6 <fputc>
    2fba:	02 ff       	sbrs	r16, 2
    2fbc:	16 c0       	rjmp	.+44     	; 0x2fea <vfprintf+0x62a>
    2fbe:	01 fd       	sbrc	r16, 1
    2fc0:	03 c0       	rjmp	.+6      	; 0x2fc8 <vfprintf+0x608>
    2fc2:	88 e7       	ldi	r24, 0x78	; 120
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <vfprintf+0x60c>
    2fc8:	88 e5       	ldi	r24, 0x58	; 88
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	b7 01       	movw	r22, r14
    2fce:	0c c0       	rjmp	.+24     	; 0x2fe8 <vfprintf+0x628>
    2fd0:	80 2f       	mov	r24, r16
    2fd2:	86 78       	andi	r24, 0x86	; 134
    2fd4:	51 f0       	breq	.+20     	; 0x2fea <vfprintf+0x62a>
    2fd6:	01 ff       	sbrs	r16, 1
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <vfprintf+0x61e>
    2fda:	8b e2       	ldi	r24, 0x2B	; 43
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <vfprintf+0x620>
    2fde:	80 e2       	ldi	r24, 0x20	; 32
    2fe0:	07 fd       	sbrc	r16, 7
    2fe2:	8d e2       	ldi	r24, 0x2D	; 45
    2fe4:	b7 01       	movw	r22, r14
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	7e d1       	rcall	.+764    	; 0x32e6 <fputc>
    2fea:	c1 16       	cp	r12, r17
    2fec:	30 f4       	brcc	.+12     	; 0x2ffa <vfprintf+0x63a>
    2fee:	b7 01       	movw	r22, r14
    2ff0:	80 e3       	ldi	r24, 0x30	; 48
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	78 d1       	rcall	.+752    	; 0x32e6 <fputc>
    2ff6:	11 50       	subi	r17, 0x01	; 1
    2ff8:	f8 cf       	rjmp	.-16     	; 0x2fea <vfprintf+0x62a>
    2ffa:	ca 94       	dec	r12
    2ffc:	f3 01       	movw	r30, r6
    2ffe:	ec 0d       	add	r30, r12
    3000:	f1 1d       	adc	r31, r1
    3002:	80 81       	ld	r24, Z
    3004:	b7 01       	movw	r22, r14
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	6e d1       	rcall	.+732    	; 0x32e6 <fputc>
    300a:	c1 10       	cpse	r12, r1
    300c:	f6 cf       	rjmp	.-20     	; 0x2ffa <vfprintf+0x63a>
    300e:	15 c0       	rjmp	.+42     	; 0x303a <vfprintf+0x67a>
    3010:	f4 e0       	ldi	r31, 0x04	; 4
    3012:	f5 15       	cp	r31, r5
    3014:	50 f5       	brcc	.+84     	; 0x306a <vfprintf+0x6aa>
    3016:	84 e0       	ldi	r24, 0x04	; 4
    3018:	58 1a       	sub	r5, r24
    301a:	93 fe       	sbrs	r9, 3
    301c:	1e c0       	rjmp	.+60     	; 0x305a <vfprintf+0x69a>
    301e:	01 11       	cpse	r16, r1
    3020:	25 c0       	rjmp	.+74     	; 0x306c <vfprintf+0x6ac>
    3022:	2c 85       	ldd	r18, Y+12	; 0x0c
    3024:	23 ff       	sbrs	r18, 3
    3026:	27 c0       	rjmp	.+78     	; 0x3076 <vfprintf+0x6b6>
    3028:	0c ef       	ldi	r16, 0xFC	; 252
    302a:	11 e0       	ldi	r17, 0x01	; 1
    302c:	39 2d       	mov	r19, r9
    302e:	30 71       	andi	r19, 0x10	; 16
    3030:	93 2e       	mov	r9, r19
    3032:	f8 01       	movw	r30, r16
    3034:	84 91       	lpm	r24, Z
    3036:	81 11       	cpse	r24, r1
    3038:	21 c0       	rjmp	.+66     	; 0x307c <vfprintf+0x6bc>
    303a:	55 20       	and	r5, r5
    303c:	09 f4       	brne	.+2      	; 0x3040 <vfprintf+0x680>
    303e:	fc cc       	rjmp	.-1544   	; 0x2a38 <vfprintf+0x78>
    3040:	b7 01       	movw	r22, r14
    3042:	80 e2       	ldi	r24, 0x20	; 32
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	4f d1       	rcall	.+670    	; 0x32e6 <fputc>
    3048:	5a 94       	dec	r5
    304a:	f7 cf       	rjmp	.-18     	; 0x303a <vfprintf+0x67a>
    304c:	f7 01       	movw	r30, r14
    304e:	86 81       	ldd	r24, Z+6	; 0x06
    3050:	97 81       	ldd	r25, Z+7	; 0x07
    3052:	23 c0       	rjmp	.+70     	; 0x309a <vfprintf+0x6da>
    3054:	8f ef       	ldi	r24, 0xFF	; 255
    3056:	9f ef       	ldi	r25, 0xFF	; 255
    3058:	20 c0       	rjmp	.+64     	; 0x309a <vfprintf+0x6da>
    305a:	b7 01       	movw	r22, r14
    305c:	80 e2       	ldi	r24, 0x20	; 32
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	42 d1       	rcall	.+644    	; 0x32e6 <fputc>
    3062:	5a 94       	dec	r5
    3064:	51 10       	cpse	r5, r1
    3066:	f9 cf       	rjmp	.-14     	; 0x305a <vfprintf+0x69a>
    3068:	da cf       	rjmp	.-76     	; 0x301e <vfprintf+0x65e>
    306a:	51 2c       	mov	r5, r1
    306c:	b7 01       	movw	r22, r14
    306e:	80 2f       	mov	r24, r16
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	39 d1       	rcall	.+626    	; 0x32e6 <fputc>
    3074:	d6 cf       	rjmp	.-84     	; 0x3022 <vfprintf+0x662>
    3076:	00 e0       	ldi	r16, 0x00	; 0
    3078:	12 e0       	ldi	r17, 0x02	; 2
    307a:	d8 cf       	rjmp	.-80     	; 0x302c <vfprintf+0x66c>
    307c:	91 10       	cpse	r9, r1
    307e:	80 52       	subi	r24, 0x20	; 32
    3080:	b7 01       	movw	r22, r14
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	30 d1       	rcall	.+608    	; 0x32e6 <fputc>
    3086:	0f 5f       	subi	r16, 0xFF	; 255
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	d3 cf       	rjmp	.-90     	; 0x3032 <vfprintf+0x672>
    308c:	23 e0       	ldi	r18, 0x03	; 3
    308e:	25 15       	cp	r18, r5
    3090:	10 f4       	brcc	.+4      	; 0x3096 <vfprintf+0x6d6>
    3092:	83 e0       	ldi	r24, 0x03	; 3
    3094:	c1 cf       	rjmp	.-126    	; 0x3018 <vfprintf+0x658>
    3096:	51 2c       	mov	r5, r1
    3098:	c4 cf       	rjmp	.-120    	; 0x3022 <vfprintf+0x662>
    309a:	60 96       	adiw	r28, 0x10	; 16
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	8f 90       	pop	r8
    30b8:	7f 90       	pop	r7
    30ba:	6f 90       	pop	r6
    30bc:	5f 90       	pop	r5
    30be:	4f 90       	pop	r4
    30c0:	3f 90       	pop	r3
    30c2:	2f 90       	pop	r2
    30c4:	08 95       	ret

000030c6 <__udivmodsi4>:
    30c6:	a1 e2       	ldi	r26, 0x21	; 33
    30c8:	1a 2e       	mov	r1, r26
    30ca:	aa 1b       	sub	r26, r26
    30cc:	bb 1b       	sub	r27, r27
    30ce:	fd 01       	movw	r30, r26
    30d0:	0d c0       	rjmp	.+26     	; 0x30ec <__udivmodsi4_ep>

000030d2 <__udivmodsi4_loop>:
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	ee 1f       	adc	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	a2 17       	cp	r26, r18
    30dc:	b3 07       	cpc	r27, r19
    30de:	e4 07       	cpc	r30, r20
    30e0:	f5 07       	cpc	r31, r21
    30e2:	20 f0       	brcs	.+8      	; 0x30ec <__udivmodsi4_ep>
    30e4:	a2 1b       	sub	r26, r18
    30e6:	b3 0b       	sbc	r27, r19
    30e8:	e4 0b       	sbc	r30, r20
    30ea:	f5 0b       	sbc	r31, r21

000030ec <__udivmodsi4_ep>:
    30ec:	66 1f       	adc	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	1a 94       	dec	r1
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <__udivmodsi4_loop>
    30f8:	60 95       	com	r22
    30fa:	70 95       	com	r23
    30fc:	80 95       	com	r24
    30fe:	90 95       	com	r25
    3100:	9b 01       	movw	r18, r22
    3102:	ac 01       	movw	r20, r24
    3104:	bd 01       	movw	r22, r26
    3106:	cf 01       	movw	r24, r30
    3108:	08 95       	ret

0000310a <__ftoa_engine>:
    310a:	28 30       	cpi	r18, 0x08	; 8
    310c:	08 f0       	brcs	.+2      	; 0x3110 <__ftoa_engine+0x6>
    310e:	27 e0       	ldi	r18, 0x07	; 7
    3110:	33 27       	eor	r19, r19
    3112:	da 01       	movw	r26, r20
    3114:	99 0f       	add	r25, r25
    3116:	31 1d       	adc	r19, r1
    3118:	87 fd       	sbrc	r24, 7
    311a:	91 60       	ori	r25, 0x01	; 1
    311c:	00 96       	adiw	r24, 0x00	; 0
    311e:	61 05       	cpc	r22, r1
    3120:	71 05       	cpc	r23, r1
    3122:	39 f4       	brne	.+14     	; 0x3132 <__ftoa_engine+0x28>
    3124:	32 60       	ori	r19, 0x02	; 2
    3126:	2e 5f       	subi	r18, 0xFE	; 254
    3128:	3d 93       	st	X+, r19
    312a:	30 e3       	ldi	r19, 0x30	; 48
    312c:	2a 95       	dec	r18
    312e:	e1 f7       	brne	.-8      	; 0x3128 <__ftoa_engine+0x1e>
    3130:	08 95       	ret
    3132:	9f 3f       	cpi	r25, 0xFF	; 255
    3134:	30 f0       	brcs	.+12     	; 0x3142 <__ftoa_engine+0x38>
    3136:	80 38       	cpi	r24, 0x80	; 128
    3138:	71 05       	cpc	r23, r1
    313a:	61 05       	cpc	r22, r1
    313c:	09 f0       	breq	.+2      	; 0x3140 <__ftoa_engine+0x36>
    313e:	3c 5f       	subi	r19, 0xFC	; 252
    3140:	3c 5f       	subi	r19, 0xFC	; 252
    3142:	3d 93       	st	X+, r19
    3144:	91 30       	cpi	r25, 0x01	; 1
    3146:	08 f0       	brcs	.+2      	; 0x314a <__ftoa_engine+0x40>
    3148:	80 68       	ori	r24, 0x80	; 128
    314a:	91 1d       	adc	r25, r1
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	1f 93       	push	r17
    3152:	0f 93       	push	r16
    3154:	ff 92       	push	r15
    3156:	ef 92       	push	r14
    3158:	19 2f       	mov	r17, r25
    315a:	98 7f       	andi	r25, 0xF8	; 248
    315c:	96 95       	lsr	r25
    315e:	e9 2f       	mov	r30, r25
    3160:	96 95       	lsr	r25
    3162:	96 95       	lsr	r25
    3164:	e9 0f       	add	r30, r25
    3166:	ff 27       	eor	r31, r31
    3168:	e2 5a       	subi	r30, 0xA2	; 162
    316a:	fd 4f       	sbci	r31, 0xFD	; 253
    316c:	99 27       	eor	r25, r25
    316e:	33 27       	eor	r19, r19
    3170:	ee 24       	eor	r14, r14
    3172:	ff 24       	eor	r15, r15
    3174:	a7 01       	movw	r20, r14
    3176:	e7 01       	movw	r28, r14
    3178:	05 90       	lpm	r0, Z+
    317a:	08 94       	sec
    317c:	07 94       	ror	r0
    317e:	28 f4       	brcc	.+10     	; 0x318a <__ftoa_engine+0x80>
    3180:	36 0f       	add	r19, r22
    3182:	e7 1e       	adc	r14, r23
    3184:	f8 1e       	adc	r15, r24
    3186:	49 1f       	adc	r20, r25
    3188:	51 1d       	adc	r21, r1
    318a:	66 0f       	add	r22, r22
    318c:	77 1f       	adc	r23, r23
    318e:	88 1f       	adc	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	06 94       	lsr	r0
    3194:	a1 f7       	brne	.-24     	; 0x317e <__ftoa_engine+0x74>
    3196:	05 90       	lpm	r0, Z+
    3198:	07 94       	ror	r0
    319a:	28 f4       	brcc	.+10     	; 0x31a6 <__ftoa_engine+0x9c>
    319c:	e7 0e       	add	r14, r23
    319e:	f8 1e       	adc	r15, r24
    31a0:	49 1f       	adc	r20, r25
    31a2:	56 1f       	adc	r21, r22
    31a4:	c1 1d       	adc	r28, r1
    31a6:	77 0f       	add	r23, r23
    31a8:	88 1f       	adc	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	66 1f       	adc	r22, r22
    31ae:	06 94       	lsr	r0
    31b0:	a1 f7       	brne	.-24     	; 0x319a <__ftoa_engine+0x90>
    31b2:	05 90       	lpm	r0, Z+
    31b4:	07 94       	ror	r0
    31b6:	28 f4       	brcc	.+10     	; 0x31c2 <__ftoa_engine+0xb8>
    31b8:	f8 0e       	add	r15, r24
    31ba:	49 1f       	adc	r20, r25
    31bc:	56 1f       	adc	r21, r22
    31be:	c7 1f       	adc	r28, r23
    31c0:	d1 1d       	adc	r29, r1
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	66 1f       	adc	r22, r22
    31c8:	77 1f       	adc	r23, r23
    31ca:	06 94       	lsr	r0
    31cc:	a1 f7       	brne	.-24     	; 0x31b6 <__ftoa_engine+0xac>
    31ce:	05 90       	lpm	r0, Z+
    31d0:	07 94       	ror	r0
    31d2:	20 f4       	brcc	.+8      	; 0x31dc <__ftoa_engine+0xd2>
    31d4:	49 0f       	add	r20, r25
    31d6:	56 1f       	adc	r21, r22
    31d8:	c7 1f       	adc	r28, r23
    31da:	d8 1f       	adc	r29, r24
    31dc:	99 0f       	add	r25, r25
    31de:	66 1f       	adc	r22, r22
    31e0:	77 1f       	adc	r23, r23
    31e2:	88 1f       	adc	r24, r24
    31e4:	06 94       	lsr	r0
    31e6:	a9 f7       	brne	.-22     	; 0x31d2 <__ftoa_engine+0xc8>
    31e8:	84 91       	lpm	r24, Z
    31ea:	10 95       	com	r17
    31ec:	17 70       	andi	r17, 0x07	; 7
    31ee:	41 f0       	breq	.+16     	; 0x3200 <__ftoa_engine+0xf6>
    31f0:	d6 95       	lsr	r29
    31f2:	c7 95       	ror	r28
    31f4:	57 95       	ror	r21
    31f6:	47 95       	ror	r20
    31f8:	f7 94       	ror	r15
    31fa:	e7 94       	ror	r14
    31fc:	1a 95       	dec	r17
    31fe:	c1 f7       	brne	.-16     	; 0x31f0 <__ftoa_engine+0xe6>
    3200:	e4 e0       	ldi	r30, 0x04	; 4
    3202:	f2 e0       	ldi	r31, 0x02	; 2
    3204:	68 94       	set
    3206:	15 90       	lpm	r1, Z+
    3208:	15 91       	lpm	r17, Z+
    320a:	35 91       	lpm	r19, Z+
    320c:	65 91       	lpm	r22, Z+
    320e:	95 91       	lpm	r25, Z+
    3210:	05 90       	lpm	r0, Z+
    3212:	7f e2       	ldi	r23, 0x2F	; 47
    3214:	73 95       	inc	r23
    3216:	e1 18       	sub	r14, r1
    3218:	f1 0a       	sbc	r15, r17
    321a:	43 0b       	sbc	r20, r19
    321c:	56 0b       	sbc	r21, r22
    321e:	c9 0b       	sbc	r28, r25
    3220:	d0 09       	sbc	r29, r0
    3222:	c0 f7       	brcc	.-16     	; 0x3214 <__ftoa_engine+0x10a>
    3224:	e1 0c       	add	r14, r1
    3226:	f1 1e       	adc	r15, r17
    3228:	43 1f       	adc	r20, r19
    322a:	56 1f       	adc	r21, r22
    322c:	c9 1f       	adc	r28, r25
    322e:	d0 1d       	adc	r29, r0
    3230:	7e f4       	brtc	.+30     	; 0x3250 <__ftoa_engine+0x146>
    3232:	70 33       	cpi	r23, 0x30	; 48
    3234:	11 f4       	brne	.+4      	; 0x323a <__ftoa_engine+0x130>
    3236:	8a 95       	dec	r24
    3238:	e6 cf       	rjmp	.-52     	; 0x3206 <__ftoa_engine+0xfc>
    323a:	e8 94       	clt
    323c:	01 50       	subi	r16, 0x01	; 1
    323e:	30 f0       	brcs	.+12     	; 0x324c <__ftoa_engine+0x142>
    3240:	08 0f       	add	r16, r24
    3242:	0a f4       	brpl	.+2      	; 0x3246 <__ftoa_engine+0x13c>
    3244:	00 27       	eor	r16, r16
    3246:	02 17       	cp	r16, r18
    3248:	08 f4       	brcc	.+2      	; 0x324c <__ftoa_engine+0x142>
    324a:	20 2f       	mov	r18, r16
    324c:	23 95       	inc	r18
    324e:	02 2f       	mov	r16, r18
    3250:	7a 33       	cpi	r23, 0x3A	; 58
    3252:	28 f0       	brcs	.+10     	; 0x325e <__ftoa_engine+0x154>
    3254:	79 e3       	ldi	r23, 0x39	; 57
    3256:	7d 93       	st	X+, r23
    3258:	2a 95       	dec	r18
    325a:	e9 f7       	brne	.-6      	; 0x3256 <__ftoa_engine+0x14c>
    325c:	10 c0       	rjmp	.+32     	; 0x327e <__ftoa_engine+0x174>
    325e:	7d 93       	st	X+, r23
    3260:	2a 95       	dec	r18
    3262:	89 f6       	brne	.-94     	; 0x3206 <__ftoa_engine+0xfc>
    3264:	06 94       	lsr	r0
    3266:	97 95       	ror	r25
    3268:	67 95       	ror	r22
    326a:	37 95       	ror	r19
    326c:	17 95       	ror	r17
    326e:	17 94       	ror	r1
    3270:	e1 18       	sub	r14, r1
    3272:	f1 0a       	sbc	r15, r17
    3274:	43 0b       	sbc	r20, r19
    3276:	56 0b       	sbc	r21, r22
    3278:	c9 0b       	sbc	r28, r25
    327a:	d0 09       	sbc	r29, r0
    327c:	98 f0       	brcs	.+38     	; 0x32a4 <__ftoa_engine+0x19a>
    327e:	23 95       	inc	r18
    3280:	7e 91       	ld	r23, -X
    3282:	73 95       	inc	r23
    3284:	7a 33       	cpi	r23, 0x3A	; 58
    3286:	08 f0       	brcs	.+2      	; 0x328a <__ftoa_engine+0x180>
    3288:	70 e3       	ldi	r23, 0x30	; 48
    328a:	7c 93       	st	X, r23
    328c:	20 13       	cpse	r18, r16
    328e:	b8 f7       	brcc	.-18     	; 0x327e <__ftoa_engine+0x174>
    3290:	7e 91       	ld	r23, -X
    3292:	70 61       	ori	r23, 0x10	; 16
    3294:	7d 93       	st	X+, r23
    3296:	30 f0       	brcs	.+12     	; 0x32a4 <__ftoa_engine+0x19a>
    3298:	83 95       	inc	r24
    329a:	71 e3       	ldi	r23, 0x31	; 49
    329c:	7d 93       	st	X+, r23
    329e:	70 e3       	ldi	r23, 0x30	; 48
    32a0:	2a 95       	dec	r18
    32a2:	e1 f7       	brne	.-8      	; 0x329c <__ftoa_engine+0x192>
    32a4:	11 24       	eor	r1, r1
    32a6:	ef 90       	pop	r14
    32a8:	ff 90       	pop	r15
    32aa:	0f 91       	pop	r16
    32ac:	1f 91       	pop	r17
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	99 27       	eor	r25, r25
    32b4:	87 fd       	sbrc	r24, 7
    32b6:	90 95       	com	r25
    32b8:	08 95       	ret

000032ba <strnlen_P>:
    32ba:	fc 01       	movw	r30, r24
    32bc:	05 90       	lpm	r0, Z+
    32be:	61 50       	subi	r22, 0x01	; 1
    32c0:	70 40       	sbci	r23, 0x00	; 0
    32c2:	01 10       	cpse	r0, r1
    32c4:	d8 f7       	brcc	.-10     	; 0x32bc <strnlen_P+0x2>
    32c6:	80 95       	com	r24
    32c8:	90 95       	com	r25
    32ca:	8e 0f       	add	r24, r30
    32cc:	9f 1f       	adc	r25, r31
    32ce:	08 95       	ret

000032d0 <strnlen>:
    32d0:	fc 01       	movw	r30, r24
    32d2:	61 50       	subi	r22, 0x01	; 1
    32d4:	70 40       	sbci	r23, 0x00	; 0
    32d6:	01 90       	ld	r0, Z+
    32d8:	01 10       	cpse	r0, r1
    32da:	d8 f7       	brcc	.-10     	; 0x32d2 <strnlen+0x2>
    32dc:	80 95       	com	r24
    32de:	90 95       	com	r25
    32e0:	8e 0f       	add	r24, r30
    32e2:	9f 1f       	adc	r25, r31
    32e4:	08 95       	ret

000032e6 <fputc>:
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	fb 01       	movw	r30, r22
    32f0:	23 81       	ldd	r18, Z+3	; 0x03
    32f2:	21 fd       	sbrc	r18, 1
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <fputc+0x16>
    32f6:	8f ef       	ldi	r24, 0xFF	; 255
    32f8:	9f ef       	ldi	r25, 0xFF	; 255
    32fa:	2c c0       	rjmp	.+88     	; 0x3354 <fputc+0x6e>
    32fc:	22 ff       	sbrs	r18, 2
    32fe:	16 c0       	rjmp	.+44     	; 0x332c <fputc+0x46>
    3300:	46 81       	ldd	r20, Z+6	; 0x06
    3302:	57 81       	ldd	r21, Z+7	; 0x07
    3304:	24 81       	ldd	r18, Z+4	; 0x04
    3306:	35 81       	ldd	r19, Z+5	; 0x05
    3308:	42 17       	cp	r20, r18
    330a:	53 07       	cpc	r21, r19
    330c:	44 f4       	brge	.+16     	; 0x331e <fputc+0x38>
    330e:	a0 81       	ld	r26, Z
    3310:	b1 81       	ldd	r27, Z+1	; 0x01
    3312:	9d 01       	movw	r18, r26
    3314:	2f 5f       	subi	r18, 0xFF	; 255
    3316:	3f 4f       	sbci	r19, 0xFF	; 255
    3318:	20 83       	st	Z, r18
    331a:	31 83       	std	Z+1, r19	; 0x01
    331c:	8c 93       	st	X, r24
    331e:	26 81       	ldd	r18, Z+6	; 0x06
    3320:	37 81       	ldd	r19, Z+7	; 0x07
    3322:	2f 5f       	subi	r18, 0xFF	; 255
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	26 83       	std	Z+6, r18	; 0x06
    3328:	37 83       	std	Z+7, r19	; 0x07
    332a:	14 c0       	rjmp	.+40     	; 0x3354 <fputc+0x6e>
    332c:	8b 01       	movw	r16, r22
    332e:	ec 01       	movw	r28, r24
    3330:	fb 01       	movw	r30, r22
    3332:	00 84       	ldd	r0, Z+8	; 0x08
    3334:	f1 85       	ldd	r31, Z+9	; 0x09
    3336:	e0 2d       	mov	r30, r0
    3338:	19 95       	eicall
    333a:	89 2b       	or	r24, r25
    333c:	e1 f6       	brne	.-72     	; 0x32f6 <fputc+0x10>
    333e:	d8 01       	movw	r26, r16
    3340:	16 96       	adiw	r26, 0x06	; 6
    3342:	8d 91       	ld	r24, X+
    3344:	9c 91       	ld	r25, X
    3346:	17 97       	sbiw	r26, 0x07	; 7
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	16 96       	adiw	r26, 0x06	; 6
    334c:	8d 93       	st	X+, r24
    334e:	9c 93       	st	X, r25
    3350:	17 97       	sbiw	r26, 0x07	; 7
    3352:	ce 01       	movw	r24, r28
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	08 95       	ret

0000335e <printf>:
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	ae 01       	movw	r20, r28
    3368:	4a 5f       	subi	r20, 0xFA	; 250
    336a:	5f 4f       	sbci	r21, 0xFF	; 255
    336c:	fa 01       	movw	r30, r20
    336e:	61 91       	ld	r22, Z+
    3370:	71 91       	ld	r23, Z+
    3372:	af 01       	movw	r20, r30
    3374:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__iob+0x2>
    3378:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__iob+0x3>
    337c:	21 db       	rcall	.-2494   	; 0x29c0 <vfprintf>
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	08 95       	ret

00003384 <puts>:
    3384:	0f 93       	push	r16
    3386:	1f 93       	push	r17
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	e0 91 10 21 	lds	r30, 0x2110	; 0x802110 <__iob+0x2>
    3390:	f0 91 11 21 	lds	r31, 0x2111	; 0x802111 <__iob+0x3>
    3394:	23 81       	ldd	r18, Z+3	; 0x03
    3396:	21 ff       	sbrs	r18, 1
    3398:	1b c0       	rjmp	.+54     	; 0x33d0 <puts+0x4c>
    339a:	8c 01       	movw	r16, r24
    339c:	d0 e0       	ldi	r29, 0x00	; 0
    339e:	c0 e0       	ldi	r28, 0x00	; 0
    33a0:	f8 01       	movw	r30, r16
    33a2:	81 91       	ld	r24, Z+
    33a4:	8f 01       	movw	r16, r30
    33a6:	60 91 10 21 	lds	r22, 0x2110	; 0x802110 <__iob+0x2>
    33aa:	70 91 11 21 	lds	r23, 0x2111	; 0x802111 <__iob+0x3>
    33ae:	db 01       	movw	r26, r22
    33b0:	18 96       	adiw	r26, 0x08	; 8
    33b2:	ed 91       	ld	r30, X+
    33b4:	fc 91       	ld	r31, X
    33b6:	19 97       	sbiw	r26, 0x09	; 9
    33b8:	88 23       	and	r24, r24
    33ba:	31 f0       	breq	.+12     	; 0x33c8 <puts+0x44>
    33bc:	19 95       	eicall
    33be:	89 2b       	or	r24, r25
    33c0:	79 f3       	breq	.-34     	; 0x33a0 <puts+0x1c>
    33c2:	df ef       	ldi	r29, 0xFF	; 255
    33c4:	cf ef       	ldi	r28, 0xFF	; 255
    33c6:	ec cf       	rjmp	.-40     	; 0x33a0 <puts+0x1c>
    33c8:	8a e0       	ldi	r24, 0x0A	; 10
    33ca:	19 95       	eicall
    33cc:	89 2b       	or	r24, r25
    33ce:	19 f0       	breq	.+6      	; 0x33d6 <puts+0x52>
    33d0:	8f ef       	ldi	r24, 0xFF	; 255
    33d2:	9f ef       	ldi	r25, 0xFF	; 255
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <puts+0x56>
    33d6:	8d 2f       	mov	r24, r29
    33d8:	9c 2f       	mov	r25, r28
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	08 95       	ret

000033e4 <__ultoa_invert>:
    33e4:	fa 01       	movw	r30, r20
    33e6:	aa 27       	eor	r26, r26
    33e8:	28 30       	cpi	r18, 0x08	; 8
    33ea:	51 f1       	breq	.+84     	; 0x3440 <__ultoa_invert+0x5c>
    33ec:	20 31       	cpi	r18, 0x10	; 16
    33ee:	81 f1       	breq	.+96     	; 0x3450 <__ultoa_invert+0x6c>
    33f0:	e8 94       	clt
    33f2:	6f 93       	push	r22
    33f4:	6e 7f       	andi	r22, 0xFE	; 254
    33f6:	6e 5f       	subi	r22, 0xFE	; 254
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255
    33fa:	8f 4f       	sbci	r24, 0xFF	; 255
    33fc:	9f 4f       	sbci	r25, 0xFF	; 255
    33fe:	af 4f       	sbci	r26, 0xFF	; 255
    3400:	b1 e0       	ldi	r27, 0x01	; 1
    3402:	3e d0       	rcall	.+124    	; 0x3480 <__ultoa_invert+0x9c>
    3404:	b4 e0       	ldi	r27, 0x04	; 4
    3406:	3c d0       	rcall	.+120    	; 0x3480 <__ultoa_invert+0x9c>
    3408:	67 0f       	add	r22, r23
    340a:	78 1f       	adc	r23, r24
    340c:	89 1f       	adc	r24, r25
    340e:	9a 1f       	adc	r25, r26
    3410:	a1 1d       	adc	r26, r1
    3412:	68 0f       	add	r22, r24
    3414:	79 1f       	adc	r23, r25
    3416:	8a 1f       	adc	r24, r26
    3418:	91 1d       	adc	r25, r1
    341a:	a1 1d       	adc	r26, r1
    341c:	6a 0f       	add	r22, r26
    341e:	71 1d       	adc	r23, r1
    3420:	81 1d       	adc	r24, r1
    3422:	91 1d       	adc	r25, r1
    3424:	a1 1d       	adc	r26, r1
    3426:	20 d0       	rcall	.+64     	; 0x3468 <__ultoa_invert+0x84>
    3428:	09 f4       	brne	.+2      	; 0x342c <__ultoa_invert+0x48>
    342a:	68 94       	set
    342c:	3f 91       	pop	r19
    342e:	2a e0       	ldi	r18, 0x0A	; 10
    3430:	26 9f       	mul	r18, r22
    3432:	11 24       	eor	r1, r1
    3434:	30 19       	sub	r19, r0
    3436:	30 5d       	subi	r19, 0xD0	; 208
    3438:	31 93       	st	Z+, r19
    343a:	de f6       	brtc	.-74     	; 0x33f2 <__ultoa_invert+0xe>
    343c:	cf 01       	movw	r24, r30
    343e:	08 95       	ret
    3440:	46 2f       	mov	r20, r22
    3442:	47 70       	andi	r20, 0x07	; 7
    3444:	40 5d       	subi	r20, 0xD0	; 208
    3446:	41 93       	st	Z+, r20
    3448:	b3 e0       	ldi	r27, 0x03	; 3
    344a:	0f d0       	rcall	.+30     	; 0x346a <__ultoa_invert+0x86>
    344c:	c9 f7       	brne	.-14     	; 0x3440 <__ultoa_invert+0x5c>
    344e:	f6 cf       	rjmp	.-20     	; 0x343c <__ultoa_invert+0x58>
    3450:	46 2f       	mov	r20, r22
    3452:	4f 70       	andi	r20, 0x0F	; 15
    3454:	40 5d       	subi	r20, 0xD0	; 208
    3456:	4a 33       	cpi	r20, 0x3A	; 58
    3458:	18 f0       	brcs	.+6      	; 0x3460 <__ultoa_invert+0x7c>
    345a:	49 5d       	subi	r20, 0xD9	; 217
    345c:	31 fd       	sbrc	r19, 1
    345e:	40 52       	subi	r20, 0x20	; 32
    3460:	41 93       	st	Z+, r20
    3462:	02 d0       	rcall	.+4      	; 0x3468 <__ultoa_invert+0x84>
    3464:	a9 f7       	brne	.-22     	; 0x3450 <__ultoa_invert+0x6c>
    3466:	ea cf       	rjmp	.-44     	; 0x343c <__ultoa_invert+0x58>
    3468:	b4 e0       	ldi	r27, 0x04	; 4
    346a:	a6 95       	lsr	r26
    346c:	97 95       	ror	r25
    346e:	87 95       	ror	r24
    3470:	77 95       	ror	r23
    3472:	67 95       	ror	r22
    3474:	ba 95       	dec	r27
    3476:	c9 f7       	brne	.-14     	; 0x346a <__ultoa_invert+0x86>
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	61 05       	cpc	r22, r1
    347c:	71 05       	cpc	r23, r1
    347e:	08 95       	ret
    3480:	9b 01       	movw	r18, r22
    3482:	ac 01       	movw	r20, r24
    3484:	0a 2e       	mov	r0, r26
    3486:	06 94       	lsr	r0
    3488:	57 95       	ror	r21
    348a:	47 95       	ror	r20
    348c:	37 95       	ror	r19
    348e:	27 95       	ror	r18
    3490:	ba 95       	dec	r27
    3492:	c9 f7       	brne	.-14     	; 0x3486 <__ultoa_invert+0xa2>
    3494:	62 0f       	add	r22, r18
    3496:	73 1f       	adc	r23, r19
    3498:	84 1f       	adc	r24, r20
    349a:	95 1f       	adc	r25, r21
    349c:	a0 1d       	adc	r26, r0
    349e:	08 95       	ret

000034a0 <_exit>:
    34a0:	f8 94       	cli

000034a2 <__stop_program>:
    34a2:	ff cf       	rjmp	.-2      	; 0x34a2 <__stop_program>
