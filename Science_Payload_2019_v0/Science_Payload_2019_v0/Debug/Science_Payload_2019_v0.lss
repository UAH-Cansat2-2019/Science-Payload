
Science_Payload_2019_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001514  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  00802000  00802000  00001588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008cf5  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038aa  00000000  00000000  0000a5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003dd5  00000000  00000000  0000de5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001010  00000000  00000000  00011c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002bb9e  00000000  00000000  00012c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f24  00000000  00000000  0003e7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00041706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001304  00000000  00000000  0004198e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c2       	rjmp	.+1108   	; 0x47e <__vector_10>
      2a:	00 00       	nop
      2c:	4b c2       	rjmp	.+1174   	; 0x4c4 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_13>
      38:	c9 c2       	rjmp	.+1426   	; 0x5cc <__vector_14>
      3a:	00 00       	nop
      3c:	ff c2       	rjmp	.+1534   	; 0x63c <__vector_15>
      3e:	00 00       	nop
      40:	35 c3       	rjmp	.+1642   	; 0x6ac <__vector_16>
      42:	00 00       	nop
      44:	6b c3       	rjmp	.+1750   	; 0x71c <__vector_17>
      46:	00 00       	nop
      48:	a1 c3       	rjmp	.+1858   	; 0x78c <__vector_18>
      4a:	00 00       	nop
      4c:	d7 c3       	rjmp	.+1966   	; 0x7fc <__vector_19>
      4e:	00 00       	nop
      50:	0d c4       	rjmp	.+2074   	; 0x86c <__vector_20>
      52:	00 00       	nop
      54:	43 c4       	rjmp	.+2182   	; 0x8dc <__vector_21>
      56:	00 00       	nop
      58:	79 c4       	rjmp	.+2290   	; 0x94c <__vector_22>
      5a:	00 00       	nop
      5c:	af c4       	rjmp	.+2398   	; 0x9bc <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_46>
      bc:	e7 c6       	rjmp	.+3534   	; 0xe8c <__vector_47>
      be:	00 00       	nop
      c0:	1d c7       	rjmp	.+3642   	; 0xefc <__vector_48>
      c2:	00 00       	nop
      c4:	53 c7       	rjmp	.+3750   	; 0xf6c <__vector_49>
      c6:	00 00       	nop
      c8:	89 c7       	rjmp	.+3858   	; 0xfdc <__vector_50>
      ca:	00 00       	nop
      cc:	bf c7       	rjmp	.+3966   	; 0x104c <__vector_51>
      ce:	00 00       	nop
      d0:	f5 c7       	rjmp	.+4074   	; 0x10bc <__vector_52>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	bc c0       	rjmp	.+376    	; 0x296 <__vector_71>
     11e:	00 00       	nop
     120:	f7 c0       	rjmp	.+494    	; 0x310 <__vector_72>
     122:	00 00       	nop
     124:	32 c1       	rjmp	.+612    	; 0x38a <__vector_73>
     126:	00 00       	nop
     128:	6d c1       	rjmp	.+730    	; 0x404 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	7b c4       	rjmp	.+2294   	; 0xa2c <__vector_77>
     136:	00 00       	nop
     138:	b1 c4       	rjmp	.+2402   	; 0xa9c <__vector_78>
     13a:	00 00       	nop
     13c:	e7 c4       	rjmp	.+2510   	; 0xb0c <__vector_79>
     13e:	00 00       	nop
     140:	1d c5       	rjmp	.+2618   	; 0xb7c <__vector_80>
     142:	00 00       	nop
     144:	53 c5       	rjmp	.+2726   	; 0xbec <__vector_81>
     146:	00 00       	nop
     148:	89 c5       	rjmp	.+2834   	; 0xc5c <__vector_82>
     14a:	00 00       	nop
     14c:	bf c5       	rjmp	.+2942   	; 0xccc <__vector_83>
     14e:	00 00       	nop
     150:	f5 c5       	rjmp	.+3050   	; 0xd3c <__vector_84>
     152:	00 00       	nop
     154:	2b c6       	rjmp	.+3158   	; 0xdac <__vector_85>
     156:	00 00       	nop
     158:	61 c6       	rjmp	.+3266   	; 0xe1c <__vector_86>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e4 e1       	ldi	r30, 0x14	; 20
     21c:	f5 e1       	ldi	r31, 0x15	; 21
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 30       	cpi	r26, 0x00	; 0
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a0 e0       	ldi	r26, 0x00	; 0
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a9 34       	cpi	r26, 0x49	; 73
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <main>
     244:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     250:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     254:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     258:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     25c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     260:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     264:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     268:	08 95       	ret

0000026a <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	1f 92       	push	r1
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     274:	9f b7       	in	r25, 0x3f	; 63
     276:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     278:	f8 94       	cli
	return flags;
     27a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     27c:	e8 2f       	mov	r30, r24
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e0 59       	subi	r30, 0x90	; 144
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	60 95       	com	r22
     286:	80 81       	ld	r24, Z
     288:	68 23       	and	r22, r24
     28a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     28c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	08 b6       	in	r0, 0x38	; 56
     2a2:	0f 92       	push	r0
     2a4:	18 be       	out	0x38, r1	; 56
     2a6:	09 b6       	in	r0, 0x39	; 57
     2a8:	0f 92       	push	r0
     2aa:	19 be       	out	0x39, r1	; 57
     2ac:	0b b6       	in	r0, 0x3b	; 59
     2ae:	0f 92       	push	r0
     2b0:	1b be       	out	0x3b, r1	; 59
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     2ca:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     2ce:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     2d2:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <adca_callback>
     2d6:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <adca_callback+0x1>
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	19 95       	eicall
}
     2e2:	ff 91       	pop	r31
     2e4:	ef 91       	pop	r30
     2e6:	bf 91       	pop	r27
     2e8:	af 91       	pop	r26
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	7f 91       	pop	r23
     2f0:	6f 91       	pop	r22
     2f2:	5f 91       	pop	r21
     2f4:	4f 91       	pop	r20
     2f6:	3f 91       	pop	r19
     2f8:	2f 91       	pop	r18
     2fa:	0f 90       	pop	r0
     2fc:	0b be       	out	0x3b, r0	; 59
     2fe:	0f 90       	pop	r0
     300:	09 be       	out	0x39, r0	; 57
     302:	0f 90       	pop	r0
     304:	08 be       	out	0x38, r0	; 56
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	08 b6       	in	r0, 0x38	; 56
     31c:	0f 92       	push	r0
     31e:	18 be       	out	0x38, r1	; 56
     320:	09 b6       	in	r0, 0x39	; 57
     322:	0f 92       	push	r0
     324:	19 be       	out	0x39, r1	; 57
     326:	0b b6       	in	r0, 0x3b	; 59
     328:	0f 92       	push	r0
     32a:	1b be       	out	0x3b, r1	; 59
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     344:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     348:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     34c:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <adca_callback>
     350:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <adca_callback+0x1>
     354:	62 e0       	ldi	r22, 0x02	; 2
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	19 95       	eicall
}
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	7f 91       	pop	r23
     36a:	6f 91       	pop	r22
     36c:	5f 91       	pop	r21
     36e:	4f 91       	pop	r20
     370:	3f 91       	pop	r19
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0b be       	out	0x3b, r0	; 59
     378:	0f 90       	pop	r0
     37a:	09 be       	out	0x39, r0	; 57
     37c:	0f 90       	pop	r0
     37e:	08 be       	out	0x38, r0	; 56
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	08 b6       	in	r0, 0x38	; 56
     396:	0f 92       	push	r0
     398:	18 be       	out	0x38, r1	; 56
     39a:	09 b6       	in	r0, 0x39	; 57
     39c:	0f 92       	push	r0
     39e:	19 be       	out	0x39, r1	; 57
     3a0:	0b b6       	in	r0, 0x3b	; 59
     3a2:	0f 92       	push	r0
     3a4:	1b be       	out	0x3b, r1	; 59
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     3be:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     3c2:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     3c6:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <adca_callback>
     3ca:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <adca_callback+0x1>
     3ce:	64 e0       	ldi	r22, 0x04	; 4
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	19 95       	eicall
}
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0b be       	out	0x3b, r0	; 59
     3f2:	0f 90       	pop	r0
     3f4:	09 be       	out	0x39, r0	; 57
     3f6:	0f 90       	pop	r0
     3f8:	08 be       	out	0x38, r0	; 56
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	08 b6       	in	r0, 0x38	; 56
     410:	0f 92       	push	r0
     412:	18 be       	out	0x38, r1	; 56
     414:	09 b6       	in	r0, 0x39	; 57
     416:	0f 92       	push	r0
     418:	19 be       	out	0x39, r1	; 57
     41a:	0b b6       	in	r0, 0x3b	; 59
     41c:	0f 92       	push	r0
     41e:	1b be       	out	0x3b, r1	; 59
     420:	2f 93       	push	r18
     422:	3f 93       	push	r19
     424:	4f 93       	push	r20
     426:	5f 93       	push	r21
     428:	6f 93       	push	r22
     42a:	7f 93       	push	r23
     42c:	8f 93       	push	r24
     42e:	9f 93       	push	r25
     430:	af 93       	push	r26
     432:	bf 93       	push	r27
     434:	ef 93       	push	r30
     436:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     438:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     43c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     440:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <adca_callback>
     444:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <adca_callback+0x1>
     448:	68 e0       	ldi	r22, 0x08	; 8
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	19 95       	eicall
}
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	bf 91       	pop	r27
     456:	af 91       	pop	r26
     458:	9f 91       	pop	r25
     45a:	8f 91       	pop	r24
     45c:	7f 91       	pop	r23
     45e:	6f 91       	pop	r22
     460:	5f 91       	pop	r21
     462:	4f 91       	pop	r20
     464:	3f 91       	pop	r19
     466:	2f 91       	pop	r18
     468:	0f 90       	pop	r0
     46a:	0b be       	out	0x3b, r0	; 59
     46c:	0f 90       	pop	r0
     46e:	09 be       	out	0x39, r0	; 57
     470:	0f 90       	pop	r0
     472:	08 be       	out	0x38, r0	; 56
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	08 b6       	in	r0, 0x38	; 56
     48a:	0f 92       	push	r0
     48c:	18 be       	out	0x38, r1	; 56
     48e:	0b b6       	in	r0, 0x3b	; 59
     490:	0f 92       	push	r0
     492:	1b be       	out	0x3b, r1	; 59
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
	rtc_data.counter_high++;
     49c:	e1 e4       	ldi	r30, 0x41	; 65
     49e:	f0 e2       	ldi	r31, 0x20	; 32
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	80 83       	st	Z, r24
     4a8:	91 83       	std	Z+1, r25	; 0x01
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	0b be       	out	0x3b, r0	; 59
     4b6:	0f 90       	pop	r0
     4b8:	08 be       	out	0x38, r0	; 56
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	08 b6       	in	r0, 0x38	; 56
     4d0:	0f 92       	push	r0
     4d2:	18 be       	out	0x38, r1	; 56
     4d4:	09 b6       	in	r0, 0x39	; 57
     4d6:	0f 92       	push	r0
     4d8:	19 be       	out	0x39, r1	; 57
     4da:	0b b6       	in	r0, 0x3b	; 59
     4dc:	0f 92       	push	r0
     4de:	1b be       	out	0x3b, r1	; 59
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	7f 93       	push	r23
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     504:	e1 e4       	ldi	r30, 0x41	; 65
     506:	f0 e2       	ldi	r31, 0x20	; 32
     508:	80 81       	ld	r24, Z
     50a:	91 81       	ldd	r25, Z+1	; 0x01
     50c:	22 81       	ldd	r18, Z+2	; 0x02
     50e:	33 81       	ldd	r19, Z+3	; 0x03
     510:	82 17       	cp	r24, r18
     512:	93 07       	cpc	r25, r19
     514:	f0 f1       	brcs	.+124    	; 0x592 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     51c:	e0 91 47 20 	lds	r30, 0x2047	; 0x802047 <rtc_data+0x6>
     520:	f0 91 48 20 	lds	r31, 0x2048	; 0x802048 <rtc_data+0x7>
     524:	30 97       	sbiw	r30, 0x00	; 0
     526:	a9 f1       	breq	.+106    	; 0x592 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     528:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     52c:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	dc 01       	movw	r26, r24
     536:	99 27       	eor	r25, r25
     538:	88 27       	eor	r24, r24
     53a:	ab 01       	movw	r20, r22
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	8c 01       	movw	r16, r24
     542:	9d 01       	movw	r18, r26
     544:	04 2b       	or	r16, r20
     546:	15 2b       	or	r17, r21
     548:	26 2b       	or	r18, r22
     54a:	37 2b       	or	r19, r23
     54c:	c9 01       	movw	r24, r18
     54e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     550:	a1 e4       	ldi	r26, 0x41	; 65
     552:	b0 e2       	ldi	r27, 0x20	; 32
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	0d 91       	ld	r16, X+
     558:	1c 91       	ld	r17, X
     55a:	13 97       	sbiw	r26, 0x03	; 3
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	98 01       	movw	r18, r16
     562:	11 27       	eor	r17, r17
     564:	00 27       	eor	r16, r16
     566:	14 96       	adiw	r26, 0x04	; 4
     568:	cd 90       	ld	r12, X+
     56a:	dc 90       	ld	r13, X
     56c:	15 97       	sbiw	r26, 0x05	; 5
     56e:	e1 2c       	mov	r14, r1
     570:	f1 2c       	mov	r15, r1
     572:	0c 29       	or	r16, r12
     574:	1d 29       	or	r17, r13
     576:	2e 29       	or	r18, r14
     578:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     57a:	06 17       	cp	r16, r22
     57c:	17 07       	cpc	r17, r23
     57e:	28 07       	cpc	r18, r24
     580:	39 07       	cpc	r19, r25
     582:	30 f0       	brcs	.+12     	; 0x590 <__vector_11+0xcc>
				count = alarm + 1;
     584:	c9 01       	movw	r24, r18
     586:	b8 01       	movw	r22, r16
     588:	6f 5f       	subi	r22, 0xFF	; 255
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	8f 4f       	sbci	r24, 0xFF	; 255
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     590:	19 95       	eicall
		}
	}
}
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	0f 90       	pop	r0
     5b8:	0b be       	out	0x3b, r0	; 59
     5ba:	0f 90       	pop	r0
     5bc:	09 be       	out	0x39, r0	; 57
     5be:	0f 90       	pop	r0
     5c0:	08 be       	out	0x38, r0	; 56
     5c2:	0f 90       	pop	r0
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	0f 90       	pop	r0
     5c8:	1f 90       	pop	r1
     5ca:	18 95       	reti

000005cc <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	08 b6       	in	r0, 0x38	; 56
     5d8:	0f 92       	push	r0
     5da:	18 be       	out	0x38, r1	; 56
     5dc:	09 b6       	in	r0, 0x39	; 57
     5de:	0f 92       	push	r0
     5e0:	19 be       	out	0x39, r1	; 57
     5e2:	0b b6       	in	r0, 0x3b	; 59
     5e4:	0f 92       	push	r0
     5e6:	1b be       	out	0x3b, r1	; 59
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     600:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcc0_ovf_callback>
     604:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcc0_ovf_callback+0x1>
     608:	30 97       	sbiw	r30, 0x00	; 0
     60a:	09 f0       	breq	.+2      	; 0x60e <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     60c:	19 95       	eicall
	}
}
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	bf 91       	pop	r27
     614:	af 91       	pop	r26
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	7f 91       	pop	r23
     61c:	6f 91       	pop	r22
     61e:	5f 91       	pop	r21
     620:	4f 91       	pop	r20
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	09 be       	out	0x39, r0	; 57
     62e:	0f 90       	pop	r0
     630:	08 be       	out	0x38, r0	; 56
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	08 b6       	in	r0, 0x38	; 56
     648:	0f 92       	push	r0
     64a:	18 be       	out	0x38, r1	; 56
     64c:	09 b6       	in	r0, 0x39	; 57
     64e:	0f 92       	push	r0
     650:	19 be       	out	0x39, r1	; 57
     652:	0b b6       	in	r0, 0x3b	; 59
     654:	0f 92       	push	r0
     656:	1b be       	out	0x3b, r1	; 59
     658:	2f 93       	push	r18
     65a:	3f 93       	push	r19
     65c:	4f 93       	push	r20
     65e:	5f 93       	push	r21
     660:	6f 93       	push	r22
     662:	7f 93       	push	r23
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     670:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcc0_err_callback>
     674:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcc0_err_callback+0x1>
     678:	30 97       	sbiw	r30, 0x00	; 0
     67a:	09 f0       	breq	.+2      	; 0x67e <__vector_15+0x42>
		tc_tcc0_err_callback();
     67c:	19 95       	eicall
	}
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0b be       	out	0x3b, r0	; 59
     69a:	0f 90       	pop	r0
     69c:	09 be       	out	0x39, r0	; 57
     69e:	0f 90       	pop	r0
     6a0:	08 be       	out	0x38, r0	; 56
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0
     6a8:	1f 90       	pop	r1
     6aa:	18 95       	reti

000006ac <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     6ac:	1f 92       	push	r1
     6ae:	0f 92       	push	r0
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	0f 92       	push	r0
     6b4:	11 24       	eor	r1, r1
     6b6:	08 b6       	in	r0, 0x38	; 56
     6b8:	0f 92       	push	r0
     6ba:	18 be       	out	0x38, r1	; 56
     6bc:	09 b6       	in	r0, 0x39	; 57
     6be:	0f 92       	push	r0
     6c0:	19 be       	out	0x39, r1	; 57
     6c2:	0b b6       	in	r0, 0x3b	; 59
     6c4:	0f 92       	push	r0
     6c6:	1b be       	out	0x3b, r1	; 59
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	4f 93       	push	r20
     6ce:	5f 93       	push	r21
     6d0:	6f 93       	push	r22
     6d2:	7f 93       	push	r23
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27
     6dc:	ef 93       	push	r30
     6de:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     6e0:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcc0_cca_callback>
     6e4:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcc0_cca_callback+0x1>
     6e8:	30 97       	sbiw	r30, 0x00	; 0
     6ea:	09 f0       	breq	.+2      	; 0x6ee <__vector_16+0x42>
		tc_tcc0_cca_callback();
     6ec:	19 95       	eicall
	}
}
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	7f 91       	pop	r23
     6fc:	6f 91       	pop	r22
     6fe:	5f 91       	pop	r21
     700:	4f 91       	pop	r20
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0b be       	out	0x3b, r0	; 59
     70a:	0f 90       	pop	r0
     70c:	09 be       	out	0x39, r0	; 57
     70e:	0f 90       	pop	r0
     710:	08 be       	out	0x38, r0	; 56
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	08 b6       	in	r0, 0x38	; 56
     728:	0f 92       	push	r0
     72a:	18 be       	out	0x38, r1	; 56
     72c:	09 b6       	in	r0, 0x39	; 57
     72e:	0f 92       	push	r0
     730:	19 be       	out	0x39, r1	; 57
     732:	0b b6       	in	r0, 0x3b	; 59
     734:	0f 92       	push	r0
     736:	1b be       	out	0x3b, r1	; 59
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     750:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcc0_ccb_callback>
     754:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcc0_ccb_callback+0x1>
     758:	30 97       	sbiw	r30, 0x00	; 0
     75a:	09 f0       	breq	.+2      	; 0x75e <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     75c:	19 95       	eicall
	}
}
     75e:	ff 91       	pop	r31
     760:	ef 91       	pop	r30
     762:	bf 91       	pop	r27
     764:	af 91       	pop	r26
     766:	9f 91       	pop	r25
     768:	8f 91       	pop	r24
     76a:	7f 91       	pop	r23
     76c:	6f 91       	pop	r22
     76e:	5f 91       	pop	r21
     770:	4f 91       	pop	r20
     772:	3f 91       	pop	r19
     774:	2f 91       	pop	r18
     776:	0f 90       	pop	r0
     778:	0b be       	out	0x3b, r0	; 59
     77a:	0f 90       	pop	r0
     77c:	09 be       	out	0x39, r0	; 57
     77e:	0f 90       	pop	r0
     780:	08 be       	out	0x38, r0	; 56
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	08 b6       	in	r0, 0x38	; 56
     798:	0f 92       	push	r0
     79a:	18 be       	out	0x38, r1	; 56
     79c:	09 b6       	in	r0, 0x39	; 57
     79e:	0f 92       	push	r0
     7a0:	19 be       	out	0x39, r1	; 57
     7a2:	0b b6       	in	r0, 0x3b	; 59
     7a4:	0f 92       	push	r0
     7a6:	1b be       	out	0x3b, r1	; 59
     7a8:	2f 93       	push	r18
     7aa:	3f 93       	push	r19
     7ac:	4f 93       	push	r20
     7ae:	5f 93       	push	r21
     7b0:	6f 93       	push	r22
     7b2:	7f 93       	push	r23
     7b4:	8f 93       	push	r24
     7b6:	9f 93       	push	r25
     7b8:	af 93       	push	r26
     7ba:	bf 93       	push	r27
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     7c0:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcc0_ccc_callback>
     7c4:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcc0_ccc_callback+0x1>
     7c8:	30 97       	sbiw	r30, 0x00	; 0
     7ca:	09 f0       	breq	.+2      	; 0x7ce <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     7cc:	19 95       	eicall
	}
}
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	7f 91       	pop	r23
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	0f 90       	pop	r0
     7e8:	0b be       	out	0x3b, r0	; 59
     7ea:	0f 90       	pop	r0
     7ec:	09 be       	out	0x39, r0	; 57
     7ee:	0f 90       	pop	r0
     7f0:	08 be       	out	0x38, r0	; 56
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	08 b6       	in	r0, 0x38	; 56
     808:	0f 92       	push	r0
     80a:	18 be       	out	0x38, r1	; 56
     80c:	09 b6       	in	r0, 0x39	; 57
     80e:	0f 92       	push	r0
     810:	19 be       	out	0x39, r1	; 57
     812:	0b b6       	in	r0, 0x3b	; 59
     814:	0f 92       	push	r0
     816:	1b be       	out	0x3b, r1	; 59
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     830:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcc0_ccd_callback>
     834:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcc0_ccd_callback+0x1>
     838:	30 97       	sbiw	r30, 0x00	; 0
     83a:	09 f0       	breq	.+2      	; 0x83e <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     83c:	19 95       	eicall
	}
}
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	bf 91       	pop	r27
     844:	af 91       	pop	r26
     846:	9f 91       	pop	r25
     848:	8f 91       	pop	r24
     84a:	7f 91       	pop	r23
     84c:	6f 91       	pop	r22
     84e:	5f 91       	pop	r21
     850:	4f 91       	pop	r20
     852:	3f 91       	pop	r19
     854:	2f 91       	pop	r18
     856:	0f 90       	pop	r0
     858:	0b be       	out	0x3b, r0	; 59
     85a:	0f 90       	pop	r0
     85c:	09 be       	out	0x39, r0	; 57
     85e:	0f 90       	pop	r0
     860:	08 be       	out	0x38, r0	; 56
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	08 b6       	in	r0, 0x38	; 56
     878:	0f 92       	push	r0
     87a:	18 be       	out	0x38, r1	; 56
     87c:	09 b6       	in	r0, 0x39	; 57
     87e:	0f 92       	push	r0
     880:	19 be       	out	0x39, r1	; 57
     882:	0b b6       	in	r0, 0x3b	; 59
     884:	0f 92       	push	r0
     886:	1b be       	out	0x3b, r1	; 59
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     8a0:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcc1_ovf_callback>
     8a4:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcc1_ovf_callback+0x1>
     8a8:	30 97       	sbiw	r30, 0x00	; 0
     8aa:	09 f0       	breq	.+2      	; 0x8ae <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     8ac:	19 95       	eicall
	}
}
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	bf 91       	pop	r27
     8b4:	af 91       	pop	r26
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	7f 91       	pop	r23
     8bc:	6f 91       	pop	r22
     8be:	5f 91       	pop	r21
     8c0:	4f 91       	pop	r20
     8c2:	3f 91       	pop	r19
     8c4:	2f 91       	pop	r18
     8c6:	0f 90       	pop	r0
     8c8:	0b be       	out	0x3b, r0	; 59
     8ca:	0f 90       	pop	r0
     8cc:	09 be       	out	0x39, r0	; 57
     8ce:	0f 90       	pop	r0
     8d0:	08 be       	out	0x38, r0	; 56
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	0f 90       	pop	r0
     8d8:	1f 90       	pop	r1
     8da:	18 95       	reti

000008dc <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	08 b6       	in	r0, 0x38	; 56
     8e8:	0f 92       	push	r0
     8ea:	18 be       	out	0x38, r1	; 56
     8ec:	09 b6       	in	r0, 0x39	; 57
     8ee:	0f 92       	push	r0
     8f0:	19 be       	out	0x39, r1	; 57
     8f2:	0b b6       	in	r0, 0x3b	; 59
     8f4:	0f 92       	push	r0
     8f6:	1b be       	out	0x3b, r1	; 59
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     910:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcc1_err_callback>
     914:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcc1_err_callback+0x1>
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_21+0x42>
		tc_tcc1_err_callback();
     91c:	19 95       	eicall
	}
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0b be       	out	0x3b, r0	; 59
     93a:	0f 90       	pop	r0
     93c:	09 be       	out	0x39, r0	; 57
     93e:	0f 90       	pop	r0
     940:	08 be       	out	0x38, r0	; 56
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	08 b6       	in	r0, 0x38	; 56
     958:	0f 92       	push	r0
     95a:	18 be       	out	0x38, r1	; 56
     95c:	09 b6       	in	r0, 0x39	; 57
     95e:	0f 92       	push	r0
     960:	19 be       	out	0x39, r1	; 57
     962:	0b b6       	in	r0, 0x3b	; 59
     964:	0f 92       	push	r0
     966:	1b be       	out	0x3b, r1	; 59
     968:	2f 93       	push	r18
     96a:	3f 93       	push	r19
     96c:	4f 93       	push	r20
     96e:	5f 93       	push	r21
     970:	6f 93       	push	r22
     972:	7f 93       	push	r23
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	af 93       	push	r26
     97a:	bf 93       	push	r27
     97c:	ef 93       	push	r30
     97e:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     980:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcc1_cca_callback>
     984:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcc1_cca_callback+0x1>
     988:	30 97       	sbiw	r30, 0x00	; 0
     98a:	09 f0       	breq	.+2      	; 0x98e <__vector_22+0x42>
		tc_tcc1_cca_callback();
     98c:	19 95       	eicall
	}
}
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	09 be       	out	0x39, r0	; 57
     9ae:	0f 90       	pop	r0
     9b0:	08 be       	out	0x38, r0	; 56
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	08 b6       	in	r0, 0x38	; 56
     9c8:	0f 92       	push	r0
     9ca:	18 be       	out	0x38, r1	; 56
     9cc:	09 b6       	in	r0, 0x39	; 57
     9ce:	0f 92       	push	r0
     9d0:	19 be       	out	0x39, r1	; 57
     9d2:	0b b6       	in	r0, 0x3b	; 59
     9d4:	0f 92       	push	r0
     9d6:	1b be       	out	0x3b, r1	; 59
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     9f0:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tcc1_ccb_callback>
     9f4:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tcc1_ccb_callback+0x1>
     9f8:	30 97       	sbiw	r30, 0x00	; 0
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     9fc:	19 95       	eicall
	}
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0b be       	out	0x3b, r0	; 59
     a1a:	0f 90       	pop	r0
     a1c:	09 be       	out	0x39, r0	; 57
     a1e:	0f 90       	pop	r0
     a20:	08 be       	out	0x38, r0	; 56
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	08 b6       	in	r0, 0x38	; 56
     a38:	0f 92       	push	r0
     a3a:	18 be       	out	0x38, r1	; 56
     a3c:	09 b6       	in	r0, 0x39	; 57
     a3e:	0f 92       	push	r0
     a40:	19 be       	out	0x39, r1	; 57
     a42:	0b b6       	in	r0, 0x3b	; 59
     a44:	0f 92       	push	r0
     a46:	1b be       	out	0x3b, r1	; 59
     a48:	2f 93       	push	r18
     a4a:	3f 93       	push	r19
     a4c:	4f 93       	push	r20
     a4e:	5f 93       	push	r21
     a50:	6f 93       	push	r22
     a52:	7f 93       	push	r23
     a54:	8f 93       	push	r24
     a56:	9f 93       	push	r25
     a58:	af 93       	push	r26
     a5a:	bf 93       	push	r27
     a5c:	ef 93       	push	r30
     a5e:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     a60:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tcd0_ovf_callback>
     a64:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tcd0_ovf_callback+0x1>
     a68:	30 97       	sbiw	r30, 0x00	; 0
     a6a:	09 f0       	breq	.+2      	; 0xa6e <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     a6c:	19 95       	eicall
	}
}
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0b be       	out	0x3b, r0	; 59
     a8a:	0f 90       	pop	r0
     a8c:	09 be       	out	0x39, r0	; 57
     a8e:	0f 90       	pop	r0
     a90:	08 be       	out	0x38, r0	; 56
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	08 b6       	in	r0, 0x38	; 56
     aa8:	0f 92       	push	r0
     aaa:	18 be       	out	0x38, r1	; 56
     aac:	09 b6       	in	r0, 0x39	; 57
     aae:	0f 92       	push	r0
     ab0:	19 be       	out	0x39, r1	; 57
     ab2:	0b b6       	in	r0, 0x3b	; 59
     ab4:	0f 92       	push	r0
     ab6:	1b be       	out	0x3b, r1	; 59
     ab8:	2f 93       	push	r18
     aba:	3f 93       	push	r19
     abc:	4f 93       	push	r20
     abe:	5f 93       	push	r21
     ac0:	6f 93       	push	r22
     ac2:	7f 93       	push	r23
     ac4:	8f 93       	push	r24
     ac6:	9f 93       	push	r25
     ac8:	af 93       	push	r26
     aca:	bf 93       	push	r27
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     ad0:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tcd0_err_callback>
     ad4:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tcd0_err_callback+0x1>
     ad8:	30 97       	sbiw	r30, 0x00	; 0
     ada:	09 f0       	breq	.+2      	; 0xade <__vector_78+0x42>
		tc_tcd0_err_callback();
     adc:	19 95       	eicall
	}
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0b be       	out	0x3b, r0	; 59
     afa:	0f 90       	pop	r0
     afc:	09 be       	out	0x39, r0	; 57
     afe:	0f 90       	pop	r0
     b00:	08 be       	out	0x38, r0	; 56
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	0f 90       	pop	r0
     b08:	1f 90       	pop	r1
     b0a:	18 95       	reti

00000b0c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     b0c:	1f 92       	push	r1
     b0e:	0f 92       	push	r0
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	0f 92       	push	r0
     b14:	11 24       	eor	r1, r1
     b16:	08 b6       	in	r0, 0x38	; 56
     b18:	0f 92       	push	r0
     b1a:	18 be       	out	0x38, r1	; 56
     b1c:	09 b6       	in	r0, 0x39	; 57
     b1e:	0f 92       	push	r0
     b20:	19 be       	out	0x39, r1	; 57
     b22:	0b b6       	in	r0, 0x3b	; 59
     b24:	0f 92       	push	r0
     b26:	1b be       	out	0x3b, r1	; 59
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     b40:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tcd0_cca_callback>
     b44:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tcd0_cca_callback+0x1>
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	09 f0       	breq	.+2      	; 0xb4e <__vector_79+0x42>
		tc_tcd0_cca_callback();
     b4c:	19 95       	eicall
	}
}
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0b be       	out	0x3b, r0	; 59
     b6a:	0f 90       	pop	r0
     b6c:	09 be       	out	0x39, r0	; 57
     b6e:	0f 90       	pop	r0
     b70:	08 be       	out	0x38, r0	; 56
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	08 b6       	in	r0, 0x38	; 56
     b88:	0f 92       	push	r0
     b8a:	18 be       	out	0x38, r1	; 56
     b8c:	09 b6       	in	r0, 0x39	; 57
     b8e:	0f 92       	push	r0
     b90:	19 be       	out	0x39, r1	; 57
     b92:	0b b6       	in	r0, 0x3b	; 59
     b94:	0f 92       	push	r0
     b96:	1b be       	out	0x3b, r1	; 59
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     bb0:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tcd0_ccb_callback>
     bb4:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tcd0_ccb_callback+0x1>
     bb8:	30 97       	sbiw	r30, 0x00	; 0
     bba:	09 f0       	breq	.+2      	; 0xbbe <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     bbc:	19 95       	eicall
	}
}
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0b be       	out	0x3b, r0	; 59
     bda:	0f 90       	pop	r0
     bdc:	09 be       	out	0x39, r0	; 57
     bde:	0f 90       	pop	r0
     be0:	08 be       	out	0x38, r0	; 56
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	08 b6       	in	r0, 0x38	; 56
     bf8:	0f 92       	push	r0
     bfa:	18 be       	out	0x38, r1	; 56
     bfc:	09 b6       	in	r0, 0x39	; 57
     bfe:	0f 92       	push	r0
     c00:	19 be       	out	0x39, r1	; 57
     c02:	0b b6       	in	r0, 0x3b	; 59
     c04:	0f 92       	push	r0
     c06:	1b be       	out	0x3b, r1	; 59
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     c20:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tcd0_ccc_callback>
     c24:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tcd0_ccc_callback+0x1>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     c2c:	19 95       	eicall
	}
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	09 be       	out	0x39, r0	; 57
     c4e:	0f 90       	pop	r0
     c50:	08 be       	out	0x38, r0	; 56
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	08 b6       	in	r0, 0x38	; 56
     c68:	0f 92       	push	r0
     c6a:	18 be       	out	0x38, r1	; 56
     c6c:	09 b6       	in	r0, 0x39	; 57
     c6e:	0f 92       	push	r0
     c70:	19 be       	out	0x39, r1	; 57
     c72:	0b b6       	in	r0, 0x3b	; 59
     c74:	0f 92       	push	r0
     c76:	1b be       	out	0x3b, r1	; 59
     c78:	2f 93       	push	r18
     c7a:	3f 93       	push	r19
     c7c:	4f 93       	push	r20
     c7e:	5f 93       	push	r21
     c80:	6f 93       	push	r22
     c82:	7f 93       	push	r23
     c84:	8f 93       	push	r24
     c86:	9f 93       	push	r25
     c88:	af 93       	push	r26
     c8a:	bf 93       	push	r27
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     c90:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tcd0_ccd_callback>
     c94:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tcd0_ccd_callback+0x1>
     c98:	30 97       	sbiw	r30, 0x00	; 0
     c9a:	09 f0       	breq	.+2      	; 0xc9e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     c9c:	19 95       	eicall
	}
}
     c9e:	ff 91       	pop	r31
     ca0:	ef 91       	pop	r30
     ca2:	bf 91       	pop	r27
     ca4:	af 91       	pop	r26
     ca6:	9f 91       	pop	r25
     ca8:	8f 91       	pop	r24
     caa:	7f 91       	pop	r23
     cac:	6f 91       	pop	r22
     cae:	5f 91       	pop	r21
     cb0:	4f 91       	pop	r20
     cb2:	3f 91       	pop	r19
     cb4:	2f 91       	pop	r18
     cb6:	0f 90       	pop	r0
     cb8:	0b be       	out	0x3b, r0	; 59
     cba:	0f 90       	pop	r0
     cbc:	09 be       	out	0x39, r0	; 57
     cbe:	0f 90       	pop	r0
     cc0:	08 be       	out	0x38, r0	; 56
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	08 b6       	in	r0, 0x38	; 56
     cd8:	0f 92       	push	r0
     cda:	18 be       	out	0x38, r1	; 56
     cdc:	09 b6       	in	r0, 0x39	; 57
     cde:	0f 92       	push	r0
     ce0:	19 be       	out	0x39, r1	; 57
     ce2:	0b b6       	in	r0, 0x3b	; 59
     ce4:	0f 92       	push	r0
     ce6:	1b be       	out	0x3b, r1	; 59
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     d00:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <tc_tcd1_ovf_callback>
     d04:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <tc_tcd1_ovf_callback+0x1>
     d08:	30 97       	sbiw	r30, 0x00	; 0
     d0a:	09 f0       	breq	.+2      	; 0xd0e <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     d0c:	19 95       	eicall
	}
}
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	7f 91       	pop	r23
     d1c:	6f 91       	pop	r22
     d1e:	5f 91       	pop	r21
     d20:	4f 91       	pop	r20
     d22:	3f 91       	pop	r19
     d24:	2f 91       	pop	r18
     d26:	0f 90       	pop	r0
     d28:	0b be       	out	0x3b, r0	; 59
     d2a:	0f 90       	pop	r0
     d2c:	09 be       	out	0x39, r0	; 57
     d2e:	0f 90       	pop	r0
     d30:	08 be       	out	0x38, r0	; 56
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	08 b6       	in	r0, 0x38	; 56
     d48:	0f 92       	push	r0
     d4a:	18 be       	out	0x38, r1	; 56
     d4c:	09 b6       	in	r0, 0x39	; 57
     d4e:	0f 92       	push	r0
     d50:	19 be       	out	0x39, r1	; 57
     d52:	0b b6       	in	r0, 0x3b	; 59
     d54:	0f 92       	push	r0
     d56:	1b be       	out	0x3b, r1	; 59
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     d70:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <tc_tcd1_err_callback>
     d74:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <tc_tcd1_err_callback+0x1>
     d78:	30 97       	sbiw	r30, 0x00	; 0
     d7a:	09 f0       	breq	.+2      	; 0xd7e <__vector_84+0x42>
		tc_tcd1_err_callback();
     d7c:	19 95       	eicall
	}
}
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	7f 91       	pop	r23
     d8c:	6f 91       	pop	r22
     d8e:	5f 91       	pop	r21
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0b be       	out	0x3b, r0	; 59
     d9a:	0f 90       	pop	r0
     d9c:	09 be       	out	0x39, r0	; 57
     d9e:	0f 90       	pop	r0
     da0:	08 be       	out	0x38, r0	; 56
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	08 b6       	in	r0, 0x38	; 56
     db8:	0f 92       	push	r0
     dba:	18 be       	out	0x38, r1	; 56
     dbc:	09 b6       	in	r0, 0x39	; 57
     dbe:	0f 92       	push	r0
     dc0:	19 be       	out	0x39, r1	; 57
     dc2:	0b b6       	in	r0, 0x3b	; 59
     dc4:	0f 92       	push	r0
     dc6:	1b be       	out	0x3b, r1	; 59
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	ef 93       	push	r30
     dde:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     de0:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <tc_tcd1_cca_callback>
     de4:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <tc_tcd1_cca_callback+0x1>
     de8:	30 97       	sbiw	r30, 0x00	; 0
     dea:	09 f0       	breq	.+2      	; 0xdee <__vector_85+0x42>
		tc_tcd1_cca_callback();
     dec:	19 95       	eicall
	}
}
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	09 be       	out	0x39, r0	; 57
     e0e:	0f 90       	pop	r0
     e10:	08 be       	out	0x38, r0	; 56
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	08 b6       	in	r0, 0x38	; 56
     e28:	0f 92       	push	r0
     e2a:	18 be       	out	0x38, r1	; 56
     e2c:	09 b6       	in	r0, 0x39	; 57
     e2e:	0f 92       	push	r0
     e30:	19 be       	out	0x39, r1	; 57
     e32:	0b b6       	in	r0, 0x3b	; 59
     e34:	0f 92       	push	r0
     e36:	1b be       	out	0x3b, r1	; 59
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     e50:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <tc_tcd1_ccb_callback>
     e54:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <tc_tcd1_ccb_callback+0x1>
     e58:	30 97       	sbiw	r30, 0x00	; 0
     e5a:	09 f0       	breq	.+2      	; 0xe5e <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     e5c:	19 95       	eicall
	}
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0b be       	out	0x3b, r0	; 59
     e7a:	0f 90       	pop	r0
     e7c:	09 be       	out	0x39, r0	; 57
     e7e:	0f 90       	pop	r0
     e80:	08 be       	out	0x38, r0	; 56
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     e8c:	1f 92       	push	r1
     e8e:	0f 92       	push	r0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
     e96:	08 b6       	in	r0, 0x38	; 56
     e98:	0f 92       	push	r0
     e9a:	18 be       	out	0x38, r1	; 56
     e9c:	09 b6       	in	r0, 0x39	; 57
     e9e:	0f 92       	push	r0
     ea0:	19 be       	out	0x39, r1	; 57
     ea2:	0b b6       	in	r0, 0x3b	; 59
     ea4:	0f 92       	push	r0
     ea6:	1b be       	out	0x3b, r1	; 59
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     ec0:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <tc_tce0_ovf_callback>
     ec4:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <tc_tce0_ovf_callback+0x1>
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	09 f0       	breq	.+2      	; 0xece <__vector_47+0x42>
		tc_tce0_ovf_callback();
     ecc:	19 95       	eicall
	}
}
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	0f 90       	pop	r0
     ee8:	0b be       	out	0x3b, r0	; 59
     eea:	0f 90       	pop	r0
     eec:	09 be       	out	0x39, r0	; 57
     eee:	0f 90       	pop	r0
     ef0:	08 be       	out	0x38, r0	; 56
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	08 b6       	in	r0, 0x38	; 56
     f08:	0f 92       	push	r0
     f0a:	18 be       	out	0x38, r1	; 56
     f0c:	09 b6       	in	r0, 0x39	; 57
     f0e:	0f 92       	push	r0
     f10:	19 be       	out	0x39, r1	; 57
     f12:	0b b6       	in	r0, 0x3b	; 59
     f14:	0f 92       	push	r0
     f16:	1b be       	out	0x3b, r1	; 59
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     f30:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <tc_tce0_err_callback>
     f34:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <tc_tce0_err_callback+0x1>
     f38:	30 97       	sbiw	r30, 0x00	; 0
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__vector_48+0x42>
		tc_tce0_err_callback();
     f3c:	19 95       	eicall
	}
}
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0b be       	out	0x3b, r0	; 59
     f5a:	0f 90       	pop	r0
     f5c:	09 be       	out	0x39, r0	; 57
     f5e:	0f 90       	pop	r0
     f60:	08 be       	out	0x38, r0	; 56
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	08 b6       	in	r0, 0x38	; 56
     f78:	0f 92       	push	r0
     f7a:	18 be       	out	0x38, r1	; 56
     f7c:	09 b6       	in	r0, 0x39	; 57
     f7e:	0f 92       	push	r0
     f80:	19 be       	out	0x39, r1	; 57
     f82:	0b b6       	in	r0, 0x3b	; 59
     f84:	0f 92       	push	r0
     f86:	1b be       	out	0x3b, r1	; 59
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     fa0:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <tc_tce0_cca_callback>
     fa4:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <tc_tce0_cca_callback+0x1>
     fa8:	30 97       	sbiw	r30, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <__vector_49+0x42>
		tc_tce0_cca_callback();
     fac:	19 95       	eicall
	}
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0b be       	out	0x3b, r0	; 59
     fca:	0f 90       	pop	r0
     fcc:	09 be       	out	0x39, r0	; 57
     fce:	0f 90       	pop	r0
     fd0:	08 be       	out	0x38, r0	; 56
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	0f 90       	pop	r0
     fd8:	1f 90       	pop	r1
     fda:	18 95       	reti

00000fdc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     fdc:	1f 92       	push	r1
     fde:	0f 92       	push	r0
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	0f 92       	push	r0
     fe4:	11 24       	eor	r1, r1
     fe6:	08 b6       	in	r0, 0x38	; 56
     fe8:	0f 92       	push	r0
     fea:	18 be       	out	0x38, r1	; 56
     fec:	09 b6       	in	r0, 0x39	; 57
     fee:	0f 92       	push	r0
     ff0:	19 be       	out	0x39, r1	; 57
     ff2:	0b b6       	in	r0, 0x3b	; 59
     ff4:	0f 92       	push	r0
     ff6:	1b be       	out	0x3b, r1	; 59
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1010:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <tc_tce0_ccb_callback>
    1014:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <tc_tce0_ccb_callback+0x1>
    1018:	30 97       	sbiw	r30, 0x00	; 0
    101a:	09 f0       	breq	.+2      	; 0x101e <__vector_50+0x42>
		tc_tce0_ccb_callback();
    101c:	19 95       	eicall
	}
}
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0b be       	out	0x3b, r0	; 59
    103a:	0f 90       	pop	r0
    103c:	09 be       	out	0x39, r0	; 57
    103e:	0f 90       	pop	r0
    1040:	08 be       	out	0x38, r0	; 56
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	08 b6       	in	r0, 0x38	; 56
    1058:	0f 92       	push	r0
    105a:	18 be       	out	0x38, r1	; 56
    105c:	09 b6       	in	r0, 0x39	; 57
    105e:	0f 92       	push	r0
    1060:	19 be       	out	0x39, r1	; 57
    1062:	0b b6       	in	r0, 0x3b	; 59
    1064:	0f 92       	push	r0
    1066:	1b be       	out	0x3b, r1	; 59
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1080:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <tc_tce0_ccc_callback>
    1084:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <tc_tce0_ccc_callback+0x1>
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_51+0x42>
		tc_tce0_ccc_callback();
    108c:	19 95       	eicall
	}
}
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0b be       	out	0x3b, r0	; 59
    10aa:	0f 90       	pop	r0
    10ac:	09 be       	out	0x39, r0	; 57
    10ae:	0f 90       	pop	r0
    10b0:	08 be       	out	0x38, r0	; 56
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	08 b6       	in	r0, 0x38	; 56
    10c8:	0f 92       	push	r0
    10ca:	18 be       	out	0x38, r1	; 56
    10cc:	09 b6       	in	r0, 0x39	; 57
    10ce:	0f 92       	push	r0
    10d0:	19 be       	out	0x39, r1	; 57
    10d2:	0b b6       	in	r0, 0x3b	; 59
    10d4:	0f 92       	push	r0
    10d6:	1b be       	out	0x3b, r1	; 59
    10d8:	2f 93       	push	r18
    10da:	3f 93       	push	r19
    10dc:	4f 93       	push	r20
    10de:	5f 93       	push	r21
    10e0:	6f 93       	push	r22
    10e2:	7f 93       	push	r23
    10e4:	8f 93       	push	r24
    10e6:	9f 93       	push	r25
    10e8:	af 93       	push	r26
    10ea:	bf 93       	push	r27
    10ec:	ef 93       	push	r30
    10ee:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    10f0:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
    10f4:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
    10f8:	30 97       	sbiw	r30, 0x00	; 0
    10fa:	09 f0       	breq	.+2      	; 0x10fe <__vector_52+0x42>
		tc_tce0_ccd_callback();
    10fc:	19 95       	eicall
	}
}
    10fe:	ff 91       	pop	r31
    1100:	ef 91       	pop	r30
    1102:	bf 91       	pop	r27
    1104:	af 91       	pop	r26
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	7f 91       	pop	r23
    110c:	6f 91       	pop	r22
    110e:	5f 91       	pop	r21
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0b be       	out	0x3b, r0	; 59
    111a:	0f 90       	pop	r0
    111c:	09 be       	out	0x39, r0	; 57
    111e:	0f 90       	pop	r0
    1120:	08 be       	out	0x38, r0	; 56
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1130:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <transfer>
    1134:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <transfer+0x1>
    1138:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    113a:	83 ff       	sbrs	r24, 3
    113c:	08 c0       	rjmp	.+16     	; 0x114e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    113e:	88 60       	ori	r24, 0x08	; 8
    1140:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1146:	86 ef       	ldi	r24, 0xF6	; 246
    1148:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <transfer+0xa>
    114c:	83 c0       	rjmp	.+262    	; 0x1254 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    114e:	98 2f       	mov	r25, r24
    1150:	94 71       	andi	r25, 0x14	; 20
    1152:	31 f0       	breq	.+12     	; 0x1160 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <transfer+0xa>
    115e:	7a c0       	rjmp	.+244    	; 0x1254 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1160:	86 ff       	sbrs	r24, 6
    1162:	43 c0       	rjmp	.+134    	; 0x11ea <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1164:	c4 e3       	ldi	r28, 0x34	; 52
    1166:	d0 e2       	ldi	r29, 0x20	; 32
    1168:	aa 81       	ldd	r26, Y+2	; 0x02
    116a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	14 96       	adiw	r26, 0x04	; 4
    1172:	2d 91       	ld	r18, X+
    1174:	3c 91       	ld	r19, X
    1176:	15 97       	sbiw	r26, 0x05	; 5
    1178:	82 17       	cp	r24, r18
    117a:	93 07       	cpc	r25, r19
    117c:	6c f4       	brge	.+26     	; 0x1198 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    117e:	9c 01       	movw	r18, r24
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	20 93 38 20 	sts	0x2038, r18	; 0x802038 <transfer+0x4>
    1188:	30 93 39 20 	sts	0x2039, r19	; 0x802039 <transfer+0x5>
    118c:	a8 0f       	add	r26, r24
    118e:	b9 1f       	adc	r27, r25
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	8c 91       	ld	r24, X
    1194:	87 83       	std	Z+7, r24	; 0x07
    1196:	5e c0       	rjmp	.+188    	; 0x1254 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1198:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <transfer+0x6>
    119c:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <transfer+0x7>
    11a0:	18 96       	adiw	r26, 0x08	; 8
    11a2:	2d 91       	ld	r18, X+
    11a4:	3c 91       	ld	r19, X
    11a6:	19 97       	sbiw	r26, 0x09	; 9
    11a8:	82 17       	cp	r24, r18
    11aa:	93 07       	cpc	r25, r19
    11ac:	c8 f4       	brcc	.+50     	; 0x11e0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    11ae:	20 91 3c 20 	lds	r18, 0x203C	; 0x80203c <transfer+0x8>
    11b2:	22 23       	and	r18, r18
    11b4:	21 f0       	breq	.+8      	; 0x11be <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    11b6:	86 81       	ldd	r24, Z+6	; 0x06
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	86 83       	std	Z+6, r24	; 0x06
    11bc:	4b c0       	rjmp	.+150    	; 0x1254 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    11be:	16 96       	adiw	r26, 0x06	; 6
    11c0:	2d 91       	ld	r18, X+
    11c2:	3c 91       	ld	r19, X
    11c4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    11c6:	ac 01       	movw	r20, r24
    11c8:	4f 5f       	subi	r20, 0xFF	; 255
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	40 93 3a 20 	sts	0x203A, r20	; 0x80203a <transfer+0x6>
    11d0:	50 93 3b 20 	sts	0x203B, r21	; 0x80203b <transfer+0x7>
    11d4:	d9 01       	movw	r26, r18
    11d6:	a8 0f       	add	r26, r24
    11d8:	b9 1f       	adc	r27, r25
    11da:	8c 91       	ld	r24, X
    11dc:	87 83       	std	Z+7, r24	; 0x07
    11de:	3a c0       	rjmp	.+116    	; 0x1254 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    11e4:	10 92 3e 20 	sts	0x203E, r1	; 0x80203e <transfer+0xa>
    11e8:	35 c0       	rjmp	.+106    	; 0x1254 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    11ea:	88 23       	and	r24, r24
    11ec:	84 f5       	brge	.+96     	; 0x124e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    11ee:	a4 e3       	ldi	r26, 0x34	; 52
    11f0:	b0 e2       	ldi	r27, 0x20	; 32
    11f2:	12 96       	adiw	r26, 0x02	; 2
    11f4:	cd 91       	ld	r28, X+
    11f6:	dc 91       	ld	r29, X
    11f8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    11fa:	16 96       	adiw	r26, 0x06	; 6
    11fc:	8d 91       	ld	r24, X+
    11fe:	9c 91       	ld	r25, X
    1200:	17 97       	sbiw	r26, 0x07	; 7
    1202:	28 85       	ldd	r18, Y+8	; 0x08
    1204:	39 85       	ldd	r19, Y+9	; 0x09
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
    120a:	d8 f4       	brcc	.+54     	; 0x1242 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    120c:	6e 81       	ldd	r22, Y+6	; 0x06
    120e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1210:	9c 01       	movw	r18, r24
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	20 93 3a 20 	sts	0x203A, r18	; 0x80203a <transfer+0x6>
    121a:	30 93 3b 20 	sts	0x203B, r19	; 0x80203b <transfer+0x7>
    121e:	47 81       	ldd	r20, Z+7	; 0x07
    1220:	db 01       	movw	r26, r22
    1222:	a8 0f       	add	r26, r24
    1224:	b9 1f       	adc	r27, r25
    1226:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1228:	88 85       	ldd	r24, Y+8	; 0x08
    122a:	99 85       	ldd	r25, Y+9	; 0x09
    122c:	28 17       	cp	r18, r24
    122e:	39 07       	cpc	r19, r25
    1230:	18 f4       	brcc	.+6      	; 0x1238 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	83 83       	std	Z+3, r24	; 0x03
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1238:	87 e0       	ldi	r24, 0x07	; 7
    123a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    123c:	10 92 3e 20 	sts	0x203E, r1	; 0x80203e <transfer+0xa>
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1246:	89 ef       	ldi	r24, 0xF9	; 249
    1248:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <transfer+0xa>
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    124e:	8b ef       	ldi	r24, 0xFB	; 251
    1250:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <transfer+0xa>
	}
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	08 b6       	in	r0, 0x38	; 56
    1266:	0f 92       	push	r0
    1268:	18 be       	out	0x38, r1	; 56
    126a:	09 b6       	in	r0, 0x39	; 57
    126c:	0f 92       	push	r0
    126e:	19 be       	out	0x39, r1	; 57
    1270:	0b b6       	in	r0, 0x3b	; 59
    1272:	0f 92       	push	r0
    1274:	1b be       	out	0x3b, r1	; 59
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	4e df       	rcall	.-356    	; 0x112c <twim_interrupt_handler>
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0b be       	out	0x3b, r0	; 59
    12ac:	0f 90       	pop	r0
    12ae:	09 be       	out	0x39, r0	; 57
    12b0:	0f 90       	pop	r0
    12b2:	08 be       	out	0x38, r0	; 56
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	08 b6       	in	r0, 0x38	; 56
    12ca:	0f 92       	push	r0
    12cc:	18 be       	out	0x38, r1	; 56
    12ce:	09 b6       	in	r0, 0x39	; 57
    12d0:	0f 92       	push	r0
    12d2:	19 be       	out	0x39, r1	; 57
    12d4:	0b b6       	in	r0, 0x3b	; 59
    12d6:	0f 92       	push	r0
    12d8:	1b be       	out	0x3b, r1	; 59
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	1c df       	rcall	.-456    	; 0x112c <twim_interrupt_handler>
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0b be       	out	0x3b, r0	; 59
    1310:	0f 90       	pop	r0
    1312:	09 be       	out	0x39, r0	; 57
    1314:	0f 90       	pop	r0
    1316:	08 be       	out	0x38, r0	; 56
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	0f 90       	pop	r0
    131e:	1f 90       	pop	r1
    1320:	18 95       	reti

00001322 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	09 f4       	brne	.+2      	; 0x1328 <sysclk_enable_peripheral_clock+0x6>
    1326:	d5 c0       	rjmp	.+426    	; 0x14d2 <sysclk_enable_peripheral_clock+0x1b0>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1328:	80 3c       	cpi	r24, 0xC0	; 192
    132a:	91 05       	cpc	r25, r1
    132c:	29 f4       	brne	.+10     	; 0x1338 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    132e:	60 e1       	ldi	r22, 0x10	; 16
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1336:	08 95       	ret
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1338:	81 15       	cp	r24, r1
    133a:	24 e0       	ldi	r18, 0x04	; 4
    133c:	92 07       	cpc	r25, r18
    133e:	29 f4       	brne	.+10     	; 0x134a <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1340:	64 e0       	ldi	r22, 0x04	; 4
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1348:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    134a:	80 38       	cpi	r24, 0x80	; 128
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	92 07       	cpc	r25, r18
    1350:	29 f4       	brne	.+10     	; 0x135c <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    135a:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    135c:	81 15       	cp	r24, r1
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	92 07       	cpc	r25, r18
    1362:	29 f4       	brne	.+10     	; 0x136e <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    136c:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    136e:	80 38       	cpi	r24, 0x80	; 128
    1370:	23 e0       	ldi	r18, 0x03	; 3
    1372:	92 07       	cpc	r25, r18
    1374:	29 f4       	brne	.+10     	; 0x1380 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    137e:	08 95       	ret
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1380:	81 15       	cp	r24, r1
    1382:	22 e0       	ldi	r18, 0x02	; 2
    1384:	92 07       	cpc	r25, r18
    1386:	29 f4       	brne	.+10     	; 0x1392 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1390:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1392:	80 32       	cpi	r24, 0x20	; 32
    1394:	23 e0       	ldi	r18, 0x03	; 3
    1396:	92 07       	cpc	r25, r18
    1398:	29 f4       	brne	.+10     	; 0x13a4 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    13a2:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    13a4:	81 15       	cp	r24, r1
    13a6:	28 e0       	ldi	r18, 0x08	; 8
    13a8:	92 07       	cpc	r25, r18
    13aa:	29 f4       	brne	.+10     	; 0x13b6 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    13ac:	61 e0       	ldi	r22, 0x01	; 1
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    13b4:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    13b6:	81 15       	cp	r24, r1
    13b8:	29 e0       	ldi	r18, 0x09	; 9
    13ba:	92 07       	cpc	r25, r18
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    13be:	61 e0       	ldi	r22, 0x01	; 1
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    13c6:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    13c8:	81 15       	cp	r24, r1
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	92 07       	cpc	r25, r18
    13ce:	29 f4       	brne	.+10     	; 0x13da <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	85 e0       	ldi	r24, 0x05	; 5
    13d4:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    13d8:	08 95       	ret
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    13da:	80 34       	cpi	r24, 0x40	; 64
    13dc:	28 e0       	ldi	r18, 0x08	; 8
    13de:	92 07       	cpc	r25, r18
    13e0:	29 f4       	brne	.+10     	; 0x13ec <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    13e2:	62 e0       	ldi	r22, 0x02	; 2
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    13ea:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    13ec:	80 34       	cpi	r24, 0x40	; 64
    13ee:	29 e0       	ldi	r18, 0x09	; 9
    13f0:	92 07       	cpc	r25, r18
    13f2:	29 f4       	brne	.+10     	; 0x13fe <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	84 e0       	ldi	r24, 0x04	; 4
    13f8:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    13fc:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    13fe:	80 39       	cpi	r24, 0x90	; 144
    1400:	28 e0       	ldi	r18, 0x08	; 8
    1402:	92 07       	cpc	r25, r18
    1404:	29 f4       	brne	.+10     	; 0x1410 <sysclk_enable_peripheral_clock+0xee>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    140e:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1410:	80 39       	cpi	r24, 0x90	; 144
    1412:	29 e0       	ldi	r18, 0x09	; 9
    1414:	92 07       	cpc	r25, r18
    1416:	29 f4       	brne	.+10     	; 0x1422 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1418:	64 e0       	ldi	r22, 0x04	; 4
    141a:	84 e0       	ldi	r24, 0x04	; 4
    141c:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1420:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1422:	80 39       	cpi	r24, 0x90	; 144
    1424:	2a e0       	ldi	r18, 0x0A	; 10
    1426:	92 07       	cpc	r25, r18
    1428:	29 f4       	brne	.+10     	; 0x1434 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    142a:	64 e0       	ldi	r22, 0x04	; 4
    142c:	85 e0       	ldi	r24, 0x05	; 5
    142e:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1432:	08 95       	ret
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1434:	80 3c       	cpi	r24, 0xC0	; 192
    1436:	28 e0       	ldi	r18, 0x08	; 8
    1438:	92 07       	cpc	r25, r18
    143a:	29 f4       	brne	.+10     	; 0x1446 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    143c:	68 e0       	ldi	r22, 0x08	; 8
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1444:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1446:	80 3c       	cpi	r24, 0xC0	; 192
    1448:	29 e0       	ldi	r18, 0x09	; 9
    144a:	92 07       	cpc	r25, r18
    144c:	29 f4       	brne	.+10     	; 0x1458 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    144e:	68 e0       	ldi	r22, 0x08	; 8
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1456:	08 95       	ret
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1458:	80 3a       	cpi	r24, 0xA0	; 160
    145a:	28 e0       	ldi	r18, 0x08	; 8
    145c:	92 07       	cpc	r25, r18
    145e:	29 f4       	brne	.+10     	; 0x146a <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1460:	60 e1       	ldi	r22, 0x10	; 16
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    1468:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    146a:	80 3a       	cpi	r24, 0xA0	; 160
    146c:	29 e0       	ldi	r18, 0x09	; 9
    146e:	92 07       	cpc	r25, r18
    1470:	29 f4       	brne	.+10     	; 0x147c <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1472:	60 e1       	ldi	r22, 0x10	; 16
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    147a:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    147c:	80 3a       	cpi	r24, 0xA0	; 160
    147e:	2a e0       	ldi	r18, 0x0A	; 10
    1480:	92 07       	cpc	r25, r18
    1482:	29 f4       	brne	.+10     	; 0x148e <sysclk_enable_peripheral_clock+0x16c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1484:	60 e1       	ldi	r22, 0x10	; 16
    1486:	85 e0       	ldi	r24, 0x05	; 5
    1488:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    148c:	08 95       	ret
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    148e:	80 3b       	cpi	r24, 0xB0	; 176
    1490:	28 e0       	ldi	r18, 0x08	; 8
    1492:	92 07       	cpc	r25, r18
    1494:	29 f4       	brne	.+10     	; 0x14a0 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1496:	60 e2       	ldi	r22, 0x20	; 32
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    149e:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    14a0:	80 3b       	cpi	r24, 0xB0	; 176
    14a2:	29 e0       	ldi	r18, 0x09	; 9
    14a4:	92 07       	cpc	r25, r18
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    14a8:	60 e2       	ldi	r22, 0x20	; 32
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    14b0:	08 95       	ret
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    14b2:	80 38       	cpi	r24, 0x80	; 128
    14b4:	24 e0       	ldi	r18, 0x04	; 4
    14b6:	92 07       	cpc	r25, r18
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    14ba:	60 e4       	ldi	r22, 0x40	; 64
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    14c2:	08 95       	ret
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    14c4:	80 3a       	cpi	r24, 0xA0	; 160
    14c6:	94 40       	sbci	r25, 0x04	; 4
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <sysclk_enable_peripheral_clock+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    14ca:	60 e4       	ldi	r22, 0x40	; 64
    14cc:	85 e0       	ldi	r24, 0x05	; 5
    14ce:	0c 94 35 01 	jmp	0x26a	; 0x26a <sysclk_enable_module>
    14d2:	08 95       	ret

000014d4 <main>:
	float pitch;
	float bonus_direction;
	float spin_rate;


	sysclk_init(); //initialize system clock
    14d4:	0e 94 25 01 	call	0x24a	; 0x24a <sysclk_init>
				//TODO: make sure the system clock is set to the correct frequency
				//TODO: make sure libraries are properly configured
				
	//INIT Timer Counter Bois		
	sysclk_enable_peripheral_clock(&TCC0); //TODO: CHECK REGISTER
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	22 df       	rcall	.-444    	; 0x1322 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0); //TODO: CHECK REGISTER
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	99 e0       	ldi	r25, 0x09	; 9
    14e2:	1f df       	rcall	.-450    	; 0x1322 <sysclk_enable_peripheral_clock>
	
	
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES); //TODO: CHECK PORT
    14e4:	64 e0       	ldi	r22, 0x04	; 4
    14e6:	86 e0       	ldi	r24, 0x06	; 6
    14e8:	0e 94 35 01 	call	0x26a	; 0x26a <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES); //TODO: CHECK PORT
    14ec:	64 e0       	ldi	r22, 0x04	; 4
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	0e 94 35 01 	call	0x26a	; 0x26a <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);	 //TODO: CHECK PORT
    14f4:	68 e0       	ldi	r22, 0x08	; 8
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	0e 94 35 01 	call	0x26a	; 0x26a <sysclk_enable_module>
	
	//TODO: Initialize External RTC (in case of failure)
	
	//Init USART ports
	
	sysclk_enable_peripheral_clock(&USARTC0);  //EG port - MIGHT NEED TO CHANGE
    14fc:	80 ea       	ldi	r24, 0xA0	; 160
    14fe:	98 e0       	ldi	r25, 0x08	; 8
    1500:	10 df       	rcall	.-480    	; 0x1322 <sysclk_enable_peripheral_clock>
		//Initialize USART Devices
		
		
	//Init SPI ports
	sysclk_enable_peripheral_clock(&SPIC); //EG Port - MIGHT NEED TO CHANGE
    1502:	80 ec       	ldi	r24, 0xC0	; 192
    1504:	98 e0       	ldi	r25, 0x08	; 8
    1506:	0d df       	rcall	.-486    	; 0x1322 <sysclk_enable_peripheral_clock>
		//Initialize SPI Devices
	
	//Init ADC Ports
	sysclk_enable_peripheral_clock(&ADCA); //EG Port - MIGHT NEED TO CHANGE
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0a df       	rcall	.-492    	; 0x1322 <sysclk_enable_peripheral_clock>
    150e:	ff cf       	rjmp	.-2      	; 0x150e <main+0x3a>

00001510 <_exit>:
    1510:	f8 94       	cli

00001512 <__stop_program>:
    1512:	ff cf       	rjmp	.-2      	; 0x1512 <__stop_program>
