
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00802000  000062ea  0000637e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000075  0080206a  0080206a  000063e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000063e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00006488  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f06c  00000000  00000000  00006b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000550c  00000000  00000000  00015be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009244  00000000  00000000  0001b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025d4  00000000  00000000  00024334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035b65  00000000  00000000  00026908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054b2  00000000  00000000  0005c46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0006191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003eb0  00000000  00000000  00061f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_10>
      2c:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_11>
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__vector_13>
      38:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_14>
      3c:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_15>
      40:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_16>
      44:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_17>
      48:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_18>
      4c:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_19>
      50:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_20>
      54:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_21>
      58:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__vector_22>
      5c:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__vector_23>
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__vector_46>
      bc:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__vector_47>
      c0:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_48>
      c4:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_49>
      c8:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__vector_50>
      cc:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__vector_51>
      d0:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__vector_52>
      d4:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__vector_53>
      d8:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__vector_54>
      dc:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__vector_55>
      e0:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__vector_76>
     134:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__vector_77>
     138:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__vector_78>
     13c:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__vector_79>
     140:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__vector_80>
     144:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_81>
     148:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__vector_82>
     14c:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__vector_83>
     150:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_84>
     154:	0c 94 be 11 	jmp	0x237c	; 0x237c <__vector_85>
     158:	0c 94 15 12 	jmp	0x242a	; 0x242a <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__vector_107>
     1b0:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_108>
     1b4:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__vector_109>
     1b8:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__vector_110>
     1bc:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__vector_111>
     1c0:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__vector_112>
     1c4:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__vector_113>
     1c8:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__vector_114>
     1cc:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_115>
     1d0:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__vector_116>
     1d4:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_119>
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea ee       	ldi	r30, 0xEA	; 234
     21c:	f2 e6       	ldi	r31, 0x62	; 98
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	aa 36       	cpi	r26, 0x6A	; 106
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	aa e6       	ldi	r26, 0x6A	; 106
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 3d       	cpi	r26, 0xDF	; 223
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 e5 27 	call	0x4fca	; 0x4fca <main>
     244:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <sysclk_get_main_hz>:
	{
		if(!(data&1)) return 0;
		data=data>>1;
	}
	return 1;
}
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	98 e4       	ldi	r25, 0x48	; 72
     256:	a8 ee       	ldi	r26, 0xE8	; 232
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	bc 01       	movw	r22, r24
     25c:	cd 01       	movw	r24, r26
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <sysclk_get_per4_hz>:
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	19 82       	std	Y+1, r1	; 0x01
     270:	ec df       	rcall	.-40     	; 0x24a <sysclk_get_main_hz>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	29 81       	ldd	r18, Y+1	; 0x01
     278:	22 2f       	mov	r18, r18
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	04 c0       	rjmp	.+8      	; 0x286 <sysclk_get_per4_hz+0x22>
     27e:	b6 95       	lsr	r27
     280:	a7 95       	ror	r26
     282:	97 95       	ror	r25
     284:	87 95       	ror	r24
     286:	2a 95       	dec	r18
     288:	d2 f7       	brpl	.-12     	; 0x27e <sysclk_get_per4_hz+0x1a>
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <sysclk_get_per2_hz>:
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	e2 df       	rcall	.-60     	; 0x264 <sysclk_get_per4_hz>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <sysclk_get_per_hz>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	ef df       	rcall	.-34     	; 0x296 <sysclk_get_per2_hz>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	bc 01       	movw	r22, r24
     2be:	cd 01       	movw	r24, r26
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <sysclk_get_cpu_hz>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	ef df       	rcall	.-34     	; 0x2ae <sysclk_get_per_hz>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	bc 01       	movw	r22, r24
     2d6:	cd 01       	movw	r24, r26
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <__portable_avr_delay_cycles>:
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <__portable_avr_delay_cycles+0xa>
     2e0:	61 50       	subi	r22, 0x01	; 1
     2e2:	71 09       	sbc	r23, r1
     2e4:	81 09       	sbc	r24, r1
     2e6:	91 09       	sbc	r25, r1
     2e8:	61 15       	cp	r22, r1
     2ea:	71 05       	cpc	r23, r1
     2ec:	81 05       	cpc	r24, r1
     2ee:	91 05       	cpc	r25, r1
     2f0:	b9 f7       	brne	.-18     	; 0x2e0 <__portable_avr_delay_cycles+0x2>
     2f2:	08 95       	ret

000002f4 <BNO_Write>:
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <BNO_Write+0x6>
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	9a 83       	std	Y+2, r25	; 0x02
     302:	6b 83       	std	Y+3, r22	; 0x03
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	4b 81       	ldd	r20, Y+3	; 0x03
     30a:	69 e2       	ldi	r22, 0x29	; 41
     30c:	0e 94 99 24 	call	0x4932	; 0x4932 <twi_write>
     310:	00 00       	nop
     312:	23 96       	adiw	r28, 0x03	; 3
     314:	cd bf       	out	0x3d, r28	; 61
     316:	de bf       	out	0x3e, r29	; 62
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <BNO_Read>:
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <BNO_Read+0x6>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	6b 83       	std	Y+3, r22	; 0x03
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	4b 81       	ldd	r20, Y+3	; 0x03
     334:	69 e2       	ldi	r22, 0x29	; 41
     336:	0e 94 d7 24 	call	0x49ae	; 0x49ae <twi_read>
     33a:	00 00       	nop
     33c:	23 96       	adiw	r28, 0x03	; 3
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	de bf       	out	0x3e, r29	; 62
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <get_Angle>:

//function to get heading, pitch, and roll in that order. degree measure
void get_Angle(uint16_t angle[])//takes a three element array
{
     348:	2f 92       	push	r2
     34a:	3f 92       	push	r3
     34c:	4f 92       	push	r4
     34e:	5f 92       	push	r5
     350:	6f 92       	push	r6
     352:	7f 92       	push	r7
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	c3 57       	subi	r28, 0x73	; 115
     372:	d1 09       	sbc	r29, r1
     374:	cd bf       	out	0x3d, r28	; 61
     376:	de bf       	out	0x3e, r29	; 62
     378:	8a 83       	std	Y+2, r24	; 0x02
     37a:	9b 83       	std	Y+3, r25	; 0x03
	//angle = (uint16_t*)malloc(4*sizeof(uint16_t));
	
	uint8_t data;
	//gets heading
	data=0xff;
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	89 83       	std	Y+1, r24	; 0x01
	
	delay_ms(5);
     380:	a2 df       	rcall	.-188    	; 0x2c6 <sysclk_get_cpu_hz>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	1c 01       	movw	r2, r24
     388:	2d 01       	movw	r4, r26
     38a:	61 2c       	mov	r6, r1
     38c:	71 2c       	mov	r7, r1
     38e:	43 01       	movw	r8, r6
     390:	a2 2c       	mov	r10, r2
     392:	b3 2c       	mov	r11, r3
     394:	c4 2c       	mov	r12, r4
     396:	d5 2c       	mov	r13, r5
     398:	e6 2c       	mov	r14, r6
     39a:	f7 2c       	mov	r15, r7
     39c:	08 2d       	mov	r16, r8
     39e:	19 2d       	mov	r17, r9
     3a0:	2a 2d       	mov	r18, r10
     3a2:	3b 2d       	mov	r19, r11
     3a4:	4c 2d       	mov	r20, r12
     3a6:	5d 2d       	mov	r21, r13
     3a8:	6e 2d       	mov	r22, r14
     3aa:	7f 2d       	mov	r23, r15
     3ac:	80 2f       	mov	r24, r16
     3ae:	91 2f       	mov	r25, r17
     3b0:	02 e0       	ldi	r16, 0x02	; 2
     3b2:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     3b6:	2c 83       	std	Y+4, r18	; 0x04
     3b8:	3d 83       	std	Y+5, r19	; 0x05
     3ba:	4e 83       	std	Y+6, r20	; 0x06
     3bc:	5f 83       	std	Y+7, r21	; 0x07
     3be:	68 87       	std	Y+8, r22	; 0x08
     3c0:	79 87       	std	Y+9, r23	; 0x09
     3c2:	8a 87       	std	Y+10, r24	; 0x0a
     3c4:	9b 87       	std	Y+11, r25	; 0x0b
     3c6:	ac 80       	ldd	r10, Y+4	; 0x04
     3c8:	bd 80       	ldd	r11, Y+5	; 0x05
     3ca:	ce 80       	ldd	r12, Y+6	; 0x06
     3cc:	df 80       	ldd	r13, Y+7	; 0x07
     3ce:	e8 84       	ldd	r14, Y+8	; 0x08
     3d0:	f9 84       	ldd	r15, Y+9	; 0x09
     3d2:	0a 85       	ldd	r16, Y+10	; 0x0a
     3d4:	1b 85       	ldd	r17, Y+11	; 0x0b
     3d6:	2a 2d       	mov	r18, r10
     3d8:	3b 2d       	mov	r19, r11
     3da:	4c 2d       	mov	r20, r12
     3dc:	5d 2d       	mov	r21, r13
     3de:	6e 2d       	mov	r22, r14
     3e0:	7f 2d       	mov	r23, r15
     3e2:	80 2f       	mov	r24, r16
     3e4:	91 2f       	mov	r25, r17
     3e6:	a2 2c       	mov	r10, r2
     3e8:	b3 2c       	mov	r11, r3
     3ea:	c4 2c       	mov	r12, r4
     3ec:	d5 2c       	mov	r13, r5
     3ee:	e6 2c       	mov	r14, r6
     3f0:	f7 2c       	mov	r15, r7
     3f2:	08 2d       	mov	r16, r8
     3f4:	19 2d       	mov	r17, r9
     3f6:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     3fa:	22 2e       	mov	r2, r18
     3fc:	33 2e       	mov	r3, r19
     3fe:	44 2e       	mov	r4, r20
     400:	55 2e       	mov	r5, r21
     402:	66 2e       	mov	r6, r22
     404:	77 2e       	mov	r7, r23
     406:	88 2e       	mov	r8, r24
     408:	99 2e       	mov	r9, r25
     40a:	0f 2e       	mov	r0, r31
     40c:	f6 e0       	ldi	r31, 0x06	; 6
     40e:	af 2e       	mov	r10, r31
     410:	f0 2d       	mov	r31, r0
     412:	b1 2c       	mov	r11, r1
     414:	c1 2c       	mov	r12, r1
     416:	d1 2c       	mov	r13, r1
     418:	e1 2c       	mov	r14, r1
     41a:	f1 2c       	mov	r15, r1
     41c:	00 e0       	ldi	r16, 0x00	; 0
     41e:	10 e0       	ldi	r17, 0x00	; 0
     420:	22 2d       	mov	r18, r2
     422:	33 2d       	mov	r19, r3
     424:	44 2d       	mov	r20, r4
     426:	55 2d       	mov	r21, r5
     428:	66 2d       	mov	r22, r6
     42a:	77 2d       	mov	r23, r7
     42c:	88 2d       	mov	r24, r8
     42e:	99 2d       	mov	r25, r9
     430:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     434:	22 2e       	mov	r2, r18
     436:	33 2e       	mov	r3, r19
     438:	44 2e       	mov	r4, r20
     43a:	55 2e       	mov	r5, r21
     43c:	66 2e       	mov	r6, r22
     43e:	77 2e       	mov	r7, r23
     440:	88 2e       	mov	r8, r24
     442:	99 2e       	mov	r9, r25
     444:	a2 2c       	mov	r10, r2
     446:	b3 2c       	mov	r11, r3
     448:	c4 2c       	mov	r12, r4
     44a:	d5 2c       	mov	r13, r5
     44c:	e6 2c       	mov	r14, r6
     44e:	f7 2c       	mov	r15, r7
     450:	08 2d       	mov	r16, r8
     452:	19 2d       	mov	r17, r9
     454:	2a 2d       	mov	r18, r10
     456:	3b 2d       	mov	r19, r11
     458:	4c 2d       	mov	r20, r12
     45a:	5d 2d       	mov	r21, r13
     45c:	6e 2d       	mov	r22, r14
     45e:	7f 2d       	mov	r23, r15
     460:	80 2f       	mov	r24, r16
     462:	91 2f       	mov	r25, r17
     464:	29 51       	subi	r18, 0x19	; 25
     466:	3c 4f       	sbci	r19, 0xFC	; 252
     468:	4f 4f       	sbci	r20, 0xFF	; 255
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	6f 4f       	sbci	r22, 0xFF	; 255
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	8f 4f       	sbci	r24, 0xFF	; 255
     472:	9f 4f       	sbci	r25, 0xFF	; 255
     474:	a2 2e       	mov	r10, r18
     476:	b3 2e       	mov	r11, r19
     478:	c4 2e       	mov	r12, r20
     47a:	d5 2e       	mov	r13, r21
     47c:	e6 2e       	mov	r14, r22
     47e:	f7 2e       	mov	r15, r23
     480:	08 2f       	mov	r16, r24
     482:	19 2f       	mov	r17, r25
     484:	2a 2d       	mov	r18, r10
     486:	3b 2d       	mov	r19, r11
     488:	4c 2d       	mov	r20, r12
     48a:	5d 2d       	mov	r21, r13
     48c:	6e 2d       	mov	r22, r14
     48e:	7f 2d       	mov	r23, r15
     490:	80 2f       	mov	r24, r16
     492:	91 2f       	mov	r25, r17
     494:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	4a e7       	ldi	r20, 0x7A	; 122
     4a2:	54 e4       	ldi	r21, 0x44	; 68
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     4b8:	a2 2e       	mov	r10, r18
     4ba:	b3 2e       	mov	r11, r19
     4bc:	c4 2e       	mov	r12, r20
     4be:	d5 2e       	mov	r13, r21
     4c0:	e6 2e       	mov	r14, r22
     4c2:	f7 2e       	mov	r15, r23
     4c4:	08 2f       	mov	r16, r24
     4c6:	19 2f       	mov	r17, r25
     4c8:	d6 01       	movw	r26, r12
     4ca:	c5 01       	movw	r24, r10
     4cc:	bc 01       	movw	r22, r24
     4ce:	cd 01       	movw	r24, r26
     4d0:	06 df       	rcall	.-500    	; 0x2de <__portable_avr_delay_cycles>
	BNO_Read(&data,BNO055_QUATERNION_DATA_W_MSB_ADDR);
     4d2:	61 e2       	ldi	r22, 0x21	; 33
     4d4:	ce 01       	movw	r24, r28
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	22 df       	rcall	.-444    	; 0x31e <BNO_Read>
	angle[0]=((uint16_t)data)<<8;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	38 2f       	mov	r19, r24
     4e2:	22 27       	eor	r18, r18
     4e4:	8a 81       	ldd	r24, Y+2	; 0x02
     4e6:	9b 81       	ldd	r25, Y+3	; 0x03
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
	data=0xFF;
     4ec:	31 83       	std	Z+1, r19	; 0x01
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
	
	delay_ms(5);
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	e9 de       	rcall	.-558    	; 0x2c6 <sysclk_get_cpu_hz>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	1c 01       	movw	r2, r24
     4fa:	2d 01       	movw	r4, r26
     4fc:	61 2c       	mov	r6, r1
     4fe:	71 2c       	mov	r7, r1
     500:	43 01       	movw	r8, r6
     502:	a2 2c       	mov	r10, r2
     504:	b3 2c       	mov	r11, r3
     506:	c4 2c       	mov	r12, r4
     508:	d5 2c       	mov	r13, r5
     50a:	e6 2c       	mov	r14, r6
     50c:	f7 2c       	mov	r15, r7
     50e:	08 2d       	mov	r16, r8
     510:	19 2d       	mov	r17, r9
     512:	2a 2d       	mov	r18, r10
     514:	3b 2d       	mov	r19, r11
     516:	4c 2d       	mov	r20, r12
     518:	5d 2d       	mov	r21, r13
     51a:	6e 2d       	mov	r22, r14
     51c:	7f 2d       	mov	r23, r15
     51e:	80 2f       	mov	r24, r16
     520:	91 2f       	mov	r25, r17
     522:	02 e0       	ldi	r16, 0x02	; 2
     524:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     528:	2c 87       	std	Y+12, r18	; 0x0c
     52a:	3d 87       	std	Y+13, r19	; 0x0d
     52c:	4e 87       	std	Y+14, r20	; 0x0e
     52e:	5f 87       	std	Y+15, r21	; 0x0f
     530:	68 8b       	std	Y+16, r22	; 0x10
     532:	79 8b       	std	Y+17, r23	; 0x11
     534:	8a 8b       	std	Y+18, r24	; 0x12
     536:	9b 8b       	std	Y+19, r25	; 0x13
     538:	ac 84       	ldd	r10, Y+12	; 0x0c
     53a:	bd 84       	ldd	r11, Y+13	; 0x0d
     53c:	ce 84       	ldd	r12, Y+14	; 0x0e
     53e:	df 84       	ldd	r13, Y+15	; 0x0f
     540:	e8 88       	ldd	r14, Y+16	; 0x10
     542:	f9 88       	ldd	r15, Y+17	; 0x11
     544:	0a 89       	ldd	r16, Y+18	; 0x12
     546:	1b 89       	ldd	r17, Y+19	; 0x13
     548:	2a 2d       	mov	r18, r10
     54a:	3b 2d       	mov	r19, r11
     54c:	4c 2d       	mov	r20, r12
     54e:	5d 2d       	mov	r21, r13
     550:	6e 2d       	mov	r22, r14
     552:	7f 2d       	mov	r23, r15
     554:	80 2f       	mov	r24, r16
     556:	91 2f       	mov	r25, r17
     558:	a2 2c       	mov	r10, r2
     55a:	b3 2c       	mov	r11, r3
     55c:	c4 2c       	mov	r12, r4
     55e:	d5 2c       	mov	r13, r5
     560:	e6 2c       	mov	r14, r6
     562:	f7 2c       	mov	r15, r7
     564:	08 2d       	mov	r16, r8
     566:	19 2d       	mov	r17, r9
     568:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     56c:	22 2e       	mov	r2, r18
     56e:	33 2e       	mov	r3, r19
     570:	44 2e       	mov	r4, r20
     572:	55 2e       	mov	r5, r21
     574:	66 2e       	mov	r6, r22
     576:	77 2e       	mov	r7, r23
     578:	88 2e       	mov	r8, r24
     57a:	99 2e       	mov	r9, r25
     57c:	0f 2e       	mov	r0, r31
     57e:	f6 e0       	ldi	r31, 0x06	; 6
     580:	af 2e       	mov	r10, r31
     582:	f0 2d       	mov	r31, r0
     584:	b1 2c       	mov	r11, r1
     586:	c1 2c       	mov	r12, r1
     588:	d1 2c       	mov	r13, r1
     58a:	e1 2c       	mov	r14, r1
     58c:	f1 2c       	mov	r15, r1
     58e:	00 e0       	ldi	r16, 0x00	; 0
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	22 2d       	mov	r18, r2
     594:	33 2d       	mov	r19, r3
     596:	44 2d       	mov	r20, r4
     598:	55 2d       	mov	r21, r5
     59a:	66 2d       	mov	r22, r6
     59c:	77 2d       	mov	r23, r7
     59e:	88 2d       	mov	r24, r8
     5a0:	99 2d       	mov	r25, r9
     5a2:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     5a6:	22 2e       	mov	r2, r18
     5a8:	33 2e       	mov	r3, r19
     5aa:	44 2e       	mov	r4, r20
     5ac:	55 2e       	mov	r5, r21
     5ae:	66 2e       	mov	r6, r22
     5b0:	77 2e       	mov	r7, r23
     5b2:	88 2e       	mov	r8, r24
     5b4:	99 2e       	mov	r9, r25
     5b6:	a2 2c       	mov	r10, r2
     5b8:	b3 2c       	mov	r11, r3
     5ba:	c4 2c       	mov	r12, r4
     5bc:	d5 2c       	mov	r13, r5
     5be:	e6 2c       	mov	r14, r6
     5c0:	f7 2c       	mov	r15, r7
     5c2:	08 2d       	mov	r16, r8
     5c4:	19 2d       	mov	r17, r9
     5c6:	2a 2d       	mov	r18, r10
     5c8:	3b 2d       	mov	r19, r11
     5ca:	4c 2d       	mov	r20, r12
     5cc:	5d 2d       	mov	r21, r13
     5ce:	6e 2d       	mov	r22, r14
     5d0:	7f 2d       	mov	r23, r15
     5d2:	80 2f       	mov	r24, r16
     5d4:	91 2f       	mov	r25, r17
     5d6:	29 51       	subi	r18, 0x19	; 25
     5d8:	3c 4f       	sbci	r19, 0xFC	; 252
     5da:	4f 4f       	sbci	r20, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	6f 4f       	sbci	r22, 0xFF	; 255
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	8f 4f       	sbci	r24, 0xFF	; 255
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	a2 2e       	mov	r10, r18
     5e8:	b3 2e       	mov	r11, r19
     5ea:	c4 2e       	mov	r12, r20
     5ec:	d5 2e       	mov	r13, r21
     5ee:	e6 2e       	mov	r14, r22
     5f0:	f7 2e       	mov	r15, r23
     5f2:	08 2f       	mov	r16, r24
     5f4:	19 2f       	mov	r17, r25
     5f6:	2a 2d       	mov	r18, r10
     5f8:	3b 2d       	mov	r19, r11
     5fa:	4c 2d       	mov	r20, r12
     5fc:	5d 2d       	mov	r21, r13
     5fe:	6e 2d       	mov	r22, r14
     600:	7f 2d       	mov	r23, r15
     602:	80 2f       	mov	r24, r16
     604:	91 2f       	mov	r25, r17
     606:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	4a e7       	ldi	r20, 0x7A	; 122
     614:	54 e4       	ldi	r21, 0x44	; 68
     616:	bc 01       	movw	r22, r24
     618:	cd 01       	movw	r24, r26
     61a:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	bc 01       	movw	r22, r24
     624:	cd 01       	movw	r24, r26
     626:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     62a:	a2 2e       	mov	r10, r18
     62c:	b3 2e       	mov	r11, r19
     62e:	c4 2e       	mov	r12, r20
     630:	d5 2e       	mov	r13, r21
     632:	e6 2e       	mov	r14, r22
     634:	f7 2e       	mov	r15, r23
     636:	08 2f       	mov	r16, r24
     638:	19 2f       	mov	r17, r25
     63a:	d6 01       	movw	r26, r12
     63c:	c5 01       	movw	r24, r10
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
	BNO_Read(&data,BNO055_QUATERNION_DATA_W_LSB_ADDR);
     642:	4d de       	rcall	.-870    	; 0x2de <__portable_avr_delay_cycles>
     644:	60 e2       	ldi	r22, 0x20	; 32
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	69 de       	rcall	.-814    	; 0x31e <BNO_Read>
	angle[0]+=data;
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	9b 81       	ldd	r25, Y+3	; 0x03
     650:	fc 01       	movw	r30, r24
     652:	20 81       	ld	r18, Z
     654:	31 81       	ldd	r19, Z+1	; 0x01
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	28 0f       	add	r18, r24
     65e:	39 1f       	adc	r19, r25
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	9b 81       	ldd	r25, Y+3	; 0x03
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
     668:	31 83       	std	Z+1, r19	; 0x01
	angle[0]=angle[0];//convert to degrees
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	9b 81       	ldd	r25, Y+3	; 0x03
     66e:	fc 01       	movw	r30, r24
     670:	20 81       	ld	r18, Z
     672:	31 81       	ldd	r19, Z+1	; 0x01
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	9b 81       	ldd	r25, Y+3	; 0x03
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
	
	//reads the pitch
	
	data=0xFF;
     67c:	31 83       	std	Z+1, r19	; 0x01
     67e:	8f ef       	ldi	r24, 0xFF	; 255
	
	delay_ms(10);
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	21 de       	rcall	.-958    	; 0x2c6 <sysclk_get_cpu_hz>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	9c 01       	movw	r18, r24
     68a:	ad 01       	movw	r20, r26
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	cb 01       	movw	r24, r22
     692:	82 2e       	mov	r8, r18
     694:	93 2e       	mov	r9, r19
     696:	a4 2e       	mov	r10, r20
     698:	b5 2e       	mov	r11, r21
     69a:	c6 2e       	mov	r12, r22
     69c:	d7 2e       	mov	r13, r23
     69e:	e8 2e       	mov	r14, r24
     6a0:	f9 2e       	mov	r15, r25
     6a2:	28 2d       	mov	r18, r8
     6a4:	39 2d       	mov	r19, r9
     6a6:	4a 2d       	mov	r20, r10
     6a8:	5b 2d       	mov	r21, r11
     6aa:	6c 2d       	mov	r22, r12
     6ac:	7d 2d       	mov	r23, r13
     6ae:	8e 2d       	mov	r24, r14
     6b0:	9f 2d       	mov	r25, r15
     6b2:	01 e0       	ldi	r16, 0x01	; 1
     6b4:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     6b8:	2c 8b       	std	Y+20, r18	; 0x14
     6ba:	3d 8b       	std	Y+21, r19	; 0x15
     6bc:	4e 8b       	std	Y+22, r20	; 0x16
     6be:	5f 8b       	std	Y+23, r21	; 0x17
     6c0:	68 8f       	std	Y+24, r22	; 0x18
     6c2:	79 8f       	std	Y+25, r23	; 0x19
     6c4:	8a 8f       	std	Y+26, r24	; 0x1a
     6c6:	9b 8f       	std	Y+27, r25	; 0x1b
     6c8:	8c 88       	ldd	r8, Y+20	; 0x14
     6ca:	9d 88       	ldd	r9, Y+21	; 0x15
     6cc:	ae 88       	ldd	r10, Y+22	; 0x16
     6ce:	bf 88       	ldd	r11, Y+23	; 0x17
     6d0:	c8 8c       	ldd	r12, Y+24	; 0x18
     6d2:	d9 8c       	ldd	r13, Y+25	; 0x19
     6d4:	ea 8c       	ldd	r14, Y+26	; 0x1a
     6d6:	fb 8c       	ldd	r15, Y+27	; 0x1b
     6d8:	28 2d       	mov	r18, r8
     6da:	39 2d       	mov	r19, r9
     6dc:	4a 2d       	mov	r20, r10
     6de:	5b 2d       	mov	r21, r11
     6e0:	6c 2d       	mov	r22, r12
     6e2:	7d 2d       	mov	r23, r13
     6e4:	8e 2d       	mov	r24, r14
     6e6:	9f 2d       	mov	r25, r15
     6e8:	02 e0       	ldi	r16, 0x02	; 2
     6ea:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     6ee:	2c 8f       	std	Y+28, r18	; 0x1c
     6f0:	3d 8f       	std	Y+29, r19	; 0x1d
     6f2:	4e 8f       	std	Y+30, r20	; 0x1e
     6f4:	5f 8f       	std	Y+31, r21	; 0x1f
     6f6:	68 a3       	std	Y+32, r22	; 0x20
     6f8:	79 a3       	std	Y+33, r23	; 0x21
     6fa:	8a a3       	std	Y+34, r24	; 0x22
     6fc:	9b a3       	std	Y+35, r25	; 0x23
     6fe:	28 2d       	mov	r18, r8
     700:	39 2d       	mov	r19, r9
     702:	4a 2d       	mov	r20, r10
     704:	5b 2d       	mov	r21, r11
     706:	6c 2d       	mov	r22, r12
     708:	7d 2d       	mov	r23, r13
     70a:	8e 2d       	mov	r24, r14
     70c:	9f 2d       	mov	r25, r15
     70e:	ac 8c       	ldd	r10, Y+28	; 0x1c
     710:	bd 8c       	ldd	r11, Y+29	; 0x1d
     712:	ce 8c       	ldd	r12, Y+30	; 0x1e
     714:	df 8c       	ldd	r13, Y+31	; 0x1f
     716:	e8 a0       	ldd	r14, Y+32	; 0x20
     718:	f9 a0       	ldd	r15, Y+33	; 0x21
     71a:	0a a1       	ldd	r16, Y+34	; 0x22
     71c:	1b a1       	ldd	r17, Y+35	; 0x23
     71e:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     722:	22 2e       	mov	r2, r18
     724:	33 2e       	mov	r3, r19
     726:	44 2e       	mov	r4, r20
     728:	55 2e       	mov	r5, r21
     72a:	66 2e       	mov	r6, r22
     72c:	77 2e       	mov	r7, r23
     72e:	88 2e       	mov	r8, r24
     730:	99 2e       	mov	r9, r25
     732:	0f 2e       	mov	r0, r31
     734:	f6 e0       	ldi	r31, 0x06	; 6
     736:	af 2e       	mov	r10, r31
     738:	f0 2d       	mov	r31, r0
     73a:	b1 2c       	mov	r11, r1
     73c:	c1 2c       	mov	r12, r1
     73e:	d1 2c       	mov	r13, r1
     740:	e1 2c       	mov	r14, r1
     742:	f1 2c       	mov	r15, r1
     744:	00 e0       	ldi	r16, 0x00	; 0
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	22 2d       	mov	r18, r2
     74a:	33 2d       	mov	r19, r3
     74c:	44 2d       	mov	r20, r4
     74e:	55 2d       	mov	r21, r5
     750:	66 2d       	mov	r22, r6
     752:	77 2d       	mov	r23, r7
     754:	88 2d       	mov	r24, r8
     756:	99 2d       	mov	r25, r9
     758:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     75c:	22 2e       	mov	r2, r18
     75e:	33 2e       	mov	r3, r19
     760:	44 2e       	mov	r4, r20
     762:	55 2e       	mov	r5, r21
     764:	66 2e       	mov	r6, r22
     766:	77 2e       	mov	r7, r23
     768:	88 2e       	mov	r8, r24
     76a:	99 2e       	mov	r9, r25
     76c:	a2 2c       	mov	r10, r2
     76e:	b3 2c       	mov	r11, r3
     770:	c4 2c       	mov	r12, r4
     772:	d5 2c       	mov	r13, r5
     774:	e6 2c       	mov	r14, r6
     776:	f7 2c       	mov	r15, r7
     778:	08 2d       	mov	r16, r8
     77a:	19 2d       	mov	r17, r9
     77c:	2a 2d       	mov	r18, r10
     77e:	3b 2d       	mov	r19, r11
     780:	4c 2d       	mov	r20, r12
     782:	5d 2d       	mov	r21, r13
     784:	6e 2d       	mov	r22, r14
     786:	7f 2d       	mov	r23, r15
     788:	80 2f       	mov	r24, r16
     78a:	91 2f       	mov	r25, r17
     78c:	29 51       	subi	r18, 0x19	; 25
     78e:	3c 4f       	sbci	r19, 0xFC	; 252
     790:	4f 4f       	sbci	r20, 0xFF	; 255
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	6f 4f       	sbci	r22, 0xFF	; 255
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	8f 4f       	sbci	r24, 0xFF	; 255
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	a2 2e       	mov	r10, r18
     79e:	b3 2e       	mov	r11, r19
     7a0:	c4 2e       	mov	r12, r20
     7a2:	d5 2e       	mov	r13, r21
     7a4:	e6 2e       	mov	r14, r22
     7a6:	f7 2e       	mov	r15, r23
     7a8:	08 2f       	mov	r16, r24
     7aa:	19 2f       	mov	r17, r25
     7ac:	2a 2d       	mov	r18, r10
     7ae:	3b 2d       	mov	r19, r11
     7b0:	4c 2d       	mov	r20, r12
     7b2:	5d 2d       	mov	r21, r13
     7b4:	6e 2d       	mov	r22, r14
     7b6:	7f 2d       	mov	r23, r15
     7b8:	80 2f       	mov	r24, r16
     7ba:	91 2f       	mov	r25, r17
     7bc:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	4a e7       	ldi	r20, 0x7A	; 122
     7ca:	54 e4       	ldi	r21, 0x44	; 68
     7cc:	bc 01       	movw	r22, r24
     7ce:	cd 01       	movw	r24, r26
     7d0:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     7e0:	a2 2e       	mov	r10, r18
     7e2:	b3 2e       	mov	r11, r19
     7e4:	c4 2e       	mov	r12, r20
     7e6:	d5 2e       	mov	r13, r21
     7e8:	e6 2e       	mov	r14, r22
     7ea:	f7 2e       	mov	r15, r23
     7ec:	08 2f       	mov	r16, r24
     7ee:	19 2f       	mov	r17, r25
     7f0:	d6 01       	movw	r26, r12
     7f2:	c5 01       	movw	r24, r10
     7f4:	bc 01       	movw	r22, r24
     7f6:	cd 01       	movw	r24, r26
	BNO_Read(&data,BNO055_QUATERNION_DATA_X_MSB_ADDR);
     7f8:	72 dd       	rcall	.-1308   	; 0x2de <__portable_avr_delay_cycles>
     7fa:	63 e2       	ldi	r22, 0x23	; 35
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	8e dd       	rcall	.-1252   	; 0x31e <BNO_Read>
	angle[1]=((uint16_t)data)<<8;
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	02 96       	adiw	r24, 0x02	; 2
     808:	29 81       	ldd	r18, Y+1	; 0x01
     80a:	22 2f       	mov	r18, r18
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	32 2f       	mov	r19, r18
     810:	22 27       	eor	r18, r18
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
	data=0xFF;
     816:	31 83       	std	Z+1, r19	; 0x01
     818:	8f ef       	ldi	r24, 0xFF	; 255
	
	delay_ms(10);
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	54 dd       	rcall	.-1368   	; 0x2c6 <sysclk_get_cpu_hz>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	9c 01       	movw	r18, r24
     824:	ad 01       	movw	r20, r26
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	cb 01       	movw	r24, r22
     82c:	82 2e       	mov	r8, r18
     82e:	93 2e       	mov	r9, r19
     830:	a4 2e       	mov	r10, r20
     832:	b5 2e       	mov	r11, r21
     834:	c6 2e       	mov	r12, r22
     836:	d7 2e       	mov	r13, r23
     838:	e8 2e       	mov	r14, r24
     83a:	f9 2e       	mov	r15, r25
     83c:	28 2d       	mov	r18, r8
     83e:	39 2d       	mov	r19, r9
     840:	4a 2d       	mov	r20, r10
     842:	5b 2d       	mov	r21, r11
     844:	6c 2d       	mov	r22, r12
     846:	7d 2d       	mov	r23, r13
     848:	8e 2d       	mov	r24, r14
     84a:	9f 2d       	mov	r25, r15
     84c:	01 e0       	ldi	r16, 0x01	; 1
     84e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     852:	2c a3       	std	Y+36, r18	; 0x24
     854:	3d a3       	std	Y+37, r19	; 0x25
     856:	4e a3       	std	Y+38, r20	; 0x26
     858:	5f a3       	std	Y+39, r21	; 0x27
     85a:	68 a7       	std	Y+40, r22	; 0x28
     85c:	79 a7       	std	Y+41, r23	; 0x29
     85e:	8a a7       	std	Y+42, r24	; 0x2a
     860:	9b a7       	std	Y+43, r25	; 0x2b
     862:	8c a0       	ldd	r8, Y+36	; 0x24
     864:	9d a0       	ldd	r9, Y+37	; 0x25
     866:	ae a0       	ldd	r10, Y+38	; 0x26
     868:	bf a0       	ldd	r11, Y+39	; 0x27
     86a:	c8 a4       	ldd	r12, Y+40	; 0x28
     86c:	d9 a4       	ldd	r13, Y+41	; 0x29
     86e:	ea a4       	ldd	r14, Y+42	; 0x2a
     870:	fb a4       	ldd	r15, Y+43	; 0x2b
     872:	28 2d       	mov	r18, r8
     874:	39 2d       	mov	r19, r9
     876:	4a 2d       	mov	r20, r10
     878:	5b 2d       	mov	r21, r11
     87a:	6c 2d       	mov	r22, r12
     87c:	7d 2d       	mov	r23, r13
     87e:	8e 2d       	mov	r24, r14
     880:	9f 2d       	mov	r25, r15
     882:	02 e0       	ldi	r16, 0x02	; 2
     884:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     888:	2c a7       	std	Y+44, r18	; 0x2c
     88a:	3d a7       	std	Y+45, r19	; 0x2d
     88c:	4e a7       	std	Y+46, r20	; 0x2e
     88e:	5f a7       	std	Y+47, r21	; 0x2f
     890:	68 ab       	std	Y+48, r22	; 0x30
     892:	79 ab       	std	Y+49, r23	; 0x31
     894:	8a ab       	std	Y+50, r24	; 0x32
     896:	9b ab       	std	Y+51, r25	; 0x33
     898:	28 2d       	mov	r18, r8
     89a:	39 2d       	mov	r19, r9
     89c:	4a 2d       	mov	r20, r10
     89e:	5b 2d       	mov	r21, r11
     8a0:	6c 2d       	mov	r22, r12
     8a2:	7d 2d       	mov	r23, r13
     8a4:	8e 2d       	mov	r24, r14
     8a6:	9f 2d       	mov	r25, r15
     8a8:	ac a4       	ldd	r10, Y+44	; 0x2c
     8aa:	bd a4       	ldd	r11, Y+45	; 0x2d
     8ac:	ce a4       	ldd	r12, Y+46	; 0x2e
     8ae:	df a4       	ldd	r13, Y+47	; 0x2f
     8b0:	e8 a8       	ldd	r14, Y+48	; 0x30
     8b2:	f9 a8       	ldd	r15, Y+49	; 0x31
     8b4:	0a a9       	ldd	r16, Y+50	; 0x32
     8b6:	1b a9       	ldd	r17, Y+51	; 0x33
     8b8:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     8bc:	22 2e       	mov	r2, r18
     8be:	33 2e       	mov	r3, r19
     8c0:	44 2e       	mov	r4, r20
     8c2:	55 2e       	mov	r5, r21
     8c4:	66 2e       	mov	r6, r22
     8c6:	77 2e       	mov	r7, r23
     8c8:	88 2e       	mov	r8, r24
     8ca:	99 2e       	mov	r9, r25
     8cc:	0f 2e       	mov	r0, r31
     8ce:	f6 e0       	ldi	r31, 0x06	; 6
     8d0:	af 2e       	mov	r10, r31
     8d2:	f0 2d       	mov	r31, r0
     8d4:	b1 2c       	mov	r11, r1
     8d6:	c1 2c       	mov	r12, r1
     8d8:	d1 2c       	mov	r13, r1
     8da:	e1 2c       	mov	r14, r1
     8dc:	f1 2c       	mov	r15, r1
     8de:	00 e0       	ldi	r16, 0x00	; 0
     8e0:	10 e0       	ldi	r17, 0x00	; 0
     8e2:	22 2d       	mov	r18, r2
     8e4:	33 2d       	mov	r19, r3
     8e6:	44 2d       	mov	r20, r4
     8e8:	55 2d       	mov	r21, r5
     8ea:	66 2d       	mov	r22, r6
     8ec:	77 2d       	mov	r23, r7
     8ee:	88 2d       	mov	r24, r8
     8f0:	99 2d       	mov	r25, r9
     8f2:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     8f6:	22 2e       	mov	r2, r18
     8f8:	33 2e       	mov	r3, r19
     8fa:	44 2e       	mov	r4, r20
     8fc:	55 2e       	mov	r5, r21
     8fe:	66 2e       	mov	r6, r22
     900:	77 2e       	mov	r7, r23
     902:	88 2e       	mov	r8, r24
     904:	99 2e       	mov	r9, r25
     906:	a2 2c       	mov	r10, r2
     908:	b3 2c       	mov	r11, r3
     90a:	c4 2c       	mov	r12, r4
     90c:	d5 2c       	mov	r13, r5
     90e:	e6 2c       	mov	r14, r6
     910:	f7 2c       	mov	r15, r7
     912:	08 2d       	mov	r16, r8
     914:	19 2d       	mov	r17, r9
     916:	2a 2d       	mov	r18, r10
     918:	3b 2d       	mov	r19, r11
     91a:	4c 2d       	mov	r20, r12
     91c:	5d 2d       	mov	r21, r13
     91e:	6e 2d       	mov	r22, r14
     920:	7f 2d       	mov	r23, r15
     922:	80 2f       	mov	r24, r16
     924:	91 2f       	mov	r25, r17
     926:	29 51       	subi	r18, 0x19	; 25
     928:	3c 4f       	sbci	r19, 0xFC	; 252
     92a:	4f 4f       	sbci	r20, 0xFF	; 255
     92c:	5f 4f       	sbci	r21, 0xFF	; 255
     92e:	6f 4f       	sbci	r22, 0xFF	; 255
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	8f 4f       	sbci	r24, 0xFF	; 255
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	a2 2e       	mov	r10, r18
     938:	b3 2e       	mov	r11, r19
     93a:	c4 2e       	mov	r12, r20
     93c:	d5 2e       	mov	r13, r21
     93e:	e6 2e       	mov	r14, r22
     940:	f7 2e       	mov	r15, r23
     942:	08 2f       	mov	r16, r24
     944:	19 2f       	mov	r17, r25
     946:	2a 2d       	mov	r18, r10
     948:	3b 2d       	mov	r19, r11
     94a:	4c 2d       	mov	r20, r12
     94c:	5d 2d       	mov	r21, r13
     94e:	6e 2d       	mov	r22, r14
     950:	7f 2d       	mov	r23, r15
     952:	80 2f       	mov	r24, r16
     954:	91 2f       	mov	r25, r17
     956:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4a e7       	ldi	r20, 0x7A	; 122
     964:	54 e4       	ldi	r21, 0x44	; 68
     966:	bc 01       	movw	r22, r24
     968:	cd 01       	movw	r24, r26
     96a:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     96e:	dc 01       	movw	r26, r24
     970:	cb 01       	movw	r24, r22
     972:	bc 01       	movw	r22, r24
     974:	cd 01       	movw	r24, r26
     976:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     97a:	a2 2e       	mov	r10, r18
     97c:	b3 2e       	mov	r11, r19
     97e:	c4 2e       	mov	r12, r20
     980:	d5 2e       	mov	r13, r21
     982:	e6 2e       	mov	r14, r22
     984:	f7 2e       	mov	r15, r23
     986:	08 2f       	mov	r16, r24
     988:	19 2f       	mov	r17, r25
     98a:	d6 01       	movw	r26, r12
     98c:	c5 01       	movw	r24, r10
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
	BNO_Read(&data,BNO055_QUATERNION_DATA_X_LSB_ADDR);
     992:	a5 dc       	rcall	.-1718   	; 0x2de <__portable_avr_delay_cycles>
     994:	62 e2       	ldi	r22, 0x22	; 34
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	c1 dc       	rcall	.-1662   	; 0x31e <BNO_Read>
	angle[1]+=data;
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	9b 81       	ldd	r25, Y+3	; 0x03
     9a0:	02 96       	adiw	r24, 0x02	; 2
     9a2:	2a 81       	ldd	r18, Y+2	; 0x02
     9a4:	3b 81       	ldd	r19, Y+3	; 0x03
     9a6:	2e 5f       	subi	r18, 0xFE	; 254
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	f9 01       	movw	r30, r18
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	22 2f       	mov	r18, r18
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	24 0f       	add	r18, r20
     9b8:	35 1f       	adc	r19, r21
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
     9be:	31 83       	std	Z+1, r19	; 0x01
	angle[1]=angle[1];
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
     9c4:	02 96       	adiw	r24, 0x02	; 2
     9c6:	2a 81       	ldd	r18, Y+2	; 0x02
     9c8:	3b 81       	ldd	r19, Y+3	; 0x03
     9ca:	f9 01       	movw	r30, r18
     9cc:	22 81       	ldd	r18, Z+2	; 0x02
     9ce:	33 81       	ldd	r19, Z+3	; 0x03
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
	
	//reads the roll
	data=0xFF;
     9d4:	31 83       	std	Z+1, r19	; 0x01
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
	
	delay_ms(10);
     9d8:	89 83       	std	Y+1, r24	; 0x01
     9da:	75 dc       	rcall	.-1814   	; 0x2c6 <sysclk_get_cpu_hz>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	9c 01       	movw	r18, r24
     9e2:	ad 01       	movw	r20, r26
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	cb 01       	movw	r24, r22
     9ea:	82 2e       	mov	r8, r18
     9ec:	93 2e       	mov	r9, r19
     9ee:	a4 2e       	mov	r10, r20
     9f0:	b5 2e       	mov	r11, r21
     9f2:	c6 2e       	mov	r12, r22
     9f4:	d7 2e       	mov	r13, r23
     9f6:	e8 2e       	mov	r14, r24
     9f8:	f9 2e       	mov	r15, r25
     9fa:	28 2d       	mov	r18, r8
     9fc:	39 2d       	mov	r19, r9
     9fe:	4a 2d       	mov	r20, r10
     a00:	5b 2d       	mov	r21, r11
     a02:	6c 2d       	mov	r22, r12
     a04:	7d 2d       	mov	r23, r13
     a06:	8e 2d       	mov	r24, r14
     a08:	9f 2d       	mov	r25, r15
     a0a:	01 e0       	ldi	r16, 0x01	; 1
     a0c:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     a10:	2c ab       	std	Y+52, r18	; 0x34
     a12:	3d ab       	std	Y+53, r19	; 0x35
     a14:	4e ab       	std	Y+54, r20	; 0x36
     a16:	5f ab       	std	Y+55, r21	; 0x37
     a18:	68 af       	std	Y+56, r22	; 0x38
     a1a:	79 af       	std	Y+57, r23	; 0x39
     a1c:	8a af       	std	Y+58, r24	; 0x3a
     a1e:	9b af       	std	Y+59, r25	; 0x3b
     a20:	8c a8       	ldd	r8, Y+52	; 0x34
     a22:	9d a8       	ldd	r9, Y+53	; 0x35
     a24:	ae a8       	ldd	r10, Y+54	; 0x36
     a26:	bf a8       	ldd	r11, Y+55	; 0x37
     a28:	c8 ac       	ldd	r12, Y+56	; 0x38
     a2a:	d9 ac       	ldd	r13, Y+57	; 0x39
     a2c:	ea ac       	ldd	r14, Y+58	; 0x3a
     a2e:	fb ac       	ldd	r15, Y+59	; 0x3b
     a30:	28 2d       	mov	r18, r8
     a32:	39 2d       	mov	r19, r9
     a34:	4a 2d       	mov	r20, r10
     a36:	5b 2d       	mov	r21, r11
     a38:	6c 2d       	mov	r22, r12
     a3a:	7d 2d       	mov	r23, r13
     a3c:	8e 2d       	mov	r24, r14
     a3e:	9f 2d       	mov	r25, r15
     a40:	02 e0       	ldi	r16, 0x02	; 2
     a42:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     a46:	2c af       	std	Y+60, r18	; 0x3c
     a48:	3d af       	std	Y+61, r19	; 0x3d
     a4a:	4e af       	std	Y+62, r20	; 0x3e
     a4c:	5f af       	std	Y+63, r21	; 0x3f
     a4e:	21 96       	adiw	r28, 0x01	; 1
     a50:	6f af       	std	Y+63, r22	; 0x3f
     a52:	21 97       	sbiw	r28, 0x01	; 1
     a54:	22 96       	adiw	r28, 0x02	; 2
     a56:	7f af       	std	Y+63, r23	; 0x3f
     a58:	22 97       	sbiw	r28, 0x02	; 2
     a5a:	23 96       	adiw	r28, 0x03	; 3
     a5c:	8f af       	std	Y+63, r24	; 0x3f
     a5e:	23 97       	sbiw	r28, 0x03	; 3
     a60:	24 96       	adiw	r28, 0x04	; 4
     a62:	9f af       	std	Y+63, r25	; 0x3f
     a64:	24 97       	sbiw	r28, 0x04	; 4
     a66:	28 2d       	mov	r18, r8
     a68:	39 2d       	mov	r19, r9
     a6a:	4a 2d       	mov	r20, r10
     a6c:	5b 2d       	mov	r21, r11
     a6e:	6c 2d       	mov	r22, r12
     a70:	7d 2d       	mov	r23, r13
     a72:	8e 2d       	mov	r24, r14
     a74:	9f 2d       	mov	r25, r15
     a76:	ac ac       	ldd	r10, Y+60	; 0x3c
     a78:	bd ac       	ldd	r11, Y+61	; 0x3d
     a7a:	ce ac       	ldd	r12, Y+62	; 0x3e
     a7c:	df ac       	ldd	r13, Y+63	; 0x3f
     a7e:	21 96       	adiw	r28, 0x01	; 1
     a80:	ef ac       	ldd	r14, Y+63	; 0x3f
     a82:	21 97       	sbiw	r28, 0x01	; 1
     a84:	22 96       	adiw	r28, 0x02	; 2
     a86:	ff ac       	ldd	r15, Y+63	; 0x3f
     a88:	22 97       	sbiw	r28, 0x02	; 2
     a8a:	23 96       	adiw	r28, 0x03	; 3
     a8c:	0f ad       	ldd	r16, Y+63	; 0x3f
     a8e:	23 97       	sbiw	r28, 0x03	; 3
     a90:	24 96       	adiw	r28, 0x04	; 4
     a92:	1f ad       	ldd	r17, Y+63	; 0x3f
     a94:	24 97       	sbiw	r28, 0x04	; 4
     a96:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     a9a:	22 2e       	mov	r2, r18
     a9c:	33 2e       	mov	r3, r19
     a9e:	44 2e       	mov	r4, r20
     aa0:	55 2e       	mov	r5, r21
     aa2:	66 2e       	mov	r6, r22
     aa4:	77 2e       	mov	r7, r23
     aa6:	88 2e       	mov	r8, r24
     aa8:	99 2e       	mov	r9, r25
     aaa:	0f 2e       	mov	r0, r31
     aac:	f6 e0       	ldi	r31, 0x06	; 6
     aae:	af 2e       	mov	r10, r31
     ab0:	f0 2d       	mov	r31, r0
     ab2:	b1 2c       	mov	r11, r1
     ab4:	c1 2c       	mov	r12, r1
     ab6:	d1 2c       	mov	r13, r1
     ab8:	e1 2c       	mov	r14, r1
     aba:	f1 2c       	mov	r15, r1
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	22 2d       	mov	r18, r2
     ac2:	33 2d       	mov	r19, r3
     ac4:	44 2d       	mov	r20, r4
     ac6:	55 2d       	mov	r21, r5
     ac8:	66 2d       	mov	r22, r6
     aca:	77 2d       	mov	r23, r7
     acc:	88 2d       	mov	r24, r8
     ace:	99 2d       	mov	r25, r9
     ad0:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     ad4:	22 2e       	mov	r2, r18
     ad6:	33 2e       	mov	r3, r19
     ad8:	44 2e       	mov	r4, r20
     ada:	55 2e       	mov	r5, r21
     adc:	66 2e       	mov	r6, r22
     ade:	77 2e       	mov	r7, r23
     ae0:	88 2e       	mov	r8, r24
     ae2:	99 2e       	mov	r9, r25
     ae4:	a2 2c       	mov	r10, r2
     ae6:	b3 2c       	mov	r11, r3
     ae8:	c4 2c       	mov	r12, r4
     aea:	d5 2c       	mov	r13, r5
     aec:	e6 2c       	mov	r14, r6
     aee:	f7 2c       	mov	r15, r7
     af0:	08 2d       	mov	r16, r8
     af2:	19 2d       	mov	r17, r9
     af4:	2a 2d       	mov	r18, r10
     af6:	3b 2d       	mov	r19, r11
     af8:	4c 2d       	mov	r20, r12
     afa:	5d 2d       	mov	r21, r13
     afc:	6e 2d       	mov	r22, r14
     afe:	7f 2d       	mov	r23, r15
     b00:	80 2f       	mov	r24, r16
     b02:	91 2f       	mov	r25, r17
     b04:	29 51       	subi	r18, 0x19	; 25
     b06:	3c 4f       	sbci	r19, 0xFC	; 252
     b08:	4f 4f       	sbci	r20, 0xFF	; 255
     b0a:	5f 4f       	sbci	r21, 0xFF	; 255
     b0c:	6f 4f       	sbci	r22, 0xFF	; 255
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	8f 4f       	sbci	r24, 0xFF	; 255
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	a2 2e       	mov	r10, r18
     b16:	b3 2e       	mov	r11, r19
     b18:	c4 2e       	mov	r12, r20
     b1a:	d5 2e       	mov	r13, r21
     b1c:	e6 2e       	mov	r14, r22
     b1e:	f7 2e       	mov	r15, r23
     b20:	08 2f       	mov	r16, r24
     b22:	19 2f       	mov	r17, r25
     b24:	2a 2d       	mov	r18, r10
     b26:	3b 2d       	mov	r19, r11
     b28:	4c 2d       	mov	r20, r12
     b2a:	5d 2d       	mov	r21, r13
     b2c:	6e 2d       	mov	r22, r14
     b2e:	7f 2d       	mov	r23, r15
     b30:	80 2f       	mov	r24, r16
     b32:	91 2f       	mov	r25, r17
     b34:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	4a e7       	ldi	r20, 0x7A	; 122
     b42:	54 e4       	ldi	r21, 0x44	; 68
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     b58:	a2 2e       	mov	r10, r18
     b5a:	b3 2e       	mov	r11, r19
     b5c:	c4 2e       	mov	r12, r20
     b5e:	d5 2e       	mov	r13, r21
     b60:	e6 2e       	mov	r14, r22
     b62:	f7 2e       	mov	r15, r23
     b64:	08 2f       	mov	r16, r24
     b66:	19 2f       	mov	r17, r25
     b68:	d6 01       	movw	r26, r12
     b6a:	c5 01       	movw	r24, r10
     b6c:	bc 01       	movw	r22, r24
     b6e:	cd 01       	movw	r24, r26
	BNO_Read(&data,BNO055_QUATERNION_DATA_Y_MSB_ADDR);
     b70:	b6 db       	rcall	.-2196   	; 0x2de <__portable_avr_delay_cycles>
     b72:	65 e2       	ldi	r22, 0x25	; 37
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
	angle[2]=((uint16_t)data)<<8;
     b78:	d2 db       	rcall	.-2140   	; 0x31e <BNO_Read>
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	9b 81       	ldd	r25, Y+3	; 0x03
     b7e:	04 96       	adiw	r24, 0x04	; 4
     b80:	29 81       	ldd	r18, Y+1	; 0x01
     b82:	22 2f       	mov	r18, r18
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	32 2f       	mov	r19, r18
     b88:	22 27       	eor	r18, r18
     b8a:	fc 01       	movw	r30, r24
     b8c:	20 83       	st	Z, r18
	
	data=0xFF;
     b8e:	31 83       	std	Z+1, r19	; 0x01
     b90:	8f ef       	ldi	r24, 0xFF	; 255
	
	delay_ms(10);
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	98 db       	rcall	.-2256   	; 0x2c6 <sysclk_get_cpu_hz>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	9c 01       	movw	r18, r24
     b9c:	ad 01       	movw	r20, r26
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	cb 01       	movw	r24, r22
     ba4:	82 2e       	mov	r8, r18
     ba6:	93 2e       	mov	r9, r19
     ba8:	a4 2e       	mov	r10, r20
     baa:	b5 2e       	mov	r11, r21
     bac:	c6 2e       	mov	r12, r22
     bae:	d7 2e       	mov	r13, r23
     bb0:	e8 2e       	mov	r14, r24
     bb2:	f9 2e       	mov	r15, r25
     bb4:	28 2d       	mov	r18, r8
     bb6:	39 2d       	mov	r19, r9
     bb8:	4a 2d       	mov	r20, r10
     bba:	5b 2d       	mov	r21, r11
     bbc:	6c 2d       	mov	r22, r12
     bbe:	7d 2d       	mov	r23, r13
     bc0:	8e 2d       	mov	r24, r14
     bc2:	9f 2d       	mov	r25, r15
     bc4:	01 e0       	ldi	r16, 0x01	; 1
     bc6:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     bca:	25 96       	adiw	r28, 0x05	; 5
     bcc:	2f af       	std	Y+63, r18	; 0x3f
     bce:	25 97       	sbiw	r28, 0x05	; 5
     bd0:	26 96       	adiw	r28, 0x06	; 6
     bd2:	3f af       	std	Y+63, r19	; 0x3f
     bd4:	26 97       	sbiw	r28, 0x06	; 6
     bd6:	27 96       	adiw	r28, 0x07	; 7
     bd8:	4f af       	std	Y+63, r20	; 0x3f
     bda:	27 97       	sbiw	r28, 0x07	; 7
     bdc:	28 96       	adiw	r28, 0x08	; 8
     bde:	5f af       	std	Y+63, r21	; 0x3f
     be0:	28 97       	sbiw	r28, 0x08	; 8
     be2:	29 96       	adiw	r28, 0x09	; 9
     be4:	6f af       	std	Y+63, r22	; 0x3f
     be6:	29 97       	sbiw	r28, 0x09	; 9
     be8:	2a 96       	adiw	r28, 0x0a	; 10
     bea:	7f af       	std	Y+63, r23	; 0x3f
     bec:	2a 97       	sbiw	r28, 0x0a	; 10
     bee:	2b 96       	adiw	r28, 0x0b	; 11
     bf0:	8f af       	std	Y+63, r24	; 0x3f
     bf2:	2b 97       	sbiw	r28, 0x0b	; 11
     bf4:	2c 96       	adiw	r28, 0x0c	; 12
     bf6:	9f af       	std	Y+63, r25	; 0x3f
     bf8:	2c 97       	sbiw	r28, 0x0c	; 12
     bfa:	25 96       	adiw	r28, 0x05	; 5
     bfc:	8f ac       	ldd	r8, Y+63	; 0x3f
     bfe:	25 97       	sbiw	r28, 0x05	; 5
     c00:	26 96       	adiw	r28, 0x06	; 6
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	26 97       	sbiw	r28, 0x06	; 6
     c06:	27 96       	adiw	r28, 0x07	; 7
     c08:	af ac       	ldd	r10, Y+63	; 0x3f
     c0a:	27 97       	sbiw	r28, 0x07	; 7
     c0c:	28 96       	adiw	r28, 0x08	; 8
     c0e:	bf ac       	ldd	r11, Y+63	; 0x3f
     c10:	28 97       	sbiw	r28, 0x08	; 8
     c12:	29 96       	adiw	r28, 0x09	; 9
     c14:	cf ac       	ldd	r12, Y+63	; 0x3f
     c16:	29 97       	sbiw	r28, 0x09	; 9
     c18:	2a 96       	adiw	r28, 0x0a	; 10
     c1a:	df ac       	ldd	r13, Y+63	; 0x3f
     c1c:	2a 97       	sbiw	r28, 0x0a	; 10
     c1e:	2b 96       	adiw	r28, 0x0b	; 11
     c20:	ef ac       	ldd	r14, Y+63	; 0x3f
     c22:	2b 97       	sbiw	r28, 0x0b	; 11
     c24:	2c 96       	adiw	r28, 0x0c	; 12
     c26:	ff ac       	ldd	r15, Y+63	; 0x3f
     c28:	2c 97       	sbiw	r28, 0x0c	; 12
     c2a:	28 2d       	mov	r18, r8
     c2c:	39 2d       	mov	r19, r9
     c2e:	4a 2d       	mov	r20, r10
     c30:	5b 2d       	mov	r21, r11
     c32:	6c 2d       	mov	r22, r12
     c34:	7d 2d       	mov	r23, r13
     c36:	8e 2d       	mov	r24, r14
     c38:	9f 2d       	mov	r25, r15
     c3a:	02 e0       	ldi	r16, 0x02	; 2
     c3c:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     c40:	2d 96       	adiw	r28, 0x0d	; 13
     c42:	2f af       	std	Y+63, r18	; 0x3f
     c44:	2d 97       	sbiw	r28, 0x0d	; 13
     c46:	2e 96       	adiw	r28, 0x0e	; 14
     c48:	3f af       	std	Y+63, r19	; 0x3f
     c4a:	2e 97       	sbiw	r28, 0x0e	; 14
     c4c:	2f 96       	adiw	r28, 0x0f	; 15
     c4e:	4f af       	std	Y+63, r20	; 0x3f
     c50:	2f 97       	sbiw	r28, 0x0f	; 15
     c52:	60 96       	adiw	r28, 0x10	; 16
     c54:	5f af       	std	Y+63, r21	; 0x3f
     c56:	60 97       	sbiw	r28, 0x10	; 16
     c58:	61 96       	adiw	r28, 0x11	; 17
     c5a:	6f af       	std	Y+63, r22	; 0x3f
     c5c:	61 97       	sbiw	r28, 0x11	; 17
     c5e:	62 96       	adiw	r28, 0x12	; 18
     c60:	7f af       	std	Y+63, r23	; 0x3f
     c62:	62 97       	sbiw	r28, 0x12	; 18
     c64:	63 96       	adiw	r28, 0x13	; 19
     c66:	8f af       	std	Y+63, r24	; 0x3f
     c68:	63 97       	sbiw	r28, 0x13	; 19
     c6a:	64 96       	adiw	r28, 0x14	; 20
     c6c:	9f af       	std	Y+63, r25	; 0x3f
     c6e:	64 97       	sbiw	r28, 0x14	; 20
     c70:	28 2d       	mov	r18, r8
     c72:	39 2d       	mov	r19, r9
     c74:	4a 2d       	mov	r20, r10
     c76:	5b 2d       	mov	r21, r11
     c78:	6c 2d       	mov	r22, r12
     c7a:	7d 2d       	mov	r23, r13
     c7c:	8e 2d       	mov	r24, r14
     c7e:	9f 2d       	mov	r25, r15
     c80:	2d 96       	adiw	r28, 0x0d	; 13
     c82:	af ac       	ldd	r10, Y+63	; 0x3f
     c84:	2d 97       	sbiw	r28, 0x0d	; 13
     c86:	2e 96       	adiw	r28, 0x0e	; 14
     c88:	bf ac       	ldd	r11, Y+63	; 0x3f
     c8a:	2e 97       	sbiw	r28, 0x0e	; 14
     c8c:	2f 96       	adiw	r28, 0x0f	; 15
     c8e:	cf ac       	ldd	r12, Y+63	; 0x3f
     c90:	2f 97       	sbiw	r28, 0x0f	; 15
     c92:	60 96       	adiw	r28, 0x10	; 16
     c94:	df ac       	ldd	r13, Y+63	; 0x3f
     c96:	60 97       	sbiw	r28, 0x10	; 16
     c98:	61 96       	adiw	r28, 0x11	; 17
     c9a:	ef ac       	ldd	r14, Y+63	; 0x3f
     c9c:	61 97       	sbiw	r28, 0x11	; 17
     c9e:	62 96       	adiw	r28, 0x12	; 18
     ca0:	ff ac       	ldd	r15, Y+63	; 0x3f
     ca2:	62 97       	sbiw	r28, 0x12	; 18
     ca4:	63 96       	adiw	r28, 0x13	; 19
     ca6:	0f ad       	ldd	r16, Y+63	; 0x3f
     ca8:	63 97       	sbiw	r28, 0x13	; 19
     caa:	64 96       	adiw	r28, 0x14	; 20
     cac:	1f ad       	ldd	r17, Y+63	; 0x3f
     cae:	64 97       	sbiw	r28, 0x14	; 20
     cb0:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     cb4:	22 2e       	mov	r2, r18
     cb6:	33 2e       	mov	r3, r19
     cb8:	44 2e       	mov	r4, r20
     cba:	55 2e       	mov	r5, r21
     cbc:	66 2e       	mov	r6, r22
     cbe:	77 2e       	mov	r7, r23
     cc0:	88 2e       	mov	r8, r24
     cc2:	99 2e       	mov	r9, r25
     cc4:	0f 2e       	mov	r0, r31
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	af 2e       	mov	r10, r31
     cca:	f0 2d       	mov	r31, r0
     ccc:	b1 2c       	mov	r11, r1
     cce:	c1 2c       	mov	r12, r1
     cd0:	d1 2c       	mov	r13, r1
     cd2:	e1 2c       	mov	r14, r1
     cd4:	f1 2c       	mov	r15, r1
     cd6:	00 e0       	ldi	r16, 0x00	; 0
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	22 2d       	mov	r18, r2
     cdc:	33 2d       	mov	r19, r3
     cde:	44 2d       	mov	r20, r4
     ce0:	55 2d       	mov	r21, r5
     ce2:	66 2d       	mov	r22, r6
     ce4:	77 2d       	mov	r23, r7
     ce6:	88 2d       	mov	r24, r8
     ce8:	99 2d       	mov	r25, r9
     cea:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     cee:	22 2e       	mov	r2, r18
     cf0:	33 2e       	mov	r3, r19
     cf2:	44 2e       	mov	r4, r20
     cf4:	55 2e       	mov	r5, r21
     cf6:	66 2e       	mov	r6, r22
     cf8:	77 2e       	mov	r7, r23
     cfa:	88 2e       	mov	r8, r24
     cfc:	99 2e       	mov	r9, r25
     cfe:	a2 2c       	mov	r10, r2
     d00:	b3 2c       	mov	r11, r3
     d02:	c4 2c       	mov	r12, r4
     d04:	d5 2c       	mov	r13, r5
     d06:	e6 2c       	mov	r14, r6
     d08:	f7 2c       	mov	r15, r7
     d0a:	08 2d       	mov	r16, r8
     d0c:	19 2d       	mov	r17, r9
     d0e:	2a 2d       	mov	r18, r10
     d10:	3b 2d       	mov	r19, r11
     d12:	4c 2d       	mov	r20, r12
     d14:	5d 2d       	mov	r21, r13
     d16:	6e 2d       	mov	r22, r14
     d18:	7f 2d       	mov	r23, r15
     d1a:	80 2f       	mov	r24, r16
     d1c:	91 2f       	mov	r25, r17
     d1e:	29 51       	subi	r18, 0x19	; 25
     d20:	3c 4f       	sbci	r19, 0xFC	; 252
     d22:	4f 4f       	sbci	r20, 0xFF	; 255
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	6f 4f       	sbci	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	a2 2e       	mov	r10, r18
     d30:	b3 2e       	mov	r11, r19
     d32:	c4 2e       	mov	r12, r20
     d34:	d5 2e       	mov	r13, r21
     d36:	e6 2e       	mov	r14, r22
     d38:	f7 2e       	mov	r15, r23
     d3a:	08 2f       	mov	r16, r24
     d3c:	19 2f       	mov	r17, r25
     d3e:	2a 2d       	mov	r18, r10
     d40:	3b 2d       	mov	r19, r11
     d42:	4c 2d       	mov	r20, r12
     d44:	5d 2d       	mov	r21, r13
     d46:	6e 2d       	mov	r22, r14
     d48:	7f 2d       	mov	r23, r15
     d4a:	80 2f       	mov	r24, r16
     d4c:	91 2f       	mov	r25, r17
     d4e:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a e7       	ldi	r20, 0x7A	; 122
     d5c:	54 e4       	ldi	r21, 0x44	; 68
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     d72:	a2 2e       	mov	r10, r18
     d74:	b3 2e       	mov	r11, r19
     d76:	c4 2e       	mov	r12, r20
     d78:	d5 2e       	mov	r13, r21
     d7a:	e6 2e       	mov	r14, r22
     d7c:	f7 2e       	mov	r15, r23
     d7e:	08 2f       	mov	r16, r24
     d80:	19 2f       	mov	r17, r25
     d82:	d6 01       	movw	r26, r12
     d84:	c5 01       	movw	r24, r10
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
	BNO_Read(&data,BNO055_QUATERNION_DATA_Y_LSB_ADDR);
     d8a:	a9 da       	rcall	.-2734   	; 0x2de <__portable_avr_delay_cycles>
     d8c:	64 e2       	ldi	r22, 0x24	; 36
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	c5 da       	rcall	.-2678   	; 0x31e <BNO_Read>
	angle[2]+=data;
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	04 96       	adiw	r24, 0x04	; 4
     d9a:	2a 81       	ldd	r18, Y+2	; 0x02
     d9c:	3b 81       	ldd	r19, Y+3	; 0x03
     d9e:	2c 5f       	subi	r18, 0xFC	; 252
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	f9 01       	movw	r30, r18
     da4:	40 81       	ld	r20, Z
     da6:	51 81       	ldd	r21, Z+1	; 0x01
     da8:	29 81       	ldd	r18, Y+1	; 0x01
     daa:	22 2f       	mov	r18, r18
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	24 0f       	add	r18, r20
     db0:	35 1f       	adc	r19, r21
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
	angle[2]=angle[2];
     db6:	31 83       	std	Z+1, r19	; 0x01
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	04 96       	adiw	r24, 0x04	; 4
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	3b 81       	ldd	r19, Y+3	; 0x03
     dc2:	f9 01       	movw	r30, r18
     dc4:	24 81       	ldd	r18, Z+4	; 0x04
     dc6:	35 81       	ldd	r19, Z+5	; 0x05
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
	
	data = 0xFF;
     dcc:	31 83       	std	Z+1, r19	; 0x01
     dce:	8f ef       	ldi	r24, 0xFF	; 255
		
	delay_ms(10);
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	79 da       	rcall	.-2830   	; 0x2c6 <sysclk_get_cpu_hz>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9c 01       	movw	r18, r24
     dda:	ad 01       	movw	r20, r26
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	cb 01       	movw	r24, r22
     de2:	82 2e       	mov	r8, r18
     de4:	93 2e       	mov	r9, r19
     de6:	a4 2e       	mov	r10, r20
     de8:	b5 2e       	mov	r11, r21
     dea:	c6 2e       	mov	r12, r22
     dec:	d7 2e       	mov	r13, r23
     dee:	e8 2e       	mov	r14, r24
     df0:	f9 2e       	mov	r15, r25
     df2:	28 2d       	mov	r18, r8
     df4:	39 2d       	mov	r19, r9
     df6:	4a 2d       	mov	r20, r10
     df8:	5b 2d       	mov	r21, r11
     dfa:	6c 2d       	mov	r22, r12
     dfc:	7d 2d       	mov	r23, r13
     dfe:	8e 2d       	mov	r24, r14
     e00:	9f 2d       	mov	r25, r15
     e02:	01 e0       	ldi	r16, 0x01	; 1
     e04:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     e08:	65 96       	adiw	r28, 0x15	; 21
     e0a:	2f af       	std	Y+63, r18	; 0x3f
     e0c:	65 97       	sbiw	r28, 0x15	; 21
     e0e:	66 96       	adiw	r28, 0x16	; 22
     e10:	3f af       	std	Y+63, r19	; 0x3f
     e12:	66 97       	sbiw	r28, 0x16	; 22
     e14:	67 96       	adiw	r28, 0x17	; 23
     e16:	4f af       	std	Y+63, r20	; 0x3f
     e18:	67 97       	sbiw	r28, 0x17	; 23
     e1a:	68 96       	adiw	r28, 0x18	; 24
     e1c:	5f af       	std	Y+63, r21	; 0x3f
     e1e:	68 97       	sbiw	r28, 0x18	; 24
     e20:	69 96       	adiw	r28, 0x19	; 25
     e22:	6f af       	std	Y+63, r22	; 0x3f
     e24:	69 97       	sbiw	r28, 0x19	; 25
     e26:	6a 96       	adiw	r28, 0x1a	; 26
     e28:	7f af       	std	Y+63, r23	; 0x3f
     e2a:	6a 97       	sbiw	r28, 0x1a	; 26
     e2c:	6b 96       	adiw	r28, 0x1b	; 27
     e2e:	8f af       	std	Y+63, r24	; 0x3f
     e30:	6b 97       	sbiw	r28, 0x1b	; 27
     e32:	6c 96       	adiw	r28, 0x1c	; 28
     e34:	9f af       	std	Y+63, r25	; 0x3f
     e36:	6c 97       	sbiw	r28, 0x1c	; 28
     e38:	65 96       	adiw	r28, 0x15	; 21
     e3a:	8f ac       	ldd	r8, Y+63	; 0x3f
     e3c:	65 97       	sbiw	r28, 0x15	; 21
     e3e:	66 96       	adiw	r28, 0x16	; 22
     e40:	9f ac       	ldd	r9, Y+63	; 0x3f
     e42:	66 97       	sbiw	r28, 0x16	; 22
     e44:	67 96       	adiw	r28, 0x17	; 23
     e46:	af ac       	ldd	r10, Y+63	; 0x3f
     e48:	67 97       	sbiw	r28, 0x17	; 23
     e4a:	68 96       	adiw	r28, 0x18	; 24
     e4c:	bf ac       	ldd	r11, Y+63	; 0x3f
     e4e:	68 97       	sbiw	r28, 0x18	; 24
     e50:	69 96       	adiw	r28, 0x19	; 25
     e52:	cf ac       	ldd	r12, Y+63	; 0x3f
     e54:	69 97       	sbiw	r28, 0x19	; 25
     e56:	6a 96       	adiw	r28, 0x1a	; 26
     e58:	df ac       	ldd	r13, Y+63	; 0x3f
     e5a:	6a 97       	sbiw	r28, 0x1a	; 26
     e5c:	6b 96       	adiw	r28, 0x1b	; 27
     e5e:	ef ac       	ldd	r14, Y+63	; 0x3f
     e60:	6b 97       	sbiw	r28, 0x1b	; 27
     e62:	6c 96       	adiw	r28, 0x1c	; 28
     e64:	ff ac       	ldd	r15, Y+63	; 0x3f
     e66:	6c 97       	sbiw	r28, 0x1c	; 28
     e68:	28 2d       	mov	r18, r8
     e6a:	39 2d       	mov	r19, r9
     e6c:	4a 2d       	mov	r20, r10
     e6e:	5b 2d       	mov	r21, r11
     e70:	6c 2d       	mov	r22, r12
     e72:	7d 2d       	mov	r23, r13
     e74:	8e 2d       	mov	r24, r14
     e76:	9f 2d       	mov	r25, r15
     e78:	02 e0       	ldi	r16, 0x02	; 2
     e7a:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
     e7e:	6d 96       	adiw	r28, 0x1d	; 29
     e80:	2f af       	std	Y+63, r18	; 0x3f
     e82:	6d 97       	sbiw	r28, 0x1d	; 29
     e84:	6e 96       	adiw	r28, 0x1e	; 30
     e86:	3f af       	std	Y+63, r19	; 0x3f
     e88:	6e 97       	sbiw	r28, 0x1e	; 30
     e8a:	6f 96       	adiw	r28, 0x1f	; 31
     e8c:	4f af       	std	Y+63, r20	; 0x3f
     e8e:	6f 97       	sbiw	r28, 0x1f	; 31
     e90:	a0 96       	adiw	r28, 0x20	; 32
     e92:	5f af       	std	Y+63, r21	; 0x3f
     e94:	a0 97       	sbiw	r28, 0x20	; 32
     e96:	a1 96       	adiw	r28, 0x21	; 33
     e98:	6f af       	std	Y+63, r22	; 0x3f
     e9a:	a1 97       	sbiw	r28, 0x21	; 33
     e9c:	a2 96       	adiw	r28, 0x22	; 34
     e9e:	7f af       	std	Y+63, r23	; 0x3f
     ea0:	a2 97       	sbiw	r28, 0x22	; 34
     ea2:	a3 96       	adiw	r28, 0x23	; 35
     ea4:	8f af       	std	Y+63, r24	; 0x3f
     ea6:	a3 97       	sbiw	r28, 0x23	; 35
     ea8:	a4 96       	adiw	r28, 0x24	; 36
     eaa:	9f af       	std	Y+63, r25	; 0x3f
     eac:	a4 97       	sbiw	r28, 0x24	; 36
     eae:	28 2d       	mov	r18, r8
     eb0:	39 2d       	mov	r19, r9
     eb2:	4a 2d       	mov	r20, r10
     eb4:	5b 2d       	mov	r21, r11
     eb6:	6c 2d       	mov	r22, r12
     eb8:	7d 2d       	mov	r23, r13
     eba:	8e 2d       	mov	r24, r14
     ebc:	9f 2d       	mov	r25, r15
     ebe:	6d 96       	adiw	r28, 0x1d	; 29
     ec0:	af ac       	ldd	r10, Y+63	; 0x3f
     ec2:	6d 97       	sbiw	r28, 0x1d	; 29
     ec4:	6e 96       	adiw	r28, 0x1e	; 30
     ec6:	bf ac       	ldd	r11, Y+63	; 0x3f
     ec8:	6e 97       	sbiw	r28, 0x1e	; 30
     eca:	6f 96       	adiw	r28, 0x1f	; 31
     ecc:	cf ac       	ldd	r12, Y+63	; 0x3f
     ece:	6f 97       	sbiw	r28, 0x1f	; 31
     ed0:	a0 96       	adiw	r28, 0x20	; 32
     ed2:	df ac       	ldd	r13, Y+63	; 0x3f
     ed4:	a0 97       	sbiw	r28, 0x20	; 32
     ed6:	a1 96       	adiw	r28, 0x21	; 33
     ed8:	ef ac       	ldd	r14, Y+63	; 0x3f
     eda:	a1 97       	sbiw	r28, 0x21	; 33
     edc:	a2 96       	adiw	r28, 0x22	; 34
     ede:	ff ac       	ldd	r15, Y+63	; 0x3f
     ee0:	a2 97       	sbiw	r28, 0x22	; 34
     ee2:	a3 96       	adiw	r28, 0x23	; 35
     ee4:	0f ad       	ldd	r16, Y+63	; 0x3f
     ee6:	a3 97       	sbiw	r28, 0x23	; 35
     ee8:	a4 96       	adiw	r28, 0x24	; 36
     eea:	1f ad       	ldd	r17, Y+63	; 0x3f
     eec:	a4 97       	sbiw	r28, 0x24	; 36
     eee:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
     ef2:	22 2e       	mov	r2, r18
     ef4:	33 2e       	mov	r3, r19
     ef6:	44 2e       	mov	r4, r20
     ef8:	55 2e       	mov	r5, r21
     efa:	66 2e       	mov	r6, r22
     efc:	77 2e       	mov	r7, r23
     efe:	88 2e       	mov	r8, r24
     f00:	99 2e       	mov	r9, r25
     f02:	0f 2e       	mov	r0, r31
     f04:	f6 e0       	ldi	r31, 0x06	; 6
     f06:	af 2e       	mov	r10, r31
     f08:	f0 2d       	mov	r31, r0
     f0a:	b1 2c       	mov	r11, r1
     f0c:	c1 2c       	mov	r12, r1
     f0e:	d1 2c       	mov	r13, r1
     f10:	e1 2c       	mov	r14, r1
     f12:	f1 2c       	mov	r15, r1
     f14:	00 e0       	ldi	r16, 0x00	; 0
     f16:	10 e0       	ldi	r17, 0x00	; 0
     f18:	22 2d       	mov	r18, r2
     f1a:	33 2d       	mov	r19, r3
     f1c:	44 2d       	mov	r20, r4
     f1e:	55 2d       	mov	r21, r5
     f20:	66 2d       	mov	r22, r6
     f22:	77 2d       	mov	r23, r7
     f24:	88 2d       	mov	r24, r8
     f26:	99 2d       	mov	r25, r9
     f28:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
     f2c:	22 2e       	mov	r2, r18
     f2e:	33 2e       	mov	r3, r19
     f30:	44 2e       	mov	r4, r20
     f32:	55 2e       	mov	r5, r21
     f34:	66 2e       	mov	r6, r22
     f36:	77 2e       	mov	r7, r23
     f38:	88 2e       	mov	r8, r24
     f3a:	99 2e       	mov	r9, r25
     f3c:	a2 2c       	mov	r10, r2
     f3e:	b3 2c       	mov	r11, r3
     f40:	c4 2c       	mov	r12, r4
     f42:	d5 2c       	mov	r13, r5
     f44:	e6 2c       	mov	r14, r6
     f46:	f7 2c       	mov	r15, r7
     f48:	08 2d       	mov	r16, r8
     f4a:	19 2d       	mov	r17, r9
     f4c:	2a 2d       	mov	r18, r10
     f4e:	3b 2d       	mov	r19, r11
     f50:	4c 2d       	mov	r20, r12
     f52:	5d 2d       	mov	r21, r13
     f54:	6e 2d       	mov	r22, r14
     f56:	7f 2d       	mov	r23, r15
     f58:	80 2f       	mov	r24, r16
     f5a:	91 2f       	mov	r25, r17
     f5c:	29 51       	subi	r18, 0x19	; 25
     f5e:	3c 4f       	sbci	r19, 0xFC	; 252
     f60:	4f 4f       	sbci	r20, 0xFF	; 255
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	6f 4f       	sbci	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	a2 2e       	mov	r10, r18
     f6e:	b3 2e       	mov	r11, r19
     f70:	c4 2e       	mov	r12, r20
     f72:	d5 2e       	mov	r13, r21
     f74:	e6 2e       	mov	r14, r22
     f76:	f7 2e       	mov	r15, r23
     f78:	08 2f       	mov	r16, r24
     f7a:	19 2f       	mov	r17, r25
     f7c:	2a 2d       	mov	r18, r10
     f7e:	3b 2d       	mov	r19, r11
     f80:	4c 2d       	mov	r20, r12
     f82:	5d 2d       	mov	r21, r13
     f84:	6e 2d       	mov	r22, r14
     f86:	7f 2d       	mov	r23, r15
     f88:	80 2f       	mov	r24, r16
     f8a:	91 2f       	mov	r25, r17
     f8c:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4a e7       	ldi	r20, 0x7A	; 122
     f9a:	54 e4       	ldi	r21, 0x44	; 68
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
     fb0:	a2 2e       	mov	r10, r18
     fb2:	b3 2e       	mov	r11, r19
     fb4:	c4 2e       	mov	r12, r20
     fb6:	d5 2e       	mov	r13, r21
     fb8:	e6 2e       	mov	r14, r22
     fba:	f7 2e       	mov	r15, r23
     fbc:	08 2f       	mov	r16, r24
     fbe:	19 2f       	mov	r17, r25
     fc0:	d6 01       	movw	r26, r12
     fc2:	c5 01       	movw	r24, r10
     fc4:	bc 01       	movw	r22, r24
	BNO_Read(&data,BNO055_QUATERNION_DATA_Z_MSB_ADDR);
     fc6:	cd 01       	movw	r24, r26
     fc8:	8a d9       	rcall	.-3308   	; 0x2de <__portable_avr_delay_cycles>
     fca:	67 e2       	ldi	r22, 0x27	; 39
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
	angle[3]=((uint16_t)data)<<8;
     fd0:	a6 d9       	rcall	.-3252   	; 0x31e <BNO_Read>
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	06 96       	adiw	r24, 0x06	; 6
     fd8:	29 81       	ldd	r18, Y+1	; 0x01
     fda:	22 2f       	mov	r18, r18
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	32 2f       	mov	r19, r18
     fe0:	22 27       	eor	r18, r18
     fe2:	fc 01       	movw	r30, r24
     fe4:	20 83       	st	Z, r18
	
	data=0xFF;
     fe6:	31 83       	std	Z+1, r19	; 0x01
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
		
	delay_ms(10);
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6c d9       	rcall	.-3368   	; 0x2c6 <sysclk_get_cpu_hz>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9c 01       	movw	r18, r24
     ff4:	ad 01       	movw	r20, r26
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	cb 01       	movw	r24, r22
     ffc:	82 2e       	mov	r8, r18
     ffe:	93 2e       	mov	r9, r19
    1000:	a4 2e       	mov	r10, r20
    1002:	b5 2e       	mov	r11, r21
    1004:	c6 2e       	mov	r12, r22
    1006:	d7 2e       	mov	r13, r23
    1008:	e8 2e       	mov	r14, r24
    100a:	f9 2e       	mov	r15, r25
    100c:	28 2d       	mov	r18, r8
    100e:	39 2d       	mov	r19, r9
    1010:	4a 2d       	mov	r20, r10
    1012:	5b 2d       	mov	r21, r11
    1014:	6c 2d       	mov	r22, r12
    1016:	7d 2d       	mov	r23, r13
    1018:	8e 2d       	mov	r24, r14
    101a:	9f 2d       	mov	r25, r15
    101c:	01 e0       	ldi	r16, 0x01	; 1
    101e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
    1022:	a5 96       	adiw	r28, 0x25	; 37
    1024:	2f af       	std	Y+63, r18	; 0x3f
    1026:	a5 97       	sbiw	r28, 0x25	; 37
    1028:	a6 96       	adiw	r28, 0x26	; 38
    102a:	3f af       	std	Y+63, r19	; 0x3f
    102c:	a6 97       	sbiw	r28, 0x26	; 38
    102e:	a7 96       	adiw	r28, 0x27	; 39
    1030:	4f af       	std	Y+63, r20	; 0x3f
    1032:	a7 97       	sbiw	r28, 0x27	; 39
    1034:	a8 96       	adiw	r28, 0x28	; 40
    1036:	5f af       	std	Y+63, r21	; 0x3f
    1038:	a8 97       	sbiw	r28, 0x28	; 40
    103a:	a9 96       	adiw	r28, 0x29	; 41
    103c:	6f af       	std	Y+63, r22	; 0x3f
    103e:	a9 97       	sbiw	r28, 0x29	; 41
    1040:	aa 96       	adiw	r28, 0x2a	; 42
    1042:	7f af       	std	Y+63, r23	; 0x3f
    1044:	aa 97       	sbiw	r28, 0x2a	; 42
    1046:	ab 96       	adiw	r28, 0x2b	; 43
    1048:	8f af       	std	Y+63, r24	; 0x3f
    104a:	ab 97       	sbiw	r28, 0x2b	; 43
    104c:	ac 96       	adiw	r28, 0x2c	; 44
    104e:	9f af       	std	Y+63, r25	; 0x3f
    1050:	ac 97       	sbiw	r28, 0x2c	; 44
    1052:	a5 96       	adiw	r28, 0x25	; 37
    1054:	8f ac       	ldd	r8, Y+63	; 0x3f
    1056:	a5 97       	sbiw	r28, 0x25	; 37
    1058:	a6 96       	adiw	r28, 0x26	; 38
    105a:	9f ac       	ldd	r9, Y+63	; 0x3f
    105c:	a6 97       	sbiw	r28, 0x26	; 38
    105e:	a7 96       	adiw	r28, 0x27	; 39
    1060:	af ac       	ldd	r10, Y+63	; 0x3f
    1062:	a7 97       	sbiw	r28, 0x27	; 39
    1064:	a8 96       	adiw	r28, 0x28	; 40
    1066:	bf ac       	ldd	r11, Y+63	; 0x3f
    1068:	a8 97       	sbiw	r28, 0x28	; 40
    106a:	a9 96       	adiw	r28, 0x29	; 41
    106c:	cf ac       	ldd	r12, Y+63	; 0x3f
    106e:	a9 97       	sbiw	r28, 0x29	; 41
    1070:	aa 96       	adiw	r28, 0x2a	; 42
    1072:	df ac       	ldd	r13, Y+63	; 0x3f
    1074:	aa 97       	sbiw	r28, 0x2a	; 42
    1076:	ab 96       	adiw	r28, 0x2b	; 43
    1078:	ef ac       	ldd	r14, Y+63	; 0x3f
    107a:	ab 97       	sbiw	r28, 0x2b	; 43
    107c:	ac 96       	adiw	r28, 0x2c	; 44
    107e:	ff ac       	ldd	r15, Y+63	; 0x3f
    1080:	ac 97       	sbiw	r28, 0x2c	; 44
    1082:	28 2d       	mov	r18, r8
    1084:	39 2d       	mov	r19, r9
    1086:	4a 2d       	mov	r20, r10
    1088:	5b 2d       	mov	r21, r11
    108a:	6c 2d       	mov	r22, r12
    108c:	7d 2d       	mov	r23, r13
    108e:	8e 2d       	mov	r24, r14
    1090:	9f 2d       	mov	r25, r15
    1092:	02 e0       	ldi	r16, 0x02	; 2
    1094:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ashldi3>
    1098:	ad 96       	adiw	r28, 0x2d	; 45
    109a:	2f af       	std	Y+63, r18	; 0x3f
    109c:	ad 97       	sbiw	r28, 0x2d	; 45
    109e:	ae 96       	adiw	r28, 0x2e	; 46
    10a0:	3f af       	std	Y+63, r19	; 0x3f
    10a2:	ae 97       	sbiw	r28, 0x2e	; 46
    10a4:	af 96       	adiw	r28, 0x2f	; 47
    10a6:	4f af       	std	Y+63, r20	; 0x3f
    10a8:	af 97       	sbiw	r28, 0x2f	; 47
    10aa:	e0 96       	adiw	r28, 0x30	; 48
    10ac:	5f af       	std	Y+63, r21	; 0x3f
    10ae:	e0 97       	sbiw	r28, 0x30	; 48
    10b0:	e1 96       	adiw	r28, 0x31	; 49
    10b2:	6f af       	std	Y+63, r22	; 0x3f
    10b4:	e1 97       	sbiw	r28, 0x31	; 49
    10b6:	e2 96       	adiw	r28, 0x32	; 50
    10b8:	7f af       	std	Y+63, r23	; 0x3f
    10ba:	e2 97       	sbiw	r28, 0x32	; 50
    10bc:	e3 96       	adiw	r28, 0x33	; 51
    10be:	8f af       	std	Y+63, r24	; 0x3f
    10c0:	e3 97       	sbiw	r28, 0x33	; 51
    10c2:	e4 96       	adiw	r28, 0x34	; 52
    10c4:	9f af       	std	Y+63, r25	; 0x3f
    10c6:	e4 97       	sbiw	r28, 0x34	; 52
    10c8:	28 2d       	mov	r18, r8
    10ca:	39 2d       	mov	r19, r9
    10cc:	4a 2d       	mov	r20, r10
    10ce:	5b 2d       	mov	r21, r11
    10d0:	6c 2d       	mov	r22, r12
    10d2:	7d 2d       	mov	r23, r13
    10d4:	8e 2d       	mov	r24, r14
    10d6:	9f 2d       	mov	r25, r15
    10d8:	ad 96       	adiw	r28, 0x2d	; 45
    10da:	af ac       	ldd	r10, Y+63	; 0x3f
    10dc:	ad 97       	sbiw	r28, 0x2d	; 45
    10de:	ae 96       	adiw	r28, 0x2e	; 46
    10e0:	bf ac       	ldd	r11, Y+63	; 0x3f
    10e2:	ae 97       	sbiw	r28, 0x2e	; 46
    10e4:	af 96       	adiw	r28, 0x2f	; 47
    10e6:	cf ac       	ldd	r12, Y+63	; 0x3f
    10e8:	af 97       	sbiw	r28, 0x2f	; 47
    10ea:	e0 96       	adiw	r28, 0x30	; 48
    10ec:	df ac       	ldd	r13, Y+63	; 0x3f
    10ee:	e0 97       	sbiw	r28, 0x30	; 48
    10f0:	e1 96       	adiw	r28, 0x31	; 49
    10f2:	ef ac       	ldd	r14, Y+63	; 0x3f
    10f4:	e1 97       	sbiw	r28, 0x31	; 49
    10f6:	e2 96       	adiw	r28, 0x32	; 50
    10f8:	ff ac       	ldd	r15, Y+63	; 0x3f
    10fa:	e2 97       	sbiw	r28, 0x32	; 50
    10fc:	e3 96       	adiw	r28, 0x33	; 51
    10fe:	0f ad       	ldd	r16, Y+63	; 0x3f
    1100:	e3 97       	sbiw	r28, 0x33	; 51
    1102:	e4 96       	adiw	r28, 0x34	; 52
    1104:	1f ad       	ldd	r17, Y+63	; 0x3f
    1106:	e4 97       	sbiw	r28, 0x34	; 52
    1108:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__adddi3>
    110c:	22 2e       	mov	r2, r18
    110e:	33 2e       	mov	r3, r19
    1110:	44 2e       	mov	r4, r20
    1112:	55 2e       	mov	r5, r21
    1114:	66 2e       	mov	r6, r22
    1116:	77 2e       	mov	r7, r23
    1118:	88 2e       	mov	r8, r24
    111a:	99 2e       	mov	r9, r25
    111c:	0f 2e       	mov	r0, r31
    111e:	f6 e0       	ldi	r31, 0x06	; 6
    1120:	af 2e       	mov	r10, r31
    1122:	f0 2d       	mov	r31, r0
    1124:	b1 2c       	mov	r11, r1
    1126:	c1 2c       	mov	r12, r1
    1128:	d1 2c       	mov	r13, r1
    112a:	e1 2c       	mov	r14, r1
    112c:	f1 2c       	mov	r15, r1
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	22 2d       	mov	r18, r2
    1134:	33 2d       	mov	r19, r3
    1136:	44 2d       	mov	r20, r4
    1138:	55 2d       	mov	r21, r5
    113a:	66 2d       	mov	r22, r6
    113c:	77 2d       	mov	r23, r7
    113e:	88 2d       	mov	r24, r8
    1140:	99 2d       	mov	r25, r9
    1142:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivdi3>
    1146:	22 2e       	mov	r2, r18
    1148:	33 2e       	mov	r3, r19
    114a:	44 2e       	mov	r4, r20
    114c:	55 2e       	mov	r5, r21
    114e:	66 2e       	mov	r6, r22
    1150:	77 2e       	mov	r7, r23
    1152:	88 2e       	mov	r8, r24
    1154:	99 2e       	mov	r9, r25
    1156:	a2 2c       	mov	r10, r2
    1158:	b3 2c       	mov	r11, r3
    115a:	c4 2c       	mov	r12, r4
    115c:	d5 2c       	mov	r13, r5
    115e:	e6 2c       	mov	r14, r6
    1160:	f7 2c       	mov	r15, r7
    1162:	08 2d       	mov	r16, r8
    1164:	19 2d       	mov	r17, r9
    1166:	2a 2d       	mov	r18, r10
    1168:	3b 2d       	mov	r19, r11
    116a:	4c 2d       	mov	r20, r12
    116c:	5d 2d       	mov	r21, r13
    116e:	6e 2d       	mov	r22, r14
    1170:	7f 2d       	mov	r23, r15
    1172:	80 2f       	mov	r24, r16
    1174:	91 2f       	mov	r25, r17
    1176:	29 51       	subi	r18, 0x19	; 25
    1178:	3c 4f       	sbci	r19, 0xFC	; 252
    117a:	4f 4f       	sbci	r20, 0xFF	; 255
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	6f 4f       	sbci	r22, 0xFF	; 255
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	a2 2e       	mov	r10, r18
    1188:	b3 2e       	mov	r11, r19
    118a:	c4 2e       	mov	r12, r20
    118c:	d5 2e       	mov	r13, r21
    118e:	e6 2e       	mov	r14, r22
    1190:	f7 2e       	mov	r15, r23
    1192:	08 2f       	mov	r16, r24
    1194:	19 2f       	mov	r17, r25
    1196:	2a 2d       	mov	r18, r10
    1198:	3b 2d       	mov	r19, r11
    119a:	4c 2d       	mov	r20, r12
    119c:	5d 2d       	mov	r21, r13
    119e:	6e 2d       	mov	r22, r14
    11a0:	7f 2d       	mov	r23, r15
    11a2:	80 2f       	mov	r24, r16
    11a4:	91 2f       	mov	r25, r17
    11a6:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatundisf>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a e7       	ldi	r20, 0x7A	; 122
    11b4:	54 e4       	ldi	r21, 0x44	; 68
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 11 2b 	call	0x5622	; 0x5622 <__divsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__fixunssfdi>
    11ca:	a2 2e       	mov	r10, r18
    11cc:	b3 2e       	mov	r11, r19
    11ce:	c4 2e       	mov	r12, r20
    11d0:	d5 2e       	mov	r13, r21
    11d2:	e6 2e       	mov	r14, r22
    11d4:	f7 2e       	mov	r15, r23
    11d6:	08 2f       	mov	r16, r24
    11d8:	19 2f       	mov	r17, r25
    11da:	d6 01       	movw	r26, r12
    11dc:	c5 01       	movw	r24, r10
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
	BNO_Read(&data,BNO055_QUATERNION_DATA_Z_LSB_ADDR);
    11e2:	7d d8       	rcall	.-3846   	; 0x2de <__portable_avr_delay_cycles>
    11e4:	66 e2       	ldi	r22, 0x26	; 38
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	99 d8       	rcall	.-3790   	; 0x31e <BNO_Read>
	angle[3]+=data;
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	06 96       	adiw	r24, 0x06	; 6
    11f2:	2a 81       	ldd	r18, Y+2	; 0x02
    11f4:	3b 81       	ldd	r19, Y+3	; 0x03
    11f6:	2a 5f       	subi	r18, 0xFA	; 250
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	f9 01       	movw	r30, r18
    11fc:	40 81       	ld	r20, Z
    11fe:	51 81       	ldd	r21, Z+1	; 0x01
    1200:	29 81       	ldd	r18, Y+1	; 0x01
    1202:	22 2f       	mov	r18, r18
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	24 0f       	add	r18, r20
    1208:	35 1f       	adc	r19, r21
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
    120e:	31 83       	std	Z+1, r19	; 0x01
	angle[3]=angle[3];
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	06 96       	adiw	r24, 0x06	; 6
    1216:	2a 81       	ldd	r18, Y+2	; 0x02
    1218:	3b 81       	ldd	r19, Y+3	; 0x03
    121a:	f9 01       	movw	r30, r18
    121c:	26 81       	ldd	r18, Z+6	; 0x06
    121e:	37 81       	ldd	r19, Z+7	; 0x07
    1220:	fc 01       	movw	r30, r24
    1222:	20 83       	st	Z, r18
    1224:	31 83       	std	Z+1, r19	; 0x01
}
    1226:	00 00       	nop
    1228:	cd 58       	subi	r28, 0x8D	; 141
    122a:	df 4f       	sbci	r29, 0xFF	; 255
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	7f 90       	pop	r7
    124a:	6f 90       	pop	r6
    124c:	5f 90       	pop	r5
    124e:	4f 90       	pop	r4
    1250:	3f 90       	pop	r3
    1252:	2f 90       	pop	r2
    1254:	08 95       	ret

00001256 <__vector_119>:
{	
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
}

ISR(READ_INTURUPT)
{
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1266:	0f 92       	push	r0
    1268:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    126c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1270:	0f 92       	push	r0
    1272:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1276:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    127a:	0f 92       	push	r0
    127c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1280:	8f 93       	push	r24
    1282:	9f 93       	push	r25
    1284:	ef 93       	push	r30
    1286:	ff 93       	push	r31
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    1290:	80 ea       	ldi	r24, 0xA0	; 160
    1292:	9b e0       	ldi	r25, 0x0B	; 11
    1294:	fc 01       	movw	r30, r24
    1296:	80 81       	ld	r24, Z
    1298:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <XbeeRx>
    129c:	00 00       	nop
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	0f 90       	pop	r0
    12ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12b0:	0f 90       	pop	r0
    12b2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12b6:	0f 90       	pop	r0
    12b8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12bc:	0f 90       	pop	r0
    12be:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	1f 92       	push	r1
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    12d2:	8f e3       	ldi	r24, 0x3F	; 63
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 81       	ld	r24, Z
    12da:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    12dc:	f8 94       	cli
	return flags;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	1f 92       	push	r1
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    12f4:	8f e3       	ldi	r24, 0x3F	; 63
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	29 81       	ldd	r18, Y+1	; 0x01
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
}
    12fe:	00 00       	nop
    1300:	0f 90       	pop	r0
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	1f 92       	push	r1
    130e:	1f 92       	push	r1
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    1316:	d8 df       	rcall	.-80     	; 0x12c8 <cpu_irq_save>
    1318:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    131a:	80 e5       	ldi	r24, 0x50	; 80
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	20 e5       	ldi	r18, 0x50	; 80
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	f9 01       	movw	r30, r18
    1324:	30 81       	ld	r19, Z
    1326:	2a 81       	ldd	r18, Y+2	; 0x02
    1328:	23 2b       	or	r18, r19
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	db df       	rcall	.-74     	; 0x12e8 <cpu_irq_restore>
}
    1332:	00 00       	nop
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	1f 92       	push	r1
    1344:	1f 92       	push	r1
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    134c:	80 e5       	ldi	r24, 0x50	; 80
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	22 e0       	ldi	r18, 0x02	; 2
    1352:	fc 01       	movw	r30, r24
    1354:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    1356:	b8 df       	rcall	.-144    	; 0x12c8 <cpu_irq_save>
    1358:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    135a:	80 e5       	ldi	r24, 0x50	; 80
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	20 e5       	ldi	r18, 0x50	; 80
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	f9 01       	movw	r30, r18
    1364:	30 81       	ld	r19, Z
    1366:	2a 81       	ldd	r18, Y+2	; 0x02
    1368:	23 2b       	or	r18, r19
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	bb df       	rcall	.-138    	; 0x12e8 <cpu_irq_restore>
}
    1372:	00 00       	nop
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	1f 92       	push	r1
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    138c:	9d df       	rcall	.-198    	; 0x12c8 <cpu_irq_save>
    138e:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    1390:	80 e5       	ldi	r24, 0x50	; 80
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	20 e5       	ldi	r18, 0x50	; 80
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	f9 01       	movw	r30, r18
    139a:	20 81       	ld	r18, Z
    139c:	32 2f       	mov	r19, r18
    139e:	2a 81       	ldd	r18, Y+2	; 0x02
    13a0:	20 95       	com	r18
    13a2:	23 23       	and	r18, r19
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9e df       	rcall	.-196    	; 0x12e8 <cpu_irq_restore>
}
    13ac:	00 00       	nop
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	1f 92       	push	r1
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <osc_enable+0x18>
		osc_enable_internal(id);
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9d df       	rcall	.-198    	; 0x1308 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	b5 df       	rcall	.-150    	; 0x133e <osc_enable_external>
	}
}
    13d4:	00 00       	nop
    13d6:	0f 90       	pop	r0
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	1f 92       	push	r1
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    13ea:	80 e5       	ldi	r24, 0x50	; 80
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	fc 01       	movw	r30, r24
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	98 23       	and	r25, r24
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	99 23       	and	r25, r25
    13fa:	09 f4       	brne	.+2      	; 0x13fe <osc_is_ready+0x20>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
}
    13fe:	0f 90       	pop	r0
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	1f 92       	push	r1
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    1412:	00 00       	nop
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	e3 df       	rcall	.-58     	; 0x13de <osc_is_ready>
    1418:	98 2f       	mov	r25, r24
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	89 27       	eor	r24, r25
    141e:	88 23       	and	r24, r24
    1420:	c9 f7       	brne	.-14     	; 0x1414 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    1422:	00 00       	nop
    1424:	0f 90       	pop	r0
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <sysclk_init+0x6>
    1432:	1f 92       	push	r1
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    1438:	80 e7       	ldi	r24, 0x70	; 112
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    1440:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    1442:	1b 82       	std	Y+3, r1	; 0x03
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <sysclk_init+0x34>
		*(reg++) = 0xff;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	9c 01       	movw	r18, r24
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	29 83       	std	Y+1, r18	; 0x01
    1452:	3a 83       	std	Y+2, r19	; 0x02
    1454:	2f ef       	ldi	r18, 0xFF	; 255
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	87 30       	cpi	r24, 0x07	; 7
    1464:	80 f3       	brcs	.-32     	; 0x1446 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	a7 df       	rcall	.-178    	; 0x13b8 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	cc df       	rcall	.-104    	; 0x1406 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    146e:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	80 e4       	ldi	r24, 0x40	; 64
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	6e d0       	rcall	.+220    	; 0x1554 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    147c:	11 f4       	brne	.+4      	; 0x1482 <sysclk_init+0x56>
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	7e df       	rcall	.-260    	; 0x137e <osc_disable>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1482:	24 96       	adiw	r28, 0x04	; 4
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	00 d0       	rcall	.+0      	; 0x1494 <sysclk_enable_module+0x6>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    149c:	15 df       	rcall	.-470    	; 0x12c8 <cpu_irq_save>
    149e:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	80 59       	subi	r24, 0x90	; 144
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	2a 81       	ldd	r18, Y+2	; 0x02
    14ac:	22 2f       	mov	r18, r18
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	20 59       	subi	r18, 0x90	; 144
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	f9 01       	movw	r30, r18
    14b6:	20 81       	ld	r18, Z
    14b8:	32 2f       	mov	r19, r18
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	20 95       	com	r18
    14be:	23 23       	and	r18, r19
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	10 df       	rcall	.-480    	; 0x12e8 <cpu_irq_restore>
}
    14c8:	00 00       	nop
    14ca:	23 96       	adiw	r28, 0x03	; 3
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	00 d0       	rcall	.+0      	; 0x14dc <_read+0x6>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    14e4:	20 91 c6 20 	lds	r18, 0x20C6	; 0x8020c6 <ptr_get>
    14e8:	30 91 c7 20 	lds	r19, 0x20C7	; 0x8020c7 <ptr_get+0x1>
    14ec:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <stdio_base>
    14f0:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <stdio_base+0x1>
    14f4:	ae 01       	movw	r20, r28
    14f6:	4f 5f       	subi	r20, 0xFF	; 255
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	ba 01       	movw	r22, r20
    14fc:	f9 01       	movw	r30, r18
    14fe:	19 95       	eicall
	return c;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	08 2e       	mov	r0, r24
    1504:	00 0c       	add	r0, r0
    1506:	99 0b       	sbc	r25, r25
}
    1508:	23 96       	adiw	r28, 0x03	; 3
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	00 d0       	rcall	.+0      	; 0x151a <_write+0x6>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
    1522:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    1524:	20 91 c8 20 	lds	r18, 0x20C8	; 0x8020c8 <ptr_put>
    1528:	30 91 c9 20 	lds	r19, 0x20C9	; 0x8020c9 <ptr_put+0x1>
    152c:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <stdio_base>
    1530:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <stdio_base+0x1>
    1534:	69 81       	ldd	r22, Y+1	; 0x01
    1536:	f9 01       	movw	r30, r18
    1538:	19 95       	eicall
    153a:	99 23       	and	r25, r25
    153c:	1c f4       	brge	.+6      	; 0x1544 <_write+0x30>
		return -1;
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <_write+0x34>
	}
	return 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
}
    1548:	23 96       	adiw	r28, 0x03	; 3
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1554:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1556:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1558:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    155a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    155c:	60 83       	st	Z, r22
	ret                             // Return to caller
    155e:	08 95       	ret

00001560 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1570:	0f 92       	push	r0
    1572:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1576:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    157a:	0f 92       	push	r0
    157c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    158c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <rtc_data>
    1590:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <rtc_data+0x1>
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <rtc_data>
    159a:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <rtc_data+0x1>
}
    159e:	00 00       	nop
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	0f 90       	pop	r0
    15aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15ae:	0f 90       	pop	r0
    15b0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15b4:	0f 90       	pop	r0
    15b6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15d0:	0f 92       	push	r0
    15d2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15d6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15da:	0f 92       	push	r0
    15dc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15e0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15e4:	0f 92       	push	r0
    15e6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15ea:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15ee:	0f 92       	push	r0
    15f0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15f4:	2f 93       	push	r18
    15f6:	3f 93       	push	r19
    15f8:	4f 93       	push	r20
    15fa:	5f 93       	push	r21
    15fc:	6f 93       	push	r22
    15fe:	7f 93       	push	r23
    1600:	8f 93       	push	r24
    1602:	9f 93       	push	r25
    1604:	af 93       	push	r26
    1606:	bf 93       	push	r27
    1608:	ef 93       	push	r30
    160a:	ff 93       	push	r31
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	28 97       	sbiw	r28, 0x08	; 8
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    161a:	20 91 cc 20 	lds	r18, 0x20CC	; 0x8020cc <rtc_data>
    161e:	30 91 cd 20 	lds	r19, 0x20CD	; 0x8020cd <rtc_data+0x1>
    1622:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <rtc_data+0x2>
    1626:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <rtc_data+0x3>
    162a:	28 17       	cp	r18, r24
    162c:	39 07       	cpc	r19, r25
    162e:	08 f4       	brcc	.+2      	; 0x1632 <__vector_11+0x72>
    1630:	63 c0       	rjmp	.+198    	; 0x16f8 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	21 e0       	ldi	r18, 0x01	; 1
    1638:	fc 01       	movw	r30, r24
    163a:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    163c:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <rtc_data+0x6>
    1640:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <rtc_data+0x7>
    1644:	89 2b       	or	r24, r25
    1646:	09 f4       	brne	.+2      	; 0x164a <__vector_11+0x8a>
    1648:	57 c0       	rjmp	.+174    	; 0x16f8 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    164a:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <rtc_data>
    164e:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <rtc_data+0x1>
    1652:	cc 01       	movw	r24, r24
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ac 01       	movw	r20, r24
    165a:	33 27       	eor	r19, r19
    165c:	22 27       	eor	r18, r18
					| RTC.CNT;
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	94 e0       	ldi	r25, 0x04	; 4
    1662:	fc 01       	movw	r30, r24
    1664:	80 85       	ldd	r24, Z+8	; 0x08
    1666:	91 85       	ldd	r25, Z+9	; 0x09
    1668:	cc 01       	movw	r24, r24
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    166e:	82 2b       	or	r24, r18
    1670:	93 2b       	or	r25, r19
    1672:	a4 2b       	or	r26, r20
    1674:	b5 2b       	or	r27, r21
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	9a 83       	std	Y+2, r25	; 0x02
    167a:	ab 83       	std	Y+3, r26	; 0x03
    167c:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    167e:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <rtc_data+0x2>
    1682:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <rtc_data+0x3>
    1686:	cc 01       	movw	r24, r24
    1688:	a0 e0       	ldi	r26, 0x00	; 0
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ac 01       	movw	r20, r24
    168e:	33 27       	eor	r19, r19
    1690:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    1692:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <rtc_data+0x4>
    1696:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <rtc_data+0x5>
    169a:	cc 01       	movw	r24, r24
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    16a0:	82 2b       	or	r24, r18
    16a2:	93 2b       	or	r25, r19
    16a4:	a4 2b       	or	r26, r20
    16a6:	b5 2b       	or	r27, r21
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	af 83       	std	Y+7, r26	; 0x07
    16ae:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	3e 81       	ldd	r19, Y+6	; 0x06
    16b4:	4f 81       	ldd	r20, Y+7	; 0x07
    16b6:	58 85       	ldd	r21, Y+8	; 0x08
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	ab 81       	ldd	r26, Y+3	; 0x03
    16be:	bc 81       	ldd	r27, Y+4	; 0x04
    16c0:	28 17       	cp	r18, r24
    16c2:	39 07       	cpc	r19, r25
    16c4:	4a 07       	cpc	r20, r26
    16c6:	5b 07       	cpc	r21, r27
    16c8:	58 f0       	brcs	.+22     	; 0x16e0 <__vector_11+0x120>
				count = alarm + 1;
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	af 81       	ldd	r26, Y+7	; 0x07
    16d0:	b8 85       	ldd	r27, Y+8	; 0x08
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	a1 1d       	adc	r26, r1
    16d6:	b1 1d       	adc	r27, r1
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	ab 83       	std	Y+3, r26	; 0x03
    16de:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    16e0:	20 91 d2 20 	lds	r18, 0x20D2	; 0x8020d2 <rtc_data+0x6>
    16e4:	30 91 d3 20 	lds	r19, 0x20D3	; 0x8020d3 <rtc_data+0x7>
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	ab 81       	ldd	r26, Y+3	; 0x03
    16ee:	bc 81       	ldd	r27, Y+4	; 0x04
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	f9 01       	movw	r30, r18
    16f6:	19 95       	eicall
		}
	}
}
    16f8:	00 00       	nop
    16fa:	28 96       	adiw	r28, 0x08	; 8
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	7f 91       	pop	r23
    1712:	6f 91       	pop	r22
    1714:	5f 91       	pop	r21
    1716:	4f 91       	pop	r20
    1718:	3f 91       	pop	r19
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1722:	0f 90       	pop	r0
    1724:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1728:	0f 90       	pop	r0
    172a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    172e:	0f 90       	pop	r0
    1730:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1734:	0f 90       	pop	r0
    1736:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1750:	0f 92       	push	r0
    1752:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1756:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    175a:	0f 92       	push	r0
    175c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1760:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1764:	0f 92       	push	r0
    1766:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    176a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    176e:	0f 92       	push	r0
    1770:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    1794:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <__data_end>
    1798:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <__data_end+0x1>
    179c:	89 2b       	or	r24, r25
    179e:	31 f0       	breq	.+12     	; 0x17ac <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    17a0:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <__data_end>
    17a4:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <__data_end+0x1>
    17a8:	fc 01       	movw	r30, r24
    17aa:	19 95       	eicall
	}
}
    17ac:	00 00       	nop
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	ff 91       	pop	r31
    17b4:	ef 91       	pop	r30
    17b6:	bf 91       	pop	r27
    17b8:	af 91       	pop	r26
    17ba:	9f 91       	pop	r25
    17bc:	8f 91       	pop	r24
    17be:	7f 91       	pop	r23
    17c0:	6f 91       	pop	r22
    17c2:	5f 91       	pop	r21
    17c4:	4f 91       	pop	r20
    17c6:	3f 91       	pop	r19
    17c8:	2f 91       	pop	r18
    17ca:	0f 90       	pop	r0
    17cc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    17d0:	0f 90       	pop	r0
    17d2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17d6:	0f 90       	pop	r0
    17d8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17dc:	0f 90       	pop	r0
    17de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17e2:	0f 90       	pop	r0
    17e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17fe:	0f 92       	push	r0
    1800:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1804:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1808:	0f 92       	push	r0
    180a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    180e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1812:	0f 92       	push	r0
    1814:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1818:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    181c:	0f 92       	push	r0
    181e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1822:	2f 93       	push	r18
    1824:	3f 93       	push	r19
    1826:	4f 93       	push	r20
    1828:	5f 93       	push	r21
    182a:	6f 93       	push	r22
    182c:	7f 93       	push	r23
    182e:	8f 93       	push	r24
    1830:	9f 93       	push	r25
    1832:	af 93       	push	r26
    1834:	bf 93       	push	r27
    1836:	ef 93       	push	r30
    1838:	ff 93       	push	r31
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    1842:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <tc_tcc0_err_callback>
    1846:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <tc_tcc0_err_callback+0x1>
    184a:	89 2b       	or	r24, r25
    184c:	31 f0       	breq	.+12     	; 0x185a <__vector_15+0x6c>
		tc_tcc0_err_callback();
    184e:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <tc_tcc0_err_callback>
    1852:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <tc_tcc0_err_callback+0x1>
    1856:	fc 01       	movw	r30, r24
    1858:	19 95       	eicall
	}
}
    185a:	00 00       	nop
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    187e:	0f 90       	pop	r0
    1880:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1884:	0f 90       	pop	r0
    1886:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    188a:	0f 90       	pop	r0
    188c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1890:	0f 90       	pop	r0
    1892:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    18a4:	0f 92       	push	r0
    18a6:	11 24       	eor	r1, r1
    18a8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    18ac:	0f 92       	push	r0
    18ae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    18b2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18b6:	0f 92       	push	r0
    18b8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18bc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18c0:	0f 92       	push	r0
    18c2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18c6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18ca:	0f 92       	push	r0
    18cc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    18f0:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <tc_tcc0_cca_callback>
    18f4:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <tc_tcc0_cca_callback+0x1>
    18f8:	89 2b       	or	r24, r25
    18fa:	31 f0       	breq	.+12     	; 0x1908 <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    18fc:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <tc_tcc0_cca_callback>
    1900:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <tc_tcc0_cca_callback+0x1>
    1904:	fc 01       	movw	r30, r24
    1906:	19 95       	eicall
	}
}
    1908:	00 00       	nop
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    192c:	0f 90       	pop	r0
    192e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1932:	0f 90       	pop	r0
    1934:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1938:	0f 90       	pop	r0
    193a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    193e:	0f 90       	pop	r0
    1940:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    195a:	0f 92       	push	r0
    195c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1960:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1964:	0f 92       	push	r0
    1966:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    196a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    196e:	0f 92       	push	r0
    1970:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1974:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1978:	0f 92       	push	r0
    197a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    197e:	2f 93       	push	r18
    1980:	3f 93       	push	r19
    1982:	4f 93       	push	r20
    1984:	5f 93       	push	r21
    1986:	6f 93       	push	r22
    1988:	7f 93       	push	r23
    198a:	8f 93       	push	r24
    198c:	9f 93       	push	r25
    198e:	af 93       	push	r26
    1990:	bf 93       	push	r27
    1992:	ef 93       	push	r30
    1994:	ff 93       	push	r31
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    199e:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <tc_tcc0_ccb_callback>
    19a2:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <tc_tcc0_ccb_callback+0x1>
    19a6:	89 2b       	or	r24, r25
    19a8:	31 f0       	breq	.+12     	; 0x19b6 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    19aa:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <tc_tcc0_ccb_callback>
    19ae:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <tc_tcc0_ccb_callback+0x1>
    19b2:	fc 01       	movw	r30, r24
    19b4:	19 95       	eicall
	}
}
    19b6:	00 00       	nop
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	ff 91       	pop	r31
    19be:	ef 91       	pop	r30
    19c0:	bf 91       	pop	r27
    19c2:	af 91       	pop	r26
    19c4:	9f 91       	pop	r25
    19c6:	8f 91       	pop	r24
    19c8:	7f 91       	pop	r23
    19ca:	6f 91       	pop	r22
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19da:	0f 90       	pop	r0
    19dc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19e0:	0f 90       	pop	r0
    19e2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19e6:	0f 90       	pop	r0
    19e8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19ec:	0f 90       	pop	r0
    19ee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a08:	0f 92       	push	r0
    1a0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a12:	0f 92       	push	r0
    1a14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a1c:	0f 92       	push	r0
    1a1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a26:	0f 92       	push	r0
    1a28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a2c:	2f 93       	push	r18
    1a2e:	3f 93       	push	r19
    1a30:	4f 93       	push	r20
    1a32:	5f 93       	push	r21
    1a34:	6f 93       	push	r22
    1a36:	7f 93       	push	r23
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	af 93       	push	r26
    1a3e:	bf 93       	push	r27
    1a40:	ef 93       	push	r30
    1a42:	ff 93       	push	r31
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    1a4c:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <tc_tcc0_ccc_callback>
    1a50:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <tc_tcc0_ccc_callback+0x1>
    1a54:	89 2b       	or	r24, r25
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    1a58:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <tc_tcc0_ccc_callback>
    1a5c:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <tc_tcc0_ccc_callback+0x1>
    1a60:	fc 01       	movw	r30, r24
    1a62:	19 95       	eicall
	}
}
    1a64:	00 00       	nop
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a88:	0f 90       	pop	r0
    1a8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a8e:	0f 90       	pop	r0
    1a90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a94:	0f 90       	pop	r0
    1a96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a9a:	0f 90       	pop	r0
    1a9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1aae:	0f 92       	push	r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ab6:	0f 92       	push	r0
    1ab8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1abc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ac0:	0f 92       	push	r0
    1ac2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ac6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1aca:	0f 92       	push	r0
    1acc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ad0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ad4:	0f 92       	push	r0
    1ad6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    1afa:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <tc_tcc0_ccd_callback>
    1afe:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <tc_tcc0_ccd_callback+0x1>
    1b02:	89 2b       	or	r24, r25
    1b04:	31 f0       	breq	.+12     	; 0x1b12 <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    1b06:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <tc_tcc0_ccd_callback>
    1b0a:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <tc_tcc0_ccd_callback+0x1>
    1b0e:	fc 01       	movw	r30, r24
    1b10:	19 95       	eicall
	}
}
    1b12:	00 00       	nop
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b36:	0f 90       	pop	r0
    1b38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b3c:	0f 90       	pop	r0
    1b3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b42:	0f 90       	pop	r0
    1b44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b48:	0f 90       	pop	r0
    1b4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti

00001b54 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b5c:	0f 92       	push	r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b64:	0f 92       	push	r0
    1b66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b6e:	0f 92       	push	r0
    1b70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b78:	0f 92       	push	r0
    1b7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b82:	0f 92       	push	r0
    1b84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    1ba8:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcc1_ovf_callback>
    1bac:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcc1_ovf_callback+0x1>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	31 f0       	breq	.+12     	; 0x1bc0 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    1bb4:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcc1_ovf_callback>
    1bb8:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcc1_ovf_callback+0x1>
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	19 95       	eicall
	}
}
    1bc0:	00 00       	nop
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	ff 91       	pop	r31
    1bc8:	ef 91       	pop	r30
    1bca:	bf 91       	pop	r27
    1bcc:	af 91       	pop	r26
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	7f 91       	pop	r23
    1bd4:	6f 91       	pop	r22
    1bd6:	5f 91       	pop	r21
    1bd8:	4f 91       	pop	r20
    1bda:	3f 91       	pop	r19
    1bdc:	2f 91       	pop	r18
    1bde:	0f 90       	pop	r0
    1be0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1be4:	0f 90       	pop	r0
    1be6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bea:	0f 90       	pop	r0
    1bec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1bf0:	0f 90       	pop	r0
    1bf2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bf6:	0f 90       	pop	r0
    1bf8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c0a:	0f 92       	push	r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c12:	0f 92       	push	r0
    1c14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c1c:	0f 92       	push	r0
    1c1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c26:	0f 92       	push	r0
    1c28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c30:	0f 92       	push	r0
    1c32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    1c56:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcc1_err_callback>
    1c5a:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcc1_err_callback+0x1>
    1c5e:	89 2b       	or	r24, r25
    1c60:	31 f0       	breq	.+12     	; 0x1c6e <__vector_21+0x6c>
		tc_tcc1_err_callback();
    1c62:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcc1_err_callback>
    1c66:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcc1_err_callback+0x1>
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	19 95       	eicall
	}
}
    1c6e:	00 00       	nop
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	ff 91       	pop	r31
    1c76:	ef 91       	pop	r30
    1c78:	bf 91       	pop	r27
    1c7a:	af 91       	pop	r26
    1c7c:	9f 91       	pop	r25
    1c7e:	8f 91       	pop	r24
    1c80:	7f 91       	pop	r23
    1c82:	6f 91       	pop	r22
    1c84:	5f 91       	pop	r21
    1c86:	4f 91       	pop	r20
    1c88:	3f 91       	pop	r19
    1c8a:	2f 91       	pop	r18
    1c8c:	0f 90       	pop	r0
    1c8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c92:	0f 90       	pop	r0
    1c94:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c98:	0f 90       	pop	r0
    1c9a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c9e:	0f 90       	pop	r0
    1ca0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ca4:	0f 90       	pop	r0
    1ca6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1caa:	0f 90       	pop	r0
    1cac:	1f 90       	pop	r1
    1cae:	18 95       	reti

00001cb0 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1cb0:	1f 92       	push	r1
    1cb2:	0f 92       	push	r0
    1cb4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cc0:	0f 92       	push	r0
    1cc2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cc6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cca:	0f 92       	push	r0
    1ccc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cd0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1cd4:	0f 92       	push	r0
    1cd6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1cda:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cde:	0f 92       	push	r0
    1ce0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ce4:	2f 93       	push	r18
    1ce6:	3f 93       	push	r19
    1ce8:	4f 93       	push	r20
    1cea:	5f 93       	push	r21
    1cec:	6f 93       	push	r22
    1cee:	7f 93       	push	r23
    1cf0:	8f 93       	push	r24
    1cf2:	9f 93       	push	r25
    1cf4:	af 93       	push	r26
    1cf6:	bf 93       	push	r27
    1cf8:	ef 93       	push	r30
    1cfa:	ff 93       	push	r31
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    1d04:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcc1_cca_callback>
    1d08:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcc1_cca_callback+0x1>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    1d10:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcc1_cca_callback>
    1d14:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcc1_cca_callback+0x1>
    1d18:	fc 01       	movw	r30, r24
    1d1a:	19 95       	eicall
	}
}
    1d1c:	00 00       	nop
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	ff 91       	pop	r31
    1d24:	ef 91       	pop	r30
    1d26:	bf 91       	pop	r27
    1d28:	af 91       	pop	r26
    1d2a:	9f 91       	pop	r25
    1d2c:	8f 91       	pop	r24
    1d2e:	7f 91       	pop	r23
    1d30:	6f 91       	pop	r22
    1d32:	5f 91       	pop	r21
    1d34:	4f 91       	pop	r20
    1d36:	3f 91       	pop	r19
    1d38:	2f 91       	pop	r18
    1d3a:	0f 90       	pop	r0
    1d3c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d40:	0f 90       	pop	r0
    1d42:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d46:	0f 90       	pop	r0
    1d48:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d4c:	0f 90       	pop	r0
    1d4e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d52:	0f 90       	pop	r0
    1d54:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1d5e:	1f 92       	push	r1
    1d60:	0f 92       	push	r0
    1d62:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d6e:	0f 92       	push	r0
    1d70:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d74:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d78:	0f 92       	push	r0
    1d7a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d7e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d82:	0f 92       	push	r0
    1d84:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d88:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d8c:	0f 92       	push	r0
    1d8e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d92:	2f 93       	push	r18
    1d94:	3f 93       	push	r19
    1d96:	4f 93       	push	r20
    1d98:	5f 93       	push	r21
    1d9a:	6f 93       	push	r22
    1d9c:	7f 93       	push	r23
    1d9e:	8f 93       	push	r24
    1da0:	9f 93       	push	r25
    1da2:	af 93       	push	r26
    1da4:	bf 93       	push	r27
    1da6:	ef 93       	push	r30
    1da8:	ff 93       	push	r31
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    1db2:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcc1_ccb_callback>
    1db6:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcc1_ccb_callback+0x1>
    1dba:	89 2b       	or	r24, r25
    1dbc:	31 f0       	breq	.+12     	; 0x1dca <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    1dbe:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcc1_ccb_callback>
    1dc2:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcc1_ccb_callback+0x1>
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	19 95       	eicall
	}
}
    1dca:	00 00       	nop
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1dee:	0f 90       	pop	r0
    1df0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1df4:	0f 90       	pop	r0
    1df6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1dfa:	0f 90       	pop	r0
    1dfc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e00:	0f 90       	pop	r0
    1e02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e06:	0f 90       	pop	r0
    1e08:	1f 90       	pop	r1
    1e0a:	18 95       	reti

00001e0c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1e0c:	1f 92       	push	r1
    1e0e:	0f 92       	push	r0
    1e10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e1c:	0f 92       	push	r0
    1e1e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e22:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e26:	0f 92       	push	r0
    1e28:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e2c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e30:	0f 92       	push	r0
    1e32:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e36:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e3a:	0f 92       	push	r0
    1e3c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	4f 93       	push	r20
    1e46:	5f 93       	push	r21
    1e48:	6f 93       	push	r22
    1e4a:	7f 93       	push	r23
    1e4c:	8f 93       	push	r24
    1e4e:	9f 93       	push	r25
    1e50:	af 93       	push	r26
    1e52:	bf 93       	push	r27
    1e54:	ef 93       	push	r30
    1e56:	ff 93       	push	r31
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    1e60:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcd0_ovf_callback>
    1e64:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcd0_ovf_callback+0x1>
    1e68:	89 2b       	or	r24, r25
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    1e6c:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcd0_ovf_callback>
    1e70:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcd0_ovf_callback+0x1>
    1e74:	fc 01       	movw	r30, r24
    1e76:	19 95       	eicall
	}
}
    1e78:	00 00       	nop
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e9c:	0f 90       	pop	r0
    1e9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ea2:	0f 90       	pop	r0
    1ea4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ea8:	0f 90       	pop	r0
    1eaa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1eae:	0f 90       	pop	r0
    1eb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1eb4:	0f 90       	pop	r0
    1eb6:	1f 90       	pop	r1
    1eb8:	18 95       	reti

00001eba <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1eba:	1f 92       	push	r1
    1ebc:	0f 92       	push	r0
    1ebe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1eca:	0f 92       	push	r0
    1ecc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ed0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ed4:	0f 92       	push	r0
    1ed6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1eda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ede:	0f 92       	push	r0
    1ee0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ee4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ee8:	0f 92       	push	r0
    1eea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    1f0e:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcd0_err_callback>
    1f12:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcd0_err_callback+0x1>
    1f16:	89 2b       	or	r24, r25
    1f18:	31 f0       	breq	.+12     	; 0x1f26 <__vector_78+0x6c>
		tc_tcd0_err_callback();
    1f1a:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcd0_err_callback>
    1f1e:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcd0_err_callback+0x1>
    1f22:	fc 01       	movw	r30, r24
    1f24:	19 95       	eicall
	}
}
    1f26:	00 00       	nop
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f4a:	0f 90       	pop	r0
    1f4c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f50:	0f 90       	pop	r0
    1f52:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f56:	0f 90       	pop	r0
    1f58:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f5c:	0f 90       	pop	r0
    1f5e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1f68:	1f 92       	push	r1
    1f6a:	0f 92       	push	r0
    1f6c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f70:	0f 92       	push	r0
    1f72:	11 24       	eor	r1, r1
    1f74:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f78:	0f 92       	push	r0
    1f7a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f7e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f82:	0f 92       	push	r0
    1f84:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f88:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f8c:	0f 92       	push	r0
    1f8e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f92:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f96:	0f 92       	push	r0
    1f98:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f9c:	2f 93       	push	r18
    1f9e:	3f 93       	push	r19
    1fa0:	4f 93       	push	r20
    1fa2:	5f 93       	push	r21
    1fa4:	6f 93       	push	r22
    1fa6:	7f 93       	push	r23
    1fa8:	8f 93       	push	r24
    1faa:	9f 93       	push	r25
    1fac:	af 93       	push	r26
    1fae:	bf 93       	push	r27
    1fb0:	ef 93       	push	r30
    1fb2:	ff 93       	push	r31
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    1fbc:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcd0_cca_callback>
    1fc0:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcd0_cca_callback+0x1>
    1fc4:	89 2b       	or	r24, r25
    1fc6:	31 f0       	breq	.+12     	; 0x1fd4 <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    1fc8:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcd0_cca_callback>
    1fcc:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcd0_cca_callback+0x1>
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	19 95       	eicall
	}
}
    1fd4:	00 00       	nop
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	ff 91       	pop	r31
    1fdc:	ef 91       	pop	r30
    1fde:	bf 91       	pop	r27
    1fe0:	af 91       	pop	r26
    1fe2:	9f 91       	pop	r25
    1fe4:	8f 91       	pop	r24
    1fe6:	7f 91       	pop	r23
    1fe8:	6f 91       	pop	r22
    1fea:	5f 91       	pop	r21
    1fec:	4f 91       	pop	r20
    1fee:	3f 91       	pop	r19
    1ff0:	2f 91       	pop	r18
    1ff2:	0f 90       	pop	r0
    1ff4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ff8:	0f 90       	pop	r0
    1ffa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ffe:	0f 90       	pop	r0
    2000:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2004:	0f 90       	pop	r0
    2006:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    200a:	0f 90       	pop	r0
    200c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2010:	0f 90       	pop	r0
    2012:	1f 90       	pop	r1
    2014:	18 95       	reti

00002016 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    2016:	1f 92       	push	r1
    2018:	0f 92       	push	r0
    201a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    201e:	0f 92       	push	r0
    2020:	11 24       	eor	r1, r1
    2022:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2026:	0f 92       	push	r0
    2028:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    202c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2030:	0f 92       	push	r0
    2032:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2036:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    203a:	0f 92       	push	r0
    203c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2040:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2044:	0f 92       	push	r0
    2046:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    206a:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcd0_ccb_callback>
    206e:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcd0_ccb_callback+0x1>
    2072:	89 2b       	or	r24, r25
    2074:	31 f0       	breq	.+12     	; 0x2082 <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    2076:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcd0_ccb_callback>
    207a:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcd0_ccb_callback+0x1>
    207e:	fc 01       	movw	r30, r24
    2080:	19 95       	eicall
	}
}
    2082:	00 00       	nop
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	ff 91       	pop	r31
    208a:	ef 91       	pop	r30
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	9f 91       	pop	r25
    2092:	8f 91       	pop	r24
    2094:	7f 91       	pop	r23
    2096:	6f 91       	pop	r22
    2098:	5f 91       	pop	r21
    209a:	4f 91       	pop	r20
    209c:	3f 91       	pop	r19
    209e:	2f 91       	pop	r18
    20a0:	0f 90       	pop	r0
    20a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20a6:	0f 90       	pop	r0
    20a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20ac:	0f 90       	pop	r0
    20ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20b2:	0f 90       	pop	r0
    20b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20b8:	0f 90       	pop	r0
    20ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20be:	0f 90       	pop	r0
    20c0:	1f 90       	pop	r1
    20c2:	18 95       	reti

000020c4 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20cc:	0f 92       	push	r0
    20ce:	11 24       	eor	r1, r1
    20d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20d4:	0f 92       	push	r0
    20d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20de:	0f 92       	push	r0
    20e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20e8:	0f 92       	push	r0
    20ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20f2:	0f 92       	push	r0
    20f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20f8:	2f 93       	push	r18
    20fa:	3f 93       	push	r19
    20fc:	4f 93       	push	r20
    20fe:	5f 93       	push	r21
    2100:	6f 93       	push	r22
    2102:	7f 93       	push	r23
    2104:	8f 93       	push	r24
    2106:	9f 93       	push	r25
    2108:	af 93       	push	r26
    210a:	bf 93       	push	r27
    210c:	ef 93       	push	r30
    210e:	ff 93       	push	r31
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    2118:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcd0_ccc_callback>
    211c:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcd0_ccc_callback+0x1>
    2120:	89 2b       	or	r24, r25
    2122:	31 f0       	breq	.+12     	; 0x2130 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    2124:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcd0_ccc_callback>
    2128:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcd0_ccc_callback+0x1>
    212c:	fc 01       	movw	r30, r24
    212e:	19 95       	eicall
	}
}
    2130:	00 00       	nop
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	ff 91       	pop	r31
    2138:	ef 91       	pop	r30
    213a:	bf 91       	pop	r27
    213c:	af 91       	pop	r26
    213e:	9f 91       	pop	r25
    2140:	8f 91       	pop	r24
    2142:	7f 91       	pop	r23
    2144:	6f 91       	pop	r22
    2146:	5f 91       	pop	r21
    2148:	4f 91       	pop	r20
    214a:	3f 91       	pop	r19
    214c:	2f 91       	pop	r18
    214e:	0f 90       	pop	r0
    2150:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2154:	0f 90       	pop	r0
    2156:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    215a:	0f 90       	pop	r0
    215c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2160:	0f 90       	pop	r0
    2162:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2166:	0f 90       	pop	r0
    2168:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    216c:	0f 90       	pop	r0
    216e:	1f 90       	pop	r1
    2170:	18 95       	reti

00002172 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    2172:	1f 92       	push	r1
    2174:	0f 92       	push	r0
    2176:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2182:	0f 92       	push	r0
    2184:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2188:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    218c:	0f 92       	push	r0
    218e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2192:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2196:	0f 92       	push	r0
    2198:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    219c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21a0:	0f 92       	push	r0
    21a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	ef 93       	push	r30
    21bc:	ff 93       	push	r31
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    21c6:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcd0_ccd_callback>
    21ca:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcd0_ccd_callback+0x1>
    21ce:	89 2b       	or	r24, r25
    21d0:	31 f0       	breq	.+12     	; 0x21de <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    21d2:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcd0_ccd_callback>
    21d6:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcd0_ccd_callback+0x1>
    21da:	fc 01       	movw	r30, r24
    21dc:	19 95       	eicall
	}
}
    21de:	00 00       	nop
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2202:	0f 90       	pop	r0
    2204:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2208:	0f 90       	pop	r0
    220a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    220e:	0f 90       	pop	r0
    2210:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2214:	0f 90       	pop	r0
    2216:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    221a:	0f 90       	pop	r0
    221c:	1f 90       	pop	r1
    221e:	18 95       	reti

00002220 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    2220:	1f 92       	push	r1
    2222:	0f 92       	push	r0
    2224:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2228:	0f 92       	push	r0
    222a:	11 24       	eor	r1, r1
    222c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2230:	0f 92       	push	r0
    2232:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2236:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    223a:	0f 92       	push	r0
    223c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2240:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2244:	0f 92       	push	r0
    2246:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    224a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    224e:	0f 92       	push	r0
    2250:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2254:	2f 93       	push	r18
    2256:	3f 93       	push	r19
    2258:	4f 93       	push	r20
    225a:	5f 93       	push	r21
    225c:	6f 93       	push	r22
    225e:	7f 93       	push	r23
    2260:	8f 93       	push	r24
    2262:	9f 93       	push	r25
    2264:	af 93       	push	r26
    2266:	bf 93       	push	r27
    2268:	ef 93       	push	r30
    226a:	ff 93       	push	r31
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    2274:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcd1_ovf_callback>
    2278:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcd1_ovf_callback+0x1>
    227c:	89 2b       	or	r24, r25
    227e:	31 f0       	breq	.+12     	; 0x228c <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    2280:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcd1_ovf_callback>
    2284:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcd1_ovf_callback+0x1>
    2288:	fc 01       	movw	r30, r24
    228a:	19 95       	eicall
	}
}
    228c:	00 00       	nop
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	ff 91       	pop	r31
    2294:	ef 91       	pop	r30
    2296:	bf 91       	pop	r27
    2298:	af 91       	pop	r26
    229a:	9f 91       	pop	r25
    229c:	8f 91       	pop	r24
    229e:	7f 91       	pop	r23
    22a0:	6f 91       	pop	r22
    22a2:	5f 91       	pop	r21
    22a4:	4f 91       	pop	r20
    22a6:	3f 91       	pop	r19
    22a8:	2f 91       	pop	r18
    22aa:	0f 90       	pop	r0
    22ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22b0:	0f 90       	pop	r0
    22b2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22b6:	0f 90       	pop	r0
    22b8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22bc:	0f 90       	pop	r0
    22be:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22c2:	0f 90       	pop	r0
    22c4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22c8:	0f 90       	pop	r0
    22ca:	1f 90       	pop	r1
    22cc:	18 95       	reti

000022ce <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22d6:	0f 92       	push	r0
    22d8:	11 24       	eor	r1, r1
    22da:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22de:	0f 92       	push	r0
    22e0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22e4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22e8:	0f 92       	push	r0
    22ea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22ee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22f2:	0f 92       	push	r0
    22f4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22fc:	0f 92       	push	r0
    22fe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2302:	2f 93       	push	r18
    2304:	3f 93       	push	r19
    2306:	4f 93       	push	r20
    2308:	5f 93       	push	r21
    230a:	6f 93       	push	r22
    230c:	7f 93       	push	r23
    230e:	8f 93       	push	r24
    2310:	9f 93       	push	r25
    2312:	af 93       	push	r26
    2314:	bf 93       	push	r27
    2316:	ef 93       	push	r30
    2318:	ff 93       	push	r31
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    2322:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcd1_err_callback>
    2326:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcd1_err_callback+0x1>
    232a:	89 2b       	or	r24, r25
    232c:	31 f0       	breq	.+12     	; 0x233a <__vector_84+0x6c>
		tc_tcd1_err_callback();
    232e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcd1_err_callback>
    2332:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcd1_err_callback+0x1>
    2336:	fc 01       	movw	r30, r24
    2338:	19 95       	eicall
	}
}
    233a:	00 00       	nop
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    235e:	0f 90       	pop	r0
    2360:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2364:	0f 90       	pop	r0
    2366:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    236a:	0f 90       	pop	r0
    236c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2370:	0f 90       	pop	r0
    2372:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2376:	0f 90       	pop	r0
    2378:	1f 90       	pop	r1
    237a:	18 95       	reti

0000237c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    237c:	1f 92       	push	r1
    237e:	0f 92       	push	r0
    2380:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    238c:	0f 92       	push	r0
    238e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2392:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2396:	0f 92       	push	r0
    2398:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    239c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23a0:	0f 92       	push	r0
    23a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23aa:	0f 92       	push	r0
    23ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23b0:	2f 93       	push	r18
    23b2:	3f 93       	push	r19
    23b4:	4f 93       	push	r20
    23b6:	5f 93       	push	r21
    23b8:	6f 93       	push	r22
    23ba:	7f 93       	push	r23
    23bc:	8f 93       	push	r24
    23be:	9f 93       	push	r25
    23c0:	af 93       	push	r26
    23c2:	bf 93       	push	r27
    23c4:	ef 93       	push	r30
    23c6:	ff 93       	push	r31
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    23d0:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcd1_cca_callback>
    23d4:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcd1_cca_callback+0x1>
    23d8:	89 2b       	or	r24, r25
    23da:	31 f0       	breq	.+12     	; 0x23e8 <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    23dc:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcd1_cca_callback>
    23e0:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcd1_cca_callback+0x1>
    23e4:	fc 01       	movw	r30, r24
    23e6:	19 95       	eicall
	}
}
    23e8:	00 00       	nop
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	ff 91       	pop	r31
    23f0:	ef 91       	pop	r30
    23f2:	bf 91       	pop	r27
    23f4:	af 91       	pop	r26
    23f6:	9f 91       	pop	r25
    23f8:	8f 91       	pop	r24
    23fa:	7f 91       	pop	r23
    23fc:	6f 91       	pop	r22
    23fe:	5f 91       	pop	r21
    2400:	4f 91       	pop	r20
    2402:	3f 91       	pop	r19
    2404:	2f 91       	pop	r18
    2406:	0f 90       	pop	r0
    2408:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    240c:	0f 90       	pop	r0
    240e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2412:	0f 90       	pop	r0
    2414:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2418:	0f 90       	pop	r0
    241a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    241e:	0f 90       	pop	r0
    2420:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2424:	0f 90       	pop	r0
    2426:	1f 90       	pop	r1
    2428:	18 95       	reti

0000242a <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    242a:	1f 92       	push	r1
    242c:	0f 92       	push	r0
    242e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2432:	0f 92       	push	r0
    2434:	11 24       	eor	r1, r1
    2436:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    243a:	0f 92       	push	r0
    243c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2440:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2444:	0f 92       	push	r0
    2446:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    244a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    244e:	0f 92       	push	r0
    2450:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2454:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2458:	0f 92       	push	r0
    245a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    245e:	2f 93       	push	r18
    2460:	3f 93       	push	r19
    2462:	4f 93       	push	r20
    2464:	5f 93       	push	r21
    2466:	6f 93       	push	r22
    2468:	7f 93       	push	r23
    246a:	8f 93       	push	r24
    246c:	9f 93       	push	r25
    246e:	af 93       	push	r26
    2470:	bf 93       	push	r27
    2472:	ef 93       	push	r30
    2474:	ff 93       	push	r31
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    247e:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcd1_ccb_callback>
    2482:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcd1_ccb_callback+0x1>
    2486:	89 2b       	or	r24, r25
    2488:	31 f0       	breq	.+12     	; 0x2496 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    248a:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcd1_ccb_callback>
    248e:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcd1_ccb_callback+0x1>
    2492:	fc 01       	movw	r30, r24
    2494:	19 95       	eicall
	}
}
    2496:	00 00       	nop
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24ba:	0f 90       	pop	r0
    24bc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24c0:	0f 90       	pop	r0
    24c2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24c6:	0f 90       	pop	r0
    24c8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24cc:	0f 90       	pop	r0
    24ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24d2:	0f 90       	pop	r0
    24d4:	1f 90       	pop	r1
    24d6:	18 95       	reti

000024d8 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    24d8:	1f 92       	push	r1
    24da:	0f 92       	push	r0
    24dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24e0:	0f 92       	push	r0
    24e2:	11 24       	eor	r1, r1
    24e4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24e8:	0f 92       	push	r0
    24ea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24ee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24f2:	0f 92       	push	r0
    24f4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24f8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24fc:	0f 92       	push	r0
    24fe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2502:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2506:	0f 92       	push	r0
    2508:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    250c:	2f 93       	push	r18
    250e:	3f 93       	push	r19
    2510:	4f 93       	push	r20
    2512:	5f 93       	push	r21
    2514:	6f 93       	push	r22
    2516:	7f 93       	push	r23
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	af 93       	push	r26
    251e:	bf 93       	push	r27
    2520:	ef 93       	push	r30
    2522:	ff 93       	push	r31
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    252c:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tce0_ovf_callback>
    2530:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tce0_ovf_callback+0x1>
    2534:	89 2b       	or	r24, r25
    2536:	31 f0       	breq	.+12     	; 0x2544 <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    2538:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tce0_ovf_callback>
    253c:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tce0_ovf_callback+0x1>
    2540:	fc 01       	movw	r30, r24
    2542:	19 95       	eicall
	}
}
    2544:	00 00       	nop
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	bf 91       	pop	r27
    2550:	af 91       	pop	r26
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	7f 91       	pop	r23
    2558:	6f 91       	pop	r22
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2568:	0f 90       	pop	r0
    256a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    256e:	0f 90       	pop	r0
    2570:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2574:	0f 90       	pop	r0
    2576:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    257a:	0f 90       	pop	r0
    257c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2580:	0f 90       	pop	r0
    2582:	1f 90       	pop	r1
    2584:	18 95       	reti

00002586 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    258e:	0f 92       	push	r0
    2590:	11 24       	eor	r1, r1
    2592:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2596:	0f 92       	push	r0
    2598:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    259c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25a0:	0f 92       	push	r0
    25a2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25a6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25aa:	0f 92       	push	r0
    25ac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25b0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25b4:	0f 92       	push	r0
    25b6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25ba:	2f 93       	push	r18
    25bc:	3f 93       	push	r19
    25be:	4f 93       	push	r20
    25c0:	5f 93       	push	r21
    25c2:	6f 93       	push	r22
    25c4:	7f 93       	push	r23
    25c6:	8f 93       	push	r24
    25c8:	9f 93       	push	r25
    25ca:	af 93       	push	r26
    25cc:	bf 93       	push	r27
    25ce:	ef 93       	push	r30
    25d0:	ff 93       	push	r31
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    25da:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tce0_err_callback>
    25de:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tce0_err_callback+0x1>
    25e2:	89 2b       	or	r24, r25
    25e4:	31 f0       	breq	.+12     	; 0x25f2 <__vector_48+0x6c>
		tc_tce0_err_callback();
    25e6:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tce0_err_callback>
    25ea:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tce0_err_callback+0x1>
    25ee:	fc 01       	movw	r30, r24
    25f0:	19 95       	eicall
	}
}
    25f2:	00 00       	nop
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	bf 91       	pop	r27
    25fe:	af 91       	pop	r26
    2600:	9f 91       	pop	r25
    2602:	8f 91       	pop	r24
    2604:	7f 91       	pop	r23
    2606:	6f 91       	pop	r22
    2608:	5f 91       	pop	r21
    260a:	4f 91       	pop	r20
    260c:	3f 91       	pop	r19
    260e:	2f 91       	pop	r18
    2610:	0f 90       	pop	r0
    2612:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2616:	0f 90       	pop	r0
    2618:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    261c:	0f 90       	pop	r0
    261e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2622:	0f 90       	pop	r0
    2624:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2628:	0f 90       	pop	r0
    262a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    262e:	0f 90       	pop	r0
    2630:	1f 90       	pop	r1
    2632:	18 95       	reti

00002634 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    2634:	1f 92       	push	r1
    2636:	0f 92       	push	r0
    2638:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2644:	0f 92       	push	r0
    2646:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    264a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    264e:	0f 92       	push	r0
    2650:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2654:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2658:	0f 92       	push	r0
    265a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    265e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2662:	0f 92       	push	r0
    2664:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2668:	2f 93       	push	r18
    266a:	3f 93       	push	r19
    266c:	4f 93       	push	r20
    266e:	5f 93       	push	r21
    2670:	6f 93       	push	r22
    2672:	7f 93       	push	r23
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	ef 93       	push	r30
    267e:	ff 93       	push	r31
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    2688:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tce0_cca_callback>
    268c:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tce0_cca_callback+0x1>
    2690:	89 2b       	or	r24, r25
    2692:	31 f0       	breq	.+12     	; 0x26a0 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    2694:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tce0_cca_callback>
    2698:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tce0_cca_callback+0x1>
    269c:	fc 01       	movw	r30, r24
    269e:	19 95       	eicall
	}
}
    26a0:	00 00       	nop
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	ff 91       	pop	r31
    26a8:	ef 91       	pop	r30
    26aa:	bf 91       	pop	r27
    26ac:	af 91       	pop	r26
    26ae:	9f 91       	pop	r25
    26b0:	8f 91       	pop	r24
    26b2:	7f 91       	pop	r23
    26b4:	6f 91       	pop	r22
    26b6:	5f 91       	pop	r21
    26b8:	4f 91       	pop	r20
    26ba:	3f 91       	pop	r19
    26bc:	2f 91       	pop	r18
    26be:	0f 90       	pop	r0
    26c0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    26c4:	0f 90       	pop	r0
    26c6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    26ca:	0f 90       	pop	r0
    26cc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26d0:	0f 90       	pop	r0
    26d2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26d6:	0f 90       	pop	r0
    26d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26dc:	0f 90       	pop	r0
    26de:	1f 90       	pop	r1
    26e0:	18 95       	reti

000026e2 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    26e2:	1f 92       	push	r1
    26e4:	0f 92       	push	r0
    26e6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26ea:	0f 92       	push	r0
    26ec:	11 24       	eor	r1, r1
    26ee:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26f2:	0f 92       	push	r0
    26f4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26f8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26fc:	0f 92       	push	r0
    26fe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2702:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2706:	0f 92       	push	r0
    2708:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    270c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2710:	0f 92       	push	r0
    2712:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2716:	2f 93       	push	r18
    2718:	3f 93       	push	r19
    271a:	4f 93       	push	r20
    271c:	5f 93       	push	r21
    271e:	6f 93       	push	r22
    2720:	7f 93       	push	r23
    2722:	8f 93       	push	r24
    2724:	9f 93       	push	r25
    2726:	af 93       	push	r26
    2728:	bf 93       	push	r27
    272a:	ef 93       	push	r30
    272c:	ff 93       	push	r31
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    2736:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tce0_ccb_callback>
    273a:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tce0_ccb_callback+0x1>
    273e:	89 2b       	or	r24, r25
    2740:	31 f0       	breq	.+12     	; 0x274e <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    2742:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tce0_ccb_callback>
    2746:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tce0_ccb_callback+0x1>
    274a:	fc 01       	movw	r30, r24
    274c:	19 95       	eicall
	}
}
    274e:	00 00       	nop
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	ff 91       	pop	r31
    2756:	ef 91       	pop	r30
    2758:	bf 91       	pop	r27
    275a:	af 91       	pop	r26
    275c:	9f 91       	pop	r25
    275e:	8f 91       	pop	r24
    2760:	7f 91       	pop	r23
    2762:	6f 91       	pop	r22
    2764:	5f 91       	pop	r21
    2766:	4f 91       	pop	r20
    2768:	3f 91       	pop	r19
    276a:	2f 91       	pop	r18
    276c:	0f 90       	pop	r0
    276e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2772:	0f 90       	pop	r0
    2774:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2778:	0f 90       	pop	r0
    277a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    277e:	0f 90       	pop	r0
    2780:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2784:	0f 90       	pop	r0
    2786:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    278a:	0f 90       	pop	r0
    278c:	1f 90       	pop	r1
    278e:	18 95       	reti

00002790 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    2790:	1f 92       	push	r1
    2792:	0f 92       	push	r0
    2794:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2798:	0f 92       	push	r0
    279a:	11 24       	eor	r1, r1
    279c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    27a0:	0f 92       	push	r0
    27a2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    27a6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27aa:	0f 92       	push	r0
    27ac:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27b0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27b4:	0f 92       	push	r0
    27b6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27ba:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27be:	0f 92       	push	r0
    27c0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27c4:	2f 93       	push	r18
    27c6:	3f 93       	push	r19
    27c8:	4f 93       	push	r20
    27ca:	5f 93       	push	r21
    27cc:	6f 93       	push	r22
    27ce:	7f 93       	push	r23
    27d0:	8f 93       	push	r24
    27d2:	9f 93       	push	r25
    27d4:	af 93       	push	r26
    27d6:	bf 93       	push	r27
    27d8:	ef 93       	push	r30
    27da:	ff 93       	push	r31
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    27e4:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tce0_ccc_callback>
    27e8:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tce0_ccc_callback+0x1>
    27ec:	89 2b       	or	r24, r25
    27ee:	31 f0       	breq	.+12     	; 0x27fc <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    27f0:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tce0_ccc_callback>
    27f4:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tce0_ccc_callback+0x1>
    27f8:	fc 01       	movw	r30, r24
    27fa:	19 95       	eicall
	}
}
    27fc:	00 00       	nop
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	ff 91       	pop	r31
    2804:	ef 91       	pop	r30
    2806:	bf 91       	pop	r27
    2808:	af 91       	pop	r26
    280a:	9f 91       	pop	r25
    280c:	8f 91       	pop	r24
    280e:	7f 91       	pop	r23
    2810:	6f 91       	pop	r22
    2812:	5f 91       	pop	r21
    2814:	4f 91       	pop	r20
    2816:	3f 91       	pop	r19
    2818:	2f 91       	pop	r18
    281a:	0f 90       	pop	r0
    281c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2820:	0f 90       	pop	r0
    2822:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2826:	0f 90       	pop	r0
    2828:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    282c:	0f 90       	pop	r0
    282e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2832:	0f 90       	pop	r0
    2834:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2838:	0f 90       	pop	r0
    283a:	1f 90       	pop	r1
    283c:	18 95       	reti

0000283e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    283e:	1f 92       	push	r1
    2840:	0f 92       	push	r0
    2842:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2846:	0f 92       	push	r0
    2848:	11 24       	eor	r1, r1
    284a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    284e:	0f 92       	push	r0
    2850:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2854:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2858:	0f 92       	push	r0
    285a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    285e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2862:	0f 92       	push	r0
    2864:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2868:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    286c:	0f 92       	push	r0
    286e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2872:	2f 93       	push	r18
    2874:	3f 93       	push	r19
    2876:	4f 93       	push	r20
    2878:	5f 93       	push	r21
    287a:	6f 93       	push	r22
    287c:	7f 93       	push	r23
    287e:	8f 93       	push	r24
    2880:	9f 93       	push	r25
    2882:	af 93       	push	r26
    2884:	bf 93       	push	r27
    2886:	ef 93       	push	r30
    2888:	ff 93       	push	r31
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    2892:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tce0_ccd_callback>
    2896:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tce0_ccd_callback+0x1>
    289a:	89 2b       	or	r24, r25
    289c:	31 f0       	breq	.+12     	; 0x28aa <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    289e:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tce0_ccd_callback>
    28a2:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tce0_ccd_callback+0x1>
    28a6:	fc 01       	movw	r30, r24
    28a8:	19 95       	eicall
	}
}
    28aa:	00 00       	nop
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	ff 91       	pop	r31
    28b2:	ef 91       	pop	r30
    28b4:	bf 91       	pop	r27
    28b6:	af 91       	pop	r26
    28b8:	9f 91       	pop	r25
    28ba:	8f 91       	pop	r24
    28bc:	7f 91       	pop	r23
    28be:	6f 91       	pop	r22
    28c0:	5f 91       	pop	r21
    28c2:	4f 91       	pop	r20
    28c4:	3f 91       	pop	r19
    28c6:	2f 91       	pop	r18
    28c8:	0f 90       	pop	r0
    28ca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    28ce:	0f 90       	pop	r0
    28d0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28d4:	0f 90       	pop	r0
    28d6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28da:	0f 90       	pop	r0
    28dc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28e0:	0f 90       	pop	r0
    28e2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28e6:	0f 90       	pop	r0
    28e8:	1f 90       	pop	r1
    28ea:	18 95       	reti

000028ec <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    28ec:	1f 92       	push	r1
    28ee:	0f 92       	push	r0
    28f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28f4:	0f 92       	push	r0
    28f6:	11 24       	eor	r1, r1
    28f8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28fc:	0f 92       	push	r0
    28fe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2902:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2906:	0f 92       	push	r0
    2908:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    290c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2910:	0f 92       	push	r0
    2912:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2916:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    291a:	0f 92       	push	r0
    291c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2920:	2f 93       	push	r18
    2922:	3f 93       	push	r19
    2924:	4f 93       	push	r20
    2926:	5f 93       	push	r21
    2928:	6f 93       	push	r22
    292a:	7f 93       	push	r23
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	af 93       	push	r26
    2932:	bf 93       	push	r27
    2934:	ef 93       	push	r30
    2936:	ff 93       	push	r31
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    2940:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tce1_ovf_callback>
    2944:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tce1_ovf_callback+0x1>
    2948:	89 2b       	or	r24, r25
    294a:	31 f0       	breq	.+12     	; 0x2958 <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    294c:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tce1_ovf_callback>
    2950:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tce1_ovf_callback+0x1>
    2954:	fc 01       	movw	r30, r24
    2956:	19 95       	eicall
	}
}
    2958:	00 00       	nop
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	ff 91       	pop	r31
    2960:	ef 91       	pop	r30
    2962:	bf 91       	pop	r27
    2964:	af 91       	pop	r26
    2966:	9f 91       	pop	r25
    2968:	8f 91       	pop	r24
    296a:	7f 91       	pop	r23
    296c:	6f 91       	pop	r22
    296e:	5f 91       	pop	r21
    2970:	4f 91       	pop	r20
    2972:	3f 91       	pop	r19
    2974:	2f 91       	pop	r18
    2976:	0f 90       	pop	r0
    2978:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    297c:	0f 90       	pop	r0
    297e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2982:	0f 90       	pop	r0
    2984:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2988:	0f 90       	pop	r0
    298a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    298e:	0f 90       	pop	r0
    2990:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2994:	0f 90       	pop	r0
    2996:	1f 90       	pop	r1
    2998:	18 95       	reti

0000299a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    299a:	1f 92       	push	r1
    299c:	0f 92       	push	r0
    299e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    29a2:	0f 92       	push	r0
    29a4:	11 24       	eor	r1, r1
    29a6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    29aa:	0f 92       	push	r0
    29ac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    29b0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29b4:	0f 92       	push	r0
    29b6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29ba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29be:	0f 92       	push	r0
    29c0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29c4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29c8:	0f 92       	push	r0
    29ca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    29ee:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tce1_err_callback>
    29f2:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tce1_err_callback+0x1>
    29f6:	89 2b       	or	r24, r25
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <__vector_54+0x6c>
		tc_tce1_err_callback();
    29fa:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tce1_err_callback>
    29fe:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tce1_err_callback+0x1>
    2a02:	fc 01       	movw	r30, r24
    2a04:	19 95       	eicall
	}
}
    2a06:	00 00       	nop
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	ff 91       	pop	r31
    2a0e:	ef 91       	pop	r30
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	7f 91       	pop	r23
    2a1a:	6f 91       	pop	r22
    2a1c:	5f 91       	pop	r21
    2a1e:	4f 91       	pop	r20
    2a20:	3f 91       	pop	r19
    2a22:	2f 91       	pop	r18
    2a24:	0f 90       	pop	r0
    2a26:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a2a:	0f 90       	pop	r0
    2a2c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a30:	0f 90       	pop	r0
    2a32:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a36:	0f 90       	pop	r0
    2a38:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a3c:	0f 90       	pop	r0
    2a3e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a42:	0f 90       	pop	r0
    2a44:	1f 90       	pop	r1
    2a46:	18 95       	reti

00002a48 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    2a48:	1f 92       	push	r1
    2a4a:	0f 92       	push	r0
    2a4c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a50:	0f 92       	push	r0
    2a52:	11 24       	eor	r1, r1
    2a54:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a58:	0f 92       	push	r0
    2a5a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a5e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a62:	0f 92       	push	r0
    2a64:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a68:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a6c:	0f 92       	push	r0
    2a6e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a72:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a76:	0f 92       	push	r0
    2a78:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a7c:	2f 93       	push	r18
    2a7e:	3f 93       	push	r19
    2a80:	4f 93       	push	r20
    2a82:	5f 93       	push	r21
    2a84:	6f 93       	push	r22
    2a86:	7f 93       	push	r23
    2a88:	8f 93       	push	r24
    2a8a:	9f 93       	push	r25
    2a8c:	af 93       	push	r26
    2a8e:	bf 93       	push	r27
    2a90:	ef 93       	push	r30
    2a92:	ff 93       	push	r31
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    2a9c:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tce1_cca_callback>
    2aa0:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tce1_cca_callback+0x1>
    2aa4:	89 2b       	or	r24, r25
    2aa6:	31 f0       	breq	.+12     	; 0x2ab4 <__vector_55+0x6c>
		tc_tce1_cca_callback();
    2aa8:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tce1_cca_callback>
    2aac:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tce1_cca_callback+0x1>
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	19 95       	eicall
	}
}
    2ab4:	00 00       	nop
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	ff 91       	pop	r31
    2abc:	ef 91       	pop	r30
    2abe:	bf 91       	pop	r27
    2ac0:	af 91       	pop	r26
    2ac2:	9f 91       	pop	r25
    2ac4:	8f 91       	pop	r24
    2ac6:	7f 91       	pop	r23
    2ac8:	6f 91       	pop	r22
    2aca:	5f 91       	pop	r21
    2acc:	4f 91       	pop	r20
    2ace:	3f 91       	pop	r19
    2ad0:	2f 91       	pop	r18
    2ad2:	0f 90       	pop	r0
    2ad4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ad8:	0f 90       	pop	r0
    2ada:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ade:	0f 90       	pop	r0
    2ae0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ae4:	0f 90       	pop	r0
    2ae6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2aea:	0f 90       	pop	r0
    2aec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2af0:	0f 90       	pop	r0
    2af2:	1f 90       	pop	r1
    2af4:	18 95       	reti

00002af6 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    2af6:	1f 92       	push	r1
    2af8:	0f 92       	push	r0
    2afa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2afe:	0f 92       	push	r0
    2b00:	11 24       	eor	r1, r1
    2b02:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b06:	0f 92       	push	r0
    2b08:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b0c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b10:	0f 92       	push	r0
    2b12:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b16:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b1a:	0f 92       	push	r0
    2b1c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b20:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b24:	0f 92       	push	r0
    2b26:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b2a:	2f 93       	push	r18
    2b2c:	3f 93       	push	r19
    2b2e:	4f 93       	push	r20
    2b30:	5f 93       	push	r21
    2b32:	6f 93       	push	r22
    2b34:	7f 93       	push	r23
    2b36:	8f 93       	push	r24
    2b38:	9f 93       	push	r25
    2b3a:	af 93       	push	r26
    2b3c:	bf 93       	push	r27
    2b3e:	ef 93       	push	r30
    2b40:	ff 93       	push	r31
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    2b4a:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tce1_ccb_callback>
    2b4e:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tce1_ccb_callback+0x1>
    2b52:	89 2b       	or	r24, r25
    2b54:	31 f0       	breq	.+12     	; 0x2b62 <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    2b56:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tce1_ccb_callback>
    2b5a:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tce1_ccb_callback+0x1>
    2b5e:	fc 01       	movw	r30, r24
    2b60:	19 95       	eicall
	}
}
    2b62:	00 00       	nop
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	ff 91       	pop	r31
    2b6a:	ef 91       	pop	r30
    2b6c:	bf 91       	pop	r27
    2b6e:	af 91       	pop	r26
    2b70:	9f 91       	pop	r25
    2b72:	8f 91       	pop	r24
    2b74:	7f 91       	pop	r23
    2b76:	6f 91       	pop	r22
    2b78:	5f 91       	pop	r21
    2b7a:	4f 91       	pop	r20
    2b7c:	3f 91       	pop	r19
    2b7e:	2f 91       	pop	r18
    2b80:	0f 90       	pop	r0
    2b82:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b86:	0f 90       	pop	r0
    2b88:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b8c:	0f 90       	pop	r0
    2b8e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b92:	0f 90       	pop	r0
    2b94:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b98:	0f 90       	pop	r0
    2b9a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b9e:	0f 90       	pop	r0
    2ba0:	1f 90       	pop	r1
    2ba2:	18 95       	reti

00002ba4 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bac:	0f 92       	push	r0
    2bae:	11 24       	eor	r1, r1
    2bb0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2bb4:	0f 92       	push	r0
    2bb6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2bba:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bbe:	0f 92       	push	r0
    2bc0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bc4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bc8:	0f 92       	push	r0
    2bca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bd2:	0f 92       	push	r0
    2bd4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	ef 93       	push	r30
    2bee:	ff 93       	push	r31
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    2bf8:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcf0_ovf_callback>
    2bfc:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcf0_ovf_callback+0x1>
    2c00:	89 2b       	or	r24, r25
    2c02:	31 f0       	breq	.+12     	; 0x2c10 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    2c04:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcf0_ovf_callback>
    2c08:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcf0_ovf_callback+0x1>
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	19 95       	eicall
	}
}
    2c10:	00 00       	nop
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	ff 91       	pop	r31
    2c18:	ef 91       	pop	r30
    2c1a:	bf 91       	pop	r27
    2c1c:	af 91       	pop	r26
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	7f 91       	pop	r23
    2c24:	6f 91       	pop	r22
    2c26:	5f 91       	pop	r21
    2c28:	4f 91       	pop	r20
    2c2a:	3f 91       	pop	r19
    2c2c:	2f 91       	pop	r18
    2c2e:	0f 90       	pop	r0
    2c30:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c34:	0f 90       	pop	r0
    2c36:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c3a:	0f 90       	pop	r0
    2c3c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c40:	0f 90       	pop	r0
    2c42:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c46:	0f 90       	pop	r0
    2c48:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c4c:	0f 90       	pop	r0
    2c4e:	1f 90       	pop	r1
    2c50:	18 95       	reti

00002c52 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    2c52:	1f 92       	push	r1
    2c54:	0f 92       	push	r0
    2c56:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c62:	0f 92       	push	r0
    2c64:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c68:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c6c:	0f 92       	push	r0
    2c6e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c72:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c76:	0f 92       	push	r0
    2c78:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c7c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c80:	0f 92       	push	r0
    2c82:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c86:	2f 93       	push	r18
    2c88:	3f 93       	push	r19
    2c8a:	4f 93       	push	r20
    2c8c:	5f 93       	push	r21
    2c8e:	6f 93       	push	r22
    2c90:	7f 93       	push	r23
    2c92:	8f 93       	push	r24
    2c94:	9f 93       	push	r25
    2c96:	af 93       	push	r26
    2c98:	bf 93       	push	r27
    2c9a:	ef 93       	push	r30
    2c9c:	ff 93       	push	r31
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    2ca6:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcf0_err_callback>
    2caa:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcf0_err_callback+0x1>
    2cae:	89 2b       	or	r24, r25
    2cb0:	31 f0       	breq	.+12     	; 0x2cbe <__vector_109+0x6c>
		tc_tcf0_err_callback();
    2cb2:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcf0_err_callback>
    2cb6:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcf0_err_callback+0x1>
    2cba:	fc 01       	movw	r30, r24
    2cbc:	19 95       	eicall
	}
}
    2cbe:	00 00       	nop
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	ff 91       	pop	r31
    2cc6:	ef 91       	pop	r30
    2cc8:	bf 91       	pop	r27
    2cca:	af 91       	pop	r26
    2ccc:	9f 91       	pop	r25
    2cce:	8f 91       	pop	r24
    2cd0:	7f 91       	pop	r23
    2cd2:	6f 91       	pop	r22
    2cd4:	5f 91       	pop	r21
    2cd6:	4f 91       	pop	r20
    2cd8:	3f 91       	pop	r19
    2cda:	2f 91       	pop	r18
    2cdc:	0f 90       	pop	r0
    2cde:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ce2:	0f 90       	pop	r0
    2ce4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ce8:	0f 90       	pop	r0
    2cea:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2cee:	0f 90       	pop	r0
    2cf0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2cf4:	0f 90       	pop	r0
    2cf6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2cfa:	0f 90       	pop	r0
    2cfc:	1f 90       	pop	r1
    2cfe:	18 95       	reti

00002d00 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    2d00:	1f 92       	push	r1
    2d02:	0f 92       	push	r0
    2d04:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d08:	0f 92       	push	r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d10:	0f 92       	push	r0
    2d12:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d16:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d1a:	0f 92       	push	r0
    2d1c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d20:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d24:	0f 92       	push	r0
    2d26:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d2a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d2e:	0f 92       	push	r0
    2d30:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d34:	2f 93       	push	r18
    2d36:	3f 93       	push	r19
    2d38:	4f 93       	push	r20
    2d3a:	5f 93       	push	r21
    2d3c:	6f 93       	push	r22
    2d3e:	7f 93       	push	r23
    2d40:	8f 93       	push	r24
    2d42:	9f 93       	push	r25
    2d44:	af 93       	push	r26
    2d46:	bf 93       	push	r27
    2d48:	ef 93       	push	r30
    2d4a:	ff 93       	push	r31
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    2d54:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcf0_cca_callback>
    2d58:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcf0_cca_callback+0x1>
    2d5c:	89 2b       	or	r24, r25
    2d5e:	31 f0       	breq	.+12     	; 0x2d6c <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    2d60:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcf0_cca_callback>
    2d64:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcf0_cca_callback+0x1>
    2d68:	fc 01       	movw	r30, r24
    2d6a:	19 95       	eicall
	}
}
    2d6c:	00 00       	nop
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	ff 91       	pop	r31
    2d74:	ef 91       	pop	r30
    2d76:	bf 91       	pop	r27
    2d78:	af 91       	pop	r26
    2d7a:	9f 91       	pop	r25
    2d7c:	8f 91       	pop	r24
    2d7e:	7f 91       	pop	r23
    2d80:	6f 91       	pop	r22
    2d82:	5f 91       	pop	r21
    2d84:	4f 91       	pop	r20
    2d86:	3f 91       	pop	r19
    2d88:	2f 91       	pop	r18
    2d8a:	0f 90       	pop	r0
    2d8c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d90:	0f 90       	pop	r0
    2d92:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d96:	0f 90       	pop	r0
    2d98:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d9c:	0f 90       	pop	r0
    2d9e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2da2:	0f 90       	pop	r0
    2da4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2da8:	0f 90       	pop	r0
    2daa:	1f 90       	pop	r1
    2dac:	18 95       	reti

00002dae <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    2dae:	1f 92       	push	r1
    2db0:	0f 92       	push	r0
    2db2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2db6:	0f 92       	push	r0
    2db8:	11 24       	eor	r1, r1
    2dba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2dbe:	0f 92       	push	r0
    2dc0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2dc4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2dc8:	0f 92       	push	r0
    2dca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2dce:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2dd2:	0f 92       	push	r0
    2dd4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2dd8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ddc:	0f 92       	push	r0
    2dde:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2de2:	2f 93       	push	r18
    2de4:	3f 93       	push	r19
    2de6:	4f 93       	push	r20
    2de8:	5f 93       	push	r21
    2dea:	6f 93       	push	r22
    2dec:	7f 93       	push	r23
    2dee:	8f 93       	push	r24
    2df0:	9f 93       	push	r25
    2df2:	af 93       	push	r26
    2df4:	bf 93       	push	r27
    2df6:	ef 93       	push	r30
    2df8:	ff 93       	push	r31
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    2e02:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tcf0_ccb_callback>
    2e06:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tcf0_ccb_callback+0x1>
    2e0a:	89 2b       	or	r24, r25
    2e0c:	31 f0       	breq	.+12     	; 0x2e1a <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    2e0e:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tcf0_ccb_callback>
    2e12:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tcf0_ccb_callback+0x1>
    2e16:	fc 01       	movw	r30, r24
    2e18:	19 95       	eicall
	}
}
    2e1a:	00 00       	nop
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	ff 91       	pop	r31
    2e22:	ef 91       	pop	r30
    2e24:	bf 91       	pop	r27
    2e26:	af 91       	pop	r26
    2e28:	9f 91       	pop	r25
    2e2a:	8f 91       	pop	r24
    2e2c:	7f 91       	pop	r23
    2e2e:	6f 91       	pop	r22
    2e30:	5f 91       	pop	r21
    2e32:	4f 91       	pop	r20
    2e34:	3f 91       	pop	r19
    2e36:	2f 91       	pop	r18
    2e38:	0f 90       	pop	r0
    2e3a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e3e:	0f 90       	pop	r0
    2e40:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e44:	0f 90       	pop	r0
    2e46:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e4a:	0f 90       	pop	r0
    2e4c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e50:	0f 90       	pop	r0
    2e52:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    2e5c:	1f 92       	push	r1
    2e5e:	0f 92       	push	r0
    2e60:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e64:	0f 92       	push	r0
    2e66:	11 24       	eor	r1, r1
    2e68:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e6c:	0f 92       	push	r0
    2e6e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e72:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e76:	0f 92       	push	r0
    2e78:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e7c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e80:	0f 92       	push	r0
    2e82:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e86:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e8a:	0f 92       	push	r0
    2e8c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	4f 93       	push	r20
    2e96:	5f 93       	push	r21
    2e98:	6f 93       	push	r22
    2e9a:	7f 93       	push	r23
    2e9c:	8f 93       	push	r24
    2e9e:	9f 93       	push	r25
    2ea0:	af 93       	push	r26
    2ea2:	bf 93       	push	r27
    2ea4:	ef 93       	push	r30
    2ea6:	ff 93       	push	r31
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    2eb0:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tcf0_ccc_callback>
    2eb4:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tcf0_ccc_callback+0x1>
    2eb8:	89 2b       	or	r24, r25
    2eba:	31 f0       	breq	.+12     	; 0x2ec8 <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    2ebc:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tcf0_ccc_callback>
    2ec0:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tcf0_ccc_callback+0x1>
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	19 95       	eicall
	}
}
    2ec8:	00 00       	nop
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2eec:	0f 90       	pop	r0
    2eee:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ef2:	0f 90       	pop	r0
    2ef4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ef8:	0f 90       	pop	r0
    2efa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2efe:	0f 90       	pop	r0
    2f00:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f04:	0f 90       	pop	r0
    2f06:	1f 90       	pop	r1
    2f08:	18 95       	reti

00002f0a <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    2f0a:	1f 92       	push	r1
    2f0c:	0f 92       	push	r0
    2f0e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f1a:	0f 92       	push	r0
    2f1c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f20:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f24:	0f 92       	push	r0
    2f26:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f2a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f2e:	0f 92       	push	r0
    2f30:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f34:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f38:	0f 92       	push	r0
    2f3a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f3e:	2f 93       	push	r18
    2f40:	3f 93       	push	r19
    2f42:	4f 93       	push	r20
    2f44:	5f 93       	push	r21
    2f46:	6f 93       	push	r22
    2f48:	7f 93       	push	r23
    2f4a:	8f 93       	push	r24
    2f4c:	9f 93       	push	r25
    2f4e:	af 93       	push	r26
    2f50:	bf 93       	push	r27
    2f52:	ef 93       	push	r30
    2f54:	ff 93       	push	r31
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    2f5e:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcf0_ccd_callback>
    2f62:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcf0_ccd_callback+0x1>
    2f66:	89 2b       	or	r24, r25
    2f68:	31 f0       	breq	.+12     	; 0x2f76 <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    2f6a:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcf0_ccd_callback>
    2f6e:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcf0_ccd_callback+0x1>
    2f72:	fc 01       	movw	r30, r24
    2f74:	19 95       	eicall
	}
}
    2f76:	00 00       	nop
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	ff 91       	pop	r31
    2f7e:	ef 91       	pop	r30
    2f80:	bf 91       	pop	r27
    2f82:	af 91       	pop	r26
    2f84:	9f 91       	pop	r25
    2f86:	8f 91       	pop	r24
    2f88:	7f 91       	pop	r23
    2f8a:	6f 91       	pop	r22
    2f8c:	5f 91       	pop	r21
    2f8e:	4f 91       	pop	r20
    2f90:	3f 91       	pop	r19
    2f92:	2f 91       	pop	r18
    2f94:	0f 90       	pop	r0
    2f96:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f9a:	0f 90       	pop	r0
    2f9c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fa0:	0f 90       	pop	r0
    2fa2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fa6:	0f 90       	pop	r0
    2fa8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fac:	0f 90       	pop	r0
    2fae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fb2:	0f 90       	pop	r0
    2fb4:	1f 90       	pop	r1
    2fb6:	18 95       	reti

00002fb8 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    2fb8:	1f 92       	push	r1
    2fba:	0f 92       	push	r0
    2fbc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fc0:	0f 92       	push	r0
    2fc2:	11 24       	eor	r1, r1
    2fc4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fc8:	0f 92       	push	r0
    2fca:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fce:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fd2:	0f 92       	push	r0
    2fd4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fd8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fdc:	0f 92       	push	r0
    2fde:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fe2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fe6:	0f 92       	push	r0
    2fe8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fec:	2f 93       	push	r18
    2fee:	3f 93       	push	r19
    2ff0:	4f 93       	push	r20
    2ff2:	5f 93       	push	r21
    2ff4:	6f 93       	push	r22
    2ff6:	7f 93       	push	r23
    2ff8:	8f 93       	push	r24
    2ffa:	9f 93       	push	r25
    2ffc:	af 93       	push	r26
    2ffe:	bf 93       	push	r27
    3000:	ef 93       	push	r30
    3002:	ff 93       	push	r31
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    300c:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcf1_ovf_callback>
    3010:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcf1_ovf_callback+0x1>
    3014:	89 2b       	or	r24, r25
    3016:	31 f0       	breq	.+12     	; 0x3024 <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    3018:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcf1_ovf_callback>
    301c:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcf1_ovf_callback+0x1>
    3020:	fc 01       	movw	r30, r24
    3022:	19 95       	eicall
	}
}
    3024:	00 00       	nop
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	ff 91       	pop	r31
    302c:	ef 91       	pop	r30
    302e:	bf 91       	pop	r27
    3030:	af 91       	pop	r26
    3032:	9f 91       	pop	r25
    3034:	8f 91       	pop	r24
    3036:	7f 91       	pop	r23
    3038:	6f 91       	pop	r22
    303a:	5f 91       	pop	r21
    303c:	4f 91       	pop	r20
    303e:	3f 91       	pop	r19
    3040:	2f 91       	pop	r18
    3042:	0f 90       	pop	r0
    3044:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3048:	0f 90       	pop	r0
    304a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    304e:	0f 90       	pop	r0
    3050:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3054:	0f 90       	pop	r0
    3056:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    305a:	0f 90       	pop	r0
    305c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    306e:	0f 92       	push	r0
    3070:	11 24       	eor	r1, r1
    3072:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3076:	0f 92       	push	r0
    3078:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    307c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3080:	0f 92       	push	r0
    3082:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3086:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    308a:	0f 92       	push	r0
    308c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3090:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3094:	0f 92       	push	r0
    3096:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    30ba:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcf1_err_callback>
    30be:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcf1_err_callback+0x1>
    30c2:	89 2b       	or	r24, r25
    30c4:	31 f0       	breq	.+12     	; 0x30d2 <__vector_115+0x6c>
		tc_tcf1_err_callback();
    30c6:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcf1_err_callback>
    30ca:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcf1_err_callback+0x1>
    30ce:	fc 01       	movw	r30, r24
    30d0:	19 95       	eicall
	}
}
    30d2:	00 00       	nop
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	ff 91       	pop	r31
    30da:	ef 91       	pop	r30
    30dc:	bf 91       	pop	r27
    30de:	af 91       	pop	r26
    30e0:	9f 91       	pop	r25
    30e2:	8f 91       	pop	r24
    30e4:	7f 91       	pop	r23
    30e6:	6f 91       	pop	r22
    30e8:	5f 91       	pop	r21
    30ea:	4f 91       	pop	r20
    30ec:	3f 91       	pop	r19
    30ee:	2f 91       	pop	r18
    30f0:	0f 90       	pop	r0
    30f2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    30f6:	0f 90       	pop	r0
    30f8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    30fc:	0f 90       	pop	r0
    30fe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3102:	0f 90       	pop	r0
    3104:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3108:	0f 90       	pop	r0
    310a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    310e:	0f 90       	pop	r0
    3110:	1f 90       	pop	r1
    3112:	18 95       	reti

00003114 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    3114:	1f 92       	push	r1
    3116:	0f 92       	push	r0
    3118:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    311c:	0f 92       	push	r0
    311e:	11 24       	eor	r1, r1
    3120:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3124:	0f 92       	push	r0
    3126:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    312a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    312e:	0f 92       	push	r0
    3130:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3134:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3138:	0f 92       	push	r0
    313a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    313e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3142:	0f 92       	push	r0
    3144:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3148:	2f 93       	push	r18
    314a:	3f 93       	push	r19
    314c:	4f 93       	push	r20
    314e:	5f 93       	push	r21
    3150:	6f 93       	push	r22
    3152:	7f 93       	push	r23
    3154:	8f 93       	push	r24
    3156:	9f 93       	push	r25
    3158:	af 93       	push	r26
    315a:	bf 93       	push	r27
    315c:	ef 93       	push	r30
    315e:	ff 93       	push	r31
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    3168:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcf1_cca_callback>
    316c:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcf1_cca_callback+0x1>
    3170:	89 2b       	or	r24, r25
    3172:	31 f0       	breq	.+12     	; 0x3180 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    3174:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcf1_cca_callback>
    3178:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcf1_cca_callback+0x1>
    317c:	fc 01       	movw	r30, r24
    317e:	19 95       	eicall
	}
}
    3180:	00 00       	nop
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	ff 91       	pop	r31
    3188:	ef 91       	pop	r30
    318a:	bf 91       	pop	r27
    318c:	af 91       	pop	r26
    318e:	9f 91       	pop	r25
    3190:	8f 91       	pop	r24
    3192:	7f 91       	pop	r23
    3194:	6f 91       	pop	r22
    3196:	5f 91       	pop	r21
    3198:	4f 91       	pop	r20
    319a:	3f 91       	pop	r19
    319c:	2f 91       	pop	r18
    319e:	0f 90       	pop	r0
    31a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31a4:	0f 90       	pop	r0
    31a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31aa:	0f 90       	pop	r0
    31ac:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31b0:	0f 90       	pop	r0
    31b2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31b6:	0f 90       	pop	r0
    31b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    31c2:	1f 92       	push	r1
    31c4:	0f 92       	push	r0
    31c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31ca:	0f 92       	push	r0
    31cc:	11 24       	eor	r1, r1
    31ce:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31d2:	0f 92       	push	r0
    31d4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31d8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31dc:	0f 92       	push	r0
    31de:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31e2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31e6:	0f 92       	push	r0
    31e8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31ec:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31f0:	0f 92       	push	r0
    31f2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31f6:	2f 93       	push	r18
    31f8:	3f 93       	push	r19
    31fa:	4f 93       	push	r20
    31fc:	5f 93       	push	r21
    31fe:	6f 93       	push	r22
    3200:	7f 93       	push	r23
    3202:	8f 93       	push	r24
    3204:	9f 93       	push	r25
    3206:	af 93       	push	r26
    3208:	bf 93       	push	r27
    320a:	ef 93       	push	r30
    320c:	ff 93       	push	r31
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    3216:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcf1_ccb_callback>
    321a:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcf1_ccb_callback+0x1>
    321e:	89 2b       	or	r24, r25
    3220:	31 f0       	breq	.+12     	; 0x322e <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    3222:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcf1_ccb_callback>
    3226:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcf1_ccb_callback+0x1>
    322a:	fc 01       	movw	r30, r24
    322c:	19 95       	eicall
	}
}
    322e:	00 00       	nop
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	ff 91       	pop	r31
    3236:	ef 91       	pop	r30
    3238:	bf 91       	pop	r27
    323a:	af 91       	pop	r26
    323c:	9f 91       	pop	r25
    323e:	8f 91       	pop	r24
    3240:	7f 91       	pop	r23
    3242:	6f 91       	pop	r22
    3244:	5f 91       	pop	r21
    3246:	4f 91       	pop	r20
    3248:	3f 91       	pop	r19
    324a:	2f 91       	pop	r18
    324c:	0f 90       	pop	r0
    324e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3252:	0f 90       	pop	r0
    3254:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3258:	0f 90       	pop	r0
    325a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    325e:	0f 90       	pop	r0
    3260:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3264:	0f 90       	pop	r0
    3266:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    326a:	0f 90       	pop	r0
    326c:	1f 90       	pop	r1
    326e:	18 95       	reti

00003270 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	1f 92       	push	r1
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    327a:	8f e3       	ldi	r24, 0x3F	; 63
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	fc 01       	movw	r30, r24
    3280:	80 81       	ld	r24, Z
    3282:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3284:	f8 94       	cli
	return flags;
    3286:	89 81       	ldd	r24, Y+1	; 0x01
}
    3288:	0f 90       	pop	r0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret

00003290 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	1f 92       	push	r1
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    329c:	8f e3       	ldi	r24, 0x3F	; 63
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	29 81       	ldd	r18, Y+1	; 0x01
    32a2:	fc 01       	movw	r30, r24
    32a4:	20 83       	st	Z, r18
}
    32a6:	00 00       	nop
    32a8:	0f 90       	pop	r0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	08 95       	ret

000032b0 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    32b0:	1f 92       	push	r1
    32b2:	0f 92       	push	r0
    32b4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    32b8:	0f 92       	push	r0
    32ba:	11 24       	eor	r1, r1
    32bc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    32c0:	0f 92       	push	r0
    32c2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    32c6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    32ca:	0f 92       	push	r0
    32cc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    32d0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    32d4:	0f 92       	push	r0
    32d6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    32da:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    32de:	0f 92       	push	r0
    32e0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    32e4:	2f 93       	push	r18
    32e6:	3f 93       	push	r19
    32e8:	4f 93       	push	r20
    32ea:	5f 93       	push	r21
    32ec:	6f 93       	push	r22
    32ee:	7f 93       	push	r23
    32f0:	8f 93       	push	r24
    32f2:	9f 93       	push	r25
    32f4:	af 93       	push	r26
    32f6:	bf 93       	push	r27
    32f8:	ef 93       	push	r30
    32fa:	ff 93       	push	r31
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	43 d2       	rcall	.+1158   	; 0x378c <twim_interrupt_handler>
    3306:	00 00       	nop
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	ff 91       	pop	r31
    330e:	ef 91       	pop	r30
    3310:	bf 91       	pop	r27
    3312:	af 91       	pop	r26
    3314:	9f 91       	pop	r25
    3316:	8f 91       	pop	r24
    3318:	7f 91       	pop	r23
    331a:	6f 91       	pop	r22
    331c:	5f 91       	pop	r21
    331e:	4f 91       	pop	r20
    3320:	3f 91       	pop	r19
    3322:	2f 91       	pop	r18
    3324:	0f 90       	pop	r0
    3326:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    332a:	0f 90       	pop	r0
    332c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3330:	0f 90       	pop	r0
    3332:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3336:	0f 90       	pop	r0
    3338:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    333c:	0f 90       	pop	r0
    333e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3342:	0f 90       	pop	r0
    3344:	1f 90       	pop	r1
    3346:	18 95       	reti

00003348 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    3348:	1f 92       	push	r1
    334a:	0f 92       	push	r0
    334c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3350:	0f 92       	push	r0
    3352:	11 24       	eor	r1, r1
    3354:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3358:	0f 92       	push	r0
    335a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    335e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3362:	0f 92       	push	r0
    3364:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3368:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    336c:	0f 92       	push	r0
    336e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3372:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3376:	0f 92       	push	r0
    3378:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    337c:	2f 93       	push	r18
    337e:	3f 93       	push	r19
    3380:	4f 93       	push	r20
    3382:	5f 93       	push	r21
    3384:	6f 93       	push	r22
    3386:	7f 93       	push	r23
    3388:	8f 93       	push	r24
    338a:	9f 93       	push	r25
    338c:	af 93       	push	r26
    338e:	bf 93       	push	r27
    3390:	ef 93       	push	r30
    3392:	ff 93       	push	r31
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	f7 d1       	rcall	.+1006   	; 0x378c <twim_interrupt_handler>
    339e:	00 00       	nop
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	ff 91       	pop	r31
    33a6:	ef 91       	pop	r30
    33a8:	bf 91       	pop	r27
    33aa:	af 91       	pop	r26
    33ac:	9f 91       	pop	r25
    33ae:	8f 91       	pop	r24
    33b0:	7f 91       	pop	r23
    33b2:	6f 91       	pop	r22
    33b4:	5f 91       	pop	r21
    33b6:	4f 91       	pop	r20
    33b8:	3f 91       	pop	r19
    33ba:	2f 91       	pop	r18
    33bc:	0f 90       	pop	r0
    33be:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33c2:	0f 90       	pop	r0
    33c4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33c8:	0f 90       	pop	r0
    33ca:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33ce:	0f 90       	pop	r0
    33d0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33d4:	0f 90       	pop	r0
    33d6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33da:	0f 90       	pop	r0
    33dc:	1f 90       	pop	r1
    33de:	18 95       	reti

000033e0 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    33e0:	1f 92       	push	r1
    33e2:	0f 92       	push	r0
    33e4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33e8:	0f 92       	push	r0
    33ea:	11 24       	eor	r1, r1
    33ec:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33f0:	0f 92       	push	r0
    33f2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33f6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33fa:	0f 92       	push	r0
    33fc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3400:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3404:	0f 92       	push	r0
    3406:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    340a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    340e:	0f 92       	push	r0
    3410:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3414:	2f 93       	push	r18
    3416:	3f 93       	push	r19
    3418:	4f 93       	push	r20
    341a:	5f 93       	push	r21
    341c:	6f 93       	push	r22
    341e:	7f 93       	push	r23
    3420:	8f 93       	push	r24
    3422:	9f 93       	push	r25
    3424:	af 93       	push	r26
    3426:	bf 93       	push	r27
    3428:	ef 93       	push	r30
    342a:	ff 93       	push	r31
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	ab d1       	rcall	.+854    	; 0x378c <twim_interrupt_handler>
    3436:	00 00       	nop
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	ff 91       	pop	r31
    343e:	ef 91       	pop	r30
    3440:	bf 91       	pop	r27
    3442:	af 91       	pop	r26
    3444:	9f 91       	pop	r25
    3446:	8f 91       	pop	r24
    3448:	7f 91       	pop	r23
    344a:	6f 91       	pop	r22
    344c:	5f 91       	pop	r21
    344e:	4f 91       	pop	r20
    3450:	3f 91       	pop	r19
    3452:	2f 91       	pop	r18
    3454:	0f 90       	pop	r0
    3456:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    345a:	0f 90       	pop	r0
    345c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3460:	0f 90       	pop	r0
    3462:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3466:	0f 90       	pop	r0
    3468:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    346c:	0f 90       	pop	r0
    346e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3472:	0f 90       	pop	r0
    3474:	1f 90       	pop	r1
    3476:	18 95       	reti

00003478 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    3478:	1f 92       	push	r1
    347a:	0f 92       	push	r0
    347c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3480:	0f 92       	push	r0
    3482:	11 24       	eor	r1, r1
    3484:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3488:	0f 92       	push	r0
    348a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    348e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3492:	0f 92       	push	r0
    3494:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3498:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    349c:	0f 92       	push	r0
    349e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34a2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34a6:	0f 92       	push	r0
    34a8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34ac:	2f 93       	push	r18
    34ae:	3f 93       	push	r19
    34b0:	4f 93       	push	r20
    34b2:	5f 93       	push	r21
    34b4:	6f 93       	push	r22
    34b6:	7f 93       	push	r23
    34b8:	8f 93       	push	r24
    34ba:	9f 93       	push	r25
    34bc:	af 93       	push	r26
    34be:	bf 93       	push	r27
    34c0:	ef 93       	push	r30
    34c2:	ff 93       	push	r31
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	5f d1       	rcall	.+702    	; 0x378c <twim_interrupt_handler>
    34ce:	00 00       	nop
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	ff 91       	pop	r31
    34d6:	ef 91       	pop	r30
    34d8:	bf 91       	pop	r27
    34da:	af 91       	pop	r26
    34dc:	9f 91       	pop	r25
    34de:	8f 91       	pop	r24
    34e0:	7f 91       	pop	r23
    34e2:	6f 91       	pop	r22
    34e4:	5f 91       	pop	r21
    34e6:	4f 91       	pop	r20
    34e8:	3f 91       	pop	r19
    34ea:	2f 91       	pop	r18
    34ec:	0f 90       	pop	r0
    34ee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34f2:	0f 90       	pop	r0
    34f4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34f8:	0f 90       	pop	r0
    34fa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    34fe:	0f 90       	pop	r0
    3500:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3504:	0f 90       	pop	r0
    3506:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    350a:	0f 90       	pop	r0
    350c:	1f 90       	pop	r1
    350e:	18 95       	reti

00003510 <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	1f 92       	push	r1
    3516:	1f 92       	push	r1
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	fc 01       	movw	r30, r24
    3526:	84 81       	ldd	r24, Z+4	; 0x04
    3528:	88 2f       	mov	r24, r24
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	83 70       	andi	r24, 0x03	; 3
    352e:	99 27       	eor	r25, r25
    3530:	21 e0       	ldi	r18, 0x01	; 1
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	09 f0       	breq	.+2      	; 0x3538 <twim_idle+0x28>
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	1f 92       	push	r1
    354a:	1f 92       	push	r1
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    3552:	05 c0       	rjmp	.+10     	; 0x355e <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	88 23       	and	r24, r24
    3558:	11 f0       	breq	.+4      	; 0x355e <twim_acquire+0x1a>
    355a:	86 ef       	ldi	r24, 0xF6	; 246
    355c:	0f c0       	rjmp	.+30     	; 0x357c <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    355e:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <transfer+0x9>
    3562:	88 23       	and	r24, r24
    3564:	b9 f7       	brne	.-18     	; 0x3554 <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    3566:	84 de       	rcall	.-760    	; 0x3270 <cpu_irq_save>
    3568:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    3570:	80 e8       	ldi	r24, 0x80	; 128
    3572:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>

	cpu_irq_restore (flags);
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	8b de       	rcall	.-746    	; 0x3290 <cpu_irq_restore>

	return STATUS_OK;
    357a:	80 e0       	ldi	r24, 0x00	; 0
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	1f 92       	push	r1
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    3590:	00 00       	nop
    3592:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer+0xa>
    3596:	80 38       	cpi	r24, 0x80	; 128
    3598:	e1 f3       	breq	.-8      	; 0x3592 <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    359a:	00 c0       	rjmp	.+0      	; 0x359c <twim_release+0x16>
    359c:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    35a0:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    35a4:	b5 df       	rcall	.-150    	; 0x3510 <twim_idle>
    35a6:	98 2f       	mov	r25, r24
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	89 27       	eor	r24, r25
    35ac:	88 23       	and	r24, r24
    35ae:	b1 f7       	brne	.-20     	; 0x359c <twim_release+0x16>

	status_code_t const status = transfer.status;
    35b0:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer+0xa>
    35b4:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    35b6:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <transfer+0x9>

	return status;
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    35bc:	0f 90       	pop	r0
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	08 95       	ret

000035c4 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	28 97       	sbiw	r28, 0x08	; 8
    35ce:	cd bf       	out	0x3d, r28	; 61
    35d0:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    35d2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    35d6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    35da:	89 83       	std	Y+1, r24	; 0x01
    35dc:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    35de:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <transfer+0x2>
    35e2:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <transfer+0x3>
    35e6:	8b 83       	std	Y+3, r24	; 0x03
    35e8:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    35ea:	20 91 be 20 	lds	r18, 0x20BE	; 0x8020be <transfer+0x4>
    35ee:	30 91 bf 20 	lds	r19, 0x20BF	; 0x8020bf <transfer+0x5>
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	fc 01       	movw	r30, r24
    35f8:	84 81       	ldd	r24, Z+4	; 0x04
    35fa:	95 81       	ldd	r25, Z+5	; 0x05
    35fc:	28 17       	cp	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	e4 f4       	brge	.+56     	; 0x363a <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	8d 83       	std	Y+5, r24	; 0x05
    360a:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    360c:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <transfer+0x4>
    3610:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <transfer+0x5>
    3614:	9c 01       	movw	r18, r24
    3616:	2f 5f       	subi	r18, 0xFF	; 255
    3618:	3f 4f       	sbci	r19, 0xFF	; 255
    361a:	20 93 be 20 	sts	0x20BE, r18	; 0x8020be <transfer+0x4>
    361e:	30 93 bf 20 	sts	0x20BF, r19	; 0x8020bf <transfer+0x5>
    3622:	9c 01       	movw	r18, r24
    3624:	8d 81       	ldd	r24, Y+5	; 0x05
    3626:	9e 81       	ldd	r25, Y+6	; 0x06
    3628:	82 0f       	add	r24, r18
    362a:	93 1f       	adc	r25, r19
    362c:	fc 01       	movw	r30, r24
    362e:	20 81       	ld	r18, Z
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	fc 01       	movw	r30, r24
    3636:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3638:	3f c0       	rjmp	.+126    	; 0x36b8 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    363a:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <transfer+0x6>
    363e:	30 91 c1 20 	lds	r19, 0x20C1	; 0x8020c1 <transfer+0x7>
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	9c 81       	ldd	r25, Y+4	; 0x04
    3646:	fc 01       	movw	r30, r24
    3648:	80 85       	ldd	r24, Z+8	; 0x08
    364a:	91 85       	ldd	r25, Z+9	; 0x09
    364c:	28 17       	cp	r18, r24
    364e:	39 07       	cpc	r19, r25
    3650:	60 f5       	brcc	.+88     	; 0x36aa <twim_write_handler+0xe6>

		if (transfer.read) {
    3652:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <transfer+0x8>
    3656:	88 23       	and	r24, r24
    3658:	59 f0       	breq	.+22     	; 0x3670 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	fc 01       	movw	r30, r24
    3660:	86 81       	ldd	r24, Z+6	; 0x06
    3662:	28 2f       	mov	r18, r24
    3664:	21 60       	ori	r18, 0x01	; 1
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	9a 81       	ldd	r25, Y+2	; 0x02
    366a:	fc 01       	movw	r30, r24
    366c:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    366e:	24 c0       	rjmp	.+72     	; 0x36b8 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	9c 81       	ldd	r25, Y+4	; 0x04
    3674:	fc 01       	movw	r30, r24
    3676:	86 81       	ldd	r24, Z+6	; 0x06
    3678:	97 81       	ldd	r25, Z+7	; 0x07
    367a:	8f 83       	std	Y+7, r24	; 0x07
    367c:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    367e:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <transfer+0x6>
    3682:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <transfer+0x7>
    3686:	9c 01       	movw	r18, r24
    3688:	2f 5f       	subi	r18, 0xFF	; 255
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	20 93 c0 20 	sts	0x20C0, r18	; 0x8020c0 <transfer+0x6>
    3690:	30 93 c1 20 	sts	0x20C1, r19	; 0x8020c1 <transfer+0x7>
    3694:	2f 81       	ldd	r18, Y+7	; 0x07
    3696:	38 85       	ldd	r19, Y+8	; 0x08
    3698:	82 0f       	add	r24, r18
    369a:	93 1f       	adc	r25, r19
    369c:	fc 01       	movw	r30, r24
    369e:	20 81       	ld	r18, Z
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	fc 01       	movw	r30, r24
    36a6:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    36a8:	07 c0       	rjmp	.+14     	; 0x36b8 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	23 e0       	ldi	r18, 0x03	; 3
    36b0:	fc 01       	movw	r30, r24
    36b2:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    36b4:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <transfer+0xa>
	}
}
    36b8:	00 00       	nop
    36ba:	28 96       	adiw	r28, 0x08	; 8
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	08 95       	ret

000036c6 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <twim_read_handler+0x6>
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <twim_read_handler+0x8>
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    36d2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    36d6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    36de:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <transfer+0x2>
    36e2:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <transfer+0x3>
    36e6:	8b 83       	std	Y+3, r24	; 0x03
    36e8:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    36ea:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <transfer+0x6>
    36ee:	30 91 c1 20 	lds	r19, 0x20C1	; 0x8020c1 <transfer+0x7>
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	fc 01       	movw	r30, r24
    36f8:	80 85       	ldd	r24, Z+8	; 0x08
    36fa:	91 85       	ldd	r25, Z+9	; 0x09
    36fc:	28 17       	cp	r18, r24
    36fe:	39 07       	cpc	r19, r25
    3700:	b0 f5       	brcc	.+108    	; 0x376e <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	9c 81       	ldd	r25, Y+4	; 0x04
    3706:	fc 01       	movw	r30, r24
    3708:	86 81       	ldd	r24, Z+6	; 0x06
    370a:	97 81       	ldd	r25, Z+7	; 0x07
    370c:	8d 83       	std	Y+5, r24	; 0x05
    370e:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    3710:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <transfer+0x6>
    3714:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <transfer+0x7>
    3718:	9c 01       	movw	r18, r24
    371a:	2f 5f       	subi	r18, 0xFF	; 255
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	20 93 c0 20 	sts	0x20C0, r18	; 0x8020c0 <transfer+0x6>
    3722:	30 93 c1 20 	sts	0x20C1, r19	; 0x8020c1 <transfer+0x7>
    3726:	2d 81       	ldd	r18, Y+5	; 0x05
    3728:	3e 81       	ldd	r19, Y+6	; 0x06
    372a:	82 0f       	add	r24, r18
    372c:	93 1f       	adc	r25, r19
    372e:	29 81       	ldd	r18, Y+1	; 0x01
    3730:	3a 81       	ldd	r19, Y+2	; 0x02
    3732:	f9 01       	movw	r30, r18
    3734:	27 81       	ldd	r18, Z+7	; 0x07
    3736:	fc 01       	movw	r30, r24
    3738:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    373a:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <transfer+0x6>
    373e:	30 91 c1 20 	lds	r19, 0x20C1	; 0x8020c1 <transfer+0x7>
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	9c 81       	ldd	r25, Y+4	; 0x04
    3746:	fc 01       	movw	r30, r24
    3748:	80 85       	ldd	r24, Z+8	; 0x08
    374a:	91 85       	ldd	r25, Z+9	; 0x09
    374c:	28 17       	cp	r18, r24
    374e:	39 07       	cpc	r19, r25
    3750:	30 f4       	brcc	.+12     	; 0x375e <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	9a 81       	ldd	r25, Y+2	; 0x02
    3756:	22 e0       	ldi	r18, 0x02	; 2
    3758:	fc 01       	movw	r30, r24
    375a:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    375c:	10 c0       	rjmp	.+32     	; 0x377e <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	9a 81       	ldd	r25, Y+2	; 0x02
    3762:	27 e0       	ldi	r18, 0x07	; 7
    3764:	fc 01       	movw	r30, r24
    3766:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    3768:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    376c:	08 c0       	rjmp	.+16     	; 0x377e <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	23 e0       	ldi	r18, 0x03	; 3
    3774:	fc 01       	movw	r30, r24
    3776:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3778:	89 ef       	ldi	r24, 0xF9	; 249
    377a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>
	}
}
    377e:	00 00       	nop
    3780:	26 96       	adiw	r28, 0x06	; 6
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	1f 92       	push	r1
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    3796:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    379a:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    379e:	fc 01       	movw	r30, r24
    37a0:	84 81       	ldd	r24, Z+4	; 0x04
    37a2:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	88 70       	andi	r24, 0x08	; 8
    37ac:	99 27       	eor	r25, r25
    37ae:	89 2b       	or	r24, r25
    37b0:	99 f0       	breq	.+38     	; 0x37d8 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    37b2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    37b6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    37ba:	29 81       	ldd	r18, Y+1	; 0x01
    37bc:	28 60       	ori	r18, 0x08	; 8
    37be:	fc 01       	movw	r30, r24
    37c0:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    37c2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    37c6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    37ca:	23 e0       	ldi	r18, 0x03	; 3
    37cc:	fc 01       	movw	r30, r24
    37ce:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    37d0:	86 ef       	ldi	r24, 0xF6	; 246
    37d2:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    37d6:	2a c0       	rjmp	.+84     	; 0x382c <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	84 70       	andi	r24, 0x04	; 4
    37e0:	99 27       	eor	r25, r25
    37e2:	89 2b       	or	r24, r25
    37e4:	39 f4       	brne	.+14     	; 0x37f4 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	88 2f       	mov	r24, r24
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	80 71       	andi	r24, 0x10	; 16
    37ee:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    37f0:	89 2b       	or	r24, r25
    37f2:	59 f0       	breq	.+22     	; 0x380a <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    37f4:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    37f8:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    37fc:	23 e0       	ldi	r18, 0x03	; 3
    37fe:	fc 01       	movw	r30, r24
    3800:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    3802:	8f ef       	ldi	r24, 0xFF	; 255
    3804:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3808:	11 c0       	rjmp	.+34     	; 0x382c <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	80 74       	andi	r24, 0x40	; 64
    3812:	99 27       	eor	r25, r25
    3814:	89 2b       	or	r24, r25
    3816:	11 f0       	breq	.+4      	; 0x381c <twim_interrupt_handler+0x90>

		twim_write_handler();
    3818:	d5 de       	rcall	.-598    	; 0x35c4 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    381a:	08 c0       	rjmp	.+16     	; 0x382c <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	88 23       	and	r24, r24

		twim_read_handler();
    3820:	14 f4       	brge	.+4      	; 0x3826 <twim_interrupt_handler+0x9a>
    3822:	51 df       	rcall	.-350    	; 0x36c6 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3824:	03 c0       	rjmp	.+6      	; 0x382c <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    3826:	8b ef       	ldi	r24, 0xFB	; 251
    3828:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>
	}
}
    382c:	00 00       	nop
    382e:	0f 90       	pop	r0
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	08 95       	ret

00003836 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	25 97       	sbiw	r28, 0x05	; 5
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	8a 83       	std	Y+2, r24	; 0x02
    3846:	9b 83       	std	Y+3, r25	; 0x03
    3848:	6c 83       	std	Y+4, r22	; 0x04
    384a:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    384c:	88 eb       	ldi	r24, 0xB8	; 184
    384e:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    3850:	8c 81       	ldd	r24, Y+4	; 0x04
    3852:	9d 81       	ldd	r25, Y+5	; 0x05
    3854:	fc 01       	movw	r30, r24
    3856:	84 81       	ldd	r24, Z+4	; 0x04
    3858:	95 81       	ldd	r25, Z+5	; 0x05
    385a:	a6 81       	ldd	r26, Z+6	; 0x06
    385c:	b7 81       	ldd	r27, Z+7	; 0x07
    385e:	28 2f       	mov	r18, r24
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	9b 81       	ldd	r25, Y+3	; 0x03
    3864:	fc 01       	movw	r30, r24
    3866:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	9b 81       	ldd	r25, Y+3	; 0x03
    386c:	29 81       	ldd	r18, Y+1	; 0x01
    386e:	fc 01       	movw	r30, r24
    3870:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3872:	8a 81       	ldd	r24, Y+2	; 0x02
    3874:	9b 81       	ldd	r25, Y+3	; 0x03
    3876:	21 e0       	ldi	r18, 0x01	; 1
    3878:	fc 01       	movw	r30, r24
    387a:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    387c:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <transfer+0x9>
	transfer.status    = STATUS_OK;
    3880:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    3884:	80 ea       	ldi	r24, 0xA0	; 160
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	20 ea       	ldi	r18, 0xA0	; 160
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	f9 01       	movw	r30, r18
    388e:	22 81       	ldd	r18, Z+2	; 0x02
    3890:	22 60       	ori	r18, 0x02	; 2
    3892:	fc 01       	movw	r30, r24
    3894:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    3896:	78 94       	sei

	return STATUS_OK;
    3898:	80 e0       	ldi	r24, 0x00	; 0
}
    389a:	25 96       	adiw	r28, 0x05	; 5
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	de bf       	out	0x3e, r29	; 62
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	08 95       	ret

000038a6 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	27 97       	sbiw	r28, 0x07	; 7
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	8b 83       	std	Y+3, r24	; 0x03
    38b6:	9c 83       	std	Y+4, r25	; 0x04
    38b8:	6d 83       	std	Y+5, r22	; 0x05
    38ba:	7e 83       	std	Y+6, r23	; 0x06
    38bc:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	9c 81       	ldd	r25, Y+4	; 0x04
    38c2:	89 2b       	or	r24, r25
    38c4:	21 f0       	breq	.+8      	; 0x38ce <twi_master_transfer+0x28>
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ca:	89 2b       	or	r24, r25
    38cc:	11 f4       	brne	.+4      	; 0x38d2 <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    38ce:	88 ef       	ldi	r24, 0xF8	; 248
    38d0:	49 c0       	rjmp	.+146    	; 0x3964 <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	fc 01       	movw	r30, r24
    38d8:	82 85       	ldd	r24, Z+10	; 0x0a
    38da:	34 de       	rcall	.-920    	; 0x3544 <twim_acquire>
    38dc:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	88 23       	and	r24, r24
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <twi_master_transfer+0x40>
    38e4:	3e c0       	rjmp	.+124    	; 0x3962 <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ea:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <transfer>
    38ee:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	9e 81       	ldd	r25, Y+6	; 0x06
    38f6:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <transfer+0x2>
    38fa:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <transfer+0x3>
		transfer.addr_count  = 0;
    38fe:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <transfer+0x4>
    3902:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <transfer+0x5>
		transfer.data_count  = 0;
    3906:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <transfer+0x6>
    390a:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <transfer+0x7>
		transfer.read        = read;
    390e:	8f 81       	ldd	r24, Y+7	; 0x07
    3910:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    3914:	8d 81       	ldd	r24, Y+5	; 0x05
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	fc 01       	movw	r30, r24
    391a:	80 81       	ld	r24, Z
    391c:	88 0f       	add	r24, r24
    391e:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    3920:	8d 81       	ldd	r24, Y+5	; 0x05
    3922:	9e 81       	ldd	r25, Y+6	; 0x06
    3924:	fc 01       	movw	r30, r24
    3926:	84 81       	ldd	r24, Z+4	; 0x04
    3928:	95 81       	ldd	r25, Z+5	; 0x05
    392a:	89 2b       	or	r24, r25
    392c:	29 f4       	brne	.+10     	; 0x3938 <twi_master_transfer+0x92>
    392e:	9f 81       	ldd	r25, Y+7	; 0x07
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	89 27       	eor	r24, r25
    3934:	88 23       	and	r24, r24
    3936:	41 f0       	breq	.+16     	; 0x3948 <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    3938:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    393c:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    3940:	2a 81       	ldd	r18, Y+2	; 0x02
    3942:	fc 01       	movw	r30, r24
    3944:	26 83       	std	Z+6, r18	; 0x06
    3946:	0b c0       	rjmp	.+22     	; 0x395e <twi_master_transfer+0xb8>
		} else if (read) {
    3948:	8f 81       	ldd	r24, Y+7	; 0x07
    394a:	88 23       	and	r24, r24
    394c:	41 f0       	breq	.+16     	; 0x395e <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    394e:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    3952:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    3956:	2a 81       	ldd	r18, Y+2	; 0x02
    3958:	21 60       	ori	r18, 0x01	; 1
    395a:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    395c:	26 83       	std	Z+6, r18	; 0x06
    395e:	13 de       	rcall	.-986    	; 0x3586 <twim_release>
    3960:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    3962:	89 81       	ldd	r24, Y+1	; 0x01
}
    3964:	27 96       	adiw	r28, 0x07	; 7
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	08 95       	ret

00003970 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    3970:	cf 93       	push	r28
    3972:	df 93       	push	r29
    3974:	1f 92       	push	r1
    3976:	1f 92       	push	r1
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	fc 01       	movw	r30, r24
    3986:	84 81       	ldd	r24, Z+4	; 0x04
    3988:	28 2f       	mov	r18, r24
    398a:	20 61       	ori	r18, 0x10	; 16
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	9a 81       	ldd	r25, Y+2	; 0x02
    3990:	fc 01       	movw	r30, r24
    3992:	24 83       	std	Z+4, r18	; 0x04
    3994:	00 00       	nop
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	08 95       	ret

000039a0 <usart_format_set>:
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
    39a8:	25 97       	sbiw	r28, 0x05	; 5
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	de bf       	out	0x3e, r29	; 62
    39ae:	89 83       	std	Y+1, r24	; 0x01
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	6b 83       	std	Y+3, r22	; 0x03
    39b4:	4c 83       	std	Y+4, r20	; 0x04
    39b6:	2d 83       	std	Y+5, r18	; 0x05
    39b8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ba:	8c 81       	ldd	r24, Y+4	; 0x04
    39bc:	89 2b       	or	r24, r25
    39be:	98 2f       	mov	r25, r24
    39c0:	8d 81       	ldd	r24, Y+5	; 0x05
    39c2:	88 23       	and	r24, r24
    39c4:	11 f0       	breq	.+4      	; 0x39ca <usart_format_set+0x2a>
    39c6:	88 e0       	ldi	r24, 0x08	; 8
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <usart_format_set+0x2c>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	89 2b       	or	r24, r25
    39ce:	28 2f       	mov	r18, r24
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	fc 01       	movw	r30, r24
    39d6:	25 83       	std	Z+5, r18	; 0x05
    39d8:	00 00       	nop
    39da:	25 96       	adiw	r28, 0x05	; 5
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	08 95       	ret

000039e6 <usart_tx_enable>:
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	1f 92       	push	r1
    39ec:	1f 92       	push	r1
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	89 83       	std	Y+1, r24	; 0x01
    39f4:	9a 83       	std	Y+2, r25	; 0x02
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	9a 81       	ldd	r25, Y+2	; 0x02
    39fa:	fc 01       	movw	r30, r24
    39fc:	84 81       	ldd	r24, Z+4	; 0x04
    39fe:	28 2f       	mov	r18, r24
    3a00:	28 60       	ori	r18, 0x08	; 8
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	9a 81       	ldd	r25, Y+2	; 0x02
    3a06:	fc 01       	movw	r30, r24
    3a08:	24 83       	std	Z+4, r18	; 0x04
    3a0a:	00 00       	nop
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	df 91       	pop	r29
    3a12:	cf 91       	pop	r28
    3a14:	08 95       	ret

00003a16 <usart_set_mode>:
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <usart_set_mode+0x6>
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	9a 83       	std	Y+2, r25	; 0x02
    3a24:	6b 83       	std	Y+3, r22	; 0x03
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	85 81       	ldd	r24, Z+5	; 0x05
    3a2e:	98 2f       	mov	r25, r24
    3a30:	9f 73       	andi	r25, 0x3F	; 63
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	89 2b       	or	r24, r25
    3a36:	28 2f       	mov	r18, r24
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	25 83       	std	Z+5, r18	; 0x05
    3a40:	00 00       	nop
    3a42:	23 96       	adiw	r28, 0x03	; 3
    3a44:	cd bf       	out	0x3d, r28	; 61
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	08 95       	ret

00003a4e <usart_data_register_is_empty>:
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	1f 92       	push	r1
    3a54:	1f 92       	push	r1
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	89 83       	std	Y+1, r24	; 0x01
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
    3a60:	9a 81       	ldd	r25, Y+2	; 0x02
    3a62:	fc 01       	movw	r30, r24
    3a64:	81 81       	ldd	r24, Z+1	; 0x01
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	80 72       	andi	r24, 0x20	; 32
    3a6c:	99 27       	eor	r25, r25
    3a6e:	21 e0       	ldi	r18, 0x01	; 1
    3a70:	89 2b       	or	r24, r25
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <usart_data_register_is_empty+0x28>
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	82 2f       	mov	r24, r18
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	08 95       	ret

00003a82 <usart_rx_is_complete>:
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	1f 92       	push	r1
    3a88:	1f 92       	push	r1
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	89 83       	std	Y+1, r24	; 0x01
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	9a 81       	ldd	r25, Y+2	; 0x02
    3a96:	fc 01       	movw	r30, r24
    3a98:	81 81       	ldd	r24, Z+1	; 0x01
    3a9a:	88 2f       	mov	r24, r24
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	80 78       	andi	r24, 0x80	; 128
    3aa0:	99 27       	eor	r25, r25
    3aa2:	21 e0       	ldi	r18, 0x01	; 1
    3aa4:	89 2b       	or	r24, r25
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <usart_rx_is_complete+0x28>
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	82 2f       	mov	r24, r18
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	08 95       	ret

00003ab6 <sysclk_get_main_hz>:
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	98 e4       	ldi	r25, 0x48	; 72
    3ac2:	a8 ee       	ldi	r26, 0xE8	; 232
    3ac4:	b1 e0       	ldi	r27, 0x01	; 1
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	08 95       	ret

00003ad0 <sysclk_get_per4_hz>:
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	1f 92       	push	r1
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	19 82       	std	Y+1, r1	; 0x01
    3adc:	ec df       	rcall	.-40     	; 0x3ab6 <sysclk_get_main_hz>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	29 81       	ldd	r18, Y+1	; 0x01
    3ae4:	22 2f       	mov	r18, r18
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	04 c0       	rjmp	.+8      	; 0x3af2 <sysclk_get_per4_hz+0x22>
    3aea:	b6 95       	lsr	r27
    3aec:	a7 95       	ror	r26
    3aee:	97 95       	ror	r25
    3af0:	87 95       	ror	r24
    3af2:	2a 95       	dec	r18
    3af4:	d2 f7       	brpl	.-12     	; 0x3aea <sysclk_get_per4_hz+0x1a>
    3af6:	bc 01       	movw	r22, r24
    3af8:	cd 01       	movw	r24, r26
    3afa:	0f 90       	pop	r0
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	08 95       	ret

00003b02 <sysclk_get_per2_hz>:
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	e2 df       	rcall	.-60     	; 0x3ad0 <sysclk_get_per4_hz>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	bc 01       	movw	r22, r24
    3b12:	cd 01       	movw	r24, r26
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	08 95       	ret

00003b1a <sysclk_get_per_hz>:
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	ef df       	rcall	.-34     	; 0x3b02 <sysclk_get_per2_hz>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	08 95       	ret

00003b32 <sysclk_enable_peripheral_clock>:
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	1f 92       	push	r1
    3b38:	1f 92       	push	r1
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	9a 81       	ldd	r25, Y+2	; 0x02
    3b46:	89 2b       	or	r24, r25
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <sysclk_enable_peripheral_clock+0x1a>
    3b4a:	85 c1       	rjmp	.+778    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	80 3c       	cpi	r24, 0xC0	; 192
    3b52:	91 05       	cpc	r25, r1
    3b54:	29 f4       	brne	.+10     	; 0x3b60 <sysclk_enable_peripheral_clock+0x2e>
    3b56:	60 e1       	ldi	r22, 0x10	; 16
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3b5e:	7b c1       	rjmp	.+758    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	80 34       	cpi	r24, 0x40	; 64
    3b66:	94 40       	sbci	r25, 0x04	; 4
    3b68:	29 f4       	brne	.+10     	; 0x3b74 <sysclk_enable_peripheral_clock+0x42>
    3b6a:	68 e0       	ldi	r22, 0x08	; 8
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3b72:	71 c1       	rjmp	.+738    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	81 15       	cp	r24, r1
    3b7a:	94 40       	sbci	r25, 0x04	; 4
    3b7c:	29 f4       	brne	.+10     	; 0x3b88 <sysclk_enable_peripheral_clock+0x56>
    3b7e:	64 e0       	ldi	r22, 0x04	; 4
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3b86:	67 c1       	rjmp	.+718    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8c:	80 38       	cpi	r24, 0x80	; 128
    3b8e:	91 40       	sbci	r25, 0x01	; 1
    3b90:	29 f4       	brne	.+10     	; 0x3b9c <sysclk_enable_peripheral_clock+0x6a>
    3b92:	62 e0       	ldi	r22, 0x02	; 2
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3b9a:	5d c1       	rjmp	.+698    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba0:	81 15       	cp	r24, r1
    3ba2:	91 40       	sbci	r25, 0x01	; 1
    3ba4:	29 f4       	brne	.+10     	; 0x3bb0 <sysclk_enable_peripheral_clock+0x7e>
    3ba6:	61 e0       	ldi	r22, 0x01	; 1
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3bae:	53 c1       	rjmp	.+678    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb4:	80 38       	cpi	r24, 0x80	; 128
    3bb6:	93 40       	sbci	r25, 0x03	; 3
    3bb8:	29 f4       	brne	.+10     	; 0x3bc4 <sysclk_enable_peripheral_clock+0x92>
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3bc2:	49 c1       	rjmp	.+658    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	80 39       	cpi	r24, 0x90	; 144
    3bca:	93 40       	sbci	r25, 0x03	; 3
    3bcc:	29 f4       	brne	.+10     	; 0x3bd8 <sysclk_enable_peripheral_clock+0xa6>
    3bce:	61 e0       	ldi	r22, 0x01	; 1
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3bd6:	3f c1       	rjmp	.+638    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	9a 81       	ldd	r25, Y+2	; 0x02
    3bdc:	81 15       	cp	r24, r1
    3bde:	92 40       	sbci	r25, 0x02	; 2
    3be0:	29 f4       	brne	.+10     	; 0x3bec <sysclk_enable_peripheral_clock+0xba>
    3be2:	62 e0       	ldi	r22, 0x02	; 2
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3bea:	35 c1       	rjmp	.+618    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf0:	80 34       	cpi	r24, 0x40	; 64
    3bf2:	92 40       	sbci	r25, 0x02	; 2
    3bf4:	29 f4       	brne	.+10     	; 0x3c00 <sysclk_enable_peripheral_clock+0xce>
    3bf6:	62 e0       	ldi	r22, 0x02	; 2
    3bf8:	82 e0       	ldi	r24, 0x02	; 2
    3bfa:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3bfe:	2b c1       	rjmp	.+598    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	9a 81       	ldd	r25, Y+2	; 0x02
    3c04:	81 15       	cp	r24, r1
    3c06:	93 40       	sbci	r25, 0x03	; 3
    3c08:	29 f4       	brne	.+10     	; 0x3c14 <sysclk_enable_peripheral_clock+0xe2>
    3c0a:	64 e0       	ldi	r22, 0x04	; 4
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c12:	21 c1       	rjmp	.+578    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	80 32       	cpi	r24, 0x20	; 32
    3c1a:	93 40       	sbci	r25, 0x03	; 3
    3c1c:	29 f4       	brne	.+10     	; 0x3c28 <sysclk_enable_peripheral_clock+0xf6>
    3c1e:	64 e0       	ldi	r22, 0x04	; 4
    3c20:	82 e0       	ldi	r24, 0x02	; 2
    3c22:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c26:	17 c1       	rjmp	.+558    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2c:	81 15       	cp	r24, r1
    3c2e:	98 40       	sbci	r25, 0x08	; 8
    3c30:	29 f4       	brne	.+10     	; 0x3c3c <sysclk_enable_peripheral_clock+0x10a>
    3c32:	61 e0       	ldi	r22, 0x01	; 1
    3c34:	83 e0       	ldi	r24, 0x03	; 3
    3c36:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c3a:	0d c1       	rjmp	.+538    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c40:	81 15       	cp	r24, r1
    3c42:	99 40       	sbci	r25, 0x09	; 9
    3c44:	29 f4       	brne	.+10     	; 0x3c50 <sysclk_enable_peripheral_clock+0x11e>
    3c46:	61 e0       	ldi	r22, 0x01	; 1
    3c48:	84 e0       	ldi	r24, 0x04	; 4
    3c4a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c4e:	03 c1       	rjmp	.+518    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	81 15       	cp	r24, r1
    3c56:	9a 40       	sbci	r25, 0x0A	; 10
    3c58:	29 f4       	brne	.+10     	; 0x3c64 <sysclk_enable_peripheral_clock+0x132>
    3c5a:	61 e0       	ldi	r22, 0x01	; 1
    3c5c:	85 e0       	ldi	r24, 0x05	; 5
    3c5e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c62:	f9 c0       	rjmp	.+498    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	9a 81       	ldd	r25, Y+2	; 0x02
    3c68:	81 15       	cp	r24, r1
    3c6a:	9b 40       	sbci	r25, 0x0B	; 11
    3c6c:	29 f4       	brne	.+10     	; 0x3c78 <sysclk_enable_peripheral_clock+0x146>
    3c6e:	61 e0       	ldi	r22, 0x01	; 1
    3c70:	86 e0       	ldi	r24, 0x06	; 6
    3c72:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c76:	ef c0       	rjmp	.+478    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7c:	80 34       	cpi	r24, 0x40	; 64
    3c7e:	98 40       	sbci	r25, 0x08	; 8
    3c80:	29 f4       	brne	.+10     	; 0x3c8c <sysclk_enable_peripheral_clock+0x15a>
    3c82:	62 e0       	ldi	r22, 0x02	; 2
    3c84:	83 e0       	ldi	r24, 0x03	; 3
    3c86:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c8a:	e5 c0       	rjmp	.+458    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c90:	80 34       	cpi	r24, 0x40	; 64
    3c92:	99 40       	sbci	r25, 0x09	; 9
    3c94:	29 f4       	brne	.+10     	; 0x3ca0 <sysclk_enable_peripheral_clock+0x16e>
    3c96:	62 e0       	ldi	r22, 0x02	; 2
    3c98:	84 e0       	ldi	r24, 0x04	; 4
    3c9a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3c9e:	db c0       	rjmp	.+438    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	80 34       	cpi	r24, 0x40	; 64
    3ca6:	9a 40       	sbci	r25, 0x0A	; 10
    3ca8:	29 f4       	brne	.+10     	; 0x3cb4 <sysclk_enable_peripheral_clock+0x182>
    3caa:	62 e0       	ldi	r22, 0x02	; 2
    3cac:	85 e0       	ldi	r24, 0x05	; 5
    3cae:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3cb2:	d1 c0       	rjmp	.+418    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb8:	80 34       	cpi	r24, 0x40	; 64
    3cba:	9b 40       	sbci	r25, 0x0B	; 11
    3cbc:	29 f4       	brne	.+10     	; 0x3cc8 <sysclk_enable_peripheral_clock+0x196>
    3cbe:	62 e0       	ldi	r22, 0x02	; 2
    3cc0:	86 e0       	ldi	r24, 0x06	; 6
    3cc2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3cc6:	c7 c0       	rjmp	.+398    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ccc:	80 39       	cpi	r24, 0x90	; 144
    3cce:	98 40       	sbci	r25, 0x08	; 8
    3cd0:	29 f4       	brne	.+10     	; 0x3cdc <sysclk_enable_peripheral_clock+0x1aa>
    3cd2:	64 e0       	ldi	r22, 0x04	; 4
    3cd4:	83 e0       	ldi	r24, 0x03	; 3
    3cd6:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3cda:	bd c0       	rjmp	.+378    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce0:	80 39       	cpi	r24, 0x90	; 144
    3ce2:	99 40       	sbci	r25, 0x09	; 9
    3ce4:	29 f4       	brne	.+10     	; 0x3cf0 <sysclk_enable_peripheral_clock+0x1be>
    3ce6:	64 e0       	ldi	r22, 0x04	; 4
    3ce8:	84 e0       	ldi	r24, 0x04	; 4
    3cea:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3cee:	b3 c0       	rjmp	.+358    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	80 39       	cpi	r24, 0x90	; 144
    3cf6:	9a 40       	sbci	r25, 0x0A	; 10
    3cf8:	29 f4       	brne	.+10     	; 0x3d04 <sysclk_enable_peripheral_clock+0x1d2>
    3cfa:	64 e0       	ldi	r22, 0x04	; 4
    3cfc:	85 e0       	ldi	r24, 0x05	; 5
    3cfe:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d02:	a9 c0       	rjmp	.+338    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	9a 81       	ldd	r25, Y+2	; 0x02
    3d08:	80 39       	cpi	r24, 0x90	; 144
    3d0a:	9b 40       	sbci	r25, 0x0B	; 11
    3d0c:	29 f4       	brne	.+10     	; 0x3d18 <sysclk_enable_peripheral_clock+0x1e6>
    3d0e:	64 e0       	ldi	r22, 0x04	; 4
    3d10:	86 e0       	ldi	r24, 0x06	; 6
    3d12:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d16:	9f c0       	rjmp	.+318    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	80 3c       	cpi	r24, 0xC0	; 192
    3d1e:	98 40       	sbci	r25, 0x08	; 8
    3d20:	29 f4       	brne	.+10     	; 0x3d2c <sysclk_enable_peripheral_clock+0x1fa>
    3d22:	68 e0       	ldi	r22, 0x08	; 8
    3d24:	83 e0       	ldi	r24, 0x03	; 3
    3d26:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d2a:	95 c0       	rjmp	.+298    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d30:	80 3c       	cpi	r24, 0xC0	; 192
    3d32:	99 40       	sbci	r25, 0x09	; 9
    3d34:	29 f4       	brne	.+10     	; 0x3d40 <sysclk_enable_peripheral_clock+0x20e>
    3d36:	68 e0       	ldi	r22, 0x08	; 8
    3d38:	84 e0       	ldi	r24, 0x04	; 4
    3d3a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d3e:	8b c0       	rjmp	.+278    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	9a 81       	ldd	r25, Y+2	; 0x02
    3d44:	80 3c       	cpi	r24, 0xC0	; 192
    3d46:	9a 40       	sbci	r25, 0x0A	; 10
    3d48:	29 f4       	brne	.+10     	; 0x3d54 <sysclk_enable_peripheral_clock+0x222>
    3d4a:	68 e0       	ldi	r22, 0x08	; 8
    3d4c:	85 e0       	ldi	r24, 0x05	; 5
    3d4e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d52:	81 c0       	rjmp	.+258    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	80 3c       	cpi	r24, 0xC0	; 192
    3d5a:	9b 40       	sbci	r25, 0x0B	; 11
    3d5c:	29 f4       	brne	.+10     	; 0x3d68 <sysclk_enable_peripheral_clock+0x236>
    3d5e:	68 e0       	ldi	r22, 0x08	; 8
    3d60:	86 e0       	ldi	r24, 0x06	; 6
    3d62:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d66:	77 c0       	rjmp	.+238    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6c:	80 3a       	cpi	r24, 0xA0	; 160
    3d6e:	98 40       	sbci	r25, 0x08	; 8
    3d70:	29 f4       	brne	.+10     	; 0x3d7c <sysclk_enable_peripheral_clock+0x24a>
    3d72:	60 e1       	ldi	r22, 0x10	; 16
    3d74:	83 e0       	ldi	r24, 0x03	; 3
    3d76:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d7a:	6d c0       	rjmp	.+218    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d80:	80 3a       	cpi	r24, 0xA0	; 160
    3d82:	99 40       	sbci	r25, 0x09	; 9
    3d84:	29 f4       	brne	.+10     	; 0x3d90 <sysclk_enable_peripheral_clock+0x25e>
    3d86:	60 e1       	ldi	r22, 0x10	; 16
    3d88:	84 e0       	ldi	r24, 0x04	; 4
    3d8a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3d8e:	63 c0       	rjmp	.+198    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	9a 81       	ldd	r25, Y+2	; 0x02
    3d94:	80 3a       	cpi	r24, 0xA0	; 160
    3d96:	9a 40       	sbci	r25, 0x0A	; 10
    3d98:	29 f4       	brne	.+10     	; 0x3da4 <sysclk_enable_peripheral_clock+0x272>
    3d9a:	60 e1       	ldi	r22, 0x10	; 16
    3d9c:	85 e0       	ldi	r24, 0x05	; 5
    3d9e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3da2:	59 c0       	rjmp	.+178    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	9a 81       	ldd	r25, Y+2	; 0x02
    3da8:	80 3a       	cpi	r24, 0xA0	; 160
    3daa:	9b 40       	sbci	r25, 0x0B	; 11
    3dac:	29 f4       	brne	.+10     	; 0x3db8 <sysclk_enable_peripheral_clock+0x286>
    3dae:	60 e1       	ldi	r22, 0x10	; 16
    3db0:	86 e0       	ldi	r24, 0x06	; 6
    3db2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3db6:	4f c0       	rjmp	.+158    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbc:	80 3b       	cpi	r24, 0xB0	; 176
    3dbe:	98 40       	sbci	r25, 0x08	; 8
    3dc0:	29 f4       	brne	.+10     	; 0x3dcc <sysclk_enable_peripheral_clock+0x29a>
    3dc2:	60 e2       	ldi	r22, 0x20	; 32
    3dc4:	83 e0       	ldi	r24, 0x03	; 3
    3dc6:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3dca:	45 c0       	rjmp	.+138    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd0:	80 3b       	cpi	r24, 0xB0	; 176
    3dd2:	99 40       	sbci	r25, 0x09	; 9
    3dd4:	29 f4       	brne	.+10     	; 0x3de0 <sysclk_enable_peripheral_clock+0x2ae>
    3dd6:	60 e2       	ldi	r22, 0x20	; 32
    3dd8:	84 e0       	ldi	r24, 0x04	; 4
    3dda:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3dde:	3b c0       	rjmp	.+118    	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	80 3b       	cpi	r24, 0xB0	; 176
    3de6:	9a 40       	sbci	r25, 0x0A	; 10
    3de8:	29 f4       	brne	.+10     	; 0x3df4 <sysclk_enable_peripheral_clock+0x2c2>
    3dea:	60 e2       	ldi	r22, 0x20	; 32
    3dec:	85 e0       	ldi	r24, 0x05	; 5
    3dee:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3df2:	31 c0       	rjmp	.+98     	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	80 3b       	cpi	r24, 0xB0	; 176
    3dfa:	9b 40       	sbci	r25, 0x0B	; 11
    3dfc:	29 f4       	brne	.+10     	; 0x3e08 <sysclk_enable_peripheral_clock+0x2d6>
    3dfe:	60 e2       	ldi	r22, 0x20	; 32
    3e00:	86 e0       	ldi	r24, 0x06	; 6
    3e02:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3e06:	27 c0       	rjmp	.+78     	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0c:	80 38       	cpi	r24, 0x80	; 128
    3e0e:	94 40       	sbci	r25, 0x04	; 4
    3e10:	29 f4       	brne	.+10     	; 0x3e1c <sysclk_enable_peripheral_clock+0x2ea>
    3e12:	60 e4       	ldi	r22, 0x40	; 64
    3e14:	83 e0       	ldi	r24, 0x03	; 3
    3e16:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3e1a:	1d c0       	rjmp	.+58     	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e20:	80 39       	cpi	r24, 0x90	; 144
    3e22:	94 40       	sbci	r25, 0x04	; 4
    3e24:	29 f4       	brne	.+10     	; 0x3e30 <sysclk_enable_peripheral_clock+0x2fe>
    3e26:	60 e4       	ldi	r22, 0x40	; 64
    3e28:	84 e0       	ldi	r24, 0x04	; 4
    3e2a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3e2e:	13 c0       	rjmp	.+38     	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	9a 81       	ldd	r25, Y+2	; 0x02
    3e34:	80 3a       	cpi	r24, 0xA0	; 160
    3e36:	94 40       	sbci	r25, 0x04	; 4
    3e38:	29 f4       	brne	.+10     	; 0x3e44 <sysclk_enable_peripheral_clock+0x312>
    3e3a:	60 e4       	ldi	r22, 0x40	; 64
    3e3c:	85 e0       	ldi	r24, 0x05	; 5
    3e3e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3e42:	09 c0       	rjmp	.+18     	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	9a 81       	ldd	r25, Y+2	; 0x02
    3e48:	80 3b       	cpi	r24, 0xB0	; 176
    3e4a:	94 40       	sbci	r25, 0x04	; 4
    3e4c:	21 f4       	brne	.+8      	; 0x3e56 <sysclk_enable_peripheral_clock+0x324>
    3e4e:	60 e4       	ldi	r22, 0x40	; 64
    3e50:	86 e0       	ldi	r24, 0x06	; 6
    3e52:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    3e56:	00 00       	nop
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	08 95       	ret

00003e62 <usart_init_rs232>:
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	25 97       	sbiw	r28, 0x05	; 5
    3e70:	cd bf       	out	0x3d, r28	; 61
    3e72:	de bf       	out	0x3e, r29	; 62
    3e74:	8a 83       	std	Y+2, r24	; 0x02
    3e76:	9b 83       	std	Y+3, r25	; 0x03
    3e78:	6c 83       	std	Y+4, r22	; 0x04
    3e7a:	7d 83       	std	Y+5, r23	; 0x05
    3e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e80:	58 de       	rcall	.-848    	; 0x3b32 <sysclk_enable_peripheral_clock>
    3e82:	8a 81       	ldd	r24, Y+2	; 0x02
    3e84:	9b 81       	ldd	r25, Y+3	; 0x03
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	c6 dd       	rcall	.-1140   	; 0x3a16 <usart_set_mode>
    3e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e8e:	fc 01       	movw	r30, r24
    3e90:	26 81       	ldd	r18, Z+6	; 0x06
    3e92:	8c 81       	ldd	r24, Y+4	; 0x04
    3e94:	9d 81       	ldd	r25, Y+5	; 0x05
    3e96:	fc 01       	movw	r30, r24
    3e98:	45 81       	ldd	r20, Z+5	; 0x05
    3e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	34 81       	ldd	r19, Z+4	; 0x04
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea6:	63 2f       	mov	r22, r19
    3ea8:	7b dd       	rcall	.-1290   	; 0x39a0 <usart_format_set>
    3eaa:	37 de       	rcall	.-914    	; 0x3b1a <sysclk_get_per_hz>
    3eac:	9b 01       	movw	r18, r22
    3eae:	ac 01       	movw	r20, r24
    3eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	80 81       	ld	r24, Z
    3eb8:	91 81       	ldd	r25, Z+1	; 0x01
    3eba:	a2 81       	ldd	r26, Z+2	; 0x02
    3ebc:	b3 81       	ldd	r27, Z+3	; 0x03
    3ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec2:	89 01       	movw	r16, r18
    3ec4:	9a 01       	movw	r18, r20
    3ec6:	ac 01       	movw	r20, r24
    3ec8:	bd 01       	movw	r22, r26
    3eca:	cf 01       	movw	r24, r30
    3ecc:	48 d0       	rcall	.+144    	; 0x3f5e <usart_set_baudrate>
    3ece:	89 83       	std	Y+1, r24	; 0x01
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed4:	88 dd       	rcall	.-1264   	; 0x39e6 <usart_tx_enable>
    3ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eda:	4a dd       	rcall	.-1388   	; 0x3970 <usart_rx_enable>
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	25 96       	adiw	r28, 0x05	; 5
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	08 95       	ret

00003eee <usart_putchar>:
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <usart_putchar+0x6>
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	89 83       	std	Y+1, r24	; 0x01
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	6b 83       	std	Y+3, r22	; 0x03
    3efe:	00 00       	nop
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	a4 dd       	rcall	.-1208   	; 0x3a4e <usart_data_register_is_empty>
    3f06:	98 2f       	mov	r25, r24
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	89 27       	eor	r24, r25
    3f0c:	88 23       	and	r24, r24
    3f0e:	c1 f7       	brne	.-16     	; 0x3f00 <usart_putchar+0x12>
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	9a 81       	ldd	r25, Y+2	; 0x02
    3f14:	2b 81       	ldd	r18, Y+3	; 0x03
    3f16:	fc 01       	movw	r30, r24
    3f18:	20 83       	st	Z, r18
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	23 96       	adiw	r28, 0x03	; 3
    3f20:	cd bf       	out	0x3d, r28	; 61
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	df 91       	pop	r29
    3f26:	cf 91       	pop	r28
    3f28:	08 95       	ret

00003f2a <usart_getchar>:
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	1f 92       	push	r1
    3f30:	1f 92       	push	r1
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
    3f36:	89 83       	std	Y+1, r24	; 0x01
    3f38:	9a 83       	std	Y+2, r25	; 0x02
    3f3a:	00 00       	nop
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f40:	a0 dd       	rcall	.-1216   	; 0x3a82 <usart_rx_is_complete>
    3f42:	98 2f       	mov	r25, r24
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	89 27       	eor	r24, r25
    3f48:	88 23       	and	r24, r24
    3f4a:	c1 f7       	brne	.-16     	; 0x3f3c <usart_getchar+0x12>
    3f4c:	89 81       	ldd	r24, Y+1	; 0x01
    3f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f50:	fc 01       	movw	r30, r24
    3f52:	80 81       	ld	r24, Z
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	08 95       	ret

00003f5e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3f5e:	ef 92       	push	r14
    3f60:	ff 92       	push	r15
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	cd b7       	in	r28, 0x3d	; 61
    3f6c:	de b7       	in	r29, 0x3e	; 62
    3f6e:	6f 97       	sbiw	r28, 0x1f	; 31
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	8e 8b       	std	Y+22, r24	; 0x16
    3f76:	9f 8b       	std	Y+23, r25	; 0x17
    3f78:	48 8f       	std	Y+24, r20	; 0x18
    3f7a:	59 8f       	std	Y+25, r21	; 0x19
    3f7c:	6a 8f       	std	Y+26, r22	; 0x1a
    3f7e:	7b 8f       	std	Y+27, r23	; 0x1b
    3f80:	0c 8f       	std	Y+28, r16	; 0x1c
    3f82:	1d 8f       	std	Y+29, r17	; 0x1d
    3f84:	2e 8f       	std	Y+30, r18	; 0x1e
    3f86:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3f88:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f8c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3f8e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3f90:	68 94       	set
    3f92:	12 f8       	bld	r1, 2
    3f94:	b6 95       	lsr	r27
    3f96:	a7 95       	ror	r26
    3f98:	97 95       	ror	r25
    3f9a:	87 95       	ror	r24
    3f9c:	16 94       	lsr	r1
    3f9e:	d1 f7       	brne	.-12     	; 0x3f94 <usart_set_baudrate+0x36>
    3fa0:	8e 87       	std	Y+14, r24	; 0x0e
    3fa2:	9f 87       	std	Y+15, r25	; 0x0f
    3fa4:	a8 8b       	std	Y+16, r26	; 0x10
    3fa6:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3fa8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3faa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3fac:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3fae:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3fb0:	07 2e       	mov	r0, r23
    3fb2:	76 e1       	ldi	r23, 0x16	; 22
    3fb4:	b6 95       	lsr	r27
    3fb6:	a7 95       	ror	r26
    3fb8:	97 95       	ror	r25
    3fba:	87 95       	ror	r24
    3fbc:	7a 95       	dec	r23
    3fbe:	d1 f7       	brne	.-12     	; 0x3fb4 <usart_set_baudrate+0x56>
    3fc0:	70 2d       	mov	r23, r0
    3fc2:	8a 87       	std	Y+10, r24	; 0x0a
    3fc4:	9b 87       	std	Y+11, r25	; 0x0b
    3fc6:	ac 87       	std	Y+12, r26	; 0x0c
    3fc8:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3fca:	8e 89       	ldd	r24, Y+22	; 0x16
    3fcc:	9f 89       	ldd	r25, Y+23	; 0x17
    3fce:	fc 01       	movw	r30, r24
    3fd0:	84 81       	ldd	r24, Z+4	; 0x04
    3fd2:	88 2f       	mov	r24, r24
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	84 70       	andi	r24, 0x04	; 4
    3fd8:	99 27       	eor	r25, r25
    3fda:	89 2b       	or	r24, r25
    3fdc:	c1 f4       	brne	.+48     	; 0x400e <__stack+0xf>
		max_rate /= 2;
    3fde:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fe0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fe2:	a8 89       	ldd	r26, Y+16	; 0x10
    3fe4:	b9 89       	ldd	r27, Y+17	; 0x11
    3fe6:	b6 95       	lsr	r27
    3fe8:	a7 95       	ror	r26
    3fea:	97 95       	ror	r25
    3fec:	87 95       	ror	r24
    3fee:	8e 87       	std	Y+14, r24	; 0x0e
    3ff0:	9f 87       	std	Y+15, r25	; 0x0f
    3ff2:	a8 8b       	std	Y+16, r26	; 0x10
    3ff4:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    3ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ff8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ffa:	ac 85       	ldd	r26, Y+12	; 0x0c
    3ffc:	bd 85       	ldd	r27, Y+13	; 0x0d
    3ffe:	b6 95       	lsr	r27
    4000:	a7 95       	ror	r26
    4002:	97 95       	ror	r25
    4004:	87 95       	ror	r24
    4006:	8a 87       	std	Y+10, r24	; 0x0a
    4008:	9b 87       	std	Y+11, r25	; 0x0b
    400a:	ac 87       	std	Y+12, r26	; 0x0c
    400c:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    400e:	28 8d       	ldd	r18, Y+24	; 0x18
    4010:	39 8d       	ldd	r19, Y+25	; 0x19
    4012:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4014:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4016:	8e 85       	ldd	r24, Y+14	; 0x0e
    4018:	9f 85       	ldd	r25, Y+15	; 0x0f
    401a:	a8 89       	ldd	r26, Y+16	; 0x10
    401c:	b9 89       	ldd	r27, Y+17	; 0x11
    401e:	82 17       	cp	r24, r18
    4020:	93 07       	cpc	r25, r19
    4022:	a4 07       	cpc	r26, r20
    4024:	b5 07       	cpc	r27, r21
    4026:	68 f0       	brcs	.+26     	; 0x4042 <__stack+0x43>
    4028:	28 8d       	ldd	r18, Y+24	; 0x18
    402a:	39 8d       	ldd	r19, Y+25	; 0x19
    402c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    402e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4030:	8a 85       	ldd	r24, Y+10	; 0x0a
    4032:	9b 85       	ldd	r25, Y+11	; 0x0b
    4034:	ac 85       	ldd	r26, Y+12	; 0x0c
    4036:	bd 85       	ldd	r27, Y+13	; 0x0d
    4038:	28 17       	cp	r18, r24
    403a:	39 07       	cpc	r19, r25
    403c:	4a 07       	cpc	r20, r26
    403e:	5b 07       	cpc	r21, r27
    4040:	10 f4       	brcc	.+4      	; 0x4046 <__stack+0x47>
		return false;
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	40 c1       	rjmp	.+640    	; 0x42c6 <__stack+0x2c7>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    4046:	8e 89       	ldd	r24, Y+22	; 0x16
    4048:	9f 89       	ldd	r25, Y+23	; 0x17
    404a:	fc 01       	movw	r30, r24
    404c:	84 81       	ldd	r24, Z+4	; 0x04
    404e:	88 2f       	mov	r24, r24
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	84 70       	andi	r24, 0x04	; 4
    4054:	99 27       	eor	r25, r25
    4056:	89 2b       	or	r24, r25
    4058:	61 f4       	brne	.+24     	; 0x4072 <__stack+0x73>
		baud *= 2;
    405a:	88 8d       	ldd	r24, Y+24	; 0x18
    405c:	99 8d       	ldd	r25, Y+25	; 0x19
    405e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4060:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4062:	88 0f       	add	r24, r24
    4064:	99 1f       	adc	r25, r25
    4066:	aa 1f       	adc	r26, r26
    4068:	bb 1f       	adc	r27, r27
    406a:	88 8f       	std	Y+24, r24	; 0x18
    406c:	99 8f       	std	Y+25, r25	; 0x19
    406e:	aa 8f       	std	Y+26, r26	; 0x1a
    4070:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    4072:	8f ef       	ldi	r24, 0xFF	; 255
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	a0 e0       	ldi	r26, 0x00	; 0
    4078:	b0 e0       	ldi	r27, 0x00	; 0
    407a:	8e 83       	std	Y+6, r24	; 0x06
    407c:	9f 83       	std	Y+7, r25	; 0x07
    407e:	a8 87       	std	Y+8, r26	; 0x08
    4080:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    4082:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4084:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4086:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4088:	bf 8d       	ldd	r27, Y+31	; 0x1f
    408a:	28 8d       	ldd	r18, Y+24	; 0x18
    408c:	39 8d       	ldd	r19, Y+25	; 0x19
    408e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4090:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    409a:	da 01       	movw	r26, r20
    409c:	c9 01       	movw	r24, r18
    409e:	8a 8b       	std	Y+18, r24	; 0x12
    40a0:	9b 8b       	std	Y+19, r25	; 0x13
    40a2:	ac 8b       	std	Y+20, r26	; 0x14
    40a4:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    40a6:	89 ef       	ldi	r24, 0xF9	; 249
    40a8:	89 83       	std	Y+1, r24	; 0x01
    40aa:	28 c0       	rjmp	.+80     	; 0x40fc <__stack+0xfd>
		if (ratio < limit) {
    40ac:	2a 89       	ldd	r18, Y+18	; 0x12
    40ae:	3b 89       	ldd	r19, Y+19	; 0x13
    40b0:	4c 89       	ldd	r20, Y+20	; 0x14
    40b2:	5d 89       	ldd	r21, Y+21	; 0x15
    40b4:	8e 81       	ldd	r24, Y+6	; 0x06
    40b6:	9f 81       	ldd	r25, Y+7	; 0x07
    40b8:	a8 85       	ldd	r26, Y+8	; 0x08
    40ba:	b9 85       	ldd	r27, Y+9	; 0x09
    40bc:	28 17       	cp	r18, r24
    40be:	39 07       	cpc	r19, r25
    40c0:	4a 07       	cpc	r20, r26
    40c2:	5b 07       	cpc	r21, r27
    40c4:	f8 f0       	brcs	.+62     	; 0x4104 <__stack+0x105>
			break;
		}

		limit <<= 1;
    40c6:	8e 81       	ldd	r24, Y+6	; 0x06
    40c8:	9f 81       	ldd	r25, Y+7	; 0x07
    40ca:	a8 85       	ldd	r26, Y+8	; 0x08
    40cc:	b9 85       	ldd	r27, Y+9	; 0x09
    40ce:	88 0f       	add	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	aa 1f       	adc	r26, r26
    40d4:	bb 1f       	adc	r27, r27
    40d6:	8e 83       	std	Y+6, r24	; 0x06
    40d8:	9f 83       	std	Y+7, r25	; 0x07
    40da:	a8 87       	std	Y+8, r26	; 0x08
    40dc:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	8d 3f       	cpi	r24, 0xFD	; 253
    40e2:	4c f4       	brge	.+18     	; 0x40f6 <__stack+0xf7>
			limit |= 1;
    40e4:	8e 81       	ldd	r24, Y+6	; 0x06
    40e6:	9f 81       	ldd	r25, Y+7	; 0x07
    40e8:	a8 85       	ldd	r26, Y+8	; 0x08
    40ea:	b9 85       	ldd	r27, Y+9	; 0x09
    40ec:	81 60       	ori	r24, 0x01	; 1
    40ee:	8e 83       	std	Y+6, r24	; 0x06
    40f0:	9f 83       	std	Y+7, r25	; 0x07
    40f2:	a8 87       	std	Y+8, r26	; 0x08
    40f4:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	8f 5f       	subi	r24, 0xFF	; 255
    40fa:	89 83       	std	Y+1, r24	; 0x01
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	87 30       	cpi	r24, 0x07	; 7
    4100:	ac f2       	brlt	.-86     	; 0x40ac <__stack+0xad>
    4102:	01 c0       	rjmp	.+2      	; 0x4106 <__stack+0x107>
		if (ratio < limit) {
			break;
    4104:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	88 23       	and	r24, r24
    410a:	0c f0       	brlt	.+2      	; 0x410e <__stack+0x10f>
    410c:	8a c0       	rjmp	.+276    	; 0x4222 <__stack+0x223>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    410e:	88 8d       	ldd	r24, Y+24	; 0x18
    4110:	99 8d       	ldd	r25, Y+25	; 0x19
    4112:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4114:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4116:	88 0f       	add	r24, r24
    4118:	99 1f       	adc	r25, r25
    411a:	aa 1f       	adc	r26, r26
    411c:	bb 1f       	adc	r27, r27
    411e:	88 0f       	add	r24, r24
    4120:	99 1f       	adc	r25, r25
    4122:	aa 1f       	adc	r26, r26
    4124:	bb 1f       	adc	r27, r27
    4126:	88 0f       	add	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	aa 1f       	adc	r26, r26
    412c:	bb 1f       	adc	r27, r27
    412e:	9c 01       	movw	r18, r24
    4130:	ad 01       	movw	r20, r26
    4132:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4134:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4136:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4138:	bf 8d       	ldd	r27, Y+31	; 0x1f
    413a:	82 1b       	sub	r24, r18
    413c:	93 0b       	sbc	r25, r19
    413e:	a4 0b       	sbc	r26, r20
    4140:	b5 0b       	sbc	r27, r21
    4142:	8c 8f       	std	Y+28, r24	; 0x1c
    4144:	9d 8f       	std	Y+29, r25	; 0x1d
    4146:	ae 8f       	std	Y+30, r26	; 0x1e
    4148:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	8e 3f       	cpi	r24, 0xFE	; 254
    414e:	94 f5       	brge	.+100    	; 0x41b4 <__stack+0x1b5>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	08 2e       	mov	r0, r24
    4154:	00 0c       	add	r0, r0
    4156:	99 0b       	sbc	r25, r25
    4158:	2d ef       	ldi	r18, 0xFD	; 253
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	28 1b       	sub	r18, r24
    415e:	39 0b       	sbc	r19, r25
    4160:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4162:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4164:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4166:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4168:	7c 01       	movw	r14, r24
    416a:	8d 01       	movw	r16, r26
    416c:	04 c0       	rjmp	.+8      	; 0x4176 <__stack+0x177>
    416e:	ee 0c       	add	r14, r14
    4170:	ff 1c       	adc	r15, r15
    4172:	00 1f       	adc	r16, r16
    4174:	11 1f       	adc	r17, r17
    4176:	2a 95       	dec	r18
    4178:	d2 f7       	brpl	.-12     	; 0x416e <__stack+0x16f>
    417a:	a8 01       	movw	r20, r16
    417c:	97 01       	movw	r18, r14
    417e:	88 8d       	ldd	r24, Y+24	; 0x18
    4180:	99 8d       	ldd	r25, Y+25	; 0x19
    4182:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4184:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4186:	b6 95       	lsr	r27
    4188:	a7 95       	ror	r26
    418a:	97 95       	ror	r25
    418c:	87 95       	ror	r24
    418e:	82 0f       	add	r24, r18
    4190:	93 1f       	adc	r25, r19
    4192:	a4 1f       	adc	r26, r20
    4194:	b5 1f       	adc	r27, r21
    4196:	28 8d       	ldd	r18, Y+24	; 0x18
    4198:	39 8d       	ldd	r19, Y+25	; 0x19
    419a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    419c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    41a6:	da 01       	movw	r26, r20
    41a8:	c9 01       	movw	r24, r18
    41aa:	8a 83       	std	Y+2, r24	; 0x02
    41ac:	9b 83       	std	Y+3, r25	; 0x03
    41ae:	ac 83       	std	Y+4, r26	; 0x04
    41b0:	bd 83       	std	Y+5, r27	; 0x05
    41b2:	70 c0       	rjmp	.+224    	; 0x4294 <__stack+0x295>
		} else {
			baud <<= exp + 3;
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	08 2e       	mov	r0, r24
    41b8:	00 0c       	add	r0, r0
    41ba:	99 0b       	sbc	r25, r25
    41bc:	9c 01       	movw	r18, r24
    41be:	2d 5f       	subi	r18, 0xFD	; 253
    41c0:	3f 4f       	sbci	r19, 0xFF	; 255
    41c2:	88 8d       	ldd	r24, Y+24	; 0x18
    41c4:	99 8d       	ldd	r25, Y+25	; 0x19
    41c6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    41c8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    41ca:	04 c0       	rjmp	.+8      	; 0x41d4 <__stack+0x1d5>
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	aa 1f       	adc	r26, r26
    41d2:	bb 1f       	adc	r27, r27
    41d4:	2a 95       	dec	r18
    41d6:	d2 f7       	brpl	.-12     	; 0x41cc <__stack+0x1cd>
    41d8:	88 8f       	std	Y+24, r24	; 0x18
    41da:	99 8f       	std	Y+25, r25	; 0x19
    41dc:	aa 8f       	std	Y+26, r26	; 0x1a
    41de:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    41e0:	88 8d       	ldd	r24, Y+24	; 0x18
    41e2:	99 8d       	ldd	r25, Y+25	; 0x19
    41e4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    41e6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    41e8:	9c 01       	movw	r18, r24
    41ea:	ad 01       	movw	r20, r26
    41ec:	56 95       	lsr	r21
    41ee:	47 95       	ror	r20
    41f0:	37 95       	ror	r19
    41f2:	27 95       	ror	r18
    41f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41f8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    41fa:	bf 8d       	ldd	r27, Y+31	; 0x1f
    41fc:	82 0f       	add	r24, r18
    41fe:	93 1f       	adc	r25, r19
    4200:	a4 1f       	adc	r26, r20
    4202:	b5 1f       	adc	r27, r21
    4204:	28 8d       	ldd	r18, Y+24	; 0x18
    4206:	39 8d       	ldd	r19, Y+25	; 0x19
    4208:	4a 8d       	ldd	r20, Y+26	; 0x1a
    420a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    420c:	bc 01       	movw	r22, r24
    420e:	cd 01       	movw	r24, r26
    4210:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    4214:	da 01       	movw	r26, r20
    4216:	c9 01       	movw	r24, r18
    4218:	8a 83       	std	Y+2, r24	; 0x02
    421a:	9b 83       	std	Y+3, r25	; 0x03
    421c:	ac 83       	std	Y+4, r26	; 0x04
    421e:	bd 83       	std	Y+5, r27	; 0x05
    4220:	39 c0       	rjmp	.+114    	; 0x4294 <__stack+0x295>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	08 2e       	mov	r0, r24
    4226:	00 0c       	add	r0, r0
    4228:	99 0b       	sbc	r25, r25
    422a:	9c 01       	movw	r18, r24
    422c:	2d 5f       	subi	r18, 0xFD	; 253
    422e:	3f 4f       	sbci	r19, 0xFF	; 255
    4230:	88 8d       	ldd	r24, Y+24	; 0x18
    4232:	99 8d       	ldd	r25, Y+25	; 0x19
    4234:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4236:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4238:	04 c0       	rjmp	.+8      	; 0x4242 <__stack+0x243>
    423a:	88 0f       	add	r24, r24
    423c:	99 1f       	adc	r25, r25
    423e:	aa 1f       	adc	r26, r26
    4240:	bb 1f       	adc	r27, r27
    4242:	2a 95       	dec	r18
    4244:	d2 f7       	brpl	.-12     	; 0x423a <__stack+0x23b>
    4246:	88 8f       	std	Y+24, r24	; 0x18
    4248:	99 8f       	std	Y+25, r25	; 0x19
    424a:	aa 8f       	std	Y+26, r26	; 0x1a
    424c:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    424e:	88 8d       	ldd	r24, Y+24	; 0x18
    4250:	99 8d       	ldd	r25, Y+25	; 0x19
    4252:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4254:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4256:	9c 01       	movw	r18, r24
    4258:	ad 01       	movw	r20, r26
    425a:	56 95       	lsr	r21
    425c:	47 95       	ror	r20
    425e:	37 95       	ror	r19
    4260:	27 95       	ror	r18
    4262:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4264:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4266:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4268:	bf 8d       	ldd	r27, Y+31	; 0x1f
    426a:	82 0f       	add	r24, r18
    426c:	93 1f       	adc	r25, r19
    426e:	a4 1f       	adc	r26, r20
    4270:	b5 1f       	adc	r27, r21
    4272:	28 8d       	ldd	r18, Y+24	; 0x18
    4274:	39 8d       	ldd	r19, Y+25	; 0x19
    4276:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4278:	5b 8d       	ldd	r21, Y+27	; 0x1b
    427a:	bc 01       	movw	r22, r24
    427c:	cd 01       	movw	r24, r26
    427e:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    4282:	da 01       	movw	r26, r20
    4284:	c9 01       	movw	r24, r18
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	a1 09       	sbc	r26, r1
    428a:	b1 09       	sbc	r27, r1
    428c:	8a 83       	std	Y+2, r24	; 0x02
    428e:	9b 83       	std	Y+3, r25	; 0x03
    4290:	ac 83       	std	Y+4, r26	; 0x04
    4292:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    4294:	8a 81       	ldd	r24, Y+2	; 0x02
    4296:	9b 81       	ldd	r25, Y+3	; 0x03
    4298:	ac 81       	ldd	r26, Y+4	; 0x04
    429a:	bd 81       	ldd	r27, Y+5	; 0x05
    429c:	89 2f       	mov	r24, r25
    429e:	9a 2f       	mov	r25, r26
    42a0:	ab 2f       	mov	r26, r27
    42a2:	bb 27       	eor	r27, r27
    42a4:	98 2f       	mov	r25, r24
    42a6:	9f 70       	andi	r25, 0x0F	; 15
    42a8:	89 81       	ldd	r24, Y+1	; 0x01
    42aa:	82 95       	swap	r24
    42ac:	80 7f       	andi	r24, 0xF0	; 240
    42ae:	29 2f       	mov	r18, r25
    42b0:	28 2b       	or	r18, r24
    42b2:	8e 89       	ldd	r24, Y+22	; 0x16
    42b4:	9f 89       	ldd	r25, Y+23	; 0x17
    42b6:	fc 01       	movw	r30, r24
    42b8:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    42ba:	2a 81       	ldd	r18, Y+2	; 0x02
    42bc:	8e 89       	ldd	r24, Y+22	; 0x16
    42be:	9f 89       	ldd	r25, Y+23	; 0x17
    42c0:	fc 01       	movw	r30, r24
    42c2:	26 83       	std	Z+6, r18	; 0x06

	return true;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
}
    42c6:	6f 96       	adiw	r28, 0x1f	; 31
    42c8:	cd bf       	out	0x3d, r28	; 61
    42ca:	de bf       	out	0x3e, r29	; 62
    42cc:	df 91       	pop	r29
    42ce:	cf 91       	pop	r28
    42d0:	1f 91       	pop	r17
    42d2:	0f 91       	pop	r16
    42d4:	ff 90       	pop	r15
    42d6:	ef 90       	pop	r14
    42d8:	08 95       	ret

000042da <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    42da:	cf 93       	push	r28
    42dc:	df 93       	push	r29
    42de:	00 d0       	rcall	.+0      	; 0x42e0 <ioport_configure_port_pin+0x6>
    42e0:	00 d0       	rcall	.+0      	; 0x42e2 <ioport_configure_port_pin+0x8>
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	8a 83       	std	Y+2, r24	; 0x02
    42e8:	9b 83       	std	Y+3, r25	; 0x03
    42ea:	6c 83       	std	Y+4, r22	; 0x04
    42ec:	4d 83       	std	Y+5, r20	; 0x05
    42ee:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    42f0:	19 82       	std	Y+1, r1	; 0x01
    42f2:	20 c0       	rjmp	.+64     	; 0x4334 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    42f4:	8c 81       	ldd	r24, Y+4	; 0x04
    42f6:	88 2f       	mov	r24, r24
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	29 81       	ldd	r18, Y+1	; 0x01
    42fc:	22 2f       	mov	r18, r18
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	02 c0       	rjmp	.+4      	; 0x4306 <ioport_configure_port_pin+0x2c>
    4302:	95 95       	asr	r25
    4304:	87 95       	ror	r24
    4306:	2a 95       	dec	r18
    4308:	e2 f7       	brpl	.-8      	; 0x4302 <ioport_configure_port_pin+0x28>
    430a:	81 70       	andi	r24, 0x01	; 1
    430c:	99 27       	eor	r25, r25
    430e:	89 2b       	or	r24, r25
    4310:	71 f0       	breq	.+28     	; 0x432e <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	88 2f       	mov	r24, r24
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	40 96       	adiw	r24, 0x10	; 16
    431a:	2a 81       	ldd	r18, Y+2	; 0x02
    431c:	3b 81       	ldd	r19, Y+3	; 0x03
    431e:	82 0f       	add	r24, r18
    4320:	93 1f       	adc	r25, r19
    4322:	2d 81       	ldd	r18, Y+5	; 0x05
    4324:	3e 81       	ldd	r19, Y+6	; 0x06
    4326:	23 2f       	mov	r18, r19
    4328:	33 27       	eor	r19, r19
    432a:	fc 01       	movw	r30, r24
    432c:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	8f 5f       	subi	r24, 0xFF	; 255
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	88 30       	cpi	r24, 0x08	; 8
    4338:	e8 f2       	brcs	.-70     	; 0x42f4 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    433a:	8d 81       	ldd	r24, Y+5	; 0x05
    433c:	9e 81       	ldd	r25, Y+6	; 0x06
    433e:	81 70       	andi	r24, 0x01	; 1
    4340:	99 27       	eor	r25, r25
    4342:	89 2b       	or	r24, r25
    4344:	d1 f0       	breq	.+52     	; 0x437a <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    4346:	8d 81       	ldd	r24, Y+5	; 0x05
    4348:	9e 81       	ldd	r25, Y+6	; 0x06
    434a:	82 70       	andi	r24, 0x02	; 2
    434c:	99 27       	eor	r25, r25
    434e:	89 2b       	or	r24, r25
    4350:	39 f0       	breq	.+14     	; 0x4360 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    4352:	8a 81       	ldd	r24, Y+2	; 0x02
    4354:	9b 81       	ldd	r25, Y+3	; 0x03
    4356:	05 96       	adiw	r24, 0x05	; 5
    4358:	2c 81       	ldd	r18, Y+4	; 0x04
    435a:	fc 01       	movw	r30, r24
    435c:	20 83       	st	Z, r18
    435e:	06 c0       	rjmp	.+12     	; 0x436c <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    4360:	8a 81       	ldd	r24, Y+2	; 0x02
    4362:	9b 81       	ldd	r25, Y+3	; 0x03
    4364:	06 96       	adiw	r24, 0x06	; 6
    4366:	2c 81       	ldd	r18, Y+4	; 0x04
    4368:	fc 01       	movw	r30, r24
    436a:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    436c:	8a 81       	ldd	r24, Y+2	; 0x02
    436e:	9b 81       	ldd	r25, Y+3	; 0x03
    4370:	01 96       	adiw	r24, 0x01	; 1
    4372:	2c 81       	ldd	r18, Y+4	; 0x04
    4374:	fc 01       	movw	r30, r24
    4376:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    4378:	06 c0       	rjmp	.+12     	; 0x4386 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	9b 81       	ldd	r25, Y+3	; 0x03
    437e:	02 96       	adiw	r24, 0x02	; 2
    4380:	2c 81       	ldd	r18, Y+4	; 0x04
    4382:	fc 01       	movw	r30, r24
    4384:	20 83       	st	Z, r18
	}
}
    4386:	00 00       	nop
    4388:	26 96       	adiw	r28, 0x06	; 6
    438a:	cd bf       	out	0x3d, r28	; 61
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	08 95       	ret

00004394 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	27 97       	sbiw	r28, 0x07	; 7
    439e:	cd bf       	out	0x3d, r28	; 61
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	8d 83       	std	Y+5, r24	; 0x05
    43a4:	6e 83       	std	Y+6, r22	; 0x06
    43a6:	7f 83       	std	Y+7, r23	; 0x07
    43a8:	8d 81       	ldd	r24, Y+5	; 0x05
    43aa:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	88 2f       	mov	r24, r24
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	9c 01       	movw	r18, r24
    43b4:	27 70       	andi	r18, 0x07	; 7
    43b6:	33 27       	eor	r19, r19
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <ioport_configure_pin+0x2e>
    43be:	88 0f       	add	r24, r24
    43c0:	99 1f       	adc	r25, r25
    43c2:	2a 95       	dec	r18
    43c4:	e2 f7       	brpl	.-8      	; 0x43be <ioport_configure_pin+0x2a>
    43c6:	68 2f       	mov	r22, r24
    43c8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ca:	8a 83       	std	Y+2, r24	; 0x02
    43cc:	8a 81       	ldd	r24, Y+2	; 0x02
    43ce:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    43d0:	8b 81       	ldd	r24, Y+3	; 0x03
    43d2:	86 95       	lsr	r24
    43d4:	86 95       	lsr	r24
    43d6:	86 95       	lsr	r24
    43d8:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    43da:	8c 81       	ldd	r24, Y+4	; 0x04
    43dc:	88 2f       	mov	r24, r24
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	82 95       	swap	r24
    43e6:	92 95       	swap	r25
    43e8:	90 7f       	andi	r25, 0xF0	; 240
    43ea:	98 27       	eor	r25, r24
    43ec:	80 7f       	andi	r24, 0xF0	; 240
    43ee:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    43f0:	9a 5f       	subi	r25, 0xFA	; 250
    43f2:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    43f4:	8e 81       	ldd	r24, Y+6	; 0x06
    43f6:	9f 81       	ldd	r25, Y+7	; 0x07
    43f8:	ac 01       	movw	r20, r24
    43fa:	c9 01       	movw	r24, r18
    43fc:	6e df       	rcall	.-292    	; 0x42da <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    43fe:	00 00       	nop
    4400:	27 96       	adiw	r28, 0x07	; 7
    4402:	cd bf       	out	0x3d, r28	; 61
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	08 95       	ret

0000440c <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	cd b7       	in	r28, 0x3d	; 61
    4412:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    4414:	63 e0       	ldi	r22, 0x03	; 3
    4416:	70 e0       	ldi	r23, 0x00	; 0
    4418:	83 e7       	ldi	r24, 0x73	; 115
    441a:	bc df       	rcall	.-136    	; 0x4394 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	78 e1       	ldi	r23, 0x18	; 24
    4420:	82 e7       	ldi	r24, 0x72	; 114
    4422:	b8 df       	rcall	.-144    	; 0x4394 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    4424:	00 00       	nop
    4426:	df 91       	pop	r29
    4428:	cf 91       	pop	r28
    442a:	08 95       	ret

0000442c <sysclk_get_main_hz>:
	twi_master_setup(&MYI2C,&opt);//sets up master
}
uint8_t readBusad()
{
	return busAddress;
}
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	98 e4       	ldi	r25, 0x48	; 72
    4438:	a8 ee       	ldi	r26, 0xE8	; 232
    443a:	b1 e0       	ldi	r27, 0x01	; 1
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	08 95       	ret

00004446 <sysclk_get_per4_hz>:
    4446:	cf 93       	push	r28
    4448:	df 93       	push	r29
    444a:	1f 92       	push	r1
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	19 82       	std	Y+1, r1	; 0x01
    4452:	ec df       	rcall	.-40     	; 0x442c <sysclk_get_main_hz>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	29 81       	ldd	r18, Y+1	; 0x01
    445a:	22 2f       	mov	r18, r18
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	04 c0       	rjmp	.+8      	; 0x4468 <sysclk_get_per4_hz+0x22>
    4460:	b6 95       	lsr	r27
    4462:	a7 95       	ror	r26
    4464:	97 95       	ror	r25
    4466:	87 95       	ror	r24
    4468:	2a 95       	dec	r18
    446a:	d2 f7       	brpl	.-12     	; 0x4460 <sysclk_get_per4_hz+0x1a>
    446c:	bc 01       	movw	r22, r24
    446e:	cd 01       	movw	r24, r26
    4470:	0f 90       	pop	r0
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	08 95       	ret

00004478 <sysclk_get_per2_hz>:
    4478:	cf 93       	push	r28
    447a:	df 93       	push	r29
    447c:	cd b7       	in	r28, 0x3d	; 61
    447e:	de b7       	in	r29, 0x3e	; 62
    4480:	e2 df       	rcall	.-60     	; 0x4446 <sysclk_get_per4_hz>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	bc 01       	movw	r22, r24
    4488:	cd 01       	movw	r24, r26
    448a:	df 91       	pop	r29
    448c:	cf 91       	pop	r28
    448e:	08 95       	ret

00004490 <sysclk_get_per_hz>:
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	ef df       	rcall	.-34     	; 0x4478 <sysclk_get_per2_hz>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	bc 01       	movw	r22, r24
    44a0:	cd 01       	movw	r24, r26
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	08 95       	ret

000044a8 <sysclk_get_cpu_hz>:
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	ef df       	rcall	.-34     	; 0x4490 <sysclk_get_per_hz>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	08 95       	ret

000044c0 <sysclk_enable_peripheral_clock>:
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	1f 92       	push	r1
    44c6:	1f 92       	push	r1
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	89 83       	std	Y+1, r24	; 0x01
    44ce:	9a 83       	std	Y+2, r25	; 0x02
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	9a 81       	ldd	r25, Y+2	; 0x02
    44d4:	89 2b       	or	r24, r25
    44d6:	09 f4       	brne	.+2      	; 0x44da <sysclk_enable_peripheral_clock+0x1a>
    44d8:	85 c1       	rjmp	.+778    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	9a 81       	ldd	r25, Y+2	; 0x02
    44de:	80 3c       	cpi	r24, 0xC0	; 192
    44e0:	91 05       	cpc	r25, r1
    44e2:	29 f4       	brne	.+10     	; 0x44ee <sysclk_enable_peripheral_clock+0x2e>
    44e4:	60 e1       	ldi	r22, 0x10	; 16
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    44ec:	7b c1       	rjmp	.+758    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	9a 81       	ldd	r25, Y+2	; 0x02
    44f2:	80 34       	cpi	r24, 0x40	; 64
    44f4:	94 40       	sbci	r25, 0x04	; 4
    44f6:	29 f4       	brne	.+10     	; 0x4502 <sysclk_enable_peripheral_clock+0x42>
    44f8:	68 e0       	ldi	r22, 0x08	; 8
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4500:	71 c1       	rjmp	.+738    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	81 15       	cp	r24, r1
    4508:	94 40       	sbci	r25, 0x04	; 4
    450a:	29 f4       	brne	.+10     	; 0x4516 <sysclk_enable_peripheral_clock+0x56>
    450c:	64 e0       	ldi	r22, 0x04	; 4
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4514:	67 c1       	rjmp	.+718    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	9a 81       	ldd	r25, Y+2	; 0x02
    451a:	80 38       	cpi	r24, 0x80	; 128
    451c:	91 40       	sbci	r25, 0x01	; 1
    451e:	29 f4       	brne	.+10     	; 0x452a <sysclk_enable_peripheral_clock+0x6a>
    4520:	62 e0       	ldi	r22, 0x02	; 2
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4528:	5d c1       	rjmp	.+698    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    452a:	89 81       	ldd	r24, Y+1	; 0x01
    452c:	9a 81       	ldd	r25, Y+2	; 0x02
    452e:	81 15       	cp	r24, r1
    4530:	91 40       	sbci	r25, 0x01	; 1
    4532:	29 f4       	brne	.+10     	; 0x453e <sysclk_enable_peripheral_clock+0x7e>
    4534:	61 e0       	ldi	r22, 0x01	; 1
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    453c:	53 c1       	rjmp	.+678    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    453e:	89 81       	ldd	r24, Y+1	; 0x01
    4540:	9a 81       	ldd	r25, Y+2	; 0x02
    4542:	80 38       	cpi	r24, 0x80	; 128
    4544:	93 40       	sbci	r25, 0x03	; 3
    4546:	29 f4       	brne	.+10     	; 0x4552 <sysclk_enable_peripheral_clock+0x92>
    4548:	61 e0       	ldi	r22, 0x01	; 1
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4550:	49 c1       	rjmp	.+658    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	9a 81       	ldd	r25, Y+2	; 0x02
    4556:	80 39       	cpi	r24, 0x90	; 144
    4558:	93 40       	sbci	r25, 0x03	; 3
    455a:	29 f4       	brne	.+10     	; 0x4566 <sysclk_enable_peripheral_clock+0xa6>
    455c:	61 e0       	ldi	r22, 0x01	; 1
    455e:	82 e0       	ldi	r24, 0x02	; 2
    4560:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4564:	3f c1       	rjmp	.+638    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	9a 81       	ldd	r25, Y+2	; 0x02
    456a:	81 15       	cp	r24, r1
    456c:	92 40       	sbci	r25, 0x02	; 2
    456e:	29 f4       	brne	.+10     	; 0x457a <sysclk_enable_peripheral_clock+0xba>
    4570:	62 e0       	ldi	r22, 0x02	; 2
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4578:	35 c1       	rjmp	.+618    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	9a 81       	ldd	r25, Y+2	; 0x02
    457e:	80 34       	cpi	r24, 0x40	; 64
    4580:	92 40       	sbci	r25, 0x02	; 2
    4582:	29 f4       	brne	.+10     	; 0x458e <sysclk_enable_peripheral_clock+0xce>
    4584:	62 e0       	ldi	r22, 0x02	; 2
    4586:	82 e0       	ldi	r24, 0x02	; 2
    4588:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    458c:	2b c1       	rjmp	.+598    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	9a 81       	ldd	r25, Y+2	; 0x02
    4592:	81 15       	cp	r24, r1
    4594:	93 40       	sbci	r25, 0x03	; 3
    4596:	29 f4       	brne	.+10     	; 0x45a2 <sysclk_enable_peripheral_clock+0xe2>
    4598:	64 e0       	ldi	r22, 0x04	; 4
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    45a0:	21 c1       	rjmp	.+578    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	9a 81       	ldd	r25, Y+2	; 0x02
    45a6:	80 32       	cpi	r24, 0x20	; 32
    45a8:	93 40       	sbci	r25, 0x03	; 3
    45aa:	29 f4       	brne	.+10     	; 0x45b6 <sysclk_enable_peripheral_clock+0xf6>
    45ac:	64 e0       	ldi	r22, 0x04	; 4
    45ae:	82 e0       	ldi	r24, 0x02	; 2
    45b0:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    45b4:	17 c1       	rjmp	.+558    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    45b6:	89 81       	ldd	r24, Y+1	; 0x01
    45b8:	9a 81       	ldd	r25, Y+2	; 0x02
    45ba:	81 15       	cp	r24, r1
    45bc:	98 40       	sbci	r25, 0x08	; 8
    45be:	29 f4       	brne	.+10     	; 0x45ca <sysclk_enable_peripheral_clock+0x10a>
    45c0:	61 e0       	ldi	r22, 0x01	; 1
    45c2:	83 e0       	ldi	r24, 0x03	; 3
    45c4:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    45c8:	0d c1       	rjmp	.+538    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    45ca:	89 81       	ldd	r24, Y+1	; 0x01
    45cc:	9a 81       	ldd	r25, Y+2	; 0x02
    45ce:	81 15       	cp	r24, r1
    45d0:	99 40       	sbci	r25, 0x09	; 9
    45d2:	29 f4       	brne	.+10     	; 0x45de <sysclk_enable_peripheral_clock+0x11e>
    45d4:	61 e0       	ldi	r22, 0x01	; 1
    45d6:	84 e0       	ldi	r24, 0x04	; 4
    45d8:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    45dc:	03 c1       	rjmp	.+518    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	9a 81       	ldd	r25, Y+2	; 0x02
    45e2:	81 15       	cp	r24, r1
    45e4:	9a 40       	sbci	r25, 0x0A	; 10
    45e6:	29 f4       	brne	.+10     	; 0x45f2 <sysclk_enable_peripheral_clock+0x132>
    45e8:	61 e0       	ldi	r22, 0x01	; 1
    45ea:	85 e0       	ldi	r24, 0x05	; 5
    45ec:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    45f0:	f9 c0       	rjmp	.+498    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	9a 81       	ldd	r25, Y+2	; 0x02
    45f6:	81 15       	cp	r24, r1
    45f8:	9b 40       	sbci	r25, 0x0B	; 11
    45fa:	29 f4       	brne	.+10     	; 0x4606 <sysclk_enable_peripheral_clock+0x146>
    45fc:	61 e0       	ldi	r22, 0x01	; 1
    45fe:	86 e0       	ldi	r24, 0x06	; 6
    4600:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4604:	ef c0       	rjmp	.+478    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	9a 81       	ldd	r25, Y+2	; 0x02
    460a:	80 34       	cpi	r24, 0x40	; 64
    460c:	98 40       	sbci	r25, 0x08	; 8
    460e:	29 f4       	brne	.+10     	; 0x461a <sysclk_enable_peripheral_clock+0x15a>
    4610:	62 e0       	ldi	r22, 0x02	; 2
    4612:	83 e0       	ldi	r24, 0x03	; 3
    4614:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4618:	e5 c0       	rjmp	.+458    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    461a:	89 81       	ldd	r24, Y+1	; 0x01
    461c:	9a 81       	ldd	r25, Y+2	; 0x02
    461e:	80 34       	cpi	r24, 0x40	; 64
    4620:	99 40       	sbci	r25, 0x09	; 9
    4622:	29 f4       	brne	.+10     	; 0x462e <sysclk_enable_peripheral_clock+0x16e>
    4624:	62 e0       	ldi	r22, 0x02	; 2
    4626:	84 e0       	ldi	r24, 0x04	; 4
    4628:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    462c:	db c0       	rjmp	.+438    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    462e:	89 81       	ldd	r24, Y+1	; 0x01
    4630:	9a 81       	ldd	r25, Y+2	; 0x02
    4632:	80 34       	cpi	r24, 0x40	; 64
    4634:	9a 40       	sbci	r25, 0x0A	; 10
    4636:	29 f4       	brne	.+10     	; 0x4642 <sysclk_enable_peripheral_clock+0x182>
    4638:	62 e0       	ldi	r22, 0x02	; 2
    463a:	85 e0       	ldi	r24, 0x05	; 5
    463c:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4640:	d1 c0       	rjmp	.+418    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4642:	89 81       	ldd	r24, Y+1	; 0x01
    4644:	9a 81       	ldd	r25, Y+2	; 0x02
    4646:	80 34       	cpi	r24, 0x40	; 64
    4648:	9b 40       	sbci	r25, 0x0B	; 11
    464a:	29 f4       	brne	.+10     	; 0x4656 <sysclk_enable_peripheral_clock+0x196>
    464c:	62 e0       	ldi	r22, 0x02	; 2
    464e:	86 e0       	ldi	r24, 0x06	; 6
    4650:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4654:	c7 c0       	rjmp	.+398    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4656:	89 81       	ldd	r24, Y+1	; 0x01
    4658:	9a 81       	ldd	r25, Y+2	; 0x02
    465a:	80 39       	cpi	r24, 0x90	; 144
    465c:	98 40       	sbci	r25, 0x08	; 8
    465e:	29 f4       	brne	.+10     	; 0x466a <sysclk_enable_peripheral_clock+0x1aa>
    4660:	64 e0       	ldi	r22, 0x04	; 4
    4662:	83 e0       	ldi	r24, 0x03	; 3
    4664:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4668:	bd c0       	rjmp	.+378    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    466a:	89 81       	ldd	r24, Y+1	; 0x01
    466c:	9a 81       	ldd	r25, Y+2	; 0x02
    466e:	80 39       	cpi	r24, 0x90	; 144
    4670:	99 40       	sbci	r25, 0x09	; 9
    4672:	29 f4       	brne	.+10     	; 0x467e <sysclk_enable_peripheral_clock+0x1be>
    4674:	64 e0       	ldi	r22, 0x04	; 4
    4676:	84 e0       	ldi	r24, 0x04	; 4
    4678:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    467c:	b3 c0       	rjmp	.+358    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	9a 81       	ldd	r25, Y+2	; 0x02
    4682:	80 39       	cpi	r24, 0x90	; 144
    4684:	9a 40       	sbci	r25, 0x0A	; 10
    4686:	29 f4       	brne	.+10     	; 0x4692 <sysclk_enable_peripheral_clock+0x1d2>
    4688:	64 e0       	ldi	r22, 0x04	; 4
    468a:	85 e0       	ldi	r24, 0x05	; 5
    468c:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4690:	a9 c0       	rjmp	.+338    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	9a 81       	ldd	r25, Y+2	; 0x02
    4696:	80 39       	cpi	r24, 0x90	; 144
    4698:	9b 40       	sbci	r25, 0x0B	; 11
    469a:	29 f4       	brne	.+10     	; 0x46a6 <sysclk_enable_peripheral_clock+0x1e6>
    469c:	64 e0       	ldi	r22, 0x04	; 4
    469e:	86 e0       	ldi	r24, 0x06	; 6
    46a0:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    46a4:	9f c0       	rjmp	.+318    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	9a 81       	ldd	r25, Y+2	; 0x02
    46aa:	80 3c       	cpi	r24, 0xC0	; 192
    46ac:	98 40       	sbci	r25, 0x08	; 8
    46ae:	29 f4       	brne	.+10     	; 0x46ba <sysclk_enable_peripheral_clock+0x1fa>
    46b0:	68 e0       	ldi	r22, 0x08	; 8
    46b2:	83 e0       	ldi	r24, 0x03	; 3
    46b4:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    46b8:	95 c0       	rjmp	.+298    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    46ba:	89 81       	ldd	r24, Y+1	; 0x01
    46bc:	9a 81       	ldd	r25, Y+2	; 0x02
    46be:	80 3c       	cpi	r24, 0xC0	; 192
    46c0:	99 40       	sbci	r25, 0x09	; 9
    46c2:	29 f4       	brne	.+10     	; 0x46ce <sysclk_enable_peripheral_clock+0x20e>
    46c4:	68 e0       	ldi	r22, 0x08	; 8
    46c6:	84 e0       	ldi	r24, 0x04	; 4
    46c8:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    46cc:	8b c0       	rjmp	.+278    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    46ce:	89 81       	ldd	r24, Y+1	; 0x01
    46d0:	9a 81       	ldd	r25, Y+2	; 0x02
    46d2:	80 3c       	cpi	r24, 0xC0	; 192
    46d4:	9a 40       	sbci	r25, 0x0A	; 10
    46d6:	29 f4       	brne	.+10     	; 0x46e2 <sysclk_enable_peripheral_clock+0x222>
    46d8:	68 e0       	ldi	r22, 0x08	; 8
    46da:	85 e0       	ldi	r24, 0x05	; 5
    46dc:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    46e0:	81 c0       	rjmp	.+258    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    46e2:	89 81       	ldd	r24, Y+1	; 0x01
    46e4:	9a 81       	ldd	r25, Y+2	; 0x02
    46e6:	80 3c       	cpi	r24, 0xC0	; 192
    46e8:	9b 40       	sbci	r25, 0x0B	; 11
    46ea:	29 f4       	brne	.+10     	; 0x46f6 <sysclk_enable_peripheral_clock+0x236>
    46ec:	68 e0       	ldi	r22, 0x08	; 8
    46ee:	86 e0       	ldi	r24, 0x06	; 6
    46f0:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    46f4:	77 c0       	rjmp	.+238    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    46f6:	89 81       	ldd	r24, Y+1	; 0x01
    46f8:	9a 81       	ldd	r25, Y+2	; 0x02
    46fa:	80 3a       	cpi	r24, 0xA0	; 160
    46fc:	98 40       	sbci	r25, 0x08	; 8
    46fe:	29 f4       	brne	.+10     	; 0x470a <sysclk_enable_peripheral_clock+0x24a>
    4700:	60 e1       	ldi	r22, 0x10	; 16
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4708:	6d c0       	rjmp	.+218    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    470a:	89 81       	ldd	r24, Y+1	; 0x01
    470c:	9a 81       	ldd	r25, Y+2	; 0x02
    470e:	80 3a       	cpi	r24, 0xA0	; 160
    4710:	99 40       	sbci	r25, 0x09	; 9
    4712:	29 f4       	brne	.+10     	; 0x471e <sysclk_enable_peripheral_clock+0x25e>
    4714:	60 e1       	ldi	r22, 0x10	; 16
    4716:	84 e0       	ldi	r24, 0x04	; 4
    4718:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    471c:	63 c0       	rjmp	.+198    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	9a 81       	ldd	r25, Y+2	; 0x02
    4722:	80 3a       	cpi	r24, 0xA0	; 160
    4724:	9a 40       	sbci	r25, 0x0A	; 10
    4726:	29 f4       	brne	.+10     	; 0x4732 <sysclk_enable_peripheral_clock+0x272>
    4728:	60 e1       	ldi	r22, 0x10	; 16
    472a:	85 e0       	ldi	r24, 0x05	; 5
    472c:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4730:	59 c0       	rjmp	.+178    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4732:	89 81       	ldd	r24, Y+1	; 0x01
    4734:	9a 81       	ldd	r25, Y+2	; 0x02
    4736:	80 3a       	cpi	r24, 0xA0	; 160
    4738:	9b 40       	sbci	r25, 0x0B	; 11
    473a:	29 f4       	brne	.+10     	; 0x4746 <sysclk_enable_peripheral_clock+0x286>
    473c:	60 e1       	ldi	r22, 0x10	; 16
    473e:	86 e0       	ldi	r24, 0x06	; 6
    4740:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4744:	4f c0       	rjmp	.+158    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	9a 81       	ldd	r25, Y+2	; 0x02
    474a:	80 3b       	cpi	r24, 0xB0	; 176
    474c:	98 40       	sbci	r25, 0x08	; 8
    474e:	29 f4       	brne	.+10     	; 0x475a <sysclk_enable_peripheral_clock+0x29a>
    4750:	60 e2       	ldi	r22, 0x20	; 32
    4752:	83 e0       	ldi	r24, 0x03	; 3
    4754:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4758:	45 c0       	rjmp	.+138    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	9a 81       	ldd	r25, Y+2	; 0x02
    475e:	80 3b       	cpi	r24, 0xB0	; 176
    4760:	99 40       	sbci	r25, 0x09	; 9
    4762:	29 f4       	brne	.+10     	; 0x476e <sysclk_enable_peripheral_clock+0x2ae>
    4764:	60 e2       	ldi	r22, 0x20	; 32
    4766:	84 e0       	ldi	r24, 0x04	; 4
    4768:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    476c:	3b c0       	rjmp	.+118    	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	9a 81       	ldd	r25, Y+2	; 0x02
    4772:	80 3b       	cpi	r24, 0xB0	; 176
    4774:	9a 40       	sbci	r25, 0x0A	; 10
    4776:	29 f4       	brne	.+10     	; 0x4782 <sysclk_enable_peripheral_clock+0x2c2>
    4778:	60 e2       	ldi	r22, 0x20	; 32
    477a:	85 e0       	ldi	r24, 0x05	; 5
    477c:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4780:	31 c0       	rjmp	.+98     	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4782:	89 81       	ldd	r24, Y+1	; 0x01
    4784:	9a 81       	ldd	r25, Y+2	; 0x02
    4786:	80 3b       	cpi	r24, 0xB0	; 176
    4788:	9b 40       	sbci	r25, 0x0B	; 11
    478a:	29 f4       	brne	.+10     	; 0x4796 <sysclk_enable_peripheral_clock+0x2d6>
    478c:	60 e2       	ldi	r22, 0x20	; 32
    478e:	86 e0       	ldi	r24, 0x06	; 6
    4790:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4794:	27 c0       	rjmp	.+78     	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	80 38       	cpi	r24, 0x80	; 128
    479c:	94 40       	sbci	r25, 0x04	; 4
    479e:	29 f4       	brne	.+10     	; 0x47aa <sysclk_enable_peripheral_clock+0x2ea>
    47a0:	60 e4       	ldi	r22, 0x40	; 64
    47a2:	83 e0       	ldi	r24, 0x03	; 3
    47a4:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    47a8:	1d c0       	rjmp	.+58     	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	9a 81       	ldd	r25, Y+2	; 0x02
    47ae:	80 39       	cpi	r24, 0x90	; 144
    47b0:	94 40       	sbci	r25, 0x04	; 4
    47b2:	29 f4       	brne	.+10     	; 0x47be <sysclk_enable_peripheral_clock+0x2fe>
    47b4:	60 e4       	ldi	r22, 0x40	; 64
    47b6:	84 e0       	ldi	r24, 0x04	; 4
    47b8:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    47bc:	13 c0       	rjmp	.+38     	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    47be:	89 81       	ldd	r24, Y+1	; 0x01
    47c0:	9a 81       	ldd	r25, Y+2	; 0x02
    47c2:	80 3a       	cpi	r24, 0xA0	; 160
    47c4:	94 40       	sbci	r25, 0x04	; 4
    47c6:	29 f4       	brne	.+10     	; 0x47d2 <sysclk_enable_peripheral_clock+0x312>
    47c8:	60 e4       	ldi	r22, 0x40	; 64
    47ca:	85 e0       	ldi	r24, 0x05	; 5
    47cc:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    47d0:	09 c0       	rjmp	.+18     	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	9a 81       	ldd	r25, Y+2	; 0x02
    47d6:	80 3b       	cpi	r24, 0xB0	; 176
    47d8:	94 40       	sbci	r25, 0x04	; 4
    47da:	21 f4       	brne	.+8      	; 0x47e4 <sysclk_enable_peripheral_clock+0x324>
    47dc:	60 e4       	ldi	r22, 0x40	; 64
    47de:	86 e0       	ldi	r24, 0x06	; 6
    47e0:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    47e4:	00 00       	nop
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret

000047f0 <twi_master_read>:
    47f0:	cf 93       	push	r28
    47f2:	df 93       	push	r29
    47f4:	00 d0       	rcall	.+0      	; 0x47f6 <twi_master_read+0x6>
    47f6:	1f 92       	push	r1
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62
    47fc:	89 83       	std	Y+1, r24	; 0x01
    47fe:	9a 83       	std	Y+2, r25	; 0x02
    4800:	6b 83       	std	Y+3, r22	; 0x03
    4802:	7c 83       	std	Y+4, r23	; 0x04
    4804:	2b 81       	ldd	r18, Y+3	; 0x03
    4806:	3c 81       	ldd	r19, Y+4	; 0x04
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	9a 81       	ldd	r25, Y+2	; 0x02
    480c:	41 e0       	ldi	r20, 0x01	; 1
    480e:	b9 01       	movw	r22, r18
    4810:	4a d8       	rcall	.-3948   	; 0x38a6 <twi_master_transfer>
    4812:	24 96       	adiw	r28, 0x04	; 4
    4814:	cd bf       	out	0x3d, r28	; 61
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	df 91       	pop	r29
    481a:	cf 91       	pop	r28
    481c:	08 95       	ret

0000481e <twi_master_write>:
    481e:	cf 93       	push	r28
    4820:	df 93       	push	r29
    4822:	00 d0       	rcall	.+0      	; 0x4824 <twi_master_write+0x6>
    4824:	1f 92       	push	r1
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62
    482a:	89 83       	std	Y+1, r24	; 0x01
    482c:	9a 83       	std	Y+2, r25	; 0x02
    482e:	6b 83       	std	Y+3, r22	; 0x03
    4830:	7c 83       	std	Y+4, r23	; 0x04
    4832:	2b 81       	ldd	r18, Y+3	; 0x03
    4834:	3c 81       	ldd	r19, Y+4	; 0x04
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	40 e0       	ldi	r20, 0x00	; 0
    483c:	b9 01       	movw	r22, r18
    483e:	33 d8       	rcall	.-3994   	; 0x38a6 <twi_master_transfer>
    4840:	24 96       	adiw	r28, 0x04	; 4
    4842:	cd bf       	out	0x3d, r28	; 61
    4844:	de bf       	out	0x3e, r29	; 62
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	08 95       	ret

0000484c <twi_master_setup>:
    484c:	ef 92       	push	r14
    484e:	ff 92       	push	r15
    4850:	0f 93       	push	r16
    4852:	1f 93       	push	r17
    4854:	cf 93       	push	r28
    4856:	df 93       	push	r29
    4858:	00 d0       	rcall	.+0      	; 0x485a <twi_master_setup+0xe>
    485a:	1f 92       	push	r1
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	89 83       	std	Y+1, r24	; 0x01
    4862:	9a 83       	std	Y+2, r25	; 0x02
    4864:	6b 83       	std	Y+3, r22	; 0x03
    4866:	7c 83       	std	Y+4, r23	; 0x04
    4868:	1f de       	rcall	.-962    	; 0x44a8 <sysclk_get_cpu_hz>
    486a:	7b 01       	movw	r14, r22
    486c:	8c 01       	movw	r16, r24
    486e:	8b 81       	ldd	r24, Y+3	; 0x03
    4870:	9c 81       	ldd	r25, Y+4	; 0x04
    4872:	fc 01       	movw	r30, r24
    4874:	80 81       	ld	r24, Z
    4876:	91 81       	ldd	r25, Z+1	; 0x01
    4878:	a2 81       	ldd	r26, Z+2	; 0x02
    487a:	b3 81       	ldd	r27, Z+3	; 0x03
    487c:	9c 01       	movw	r18, r24
    487e:	ad 01       	movw	r20, r26
    4880:	22 0f       	add	r18, r18
    4882:	33 1f       	adc	r19, r19
    4884:	44 1f       	adc	r20, r20
    4886:	55 1f       	adc	r21, r21
    4888:	c8 01       	movw	r24, r16
    488a:	b7 01       	movw	r22, r14
    488c:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    4890:	da 01       	movw	r26, r20
    4892:	c9 01       	movw	r24, r18
    4894:	05 97       	sbiw	r24, 0x05	; 5
    4896:	a1 09       	sbc	r26, r1
    4898:	b1 09       	sbc	r27, r1
    489a:	2b 81       	ldd	r18, Y+3	; 0x03
    489c:	3c 81       	ldd	r19, Y+4	; 0x04
    489e:	f9 01       	movw	r30, r18
    48a0:	84 83       	std	Z+4, r24	; 0x04
    48a2:	95 83       	std	Z+5, r25	; 0x05
    48a4:	a6 83       	std	Z+6, r26	; 0x06
    48a6:	b7 83       	std	Z+7, r27	; 0x07
    48a8:	89 81       	ldd	r24, Y+1	; 0x01
    48aa:	9a 81       	ldd	r25, Y+2	; 0x02
    48ac:	09 de       	rcall	.-1006   	; 0x44c0 <sysclk_enable_peripheral_clock>
    48ae:	2b 81       	ldd	r18, Y+3	; 0x03
    48b0:	3c 81       	ldd	r19, Y+4	; 0x04
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	9a 81       	ldd	r25, Y+2	; 0x02
    48b6:	b9 01       	movw	r22, r18
    48b8:	0e 94 1b 1c 	call	0x3836	; 0x3836 <twi_master_init>
    48bc:	08 2e       	mov	r0, r24
    48be:	00 0c       	add	r0, r0
    48c0:	99 0b       	sbc	r25, r25
    48c2:	24 96       	adiw	r28, 0x04	; 4
    48c4:	cd bf       	out	0x3d, r28	; 61
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	ff 90       	pop	r15
    48d2:	ef 90       	pop	r14
    48d4:	08 95       	ret

000048d6 <I2CInit>:
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	2e 97       	sbiw	r28, 0x0e	; 14
    48e0:	cd bf       	out	0x3d, r28	; 61
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	6a 87       	std	Y+10, r22	; 0x0a
    48e6:	7b 87       	std	Y+11, r23	; 0x0b
    48e8:	8c 87       	std	Y+12, r24	; 0x0c
    48ea:	9d 87       	std	Y+13, r25	; 0x0d
    48ec:	4e 87       	std	Y+14, r20	; 0x0e
    48ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    48f0:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <busAddress>
    48f4:	29 e0       	ldi	r18, 0x09	; 9
    48f6:	ce 01       	movw	r24, r28
    48f8:	01 96       	adiw	r24, 0x01	; 1
    48fa:	fc 01       	movw	r30, r24
    48fc:	32 2f       	mov	r19, r18
    48fe:	11 92       	st	Z+, r1
    4900:	3a 95       	dec	r19
    4902:	e9 f7       	brne	.-6      	; 0x48fe <I2CInit+0x28>
    4904:	8a 85       	ldd	r24, Y+10	; 0x0a
    4906:	9b 85       	ldd	r25, Y+11	; 0x0b
    4908:	ac 85       	ldd	r26, Y+12	; 0x0c
    490a:	bd 85       	ldd	r27, Y+13	; 0x0d
    490c:	89 83       	std	Y+1, r24	; 0x01
    490e:	9a 83       	std	Y+2, r25	; 0x02
    4910:	ab 83       	std	Y+3, r26	; 0x03
    4912:	bc 83       	std	Y+4, r27	; 0x04
    4914:	8e 85       	ldd	r24, Y+14	; 0x0e
    4916:	89 87       	std	Y+9, r24	; 0x09
    4918:	ce 01       	movw	r24, r28
    491a:	01 96       	adiw	r24, 0x01	; 1
    491c:	bc 01       	movw	r22, r24
    491e:	80 e8       	ldi	r24, 0x80	; 128
    4920:	94 e0       	ldi	r25, 0x04	; 4
    4922:	94 df       	rcall	.-216    	; 0x484c <twi_master_setup>
    4924:	00 00       	nop
    4926:	2e 96       	adiw	r28, 0x0e	; 14
    4928:	cd bf       	out	0x3d, r28	; 61
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	df 91       	pop	r29
    492e:	cf 91       	pop	r28
    4930:	08 95       	ret

00004932 <twi_write>:
// writes to a device using two wire interface. the address is the seven bit identifier for the specific device
//data is an array of data that you wish to transfer. 
void twi_write(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	cd b7       	in	r28, 0x3d	; 61
    4938:	de b7       	in	r29, 0x3e	; 62
    493a:	2f 97       	sbiw	r28, 0x0f	; 15
    493c:	cd bf       	out	0x3d, r28	; 61
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	8c 87       	std	Y+12, r24	; 0x0c
    4942:	9d 87       	std	Y+13, r25	; 0x0d
    4944:	6e 87       	std	Y+14, r22	; 0x0e
    4946:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_write = 
    4948:	2b e0       	ldi	r18, 0x0B	; 11
    494a:	ce 01       	movw	r24, r28
    494c:	01 96       	adiw	r24, 0x01	; 1
    494e:	fc 01       	movw	r30, r24
    4950:	32 2f       	mov	r19, r18
    4952:	11 92       	st	Z+, r1
    4954:	3a 95       	dec	r19
    4956:	e9 f7       	brne	.-6      	; 0x4952 <twi_write+0x20>
    4958:	8e 85       	ldd	r24, Y+14	; 0x0e
    495a:	89 83       	std	Y+1, r24	; 0x01
    495c:	8f 85       	ldd	r24, Y+15	; 0x0f
    495e:	8a 83       	std	Y+2, r24	; 0x02
    4960:	81 e0       	ldi	r24, 0x01	; 1
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	8d 83       	std	Y+5, r24	; 0x05
    4966:	9e 83       	std	Y+6, r25	; 0x06
    4968:	8c 85       	ldd	r24, Y+12	; 0x0c
    496a:	9d 85       	ldd	r25, Y+13	; 0x0d
    496c:	8f 83       	std	Y+7, r24	; 0x07
    496e:	98 87       	std	Y+8, r25	; 0x08
    4970:	82 e0       	ldi	r24, 0x02	; 2
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	89 87       	std	Y+9, r24	; 0x09
    4976:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,      // TWI slave bus address
		.buffer       = Data, // transfer data source buffer
		.length       = sizeof(Data)  // transfer data size (bytes)
	};
	while (twi_master_write(&MYI2C, &packet_write) != TWI_SUCCESS) printf("fail");//transfers data and waits until transfer is finished to do anything else
    4978:	0b c0       	rjmp	.+22     	; 0x4990 <twi_write+0x5e>
    497a:	8d e0       	ldi	r24, 0x0D	; 13
    497c:	90 e2       	ldi	r25, 0x20	; 32
    497e:	89 2f       	mov	r24, r25
    4980:	8f 93       	push	r24
    4982:	8d e0       	ldi	r24, 0x0D	; 13
    4984:	90 e2       	ldi	r25, 0x20	; 32
    4986:	8f 93       	push	r24
    4988:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <printf>
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	ce 01       	movw	r24, r28
    4992:	01 96       	adiw	r24, 0x01	; 1
    4994:	bc 01       	movw	r22, r24
    4996:	80 e8       	ldi	r24, 0x80	; 128
    4998:	94 e0       	ldi	r25, 0x04	; 4
    499a:	41 df       	rcall	.-382    	; 0x481e <twi_master_write>
    499c:	88 23       	and	r24, r24
    499e:	69 f7       	brne	.-38     	; 0x497a <twi_write+0x48>
}
    49a0:	00 00       	nop
    49a2:	2f 96       	adiw	r28, 0x0f	; 15
    49a4:	cd bf       	out	0x3d, r28	; 61
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	08 95       	ret

000049ae <twi_read>:

//reads using two wire interface. address is the 7 bit identifier for each device. Data is the array the data will be stored in.
//returns the status of the transfer
void twi_read(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
    49b6:	2f 97       	sbiw	r28, 0x0f	; 15
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	de bf       	out	0x3e, r29	; 62
    49bc:	8c 87       	std	Y+12, r24	; 0x0c
    49be:	9d 87       	std	Y+13, r25	; 0x0d
    49c0:	6e 87       	std	Y+14, r22	; 0x0e
    49c2:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_read = 
    49c4:	2b e0       	ldi	r18, 0x0B	; 11
    49c6:	ce 01       	movw	r24, r28
    49c8:	01 96       	adiw	r24, 0x01	; 1
    49ca:	fc 01       	movw	r30, r24
    49cc:	32 2f       	mov	r19, r18
    49ce:	11 92       	st	Z+, r1
    49d0:	3a 95       	dec	r19
    49d2:	e9 f7       	brne	.-6      	; 0x49ce <twi_read+0x20>
    49d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    49d6:	89 83       	std	Y+1, r24	; 0x01
    49d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    49da:	8a 83       	std	Y+2, r24	; 0x02
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	8d 83       	std	Y+5, r24	; 0x05
    49e2:	9e 83       	std	Y+6, r25	; 0x06
    49e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    49e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    49e8:	8f 83       	std	Y+7, r24	; 0x07
    49ea:	98 87       	std	Y+8, r25	; 0x08
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	89 87       	std	Y+9, r24	; 0x09
    49f2:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,       // TWI slave bus address
		.buffer       = Data,          // transfer data destination buffer
		.length       = sizeof(Data)        // transfer data size (bytes)
	};
	twi_master_read(&MYI2C, &packet_read); //preform read and return the status of the read
    49f4:	ce 01       	movw	r24, r28
    49f6:	01 96       	adiw	r24, 0x01	; 1
    49f8:	bc 01       	movw	r22, r24
    49fa:	80 e8       	ldi	r24, 0x80	; 128
    49fc:	94 e0       	ldi	r25, 0x04	; 4
    49fe:	f8 de       	rcall	.-528    	; 0x47f0 <twi_master_read>
	//Data = packet_read.buffer;
	
	
}
    4a00:	00 00       	nop
    4a02:	2f 96       	adiw	r28, 0x0f	; 15
    4a04:	cd bf       	out	0x3d, r28	; 61
    4a06:	de bf       	out	0x3e, r29	; 62
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	08 95       	ret

00004a0e <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    4a0e:	cf 93       	push	r28
    4a10:	df 93       	push	r29
    4a12:	1f 92       	push	r1
    4a14:	1f 92       	push	r1
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	89 83       	std	Y+1, r24	; 0x01
    4a1c:	9a 83       	std	Y+2, r25	; 0x02
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	9a 81       	ldd	r25, Y+2	; 0x02
    4a22:	89 2b       	or	r24, r25
    4a24:	09 f4       	brne	.+2      	; 0x4a28 <sysclk_enable_peripheral_clock+0x1a>
    4a26:	85 c1       	rjmp	.+778    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2c:	80 3c       	cpi	r24, 0xC0	; 192
    4a2e:	91 05       	cpc	r25, r1
    4a30:	29 f4       	brne	.+10     	; 0x4a3c <sysclk_enable_peripheral_clock+0x2e>
    4a32:	60 e1       	ldi	r22, 0x10	; 16
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4a3a:	7b c1       	rjmp	.+758    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4a3c:	89 81       	ldd	r24, Y+1	; 0x01
    4a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a40:	80 34       	cpi	r24, 0x40	; 64
    4a42:	94 40       	sbci	r25, 0x04	; 4
    4a44:	29 f4       	brne	.+10     	; 0x4a50 <sysclk_enable_peripheral_clock+0x42>
    4a46:	68 e0       	ldi	r22, 0x08	; 8
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4a4e:	71 c1       	rjmp	.+738    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4a50:	89 81       	ldd	r24, Y+1	; 0x01
    4a52:	9a 81       	ldd	r25, Y+2	; 0x02
    4a54:	81 15       	cp	r24, r1
    4a56:	94 40       	sbci	r25, 0x04	; 4
    4a58:	29 f4       	brne	.+10     	; 0x4a64 <sysclk_enable_peripheral_clock+0x56>
    4a5a:	64 e0       	ldi	r22, 0x04	; 4
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4a62:	67 c1       	rjmp	.+718    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4a64:	89 81       	ldd	r24, Y+1	; 0x01
    4a66:	9a 81       	ldd	r25, Y+2	; 0x02
    4a68:	80 38       	cpi	r24, 0x80	; 128
    4a6a:	91 40       	sbci	r25, 0x01	; 1
    4a6c:	29 f4       	brne	.+10     	; 0x4a78 <sysclk_enable_peripheral_clock+0x6a>
    4a6e:	62 e0       	ldi	r22, 0x02	; 2
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4a76:	5d c1       	rjmp	.+698    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4a78:	89 81       	ldd	r24, Y+1	; 0x01
    4a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7c:	81 15       	cp	r24, r1
    4a7e:	91 40       	sbci	r25, 0x01	; 1
    4a80:	29 f4       	brne	.+10     	; 0x4a8c <sysclk_enable_peripheral_clock+0x7e>
    4a82:	61 e0       	ldi	r22, 0x01	; 1
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4a8a:	53 c1       	rjmp	.+678    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4a8c:	89 81       	ldd	r24, Y+1	; 0x01
    4a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a90:	80 38       	cpi	r24, 0x80	; 128
    4a92:	93 40       	sbci	r25, 0x03	; 3
    4a94:	29 f4       	brne	.+10     	; 0x4aa0 <sysclk_enable_peripheral_clock+0x92>
    4a96:	61 e0       	ldi	r22, 0x01	; 1
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4a9e:	49 c1       	rjmp	.+658    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4aa0:	89 81       	ldd	r24, Y+1	; 0x01
    4aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa4:	80 39       	cpi	r24, 0x90	; 144
    4aa6:	93 40       	sbci	r25, 0x03	; 3
    4aa8:	29 f4       	brne	.+10     	; 0x4ab4 <sysclk_enable_peripheral_clock+0xa6>
    4aaa:	61 e0       	ldi	r22, 0x01	; 1
    4aac:	82 e0       	ldi	r24, 0x02	; 2
    4aae:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4ab2:	3f c1       	rjmp	.+638    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4ab4:	89 81       	ldd	r24, Y+1	; 0x01
    4ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab8:	81 15       	cp	r24, r1
    4aba:	92 40       	sbci	r25, 0x02	; 2
    4abc:	29 f4       	brne	.+10     	; 0x4ac8 <sysclk_enable_peripheral_clock+0xba>
    4abe:	62 e0       	ldi	r22, 0x02	; 2
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4ac6:	35 c1       	rjmp	.+618    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4ac8:	89 81       	ldd	r24, Y+1	; 0x01
    4aca:	9a 81       	ldd	r25, Y+2	; 0x02
    4acc:	80 34       	cpi	r24, 0x40	; 64
    4ace:	92 40       	sbci	r25, 0x02	; 2
    4ad0:	29 f4       	brne	.+10     	; 0x4adc <sysclk_enable_peripheral_clock+0xce>
    4ad2:	62 e0       	ldi	r22, 0x02	; 2
    4ad4:	82 e0       	ldi	r24, 0x02	; 2
    4ad6:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4ada:	2b c1       	rjmp	.+598    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4adc:	89 81       	ldd	r24, Y+1	; 0x01
    4ade:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae0:	81 15       	cp	r24, r1
    4ae2:	93 40       	sbci	r25, 0x03	; 3
    4ae4:	29 f4       	brne	.+10     	; 0x4af0 <sysclk_enable_peripheral_clock+0xe2>
    4ae6:	64 e0       	ldi	r22, 0x04	; 4
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4aee:	21 c1       	rjmp	.+578    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	9a 81       	ldd	r25, Y+2	; 0x02
    4af4:	80 32       	cpi	r24, 0x20	; 32
    4af6:	93 40       	sbci	r25, 0x03	; 3
    4af8:	29 f4       	brne	.+10     	; 0x4b04 <sysclk_enable_peripheral_clock+0xf6>
    4afa:	64 e0       	ldi	r22, 0x04	; 4
    4afc:	82 e0       	ldi	r24, 0x02	; 2
    4afe:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b02:	17 c1       	rjmp	.+558    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	9a 81       	ldd	r25, Y+2	; 0x02
    4b08:	81 15       	cp	r24, r1
    4b0a:	98 40       	sbci	r25, 0x08	; 8
    4b0c:	29 f4       	brne	.+10     	; 0x4b18 <sysclk_enable_peripheral_clock+0x10a>
    4b0e:	61 e0       	ldi	r22, 0x01	; 1
    4b10:	83 e0       	ldi	r24, 0x03	; 3
    4b12:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b16:	0d c1       	rjmp	.+538    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b18:	89 81       	ldd	r24, Y+1	; 0x01
    4b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1c:	81 15       	cp	r24, r1
    4b1e:	99 40       	sbci	r25, 0x09	; 9
    4b20:	29 f4       	brne	.+10     	; 0x4b2c <sysclk_enable_peripheral_clock+0x11e>
    4b22:	61 e0       	ldi	r22, 0x01	; 1
    4b24:	84 e0       	ldi	r24, 0x04	; 4
    4b26:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b2a:	03 c1       	rjmp	.+518    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b2c:	89 81       	ldd	r24, Y+1	; 0x01
    4b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b30:	81 15       	cp	r24, r1
    4b32:	9a 40       	sbci	r25, 0x0A	; 10
    4b34:	29 f4       	brne	.+10     	; 0x4b40 <sysclk_enable_peripheral_clock+0x132>
    4b36:	61 e0       	ldi	r22, 0x01	; 1
    4b38:	85 e0       	ldi	r24, 0x05	; 5
    4b3a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b3e:	f9 c0       	rjmp	.+498    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	81 15       	cp	r24, r1
    4b46:	9b 40       	sbci	r25, 0x0B	; 11
    4b48:	29 f4       	brne	.+10     	; 0x4b54 <sysclk_enable_peripheral_clock+0x146>
    4b4a:	61 e0       	ldi	r22, 0x01	; 1
    4b4c:	86 e0       	ldi	r24, 0x06	; 6
    4b4e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b52:	ef c0       	rjmp	.+478    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b54:	89 81       	ldd	r24, Y+1	; 0x01
    4b56:	9a 81       	ldd	r25, Y+2	; 0x02
    4b58:	80 34       	cpi	r24, 0x40	; 64
    4b5a:	98 40       	sbci	r25, 0x08	; 8
    4b5c:	29 f4       	brne	.+10     	; 0x4b68 <sysclk_enable_peripheral_clock+0x15a>
    4b5e:	62 e0       	ldi	r22, 0x02	; 2
    4b60:	83 e0       	ldi	r24, 0x03	; 3
    4b62:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b66:	e5 c0       	rjmp	.+458    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6c:	80 34       	cpi	r24, 0x40	; 64
    4b6e:	99 40       	sbci	r25, 0x09	; 9
    4b70:	29 f4       	brne	.+10     	; 0x4b7c <sysclk_enable_peripheral_clock+0x16e>
    4b72:	62 e0       	ldi	r22, 0x02	; 2
    4b74:	84 e0       	ldi	r24, 0x04	; 4
    4b76:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b7a:	db c0       	rjmp	.+438    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b80:	80 34       	cpi	r24, 0x40	; 64
    4b82:	9a 40       	sbci	r25, 0x0A	; 10
    4b84:	29 f4       	brne	.+10     	; 0x4b90 <sysclk_enable_peripheral_clock+0x182>
    4b86:	62 e0       	ldi	r22, 0x02	; 2
    4b88:	85 e0       	ldi	r24, 0x05	; 5
    4b8a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4b8e:	d1 c0       	rjmp	.+418    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	9a 81       	ldd	r25, Y+2	; 0x02
    4b94:	80 34       	cpi	r24, 0x40	; 64
    4b96:	9b 40       	sbci	r25, 0x0B	; 11
    4b98:	29 f4       	brne	.+10     	; 0x4ba4 <sysclk_enable_peripheral_clock+0x196>
    4b9a:	62 e0       	ldi	r22, 0x02	; 2
    4b9c:	86 e0       	ldi	r24, 0x06	; 6
    4b9e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4ba2:	c7 c0       	rjmp	.+398    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4ba4:	89 81       	ldd	r24, Y+1	; 0x01
    4ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba8:	80 39       	cpi	r24, 0x90	; 144
    4baa:	98 40       	sbci	r25, 0x08	; 8
    4bac:	29 f4       	brne	.+10     	; 0x4bb8 <sysclk_enable_peripheral_clock+0x1aa>
    4bae:	64 e0       	ldi	r22, 0x04	; 4
    4bb0:	83 e0       	ldi	r24, 0x03	; 3
    4bb2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4bb6:	bd c0       	rjmp	.+378    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbc:	80 39       	cpi	r24, 0x90	; 144
    4bbe:	99 40       	sbci	r25, 0x09	; 9
    4bc0:	29 f4       	brne	.+10     	; 0x4bcc <sysclk_enable_peripheral_clock+0x1be>
    4bc2:	64 e0       	ldi	r22, 0x04	; 4
    4bc4:	84 e0       	ldi	r24, 0x04	; 4
    4bc6:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4bca:	b3 c0       	rjmp	.+358    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4bcc:	89 81       	ldd	r24, Y+1	; 0x01
    4bce:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd0:	80 39       	cpi	r24, 0x90	; 144
    4bd2:	9a 40       	sbci	r25, 0x0A	; 10
    4bd4:	29 f4       	brne	.+10     	; 0x4be0 <sysclk_enable_peripheral_clock+0x1d2>
    4bd6:	64 e0       	ldi	r22, 0x04	; 4
    4bd8:	85 e0       	ldi	r24, 0x05	; 5
    4bda:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4bde:	a9 c0       	rjmp	.+338    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4be0:	89 81       	ldd	r24, Y+1	; 0x01
    4be2:	9a 81       	ldd	r25, Y+2	; 0x02
    4be4:	80 39       	cpi	r24, 0x90	; 144
    4be6:	9b 40       	sbci	r25, 0x0B	; 11
    4be8:	29 f4       	brne	.+10     	; 0x4bf4 <sysclk_enable_peripheral_clock+0x1e6>
    4bea:	64 e0       	ldi	r22, 0x04	; 4
    4bec:	86 e0       	ldi	r24, 0x06	; 6
    4bee:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4bf2:	9f c0       	rjmp	.+318    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4bf4:	89 81       	ldd	r24, Y+1	; 0x01
    4bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf8:	80 3c       	cpi	r24, 0xC0	; 192
    4bfa:	98 40       	sbci	r25, 0x08	; 8
    4bfc:	29 f4       	brne	.+10     	; 0x4c08 <sysclk_enable_peripheral_clock+0x1fa>
    4bfe:	68 e0       	ldi	r22, 0x08	; 8
    4c00:	83 e0       	ldi	r24, 0x03	; 3
    4c02:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c06:	95 c0       	rjmp	.+298    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0c:	80 3c       	cpi	r24, 0xC0	; 192
    4c0e:	99 40       	sbci	r25, 0x09	; 9
    4c10:	29 f4       	brne	.+10     	; 0x4c1c <sysclk_enable_peripheral_clock+0x20e>
    4c12:	68 e0       	ldi	r22, 0x08	; 8
    4c14:	84 e0       	ldi	r24, 0x04	; 4
    4c16:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c1a:	8b c0       	rjmp	.+278    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	80 3c       	cpi	r24, 0xC0	; 192
    4c22:	9a 40       	sbci	r25, 0x0A	; 10
    4c24:	29 f4       	brne	.+10     	; 0x4c30 <sysclk_enable_peripheral_clock+0x222>
    4c26:	68 e0       	ldi	r22, 0x08	; 8
    4c28:	85 e0       	ldi	r24, 0x05	; 5
    4c2a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c2e:	81 c0       	rjmp	.+258    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	9a 81       	ldd	r25, Y+2	; 0x02
    4c34:	80 3c       	cpi	r24, 0xC0	; 192
    4c36:	9b 40       	sbci	r25, 0x0B	; 11
    4c38:	29 f4       	brne	.+10     	; 0x4c44 <sysclk_enable_peripheral_clock+0x236>
    4c3a:	68 e0       	ldi	r22, 0x08	; 8
    4c3c:	86 e0       	ldi	r24, 0x06	; 6
    4c3e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c42:	77 c0       	rjmp	.+238    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c44:	89 81       	ldd	r24, Y+1	; 0x01
    4c46:	9a 81       	ldd	r25, Y+2	; 0x02
    4c48:	80 3a       	cpi	r24, 0xA0	; 160
    4c4a:	98 40       	sbci	r25, 0x08	; 8
    4c4c:	29 f4       	brne	.+10     	; 0x4c58 <sysclk_enable_peripheral_clock+0x24a>
    4c4e:	60 e1       	ldi	r22, 0x10	; 16
    4c50:	83 e0       	ldi	r24, 0x03	; 3
    4c52:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c56:	6d c0       	rjmp	.+218    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5c:	80 3a       	cpi	r24, 0xA0	; 160
    4c5e:	99 40       	sbci	r25, 0x09	; 9
    4c60:	29 f4       	brne	.+10     	; 0x4c6c <sysclk_enable_peripheral_clock+0x25e>
    4c62:	60 e1       	ldi	r22, 0x10	; 16
    4c64:	84 e0       	ldi	r24, 0x04	; 4
    4c66:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c6a:	63 c0       	rjmp	.+198    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c70:	80 3a       	cpi	r24, 0xA0	; 160
    4c72:	9a 40       	sbci	r25, 0x0A	; 10
    4c74:	29 f4       	brne	.+10     	; 0x4c80 <sysclk_enable_peripheral_clock+0x272>
    4c76:	60 e1       	ldi	r22, 0x10	; 16
    4c78:	85 e0       	ldi	r24, 0x05	; 5
    4c7a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c7e:	59 c0       	rjmp	.+178    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c80:	89 81       	ldd	r24, Y+1	; 0x01
    4c82:	9a 81       	ldd	r25, Y+2	; 0x02
    4c84:	80 3a       	cpi	r24, 0xA0	; 160
    4c86:	9b 40       	sbci	r25, 0x0B	; 11
    4c88:	29 f4       	brne	.+10     	; 0x4c94 <sysclk_enable_peripheral_clock+0x286>
    4c8a:	60 e1       	ldi	r22, 0x10	; 16
    4c8c:	86 e0       	ldi	r24, 0x06	; 6
    4c8e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4c92:	4f c0       	rjmp	.+158    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4c94:	89 81       	ldd	r24, Y+1	; 0x01
    4c96:	9a 81       	ldd	r25, Y+2	; 0x02
    4c98:	80 3b       	cpi	r24, 0xB0	; 176
    4c9a:	98 40       	sbci	r25, 0x08	; 8
    4c9c:	29 f4       	brne	.+10     	; 0x4ca8 <sysclk_enable_peripheral_clock+0x29a>
    4c9e:	60 e2       	ldi	r22, 0x20	; 32
    4ca0:	83 e0       	ldi	r24, 0x03	; 3
    4ca2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4ca6:	45 c0       	rjmp	.+138    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4ca8:	89 81       	ldd	r24, Y+1	; 0x01
    4caa:	9a 81       	ldd	r25, Y+2	; 0x02
    4cac:	80 3b       	cpi	r24, 0xB0	; 176
    4cae:	99 40       	sbci	r25, 0x09	; 9
    4cb0:	29 f4       	brne	.+10     	; 0x4cbc <sysclk_enable_peripheral_clock+0x2ae>
    4cb2:	60 e2       	ldi	r22, 0x20	; 32
    4cb4:	84 e0       	ldi	r24, 0x04	; 4
    4cb6:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4cba:	3b c0       	rjmp	.+118    	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4cbc:	89 81       	ldd	r24, Y+1	; 0x01
    4cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc0:	80 3b       	cpi	r24, 0xB0	; 176
    4cc2:	9a 40       	sbci	r25, 0x0A	; 10
    4cc4:	29 f4       	brne	.+10     	; 0x4cd0 <sysclk_enable_peripheral_clock+0x2c2>
    4cc6:	60 e2       	ldi	r22, 0x20	; 32
    4cc8:	85 e0       	ldi	r24, 0x05	; 5
    4cca:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4cce:	31 c0       	rjmp	.+98     	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4cd0:	89 81       	ldd	r24, Y+1	; 0x01
    4cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd4:	80 3b       	cpi	r24, 0xB0	; 176
    4cd6:	9b 40       	sbci	r25, 0x0B	; 11
    4cd8:	29 f4       	brne	.+10     	; 0x4ce4 <sysclk_enable_peripheral_clock+0x2d6>
    4cda:	60 e2       	ldi	r22, 0x20	; 32
    4cdc:	86 e0       	ldi	r24, 0x06	; 6
    4cde:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4ce2:	27 c0       	rjmp	.+78     	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce8:	80 38       	cpi	r24, 0x80	; 128
    4cea:	94 40       	sbci	r25, 0x04	; 4
    4cec:	29 f4       	brne	.+10     	; 0x4cf8 <sysclk_enable_peripheral_clock+0x2ea>
    4cee:	60 e4       	ldi	r22, 0x40	; 64
    4cf0:	83 e0       	ldi	r24, 0x03	; 3
    4cf2:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4cf6:	1d c0       	rjmp	.+58     	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfc:	80 39       	cpi	r24, 0x90	; 144
    4cfe:	94 40       	sbci	r25, 0x04	; 4
    4d00:	29 f4       	brne	.+10     	; 0x4d0c <sysclk_enable_peripheral_clock+0x2fe>
    4d02:	60 e4       	ldi	r22, 0x40	; 64
    4d04:	84 e0       	ldi	r24, 0x04	; 4
    4d06:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4d0a:	13 c0       	rjmp	.+38     	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4d0c:	89 81       	ldd	r24, Y+1	; 0x01
    4d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d10:	80 3a       	cpi	r24, 0xA0	; 160
    4d12:	94 40       	sbci	r25, 0x04	; 4
    4d14:	29 f4       	brne	.+10     	; 0x4d20 <sysclk_enable_peripheral_clock+0x312>
    4d16:	60 e4       	ldi	r22, 0x40	; 64
    4d18:	85 e0       	ldi	r24, 0x05	; 5
    4d1a:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4d1e:	09 c0       	rjmp	.+18     	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4d20:	89 81       	ldd	r24, Y+1	; 0x01
    4d22:	9a 81       	ldd	r25, Y+2	; 0x02
    4d24:	80 3b       	cpi	r24, 0xB0	; 176
    4d26:	94 40       	sbci	r25, 0x04	; 4
    4d28:	21 f4       	brne	.+8      	; 0x4d32 <sysclk_enable_peripheral_clock+0x324>
    4d2a:	60 e4       	ldi	r22, 0x40	; 64
    4d2c:	86 e0       	ldi	r24, 0x06	; 6
    4d2e:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4d32:	00 00       	nop
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	df 91       	pop	r29
    4d3a:	cf 91       	pop	r28
    4d3c:	08 95       	ret

00004d3e <usart_serial_init>:
    4d3e:	cf 93       	push	r28
    4d40:	df 93       	push	r29
    4d42:	cd b7       	in	r28, 0x3d	; 61
    4d44:	de b7       	in	r29, 0x3e	; 62
    4d46:	2b 97       	sbiw	r28, 0x0b	; 11
    4d48:	cd bf       	out	0x3d, r28	; 61
    4d4a:	de bf       	out	0x3e, r29	; 62
    4d4c:	88 87       	std	Y+8, r24	; 0x08
    4d4e:	99 87       	std	Y+9, r25	; 0x09
    4d50:	6a 87       	std	Y+10, r22	; 0x0a
    4d52:	7b 87       	std	Y+11, r23	; 0x0b
    4d54:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d56:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d58:	fc 01       	movw	r30, r24
    4d5a:	84 81       	ldd	r24, Z+4	; 0x04
    4d5c:	8d 83       	std	Y+5, r24	; 0x05
    4d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d62:	fc 01       	movw	r30, r24
    4d64:	85 81       	ldd	r24, Z+5	; 0x05
    4d66:	8e 83       	std	Y+6, r24	; 0x06
    4d68:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	86 81       	ldd	r24, Z+6	; 0x06
    4d70:	8f 83       	std	Y+7, r24	; 0x07
    4d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d76:	fc 01       	movw	r30, r24
    4d78:	80 81       	ld	r24, Z
    4d7a:	91 81       	ldd	r25, Z+1	; 0x01
    4d7c:	a2 81       	ldd	r26, Z+2	; 0x02
    4d7e:	b3 81       	ldd	r27, Z+3	; 0x03
    4d80:	89 83       	std	Y+1, r24	; 0x01
    4d82:	9a 83       	std	Y+2, r25	; 0x02
    4d84:	ab 83       	std	Y+3, r26	; 0x03
    4d86:	bc 83       	std	Y+4, r27	; 0x04
    4d88:	88 85       	ldd	r24, Y+8	; 0x08
    4d8a:	99 85       	ldd	r25, Y+9	; 0x09
    4d8c:	80 3a       	cpi	r24, 0xA0	; 160
    4d8e:	98 40       	sbci	r25, 0x08	; 8
    4d90:	21 f4       	brne	.+8      	; 0x4d9a <usart_serial_init+0x5c>
    4d92:	60 e1       	ldi	r22, 0x10	; 16
    4d94:	83 e0       	ldi	r24, 0x03	; 3
    4d96:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4d9a:	88 85       	ldd	r24, Y+8	; 0x08
    4d9c:	99 85       	ldd	r25, Y+9	; 0x09
    4d9e:	80 3b       	cpi	r24, 0xB0	; 176
    4da0:	98 40       	sbci	r25, 0x08	; 8
    4da2:	21 f4       	brne	.+8      	; 0x4dac <usart_serial_init+0x6e>
    4da4:	60 e2       	ldi	r22, 0x20	; 32
    4da6:	83 e0       	ldi	r24, 0x03	; 3
    4da8:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4dac:	88 85       	ldd	r24, Y+8	; 0x08
    4dae:	99 85       	ldd	r25, Y+9	; 0x09
    4db0:	80 3a       	cpi	r24, 0xA0	; 160
    4db2:	99 40       	sbci	r25, 0x09	; 9
    4db4:	21 f4       	brne	.+8      	; 0x4dbe <usart_serial_init+0x80>
    4db6:	60 e1       	ldi	r22, 0x10	; 16
    4db8:	84 e0       	ldi	r24, 0x04	; 4
    4dba:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4dbe:	88 85       	ldd	r24, Y+8	; 0x08
    4dc0:	99 85       	ldd	r25, Y+9	; 0x09
    4dc2:	80 3b       	cpi	r24, 0xB0	; 176
    4dc4:	99 40       	sbci	r25, 0x09	; 9
    4dc6:	21 f4       	brne	.+8      	; 0x4dd0 <usart_serial_init+0x92>
    4dc8:	60 e2       	ldi	r22, 0x20	; 32
    4dca:	84 e0       	ldi	r24, 0x04	; 4
    4dcc:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4dd0:	88 85       	ldd	r24, Y+8	; 0x08
    4dd2:	99 85       	ldd	r25, Y+9	; 0x09
    4dd4:	80 3a       	cpi	r24, 0xA0	; 160
    4dd6:	9a 40       	sbci	r25, 0x0A	; 10
    4dd8:	21 f4       	brne	.+8      	; 0x4de2 <usart_serial_init+0xa4>
    4dda:	60 e1       	ldi	r22, 0x10	; 16
    4ddc:	85 e0       	ldi	r24, 0x05	; 5
    4dde:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4de2:	88 85       	ldd	r24, Y+8	; 0x08
    4de4:	99 85       	ldd	r25, Y+9	; 0x09
    4de6:	80 3b       	cpi	r24, 0xB0	; 176
    4de8:	9a 40       	sbci	r25, 0x0A	; 10
    4dea:	21 f4       	brne	.+8      	; 0x4df4 <usart_serial_init+0xb6>
    4dec:	60 e2       	ldi	r22, 0x20	; 32
    4dee:	85 e0       	ldi	r24, 0x05	; 5
    4df0:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4df4:	88 85       	ldd	r24, Y+8	; 0x08
    4df6:	99 85       	ldd	r25, Y+9	; 0x09
    4df8:	80 3a       	cpi	r24, 0xA0	; 160
    4dfa:	9b 40       	sbci	r25, 0x0B	; 11
    4dfc:	21 f4       	brne	.+8      	; 0x4e06 <usart_serial_init+0xc8>
    4dfe:	60 e1       	ldi	r22, 0x10	; 16
    4e00:	86 e0       	ldi	r24, 0x06	; 6
    4e02:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4e06:	88 85       	ldd	r24, Y+8	; 0x08
    4e08:	99 85       	ldd	r25, Y+9	; 0x09
    4e0a:	80 3b       	cpi	r24, 0xB0	; 176
    4e0c:	9b 40       	sbci	r25, 0x0B	; 11
    4e0e:	21 f4       	brne	.+8      	; 0x4e18 <usart_serial_init+0xda>
    4e10:	60 e2       	ldi	r22, 0x20	; 32
    4e12:	86 e0       	ldi	r24, 0x06	; 6
    4e14:	0e 94 47 0a 	call	0x148e	; 0x148e <sysclk_enable_module>
    4e18:	88 85       	ldd	r24, Y+8	; 0x08
    4e1a:	99 85       	ldd	r25, Y+9	; 0x09
    4e1c:	9e 01       	movw	r18, r28
    4e1e:	2f 5f       	subi	r18, 0xFF	; 255
    4e20:	3f 4f       	sbci	r19, 0xFF	; 255
    4e22:	b9 01       	movw	r22, r18
    4e24:	1e d8       	rcall	.-4036   	; 0x3e62 <usart_init_rs232>
    4e26:	88 23       	and	r24, r24
    4e28:	11 f0       	breq	.+4      	; 0x4e2e <usart_serial_init+0xf0>
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	01 c0       	rjmp	.+2      	; 0x4e30 <usart_serial_init+0xf2>
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	2b 96       	adiw	r28, 0x0b	; 11
    4e32:	cd bf       	out	0x3d, r28	; 61
    4e34:	de bf       	out	0x3e, r29	; 62
    4e36:	df 91       	pop	r29
    4e38:	cf 91       	pop	r28
    4e3a:	08 95       	ret

00004e3c <usart_serial_putchar>:
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	00 d0       	rcall	.+0      	; 0x4e42 <usart_serial_putchar+0x6>
    4e42:	cd b7       	in	r28, 0x3d	; 61
    4e44:	de b7       	in	r29, 0x3e	; 62
    4e46:	89 83       	std	Y+1, r24	; 0x01
    4e48:	9a 83       	std	Y+2, r25	; 0x02
    4e4a:	6b 83       	std	Y+3, r22	; 0x03
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	6b 81       	ldd	r22, Y+3	; 0x03
    4e52:	4d d8       	rcall	.-3942   	; 0x3eee <usart_putchar>
    4e54:	23 96       	adiw	r28, 0x03	; 3
    4e56:	cd bf       	out	0x3d, r28	; 61
    4e58:	de bf       	out	0x3e, r29	; 62
    4e5a:	df 91       	pop	r29
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret

00004e60 <usart_serial_getchar>:
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	00 d0       	rcall	.+0      	; 0x4e66 <usart_serial_getchar+0x6>
    4e66:	1f 92       	push	r1
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62
    4e6c:	89 83       	std	Y+1, r24	; 0x01
    4e6e:	9a 83       	std	Y+2, r25	; 0x02
    4e70:	6b 83       	std	Y+3, r22	; 0x03
    4e72:	7c 83       	std	Y+4, r23	; 0x04
    4e74:	89 81       	ldd	r24, Y+1	; 0x01
    4e76:	9a 81       	ldd	r25, Y+2	; 0x02
    4e78:	58 d8       	rcall	.-3920   	; 0x3f2a <usart_getchar>
    4e7a:	28 2f       	mov	r18, r24
    4e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e80:	fc 01       	movw	r30, r24
    4e82:	20 83       	st	Z, r18
    4e84:	00 00       	nop
    4e86:	24 96       	adiw	r28, 0x04	; 4
    4e88:	cd bf       	out	0x3d, r28	; 61
    4e8a:	de bf       	out	0x3e, r29	; 62
    4e8c:	df 91       	pop	r29
    4e8e:	cf 91       	pop	r28
    4e90:	08 95       	ret

00004e92 <stdio_serial_init>:
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	00 d0       	rcall	.+0      	; 0x4e98 <stdio_serial_init+0x6>
    4e98:	1f 92       	push	r1
    4e9a:	cd b7       	in	r28, 0x3d	; 61
    4e9c:	de b7       	in	r29, 0x3e	; 62
    4e9e:	89 83       	std	Y+1, r24	; 0x01
    4ea0:	9a 83       	std	Y+2, r25	; 0x02
    4ea2:	6b 83       	std	Y+3, r22	; 0x03
    4ea4:	7c 83       	std	Y+4, r23	; 0x04
    4ea6:	89 81       	ldd	r24, Y+1	; 0x01
    4ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eaa:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <stdio_base>
    4eae:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <stdio_base+0x1>
    4eb2:	8e e1       	ldi	r24, 0x1E	; 30
    4eb4:	97 e2       	ldi	r25, 0x27	; 39
    4eb6:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <ptr_put>
    4eba:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <ptr_put+0x1>
    4ebe:	80 e3       	ldi	r24, 0x30	; 48
    4ec0:	97 e2       	ldi	r25, 0x27	; 39
    4ec2:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <ptr_get>
    4ec6:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <ptr_get+0x1>
    4eca:	2b 81       	ldd	r18, Y+3	; 0x03
    4ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	b9 01       	movw	r22, r18
    4ed4:	34 df       	rcall	.-408    	; 0x4d3e <usart_serial_init>
    4ed6:	6b e6       	ldi	r22, 0x6B	; 107
    4ed8:	7a e0       	ldi	r23, 0x0A	; 10
    4eda:	8a e8       	ldi	r24, 0x8A	; 138
    4edc:	9a e0       	ldi	r25, 0x0A	; 10
    4ede:	ae d6       	rcall	.+3420   	; 0x5c3c <fdevopen>
    4ee0:	00 00       	nop
    4ee2:	24 96       	adiw	r28, 0x04	; 4
    4ee4:	cd bf       	out	0x3d, r28	; 61
    4ee6:	de bf       	out	0x3e, r29	; 62
    4ee8:	df 91       	pop	r29
    4eea:	cf 91       	pop	r28
    4eec:	08 95       	ret

00004eee <uart_terminal_init>:

void uart_terminal_init()
{
    4eee:	cf 93       	push	r28
    4ef0:	df 93       	push	r29
    4ef2:	cd b7       	in	r28, 0x3d	; 61
    4ef4:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    4ef6:	80 ea       	ldi	r24, 0xA0	; 160
    4ef8:	9a e0       	ldi	r25, 0x0A	; 10
    4efa:	89 dd       	rcall	.-1262   	; 0x4a0e <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    4efc:	80 e8       	ldi	r24, 0x80	; 128
    4efe:	96 e0       	ldi	r25, 0x06	; 6
    4f00:	20 e8       	ldi	r18, 0x80	; 128
    4f02:	36 e0       	ldi	r19, 0x06	; 6
    4f04:	f9 01       	movw	r30, r18
    4f06:	20 81       	ld	r18, Z
    4f08:	28 60       	ori	r18, 0x08	; 8
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    4f0e:	66 e0       	ldi	r22, 0x06	; 6
    4f10:	70 e2       	ldi	r23, 0x20	; 32
    4f12:	80 ea       	ldi	r24, 0xA0	; 160
    4f14:	9a e0       	ldi	r25, 0x0A	; 10
    4f16:	bd df       	rcall	.-134    	; 0x4e92 <stdio_serial_init>
	
}
    4f18:	00 00       	nop
    4f1a:	df 91       	pop	r29
    4f1c:	cf 91       	pop	r28
    4f1e:	08 95       	ret

00004f20 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	98 e4       	ldi	r25, 0x48	; 72
    4f2c:	a8 ee       	ldi	r26, 0xE8	; 232
    4f2e:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    4f30:	bc 01       	movw	r22, r24
    4f32:	cd 01       	movw	r24, r26
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	08 95       	ret

00004f3a <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    4f3a:	cf 93       	push	r28
    4f3c:	df 93       	push	r29
    4f3e:	1f 92       	push	r1
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    4f44:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    4f46:	ec df       	rcall	.-40     	; 0x4f20 <sysclk_get_main_hz>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	29 81       	ldd	r18, Y+1	; 0x01
    4f4e:	22 2f       	mov	r18, r18
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	04 c0       	rjmp	.+8      	; 0x4f5c <sysclk_get_per4_hz+0x22>
    4f54:	b6 95       	lsr	r27
    4f56:	a7 95       	ror	r26
    4f58:	97 95       	ror	r25
    4f5a:	87 95       	ror	r24
    4f5c:	2a 95       	dec	r18
    4f5e:	d2 f7       	brpl	.-12     	; 0x4f54 <sysclk_get_per4_hz+0x1a>
}
    4f60:	bc 01       	movw	r22, r24
    4f62:	cd 01       	movw	r24, r26
    4f64:	0f 90       	pop	r0
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	08 95       	ret

00004f6c <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
    4f70:	cd b7       	in	r28, 0x3d	; 61
    4f72:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    4f74:	e2 df       	rcall	.-60     	; 0x4f3a <sysclk_get_per4_hz>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    4f7a:	bc 01       	movw	r22, r24
    4f7c:	cd 01       	movw	r24, r26
    4f7e:	df 91       	pop	r29
    4f80:	cf 91       	pop	r28
    4f82:	08 95       	ret

00004f84 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    4f8c:	ef df       	rcall	.-34     	; 0x4f6c <sysclk_get_per2_hz>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
}
    4f92:	bc 01       	movw	r22, r24
    4f94:	cd 01       	movw	r24, r26
    4f96:	df 91       	pop	r29
    4f98:	cf 91       	pop	r28
    4f9a:	08 95       	ret

00004f9c <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	cd b7       	in	r28, 0x3d	; 61
    4fa2:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    4fa4:	ef df       	rcall	.-34     	; 0x4f84 <sysclk_get_per_hz>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
}
    4faa:	bc 01       	movw	r22, r24
    4fac:	cd 01       	movw	r24, r26
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	08 95       	ret

00004fb4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4fb4:	04 c0       	rjmp	.+8      	; 0x4fbe <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4fb6:	61 50       	subi	r22, 0x01	; 1
    4fb8:	71 09       	sbc	r23, r1
    4fba:	81 09       	sbc	r24, r1
    4fbc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    4fbe:	61 15       	cp	r22, r1
    4fc0:	71 05       	cpc	r23, r1
    4fc2:	81 05       	cpc	r24, r1
    4fc4:	91 05       	cpc	r25, r1
    4fc6:	b9 f7       	brne	.-18     	; 0x4fb6 <__portable_avr_delay_cycles+0x2>
    4fc8:	08 95       	ret

00004fca <main>:




int main (void)
{
    4fca:	2f 92       	push	r2
    4fcc:	3f 92       	push	r3
    4fce:	4f 92       	push	r4
    4fd0:	5f 92       	push	r5
    4fd2:	6f 92       	push	r6
    4fd4:	7f 92       	push	r7
    4fd6:	8f 92       	push	r8
    4fd8:	9f 92       	push	r9
    4fda:	af 92       	push	r10
    4fdc:	bf 92       	push	r11
    4fde:	cf 92       	push	r12
    4fe0:	df 92       	push	r13
    4fe2:	ef 92       	push	r14
    4fe4:	ff 92       	push	r15
    4fe6:	0f 93       	push	r16
    4fe8:	1f 93       	push	r17
    4fea:	cf 93       	push	r28
    4fec:	df 93       	push	r29
    4fee:	cd b7       	in	r28, 0x3d	; 61
    4ff0:	de b7       	in	r29, 0x3e	; 62
    4ff2:	6f 97       	sbiw	r28, 0x1f	; 31
    4ff4:	cd bf       	out	0x3d, r28	; 61
    4ff6:	de bf       	out	0x3e, r29	; 62
	//char* s_cardinalDir= (char*)malloc(10 * sizeof(char));
	//
	//uint16_t packetCount = 0;
	//
	
	sysclk_init();
    4ff8:	0e 94 16 0a 	call	0x142c	; 0x142c <sysclk_init>
	board_init();
    4ffc:	07 da       	rcall	.-3058   	; 0x440c <board_init>
	uart_terminal_init();
    4ffe:	77 df       	rcall	.-274    	; 0x4eee <uart_terminal_init>
    5000:	82 e1       	ldi	r24, 0x12	; 18
	printf("uart is working\n");
    5002:	90 e2       	ldi	r25, 0x20	; 32
    5004:	78 d6       	rcall	.+3312   	; 0x5cf6 <puts>
    5006:	82 e2       	ldi	r24, 0x22	; 34
	
	//pmic_init();
	//pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	//cpu_irq_enable();
	//
	printf("\tpmic Init\n");
    5008:	90 e2       	ldi	r25, 0x20	; 32
    500a:	75 d6       	rcall	.+3306   	; 0x5cf6 <puts>
    500c:	49 e2       	ldi	r20, 0x29	; 41
    500e:	60 e0       	ldi	r22, 0x00	; 0
	
	I2CInit(115200,0x29);
    5010:	72 ec       	ldi	r23, 0xC2	; 194
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	5f dc       	rcall	.-1858   	; 0x48d6 <I2CInit>
    5018:	1a 82       	std	Y+2, r1	; 0x02
    501a:	1b 82       	std	Y+3, r1	; 0x03
	//printf("\tXbee Init\n");
	
	
	
	uint8_t data;
	int16_t acel[]={0,0,0};
    501c:	1c 82       	std	Y+4, r1	; 0x04
    501e:	1d 82       	std	Y+5, r1	; 0x05
    5020:	1e 82       	std	Y+6, r1	; 0x06
    5022:	1f 82       	std	Y+7, r1	; 0x07
    5024:	19 82       	std	Y+1, r1	; 0x01
    5026:	6d e3       	ldi	r22, 0x3D	; 61
	int16_t acelx;
		data=BNO055_OPERATION_MODE_CONFIG;
    5028:	ce 01       	movw	r24, r28
		BNO_Write(&data, BNO055_OPR_MODE_ADDR);
    502a:	01 96       	adiw	r24, 0x01	; 1
    502c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <BNO_Write>
    5030:	b5 df       	rcall	.-150    	; 0x4f9c <sysclk_get_cpu_hz>
		delay_ms(22);
    5032:	dc 01       	movw	r26, r24
    5034:	cb 01       	movw	r24, r22
    5036:	8c 01       	movw	r16, r24
    5038:	9d 01       	movw	r18, r26
    503a:	40 e0       	ldi	r20, 0x00	; 0
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	ba 01       	movw	r22, r20
    5040:	08 8b       	std	Y+16, r16	; 0x10
    5042:	19 8b       	std	Y+17, r17	; 0x11
    5044:	2a 8b       	std	Y+18, r18	; 0x12
    5046:	3b 8b       	std	Y+19, r19	; 0x13
    5048:	4c 8b       	std	Y+20, r20	; 0x14
    504a:	5d 8b       	std	Y+21, r21	; 0x15
    504c:	6e 8b       	std	Y+22, r22	; 0x16
    504e:	7f 8b       	std	Y+23, r23	; 0x17
    5050:	28 88       	ldd	r2, Y+16	; 0x10
    5052:	39 88       	ldd	r3, Y+17	; 0x11
    5054:	4a 88       	ldd	r4, Y+18	; 0x12
    5056:	5b 88       	ldd	r5, Y+19	; 0x13
    5058:	6c 88       	ldd	r6, Y+20	; 0x14
    505a:	7d 88       	ldd	r7, Y+21	; 0x15
    505c:	8e 88       	ldd	r8, Y+22	; 0x16
    505e:	9f 88       	ldd	r9, Y+23	; 0x17
    5060:	22 2d       	mov	r18, r2
    5062:	33 2d       	mov	r19, r3
    5064:	44 2d       	mov	r20, r4
    5066:	55 2d       	mov	r21, r5
    5068:	66 2d       	mov	r22, r6
    506a:	77 2d       	mov	r23, r7
    506c:	88 2d       	mov	r24, r8
    506e:	99 2d       	mov	r25, r9
    5070:	02 e0       	ldi	r16, 0x02	; 2
    5072:	98 d4       	rcall	.+2352   	; 0x59a4 <__ashldi3>
    5074:	a2 2e       	mov	r10, r18
    5076:	b3 2e       	mov	r11, r19
    5078:	c4 2e       	mov	r12, r20
    507a:	d5 2e       	mov	r13, r21
    507c:	e6 2e       	mov	r14, r22
    507e:	f7 2e       	mov	r15, r23
    5080:	08 2f       	mov	r16, r24
    5082:	19 2f       	mov	r17, r25
    5084:	2a 2c       	mov	r2, r10
    5086:	3b 2c       	mov	r3, r11
    5088:	4c 2c       	mov	r4, r12
    508a:	5d 2c       	mov	r5, r13
    508c:	6e 2c       	mov	r6, r14
    508e:	7f 2c       	mov	r7, r15
    5090:	80 2e       	mov	r8, r16
    5092:	91 2e       	mov	r9, r17
    5094:	22 2d       	mov	r18, r2
    5096:	33 2d       	mov	r19, r3
    5098:	44 2d       	mov	r20, r4
    509a:	55 2d       	mov	r21, r5
    509c:	66 2d       	mov	r22, r6
    509e:	77 2d       	mov	r23, r7
    50a0:	88 2d       	mov	r24, r8
    50a2:	99 2d       	mov	r25, r9
    50a4:	02 e0       	ldi	r16, 0x02	; 2
    50a6:	7e d4       	rcall	.+2300   	; 0x59a4 <__ashldi3>
    50a8:	a2 2e       	mov	r10, r18
    50aa:	b3 2e       	mov	r11, r19
    50ac:	c4 2e       	mov	r12, r20
    50ae:	d5 2e       	mov	r13, r21
    50b0:	e6 2e       	mov	r14, r22
    50b2:	f7 2e       	mov	r15, r23
    50b4:	08 2f       	mov	r16, r24
    50b6:	19 2f       	mov	r17, r25
    50b8:	2a 2d       	mov	r18, r10
    50ba:	3b 2d       	mov	r19, r11
    50bc:	4c 2d       	mov	r20, r12
    50be:	5d 2d       	mov	r21, r13
    50c0:	6e 2d       	mov	r22, r14
    50c2:	7f 2d       	mov	r23, r15
    50c4:	80 2f       	mov	r24, r16
    50c6:	91 2f       	mov	r25, r17
    50c8:	a2 2c       	mov	r10, r2
    50ca:	b3 2c       	mov	r11, r3
    50cc:	c4 2c       	mov	r12, r4
    50ce:	d5 2c       	mov	r13, r5
    50d0:	e6 2c       	mov	r14, r6
    50d2:	f7 2c       	mov	r15, r7
    50d4:	08 2d       	mov	r16, r8
    50d6:	19 2d       	mov	r17, r9
    50d8:	87 d4       	rcall	.+2318   	; 0x59e8 <__subdi3>
    50da:	a2 2e       	mov	r10, r18
    50dc:	b3 2e       	mov	r11, r19
    50de:	c4 2e       	mov	r12, r20
    50e0:	d5 2e       	mov	r13, r21
    50e2:	e6 2e       	mov	r14, r22
    50e4:	f7 2e       	mov	r15, r23
    50e6:	08 2f       	mov	r16, r24
    50e8:	19 2f       	mov	r17, r25
    50ea:	2a 2d       	mov	r18, r10
    50ec:	3b 2d       	mov	r19, r11
    50ee:	4c 2d       	mov	r20, r12
    50f0:	5d 2d       	mov	r21, r13
    50f2:	6e 2d       	mov	r22, r14
    50f4:	7f 2d       	mov	r23, r15
    50f6:	80 2f       	mov	r24, r16
    50f8:	91 2f       	mov	r25, r17
    50fa:	a8 88       	ldd	r10, Y+16	; 0x10
    50fc:	b9 88       	ldd	r11, Y+17	; 0x11
    50fe:	ca 88       	ldd	r12, Y+18	; 0x12
    5100:	db 88       	ldd	r13, Y+19	; 0x13
    5102:	ec 88       	ldd	r14, Y+20	; 0x14
    5104:	fd 88       	ldd	r15, Y+21	; 0x15
    5106:	0e 89       	ldd	r16, Y+22	; 0x16
    5108:	1f 89       	ldd	r17, Y+23	; 0x17
    510a:	6e d4       	rcall	.+2268   	; 0x59e8 <__subdi3>
    510c:	a2 2e       	mov	r10, r18
    510e:	b3 2e       	mov	r11, r19
    5110:	c4 2e       	mov	r12, r20
    5112:	d5 2e       	mov	r13, r21
    5114:	e6 2e       	mov	r14, r22
    5116:	f7 2e       	mov	r15, r23
    5118:	08 2f       	mov	r16, r24
    511a:	19 2f       	mov	r17, r25
    511c:	2a 2d       	mov	r18, r10
    511e:	3b 2d       	mov	r19, r11
    5120:	4c 2d       	mov	r20, r12
    5122:	5d 2d       	mov	r21, r13
    5124:	6e 2d       	mov	r22, r14
    5126:	7f 2d       	mov	r23, r15
    5128:	80 2f       	mov	r24, r16
    512a:	91 2f       	mov	r25, r17
    512c:	01 e0       	ldi	r16, 0x01	; 1
    512e:	3a d4       	rcall	.+2164   	; 0x59a4 <__ashldi3>
    5130:	22 2e       	mov	r2, r18
    5132:	33 2e       	mov	r3, r19
    5134:	44 2e       	mov	r4, r20
    5136:	55 2e       	mov	r5, r21
    5138:	66 2e       	mov	r6, r22
    513a:	77 2e       	mov	r7, r23
    513c:	88 2e       	mov	r8, r24
    513e:	99 2e       	mov	r9, r25
    5140:	a2 2c       	mov	r10, r2
    5142:	b3 2c       	mov	r11, r3
    5144:	c4 2c       	mov	r12, r4
    5146:	d5 2c       	mov	r13, r5
    5148:	e6 2c       	mov	r14, r6
    514a:	f7 2c       	mov	r15, r7
    514c:	08 2d       	mov	r16, r8
    514e:	19 2d       	mov	r17, r9
    5150:	2a 2c       	mov	r2, r10
    5152:	3b 2c       	mov	r3, r11
    5154:	4c 2c       	mov	r4, r12
    5156:	5d 2c       	mov	r5, r13
    5158:	6e 2c       	mov	r6, r14
    515a:	7f 2c       	mov	r7, r15
    515c:	80 2e       	mov	r8, r16
    515e:	91 2e       	mov	r9, r17
    5160:	0f 2e       	mov	r0, r31
    5162:	f6 e0       	ldi	r31, 0x06	; 6
    5164:	af 2e       	mov	r10, r31
    5166:	f0 2d       	mov	r31, r0
    5168:	b1 2c       	mov	r11, r1
    516a:	c1 2c       	mov	r12, r1
    516c:	d1 2c       	mov	r13, r1
    516e:	e1 2c       	mov	r14, r1
    5170:	f1 2c       	mov	r15, r1
    5172:	00 e0       	ldi	r16, 0x00	; 0
    5174:	10 e0       	ldi	r17, 0x00	; 0
    5176:	22 2d       	mov	r18, r2
    5178:	33 2d       	mov	r19, r3
    517a:	44 2d       	mov	r20, r4
    517c:	55 2d       	mov	r21, r5
    517e:	66 2d       	mov	r22, r6
    5180:	77 2d       	mov	r23, r7
    5182:	88 2d       	mov	r24, r8
    5184:	99 2d       	mov	r25, r9
    5186:	b2 d3       	rcall	.+1892   	; 0x58ec <__udivdi3>
    5188:	22 2e       	mov	r2, r18
    518a:	33 2e       	mov	r3, r19
    518c:	44 2e       	mov	r4, r20
    518e:	55 2e       	mov	r5, r21
    5190:	66 2e       	mov	r6, r22
    5192:	77 2e       	mov	r7, r23
    5194:	88 2e       	mov	r8, r24
    5196:	99 2e       	mov	r9, r25
    5198:	a2 2c       	mov	r10, r2
    519a:	b3 2c       	mov	r11, r3
    519c:	c4 2c       	mov	r12, r4
    519e:	d5 2c       	mov	r13, r5
    51a0:	e6 2c       	mov	r14, r6
    51a2:	f7 2c       	mov	r15, r7
    51a4:	08 2d       	mov	r16, r8
    51a6:	19 2d       	mov	r17, r9
    51a8:	2a 2d       	mov	r18, r10
    51aa:	3b 2d       	mov	r19, r11
    51ac:	4c 2d       	mov	r20, r12
    51ae:	5d 2d       	mov	r21, r13
    51b0:	6e 2d       	mov	r22, r14
    51b2:	7f 2d       	mov	r23, r15
    51b4:	80 2f       	mov	r24, r16
    51b6:	91 2f       	mov	r25, r17
    51b8:	29 51       	subi	r18, 0x19	; 25
    51ba:	3c 4f       	sbci	r19, 0xFC	; 252
    51bc:	4f 4f       	sbci	r20, 0xFF	; 255
    51be:	5f 4f       	sbci	r21, 0xFF	; 255
    51c0:	6f 4f       	sbci	r22, 0xFF	; 255
    51c2:	7f 4f       	sbci	r23, 0xFF	; 255
    51c4:	8f 4f       	sbci	r24, 0xFF	; 255
    51c6:	9f 4f       	sbci	r25, 0xFF	; 255
    51c8:	a2 2e       	mov	r10, r18
    51ca:	b3 2e       	mov	r11, r19
    51cc:	c4 2e       	mov	r12, r20
    51ce:	d5 2e       	mov	r13, r21
    51d0:	e6 2e       	mov	r14, r22
    51d2:	f7 2e       	mov	r15, r23
    51d4:	08 2f       	mov	r16, r24
    51d6:	19 2f       	mov	r17, r25
    51d8:	2a 2d       	mov	r18, r10
    51da:	3b 2d       	mov	r19, r11
    51dc:	4c 2d       	mov	r20, r12
    51de:	5d 2d       	mov	r21, r13
    51e0:	6e 2d       	mov	r22, r14
    51e2:	7f 2d       	mov	r23, r15
    51e4:	80 2f       	mov	r24, r16
    51e6:	91 2f       	mov	r25, r17
    51e8:	be d2       	rcall	.+1404   	; 0x5766 <__floatundisf>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	4a e7       	ldi	r20, 0x7A	; 122
    51f4:	54 e4       	ldi	r21, 0x44	; 68
    51f6:	bc 01       	movw	r22, r24
    51f8:	cd 01       	movw	r24, r26
    51fa:	13 d2       	rcall	.+1062   	; 0x5622 <__divsf3>
    51fc:	dc 01       	movw	r26, r24
    51fe:	cb 01       	movw	r24, r22
    5200:	bc 01       	movw	r22, r24
    5202:	cd 01       	movw	r24, r26
    5204:	7b d2       	rcall	.+1270   	; 0x56fc <__fixunssfdi>
    5206:	a2 2e       	mov	r10, r18
    5208:	b3 2e       	mov	r11, r19
    520a:	c4 2e       	mov	r12, r20
    520c:	d5 2e       	mov	r13, r21
    520e:	e6 2e       	mov	r14, r22
    5210:	f7 2e       	mov	r15, r23
    5212:	08 2f       	mov	r16, r24
    5214:	19 2f       	mov	r17, r25
    5216:	d6 01       	movw	r26, r12
    5218:	c5 01       	movw	r24, r10
    521a:	bc 01       	movw	r22, r24
    521c:	cd 01       	movw	r24, r26
    521e:	ca de       	rcall	.-620    	; 0x4fb4 <__portable_avr_delay_cycles>
    5220:	8c e0       	ldi	r24, 0x0C	; 12
    5222:	89 83       	std	Y+1, r24	; 0x01
		
		data=BNO055_OPERATION_MODE_NDOF;
    5224:	6d e3       	ldi	r22, 0x3D	; 61
    5226:	ce 01       	movw	r24, r28
		BNO_Write(&data,BNO055_OPR_MODE_ADDR);
    5228:	01 96       	adiw	r24, 0x01	; 1
    522a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <BNO_Write>
    522e:	b6 de       	rcall	.-660    	; 0x4f9c <sysclk_get_cpu_hz>
    5230:	dc 01       	movw	r26, r24
		delay_ms(8);
    5232:	cb 01       	movw	r24, r22
    5234:	5c 01       	movw	r10, r24
    5236:	6d 01       	movw	r12, r26
    5238:	e1 2c       	mov	r14, r1
    523a:	f1 2c       	mov	r15, r1
    523c:	87 01       	movw	r16, r14
    523e:	2a 2d       	mov	r18, r10
    5240:	3b 2d       	mov	r19, r11
    5242:	4c 2d       	mov	r20, r12
    5244:	5d 2d       	mov	r21, r13
    5246:	6e 2d       	mov	r22, r14
    5248:	7f 2d       	mov	r23, r15
    524a:	80 2f       	mov	r24, r16
    524c:	91 2f       	mov	r25, r17
    524e:	03 e0       	ldi	r16, 0x03	; 3
    5250:	a9 d3       	rcall	.+1874   	; 0x59a4 <__ashldi3>
    5252:	22 2e       	mov	r2, r18
    5254:	33 2e       	mov	r3, r19
    5256:	44 2e       	mov	r4, r20
    5258:	55 2e       	mov	r5, r21
    525a:	66 2e       	mov	r6, r22
    525c:	77 2e       	mov	r7, r23
    525e:	88 2e       	mov	r8, r24
    5260:	99 2e       	mov	r9, r25
    5262:	0f 2e       	mov	r0, r31
    5264:	f6 e0       	ldi	r31, 0x06	; 6
    5266:	af 2e       	mov	r10, r31
    5268:	f0 2d       	mov	r31, r0
    526a:	b1 2c       	mov	r11, r1
    526c:	c1 2c       	mov	r12, r1
    526e:	d1 2c       	mov	r13, r1
    5270:	e1 2c       	mov	r14, r1
    5272:	f1 2c       	mov	r15, r1
    5274:	00 e0       	ldi	r16, 0x00	; 0
    5276:	10 e0       	ldi	r17, 0x00	; 0
    5278:	22 2d       	mov	r18, r2
    527a:	33 2d       	mov	r19, r3
    527c:	44 2d       	mov	r20, r4
    527e:	55 2d       	mov	r21, r5
    5280:	66 2d       	mov	r22, r6
    5282:	77 2d       	mov	r23, r7
    5284:	88 2d       	mov	r24, r8
    5286:	99 2d       	mov	r25, r9
    5288:	31 d3       	rcall	.+1634   	; 0x58ec <__udivdi3>
    528a:	22 2e       	mov	r2, r18
    528c:	33 2e       	mov	r3, r19
    528e:	44 2e       	mov	r4, r20
    5290:	55 2e       	mov	r5, r21
    5292:	66 2e       	mov	r6, r22
    5294:	77 2e       	mov	r7, r23
    5296:	88 2e       	mov	r8, r24
    5298:	99 2e       	mov	r9, r25
    529a:	a2 2c       	mov	r10, r2
    529c:	b3 2c       	mov	r11, r3
    529e:	c4 2c       	mov	r12, r4
    52a0:	d5 2c       	mov	r13, r5
    52a2:	e6 2c       	mov	r14, r6
    52a4:	f7 2c       	mov	r15, r7
    52a6:	08 2d       	mov	r16, r8
    52a8:	19 2d       	mov	r17, r9
    52aa:	2a 2d       	mov	r18, r10
    52ac:	3b 2d       	mov	r19, r11
    52ae:	4c 2d       	mov	r20, r12
    52b0:	5d 2d       	mov	r21, r13
    52b2:	6e 2d       	mov	r22, r14
    52b4:	7f 2d       	mov	r23, r15
    52b6:	80 2f       	mov	r24, r16
    52b8:	91 2f       	mov	r25, r17
    52ba:	29 51       	subi	r18, 0x19	; 25
    52bc:	3c 4f       	sbci	r19, 0xFC	; 252
    52be:	4f 4f       	sbci	r20, 0xFF	; 255
    52c0:	5f 4f       	sbci	r21, 0xFF	; 255
    52c2:	6f 4f       	sbci	r22, 0xFF	; 255
    52c4:	7f 4f       	sbci	r23, 0xFF	; 255
    52c6:	8f 4f       	sbci	r24, 0xFF	; 255
    52c8:	9f 4f       	sbci	r25, 0xFF	; 255
    52ca:	a2 2e       	mov	r10, r18
    52cc:	b3 2e       	mov	r11, r19
    52ce:	c4 2e       	mov	r12, r20
    52d0:	d5 2e       	mov	r13, r21
    52d2:	e6 2e       	mov	r14, r22
    52d4:	f7 2e       	mov	r15, r23
    52d6:	08 2f       	mov	r16, r24
    52d8:	19 2f       	mov	r17, r25
    52da:	2a 2d       	mov	r18, r10
    52dc:	3b 2d       	mov	r19, r11
    52de:	4c 2d       	mov	r20, r12
    52e0:	5d 2d       	mov	r21, r13
    52e2:	6e 2d       	mov	r22, r14
    52e4:	7f 2d       	mov	r23, r15
    52e6:	80 2f       	mov	r24, r16
    52e8:	91 2f       	mov	r25, r17
    52ea:	3d d2       	rcall	.+1146   	; 0x5766 <__floatundisf>
    52ec:	dc 01       	movw	r26, r24
    52ee:	cb 01       	movw	r24, r22
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	4a e7       	ldi	r20, 0x7A	; 122
    52f6:	54 e4       	ldi	r21, 0x44	; 68
    52f8:	bc 01       	movw	r22, r24
    52fa:	cd 01       	movw	r24, r26
    52fc:	92 d1       	rcall	.+804    	; 0x5622 <__divsf3>
    52fe:	dc 01       	movw	r26, r24
    5300:	cb 01       	movw	r24, r22
    5302:	bc 01       	movw	r22, r24
    5304:	cd 01       	movw	r24, r26
    5306:	fa d1       	rcall	.+1012   	; 0x56fc <__fixunssfdi>
    5308:	a2 2e       	mov	r10, r18
    530a:	b3 2e       	mov	r11, r19
    530c:	c4 2e       	mov	r12, r20
    530e:	d5 2e       	mov	r13, r21
    5310:	e6 2e       	mov	r14, r22
    5312:	f7 2e       	mov	r15, r23
    5314:	08 2f       	mov	r16, r24
    5316:	19 2f       	mov	r17, r25
    5318:	d6 01       	movw	r26, r12
    531a:	c5 01       	movw	r24, r10
    531c:	bc 01       	movw	r22, r24
    531e:	cd 01       	movw	r24, r26
    5320:	49 de       	rcall	.-878    	; 0x4fb4 <__portable_avr_delay_cycles>
    5322:	66 e3       	ldi	r22, 0x36	; 54
    5324:	ce 01       	movw	r24, r28
    5326:	01 96       	adiw	r24, 0x01	; 1
		//const char* accXStr = (char*)malloc(83 * sizeof(char)) ;
		//const char* accYStr = (char*)malloc(83 * sizeof(char)) ;
		//const char* accZStr = (char*)malloc(83 * sizeof(char)) ;
		
		
		BNO_Read(&data,BNO055_SELFTEST_RESULT_ADDR);
    5328:	0e 94 8f 01 	call	0x31e	; 0x31e <BNO_Read>
    532c:	89 81       	ldd	r24, Y+1	; 0x01
    532e:	88 2f       	mov	r24, r24
    5330:	90 e0       	ldi	r25, 0x00	; 0
		
		printf("st_result = %i\n",data);
    5332:	29 2f       	mov	r18, r25
    5334:	2f 93       	push	r18
    5336:	8f 93       	push	r24
    5338:	8d e2       	ldi	r24, 0x2D	; 45
    533a:	90 e2       	ldi	r25, 0x20	; 32
    533c:	89 2f       	mov	r24, r25
    533e:	8f 93       	push	r24
    5340:	8d e2       	ldi	r24, 0x2D	; 45
    5342:	90 e2       	ldi	r25, 0x20	; 32
    5344:	8f 93       	push	r24
    5346:	c4 d4       	rcall	.+2440   	; 0x5cd0 <printf>
    5348:	0f 90       	pop	r0
    534a:	0f 90       	pop	r0
    534c:	0f 90       	pop	r0
    534e:	0f 90       	pop	r0
    5350:	6d e3       	ldi	r22, 0x3D	; 61
    5352:	ce 01       	movw	r24, r28
    5354:	01 96       	adiw	r24, 0x01	; 1
		
		BNO_Read(&data,BNO055_OPR_MODE_ADDR);
    5356:	0e 94 8f 01 	call	0x31e	; 0x31e <BNO_Read>
    535a:	89 81       	ldd	r24, Y+1	; 0x01
    535c:	88 2f       	mov	r24, r24
    535e:	90 e0       	ldi	r25, 0x00	; 0
		
		printf("opr mode = %i\n",data);
    5360:	29 2f       	mov	r18, r25
    5362:	2f 93       	push	r18
    5364:	8f 93       	push	r24
    5366:	8d e3       	ldi	r24, 0x3D	; 61
    5368:	90 e2       	ldi	r25, 0x20	; 32
    536a:	89 2f       	mov	r24, r25
    536c:	8f 93       	push	r24
    536e:	8d e3       	ldi	r24, 0x3D	; 61
    5370:	90 e2       	ldi	r25, 0x20	; 32
    5372:	8f 93       	push	r24
    5374:	ad d4       	rcall	.+2394   	; 0x5cd0 <printf>
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	65 e3       	ldi	r22, 0x35	; 53
    5380:	ce 01       	movw	r24, r28
    5382:	01 96       	adiw	r24, 0x01	; 1
		
		BNO_Read(&data,BNO055_CALIB_STAT_ADDR);
    5384:	0e 94 8f 01 	call	0x31e	; 0x31e <BNO_Read>
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	88 2f       	mov	r24, r24
    538c:	90 e0       	ldi	r25, 0x00	; 0
		printf("Calibstat %i\n",data);
    538e:	29 2f       	mov	r18, r25
    5390:	2f 93       	push	r18
    5392:	8f 93       	push	r24
    5394:	8c e4       	ldi	r24, 0x4C	; 76
    5396:	90 e2       	ldi	r25, 0x20	; 32
    5398:	89 2f       	mov	r24, r25
    539a:	8f 93       	push	r24
    539c:	8c e4       	ldi	r24, 0x4C	; 76
    539e:	90 e2       	ldi	r25, 0x20	; 32
    53a0:	8f 93       	push	r24
    53a2:	96 d4       	rcall	.+2348   	; 0x5cd0 <printf>
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	65 e3       	ldi	r22, 0x35	; 53
    53ae:	ce 01       	movw	r24, r28
    53b0:	01 96       	adiw	r24, 0x01	; 1
    53b2:	0e 94 8f 01 	call	0x31e	; 0x31e <BNO_Read>
		uint16_t gyrox [4];
		
	while (1) 
	{
		BNO_Read(&data,BNO055_CALIB_STAT_ADDR);
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	8f 3f       	cpi	r24, 0xFF	; 255
    53ba:	09 f0       	breq	.+2      	; 0x53be <main+0x3f4>
    53bc:	1f c1       	rjmp	.+574    	; 0x55fc <main+0x632>
		//
		
		
		if(data == 255){
    53be:	ce 01       	movw	r24, r28
    53c0:	08 96       	adiw	r24, 0x08	; 8
    53c2:	0e 94 a4 01 	call	0x348	; 0x348 <get_Angle>
		
		get_Angle(gyrox);
    53c6:	6e 85       	ldd	r22, Y+14	; 0x0e
    53c8:	7f 85       	ldd	r23, Y+15	; 0x0f
    53ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    53cc:	5d 85       	ldd	r21, Y+13	; 0x0d
		//
		printf("%i, %i, %i, %i\n", gyrox[0],gyrox[1],gyrox[2],gyrox[3]);
    53ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    53d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    53d2:	88 85       	ldd	r24, Y+8	; 0x08
    53d4:	99 85       	ldd	r25, Y+9	; 0x09
    53d6:	e7 2f       	mov	r30, r23
    53d8:	ef 93       	push	r30
    53da:	6f 93       	push	r22
    53dc:	65 2f       	mov	r22, r21
    53de:	6f 93       	push	r22
    53e0:	4f 93       	push	r20
    53e2:	43 2f       	mov	r20, r19
    53e4:	4f 93       	push	r20
    53e6:	2f 93       	push	r18
    53e8:	29 2f       	mov	r18, r25
    53ea:	2f 93       	push	r18
    53ec:	8f 93       	push	r24
    53ee:	8a e5       	ldi	r24, 0x5A	; 90
    53f0:	90 e2       	ldi	r25, 0x20	; 32
    53f2:	89 2f       	mov	r24, r25
    53f4:	8f 93       	push	r24
    53f6:	8a e5       	ldi	r24, 0x5A	; 90
    53f8:	90 e2       	ldi	r25, 0x20	; 32
    53fa:	8f 93       	push	r24
    53fc:	69 d4       	rcall	.+2258   	; 0x5cd0 <printf>
    53fe:	2d b7       	in	r18, 0x3d	; 61
    5400:	3e b7       	in	r19, 0x3e	; 62
    5402:	26 5f       	subi	r18, 0xF6	; 246
    5404:	3f 4f       	sbci	r19, 0xFF	; 255
    5406:	cd bf       	out	0x3d, r28	; 61
    5408:	de bf       	out	0x3e, r29	; 62
    540a:	c8 dd       	rcall	.-1136   	; 0x4f9c <sysclk_get_cpu_hz>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
			//s_cardinalDir);
		//
		//xbeeWrite(telemetryString);
	//
		//
		delay_ms(1000);
    5410:	8c 01       	movw	r16, r24
    5412:	9d 01       	movw	r18, r26
    5414:	40 e0       	ldi	r20, 0x00	; 0
    5416:	50 e0       	ldi	r21, 0x00	; 0
    5418:	ba 01       	movw	r22, r20
    541a:	08 8f       	std	Y+24, r16	; 0x18
    541c:	19 8f       	std	Y+25, r17	; 0x19
    541e:	2a 8f       	std	Y+26, r18	; 0x1a
    5420:	3b 8f       	std	Y+27, r19	; 0x1b
    5422:	4c 8f       	std	Y+28, r20	; 0x1c
    5424:	5d 8f       	std	Y+29, r21	; 0x1d
    5426:	6e 8f       	std	Y+30, r22	; 0x1e
    5428:	7f 8f       	std	Y+31, r23	; 0x1f
    542a:	28 8c       	ldd	r2, Y+24	; 0x18
    542c:	39 8c       	ldd	r3, Y+25	; 0x19
    542e:	4a 8c       	ldd	r4, Y+26	; 0x1a
    5430:	5b 8c       	ldd	r5, Y+27	; 0x1b
    5432:	6c 8c       	ldd	r6, Y+28	; 0x1c
    5434:	7d 8c       	ldd	r7, Y+29	; 0x1d
    5436:	8e 8c       	ldd	r8, Y+30	; 0x1e
    5438:	9f 8c       	ldd	r9, Y+31	; 0x1f
    543a:	22 2d       	mov	r18, r2
    543c:	33 2d       	mov	r19, r3
    543e:	44 2d       	mov	r20, r4
    5440:	55 2d       	mov	r21, r5
    5442:	66 2d       	mov	r22, r6
    5444:	77 2d       	mov	r23, r7
    5446:	88 2d       	mov	r24, r8
    5448:	99 2d       	mov	r25, r9
    544a:	02 e0       	ldi	r16, 0x02	; 2
    544c:	ab d2       	rcall	.+1366   	; 0x59a4 <__ashldi3>
    544e:	a2 2e       	mov	r10, r18
    5450:	b3 2e       	mov	r11, r19
    5452:	c4 2e       	mov	r12, r20
    5454:	d5 2e       	mov	r13, r21
    5456:	e6 2e       	mov	r14, r22
    5458:	f7 2e       	mov	r15, r23
    545a:	08 2f       	mov	r16, r24
    545c:	19 2f       	mov	r17, r25
    545e:	2a 2c       	mov	r2, r10
    5460:	3b 2c       	mov	r3, r11
    5462:	4c 2c       	mov	r4, r12
    5464:	5d 2c       	mov	r5, r13
    5466:	6e 2c       	mov	r6, r14
    5468:	7f 2c       	mov	r7, r15
    546a:	80 2e       	mov	r8, r16
    546c:	91 2e       	mov	r9, r17
    546e:	22 2d       	mov	r18, r2
    5470:	33 2d       	mov	r19, r3
    5472:	44 2d       	mov	r20, r4
    5474:	55 2d       	mov	r21, r5
    5476:	66 2d       	mov	r22, r6
    5478:	77 2d       	mov	r23, r7
    547a:	88 2d       	mov	r24, r8
    547c:	99 2d       	mov	r25, r9
    547e:	05 e0       	ldi	r16, 0x05	; 5
    5480:	91 d2       	rcall	.+1314   	; 0x59a4 <__ashldi3>
    5482:	a2 2e       	mov	r10, r18
    5484:	b3 2e       	mov	r11, r19
    5486:	c4 2e       	mov	r12, r20
    5488:	d5 2e       	mov	r13, r21
    548a:	e6 2e       	mov	r14, r22
    548c:	f7 2e       	mov	r15, r23
    548e:	08 2f       	mov	r16, r24
    5490:	19 2f       	mov	r17, r25
    5492:	2a 2d       	mov	r18, r10
    5494:	3b 2d       	mov	r19, r11
    5496:	4c 2d       	mov	r20, r12
    5498:	5d 2d       	mov	r21, r13
    549a:	6e 2d       	mov	r22, r14
    549c:	7f 2d       	mov	r23, r15
    549e:	80 2f       	mov	r24, r16
    54a0:	91 2f       	mov	r25, r17
    54a2:	a2 2c       	mov	r10, r2
    54a4:	b3 2c       	mov	r11, r3
    54a6:	c4 2c       	mov	r12, r4
    54a8:	d5 2c       	mov	r13, r5
    54aa:	e6 2c       	mov	r14, r6
    54ac:	f7 2c       	mov	r15, r7
    54ae:	08 2d       	mov	r16, r8
    54b0:	19 2d       	mov	r17, r9
    54b2:	9a d2       	rcall	.+1332   	; 0x59e8 <__subdi3>
    54b4:	a2 2e       	mov	r10, r18
    54b6:	b3 2e       	mov	r11, r19
    54b8:	c4 2e       	mov	r12, r20
    54ba:	d5 2e       	mov	r13, r21
    54bc:	e6 2e       	mov	r14, r22
    54be:	f7 2e       	mov	r15, r23
    54c0:	08 2f       	mov	r16, r24
    54c2:	19 2f       	mov	r17, r25
    54c4:	2a 2d       	mov	r18, r10
    54c6:	3b 2d       	mov	r19, r11
    54c8:	4c 2d       	mov	r20, r12
    54ca:	5d 2d       	mov	r21, r13
    54cc:	6e 2d       	mov	r22, r14
    54ce:	7f 2d       	mov	r23, r15
    54d0:	80 2f       	mov	r24, r16
    54d2:	91 2f       	mov	r25, r17
    54d4:	a8 8c       	ldd	r10, Y+24	; 0x18
    54d6:	b9 8c       	ldd	r11, Y+25	; 0x19
    54d8:	ca 8c       	ldd	r12, Y+26	; 0x1a
    54da:	db 8c       	ldd	r13, Y+27	; 0x1b
    54dc:	ec 8c       	ldd	r14, Y+28	; 0x1c
    54de:	fd 8c       	ldd	r15, Y+29	; 0x1d
    54e0:	0e 8d       	ldd	r16, Y+30	; 0x1e
    54e2:	1f 8d       	ldd	r17, Y+31	; 0x1f
    54e4:	78 d2       	rcall	.+1264   	; 0x59d6 <__adddi3>
    54e6:	a2 2e       	mov	r10, r18
    54e8:	b3 2e       	mov	r11, r19
    54ea:	c4 2e       	mov	r12, r20
    54ec:	d5 2e       	mov	r13, r21
    54ee:	e6 2e       	mov	r14, r22
    54f0:	f7 2e       	mov	r15, r23
    54f2:	08 2f       	mov	r16, r24
    54f4:	19 2f       	mov	r17, r25
    54f6:	2a 2d       	mov	r18, r10
    54f8:	3b 2d       	mov	r19, r11
    54fa:	4c 2d       	mov	r20, r12
    54fc:	5d 2d       	mov	r21, r13
    54fe:	6e 2d       	mov	r22, r14
    5500:	7f 2d       	mov	r23, r15
    5502:	80 2f       	mov	r24, r16
    5504:	91 2f       	mov	r25, r17
    5506:	03 e0       	ldi	r16, 0x03	; 3
    5508:	4d d2       	rcall	.+1178   	; 0x59a4 <__ashldi3>
    550a:	22 2e       	mov	r2, r18
    550c:	33 2e       	mov	r3, r19
    550e:	44 2e       	mov	r4, r20
    5510:	55 2e       	mov	r5, r21
    5512:	66 2e       	mov	r6, r22
    5514:	77 2e       	mov	r7, r23
    5516:	88 2e       	mov	r8, r24
    5518:	99 2e       	mov	r9, r25
    551a:	a2 2c       	mov	r10, r2
    551c:	b3 2c       	mov	r11, r3
    551e:	c4 2c       	mov	r12, r4
    5520:	d5 2c       	mov	r13, r5
    5522:	e6 2c       	mov	r14, r6
    5524:	f7 2c       	mov	r15, r7
    5526:	08 2d       	mov	r16, r8
    5528:	19 2d       	mov	r17, r9
    552a:	2a 2c       	mov	r2, r10
    552c:	3b 2c       	mov	r3, r11
    552e:	4c 2c       	mov	r4, r12
    5530:	5d 2c       	mov	r5, r13
    5532:	6e 2c       	mov	r6, r14
    5534:	7f 2c       	mov	r7, r15
    5536:	80 2e       	mov	r8, r16
    5538:	91 2e       	mov	r9, r17
    553a:	0f 2e       	mov	r0, r31
    553c:	f6 e0       	ldi	r31, 0x06	; 6
    553e:	af 2e       	mov	r10, r31
    5540:	f0 2d       	mov	r31, r0
    5542:	b1 2c       	mov	r11, r1
    5544:	c1 2c       	mov	r12, r1
    5546:	d1 2c       	mov	r13, r1
    5548:	e1 2c       	mov	r14, r1
    554a:	f1 2c       	mov	r15, r1
    554c:	00 e0       	ldi	r16, 0x00	; 0
    554e:	10 e0       	ldi	r17, 0x00	; 0
    5550:	22 2d       	mov	r18, r2
    5552:	33 2d       	mov	r19, r3
    5554:	44 2d       	mov	r20, r4
    5556:	55 2d       	mov	r21, r5
    5558:	66 2d       	mov	r22, r6
    555a:	77 2d       	mov	r23, r7
    555c:	88 2d       	mov	r24, r8
    555e:	99 2d       	mov	r25, r9
    5560:	c5 d1       	rcall	.+906    	; 0x58ec <__udivdi3>
    5562:	22 2e       	mov	r2, r18
    5564:	33 2e       	mov	r3, r19
    5566:	44 2e       	mov	r4, r20
    5568:	55 2e       	mov	r5, r21
    556a:	66 2e       	mov	r6, r22
    556c:	77 2e       	mov	r7, r23
    556e:	88 2e       	mov	r8, r24
    5570:	99 2e       	mov	r9, r25
    5572:	a2 2c       	mov	r10, r2
    5574:	b3 2c       	mov	r11, r3
    5576:	c4 2c       	mov	r12, r4
    5578:	d5 2c       	mov	r13, r5
    557a:	e6 2c       	mov	r14, r6
    557c:	f7 2c       	mov	r15, r7
    557e:	08 2d       	mov	r16, r8
    5580:	19 2d       	mov	r17, r9
    5582:	2a 2d       	mov	r18, r10
    5584:	3b 2d       	mov	r19, r11
    5586:	4c 2d       	mov	r20, r12
    5588:	5d 2d       	mov	r21, r13
    558a:	6e 2d       	mov	r22, r14
    558c:	7f 2d       	mov	r23, r15
    558e:	80 2f       	mov	r24, r16
    5590:	91 2f       	mov	r25, r17
    5592:	29 51       	subi	r18, 0x19	; 25
    5594:	3c 4f       	sbci	r19, 0xFC	; 252
    5596:	4f 4f       	sbci	r20, 0xFF	; 255
    5598:	5f 4f       	sbci	r21, 0xFF	; 255
    559a:	6f 4f       	sbci	r22, 0xFF	; 255
    559c:	7f 4f       	sbci	r23, 0xFF	; 255
    559e:	8f 4f       	sbci	r24, 0xFF	; 255
    55a0:	9f 4f       	sbci	r25, 0xFF	; 255
    55a2:	a2 2e       	mov	r10, r18
    55a4:	b3 2e       	mov	r11, r19
    55a6:	c4 2e       	mov	r12, r20
    55a8:	d5 2e       	mov	r13, r21
    55aa:	e6 2e       	mov	r14, r22
    55ac:	f7 2e       	mov	r15, r23
    55ae:	08 2f       	mov	r16, r24
    55b0:	19 2f       	mov	r17, r25
    55b2:	2a 2d       	mov	r18, r10
    55b4:	3b 2d       	mov	r19, r11
    55b6:	4c 2d       	mov	r20, r12
    55b8:	5d 2d       	mov	r21, r13
    55ba:	6e 2d       	mov	r22, r14
    55bc:	7f 2d       	mov	r23, r15
    55be:	80 2f       	mov	r24, r16
    55c0:	91 2f       	mov	r25, r17
    55c2:	d1 d0       	rcall	.+418    	; 0x5766 <__floatundisf>
    55c4:	dc 01       	movw	r26, r24
    55c6:	cb 01       	movw	r24, r22
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	4a e7       	ldi	r20, 0x7A	; 122
    55ce:	54 e4       	ldi	r21, 0x44	; 68
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	26 d0       	rcall	.+76     	; 0x5622 <__divsf3>
    55d6:	dc 01       	movw	r26, r24
    55d8:	cb 01       	movw	r24, r22
    55da:	bc 01       	movw	r22, r24
    55dc:	cd 01       	movw	r24, r26
    55de:	8e d0       	rcall	.+284    	; 0x56fc <__fixunssfdi>
    55e0:	a2 2e       	mov	r10, r18
    55e2:	b3 2e       	mov	r11, r19
    55e4:	c4 2e       	mov	r12, r20
    55e6:	d5 2e       	mov	r13, r21
    55e8:	e6 2e       	mov	r14, r22
    55ea:	f7 2e       	mov	r15, r23
    55ec:	08 2f       	mov	r16, r24
    55ee:	19 2f       	mov	r17, r25
    55f0:	d6 01       	movw	r26, r12
    55f2:	c5 01       	movw	r24, r10
    55f4:	bc 01       	movw	r22, r24
    55f6:	cd 01       	movw	r24, r26
    55f8:	dd dc       	rcall	.-1606   	; 0x4fb4 <__portable_avr_delay_cycles>
    55fa:	d8 ce       	rjmp	.-592    	; 0x53ac <main+0x3e2>
    55fc:	89 81       	ldd	r24, Y+1	; 0x01
    55fe:	88 2f       	mov	r24, r24
    5600:	90 e0       	ldi	r25, 0x00	; 0
		//printf("HELEHLALH\n");
		
		}
		else printf("Calibstat %i\n",data);
    5602:	29 2f       	mov	r18, r25
    5604:	2f 93       	push	r18
    5606:	8f 93       	push	r24
    5608:	8c e4       	ldi	r24, 0x4C	; 76
    560a:	90 e2       	ldi	r25, 0x20	; 32
    560c:	89 2f       	mov	r24, r25
    560e:	8f 93       	push	r24
    5610:	8c e4       	ldi	r24, 0x4C	; 76
    5612:	90 e2       	ldi	r25, 0x20	; 32
    5614:	8f 93       	push	r24
    5616:	5c d3       	rcall	.+1720   	; 0x5cd0 <printf>
    5618:	0f 90       	pop	r0
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	c5 ce       	rjmp	.-630    	; 0x53ac <main+0x3e2>

00005622 <__divsf3>:
    5622:	0c d0       	rcall	.+24     	; 0x563c <__divsf3x>
    5624:	05 c1       	rjmp	.+522    	; 0x5830 <__fp_round>
    5626:	fd d0       	rcall	.+506    	; 0x5822 <__fp_pscB>
							
	}
    5628:	40 f0       	brcs	.+16     	; 0x563a <__divsf3+0x18>
    562a:	f4 d0       	rcall	.+488    	; 0x5814 <__fp_pscA>
    562c:	30 f0       	brcs	.+12     	; 0x563a <__divsf3+0x18>
    562e:	21 f4       	brne	.+8      	; 0x5638 <__divsf3+0x16>
    5630:	5f 3f       	cpi	r21, 0xFF	; 255
    5632:	19 f0       	breq	.+6      	; 0x563a <__divsf3+0x18>
    5634:	d6 c0       	rjmp	.+428    	; 0x57e2 <__fp_inf>
    5636:	51 11       	cpse	r21, r1
    5638:	2f c1       	rjmp	.+606    	; 0x5898 <__fp_szero>
    563a:	d9 c0       	rjmp	.+434    	; 0x57ee <__fp_nan>

0000563c <__divsf3x>:
    563c:	0a d1       	rcall	.+532    	; 0x5852 <__fp_split3>
    563e:	98 f3       	brcs	.-26     	; 0x5626 <__divsf3+0x4>

00005640 <__divsf3_pse>:
    5640:	99 23       	and	r25, r25
    5642:	c9 f3       	breq	.-14     	; 0x5636 <__divsf3+0x14>
    5644:	55 23       	and	r21, r21
    5646:	b1 f3       	breq	.-20     	; 0x5634 <__divsf3+0x12>
    5648:	95 1b       	sub	r25, r21
    564a:	55 0b       	sbc	r21, r21
    564c:	bb 27       	eor	r27, r27
    564e:	aa 27       	eor	r26, r26
    5650:	62 17       	cp	r22, r18
    5652:	73 07       	cpc	r23, r19
    5654:	84 07       	cpc	r24, r20
    5656:	38 f0       	brcs	.+14     	; 0x5666 <__divsf3_pse+0x26>
    5658:	9f 5f       	subi	r25, 0xFF	; 255
    565a:	5f 4f       	sbci	r21, 0xFF	; 255
    565c:	22 0f       	add	r18, r18
    565e:	33 1f       	adc	r19, r19
    5660:	44 1f       	adc	r20, r20
    5662:	aa 1f       	adc	r26, r26
    5664:	a9 f3       	breq	.-22     	; 0x5650 <__divsf3_pse+0x10>
    5666:	33 d0       	rcall	.+102    	; 0x56ce <__divsf3_pse+0x8e>
    5668:	0e 2e       	mov	r0, r30
    566a:	3a f0       	brmi	.+14     	; 0x567a <__divsf3_pse+0x3a>
    566c:	e0 e8       	ldi	r30, 0x80	; 128
    566e:	30 d0       	rcall	.+96     	; 0x56d0 <__divsf3_pse+0x90>
    5670:	91 50       	subi	r25, 0x01	; 1
    5672:	50 40       	sbci	r21, 0x00	; 0
    5674:	e6 95       	lsr	r30
    5676:	00 1c       	adc	r0, r0
    5678:	ca f7       	brpl	.-14     	; 0x566c <__divsf3_pse+0x2c>
    567a:	29 d0       	rcall	.+82     	; 0x56ce <__divsf3_pse+0x8e>
    567c:	fe 2f       	mov	r31, r30
    567e:	27 d0       	rcall	.+78     	; 0x56ce <__divsf3_pse+0x8e>
    5680:	66 0f       	add	r22, r22
    5682:	77 1f       	adc	r23, r23
    5684:	88 1f       	adc	r24, r24
    5686:	bb 1f       	adc	r27, r27
    5688:	26 17       	cp	r18, r22
    568a:	37 07       	cpc	r19, r23
    568c:	48 07       	cpc	r20, r24
    568e:	ab 07       	cpc	r26, r27
    5690:	b0 e8       	ldi	r27, 0x80	; 128
    5692:	09 f0       	breq	.+2      	; 0x5696 <__divsf3_pse+0x56>
    5694:	bb 0b       	sbc	r27, r27
    5696:	80 2d       	mov	r24, r0
    5698:	bf 01       	movw	r22, r30
    569a:	ff 27       	eor	r31, r31
    569c:	93 58       	subi	r25, 0x83	; 131
    569e:	5f 4f       	sbci	r21, 0xFF	; 255
    56a0:	2a f0       	brmi	.+10     	; 0x56ac <__divsf3_pse+0x6c>
    56a2:	9e 3f       	cpi	r25, 0xFE	; 254
    56a4:	51 05       	cpc	r21, r1
    56a6:	68 f0       	brcs	.+26     	; 0x56c2 <__divsf3_pse+0x82>
    56a8:	9c c0       	rjmp	.+312    	; 0x57e2 <__fp_inf>
    56aa:	f6 c0       	rjmp	.+492    	; 0x5898 <__fp_szero>
    56ac:	5f 3f       	cpi	r21, 0xFF	; 255
    56ae:	ec f3       	brlt	.-6      	; 0x56aa <__divsf3_pse+0x6a>
    56b0:	98 3e       	cpi	r25, 0xE8	; 232
    56b2:	dc f3       	brlt	.-10     	; 0x56aa <__divsf3_pse+0x6a>
    56b4:	86 95       	lsr	r24
    56b6:	77 95       	ror	r23
    56b8:	67 95       	ror	r22
    56ba:	b7 95       	ror	r27
    56bc:	f7 95       	ror	r31
    56be:	9f 5f       	subi	r25, 0xFF	; 255
    56c0:	c9 f7       	brne	.-14     	; 0x56b4 <__divsf3_pse+0x74>
    56c2:	88 0f       	add	r24, r24
    56c4:	91 1d       	adc	r25, r1
    56c6:	96 95       	lsr	r25
    56c8:	87 95       	ror	r24
    56ca:	97 f9       	bld	r25, 7
    56cc:	08 95       	ret
    56ce:	e1 e0       	ldi	r30, 0x01	; 1
    56d0:	66 0f       	add	r22, r22
    56d2:	77 1f       	adc	r23, r23
    56d4:	88 1f       	adc	r24, r24
    56d6:	bb 1f       	adc	r27, r27
    56d8:	62 17       	cp	r22, r18
    56da:	73 07       	cpc	r23, r19
    56dc:	84 07       	cpc	r24, r20
    56de:	ba 07       	cpc	r27, r26
    56e0:	20 f0       	brcs	.+8      	; 0x56ea <__divsf3_pse+0xaa>
    56e2:	62 1b       	sub	r22, r18
    56e4:	73 0b       	sbc	r23, r19
    56e6:	84 0b       	sbc	r24, r20
    56e8:	ba 0b       	sbc	r27, r26
    56ea:	ee 1f       	adc	r30, r30
    56ec:	88 f7       	brcc	.-30     	; 0x56d0 <__divsf3_pse+0x90>
    56ee:	e0 95       	com	r30
    56f0:	08 95       	ret

000056f2 <__fixsfdi>:
    56f2:	be e3       	ldi	r27, 0x3E	; 62
    56f4:	04 d0       	rcall	.+8      	; 0x56fe <__fixunssfdi+0x2>
    56f6:	08 f4       	brcc	.+2      	; 0x56fa <__fixsfdi+0x8>
    56f8:	90 e8       	ldi	r25, 0x80	; 128
    56fa:	08 95       	ret

000056fc <__fixunssfdi>:
    56fc:	bf e3       	ldi	r27, 0x3F	; 63
    56fe:	22 27       	eor	r18, r18
    5700:	33 27       	eor	r19, r19
    5702:	a9 01       	movw	r20, r18
    5704:	ae d0       	rcall	.+348    	; 0x5862 <__fp_splitA>
    5706:	58 f1       	brcs	.+86     	; 0x575e <__fixunssfdi+0x62>
    5708:	9f 57       	subi	r25, 0x7F	; 127
    570a:	40 f1       	brcs	.+80     	; 0x575c <__fixunssfdi+0x60>
    570c:	b9 17       	cp	r27, r25
    570e:	38 f1       	brcs	.+78     	; 0x575e <__fixunssfdi+0x62>
    5710:	bf e3       	ldi	r27, 0x3F	; 63
    5712:	b9 1b       	sub	r27, r25
    5714:	99 27       	eor	r25, r25
    5716:	b8 50       	subi	r27, 0x08	; 8
    5718:	3a f4       	brpl	.+14     	; 0x5728 <__fixunssfdi+0x2c>
    571a:	66 0f       	add	r22, r22
    571c:	77 1f       	adc	r23, r23
    571e:	88 1f       	adc	r24, r24
    5720:	99 1f       	adc	r25, r25
    5722:	b3 95       	inc	r27
    5724:	d2 f3       	brmi	.-12     	; 0x571a <__fixunssfdi+0x1e>
    5726:	16 c0       	rjmp	.+44     	; 0x5754 <__fixunssfdi+0x58>
    5728:	b8 50       	subi	r27, 0x08	; 8
    572a:	4a f0       	brmi	.+18     	; 0x573e <__fixunssfdi+0x42>
    572c:	23 2f       	mov	r18, r19
    572e:	34 2f       	mov	r19, r20
    5730:	45 2f       	mov	r20, r21
    5732:	56 2f       	mov	r21, r22
    5734:	67 2f       	mov	r22, r23
    5736:	78 2f       	mov	r23, r24
    5738:	88 27       	eor	r24, r24
    573a:	b8 50       	subi	r27, 0x08	; 8
    573c:	ba f7       	brpl	.-18     	; 0x572c <__fixunssfdi+0x30>
    573e:	b8 5f       	subi	r27, 0xF8	; 248
    5740:	49 f0       	breq	.+18     	; 0x5754 <__fixunssfdi+0x58>
    5742:	86 95       	lsr	r24
    5744:	77 95       	ror	r23
    5746:	67 95       	ror	r22
    5748:	57 95       	ror	r21
    574a:	47 95       	ror	r20
    574c:	37 95       	ror	r19
    574e:	27 95       	ror	r18
    5750:	ba 95       	dec	r27
    5752:	b9 f7       	brne	.-18     	; 0x5742 <__fixunssfdi+0x46>
    5754:	0e f4       	brtc	.+2      	; 0x5758 <__fixunssfdi+0x5c>
    5756:	4e d0       	rcall	.+156    	; 0x57f4 <__fp_negdi>
    5758:	88 94       	clc
    575a:	08 95       	ret
    575c:	88 94       	clc
    575e:	60 e0       	ldi	r22, 0x00	; 0
    5760:	70 e0       	ldi	r23, 0x00	; 0
    5762:	cb 01       	movw	r24, r22
    5764:	08 95       	ret

00005766 <__floatundisf>:
    5766:	e8 94       	clt

00005768 <__fp_di2sf>:
    5768:	f9 2f       	mov	r31, r25
    576a:	96 eb       	ldi	r25, 0xB6	; 182
    576c:	ff 23       	and	r31, r31
    576e:	81 f0       	breq	.+32     	; 0x5790 <__fp_di2sf+0x28>
    5770:	12 16       	cp	r1, r18
    5772:	13 06       	cpc	r1, r19
    5774:	14 06       	cpc	r1, r20
    5776:	44 0b       	sbc	r20, r20
    5778:	93 95       	inc	r25
    577a:	f6 95       	lsr	r31
    577c:	87 95       	ror	r24
    577e:	77 95       	ror	r23
    5780:	67 95       	ror	r22
    5782:	57 95       	ror	r21
    5784:	40 40       	sbci	r20, 0x00	; 0
    5786:	ff 23       	and	r31, r31
    5788:	b9 f7       	brne	.-18     	; 0x5778 <__fp_di2sf+0x10>
    578a:	1b c0       	rjmp	.+54     	; 0x57c2 <__fp_di2sf+0x5a>
    578c:	99 27       	eor	r25, r25
    578e:	08 95       	ret
    5790:	88 23       	and	r24, r24
    5792:	51 f4       	brne	.+20     	; 0x57a8 <__fp_di2sf+0x40>
    5794:	98 50       	subi	r25, 0x08	; 8
    5796:	d2 f7       	brpl	.-12     	; 0x578c <__fp_di2sf+0x24>
    5798:	87 2b       	or	r24, r23
    579a:	76 2f       	mov	r23, r22
    579c:	65 2f       	mov	r22, r21
    579e:	54 2f       	mov	r21, r20
    57a0:	43 2f       	mov	r20, r19
    57a2:	32 2f       	mov	r19, r18
    57a4:	20 e0       	ldi	r18, 0x00	; 0
    57a6:	b1 f3       	breq	.-20     	; 0x5794 <__fp_di2sf+0x2c>
    57a8:	12 16       	cp	r1, r18
    57aa:	13 06       	cpc	r1, r19
    57ac:	14 06       	cpc	r1, r20
    57ae:	44 0b       	sbc	r20, r20
    57b0:	88 23       	and	r24, r24
    57b2:	3a f0       	brmi	.+14     	; 0x57c2 <__fp_di2sf+0x5a>
    57b4:	9a 95       	dec	r25
    57b6:	44 0f       	add	r20, r20
    57b8:	55 1f       	adc	r21, r21
    57ba:	66 1f       	adc	r22, r22
    57bc:	77 1f       	adc	r23, r23
    57be:	88 1f       	adc	r24, r24
    57c0:	ca f7       	brpl	.-14     	; 0x57b4 <__fp_di2sf+0x4c>
    57c2:	55 23       	and	r21, r21
    57c4:	4a f4       	brpl	.+18     	; 0x57d8 <__fp_di2sf+0x70>
    57c6:	44 0f       	add	r20, r20
    57c8:	55 1f       	adc	r21, r21
    57ca:	11 f4       	brne	.+4      	; 0x57d0 <__fp_di2sf+0x68>
    57cc:	60 ff       	sbrs	r22, 0
    57ce:	04 c0       	rjmp	.+8      	; 0x57d8 <__fp_di2sf+0x70>
    57d0:	6f 5f       	subi	r22, 0xFF	; 255
    57d2:	7f 4f       	sbci	r23, 0xFF	; 255
    57d4:	8f 4f       	sbci	r24, 0xFF	; 255
    57d6:	9f 4f       	sbci	r25, 0xFF	; 255
    57d8:	88 0f       	add	r24, r24
    57da:	96 95       	lsr	r25
    57dc:	87 95       	ror	r24
    57de:	97 f9       	bld	r25, 7
    57e0:	08 95       	ret

000057e2 <__fp_inf>:
    57e2:	97 f9       	bld	r25, 7
    57e4:	9f 67       	ori	r25, 0x7F	; 127
    57e6:	80 e8       	ldi	r24, 0x80	; 128
    57e8:	70 e0       	ldi	r23, 0x00	; 0
    57ea:	60 e0       	ldi	r22, 0x00	; 0
    57ec:	08 95       	ret

000057ee <__fp_nan>:
    57ee:	9f ef       	ldi	r25, 0xFF	; 255
    57f0:	80 ec       	ldi	r24, 0xC0	; 192
    57f2:	08 95       	ret

000057f4 <__fp_negdi>:
    57f4:	90 95       	com	r25
    57f6:	80 95       	com	r24
    57f8:	70 95       	com	r23
    57fa:	60 95       	com	r22
    57fc:	50 95       	com	r21
    57fe:	40 95       	com	r20
    5800:	30 95       	com	r19
    5802:	21 95       	neg	r18
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
    5806:	4f 4f       	sbci	r20, 0xFF	; 255
    5808:	5f 4f       	sbci	r21, 0xFF	; 255
    580a:	6f 4f       	sbci	r22, 0xFF	; 255
    580c:	7f 4f       	sbci	r23, 0xFF	; 255
    580e:	8f 4f       	sbci	r24, 0xFF	; 255
    5810:	9f 4f       	sbci	r25, 0xFF	; 255
    5812:	08 95       	ret

00005814 <__fp_pscA>:
    5814:	00 24       	eor	r0, r0
    5816:	0a 94       	dec	r0
    5818:	16 16       	cp	r1, r22
    581a:	17 06       	cpc	r1, r23
    581c:	18 06       	cpc	r1, r24
    581e:	09 06       	cpc	r0, r25
    5820:	08 95       	ret

00005822 <__fp_pscB>:
    5822:	00 24       	eor	r0, r0
    5824:	0a 94       	dec	r0
    5826:	12 16       	cp	r1, r18
    5828:	13 06       	cpc	r1, r19
    582a:	14 06       	cpc	r1, r20
    582c:	05 06       	cpc	r0, r21
    582e:	08 95       	ret

00005830 <__fp_round>:
    5830:	09 2e       	mov	r0, r25
    5832:	03 94       	inc	r0
    5834:	00 0c       	add	r0, r0
    5836:	11 f4       	brne	.+4      	; 0x583c <__fp_round+0xc>
    5838:	88 23       	and	r24, r24
    583a:	52 f0       	brmi	.+20     	; 0x5850 <__fp_round+0x20>
    583c:	bb 0f       	add	r27, r27
    583e:	40 f4       	brcc	.+16     	; 0x5850 <__fp_round+0x20>
    5840:	bf 2b       	or	r27, r31
    5842:	11 f4       	brne	.+4      	; 0x5848 <__fp_round+0x18>
    5844:	60 ff       	sbrs	r22, 0
    5846:	04 c0       	rjmp	.+8      	; 0x5850 <__fp_round+0x20>
    5848:	6f 5f       	subi	r22, 0xFF	; 255
    584a:	7f 4f       	sbci	r23, 0xFF	; 255
    584c:	8f 4f       	sbci	r24, 0xFF	; 255
    584e:	9f 4f       	sbci	r25, 0xFF	; 255
    5850:	08 95       	ret

00005852 <__fp_split3>:
    5852:	57 fd       	sbrc	r21, 7
    5854:	90 58       	subi	r25, 0x80	; 128
    5856:	44 0f       	add	r20, r20
    5858:	55 1f       	adc	r21, r21
    585a:	59 f0       	breq	.+22     	; 0x5872 <__fp_splitA+0x10>
    585c:	5f 3f       	cpi	r21, 0xFF	; 255
    585e:	71 f0       	breq	.+28     	; 0x587c <__fp_splitA+0x1a>
    5860:	47 95       	ror	r20

00005862 <__fp_splitA>:
    5862:	88 0f       	add	r24, r24
    5864:	97 fb       	bst	r25, 7
    5866:	99 1f       	adc	r25, r25
    5868:	61 f0       	breq	.+24     	; 0x5882 <__fp_splitA+0x20>
    586a:	9f 3f       	cpi	r25, 0xFF	; 255
    586c:	79 f0       	breq	.+30     	; 0x588c <__fp_splitA+0x2a>
    586e:	87 95       	ror	r24
    5870:	08 95       	ret
    5872:	12 16       	cp	r1, r18
    5874:	13 06       	cpc	r1, r19
    5876:	14 06       	cpc	r1, r20
    5878:	55 1f       	adc	r21, r21
    587a:	f2 cf       	rjmp	.-28     	; 0x5860 <__fp_split3+0xe>
    587c:	46 95       	lsr	r20
    587e:	f1 df       	rcall	.-30     	; 0x5862 <__fp_splitA>
    5880:	08 c0       	rjmp	.+16     	; 0x5892 <__fp_splitA+0x30>
    5882:	16 16       	cp	r1, r22
    5884:	17 06       	cpc	r1, r23
    5886:	18 06       	cpc	r1, r24
    5888:	99 1f       	adc	r25, r25
    588a:	f1 cf       	rjmp	.-30     	; 0x586e <__fp_splitA+0xc>
    588c:	86 95       	lsr	r24
    588e:	71 05       	cpc	r23, r1
    5890:	61 05       	cpc	r22, r1
    5892:	08 94       	sec
    5894:	08 95       	ret

00005896 <__fp_zero>:
    5896:	e8 94       	clt

00005898 <__fp_szero>:
    5898:	bb 27       	eor	r27, r27
    589a:	66 27       	eor	r22, r22
    589c:	77 27       	eor	r23, r23
    589e:	cb 01       	movw	r24, r22
    58a0:	97 f9       	bld	r25, 7
    58a2:	08 95       	ret

000058a4 <__udivmodsi4>:
    58a4:	a1 e2       	ldi	r26, 0x21	; 33
    58a6:	1a 2e       	mov	r1, r26
    58a8:	aa 1b       	sub	r26, r26
    58aa:	bb 1b       	sub	r27, r27
    58ac:	fd 01       	movw	r30, r26
    58ae:	0d c0       	rjmp	.+26     	; 0x58ca <__udivmodsi4_ep>

000058b0 <__udivmodsi4_loop>:
    58b0:	aa 1f       	adc	r26, r26
    58b2:	bb 1f       	adc	r27, r27
    58b4:	ee 1f       	adc	r30, r30
    58b6:	ff 1f       	adc	r31, r31
    58b8:	a2 17       	cp	r26, r18
    58ba:	b3 07       	cpc	r27, r19
    58bc:	e4 07       	cpc	r30, r20
    58be:	f5 07       	cpc	r31, r21
    58c0:	20 f0       	brcs	.+8      	; 0x58ca <__udivmodsi4_ep>
    58c2:	a2 1b       	sub	r26, r18
    58c4:	b3 0b       	sbc	r27, r19
    58c6:	e4 0b       	sbc	r30, r20
    58c8:	f5 0b       	sbc	r31, r21

000058ca <__udivmodsi4_ep>:
    58ca:	66 1f       	adc	r22, r22
    58cc:	77 1f       	adc	r23, r23
    58ce:	88 1f       	adc	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	1a 94       	dec	r1
    58d4:	69 f7       	brne	.-38     	; 0x58b0 <__udivmodsi4_loop>
    58d6:	60 95       	com	r22
    58d8:	70 95       	com	r23
    58da:	80 95       	com	r24
    58dc:	90 95       	com	r25
    58de:	9b 01       	movw	r18, r22
    58e0:	ac 01       	movw	r20, r24
    58e2:	bd 01       	movw	r22, r26
    58e4:	cf 01       	movw	r24, r30
    58e6:	08 95       	ret

000058e8 <__umoddi3>:
    58e8:	68 94       	set
    58ea:	01 c0       	rjmp	.+2      	; 0x58ee <__udivdi3_umoddi3>

000058ec <__udivdi3>:
    58ec:	e8 94       	clt

000058ee <__udivdi3_umoddi3>:
    58ee:	8f 92       	push	r8
    58f0:	9f 92       	push	r9
    58f2:	cf 93       	push	r28
    58f4:	df 93       	push	r29
    58f6:	05 d0       	rcall	.+10     	; 0x5902 <__udivmod64>
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	9f 90       	pop	r9
    58fe:	8f 90       	pop	r8
    5900:	08 95       	ret

00005902 <__udivmod64>:
    5902:	88 24       	eor	r8, r8
    5904:	99 24       	eor	r9, r9
    5906:	f4 01       	movw	r30, r8
    5908:	e4 01       	movw	r28, r8
    590a:	b0 e4       	ldi	r27, 0x40	; 64
    590c:	9f 93       	push	r25
    590e:	aa 27       	eor	r26, r26
    5910:	9a 15       	cp	r25, r10
    5912:	8b 04       	cpc	r8, r11
    5914:	9c 04       	cpc	r9, r12
    5916:	ed 05       	cpc	r30, r13
    5918:	fe 05       	cpc	r31, r14
    591a:	cf 05       	cpc	r28, r15
    591c:	d0 07       	cpc	r29, r16
    591e:	a1 07       	cpc	r26, r17
    5920:	98 f4       	brcc	.+38     	; 0x5948 <__udivmod64+0x46>
    5922:	ad 2f       	mov	r26, r29
    5924:	dc 2f       	mov	r29, r28
    5926:	cf 2f       	mov	r28, r31
    5928:	fe 2f       	mov	r31, r30
    592a:	e9 2d       	mov	r30, r9
    592c:	98 2c       	mov	r9, r8
    592e:	89 2e       	mov	r8, r25
    5930:	98 2f       	mov	r25, r24
    5932:	87 2f       	mov	r24, r23
    5934:	76 2f       	mov	r23, r22
    5936:	65 2f       	mov	r22, r21
    5938:	54 2f       	mov	r21, r20
    593a:	43 2f       	mov	r20, r19
    593c:	32 2f       	mov	r19, r18
    593e:	22 27       	eor	r18, r18
    5940:	b8 50       	subi	r27, 0x08	; 8
    5942:	31 f7       	brne	.-52     	; 0x5910 <__udivmod64+0xe>
    5944:	bf 91       	pop	r27
    5946:	27 c0       	rjmp	.+78     	; 0x5996 <__udivmod64+0x94>
    5948:	1b 2e       	mov	r1, r27
    594a:	bf 91       	pop	r27
    594c:	bb 27       	eor	r27, r27
    594e:	22 0f       	add	r18, r18
    5950:	33 1f       	adc	r19, r19
    5952:	44 1f       	adc	r20, r20
    5954:	55 1f       	adc	r21, r21
    5956:	66 1f       	adc	r22, r22
    5958:	77 1f       	adc	r23, r23
    595a:	88 1f       	adc	r24, r24
    595c:	99 1f       	adc	r25, r25
    595e:	88 1c       	adc	r8, r8
    5960:	99 1c       	adc	r9, r9
    5962:	ee 1f       	adc	r30, r30
    5964:	ff 1f       	adc	r31, r31
    5966:	cc 1f       	adc	r28, r28
    5968:	dd 1f       	adc	r29, r29
    596a:	aa 1f       	adc	r26, r26
    596c:	bb 1f       	adc	r27, r27
    596e:	8a 14       	cp	r8, r10
    5970:	9b 04       	cpc	r9, r11
    5972:	ec 05       	cpc	r30, r12
    5974:	fd 05       	cpc	r31, r13
    5976:	ce 05       	cpc	r28, r14
    5978:	df 05       	cpc	r29, r15
    597a:	a0 07       	cpc	r26, r16
    597c:	b1 07       	cpc	r27, r17
    597e:	48 f0       	brcs	.+18     	; 0x5992 <__udivmod64+0x90>
    5980:	8a 18       	sub	r8, r10
    5982:	9b 08       	sbc	r9, r11
    5984:	ec 09       	sbc	r30, r12
    5986:	fd 09       	sbc	r31, r13
    5988:	ce 09       	sbc	r28, r14
    598a:	df 09       	sbc	r29, r15
    598c:	a0 0b       	sbc	r26, r16
    598e:	b1 0b       	sbc	r27, r17
    5990:	21 60       	ori	r18, 0x01	; 1
    5992:	1a 94       	dec	r1
    5994:	e1 f6       	brne	.-72     	; 0x594e <__udivmod64+0x4c>
    5996:	2e f4       	brtc	.+10     	; 0x59a2 <__udivmod64+0xa0>
    5998:	94 01       	movw	r18, r8
    599a:	af 01       	movw	r20, r30
    599c:	be 01       	movw	r22, r28
    599e:	cd 01       	movw	r24, r26
    59a0:	00 0c       	add	r0, r0
    59a2:	08 95       	ret

000059a4 <__ashldi3>:
    59a4:	0f 93       	push	r16
    59a6:	08 30       	cpi	r16, 0x08	; 8
    59a8:	90 f0       	brcs	.+36     	; 0x59ce <__ashldi3+0x2a>
    59aa:	98 2f       	mov	r25, r24
    59ac:	87 2f       	mov	r24, r23
    59ae:	76 2f       	mov	r23, r22
    59b0:	65 2f       	mov	r22, r21
    59b2:	54 2f       	mov	r21, r20
    59b4:	43 2f       	mov	r20, r19
    59b6:	32 2f       	mov	r19, r18
    59b8:	22 27       	eor	r18, r18
    59ba:	08 50       	subi	r16, 0x08	; 8
    59bc:	f4 cf       	rjmp	.-24     	; 0x59a6 <__ashldi3+0x2>
    59be:	22 0f       	add	r18, r18
    59c0:	33 1f       	adc	r19, r19
    59c2:	44 1f       	adc	r20, r20
    59c4:	55 1f       	adc	r21, r21
    59c6:	66 1f       	adc	r22, r22
    59c8:	77 1f       	adc	r23, r23
    59ca:	88 1f       	adc	r24, r24
    59cc:	99 1f       	adc	r25, r25
    59ce:	0a 95       	dec	r16
    59d0:	b2 f7       	brpl	.-20     	; 0x59be <__ashldi3+0x1a>
    59d2:	0f 91       	pop	r16
    59d4:	08 95       	ret

000059d6 <__adddi3>:
    59d6:	2a 0d       	add	r18, r10
    59d8:	3b 1d       	adc	r19, r11
    59da:	4c 1d       	adc	r20, r12
    59dc:	5d 1d       	adc	r21, r13
    59de:	6e 1d       	adc	r22, r14
    59e0:	7f 1d       	adc	r23, r15
    59e2:	80 1f       	adc	r24, r16
    59e4:	91 1f       	adc	r25, r17
    59e6:	08 95       	ret

000059e8 <__subdi3>:
    59e8:	2a 19       	sub	r18, r10
    59ea:	3b 09       	sbc	r19, r11
    59ec:	4c 09       	sbc	r20, r12
    59ee:	5d 09       	sbc	r21, r13
    59f0:	6e 09       	sbc	r22, r14
    59f2:	7f 09       	sbc	r23, r15
    59f4:	80 0b       	sbc	r24, r16
    59f6:	91 0b       	sbc	r25, r17
    59f8:	08 95       	ret

000059fa <malloc>:
    59fa:	0f 93       	push	r16
    59fc:	1f 93       	push	r17
    59fe:	cf 93       	push	r28
    5a00:	df 93       	push	r29
    5a02:	82 30       	cpi	r24, 0x02	; 2
    5a04:	91 05       	cpc	r25, r1
    5a06:	10 f4       	brcc	.+4      	; 0x5a0c <malloc+0x12>
    5a08:	82 e0       	ldi	r24, 0x02	; 2
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <__flp>
    5a10:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <__flp+0x1>
    5a14:	20 e0       	ldi	r18, 0x00	; 0
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	a0 e0       	ldi	r26, 0x00	; 0
    5a1a:	b0 e0       	ldi	r27, 0x00	; 0
    5a1c:	30 97       	sbiw	r30, 0x00	; 0
    5a1e:	19 f1       	breq	.+70     	; 0x5a66 <malloc+0x6c>
    5a20:	40 81       	ld	r20, Z
    5a22:	51 81       	ldd	r21, Z+1	; 0x01
    5a24:	02 81       	ldd	r16, Z+2	; 0x02
    5a26:	13 81       	ldd	r17, Z+3	; 0x03
    5a28:	48 17       	cp	r20, r24
    5a2a:	59 07       	cpc	r21, r25
    5a2c:	c8 f0       	brcs	.+50     	; 0x5a60 <malloc+0x66>
    5a2e:	84 17       	cp	r24, r20
    5a30:	95 07       	cpc	r25, r21
    5a32:	69 f4       	brne	.+26     	; 0x5a4e <malloc+0x54>
    5a34:	10 97       	sbiw	r26, 0x00	; 0
    5a36:	31 f0       	breq	.+12     	; 0x5a44 <malloc+0x4a>
    5a38:	12 96       	adiw	r26, 0x02	; 2
    5a3a:	0c 93       	st	X, r16
    5a3c:	12 97       	sbiw	r26, 0x02	; 2
    5a3e:	13 96       	adiw	r26, 0x03	; 3
    5a40:	1c 93       	st	X, r17
    5a42:	27 c0       	rjmp	.+78     	; 0x5a92 <malloc+0x98>
    5a44:	00 93 d7 20 	sts	0x20D7, r16	; 0x8020d7 <__flp>
    5a48:	10 93 d8 20 	sts	0x20D8, r17	; 0x8020d8 <__flp+0x1>
    5a4c:	22 c0       	rjmp	.+68     	; 0x5a92 <malloc+0x98>
    5a4e:	21 15       	cp	r18, r1
    5a50:	31 05       	cpc	r19, r1
    5a52:	19 f0       	breq	.+6      	; 0x5a5a <malloc+0x60>
    5a54:	42 17       	cp	r20, r18
    5a56:	53 07       	cpc	r21, r19
    5a58:	18 f4       	brcc	.+6      	; 0x5a60 <malloc+0x66>
    5a5a:	9a 01       	movw	r18, r20
    5a5c:	bd 01       	movw	r22, r26
    5a5e:	ef 01       	movw	r28, r30
    5a60:	df 01       	movw	r26, r30
    5a62:	f8 01       	movw	r30, r16
    5a64:	db cf       	rjmp	.-74     	; 0x5a1c <malloc+0x22>
    5a66:	21 15       	cp	r18, r1
    5a68:	31 05       	cpc	r19, r1
    5a6a:	f9 f0       	breq	.+62     	; 0x5aaa <malloc+0xb0>
    5a6c:	28 1b       	sub	r18, r24
    5a6e:	39 0b       	sbc	r19, r25
    5a70:	24 30       	cpi	r18, 0x04	; 4
    5a72:	31 05       	cpc	r19, r1
    5a74:	80 f4       	brcc	.+32     	; 0x5a96 <malloc+0x9c>
    5a76:	8a 81       	ldd	r24, Y+2	; 0x02
    5a78:	9b 81       	ldd	r25, Y+3	; 0x03
    5a7a:	61 15       	cp	r22, r1
    5a7c:	71 05       	cpc	r23, r1
    5a7e:	21 f0       	breq	.+8      	; 0x5a88 <malloc+0x8e>
    5a80:	fb 01       	movw	r30, r22
    5a82:	82 83       	std	Z+2, r24	; 0x02
    5a84:	93 83       	std	Z+3, r25	; 0x03
    5a86:	04 c0       	rjmp	.+8      	; 0x5a90 <malloc+0x96>
    5a88:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <__flp>
    5a8c:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <__flp+0x1>
    5a90:	fe 01       	movw	r30, r28
    5a92:	32 96       	adiw	r30, 0x02	; 2
    5a94:	44 c0       	rjmp	.+136    	; 0x5b1e <malloc+0x124>
    5a96:	fe 01       	movw	r30, r28
    5a98:	e2 0f       	add	r30, r18
    5a9a:	f3 1f       	adc	r31, r19
    5a9c:	81 93       	st	Z+, r24
    5a9e:	91 93       	st	Z+, r25
    5aa0:	22 50       	subi	r18, 0x02	; 2
    5aa2:	31 09       	sbc	r19, r1
    5aa4:	28 83       	st	Y, r18
    5aa6:	39 83       	std	Y+1, r19	; 0x01
    5aa8:	3a c0       	rjmp	.+116    	; 0x5b1e <malloc+0x124>
    5aaa:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <__brkval>
    5aae:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <__brkval+0x1>
    5ab2:	23 2b       	or	r18, r19
    5ab4:	41 f4       	brne	.+16     	; 0x5ac6 <malloc+0xcc>
    5ab6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    5aba:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5abe:	20 93 d5 20 	sts	0x20D5, r18	; 0x8020d5 <__brkval>
    5ac2:	30 93 d6 20 	sts	0x20D6, r19	; 0x8020d6 <__brkval+0x1>
    5ac6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    5aca:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    5ace:	21 15       	cp	r18, r1
    5ad0:	31 05       	cpc	r19, r1
    5ad2:	41 f4       	brne	.+16     	; 0x5ae4 <malloc+0xea>
    5ad4:	2d b7       	in	r18, 0x3d	; 61
    5ad6:	3e b7       	in	r19, 0x3e	; 62
    5ad8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5adc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5ae0:	24 1b       	sub	r18, r20
    5ae2:	35 0b       	sbc	r19, r21
    5ae4:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <__brkval>
    5ae8:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <__brkval+0x1>
    5aec:	e2 17       	cp	r30, r18
    5aee:	f3 07       	cpc	r31, r19
    5af0:	a0 f4       	brcc	.+40     	; 0x5b1a <malloc+0x120>
    5af2:	2e 1b       	sub	r18, r30
    5af4:	3f 0b       	sbc	r19, r31
    5af6:	28 17       	cp	r18, r24
    5af8:	39 07       	cpc	r19, r25
    5afa:	78 f0       	brcs	.+30     	; 0x5b1a <malloc+0x120>
    5afc:	ac 01       	movw	r20, r24
    5afe:	4e 5f       	subi	r20, 0xFE	; 254
    5b00:	5f 4f       	sbci	r21, 0xFF	; 255
    5b02:	24 17       	cp	r18, r20
    5b04:	35 07       	cpc	r19, r21
    5b06:	48 f0       	brcs	.+18     	; 0x5b1a <malloc+0x120>
    5b08:	4e 0f       	add	r20, r30
    5b0a:	5f 1f       	adc	r21, r31
    5b0c:	40 93 d5 20 	sts	0x20D5, r20	; 0x8020d5 <__brkval>
    5b10:	50 93 d6 20 	sts	0x20D6, r21	; 0x8020d6 <__brkval+0x1>
    5b14:	81 93       	st	Z+, r24
    5b16:	91 93       	st	Z+, r25
    5b18:	02 c0       	rjmp	.+4      	; 0x5b1e <malloc+0x124>
    5b1a:	e0 e0       	ldi	r30, 0x00	; 0
    5b1c:	f0 e0       	ldi	r31, 0x00	; 0
    5b1e:	cf 01       	movw	r24, r30
    5b20:	df 91       	pop	r29
    5b22:	cf 91       	pop	r28
    5b24:	1f 91       	pop	r17
    5b26:	0f 91       	pop	r16
    5b28:	08 95       	ret

00005b2a <free>:
    5b2a:	cf 93       	push	r28
    5b2c:	df 93       	push	r29
    5b2e:	00 97       	sbiw	r24, 0x00	; 0
    5b30:	09 f4       	brne	.+2      	; 0x5b34 <free+0xa>
    5b32:	81 c0       	rjmp	.+258    	; 0x5c36 <free+0x10c>
    5b34:	fc 01       	movw	r30, r24
    5b36:	32 97       	sbiw	r30, 0x02	; 2
    5b38:	12 82       	std	Z+2, r1	; 0x02
    5b3a:	13 82       	std	Z+3, r1	; 0x03
    5b3c:	a0 91 d7 20 	lds	r26, 0x20D7	; 0x8020d7 <__flp>
    5b40:	b0 91 d8 20 	lds	r27, 0x20D8	; 0x8020d8 <__flp+0x1>
    5b44:	10 97       	sbiw	r26, 0x00	; 0
    5b46:	81 f4       	brne	.+32     	; 0x5b68 <free+0x3e>
    5b48:	20 81       	ld	r18, Z
    5b4a:	31 81       	ldd	r19, Z+1	; 0x01
    5b4c:	82 0f       	add	r24, r18
    5b4e:	93 1f       	adc	r25, r19
    5b50:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <__brkval>
    5b54:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <__brkval+0x1>
    5b58:	28 17       	cp	r18, r24
    5b5a:	39 07       	cpc	r19, r25
    5b5c:	51 f5       	brne	.+84     	; 0x5bb2 <free+0x88>
    5b5e:	e0 93 d5 20 	sts	0x20D5, r30	; 0x8020d5 <__brkval>
    5b62:	f0 93 d6 20 	sts	0x20D6, r31	; 0x8020d6 <__brkval+0x1>
    5b66:	67 c0       	rjmp	.+206    	; 0x5c36 <free+0x10c>
    5b68:	ed 01       	movw	r28, r26
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	ce 17       	cp	r28, r30
    5b70:	df 07       	cpc	r29, r31
    5b72:	40 f4       	brcc	.+16     	; 0x5b84 <free+0x5a>
    5b74:	4a 81       	ldd	r20, Y+2	; 0x02
    5b76:	5b 81       	ldd	r21, Y+3	; 0x03
    5b78:	9e 01       	movw	r18, r28
    5b7a:	41 15       	cp	r20, r1
    5b7c:	51 05       	cpc	r21, r1
    5b7e:	f1 f0       	breq	.+60     	; 0x5bbc <free+0x92>
    5b80:	ea 01       	movw	r28, r20
    5b82:	f5 cf       	rjmp	.-22     	; 0x5b6e <free+0x44>
    5b84:	c2 83       	std	Z+2, r28	; 0x02
    5b86:	d3 83       	std	Z+3, r29	; 0x03
    5b88:	40 81       	ld	r20, Z
    5b8a:	51 81       	ldd	r21, Z+1	; 0x01
    5b8c:	84 0f       	add	r24, r20
    5b8e:	95 1f       	adc	r25, r21
    5b90:	c8 17       	cp	r28, r24
    5b92:	d9 07       	cpc	r29, r25
    5b94:	59 f4       	brne	.+22     	; 0x5bac <free+0x82>
    5b96:	88 81       	ld	r24, Y
    5b98:	99 81       	ldd	r25, Y+1	; 0x01
    5b9a:	84 0f       	add	r24, r20
    5b9c:	95 1f       	adc	r25, r21
    5b9e:	02 96       	adiw	r24, 0x02	; 2
    5ba0:	80 83       	st	Z, r24
    5ba2:	91 83       	std	Z+1, r25	; 0x01
    5ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ba8:	82 83       	std	Z+2, r24	; 0x02
    5baa:	93 83       	std	Z+3, r25	; 0x03
    5bac:	21 15       	cp	r18, r1
    5bae:	31 05       	cpc	r19, r1
    5bb0:	29 f4       	brne	.+10     	; 0x5bbc <free+0x92>
    5bb2:	e0 93 d7 20 	sts	0x20D7, r30	; 0x8020d7 <__flp>
    5bb6:	f0 93 d8 20 	sts	0x20D8, r31	; 0x8020d8 <__flp+0x1>
    5bba:	3d c0       	rjmp	.+122    	; 0x5c36 <free+0x10c>
    5bbc:	e9 01       	movw	r28, r18
    5bbe:	ea 83       	std	Y+2, r30	; 0x02
    5bc0:	fb 83       	std	Y+3, r31	; 0x03
    5bc2:	49 91       	ld	r20, Y+
    5bc4:	59 91       	ld	r21, Y+
    5bc6:	c4 0f       	add	r28, r20
    5bc8:	d5 1f       	adc	r29, r21
    5bca:	ec 17       	cp	r30, r28
    5bcc:	fd 07       	cpc	r31, r29
    5bce:	61 f4       	brne	.+24     	; 0x5be8 <free+0xbe>
    5bd0:	80 81       	ld	r24, Z
    5bd2:	91 81       	ldd	r25, Z+1	; 0x01
    5bd4:	84 0f       	add	r24, r20
    5bd6:	95 1f       	adc	r25, r21
    5bd8:	02 96       	adiw	r24, 0x02	; 2
    5bda:	e9 01       	movw	r28, r18
    5bdc:	88 83       	st	Y, r24
    5bde:	99 83       	std	Y+1, r25	; 0x01
    5be0:	82 81       	ldd	r24, Z+2	; 0x02
    5be2:	93 81       	ldd	r25, Z+3	; 0x03
    5be4:	8a 83       	std	Y+2, r24	; 0x02
    5be6:	9b 83       	std	Y+3, r25	; 0x03
    5be8:	e0 e0       	ldi	r30, 0x00	; 0
    5bea:	f0 e0       	ldi	r31, 0x00	; 0
    5bec:	12 96       	adiw	r26, 0x02	; 2
    5bee:	8d 91       	ld	r24, X+
    5bf0:	9c 91       	ld	r25, X
    5bf2:	13 97       	sbiw	r26, 0x03	; 3
    5bf4:	00 97       	sbiw	r24, 0x00	; 0
    5bf6:	19 f0       	breq	.+6      	; 0x5bfe <free+0xd4>
    5bf8:	fd 01       	movw	r30, r26
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	f7 cf       	rjmp	.-18     	; 0x5bec <free+0xc2>
    5bfe:	8d 91       	ld	r24, X+
    5c00:	9c 91       	ld	r25, X
    5c02:	11 97       	sbiw	r26, 0x01	; 1
    5c04:	9d 01       	movw	r18, r26
    5c06:	2e 5f       	subi	r18, 0xFE	; 254
    5c08:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0a:	82 0f       	add	r24, r18
    5c0c:	93 1f       	adc	r25, r19
    5c0e:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <__brkval>
    5c12:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <__brkval+0x1>
    5c16:	28 17       	cp	r18, r24
    5c18:	39 07       	cpc	r19, r25
    5c1a:	69 f4       	brne	.+26     	; 0x5c36 <free+0x10c>
    5c1c:	30 97       	sbiw	r30, 0x00	; 0
    5c1e:	29 f4       	brne	.+10     	; 0x5c2a <free+0x100>
    5c20:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <__flp>
    5c24:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <__flp+0x1>
    5c28:	02 c0       	rjmp	.+4      	; 0x5c2e <free+0x104>
    5c2a:	12 82       	std	Z+2, r1	; 0x02
    5c2c:	13 82       	std	Z+3, r1	; 0x03
    5c2e:	a0 93 d5 20 	sts	0x20D5, r26	; 0x8020d5 <__brkval>
    5c32:	b0 93 d6 20 	sts	0x20D6, r27	; 0x8020d6 <__brkval+0x1>
    5c36:	df 91       	pop	r29
    5c38:	cf 91       	pop	r28
    5c3a:	08 95       	ret

00005c3c <fdevopen>:
    5c3c:	0f 93       	push	r16
    5c3e:	1f 93       	push	r17
    5c40:	cf 93       	push	r28
    5c42:	df 93       	push	r29
    5c44:	00 97       	sbiw	r24, 0x00	; 0
    5c46:	31 f4       	brne	.+12     	; 0x5c54 <fdevopen+0x18>
    5c48:	61 15       	cp	r22, r1
    5c4a:	71 05       	cpc	r23, r1
    5c4c:	19 f4       	brne	.+6      	; 0x5c54 <fdevopen+0x18>
    5c4e:	80 e0       	ldi	r24, 0x00	; 0
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	39 c0       	rjmp	.+114    	; 0x5cc6 <fdevopen+0x8a>
    5c54:	8b 01       	movw	r16, r22
    5c56:	ec 01       	movw	r28, r24
    5c58:	6e e0       	ldi	r22, 0x0E	; 14
    5c5a:	70 e0       	ldi	r23, 0x00	; 0
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	71 d2       	rcall	.+1250   	; 0x6144 <calloc>
    5c62:	fc 01       	movw	r30, r24
    5c64:	89 2b       	or	r24, r25
    5c66:	99 f3       	breq	.-26     	; 0x5c4e <fdevopen+0x12>
    5c68:	80 e8       	ldi	r24, 0x80	; 128
    5c6a:	83 83       	std	Z+3, r24	; 0x03
    5c6c:	01 15       	cp	r16, r1
    5c6e:	11 05       	cpc	r17, r1
    5c70:	71 f0       	breq	.+28     	; 0x5c8e <fdevopen+0x52>
    5c72:	02 87       	std	Z+10, r16	; 0x0a
    5c74:	13 87       	std	Z+11, r17	; 0x0b
    5c76:	81 e8       	ldi	r24, 0x81	; 129
    5c78:	83 83       	std	Z+3, r24	; 0x03
    5c7a:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <__iob>
    5c7e:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <__iob+0x1>
    5c82:	89 2b       	or	r24, r25
    5c84:	21 f4       	brne	.+8      	; 0x5c8e <fdevopen+0x52>
    5c86:	e0 93 d9 20 	sts	0x20D9, r30	; 0x8020d9 <__iob>
    5c8a:	f0 93 da 20 	sts	0x20DA, r31	; 0x8020da <__iob+0x1>
    5c8e:	20 97       	sbiw	r28, 0x00	; 0
    5c90:	c9 f0       	breq	.+50     	; 0x5cc4 <fdevopen+0x88>
    5c92:	c0 87       	std	Z+8, r28	; 0x08
    5c94:	d1 87       	std	Z+9, r29	; 0x09
    5c96:	83 81       	ldd	r24, Z+3	; 0x03
    5c98:	82 60       	ori	r24, 0x02	; 2
    5c9a:	83 83       	std	Z+3, r24	; 0x03
    5c9c:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <__iob+0x2>
    5ca0:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <__iob+0x3>
    5ca4:	89 2b       	or	r24, r25
    5ca6:	71 f4       	brne	.+28     	; 0x5cc4 <fdevopen+0x88>
    5ca8:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <__iob+0x2>
    5cac:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <__iob+0x3>
    5cb0:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <__iob+0x4>
    5cb4:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <__iob+0x5>
    5cb8:	89 2b       	or	r24, r25
    5cba:	21 f4       	brne	.+8      	; 0x5cc4 <fdevopen+0x88>
    5cbc:	e0 93 dd 20 	sts	0x20DD, r30	; 0x8020dd <__iob+0x4>
    5cc0:	f0 93 de 20 	sts	0x20DE, r31	; 0x8020de <__iob+0x5>
    5cc4:	cf 01       	movw	r24, r30
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	1f 91       	pop	r17
    5ccc:	0f 91       	pop	r16
    5cce:	08 95       	ret

00005cd0 <printf>:
    5cd0:	cf 93       	push	r28
    5cd2:	df 93       	push	r29
    5cd4:	cd b7       	in	r28, 0x3d	; 61
    5cd6:	de b7       	in	r29, 0x3e	; 62
    5cd8:	ae 01       	movw	r20, r28
    5cda:	4a 5f       	subi	r20, 0xFA	; 250
    5cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cde:	fa 01       	movw	r30, r20
    5ce0:	61 91       	ld	r22, Z+
    5ce2:	71 91       	ld	r23, Z+
    5ce4:	af 01       	movw	r20, r30
    5ce6:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <__iob+0x2>
    5cea:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <__iob+0x3>
    5cee:	33 d0       	rcall	.+102    	; 0x5d56 <vfprintf>
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	08 95       	ret

00005cf6 <puts>:
    5cf6:	0f 93       	push	r16
    5cf8:	1f 93       	push	r17
    5cfa:	cf 93       	push	r28
    5cfc:	df 93       	push	r29
    5cfe:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <__iob+0x2>
    5d02:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <__iob+0x3>
    5d06:	23 81       	ldd	r18, Z+3	; 0x03
    5d08:	21 ff       	sbrs	r18, 1
    5d0a:	1b c0       	rjmp	.+54     	; 0x5d42 <puts+0x4c>
    5d0c:	8c 01       	movw	r16, r24
    5d0e:	d0 e0       	ldi	r29, 0x00	; 0
    5d10:	c0 e0       	ldi	r28, 0x00	; 0
    5d12:	f8 01       	movw	r30, r16
    5d14:	81 91       	ld	r24, Z+
    5d16:	8f 01       	movw	r16, r30
    5d18:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <__iob+0x2>
    5d1c:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <__iob+0x3>
    5d20:	db 01       	movw	r26, r22
    5d22:	18 96       	adiw	r26, 0x08	; 8
    5d24:	ed 91       	ld	r30, X+
    5d26:	fc 91       	ld	r31, X
    5d28:	19 97       	sbiw	r26, 0x09	; 9
    5d2a:	88 23       	and	r24, r24
    5d2c:	31 f0       	breq	.+12     	; 0x5d3a <puts+0x44>
    5d2e:	19 95       	eicall
    5d30:	89 2b       	or	r24, r25
    5d32:	79 f3       	breq	.-34     	; 0x5d12 <puts+0x1c>
    5d34:	df ef       	ldi	r29, 0xFF	; 255
    5d36:	cf ef       	ldi	r28, 0xFF	; 255
    5d38:	ec cf       	rjmp	.-40     	; 0x5d12 <puts+0x1c>
    5d3a:	8a e0       	ldi	r24, 0x0A	; 10
    5d3c:	19 95       	eicall
    5d3e:	89 2b       	or	r24, r25
    5d40:	19 f0       	breq	.+6      	; 0x5d48 <puts+0x52>
    5d42:	8f ef       	ldi	r24, 0xFF	; 255
    5d44:	9f ef       	ldi	r25, 0xFF	; 255
    5d46:	02 c0       	rjmp	.+4      	; 0x5d4c <puts+0x56>
    5d48:	8d 2f       	mov	r24, r29
    5d4a:	9c 2f       	mov	r25, r28
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	08 95       	ret

00005d56 <vfprintf>:
    5d56:	2f 92       	push	r2
    5d58:	3f 92       	push	r3
    5d5a:	4f 92       	push	r4
    5d5c:	5f 92       	push	r5
    5d5e:	6f 92       	push	r6
    5d60:	7f 92       	push	r7
    5d62:	8f 92       	push	r8
    5d64:	9f 92       	push	r9
    5d66:	af 92       	push	r10
    5d68:	bf 92       	push	r11
    5d6a:	cf 92       	push	r12
    5d6c:	df 92       	push	r13
    5d6e:	ef 92       	push	r14
    5d70:	ff 92       	push	r15
    5d72:	0f 93       	push	r16
    5d74:	1f 93       	push	r17
    5d76:	cf 93       	push	r28
    5d78:	df 93       	push	r29
    5d7a:	cd b7       	in	r28, 0x3d	; 61
    5d7c:	de b7       	in	r29, 0x3e	; 62
    5d7e:	2b 97       	sbiw	r28, 0x0b	; 11
    5d80:	cd bf       	out	0x3d, r28	; 61
    5d82:	de bf       	out	0x3e, r29	; 62
    5d84:	6c 01       	movw	r12, r24
    5d86:	7b 01       	movw	r14, r22
    5d88:	8a 01       	movw	r16, r20
    5d8a:	fc 01       	movw	r30, r24
    5d8c:	16 82       	std	Z+6, r1	; 0x06
    5d8e:	17 82       	std	Z+7, r1	; 0x07
    5d90:	83 81       	ldd	r24, Z+3	; 0x03
    5d92:	81 ff       	sbrs	r24, 1
    5d94:	bf c1       	rjmp	.+894    	; 0x6114 <vfprintf+0x3be>
    5d96:	ce 01       	movw	r24, r28
    5d98:	01 96       	adiw	r24, 0x01	; 1
    5d9a:	3c 01       	movw	r6, r24
    5d9c:	f6 01       	movw	r30, r12
    5d9e:	93 81       	ldd	r25, Z+3	; 0x03
    5da0:	f7 01       	movw	r30, r14
    5da2:	93 fd       	sbrc	r25, 3
    5da4:	85 91       	lpm	r24, Z+
    5da6:	93 ff       	sbrs	r25, 3
    5da8:	81 91       	ld	r24, Z+
    5daa:	7f 01       	movw	r14, r30
    5dac:	88 23       	and	r24, r24
    5dae:	09 f4       	brne	.+2      	; 0x5db2 <vfprintf+0x5c>
    5db0:	ad c1       	rjmp	.+858    	; 0x610c <vfprintf+0x3b6>
    5db2:	85 32       	cpi	r24, 0x25	; 37
    5db4:	39 f4       	brne	.+14     	; 0x5dc4 <vfprintf+0x6e>
    5db6:	93 fd       	sbrc	r25, 3
    5db8:	85 91       	lpm	r24, Z+
    5dba:	93 ff       	sbrs	r25, 3
    5dbc:	81 91       	ld	r24, Z+
    5dbe:	7f 01       	movw	r14, r30
    5dc0:	85 32       	cpi	r24, 0x25	; 37
    5dc2:	21 f4       	brne	.+8      	; 0x5dcc <vfprintf+0x76>
    5dc4:	b6 01       	movw	r22, r12
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	f4 d1       	rcall	.+1000   	; 0x61b2 <fputc>
    5dca:	e8 cf       	rjmp	.-48     	; 0x5d9c <vfprintf+0x46>
    5dcc:	91 2c       	mov	r9, r1
    5dce:	21 2c       	mov	r2, r1
    5dd0:	31 2c       	mov	r3, r1
    5dd2:	ff e1       	ldi	r31, 0x1F	; 31
    5dd4:	f3 15       	cp	r31, r3
    5dd6:	d8 f0       	brcs	.+54     	; 0x5e0e <vfprintf+0xb8>
    5dd8:	8b 32       	cpi	r24, 0x2B	; 43
    5dda:	79 f0       	breq	.+30     	; 0x5dfa <vfprintf+0xa4>
    5ddc:	38 f4       	brcc	.+14     	; 0x5dec <vfprintf+0x96>
    5dde:	80 32       	cpi	r24, 0x20	; 32
    5de0:	79 f0       	breq	.+30     	; 0x5e00 <vfprintf+0xaa>
    5de2:	83 32       	cpi	r24, 0x23	; 35
    5de4:	a1 f4       	brne	.+40     	; 0x5e0e <vfprintf+0xb8>
    5de6:	23 2d       	mov	r18, r3
    5de8:	20 61       	ori	r18, 0x10	; 16
    5dea:	1d c0       	rjmp	.+58     	; 0x5e26 <vfprintf+0xd0>
    5dec:	8d 32       	cpi	r24, 0x2D	; 45
    5dee:	61 f0       	breq	.+24     	; 0x5e08 <vfprintf+0xb2>
    5df0:	80 33       	cpi	r24, 0x30	; 48
    5df2:	69 f4       	brne	.+26     	; 0x5e0e <vfprintf+0xb8>
    5df4:	23 2d       	mov	r18, r3
    5df6:	21 60       	ori	r18, 0x01	; 1
    5df8:	16 c0       	rjmp	.+44     	; 0x5e26 <vfprintf+0xd0>
    5dfa:	83 2d       	mov	r24, r3
    5dfc:	82 60       	ori	r24, 0x02	; 2
    5dfe:	38 2e       	mov	r3, r24
    5e00:	e3 2d       	mov	r30, r3
    5e02:	e4 60       	ori	r30, 0x04	; 4
    5e04:	3e 2e       	mov	r3, r30
    5e06:	2a c0       	rjmp	.+84     	; 0x5e5c <vfprintf+0x106>
    5e08:	f3 2d       	mov	r31, r3
    5e0a:	f8 60       	ori	r31, 0x08	; 8
    5e0c:	1d c0       	rjmp	.+58     	; 0x5e48 <vfprintf+0xf2>
    5e0e:	37 fc       	sbrc	r3, 7
    5e10:	2d c0       	rjmp	.+90     	; 0x5e6c <vfprintf+0x116>
    5e12:	20 ed       	ldi	r18, 0xD0	; 208
    5e14:	28 0f       	add	r18, r24
    5e16:	2a 30       	cpi	r18, 0x0A	; 10
    5e18:	40 f0       	brcs	.+16     	; 0x5e2a <vfprintf+0xd4>
    5e1a:	8e 32       	cpi	r24, 0x2E	; 46
    5e1c:	b9 f4       	brne	.+46     	; 0x5e4c <vfprintf+0xf6>
    5e1e:	36 fc       	sbrc	r3, 6
    5e20:	75 c1       	rjmp	.+746    	; 0x610c <vfprintf+0x3b6>
    5e22:	23 2d       	mov	r18, r3
    5e24:	20 64       	ori	r18, 0x40	; 64
    5e26:	32 2e       	mov	r3, r18
    5e28:	19 c0       	rjmp	.+50     	; 0x5e5c <vfprintf+0x106>
    5e2a:	36 fe       	sbrs	r3, 6
    5e2c:	06 c0       	rjmp	.+12     	; 0x5e3a <vfprintf+0xe4>
    5e2e:	8a e0       	ldi	r24, 0x0A	; 10
    5e30:	98 9e       	mul	r9, r24
    5e32:	20 0d       	add	r18, r0
    5e34:	11 24       	eor	r1, r1
    5e36:	92 2e       	mov	r9, r18
    5e38:	11 c0       	rjmp	.+34     	; 0x5e5c <vfprintf+0x106>
    5e3a:	ea e0       	ldi	r30, 0x0A	; 10
    5e3c:	2e 9e       	mul	r2, r30
    5e3e:	20 0d       	add	r18, r0
    5e40:	11 24       	eor	r1, r1
    5e42:	22 2e       	mov	r2, r18
    5e44:	f3 2d       	mov	r31, r3
    5e46:	f0 62       	ori	r31, 0x20	; 32
    5e48:	3f 2e       	mov	r3, r31
    5e4a:	08 c0       	rjmp	.+16     	; 0x5e5c <vfprintf+0x106>
    5e4c:	8c 36       	cpi	r24, 0x6C	; 108
    5e4e:	21 f4       	brne	.+8      	; 0x5e58 <vfprintf+0x102>
    5e50:	83 2d       	mov	r24, r3
    5e52:	80 68       	ori	r24, 0x80	; 128
    5e54:	38 2e       	mov	r3, r24
    5e56:	02 c0       	rjmp	.+4      	; 0x5e5c <vfprintf+0x106>
    5e58:	88 36       	cpi	r24, 0x68	; 104
    5e5a:	41 f4       	brne	.+16     	; 0x5e6c <vfprintf+0x116>
    5e5c:	f7 01       	movw	r30, r14
    5e5e:	93 fd       	sbrc	r25, 3
    5e60:	85 91       	lpm	r24, Z+
    5e62:	93 ff       	sbrs	r25, 3
    5e64:	81 91       	ld	r24, Z+
    5e66:	7f 01       	movw	r14, r30
    5e68:	81 11       	cpse	r24, r1
    5e6a:	b3 cf       	rjmp	.-154    	; 0x5dd2 <vfprintf+0x7c>
    5e6c:	98 2f       	mov	r25, r24
    5e6e:	9f 7d       	andi	r25, 0xDF	; 223
    5e70:	95 54       	subi	r25, 0x45	; 69
    5e72:	93 30       	cpi	r25, 0x03	; 3
    5e74:	28 f4       	brcc	.+10     	; 0x5e80 <vfprintf+0x12a>
    5e76:	0c 5f       	subi	r16, 0xFC	; 252
    5e78:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7a:	9f e3       	ldi	r25, 0x3F	; 63
    5e7c:	99 83       	std	Y+1, r25	; 0x01
    5e7e:	0d c0       	rjmp	.+26     	; 0x5e9a <vfprintf+0x144>
    5e80:	83 36       	cpi	r24, 0x63	; 99
    5e82:	31 f0       	breq	.+12     	; 0x5e90 <vfprintf+0x13a>
    5e84:	83 37       	cpi	r24, 0x73	; 115
    5e86:	71 f0       	breq	.+28     	; 0x5ea4 <vfprintf+0x14e>
    5e88:	83 35       	cpi	r24, 0x53	; 83
    5e8a:	09 f0       	breq	.+2      	; 0x5e8e <vfprintf+0x138>
    5e8c:	55 c0       	rjmp	.+170    	; 0x5f38 <vfprintf+0x1e2>
    5e8e:	20 c0       	rjmp	.+64     	; 0x5ed0 <vfprintf+0x17a>
    5e90:	f8 01       	movw	r30, r16
    5e92:	80 81       	ld	r24, Z
    5e94:	89 83       	std	Y+1, r24	; 0x01
    5e96:	0e 5f       	subi	r16, 0xFE	; 254
    5e98:	1f 4f       	sbci	r17, 0xFF	; 255
    5e9a:	88 24       	eor	r8, r8
    5e9c:	83 94       	inc	r8
    5e9e:	91 2c       	mov	r9, r1
    5ea0:	53 01       	movw	r10, r6
    5ea2:	12 c0       	rjmp	.+36     	; 0x5ec8 <vfprintf+0x172>
    5ea4:	28 01       	movw	r4, r16
    5ea6:	f2 e0       	ldi	r31, 0x02	; 2
    5ea8:	4f 0e       	add	r4, r31
    5eaa:	51 1c       	adc	r5, r1
    5eac:	f8 01       	movw	r30, r16
    5eae:	a0 80       	ld	r10, Z
    5eb0:	b1 80       	ldd	r11, Z+1	; 0x01
    5eb2:	36 fe       	sbrs	r3, 6
    5eb4:	03 c0       	rjmp	.+6      	; 0x5ebc <vfprintf+0x166>
    5eb6:	69 2d       	mov	r22, r9
    5eb8:	70 e0       	ldi	r23, 0x00	; 0
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <vfprintf+0x16a>
    5ebc:	6f ef       	ldi	r22, 0xFF	; 255
    5ebe:	7f ef       	ldi	r23, 0xFF	; 255
    5ec0:	c5 01       	movw	r24, r10
    5ec2:	6c d1       	rcall	.+728    	; 0x619c <strnlen>
    5ec4:	4c 01       	movw	r8, r24
    5ec6:	82 01       	movw	r16, r4
    5ec8:	f3 2d       	mov	r31, r3
    5eca:	ff 77       	andi	r31, 0x7F	; 127
    5ecc:	3f 2e       	mov	r3, r31
    5ece:	15 c0       	rjmp	.+42     	; 0x5efa <vfprintf+0x1a4>
    5ed0:	28 01       	movw	r4, r16
    5ed2:	22 e0       	ldi	r18, 0x02	; 2
    5ed4:	42 0e       	add	r4, r18
    5ed6:	51 1c       	adc	r5, r1
    5ed8:	f8 01       	movw	r30, r16
    5eda:	a0 80       	ld	r10, Z
    5edc:	b1 80       	ldd	r11, Z+1	; 0x01
    5ede:	36 fe       	sbrs	r3, 6
    5ee0:	03 c0       	rjmp	.+6      	; 0x5ee8 <vfprintf+0x192>
    5ee2:	69 2d       	mov	r22, r9
    5ee4:	70 e0       	ldi	r23, 0x00	; 0
    5ee6:	02 c0       	rjmp	.+4      	; 0x5eec <vfprintf+0x196>
    5ee8:	6f ef       	ldi	r22, 0xFF	; 255
    5eea:	7f ef       	ldi	r23, 0xFF	; 255
    5eec:	c5 01       	movw	r24, r10
    5eee:	44 d1       	rcall	.+648    	; 0x6178 <strnlen_P>
    5ef0:	4c 01       	movw	r8, r24
    5ef2:	f3 2d       	mov	r31, r3
    5ef4:	f0 68       	ori	r31, 0x80	; 128
    5ef6:	3f 2e       	mov	r3, r31
    5ef8:	82 01       	movw	r16, r4
    5efa:	33 fc       	sbrc	r3, 3
    5efc:	19 c0       	rjmp	.+50     	; 0x5f30 <vfprintf+0x1da>
    5efe:	82 2d       	mov	r24, r2
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	88 16       	cp	r8, r24
    5f04:	99 06       	cpc	r9, r25
    5f06:	a0 f4       	brcc	.+40     	; 0x5f30 <vfprintf+0x1da>
    5f08:	b6 01       	movw	r22, r12
    5f0a:	80 e2       	ldi	r24, 0x20	; 32
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	51 d1       	rcall	.+674    	; 0x61b2 <fputc>
    5f10:	2a 94       	dec	r2
    5f12:	f5 cf       	rjmp	.-22     	; 0x5efe <vfprintf+0x1a8>
    5f14:	f5 01       	movw	r30, r10
    5f16:	37 fc       	sbrc	r3, 7
    5f18:	85 91       	lpm	r24, Z+
    5f1a:	37 fe       	sbrs	r3, 7
    5f1c:	81 91       	ld	r24, Z+
    5f1e:	5f 01       	movw	r10, r30
    5f20:	b6 01       	movw	r22, r12
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	46 d1       	rcall	.+652    	; 0x61b2 <fputc>
    5f26:	21 10       	cpse	r2, r1
    5f28:	2a 94       	dec	r2
    5f2a:	21 e0       	ldi	r18, 0x01	; 1
    5f2c:	82 1a       	sub	r8, r18
    5f2e:	91 08       	sbc	r9, r1
    5f30:	81 14       	cp	r8, r1
    5f32:	91 04       	cpc	r9, r1
    5f34:	79 f7       	brne	.-34     	; 0x5f14 <vfprintf+0x1be>
    5f36:	e1 c0       	rjmp	.+450    	; 0x60fa <vfprintf+0x3a4>
    5f38:	84 36       	cpi	r24, 0x64	; 100
    5f3a:	11 f0       	breq	.+4      	; 0x5f40 <vfprintf+0x1ea>
    5f3c:	89 36       	cpi	r24, 0x69	; 105
    5f3e:	39 f5       	brne	.+78     	; 0x5f8e <vfprintf+0x238>
    5f40:	f8 01       	movw	r30, r16
    5f42:	37 fe       	sbrs	r3, 7
    5f44:	07 c0       	rjmp	.+14     	; 0x5f54 <vfprintf+0x1fe>
    5f46:	60 81       	ld	r22, Z
    5f48:	71 81       	ldd	r23, Z+1	; 0x01
    5f4a:	82 81       	ldd	r24, Z+2	; 0x02
    5f4c:	93 81       	ldd	r25, Z+3	; 0x03
    5f4e:	0c 5f       	subi	r16, 0xFC	; 252
    5f50:	1f 4f       	sbci	r17, 0xFF	; 255
    5f52:	08 c0       	rjmp	.+16     	; 0x5f64 <vfprintf+0x20e>
    5f54:	60 81       	ld	r22, Z
    5f56:	71 81       	ldd	r23, Z+1	; 0x01
    5f58:	07 2e       	mov	r0, r23
    5f5a:	00 0c       	add	r0, r0
    5f5c:	88 0b       	sbc	r24, r24
    5f5e:	99 0b       	sbc	r25, r25
    5f60:	0e 5f       	subi	r16, 0xFE	; 254
    5f62:	1f 4f       	sbci	r17, 0xFF	; 255
    5f64:	f3 2d       	mov	r31, r3
    5f66:	ff 76       	andi	r31, 0x6F	; 111
    5f68:	3f 2e       	mov	r3, r31
    5f6a:	97 ff       	sbrs	r25, 7
    5f6c:	09 c0       	rjmp	.+18     	; 0x5f80 <vfprintf+0x22a>
    5f6e:	90 95       	com	r25
    5f70:	80 95       	com	r24
    5f72:	70 95       	com	r23
    5f74:	61 95       	neg	r22
    5f76:	7f 4f       	sbci	r23, 0xFF	; 255
    5f78:	8f 4f       	sbci	r24, 0xFF	; 255
    5f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7c:	f0 68       	ori	r31, 0x80	; 128
    5f7e:	3f 2e       	mov	r3, r31
    5f80:	2a e0       	ldi	r18, 0x0A	; 10
    5f82:	30 e0       	ldi	r19, 0x00	; 0
    5f84:	a3 01       	movw	r20, r6
    5f86:	51 d1       	rcall	.+674    	; 0x622a <__ultoa_invert>
    5f88:	88 2e       	mov	r8, r24
    5f8a:	86 18       	sub	r8, r6
    5f8c:	44 c0       	rjmp	.+136    	; 0x6016 <vfprintf+0x2c0>
    5f8e:	85 37       	cpi	r24, 0x75	; 117
    5f90:	31 f4       	brne	.+12     	; 0x5f9e <vfprintf+0x248>
    5f92:	23 2d       	mov	r18, r3
    5f94:	2f 7e       	andi	r18, 0xEF	; 239
    5f96:	b2 2e       	mov	r11, r18
    5f98:	2a e0       	ldi	r18, 0x0A	; 10
    5f9a:	30 e0       	ldi	r19, 0x00	; 0
    5f9c:	25 c0       	rjmp	.+74     	; 0x5fe8 <vfprintf+0x292>
    5f9e:	93 2d       	mov	r25, r3
    5fa0:	99 7f       	andi	r25, 0xF9	; 249
    5fa2:	b9 2e       	mov	r11, r25
    5fa4:	8f 36       	cpi	r24, 0x6F	; 111
    5fa6:	c1 f0       	breq	.+48     	; 0x5fd8 <vfprintf+0x282>
    5fa8:	18 f4       	brcc	.+6      	; 0x5fb0 <vfprintf+0x25a>
    5faa:	88 35       	cpi	r24, 0x58	; 88
    5fac:	79 f0       	breq	.+30     	; 0x5fcc <vfprintf+0x276>
    5fae:	ae c0       	rjmp	.+348    	; 0x610c <vfprintf+0x3b6>
    5fb0:	80 37       	cpi	r24, 0x70	; 112
    5fb2:	19 f0       	breq	.+6      	; 0x5fba <vfprintf+0x264>
    5fb4:	88 37       	cpi	r24, 0x78	; 120
    5fb6:	21 f0       	breq	.+8      	; 0x5fc0 <vfprintf+0x26a>
    5fb8:	a9 c0       	rjmp	.+338    	; 0x610c <vfprintf+0x3b6>
    5fba:	e9 2f       	mov	r30, r25
    5fbc:	e0 61       	ori	r30, 0x10	; 16
    5fbe:	be 2e       	mov	r11, r30
    5fc0:	b4 fe       	sbrs	r11, 4
    5fc2:	0d c0       	rjmp	.+26     	; 0x5fde <vfprintf+0x288>
    5fc4:	fb 2d       	mov	r31, r11
    5fc6:	f4 60       	ori	r31, 0x04	; 4
    5fc8:	bf 2e       	mov	r11, r31
    5fca:	09 c0       	rjmp	.+18     	; 0x5fde <vfprintf+0x288>
    5fcc:	34 fe       	sbrs	r3, 4
    5fce:	0a c0       	rjmp	.+20     	; 0x5fe4 <vfprintf+0x28e>
    5fd0:	29 2f       	mov	r18, r25
    5fd2:	26 60       	ori	r18, 0x06	; 6
    5fd4:	b2 2e       	mov	r11, r18
    5fd6:	06 c0       	rjmp	.+12     	; 0x5fe4 <vfprintf+0x28e>
    5fd8:	28 e0       	ldi	r18, 0x08	; 8
    5fda:	30 e0       	ldi	r19, 0x00	; 0
    5fdc:	05 c0       	rjmp	.+10     	; 0x5fe8 <vfprintf+0x292>
    5fde:	20 e1       	ldi	r18, 0x10	; 16
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	02 c0       	rjmp	.+4      	; 0x5fe8 <vfprintf+0x292>
    5fe4:	20 e1       	ldi	r18, 0x10	; 16
    5fe6:	32 e0       	ldi	r19, 0x02	; 2
    5fe8:	f8 01       	movw	r30, r16
    5fea:	b7 fe       	sbrs	r11, 7
    5fec:	07 c0       	rjmp	.+14     	; 0x5ffc <vfprintf+0x2a6>
    5fee:	60 81       	ld	r22, Z
    5ff0:	71 81       	ldd	r23, Z+1	; 0x01
    5ff2:	82 81       	ldd	r24, Z+2	; 0x02
    5ff4:	93 81       	ldd	r25, Z+3	; 0x03
    5ff6:	0c 5f       	subi	r16, 0xFC	; 252
    5ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffa:	06 c0       	rjmp	.+12     	; 0x6008 <vfprintf+0x2b2>
    5ffc:	60 81       	ld	r22, Z
    5ffe:	71 81       	ldd	r23, Z+1	; 0x01
    6000:	80 e0       	ldi	r24, 0x00	; 0
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	0e 5f       	subi	r16, 0xFE	; 254
    6006:	1f 4f       	sbci	r17, 0xFF	; 255
    6008:	a3 01       	movw	r20, r6
    600a:	0f d1       	rcall	.+542    	; 0x622a <__ultoa_invert>
    600c:	88 2e       	mov	r8, r24
    600e:	86 18       	sub	r8, r6
    6010:	fb 2d       	mov	r31, r11
    6012:	ff 77       	andi	r31, 0x7F	; 127
    6014:	3f 2e       	mov	r3, r31
    6016:	36 fe       	sbrs	r3, 6
    6018:	0d c0       	rjmp	.+26     	; 0x6034 <vfprintf+0x2de>
    601a:	23 2d       	mov	r18, r3
    601c:	2e 7f       	andi	r18, 0xFE	; 254
    601e:	a2 2e       	mov	r10, r18
    6020:	89 14       	cp	r8, r9
    6022:	58 f4       	brcc	.+22     	; 0x603a <vfprintf+0x2e4>
    6024:	34 fe       	sbrs	r3, 4
    6026:	0b c0       	rjmp	.+22     	; 0x603e <vfprintf+0x2e8>
    6028:	32 fc       	sbrc	r3, 2
    602a:	09 c0       	rjmp	.+18     	; 0x603e <vfprintf+0x2e8>
    602c:	83 2d       	mov	r24, r3
    602e:	8e 7e       	andi	r24, 0xEE	; 238
    6030:	a8 2e       	mov	r10, r24
    6032:	05 c0       	rjmp	.+10     	; 0x603e <vfprintf+0x2e8>
    6034:	b8 2c       	mov	r11, r8
    6036:	a3 2c       	mov	r10, r3
    6038:	03 c0       	rjmp	.+6      	; 0x6040 <vfprintf+0x2ea>
    603a:	b8 2c       	mov	r11, r8
    603c:	01 c0       	rjmp	.+2      	; 0x6040 <vfprintf+0x2ea>
    603e:	b9 2c       	mov	r11, r9
    6040:	a4 fe       	sbrs	r10, 4
    6042:	0f c0       	rjmp	.+30     	; 0x6062 <vfprintf+0x30c>
    6044:	fe 01       	movw	r30, r28
    6046:	e8 0d       	add	r30, r8
    6048:	f1 1d       	adc	r31, r1
    604a:	80 81       	ld	r24, Z
    604c:	80 33       	cpi	r24, 0x30	; 48
    604e:	21 f4       	brne	.+8      	; 0x6058 <vfprintf+0x302>
    6050:	9a 2d       	mov	r25, r10
    6052:	99 7e       	andi	r25, 0xE9	; 233
    6054:	a9 2e       	mov	r10, r25
    6056:	09 c0       	rjmp	.+18     	; 0x606a <vfprintf+0x314>
    6058:	a2 fe       	sbrs	r10, 2
    605a:	06 c0       	rjmp	.+12     	; 0x6068 <vfprintf+0x312>
    605c:	b3 94       	inc	r11
    605e:	b3 94       	inc	r11
    6060:	04 c0       	rjmp	.+8      	; 0x606a <vfprintf+0x314>
    6062:	8a 2d       	mov	r24, r10
    6064:	86 78       	andi	r24, 0x86	; 134
    6066:	09 f0       	breq	.+2      	; 0x606a <vfprintf+0x314>
    6068:	b3 94       	inc	r11
    606a:	a3 fc       	sbrc	r10, 3
    606c:	10 c0       	rjmp	.+32     	; 0x608e <vfprintf+0x338>
    606e:	a0 fe       	sbrs	r10, 0
    6070:	06 c0       	rjmp	.+12     	; 0x607e <vfprintf+0x328>
    6072:	b2 14       	cp	r11, r2
    6074:	80 f4       	brcc	.+32     	; 0x6096 <vfprintf+0x340>
    6076:	28 0c       	add	r2, r8
    6078:	92 2c       	mov	r9, r2
    607a:	9b 18       	sub	r9, r11
    607c:	0d c0       	rjmp	.+26     	; 0x6098 <vfprintf+0x342>
    607e:	b2 14       	cp	r11, r2
    6080:	58 f4       	brcc	.+22     	; 0x6098 <vfprintf+0x342>
    6082:	b6 01       	movw	r22, r12
    6084:	80 e2       	ldi	r24, 0x20	; 32
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	94 d0       	rcall	.+296    	; 0x61b2 <fputc>
    608a:	b3 94       	inc	r11
    608c:	f8 cf       	rjmp	.-16     	; 0x607e <vfprintf+0x328>
    608e:	b2 14       	cp	r11, r2
    6090:	18 f4       	brcc	.+6      	; 0x6098 <vfprintf+0x342>
    6092:	2b 18       	sub	r2, r11
    6094:	02 c0       	rjmp	.+4      	; 0x609a <vfprintf+0x344>
    6096:	98 2c       	mov	r9, r8
    6098:	21 2c       	mov	r2, r1
    609a:	a4 fe       	sbrs	r10, 4
    609c:	0f c0       	rjmp	.+30     	; 0x60bc <vfprintf+0x366>
    609e:	b6 01       	movw	r22, r12
    60a0:	80 e3       	ldi	r24, 0x30	; 48
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	86 d0       	rcall	.+268    	; 0x61b2 <fputc>
    60a6:	a2 fe       	sbrs	r10, 2
    60a8:	16 c0       	rjmp	.+44     	; 0x60d6 <vfprintf+0x380>
    60aa:	a1 fc       	sbrc	r10, 1
    60ac:	03 c0       	rjmp	.+6      	; 0x60b4 <vfprintf+0x35e>
    60ae:	88 e7       	ldi	r24, 0x78	; 120
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	02 c0       	rjmp	.+4      	; 0x60b8 <vfprintf+0x362>
    60b4:	88 e5       	ldi	r24, 0x58	; 88
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	b6 01       	movw	r22, r12
    60ba:	0c c0       	rjmp	.+24     	; 0x60d4 <vfprintf+0x37e>
    60bc:	8a 2d       	mov	r24, r10
    60be:	86 78       	andi	r24, 0x86	; 134
    60c0:	51 f0       	breq	.+20     	; 0x60d6 <vfprintf+0x380>
    60c2:	a1 fe       	sbrs	r10, 1
    60c4:	02 c0       	rjmp	.+4      	; 0x60ca <vfprintf+0x374>
    60c6:	8b e2       	ldi	r24, 0x2B	; 43
    60c8:	01 c0       	rjmp	.+2      	; 0x60cc <vfprintf+0x376>
    60ca:	80 e2       	ldi	r24, 0x20	; 32
    60cc:	a7 fc       	sbrc	r10, 7
    60ce:	8d e2       	ldi	r24, 0x2D	; 45
    60d0:	b6 01       	movw	r22, r12
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	6e d0       	rcall	.+220    	; 0x61b2 <fputc>
    60d6:	89 14       	cp	r8, r9
    60d8:	30 f4       	brcc	.+12     	; 0x60e6 <vfprintf+0x390>
    60da:	b6 01       	movw	r22, r12
    60dc:	80 e3       	ldi	r24, 0x30	; 48
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	68 d0       	rcall	.+208    	; 0x61b2 <fputc>
    60e2:	9a 94       	dec	r9
    60e4:	f8 cf       	rjmp	.-16     	; 0x60d6 <vfprintf+0x380>
    60e6:	8a 94       	dec	r8
    60e8:	f3 01       	movw	r30, r6
    60ea:	e8 0d       	add	r30, r8
    60ec:	f1 1d       	adc	r31, r1
    60ee:	80 81       	ld	r24, Z
    60f0:	b6 01       	movw	r22, r12
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	5e d0       	rcall	.+188    	; 0x61b2 <fputc>
    60f6:	81 10       	cpse	r8, r1
    60f8:	f6 cf       	rjmp	.-20     	; 0x60e6 <vfprintf+0x390>
    60fa:	22 20       	and	r2, r2
    60fc:	09 f4       	brne	.+2      	; 0x6100 <vfprintf+0x3aa>
    60fe:	4e ce       	rjmp	.-868    	; 0x5d9c <vfprintf+0x46>
    6100:	b6 01       	movw	r22, r12
    6102:	80 e2       	ldi	r24, 0x20	; 32
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	55 d0       	rcall	.+170    	; 0x61b2 <fputc>
    6108:	2a 94       	dec	r2
    610a:	f7 cf       	rjmp	.-18     	; 0x60fa <vfprintf+0x3a4>
    610c:	f6 01       	movw	r30, r12
    610e:	86 81       	ldd	r24, Z+6	; 0x06
    6110:	97 81       	ldd	r25, Z+7	; 0x07
    6112:	02 c0       	rjmp	.+4      	; 0x6118 <vfprintf+0x3c2>
    6114:	8f ef       	ldi	r24, 0xFF	; 255
    6116:	9f ef       	ldi	r25, 0xFF	; 255
    6118:	2b 96       	adiw	r28, 0x0b	; 11
    611a:	cd bf       	out	0x3d, r28	; 61
    611c:	de bf       	out	0x3e, r29	; 62
    611e:	df 91       	pop	r29
    6120:	cf 91       	pop	r28
    6122:	1f 91       	pop	r17
    6124:	0f 91       	pop	r16
    6126:	ff 90       	pop	r15
    6128:	ef 90       	pop	r14
    612a:	df 90       	pop	r13
    612c:	cf 90       	pop	r12
    612e:	bf 90       	pop	r11
    6130:	af 90       	pop	r10
    6132:	9f 90       	pop	r9
    6134:	8f 90       	pop	r8
    6136:	7f 90       	pop	r7
    6138:	6f 90       	pop	r6
    613a:	5f 90       	pop	r5
    613c:	4f 90       	pop	r4
    613e:	3f 90       	pop	r3
    6140:	2f 90       	pop	r2
    6142:	08 95       	ret

00006144 <calloc>:
    6144:	0f 93       	push	r16
    6146:	1f 93       	push	r17
    6148:	cf 93       	push	r28
    614a:	df 93       	push	r29
    614c:	86 9f       	mul	r24, r22
    614e:	80 01       	movw	r16, r0
    6150:	87 9f       	mul	r24, r23
    6152:	10 0d       	add	r17, r0
    6154:	96 9f       	mul	r25, r22
    6156:	10 0d       	add	r17, r0
    6158:	11 24       	eor	r1, r1
    615a:	c8 01       	movw	r24, r16
    615c:	4e dc       	rcall	.-1892   	; 0x59fa <malloc>
    615e:	ec 01       	movw	r28, r24
    6160:	00 97       	sbiw	r24, 0x00	; 0
    6162:	21 f0       	breq	.+8      	; 0x616c <calloc+0x28>
    6164:	a8 01       	movw	r20, r16
    6166:	60 e0       	ldi	r22, 0x00	; 0
    6168:	70 e0       	ldi	r23, 0x00	; 0
    616a:	11 d0       	rcall	.+34     	; 0x618e <memset>
    616c:	ce 01       	movw	r24, r28
    616e:	df 91       	pop	r29
    6170:	cf 91       	pop	r28
    6172:	1f 91       	pop	r17
    6174:	0f 91       	pop	r16
    6176:	08 95       	ret

00006178 <strnlen_P>:
    6178:	fc 01       	movw	r30, r24
    617a:	05 90       	lpm	r0, Z+
    617c:	61 50       	subi	r22, 0x01	; 1
    617e:	70 40       	sbci	r23, 0x00	; 0
    6180:	01 10       	cpse	r0, r1
    6182:	d8 f7       	brcc	.-10     	; 0x617a <strnlen_P+0x2>
    6184:	80 95       	com	r24
    6186:	90 95       	com	r25
    6188:	8e 0f       	add	r24, r30
    618a:	9f 1f       	adc	r25, r31
    618c:	08 95       	ret

0000618e <memset>:
    618e:	dc 01       	movw	r26, r24
    6190:	01 c0       	rjmp	.+2      	; 0x6194 <memset+0x6>
    6192:	6d 93       	st	X+, r22
    6194:	41 50       	subi	r20, 0x01	; 1
    6196:	50 40       	sbci	r21, 0x00	; 0
    6198:	e0 f7       	brcc	.-8      	; 0x6192 <memset+0x4>
    619a:	08 95       	ret

0000619c <strnlen>:
    619c:	fc 01       	movw	r30, r24
    619e:	61 50       	subi	r22, 0x01	; 1
    61a0:	70 40       	sbci	r23, 0x00	; 0
    61a2:	01 90       	ld	r0, Z+
    61a4:	01 10       	cpse	r0, r1
    61a6:	d8 f7       	brcc	.-10     	; 0x619e <strnlen+0x2>
    61a8:	80 95       	com	r24
    61aa:	90 95       	com	r25
    61ac:	8e 0f       	add	r24, r30
    61ae:	9f 1f       	adc	r25, r31
    61b0:	08 95       	ret

000061b2 <fputc>:
    61b2:	0f 93       	push	r16
    61b4:	1f 93       	push	r17
    61b6:	cf 93       	push	r28
    61b8:	df 93       	push	r29
    61ba:	fb 01       	movw	r30, r22
    61bc:	23 81       	ldd	r18, Z+3	; 0x03
    61be:	21 fd       	sbrc	r18, 1
    61c0:	03 c0       	rjmp	.+6      	; 0x61c8 <fputc+0x16>
    61c2:	8f ef       	ldi	r24, 0xFF	; 255
    61c4:	9f ef       	ldi	r25, 0xFF	; 255
    61c6:	2c c0       	rjmp	.+88     	; 0x6220 <fputc+0x6e>
    61c8:	22 ff       	sbrs	r18, 2
    61ca:	16 c0       	rjmp	.+44     	; 0x61f8 <fputc+0x46>
    61cc:	46 81       	ldd	r20, Z+6	; 0x06
    61ce:	57 81       	ldd	r21, Z+7	; 0x07
    61d0:	24 81       	ldd	r18, Z+4	; 0x04
    61d2:	35 81       	ldd	r19, Z+5	; 0x05
    61d4:	42 17       	cp	r20, r18
    61d6:	53 07       	cpc	r21, r19
    61d8:	44 f4       	brge	.+16     	; 0x61ea <fputc+0x38>
    61da:	a0 81       	ld	r26, Z
    61dc:	b1 81       	ldd	r27, Z+1	; 0x01
    61de:	9d 01       	movw	r18, r26
    61e0:	2f 5f       	subi	r18, 0xFF	; 255
    61e2:	3f 4f       	sbci	r19, 0xFF	; 255
    61e4:	20 83       	st	Z, r18
    61e6:	31 83       	std	Z+1, r19	; 0x01
    61e8:	8c 93       	st	X, r24
    61ea:	26 81       	ldd	r18, Z+6	; 0x06
    61ec:	37 81       	ldd	r19, Z+7	; 0x07
    61ee:	2f 5f       	subi	r18, 0xFF	; 255
    61f0:	3f 4f       	sbci	r19, 0xFF	; 255
    61f2:	26 83       	std	Z+6, r18	; 0x06
    61f4:	37 83       	std	Z+7, r19	; 0x07
    61f6:	14 c0       	rjmp	.+40     	; 0x6220 <fputc+0x6e>
    61f8:	8b 01       	movw	r16, r22
    61fa:	ec 01       	movw	r28, r24
    61fc:	fb 01       	movw	r30, r22
    61fe:	00 84       	ldd	r0, Z+8	; 0x08
    6200:	f1 85       	ldd	r31, Z+9	; 0x09
    6202:	e0 2d       	mov	r30, r0
    6204:	19 95       	eicall
    6206:	89 2b       	or	r24, r25
    6208:	e1 f6       	brne	.-72     	; 0x61c2 <fputc+0x10>
    620a:	d8 01       	movw	r26, r16
    620c:	16 96       	adiw	r26, 0x06	; 6
    620e:	8d 91       	ld	r24, X+
    6210:	9c 91       	ld	r25, X
    6212:	17 97       	sbiw	r26, 0x07	; 7
    6214:	01 96       	adiw	r24, 0x01	; 1
    6216:	16 96       	adiw	r26, 0x06	; 6
    6218:	8d 93       	st	X+, r24
    621a:	9c 93       	st	X, r25
    621c:	17 97       	sbiw	r26, 0x07	; 7
    621e:	ce 01       	movw	r24, r28
    6220:	df 91       	pop	r29
    6222:	cf 91       	pop	r28
    6224:	1f 91       	pop	r17
    6226:	0f 91       	pop	r16
    6228:	08 95       	ret

0000622a <__ultoa_invert>:
    622a:	fa 01       	movw	r30, r20
    622c:	aa 27       	eor	r26, r26
    622e:	28 30       	cpi	r18, 0x08	; 8
    6230:	51 f1       	breq	.+84     	; 0x6286 <__ultoa_invert+0x5c>
    6232:	20 31       	cpi	r18, 0x10	; 16
    6234:	81 f1       	breq	.+96     	; 0x6296 <__ultoa_invert+0x6c>
    6236:	e8 94       	clt
    6238:	6f 93       	push	r22
    623a:	6e 7f       	andi	r22, 0xFE	; 254
    623c:	6e 5f       	subi	r22, 0xFE	; 254
    623e:	7f 4f       	sbci	r23, 0xFF	; 255
    6240:	8f 4f       	sbci	r24, 0xFF	; 255
    6242:	9f 4f       	sbci	r25, 0xFF	; 255
    6244:	af 4f       	sbci	r26, 0xFF	; 255
    6246:	b1 e0       	ldi	r27, 0x01	; 1
    6248:	3e d0       	rcall	.+124    	; 0x62c6 <__ultoa_invert+0x9c>
    624a:	b4 e0       	ldi	r27, 0x04	; 4
    624c:	3c d0       	rcall	.+120    	; 0x62c6 <__ultoa_invert+0x9c>
    624e:	67 0f       	add	r22, r23
    6250:	78 1f       	adc	r23, r24
    6252:	89 1f       	adc	r24, r25
    6254:	9a 1f       	adc	r25, r26
    6256:	a1 1d       	adc	r26, r1
    6258:	68 0f       	add	r22, r24
    625a:	79 1f       	adc	r23, r25
    625c:	8a 1f       	adc	r24, r26
    625e:	91 1d       	adc	r25, r1
    6260:	a1 1d       	adc	r26, r1
    6262:	6a 0f       	add	r22, r26
    6264:	71 1d       	adc	r23, r1
    6266:	81 1d       	adc	r24, r1
    6268:	91 1d       	adc	r25, r1
    626a:	a1 1d       	adc	r26, r1
    626c:	20 d0       	rcall	.+64     	; 0x62ae <__ultoa_invert+0x84>
    626e:	09 f4       	brne	.+2      	; 0x6272 <__ultoa_invert+0x48>
    6270:	68 94       	set
    6272:	3f 91       	pop	r19
    6274:	2a e0       	ldi	r18, 0x0A	; 10
    6276:	26 9f       	mul	r18, r22
    6278:	11 24       	eor	r1, r1
    627a:	30 19       	sub	r19, r0
    627c:	30 5d       	subi	r19, 0xD0	; 208
    627e:	31 93       	st	Z+, r19
    6280:	de f6       	brtc	.-74     	; 0x6238 <__ultoa_invert+0xe>
    6282:	cf 01       	movw	r24, r30
    6284:	08 95       	ret
    6286:	46 2f       	mov	r20, r22
    6288:	47 70       	andi	r20, 0x07	; 7
    628a:	40 5d       	subi	r20, 0xD0	; 208
    628c:	41 93       	st	Z+, r20
    628e:	b3 e0       	ldi	r27, 0x03	; 3
    6290:	0f d0       	rcall	.+30     	; 0x62b0 <__ultoa_invert+0x86>
    6292:	c9 f7       	brne	.-14     	; 0x6286 <__ultoa_invert+0x5c>
    6294:	f6 cf       	rjmp	.-20     	; 0x6282 <__ultoa_invert+0x58>
    6296:	46 2f       	mov	r20, r22
    6298:	4f 70       	andi	r20, 0x0F	; 15
    629a:	40 5d       	subi	r20, 0xD0	; 208
    629c:	4a 33       	cpi	r20, 0x3A	; 58
    629e:	18 f0       	brcs	.+6      	; 0x62a6 <__ultoa_invert+0x7c>
    62a0:	49 5d       	subi	r20, 0xD9	; 217
    62a2:	31 fd       	sbrc	r19, 1
    62a4:	40 52       	subi	r20, 0x20	; 32
    62a6:	41 93       	st	Z+, r20
    62a8:	02 d0       	rcall	.+4      	; 0x62ae <__ultoa_invert+0x84>
    62aa:	a9 f7       	brne	.-22     	; 0x6296 <__ultoa_invert+0x6c>
    62ac:	ea cf       	rjmp	.-44     	; 0x6282 <__ultoa_invert+0x58>
    62ae:	b4 e0       	ldi	r27, 0x04	; 4
    62b0:	a6 95       	lsr	r26
    62b2:	97 95       	ror	r25
    62b4:	87 95       	ror	r24
    62b6:	77 95       	ror	r23
    62b8:	67 95       	ror	r22
    62ba:	ba 95       	dec	r27
    62bc:	c9 f7       	brne	.-14     	; 0x62b0 <__ultoa_invert+0x86>
    62be:	00 97       	sbiw	r24, 0x00	; 0
    62c0:	61 05       	cpc	r22, r1
    62c2:	71 05       	cpc	r23, r1
    62c4:	08 95       	ret
    62c6:	9b 01       	movw	r18, r22
    62c8:	ac 01       	movw	r20, r24
    62ca:	0a 2e       	mov	r0, r26
    62cc:	06 94       	lsr	r0
    62ce:	57 95       	ror	r21
    62d0:	47 95       	ror	r20
    62d2:	37 95       	ror	r19
    62d4:	27 95       	ror	r18
    62d6:	ba 95       	dec	r27
    62d8:	c9 f7       	brne	.-14     	; 0x62cc <__ultoa_invert+0xa2>
    62da:	62 0f       	add	r22, r18
    62dc:	73 1f       	adc	r23, r19
    62de:	84 1f       	adc	r24, r20
    62e0:	95 1f       	adc	r25, r21
    62e2:	a0 1d       	adc	r26, r0
    62e4:	08 95       	ret

000062e6 <_exit>:
    62e6:	f8 94       	cli

000062e8 <__stop_program>:
    62e8:	ff cf       	rjmp	.-2      	; 0x62e8 <__stop_program>
