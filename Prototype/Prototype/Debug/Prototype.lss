
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000022fa  0000238e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  0080201c  0080201c  000023aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00002420  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d5a5  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000050a4  00000000  00000000  0000fd55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000053d4  00000000  00000000  00014df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014dc  00000000  00000000  0001a1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003de3e  00000000  00000000  0001b6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000411c  00000000  00000000  000594ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0005d606  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b8e6  00000000  00000000  0005d976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c1       	rjmp	.+760    	; 0x322 <__vector_10>
      2a:	00 00       	nop
      2c:	9d c1       	rjmp	.+826    	; 0x368 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_13>
      38:	1b c2       	rjmp	.+1078   	; 0x470 <__vector_14>
      3a:	00 00       	nop
      3c:	51 c2       	rjmp	.+1186   	; 0x4e0 <__vector_15>
      3e:	00 00       	nop
      40:	87 c2       	rjmp	.+1294   	; 0x550 <__vector_16>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__vector_17>
      46:	00 00       	nop
      48:	f3 c2       	rjmp	.+1510   	; 0x630 <__vector_18>
      4a:	00 00       	nop
      4c:	29 c3       	rjmp	.+1618   	; 0x6a0 <__vector_19>
      4e:	00 00       	nop
      50:	5f c3       	rjmp	.+1726   	; 0x710 <__vector_20>
      52:	00 00       	nop
      54:	95 c3       	rjmp	.+1834   	; 0x780 <__vector_21>
      56:	00 00       	nop
      58:	cb c3       	rjmp	.+1942   	; 0x7f0 <__vector_22>
      5a:	00 00       	nop
      5c:	01 c4       	rjmp	.+2050   	; 0x860 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_46>
      bc:	39 c6       	rjmp	.+3186   	; 0xd30 <__vector_47>
      be:	00 00       	nop
      c0:	6f c6       	rjmp	.+3294   	; 0xda0 <__vector_48>
      c2:	00 00       	nop
      c4:	a5 c6       	rjmp	.+3402   	; 0xe10 <__vector_49>
      c6:	00 00       	nop
      c8:	db c6       	rjmp	.+3510   	; 0xe80 <__vector_50>
      ca:	00 00       	nop
      cc:	11 c7       	rjmp	.+3618   	; 0xef0 <__vector_51>
      ce:	00 00       	nop
      d0:	47 c7       	rjmp	.+3726   	; 0xf60 <__vector_52>
      d2:	00 00       	nop
      d4:	7d c7       	rjmp	.+3834   	; 0xfd0 <__vector_53>
      d6:	00 00       	nop
      d8:	b3 c7       	rjmp	.+3942   	; 0x1040 <__vector_54>
      da:	00 00       	nop
      dc:	e9 c7       	rjmp	.+4050   	; 0x10b0 <__vector_55>
      de:	00 00       	nop
      e0:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_76>
     134:	cd c3       	rjmp	.+1946   	; 0x8d0 <__vector_77>
     136:	00 00       	nop
     138:	03 c4       	rjmp	.+2054   	; 0x940 <__vector_78>
     13a:	00 00       	nop
     13c:	39 c4       	rjmp	.+2162   	; 0x9b0 <__vector_79>
     13e:	00 00       	nop
     140:	6f c4       	rjmp	.+2270   	; 0xa20 <__vector_80>
     142:	00 00       	nop
     144:	a5 c4       	rjmp	.+2378   	; 0xa90 <__vector_81>
     146:	00 00       	nop
     148:	db c4       	rjmp	.+2486   	; 0xb00 <__vector_82>
     14a:	00 00       	nop
     14c:	11 c5       	rjmp	.+2594   	; 0xb70 <__vector_83>
     14e:	00 00       	nop
     150:	47 c5       	rjmp	.+2702   	; 0xbe0 <__vector_84>
     152:	00 00       	nop
     154:	7d c5       	rjmp	.+2810   	; 0xc50 <__vector_85>
     156:	00 00       	nop
     158:	b3 c5       	rjmp	.+2918   	; 0xcc0 <__vector_86>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_107>
     1b0:	ef c7       	rjmp	.+4062   	; 0x1190 <__vector_108>
     1b2:	00 00       	nop
     1b4:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_109>
     1b8:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_110>
     1bc:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_111>
     1c0:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_112>
     1c4:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_113>
     1c8:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_114>
     1cc:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_115>
     1d0:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_116>
     1d4:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea ef       	ldi	r30, 0xFA	; 250
     21c:	f2 e2       	ldi	r31, 0x22	; 34
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 31       	cpi	r26, 0x1C	; 28
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	ac e1       	ldi	r26, 0x1C	; 28
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 37       	cpi	r26, 0x7F	; 127
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 21 11 	call	0x2242	; 0x2242 <main>
     244:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	1f 92       	push	r1
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     25c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     260:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     264:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     268:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     26c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     270:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     274:	8f b7       	in	r24, 0x3f	; 63
     276:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     278:	f8 94       	cli
	return flags;
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	82 60       	ori	r24, 0x02	; 2
     284:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     286:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     288:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     28a:	81 ff       	sbrs	r24, 1
     28c:	fd cf       	rjmp	.-6      	; 0x288 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	80 e4       	ldi	r24, 0x40	; 64
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	40 d0       	rcall	.+128    	; 0x316 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     296:	8f b7       	in	r24, 0x3f	; 63
     298:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     29a:	f8 94       	cli
	return flags;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     29e:	e0 e5       	ldi	r30, 0x50	; 80
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8e 7f       	andi	r24, 0xFE	; 254
     2a6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	1f 92       	push	r1
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2be:	9f b7       	in	r25, 0x3f	; 63
     2c0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     2c2:	f8 94       	cli
	return flags;
     2c4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     2c6:	e8 2f       	mov	r30, r24
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	e0 59       	subi	r30, 0x90	; 144
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	60 95       	com	r22
     2d0:	80 81       	ld	r24, Z
     2d2:	68 23       	and	r22, r24
     2d4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2d6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	7c 01       	movw	r14, r24
     2ee:	8b 01       	movw	r16, r22
     2f0:	ea 01       	movw	r28, r20
	while (len) {
     2f2:	20 97       	sbiw	r28, 0x00	; 0
     2f4:	41 f0       	breq	.+16     	; 0x306 <usart_serial_write_packet+0x26>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     2f6:	f8 01       	movw	r30, r16
     2f8:	61 91       	ld	r22, Z+
     2fa:	8f 01       	movw	r16, r30
     2fc:	c7 01       	movw	r24, r14
     2fe:	0e 94 57 0c 	call	0x18ae	; 0x18ae <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     302:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     304:	c1 f7       	brne	.-16     	; 0x2f6 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     316:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     318:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     31a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     31c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     31e:	60 83       	st	Z, r22
	ret                             // Return to caller
     320:	08 95       	ret

00000322 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	0b b6       	in	r0, 0x3b	; 59
     334:	0f 92       	push	r0
     336:	1b be       	out	0x3b, r1	; 59
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	ef 93       	push	r30
     33e:	ff 93       	push	r31
	rtc_data.counter_high++;
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	f0 e2       	ldi	r31, 0x20	; 32
     344:	80 81       	ld	r24, Z
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	80 83       	st	Z, r24
     34c:	91 83       	std	Z+1, r25	; 0x01
}
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	9f 91       	pop	r25
     354:	8f 91       	pop	r24
     356:	0f 90       	pop	r0
     358:	0b be       	out	0x3b, r0	; 59
     35a:	0f 90       	pop	r0
     35c:	08 be       	out	0x38, r0	; 56
     35e:	0f 90       	pop	r0
     360:	0f be       	out	0x3f, r0	; 63
     362:	0f 90       	pop	r0
     364:	1f 90       	pop	r1
     366:	18 95       	reti

00000368 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     368:	1f 92       	push	r1
     36a:	0f 92       	push	r0
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	0f 92       	push	r0
     370:	11 24       	eor	r1, r1
     372:	08 b6       	in	r0, 0x38	; 56
     374:	0f 92       	push	r0
     376:	18 be       	out	0x38, r1	; 56
     378:	09 b6       	in	r0, 0x39	; 57
     37a:	0f 92       	push	r0
     37c:	19 be       	out	0x39, r1	; 57
     37e:	0b b6       	in	r0, 0x3b	; 59
     380:	0f 92       	push	r0
     382:	1b be       	out	0x3b, r1	; 59
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	2f 93       	push	r18
     392:	3f 93       	push	r19
     394:	4f 93       	push	r20
     396:	5f 93       	push	r21
     398:	6f 93       	push	r22
     39a:	7f 93       	push	r23
     39c:	8f 93       	push	r24
     39e:	9f 93       	push	r25
     3a0:	af 93       	push	r26
     3a2:	bf 93       	push	r27
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     3a8:	e7 e7       	ldi	r30, 0x77	; 119
     3aa:	f0 e2       	ldi	r31, 0x20	; 32
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	22 81       	ldd	r18, Z+2	; 0x02
     3b2:	33 81       	ldd	r19, Z+3	; 0x03
     3b4:	82 17       	cp	r24, r18
     3b6:	93 07       	cpc	r25, r19
     3b8:	f0 f1       	brcs	.+124    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     3c0:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <rtc_data+0x6>
     3c4:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <rtc_data+0x7>
     3c8:	30 97       	sbiw	r30, 0x00	; 0
     3ca:	a9 f1       	breq	.+106    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     3cc:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     3d0:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3d4:	a0 e0       	ldi	r26, 0x00	; 0
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	dc 01       	movw	r26, r24
     3da:	99 27       	eor	r25, r25
     3dc:	88 27       	eor	r24, r24
     3de:	ab 01       	movw	r20, r22
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	8c 01       	movw	r16, r24
     3e6:	9d 01       	movw	r18, r26
     3e8:	04 2b       	or	r16, r20
     3ea:	15 2b       	or	r17, r21
     3ec:	26 2b       	or	r18, r22
     3ee:	37 2b       	or	r19, r23
     3f0:	c9 01       	movw	r24, r18
     3f2:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3f4:	a7 e7       	ldi	r26, 0x77	; 119
     3f6:	b0 e2       	ldi	r27, 0x20	; 32
     3f8:	12 96       	adiw	r26, 0x02	; 2
     3fa:	0d 91       	ld	r16, X+
     3fc:	1c 91       	ld	r17, X
     3fe:	13 97       	sbiw	r26, 0x03	; 3
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	98 01       	movw	r18, r16
     406:	11 27       	eor	r17, r17
     408:	00 27       	eor	r16, r16
     40a:	14 96       	adiw	r26, 0x04	; 4
     40c:	cd 90       	ld	r12, X+
     40e:	dc 90       	ld	r13, X
     410:	15 97       	sbiw	r26, 0x05	; 5
     412:	e1 2c       	mov	r14, r1
     414:	f1 2c       	mov	r15, r1
     416:	0c 29       	or	r16, r12
     418:	1d 29       	or	r17, r13
     41a:	2e 29       	or	r18, r14
     41c:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     41e:	06 17       	cp	r16, r22
     420:	17 07       	cpc	r17, r23
     422:	28 07       	cpc	r18, r24
     424:	39 07       	cpc	r19, r25
     426:	30 f0       	brcs	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				count = alarm + 1;
     428:	c9 01       	movw	r24, r18
     42a:	b8 01       	movw	r22, r16
     42c:	6f 5f       	subi	r22, 0xFF	; 255
     42e:	7f 4f       	sbci	r23, 0xFF	; 255
     430:	8f 4f       	sbci	r24, 0xFF	; 255
     432:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     434:	19 95       	eicall
		}
	}
}
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	7f 91       	pop	r23
     444:	6f 91       	pop	r22
     446:	5f 91       	pop	r21
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	df 90       	pop	r13
     458:	cf 90       	pop	r12
     45a:	0f 90       	pop	r0
     45c:	0b be       	out	0x3b, r0	; 59
     45e:	0f 90       	pop	r0
     460:	09 be       	out	0x39, r0	; 57
     462:	0f 90       	pop	r0
     464:	08 be       	out	0x38, r0	; 56
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	08 b6       	in	r0, 0x38	; 56
     47c:	0f 92       	push	r0
     47e:	18 be       	out	0x38, r1	; 56
     480:	09 b6       	in	r0, 0x39	; 57
     482:	0f 92       	push	r0
     484:	19 be       	out	0x39, r1	; 57
     486:	0b b6       	in	r0, 0x3b	; 59
     488:	0f 92       	push	r0
     48a:	1b be       	out	0x3b, r1	; 59
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     4a4:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcc0_ovf_callback>
     4a8:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcc0_ovf_callback+0x1>
     4ac:	30 97       	sbiw	r30, 0x00	; 0
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     4b0:	19 95       	eicall
	}
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	0f 90       	pop	r0
     4cc:	0b be       	out	0x3b, r0	; 59
     4ce:	0f 90       	pop	r0
     4d0:	09 be       	out	0x39, r0	; 57
     4d2:	0f 90       	pop	r0
     4d4:	08 be       	out	0x38, r0	; 56
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	08 b6       	in	r0, 0x38	; 56
     4ec:	0f 92       	push	r0
     4ee:	18 be       	out	0x38, r1	; 56
     4f0:	09 b6       	in	r0, 0x39	; 57
     4f2:	0f 92       	push	r0
     4f4:	19 be       	out	0x39, r1	; 57
     4f6:	0b b6       	in	r0, 0x3b	; 59
     4f8:	0f 92       	push	r0
     4fa:	1b be       	out	0x3b, r1	; 59
     4fc:	2f 93       	push	r18
     4fe:	3f 93       	push	r19
     500:	4f 93       	push	r20
     502:	5f 93       	push	r21
     504:	6f 93       	push	r22
     506:	7f 93       	push	r23
     508:	8f 93       	push	r24
     50a:	9f 93       	push	r25
     50c:	af 93       	push	r26
     50e:	bf 93       	push	r27
     510:	ef 93       	push	r30
     512:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     514:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcc0_err_callback>
     518:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcc0_err_callback+0x1>
     51c:	30 97       	sbiw	r30, 0x00	; 0
     51e:	09 f0       	breq	.+2      	; 0x522 <__vector_15+0x42>
		tc_tcc0_err_callback();
     520:	19 95       	eicall
	}
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0b be       	out	0x3b, r0	; 59
     53e:	0f 90       	pop	r0
     540:	09 be       	out	0x39, r0	; 57
     542:	0f 90       	pop	r0
     544:	08 be       	out	0x38, r0	; 56
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	08 b6       	in	r0, 0x38	; 56
     55c:	0f 92       	push	r0
     55e:	18 be       	out	0x38, r1	; 56
     560:	09 b6       	in	r0, 0x39	; 57
     562:	0f 92       	push	r0
     564:	19 be       	out	0x39, r1	; 57
     566:	0b b6       	in	r0, 0x3b	; 59
     568:	0f 92       	push	r0
     56a:	1b be       	out	0x3b, r1	; 59
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     584:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcc0_cca_callback>
     588:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcc0_cca_callback+0x1>
     58c:	30 97       	sbiw	r30, 0x00	; 0
     58e:	09 f0       	breq	.+2      	; 0x592 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     590:	19 95       	eicall
	}
}
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	0f 90       	pop	r0
     5ac:	0b be       	out	0x3b, r0	; 59
     5ae:	0f 90       	pop	r0
     5b0:	09 be       	out	0x39, r0	; 57
     5b2:	0f 90       	pop	r0
     5b4:	08 be       	out	0x38, r0	; 56
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	08 b6       	in	r0, 0x38	; 56
     5cc:	0f 92       	push	r0
     5ce:	18 be       	out	0x38, r1	; 56
     5d0:	09 b6       	in	r0, 0x39	; 57
     5d2:	0f 92       	push	r0
     5d4:	19 be       	out	0x39, r1	; 57
     5d6:	0b b6       	in	r0, 0x3b	; 59
     5d8:	0f 92       	push	r0
     5da:	1b be       	out	0x3b, r1	; 59
     5dc:	2f 93       	push	r18
     5de:	3f 93       	push	r19
     5e0:	4f 93       	push	r20
     5e2:	5f 93       	push	r21
     5e4:	6f 93       	push	r22
     5e6:	7f 93       	push	r23
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	af 93       	push	r26
     5ee:	bf 93       	push	r27
     5f0:	ef 93       	push	r30
     5f2:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     5f4:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcc0_ccb_callback>
     5f8:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcc0_ccb_callback+0x1>
     5fc:	30 97       	sbiw	r30, 0x00	; 0
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     600:	19 95       	eicall
	}
}
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	0f 90       	pop	r0
     61c:	0b be       	out	0x3b, r0	; 59
     61e:	0f 90       	pop	r0
     620:	09 be       	out	0x39, r0	; 57
     622:	0f 90       	pop	r0
     624:	08 be       	out	0x38, r0	; 56
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f 90       	pop	r0
     62c:	1f 90       	pop	r1
     62e:	18 95       	reti

00000630 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	08 b6       	in	r0, 0x38	; 56
     63c:	0f 92       	push	r0
     63e:	18 be       	out	0x38, r1	; 56
     640:	09 b6       	in	r0, 0x39	; 57
     642:	0f 92       	push	r0
     644:	19 be       	out	0x39, r1	; 57
     646:	0b b6       	in	r0, 0x3b	; 59
     648:	0f 92       	push	r0
     64a:	1b be       	out	0x3b, r1	; 59
     64c:	2f 93       	push	r18
     64e:	3f 93       	push	r19
     650:	4f 93       	push	r20
     652:	5f 93       	push	r21
     654:	6f 93       	push	r22
     656:	7f 93       	push	r23
     658:	8f 93       	push	r24
     65a:	9f 93       	push	r25
     65c:	af 93       	push	r26
     65e:	bf 93       	push	r27
     660:	ef 93       	push	r30
     662:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     664:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcc0_ccc_callback>
     668:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcc0_ccc_callback+0x1>
     66c:	30 97       	sbiw	r30, 0x00	; 0
     66e:	09 f0       	breq	.+2      	; 0x672 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     670:	19 95       	eicall
	}
}
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	09 be       	out	0x39, r0	; 57
     692:	0f 90       	pop	r0
     694:	08 be       	out	0x38, r0	; 56
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	08 b6       	in	r0, 0x38	; 56
     6ac:	0f 92       	push	r0
     6ae:	18 be       	out	0x38, r1	; 56
     6b0:	09 b6       	in	r0, 0x39	; 57
     6b2:	0f 92       	push	r0
     6b4:	19 be       	out	0x39, r1	; 57
     6b6:	0b b6       	in	r0, 0x3b	; 59
     6b8:	0f 92       	push	r0
     6ba:	1b be       	out	0x3b, r1	; 59
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     6d4:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcc0_ccd_callback>
     6d8:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcc0_ccd_callback+0x1>
     6dc:	30 97       	sbiw	r30, 0x00	; 0
     6de:	09 f0       	breq	.+2      	; 0x6e2 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     6e0:	19 95       	eicall
	}
}
     6e2:	ff 91       	pop	r31
     6e4:	ef 91       	pop	r30
     6e6:	bf 91       	pop	r27
     6e8:	af 91       	pop	r26
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	7f 91       	pop	r23
     6f0:	6f 91       	pop	r22
     6f2:	5f 91       	pop	r21
     6f4:	4f 91       	pop	r20
     6f6:	3f 91       	pop	r19
     6f8:	2f 91       	pop	r18
     6fa:	0f 90       	pop	r0
     6fc:	0b be       	out	0x3b, r0	; 59
     6fe:	0f 90       	pop	r0
     700:	09 be       	out	0x39, r0	; 57
     702:	0f 90       	pop	r0
     704:	08 be       	out	0x38, r0	; 56
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	08 b6       	in	r0, 0x38	; 56
     71c:	0f 92       	push	r0
     71e:	18 be       	out	0x38, r1	; 56
     720:	09 b6       	in	r0, 0x39	; 57
     722:	0f 92       	push	r0
     724:	19 be       	out	0x39, r1	; 57
     726:	0b b6       	in	r0, 0x3b	; 59
     728:	0f 92       	push	r0
     72a:	1b be       	out	0x3b, r1	; 59
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	4f 93       	push	r20
     732:	5f 93       	push	r21
     734:	6f 93       	push	r22
     736:	7f 93       	push	r23
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     744:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcc1_ovf_callback>
     748:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcc1_ovf_callback+0x1>
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	09 f0       	breq	.+2      	; 0x752 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     750:	19 95       	eicall
	}
}
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0b be       	out	0x3b, r0	; 59
     76e:	0f 90       	pop	r0
     770:	09 be       	out	0x39, r0	; 57
     772:	0f 90       	pop	r0
     774:	08 be       	out	0x38, r0	; 56
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	08 b6       	in	r0, 0x38	; 56
     78c:	0f 92       	push	r0
     78e:	18 be       	out	0x38, r1	; 56
     790:	09 b6       	in	r0, 0x39	; 57
     792:	0f 92       	push	r0
     794:	19 be       	out	0x39, r1	; 57
     796:	0b b6       	in	r0, 0x3b	; 59
     798:	0f 92       	push	r0
     79a:	1b be       	out	0x3b, r1	; 59
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     7b4:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcc1_err_callback>
     7b8:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcc1_err_callback+0x1>
     7bc:	30 97       	sbiw	r30, 0x00	; 0
     7be:	09 f0       	breq	.+2      	; 0x7c2 <__vector_21+0x42>
		tc_tcc1_err_callback();
     7c0:	19 95       	eicall
	}
}
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	7f 91       	pop	r23
     7d0:	6f 91       	pop	r22
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	0f 90       	pop	r0
     7dc:	0b be       	out	0x3b, r0	; 59
     7de:	0f 90       	pop	r0
     7e0:	09 be       	out	0x39, r0	; 57
     7e2:	0f 90       	pop	r0
     7e4:	08 be       	out	0x38, r0	; 56
     7e6:	0f 90       	pop	r0
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	18 95       	reti

000007f0 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	08 b6       	in	r0, 0x38	; 56
     7fc:	0f 92       	push	r0
     7fe:	18 be       	out	0x38, r1	; 56
     800:	09 b6       	in	r0, 0x39	; 57
     802:	0f 92       	push	r0
     804:	19 be       	out	0x39, r1	; 57
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	1b be       	out	0x3b, r1	; 59
     80c:	2f 93       	push	r18
     80e:	3f 93       	push	r19
     810:	4f 93       	push	r20
     812:	5f 93       	push	r21
     814:	6f 93       	push	r22
     816:	7f 93       	push	r23
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	af 93       	push	r26
     81e:	bf 93       	push	r27
     820:	ef 93       	push	r30
     822:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     824:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcc1_cca_callback>
     828:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcc1_cca_callback+0x1>
     82c:	30 97       	sbiw	r30, 0x00	; 0
     82e:	09 f0       	breq	.+2      	; 0x832 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     830:	19 95       	eicall
	}
}
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0b be       	out	0x3b, r0	; 59
     84e:	0f 90       	pop	r0
     850:	09 be       	out	0x39, r0	; 57
     852:	0f 90       	pop	r0
     854:	08 be       	out	0x38, r0	; 56
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	08 b6       	in	r0, 0x38	; 56
     86c:	0f 92       	push	r0
     86e:	18 be       	out	0x38, r1	; 56
     870:	09 b6       	in	r0, 0x39	; 57
     872:	0f 92       	push	r0
     874:	19 be       	out	0x39, r1	; 57
     876:	0b b6       	in	r0, 0x3b	; 59
     878:	0f 92       	push	r0
     87a:	1b be       	out	0x3b, r1	; 59
     87c:	2f 93       	push	r18
     87e:	3f 93       	push	r19
     880:	4f 93       	push	r20
     882:	5f 93       	push	r21
     884:	6f 93       	push	r22
     886:	7f 93       	push	r23
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	af 93       	push	r26
     88e:	bf 93       	push	r27
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     894:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcc1_ccb_callback>
     898:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcc1_ccb_callback+0x1>
     89c:	30 97       	sbiw	r30, 0x00	; 0
     89e:	09 f0       	breq	.+2      	; 0x8a2 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     8a0:	19 95       	eicall
	}
}
     8a2:	ff 91       	pop	r31
     8a4:	ef 91       	pop	r30
     8a6:	bf 91       	pop	r27
     8a8:	af 91       	pop	r26
     8aa:	9f 91       	pop	r25
     8ac:	8f 91       	pop	r24
     8ae:	7f 91       	pop	r23
     8b0:	6f 91       	pop	r22
     8b2:	5f 91       	pop	r21
     8b4:	4f 91       	pop	r20
     8b6:	3f 91       	pop	r19
     8b8:	2f 91       	pop	r18
     8ba:	0f 90       	pop	r0
     8bc:	0b be       	out	0x3b, r0	; 59
     8be:	0f 90       	pop	r0
     8c0:	09 be       	out	0x39, r0	; 57
     8c2:	0f 90       	pop	r0
     8c4:	08 be       	out	0x38, r0	; 56
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	08 b6       	in	r0, 0x38	; 56
     8dc:	0f 92       	push	r0
     8de:	18 be       	out	0x38, r1	; 56
     8e0:	09 b6       	in	r0, 0x39	; 57
     8e2:	0f 92       	push	r0
     8e4:	19 be       	out	0x39, r1	; 57
     8e6:	0b b6       	in	r0, 0x3b	; 59
     8e8:	0f 92       	push	r0
     8ea:	1b be       	out	0x3b, r1	; 59
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     904:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcd0_ovf_callback>
     908:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcd0_ovf_callback+0x1>
     90c:	30 97       	sbiw	r30, 0x00	; 0
     90e:	09 f0       	breq	.+2      	; 0x912 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     910:	19 95       	eicall
	}
}
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0b be       	out	0x3b, r0	; 59
     92e:	0f 90       	pop	r0
     930:	09 be       	out	0x39, r0	; 57
     932:	0f 90       	pop	r0
     934:	08 be       	out	0x38, r0	; 56
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	08 b6       	in	r0, 0x38	; 56
     94c:	0f 92       	push	r0
     94e:	18 be       	out	0x38, r1	; 56
     950:	09 b6       	in	r0, 0x39	; 57
     952:	0f 92       	push	r0
     954:	19 be       	out	0x39, r1	; 57
     956:	0b b6       	in	r0, 0x3b	; 59
     958:	0f 92       	push	r0
     95a:	1b be       	out	0x3b, r1	; 59
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     974:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcd0_err_callback>
     978:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcd0_err_callback+0x1>
     97c:	30 97       	sbiw	r30, 0x00	; 0
     97e:	09 f0       	breq	.+2      	; 0x982 <__vector_78+0x42>
		tc_tcd0_err_callback();
     980:	19 95       	eicall
	}
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0b be       	out	0x3b, r0	; 59
     99e:	0f 90       	pop	r0
     9a0:	09 be       	out	0x39, r0	; 57
     9a2:	0f 90       	pop	r0
     9a4:	08 be       	out	0x38, r0	; 56
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	08 b6       	in	r0, 0x38	; 56
     9bc:	0f 92       	push	r0
     9be:	18 be       	out	0x38, r1	; 56
     9c0:	09 b6       	in	r0, 0x39	; 57
     9c2:	0f 92       	push	r0
     9c4:	19 be       	out	0x39, r1	; 57
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	1b be       	out	0x3b, r1	; 59
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     9e4:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcd0_cca_callback>
     9e8:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcd0_cca_callback+0x1>
     9ec:	30 97       	sbiw	r30, 0x00	; 0
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     9f0:	19 95       	eicall
	}
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0b be       	out	0x3b, r0	; 59
     a0e:	0f 90       	pop	r0
     a10:	09 be       	out	0x39, r0	; 57
     a12:	0f 90       	pop	r0
     a14:	08 be       	out	0x38, r0	; 56
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	08 b6       	in	r0, 0x38	; 56
     a2c:	0f 92       	push	r0
     a2e:	18 be       	out	0x38, r1	; 56
     a30:	09 b6       	in	r0, 0x39	; 57
     a32:	0f 92       	push	r0
     a34:	19 be       	out	0x39, r1	; 57
     a36:	0b b6       	in	r0, 0x3b	; 59
     a38:	0f 92       	push	r0
     a3a:	1b be       	out	0x3b, r1	; 59
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     a54:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcd0_ccb_callback>
     a58:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcd0_ccb_callback+0x1>
     a5c:	30 97       	sbiw	r30, 0x00	; 0
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     a60:	19 95       	eicall
	}
}
     a62:	ff 91       	pop	r31
     a64:	ef 91       	pop	r30
     a66:	bf 91       	pop	r27
     a68:	af 91       	pop	r26
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	7f 91       	pop	r23
     a70:	6f 91       	pop	r22
     a72:	5f 91       	pop	r21
     a74:	4f 91       	pop	r20
     a76:	3f 91       	pop	r19
     a78:	2f 91       	pop	r18
     a7a:	0f 90       	pop	r0
     a7c:	0b be       	out	0x3b, r0	; 59
     a7e:	0f 90       	pop	r0
     a80:	09 be       	out	0x39, r0	; 57
     a82:	0f 90       	pop	r0
     a84:	08 be       	out	0x38, r0	; 56
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	08 b6       	in	r0, 0x38	; 56
     a9c:	0f 92       	push	r0
     a9e:	18 be       	out	0x38, r1	; 56
     aa0:	09 b6       	in	r0, 0x39	; 57
     aa2:	0f 92       	push	r0
     aa4:	19 be       	out	0x39, r1	; 57
     aa6:	0b b6       	in	r0, 0x3b	; 59
     aa8:	0f 92       	push	r0
     aaa:	1b be       	out	0x3b, r1	; 59
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	ef 93       	push	r30
     ac2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     ac4:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcd0_ccc_callback>
     ac8:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcd0_ccc_callback+0x1>
     acc:	30 97       	sbiw	r30, 0x00	; 0
     ace:	09 f0       	breq	.+2      	; 0xad2 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     ad0:	19 95       	eicall
	}
}
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	0b be       	out	0x3b, r0	; 59
     aee:	0f 90       	pop	r0
     af0:	09 be       	out	0x39, r0	; 57
     af2:	0f 90       	pop	r0
     af4:	08 be       	out	0x38, r0	; 56
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	08 b6       	in	r0, 0x38	; 56
     b0c:	0f 92       	push	r0
     b0e:	18 be       	out	0x38, r1	; 56
     b10:	09 b6       	in	r0, 0x39	; 57
     b12:	0f 92       	push	r0
     b14:	19 be       	out	0x39, r1	; 57
     b16:	0b b6       	in	r0, 0x3b	; 59
     b18:	0f 92       	push	r0
     b1a:	1b be       	out	0x3b, r1	; 59
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     b34:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tcd0_ccd_callback>
     b38:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tcd0_ccd_callback+0x1>
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     b40:	19 95       	eicall
	}
}
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	7f 91       	pop	r23
     b50:	6f 91       	pop	r22
     b52:	5f 91       	pop	r21
     b54:	4f 91       	pop	r20
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0b be       	out	0x3b, r0	; 59
     b5e:	0f 90       	pop	r0
     b60:	09 be       	out	0x39, r0	; 57
     b62:	0f 90       	pop	r0
     b64:	08 be       	out	0x38, r0	; 56
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	08 b6       	in	r0, 0x38	; 56
     b7c:	0f 92       	push	r0
     b7e:	18 be       	out	0x38, r1	; 56
     b80:	09 b6       	in	r0, 0x39	; 57
     b82:	0f 92       	push	r0
     b84:	19 be       	out	0x39, r1	; 57
     b86:	0b b6       	in	r0, 0x3b	; 59
     b88:	0f 92       	push	r0
     b8a:	1b be       	out	0x3b, r1	; 59
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     ba4:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tcd1_ovf_callback>
     ba8:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tcd1_ovf_callback+0x1>
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     bb0:	19 95       	eicall
	}
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0b be       	out	0x3b, r0	; 59
     bce:	0f 90       	pop	r0
     bd0:	09 be       	out	0x39, r0	; 57
     bd2:	0f 90       	pop	r0
     bd4:	08 be       	out	0x38, r0	; 56
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	08 b6       	in	r0, 0x38	; 56
     bec:	0f 92       	push	r0
     bee:	18 be       	out	0x38, r1	; 56
     bf0:	09 b6       	in	r0, 0x39	; 57
     bf2:	0f 92       	push	r0
     bf4:	19 be       	out	0x39, r1	; 57
     bf6:	0b b6       	in	r0, 0x3b	; 59
     bf8:	0f 92       	push	r0
     bfa:	1b be       	out	0x3b, r1	; 59
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     c14:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcd1_err_callback>
     c18:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcd1_err_callback+0x1>
     c1c:	30 97       	sbiw	r30, 0x00	; 0
     c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_84+0x42>
		tc_tcd1_err_callback();
     c20:	19 95       	eicall
	}
}
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0b be       	out	0x3b, r0	; 59
     c3e:	0f 90       	pop	r0
     c40:	09 be       	out	0x39, r0	; 57
     c42:	0f 90       	pop	r0
     c44:	08 be       	out	0x38, r0	; 56
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	08 b6       	in	r0, 0x38	; 56
     c5c:	0f 92       	push	r0
     c5e:	18 be       	out	0x38, r1	; 56
     c60:	09 b6       	in	r0, 0x39	; 57
     c62:	0f 92       	push	r0
     c64:	19 be       	out	0x39, r1	; 57
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	1b be       	out	0x3b, r1	; 59
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     c84:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcd1_cca_callback>
     c88:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcd1_cca_callback+0x1>
     c8c:	30 97       	sbiw	r30, 0x00	; 0
     c8e:	09 f0       	breq	.+2      	; 0xc92 <__vector_85+0x42>
		tc_tcd1_cca_callback();
     c90:	19 95       	eicall
	}
}
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0b be       	out	0x3b, r0	; 59
     cae:	0f 90       	pop	r0
     cb0:	09 be       	out	0x39, r0	; 57
     cb2:	0f 90       	pop	r0
     cb4:	08 be       	out	0x38, r0	; 56
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	08 b6       	in	r0, 0x38	; 56
     ccc:	0f 92       	push	r0
     cce:	18 be       	out	0x38, r1	; 56
     cd0:	09 b6       	in	r0, 0x39	; 57
     cd2:	0f 92       	push	r0
     cd4:	19 be       	out	0x39, r1	; 57
     cd6:	0b b6       	in	r0, 0x3b	; 59
     cd8:	0f 92       	push	r0
     cda:	1b be       	out	0x3b, r1	; 59
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     cf4:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcd1_ccb_callback>
     cf8:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcd1_ccb_callback+0x1>
     cfc:	30 97       	sbiw	r30, 0x00	; 0
     cfe:	09 f0       	breq	.+2      	; 0xd02 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     d00:	19 95       	eicall
	}
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	09 be       	out	0x39, r0	; 57
     d22:	0f 90       	pop	r0
     d24:	08 be       	out	0x38, r0	; 56
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	08 b6       	in	r0, 0x38	; 56
     d3c:	0f 92       	push	r0
     d3e:	18 be       	out	0x38, r1	; 56
     d40:	09 b6       	in	r0, 0x39	; 57
     d42:	0f 92       	push	r0
     d44:	19 be       	out	0x39, r1	; 57
     d46:	0b b6       	in	r0, 0x3b	; 59
     d48:	0f 92       	push	r0
     d4a:	1b be       	out	0x3b, r1	; 59
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     d64:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tce0_ovf_callback>
     d68:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tce0_ovf_callback+0x1>
     d6c:	30 97       	sbiw	r30, 0x00	; 0
     d6e:	09 f0       	breq	.+2      	; 0xd72 <__vector_47+0x42>
		tc_tce0_ovf_callback();
     d70:	19 95       	eicall
	}
}
     d72:	ff 91       	pop	r31
     d74:	ef 91       	pop	r30
     d76:	bf 91       	pop	r27
     d78:	af 91       	pop	r26
     d7a:	9f 91       	pop	r25
     d7c:	8f 91       	pop	r24
     d7e:	7f 91       	pop	r23
     d80:	6f 91       	pop	r22
     d82:	5f 91       	pop	r21
     d84:	4f 91       	pop	r20
     d86:	3f 91       	pop	r19
     d88:	2f 91       	pop	r18
     d8a:	0f 90       	pop	r0
     d8c:	0b be       	out	0x3b, r0	; 59
     d8e:	0f 90       	pop	r0
     d90:	09 be       	out	0x39, r0	; 57
     d92:	0f 90       	pop	r0
     d94:	08 be       	out	0x38, r0	; 56
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	08 b6       	in	r0, 0x38	; 56
     dac:	0f 92       	push	r0
     dae:	18 be       	out	0x38, r1	; 56
     db0:	09 b6       	in	r0, 0x39	; 57
     db2:	0f 92       	push	r0
     db4:	19 be       	out	0x39, r1	; 57
     db6:	0b b6       	in	r0, 0x3b	; 59
     db8:	0f 92       	push	r0
     dba:	1b be       	out	0x3b, r1	; 59
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     dd4:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tce0_err_callback>
     dd8:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tce0_err_callback+0x1>
     ddc:	30 97       	sbiw	r30, 0x00	; 0
     dde:	09 f0       	breq	.+2      	; 0xde2 <__vector_48+0x42>
		tc_tce0_err_callback();
     de0:	19 95       	eicall
	}
}
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	0f 90       	pop	r0
     dfc:	0b be       	out	0x3b, r0	; 59
     dfe:	0f 90       	pop	r0
     e00:	09 be       	out	0x39, r0	; 57
     e02:	0f 90       	pop	r0
     e04:	08 be       	out	0x38, r0	; 56
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
     e1a:	08 b6       	in	r0, 0x38	; 56
     e1c:	0f 92       	push	r0
     e1e:	18 be       	out	0x38, r1	; 56
     e20:	09 b6       	in	r0, 0x39	; 57
     e22:	0f 92       	push	r0
     e24:	19 be       	out	0x39, r1	; 57
     e26:	0b b6       	in	r0, 0x3b	; 59
     e28:	0f 92       	push	r0
     e2a:	1b be       	out	0x3b, r1	; 59
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     e44:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tce0_cca_callback>
     e48:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tce0_cca_callback+0x1>
     e4c:	30 97       	sbiw	r30, 0x00	; 0
     e4e:	09 f0       	breq	.+2      	; 0xe52 <__vector_49+0x42>
		tc_tce0_cca_callback();
     e50:	19 95       	eicall
	}
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0b be       	out	0x3b, r0	; 59
     e6e:	0f 90       	pop	r0
     e70:	09 be       	out	0x39, r0	; 57
     e72:	0f 90       	pop	r0
     e74:	08 be       	out	0x38, r0	; 56
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	08 b6       	in	r0, 0x38	; 56
     e8c:	0f 92       	push	r0
     e8e:	18 be       	out	0x38, r1	; 56
     e90:	09 b6       	in	r0, 0x39	; 57
     e92:	0f 92       	push	r0
     e94:	19 be       	out	0x39, r1	; 57
     e96:	0b b6       	in	r0, 0x3b	; 59
     e98:	0f 92       	push	r0
     e9a:	1b be       	out	0x3b, r1	; 59
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     eb4:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tce0_ccb_callback>
     eb8:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tce0_ccb_callback+0x1>
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	09 f0       	breq	.+2      	; 0xec2 <__vector_50+0x42>
		tc_tce0_ccb_callback();
     ec0:	19 95       	eicall
	}
}
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0b be       	out	0x3b, r0	; 59
     ede:	0f 90       	pop	r0
     ee0:	09 be       	out	0x39, r0	; 57
     ee2:	0f 90       	pop	r0
     ee4:	08 be       	out	0x38, r0	; 56
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	08 b6       	in	r0, 0x38	; 56
     efc:	0f 92       	push	r0
     efe:	18 be       	out	0x38, r1	; 56
     f00:	09 b6       	in	r0, 0x39	; 57
     f02:	0f 92       	push	r0
     f04:	19 be       	out	0x39, r1	; 57
     f06:	0b b6       	in	r0, 0x3b	; 59
     f08:	0f 92       	push	r0
     f0a:	1b be       	out	0x3b, r1	; 59
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     f24:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tce0_ccc_callback>
     f28:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tce0_ccc_callback+0x1>
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__vector_51+0x42>
		tc_tce0_ccc_callback();
     f30:	19 95       	eicall
	}
}
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	09 be       	out	0x39, r0	; 57
     f52:	0f 90       	pop	r0
     f54:	08 be       	out	0x38, r0	; 56
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	08 b6       	in	r0, 0x38	; 56
     f6c:	0f 92       	push	r0
     f6e:	18 be       	out	0x38, r1	; 56
     f70:	09 b6       	in	r0, 0x39	; 57
     f72:	0f 92       	push	r0
     f74:	19 be       	out	0x39, r1	; 57
     f76:	0b b6       	in	r0, 0x3b	; 59
     f78:	0f 92       	push	r0
     f7a:	1b be       	out	0x3b, r1	; 59
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     f94:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tce0_ccd_callback>
     f98:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tce0_ccd_callback+0x1>
     f9c:	30 97       	sbiw	r30, 0x00	; 0
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <__vector_52+0x42>
		tc_tce0_ccd_callback();
     fa0:	19 95       	eicall
	}
}
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0b be       	out	0x3b, r0	; 59
     fbe:	0f 90       	pop	r0
     fc0:	09 be       	out	0x39, r0	; 57
     fc2:	0f 90       	pop	r0
     fc4:	08 be       	out	0x38, r0	; 56
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	08 b6       	in	r0, 0x38	; 56
     fdc:	0f 92       	push	r0
     fde:	18 be       	out	0x38, r1	; 56
     fe0:	09 b6       	in	r0, 0x39	; 57
     fe2:	0f 92       	push	r0
     fe4:	19 be       	out	0x39, r1	; 57
     fe6:	0b b6       	in	r0, 0x3b	; 59
     fe8:	0f 92       	push	r0
     fea:	1b be       	out	0x3b, r1	; 59
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1004:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tce1_ovf_callback>
    1008:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tce1_ovf_callback+0x1>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1010:	19 95       	eicall
	}
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0b be       	out	0x3b, r0	; 59
    102e:	0f 90       	pop	r0
    1030:	09 be       	out	0x39, r0	; 57
    1032:	0f 90       	pop	r0
    1034:	08 be       	out	0x38, r0	; 56
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	08 b6       	in	r0, 0x38	; 56
    104c:	0f 92       	push	r0
    104e:	18 be       	out	0x38, r1	; 56
    1050:	09 b6       	in	r0, 0x39	; 57
    1052:	0f 92       	push	r0
    1054:	19 be       	out	0x39, r1	; 57
    1056:	0b b6       	in	r0, 0x3b	; 59
    1058:	0f 92       	push	r0
    105a:	1b be       	out	0x3b, r1	; 59
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1074:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tce1_err_callback>
    1078:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tce1_err_callback+0x1>
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	09 f0       	breq	.+2      	; 0x1082 <__vector_54+0x42>
		tc_tce1_err_callback();
    1080:	19 95       	eicall
	}
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0b be       	out	0x3b, r0	; 59
    109e:	0f 90       	pop	r0
    10a0:	09 be       	out	0x39, r0	; 57
    10a2:	0f 90       	pop	r0
    10a4:	08 be       	out	0x38, r0	; 56
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    10b0:	1f 92       	push	r1
    10b2:	0f 92       	push	r0
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	0f 92       	push	r0
    10b8:	11 24       	eor	r1, r1
    10ba:	08 b6       	in	r0, 0x38	; 56
    10bc:	0f 92       	push	r0
    10be:	18 be       	out	0x38, r1	; 56
    10c0:	09 b6       	in	r0, 0x39	; 57
    10c2:	0f 92       	push	r0
    10c4:	19 be       	out	0x39, r1	; 57
    10c6:	0b b6       	in	r0, 0x3b	; 59
    10c8:	0f 92       	push	r0
    10ca:	1b be       	out	0x3b, r1	; 59
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    10e4:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tce1_cca_callback>
    10e8:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tce1_cca_callback+0x1>
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__vector_55+0x42>
		tc_tce1_cca_callback();
    10f0:	19 95       	eicall
	}
}
    10f2:	ff 91       	pop	r31
    10f4:	ef 91       	pop	r30
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	0f 90       	pop	r0
    110c:	0b be       	out	0x3b, r0	; 59
    110e:	0f 90       	pop	r0
    1110:	09 be       	out	0x39, r0	; 57
    1112:	0f 90       	pop	r0
    1114:	08 be       	out	0x38, r0	; 56
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	08 b6       	in	r0, 0x38	; 56
    112c:	0f 92       	push	r0
    112e:	18 be       	out	0x38, r1	; 56
    1130:	09 b6       	in	r0, 0x39	; 57
    1132:	0f 92       	push	r0
    1134:	19 be       	out	0x39, r1	; 57
    1136:	0b b6       	in	r0, 0x3b	; 59
    1138:	0f 92       	push	r0
    113a:	1b be       	out	0x3b, r1	; 59
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1154:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tce1_ccb_callback>
    1158:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tce1_ccb_callback+0x1>
    115c:	30 97       	sbiw	r30, 0x00	; 0
    115e:	09 f0       	breq	.+2      	; 0x1162 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1160:	19 95       	eicall
	}
}
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0b be       	out	0x3b, r0	; 59
    117e:	0f 90       	pop	r0
    1180:	09 be       	out	0x39, r0	; 57
    1182:	0f 90       	pop	r0
    1184:	08 be       	out	0x38, r0	; 56
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	08 b6       	in	r0, 0x38	; 56
    119c:	0f 92       	push	r0
    119e:	18 be       	out	0x38, r1	; 56
    11a0:	09 b6       	in	r0, 0x39	; 57
    11a2:	0f 92       	push	r0
    11a4:	19 be       	out	0x39, r1	; 57
    11a6:	0b b6       	in	r0, 0x3b	; 59
    11a8:	0f 92       	push	r0
    11aa:	1b be       	out	0x3b, r1	; 59
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    11c4:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcf0_ovf_callback>
    11c8:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcf0_ovf_callback+0x1>
    11cc:	30 97       	sbiw	r30, 0x00	; 0
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    11d0:	19 95       	eicall
	}
}
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0b be       	out	0x3b, r0	; 59
    11ee:	0f 90       	pop	r0
    11f0:	09 be       	out	0x39, r0	; 57
    11f2:	0f 90       	pop	r0
    11f4:	08 be       	out	0x38, r0	; 56
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	08 b6       	in	r0, 0x38	; 56
    120c:	0f 92       	push	r0
    120e:	18 be       	out	0x38, r1	; 56
    1210:	09 b6       	in	r0, 0x39	; 57
    1212:	0f 92       	push	r0
    1214:	19 be       	out	0x39, r1	; 57
    1216:	0b b6       	in	r0, 0x3b	; 59
    1218:	0f 92       	push	r0
    121a:	1b be       	out	0x3b, r1	; 59
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1234:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcf0_err_callback>
    1238:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcf0_err_callback+0x1>
    123c:	30 97       	sbiw	r30, 0x00	; 0
    123e:	09 f0       	breq	.+2      	; 0x1242 <__vector_109+0x42>
		tc_tcf0_err_callback();
    1240:	19 95       	eicall
	}
}
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0b be       	out	0x3b, r0	; 59
    125e:	0f 90       	pop	r0
    1260:	09 be       	out	0x39, r0	; 57
    1262:	0f 90       	pop	r0
    1264:	08 be       	out	0x38, r0	; 56
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	08 b6       	in	r0, 0x38	; 56
    127c:	0f 92       	push	r0
    127e:	18 be       	out	0x38, r1	; 56
    1280:	09 b6       	in	r0, 0x39	; 57
    1282:	0f 92       	push	r0
    1284:	19 be       	out	0x39, r1	; 57
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	1b be       	out	0x3b, r1	; 59
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    12a4:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcf0_cca_callback>
    12a8:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcf0_cca_callback+0x1>
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    12b0:	19 95       	eicall
	}
}
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0b be       	out	0x3b, r0	; 59
    12ce:	0f 90       	pop	r0
    12d0:	09 be       	out	0x39, r0	; 57
    12d2:	0f 90       	pop	r0
    12d4:	08 be       	out	0x38, r0	; 56
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	08 b6       	in	r0, 0x38	; 56
    12ec:	0f 92       	push	r0
    12ee:	18 be       	out	0x38, r1	; 56
    12f0:	09 b6       	in	r0, 0x39	; 57
    12f2:	0f 92       	push	r0
    12f4:	19 be       	out	0x39, r1	; 57
    12f6:	0b b6       	in	r0, 0x3b	; 59
    12f8:	0f 92       	push	r0
    12fa:	1b be       	out	0x3b, r1	; 59
    12fc:	2f 93       	push	r18
    12fe:	3f 93       	push	r19
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1314:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcf0_ccb_callback>
    1318:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcf0_ccb_callback+0x1>
    131c:	30 97       	sbiw	r30, 0x00	; 0
    131e:	09 f0       	breq	.+2      	; 0x1322 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1320:	19 95       	eicall
	}
}
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	7f 91       	pop	r23
    1330:	6f 91       	pop	r22
    1332:	5f 91       	pop	r21
    1334:	4f 91       	pop	r20
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0b be       	out	0x3b, r0	; 59
    133e:	0f 90       	pop	r0
    1340:	09 be       	out	0x39, r0	; 57
    1342:	0f 90       	pop	r0
    1344:	08 be       	out	0x38, r0	; 56
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	08 b6       	in	r0, 0x38	; 56
    135c:	0f 92       	push	r0
    135e:	18 be       	out	0x38, r1	; 56
    1360:	09 b6       	in	r0, 0x39	; 57
    1362:	0f 92       	push	r0
    1364:	19 be       	out	0x39, r1	; 57
    1366:	0b b6       	in	r0, 0x3b	; 59
    1368:	0f 92       	push	r0
    136a:	1b be       	out	0x3b, r1	; 59
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1384:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcf0_ccc_callback>
    1388:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcf0_ccc_callback+0x1>
    138c:	30 97       	sbiw	r30, 0x00	; 0
    138e:	09 f0       	breq	.+2      	; 0x1392 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1390:	19 95       	eicall
	}
}
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0b be       	out	0x3b, r0	; 59
    13ae:	0f 90       	pop	r0
    13b0:	09 be       	out	0x39, r0	; 57
    13b2:	0f 90       	pop	r0
    13b4:	08 be       	out	0x38, r0	; 56
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	08 b6       	in	r0, 0x38	; 56
    13cc:	0f 92       	push	r0
    13ce:	18 be       	out	0x38, r1	; 56
    13d0:	09 b6       	in	r0, 0x39	; 57
    13d2:	0f 92       	push	r0
    13d4:	19 be       	out	0x39, r1	; 57
    13d6:	0b b6       	in	r0, 0x3b	; 59
    13d8:	0f 92       	push	r0
    13da:	1b be       	out	0x3b, r1	; 59
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	4f 93       	push	r20
    13e2:	5f 93       	push	r21
    13e4:	6f 93       	push	r22
    13e6:	7f 93       	push	r23
    13e8:	8f 93       	push	r24
    13ea:	9f 93       	push	r25
    13ec:	af 93       	push	r26
    13ee:	bf 93       	push	r27
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    13f4:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcf0_ccd_callback>
    13f8:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcf0_ccd_callback+0x1>
    13fc:	30 97       	sbiw	r30, 0x00	; 0
    13fe:	09 f0       	breq	.+2      	; 0x1402 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1400:	19 95       	eicall
	}
}
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0b be       	out	0x3b, r0	; 59
    141e:	0f 90       	pop	r0
    1420:	09 be       	out	0x39, r0	; 57
    1422:	0f 90       	pop	r0
    1424:	08 be       	out	0x38, r0	; 56
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	08 b6       	in	r0, 0x38	; 56
    143c:	0f 92       	push	r0
    143e:	18 be       	out	0x38, r1	; 56
    1440:	09 b6       	in	r0, 0x39	; 57
    1442:	0f 92       	push	r0
    1444:	19 be       	out	0x39, r1	; 57
    1446:	0b b6       	in	r0, 0x3b	; 59
    1448:	0f 92       	push	r0
    144a:	1b be       	out	0x3b, r1	; 59
    144c:	2f 93       	push	r18
    144e:	3f 93       	push	r19
    1450:	4f 93       	push	r20
    1452:	5f 93       	push	r21
    1454:	6f 93       	push	r22
    1456:	7f 93       	push	r23
    1458:	8f 93       	push	r24
    145a:	9f 93       	push	r25
    145c:	af 93       	push	r26
    145e:	bf 93       	push	r27
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1464:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcf1_ovf_callback>
    1468:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcf1_ovf_callback+0x1>
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	09 f0       	breq	.+2      	; 0x1472 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1470:	19 95       	eicall
	}
}
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	09 be       	out	0x39, r0	; 57
    1492:	0f 90       	pop	r0
    1494:	08 be       	out	0x38, r0	; 56
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	08 b6       	in	r0, 0x38	; 56
    14ac:	0f 92       	push	r0
    14ae:	18 be       	out	0x38, r1	; 56
    14b0:	09 b6       	in	r0, 0x39	; 57
    14b2:	0f 92       	push	r0
    14b4:	19 be       	out	0x39, r1	; 57
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	1b be       	out	0x3b, r1	; 59
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    14d4:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tcf1_err_callback>
    14d8:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tcf1_err_callback+0x1>
    14dc:	30 97       	sbiw	r30, 0x00	; 0
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__vector_115+0x42>
		tc_tcf1_err_callback();
    14e0:	19 95       	eicall
	}
}
    14e2:	ff 91       	pop	r31
    14e4:	ef 91       	pop	r30
    14e6:	bf 91       	pop	r27
    14e8:	af 91       	pop	r26
    14ea:	9f 91       	pop	r25
    14ec:	8f 91       	pop	r24
    14ee:	7f 91       	pop	r23
    14f0:	6f 91       	pop	r22
    14f2:	5f 91       	pop	r21
    14f4:	4f 91       	pop	r20
    14f6:	3f 91       	pop	r19
    14f8:	2f 91       	pop	r18
    14fa:	0f 90       	pop	r0
    14fc:	0b be       	out	0x3b, r0	; 59
    14fe:	0f 90       	pop	r0
    1500:	09 be       	out	0x39, r0	; 57
    1502:	0f 90       	pop	r0
    1504:	08 be       	out	0x38, r0	; 56
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	08 b6       	in	r0, 0x38	; 56
    151c:	0f 92       	push	r0
    151e:	18 be       	out	0x38, r1	; 56
    1520:	09 b6       	in	r0, 0x39	; 57
    1522:	0f 92       	push	r0
    1524:	19 be       	out	0x39, r1	; 57
    1526:	0b b6       	in	r0, 0x3b	; 59
    1528:	0f 92       	push	r0
    152a:	1b be       	out	0x3b, r1	; 59
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1544:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tcf1_cca_callback>
    1548:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tcf1_cca_callback+0x1>
    154c:	30 97       	sbiw	r30, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1550:	19 95       	eicall
	}
}
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0b be       	out	0x3b, r0	; 59
    156e:	0f 90       	pop	r0
    1570:	09 be       	out	0x39, r0	; 57
    1572:	0f 90       	pop	r0
    1574:	08 be       	out	0x38, r0	; 56
    1576:	0f 90       	pop	r0
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	0f 90       	pop	r0
    157c:	1f 90       	pop	r1
    157e:	18 95       	reti

00001580 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	11 24       	eor	r1, r1
    158a:	08 b6       	in	r0, 0x38	; 56
    158c:	0f 92       	push	r0
    158e:	18 be       	out	0x38, r1	; 56
    1590:	09 b6       	in	r0, 0x39	; 57
    1592:	0f 92       	push	r0
    1594:	19 be       	out	0x39, r1	; 57
    1596:	0b b6       	in	r0, 0x3b	; 59
    1598:	0f 92       	push	r0
    159a:	1b be       	out	0x3b, r1	; 59
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    15b4:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <__data_end>
    15b8:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <__data_end+0x1>
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	09 f0       	breq	.+2      	; 0x15c2 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    15c0:	19 95       	eicall
	}
}
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0b be       	out	0x3b, r0	; 59
    15de:	0f 90       	pop	r0
    15e0:	09 be       	out	0x39, r0	; 57
    15e2:	0f 90       	pop	r0
    15e4:	08 be       	out	0x38, r0	; 56
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    15f4:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <transfer>
    15f8:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <transfer+0x1>
    15fc:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    15fe:	83 ff       	sbrs	r24, 3
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    160a:	86 ef       	ldi	r24, 0xF6	; 246
    160c:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <transfer+0xa>
    1610:	83 c0       	rjmp	.+262    	; 0x1718 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1612:	98 2f       	mov	r25, r24
    1614:	94 71       	andi	r25, 0x14	; 20
    1616:	31 f0       	breq	.+12     	; 0x1624 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <transfer+0xa>
    1622:	7a c0       	rjmp	.+244    	; 0x1718 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1624:	86 ff       	sbrs	r24, 6
    1626:	43 c0       	rjmp	.+134    	; 0x16ae <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1628:	cc e6       	ldi	r28, 0x6C	; 108
    162a:	d0 e2       	ldi	r29, 0x20	; 32
    162c:	aa 81       	ldd	r26, Y+2	; 0x02
    162e:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	14 96       	adiw	r26, 0x04	; 4
    1636:	2d 91       	ld	r18, X+
    1638:	3c 91       	ld	r19, X
    163a:	15 97       	sbiw	r26, 0x05	; 5
    163c:	82 17       	cp	r24, r18
    163e:	93 07       	cpc	r25, r19
    1640:	6c f4       	brge	.+26     	; 0x165c <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1642:	9c 01       	movw	r18, r24
    1644:	2f 5f       	subi	r18, 0xFF	; 255
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	20 93 70 20 	sts	0x2070, r18	; 0x802070 <transfer+0x4>
    164c:	30 93 71 20 	sts	0x2071, r19	; 0x802071 <transfer+0x5>
    1650:	a8 0f       	add	r26, r24
    1652:	b9 1f       	adc	r27, r25
    1654:	11 96       	adiw	r26, 0x01	; 1
    1656:	8c 91       	ld	r24, X
    1658:	87 83       	std	Z+7, r24	; 0x07
    165a:	5e c0       	rjmp	.+188    	; 0x1718 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    165c:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <transfer+0x6>
    1660:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <transfer+0x7>
    1664:	18 96       	adiw	r26, 0x08	; 8
    1666:	2d 91       	ld	r18, X+
    1668:	3c 91       	ld	r19, X
    166a:	19 97       	sbiw	r26, 0x09	; 9
    166c:	82 17       	cp	r24, r18
    166e:	93 07       	cpc	r25, r19
    1670:	c8 f4       	brcc	.+50     	; 0x16a4 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1672:	20 91 74 20 	lds	r18, 0x2074	; 0x802074 <transfer+0x8>
    1676:	22 23       	and	r18, r18
    1678:	21 f0       	breq	.+8      	; 0x1682 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    167a:	86 81       	ldd	r24, Z+6	; 0x06
    167c:	81 60       	ori	r24, 0x01	; 1
    167e:	86 83       	std	Z+6, r24	; 0x06
    1680:	4b c0       	rjmp	.+150    	; 0x1718 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1682:	16 96       	adiw	r26, 0x06	; 6
    1684:	2d 91       	ld	r18, X+
    1686:	3c 91       	ld	r19, X
    1688:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    168a:	ac 01       	movw	r20, r24
    168c:	4f 5f       	subi	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	40 93 72 20 	sts	0x2072, r20	; 0x802072 <transfer+0x6>
    1694:	50 93 73 20 	sts	0x2073, r21	; 0x802073 <transfer+0x7>
    1698:	d9 01       	movw	r26, r18
    169a:	a8 0f       	add	r26, r24
    169c:	b9 1f       	adc	r27, r25
    169e:	8c 91       	ld	r24, X
    16a0:	87 83       	std	Z+7, r24	; 0x07
    16a2:	3a c0       	rjmp	.+116    	; 0x1718 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    16a8:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <transfer+0xa>
    16ac:	35 c0       	rjmp	.+106    	; 0x1718 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    16ae:	88 23       	and	r24, r24
    16b0:	84 f5       	brge	.+96     	; 0x1712 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    16b2:	ac e6       	ldi	r26, 0x6C	; 108
    16b4:	b0 e2       	ldi	r27, 0x20	; 32
    16b6:	12 96       	adiw	r26, 0x02	; 2
    16b8:	cd 91       	ld	r28, X+
    16ba:	dc 91       	ld	r29, X
    16bc:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    16be:	16 96       	adiw	r26, 0x06	; 6
    16c0:	8d 91       	ld	r24, X+
    16c2:	9c 91       	ld	r25, X
    16c4:	17 97       	sbiw	r26, 0x07	; 7
    16c6:	28 85       	ldd	r18, Y+8	; 0x08
    16c8:	39 85       	ldd	r19, Y+9	; 0x09
    16ca:	82 17       	cp	r24, r18
    16cc:	93 07       	cpc	r25, r19
    16ce:	d8 f4       	brcc	.+54     	; 0x1706 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    16d0:	6e 81       	ldd	r22, Y+6	; 0x06
    16d2:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    16d4:	9c 01       	movw	r18, r24
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	20 93 72 20 	sts	0x2072, r18	; 0x802072 <transfer+0x6>
    16de:	30 93 73 20 	sts	0x2073, r19	; 0x802073 <transfer+0x7>
    16e2:	47 81       	ldd	r20, Z+7	; 0x07
    16e4:	db 01       	movw	r26, r22
    16e6:	a8 0f       	add	r26, r24
    16e8:	b9 1f       	adc	r27, r25
    16ea:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    16ec:	88 85       	ldd	r24, Y+8	; 0x08
    16ee:	99 85       	ldd	r25, Y+9	; 0x09
    16f0:	28 17       	cp	r18, r24
    16f2:	39 07       	cpc	r19, r25
    16f4:	18 f4       	brcc	.+6      	; 0x16fc <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	83 83       	std	Z+3, r24	; 0x03
    16fa:	0e c0       	rjmp	.+28     	; 0x1718 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    16fc:	87 e0       	ldi	r24, 0x07	; 7
    16fe:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1700:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <transfer+0xa>
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    170a:	89 ef       	ldi	r24, 0xF9	; 249
    170c:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <transfer+0xa>
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1712:	8b ef       	ldi	r24, 0xFB	; 251
    1714:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <transfer+0xa>
	}
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	08 b6       	in	r0, 0x38	; 56
    172a:	0f 92       	push	r0
    172c:	18 be       	out	0x38, r1	; 56
    172e:	09 b6       	in	r0, 0x39	; 57
    1730:	0f 92       	push	r0
    1732:	19 be       	out	0x39, r1	; 57
    1734:	0b b6       	in	r0, 0x3b	; 59
    1736:	0f 92       	push	r0
    1738:	1b be       	out	0x3b, r1	; 59
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    1752:	4e df       	rcall	.-356    	; 0x15f0 <twim_interrupt_handler>
    1754:	ff 91       	pop	r31
    1756:	ef 91       	pop	r30
    1758:	bf 91       	pop	r27
    175a:	af 91       	pop	r26
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	7f 91       	pop	r23
    1762:	6f 91       	pop	r22
    1764:	5f 91       	pop	r21
    1766:	4f 91       	pop	r20
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	0f 90       	pop	r0
    176e:	0b be       	out	0x3b, r0	; 59
    1770:	0f 90       	pop	r0
    1772:	09 be       	out	0x39, r0	; 57
    1774:	0f 90       	pop	r0
    1776:	08 be       	out	0x38, r0	; 56
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	08 b6       	in	r0, 0x38	; 56
    178e:	0f 92       	push	r0
    1790:	18 be       	out	0x38, r1	; 56
    1792:	09 b6       	in	r0, 0x39	; 57
    1794:	0f 92       	push	r0
    1796:	19 be       	out	0x39, r1	; 57
    1798:	0b b6       	in	r0, 0x3b	; 59
    179a:	0f 92       	push	r0
    179c:	1b be       	out	0x3b, r1	; 59
    179e:	2f 93       	push	r18
    17a0:	3f 93       	push	r19
    17a2:	4f 93       	push	r20
    17a4:	5f 93       	push	r21
    17a6:	6f 93       	push	r22
    17a8:	7f 93       	push	r23
    17aa:	8f 93       	push	r24
    17ac:	9f 93       	push	r25
    17ae:	af 93       	push	r26
    17b0:	bf 93       	push	r27
    17b2:	ef 93       	push	r30
    17b4:	ff 93       	push	r31
    17b6:	1c df       	rcall	.-456    	; 0x15f0 <twim_interrupt_handler>
    17b8:	ff 91       	pop	r31
    17ba:	ef 91       	pop	r30
    17bc:	bf 91       	pop	r27
    17be:	af 91       	pop	r26
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	7f 91       	pop	r23
    17c6:	6f 91       	pop	r22
    17c8:	5f 91       	pop	r21
    17ca:	4f 91       	pop	r20
    17cc:	3f 91       	pop	r19
    17ce:	2f 91       	pop	r18
    17d0:	0f 90       	pop	r0
    17d2:	0b be       	out	0x3b, r0	; 59
    17d4:	0f 90       	pop	r0
    17d6:	09 be       	out	0x39, r0	; 57
    17d8:	0f 90       	pop	r0
    17da:	08 be       	out	0x38, r0	; 56
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	08 b6       	in	r0, 0x38	; 56
    17f2:	0f 92       	push	r0
    17f4:	18 be       	out	0x38, r1	; 56
    17f6:	09 b6       	in	r0, 0x39	; 57
    17f8:	0f 92       	push	r0
    17fa:	19 be       	out	0x39, r1	; 57
    17fc:	0b b6       	in	r0, 0x3b	; 59
    17fe:	0f 92       	push	r0
    1800:	1b be       	out	0x3b, r1	; 59
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	af 93       	push	r26
    1814:	bf 93       	push	r27
    1816:	ef 93       	push	r30
    1818:	ff 93       	push	r31
    181a:	ea de       	rcall	.-556    	; 0x15f0 <twim_interrupt_handler>
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	7f 91       	pop	r23
    182a:	6f 91       	pop	r22
    182c:	5f 91       	pop	r21
    182e:	4f 91       	pop	r20
    1830:	3f 91       	pop	r19
    1832:	2f 91       	pop	r18
    1834:	0f 90       	pop	r0
    1836:	0b be       	out	0x3b, r0	; 59
    1838:	0f 90       	pop	r0
    183a:	09 be       	out	0x39, r0	; 57
    183c:	0f 90       	pop	r0
    183e:	08 be       	out	0x38, r0	; 56
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

0000184a <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	08 b6       	in	r0, 0x38	; 56
    1856:	0f 92       	push	r0
    1858:	18 be       	out	0x38, r1	; 56
    185a:	09 b6       	in	r0, 0x39	; 57
    185c:	0f 92       	push	r0
    185e:	19 be       	out	0x39, r1	; 57
    1860:	0b b6       	in	r0, 0x3b	; 59
    1862:	0f 92       	push	r0
    1864:	1b be       	out	0x3b, r1	; 59
    1866:	2f 93       	push	r18
    1868:	3f 93       	push	r19
    186a:	4f 93       	push	r20
    186c:	5f 93       	push	r21
    186e:	6f 93       	push	r22
    1870:	7f 93       	push	r23
    1872:	8f 93       	push	r24
    1874:	9f 93       	push	r25
    1876:	af 93       	push	r26
    1878:	bf 93       	push	r27
    187a:	ef 93       	push	r30
    187c:	ff 93       	push	r31
    187e:	b8 de       	rcall	.-656    	; 0x15f0 <twim_interrupt_handler>
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0b be       	out	0x3b, r0	; 59
    189c:	0f 90       	pop	r0
    189e:	09 be       	out	0x39, r0	; 57
    18a0:	0f 90       	pop	r0
    18a2:	08 be       	out	0x38, r0	; 56
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    18ae:	fc 01       	movw	r30, r24
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	95 ff       	sbrs	r25, 5
    18b4:	fd cf       	rjmp	.-6      	; 0x18b0 <usart_putchar+0x2>
    18b6:	60 83       	st	Z, r22
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	08 95       	ret

000018be <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    18be:	4f 92       	push	r4
    18c0:	5f 92       	push	r5
    18c2:	6f 92       	push	r6
    18c4:	7f 92       	push	r7
    18c6:	8f 92       	push	r8
    18c8:	9f 92       	push	r9
    18ca:	af 92       	push	r10
    18cc:	bf 92       	push	r11
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	7c 01       	movw	r14, r24
    18da:	4a 01       	movw	r8, r20
    18dc:	5b 01       	movw	r10, r22
    18de:	28 01       	movw	r4, r16
    18e0:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    18e2:	fc 01       	movw	r30, r24
    18e4:	84 81       	ldd	r24, Z+4	; 0x04
    18e6:	82 ff       	sbrs	r24, 2
    18e8:	16 c0       	rjmp	.+44     	; 0x1916 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    18ea:	d9 01       	movw	r26, r18
    18ec:	c8 01       	movw	r24, r16
    18ee:	68 94       	set
    18f0:	12 f8       	bld	r1, 2
    18f2:	b6 95       	lsr	r27
    18f4:	a7 95       	ror	r26
    18f6:	97 95       	ror	r25
    18f8:	87 95       	ror	r24
    18fa:	16 94       	lsr	r1
    18fc:	d1 f7       	brne	.-12     	; 0x18f2 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    18fe:	b9 01       	movw	r22, r18
    1900:	a8 01       	movw	r20, r16
    1902:	03 2e       	mov	r0, r19
    1904:	36 e1       	ldi	r19, 0x16	; 22
    1906:	76 95       	lsr	r23
    1908:	67 95       	ror	r22
    190a:	57 95       	ror	r21
    190c:	47 95       	ror	r20
    190e:	3a 95       	dec	r19
    1910:	d1 f7       	brne	.-12     	; 0x1906 <usart_set_baudrate+0x48>
    1912:	30 2d       	mov	r19, r0
    1914:	15 c0       	rjmp	.+42     	; 0x1940 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1916:	d9 01       	movw	r26, r18
    1918:	c8 01       	movw	r24, r16
    191a:	68 94       	set
    191c:	13 f8       	bld	r1, 3
    191e:	b6 95       	lsr	r27
    1920:	a7 95       	ror	r26
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	16 94       	lsr	r1
    1928:	d1 f7       	brne	.-12     	; 0x191e <usart_set_baudrate+0x60>
		min_rate /= 2;
    192a:	b9 01       	movw	r22, r18
    192c:	a8 01       	movw	r20, r16
    192e:	03 2e       	mov	r0, r19
    1930:	37 e1       	ldi	r19, 0x17	; 23
    1932:	76 95       	lsr	r23
    1934:	67 95       	ror	r22
    1936:	57 95       	ror	r21
    1938:	47 95       	ror	r20
    193a:	3a 95       	dec	r19
    193c:	d1 f7       	brne	.-12     	; 0x1932 <usart_set_baudrate+0x74>
    193e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1940:	88 15       	cp	r24, r8
    1942:	99 05       	cpc	r25, r9
    1944:	aa 05       	cpc	r26, r10
    1946:	bb 05       	cpc	r27, r11
    1948:	08 f4       	brcc	.+2      	; 0x194c <usart_set_baudrate+0x8e>
    194a:	a2 c0       	rjmp	.+324    	; 0x1a90 <usart_set_baudrate+0x1d2>
    194c:	84 16       	cp	r8, r20
    194e:	95 06       	cpc	r9, r21
    1950:	a6 06       	cpc	r10, r22
    1952:	b7 06       	cpc	r11, r23
    1954:	08 f4       	brcc	.+2      	; 0x1958 <usart_set_baudrate+0x9a>
    1956:	9e c0       	rjmp	.+316    	; 0x1a94 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1958:	f7 01       	movw	r30, r14
    195a:	84 81       	ldd	r24, Z+4	; 0x04
    195c:	82 fd       	sbrc	r24, 2
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <usart_set_baudrate+0xaa>
		baud *= 2;
    1960:	88 0c       	add	r8, r8
    1962:	99 1c       	adc	r9, r9
    1964:	aa 1c       	adc	r10, r10
    1966:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1968:	c3 01       	movw	r24, r6
    196a:	b2 01       	movw	r22, r4
    196c:	a5 01       	movw	r20, r10
    196e:	94 01       	movw	r18, r8
    1970:	a0 d4       	rcall	.+2368   	; 0x22b2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1972:	2f 3f       	cpi	r18, 0xFF	; 255
    1974:	31 05       	cpc	r19, r1
    1976:	41 05       	cpc	r20, r1
    1978:	51 05       	cpc	r21, r1
    197a:	08 f4       	brcc	.+2      	; 0x197e <usart_set_baudrate+0xc0>
    197c:	8d c0       	rjmp	.+282    	; 0x1a98 <usart_set_baudrate+0x1da>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e0       	ldi	r26, 0x00	; 0
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	c9 ef       	ldi	r28, 0xF9	; 249
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <usart_set_baudrate+0xd6>
    198a:	28 17       	cp	r18, r24
    198c:	39 07       	cpc	r19, r25
    198e:	4a 07       	cpc	r20, r26
    1990:	5b 07       	cpc	r21, r27
    1992:	58 f0       	brcs	.+22     	; 0x19aa <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	aa 1f       	adc	r26, r26
    199a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    199c:	cd 3f       	cpi	r28, 0xFD	; 253
    199e:	0c f4       	brge	.+2      	; 0x19a2 <usart_set_baudrate+0xe4>
			limit |= 1;
    19a0:	81 60       	ori	r24, 0x01	; 1
    19a2:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    19a4:	c7 30       	cpi	r28, 0x07	; 7
    19a6:	89 f7       	brne	.-30     	; 0x198a <usart_set_baudrate+0xcc>
    19a8:	4d c0       	rjmp	.+154    	; 0x1a44 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    19aa:	cc 23       	and	r28, r28
    19ac:	0c f0       	brlt	.+2      	; 0x19b0 <usart_set_baudrate+0xf2>
    19ae:	4a c0       	rjmp	.+148    	; 0x1a44 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    19b0:	d5 01       	movw	r26, r10
    19b2:	c4 01       	movw	r24, r8
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	aa 1f       	adc	r26, r26
    19ba:	bb 1f       	adc	r27, r27
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	aa 1f       	adc	r26, r26
    19c2:	bb 1f       	adc	r27, r27
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	aa 1f       	adc	r26, r26
    19ca:	bb 1f       	adc	r27, r27
    19cc:	48 1a       	sub	r4, r24
    19ce:	59 0a       	sbc	r5, r25
    19d0:	6a 0a       	sbc	r6, r26
    19d2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    19d4:	ce 3f       	cpi	r28, 0xFE	; 254
    19d6:	ec f4       	brge	.+58     	; 0x1a12 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    19d8:	8d ef       	ldi	r24, 0xFD	; 253
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	8c 1b       	sub	r24, r28
    19de:	91 09       	sbc	r25, r1
    19e0:	c7 fd       	sbrc	r28, 7
    19e2:	93 95       	inc	r25
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <usart_set_baudrate+0x130>
    19e6:	44 0c       	add	r4, r4
    19e8:	55 1c       	adc	r5, r5
    19ea:	66 1c       	adc	r6, r6
    19ec:	77 1c       	adc	r7, r7
    19ee:	8a 95       	dec	r24
    19f0:	d2 f7       	brpl	.-12     	; 0x19e6 <usart_set_baudrate+0x128>
    19f2:	d5 01       	movw	r26, r10
    19f4:	c4 01       	movw	r24, r8
    19f6:	b6 95       	lsr	r27
    19f8:	a7 95       	ror	r26
    19fa:	97 95       	ror	r25
    19fc:	87 95       	ror	r24
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	64 0d       	add	r22, r4
    1a04:	75 1d       	adc	r23, r5
    1a06:	86 1d       	adc	r24, r6
    1a08:	97 1d       	adc	r25, r7
    1a0a:	a5 01       	movw	r20, r10
    1a0c:	94 01       	movw	r18, r8
    1a0e:	51 d4       	rcall	.+2210   	; 0x22b2 <__udivmodsi4>
    1a10:	35 c0       	rjmp	.+106    	; 0x1a7c <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	8c 0f       	add	r24, r28
    1a16:	a5 01       	movw	r20, r10
    1a18:	94 01       	movw	r18, r8
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <usart_set_baudrate+0x166>
    1a1c:	22 0f       	add	r18, r18
    1a1e:	33 1f       	adc	r19, r19
    1a20:	44 1f       	adc	r20, r20
    1a22:	55 1f       	adc	r21, r21
    1a24:	8a 95       	dec	r24
    1a26:	d2 f7       	brpl	.-12     	; 0x1a1c <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    1a28:	da 01       	movw	r26, r20
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	b6 95       	lsr	r27
    1a2e:	a7 95       	ror	r26
    1a30:	97 95       	ror	r25
    1a32:	87 95       	ror	r24
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	64 0d       	add	r22, r4
    1a3a:	75 1d       	adc	r23, r5
    1a3c:	86 1d       	adc	r24, r6
    1a3e:	97 1d       	adc	r25, r7
    1a40:	38 d4       	rcall	.+2160   	; 0x22b2 <__udivmodsi4>
    1a42:	1c c0       	rjmp	.+56     	; 0x1a7c <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	8c 0f       	add	r24, r28
    1a48:	a5 01       	movw	r20, r10
    1a4a:	94 01       	movw	r18, r8
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <usart_set_baudrate+0x198>
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	44 1f       	adc	r20, r20
    1a54:	55 1f       	adc	r21, r21
    1a56:	8a 95       	dec	r24
    1a58:	d2 f7       	brpl	.-12     	; 0x1a4e <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    1a5a:	da 01       	movw	r26, r20
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	b6 95       	lsr	r27
    1a60:	a7 95       	ror	r26
    1a62:	97 95       	ror	r25
    1a64:	87 95       	ror	r24
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	64 0d       	add	r22, r4
    1a6c:	75 1d       	adc	r23, r5
    1a6e:	86 1d       	adc	r24, r6
    1a70:	97 1d       	adc	r25, r7
    1a72:	1f d4       	rcall	.+2110   	; 0x22b2 <__udivmodsi4>
    1a74:	21 50       	subi	r18, 0x01	; 1
    1a76:	31 09       	sbc	r19, r1
    1a78:	41 09       	sbc	r20, r1
    1a7a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1a7c:	83 2f       	mov	r24, r19
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	c2 95       	swap	r28
    1a82:	c0 7f       	andi	r28, 0xF0	; 240
    1a84:	c8 2b       	or	r28, r24
    1a86:	f7 01       	movw	r30, r14
    1a88:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1a8a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	18 c0       	rjmp	.+48     	; 0x1ac0 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	16 c0       	rjmp	.+44     	; 0x1ac0 <usart_set_baudrate+0x202>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1a98:	d5 01       	movw	r26, r10
    1a9a:	c4 01       	movw	r24, r8
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	aa 1f       	adc	r26, r26
    1aa2:	bb 1f       	adc	r27, r27
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	aa 1f       	adc	r26, r26
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	aa 1f       	adc	r26, r26
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	48 1a       	sub	r4, r24
    1ab6:	59 0a       	sbc	r5, r25
    1ab8:	6a 0a       	sbc	r6, r26
    1aba:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1abc:	c9 ef       	ldi	r28, 0xF9	; 249
    1abe:	8c cf       	rjmp	.-232    	; 0x19d8 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	bf 90       	pop	r11
    1acc:	af 90       	pop	r10
    1ace:	9f 90       	pop	r9
    1ad0:	8f 90       	pop	r8
    1ad2:	7f 90       	pop	r7
    1ad4:	6f 90       	pop	r6
    1ad6:	5f 90       	pop	r5
    1ad8:	4f 90       	pop	r4
    1ada:	08 95       	ret

00001adc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	ec 01       	movw	r28, r24
    1ae6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	09 f4       	brne	.+2      	; 0x1aee <usart_init_rs232+0x12>
    1aec:	5d c1       	rjmp	.+698    	; 0x1da8 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1aee:	80 3c       	cpi	r24, 0xC0	; 192
    1af0:	91 05       	cpc	r25, r1
    1af2:	29 f4       	brne	.+10     	; 0x1afe <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1af4:	60 e1       	ldi	r22, 0x10	; 16
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1afc:	55 c1       	rjmp	.+682    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1afe:	c0 34       	cpi	r28, 0x40	; 64
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	d8 07       	cpc	r29, r24
    1b04:	29 f4       	brne	.+10     	; 0x1b10 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1b06:	68 e0       	ldi	r22, 0x08	; 8
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b0e:	4c c1       	rjmp	.+664    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1b10:	c1 15       	cp	r28, r1
    1b12:	e4 e0       	ldi	r30, 0x04	; 4
    1b14:	de 07       	cpc	r29, r30
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1b18:	64 e0       	ldi	r22, 0x04	; 4
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b20:	43 c1       	rjmp	.+646    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1b22:	c0 38       	cpi	r28, 0x80	; 128
    1b24:	f1 e0       	ldi	r31, 0x01	; 1
    1b26:	df 07       	cpc	r29, r31
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1b2a:	62 e0       	ldi	r22, 0x02	; 2
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b32:	3a c1       	rjmp	.+628    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1b34:	c1 15       	cp	r28, r1
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	d8 07       	cpc	r29, r24
    1b3a:	29 f4       	brne	.+10     	; 0x1b46 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b44:	31 c1       	rjmp	.+610    	; 0x1da8 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1b46:	c0 38       	cpi	r28, 0x80	; 128
    1b48:	e3 e0       	ldi	r30, 0x03	; 3
    1b4a:	de 07       	cpc	r29, r30
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b56:	28 c1       	rjmp	.+592    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1b58:	c0 39       	cpi	r28, 0x90	; 144
    1b5a:	f3 e0       	ldi	r31, 0x03	; 3
    1b5c:	df 07       	cpc	r29, r31
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b68:	1f c1       	rjmp	.+574    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1b6a:	c1 15       	cp	r28, r1
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	d8 07       	cpc	r29, r24
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b7a:	16 c1       	rjmp	.+556    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1b7c:	c0 34       	cpi	r28, 0x40	; 64
    1b7e:	e2 e0       	ldi	r30, 0x02	; 2
    1b80:	de 07       	cpc	r29, r30
    1b82:	29 f4       	brne	.+10     	; 0x1b8e <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b8c:	0d c1       	rjmp	.+538    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1b8e:	c1 15       	cp	r28, r1
    1b90:	f3 e0       	ldi	r31, 0x03	; 3
    1b92:	df 07       	cpc	r29, r31
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1b96:	64 e0       	ldi	r22, 0x04	; 4
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b9e:	04 c1       	rjmp	.+520    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1ba0:	c0 32       	cpi	r28, 0x20	; 32
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	d8 07       	cpc	r29, r24
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1ba8:	64 e0       	ldi	r22, 0x04	; 4
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1bb0:	fb c0       	rjmp	.+502    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1bb2:	c1 15       	cp	r28, r1
    1bb4:	e8 e0       	ldi	r30, 0x08	; 8
    1bb6:	de 07       	cpc	r29, r30
    1bb8:	29 f4       	brne	.+10     	; 0x1bc4 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1bba:	61 e0       	ldi	r22, 0x01	; 1
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1bc2:	f2 c0       	rjmp	.+484    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1bc4:	c1 15       	cp	r28, r1
    1bc6:	f9 e0       	ldi	r31, 0x09	; 9
    1bc8:	df 07       	cpc	r29, r31
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1bd4:	e9 c0       	rjmp	.+466    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1bd6:	c1 15       	cp	r28, r1
    1bd8:	8a e0       	ldi	r24, 0x0A	; 10
    1bda:	d8 07       	cpc	r29, r24
    1bdc:	29 f4       	brne	.+10     	; 0x1be8 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	85 e0       	ldi	r24, 0x05	; 5
    1be2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1be6:	e0 c0       	rjmp	.+448    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1be8:	c1 15       	cp	r28, r1
    1bea:	eb e0       	ldi	r30, 0x0B	; 11
    1bec:	de 07       	cpc	r29, r30
    1bee:	29 f4       	brne	.+10     	; 0x1bfa <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	86 e0       	ldi	r24, 0x06	; 6
    1bf4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1bf8:	d7 c0       	rjmp	.+430    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1bfa:	c0 34       	cpi	r28, 0x40	; 64
    1bfc:	f8 e0       	ldi	r31, 0x08	; 8
    1bfe:	df 07       	cpc	r29, r31
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1c02:	62 e0       	ldi	r22, 0x02	; 2
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c0a:	ce c0       	rjmp	.+412    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1c0c:	c0 34       	cpi	r28, 0x40	; 64
    1c0e:	89 e0       	ldi	r24, 0x09	; 9
    1c10:	d8 07       	cpc	r29, r24
    1c12:	29 f4       	brne	.+10     	; 0x1c1e <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c1c:	c5 c0       	rjmp	.+394    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1c1e:	c0 34       	cpi	r28, 0x40	; 64
    1c20:	ea e0       	ldi	r30, 0x0A	; 10
    1c22:	de 07       	cpc	r29, r30
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	85 e0       	ldi	r24, 0x05	; 5
    1c2a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c2e:	bc c0       	rjmp	.+376    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1c30:	c0 34       	cpi	r28, 0x40	; 64
    1c32:	fb e0       	ldi	r31, 0x0B	; 11
    1c34:	df 07       	cpc	r29, r31
    1c36:	29 f4       	brne	.+10     	; 0x1c42 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	86 e0       	ldi	r24, 0x06	; 6
    1c3c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c40:	b3 c0       	rjmp	.+358    	; 0x1da8 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1c42:	c0 39       	cpi	r28, 0x90	; 144
    1c44:	88 e0       	ldi	r24, 0x08	; 8
    1c46:	d8 07       	cpc	r29, r24
    1c48:	29 f4       	brne	.+10     	; 0x1c54 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1c4a:	64 e0       	ldi	r22, 0x04	; 4
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c52:	aa c0       	rjmp	.+340    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1c54:	c0 39       	cpi	r28, 0x90	; 144
    1c56:	e9 e0       	ldi	r30, 0x09	; 9
    1c58:	de 07       	cpc	r29, r30
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1c5c:	64 e0       	ldi	r22, 0x04	; 4
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c64:	a1 c0       	rjmp	.+322    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1c66:	c0 39       	cpi	r28, 0x90	; 144
    1c68:	fa e0       	ldi	r31, 0x0A	; 10
    1c6a:	df 07       	cpc	r29, r31
    1c6c:	29 f4       	brne	.+10     	; 0x1c78 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	85 e0       	ldi	r24, 0x05	; 5
    1c72:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c76:	98 c0       	rjmp	.+304    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1c78:	c0 39       	cpi	r28, 0x90	; 144
    1c7a:	8b e0       	ldi	r24, 0x0B	; 11
    1c7c:	d8 07       	cpc	r29, r24
    1c7e:	29 f4       	brne	.+10     	; 0x1c8a <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1c80:	64 e0       	ldi	r22, 0x04	; 4
    1c82:	86 e0       	ldi	r24, 0x06	; 6
    1c84:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c88:	8f c0       	rjmp	.+286    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1c8a:	c0 3c       	cpi	r28, 0xC0	; 192
    1c8c:	e8 e0       	ldi	r30, 0x08	; 8
    1c8e:	de 07       	cpc	r29, r30
    1c90:	29 f4       	brne	.+10     	; 0x1c9c <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1c92:	68 e0       	ldi	r22, 0x08	; 8
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c9a:	86 c0       	rjmp	.+268    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1c9c:	c0 3c       	cpi	r28, 0xC0	; 192
    1c9e:	f9 e0       	ldi	r31, 0x09	; 9
    1ca0:	df 07       	cpc	r29, r31
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1ca4:	68 e0       	ldi	r22, 0x08	; 8
    1ca6:	84 e0       	ldi	r24, 0x04	; 4
    1ca8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cac:	7d c0       	rjmp	.+250    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1cae:	c0 3c       	cpi	r28, 0xC0	; 192
    1cb0:	8a e0       	ldi	r24, 0x0A	; 10
    1cb2:	d8 07       	cpc	r29, r24
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1cb6:	68 e0       	ldi	r22, 0x08	; 8
    1cb8:	85 e0       	ldi	r24, 0x05	; 5
    1cba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cbe:	74 c0       	rjmp	.+232    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1cc0:	c0 3c       	cpi	r28, 0xC0	; 192
    1cc2:	eb e0       	ldi	r30, 0x0B	; 11
    1cc4:	de 07       	cpc	r29, r30
    1cc6:	29 f4       	brne	.+10     	; 0x1cd2 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1cc8:	68 e0       	ldi	r22, 0x08	; 8
    1cca:	86 e0       	ldi	r24, 0x06	; 6
    1ccc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cd0:	6b c0       	rjmp	.+214    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1cd2:	c0 3a       	cpi	r28, 0xA0	; 160
    1cd4:	f8 e0       	ldi	r31, 0x08	; 8
    1cd6:	df 07       	cpc	r29, r31
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1cda:	60 e1       	ldi	r22, 0x10	; 16
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ce2:	62 c0       	rjmp	.+196    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1ce4:	c0 3a       	cpi	r28, 0xA0	; 160
    1ce6:	89 e0       	ldi	r24, 0x09	; 9
    1ce8:	d8 07       	cpc	r29, r24
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1cec:	60 e1       	ldi	r22, 0x10	; 16
    1cee:	84 e0       	ldi	r24, 0x04	; 4
    1cf0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cf4:	59 c0       	rjmp	.+178    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1cf6:	c0 3a       	cpi	r28, 0xA0	; 160
    1cf8:	ea e0       	ldi	r30, 0x0A	; 10
    1cfa:	de 07       	cpc	r29, r30
    1cfc:	29 f4       	brne	.+10     	; 0x1d08 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1cfe:	60 e1       	ldi	r22, 0x10	; 16
    1d00:	85 e0       	ldi	r24, 0x05	; 5
    1d02:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d06:	50 c0       	rjmp	.+160    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1d08:	c0 3a       	cpi	r28, 0xA0	; 160
    1d0a:	fb e0       	ldi	r31, 0x0B	; 11
    1d0c:	df 07       	cpc	r29, r31
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1d10:	60 e1       	ldi	r22, 0x10	; 16
    1d12:	86 e0       	ldi	r24, 0x06	; 6
    1d14:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d18:	47 c0       	rjmp	.+142    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1d1a:	c0 3b       	cpi	r28, 0xB0	; 176
    1d1c:	88 e0       	ldi	r24, 0x08	; 8
    1d1e:	d8 07       	cpc	r29, r24
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1d22:	60 e2       	ldi	r22, 0x20	; 32
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d2a:	3e c0       	rjmp	.+124    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1d2c:	c0 3b       	cpi	r28, 0xB0	; 176
    1d2e:	e9 e0       	ldi	r30, 0x09	; 9
    1d30:	de 07       	cpc	r29, r30
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1d34:	60 e2       	ldi	r22, 0x20	; 32
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d3c:	35 c0       	rjmp	.+106    	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1d3e:	c0 3b       	cpi	r28, 0xB0	; 176
    1d40:	fa e0       	ldi	r31, 0x0A	; 10
    1d42:	df 07       	cpc	r29, r31
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1d46:	60 e2       	ldi	r22, 0x20	; 32
    1d48:	85 e0       	ldi	r24, 0x05	; 5
    1d4a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d4e:	2c c0       	rjmp	.+88     	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1d50:	c0 3b       	cpi	r28, 0xB0	; 176
    1d52:	8b e0       	ldi	r24, 0x0B	; 11
    1d54:	d8 07       	cpc	r29, r24
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1d58:	60 e2       	ldi	r22, 0x20	; 32
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d60:	23 c0       	rjmp	.+70     	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1d62:	c0 38       	cpi	r28, 0x80	; 128
    1d64:	e4 e0       	ldi	r30, 0x04	; 4
    1d66:	de 07       	cpc	r29, r30
    1d68:	29 f4       	brne	.+10     	; 0x1d74 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1d6a:	60 e4       	ldi	r22, 0x40	; 64
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d72:	1a c0       	rjmp	.+52     	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1d74:	c0 39       	cpi	r28, 0x90	; 144
    1d76:	f4 e0       	ldi	r31, 0x04	; 4
    1d78:	df 07       	cpc	r29, r31
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1d7c:	60 e4       	ldi	r22, 0x40	; 64
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d84:	11 c0       	rjmp	.+34     	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1d86:	c0 3a       	cpi	r28, 0xA0	; 160
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	d8 07       	cpc	r29, r24
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1d8e:	60 e4       	ldi	r22, 0x40	; 64
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d96:	08 c0       	rjmp	.+16     	; 0x1da8 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1d98:	c0 3b       	cpi	r28, 0xB0	; 176
    1d9a:	e4 e0       	ldi	r30, 0x04	; 4
    1d9c:	de 07       	cpc	r29, r30
    1d9e:	21 f4       	brne	.+8      	; 0x1da8 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1da0:	60 e4       	ldi	r22, 0x40	; 64
    1da2:	86 e0       	ldi	r24, 0x06	; 6
    1da4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	8f 73       	andi	r24, 0x3F	; 63
    1dac:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1dae:	f8 01       	movw	r30, r16
    1db0:	95 81       	ldd	r25, Z+5	; 0x05
    1db2:	84 81       	ldd	r24, Z+4	; 0x04
    1db4:	89 2b       	or	r24, r25
    1db6:	96 81       	ldd	r25, Z+6	; 0x06
    1db8:	91 11       	cpse	r25, r1
    1dba:	98 e0       	ldi	r25, 0x08	; 8
    1dbc:	89 2b       	or	r24, r25
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	40 81       	ld	r20, Z
    1dc4:	51 81       	ldd	r21, Z+1	; 0x01
    1dc6:	62 81       	ldd	r22, Z+2	; 0x02
    1dc8:	73 81       	ldd	r23, Z+3	; 0x03
    1dca:	00 e0       	ldi	r16, 0x00	; 0
    1dcc:	18 e4       	ldi	r17, 0x48	; 72
    1dce:	28 ee       	ldi	r18, 0xE8	; 232
    1dd0:	31 e0       	ldi	r19, 0x01	; 1
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	74 dd       	rcall	.-1304   	; 0x18be <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	98 60       	ori	r25, 0x08	; 8
    1dda:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	90 61       	ori	r25, 0x10	; 16
    1de0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <uart_init>:
#include "uart.h"
#include "config/conf_clock.h"

void uart_init(uart_device* P_device)

{
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	27 97       	sbiw	r28, 0x07	; 7
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	7c 01       	movw	r14, r24
		.baudrate = 0,
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = true
	};
	usart_options.baudrate=P_device->Baud;
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 85       	ldd	r24, Z+8	; 0x08
    1e08:	91 85       	ldd	r25, Z+9	; 0x09
    1e0a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e0c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e0e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1e12:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1e16:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    1e1a:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
	P_device->Usart->CTRLC=0b00000011;//asynchronos mode, parity disabled, only 1 stop bit and char size is 7 bits
	*/
	//gpio_configure_pin(P_device->tx_port, IOPORT_DIR_OUTPUT); 
	//gpio_configure_pin(P_device->rx_port, IOPORT_DIR_INPUT);
	
	P_device->Port->DIR|=P_device->tx;
    1e1e:	01 90       	ld	r0, Z+
    1e20:	f0 81       	ld	r31, Z
    1e22:	e0 2d       	mov	r30, r0
    1e24:	90 81       	ld	r25, Z
    1e26:	d7 01       	movw	r26, r14
    1e28:	15 96       	adiw	r26, 0x05	; 5
    1e2a:	8c 91       	ld	r24, X
    1e2c:	15 97       	sbiw	r26, 0x05	; 5
    1e2e:	89 2b       	or	r24, r25
    1e30:	80 83       	st	Z, r24
	P_device->Port->OUT|=P_device->tx;
    1e32:	ed 91       	ld	r30, X+
    1e34:	fc 91       	ld	r31, X
    1e36:	11 97       	sbiw	r26, 0x01	; 1
    1e38:	94 81       	ldd	r25, Z+4	; 0x04
    1e3a:	15 96       	adiw	r26, 0x05	; 5
    1e3c:	8c 91       	ld	r24, X
    1e3e:	15 97       	sbiw	r26, 0x05	; 5
    1e40:	89 2b       	or	r24, r25
    1e42:	84 83       	std	Z+4, r24	; 0x04
	P_device->Port->DIR&=~P_device->rx;
    1e44:	ed 91       	ld	r30, X+
    1e46:	fc 91       	ld	r31, X
    1e48:	11 97       	sbiw	r26, 0x01	; 1
    1e4a:	90 81       	ld	r25, Z
    1e4c:	14 96       	adiw	r26, 0x04	; 4
    1e4e:	8c 91       	ld	r24, X
    1e50:	14 97       	sbiw	r26, 0x04	; 4
    1e52:	80 95       	com	r24
    1e54:	89 23       	and	r24, r25
    1e56:	80 83       	st	Z, r24
	
	sysclk_enable_peripheral_clock(P_device->Usart);
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	0d 91       	ld	r16, X+
    1e5c:	1c 91       	ld	r17, X
    1e5e:	13 97       	sbiw	r26, 0x03	; 3
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1e60:	01 15       	cp	r16, r1
    1e62:	11 05       	cpc	r17, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <uart_init+0x7c>
    1e66:	c5 c1       	rjmp	.+906    	; 0x21f2 <uart_init+0x406>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1e68:	00 3c       	cpi	r16, 0xC0	; 192
    1e6a:	11 05       	cpc	r17, r1
    1e6c:	29 f4       	brne	.+10     	; 0x1e78 <uart_init+0x8c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1e6e:	60 e1       	ldi	r22, 0x10	; 16
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e76:	54 c1       	rjmp	.+680    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1e78:	00 34       	cpi	r16, 0x40	; 64
    1e7a:	b4 e0       	ldi	r27, 0x04	; 4
    1e7c:	1b 07       	cpc	r17, r27
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <uart_init+0x9e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1e80:	68 e0       	ldi	r22, 0x08	; 8
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e88:	4b c1       	rjmp	.+662    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1e8a:	01 15       	cp	r16, r1
    1e8c:	e4 e0       	ldi	r30, 0x04	; 4
    1e8e:	1e 07       	cpc	r17, r30
    1e90:	29 f4       	brne	.+10     	; 0x1e9c <uart_init+0xb0>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1e92:	64 e0       	ldi	r22, 0x04	; 4
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e9a:	42 c1       	rjmp	.+644    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1e9c:	00 38       	cpi	r16, 0x80	; 128
    1e9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ea0:	1f 07       	cpc	r17, r31
    1ea2:	29 f4       	brne	.+10     	; 0x1eae <uart_init+0xc2>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1eac:	39 c1       	rjmp	.+626    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1eae:	01 15       	cp	r16, r1
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	18 07       	cpc	r17, r24
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <uart_init+0xd4>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ebe:	30 c1       	rjmp	.+608    	; 0x2120 <uart_init+0x334>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1ec0:	00 38       	cpi	r16, 0x80	; 128
    1ec2:	a3 e0       	ldi	r26, 0x03	; 3
    1ec4:	1a 07       	cpc	r17, r26
    1ec6:	29 f4       	brne	.+10     	; 0x1ed2 <uart_init+0xe6>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ed0:	27 c1       	rjmp	.+590    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1ed2:	00 39       	cpi	r16, 0x90	; 144
    1ed4:	b3 e0       	ldi	r27, 0x03	; 3
    1ed6:	1b 07       	cpc	r17, r27
    1ed8:	29 f4       	brne	.+10     	; 0x1ee4 <uart_init+0xf8>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ee2:	1e c1       	rjmp	.+572    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1ee4:	01 15       	cp	r16, r1
    1ee6:	e2 e0       	ldi	r30, 0x02	; 2
    1ee8:	1e 07       	cpc	r17, r30
    1eea:	29 f4       	brne	.+10     	; 0x1ef6 <uart_init+0x10a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1eec:	62 e0       	ldi	r22, 0x02	; 2
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ef4:	15 c1       	rjmp	.+554    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1ef6:	00 34       	cpi	r16, 0x40	; 64
    1ef8:	f2 e0       	ldi	r31, 0x02	; 2
    1efa:	1f 07       	cpc	r17, r31
    1efc:	29 f4       	brne	.+10     	; 0x1f08 <uart_init+0x11c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1efe:	62 e0       	ldi	r22, 0x02	; 2
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f06:	0c c1       	rjmp	.+536    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1f08:	01 15       	cp	r16, r1
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	18 07       	cpc	r17, r24
    1f0e:	29 f4       	brne	.+10     	; 0x1f1a <uart_init+0x12e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1f10:	64 e0       	ldi	r22, 0x04	; 4
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f18:	03 c1       	rjmp	.+518    	; 0x2120 <uart_init+0x334>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1f1a:	00 32       	cpi	r16, 0x20	; 32
    1f1c:	a3 e0       	ldi	r26, 0x03	; 3
    1f1e:	1a 07       	cpc	r17, r26
    1f20:	29 f4       	brne	.+10     	; 0x1f2c <uart_init+0x140>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1f22:	64 e0       	ldi	r22, 0x04	; 4
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f2a:	fa c0       	rjmp	.+500    	; 0x2120 <uart_init+0x334>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1f2c:	01 15       	cp	r16, r1
    1f2e:	b8 e0       	ldi	r27, 0x08	; 8
    1f30:	1b 07       	cpc	r17, r27
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <uart_init+0x152>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1f34:	61 e0       	ldi	r22, 0x01	; 1
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f3c:	f1 c0       	rjmp	.+482    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1f3e:	01 15       	cp	r16, r1
    1f40:	e9 e0       	ldi	r30, 0x09	; 9
    1f42:	1e 07       	cpc	r17, r30
    1f44:	29 f4       	brne	.+10     	; 0x1f50 <uart_init+0x164>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	84 e0       	ldi	r24, 0x04	; 4
    1f4a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f4e:	e8 c0       	rjmp	.+464    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1f50:	01 15       	cp	r16, r1
    1f52:	fa e0       	ldi	r31, 0x0A	; 10
    1f54:	1f 07       	cpc	r17, r31
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <uart_init+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	85 e0       	ldi	r24, 0x05	; 5
    1f5c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f60:	df c0       	rjmp	.+446    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1f62:	01 15       	cp	r16, r1
    1f64:	8b e0       	ldi	r24, 0x0B	; 11
    1f66:	18 07       	cpc	r17, r24
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <uart_init+0x188>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
    1f6c:	86 e0       	ldi	r24, 0x06	; 6
    1f6e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f72:	d6 c0       	rjmp	.+428    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1f74:	00 34       	cpi	r16, 0x40	; 64
    1f76:	a8 e0       	ldi	r26, 0x08	; 8
    1f78:	1a 07       	cpc	r17, r26
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <uart_init+0x19a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1f7c:	62 e0       	ldi	r22, 0x02	; 2
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f84:	cd c0       	rjmp	.+410    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1f86:	00 34       	cpi	r16, 0x40	; 64
    1f88:	b9 e0       	ldi	r27, 0x09	; 9
    1f8a:	1b 07       	cpc	r17, r27
    1f8c:	29 f4       	brne	.+10     	; 0x1f98 <uart_init+0x1ac>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1f8e:	62 e0       	ldi	r22, 0x02	; 2
    1f90:	84 e0       	ldi	r24, 0x04	; 4
    1f92:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1f96:	c4 c0       	rjmp	.+392    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1f98:	00 34       	cpi	r16, 0x40	; 64
    1f9a:	ea e0       	ldi	r30, 0x0A	; 10
    1f9c:	1e 07       	cpc	r17, r30
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <uart_init+0x1be>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1fa0:	62 e0       	ldi	r22, 0x02	; 2
    1fa2:	85 e0       	ldi	r24, 0x05	; 5
    1fa4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1fa8:	bb c0       	rjmp	.+374    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1faa:	00 34       	cpi	r16, 0x40	; 64
    1fac:	fb e0       	ldi	r31, 0x0B	; 11
    1fae:	1f 07       	cpc	r17, r31
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <uart_init+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1fb2:	62 e0       	ldi	r22, 0x02	; 2
    1fb4:	86 e0       	ldi	r24, 0x06	; 6
    1fb6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1fba:	b2 c0       	rjmp	.+356    	; 0x2120 <uart_init+0x334>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1fbc:	00 39       	cpi	r16, 0x90	; 144
    1fbe:	88 e0       	ldi	r24, 0x08	; 8
    1fc0:	18 07       	cpc	r17, r24
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <uart_init+0x1e2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1fc4:	64 e0       	ldi	r22, 0x04	; 4
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1fcc:	a9 c0       	rjmp	.+338    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1fce:	00 39       	cpi	r16, 0x90	; 144
    1fd0:	a9 e0       	ldi	r26, 0x09	; 9
    1fd2:	1a 07       	cpc	r17, r26
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <uart_init+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1fd6:	64 e0       	ldi	r22, 0x04	; 4
    1fd8:	84 e0       	ldi	r24, 0x04	; 4
    1fda:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1fde:	a0 c0       	rjmp	.+320    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1fe0:	00 39       	cpi	r16, 0x90	; 144
    1fe2:	ba e0       	ldi	r27, 0x0A	; 10
    1fe4:	1b 07       	cpc	r17, r27
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <uart_init+0x206>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1fe8:	64 e0       	ldi	r22, 0x04	; 4
    1fea:	85 e0       	ldi	r24, 0x05	; 5
    1fec:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ff0:	97 c0       	rjmp	.+302    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ff2:	00 39       	cpi	r16, 0x90	; 144
    1ff4:	eb e0       	ldi	r30, 0x0B	; 11
    1ff6:	1e 07       	cpc	r17, r30
    1ff8:	29 f4       	brne	.+10     	; 0x2004 <uart_init+0x218>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	86 e0       	ldi	r24, 0x06	; 6
    1ffe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2002:	8e c0       	rjmp	.+284    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2004:	00 3c       	cpi	r16, 0xC0	; 192
    2006:	f8 e0       	ldi	r31, 0x08	; 8
    2008:	1f 07       	cpc	r17, r31
    200a:	29 f4       	brne	.+10     	; 0x2016 <uart_init+0x22a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    200c:	68 e0       	ldi	r22, 0x08	; 8
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2014:	85 c0       	rjmp	.+266    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2016:	00 3c       	cpi	r16, 0xC0	; 192
    2018:	89 e0       	ldi	r24, 0x09	; 9
    201a:	18 07       	cpc	r17, r24
    201c:	29 f4       	brne	.+10     	; 0x2028 <uart_init+0x23c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    201e:	68 e0       	ldi	r22, 0x08	; 8
    2020:	84 e0       	ldi	r24, 0x04	; 4
    2022:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2026:	7c c0       	rjmp	.+248    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2028:	00 3c       	cpi	r16, 0xC0	; 192
    202a:	aa e0       	ldi	r26, 0x0A	; 10
    202c:	1a 07       	cpc	r17, r26
    202e:	29 f4       	brne	.+10     	; 0x203a <uart_init+0x24e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2030:	68 e0       	ldi	r22, 0x08	; 8
    2032:	85 e0       	ldi	r24, 0x05	; 5
    2034:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2038:	73 c0       	rjmp	.+230    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    203a:	00 3c       	cpi	r16, 0xC0	; 192
    203c:	bb e0       	ldi	r27, 0x0B	; 11
    203e:	1b 07       	cpc	r17, r27
    2040:	29 f4       	brne	.+10     	; 0x204c <uart_init+0x260>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2042:	68 e0       	ldi	r22, 0x08	; 8
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    204a:	6a c0       	rjmp	.+212    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    204c:	00 3a       	cpi	r16, 0xA0	; 160
    204e:	e8 e0       	ldi	r30, 0x08	; 8
    2050:	1e 07       	cpc	r17, r30
    2052:	29 f4       	brne	.+10     	; 0x205e <uart_init+0x272>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2054:	60 e1       	ldi	r22, 0x10	; 16
    2056:	83 e0       	ldi	r24, 0x03	; 3
    2058:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    205c:	61 c0       	rjmp	.+194    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    205e:	00 3a       	cpi	r16, 0xA0	; 160
    2060:	f9 e0       	ldi	r31, 0x09	; 9
    2062:	1f 07       	cpc	r17, r31
    2064:	29 f4       	brne	.+10     	; 0x2070 <uart_init+0x284>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2066:	60 e1       	ldi	r22, 0x10	; 16
    2068:	84 e0       	ldi	r24, 0x04	; 4
    206a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    206e:	58 c0       	rjmp	.+176    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2070:	00 3a       	cpi	r16, 0xA0	; 160
    2072:	8a e0       	ldi	r24, 0x0A	; 10
    2074:	18 07       	cpc	r17, r24
    2076:	29 f4       	brne	.+10     	; 0x2082 <uart_init+0x296>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2078:	60 e1       	ldi	r22, 0x10	; 16
    207a:	85 e0       	ldi	r24, 0x05	; 5
    207c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2080:	4f c0       	rjmp	.+158    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2082:	00 3a       	cpi	r16, 0xA0	; 160
    2084:	ab e0       	ldi	r26, 0x0B	; 11
    2086:	1a 07       	cpc	r17, r26
    2088:	29 f4       	brne	.+10     	; 0x2094 <uart_init+0x2a8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    208a:	60 e1       	ldi	r22, 0x10	; 16
    208c:	86 e0       	ldi	r24, 0x06	; 6
    208e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2092:	46 c0       	rjmp	.+140    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2094:	00 3b       	cpi	r16, 0xB0	; 176
    2096:	b8 e0       	ldi	r27, 0x08	; 8
    2098:	1b 07       	cpc	r17, r27
    209a:	29 f4       	brne	.+10     	; 0x20a6 <uart_init+0x2ba>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    209c:	60 e2       	ldi	r22, 0x20	; 32
    209e:	83 e0       	ldi	r24, 0x03	; 3
    20a0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20a4:	3d c0       	rjmp	.+122    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    20a6:	00 3b       	cpi	r16, 0xB0	; 176
    20a8:	e9 e0       	ldi	r30, 0x09	; 9
    20aa:	1e 07       	cpc	r17, r30
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <uart_init+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    20ae:	60 e2       	ldi	r22, 0x20	; 32
    20b0:	84 e0       	ldi	r24, 0x04	; 4
    20b2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20b6:	34 c0       	rjmp	.+104    	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    20b8:	00 3b       	cpi	r16, 0xB0	; 176
    20ba:	fa e0       	ldi	r31, 0x0A	; 10
    20bc:	1f 07       	cpc	r17, r31
    20be:	29 f4       	brne	.+10     	; 0x20ca <uart_init+0x2de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    20c0:	60 e2       	ldi	r22, 0x20	; 32
    20c2:	85 e0       	ldi	r24, 0x05	; 5
    20c4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20c8:	2b c0       	rjmp	.+86     	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    20ca:	00 3b       	cpi	r16, 0xB0	; 176
    20cc:	8b e0       	ldi	r24, 0x0B	; 11
    20ce:	18 07       	cpc	r17, r24
    20d0:	29 f4       	brne	.+10     	; 0x20dc <uart_init+0x2f0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    20d2:	60 e2       	ldi	r22, 0x20	; 32
    20d4:	86 e0       	ldi	r24, 0x06	; 6
    20d6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20da:	22 c0       	rjmp	.+68     	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    20dc:	00 38       	cpi	r16, 0x80	; 128
    20de:	a4 e0       	ldi	r26, 0x04	; 4
    20e0:	1a 07       	cpc	r17, r26
    20e2:	29 f4       	brne	.+10     	; 0x20ee <uart_init+0x302>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    20e4:	60 e4       	ldi	r22, 0x40	; 64
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20ec:	19 c0       	rjmp	.+50     	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    20ee:	00 39       	cpi	r16, 0x90	; 144
    20f0:	b4 e0       	ldi	r27, 0x04	; 4
    20f2:	1b 07       	cpc	r17, r27
    20f4:	29 f4       	brne	.+10     	; 0x2100 <uart_init+0x314>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    20f6:	60 e4       	ldi	r22, 0x40	; 64
    20f8:	84 e0       	ldi	r24, 0x04	; 4
    20fa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20fe:	10 c0       	rjmp	.+32     	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2100:	00 3a       	cpi	r16, 0xA0	; 160
    2102:	e4 e0       	ldi	r30, 0x04	; 4
    2104:	1e 07       	cpc	r17, r30
    2106:	29 f4       	brne	.+10     	; 0x2112 <uart_init+0x326>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2108:	60 e4       	ldi	r22, 0x40	; 64
    210a:	85 e0       	ldi	r24, 0x05	; 5
    210c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <uart_init+0x334>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2112:	00 3b       	cpi	r16, 0xB0	; 176
    2114:	14 40       	sbci	r17, 0x04	; 4
    2116:	21 f4       	brne	.+8      	; 0x2120 <uart_init+0x334>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2118:	60 e4       	ldi	r22, 0x40	; 64
    211a:	86 e0       	ldi	r24, 0x06	; 6
    211c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
	
	usart_serial_init(P_device->Usart, &usart_options);
    2120:	d7 01       	movw	r26, r14
    2122:	12 96       	adiw	r26, 0x02	; 2
    2124:	0d 91       	ld	r16, X+
    2126:	1c 91       	ld	r17, X
    2128:	13 97       	sbiw	r26, 0x03	; 3
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    212a:	e0 e0       	ldi	r30, 0x00	; 0
    212c:	f0 e2       	ldi	r31, 0x20	; 32
    212e:	84 81       	ldd	r24, Z+4	; 0x04
    2130:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2132:	85 81       	ldd	r24, Z+5	; 0x05
    2134:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2136:	86 81       	ldd	r24, Z+6	; 0x06
    2138:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	a2 81       	ldd	r26, Z+2	; 0x02
    2140:	b3 81       	ldd	r27, Z+3	; 0x03
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	ab 83       	std	Y+3, r26	; 0x03
    2148:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    214a:	78 01       	movw	r14, r16
    214c:	00 3a       	cpi	r16, 0xA0	; 160
    214e:	b8 e0       	ldi	r27, 0x08	; 8
    2150:	1b 07       	cpc	r17, r27
    2152:	29 f4       	brne	.+10     	; 0x215e <uart_init+0x372>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    2154:	60 e1       	ldi	r22, 0x10	; 16
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    215c:	13 c0       	rjmp	.+38     	; 0x2184 <uart_init+0x398>
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    215e:	00 3b       	cpi	r16, 0xB0	; 176
    2160:	e8 e0       	ldi	r30, 0x08	; 8
    2162:	1e 07       	cpc	r17, r30
    2164:	29 f4       	brne	.+10     	; 0x2170 <uart_init+0x384>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    2166:	60 e2       	ldi	r22, 0x20	; 32
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <uart_init+0x3ac>
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    2170:	f0 ea       	ldi	r31, 0xA0	; 160
    2172:	ef 16       	cp	r14, r31
    2174:	f9 e0       	ldi	r31, 0x09	; 9
    2176:	ff 06       	cpc	r15, r31
    2178:	29 f4       	brne	.+10     	; 0x2184 <uart_init+0x398>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    217a:	60 e1       	ldi	r22, 0x10	; 16
    217c:	84 e0       	ldi	r24, 0x04	; 4
    217e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <uart_init+0x3c0>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    2184:	80 eb       	ldi	r24, 0xB0	; 176
    2186:	e8 16       	cp	r14, r24
    2188:	89 e0       	ldi	r24, 0x09	; 9
    218a:	f8 06       	cpc	r15, r24
    218c:	29 f4       	brne	.+10     	; 0x2198 <uart_init+0x3ac>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    218e:	60 e2       	ldi	r22, 0x20	; 32
    2190:	84 e0       	ldi	r24, 0x04	; 4
    2192:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <uart_init+0x3d4>
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    2198:	a0 ea       	ldi	r26, 0xA0	; 160
    219a:	ea 16       	cp	r14, r26
    219c:	aa e0       	ldi	r26, 0x0A	; 10
    219e:	fa 06       	cpc	r15, r26
    21a0:	29 f4       	brne	.+10     	; 0x21ac <uart_init+0x3c0>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    21a2:	60 e1       	ldi	r22, 0x10	; 16
    21a4:	85 e0       	ldi	r24, 0x05	; 5
    21a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <uart_init+0x3e8>
	}
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
    21ac:	b0 eb       	ldi	r27, 0xB0	; 176
    21ae:	eb 16       	cp	r14, r27
    21b0:	ba e0       	ldi	r27, 0x0A	; 10
    21b2:	fb 06       	cpc	r15, r27
    21b4:	29 f4       	brne	.+10     	; 0x21c0 <uart_init+0x3d4>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
    21b6:	60 e2       	ldi	r22, 0x20	; 32
    21b8:	85 e0       	ldi	r24, 0x05	; 5
    21ba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21be:	13 c0       	rjmp	.+38     	; 0x21e6 <uart_init+0x3fa>
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    21c0:	e0 ea       	ldi	r30, 0xA0	; 160
    21c2:	ee 16       	cp	r14, r30
    21c4:	eb e0       	ldi	r30, 0x0B	; 11
    21c6:	fe 06       	cpc	r15, r30
    21c8:	29 f4       	brne	.+10     	; 0x21d4 <uart_init+0x3e8>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    21ca:	60 e1       	ldi	r22, 0x10	; 16
    21cc:	86 e0       	ldi	r24, 0x06	; 6
    21ce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <uart_init+0x3fa>
	}
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
    21d4:	f0 eb       	ldi	r31, 0xB0	; 176
    21d6:	ef 16       	cp	r14, r31
    21d8:	fb e0       	ldi	r31, 0x0B	; 11
    21da:	ff 06       	cpc	r15, r31
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <uart_init+0x3fa>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
    21de:	60 e2       	ldi	r22, 0x20	; 32
    21e0:	86 e0       	ldi	r24, 0x06	; 6
    21e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    21e6:	be 01       	movw	r22, r28
    21e8:	6f 5f       	subi	r22, 0xFF	; 255
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	c8 01       	movw	r24, r16
    21ee:	76 dc       	rcall	.-1812   	; 0x1adc <usart_init_rs232>
	
	
	
}
    21f0:	13 c0       	rjmp	.+38     	; 0x2218 <uart_init+0x42c>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    21f2:	e0 e0       	ldi	r30, 0x00	; 0
    21f4:	f0 e2       	ldi	r31, 0x20	; 32
    21f6:	84 81       	ldd	r24, Z+4	; 0x04
    21f8:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    21fa:	85 81       	ldd	r24, Z+5	; 0x05
    21fc:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    21fe:	86 81       	ldd	r24, Z+6	; 0x06
    2200:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	a2 81       	ldd	r26, Z+2	; 0x02
    2208:	b3 81       	ldd	r27, Z+3	; 0x03
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	ab 83       	std	Y+3, r26	; 0x03
    2210:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    2212:	e1 2c       	mov	r14, r1
    2214:	f1 2c       	mov	r15, r1
    2216:	ac cf       	rjmp	.-168    	; 0x2170 <uart_init+0x384>
    2218:	27 96       	adiw	r28, 0x07	; 7
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	ff 90       	pop	r15
    2228:	ef 90       	pop	r14
    222a:	08 95       	ret

0000222c <__portable_avr_delay_cycles>:
}
/*	Brief : The delay routine
 *	\param : delay in ms
*/
void BNO055_delay_msek(u32 msek)
{
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <__portable_avr_delay_cycles+0xa>
    222e:	61 50       	subi	r22, 0x01	; 1
    2230:	71 09       	sbc	r23, r1
    2232:	81 09       	sbc	r24, r1
    2234:	91 09       	sbc	r25, r1
    2236:	61 15       	cp	r22, r1
    2238:	71 05       	cpc	r23, r1
    223a:	81 05       	cpc	r24, r1
    223c:	91 05       	cpc	r25, r1
    223e:	b9 f7       	brne	.-18     	; 0x222e <__portable_avr_delay_cycles+0x2>
    2240:	08 95       	ret

00002242 <main>:
	/*Here you can write your own delay routine*/
}


int main (void)
{
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	a0 97       	sbiw	r28, 0x20	; 32
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	de bf       	out	0x3e, r29	; 62
	//bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);//NDOF
	//
	//struct bno055_euler_float_t eulerData;
	//bno055_convert_float_euler_hpr_deg(&eulerData);
	
	sysclk_init();
    2250:	0e 94 25 01 	call	0x24a	; 0x24a <sysclk_init>
	uart_device openLog;
	openLog.Baud=115200;
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	92 ec       	ldi	r25, 0xC2	; 194
    2258:	a1 e0       	ldi	r26, 0x01	; 1
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	89 87       	std	Y+9, r24	; 0x09
    225e:	9a 87       	std	Y+10, r25	; 0x0a
    2260:	ab 87       	std	Y+11, r26	; 0x0b
    2262:	bc 87       	std	Y+12, r27	; 0x0c
	openLog.Port=&PORTC;
    2264:	80 e4       	ldi	r24, 0x40	; 64
    2266:	96 e0       	ldi	r25, 0x06	; 6
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	9a 83       	std	Y+2, r25	; 0x02
	openLog.Usart=&USARTC0;
    226c:	80 ea       	ldi	r24, 0xA0	; 160
    226e:	98 e0       	ldi	r25, 0x08	; 8
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	9c 83       	std	Y+4, r25	; 0x04
	openLog.tx=0b00001000;
    2274:	88 e0       	ldi	r24, 0x08	; 8
    2276:	8e 83       	std	Y+6, r24	; 0x06
	openLog.rx=0b00000100;
    2278:	84 e0       	ldi	r24, 0x04	; 4
    227a:	8d 83       	std	Y+5, r24	; 0x05
	
	uart_init(&openLog);
    227c:	ce 01       	movw	r24, r28
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	b5 dd       	rcall	.-1174   	; 0x1dec <uart_init>
	while (1) {
		const char  messege[] = "It's treason, then.";
    2282:	84 e1       	ldi	r24, 0x14	; 20
    2284:	e7 e0       	ldi	r30, 0x07	; 7
    2286:	f0 e2       	ldi	r31, 0x20	; 32
    2288:	de 01       	movw	r26, r28
    228a:	1d 96       	adiw	r26, 0x0d	; 13
    228c:	01 90       	ld	r0, Z+
    228e:	0d 92       	st	X+, r0
    2290:	8a 95       	dec	r24
    2292:	e1 f7       	brne	.-8      	; 0x228c <main+0x4a>
		usart_serial_write_packet(openLog.Usart, messege,sizeof(messege));
    2294:	44 e1       	ldi	r20, 0x14	; 20
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	be 01       	movw	r22, r28
    229a:	63 5f       	subi	r22, 0xF3	; 243
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <usart_serial_write_packet>
		delay_ms(45);
    22a6:	60 e8       	ldi	r22, 0x80	; 128
    22a8:	79 ea       	ldi	r23, 0xA9	; 169
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	be df       	rcall	.-132    	; 0x222c <__portable_avr_delay_cycles>
    22b0:	e8 cf       	rjmp	.-48     	; 0x2282 <main+0x40>

000022b2 <__udivmodsi4>:
    22b2:	a1 e2       	ldi	r26, 0x21	; 33
    22b4:	1a 2e       	mov	r1, r26
    22b6:	aa 1b       	sub	r26, r26
    22b8:	bb 1b       	sub	r27, r27
    22ba:	fd 01       	movw	r30, r26
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <__udivmodsi4_ep>

000022be <__udivmodsi4_loop>:
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	ee 1f       	adc	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	a2 17       	cp	r26, r18
    22c8:	b3 07       	cpc	r27, r19
    22ca:	e4 07       	cpc	r30, r20
    22cc:	f5 07       	cpc	r31, r21
    22ce:	20 f0       	brcs	.+8      	; 0x22d8 <__udivmodsi4_ep>
    22d0:	a2 1b       	sub	r26, r18
    22d2:	b3 0b       	sbc	r27, r19
    22d4:	e4 0b       	sbc	r30, r20
    22d6:	f5 0b       	sbc	r31, r21

000022d8 <__udivmodsi4_ep>:
    22d8:	66 1f       	adc	r22, r22
    22da:	77 1f       	adc	r23, r23
    22dc:	88 1f       	adc	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	1a 94       	dec	r1
    22e2:	69 f7       	brne	.-38     	; 0x22be <__udivmodsi4_loop>
    22e4:	60 95       	com	r22
    22e6:	70 95       	com	r23
    22e8:	80 95       	com	r24
    22ea:	90 95       	com	r25
    22ec:	9b 01       	movw	r18, r22
    22ee:	ac 01       	movw	r20, r24
    22f0:	bd 01       	movw	r22, r26
    22f2:	cf 01       	movw	r24, r30
    22f4:	08 95       	ret

000022f6 <_exit>:
    22f6:	f8 94       	cli

000022f8 <__stop_program>:
    22f8:	ff cf       	rjmp	.-2      	; 0x22f8 <__stop_program>
