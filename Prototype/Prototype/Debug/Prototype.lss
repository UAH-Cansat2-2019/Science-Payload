
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00802000  00006e32  00006ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000161  00802074  00802074  00006f3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000980  00000000  00000000  00006fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011f60  00000000  00000000  00007958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000628f  00000000  00000000  000198b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cbfe  00000000  00000000  0001fb47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fb4  00000000  00000000  0002c748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000411a1  00000000  00000000  0002f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000069af  00000000  00000000  0007089d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000890  00000000  00000000  0007724c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e0e2  00000000  00000000  00077adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__vector_10>
      2c:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__vector_11>
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 ad 21 	jmp	0x435a	; 0x435a <__vector_13>
      38:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_14>
      3c:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__vector_15>
      40:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__vector_16>
      44:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__vector_17>
      48:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__vector_18>
      4c:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__vector_19>
      50:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__vector_20>
      54:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__vector_21>
      58:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__vector_22>
      5c:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1a c6       	rjmp	.+3124   	; 0xcd2 <__vector_39>
      9e:	00 00       	nop
      a0:	a4 c6       	rjmp	.+3400   	; 0xdea <__vector_40>
      a2:	00 00       	nop
      a4:	2e c7       	rjmp	.+3676   	; 0xf02 <__vector_41>
      a6:	00 00       	nop
      a8:	b8 c7       	rjmp	.+3952   	; 0x101a <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 45 22 	jmp	0x448a	; 0x448a <__vector_46>
      bc:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__vector_47>
      c0:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__vector_48>
      c4:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__vector_49>
      c8:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__vector_50>
      cc:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__vector_51>
      d0:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__vector_52>
      d4:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__vector_53>
      d8:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__vector_54>
      dc:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__vector_55>
      e0:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__vector_56>
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__vector_61>
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	aa c3       	rjmp	.+1876   	; 0x872 <__vector_71>
     11e:	00 00       	nop
     120:	34 c4       	rjmp	.+2152   	; 0x98a <__vector_72>
     122:	00 00       	nop
     124:	be c4       	rjmp	.+2428   	; 0xaa2 <__vector_73>
     126:	00 00       	nop
     128:	48 c5       	rjmp	.+2704   	; 0xbba <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__vector_76>
     134:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__vector_77>
     138:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__vector_78>
     13c:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__vector_79>
     140:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__vector_80>
     144:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__vector_81>
     148:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__vector_82>
     14c:	0c 94 85 19 	jmp	0x330a	; 0x330a <__vector_83>
     150:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__vector_84>
     154:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__vector_85>
     158:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__vector_107>
     1b0:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__vector_108>
     1b4:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__vector_109>
     1b8:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__vector_110>
     1bc:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__vector_111>
     1c0:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__vector_112>
     1c4:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__vector_113>
     1c8:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__vector_114>
     1cc:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__vector_115>
     1d0:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__vector_116>
     1d4:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__vector_117>
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__vector_119>
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e2 e3       	ldi	r30, 0x32	; 50
     31e:	fe e6       	ldi	r31, 0x6E	; 110
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a4 37       	cpi	r26, 0x74	; 116
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	21 e2       	ldi	r18, 0x21	; 33
     334:	a4 e7       	ldi	r26, 0x74	; 116
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a5 3d       	cpi	r26, 0xD5	; 213
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <main>
     346:	0c 94 17 37 	jmp	0x6e2e	; 0x6e2e <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <ioport_set_pin_low>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_low(port_pin_t pin)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	2a 97       	sbiw	r28, 0x0a	; 10
     356:	cd bf       	out	0x3d, r28	; 61
     358:	de bf       	out	0x3e, r29	; 62
     35a:	8a 87       	std	Y+10, r24	; 0x0a
     35c:	8a 85       	ldd	r24, Y+10	; 0x0a
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	1a 82       	std	Y+2, r1	; 0x02
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8b 83       	std	Y+3, r24	; 0x03
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	86 95       	lsr	r24
     36e:	86 95       	lsr	r24
     370:	86 95       	lsr	r24
     372:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     374:	8d 81       	ldd	r24, Y+5	; 0x05
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	82 95       	swap	r24
     380:	92 95       	swap	r25
     382:	90 7f       	andi	r25, 0xF0	; 240
     384:	98 27       	eor	r25, r24
     386:	80 7f       	andi	r24, 0xF0	; 240
     388:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     38a:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     38c:	8e 83       	std	Y+6, r24	; 0x06
     38e:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	88 23       	and	r24, r24
     394:	a9 f0       	breq	.+42     	; 0x3c0 <ioport_set_pin_low+0x74>
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     39a:	88 85       	ldd	r24, Y+8	; 0x08
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	9c 01       	movw	r18, r24
     3a2:	27 70       	andi	r18, 0x07	; 7
     3a4:	33 27       	eor	r19, r19
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <ioport_set_pin_low+0x64>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	2a 95       	dec	r18
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <ioport_set_pin_low+0x60>
     3b4:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	fc 01       	movw	r30, r24
     3bc:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, false);
}
     3be:	14 c0       	rjmp	.+40     	; 0x3e8 <ioport_set_pin_low+0x9c>
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3c4:	89 85       	ldd	r24, Y+9	; 0x09
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9c 01       	movw	r18, r24
     3cc:	27 70       	andi	r18, 0x07	; 7
     3ce:	33 27       	eor	r19, r19
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <ioport_set_pin_low+0x8e>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	2a 95       	dec	r18
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <ioport_set_pin_low+0x8a>
     3de:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     3e0:	8e 81       	ldd	r24, Y+6	; 0x06
     3e2:	9f 81       	ldd	r25, Y+7	; 0x07
     3e4:	fc 01       	movw	r30, r24
     3e6:	26 83       	std	Z+6, r18	; 0x06
     3e8:	00 00       	nop
     3ea:	2a 96       	adiw	r28, 0x0a	; 10
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	2a 97       	sbiw	r28, 0x0a	; 10
     400:	cd bf       	out	0x3d, r28	; 61
     402:	de bf       	out	0x3e, r29	; 62
     404:	8a 87       	std	Y+10, r24	; 0x0a
     406:	8a 85       	ldd	r24, Y+10	; 0x0a
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8a 83       	std	Y+2, r24	; 0x02
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	86 95       	lsr	r24
     41a:	86 95       	lsr	r24
     41c:	86 95       	lsr	r24
     41e:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     420:	8d 81       	ldd	r24, Y+5	; 0x05
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 95       	swap	r24
     42c:	92 95       	swap	r25
     42e:	90 7f       	andi	r25, 0xF0	; 240
     430:	98 27       	eor	r25, r24
     432:	80 7f       	andi	r24, 0xF0	; 240
     434:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     436:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     438:	8e 83       	std	Y+6, r24	; 0x06
     43a:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	88 23       	and	r24, r24
     440:	a9 f0       	breq	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     446:	88 85       	ldd	r24, Y+8	; 0x08
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9c 01       	movw	r18, r24
     44e:	27 70       	andi	r18, 0x07	; 7
     450:	33 27       	eor	r19, r19
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	2a 95       	dec	r18
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     462:	8e 81       	ldd	r24, Y+6	; 0x06
     464:	9f 81       	ldd	r25, Y+7	; 0x07
     466:	fc 01       	movw	r30, r24
     468:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, true);
}
     46a:	14 c0       	rjmp	.+40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     470:	89 85       	ldd	r24, Y+9	; 0x09
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9c 01       	movw	r18, r24
     478:	27 70       	andi	r18, 0x07	; 7
     47a:	33 27       	eor	r19, r19
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	2a 95       	dec	r18
     488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     48a:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     48c:	8e 81       	ldd	r24, Y+6	; 0x06
     48e:	9f 81       	ldd	r25, Y+7	; 0x07
     490:	fc 01       	movw	r30, r24
     492:	26 83       	std	Z+6, r18	; 0x06
     494:	00 00       	nop
     496:	2a 96       	adiw	r28, 0x0a	; 10
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <spi_put+0x6>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	6b 83       	std	Y+3, r22	; 0x03
	spi->DATA = data;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	2b 81       	ldd	r18, Y+3	; 0x03
     4b8:	fc 01       	movw	r30, r24
     4ba:	23 83       	std	Z+3, r18	; 0x03
}
     4bc:	00 00       	nop
     4be:	23 96       	adiw	r28, 0x03	; 3
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	1f 92       	push	r1
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	9a 83       	std	Y+2, r25	; 0x02
	return spi->DATA;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	fc 01       	movw	r30, r24
     4e0:	83 81       	ldd	r24, Z+3	; 0x03
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <spi_is_tx_ok>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	1f 92       	push	r1
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	9a 83       	std	Y+2, r25	; 0x02
	return spi->STATUS & SPI_IF_bm ? true : false;
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	fc 01       	movw	r30, r24
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	88 1f       	adc	r24, r24
     506:	88 27       	eor	r24, r24
     508:	88 1f       	adc	r24, r24
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <spi_enable_master_mode>:
 * \param spi Base address of the SPI instance.
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	1f 92       	push	r1
     51a:	1f 92       	push	r1
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_MASTER_bm;
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	28 2f       	mov	r18, r24
     52e:	20 61       	ori	r18, 0x10	; 16
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
}
     538:	00 00       	nop
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <spi_read_single>:
 * \param spi Base address of the SPI instance.
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <spi_read_single+0x6>
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	6b 83       	std	Y+3, r22	; 0x03
     556:	7c 83       	std	Y+4, r23	; 0x04
	*data=spi_get(spi);
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	b6 df       	rcall	.-148    	; 0x4ca <spi_get>
     55e:	28 2f       	mov	r18, r24
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
}
     568:	00 00       	nop
     56a:	24 96       	adiw	r28, 0x04	; 4
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	de bf       	out	0x3e, r29	; 62
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <spi_is_rx_full>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
inline static bool spi_is_rx_full(SPI_t *spi)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	1f 92       	push	r1
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	89 83       	std	Y+1, r24	; 0x01
     584:	9a 83       	std	Y+2, r25	; 0x02
	return spi_is_tx_ok(spi);
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	b0 df       	rcall	.-160    	; 0x4ec <spi_is_tx_ok>
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	98 e4       	ldi	r25, 0x48	; 72
     5a2:	a8 ee       	ldi	r26, 0xE8	; 232
     5a4:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     5ba:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     5bc:	ec df       	rcall	.-40     	; 0x596 <sysclk_get_main_hz>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	22 2f       	mov	r18, r18
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <sysclk_get_per4_hz+0x22>
     5ca:	b6 95       	lsr	r27
     5cc:	a7 95       	ror	r26
     5ce:	97 95       	ror	r25
     5d0:	87 95       	ror	r24
     5d2:	2a 95       	dec	r18
     5d4:	d2 f7       	brpl	.-12     	; 0x5ca <sysclk_get_per4_hz+0x1a>
}
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     5ea:	e2 df       	rcall	.-60     	; 0x5b0 <sysclk_get_per4_hz>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     602:	ef df       	rcall	.-34     	; 0x5e2 <sysclk_get_per2_hz>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
}
     608:	bc 01       	movw	r22, r24
     60a:	cd 01       	movw	r24, r26
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
     61a:	ef df       	rcall	.-34     	; 0x5fa <sysclk_get_per_hz>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
}
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	1f 92       	push	r1
     630:	1f 92       	push	r1
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	9a 83       	std	Y+2, r25	; 0x02
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	80 3c       	cpi	r24, 0xC0	; 192
     640:	98 40       	sbci	r25, 0x08	; 8
     642:	21 f4       	brne	.+8      	; 0x64c <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     644:	68 e0       	ldi	r22, 0x08	; 8
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	80 3c       	cpi	r24, 0xC0	; 192
     652:	99 40       	sbci	r25, 0x09	; 9
     654:	21 f4       	brne	.+8      	; 0x65e <spi_master_init+0x34>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	if ((uint16_t)spi == (uint16_t)&SPIE) {
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	80 3c       	cpi	r24, 0xC0	; 192
     664:	9a 40       	sbci	r25, 0x0A	; 10
     666:	21 f4       	brne	.+8      	; 0x670 <spi_master_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E, PR_SPI_bm);
     668:	68 e0       	ldi	r22, 0x08	; 8
     66a:	85 e0       	ldi	r24, 0x05	; 5
     66c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	if ((uint16_t)spi == (uint16_t)&SPIF) {
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	80 3c       	cpi	r24, 0xC0	; 192
     676:	9b 40       	sbci	r25, 0x0B	; 11
     678:	21 f4       	brne	.+8      	; 0x682 <spi_master_init+0x58>
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
     67a:	68 e0       	ldi	r22, 0x08	; 8
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
	}
#endif
	spi_enable_master_mode(spi);
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	46 df       	rcall	.-372    	; 0x514 <spi_enable_master_mode>
}
     688:	00 00       	nop
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	2d 97       	sbiw	r28, 0x0d	; 13
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	6b 83       	std	Y+3, r22	; 0x03
     6b4:	7c 83       	std	Y+4, r23	; 0x04
     6b6:	4d 83       	std	Y+5, r20	; 0x05
     6b8:	0e 83       	std	Y+6, r16	; 0x06
     6ba:	1f 83       	std	Y+7, r17	; 0x07
     6bc:	28 87       	std	Y+8, r18	; 0x08
     6be:	39 87       	std	Y+9, r19	; 0x09
     6c0:	ca 86       	std	Y+10, r12	; 0x0a
     6c2:	db 86       	std	Y+11, r13	; 0x0b
     6c4:	ec 86       	std	Y+12, r14	; 0x0c
     6c6:	fd 86       	std	Y+13, r15	; 0x0d
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     6c8:	a4 df       	rcall	.-184    	; 0x612 <sysclk_get_cpu_hz>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	8e 81       	ldd	r24, Y+6	; 0x06
     6d0:	9f 81       	ldd	r25, Y+7	; 0x07
     6d2:	a8 85       	ldd	r26, Y+8	; 0x08
     6d4:	b9 85       	ldd	r27, Y+9	; 0x09
     6d6:	e9 81       	ldd	r30, Y+1	; 0x01
     6d8:	fa 81       	ldd	r31, Y+2	; 0x02
     6da:	89 01       	movw	r16, r18
     6dc:	9a 01       	movw	r18, r20
     6de:	ac 01       	movw	r20, r24
     6e0:	bd 01       	movw	r22, r26
     6e2:	cf 01       	movw	r24, r30
     6e4:	0e 94 9d 13 	call	0x273a	; 0x273a <spi_xmega_set_baud_div>
     6e8:	88 23       	and	r24, r24
     6ea:	ac f0       	brlt	.+42     	; 0x716 <spi_master_setup_device+0x82>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	28 2f       	mov	r18, r24
     6f6:	23 7f       	andi	r18, 0xF3	; 243
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     706:	8c 70       	andi	r24, 0x0C	; 12
     708:	82 2b       	or	r24, r18
     70a:	28 2f       	mov	r18, r24
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
     714:	01 c0       	rjmp	.+2      	; 0x718 <spi_master_setup_device+0x84>
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
		Assert(false);
		return;
     716:	00 00       	nop
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     718:	2d 96       	adiw	r28, 0x0d	; 13
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	8c 83       	std	Y+4, r24	; 0x04
     740:	9d 83       	std	Y+5, r25	; 0x05
     742:	6e 83       	std	Y+6, r22	; 0x06
     744:	7f 83       	std	Y+7, r23	; 0x07
     746:	48 87       	std	Y+8, r20	; 0x08
     748:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     74a:	1b c0       	rjmp	.+54     	; 0x782 <spi_write_packet+0x52>
		spi_write_single(spi, *data++);
     74c:	8e 81       	ldd	r24, Y+6	; 0x06
     74e:	9f 81       	ldd	r25, Y+7	; 0x07
     750:	9c 01       	movw	r18, r24
     752:	2f 5f       	subi	r18, 0xFF	; 255
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	2e 83       	std	Y+6, r18	; 0x06
     758:	3f 83       	std	Y+7, r19	; 0x07
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8c 81       	ldd	r24, Y+4	; 0x04
     760:	9d 81       	ldd	r25, Y+5	; 0x05
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	2b 83       	std	Y+3, r18	; 0x03
 * \param data The data byte to be loaded
 *
 */
__always_inline static void spi_write_single(SPI_t *spi, uint8_t data)
{
	spi_put(spi,data);
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	6b 81       	ldd	r22, Y+3	; 0x03
     76e:	99 de       	rcall	.-718    	; 0x4a2 <spi_put>
		
		while (!spi_is_rx_full(spi)) {
     770:	00 00       	nop
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	9d 81       	ldd	r25, Y+5	; 0x05
     776:	ff de       	rcall	.-514    	; 0x576 <spi_is_rx_full>
     778:	98 2f       	mov	r25, r24
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 27       	eor	r24, r25
     77e:	88 23       	and	r24, r24
     780:	c1 f7       	brne	.-16     	; 0x772 <spi_write_packet+0x42>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     782:	88 85       	ldd	r24, Y+8	; 0x08
     784:	99 85       	ldd	r25, Y+9	; 0x09
     786:	9c 01       	movw	r18, r24
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	31 09       	sbc	r19, r1
     78c:	28 87       	std	Y+8, r18	; 0x08
     78e:	39 87       	std	Y+9, r19	; 0x09
     790:	89 2b       	or	r24, r25
     792:	e1 f6       	brne	.-72     	; 0x74c <spi_write_packet+0x1c>
		
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
     794:	80 e0       	ldi	r24, 0x00	; 0
}
     796:	29 96       	adiw	r28, 0x09	; 9
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	29 97       	sbiw	r28, 0x09	; 9
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	8c 83       	std	Y+4, r24	; 0x04
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	6e 83       	std	Y+6, r22	; 0x06
     7b6:	7f 83       	std	Y+7, r23	; 0x07
     7b8:	48 87       	std	Y+8, r20	; 0x08
     7ba:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     7bc:	1e c0       	rjmp	.+60     	; 0x7fa <spi_read_packet+0x58>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	8b 83       	std	Y+3, r24	; 0x03
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	6b 81       	ldd	r22, Y+3	; 0x03
     7d0:	68 de       	rcall	.-816    	; 0x4a2 <spi_put>
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     7d2:	00 00       	nop
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	9d 81       	ldd	r25, Y+5	; 0x05
     7d8:	ce de       	rcall	.-612    	; 0x576 <spi_is_rx_full>
     7da:	98 2f       	mov	r25, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 27       	eor	r24, r25
     7e0:	88 23       	and	r24, r24
     7e2:	c1 f7       	brne	.-16     	; 0x7d4 <spi_read_packet+0x32>
		}
		
		spi_read_single(spi, data);
     7e4:	2e 81       	ldd	r18, Y+6	; 0x06
     7e6:	3f 81       	ldd	r19, Y+7	; 0x07
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	9d 81       	ldd	r25, Y+5	; 0x05
     7ec:	b9 01       	movw	r22, r18
     7ee:	aa de       	rcall	.-684    	; 0x544 <spi_read_single>
		data++;
     7f0:	8e 81       	ldd	r24, Y+6	; 0x06
     7f2:	9f 81       	ldd	r25, Y+7	; 0x07
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	8e 83       	std	Y+6, r24	; 0x06
     7f8:	9f 83       	std	Y+7, r25	; 0x07
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     7fa:	88 85       	ldd	r24, Y+8	; 0x08
     7fc:	99 85       	ldd	r25, Y+9	; 0x09
     7fe:	9c 01       	movw	r18, r24
     800:	21 50       	subi	r18, 0x01	; 1
     802:	31 09       	sbc	r19, r1
     804:	28 87       	std	Y+8, r18	; 0x08
     806:	39 87       	std	Y+9, r19	; 0x09
     808:	89 2b       	or	r24, r25
     80a:	c9 f6       	brne	.-78     	; 0x7be <spi_read_packet+0x1c>
		
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
     80c:	80 e0       	ldi	r24, 0x00	; 0
}
     80e:	29 96       	adiw	r28, 0x09	; 9
     810:	cd bf       	out	0x3d, r28	; 61
     812:	de bf       	out	0x3e, r29	; 62
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <spi_select_device+0x6>
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	6b 83       	std	Y+3, r22	; 0x03
     82c:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_low(device->id);
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	8a dd       	rcall	.-1260   	; 0x34c <ioport_set_pin_low>
}
     838:	00 00       	nop
     83a:	24 96       	adiw	r28, 0x04	; 4
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	de bf       	out	0x3e, r29	; 62
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <spi_deselect_device+0x6>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	9a 83       	std	Y+2, r25	; 0x02
     856:	6b 83       	std	Y+3, r22	; 0x03
     858:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_high(device->id);
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	c9 dd       	rcall	.-1134   	; 0x3f6 <ioport_set_pin_high>
}
     864:	00 00       	nop
     866:	24 96       	adiw	r28, 0x04	; 4
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     882:	0f 92       	push	r0
     884:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     888:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     88c:	0f 92       	push	r0
     88e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     892:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     896:	0f 92       	push	r0
     898:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     89c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a0:	0f 92       	push	r0
     8a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <__vector_71+0x52>
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     8ca:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <adca_callback>
     8ce:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <adca_callback+0x1>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8de:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	83 70       	andi	r24, 0x03	; 3
     8e8:	99 27       	eor	r25, r25
     8ea:	89 2b       	or	r24, r25
     8ec:	39 f4       	brne	.+14     	; 0x8fc <__vector_71+0x8a>
		index += 2;
     8ee:	8c 81       	ldd	r24, Y+4	; 0x04
     8f0:	8e 5f       	subi	r24, 0xFE	; 254
     8f2:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	86 95       	lsr	r24
     8f8:	86 95       	lsr	r24
     8fa:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	81 70       	andi	r24, 0x01	; 1
     904:	99 27       	eor	r25, r25
     906:	89 2b       	or	r24, r25
     908:	19 f4       	brne	.+6      	; 0x910 <__vector_71+0x9e>
		index++;
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	ac 01       	movw	r20, r24
     916:	40 5e       	subi	r20, 0xE0	; 224
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	8c 81       	ldd	r24, Y+4	; 0x04
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	84 0f       	add	r24, r20
     92e:	95 1f       	adc	r25, r21
     930:	fc 01       	movw	r30, r24
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	95 81       	ldd	r25, Z+5	; 0x05
     936:	ac 01       	movw	r20, r24
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	f9 01       	movw	r30, r18
     940:	19 95       	eicall
}
     942:	00 00       	nop
     944:	24 96       	adiw	r28, 0x04	; 4
     946:	cd bf       	out	0x3d, r28	; 61
     948:	de bf       	out	0x3e, r29	; 62
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     96c:	0f 90       	pop	r0
     96e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     972:	0f 90       	pop	r0
     974:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     978:	0f 90       	pop	r0
     97a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     97e:	0f 90       	pop	r0
     980:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     99a:	0f 92       	push	r0
     99c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9a4:	0f 92       	push	r0
     9a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9ae:	0f 92       	push	r0
     9b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9b8:	0f 92       	push	r0
     9ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <__vector_72+0x52>
     9dc:	1f 92       	push	r1
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     9e2:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <adca_callback>
     9e6:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <adca_callback+0x1>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     9f6:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	83 70       	andi	r24, 0x03	; 3
     a00:	99 27       	eor	r25, r25
     a02:	89 2b       	or	r24, r25
     a04:	39 f4       	brne	.+14     	; 0xa14 <__vector_72+0x8a>
		index += 2;
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	8e 5f       	subi	r24, 0xFE	; 254
     a0a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	86 95       	lsr	r24
     a10:	86 95       	lsr	r24
     a12:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	81 70       	andi	r24, 0x01	; 1
     a1c:	99 27       	eor	r25, r25
     a1e:	89 2b       	or	r24, r25
     a20:	19 f4       	brne	.+6      	; 0xa28 <__vector_72+0x9e>
		index++;
     a22:	8c 81       	ldd	r24, Y+4	; 0x04
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	ac 01       	movw	r20, r24
     a2e:	40 5e       	subi	r20, 0xE0	; 224
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	8c 81       	ldd	r24, Y+4	; 0x04
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	fc 01       	movw	r30, r24
     a4a:	84 81       	ldd	r24, Z+4	; 0x04
     a4c:	95 81       	ldd	r25, Z+5	; 0x05
     a4e:	ac 01       	movw	r20, r24
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	f9 01       	movw	r30, r18
     a58:	19 95       	eicall
}
     a5a:	00 00       	nop
     a5c:	24 96       	adiw	r28, 0x04	; 4
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a84:	0f 90       	pop	r0
     a86:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a8a:	0f 90       	pop	r0
     a8c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a90:	0f 90       	pop	r0
     a92:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a96:	0f 90       	pop	r0
     a98:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ab2:	0f 92       	push	r0
     ab4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ab8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     abc:	0f 92       	push	r0
     abe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ac2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ac6:	0f 92       	push	r0
     ac8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     acc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad0:	0f 92       	push	r0
     ad2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <__vector_73+0x52>
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     afa:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <adca_callback>
     afe:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <adca_callback+0x1>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     b0e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	88 2f       	mov	r24, r24
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	83 70       	andi	r24, 0x03	; 3
     b18:	99 27       	eor	r25, r25
     b1a:	89 2b       	or	r24, r25
     b1c:	39 f4       	brne	.+14     	; 0xb2c <__vector_73+0x8a>
		index += 2;
     b1e:	8c 81       	ldd	r24, Y+4	; 0x04
     b20:	8e 5f       	subi	r24, 0xFE	; 254
     b22:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	86 95       	lsr	r24
     b28:	86 95       	lsr	r24
     b2a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     b2c:	8b 81       	ldd	r24, Y+3	; 0x03
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	81 70       	andi	r24, 0x01	; 1
     b34:	99 27       	eor	r25, r25
     b36:	89 2b       	or	r24, r25
     b38:	19 f4       	brne	.+6      	; 0xb40 <__vector_73+0x9e>
		index++;
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	ac 01       	movw	r20, r24
     b46:	40 5e       	subi	r20, 0xE0	; 224
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	8c 81       	ldd	r24, Y+4	; 0x04
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	84 0f       	add	r24, r20
     b5e:	95 1f       	adc	r25, r21
     b60:	fc 01       	movw	r30, r24
     b62:	84 81       	ldd	r24, Z+4	; 0x04
     b64:	95 81       	ldd	r25, Z+5	; 0x05
     b66:	ac 01       	movw	r20, r24
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	f9 01       	movw	r30, r18
     b70:	19 95       	eicall
}
     b72:	00 00       	nop
     b74:	24 96       	adiw	r28, 0x04	; 4
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b9c:	0f 90       	pop	r0
     b9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ba2:	0f 90       	pop	r0
     ba4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ba8:	0f 90       	pop	r0
     baa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bae:	0f 90       	pop	r0
     bb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bca:	0f 92       	push	r0
     bcc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bd0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bd4:	0f 92       	push	r0
     bd6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bde:	0f 92       	push	r0
     be0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     be4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     be8:	0f 92       	push	r0
     bea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bee:	2f 93       	push	r18
     bf0:	3f 93       	push	r19
     bf2:	4f 93       	push	r20
     bf4:	5f 93       	push	r21
     bf6:	6f 93       	push	r22
     bf8:	7f 93       	push	r23
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
     c02:	ef 93       	push	r30
     c04:	ff 93       	push	r31
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <__vector_74+0x52>
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     c12:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <adca_callback>
     c16:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <adca_callback+0x1>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c26:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	83 70       	andi	r24, 0x03	; 3
     c30:	99 27       	eor	r25, r25
     c32:	89 2b       	or	r24, r25
     c34:	39 f4       	brne	.+14     	; 0xc44 <__vector_74+0x8a>
		index += 2;
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	8e 5f       	subi	r24, 0xFE	; 254
     c3a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	81 70       	andi	r24, 0x01	; 1
     c4c:	99 27       	eor	r25, r25
     c4e:	89 2b       	or	r24, r25
     c50:	19 f4       	brne	.+6      	; 0xc58 <__vector_74+0x9e>
		index++;
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	ac 01       	movw	r20, r24
     c5e:	40 5e       	subi	r20, 0xE0	; 224
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	84 0f       	add	r24, r20
     c76:	95 1f       	adc	r25, r21
     c78:	fc 01       	movw	r30, r24
     c7a:	84 81       	ldd	r24, Z+4	; 0x04
     c7c:	95 81       	ldd	r25, Z+5	; 0x05
     c7e:	ac 01       	movw	r20, r24
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	f9 01       	movw	r30, r18
     c88:	19 95       	eicall
}
     c8a:	00 00       	nop
     c8c:	24 96       	adiw	r28, 0x04	; 4
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cb4:	0f 90       	pop	r0
     cb6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cba:	0f 90       	pop	r0
     cbc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cc0:	0f 90       	pop	r0
     cc2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     cc6:	0f 90       	pop	r0
     cc8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ce2:	0f 92       	push	r0
     ce4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ce8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cec:	0f 92       	push	r0
     cee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cf2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cf6:	0f 92       	push	r0
     cf8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cfc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d00:	0f 92       	push	r0
     d02:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	00 d0       	rcall	.+0      	; 0xd24 <__vector_39+0x52>
     d24:	1f 92       	push	r1
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     d2a:	20 91 cf 20 	lds	r18, 0x20CF	; 0x8020cf <adcb_callback>
     d2e:	30 91 d0 20 	lds	r19, 0x20D0	; 0x8020d0 <adcb_callback+0x1>
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d3e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	83 70       	andi	r24, 0x03	; 3
     d48:	99 27       	eor	r25, r25
     d4a:	89 2b       	or	r24, r25
     d4c:	39 f4       	brne	.+14     	; 0xd5c <__vector_39+0x8a>
		index += 2;
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	8e 5f       	subi	r24, 0xFE	; 254
     d52:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	81 70       	andi	r24, 0x01	; 1
     d64:	99 27       	eor	r25, r25
     d66:	89 2b       	or	r24, r25
     d68:	19 f4       	brne	.+6      	; 0xd70 <__vector_39+0x9e>
		index++;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	ac 01       	movw	r20, r24
     d76:	40 5e       	subi	r20, 0xE0	; 224
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	84 0f       	add	r24, r20
     d8e:	95 1f       	adc	r25, r21
     d90:	fc 01       	movw	r30, r24
     d92:	84 81       	ldd	r24, Z+4	; 0x04
     d94:	95 81       	ldd	r25, Z+5	; 0x05
     d96:	ac 01       	movw	r20, r24
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	80 e4       	ldi	r24, 0x40	; 64
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	f9 01       	movw	r30, r18
     da0:	19 95       	eicall
}
     da2:	00 00       	nop
     da4:	24 96       	adiw	r28, 0x04	; 4
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dcc:	0f 90       	pop	r0
     dce:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dd2:	0f 90       	pop	r0
     dd4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dd8:	0f 90       	pop	r0
     dda:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dde:	0f 90       	pop	r0
     de0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dfa:	0f 92       	push	r0
     dfc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e00:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e04:	0f 92       	push	r0
     e06:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e0a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e0e:	0f 92       	push	r0
     e10:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e14:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e18:	0f 92       	push	r0
     e1a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <__vector_40+0x52>
     e3c:	1f 92       	push	r1
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     e42:	20 91 cf 20 	lds	r18, 0x20CF	; 0x8020cf <adcb_callback>
     e46:	30 91 d0 20 	lds	r19, 0x20D0	; 0x8020d0 <adcb_callback+0x1>
     e4a:	80 e4       	ldi	r24, 0x40	; 64
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     e56:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	83 70       	andi	r24, 0x03	; 3
     e60:	99 27       	eor	r25, r25
     e62:	89 2b       	or	r24, r25
     e64:	39 f4       	brne	.+14     	; 0xe74 <__vector_40+0x8a>
		index += 2;
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	8e 5f       	subi	r24, 0xFE	; 254
     e6a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	86 95       	lsr	r24
     e70:	86 95       	lsr	r24
     e72:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	81 70       	andi	r24, 0x01	; 1
     e7c:	99 27       	eor	r25, r25
     e7e:	89 2b       	or	r24, r25
     e80:	19 f4       	brne	.+6      	; 0xe88 <__vector_40+0x9e>
		index++;
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	ac 01       	movw	r20, r24
     e8e:	40 5e       	subi	r20, 0xE0	; 224
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	84 0f       	add	r24, r20
     ea6:	95 1f       	adc	r25, r21
     ea8:	fc 01       	movw	r30, r24
     eaa:	84 81       	ldd	r24, Z+4	; 0x04
     eac:	95 81       	ldd	r25, Z+5	; 0x05
     eae:	ac 01       	movw	r20, r24
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	80 e4       	ldi	r24, 0x40	; 64
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	f9 01       	movw	r30, r18
     eb8:	19 95       	eicall
}
     eba:	00 00       	nop
     ebc:	24 96       	adiw	r28, 0x04	; 4
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	0f 90       	pop	r0
     ee0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ee4:	0f 90       	pop	r0
     ee6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     eea:	0f 90       	pop	r0
     eec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ef0:	0f 90       	pop	r0
     ef2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ef6:	0f 90       	pop	r0
     ef8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f12:	0f 92       	push	r0
     f14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f1c:	0f 92       	push	r0
     f1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f26:	0f 92       	push	r0
     f28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f30:	0f 92       	push	r0
     f32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <__vector_41+0x52>
     f54:	1f 92       	push	r1
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     f5a:	20 91 cf 20 	lds	r18, 0x20CF	; 0x8020cf <adcb_callback>
     f5e:	30 91 d0 20 	lds	r19, 0x20D0	; 0x8020d0 <adcb_callback+0x1>
     f62:	80 e4       	ldi	r24, 0x40	; 64
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f6e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	83 70       	andi	r24, 0x03	; 3
     f78:	99 27       	eor	r25, r25
     f7a:	89 2b       	or	r24, r25
     f7c:	39 f4       	brne	.+14     	; 0xf8c <__vector_41+0x8a>
		index += 2;
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	8e 5f       	subi	r24, 0xFE	; 254
     f82:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	86 95       	lsr	r24
     f88:	86 95       	lsr	r24
     f8a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	99 27       	eor	r25, r25
     f96:	89 2b       	or	r24, r25
     f98:	19 f4       	brne	.+6      	; 0xfa0 <__vector_41+0x9e>
		index++;
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	ac 01       	movw	r20, r24
     fa6:	40 5e       	subi	r20, 0xE0	; 224
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	84 0f       	add	r24, r20
     fbe:	95 1f       	adc	r25, r21
     fc0:	fc 01       	movw	r30, r24
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	95 81       	ldd	r25, Z+5	; 0x05
     fc6:	ac 01       	movw	r20, r24
     fc8:	64 e0       	ldi	r22, 0x04	; 4
     fca:	80 e4       	ldi	r24, 0x40	; 64
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	f9 01       	movw	r30, r18
     fd0:	19 95       	eicall
}
     fd2:	00 00       	nop
     fd4:	24 96       	adiw	r28, 0x04	; 4
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ffc:	0f 90       	pop	r0
     ffe:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1002:	0f 90       	pop	r0
    1004:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1008:	0f 90       	pop	r0
    100a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    100e:	0f 90       	pop	r0
    1010:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    102a:	0f 92       	push	r0
    102c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1030:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1034:	0f 92       	push	r0
    1036:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    103a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    103e:	0f 92       	push	r0
    1040:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1044:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1048:	0f 92       	push	r0
    104a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	00 d0       	rcall	.+0      	; 0x106c <__vector_42+0x52>
    106c:	1f 92       	push	r1
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1072:	20 91 cf 20 	lds	r18, 0x20CF	; 0x8020cf <adcb_callback>
    1076:	30 91 d0 20 	lds	r19, 0x20D0	; 0x8020d0 <adcb_callback+0x1>
    107a:	80 e4       	ldi	r24, 0x40	; 64
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	88 e0       	ldi	r24, 0x08	; 8
    1084:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1086:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	83 70       	andi	r24, 0x03	; 3
    1090:	99 27       	eor	r25, r25
    1092:	89 2b       	or	r24, r25
    1094:	39 f4       	brne	.+14     	; 0x10a4 <__vector_42+0x8a>
		index += 2;
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	8e 5f       	subi	r24, 0xFE	; 254
    109a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	86 95       	lsr	r24
    10a0:	86 95       	lsr	r24
    10a2:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	99 27       	eor	r25, r25
    10ae:	89 2b       	or	r24, r25
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <__vector_42+0x9e>
		index++;
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	ac 01       	movw	r20, r24
    10be:	40 5e       	subi	r20, 0xE0	; 224
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	84 0f       	add	r24, r20
    10d6:	95 1f       	adc	r25, r21
    10d8:	fc 01       	movw	r30, r24
    10da:	84 81       	ldd	r24, Z+4	; 0x04
    10dc:	95 81       	ldd	r25, Z+5	; 0x05
    10de:	ac 01       	movw	r20, r24
    10e0:	68 e0       	ldi	r22, 0x08	; 8
    10e2:	80 e4       	ldi	r24, 0x40	; 64
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	f9 01       	movw	r30, r18
    10e8:	19 95       	eicall
}
    10ea:	00 00       	nop
    10ec:	24 96       	adiw	r28, 0x04	; 4
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	ff 91       	pop	r31
    10f8:	ef 91       	pop	r30
    10fa:	bf 91       	pop	r27
    10fc:	af 91       	pop	r26
    10fe:	9f 91       	pop	r25
    1100:	8f 91       	pop	r24
    1102:	7f 91       	pop	r23
    1104:	6f 91       	pop	r22
    1106:	5f 91       	pop	r21
    1108:	4f 91       	pop	r20
    110a:	3f 91       	pop	r19
    110c:	2f 91       	pop	r18
    110e:	0f 90       	pop	r0
    1110:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1114:	0f 90       	pop	r0
    1116:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    111a:	0f 90       	pop	r0
    111c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1120:	0f 90       	pop	r0
    1122:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1126:	0f 90       	pop	r0
    1128:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	98 e4       	ldi	r25, 0x48	; 72
    113e:	a8 ee       	ldi	r26, 0xE8	; 232
    1140:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	1f 92       	push	r1
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    1156:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1158:	ec df       	rcall	.-40     	; 0x1132 <sysclk_get_main_hz>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	29 81       	ldd	r18, Y+1	; 0x01
    1160:	22 2f       	mov	r18, r18
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	04 c0       	rjmp	.+8      	; 0x116e <sysclk_get_per4_hz+0x22>
    1166:	b6 95       	lsr	r27
    1168:	a7 95       	ror	r26
    116a:	97 95       	ror	r25
    116c:	87 95       	ror	r24
    116e:	2a 95       	dec	r18
    1170:	d2 f7       	brpl	.-12     	; 0x1166 <sysclk_get_per4_hz+0x1a>
}
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0f 90       	pop	r0
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    1186:	e2 df       	rcall	.-60     	; 0x114c <sysclk_get_per4_hz>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    119e:	ef df       	rcall	.-34     	; 0x117e <sysclk_get_per2_hz>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
}
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    11b6:	ef df       	rcall	.-34     	; 0x1196 <sysclk_get_per_hz>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
}
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    11c8:	61 50       	subi	r22, 0x01	; 1
    11ca:	71 09       	sbc	r23, r1
    11cc:	81 09       	sbc	r24, r1
    11ce:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    11d0:	61 15       	cp	r22, r1
    11d2:	71 05       	cpc	r23, r1
    11d4:	81 05       	cpc	r24, r1
    11d6:	91 05       	cpc	r25, r1
    11d8:	b9 f7       	brne	.-18     	; 0x11c8 <__portable_avr_delay_cycles+0x2>
    11da:	08 95       	ret

000011dc <spi_enable>:
/*! \brief Enables the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	1f 92       	push	r1
    11e2:	1f 92       	push	r1
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_ENABLE_bm;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	fc 01       	movw	r30, r24
    11f2:	80 81       	ld	r24, Z
    11f4:	28 2f       	mov	r18, r24
    11f6:	20 64       	ori	r18, 0x40	; 64
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
}
    1200:	00 00       	nop
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <spi_init_pins>:

uint8_t commands [2] = {0x48, 0x58};
uint8_t read_buffer [2*3];
	
void spi_init_pins(void)
{
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
	ioport_configure_port_pin(&PORTC, PIN1_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    1214:	43 e0       	ldi	r20, 0x03	; 3
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	62 e0       	ldi	r22, 0x02	; 2
    121a:	80 e4       	ldi	r24, 0x40	; 64
    121c:	96 e0       	ldi	r25, 0x06	; 6
    121e:	0e 94 cb 28 	call	0x5196	; 0x5196 <ioport_configure_port_pin>
	
	ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_PULL_UP|IOPORT_DIR_INPUT);
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	58 e1       	ldi	r21, 0x18	; 24
    1226:	60 e1       	ldi	r22, 0x10	; 16
    1228:	80 e4       	ldi	r24, 0x40	; 64
    122a:	96 e0       	ldi	r25, 0x06	; 6
    122c:	0e 94 cb 28 	call	0x5196	; 0x5196 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    1230:	43 e0       	ldi	r20, 0x03	; 3
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	60 e2       	ldi	r22, 0x20	; 32
    1236:	80 e4       	ldi	r24, 0x40	; 64
    1238:	96 e0       	ldi	r25, 0x06	; 6
    123a:	0e 94 cb 28 	call	0x5196	; 0x5196 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	60 e4       	ldi	r22, 0x40	; 64
    1244:	80 e4       	ldi	r24, 0x40	; 64
    1246:	96 e0       	ldi	r25, 0x06	; 6
    1248:	0e 94 cb 28 	call	0x5196	; 0x5196 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    124c:	43 e0       	ldi	r20, 0x03	; 3
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	60 e8       	ldi	r22, 0x80	; 128
    1252:	80 e4       	ldi	r24, 0x40	; 64
    1254:	96 e0       	ldi	r25, 0x06	; 6
    1256:	0e 94 cb 28 	call	0x5196	; 0x5196 <ioport_configure_port_pin>
	
}
    125a:	00 00       	nop
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <spi_init_module>:

void spi_init_module(void)
{
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	1f 92       	push	r1
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	spi_init_pins();
    1278:	c9 df       	rcall	.-110    	; 0x120c <spi_init_pins>
	struct spi_device  spi_device_cong = {
    127a:	81 e1       	ldi	r24, 0x11	; 17
    127c:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
		
	spi_master_init(&MS5607_SPI_PORT);
    127e:	80 ec       	ldi	r24, 0xC0	; 192
    1280:	98 e0       	ldi	r25, 0x08	; 8
    1282:	d3 d9       	rcall	.-3162   	; 0x62a <spi_master_init>
	spi_master_setup_device(&MS5607_SPI_PORT, &spi_device_cong, SPI_MODE_0, 1000000,0);
    1284:	c1 2c       	mov	r12, r1
    1286:	d1 2c       	mov	r13, r1
    1288:	76 01       	movw	r14, r12
    128a:	00 e4       	ldi	r16, 0x40	; 64
    128c:	12 e4       	ldi	r17, 0x42	; 66
    128e:	2f e0       	ldi	r18, 0x0F	; 15
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	bc 01       	movw	r22, r24
    129a:	80 ec       	ldi	r24, 0xC0	; 192
    129c:	98 e0       	ldi	r25, 0x08	; 8
    129e:	fa d9       	rcall	.-3084   	; 0x694 <spi_master_setup_device>
	spi_enable(&MS5607_SPI_PORT);
    12a0:	80 ec       	ldi	r24, 0xC0	; 192
    12a2:	98 e0       	ldi	r25, 0x08	; 8
    12a4:	9b df       	rcall	.-202    	; 0x11dc <spi_enable>
    12a6:	41 e0       	ldi	r20, 0x01	; 1
	spi_write_packet(&MS5607_SPI_PORT, "0x1e", 1); //reset
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	65 e1       	ldi	r22, 0x15	; 21
    12ac:	70 e2       	ldi	r23, 0x20	; 32
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	98 e0       	ldi	r25, 0x08	; 8
    12b2:	3e da       	rcall	.-2948   	; 0x730 <spi_write_packet>
	prom_read();
    12b4:	16 d0       	rcall	.+44     	; 0x12e2 <prom_read>
    12b6:	8a e1       	ldi	r24, 0x1A	; 26
	
	printf("spi init");
    12b8:	90 e2       	ldi	r25, 0x20	; 32
    12ba:	89 2f       	mov	r24, r25
    12bc:	8f 93       	push	r24
    12be:	8a e1       	ldi	r24, 0x1A	; 26
    12c0:	90 e2       	ldi	r25, 0x20	; 32
    12c2:	8f 93       	push	r24
    12c4:	0e 94 55 36 	call	0x6caa	; 0x6caa <printf>
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	00 00       	nop
}
    12ce:	0f 90       	pop	r0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <prom_read>:
    12e2:	2f 92       	push	r2

void prom_read(void)
{
    12e4:	3f 92       	push	r3
    12e6:	4f 92       	push	r4
    12e8:	5f 92       	push	r5
    12ea:	6f 92       	push	r6
    12ec:	7f 92       	push	r7
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	a4 97       	sbiw	r28, 0x24	; 36
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	de bf       	out	0x3e, r29	; 62
	struct spi_device  spi_device_cong = {
    1310:	81 e1       	ldi	r24, 0x11	; 17
    1312:	8a 83       	std	Y+2, r24	; 0x02
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    1314:	ce 01       	movw	r24, r28
    1316:	02 96       	adiw	r24, 0x02	; 2
    1318:	bc 01       	movw	r22, r24
    131a:	80 ec       	ldi	r24, 0xC0	; 192
    131c:	98 e0       	ldi	r25, 0x08	; 8
    131e:	7d da       	rcall	.-2822   	; 0x81a <spi_select_device>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
    1320:	86 e0       	ldi	r24, 0x06	; 6
    1322:	ef e0       	ldi	r30, 0x0F	; 15
    1324:	f0 e2       	ldi	r31, 0x20	; 32
    1326:	de 01       	movw	r26, r28
    1328:	13 96       	adiw	r26, 0x03	; 3
    132a:	01 90       	ld	r0, Z+
    132c:	0d 92       	st	X+, r0
    132e:	8a 95       	dec	r24
    1330:	e1 f7       	brne	.-8      	; 0x132a <prom_read+0x48>
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    1332:	19 82       	std	Y+1, r1	; 0x01
    1334:	e3 c1       	rjmp	.+966    	; 0x16fc <prom_read+0x41a>
	{
		
		spi_write_packet(&MS5607_SPI_PORT, prom_commands_c[i], 1);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9e 01       	movw	r18, r28
    133e:	2d 5f       	subi	r18, 0xFD	; 253
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	82 0f       	add	r24, r18
    1344:	93 1f       	adc	r25, r19
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	bc 01       	movw	r22, r24
    1354:	80 ec       	ldi	r24, 0xC0	; 192
    1356:	98 e0       	ldi	r25, 0x08	; 8
		delay_ms(25);
    1358:	eb d9       	rcall	.-3114   	; 0x730 <spi_write_packet>
    135a:	29 df       	rcall	.-430    	; 0x11ae <sysclk_get_cpu_hz>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	8c 01       	movw	r16, r24
    1362:	9d 01       	movw	r18, r26
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	ba 01       	movw	r22, r20
    136a:	0d 8b       	std	Y+21, r16	; 0x15
    136c:	1e 8b       	std	Y+22, r17	; 0x16
    136e:	2f 8b       	std	Y+23, r18	; 0x17
    1370:	38 8f       	std	Y+24, r19	; 0x18
    1372:	49 8f       	std	Y+25, r20	; 0x19
    1374:	5a 8f       	std	Y+26, r21	; 0x1a
    1376:	6b 8f       	std	Y+27, r22	; 0x1b
    1378:	7c 8f       	std	Y+28, r23	; 0x1c
    137a:	2d 88       	ldd	r2, Y+21	; 0x15
    137c:	3e 88       	ldd	r3, Y+22	; 0x16
    137e:	4f 88       	ldd	r4, Y+23	; 0x17
    1380:	58 8c       	ldd	r5, Y+24	; 0x18
    1382:	69 8c       	ldd	r6, Y+25	; 0x19
    1384:	7a 8c       	ldd	r7, Y+26	; 0x1a
    1386:	8b 8c       	ldd	r8, Y+27	; 0x1b
    1388:	9c 8c       	ldd	r9, Y+28	; 0x1c
    138a:	22 2d       	mov	r18, r2
    138c:	33 2d       	mov	r19, r3
    138e:	44 2d       	mov	r20, r4
    1390:	55 2d       	mov	r21, r5
    1392:	66 2d       	mov	r22, r6
    1394:	77 2d       	mov	r23, r7
    1396:	88 2d       	mov	r24, r8
    1398:	99 2d       	mov	r25, r9
    139a:	03 e0       	ldi	r16, 0x03	; 3
    139c:	0e 94 41 33 	call	0x6682	; 0x6682 <__ashldi3>
    13a0:	a2 2e       	mov	r10, r18
    13a2:	b3 2e       	mov	r11, r19
    13a4:	c4 2e       	mov	r12, r20
    13a6:	d5 2e       	mov	r13, r21
    13a8:	e6 2e       	mov	r14, r22
    13aa:	f7 2e       	mov	r15, r23
    13ac:	08 2f       	mov	r16, r24
    13ae:	19 2f       	mov	r17, r25
    13b0:	2a 2c       	mov	r2, r10
    13b2:	3b 2c       	mov	r3, r11
    13b4:	4c 2c       	mov	r4, r12
    13b6:	5d 2c       	mov	r5, r13
    13b8:	6e 2c       	mov	r6, r14
    13ba:	7f 2c       	mov	r7, r15
    13bc:	80 2e       	mov	r8, r16
    13be:	91 2e       	mov	r9, r17
    13c0:	22 2d       	mov	r18, r2
    13c2:	33 2d       	mov	r19, r3
    13c4:	44 2d       	mov	r20, r4
    13c6:	55 2d       	mov	r21, r5
    13c8:	66 2d       	mov	r22, r6
    13ca:	77 2d       	mov	r23, r7
    13cc:	88 2d       	mov	r24, r8
    13ce:	99 2d       	mov	r25, r9
    13d0:	02 e0       	ldi	r16, 0x02	; 2
    13d2:	0e 94 41 33 	call	0x6682	; 0x6682 <__ashldi3>
    13d6:	a2 2e       	mov	r10, r18
    13d8:	b3 2e       	mov	r11, r19
    13da:	c4 2e       	mov	r12, r20
    13dc:	d5 2e       	mov	r13, r21
    13de:	e6 2e       	mov	r14, r22
    13e0:	f7 2e       	mov	r15, r23
    13e2:	08 2f       	mov	r16, r24
    13e4:	19 2f       	mov	r17, r25
    13e6:	2a 2d       	mov	r18, r10
    13e8:	3b 2d       	mov	r19, r11
    13ea:	4c 2d       	mov	r20, r12
    13ec:	5d 2d       	mov	r21, r13
    13ee:	6e 2d       	mov	r22, r14
    13f0:	7f 2d       	mov	r23, r15
    13f2:	80 2f       	mov	r24, r16
    13f4:	91 2f       	mov	r25, r17
    13f6:	a2 2c       	mov	r10, r2
    13f8:	b3 2c       	mov	r11, r3
    13fa:	c4 2c       	mov	r12, r4
    13fc:	d5 2c       	mov	r13, r5
    13fe:	e6 2c       	mov	r14, r6
    1400:	f7 2c       	mov	r15, r7
    1402:	08 2d       	mov	r16, r8
    1404:	19 2d       	mov	r17, r9
    1406:	0e 94 8d 33 	call	0x671a	; 0x671a <__subdi3>
    140a:	a2 2e       	mov	r10, r18
    140c:	b3 2e       	mov	r11, r19
    140e:	c4 2e       	mov	r12, r20
    1410:	d5 2e       	mov	r13, r21
    1412:	e6 2e       	mov	r14, r22
    1414:	f7 2e       	mov	r15, r23
    1416:	08 2f       	mov	r16, r24
    1418:	19 2f       	mov	r17, r25
    141a:	2a 2d       	mov	r18, r10
    141c:	3b 2d       	mov	r19, r11
    141e:	4c 2d       	mov	r20, r12
    1420:	5d 2d       	mov	r21, r13
    1422:	6e 2d       	mov	r22, r14
    1424:	7f 2d       	mov	r23, r15
    1426:	80 2f       	mov	r24, r16
    1428:	91 2f       	mov	r25, r17
    142a:	ad 88       	ldd	r10, Y+21	; 0x15
    142c:	be 88       	ldd	r11, Y+22	; 0x16
    142e:	cf 88       	ldd	r12, Y+23	; 0x17
    1430:	d8 8c       	ldd	r13, Y+24	; 0x18
    1432:	e9 8c       	ldd	r14, Y+25	; 0x19
    1434:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1436:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1438:	1c 8d       	ldd	r17, Y+28	; 0x1c
    143a:	0e 94 78 33 	call	0x66f0	; 0x66f0 <__adddi3>
    143e:	22 2e       	mov	r2, r18
    1440:	33 2e       	mov	r3, r19
    1442:	44 2e       	mov	r4, r20
    1444:	55 2e       	mov	r5, r21
    1446:	66 2e       	mov	r6, r22
    1448:	77 2e       	mov	r7, r23
    144a:	88 2e       	mov	r8, r24
    144c:	99 2e       	mov	r9, r25
    144e:	0f 2e       	mov	r0, r31
    1450:	f6 e0       	ldi	r31, 0x06	; 6
    1452:	af 2e       	mov	r10, r31
    1454:	f0 2d       	mov	r31, r0
    1456:	b1 2c       	mov	r11, r1
    1458:	c1 2c       	mov	r12, r1
    145a:	d1 2c       	mov	r13, r1
    145c:	e1 2c       	mov	r14, r1
    145e:	f1 2c       	mov	r15, r1
    1460:	00 e0       	ldi	r16, 0x00	; 0
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	22 2d       	mov	r18, r2
    1466:	33 2d       	mov	r19, r3
    1468:	44 2d       	mov	r20, r4
    146a:	55 2d       	mov	r21, r5
    146c:	66 2d       	mov	r22, r6
    146e:	77 2d       	mov	r23, r7
    1470:	88 2d       	mov	r24, r8
    1472:	99 2d       	mov	r25, r9
    1474:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__udivdi3>
    1478:	22 2e       	mov	r2, r18
    147a:	33 2e       	mov	r3, r19
    147c:	44 2e       	mov	r4, r20
    147e:	55 2e       	mov	r5, r21
    1480:	66 2e       	mov	r6, r22
    1482:	77 2e       	mov	r7, r23
    1484:	88 2e       	mov	r8, r24
    1486:	99 2e       	mov	r9, r25
    1488:	a2 2c       	mov	r10, r2
    148a:	b3 2c       	mov	r11, r3
    148c:	c4 2c       	mov	r12, r4
    148e:	d5 2c       	mov	r13, r5
    1490:	e6 2c       	mov	r14, r6
    1492:	f7 2c       	mov	r15, r7
    1494:	08 2d       	mov	r16, r8
    1496:	19 2d       	mov	r17, r9
    1498:	2a 2d       	mov	r18, r10
    149a:	3b 2d       	mov	r19, r11
    149c:	4c 2d       	mov	r20, r12
    149e:	5d 2d       	mov	r21, r13
    14a0:	6e 2d       	mov	r22, r14
    14a2:	7f 2d       	mov	r23, r15
    14a4:	80 2f       	mov	r24, r16
    14a6:	91 2f       	mov	r25, r17
    14a8:	29 51       	subi	r18, 0x19	; 25
    14aa:	3c 4f       	sbci	r19, 0xFC	; 252
    14ac:	4f 4f       	sbci	r20, 0xFF	; 255
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    14b0:	6f 4f       	sbci	r22, 0xFF	; 255
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	8f 4f       	sbci	r24, 0xFF	; 255
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	a2 2e       	mov	r10, r18
    14ba:	b3 2e       	mov	r11, r19
    14bc:	c4 2e       	mov	r12, r20
    14be:	d5 2e       	mov	r13, r21
    14c0:	e6 2e       	mov	r14, r22
    14c2:	f7 2e       	mov	r15, r23
    14c4:	08 2f       	mov	r16, r24
    14c6:	19 2f       	mov	r17, r25
    14c8:	2a 2d       	mov	r18, r10
    14ca:	3b 2d       	mov	r19, r11
    14cc:	4c 2d       	mov	r20, r12
    14ce:	5d 2d       	mov	r21, r13
    14d0:	6e 2d       	mov	r22, r14
    14d2:	7f 2d       	mov	r23, r15
    14d4:	80 2f       	mov	r24, r16
    14d6:	91 2f       	mov	r25, r17
    14d8:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__floatundisf>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	4a e7       	ldi	r20, 0x7A	; 122
    14e6:	54 e4       	ldi	r21, 0x44	; 68
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <__divsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__fixunssfdi>
    14fc:	a2 2e       	mov	r10, r18
    14fe:	b3 2e       	mov	r11, r19
    1500:	c4 2e       	mov	r12, r20
    1502:	d5 2e       	mov	r13, r21
    1504:	e6 2e       	mov	r14, r22
    1506:	f7 2e       	mov	r15, r23
    1508:	08 2f       	mov	r16, r24
    150a:	19 2f       	mov	r17, r25
    150c:	d6 01       	movw	r26, r12
    150e:	c5 01       	movw	r24, r10
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	58 de       	rcall	.-848    	; 0x11c6 <__portable_avr_delay_cycles>
		spi_read_packet(&MS5607_SPI_PORT, prom_c_read_buffer[i], 2);
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9e 01       	movw	r18, r28
    151e:	27 5f       	subi	r18, 0xF7	; 247
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	82 0f       	add	r24, r18
    1524:	93 1f       	adc	r25, r19
    1526:	fc 01       	movw	r30, r24
    1528:	80 81       	ld	r24, Z
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	42 e0       	ldi	r20, 0x02	; 2
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	bc 01       	movw	r22, r24
    1534:	80 ec       	ldi	r24, 0xC0	; 192
    1536:	98 e0       	ldi	r25, 0x08	; 8
		delay_ms(25);
    1538:	34 d9       	rcall	.-3480   	; 0x7a2 <spi_read_packet>
    153a:	39 de       	rcall	.-910    	; 0x11ae <sysclk_get_cpu_hz>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	8c 01       	movw	r16, r24
    1542:	9d 01       	movw	r18, r26
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	ba 01       	movw	r22, r20
    154a:	0d 8f       	std	Y+29, r16	; 0x1d
    154c:	1e 8f       	std	Y+30, r17	; 0x1e
    154e:	2f 8f       	std	Y+31, r18	; 0x1f
    1550:	38 a3       	std	Y+32, r19	; 0x20
    1552:	49 a3       	std	Y+33, r20	; 0x21
    1554:	5a a3       	std	Y+34, r21	; 0x22
    1556:	6b a3       	std	Y+35, r22	; 0x23
    1558:	7c a3       	std	Y+36, r23	; 0x24
    155a:	2d 8c       	ldd	r2, Y+29	; 0x1d
    155c:	3e 8c       	ldd	r3, Y+30	; 0x1e
    155e:	4f 8c       	ldd	r4, Y+31	; 0x1f
    1560:	58 a0       	ldd	r5, Y+32	; 0x20
    1562:	69 a0       	ldd	r6, Y+33	; 0x21
    1564:	7a a0       	ldd	r7, Y+34	; 0x22
    1566:	8b a0       	ldd	r8, Y+35	; 0x23
    1568:	9c a0       	ldd	r9, Y+36	; 0x24
    156a:	22 2d       	mov	r18, r2
    156c:	33 2d       	mov	r19, r3
    156e:	44 2d       	mov	r20, r4
    1570:	55 2d       	mov	r21, r5
    1572:	66 2d       	mov	r22, r6
    1574:	77 2d       	mov	r23, r7
    1576:	88 2d       	mov	r24, r8
    1578:	99 2d       	mov	r25, r9
    157a:	03 e0       	ldi	r16, 0x03	; 3
    157c:	0e 94 41 33 	call	0x6682	; 0x6682 <__ashldi3>
    1580:	a2 2e       	mov	r10, r18
    1582:	b3 2e       	mov	r11, r19
    1584:	c4 2e       	mov	r12, r20
    1586:	d5 2e       	mov	r13, r21
    1588:	e6 2e       	mov	r14, r22
    158a:	f7 2e       	mov	r15, r23
    158c:	08 2f       	mov	r16, r24
    158e:	19 2f       	mov	r17, r25
    1590:	2a 2c       	mov	r2, r10
    1592:	3b 2c       	mov	r3, r11
    1594:	4c 2c       	mov	r4, r12
    1596:	5d 2c       	mov	r5, r13
    1598:	6e 2c       	mov	r6, r14
    159a:	7f 2c       	mov	r7, r15
    159c:	80 2e       	mov	r8, r16
    159e:	91 2e       	mov	r9, r17
    15a0:	22 2d       	mov	r18, r2
    15a2:	33 2d       	mov	r19, r3
    15a4:	44 2d       	mov	r20, r4
    15a6:	55 2d       	mov	r21, r5
    15a8:	66 2d       	mov	r22, r6
    15aa:	77 2d       	mov	r23, r7
    15ac:	88 2d       	mov	r24, r8
    15ae:	99 2d       	mov	r25, r9
    15b0:	02 e0       	ldi	r16, 0x02	; 2
    15b2:	0e 94 41 33 	call	0x6682	; 0x6682 <__ashldi3>
    15b6:	a2 2e       	mov	r10, r18
    15b8:	b3 2e       	mov	r11, r19
    15ba:	c4 2e       	mov	r12, r20
    15bc:	d5 2e       	mov	r13, r21
    15be:	e6 2e       	mov	r14, r22
    15c0:	f7 2e       	mov	r15, r23
    15c2:	08 2f       	mov	r16, r24
    15c4:	19 2f       	mov	r17, r25
    15c6:	2a 2d       	mov	r18, r10
    15c8:	3b 2d       	mov	r19, r11
    15ca:	4c 2d       	mov	r20, r12
    15cc:	5d 2d       	mov	r21, r13
    15ce:	6e 2d       	mov	r22, r14
    15d0:	7f 2d       	mov	r23, r15
    15d2:	80 2f       	mov	r24, r16
    15d4:	91 2f       	mov	r25, r17
    15d6:	a2 2c       	mov	r10, r2
    15d8:	b3 2c       	mov	r11, r3
    15da:	c4 2c       	mov	r12, r4
    15dc:	d5 2c       	mov	r13, r5
    15de:	e6 2c       	mov	r14, r6
    15e0:	f7 2c       	mov	r15, r7
    15e2:	08 2d       	mov	r16, r8
    15e4:	19 2d       	mov	r17, r9
    15e6:	0e 94 8d 33 	call	0x671a	; 0x671a <__subdi3>
    15ea:	a2 2e       	mov	r10, r18
    15ec:	b3 2e       	mov	r11, r19
    15ee:	c4 2e       	mov	r12, r20
    15f0:	d5 2e       	mov	r13, r21
    15f2:	e6 2e       	mov	r14, r22
    15f4:	f7 2e       	mov	r15, r23
    15f6:	08 2f       	mov	r16, r24
    15f8:	19 2f       	mov	r17, r25
    15fa:	2a 2d       	mov	r18, r10
    15fc:	3b 2d       	mov	r19, r11
    15fe:	4c 2d       	mov	r20, r12
    1600:	5d 2d       	mov	r21, r13
    1602:	6e 2d       	mov	r22, r14
    1604:	7f 2d       	mov	r23, r15
    1606:	80 2f       	mov	r24, r16
    1608:	91 2f       	mov	r25, r17
    160a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    160c:	be 8c       	ldd	r11, Y+30	; 0x1e
    160e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    1610:	d8 a0       	ldd	r13, Y+32	; 0x20
    1612:	e9 a0       	ldd	r14, Y+33	; 0x21
    1614:	fa a0       	ldd	r15, Y+34	; 0x22
    1616:	0b a1       	ldd	r16, Y+35	; 0x23
    1618:	1c a1       	ldd	r17, Y+36	; 0x24
    161a:	0e 94 78 33 	call	0x66f0	; 0x66f0 <__adddi3>
    161e:	22 2e       	mov	r2, r18
    1620:	33 2e       	mov	r3, r19
    1622:	44 2e       	mov	r4, r20
    1624:	55 2e       	mov	r5, r21
    1626:	66 2e       	mov	r6, r22
    1628:	77 2e       	mov	r7, r23
    162a:	88 2e       	mov	r8, r24
    162c:	99 2e       	mov	r9, r25
    162e:	0f 2e       	mov	r0, r31
    1630:	f6 e0       	ldi	r31, 0x06	; 6
    1632:	af 2e       	mov	r10, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	b1 2c       	mov	r11, r1
    1638:	c1 2c       	mov	r12, r1
    163a:	d1 2c       	mov	r13, r1
    163c:	e1 2c       	mov	r14, r1
    163e:	f1 2c       	mov	r15, r1
    1640:	00 e0       	ldi	r16, 0x00	; 0
    1642:	10 e0       	ldi	r17, 0x00	; 0
    1644:	22 2d       	mov	r18, r2
    1646:	33 2d       	mov	r19, r3
    1648:	44 2d       	mov	r20, r4
    164a:	55 2d       	mov	r21, r5
    164c:	66 2d       	mov	r22, r6
    164e:	77 2d       	mov	r23, r7
    1650:	88 2d       	mov	r24, r8
    1652:	99 2d       	mov	r25, r9
    1654:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__udivdi3>
    1658:	22 2e       	mov	r2, r18
    165a:	33 2e       	mov	r3, r19
    165c:	44 2e       	mov	r4, r20
    165e:	55 2e       	mov	r5, r21
    1660:	66 2e       	mov	r6, r22
    1662:	77 2e       	mov	r7, r23
    1664:	88 2e       	mov	r8, r24
    1666:	99 2e       	mov	r9, r25
    1668:	a2 2c       	mov	r10, r2
    166a:	b3 2c       	mov	r11, r3
    166c:	c4 2c       	mov	r12, r4
    166e:	d5 2c       	mov	r13, r5
    1670:	e6 2c       	mov	r14, r6
    1672:	f7 2c       	mov	r15, r7
    1674:	08 2d       	mov	r16, r8
    1676:	19 2d       	mov	r17, r9
    1678:	2a 2d       	mov	r18, r10
    167a:	3b 2d       	mov	r19, r11
    167c:	4c 2d       	mov	r20, r12
    167e:	5d 2d       	mov	r21, r13
    1680:	6e 2d       	mov	r22, r14
    1682:	7f 2d       	mov	r23, r15
    1684:	80 2f       	mov	r24, r16
    1686:	91 2f       	mov	r25, r17
    1688:	29 51       	subi	r18, 0x19	; 25
    168a:	3c 4f       	sbci	r19, 0xFC	; 252
    168c:	4f 4f       	sbci	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	6f 4f       	sbci	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	a2 2e       	mov	r10, r18
    169a:	b3 2e       	mov	r11, r19
    169c:	c4 2e       	mov	r12, r20
    169e:	d5 2e       	mov	r13, r21
    16a0:	e6 2e       	mov	r14, r22
    16a2:	f7 2e       	mov	r15, r23
    16a4:	08 2f       	mov	r16, r24
    16a6:	19 2f       	mov	r17, r25
    16a8:	2a 2d       	mov	r18, r10
    16aa:	3b 2d       	mov	r19, r11
    16ac:	4c 2d       	mov	r20, r12
    16ae:	5d 2d       	mov	r21, r13
    16b0:	6e 2d       	mov	r22, r14
    16b2:	7f 2d       	mov	r23, r15
    16b4:	80 2f       	mov	r24, r16
    16b6:	91 2f       	mov	r25, r17
    16b8:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__floatundisf>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a e7       	ldi	r20, 0x7A	; 122
    16c6:	54 e4       	ldi	r21, 0x44	; 68
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <__divsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__fixunssfdi>
    16dc:	a2 2e       	mov	r10, r18
    16de:	b3 2e       	mov	r11, r19
    16e0:	c4 2e       	mov	r12, r20
    16e2:	d5 2e       	mov	r13, r21
    16e4:	e6 2e       	mov	r14, r22
    16e6:	f7 2e       	mov	r15, r23
    16e8:	08 2f       	mov	r16, r24
    16ea:	19 2f       	mov	r17, r25
    16ec:	d6 01       	movw	r26, r12
    16ee:	c5 01       	movw	r24, r10
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	68 dd       	rcall	.-1328   	; 0x11c6 <__portable_avr_delay_cycles>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	87 30       	cpi	r24, 0x07	; 7
    1700:	08 f4       	brcc	.+2      	; 0x1704 <prom_read+0x422>
    1702:	19 ce       	rjmp	.-974    	; 0x1336 <prom_read+0x54>
		
	}

	
	
	C1 = prom_c_read_buffer[0]<<8 |prom_c_read_buffer[1];
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	38 2f       	mov	r19, r24
    170c:	22 27       	eor	r18, r18
    170e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	82 2b       	or	r24, r18
    1716:	93 2b       	or	r25, r19
    1718:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <C1>
    171c:	90 93 06 21 	sts	0x2106, r25	; 0x802106 <C1+0x1>
	C2 = prom_c_read_buffer[2]<<8 |prom_c_read_buffer[3];
    1720:	8b 85       	ldd	r24, Y+11	; 0x0b
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	38 2f       	mov	r19, r24
    1728:	22 27       	eor	r18, r18
    172a:	8c 85       	ldd	r24, Y+12	; 0x0c
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	82 2b       	or	r24, r18
    1732:	93 2b       	or	r25, r19
    1734:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <C2>
    1738:	90 93 0a 21 	sts	0x210A, r25	; 0x80210a <C2+0x1>
	C3 = prom_c_read_buffer[4]<<8 |prom_c_read_buffer[5];
    173c:	8d 85       	ldd	r24, Y+13	; 0x0d
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	38 2f       	mov	r19, r24
    1744:	22 27       	eor	r18, r18
    1746:	8e 85       	ldd	r24, Y+14	; 0x0e
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	82 2b       	or	r24, r18
    174e:	93 2b       	or	r25, r19
    1750:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <C3>
    1754:	90 93 08 21 	sts	0x2108, r25	; 0x802108 <C3+0x1>
	C4 = prom_c_read_buffer[6]<<8 |prom_c_read_buffer[7];
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	38 2f       	mov	r19, r24
    1760:	22 27       	eor	r18, r18
    1762:	88 89       	ldd	r24, Y+16	; 0x10
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	82 2b       	or	r24, r18
    176a:	93 2b       	or	r25, r19
    176c:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <C4>
    1770:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <C4+0x1>
	C5 = prom_c_read_buffer[8]<<8 |prom_c_read_buffer[9];
    1774:	89 89       	ldd	r24, Y+17	; 0x11
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	38 2f       	mov	r19, r24
    177c:	22 27       	eor	r18, r18
    177e:	8a 89       	ldd	r24, Y+18	; 0x12
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	82 2b       	or	r24, r18
    1786:	93 2b       	or	r25, r19
    1788:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <C5>
    178c:	90 93 18 21 	sts	0x2118, r25	; 0x802118 <C5+0x1>
	C6 = prom_c_read_buffer[10]<<8 |prom_c_read_buffer[11];
    1790:	8b 89       	ldd	r24, Y+19	; 0x13
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	38 2f       	mov	r19, r24
    1798:	22 27       	eor	r18, r18
    179a:	8c 89       	ldd	r24, Y+20	; 0x14
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	82 2b       	or	r24, r18
    17a2:	93 2b       	or	r25, r19
    17a4:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <C6>
    17a8:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <C6+0x1>
	
	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    17ac:	ce 01       	movw	r24, r28
    17ae:	02 96       	adiw	r24, 0x02	; 2
    17b0:	bc 01       	movw	r22, r24
    17b2:	80 ec       	ldi	r24, 0xC0	; 192
    17b4:	98 e0       	ldi	r25, 0x08	; 8
    17b6:	47 d8       	rcall	.-3954   	; 0x846 <spi_deselect_device>
	

	
}
    17b8:	00 00       	nop
    17ba:	a4 96       	adiw	r28, 0x24	; 36
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	7f 90       	pop	r7
    17da:	6f 90       	pop	r6
    17dc:	5f 90       	pop	r5
    17de:	4f 90       	pop	r4
    17e0:	3f 90       	pop	r3
    17e2:	2f 90       	pop	r2
    17e4:	08 95       	ret

000017e6 <getPressure>:

int32_t getPressure(void)
{
    17e6:	2f 92       	push	r2
    17e8:	3f 92       	push	r3
    17ea:	4f 92       	push	r4
    17ec:	5f 92       	push	r5
    17ee:	6f 92       	push	r6
    17f0:	7f 92       	push	r7
    17f2:	8f 92       	push	r8
    17f4:	9f 92       	push	r9
    17f6:	af 92       	push	r10
    17f8:	bf 92       	push	r11
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	c2 54       	subi	r28, 0x42	; 66
    1810:	d1 09       	sbc	r29, r1
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	de bf       	out	0x3e, r29	; 62

struct spi_device  spi_device_cong = {
    1816:	81 e1       	ldi	r24, 0x11	; 17
    1818:	8a a3       	std	Y+34, r24	; 0x22
	.id = IOPORT_CREATE_PIN(PORTC,1)
};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    181a:	ce 01       	movw	r24, r28
    181c:	82 96       	adiw	r24, 0x22	; 34
    181e:	bc 01       	movw	r22, r24
    1820:	80 ec       	ldi	r24, 0xC0	; 192
    1822:	98 e0       	ldi	r25, 0x08	; 8
    1824:	0e 94 0d 04 	call	0x81a	; 0x81a <spi_select_device>

	for(uint8_t i = 0; i < sizeof(commands); i++)
    1828:	19 82       	std	Y+1, r1	; 0x01
    182a:	23 c0       	rjmp	.+70     	; 0x1872 <getPressure+0x8c>
	{
		spi_write_packet(&MS5607_SPI_PORT, commands[i], 1);
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	8a 5f       	subi	r24, 0xFA	; 250
    1834:	9f 4d       	sbci	r25, 0xDF	; 223
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	bc 01       	movw	r22, r24
    1844:	80 ec       	ldi	r24, 0xC0	; 192
    1846:	98 e0       	ldi	r25, 0x08	; 8
    1848:	0e 94 98 03 	call	0x730	; 0x730 <spi_write_packet>
		spi_read_packet(&MS5607_SPI_PORT, read_buffer[i], 3);
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	8f 5e       	subi	r24, 0xEF	; 239
    1854:	9e 4d       	sbci	r25, 0xDE	; 222
    1856:	fc 01       	movw	r30, r24
    1858:	80 81       	ld	r24, Z
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	43 e0       	ldi	r20, 0x03	; 3
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	bc 01       	movw	r22, r24
    1864:	80 ec       	ldi	r24, 0xC0	; 192
    1866:	98 e0       	ldi	r25, 0x08	; 8
    1868:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <spi_read_packet>
	.id = IOPORT_CREATE_PIN(PORTC,1)
};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);

	for(uint8_t i = 0; i < sizeof(commands); i++)
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	8f 5f       	subi	r24, 0xFF	; 255
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	d0 f2       	brcs	.-76     	; 0x182c <getPressure+0x46>
		
	}
	
	

	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    1878:	ce 01       	movw	r24, r28
    187a:	82 96       	adiw	r24, 0x22	; 34
    187c:	bc 01       	movw	r22, r24
    187e:	80 ec       	ldi	r24, 0xC0	; 192
    1880:	98 e0       	ldi	r25, 0x08	; 8
    1882:	0e 94 23 04 	call	0x846	; 0x846 <spi_deselect_device>
	uint32_t pressure_val = (uint32_t) read_buffer[0]<<16| read_buffer[1]<<8 |read_buffer[2];
    1886:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <read_buffer>
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ac 01       	movw	r20, r24
    1894:	33 27       	eor	r19, r19
    1896:	22 27       	eor	r18, r18
    1898:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <read_buffer+0x1>
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	98 2f       	mov	r25, r24
    18a2:	88 27       	eor	r24, r24
    18a4:	09 2e       	mov	r0, r25
    18a6:	00 0c       	add	r0, r0
    18a8:	aa 0b       	sbc	r26, r26
    18aa:	bb 0b       	sbc	r27, r27
    18ac:	28 2b       	or	r18, r24
    18ae:	39 2b       	or	r19, r25
    18b0:	4a 2b       	or	r20, r26
    18b2:	5b 2b       	or	r21, r27
    18b4:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <read_buffer+0x2>
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	82 2b       	or	r24, r18
    18c2:	93 2b       	or	r25, r19
    18c4:	a4 2b       	or	r26, r20
    18c6:	b5 2b       	or	r27, r21
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	9b 83       	std	Y+3, r25	; 0x03
    18cc:	ac 83       	std	Y+4, r26	; 0x04
    18ce:	bd 83       	std	Y+5, r27	; 0x05
	printf("%u\n",pressure_val);
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	8f 93       	push	r24
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	8f 93       	push	r24
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	8f 93       	push	r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	8f 93       	push	r24
    18e0:	83 e2       	ldi	r24, 0x23	; 35
    18e2:	90 e2       	ldi	r25, 0x20	; 32
    18e4:	89 2f       	mov	r24, r25
    18e6:	8f 93       	push	r24
    18e8:	83 e2       	ldi	r24, 0x23	; 35
    18ea:	90 e2       	ldi	r25, 0x20	; 32
    18ec:	8f 93       	push	r24
    18ee:	0e 94 55 36 	call	0x6caa	; 0x6caa <printf>
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
	
	D1 = (uint32_t) read_buffer[0]<<16| read_buffer[1]<<8 |read_buffer[2];
    18fe:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <read_buffer>
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ac 01       	movw	r20, r24
    190c:	33 27       	eor	r19, r19
    190e:	22 27       	eor	r18, r18
    1910:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <read_buffer+0x1>
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	98 2f       	mov	r25, r24
    191a:	88 27       	eor	r24, r24
    191c:	09 2e       	mov	r0, r25
    191e:	00 0c       	add	r0, r0
    1920:	aa 0b       	sbc	r26, r26
    1922:	bb 0b       	sbc	r27, r27
    1924:	28 2b       	or	r18, r24
    1926:	39 2b       	or	r19, r25
    1928:	4a 2b       	or	r20, r26
    192a:	5b 2b       	or	r21, r27
    192c:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <read_buffer+0x2>
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e0       	ldi	r26, 0x00	; 0
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	82 2b       	or	r24, r18
    193a:	93 2b       	or	r25, r19
    193c:	a4 2b       	or	r26, r20
    193e:	b5 2b       	or	r27, r21
    1940:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <D1>
    1944:	90 93 1c 21 	sts	0x211C, r25	; 0x80211c <D1+0x1>
    1948:	a0 93 1d 21 	sts	0x211D, r26	; 0x80211d <D1+0x2>
    194c:	b0 93 1e 21 	sts	0x211E, r27	; 0x80211e <D1+0x3>
	D2 = (uint32_t)  read_buffer[3]<<16| read_buffer[4]<<8 |read_buffer[5];
    1950:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <read_buffer+0x3>
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ac 01       	movw	r20, r24
    195e:	33 27       	eor	r19, r19
    1960:	22 27       	eor	r18, r18
    1962:	80 91 15 21 	lds	r24, 0x2115	; 0x802115 <read_buffer+0x4>
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	98 2f       	mov	r25, r24
    196c:	88 27       	eor	r24, r24
    196e:	09 2e       	mov	r0, r25
    1970:	00 0c       	add	r0, r0
    1972:	aa 0b       	sbc	r26, r26
    1974:	bb 0b       	sbc	r27, r27
    1976:	28 2b       	or	r18, r24
    1978:	39 2b       	or	r19, r25
    197a:	4a 2b       	or	r20, r26
    197c:	5b 2b       	or	r21, r27
    197e:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <read_buffer+0x5>
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e0       	ldi	r26, 0x00	; 0
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	82 2b       	or	r24, r18
    198c:	93 2b       	or	r25, r19
    198e:	a4 2b       	or	r26, r20
    1990:	b5 2b       	or	r27, r21
    1992:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <D2>
    1996:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <D2+0x1>
    199a:	a0 93 0f 21 	sts	0x210F, r26	; 0x80210f <D2+0x2>
    199e:	b0 93 10 21 	sts	0x2110, r27	; 0x802110 <D2+0x3>
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
    19a2:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <D2>
    19a6:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <D2+0x1>
    19aa:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <D2+0x2>
    19ae:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <D2+0x3>
    19b2:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <C5>
    19b6:	90 91 18 21 	lds	r25, 0x2118	; 0x802118 <C5+0x1>
    19ba:	cc 01       	movw	r24, r24
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ba 2f       	mov	r27, r26
    19c2:	a9 2f       	mov	r26, r25
    19c4:	98 2f       	mov	r25, r24
    19c6:	88 27       	eor	r24, r24
    19c8:	79 01       	movw	r14, r18
    19ca:	8a 01       	movw	r16, r20
    19cc:	e8 1a       	sub	r14, r24
    19ce:	f9 0a       	sbc	r15, r25
    19d0:	0a 0b       	sbc	r16, r26
    19d2:	1b 0b       	sbc	r17, r27
    19d4:	d8 01       	movw	r26, r16
    19d6:	c7 01       	movw	r24, r14
    19d8:	8e 83       	std	Y+6, r24	; 0x06
    19da:	9f 83       	std	Y+7, r25	; 0x07
    19dc:	a8 87       	std	Y+8, r26	; 0x08
    19de:	b9 87       	std	Y+9, r27	; 0x09
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    19e0:	8e 81       	ldd	r24, Y+6	; 0x06
    19e2:	9f 81       	ldd	r25, Y+7	; 0x07
    19e4:	a8 85       	ldd	r26, Y+8	; 0x08
    19e6:	b9 85       	ldd	r27, Y+9	; 0x09
    19e8:	1c 01       	movw	r2, r24
    19ea:	2d 01       	movw	r4, r26
    19ec:	bb 0f       	add	r27, r27
    19ee:	88 0b       	sbc	r24, r24
    19f0:	98 2f       	mov	r25, r24
    19f2:	dc 01       	movw	r26, r24
    19f4:	68 2e       	mov	r6, r24
    19f6:	78 2e       	mov	r7, r24
    19f8:	88 2e       	mov	r8, r24
    19fa:	98 2e       	mov	r9, r24
    19fc:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <C6>
    1a00:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <C6+0x1>
    1a04:	9c 01       	movw	r18, r24
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	cb 01       	movw	r24, r22
    1a10:	a2 2e       	mov	r10, r18
    1a12:	b3 2e       	mov	r11, r19
    1a14:	c4 2e       	mov	r12, r20
    1a16:	d5 2e       	mov	r13, r21
    1a18:	e6 2e       	mov	r14, r22
    1a1a:	f7 2e       	mov	r15, r23
    1a1c:	08 2f       	mov	r16, r24
    1a1e:	19 2f       	mov	r17, r25
    1a20:	22 2d       	mov	r18, r2
    1a22:	33 2d       	mov	r19, r3
    1a24:	44 2d       	mov	r20, r4
    1a26:	55 2d       	mov	r21, r5
    1a28:	66 2d       	mov	r22, r6
    1a2a:	77 2d       	mov	r23, r7
    1a2c:	88 2d       	mov	r24, r8
    1a2e:	99 2d       	mov	r25, r9
    1a30:	0e 94 92 32 	call	0x6524	; 0x6524 <__muldi3>
    1a34:	a2 2e       	mov	r10, r18
    1a36:	b3 2e       	mov	r11, r19
    1a38:	c4 2e       	mov	r12, r20
    1a3a:	d5 2e       	mov	r13, r21
    1a3c:	e6 2e       	mov	r14, r22
    1a3e:	f7 2e       	mov	r15, r23
    1a40:	08 2f       	mov	r16, r24
    1a42:	19 2f       	mov	r17, r25
    1a44:	2a 2d       	mov	r18, r10
    1a46:	3b 2d       	mov	r19, r11
    1a48:	4c 2d       	mov	r20, r12
    1a4a:	5d 2d       	mov	r21, r13
    1a4c:	6e 2d       	mov	r22, r14
    1a4e:	7f 2d       	mov	r23, r15
    1a50:	80 2f       	mov	r24, r16
    1a52:	91 2f       	mov	r25, r17
    1a54:	a2 2e       	mov	r10, r18
    1a56:	b3 2e       	mov	r11, r19
    1a58:	c4 2e       	mov	r12, r20
    1a5a:	d5 2e       	mov	r13, r21
    1a5c:	e6 2e       	mov	r14, r22
    1a5e:	f7 2e       	mov	r15, r23
    1a60:	08 2f       	mov	r16, r24
    1a62:	19 2f       	mov	r17, r25
    1a64:	2a 2d       	mov	r18, r10
    1a66:	3b 2d       	mov	r19, r11
    1a68:	4c 2d       	mov	r20, r12
    1a6a:	5d 2d       	mov	r21, r13
    1a6c:	6e 2d       	mov	r22, r14
    1a6e:	7f 2d       	mov	r23, r15
    1a70:	80 2f       	mov	r24, r16
    1a72:	91 2f       	mov	r25, r17
    1a74:	a0 e0       	ldi	r26, 0x00	; 0
    1a76:	0e 94 96 33 	call	0x672c	; 0x672c <__cmpdi2_s8>
    1a7a:	04 f5       	brge	.+64     	; 0x1abc <getPressure+0x2d6>
    1a7c:	2a 2d       	mov	r18, r10
    1a7e:	3b 2d       	mov	r19, r11
    1a80:	4c 2d       	mov	r20, r12
    1a82:	5d 2d       	mov	r21, r13
    1a84:	6e 2d       	mov	r22, r14
    1a86:	7f 2d       	mov	r23, r15
    1a88:	80 2f       	mov	r24, r16
    1a8a:	91 2f       	mov	r25, r17
    1a8c:	21 50       	subi	r18, 0x01	; 1
    1a8e:	31 09       	sbc	r19, r1
    1a90:	40 48       	sbci	r20, 0x80	; 128
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	6f 4f       	sbci	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	22 2e       	mov	r2, r18
    1a9e:	33 2e       	mov	r3, r19
    1aa0:	44 2e       	mov	r4, r20
    1aa2:	55 2e       	mov	r5, r21
    1aa4:	66 2e       	mov	r6, r22
    1aa6:	77 2e       	mov	r7, r23
    1aa8:	88 2e       	mov	r8, r24
    1aaa:	99 2e       	mov	r9, r25
    1aac:	a2 2c       	mov	r10, r2
    1aae:	b3 2c       	mov	r11, r3
    1ab0:	c4 2c       	mov	r12, r4
    1ab2:	d5 2c       	mov	r13, r5
    1ab4:	e6 2c       	mov	r14, r6
    1ab6:	f7 2c       	mov	r15, r7
    1ab8:	08 2d       	mov	r16, r8
    1aba:	19 2d       	mov	r17, r9
    1abc:	2a 2d       	mov	r18, r10
    1abe:	3b 2d       	mov	r19, r11
    1ac0:	4c 2d       	mov	r20, r12
    1ac2:	5d 2d       	mov	r21, r13
    1ac4:	6e 2d       	mov	r22, r14
    1ac6:	7f 2d       	mov	r23, r15
    1ac8:	80 2f       	mov	r24, r16
    1aca:	91 2f       	mov	r25, r17
    1acc:	07 e1       	ldi	r16, 0x17	; 23
    1ace:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__ashrdi3>
    1ad2:	a2 2e       	mov	r10, r18
    1ad4:	b3 2e       	mov	r11, r19
    1ad6:	c4 2e       	mov	r12, r20
    1ad8:	d5 2e       	mov	r13, r21
    1ada:	e6 2e       	mov	r14, r22
    1adc:	f7 2e       	mov	r15, r23
    1ade:	08 2f       	mov	r16, r24
    1ae0:	19 2f       	mov	r17, r25
    1ae2:	2a 2d       	mov	r18, r10
    1ae4:	3b 2d       	mov	r19, r11
    1ae6:	4c 2d       	mov	r20, r12
    1ae8:	5d 2d       	mov	r21, r13
    1aea:	6e 2d       	mov	r22, r14
    1aec:	7f 2d       	mov	r23, r15
    1aee:	80 2f       	mov	r24, r16
    1af0:	91 2f       	mov	r25, r17
    1af2:	da 01       	movw	r26, r20
    1af4:	c9 01       	movw	r24, r18
    1af6:	80 53       	subi	r24, 0x30	; 48
    1af8:	98 4f       	sbci	r25, 0xF8	; 248
    1afa:	af 4f       	sbci	r26, 0xFF	; 255
    1afc:	bf 4f       	sbci	r27, 0xFF	; 255
    1afe:	8a 87       	std	Y+10, r24	; 0x0a
    1b00:	9b 87       	std	Y+11, r25	; 0x0b
    1b02:	ac 87       	std	Y+12, r26	; 0x0c
    1b04:	bd 87       	std	Y+13, r27	; 0x0d

	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
    1b06:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <C2>
    1b0a:	90 91 0a 21 	lds	r25, 0x210A	; 0x80210a <C2+0x1>
    1b0e:	5c 01       	movw	r10, r24
    1b10:	c1 2c       	mov	r12, r1
    1b12:	d1 2c       	mov	r13, r1
    1b14:	e1 2c       	mov	r14, r1
    1b16:	f1 2c       	mov	r15, r1
    1b18:	87 01       	movw	r16, r14
    1b1a:	2a 2d       	mov	r18, r10
    1b1c:	3b 2d       	mov	r19, r11
    1b1e:	4c 2d       	mov	r20, r12
    1b20:	5d 2d       	mov	r21, r13
    1b22:	6e 2d       	mov	r22, r14
    1b24:	7f 2d       	mov	r23, r15
    1b26:	80 2f       	mov	r24, r16
    1b28:	91 2f       	mov	r25, r17
    1b2a:	01 e1       	ldi	r16, 0x11	; 17
    1b2c:	0e 94 41 33 	call	0x6682	; 0x6682 <__ashldi3>
    1b30:	2b a3       	std	Y+35, r18	; 0x23
    1b32:	3c a3       	std	Y+36, r19	; 0x24
    1b34:	4d a3       	std	Y+37, r20	; 0x25
    1b36:	5e a3       	std	Y+38, r21	; 0x26
    1b38:	6f a3       	std	Y+39, r22	; 0x27
    1b3a:	78 a7       	std	Y+40, r23	; 0x28
    1b3c:	89 a7       	std	Y+41, r24	; 0x29
    1b3e:	9a a7       	std	Y+42, r25	; 0x2a
    1b40:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <C4>
    1b44:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <C4+0x1>
    1b48:	1c 01       	movw	r2, r24
    1b4a:	41 2c       	mov	r4, r1
    1b4c:	51 2c       	mov	r5, r1
    1b4e:	61 2c       	mov	r6, r1
    1b50:	71 2c       	mov	r7, r1
    1b52:	43 01       	movw	r8, r6
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	9f 81       	ldd	r25, Y+7	; 0x07
    1b58:	a8 85       	ldd	r26, Y+8	; 0x08
    1b5a:	b9 85       	ldd	r27, Y+9	; 0x09
    1b5c:	8b a7       	std	Y+43, r24	; 0x2b
    1b5e:	9c a7       	std	Y+44, r25	; 0x2c
    1b60:	ad a7       	std	Y+45, r26	; 0x2d
    1b62:	be a7       	std	Y+46, r27	; 0x2e
    1b64:	bb 0f       	add	r27, r27
    1b66:	88 0b       	sbc	r24, r24
    1b68:	98 2f       	mov	r25, r24
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	88 ab       	std	Y+48, r24	; 0x30
    1b70:	89 ab       	std	Y+49, r24	; 0x31
    1b72:	8a ab       	std	Y+50, r24	; 0x32
    1b74:	ab a4       	ldd	r10, Y+43	; 0x2b
    1b76:	bc a4       	ldd	r11, Y+44	; 0x2c
    1b78:	cd a4       	ldd	r12, Y+45	; 0x2d
    1b7a:	de a4       	ldd	r13, Y+46	; 0x2e
    1b7c:	ef a4       	ldd	r14, Y+47	; 0x2f
    1b7e:	f8 a8       	ldd	r15, Y+48	; 0x30
    1b80:	09 a9       	ldd	r16, Y+49	; 0x31
    1b82:	1a a9       	ldd	r17, Y+50	; 0x32
    1b84:	22 2d       	mov	r18, r2
    1b86:	33 2d       	mov	r19, r3
    1b88:	44 2d       	mov	r20, r4
    1b8a:	55 2d       	mov	r21, r5
    1b8c:	66 2d       	mov	r22, r6
    1b8e:	77 2d       	mov	r23, r7
    1b90:	88 2d       	mov	r24, r8
    1b92:	99 2d       	mov	r25, r9
    1b94:	0e 94 92 32 	call	0x6524	; 0x6524 <__muldi3>
    1b98:	a2 2e       	mov	r10, r18
    1b9a:	b3 2e       	mov	r11, r19
    1b9c:	c4 2e       	mov	r12, r20
    1b9e:	d5 2e       	mov	r13, r21
    1ba0:	e6 2e       	mov	r14, r22
    1ba2:	f7 2e       	mov	r15, r23
    1ba4:	08 2f       	mov	r16, r24
    1ba6:	19 2f       	mov	r17, r25
    1ba8:	2a 2d       	mov	r18, r10
    1baa:	3b 2d       	mov	r19, r11
    1bac:	4c 2d       	mov	r20, r12
    1bae:	5d 2d       	mov	r21, r13
    1bb0:	6e 2d       	mov	r22, r14
    1bb2:	7f 2d       	mov	r23, r15
    1bb4:	80 2f       	mov	r24, r16
    1bb6:	91 2f       	mov	r25, r17
    1bb8:	a2 2e       	mov	r10, r18
    1bba:	b3 2e       	mov	r11, r19
    1bbc:	c4 2e       	mov	r12, r20
    1bbe:	d5 2e       	mov	r13, r21
    1bc0:	e6 2e       	mov	r14, r22
    1bc2:	f7 2e       	mov	r15, r23
    1bc4:	08 2f       	mov	r16, r24
    1bc6:	19 2f       	mov	r17, r25
    1bc8:	2a 2d       	mov	r18, r10
    1bca:	3b 2d       	mov	r19, r11
    1bcc:	4c 2d       	mov	r20, r12
    1bce:	5d 2d       	mov	r21, r13
    1bd0:	6e 2d       	mov	r22, r14
    1bd2:	7f 2d       	mov	r23, r15
    1bd4:	80 2f       	mov	r24, r16
    1bd6:	91 2f       	mov	r25, r17
    1bd8:	a0 e0       	ldi	r26, 0x00	; 0
    1bda:	0e 94 96 33 	call	0x672c	; 0x672c <__cmpdi2_s8>
    1bde:	dc f4       	brge	.+54     	; 0x1c16 <getPressure+0x430>
    1be0:	2a 2d       	mov	r18, r10
    1be2:	3b 2d       	mov	r19, r11
    1be4:	4c 2d       	mov	r20, r12
    1be6:	5d 2d       	mov	r21, r13
    1be8:	6e 2d       	mov	r22, r14
    1bea:	7f 2d       	mov	r23, r15
    1bec:	80 2f       	mov	r24, r16
    1bee:	91 2f       	mov	r25, r17
    1bf0:	af e3       	ldi	r26, 0x3F	; 63
    1bf2:	0e 94 81 33 	call	0x6702	; 0x6702 <__adddi3_s8>
    1bf6:	22 2e       	mov	r2, r18
    1bf8:	33 2e       	mov	r3, r19
    1bfa:	44 2e       	mov	r4, r20
    1bfc:	55 2e       	mov	r5, r21
    1bfe:	66 2e       	mov	r6, r22
    1c00:	77 2e       	mov	r7, r23
    1c02:	88 2e       	mov	r8, r24
    1c04:	99 2e       	mov	r9, r25
    1c06:	a2 2c       	mov	r10, r2
    1c08:	b3 2c       	mov	r11, r3
    1c0a:	c4 2c       	mov	r12, r4
    1c0c:	d5 2c       	mov	r13, r5
    1c0e:	e6 2c       	mov	r14, r6
    1c10:	f7 2c       	mov	r15, r7
    1c12:	08 2d       	mov	r16, r8
    1c14:	19 2d       	mov	r17, r9
    1c16:	2a 2d       	mov	r18, r10
    1c18:	3b 2d       	mov	r19, r11
    1c1a:	4c 2d       	mov	r20, r12
    1c1c:	5d 2d       	mov	r21, r13
    1c1e:	6e 2d       	mov	r22, r14
    1c20:	7f 2d       	mov	r23, r15
    1c22:	80 2f       	mov	r24, r16
    1c24:	91 2f       	mov	r25, r17
    1c26:	06 e0       	ldi	r16, 0x06	; 6
    1c28:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__ashrdi3>
    1c2c:	a2 2e       	mov	r10, r18
    1c2e:	b3 2e       	mov	r11, r19
    1c30:	c4 2e       	mov	r12, r20
    1c32:	d5 2e       	mov	r13, r21
    1c34:	e6 2e       	mov	r14, r22
    1c36:	f7 2e       	mov	r15, r23
    1c38:	08 2f       	mov	r16, r24
    1c3a:	19 2f       	mov	r17, r25
    1c3c:	2a 2c       	mov	r2, r10
    1c3e:	3b 2c       	mov	r3, r11
    1c40:	4c 2c       	mov	r4, r12
    1c42:	5d 2c       	mov	r5, r13
    1c44:	6e 2c       	mov	r6, r14
    1c46:	7f 2c       	mov	r7, r15
    1c48:	80 2e       	mov	r8, r16
    1c4a:	91 2e       	mov	r9, r17
    1c4c:	2b a1       	ldd	r18, Y+35	; 0x23
    1c4e:	3c a1       	ldd	r19, Y+36	; 0x24
    1c50:	4d a1       	ldd	r20, Y+37	; 0x25
    1c52:	5e a1       	ldd	r21, Y+38	; 0x26
    1c54:	6f a1       	ldd	r22, Y+39	; 0x27
    1c56:	78 a5       	ldd	r23, Y+40	; 0x28
    1c58:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5c:	a2 2c       	mov	r10, r2
    1c5e:	b3 2c       	mov	r11, r3
    1c60:	c4 2c       	mov	r12, r4
    1c62:	d5 2c       	mov	r13, r5
    1c64:	e6 2c       	mov	r14, r6
    1c66:	f7 2c       	mov	r15, r7
    1c68:	08 2d       	mov	r16, r8
    1c6a:	19 2d       	mov	r17, r9
    1c6c:	0e 94 78 33 	call	0x66f0	; 0x66f0 <__adddi3>
    1c70:	2e 87       	std	Y+14, r18	; 0x0e
    1c72:	3f 87       	std	Y+15, r19	; 0x0f
    1c74:	48 8b       	std	Y+16, r20	; 0x10
    1c76:	59 8b       	std	Y+17, r21	; 0x11
    1c78:	6a 8b       	std	Y+18, r22	; 0x12
    1c7a:	7b 8b       	std	Y+19, r23	; 0x13
    1c7c:	8c 8b       	std	Y+20, r24	; 0x14
    1c7e:	9d 8b       	std	Y+21, r25	; 0x15
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128;
    1c80:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <C1>
    1c84:	90 91 06 21 	lds	r25, 0x2106	; 0x802106 <C1+0x1>
    1c88:	5c 01       	movw	r10, r24
    1c8a:	c1 2c       	mov	r12, r1
    1c8c:	d1 2c       	mov	r13, r1
    1c8e:	e1 2c       	mov	r14, r1
    1c90:	f1 2c       	mov	r15, r1
    1c92:	87 01       	movw	r16, r14
    1c94:	2a 2d       	mov	r18, r10
    1c96:	3b 2d       	mov	r19, r11
    1c98:	4c 2d       	mov	r20, r12
    1c9a:	5d 2d       	mov	r21, r13
    1c9c:	6e 2d       	mov	r22, r14
    1c9e:	7f 2d       	mov	r23, r15
    1ca0:	80 2f       	mov	r24, r16
    1ca2:	91 2f       	mov	r25, r17
    1ca4:	00 e1       	ldi	r16, 0x10	; 16
    1ca6:	0e 94 41 33 	call	0x6682	; 0x6682 <__ashldi3>
    1caa:	2b ab       	std	Y+51, r18	; 0x33
    1cac:	3c ab       	std	Y+52, r19	; 0x34
    1cae:	4d ab       	std	Y+53, r20	; 0x35
    1cb0:	5e ab       	std	Y+54, r21	; 0x36
    1cb2:	6f ab       	std	Y+55, r22	; 0x37
    1cb4:	78 af       	std	Y+56, r23	; 0x38
    1cb6:	89 af       	std	Y+57, r24	; 0x39
    1cb8:	9a af       	std	Y+58, r25	; 0x3a
    1cba:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <C3>
    1cbe:	90 91 08 21 	lds	r25, 0x2108	; 0x802108 <C3+0x1>
    1cc2:	1c 01       	movw	r2, r24
    1cc4:	41 2c       	mov	r4, r1
    1cc6:	51 2c       	mov	r5, r1
    1cc8:	61 2c       	mov	r6, r1
    1cca:	71 2c       	mov	r7, r1
    1ccc:	43 01       	movw	r8, r6
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd2:	a8 85       	ldd	r26, Y+8	; 0x08
    1cd4:	b9 85       	ldd	r27, Y+9	; 0x09
    1cd6:	8b af       	std	Y+59, r24	; 0x3b
    1cd8:	9c af       	std	Y+60, r25	; 0x3c
    1cda:	ad af       	std	Y+61, r26	; 0x3d
    1cdc:	be af       	std	Y+62, r27	; 0x3e
    1cde:	bb 0f       	add	r27, r27
    1ce0:	88 0b       	sbc	r24, r24
    1ce2:	98 2f       	mov	r25, r24
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	8f af       	std	Y+63, r24	; 0x3f
    1ce8:	21 96       	adiw	r28, 0x01	; 1
    1cea:	8f af       	std	Y+63, r24	; 0x3f
    1cec:	21 97       	sbiw	r28, 0x01	; 1
    1cee:	22 96       	adiw	r28, 0x02	; 2
    1cf0:	8f af       	std	Y+63, r24	; 0x3f
    1cf2:	22 97       	sbiw	r28, 0x02	; 2
    1cf4:	23 96       	adiw	r28, 0x03	; 3
    1cf6:	8f af       	std	Y+63, r24	; 0x3f
    1cf8:	23 97       	sbiw	r28, 0x03	; 3
    1cfa:	ab ac       	ldd	r10, Y+59	; 0x3b
    1cfc:	bc ac       	ldd	r11, Y+60	; 0x3c
    1cfe:	cd ac       	ldd	r12, Y+61	; 0x3d
    1d00:	de ac       	ldd	r13, Y+62	; 0x3e
    1d02:	ef ac       	ldd	r14, Y+63	; 0x3f
    1d04:	21 96       	adiw	r28, 0x01	; 1
    1d06:	ff ac       	ldd	r15, Y+63	; 0x3f
    1d08:	21 97       	sbiw	r28, 0x01	; 1
    1d0a:	22 96       	adiw	r28, 0x02	; 2
    1d0c:	0f ad       	ldd	r16, Y+63	; 0x3f
    1d0e:	22 97       	sbiw	r28, 0x02	; 2
    1d10:	23 96       	adiw	r28, 0x03	; 3
    1d12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d14:	23 97       	sbiw	r28, 0x03	; 3
    1d16:	22 2d       	mov	r18, r2
    1d18:	33 2d       	mov	r19, r3
    1d1a:	44 2d       	mov	r20, r4
    1d1c:	55 2d       	mov	r21, r5
    1d1e:	66 2d       	mov	r22, r6
    1d20:	77 2d       	mov	r23, r7
    1d22:	88 2d       	mov	r24, r8
    1d24:	99 2d       	mov	r25, r9
    1d26:	0e 94 92 32 	call	0x6524	; 0x6524 <__muldi3>
    1d2a:	a2 2e       	mov	r10, r18
    1d2c:	b3 2e       	mov	r11, r19
    1d2e:	c4 2e       	mov	r12, r20
    1d30:	d5 2e       	mov	r13, r21
    1d32:	e6 2e       	mov	r14, r22
    1d34:	f7 2e       	mov	r15, r23
    1d36:	08 2f       	mov	r16, r24
    1d38:	19 2f       	mov	r17, r25
    1d3a:	2a 2d       	mov	r18, r10
    1d3c:	3b 2d       	mov	r19, r11
    1d3e:	4c 2d       	mov	r20, r12
    1d40:	5d 2d       	mov	r21, r13
    1d42:	6e 2d       	mov	r22, r14
    1d44:	7f 2d       	mov	r23, r15
    1d46:	80 2f       	mov	r24, r16
    1d48:	91 2f       	mov	r25, r17
    1d4a:	a2 2e       	mov	r10, r18
    1d4c:	b3 2e       	mov	r11, r19
    1d4e:	c4 2e       	mov	r12, r20
    1d50:	d5 2e       	mov	r13, r21
    1d52:	e6 2e       	mov	r14, r22
    1d54:	f7 2e       	mov	r15, r23
    1d56:	08 2f       	mov	r16, r24
    1d58:	19 2f       	mov	r17, r25
    1d5a:	2a 2d       	mov	r18, r10
    1d5c:	3b 2d       	mov	r19, r11
    1d5e:	4c 2d       	mov	r20, r12
    1d60:	5d 2d       	mov	r21, r13
    1d62:	6e 2d       	mov	r22, r14
    1d64:	7f 2d       	mov	r23, r15
    1d66:	80 2f       	mov	r24, r16
    1d68:	91 2f       	mov	r25, r17
    1d6a:	a0 e0       	ldi	r26, 0x00	; 0
    1d6c:	0e 94 96 33 	call	0x672c	; 0x672c <__cmpdi2_s8>
    1d70:	dc f4       	brge	.+54     	; 0x1da8 <getPressure+0x5c2>
    1d72:	2a 2d       	mov	r18, r10
    1d74:	3b 2d       	mov	r19, r11
    1d76:	4c 2d       	mov	r20, r12
    1d78:	5d 2d       	mov	r21, r13
    1d7a:	6e 2d       	mov	r22, r14
    1d7c:	7f 2d       	mov	r23, r15
    1d7e:	80 2f       	mov	r24, r16
    1d80:	91 2f       	mov	r25, r17
    1d82:	af e7       	ldi	r26, 0x7F	; 127
    1d84:	0e 94 81 33 	call	0x6702	; 0x6702 <__adddi3_s8>
    1d88:	22 2e       	mov	r2, r18
    1d8a:	33 2e       	mov	r3, r19
    1d8c:	44 2e       	mov	r4, r20
    1d8e:	55 2e       	mov	r5, r21
    1d90:	66 2e       	mov	r6, r22
    1d92:	77 2e       	mov	r7, r23
    1d94:	88 2e       	mov	r8, r24
    1d96:	99 2e       	mov	r9, r25
    1d98:	a2 2c       	mov	r10, r2
    1d9a:	b3 2c       	mov	r11, r3
    1d9c:	c4 2c       	mov	r12, r4
    1d9e:	d5 2c       	mov	r13, r5
    1da0:	e6 2c       	mov	r14, r6
    1da2:	f7 2c       	mov	r15, r7
    1da4:	08 2d       	mov	r16, r8
    1da6:	19 2d       	mov	r17, r9
    1da8:	2a 2d       	mov	r18, r10
    1daa:	3b 2d       	mov	r19, r11
    1dac:	4c 2d       	mov	r20, r12
    1dae:	5d 2d       	mov	r21, r13
    1db0:	6e 2d       	mov	r22, r14
    1db2:	7f 2d       	mov	r23, r15
    1db4:	80 2f       	mov	r24, r16
    1db6:	91 2f       	mov	r25, r17
    1db8:	07 e0       	ldi	r16, 0x07	; 7
    1dba:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__ashrdi3>
    1dbe:	a2 2e       	mov	r10, r18
    1dc0:	b3 2e       	mov	r11, r19
    1dc2:	c4 2e       	mov	r12, r20
    1dc4:	d5 2e       	mov	r13, r21
    1dc6:	e6 2e       	mov	r14, r22
    1dc8:	f7 2e       	mov	r15, r23
    1dca:	08 2f       	mov	r16, r24
    1dcc:	19 2f       	mov	r17, r25
    1dce:	2a 2c       	mov	r2, r10
    1dd0:	3b 2c       	mov	r3, r11
    1dd2:	4c 2c       	mov	r4, r12
    1dd4:	5d 2c       	mov	r5, r13
    1dd6:	6e 2c       	mov	r6, r14
    1dd8:	7f 2c       	mov	r7, r15
    1dda:	80 2e       	mov	r8, r16
    1ddc:	91 2e       	mov	r9, r17
    1dde:	2b a9       	ldd	r18, Y+51	; 0x33
    1de0:	3c a9       	ldd	r19, Y+52	; 0x34
    1de2:	4d a9       	ldd	r20, Y+53	; 0x35
    1de4:	5e a9       	ldd	r21, Y+54	; 0x36
    1de6:	6f a9       	ldd	r22, Y+55	; 0x37
    1de8:	78 ad       	ldd	r23, Y+56	; 0x38
    1dea:	89 ad       	ldd	r24, Y+57	; 0x39
    1dec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dee:	a2 2c       	mov	r10, r2
    1df0:	b3 2c       	mov	r11, r3
    1df2:	c4 2c       	mov	r12, r4
    1df4:	d5 2c       	mov	r13, r5
    1df6:	e6 2c       	mov	r14, r6
    1df8:	f7 2c       	mov	r15, r7
    1dfa:	08 2d       	mov	r16, r8
    1dfc:	19 2d       	mov	r17, r9
    1dfe:	0e 94 78 33 	call	0x66f0	; 0x66f0 <__adddi3>
    1e02:	2e 8b       	std	Y+22, r18	; 0x16
    1e04:	3f 8b       	std	Y+23, r19	; 0x17
    1e06:	48 8f       	std	Y+24, r20	; 0x18
    1e08:	59 8f       	std	Y+25, r21	; 0x19
    1e0a:	6a 8f       	std	Y+26, r22	; 0x1a
    1e0c:	7b 8f       	std	Y+27, r23	; 0x1b
    1e0e:	8c 8f       	std	Y+28, r24	; 0x1c
    1e10:	9d 8f       	std	Y+29, r25	; 0x1d
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    1e12:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <D1>
    1e16:	90 91 1c 21 	lds	r25, 0x211C	; 0x80211c <D1+0x1>
    1e1a:	a0 91 1d 21 	lds	r26, 0x211D	; 0x80211d <D1+0x2>
    1e1e:	b0 91 1e 21 	lds	r27, 0x211E	; 0x80211e <D1+0x3>
    1e22:	1c 01       	movw	r2, r24
    1e24:	2d 01       	movw	r4, r26
    1e26:	61 2c       	mov	r6, r1
    1e28:	71 2c       	mov	r7, r1
    1e2a:	43 01       	movw	r8, r6
    1e2c:	ae 88       	ldd	r10, Y+22	; 0x16
    1e2e:	bf 88       	ldd	r11, Y+23	; 0x17
    1e30:	c8 8c       	ldd	r12, Y+24	; 0x18
    1e32:	d9 8c       	ldd	r13, Y+25	; 0x19
    1e34:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1e36:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1e38:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1e3a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1e3c:	22 2d       	mov	r18, r2
    1e3e:	33 2d       	mov	r19, r3
    1e40:	44 2d       	mov	r20, r4
    1e42:	55 2d       	mov	r21, r5
    1e44:	66 2d       	mov	r22, r6
    1e46:	77 2d       	mov	r23, r7
    1e48:	88 2d       	mov	r24, r8
    1e4a:	99 2d       	mov	r25, r9
    1e4c:	0e 94 92 32 	call	0x6524	; 0x6524 <__muldi3>
    1e50:	a2 2e       	mov	r10, r18
    1e52:	b3 2e       	mov	r11, r19
    1e54:	c4 2e       	mov	r12, r20
    1e56:	d5 2e       	mov	r13, r21
    1e58:	e6 2e       	mov	r14, r22
    1e5a:	f7 2e       	mov	r15, r23
    1e5c:	08 2f       	mov	r16, r24
    1e5e:	19 2f       	mov	r17, r25
    1e60:	2a 2d       	mov	r18, r10
    1e62:	3b 2d       	mov	r19, r11
    1e64:	4c 2d       	mov	r20, r12
    1e66:	5d 2d       	mov	r21, r13
    1e68:	6e 2d       	mov	r22, r14
    1e6a:	7f 2d       	mov	r23, r15
    1e6c:	80 2f       	mov	r24, r16
    1e6e:	91 2f       	mov	r25, r17
    1e70:	a2 2e       	mov	r10, r18
    1e72:	b3 2e       	mov	r11, r19
    1e74:	c4 2e       	mov	r12, r20
    1e76:	d5 2e       	mov	r13, r21
    1e78:	e6 2e       	mov	r14, r22
    1e7a:	f7 2e       	mov	r15, r23
    1e7c:	08 2f       	mov	r16, r24
    1e7e:	19 2f       	mov	r17, r25
    1e80:	2a 2d       	mov	r18, r10
    1e82:	3b 2d       	mov	r19, r11
    1e84:	4c 2d       	mov	r20, r12
    1e86:	5d 2d       	mov	r21, r13
    1e88:	6e 2d       	mov	r22, r14
    1e8a:	7f 2d       	mov	r23, r15
    1e8c:	80 2f       	mov	r24, r16
    1e8e:	91 2f       	mov	r25, r17
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	0e 94 96 33 	call	0x672c	; 0x672c <__cmpdi2_s8>
    1e96:	04 f5       	brge	.+64     	; 0x1ed8 <getPressure+0x6f2>
    1e98:	2a 2d       	mov	r18, r10
    1e9a:	3b 2d       	mov	r19, r11
    1e9c:	4c 2d       	mov	r20, r12
    1e9e:	5d 2d       	mov	r21, r13
    1ea0:	6e 2d       	mov	r22, r14
    1ea2:	7f 2d       	mov	r23, r15
    1ea4:	80 2f       	mov	r24, r16
    1ea6:	91 2f       	mov	r25, r17
    1ea8:	21 50       	subi	r18, 0x01	; 1
    1eaa:	31 09       	sbc	r19, r1
    1eac:	40 4e       	sbci	r20, 0xE0	; 224
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	6f 4f       	sbci	r22, 0xFF	; 255
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	22 2e       	mov	r2, r18
    1eba:	33 2e       	mov	r3, r19
    1ebc:	44 2e       	mov	r4, r20
    1ebe:	55 2e       	mov	r5, r21
    1ec0:	66 2e       	mov	r6, r22
    1ec2:	77 2e       	mov	r7, r23
    1ec4:	88 2e       	mov	r8, r24
    1ec6:	99 2e       	mov	r9, r25
    1ec8:	a2 2c       	mov	r10, r2
    1eca:	b3 2c       	mov	r11, r3
    1ecc:	c4 2c       	mov	r12, r4
    1ece:	d5 2c       	mov	r13, r5
    1ed0:	e6 2c       	mov	r14, r6
    1ed2:	f7 2c       	mov	r15, r7
    1ed4:	08 2d       	mov	r16, r8
    1ed6:	19 2d       	mov	r17, r9
    1ed8:	2a 2d       	mov	r18, r10
    1eda:	3b 2d       	mov	r19, r11
    1edc:	4c 2d       	mov	r20, r12
    1ede:	5d 2d       	mov	r21, r13
    1ee0:	6e 2d       	mov	r22, r14
    1ee2:	7f 2d       	mov	r23, r15
    1ee4:	80 2f       	mov	r24, r16
    1ee6:	91 2f       	mov	r25, r17
    1ee8:	05 e1       	ldi	r16, 0x15	; 21
    1eea:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__ashrdi3>
    1eee:	22 2e       	mov	r2, r18
    1ef0:	33 2e       	mov	r3, r19
    1ef2:	44 2e       	mov	r4, r20
    1ef4:	55 2e       	mov	r5, r21
    1ef6:	66 2e       	mov	r6, r22
    1ef8:	77 2e       	mov	r7, r23
    1efa:	88 2e       	mov	r8, r24
    1efc:	99 2e       	mov	r9, r25
    1efe:	a2 2c       	mov	r10, r2
    1f00:	b3 2c       	mov	r11, r3
    1f02:	c4 2c       	mov	r12, r4
    1f04:	d5 2c       	mov	r13, r5
    1f06:	e6 2c       	mov	r14, r6
    1f08:	f7 2c       	mov	r15, r7
    1f0a:	08 2d       	mov	r16, r8
    1f0c:	19 2d       	mov	r17, r9
    1f0e:	2a 2d       	mov	r18, r10
    1f10:	3b 2d       	mov	r19, r11
    1f12:	4c 2d       	mov	r20, r12
    1f14:	5d 2d       	mov	r21, r13
    1f16:	6e 2d       	mov	r22, r14
    1f18:	7f 2d       	mov	r23, r15
    1f1a:	80 2f       	mov	r24, r16
    1f1c:	91 2f       	mov	r25, r17
    1f1e:	ae 84       	ldd	r10, Y+14	; 0x0e
    1f20:	bf 84       	ldd	r11, Y+15	; 0x0f
    1f22:	c8 88       	ldd	r12, Y+16	; 0x10
    1f24:	d9 88       	ldd	r13, Y+17	; 0x11
    1f26:	ea 88       	ldd	r14, Y+18	; 0x12
    1f28:	fb 88       	ldd	r15, Y+19	; 0x13
    1f2a:	0c 89       	ldd	r16, Y+20	; 0x14
    1f2c:	1d 89       	ldd	r17, Y+21	; 0x15
    1f2e:	0e 94 8d 33 	call	0x671a	; 0x671a <__subdi3>
    1f32:	22 2e       	mov	r2, r18
    1f34:	33 2e       	mov	r3, r19
    1f36:	44 2e       	mov	r4, r20
    1f38:	55 2e       	mov	r5, r21
    1f3a:	66 2e       	mov	r6, r22
    1f3c:	77 2e       	mov	r7, r23
    1f3e:	88 2e       	mov	r8, r24
    1f40:	99 2e       	mov	r9, r25
    1f42:	a2 2c       	mov	r10, r2
    1f44:	b3 2c       	mov	r11, r3
    1f46:	c4 2c       	mov	r12, r4
    1f48:	d5 2c       	mov	r13, r5
    1f4a:	e6 2c       	mov	r14, r6
    1f4c:	f7 2c       	mov	r15, r7
    1f4e:	08 2d       	mov	r16, r8
    1f50:	19 2d       	mov	r17, r9
    1f52:	2a 2d       	mov	r18, r10
    1f54:	3b 2d       	mov	r19, r11
    1f56:	4c 2d       	mov	r20, r12
    1f58:	5d 2d       	mov	r21, r13
    1f5a:	6e 2d       	mov	r22, r14
    1f5c:	7f 2d       	mov	r23, r15
    1f5e:	80 2f       	mov	r24, r16
    1f60:	91 2f       	mov	r25, r17
    1f62:	a0 e0       	ldi	r26, 0x00	; 0
    1f64:	0e 94 96 33 	call	0x672c	; 0x672c <__cmpdi2_s8>
    1f68:	04 f5       	brge	.+64     	; 0x1faa <getPressure+0x7c4>
    1f6a:	2a 2d       	mov	r18, r10
    1f6c:	3b 2d       	mov	r19, r11
    1f6e:	4c 2d       	mov	r20, r12
    1f70:	5d 2d       	mov	r21, r13
    1f72:	6e 2d       	mov	r22, r14
    1f74:	7f 2d       	mov	r23, r15
    1f76:	80 2f       	mov	r24, r16
    1f78:	91 2f       	mov	r25, r17
    1f7a:	21 50       	subi	r18, 0x01	; 1
    1f7c:	30 48       	sbci	r19, 0x80	; 128
    1f7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f80:	5f 4f       	sbci	r21, 0xFF	; 255
    1f82:	6f 4f       	sbci	r22, 0xFF	; 255
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	8f 4f       	sbci	r24, 0xFF	; 255
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	22 2e       	mov	r2, r18
    1f8c:	33 2e       	mov	r3, r19
    1f8e:	44 2e       	mov	r4, r20
    1f90:	55 2e       	mov	r5, r21
    1f92:	66 2e       	mov	r6, r22
    1f94:	77 2e       	mov	r7, r23
    1f96:	88 2e       	mov	r8, r24
    1f98:	99 2e       	mov	r9, r25
    1f9a:	a2 2c       	mov	r10, r2
    1f9c:	b3 2c       	mov	r11, r3
    1f9e:	c4 2c       	mov	r12, r4
    1fa0:	d5 2c       	mov	r13, r5
    1fa2:	e6 2c       	mov	r14, r6
    1fa4:	f7 2c       	mov	r15, r7
    1fa6:	08 2d       	mov	r16, r8
    1fa8:	19 2d       	mov	r17, r9
    1faa:	2a 2d       	mov	r18, r10
    1fac:	3b 2d       	mov	r19, r11
    1fae:	4c 2d       	mov	r20, r12
    1fb0:	5d 2d       	mov	r21, r13
    1fb2:	6e 2d       	mov	r22, r14
    1fb4:	7f 2d       	mov	r23, r15
    1fb6:	80 2f       	mov	r24, r16
    1fb8:	91 2f       	mov	r25, r17
    1fba:	0f e0       	ldi	r16, 0x0F	; 15
    1fbc:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__ashrdi3>
    1fc0:	a2 2e       	mov	r10, r18
    1fc2:	b3 2e       	mov	r11, r19
    1fc4:	c4 2e       	mov	r12, r20
    1fc6:	d5 2e       	mov	r13, r21
    1fc8:	e6 2e       	mov	r14, r22
    1fca:	f7 2e       	mov	r15, r23
    1fcc:	08 2f       	mov	r16, r24
    1fce:	19 2f       	mov	r17, r25
    1fd0:	2a 2d       	mov	r18, r10
    1fd2:	3b 2d       	mov	r19, r11
    1fd4:	4c 2d       	mov	r20, r12
    1fd6:	5d 2d       	mov	r21, r13
    1fd8:	6e 2d       	mov	r22, r14
    1fda:	7f 2d       	mov	r23, r15
    1fdc:	80 2f       	mov	r24, r16
    1fde:	91 2f       	mov	r25, r17
    1fe0:	2e 8f       	std	Y+30, r18	; 0x1e
    1fe2:	3f 8f       	std	Y+31, r19	; 0x1f
    1fe4:	48 a3       	std	Y+32, r20	; 0x20
    1fe6:	59 a3       	std	Y+33, r21	; 0x21

	fprintf("%f\n", P);
    1fe8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fec:	29 2f       	mov	r18, r25
    1fee:	2f 93       	push	r18
    1ff0:	8f 93       	push	r24
    1ff2:	87 e2       	ldi	r24, 0x27	; 39
    1ff4:	90 e2       	ldi	r25, 0x20	; 32
    1ff6:	89 2f       	mov	r24, r25
    1ff8:	8f 93       	push	r24
    1ffa:	87 e2       	ldi	r24, 0x27	; 39
    1ffc:	90 e2       	ldi	r25, 0x20	; 32
    1ffe:	8f 93       	push	r24
    2000:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <fprintf>
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
	return P;
    200c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    200e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2010:	a8 a1       	ldd	r26, Y+32	; 0x20
    2012:	b9 a1       	ldd	r27, Y+33	; 0x21
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	ce 5b       	subi	r28, 0xBE	; 190
    201a:	df 4f       	sbci	r29, 0xFF	; 255
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	df 90       	pop	r13
    202e:	cf 90       	pop	r12
    2030:	bf 90       	pop	r11
    2032:	af 90       	pop	r10
    2034:	9f 90       	pop	r9
    2036:	8f 90       	pop	r8
    2038:	7f 90       	pop	r7
    203a:	6f 90       	pop	r6
    203c:	5f 90       	pop	r5
    203e:	4f 90       	pop	r4
    2040:	3f 90       	pop	r3
    2042:	2f 90       	pop	r2
    2044:	08 95       	ret

00002046 <__vector_119>:
	xbeeWrite(telemetryString);
}


ISR(READ_INTURUPT)
{
    2046:	1f 92       	push	r1
    2048:	0f 92       	push	r0
    204a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2056:	0f 92       	push	r0
    2058:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    205c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2060:	0f 92       	push	r0
    2062:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2066:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    206a:	0f 92       	push	r0
    206c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2070:	8f 93       	push	r24
    2072:	9f 93       	push	r25
    2074:	ef 93       	push	r30
    2076:	ff 93       	push	r31
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    2080:	80 ea       	ldi	r24, 0xA0	; 160
    2082:	9b e0       	ldi	r25, 0x0B	; 11
    2084:	fc 01       	movw	r30, r24
    2086:	80 81       	ld	r24, Z
    2088:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <XbeeRx>
    208c:	00 00       	nop
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	0f 90       	pop	r0
    209c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20a0:	0f 90       	pop	r0
    20a2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20a6:	0f 90       	pop	r0
    20a8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20ac:	0f 90       	pop	r0
    20ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <gps_read>:
void gps_write(char * data, size_t length)
{
	usart_serial_write_packet(gps_uart.Usart,data,length);
}
uint8_t gps_read()
{
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	return GPS_UART.DATA;
    20c0:	80 eb       	ldi	r24, 0xB0	; 176
    20c2:	9a e0       	ldi	r25, 0x0A	; 10
    20c4:	fc 01       	movw	r30, r24
    20c6:	80 81       	ld	r24, Z
}
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	08 95       	ret

000020ce <__vector_61>:
ISR(GPS_READ_INTERUPT)
{
    20ce:	1f 92       	push	r1
    20d0:	0f 92       	push	r0
    20d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20d6:	0f 92       	push	r0
    20d8:	11 24       	eor	r1, r1
    20da:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20de:	0f 92       	push	r0
    20e0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20e4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20e8:	0f 92       	push	r0
    20ea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20ee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20f2:	0f 92       	push	r0
    20f4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20fc:	0f 92       	push	r0
    20fe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	rxdata=gps_read();
    2122:	ca df       	rcall	.-108    	; 0x20b8 <gps_read>
    2124:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <rxdata>
	if(DEBUG_GPS) printf(rxdata);
    2128:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <rxdata>
    212c:	08 2e       	mov	r0, r24
    212e:	00 0c       	add	r0, r0
    2130:	99 0b       	sbc	r25, r25
    2132:	29 2f       	mov	r18, r25
    2134:	2f 93       	push	r18
    2136:	8f 93       	push	r24
    2138:	0e 94 55 36 	call	0x6caa	; 0x6caa <printf>
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
	is_gps_rx_triggered=1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <is_gps_rx_triggered>
}
    2146:	00 00       	nop
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    216a:	0f 90       	pop	r0
    216c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2170:	0f 90       	pop	r0
    2172:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2176:	0f 90       	pop	r0
    2178:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    217c:	0f 90       	pop	r0
    217e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	1f 92       	push	r1
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    2192:	8f e3       	ldi	r24, 0x3F	; 63
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	fc 01       	movw	r30, r24
    2198:	80 81       	ld	r24, Z
    219a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    219c:	f8 94       	cli
	return flags;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a0:	0f 90       	pop	r0
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	08 95       	ret

000021a8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	1f 92       	push	r1
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    21b4:	8f e3       	ldi	r24, 0x3F	; 63
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	29 81       	ldd	r18, Y+1	; 0x01
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
}
    21be:	00 00       	nop
    21c0:	0f 90       	pop	r0
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	08 95       	ret

000021c8 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	1f 92       	push	r1
    21ce:	1f 92       	push	r1
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    21d6:	d8 df       	rcall	.-80     	; 0x2188 <cpu_irq_save>
    21d8:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    21da:	80 e5       	ldi	r24, 0x50	; 80
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	20 e5       	ldi	r18, 0x50	; 80
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	30 81       	ld	r19, Z
    21e6:	2a 81       	ldd	r18, Y+2	; 0x02
    21e8:	23 2b       	or	r18, r19
    21ea:	fc 01       	movw	r30, r24
    21ec:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	db df       	rcall	.-74     	; 0x21a8 <cpu_irq_restore>
}
    21f2:	00 00       	nop
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	08 95       	ret

000021fe <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	1f 92       	push	r1
    2204:	1f 92       	push	r1
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    220c:	80 e5       	ldi	r24, 0x50	; 80
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	22 e0       	ldi	r18, 0x02	; 2
    2212:	fc 01       	movw	r30, r24
    2214:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    2216:	b8 df       	rcall	.-144    	; 0x2188 <cpu_irq_save>
    2218:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    221a:	80 e5       	ldi	r24, 0x50	; 80
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	20 e5       	ldi	r18, 0x50	; 80
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	f9 01       	movw	r30, r18
    2224:	30 81       	ld	r19, Z
    2226:	2a 81       	ldd	r18, Y+2	; 0x02
    2228:	23 2b       	or	r18, r19
    222a:	fc 01       	movw	r30, r24
    222c:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	bb df       	rcall	.-138    	; 0x21a8 <cpu_irq_restore>
}
    2232:	00 00       	nop
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	1f 92       	push	r1
    2244:	1f 92       	push	r1
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    224c:	9d df       	rcall	.-198    	; 0x2188 <cpu_irq_save>
    224e:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    2250:	80 e5       	ldi	r24, 0x50	; 80
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	20 e5       	ldi	r18, 0x50	; 80
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	f9 01       	movw	r30, r18
    225a:	20 81       	ld	r18, Z
    225c:	32 2f       	mov	r19, r18
    225e:	2a 81       	ldd	r18, Y+2	; 0x02
    2260:	20 95       	com	r18
    2262:	23 23       	and	r18, r19
    2264:	fc 01       	movw	r30, r24
    2266:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9e df       	rcall	.-196    	; 0x21a8 <cpu_irq_restore>
}
    226c:	00 00       	nop
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	1f 92       	push	r1
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 30       	cpi	r24, 0x08	; 8
    2288:	19 f0       	breq	.+6      	; 0x2290 <osc_enable+0x18>
		osc_enable_internal(id);
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9d df       	rcall	.-198    	; 0x21c8 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	b5 df       	rcall	.-150    	; 0x21fe <osc_enable_external>
	}
}
    2294:	00 00       	nop
    2296:	0f 90       	pop	r0
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	08 95       	ret

0000229e <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	1f 92       	push	r1
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    22aa:	80 e5       	ldi	r24, 0x50	; 80
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	fc 01       	movw	r30, r24
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	98 23       	and	r25, r24
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	99 23       	and	r25, r25
    22ba:	09 f4       	brne	.+2      	; 0x22be <osc_is_ready+0x20>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
}
    22be:	0f 90       	pop	r0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	1f 92       	push	r1
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    22d2:	00 00       	nop
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	e3 df       	rcall	.-58     	; 0x229e <osc_is_ready>
    22d8:	98 2f       	mov	r25, r24
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	89 27       	eor	r24, r25
    22de:	88 23       	and	r24, r24
    22e0:	c9 f7       	brne	.-14     	; 0x22d4 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    22e2:	00 00       	nop
    22e4:	0f 90       	pop	r0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	1f 92       	push	r1
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	88 2f       	mov	r24, r24
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	8a 30       	cpi	r24, 0x0A	; 10
    2300:	91 05       	cpc	r25, r1
    2302:	a1 f0       	breq	.+40     	; 0x232c <sysclk_rtcsrc_enable+0x40>
    2304:	8b 30       	cpi	r24, 0x0B	; 11
    2306:	91 05       	cpc	r25, r1
    2308:	34 f4       	brge	.+12     	; 0x2316 <sysclk_rtcsrc_enable+0x2a>
    230a:	82 30       	cpi	r24, 0x02	; 2
    230c:	91 05       	cpc	r25, r1
    230e:	71 f0       	breq	.+28     	; 0x232c <sysclk_rtcsrc_enable+0x40>
    2310:	04 97       	sbiw	r24, 0x04	; 4
    2312:	39 f0       	breq	.+14     	; 0x2322 <sysclk_rtcsrc_enable+0x36>
    2314:	10 c0       	rjmp	.+32     	; 0x2336 <sysclk_rtcsrc_enable+0x4a>
    2316:	8c 30       	cpi	r24, 0x0C	; 12
    2318:	91 05       	cpc	r25, r1
    231a:	19 f0       	breq	.+6      	; 0x2322 <sysclk_rtcsrc_enable+0x36>
    231c:	0e 97       	sbiw	r24, 0x0e	; 14
    231e:	31 f0       	breq	.+12     	; 0x232c <sysclk_rtcsrc_enable+0x40>
    2320:	0a c0       	rjmp	.+20     	; 0x2336 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    2322:	84 e0       	ldi	r24, 0x04	; 4
    2324:	a9 df       	rcall	.-174    	; 0x2278 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	ce df       	rcall	.-100    	; 0x22c6 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <sysclk_rtcsrc_enable+0x4a>
    232c:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    232e:	a4 df       	rcall	.-184    	; 0x2278 <osc_enable>
    2330:	88 e0       	ldi	r24, 0x08	; 8
    2332:	c9 df       	rcall	.-110    	; 0x22c6 <osc_wait_ready>
		break;
    2334:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    2336:	80 e4       	ldi	r24, 0x40	; 64
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	29 81       	ldd	r18, Y+1	; 0x01
    233c:	21 60       	ori	r18, 0x01	; 1
    233e:	fc 01       	movw	r30, r24
    2340:	23 83       	std	Z+3, r18	; 0x03
}
    2342:	00 00       	nop
    2344:	0f 90       	pop	r0
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	08 95       	ret

0000234c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	00 d0       	rcall	.+0      	; 0x2352 <sysclk_init+0x6>
    2352:	1f 92       	push	r1
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    2358:	80 e7       	ldi	r24, 0x70	; 112
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    2360:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    2362:	1b 82       	std	Y+3, r1	; 0x03
    2364:	0d c0       	rjmp	.+26     	; 0x2380 <sysclk_init+0x34>
		*(reg++) = 0xff;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	9c 01       	movw	r18, r24
    236c:	2f 5f       	subi	r18, 0xFF	; 255
    236e:	3f 4f       	sbci	r19, 0xFF	; 255
    2370:	29 83       	std	Y+1, r18	; 0x01
    2372:	3a 83       	std	Y+2, r19	; 0x02
    2374:	2f ef       	ldi	r18, 0xFF	; 255
    2376:	fc 01       	movw	r30, r24
    2378:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	87 30       	cpi	r24, 0x07	; 7
    2384:	80 f3       	brcs	.-32     	; 0x2366 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	77 df       	rcall	.-274    	; 0x2278 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	9c df       	rcall	.-200    	; 0x22c6 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    238e:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	80 e4       	ldi	r24, 0x40	; 64
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	70 d0       	rcall	.+224    	; 0x2478 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    239c:	11 f4       	brne	.+4      	; 0x23a2 <sysclk_init+0x56>
    239e:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    23a0:	4e df       	rcall	.-356    	; 0x223e <osc_disable>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	a3 df       	rcall	.-186    	; 0x22ec <sysclk_rtcsrc_enable>
#endif
}
    23a6:	24 96       	adiw	r28, 0x04	; 4
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	08 95       	ret

000023b2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <sysclk_enable_module+0x6>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    23c0:	e3 de       	rcall	.-570    	; 0x2188 <cpu_irq_save>
    23c2:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	80 59       	subi	r24, 0x90	; 144
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	2a 81       	ldd	r18, Y+2	; 0x02
    23d0:	22 2f       	mov	r18, r18
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	20 59       	subi	r18, 0x90	; 144
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	f9 01       	movw	r30, r18
    23da:	20 81       	ld	r18, Z
    23dc:	32 2f       	mov	r19, r18
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	20 95       	com	r18
    23e2:	23 23       	and	r18, r19
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	de de       	rcall	.-580    	; 0x21a8 <cpu_irq_restore>
}
    23ec:	00 00       	nop
    23ee:	23 96       	adiw	r28, 0x03	; 3
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	08 95       	ret

000023fa <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <_read+0x6>
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    2408:	20 91 bd 21 	lds	r18, 0x21BD	; 0x8021bd <ptr_get>
    240c:	30 91 be 21 	lds	r19, 0x21BE	; 0x8021be <ptr_get+0x1>
    2410:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <stdio_base>
    2414:	90 91 c2 21 	lds	r25, 0x21C2	; 0x8021c2 <stdio_base+0x1>
    2418:	ae 01       	movw	r20, r28
    241a:	4f 5f       	subi	r20, 0xFF	; 255
    241c:	5f 4f       	sbci	r21, 0xFF	; 255
    241e:	ba 01       	movw	r22, r20
    2420:	f9 01       	movw	r30, r18
    2422:	19 95       	eicall
	return c;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	08 2e       	mov	r0, r24
    2428:	00 0c       	add	r0, r0
    242a:	99 0b       	sbc	r25, r25
}
    242c:	23 96       	adiw	r28, 0x03	; 3
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	00 d0       	rcall	.+0      	; 0x243e <_write+0x6>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	6a 83       	std	Y+2, r22	; 0x02
    2446:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    2448:	20 91 bf 21 	lds	r18, 0x21BF	; 0x8021bf <ptr_put>
    244c:	30 91 c0 21 	lds	r19, 0x21C0	; 0x8021c0 <ptr_put+0x1>
    2450:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <stdio_base>
    2454:	90 91 c2 21 	lds	r25, 0x21C2	; 0x8021c2 <stdio_base+0x1>
    2458:	69 81       	ldd	r22, Y+1	; 0x01
    245a:	f9 01       	movw	r30, r18
    245c:	19 95       	eicall
    245e:	99 23       	and	r25, r25
    2460:	1c f4       	brge	.+6      	; 0x2468 <_write+0x30>
		return -1;
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	9f ef       	ldi	r25, 0xFF	; 255
    2466:	02 c0       	rjmp	.+4      	; 0x246c <_write+0x34>
	}
	return 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
}
    246c:	23 96       	adiw	r28, 0x03	; 3
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2478:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    247a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    247c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    247e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2480:	60 83       	st	Z, r22
	ret                             // Return to caller
    2482:	08 95       	ret

00002484 <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	1f 92       	push	r1
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	8f e3       	ldi	r24, 0x3F	; 63
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	fc 01       	movw	r30, r24
    2494:	80 81       	ld	r24, Z
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	f8 94       	cli
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	0f 90       	pop	r0
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <cpu_irq_restore>:
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	1f 92       	push	r1
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	8f e3       	ldi	r24, 0x3F	; 63
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	29 81       	ldd	r18, Y+1	; 0x01
    24b6:	fc 01       	movw	r30, r24
    24b8:	20 83       	st	Z, r18
    24ba:	00 00       	nop
    24bc:	0f 90       	pop	r0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	08 95       	ret

000024c4 <sleepmgr_lock_mode>:
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	1f 92       	push	r1
    24ca:	1f 92       	push	r1
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	89 54       	subi	r24, 0x49	; 73
    24da:	9e 4d       	sbci	r25, 0xDE	; 222
    24dc:	fc 01       	movw	r30, r24
    24de:	80 81       	ld	r24, Z
    24e0:	8f 3f       	cpi	r24, 0xFF	; 255
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <sleepmgr_lock_mode+0x22>
    24e4:	ff cf       	rjmp	.-2      	; 0x24e4 <sleepmgr_lock_mode+0x20>
    24e6:	ce df       	rcall	.-100    	; 0x2484 <cpu_irq_save>
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 01       	movw	r18, r24
    24f2:	29 54       	subi	r18, 0x49	; 73
    24f4:	3e 4d       	sbci	r19, 0xDE	; 222
    24f6:	f9 01       	movw	r30, r18
    24f8:	20 81       	ld	r18, Z
    24fa:	2f 5f       	subi	r18, 0xFF	; 255
    24fc:	89 54       	subi	r24, 0x49	; 73
    24fe:	9e 4d       	sbci	r25, 0xDE	; 222
    2500:	fc 01       	movw	r30, r24
    2502:	20 83       	st	Z, r18
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	ce df       	rcall	.-100    	; 0x24a4 <cpu_irq_restore>
    2508:	00 00       	nop
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	08 95       	ret

00002514 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	48 df       	rcall	.-368    	; 0x23b2 <sysclk_enable_module>
	RTC.PER = 0xffff;
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	94 e0       	ldi	r25, 0x04	; 4
    2526:	2f ef       	ldi	r18, 0xFF	; 255
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	fc 01       	movw	r30, r24
    252c:	22 87       	std	Z+10, r18	; 0x0a
    252e:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	94 e0       	ldi	r25, 0x04	; 4
    2534:	fc 01       	movw	r30, r24
    2536:	10 86       	std	Z+8, r1	; 0x08
    2538:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	c3 df       	rcall	.-122    	; 0x24c4 <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	94 e0       	ldi	r25, 0x04	; 4
    2542:	21 e0       	ldi	r18, 0x01	; 1
    2544:	fc 01       	movw	r30, r24
    2546:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	94 e0       	ldi	r25, 0x04	; 4
    254c:	27 e0       	ldi	r18, 0x07	; 7
    254e:	fc 01       	movw	r30, r24
    2550:	20 83       	st	Z, r18
}
    2552:	00 00       	nop
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    255a:	1f 92       	push	r1
    255c:	0f 92       	push	r0
    255e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2562:	0f 92       	push	r0
    2564:	11 24       	eor	r1, r1
    2566:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    256a:	0f 92       	push	r0
    256c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2570:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2574:	0f 92       	push	r0
    2576:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    2586:	80 91 c3 21 	lds	r24, 0x21C3	; 0x8021c3 <rtc_data>
    258a:	90 91 c4 21 	lds	r25, 0x21C4	; 0x8021c4 <rtc_data+0x1>
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	80 93 c3 21 	sts	0x21C3, r24	; 0x8021c3 <rtc_data>
    2594:	90 93 c4 21 	sts	0x21C4, r25	; 0x8021c4 <rtc_data+0x1>
}
    2598:	00 00       	nop
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	0f 90       	pop	r0
    25a4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25a8:	0f 90       	pop	r0
    25aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25ae:	0f 90       	pop	r0
    25b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    25b4:	0f 90       	pop	r0
    25b6:	1f 90       	pop	r1
    25b8:	18 95       	reti

000025ba <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    25ba:	1f 92       	push	r1
    25bc:	0f 92       	push	r0
    25be:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    25c2:	0f 92       	push	r0
    25c4:	11 24       	eor	r1, r1
    25c6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25ca:	0f 92       	push	r0
    25cc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25d0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25d4:	0f 92       	push	r0
    25d6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25da:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25de:	0f 92       	push	r0
    25e0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25e8:	0f 92       	push	r0
    25ea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25ee:	2f 93       	push	r18
    25f0:	3f 93       	push	r19
    25f2:	4f 93       	push	r20
    25f4:	5f 93       	push	r21
    25f6:	6f 93       	push	r22
    25f8:	7f 93       	push	r23
    25fa:	8f 93       	push	r24
    25fc:	9f 93       	push	r25
    25fe:	af 93       	push	r26
    2600:	bf 93       	push	r27
    2602:	ef 93       	push	r30
    2604:	ff 93       	push	r31
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	28 97       	sbiw	r28, 0x08	; 8
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    2614:	20 91 c3 21 	lds	r18, 0x21C3	; 0x8021c3 <rtc_data>
    2618:	30 91 c4 21 	lds	r19, 0x21C4	; 0x8021c4 <rtc_data+0x1>
    261c:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <rtc_data+0x2>
    2620:	90 91 c6 21 	lds	r25, 0x21C6	; 0x8021c6 <rtc_data+0x3>
    2624:	28 17       	cp	r18, r24
    2626:	39 07       	cpc	r19, r25
    2628:	08 f4       	brcc	.+2      	; 0x262c <__vector_11+0x72>
    262a:	63 c0       	rjmp	.+198    	; 0x26f2 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	94 e0       	ldi	r25, 0x04	; 4
    2630:	21 e0       	ldi	r18, 0x01	; 1
    2632:	fc 01       	movw	r30, r24
    2634:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    2636:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <rtc_data+0x6>
    263a:	90 91 ca 21 	lds	r25, 0x21CA	; 0x8021ca <rtc_data+0x7>
    263e:	89 2b       	or	r24, r25
    2640:	09 f4       	brne	.+2      	; 0x2644 <__vector_11+0x8a>
    2642:	57 c0       	rjmp	.+174    	; 0x26f2 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2644:	80 91 c3 21 	lds	r24, 0x21C3	; 0x8021c3 <rtc_data>
    2648:	90 91 c4 21 	lds	r25, 0x21C4	; 0x8021c4 <rtc_data+0x1>
    264c:	cc 01       	movw	r24, r24
    264e:	a0 e0       	ldi	r26, 0x00	; 0
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	ac 01       	movw	r20, r24
    2654:	33 27       	eor	r19, r19
    2656:	22 27       	eor	r18, r18
					| RTC.CNT;
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	94 e0       	ldi	r25, 0x04	; 4
    265c:	fc 01       	movw	r30, r24
    265e:	80 85       	ldd	r24, Z+8	; 0x08
    2660:	91 85       	ldd	r25, Z+9	; 0x09
    2662:	cc 01       	movw	r24, r24
    2664:	a0 e0       	ldi	r26, 0x00	; 0
    2666:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2668:	82 2b       	or	r24, r18
    266a:	93 2b       	or	r25, r19
    266c:	a4 2b       	or	r26, r20
    266e:	b5 2b       	or	r27, r21
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	ab 83       	std	Y+3, r26	; 0x03
    2676:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    2678:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <rtc_data+0x2>
    267c:	90 91 c6 21 	lds	r25, 0x21C6	; 0x8021c6 <rtc_data+0x3>
    2680:	cc 01       	movw	r24, r24
    2682:	a0 e0       	ldi	r26, 0x00	; 0
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ac 01       	movw	r20, r24
    2688:	33 27       	eor	r19, r19
    268a:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    268c:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <rtc_data+0x4>
    2690:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <rtc_data+0x5>
    2694:	cc 01       	movw	r24, r24
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    269a:	82 2b       	or	r24, r18
    269c:	93 2b       	or	r25, r19
    269e:	a4 2b       	or	r26, r20
    26a0:	b5 2b       	or	r27, r21
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	af 83       	std	Y+7, r26	; 0x07
    26a8:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    26aa:	2d 81       	ldd	r18, Y+5	; 0x05
    26ac:	3e 81       	ldd	r19, Y+6	; 0x06
    26ae:	4f 81       	ldd	r20, Y+7	; 0x07
    26b0:	58 85       	ldd	r21, Y+8	; 0x08
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	ab 81       	ldd	r26, Y+3	; 0x03
    26b8:	bc 81       	ldd	r27, Y+4	; 0x04
    26ba:	28 17       	cp	r18, r24
    26bc:	39 07       	cpc	r19, r25
    26be:	4a 07       	cpc	r20, r26
    26c0:	5b 07       	cpc	r21, r27
    26c2:	58 f0       	brcs	.+22     	; 0x26da <__vector_11+0x120>
				count = alarm + 1;
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	af 81       	ldd	r26, Y+7	; 0x07
    26ca:	b8 85       	ldd	r27, Y+8	; 0x08
    26cc:	01 96       	adiw	r24, 0x01	; 1
    26ce:	a1 1d       	adc	r26, r1
    26d0:	b1 1d       	adc	r27, r1
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	ab 83       	std	Y+3, r26	; 0x03
    26d8:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    26da:	20 91 c9 21 	lds	r18, 0x21C9	; 0x8021c9 <rtc_data+0x6>
    26de:	30 91 ca 21 	lds	r19, 0x21CA	; 0x8021ca <rtc_data+0x7>
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	ab 81       	ldd	r26, Y+3	; 0x03
    26e8:	bc 81       	ldd	r27, Y+4	; 0x04
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	f9 01       	movw	r30, r18
    26f0:	19 95       	eicall
		}
	}
}
    26f2:	00 00       	nop
    26f4:	28 96       	adiw	r28, 0x08	; 8
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	ff 91       	pop	r31
    2700:	ef 91       	pop	r30
    2702:	bf 91       	pop	r27
    2704:	af 91       	pop	r26
    2706:	9f 91       	pop	r25
    2708:	8f 91       	pop	r24
    270a:	7f 91       	pop	r23
    270c:	6f 91       	pop	r22
    270e:	5f 91       	pop	r21
    2710:	4f 91       	pop	r20
    2712:	3f 91       	pop	r19
    2714:	2f 91       	pop	r18
    2716:	0f 90       	pop	r0
    2718:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    271c:	0f 90       	pop	r0
    271e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2722:	0f 90       	pop	r0
    2724:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2728:	0f 90       	pop	r0
    272a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    272e:	0f 90       	pop	r0
    2730:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2734:	0f 90       	pop	r0
    2736:	1f 90       	pop	r1
    2738:	18 95       	reti

0000273a <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	60 97       	sbiw	r28, 0x10	; 16
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	8f 83       	std	Y+7, r24	; 0x07
    274e:	98 87       	std	Y+8, r25	; 0x08
    2750:	49 87       	std	Y+9, r20	; 0x09
    2752:	5a 87       	std	Y+10, r21	; 0x0a
    2754:	6b 87       	std	Y+11, r22	; 0x0b
    2756:	7c 87       	std	Y+12, r23	; 0x0c
    2758:	0d 87       	std	Y+13, r16	; 0x0d
    275a:	1e 87       	std	Y+14, r17	; 0x0e
    275c:	2f 87       	std	Y+15, r18	; 0x0f
    275e:	38 8b       	std	Y+16, r19	; 0x10

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    2760:	2d 85       	ldd	r18, Y+13	; 0x0d
    2762:	3e 85       	ldd	r19, Y+14	; 0x0e
    2764:	4f 85       	ldd	r20, Y+15	; 0x0f
    2766:	58 89       	ldd	r21, Y+16	; 0x10
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	ab 85       	ldd	r26, Y+11	; 0x0b
    276e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2770:	82 0f       	add	r24, r18
    2772:	93 1f       	adc	r25, r19
    2774:	a4 1f       	adc	r26, r20
    2776:	b5 1f       	adc	r27, r21
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	a1 09       	sbc	r26, r1
    277c:	b1 09       	sbc	r27, r1
    277e:	29 85       	ldd	r18, Y+9	; 0x09
    2780:	3a 85       	ldd	r19, Y+10	; 0x0a
    2782:	4b 85       	ldd	r20, Y+11	; 0x0b
    2784:	5c 85       	ldd	r21, Y+12	; 0x0c
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__udivmodsi4>
    278e:	da 01       	movw	r26, r20
    2790:	c9 01       	movw	r24, r18
    2792:	8a 83       	std	Y+2, r24	; 0x02
    2794:	9b 83       	std	Y+3, r25	; 0x03
    2796:	ac 83       	std	Y+4, r26	; 0x04
    2798:	bd 83       	std	Y+5, r27	; 0x05

	if (divisor > 128) {
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	9b 81       	ldd	r25, Y+3	; 0x03
    279e:	ac 81       	ldd	r26, Y+4	; 0x04
    27a0:	bd 81       	ldd	r27, Y+5	; 0x05
    27a2:	81 38       	cpi	r24, 0x81	; 129
    27a4:	91 05       	cpc	r25, r1
    27a6:	a1 05       	cpc	r26, r1
    27a8:	b1 05       	cpc	r27, r1
    27aa:	10 f0       	brcs	.+4      	; 0x27b0 <spi_xmega_set_baud_div+0x76>
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	35 c0       	rjmp	.+106    	; 0x281a <spi_xmega_set_baud_div+0xe0>

	/*
	 * We now know that the divisor is 128 or lower so move it into a 8-bit
	 * variable to make sure the following comparison is more optimized.
	 */
	divisor_8bit = divisor;
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    27b4:	8e 81       	ldd	r24, Y+6	; 0x06
    27b6:	81 34       	cpi	r24, 0x41	; 65
    27b8:	18 f0       	brcs	.+6      	; 0x27c0 <spi_xmega_set_baud_div+0x86>
		ctrl = SPI_PRESCALER_DIV128_gc;
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	1f c0       	rjmp	.+62     	; 0x27fe <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 32) {
    27c0:	8e 81       	ldd	r24, Y+6	; 0x06
    27c2:	81 32       	cpi	r24, 0x21	; 33
    27c4:	18 f0       	brcs	.+6      	; 0x27cc <spi_xmega_set_baud_div+0x92>
		ctrl = SPI_PRESCALER_DIV64_gc;
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	19 c0       	rjmp	.+50     	; 0x27fe <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 16) {
    27cc:	8e 81       	ldd	r24, Y+6	; 0x06
    27ce:	81 31       	cpi	r24, 0x11	; 17
    27d0:	18 f0       	brcs	.+6      	; 0x27d8 <spi_xmega_set_baud_div+0x9e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    27d2:	82 e8       	ldi	r24, 0x82	; 130
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	13 c0       	rjmp	.+38     	; 0x27fe <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 8) {
    27d8:	8e 81       	ldd	r24, Y+6	; 0x06
    27da:	89 30       	cpi	r24, 0x09	; 9
    27dc:	18 f0       	brcs	.+6      	; 0x27e4 <spi_xmega_set_baud_div+0xaa>
		ctrl = SPI_PRESCALER_DIV16_gc;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	0d c0       	rjmp	.+26     	; 0x27fe <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 4) {
    27e4:	8e 81       	ldd	r24, Y+6	; 0x06
    27e6:	85 30       	cpi	r24, 0x05	; 5
    27e8:	18 f0       	brcs	.+6      	; 0x27f0 <spi_xmega_set_baud_div+0xb6>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    27ea:	81 e8       	ldi	r24, 0x81	; 129
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	07 c0       	rjmp	.+14     	; 0x27fe <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 2) {
    27f0:	8e 81       	ldd	r24, Y+6	; 0x06
    27f2:	83 30       	cpi	r24, 0x03	; 3
    27f4:	10 f0       	brcs	.+4      	; 0x27fa <spi_xmega_set_baud_div+0xc0>
		ctrl = SPI_PRESCALER_DIV4_gc;
    27f6:	19 82       	std	Y+1, r1	; 0x01
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <spi_xmega_set_baud_div+0xc4>
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    27fa:	80 e8       	ldi	r24, 0x80	; 128
    27fc:	89 83       	std	Y+1, r24	; 0x01
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    27fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2800:	98 85       	ldd	r25, Y+8	; 0x08
    2802:	fc 01       	movw	r30, r24
    2804:	80 81       	ld	r24, Z
    2806:	98 2f       	mov	r25, r24
    2808:	9c 77       	andi	r25, 0x7C	; 124
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	89 2b       	or	r24, r25
    280e:	28 2f       	mov	r18, r24
    2810:	8f 81       	ldd	r24, Y+7	; 0x07
    2812:	98 85       	ldd	r25, Y+8	; 0x08
    2814:	fc 01       	movw	r30, r24
    2816:	20 83       	st	Z, r18

	return 1;
    2818:	81 e0       	ldi	r24, 0x01	; 1
}
    281a:	60 96       	adiw	r28, 0x10	; 16
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    283a:	0f 92       	push	r0
    283c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2840:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2844:	0f 92       	push	r0
    2846:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    284a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    284e:	0f 92       	push	r0
    2850:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2854:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2858:	0f 92       	push	r0
    285a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    285e:	2f 93       	push	r18
    2860:	3f 93       	push	r19
    2862:	4f 93       	push	r20
    2864:	5f 93       	push	r21
    2866:	6f 93       	push	r22
    2868:	7f 93       	push	r23
    286a:	8f 93       	push	r24
    286c:	9f 93       	push	r25
    286e:	af 93       	push	r26
    2870:	bf 93       	push	r27
    2872:	ef 93       	push	r30
    2874:	ff 93       	push	r31
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    287e:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <__data_end>
    2882:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <__data_end+0x1>
    2886:	89 2b       	or	r24, r25
    2888:	31 f0       	breq	.+12     	; 0x2896 <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    288a:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <__data_end>
    288e:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <__data_end+0x1>
    2892:	fc 01       	movw	r30, r24
    2894:	19 95       	eicall
	}
}
    2896:	00 00       	nop
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	ff 91       	pop	r31
    289e:	ef 91       	pop	r30
    28a0:	bf 91       	pop	r27
    28a2:	af 91       	pop	r26
    28a4:	9f 91       	pop	r25
    28a6:	8f 91       	pop	r24
    28a8:	7f 91       	pop	r23
    28aa:	6f 91       	pop	r22
    28ac:	5f 91       	pop	r21
    28ae:	4f 91       	pop	r20
    28b0:	3f 91       	pop	r19
    28b2:	2f 91       	pop	r18
    28b4:	0f 90       	pop	r0
    28b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    28ba:	0f 90       	pop	r0
    28bc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28c0:	0f 90       	pop	r0
    28c2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28c6:	0f 90       	pop	r0
    28c8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28cc:	0f 90       	pop	r0
    28ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28d2:	0f 90       	pop	r0
    28d4:	1f 90       	pop	r1
    28d6:	18 95       	reti

000028d8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    28d8:	1f 92       	push	r1
    28da:	0f 92       	push	r0
    28dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28e0:	0f 92       	push	r0
    28e2:	11 24       	eor	r1, r1
    28e4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28e8:	0f 92       	push	r0
    28ea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28ee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28f2:	0f 92       	push	r0
    28f4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28f8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28fc:	0f 92       	push	r0
    28fe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2902:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2906:	0f 92       	push	r0
    2908:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    290c:	2f 93       	push	r18
    290e:	3f 93       	push	r19
    2910:	4f 93       	push	r20
    2912:	5f 93       	push	r21
    2914:	6f 93       	push	r22
    2916:	7f 93       	push	r23
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
    291c:	af 93       	push	r26
    291e:	bf 93       	push	r27
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    292c:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcc0_err_callback>
    2930:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcc0_err_callback+0x1>
    2934:	89 2b       	or	r24, r25
    2936:	31 f0       	breq	.+12     	; 0x2944 <__vector_15+0x6c>
		tc_tcc0_err_callback();
    2938:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcc0_err_callback>
    293c:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcc0_err_callback+0x1>
    2940:	fc 01       	movw	r30, r24
    2942:	19 95       	eicall
	}
}
    2944:	00 00       	nop
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	ff 91       	pop	r31
    294c:	ef 91       	pop	r30
    294e:	bf 91       	pop	r27
    2950:	af 91       	pop	r26
    2952:	9f 91       	pop	r25
    2954:	8f 91       	pop	r24
    2956:	7f 91       	pop	r23
    2958:	6f 91       	pop	r22
    295a:	5f 91       	pop	r21
    295c:	4f 91       	pop	r20
    295e:	3f 91       	pop	r19
    2960:	2f 91       	pop	r18
    2962:	0f 90       	pop	r0
    2964:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2968:	0f 90       	pop	r0
    296a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    296e:	0f 90       	pop	r0
    2970:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2974:	0f 90       	pop	r0
    2976:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    297a:	0f 90       	pop	r0
    297c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2980:	0f 90       	pop	r0
    2982:	1f 90       	pop	r1
    2984:	18 95       	reti

00002986 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    2986:	1f 92       	push	r1
    2988:	0f 92       	push	r0
    298a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    298e:	0f 92       	push	r0
    2990:	11 24       	eor	r1, r1
    2992:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2996:	0f 92       	push	r0
    2998:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    299c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29a0:	0f 92       	push	r0
    29a2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29a6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29aa:	0f 92       	push	r0
    29ac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29b0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29b4:	0f 92       	push	r0
    29b6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29ba:	2f 93       	push	r18
    29bc:	3f 93       	push	r19
    29be:	4f 93       	push	r20
    29c0:	5f 93       	push	r21
    29c2:	6f 93       	push	r22
    29c4:	7f 93       	push	r23
    29c6:	8f 93       	push	r24
    29c8:	9f 93       	push	r25
    29ca:	af 93       	push	r26
    29cc:	bf 93       	push	r27
    29ce:	ef 93       	push	r30
    29d0:	ff 93       	push	r31
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    29da:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcc0_cca_callback>
    29de:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcc0_cca_callback+0x1>
    29e2:	89 2b       	or	r24, r25
    29e4:	31 f0       	breq	.+12     	; 0x29f2 <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    29e6:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcc0_cca_callback>
    29ea:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcc0_cca_callback+0x1>
    29ee:	fc 01       	movw	r30, r24
    29f0:	19 95       	eicall
	}
}
    29f2:	00 00       	nop
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	ff 91       	pop	r31
    29fa:	ef 91       	pop	r30
    29fc:	bf 91       	pop	r27
    29fe:	af 91       	pop	r26
    2a00:	9f 91       	pop	r25
    2a02:	8f 91       	pop	r24
    2a04:	7f 91       	pop	r23
    2a06:	6f 91       	pop	r22
    2a08:	5f 91       	pop	r21
    2a0a:	4f 91       	pop	r20
    2a0c:	3f 91       	pop	r19
    2a0e:	2f 91       	pop	r18
    2a10:	0f 90       	pop	r0
    2a12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a16:	0f 90       	pop	r0
    2a18:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a1c:	0f 90       	pop	r0
    2a1e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a22:	0f 90       	pop	r0
    2a24:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a28:	0f 90       	pop	r0
    2a2a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a2e:	0f 90       	pop	r0
    2a30:	1f 90       	pop	r1
    2a32:	18 95       	reti

00002a34 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    2a34:	1f 92       	push	r1
    2a36:	0f 92       	push	r0
    2a38:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a3c:	0f 92       	push	r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a44:	0f 92       	push	r0
    2a46:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a4a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a4e:	0f 92       	push	r0
    2a50:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a54:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a58:	0f 92       	push	r0
    2a5a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a62:	0f 92       	push	r0
    2a64:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a68:	2f 93       	push	r18
    2a6a:	3f 93       	push	r19
    2a6c:	4f 93       	push	r20
    2a6e:	5f 93       	push	r21
    2a70:	6f 93       	push	r22
    2a72:	7f 93       	push	r23
    2a74:	8f 93       	push	r24
    2a76:	9f 93       	push	r25
    2a78:	af 93       	push	r26
    2a7a:	bf 93       	push	r27
    2a7c:	ef 93       	push	r30
    2a7e:	ff 93       	push	r31
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    2a88:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcc0_ccb_callback>
    2a8c:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcc0_ccb_callback+0x1>
    2a90:	89 2b       	or	r24, r25
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    2a94:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcc0_ccb_callback>
    2a98:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcc0_ccb_callback+0x1>
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	19 95       	eicall
	}
}
    2aa0:	00 00       	nop
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	ff 91       	pop	r31
    2aa8:	ef 91       	pop	r30
    2aaa:	bf 91       	pop	r27
    2aac:	af 91       	pop	r26
    2aae:	9f 91       	pop	r25
    2ab0:	8f 91       	pop	r24
    2ab2:	7f 91       	pop	r23
    2ab4:	6f 91       	pop	r22
    2ab6:	5f 91       	pop	r21
    2ab8:	4f 91       	pop	r20
    2aba:	3f 91       	pop	r19
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ac4:	0f 90       	pop	r0
    2ac6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2aca:	0f 90       	pop	r0
    2acc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ad0:	0f 90       	pop	r0
    2ad2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ad6:	0f 90       	pop	r0
    2ad8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2adc:	0f 90       	pop	r0
    2ade:	1f 90       	pop	r1
    2ae0:	18 95       	reti

00002ae2 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    2ae2:	1f 92       	push	r1
    2ae4:	0f 92       	push	r0
    2ae6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2aea:	0f 92       	push	r0
    2aec:	11 24       	eor	r1, r1
    2aee:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2af2:	0f 92       	push	r0
    2af4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2af8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2afc:	0f 92       	push	r0
    2afe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b02:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b06:	0f 92       	push	r0
    2b08:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b0c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b10:	0f 92       	push	r0
    2b12:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b16:	2f 93       	push	r18
    2b18:	3f 93       	push	r19
    2b1a:	4f 93       	push	r20
    2b1c:	5f 93       	push	r21
    2b1e:	6f 93       	push	r22
    2b20:	7f 93       	push	r23
    2b22:	8f 93       	push	r24
    2b24:	9f 93       	push	r25
    2b26:	af 93       	push	r26
    2b28:	bf 93       	push	r27
    2b2a:	ef 93       	push	r30
    2b2c:	ff 93       	push	r31
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    2b36:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcc0_ccc_callback>
    2b3a:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcc0_ccc_callback+0x1>
    2b3e:	89 2b       	or	r24, r25
    2b40:	31 f0       	breq	.+12     	; 0x2b4e <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    2b42:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcc0_ccc_callback>
    2b46:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcc0_ccc_callback+0x1>
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	19 95       	eicall
	}
}
    2b4e:	00 00       	nop
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	ff 91       	pop	r31
    2b56:	ef 91       	pop	r30
    2b58:	bf 91       	pop	r27
    2b5a:	af 91       	pop	r26
    2b5c:	9f 91       	pop	r25
    2b5e:	8f 91       	pop	r24
    2b60:	7f 91       	pop	r23
    2b62:	6f 91       	pop	r22
    2b64:	5f 91       	pop	r21
    2b66:	4f 91       	pop	r20
    2b68:	3f 91       	pop	r19
    2b6a:	2f 91       	pop	r18
    2b6c:	0f 90       	pop	r0
    2b6e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b72:	0f 90       	pop	r0
    2b74:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b78:	0f 90       	pop	r0
    2b7a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b7e:	0f 90       	pop	r0
    2b80:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b84:	0f 90       	pop	r0
    2b86:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b8a:	0f 90       	pop	r0
    2b8c:	1f 90       	pop	r1
    2b8e:	18 95       	reti

00002b90 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    2b90:	1f 92       	push	r1
    2b92:	0f 92       	push	r0
    2b94:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ba0:	0f 92       	push	r0
    2ba2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ba6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2baa:	0f 92       	push	r0
    2bac:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bb0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bb4:	0f 92       	push	r0
    2bb6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bba:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bbe:	0f 92       	push	r0
    2bc0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bc4:	2f 93       	push	r18
    2bc6:	3f 93       	push	r19
    2bc8:	4f 93       	push	r20
    2bca:	5f 93       	push	r21
    2bcc:	6f 93       	push	r22
    2bce:	7f 93       	push	r23
    2bd0:	8f 93       	push	r24
    2bd2:	9f 93       	push	r25
    2bd4:	af 93       	push	r26
    2bd6:	bf 93       	push	r27
    2bd8:	ef 93       	push	r30
    2bda:	ff 93       	push	r31
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    2be4:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcc0_ccd_callback>
    2be8:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcc0_ccd_callback+0x1>
    2bec:	89 2b       	or	r24, r25
    2bee:	31 f0       	breq	.+12     	; 0x2bfc <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    2bf0:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcc0_ccd_callback>
    2bf4:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcc0_ccd_callback+0x1>
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	19 95       	eicall
	}
}
    2bfc:	00 00       	nop
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	bf 91       	pop	r27
    2c08:	af 91       	pop	r26
    2c0a:	9f 91       	pop	r25
    2c0c:	8f 91       	pop	r24
    2c0e:	7f 91       	pop	r23
    2c10:	6f 91       	pop	r22
    2c12:	5f 91       	pop	r21
    2c14:	4f 91       	pop	r20
    2c16:	3f 91       	pop	r19
    2c18:	2f 91       	pop	r18
    2c1a:	0f 90       	pop	r0
    2c1c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c20:	0f 90       	pop	r0
    2c22:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c26:	0f 90       	pop	r0
    2c28:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c2c:	0f 90       	pop	r0
    2c2e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c32:	0f 90       	pop	r0
    2c34:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c38:	0f 90       	pop	r0
    2c3a:	1f 90       	pop	r1
    2c3c:	18 95       	reti

00002c3e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    2c3e:	1f 92       	push	r1
    2c40:	0f 92       	push	r0
    2c42:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c46:	0f 92       	push	r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c4e:	0f 92       	push	r0
    2c50:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c54:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c58:	0f 92       	push	r0
    2c5a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c5e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c62:	0f 92       	push	r0
    2c64:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c68:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c6c:	0f 92       	push	r0
    2c6e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c72:	2f 93       	push	r18
    2c74:	3f 93       	push	r19
    2c76:	4f 93       	push	r20
    2c78:	5f 93       	push	r21
    2c7a:	6f 93       	push	r22
    2c7c:	7f 93       	push	r23
    2c7e:	8f 93       	push	r24
    2c80:	9f 93       	push	r25
    2c82:	af 93       	push	r26
    2c84:	bf 93       	push	r27
    2c86:	ef 93       	push	r30
    2c88:	ff 93       	push	r31
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    2c92:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcc1_ovf_callback>
    2c96:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcc1_ovf_callback+0x1>
    2c9a:	89 2b       	or	r24, r25
    2c9c:	31 f0       	breq	.+12     	; 0x2caa <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    2c9e:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcc1_ovf_callback>
    2ca2:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcc1_ovf_callback+0x1>
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	19 95       	eicall
	}
}
    2caa:	00 00       	nop
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	ff 91       	pop	r31
    2cb2:	ef 91       	pop	r30
    2cb4:	bf 91       	pop	r27
    2cb6:	af 91       	pop	r26
    2cb8:	9f 91       	pop	r25
    2cba:	8f 91       	pop	r24
    2cbc:	7f 91       	pop	r23
    2cbe:	6f 91       	pop	r22
    2cc0:	5f 91       	pop	r21
    2cc2:	4f 91       	pop	r20
    2cc4:	3f 91       	pop	r19
    2cc6:	2f 91       	pop	r18
    2cc8:	0f 90       	pop	r0
    2cca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2cce:	0f 90       	pop	r0
    2cd0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2cd4:	0f 90       	pop	r0
    2cd6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2cda:	0f 90       	pop	r0
    2cdc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ce0:	0f 90       	pop	r0
    2ce2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ce6:	0f 90       	pop	r0
    2ce8:	1f 90       	pop	r1
    2cea:	18 95       	reti

00002cec <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    2cec:	1f 92       	push	r1
    2cee:	0f 92       	push	r0
    2cf0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2cf4:	0f 92       	push	r0
    2cf6:	11 24       	eor	r1, r1
    2cf8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2cfc:	0f 92       	push	r0
    2cfe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d02:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d06:	0f 92       	push	r0
    2d08:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d0c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d10:	0f 92       	push	r0
    2d12:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d16:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d1a:	0f 92       	push	r0
    2d1c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d20:	2f 93       	push	r18
    2d22:	3f 93       	push	r19
    2d24:	4f 93       	push	r20
    2d26:	5f 93       	push	r21
    2d28:	6f 93       	push	r22
    2d2a:	7f 93       	push	r23
    2d2c:	8f 93       	push	r24
    2d2e:	9f 93       	push	r25
    2d30:	af 93       	push	r26
    2d32:	bf 93       	push	r27
    2d34:	ef 93       	push	r30
    2d36:	ff 93       	push	r31
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    2d40:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcc1_err_callback>
    2d44:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcc1_err_callback+0x1>
    2d48:	89 2b       	or	r24, r25
    2d4a:	31 f0       	breq	.+12     	; 0x2d58 <__vector_21+0x6c>
		tc_tcc1_err_callback();
    2d4c:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcc1_err_callback>
    2d50:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcc1_err_callback+0x1>
    2d54:	fc 01       	movw	r30, r24
    2d56:	19 95       	eicall
	}
}
    2d58:	00 00       	nop
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	ff 91       	pop	r31
    2d60:	ef 91       	pop	r30
    2d62:	bf 91       	pop	r27
    2d64:	af 91       	pop	r26
    2d66:	9f 91       	pop	r25
    2d68:	8f 91       	pop	r24
    2d6a:	7f 91       	pop	r23
    2d6c:	6f 91       	pop	r22
    2d6e:	5f 91       	pop	r21
    2d70:	4f 91       	pop	r20
    2d72:	3f 91       	pop	r19
    2d74:	2f 91       	pop	r18
    2d76:	0f 90       	pop	r0
    2d78:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d7c:	0f 90       	pop	r0
    2d7e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d82:	0f 90       	pop	r0
    2d84:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d88:	0f 90       	pop	r0
    2d8a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d8e:	0f 90       	pop	r0
    2d90:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d94:	0f 90       	pop	r0
    2d96:	1f 90       	pop	r1
    2d98:	18 95       	reti

00002d9a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    2d9a:	1f 92       	push	r1
    2d9c:	0f 92       	push	r0
    2d9e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2da2:	0f 92       	push	r0
    2da4:	11 24       	eor	r1, r1
    2da6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2daa:	0f 92       	push	r0
    2dac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2db0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2db4:	0f 92       	push	r0
    2db6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2dba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2dbe:	0f 92       	push	r0
    2dc0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2dc4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2dc8:	0f 92       	push	r0
    2dca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2dce:	2f 93       	push	r18
    2dd0:	3f 93       	push	r19
    2dd2:	4f 93       	push	r20
    2dd4:	5f 93       	push	r21
    2dd6:	6f 93       	push	r22
    2dd8:	7f 93       	push	r23
    2dda:	8f 93       	push	r24
    2ddc:	9f 93       	push	r25
    2dde:	af 93       	push	r26
    2de0:	bf 93       	push	r27
    2de2:	ef 93       	push	r30
    2de4:	ff 93       	push	r31
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    2dee:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcc1_cca_callback>
    2df2:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcc1_cca_callback+0x1>
    2df6:	89 2b       	or	r24, r25
    2df8:	31 f0       	breq	.+12     	; 0x2e06 <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    2dfa:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcc1_cca_callback>
    2dfe:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcc1_cca_callback+0x1>
    2e02:	fc 01       	movw	r30, r24
    2e04:	19 95       	eicall
	}
}
    2e06:	00 00       	nop
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	ff 91       	pop	r31
    2e0e:	ef 91       	pop	r30
    2e10:	bf 91       	pop	r27
    2e12:	af 91       	pop	r26
    2e14:	9f 91       	pop	r25
    2e16:	8f 91       	pop	r24
    2e18:	7f 91       	pop	r23
    2e1a:	6f 91       	pop	r22
    2e1c:	5f 91       	pop	r21
    2e1e:	4f 91       	pop	r20
    2e20:	3f 91       	pop	r19
    2e22:	2f 91       	pop	r18
    2e24:	0f 90       	pop	r0
    2e26:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e2a:	0f 90       	pop	r0
    2e2c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e30:	0f 90       	pop	r0
    2e32:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e36:	0f 90       	pop	r0
    2e38:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e3c:	0f 90       	pop	r0
    2e3e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e42:	0f 90       	pop	r0
    2e44:	1f 90       	pop	r1
    2e46:	18 95       	reti

00002e48 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    2e48:	1f 92       	push	r1
    2e4a:	0f 92       	push	r0
    2e4c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e58:	0f 92       	push	r0
    2e5a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e5e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e62:	0f 92       	push	r0
    2e64:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e68:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e6c:	0f 92       	push	r0
    2e6e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e72:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e76:	0f 92       	push	r0
    2e78:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e7c:	2f 93       	push	r18
    2e7e:	3f 93       	push	r19
    2e80:	4f 93       	push	r20
    2e82:	5f 93       	push	r21
    2e84:	6f 93       	push	r22
    2e86:	7f 93       	push	r23
    2e88:	8f 93       	push	r24
    2e8a:	9f 93       	push	r25
    2e8c:	af 93       	push	r26
    2e8e:	bf 93       	push	r27
    2e90:	ef 93       	push	r30
    2e92:	ff 93       	push	r31
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    2e9c:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcc1_ccb_callback>
    2ea0:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcc1_ccb_callback+0x1>
    2ea4:	89 2b       	or	r24, r25
    2ea6:	31 f0       	breq	.+12     	; 0x2eb4 <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    2ea8:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcc1_ccb_callback>
    2eac:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcc1_ccb_callback+0x1>
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	19 95       	eicall
	}
}
    2eb4:	00 00       	nop
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	ff 91       	pop	r31
    2ebc:	ef 91       	pop	r30
    2ebe:	bf 91       	pop	r27
    2ec0:	af 91       	pop	r26
    2ec2:	9f 91       	pop	r25
    2ec4:	8f 91       	pop	r24
    2ec6:	7f 91       	pop	r23
    2ec8:	6f 91       	pop	r22
    2eca:	5f 91       	pop	r21
    2ecc:	4f 91       	pop	r20
    2ece:	3f 91       	pop	r19
    2ed0:	2f 91       	pop	r18
    2ed2:	0f 90       	pop	r0
    2ed4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ed8:	0f 90       	pop	r0
    2eda:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ede:	0f 90       	pop	r0
    2ee0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ee4:	0f 90       	pop	r0
    2ee6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2eea:	0f 90       	pop	r0
    2eec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ef0:	0f 90       	pop	r0
    2ef2:	1f 90       	pop	r1
    2ef4:	18 95       	reti

00002ef6 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    2ef6:	1f 92       	push	r1
    2ef8:	0f 92       	push	r0
    2efa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2efe:	0f 92       	push	r0
    2f00:	11 24       	eor	r1, r1
    2f02:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f06:	0f 92       	push	r0
    2f08:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f0c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f10:	0f 92       	push	r0
    2f12:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f16:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f1a:	0f 92       	push	r0
    2f1c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f20:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f24:	0f 92       	push	r0
    2f26:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f2a:	2f 93       	push	r18
    2f2c:	3f 93       	push	r19
    2f2e:	4f 93       	push	r20
    2f30:	5f 93       	push	r21
    2f32:	6f 93       	push	r22
    2f34:	7f 93       	push	r23
    2f36:	8f 93       	push	r24
    2f38:	9f 93       	push	r25
    2f3a:	af 93       	push	r26
    2f3c:	bf 93       	push	r27
    2f3e:	ef 93       	push	r30
    2f40:	ff 93       	push	r31
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    2f4a:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcd0_ovf_callback>
    2f4e:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcd0_ovf_callback+0x1>
    2f52:	89 2b       	or	r24, r25
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    2f56:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcd0_ovf_callback>
    2f5a:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcd0_ovf_callback+0x1>
    2f5e:	fc 01       	movw	r30, r24
    2f60:	19 95       	eicall
	}
}
    2f62:	00 00       	nop
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	ff 91       	pop	r31
    2f6a:	ef 91       	pop	r30
    2f6c:	bf 91       	pop	r27
    2f6e:	af 91       	pop	r26
    2f70:	9f 91       	pop	r25
    2f72:	8f 91       	pop	r24
    2f74:	7f 91       	pop	r23
    2f76:	6f 91       	pop	r22
    2f78:	5f 91       	pop	r21
    2f7a:	4f 91       	pop	r20
    2f7c:	3f 91       	pop	r19
    2f7e:	2f 91       	pop	r18
    2f80:	0f 90       	pop	r0
    2f82:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f86:	0f 90       	pop	r0
    2f88:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f8c:	0f 90       	pop	r0
    2f8e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f92:	0f 90       	pop	r0
    2f94:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f98:	0f 90       	pop	r0
    2f9a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f9e:	0f 90       	pop	r0
    2fa0:	1f 90       	pop	r1
    2fa2:	18 95       	reti

00002fa4 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    2fa4:	1f 92       	push	r1
    2fa6:	0f 92       	push	r0
    2fa8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fac:	0f 92       	push	r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fb4:	0f 92       	push	r0
    2fb6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fba:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fbe:	0f 92       	push	r0
    2fc0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fc4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fc8:	0f 92       	push	r0
    2fca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fd2:	0f 92       	push	r0
    2fd4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fd8:	2f 93       	push	r18
    2fda:	3f 93       	push	r19
    2fdc:	4f 93       	push	r20
    2fde:	5f 93       	push	r21
    2fe0:	6f 93       	push	r22
    2fe2:	7f 93       	push	r23
    2fe4:	8f 93       	push	r24
    2fe6:	9f 93       	push	r25
    2fe8:	af 93       	push	r26
    2fea:	bf 93       	push	r27
    2fec:	ef 93       	push	r30
    2fee:	ff 93       	push	r31
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    2ff8:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcd0_err_callback>
    2ffc:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcd0_err_callback+0x1>
    3000:	89 2b       	or	r24, r25
    3002:	31 f0       	breq	.+12     	; 0x3010 <__vector_78+0x6c>
		tc_tcd0_err_callback();
    3004:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcd0_err_callback>
    3008:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcd0_err_callback+0x1>
    300c:	fc 01       	movw	r30, r24
    300e:	19 95       	eicall
	}
}
    3010:	00 00       	nop
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	ff 91       	pop	r31
    3018:	ef 91       	pop	r30
    301a:	bf 91       	pop	r27
    301c:	af 91       	pop	r26
    301e:	9f 91       	pop	r25
    3020:	8f 91       	pop	r24
    3022:	7f 91       	pop	r23
    3024:	6f 91       	pop	r22
    3026:	5f 91       	pop	r21
    3028:	4f 91       	pop	r20
    302a:	3f 91       	pop	r19
    302c:	2f 91       	pop	r18
    302e:	0f 90       	pop	r0
    3030:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3034:	0f 90       	pop	r0
    3036:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    303a:	0f 90       	pop	r0
    303c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3040:	0f 90       	pop	r0
    3042:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3046:	0f 90       	pop	r0
    3048:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    304c:	0f 90       	pop	r0
    304e:	1f 90       	pop	r1
    3050:	18 95       	reti

00003052 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    3052:	1f 92       	push	r1
    3054:	0f 92       	push	r0
    3056:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    305a:	0f 92       	push	r0
    305c:	11 24       	eor	r1, r1
    305e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3062:	0f 92       	push	r0
    3064:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3068:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    306c:	0f 92       	push	r0
    306e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3072:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3076:	0f 92       	push	r0
    3078:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    307c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3080:	0f 92       	push	r0
    3082:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3086:	2f 93       	push	r18
    3088:	3f 93       	push	r19
    308a:	4f 93       	push	r20
    308c:	5f 93       	push	r21
    308e:	6f 93       	push	r22
    3090:	7f 93       	push	r23
    3092:	8f 93       	push	r24
    3094:	9f 93       	push	r25
    3096:	af 93       	push	r26
    3098:	bf 93       	push	r27
    309a:	ef 93       	push	r30
    309c:	ff 93       	push	r31
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    30a6:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcd0_cca_callback>
    30aa:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcd0_cca_callback+0x1>
    30ae:	89 2b       	or	r24, r25
    30b0:	31 f0       	breq	.+12     	; 0x30be <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    30b2:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcd0_cca_callback>
    30b6:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcd0_cca_callback+0x1>
    30ba:	fc 01       	movw	r30, r24
    30bc:	19 95       	eicall
	}
}
    30be:	00 00       	nop
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	ff 91       	pop	r31
    30c6:	ef 91       	pop	r30
    30c8:	bf 91       	pop	r27
    30ca:	af 91       	pop	r26
    30cc:	9f 91       	pop	r25
    30ce:	8f 91       	pop	r24
    30d0:	7f 91       	pop	r23
    30d2:	6f 91       	pop	r22
    30d4:	5f 91       	pop	r21
    30d6:	4f 91       	pop	r20
    30d8:	3f 91       	pop	r19
    30da:	2f 91       	pop	r18
    30dc:	0f 90       	pop	r0
    30de:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    30e2:	0f 90       	pop	r0
    30e4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    30e8:	0f 90       	pop	r0
    30ea:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    30ee:	0f 90       	pop	r0
    30f0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    30f4:	0f 90       	pop	r0
    30f6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    30fa:	0f 90       	pop	r0
    30fc:	1f 90       	pop	r1
    30fe:	18 95       	reti

00003100 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    3100:	1f 92       	push	r1
    3102:	0f 92       	push	r0
    3104:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3108:	0f 92       	push	r0
    310a:	11 24       	eor	r1, r1
    310c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3110:	0f 92       	push	r0
    3112:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3116:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    311a:	0f 92       	push	r0
    311c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3120:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3124:	0f 92       	push	r0
    3126:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    312a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    312e:	0f 92       	push	r0
    3130:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3134:	2f 93       	push	r18
    3136:	3f 93       	push	r19
    3138:	4f 93       	push	r20
    313a:	5f 93       	push	r21
    313c:	6f 93       	push	r22
    313e:	7f 93       	push	r23
    3140:	8f 93       	push	r24
    3142:	9f 93       	push	r25
    3144:	af 93       	push	r26
    3146:	bf 93       	push	r27
    3148:	ef 93       	push	r30
    314a:	ff 93       	push	r31
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    3154:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcd0_ccb_callback>
    3158:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcd0_ccb_callback+0x1>
    315c:	89 2b       	or	r24, r25
    315e:	31 f0       	breq	.+12     	; 0x316c <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    3160:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcd0_ccb_callback>
    3164:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcd0_ccb_callback+0x1>
    3168:	fc 01       	movw	r30, r24
    316a:	19 95       	eicall
	}
}
    316c:	00 00       	nop
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	ff 91       	pop	r31
    3174:	ef 91       	pop	r30
    3176:	bf 91       	pop	r27
    3178:	af 91       	pop	r26
    317a:	9f 91       	pop	r25
    317c:	8f 91       	pop	r24
    317e:	7f 91       	pop	r23
    3180:	6f 91       	pop	r22
    3182:	5f 91       	pop	r21
    3184:	4f 91       	pop	r20
    3186:	3f 91       	pop	r19
    3188:	2f 91       	pop	r18
    318a:	0f 90       	pop	r0
    318c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3190:	0f 90       	pop	r0
    3192:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3196:	0f 90       	pop	r0
    3198:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    319c:	0f 90       	pop	r0
    319e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31a2:	0f 90       	pop	r0
    31a4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31a8:	0f 90       	pop	r0
    31aa:	1f 90       	pop	r1
    31ac:	18 95       	reti

000031ae <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    31ae:	1f 92       	push	r1
    31b0:	0f 92       	push	r0
    31b2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31b6:	0f 92       	push	r0
    31b8:	11 24       	eor	r1, r1
    31ba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31be:	0f 92       	push	r0
    31c0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31c4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31c8:	0f 92       	push	r0
    31ca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31ce:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31d2:	0f 92       	push	r0
    31d4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31d8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31dc:	0f 92       	push	r0
    31de:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31e2:	2f 93       	push	r18
    31e4:	3f 93       	push	r19
    31e6:	4f 93       	push	r20
    31e8:	5f 93       	push	r21
    31ea:	6f 93       	push	r22
    31ec:	7f 93       	push	r23
    31ee:	8f 93       	push	r24
    31f0:	9f 93       	push	r25
    31f2:	af 93       	push	r26
    31f4:	bf 93       	push	r27
    31f6:	ef 93       	push	r30
    31f8:	ff 93       	push	r31
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    3202:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcd0_ccc_callback>
    3206:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcd0_ccc_callback+0x1>
    320a:	89 2b       	or	r24, r25
    320c:	31 f0       	breq	.+12     	; 0x321a <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    320e:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcd0_ccc_callback>
    3212:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcd0_ccc_callback+0x1>
    3216:	fc 01       	movw	r30, r24
    3218:	19 95       	eicall
	}
}
    321a:	00 00       	nop
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	ff 91       	pop	r31
    3222:	ef 91       	pop	r30
    3224:	bf 91       	pop	r27
    3226:	af 91       	pop	r26
    3228:	9f 91       	pop	r25
    322a:	8f 91       	pop	r24
    322c:	7f 91       	pop	r23
    322e:	6f 91       	pop	r22
    3230:	5f 91       	pop	r21
    3232:	4f 91       	pop	r20
    3234:	3f 91       	pop	r19
    3236:	2f 91       	pop	r18
    3238:	0f 90       	pop	r0
    323a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    323e:	0f 90       	pop	r0
    3240:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3244:	0f 90       	pop	r0
    3246:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    324a:	0f 90       	pop	r0
    324c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3250:	0f 90       	pop	r0
    3252:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3256:	0f 90       	pop	r0
    3258:	1f 90       	pop	r1
    325a:	18 95       	reti

0000325c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    325c:	1f 92       	push	r1
    325e:	0f 92       	push	r0
    3260:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3264:	0f 92       	push	r0
    3266:	11 24       	eor	r1, r1
    3268:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    326c:	0f 92       	push	r0
    326e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3272:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3276:	0f 92       	push	r0
    3278:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    327c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3280:	0f 92       	push	r0
    3282:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3286:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    328a:	0f 92       	push	r0
    328c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3290:	2f 93       	push	r18
    3292:	3f 93       	push	r19
    3294:	4f 93       	push	r20
    3296:	5f 93       	push	r21
    3298:	6f 93       	push	r22
    329a:	7f 93       	push	r23
    329c:	8f 93       	push	r24
    329e:	9f 93       	push	r25
    32a0:	af 93       	push	r26
    32a2:	bf 93       	push	r27
    32a4:	ef 93       	push	r30
    32a6:	ff 93       	push	r31
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    32b0:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tcd0_ccd_callback>
    32b4:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tcd0_ccd_callback+0x1>
    32b8:	89 2b       	or	r24, r25
    32ba:	31 f0       	breq	.+12     	; 0x32c8 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    32bc:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tcd0_ccd_callback>
    32c0:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tcd0_ccd_callback+0x1>
    32c4:	fc 01       	movw	r30, r24
    32c6:	19 95       	eicall
	}
}
    32c8:	00 00       	nop
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	ff 91       	pop	r31
    32d0:	ef 91       	pop	r30
    32d2:	bf 91       	pop	r27
    32d4:	af 91       	pop	r26
    32d6:	9f 91       	pop	r25
    32d8:	8f 91       	pop	r24
    32da:	7f 91       	pop	r23
    32dc:	6f 91       	pop	r22
    32de:	5f 91       	pop	r21
    32e0:	4f 91       	pop	r20
    32e2:	3f 91       	pop	r19
    32e4:	2f 91       	pop	r18
    32e6:	0f 90       	pop	r0
    32e8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    32ec:	0f 90       	pop	r0
    32ee:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    32f2:	0f 90       	pop	r0
    32f4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    32f8:	0f 90       	pop	r0
    32fa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    32fe:	0f 90       	pop	r0
    3300:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3304:	0f 90       	pop	r0
    3306:	1f 90       	pop	r1
    3308:	18 95       	reti

0000330a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    330a:	1f 92       	push	r1
    330c:	0f 92       	push	r0
    330e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3312:	0f 92       	push	r0
    3314:	11 24       	eor	r1, r1
    3316:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    331a:	0f 92       	push	r0
    331c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3320:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3324:	0f 92       	push	r0
    3326:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    332a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    332e:	0f 92       	push	r0
    3330:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3334:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3338:	0f 92       	push	r0
    333a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    333e:	2f 93       	push	r18
    3340:	3f 93       	push	r19
    3342:	4f 93       	push	r20
    3344:	5f 93       	push	r21
    3346:	6f 93       	push	r22
    3348:	7f 93       	push	r23
    334a:	8f 93       	push	r24
    334c:	9f 93       	push	r25
    334e:	af 93       	push	r26
    3350:	bf 93       	push	r27
    3352:	ef 93       	push	r30
    3354:	ff 93       	push	r31
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    335e:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tcd1_ovf_callback>
    3362:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tcd1_ovf_callback+0x1>
    3366:	89 2b       	or	r24, r25
    3368:	31 f0       	breq	.+12     	; 0x3376 <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    336a:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tcd1_ovf_callback>
    336e:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tcd1_ovf_callback+0x1>
    3372:	fc 01       	movw	r30, r24
    3374:	19 95       	eicall
	}
}
    3376:	00 00       	nop
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	ff 91       	pop	r31
    337e:	ef 91       	pop	r30
    3380:	bf 91       	pop	r27
    3382:	af 91       	pop	r26
    3384:	9f 91       	pop	r25
    3386:	8f 91       	pop	r24
    3388:	7f 91       	pop	r23
    338a:	6f 91       	pop	r22
    338c:	5f 91       	pop	r21
    338e:	4f 91       	pop	r20
    3390:	3f 91       	pop	r19
    3392:	2f 91       	pop	r18
    3394:	0f 90       	pop	r0
    3396:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    339a:	0f 90       	pop	r0
    339c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33a0:	0f 90       	pop	r0
    33a2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33a6:	0f 90       	pop	r0
    33a8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33ac:	0f 90       	pop	r0
    33ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33b2:	0f 90       	pop	r0
    33b4:	1f 90       	pop	r1
    33b6:	18 95       	reti

000033b8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    33b8:	1f 92       	push	r1
    33ba:	0f 92       	push	r0
    33bc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33c0:	0f 92       	push	r0
    33c2:	11 24       	eor	r1, r1
    33c4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33c8:	0f 92       	push	r0
    33ca:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33ce:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33d2:	0f 92       	push	r0
    33d4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33d8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33dc:	0f 92       	push	r0
    33de:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33e6:	0f 92       	push	r0
    33e8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33ec:	2f 93       	push	r18
    33ee:	3f 93       	push	r19
    33f0:	4f 93       	push	r20
    33f2:	5f 93       	push	r21
    33f4:	6f 93       	push	r22
    33f6:	7f 93       	push	r23
    33f8:	8f 93       	push	r24
    33fa:	9f 93       	push	r25
    33fc:	af 93       	push	r26
    33fe:	bf 93       	push	r27
    3400:	ef 93       	push	r30
    3402:	ff 93       	push	r31
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    340c:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tcd1_err_callback>
    3410:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tcd1_err_callback+0x1>
    3414:	89 2b       	or	r24, r25
    3416:	31 f0       	breq	.+12     	; 0x3424 <__vector_84+0x6c>
		tc_tcd1_err_callback();
    3418:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tcd1_err_callback>
    341c:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tcd1_err_callback+0x1>
    3420:	fc 01       	movw	r30, r24
    3422:	19 95       	eicall
	}
}
    3424:	00 00       	nop
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	ff 91       	pop	r31
    342c:	ef 91       	pop	r30
    342e:	bf 91       	pop	r27
    3430:	af 91       	pop	r26
    3432:	9f 91       	pop	r25
    3434:	8f 91       	pop	r24
    3436:	7f 91       	pop	r23
    3438:	6f 91       	pop	r22
    343a:	5f 91       	pop	r21
    343c:	4f 91       	pop	r20
    343e:	3f 91       	pop	r19
    3440:	2f 91       	pop	r18
    3442:	0f 90       	pop	r0
    3444:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3448:	0f 90       	pop	r0
    344a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    344e:	0f 90       	pop	r0
    3450:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3454:	0f 90       	pop	r0
    3456:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    345a:	0f 90       	pop	r0
    345c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3460:	0f 90       	pop	r0
    3462:	1f 90       	pop	r1
    3464:	18 95       	reti

00003466 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    3466:	1f 92       	push	r1
    3468:	0f 92       	push	r0
    346a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    346e:	0f 92       	push	r0
    3470:	11 24       	eor	r1, r1
    3472:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3476:	0f 92       	push	r0
    3478:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    347c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3480:	0f 92       	push	r0
    3482:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3486:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    348a:	0f 92       	push	r0
    348c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3490:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3494:	0f 92       	push	r0
    3496:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    349a:	2f 93       	push	r18
    349c:	3f 93       	push	r19
    349e:	4f 93       	push	r20
    34a0:	5f 93       	push	r21
    34a2:	6f 93       	push	r22
    34a4:	7f 93       	push	r23
    34a6:	8f 93       	push	r24
    34a8:	9f 93       	push	r25
    34aa:	af 93       	push	r26
    34ac:	bf 93       	push	r27
    34ae:	ef 93       	push	r30
    34b0:	ff 93       	push	r31
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    34ba:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tcd1_cca_callback>
    34be:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tcd1_cca_callback+0x1>
    34c2:	89 2b       	or	r24, r25
    34c4:	31 f0       	breq	.+12     	; 0x34d2 <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    34c6:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tcd1_cca_callback>
    34ca:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tcd1_cca_callback+0x1>
    34ce:	fc 01       	movw	r30, r24
    34d0:	19 95       	eicall
	}
}
    34d2:	00 00       	nop
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	ff 91       	pop	r31
    34da:	ef 91       	pop	r30
    34dc:	bf 91       	pop	r27
    34de:	af 91       	pop	r26
    34e0:	9f 91       	pop	r25
    34e2:	8f 91       	pop	r24
    34e4:	7f 91       	pop	r23
    34e6:	6f 91       	pop	r22
    34e8:	5f 91       	pop	r21
    34ea:	4f 91       	pop	r20
    34ec:	3f 91       	pop	r19
    34ee:	2f 91       	pop	r18
    34f0:	0f 90       	pop	r0
    34f2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34f6:	0f 90       	pop	r0
    34f8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34fc:	0f 90       	pop	r0
    34fe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3502:	0f 90       	pop	r0
    3504:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3508:	0f 90       	pop	r0
    350a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    350e:	0f 90       	pop	r0
    3510:	1f 90       	pop	r1
    3512:	18 95       	reti

00003514 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    3514:	1f 92       	push	r1
    3516:	0f 92       	push	r0
    3518:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    351c:	0f 92       	push	r0
    351e:	11 24       	eor	r1, r1
    3520:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3524:	0f 92       	push	r0
    3526:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    352a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    352e:	0f 92       	push	r0
    3530:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3534:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3538:	0f 92       	push	r0
    353a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    353e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3542:	0f 92       	push	r0
    3544:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3548:	2f 93       	push	r18
    354a:	3f 93       	push	r19
    354c:	4f 93       	push	r20
    354e:	5f 93       	push	r21
    3550:	6f 93       	push	r22
    3552:	7f 93       	push	r23
    3554:	8f 93       	push	r24
    3556:	9f 93       	push	r25
    3558:	af 93       	push	r26
    355a:	bf 93       	push	r27
    355c:	ef 93       	push	r30
    355e:	ff 93       	push	r31
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    3568:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tcd1_ccb_callback>
    356c:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tcd1_ccb_callback+0x1>
    3570:	89 2b       	or	r24, r25
    3572:	31 f0       	breq	.+12     	; 0x3580 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    3574:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tcd1_ccb_callback>
    3578:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tcd1_ccb_callback+0x1>
    357c:	fc 01       	movw	r30, r24
    357e:	19 95       	eicall
	}
}
    3580:	00 00       	nop
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	ff 91       	pop	r31
    3588:	ef 91       	pop	r30
    358a:	bf 91       	pop	r27
    358c:	af 91       	pop	r26
    358e:	9f 91       	pop	r25
    3590:	8f 91       	pop	r24
    3592:	7f 91       	pop	r23
    3594:	6f 91       	pop	r22
    3596:	5f 91       	pop	r21
    3598:	4f 91       	pop	r20
    359a:	3f 91       	pop	r19
    359c:	2f 91       	pop	r18
    359e:	0f 90       	pop	r0
    35a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    35a4:	0f 90       	pop	r0
    35a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35aa:	0f 90       	pop	r0
    35ac:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35b0:	0f 90       	pop	r0
    35b2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35b6:	0f 90       	pop	r0
    35b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    35bc:	0f 90       	pop	r0
    35be:	1f 90       	pop	r1
    35c0:	18 95       	reti

000035c2 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    35c2:	1f 92       	push	r1
    35c4:	0f 92       	push	r0
    35c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    35ca:	0f 92       	push	r0
    35cc:	11 24       	eor	r1, r1
    35ce:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35d2:	0f 92       	push	r0
    35d4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35d8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35dc:	0f 92       	push	r0
    35de:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35e2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35e6:	0f 92       	push	r0
    35e8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35ec:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    35f0:	0f 92       	push	r0
    35f2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    35f6:	2f 93       	push	r18
    35f8:	3f 93       	push	r19
    35fa:	4f 93       	push	r20
    35fc:	5f 93       	push	r21
    35fe:	6f 93       	push	r22
    3600:	7f 93       	push	r23
    3602:	8f 93       	push	r24
    3604:	9f 93       	push	r25
    3606:	af 93       	push	r26
    3608:	bf 93       	push	r27
    360a:	ef 93       	push	r30
    360c:	ff 93       	push	r31
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    3616:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tce0_ovf_callback>
    361a:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tce0_ovf_callback+0x1>
    361e:	89 2b       	or	r24, r25
    3620:	31 f0       	breq	.+12     	; 0x362e <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    3622:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tce0_ovf_callback>
    3626:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tce0_ovf_callback+0x1>
    362a:	fc 01       	movw	r30, r24
    362c:	19 95       	eicall
	}
}
    362e:	00 00       	nop
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	ff 91       	pop	r31
    3636:	ef 91       	pop	r30
    3638:	bf 91       	pop	r27
    363a:	af 91       	pop	r26
    363c:	9f 91       	pop	r25
    363e:	8f 91       	pop	r24
    3640:	7f 91       	pop	r23
    3642:	6f 91       	pop	r22
    3644:	5f 91       	pop	r21
    3646:	4f 91       	pop	r20
    3648:	3f 91       	pop	r19
    364a:	2f 91       	pop	r18
    364c:	0f 90       	pop	r0
    364e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3652:	0f 90       	pop	r0
    3654:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3658:	0f 90       	pop	r0
    365a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    365e:	0f 90       	pop	r0
    3660:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3664:	0f 90       	pop	r0
    3666:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    366a:	0f 90       	pop	r0
    366c:	1f 90       	pop	r1
    366e:	18 95       	reti

00003670 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    3670:	1f 92       	push	r1
    3672:	0f 92       	push	r0
    3674:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3678:	0f 92       	push	r0
    367a:	11 24       	eor	r1, r1
    367c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3680:	0f 92       	push	r0
    3682:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3686:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    368a:	0f 92       	push	r0
    368c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3690:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3694:	0f 92       	push	r0
    3696:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    369a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    369e:	0f 92       	push	r0
    36a0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    36a4:	2f 93       	push	r18
    36a6:	3f 93       	push	r19
    36a8:	4f 93       	push	r20
    36aa:	5f 93       	push	r21
    36ac:	6f 93       	push	r22
    36ae:	7f 93       	push	r23
    36b0:	8f 93       	push	r24
    36b2:	9f 93       	push	r25
    36b4:	af 93       	push	r26
    36b6:	bf 93       	push	r27
    36b8:	ef 93       	push	r30
    36ba:	ff 93       	push	r31
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    36c4:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tce0_err_callback>
    36c8:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tce0_err_callback+0x1>
    36cc:	89 2b       	or	r24, r25
    36ce:	31 f0       	breq	.+12     	; 0x36dc <__vector_48+0x6c>
		tc_tce0_err_callback();
    36d0:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tce0_err_callback>
    36d4:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tce0_err_callback+0x1>
    36d8:	fc 01       	movw	r30, r24
    36da:	19 95       	eicall
	}
}
    36dc:	00 00       	nop
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	ff 91       	pop	r31
    36e4:	ef 91       	pop	r30
    36e6:	bf 91       	pop	r27
    36e8:	af 91       	pop	r26
    36ea:	9f 91       	pop	r25
    36ec:	8f 91       	pop	r24
    36ee:	7f 91       	pop	r23
    36f0:	6f 91       	pop	r22
    36f2:	5f 91       	pop	r21
    36f4:	4f 91       	pop	r20
    36f6:	3f 91       	pop	r19
    36f8:	2f 91       	pop	r18
    36fa:	0f 90       	pop	r0
    36fc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3700:	0f 90       	pop	r0
    3702:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3706:	0f 90       	pop	r0
    3708:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    370c:	0f 90       	pop	r0
    370e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3712:	0f 90       	pop	r0
    3714:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3718:	0f 90       	pop	r0
    371a:	1f 90       	pop	r1
    371c:	18 95       	reti

0000371e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    371e:	1f 92       	push	r1
    3720:	0f 92       	push	r0
    3722:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3726:	0f 92       	push	r0
    3728:	11 24       	eor	r1, r1
    372a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    372e:	0f 92       	push	r0
    3730:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3734:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3738:	0f 92       	push	r0
    373a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    373e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3742:	0f 92       	push	r0
    3744:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3748:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    374c:	0f 92       	push	r0
    374e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3752:	2f 93       	push	r18
    3754:	3f 93       	push	r19
    3756:	4f 93       	push	r20
    3758:	5f 93       	push	r21
    375a:	6f 93       	push	r22
    375c:	7f 93       	push	r23
    375e:	8f 93       	push	r24
    3760:	9f 93       	push	r25
    3762:	af 93       	push	r26
    3764:	bf 93       	push	r27
    3766:	ef 93       	push	r30
    3768:	ff 93       	push	r31
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    3772:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tce0_cca_callback>
    3776:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tce0_cca_callback+0x1>
    377a:	89 2b       	or	r24, r25
    377c:	31 f0       	breq	.+12     	; 0x378a <__vector_49+0x6c>
		tc_tce0_cca_callback();
    377e:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tce0_cca_callback>
    3782:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tce0_cca_callback+0x1>
    3786:	fc 01       	movw	r30, r24
    3788:	19 95       	eicall
	}
}
    378a:	00 00       	nop
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	ff 91       	pop	r31
    3792:	ef 91       	pop	r30
    3794:	bf 91       	pop	r27
    3796:	af 91       	pop	r26
    3798:	9f 91       	pop	r25
    379a:	8f 91       	pop	r24
    379c:	7f 91       	pop	r23
    379e:	6f 91       	pop	r22
    37a0:	5f 91       	pop	r21
    37a2:	4f 91       	pop	r20
    37a4:	3f 91       	pop	r19
    37a6:	2f 91       	pop	r18
    37a8:	0f 90       	pop	r0
    37aa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    37ae:	0f 90       	pop	r0
    37b0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    37b4:	0f 90       	pop	r0
    37b6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37ba:	0f 90       	pop	r0
    37bc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37c0:	0f 90       	pop	r0
    37c2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    37c6:	0f 90       	pop	r0
    37c8:	1f 90       	pop	r1
    37ca:	18 95       	reti

000037cc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    37cc:	1f 92       	push	r1
    37ce:	0f 92       	push	r0
    37d0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    37d4:	0f 92       	push	r0
    37d6:	11 24       	eor	r1, r1
    37d8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37dc:	0f 92       	push	r0
    37de:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37e2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37e6:	0f 92       	push	r0
    37e8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37ec:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    37f0:	0f 92       	push	r0
    37f2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    37f6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    37fa:	0f 92       	push	r0
    37fc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3800:	2f 93       	push	r18
    3802:	3f 93       	push	r19
    3804:	4f 93       	push	r20
    3806:	5f 93       	push	r21
    3808:	6f 93       	push	r22
    380a:	7f 93       	push	r23
    380c:	8f 93       	push	r24
    380e:	9f 93       	push	r25
    3810:	af 93       	push	r26
    3812:	bf 93       	push	r27
    3814:	ef 93       	push	r30
    3816:	ff 93       	push	r31
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    3820:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tce0_ccb_callback>
    3824:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tce0_ccb_callback+0x1>
    3828:	89 2b       	or	r24, r25
    382a:	31 f0       	breq	.+12     	; 0x3838 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    382c:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tce0_ccb_callback>
    3830:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tce0_ccb_callback+0x1>
    3834:	fc 01       	movw	r30, r24
    3836:	19 95       	eicall
	}
}
    3838:	00 00       	nop
    383a:	df 91       	pop	r29
    383c:	cf 91       	pop	r28
    383e:	ff 91       	pop	r31
    3840:	ef 91       	pop	r30
    3842:	bf 91       	pop	r27
    3844:	af 91       	pop	r26
    3846:	9f 91       	pop	r25
    3848:	8f 91       	pop	r24
    384a:	7f 91       	pop	r23
    384c:	6f 91       	pop	r22
    384e:	5f 91       	pop	r21
    3850:	4f 91       	pop	r20
    3852:	3f 91       	pop	r19
    3854:	2f 91       	pop	r18
    3856:	0f 90       	pop	r0
    3858:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    385c:	0f 90       	pop	r0
    385e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3862:	0f 90       	pop	r0
    3864:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3868:	0f 90       	pop	r0
    386a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    386e:	0f 90       	pop	r0
    3870:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    387a:	1f 92       	push	r1
    387c:	0f 92       	push	r0
    387e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3882:	0f 92       	push	r0
    3884:	11 24       	eor	r1, r1
    3886:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    388a:	0f 92       	push	r0
    388c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3890:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3894:	0f 92       	push	r0
    3896:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    389a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    389e:	0f 92       	push	r0
    38a0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    38a4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38a8:	0f 92       	push	r0
    38aa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38ae:	2f 93       	push	r18
    38b0:	3f 93       	push	r19
    38b2:	4f 93       	push	r20
    38b4:	5f 93       	push	r21
    38b6:	6f 93       	push	r22
    38b8:	7f 93       	push	r23
    38ba:	8f 93       	push	r24
    38bc:	9f 93       	push	r25
    38be:	af 93       	push	r26
    38c0:	bf 93       	push	r27
    38c2:	ef 93       	push	r30
    38c4:	ff 93       	push	r31
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    38ce:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tce0_ccc_callback>
    38d2:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tce0_ccc_callback+0x1>
    38d6:	89 2b       	or	r24, r25
    38d8:	31 f0       	breq	.+12     	; 0x38e6 <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    38da:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tce0_ccc_callback>
    38de:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tce0_ccc_callback+0x1>
    38e2:	fc 01       	movw	r30, r24
    38e4:	19 95       	eicall
	}
}
    38e6:	00 00       	nop
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	ff 91       	pop	r31
    38ee:	ef 91       	pop	r30
    38f0:	bf 91       	pop	r27
    38f2:	af 91       	pop	r26
    38f4:	9f 91       	pop	r25
    38f6:	8f 91       	pop	r24
    38f8:	7f 91       	pop	r23
    38fa:	6f 91       	pop	r22
    38fc:	5f 91       	pop	r21
    38fe:	4f 91       	pop	r20
    3900:	3f 91       	pop	r19
    3902:	2f 91       	pop	r18
    3904:	0f 90       	pop	r0
    3906:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    390a:	0f 90       	pop	r0
    390c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3910:	0f 90       	pop	r0
    3912:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3916:	0f 90       	pop	r0
    3918:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    391c:	0f 90       	pop	r0
    391e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3922:	0f 90       	pop	r0
    3924:	1f 90       	pop	r1
    3926:	18 95       	reti

00003928 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    3928:	1f 92       	push	r1
    392a:	0f 92       	push	r0
    392c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3930:	0f 92       	push	r0
    3932:	11 24       	eor	r1, r1
    3934:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3938:	0f 92       	push	r0
    393a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    393e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3942:	0f 92       	push	r0
    3944:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3948:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    394c:	0f 92       	push	r0
    394e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3952:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3956:	0f 92       	push	r0
    3958:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    395c:	2f 93       	push	r18
    395e:	3f 93       	push	r19
    3960:	4f 93       	push	r20
    3962:	5f 93       	push	r21
    3964:	6f 93       	push	r22
    3966:	7f 93       	push	r23
    3968:	8f 93       	push	r24
    396a:	9f 93       	push	r25
    396c:	af 93       	push	r26
    396e:	bf 93       	push	r27
    3970:	ef 93       	push	r30
    3972:	ff 93       	push	r31
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    397c:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tce0_ccd_callback>
    3980:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tce0_ccd_callback+0x1>
    3984:	89 2b       	or	r24, r25
    3986:	31 f0       	breq	.+12     	; 0x3994 <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    3988:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tce0_ccd_callback>
    398c:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tce0_ccd_callback+0x1>
    3990:	fc 01       	movw	r30, r24
    3992:	19 95       	eicall
	}
}
    3994:	00 00       	nop
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	ff 91       	pop	r31
    399c:	ef 91       	pop	r30
    399e:	bf 91       	pop	r27
    39a0:	af 91       	pop	r26
    39a2:	9f 91       	pop	r25
    39a4:	8f 91       	pop	r24
    39a6:	7f 91       	pop	r23
    39a8:	6f 91       	pop	r22
    39aa:	5f 91       	pop	r21
    39ac:	4f 91       	pop	r20
    39ae:	3f 91       	pop	r19
    39b0:	2f 91       	pop	r18
    39b2:	0f 90       	pop	r0
    39b4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    39b8:	0f 90       	pop	r0
    39ba:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    39be:	0f 90       	pop	r0
    39c0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    39c4:	0f 90       	pop	r0
    39c6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    39ca:	0f 90       	pop	r0
    39cc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    39d0:	0f 90       	pop	r0
    39d2:	1f 90       	pop	r1
    39d4:	18 95       	reti

000039d6 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    39d6:	1f 92       	push	r1
    39d8:	0f 92       	push	r0
    39da:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    39de:	0f 92       	push	r0
    39e0:	11 24       	eor	r1, r1
    39e2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    39e6:	0f 92       	push	r0
    39e8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    39ec:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    39f0:	0f 92       	push	r0
    39f2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    39f6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    39fa:	0f 92       	push	r0
    39fc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a00:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a04:	0f 92       	push	r0
    3a06:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a0a:	2f 93       	push	r18
    3a0c:	3f 93       	push	r19
    3a0e:	4f 93       	push	r20
    3a10:	5f 93       	push	r21
    3a12:	6f 93       	push	r22
    3a14:	7f 93       	push	r23
    3a16:	8f 93       	push	r24
    3a18:	9f 93       	push	r25
    3a1a:	af 93       	push	r26
    3a1c:	bf 93       	push	r27
    3a1e:	ef 93       	push	r30
    3a20:	ff 93       	push	r31
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    3a2a:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tce1_ovf_callback>
    3a2e:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tce1_ovf_callback+0x1>
    3a32:	89 2b       	or	r24, r25
    3a34:	31 f0       	breq	.+12     	; 0x3a42 <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    3a36:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tce1_ovf_callback>
    3a3a:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tce1_ovf_callback+0x1>
    3a3e:	fc 01       	movw	r30, r24
    3a40:	19 95       	eicall
	}
}
    3a42:	00 00       	nop
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	ff 91       	pop	r31
    3a4a:	ef 91       	pop	r30
    3a4c:	bf 91       	pop	r27
    3a4e:	af 91       	pop	r26
    3a50:	9f 91       	pop	r25
    3a52:	8f 91       	pop	r24
    3a54:	7f 91       	pop	r23
    3a56:	6f 91       	pop	r22
    3a58:	5f 91       	pop	r21
    3a5a:	4f 91       	pop	r20
    3a5c:	3f 91       	pop	r19
    3a5e:	2f 91       	pop	r18
    3a60:	0f 90       	pop	r0
    3a62:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a66:	0f 90       	pop	r0
    3a68:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a6c:	0f 90       	pop	r0
    3a6e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a72:	0f 90       	pop	r0
    3a74:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a78:	0f 90       	pop	r0
    3a7a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3a7e:	0f 90       	pop	r0
    3a80:	1f 90       	pop	r1
    3a82:	18 95       	reti

00003a84 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    3a84:	1f 92       	push	r1
    3a86:	0f 92       	push	r0
    3a88:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3a8c:	0f 92       	push	r0
    3a8e:	11 24       	eor	r1, r1
    3a90:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a94:	0f 92       	push	r0
    3a96:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a9a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a9e:	0f 92       	push	r0
    3aa0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3aa4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3aa8:	0f 92       	push	r0
    3aaa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3aae:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ab2:	0f 92       	push	r0
    3ab4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ab8:	2f 93       	push	r18
    3aba:	3f 93       	push	r19
    3abc:	4f 93       	push	r20
    3abe:	5f 93       	push	r21
    3ac0:	6f 93       	push	r22
    3ac2:	7f 93       	push	r23
    3ac4:	8f 93       	push	r24
    3ac6:	9f 93       	push	r25
    3ac8:	af 93       	push	r26
    3aca:	bf 93       	push	r27
    3acc:	ef 93       	push	r30
    3ace:	ff 93       	push	r31
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    3ad8:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tce1_err_callback>
    3adc:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tce1_err_callback+0x1>
    3ae0:	89 2b       	or	r24, r25
    3ae2:	31 f0       	breq	.+12     	; 0x3af0 <__vector_54+0x6c>
		tc_tce1_err_callback();
    3ae4:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tce1_err_callback>
    3ae8:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tce1_err_callback+0x1>
    3aec:	fc 01       	movw	r30, r24
    3aee:	19 95       	eicall
	}
}
    3af0:	00 00       	nop
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	ff 91       	pop	r31
    3af8:	ef 91       	pop	r30
    3afa:	bf 91       	pop	r27
    3afc:	af 91       	pop	r26
    3afe:	9f 91       	pop	r25
    3b00:	8f 91       	pop	r24
    3b02:	7f 91       	pop	r23
    3b04:	6f 91       	pop	r22
    3b06:	5f 91       	pop	r21
    3b08:	4f 91       	pop	r20
    3b0a:	3f 91       	pop	r19
    3b0c:	2f 91       	pop	r18
    3b0e:	0f 90       	pop	r0
    3b10:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b14:	0f 90       	pop	r0
    3b16:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b1a:	0f 90       	pop	r0
    3b1c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b20:	0f 90       	pop	r0
    3b22:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b26:	0f 90       	pop	r0
    3b28:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3b2c:	0f 90       	pop	r0
    3b2e:	1f 90       	pop	r1
    3b30:	18 95       	reti

00003b32 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    3b32:	1f 92       	push	r1
    3b34:	0f 92       	push	r0
    3b36:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3b3a:	0f 92       	push	r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b42:	0f 92       	push	r0
    3b44:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b48:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b4c:	0f 92       	push	r0
    3b4e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b52:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b56:	0f 92       	push	r0
    3b58:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b5c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b60:	0f 92       	push	r0
    3b62:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b66:	2f 93       	push	r18
    3b68:	3f 93       	push	r19
    3b6a:	4f 93       	push	r20
    3b6c:	5f 93       	push	r21
    3b6e:	6f 93       	push	r22
    3b70:	7f 93       	push	r23
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
    3b76:	af 93       	push	r26
    3b78:	bf 93       	push	r27
    3b7a:	ef 93       	push	r30
    3b7c:	ff 93       	push	r31
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    3b86:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tce1_cca_callback>
    3b8a:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tce1_cca_callback+0x1>
    3b8e:	89 2b       	or	r24, r25
    3b90:	31 f0       	breq	.+12     	; 0x3b9e <__vector_55+0x6c>
		tc_tce1_cca_callback();
    3b92:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tce1_cca_callback>
    3b96:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tce1_cca_callback+0x1>
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	19 95       	eicall
	}
}
    3b9e:	00 00       	nop
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	ff 91       	pop	r31
    3ba6:	ef 91       	pop	r30
    3ba8:	bf 91       	pop	r27
    3baa:	af 91       	pop	r26
    3bac:	9f 91       	pop	r25
    3bae:	8f 91       	pop	r24
    3bb0:	7f 91       	pop	r23
    3bb2:	6f 91       	pop	r22
    3bb4:	5f 91       	pop	r21
    3bb6:	4f 91       	pop	r20
    3bb8:	3f 91       	pop	r19
    3bba:	2f 91       	pop	r18
    3bbc:	0f 90       	pop	r0
    3bbe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3bc2:	0f 90       	pop	r0
    3bc4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3bc8:	0f 90       	pop	r0
    3bca:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3bce:	0f 90       	pop	r0
    3bd0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3bd4:	0f 90       	pop	r0
    3bd6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3bda:	0f 90       	pop	r0
    3bdc:	1f 90       	pop	r1
    3bde:	18 95       	reti

00003be0 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    3be0:	1f 92       	push	r1
    3be2:	0f 92       	push	r0
    3be4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3be8:	0f 92       	push	r0
    3bea:	11 24       	eor	r1, r1
    3bec:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3bf0:	0f 92       	push	r0
    3bf2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3bf6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3bfa:	0f 92       	push	r0
    3bfc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3c00:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c04:	0f 92       	push	r0
    3c06:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c0a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3c0e:	0f 92       	push	r0
    3c10:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3c14:	2f 93       	push	r18
    3c16:	3f 93       	push	r19
    3c18:	4f 93       	push	r20
    3c1a:	5f 93       	push	r21
    3c1c:	6f 93       	push	r22
    3c1e:	7f 93       	push	r23
    3c20:	8f 93       	push	r24
    3c22:	9f 93       	push	r25
    3c24:	af 93       	push	r26
    3c26:	bf 93       	push	r27
    3c28:	ef 93       	push	r30
    3c2a:	ff 93       	push	r31
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    3c34:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tce1_ccb_callback>
    3c38:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tce1_ccb_callback+0x1>
    3c3c:	89 2b       	or	r24, r25
    3c3e:	31 f0       	breq	.+12     	; 0x3c4c <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    3c40:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tce1_ccb_callback>
    3c44:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tce1_ccb_callback+0x1>
    3c48:	fc 01       	movw	r30, r24
    3c4a:	19 95       	eicall
	}
}
    3c4c:	00 00       	nop
    3c4e:	df 91       	pop	r29
    3c50:	cf 91       	pop	r28
    3c52:	ff 91       	pop	r31
    3c54:	ef 91       	pop	r30
    3c56:	bf 91       	pop	r27
    3c58:	af 91       	pop	r26
    3c5a:	9f 91       	pop	r25
    3c5c:	8f 91       	pop	r24
    3c5e:	7f 91       	pop	r23
    3c60:	6f 91       	pop	r22
    3c62:	5f 91       	pop	r21
    3c64:	4f 91       	pop	r20
    3c66:	3f 91       	pop	r19
    3c68:	2f 91       	pop	r18
    3c6a:	0f 90       	pop	r0
    3c6c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3c70:	0f 90       	pop	r0
    3c72:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c76:	0f 90       	pop	r0
    3c78:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3c7c:	0f 90       	pop	r0
    3c7e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3c82:	0f 90       	pop	r0
    3c84:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3c88:	0f 90       	pop	r0
    3c8a:	1f 90       	pop	r1
    3c8c:	18 95       	reti

00003c8e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    3c8e:	1f 92       	push	r1
    3c90:	0f 92       	push	r0
    3c92:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3c96:	0f 92       	push	r0
    3c98:	11 24       	eor	r1, r1
    3c9a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3c9e:	0f 92       	push	r0
    3ca0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ca4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ca8:	0f 92       	push	r0
    3caa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3cae:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3cb2:	0f 92       	push	r0
    3cb4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3cb8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3cbc:	0f 92       	push	r0
    3cbe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3cc2:	2f 93       	push	r18
    3cc4:	3f 93       	push	r19
    3cc6:	4f 93       	push	r20
    3cc8:	5f 93       	push	r21
    3cca:	6f 93       	push	r22
    3ccc:	7f 93       	push	r23
    3cce:	8f 93       	push	r24
    3cd0:	9f 93       	push	r25
    3cd2:	af 93       	push	r26
    3cd4:	bf 93       	push	r27
    3cd6:	ef 93       	push	r30
    3cd8:	ff 93       	push	r31
    3cda:	cf 93       	push	r28
    3cdc:	df 93       	push	r29
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    3ce2:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcf0_ovf_callback>
    3ce6:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcf0_ovf_callback+0x1>
    3cea:	89 2b       	or	r24, r25
    3cec:	31 f0       	breq	.+12     	; 0x3cfa <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    3cee:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcf0_ovf_callback>
    3cf2:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcf0_ovf_callback+0x1>
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	19 95       	eicall
	}
}
    3cfa:	00 00       	nop
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	ff 91       	pop	r31
    3d02:	ef 91       	pop	r30
    3d04:	bf 91       	pop	r27
    3d06:	af 91       	pop	r26
    3d08:	9f 91       	pop	r25
    3d0a:	8f 91       	pop	r24
    3d0c:	7f 91       	pop	r23
    3d0e:	6f 91       	pop	r22
    3d10:	5f 91       	pop	r21
    3d12:	4f 91       	pop	r20
    3d14:	3f 91       	pop	r19
    3d16:	2f 91       	pop	r18
    3d18:	0f 90       	pop	r0
    3d1a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d1e:	0f 90       	pop	r0
    3d20:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d24:	0f 90       	pop	r0
    3d26:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3d2a:	0f 90       	pop	r0
    3d2c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3d30:	0f 90       	pop	r0
    3d32:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3d36:	0f 90       	pop	r0
    3d38:	1f 90       	pop	r1
    3d3a:	18 95       	reti

00003d3c <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    3d3c:	1f 92       	push	r1
    3d3e:	0f 92       	push	r0
    3d40:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3d44:	0f 92       	push	r0
    3d46:	11 24       	eor	r1, r1
    3d48:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3d4c:	0f 92       	push	r0
    3d4e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3d52:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3d56:	0f 92       	push	r0
    3d58:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3d5c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d60:	0f 92       	push	r0
    3d62:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d66:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d6a:	0f 92       	push	r0
    3d6c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d70:	2f 93       	push	r18
    3d72:	3f 93       	push	r19
    3d74:	4f 93       	push	r20
    3d76:	5f 93       	push	r21
    3d78:	6f 93       	push	r22
    3d7a:	7f 93       	push	r23
    3d7c:	8f 93       	push	r24
    3d7e:	9f 93       	push	r25
    3d80:	af 93       	push	r26
    3d82:	bf 93       	push	r27
    3d84:	ef 93       	push	r30
    3d86:	ff 93       	push	r31
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    3d90:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcf0_err_callback>
    3d94:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcf0_err_callback+0x1>
    3d98:	89 2b       	or	r24, r25
    3d9a:	31 f0       	breq	.+12     	; 0x3da8 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    3d9c:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcf0_err_callback>
    3da0:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcf0_err_callback+0x1>
    3da4:	fc 01       	movw	r30, r24
    3da6:	19 95       	eicall
	}
}
    3da8:	00 00       	nop
    3daa:	df 91       	pop	r29
    3dac:	cf 91       	pop	r28
    3dae:	ff 91       	pop	r31
    3db0:	ef 91       	pop	r30
    3db2:	bf 91       	pop	r27
    3db4:	af 91       	pop	r26
    3db6:	9f 91       	pop	r25
    3db8:	8f 91       	pop	r24
    3dba:	7f 91       	pop	r23
    3dbc:	6f 91       	pop	r22
    3dbe:	5f 91       	pop	r21
    3dc0:	4f 91       	pop	r20
    3dc2:	3f 91       	pop	r19
    3dc4:	2f 91       	pop	r18
    3dc6:	0f 90       	pop	r0
    3dc8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3dcc:	0f 90       	pop	r0
    3dce:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3dd2:	0f 90       	pop	r0
    3dd4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3dd8:	0f 90       	pop	r0
    3dda:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3dde:	0f 90       	pop	r0
    3de0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3de4:	0f 90       	pop	r0
    3de6:	1f 90       	pop	r1
    3de8:	18 95       	reti

00003dea <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    3dea:	1f 92       	push	r1
    3dec:	0f 92       	push	r0
    3dee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3df2:	0f 92       	push	r0
    3df4:	11 24       	eor	r1, r1
    3df6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3dfa:	0f 92       	push	r0
    3dfc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e00:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e04:	0f 92       	push	r0
    3e06:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e0a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e0e:	0f 92       	push	r0
    3e10:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e14:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e18:	0f 92       	push	r0
    3e1a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e1e:	2f 93       	push	r18
    3e20:	3f 93       	push	r19
    3e22:	4f 93       	push	r20
    3e24:	5f 93       	push	r21
    3e26:	6f 93       	push	r22
    3e28:	7f 93       	push	r23
    3e2a:	8f 93       	push	r24
    3e2c:	9f 93       	push	r25
    3e2e:	af 93       	push	r26
    3e30:	bf 93       	push	r27
    3e32:	ef 93       	push	r30
    3e34:	ff 93       	push	r31
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    3e3e:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcf0_cca_callback>
    3e42:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcf0_cca_callback+0x1>
    3e46:	89 2b       	or	r24, r25
    3e48:	31 f0       	breq	.+12     	; 0x3e56 <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    3e4a:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcf0_cca_callback>
    3e4e:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcf0_cca_callback+0x1>
    3e52:	fc 01       	movw	r30, r24
    3e54:	19 95       	eicall
	}
}
    3e56:	00 00       	nop
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	ff 91       	pop	r31
    3e5e:	ef 91       	pop	r30
    3e60:	bf 91       	pop	r27
    3e62:	af 91       	pop	r26
    3e64:	9f 91       	pop	r25
    3e66:	8f 91       	pop	r24
    3e68:	7f 91       	pop	r23
    3e6a:	6f 91       	pop	r22
    3e6c:	5f 91       	pop	r21
    3e6e:	4f 91       	pop	r20
    3e70:	3f 91       	pop	r19
    3e72:	2f 91       	pop	r18
    3e74:	0f 90       	pop	r0
    3e76:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e7a:	0f 90       	pop	r0
    3e7c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e80:	0f 90       	pop	r0
    3e82:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e86:	0f 90       	pop	r0
    3e88:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e8c:	0f 90       	pop	r0
    3e8e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3e92:	0f 90       	pop	r0
    3e94:	1f 90       	pop	r1
    3e96:	18 95       	reti

00003e98 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    3e98:	1f 92       	push	r1
    3e9a:	0f 92       	push	r0
    3e9c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3ea0:	0f 92       	push	r0
    3ea2:	11 24       	eor	r1, r1
    3ea4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ea8:	0f 92       	push	r0
    3eaa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3eae:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3eb2:	0f 92       	push	r0
    3eb4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3eb8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ebc:	0f 92       	push	r0
    3ebe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ec2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ec6:	0f 92       	push	r0
    3ec8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ecc:	2f 93       	push	r18
    3ece:	3f 93       	push	r19
    3ed0:	4f 93       	push	r20
    3ed2:	5f 93       	push	r21
    3ed4:	6f 93       	push	r22
    3ed6:	7f 93       	push	r23
    3ed8:	8f 93       	push	r24
    3eda:	9f 93       	push	r25
    3edc:	af 93       	push	r26
    3ede:	bf 93       	push	r27
    3ee0:	ef 93       	push	r30
    3ee2:	ff 93       	push	r31
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    3eec:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcf0_ccb_callback>
    3ef0:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcf0_ccb_callback+0x1>
    3ef4:	89 2b       	or	r24, r25
    3ef6:	31 f0       	breq	.+12     	; 0x3f04 <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    3ef8:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcf0_ccb_callback>
    3efc:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcf0_ccb_callback+0x1>
    3f00:	fc 01       	movw	r30, r24
    3f02:	19 95       	eicall
	}
}
    3f04:	00 00       	nop
    3f06:	df 91       	pop	r29
    3f08:	cf 91       	pop	r28
    3f0a:	ff 91       	pop	r31
    3f0c:	ef 91       	pop	r30
    3f0e:	bf 91       	pop	r27
    3f10:	af 91       	pop	r26
    3f12:	9f 91       	pop	r25
    3f14:	8f 91       	pop	r24
    3f16:	7f 91       	pop	r23
    3f18:	6f 91       	pop	r22
    3f1a:	5f 91       	pop	r21
    3f1c:	4f 91       	pop	r20
    3f1e:	3f 91       	pop	r19
    3f20:	2f 91       	pop	r18
    3f22:	0f 90       	pop	r0
    3f24:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f28:	0f 90       	pop	r0
    3f2a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f2e:	0f 90       	pop	r0
    3f30:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f34:	0f 90       	pop	r0
    3f36:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f3a:	0f 90       	pop	r0
    3f3c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3f40:	0f 90       	pop	r0
    3f42:	1f 90       	pop	r1
    3f44:	18 95       	reti

00003f46 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    3f46:	1f 92       	push	r1
    3f48:	0f 92       	push	r0
    3f4a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3f4e:	0f 92       	push	r0
    3f50:	11 24       	eor	r1, r1
    3f52:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f56:	0f 92       	push	r0
    3f58:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f5c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f60:	0f 92       	push	r0
    3f62:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f66:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f6a:	0f 92       	push	r0
    3f6c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f70:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f74:	0f 92       	push	r0
    3f76:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f7a:	2f 93       	push	r18
    3f7c:	3f 93       	push	r19
    3f7e:	4f 93       	push	r20
    3f80:	5f 93       	push	r21
    3f82:	6f 93       	push	r22
    3f84:	7f 93       	push	r23
    3f86:	8f 93       	push	r24
    3f88:	9f 93       	push	r25
    3f8a:	af 93       	push	r26
    3f8c:	bf 93       	push	r27
    3f8e:	ef 93       	push	r30
    3f90:	ff 93       	push	r31
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    3f9a:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcf0_ccc_callback>
    3f9e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcf0_ccc_callback+0x1>
    3fa2:	89 2b       	or	r24, r25
    3fa4:	31 f0       	breq	.+12     	; 0x3fb2 <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    3fa6:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcf0_ccc_callback>
    3faa:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcf0_ccc_callback+0x1>
    3fae:	fc 01       	movw	r30, r24
    3fb0:	19 95       	eicall
	}
}
    3fb2:	00 00       	nop
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	ff 91       	pop	r31
    3fba:	ef 91       	pop	r30
    3fbc:	bf 91       	pop	r27
    3fbe:	af 91       	pop	r26
    3fc0:	9f 91       	pop	r25
    3fc2:	8f 91       	pop	r24
    3fc4:	7f 91       	pop	r23
    3fc6:	6f 91       	pop	r22
    3fc8:	5f 91       	pop	r21
    3fca:	4f 91       	pop	r20
    3fcc:	3f 91       	pop	r19
    3fce:	2f 91       	pop	r18
    3fd0:	0f 90       	pop	r0
    3fd2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3fd6:	0f 90       	pop	r0
    3fd8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3fdc:	0f 90       	pop	r0
    3fde:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3fe2:	0f 90       	pop	r0
    3fe4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3fe8:	0f 90       	pop	r0
    3fea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3fee:	0f 90       	pop	r0
    3ff0:	1f 90       	pop	r1
    3ff2:	18 95       	reti

00003ff4 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    3ff4:	1f 92       	push	r1
    3ff6:	0f 92       	push	r0
    3ff8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3ffc:	0f 92       	push	r0
    3ffe:	11 24       	eor	r1, r1
    4000:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4004:	0f 92       	push	r0
    4006:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    400a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    400e:	0f 92       	push	r0
    4010:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4014:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4018:	0f 92       	push	r0
    401a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    401e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4022:	0f 92       	push	r0
    4024:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4028:	2f 93       	push	r18
    402a:	3f 93       	push	r19
    402c:	4f 93       	push	r20
    402e:	5f 93       	push	r21
    4030:	6f 93       	push	r22
    4032:	7f 93       	push	r23
    4034:	8f 93       	push	r24
    4036:	9f 93       	push	r25
    4038:	af 93       	push	r26
    403a:	bf 93       	push	r27
    403c:	ef 93       	push	r30
    403e:	ff 93       	push	r31
    4040:	cf 93       	push	r28
    4042:	df 93       	push	r29
    4044:	cd b7       	in	r28, 0x3d	; 61
    4046:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    4048:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tcf0_ccd_callback>
    404c:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tcf0_ccd_callback+0x1>
    4050:	89 2b       	or	r24, r25
    4052:	31 f0       	breq	.+12     	; 0x4060 <__stack+0x61>
		tc_tcf0_ccd_callback();
    4054:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tcf0_ccd_callback>
    4058:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tcf0_ccd_callback+0x1>
    405c:	fc 01       	movw	r30, r24
    405e:	19 95       	eicall
	}
}
    4060:	00 00       	nop
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	ff 91       	pop	r31
    4068:	ef 91       	pop	r30
    406a:	bf 91       	pop	r27
    406c:	af 91       	pop	r26
    406e:	9f 91       	pop	r25
    4070:	8f 91       	pop	r24
    4072:	7f 91       	pop	r23
    4074:	6f 91       	pop	r22
    4076:	5f 91       	pop	r21
    4078:	4f 91       	pop	r20
    407a:	3f 91       	pop	r19
    407c:	2f 91       	pop	r18
    407e:	0f 90       	pop	r0
    4080:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4084:	0f 90       	pop	r0
    4086:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    408a:	0f 90       	pop	r0
    408c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4090:	0f 90       	pop	r0
    4092:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4096:	0f 90       	pop	r0
    4098:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    409c:	0f 90       	pop	r0
    409e:	1f 90       	pop	r1
    40a0:	18 95       	reti

000040a2 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    40a2:	1f 92       	push	r1
    40a4:	0f 92       	push	r0
    40a6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    40aa:	0f 92       	push	r0
    40ac:	11 24       	eor	r1, r1
    40ae:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40b2:	0f 92       	push	r0
    40b4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40b8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40bc:	0f 92       	push	r0
    40be:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40c2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40c6:	0f 92       	push	r0
    40c8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40cc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40d0:	0f 92       	push	r0
    40d2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40d6:	2f 93       	push	r18
    40d8:	3f 93       	push	r19
    40da:	4f 93       	push	r20
    40dc:	5f 93       	push	r21
    40de:	6f 93       	push	r22
    40e0:	7f 93       	push	r23
    40e2:	8f 93       	push	r24
    40e4:	9f 93       	push	r25
    40e6:	af 93       	push	r26
    40e8:	bf 93       	push	r27
    40ea:	ef 93       	push	r30
    40ec:	ff 93       	push	r31
    40ee:	cf 93       	push	r28
    40f0:	df 93       	push	r29
    40f2:	cd b7       	in	r28, 0x3d	; 61
    40f4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    40f6:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tcf1_ovf_callback>
    40fa:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tcf1_ovf_callback+0x1>
    40fe:	89 2b       	or	r24, r25
    4100:	31 f0       	breq	.+12     	; 0x410e <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    4102:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tcf1_ovf_callback>
    4106:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tcf1_ovf_callback+0x1>
    410a:	fc 01       	movw	r30, r24
    410c:	19 95       	eicall
	}
}
    410e:	00 00       	nop
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	ff 91       	pop	r31
    4116:	ef 91       	pop	r30
    4118:	bf 91       	pop	r27
    411a:	af 91       	pop	r26
    411c:	9f 91       	pop	r25
    411e:	8f 91       	pop	r24
    4120:	7f 91       	pop	r23
    4122:	6f 91       	pop	r22
    4124:	5f 91       	pop	r21
    4126:	4f 91       	pop	r20
    4128:	3f 91       	pop	r19
    412a:	2f 91       	pop	r18
    412c:	0f 90       	pop	r0
    412e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4132:	0f 90       	pop	r0
    4134:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4138:	0f 90       	pop	r0
    413a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    413e:	0f 90       	pop	r0
    4140:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4144:	0f 90       	pop	r0
    4146:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    414a:	0f 90       	pop	r0
    414c:	1f 90       	pop	r1
    414e:	18 95       	reti

00004150 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    4150:	1f 92       	push	r1
    4152:	0f 92       	push	r0
    4154:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4158:	0f 92       	push	r0
    415a:	11 24       	eor	r1, r1
    415c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4160:	0f 92       	push	r0
    4162:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4166:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    416a:	0f 92       	push	r0
    416c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4170:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4174:	0f 92       	push	r0
    4176:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    417a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    417e:	0f 92       	push	r0
    4180:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4184:	2f 93       	push	r18
    4186:	3f 93       	push	r19
    4188:	4f 93       	push	r20
    418a:	5f 93       	push	r21
    418c:	6f 93       	push	r22
    418e:	7f 93       	push	r23
    4190:	8f 93       	push	r24
    4192:	9f 93       	push	r25
    4194:	af 93       	push	r26
    4196:	bf 93       	push	r27
    4198:	ef 93       	push	r30
    419a:	ff 93       	push	r31
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	cd b7       	in	r28, 0x3d	; 61
    41a2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    41a4:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tcf1_err_callback>
    41a8:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tcf1_err_callback+0x1>
    41ac:	89 2b       	or	r24, r25
    41ae:	31 f0       	breq	.+12     	; 0x41bc <__vector_115+0x6c>
		tc_tcf1_err_callback();
    41b0:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tcf1_err_callback>
    41b4:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tcf1_err_callback+0x1>
    41b8:	fc 01       	movw	r30, r24
    41ba:	19 95       	eicall
	}
}
    41bc:	00 00       	nop
    41be:	df 91       	pop	r29
    41c0:	cf 91       	pop	r28
    41c2:	ff 91       	pop	r31
    41c4:	ef 91       	pop	r30
    41c6:	bf 91       	pop	r27
    41c8:	af 91       	pop	r26
    41ca:	9f 91       	pop	r25
    41cc:	8f 91       	pop	r24
    41ce:	7f 91       	pop	r23
    41d0:	6f 91       	pop	r22
    41d2:	5f 91       	pop	r21
    41d4:	4f 91       	pop	r20
    41d6:	3f 91       	pop	r19
    41d8:	2f 91       	pop	r18
    41da:	0f 90       	pop	r0
    41dc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    41e0:	0f 90       	pop	r0
    41e2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    41e6:	0f 90       	pop	r0
    41e8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    41ec:	0f 90       	pop	r0
    41ee:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    41f2:	0f 90       	pop	r0
    41f4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    41f8:	0f 90       	pop	r0
    41fa:	1f 90       	pop	r1
    41fc:	18 95       	reti

000041fe <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    41fe:	1f 92       	push	r1
    4200:	0f 92       	push	r0
    4202:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4206:	0f 92       	push	r0
    4208:	11 24       	eor	r1, r1
    420a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    420e:	0f 92       	push	r0
    4210:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4214:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4218:	0f 92       	push	r0
    421a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    421e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4222:	0f 92       	push	r0
    4224:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4228:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    422c:	0f 92       	push	r0
    422e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4232:	2f 93       	push	r18
    4234:	3f 93       	push	r19
    4236:	4f 93       	push	r20
    4238:	5f 93       	push	r21
    423a:	6f 93       	push	r22
    423c:	7f 93       	push	r23
    423e:	8f 93       	push	r24
    4240:	9f 93       	push	r25
    4242:	af 93       	push	r26
    4244:	bf 93       	push	r27
    4246:	ef 93       	push	r30
    4248:	ff 93       	push	r31
    424a:	cf 93       	push	r28
    424c:	df 93       	push	r29
    424e:	cd b7       	in	r28, 0x3d	; 61
    4250:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    4252:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcf1_cca_callback>
    4256:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcf1_cca_callback+0x1>
    425a:	89 2b       	or	r24, r25
    425c:	31 f0       	breq	.+12     	; 0x426a <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    425e:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcf1_cca_callback>
    4262:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcf1_cca_callback+0x1>
    4266:	fc 01       	movw	r30, r24
    4268:	19 95       	eicall
	}
}
    426a:	00 00       	nop
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	ff 91       	pop	r31
    4272:	ef 91       	pop	r30
    4274:	bf 91       	pop	r27
    4276:	af 91       	pop	r26
    4278:	9f 91       	pop	r25
    427a:	8f 91       	pop	r24
    427c:	7f 91       	pop	r23
    427e:	6f 91       	pop	r22
    4280:	5f 91       	pop	r21
    4282:	4f 91       	pop	r20
    4284:	3f 91       	pop	r19
    4286:	2f 91       	pop	r18
    4288:	0f 90       	pop	r0
    428a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    428e:	0f 90       	pop	r0
    4290:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4294:	0f 90       	pop	r0
    4296:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    429a:	0f 90       	pop	r0
    429c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    42a0:	0f 90       	pop	r0
    42a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    42a6:	0f 90       	pop	r0
    42a8:	1f 90       	pop	r1
    42aa:	18 95       	reti

000042ac <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    42ac:	1f 92       	push	r1
    42ae:	0f 92       	push	r0
    42b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    42b4:	0f 92       	push	r0
    42b6:	11 24       	eor	r1, r1
    42b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    42bc:	0f 92       	push	r0
    42be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    42c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    42c6:	0f 92       	push	r0
    42c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    42cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    42d0:	0f 92       	push	r0
    42d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    42d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    42da:	0f 92       	push	r0
    42dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    42e0:	2f 93       	push	r18
    42e2:	3f 93       	push	r19
    42e4:	4f 93       	push	r20
    42e6:	5f 93       	push	r21
    42e8:	6f 93       	push	r22
    42ea:	7f 93       	push	r23
    42ec:	8f 93       	push	r24
    42ee:	9f 93       	push	r25
    42f0:	af 93       	push	r26
    42f2:	bf 93       	push	r27
    42f4:	ef 93       	push	r30
    42f6:	ff 93       	push	r31
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    4300:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcf1_ccb_callback>
    4304:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcf1_ccb_callback+0x1>
    4308:	89 2b       	or	r24, r25
    430a:	31 f0       	breq	.+12     	; 0x4318 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    430c:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcf1_ccb_callback>
    4310:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcf1_ccb_callback+0x1>
    4314:	fc 01       	movw	r30, r24
    4316:	19 95       	eicall
	}
}
    4318:	00 00       	nop
    431a:	df 91       	pop	r29
    431c:	cf 91       	pop	r28
    431e:	ff 91       	pop	r31
    4320:	ef 91       	pop	r30
    4322:	bf 91       	pop	r27
    4324:	af 91       	pop	r26
    4326:	9f 91       	pop	r25
    4328:	8f 91       	pop	r24
    432a:	7f 91       	pop	r23
    432c:	6f 91       	pop	r22
    432e:	5f 91       	pop	r21
    4330:	4f 91       	pop	r20
    4332:	3f 91       	pop	r19
    4334:	2f 91       	pop	r18
    4336:	0f 90       	pop	r0
    4338:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    433c:	0f 90       	pop	r0
    433e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4342:	0f 90       	pop	r0
    4344:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4348:	0f 90       	pop	r0
    434a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    434e:	0f 90       	pop	r0
    4350:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4354:	0f 90       	pop	r0
    4356:	1f 90       	pop	r1
    4358:	18 95       	reti

0000435a <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    435a:	1f 92       	push	r1
    435c:	0f 92       	push	r0
    435e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4362:	0f 92       	push	r0
    4364:	11 24       	eor	r1, r1
    4366:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    436a:	0f 92       	push	r0
    436c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4370:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4374:	0f 92       	push	r0
    4376:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    437a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    437e:	0f 92       	push	r0
    4380:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4384:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4388:	0f 92       	push	r0
    438a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    438e:	2f 93       	push	r18
    4390:	3f 93       	push	r19
    4392:	4f 93       	push	r20
    4394:	5f 93       	push	r21
    4396:	6f 93       	push	r22
    4398:	7f 93       	push	r23
    439a:	8f 93       	push	r24
    439c:	9f 93       	push	r25
    439e:	af 93       	push	r26
    43a0:	bf 93       	push	r27
    43a2:	ef 93       	push	r30
    43a4:	ff 93       	push	r31
    43a6:	cf 93       	push	r28
    43a8:	df 93       	push	r29
    43aa:	cd b7       	in	r28, 0x3d	; 61
    43ac:	de b7       	in	r29, 0x3e	; 62
    43ae:	e9 d1       	rcall	.+978    	; 0x4782 <twim_interrupt_handler>
    43b0:	00 00       	nop
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	ff 91       	pop	r31
    43b8:	ef 91       	pop	r30
    43ba:	bf 91       	pop	r27
    43bc:	af 91       	pop	r26
    43be:	9f 91       	pop	r25
    43c0:	8f 91       	pop	r24
    43c2:	7f 91       	pop	r23
    43c4:	6f 91       	pop	r22
    43c6:	5f 91       	pop	r21
    43c8:	4f 91       	pop	r20
    43ca:	3f 91       	pop	r19
    43cc:	2f 91       	pop	r18
    43ce:	0f 90       	pop	r0
    43d0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43d4:	0f 90       	pop	r0
    43d6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43da:	0f 90       	pop	r0
    43dc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    43e0:	0f 90       	pop	r0
    43e2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    43e6:	0f 90       	pop	r0
    43e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    43ec:	0f 90       	pop	r0
    43ee:	1f 90       	pop	r1
    43f0:	18 95       	reti

000043f2 <__vector_76>:
    43f2:	1f 92       	push	r1
    43f4:	0f 92       	push	r0
    43f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    43fa:	0f 92       	push	r0
    43fc:	11 24       	eor	r1, r1
    43fe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4402:	0f 92       	push	r0
    4404:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4408:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    440c:	0f 92       	push	r0
    440e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4412:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4416:	0f 92       	push	r0
    4418:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    441c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4420:	0f 92       	push	r0
    4422:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4426:	2f 93       	push	r18
    4428:	3f 93       	push	r19
    442a:	4f 93       	push	r20
    442c:	5f 93       	push	r21
    442e:	6f 93       	push	r22
    4430:	7f 93       	push	r23
    4432:	8f 93       	push	r24
    4434:	9f 93       	push	r25
    4436:	af 93       	push	r26
    4438:	bf 93       	push	r27
    443a:	ef 93       	push	r30
    443c:	ff 93       	push	r31
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	9d d1       	rcall	.+826    	; 0x4782 <twim_interrupt_handler>
    4448:	00 00       	nop
    444a:	df 91       	pop	r29
    444c:	cf 91       	pop	r28
    444e:	ff 91       	pop	r31
    4450:	ef 91       	pop	r30
    4452:	bf 91       	pop	r27
    4454:	af 91       	pop	r26
    4456:	9f 91       	pop	r25
    4458:	8f 91       	pop	r24
    445a:	7f 91       	pop	r23
    445c:	6f 91       	pop	r22
    445e:	5f 91       	pop	r21
    4460:	4f 91       	pop	r20
    4462:	3f 91       	pop	r19
    4464:	2f 91       	pop	r18
    4466:	0f 90       	pop	r0
    4468:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    446c:	0f 90       	pop	r0
    446e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4472:	0f 90       	pop	r0
    4474:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4478:	0f 90       	pop	r0
    447a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    447e:	0f 90       	pop	r0
    4480:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4484:	0f 90       	pop	r0
    4486:	1f 90       	pop	r1
    4488:	18 95       	reti

0000448a <__vector_46>:
    448a:	1f 92       	push	r1
    448c:	0f 92       	push	r0
    448e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4492:	0f 92       	push	r0
    4494:	11 24       	eor	r1, r1
    4496:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    449a:	0f 92       	push	r0
    449c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    44a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    44a4:	0f 92       	push	r0
    44a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    44aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    44ae:	0f 92       	push	r0
    44b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    44b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    44b8:	0f 92       	push	r0
    44ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    44be:	2f 93       	push	r18
    44c0:	3f 93       	push	r19
    44c2:	4f 93       	push	r20
    44c4:	5f 93       	push	r21
    44c6:	6f 93       	push	r22
    44c8:	7f 93       	push	r23
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	af 93       	push	r26
    44d0:	bf 93       	push	r27
    44d2:	ef 93       	push	r30
    44d4:	ff 93       	push	r31
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
    44de:	51 d1       	rcall	.+674    	; 0x4782 <twim_interrupt_handler>
    44e0:	00 00       	nop
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	ff 91       	pop	r31
    44e8:	ef 91       	pop	r30
    44ea:	bf 91       	pop	r27
    44ec:	af 91       	pop	r26
    44ee:	9f 91       	pop	r25
    44f0:	8f 91       	pop	r24
    44f2:	7f 91       	pop	r23
    44f4:	6f 91       	pop	r22
    44f6:	5f 91       	pop	r21
    44f8:	4f 91       	pop	r20
    44fa:	3f 91       	pop	r19
    44fc:	2f 91       	pop	r18
    44fe:	0f 90       	pop	r0
    4500:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4504:	0f 90       	pop	r0
    4506:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    450a:	0f 90       	pop	r0
    450c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4510:	0f 90       	pop	r0
    4512:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4516:	0f 90       	pop	r0
    4518:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    451c:	0f 90       	pop	r0
    451e:	1f 90       	pop	r1
    4520:	18 95       	reti

00004522 <__vector_107>:
    4522:	1f 92       	push	r1
    4524:	0f 92       	push	r0
    4526:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    452a:	0f 92       	push	r0
    452c:	11 24       	eor	r1, r1
    452e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4532:	0f 92       	push	r0
    4534:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4538:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    453c:	0f 92       	push	r0
    453e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4542:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4546:	0f 92       	push	r0
    4548:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    454c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4550:	0f 92       	push	r0
    4552:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4556:	2f 93       	push	r18
    4558:	3f 93       	push	r19
    455a:	4f 93       	push	r20
    455c:	5f 93       	push	r21
    455e:	6f 93       	push	r22
    4560:	7f 93       	push	r23
    4562:	8f 93       	push	r24
    4564:	9f 93       	push	r25
    4566:	af 93       	push	r26
    4568:	bf 93       	push	r27
    456a:	ef 93       	push	r30
    456c:	ff 93       	push	r31
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	05 d1       	rcall	.+522    	; 0x4782 <twim_interrupt_handler>
    4578:	00 00       	nop
    457a:	df 91       	pop	r29
    457c:	cf 91       	pop	r28
    457e:	ff 91       	pop	r31
    4580:	ef 91       	pop	r30
    4582:	bf 91       	pop	r27
    4584:	af 91       	pop	r26
    4586:	9f 91       	pop	r25
    4588:	8f 91       	pop	r24
    458a:	7f 91       	pop	r23
    458c:	6f 91       	pop	r22
    458e:	5f 91       	pop	r21
    4590:	4f 91       	pop	r20
    4592:	3f 91       	pop	r19
    4594:	2f 91       	pop	r18
    4596:	0f 90       	pop	r0
    4598:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    459c:	0f 90       	pop	r0
    459e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45a2:	0f 90       	pop	r0
    45a4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45a8:	0f 90       	pop	r0
    45aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    45ae:	0f 90       	pop	r0
    45b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    45b4:	0f 90       	pop	r0
    45b6:	1f 90       	pop	r1
    45b8:	18 95       	reti

000045ba <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    45ba:	cf 93       	push	r28
    45bc:	df 93       	push	r29
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	28 97       	sbiw	r28, 0x08	; 8
    45c4:	cd bf       	out	0x3d, r28	; 61
    45c6:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    45c8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer>
    45cc:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <transfer+0x1>
    45d0:	89 83       	std	Y+1, r24	; 0x01
    45d2:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    45d4:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <transfer+0x2>
    45d8:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <transfer+0x3>
    45dc:	8b 83       	std	Y+3, r24	; 0x03
    45de:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    45e0:	20 91 c8 20 	lds	r18, 0x20C8	; 0x8020c8 <transfer+0x4>
    45e4:	30 91 c9 20 	lds	r19, 0x20C9	; 0x8020c9 <transfer+0x5>
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	9c 81       	ldd	r25, Y+4	; 0x04
    45ec:	fc 01       	movw	r30, r24
    45ee:	84 81       	ldd	r24, Z+4	; 0x04
    45f0:	95 81       	ldd	r25, Z+5	; 0x05
    45f2:	28 17       	cp	r18, r24
    45f4:	39 07       	cpc	r19, r25
    45f6:	e4 f4       	brge	.+56     	; 0x4630 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    45f8:	8b 81       	ldd	r24, Y+3	; 0x03
    45fa:	9c 81       	ldd	r25, Y+4	; 0x04
    45fc:	01 96       	adiw	r24, 0x01	; 1
    45fe:	8d 83       	std	Y+5, r24	; 0x05
    4600:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    4602:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <transfer+0x4>
    4606:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <transfer+0x5>
    460a:	9c 01       	movw	r18, r24
    460c:	2f 5f       	subi	r18, 0xFF	; 255
    460e:	3f 4f       	sbci	r19, 0xFF	; 255
    4610:	20 93 c8 20 	sts	0x20C8, r18	; 0x8020c8 <transfer+0x4>
    4614:	30 93 c9 20 	sts	0x20C9, r19	; 0x8020c9 <transfer+0x5>
    4618:	9c 01       	movw	r18, r24
    461a:	8d 81       	ldd	r24, Y+5	; 0x05
    461c:	9e 81       	ldd	r25, Y+6	; 0x06
    461e:	82 0f       	add	r24, r18
    4620:	93 1f       	adc	r25, r19
    4622:	fc 01       	movw	r30, r24
    4624:	20 81       	ld	r18, Z
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	9a 81       	ldd	r25, Y+2	; 0x02
    462a:	fc 01       	movw	r30, r24
    462c:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    462e:	3f c0       	rjmp	.+126    	; 0x46ae <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    4630:	20 91 ca 20 	lds	r18, 0x20CA	; 0x8020ca <transfer+0x6>
    4634:	30 91 cb 20 	lds	r19, 0x20CB	; 0x8020cb <transfer+0x7>
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	9c 81       	ldd	r25, Y+4	; 0x04
    463c:	fc 01       	movw	r30, r24
    463e:	80 85       	ldd	r24, Z+8	; 0x08
    4640:	91 85       	ldd	r25, Z+9	; 0x09
    4642:	28 17       	cp	r18, r24
    4644:	39 07       	cpc	r19, r25
    4646:	60 f5       	brcc	.+88     	; 0x46a0 <twim_write_handler+0xe6>

		if (transfer.read) {
    4648:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <transfer+0x8>
    464c:	88 23       	and	r24, r24
    464e:	59 f0       	breq	.+22     	; 0x4666 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4650:	89 81       	ldd	r24, Y+1	; 0x01
    4652:	9a 81       	ldd	r25, Y+2	; 0x02
    4654:	fc 01       	movw	r30, r24
    4656:	86 81       	ldd	r24, Z+6	; 0x06
    4658:	28 2f       	mov	r18, r24
    465a:	21 60       	ori	r18, 0x01	; 1
    465c:	89 81       	ldd	r24, Y+1	; 0x01
    465e:	9a 81       	ldd	r25, Y+2	; 0x02
    4660:	fc 01       	movw	r30, r24
    4662:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    4664:	24 c0       	rjmp	.+72     	; 0x46ae <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    4666:	8b 81       	ldd	r24, Y+3	; 0x03
    4668:	9c 81       	ldd	r25, Y+4	; 0x04
    466a:	fc 01       	movw	r30, r24
    466c:	86 81       	ldd	r24, Z+6	; 0x06
    466e:	97 81       	ldd	r25, Z+7	; 0x07
    4670:	8f 83       	std	Y+7, r24	; 0x07
    4672:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    4674:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <transfer+0x6>
    4678:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <transfer+0x7>
    467c:	9c 01       	movw	r18, r24
    467e:	2f 5f       	subi	r18, 0xFF	; 255
    4680:	3f 4f       	sbci	r19, 0xFF	; 255
    4682:	20 93 ca 20 	sts	0x20CA, r18	; 0x8020ca <transfer+0x6>
    4686:	30 93 cb 20 	sts	0x20CB, r19	; 0x8020cb <transfer+0x7>
    468a:	2f 81       	ldd	r18, Y+7	; 0x07
    468c:	38 85       	ldd	r19, Y+8	; 0x08
    468e:	82 0f       	add	r24, r18
    4690:	93 1f       	adc	r25, r19
    4692:	fc 01       	movw	r30, r24
    4694:	20 81       	ld	r18, Z
    4696:	89 81       	ldd	r24, Y+1	; 0x01
    4698:	9a 81       	ldd	r25, Y+2	; 0x02
    469a:	fc 01       	movw	r30, r24
    469c:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    469e:	07 c0       	rjmp	.+14     	; 0x46ae <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	9a 81       	ldd	r25, Y+2	; 0x02
    46a4:	23 e0       	ldi	r18, 0x03	; 3
    46a6:	fc 01       	movw	r30, r24
    46a8:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    46aa:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <transfer+0xa>
	}
}
    46ae:	00 00       	nop
    46b0:	28 96       	adiw	r28, 0x08	; 8
    46b2:	cd bf       	out	0x3d, r28	; 61
    46b4:	de bf       	out	0x3e, r29	; 62
    46b6:	df 91       	pop	r29
    46b8:	cf 91       	pop	r28
    46ba:	08 95       	ret

000046bc <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    46bc:	cf 93       	push	r28
    46be:	df 93       	push	r29
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <twim_read_handler+0x6>
    46c2:	00 d0       	rcall	.+0      	; 0x46c4 <twim_read_handler+0x8>
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    46c8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer>
    46cc:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <transfer+0x1>
    46d0:	89 83       	std	Y+1, r24	; 0x01
    46d2:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    46d4:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <transfer+0x2>
    46d8:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <transfer+0x3>
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    46e0:	20 91 ca 20 	lds	r18, 0x20CA	; 0x8020ca <transfer+0x6>
    46e4:	30 91 cb 20 	lds	r19, 0x20CB	; 0x8020cb <transfer+0x7>
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	fc 01       	movw	r30, r24
    46ee:	80 85       	ldd	r24, Z+8	; 0x08
    46f0:	91 85       	ldd	r25, Z+9	; 0x09
    46f2:	28 17       	cp	r18, r24
    46f4:	39 07       	cpc	r19, r25
    46f6:	b0 f5       	brcc	.+108    	; 0x4764 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    46f8:	8b 81       	ldd	r24, Y+3	; 0x03
    46fa:	9c 81       	ldd	r25, Y+4	; 0x04
    46fc:	fc 01       	movw	r30, r24
    46fe:	86 81       	ldd	r24, Z+6	; 0x06
    4700:	97 81       	ldd	r25, Z+7	; 0x07
    4702:	8d 83       	std	Y+5, r24	; 0x05
    4704:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    4706:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <transfer+0x6>
    470a:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <transfer+0x7>
    470e:	9c 01       	movw	r18, r24
    4710:	2f 5f       	subi	r18, 0xFF	; 255
    4712:	3f 4f       	sbci	r19, 0xFF	; 255
    4714:	20 93 ca 20 	sts	0x20CA, r18	; 0x8020ca <transfer+0x6>
    4718:	30 93 cb 20 	sts	0x20CB, r19	; 0x8020cb <transfer+0x7>
    471c:	2d 81       	ldd	r18, Y+5	; 0x05
    471e:	3e 81       	ldd	r19, Y+6	; 0x06
    4720:	82 0f       	add	r24, r18
    4722:	93 1f       	adc	r25, r19
    4724:	29 81       	ldd	r18, Y+1	; 0x01
    4726:	3a 81       	ldd	r19, Y+2	; 0x02
    4728:	f9 01       	movw	r30, r18
    472a:	27 81       	ldd	r18, Z+7	; 0x07
    472c:	fc 01       	movw	r30, r24
    472e:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    4730:	20 91 ca 20 	lds	r18, 0x20CA	; 0x8020ca <transfer+0x6>
    4734:	30 91 cb 20 	lds	r19, 0x20CB	; 0x8020cb <transfer+0x7>
    4738:	8b 81       	ldd	r24, Y+3	; 0x03
    473a:	9c 81       	ldd	r25, Y+4	; 0x04
    473c:	fc 01       	movw	r30, r24
    473e:	80 85       	ldd	r24, Z+8	; 0x08
    4740:	91 85       	ldd	r25, Z+9	; 0x09
    4742:	28 17       	cp	r18, r24
    4744:	39 07       	cpc	r19, r25
    4746:	30 f4       	brcc	.+12     	; 0x4754 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    4748:	89 81       	ldd	r24, Y+1	; 0x01
    474a:	9a 81       	ldd	r25, Y+2	; 0x02
    474c:	22 e0       	ldi	r18, 0x02	; 2
    474e:	fc 01       	movw	r30, r24
    4750:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    4752:	10 c0       	rjmp	.+32     	; 0x4774 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	27 e0       	ldi	r18, 0x07	; 7
    475a:	fc 01       	movw	r30, r24
    475c:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    475e:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    4762:	08 c0       	rjmp	.+16     	; 0x4774 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4764:	89 81       	ldd	r24, Y+1	; 0x01
    4766:	9a 81       	ldd	r25, Y+2	; 0x02
    4768:	23 e0       	ldi	r18, 0x03	; 3
    476a:	fc 01       	movw	r30, r24
    476c:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    476e:	89 ef       	ldi	r24, 0xF9	; 249
    4770:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <transfer+0xa>
	}
}
    4774:	00 00       	nop
    4776:	26 96       	adiw	r28, 0x06	; 6
    4778:	cd bf       	out	0x3d, r28	; 61
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	df 91       	pop	r29
    477e:	cf 91       	pop	r28
    4780:	08 95       	ret

00004782 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    4782:	cf 93       	push	r28
    4784:	df 93       	push	r29
    4786:	1f 92       	push	r1
    4788:	cd b7       	in	r28, 0x3d	; 61
    478a:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    478c:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer>
    4790:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <transfer+0x1>
    4794:	fc 01       	movw	r30, r24
    4796:	84 81       	ldd	r24, Z+4	; 0x04
    4798:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    479a:	89 81       	ldd	r24, Y+1	; 0x01
    479c:	88 2f       	mov	r24, r24
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	88 70       	andi	r24, 0x08	; 8
    47a2:	99 27       	eor	r25, r25
    47a4:	89 2b       	or	r24, r25
    47a6:	99 f0       	breq	.+38     	; 0x47ce <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    47a8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer>
    47ac:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <transfer+0x1>
    47b0:	29 81       	ldd	r18, Y+1	; 0x01
    47b2:	28 60       	ori	r18, 0x08	; 8
    47b4:	fc 01       	movw	r30, r24
    47b6:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    47b8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer>
    47bc:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <transfer+0x1>
    47c0:	23 e0       	ldi	r18, 0x03	; 3
    47c2:	fc 01       	movw	r30, r24
    47c4:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    47c6:	86 ef       	ldi	r24, 0xF6	; 246
    47c8:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    47cc:	2a c0       	rjmp	.+84     	; 0x4822 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	88 2f       	mov	r24, r24
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	84 70       	andi	r24, 0x04	; 4
    47d6:	99 27       	eor	r25, r25
    47d8:	89 2b       	or	r24, r25
    47da:	39 f4       	brne	.+14     	; 0x47ea <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    47dc:	89 81       	ldd	r24, Y+1	; 0x01
    47de:	88 2f       	mov	r24, r24
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	80 71       	andi	r24, 0x10	; 16
    47e4:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    47e6:	89 2b       	or	r24, r25
    47e8:	59 f0       	breq	.+22     	; 0x4800 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    47ea:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer>
    47ee:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <transfer+0x1>
    47f2:	23 e0       	ldi	r18, 0x03	; 3
    47f4:	fc 01       	movw	r30, r24
    47f6:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    47f8:	8f ef       	ldi	r24, 0xFF	; 255
    47fa:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    47fe:	11 c0       	rjmp	.+34     	; 0x4822 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	88 2f       	mov	r24, r24
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	80 74       	andi	r24, 0x40	; 64
    4808:	99 27       	eor	r25, r25
    480a:	89 2b       	or	r24, r25
    480c:	11 f0       	breq	.+4      	; 0x4812 <twim_interrupt_handler+0x90>

		twim_write_handler();
    480e:	d5 de       	rcall	.-598    	; 0x45ba <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    4810:	08 c0       	rjmp	.+16     	; 0x4822 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	88 23       	and	r24, r24

		twim_read_handler();
    4816:	14 f4       	brge	.+4      	; 0x481c <twim_interrupt_handler+0x9a>
    4818:	51 df       	rcall	.-350    	; 0x46bc <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    481a:	03 c0       	rjmp	.+6      	; 0x4822 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    481c:	8b ef       	ldi	r24, 0xFB	; 251
    481e:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <transfer+0xa>
	}
}
    4822:	00 00       	nop
    4824:	0f 90       	pop	r0
    4826:	df 91       	pop	r29
    4828:	cf 91       	pop	r28
    482a:	08 95       	ret

0000482c <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	1f 92       	push	r1
    4832:	1f 92       	push	r1
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
    4838:	89 83       	std	Y+1, r24	; 0x01
    483a:	9a 83       	std	Y+2, r25	; 0x02
    483c:	89 81       	ldd	r24, Y+1	; 0x01
    483e:	9a 81       	ldd	r25, Y+2	; 0x02
    4840:	fc 01       	movw	r30, r24
    4842:	84 81       	ldd	r24, Z+4	; 0x04
    4844:	28 2f       	mov	r18, r24
    4846:	20 61       	ori	r18, 0x10	; 16
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	9a 81       	ldd	r25, Y+2	; 0x02
    484c:	fc 01       	movw	r30, r24
    484e:	24 83       	std	Z+4, r18	; 0x04
    4850:	00 00       	nop
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret

0000485c <usart_format_set>:
    485c:	cf 93       	push	r28
    485e:	df 93       	push	r29
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
    4864:	25 97       	sbiw	r28, 0x05	; 5
    4866:	cd bf       	out	0x3d, r28	; 61
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	89 83       	std	Y+1, r24	; 0x01
    486c:	9a 83       	std	Y+2, r25	; 0x02
    486e:	6b 83       	std	Y+3, r22	; 0x03
    4870:	4c 83       	std	Y+4, r20	; 0x04
    4872:	2d 83       	std	Y+5, r18	; 0x05
    4874:	9b 81       	ldd	r25, Y+3	; 0x03
    4876:	8c 81       	ldd	r24, Y+4	; 0x04
    4878:	89 2b       	or	r24, r25
    487a:	98 2f       	mov	r25, r24
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	88 23       	and	r24, r24
    4880:	11 f0       	breq	.+4      	; 0x4886 <usart_format_set+0x2a>
    4882:	88 e0       	ldi	r24, 0x08	; 8
    4884:	01 c0       	rjmp	.+2      	; 0x4888 <usart_format_set+0x2c>
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	89 2b       	or	r24, r25
    488a:	28 2f       	mov	r18, r24
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	9a 81       	ldd	r25, Y+2	; 0x02
    4890:	fc 01       	movw	r30, r24
    4892:	25 83       	std	Z+5, r18	; 0x05
    4894:	00 00       	nop
    4896:	25 96       	adiw	r28, 0x05	; 5
    4898:	cd bf       	out	0x3d, r28	; 61
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	08 95       	ret

000048a2 <usart_tx_enable>:
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	1f 92       	push	r1
    48a8:	1f 92       	push	r1
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	89 83       	std	Y+1, r24	; 0x01
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	9a 81       	ldd	r25, Y+2	; 0x02
    48b6:	fc 01       	movw	r30, r24
    48b8:	84 81       	ldd	r24, Z+4	; 0x04
    48ba:	28 2f       	mov	r18, r24
    48bc:	28 60       	ori	r18, 0x08	; 8
    48be:	89 81       	ldd	r24, Y+1	; 0x01
    48c0:	9a 81       	ldd	r25, Y+2	; 0x02
    48c2:	fc 01       	movw	r30, r24
    48c4:	24 83       	std	Z+4, r18	; 0x04
    48c6:	00 00       	nop
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	08 95       	ret

000048d2 <usart_set_mode>:
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <usart_set_mode+0x6>
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    48dc:	89 83       	std	Y+1, r24	; 0x01
    48de:	9a 83       	std	Y+2, r25	; 0x02
    48e0:	6b 83       	std	Y+3, r22	; 0x03
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	9a 81       	ldd	r25, Y+2	; 0x02
    48e6:	fc 01       	movw	r30, r24
    48e8:	85 81       	ldd	r24, Z+5	; 0x05
    48ea:	98 2f       	mov	r25, r24
    48ec:	9f 73       	andi	r25, 0x3F	; 63
    48ee:	8b 81       	ldd	r24, Y+3	; 0x03
    48f0:	89 2b       	or	r24, r25
    48f2:	28 2f       	mov	r18, r24
    48f4:	89 81       	ldd	r24, Y+1	; 0x01
    48f6:	9a 81       	ldd	r25, Y+2	; 0x02
    48f8:	fc 01       	movw	r30, r24
    48fa:	25 83       	std	Z+5, r18	; 0x05
    48fc:	00 00       	nop
    48fe:	23 96       	adiw	r28, 0x03	; 3
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	08 95       	ret

0000490a <usart_data_register_is_empty>:
    490a:	cf 93       	push	r28
    490c:	df 93       	push	r29
    490e:	1f 92       	push	r1
    4910:	1f 92       	push	r1
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	9a 83       	std	Y+2, r25	; 0x02
    491a:	89 81       	ldd	r24, Y+1	; 0x01
    491c:	9a 81       	ldd	r25, Y+2	; 0x02
    491e:	fc 01       	movw	r30, r24
    4920:	81 81       	ldd	r24, Z+1	; 0x01
    4922:	88 2f       	mov	r24, r24
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	80 72       	andi	r24, 0x20	; 32
    4928:	99 27       	eor	r25, r25
    492a:	21 e0       	ldi	r18, 0x01	; 1
    492c:	89 2b       	or	r24, r25
    492e:	09 f4       	brne	.+2      	; 0x4932 <usart_data_register_is_empty+0x28>
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	82 2f       	mov	r24, r18
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	08 95       	ret

0000493e <usart_rx_is_complete>:
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	1f 92       	push	r1
    4944:	1f 92       	push	r1
    4946:	cd b7       	in	r28, 0x3d	; 61
    4948:	de b7       	in	r29, 0x3e	; 62
    494a:	89 83       	std	Y+1, r24	; 0x01
    494c:	9a 83       	std	Y+2, r25	; 0x02
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	9a 81       	ldd	r25, Y+2	; 0x02
    4952:	fc 01       	movw	r30, r24
    4954:	81 81       	ldd	r24, Z+1	; 0x01
    4956:	88 2f       	mov	r24, r24
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	80 78       	andi	r24, 0x80	; 128
    495c:	99 27       	eor	r25, r25
    495e:	21 e0       	ldi	r18, 0x01	; 1
    4960:	89 2b       	or	r24, r25
    4962:	09 f4       	brne	.+2      	; 0x4966 <usart_rx_is_complete+0x28>
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	82 2f       	mov	r24, r18
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
    496c:	df 91       	pop	r29
    496e:	cf 91       	pop	r28
    4970:	08 95       	ret

00004972 <sysclk_get_main_hz>:
    4972:	cf 93       	push	r28
    4974:	df 93       	push	r29
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	98 e4       	ldi	r25, 0x48	; 72
    497e:	a8 ee       	ldi	r26, 0xE8	; 232
    4980:	b1 e0       	ldi	r27, 0x01	; 1
    4982:	bc 01       	movw	r22, r24
    4984:	cd 01       	movw	r24, r26
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	08 95       	ret

0000498c <sysclk_get_per4_hz>:
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	1f 92       	push	r1
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	19 82       	std	Y+1, r1	; 0x01
    4998:	ec df       	rcall	.-40     	; 0x4972 <sysclk_get_main_hz>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	29 81       	ldd	r18, Y+1	; 0x01
    49a0:	22 2f       	mov	r18, r18
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	04 c0       	rjmp	.+8      	; 0x49ae <sysclk_get_per4_hz+0x22>
    49a6:	b6 95       	lsr	r27
    49a8:	a7 95       	ror	r26
    49aa:	97 95       	ror	r25
    49ac:	87 95       	ror	r24
    49ae:	2a 95       	dec	r18
    49b0:	d2 f7       	brpl	.-12     	; 0x49a6 <sysclk_get_per4_hz+0x1a>
    49b2:	bc 01       	movw	r22, r24
    49b4:	cd 01       	movw	r24, r26
    49b6:	0f 90       	pop	r0
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	08 95       	ret

000049be <sysclk_get_per2_hz>:
    49be:	cf 93       	push	r28
    49c0:	df 93       	push	r29
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	e2 df       	rcall	.-60     	; 0x498c <sysclk_get_per4_hz>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	bc 01       	movw	r22, r24
    49ce:	cd 01       	movw	r24, r26
    49d0:	df 91       	pop	r29
    49d2:	cf 91       	pop	r28
    49d4:	08 95       	ret

000049d6 <sysclk_get_per_hz>:
    49d6:	cf 93       	push	r28
    49d8:	df 93       	push	r29
    49da:	cd b7       	in	r28, 0x3d	; 61
    49dc:	de b7       	in	r29, 0x3e	; 62
    49de:	ef df       	rcall	.-34     	; 0x49be <sysclk_get_per2_hz>
    49e0:	dc 01       	movw	r26, r24
    49e2:	cb 01       	movw	r24, r22
    49e4:	bc 01       	movw	r22, r24
    49e6:	cd 01       	movw	r24, r26
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	08 95       	ret

000049ee <sysclk_enable_peripheral_clock>:
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	1f 92       	push	r1
    49f4:	1f 92       	push	r1
    49f6:	cd b7       	in	r28, 0x3d	; 61
    49f8:	de b7       	in	r29, 0x3e	; 62
    49fa:	89 83       	std	Y+1, r24	; 0x01
    49fc:	9a 83       	std	Y+2, r25	; 0x02
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	9a 81       	ldd	r25, Y+2	; 0x02
    4a02:	89 2b       	or	r24, r25
    4a04:	09 f4       	brne	.+2      	; 0x4a08 <sysclk_enable_peripheral_clock+0x1a>
    4a06:	85 c1       	rjmp	.+778    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a0c:	80 3c       	cpi	r24, 0xC0	; 192
    4a0e:	91 05       	cpc	r25, r1
    4a10:	29 f4       	brne	.+10     	; 0x4a1c <sysclk_enable_peripheral_clock+0x2e>
    4a12:	60 e1       	ldi	r22, 0x10	; 16
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a1a:	7b c1       	rjmp	.+758    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a1c:	89 81       	ldd	r24, Y+1	; 0x01
    4a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a20:	80 34       	cpi	r24, 0x40	; 64
    4a22:	94 40       	sbci	r25, 0x04	; 4
    4a24:	29 f4       	brne	.+10     	; 0x4a30 <sysclk_enable_peripheral_clock+0x42>
    4a26:	68 e0       	ldi	r22, 0x08	; 8
    4a28:	80 e0       	ldi	r24, 0x00	; 0
    4a2a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a2e:	71 c1       	rjmp	.+738    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	9a 81       	ldd	r25, Y+2	; 0x02
    4a34:	81 15       	cp	r24, r1
    4a36:	94 40       	sbci	r25, 0x04	; 4
    4a38:	29 f4       	brne	.+10     	; 0x4a44 <sysclk_enable_peripheral_clock+0x56>
    4a3a:	64 e0       	ldi	r22, 0x04	; 4
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a42:	67 c1       	rjmp	.+718    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	9a 81       	ldd	r25, Y+2	; 0x02
    4a48:	80 38       	cpi	r24, 0x80	; 128
    4a4a:	91 40       	sbci	r25, 0x01	; 1
    4a4c:	29 f4       	brne	.+10     	; 0x4a58 <sysclk_enable_peripheral_clock+0x6a>
    4a4e:	62 e0       	ldi	r22, 0x02	; 2
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a56:	5d c1       	rjmp	.+698    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a58:	89 81       	ldd	r24, Y+1	; 0x01
    4a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5c:	81 15       	cp	r24, r1
    4a5e:	91 40       	sbci	r25, 0x01	; 1
    4a60:	29 f4       	brne	.+10     	; 0x4a6c <sysclk_enable_peripheral_clock+0x7e>
    4a62:	61 e0       	ldi	r22, 0x01	; 1
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a6a:	53 c1       	rjmp	.+678    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a6c:	89 81       	ldd	r24, Y+1	; 0x01
    4a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a70:	80 38       	cpi	r24, 0x80	; 128
    4a72:	93 40       	sbci	r25, 0x03	; 3
    4a74:	29 f4       	brne	.+10     	; 0x4a80 <sysclk_enable_peripheral_clock+0x92>
    4a76:	61 e0       	ldi	r22, 0x01	; 1
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a7e:	49 c1       	rjmp	.+658    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a80:	89 81       	ldd	r24, Y+1	; 0x01
    4a82:	9a 81       	ldd	r25, Y+2	; 0x02
    4a84:	80 39       	cpi	r24, 0x90	; 144
    4a86:	93 40       	sbci	r25, 0x03	; 3
    4a88:	29 f4       	brne	.+10     	; 0x4a94 <sysclk_enable_peripheral_clock+0xa6>
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	82 e0       	ldi	r24, 0x02	; 2
    4a8e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4a92:	3f c1       	rjmp	.+638    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	9a 81       	ldd	r25, Y+2	; 0x02
    4a98:	81 15       	cp	r24, r1
    4a9a:	92 40       	sbci	r25, 0x02	; 2
    4a9c:	29 f4       	brne	.+10     	; 0x4aa8 <sysclk_enable_peripheral_clock+0xba>
    4a9e:	62 e0       	ldi	r22, 0x02	; 2
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4aa6:	35 c1       	rjmp	.+618    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4aac:	80 34       	cpi	r24, 0x40	; 64
    4aae:	92 40       	sbci	r25, 0x02	; 2
    4ab0:	29 f4       	brne	.+10     	; 0x4abc <sysclk_enable_peripheral_clock+0xce>
    4ab2:	62 e0       	ldi	r22, 0x02	; 2
    4ab4:	82 e0       	ldi	r24, 0x02	; 2
    4ab6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4aba:	2b c1       	rjmp	.+598    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac0:	81 15       	cp	r24, r1
    4ac2:	93 40       	sbci	r25, 0x03	; 3
    4ac4:	29 f4       	brne	.+10     	; 0x4ad0 <sysclk_enable_peripheral_clock+0xe2>
    4ac6:	64 e0       	ldi	r22, 0x04	; 4
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4ace:	21 c1       	rjmp	.+578    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad4:	80 32       	cpi	r24, 0x20	; 32
    4ad6:	93 40       	sbci	r25, 0x03	; 3
    4ad8:	29 f4       	brne	.+10     	; 0x4ae4 <sysclk_enable_peripheral_clock+0xf6>
    4ada:	64 e0       	ldi	r22, 0x04	; 4
    4adc:	82 e0       	ldi	r24, 0x02	; 2
    4ade:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4ae2:	17 c1       	rjmp	.+558    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4ae4:	89 81       	ldd	r24, Y+1	; 0x01
    4ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae8:	81 15       	cp	r24, r1
    4aea:	98 40       	sbci	r25, 0x08	; 8
    4aec:	29 f4       	brne	.+10     	; 0x4af8 <sysclk_enable_peripheral_clock+0x10a>
    4aee:	61 e0       	ldi	r22, 0x01	; 1
    4af0:	83 e0       	ldi	r24, 0x03	; 3
    4af2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4af6:	0d c1       	rjmp	.+538    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4af8:	89 81       	ldd	r24, Y+1	; 0x01
    4afa:	9a 81       	ldd	r25, Y+2	; 0x02
    4afc:	81 15       	cp	r24, r1
    4afe:	99 40       	sbci	r25, 0x09	; 9
    4b00:	29 f4       	brne	.+10     	; 0x4b0c <sysclk_enable_peripheral_clock+0x11e>
    4b02:	61 e0       	ldi	r22, 0x01	; 1
    4b04:	84 e0       	ldi	r24, 0x04	; 4
    4b06:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b0a:	03 c1       	rjmp	.+518    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b10:	81 15       	cp	r24, r1
    4b12:	9a 40       	sbci	r25, 0x0A	; 10
    4b14:	29 f4       	brne	.+10     	; 0x4b20 <sysclk_enable_peripheral_clock+0x132>
    4b16:	61 e0       	ldi	r22, 0x01	; 1
    4b18:	85 e0       	ldi	r24, 0x05	; 5
    4b1a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b1e:	f9 c0       	rjmp	.+498    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	9a 81       	ldd	r25, Y+2	; 0x02
    4b24:	81 15       	cp	r24, r1
    4b26:	9b 40       	sbci	r25, 0x0B	; 11
    4b28:	29 f4       	brne	.+10     	; 0x4b34 <sysclk_enable_peripheral_clock+0x146>
    4b2a:	61 e0       	ldi	r22, 0x01	; 1
    4b2c:	86 e0       	ldi	r24, 0x06	; 6
    4b2e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b32:	ef c0       	rjmp	.+478    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	9a 81       	ldd	r25, Y+2	; 0x02
    4b38:	80 34       	cpi	r24, 0x40	; 64
    4b3a:	98 40       	sbci	r25, 0x08	; 8
    4b3c:	29 f4       	brne	.+10     	; 0x4b48 <sysclk_enable_peripheral_clock+0x15a>
    4b3e:	62 e0       	ldi	r22, 0x02	; 2
    4b40:	83 e0       	ldi	r24, 0x03	; 3
    4b42:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b46:	e5 c0       	rjmp	.+458    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4c:	80 34       	cpi	r24, 0x40	; 64
    4b4e:	99 40       	sbci	r25, 0x09	; 9
    4b50:	29 f4       	brne	.+10     	; 0x4b5c <sysclk_enable_peripheral_clock+0x16e>
    4b52:	62 e0       	ldi	r22, 0x02	; 2
    4b54:	84 e0       	ldi	r24, 0x04	; 4
    4b56:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b5a:	db c0       	rjmp	.+438    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b60:	80 34       	cpi	r24, 0x40	; 64
    4b62:	9a 40       	sbci	r25, 0x0A	; 10
    4b64:	29 f4       	brne	.+10     	; 0x4b70 <sysclk_enable_peripheral_clock+0x182>
    4b66:	62 e0       	ldi	r22, 0x02	; 2
    4b68:	85 e0       	ldi	r24, 0x05	; 5
    4b6a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b6e:	d1 c0       	rjmp	.+418    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	9a 81       	ldd	r25, Y+2	; 0x02
    4b74:	80 34       	cpi	r24, 0x40	; 64
    4b76:	9b 40       	sbci	r25, 0x0B	; 11
    4b78:	29 f4       	brne	.+10     	; 0x4b84 <sysclk_enable_peripheral_clock+0x196>
    4b7a:	62 e0       	ldi	r22, 0x02	; 2
    4b7c:	86 e0       	ldi	r24, 0x06	; 6
    4b7e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b82:	c7 c0       	rjmp	.+398    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b84:	89 81       	ldd	r24, Y+1	; 0x01
    4b86:	9a 81       	ldd	r25, Y+2	; 0x02
    4b88:	80 39       	cpi	r24, 0x90	; 144
    4b8a:	98 40       	sbci	r25, 0x08	; 8
    4b8c:	29 f4       	brne	.+10     	; 0x4b98 <sysclk_enable_peripheral_clock+0x1aa>
    4b8e:	64 e0       	ldi	r22, 0x04	; 4
    4b90:	83 e0       	ldi	r24, 0x03	; 3
    4b92:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4b96:	bd c0       	rjmp	.+378    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	80 39       	cpi	r24, 0x90	; 144
    4b9e:	99 40       	sbci	r25, 0x09	; 9
    4ba0:	29 f4       	brne	.+10     	; 0x4bac <sysclk_enable_peripheral_clock+0x1be>
    4ba2:	64 e0       	ldi	r22, 0x04	; 4
    4ba4:	84 e0       	ldi	r24, 0x04	; 4
    4ba6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4baa:	b3 c0       	rjmp	.+358    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb0:	80 39       	cpi	r24, 0x90	; 144
    4bb2:	9a 40       	sbci	r25, 0x0A	; 10
    4bb4:	29 f4       	brne	.+10     	; 0x4bc0 <sysclk_enable_peripheral_clock+0x1d2>
    4bb6:	64 e0       	ldi	r22, 0x04	; 4
    4bb8:	85 e0       	ldi	r24, 0x05	; 5
    4bba:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4bbe:	a9 c0       	rjmp	.+338    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc4:	80 39       	cpi	r24, 0x90	; 144
    4bc6:	9b 40       	sbci	r25, 0x0B	; 11
    4bc8:	29 f4       	brne	.+10     	; 0x4bd4 <sysclk_enable_peripheral_clock+0x1e6>
    4bca:	64 e0       	ldi	r22, 0x04	; 4
    4bcc:	86 e0       	ldi	r24, 0x06	; 6
    4bce:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4bd2:	9f c0       	rjmp	.+318    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd8:	80 3c       	cpi	r24, 0xC0	; 192
    4bda:	98 40       	sbci	r25, 0x08	; 8
    4bdc:	29 f4       	brne	.+10     	; 0x4be8 <sysclk_enable_peripheral_clock+0x1fa>
    4bde:	68 e0       	ldi	r22, 0x08	; 8
    4be0:	83 e0       	ldi	r24, 0x03	; 3
    4be2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4be6:	95 c0       	rjmp	.+298    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	80 3c       	cpi	r24, 0xC0	; 192
    4bee:	99 40       	sbci	r25, 0x09	; 9
    4bf0:	29 f4       	brne	.+10     	; 0x4bfc <sysclk_enable_peripheral_clock+0x20e>
    4bf2:	68 e0       	ldi	r22, 0x08	; 8
    4bf4:	84 e0       	ldi	r24, 0x04	; 4
    4bf6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4bfa:	8b c0       	rjmp	.+278    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    4c00:	80 3c       	cpi	r24, 0xC0	; 192
    4c02:	9a 40       	sbci	r25, 0x0A	; 10
    4c04:	29 f4       	brne	.+10     	; 0x4c10 <sysclk_enable_peripheral_clock+0x222>
    4c06:	68 e0       	ldi	r22, 0x08	; 8
    4c08:	85 e0       	ldi	r24, 0x05	; 5
    4c0a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c0e:	81 c0       	rjmp	.+258    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	9a 81       	ldd	r25, Y+2	; 0x02
    4c14:	80 3c       	cpi	r24, 0xC0	; 192
    4c16:	9b 40       	sbci	r25, 0x0B	; 11
    4c18:	29 f4       	brne	.+10     	; 0x4c24 <sysclk_enable_peripheral_clock+0x236>
    4c1a:	68 e0       	ldi	r22, 0x08	; 8
    4c1c:	86 e0       	ldi	r24, 0x06	; 6
    4c1e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c22:	77 c0       	rjmp	.+238    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c24:	89 81       	ldd	r24, Y+1	; 0x01
    4c26:	9a 81       	ldd	r25, Y+2	; 0x02
    4c28:	80 3a       	cpi	r24, 0xA0	; 160
    4c2a:	98 40       	sbci	r25, 0x08	; 8
    4c2c:	29 f4       	brne	.+10     	; 0x4c38 <sysclk_enable_peripheral_clock+0x24a>
    4c2e:	60 e1       	ldi	r22, 0x10	; 16
    4c30:	83 e0       	ldi	r24, 0x03	; 3
    4c32:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c36:	6d c0       	rjmp	.+218    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c38:	89 81       	ldd	r24, Y+1	; 0x01
    4c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3c:	80 3a       	cpi	r24, 0xA0	; 160
    4c3e:	99 40       	sbci	r25, 0x09	; 9
    4c40:	29 f4       	brne	.+10     	; 0x4c4c <sysclk_enable_peripheral_clock+0x25e>
    4c42:	60 e1       	ldi	r22, 0x10	; 16
    4c44:	84 e0       	ldi	r24, 0x04	; 4
    4c46:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c4a:	63 c0       	rjmp	.+198    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	80 3a       	cpi	r24, 0xA0	; 160
    4c52:	9a 40       	sbci	r25, 0x0A	; 10
    4c54:	29 f4       	brne	.+10     	; 0x4c60 <sysclk_enable_peripheral_clock+0x272>
    4c56:	60 e1       	ldi	r22, 0x10	; 16
    4c58:	85 e0       	ldi	r24, 0x05	; 5
    4c5a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c5e:	59 c0       	rjmp	.+178    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	9a 81       	ldd	r25, Y+2	; 0x02
    4c64:	80 3a       	cpi	r24, 0xA0	; 160
    4c66:	9b 40       	sbci	r25, 0x0B	; 11
    4c68:	29 f4       	brne	.+10     	; 0x4c74 <sysclk_enable_peripheral_clock+0x286>
    4c6a:	60 e1       	ldi	r22, 0x10	; 16
    4c6c:	86 e0       	ldi	r24, 0x06	; 6
    4c6e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c72:	4f c0       	rjmp	.+158    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	9a 81       	ldd	r25, Y+2	; 0x02
    4c78:	80 3b       	cpi	r24, 0xB0	; 176
    4c7a:	98 40       	sbci	r25, 0x08	; 8
    4c7c:	29 f4       	brne	.+10     	; 0x4c88 <sysclk_enable_peripheral_clock+0x29a>
    4c7e:	60 e2       	ldi	r22, 0x20	; 32
    4c80:	83 e0       	ldi	r24, 0x03	; 3
    4c82:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c86:	45 c0       	rjmp	.+138    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8c:	80 3b       	cpi	r24, 0xB0	; 176
    4c8e:	99 40       	sbci	r25, 0x09	; 9
    4c90:	29 f4       	brne	.+10     	; 0x4c9c <sysclk_enable_peripheral_clock+0x2ae>
    4c92:	60 e2       	ldi	r22, 0x20	; 32
    4c94:	84 e0       	ldi	r24, 0x04	; 4
    4c96:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4c9a:	3b c0       	rjmp	.+118    	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
    4c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca0:	80 3b       	cpi	r24, 0xB0	; 176
    4ca2:	9a 40       	sbci	r25, 0x0A	; 10
    4ca4:	29 f4       	brne	.+10     	; 0x4cb0 <sysclk_enable_peripheral_clock+0x2c2>
    4ca6:	60 e2       	ldi	r22, 0x20	; 32
    4ca8:	85 e0       	ldi	r24, 0x05	; 5
    4caa:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4cae:	31 c0       	rjmp	.+98     	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4cb0:	89 81       	ldd	r24, Y+1	; 0x01
    4cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb4:	80 3b       	cpi	r24, 0xB0	; 176
    4cb6:	9b 40       	sbci	r25, 0x0B	; 11
    4cb8:	29 f4       	brne	.+10     	; 0x4cc4 <sysclk_enable_peripheral_clock+0x2d6>
    4cba:	60 e2       	ldi	r22, 0x20	; 32
    4cbc:	86 e0       	ldi	r24, 0x06	; 6
    4cbe:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4cc2:	27 c0       	rjmp	.+78     	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4cc4:	89 81       	ldd	r24, Y+1	; 0x01
    4cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc8:	80 38       	cpi	r24, 0x80	; 128
    4cca:	94 40       	sbci	r25, 0x04	; 4
    4ccc:	29 f4       	brne	.+10     	; 0x4cd8 <sysclk_enable_peripheral_clock+0x2ea>
    4cce:	60 e4       	ldi	r22, 0x40	; 64
    4cd0:	83 e0       	ldi	r24, 0x03	; 3
    4cd2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4cd6:	1d c0       	rjmp	.+58     	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4cd8:	89 81       	ldd	r24, Y+1	; 0x01
    4cda:	9a 81       	ldd	r25, Y+2	; 0x02
    4cdc:	80 39       	cpi	r24, 0x90	; 144
    4cde:	94 40       	sbci	r25, 0x04	; 4
    4ce0:	29 f4       	brne	.+10     	; 0x4cec <sysclk_enable_peripheral_clock+0x2fe>
    4ce2:	60 e4       	ldi	r22, 0x40	; 64
    4ce4:	84 e0       	ldi	r24, 0x04	; 4
    4ce6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4cea:	13 c0       	rjmp	.+38     	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
    4cee:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf0:	80 3a       	cpi	r24, 0xA0	; 160
    4cf2:	94 40       	sbci	r25, 0x04	; 4
    4cf4:	29 f4       	brne	.+10     	; 0x4d00 <sysclk_enable_peripheral_clock+0x312>
    4cf6:	60 e4       	ldi	r22, 0x40	; 64
    4cf8:	85 e0       	ldi	r24, 0x05	; 5
    4cfa:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4cfe:	09 c0       	rjmp	.+18     	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	9a 81       	ldd	r25, Y+2	; 0x02
    4d04:	80 3b       	cpi	r24, 0xB0	; 176
    4d06:	94 40       	sbci	r25, 0x04	; 4
    4d08:	21 f4       	brne	.+8      	; 0x4d12 <sysclk_enable_peripheral_clock+0x324>
    4d0a:	60 e4       	ldi	r22, 0x40	; 64
    4d0c:	86 e0       	ldi	r24, 0x06	; 6
    4d0e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    4d12:	00 00       	nop
    4d14:	0f 90       	pop	r0
    4d16:	0f 90       	pop	r0
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	08 95       	ret

00004d1e <usart_init_rs232>:
    4d1e:	0f 93       	push	r16
    4d20:	1f 93       	push	r17
    4d22:	cf 93       	push	r28
    4d24:	df 93       	push	r29
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
    4d2a:	25 97       	sbiw	r28, 0x05	; 5
    4d2c:	cd bf       	out	0x3d, r28	; 61
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	8a 83       	std	Y+2, r24	; 0x02
    4d32:	9b 83       	std	Y+3, r25	; 0x03
    4d34:	6c 83       	std	Y+4, r22	; 0x04
    4d36:	7d 83       	std	Y+5, r23	; 0x05
    4d38:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d3c:	58 de       	rcall	.-848    	; 0x49ee <sysclk_enable_peripheral_clock>
    4d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d40:	9b 81       	ldd	r25, Y+3	; 0x03
    4d42:	60 e0       	ldi	r22, 0x00	; 0
    4d44:	c6 dd       	rcall	.-1140   	; 0x48d2 <usart_set_mode>
    4d46:	8c 81       	ldd	r24, Y+4	; 0x04
    4d48:	9d 81       	ldd	r25, Y+5	; 0x05
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	26 81       	ldd	r18, Z+6	; 0x06
    4d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d50:	9d 81       	ldd	r25, Y+5	; 0x05
    4d52:	fc 01       	movw	r30, r24
    4d54:	45 81       	ldd	r20, Z+5	; 0x05
    4d56:	8c 81       	ldd	r24, Y+4	; 0x04
    4d58:	9d 81       	ldd	r25, Y+5	; 0x05
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	34 81       	ldd	r19, Z+4	; 0x04
    4d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d60:	9b 81       	ldd	r25, Y+3	; 0x03
    4d62:	63 2f       	mov	r22, r19
    4d64:	7b dd       	rcall	.-1290   	; 0x485c <usart_format_set>
    4d66:	37 de       	rcall	.-914    	; 0x49d6 <sysclk_get_per_hz>
    4d68:	9b 01       	movw	r18, r22
    4d6a:	ac 01       	movw	r20, r24
    4d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d70:	fc 01       	movw	r30, r24
    4d72:	80 81       	ld	r24, Z
    4d74:	91 81       	ldd	r25, Z+1	; 0x01
    4d76:	a2 81       	ldd	r26, Z+2	; 0x02
    4d78:	b3 81       	ldd	r27, Z+3	; 0x03
    4d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d7e:	89 01       	movw	r16, r18
    4d80:	9a 01       	movw	r18, r20
    4d82:	ac 01       	movw	r20, r24
    4d84:	bd 01       	movw	r22, r26
    4d86:	cf 01       	movw	r24, r30
    4d88:	48 d0       	rcall	.+144    	; 0x4e1a <usart_set_baudrate>
    4d8a:	89 83       	std	Y+1, r24	; 0x01
    4d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d90:	88 dd       	rcall	.-1264   	; 0x48a2 <usart_tx_enable>
    4d92:	8a 81       	ldd	r24, Y+2	; 0x02
    4d94:	9b 81       	ldd	r25, Y+3	; 0x03
    4d96:	4a dd       	rcall	.-1388   	; 0x482c <usart_rx_enable>
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	25 96       	adiw	r28, 0x05	; 5
    4d9c:	cd bf       	out	0x3d, r28	; 61
    4d9e:	de bf       	out	0x3e, r29	; 62
    4da0:	df 91       	pop	r29
    4da2:	cf 91       	pop	r28
    4da4:	1f 91       	pop	r17
    4da6:	0f 91       	pop	r16
    4da8:	08 95       	ret

00004daa <usart_putchar>:
    4daa:	cf 93       	push	r28
    4dac:	df 93       	push	r29
    4dae:	00 d0       	rcall	.+0      	; 0x4db0 <usart_putchar+0x6>
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	89 83       	std	Y+1, r24	; 0x01
    4db6:	9a 83       	std	Y+2, r25	; 0x02
    4db8:	6b 83       	std	Y+3, r22	; 0x03
    4dba:	00 00       	nop
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc0:	a4 dd       	rcall	.-1208   	; 0x490a <usart_data_register_is_empty>
    4dc2:	98 2f       	mov	r25, r24
    4dc4:	81 e0       	ldi	r24, 0x01	; 1
    4dc6:	89 27       	eor	r24, r25
    4dc8:	88 23       	and	r24, r24
    4dca:	c1 f7       	brne	.-16     	; 0x4dbc <usart_putchar+0x12>
    4dcc:	89 81       	ldd	r24, Y+1	; 0x01
    4dce:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	20 83       	st	Z, r18
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	23 96       	adiw	r28, 0x03	; 3
    4ddc:	cd bf       	out	0x3d, r28	; 61
    4dde:	de bf       	out	0x3e, r29	; 62
    4de0:	df 91       	pop	r29
    4de2:	cf 91       	pop	r28
    4de4:	08 95       	ret

00004de6 <usart_getchar>:
    4de6:	cf 93       	push	r28
    4de8:	df 93       	push	r29
    4dea:	1f 92       	push	r1
    4dec:	1f 92       	push	r1
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	89 83       	std	Y+1, r24	; 0x01
    4df4:	9a 83       	std	Y+2, r25	; 0x02
    4df6:	00 00       	nop
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfc:	a0 dd       	rcall	.-1216   	; 0x493e <usart_rx_is_complete>
    4dfe:	98 2f       	mov	r25, r24
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	89 27       	eor	r24, r25
    4e04:	88 23       	and	r24, r24
    4e06:	c1 f7       	brne	.-16     	; 0x4df8 <usart_getchar+0x12>
    4e08:	89 81       	ldd	r24, Y+1	; 0x01
    4e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	80 81       	ld	r24, Z
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
    4e14:	df 91       	pop	r29
    4e16:	cf 91       	pop	r28
    4e18:	08 95       	ret

00004e1a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    4e1a:	ef 92       	push	r14
    4e1c:	ff 92       	push	r15
    4e1e:	0f 93       	push	r16
    4e20:	1f 93       	push	r17
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	6f 97       	sbiw	r28, 0x1f	; 31
    4e2c:	cd bf       	out	0x3d, r28	; 61
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	8e 8b       	std	Y+22, r24	; 0x16
    4e32:	9f 8b       	std	Y+23, r25	; 0x17
    4e34:	48 8f       	std	Y+24, r20	; 0x18
    4e36:	59 8f       	std	Y+25, r21	; 0x19
    4e38:	6a 8f       	std	Y+26, r22	; 0x1a
    4e3a:	7b 8f       	std	Y+27, r23	; 0x1b
    4e3c:	0c 8f       	std	Y+28, r16	; 0x1c
    4e3e:	1d 8f       	std	Y+29, r17	; 0x1d
    4e40:	2e 8f       	std	Y+30, r18	; 0x1e
    4e42:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    4e44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e48:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4e4a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4e4c:	68 94       	set
    4e4e:	12 f8       	bld	r1, 2
    4e50:	b6 95       	lsr	r27
    4e52:	a7 95       	ror	r26
    4e54:	97 95       	ror	r25
    4e56:	87 95       	ror	r24
    4e58:	16 94       	lsr	r1
    4e5a:	d1 f7       	brne	.-12     	; 0x4e50 <usart_set_baudrate+0x36>
    4e5c:	8e 87       	std	Y+14, r24	; 0x0e
    4e5e:	9f 87       	std	Y+15, r25	; 0x0f
    4e60:	a8 8b       	std	Y+16, r26	; 0x10
    4e62:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    4e64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e68:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4e6a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4e6c:	07 2e       	mov	r0, r23
    4e6e:	76 e1       	ldi	r23, 0x16	; 22
    4e70:	b6 95       	lsr	r27
    4e72:	a7 95       	ror	r26
    4e74:	97 95       	ror	r25
    4e76:	87 95       	ror	r24
    4e78:	7a 95       	dec	r23
    4e7a:	d1 f7       	brne	.-12     	; 0x4e70 <usart_set_baudrate+0x56>
    4e7c:	70 2d       	mov	r23, r0
    4e7e:	8a 87       	std	Y+10, r24	; 0x0a
    4e80:	9b 87       	std	Y+11, r25	; 0x0b
    4e82:	ac 87       	std	Y+12, r26	; 0x0c
    4e84:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    4e86:	8e 89       	ldd	r24, Y+22	; 0x16
    4e88:	9f 89       	ldd	r25, Y+23	; 0x17
    4e8a:	fc 01       	movw	r30, r24
    4e8c:	84 81       	ldd	r24, Z+4	; 0x04
    4e8e:	88 2f       	mov	r24, r24
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	84 70       	andi	r24, 0x04	; 4
    4e94:	99 27       	eor	r25, r25
    4e96:	89 2b       	or	r24, r25
    4e98:	c1 f4       	brne	.+48     	; 0x4eca <usart_set_baudrate+0xb0>
		max_rate /= 2;
    4e9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e9e:	a8 89       	ldd	r26, Y+16	; 0x10
    4ea0:	b9 89       	ldd	r27, Y+17	; 0x11
    4ea2:	b6 95       	lsr	r27
    4ea4:	a7 95       	ror	r26
    4ea6:	97 95       	ror	r25
    4ea8:	87 95       	ror	r24
    4eaa:	8e 87       	std	Y+14, r24	; 0x0e
    4eac:	9f 87       	std	Y+15, r25	; 0x0f
    4eae:	a8 8b       	std	Y+16, r26	; 0x10
    4eb0:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    4eb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4eb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4eb6:	ac 85       	ldd	r26, Y+12	; 0x0c
    4eb8:	bd 85       	ldd	r27, Y+13	; 0x0d
    4eba:	b6 95       	lsr	r27
    4ebc:	a7 95       	ror	r26
    4ebe:	97 95       	ror	r25
    4ec0:	87 95       	ror	r24
    4ec2:	8a 87       	std	Y+10, r24	; 0x0a
    4ec4:	9b 87       	std	Y+11, r25	; 0x0b
    4ec6:	ac 87       	std	Y+12, r26	; 0x0c
    4ec8:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    4eca:	28 8d       	ldd	r18, Y+24	; 0x18
    4ecc:	39 8d       	ldd	r19, Y+25	; 0x19
    4ece:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4ed0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ed6:	a8 89       	ldd	r26, Y+16	; 0x10
    4ed8:	b9 89       	ldd	r27, Y+17	; 0x11
    4eda:	82 17       	cp	r24, r18
    4edc:	93 07       	cpc	r25, r19
    4ede:	a4 07       	cpc	r26, r20
    4ee0:	b5 07       	cpc	r27, r21
    4ee2:	68 f0       	brcs	.+26     	; 0x4efe <usart_set_baudrate+0xe4>
    4ee4:	28 8d       	ldd	r18, Y+24	; 0x18
    4ee6:	39 8d       	ldd	r19, Y+25	; 0x19
    4ee8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4eea:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    4eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ef0:	ac 85       	ldd	r26, Y+12	; 0x0c
    4ef2:	bd 85       	ldd	r27, Y+13	; 0x0d
    4ef4:	28 17       	cp	r18, r24
    4ef6:	39 07       	cpc	r19, r25
    4ef8:	4a 07       	cpc	r20, r26
    4efa:	5b 07       	cpc	r21, r27
    4efc:	10 f4       	brcc	.+4      	; 0x4f02 <usart_set_baudrate+0xe8>
		return false;
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	40 c1       	rjmp	.+640    	; 0x5182 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    4f02:	8e 89       	ldd	r24, Y+22	; 0x16
    4f04:	9f 89       	ldd	r25, Y+23	; 0x17
    4f06:	fc 01       	movw	r30, r24
    4f08:	84 81       	ldd	r24, Z+4	; 0x04
    4f0a:	88 2f       	mov	r24, r24
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	84 70       	andi	r24, 0x04	; 4
    4f10:	99 27       	eor	r25, r25
    4f12:	89 2b       	or	r24, r25
    4f14:	61 f4       	brne	.+24     	; 0x4f2e <usart_set_baudrate+0x114>
		baud *= 2;
    4f16:	88 8d       	ldd	r24, Y+24	; 0x18
    4f18:	99 8d       	ldd	r25, Y+25	; 0x19
    4f1a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4f1c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4f1e:	88 0f       	add	r24, r24
    4f20:	99 1f       	adc	r25, r25
    4f22:	aa 1f       	adc	r26, r26
    4f24:	bb 1f       	adc	r27, r27
    4f26:	88 8f       	std	Y+24, r24	; 0x18
    4f28:	99 8f       	std	Y+25, r25	; 0x19
    4f2a:	aa 8f       	std	Y+26, r26	; 0x1a
    4f2c:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    4f2e:	8f ef       	ldi	r24, 0xFF	; 255
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	a0 e0       	ldi	r26, 0x00	; 0
    4f34:	b0 e0       	ldi	r27, 0x00	; 0
    4f36:	8e 83       	std	Y+6, r24	; 0x06
    4f38:	9f 83       	std	Y+7, r25	; 0x07
    4f3a:	a8 87       	std	Y+8, r26	; 0x08
    4f3c:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    4f3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4f40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4f42:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4f44:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4f46:	28 8d       	ldd	r18, Y+24	; 0x18
    4f48:	39 8d       	ldd	r19, Y+25	; 0x19
    4f4a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4f4c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4f4e:	bc 01       	movw	r22, r24
    4f50:	cd 01       	movw	r24, r26
    4f52:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__udivmodsi4>
    4f56:	da 01       	movw	r26, r20
    4f58:	c9 01       	movw	r24, r18
    4f5a:	8a 8b       	std	Y+18, r24	; 0x12
    4f5c:	9b 8b       	std	Y+19, r25	; 0x13
    4f5e:	ac 8b       	std	Y+20, r26	; 0x14
    4f60:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    4f62:	89 ef       	ldi	r24, 0xF9	; 249
    4f64:	89 83       	std	Y+1, r24	; 0x01
    4f66:	28 c0       	rjmp	.+80     	; 0x4fb8 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    4f68:	2a 89       	ldd	r18, Y+18	; 0x12
    4f6a:	3b 89       	ldd	r19, Y+19	; 0x13
    4f6c:	4c 89       	ldd	r20, Y+20	; 0x14
    4f6e:	5d 89       	ldd	r21, Y+21	; 0x15
    4f70:	8e 81       	ldd	r24, Y+6	; 0x06
    4f72:	9f 81       	ldd	r25, Y+7	; 0x07
    4f74:	a8 85       	ldd	r26, Y+8	; 0x08
    4f76:	b9 85       	ldd	r27, Y+9	; 0x09
    4f78:	28 17       	cp	r18, r24
    4f7a:	39 07       	cpc	r19, r25
    4f7c:	4a 07       	cpc	r20, r26
    4f7e:	5b 07       	cpc	r21, r27
    4f80:	f8 f0       	brcs	.+62     	; 0x4fc0 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    4f82:	8e 81       	ldd	r24, Y+6	; 0x06
    4f84:	9f 81       	ldd	r25, Y+7	; 0x07
    4f86:	a8 85       	ldd	r26, Y+8	; 0x08
    4f88:	b9 85       	ldd	r27, Y+9	; 0x09
    4f8a:	88 0f       	add	r24, r24
    4f8c:	99 1f       	adc	r25, r25
    4f8e:	aa 1f       	adc	r26, r26
    4f90:	bb 1f       	adc	r27, r27
    4f92:	8e 83       	std	Y+6, r24	; 0x06
    4f94:	9f 83       	std	Y+7, r25	; 0x07
    4f96:	a8 87       	std	Y+8, r26	; 0x08
    4f98:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	8d 3f       	cpi	r24, 0xFD	; 253
    4f9e:	4c f4       	brge	.+18     	; 0x4fb2 <usart_set_baudrate+0x198>
			limit |= 1;
    4fa0:	8e 81       	ldd	r24, Y+6	; 0x06
    4fa2:	9f 81       	ldd	r25, Y+7	; 0x07
    4fa4:	a8 85       	ldd	r26, Y+8	; 0x08
    4fa6:	b9 85       	ldd	r27, Y+9	; 0x09
    4fa8:	81 60       	ori	r24, 0x01	; 1
    4faa:	8e 83       	std	Y+6, r24	; 0x06
    4fac:	9f 83       	std	Y+7, r25	; 0x07
    4fae:	a8 87       	std	Y+8, r26	; 0x08
    4fb0:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
    4fb4:	8f 5f       	subi	r24, 0xFF	; 255
    4fb6:	89 83       	std	Y+1, r24	; 0x01
    4fb8:	89 81       	ldd	r24, Y+1	; 0x01
    4fba:	87 30       	cpi	r24, 0x07	; 7
    4fbc:	ac f2       	brlt	.-86     	; 0x4f68 <usart_set_baudrate+0x14e>
    4fbe:	01 c0       	rjmp	.+2      	; 0x4fc2 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    4fc0:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    4fc2:	89 81       	ldd	r24, Y+1	; 0x01
    4fc4:	88 23       	and	r24, r24
    4fc6:	0c f0       	brlt	.+2      	; 0x4fca <usart_set_baudrate+0x1b0>
    4fc8:	8a c0       	rjmp	.+276    	; 0x50de <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    4fca:	88 8d       	ldd	r24, Y+24	; 0x18
    4fcc:	99 8d       	ldd	r25, Y+25	; 0x19
    4fce:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4fd0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4fd2:	88 0f       	add	r24, r24
    4fd4:	99 1f       	adc	r25, r25
    4fd6:	aa 1f       	adc	r26, r26
    4fd8:	bb 1f       	adc	r27, r27
    4fda:	88 0f       	add	r24, r24
    4fdc:	99 1f       	adc	r25, r25
    4fde:	aa 1f       	adc	r26, r26
    4fe0:	bb 1f       	adc	r27, r27
    4fe2:	88 0f       	add	r24, r24
    4fe4:	99 1f       	adc	r25, r25
    4fe6:	aa 1f       	adc	r26, r26
    4fe8:	bb 1f       	adc	r27, r27
    4fea:	9c 01       	movw	r18, r24
    4fec:	ad 01       	movw	r20, r26
    4fee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4ff0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ff2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4ff4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4ff6:	82 1b       	sub	r24, r18
    4ff8:	93 0b       	sbc	r25, r19
    4ffa:	a4 0b       	sbc	r26, r20
    4ffc:	b5 0b       	sbc	r27, r21
    4ffe:	8c 8f       	std	Y+28, r24	; 0x1c
    5000:	9d 8f       	std	Y+29, r25	; 0x1d
    5002:	ae 8f       	std	Y+30, r26	; 0x1e
    5004:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	8e 3f       	cpi	r24, 0xFE	; 254
    500a:	94 f5       	brge	.+100    	; 0x5070 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	08 2e       	mov	r0, r24
    5010:	00 0c       	add	r0, r0
    5012:	99 0b       	sbc	r25, r25
    5014:	2d ef       	ldi	r18, 0xFD	; 253
    5016:	3f ef       	ldi	r19, 0xFF	; 255
    5018:	28 1b       	sub	r18, r24
    501a:	39 0b       	sbc	r19, r25
    501c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    501e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5020:	ae 8d       	ldd	r26, Y+30	; 0x1e
    5022:	bf 8d       	ldd	r27, Y+31	; 0x1f
    5024:	7c 01       	movw	r14, r24
    5026:	8d 01       	movw	r16, r26
    5028:	04 c0       	rjmp	.+8      	; 0x5032 <usart_set_baudrate+0x218>
    502a:	ee 0c       	add	r14, r14
    502c:	ff 1c       	adc	r15, r15
    502e:	00 1f       	adc	r16, r16
    5030:	11 1f       	adc	r17, r17
    5032:	2a 95       	dec	r18
    5034:	d2 f7       	brpl	.-12     	; 0x502a <usart_set_baudrate+0x210>
    5036:	a8 01       	movw	r20, r16
    5038:	97 01       	movw	r18, r14
    503a:	88 8d       	ldd	r24, Y+24	; 0x18
    503c:	99 8d       	ldd	r25, Y+25	; 0x19
    503e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5040:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5042:	b6 95       	lsr	r27
    5044:	a7 95       	ror	r26
    5046:	97 95       	ror	r25
    5048:	87 95       	ror	r24
    504a:	82 0f       	add	r24, r18
    504c:	93 1f       	adc	r25, r19
    504e:	a4 1f       	adc	r26, r20
    5050:	b5 1f       	adc	r27, r21
    5052:	28 8d       	ldd	r18, Y+24	; 0x18
    5054:	39 8d       	ldd	r19, Y+25	; 0x19
    5056:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5058:	5b 8d       	ldd	r21, Y+27	; 0x1b
    505a:	bc 01       	movw	r22, r24
    505c:	cd 01       	movw	r24, r26
    505e:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__udivmodsi4>
    5062:	da 01       	movw	r26, r20
    5064:	c9 01       	movw	r24, r18
    5066:	8a 83       	std	Y+2, r24	; 0x02
    5068:	9b 83       	std	Y+3, r25	; 0x03
    506a:	ac 83       	std	Y+4, r26	; 0x04
    506c:	bd 83       	std	Y+5, r27	; 0x05
    506e:	70 c0       	rjmp	.+224    	; 0x5150 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    5070:	89 81       	ldd	r24, Y+1	; 0x01
    5072:	08 2e       	mov	r0, r24
    5074:	00 0c       	add	r0, r0
    5076:	99 0b       	sbc	r25, r25
    5078:	9c 01       	movw	r18, r24
    507a:	2d 5f       	subi	r18, 0xFD	; 253
    507c:	3f 4f       	sbci	r19, 0xFF	; 255
    507e:	88 8d       	ldd	r24, Y+24	; 0x18
    5080:	99 8d       	ldd	r25, Y+25	; 0x19
    5082:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5084:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5086:	04 c0       	rjmp	.+8      	; 0x5090 <usart_set_baudrate+0x276>
    5088:	88 0f       	add	r24, r24
    508a:	99 1f       	adc	r25, r25
    508c:	aa 1f       	adc	r26, r26
    508e:	bb 1f       	adc	r27, r27
    5090:	2a 95       	dec	r18
    5092:	d2 f7       	brpl	.-12     	; 0x5088 <usart_set_baudrate+0x26e>
    5094:	88 8f       	std	Y+24, r24	; 0x18
    5096:	99 8f       	std	Y+25, r25	; 0x19
    5098:	aa 8f       	std	Y+26, r26	; 0x1a
    509a:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    509c:	88 8d       	ldd	r24, Y+24	; 0x18
    509e:	99 8d       	ldd	r25, Y+25	; 0x19
    50a0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    50a2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    50a4:	9c 01       	movw	r18, r24
    50a6:	ad 01       	movw	r20, r26
    50a8:	56 95       	lsr	r21
    50aa:	47 95       	ror	r20
    50ac:	37 95       	ror	r19
    50ae:	27 95       	ror	r18
    50b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    50b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    50b4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    50b6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    50b8:	82 0f       	add	r24, r18
    50ba:	93 1f       	adc	r25, r19
    50bc:	a4 1f       	adc	r26, r20
    50be:	b5 1f       	adc	r27, r21
    50c0:	28 8d       	ldd	r18, Y+24	; 0x18
    50c2:	39 8d       	ldd	r19, Y+25	; 0x19
    50c4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    50c6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    50c8:	bc 01       	movw	r22, r24
    50ca:	cd 01       	movw	r24, r26
    50cc:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__udivmodsi4>
    50d0:	da 01       	movw	r26, r20
    50d2:	c9 01       	movw	r24, r18
    50d4:	8a 83       	std	Y+2, r24	; 0x02
    50d6:	9b 83       	std	Y+3, r25	; 0x03
    50d8:	ac 83       	std	Y+4, r26	; 0x04
    50da:	bd 83       	std	Y+5, r27	; 0x05
    50dc:	39 c0       	rjmp	.+114    	; 0x5150 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	08 2e       	mov	r0, r24
    50e2:	00 0c       	add	r0, r0
    50e4:	99 0b       	sbc	r25, r25
    50e6:	9c 01       	movw	r18, r24
    50e8:	2d 5f       	subi	r18, 0xFD	; 253
    50ea:	3f 4f       	sbci	r19, 0xFF	; 255
    50ec:	88 8d       	ldd	r24, Y+24	; 0x18
    50ee:	99 8d       	ldd	r25, Y+25	; 0x19
    50f0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    50f2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    50f4:	04 c0       	rjmp	.+8      	; 0x50fe <usart_set_baudrate+0x2e4>
    50f6:	88 0f       	add	r24, r24
    50f8:	99 1f       	adc	r25, r25
    50fa:	aa 1f       	adc	r26, r26
    50fc:	bb 1f       	adc	r27, r27
    50fe:	2a 95       	dec	r18
    5100:	d2 f7       	brpl	.-12     	; 0x50f6 <usart_set_baudrate+0x2dc>
    5102:	88 8f       	std	Y+24, r24	; 0x18
    5104:	99 8f       	std	Y+25, r25	; 0x19
    5106:	aa 8f       	std	Y+26, r26	; 0x1a
    5108:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    510a:	88 8d       	ldd	r24, Y+24	; 0x18
    510c:	99 8d       	ldd	r25, Y+25	; 0x19
    510e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5110:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5112:	9c 01       	movw	r18, r24
    5114:	ad 01       	movw	r20, r26
    5116:	56 95       	lsr	r21
    5118:	47 95       	ror	r20
    511a:	37 95       	ror	r19
    511c:	27 95       	ror	r18
    511e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5120:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5122:	ae 8d       	ldd	r26, Y+30	; 0x1e
    5124:	bf 8d       	ldd	r27, Y+31	; 0x1f
    5126:	82 0f       	add	r24, r18
    5128:	93 1f       	adc	r25, r19
    512a:	a4 1f       	adc	r26, r20
    512c:	b5 1f       	adc	r27, r21
    512e:	28 8d       	ldd	r18, Y+24	; 0x18
    5130:	39 8d       	ldd	r19, Y+25	; 0x19
    5132:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5134:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5136:	bc 01       	movw	r22, r24
    5138:	cd 01       	movw	r24, r26
    513a:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__udivmodsi4>
    513e:	da 01       	movw	r26, r20
    5140:	c9 01       	movw	r24, r18
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	a1 09       	sbc	r26, r1
    5146:	b1 09       	sbc	r27, r1
    5148:	8a 83       	std	Y+2, r24	; 0x02
    514a:	9b 83       	std	Y+3, r25	; 0x03
    514c:	ac 83       	std	Y+4, r26	; 0x04
    514e:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    5150:	8a 81       	ldd	r24, Y+2	; 0x02
    5152:	9b 81       	ldd	r25, Y+3	; 0x03
    5154:	ac 81       	ldd	r26, Y+4	; 0x04
    5156:	bd 81       	ldd	r27, Y+5	; 0x05
    5158:	89 2f       	mov	r24, r25
    515a:	9a 2f       	mov	r25, r26
    515c:	ab 2f       	mov	r26, r27
    515e:	bb 27       	eor	r27, r27
    5160:	98 2f       	mov	r25, r24
    5162:	9f 70       	andi	r25, 0x0F	; 15
    5164:	89 81       	ldd	r24, Y+1	; 0x01
    5166:	82 95       	swap	r24
    5168:	80 7f       	andi	r24, 0xF0	; 240
    516a:	29 2f       	mov	r18, r25
    516c:	28 2b       	or	r18, r24
    516e:	8e 89       	ldd	r24, Y+22	; 0x16
    5170:	9f 89       	ldd	r25, Y+23	; 0x17
    5172:	fc 01       	movw	r30, r24
    5174:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    5176:	2a 81       	ldd	r18, Y+2	; 0x02
    5178:	8e 89       	ldd	r24, Y+22	; 0x16
    517a:	9f 89       	ldd	r25, Y+23	; 0x17
    517c:	fc 01       	movw	r30, r24
    517e:	26 83       	std	Z+6, r18	; 0x06

	return true;
    5180:	81 e0       	ldi	r24, 0x01	; 1
}
    5182:	6f 96       	adiw	r28, 0x1f	; 31
    5184:	cd bf       	out	0x3d, r28	; 61
    5186:	de bf       	out	0x3e, r29	; 62
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	1f 91       	pop	r17
    518e:	0f 91       	pop	r16
    5190:	ff 90       	pop	r15
    5192:	ef 90       	pop	r14
    5194:	08 95       	ret

00005196 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    5196:	cf 93       	push	r28
    5198:	df 93       	push	r29
    519a:	00 d0       	rcall	.+0      	; 0x519c <ioport_configure_port_pin+0x6>
    519c:	00 d0       	rcall	.+0      	; 0x519e <ioport_configure_port_pin+0x8>
    519e:	cd b7       	in	r28, 0x3d	; 61
    51a0:	de b7       	in	r29, 0x3e	; 62
    51a2:	8a 83       	std	Y+2, r24	; 0x02
    51a4:	9b 83       	std	Y+3, r25	; 0x03
    51a6:	6c 83       	std	Y+4, r22	; 0x04
    51a8:	4d 83       	std	Y+5, r20	; 0x05
    51aa:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    51ac:	19 82       	std	Y+1, r1	; 0x01
    51ae:	20 c0       	rjmp	.+64     	; 0x51f0 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    51b0:	8c 81       	ldd	r24, Y+4	; 0x04
    51b2:	88 2f       	mov	r24, r24
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	29 81       	ldd	r18, Y+1	; 0x01
    51b8:	22 2f       	mov	r18, r18
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	02 c0       	rjmp	.+4      	; 0x51c2 <ioport_configure_port_pin+0x2c>
    51be:	95 95       	asr	r25
    51c0:	87 95       	ror	r24
    51c2:	2a 95       	dec	r18
    51c4:	e2 f7       	brpl	.-8      	; 0x51be <ioport_configure_port_pin+0x28>
    51c6:	81 70       	andi	r24, 0x01	; 1
    51c8:	99 27       	eor	r25, r25
    51ca:	89 2b       	or	r24, r25
    51cc:	71 f0       	breq	.+28     	; 0x51ea <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	88 2f       	mov	r24, r24
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	40 96       	adiw	r24, 0x10	; 16
    51d6:	2a 81       	ldd	r18, Y+2	; 0x02
    51d8:	3b 81       	ldd	r19, Y+3	; 0x03
    51da:	82 0f       	add	r24, r18
    51dc:	93 1f       	adc	r25, r19
    51de:	2d 81       	ldd	r18, Y+5	; 0x05
    51e0:	3e 81       	ldd	r19, Y+6	; 0x06
    51e2:	23 2f       	mov	r18, r19
    51e4:	33 27       	eor	r19, r19
    51e6:	fc 01       	movw	r30, r24
    51e8:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    51ea:	89 81       	ldd	r24, Y+1	; 0x01
    51ec:	8f 5f       	subi	r24, 0xFF	; 255
    51ee:	89 83       	std	Y+1, r24	; 0x01
    51f0:	89 81       	ldd	r24, Y+1	; 0x01
    51f2:	88 30       	cpi	r24, 0x08	; 8
    51f4:	e8 f2       	brcs	.-70     	; 0x51b0 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    51f6:	8d 81       	ldd	r24, Y+5	; 0x05
    51f8:	9e 81       	ldd	r25, Y+6	; 0x06
    51fa:	81 70       	andi	r24, 0x01	; 1
    51fc:	99 27       	eor	r25, r25
    51fe:	89 2b       	or	r24, r25
    5200:	d1 f0       	breq	.+52     	; 0x5236 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    5202:	8d 81       	ldd	r24, Y+5	; 0x05
    5204:	9e 81       	ldd	r25, Y+6	; 0x06
    5206:	82 70       	andi	r24, 0x02	; 2
    5208:	99 27       	eor	r25, r25
    520a:	89 2b       	or	r24, r25
    520c:	39 f0       	breq	.+14     	; 0x521c <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    520e:	8a 81       	ldd	r24, Y+2	; 0x02
    5210:	9b 81       	ldd	r25, Y+3	; 0x03
    5212:	05 96       	adiw	r24, 0x05	; 5
    5214:	2c 81       	ldd	r18, Y+4	; 0x04
    5216:	fc 01       	movw	r30, r24
    5218:	20 83       	st	Z, r18
    521a:	06 c0       	rjmp	.+12     	; 0x5228 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    521c:	8a 81       	ldd	r24, Y+2	; 0x02
    521e:	9b 81       	ldd	r25, Y+3	; 0x03
    5220:	06 96       	adiw	r24, 0x06	; 6
    5222:	2c 81       	ldd	r18, Y+4	; 0x04
    5224:	fc 01       	movw	r30, r24
    5226:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    5228:	8a 81       	ldd	r24, Y+2	; 0x02
    522a:	9b 81       	ldd	r25, Y+3	; 0x03
    522c:	01 96       	adiw	r24, 0x01	; 1
    522e:	2c 81       	ldd	r18, Y+4	; 0x04
    5230:	fc 01       	movw	r30, r24
    5232:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    5234:	06 c0       	rjmp	.+12     	; 0x5242 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    5236:	8a 81       	ldd	r24, Y+2	; 0x02
    5238:	9b 81       	ldd	r25, Y+3	; 0x03
    523a:	02 96       	adiw	r24, 0x02	; 2
    523c:	2c 81       	ldd	r18, Y+4	; 0x04
    523e:	fc 01       	movw	r30, r24
    5240:	20 83       	st	Z, r18
	}
}
    5242:	00 00       	nop
    5244:	26 96       	adiw	r28, 0x06	; 6
    5246:	cd bf       	out	0x3d, r28	; 61
    5248:	de bf       	out	0x3e, r29	; 62
    524a:	df 91       	pop	r29
    524c:	cf 91       	pop	r28
    524e:	08 95       	ret

00005250 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    5250:	cf 93       	push	r28
    5252:	df 93       	push	r29
    5254:	cd b7       	in	r28, 0x3d	; 61
    5256:	de b7       	in	r29, 0x3e	; 62
    5258:	27 97       	sbiw	r28, 0x07	; 7
    525a:	cd bf       	out	0x3d, r28	; 61
    525c:	de bf       	out	0x3e, r29	; 62
    525e:	8d 83       	std	Y+5, r24	; 0x05
    5260:	6e 83       	std	Y+6, r22	; 0x06
    5262:	7f 83       	std	Y+7, r23	; 0x07
    5264:	8d 81       	ldd	r24, Y+5	; 0x05
    5266:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    5268:	89 81       	ldd	r24, Y+1	; 0x01
    526a:	88 2f       	mov	r24, r24
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	9c 01       	movw	r18, r24
    5270:	27 70       	andi	r18, 0x07	; 7
    5272:	33 27       	eor	r19, r19
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	02 c0       	rjmp	.+4      	; 0x527e <ioport_configure_pin+0x2e>
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	2a 95       	dec	r18
    5280:	e2 f7       	brpl	.-8      	; 0x527a <ioport_configure_pin+0x2a>
    5282:	68 2f       	mov	r22, r24
    5284:	8d 81       	ldd	r24, Y+5	; 0x05
    5286:	8a 83       	std	Y+2, r24	; 0x02
    5288:	8a 81       	ldd	r24, Y+2	; 0x02
    528a:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	86 95       	lsr	r24
    5290:	86 95       	lsr	r24
    5292:	86 95       	lsr	r24
    5294:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    5296:	8c 81       	ldd	r24, Y+4	; 0x04
    5298:	88 2f       	mov	r24, r24
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	88 0f       	add	r24, r24
    529e:	99 1f       	adc	r25, r25
    52a0:	82 95       	swap	r24
    52a2:	92 95       	swap	r25
    52a4:	90 7f       	andi	r25, 0xF0	; 240
    52a6:	98 27       	eor	r25, r24
    52a8:	80 7f       	andi	r24, 0xF0	; 240
    52aa:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    52ac:	9a 5f       	subi	r25, 0xFA	; 250
    52ae:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    52b0:	8e 81       	ldd	r24, Y+6	; 0x06
    52b2:	9f 81       	ldd	r25, Y+7	; 0x07
    52b4:	ac 01       	movw	r20, r24
    52b6:	c9 01       	movw	r24, r18
    52b8:	6e df       	rcall	.-292    	; 0x5196 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    52ba:	00 00       	nop
    52bc:	27 96       	adiw	r28, 0x07	; 7
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	df 91       	pop	r29
    52c4:	cf 91       	pop	r28
    52c6:	08 95       	ret

000052c8 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    52c8:	cf 93       	push	r28
    52ca:	df 93       	push	r29
    52cc:	cd b7       	in	r28, 0x3d	; 61
    52ce:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    52d0:	63 e0       	ldi	r22, 0x03	; 3
    52d2:	70 e0       	ldi	r23, 0x00	; 0
    52d4:	83 e7       	ldi	r24, 0x73	; 115
    52d6:	bc df       	rcall	.-136    	; 0x5250 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	78 e1       	ldi	r23, 0x18	; 24
    52dc:	82 e7       	ldi	r24, 0x72	; 114
    52de:	b8 df       	rcall	.-144    	; 0x5250 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    52e0:	00 00       	nop
    52e2:	df 91       	pop	r29
    52e4:	cf 91       	pop	r28
    52e6:	08 95       	ret

000052e8 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device, uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    52e8:	cf 93       	push	r28
    52ea:	df 93       	push	r29
    52ec:	1f 92       	push	r1
    52ee:	1f 92       	push	r1
    52f0:	cd b7       	in	r28, 0x3d	; 61
    52f2:	de b7       	in	r29, 0x3e	; 62
    52f4:	89 83       	std	Y+1, r24	; 0x01
    52f6:	9a 83       	std	Y+2, r25	; 0x02
    52f8:	89 81       	ldd	r24, Y+1	; 0x01
    52fa:	9a 81       	ldd	r25, Y+2	; 0x02
    52fc:	89 2b       	or	r24, r25
    52fe:	09 f4       	brne	.+2      	; 0x5302 <sysclk_enable_peripheral_clock+0x1a>
    5300:	85 c1       	rjmp	.+778    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5302:	89 81       	ldd	r24, Y+1	; 0x01
    5304:	9a 81       	ldd	r25, Y+2	; 0x02
    5306:	80 3c       	cpi	r24, 0xC0	; 192
    5308:	91 05       	cpc	r25, r1
    530a:	29 f4       	brne	.+10     	; 0x5316 <sysclk_enable_peripheral_clock+0x2e>
    530c:	60 e1       	ldi	r22, 0x10	; 16
    530e:	80 e0       	ldi	r24, 0x00	; 0
    5310:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5314:	7b c1       	rjmp	.+758    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	9a 81       	ldd	r25, Y+2	; 0x02
    531a:	80 34       	cpi	r24, 0x40	; 64
    531c:	94 40       	sbci	r25, 0x04	; 4
    531e:	29 f4       	brne	.+10     	; 0x532a <sysclk_enable_peripheral_clock+0x42>
    5320:	68 e0       	ldi	r22, 0x08	; 8
    5322:	80 e0       	ldi	r24, 0x00	; 0
    5324:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5328:	71 c1       	rjmp	.+738    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    532a:	89 81       	ldd	r24, Y+1	; 0x01
    532c:	9a 81       	ldd	r25, Y+2	; 0x02
    532e:	81 15       	cp	r24, r1
    5330:	94 40       	sbci	r25, 0x04	; 4
    5332:	29 f4       	brne	.+10     	; 0x533e <sysclk_enable_peripheral_clock+0x56>
    5334:	64 e0       	ldi	r22, 0x04	; 4
    5336:	80 e0       	ldi	r24, 0x00	; 0
    5338:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    533c:	67 c1       	rjmp	.+718    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    533e:	89 81       	ldd	r24, Y+1	; 0x01
    5340:	9a 81       	ldd	r25, Y+2	; 0x02
    5342:	80 38       	cpi	r24, 0x80	; 128
    5344:	91 40       	sbci	r25, 0x01	; 1
    5346:	29 f4       	brne	.+10     	; 0x5352 <sysclk_enable_peripheral_clock+0x6a>
    5348:	62 e0       	ldi	r22, 0x02	; 2
    534a:	80 e0       	ldi	r24, 0x00	; 0
    534c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5350:	5d c1       	rjmp	.+698    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5352:	89 81       	ldd	r24, Y+1	; 0x01
    5354:	9a 81       	ldd	r25, Y+2	; 0x02
    5356:	81 15       	cp	r24, r1
    5358:	91 40       	sbci	r25, 0x01	; 1
    535a:	29 f4       	brne	.+10     	; 0x5366 <sysclk_enable_peripheral_clock+0x7e>
    535c:	61 e0       	ldi	r22, 0x01	; 1
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5364:	53 c1       	rjmp	.+678    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5366:	89 81       	ldd	r24, Y+1	; 0x01
    5368:	9a 81       	ldd	r25, Y+2	; 0x02
    536a:	80 38       	cpi	r24, 0x80	; 128
    536c:	93 40       	sbci	r25, 0x03	; 3
    536e:	29 f4       	brne	.+10     	; 0x537a <sysclk_enable_peripheral_clock+0x92>
    5370:	61 e0       	ldi	r22, 0x01	; 1
    5372:	81 e0       	ldi	r24, 0x01	; 1
    5374:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5378:	49 c1       	rjmp	.+658    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    537a:	89 81       	ldd	r24, Y+1	; 0x01
    537c:	9a 81       	ldd	r25, Y+2	; 0x02
    537e:	80 39       	cpi	r24, 0x90	; 144
    5380:	93 40       	sbci	r25, 0x03	; 3
    5382:	29 f4       	brne	.+10     	; 0x538e <sysclk_enable_peripheral_clock+0xa6>
    5384:	61 e0       	ldi	r22, 0x01	; 1
    5386:	82 e0       	ldi	r24, 0x02	; 2
    5388:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    538c:	3f c1       	rjmp	.+638    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	9a 81       	ldd	r25, Y+2	; 0x02
    5392:	81 15       	cp	r24, r1
    5394:	92 40       	sbci	r25, 0x02	; 2
    5396:	29 f4       	brne	.+10     	; 0x53a2 <sysclk_enable_peripheral_clock+0xba>
    5398:	62 e0       	ldi	r22, 0x02	; 2
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    53a0:	35 c1       	rjmp	.+618    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	9a 81       	ldd	r25, Y+2	; 0x02
    53a6:	80 34       	cpi	r24, 0x40	; 64
    53a8:	92 40       	sbci	r25, 0x02	; 2
    53aa:	29 f4       	brne	.+10     	; 0x53b6 <sysclk_enable_peripheral_clock+0xce>
    53ac:	62 e0       	ldi	r22, 0x02	; 2
    53ae:	82 e0       	ldi	r24, 0x02	; 2
    53b0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    53b4:	2b c1       	rjmp	.+598    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ba:	81 15       	cp	r24, r1
    53bc:	93 40       	sbci	r25, 0x03	; 3
    53be:	29 f4       	brne	.+10     	; 0x53ca <sysclk_enable_peripheral_clock+0xe2>
    53c0:	64 e0       	ldi	r22, 0x04	; 4
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    53c8:	21 c1       	rjmp	.+578    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	9a 81       	ldd	r25, Y+2	; 0x02
    53ce:	80 32       	cpi	r24, 0x20	; 32
    53d0:	93 40       	sbci	r25, 0x03	; 3
    53d2:	29 f4       	brne	.+10     	; 0x53de <sysclk_enable_peripheral_clock+0xf6>
    53d4:	64 e0       	ldi	r22, 0x04	; 4
    53d6:	82 e0       	ldi	r24, 0x02	; 2
    53d8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    53dc:	17 c1       	rjmp	.+558    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    53de:	89 81       	ldd	r24, Y+1	; 0x01
    53e0:	9a 81       	ldd	r25, Y+2	; 0x02
    53e2:	81 15       	cp	r24, r1
    53e4:	98 40       	sbci	r25, 0x08	; 8
    53e6:	29 f4       	brne	.+10     	; 0x53f2 <sysclk_enable_peripheral_clock+0x10a>
    53e8:	61 e0       	ldi	r22, 0x01	; 1
    53ea:	83 e0       	ldi	r24, 0x03	; 3
    53ec:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    53f0:	0d c1       	rjmp	.+538    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    53f2:	89 81       	ldd	r24, Y+1	; 0x01
    53f4:	9a 81       	ldd	r25, Y+2	; 0x02
    53f6:	81 15       	cp	r24, r1
    53f8:	99 40       	sbci	r25, 0x09	; 9
    53fa:	29 f4       	brne	.+10     	; 0x5406 <sysclk_enable_peripheral_clock+0x11e>
    53fc:	61 e0       	ldi	r22, 0x01	; 1
    53fe:	84 e0       	ldi	r24, 0x04	; 4
    5400:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5404:	03 c1       	rjmp	.+518    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5406:	89 81       	ldd	r24, Y+1	; 0x01
    5408:	9a 81       	ldd	r25, Y+2	; 0x02
    540a:	81 15       	cp	r24, r1
    540c:	9a 40       	sbci	r25, 0x0A	; 10
    540e:	29 f4       	brne	.+10     	; 0x541a <sysclk_enable_peripheral_clock+0x132>
    5410:	61 e0       	ldi	r22, 0x01	; 1
    5412:	85 e0       	ldi	r24, 0x05	; 5
    5414:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5418:	f9 c0       	rjmp	.+498    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    541a:	89 81       	ldd	r24, Y+1	; 0x01
    541c:	9a 81       	ldd	r25, Y+2	; 0x02
    541e:	81 15       	cp	r24, r1
    5420:	9b 40       	sbci	r25, 0x0B	; 11
    5422:	29 f4       	brne	.+10     	; 0x542e <sysclk_enable_peripheral_clock+0x146>
    5424:	61 e0       	ldi	r22, 0x01	; 1
    5426:	86 e0       	ldi	r24, 0x06	; 6
    5428:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    542c:	ef c0       	rjmp	.+478    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    542e:	89 81       	ldd	r24, Y+1	; 0x01
    5430:	9a 81       	ldd	r25, Y+2	; 0x02
    5432:	80 34       	cpi	r24, 0x40	; 64
    5434:	98 40       	sbci	r25, 0x08	; 8
    5436:	29 f4       	brne	.+10     	; 0x5442 <sysclk_enable_peripheral_clock+0x15a>
    5438:	62 e0       	ldi	r22, 0x02	; 2
    543a:	83 e0       	ldi	r24, 0x03	; 3
    543c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5440:	e5 c0       	rjmp	.+458    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5442:	89 81       	ldd	r24, Y+1	; 0x01
    5444:	9a 81       	ldd	r25, Y+2	; 0x02
    5446:	80 34       	cpi	r24, 0x40	; 64
    5448:	99 40       	sbci	r25, 0x09	; 9
    544a:	29 f4       	brne	.+10     	; 0x5456 <sysclk_enable_peripheral_clock+0x16e>
    544c:	62 e0       	ldi	r22, 0x02	; 2
    544e:	84 e0       	ldi	r24, 0x04	; 4
    5450:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5454:	db c0       	rjmp	.+438    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	9a 81       	ldd	r25, Y+2	; 0x02
    545a:	80 34       	cpi	r24, 0x40	; 64
    545c:	9a 40       	sbci	r25, 0x0A	; 10
    545e:	29 f4       	brne	.+10     	; 0x546a <sysclk_enable_peripheral_clock+0x182>
    5460:	62 e0       	ldi	r22, 0x02	; 2
    5462:	85 e0       	ldi	r24, 0x05	; 5
    5464:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5468:	d1 c0       	rjmp	.+418    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    546a:	89 81       	ldd	r24, Y+1	; 0x01
    546c:	9a 81       	ldd	r25, Y+2	; 0x02
    546e:	80 34       	cpi	r24, 0x40	; 64
    5470:	9b 40       	sbci	r25, 0x0B	; 11
    5472:	29 f4       	brne	.+10     	; 0x547e <sysclk_enable_peripheral_clock+0x196>
    5474:	62 e0       	ldi	r22, 0x02	; 2
    5476:	86 e0       	ldi	r24, 0x06	; 6
    5478:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    547c:	c7 c0       	rjmp	.+398    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    547e:	89 81       	ldd	r24, Y+1	; 0x01
    5480:	9a 81       	ldd	r25, Y+2	; 0x02
    5482:	80 39       	cpi	r24, 0x90	; 144
    5484:	98 40       	sbci	r25, 0x08	; 8
    5486:	29 f4       	brne	.+10     	; 0x5492 <sysclk_enable_peripheral_clock+0x1aa>
    5488:	64 e0       	ldi	r22, 0x04	; 4
    548a:	83 e0       	ldi	r24, 0x03	; 3
    548c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5490:	bd c0       	rjmp	.+378    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5492:	89 81       	ldd	r24, Y+1	; 0x01
    5494:	9a 81       	ldd	r25, Y+2	; 0x02
    5496:	80 39       	cpi	r24, 0x90	; 144
    5498:	99 40       	sbci	r25, 0x09	; 9
    549a:	29 f4       	brne	.+10     	; 0x54a6 <sysclk_enable_peripheral_clock+0x1be>
    549c:	64 e0       	ldi	r22, 0x04	; 4
    549e:	84 e0       	ldi	r24, 0x04	; 4
    54a0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    54a4:	b3 c0       	rjmp	.+358    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    54a6:	89 81       	ldd	r24, Y+1	; 0x01
    54a8:	9a 81       	ldd	r25, Y+2	; 0x02
    54aa:	80 39       	cpi	r24, 0x90	; 144
    54ac:	9a 40       	sbci	r25, 0x0A	; 10
    54ae:	29 f4       	brne	.+10     	; 0x54ba <sysclk_enable_peripheral_clock+0x1d2>
    54b0:	64 e0       	ldi	r22, 0x04	; 4
    54b2:	85 e0       	ldi	r24, 0x05	; 5
    54b4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    54b8:	a9 c0       	rjmp	.+338    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    54ba:	89 81       	ldd	r24, Y+1	; 0x01
    54bc:	9a 81       	ldd	r25, Y+2	; 0x02
    54be:	80 39       	cpi	r24, 0x90	; 144
    54c0:	9b 40       	sbci	r25, 0x0B	; 11
    54c2:	29 f4       	brne	.+10     	; 0x54ce <sysclk_enable_peripheral_clock+0x1e6>
    54c4:	64 e0       	ldi	r22, 0x04	; 4
    54c6:	86 e0       	ldi	r24, 0x06	; 6
    54c8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    54cc:	9f c0       	rjmp	.+318    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    54ce:	89 81       	ldd	r24, Y+1	; 0x01
    54d0:	9a 81       	ldd	r25, Y+2	; 0x02
    54d2:	80 3c       	cpi	r24, 0xC0	; 192
    54d4:	98 40       	sbci	r25, 0x08	; 8
    54d6:	29 f4       	brne	.+10     	; 0x54e2 <sysclk_enable_peripheral_clock+0x1fa>
    54d8:	68 e0       	ldi	r22, 0x08	; 8
    54da:	83 e0       	ldi	r24, 0x03	; 3
    54dc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    54e0:	95 c0       	rjmp	.+298    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    54e2:	89 81       	ldd	r24, Y+1	; 0x01
    54e4:	9a 81       	ldd	r25, Y+2	; 0x02
    54e6:	80 3c       	cpi	r24, 0xC0	; 192
    54e8:	99 40       	sbci	r25, 0x09	; 9
    54ea:	29 f4       	brne	.+10     	; 0x54f6 <sysclk_enable_peripheral_clock+0x20e>
    54ec:	68 e0       	ldi	r22, 0x08	; 8
    54ee:	84 e0       	ldi	r24, 0x04	; 4
    54f0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    54f4:	8b c0       	rjmp	.+278    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	80 3c       	cpi	r24, 0xC0	; 192
    54fc:	9a 40       	sbci	r25, 0x0A	; 10
    54fe:	29 f4       	brne	.+10     	; 0x550a <sysclk_enable_peripheral_clock+0x222>
    5500:	68 e0       	ldi	r22, 0x08	; 8
    5502:	85 e0       	ldi	r24, 0x05	; 5
    5504:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5508:	81 c0       	rjmp	.+258    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	9a 81       	ldd	r25, Y+2	; 0x02
    550e:	80 3c       	cpi	r24, 0xC0	; 192
    5510:	9b 40       	sbci	r25, 0x0B	; 11
    5512:	29 f4       	brne	.+10     	; 0x551e <sysclk_enable_peripheral_clock+0x236>
    5514:	68 e0       	ldi	r22, 0x08	; 8
    5516:	86 e0       	ldi	r24, 0x06	; 6
    5518:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    551c:	77 c0       	rjmp	.+238    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    551e:	89 81       	ldd	r24, Y+1	; 0x01
    5520:	9a 81       	ldd	r25, Y+2	; 0x02
    5522:	80 3a       	cpi	r24, 0xA0	; 160
    5524:	98 40       	sbci	r25, 0x08	; 8
    5526:	29 f4       	brne	.+10     	; 0x5532 <sysclk_enable_peripheral_clock+0x24a>
    5528:	60 e1       	ldi	r22, 0x10	; 16
    552a:	83 e0       	ldi	r24, 0x03	; 3
    552c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5530:	6d c0       	rjmp	.+218    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	9a 81       	ldd	r25, Y+2	; 0x02
    5536:	80 3a       	cpi	r24, 0xA0	; 160
    5538:	99 40       	sbci	r25, 0x09	; 9
    553a:	29 f4       	brne	.+10     	; 0x5546 <sysclk_enable_peripheral_clock+0x25e>
    553c:	60 e1       	ldi	r22, 0x10	; 16
    553e:	84 e0       	ldi	r24, 0x04	; 4
    5540:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5544:	63 c0       	rjmp	.+198    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	9a 81       	ldd	r25, Y+2	; 0x02
    554a:	80 3a       	cpi	r24, 0xA0	; 160
    554c:	9a 40       	sbci	r25, 0x0A	; 10
    554e:	29 f4       	brne	.+10     	; 0x555a <sysclk_enable_peripheral_clock+0x272>
    5550:	60 e1       	ldi	r22, 0x10	; 16
    5552:	85 e0       	ldi	r24, 0x05	; 5
    5554:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5558:	59 c0       	rjmp	.+178    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	9a 81       	ldd	r25, Y+2	; 0x02
    555e:	80 3a       	cpi	r24, 0xA0	; 160
    5560:	9b 40       	sbci	r25, 0x0B	; 11
    5562:	29 f4       	brne	.+10     	; 0x556e <sysclk_enable_peripheral_clock+0x286>
    5564:	60 e1       	ldi	r22, 0x10	; 16
    5566:	86 e0       	ldi	r24, 0x06	; 6
    5568:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    556c:	4f c0       	rjmp	.+158    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    556e:	89 81       	ldd	r24, Y+1	; 0x01
    5570:	9a 81       	ldd	r25, Y+2	; 0x02
    5572:	80 3b       	cpi	r24, 0xB0	; 176
    5574:	98 40       	sbci	r25, 0x08	; 8
    5576:	29 f4       	brne	.+10     	; 0x5582 <sysclk_enable_peripheral_clock+0x29a>
    5578:	60 e2       	ldi	r22, 0x20	; 32
    557a:	83 e0       	ldi	r24, 0x03	; 3
    557c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5580:	45 c0       	rjmp	.+138    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	9a 81       	ldd	r25, Y+2	; 0x02
    5586:	80 3b       	cpi	r24, 0xB0	; 176
    5588:	99 40       	sbci	r25, 0x09	; 9
    558a:	29 f4       	brne	.+10     	; 0x5596 <sysclk_enable_peripheral_clock+0x2ae>
    558c:	60 e2       	ldi	r22, 0x20	; 32
    558e:	84 e0       	ldi	r24, 0x04	; 4
    5590:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5594:	3b c0       	rjmp	.+118    	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5596:	89 81       	ldd	r24, Y+1	; 0x01
    5598:	9a 81       	ldd	r25, Y+2	; 0x02
    559a:	80 3b       	cpi	r24, 0xB0	; 176
    559c:	9a 40       	sbci	r25, 0x0A	; 10
    559e:	29 f4       	brne	.+10     	; 0x55aa <sysclk_enable_peripheral_clock+0x2c2>
    55a0:	60 e2       	ldi	r22, 0x20	; 32
    55a2:	85 e0       	ldi	r24, 0x05	; 5
    55a4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    55a8:	31 c0       	rjmp	.+98     	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    55aa:	89 81       	ldd	r24, Y+1	; 0x01
    55ac:	9a 81       	ldd	r25, Y+2	; 0x02
    55ae:	80 3b       	cpi	r24, 0xB0	; 176
    55b0:	9b 40       	sbci	r25, 0x0B	; 11
    55b2:	29 f4       	brne	.+10     	; 0x55be <sysclk_enable_peripheral_clock+0x2d6>
    55b4:	60 e2       	ldi	r22, 0x20	; 32
    55b6:	86 e0       	ldi	r24, 0x06	; 6
    55b8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    55bc:	27 c0       	rjmp	.+78     	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    55be:	89 81       	ldd	r24, Y+1	; 0x01
    55c0:	9a 81       	ldd	r25, Y+2	; 0x02
    55c2:	80 38       	cpi	r24, 0x80	; 128
    55c4:	94 40       	sbci	r25, 0x04	; 4
    55c6:	29 f4       	brne	.+10     	; 0x55d2 <sysclk_enable_peripheral_clock+0x2ea>
    55c8:	60 e4       	ldi	r22, 0x40	; 64
    55ca:	83 e0       	ldi	r24, 0x03	; 3
    55cc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    55d0:	1d c0       	rjmp	.+58     	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    55d2:	89 81       	ldd	r24, Y+1	; 0x01
    55d4:	9a 81       	ldd	r25, Y+2	; 0x02
    55d6:	80 39       	cpi	r24, 0x90	; 144
    55d8:	94 40       	sbci	r25, 0x04	; 4
    55da:	29 f4       	brne	.+10     	; 0x55e6 <sysclk_enable_peripheral_clock+0x2fe>
    55dc:	60 e4       	ldi	r22, 0x40	; 64
    55de:	84 e0       	ldi	r24, 0x04	; 4
    55e0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    55e4:	13 c0       	rjmp	.+38     	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
    55e8:	9a 81       	ldd	r25, Y+2	; 0x02
    55ea:	80 3a       	cpi	r24, 0xA0	; 160
    55ec:	94 40       	sbci	r25, 0x04	; 4
    55ee:	29 f4       	brne	.+10     	; 0x55fa <sysclk_enable_peripheral_clock+0x312>
    55f0:	60 e4       	ldi	r22, 0x40	; 64
    55f2:	85 e0       	ldi	r24, 0x05	; 5
    55f4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    55f8:	09 c0       	rjmp	.+18     	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	9a 81       	ldd	r25, Y+2	; 0x02
    55fe:	80 3b       	cpi	r24, 0xB0	; 176
    5600:	94 40       	sbci	r25, 0x04	; 4
    5602:	21 f4       	brne	.+8      	; 0x560c <sysclk_enable_peripheral_clock+0x324>
    5604:	60 e4       	ldi	r22, 0x40	; 64
    5606:	86 e0       	ldi	r24, 0x06	; 6
    5608:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    560c:	00 00       	nop
    560e:	0f 90       	pop	r0
    5610:	0f 90       	pop	r0
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	08 95       	ret

00005618 <usart_serial_init>:
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	cd b7       	in	r28, 0x3d	; 61
    561e:	de b7       	in	r29, 0x3e	; 62
    5620:	2b 97       	sbiw	r28, 0x0b	; 11
    5622:	cd bf       	out	0x3d, r28	; 61
    5624:	de bf       	out	0x3e, r29	; 62
    5626:	88 87       	std	Y+8, r24	; 0x08
    5628:	99 87       	std	Y+9, r25	; 0x09
    562a:	6a 87       	std	Y+10, r22	; 0x0a
    562c:	7b 87       	std	Y+11, r23	; 0x0b
    562e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5630:	9b 85       	ldd	r25, Y+11	; 0x0b
    5632:	fc 01       	movw	r30, r24
    5634:	84 81       	ldd	r24, Z+4	; 0x04
    5636:	8d 83       	std	Y+5, r24	; 0x05
    5638:	8a 85       	ldd	r24, Y+10	; 0x0a
    563a:	9b 85       	ldd	r25, Y+11	; 0x0b
    563c:	fc 01       	movw	r30, r24
    563e:	85 81       	ldd	r24, Z+5	; 0x05
    5640:	8e 83       	std	Y+6, r24	; 0x06
    5642:	8a 85       	ldd	r24, Y+10	; 0x0a
    5644:	9b 85       	ldd	r25, Y+11	; 0x0b
    5646:	fc 01       	movw	r30, r24
    5648:	86 81       	ldd	r24, Z+6	; 0x06
    564a:	8f 83       	std	Y+7, r24	; 0x07
    564c:	8a 85       	ldd	r24, Y+10	; 0x0a
    564e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5650:	fc 01       	movw	r30, r24
    5652:	80 81       	ld	r24, Z
    5654:	91 81       	ldd	r25, Z+1	; 0x01
    5656:	a2 81       	ldd	r26, Z+2	; 0x02
    5658:	b3 81       	ldd	r27, Z+3	; 0x03
    565a:	89 83       	std	Y+1, r24	; 0x01
    565c:	9a 83       	std	Y+2, r25	; 0x02
    565e:	ab 83       	std	Y+3, r26	; 0x03
    5660:	bc 83       	std	Y+4, r27	; 0x04
    5662:	88 85       	ldd	r24, Y+8	; 0x08
    5664:	99 85       	ldd	r25, Y+9	; 0x09
    5666:	80 3a       	cpi	r24, 0xA0	; 160
    5668:	98 40       	sbci	r25, 0x08	; 8
    566a:	21 f4       	brne	.+8      	; 0x5674 <usart_serial_init+0x5c>
    566c:	60 e1       	ldi	r22, 0x10	; 16
    566e:	83 e0       	ldi	r24, 0x03	; 3
    5670:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5674:	88 85       	ldd	r24, Y+8	; 0x08
    5676:	99 85       	ldd	r25, Y+9	; 0x09
    5678:	80 3b       	cpi	r24, 0xB0	; 176
    567a:	98 40       	sbci	r25, 0x08	; 8
    567c:	21 f4       	brne	.+8      	; 0x5686 <usart_serial_init+0x6e>
    567e:	60 e2       	ldi	r22, 0x20	; 32
    5680:	83 e0       	ldi	r24, 0x03	; 3
    5682:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5686:	88 85       	ldd	r24, Y+8	; 0x08
    5688:	99 85       	ldd	r25, Y+9	; 0x09
    568a:	80 3a       	cpi	r24, 0xA0	; 160
    568c:	99 40       	sbci	r25, 0x09	; 9
    568e:	21 f4       	brne	.+8      	; 0x5698 <usart_serial_init+0x80>
    5690:	60 e1       	ldi	r22, 0x10	; 16
    5692:	84 e0       	ldi	r24, 0x04	; 4
    5694:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    5698:	88 85       	ldd	r24, Y+8	; 0x08
    569a:	99 85       	ldd	r25, Y+9	; 0x09
    569c:	80 3b       	cpi	r24, 0xB0	; 176
    569e:	99 40       	sbci	r25, 0x09	; 9
    56a0:	21 f4       	brne	.+8      	; 0x56aa <usart_serial_init+0x92>
    56a2:	60 e2       	ldi	r22, 0x20	; 32
    56a4:	84 e0       	ldi	r24, 0x04	; 4
    56a6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    56aa:	88 85       	ldd	r24, Y+8	; 0x08
    56ac:	99 85       	ldd	r25, Y+9	; 0x09
    56ae:	80 3a       	cpi	r24, 0xA0	; 160
    56b0:	9a 40       	sbci	r25, 0x0A	; 10
    56b2:	21 f4       	brne	.+8      	; 0x56bc <usart_serial_init+0xa4>
    56b4:	60 e1       	ldi	r22, 0x10	; 16
    56b6:	85 e0       	ldi	r24, 0x05	; 5
    56b8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    56bc:	88 85       	ldd	r24, Y+8	; 0x08
    56be:	99 85       	ldd	r25, Y+9	; 0x09
    56c0:	80 3b       	cpi	r24, 0xB0	; 176
    56c2:	9a 40       	sbci	r25, 0x0A	; 10
    56c4:	21 f4       	brne	.+8      	; 0x56ce <usart_serial_init+0xb6>
    56c6:	60 e2       	ldi	r22, 0x20	; 32
    56c8:	85 e0       	ldi	r24, 0x05	; 5
    56ca:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    56ce:	88 85       	ldd	r24, Y+8	; 0x08
    56d0:	99 85       	ldd	r25, Y+9	; 0x09
    56d2:	80 3a       	cpi	r24, 0xA0	; 160
    56d4:	9b 40       	sbci	r25, 0x0B	; 11
    56d6:	21 f4       	brne	.+8      	; 0x56e0 <usart_serial_init+0xc8>
    56d8:	60 e1       	ldi	r22, 0x10	; 16
    56da:	86 e0       	ldi	r24, 0x06	; 6
    56dc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    56e0:	88 85       	ldd	r24, Y+8	; 0x08
    56e2:	99 85       	ldd	r25, Y+9	; 0x09
    56e4:	80 3b       	cpi	r24, 0xB0	; 176
    56e6:	9b 40       	sbci	r25, 0x0B	; 11
    56e8:	21 f4       	brne	.+8      	; 0x56f2 <usart_serial_init+0xda>
    56ea:	60 e2       	ldi	r22, 0x20	; 32
    56ec:	86 e0       	ldi	r24, 0x06	; 6
    56ee:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <sysclk_enable_module>
    56f2:	88 85       	ldd	r24, Y+8	; 0x08
    56f4:	99 85       	ldd	r25, Y+9	; 0x09
    56f6:	9e 01       	movw	r18, r28
    56f8:	2f 5f       	subi	r18, 0xFF	; 255
    56fa:	3f 4f       	sbci	r19, 0xFF	; 255
    56fc:	b9 01       	movw	r22, r18
    56fe:	0f db       	rcall	.-2530   	; 0x4d1e <usart_init_rs232>
    5700:	88 23       	and	r24, r24
    5702:	11 f0       	breq	.+4      	; 0x5708 <usart_serial_init+0xf0>
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	01 c0       	rjmp	.+2      	; 0x570a <usart_serial_init+0xf2>
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	2b 96       	adiw	r28, 0x0b	; 11
    570c:	cd bf       	out	0x3d, r28	; 61
    570e:	de bf       	out	0x3e, r29	; 62
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	08 95       	ret

00005716 <usart_serial_putchar>:
    5716:	cf 93       	push	r28
    5718:	df 93       	push	r29
    571a:	00 d0       	rcall	.+0      	; 0x571c <usart_serial_putchar+0x6>
    571c:	cd b7       	in	r28, 0x3d	; 61
    571e:	de b7       	in	r29, 0x3e	; 62
    5720:	89 83       	std	Y+1, r24	; 0x01
    5722:	9a 83       	std	Y+2, r25	; 0x02
    5724:	6b 83       	std	Y+3, r22	; 0x03
    5726:	89 81       	ldd	r24, Y+1	; 0x01
    5728:	9a 81       	ldd	r25, Y+2	; 0x02
    572a:	6b 81       	ldd	r22, Y+3	; 0x03
    572c:	3e db       	rcall	.-2436   	; 0x4daa <usart_putchar>
    572e:	23 96       	adiw	r28, 0x03	; 3
    5730:	cd bf       	out	0x3d, r28	; 61
    5732:	de bf       	out	0x3e, r29	; 62
    5734:	df 91       	pop	r29
    5736:	cf 91       	pop	r28
    5738:	08 95       	ret

0000573a <usart_serial_getchar>:
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	00 d0       	rcall	.+0      	; 0x5740 <usart_serial_getchar+0x6>
    5740:	1f 92       	push	r1
    5742:	cd b7       	in	r28, 0x3d	; 61
    5744:	de b7       	in	r29, 0x3e	; 62
    5746:	89 83       	std	Y+1, r24	; 0x01
    5748:	9a 83       	std	Y+2, r25	; 0x02
    574a:	6b 83       	std	Y+3, r22	; 0x03
    574c:	7c 83       	std	Y+4, r23	; 0x04
    574e:	89 81       	ldd	r24, Y+1	; 0x01
    5750:	9a 81       	ldd	r25, Y+2	; 0x02
    5752:	49 db       	rcall	.-2414   	; 0x4de6 <usart_getchar>
    5754:	28 2f       	mov	r18, r24
    5756:	8b 81       	ldd	r24, Y+3	; 0x03
    5758:	9c 81       	ldd	r25, Y+4	; 0x04
    575a:	fc 01       	movw	r30, r24
    575c:	20 83       	st	Z, r18
    575e:	00 00       	nop
    5760:	24 96       	adiw	r28, 0x04	; 4
    5762:	cd bf       	out	0x3d, r28	; 61
    5764:	de bf       	out	0x3e, r29	; 62
    5766:	df 91       	pop	r29
    5768:	cf 91       	pop	r28
    576a:	08 95       	ret

0000576c <stdio_serial_init>:
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	00 d0       	rcall	.+0      	; 0x5772 <stdio_serial_init+0x6>
    5772:	1f 92       	push	r1
    5774:	cd b7       	in	r28, 0x3d	; 61
    5776:	de b7       	in	r29, 0x3e	; 62
    5778:	89 83       	std	Y+1, r24	; 0x01
    577a:	9a 83       	std	Y+2, r25	; 0x02
    577c:	6b 83       	std	Y+3, r22	; 0x03
    577e:	7c 83       	std	Y+4, r23	; 0x04
    5780:	89 81       	ldd	r24, Y+1	; 0x01
    5782:	9a 81       	ldd	r25, Y+2	; 0x02
    5784:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <stdio_base>
    5788:	90 93 c2 21 	sts	0x21C2, r25	; 0x8021c2 <stdio_base+0x1>
    578c:	8b e8       	ldi	r24, 0x8B	; 139
    578e:	9b e2       	ldi	r25, 0x2B	; 43
    5790:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <ptr_put>
    5794:	90 93 c0 21 	sts	0x21C0, r25	; 0x8021c0 <ptr_put+0x1>
    5798:	8d e9       	ldi	r24, 0x9D	; 157
    579a:	9b e2       	ldi	r25, 0x2B	; 43
    579c:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <ptr_get>
    57a0:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <ptr_get+0x1>
    57a4:	2b 81       	ldd	r18, Y+3	; 0x03
    57a6:	3c 81       	ldd	r19, Y+4	; 0x04
    57a8:	89 81       	ldd	r24, Y+1	; 0x01
    57aa:	9a 81       	ldd	r25, Y+2	; 0x02
    57ac:	b9 01       	movw	r22, r18
    57ae:	34 df       	rcall	.-408    	; 0x5618 <usart_serial_init>
    57b0:	6d ef       	ldi	r22, 0xFD	; 253
    57b2:	71 e1       	ldi	r23, 0x11	; 17
    57b4:	8c e1       	ldi	r24, 0x1C	; 28
    57b6:	92 e1       	ldi	r25, 0x12	; 18
    57b8:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <fdevopen>
    57bc:	00 00       	nop
    57be:	24 96       	adiw	r28, 0x04	; 4
    57c0:	cd bf       	out	0x3d, r28	; 61
    57c2:	de bf       	out	0x3e, r29	; 62
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	08 95       	ret

000057ca <uart_terminal_init>:

void uart_terminal_init()
{
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    57d2:	80 ea       	ldi	r24, 0xA0	; 160
    57d4:	9a e0       	ldi	r25, 0x0A	; 10
    57d6:	88 dd       	rcall	.-1264   	; 0x52e8 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    57d8:	80 e8       	ldi	r24, 0x80	; 128
    57da:	96 e0       	ldi	r25, 0x06	; 6
    57dc:	20 e8       	ldi	r18, 0x80	; 128
    57de:	36 e0       	ldi	r19, 0x06	; 6
    57e0:	f9 01       	movw	r30, r18
    57e2:	20 81       	ld	r18, Z
    57e4:	28 60       	ori	r18, 0x08	; 8
    57e6:	fc 01       	movw	r30, r24
    57e8:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    57ea:	68 e0       	ldi	r22, 0x08	; 8
    57ec:	70 e2       	ldi	r23, 0x20	; 32
    57ee:	80 ea       	ldi	r24, 0xA0	; 160
    57f0:	9a e0       	ldi	r25, 0x0A	; 10
    57f2:	bc df       	rcall	.-136    	; 0x576c <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    57f4:	8b e2       	ldi	r24, 0x2B	; 43
    57f6:	90 e2       	ldi	r25, 0x20	; 32
    57f8:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <puts>
		printf("UART Initialized\n");
    57fc:	80 e5       	ldi	r24, 0x50	; 80
    57fe:	90 e2       	ldi	r25, 0x20	; 32
    5800:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <puts>
	}
}
    5804:	00 00       	nop
    5806:	df 91       	pop	r29
    5808:	cf 91       	pop	r28
    580a:	08 95       	ret

0000580c <sysclk_get_main_hz>:
		&& altitude > FS3_MAX_ALTITUDE)
	{
			buzz_on();
			blockTransmission = true;
	}
}
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	cd b7       	in	r28, 0x3d	; 61
    5812:	de b7       	in	r29, 0x3e	; 62
    5814:	80 e0       	ldi	r24, 0x00	; 0
    5816:	98 e4       	ldi	r25, 0x48	; 72
    5818:	a8 ee       	ldi	r26, 0xE8	; 232
    581a:	b1 e0       	ldi	r27, 0x01	; 1
    581c:	bc 01       	movw	r22, r24
    581e:	cd 01       	movw	r24, r26
    5820:	df 91       	pop	r29
    5822:	cf 91       	pop	r28
    5824:	08 95       	ret

00005826 <sysclk_get_per4_hz>:
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	1f 92       	push	r1
    582c:	cd b7       	in	r28, 0x3d	; 61
    582e:	de b7       	in	r29, 0x3e	; 62
    5830:	19 82       	std	Y+1, r1	; 0x01
    5832:	ec df       	rcall	.-40     	; 0x580c <sysclk_get_main_hz>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	29 81       	ldd	r18, Y+1	; 0x01
    583a:	22 2f       	mov	r18, r18
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	04 c0       	rjmp	.+8      	; 0x5848 <sysclk_get_per4_hz+0x22>
    5840:	b6 95       	lsr	r27
    5842:	a7 95       	ror	r26
    5844:	97 95       	ror	r25
    5846:	87 95       	ror	r24
    5848:	2a 95       	dec	r18
    584a:	d2 f7       	brpl	.-12     	; 0x5840 <sysclk_get_per4_hz+0x1a>
    584c:	bc 01       	movw	r22, r24
    584e:	cd 01       	movw	r24, r26
    5850:	0f 90       	pop	r0
    5852:	df 91       	pop	r29
    5854:	cf 91       	pop	r28
    5856:	08 95       	ret

00005858 <sysclk_get_per2_hz>:
    5858:	cf 93       	push	r28
    585a:	df 93       	push	r29
    585c:	cd b7       	in	r28, 0x3d	; 61
    585e:	de b7       	in	r29, 0x3e	; 62
    5860:	e2 df       	rcall	.-60     	; 0x5826 <sysclk_get_per4_hz>
    5862:	dc 01       	movw	r26, r24
    5864:	cb 01       	movw	r24, r22
    5866:	bc 01       	movw	r22, r24
    5868:	cd 01       	movw	r24, r26
    586a:	df 91       	pop	r29
    586c:	cf 91       	pop	r28
    586e:	08 95       	ret

00005870 <sysclk_get_per_hz>:
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	ef df       	rcall	.-34     	; 0x5858 <sysclk_get_per2_hz>
    587a:	dc 01       	movw	r26, r24
    587c:	cb 01       	movw	r24, r22
    587e:	bc 01       	movw	r22, r24
    5880:	cd 01       	movw	r24, r26
    5882:	df 91       	pop	r29
    5884:	cf 91       	pop	r28
    5886:	08 95       	ret

00005888 <sysclk_get_cpu_hz>:
    5888:	cf 93       	push	r28
    588a:	df 93       	push	r29
    588c:	cd b7       	in	r28, 0x3d	; 61
    588e:	de b7       	in	r29, 0x3e	; 62
    5890:	ef df       	rcall	.-34     	; 0x5870 <sysclk_get_per_hz>
    5892:	dc 01       	movw	r26, r24
    5894:	cb 01       	movw	r24, r22
    5896:	bc 01       	movw	r22, r24
    5898:	cd 01       	movw	r24, r26
    589a:	df 91       	pop	r29
    589c:	cf 91       	pop	r28
    589e:	08 95       	ret

000058a0 <__portable_avr_delay_cycles>:
    58a0:	04 c0       	rjmp	.+8      	; 0x58aa <__portable_avr_delay_cycles+0xa>
    58a2:	61 50       	subi	r22, 0x01	; 1
    58a4:	71 09       	sbc	r23, r1
    58a6:	81 09       	sbc	r24, r1
    58a8:	91 09       	sbc	r25, r1
    58aa:	61 15       	cp	r22, r1
    58ac:	71 05       	cpc	r23, r1
    58ae:	81 05       	cpc	r24, r1
    58b0:	91 05       	cpc	r25, r1
    58b2:	b9 f7       	brne	.-18     	; 0x58a2 <__portable_avr_delay_cycles+0x2>
    58b4:	08 95       	ret

000058b6 <main>:




int main (void)
{
    58b6:	2f 92       	push	r2
    58b8:	3f 92       	push	r3
    58ba:	4f 92       	push	r4
    58bc:	5f 92       	push	r5
    58be:	6f 92       	push	r6
    58c0:	7f 92       	push	r7
    58c2:	8f 92       	push	r8
    58c4:	9f 92       	push	r9
    58c6:	af 92       	push	r10
    58c8:	bf 92       	push	r11
    58ca:	cf 92       	push	r12
    58cc:	df 92       	push	r13
    58ce:	ef 92       	push	r14
    58d0:	ff 92       	push	r15
    58d2:	0f 93       	push	r16
    58d4:	1f 93       	push	r17
    58d6:	cf 93       	push	r28
    58d8:	df 93       	push	r29
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
    58de:	68 97       	sbiw	r28, 0x18	; 24
    58e0:	cd bf       	out	0x3d, r28	; 61
    58e2:	de bf       	out	0x3e, r29	; 62
	blockTransmission = false;
    58e4:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <blockTransmission>
	board_init();
    58e8:	ef dc       	rcall	.-1570   	; 0x52c8 <board_init>
	//TODO: HANDLE RESETS
	
	
	**/
	
	sysclk_init();
    58ea:	0e 94 a6 11 	call	0x234c	; 0x234c <sysclk_init>
	rtc_init();
    58ee:	0e 94 8a 12 	call	0x2514	; 0x2514 <rtc_init>
	
	
	//missionTime = rtc_get_time();
	
	if(DEBUG && DEBUG_TELEM) printf("%u", missionTime >> 16);
    58f2:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <missionTime>
    58f6:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <missionTime+0x1>
    58fa:	a0 91 e1 20 	lds	r26, 0x20E1	; 0x8020e1 <missionTime+0x2>
    58fe:	b0 91 e2 20 	lds	r27, 0x20E2	; 0x8020e2 <missionTime+0x3>
    5902:	cd 01       	movw	r24, r26
    5904:	aa 27       	eor	r26, r26
    5906:	bb 27       	eor	r27, r27
    5908:	2b 2f       	mov	r18, r27
    590a:	2f 93       	push	r18
    590c:	2a 2f       	mov	r18, r26
    590e:	2f 93       	push	r18
    5910:	29 2f       	mov	r18, r25
    5912:	2f 93       	push	r18
    5914:	8f 93       	push	r24
    5916:	81 e6       	ldi	r24, 0x61	; 97
    5918:	90 e2       	ldi	r25, 0x20	; 32
    591a:	89 2f       	mov	r24, r25
    591c:	8f 93       	push	r24
    591e:	81 e6       	ldi	r24, 0x61	; 97
    5920:	90 e2       	ldi	r25, 0x20	; 32
    5922:	8f 93       	push	r24
    5924:	0e 94 55 36 	call	0x6caa	; 0x6caa <printf>
    5928:	0f 90       	pop	r0
    592a:	0f 90       	pop	r0
    592c:	0f 90       	pop	r0
    592e:	0f 90       	pop	r0
    5930:	0f 90       	pop	r0
		wdt_enable();
	}
	

	
	uart_terminal_init();
    5932:	0f 90       	pop	r0
    5934:	4a df       	rcall	.-364    	; 0x57ca <uart_terminal_init>
	//newOLogInit();

	if(DEBUG) printf("uart is working\n");
    5936:	84 e6       	ldi	r24, 0x64	; 100
    5938:	90 e2       	ldi	r25, 0x20	; 32
    593a:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <puts>
	//delay_s(1);
	//xbee_init();
	//servo_init();
	//thermistor_init();
	//volt_init();
	spi_init_module();
    593e:	0e 94 31 09 	call	0x1262	; 0x1262 <spi_init_module>
		
		/***
		Get Telemetry - Part of every flight state
		***/
		//missionTime = rtc_get_time();
		pressure = getPressure();
    5942:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <getPressure>
    5946:	dc 01       	movw	r26, r24
    5948:	cb 01       	movw	r24, r22
    594a:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <pressure>
    594e:	90 93 e8 20 	sts	0x20E8, r25	; 0x8020e8 <pressure+0x1>
    5952:	a0 93 e9 20 	sts	0x20E9, r26	; 0x8020e9 <pressure+0x2>
    5956:	b0 93 ea 20 	sts	0x20EA, r27	; 0x8020ea <pressure+0x3>
		printf("%f\n", pressure);
    595a:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <pressure>
    595e:	90 91 e8 20 	lds	r25, 0x20E8	; 0x8020e8 <pressure+0x1>
    5962:	a0 91 e9 20 	lds	r26, 0x20E9	; 0x8020e9 <pressure+0x2>
    5966:	b0 91 ea 20 	lds	r27, 0x20EA	; 0x8020ea <pressure+0x3>
    596a:	2b 2f       	mov	r18, r27
    596c:	2f 93       	push	r18
    596e:	2a 2f       	mov	r18, r26
    5970:	2f 93       	push	r18
    5972:	29 2f       	mov	r18, r25
    5974:	2f 93       	push	r18
    5976:	8f 93       	push	r24
    5978:	87 e2       	ldi	r24, 0x27	; 39
    597a:	90 e2       	ldi	r25, 0x20	; 32
    597c:	89 2f       	mov	r24, r25
    597e:	8f 93       	push	r24
    5980:	87 e2       	ldi	r24, 0x27	; 39
    5982:	90 e2       	ldi	r25, 0x20	; 32
    5984:	8f 93       	push	r24
    5986:	0e 94 55 36 	call	0x6caa	; 0x6caa <printf>
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	0f 90       	pop	r0
    5990:	0f 90       	pop	r0
    5992:	0f 90       	pop	r0
				break;
			
		};*/
		
			
		delay_ms(50);		
    5994:	0f 90       	pop	r0
    5996:	78 df       	rcall	.-272    	; 0x5888 <sysclk_get_cpu_hz>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	9c 01       	movw	r18, r24
    599e:	ad 01       	movw	r20, r26
    59a0:	60 e0       	ldi	r22, 0x00	; 0
    59a2:	70 e0       	ldi	r23, 0x00	; 0
    59a4:	cb 01       	movw	r24, r22
    59a6:	82 2e       	mov	r8, r18
    59a8:	93 2e       	mov	r9, r19
    59aa:	a4 2e       	mov	r10, r20
    59ac:	b5 2e       	mov	r11, r21
    59ae:	c6 2e       	mov	r12, r22
    59b0:	d7 2e       	mov	r13, r23
    59b2:	e8 2e       	mov	r14, r24
    59b4:	f9 2e       	mov	r15, r25
    59b6:	28 2d       	mov	r18, r8
    59b8:	39 2d       	mov	r19, r9
    59ba:	4a 2d       	mov	r20, r10
    59bc:	5b 2d       	mov	r21, r11
    59be:	6c 2d       	mov	r22, r12
    59c0:	7d 2d       	mov	r23, r13
    59c2:	8e 2d       	mov	r24, r14
    59c4:	9f 2d       	mov	r25, r15
    59c6:	01 e0       	ldi	r16, 0x01	; 1
    59c8:	5c d6       	rcall	.+3256   	; 0x6682 <__ashldi3>
    59ca:	29 83       	std	Y+1, r18	; 0x01
    59cc:	3a 83       	std	Y+2, r19	; 0x02
    59ce:	4b 83       	std	Y+3, r20	; 0x03
    59d0:	5c 83       	std	Y+4, r21	; 0x04
    59d2:	6d 83       	std	Y+5, r22	; 0x05
    59d4:	7e 83       	std	Y+6, r23	; 0x06
    59d6:	8f 83       	std	Y+7, r24	; 0x07
    59d8:	98 87       	std	Y+8, r25	; 0x08
    59da:	89 80       	ldd	r8, Y+1	; 0x01
    59dc:	9a 80       	ldd	r9, Y+2	; 0x02
    59de:	ab 80       	ldd	r10, Y+3	; 0x03
    59e0:	bc 80       	ldd	r11, Y+4	; 0x04
    59e2:	cd 80       	ldd	r12, Y+5	; 0x05
    59e4:	de 80       	ldd	r13, Y+6	; 0x06
    59e6:	ef 80       	ldd	r14, Y+7	; 0x07
    59e8:	f8 84       	ldd	r15, Y+8	; 0x08
    59ea:	28 2d       	mov	r18, r8
    59ec:	39 2d       	mov	r19, r9
    59ee:	4a 2d       	mov	r20, r10
    59f0:	5b 2d       	mov	r21, r11
    59f2:	6c 2d       	mov	r22, r12
    59f4:	7d 2d       	mov	r23, r13
    59f6:	8e 2d       	mov	r24, r14
    59f8:	9f 2d       	mov	r25, r15
    59fa:	02 e0       	ldi	r16, 0x02	; 2
    59fc:	42 d6       	rcall	.+3204   	; 0x6682 <__ashldi3>
    59fe:	29 87       	std	Y+9, r18	; 0x09
    5a00:	3a 87       	std	Y+10, r19	; 0x0a
    5a02:	4b 87       	std	Y+11, r20	; 0x0b
    5a04:	5c 87       	std	Y+12, r21	; 0x0c
    5a06:	6d 87       	std	Y+13, r22	; 0x0d
    5a08:	7e 87       	std	Y+14, r23	; 0x0e
    5a0a:	8f 87       	std	Y+15, r24	; 0x0f
    5a0c:	98 8b       	std	Y+16, r25	; 0x10
    5a0e:	28 2d       	mov	r18, r8
    5a10:	39 2d       	mov	r19, r9
    5a12:	4a 2d       	mov	r20, r10
    5a14:	5b 2d       	mov	r21, r11
    5a16:	6c 2d       	mov	r22, r12
    5a18:	7d 2d       	mov	r23, r13
    5a1a:	8e 2d       	mov	r24, r14
    5a1c:	9f 2d       	mov	r25, r15
    5a1e:	a9 84       	ldd	r10, Y+9	; 0x09
    5a20:	ba 84       	ldd	r11, Y+10	; 0x0a
    5a22:	cb 84       	ldd	r12, Y+11	; 0x0b
    5a24:	dc 84       	ldd	r13, Y+12	; 0x0c
    5a26:	ed 84       	ldd	r14, Y+13	; 0x0d
    5a28:	fe 84       	ldd	r15, Y+14	; 0x0e
    5a2a:	0f 85       	ldd	r16, Y+15	; 0x0f
    5a2c:	18 89       	ldd	r17, Y+16	; 0x10
    5a2e:	60 d6       	rcall	.+3264   	; 0x66f0 <__adddi3>
    5a30:	82 2e       	mov	r8, r18
    5a32:	93 2e       	mov	r9, r19
    5a34:	a4 2e       	mov	r10, r20
    5a36:	b5 2e       	mov	r11, r21
    5a38:	c6 2e       	mov	r12, r22
    5a3a:	d7 2e       	mov	r13, r23
    5a3c:	e8 2e       	mov	r14, r24
    5a3e:	f9 2e       	mov	r15, r25
    5a40:	28 2d       	mov	r18, r8
    5a42:	39 2d       	mov	r19, r9
    5a44:	4a 2d       	mov	r20, r10
    5a46:	5b 2d       	mov	r21, r11
    5a48:	6c 2d       	mov	r22, r12
    5a4a:	7d 2d       	mov	r23, r13
    5a4c:	8e 2d       	mov	r24, r14
    5a4e:	9f 2d       	mov	r25, r15
    5a50:	02 e0       	ldi	r16, 0x02	; 2
    5a52:	17 d6       	rcall	.+3118   	; 0x6682 <__ashldi3>
    5a54:	29 8b       	std	Y+17, r18	; 0x11
    5a56:	3a 8b       	std	Y+18, r19	; 0x12
    5a58:	4b 8b       	std	Y+19, r20	; 0x13
    5a5a:	5c 8b       	std	Y+20, r21	; 0x14
    5a5c:	6d 8b       	std	Y+21, r22	; 0x15
    5a5e:	7e 8b       	std	Y+22, r23	; 0x16
    5a60:	8f 8b       	std	Y+23, r24	; 0x17
    5a62:	98 8f       	std	Y+24, r25	; 0x18
    5a64:	28 2d       	mov	r18, r8
    5a66:	39 2d       	mov	r19, r9
    5a68:	4a 2d       	mov	r20, r10
    5a6a:	5b 2d       	mov	r21, r11
    5a6c:	6c 2d       	mov	r22, r12
    5a6e:	7d 2d       	mov	r23, r13
    5a70:	8e 2d       	mov	r24, r14
    5a72:	9f 2d       	mov	r25, r15
    5a74:	a9 88       	ldd	r10, Y+17	; 0x11
    5a76:	ba 88       	ldd	r11, Y+18	; 0x12
    5a78:	cb 88       	ldd	r12, Y+19	; 0x13
    5a7a:	dc 88       	ldd	r13, Y+20	; 0x14
    5a7c:	ed 88       	ldd	r14, Y+21	; 0x15
    5a7e:	fe 88       	ldd	r15, Y+22	; 0x16
    5a80:	0f 89       	ldd	r16, Y+23	; 0x17
    5a82:	18 8d       	ldd	r17, Y+24	; 0x18
    5a84:	35 d6       	rcall	.+3178   	; 0x66f0 <__adddi3>
    5a86:	22 2e       	mov	r2, r18
    5a88:	33 2e       	mov	r3, r19
    5a8a:	44 2e       	mov	r4, r20
    5a8c:	55 2e       	mov	r5, r21
    5a8e:	66 2e       	mov	r6, r22
    5a90:	77 2e       	mov	r7, r23
    5a92:	88 2e       	mov	r8, r24
    5a94:	99 2e       	mov	r9, r25
    5a96:	0f 2e       	mov	r0, r31
    5a98:	f6 e0       	ldi	r31, 0x06	; 6
    5a9a:	af 2e       	mov	r10, r31
    5a9c:	f0 2d       	mov	r31, r0
    5a9e:	b1 2c       	mov	r11, r1
    5aa0:	c1 2c       	mov	r12, r1
    5aa2:	d1 2c       	mov	r13, r1
    5aa4:	e1 2c       	mov	r14, r1
    5aa6:	f1 2c       	mov	r15, r1
    5aa8:	00 e0       	ldi	r16, 0x00	; 0
    5aaa:	10 e0       	ldi	r17, 0x00	; 0
    5aac:	22 2d       	mov	r18, r2
    5aae:	33 2d       	mov	r19, r3
    5ab0:	44 2d       	mov	r20, r4
    5ab2:	55 2d       	mov	r21, r5
    5ab4:	66 2d       	mov	r22, r6
    5ab6:	77 2d       	mov	r23, r7
    5ab8:	88 2d       	mov	r24, r8
    5aba:	99 2d       	mov	r25, r9
    5abc:	86 d5       	rcall	.+2828   	; 0x65ca <__udivdi3>
    5abe:	22 2e       	mov	r2, r18
    5ac0:	33 2e       	mov	r3, r19
    5ac2:	44 2e       	mov	r4, r20
    5ac4:	55 2e       	mov	r5, r21
    5ac6:	66 2e       	mov	r6, r22
    5ac8:	77 2e       	mov	r7, r23
    5aca:	88 2e       	mov	r8, r24
    5acc:	99 2e       	mov	r9, r25
    5ace:	a2 2c       	mov	r10, r2
    5ad0:	b3 2c       	mov	r11, r3
    5ad2:	c4 2c       	mov	r12, r4
    5ad4:	d5 2c       	mov	r13, r5
    5ad6:	e6 2c       	mov	r14, r6
    5ad8:	f7 2c       	mov	r15, r7
    5ada:	08 2d       	mov	r16, r8
    5adc:	19 2d       	mov	r17, r9
    5ade:	2a 2d       	mov	r18, r10
    5ae0:	3b 2d       	mov	r19, r11
    5ae2:	4c 2d       	mov	r20, r12
    5ae4:	5d 2d       	mov	r21, r13
    5ae6:	6e 2d       	mov	r22, r14
    5ae8:	7f 2d       	mov	r23, r15
    5aea:	80 2f       	mov	r24, r16
    5aec:	91 2f       	mov	r25, r17
    5aee:	29 51       	subi	r18, 0x19	; 25
    5af0:	3c 4f       	sbci	r19, 0xFC	; 252
    5af2:	4f 4f       	sbci	r20, 0xFF	; 255
    5af4:	5f 4f       	sbci	r21, 0xFF	; 255
    5af6:	6f 4f       	sbci	r22, 0xFF	; 255
    5af8:	7f 4f       	sbci	r23, 0xFF	; 255
    5afa:	8f 4f       	sbci	r24, 0xFF	; 255
    5afc:	9f 4f       	sbci	r25, 0xFF	; 255
    5afe:	a2 2e       	mov	r10, r18
    5b00:	b3 2e       	mov	r11, r19
    5b02:	c4 2e       	mov	r12, r20
    5b04:	d5 2e       	mov	r13, r21
    5b06:	e6 2e       	mov	r14, r22
    5b08:	f7 2e       	mov	r15, r23
    5b0a:	08 2f       	mov	r16, r24
    5b0c:	19 2f       	mov	r17, r25
    5b0e:	2a 2d       	mov	r18, r10
    5b10:	3b 2d       	mov	r19, r11
    5b12:	4c 2d       	mov	r20, r12
    5b14:	5d 2d       	mov	r21, r13
    5b16:	6e 2d       	mov	r22, r14
    5b18:	7f 2d       	mov	r23, r15
    5b1a:	80 2f       	mov	r24, r16
    5b1c:	91 2f       	mov	r25, r17
    5b1e:	be d0       	rcall	.+380    	; 0x5c9c <__floatundisf>
    5b20:	dc 01       	movw	r26, r24
    5b22:	cb 01       	movw	r24, r22
    5b24:	20 e0       	ldi	r18, 0x00	; 0
    5b26:	30 e0       	ldi	r19, 0x00	; 0
    5b28:	4a e7       	ldi	r20, 0x7A	; 122
    5b2a:	54 e4       	ldi	r21, 0x44	; 68
    5b2c:	bc 01       	movw	r22, r24
    5b2e:	cd 01       	movw	r24, r26
    5b30:	13 d0       	rcall	.+38     	; 0x5b58 <__divsf3>
    5b32:	dc 01       	movw	r26, r24
    5b34:	cb 01       	movw	r24, r22
    5b36:	bc 01       	movw	r22, r24
    5b38:	cd 01       	movw	r24, r26
    5b3a:	7b d0       	rcall	.+246    	; 0x5c32 <__fixunssfdi>
    5b3c:	a2 2e       	mov	r10, r18
    5b3e:	b3 2e       	mov	r11, r19
    5b40:	c4 2e       	mov	r12, r20
    5b42:	d5 2e       	mov	r13, r21
    5b44:	e6 2e       	mov	r14, r22
    5b46:	f7 2e       	mov	r15, r23
    5b48:	08 2f       	mov	r16, r24
    5b4a:	19 2f       	mov	r17, r25
    5b4c:	d6 01       	movw	r26, r12
    5b4e:	c5 01       	movw	r24, r10
    5b50:	bc 01       	movw	r22, r24
    5b52:	cd 01       	movw	r24, r26
    5b54:	a5 de       	rcall	.-694    	; 0x58a0 <__portable_avr_delay_cycles>
	}
    5b56:	f5 ce       	rjmp	.-534    	; 0x5942 <main+0x8c>

00005b58 <__divsf3>:
    5b58:	0c d0       	rcall	.+24     	; 0x5b72 <__divsf3x>
    5b5a:	05 c1       	rjmp	.+522    	; 0x5d66 <__fp_round>
    5b5c:	fd d0       	rcall	.+506    	; 0x5d58 <__fp_pscB>
    5b5e:	40 f0       	brcs	.+16     	; 0x5b70 <__divsf3+0x18>
    5b60:	f4 d0       	rcall	.+488    	; 0x5d4a <__fp_pscA>
    5b62:	30 f0       	brcs	.+12     	; 0x5b70 <__divsf3+0x18>
    5b64:	21 f4       	brne	.+8      	; 0x5b6e <__divsf3+0x16>
    5b66:	5f 3f       	cpi	r21, 0xFF	; 255
    5b68:	19 f0       	breq	.+6      	; 0x5b70 <__divsf3+0x18>
    5b6a:	d6 c0       	rjmp	.+428    	; 0x5d18 <__fp_inf>
    5b6c:	51 11       	cpse	r21, r1
    5b6e:	2f c1       	rjmp	.+606    	; 0x5dce <__fp_szero>
    5b70:	d9 c0       	rjmp	.+434    	; 0x5d24 <__fp_nan>

00005b72 <__divsf3x>:
    5b72:	0a d1       	rcall	.+532    	; 0x5d88 <__fp_split3>
    5b74:	98 f3       	brcs	.-26     	; 0x5b5c <__divsf3+0x4>

00005b76 <__divsf3_pse>:
    5b76:	99 23       	and	r25, r25
    5b78:	c9 f3       	breq	.-14     	; 0x5b6c <__divsf3+0x14>
    5b7a:	55 23       	and	r21, r21
    5b7c:	b1 f3       	breq	.-20     	; 0x5b6a <__divsf3+0x12>
    5b7e:	95 1b       	sub	r25, r21
    5b80:	55 0b       	sbc	r21, r21
    5b82:	bb 27       	eor	r27, r27
    5b84:	aa 27       	eor	r26, r26
    5b86:	62 17       	cp	r22, r18
    5b88:	73 07       	cpc	r23, r19
    5b8a:	84 07       	cpc	r24, r20
    5b8c:	38 f0       	brcs	.+14     	; 0x5b9c <__divsf3_pse+0x26>
    5b8e:	9f 5f       	subi	r25, 0xFF	; 255
    5b90:	5f 4f       	sbci	r21, 0xFF	; 255
    5b92:	22 0f       	add	r18, r18
    5b94:	33 1f       	adc	r19, r19
    5b96:	44 1f       	adc	r20, r20
    5b98:	aa 1f       	adc	r26, r26
    5b9a:	a9 f3       	breq	.-22     	; 0x5b86 <__divsf3_pse+0x10>
    5b9c:	33 d0       	rcall	.+102    	; 0x5c04 <__divsf3_pse+0x8e>
    5b9e:	0e 2e       	mov	r0, r30
    5ba0:	3a f0       	brmi	.+14     	; 0x5bb0 <__divsf3_pse+0x3a>
    5ba2:	e0 e8       	ldi	r30, 0x80	; 128
    5ba4:	30 d0       	rcall	.+96     	; 0x5c06 <__divsf3_pse+0x90>
    5ba6:	91 50       	subi	r25, 0x01	; 1
    5ba8:	50 40       	sbci	r21, 0x00	; 0
    5baa:	e6 95       	lsr	r30
    5bac:	00 1c       	adc	r0, r0
    5bae:	ca f7       	brpl	.-14     	; 0x5ba2 <__divsf3_pse+0x2c>
    5bb0:	29 d0       	rcall	.+82     	; 0x5c04 <__divsf3_pse+0x8e>
    5bb2:	fe 2f       	mov	r31, r30
    5bb4:	27 d0       	rcall	.+78     	; 0x5c04 <__divsf3_pse+0x8e>
    5bb6:	66 0f       	add	r22, r22
    5bb8:	77 1f       	adc	r23, r23
    5bba:	88 1f       	adc	r24, r24
    5bbc:	bb 1f       	adc	r27, r27
    5bbe:	26 17       	cp	r18, r22
    5bc0:	37 07       	cpc	r19, r23
    5bc2:	48 07       	cpc	r20, r24
    5bc4:	ab 07       	cpc	r26, r27
    5bc6:	b0 e8       	ldi	r27, 0x80	; 128
    5bc8:	09 f0       	breq	.+2      	; 0x5bcc <__divsf3_pse+0x56>
    5bca:	bb 0b       	sbc	r27, r27
    5bcc:	80 2d       	mov	r24, r0
    5bce:	bf 01       	movw	r22, r30
    5bd0:	ff 27       	eor	r31, r31
    5bd2:	93 58       	subi	r25, 0x83	; 131
    5bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd6:	2a f0       	brmi	.+10     	; 0x5be2 <__divsf3_pse+0x6c>
    5bd8:	9e 3f       	cpi	r25, 0xFE	; 254
    5bda:	51 05       	cpc	r21, r1
    5bdc:	68 f0       	brcs	.+26     	; 0x5bf8 <__divsf3_pse+0x82>
    5bde:	9c c0       	rjmp	.+312    	; 0x5d18 <__fp_inf>
    5be0:	f6 c0       	rjmp	.+492    	; 0x5dce <__fp_szero>
    5be2:	5f 3f       	cpi	r21, 0xFF	; 255
    5be4:	ec f3       	brlt	.-6      	; 0x5be0 <__divsf3_pse+0x6a>
    5be6:	98 3e       	cpi	r25, 0xE8	; 232
    5be8:	dc f3       	brlt	.-10     	; 0x5be0 <__divsf3_pse+0x6a>
    5bea:	86 95       	lsr	r24
    5bec:	77 95       	ror	r23
    5bee:	67 95       	ror	r22
    5bf0:	b7 95       	ror	r27
    5bf2:	f7 95       	ror	r31
    5bf4:	9f 5f       	subi	r25, 0xFF	; 255
    5bf6:	c9 f7       	brne	.-14     	; 0x5bea <__divsf3_pse+0x74>
    5bf8:	88 0f       	add	r24, r24
    5bfa:	91 1d       	adc	r25, r1
    5bfc:	96 95       	lsr	r25
    5bfe:	87 95       	ror	r24
    5c00:	97 f9       	bld	r25, 7
    5c02:	08 95       	ret
    5c04:	e1 e0       	ldi	r30, 0x01	; 1
    5c06:	66 0f       	add	r22, r22
    5c08:	77 1f       	adc	r23, r23
    5c0a:	88 1f       	adc	r24, r24
    5c0c:	bb 1f       	adc	r27, r27
    5c0e:	62 17       	cp	r22, r18
    5c10:	73 07       	cpc	r23, r19
    5c12:	84 07       	cpc	r24, r20
    5c14:	ba 07       	cpc	r27, r26
    5c16:	20 f0       	brcs	.+8      	; 0x5c20 <__divsf3_pse+0xaa>
    5c18:	62 1b       	sub	r22, r18
    5c1a:	73 0b       	sbc	r23, r19
    5c1c:	84 0b       	sbc	r24, r20
    5c1e:	ba 0b       	sbc	r27, r26
    5c20:	ee 1f       	adc	r30, r30
    5c22:	88 f7       	brcc	.-30     	; 0x5c06 <__divsf3_pse+0x90>
    5c24:	e0 95       	com	r30
    5c26:	08 95       	ret

00005c28 <__fixsfdi>:
    5c28:	be e3       	ldi	r27, 0x3E	; 62
    5c2a:	04 d0       	rcall	.+8      	; 0x5c34 <__fixunssfdi+0x2>
    5c2c:	08 f4       	brcc	.+2      	; 0x5c30 <__fixsfdi+0x8>
    5c2e:	90 e8       	ldi	r25, 0x80	; 128
    5c30:	08 95       	ret

00005c32 <__fixunssfdi>:
    5c32:	bf e3       	ldi	r27, 0x3F	; 63
    5c34:	22 27       	eor	r18, r18
    5c36:	33 27       	eor	r19, r19
    5c38:	a9 01       	movw	r20, r18
    5c3a:	ae d0       	rcall	.+348    	; 0x5d98 <__fp_splitA>
    5c3c:	58 f1       	brcs	.+86     	; 0x5c94 <__fixunssfdi+0x62>
    5c3e:	9f 57       	subi	r25, 0x7F	; 127
    5c40:	40 f1       	brcs	.+80     	; 0x5c92 <__fixunssfdi+0x60>
    5c42:	b9 17       	cp	r27, r25
    5c44:	38 f1       	brcs	.+78     	; 0x5c94 <__fixunssfdi+0x62>
    5c46:	bf e3       	ldi	r27, 0x3F	; 63
    5c48:	b9 1b       	sub	r27, r25
    5c4a:	99 27       	eor	r25, r25
    5c4c:	b8 50       	subi	r27, 0x08	; 8
    5c4e:	3a f4       	brpl	.+14     	; 0x5c5e <__fixunssfdi+0x2c>
    5c50:	66 0f       	add	r22, r22
    5c52:	77 1f       	adc	r23, r23
    5c54:	88 1f       	adc	r24, r24
    5c56:	99 1f       	adc	r25, r25
    5c58:	b3 95       	inc	r27
    5c5a:	d2 f3       	brmi	.-12     	; 0x5c50 <__fixunssfdi+0x1e>
    5c5c:	16 c0       	rjmp	.+44     	; 0x5c8a <__fixunssfdi+0x58>
    5c5e:	b8 50       	subi	r27, 0x08	; 8
    5c60:	4a f0       	brmi	.+18     	; 0x5c74 <__fixunssfdi+0x42>
    5c62:	23 2f       	mov	r18, r19
    5c64:	34 2f       	mov	r19, r20
    5c66:	45 2f       	mov	r20, r21
    5c68:	56 2f       	mov	r21, r22
    5c6a:	67 2f       	mov	r22, r23
    5c6c:	78 2f       	mov	r23, r24
    5c6e:	88 27       	eor	r24, r24
    5c70:	b8 50       	subi	r27, 0x08	; 8
    5c72:	ba f7       	brpl	.-18     	; 0x5c62 <__fixunssfdi+0x30>
    5c74:	b8 5f       	subi	r27, 0xF8	; 248
    5c76:	49 f0       	breq	.+18     	; 0x5c8a <__fixunssfdi+0x58>
    5c78:	86 95       	lsr	r24
    5c7a:	77 95       	ror	r23
    5c7c:	67 95       	ror	r22
    5c7e:	57 95       	ror	r21
    5c80:	47 95       	ror	r20
    5c82:	37 95       	ror	r19
    5c84:	27 95       	ror	r18
    5c86:	ba 95       	dec	r27
    5c88:	b9 f7       	brne	.-18     	; 0x5c78 <__fixunssfdi+0x46>
    5c8a:	0e f4       	brtc	.+2      	; 0x5c8e <__fixunssfdi+0x5c>
    5c8c:	4e d0       	rcall	.+156    	; 0x5d2a <__fp_negdi>
    5c8e:	88 94       	clc
    5c90:	08 95       	ret
    5c92:	88 94       	clc
    5c94:	60 e0       	ldi	r22, 0x00	; 0
    5c96:	70 e0       	ldi	r23, 0x00	; 0
    5c98:	cb 01       	movw	r24, r22
    5c9a:	08 95       	ret

00005c9c <__floatundisf>:
    5c9c:	e8 94       	clt

00005c9e <__fp_di2sf>:
    5c9e:	f9 2f       	mov	r31, r25
    5ca0:	96 eb       	ldi	r25, 0xB6	; 182
    5ca2:	ff 23       	and	r31, r31
    5ca4:	81 f0       	breq	.+32     	; 0x5cc6 <__fp_di2sf+0x28>
    5ca6:	12 16       	cp	r1, r18
    5ca8:	13 06       	cpc	r1, r19
    5caa:	14 06       	cpc	r1, r20
    5cac:	44 0b       	sbc	r20, r20
    5cae:	93 95       	inc	r25
    5cb0:	f6 95       	lsr	r31
    5cb2:	87 95       	ror	r24
    5cb4:	77 95       	ror	r23
    5cb6:	67 95       	ror	r22
    5cb8:	57 95       	ror	r21
    5cba:	40 40       	sbci	r20, 0x00	; 0
    5cbc:	ff 23       	and	r31, r31
    5cbe:	b9 f7       	brne	.-18     	; 0x5cae <__fp_di2sf+0x10>
    5cc0:	1b c0       	rjmp	.+54     	; 0x5cf8 <__fp_di2sf+0x5a>
    5cc2:	99 27       	eor	r25, r25
    5cc4:	08 95       	ret
    5cc6:	88 23       	and	r24, r24
    5cc8:	51 f4       	brne	.+20     	; 0x5cde <__fp_di2sf+0x40>
    5cca:	98 50       	subi	r25, 0x08	; 8
    5ccc:	d2 f7       	brpl	.-12     	; 0x5cc2 <__fp_di2sf+0x24>
    5cce:	87 2b       	or	r24, r23
    5cd0:	76 2f       	mov	r23, r22
    5cd2:	65 2f       	mov	r22, r21
    5cd4:	54 2f       	mov	r21, r20
    5cd6:	43 2f       	mov	r20, r19
    5cd8:	32 2f       	mov	r19, r18
    5cda:	20 e0       	ldi	r18, 0x00	; 0
    5cdc:	b1 f3       	breq	.-20     	; 0x5cca <__fp_di2sf+0x2c>
    5cde:	12 16       	cp	r1, r18
    5ce0:	13 06       	cpc	r1, r19
    5ce2:	14 06       	cpc	r1, r20
    5ce4:	44 0b       	sbc	r20, r20
    5ce6:	88 23       	and	r24, r24
    5ce8:	3a f0       	brmi	.+14     	; 0x5cf8 <__fp_di2sf+0x5a>
    5cea:	9a 95       	dec	r25
    5cec:	44 0f       	add	r20, r20
    5cee:	55 1f       	adc	r21, r21
    5cf0:	66 1f       	adc	r22, r22
    5cf2:	77 1f       	adc	r23, r23
    5cf4:	88 1f       	adc	r24, r24
    5cf6:	ca f7       	brpl	.-14     	; 0x5cea <__fp_di2sf+0x4c>
    5cf8:	55 23       	and	r21, r21
    5cfa:	4a f4       	brpl	.+18     	; 0x5d0e <__fp_di2sf+0x70>
    5cfc:	44 0f       	add	r20, r20
    5cfe:	55 1f       	adc	r21, r21
    5d00:	11 f4       	brne	.+4      	; 0x5d06 <__fp_di2sf+0x68>
    5d02:	60 ff       	sbrs	r22, 0
    5d04:	04 c0       	rjmp	.+8      	; 0x5d0e <__fp_di2sf+0x70>
    5d06:	6f 5f       	subi	r22, 0xFF	; 255
    5d08:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	88 0f       	add	r24, r24
    5d10:	96 95       	lsr	r25
    5d12:	87 95       	ror	r24
    5d14:	97 f9       	bld	r25, 7
    5d16:	08 95       	ret

00005d18 <__fp_inf>:
    5d18:	97 f9       	bld	r25, 7
    5d1a:	9f 67       	ori	r25, 0x7F	; 127
    5d1c:	80 e8       	ldi	r24, 0x80	; 128
    5d1e:	70 e0       	ldi	r23, 0x00	; 0
    5d20:	60 e0       	ldi	r22, 0x00	; 0
    5d22:	08 95       	ret

00005d24 <__fp_nan>:
    5d24:	9f ef       	ldi	r25, 0xFF	; 255
    5d26:	80 ec       	ldi	r24, 0xC0	; 192
    5d28:	08 95       	ret

00005d2a <__fp_negdi>:
    5d2a:	90 95       	com	r25
    5d2c:	80 95       	com	r24
    5d2e:	70 95       	com	r23
    5d30:	60 95       	com	r22
    5d32:	50 95       	com	r21
    5d34:	40 95       	com	r20
    5d36:	30 95       	com	r19
    5d38:	21 95       	neg	r18
    5d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3c:	4f 4f       	sbci	r20, 0xFF	; 255
    5d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d40:	6f 4f       	sbci	r22, 0xFF	; 255
    5d42:	7f 4f       	sbci	r23, 0xFF	; 255
    5d44:	8f 4f       	sbci	r24, 0xFF	; 255
    5d46:	9f 4f       	sbci	r25, 0xFF	; 255
    5d48:	08 95       	ret

00005d4a <__fp_pscA>:
    5d4a:	00 24       	eor	r0, r0
    5d4c:	0a 94       	dec	r0
    5d4e:	16 16       	cp	r1, r22
    5d50:	17 06       	cpc	r1, r23
    5d52:	18 06       	cpc	r1, r24
    5d54:	09 06       	cpc	r0, r25
    5d56:	08 95       	ret

00005d58 <__fp_pscB>:
    5d58:	00 24       	eor	r0, r0
    5d5a:	0a 94       	dec	r0
    5d5c:	12 16       	cp	r1, r18
    5d5e:	13 06       	cpc	r1, r19
    5d60:	14 06       	cpc	r1, r20
    5d62:	05 06       	cpc	r0, r21
    5d64:	08 95       	ret

00005d66 <__fp_round>:
    5d66:	09 2e       	mov	r0, r25
    5d68:	03 94       	inc	r0
    5d6a:	00 0c       	add	r0, r0
    5d6c:	11 f4       	brne	.+4      	; 0x5d72 <__fp_round+0xc>
    5d6e:	88 23       	and	r24, r24
    5d70:	52 f0       	brmi	.+20     	; 0x5d86 <__fp_round+0x20>
    5d72:	bb 0f       	add	r27, r27
    5d74:	40 f4       	brcc	.+16     	; 0x5d86 <__fp_round+0x20>
    5d76:	bf 2b       	or	r27, r31
    5d78:	11 f4       	brne	.+4      	; 0x5d7e <__fp_round+0x18>
    5d7a:	60 ff       	sbrs	r22, 0
    5d7c:	04 c0       	rjmp	.+8      	; 0x5d86 <__fp_round+0x20>
    5d7e:	6f 5f       	subi	r22, 0xFF	; 255
    5d80:	7f 4f       	sbci	r23, 0xFF	; 255
    5d82:	8f 4f       	sbci	r24, 0xFF	; 255
    5d84:	9f 4f       	sbci	r25, 0xFF	; 255
    5d86:	08 95       	ret

00005d88 <__fp_split3>:
    5d88:	57 fd       	sbrc	r21, 7
    5d8a:	90 58       	subi	r25, 0x80	; 128
    5d8c:	44 0f       	add	r20, r20
    5d8e:	55 1f       	adc	r21, r21
    5d90:	59 f0       	breq	.+22     	; 0x5da8 <__fp_splitA+0x10>
    5d92:	5f 3f       	cpi	r21, 0xFF	; 255
    5d94:	71 f0       	breq	.+28     	; 0x5db2 <__fp_splitA+0x1a>
    5d96:	47 95       	ror	r20

00005d98 <__fp_splitA>:
    5d98:	88 0f       	add	r24, r24
    5d9a:	97 fb       	bst	r25, 7
    5d9c:	99 1f       	adc	r25, r25
    5d9e:	61 f0       	breq	.+24     	; 0x5db8 <__fp_splitA+0x20>
    5da0:	9f 3f       	cpi	r25, 0xFF	; 255
    5da2:	79 f0       	breq	.+30     	; 0x5dc2 <__fp_splitA+0x2a>
    5da4:	87 95       	ror	r24
    5da6:	08 95       	ret
    5da8:	12 16       	cp	r1, r18
    5daa:	13 06       	cpc	r1, r19
    5dac:	14 06       	cpc	r1, r20
    5dae:	55 1f       	adc	r21, r21
    5db0:	f2 cf       	rjmp	.-28     	; 0x5d96 <__fp_split3+0xe>
    5db2:	46 95       	lsr	r20
    5db4:	f1 df       	rcall	.-30     	; 0x5d98 <__fp_splitA>
    5db6:	08 c0       	rjmp	.+16     	; 0x5dc8 <__fp_splitA+0x30>
    5db8:	16 16       	cp	r1, r22
    5dba:	17 06       	cpc	r1, r23
    5dbc:	18 06       	cpc	r1, r24
    5dbe:	99 1f       	adc	r25, r25
    5dc0:	f1 cf       	rjmp	.-30     	; 0x5da4 <__fp_splitA+0xc>
    5dc2:	86 95       	lsr	r24
    5dc4:	71 05       	cpc	r23, r1
    5dc6:	61 05       	cpc	r22, r1
    5dc8:	08 94       	sec
    5dca:	08 95       	ret

00005dcc <__fp_zero>:
    5dcc:	e8 94       	clt

00005dce <__fp_szero>:
    5dce:	bb 27       	eor	r27, r27
    5dd0:	66 27       	eor	r22, r22
    5dd2:	77 27       	eor	r23, r23
    5dd4:	cb 01       	movw	r24, r22
    5dd6:	97 f9       	bld	r25, 7
    5dd8:	08 95       	ret

00005dda <vfprintf>:
    5dda:	2f 92       	push	r2
    5ddc:	3f 92       	push	r3
    5dde:	4f 92       	push	r4
    5de0:	5f 92       	push	r5
    5de2:	6f 92       	push	r6
    5de4:	7f 92       	push	r7
    5de6:	8f 92       	push	r8
    5de8:	9f 92       	push	r9
    5dea:	af 92       	push	r10
    5dec:	bf 92       	push	r11
    5dee:	cf 92       	push	r12
    5df0:	df 92       	push	r13
    5df2:	ef 92       	push	r14
    5df4:	ff 92       	push	r15
    5df6:	0f 93       	push	r16
    5df8:	1f 93       	push	r17
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
    5e02:	60 97       	sbiw	r28, 0x10	; 16
    5e04:	cd bf       	out	0x3d, r28	; 61
    5e06:	de bf       	out	0x3e, r29	; 62
    5e08:	7c 01       	movw	r14, r24
    5e0a:	1b 01       	movw	r2, r22
    5e0c:	6a 01       	movw	r12, r20
    5e0e:	fc 01       	movw	r30, r24
    5e10:	16 82       	std	Z+6, r1	; 0x06
    5e12:	17 82       	std	Z+7, r1	; 0x07
    5e14:	83 81       	ldd	r24, Z+3	; 0x03
    5e16:	81 ff       	sbrs	r24, 1
    5e18:	2a c3       	rjmp	.+1620   	; 0x646e <vfprintf+0x694>
    5e1a:	9e 01       	movw	r18, r28
    5e1c:	2f 5f       	subi	r18, 0xFF	; 255
    5e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e20:	39 01       	movw	r6, r18
    5e22:	f7 01       	movw	r30, r14
    5e24:	93 81       	ldd	r25, Z+3	; 0x03
    5e26:	f1 01       	movw	r30, r2
    5e28:	93 fd       	sbrc	r25, 3
    5e2a:	85 91       	lpm	r24, Z+
    5e2c:	93 ff       	sbrs	r25, 3
    5e2e:	81 91       	ld	r24, Z+
    5e30:	1f 01       	movw	r2, r30
    5e32:	88 23       	and	r24, r24
    5e34:	09 f4       	brne	.+2      	; 0x5e38 <vfprintf+0x5e>
    5e36:	17 c3       	rjmp	.+1582   	; 0x6466 <vfprintf+0x68c>
    5e38:	85 32       	cpi	r24, 0x25	; 37
    5e3a:	39 f4       	brne	.+14     	; 0x5e4a <vfprintf+0x70>
    5e3c:	93 fd       	sbrc	r25, 3
    5e3e:	85 91       	lpm	r24, Z+
    5e40:	93 ff       	sbrs	r25, 3
    5e42:	81 91       	ld	r24, Z+
    5e44:	1f 01       	movw	r2, r30
    5e46:	85 32       	cpi	r24, 0x25	; 37
    5e48:	31 f4       	brne	.+12     	; 0x5e56 <vfprintf+0x7c>
    5e4a:	b7 01       	movw	r22, r14
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	f1 d6       	rcall	.+3554   	; 0x6c32 <fputc>
    5e50:	56 01       	movw	r10, r12
    5e52:	65 01       	movw	r12, r10
    5e54:	e6 cf       	rjmp	.-52     	; 0x5e22 <vfprintf+0x48>
    5e56:	10 e0       	ldi	r17, 0x00	; 0
    5e58:	51 2c       	mov	r5, r1
    5e5a:	91 2c       	mov	r9, r1
    5e5c:	ff e1       	ldi	r31, 0x1F	; 31
    5e5e:	f9 15       	cp	r31, r9
    5e60:	d8 f0       	brcs	.+54     	; 0x5e98 <vfprintf+0xbe>
    5e62:	8b 32       	cpi	r24, 0x2B	; 43
    5e64:	79 f0       	breq	.+30     	; 0x5e84 <vfprintf+0xaa>
    5e66:	38 f4       	brcc	.+14     	; 0x5e76 <vfprintf+0x9c>
    5e68:	80 32       	cpi	r24, 0x20	; 32
    5e6a:	79 f0       	breq	.+30     	; 0x5e8a <vfprintf+0xb0>
    5e6c:	83 32       	cpi	r24, 0x23	; 35
    5e6e:	a1 f4       	brne	.+40     	; 0x5e98 <vfprintf+0xbe>
    5e70:	f9 2d       	mov	r31, r9
    5e72:	f0 61       	ori	r31, 0x10	; 16
    5e74:	2e c0       	rjmp	.+92     	; 0x5ed2 <vfprintf+0xf8>
    5e76:	8d 32       	cpi	r24, 0x2D	; 45
    5e78:	61 f0       	breq	.+24     	; 0x5e92 <vfprintf+0xb8>
    5e7a:	80 33       	cpi	r24, 0x30	; 48
    5e7c:	69 f4       	brne	.+26     	; 0x5e98 <vfprintf+0xbe>
    5e7e:	29 2d       	mov	r18, r9
    5e80:	21 60       	ori	r18, 0x01	; 1
    5e82:	2d c0       	rjmp	.+90     	; 0x5ede <vfprintf+0x104>
    5e84:	39 2d       	mov	r19, r9
    5e86:	32 60       	ori	r19, 0x02	; 2
    5e88:	93 2e       	mov	r9, r19
    5e8a:	89 2d       	mov	r24, r9
    5e8c:	84 60       	ori	r24, 0x04	; 4
    5e8e:	98 2e       	mov	r9, r24
    5e90:	2a c0       	rjmp	.+84     	; 0x5ee6 <vfprintf+0x10c>
    5e92:	e9 2d       	mov	r30, r9
    5e94:	e8 60       	ori	r30, 0x08	; 8
    5e96:	15 c0       	rjmp	.+42     	; 0x5ec2 <vfprintf+0xe8>
    5e98:	97 fc       	sbrc	r9, 7
    5e9a:	2d c0       	rjmp	.+90     	; 0x5ef6 <vfprintf+0x11c>
    5e9c:	20 ed       	ldi	r18, 0xD0	; 208
    5e9e:	28 0f       	add	r18, r24
    5ea0:	2a 30       	cpi	r18, 0x0A	; 10
    5ea2:	88 f4       	brcc	.+34     	; 0x5ec6 <vfprintf+0xec>
    5ea4:	96 fe       	sbrs	r9, 6
    5ea6:	06 c0       	rjmp	.+12     	; 0x5eb4 <vfprintf+0xda>
    5ea8:	3a e0       	ldi	r19, 0x0A	; 10
    5eaa:	13 9f       	mul	r17, r19
    5eac:	20 0d       	add	r18, r0
    5eae:	11 24       	eor	r1, r1
    5eb0:	12 2f       	mov	r17, r18
    5eb2:	19 c0       	rjmp	.+50     	; 0x5ee6 <vfprintf+0x10c>
    5eb4:	8a e0       	ldi	r24, 0x0A	; 10
    5eb6:	58 9e       	mul	r5, r24
    5eb8:	20 0d       	add	r18, r0
    5eba:	11 24       	eor	r1, r1
    5ebc:	52 2e       	mov	r5, r18
    5ebe:	e9 2d       	mov	r30, r9
    5ec0:	e0 62       	ori	r30, 0x20	; 32
    5ec2:	9e 2e       	mov	r9, r30
    5ec4:	10 c0       	rjmp	.+32     	; 0x5ee6 <vfprintf+0x10c>
    5ec6:	8e 32       	cpi	r24, 0x2E	; 46
    5ec8:	31 f4       	brne	.+12     	; 0x5ed6 <vfprintf+0xfc>
    5eca:	96 fc       	sbrc	r9, 6
    5ecc:	cc c2       	rjmp	.+1432   	; 0x6466 <vfprintf+0x68c>
    5ece:	f9 2d       	mov	r31, r9
    5ed0:	f0 64       	ori	r31, 0x40	; 64
    5ed2:	9f 2e       	mov	r9, r31
    5ed4:	08 c0       	rjmp	.+16     	; 0x5ee6 <vfprintf+0x10c>
    5ed6:	8c 36       	cpi	r24, 0x6C	; 108
    5ed8:	21 f4       	brne	.+8      	; 0x5ee2 <vfprintf+0x108>
    5eda:	29 2d       	mov	r18, r9
    5edc:	20 68       	ori	r18, 0x80	; 128
    5ede:	92 2e       	mov	r9, r18
    5ee0:	02 c0       	rjmp	.+4      	; 0x5ee6 <vfprintf+0x10c>
    5ee2:	88 36       	cpi	r24, 0x68	; 104
    5ee4:	41 f4       	brne	.+16     	; 0x5ef6 <vfprintf+0x11c>
    5ee6:	f1 01       	movw	r30, r2
    5ee8:	93 fd       	sbrc	r25, 3
    5eea:	85 91       	lpm	r24, Z+
    5eec:	93 ff       	sbrs	r25, 3
    5eee:	81 91       	ld	r24, Z+
    5ef0:	1f 01       	movw	r2, r30
    5ef2:	81 11       	cpse	r24, r1
    5ef4:	b3 cf       	rjmp	.-154    	; 0x5e5c <vfprintf+0x82>
    5ef6:	9b eb       	ldi	r25, 0xBB	; 187
    5ef8:	98 0f       	add	r25, r24
    5efa:	93 30       	cpi	r25, 0x03	; 3
    5efc:	20 f4       	brcc	.+8      	; 0x5f06 <vfprintf+0x12c>
    5efe:	99 2d       	mov	r25, r9
    5f00:	90 61       	ori	r25, 0x10	; 16
    5f02:	80 5e       	subi	r24, 0xE0	; 224
    5f04:	07 c0       	rjmp	.+14     	; 0x5f14 <vfprintf+0x13a>
    5f06:	9b e9       	ldi	r25, 0x9B	; 155
    5f08:	98 0f       	add	r25, r24
    5f0a:	93 30       	cpi	r25, 0x03	; 3
    5f0c:	08 f0       	brcs	.+2      	; 0x5f10 <vfprintf+0x136>
    5f0e:	59 c1       	rjmp	.+690    	; 0x61c2 <vfprintf+0x3e8>
    5f10:	99 2d       	mov	r25, r9
    5f12:	9f 7e       	andi	r25, 0xEF	; 239
    5f14:	96 ff       	sbrs	r25, 6
    5f16:	16 e0       	ldi	r17, 0x06	; 6
    5f18:	9f 73       	andi	r25, 0x3F	; 63
    5f1a:	99 2e       	mov	r9, r25
    5f1c:	85 36       	cpi	r24, 0x65	; 101
    5f1e:	19 f4       	brne	.+6      	; 0x5f26 <vfprintf+0x14c>
    5f20:	90 64       	ori	r25, 0x40	; 64
    5f22:	99 2e       	mov	r9, r25
    5f24:	08 c0       	rjmp	.+16     	; 0x5f36 <vfprintf+0x15c>
    5f26:	86 36       	cpi	r24, 0x66	; 102
    5f28:	21 f4       	brne	.+8      	; 0x5f32 <vfprintf+0x158>
    5f2a:	39 2f       	mov	r19, r25
    5f2c:	30 68       	ori	r19, 0x80	; 128
    5f2e:	93 2e       	mov	r9, r19
    5f30:	02 c0       	rjmp	.+4      	; 0x5f36 <vfprintf+0x15c>
    5f32:	11 11       	cpse	r17, r1
    5f34:	11 50       	subi	r17, 0x01	; 1
    5f36:	97 fe       	sbrs	r9, 7
    5f38:	07 c0       	rjmp	.+14     	; 0x5f48 <vfprintf+0x16e>
    5f3a:	1c 33       	cpi	r17, 0x3C	; 60
    5f3c:	50 f4       	brcc	.+20     	; 0x5f52 <vfprintf+0x178>
    5f3e:	44 24       	eor	r4, r4
    5f40:	43 94       	inc	r4
    5f42:	41 0e       	add	r4, r17
    5f44:	27 e0       	ldi	r18, 0x07	; 7
    5f46:	0b c0       	rjmp	.+22     	; 0x5f5e <vfprintf+0x184>
    5f48:	18 30       	cpi	r17, 0x08	; 8
    5f4a:	38 f0       	brcs	.+14     	; 0x5f5a <vfprintf+0x180>
    5f4c:	27 e0       	ldi	r18, 0x07	; 7
    5f4e:	17 e0       	ldi	r17, 0x07	; 7
    5f50:	05 c0       	rjmp	.+10     	; 0x5f5c <vfprintf+0x182>
    5f52:	27 e0       	ldi	r18, 0x07	; 7
    5f54:	9c e3       	ldi	r25, 0x3C	; 60
    5f56:	49 2e       	mov	r4, r25
    5f58:	02 c0       	rjmp	.+4      	; 0x5f5e <vfprintf+0x184>
    5f5a:	21 2f       	mov	r18, r17
    5f5c:	41 2c       	mov	r4, r1
    5f5e:	56 01       	movw	r10, r12
    5f60:	84 e0       	ldi	r24, 0x04	; 4
    5f62:	a8 0e       	add	r10, r24
    5f64:	b1 1c       	adc	r11, r1
    5f66:	f6 01       	movw	r30, r12
    5f68:	60 81       	ld	r22, Z
    5f6a:	71 81       	ldd	r23, Z+1	; 0x01
    5f6c:	82 81       	ldd	r24, Z+2	; 0x02
    5f6e:	93 81       	ldd	r25, Z+3	; 0x03
    5f70:	04 2d       	mov	r16, r4
    5f72:	a3 01       	movw	r20, r6
    5f74:	17 d5       	rcall	.+2606   	; 0x69a4 <__ftoa_engine>
    5f76:	6c 01       	movw	r12, r24
    5f78:	f9 81       	ldd	r31, Y+1	; 0x01
    5f7a:	fc 87       	std	Y+12, r31	; 0x0c
    5f7c:	f0 ff       	sbrs	r31, 0
    5f7e:	02 c0       	rjmp	.+4      	; 0x5f84 <vfprintf+0x1aa>
    5f80:	f3 ff       	sbrs	r31, 3
    5f82:	06 c0       	rjmp	.+12     	; 0x5f90 <vfprintf+0x1b6>
    5f84:	91 fc       	sbrc	r9, 1
    5f86:	06 c0       	rjmp	.+12     	; 0x5f94 <vfprintf+0x1ba>
    5f88:	92 fe       	sbrs	r9, 2
    5f8a:	06 c0       	rjmp	.+12     	; 0x5f98 <vfprintf+0x1be>
    5f8c:	00 e2       	ldi	r16, 0x20	; 32
    5f8e:	05 c0       	rjmp	.+10     	; 0x5f9a <vfprintf+0x1c0>
    5f90:	0d e2       	ldi	r16, 0x2D	; 45
    5f92:	03 c0       	rjmp	.+6      	; 0x5f9a <vfprintf+0x1c0>
    5f94:	0b e2       	ldi	r16, 0x2B	; 43
    5f96:	01 c0       	rjmp	.+2      	; 0x5f9a <vfprintf+0x1c0>
    5f98:	00 e0       	ldi	r16, 0x00	; 0
    5f9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f9c:	8c 70       	andi	r24, 0x0C	; 12
    5f9e:	19 f0       	breq	.+6      	; 0x5fa6 <vfprintf+0x1cc>
    5fa0:	01 11       	cpse	r16, r1
    5fa2:	43 c2       	rjmp	.+1158   	; 0x642a <vfprintf+0x650>
    5fa4:	80 c2       	rjmp	.+1280   	; 0x64a6 <vfprintf+0x6cc>
    5fa6:	97 fe       	sbrs	r9, 7
    5fa8:	10 c0       	rjmp	.+32     	; 0x5fca <vfprintf+0x1f0>
    5faa:	4c 0c       	add	r4, r12
    5fac:	fc 85       	ldd	r31, Y+12	; 0x0c
    5fae:	f4 ff       	sbrs	r31, 4
    5fb0:	04 c0       	rjmp	.+8      	; 0x5fba <vfprintf+0x1e0>
    5fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fb4:	81 33       	cpi	r24, 0x31	; 49
    5fb6:	09 f4       	brne	.+2      	; 0x5fba <vfprintf+0x1e0>
    5fb8:	4a 94       	dec	r4
    5fba:	14 14       	cp	r1, r4
    5fbc:	74 f5       	brge	.+92     	; 0x601a <vfprintf+0x240>
    5fbe:	28 e0       	ldi	r18, 0x08	; 8
    5fc0:	24 15       	cp	r18, r4
    5fc2:	78 f5       	brcc	.+94     	; 0x6022 <vfprintf+0x248>
    5fc4:	88 e0       	ldi	r24, 0x08	; 8
    5fc6:	48 2e       	mov	r4, r24
    5fc8:	2c c0       	rjmp	.+88     	; 0x6022 <vfprintf+0x248>
    5fca:	96 fc       	sbrc	r9, 6
    5fcc:	2a c0       	rjmp	.+84     	; 0x6022 <vfprintf+0x248>
    5fce:	81 2f       	mov	r24, r17
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	8c 15       	cp	r24, r12
    5fd4:	9d 05       	cpc	r25, r13
    5fd6:	9c f0       	brlt	.+38     	; 0x5ffe <vfprintf+0x224>
    5fd8:	3c ef       	ldi	r19, 0xFC	; 252
    5fda:	c3 16       	cp	r12, r19
    5fdc:	3f ef       	ldi	r19, 0xFF	; 255
    5fde:	d3 06       	cpc	r13, r19
    5fe0:	74 f0       	brlt	.+28     	; 0x5ffe <vfprintf+0x224>
    5fe2:	89 2d       	mov	r24, r9
    5fe4:	80 68       	ori	r24, 0x80	; 128
    5fe6:	98 2e       	mov	r9, r24
    5fe8:	0a c0       	rjmp	.+20     	; 0x5ffe <vfprintf+0x224>
    5fea:	e2 e0       	ldi	r30, 0x02	; 2
    5fec:	f0 e0       	ldi	r31, 0x00	; 0
    5fee:	ec 0f       	add	r30, r28
    5ff0:	fd 1f       	adc	r31, r29
    5ff2:	e1 0f       	add	r30, r17
    5ff4:	f1 1d       	adc	r31, r1
    5ff6:	80 81       	ld	r24, Z
    5ff8:	80 33       	cpi	r24, 0x30	; 48
    5ffa:	19 f4       	brne	.+6      	; 0x6002 <vfprintf+0x228>
    5ffc:	11 50       	subi	r17, 0x01	; 1
    5ffe:	11 11       	cpse	r17, r1
    6000:	f4 cf       	rjmp	.-24     	; 0x5fea <vfprintf+0x210>
    6002:	97 fe       	sbrs	r9, 7
    6004:	0e c0       	rjmp	.+28     	; 0x6022 <vfprintf+0x248>
    6006:	44 24       	eor	r4, r4
    6008:	43 94       	inc	r4
    600a:	41 0e       	add	r4, r17
    600c:	81 2f       	mov	r24, r17
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	c8 16       	cp	r12, r24
    6012:	d9 06       	cpc	r13, r25
    6014:	2c f4       	brge	.+10     	; 0x6020 <vfprintf+0x246>
    6016:	1c 19       	sub	r17, r12
    6018:	04 c0       	rjmp	.+8      	; 0x6022 <vfprintf+0x248>
    601a:	44 24       	eor	r4, r4
    601c:	43 94       	inc	r4
    601e:	01 c0       	rjmp	.+2      	; 0x6022 <vfprintf+0x248>
    6020:	10 e0       	ldi	r17, 0x00	; 0
    6022:	97 fe       	sbrs	r9, 7
    6024:	06 c0       	rjmp	.+12     	; 0x6032 <vfprintf+0x258>
    6026:	1c 14       	cp	r1, r12
    6028:	1d 04       	cpc	r1, r13
    602a:	34 f4       	brge	.+12     	; 0x6038 <vfprintf+0x25e>
    602c:	c6 01       	movw	r24, r12
    602e:	01 96       	adiw	r24, 0x01	; 1
    6030:	05 c0       	rjmp	.+10     	; 0x603c <vfprintf+0x262>
    6032:	85 e0       	ldi	r24, 0x05	; 5
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	02 c0       	rjmp	.+4      	; 0x603c <vfprintf+0x262>
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	01 11       	cpse	r16, r1
    603e:	01 96       	adiw	r24, 0x01	; 1
    6040:	11 23       	and	r17, r17
    6042:	31 f0       	breq	.+12     	; 0x6050 <vfprintf+0x276>
    6044:	21 2f       	mov	r18, r17
    6046:	30 e0       	ldi	r19, 0x00	; 0
    6048:	2f 5f       	subi	r18, 0xFF	; 255
    604a:	3f 4f       	sbci	r19, 0xFF	; 255
    604c:	82 0f       	add	r24, r18
    604e:	93 1f       	adc	r25, r19
    6050:	25 2d       	mov	r18, r5
    6052:	30 e0       	ldi	r19, 0x00	; 0
    6054:	82 17       	cp	r24, r18
    6056:	93 07       	cpc	r25, r19
    6058:	14 f4       	brge	.+4      	; 0x605e <vfprintf+0x284>
    605a:	58 1a       	sub	r5, r24
    605c:	01 c0       	rjmp	.+2      	; 0x6060 <vfprintf+0x286>
    605e:	51 2c       	mov	r5, r1
    6060:	89 2d       	mov	r24, r9
    6062:	89 70       	andi	r24, 0x09	; 9
    6064:	41 f4       	brne	.+16     	; 0x6076 <vfprintf+0x29c>
    6066:	55 20       	and	r5, r5
    6068:	31 f0       	breq	.+12     	; 0x6076 <vfprintf+0x29c>
    606a:	b7 01       	movw	r22, r14
    606c:	80 e2       	ldi	r24, 0x20	; 32
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	e0 d5       	rcall	.+3008   	; 0x6c32 <fputc>
    6072:	5a 94       	dec	r5
    6074:	f8 cf       	rjmp	.-16     	; 0x6066 <vfprintf+0x28c>
    6076:	00 23       	and	r16, r16
    6078:	21 f0       	breq	.+8      	; 0x6082 <vfprintf+0x2a8>
    607a:	b7 01       	movw	r22, r14
    607c:	80 2f       	mov	r24, r16
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	d8 d5       	rcall	.+2992   	; 0x6c32 <fputc>
    6082:	93 fc       	sbrc	r9, 3
    6084:	08 c0       	rjmp	.+16     	; 0x6096 <vfprintf+0x2bc>
    6086:	55 20       	and	r5, r5
    6088:	31 f0       	breq	.+12     	; 0x6096 <vfprintf+0x2bc>
    608a:	b7 01       	movw	r22, r14
    608c:	80 e3       	ldi	r24, 0x30	; 48
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	d0 d5       	rcall	.+2976   	; 0x6c32 <fputc>
    6092:	5a 94       	dec	r5
    6094:	f8 cf       	rjmp	.-16     	; 0x6086 <vfprintf+0x2ac>
    6096:	97 fe       	sbrs	r9, 7
    6098:	4a c0       	rjmp	.+148    	; 0x612e <vfprintf+0x354>
    609a:	46 01       	movw	r8, r12
    609c:	d7 fe       	sbrs	r13, 7
    609e:	02 c0       	rjmp	.+4      	; 0x60a4 <vfprintf+0x2ca>
    60a0:	81 2c       	mov	r8, r1
    60a2:	91 2c       	mov	r9, r1
    60a4:	c6 01       	movw	r24, r12
    60a6:	88 19       	sub	r24, r8
    60a8:	99 09       	sbc	r25, r9
    60aa:	f3 01       	movw	r30, r6
    60ac:	e8 0f       	add	r30, r24
    60ae:	f9 1f       	adc	r31, r25
    60b0:	ed 87       	std	Y+13, r30	; 0x0d
    60b2:	fe 87       	std	Y+14, r31	; 0x0e
    60b4:	96 01       	movw	r18, r12
    60b6:	24 19       	sub	r18, r4
    60b8:	31 09       	sbc	r19, r1
    60ba:	2f 87       	std	Y+15, r18	; 0x0f
    60bc:	38 8b       	std	Y+16, r19	; 0x10
    60be:	01 2f       	mov	r16, r17
    60c0:	10 e0       	ldi	r17, 0x00	; 0
    60c2:	11 95       	neg	r17
    60c4:	01 95       	neg	r16
    60c6:	11 09       	sbc	r17, r1
    60c8:	3f ef       	ldi	r19, 0xFF	; 255
    60ca:	83 16       	cp	r8, r19
    60cc:	93 06       	cpc	r9, r19
    60ce:	21 f4       	brne	.+8      	; 0x60d8 <vfprintf+0x2fe>
    60d0:	b7 01       	movw	r22, r14
    60d2:	8e e2       	ldi	r24, 0x2E	; 46
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	ad d5       	rcall	.+2906   	; 0x6c32 <fputc>
    60d8:	c8 14       	cp	r12, r8
    60da:	d9 04       	cpc	r13, r9
    60dc:	4c f0       	brlt	.+18     	; 0x60f0 <vfprintf+0x316>
    60de:	8f 85       	ldd	r24, Y+15	; 0x0f
    60e0:	98 89       	ldd	r25, Y+16	; 0x10
    60e2:	88 15       	cp	r24, r8
    60e4:	99 05       	cpc	r25, r9
    60e6:	24 f4       	brge	.+8      	; 0x60f0 <vfprintf+0x316>
    60e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    60ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    60ec:	81 81       	ldd	r24, Z+1	; 0x01
    60ee:	01 c0       	rjmp	.+2      	; 0x60f2 <vfprintf+0x318>
    60f0:	80 e3       	ldi	r24, 0x30	; 48
    60f2:	f1 e0       	ldi	r31, 0x01	; 1
    60f4:	8f 1a       	sub	r8, r31
    60f6:	91 08       	sbc	r9, r1
    60f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    60fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    60fc:	2f 5f       	subi	r18, 0xFF	; 255
    60fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6100:	2d 87       	std	Y+13, r18	; 0x0d
    6102:	3e 87       	std	Y+14, r19	; 0x0e
    6104:	80 16       	cp	r8, r16
    6106:	91 06       	cpc	r9, r17
    6108:	24 f0       	brlt	.+8      	; 0x6112 <vfprintf+0x338>
    610a:	b7 01       	movw	r22, r14
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	91 d5       	rcall	.+2850   	; 0x6c32 <fputc>
    6110:	db cf       	rjmp	.-74     	; 0x60c8 <vfprintf+0x2ee>
    6112:	c8 14       	cp	r12, r8
    6114:	d9 04       	cpc	r13, r9
    6116:	41 f4       	brne	.+16     	; 0x6128 <vfprintf+0x34e>
    6118:	9a 81       	ldd	r25, Y+2	; 0x02
    611a:	96 33       	cpi	r25, 0x36	; 54
    611c:	20 f4       	brcc	.+8      	; 0x6126 <vfprintf+0x34c>
    611e:	95 33       	cpi	r25, 0x35	; 53
    6120:	19 f4       	brne	.+6      	; 0x6128 <vfprintf+0x34e>
    6122:	3c 85       	ldd	r19, Y+12	; 0x0c
    6124:	34 ff       	sbrs	r19, 4
    6126:	81 e3       	ldi	r24, 0x31	; 49
    6128:	b7 01       	movw	r22, r14
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	48 c0       	rjmp	.+144    	; 0x61be <vfprintf+0x3e4>
    612e:	8a 81       	ldd	r24, Y+2	; 0x02
    6130:	81 33       	cpi	r24, 0x31	; 49
    6132:	19 f0       	breq	.+6      	; 0x613a <vfprintf+0x360>
    6134:	9c 85       	ldd	r25, Y+12	; 0x0c
    6136:	9f 7e       	andi	r25, 0xEF	; 239
    6138:	9c 87       	std	Y+12, r25	; 0x0c
    613a:	b7 01       	movw	r22, r14
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	79 d5       	rcall	.+2802   	; 0x6c32 <fputc>
    6140:	11 11       	cpse	r17, r1
    6142:	05 c0       	rjmp	.+10     	; 0x614e <vfprintf+0x374>
    6144:	94 fc       	sbrc	r9, 4
    6146:	16 c0       	rjmp	.+44     	; 0x6174 <vfprintf+0x39a>
    6148:	85 e6       	ldi	r24, 0x65	; 101
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	15 c0       	rjmp	.+42     	; 0x6178 <vfprintf+0x39e>
    614e:	b7 01       	movw	r22, r14
    6150:	8e e2       	ldi	r24, 0x2E	; 46
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	6e d5       	rcall	.+2780   	; 0x6c32 <fputc>
    6156:	1e 5f       	subi	r17, 0xFE	; 254
    6158:	82 e0       	ldi	r24, 0x02	; 2
    615a:	01 e0       	ldi	r16, 0x01	; 1
    615c:	08 0f       	add	r16, r24
    615e:	f3 01       	movw	r30, r6
    6160:	e8 0f       	add	r30, r24
    6162:	f1 1d       	adc	r31, r1
    6164:	80 81       	ld	r24, Z
    6166:	b7 01       	movw	r22, r14
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	63 d5       	rcall	.+2758   	; 0x6c32 <fputc>
    616c:	80 2f       	mov	r24, r16
    616e:	01 13       	cpse	r16, r17
    6170:	f4 cf       	rjmp	.-24     	; 0x615a <vfprintf+0x380>
    6172:	e8 cf       	rjmp	.-48     	; 0x6144 <vfprintf+0x36a>
    6174:	85 e4       	ldi	r24, 0x45	; 69
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	b7 01       	movw	r22, r14
    617a:	5b d5       	rcall	.+2742   	; 0x6c32 <fputc>
    617c:	d7 fc       	sbrc	r13, 7
    617e:	06 c0       	rjmp	.+12     	; 0x618c <vfprintf+0x3b2>
    6180:	c1 14       	cp	r12, r1
    6182:	d1 04       	cpc	r13, r1
    6184:	41 f4       	brne	.+16     	; 0x6196 <vfprintf+0x3bc>
    6186:	ec 85       	ldd	r30, Y+12	; 0x0c
    6188:	e4 ff       	sbrs	r30, 4
    618a:	05 c0       	rjmp	.+10     	; 0x6196 <vfprintf+0x3bc>
    618c:	d1 94       	neg	r13
    618e:	c1 94       	neg	r12
    6190:	d1 08       	sbc	r13, r1
    6192:	8d e2       	ldi	r24, 0x2D	; 45
    6194:	01 c0       	rjmp	.+2      	; 0x6198 <vfprintf+0x3be>
    6196:	8b e2       	ldi	r24, 0x2B	; 43
    6198:	b7 01       	movw	r22, r14
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	4a d5       	rcall	.+2708   	; 0x6c32 <fputc>
    619e:	80 e3       	ldi	r24, 0x30	; 48
    61a0:	2a e0       	ldi	r18, 0x0A	; 10
    61a2:	c2 16       	cp	r12, r18
    61a4:	d1 04       	cpc	r13, r1
    61a6:	2c f0       	brlt	.+10     	; 0x61b2 <vfprintf+0x3d8>
    61a8:	8f 5f       	subi	r24, 0xFF	; 255
    61aa:	fa e0       	ldi	r31, 0x0A	; 10
    61ac:	cf 1a       	sub	r12, r31
    61ae:	d1 08       	sbc	r13, r1
    61b0:	f7 cf       	rjmp	.-18     	; 0x61a0 <vfprintf+0x3c6>
    61b2:	b7 01       	movw	r22, r14
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	3d d5       	rcall	.+2682   	; 0x6c32 <fputc>
    61b8:	b7 01       	movw	r22, r14
    61ba:	c6 01       	movw	r24, r12
    61bc:	c0 96       	adiw	r24, 0x30	; 48
    61be:	39 d5       	rcall	.+2674   	; 0x6c32 <fputc>
    61c0:	49 c1       	rjmp	.+658    	; 0x6454 <vfprintf+0x67a>
    61c2:	83 36       	cpi	r24, 0x63	; 99
    61c4:	31 f0       	breq	.+12     	; 0x61d2 <vfprintf+0x3f8>
    61c6:	83 37       	cpi	r24, 0x73	; 115
    61c8:	79 f0       	breq	.+30     	; 0x61e8 <vfprintf+0x40e>
    61ca:	83 35       	cpi	r24, 0x53	; 83
    61cc:	09 f0       	breq	.+2      	; 0x61d0 <vfprintf+0x3f6>
    61ce:	52 c0       	rjmp	.+164    	; 0x6274 <vfprintf+0x49a>
    61d0:	1f c0       	rjmp	.+62     	; 0x6210 <vfprintf+0x436>
    61d2:	56 01       	movw	r10, r12
    61d4:	32 e0       	ldi	r19, 0x02	; 2
    61d6:	a3 0e       	add	r10, r19
    61d8:	b1 1c       	adc	r11, r1
    61da:	f6 01       	movw	r30, r12
    61dc:	80 81       	ld	r24, Z
    61de:	89 83       	std	Y+1, r24	; 0x01
    61e0:	01 e0       	ldi	r16, 0x01	; 1
    61e2:	10 e0       	ldi	r17, 0x00	; 0
    61e4:	63 01       	movw	r12, r6
    61e6:	11 c0       	rjmp	.+34     	; 0x620a <vfprintf+0x430>
    61e8:	56 01       	movw	r10, r12
    61ea:	f2 e0       	ldi	r31, 0x02	; 2
    61ec:	af 0e       	add	r10, r31
    61ee:	b1 1c       	adc	r11, r1
    61f0:	f6 01       	movw	r30, r12
    61f2:	c0 80       	ld	r12, Z
    61f4:	d1 80       	ldd	r13, Z+1	; 0x01
    61f6:	96 fe       	sbrs	r9, 6
    61f8:	03 c0       	rjmp	.+6      	; 0x6200 <vfprintf+0x426>
    61fa:	61 2f       	mov	r22, r17
    61fc:	70 e0       	ldi	r23, 0x00	; 0
    61fe:	02 c0       	rjmp	.+4      	; 0x6204 <vfprintf+0x42a>
    6200:	6f ef       	ldi	r22, 0xFF	; 255
    6202:	7f ef       	ldi	r23, 0xFF	; 255
    6204:	c6 01       	movw	r24, r12
    6206:	b1 d4       	rcall	.+2402   	; 0x6b6a <strnlen>
    6208:	8c 01       	movw	r16, r24
    620a:	f9 2d       	mov	r31, r9
    620c:	ff 77       	andi	r31, 0x7F	; 127
    620e:	13 c0       	rjmp	.+38     	; 0x6236 <vfprintf+0x45c>
    6210:	56 01       	movw	r10, r12
    6212:	22 e0       	ldi	r18, 0x02	; 2
    6214:	a2 0e       	add	r10, r18
    6216:	b1 1c       	adc	r11, r1
    6218:	f6 01       	movw	r30, r12
    621a:	c0 80       	ld	r12, Z
    621c:	d1 80       	ldd	r13, Z+1	; 0x01
    621e:	96 fe       	sbrs	r9, 6
    6220:	03 c0       	rjmp	.+6      	; 0x6228 <vfprintf+0x44e>
    6222:	61 2f       	mov	r22, r17
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	02 c0       	rjmp	.+4      	; 0x622c <vfprintf+0x452>
    6228:	6f ef       	ldi	r22, 0xFF	; 255
    622a:	7f ef       	ldi	r23, 0xFF	; 255
    622c:	c6 01       	movw	r24, r12
    622e:	92 d4       	rcall	.+2340   	; 0x6b54 <strnlen_P>
    6230:	8c 01       	movw	r16, r24
    6232:	f9 2d       	mov	r31, r9
    6234:	f0 68       	ori	r31, 0x80	; 128
    6236:	9f 2e       	mov	r9, r31
    6238:	f3 fd       	sbrc	r31, 3
    623a:	18 c0       	rjmp	.+48     	; 0x626c <vfprintf+0x492>
    623c:	85 2d       	mov	r24, r5
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	08 17       	cp	r16, r24
    6242:	19 07       	cpc	r17, r25
    6244:	98 f4       	brcc	.+38     	; 0x626c <vfprintf+0x492>
    6246:	b7 01       	movw	r22, r14
    6248:	80 e2       	ldi	r24, 0x20	; 32
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	f2 d4       	rcall	.+2532   	; 0x6c32 <fputc>
    624e:	5a 94       	dec	r5
    6250:	f5 cf       	rjmp	.-22     	; 0x623c <vfprintf+0x462>
    6252:	f6 01       	movw	r30, r12
    6254:	97 fc       	sbrc	r9, 7
    6256:	85 91       	lpm	r24, Z+
    6258:	97 fe       	sbrs	r9, 7
    625a:	81 91       	ld	r24, Z+
    625c:	6f 01       	movw	r12, r30
    625e:	b7 01       	movw	r22, r14
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	e7 d4       	rcall	.+2510   	; 0x6c32 <fputc>
    6264:	51 10       	cpse	r5, r1
    6266:	5a 94       	dec	r5
    6268:	01 50       	subi	r16, 0x01	; 1
    626a:	11 09       	sbc	r17, r1
    626c:	01 15       	cp	r16, r1
    626e:	11 05       	cpc	r17, r1
    6270:	81 f7       	brne	.-32     	; 0x6252 <vfprintf+0x478>
    6272:	f0 c0       	rjmp	.+480    	; 0x6454 <vfprintf+0x67a>
    6274:	84 36       	cpi	r24, 0x64	; 100
    6276:	11 f0       	breq	.+4      	; 0x627c <vfprintf+0x4a2>
    6278:	89 36       	cpi	r24, 0x69	; 105
    627a:	59 f5       	brne	.+86     	; 0x62d2 <vfprintf+0x4f8>
    627c:	56 01       	movw	r10, r12
    627e:	97 fe       	sbrs	r9, 7
    6280:	09 c0       	rjmp	.+18     	; 0x6294 <vfprintf+0x4ba>
    6282:	24 e0       	ldi	r18, 0x04	; 4
    6284:	a2 0e       	add	r10, r18
    6286:	b1 1c       	adc	r11, r1
    6288:	f6 01       	movw	r30, r12
    628a:	60 81       	ld	r22, Z
    628c:	71 81       	ldd	r23, Z+1	; 0x01
    628e:	82 81       	ldd	r24, Z+2	; 0x02
    6290:	93 81       	ldd	r25, Z+3	; 0x03
    6292:	0a c0       	rjmp	.+20     	; 0x62a8 <vfprintf+0x4ce>
    6294:	f2 e0       	ldi	r31, 0x02	; 2
    6296:	af 0e       	add	r10, r31
    6298:	b1 1c       	adc	r11, r1
    629a:	f6 01       	movw	r30, r12
    629c:	60 81       	ld	r22, Z
    629e:	71 81       	ldd	r23, Z+1	; 0x01
    62a0:	07 2e       	mov	r0, r23
    62a2:	00 0c       	add	r0, r0
    62a4:	88 0b       	sbc	r24, r24
    62a6:	99 0b       	sbc	r25, r25
    62a8:	f9 2d       	mov	r31, r9
    62aa:	ff 76       	andi	r31, 0x6F	; 111
    62ac:	9f 2e       	mov	r9, r31
    62ae:	97 ff       	sbrs	r25, 7
    62b0:	09 c0       	rjmp	.+18     	; 0x62c4 <vfprintf+0x4ea>
    62b2:	90 95       	com	r25
    62b4:	80 95       	com	r24
    62b6:	70 95       	com	r23
    62b8:	61 95       	neg	r22
    62ba:	7f 4f       	sbci	r23, 0xFF	; 255
    62bc:	8f 4f       	sbci	r24, 0xFF	; 255
    62be:	9f 4f       	sbci	r25, 0xFF	; 255
    62c0:	f0 68       	ori	r31, 0x80	; 128
    62c2:	9f 2e       	mov	r9, r31
    62c4:	2a e0       	ldi	r18, 0x0A	; 10
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	a3 01       	movw	r20, r6
    62ca:	32 d5       	rcall	.+2660   	; 0x6d30 <__ultoa_invert>
    62cc:	c8 2e       	mov	r12, r24
    62ce:	c6 18       	sub	r12, r6
    62d0:	3e c0       	rjmp	.+124    	; 0x634e <vfprintf+0x574>
    62d2:	09 2d       	mov	r16, r9
    62d4:	85 37       	cpi	r24, 0x75	; 117
    62d6:	21 f4       	brne	.+8      	; 0x62e0 <vfprintf+0x506>
    62d8:	0f 7e       	andi	r16, 0xEF	; 239
    62da:	2a e0       	ldi	r18, 0x0A	; 10
    62dc:	30 e0       	ldi	r19, 0x00	; 0
    62de:	1d c0       	rjmp	.+58     	; 0x631a <vfprintf+0x540>
    62e0:	09 7f       	andi	r16, 0xF9	; 249
    62e2:	8f 36       	cpi	r24, 0x6F	; 111
    62e4:	91 f0       	breq	.+36     	; 0x630a <vfprintf+0x530>
    62e6:	18 f4       	brcc	.+6      	; 0x62ee <vfprintf+0x514>
    62e8:	88 35       	cpi	r24, 0x58	; 88
    62ea:	59 f0       	breq	.+22     	; 0x6302 <vfprintf+0x528>
    62ec:	bc c0       	rjmp	.+376    	; 0x6466 <vfprintf+0x68c>
    62ee:	80 37       	cpi	r24, 0x70	; 112
    62f0:	19 f0       	breq	.+6      	; 0x62f8 <vfprintf+0x51e>
    62f2:	88 37       	cpi	r24, 0x78	; 120
    62f4:	11 f0       	breq	.+4      	; 0x62fa <vfprintf+0x520>
    62f6:	b7 c0       	rjmp	.+366    	; 0x6466 <vfprintf+0x68c>
    62f8:	00 61       	ori	r16, 0x10	; 16
    62fa:	04 ff       	sbrs	r16, 4
    62fc:	09 c0       	rjmp	.+18     	; 0x6310 <vfprintf+0x536>
    62fe:	04 60       	ori	r16, 0x04	; 4
    6300:	07 c0       	rjmp	.+14     	; 0x6310 <vfprintf+0x536>
    6302:	94 fe       	sbrs	r9, 4
    6304:	08 c0       	rjmp	.+16     	; 0x6316 <vfprintf+0x53c>
    6306:	06 60       	ori	r16, 0x06	; 6
    6308:	06 c0       	rjmp	.+12     	; 0x6316 <vfprintf+0x53c>
    630a:	28 e0       	ldi	r18, 0x08	; 8
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	05 c0       	rjmp	.+10     	; 0x631a <vfprintf+0x540>
    6310:	20 e1       	ldi	r18, 0x10	; 16
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	02 c0       	rjmp	.+4      	; 0x631a <vfprintf+0x540>
    6316:	20 e1       	ldi	r18, 0x10	; 16
    6318:	32 e0       	ldi	r19, 0x02	; 2
    631a:	56 01       	movw	r10, r12
    631c:	07 ff       	sbrs	r16, 7
    631e:	09 c0       	rjmp	.+18     	; 0x6332 <vfprintf+0x558>
    6320:	84 e0       	ldi	r24, 0x04	; 4
    6322:	a8 0e       	add	r10, r24
    6324:	b1 1c       	adc	r11, r1
    6326:	f6 01       	movw	r30, r12
    6328:	60 81       	ld	r22, Z
    632a:	71 81       	ldd	r23, Z+1	; 0x01
    632c:	82 81       	ldd	r24, Z+2	; 0x02
    632e:	93 81       	ldd	r25, Z+3	; 0x03
    6330:	08 c0       	rjmp	.+16     	; 0x6342 <vfprintf+0x568>
    6332:	f2 e0       	ldi	r31, 0x02	; 2
    6334:	af 0e       	add	r10, r31
    6336:	b1 1c       	adc	r11, r1
    6338:	f6 01       	movw	r30, r12
    633a:	60 81       	ld	r22, Z
    633c:	71 81       	ldd	r23, Z+1	; 0x01
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	a3 01       	movw	r20, r6
    6344:	f5 d4       	rcall	.+2538   	; 0x6d30 <__ultoa_invert>
    6346:	c8 2e       	mov	r12, r24
    6348:	c6 18       	sub	r12, r6
    634a:	0f 77       	andi	r16, 0x7F	; 127
    634c:	90 2e       	mov	r9, r16
    634e:	96 fe       	sbrs	r9, 6
    6350:	0b c0       	rjmp	.+22     	; 0x6368 <vfprintf+0x58e>
    6352:	09 2d       	mov	r16, r9
    6354:	0e 7f       	andi	r16, 0xFE	; 254
    6356:	c1 16       	cp	r12, r17
    6358:	50 f4       	brcc	.+20     	; 0x636e <vfprintf+0x594>
    635a:	94 fe       	sbrs	r9, 4
    635c:	0a c0       	rjmp	.+20     	; 0x6372 <vfprintf+0x598>
    635e:	92 fc       	sbrc	r9, 2
    6360:	08 c0       	rjmp	.+16     	; 0x6372 <vfprintf+0x598>
    6362:	09 2d       	mov	r16, r9
    6364:	0e 7e       	andi	r16, 0xEE	; 238
    6366:	05 c0       	rjmp	.+10     	; 0x6372 <vfprintf+0x598>
    6368:	dc 2c       	mov	r13, r12
    636a:	09 2d       	mov	r16, r9
    636c:	03 c0       	rjmp	.+6      	; 0x6374 <vfprintf+0x59a>
    636e:	dc 2c       	mov	r13, r12
    6370:	01 c0       	rjmp	.+2      	; 0x6374 <vfprintf+0x59a>
    6372:	d1 2e       	mov	r13, r17
    6374:	04 ff       	sbrs	r16, 4
    6376:	0d c0       	rjmp	.+26     	; 0x6392 <vfprintf+0x5b8>
    6378:	fe 01       	movw	r30, r28
    637a:	ec 0d       	add	r30, r12
    637c:	f1 1d       	adc	r31, r1
    637e:	80 81       	ld	r24, Z
    6380:	80 33       	cpi	r24, 0x30	; 48
    6382:	11 f4       	brne	.+4      	; 0x6388 <vfprintf+0x5ae>
    6384:	09 7e       	andi	r16, 0xE9	; 233
    6386:	09 c0       	rjmp	.+18     	; 0x639a <vfprintf+0x5c0>
    6388:	02 ff       	sbrs	r16, 2
    638a:	06 c0       	rjmp	.+12     	; 0x6398 <vfprintf+0x5be>
    638c:	d3 94       	inc	r13
    638e:	d3 94       	inc	r13
    6390:	04 c0       	rjmp	.+8      	; 0x639a <vfprintf+0x5c0>
    6392:	80 2f       	mov	r24, r16
    6394:	86 78       	andi	r24, 0x86	; 134
    6396:	09 f0       	breq	.+2      	; 0x639a <vfprintf+0x5c0>
    6398:	d3 94       	inc	r13
    639a:	03 fd       	sbrc	r16, 3
    639c:	10 c0       	rjmp	.+32     	; 0x63be <vfprintf+0x5e4>
    639e:	00 ff       	sbrs	r16, 0
    63a0:	06 c0       	rjmp	.+12     	; 0x63ae <vfprintf+0x5d4>
    63a2:	1c 2d       	mov	r17, r12
    63a4:	d5 14       	cp	r13, r5
    63a6:	78 f4       	brcc	.+30     	; 0x63c6 <vfprintf+0x5ec>
    63a8:	15 0d       	add	r17, r5
    63aa:	1d 19       	sub	r17, r13
    63ac:	0c c0       	rjmp	.+24     	; 0x63c6 <vfprintf+0x5ec>
    63ae:	d5 14       	cp	r13, r5
    63b0:	50 f4       	brcc	.+20     	; 0x63c6 <vfprintf+0x5ec>
    63b2:	b7 01       	movw	r22, r14
    63b4:	80 e2       	ldi	r24, 0x20	; 32
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	3c d4       	rcall	.+2168   	; 0x6c32 <fputc>
    63ba:	d3 94       	inc	r13
    63bc:	f8 cf       	rjmp	.-16     	; 0x63ae <vfprintf+0x5d4>
    63be:	d5 14       	cp	r13, r5
    63c0:	10 f4       	brcc	.+4      	; 0x63c6 <vfprintf+0x5ec>
    63c2:	5d 18       	sub	r5, r13
    63c4:	01 c0       	rjmp	.+2      	; 0x63c8 <vfprintf+0x5ee>
    63c6:	51 2c       	mov	r5, r1
    63c8:	04 ff       	sbrs	r16, 4
    63ca:	0f c0       	rjmp	.+30     	; 0x63ea <vfprintf+0x610>
    63cc:	b7 01       	movw	r22, r14
    63ce:	80 e3       	ldi	r24, 0x30	; 48
    63d0:	90 e0       	ldi	r25, 0x00	; 0
    63d2:	2f d4       	rcall	.+2142   	; 0x6c32 <fputc>
    63d4:	02 ff       	sbrs	r16, 2
    63d6:	16 c0       	rjmp	.+44     	; 0x6404 <vfprintf+0x62a>
    63d8:	01 fd       	sbrc	r16, 1
    63da:	03 c0       	rjmp	.+6      	; 0x63e2 <vfprintf+0x608>
    63dc:	88 e7       	ldi	r24, 0x78	; 120
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	02 c0       	rjmp	.+4      	; 0x63e6 <vfprintf+0x60c>
    63e2:	88 e5       	ldi	r24, 0x58	; 88
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	b7 01       	movw	r22, r14
    63e8:	0c c0       	rjmp	.+24     	; 0x6402 <vfprintf+0x628>
    63ea:	80 2f       	mov	r24, r16
    63ec:	86 78       	andi	r24, 0x86	; 134
    63ee:	51 f0       	breq	.+20     	; 0x6404 <vfprintf+0x62a>
    63f0:	01 ff       	sbrs	r16, 1
    63f2:	02 c0       	rjmp	.+4      	; 0x63f8 <vfprintf+0x61e>
    63f4:	8b e2       	ldi	r24, 0x2B	; 43
    63f6:	01 c0       	rjmp	.+2      	; 0x63fa <vfprintf+0x620>
    63f8:	80 e2       	ldi	r24, 0x20	; 32
    63fa:	07 fd       	sbrc	r16, 7
    63fc:	8d e2       	ldi	r24, 0x2D	; 45
    63fe:	b7 01       	movw	r22, r14
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	17 d4       	rcall	.+2094   	; 0x6c32 <fputc>
    6404:	c1 16       	cp	r12, r17
    6406:	30 f4       	brcc	.+12     	; 0x6414 <vfprintf+0x63a>
    6408:	b7 01       	movw	r22, r14
    640a:	80 e3       	ldi	r24, 0x30	; 48
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	11 d4       	rcall	.+2082   	; 0x6c32 <fputc>
    6410:	11 50       	subi	r17, 0x01	; 1
    6412:	f8 cf       	rjmp	.-16     	; 0x6404 <vfprintf+0x62a>
    6414:	ca 94       	dec	r12
    6416:	f3 01       	movw	r30, r6
    6418:	ec 0d       	add	r30, r12
    641a:	f1 1d       	adc	r31, r1
    641c:	80 81       	ld	r24, Z
    641e:	b7 01       	movw	r22, r14
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	07 d4       	rcall	.+2062   	; 0x6c32 <fputc>
    6424:	c1 10       	cpse	r12, r1
    6426:	f6 cf       	rjmp	.-20     	; 0x6414 <vfprintf+0x63a>
    6428:	15 c0       	rjmp	.+42     	; 0x6454 <vfprintf+0x67a>
    642a:	f4 e0       	ldi	r31, 0x04	; 4
    642c:	f5 15       	cp	r31, r5
    642e:	50 f5       	brcc	.+84     	; 0x6484 <vfprintf+0x6aa>
    6430:	84 e0       	ldi	r24, 0x04	; 4
    6432:	58 1a       	sub	r5, r24
    6434:	93 fe       	sbrs	r9, 3
    6436:	1e c0       	rjmp	.+60     	; 0x6474 <vfprintf+0x69a>
    6438:	01 11       	cpse	r16, r1
    643a:	25 c0       	rjmp	.+74     	; 0x6486 <vfprintf+0x6ac>
    643c:	2c 85       	ldd	r18, Y+12	; 0x0c
    643e:	23 ff       	sbrs	r18, 3
    6440:	27 c0       	rjmp	.+78     	; 0x6490 <vfprintf+0x6b6>
    6442:	0c ef       	ldi	r16, 0xFC	; 252
    6444:	11 e0       	ldi	r17, 0x01	; 1
    6446:	39 2d       	mov	r19, r9
    6448:	30 71       	andi	r19, 0x10	; 16
    644a:	93 2e       	mov	r9, r19
    644c:	f8 01       	movw	r30, r16
    644e:	84 91       	lpm	r24, Z
    6450:	81 11       	cpse	r24, r1
    6452:	21 c0       	rjmp	.+66     	; 0x6496 <vfprintf+0x6bc>
    6454:	55 20       	and	r5, r5
    6456:	09 f4       	brne	.+2      	; 0x645a <vfprintf+0x680>
    6458:	fc cc       	rjmp	.-1544   	; 0x5e52 <vfprintf+0x78>
    645a:	b7 01       	movw	r22, r14
    645c:	80 e2       	ldi	r24, 0x20	; 32
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	e8 d3       	rcall	.+2000   	; 0x6c32 <fputc>
    6462:	5a 94       	dec	r5
    6464:	f7 cf       	rjmp	.-18     	; 0x6454 <vfprintf+0x67a>
    6466:	f7 01       	movw	r30, r14
    6468:	86 81       	ldd	r24, Z+6	; 0x06
    646a:	97 81       	ldd	r25, Z+7	; 0x07
    646c:	23 c0       	rjmp	.+70     	; 0x64b4 <vfprintf+0x6da>
    646e:	8f ef       	ldi	r24, 0xFF	; 255
    6470:	9f ef       	ldi	r25, 0xFF	; 255
    6472:	20 c0       	rjmp	.+64     	; 0x64b4 <vfprintf+0x6da>
    6474:	b7 01       	movw	r22, r14
    6476:	80 e2       	ldi	r24, 0x20	; 32
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	db d3       	rcall	.+1974   	; 0x6c32 <fputc>
    647c:	5a 94       	dec	r5
    647e:	51 10       	cpse	r5, r1
    6480:	f9 cf       	rjmp	.-14     	; 0x6474 <vfprintf+0x69a>
    6482:	da cf       	rjmp	.-76     	; 0x6438 <vfprintf+0x65e>
    6484:	51 2c       	mov	r5, r1
    6486:	b7 01       	movw	r22, r14
    6488:	80 2f       	mov	r24, r16
    648a:	90 e0       	ldi	r25, 0x00	; 0
    648c:	d2 d3       	rcall	.+1956   	; 0x6c32 <fputc>
    648e:	d6 cf       	rjmp	.-84     	; 0x643c <vfprintf+0x662>
    6490:	00 e0       	ldi	r16, 0x00	; 0
    6492:	12 e0       	ldi	r17, 0x02	; 2
    6494:	d8 cf       	rjmp	.-80     	; 0x6446 <vfprintf+0x66c>
    6496:	91 10       	cpse	r9, r1
    6498:	80 52       	subi	r24, 0x20	; 32
    649a:	b7 01       	movw	r22, r14
    649c:	90 e0       	ldi	r25, 0x00	; 0
    649e:	c9 d3       	rcall	.+1938   	; 0x6c32 <fputc>
    64a0:	0f 5f       	subi	r16, 0xFF	; 255
    64a2:	1f 4f       	sbci	r17, 0xFF	; 255
    64a4:	d3 cf       	rjmp	.-90     	; 0x644c <vfprintf+0x672>
    64a6:	23 e0       	ldi	r18, 0x03	; 3
    64a8:	25 15       	cp	r18, r5
    64aa:	10 f4       	brcc	.+4      	; 0x64b0 <vfprintf+0x6d6>
    64ac:	83 e0       	ldi	r24, 0x03	; 3
    64ae:	c1 cf       	rjmp	.-126    	; 0x6432 <vfprintf+0x658>
    64b0:	51 2c       	mov	r5, r1
    64b2:	c4 cf       	rjmp	.-120    	; 0x643c <vfprintf+0x662>
    64b4:	60 96       	adiw	r28, 0x10	; 16
    64b6:	cd bf       	out	0x3d, r28	; 61
    64b8:	de bf       	out	0x3e, r29	; 62
    64ba:	df 91       	pop	r29
    64bc:	cf 91       	pop	r28
    64be:	1f 91       	pop	r17
    64c0:	0f 91       	pop	r16
    64c2:	ff 90       	pop	r15
    64c4:	ef 90       	pop	r14
    64c6:	df 90       	pop	r13
    64c8:	cf 90       	pop	r12
    64ca:	bf 90       	pop	r11
    64cc:	af 90       	pop	r10
    64ce:	9f 90       	pop	r9
    64d0:	8f 90       	pop	r8
    64d2:	7f 90       	pop	r7
    64d4:	6f 90       	pop	r6
    64d6:	5f 90       	pop	r5
    64d8:	4f 90       	pop	r4
    64da:	3f 90       	pop	r3
    64dc:	2f 90       	pop	r2
    64de:	08 95       	ret

000064e0 <__udivmodsi4>:
    64e0:	a1 e2       	ldi	r26, 0x21	; 33
    64e2:	1a 2e       	mov	r1, r26
    64e4:	aa 1b       	sub	r26, r26
    64e6:	bb 1b       	sub	r27, r27
    64e8:	fd 01       	movw	r30, r26
    64ea:	0d c0       	rjmp	.+26     	; 0x6506 <__udivmodsi4_ep>

000064ec <__udivmodsi4_loop>:
    64ec:	aa 1f       	adc	r26, r26
    64ee:	bb 1f       	adc	r27, r27
    64f0:	ee 1f       	adc	r30, r30
    64f2:	ff 1f       	adc	r31, r31
    64f4:	a2 17       	cp	r26, r18
    64f6:	b3 07       	cpc	r27, r19
    64f8:	e4 07       	cpc	r30, r20
    64fa:	f5 07       	cpc	r31, r21
    64fc:	20 f0       	brcs	.+8      	; 0x6506 <__udivmodsi4_ep>
    64fe:	a2 1b       	sub	r26, r18
    6500:	b3 0b       	sbc	r27, r19
    6502:	e4 0b       	sbc	r30, r20
    6504:	f5 0b       	sbc	r31, r21

00006506 <__udivmodsi4_ep>:
    6506:	66 1f       	adc	r22, r22
    6508:	77 1f       	adc	r23, r23
    650a:	88 1f       	adc	r24, r24
    650c:	99 1f       	adc	r25, r25
    650e:	1a 94       	dec	r1
    6510:	69 f7       	brne	.-38     	; 0x64ec <__udivmodsi4_loop>
    6512:	60 95       	com	r22
    6514:	70 95       	com	r23
    6516:	80 95       	com	r24
    6518:	90 95       	com	r25
    651a:	9b 01       	movw	r18, r22
    651c:	ac 01       	movw	r20, r24
    651e:	bd 01       	movw	r22, r26
    6520:	cf 01       	movw	r24, r30
    6522:	08 95       	ret

00006524 <__muldi3>:
    6524:	df 93       	push	r29
    6526:	cf 93       	push	r28
    6528:	1f 93       	push	r17
    652a:	0f 93       	push	r16
    652c:	9a 9d       	mul	r25, r10
    652e:	f0 2d       	mov	r31, r0
    6530:	21 9f       	mul	r18, r17
    6532:	f0 0d       	add	r31, r0
    6534:	8b 9d       	mul	r24, r11
    6536:	f0 0d       	add	r31, r0
    6538:	8a 9d       	mul	r24, r10
    653a:	e0 2d       	mov	r30, r0
    653c:	f1 0d       	add	r31, r1
    653e:	03 9f       	mul	r16, r19
    6540:	f0 0d       	add	r31, r0
    6542:	02 9f       	mul	r16, r18
    6544:	e0 0d       	add	r30, r0
    6546:	f1 1d       	adc	r31, r1
    6548:	4e 9d       	mul	r20, r14
    654a:	e0 0d       	add	r30, r0
    654c:	f1 1d       	adc	r31, r1
    654e:	5e 9d       	mul	r21, r14
    6550:	f0 0d       	add	r31, r0
    6552:	4f 9d       	mul	r20, r15
    6554:	f0 0d       	add	r31, r0
    6556:	7f 93       	push	r23
    6558:	6f 93       	push	r22
    655a:	bf 92       	push	r11
    655c:	af 92       	push	r10
    655e:	5f 93       	push	r21
    6560:	4f 93       	push	r20
    6562:	d5 01       	movw	r26, r10
    6564:	ef d0       	rcall	.+478    	; 0x6744 <__umulhisi3>
    6566:	8b 01       	movw	r16, r22
    6568:	ac 01       	movw	r20, r24
    656a:	d7 01       	movw	r26, r14
    656c:	eb d0       	rcall	.+470    	; 0x6744 <__umulhisi3>
    656e:	eb 01       	movw	r28, r22
    6570:	e8 0f       	add	r30, r24
    6572:	f9 1f       	adc	r31, r25
    6574:	d6 01       	movw	r26, r12
    6576:	1f d0       	rcall	.+62     	; 0x65b6 <__muldi3_6>
    6578:	2f 91       	pop	r18
    657a:	3f 91       	pop	r19
    657c:	d6 01       	movw	r26, r12
    657e:	e2 d0       	rcall	.+452    	; 0x6744 <__umulhisi3>
    6580:	c6 0f       	add	r28, r22
    6582:	d7 1f       	adc	r29, r23
    6584:	e8 1f       	adc	r30, r24
    6586:	f9 1f       	adc	r31, r25
    6588:	af 91       	pop	r26
    658a:	bf 91       	pop	r27
    658c:	14 d0       	rcall	.+40     	; 0x65b6 <__muldi3_6>
    658e:	2f 91       	pop	r18
    6590:	3f 91       	pop	r19
    6592:	d8 d0       	rcall	.+432    	; 0x6744 <__umulhisi3>
    6594:	c6 0f       	add	r28, r22
    6596:	d7 1f       	adc	r29, r23
    6598:	e8 1f       	adc	r30, r24
    659a:	f9 1f       	adc	r31, r25
    659c:	d6 01       	movw	r26, r12
    659e:	d2 d0       	rcall	.+420    	; 0x6744 <__umulhisi3>
    65a0:	e6 0f       	add	r30, r22
    65a2:	f7 1f       	adc	r31, r23
    65a4:	98 01       	movw	r18, r16
    65a6:	be 01       	movw	r22, r28
    65a8:	cf 01       	movw	r24, r30
    65aa:	11 24       	eor	r1, r1
    65ac:	0f 91       	pop	r16
    65ae:	1f 91       	pop	r17
    65b0:	cf 91       	pop	r28
    65b2:	df 91       	pop	r29
    65b4:	08 95       	ret

000065b6 <__muldi3_6>:
    65b6:	c6 d0       	rcall	.+396    	; 0x6744 <__umulhisi3>
    65b8:	46 0f       	add	r20, r22
    65ba:	57 1f       	adc	r21, r23
    65bc:	c8 1f       	adc	r28, r24
    65be:	d9 1f       	adc	r29, r25
    65c0:	08 f4       	brcc	.+2      	; 0x65c4 <__muldi3_6+0xe>
    65c2:	31 96       	adiw	r30, 0x01	; 1
    65c4:	08 95       	ret

000065c6 <__umoddi3>:
    65c6:	68 94       	set
    65c8:	01 c0       	rjmp	.+2      	; 0x65cc <__udivdi3_umoddi3>

000065ca <__udivdi3>:
    65ca:	e8 94       	clt

000065cc <__udivdi3_umoddi3>:
    65cc:	8f 92       	push	r8
    65ce:	9f 92       	push	r9
    65d0:	cf 93       	push	r28
    65d2:	df 93       	push	r29
    65d4:	05 d0       	rcall	.+10     	; 0x65e0 <__udivmod64>
    65d6:	df 91       	pop	r29
    65d8:	cf 91       	pop	r28
    65da:	9f 90       	pop	r9
    65dc:	8f 90       	pop	r8
    65de:	08 95       	ret

000065e0 <__udivmod64>:
    65e0:	88 24       	eor	r8, r8
    65e2:	99 24       	eor	r9, r9
    65e4:	f4 01       	movw	r30, r8
    65e6:	e4 01       	movw	r28, r8
    65e8:	b0 e4       	ldi	r27, 0x40	; 64
    65ea:	9f 93       	push	r25
    65ec:	aa 27       	eor	r26, r26
    65ee:	9a 15       	cp	r25, r10
    65f0:	8b 04       	cpc	r8, r11
    65f2:	9c 04       	cpc	r9, r12
    65f4:	ed 05       	cpc	r30, r13
    65f6:	fe 05       	cpc	r31, r14
    65f8:	cf 05       	cpc	r28, r15
    65fa:	d0 07       	cpc	r29, r16
    65fc:	a1 07       	cpc	r26, r17
    65fe:	98 f4       	brcc	.+38     	; 0x6626 <__udivmod64+0x46>
    6600:	ad 2f       	mov	r26, r29
    6602:	dc 2f       	mov	r29, r28
    6604:	cf 2f       	mov	r28, r31
    6606:	fe 2f       	mov	r31, r30
    6608:	e9 2d       	mov	r30, r9
    660a:	98 2c       	mov	r9, r8
    660c:	89 2e       	mov	r8, r25
    660e:	98 2f       	mov	r25, r24
    6610:	87 2f       	mov	r24, r23
    6612:	76 2f       	mov	r23, r22
    6614:	65 2f       	mov	r22, r21
    6616:	54 2f       	mov	r21, r20
    6618:	43 2f       	mov	r20, r19
    661a:	32 2f       	mov	r19, r18
    661c:	22 27       	eor	r18, r18
    661e:	b8 50       	subi	r27, 0x08	; 8
    6620:	31 f7       	brne	.-52     	; 0x65ee <__udivmod64+0xe>
    6622:	bf 91       	pop	r27
    6624:	27 c0       	rjmp	.+78     	; 0x6674 <__udivmod64+0x94>
    6626:	1b 2e       	mov	r1, r27
    6628:	bf 91       	pop	r27
    662a:	bb 27       	eor	r27, r27
    662c:	22 0f       	add	r18, r18
    662e:	33 1f       	adc	r19, r19
    6630:	44 1f       	adc	r20, r20
    6632:	55 1f       	adc	r21, r21
    6634:	66 1f       	adc	r22, r22
    6636:	77 1f       	adc	r23, r23
    6638:	88 1f       	adc	r24, r24
    663a:	99 1f       	adc	r25, r25
    663c:	88 1c       	adc	r8, r8
    663e:	99 1c       	adc	r9, r9
    6640:	ee 1f       	adc	r30, r30
    6642:	ff 1f       	adc	r31, r31
    6644:	cc 1f       	adc	r28, r28
    6646:	dd 1f       	adc	r29, r29
    6648:	aa 1f       	adc	r26, r26
    664a:	bb 1f       	adc	r27, r27
    664c:	8a 14       	cp	r8, r10
    664e:	9b 04       	cpc	r9, r11
    6650:	ec 05       	cpc	r30, r12
    6652:	fd 05       	cpc	r31, r13
    6654:	ce 05       	cpc	r28, r14
    6656:	df 05       	cpc	r29, r15
    6658:	a0 07       	cpc	r26, r16
    665a:	b1 07       	cpc	r27, r17
    665c:	48 f0       	brcs	.+18     	; 0x6670 <__udivmod64+0x90>
    665e:	8a 18       	sub	r8, r10
    6660:	9b 08       	sbc	r9, r11
    6662:	ec 09       	sbc	r30, r12
    6664:	fd 09       	sbc	r31, r13
    6666:	ce 09       	sbc	r28, r14
    6668:	df 09       	sbc	r29, r15
    666a:	a0 0b       	sbc	r26, r16
    666c:	b1 0b       	sbc	r27, r17
    666e:	21 60       	ori	r18, 0x01	; 1
    6670:	1a 94       	dec	r1
    6672:	e1 f6       	brne	.-72     	; 0x662c <__udivmod64+0x4c>
    6674:	2e f4       	brtc	.+10     	; 0x6680 <__udivmod64+0xa0>
    6676:	94 01       	movw	r18, r8
    6678:	af 01       	movw	r20, r30
    667a:	be 01       	movw	r22, r28
    667c:	cd 01       	movw	r24, r26
    667e:	00 0c       	add	r0, r0
    6680:	08 95       	ret

00006682 <__ashldi3>:
    6682:	0f 93       	push	r16
    6684:	08 30       	cpi	r16, 0x08	; 8
    6686:	90 f0       	brcs	.+36     	; 0x66ac <__ashldi3+0x2a>
    6688:	98 2f       	mov	r25, r24
    668a:	87 2f       	mov	r24, r23
    668c:	76 2f       	mov	r23, r22
    668e:	65 2f       	mov	r22, r21
    6690:	54 2f       	mov	r21, r20
    6692:	43 2f       	mov	r20, r19
    6694:	32 2f       	mov	r19, r18
    6696:	22 27       	eor	r18, r18
    6698:	08 50       	subi	r16, 0x08	; 8
    669a:	f4 cf       	rjmp	.-24     	; 0x6684 <__ashldi3+0x2>
    669c:	22 0f       	add	r18, r18
    669e:	33 1f       	adc	r19, r19
    66a0:	44 1f       	adc	r20, r20
    66a2:	55 1f       	adc	r21, r21
    66a4:	66 1f       	adc	r22, r22
    66a6:	77 1f       	adc	r23, r23
    66a8:	88 1f       	adc	r24, r24
    66aa:	99 1f       	adc	r25, r25
    66ac:	0a 95       	dec	r16
    66ae:	b2 f7       	brpl	.-20     	; 0x669c <__ashldi3+0x1a>
    66b0:	0f 91       	pop	r16
    66b2:	08 95       	ret

000066b4 <__ashrdi3>:
    66b4:	97 fb       	bst	r25, 7
    66b6:	10 f8       	bld	r1, 0

000066b8 <__lshrdi3>:
    66b8:	16 94       	lsr	r1
    66ba:	00 08       	sbc	r0, r0
    66bc:	0f 93       	push	r16
    66be:	08 30       	cpi	r16, 0x08	; 8
    66c0:	98 f0       	brcs	.+38     	; 0x66e8 <__lshrdi3+0x30>
    66c2:	08 50       	subi	r16, 0x08	; 8
    66c4:	23 2f       	mov	r18, r19
    66c6:	34 2f       	mov	r19, r20
    66c8:	45 2f       	mov	r20, r21
    66ca:	56 2f       	mov	r21, r22
    66cc:	67 2f       	mov	r22, r23
    66ce:	78 2f       	mov	r23, r24
    66d0:	89 2f       	mov	r24, r25
    66d2:	90 2d       	mov	r25, r0
    66d4:	f4 cf       	rjmp	.-24     	; 0x66be <__lshrdi3+0x6>
    66d6:	05 94       	asr	r0
    66d8:	97 95       	ror	r25
    66da:	87 95       	ror	r24
    66dc:	77 95       	ror	r23
    66de:	67 95       	ror	r22
    66e0:	57 95       	ror	r21
    66e2:	47 95       	ror	r20
    66e4:	37 95       	ror	r19
    66e6:	27 95       	ror	r18
    66e8:	0a 95       	dec	r16
    66ea:	aa f7       	brpl	.-22     	; 0x66d6 <__lshrdi3+0x1e>
    66ec:	0f 91       	pop	r16
    66ee:	08 95       	ret

000066f0 <__adddi3>:
    66f0:	2a 0d       	add	r18, r10
    66f2:	3b 1d       	adc	r19, r11
    66f4:	4c 1d       	adc	r20, r12
    66f6:	5d 1d       	adc	r21, r13
    66f8:	6e 1d       	adc	r22, r14
    66fa:	7f 1d       	adc	r23, r15
    66fc:	80 1f       	adc	r24, r16
    66fe:	91 1f       	adc	r25, r17
    6700:	08 95       	ret

00006702 <__adddi3_s8>:
    6702:	00 24       	eor	r0, r0
    6704:	a7 fd       	sbrc	r26, 7
    6706:	00 94       	com	r0
    6708:	2a 0f       	add	r18, r26
    670a:	30 1d       	adc	r19, r0
    670c:	40 1d       	adc	r20, r0
    670e:	50 1d       	adc	r21, r0
    6710:	60 1d       	adc	r22, r0
    6712:	70 1d       	adc	r23, r0
    6714:	80 1d       	adc	r24, r0
    6716:	90 1d       	adc	r25, r0
    6718:	08 95       	ret

0000671a <__subdi3>:
    671a:	2a 19       	sub	r18, r10
    671c:	3b 09       	sbc	r19, r11
    671e:	4c 09       	sbc	r20, r12
    6720:	5d 09       	sbc	r21, r13
    6722:	6e 09       	sbc	r22, r14
    6724:	7f 09       	sbc	r23, r15
    6726:	80 0b       	sbc	r24, r16
    6728:	91 0b       	sbc	r25, r17
    672a:	08 95       	ret

0000672c <__cmpdi2_s8>:
    672c:	00 24       	eor	r0, r0
    672e:	a7 fd       	sbrc	r26, 7
    6730:	00 94       	com	r0
    6732:	2a 17       	cp	r18, r26
    6734:	30 05       	cpc	r19, r0
    6736:	40 05       	cpc	r20, r0
    6738:	50 05       	cpc	r21, r0
    673a:	60 05       	cpc	r22, r0
    673c:	70 05       	cpc	r23, r0
    673e:	80 05       	cpc	r24, r0
    6740:	90 05       	cpc	r25, r0
    6742:	08 95       	ret

00006744 <__umulhisi3>:
    6744:	a2 9f       	mul	r26, r18
    6746:	b0 01       	movw	r22, r0
    6748:	b3 9f       	mul	r27, r19
    674a:	c0 01       	movw	r24, r0
    674c:	a3 9f       	mul	r26, r19
    674e:	70 0d       	add	r23, r0
    6750:	81 1d       	adc	r24, r1
    6752:	11 24       	eor	r1, r1
    6754:	91 1d       	adc	r25, r1
    6756:	b2 9f       	mul	r27, r18
    6758:	70 0d       	add	r23, r0
    675a:	81 1d       	adc	r24, r1
    675c:	11 24       	eor	r1, r1
    675e:	91 1d       	adc	r25, r1
    6760:	08 95       	ret

00006762 <malloc>:
    6762:	0f 93       	push	r16
    6764:	1f 93       	push	r17
    6766:	cf 93       	push	r28
    6768:	df 93       	push	r29
    676a:	82 30       	cpi	r24, 0x02	; 2
    676c:	91 05       	cpc	r25, r1
    676e:	10 f4       	brcc	.+4      	; 0x6774 <malloc+0x12>
    6770:	82 e0       	ldi	r24, 0x02	; 2
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <__flp>
    6778:	f0 91 ce 21 	lds	r31, 0x21CE	; 0x8021ce <__flp+0x1>
    677c:	20 e0       	ldi	r18, 0x00	; 0
    677e:	30 e0       	ldi	r19, 0x00	; 0
    6780:	a0 e0       	ldi	r26, 0x00	; 0
    6782:	b0 e0       	ldi	r27, 0x00	; 0
    6784:	30 97       	sbiw	r30, 0x00	; 0
    6786:	19 f1       	breq	.+70     	; 0x67ce <malloc+0x6c>
    6788:	40 81       	ld	r20, Z
    678a:	51 81       	ldd	r21, Z+1	; 0x01
    678c:	02 81       	ldd	r16, Z+2	; 0x02
    678e:	13 81       	ldd	r17, Z+3	; 0x03
    6790:	48 17       	cp	r20, r24
    6792:	59 07       	cpc	r21, r25
    6794:	c8 f0       	brcs	.+50     	; 0x67c8 <malloc+0x66>
    6796:	84 17       	cp	r24, r20
    6798:	95 07       	cpc	r25, r21
    679a:	69 f4       	brne	.+26     	; 0x67b6 <malloc+0x54>
    679c:	10 97       	sbiw	r26, 0x00	; 0
    679e:	31 f0       	breq	.+12     	; 0x67ac <malloc+0x4a>
    67a0:	12 96       	adiw	r26, 0x02	; 2
    67a2:	0c 93       	st	X, r16
    67a4:	12 97       	sbiw	r26, 0x02	; 2
    67a6:	13 96       	adiw	r26, 0x03	; 3
    67a8:	1c 93       	st	X, r17
    67aa:	27 c0       	rjmp	.+78     	; 0x67fa <malloc+0x98>
    67ac:	00 93 cd 21 	sts	0x21CD, r16	; 0x8021cd <__flp>
    67b0:	10 93 ce 21 	sts	0x21CE, r17	; 0x8021ce <__flp+0x1>
    67b4:	22 c0       	rjmp	.+68     	; 0x67fa <malloc+0x98>
    67b6:	21 15       	cp	r18, r1
    67b8:	31 05       	cpc	r19, r1
    67ba:	19 f0       	breq	.+6      	; 0x67c2 <malloc+0x60>
    67bc:	42 17       	cp	r20, r18
    67be:	53 07       	cpc	r21, r19
    67c0:	18 f4       	brcc	.+6      	; 0x67c8 <malloc+0x66>
    67c2:	9a 01       	movw	r18, r20
    67c4:	bd 01       	movw	r22, r26
    67c6:	ef 01       	movw	r28, r30
    67c8:	df 01       	movw	r26, r30
    67ca:	f8 01       	movw	r30, r16
    67cc:	db cf       	rjmp	.-74     	; 0x6784 <malloc+0x22>
    67ce:	21 15       	cp	r18, r1
    67d0:	31 05       	cpc	r19, r1
    67d2:	f9 f0       	breq	.+62     	; 0x6812 <malloc+0xb0>
    67d4:	28 1b       	sub	r18, r24
    67d6:	39 0b       	sbc	r19, r25
    67d8:	24 30       	cpi	r18, 0x04	; 4
    67da:	31 05       	cpc	r19, r1
    67dc:	80 f4       	brcc	.+32     	; 0x67fe <malloc+0x9c>
    67de:	8a 81       	ldd	r24, Y+2	; 0x02
    67e0:	9b 81       	ldd	r25, Y+3	; 0x03
    67e2:	61 15       	cp	r22, r1
    67e4:	71 05       	cpc	r23, r1
    67e6:	21 f0       	breq	.+8      	; 0x67f0 <malloc+0x8e>
    67e8:	fb 01       	movw	r30, r22
    67ea:	82 83       	std	Z+2, r24	; 0x02
    67ec:	93 83       	std	Z+3, r25	; 0x03
    67ee:	04 c0       	rjmp	.+8      	; 0x67f8 <malloc+0x96>
    67f0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <__flp>
    67f4:	90 93 ce 21 	sts	0x21CE, r25	; 0x8021ce <__flp+0x1>
    67f8:	fe 01       	movw	r30, r28
    67fa:	32 96       	adiw	r30, 0x02	; 2
    67fc:	44 c0       	rjmp	.+136    	; 0x6886 <malloc+0x124>
    67fe:	fe 01       	movw	r30, r28
    6800:	e2 0f       	add	r30, r18
    6802:	f3 1f       	adc	r31, r19
    6804:	81 93       	st	Z+, r24
    6806:	91 93       	st	Z+, r25
    6808:	22 50       	subi	r18, 0x02	; 2
    680a:	31 09       	sbc	r19, r1
    680c:	28 83       	st	Y, r18
    680e:	39 83       	std	Y+1, r19	; 0x01
    6810:	3a c0       	rjmp	.+116    	; 0x6886 <malloc+0x124>
    6812:	20 91 cb 21 	lds	r18, 0x21CB	; 0x8021cb <__brkval>
    6816:	30 91 cc 21 	lds	r19, 0x21CC	; 0x8021cc <__brkval+0x1>
    681a:	23 2b       	or	r18, r19
    681c:	41 f4       	brne	.+16     	; 0x682e <malloc+0xcc>
    681e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6822:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6826:	20 93 cb 21 	sts	0x21CB, r18	; 0x8021cb <__brkval>
    682a:	30 93 cc 21 	sts	0x21CC, r19	; 0x8021cc <__brkval+0x1>
    682e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6832:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6836:	21 15       	cp	r18, r1
    6838:	31 05       	cpc	r19, r1
    683a:	41 f4       	brne	.+16     	; 0x684c <malloc+0xea>
    683c:	2d b7       	in	r18, 0x3d	; 61
    683e:	3e b7       	in	r19, 0x3e	; 62
    6840:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6844:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6848:	24 1b       	sub	r18, r20
    684a:	35 0b       	sbc	r19, r21
    684c:	e0 91 cb 21 	lds	r30, 0x21CB	; 0x8021cb <__brkval>
    6850:	f0 91 cc 21 	lds	r31, 0x21CC	; 0x8021cc <__brkval+0x1>
    6854:	e2 17       	cp	r30, r18
    6856:	f3 07       	cpc	r31, r19
    6858:	a0 f4       	brcc	.+40     	; 0x6882 <malloc+0x120>
    685a:	2e 1b       	sub	r18, r30
    685c:	3f 0b       	sbc	r19, r31
    685e:	28 17       	cp	r18, r24
    6860:	39 07       	cpc	r19, r25
    6862:	78 f0       	brcs	.+30     	; 0x6882 <malloc+0x120>
    6864:	ac 01       	movw	r20, r24
    6866:	4e 5f       	subi	r20, 0xFE	; 254
    6868:	5f 4f       	sbci	r21, 0xFF	; 255
    686a:	24 17       	cp	r18, r20
    686c:	35 07       	cpc	r19, r21
    686e:	48 f0       	brcs	.+18     	; 0x6882 <malloc+0x120>
    6870:	4e 0f       	add	r20, r30
    6872:	5f 1f       	adc	r21, r31
    6874:	40 93 cb 21 	sts	0x21CB, r20	; 0x8021cb <__brkval>
    6878:	50 93 cc 21 	sts	0x21CC, r21	; 0x8021cc <__brkval+0x1>
    687c:	81 93       	st	Z+, r24
    687e:	91 93       	st	Z+, r25
    6880:	02 c0       	rjmp	.+4      	; 0x6886 <malloc+0x124>
    6882:	e0 e0       	ldi	r30, 0x00	; 0
    6884:	f0 e0       	ldi	r31, 0x00	; 0
    6886:	cf 01       	movw	r24, r30
    6888:	df 91       	pop	r29
    688a:	cf 91       	pop	r28
    688c:	1f 91       	pop	r17
    688e:	0f 91       	pop	r16
    6890:	08 95       	ret

00006892 <free>:
    6892:	cf 93       	push	r28
    6894:	df 93       	push	r29
    6896:	00 97       	sbiw	r24, 0x00	; 0
    6898:	09 f4       	brne	.+2      	; 0x689c <free+0xa>
    689a:	81 c0       	rjmp	.+258    	; 0x699e <free+0x10c>
    689c:	fc 01       	movw	r30, r24
    689e:	32 97       	sbiw	r30, 0x02	; 2
    68a0:	12 82       	std	Z+2, r1	; 0x02
    68a2:	13 82       	std	Z+3, r1	; 0x03
    68a4:	a0 91 cd 21 	lds	r26, 0x21CD	; 0x8021cd <__flp>
    68a8:	b0 91 ce 21 	lds	r27, 0x21CE	; 0x8021ce <__flp+0x1>
    68ac:	10 97       	sbiw	r26, 0x00	; 0
    68ae:	81 f4       	brne	.+32     	; 0x68d0 <free+0x3e>
    68b0:	20 81       	ld	r18, Z
    68b2:	31 81       	ldd	r19, Z+1	; 0x01
    68b4:	82 0f       	add	r24, r18
    68b6:	93 1f       	adc	r25, r19
    68b8:	20 91 cb 21 	lds	r18, 0x21CB	; 0x8021cb <__brkval>
    68bc:	30 91 cc 21 	lds	r19, 0x21CC	; 0x8021cc <__brkval+0x1>
    68c0:	28 17       	cp	r18, r24
    68c2:	39 07       	cpc	r19, r25
    68c4:	51 f5       	brne	.+84     	; 0x691a <free+0x88>
    68c6:	e0 93 cb 21 	sts	0x21CB, r30	; 0x8021cb <__brkval>
    68ca:	f0 93 cc 21 	sts	0x21CC, r31	; 0x8021cc <__brkval+0x1>
    68ce:	67 c0       	rjmp	.+206    	; 0x699e <free+0x10c>
    68d0:	ed 01       	movw	r28, r26
    68d2:	20 e0       	ldi	r18, 0x00	; 0
    68d4:	30 e0       	ldi	r19, 0x00	; 0
    68d6:	ce 17       	cp	r28, r30
    68d8:	df 07       	cpc	r29, r31
    68da:	40 f4       	brcc	.+16     	; 0x68ec <free+0x5a>
    68dc:	4a 81       	ldd	r20, Y+2	; 0x02
    68de:	5b 81       	ldd	r21, Y+3	; 0x03
    68e0:	9e 01       	movw	r18, r28
    68e2:	41 15       	cp	r20, r1
    68e4:	51 05       	cpc	r21, r1
    68e6:	f1 f0       	breq	.+60     	; 0x6924 <free+0x92>
    68e8:	ea 01       	movw	r28, r20
    68ea:	f5 cf       	rjmp	.-22     	; 0x68d6 <free+0x44>
    68ec:	c2 83       	std	Z+2, r28	; 0x02
    68ee:	d3 83       	std	Z+3, r29	; 0x03
    68f0:	40 81       	ld	r20, Z
    68f2:	51 81       	ldd	r21, Z+1	; 0x01
    68f4:	84 0f       	add	r24, r20
    68f6:	95 1f       	adc	r25, r21
    68f8:	c8 17       	cp	r28, r24
    68fa:	d9 07       	cpc	r29, r25
    68fc:	59 f4       	brne	.+22     	; 0x6914 <free+0x82>
    68fe:	88 81       	ld	r24, Y
    6900:	99 81       	ldd	r25, Y+1	; 0x01
    6902:	84 0f       	add	r24, r20
    6904:	95 1f       	adc	r25, r21
    6906:	02 96       	adiw	r24, 0x02	; 2
    6908:	80 83       	st	Z, r24
    690a:	91 83       	std	Z+1, r25	; 0x01
    690c:	8a 81       	ldd	r24, Y+2	; 0x02
    690e:	9b 81       	ldd	r25, Y+3	; 0x03
    6910:	82 83       	std	Z+2, r24	; 0x02
    6912:	93 83       	std	Z+3, r25	; 0x03
    6914:	21 15       	cp	r18, r1
    6916:	31 05       	cpc	r19, r1
    6918:	29 f4       	brne	.+10     	; 0x6924 <free+0x92>
    691a:	e0 93 cd 21 	sts	0x21CD, r30	; 0x8021cd <__flp>
    691e:	f0 93 ce 21 	sts	0x21CE, r31	; 0x8021ce <__flp+0x1>
    6922:	3d c0       	rjmp	.+122    	; 0x699e <free+0x10c>
    6924:	e9 01       	movw	r28, r18
    6926:	ea 83       	std	Y+2, r30	; 0x02
    6928:	fb 83       	std	Y+3, r31	; 0x03
    692a:	49 91       	ld	r20, Y+
    692c:	59 91       	ld	r21, Y+
    692e:	c4 0f       	add	r28, r20
    6930:	d5 1f       	adc	r29, r21
    6932:	ec 17       	cp	r30, r28
    6934:	fd 07       	cpc	r31, r29
    6936:	61 f4       	brne	.+24     	; 0x6950 <free+0xbe>
    6938:	80 81       	ld	r24, Z
    693a:	91 81       	ldd	r25, Z+1	; 0x01
    693c:	84 0f       	add	r24, r20
    693e:	95 1f       	adc	r25, r21
    6940:	02 96       	adiw	r24, 0x02	; 2
    6942:	e9 01       	movw	r28, r18
    6944:	88 83       	st	Y, r24
    6946:	99 83       	std	Y+1, r25	; 0x01
    6948:	82 81       	ldd	r24, Z+2	; 0x02
    694a:	93 81       	ldd	r25, Z+3	; 0x03
    694c:	8a 83       	std	Y+2, r24	; 0x02
    694e:	9b 83       	std	Y+3, r25	; 0x03
    6950:	e0 e0       	ldi	r30, 0x00	; 0
    6952:	f0 e0       	ldi	r31, 0x00	; 0
    6954:	12 96       	adiw	r26, 0x02	; 2
    6956:	8d 91       	ld	r24, X+
    6958:	9c 91       	ld	r25, X
    695a:	13 97       	sbiw	r26, 0x03	; 3
    695c:	00 97       	sbiw	r24, 0x00	; 0
    695e:	19 f0       	breq	.+6      	; 0x6966 <free+0xd4>
    6960:	fd 01       	movw	r30, r26
    6962:	dc 01       	movw	r26, r24
    6964:	f7 cf       	rjmp	.-18     	; 0x6954 <free+0xc2>
    6966:	8d 91       	ld	r24, X+
    6968:	9c 91       	ld	r25, X
    696a:	11 97       	sbiw	r26, 0x01	; 1
    696c:	9d 01       	movw	r18, r26
    696e:	2e 5f       	subi	r18, 0xFE	; 254
    6970:	3f 4f       	sbci	r19, 0xFF	; 255
    6972:	82 0f       	add	r24, r18
    6974:	93 1f       	adc	r25, r19
    6976:	20 91 cb 21 	lds	r18, 0x21CB	; 0x8021cb <__brkval>
    697a:	30 91 cc 21 	lds	r19, 0x21CC	; 0x8021cc <__brkval+0x1>
    697e:	28 17       	cp	r18, r24
    6980:	39 07       	cpc	r19, r25
    6982:	69 f4       	brne	.+26     	; 0x699e <free+0x10c>
    6984:	30 97       	sbiw	r30, 0x00	; 0
    6986:	29 f4       	brne	.+10     	; 0x6992 <free+0x100>
    6988:	10 92 cd 21 	sts	0x21CD, r1	; 0x8021cd <__flp>
    698c:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <__flp+0x1>
    6990:	02 c0       	rjmp	.+4      	; 0x6996 <free+0x104>
    6992:	12 82       	std	Z+2, r1	; 0x02
    6994:	13 82       	std	Z+3, r1	; 0x03
    6996:	a0 93 cb 21 	sts	0x21CB, r26	; 0x8021cb <__brkval>
    699a:	b0 93 cc 21 	sts	0x21CC, r27	; 0x8021cc <__brkval+0x1>
    699e:	df 91       	pop	r29
    69a0:	cf 91       	pop	r28
    69a2:	08 95       	ret

000069a4 <__ftoa_engine>:
    69a4:	28 30       	cpi	r18, 0x08	; 8
    69a6:	08 f0       	brcs	.+2      	; 0x69aa <__ftoa_engine+0x6>
    69a8:	27 e0       	ldi	r18, 0x07	; 7
    69aa:	33 27       	eor	r19, r19
    69ac:	da 01       	movw	r26, r20
    69ae:	99 0f       	add	r25, r25
    69b0:	31 1d       	adc	r19, r1
    69b2:	87 fd       	sbrc	r24, 7
    69b4:	91 60       	ori	r25, 0x01	; 1
    69b6:	00 96       	adiw	r24, 0x00	; 0
    69b8:	61 05       	cpc	r22, r1
    69ba:	71 05       	cpc	r23, r1
    69bc:	39 f4       	brne	.+14     	; 0x69cc <__ftoa_engine+0x28>
    69be:	32 60       	ori	r19, 0x02	; 2
    69c0:	2e 5f       	subi	r18, 0xFE	; 254
    69c2:	3d 93       	st	X+, r19
    69c4:	30 e3       	ldi	r19, 0x30	; 48
    69c6:	2a 95       	dec	r18
    69c8:	e1 f7       	brne	.-8      	; 0x69c2 <__ftoa_engine+0x1e>
    69ca:	08 95       	ret
    69cc:	9f 3f       	cpi	r25, 0xFF	; 255
    69ce:	30 f0       	brcs	.+12     	; 0x69dc <__ftoa_engine+0x38>
    69d0:	80 38       	cpi	r24, 0x80	; 128
    69d2:	71 05       	cpc	r23, r1
    69d4:	61 05       	cpc	r22, r1
    69d6:	09 f0       	breq	.+2      	; 0x69da <__ftoa_engine+0x36>
    69d8:	3c 5f       	subi	r19, 0xFC	; 252
    69da:	3c 5f       	subi	r19, 0xFC	; 252
    69dc:	3d 93       	st	X+, r19
    69de:	91 30       	cpi	r25, 0x01	; 1
    69e0:	08 f0       	brcs	.+2      	; 0x69e4 <__ftoa_engine+0x40>
    69e2:	80 68       	ori	r24, 0x80	; 128
    69e4:	91 1d       	adc	r25, r1
    69e6:	df 93       	push	r29
    69e8:	cf 93       	push	r28
    69ea:	1f 93       	push	r17
    69ec:	0f 93       	push	r16
    69ee:	ff 92       	push	r15
    69f0:	ef 92       	push	r14
    69f2:	19 2f       	mov	r17, r25
    69f4:	98 7f       	andi	r25, 0xF8	; 248
    69f6:	96 95       	lsr	r25
    69f8:	e9 2f       	mov	r30, r25
    69fa:	96 95       	lsr	r25
    69fc:	96 95       	lsr	r25
    69fe:	e9 0f       	add	r30, r25
    6a00:	ff 27       	eor	r31, r31
    6a02:	e2 5a       	subi	r30, 0xA2	; 162
    6a04:	fd 4f       	sbci	r31, 0xFD	; 253
    6a06:	99 27       	eor	r25, r25
    6a08:	33 27       	eor	r19, r19
    6a0a:	ee 24       	eor	r14, r14
    6a0c:	ff 24       	eor	r15, r15
    6a0e:	a7 01       	movw	r20, r14
    6a10:	e7 01       	movw	r28, r14
    6a12:	05 90       	lpm	r0, Z+
    6a14:	08 94       	sec
    6a16:	07 94       	ror	r0
    6a18:	28 f4       	brcc	.+10     	; 0x6a24 <__ftoa_engine+0x80>
    6a1a:	36 0f       	add	r19, r22
    6a1c:	e7 1e       	adc	r14, r23
    6a1e:	f8 1e       	adc	r15, r24
    6a20:	49 1f       	adc	r20, r25
    6a22:	51 1d       	adc	r21, r1
    6a24:	66 0f       	add	r22, r22
    6a26:	77 1f       	adc	r23, r23
    6a28:	88 1f       	adc	r24, r24
    6a2a:	99 1f       	adc	r25, r25
    6a2c:	06 94       	lsr	r0
    6a2e:	a1 f7       	brne	.-24     	; 0x6a18 <__ftoa_engine+0x74>
    6a30:	05 90       	lpm	r0, Z+
    6a32:	07 94       	ror	r0
    6a34:	28 f4       	brcc	.+10     	; 0x6a40 <__ftoa_engine+0x9c>
    6a36:	e7 0e       	add	r14, r23
    6a38:	f8 1e       	adc	r15, r24
    6a3a:	49 1f       	adc	r20, r25
    6a3c:	56 1f       	adc	r21, r22
    6a3e:	c1 1d       	adc	r28, r1
    6a40:	77 0f       	add	r23, r23
    6a42:	88 1f       	adc	r24, r24
    6a44:	99 1f       	adc	r25, r25
    6a46:	66 1f       	adc	r22, r22
    6a48:	06 94       	lsr	r0
    6a4a:	a1 f7       	brne	.-24     	; 0x6a34 <__ftoa_engine+0x90>
    6a4c:	05 90       	lpm	r0, Z+
    6a4e:	07 94       	ror	r0
    6a50:	28 f4       	brcc	.+10     	; 0x6a5c <__ftoa_engine+0xb8>
    6a52:	f8 0e       	add	r15, r24
    6a54:	49 1f       	adc	r20, r25
    6a56:	56 1f       	adc	r21, r22
    6a58:	c7 1f       	adc	r28, r23
    6a5a:	d1 1d       	adc	r29, r1
    6a5c:	88 0f       	add	r24, r24
    6a5e:	99 1f       	adc	r25, r25
    6a60:	66 1f       	adc	r22, r22
    6a62:	77 1f       	adc	r23, r23
    6a64:	06 94       	lsr	r0
    6a66:	a1 f7       	brne	.-24     	; 0x6a50 <__ftoa_engine+0xac>
    6a68:	05 90       	lpm	r0, Z+
    6a6a:	07 94       	ror	r0
    6a6c:	20 f4       	brcc	.+8      	; 0x6a76 <__ftoa_engine+0xd2>
    6a6e:	49 0f       	add	r20, r25
    6a70:	56 1f       	adc	r21, r22
    6a72:	c7 1f       	adc	r28, r23
    6a74:	d8 1f       	adc	r29, r24
    6a76:	99 0f       	add	r25, r25
    6a78:	66 1f       	adc	r22, r22
    6a7a:	77 1f       	adc	r23, r23
    6a7c:	88 1f       	adc	r24, r24
    6a7e:	06 94       	lsr	r0
    6a80:	a9 f7       	brne	.-22     	; 0x6a6c <__ftoa_engine+0xc8>
    6a82:	84 91       	lpm	r24, Z
    6a84:	10 95       	com	r17
    6a86:	17 70       	andi	r17, 0x07	; 7
    6a88:	41 f0       	breq	.+16     	; 0x6a9a <__ftoa_engine+0xf6>
    6a8a:	d6 95       	lsr	r29
    6a8c:	c7 95       	ror	r28
    6a8e:	57 95       	ror	r21
    6a90:	47 95       	ror	r20
    6a92:	f7 94       	ror	r15
    6a94:	e7 94       	ror	r14
    6a96:	1a 95       	dec	r17
    6a98:	c1 f7       	brne	.-16     	; 0x6a8a <__ftoa_engine+0xe6>
    6a9a:	e4 e0       	ldi	r30, 0x04	; 4
    6a9c:	f2 e0       	ldi	r31, 0x02	; 2
    6a9e:	68 94       	set
    6aa0:	15 90       	lpm	r1, Z+
    6aa2:	15 91       	lpm	r17, Z+
    6aa4:	35 91       	lpm	r19, Z+
    6aa6:	65 91       	lpm	r22, Z+
    6aa8:	95 91       	lpm	r25, Z+
    6aaa:	05 90       	lpm	r0, Z+
    6aac:	7f e2       	ldi	r23, 0x2F	; 47
    6aae:	73 95       	inc	r23
    6ab0:	e1 18       	sub	r14, r1
    6ab2:	f1 0a       	sbc	r15, r17
    6ab4:	43 0b       	sbc	r20, r19
    6ab6:	56 0b       	sbc	r21, r22
    6ab8:	c9 0b       	sbc	r28, r25
    6aba:	d0 09       	sbc	r29, r0
    6abc:	c0 f7       	brcc	.-16     	; 0x6aae <__ftoa_engine+0x10a>
    6abe:	e1 0c       	add	r14, r1
    6ac0:	f1 1e       	adc	r15, r17
    6ac2:	43 1f       	adc	r20, r19
    6ac4:	56 1f       	adc	r21, r22
    6ac6:	c9 1f       	adc	r28, r25
    6ac8:	d0 1d       	adc	r29, r0
    6aca:	7e f4       	brtc	.+30     	; 0x6aea <__ftoa_engine+0x146>
    6acc:	70 33       	cpi	r23, 0x30	; 48
    6ace:	11 f4       	brne	.+4      	; 0x6ad4 <__ftoa_engine+0x130>
    6ad0:	8a 95       	dec	r24
    6ad2:	e6 cf       	rjmp	.-52     	; 0x6aa0 <__ftoa_engine+0xfc>
    6ad4:	e8 94       	clt
    6ad6:	01 50       	subi	r16, 0x01	; 1
    6ad8:	30 f0       	brcs	.+12     	; 0x6ae6 <__ftoa_engine+0x142>
    6ada:	08 0f       	add	r16, r24
    6adc:	0a f4       	brpl	.+2      	; 0x6ae0 <__ftoa_engine+0x13c>
    6ade:	00 27       	eor	r16, r16
    6ae0:	02 17       	cp	r16, r18
    6ae2:	08 f4       	brcc	.+2      	; 0x6ae6 <__ftoa_engine+0x142>
    6ae4:	20 2f       	mov	r18, r16
    6ae6:	23 95       	inc	r18
    6ae8:	02 2f       	mov	r16, r18
    6aea:	7a 33       	cpi	r23, 0x3A	; 58
    6aec:	28 f0       	brcs	.+10     	; 0x6af8 <__ftoa_engine+0x154>
    6aee:	79 e3       	ldi	r23, 0x39	; 57
    6af0:	7d 93       	st	X+, r23
    6af2:	2a 95       	dec	r18
    6af4:	e9 f7       	brne	.-6      	; 0x6af0 <__ftoa_engine+0x14c>
    6af6:	10 c0       	rjmp	.+32     	; 0x6b18 <__ftoa_engine+0x174>
    6af8:	7d 93       	st	X+, r23
    6afa:	2a 95       	dec	r18
    6afc:	89 f6       	brne	.-94     	; 0x6aa0 <__ftoa_engine+0xfc>
    6afe:	06 94       	lsr	r0
    6b00:	97 95       	ror	r25
    6b02:	67 95       	ror	r22
    6b04:	37 95       	ror	r19
    6b06:	17 95       	ror	r17
    6b08:	17 94       	ror	r1
    6b0a:	e1 18       	sub	r14, r1
    6b0c:	f1 0a       	sbc	r15, r17
    6b0e:	43 0b       	sbc	r20, r19
    6b10:	56 0b       	sbc	r21, r22
    6b12:	c9 0b       	sbc	r28, r25
    6b14:	d0 09       	sbc	r29, r0
    6b16:	98 f0       	brcs	.+38     	; 0x6b3e <__ftoa_engine+0x19a>
    6b18:	23 95       	inc	r18
    6b1a:	7e 91       	ld	r23, -X
    6b1c:	73 95       	inc	r23
    6b1e:	7a 33       	cpi	r23, 0x3A	; 58
    6b20:	08 f0       	brcs	.+2      	; 0x6b24 <__ftoa_engine+0x180>
    6b22:	70 e3       	ldi	r23, 0x30	; 48
    6b24:	7c 93       	st	X, r23
    6b26:	20 13       	cpse	r18, r16
    6b28:	b8 f7       	brcc	.-18     	; 0x6b18 <__ftoa_engine+0x174>
    6b2a:	7e 91       	ld	r23, -X
    6b2c:	70 61       	ori	r23, 0x10	; 16
    6b2e:	7d 93       	st	X+, r23
    6b30:	30 f0       	brcs	.+12     	; 0x6b3e <__ftoa_engine+0x19a>
    6b32:	83 95       	inc	r24
    6b34:	71 e3       	ldi	r23, 0x31	; 49
    6b36:	7d 93       	st	X+, r23
    6b38:	70 e3       	ldi	r23, 0x30	; 48
    6b3a:	2a 95       	dec	r18
    6b3c:	e1 f7       	brne	.-8      	; 0x6b36 <__ftoa_engine+0x192>
    6b3e:	11 24       	eor	r1, r1
    6b40:	ef 90       	pop	r14
    6b42:	ff 90       	pop	r15
    6b44:	0f 91       	pop	r16
    6b46:	1f 91       	pop	r17
    6b48:	cf 91       	pop	r28
    6b4a:	df 91       	pop	r29
    6b4c:	99 27       	eor	r25, r25
    6b4e:	87 fd       	sbrc	r24, 7
    6b50:	90 95       	com	r25
    6b52:	08 95       	ret

00006b54 <strnlen_P>:
    6b54:	fc 01       	movw	r30, r24
    6b56:	05 90       	lpm	r0, Z+
    6b58:	61 50       	subi	r22, 0x01	; 1
    6b5a:	70 40       	sbci	r23, 0x00	; 0
    6b5c:	01 10       	cpse	r0, r1
    6b5e:	d8 f7       	brcc	.-10     	; 0x6b56 <strnlen_P+0x2>
    6b60:	80 95       	com	r24
    6b62:	90 95       	com	r25
    6b64:	8e 0f       	add	r24, r30
    6b66:	9f 1f       	adc	r25, r31
    6b68:	08 95       	ret

00006b6a <strnlen>:
    6b6a:	fc 01       	movw	r30, r24
    6b6c:	61 50       	subi	r22, 0x01	; 1
    6b6e:	70 40       	sbci	r23, 0x00	; 0
    6b70:	01 90       	ld	r0, Z+
    6b72:	01 10       	cpse	r0, r1
    6b74:	d8 f7       	brcc	.-10     	; 0x6b6c <strnlen+0x2>
    6b76:	80 95       	com	r24
    6b78:	90 95       	com	r25
    6b7a:	8e 0f       	add	r24, r30
    6b7c:	9f 1f       	adc	r25, r31
    6b7e:	08 95       	ret

00006b80 <fdevopen>:
    6b80:	0f 93       	push	r16
    6b82:	1f 93       	push	r17
    6b84:	cf 93       	push	r28
    6b86:	df 93       	push	r29
    6b88:	00 97       	sbiw	r24, 0x00	; 0
    6b8a:	31 f4       	brne	.+12     	; 0x6b98 <fdevopen+0x18>
    6b8c:	61 15       	cp	r22, r1
    6b8e:	71 05       	cpc	r23, r1
    6b90:	19 f4       	brne	.+6      	; 0x6b98 <fdevopen+0x18>
    6b92:	80 e0       	ldi	r24, 0x00	; 0
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	39 c0       	rjmp	.+114    	; 0x6c0a <fdevopen+0x8a>
    6b98:	8b 01       	movw	r16, r22
    6b9a:	ec 01       	movw	r28, r24
    6b9c:	6e e0       	ldi	r22, 0x0E	; 14
    6b9e:	70 e0       	ldi	r23, 0x00	; 0
    6ba0:	81 e0       	ldi	r24, 0x01	; 1
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
    6ba4:	23 d1       	rcall	.+582    	; 0x6dec <calloc>
    6ba6:	fc 01       	movw	r30, r24
    6ba8:	89 2b       	or	r24, r25
    6baa:	99 f3       	breq	.-26     	; 0x6b92 <fdevopen+0x12>
    6bac:	80 e8       	ldi	r24, 0x80	; 128
    6bae:	83 83       	std	Z+3, r24	; 0x03
    6bb0:	01 15       	cp	r16, r1
    6bb2:	11 05       	cpc	r17, r1
    6bb4:	71 f0       	breq	.+28     	; 0x6bd2 <fdevopen+0x52>
    6bb6:	02 87       	std	Z+10, r16	; 0x0a
    6bb8:	13 87       	std	Z+11, r17	; 0x0b
    6bba:	81 e8       	ldi	r24, 0x81	; 129
    6bbc:	83 83       	std	Z+3, r24	; 0x03
    6bbe:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <__iob>
    6bc2:	90 91 d0 21 	lds	r25, 0x21D0	; 0x8021d0 <__iob+0x1>
    6bc6:	89 2b       	or	r24, r25
    6bc8:	21 f4       	brne	.+8      	; 0x6bd2 <fdevopen+0x52>
    6bca:	e0 93 cf 21 	sts	0x21CF, r30	; 0x8021cf <__iob>
    6bce:	f0 93 d0 21 	sts	0x21D0, r31	; 0x8021d0 <__iob+0x1>
    6bd2:	20 97       	sbiw	r28, 0x00	; 0
    6bd4:	c9 f0       	breq	.+50     	; 0x6c08 <fdevopen+0x88>
    6bd6:	c0 87       	std	Z+8, r28	; 0x08
    6bd8:	d1 87       	std	Z+9, r29	; 0x09
    6bda:	83 81       	ldd	r24, Z+3	; 0x03
    6bdc:	82 60       	ori	r24, 0x02	; 2
    6bde:	83 83       	std	Z+3, r24	; 0x03
    6be0:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <__iob+0x2>
    6be4:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <__iob+0x3>
    6be8:	89 2b       	or	r24, r25
    6bea:	71 f4       	brne	.+28     	; 0x6c08 <fdevopen+0x88>
    6bec:	e0 93 d1 21 	sts	0x21D1, r30	; 0x8021d1 <__iob+0x2>
    6bf0:	f0 93 d2 21 	sts	0x21D2, r31	; 0x8021d2 <__iob+0x3>
    6bf4:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <__iob+0x4>
    6bf8:	90 91 d4 21 	lds	r25, 0x21D4	; 0x8021d4 <__iob+0x5>
    6bfc:	89 2b       	or	r24, r25
    6bfe:	21 f4       	brne	.+8      	; 0x6c08 <fdevopen+0x88>
    6c00:	e0 93 d3 21 	sts	0x21D3, r30	; 0x8021d3 <__iob+0x4>
    6c04:	f0 93 d4 21 	sts	0x21D4, r31	; 0x8021d4 <__iob+0x5>
    6c08:	cf 01       	movw	r24, r30
    6c0a:	df 91       	pop	r29
    6c0c:	cf 91       	pop	r28
    6c0e:	1f 91       	pop	r17
    6c10:	0f 91       	pop	r16
    6c12:	08 95       	ret

00006c14 <fprintf>:
    6c14:	cf 93       	push	r28
    6c16:	df 93       	push	r29
    6c18:	cd b7       	in	r28, 0x3d	; 61
    6c1a:	de b7       	in	r29, 0x3e	; 62
    6c1c:	ae 01       	movw	r20, r28
    6c1e:	46 5f       	subi	r20, 0xF6	; 246
    6c20:	5f 4f       	sbci	r21, 0xFF	; 255
    6c22:	68 85       	ldd	r22, Y+8	; 0x08
    6c24:	79 85       	ldd	r23, Y+9	; 0x09
    6c26:	8e 81       	ldd	r24, Y+6	; 0x06
    6c28:	9f 81       	ldd	r25, Y+7	; 0x07
    6c2a:	d7 d8       	rcall	.-3666   	; 0x5dda <vfprintf>
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	08 95       	ret

00006c32 <fputc>:
    6c32:	0f 93       	push	r16
    6c34:	1f 93       	push	r17
    6c36:	cf 93       	push	r28
    6c38:	df 93       	push	r29
    6c3a:	fb 01       	movw	r30, r22
    6c3c:	23 81       	ldd	r18, Z+3	; 0x03
    6c3e:	21 fd       	sbrc	r18, 1
    6c40:	03 c0       	rjmp	.+6      	; 0x6c48 <fputc+0x16>
    6c42:	8f ef       	ldi	r24, 0xFF	; 255
    6c44:	9f ef       	ldi	r25, 0xFF	; 255
    6c46:	2c c0       	rjmp	.+88     	; 0x6ca0 <fputc+0x6e>
    6c48:	22 ff       	sbrs	r18, 2
    6c4a:	16 c0       	rjmp	.+44     	; 0x6c78 <fputc+0x46>
    6c4c:	46 81       	ldd	r20, Z+6	; 0x06
    6c4e:	57 81       	ldd	r21, Z+7	; 0x07
    6c50:	24 81       	ldd	r18, Z+4	; 0x04
    6c52:	35 81       	ldd	r19, Z+5	; 0x05
    6c54:	42 17       	cp	r20, r18
    6c56:	53 07       	cpc	r21, r19
    6c58:	44 f4       	brge	.+16     	; 0x6c6a <fputc+0x38>
    6c5a:	a0 81       	ld	r26, Z
    6c5c:	b1 81       	ldd	r27, Z+1	; 0x01
    6c5e:	9d 01       	movw	r18, r26
    6c60:	2f 5f       	subi	r18, 0xFF	; 255
    6c62:	3f 4f       	sbci	r19, 0xFF	; 255
    6c64:	20 83       	st	Z, r18
    6c66:	31 83       	std	Z+1, r19	; 0x01
    6c68:	8c 93       	st	X, r24
    6c6a:	26 81       	ldd	r18, Z+6	; 0x06
    6c6c:	37 81       	ldd	r19, Z+7	; 0x07
    6c6e:	2f 5f       	subi	r18, 0xFF	; 255
    6c70:	3f 4f       	sbci	r19, 0xFF	; 255
    6c72:	26 83       	std	Z+6, r18	; 0x06
    6c74:	37 83       	std	Z+7, r19	; 0x07
    6c76:	14 c0       	rjmp	.+40     	; 0x6ca0 <fputc+0x6e>
    6c78:	8b 01       	movw	r16, r22
    6c7a:	ec 01       	movw	r28, r24
    6c7c:	fb 01       	movw	r30, r22
    6c7e:	00 84       	ldd	r0, Z+8	; 0x08
    6c80:	f1 85       	ldd	r31, Z+9	; 0x09
    6c82:	e0 2d       	mov	r30, r0
    6c84:	19 95       	eicall
    6c86:	89 2b       	or	r24, r25
    6c88:	e1 f6       	brne	.-72     	; 0x6c42 <fputc+0x10>
    6c8a:	d8 01       	movw	r26, r16
    6c8c:	16 96       	adiw	r26, 0x06	; 6
    6c8e:	8d 91       	ld	r24, X+
    6c90:	9c 91       	ld	r25, X
    6c92:	17 97       	sbiw	r26, 0x07	; 7
    6c94:	01 96       	adiw	r24, 0x01	; 1
    6c96:	16 96       	adiw	r26, 0x06	; 6
    6c98:	8d 93       	st	X+, r24
    6c9a:	9c 93       	st	X, r25
    6c9c:	17 97       	sbiw	r26, 0x07	; 7
    6c9e:	ce 01       	movw	r24, r28
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	1f 91       	pop	r17
    6ca6:	0f 91       	pop	r16
    6ca8:	08 95       	ret

00006caa <printf>:
    6caa:	cf 93       	push	r28
    6cac:	df 93       	push	r29
    6cae:	cd b7       	in	r28, 0x3d	; 61
    6cb0:	de b7       	in	r29, 0x3e	; 62
    6cb2:	ae 01       	movw	r20, r28
    6cb4:	4a 5f       	subi	r20, 0xFA	; 250
    6cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    6cb8:	fa 01       	movw	r30, r20
    6cba:	61 91       	ld	r22, Z+
    6cbc:	71 91       	ld	r23, Z+
    6cbe:	af 01       	movw	r20, r30
    6cc0:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <__iob+0x2>
    6cc4:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <__iob+0x3>
    6cc8:	88 d8       	rcall	.-3824   	; 0x5dda <vfprintf>
    6cca:	df 91       	pop	r29
    6ccc:	cf 91       	pop	r28
    6cce:	08 95       	ret

00006cd0 <puts>:
    6cd0:	0f 93       	push	r16
    6cd2:	1f 93       	push	r17
    6cd4:	cf 93       	push	r28
    6cd6:	df 93       	push	r29
    6cd8:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <__iob+0x2>
    6cdc:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <__iob+0x3>
    6ce0:	23 81       	ldd	r18, Z+3	; 0x03
    6ce2:	21 ff       	sbrs	r18, 1
    6ce4:	1b c0       	rjmp	.+54     	; 0x6d1c <puts+0x4c>
    6ce6:	8c 01       	movw	r16, r24
    6ce8:	d0 e0       	ldi	r29, 0x00	; 0
    6cea:	c0 e0       	ldi	r28, 0x00	; 0
    6cec:	f8 01       	movw	r30, r16
    6cee:	81 91       	ld	r24, Z+
    6cf0:	8f 01       	movw	r16, r30
    6cf2:	60 91 d1 21 	lds	r22, 0x21D1	; 0x8021d1 <__iob+0x2>
    6cf6:	70 91 d2 21 	lds	r23, 0x21D2	; 0x8021d2 <__iob+0x3>
    6cfa:	db 01       	movw	r26, r22
    6cfc:	18 96       	adiw	r26, 0x08	; 8
    6cfe:	ed 91       	ld	r30, X+
    6d00:	fc 91       	ld	r31, X
    6d02:	19 97       	sbiw	r26, 0x09	; 9
    6d04:	88 23       	and	r24, r24
    6d06:	31 f0       	breq	.+12     	; 0x6d14 <puts+0x44>
    6d08:	19 95       	eicall
    6d0a:	89 2b       	or	r24, r25
    6d0c:	79 f3       	breq	.-34     	; 0x6cec <puts+0x1c>
    6d0e:	df ef       	ldi	r29, 0xFF	; 255
    6d10:	cf ef       	ldi	r28, 0xFF	; 255
    6d12:	ec cf       	rjmp	.-40     	; 0x6cec <puts+0x1c>
    6d14:	8a e0       	ldi	r24, 0x0A	; 10
    6d16:	19 95       	eicall
    6d18:	89 2b       	or	r24, r25
    6d1a:	19 f0       	breq	.+6      	; 0x6d22 <puts+0x52>
    6d1c:	8f ef       	ldi	r24, 0xFF	; 255
    6d1e:	9f ef       	ldi	r25, 0xFF	; 255
    6d20:	02 c0       	rjmp	.+4      	; 0x6d26 <puts+0x56>
    6d22:	8d 2f       	mov	r24, r29
    6d24:	9c 2f       	mov	r25, r28
    6d26:	df 91       	pop	r29
    6d28:	cf 91       	pop	r28
    6d2a:	1f 91       	pop	r17
    6d2c:	0f 91       	pop	r16
    6d2e:	08 95       	ret

00006d30 <__ultoa_invert>:
    6d30:	fa 01       	movw	r30, r20
    6d32:	aa 27       	eor	r26, r26
    6d34:	28 30       	cpi	r18, 0x08	; 8
    6d36:	51 f1       	breq	.+84     	; 0x6d8c <__ultoa_invert+0x5c>
    6d38:	20 31       	cpi	r18, 0x10	; 16
    6d3a:	81 f1       	breq	.+96     	; 0x6d9c <__ultoa_invert+0x6c>
    6d3c:	e8 94       	clt
    6d3e:	6f 93       	push	r22
    6d40:	6e 7f       	andi	r22, 0xFE	; 254
    6d42:	6e 5f       	subi	r22, 0xFE	; 254
    6d44:	7f 4f       	sbci	r23, 0xFF	; 255
    6d46:	8f 4f       	sbci	r24, 0xFF	; 255
    6d48:	9f 4f       	sbci	r25, 0xFF	; 255
    6d4a:	af 4f       	sbci	r26, 0xFF	; 255
    6d4c:	b1 e0       	ldi	r27, 0x01	; 1
    6d4e:	3e d0       	rcall	.+124    	; 0x6dcc <__ultoa_invert+0x9c>
    6d50:	b4 e0       	ldi	r27, 0x04	; 4
    6d52:	3c d0       	rcall	.+120    	; 0x6dcc <__ultoa_invert+0x9c>
    6d54:	67 0f       	add	r22, r23
    6d56:	78 1f       	adc	r23, r24
    6d58:	89 1f       	adc	r24, r25
    6d5a:	9a 1f       	adc	r25, r26
    6d5c:	a1 1d       	adc	r26, r1
    6d5e:	68 0f       	add	r22, r24
    6d60:	79 1f       	adc	r23, r25
    6d62:	8a 1f       	adc	r24, r26
    6d64:	91 1d       	adc	r25, r1
    6d66:	a1 1d       	adc	r26, r1
    6d68:	6a 0f       	add	r22, r26
    6d6a:	71 1d       	adc	r23, r1
    6d6c:	81 1d       	adc	r24, r1
    6d6e:	91 1d       	adc	r25, r1
    6d70:	a1 1d       	adc	r26, r1
    6d72:	20 d0       	rcall	.+64     	; 0x6db4 <__ultoa_invert+0x84>
    6d74:	09 f4       	brne	.+2      	; 0x6d78 <__ultoa_invert+0x48>
    6d76:	68 94       	set
    6d78:	3f 91       	pop	r19
    6d7a:	2a e0       	ldi	r18, 0x0A	; 10
    6d7c:	26 9f       	mul	r18, r22
    6d7e:	11 24       	eor	r1, r1
    6d80:	30 19       	sub	r19, r0
    6d82:	30 5d       	subi	r19, 0xD0	; 208
    6d84:	31 93       	st	Z+, r19
    6d86:	de f6       	brtc	.-74     	; 0x6d3e <__ultoa_invert+0xe>
    6d88:	cf 01       	movw	r24, r30
    6d8a:	08 95       	ret
    6d8c:	46 2f       	mov	r20, r22
    6d8e:	47 70       	andi	r20, 0x07	; 7
    6d90:	40 5d       	subi	r20, 0xD0	; 208
    6d92:	41 93       	st	Z+, r20
    6d94:	b3 e0       	ldi	r27, 0x03	; 3
    6d96:	0f d0       	rcall	.+30     	; 0x6db6 <__ultoa_invert+0x86>
    6d98:	c9 f7       	brne	.-14     	; 0x6d8c <__ultoa_invert+0x5c>
    6d9a:	f6 cf       	rjmp	.-20     	; 0x6d88 <__ultoa_invert+0x58>
    6d9c:	46 2f       	mov	r20, r22
    6d9e:	4f 70       	andi	r20, 0x0F	; 15
    6da0:	40 5d       	subi	r20, 0xD0	; 208
    6da2:	4a 33       	cpi	r20, 0x3A	; 58
    6da4:	18 f0       	brcs	.+6      	; 0x6dac <__ultoa_invert+0x7c>
    6da6:	49 5d       	subi	r20, 0xD9	; 217
    6da8:	31 fd       	sbrc	r19, 1
    6daa:	40 52       	subi	r20, 0x20	; 32
    6dac:	41 93       	st	Z+, r20
    6dae:	02 d0       	rcall	.+4      	; 0x6db4 <__ultoa_invert+0x84>
    6db0:	a9 f7       	brne	.-22     	; 0x6d9c <__ultoa_invert+0x6c>
    6db2:	ea cf       	rjmp	.-44     	; 0x6d88 <__ultoa_invert+0x58>
    6db4:	b4 e0       	ldi	r27, 0x04	; 4
    6db6:	a6 95       	lsr	r26
    6db8:	97 95       	ror	r25
    6dba:	87 95       	ror	r24
    6dbc:	77 95       	ror	r23
    6dbe:	67 95       	ror	r22
    6dc0:	ba 95       	dec	r27
    6dc2:	c9 f7       	brne	.-14     	; 0x6db6 <__ultoa_invert+0x86>
    6dc4:	00 97       	sbiw	r24, 0x00	; 0
    6dc6:	61 05       	cpc	r22, r1
    6dc8:	71 05       	cpc	r23, r1
    6dca:	08 95       	ret
    6dcc:	9b 01       	movw	r18, r22
    6dce:	ac 01       	movw	r20, r24
    6dd0:	0a 2e       	mov	r0, r26
    6dd2:	06 94       	lsr	r0
    6dd4:	57 95       	ror	r21
    6dd6:	47 95       	ror	r20
    6dd8:	37 95       	ror	r19
    6dda:	27 95       	ror	r18
    6ddc:	ba 95       	dec	r27
    6dde:	c9 f7       	brne	.-14     	; 0x6dd2 <__ultoa_invert+0xa2>
    6de0:	62 0f       	add	r22, r18
    6de2:	73 1f       	adc	r23, r19
    6de4:	84 1f       	adc	r24, r20
    6de6:	95 1f       	adc	r25, r21
    6de8:	a0 1d       	adc	r26, r0
    6dea:	08 95       	ret

00006dec <calloc>:
    6dec:	0f 93       	push	r16
    6dee:	1f 93       	push	r17
    6df0:	cf 93       	push	r28
    6df2:	df 93       	push	r29
    6df4:	86 9f       	mul	r24, r22
    6df6:	80 01       	movw	r16, r0
    6df8:	87 9f       	mul	r24, r23
    6dfa:	10 0d       	add	r17, r0
    6dfc:	96 9f       	mul	r25, r22
    6dfe:	10 0d       	add	r17, r0
    6e00:	11 24       	eor	r1, r1
    6e02:	c8 01       	movw	r24, r16
    6e04:	ae dc       	rcall	.-1700   	; 0x6762 <malloc>
    6e06:	ec 01       	movw	r28, r24
    6e08:	00 97       	sbiw	r24, 0x00	; 0
    6e0a:	21 f0       	breq	.+8      	; 0x6e14 <calloc+0x28>
    6e0c:	a8 01       	movw	r20, r16
    6e0e:	60 e0       	ldi	r22, 0x00	; 0
    6e10:	70 e0       	ldi	r23, 0x00	; 0
    6e12:	06 d0       	rcall	.+12     	; 0x6e20 <memset>
    6e14:	ce 01       	movw	r24, r28
    6e16:	df 91       	pop	r29
    6e18:	cf 91       	pop	r28
    6e1a:	1f 91       	pop	r17
    6e1c:	0f 91       	pop	r16
    6e1e:	08 95       	ret

00006e20 <memset>:
    6e20:	dc 01       	movw	r26, r24
    6e22:	01 c0       	rjmp	.+2      	; 0x6e26 <memset+0x6>
    6e24:	6d 93       	st	X+, r22
    6e26:	41 50       	subi	r20, 0x01	; 1
    6e28:	50 40       	sbci	r21, 0x00	; 0
    6e2a:	e0 f7       	brcc	.-8      	; 0x6e24 <memset+0x4>
    6e2c:	08 95       	ret

00006e2e <_exit>:
    6e2e:	f8 94       	cli

00006e30 <__stop_program>:
    6e30:	ff cf       	rjmp	.-2      	; 0x6e30 <__stop_program>
