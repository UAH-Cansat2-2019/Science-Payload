
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  000041c8  0000425c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031f  00802122  00802122  0000437e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000650  00000000  00000000  00004420  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014feb  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000630e  00000000  00000000  00019a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a86c  00000000  00000000  0001fd69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001db8  00000000  00000000  0002a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000360cc  00000000  00000000  0002c390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000710c  00000000  00000000  0006245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  00069568  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004647  00000000  00000000  00069b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	13 c6       	rjmp	.+3110   	; 0xc50 <__vector_10>
      2a:	00 00       	nop
      2c:	34 c6       	rjmp	.+3176   	; 0xc96 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 26 10 	jmp	0x204c	; 0x204c <__vector_13>
      38:	b2 c6       	rjmp	.+3428   	; 0xd9e <__vector_14>
      3a:	00 00       	nop
      3c:	e8 c6       	rjmp	.+3536   	; 0xe0e <__vector_15>
      3e:	00 00       	nop
      40:	1e c7       	rjmp	.+3644   	; 0xe7e <__vector_16>
      42:	00 00       	nop
      44:	54 c7       	rjmp	.+3752   	; 0xeee <__vector_17>
      46:	00 00       	nop
      48:	8a c7       	rjmp	.+3860   	; 0xf5e <__vector_18>
      4a:	00 00       	nop
      4c:	c0 c7       	rjmp	.+3968   	; 0xfce <__vector_19>
      4e:	00 00       	nop
      50:	f6 c7       	rjmp	.+4076   	; 0x103e <__vector_20>
      52:	00 00       	nop
      54:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_21>
      58:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_22>
      5c:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_23>
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_46>
      bc:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_47>
      c0:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_48>
      c4:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_49>
      c8:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_50>
      cc:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_51>
      d0:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_52>
      d4:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_53>
      d8:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_54>
      dc:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__vector_55>
      e0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	76 c4       	rjmp	.+2284   	; 0x9e2 <__vector_61>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d5 c4       	rjmp	.+2474   	; 0xaa8 <__vector_63>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_76>
     134:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_77>
     138:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_78>
     13c:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_79>
     140:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_80>
     144:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_81>
     148:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_82>
     14c:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_83>
     150:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_84>
     154:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_85>
     158:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_107>
     1b0:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_108>
     1b4:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_109>
     1b8:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__vector_110>
     1bc:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_111>
     1c0:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_112>
     1c4:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_113>
     1c8:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__vector_114>
     1cc:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_115>
     1d0:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_116>
     1d4:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	11 e2       	ldi	r17, 0x21	; 33
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 ec       	ldi	r30, 0xC8	; 200
     21c:	f1 e4       	ldi	r31, 0x41	; 65
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 32       	cpi	r26, 0x22	; 34
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	24 e2       	ldi	r18, 0x24	; 36
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b1 e2       	ldi	r27, 0x21	; 33
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a1 34       	cpi	r26, 0x41	; 65
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 9b 18 	call	0x3136	; 0x3136 <main>
     244:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
     24a:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
     24c:	12 82       	std	Z+2, r1	; 0x02
     24e:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
     250:	14 82       	std	Z+4, r1	; 0x04
     252:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
     254:	66 83       	std	Z+6, r22	; 0x06
     256:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
     258:	40 83       	st	Z, r20
     25a:	51 83       	std	Z+1, r21	; 0x01
     25c:	08 95       	ret

0000025e <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
     25e:	fc 01       	movw	r30, r24
	if (buffer->head >= buffer->tail)
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	44 81       	ldd	r20, Z+4	; 0x04
     266:	55 81       	ldd	r21, Z+5	; 0x05
     268:	84 17       	cp	r24, r20
     26a:	95 07       	cpc	r25, r21
     26c:	18 f0       	brcs	.+6      	; 0x274 <rbu8_length+0x16>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
     26e:	84 1b       	sub	r24, r20
     270:	95 0b       	sbc	r25, r21
     272:	08 95       	ret
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
     274:	20 81       	ld	r18, Z
     276:	31 81       	ldd	r19, Z+1	; 0x01
     278:	82 0f       	add	r24, r18
     27a:	93 1f       	adc	r25, r19
     27c:	84 1b       	sub	r24, r20
     27e:	95 0b       	sbc	r25, r21
	}
}
     280:	08 95       	ret

00000282 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	8c 01       	movw	r16, r24
     29c:	6a 01       	movw	r12, r20
	uint16_t index = buffer->tail;
     29e:	dc 01       	movw	r26, r24
     2a0:	14 96       	adiw	r26, 0x04	; 4
     2a2:	cd 91       	ld	r28, X+
     2a4:	dc 91       	ld	r29, X
     2a6:	15 97       	sbiw	r26, 0x05	; 5
     2a8:	e6 2e       	mov	r14, r22
     2aa:	f7 2e       	mov	r15, r23
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     2ac:	a1 2c       	mov	r10, r1
     2ae:	b1 2c       	mov	r11, r1
     2b0:	84 2e       	mov	r8, r20
     2b2:	9d 2c       	mov	r9, r13
     2b4:	18 c0       	rjmp	.+48     	; 0x2e6 <rbu8_read+0x64>
	{

		dest[i] = buffer->buffer[index];
     2b6:	d8 01       	movw	r26, r16
     2b8:	16 96       	adiw	r26, 0x06	; 6
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	17 97       	sbiw	r26, 0x07	; 7
     2c0:	ec 0f       	add	r30, r28
     2c2:	fd 1f       	adc	r31, r29
     2c4:	80 81       	ld	r24, Z
     2c6:	f7 01       	movw	r30, r14
     2c8:	81 93       	st	Z+, r24
     2ca:	7f 01       	movw	r14, r30
		if (index == buffer->array_length - 1) //Reset if we've hit the end
     2cc:	8d 91       	ld	r24, X+
     2ce:	9c 91       	ld	r25, X
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	c8 17       	cp	r28, r24
     2d4:	d9 07       	cpc	r29, r25
     2d6:	11 f0       	breq	.+4      	; 0x2dc <rbu8_read+0x5a>
		{
			index = 0;
		}
		else
		{
			index++;
     2d8:	21 96       	adiw	r28, 0x01	; 1
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <rbu8_read+0x5e>
	{

		dest[i] = buffer->buffer[index];
		if (index == buffer->array_length - 1) //Reset if we've hit the end
		{
			index = 0;
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     2e0:	ff ef       	ldi	r31, 0xFF	; 255
     2e2:	af 1a       	sub	r10, r31
     2e4:	bf 0a       	sbc	r11, r31
     2e6:	c8 01       	movw	r24, r16
     2e8:	ba df       	rcall	.-140    	; 0x25e <rbu8_length>
     2ea:	9c 01       	movw	r18, r24
     2ec:	c8 16       	cp	r12, r24
     2ee:	d9 06       	cpc	r13, r25
     2f0:	10 f4       	brcc	.+4      	; 0x2f6 <rbu8_read+0x74>
     2f2:	28 2d       	mov	r18, r8
     2f4:	39 2d       	mov	r19, r9
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	e8 f2       	brcs	.-70     	; 0x2b6 <rbu8_read+0x34>
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	8c 15       	cp	r24, r12
     300:	9d 05       	cpc	r25, r13
     302:	08 f0       	brcs	.+2      	; 0x306 <rbu8_read+0x84>
     304:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (length > rbu8_length(buffer))
		return 1;
	else
		return 0;
}
     306:	82 2f       	mov	r24, r18
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	bf 90       	pop	r11
     31a:	af 90       	pop	r10
     31c:	9f 90       	pop	r9
     31e:	8f 90       	pop	r8
     320:	08 95       	ret

00000322 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	ec 01       	movw	r28, r24
     32c:	8b 01       	movw	r16, r22
	uint16_t move_distance = min(length, rbu8_length(buffer));
     32e:	97 df       	rcall	.-210    	; 0x25e <rbu8_length>
     330:	9c 01       	movw	r18, r24
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	08 f4       	brcc	.+2      	; 0x33a <rbu8_delete_oldest+0x18>
     338:	98 01       	movw	r18, r16
	if (move_distance >= rbu8_length(buffer))
     33a:	28 17       	cp	r18, r24
     33c:	39 07       	cpc	r19, r25
     33e:	68 f0       	brcs	.+26     	; 0x35a <rbu8_delete_oldest+0x38>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     340:	8c 81       	ldd	r24, Y+4	; 0x04
     342:	9d 81       	ldd	r25, Y+5	; 0x05
     344:	82 0f       	add	r24, r18
     346:	93 1f       	adc	r25, r19
     348:	68 81       	ld	r22, Y
     34a:	79 81       	ldd	r23, Y+1	; 0x01
     34c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__udivmodhi4>
     350:	8c 83       	std	Y+4, r24	; 0x04
     352:	9d 83       	std	Y+5, r25	; 0x05
		buffer->head = buffer->tail;
     354:	8a 83       	std	Y+2, r24	; 0x02
     356:	9b 83       	std	Y+3, r25	; 0x03
     358:	0a c0       	rjmp	.+20     	; 0x36e <rbu8_delete_oldest+0x4c>
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	9d 81       	ldd	r25, Y+5	; 0x05
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	68 81       	ld	r22, Y
     364:	79 81       	ldd	r23, Y+1	; 0x01
     366:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__udivmodhi4>
     36a:	8c 83       	std	Y+4, r24	; 0x04
     36c:	9d 83       	std	Y+5, r25	; 0x05
	}
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	08 95       	ret

00000378 <init_GPS_pins_and_usart>:
		if (searchstr[i] == target)
		{
			return i;
		}
	}
}
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	27 97       	sbiw	r28, 0x07	; 7
     382:	cd bf       	out	0x3d, r28	; 61
     384:	de bf       	out	0x3e, r29	; 62
     386:	e0 e8       	ldi	r30, 0x80	; 128
     388:	f6 e0       	ldi	r31, 0x06	; 6
     38a:	80 81       	ld	r24, Z
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	80 83       	st	Z, r24
     390:	80 81       	ld	r24, Z
     392:	8f 7b       	andi	r24, 0xBF	; 191
     394:	80 83       	st	Z, r24
     396:	80 e8       	ldi	r24, 0x80	; 128
     398:	85 83       	std	Z+5, r24	; 0x05
     39a:	60 e2       	ldi	r22, 0x20	; 32
     39c:	85 e0       	ldi	r24, 0x05	; 5
     39e:	f6 d3       	rcall	.+2028   	; 0xb8c <sysclk_enable_module>
     3a0:	e6 e0       	ldi	r30, 0x06	; 6
     3a2:	f0 e2       	ldi	r31, 0x20	; 32
     3a4:	84 81       	ldd	r24, Z+4	; 0x04
     3a6:	8d 83       	std	Y+5, r24	; 0x05
     3a8:	85 81       	ldd	r24, Z+5	; 0x05
     3aa:	8e 83       	std	Y+6, r24	; 0x06
     3ac:	86 81       	ldd	r24, Z+6	; 0x06
     3ae:	8f 83       	std	Y+7, r24	; 0x07
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	a2 81       	ldd	r26, Z+2	; 0x02
     3b6:	b3 81       	ldd	r27, Z+3	; 0x03
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	9a 83       	std	Y+2, r25	; 0x02
     3bc:	ab 83       	std	Y+3, r26	; 0x03
     3be:	bc 83       	std	Y+4, r27	; 0x04
     3c0:	60 e2       	ldi	r22, 0x20	; 32
     3c2:	85 e0       	ldi	r24, 0x05	; 5
     3c4:	e3 d3       	rcall	.+1990   	; 0xb8c <sysclk_enable_module>
     3c6:	be 01       	movw	r22, r28
     3c8:	6f 5f       	subi	r22, 0xFF	; 255
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	80 eb       	ldi	r24, 0xB0	; 176
     3ce:	9a e0       	ldi	r25, 0x0A	; 10
     3d0:	0e 94 88 12 	call	0x2510	; 0x2510 <usart_init_rs232>
     3d4:	27 96       	adiw	r28, 0x07	; 7
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <startswith>:
     3e0:	dc 01       	movw	r26, r24
     3e2:	fb 01       	movw	r30, r22
     3e4:	80 81       	ld	r24, Z
     3e6:	88 23       	and	r24, r24
     3e8:	01 f1       	breq	.+64     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3ea:	08 2e       	mov	r0, r24
     3ec:	00 0c       	add	r0, r0
     3ee:	99 0b       	sbc	r25, r25
     3f0:	2c 91       	ld	r18, X
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	82 17       	cp	r24, r18
     3f6:	93 07       	cpc	r25, r19
     3f8:	d1 f4       	brne	.+52     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0b c0       	rjmp	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3fe:	02 2e       	mov	r0, r18
     400:	00 0c       	add	r0, r0
     402:	33 0b       	sbc	r19, r19
     404:	fd 01       	movw	r30, r26
     406:	e4 0f       	add	r30, r20
     408:	f5 1f       	adc	r31, r21
     40a:	40 81       	ld	r20, Z
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	24 17       	cp	r18, r20
     410:	35 07       	cpc	r19, r21
     412:	79 f4       	brne	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     414:	9f 5f       	subi	r25, 0xFF	; 255
     416:	49 2f       	mov	r20, r25
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	fb 01       	movw	r30, r22
     41c:	e4 0f       	add	r30, r20
     41e:	f5 1f       	adc	r31, r21
     420:	20 81       	ld	r18, Z
     422:	21 11       	cpse	r18, r1
     424:	ec cf       	rjmp	.-40     	; 0x3fe <startswith+0x1e>
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	08 95       	ret
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	08 95       	ret
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	08 95       	ret
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	08 95       	ret

00000436 <getGPSDatafromNMEA>:
     436:	2f 92       	push	r2
     438:	3f 92       	push	r3
     43a:	4f 92       	push	r4
     43c:	5f 92       	push	r5
     43e:	6f 92       	push	r6
     440:	7f 92       	push	r7
     442:	8f 92       	push	r8
     444:	9f 92       	push	r9
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	a2 97       	sbiw	r28, 0x22	; 34
     460:	cd bf       	out	0x3d, r28	; 61
     462:	de bf       	out	0x3e, r29	; 62
     464:	4c 01       	movw	r8, r24
     466:	69 83       	std	Y+1, r22	; 0x01
     468:	7a 83       	std	Y+2, r23	; 0x02
     46a:	24 2e       	mov	r2, r20
     46c:	6b e1       	ldi	r22, 0x1B	; 27
     46e:	70 e2       	ldi	r23, 0x20	; 32
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	b5 df       	rcall	.-150    	; 0x3e0 <startswith>
     476:	88 23       	and	r24, r24
     478:	09 f4       	brne	.+2      	; 0x47c <getGPSDatafromNMEA+0x46>
     47a:	49 c2       	rjmp	.+1170   	; 0x90e <getGPSDatafromNMEA+0x4d8>
     47c:	31 2c       	mov	r3, r1
     47e:	12 14       	cp	r1, r2
     480:	13 04       	cpc	r1, r3
     482:	0c f0       	brlt	.+2      	; 0x486 <getGPSDatafromNMEA+0x50>
     484:	44 c2       	rjmp	.+1160   	; 0x90e <getGPSDatafromNMEA+0x4d8>
     486:	49 80       	ldd	r4, Y+1	; 0x01
     488:	5a 80       	ldd	r5, Y+2	; 0x02
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	10 e0       	ldi	r17, 0x00	; 0
     48e:	f1 2c       	mov	r15, r1
     490:	df 2c       	mov	r13, r15
     492:	48 a2       	std	Y+32, r4	; 0x20
     494:	59 a2       	std	Y+33, r5	; 0x21
     496:	a8 a1       	ldd	r26, Y+32	; 0x20
     498:	b9 a1       	ldd	r27, Y+33	; 0x21
     49a:	8d 91       	ld	r24, X+
     49c:	a8 a3       	std	Y+32, r26	; 0x20
     49e:	b9 a3       	std	Y+33, r27	; 0x21
     4a0:	8c 32       	cpi	r24, 0x2C	; 44
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <getGPSDatafromNMEA+0x70>
     4a4:	2e c2       	rjmp	.+1116   	; 0x902 <getGPSDatafromNMEA+0x4cc>
     4a6:	d3 94       	inc	r13
     4a8:	b1 e0       	ldi	r27, 0x01	; 1
     4aa:	db 12       	cpse	r13, r27
     4ac:	23 c0       	rjmp	.+70     	; 0x4f4 <getGPSDatafromNMEA+0xbe>
     4ae:	e8 a1       	ldd	r30, Y+32	; 0x20
     4b0:	f9 a1       	ldd	r31, Y+33	; 0x21
     4b2:	80 81       	ld	r24, Z
     4b4:	88 0f       	add	r24, r24
     4b6:	80 56       	subi	r24, 0x60	; 96
     4b8:	98 2f       	mov	r25, r24
     4ba:	99 0f       	add	r25, r25
     4bc:	99 0f       	add	r25, r25
     4be:	89 0f       	add	r24, r25
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	90 53       	subi	r25, 0x30	; 48
     4c4:	89 0f       	add	r24, r25
     4c6:	8d 87       	std	Y+13, r24	; 0x0d
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	88 0f       	add	r24, r24
     4cc:	80 56       	subi	r24, 0x60	; 96
     4ce:	98 2f       	mov	r25, r24
     4d0:	99 0f       	add	r25, r25
     4d2:	99 0f       	add	r25, r25
     4d4:	89 0f       	add	r24, r25
     4d6:	93 81       	ldd	r25, Z+3	; 0x03
     4d8:	90 53       	subi	r25, 0x30	; 48
     4da:	89 0f       	add	r24, r25
     4dc:	8e 87       	std	Y+14, r24	; 0x0e
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	88 0f       	add	r24, r24
     4e2:	80 56       	subi	r24, 0x60	; 96
     4e4:	a8 2e       	mov	r10, r24
     4e6:	aa 0c       	add	r10, r10
     4e8:	aa 0c       	add	r10, r10
     4ea:	a8 0e       	add	r10, r24
     4ec:	95 81       	ldd	r25, Z+5	; 0x05
     4ee:	90 53       	subi	r25, 0x30	; 48
     4f0:	a9 0e       	add	r10, r25
     4f2:	07 c2       	rjmp	.+1038   	; 0x902 <getGPSDatafromNMEA+0x4cc>
     4f4:	f2 e0       	ldi	r31, 0x02	; 2
     4f6:	df 12       	cpse	r13, r31
     4f8:	bb c0       	rjmp	.+374    	; 0x670 <getGPSDatafromNMEA+0x23a>
     4fa:	a8 a1       	ldd	r26, Y+32	; 0x20
     4fc:	b9 a1       	ldd	r27, Y+33	; 0x21
     4fe:	8c 91       	ld	r24, X
     500:	8c 32       	cpi	r24, 0x2C	; 44
     502:	09 f4       	brne	.+2      	; 0x506 <getGPSDatafromNMEA+0xd0>
     504:	f0 c1       	rjmp	.+992    	; 0x8e6 <getGPSDatafromNMEA+0x4b0>
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	c0 97       	sbiw	r24, 0x30	; 48
     50a:	9c 01       	movw	r18, r24
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	2c 91       	ld	r18, X
     524:	11 97       	sbiw	r26, 0x01	; 1
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	20 53       	subi	r18, 0x30	; 48
     52a:	31 09       	sbc	r19, r1
     52c:	2c 01       	movw	r4, r24
     52e:	42 0e       	add	r4, r18
     530:	53 1e       	adc	r5, r19
     532:	4b 86       	std	Y+11, r4	; 0x0b
     534:	5c 86       	std	Y+12, r5	; 0x0c
     536:	12 96       	adiw	r26, 0x02	; 2
     538:	ac 91       	ld	r26, X
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	d0 97       	sbiw	r26, 0x30	; 48
     53e:	20 ea       	ldi	r18, 0xA0	; 160
     540:	36 e8       	ldi	r19, 0x86	; 134
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	0e 94 48 1c 	call	0x3890	; 0x3890 <__mulshisi3>
     54a:	2b 01       	movw	r4, r22
     54c:	3c 01       	movw	r6, r24
     54e:	e8 a1       	ldd	r30, Y+32	; 0x20
     550:	f9 a1       	ldd	r31, Y+33	; 0x21
     552:	a3 81       	ldd	r26, Z+3	; 0x03
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	d0 97       	sbiw	r26, 0x30	; 48
     558:	20 e1       	ldi	r18, 0x10	; 16
     55a:	37 e2       	ldi	r19, 0x27	; 39
     55c:	0e 94 42 1c 	call	0x3884	; 0x3884 <__usmulhisi3>
     560:	46 0e       	add	r4, r22
     562:	57 1e       	adc	r5, r23
     564:	68 1e       	adc	r6, r24
     566:	79 1e       	adc	r7, r25
     568:	a5 81       	ldd	r26, Z+5	; 0x05
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	d0 97       	sbiw	r26, 0x30	; 48
     56e:	28 ee       	ldi	r18, 0xE8	; 232
     570:	33 e0       	ldi	r19, 0x03	; 3
     572:	0e 94 42 1c 	call	0x3884	; 0x3884 <__usmulhisi3>
     576:	46 0e       	add	r4, r22
     578:	57 1e       	adc	r5, r23
     57a:	68 1e       	adc	r6, r24
     57c:	79 1e       	adc	r7, r25
     57e:	a6 81       	ldd	r26, Z+6	; 0x06
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	d0 97       	sbiw	r26, 0x30	; 48
     584:	24 e6       	ldi	r18, 0x64	; 100
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	0e 94 42 1c 	call	0x3884	; 0x3884 <__usmulhisi3>
     58c:	ab 01       	movw	r20, r22
     58e:	bc 01       	movw	r22, r24
     590:	44 0d       	add	r20, r4
     592:	55 1d       	adc	r21, r5
     594:	66 1d       	adc	r22, r6
     596:	77 1d       	adc	r23, r7
     598:	97 81       	ldd	r25, Z+7	; 0x07
     59a:	89 2f       	mov	r24, r25
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	c0 97       	sbiw	r24, 0x30	; 48
     5a0:	09 2e       	mov	r0, r25
     5a2:	00 0c       	add	r0, r0
     5a4:	aa 0b       	sbc	r26, r26
     5a6:	bb 0b       	sbc	r27, r27
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	aa 1f       	adc	r26, r26
     5ae:	bb 1f       	adc	r27, r27
     5b0:	2c 01       	movw	r4, r24
     5b2:	3d 01       	movw	r6, r26
     5b4:	44 0c       	add	r4, r4
     5b6:	55 1c       	adc	r5, r5
     5b8:	66 1c       	adc	r6, r6
     5ba:	77 1c       	adc	r7, r7
     5bc:	44 0c       	add	r4, r4
     5be:	55 1c       	adc	r5, r5
     5c0:	66 1c       	adc	r6, r6
     5c2:	77 1c       	adc	r7, r7
     5c4:	84 0d       	add	r24, r4
     5c6:	95 1d       	adc	r25, r5
     5c8:	a6 1d       	adc	r26, r6
     5ca:	b7 1d       	adc	r27, r7
     5cc:	84 0f       	add	r24, r20
     5ce:	95 1f       	adc	r25, r21
     5d0:	a6 1f       	adc	r26, r22
     5d2:	b7 1f       	adc	r27, r23
     5d4:	40 85       	ldd	r20, Z+8	; 0x08
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	40 53       	subi	r20, 0x30	; 48
     5da:	51 09       	sbc	r21, r1
     5dc:	05 2e       	mov	r0, r21
     5de:	00 0c       	add	r0, r0
     5e0:	66 0b       	sbc	r22, r22
     5e2:	77 0b       	sbc	r23, r23
     5e4:	2c 01       	movw	r4, r24
     5e6:	3d 01       	movw	r6, r26
     5e8:	44 0e       	add	r4, r20
     5ea:	55 1e       	adc	r5, r21
     5ec:	66 1e       	adc	r6, r22
     5ee:	77 1e       	adc	r7, r23
     5f0:	4f 82       	std	Y+7, r4	; 0x07
     5f2:	58 86       	std	Y+8, r5	; 0x08
     5f4:	69 86       	std	Y+9, r6	; 0x09
     5f6:	7a 86       	std	Y+10, r7	; 0x0a
     5f8:	82 85       	ldd	r24, Z+10	; 0x0a
     5fa:	8e 34       	cpi	r24, 0x4E	; 78
     5fc:	51 f0       	breq	.+20     	; 0x612 <getGPSDatafromNMEA+0x1dc>
     5fe:	b1 2c       	mov	r11, r1
     600:	c1 2c       	mov	r12, r1
     602:	68 94       	set
     604:	ee 24       	eor	r14, r14
     606:	e7 f8       	bld	r14, 7
     608:	0f 2e       	mov	r0, r31
     60a:	ff eb       	ldi	r31, 0xBF	; 191
     60c:	ff 2e       	mov	r15, r31
     60e:	f0 2d       	mov	r31, r0
     610:	09 c0       	rjmp	.+18     	; 0x624 <getGPSDatafromNMEA+0x1ee>
     612:	b1 2c       	mov	r11, r1
     614:	c1 2c       	mov	r12, r1
     616:	68 94       	set
     618:	ee 24       	eor	r14, r14
     61a:	e7 f8       	bld	r14, 7
     61c:	0f 2e       	mov	r0, r31
     61e:	ff e3       	ldi	r31, 0x3F	; 63
     620:	ff 2e       	mov	r15, r31
     622:	f0 2d       	mov	r31, r0
     624:	6f 81       	ldd	r22, Y+7	; 0x07
     626:	78 85       	ldd	r23, Y+8	; 0x08
     628:	89 85       	ldd	r24, Y+9	; 0x09
     62a:	9a 85       	ldd	r25, Y+10	; 0x0a
     62c:	0e 94 08 1b 	call	0x3610	; 0x3610 <__floatunsisf>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	3c e7       	ldi	r19, 0x7C	; 124
     634:	42 e1       	ldi	r20, 0x12	; 18
     636:	59 e4       	ldi	r21, 0x49	; 73
     638:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__divsf3>
     63c:	2b 01       	movw	r4, r22
     63e:	3c 01       	movw	r6, r24
     640:	2b 85       	ldd	r18, Y+11	; 0x0b
     642:	3c 85       	ldd	r19, Y+12	; 0x0c
     644:	b9 01       	movw	r22, r18
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 08 1b 	call	0x3610	; 0x3610 <__floatunsisf>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	c3 01       	movw	r24, r6
     654:	b2 01       	movw	r22, r4
     656:	0e 94 10 1a 	call	0x3420	; 0x3420 <__addsf3>
     65a:	2b 2d       	mov	r18, r11
     65c:	3c 2d       	mov	r19, r12
     65e:	4e 2d       	mov	r20, r14
     660:	5f 2d       	mov	r21, r15
     662:	0e 94 96 1b 	call	0x372c	; 0x372c <__mulsf3>
     666:	6f 87       	std	Y+15, r22	; 0x0f
     668:	78 8b       	std	Y+16, r23	; 0x10
     66a:	89 8b       	std	Y+17, r24	; 0x11
     66c:	9a 8b       	std	Y+18, r25	; 0x12
     66e:	49 c1       	rjmp	.+658    	; 0x902 <getGPSDatafromNMEA+0x4cc>
     670:	34 e0       	ldi	r19, 0x04	; 4
     672:	d3 12       	cpse	r13, r19
     674:	c5 c0       	rjmp	.+394    	; 0x800 <getGPSDatafromNMEA+0x3ca>
     676:	a8 a1       	ldd	r26, Y+32	; 0x20
     678:	b9 a1       	ldd	r27, Y+33	; 0x21
     67a:	2c 91       	ld	r18, X
     67c:	2c 32       	cpi	r18, 0x2C	; 44
     67e:	09 f4       	brne	.+2      	; 0x682 <getGPSDatafromNMEA+0x24c>
     680:	37 c1       	rjmp	.+622    	; 0x8f0 <getGPSDatafromNMEA+0x4ba>
     682:	11 96       	adiw	r26, 0x01	; 1
     684:	8c 91       	ld	r24, X
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	c0 97       	sbiw	r24, 0x30	; 48
     68a:	ac 01       	movw	r20, r24
     68c:	44 0f       	add	r20, r20
     68e:	55 1f       	adc	r21, r21
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	84 0f       	add	r24, r20
     69e:	95 1f       	adc	r25, r21
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	20 53       	subi	r18, 0x30	; 48
     6a4:	31 09       	sbc	r19, r1
     6a6:	b4 e6       	ldi	r27, 0x64	; 100
     6a8:	b2 9f       	mul	r27, r18
     6aa:	a0 01       	movw	r20, r0
     6ac:	b3 9f       	mul	r27, r19
     6ae:	50 0d       	add	r21, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	84 0f       	add	r24, r20
     6b4:	95 1f       	adc	r25, r21
     6b6:	e8 a1       	ldd	r30, Y+32	; 0x20
     6b8:	f9 a1       	ldd	r31, Y+33	; 0x21
     6ba:	22 81       	ldd	r18, Z+2	; 0x02
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	20 53       	subi	r18, 0x30	; 48
     6c0:	31 09       	sbc	r19, r1
     6c2:	2c 01       	movw	r4, r24
     6c4:	42 0e       	add	r4, r18
     6c6:	53 1e       	adc	r5, r19
     6c8:	4f 8a       	std	Y+23, r4	; 0x17
     6ca:	58 8e       	std	Y+24, r5	; 0x18
     6cc:	a3 81       	ldd	r26, Z+3	; 0x03
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	d0 97       	sbiw	r26, 0x30	; 48
     6d2:	20 ea       	ldi	r18, 0xA0	; 160
     6d4:	36 e8       	ldi	r19, 0x86	; 134
     6d6:	41 e0       	ldi	r20, 0x01	; 1
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	0e 94 48 1c 	call	0x3890	; 0x3890 <__mulshisi3>
     6de:	2b 01       	movw	r4, r22
     6e0:	3c 01       	movw	r6, r24
     6e2:	a4 81       	ldd	r26, Z+4	; 0x04
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	d0 97       	sbiw	r26, 0x30	; 48
     6e8:	20 e1       	ldi	r18, 0x10	; 16
     6ea:	37 e2       	ldi	r19, 0x27	; 39
     6ec:	0e 94 42 1c 	call	0x3884	; 0x3884 <__usmulhisi3>
     6f0:	46 0e       	add	r4, r22
     6f2:	57 1e       	adc	r5, r23
     6f4:	68 1e       	adc	r6, r24
     6f6:	79 1e       	adc	r7, r25
     6f8:	a6 81       	ldd	r26, Z+6	; 0x06
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	d0 97       	sbiw	r26, 0x30	; 48
     6fe:	28 ee       	ldi	r18, 0xE8	; 232
     700:	33 e0       	ldi	r19, 0x03	; 3
     702:	0e 94 42 1c 	call	0x3884	; 0x3884 <__usmulhisi3>
     706:	46 0e       	add	r4, r22
     708:	57 1e       	adc	r5, r23
     70a:	68 1e       	adc	r6, r24
     70c:	79 1e       	adc	r7, r25
     70e:	a7 81       	ldd	r26, Z+7	; 0x07
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	d0 97       	sbiw	r26, 0x30	; 48
     714:	24 e6       	ldi	r18, 0x64	; 100
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	0e 94 42 1c 	call	0x3884	; 0x3884 <__usmulhisi3>
     71c:	ab 01       	movw	r20, r22
     71e:	bc 01       	movw	r22, r24
     720:	44 0d       	add	r20, r4
     722:	55 1d       	adc	r21, r5
     724:	66 1d       	adc	r22, r6
     726:	77 1d       	adc	r23, r7
     728:	90 85       	ldd	r25, Z+8	; 0x08
     72a:	89 2f       	mov	r24, r25
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	c0 97       	sbiw	r24, 0x30	; 48
     730:	09 2e       	mov	r0, r25
     732:	00 0c       	add	r0, r0
     734:	aa 0b       	sbc	r26, r26
     736:	bb 0b       	sbc	r27, r27
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	aa 1f       	adc	r26, r26
     73e:	bb 1f       	adc	r27, r27
     740:	2c 01       	movw	r4, r24
     742:	3d 01       	movw	r6, r26
     744:	44 0c       	add	r4, r4
     746:	55 1c       	adc	r5, r5
     748:	66 1c       	adc	r6, r6
     74a:	77 1c       	adc	r7, r7
     74c:	44 0c       	add	r4, r4
     74e:	55 1c       	adc	r5, r5
     750:	66 1c       	adc	r6, r6
     752:	77 1c       	adc	r7, r7
     754:	84 0d       	add	r24, r4
     756:	95 1d       	adc	r25, r5
     758:	a6 1d       	adc	r26, r6
     75a:	b7 1d       	adc	r27, r7
     75c:	84 0f       	add	r24, r20
     75e:	95 1f       	adc	r25, r21
     760:	a6 1f       	adc	r26, r22
     762:	b7 1f       	adc	r27, r23
     764:	41 85       	ldd	r20, Z+9	; 0x09
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	40 53       	subi	r20, 0x30	; 48
     76a:	51 09       	sbc	r21, r1
     76c:	05 2e       	mov	r0, r21
     76e:	00 0c       	add	r0, r0
     770:	66 0b       	sbc	r22, r22
     772:	77 0b       	sbc	r23, r23
     774:	2c 01       	movw	r4, r24
     776:	3d 01       	movw	r6, r26
     778:	44 0e       	add	r4, r20
     77a:	55 1e       	adc	r5, r21
     77c:	66 1e       	adc	r6, r22
     77e:	77 1e       	adc	r7, r23
     780:	4b 8a       	std	Y+19, r4	; 0x13
     782:	5c 8a       	std	Y+20, r5	; 0x14
     784:	6d 8a       	std	Y+21, r6	; 0x15
     786:	7e 8a       	std	Y+22, r7	; 0x16
     788:	83 85       	ldd	r24, Z+11	; 0x0b
     78a:	85 34       	cpi	r24, 0x45	; 69
     78c:	51 f0       	breq	.+20     	; 0x7a2 <getGPSDatafromNMEA+0x36c>
     78e:	b1 2c       	mov	r11, r1
     790:	c1 2c       	mov	r12, r1
     792:	68 94       	set
     794:	ee 24       	eor	r14, r14
     796:	e7 f8       	bld	r14, 7
     798:	0f 2e       	mov	r0, r31
     79a:	ff eb       	ldi	r31, 0xBF	; 191
     79c:	ff 2e       	mov	r15, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <getGPSDatafromNMEA+0x37e>
     7a2:	b1 2c       	mov	r11, r1
     7a4:	c1 2c       	mov	r12, r1
     7a6:	68 94       	set
     7a8:	ee 24       	eor	r14, r14
     7aa:	e7 f8       	bld	r14, 7
     7ac:	0f 2e       	mov	r0, r31
     7ae:	ff e3       	ldi	r31, 0x3F	; 63
     7b0:	ff 2e       	mov	r15, r31
     7b2:	f0 2d       	mov	r31, r0
     7b4:	6b 89       	ldd	r22, Y+19	; 0x13
     7b6:	7c 89       	ldd	r23, Y+20	; 0x14
     7b8:	8d 89       	ldd	r24, Y+21	; 0x15
     7ba:	9e 89       	ldd	r25, Y+22	; 0x16
     7bc:	0e 94 08 1b 	call	0x3610	; 0x3610 <__floatunsisf>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	3c e7       	ldi	r19, 0x7C	; 124
     7c4:	42 e1       	ldi	r20, 0x12	; 18
     7c6:	59 e4       	ldi	r21, 0x49	; 73
     7c8:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__divsf3>
     7cc:	2b 01       	movw	r4, r22
     7ce:	3c 01       	movw	r6, r24
     7d0:	2f 89       	ldd	r18, Y+23	; 0x17
     7d2:	38 8d       	ldd	r19, Y+24	; 0x18
     7d4:	b9 01       	movw	r22, r18
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 08 1b 	call	0x3610	; 0x3610 <__floatunsisf>
     7de:	9b 01       	movw	r18, r22
     7e0:	ac 01       	movw	r20, r24
     7e2:	c3 01       	movw	r24, r6
     7e4:	b2 01       	movw	r22, r4
     7e6:	0e 94 10 1a 	call	0x3420	; 0x3420 <__addsf3>
     7ea:	2b 2d       	mov	r18, r11
     7ec:	3c 2d       	mov	r19, r12
     7ee:	4e 2d       	mov	r20, r14
     7f0:	5f 2d       	mov	r21, r15
     7f2:	0e 94 96 1b 	call	0x372c	; 0x372c <__mulsf3>
     7f6:	69 8f       	std	Y+25, r22	; 0x19
     7f8:	7a 8f       	std	Y+26, r23	; 0x1a
     7fa:	8b 8f       	std	Y+27, r24	; 0x1b
     7fc:	9c 8f       	std	Y+28, r25	; 0x1c
     7fe:	81 c0       	rjmp	.+258    	; 0x902 <getGPSDatafromNMEA+0x4cc>
     800:	36 e0       	ldi	r19, 0x06	; 6
     802:	d3 12       	cpse	r13, r19
     804:	06 c0       	rjmp	.+12     	; 0x812 <getGPSDatafromNMEA+0x3dc>
     806:	a8 a1       	ldd	r26, Y+32	; 0x20
     808:	b9 a1       	ldd	r27, Y+33	; 0x21
     80a:	8c 91       	ld	r24, X
     80c:	80 53       	subi	r24, 0x30	; 48
     80e:	8d 8f       	std	Y+29, r24	; 0x1d
     810:	78 c0       	rjmp	.+240    	; 0x902 <getGPSDatafromNMEA+0x4cc>
     812:	b9 e0       	ldi	r27, 0x09	; 9
     814:	db 12       	cpse	r13, r27
     816:	75 c0       	rjmp	.+234    	; 0x902 <getGPSDatafromNMEA+0x4cc>
     818:	e8 a1       	ldd	r30, Y+32	; 0x20
     81a:	f9 a1       	ldd	r31, Y+33	; 0x21
     81c:	c0 80       	ld	r12, Z
     81e:	fc e2       	ldi	r31, 0x2C	; 44
     820:	cf 16       	cp	r12, r31
     822:	09 f4       	brne	.+2      	; 0x826 <getGPSDatafromNMEA+0x3f0>
     824:	6a c0       	rjmp	.+212    	; 0x8fa <getGPSDatafromNMEA+0x4c4>
     826:	b1 2c       	mov	r11, r1
     828:	1b 82       	std	Y+3, r1	; 0x03
     82a:	1c 82       	std	Y+4, r1	; 0x04
     82c:	1d 82       	std	Y+5, r1	; 0x05
     82e:	1e 82       	std	Y+6, r1	; 0x06
     830:	71 2c       	mov	r7, r1
     832:	e9 80       	ldd	r14, Y+1	; 0x01
     834:	fa 80       	ldd	r15, Y+2	; 0x02
     836:	e0 0e       	add	r14, r16
     838:	f1 1e       	adc	r15, r17
     83a:	0e 8f       	std	Y+30, r16	; 0x1e
     83c:	1f 8f       	std	Y+31, r17	; 0x1f
     83e:	1c 2d       	mov	r17, r12
     840:	7a a2       	std	Y+34, r7	; 0x22
     842:	1e 32       	cpi	r17, 0x2E	; 46
     844:	09 f4       	brne	.+2      	; 0x848 <getGPSDatafromNMEA+0x412>
     846:	42 c0       	rjmp	.+132    	; 0x8cc <getGPSDatafromNMEA+0x496>
     848:	5a a0       	ldd	r5, Y+34	; 0x22
     84a:	51 10       	cpse	r5, r1
     84c:	1f c0       	rjmp	.+62     	; 0x88c <getGPSDatafromNMEA+0x456>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e2       	ldi	r20, 0x20	; 32
     854:	51 e4       	ldi	r21, 0x41	; 65
     856:	6b 81       	ldd	r22, Y+3	; 0x03
     858:	7c 81       	ldd	r23, Y+4	; 0x04
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
     85c:	9e 81       	ldd	r25, Y+6	; 0x06
     85e:	0e 94 96 1b 	call	0x372c	; 0x372c <__mulsf3>
     862:	2b 01       	movw	r4, r22
     864:	3c 01       	movw	r6, r24
     866:	61 2f       	mov	r22, r17
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	60 53       	subi	r22, 0x30	; 48
     86c:	71 09       	sbc	r23, r1
     86e:	07 2e       	mov	r0, r23
     870:	00 0c       	add	r0, r0
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__floatsisf>
     87a:	a3 01       	movw	r20, r6
     87c:	92 01       	movw	r18, r4
     87e:	0e 94 10 1a 	call	0x3420	; 0x3420 <__addsf3>
     882:	6b 83       	std	Y+3, r22	; 0x03
     884:	7c 83       	std	Y+4, r23	; 0x04
     886:	8d 83       	std	Y+5, r24	; 0x05
     888:	9e 83       	std	Y+6, r25	; 0x06
     88a:	22 c0       	rjmp	.+68     	; 0x8d0 <getGPSDatafromNMEA+0x49a>
     88c:	c1 2e       	mov	r12, r17
     88e:	0e 8d       	ldd	r16, Y+30	; 0x1e
     890:	1f 8d       	ldd	r17, Y+31	; 0x1f
     892:	6c 2d       	mov	r22, r12
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	60 53       	subi	r22, 0x30	; 48
     898:	71 09       	sbc	r23, r1
     89a:	07 2e       	mov	r0, r23
     89c:	00 0c       	add	r0, r0
     89e:	88 0b       	sbc	r24, r24
     8a0:	99 0b       	sbc	r25, r25
     8a2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__floatsisf>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e2       	ldi	r20, 0x20	; 32
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__divsf3>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	6b 81       	ldd	r22, Y+3	; 0x03
     8b8:	7c 81       	ldd	r23, Y+4	; 0x04
     8ba:	8d 81       	ldd	r24, Y+5	; 0x05
     8bc:	9e 81       	ldd	r25, Y+6	; 0x06
     8be:	0e 94 10 1a 	call	0x3420	; 0x3420 <__addsf3>
     8c2:	6b 83       	std	Y+3, r22	; 0x03
     8c4:	7c 83       	std	Y+4, r23	; 0x04
     8c6:	8d 83       	std	Y+5, r24	; 0x05
     8c8:	9e 83       	std	Y+6, r25	; 0x06
     8ca:	1b c0       	rjmp	.+54     	; 0x902 <getGPSDatafromNMEA+0x4cc>
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	2a a3       	std	Y+34, r18	; 0x22
     8d0:	b3 94       	inc	r11
     8d2:	f7 01       	movw	r30, r14
     8d4:	eb 0d       	add	r30, r11
     8d6:	f1 1d       	adc	r31, r1
     8d8:	11 81       	ldd	r17, Z+1	; 0x01
     8da:	1c 32       	cpi	r17, 0x2C	; 44
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <getGPSDatafromNMEA+0x4aa>
     8de:	b1 cf       	rjmp	.-158    	; 0x842 <getGPSDatafromNMEA+0x40c>
     8e0:	0e 8d       	ldd	r16, Y+30	; 0x1e
     8e2:	1f 8d       	ldd	r17, Y+31	; 0x1f
     8e4:	0e c0       	rjmp	.+28     	; 0x902 <getGPSDatafromNMEA+0x4cc>
     8e6:	1f 86       	std	Y+15, r1	; 0x0f
     8e8:	18 8a       	std	Y+16, r1	; 0x10
     8ea:	19 8a       	std	Y+17, r1	; 0x11
     8ec:	1a 8a       	std	Y+18, r1	; 0x12
     8ee:	09 c0       	rjmp	.+18     	; 0x902 <getGPSDatafromNMEA+0x4cc>
     8f0:	19 8e       	std	Y+25, r1	; 0x19
     8f2:	1a 8e       	std	Y+26, r1	; 0x1a
     8f4:	1b 8e       	std	Y+27, r1	; 0x1b
     8f6:	1c 8e       	std	Y+28, r1	; 0x1c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <getGPSDatafromNMEA+0x4cc>
     8fa:	1b 82       	std	Y+3, r1	; 0x03
     8fc:	1c 82       	std	Y+4, r1	; 0x04
     8fe:	1d 82       	std	Y+5, r1	; 0x05
     900:	1e 82       	std	Y+6, r1	; 0x06
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	02 15       	cp	r16, r2
     908:	13 05       	cpc	r17, r3
     90a:	09 f0       	breq	.+2      	; 0x90e <getGPSDatafromNMEA+0x4d8>
     90c:	c4 cd       	rjmp	.-1144   	; 0x496 <getGPSDatafromNMEA+0x60>
     90e:	4b 84       	ldd	r4, Y+11	; 0x0b
     910:	5c 84       	ldd	r5, Y+12	; 0x0c
     912:	d4 01       	movw	r26, r8
     914:	4d 92       	st	X+, r4
     916:	5c 92       	st	X, r5
     918:	11 97       	sbiw	r26, 0x01	; 1
     91a:	4f 80       	ldd	r4, Y+7	; 0x07
     91c:	58 84       	ldd	r5, Y+8	; 0x08
     91e:	69 84       	ldd	r6, Y+9	; 0x09
     920:	7a 84       	ldd	r7, Y+10	; 0x0a
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	4d 92       	st	X+, r4
     926:	5d 92       	st	X+, r5
     928:	6d 92       	st	X+, r6
     92a:	7c 92       	st	X, r7
     92c:	15 97       	sbiw	r26, 0x05	; 5
     92e:	8f 85       	ldd	r24, Y+15	; 0x0f
     930:	98 89       	ldd	r25, Y+16	; 0x10
     932:	a9 89       	ldd	r26, Y+17	; 0x11
     934:	ba 89       	ldd	r27, Y+18	; 0x12
     936:	f4 01       	movw	r30, r8
     938:	87 83       	std	Z+7, r24	; 0x07
     93a:	90 87       	std	Z+8, r25	; 0x08
     93c:	a1 87       	std	Z+9, r26	; 0x09
     93e:	b2 87       	std	Z+10, r27	; 0x0a
     940:	4f 88       	ldd	r4, Y+23	; 0x17
     942:	58 8c       	ldd	r5, Y+24	; 0x18
     944:	43 86       	std	Z+11, r4	; 0x0b
     946:	54 86       	std	Z+12, r5	; 0x0c
     948:	4b 88       	ldd	r4, Y+19	; 0x13
     94a:	5c 88       	ldd	r5, Y+20	; 0x14
     94c:	6d 88       	ldd	r6, Y+21	; 0x15
     94e:	7e 88       	ldd	r7, Y+22	; 0x16
     950:	45 86       	std	Z+13, r4	; 0x0d
     952:	56 86       	std	Z+14, r5	; 0x0e
     954:	67 86       	std	Z+15, r6	; 0x0f
     956:	70 8a       	std	Z+16, r7	; 0x10
     958:	89 8d       	ldd	r24, Y+25	; 0x19
     95a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     95c:	ab 8d       	ldd	r26, Y+27	; 0x1b
     95e:	bc 8d       	ldd	r27, Y+28	; 0x1c
     960:	82 8b       	std	Z+18, r24	; 0x12
     962:	93 8b       	std	Z+19, r25	; 0x13
     964:	a4 8b       	std	Z+20, r26	; 0x14
     966:	b5 8b       	std	Z+21, r27	; 0x15
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	ad 81       	ldd	r26, Y+5	; 0x05
     96e:	be 81       	ldd	r27, Y+6	; 0x06
     970:	86 8b       	std	Z+22, r24	; 0x16
     972:	97 8b       	std	Z+23, r25	; 0x17
     974:	a0 8f       	std	Z+24, r26	; 0x18
     976:	b1 8f       	std	Z+25, r27	; 0x19
     978:	4d 84       	ldd	r4, Y+13	; 0x0d
     97a:	42 8e       	std	Z+26, r4	; 0x1a
     97c:	5e 84       	ldd	r5, Y+14	; 0x0e
     97e:	53 8e       	std	Z+27, r5	; 0x1b
     980:	a4 8e       	std	Z+28, r10	; 0x1c
     982:	6d 8c       	ldd	r6, Y+29	; 0x1d
     984:	65 8e       	std	Z+29, r6	; 0x1d
     986:	c4 01       	movw	r24, r8
     988:	a2 96       	adiw	r28, 0x22	; 34
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	7f 90       	pop	r7
     9a8:	6f 90       	pop	r6
     9aa:	5f 90       	pop	r5
     9ac:	4f 90       	pop	r4
     9ae:	3f 90       	pop	r3
     9b0:	2f 90       	pop	r2
     9b2:	08 95       	ret

000009b4 <init_gps_interrupts>:
{
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
     9b4:	84 e1       	ldi	r24, 0x14	; 20
     9b6:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <__TEXT_REGION_LENGTH__+0x700ab3>
	gpgga_index = 0;
     9ba:	10 92 26 24 	sts	0x2426, r1	; 0x802426 <gpgga_index>
	uint8_t dollar_counter = 0;
	uint8_t current_sentence = SENTENCE_NONE;
	last_finished = SENTENCE_NONE;
     9be:	10 92 31 22 	sts	0x2231, r1	; 0x802231 <last_finished>
     9c2:	08 95       	ret

000009c4 <init_gps_buffers>:
}

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	51 e0       	ldi	r21, 0x01	; 1
     9c8:	69 e8       	ldi	r22, 0x89	; 137
     9ca:	72 e2       	ldi	r23, 0x22	; 34
     9cc:	89 e2       	ldi	r24, 0x29	; 41
     9ce:	92 e2       	ldi	r25, 0x22	; 34
     9d0:	3c dc       	rcall	.-1928   	; 0x24a <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
     9d2:	40 e4       	ldi	r20, 0x40	; 64
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	69 e8       	ldi	r22, 0x89	; 137
     9d8:	73 e2       	ldi	r23, 0x23	; 35
     9da:	89 ec       	ldi	r24, 0xC9	; 201
     9dc:	93 e2       	ldi	r25, 0x23	; 35
     9de:	35 cc       	rjmp	.-1942   	; 0x24a <rbu8_init>
     9e0:	08 95       	ret

000009e2 <__vector_61>:
}

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	08 b6       	in	r0, 0x38	; 56
     9ee:	0f 92       	push	r0
     9f0:	18 be       	out	0x38, r1	; 56
     9f2:	09 b6       	in	r0, 0x39	; 57
     9f4:	0f 92       	push	r0
     9f6:	19 be       	out	0x39, r1	; 57
     9f8:	0b b6       	in	r0, 0x3b	; 59
     9fa:	0f 92       	push	r0
     9fc:	1b be       	out	0x3b, r1	; 59
     9fe:	2f 93       	push	r18
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	af 93       	push	r26
     a06:	bf 93       	push	r27
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t c = GPS_USART.DATA;
     a0c:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <__TEXT_REGION_LENGTH__+0x700ab0>
	
	if (current_sentence == SENTENCE_GPGGA)
     a10:	80 91 88 22 	lds	r24, 0x2288	; 0x802288 <current_sentence>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	51 f4       	brne	.+20     	; 0xa2c <__vector_61+0x4a>
	{
		gpgga_buff[gpgga_index] = c;
     a18:	20 91 26 24 	lds	r18, 0x2426	; 0x802426 <gpgga_index>
     a1c:	e2 2f       	mov	r30, r18
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ef 52       	subi	r30, 0x2F	; 47
     a22:	fc 4d       	sbci	r31, 0xDC	; 220
     a24:	90 83       	st	Z, r25
		gpgga_index++;
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	20 93 26 24 	sts	0x2426, r18	; 0x802426 <gpgga_index>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
	}	
	
	if (c == '\n')
     a2c:	9a 30       	cpi	r25, 0x0A	; 10
     a2e:	39 f4       	brne	.+14     	; 0xa3e <__vector_61+0x5c>
	{
		last_finished = current_sentence;
     a30:	80 93 31 22 	sts	0x2231, r24	; 0x802231 <last_finished>
		current_sentence = SENTENCE_NONE;
     a34:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <current_sentence>
		dollar_counter = 0;
     a38:	10 92 28 22 	sts	0x2228, r1	; 0x802228 <dollar_counter>
     a3c:	23 c0       	rjmp	.+70     	; 0xa84 <__vector_61+0xa2>
	}
	else if (c == '$' && current_sentence == SENTENCE_NONE)
     a3e:	94 32       	cpi	r25, 0x24	; 36
     a40:	11 f4       	brne	.+4      	; 0xa46 <__vector_61+0x64>
     a42:	88 23       	and	r24, r24
     a44:	d9 f0       	breq	.+54     	; 0xa7c <__vector_61+0x9a>
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     a46:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <dollar_counter>
     a4a:	88 23       	and	r24, r24
     a4c:	d9 f0       	breq	.+54     	; 0xa84 <__vector_61+0xa2>
	{
		if (dollar_counter == 5 && c == 'G' )
     a4e:	85 30       	cpi	r24, 0x05	; 5
     a50:	b1 f4       	brne	.+44     	; 0xa7e <__vector_61+0x9c>
     a52:	97 34       	cpi	r25, 0x47	; 71
     a54:	a1 f4       	brne	.+40     	; 0xa7e <__vector_61+0x9c>
		{
			current_sentence= SENTENCE_GPGGA;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 88 22 	sts	0x2288, r24	; 0x802288 <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
     a5c:	85 e0       	ldi	r24, 0x05	; 5
     a5e:	e2 e2       	ldi	r30, 0x22	; 34
     a60:	f0 e2       	ldi	r31, 0x20	; 32
     a62:	a1 ed       	ldi	r26, 0xD1	; 209
     a64:	b3 e2       	ldi	r27, 0x23	; 35
     a66:	01 90       	ld	r0, Z+
     a68:	0d 92       	st	X+, r0
     a6a:	8a 95       	dec	r24
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <__vector_61+0x84>
			gpgga_index = 5;
     a6e:	85 e0       	ldi	r24, 0x05	; 5
     a70:	80 93 26 24 	sts	0x2426, r24	; 0x802426 <gpgga_index>
			dollar_counter++;
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <dollar_counter>
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__vector_61+0xa2>
	else if (c == '$' && current_sentence == SENTENCE_NONE)
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     a7c:	81 e0       	ldi	r24, 0x01	; 1
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	0b be       	out	0x3b, r0	; 59
     a96:	0f 90       	pop	r0
     a98:	09 be       	out	0x39, r0	; 57
     a9a:	0f 90       	pop	r0
     a9c:	08 be       	out	0x38, r0	; 56
     a9e:	0f 90       	pop	r0
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	0f 90       	pop	r0
     aa4:	1f 90       	pop	r1
     aa6:	18 95       	reti

00000aa8 <__vector_63>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	08 b6       	in	r0, 0x38	; 56
     ab4:	0f 92       	push	r0
     ab6:	18 be       	out	0x38, r1	; 56
     ab8:	09 b6       	in	r0, 0x39	; 57
     aba:	0f 92       	push	r0
     abc:	19 be       	out	0x39, r1	; 57
     abe:	0b b6       	in	r0, 0x3b	; 59
     ac0:	0f 92       	push	r0
     ac2:	1b be       	out	0x3b, r1	; 59
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	60 eb       	ldi	r22, 0xB0	; 176
     ae2:	7a e0       	ldi	r23, 0x0A	; 10
     ae4:	89 ec       	ldi	r24, 0xC9	; 201
     ae6:	93 e2       	ldi	r25, 0x23	; 35
     ae8:	cc db       	rcall	.-2152   	; 0x282 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	89 ec       	ldi	r24, 0xC9	; 201
     af0:	93 e2       	ldi	r25, 0x23	; 35
     af2:	17 dc       	rcall	.-2002   	; 0x322 <rbu8_delete_oldest>
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	09 be       	out	0x39, r0	; 57
     b14:	0f 90       	pop	r0
     b16:	08 be       	out	0x38, r0	; 56
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	1f 92       	push	r1
     b28:	1f 92       	push	r1
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b34:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     b38:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     b3c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     b40:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     b44:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     b48:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b4c:	8f b7       	in	r24, 0x3f	; 63
     b4e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     b50:	f8 94       	cli
	return flags;
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     b54:	e0 e5       	ldi	r30, 0x50	; 80
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	82 60       	ori	r24, 0x02	; 2
     b5c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b5e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     b60:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     b62:	81 ff       	sbrs	r24, 1
     b64:	fd cf       	rjmp	.-6      	; 0xb60 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	6b d0       	rcall	.+214    	; 0xc44 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b6e:	8f b7       	in	r24, 0x3f	; 63
     b70:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b72:	f8 94       	cli
	return flags;
     b74:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     b76:	e0 e5       	ldi	r30, 0x50	; 80
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b80:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	1f 92       	push	r1
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b96:	9f b7       	in	r25, 0x3f	; 63
     b98:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     b9a:	f8 94       	cli
	return flags;
     b9c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     b9e:	e8 2f       	mov	r30, r24
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	e0 59       	subi	r30, 0x90	; 144
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	60 95       	com	r22
     ba8:	80 81       	ld	r24, Z
     baa:	68 23       	and	r22, r24
     bac:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bae:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     bb0:	0f 90       	pop	r0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	7c 01       	movw	r14, r24
     bc6:	8b 01       	movw	r16, r22
     bc8:	ea 01       	movw	r28, r20
	while (len) {
     bca:	20 97       	sbiw	r28, 0x00	; 0
     bcc:	41 f0       	breq	.+16     	; 0xbde <usart_serial_write_packet+0x26>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     bce:	f8 01       	movw	r30, r16
     bd0:	61 91       	ld	r22, Z+
     bd2:	8f 01       	movw	r16, r30
     bd4:	c7 01       	movw	r24, r14
     bd6:	0e 94 67 11 	call	0x22ce	; 0x22ce <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     bda:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     bdc:	c1 f7       	brne	.-16     	; 0xbce <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	1f 92       	push	r1
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     bf8:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <stdio_base>
     bfc:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <stdio_base+0x1>
     c00:	e0 91 28 24 	lds	r30, 0x2428	; 0x802428 <ptr_get>
     c04:	f0 91 29 24 	lds	r31, 0x2429	; 0x802429 <ptr_get+0x1>
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	19 95       	eicall
	return c;
     c10:	89 81       	ldd	r24, Y+1	; 0x01
}
     c12:	08 2e       	mov	r0, r24
     c14:	00 0c       	add	r0, r0
     c16:	99 0b       	sbc	r25, r25
     c18:	0f 90       	pop	r0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     c20:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     c22:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <stdio_base>
     c26:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <stdio_base+0x1>
     c2a:	e0 91 2a 24 	lds	r30, 0x242A	; 0x80242a <ptr_put>
     c2e:	f0 91 2b 24 	lds	r31, 0x242B	; 0x80242b <ptr_put+0x1>
     c32:	19 95       	eicall
     c34:	99 23       	and	r25, r25
     c36:	1c f0       	brlt	.+6      	; 0xc3e <_write+0x1e>
		return -1;
	}
	return 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     c42:	08 95       	ret

00000c44 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     c44:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     c46:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     c48:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     c4a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     c4c:	60 83       	st	Z, r22
	ret                             // Return to caller
     c4e:	08 95       	ret

00000c50 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	08 b6       	in	r0, 0x38	; 56
     c5c:	0f 92       	push	r0
     c5e:	18 be       	out	0x38, r1	; 56
     c60:	0b b6       	in	r0, 0x3b	; 59
     c62:	0f 92       	push	r0
     c64:	1b be       	out	0x3b, r1	; 59
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
	rtc_data.counter_high++;
     c6e:	ee e2       	ldi	r30, 0x2E	; 46
     c70:	f4 e2       	ldi	r31, 0x24	; 36
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	80 83       	st	Z, r24
     c7a:	91 83       	std	Z+1, r25	; 0x01
}
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	08 be       	out	0x38, r0	; 56
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	08 b6       	in	r0, 0x38	; 56
     ca2:	0f 92       	push	r0
     ca4:	18 be       	out	0x38, r1	; 56
     ca6:	09 b6       	in	r0, 0x39	; 57
     ca8:	0f 92       	push	r0
     caa:	19 be       	out	0x39, r1	; 57
     cac:	0b b6       	in	r0, 0x3b	; 59
     cae:	0f 92       	push	r0
     cb0:	1b be       	out	0x3b, r1	; 59
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     cd6:	ee e2       	ldi	r30, 0x2E	; 46
     cd8:	f4 e2       	ldi	r31, 0x24	; 36
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	22 81       	ldd	r18, Z+2	; 0x02
     ce0:	33 81       	ldd	r19, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	f0 f1       	brcs	.+124    	; 0xd64 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     cee:	e0 91 34 24 	lds	r30, 0x2434	; 0x802434 <rtc_data+0x6>
     cf2:	f0 91 35 24 	lds	r31, 0x2435	; 0x802435 <rtc_data+0x7>
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	a9 f1       	breq	.+106    	; 0xd64 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     cfa:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     cfe:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	dc 01       	movw	r26, r24
     d08:	99 27       	eor	r25, r25
     d0a:	88 27       	eor	r24, r24
     d0c:	ab 01       	movw	r20, r22
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	8c 01       	movw	r16, r24
     d14:	9d 01       	movw	r18, r26
     d16:	04 2b       	or	r16, r20
     d18:	15 2b       	or	r17, r21
     d1a:	26 2b       	or	r18, r22
     d1c:	37 2b       	or	r19, r23
     d1e:	c9 01       	movw	r24, r18
     d20:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     d22:	ae e2       	ldi	r26, 0x2E	; 46
     d24:	b4 e2       	ldi	r27, 0x24	; 36
     d26:	12 96       	adiw	r26, 0x02	; 2
     d28:	0d 91       	ld	r16, X+
     d2a:	1c 91       	ld	r17, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	98 01       	movw	r18, r16
     d34:	11 27       	eor	r17, r17
     d36:	00 27       	eor	r16, r16
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	cd 90       	ld	r12, X+
     d3c:	dc 90       	ld	r13, X
     d3e:	15 97       	sbiw	r26, 0x05	; 5
     d40:	e1 2c       	mov	r14, r1
     d42:	f1 2c       	mov	r15, r1
     d44:	0c 29       	or	r16, r12
     d46:	1d 29       	or	r17, r13
     d48:	2e 29       	or	r18, r14
     d4a:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     d4c:	06 17       	cp	r16, r22
     d4e:	17 07       	cpc	r17, r23
     d50:	28 07       	cpc	r18, r24
     d52:	39 07       	cpc	r19, r25
     d54:	30 f0       	brcs	.+12     	; 0xd62 <__vector_11+0xcc>
				count = alarm + 1;
     d56:	c9 01       	movw	r24, r18
     d58:	b8 01       	movw	r22, r16
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8f 4f       	sbci	r24, 0xFF	; 255
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     d62:	19 95       	eicall
		}
	}
}
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	0f 90       	pop	r0
     d8a:	0b be       	out	0x3b, r0	; 59
     d8c:	0f 90       	pop	r0
     d8e:	09 be       	out	0x39, r0	; 57
     d90:	0f 90       	pop	r0
     d92:	08 be       	out	0x38, r0	; 56
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	08 b6       	in	r0, 0x38	; 56
     daa:	0f 92       	push	r0
     dac:	18 be       	out	0x38, r1	; 56
     dae:	09 b6       	in	r0, 0x39	; 57
     db0:	0f 92       	push	r0
     db2:	19 be       	out	0x39, r1	; 57
     db4:	0b b6       	in	r0, 0x3b	; 59
     db6:	0f 92       	push	r0
     db8:	1b be       	out	0x3b, r1	; 59
     dba:	2f 93       	push	r18
     dbc:	3f 93       	push	r19
     dbe:	4f 93       	push	r20
     dc0:	5f 93       	push	r21
     dc2:	6f 93       	push	r22
     dc4:	7f 93       	push	r23
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
     dca:	af 93       	push	r26
     dcc:	bf 93       	push	r27
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     dd2:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <tc_tcc0_ovf_callback>
     dd6:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <tc_tcc0_ovf_callback+0x1>
     dda:	30 97       	sbiw	r30, 0x00	; 0
     ddc:	09 f0       	breq	.+2      	; 0xde0 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     dde:	19 95       	eicall
	}
}
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0b be       	out	0x3b, r0	; 59
     dfc:	0f 90       	pop	r0
     dfe:	09 be       	out	0x39, r0	; 57
     e00:	0f 90       	pop	r0
     e02:	08 be       	out	0x38, r0	; 56
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	08 b6       	in	r0, 0x38	; 56
     e1a:	0f 92       	push	r0
     e1c:	18 be       	out	0x38, r1	; 56
     e1e:	09 b6       	in	r0, 0x39	; 57
     e20:	0f 92       	push	r0
     e22:	19 be       	out	0x39, r1	; 57
     e24:	0b b6       	in	r0, 0x3b	; 59
     e26:	0f 92       	push	r0
     e28:	1b be       	out	0x3b, r1	; 59
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	ef 93       	push	r30
     e40:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     e42:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <tc_tcc0_err_callback>
     e46:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <tc_tcc0_err_callback+0x1>
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__vector_15+0x42>
		tc_tcc0_err_callback();
     e4e:	19 95       	eicall
	}
}
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0b be       	out	0x3b, r0	; 59
     e6c:	0f 90       	pop	r0
     e6e:	09 be       	out	0x39, r0	; 57
     e70:	0f 90       	pop	r0
     e72:	08 be       	out	0x38, r0	; 56
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	08 b6       	in	r0, 0x38	; 56
     e8a:	0f 92       	push	r0
     e8c:	18 be       	out	0x38, r1	; 56
     e8e:	09 b6       	in	r0, 0x39	; 57
     e90:	0f 92       	push	r0
     e92:	19 be       	out	0x39, r1	; 57
     e94:	0b b6       	in	r0, 0x3b	; 59
     e96:	0f 92       	push	r0
     e98:	1b be       	out	0x3b, r1	; 59
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	6f 93       	push	r22
     ea4:	7f 93       	push	r23
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	af 93       	push	r26
     eac:	bf 93       	push	r27
     eae:	ef 93       	push	r30
     eb0:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     eb2:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <tc_tcc0_cca_callback>
     eb6:	f0 91 6d 21 	lds	r31, 0x216D	; 0x80216d <tc_tcc0_cca_callback+0x1>
     eba:	30 97       	sbiw	r30, 0x00	; 0
     ebc:	09 f0       	breq	.+2      	; 0xec0 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     ebe:	19 95       	eicall
	}
}
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0b be       	out	0x3b, r0	; 59
     edc:	0f 90       	pop	r0
     ede:	09 be       	out	0x39, r0	; 57
     ee0:	0f 90       	pop	r0
     ee2:	08 be       	out	0x38, r0	; 56
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	08 b6       	in	r0, 0x38	; 56
     efa:	0f 92       	push	r0
     efc:	18 be       	out	0x38, r1	; 56
     efe:	09 b6       	in	r0, 0x39	; 57
     f00:	0f 92       	push	r0
     f02:	19 be       	out	0x39, r1	; 57
     f04:	0b b6       	in	r0, 0x3b	; 59
     f06:	0f 92       	push	r0
     f08:	1b be       	out	0x3b, r1	; 59
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     f22:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <tc_tcc0_ccb_callback>
     f26:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <tc_tcc0_ccb_callback+0x1>
     f2a:	30 97       	sbiw	r30, 0x00	; 0
     f2c:	09 f0       	breq	.+2      	; 0xf30 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     f2e:	19 95       	eicall
	}
}
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	09 be       	out	0x39, r0	; 57
     f50:	0f 90       	pop	r0
     f52:	08 be       	out	0x38, r0	; 56
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	08 b6       	in	r0, 0x38	; 56
     f6a:	0f 92       	push	r0
     f6c:	18 be       	out	0x38, r1	; 56
     f6e:	09 b6       	in	r0, 0x39	; 57
     f70:	0f 92       	push	r0
     f72:	19 be       	out	0x39, r1	; 57
     f74:	0b b6       	in	r0, 0x3b	; 59
     f76:	0f 92       	push	r0
     f78:	1b be       	out	0x3b, r1	; 59
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     f92:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <tc_tcc0_ccc_callback>
     f96:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <tc_tcc0_ccc_callback+0x1>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     f9e:	19 95       	eicall
	}
}
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0b be       	out	0x3b, r0	; 59
     fbc:	0f 90       	pop	r0
     fbe:	09 be       	out	0x39, r0	; 57
     fc0:	0f 90       	pop	r0
     fc2:	08 be       	out	0x38, r0	; 56
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	08 b6       	in	r0, 0x38	; 56
     fda:	0f 92       	push	r0
     fdc:	18 be       	out	0x38, r1	; 56
     fde:	09 b6       	in	r0, 0x39	; 57
     fe0:	0f 92       	push	r0
     fe2:	19 be       	out	0x39, r1	; 57
     fe4:	0b b6       	in	r0, 0x3b	; 59
     fe6:	0f 92       	push	r0
     fe8:	1b be       	out	0x3b, r1	; 59
     fea:	2f 93       	push	r18
     fec:	3f 93       	push	r19
     fee:	4f 93       	push	r20
     ff0:	5f 93       	push	r21
     ff2:	6f 93       	push	r22
     ff4:	7f 93       	push	r23
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
     ffa:	af 93       	push	r26
     ffc:	bf 93       	push	r27
     ffe:	ef 93       	push	r30
    1000:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1002:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <tc_tcc0_ccd_callback>
    1006:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <tc_tcc0_ccd_callback+0x1>
    100a:	30 97       	sbiw	r30, 0x00	; 0
    100c:	09 f0       	breq	.+2      	; 0x1010 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    100e:	19 95       	eicall
	}
}
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0b be       	out	0x3b, r0	; 59
    102c:	0f 90       	pop	r0
    102e:	09 be       	out	0x39, r0	; 57
    1030:	0f 90       	pop	r0
    1032:	08 be       	out	0x38, r0	; 56
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	08 b6       	in	r0, 0x38	; 56
    104a:	0f 92       	push	r0
    104c:	18 be       	out	0x38, r1	; 56
    104e:	09 b6       	in	r0, 0x39	; 57
    1050:	0f 92       	push	r0
    1052:	19 be       	out	0x39, r1	; 57
    1054:	0b b6       	in	r0, 0x3b	; 59
    1056:	0f 92       	push	r0
    1058:	1b be       	out	0x3b, r1	; 59
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1072:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <tc_tcc1_ovf_callback>
    1076:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <tc_tcc1_ovf_callback+0x1>
    107a:	30 97       	sbiw	r30, 0x00	; 0
    107c:	09 f0       	breq	.+2      	; 0x1080 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    107e:	19 95       	eicall
	}
}
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0b be       	out	0x3b, r0	; 59
    109c:	0f 90       	pop	r0
    109e:	09 be       	out	0x39, r0	; 57
    10a0:	0f 90       	pop	r0
    10a2:	08 be       	out	0x38, r0	; 56
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	08 b6       	in	r0, 0x38	; 56
    10ba:	0f 92       	push	r0
    10bc:	18 be       	out	0x38, r1	; 56
    10be:	09 b6       	in	r0, 0x39	; 57
    10c0:	0f 92       	push	r0
    10c2:	19 be       	out	0x39, r1	; 57
    10c4:	0b b6       	in	r0, 0x3b	; 59
    10c6:	0f 92       	push	r0
    10c8:	1b be       	out	0x3b, r1	; 59
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    10e2:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tcc1_err_callback>
    10e6:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tcc1_err_callback+0x1>
    10ea:	30 97       	sbiw	r30, 0x00	; 0
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <__vector_21+0x42>
		tc_tcc1_err_callback();
    10ee:	19 95       	eicall
	}
}
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0b be       	out	0x3b, r0	; 59
    110c:	0f 90       	pop	r0
    110e:	09 be       	out	0x39, r0	; 57
    1110:	0f 90       	pop	r0
    1112:	08 be       	out	0x38, r0	; 56
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	08 b6       	in	r0, 0x38	; 56
    112a:	0f 92       	push	r0
    112c:	18 be       	out	0x38, r1	; 56
    112e:	09 b6       	in	r0, 0x39	; 57
    1130:	0f 92       	push	r0
    1132:	19 be       	out	0x39, r1	; 57
    1134:	0b b6       	in	r0, 0x3b	; 59
    1136:	0f 92       	push	r0
    1138:	1b be       	out	0x3b, r1	; 59
    113a:	2f 93       	push	r18
    113c:	3f 93       	push	r19
    113e:	4f 93       	push	r20
    1140:	5f 93       	push	r21
    1142:	6f 93       	push	r22
    1144:	7f 93       	push	r23
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	af 93       	push	r26
    114c:	bf 93       	push	r27
    114e:	ef 93       	push	r30
    1150:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1152:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tcc1_cca_callback>
    1156:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tcc1_cca_callback+0x1>
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	09 f0       	breq	.+2      	; 0x1160 <__vector_22+0x42>
		tc_tcc1_cca_callback();
    115e:	19 95       	eicall
	}
}
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	09 be       	out	0x39, r0	; 57
    1180:	0f 90       	pop	r0
    1182:	08 be       	out	0x38, r0	; 56
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	08 b6       	in	r0, 0x38	; 56
    119a:	0f 92       	push	r0
    119c:	18 be       	out	0x38, r1	; 56
    119e:	09 b6       	in	r0, 0x39	; 57
    11a0:	0f 92       	push	r0
    11a2:	19 be       	out	0x39, r1	; 57
    11a4:	0b b6       	in	r0, 0x3b	; 59
    11a6:	0f 92       	push	r0
    11a8:	1b be       	out	0x3b, r1	; 59
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    11c2:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcc1_ccb_callback>
    11c6:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcc1_ccb_callback+0x1>
    11ca:	30 97       	sbiw	r30, 0x00	; 0
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    11ce:	19 95       	eicall
	}
}
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0b be       	out	0x3b, r0	; 59
    11ec:	0f 90       	pop	r0
    11ee:	09 be       	out	0x39, r0	; 57
    11f0:	0f 90       	pop	r0
    11f2:	08 be       	out	0x38, r0	; 56
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	08 b6       	in	r0, 0x38	; 56
    120a:	0f 92       	push	r0
    120c:	18 be       	out	0x38, r1	; 56
    120e:	09 b6       	in	r0, 0x39	; 57
    1210:	0f 92       	push	r0
    1212:	19 be       	out	0x39, r1	; 57
    1214:	0b b6       	in	r0, 0x3b	; 59
    1216:	0f 92       	push	r0
    1218:	1b be       	out	0x3b, r1	; 59
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	4f 93       	push	r20
    1220:	5f 93       	push	r21
    1222:	6f 93       	push	r22
    1224:	7f 93       	push	r23
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
    122e:	ef 93       	push	r30
    1230:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1232:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcd0_ovf_callback>
    1236:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcd0_ovf_callback+0x1>
    123a:	30 97       	sbiw	r30, 0x00	; 0
    123c:	09 f0       	breq	.+2      	; 0x1240 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    123e:	19 95       	eicall
	}
}
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0b be       	out	0x3b, r0	; 59
    125c:	0f 90       	pop	r0
    125e:	09 be       	out	0x39, r0	; 57
    1260:	0f 90       	pop	r0
    1262:	08 be       	out	0x38, r0	; 56
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	08 b6       	in	r0, 0x38	; 56
    127a:	0f 92       	push	r0
    127c:	18 be       	out	0x38, r1	; 56
    127e:	09 b6       	in	r0, 0x39	; 57
    1280:	0f 92       	push	r0
    1282:	19 be       	out	0x39, r1	; 57
    1284:	0b b6       	in	r0, 0x3b	; 59
    1286:	0f 92       	push	r0
    1288:	1b be       	out	0x3b, r1	; 59
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    12a2:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcd0_err_callback>
    12a6:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcd0_err_callback+0x1>
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <__vector_78+0x42>
		tc_tcd0_err_callback();
    12ae:	19 95       	eicall
	}
}
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0b be       	out	0x3b, r0	; 59
    12cc:	0f 90       	pop	r0
    12ce:	09 be       	out	0x39, r0	; 57
    12d0:	0f 90       	pop	r0
    12d2:	08 be       	out	0x38, r0	; 56
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	08 b6       	in	r0, 0x38	; 56
    12ea:	0f 92       	push	r0
    12ec:	18 be       	out	0x38, r1	; 56
    12ee:	09 b6       	in	r0, 0x39	; 57
    12f0:	0f 92       	push	r0
    12f2:	19 be       	out	0x39, r1	; 57
    12f4:	0b b6       	in	r0, 0x3b	; 59
    12f6:	0f 92       	push	r0
    12f8:	1b be       	out	0x3b, r1	; 59
    12fa:	2f 93       	push	r18
    12fc:	3f 93       	push	r19
    12fe:	4f 93       	push	r20
    1300:	5f 93       	push	r21
    1302:	6f 93       	push	r22
    1304:	7f 93       	push	r23
    1306:	8f 93       	push	r24
    1308:	9f 93       	push	r25
    130a:	af 93       	push	r26
    130c:	bf 93       	push	r27
    130e:	ef 93       	push	r30
    1310:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1312:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcd0_cca_callback>
    1316:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcd0_cca_callback+0x1>
    131a:	30 97       	sbiw	r30, 0x00	; 0
    131c:	09 f0       	breq	.+2      	; 0x1320 <__vector_79+0x42>
		tc_tcd0_cca_callback();
    131e:	19 95       	eicall
	}
}
    1320:	ff 91       	pop	r31
    1322:	ef 91       	pop	r30
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	7f 91       	pop	r23
    132e:	6f 91       	pop	r22
    1330:	5f 91       	pop	r21
    1332:	4f 91       	pop	r20
    1334:	3f 91       	pop	r19
    1336:	2f 91       	pop	r18
    1338:	0f 90       	pop	r0
    133a:	0b be       	out	0x3b, r0	; 59
    133c:	0f 90       	pop	r0
    133e:	09 be       	out	0x39, r0	; 57
    1340:	0f 90       	pop	r0
    1342:	08 be       	out	0x38, r0	; 56
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	08 b6       	in	r0, 0x38	; 56
    135a:	0f 92       	push	r0
    135c:	18 be       	out	0x38, r1	; 56
    135e:	09 b6       	in	r0, 0x39	; 57
    1360:	0f 92       	push	r0
    1362:	19 be       	out	0x39, r1	; 57
    1364:	0b b6       	in	r0, 0x3b	; 59
    1366:	0f 92       	push	r0
    1368:	1b be       	out	0x3b, r1	; 59
    136a:	2f 93       	push	r18
    136c:	3f 93       	push	r19
    136e:	4f 93       	push	r20
    1370:	5f 93       	push	r21
    1372:	6f 93       	push	r22
    1374:	7f 93       	push	r23
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	af 93       	push	r26
    137c:	bf 93       	push	r27
    137e:	ef 93       	push	r30
    1380:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1382:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <tc_tcd0_ccb_callback>
    1386:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <tc_tcd0_ccb_callback+0x1>
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	09 f0       	breq	.+2      	; 0x1390 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    138e:	19 95       	eicall
	}
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	09 be       	out	0x39, r0	; 57
    13b0:	0f 90       	pop	r0
    13b2:	08 be       	out	0x38, r0	; 56
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	08 b6       	in	r0, 0x38	; 56
    13ca:	0f 92       	push	r0
    13cc:	18 be       	out	0x38, r1	; 56
    13ce:	09 b6       	in	r0, 0x39	; 57
    13d0:	0f 92       	push	r0
    13d2:	19 be       	out	0x39, r1	; 57
    13d4:	0b b6       	in	r0, 0x3b	; 59
    13d6:	0f 92       	push	r0
    13d8:	1b be       	out	0x3b, r1	; 59
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    13f2:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tc_tcd0_ccc_callback>
    13f6:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tc_tcd0_ccc_callback+0x1>
    13fa:	30 97       	sbiw	r30, 0x00	; 0
    13fc:	09 f0       	breq	.+2      	; 0x1400 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    13fe:	19 95       	eicall
	}
}
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0b be       	out	0x3b, r0	; 59
    141c:	0f 90       	pop	r0
    141e:	09 be       	out	0x39, r0	; 57
    1420:	0f 90       	pop	r0
    1422:	08 be       	out	0x38, r0	; 56
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0
    142a:	1f 90       	pop	r1
    142c:	18 95       	reti

0000142e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	08 b6       	in	r0, 0x38	; 56
    143a:	0f 92       	push	r0
    143c:	18 be       	out	0x38, r1	; 56
    143e:	09 b6       	in	r0, 0x39	; 57
    1440:	0f 92       	push	r0
    1442:	19 be       	out	0x39, r1	; 57
    1444:	0b b6       	in	r0, 0x3b	; 59
    1446:	0f 92       	push	r0
    1448:	1b be       	out	0x3b, r1	; 59
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1462:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <tc_tcd0_ccd_callback>
    1466:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <tc_tcd0_ccd_callback+0x1>
    146a:	30 97       	sbiw	r30, 0x00	; 0
    146c:	09 f0       	breq	.+2      	; 0x1470 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    146e:	19 95       	eicall
	}
}
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	bf 91       	pop	r27
    1476:	af 91       	pop	r26
    1478:	9f 91       	pop	r25
    147a:	8f 91       	pop	r24
    147c:	7f 91       	pop	r23
    147e:	6f 91       	pop	r22
    1480:	5f 91       	pop	r21
    1482:	4f 91       	pop	r20
    1484:	3f 91       	pop	r19
    1486:	2f 91       	pop	r18
    1488:	0f 90       	pop	r0
    148a:	0b be       	out	0x3b, r0	; 59
    148c:	0f 90       	pop	r0
    148e:	09 be       	out	0x39, r0	; 57
    1490:	0f 90       	pop	r0
    1492:	08 be       	out	0x38, r0	; 56
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	08 b6       	in	r0, 0x38	; 56
    14aa:	0f 92       	push	r0
    14ac:	18 be       	out	0x38, r1	; 56
    14ae:	09 b6       	in	r0, 0x39	; 57
    14b0:	0f 92       	push	r0
    14b2:	19 be       	out	0x39, r1	; 57
    14b4:	0b b6       	in	r0, 0x3b	; 59
    14b6:	0f 92       	push	r0
    14b8:	1b be       	out	0x3b, r1	; 59
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    14d2:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <tc_tcd1_ovf_callback>
    14d6:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <tc_tcd1_ovf_callback+0x1>
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    14de:	19 95       	eicall
	}
}
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0b be       	out	0x3b, r0	; 59
    14fc:	0f 90       	pop	r0
    14fe:	09 be       	out	0x39, r0	; 57
    1500:	0f 90       	pop	r0
    1502:	08 be       	out	0x38, r0	; 56
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	08 b6       	in	r0, 0x38	; 56
    151a:	0f 92       	push	r0
    151c:	18 be       	out	0x38, r1	; 56
    151e:	09 b6       	in	r0, 0x39	; 57
    1520:	0f 92       	push	r0
    1522:	19 be       	out	0x39, r1	; 57
    1524:	0b b6       	in	r0, 0x3b	; 59
    1526:	0f 92       	push	r0
    1528:	1b be       	out	0x3b, r1	; 59
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	6f 93       	push	r22
    1534:	7f 93       	push	r23
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	ef 93       	push	r30
    1540:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1542:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <tc_tcd1_err_callback>
    1546:	f0 91 4f 21 	lds	r31, 0x214F	; 0x80214f <tc_tcd1_err_callback+0x1>
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	09 f0       	breq	.+2      	; 0x1550 <__vector_84+0x42>
		tc_tcd1_err_callback();
    154e:	19 95       	eicall
	}
}
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	7f 91       	pop	r23
    155e:	6f 91       	pop	r22
    1560:	5f 91       	pop	r21
    1562:	4f 91       	pop	r20
    1564:	3f 91       	pop	r19
    1566:	2f 91       	pop	r18
    1568:	0f 90       	pop	r0
    156a:	0b be       	out	0x3b, r0	; 59
    156c:	0f 90       	pop	r0
    156e:	09 be       	out	0x39, r0	; 57
    1570:	0f 90       	pop	r0
    1572:	08 be       	out	0x38, r0	; 56
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	08 b6       	in	r0, 0x38	; 56
    158a:	0f 92       	push	r0
    158c:	18 be       	out	0x38, r1	; 56
    158e:	09 b6       	in	r0, 0x39	; 57
    1590:	0f 92       	push	r0
    1592:	19 be       	out	0x39, r1	; 57
    1594:	0b b6       	in	r0, 0x3b	; 59
    1596:	0f 92       	push	r0
    1598:	1b be       	out	0x3b, r1	; 59
    159a:	2f 93       	push	r18
    159c:	3f 93       	push	r19
    159e:	4f 93       	push	r20
    15a0:	5f 93       	push	r21
    15a2:	6f 93       	push	r22
    15a4:	7f 93       	push	r23
    15a6:	8f 93       	push	r24
    15a8:	9f 93       	push	r25
    15aa:	af 93       	push	r26
    15ac:	bf 93       	push	r27
    15ae:	ef 93       	push	r30
    15b0:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    15b2:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <tc_tcd1_cca_callback>
    15b6:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <tc_tcd1_cca_callback+0x1>
    15ba:	30 97       	sbiw	r30, 0x00	; 0
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    15be:	19 95       	eicall
	}
}
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0b be       	out	0x3b, r0	; 59
    15dc:	0f 90       	pop	r0
    15de:	09 be       	out	0x39, r0	; 57
    15e0:	0f 90       	pop	r0
    15e2:	08 be       	out	0x38, r0	; 56
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	08 b6       	in	r0, 0x38	; 56
    15fa:	0f 92       	push	r0
    15fc:	18 be       	out	0x38, r1	; 56
    15fe:	09 b6       	in	r0, 0x39	; 57
    1600:	0f 92       	push	r0
    1602:	19 be       	out	0x39, r1	; 57
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	1b be       	out	0x3b, r1	; 59
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1622:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <tc_tcd1_ccb_callback>
    1626:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <tc_tcd1_ccb_callback+0x1>
    162a:	30 97       	sbiw	r30, 0x00	; 0
    162c:	09 f0       	breq	.+2      	; 0x1630 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    162e:	19 95       	eicall
	}
}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	09 be       	out	0x39, r0	; 57
    1650:	0f 90       	pop	r0
    1652:	08 be       	out	0x38, r0	; 56
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	08 b6       	in	r0, 0x38	; 56
    166a:	0f 92       	push	r0
    166c:	18 be       	out	0x38, r1	; 56
    166e:	09 b6       	in	r0, 0x39	; 57
    1670:	0f 92       	push	r0
    1672:	19 be       	out	0x39, r1	; 57
    1674:	0b b6       	in	r0, 0x3b	; 59
    1676:	0f 92       	push	r0
    1678:	1b be       	out	0x3b, r1	; 59
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	4f 93       	push	r20
    1680:	5f 93       	push	r21
    1682:	6f 93       	push	r22
    1684:	7f 93       	push	r23
    1686:	8f 93       	push	r24
    1688:	9f 93       	push	r25
    168a:	af 93       	push	r26
    168c:	bf 93       	push	r27
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1692:	e0 91 48 21 	lds	r30, 0x2148	; 0x802148 <tc_tce0_ovf_callback>
    1696:	f0 91 49 21 	lds	r31, 0x2149	; 0x802149 <tc_tce0_ovf_callback+0x1>
    169a:	30 97       	sbiw	r30, 0x00	; 0
    169c:	09 f0       	breq	.+2      	; 0x16a0 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    169e:	19 95       	eicall
	}
}
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	0b be       	out	0x3b, r0	; 59
    16bc:	0f 90       	pop	r0
    16be:	09 be       	out	0x39, r0	; 57
    16c0:	0f 90       	pop	r0
    16c2:	08 be       	out	0x38, r0	; 56
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	08 b6       	in	r0, 0x38	; 56
    16da:	0f 92       	push	r0
    16dc:	18 be       	out	0x38, r1	; 56
    16de:	09 b6       	in	r0, 0x39	; 57
    16e0:	0f 92       	push	r0
    16e2:	19 be       	out	0x39, r1	; 57
    16e4:	0b b6       	in	r0, 0x3b	; 59
    16e6:	0f 92       	push	r0
    16e8:	1b be       	out	0x3b, r1	; 59
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1702:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <tc_tce0_err_callback>
    1706:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <tc_tce0_err_callback+0x1>
    170a:	30 97       	sbiw	r30, 0x00	; 0
    170c:	09 f0       	breq	.+2      	; 0x1710 <__vector_48+0x42>
		tc_tce0_err_callback();
    170e:	19 95       	eicall
	}
}
    1710:	ff 91       	pop	r31
    1712:	ef 91       	pop	r30
    1714:	bf 91       	pop	r27
    1716:	af 91       	pop	r26
    1718:	9f 91       	pop	r25
    171a:	8f 91       	pop	r24
    171c:	7f 91       	pop	r23
    171e:	6f 91       	pop	r22
    1720:	5f 91       	pop	r21
    1722:	4f 91       	pop	r20
    1724:	3f 91       	pop	r19
    1726:	2f 91       	pop	r18
    1728:	0f 90       	pop	r0
    172a:	0b be       	out	0x3b, r0	; 59
    172c:	0f 90       	pop	r0
    172e:	09 be       	out	0x39, r0	; 57
    1730:	0f 90       	pop	r0
    1732:	08 be       	out	0x38, r0	; 56
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	08 b6       	in	r0, 0x38	; 56
    174a:	0f 92       	push	r0
    174c:	18 be       	out	0x38, r1	; 56
    174e:	09 b6       	in	r0, 0x39	; 57
    1750:	0f 92       	push	r0
    1752:	19 be       	out	0x39, r1	; 57
    1754:	0b b6       	in	r0, 0x3b	; 59
    1756:	0f 92       	push	r0
    1758:	1b be       	out	0x3b, r1	; 59
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1772:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <tc_tce0_cca_callback>
    1776:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <tc_tce0_cca_callback+0x1>
    177a:	30 97       	sbiw	r30, 0x00	; 0
    177c:	09 f0       	breq	.+2      	; 0x1780 <__vector_49+0x42>
		tc_tce0_cca_callback();
    177e:	19 95       	eicall
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0b be       	out	0x3b, r0	; 59
    179c:	0f 90       	pop	r0
    179e:	09 be       	out	0x39, r0	; 57
    17a0:	0f 90       	pop	r0
    17a2:	08 be       	out	0x38, r0	; 56
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	08 b6       	in	r0, 0x38	; 56
    17ba:	0f 92       	push	r0
    17bc:	18 be       	out	0x38, r1	; 56
    17be:	09 b6       	in	r0, 0x39	; 57
    17c0:	0f 92       	push	r0
    17c2:	19 be       	out	0x39, r1	; 57
    17c4:	0b b6       	in	r0, 0x3b	; 59
    17c6:	0f 92       	push	r0
    17c8:	1b be       	out	0x3b, r1	; 59
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    17e2:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <tc_tce0_ccb_callback>
    17e6:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <tc_tce0_ccb_callback+0x1>
    17ea:	30 97       	sbiw	r30, 0x00	; 0
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    17ee:	19 95       	eicall
	}
}
    17f0:	ff 91       	pop	r31
    17f2:	ef 91       	pop	r30
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	7f 91       	pop	r23
    17fe:	6f 91       	pop	r22
    1800:	5f 91       	pop	r21
    1802:	4f 91       	pop	r20
    1804:	3f 91       	pop	r19
    1806:	2f 91       	pop	r18
    1808:	0f 90       	pop	r0
    180a:	0b be       	out	0x3b, r0	; 59
    180c:	0f 90       	pop	r0
    180e:	09 be       	out	0x39, r0	; 57
    1810:	0f 90       	pop	r0
    1812:	08 be       	out	0x38, r0	; 56
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	08 b6       	in	r0, 0x38	; 56
    182a:	0f 92       	push	r0
    182c:	18 be       	out	0x38, r1	; 56
    182e:	09 b6       	in	r0, 0x39	; 57
    1830:	0f 92       	push	r0
    1832:	19 be       	out	0x39, r1	; 57
    1834:	0b b6       	in	r0, 0x3b	; 59
    1836:	0f 92       	push	r0
    1838:	1b be       	out	0x3b, r1	; 59
    183a:	2f 93       	push	r18
    183c:	3f 93       	push	r19
    183e:	4f 93       	push	r20
    1840:	5f 93       	push	r21
    1842:	6f 93       	push	r22
    1844:	7f 93       	push	r23
    1846:	8f 93       	push	r24
    1848:	9f 93       	push	r25
    184a:	af 93       	push	r26
    184c:	bf 93       	push	r27
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1852:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <tc_tce0_ccc_callback>
    1856:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <tc_tce0_ccc_callback+0x1>
    185a:	30 97       	sbiw	r30, 0x00	; 0
    185c:	09 f0       	breq	.+2      	; 0x1860 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    185e:	19 95       	eicall
	}
}
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	0b be       	out	0x3b, r0	; 59
    187c:	0f 90       	pop	r0
    187e:	09 be       	out	0x39, r0	; 57
    1880:	0f 90       	pop	r0
    1882:	08 be       	out	0x38, r0	; 56
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	08 b6       	in	r0, 0x38	; 56
    189a:	0f 92       	push	r0
    189c:	18 be       	out	0x38, r1	; 56
    189e:	09 b6       	in	r0, 0x39	; 57
    18a0:	0f 92       	push	r0
    18a2:	19 be       	out	0x39, r1	; 57
    18a4:	0b b6       	in	r0, 0x3b	; 59
    18a6:	0f 92       	push	r0
    18a8:	1b be       	out	0x3b, r1	; 59
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    18c2:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <tc_tce0_ccd_callback>
    18c6:	f0 91 3f 21 	lds	r31, 0x213F	; 0x80213f <tc_tce0_ccd_callback+0x1>
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    18ce:	19 95       	eicall
	}
}
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0b be       	out	0x3b, r0	; 59
    18ec:	0f 90       	pop	r0
    18ee:	09 be       	out	0x39, r0	; 57
    18f0:	0f 90       	pop	r0
    18f2:	08 be       	out	0x38, r0	; 56
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	08 b6       	in	r0, 0x38	; 56
    190a:	0f 92       	push	r0
    190c:	18 be       	out	0x38, r1	; 56
    190e:	09 b6       	in	r0, 0x39	; 57
    1910:	0f 92       	push	r0
    1912:	19 be       	out	0x39, r1	; 57
    1914:	0b b6       	in	r0, 0x3b	; 59
    1916:	0f 92       	push	r0
    1918:	1b be       	out	0x3b, r1	; 59
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1932:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <tc_tce1_ovf_callback>
    1936:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <tc_tce1_ovf_callback+0x1>
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	09 f0       	breq	.+2      	; 0x1940 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    193e:	19 95       	eicall
	}
}
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0b be       	out	0x3b, r0	; 59
    195c:	0f 90       	pop	r0
    195e:	09 be       	out	0x39, r0	; 57
    1960:	0f 90       	pop	r0
    1962:	08 be       	out	0x38, r0	; 56
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	08 b6       	in	r0, 0x38	; 56
    197a:	0f 92       	push	r0
    197c:	18 be       	out	0x38, r1	; 56
    197e:	09 b6       	in	r0, 0x39	; 57
    1980:	0f 92       	push	r0
    1982:	19 be       	out	0x39, r1	; 57
    1984:	0b b6       	in	r0, 0x3b	; 59
    1986:	0f 92       	push	r0
    1988:	1b be       	out	0x3b, r1	; 59
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    19a2:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <tc_tce1_err_callback>
    19a6:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <tc_tce1_err_callback+0x1>
    19aa:	30 97       	sbiw	r30, 0x00	; 0
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <__vector_54+0x42>
		tc_tce1_err_callback();
    19ae:	19 95       	eicall
	}
}
    19b0:	ff 91       	pop	r31
    19b2:	ef 91       	pop	r30
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	9f 91       	pop	r25
    19ba:	8f 91       	pop	r24
    19bc:	7f 91       	pop	r23
    19be:	6f 91       	pop	r22
    19c0:	5f 91       	pop	r21
    19c2:	4f 91       	pop	r20
    19c4:	3f 91       	pop	r19
    19c6:	2f 91       	pop	r18
    19c8:	0f 90       	pop	r0
    19ca:	0b be       	out	0x3b, r0	; 59
    19cc:	0f 90       	pop	r0
    19ce:	09 be       	out	0x39, r0	; 57
    19d0:	0f 90       	pop	r0
    19d2:	08 be       	out	0x38, r0	; 56
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    19de:	1f 92       	push	r1
    19e0:	0f 92       	push	r0
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	08 b6       	in	r0, 0x38	; 56
    19ea:	0f 92       	push	r0
    19ec:	18 be       	out	0x38, r1	; 56
    19ee:	09 b6       	in	r0, 0x39	; 57
    19f0:	0f 92       	push	r0
    19f2:	19 be       	out	0x39, r1	; 57
    19f4:	0b b6       	in	r0, 0x3b	; 59
    19f6:	0f 92       	push	r0
    19f8:	1b be       	out	0x3b, r1	; 59
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1a12:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <tc_tce1_cca_callback>
    1a16:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <tc_tce1_cca_callback+0x1>
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__vector_55+0x42>
		tc_tce1_cca_callback();
    1a1e:	19 95       	eicall
	}
}
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0b be       	out	0x3b, r0	; 59
    1a3c:	0f 90       	pop	r0
    1a3e:	09 be       	out	0x39, r0	; 57
    1a40:	0f 90       	pop	r0
    1a42:	08 be       	out	0x38, r0	; 56
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	08 b6       	in	r0, 0x38	; 56
    1a5a:	0f 92       	push	r0
    1a5c:	18 be       	out	0x38, r1	; 56
    1a5e:	09 b6       	in	r0, 0x39	; 57
    1a60:	0f 92       	push	r0
    1a62:	19 be       	out	0x39, r1	; 57
    1a64:	0b b6       	in	r0, 0x3b	; 59
    1a66:	0f 92       	push	r0
    1a68:	1b be       	out	0x3b, r1	; 59
    1a6a:	2f 93       	push	r18
    1a6c:	3f 93       	push	r19
    1a6e:	4f 93       	push	r20
    1a70:	5f 93       	push	r21
    1a72:	6f 93       	push	r22
    1a74:	7f 93       	push	r23
    1a76:	8f 93       	push	r24
    1a78:	9f 93       	push	r25
    1a7a:	af 93       	push	r26
    1a7c:	bf 93       	push	r27
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1a82:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <tc_tce1_ccb_callback>
    1a86:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <tc_tce1_ccb_callback+0x1>
    1a8a:	30 97       	sbiw	r30, 0x00	; 0
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1a8e:	19 95       	eicall
	}
}
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0b be       	out	0x3b, r0	; 59
    1aac:	0f 90       	pop	r0
    1aae:	09 be       	out	0x39, r0	; 57
    1ab0:	0f 90       	pop	r0
    1ab2:	08 be       	out	0x38, r0	; 56
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 b6       	in	r0, 0x38	; 56
    1aca:	0f 92       	push	r0
    1acc:	18 be       	out	0x38, r1	; 56
    1ace:	09 b6       	in	r0, 0x39	; 57
    1ad0:	0f 92       	push	r0
    1ad2:	19 be       	out	0x39, r1	; 57
    1ad4:	0b b6       	in	r0, 0x3b	; 59
    1ad6:	0f 92       	push	r0
    1ad8:	1b be       	out	0x3b, r1	; 59
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1af2:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <tc_tcf0_ovf_callback>
    1af6:	f0 91 35 21 	lds	r31, 0x2135	; 0x802135 <tc_tcf0_ovf_callback+0x1>
    1afa:	30 97       	sbiw	r30, 0x00	; 0
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1afe:	19 95       	eicall
	}
}
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0b be       	out	0x3b, r0	; 59
    1b1c:	0f 90       	pop	r0
    1b1e:	09 be       	out	0x39, r0	; 57
    1b20:	0f 90       	pop	r0
    1b22:	08 be       	out	0x38, r0	; 56
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	08 b6       	in	r0, 0x38	; 56
    1b3a:	0f 92       	push	r0
    1b3c:	18 be       	out	0x38, r1	; 56
    1b3e:	09 b6       	in	r0, 0x39	; 57
    1b40:	0f 92       	push	r0
    1b42:	19 be       	out	0x39, r1	; 57
    1b44:	0b b6       	in	r0, 0x3b	; 59
    1b46:	0f 92       	push	r0
    1b48:	1b be       	out	0x3b, r1	; 59
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1b62:	e0 91 32 21 	lds	r30, 0x2132	; 0x802132 <tc_tcf0_err_callback>
    1b66:	f0 91 33 21 	lds	r31, 0x2133	; 0x802133 <tc_tcf0_err_callback+0x1>
    1b6a:	30 97       	sbiw	r30, 0x00	; 0
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <__vector_109+0x42>
		tc_tcf0_err_callback();
    1b6e:	19 95       	eicall
	}
}
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0b be       	out	0x3b, r0	; 59
    1b8c:	0f 90       	pop	r0
    1b8e:	09 be       	out	0x39, r0	; 57
    1b90:	0f 90       	pop	r0
    1b92:	08 be       	out	0x38, r0	; 56
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1b9e:	1f 92       	push	r1
    1ba0:	0f 92       	push	r0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	0f 92       	push	r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	08 b6       	in	r0, 0x38	; 56
    1baa:	0f 92       	push	r0
    1bac:	18 be       	out	0x38, r1	; 56
    1bae:	09 b6       	in	r0, 0x39	; 57
    1bb0:	0f 92       	push	r0
    1bb2:	19 be       	out	0x39, r1	; 57
    1bb4:	0b b6       	in	r0, 0x3b	; 59
    1bb6:	0f 92       	push	r0
    1bb8:	1b be       	out	0x3b, r1	; 59
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1bd2:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <tc_tcf0_cca_callback>
    1bd6:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <tc_tcf0_cca_callback+0x1>
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1bde:	19 95       	eicall
	}
}
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0b be       	out	0x3b, r0	; 59
    1bfc:	0f 90       	pop	r0
    1bfe:	09 be       	out	0x39, r0	; 57
    1c00:	0f 90       	pop	r0
    1c02:	08 be       	out	0x38, r0	; 56
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	1f 90       	pop	r1
    1c0c:	18 95       	reti

00001c0e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	08 b6       	in	r0, 0x38	; 56
    1c1a:	0f 92       	push	r0
    1c1c:	18 be       	out	0x38, r1	; 56
    1c1e:	09 b6       	in	r0, 0x39	; 57
    1c20:	0f 92       	push	r0
    1c22:	19 be       	out	0x39, r1	; 57
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	1b be       	out	0x3b, r1	; 59
    1c2a:	2f 93       	push	r18
    1c2c:	3f 93       	push	r19
    1c2e:	4f 93       	push	r20
    1c30:	5f 93       	push	r21
    1c32:	6f 93       	push	r22
    1c34:	7f 93       	push	r23
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	af 93       	push	r26
    1c3c:	bf 93       	push	r27
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1c42:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <tc_tcf0_ccb_callback>
    1c46:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <tc_tcf0_ccb_callback+0x1>
    1c4a:	30 97       	sbiw	r30, 0x00	; 0
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1c4e:	19 95       	eicall
	}
}
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0b be       	out	0x3b, r0	; 59
    1c6c:	0f 90       	pop	r0
    1c6e:	09 be       	out	0x39, r0	; 57
    1c70:	0f 90       	pop	r0
    1c72:	08 be       	out	0x38, r0	; 56
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	08 b6       	in	r0, 0x38	; 56
    1c8a:	0f 92       	push	r0
    1c8c:	18 be       	out	0x38, r1	; 56
    1c8e:	09 b6       	in	r0, 0x39	; 57
    1c90:	0f 92       	push	r0
    1c92:	19 be       	out	0x39, r1	; 57
    1c94:	0b b6       	in	r0, 0x3b	; 59
    1c96:	0f 92       	push	r0
    1c98:	1b be       	out	0x3b, r1	; 59
    1c9a:	2f 93       	push	r18
    1c9c:	3f 93       	push	r19
    1c9e:	4f 93       	push	r20
    1ca0:	5f 93       	push	r21
    1ca2:	6f 93       	push	r22
    1ca4:	7f 93       	push	r23
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
    1caa:	af 93       	push	r26
    1cac:	bf 93       	push	r27
    1cae:	ef 93       	push	r30
    1cb0:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1cb2:	e0 91 2c 21 	lds	r30, 0x212C	; 0x80212c <tc_tcf0_ccc_callback>
    1cb6:	f0 91 2d 21 	lds	r31, 0x212D	; 0x80212d <tc_tcf0_ccc_callback+0x1>
    1cba:	30 97       	sbiw	r30, 0x00	; 0
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1cbe:	19 95       	eicall
	}
}
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0b be       	out	0x3b, r0	; 59
    1cdc:	0f 90       	pop	r0
    1cde:	09 be       	out	0x39, r0	; 57
    1ce0:	0f 90       	pop	r0
    1ce2:	08 be       	out	0x38, r0	; 56
    1ce4:	0f 90       	pop	r0
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	0f 90       	pop	r0
    1cea:	1f 90       	pop	r1
    1cec:	18 95       	reti

00001cee <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	08 b6       	in	r0, 0x38	; 56
    1cfa:	0f 92       	push	r0
    1cfc:	18 be       	out	0x38, r1	; 56
    1cfe:	09 b6       	in	r0, 0x39	; 57
    1d00:	0f 92       	push	r0
    1d02:	19 be       	out	0x39, r1	; 57
    1d04:	0b b6       	in	r0, 0x3b	; 59
    1d06:	0f 92       	push	r0
    1d08:	1b be       	out	0x3b, r1	; 59
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1d22:	e0 91 2a 21 	lds	r30, 0x212A	; 0x80212a <tc_tcf0_ccd_callback>
    1d26:	f0 91 2b 21 	lds	r31, 0x212B	; 0x80212b <tc_tcf0_ccd_callback+0x1>
    1d2a:	30 97       	sbiw	r30, 0x00	; 0
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1d2e:	19 95       	eicall
	}
}
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	0b be       	out	0x3b, r0	; 59
    1d4c:	0f 90       	pop	r0
    1d4e:	09 be       	out	0x39, r0	; 57
    1d50:	0f 90       	pop	r0
    1d52:	08 be       	out	0x38, r0	; 56
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1d5e:	1f 92       	push	r1
    1d60:	0f 92       	push	r0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	0f 92       	push	r0
    1d66:	11 24       	eor	r1, r1
    1d68:	08 b6       	in	r0, 0x38	; 56
    1d6a:	0f 92       	push	r0
    1d6c:	18 be       	out	0x38, r1	; 56
    1d6e:	09 b6       	in	r0, 0x39	; 57
    1d70:	0f 92       	push	r0
    1d72:	19 be       	out	0x39, r1	; 57
    1d74:	0b b6       	in	r0, 0x3b	; 59
    1d76:	0f 92       	push	r0
    1d78:	1b be       	out	0x3b, r1	; 59
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1d92:	e0 91 28 21 	lds	r30, 0x2128	; 0x802128 <tc_tcf1_ovf_callback>
    1d96:	f0 91 29 21 	lds	r31, 0x2129	; 0x802129 <tc_tcf1_ovf_callback+0x1>
    1d9a:	30 97       	sbiw	r30, 0x00	; 0
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1d9e:	19 95       	eicall
	}
}
    1da0:	ff 91       	pop	r31
    1da2:	ef 91       	pop	r30
    1da4:	bf 91       	pop	r27
    1da6:	af 91       	pop	r26
    1da8:	9f 91       	pop	r25
    1daa:	8f 91       	pop	r24
    1dac:	7f 91       	pop	r23
    1dae:	6f 91       	pop	r22
    1db0:	5f 91       	pop	r21
    1db2:	4f 91       	pop	r20
    1db4:	3f 91       	pop	r19
    1db6:	2f 91       	pop	r18
    1db8:	0f 90       	pop	r0
    1dba:	0b be       	out	0x3b, r0	; 59
    1dbc:	0f 90       	pop	r0
    1dbe:	09 be       	out	0x39, r0	; 57
    1dc0:	0f 90       	pop	r0
    1dc2:	08 be       	out	0x38, r0	; 56
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	08 b6       	in	r0, 0x38	; 56
    1dda:	0f 92       	push	r0
    1ddc:	18 be       	out	0x38, r1	; 56
    1dde:	09 b6       	in	r0, 0x39	; 57
    1de0:	0f 92       	push	r0
    1de2:	19 be       	out	0x39, r1	; 57
    1de4:	0b b6       	in	r0, 0x3b	; 59
    1de6:	0f 92       	push	r0
    1de8:	1b be       	out	0x3b, r1	; 59
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1e02:	e0 91 26 21 	lds	r30, 0x2126	; 0x802126 <tc_tcf1_err_callback>
    1e06:	f0 91 27 21 	lds	r31, 0x2127	; 0x802127 <tc_tcf1_err_callback+0x1>
    1e0a:	30 97       	sbiw	r30, 0x00	; 0
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1e0e:	19 95       	eicall
	}
}
    1e10:	ff 91       	pop	r31
    1e12:	ef 91       	pop	r30
    1e14:	bf 91       	pop	r27
    1e16:	af 91       	pop	r26
    1e18:	9f 91       	pop	r25
    1e1a:	8f 91       	pop	r24
    1e1c:	7f 91       	pop	r23
    1e1e:	6f 91       	pop	r22
    1e20:	5f 91       	pop	r21
    1e22:	4f 91       	pop	r20
    1e24:	3f 91       	pop	r19
    1e26:	2f 91       	pop	r18
    1e28:	0f 90       	pop	r0
    1e2a:	0b be       	out	0x3b, r0	; 59
    1e2c:	0f 90       	pop	r0
    1e2e:	09 be       	out	0x39, r0	; 57
    1e30:	0f 90       	pop	r0
    1e32:	08 be       	out	0x38, r0	; 56
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	08 b6       	in	r0, 0x38	; 56
    1e4a:	0f 92       	push	r0
    1e4c:	18 be       	out	0x38, r1	; 56
    1e4e:	09 b6       	in	r0, 0x39	; 57
    1e50:	0f 92       	push	r0
    1e52:	19 be       	out	0x39, r1	; 57
    1e54:	0b b6       	in	r0, 0x3b	; 59
    1e56:	0f 92       	push	r0
    1e58:	1b be       	out	0x3b, r1	; 59
    1e5a:	2f 93       	push	r18
    1e5c:	3f 93       	push	r19
    1e5e:	4f 93       	push	r20
    1e60:	5f 93       	push	r21
    1e62:	6f 93       	push	r22
    1e64:	7f 93       	push	r23
    1e66:	8f 93       	push	r24
    1e68:	9f 93       	push	r25
    1e6a:	af 93       	push	r26
    1e6c:	bf 93       	push	r27
    1e6e:	ef 93       	push	r30
    1e70:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1e72:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <tc_tcf1_cca_callback>
    1e76:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <tc_tcf1_cca_callback+0x1>
    1e7a:	30 97       	sbiw	r30, 0x00	; 0
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1e7e:	19 95       	eicall
	}
}
    1e80:	ff 91       	pop	r31
    1e82:	ef 91       	pop	r30
    1e84:	bf 91       	pop	r27
    1e86:	af 91       	pop	r26
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	7f 91       	pop	r23
    1e8e:	6f 91       	pop	r22
    1e90:	5f 91       	pop	r21
    1e92:	4f 91       	pop	r20
    1e94:	3f 91       	pop	r19
    1e96:	2f 91       	pop	r18
    1e98:	0f 90       	pop	r0
    1e9a:	0b be       	out	0x3b, r0	; 59
    1e9c:	0f 90       	pop	r0
    1e9e:	09 be       	out	0x39, r0	; 57
    1ea0:	0f 90       	pop	r0
    1ea2:	08 be       	out	0x38, r0	; 56
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	08 b6       	in	r0, 0x38	; 56
    1eba:	0f 92       	push	r0
    1ebc:	18 be       	out	0x38, r1	; 56
    1ebe:	09 b6       	in	r0, 0x39	; 57
    1ec0:	0f 92       	push	r0
    1ec2:	19 be       	out	0x39, r1	; 57
    1ec4:	0b b6       	in	r0, 0x3b	; 59
    1ec6:	0f 92       	push	r0
    1ec8:	1b be       	out	0x3b, r1	; 59
    1eca:	2f 93       	push	r18
    1ecc:	3f 93       	push	r19
    1ece:	4f 93       	push	r20
    1ed0:	5f 93       	push	r21
    1ed2:	6f 93       	push	r22
    1ed4:	7f 93       	push	r23
    1ed6:	8f 93       	push	r24
    1ed8:	9f 93       	push	r25
    1eda:	af 93       	push	r26
    1edc:	bf 93       	push	r27
    1ede:	ef 93       	push	r30
    1ee0:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1ee2:	e0 91 22 21 	lds	r30, 0x2122	; 0x802122 <__data_end>
    1ee6:	f0 91 23 21 	lds	r31, 0x2123	; 0x802123 <__data_end+0x1>
    1eea:	30 97       	sbiw	r30, 0x00	; 0
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1eee:	19 95       	eicall
	}
}
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	7f 91       	pop	r23
    1efe:	6f 91       	pop	r22
    1f00:	5f 91       	pop	r21
    1f02:	4f 91       	pop	r20
    1f04:	3f 91       	pop	r19
    1f06:	2f 91       	pop	r18
    1f08:	0f 90       	pop	r0
    1f0a:	0b be       	out	0x3b, r0	; 59
    1f0c:	0f 90       	pop	r0
    1f0e:	09 be       	out	0x39, r0	; 57
    1f10:	0f 90       	pop	r0
    1f12:	08 be       	out	0x38, r0	; 56
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1f22:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <transfer>
    1f26:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <transfer+0x1>
    1f2a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1f2c:	83 ff       	sbrs	r24, 3
    1f2e:	08 c0       	rjmp	.+16     	; 0x1f40 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1f30:	88 60       	ori	r24, 0x08	; 8
    1f32:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1f38:	86 ef       	ldi	r24, 0xF6	; 246
    1f3a:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <transfer+0xa>
    1f3e:	83 c0       	rjmp	.+262    	; 0x2046 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1f40:	98 2f       	mov	r25, r24
    1f42:	94 71       	andi	r25, 0x14	; 20
    1f44:	31 f0       	breq	.+12     	; 0x1f52 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <transfer+0xa>
    1f50:	7a c0       	rjmp	.+244    	; 0x2046 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1f52:	86 ff       	sbrs	r24, 6
    1f54:	43 c0       	rjmp	.+134    	; 0x1fdc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1f56:	c2 e7       	ldi	r28, 0x72	; 114
    1f58:	d1 e2       	ldi	r29, 0x21	; 33
    1f5a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f5c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	14 96       	adiw	r26, 0x04	; 4
    1f64:	2d 91       	ld	r18, X+
    1f66:	3c 91       	ld	r19, X
    1f68:	15 97       	sbiw	r26, 0x05	; 5
    1f6a:	82 17       	cp	r24, r18
    1f6c:	93 07       	cpc	r25, r19
    1f6e:	6c f4       	brge	.+26     	; 0x1f8a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1f70:	9c 01       	movw	r18, r24
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	20 93 76 21 	sts	0x2176, r18	; 0x802176 <transfer+0x4>
    1f7a:	30 93 77 21 	sts	0x2177, r19	; 0x802177 <transfer+0x5>
    1f7e:	a8 0f       	add	r26, r24
    1f80:	b9 1f       	adc	r27, r25
    1f82:	11 96       	adiw	r26, 0x01	; 1
    1f84:	8c 91       	ld	r24, X
    1f86:	87 83       	std	Z+7, r24	; 0x07
    1f88:	5e c0       	rjmp	.+188    	; 0x2046 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1f8a:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <transfer+0x6>
    1f8e:	90 91 79 21 	lds	r25, 0x2179	; 0x802179 <transfer+0x7>
    1f92:	18 96       	adiw	r26, 0x08	; 8
    1f94:	2d 91       	ld	r18, X+
    1f96:	3c 91       	ld	r19, X
    1f98:	19 97       	sbiw	r26, 0x09	; 9
    1f9a:	82 17       	cp	r24, r18
    1f9c:	93 07       	cpc	r25, r19
    1f9e:	c8 f4       	brcc	.+50     	; 0x1fd2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1fa0:	20 91 7a 21 	lds	r18, 0x217A	; 0x80217a <transfer+0x8>
    1fa4:	22 23       	and	r18, r18
    1fa6:	21 f0       	breq	.+8      	; 0x1fb0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1fa8:	86 81       	ldd	r24, Z+6	; 0x06
    1faa:	81 60       	ori	r24, 0x01	; 1
    1fac:	86 83       	std	Z+6, r24	; 0x06
    1fae:	4b c0       	rjmp	.+150    	; 0x2046 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1fb0:	16 96       	adiw	r26, 0x06	; 6
    1fb2:	2d 91       	ld	r18, X+
    1fb4:	3c 91       	ld	r19, X
    1fb6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1fb8:	ac 01       	movw	r20, r24
    1fba:	4f 5f       	subi	r20, 0xFF	; 255
    1fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbe:	40 93 78 21 	sts	0x2178, r20	; 0x802178 <transfer+0x6>
    1fc2:	50 93 79 21 	sts	0x2179, r21	; 0x802179 <transfer+0x7>
    1fc6:	d9 01       	movw	r26, r18
    1fc8:	a8 0f       	add	r26, r24
    1fca:	b9 1f       	adc	r27, r25
    1fcc:	8c 91       	ld	r24, X
    1fce:	87 83       	std	Z+7, r24	; 0x07
    1fd0:	3a c0       	rjmp	.+116    	; 0x2046 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1fd6:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <transfer+0xa>
    1fda:	35 c0       	rjmp	.+106    	; 0x2046 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1fdc:	88 23       	and	r24, r24
    1fde:	84 f5       	brge	.+96     	; 0x2040 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1fe0:	a2 e7       	ldi	r26, 0x72	; 114
    1fe2:	b1 e2       	ldi	r27, 0x21	; 33
    1fe4:	12 96       	adiw	r26, 0x02	; 2
    1fe6:	cd 91       	ld	r28, X+
    1fe8:	dc 91       	ld	r29, X
    1fea:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1fec:	16 96       	adiw	r26, 0x06	; 6
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	17 97       	sbiw	r26, 0x07	; 7
    1ff4:	28 85       	ldd	r18, Y+8	; 0x08
    1ff6:	39 85       	ldd	r19, Y+9	; 0x09
    1ff8:	82 17       	cp	r24, r18
    1ffa:	93 07       	cpc	r25, r19
    1ffc:	d8 f4       	brcc	.+54     	; 0x2034 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1ffe:	6e 81       	ldd	r22, Y+6	; 0x06
    2000:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    2002:	9c 01       	movw	r18, r24
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	20 93 78 21 	sts	0x2178, r18	; 0x802178 <transfer+0x6>
    200c:	30 93 79 21 	sts	0x2179, r19	; 0x802179 <transfer+0x7>
    2010:	47 81       	ldd	r20, Z+7	; 0x07
    2012:	db 01       	movw	r26, r22
    2014:	a8 0f       	add	r26, r24
    2016:	b9 1f       	adc	r27, r25
    2018:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    201a:	88 85       	ldd	r24, Y+8	; 0x08
    201c:	99 85       	ldd	r25, Y+9	; 0x09
    201e:	28 17       	cp	r18, r24
    2020:	39 07       	cpc	r19, r25
    2022:	18 f4       	brcc	.+6      	; 0x202a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	83 83       	std	Z+3, r24	; 0x03
    2028:	0e c0       	rjmp	.+28     	; 0x2046 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    202a:	87 e0       	ldi	r24, 0x07	; 7
    202c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    202e:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <transfer+0xa>
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2034:	83 e0       	ldi	r24, 0x03	; 3
    2036:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    2038:	89 ef       	ldi	r24, 0xF9	; 249
    203a:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <transfer+0xa>
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    2040:	8b ef       	ldi	r24, 0xFB	; 251
    2042:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <transfer+0xa>
	}
}
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    204c:	1f 92       	push	r1
    204e:	0f 92       	push	r0
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	08 b6       	in	r0, 0x38	; 56
    2058:	0f 92       	push	r0
    205a:	18 be       	out	0x38, r1	; 56
    205c:	09 b6       	in	r0, 0x39	; 57
    205e:	0f 92       	push	r0
    2060:	19 be       	out	0x39, r1	; 57
    2062:	0b b6       	in	r0, 0x3b	; 59
    2064:	0f 92       	push	r0
    2066:	1b be       	out	0x3b, r1	; 59
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	4e df       	rcall	.-356    	; 0x1f1e <twim_interrupt_handler>
    2082:	ff 91       	pop	r31
    2084:	ef 91       	pop	r30
    2086:	bf 91       	pop	r27
    2088:	af 91       	pop	r26
    208a:	9f 91       	pop	r25
    208c:	8f 91       	pop	r24
    208e:	7f 91       	pop	r23
    2090:	6f 91       	pop	r22
    2092:	5f 91       	pop	r21
    2094:	4f 91       	pop	r20
    2096:	3f 91       	pop	r19
    2098:	2f 91       	pop	r18
    209a:	0f 90       	pop	r0
    209c:	0b be       	out	0x3b, r0	; 59
    209e:	0f 90       	pop	r0
    20a0:	09 be       	out	0x39, r0	; 57
    20a2:	0f 90       	pop	r0
    20a4:	08 be       	out	0x38, r0	; 56
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	08 b6       	in	r0, 0x38	; 56
    20bc:	0f 92       	push	r0
    20be:	18 be       	out	0x38, r1	; 56
    20c0:	09 b6       	in	r0, 0x39	; 57
    20c2:	0f 92       	push	r0
    20c4:	19 be       	out	0x39, r1	; 57
    20c6:	0b b6       	in	r0, 0x3b	; 59
    20c8:	0f 92       	push	r0
    20ca:	1b be       	out	0x3b, r1	; 59
    20cc:	2f 93       	push	r18
    20ce:	3f 93       	push	r19
    20d0:	4f 93       	push	r20
    20d2:	5f 93       	push	r21
    20d4:	6f 93       	push	r22
    20d6:	7f 93       	push	r23
    20d8:	8f 93       	push	r24
    20da:	9f 93       	push	r25
    20dc:	af 93       	push	r26
    20de:	bf 93       	push	r27
    20e0:	ef 93       	push	r30
    20e2:	ff 93       	push	r31
    20e4:	1c df       	rcall	.-456    	; 0x1f1e <twim_interrupt_handler>
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0b be       	out	0x3b, r0	; 59
    2102:	0f 90       	pop	r0
    2104:	09 be       	out	0x39, r0	; 57
    2106:	0f 90       	pop	r0
    2108:	08 be       	out	0x38, r0	; 56
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	08 b6       	in	r0, 0x38	; 56
    2120:	0f 92       	push	r0
    2122:	18 be       	out	0x38, r1	; 56
    2124:	09 b6       	in	r0, 0x39	; 57
    2126:	0f 92       	push	r0
    2128:	19 be       	out	0x39, r1	; 57
    212a:	0b b6       	in	r0, 0x3b	; 59
    212c:	0f 92       	push	r0
    212e:	1b be       	out	0x3b, r1	; 59
    2130:	2f 93       	push	r18
    2132:	3f 93       	push	r19
    2134:	4f 93       	push	r20
    2136:	5f 93       	push	r21
    2138:	6f 93       	push	r22
    213a:	7f 93       	push	r23
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
    2140:	af 93       	push	r26
    2142:	bf 93       	push	r27
    2144:	ef 93       	push	r30
    2146:	ff 93       	push	r31
    2148:	ea de       	rcall	.-556    	; 0x1f1e <twim_interrupt_handler>
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0b be       	out	0x3b, r0	; 59
    2166:	0f 90       	pop	r0
    2168:	09 be       	out	0x39, r0	; 57
    216a:	0f 90       	pop	r0
    216c:	08 be       	out	0x38, r0	; 56
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	08 b6       	in	r0, 0x38	; 56
    2184:	0f 92       	push	r0
    2186:	18 be       	out	0x38, r1	; 56
    2188:	09 b6       	in	r0, 0x39	; 57
    218a:	0f 92       	push	r0
    218c:	19 be       	out	0x39, r1	; 57
    218e:	0b b6       	in	r0, 0x3b	; 59
    2190:	0f 92       	push	r0
    2192:	1b be       	out	0x3b, r1	; 59
    2194:	2f 93       	push	r18
    2196:	3f 93       	push	r19
    2198:	4f 93       	push	r20
    219a:	5f 93       	push	r21
    219c:	6f 93       	push	r22
    219e:	7f 93       	push	r23
    21a0:	8f 93       	push	r24
    21a2:	9f 93       	push	r25
    21a4:	af 93       	push	r26
    21a6:	bf 93       	push	r27
    21a8:	ef 93       	push	r30
    21aa:	ff 93       	push	r31
    21ac:	b8 de       	rcall	.-656    	; 0x1f1e <twim_interrupt_handler>
    21ae:	ff 91       	pop	r31
    21b0:	ef 91       	pop	r30
    21b2:	bf 91       	pop	r27
    21b4:	af 91       	pop	r26
    21b6:	9f 91       	pop	r25
    21b8:	8f 91       	pop	r24
    21ba:	7f 91       	pop	r23
    21bc:	6f 91       	pop	r22
    21be:	5f 91       	pop	r21
    21c0:	4f 91       	pop	r20
    21c2:	3f 91       	pop	r19
    21c4:	2f 91       	pop	r18
    21c6:	0f 90       	pop	r0
    21c8:	0b be       	out	0x3b, r0	; 59
    21ca:	0f 90       	pop	r0
    21cc:	09 be       	out	0x39, r0	; 57
    21ce:	0f 90       	pop	r0
    21d0:	08 be       	out	0x38, r0	; 56
    21d2:	0f 90       	pop	r0
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	0f 90       	pop	r0
    21d8:	1f 90       	pop	r1
    21da:	18 95       	reti

000021dc <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    21dc:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    21de:	db 01       	movw	r26, r22
    21e0:	14 96       	adiw	r26, 0x04	; 4
    21e2:	8c 91       	ld	r24, X
    21e4:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    21e6:	88 eb       	ldi	r24, 0xB8	; 184
    21e8:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    21ee:	e2 e7       	ldi	r30, 0x72	; 114
    21f0:	f1 e2       	ldi	r31, 0x21	; 33
    21f2:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    21f4:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    21f6:	e0 ea       	ldi	r30, 0xA0	; 160
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	82 60       	ori	r24, 0x02	; 2
    21fe:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    2200:	78 94       	sei

	return STATUS_OK;
}
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	08 95       	ret

00002206 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	1f 92       	push	r1
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	9c 01       	movw	r18, r24
    2212:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    2214:	89 2b       	or	r24, r25
    2216:	09 f4       	brne	.+2      	; 0x221a <twi_master_transfer+0x14>
    2218:	51 c0       	rjmp	.+162    	; 0x22bc <twi_master_transfer+0xb6>
    221a:	30 97       	sbiw	r30, 0x00	; 0
    221c:	09 f4       	brne	.+2      	; 0x2220 <twi_master_transfer+0x1a>
    221e:	50 c0       	rjmp	.+160    	; 0x22c0 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    2220:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    2222:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <transfer+0x9>
    2226:	88 23       	and	r24, r24
    2228:	19 f0       	breq	.+6      	; 0x2230 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    222a:	99 23       	and	r25, r25
    222c:	f1 f3       	breq	.-4      	; 0x222a <twi_master_transfer+0x24>
    222e:	4a c0       	rjmp	.+148    	; 0x22c4 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2230:	8f b7       	in	r24, 0x3f	; 63
    2232:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2234:	f8 94       	cli
	return flags;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    2238:	a2 e7       	ldi	r26, 0x72	; 114
    223a:	b1 e2       	ldi	r27, 0x21	; 33
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	19 96       	adiw	r26, 0x09	; 9
    2240:	9c 93       	st	X, r25
    2242:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    2244:	90 e8       	ldi	r25, 0x80	; 128
    2246:	1a 96       	adiw	r26, 0x0a	; 10
    2248:	9c 93       	st	X, r25
    224a:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    224c:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    224e:	2d 93       	st	X+, r18
    2250:	3c 93       	st	X, r19
    2252:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    2254:	12 96       	adiw	r26, 0x02	; 2
    2256:	6d 93       	st	X+, r22
    2258:	7c 93       	st	X, r23
    225a:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    225c:	14 96       	adiw	r26, 0x04	; 4
    225e:	1d 92       	st	X+, r1
    2260:	1c 92       	st	X, r1
    2262:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    2264:	16 96       	adiw	r26, 0x06	; 6
    2266:	1d 92       	st	X+, r1
    2268:	1c 92       	st	X, r1
    226a:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    226c:	18 96       	adiw	r26, 0x08	; 8
    226e:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    2270:	80 81       	ld	r24, Z
    2272:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    2274:	64 81       	ldd	r22, Z+4	; 0x04
    2276:	75 81       	ldd	r23, Z+5	; 0x05
    2278:	67 2b       	or	r22, r23
    227a:	11 f4       	brne	.+4      	; 0x2280 <twi_master_transfer+0x7a>
    227c:	41 11       	cpse	r20, r1
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    2280:	f9 01       	movw	r30, r18
    2282:	86 83       	std	Z+6, r24	; 0x06
    2284:	03 c0       	rjmp	.+6      	; 0x228c <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    2286:	81 60       	ori	r24, 0x01	; 1
    2288:	f9 01       	movw	r30, r18
    228a:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    228c:	e2 e7       	ldi	r30, 0x72	; 114
    228e:	f1 e2       	ldi	r31, 0x21	; 33
    2290:	92 85       	ldd	r25, Z+10	; 0x0a
    2292:	90 38       	cpi	r25, 0x80	; 128
    2294:	e9 f3       	breq	.-6      	; 0x2290 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2296:	f9 01       	movw	r30, r18
    2298:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    229a:	83 70       	andi	r24, 0x03	; 3
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	49 f0       	breq	.+18     	; 0x22b2 <twi_master_transfer+0xac>
    22a0:	a2 e7       	ldi	r26, 0x72	; 114
    22a2:	b1 e2       	ldi	r27, 0x21	; 33
    22a4:	ed 91       	ld	r30, X+
    22a6:	fc 91       	ld	r31, X
    22a8:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    22aa:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    22ac:	83 70       	andi	r24, 0x03	; 3
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	c9 f7       	brne	.-14     	; 0x22a4 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    22b2:	e2 e7       	ldi	r30, 0x72	; 114
    22b4:	f1 e2       	ldi	r31, 0x21	; 33
    22b6:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    22b8:	11 86       	std	Z+9, r1	; 0x09
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    22bc:	88 ef       	ldi	r24, 0xF8	; 248
    22be:	03 c0       	rjmp	.+6      	; 0x22c6 <twi_master_transfer+0xc0>
    22c0:	88 ef       	ldi	r24, 0xF8	; 248
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    22c4:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    22c6:	0f 90       	pop	r0
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	08 95       	ret

000022ce <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    22ce:	fc 01       	movw	r30, r24
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	95 ff       	sbrs	r25, 5
    22d4:	fd cf       	rjmp	.-6      	; 0x22d0 <usart_putchar+0x2>
    22d6:	60 83       	st	Z, r22
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	08 95       	ret

000022de <usart_getchar>:
    22de:	fc 01       	movw	r30, r24
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	99 23       	and	r25, r25
    22e4:	ec f7       	brge	.-6      	; 0x22e0 <usart_getchar+0x2>
    22e6:	80 81       	ld	r24, Z
    22e8:	08 95       	ret

000022ea <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    22ea:	4f 92       	push	r4
    22ec:	5f 92       	push	r5
    22ee:	6f 92       	push	r6
    22f0:	7f 92       	push	r7
    22f2:	8f 92       	push	r8
    22f4:	9f 92       	push	r9
    22f6:	af 92       	push	r10
    22f8:	bf 92       	push	r11
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	7c 01       	movw	r14, r24
    2306:	4a 01       	movw	r8, r20
    2308:	5b 01       	movw	r10, r22
    230a:	28 01       	movw	r4, r16
    230c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    230e:	fc 01       	movw	r30, r24
    2310:	84 81       	ldd	r24, Z+4	; 0x04
    2312:	82 ff       	sbrs	r24, 2
    2314:	16 c0       	rjmp	.+44     	; 0x2342 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2316:	d9 01       	movw	r26, r18
    2318:	c8 01       	movw	r24, r16
    231a:	68 94       	set
    231c:	12 f8       	bld	r1, 2
    231e:	b6 95       	lsr	r27
    2320:	a7 95       	ror	r26
    2322:	97 95       	ror	r25
    2324:	87 95       	ror	r24
    2326:	16 94       	lsr	r1
    2328:	d1 f7       	brne	.-12     	; 0x231e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    232a:	b9 01       	movw	r22, r18
    232c:	a8 01       	movw	r20, r16
    232e:	03 2e       	mov	r0, r19
    2330:	36 e1       	ldi	r19, 0x16	; 22
    2332:	76 95       	lsr	r23
    2334:	67 95       	ror	r22
    2336:	57 95       	ror	r21
    2338:	47 95       	ror	r20
    233a:	3a 95       	dec	r19
    233c:	d1 f7       	brne	.-12     	; 0x2332 <usart_set_baudrate+0x48>
    233e:	30 2d       	mov	r19, r0
    2340:	15 c0       	rjmp	.+42     	; 0x236c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    2342:	d9 01       	movw	r26, r18
    2344:	c8 01       	movw	r24, r16
    2346:	68 94       	set
    2348:	13 f8       	bld	r1, 3
    234a:	b6 95       	lsr	r27
    234c:	a7 95       	ror	r26
    234e:	97 95       	ror	r25
    2350:	87 95       	ror	r24
    2352:	16 94       	lsr	r1
    2354:	d1 f7       	brne	.-12     	; 0x234a <usart_set_baudrate+0x60>
		min_rate /= 2;
    2356:	b9 01       	movw	r22, r18
    2358:	a8 01       	movw	r20, r16
    235a:	03 2e       	mov	r0, r19
    235c:	37 e1       	ldi	r19, 0x17	; 23
    235e:	76 95       	lsr	r23
    2360:	67 95       	ror	r22
    2362:	57 95       	ror	r21
    2364:	47 95       	ror	r20
    2366:	3a 95       	dec	r19
    2368:	d1 f7       	brne	.-12     	; 0x235e <usart_set_baudrate+0x74>
    236a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    236c:	88 15       	cp	r24, r8
    236e:	99 05       	cpc	r25, r9
    2370:	aa 05       	cpc	r26, r10
    2372:	bb 05       	cpc	r27, r11
    2374:	08 f4       	brcc	.+2      	; 0x2378 <usart_set_baudrate+0x8e>
    2376:	a6 c0       	rjmp	.+332    	; 0x24c4 <usart_set_baudrate+0x1da>
    2378:	84 16       	cp	r8, r20
    237a:	95 06       	cpc	r9, r21
    237c:	a6 06       	cpc	r10, r22
    237e:	b7 06       	cpc	r11, r23
    2380:	08 f4       	brcc	.+2      	; 0x2384 <usart_set_baudrate+0x9a>
    2382:	a2 c0       	rjmp	.+324    	; 0x24c8 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2384:	f7 01       	movw	r30, r14
    2386:	84 81       	ldd	r24, Z+4	; 0x04
    2388:	82 fd       	sbrc	r24, 2
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <usart_set_baudrate+0xaa>
		baud *= 2;
    238c:	88 0c       	add	r8, r8
    238e:	99 1c       	adc	r9, r9
    2390:	aa 1c       	adc	r10, r10
    2392:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    2394:	c3 01       	movw	r24, r6
    2396:	b2 01       	movw	r22, r4
    2398:	a5 01       	movw	r20, r10
    239a:	94 01       	movw	r18, r8
    239c:	0e 94 20 1c 	call	0x3840	; 0x3840 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    23a0:	2f 3f       	cpi	r18, 0xFF	; 255
    23a2:	31 05       	cpc	r19, r1
    23a4:	41 05       	cpc	r20, r1
    23a6:	51 05       	cpc	r21, r1
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <usart_set_baudrate+0xc2>
    23aa:	90 c0       	rjmp	.+288    	; 0x24cc <usart_set_baudrate+0x1e2>
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a0 e0       	ldi	r26, 0x00	; 0
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	c9 ef       	ldi	r28, 0xF9	; 249
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <usart_set_baudrate+0xd8>
    23b8:	28 17       	cp	r18, r24
    23ba:	39 07       	cpc	r19, r25
    23bc:	4a 07       	cpc	r20, r26
    23be:	5b 07       	cpc	r21, r27
    23c0:	58 f0       	brcs	.+22     	; 0x23d8 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	aa 1f       	adc	r26, r26
    23c8:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    23ca:	cd 3f       	cpi	r28, 0xFD	; 253
    23cc:	0c f4       	brge	.+2      	; 0x23d0 <usart_set_baudrate+0xe6>
			limit |= 1;
    23ce:	81 60       	ori	r24, 0x01	; 1
    23d0:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    23d2:	c7 30       	cpi	r28, 0x07	; 7
    23d4:	89 f7       	brne	.-30     	; 0x23b8 <usart_set_baudrate+0xce>
    23d6:	4f c0       	rjmp	.+158    	; 0x2476 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    23d8:	cc 23       	and	r28, r28
    23da:	0c f0       	brlt	.+2      	; 0x23de <usart_set_baudrate+0xf4>
    23dc:	4c c0       	rjmp	.+152    	; 0x2476 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    23de:	d5 01       	movw	r26, r10
    23e0:	c4 01       	movw	r24, r8
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	aa 1f       	adc	r26, r26
    23e8:	bb 1f       	adc	r27, r27
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	aa 1f       	adc	r26, r26
    23f0:	bb 1f       	adc	r27, r27
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	aa 1f       	adc	r26, r26
    23f8:	bb 1f       	adc	r27, r27
    23fa:	48 1a       	sub	r4, r24
    23fc:	59 0a       	sbc	r5, r25
    23fe:	6a 0a       	sbc	r6, r26
    2400:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    2402:	ce 3f       	cpi	r28, 0xFE	; 254
    2404:	f4 f4       	brge	.+60     	; 0x2442 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2406:	8d ef       	ldi	r24, 0xFD	; 253
    2408:	9f ef       	ldi	r25, 0xFF	; 255
    240a:	8c 1b       	sub	r24, r28
    240c:	91 09       	sbc	r25, r1
    240e:	c7 fd       	sbrc	r28, 7
    2410:	93 95       	inc	r25
    2412:	04 c0       	rjmp	.+8      	; 0x241c <usart_set_baudrate+0x132>
    2414:	44 0c       	add	r4, r4
    2416:	55 1c       	adc	r5, r5
    2418:	66 1c       	adc	r6, r6
    241a:	77 1c       	adc	r7, r7
    241c:	8a 95       	dec	r24
    241e:	d2 f7       	brpl	.-12     	; 0x2414 <usart_set_baudrate+0x12a>
    2420:	d5 01       	movw	r26, r10
    2422:	c4 01       	movw	r24, r8
    2424:	b6 95       	lsr	r27
    2426:	a7 95       	ror	r26
    2428:	97 95       	ror	r25
    242a:	87 95       	ror	r24
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	64 0d       	add	r22, r4
    2432:	75 1d       	adc	r23, r5
    2434:	86 1d       	adc	r24, r6
    2436:	97 1d       	adc	r25, r7
    2438:	a5 01       	movw	r20, r10
    243a:	94 01       	movw	r18, r8
    243c:	0e 94 20 1c 	call	0x3840	; 0x3840 <__udivmodsi4>
    2440:	37 c0       	rjmp	.+110    	; 0x24b0 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	8c 0f       	add	r24, r28
    2446:	a5 01       	movw	r20, r10
    2448:	94 01       	movw	r18, r8
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <usart_set_baudrate+0x16a>
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	44 1f       	adc	r20, r20
    2452:	55 1f       	adc	r21, r21
    2454:	8a 95       	dec	r24
    2456:	d2 f7       	brpl	.-12     	; 0x244c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    2458:	da 01       	movw	r26, r20
    245a:	c9 01       	movw	r24, r18
    245c:	b6 95       	lsr	r27
    245e:	a7 95       	ror	r26
    2460:	97 95       	ror	r25
    2462:	87 95       	ror	r24
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	64 0d       	add	r22, r4
    246a:	75 1d       	adc	r23, r5
    246c:	86 1d       	adc	r24, r6
    246e:	97 1d       	adc	r25, r7
    2470:	0e 94 20 1c 	call	0x3840	; 0x3840 <__udivmodsi4>
    2474:	1d c0       	rjmp	.+58     	; 0x24b0 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	8c 0f       	add	r24, r28
    247a:	a5 01       	movw	r20, r10
    247c:	94 01       	movw	r18, r8
    247e:	04 c0       	rjmp	.+8      	; 0x2488 <usart_set_baudrate+0x19e>
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	44 1f       	adc	r20, r20
    2486:	55 1f       	adc	r21, r21
    2488:	8a 95       	dec	r24
    248a:	d2 f7       	brpl	.-12     	; 0x2480 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    248c:	da 01       	movw	r26, r20
    248e:	c9 01       	movw	r24, r18
    2490:	b6 95       	lsr	r27
    2492:	a7 95       	ror	r26
    2494:	97 95       	ror	r25
    2496:	87 95       	ror	r24
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	64 0d       	add	r22, r4
    249e:	75 1d       	adc	r23, r5
    24a0:	86 1d       	adc	r24, r6
    24a2:	97 1d       	adc	r25, r7
    24a4:	0e 94 20 1c 	call	0x3840	; 0x3840 <__udivmodsi4>
    24a8:	21 50       	subi	r18, 0x01	; 1
    24aa:	31 09       	sbc	r19, r1
    24ac:	41 09       	sbc	r20, r1
    24ae:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    24b0:	83 2f       	mov	r24, r19
    24b2:	8f 70       	andi	r24, 0x0F	; 15
    24b4:	c2 95       	swap	r28
    24b6:	c0 7f       	andi	r28, 0xF0	; 240
    24b8:	c8 2b       	or	r28, r24
    24ba:	f7 01       	movw	r30, r14
    24bc:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    24be:	26 83       	std	Z+6, r18	; 0x06

	return true;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	18 c0       	rjmp	.+48     	; 0x24f4 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	16 c0       	rjmp	.+44     	; 0x24f4 <usart_set_baudrate+0x20a>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	14 c0       	rjmp	.+40     	; 0x24f4 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    24cc:	d5 01       	movw	r26, r10
    24ce:	c4 01       	movw	r24, r8
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	aa 1f       	adc	r26, r26
    24d6:	bb 1f       	adc	r27, r27
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	aa 1f       	adc	r26, r26
    24de:	bb 1f       	adc	r27, r27
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	48 1a       	sub	r4, r24
    24ea:	59 0a       	sbc	r5, r25
    24ec:	6a 0a       	sbc	r6, r26
    24ee:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    24f0:	c9 ef       	ldi	r28, 0xF9	; 249
    24f2:	89 cf       	rjmp	.-238    	; 0x2406 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	bf 90       	pop	r11
    2500:	af 90       	pop	r10
    2502:	9f 90       	pop	r9
    2504:	8f 90       	pop	r8
    2506:	7f 90       	pop	r7
    2508:	6f 90       	pop	r6
    250a:	5f 90       	pop	r5
    250c:	4f 90       	pop	r4
    250e:	08 95       	ret

00002510 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	ec 01       	movw	r28, r24
    251a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	09 f4       	brne	.+2      	; 0x2522 <usart_init_rs232+0x12>
    2520:	5d c1       	rjmp	.+698    	; 0x27dc <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2522:	80 3c       	cpi	r24, 0xC0	; 192
    2524:	91 05       	cpc	r25, r1
    2526:	29 f4       	brne	.+10     	; 0x2532 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2528:	60 e1       	ldi	r22, 0x10	; 16
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2530:	55 c1       	rjmp	.+682    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2532:	c0 34       	cpi	r28, 0x40	; 64
    2534:	84 e0       	ldi	r24, 0x04	; 4
    2536:	d8 07       	cpc	r29, r24
    2538:	29 f4       	brne	.+10     	; 0x2544 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    253a:	68 e0       	ldi	r22, 0x08	; 8
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2542:	4c c1       	rjmp	.+664    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2544:	c1 15       	cp	r28, r1
    2546:	e4 e0       	ldi	r30, 0x04	; 4
    2548:	de 07       	cpc	r29, r30
    254a:	29 f4       	brne	.+10     	; 0x2556 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    254c:	64 e0       	ldi	r22, 0x04	; 4
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2554:	43 c1       	rjmp	.+646    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2556:	c0 38       	cpi	r28, 0x80	; 128
    2558:	f1 e0       	ldi	r31, 0x01	; 1
    255a:	df 07       	cpc	r29, r31
    255c:	29 f4       	brne	.+10     	; 0x2568 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2566:	3a c1       	rjmp	.+628    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2568:	c1 15       	cp	r28, r1
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	d8 07       	cpc	r29, r24
    256e:	29 f4       	brne	.+10     	; 0x257a <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2570:	61 e0       	ldi	r22, 0x01	; 1
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2578:	31 c1       	rjmp	.+610    	; 0x27dc <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    257a:	c0 38       	cpi	r28, 0x80	; 128
    257c:	e3 e0       	ldi	r30, 0x03	; 3
    257e:	de 07       	cpc	r29, r30
    2580:	29 f4       	brne	.+10     	; 0x258c <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2582:	61 e0       	ldi	r22, 0x01	; 1
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    258a:	28 c1       	rjmp	.+592    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    258c:	c0 39       	cpi	r28, 0x90	; 144
    258e:	f3 e0       	ldi	r31, 0x03	; 3
    2590:	df 07       	cpc	r29, r31
    2592:	29 f4       	brne	.+10     	; 0x259e <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    259c:	1f c1       	rjmp	.+574    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    259e:	c1 15       	cp	r28, r1
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	d8 07       	cpc	r29, r24
    25a4:	29 f4       	brne	.+10     	; 0x25b0 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    25ae:	16 c1       	rjmp	.+556    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    25b0:	c0 34       	cpi	r28, 0x40	; 64
    25b2:	e2 e0       	ldi	r30, 0x02	; 2
    25b4:	de 07       	cpc	r29, r30
    25b6:	29 f4       	brne	.+10     	; 0x25c2 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    25b8:	62 e0       	ldi	r22, 0x02	; 2
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    25c0:	0d c1       	rjmp	.+538    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    25c2:	c1 15       	cp	r28, r1
    25c4:	f3 e0       	ldi	r31, 0x03	; 3
    25c6:	df 07       	cpc	r29, r31
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    25ca:	64 e0       	ldi	r22, 0x04	; 4
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    25d2:	04 c1       	rjmp	.+520    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    25d4:	c0 32       	cpi	r28, 0x20	; 32
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	d8 07       	cpc	r29, r24
    25da:	29 f4       	brne	.+10     	; 0x25e6 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    25dc:	64 e0       	ldi	r22, 0x04	; 4
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    25e4:	fb c0       	rjmp	.+502    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    25e6:	c1 15       	cp	r28, r1
    25e8:	e8 e0       	ldi	r30, 0x08	; 8
    25ea:	de 07       	cpc	r29, r30
    25ec:	29 f4       	brne	.+10     	; 0x25f8 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    25ee:	61 e0       	ldi	r22, 0x01	; 1
    25f0:	83 e0       	ldi	r24, 0x03	; 3
    25f2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    25f6:	f2 c0       	rjmp	.+484    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    25f8:	c1 15       	cp	r28, r1
    25fa:	f9 e0       	ldi	r31, 0x09	; 9
    25fc:	df 07       	cpc	r29, r31
    25fe:	29 f4       	brne	.+10     	; 0x260a <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	84 e0       	ldi	r24, 0x04	; 4
    2604:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2608:	e9 c0       	rjmp	.+466    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    260a:	c1 15       	cp	r28, r1
    260c:	8a e0       	ldi	r24, 0x0A	; 10
    260e:	d8 07       	cpc	r29, r24
    2610:	29 f4       	brne	.+10     	; 0x261c <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	85 e0       	ldi	r24, 0x05	; 5
    2616:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    261a:	e0 c0       	rjmp	.+448    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    261c:	c1 15       	cp	r28, r1
    261e:	eb e0       	ldi	r30, 0x0B	; 11
    2620:	de 07       	cpc	r29, r30
    2622:	29 f4       	brne	.+10     	; 0x262e <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	86 e0       	ldi	r24, 0x06	; 6
    2628:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    262c:	d7 c0       	rjmp	.+430    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    262e:	c0 34       	cpi	r28, 0x40	; 64
    2630:	f8 e0       	ldi	r31, 0x08	; 8
    2632:	df 07       	cpc	r29, r31
    2634:	29 f4       	brne	.+10     	; 0x2640 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2636:	62 e0       	ldi	r22, 0x02	; 2
    2638:	83 e0       	ldi	r24, 0x03	; 3
    263a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    263e:	ce c0       	rjmp	.+412    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2640:	c0 34       	cpi	r28, 0x40	; 64
    2642:	89 e0       	ldi	r24, 0x09	; 9
    2644:	d8 07       	cpc	r29, r24
    2646:	29 f4       	brne	.+10     	; 0x2652 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2648:	62 e0       	ldi	r22, 0x02	; 2
    264a:	84 e0       	ldi	r24, 0x04	; 4
    264c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2650:	c5 c0       	rjmp	.+394    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2652:	c0 34       	cpi	r28, 0x40	; 64
    2654:	ea e0       	ldi	r30, 0x0A	; 10
    2656:	de 07       	cpc	r29, r30
    2658:	29 f4       	brne	.+10     	; 0x2664 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    265a:	62 e0       	ldi	r22, 0x02	; 2
    265c:	85 e0       	ldi	r24, 0x05	; 5
    265e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2662:	bc c0       	rjmp	.+376    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2664:	c0 34       	cpi	r28, 0x40	; 64
    2666:	fb e0       	ldi	r31, 0x0B	; 11
    2668:	df 07       	cpc	r29, r31
    266a:	29 f4       	brne	.+10     	; 0x2676 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	86 e0       	ldi	r24, 0x06	; 6
    2670:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2674:	b3 c0       	rjmp	.+358    	; 0x27dc <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2676:	c0 39       	cpi	r28, 0x90	; 144
    2678:	88 e0       	ldi	r24, 0x08	; 8
    267a:	d8 07       	cpc	r29, r24
    267c:	29 f4       	brne	.+10     	; 0x2688 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    267e:	64 e0       	ldi	r22, 0x04	; 4
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2686:	aa c0       	rjmp	.+340    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2688:	c0 39       	cpi	r28, 0x90	; 144
    268a:	e9 e0       	ldi	r30, 0x09	; 9
    268c:	de 07       	cpc	r29, r30
    268e:	29 f4       	brne	.+10     	; 0x269a <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2690:	64 e0       	ldi	r22, 0x04	; 4
    2692:	84 e0       	ldi	r24, 0x04	; 4
    2694:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2698:	a1 c0       	rjmp	.+322    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    269a:	c0 39       	cpi	r28, 0x90	; 144
    269c:	fa e0       	ldi	r31, 0x0A	; 10
    269e:	df 07       	cpc	r29, r31
    26a0:	29 f4       	brne	.+10     	; 0x26ac <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    26a2:	64 e0       	ldi	r22, 0x04	; 4
    26a4:	85 e0       	ldi	r24, 0x05	; 5
    26a6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    26aa:	98 c0       	rjmp	.+304    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    26ac:	c0 39       	cpi	r28, 0x90	; 144
    26ae:	8b e0       	ldi	r24, 0x0B	; 11
    26b0:	d8 07       	cpc	r29, r24
    26b2:	29 f4       	brne	.+10     	; 0x26be <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    26b4:	64 e0       	ldi	r22, 0x04	; 4
    26b6:	86 e0       	ldi	r24, 0x06	; 6
    26b8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    26bc:	8f c0       	rjmp	.+286    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    26be:	c0 3c       	cpi	r28, 0xC0	; 192
    26c0:	e8 e0       	ldi	r30, 0x08	; 8
    26c2:	de 07       	cpc	r29, r30
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    26c6:	68 e0       	ldi	r22, 0x08	; 8
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    26ce:	86 c0       	rjmp	.+268    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    26d0:	c0 3c       	cpi	r28, 0xC0	; 192
    26d2:	f9 e0       	ldi	r31, 0x09	; 9
    26d4:	df 07       	cpc	r29, r31
    26d6:	29 f4       	brne	.+10     	; 0x26e2 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    26d8:	68 e0       	ldi	r22, 0x08	; 8
    26da:	84 e0       	ldi	r24, 0x04	; 4
    26dc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    26e0:	7d c0       	rjmp	.+250    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    26e2:	c0 3c       	cpi	r28, 0xC0	; 192
    26e4:	8a e0       	ldi	r24, 0x0A	; 10
    26e6:	d8 07       	cpc	r29, r24
    26e8:	29 f4       	brne	.+10     	; 0x26f4 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    26ea:	68 e0       	ldi	r22, 0x08	; 8
    26ec:	85 e0       	ldi	r24, 0x05	; 5
    26ee:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    26f2:	74 c0       	rjmp	.+232    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    26f4:	c0 3c       	cpi	r28, 0xC0	; 192
    26f6:	eb e0       	ldi	r30, 0x0B	; 11
    26f8:	de 07       	cpc	r29, r30
    26fa:	29 f4       	brne	.+10     	; 0x2706 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    26fc:	68 e0       	ldi	r22, 0x08	; 8
    26fe:	86 e0       	ldi	r24, 0x06	; 6
    2700:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2704:	6b c0       	rjmp	.+214    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2706:	c0 3a       	cpi	r28, 0xA0	; 160
    2708:	f8 e0       	ldi	r31, 0x08	; 8
    270a:	df 07       	cpc	r29, r31
    270c:	29 f4       	brne	.+10     	; 0x2718 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    270e:	60 e1       	ldi	r22, 0x10	; 16
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2716:	62 c0       	rjmp	.+196    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2718:	c0 3a       	cpi	r28, 0xA0	; 160
    271a:	89 e0       	ldi	r24, 0x09	; 9
    271c:	d8 07       	cpc	r29, r24
    271e:	29 f4       	brne	.+10     	; 0x272a <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2720:	60 e1       	ldi	r22, 0x10	; 16
    2722:	84 e0       	ldi	r24, 0x04	; 4
    2724:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2728:	59 c0       	rjmp	.+178    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    272a:	c0 3a       	cpi	r28, 0xA0	; 160
    272c:	ea e0       	ldi	r30, 0x0A	; 10
    272e:	de 07       	cpc	r29, r30
    2730:	29 f4       	brne	.+10     	; 0x273c <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2732:	60 e1       	ldi	r22, 0x10	; 16
    2734:	85 e0       	ldi	r24, 0x05	; 5
    2736:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    273a:	50 c0       	rjmp	.+160    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    273c:	c0 3a       	cpi	r28, 0xA0	; 160
    273e:	fb e0       	ldi	r31, 0x0B	; 11
    2740:	df 07       	cpc	r29, r31
    2742:	29 f4       	brne	.+10     	; 0x274e <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2744:	60 e1       	ldi	r22, 0x10	; 16
    2746:	86 e0       	ldi	r24, 0x06	; 6
    2748:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    274c:	47 c0       	rjmp	.+142    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    274e:	c0 3b       	cpi	r28, 0xB0	; 176
    2750:	88 e0       	ldi	r24, 0x08	; 8
    2752:	d8 07       	cpc	r29, r24
    2754:	29 f4       	brne	.+10     	; 0x2760 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2756:	60 e2       	ldi	r22, 0x20	; 32
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    275e:	3e c0       	rjmp	.+124    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2760:	c0 3b       	cpi	r28, 0xB0	; 176
    2762:	e9 e0       	ldi	r30, 0x09	; 9
    2764:	de 07       	cpc	r29, r30
    2766:	29 f4       	brne	.+10     	; 0x2772 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2768:	60 e2       	ldi	r22, 0x20	; 32
    276a:	84 e0       	ldi	r24, 0x04	; 4
    276c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2770:	35 c0       	rjmp	.+106    	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2772:	c0 3b       	cpi	r28, 0xB0	; 176
    2774:	fa e0       	ldi	r31, 0x0A	; 10
    2776:	df 07       	cpc	r29, r31
    2778:	29 f4       	brne	.+10     	; 0x2784 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    277a:	60 e2       	ldi	r22, 0x20	; 32
    277c:	85 e0       	ldi	r24, 0x05	; 5
    277e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2782:	2c c0       	rjmp	.+88     	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2784:	c0 3b       	cpi	r28, 0xB0	; 176
    2786:	8b e0       	ldi	r24, 0x0B	; 11
    2788:	d8 07       	cpc	r29, r24
    278a:	29 f4       	brne	.+10     	; 0x2796 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    278c:	60 e2       	ldi	r22, 0x20	; 32
    278e:	86 e0       	ldi	r24, 0x06	; 6
    2790:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2794:	23 c0       	rjmp	.+70     	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2796:	c0 38       	cpi	r28, 0x80	; 128
    2798:	e4 e0       	ldi	r30, 0x04	; 4
    279a:	de 07       	cpc	r29, r30
    279c:	29 f4       	brne	.+10     	; 0x27a8 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    279e:	60 e4       	ldi	r22, 0x40	; 64
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    27a6:	1a c0       	rjmp	.+52     	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    27a8:	c0 39       	cpi	r28, 0x90	; 144
    27aa:	f4 e0       	ldi	r31, 0x04	; 4
    27ac:	df 07       	cpc	r29, r31
    27ae:	29 f4       	brne	.+10     	; 0x27ba <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    27b0:	60 e4       	ldi	r22, 0x40	; 64
    27b2:	84 e0       	ldi	r24, 0x04	; 4
    27b4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    27b8:	11 c0       	rjmp	.+34     	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    27ba:	c0 3a       	cpi	r28, 0xA0	; 160
    27bc:	84 e0       	ldi	r24, 0x04	; 4
    27be:	d8 07       	cpc	r29, r24
    27c0:	29 f4       	brne	.+10     	; 0x27cc <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    27c2:	60 e4       	ldi	r22, 0x40	; 64
    27c4:	85 e0       	ldi	r24, 0x05	; 5
    27c6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    27ca:	08 c0       	rjmp	.+16     	; 0x27dc <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    27cc:	c0 3b       	cpi	r28, 0xB0	; 176
    27ce:	e4 e0       	ldi	r30, 0x04	; 4
    27d0:	de 07       	cpc	r29, r30
    27d2:	21 f4       	brne	.+8      	; 0x27dc <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    27d4:	60 e4       	ldi	r22, 0x40	; 64
    27d6:	86 e0       	ldi	r24, 0x06	; 6
    27d8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	8f 73       	andi	r24, 0x3F	; 63
    27e0:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    27e2:	f8 01       	movw	r30, r16
    27e4:	95 81       	ldd	r25, Z+5	; 0x05
    27e6:	84 81       	ldd	r24, Z+4	; 0x04
    27e8:	89 2b       	or	r24, r25
    27ea:	96 81       	ldd	r25, Z+6	; 0x06
    27ec:	91 11       	cpse	r25, r1
    27ee:	98 e0       	ldi	r25, 0x08	; 8
    27f0:	89 2b       	or	r24, r25
    27f2:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    27f4:	f8 01       	movw	r30, r16
    27f6:	40 81       	ld	r20, Z
    27f8:	51 81       	ldd	r21, Z+1	; 0x01
    27fa:	62 81       	ldd	r22, Z+2	; 0x02
    27fc:	73 81       	ldd	r23, Z+3	; 0x03
    27fe:	00 e0       	ldi	r16, 0x00	; 0
    2800:	18 e4       	ldi	r17, 0x48	; 72
    2802:	28 ee       	ldi	r18, 0xE8	; 232
    2804:	31 e0       	ldi	r19, 0x01	; 1
    2806:	ce 01       	movw	r24, r28
    2808:	70 dd       	rcall	.-1312   	; 0x22ea <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	98 60       	ori	r25, 0x08	; 8
    280e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	90 61       	ori	r25, 0x10	; 16
    2814:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	08 95       	ret

00002820 <u16BuffInit>:
#include <asf.h>
#include "RingBuff.h"

//the user initializes a p_bstru variable and passes it into the buff init and they can use the below functions to store data in it.
void u16BuffInit(p_bstru * P2_bstru)
{
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	ec 01       	movw	r28, r24
	printf("initfunction called\n");
    282a:	88 e2       	ldi	r24, 0x28	; 40
    282c:	90 e2       	ldi	r25, 0x20	; 32
    282e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <puts>
	*P2_bstru=malloc(sizeof(struct uint16RingBuff));
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 67 1c 	call	0x38ce	; 0x38ce <malloc>
    283a:	8c 01       	movw	r16, r24
    283c:	88 83       	st	Y, r24
    283e:	99 83       	std	Y+1, r25	; 0x01
	(*P2_bstru)->lastItem=BUFSIZE;
    2840:	8a e0       	ldi	r24, 0x0A	; 10
    2842:	f8 01       	movw	r30, r16
    2844:	82 83       	std	Z+2, r24	; 0x02
	//initializes all items to zero
	(*P2_bstru)->data=malloc(sizeof(uint16_t)*BUFSIZE);
    2846:	84 e1       	ldi	r24, 0x14	; 20
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <malloc>
    284e:	f8 01       	movw	r30, r16
    2850:	80 83       	st	Z, r24
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<BUFSIZE;i++)
	{
		(*P2_bstru)->data[i]=0;
    2858:	e8 81       	ld	r30, Y
    285a:	f9 81       	ldd	r31, Y+1	; 0x01
    285c:	01 90       	ld	r0, Z+
    285e:	f0 81       	ld	r31, Z
    2860:	e0 2d       	mov	r30, r0
    2862:	e8 0f       	add	r30, r24
    2864:	f9 1f       	adc	r31, r25
    2866:	10 82       	st	Z, r1
    2868:	11 82       	std	Z+1, r1	; 0x01
    286a:	02 96       	adiw	r24, 0x02	; 2
	printf("initfunction called\n");
	*P2_bstru=malloc(sizeof(struct uint16RingBuff));
	(*P2_bstru)->lastItem=BUFSIZE;
	//initializes all items to zero
	(*P2_bstru)->data=malloc(sizeof(uint16_t)*BUFSIZE);
	for(int i=0;i<BUFSIZE;i++)
    286c:	84 31       	cpi	r24, 0x14	; 20
    286e:	91 05       	cpc	r25, r1
    2870:	99 f7       	brne	.-26     	; 0x2858 <u16BuffInit+0x38>
	{
		(*P2_bstru)->data[i]=0;
	}
	
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <putu16>:
//adds an item to the ring buffer and increments last item variable
void putu16(p_bstru d_struct,uint16_t data)
{
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
	if(d_struct==NULL)return;
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	e1 f1       	breq	.+120    	; 0x2900 <putu16+0x84>
    2888:	07 2f       	mov	r16, r23
    288a:	16 2f       	mov	r17, r22
    288c:	ec 01       	movw	r28, r24
	d_struct->lastItem=(d_struct->lastItem+1)%BUFSIZE;
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	6a e0       	ldi	r22, 0x0A	; 10
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	c0 d7       	rcall	.+3968   	; 0x381a <__divmodhi4>
    289a:	8a 83       	std	Y+2, r24	; 0x02
	printf("\n\nlast item index is : %i",d_struct->lastItem);
    289c:	99 27       	eor	r25, r25
    289e:	9f 93       	push	r25
    28a0:	8f 93       	push	r24
    28a2:	8c e3       	ldi	r24, 0x3C	; 60
    28a4:	90 e2       	ldi	r25, 0x20	; 32
    28a6:	9f 93       	push	r25
    28a8:	8f 93       	push	r24
    28aa:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <printf>
	d_struct->data[d_struct->lastItem]=data;
    28ae:	ea 81       	ldd	r30, Y+2	; 0x02
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	88 81       	ld	r24, Y
    28b8:	99 81       	ldd	r25, Y+1	; 0x01
    28ba:	e8 0f       	add	r30, r24
    28bc:	f9 1f       	adc	r31, r25
    28be:	10 83       	st	Z, r17
    28c0:	01 83       	std	Z+1, r16	; 0x01
	printf("\n\n data written is %i",data);
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	86 e5       	ldi	r24, 0x56	; 86
    28c8:	90 e2       	ldi	r25, 0x20	; 32
    28ca:	9f 93       	push	r25
    28cc:	8f 93       	push	r24
    28ce:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <printf>
	printf("\n\ndata is %i",d_struct->data[d_struct->lastItem]);
    28d2:	ea 81       	ldd	r30, Y+2	; 0x02
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	ee 0f       	add	r30, r30
    28d8:	ff 1f       	adc	r31, r31
    28da:	88 81       	ld	r24, Y
    28dc:	99 81       	ldd	r25, Y+1	; 0x01
    28de:	e8 0f       	add	r30, r24
    28e0:	f9 1f       	adc	r31, r25
    28e2:	81 81       	ldd	r24, Z+1	; 0x01
    28e4:	8f 93       	push	r24
    28e6:	80 81       	ld	r24, Z
    28e8:	8f 93       	push	r24
    28ea:	8c e6       	ldi	r24, 0x6C	; 108
    28ec:	90 e2       	ldi	r25, 0x20	; 32
    28ee:	9f 93       	push	r25
    28f0:	8f 93       	push	r24
    28f2:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <printf>
    28f6:	8d b7       	in	r24, 0x3d	; 61
    28f8:	9e b7       	in	r25, 0x3e	; 62
    28fa:	0c 96       	adiw	r24, 0x0c	; 12
    28fc:	8d bf       	out	0x3d, r24	; 61
    28fe:	9e bf       	out	0x3e, r25	; 62
}
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	08 95       	ret

0000290a <getu16>:
//gets item starting at most recent index and going back
uint16_t getu16(p_bstru d_struct,int16_t index)
{
    290a:	fc 01       	movw	r30, r24
	if(d_struct==NULL)return 0;
    290c:	89 2b       	or	r24, r25
    290e:	a1 f0       	breq	.+40     	; 0x2938 <getu16+0x2e>
	index=((int16_t)d_struct->lastItem)-index;
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	86 1b       	sub	r24, r22
    2916:	97 0b       	sbc	r25, r23
	//wraps around if index is greater than the position of the last item
	while(index<0)
    2918:	12 f4       	brpl	.+4      	; 0x291e <getu16+0x14>
	{
		index+=BUFSIZE;
    291a:	0a 96       	adiw	r24, 0x0a	; 10
uint16_t getu16(p_bstru d_struct,int16_t index)
{
	if(d_struct==NULL)return 0;
	index=((int16_t)d_struct->lastItem)-index;
	//wraps around if index is greater than the position of the last item
	while(index<0)
    291c:	f2 f3       	brmi	.-4      	; 0x291a <getu16+0x10>
	{
		index+=BUFSIZE;
	}
	return d_struct->data[index%BUFSIZE];
    291e:	6a e0       	ldi	r22, 0x0A	; 10
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	7b d7       	rcall	.+3830   	; 0x381a <__divmodhi4>
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	01 90       	ld	r0, Z+
    292a:	f0 81       	ld	r31, Z
    292c:	e0 2d       	mov	r30, r0
    292e:	e8 0f       	add	r30, r24
    2930:	f9 1f       	adc	r31, r25
    2932:	80 81       	ld	r24, Z
    2934:	91 81       	ldd	r25, Z+1	; 0x01
    2936:	08 95       	ret
	printf("\n\ndata is %i",d_struct->data[d_struct->lastItem]);
}
//gets item starting at most recent index and going back
uint16_t getu16(p_bstru d_struct,int16_t index)
{
	if(d_struct==NULL)return 0;
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
	while(index<0)
	{
		index+=BUFSIZE;
	}
	return d_struct->data[index%BUFSIZE];
}
    293c:	08 95       	ret

0000293e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2948:	c6 2f       	mov	r28, r22
    294a:	d0 e0       	ldi	r29, 0x00	; 0
    294c:	de 01       	movw	r26, r28
    294e:	02 2e       	mov	r0, r18
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <ioport_configure_port_pin+0x18>
    2952:	b5 95       	asr	r27
    2954:	a7 95       	ror	r26
    2956:	0a 94       	dec	r0
    2958:	e2 f7       	brpl	.-8      	; 0x2952 <ioport_configure_port_pin+0x14>
    295a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    295c:	50 8b       	std	Z+16, r21	; 0x10
    295e:	2f 5f       	subi	r18, 0xFF	; 255
    2960:	3f 4f       	sbci	r19, 0xFF	; 255
    2962:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2964:	28 30       	cpi	r18, 0x08	; 8
    2966:	31 05       	cpc	r19, r1
    2968:	89 f7       	brne	.-30     	; 0x294c <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    296a:	40 ff       	sbrs	r20, 0
    296c:	0a c0       	rjmp	.+20     	; 0x2982 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    296e:	41 ff       	sbrs	r20, 1
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2972:	fc 01       	movw	r30, r24
    2974:	65 83       	std	Z+5, r22	; 0x05
    2976:	02 c0       	rjmp	.+4      	; 0x297c <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2978:	fc 01       	movw	r30, r24
    297a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    297c:	fc 01       	movw	r30, r24
    297e:	61 83       	std	Z+1, r22	; 0x01
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2982:	fc 01       	movw	r30, r24
    2984:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    298c:	43 e0       	ldi	r20, 0x03	; 3
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	68 e0       	ldi	r22, 0x08	; 8
    2992:	80 ec       	ldi	r24, 0xC0	; 192
    2994:	97 e0       	ldi	r25, 0x07	; 7
    2996:	d3 df       	rcall	.-90     	; 0x293e <ioport_configure_port_pin>
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	58 e1       	ldi	r21, 0x18	; 24
    299c:	64 e0       	ldi	r22, 0x04	; 4
    299e:	80 ec       	ldi	r24, 0xC0	; 192
    29a0:	97 e0       	ldi	r25, 0x07	; 7
    29a2:	cd cf       	rjmp	.-102    	; 0x293e <ioport_configure_port_pin>
    29a4:	08 95       	ret

000029a6 <I2CInit>:
	twi_master_setup(&MYI2C,&opt);//sets up master
}
uint8_t readBusad()
{
	return busAddress;
}
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	29 97       	sbiw	r28, 0x09	; 9
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	40 93 36 24 	sts	0x2436, r20	; 0x802436 <busAddress>
    29bc:	8e 01       	movw	r16, r28
    29be:	0f 5f       	subi	r16, 0xFF	; 255
    29c0:	1f 4f       	sbci	r17, 0xFF	; 255
    29c2:	29 e0       	ldi	r18, 0x09	; 9
    29c4:	f8 01       	movw	r30, r16
    29c6:	11 92       	st	Z+, r1
    29c8:	2a 95       	dec	r18
    29ca:	e9 f7       	brne	.-6      	; 0x29c6 <I2CInit+0x20>
    29cc:	69 83       	std	Y+1, r22	; 0x01
    29ce:	7a 83       	std	Y+2, r23	; 0x02
    29d0:	8b 83       	std	Y+3, r24	; 0x03
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	49 87       	std	Y+9, r20	; 0x09
    29d6:	9b 01       	movw	r18, r22
    29d8:	ac 01       	movw	r20, r24
    29da:	22 0f       	add	r18, r18
    29dc:	33 1f       	adc	r19, r19
    29de:	44 1f       	adc	r20, r20
    29e0:	55 1f       	adc	r21, r21
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	78 e4       	ldi	r23, 0x48	; 72
    29e6:	88 ee       	ldi	r24, 0xE8	; 232
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	2a d7       	rcall	.+3668   	; 0x3840 <__udivmodsi4>
    29ec:	da 01       	movw	r26, r20
    29ee:	c9 01       	movw	r24, r18
    29f0:	05 97       	sbiw	r24, 0x05	; 5
    29f2:	a1 09       	sbc	r26, r1
    29f4:	b1 09       	sbc	r27, r1
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	af 83       	std	Y+7, r26	; 0x07
    29fc:	b8 87       	std	Y+8, r27	; 0x08
    29fe:	60 e4       	ldi	r22, 0x40	; 64
    2a00:	83 e0       	ldi	r24, 0x03	; 3
    2a02:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2a06:	b8 01       	movw	r22, r16
    2a08:	80 e8       	ldi	r24, 0x80	; 128
    2a0a:	94 e0       	ldi	r25, 0x04	; 4
    2a0c:	e7 db       	rcall	.-2098   	; 0x21dc <twi_master_init>
    2a0e:	29 96       	adiw	r28, 0x09	; 9
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <twi_write>:
// writes to a device using two wire interface. the address is the seven bit identifier for the specific device
//data is an array of data that you wish to transfer. 
void twi_write(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	2b 97       	sbiw	r28, 0x0b	; 11
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	de bf       	out	0x3e, r29	; 62
	twi_package_t packet_write = 
    2a30:	fe 01       	movw	r30, r28
    2a32:	31 96       	adiw	r30, 0x01	; 1
    2a34:	2b e0       	ldi	r18, 0x0B	; 11
    2a36:	df 01       	movw	r26, r30
    2a38:	1d 92       	st	X+, r1
    2a3a:	2a 95       	dec	r18
    2a3c:	e9 f7       	brne	.-6      	; 0x2a38 <twi_write+0x1a>
    2a3e:	69 83       	std	Y+1, r22	; 0x01
    2a40:	4a 83       	std	Y+2, r20	; 0x02
    2a42:	21 e0       	ldi	r18, 0x01	; 1
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	2d 83       	std	Y+5, r18	; 0x05
    2a48:	3e 83       	std	Y+6, r19	; 0x06
    2a4a:	8f 83       	std	Y+7, r24	; 0x07
    2a4c:	98 87       	std	Y+8, r25	; 0x08
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	89 87       	std	Y+9, r24	; 0x09
    2a54:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,      // TWI slave bus address
		.buffer       = Data, // transfer data source buffer
		.length       = sizeof(Data)  // transfer data size (bytes)
	};
	while (twi_master_write(&MYI2C, &packet_write) != TWI_SUCCESS) printf("fail");//transfers data and waits until transfer is finished to do anything else
    2a56:	09 e7       	ldi	r16, 0x79	; 121
    2a58:	10 e2       	ldi	r17, 0x20	; 32
    2a5a:	06 c0       	rjmp	.+12     	; 0x2a68 <twi_write+0x4a>
    2a5c:	1f 93       	push	r17
    2a5e:	0f 93       	push	r16
    2a60:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <printf>
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	be 01       	movw	r22, r28
    2a6c:	6f 5f       	subi	r22, 0xFF	; 255
    2a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a70:	80 e8       	ldi	r24, 0x80	; 128
    2a72:	94 e0       	ldi	r25, 0x04	; 4
    2a74:	c8 db       	rcall	.-2160   	; 0x2206 <twi_master_transfer>
    2a76:	81 11       	cpse	r24, r1
    2a78:	f1 cf       	rjmp	.-30     	; 0x2a5c <twi_write+0x3e>
}
    2a7a:	2b 96       	adiw	r28, 0x0b	; 11
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	08 95       	ret

00002a8a <twi_read>:

//reads using two wire interface. address is the 7 bit identifier for each device. Data is the array the data will be stored in.
//returns the status of the transfer
void twi_read(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	2b 97       	sbiw	r28, 0x0b	; 11
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	de bf       	out	0x3e, r29	; 62
	twi_package_t packet_read = 
    2a98:	fe 01       	movw	r30, r28
    2a9a:	31 96       	adiw	r30, 0x01	; 1
    2a9c:	2b e0       	ldi	r18, 0x0B	; 11
    2a9e:	df 01       	movw	r26, r30
    2aa0:	1d 92       	st	X+, r1
    2aa2:	2a 95       	dec	r18
    2aa4:	e9 f7       	brne	.-6      	; 0x2aa0 <twi_read+0x16>
    2aa6:	69 83       	std	Y+1, r22	; 0x01
    2aa8:	4a 83       	std	Y+2, r20	; 0x02
    2aaa:	21 e0       	ldi	r18, 0x01	; 1
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	2d 83       	std	Y+5, r18	; 0x05
    2ab0:	3e 83       	std	Y+6, r19	; 0x06
    2ab2:	8f 83       	std	Y+7, r24	; 0x07
    2ab4:	98 87       	std	Y+8, r25	; 0x08
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	89 87       	std	Y+9, r24	; 0x09
    2abc:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	bf 01       	movw	r22, r30
    2ac2:	80 e8       	ldi	r24, 0x80	; 128
    2ac4:	94 e0       	ldi	r25, 0x04	; 4
    2ac6:	9f db       	rcall	.-2242   	; 0x2206 <twi_master_transfer>
	};
	twi_master_read(&MYI2C, &packet_read); //preform read and return the status of the read
	//Data = packet_read.buffer;
	//printf("%d",status);
	
}
    2ac8:	2b 96       	adiw	r28, 0x0b	; 11
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2ad6:	61 50       	subi	r22, 0x01	; 1
    2ad8:	71 09       	sbc	r23, r1
    2ada:	81 09       	sbc	r24, r1
    2adc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2ade:	61 15       	cp	r22, r1
    2ae0:	71 05       	cpc	r23, r1
    2ae2:	81 05       	cpc	r24, r1
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	b9 f7       	brne	.-18     	; 0x2ad6 <__portable_avr_delay_cycles+0x2>
    2ae8:	08 95       	ret

00002aea <BNO_Write>:
#include "I2CDriver.h"


//writes data to the to the imu 
void BNO_Write(uint8_t *data,uint8_t memAddress)
{
    2aea:	46 2f       	mov	r20, r22
	twi_write(data,BN0_ADDR,memAddress);//writes data to the sensor
    2aec:	69 e2       	ldi	r22, 0x29	; 41
    2aee:	97 cf       	rjmp	.-210    	; 0x2a1e <twi_write>
    2af0:	08 95       	ret

00002af2 <BNO_Read>:
}


void BNO_Read(uint8_t * data,uint8_t memAddress)
{
    2af2:	46 2f       	mov	r20, r22
	twi_read(data,BN0_ADDR,memAddress);
    2af4:	69 e2       	ldi	r22, 0x29	; 41
    2af6:	c9 cf       	rjmp	.-110    	; 0x2a8a <twi_read>
    2af8:	08 95       	ret

00002afa <WhoAmIBNO>:
}

uint16_t WhoAmIBNO()
{
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	1f 92       	push	r1
    2b02:	1f 92       	push	r1
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t dataMSB = 0xFF;
    2b08:	1f ef       	ldi	r17, 0xFF	; 255
    2b0a:	19 83       	std	Y+1, r17	; 0x01
	BNO_Read(&dataMSB,0x0C);
    2b0c:	6c e0       	ldi	r22, 0x0C	; 12
    2b0e:	ce 01       	movw	r24, r28
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	ef df       	rcall	.-34     	; 0x2af2 <BNO_Read>
	uint8_t dataLSB = 0xFF;
    2b14:	1a 83       	std	Y+2, r17	; 0x02
	BNO_Read(&dataLSB, 0x0D);
    2b16:	6d e0       	ldi	r22, 0x0D	; 13
    2b18:	ce 01       	movw	r24, r28
    2b1a:	02 96       	adiw	r24, 0x02	; 2
    2b1c:	ea df       	rcall	.-44     	; 0x2af2 <BNO_Read>
	int16_t data = ((int16_t)dataMSB) << 8 + (uint16_t)dataLSB;
	return data;
    2b1e:	29 81       	ldd	r18, Y+1	; 0x01
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	98 5f       	subi	r25, 0xF8	; 248
}
    2b26:	a9 01       	movw	r20, r18
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <WhoAmIBNO+0x34>
    2b2a:	44 0f       	add	r20, r20
    2b2c:	55 1f       	adc	r21, r21
    2b2e:	9a 95       	dec	r25
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <WhoAmIBNO+0x30>
    2b32:	ca 01       	movw	r24, r20
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	08 95       	ret

00002b40 <BNO055_Config>:

void BNO055_Config()
{
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
	//sets the page to page zero
	uint8_t data=0;
    2b4a:	19 82       	std	Y+1, r1	; 0x01
	BNO_Write(&data,BNO055_PAGE_ID_ADDR);
    2b4c:	67 e0       	ldi	r22, 0x07	; 7
    2b4e:	ce 01       	movw	r24, r28
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	cb df       	rcall	.-106    	; 0x2aea <BNO_Write>
	//sets mode to config mode
	data=BNO055_OPERATION_MODE_CONFIG;
    2b54:	19 82       	std	Y+1, r1	; 0x01
	BNO_Write (&data, BNO055_OPR_MODE_ADDR);
    2b56:	6d e3       	ldi	r22, 0x3D	; 61
    2b58:	ce 01       	movw	r24, r28
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	c6 df       	rcall	.-116    	; 0x2aea <BNO_Write>
	delay_ms(22);
    2b5e:	66 e5       	ldi	r22, 0x56	; 86
    2b60:	7a ec       	ldi	r23, 0xCA	; 202
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	b6 df       	rcall	.-148    	; 0x2ad4 <__portable_avr_delay_cycles>
	
	//select units
	 data=UNIT_SEL;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	89 83       	std	Y+1, r24	; 0x01
	 
	BNO_Write(&data,BNO055_UNIT_SEL_ADDR);
    2b6c:	6b e3       	ldi	r22, 0x3B	; 59
    2b6e:	ce 01       	movw	r24, r28
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	bb df       	rcall	.-138    	; 0x2aea <BNO_Write>
	
	
	//sets mode to fusion bno
	data=BNO055_OPERATION_MODE_NDOF;
    2b74:	8c e0       	ldi	r24, 0x0C	; 12
	BNO_Write (&data,BNO055_OPR_MODE_ADDR);
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	6d e3       	ldi	r22, 0x3D	; 61
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	01 96       	adiw	r24, 0x01	; 1
    2b7e:	b5 df       	rcall	.-150    	; 0x2aea <BNO_Write>
	
}
    2b80:	0f 90       	pop	r0
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	eb 01       	movw	r28, r22
    2b8e:	a7 db       	rcall	.-2226   	; 0x22de <usart_getchar>
    2b90:	88 83       	st	Y, r24
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <usart_serial_putchar>:
    2b98:	9a cb       	rjmp	.-2252   	; 0x22ce <usart_putchar>
    2b9a:	08 95       	ret

00002b9c <uart_init>:
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	27 97       	sbiw	r28, 0x07	; 7
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	7c 01       	movw	r14, r24
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	86 81       	ldd	r24, Z+6	; 0x06
    2bb8:	97 81       	ldd	r25, Z+7	; 0x07
    2bba:	a0 85       	ldd	r26, Z+8	; 0x08
    2bbc:	b1 85       	ldd	r27, Z+9	; 0x09
    2bbe:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <usart_options.6317>
    2bc2:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <usart_options.6317+0x1>
    2bc6:	a0 93 16 20 	sts	0x2016, r26	; 0x802016 <usart_options.6317+0x2>
    2bca:	b0 93 17 20 	sts	0x2017, r27	; 0x802017 <usart_options.6317+0x3>
    2bce:	01 90       	ld	r0, Z+
    2bd0:	f0 81       	ld	r31, Z
    2bd2:	e0 2d       	mov	r30, r0
    2bd4:	90 81       	ld	r25, Z
    2bd6:	d7 01       	movw	r26, r14
    2bd8:	15 96       	adiw	r26, 0x05	; 5
    2bda:	8c 91       	ld	r24, X
    2bdc:	15 97       	sbiw	r26, 0x05	; 5
    2bde:	89 2b       	or	r24, r25
    2be0:	80 83       	st	Z, r24
    2be2:	ed 91       	ld	r30, X+
    2be4:	fc 91       	ld	r31, X
    2be6:	11 97       	sbiw	r26, 0x01	; 1
    2be8:	94 81       	ldd	r25, Z+4	; 0x04
    2bea:	15 96       	adiw	r26, 0x05	; 5
    2bec:	8c 91       	ld	r24, X
    2bee:	15 97       	sbiw	r26, 0x05	; 5
    2bf0:	89 2b       	or	r24, r25
    2bf2:	84 83       	std	Z+4, r24	; 0x04
    2bf4:	ed 91       	ld	r30, X+
    2bf6:	fc 91       	ld	r31, X
    2bf8:	11 97       	sbiw	r26, 0x01	; 1
    2bfa:	90 81       	ld	r25, Z
    2bfc:	14 96       	adiw	r26, 0x04	; 4
    2bfe:	8c 91       	ld	r24, X
    2c00:	14 97       	sbiw	r26, 0x04	; 4
    2c02:	80 95       	com	r24
    2c04:	89 23       	and	r24, r25
    2c06:	80 83       	st	Z, r24
    2c08:	12 96       	adiw	r26, 0x02	; 2
    2c0a:	0d 91       	ld	r16, X+
    2c0c:	1c 91       	ld	r17, X
    2c0e:	13 97       	sbiw	r26, 0x03	; 3
    2c10:	01 15       	cp	r16, r1
    2c12:	11 05       	cpc	r17, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <uart_init+0x7c>
    2c16:	c5 c1       	rjmp	.+906    	; 0x2fa2 <uart_init+0x406>
    2c18:	00 3c       	cpi	r16, 0xC0	; 192
    2c1a:	11 05       	cpc	r17, r1
    2c1c:	29 f4       	brne	.+10     	; 0x2c28 <uart_init+0x8c>
    2c1e:	60 e1       	ldi	r22, 0x10	; 16
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c26:	54 c1       	rjmp	.+680    	; 0x2ed0 <uart_init+0x334>
    2c28:	00 34       	cpi	r16, 0x40	; 64
    2c2a:	b4 e0       	ldi	r27, 0x04	; 4
    2c2c:	1b 07       	cpc	r17, r27
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <uart_init+0x9e>
    2c30:	68 e0       	ldi	r22, 0x08	; 8
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c38:	4b c1       	rjmp	.+662    	; 0x2ed0 <uart_init+0x334>
    2c3a:	01 15       	cp	r16, r1
    2c3c:	e4 e0       	ldi	r30, 0x04	; 4
    2c3e:	1e 07       	cpc	r17, r30
    2c40:	29 f4       	brne	.+10     	; 0x2c4c <uart_init+0xb0>
    2c42:	64 e0       	ldi	r22, 0x04	; 4
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c4a:	42 c1       	rjmp	.+644    	; 0x2ed0 <uart_init+0x334>
    2c4c:	00 38       	cpi	r16, 0x80	; 128
    2c4e:	f1 e0       	ldi	r31, 0x01	; 1
    2c50:	1f 07       	cpc	r17, r31
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <uart_init+0xc2>
    2c54:	62 e0       	ldi	r22, 0x02	; 2
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c5c:	39 c1       	rjmp	.+626    	; 0x2ed0 <uart_init+0x334>
    2c5e:	01 15       	cp	r16, r1
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	18 07       	cpc	r17, r24
    2c64:	29 f4       	brne	.+10     	; 0x2c70 <uart_init+0xd4>
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c6e:	30 c1       	rjmp	.+608    	; 0x2ed0 <uart_init+0x334>
    2c70:	00 38       	cpi	r16, 0x80	; 128
    2c72:	a3 e0       	ldi	r26, 0x03	; 3
    2c74:	1a 07       	cpc	r17, r26
    2c76:	29 f4       	brne	.+10     	; 0x2c82 <uart_init+0xe6>
    2c78:	61 e0       	ldi	r22, 0x01	; 1
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c80:	27 c1       	rjmp	.+590    	; 0x2ed0 <uart_init+0x334>
    2c82:	00 39       	cpi	r16, 0x90	; 144
    2c84:	b3 e0       	ldi	r27, 0x03	; 3
    2c86:	1b 07       	cpc	r17, r27
    2c88:	29 f4       	brne	.+10     	; 0x2c94 <uart_init+0xf8>
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2c92:	1e c1       	rjmp	.+572    	; 0x2ed0 <uart_init+0x334>
    2c94:	01 15       	cp	r16, r1
    2c96:	e2 e0       	ldi	r30, 0x02	; 2
    2c98:	1e 07       	cpc	r17, r30
    2c9a:	29 f4       	brne	.+10     	; 0x2ca6 <uart_init+0x10a>
    2c9c:	62 e0       	ldi	r22, 0x02	; 2
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2ca4:	15 c1       	rjmp	.+554    	; 0x2ed0 <uart_init+0x334>
    2ca6:	00 34       	cpi	r16, 0x40	; 64
    2ca8:	f2 e0       	ldi	r31, 0x02	; 2
    2caa:	1f 07       	cpc	r17, r31
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <uart_init+0x11c>
    2cae:	62 e0       	ldi	r22, 0x02	; 2
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2cb6:	0c c1       	rjmp	.+536    	; 0x2ed0 <uart_init+0x334>
    2cb8:	01 15       	cp	r16, r1
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	18 07       	cpc	r17, r24
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <uart_init+0x12e>
    2cc0:	64 e0       	ldi	r22, 0x04	; 4
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2cc8:	03 c1       	rjmp	.+518    	; 0x2ed0 <uart_init+0x334>
    2cca:	00 32       	cpi	r16, 0x20	; 32
    2ccc:	a3 e0       	ldi	r26, 0x03	; 3
    2cce:	1a 07       	cpc	r17, r26
    2cd0:	29 f4       	brne	.+10     	; 0x2cdc <uart_init+0x140>
    2cd2:	64 e0       	ldi	r22, 0x04	; 4
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2cda:	fa c0       	rjmp	.+500    	; 0x2ed0 <uart_init+0x334>
    2cdc:	01 15       	cp	r16, r1
    2cde:	b8 e0       	ldi	r27, 0x08	; 8
    2ce0:	1b 07       	cpc	r17, r27
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <uart_init+0x152>
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	83 e0       	ldi	r24, 0x03	; 3
    2ce8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2cec:	f1 c0       	rjmp	.+482    	; 0x2ed0 <uart_init+0x334>
    2cee:	01 15       	cp	r16, r1
    2cf0:	e9 e0       	ldi	r30, 0x09	; 9
    2cf2:	1e 07       	cpc	r17, r30
    2cf4:	29 f4       	brne	.+10     	; 0x2d00 <uart_init+0x164>
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	84 e0       	ldi	r24, 0x04	; 4
    2cfa:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2cfe:	e8 c0       	rjmp	.+464    	; 0x2ed0 <uart_init+0x334>
    2d00:	01 15       	cp	r16, r1
    2d02:	fa e0       	ldi	r31, 0x0A	; 10
    2d04:	1f 07       	cpc	r17, r31
    2d06:	29 f4       	brne	.+10     	; 0x2d12 <uart_init+0x176>
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	85 e0       	ldi	r24, 0x05	; 5
    2d0c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d10:	df c0       	rjmp	.+446    	; 0x2ed0 <uart_init+0x334>
    2d12:	01 15       	cp	r16, r1
    2d14:	8b e0       	ldi	r24, 0x0B	; 11
    2d16:	18 07       	cpc	r17, r24
    2d18:	29 f4       	brne	.+10     	; 0x2d24 <uart_init+0x188>
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	86 e0       	ldi	r24, 0x06	; 6
    2d1e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d22:	d6 c0       	rjmp	.+428    	; 0x2ed0 <uart_init+0x334>
    2d24:	00 34       	cpi	r16, 0x40	; 64
    2d26:	a8 e0       	ldi	r26, 0x08	; 8
    2d28:	1a 07       	cpc	r17, r26
    2d2a:	29 f4       	brne	.+10     	; 0x2d36 <uart_init+0x19a>
    2d2c:	62 e0       	ldi	r22, 0x02	; 2
    2d2e:	83 e0       	ldi	r24, 0x03	; 3
    2d30:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d34:	cd c0       	rjmp	.+410    	; 0x2ed0 <uart_init+0x334>
    2d36:	00 34       	cpi	r16, 0x40	; 64
    2d38:	b9 e0       	ldi	r27, 0x09	; 9
    2d3a:	1b 07       	cpc	r17, r27
    2d3c:	29 f4       	brne	.+10     	; 0x2d48 <uart_init+0x1ac>
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d46:	c4 c0       	rjmp	.+392    	; 0x2ed0 <uart_init+0x334>
    2d48:	00 34       	cpi	r16, 0x40	; 64
    2d4a:	ea e0       	ldi	r30, 0x0A	; 10
    2d4c:	1e 07       	cpc	r17, r30
    2d4e:	29 f4       	brne	.+10     	; 0x2d5a <uart_init+0x1be>
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	85 e0       	ldi	r24, 0x05	; 5
    2d54:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d58:	bb c0       	rjmp	.+374    	; 0x2ed0 <uart_init+0x334>
    2d5a:	00 34       	cpi	r16, 0x40	; 64
    2d5c:	fb e0       	ldi	r31, 0x0B	; 11
    2d5e:	1f 07       	cpc	r17, r31
    2d60:	29 f4       	brne	.+10     	; 0x2d6c <uart_init+0x1d0>
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	86 e0       	ldi	r24, 0x06	; 6
    2d66:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d6a:	b2 c0       	rjmp	.+356    	; 0x2ed0 <uart_init+0x334>
    2d6c:	00 39       	cpi	r16, 0x90	; 144
    2d6e:	88 e0       	ldi	r24, 0x08	; 8
    2d70:	18 07       	cpc	r17, r24
    2d72:	29 f4       	brne	.+10     	; 0x2d7e <uart_init+0x1e2>
    2d74:	64 e0       	ldi	r22, 0x04	; 4
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d7c:	a9 c0       	rjmp	.+338    	; 0x2ed0 <uart_init+0x334>
    2d7e:	00 39       	cpi	r16, 0x90	; 144
    2d80:	a9 e0       	ldi	r26, 0x09	; 9
    2d82:	1a 07       	cpc	r17, r26
    2d84:	29 f4       	brne	.+10     	; 0x2d90 <uart_init+0x1f4>
    2d86:	64 e0       	ldi	r22, 0x04	; 4
    2d88:	84 e0       	ldi	r24, 0x04	; 4
    2d8a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2d8e:	a0 c0       	rjmp	.+320    	; 0x2ed0 <uart_init+0x334>
    2d90:	00 39       	cpi	r16, 0x90	; 144
    2d92:	ba e0       	ldi	r27, 0x0A	; 10
    2d94:	1b 07       	cpc	r17, r27
    2d96:	29 f4       	brne	.+10     	; 0x2da2 <uart_init+0x206>
    2d98:	64 e0       	ldi	r22, 0x04	; 4
    2d9a:	85 e0       	ldi	r24, 0x05	; 5
    2d9c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2da0:	97 c0       	rjmp	.+302    	; 0x2ed0 <uart_init+0x334>
    2da2:	00 39       	cpi	r16, 0x90	; 144
    2da4:	eb e0       	ldi	r30, 0x0B	; 11
    2da6:	1e 07       	cpc	r17, r30
    2da8:	29 f4       	brne	.+10     	; 0x2db4 <uart_init+0x218>
    2daa:	64 e0       	ldi	r22, 0x04	; 4
    2dac:	86 e0       	ldi	r24, 0x06	; 6
    2dae:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2db2:	8e c0       	rjmp	.+284    	; 0x2ed0 <uart_init+0x334>
    2db4:	00 3c       	cpi	r16, 0xC0	; 192
    2db6:	f8 e0       	ldi	r31, 0x08	; 8
    2db8:	1f 07       	cpc	r17, r31
    2dba:	29 f4       	brne	.+10     	; 0x2dc6 <uart_init+0x22a>
    2dbc:	68 e0       	ldi	r22, 0x08	; 8
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2dc4:	85 c0       	rjmp	.+266    	; 0x2ed0 <uart_init+0x334>
    2dc6:	00 3c       	cpi	r16, 0xC0	; 192
    2dc8:	89 e0       	ldi	r24, 0x09	; 9
    2dca:	18 07       	cpc	r17, r24
    2dcc:	29 f4       	brne	.+10     	; 0x2dd8 <uart_init+0x23c>
    2dce:	68 e0       	ldi	r22, 0x08	; 8
    2dd0:	84 e0       	ldi	r24, 0x04	; 4
    2dd2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2dd6:	7c c0       	rjmp	.+248    	; 0x2ed0 <uart_init+0x334>
    2dd8:	00 3c       	cpi	r16, 0xC0	; 192
    2dda:	aa e0       	ldi	r26, 0x0A	; 10
    2ddc:	1a 07       	cpc	r17, r26
    2dde:	29 f4       	brne	.+10     	; 0x2dea <uart_init+0x24e>
    2de0:	68 e0       	ldi	r22, 0x08	; 8
    2de2:	85 e0       	ldi	r24, 0x05	; 5
    2de4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2de8:	73 c0       	rjmp	.+230    	; 0x2ed0 <uart_init+0x334>
    2dea:	00 3c       	cpi	r16, 0xC0	; 192
    2dec:	bb e0       	ldi	r27, 0x0B	; 11
    2dee:	1b 07       	cpc	r17, r27
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <uart_init+0x260>
    2df2:	68 e0       	ldi	r22, 0x08	; 8
    2df4:	86 e0       	ldi	r24, 0x06	; 6
    2df6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2dfa:	6a c0       	rjmp	.+212    	; 0x2ed0 <uart_init+0x334>
    2dfc:	00 3a       	cpi	r16, 0xA0	; 160
    2dfe:	e8 e0       	ldi	r30, 0x08	; 8
    2e00:	1e 07       	cpc	r17, r30
    2e02:	29 f4       	brne	.+10     	; 0x2e0e <uart_init+0x272>
    2e04:	60 e1       	ldi	r22, 0x10	; 16
    2e06:	83 e0       	ldi	r24, 0x03	; 3
    2e08:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e0c:	61 c0       	rjmp	.+194    	; 0x2ed0 <uart_init+0x334>
    2e0e:	00 3a       	cpi	r16, 0xA0	; 160
    2e10:	f9 e0       	ldi	r31, 0x09	; 9
    2e12:	1f 07       	cpc	r17, r31
    2e14:	29 f4       	brne	.+10     	; 0x2e20 <uart_init+0x284>
    2e16:	60 e1       	ldi	r22, 0x10	; 16
    2e18:	84 e0       	ldi	r24, 0x04	; 4
    2e1a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e1e:	58 c0       	rjmp	.+176    	; 0x2ed0 <uart_init+0x334>
    2e20:	00 3a       	cpi	r16, 0xA0	; 160
    2e22:	8a e0       	ldi	r24, 0x0A	; 10
    2e24:	18 07       	cpc	r17, r24
    2e26:	29 f4       	brne	.+10     	; 0x2e32 <uart_init+0x296>
    2e28:	60 e1       	ldi	r22, 0x10	; 16
    2e2a:	85 e0       	ldi	r24, 0x05	; 5
    2e2c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e30:	4f c0       	rjmp	.+158    	; 0x2ed0 <uart_init+0x334>
    2e32:	00 3a       	cpi	r16, 0xA0	; 160
    2e34:	ab e0       	ldi	r26, 0x0B	; 11
    2e36:	1a 07       	cpc	r17, r26
    2e38:	29 f4       	brne	.+10     	; 0x2e44 <uart_init+0x2a8>
    2e3a:	60 e1       	ldi	r22, 0x10	; 16
    2e3c:	86 e0       	ldi	r24, 0x06	; 6
    2e3e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e42:	46 c0       	rjmp	.+140    	; 0x2ed0 <uart_init+0x334>
    2e44:	00 3b       	cpi	r16, 0xB0	; 176
    2e46:	b8 e0       	ldi	r27, 0x08	; 8
    2e48:	1b 07       	cpc	r17, r27
    2e4a:	29 f4       	brne	.+10     	; 0x2e56 <uart_init+0x2ba>
    2e4c:	60 e2       	ldi	r22, 0x20	; 32
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e54:	3d c0       	rjmp	.+122    	; 0x2ed0 <uart_init+0x334>
    2e56:	00 3b       	cpi	r16, 0xB0	; 176
    2e58:	e9 e0       	ldi	r30, 0x09	; 9
    2e5a:	1e 07       	cpc	r17, r30
    2e5c:	29 f4       	brne	.+10     	; 0x2e68 <uart_init+0x2cc>
    2e5e:	60 e2       	ldi	r22, 0x20	; 32
    2e60:	84 e0       	ldi	r24, 0x04	; 4
    2e62:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e66:	34 c0       	rjmp	.+104    	; 0x2ed0 <uart_init+0x334>
    2e68:	00 3b       	cpi	r16, 0xB0	; 176
    2e6a:	fa e0       	ldi	r31, 0x0A	; 10
    2e6c:	1f 07       	cpc	r17, r31
    2e6e:	29 f4       	brne	.+10     	; 0x2e7a <uart_init+0x2de>
    2e70:	60 e2       	ldi	r22, 0x20	; 32
    2e72:	85 e0       	ldi	r24, 0x05	; 5
    2e74:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e78:	2b c0       	rjmp	.+86     	; 0x2ed0 <uart_init+0x334>
    2e7a:	00 3b       	cpi	r16, 0xB0	; 176
    2e7c:	8b e0       	ldi	r24, 0x0B	; 11
    2e7e:	18 07       	cpc	r17, r24
    2e80:	29 f4       	brne	.+10     	; 0x2e8c <uart_init+0x2f0>
    2e82:	60 e2       	ldi	r22, 0x20	; 32
    2e84:	86 e0       	ldi	r24, 0x06	; 6
    2e86:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e8a:	22 c0       	rjmp	.+68     	; 0x2ed0 <uart_init+0x334>
    2e8c:	00 38       	cpi	r16, 0x80	; 128
    2e8e:	a4 e0       	ldi	r26, 0x04	; 4
    2e90:	1a 07       	cpc	r17, r26
    2e92:	29 f4       	brne	.+10     	; 0x2e9e <uart_init+0x302>
    2e94:	60 e4       	ldi	r22, 0x40	; 64
    2e96:	83 e0       	ldi	r24, 0x03	; 3
    2e98:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2e9c:	19 c0       	rjmp	.+50     	; 0x2ed0 <uart_init+0x334>
    2e9e:	00 39       	cpi	r16, 0x90	; 144
    2ea0:	b4 e0       	ldi	r27, 0x04	; 4
    2ea2:	1b 07       	cpc	r17, r27
    2ea4:	29 f4       	brne	.+10     	; 0x2eb0 <uart_init+0x314>
    2ea6:	60 e4       	ldi	r22, 0x40	; 64
    2ea8:	84 e0       	ldi	r24, 0x04	; 4
    2eaa:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2eae:	10 c0       	rjmp	.+32     	; 0x2ed0 <uart_init+0x334>
    2eb0:	00 3a       	cpi	r16, 0xA0	; 160
    2eb2:	e4 e0       	ldi	r30, 0x04	; 4
    2eb4:	1e 07       	cpc	r17, r30
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <uart_init+0x326>
    2eb8:	60 e4       	ldi	r22, 0x40	; 64
    2eba:	85 e0       	ldi	r24, 0x05	; 5
    2ebc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2ec0:	07 c0       	rjmp	.+14     	; 0x2ed0 <uart_init+0x334>
    2ec2:	00 3b       	cpi	r16, 0xB0	; 176
    2ec4:	14 40       	sbci	r17, 0x04	; 4
    2ec6:	21 f4       	brne	.+8      	; 0x2ed0 <uart_init+0x334>
    2ec8:	60 e4       	ldi	r22, 0x40	; 64
    2eca:	86 e0       	ldi	r24, 0x06	; 6
    2ecc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2ed0:	d7 01       	movw	r26, r14
    2ed2:	12 96       	adiw	r26, 0x02	; 2
    2ed4:	0d 91       	ld	r16, X+
    2ed6:	1c 91       	ld	r17, X
    2ed8:	13 97       	sbiw	r26, 0x03	; 3
    2eda:	e4 e1       	ldi	r30, 0x14	; 20
    2edc:	f0 e2       	ldi	r31, 0x20	; 32
    2ede:	84 81       	ldd	r24, Z+4	; 0x04
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
    2ee2:	85 81       	ldd	r24, Z+5	; 0x05
    2ee4:	8e 83       	std	Y+6, r24	; 0x06
    2ee6:	86 81       	ldd	r24, Z+6	; 0x06
    2ee8:	8f 83       	std	Y+7, r24	; 0x07
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	a2 81       	ldd	r26, Z+2	; 0x02
    2ef0:	b3 81       	ldd	r27, Z+3	; 0x03
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	ab 83       	std	Y+3, r26	; 0x03
    2ef8:	bc 83       	std	Y+4, r27	; 0x04
    2efa:	78 01       	movw	r14, r16
    2efc:	00 3a       	cpi	r16, 0xA0	; 160
    2efe:	b8 e0       	ldi	r27, 0x08	; 8
    2f00:	1b 07       	cpc	r17, r27
    2f02:	29 f4       	brne	.+10     	; 0x2f0e <uart_init+0x372>
    2f04:	60 e1       	ldi	r22, 0x10	; 16
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f0c:	13 c0       	rjmp	.+38     	; 0x2f34 <uart_init+0x398>
    2f0e:	00 3b       	cpi	r16, 0xB0	; 176
    2f10:	e8 e0       	ldi	r30, 0x08	; 8
    2f12:	1e 07       	cpc	r17, r30
    2f14:	29 f4       	brne	.+10     	; 0x2f20 <uart_init+0x384>
    2f16:	60 e2       	ldi	r22, 0x20	; 32
    2f18:	83 e0       	ldi	r24, 0x03	; 3
    2f1a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f1e:	14 c0       	rjmp	.+40     	; 0x2f48 <uart_init+0x3ac>
    2f20:	f0 ea       	ldi	r31, 0xA0	; 160
    2f22:	ef 16       	cp	r14, r31
    2f24:	f9 e0       	ldi	r31, 0x09	; 9
    2f26:	ff 06       	cpc	r15, r31
    2f28:	29 f4       	brne	.+10     	; 0x2f34 <uart_init+0x398>
    2f2a:	60 e1       	ldi	r22, 0x10	; 16
    2f2c:	84 e0       	ldi	r24, 0x04	; 4
    2f2e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f32:	14 c0       	rjmp	.+40     	; 0x2f5c <uart_init+0x3c0>
    2f34:	80 eb       	ldi	r24, 0xB0	; 176
    2f36:	e8 16       	cp	r14, r24
    2f38:	89 e0       	ldi	r24, 0x09	; 9
    2f3a:	f8 06       	cpc	r15, r24
    2f3c:	29 f4       	brne	.+10     	; 0x2f48 <uart_init+0x3ac>
    2f3e:	60 e2       	ldi	r22, 0x20	; 32
    2f40:	84 e0       	ldi	r24, 0x04	; 4
    2f42:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f46:	14 c0       	rjmp	.+40     	; 0x2f70 <uart_init+0x3d4>
    2f48:	a0 ea       	ldi	r26, 0xA0	; 160
    2f4a:	ea 16       	cp	r14, r26
    2f4c:	aa e0       	ldi	r26, 0x0A	; 10
    2f4e:	fa 06       	cpc	r15, r26
    2f50:	29 f4       	brne	.+10     	; 0x2f5c <uart_init+0x3c0>
    2f52:	60 e1       	ldi	r22, 0x10	; 16
    2f54:	85 e0       	ldi	r24, 0x05	; 5
    2f56:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <uart_init+0x3e8>
    2f5c:	b0 eb       	ldi	r27, 0xB0	; 176
    2f5e:	eb 16       	cp	r14, r27
    2f60:	ba e0       	ldi	r27, 0x0A	; 10
    2f62:	fb 06       	cpc	r15, r27
    2f64:	29 f4       	brne	.+10     	; 0x2f70 <uart_init+0x3d4>
    2f66:	60 e2       	ldi	r22, 0x20	; 32
    2f68:	85 e0       	ldi	r24, 0x05	; 5
    2f6a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f6e:	13 c0       	rjmp	.+38     	; 0x2f96 <uart_init+0x3fa>
    2f70:	e0 ea       	ldi	r30, 0xA0	; 160
    2f72:	ee 16       	cp	r14, r30
    2f74:	eb e0       	ldi	r30, 0x0B	; 11
    2f76:	fe 06       	cpc	r15, r30
    2f78:	29 f4       	brne	.+10     	; 0x2f84 <uart_init+0x3e8>
    2f7a:	60 e1       	ldi	r22, 0x10	; 16
    2f7c:	86 e0       	ldi	r24, 0x06	; 6
    2f7e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f82:	09 c0       	rjmp	.+18     	; 0x2f96 <uart_init+0x3fa>
    2f84:	f0 eb       	ldi	r31, 0xB0	; 176
    2f86:	ef 16       	cp	r14, r31
    2f88:	fb e0       	ldi	r31, 0x0B	; 11
    2f8a:	ff 06       	cpc	r15, r31
    2f8c:	21 f4       	brne	.+8      	; 0x2f96 <uart_init+0x3fa>
    2f8e:	60 e2       	ldi	r22, 0x20	; 32
    2f90:	86 e0       	ldi	r24, 0x06	; 6
    2f92:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
    2f96:	be 01       	movw	r22, r28
    2f98:	6f 5f       	subi	r22, 0xFF	; 255
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	c8 01       	movw	r24, r16
    2f9e:	b8 da       	rcall	.-2704   	; 0x2510 <usart_init_rs232>
    2fa0:	13 c0       	rjmp	.+38     	; 0x2fc8 <uart_init+0x42c>
    2fa2:	e4 e1       	ldi	r30, 0x14	; 20
    2fa4:	f0 e2       	ldi	r31, 0x20	; 32
    2fa6:	84 81       	ldd	r24, Z+4	; 0x04
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	85 81       	ldd	r24, Z+5	; 0x05
    2fac:	8e 83       	std	Y+6, r24	; 0x06
    2fae:	86 81       	ldd	r24, Z+6	; 0x06
    2fb0:	8f 83       	std	Y+7, r24	; 0x07
    2fb2:	80 81       	ld	r24, Z
    2fb4:	91 81       	ldd	r25, Z+1	; 0x01
    2fb6:	a2 81       	ldd	r26, Z+2	; 0x02
    2fb8:	b3 81       	ldd	r27, Z+3	; 0x03
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	ab 83       	std	Y+3, r26	; 0x03
    2fc0:	bc 83       	std	Y+4, r27	; 0x04
    2fc2:	e1 2c       	mov	r14, r1
    2fc4:	f1 2c       	mov	r15, r1
    2fc6:	ac cf       	rjmp	.-168    	; 0x2f20 <uart_init+0x384>
    2fc8:	27 96       	adiw	r28, 0x07	; 7
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	08 95       	ret

00002fdc <openlog_init>:
    2fdc:	fc 01       	movw	r30, r24
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	92 ec       	ldi	r25, 0xC2	; 194
    2fe2:	a1 e0       	ldi	r26, 0x01	; 1
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	86 83       	std	Z+6, r24	; 0x06
    2fe8:	97 83       	std	Z+7, r25	; 0x07
    2fea:	a0 87       	std	Z+8, r26	; 0x08
    2fec:	b1 87       	std	Z+9, r27	; 0x09
    2fee:	80 e4       	ldi	r24, 0x40	; 64
    2ff0:	96 e0       	ldi	r25, 0x06	; 6
    2ff2:	80 83       	st	Z, r24
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 eb       	ldi	r24, 0xB0	; 176
    2ff8:	98 e0       	ldi	r25, 0x08	; 8
    2ffa:	82 83       	std	Z+2, r24	; 0x02
    2ffc:	93 83       	std	Z+3, r25	; 0x03
    2ffe:	80 e8       	ldi	r24, 0x80	; 128
    3000:	85 83       	std	Z+5, r24	; 0x05
    3002:	80 e4       	ldi	r24, 0x40	; 64
    3004:	84 83       	std	Z+4, r24	; 0x04
    3006:	08 95       	ret

00003008 <xbee_init>:
    3008:	fc 01       	movw	r30, r24
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	92 ec       	ldi	r25, 0xC2	; 194
    300e:	a1 e0       	ldi	r26, 0x01	; 1
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	86 83       	std	Z+6, r24	; 0x06
    3014:	97 83       	std	Z+7, r25	; 0x07
    3016:	a0 87       	std	Z+8, r26	; 0x08
    3018:	b1 87       	std	Z+9, r27	; 0x09
    301a:	80 ea       	ldi	r24, 0xA0	; 160
    301c:	96 e0       	ldi	r25, 0x06	; 6
    301e:	80 83       	st	Z, r24
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 ea       	ldi	r24, 0xA0	; 160
    3024:	9b e0       	ldi	r25, 0x0B	; 11
    3026:	82 83       	std	Z+2, r24	; 0x02
    3028:	93 83       	std	Z+3, r25	; 0x03
    302a:	88 e0       	ldi	r24, 0x08	; 8
    302c:	85 83       	std	Z+5, r24	; 0x05
    302e:	84 e0       	ldi	r24, 0x04	; 4
    3030:	84 83       	std	Z+4, r24	; 0x04
    3032:	08 95       	ret

00003034 <gps_init>:
    3034:	fc 01       	movw	r30, r24
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	92 ec       	ldi	r25, 0xC2	; 194
    303a:	a1 e0       	ldi	r26, 0x01	; 1
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	86 83       	std	Z+6, r24	; 0x06
    3040:	97 83       	std	Z+7, r25	; 0x07
    3042:	a0 87       	std	Z+8, r26	; 0x08
    3044:	b1 87       	std	Z+9, r27	; 0x09
    3046:	80 e8       	ldi	r24, 0x80	; 128
    3048:	96 e0       	ldi	r25, 0x06	; 6
    304a:	80 83       	st	Z, r24
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 eb       	ldi	r24, 0xB0	; 176
    3050:	9a e0       	ldi	r25, 0x0A	; 10
    3052:	82 83       	std	Z+2, r24	; 0x02
    3054:	93 83       	std	Z+3, r25	; 0x03
    3056:	80 e8       	ldi	r24, 0x80	; 128
    3058:	85 83       	std	Z+5, r24	; 0x05
    305a:	80 e4       	ldi	r24, 0x40	; 64
    305c:	84 83       	std	Z+4, r24	; 0x04
    305e:	08 95       	ret

00003060 <uart_terminal_init>:

void uart_terminal_init()
{
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	27 97       	sbiw	r28, 0x07	; 7
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    306e:	60 e1       	ldi	r22, 0x10	; 16
    3070:	85 e0       	ldi	r24, 0x05	; 5
    3072:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    3076:	e0 e8       	ldi	r30, 0x80	; 128
    3078:	f6 e0       	ldi	r31, 0x06	; 6
    307a:	80 81       	ld	r24, Z
    307c:	88 60       	ori	r24, 0x08	; 8
    307e:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    3080:	80 ea       	ldi	r24, 0xA0	; 160
    3082:	9a e0       	ldi	r25, 0x0A	; 10
    3084:	80 93 2c 24 	sts	0x242C, r24	; 0x80242c <stdio_base>
    3088:	90 93 2d 24 	sts	0x242D, r25	; 0x80242d <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    308c:	8c ec       	ldi	r24, 0xCC	; 204
    308e:	95 e1       	ldi	r25, 0x15	; 21
    3090:	80 93 2a 24 	sts	0x242A, r24	; 0x80242a <ptr_put>
    3094:	90 93 2b 24 	sts	0x242B, r25	; 0x80242b <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3098:	84 ec       	ldi	r24, 0xC4	; 196
    309a:	95 e1       	ldi	r25, 0x15	; 21
    309c:	80 93 28 24 	sts	0x2428, r24	; 0x802428 <ptr_get>
    30a0:	90 93 29 24 	sts	0x2429, r25	; 0x802429 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    30a4:	ed e0       	ldi	r30, 0x0D	; 13
    30a6:	f0 e2       	ldi	r31, 0x20	; 32
    30a8:	84 81       	ldd	r24, Z+4	; 0x04
    30aa:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    30ac:	85 81       	ldd	r24, Z+5	; 0x05
    30ae:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    30b0:	86 81       	ldd	r24, Z+6	; 0x06
    30b2:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	a2 81       	ldd	r26, Z+2	; 0x02
    30ba:	b3 81       	ldd	r27, Z+3	; 0x03
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	ab 83       	std	Y+3, r26	; 0x03
    30c2:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    30c4:	60 e1       	ldi	r22, 0x10	; 16
    30c6:	85 e0       	ldi	r24, 0x05	; 5
    30c8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    30cc:	be 01       	movw	r22, r28
    30ce:	6f 5f       	subi	r22, 0xFF	; 255
    30d0:	7f 4f       	sbci	r23, 0xFF	; 255
    30d2:	80 ea       	ldi	r24, 0xA0	; 160
    30d4:	9a e0       	ldi	r25, 0x0A	; 10
    30d6:	1c da       	rcall	.-3016   	; 0x2510 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    30d8:	67 ef       	ldi	r22, 0xF7	; 247
    30da:	75 e0       	ldi	r23, 0x05	; 5
    30dc:	80 e1       	ldi	r24, 0x10	; 16
    30de:	96 e0       	ldi	r25, 0x06	; 6
    30e0:	17 d5       	rcall	.+2606   	; 0x3b10 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
}
    30e2:	27 96       	adiw	r28, 0x07	; 7
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	08 95       	ret

000030ee <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    30ee:	04 c0       	rjmp	.+8      	; 0x30f8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    30f0:	61 50       	subi	r22, 0x01	; 1
    30f2:	71 09       	sbc	r23, r1
    30f4:	81 09       	sbc	r24, r1
    30f6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    30f8:	61 15       	cp	r22, r1
    30fa:	71 05       	cpc	r23, r1
    30fc:	81 05       	cpc	r24, r1
    30fe:	91 05       	cpc	r25, r1
    3100:	b9 f7       	brne	.-18     	; 0x30f0 <__portable_avr_delay_cycles+0x2>
    3102:	08 95       	ret

00003104 <packetlen>:
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
	{
		if (buff[i] == '\n')
    3104:	fc 01       	movw	r30, r24
    3106:	20 81       	ld	r18, Z
    3108:	2a 30       	cpi	r18, 0x0A	; 10
    310a:	79 f0       	breq	.+30     	; 0x312a <packetlen+0x26>
    310c:	31 96       	adiw	r30, 0x01	; 1

uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    310e:	21 e0       	ldi	r18, 0x01	; 1
    3110:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (buff[i] == '\n')
    3112:	81 91       	ld	r24, Z+
    3114:	8a 30       	cpi	r24, 0x0A	; 10
    3116:	61 f0       	breq	.+24     	; 0x3130 <packetlen+0x2c>

uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    3118:	2f 5f       	subi	r18, 0xFF	; 255
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	21 15       	cp	r18, r1
    311e:	84 e0       	ldi	r24, 0x04	; 4
    3120:	38 07       	cpc	r19, r24
    3122:	b9 f7       	brne	.-18     	; 0x3112 <packetlen+0xe>
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	94 e0       	ldi	r25, 0x04	; 4
    3128:	08 95       	ret

uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	08 95       	ret
    3130:	82 2f       	mov	r24, r18
    3132:	93 2f       	mov	r25, r19
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    3134:	08 95       	ret

00003136 <main>:

int main (void)
{
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	c2 5a       	subi	r28, 0xA2	; 162
    3140:	d1 09       	sbc	r29, r1
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	de bf       	out	0x3e, r29	; 62

	/* This skeleton code simply sets the LED to the state of the button. */
	
	//struct bno055_t myBNO;
	
	sysclk_init();
    3146:	0e 94 91 05 	call	0xb22	; 0xb22 <sysclk_init>
	board_init();
    314a:	20 dc       	rcall	.-1984   	; 0x298c <board_init>
	uart_device openLog;
	uart_device xbee;
	uart_device gps;
	openlog_init(&openLog);
    314c:	ce 01       	movw	r24, r28
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	45 df       	rcall	.-374    	; 0x2fdc <openlog_init>
	xbee_init(&xbee);
    3152:	ce 01       	movw	r24, r28
    3154:	0b 96       	adiw	r24, 0x0b	; 11
    3156:	58 df       	rcall	.-336    	; 0x3008 <xbee_init>
	gps_init(&gps);
    3158:	ce 01       	movw	r24, r28
    315a:	45 96       	adiw	r24, 0x15	; 21
    315c:	6b df       	rcall	.-298    	; 0x3034 <gps_init>
	uart_init(&openLog);
    315e:	ce 01       	movw	r24, r28
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	1c dd       	rcall	.-1480   	; 0x2b9c <uart_init>
	uart_init(&xbee);
    3164:	ce 01       	movw	r24, r28
    3166:	0b 96       	adiw	r24, 0x0b	; 11
	uart_init(&gps);
    3168:	19 dd       	rcall	.-1486   	; 0x2b9c <uart_init>
    316a:	ce 01       	movw	r24, r28
    316c:	45 96       	adiw	r24, 0x15	; 21
	uart_terminal_init();
    316e:	16 dd       	rcall	.-1492   	; 0x2b9c <uart_init>
    3170:	77 df       	rcall	.-274    	; 0x3060 <uart_terminal_init>
	printf("uart is working\n");
    3172:	8e e7       	ldi	r24, 0x7E	; 126
    3174:	90 e2       	ldi	r25, 0x20	; 32
	I2CInit(115200,BN0_ADDR);
    3176:	2e d5       	rcall	.+2652   	; 0x3bd4 <puts>
    3178:	49 e2       	ldi	r20, 0x29	; 41
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	72 ec       	ldi	r23, 0xC2	; 194
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
	BNO055_Config();
    3182:	11 dc       	rcall	.-2014   	; 0x29a6 <I2CInit>
    3184:	dd dc       	rcall	.-1606   	; 0x2b40 <BNO055_Config>
	p_bstru nums;
	u16BuffInit(&nums);
    3186:	ce 01       	movw	r24, r28
    3188:	4f 96       	adiw	r24, 0x1f	; 31
    318a:	4a db       	rcall	.-2412   	; 0x2820 <u16BuffInit>
    318c:	0e 94 bc 01 	call	0x378	; 0x378 <init_GPS_pins_and_usart>
	uint32_t GPSLat;
	uint32_t GPSLong;
	uint32_t GPSAlt;
	uint32_t GPSSats;
	uint32_t time_ms;
	init_GPS_pins_and_usart();
    3190:	0e 94 da 04 	call	0x9b4	; 0x9b4 <init_gps_interrupts>
	init_gps_interrupts();
    3194:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <init_gps_buffers>
	init_gps_buffers();
    3198:	e0 ea       	ldi	r30, 0xA0	; 160
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	87 e0       	ldi	r24, 0x07	; 7
    319e:	82 83       	std	Z+2, r24	; 0x02
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    31a2:	8f 77       	andi	r24, 0x7F	; 127
    31a4:	82 83       	std	Z+2, r24	; 0x02
    31a6:	11 82       	std	Z+1, r1	; 0x01
		PMIC.INTPRI = 0;
    31a8:	78 94       	sei
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);
	cpu_irq_enable();
    31aa:	51 2c       	mov	r5, r1
	printf("uart is working\n");
	I2CInit(115200,BN0_ADDR);
	BNO055_Config();
	p_bstru nums;
	u16BuffInit(&nums);
	uint8_t i=0;
    31ac:	0f 2e       	mov	r0, r31
	
	while (1) {
		usart_serial_write_packet(&USARTF0,"hello",strlen("hello"));
		i++;
		putu16(nums,i);
		printf(&USARTC1,"\n\nThe array is: ",strlen("\n\nThe array is: "));
    31ae:	f4 e9       	ldi	r31, 0x94	; 148
    31b0:	cf 2e       	mov	r12, r31
    31b2:	f0 e2       	ldi	r31, 0x20	; 32
    31b4:	df 2e       	mov	r13, r31
    31b6:	f0 2d       	mov	r31, r0
    31b8:	0f 2e       	mov	r0, r31
		for(uint8_t j=0;j<10;j++)
		{
			printf(" %i", getu16(nums,j));
    31ba:	f2 e5       	ldi	r31, 0x52	; 82
    31bc:	ef 2e       	mov	r14, r31
    31be:	f0 e2       	ldi	r31, 0x20	; 32
    31c0:	ff 2e       	mov	r15, r31
    31c2:	f0 2d       	mov	r31, r0
    31c4:	0f 2e       	mov	r0, r31
		}
		printf("\n");
		printf("Who am I: %d", WhoAmIBNO());
    31c6:	f5 ea       	ldi	r31, 0xA5	; 165
    31c8:	8f 2e       	mov	r8, r31
    31ca:	f0 e2       	ldi	r31, 0x20	; 32
    31cc:	9f 2e       	mov	r9, r31
    31ce:	f0 2d       	mov	r31, r0
    31d0:	0f 2e       	mov	r0, r31
		//if(isBnoCalib() > 33){
		//get_acceleration(acceleration);
		//get_mag(mag);
		//get_gyro(gyro);
		//}
		printf("Altitude: %d", GPSAlt);
    31d2:	f2 eb       	ldi	r31, 0xB2	; 178
    31d4:	af 2e       	mov	r10, r31
    31d6:	f0 e2       	ldi	r31, 0x20	; 32
    31d8:	bf 2e       	mov	r11, r31
    31da:	f0 2d       	mov	r31, r0
    31dc:	0f 2e       	mov	r0, r31
		printf("\nAccelerometer is %i, \t %i, \t %i \n",acceleration[0], acceleration[1], acceleration[2]);
    31de:	ff eb       	ldi	r31, 0xBF	; 191
    31e0:	6f 2e       	mov	r6, r31
    31e2:	f0 e2       	ldi	r31, 0x20	; 32
    31e4:	7f 2e       	mov	r7, r31
    31e6:	f0 2d       	mov	r31, r0
    31e8:	0f 2e       	mov	r0, r31
		printf("Magnetometer is %i, \t %i, \t %i \n",mag[0],mag[1],mag[2] );
    31ea:	f2 ee       	ldi	r31, 0xE2	; 226
    31ec:	2f 2e       	mov	r2, r31
    31ee:	f0 e2       	ldi	r31, 0x20	; 32
    31f0:	3f 2e       	mov	r3, r31
    31f2:	f0 2d       	mov	r31, r0
    31f4:	45 e0       	ldi	r20, 0x05	; 5
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);
	cpu_irq_enable();
	
	while (1) {
		usart_serial_write_packet(&USARTF0,"hello",strlen("hello"));
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	6e e8       	ldi	r22, 0x8E	; 142
    31fa:	70 e2       	ldi	r23, 0x20	; 32
    31fc:	80 ea       	ldi	r24, 0xA0	; 160
    31fe:	9b e0       	ldi	r25, 0x0B	; 11
    3200:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <usart_serial_write_packet>
		i++;
    3204:	53 94       	inc	r5
		putu16(nums,i);
    3206:	65 2d       	mov	r22, r5
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    320c:	98 a1       	ldd	r25, Y+32	; 0x20
    320e:	36 db       	rcall	.-2452   	; 0x287c <putu16>
		printf(&USARTC1,"\n\nThe array is: ",strlen("\n\nThe array is: "));
    3210:	1f 92       	push	r1
    3212:	20 e1       	ldi	r18, 0x10	; 16
    3214:	2f 93       	push	r18
    3216:	df 92       	push	r13
    3218:	cf 92       	push	r12
    321a:	88 e0       	ldi	r24, 0x08	; 8
    321c:	8f 93       	push	r24
    321e:	80 eb       	ldi	r24, 0xB0	; 176
    3220:	8f 93       	push	r24
    3222:	c0 d4       	rcall	.+2432   	; 0x3ba4 <printf>
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t j=0;j<10;j++)
		{
			printf(" %i", getu16(nums,j));
    3232:	10 e0       	ldi	r17, 0x00	; 0
    3234:	b8 01       	movw	r22, r16
    3236:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3238:	98 a1       	ldd	r25, Y+32	; 0x20
    323a:	67 db       	rcall	.-2354   	; 0x290a <getu16>
    323c:	9f 93       	push	r25
    323e:	8f 93       	push	r24
    3240:	ff 92       	push	r15
    3242:	ef 92       	push	r14
    3244:	af d4       	rcall	.+2398   	; 0x3ba4 <printf>
    3246:	0f 5f       	subi	r16, 0xFF	; 255
	while (1) {
		usart_serial_write_packet(&USARTF0,"hello",strlen("hello"));
		i++;
		putu16(nums,i);
		printf(&USARTC1,"\n\nThe array is: ",strlen("\n\nThe array is: "));
		for(uint8_t j=0;j<10;j++)
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0a 30       	cpi	r16, 0x0A	; 10
    3254:	11 05       	cpc	r17, r1
		{
			printf(" %i", getu16(nums,j));
		}
		printf("\n");
    3256:	71 f7       	brne	.-36     	; 0x3234 <main+0xfe>
    3258:	8a e0       	ldi	r24, 0x0A	; 10
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	b6 d4       	rcall	.+2412   	; 0x3bca <putchar>
		printf("Who am I: %d", WhoAmIBNO());
    325e:	4d dc       	rcall	.-1894   	; 0x2afa <WhoAmIBNO>
    3260:	9f 93       	push	r25
    3262:	8f 93       	push	r24
    3264:	9f 92       	push	r9
    3266:	8f 92       	push	r8
    3268:	9d d4       	rcall	.+2362   	; 0x3ba4 <printf>
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
		
		
		if (last_finished != SENTENCE_NONE)
		{
			if (last_finished == SENTENCE_GPGGA)
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	80 91 31 22 	lds	r24, 0x2231	; 0x802231 <last_finished>
    3276:	81 30       	cpi	r24, 0x01	; 1
    3278:	09 f0       	breq	.+2      	; 0x327c <main+0x146>
    327a:	48 c0       	rjmp	.+144    	; 0x330c <main+0x1d6>
    327c:	9f b7       	in	r25, 0x3f	; 63
			{
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    327e:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3280:	85 e5       	ldi	r24, 0x55	; 85
				{
					memcpy(gpstmp, gpgga_buff, 85);
    3282:	e1 ed       	ldi	r30, 0xD1	; 209
    3284:	f3 e2       	ldi	r31, 0x23	; 35
    3286:	de 01       	movw	r26, r28
    3288:	91 96       	adiw	r26, 0x21	; 33
    328a:	01 90       	ld	r0, Z+
    328c:	0d 92       	st	X+, r0
    328e:	8a 95       	dec	r24
    3290:	e1 f7       	brne	.-8      	; 0x328a <main+0x154>
    3292:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3294:	8e 01       	movw	r16, r28
				}
				gpstmp[packetlen(gpstmp)] = '\0';
    3296:	0f 5d       	subi	r16, 0xDF	; 223
    3298:	1f 4f       	sbci	r17, 0xFF	; 255
    329a:	c8 01       	movw	r24, r16
    329c:	33 df       	rcall	.-410    	; 0x3104 <packetlen>
    329e:	80 0f       	add	r24, r16
    32a0:	91 1f       	adc	r25, r17
    32a2:	fc 01       	movw	r30, r24
    32a4:	10 82       	st	Z, r1
    32a6:	f8 01       	movw	r30, r16
    32a8:	01 90       	ld	r0, Z+

				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    32aa:	00 20       	and	r0, r0
    32ac:	e9 f7       	brne	.-6      	; 0x32a8 <main+0x172>
    32ae:	31 97       	sbiw	r30, 0x01	; 1
    32b0:	af 01       	movw	r20, r30
    32b2:	40 1b       	sub	r20, r16
    32b4:	51 0b       	sbc	r21, r17
    32b6:	b8 01       	movw	r22, r16
    32b8:	ce 01       	movw	r24, r28
    32ba:	8a 58       	subi	r24, 0x8A	; 138
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	0e 94 1b 02 	call	0x436	; 0x436 <getGPSDatafromNMEA>
    32c2:	c4 57       	subi	r28, 0x74	; 116
    32c4:	df 4f       	sbci	r29, 0xFF	; 255
				GPSAlt =	gps_data.altitude;
    32c6:	68 81       	ld	r22, Y
    32c8:	79 81       	ldd	r23, Y+1	; 0x01
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	cc 58       	subi	r28, 0x8C	; 140
    32d0:	d0 40       	sbci	r29, 0x00	; 0
    32d2:	10 92 31 22 	sts	0x2231, r1	; 0x802231 <last_finished>
				GPSLat =	gps_data.latdecimal;
				GPSLong=	gps_data.londecimal;
				
				last_finished = SENTENCE_NONE;
    32d6:	cd 56       	subi	r28, 0x6D	; 109
				
				if (gps_data.fix_status)
    32d8:	df 4f       	sbci	r29, 0xFF	; 255
    32da:	28 81       	ld	r18, Y
    32dc:	c3 59       	subi	r28, 0x93	; 147
    32de:	d0 40       	sbci	r29, 0x00	; 0
    32e0:	22 23       	and	r18, r18
    32e2:	19 f0       	breq	.+6      	; 0x32ea <main+0x1b4>
    32e4:	2f b7       	in	r18, 0x3f	; 63
				{
					uint32_t GPS_secs = 3600 * (uint32_t)gps_data.hour + 60 * (uint32_t)gps_data.minutes + (uint32_t)gps_data.seconds;
					uint32_t safetime;
					ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    32e6:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    32e8:	2f bf       	out	0x3f, r18	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    32ea:	66 d1       	rcall	.+716    	; 0x35b8 <__fixunssfsi>
					memcpy(gpstmp, gpgga_buff, 85);
				}
				gpstmp[packetlen(gpstmp)] = '\0';

				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
				GPSAlt =	gps_data.altitude;
    32ec:	c0 56       	subi	r28, 0x60	; 96
    32ee:	df 4f       	sbci	r29, 0xFF	; 255
    32f0:	68 83       	st	Y, r22
    32f2:	c0 5a       	subi	r28, 0xA0	; 160
    32f4:	d0 40       	sbci	r29, 0x00	; 0
    32f6:	cf 55       	subi	r28, 0x5F	; 95
    32f8:	df 4f       	sbci	r29, 0xFF	; 255
    32fa:	78 83       	st	Y, r23
    32fc:	c1 5a       	subi	r28, 0xA1	; 161
    32fe:	d0 40       	sbci	r29, 0x00	; 0
    3300:	ce 55       	subi	r28, 0x5E	; 94
    3302:	df 4f       	sbci	r29, 0xFF	; 255
    3304:	88 83       	st	Y, r24
    3306:	c2 5a       	subi	r28, 0xA2	; 162
    3308:	d0 40       	sbci	r29, 0x00	; 0
    330a:	49 2e       	mov	r4, r25
    330c:	4f 92       	push	r4
    330e:	ce 55       	subi	r28, 0x5E	; 94
		//if(isBnoCalib() > 33){
		//get_acceleration(acceleration);
		//get_mag(mag);
		//get_gyro(gyro);
		//}
		printf("Altitude: %d", GPSAlt);
    3310:	df 4f       	sbci	r29, 0xFF	; 255
    3312:	f8 81       	ld	r31, Y
    3314:	c2 5a       	subi	r28, 0xA2	; 162
    3316:	d0 40       	sbci	r29, 0x00	; 0
    3318:	ff 93       	push	r31
    331a:	cf 55       	subi	r28, 0x5F	; 95
    331c:	df 4f       	sbci	r29, 0xFF	; 255
    331e:	28 81       	ld	r18, Y
    3320:	c1 5a       	subi	r28, 0xA1	; 161
    3322:	d0 40       	sbci	r29, 0x00	; 0
    3324:	2f 93       	push	r18
    3326:	c0 56       	subi	r28, 0x60	; 96
    3328:	df 4f       	sbci	r29, 0xFF	; 255
    332a:	88 81       	ld	r24, Y
    332c:	c0 5a       	subi	r28, 0xA0	; 160
    332e:	d0 40       	sbci	r29, 0x00	; 0
    3330:	8f 93       	push	r24
    3332:	bf 92       	push	r11
    3334:	af 92       	push	r10
    3336:	36 d4       	rcall	.+2156   	; 0x3ba4 <printf>
    3338:	c1 56       	subi	r28, 0x61	; 97
    333a:	df 4f       	sbci	r29, 0xFF	; 255
		printf("\nAccelerometer is %i, \t %i, \t %i \n",acceleration[0], acceleration[1], acceleration[2]);
    333c:	88 81       	ld	r24, Y
    333e:	cf 59       	subi	r28, 0x9F	; 159
    3340:	d0 40       	sbci	r29, 0x00	; 0
    3342:	8f 93       	push	r24
    3344:	c2 56       	subi	r28, 0x62	; 98
    3346:	df 4f       	sbci	r29, 0xFF	; 255
    3348:	88 81       	ld	r24, Y
    334a:	ce 59       	subi	r28, 0x9E	; 158
    334c:	d0 40       	sbci	r29, 0x00	; 0
    334e:	8f 93       	push	r24
    3350:	c3 56       	subi	r28, 0x63	; 99
    3352:	df 4f       	sbci	r29, 0xFF	; 255
    3354:	88 81       	ld	r24, Y
    3356:	cd 59       	subi	r28, 0x9D	; 157
    3358:	d0 40       	sbci	r29, 0x00	; 0
    335a:	8f 93       	push	r24
    335c:	c4 56       	subi	r28, 0x64	; 100
    335e:	df 4f       	sbci	r29, 0xFF	; 255
    3360:	88 81       	ld	r24, Y
    3362:	cc 59       	subi	r28, 0x9C	; 156
    3364:	d0 40       	sbci	r29, 0x00	; 0
    3366:	8f 93       	push	r24
    3368:	c5 56       	subi	r28, 0x65	; 101
    336a:	df 4f       	sbci	r29, 0xFF	; 255
    336c:	88 81       	ld	r24, Y
    336e:	cb 59       	subi	r28, 0x9B	; 155
    3370:	d0 40       	sbci	r29, 0x00	; 0
    3372:	8f 93       	push	r24
    3374:	c6 56       	subi	r28, 0x66	; 102
    3376:	df 4f       	sbci	r29, 0xFF	; 255
    3378:	88 81       	ld	r24, Y
    337a:	ca 59       	subi	r28, 0x9A	; 154
    337c:	d0 40       	sbci	r29, 0x00	; 0
    337e:	8f 93       	push	r24
    3380:	7f 92       	push	r7
    3382:	6f 92       	push	r6
    3384:	0f d4       	rcall	.+2078   	; 0x3ba4 <printf>
    3386:	c7 56       	subi	r28, 0x67	; 103
    3388:	df 4f       	sbci	r29, 0xFF	; 255
		printf("Magnetometer is %i, \t %i, \t %i \n",mag[0],mag[1],mag[2] );
    338a:	88 81       	ld	r24, Y
    338c:	c9 59       	subi	r28, 0x99	; 153
    338e:	d0 40       	sbci	r29, 0x00	; 0
    3390:	8f 93       	push	r24
    3392:	c8 56       	subi	r28, 0x68	; 104
    3394:	df 4f       	sbci	r29, 0xFF	; 255
    3396:	88 81       	ld	r24, Y
    3398:	c8 59       	subi	r28, 0x98	; 152
    339a:	d0 40       	sbci	r29, 0x00	; 0
    339c:	8f 93       	push	r24
    339e:	c9 56       	subi	r28, 0x69	; 105
    33a0:	df 4f       	sbci	r29, 0xFF	; 255
    33a2:	88 81       	ld	r24, Y
    33a4:	c7 59       	subi	r28, 0x97	; 151
    33a6:	d0 40       	sbci	r29, 0x00	; 0
    33a8:	8f 93       	push	r24
    33aa:	ca 56       	subi	r28, 0x6A	; 106
    33ac:	df 4f       	sbci	r29, 0xFF	; 255
    33ae:	88 81       	ld	r24, Y
    33b0:	c6 59       	subi	r28, 0x96	; 150
    33b2:	d0 40       	sbci	r29, 0x00	; 0
    33b4:	8f 93       	push	r24
    33b6:	cb 56       	subi	r28, 0x6B	; 107
    33b8:	df 4f       	sbci	r29, 0xFF	; 255
    33ba:	88 81       	ld	r24, Y
    33bc:	c5 59       	subi	r28, 0x95	; 149
    33be:	d0 40       	sbci	r29, 0x00	; 0
    33c0:	8f 93       	push	r24
    33c2:	cc 56       	subi	r28, 0x6C	; 108
    33c4:	df 4f       	sbci	r29, 0xFF	; 255
    33c6:	88 81       	ld	r24, Y
    33c8:	c4 59       	subi	r28, 0x94	; 148
    33ca:	d0 40       	sbci	r29, 0x00	; 0
    33cc:	8f 93       	push	r24
    33ce:	3f 92       	push	r3
    33d0:	2f 92       	push	r2
    33d2:	e8 d3       	rcall	.+2000   	; 0x3ba4 <printf>
    33d4:	ec 96       	adiw	r28, 0x3c	; 60
    33d6:	8f ad       	ldd	r24, Y+63	; 0x3f
		printf("Gyroscope is %i, \t %i, \t %i \n\n",gyro[0],gyro[1],gyro[2] );
    33d8:	ec 97       	sbiw	r28, 0x3c	; 60
    33da:	8f 93       	push	r24
    33dc:	eb 96       	adiw	r28, 0x3b	; 59
    33de:	8f ad       	ldd	r24, Y+63	; 0x3f
    33e0:	eb 97       	sbiw	r28, 0x3b	; 59
    33e2:	8f 93       	push	r24
    33e4:	ea 96       	adiw	r28, 0x3a	; 58
    33e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    33e8:	ea 97       	sbiw	r28, 0x3a	; 58
    33ea:	8f 93       	push	r24
    33ec:	e9 96       	adiw	r28, 0x39	; 57
    33ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    33f0:	e9 97       	sbiw	r28, 0x39	; 57
    33f2:	8f 93       	push	r24
    33f4:	e8 96       	adiw	r28, 0x38	; 56
    33f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    33f8:	e8 97       	sbiw	r28, 0x38	; 56
    33fa:	8f 93       	push	r24
    33fc:	e7 96       	adiw	r28, 0x37	; 55
    33fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    3400:	e7 97       	sbiw	r28, 0x37	; 55
    3402:	8f 93       	push	r24
    3404:	e3 e0       	ldi	r30, 0x03	; 3
    3406:	f1 e2       	ldi	r31, 0x21	; 33
    3408:	ff 93       	push	r31
    340a:	ef 93       	push	r30
    340c:	cb d3       	rcall	.+1942   	; 0x3ba4 <printf>
    340e:	6b ea       	ldi	r22, 0xAB	; 171
		delay_ms(500);
    3410:	70 eb       	ldi	r23, 0xB0	; 176
    3412:	88 e2       	ldi	r24, 0x28	; 40
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	6b de       	rcall	.-810    	; 0x30ee <__portable_avr_delay_cycles>
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	de bf       	out	0x3e, r29	; 62

	}
    341c:	eb ce       	rjmp	.-554    	; 0x31f4 <main+0xbe>

0000341e <__subsf3>:
    341e:	50 58       	subi	r21, 0x80	; 128

00003420 <__addsf3>:
    3420:	bb 27       	eor	r27, r27
    3422:	aa 27       	eor	r26, r26
    3424:	0e d0       	rcall	.+28     	; 0x3442 <__addsf3x>
    3426:	48 c1       	rjmp	.+656    	; 0x36b8 <__fp_round>
    3428:	39 d1       	rcall	.+626    	; 0x369c <__fp_pscA>
    342a:	30 f0       	brcs	.+12     	; 0x3438 <__addsf3+0x18>
    342c:	3e d1       	rcall	.+636    	; 0x36aa <__fp_pscB>
    342e:	20 f0       	brcs	.+8      	; 0x3438 <__addsf3+0x18>
    3430:	31 f4       	brne	.+12     	; 0x343e <__addsf3+0x1e>
    3432:	9f 3f       	cpi	r25, 0xFF	; 255
    3434:	11 f4       	brne	.+4      	; 0x343a <__addsf3+0x1a>
    3436:	1e f4       	brtc	.+6      	; 0x343e <__addsf3+0x1e>
    3438:	2e c1       	rjmp	.+604    	; 0x3696 <__fp_nan>
    343a:	0e f4       	brtc	.+2      	; 0x343e <__addsf3+0x1e>
    343c:	e0 95       	com	r30
    343e:	e7 fb       	bst	r30, 7
    3440:	24 c1       	rjmp	.+584    	; 0x368a <__fp_inf>

00003442 <__addsf3x>:
    3442:	e9 2f       	mov	r30, r25
    3444:	4a d1       	rcall	.+660    	; 0x36da <__fp_split3>
    3446:	80 f3       	brcs	.-32     	; 0x3428 <__addsf3+0x8>
    3448:	ba 17       	cp	r27, r26
    344a:	62 07       	cpc	r22, r18
    344c:	73 07       	cpc	r23, r19
    344e:	84 07       	cpc	r24, r20
    3450:	95 07       	cpc	r25, r21
    3452:	18 f0       	brcs	.+6      	; 0x345a <__addsf3x+0x18>
    3454:	71 f4       	brne	.+28     	; 0x3472 <__addsf3x+0x30>
    3456:	9e f5       	brtc	.+102    	; 0x34be <__addsf3x+0x7c>
    3458:	62 c1       	rjmp	.+708    	; 0x371e <__fp_zero>
    345a:	0e f4       	brtc	.+2      	; 0x345e <__addsf3x+0x1c>
    345c:	e0 95       	com	r30
    345e:	0b 2e       	mov	r0, r27
    3460:	ba 2f       	mov	r27, r26
    3462:	a0 2d       	mov	r26, r0
    3464:	0b 01       	movw	r0, r22
    3466:	b9 01       	movw	r22, r18
    3468:	90 01       	movw	r18, r0
    346a:	0c 01       	movw	r0, r24
    346c:	ca 01       	movw	r24, r20
    346e:	a0 01       	movw	r20, r0
    3470:	11 24       	eor	r1, r1
    3472:	ff 27       	eor	r31, r31
    3474:	59 1b       	sub	r21, r25
    3476:	99 f0       	breq	.+38     	; 0x349e <__addsf3x+0x5c>
    3478:	59 3f       	cpi	r21, 0xF9	; 249
    347a:	50 f4       	brcc	.+20     	; 0x3490 <__addsf3x+0x4e>
    347c:	50 3e       	cpi	r21, 0xE0	; 224
    347e:	68 f1       	brcs	.+90     	; 0x34da <__addsf3x+0x98>
    3480:	1a 16       	cp	r1, r26
    3482:	f0 40       	sbci	r31, 0x00	; 0
    3484:	a2 2f       	mov	r26, r18
    3486:	23 2f       	mov	r18, r19
    3488:	34 2f       	mov	r19, r20
    348a:	44 27       	eor	r20, r20
    348c:	58 5f       	subi	r21, 0xF8	; 248
    348e:	f3 cf       	rjmp	.-26     	; 0x3476 <__addsf3x+0x34>
    3490:	46 95       	lsr	r20
    3492:	37 95       	ror	r19
    3494:	27 95       	ror	r18
    3496:	a7 95       	ror	r26
    3498:	f0 40       	sbci	r31, 0x00	; 0
    349a:	53 95       	inc	r21
    349c:	c9 f7       	brne	.-14     	; 0x3490 <__addsf3x+0x4e>
    349e:	7e f4       	brtc	.+30     	; 0x34be <__addsf3x+0x7c>
    34a0:	1f 16       	cp	r1, r31
    34a2:	ba 0b       	sbc	r27, r26
    34a4:	62 0b       	sbc	r22, r18
    34a6:	73 0b       	sbc	r23, r19
    34a8:	84 0b       	sbc	r24, r20
    34aa:	ba f0       	brmi	.+46     	; 0x34da <__addsf3x+0x98>
    34ac:	91 50       	subi	r25, 0x01	; 1
    34ae:	a1 f0       	breq	.+40     	; 0x34d8 <__addsf3x+0x96>
    34b0:	ff 0f       	add	r31, r31
    34b2:	bb 1f       	adc	r27, r27
    34b4:	66 1f       	adc	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	88 1f       	adc	r24, r24
    34ba:	c2 f7       	brpl	.-16     	; 0x34ac <__addsf3x+0x6a>
    34bc:	0e c0       	rjmp	.+28     	; 0x34da <__addsf3x+0x98>
    34be:	ba 0f       	add	r27, r26
    34c0:	62 1f       	adc	r22, r18
    34c2:	73 1f       	adc	r23, r19
    34c4:	84 1f       	adc	r24, r20
    34c6:	48 f4       	brcc	.+18     	; 0x34da <__addsf3x+0x98>
    34c8:	87 95       	ror	r24
    34ca:	77 95       	ror	r23
    34cc:	67 95       	ror	r22
    34ce:	b7 95       	ror	r27
    34d0:	f7 95       	ror	r31
    34d2:	9e 3f       	cpi	r25, 0xFE	; 254
    34d4:	08 f0       	brcs	.+2      	; 0x34d8 <__addsf3x+0x96>
    34d6:	b3 cf       	rjmp	.-154    	; 0x343e <__addsf3+0x1e>
    34d8:	93 95       	inc	r25
    34da:	88 0f       	add	r24, r24
    34dc:	08 f0       	brcs	.+2      	; 0x34e0 <__addsf3x+0x9e>
    34de:	99 27       	eor	r25, r25
    34e0:	ee 0f       	add	r30, r30
    34e2:	97 95       	ror	r25
    34e4:	87 95       	ror	r24
    34e6:	08 95       	ret

000034e8 <__divsf3>:
    34e8:	0c d0       	rcall	.+24     	; 0x3502 <__divsf3x>
    34ea:	e6 c0       	rjmp	.+460    	; 0x36b8 <__fp_round>
    34ec:	de d0       	rcall	.+444    	; 0x36aa <__fp_pscB>
    34ee:	40 f0       	brcs	.+16     	; 0x3500 <__divsf3+0x18>
    34f0:	d5 d0       	rcall	.+426    	; 0x369c <__fp_pscA>
    34f2:	30 f0       	brcs	.+12     	; 0x3500 <__divsf3+0x18>
    34f4:	21 f4       	brne	.+8      	; 0x34fe <__divsf3+0x16>
    34f6:	5f 3f       	cpi	r21, 0xFF	; 255
    34f8:	19 f0       	breq	.+6      	; 0x3500 <__divsf3+0x18>
    34fa:	c7 c0       	rjmp	.+398    	; 0x368a <__fp_inf>
    34fc:	51 11       	cpse	r21, r1
    34fe:	10 c1       	rjmp	.+544    	; 0x3720 <__fp_szero>
    3500:	ca c0       	rjmp	.+404    	; 0x3696 <__fp_nan>

00003502 <__divsf3x>:
    3502:	eb d0       	rcall	.+470    	; 0x36da <__fp_split3>
    3504:	98 f3       	brcs	.-26     	; 0x34ec <__divsf3+0x4>

00003506 <__divsf3_pse>:
    3506:	99 23       	and	r25, r25
    3508:	c9 f3       	breq	.-14     	; 0x34fc <__divsf3+0x14>
    350a:	55 23       	and	r21, r21
    350c:	b1 f3       	breq	.-20     	; 0x34fa <__divsf3+0x12>
    350e:	95 1b       	sub	r25, r21
    3510:	55 0b       	sbc	r21, r21
    3512:	bb 27       	eor	r27, r27
    3514:	aa 27       	eor	r26, r26
    3516:	62 17       	cp	r22, r18
    3518:	73 07       	cpc	r23, r19
    351a:	84 07       	cpc	r24, r20
    351c:	38 f0       	brcs	.+14     	; 0x352c <__divsf3_pse+0x26>
    351e:	9f 5f       	subi	r25, 0xFF	; 255
    3520:	5f 4f       	sbci	r21, 0xFF	; 255
    3522:	22 0f       	add	r18, r18
    3524:	33 1f       	adc	r19, r19
    3526:	44 1f       	adc	r20, r20
    3528:	aa 1f       	adc	r26, r26
    352a:	a9 f3       	breq	.-22     	; 0x3516 <__divsf3_pse+0x10>
    352c:	33 d0       	rcall	.+102    	; 0x3594 <__divsf3_pse+0x8e>
    352e:	0e 2e       	mov	r0, r30
    3530:	3a f0       	brmi	.+14     	; 0x3540 <__divsf3_pse+0x3a>
    3532:	e0 e8       	ldi	r30, 0x80	; 128
    3534:	30 d0       	rcall	.+96     	; 0x3596 <__divsf3_pse+0x90>
    3536:	91 50       	subi	r25, 0x01	; 1
    3538:	50 40       	sbci	r21, 0x00	; 0
    353a:	e6 95       	lsr	r30
    353c:	00 1c       	adc	r0, r0
    353e:	ca f7       	brpl	.-14     	; 0x3532 <__divsf3_pse+0x2c>
    3540:	29 d0       	rcall	.+82     	; 0x3594 <__divsf3_pse+0x8e>
    3542:	fe 2f       	mov	r31, r30
    3544:	27 d0       	rcall	.+78     	; 0x3594 <__divsf3_pse+0x8e>
    3546:	66 0f       	add	r22, r22
    3548:	77 1f       	adc	r23, r23
    354a:	88 1f       	adc	r24, r24
    354c:	bb 1f       	adc	r27, r27
    354e:	26 17       	cp	r18, r22
    3550:	37 07       	cpc	r19, r23
    3552:	48 07       	cpc	r20, r24
    3554:	ab 07       	cpc	r26, r27
    3556:	b0 e8       	ldi	r27, 0x80	; 128
    3558:	09 f0       	breq	.+2      	; 0x355c <__divsf3_pse+0x56>
    355a:	bb 0b       	sbc	r27, r27
    355c:	80 2d       	mov	r24, r0
    355e:	bf 01       	movw	r22, r30
    3560:	ff 27       	eor	r31, r31
    3562:	93 58       	subi	r25, 0x83	; 131
    3564:	5f 4f       	sbci	r21, 0xFF	; 255
    3566:	2a f0       	brmi	.+10     	; 0x3572 <__divsf3_pse+0x6c>
    3568:	9e 3f       	cpi	r25, 0xFE	; 254
    356a:	51 05       	cpc	r21, r1
    356c:	68 f0       	brcs	.+26     	; 0x3588 <__divsf3_pse+0x82>
    356e:	8d c0       	rjmp	.+282    	; 0x368a <__fp_inf>
    3570:	d7 c0       	rjmp	.+430    	; 0x3720 <__fp_szero>
    3572:	5f 3f       	cpi	r21, 0xFF	; 255
    3574:	ec f3       	brlt	.-6      	; 0x3570 <__divsf3_pse+0x6a>
    3576:	98 3e       	cpi	r25, 0xE8	; 232
    3578:	dc f3       	brlt	.-10     	; 0x3570 <__divsf3_pse+0x6a>
    357a:	86 95       	lsr	r24
    357c:	77 95       	ror	r23
    357e:	67 95       	ror	r22
    3580:	b7 95       	ror	r27
    3582:	f7 95       	ror	r31
    3584:	9f 5f       	subi	r25, 0xFF	; 255
    3586:	c9 f7       	brne	.-14     	; 0x357a <__divsf3_pse+0x74>
    3588:	88 0f       	add	r24, r24
    358a:	91 1d       	adc	r25, r1
    358c:	96 95       	lsr	r25
    358e:	87 95       	ror	r24
    3590:	97 f9       	bld	r25, 7
    3592:	08 95       	ret
    3594:	e1 e0       	ldi	r30, 0x01	; 1
    3596:	66 0f       	add	r22, r22
    3598:	77 1f       	adc	r23, r23
    359a:	88 1f       	adc	r24, r24
    359c:	bb 1f       	adc	r27, r27
    359e:	62 17       	cp	r22, r18
    35a0:	73 07       	cpc	r23, r19
    35a2:	84 07       	cpc	r24, r20
    35a4:	ba 07       	cpc	r27, r26
    35a6:	20 f0       	brcs	.+8      	; 0x35b0 <__divsf3_pse+0xaa>
    35a8:	62 1b       	sub	r22, r18
    35aa:	73 0b       	sbc	r23, r19
    35ac:	84 0b       	sbc	r24, r20
    35ae:	ba 0b       	sbc	r27, r26
    35b0:	ee 1f       	adc	r30, r30
    35b2:	88 f7       	brcc	.-30     	; 0x3596 <__divsf3_pse+0x90>
    35b4:	e0 95       	com	r30
    35b6:	08 95       	ret

000035b8 <__fixunssfsi>:
    35b8:	98 d0       	rcall	.+304    	; 0x36ea <__fp_splitA>
    35ba:	88 f0       	brcs	.+34     	; 0x35de <__fixunssfsi+0x26>
    35bc:	9f 57       	subi	r25, 0x7F	; 127
    35be:	90 f0       	brcs	.+36     	; 0x35e4 <__fixunssfsi+0x2c>
    35c0:	b9 2f       	mov	r27, r25
    35c2:	99 27       	eor	r25, r25
    35c4:	b7 51       	subi	r27, 0x17	; 23
    35c6:	a0 f0       	brcs	.+40     	; 0x35f0 <__fixunssfsi+0x38>
    35c8:	d1 f0       	breq	.+52     	; 0x35fe <__fixunssfsi+0x46>
    35ca:	66 0f       	add	r22, r22
    35cc:	77 1f       	adc	r23, r23
    35ce:	88 1f       	adc	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	1a f0       	brmi	.+6      	; 0x35da <__fixunssfsi+0x22>
    35d4:	ba 95       	dec	r27
    35d6:	c9 f7       	brne	.-14     	; 0x35ca <__fixunssfsi+0x12>
    35d8:	12 c0       	rjmp	.+36     	; 0x35fe <__fixunssfsi+0x46>
    35da:	b1 30       	cpi	r27, 0x01	; 1
    35dc:	81 f0       	breq	.+32     	; 0x35fe <__fixunssfsi+0x46>
    35de:	9f d0       	rcall	.+318    	; 0x371e <__fp_zero>
    35e0:	b1 e0       	ldi	r27, 0x01	; 1
    35e2:	08 95       	ret
    35e4:	9c c0       	rjmp	.+312    	; 0x371e <__fp_zero>
    35e6:	67 2f       	mov	r22, r23
    35e8:	78 2f       	mov	r23, r24
    35ea:	88 27       	eor	r24, r24
    35ec:	b8 5f       	subi	r27, 0xF8	; 248
    35ee:	39 f0       	breq	.+14     	; 0x35fe <__fixunssfsi+0x46>
    35f0:	b9 3f       	cpi	r27, 0xF9	; 249
    35f2:	cc f3       	brlt	.-14     	; 0x35e6 <__fixunssfsi+0x2e>
    35f4:	86 95       	lsr	r24
    35f6:	77 95       	ror	r23
    35f8:	67 95       	ror	r22
    35fa:	b3 95       	inc	r27
    35fc:	d9 f7       	brne	.-10     	; 0x35f4 <__fixunssfsi+0x3c>
    35fe:	3e f4       	brtc	.+14     	; 0x360e <__fixunssfsi+0x56>
    3600:	90 95       	com	r25
    3602:	80 95       	com	r24
    3604:	70 95       	com	r23
    3606:	61 95       	neg	r22
    3608:	7f 4f       	sbci	r23, 0xFF	; 255
    360a:	8f 4f       	sbci	r24, 0xFF	; 255
    360c:	9f 4f       	sbci	r25, 0xFF	; 255
    360e:	08 95       	ret

00003610 <__floatunsisf>:
    3610:	e8 94       	clt
    3612:	09 c0       	rjmp	.+18     	; 0x3626 <__floatsisf+0x12>

00003614 <__floatsisf>:
    3614:	97 fb       	bst	r25, 7
    3616:	3e f4       	brtc	.+14     	; 0x3626 <__floatsisf+0x12>
    3618:	90 95       	com	r25
    361a:	80 95       	com	r24
    361c:	70 95       	com	r23
    361e:	61 95       	neg	r22
    3620:	7f 4f       	sbci	r23, 0xFF	; 255
    3622:	8f 4f       	sbci	r24, 0xFF	; 255
    3624:	9f 4f       	sbci	r25, 0xFF	; 255
    3626:	99 23       	and	r25, r25
    3628:	a9 f0       	breq	.+42     	; 0x3654 <__floatsisf+0x40>
    362a:	f9 2f       	mov	r31, r25
    362c:	96 e9       	ldi	r25, 0x96	; 150
    362e:	bb 27       	eor	r27, r27
    3630:	93 95       	inc	r25
    3632:	f6 95       	lsr	r31
    3634:	87 95       	ror	r24
    3636:	77 95       	ror	r23
    3638:	67 95       	ror	r22
    363a:	b7 95       	ror	r27
    363c:	f1 11       	cpse	r31, r1
    363e:	f8 cf       	rjmp	.-16     	; 0x3630 <__floatsisf+0x1c>
    3640:	fa f4       	brpl	.+62     	; 0x3680 <__floatsisf+0x6c>
    3642:	bb 0f       	add	r27, r27
    3644:	11 f4       	brne	.+4      	; 0x364a <__floatsisf+0x36>
    3646:	60 ff       	sbrs	r22, 0
    3648:	1b c0       	rjmp	.+54     	; 0x3680 <__floatsisf+0x6c>
    364a:	6f 5f       	subi	r22, 0xFF	; 255
    364c:	7f 4f       	sbci	r23, 0xFF	; 255
    364e:	8f 4f       	sbci	r24, 0xFF	; 255
    3650:	9f 4f       	sbci	r25, 0xFF	; 255
    3652:	16 c0       	rjmp	.+44     	; 0x3680 <__floatsisf+0x6c>
    3654:	88 23       	and	r24, r24
    3656:	11 f0       	breq	.+4      	; 0x365c <__floatsisf+0x48>
    3658:	96 e9       	ldi	r25, 0x96	; 150
    365a:	11 c0       	rjmp	.+34     	; 0x367e <__floatsisf+0x6a>
    365c:	77 23       	and	r23, r23
    365e:	21 f0       	breq	.+8      	; 0x3668 <__floatsisf+0x54>
    3660:	9e e8       	ldi	r25, 0x8E	; 142
    3662:	87 2f       	mov	r24, r23
    3664:	76 2f       	mov	r23, r22
    3666:	05 c0       	rjmp	.+10     	; 0x3672 <__floatsisf+0x5e>
    3668:	66 23       	and	r22, r22
    366a:	71 f0       	breq	.+28     	; 0x3688 <__floatsisf+0x74>
    366c:	96 e8       	ldi	r25, 0x86	; 134
    366e:	86 2f       	mov	r24, r22
    3670:	70 e0       	ldi	r23, 0x00	; 0
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	2a f0       	brmi	.+10     	; 0x3680 <__floatsisf+0x6c>
    3676:	9a 95       	dec	r25
    3678:	66 0f       	add	r22, r22
    367a:	77 1f       	adc	r23, r23
    367c:	88 1f       	adc	r24, r24
    367e:	da f7       	brpl	.-10     	; 0x3676 <__floatsisf+0x62>
    3680:	88 0f       	add	r24, r24
    3682:	96 95       	lsr	r25
    3684:	87 95       	ror	r24
    3686:	97 f9       	bld	r25, 7
    3688:	08 95       	ret

0000368a <__fp_inf>:
    368a:	97 f9       	bld	r25, 7
    368c:	9f 67       	ori	r25, 0x7F	; 127
    368e:	80 e8       	ldi	r24, 0x80	; 128
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	08 95       	ret

00003696 <__fp_nan>:
    3696:	9f ef       	ldi	r25, 0xFF	; 255
    3698:	80 ec       	ldi	r24, 0xC0	; 192
    369a:	08 95       	ret

0000369c <__fp_pscA>:
    369c:	00 24       	eor	r0, r0
    369e:	0a 94       	dec	r0
    36a0:	16 16       	cp	r1, r22
    36a2:	17 06       	cpc	r1, r23
    36a4:	18 06       	cpc	r1, r24
    36a6:	09 06       	cpc	r0, r25
    36a8:	08 95       	ret

000036aa <__fp_pscB>:
    36aa:	00 24       	eor	r0, r0
    36ac:	0a 94       	dec	r0
    36ae:	12 16       	cp	r1, r18
    36b0:	13 06       	cpc	r1, r19
    36b2:	14 06       	cpc	r1, r20
    36b4:	05 06       	cpc	r0, r21
    36b6:	08 95       	ret

000036b8 <__fp_round>:
    36b8:	09 2e       	mov	r0, r25
    36ba:	03 94       	inc	r0
    36bc:	00 0c       	add	r0, r0
    36be:	11 f4       	brne	.+4      	; 0x36c4 <__fp_round+0xc>
    36c0:	88 23       	and	r24, r24
    36c2:	52 f0       	brmi	.+20     	; 0x36d8 <__fp_round+0x20>
    36c4:	bb 0f       	add	r27, r27
    36c6:	40 f4       	brcc	.+16     	; 0x36d8 <__fp_round+0x20>
    36c8:	bf 2b       	or	r27, r31
    36ca:	11 f4       	brne	.+4      	; 0x36d0 <__fp_round+0x18>
    36cc:	60 ff       	sbrs	r22, 0
    36ce:	04 c0       	rjmp	.+8      	; 0x36d8 <__fp_round+0x20>
    36d0:	6f 5f       	subi	r22, 0xFF	; 255
    36d2:	7f 4f       	sbci	r23, 0xFF	; 255
    36d4:	8f 4f       	sbci	r24, 0xFF	; 255
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	08 95       	ret

000036da <__fp_split3>:
    36da:	57 fd       	sbrc	r21, 7
    36dc:	90 58       	subi	r25, 0x80	; 128
    36de:	44 0f       	add	r20, r20
    36e0:	55 1f       	adc	r21, r21
    36e2:	59 f0       	breq	.+22     	; 0x36fa <__fp_splitA+0x10>
    36e4:	5f 3f       	cpi	r21, 0xFF	; 255
    36e6:	71 f0       	breq	.+28     	; 0x3704 <__fp_splitA+0x1a>
    36e8:	47 95       	ror	r20

000036ea <__fp_splitA>:
    36ea:	88 0f       	add	r24, r24
    36ec:	97 fb       	bst	r25, 7
    36ee:	99 1f       	adc	r25, r25
    36f0:	61 f0       	breq	.+24     	; 0x370a <__fp_splitA+0x20>
    36f2:	9f 3f       	cpi	r25, 0xFF	; 255
    36f4:	79 f0       	breq	.+30     	; 0x3714 <__fp_splitA+0x2a>
    36f6:	87 95       	ror	r24
    36f8:	08 95       	ret
    36fa:	12 16       	cp	r1, r18
    36fc:	13 06       	cpc	r1, r19
    36fe:	14 06       	cpc	r1, r20
    3700:	55 1f       	adc	r21, r21
    3702:	f2 cf       	rjmp	.-28     	; 0x36e8 <__fp_split3+0xe>
    3704:	46 95       	lsr	r20
    3706:	f1 df       	rcall	.-30     	; 0x36ea <__fp_splitA>
    3708:	08 c0       	rjmp	.+16     	; 0x371a <__fp_splitA+0x30>
    370a:	16 16       	cp	r1, r22
    370c:	17 06       	cpc	r1, r23
    370e:	18 06       	cpc	r1, r24
    3710:	99 1f       	adc	r25, r25
    3712:	f1 cf       	rjmp	.-30     	; 0x36f6 <__fp_splitA+0xc>
    3714:	86 95       	lsr	r24
    3716:	71 05       	cpc	r23, r1
    3718:	61 05       	cpc	r22, r1
    371a:	08 94       	sec
    371c:	08 95       	ret

0000371e <__fp_zero>:
    371e:	e8 94       	clt

00003720 <__fp_szero>:
    3720:	bb 27       	eor	r27, r27
    3722:	66 27       	eor	r22, r22
    3724:	77 27       	eor	r23, r23
    3726:	cb 01       	movw	r24, r22
    3728:	97 f9       	bld	r25, 7
    372a:	08 95       	ret

0000372c <__mulsf3>:
    372c:	0b d0       	rcall	.+22     	; 0x3744 <__mulsf3x>
    372e:	c4 cf       	rjmp	.-120    	; 0x36b8 <__fp_round>
    3730:	b5 df       	rcall	.-150    	; 0x369c <__fp_pscA>
    3732:	28 f0       	brcs	.+10     	; 0x373e <__mulsf3+0x12>
    3734:	ba df       	rcall	.-140    	; 0x36aa <__fp_pscB>
    3736:	18 f0       	brcs	.+6      	; 0x373e <__mulsf3+0x12>
    3738:	95 23       	and	r25, r21
    373a:	09 f0       	breq	.+2      	; 0x373e <__mulsf3+0x12>
    373c:	a6 cf       	rjmp	.-180    	; 0x368a <__fp_inf>
    373e:	ab cf       	rjmp	.-170    	; 0x3696 <__fp_nan>
    3740:	11 24       	eor	r1, r1
    3742:	ee cf       	rjmp	.-36     	; 0x3720 <__fp_szero>

00003744 <__mulsf3x>:
    3744:	ca df       	rcall	.-108    	; 0x36da <__fp_split3>
    3746:	a0 f3       	brcs	.-24     	; 0x3730 <__mulsf3+0x4>

00003748 <__mulsf3_pse>:
    3748:	95 9f       	mul	r25, r21
    374a:	d1 f3       	breq	.-12     	; 0x3740 <__mulsf3+0x14>
    374c:	95 0f       	add	r25, r21
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	55 1f       	adc	r21, r21
    3752:	62 9f       	mul	r22, r18
    3754:	f0 01       	movw	r30, r0
    3756:	72 9f       	mul	r23, r18
    3758:	bb 27       	eor	r27, r27
    375a:	f0 0d       	add	r31, r0
    375c:	b1 1d       	adc	r27, r1
    375e:	63 9f       	mul	r22, r19
    3760:	aa 27       	eor	r26, r26
    3762:	f0 0d       	add	r31, r0
    3764:	b1 1d       	adc	r27, r1
    3766:	aa 1f       	adc	r26, r26
    3768:	64 9f       	mul	r22, r20
    376a:	66 27       	eor	r22, r22
    376c:	b0 0d       	add	r27, r0
    376e:	a1 1d       	adc	r26, r1
    3770:	66 1f       	adc	r22, r22
    3772:	82 9f       	mul	r24, r18
    3774:	22 27       	eor	r18, r18
    3776:	b0 0d       	add	r27, r0
    3778:	a1 1d       	adc	r26, r1
    377a:	62 1f       	adc	r22, r18
    377c:	73 9f       	mul	r23, r19
    377e:	b0 0d       	add	r27, r0
    3780:	a1 1d       	adc	r26, r1
    3782:	62 1f       	adc	r22, r18
    3784:	83 9f       	mul	r24, r19
    3786:	a0 0d       	add	r26, r0
    3788:	61 1d       	adc	r22, r1
    378a:	22 1f       	adc	r18, r18
    378c:	74 9f       	mul	r23, r20
    378e:	33 27       	eor	r19, r19
    3790:	a0 0d       	add	r26, r0
    3792:	61 1d       	adc	r22, r1
    3794:	23 1f       	adc	r18, r19
    3796:	84 9f       	mul	r24, r20
    3798:	60 0d       	add	r22, r0
    379a:	21 1d       	adc	r18, r1
    379c:	82 2f       	mov	r24, r18
    379e:	76 2f       	mov	r23, r22
    37a0:	6a 2f       	mov	r22, r26
    37a2:	11 24       	eor	r1, r1
    37a4:	9f 57       	subi	r25, 0x7F	; 127
    37a6:	50 40       	sbci	r21, 0x00	; 0
    37a8:	8a f0       	brmi	.+34     	; 0x37cc <__mulsf3_pse+0x84>
    37aa:	e1 f0       	breq	.+56     	; 0x37e4 <__mulsf3_pse+0x9c>
    37ac:	88 23       	and	r24, r24
    37ae:	4a f0       	brmi	.+18     	; 0x37c2 <__mulsf3_pse+0x7a>
    37b0:	ee 0f       	add	r30, r30
    37b2:	ff 1f       	adc	r31, r31
    37b4:	bb 1f       	adc	r27, r27
    37b6:	66 1f       	adc	r22, r22
    37b8:	77 1f       	adc	r23, r23
    37ba:	88 1f       	adc	r24, r24
    37bc:	91 50       	subi	r25, 0x01	; 1
    37be:	50 40       	sbci	r21, 0x00	; 0
    37c0:	a9 f7       	brne	.-22     	; 0x37ac <__mulsf3_pse+0x64>
    37c2:	9e 3f       	cpi	r25, 0xFE	; 254
    37c4:	51 05       	cpc	r21, r1
    37c6:	70 f0       	brcs	.+28     	; 0x37e4 <__mulsf3_pse+0x9c>
    37c8:	60 cf       	rjmp	.-320    	; 0x368a <__fp_inf>
    37ca:	aa cf       	rjmp	.-172    	; 0x3720 <__fp_szero>
    37cc:	5f 3f       	cpi	r21, 0xFF	; 255
    37ce:	ec f3       	brlt	.-6      	; 0x37ca <__mulsf3_pse+0x82>
    37d0:	98 3e       	cpi	r25, 0xE8	; 232
    37d2:	dc f3       	brlt	.-10     	; 0x37ca <__mulsf3_pse+0x82>
    37d4:	86 95       	lsr	r24
    37d6:	77 95       	ror	r23
    37d8:	67 95       	ror	r22
    37da:	b7 95       	ror	r27
    37dc:	f7 95       	ror	r31
    37de:	e7 95       	ror	r30
    37e0:	9f 5f       	subi	r25, 0xFF	; 255
    37e2:	c1 f7       	brne	.-16     	; 0x37d4 <__mulsf3_pse+0x8c>
    37e4:	fe 2b       	or	r31, r30
    37e6:	88 0f       	add	r24, r24
    37e8:	91 1d       	adc	r25, r1
    37ea:	96 95       	lsr	r25
    37ec:	87 95       	ror	r24
    37ee:	97 f9       	bld	r25, 7
    37f0:	08 95       	ret

000037f2 <__udivmodhi4>:
    37f2:	aa 1b       	sub	r26, r26
    37f4:	bb 1b       	sub	r27, r27
    37f6:	51 e1       	ldi	r21, 0x11	; 17
    37f8:	07 c0       	rjmp	.+14     	; 0x3808 <__udivmodhi4_ep>

000037fa <__udivmodhi4_loop>:
    37fa:	aa 1f       	adc	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	a6 17       	cp	r26, r22
    3800:	b7 07       	cpc	r27, r23
    3802:	10 f0       	brcs	.+4      	; 0x3808 <__udivmodhi4_ep>
    3804:	a6 1b       	sub	r26, r22
    3806:	b7 0b       	sbc	r27, r23

00003808 <__udivmodhi4_ep>:
    3808:	88 1f       	adc	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	5a 95       	dec	r21
    380e:	a9 f7       	brne	.-22     	; 0x37fa <__udivmodhi4_loop>
    3810:	80 95       	com	r24
    3812:	90 95       	com	r25
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	08 95       	ret

0000381a <__divmodhi4>:
    381a:	97 fb       	bst	r25, 7
    381c:	07 2e       	mov	r0, r23
    381e:	16 f4       	brtc	.+4      	; 0x3824 <__divmodhi4+0xa>
    3820:	00 94       	com	r0
    3822:	06 d0       	rcall	.+12     	; 0x3830 <__divmodhi4_neg1>
    3824:	77 fd       	sbrc	r23, 7
    3826:	08 d0       	rcall	.+16     	; 0x3838 <__divmodhi4_neg2>
    3828:	e4 df       	rcall	.-56     	; 0x37f2 <__udivmodhi4>
    382a:	07 fc       	sbrc	r0, 7
    382c:	05 d0       	rcall	.+10     	; 0x3838 <__divmodhi4_neg2>
    382e:	3e f4       	brtc	.+14     	; 0x383e <__divmodhi4_exit>

00003830 <__divmodhi4_neg1>:
    3830:	90 95       	com	r25
    3832:	81 95       	neg	r24
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	08 95       	ret

00003838 <__divmodhi4_neg2>:
    3838:	70 95       	com	r23
    383a:	61 95       	neg	r22
    383c:	7f 4f       	sbci	r23, 0xFF	; 255

0000383e <__divmodhi4_exit>:
    383e:	08 95       	ret

00003840 <__udivmodsi4>:
    3840:	a1 e2       	ldi	r26, 0x21	; 33
    3842:	1a 2e       	mov	r1, r26
    3844:	aa 1b       	sub	r26, r26
    3846:	bb 1b       	sub	r27, r27
    3848:	fd 01       	movw	r30, r26
    384a:	0d c0       	rjmp	.+26     	; 0x3866 <__udivmodsi4_ep>

0000384c <__udivmodsi4_loop>:
    384c:	aa 1f       	adc	r26, r26
    384e:	bb 1f       	adc	r27, r27
    3850:	ee 1f       	adc	r30, r30
    3852:	ff 1f       	adc	r31, r31
    3854:	a2 17       	cp	r26, r18
    3856:	b3 07       	cpc	r27, r19
    3858:	e4 07       	cpc	r30, r20
    385a:	f5 07       	cpc	r31, r21
    385c:	20 f0       	brcs	.+8      	; 0x3866 <__udivmodsi4_ep>
    385e:	a2 1b       	sub	r26, r18
    3860:	b3 0b       	sbc	r27, r19
    3862:	e4 0b       	sbc	r30, r20
    3864:	f5 0b       	sbc	r31, r21

00003866 <__udivmodsi4_ep>:
    3866:	66 1f       	adc	r22, r22
    3868:	77 1f       	adc	r23, r23
    386a:	88 1f       	adc	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	1a 94       	dec	r1
    3870:	69 f7       	brne	.-38     	; 0x384c <__udivmodsi4_loop>
    3872:	60 95       	com	r22
    3874:	70 95       	com	r23
    3876:	80 95       	com	r24
    3878:	90 95       	com	r25
    387a:	9b 01       	movw	r18, r22
    387c:	ac 01       	movw	r20, r24
    387e:	bd 01       	movw	r22, r26
    3880:	cf 01       	movw	r24, r30
    3882:	08 95       	ret

00003884 <__usmulhisi3>:
    3884:	0b d0       	rcall	.+22     	; 0x389c <__umulhisi3>

00003886 <__usmulhisi3_tail>:
    3886:	b7 ff       	sbrs	r27, 7
    3888:	08 95       	ret
    388a:	82 1b       	sub	r24, r18
    388c:	93 0b       	sbc	r25, r19
    388e:	08 95       	ret

00003890 <__mulshisi3>:
    3890:	b7 ff       	sbrs	r27, 7
    3892:	13 c0       	rjmp	.+38     	; 0x38ba <__muluhisi3>

00003894 <__mulohisi3>:
    3894:	12 d0       	rcall	.+36     	; 0x38ba <__muluhisi3>
    3896:	82 1b       	sub	r24, r18
    3898:	93 0b       	sbc	r25, r19
    389a:	08 95       	ret

0000389c <__umulhisi3>:
    389c:	a2 9f       	mul	r26, r18
    389e:	b0 01       	movw	r22, r0
    38a0:	b3 9f       	mul	r27, r19
    38a2:	c0 01       	movw	r24, r0
    38a4:	a3 9f       	mul	r26, r19
    38a6:	70 0d       	add	r23, r0
    38a8:	81 1d       	adc	r24, r1
    38aa:	11 24       	eor	r1, r1
    38ac:	91 1d       	adc	r25, r1
    38ae:	b2 9f       	mul	r27, r18
    38b0:	70 0d       	add	r23, r0
    38b2:	81 1d       	adc	r24, r1
    38b4:	11 24       	eor	r1, r1
    38b6:	91 1d       	adc	r25, r1
    38b8:	08 95       	ret

000038ba <__muluhisi3>:
    38ba:	f0 df       	rcall	.-32     	; 0x389c <__umulhisi3>
    38bc:	a5 9f       	mul	r26, r21
    38be:	90 0d       	add	r25, r0
    38c0:	b4 9f       	mul	r27, r20
    38c2:	90 0d       	add	r25, r0
    38c4:	a4 9f       	mul	r26, r20
    38c6:	80 0d       	add	r24, r0
    38c8:	91 1d       	adc	r25, r1
    38ca:	11 24       	eor	r1, r1
    38cc:	08 95       	ret

000038ce <malloc>:
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	82 30       	cpi	r24, 0x02	; 2
    38d8:	91 05       	cpc	r25, r1
    38da:	10 f4       	brcc	.+4      	; 0x38e0 <malloc+0x12>
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	e0 91 39 24 	lds	r30, 0x2439	; 0x802439 <__flp>
    38e4:	f0 91 3a 24 	lds	r31, 0x243A	; 0x80243a <__flp+0x1>
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	a0 e0       	ldi	r26, 0x00	; 0
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	30 97       	sbiw	r30, 0x00	; 0
    38f2:	19 f1       	breq	.+70     	; 0x393a <malloc+0x6c>
    38f4:	40 81       	ld	r20, Z
    38f6:	51 81       	ldd	r21, Z+1	; 0x01
    38f8:	02 81       	ldd	r16, Z+2	; 0x02
    38fa:	13 81       	ldd	r17, Z+3	; 0x03
    38fc:	48 17       	cp	r20, r24
    38fe:	59 07       	cpc	r21, r25
    3900:	c8 f0       	brcs	.+50     	; 0x3934 <malloc+0x66>
    3902:	84 17       	cp	r24, r20
    3904:	95 07       	cpc	r25, r21
    3906:	69 f4       	brne	.+26     	; 0x3922 <malloc+0x54>
    3908:	10 97       	sbiw	r26, 0x00	; 0
    390a:	31 f0       	breq	.+12     	; 0x3918 <malloc+0x4a>
    390c:	12 96       	adiw	r26, 0x02	; 2
    390e:	0c 93       	st	X, r16
    3910:	12 97       	sbiw	r26, 0x02	; 2
    3912:	13 96       	adiw	r26, 0x03	; 3
    3914:	1c 93       	st	X, r17
    3916:	27 c0       	rjmp	.+78     	; 0x3966 <malloc+0x98>
    3918:	00 93 39 24 	sts	0x2439, r16	; 0x802439 <__flp>
    391c:	10 93 3a 24 	sts	0x243A, r17	; 0x80243a <__flp+0x1>
    3920:	22 c0       	rjmp	.+68     	; 0x3966 <malloc+0x98>
    3922:	21 15       	cp	r18, r1
    3924:	31 05       	cpc	r19, r1
    3926:	19 f0       	breq	.+6      	; 0x392e <malloc+0x60>
    3928:	42 17       	cp	r20, r18
    392a:	53 07       	cpc	r21, r19
    392c:	18 f4       	brcc	.+6      	; 0x3934 <malloc+0x66>
    392e:	9a 01       	movw	r18, r20
    3930:	bd 01       	movw	r22, r26
    3932:	ef 01       	movw	r28, r30
    3934:	df 01       	movw	r26, r30
    3936:	f8 01       	movw	r30, r16
    3938:	db cf       	rjmp	.-74     	; 0x38f0 <malloc+0x22>
    393a:	21 15       	cp	r18, r1
    393c:	31 05       	cpc	r19, r1
    393e:	f9 f0       	breq	.+62     	; 0x397e <malloc+0xb0>
    3940:	28 1b       	sub	r18, r24
    3942:	39 0b       	sbc	r19, r25
    3944:	24 30       	cpi	r18, 0x04	; 4
    3946:	31 05       	cpc	r19, r1
    3948:	80 f4       	brcc	.+32     	; 0x396a <malloc+0x9c>
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
    394c:	9b 81       	ldd	r25, Y+3	; 0x03
    394e:	61 15       	cp	r22, r1
    3950:	71 05       	cpc	r23, r1
    3952:	21 f0       	breq	.+8      	; 0x395c <malloc+0x8e>
    3954:	fb 01       	movw	r30, r22
    3956:	82 83       	std	Z+2, r24	; 0x02
    3958:	93 83       	std	Z+3, r25	; 0x03
    395a:	04 c0       	rjmp	.+8      	; 0x3964 <malloc+0x96>
    395c:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <__flp>
    3960:	90 93 3a 24 	sts	0x243A, r25	; 0x80243a <__flp+0x1>
    3964:	fe 01       	movw	r30, r28
    3966:	32 96       	adiw	r30, 0x02	; 2
    3968:	44 c0       	rjmp	.+136    	; 0x39f2 <malloc+0x124>
    396a:	fe 01       	movw	r30, r28
    396c:	e2 0f       	add	r30, r18
    396e:	f3 1f       	adc	r31, r19
    3970:	81 93       	st	Z+, r24
    3972:	91 93       	st	Z+, r25
    3974:	22 50       	subi	r18, 0x02	; 2
    3976:	31 09       	sbc	r19, r1
    3978:	28 83       	st	Y, r18
    397a:	39 83       	std	Y+1, r19	; 0x01
    397c:	3a c0       	rjmp	.+116    	; 0x39f2 <malloc+0x124>
    397e:	20 91 37 24 	lds	r18, 0x2437	; 0x802437 <__brkval>
    3982:	30 91 38 24 	lds	r19, 0x2438	; 0x802438 <__brkval+0x1>
    3986:	23 2b       	or	r18, r19
    3988:	41 f4       	brne	.+16     	; 0x399a <malloc+0xcc>
    398a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    398e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3992:	20 93 37 24 	sts	0x2437, r18	; 0x802437 <__brkval>
    3996:	30 93 38 24 	sts	0x2438, r19	; 0x802438 <__brkval+0x1>
    399a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    399e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    39a2:	21 15       	cp	r18, r1
    39a4:	31 05       	cpc	r19, r1
    39a6:	41 f4       	brne	.+16     	; 0x39b8 <malloc+0xea>
    39a8:	2d b7       	in	r18, 0x3d	; 61
    39aa:	3e b7       	in	r19, 0x3e	; 62
    39ac:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    39b0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    39b4:	24 1b       	sub	r18, r20
    39b6:	35 0b       	sbc	r19, r21
    39b8:	e0 91 37 24 	lds	r30, 0x2437	; 0x802437 <__brkval>
    39bc:	f0 91 38 24 	lds	r31, 0x2438	; 0x802438 <__brkval+0x1>
    39c0:	e2 17       	cp	r30, r18
    39c2:	f3 07       	cpc	r31, r19
    39c4:	a0 f4       	brcc	.+40     	; 0x39ee <malloc+0x120>
    39c6:	2e 1b       	sub	r18, r30
    39c8:	3f 0b       	sbc	r19, r31
    39ca:	28 17       	cp	r18, r24
    39cc:	39 07       	cpc	r19, r25
    39ce:	78 f0       	brcs	.+30     	; 0x39ee <malloc+0x120>
    39d0:	ac 01       	movw	r20, r24
    39d2:	4e 5f       	subi	r20, 0xFE	; 254
    39d4:	5f 4f       	sbci	r21, 0xFF	; 255
    39d6:	24 17       	cp	r18, r20
    39d8:	35 07       	cpc	r19, r21
    39da:	48 f0       	brcs	.+18     	; 0x39ee <malloc+0x120>
    39dc:	4e 0f       	add	r20, r30
    39de:	5f 1f       	adc	r21, r31
    39e0:	40 93 37 24 	sts	0x2437, r20	; 0x802437 <__brkval>
    39e4:	50 93 38 24 	sts	0x2438, r21	; 0x802438 <__brkval+0x1>
    39e8:	81 93       	st	Z+, r24
    39ea:	91 93       	st	Z+, r25
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <malloc+0x124>
    39ee:	e0 e0       	ldi	r30, 0x00	; 0
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	cf 01       	movw	r24, r30
    39f4:	df 91       	pop	r29
    39f6:	cf 91       	pop	r28
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	08 95       	ret

000039fe <free>:
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <free+0xa>
    3a06:	81 c0       	rjmp	.+258    	; 0x3b0a <free+0x10c>
    3a08:	fc 01       	movw	r30, r24
    3a0a:	32 97       	sbiw	r30, 0x02	; 2
    3a0c:	12 82       	std	Z+2, r1	; 0x02
    3a0e:	13 82       	std	Z+3, r1	; 0x03
    3a10:	a0 91 39 24 	lds	r26, 0x2439	; 0x802439 <__flp>
    3a14:	b0 91 3a 24 	lds	r27, 0x243A	; 0x80243a <__flp+0x1>
    3a18:	10 97       	sbiw	r26, 0x00	; 0
    3a1a:	81 f4       	brne	.+32     	; 0x3a3c <free+0x3e>
    3a1c:	20 81       	ld	r18, Z
    3a1e:	31 81       	ldd	r19, Z+1	; 0x01
    3a20:	82 0f       	add	r24, r18
    3a22:	93 1f       	adc	r25, r19
    3a24:	20 91 37 24 	lds	r18, 0x2437	; 0x802437 <__brkval>
    3a28:	30 91 38 24 	lds	r19, 0x2438	; 0x802438 <__brkval+0x1>
    3a2c:	28 17       	cp	r18, r24
    3a2e:	39 07       	cpc	r19, r25
    3a30:	51 f5       	brne	.+84     	; 0x3a86 <free+0x88>
    3a32:	e0 93 37 24 	sts	0x2437, r30	; 0x802437 <__brkval>
    3a36:	f0 93 38 24 	sts	0x2438, r31	; 0x802438 <__brkval+0x1>
    3a3a:	67 c0       	rjmp	.+206    	; 0x3b0a <free+0x10c>
    3a3c:	ed 01       	movw	r28, r26
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	ce 17       	cp	r28, r30
    3a44:	df 07       	cpc	r29, r31
    3a46:	40 f4       	brcc	.+16     	; 0x3a58 <free+0x5a>
    3a48:	4a 81       	ldd	r20, Y+2	; 0x02
    3a4a:	5b 81       	ldd	r21, Y+3	; 0x03
    3a4c:	9e 01       	movw	r18, r28
    3a4e:	41 15       	cp	r20, r1
    3a50:	51 05       	cpc	r21, r1
    3a52:	f1 f0       	breq	.+60     	; 0x3a90 <free+0x92>
    3a54:	ea 01       	movw	r28, r20
    3a56:	f5 cf       	rjmp	.-22     	; 0x3a42 <free+0x44>
    3a58:	c2 83       	std	Z+2, r28	; 0x02
    3a5a:	d3 83       	std	Z+3, r29	; 0x03
    3a5c:	40 81       	ld	r20, Z
    3a5e:	51 81       	ldd	r21, Z+1	; 0x01
    3a60:	84 0f       	add	r24, r20
    3a62:	95 1f       	adc	r25, r21
    3a64:	c8 17       	cp	r28, r24
    3a66:	d9 07       	cpc	r29, r25
    3a68:	59 f4       	brne	.+22     	; 0x3a80 <free+0x82>
    3a6a:	88 81       	ld	r24, Y
    3a6c:	99 81       	ldd	r25, Y+1	; 0x01
    3a6e:	84 0f       	add	r24, r20
    3a70:	95 1f       	adc	r25, r21
    3a72:	02 96       	adiw	r24, 0x02	; 2
    3a74:	80 83       	st	Z, r24
    3a76:	91 83       	std	Z+1, r25	; 0x01
    3a78:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7c:	82 83       	std	Z+2, r24	; 0x02
    3a7e:	93 83       	std	Z+3, r25	; 0x03
    3a80:	21 15       	cp	r18, r1
    3a82:	31 05       	cpc	r19, r1
    3a84:	29 f4       	brne	.+10     	; 0x3a90 <free+0x92>
    3a86:	e0 93 39 24 	sts	0x2439, r30	; 0x802439 <__flp>
    3a8a:	f0 93 3a 24 	sts	0x243A, r31	; 0x80243a <__flp+0x1>
    3a8e:	3d c0       	rjmp	.+122    	; 0x3b0a <free+0x10c>
    3a90:	e9 01       	movw	r28, r18
    3a92:	ea 83       	std	Y+2, r30	; 0x02
    3a94:	fb 83       	std	Y+3, r31	; 0x03
    3a96:	49 91       	ld	r20, Y+
    3a98:	59 91       	ld	r21, Y+
    3a9a:	c4 0f       	add	r28, r20
    3a9c:	d5 1f       	adc	r29, r21
    3a9e:	ec 17       	cp	r30, r28
    3aa0:	fd 07       	cpc	r31, r29
    3aa2:	61 f4       	brne	.+24     	; 0x3abc <free+0xbe>
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	84 0f       	add	r24, r20
    3aaa:	95 1f       	adc	r25, r21
    3aac:	02 96       	adiw	r24, 0x02	; 2
    3aae:	e9 01       	movw	r28, r18
    3ab0:	88 83       	st	Y, r24
    3ab2:	99 83       	std	Y+1, r25	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	8a 83       	std	Y+2, r24	; 0x02
    3aba:	9b 83       	std	Y+3, r25	; 0x03
    3abc:	e0 e0       	ldi	r30, 0x00	; 0
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	12 96       	adiw	r26, 0x02	; 2
    3ac2:	8d 91       	ld	r24, X+
    3ac4:	9c 91       	ld	r25, X
    3ac6:	13 97       	sbiw	r26, 0x03	; 3
    3ac8:	00 97       	sbiw	r24, 0x00	; 0
    3aca:	19 f0       	breq	.+6      	; 0x3ad2 <free+0xd4>
    3acc:	fd 01       	movw	r30, r26
    3ace:	dc 01       	movw	r26, r24
    3ad0:	f7 cf       	rjmp	.-18     	; 0x3ac0 <free+0xc2>
    3ad2:	8d 91       	ld	r24, X+
    3ad4:	9c 91       	ld	r25, X
    3ad6:	11 97       	sbiw	r26, 0x01	; 1
    3ad8:	9d 01       	movw	r18, r26
    3ada:	2e 5f       	subi	r18, 0xFE	; 254
    3adc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ade:	82 0f       	add	r24, r18
    3ae0:	93 1f       	adc	r25, r19
    3ae2:	20 91 37 24 	lds	r18, 0x2437	; 0x802437 <__brkval>
    3ae6:	30 91 38 24 	lds	r19, 0x2438	; 0x802438 <__brkval+0x1>
    3aea:	28 17       	cp	r18, r24
    3aec:	39 07       	cpc	r19, r25
    3aee:	69 f4       	brne	.+26     	; 0x3b0a <free+0x10c>
    3af0:	30 97       	sbiw	r30, 0x00	; 0
    3af2:	29 f4       	brne	.+10     	; 0x3afe <free+0x100>
    3af4:	10 92 39 24 	sts	0x2439, r1	; 0x802439 <__flp>
    3af8:	10 92 3a 24 	sts	0x243A, r1	; 0x80243a <__flp+0x1>
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <free+0x104>
    3afe:	12 82       	std	Z+2, r1	; 0x02
    3b00:	13 82       	std	Z+3, r1	; 0x03
    3b02:	a0 93 37 24 	sts	0x2437, r26	; 0x802437 <__brkval>
    3b06:	b0 93 38 24 	sts	0x2438, r27	; 0x802438 <__brkval+0x1>
    3b0a:	df 91       	pop	r29
    3b0c:	cf 91       	pop	r28
    3b0e:	08 95       	ret

00003b10 <fdevopen>:
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	cf 93       	push	r28
    3b16:	df 93       	push	r29
    3b18:	00 97       	sbiw	r24, 0x00	; 0
    3b1a:	31 f4       	brne	.+12     	; 0x3b28 <fdevopen+0x18>
    3b1c:	61 15       	cp	r22, r1
    3b1e:	71 05       	cpc	r23, r1
    3b20:	19 f4       	brne	.+6      	; 0x3b28 <fdevopen+0x18>
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	39 c0       	rjmp	.+114    	; 0x3b9a <fdevopen+0x8a>
    3b28:	8b 01       	movw	r16, r22
    3b2a:	ec 01       	movw	r28, r24
    3b2c:	6e e0       	ldi	r22, 0x0E	; 14
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	76 d2       	rcall	.+1260   	; 0x4022 <calloc>
    3b36:	fc 01       	movw	r30, r24
    3b38:	89 2b       	or	r24, r25
    3b3a:	99 f3       	breq	.-26     	; 0x3b22 <fdevopen+0x12>
    3b3c:	80 e8       	ldi	r24, 0x80	; 128
    3b3e:	83 83       	std	Z+3, r24	; 0x03
    3b40:	01 15       	cp	r16, r1
    3b42:	11 05       	cpc	r17, r1
    3b44:	71 f0       	breq	.+28     	; 0x3b62 <fdevopen+0x52>
    3b46:	02 87       	std	Z+10, r16	; 0x0a
    3b48:	13 87       	std	Z+11, r17	; 0x0b
    3b4a:	81 e8       	ldi	r24, 0x81	; 129
    3b4c:	83 83       	std	Z+3, r24	; 0x03
    3b4e:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <__iob>
    3b52:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <__iob+0x1>
    3b56:	89 2b       	or	r24, r25
    3b58:	21 f4       	brne	.+8      	; 0x3b62 <fdevopen+0x52>
    3b5a:	e0 93 3b 24 	sts	0x243B, r30	; 0x80243b <__iob>
    3b5e:	f0 93 3c 24 	sts	0x243C, r31	; 0x80243c <__iob+0x1>
    3b62:	20 97       	sbiw	r28, 0x00	; 0
    3b64:	c9 f0       	breq	.+50     	; 0x3b98 <fdevopen+0x88>
    3b66:	c0 87       	std	Z+8, r28	; 0x08
    3b68:	d1 87       	std	Z+9, r29	; 0x09
    3b6a:	83 81       	ldd	r24, Z+3	; 0x03
    3b6c:	82 60       	ori	r24, 0x02	; 2
    3b6e:	83 83       	std	Z+3, r24	; 0x03
    3b70:	80 91 3d 24 	lds	r24, 0x243D	; 0x80243d <__iob+0x2>
    3b74:	90 91 3e 24 	lds	r25, 0x243E	; 0x80243e <__iob+0x3>
    3b78:	89 2b       	or	r24, r25
    3b7a:	71 f4       	brne	.+28     	; 0x3b98 <fdevopen+0x88>
    3b7c:	e0 93 3d 24 	sts	0x243D, r30	; 0x80243d <__iob+0x2>
    3b80:	f0 93 3e 24 	sts	0x243E, r31	; 0x80243e <__iob+0x3>
    3b84:	80 91 3f 24 	lds	r24, 0x243F	; 0x80243f <__iob+0x4>
    3b88:	90 91 40 24 	lds	r25, 0x2440	; 0x802440 <__iob+0x5>
    3b8c:	89 2b       	or	r24, r25
    3b8e:	21 f4       	brne	.+8      	; 0x3b98 <fdevopen+0x88>
    3b90:	e0 93 3f 24 	sts	0x243F, r30	; 0x80243f <__iob+0x4>
    3b94:	f0 93 40 24 	sts	0x2440, r31	; 0x802440 <__iob+0x5>
    3b98:	cf 01       	movw	r24, r30
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	08 95       	ret

00003ba4 <printf>:
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	ae 01       	movw	r20, r28
    3bae:	4a 5f       	subi	r20, 0xFA	; 250
    3bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bb2:	fa 01       	movw	r30, r20
    3bb4:	61 91       	ld	r22, Z+
    3bb6:	71 91       	ld	r23, Z+
    3bb8:	af 01       	movw	r20, r30
    3bba:	80 91 3d 24 	lds	r24, 0x243D	; 0x80243d <__iob+0x2>
    3bbe:	90 91 3e 24 	lds	r25, 0x243E	; 0x80243e <__iob+0x3>
    3bc2:	38 d0       	rcall	.+112    	; 0x3c34 <vfprintf>
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	08 95       	ret

00003bca <putchar>:
    3bca:	60 91 3d 24 	lds	r22, 0x243D	; 0x80243d <__iob+0x2>
    3bce:	70 91 3e 24 	lds	r23, 0x243E	; 0x80243e <__iob+0x3>
    3bd2:	5e c2       	rjmp	.+1212   	; 0x4090 <fputc>

00003bd4 <puts>:
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	e0 91 3d 24 	lds	r30, 0x243D	; 0x80243d <__iob+0x2>
    3be0:	f0 91 3e 24 	lds	r31, 0x243E	; 0x80243e <__iob+0x3>
    3be4:	23 81       	ldd	r18, Z+3	; 0x03
    3be6:	21 ff       	sbrs	r18, 1
    3be8:	1b c0       	rjmp	.+54     	; 0x3c20 <puts+0x4c>
    3bea:	8c 01       	movw	r16, r24
    3bec:	d0 e0       	ldi	r29, 0x00	; 0
    3bee:	c0 e0       	ldi	r28, 0x00	; 0
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	81 91       	ld	r24, Z+
    3bf4:	8f 01       	movw	r16, r30
    3bf6:	60 91 3d 24 	lds	r22, 0x243D	; 0x80243d <__iob+0x2>
    3bfa:	70 91 3e 24 	lds	r23, 0x243E	; 0x80243e <__iob+0x3>
    3bfe:	db 01       	movw	r26, r22
    3c00:	18 96       	adiw	r26, 0x08	; 8
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	19 97       	sbiw	r26, 0x09	; 9
    3c08:	88 23       	and	r24, r24
    3c0a:	31 f0       	breq	.+12     	; 0x3c18 <puts+0x44>
    3c0c:	19 95       	eicall
    3c0e:	89 2b       	or	r24, r25
    3c10:	79 f3       	breq	.-34     	; 0x3bf0 <puts+0x1c>
    3c12:	df ef       	ldi	r29, 0xFF	; 255
    3c14:	cf ef       	ldi	r28, 0xFF	; 255
    3c16:	ec cf       	rjmp	.-40     	; 0x3bf0 <puts+0x1c>
    3c18:	8a e0       	ldi	r24, 0x0A	; 10
    3c1a:	19 95       	eicall
    3c1c:	89 2b       	or	r24, r25
    3c1e:	19 f0       	breq	.+6      	; 0x3c26 <puts+0x52>
    3c20:	8f ef       	ldi	r24, 0xFF	; 255
    3c22:	9f ef       	ldi	r25, 0xFF	; 255
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <puts+0x56>
    3c26:	8d 2f       	mov	r24, r29
    3c28:	9c 2f       	mov	r25, r28
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	1f 91       	pop	r17
    3c30:	0f 91       	pop	r16
    3c32:	08 95       	ret

00003c34 <vfprintf>:
    3c34:	2f 92       	push	r2
    3c36:	3f 92       	push	r3
    3c38:	4f 92       	push	r4
    3c3a:	5f 92       	push	r5
    3c3c:	6f 92       	push	r6
    3c3e:	7f 92       	push	r7
    3c40:	8f 92       	push	r8
    3c42:	9f 92       	push	r9
    3c44:	af 92       	push	r10
    3c46:	bf 92       	push	r11
    3c48:	cf 92       	push	r12
    3c4a:	df 92       	push	r13
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	2b 97       	sbiw	r28, 0x0b	; 11
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	6c 01       	movw	r12, r24
    3c64:	7b 01       	movw	r14, r22
    3c66:	8a 01       	movw	r16, r20
    3c68:	fc 01       	movw	r30, r24
    3c6a:	16 82       	std	Z+6, r1	; 0x06
    3c6c:	17 82       	std	Z+7, r1	; 0x07
    3c6e:	83 81       	ldd	r24, Z+3	; 0x03
    3c70:	81 ff       	sbrs	r24, 1
    3c72:	bf c1       	rjmp	.+894    	; 0x3ff2 <vfprintf+0x3be>
    3c74:	ce 01       	movw	r24, r28
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	3c 01       	movw	r6, r24
    3c7a:	f6 01       	movw	r30, r12
    3c7c:	93 81       	ldd	r25, Z+3	; 0x03
    3c7e:	f7 01       	movw	r30, r14
    3c80:	93 fd       	sbrc	r25, 3
    3c82:	85 91       	lpm	r24, Z+
    3c84:	93 ff       	sbrs	r25, 3
    3c86:	81 91       	ld	r24, Z+
    3c88:	7f 01       	movw	r14, r30
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <vfprintf+0x5c>
    3c8e:	ad c1       	rjmp	.+858    	; 0x3fea <vfprintf+0x3b6>
    3c90:	85 32       	cpi	r24, 0x25	; 37
    3c92:	39 f4       	brne	.+14     	; 0x3ca2 <vfprintf+0x6e>
    3c94:	93 fd       	sbrc	r25, 3
    3c96:	85 91       	lpm	r24, Z+
    3c98:	93 ff       	sbrs	r25, 3
    3c9a:	81 91       	ld	r24, Z+
    3c9c:	7f 01       	movw	r14, r30
    3c9e:	85 32       	cpi	r24, 0x25	; 37
    3ca0:	21 f4       	brne	.+8      	; 0x3caa <vfprintf+0x76>
    3ca2:	b6 01       	movw	r22, r12
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	f4 d1       	rcall	.+1000   	; 0x4090 <fputc>
    3ca8:	e8 cf       	rjmp	.-48     	; 0x3c7a <vfprintf+0x46>
    3caa:	91 2c       	mov	r9, r1
    3cac:	21 2c       	mov	r2, r1
    3cae:	31 2c       	mov	r3, r1
    3cb0:	ff e1       	ldi	r31, 0x1F	; 31
    3cb2:	f3 15       	cp	r31, r3
    3cb4:	d8 f0       	brcs	.+54     	; 0x3cec <vfprintf+0xb8>
    3cb6:	8b 32       	cpi	r24, 0x2B	; 43
    3cb8:	79 f0       	breq	.+30     	; 0x3cd8 <vfprintf+0xa4>
    3cba:	38 f4       	brcc	.+14     	; 0x3cca <vfprintf+0x96>
    3cbc:	80 32       	cpi	r24, 0x20	; 32
    3cbe:	79 f0       	breq	.+30     	; 0x3cde <vfprintf+0xaa>
    3cc0:	83 32       	cpi	r24, 0x23	; 35
    3cc2:	a1 f4       	brne	.+40     	; 0x3cec <vfprintf+0xb8>
    3cc4:	23 2d       	mov	r18, r3
    3cc6:	20 61       	ori	r18, 0x10	; 16
    3cc8:	1d c0       	rjmp	.+58     	; 0x3d04 <vfprintf+0xd0>
    3cca:	8d 32       	cpi	r24, 0x2D	; 45
    3ccc:	61 f0       	breq	.+24     	; 0x3ce6 <vfprintf+0xb2>
    3cce:	80 33       	cpi	r24, 0x30	; 48
    3cd0:	69 f4       	brne	.+26     	; 0x3cec <vfprintf+0xb8>
    3cd2:	23 2d       	mov	r18, r3
    3cd4:	21 60       	ori	r18, 0x01	; 1
    3cd6:	16 c0       	rjmp	.+44     	; 0x3d04 <vfprintf+0xd0>
    3cd8:	83 2d       	mov	r24, r3
    3cda:	82 60       	ori	r24, 0x02	; 2
    3cdc:	38 2e       	mov	r3, r24
    3cde:	e3 2d       	mov	r30, r3
    3ce0:	e4 60       	ori	r30, 0x04	; 4
    3ce2:	3e 2e       	mov	r3, r30
    3ce4:	2a c0       	rjmp	.+84     	; 0x3d3a <vfprintf+0x106>
    3ce6:	f3 2d       	mov	r31, r3
    3ce8:	f8 60       	ori	r31, 0x08	; 8
    3cea:	1d c0       	rjmp	.+58     	; 0x3d26 <vfprintf+0xf2>
    3cec:	37 fc       	sbrc	r3, 7
    3cee:	2d c0       	rjmp	.+90     	; 0x3d4a <vfprintf+0x116>
    3cf0:	20 ed       	ldi	r18, 0xD0	; 208
    3cf2:	28 0f       	add	r18, r24
    3cf4:	2a 30       	cpi	r18, 0x0A	; 10
    3cf6:	40 f0       	brcs	.+16     	; 0x3d08 <vfprintf+0xd4>
    3cf8:	8e 32       	cpi	r24, 0x2E	; 46
    3cfa:	b9 f4       	brne	.+46     	; 0x3d2a <vfprintf+0xf6>
    3cfc:	36 fc       	sbrc	r3, 6
    3cfe:	75 c1       	rjmp	.+746    	; 0x3fea <vfprintf+0x3b6>
    3d00:	23 2d       	mov	r18, r3
    3d02:	20 64       	ori	r18, 0x40	; 64
    3d04:	32 2e       	mov	r3, r18
    3d06:	19 c0       	rjmp	.+50     	; 0x3d3a <vfprintf+0x106>
    3d08:	36 fe       	sbrs	r3, 6
    3d0a:	06 c0       	rjmp	.+12     	; 0x3d18 <vfprintf+0xe4>
    3d0c:	8a e0       	ldi	r24, 0x0A	; 10
    3d0e:	98 9e       	mul	r9, r24
    3d10:	20 0d       	add	r18, r0
    3d12:	11 24       	eor	r1, r1
    3d14:	92 2e       	mov	r9, r18
    3d16:	11 c0       	rjmp	.+34     	; 0x3d3a <vfprintf+0x106>
    3d18:	ea e0       	ldi	r30, 0x0A	; 10
    3d1a:	2e 9e       	mul	r2, r30
    3d1c:	20 0d       	add	r18, r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	22 2e       	mov	r2, r18
    3d22:	f3 2d       	mov	r31, r3
    3d24:	f0 62       	ori	r31, 0x20	; 32
    3d26:	3f 2e       	mov	r3, r31
    3d28:	08 c0       	rjmp	.+16     	; 0x3d3a <vfprintf+0x106>
    3d2a:	8c 36       	cpi	r24, 0x6C	; 108
    3d2c:	21 f4       	brne	.+8      	; 0x3d36 <vfprintf+0x102>
    3d2e:	83 2d       	mov	r24, r3
    3d30:	80 68       	ori	r24, 0x80	; 128
    3d32:	38 2e       	mov	r3, r24
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <vfprintf+0x106>
    3d36:	88 36       	cpi	r24, 0x68	; 104
    3d38:	41 f4       	brne	.+16     	; 0x3d4a <vfprintf+0x116>
    3d3a:	f7 01       	movw	r30, r14
    3d3c:	93 fd       	sbrc	r25, 3
    3d3e:	85 91       	lpm	r24, Z+
    3d40:	93 ff       	sbrs	r25, 3
    3d42:	81 91       	ld	r24, Z+
    3d44:	7f 01       	movw	r14, r30
    3d46:	81 11       	cpse	r24, r1
    3d48:	b3 cf       	rjmp	.-154    	; 0x3cb0 <vfprintf+0x7c>
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	9f 7d       	andi	r25, 0xDF	; 223
    3d4e:	95 54       	subi	r25, 0x45	; 69
    3d50:	93 30       	cpi	r25, 0x03	; 3
    3d52:	28 f4       	brcc	.+10     	; 0x3d5e <vfprintf+0x12a>
    3d54:	0c 5f       	subi	r16, 0xFC	; 252
    3d56:	1f 4f       	sbci	r17, 0xFF	; 255
    3d58:	9f e3       	ldi	r25, 0x3F	; 63
    3d5a:	99 83       	std	Y+1, r25	; 0x01
    3d5c:	0d c0       	rjmp	.+26     	; 0x3d78 <vfprintf+0x144>
    3d5e:	83 36       	cpi	r24, 0x63	; 99
    3d60:	31 f0       	breq	.+12     	; 0x3d6e <vfprintf+0x13a>
    3d62:	83 37       	cpi	r24, 0x73	; 115
    3d64:	71 f0       	breq	.+28     	; 0x3d82 <vfprintf+0x14e>
    3d66:	83 35       	cpi	r24, 0x53	; 83
    3d68:	09 f0       	breq	.+2      	; 0x3d6c <vfprintf+0x138>
    3d6a:	55 c0       	rjmp	.+170    	; 0x3e16 <vfprintf+0x1e2>
    3d6c:	20 c0       	rjmp	.+64     	; 0x3dae <vfprintf+0x17a>
    3d6e:	f8 01       	movw	r30, r16
    3d70:	80 81       	ld	r24, Z
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	0e 5f       	subi	r16, 0xFE	; 254
    3d76:	1f 4f       	sbci	r17, 0xFF	; 255
    3d78:	88 24       	eor	r8, r8
    3d7a:	83 94       	inc	r8
    3d7c:	91 2c       	mov	r9, r1
    3d7e:	53 01       	movw	r10, r6
    3d80:	12 c0       	rjmp	.+36     	; 0x3da6 <vfprintf+0x172>
    3d82:	28 01       	movw	r4, r16
    3d84:	f2 e0       	ldi	r31, 0x02	; 2
    3d86:	4f 0e       	add	r4, r31
    3d88:	51 1c       	adc	r5, r1
    3d8a:	f8 01       	movw	r30, r16
    3d8c:	a0 80       	ld	r10, Z
    3d8e:	b1 80       	ldd	r11, Z+1	; 0x01
    3d90:	36 fe       	sbrs	r3, 6
    3d92:	03 c0       	rjmp	.+6      	; 0x3d9a <vfprintf+0x166>
    3d94:	69 2d       	mov	r22, r9
    3d96:	70 e0       	ldi	r23, 0x00	; 0
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <vfprintf+0x16a>
    3d9a:	6f ef       	ldi	r22, 0xFF	; 255
    3d9c:	7f ef       	ldi	r23, 0xFF	; 255
    3d9e:	c5 01       	movw	r24, r10
    3da0:	6c d1       	rcall	.+728    	; 0x407a <strnlen>
    3da2:	4c 01       	movw	r8, r24
    3da4:	82 01       	movw	r16, r4
    3da6:	f3 2d       	mov	r31, r3
    3da8:	ff 77       	andi	r31, 0x7F	; 127
    3daa:	3f 2e       	mov	r3, r31
    3dac:	15 c0       	rjmp	.+42     	; 0x3dd8 <vfprintf+0x1a4>
    3dae:	28 01       	movw	r4, r16
    3db0:	22 e0       	ldi	r18, 0x02	; 2
    3db2:	42 0e       	add	r4, r18
    3db4:	51 1c       	adc	r5, r1
    3db6:	f8 01       	movw	r30, r16
    3db8:	a0 80       	ld	r10, Z
    3dba:	b1 80       	ldd	r11, Z+1	; 0x01
    3dbc:	36 fe       	sbrs	r3, 6
    3dbe:	03 c0       	rjmp	.+6      	; 0x3dc6 <vfprintf+0x192>
    3dc0:	69 2d       	mov	r22, r9
    3dc2:	70 e0       	ldi	r23, 0x00	; 0
    3dc4:	02 c0       	rjmp	.+4      	; 0x3dca <vfprintf+0x196>
    3dc6:	6f ef       	ldi	r22, 0xFF	; 255
    3dc8:	7f ef       	ldi	r23, 0xFF	; 255
    3dca:	c5 01       	movw	r24, r10
    3dcc:	44 d1       	rcall	.+648    	; 0x4056 <strnlen_P>
    3dce:	4c 01       	movw	r8, r24
    3dd0:	f3 2d       	mov	r31, r3
    3dd2:	f0 68       	ori	r31, 0x80	; 128
    3dd4:	3f 2e       	mov	r3, r31
    3dd6:	82 01       	movw	r16, r4
    3dd8:	33 fc       	sbrc	r3, 3
    3dda:	19 c0       	rjmp	.+50     	; 0x3e0e <vfprintf+0x1da>
    3ddc:	82 2d       	mov	r24, r2
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	88 16       	cp	r8, r24
    3de2:	99 06       	cpc	r9, r25
    3de4:	a0 f4       	brcc	.+40     	; 0x3e0e <vfprintf+0x1da>
    3de6:	b6 01       	movw	r22, r12
    3de8:	80 e2       	ldi	r24, 0x20	; 32
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	51 d1       	rcall	.+674    	; 0x4090 <fputc>
    3dee:	2a 94       	dec	r2
    3df0:	f5 cf       	rjmp	.-22     	; 0x3ddc <vfprintf+0x1a8>
    3df2:	f5 01       	movw	r30, r10
    3df4:	37 fc       	sbrc	r3, 7
    3df6:	85 91       	lpm	r24, Z+
    3df8:	37 fe       	sbrs	r3, 7
    3dfa:	81 91       	ld	r24, Z+
    3dfc:	5f 01       	movw	r10, r30
    3dfe:	b6 01       	movw	r22, r12
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	46 d1       	rcall	.+652    	; 0x4090 <fputc>
    3e04:	21 10       	cpse	r2, r1
    3e06:	2a 94       	dec	r2
    3e08:	21 e0       	ldi	r18, 0x01	; 1
    3e0a:	82 1a       	sub	r8, r18
    3e0c:	91 08       	sbc	r9, r1
    3e0e:	81 14       	cp	r8, r1
    3e10:	91 04       	cpc	r9, r1
    3e12:	79 f7       	brne	.-34     	; 0x3df2 <vfprintf+0x1be>
    3e14:	e1 c0       	rjmp	.+450    	; 0x3fd8 <vfprintf+0x3a4>
    3e16:	84 36       	cpi	r24, 0x64	; 100
    3e18:	11 f0       	breq	.+4      	; 0x3e1e <vfprintf+0x1ea>
    3e1a:	89 36       	cpi	r24, 0x69	; 105
    3e1c:	39 f5       	brne	.+78     	; 0x3e6c <vfprintf+0x238>
    3e1e:	f8 01       	movw	r30, r16
    3e20:	37 fe       	sbrs	r3, 7
    3e22:	07 c0       	rjmp	.+14     	; 0x3e32 <vfprintf+0x1fe>
    3e24:	60 81       	ld	r22, Z
    3e26:	71 81       	ldd	r23, Z+1	; 0x01
    3e28:	82 81       	ldd	r24, Z+2	; 0x02
    3e2a:	93 81       	ldd	r25, Z+3	; 0x03
    3e2c:	0c 5f       	subi	r16, 0xFC	; 252
    3e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e30:	08 c0       	rjmp	.+16     	; 0x3e42 <vfprintf+0x20e>
    3e32:	60 81       	ld	r22, Z
    3e34:	71 81       	ldd	r23, Z+1	; 0x01
    3e36:	07 2e       	mov	r0, r23
    3e38:	00 0c       	add	r0, r0
    3e3a:	88 0b       	sbc	r24, r24
    3e3c:	99 0b       	sbc	r25, r25
    3e3e:	0e 5f       	subi	r16, 0xFE	; 254
    3e40:	1f 4f       	sbci	r17, 0xFF	; 255
    3e42:	f3 2d       	mov	r31, r3
    3e44:	ff 76       	andi	r31, 0x6F	; 111
    3e46:	3f 2e       	mov	r3, r31
    3e48:	97 ff       	sbrs	r25, 7
    3e4a:	09 c0       	rjmp	.+18     	; 0x3e5e <vfprintf+0x22a>
    3e4c:	90 95       	com	r25
    3e4e:	80 95       	com	r24
    3e50:	70 95       	com	r23
    3e52:	61 95       	neg	r22
    3e54:	7f 4f       	sbci	r23, 0xFF	; 255
    3e56:	8f 4f       	sbci	r24, 0xFF	; 255
    3e58:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5a:	f0 68       	ori	r31, 0x80	; 128
    3e5c:	3f 2e       	mov	r3, r31
    3e5e:	2a e0       	ldi	r18, 0x0A	; 10
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	a3 01       	movw	r20, r6
    3e64:	51 d1       	rcall	.+674    	; 0x4108 <__ultoa_invert>
    3e66:	88 2e       	mov	r8, r24
    3e68:	86 18       	sub	r8, r6
    3e6a:	44 c0       	rjmp	.+136    	; 0x3ef4 <vfprintf+0x2c0>
    3e6c:	85 37       	cpi	r24, 0x75	; 117
    3e6e:	31 f4       	brne	.+12     	; 0x3e7c <vfprintf+0x248>
    3e70:	23 2d       	mov	r18, r3
    3e72:	2f 7e       	andi	r18, 0xEF	; 239
    3e74:	b2 2e       	mov	r11, r18
    3e76:	2a e0       	ldi	r18, 0x0A	; 10
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	25 c0       	rjmp	.+74     	; 0x3ec6 <vfprintf+0x292>
    3e7c:	93 2d       	mov	r25, r3
    3e7e:	99 7f       	andi	r25, 0xF9	; 249
    3e80:	b9 2e       	mov	r11, r25
    3e82:	8f 36       	cpi	r24, 0x6F	; 111
    3e84:	c1 f0       	breq	.+48     	; 0x3eb6 <vfprintf+0x282>
    3e86:	18 f4       	brcc	.+6      	; 0x3e8e <vfprintf+0x25a>
    3e88:	88 35       	cpi	r24, 0x58	; 88
    3e8a:	79 f0       	breq	.+30     	; 0x3eaa <vfprintf+0x276>
    3e8c:	ae c0       	rjmp	.+348    	; 0x3fea <vfprintf+0x3b6>
    3e8e:	80 37       	cpi	r24, 0x70	; 112
    3e90:	19 f0       	breq	.+6      	; 0x3e98 <vfprintf+0x264>
    3e92:	88 37       	cpi	r24, 0x78	; 120
    3e94:	21 f0       	breq	.+8      	; 0x3e9e <vfprintf+0x26a>
    3e96:	a9 c0       	rjmp	.+338    	; 0x3fea <vfprintf+0x3b6>
    3e98:	e9 2f       	mov	r30, r25
    3e9a:	e0 61       	ori	r30, 0x10	; 16
    3e9c:	be 2e       	mov	r11, r30
    3e9e:	b4 fe       	sbrs	r11, 4
    3ea0:	0d c0       	rjmp	.+26     	; 0x3ebc <vfprintf+0x288>
    3ea2:	fb 2d       	mov	r31, r11
    3ea4:	f4 60       	ori	r31, 0x04	; 4
    3ea6:	bf 2e       	mov	r11, r31
    3ea8:	09 c0       	rjmp	.+18     	; 0x3ebc <vfprintf+0x288>
    3eaa:	34 fe       	sbrs	r3, 4
    3eac:	0a c0       	rjmp	.+20     	; 0x3ec2 <vfprintf+0x28e>
    3eae:	29 2f       	mov	r18, r25
    3eb0:	26 60       	ori	r18, 0x06	; 6
    3eb2:	b2 2e       	mov	r11, r18
    3eb4:	06 c0       	rjmp	.+12     	; 0x3ec2 <vfprintf+0x28e>
    3eb6:	28 e0       	ldi	r18, 0x08	; 8
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	05 c0       	rjmp	.+10     	; 0x3ec6 <vfprintf+0x292>
    3ebc:	20 e1       	ldi	r18, 0x10	; 16
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	02 c0       	rjmp	.+4      	; 0x3ec6 <vfprintf+0x292>
    3ec2:	20 e1       	ldi	r18, 0x10	; 16
    3ec4:	32 e0       	ldi	r19, 0x02	; 2
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	b7 fe       	sbrs	r11, 7
    3eca:	07 c0       	rjmp	.+14     	; 0x3eda <vfprintf+0x2a6>
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	82 81       	ldd	r24, Z+2	; 0x02
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	0c 5f       	subi	r16, 0xFC	; 252
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	06 c0       	rjmp	.+12     	; 0x3ee6 <vfprintf+0x2b2>
    3eda:	60 81       	ld	r22, Z
    3edc:	71 81       	ldd	r23, Z+1	; 0x01
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	0e 5f       	subi	r16, 0xFE	; 254
    3ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee6:	a3 01       	movw	r20, r6
    3ee8:	0f d1       	rcall	.+542    	; 0x4108 <__ultoa_invert>
    3eea:	88 2e       	mov	r8, r24
    3eec:	86 18       	sub	r8, r6
    3eee:	fb 2d       	mov	r31, r11
    3ef0:	ff 77       	andi	r31, 0x7F	; 127
    3ef2:	3f 2e       	mov	r3, r31
    3ef4:	36 fe       	sbrs	r3, 6
    3ef6:	0d c0       	rjmp	.+26     	; 0x3f12 <vfprintf+0x2de>
    3ef8:	23 2d       	mov	r18, r3
    3efa:	2e 7f       	andi	r18, 0xFE	; 254
    3efc:	a2 2e       	mov	r10, r18
    3efe:	89 14       	cp	r8, r9
    3f00:	58 f4       	brcc	.+22     	; 0x3f18 <vfprintf+0x2e4>
    3f02:	34 fe       	sbrs	r3, 4
    3f04:	0b c0       	rjmp	.+22     	; 0x3f1c <vfprintf+0x2e8>
    3f06:	32 fc       	sbrc	r3, 2
    3f08:	09 c0       	rjmp	.+18     	; 0x3f1c <vfprintf+0x2e8>
    3f0a:	83 2d       	mov	r24, r3
    3f0c:	8e 7e       	andi	r24, 0xEE	; 238
    3f0e:	a8 2e       	mov	r10, r24
    3f10:	05 c0       	rjmp	.+10     	; 0x3f1c <vfprintf+0x2e8>
    3f12:	b8 2c       	mov	r11, r8
    3f14:	a3 2c       	mov	r10, r3
    3f16:	03 c0       	rjmp	.+6      	; 0x3f1e <vfprintf+0x2ea>
    3f18:	b8 2c       	mov	r11, r8
    3f1a:	01 c0       	rjmp	.+2      	; 0x3f1e <vfprintf+0x2ea>
    3f1c:	b9 2c       	mov	r11, r9
    3f1e:	a4 fe       	sbrs	r10, 4
    3f20:	0f c0       	rjmp	.+30     	; 0x3f40 <vfprintf+0x30c>
    3f22:	fe 01       	movw	r30, r28
    3f24:	e8 0d       	add	r30, r8
    3f26:	f1 1d       	adc	r31, r1
    3f28:	80 81       	ld	r24, Z
    3f2a:	80 33       	cpi	r24, 0x30	; 48
    3f2c:	21 f4       	brne	.+8      	; 0x3f36 <vfprintf+0x302>
    3f2e:	9a 2d       	mov	r25, r10
    3f30:	99 7e       	andi	r25, 0xE9	; 233
    3f32:	a9 2e       	mov	r10, r25
    3f34:	09 c0       	rjmp	.+18     	; 0x3f48 <vfprintf+0x314>
    3f36:	a2 fe       	sbrs	r10, 2
    3f38:	06 c0       	rjmp	.+12     	; 0x3f46 <vfprintf+0x312>
    3f3a:	b3 94       	inc	r11
    3f3c:	b3 94       	inc	r11
    3f3e:	04 c0       	rjmp	.+8      	; 0x3f48 <vfprintf+0x314>
    3f40:	8a 2d       	mov	r24, r10
    3f42:	86 78       	andi	r24, 0x86	; 134
    3f44:	09 f0       	breq	.+2      	; 0x3f48 <vfprintf+0x314>
    3f46:	b3 94       	inc	r11
    3f48:	a3 fc       	sbrc	r10, 3
    3f4a:	10 c0       	rjmp	.+32     	; 0x3f6c <vfprintf+0x338>
    3f4c:	a0 fe       	sbrs	r10, 0
    3f4e:	06 c0       	rjmp	.+12     	; 0x3f5c <vfprintf+0x328>
    3f50:	b2 14       	cp	r11, r2
    3f52:	80 f4       	brcc	.+32     	; 0x3f74 <vfprintf+0x340>
    3f54:	28 0c       	add	r2, r8
    3f56:	92 2c       	mov	r9, r2
    3f58:	9b 18       	sub	r9, r11
    3f5a:	0d c0       	rjmp	.+26     	; 0x3f76 <vfprintf+0x342>
    3f5c:	b2 14       	cp	r11, r2
    3f5e:	58 f4       	brcc	.+22     	; 0x3f76 <vfprintf+0x342>
    3f60:	b6 01       	movw	r22, r12
    3f62:	80 e2       	ldi	r24, 0x20	; 32
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	94 d0       	rcall	.+296    	; 0x4090 <fputc>
    3f68:	b3 94       	inc	r11
    3f6a:	f8 cf       	rjmp	.-16     	; 0x3f5c <vfprintf+0x328>
    3f6c:	b2 14       	cp	r11, r2
    3f6e:	18 f4       	brcc	.+6      	; 0x3f76 <vfprintf+0x342>
    3f70:	2b 18       	sub	r2, r11
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <vfprintf+0x344>
    3f74:	98 2c       	mov	r9, r8
    3f76:	21 2c       	mov	r2, r1
    3f78:	a4 fe       	sbrs	r10, 4
    3f7a:	0f c0       	rjmp	.+30     	; 0x3f9a <vfprintf+0x366>
    3f7c:	b6 01       	movw	r22, r12
    3f7e:	80 e3       	ldi	r24, 0x30	; 48
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	86 d0       	rcall	.+268    	; 0x4090 <fputc>
    3f84:	a2 fe       	sbrs	r10, 2
    3f86:	16 c0       	rjmp	.+44     	; 0x3fb4 <vfprintf+0x380>
    3f88:	a1 fc       	sbrc	r10, 1
    3f8a:	03 c0       	rjmp	.+6      	; 0x3f92 <vfprintf+0x35e>
    3f8c:	88 e7       	ldi	r24, 0x78	; 120
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	02 c0       	rjmp	.+4      	; 0x3f96 <vfprintf+0x362>
    3f92:	88 e5       	ldi	r24, 0x58	; 88
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	b6 01       	movw	r22, r12
    3f98:	0c c0       	rjmp	.+24     	; 0x3fb2 <vfprintf+0x37e>
    3f9a:	8a 2d       	mov	r24, r10
    3f9c:	86 78       	andi	r24, 0x86	; 134
    3f9e:	51 f0       	breq	.+20     	; 0x3fb4 <vfprintf+0x380>
    3fa0:	a1 fe       	sbrs	r10, 1
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <vfprintf+0x374>
    3fa4:	8b e2       	ldi	r24, 0x2B	; 43
    3fa6:	01 c0       	rjmp	.+2      	; 0x3faa <vfprintf+0x376>
    3fa8:	80 e2       	ldi	r24, 0x20	; 32
    3faa:	a7 fc       	sbrc	r10, 7
    3fac:	8d e2       	ldi	r24, 0x2D	; 45
    3fae:	b6 01       	movw	r22, r12
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	6e d0       	rcall	.+220    	; 0x4090 <fputc>
    3fb4:	89 14       	cp	r8, r9
    3fb6:	30 f4       	brcc	.+12     	; 0x3fc4 <vfprintf+0x390>
    3fb8:	b6 01       	movw	r22, r12
    3fba:	80 e3       	ldi	r24, 0x30	; 48
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	68 d0       	rcall	.+208    	; 0x4090 <fputc>
    3fc0:	9a 94       	dec	r9
    3fc2:	f8 cf       	rjmp	.-16     	; 0x3fb4 <vfprintf+0x380>
    3fc4:	8a 94       	dec	r8
    3fc6:	f3 01       	movw	r30, r6
    3fc8:	e8 0d       	add	r30, r8
    3fca:	f1 1d       	adc	r31, r1
    3fcc:	80 81       	ld	r24, Z
    3fce:	b6 01       	movw	r22, r12
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	5e d0       	rcall	.+188    	; 0x4090 <fputc>
    3fd4:	81 10       	cpse	r8, r1
    3fd6:	f6 cf       	rjmp	.-20     	; 0x3fc4 <vfprintf+0x390>
    3fd8:	22 20       	and	r2, r2
    3fda:	09 f4       	brne	.+2      	; 0x3fde <vfprintf+0x3aa>
    3fdc:	4e ce       	rjmp	.-868    	; 0x3c7a <vfprintf+0x46>
    3fde:	b6 01       	movw	r22, r12
    3fe0:	80 e2       	ldi	r24, 0x20	; 32
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	55 d0       	rcall	.+170    	; 0x4090 <fputc>
    3fe6:	2a 94       	dec	r2
    3fe8:	f7 cf       	rjmp	.-18     	; 0x3fd8 <vfprintf+0x3a4>
    3fea:	f6 01       	movw	r30, r12
    3fec:	86 81       	ldd	r24, Z+6	; 0x06
    3fee:	97 81       	ldd	r25, Z+7	; 0x07
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <vfprintf+0x3c2>
    3ff2:	8f ef       	ldi	r24, 0xFF	; 255
    3ff4:	9f ef       	ldi	r25, 0xFF	; 255
    3ff6:	2b 96       	adiw	r28, 0x0b	; 11
    3ff8:	cd bf       	out	0x3d, r28	; 61
    3ffa:	de bf       	out	0x3e, r29	; 62
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	ff 90       	pop	r15
    4006:	ef 90       	pop	r14
    4008:	df 90       	pop	r13
    400a:	cf 90       	pop	r12
    400c:	bf 90       	pop	r11
    400e:	af 90       	pop	r10
    4010:	9f 90       	pop	r9
    4012:	8f 90       	pop	r8
    4014:	7f 90       	pop	r7
    4016:	6f 90       	pop	r6
    4018:	5f 90       	pop	r5
    401a:	4f 90       	pop	r4
    401c:	3f 90       	pop	r3
    401e:	2f 90       	pop	r2
    4020:	08 95       	ret

00004022 <calloc>:
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	86 9f       	mul	r24, r22
    402c:	80 01       	movw	r16, r0
    402e:	87 9f       	mul	r24, r23
    4030:	10 0d       	add	r17, r0
    4032:	96 9f       	mul	r25, r22
    4034:	10 0d       	add	r17, r0
    4036:	11 24       	eor	r1, r1
    4038:	c8 01       	movw	r24, r16
    403a:	49 dc       	rcall	.-1902   	; 0x38ce <malloc>
    403c:	ec 01       	movw	r28, r24
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	21 f0       	breq	.+8      	; 0x404a <calloc+0x28>
    4042:	a8 01       	movw	r20, r16
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	11 d0       	rcall	.+34     	; 0x406c <memset>
    404a:	ce 01       	movw	r24, r28
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	08 95       	ret

00004056 <strnlen_P>:
    4056:	fc 01       	movw	r30, r24
    4058:	05 90       	lpm	r0, Z+
    405a:	61 50       	subi	r22, 0x01	; 1
    405c:	70 40       	sbci	r23, 0x00	; 0
    405e:	01 10       	cpse	r0, r1
    4060:	d8 f7       	brcc	.-10     	; 0x4058 <strnlen_P+0x2>
    4062:	80 95       	com	r24
    4064:	90 95       	com	r25
    4066:	8e 0f       	add	r24, r30
    4068:	9f 1f       	adc	r25, r31
    406a:	08 95       	ret

0000406c <memset>:
    406c:	dc 01       	movw	r26, r24
    406e:	01 c0       	rjmp	.+2      	; 0x4072 <memset+0x6>
    4070:	6d 93       	st	X+, r22
    4072:	41 50       	subi	r20, 0x01	; 1
    4074:	50 40       	sbci	r21, 0x00	; 0
    4076:	e0 f7       	brcc	.-8      	; 0x4070 <memset+0x4>
    4078:	08 95       	ret

0000407a <strnlen>:
    407a:	fc 01       	movw	r30, r24
    407c:	61 50       	subi	r22, 0x01	; 1
    407e:	70 40       	sbci	r23, 0x00	; 0
    4080:	01 90       	ld	r0, Z+
    4082:	01 10       	cpse	r0, r1
    4084:	d8 f7       	brcc	.-10     	; 0x407c <strnlen+0x2>
    4086:	80 95       	com	r24
    4088:	90 95       	com	r25
    408a:	8e 0f       	add	r24, r30
    408c:	9f 1f       	adc	r25, r31
    408e:	08 95       	ret

00004090 <fputc>:
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	fb 01       	movw	r30, r22
    409a:	23 81       	ldd	r18, Z+3	; 0x03
    409c:	21 fd       	sbrc	r18, 1
    409e:	03 c0       	rjmp	.+6      	; 0x40a6 <fputc+0x16>
    40a0:	8f ef       	ldi	r24, 0xFF	; 255
    40a2:	9f ef       	ldi	r25, 0xFF	; 255
    40a4:	2c c0       	rjmp	.+88     	; 0x40fe <fputc+0x6e>
    40a6:	22 ff       	sbrs	r18, 2
    40a8:	16 c0       	rjmp	.+44     	; 0x40d6 <fputc+0x46>
    40aa:	46 81       	ldd	r20, Z+6	; 0x06
    40ac:	57 81       	ldd	r21, Z+7	; 0x07
    40ae:	24 81       	ldd	r18, Z+4	; 0x04
    40b0:	35 81       	ldd	r19, Z+5	; 0x05
    40b2:	42 17       	cp	r20, r18
    40b4:	53 07       	cpc	r21, r19
    40b6:	44 f4       	brge	.+16     	; 0x40c8 <fputc+0x38>
    40b8:	a0 81       	ld	r26, Z
    40ba:	b1 81       	ldd	r27, Z+1	; 0x01
    40bc:	9d 01       	movw	r18, r26
    40be:	2f 5f       	subi	r18, 0xFF	; 255
    40c0:	3f 4f       	sbci	r19, 0xFF	; 255
    40c2:	20 83       	st	Z, r18
    40c4:	31 83       	std	Z+1, r19	; 0x01
    40c6:	8c 93       	st	X, r24
    40c8:	26 81       	ldd	r18, Z+6	; 0x06
    40ca:	37 81       	ldd	r19, Z+7	; 0x07
    40cc:	2f 5f       	subi	r18, 0xFF	; 255
    40ce:	3f 4f       	sbci	r19, 0xFF	; 255
    40d0:	26 83       	std	Z+6, r18	; 0x06
    40d2:	37 83       	std	Z+7, r19	; 0x07
    40d4:	14 c0       	rjmp	.+40     	; 0x40fe <fputc+0x6e>
    40d6:	8b 01       	movw	r16, r22
    40d8:	ec 01       	movw	r28, r24
    40da:	fb 01       	movw	r30, r22
    40dc:	00 84       	ldd	r0, Z+8	; 0x08
    40de:	f1 85       	ldd	r31, Z+9	; 0x09
    40e0:	e0 2d       	mov	r30, r0
    40e2:	19 95       	eicall
    40e4:	89 2b       	or	r24, r25
    40e6:	e1 f6       	brne	.-72     	; 0x40a0 <fputc+0x10>
    40e8:	d8 01       	movw	r26, r16
    40ea:	16 96       	adiw	r26, 0x06	; 6
    40ec:	8d 91       	ld	r24, X+
    40ee:	9c 91       	ld	r25, X
    40f0:	17 97       	sbiw	r26, 0x07	; 7
    40f2:	01 96       	adiw	r24, 0x01	; 1
    40f4:	16 96       	adiw	r26, 0x06	; 6
    40f6:	8d 93       	st	X+, r24
    40f8:	9c 93       	st	X, r25
    40fa:	17 97       	sbiw	r26, 0x07	; 7
    40fc:	ce 01       	movw	r24, r28
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	1f 91       	pop	r17
    4104:	0f 91       	pop	r16
    4106:	08 95       	ret

00004108 <__ultoa_invert>:
    4108:	fa 01       	movw	r30, r20
    410a:	aa 27       	eor	r26, r26
    410c:	28 30       	cpi	r18, 0x08	; 8
    410e:	51 f1       	breq	.+84     	; 0x4164 <__ultoa_invert+0x5c>
    4110:	20 31       	cpi	r18, 0x10	; 16
    4112:	81 f1       	breq	.+96     	; 0x4174 <__ultoa_invert+0x6c>
    4114:	e8 94       	clt
    4116:	6f 93       	push	r22
    4118:	6e 7f       	andi	r22, 0xFE	; 254
    411a:	6e 5f       	subi	r22, 0xFE	; 254
    411c:	7f 4f       	sbci	r23, 0xFF	; 255
    411e:	8f 4f       	sbci	r24, 0xFF	; 255
    4120:	9f 4f       	sbci	r25, 0xFF	; 255
    4122:	af 4f       	sbci	r26, 0xFF	; 255
    4124:	b1 e0       	ldi	r27, 0x01	; 1
    4126:	3e d0       	rcall	.+124    	; 0x41a4 <__ultoa_invert+0x9c>
    4128:	b4 e0       	ldi	r27, 0x04	; 4
    412a:	3c d0       	rcall	.+120    	; 0x41a4 <__ultoa_invert+0x9c>
    412c:	67 0f       	add	r22, r23
    412e:	78 1f       	adc	r23, r24
    4130:	89 1f       	adc	r24, r25
    4132:	9a 1f       	adc	r25, r26
    4134:	a1 1d       	adc	r26, r1
    4136:	68 0f       	add	r22, r24
    4138:	79 1f       	adc	r23, r25
    413a:	8a 1f       	adc	r24, r26
    413c:	91 1d       	adc	r25, r1
    413e:	a1 1d       	adc	r26, r1
    4140:	6a 0f       	add	r22, r26
    4142:	71 1d       	adc	r23, r1
    4144:	81 1d       	adc	r24, r1
    4146:	91 1d       	adc	r25, r1
    4148:	a1 1d       	adc	r26, r1
    414a:	20 d0       	rcall	.+64     	; 0x418c <__ultoa_invert+0x84>
    414c:	09 f4       	brne	.+2      	; 0x4150 <__ultoa_invert+0x48>
    414e:	68 94       	set
    4150:	3f 91       	pop	r19
    4152:	2a e0       	ldi	r18, 0x0A	; 10
    4154:	26 9f       	mul	r18, r22
    4156:	11 24       	eor	r1, r1
    4158:	30 19       	sub	r19, r0
    415a:	30 5d       	subi	r19, 0xD0	; 208
    415c:	31 93       	st	Z+, r19
    415e:	de f6       	brtc	.-74     	; 0x4116 <__ultoa_invert+0xe>
    4160:	cf 01       	movw	r24, r30
    4162:	08 95       	ret
    4164:	46 2f       	mov	r20, r22
    4166:	47 70       	andi	r20, 0x07	; 7
    4168:	40 5d       	subi	r20, 0xD0	; 208
    416a:	41 93       	st	Z+, r20
    416c:	b3 e0       	ldi	r27, 0x03	; 3
    416e:	0f d0       	rcall	.+30     	; 0x418e <__ultoa_invert+0x86>
    4170:	c9 f7       	brne	.-14     	; 0x4164 <__ultoa_invert+0x5c>
    4172:	f6 cf       	rjmp	.-20     	; 0x4160 <__ultoa_invert+0x58>
    4174:	46 2f       	mov	r20, r22
    4176:	4f 70       	andi	r20, 0x0F	; 15
    4178:	40 5d       	subi	r20, 0xD0	; 208
    417a:	4a 33       	cpi	r20, 0x3A	; 58
    417c:	18 f0       	brcs	.+6      	; 0x4184 <__ultoa_invert+0x7c>
    417e:	49 5d       	subi	r20, 0xD9	; 217
    4180:	31 fd       	sbrc	r19, 1
    4182:	40 52       	subi	r20, 0x20	; 32
    4184:	41 93       	st	Z+, r20
    4186:	02 d0       	rcall	.+4      	; 0x418c <__ultoa_invert+0x84>
    4188:	a9 f7       	brne	.-22     	; 0x4174 <__ultoa_invert+0x6c>
    418a:	ea cf       	rjmp	.-44     	; 0x4160 <__ultoa_invert+0x58>
    418c:	b4 e0       	ldi	r27, 0x04	; 4
    418e:	a6 95       	lsr	r26
    4190:	97 95       	ror	r25
    4192:	87 95       	ror	r24
    4194:	77 95       	ror	r23
    4196:	67 95       	ror	r22
    4198:	ba 95       	dec	r27
    419a:	c9 f7       	brne	.-14     	; 0x418e <__ultoa_invert+0x86>
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	61 05       	cpc	r22, r1
    41a0:	71 05       	cpc	r23, r1
    41a2:	08 95       	ret
    41a4:	9b 01       	movw	r18, r22
    41a6:	ac 01       	movw	r20, r24
    41a8:	0a 2e       	mov	r0, r26
    41aa:	06 94       	lsr	r0
    41ac:	57 95       	ror	r21
    41ae:	47 95       	ror	r20
    41b0:	37 95       	ror	r19
    41b2:	27 95       	ror	r18
    41b4:	ba 95       	dec	r27
    41b6:	c9 f7       	brne	.-14     	; 0x41aa <__ultoa_invert+0xa2>
    41b8:	62 0f       	add	r22, r18
    41ba:	73 1f       	adc	r23, r19
    41bc:	84 1f       	adc	r24, r20
    41be:	95 1f       	adc	r25, r21
    41c0:	a0 1d       	adc	r26, r0
    41c2:	08 95       	ret

000041c4 <_exit>:
    41c4:	f8 94       	cli

000041c6 <__stop_program>:
    41c6:	ff cf       	rjmp	.-2      	; 0x41c6 <__stop_program>
