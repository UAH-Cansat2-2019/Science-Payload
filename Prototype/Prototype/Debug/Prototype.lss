
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000262  00802000  00009f0c  00009fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ed  00802262  00802262  0000a202  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001178  00000000  00000000  0000a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ae11  00000000  00000000  0000b418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000065ee  00000000  00000000  00026229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000184eb  00000000  00000000  0002c817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004db8  00000000  00000000  00044d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000435d7  00000000  00000000  00049abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000abb5  00000000  00000000  0008d093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001030  00000000  00000000  00097c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008bbd  00000000  00000000  00098c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c1       	rjmp	.+942    	; 0x3b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c1       	rjmp	.+938    	; 0x3b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c1       	rjmp	.+934    	; 0x3b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c1       	rjmp	.+930    	; 0x3b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c1       	rjmp	.+926    	; 0x3b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c1       	rjmp	.+922    	; 0x3b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c1       	rjmp	.+918    	; 0x3b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c1       	rjmp	.+914    	; 0x3b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c1       	rjmp	.+910    	; 0x3b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__vector_10>
      2c:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__vector_11>
      30:	c1 c1       	rjmp	.+898    	; 0x3b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e7 32 	jmp	0x65ce	; 0x65ce <__vector_13>
      38:	0c 94 a5 24 	jmp	0x494a	; 0x494a <__vector_14>
      3c:	0c 94 fc 24 	jmp	0x49f8	; 0x49f8 <__vector_15>
      40:	0c 94 53 25 	jmp	0x4aa6	; 0x4aa6 <__vector_16>
      44:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__vector_17>
      48:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <__vector_18>
      4c:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <__vector_19>
      50:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__vector_20>
      54:	0c 94 06 27 	jmp	0x4e0c	; 0x4e0c <__vector_21>
      58:	0c 94 5d 27 	jmp	0x4eba	; 0x4eba <__vector_22>
      5c:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__vector_23>
      60:	a9 c1       	rjmp	.+850    	; 0x3b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c1       	rjmp	.+846    	; 0x3b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c1       	rjmp	.+842    	; 0x3b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c1       	rjmp	.+838    	; 0x3b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c1       	rjmp	.+834    	; 0x3b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c1       	rjmp	.+830    	; 0x3b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c1       	rjmp	.+826    	; 0x3b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c1       	rjmp	.+822    	; 0x3b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	99 c1       	rjmp	.+818    	; 0x3b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	97 c1       	rjmp	.+814    	; 0x3b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	95 c1       	rjmp	.+810    	; 0x3b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 c1       	rjmp	.+806    	; 0x3b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	91 c1       	rjmp	.+802    	; 0x3b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c1       	rjmp	.+798    	; 0x3b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c1       	rjmp	.+794    	; 0x3b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	64 c5       	rjmp	.+2760   	; 0xb66 <__vector_39>
      9e:	00 00       	nop
      a0:	ee c5       	rjmp	.+3036   	; 0xc7e <__vector_40>
      a2:	00 00       	nop
      a4:	78 c6       	rjmp	.+3312   	; 0xd96 <__vector_41>
      a6:	00 00       	nop
      a8:	02 c7       	rjmp	.+3588   	; 0xeae <__vector_42>
      aa:	00 00       	nop
      ac:	83 c1       	rjmp	.+774    	; 0x3b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	81 c1       	rjmp	.+770    	; 0x3b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7f c1       	rjmp	.+766    	; 0x3b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 7f 33 	jmp	0x66fe	; 0x66fe <__vector_46>
      bc:	0c 94 71 2b 	jmp	0x56e2	; 0x56e2 <__vector_47>
      c0:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__vector_48>
      c4:	0c 94 1f 2c 	jmp	0x583e	; 0x583e <__vector_49>
      c8:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__vector_50>
      cc:	0c 94 cd 2c 	jmp	0x599a	; 0x599a <__vector_51>
      d0:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__vector_52>
      d4:	0c 94 7b 2d 	jmp	0x5af6	; 0x5af6 <__vector_53>
      d8:	0c 94 d2 2d 	jmp	0x5ba4	; 0x5ba4 <__vector_54>
      dc:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__vector_55>
      e0:	0c 94 80 2e 	jmp	0x5d00	; 0x5d00 <__vector_56>
      e4:	67 c1       	rjmp	.+718    	; 0x3b4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	65 c1       	rjmp	.+714    	; 0x3b4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	63 c1       	rjmp	.+710    	; 0x3b4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	61 c1       	rjmp	.+706    	; 0x3b4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	5f c1       	rjmp	.+702    	; 0x3b4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	5d c1       	rjmp	.+698    	; 0x3b4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	5b c1       	rjmp	.+694    	; 0x3b4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	59 c1       	rjmp	.+690    	; 0x3b4 <__bad_interrupt>
     102:	00 00       	nop
     104:	57 c1       	rjmp	.+686    	; 0x3b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c1       	rjmp	.+682    	; 0x3b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c1       	rjmp	.+678    	; 0x3b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c1       	rjmp	.+674    	; 0x3b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c1       	rjmp	.+670    	; 0x3b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	4d c1       	rjmp	.+666    	; 0x3b4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f4 c2       	rjmp	.+1512   	; 0x706 <__vector_71>
     11e:	00 00       	nop
     120:	7e c3       	rjmp	.+1788   	; 0x81e <__vector_72>
     122:	00 00       	nop
     124:	08 c4       	rjmp	.+2064   	; 0x936 <__vector_73>
     126:	00 00       	nop
     128:	92 c4       	rjmp	.+2340   	; 0xa4e <__vector_74>
     12a:	00 00       	nop
     12c:	43 c1       	rjmp	.+646    	; 0x3b4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 33 33 	jmp	0x6666	; 0x6666 <__vector_76>
     134:	0c 94 0b 28 	jmp	0x5016	; 0x5016 <__vector_77>
     138:	0c 94 62 28 	jmp	0x50c4	; 0x50c4 <__vector_78>
     13c:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <__vector_79>
     140:	0c 94 10 29 	jmp	0x5220	; 0x5220 <__vector_80>
     144:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__vector_81>
     148:	0c 94 be 29 	jmp	0x537c	; 0x537c <__vector_82>
     14c:	0c 94 15 2a 	jmp	0x542a	; 0x542a <__vector_83>
     150:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__vector_84>
     154:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__vector_85>
     158:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__vector_86>
     15c:	2b c1       	rjmp	.+598    	; 0x3b4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	29 c1       	rjmp	.+594    	; 0x3b4 <__bad_interrupt>
     162:	00 00       	nop
     164:	27 c1       	rjmp	.+590    	; 0x3b4 <__bad_interrupt>
     166:	00 00       	nop
     168:	25 c1       	rjmp	.+586    	; 0x3b4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	23 c1       	rjmp	.+582    	; 0x3b4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	21 c1       	rjmp	.+578    	; 0x3b4 <__bad_interrupt>
     172:	00 00       	nop
     174:	1f c1       	rjmp	.+574    	; 0x3b4 <__bad_interrupt>
     176:	00 00       	nop
     178:	1d c1       	rjmp	.+570    	; 0x3b4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	1b c1       	rjmp	.+566    	; 0x3b4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	19 c1       	rjmp	.+562    	; 0x3b4 <__bad_interrupt>
     182:	00 00       	nop
     184:	17 c1       	rjmp	.+558    	; 0x3b4 <__bad_interrupt>
     186:	00 00       	nop
     188:	15 c1       	rjmp	.+554    	; 0x3b4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	13 c1       	rjmp	.+550    	; 0x3b4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	11 c1       	rjmp	.+546    	; 0x3b4 <__bad_interrupt>
     192:	00 00       	nop
     194:	0f c1       	rjmp	.+542    	; 0x3b4 <__bad_interrupt>
     196:	00 00       	nop
     198:	0d c1       	rjmp	.+538    	; 0x3b4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	0b c1       	rjmp	.+534    	; 0x3b4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	09 c1       	rjmp	.+530    	; 0x3b4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	07 c1       	rjmp	.+526    	; 0x3b4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	05 c1       	rjmp	.+522    	; 0x3b4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 cb 33 	jmp	0x6796	; 0x6796 <__vector_107>
     1b0:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__vector_108>
     1b4:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__vector_109>
     1b8:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <__vector_110>
     1bc:	0c 94 dc 2f 	jmp	0x5fb8	; 0x5fb8 <__vector_111>
     1c0:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__vector_112>
     1c4:	0c 94 8a 30 	jmp	0x6114	; 0x6114 <__vector_113>
     1c8:	0c 94 e1 30 	jmp	0x61c2	; 0x61c2 <__vector_114>
     1cc:	0c 94 38 31 	jmp	0x6270	; 0x6270 <__vector_115>
     1d0:	0c 94 8f 31 	jmp	0x631e	; 0x631e <__vector_116>
     1d4:	0c 94 e6 31 	jmp	0x63cc	; 0x63cc <__vector_117>
     1d8:	ed c0       	rjmp	.+474    	; 0x3b4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__vector_119>
     1e0:	e9 c0       	rjmp	.+466    	; 0x3b4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	e7 c0       	rjmp	.+462    	; 0x3b4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	e5 c0       	rjmp	.+458    	; 0x3b4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	e3 c0       	rjmp	.+454    	; 0x3b4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	e1 c0       	rjmp	.+450    	; 0x3b4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	df c0       	rjmp	.+446    	; 0x3b4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	dd c0       	rjmp	.+442    	; 0x3b4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	fa 0b       	sbc	r31, r26
     1fe:	1b 0c       	add	r1, r11
     200:	3c 0c       	add	r3, r12
     202:	5d 0c       	add	r5, r13
     204:	7e 0c       	add	r7, r14
     206:	9f 0c       	add	r9, r15
     208:	c0 0c       	add	r12, r0
     20a:	e1 0c       	add	r14, r1
     20c:	08 00       	.word	0x0008	; ????
     20e:	00 00       	nop
     210:	be 92       	st	-X, r11
     212:	24 49       	sbci	r18, 0x94	; 148
     214:	12 3e       	cpi	r17, 0xE2	; 226
     216:	ab aa       	std	Y+51, r10	; 0x33
     218:	aa 2a       	or	r10, r26
     21a:	be cd       	rjmp	.-1156   	; 0xfffffd98 <__eeprom_end+0xff7efd98>
     21c:	cc cc       	rjmp	.-1640   	; 0xfffffbb6 <__eeprom_end+0xff7efbb6>
     21e:	4c 3e       	cpi	r20, 0xEC	; 236
     220:	00 00       	nop
     222:	00 80       	ld	r0, Z
     224:	be ab       	std	Y+54, r27	; 0x36
     226:	aa aa       	std	Y+50, r10	; 0x32
     228:	aa 3e       	cpi	r26, 0xEA	; 234
     22a:	00 00       	nop
     22c:	00 00       	nop
     22e:	bf 00       	.word	0x00bf	; ????
     230:	00 00       	nop
     232:	80 3f       	cpi	r24, 0xF0	; 240
     234:	00 00       	nop
     236:	00 00       	nop
     238:	00 08       	sbc	r0, r0
     23a:	41 78       	andi	r20, 0x81	; 129
     23c:	d3 bb       	out	0x13, r29	; 19
     23e:	43 87       	std	Z+11, r20	; 0x0b
     240:	d1 13       	cpse	r29, r17
     242:	3d 19       	sub	r19, r13
     244:	0e 3c       	cpi	r16, 0xCE	; 206
     246:	c3 bd       	out	0x23, r28	; 35
     248:	42 82       	std	Z+2, r4	; 0x02
     24a:	ad 2b       	or	r26, r29
     24c:	3e 68       	ori	r19, 0x8E	; 142
     24e:	ec 82       	std	Y+4, r14	; 0x04
     250:	76 be       	out	0x36, r7	; 54
     252:	d9 8f       	std	Y+25, r29	; 0x19
     254:	e1 a9       	ldd	r30, Z+49	; 0x31
     256:	3e 4c       	sbci	r19, 0xCE	; 206
     258:	80 ef       	ldi	r24, 0xF0	; 240
     25a:	ff be       	out	0x3f, r15	; 63
     25c:	01 c4       	rjmp	.+2050   	; 0xa60 <__vector_74+0x12>
     25e:	ff 7f       	andi	r31, 0xFF	; 255
     260:	3f 00       	.word	0x003f	; ????
     262:	00 00       	nop
	...

00000266 <__trampolines_end>:
     266:	6e 61       	ori	r22, 0x1E	; 30
     268:	6e 00       	.word	0x006e	; ????

0000026a <__c.2332>:
     26a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     27a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     28a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     29a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     30a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     31a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     32a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     33a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     34a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     35a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df e3       	ldi	r29, 0x3F	; 63
     372:	de bf       	out	0x3e, r29	; 62
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	0c bf       	out	0x3c, r16	; 60
     378:	18 be       	out	0x38, r1	; 56
     37a:	19 be       	out	0x39, r1	; 57
     37c:	1a be       	out	0x3a, r1	; 58
     37e:	1b be       	out	0x3b, r1	; 59

00000380 <__do_copy_data>:
     380:	12 e2       	ldi	r17, 0x22	; 34
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	b0 e2       	ldi	r27, 0x20	; 32
     386:	ec e0       	ldi	r30, 0x0C	; 12
     388:	ff e9       	ldi	r31, 0x9F	; 159
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	0b bf       	out	0x3b, r16	; 59
     38e:	02 c0       	rjmp	.+4      	; 0x394 <__do_copy_data+0x14>
     390:	07 90       	elpm	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	a2 36       	cpi	r26, 0x62	; 98
     396:	b1 07       	cpc	r27, r17
     398:	d9 f7       	brne	.-10     	; 0x390 <__do_copy_data+0x10>
     39a:	1b be       	out	0x3b, r1	; 59

0000039c <__do_clear_bss>:
     39c:	23 e2       	ldi	r18, 0x23	; 35
     39e:	a2 e6       	ldi	r26, 0x62	; 98
     3a0:	b2 e2       	ldi	r27, 0x22	; 34
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <.do_clear_bss_start>

000003a4 <.do_clear_bss_loop>:
     3a4:	1d 92       	st	X+, r1

000003a6 <.do_clear_bss_start>:
     3a6:	af 34       	cpi	r26, 0x4F	; 79
     3a8:	b2 07       	cpc	r27, r18
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <.do_clear_bss_loop>
     3ac:	0e 94 2a 3f 	call	0x7e54	; 0x7e54 <main>
     3b0:	0c 94 84 4f 	jmp	0x9f08	; 0x9f08 <_exit>

000003b4 <__bad_interrupt>:
     3b4:	25 ce       	rjmp	.-950    	; 0x0 <__vectors>

000003b6 <cpu_irq_save>:
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	1f 92       	push	r1
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	8f e3       	ldi	r24, 0x3F	; 63
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	f8 94       	cli
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <cpu_irq_restore>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	89 83       	std	Y+1, r24	; 0x01
     3e2:	8f e3       	ldi	r24, 0x3F	; 63
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	29 81       	ldd	r18, Y+1	; 0x01
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
     3ec:	00 00       	nop
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <sleepmgr_lock_mode>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	1f 92       	push	r1
     3fc:	1f 92       	push	r1
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	8a 83       	std	Y+2, r24	; 0x02
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	88 2f       	mov	r24, r24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	8f 5c       	subi	r24, 0xCF	; 207
     40c:	9c 4d       	sbci	r25, 0xDC	; 220
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	8f 3f       	cpi	r24, 0xFF	; 255
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	ff cf       	rjmp	.-2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     418:	ce df       	rcall	.-100    	; 0x3b6 <cpu_irq_save>
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	88 2f       	mov	r24, r24
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	9c 01       	movw	r18, r24
     424:	2f 5c       	subi	r18, 0xCF	; 207
     426:	3c 4d       	sbci	r19, 0xDC	; 220
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	2f 5f       	subi	r18, 0xFF	; 255
     42e:	8f 5c       	subi	r24, 0xCF	; 207
     430:	9c 4d       	sbci	r25, 0xDC	; 220
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	ce df       	rcall	.-100    	; 0x3d6 <cpu_irq_restore>
     43a:	00 00       	nop
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <sleepmgr_unlock_mode>:
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	1f 92       	push	r1
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	8a 83       	std	Y+2, r24	; 0x02
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	8f 5c       	subi	r24, 0xCF	; 207
     45c:	9c 4d       	sbci	r25, 0xDC	; 220
     45e:	fc 01       	movw	r30, r24
     460:	80 81       	ld	r24, Z
     462:	88 23       	and	r24, r24
     464:	09 f4       	brne	.+2      	; 0x468 <sleepmgr_unlock_mode+0x22>
     466:	ff cf       	rjmp	.-2      	; 0x466 <sleepmgr_unlock_mode+0x20>
     468:	a6 df       	rcall	.-180    	; 0x3b6 <cpu_irq_save>
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	9c 01       	movw	r18, r24
     474:	2f 5c       	subi	r18, 0xCF	; 207
     476:	3c 4d       	sbci	r19, 0xDC	; 220
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	8f 5c       	subi	r24, 0xCF	; 207
     480:	9c 4d       	sbci	r25, 0xDC	; 220
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	a6 df       	rcall	.-180    	; 0x3d6 <cpu_irq_restore>
     48a:	00 00       	nop
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	81 15       	cp	r24, r1
     4ac:	92 40       	sbci	r25, 0x02	; 2
     4ae:	69 f4       	brne	.+26     	; 0x4ca <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     4b0:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <__data_end>
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	98 0f       	add	r25, r24
     4b8:	90 93 62 22 	sts	0x2262, r25	; 0x802262 <__data_end>
     4bc:	88 23       	and	r24, r24
     4be:	b1 f4       	brne	.+44     	; 0x4ec <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	80 34       	cpi	r24, 0x40	; 64
     4d0:	92 40       	sbci	r25, 0x02	; 2
     4d2:	61 f4       	brne	.+24     	; 0x4ec <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     4d4:	80 91 63 22 	lds	r24, 0x2263	; 0x802263 <adcb_enable_count>
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	98 0f       	add	r25, r24
     4dc:	90 93 63 22 	sts	0x2263, r25	; 0x802263 <adcb_enable_count>
     4e0:	88 23       	and	r24, r24
     4e2:	21 f4       	brne	.+8      	; 0x4ec <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4e4:	62 e0       	ldi	r22, 0x02	; 2
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	81 15       	cp	r24, r1
     50e:	92 40       	sbci	r25, 0x02	; 2
     510:	71 f4       	brne	.+28     	; 0x52e <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     512:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <__data_end>
     516:	81 50       	subi	r24, 0x01	; 1
     518:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <__data_end>
     51c:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <__data_end>
     520:	88 23       	and	r24, r24
     522:	b9 f4       	brne	.+46     	; 0x552 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     524:	62 e0       	ldi	r22, 0x02	; 2
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 01 22 	call	0x4402	; 0x4402 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     52c:	12 c0       	rjmp	.+36     	; 0x552 <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	80 34       	cpi	r24, 0x40	; 64
     534:	92 40       	sbci	r25, 0x02	; 2
     536:	69 f4       	brne	.+26     	; 0x552 <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     538:	80 91 63 22 	lds	r24, 0x2263	; 0x802263 <adcb_enable_count>
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	80 93 63 22 	sts	0x2263, r24	; 0x802263 <adcb_enable_count>
     542:	80 91 63 22 	lds	r24, 0x2263	; 0x802263 <adcb_enable_count>
     546:	88 23       	and	r24, r24
     548:	21 f4       	brne	.+8      	; 0x552 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	0e 94 01 22 	call	0x4402	; 0x4402 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     552:	00 00       	nop
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	00 d0       	rcall	.+0      	; 0x564 <adc_enable+0x6>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	8a 83       	std	Y+2, r24	; 0x02
     56a:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     56c:	24 df       	rcall	.-440    	; 0x3b6 <cpu_irq_save>
     56e:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	9b 81       	ldd	r25, Y+3	; 0x03
     574:	90 df       	rcall	.-224    	; 0x496 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	9b 81       	ldd	r25, Y+3	; 0x03
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	28 2f       	mov	r18, r24
     580:	21 60       	ori	r18, 0x01	; 1
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	9b 81       	ldd	r25, Y+3	; 0x03
     586:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
     588:	20 83       	st	Z, r18
     58a:	89 81       	ldd	r24, Y+1	; 0x01

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
     58c:	24 df       	rcall	.-440    	; 0x3d6 <cpu_irq_restore>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	32 df       	rcall	.-412    	; 0x3f6 <sleepmgr_lock_mode>
}
     592:	00 00       	nop
     594:	23 96       	adiw	r28, 0x03	; 3
     596:	cd bf       	out	0x3d, r28	; 61
     598:	de bf       	out	0x3e, r29	; 62
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <adc_disable+0x6>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     5ae:	03 df       	rcall	.-506    	; 0x3b6 <cpu_irq_save>
     5b0:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA &= ~ADC_ENABLE_bm;
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	9b 81       	ldd	r25, Y+3	; 0x03
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	28 2f       	mov	r18, r24
     5bc:	2e 7f       	andi	r18, 0xFE	; 254
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ca:	96 df       	rcall	.-212    	; 0x4f8 <adc_disable_clock>
	cpu_irq_restore(flags);
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	03 df       	rcall	.-506    	; 0x3d6 <cpu_irq_restore>

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	39 df       	rcall	.-398    	; 0x446 <sleepmgr_unlock_mode>
     5d4:	00 00       	nop
}
     5d6:	23 96       	adiw	r28, 0x03	; 3
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     5ec:	8f e3       	ldi	r24, 0x3F	; 63
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     5f6:	f8 94       	cli
	return flags;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     60e:	8f e3       	ldi	r24, 0x3F	; 63
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	29 81       	ldd	r18, Y+1	; 0x01
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
}
     618:	00 00       	nop
     61a:	0f 90       	pop	r0
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	bc 01       	movw	r22, r24
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 a5 22 	call	0x454a	; 0x454a <nvm_read_byte>
}
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <adc_get_calibration_data+0x6>
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	91 05       	cpc	r25, r1
     65a:	e9 f0       	breq	.+58     	; 0x696 <adc_get_calibration_data+0x52>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	91 05       	cpc	r25, r1
     660:	89 f1       	breq	.+98     	; 0x6c4 <adc_get_calibration_data+0x80>
     662:	89 2b       	or	r24, r25
     664:	09 f0       	breq	.+2      	; 0x668 <adc_get_calibration_data+0x24>
     666:	45 c0       	rjmp	.+138    	; 0x6f2 <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     668:	81 e2       	ldi	r24, 0x21	; 33
     66a:	db df       	rcall	.-74     	; 0x622 <nvm_read_production_signature_row>
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	98 2f       	mov	r25, r24
     67a:	88 27       	eor	r24, r24
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
     680:	80 e2       	ldi	r24, 0x20	; 32
     682:	cf df       	rcall	.-98     	; 0x622 <nvm_read_production_signature_row>
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	29 81       	ldd	r18, Y+1	; 0x01
     68a:	3a 81       	ldd	r19, Y+2	; 0x02
     68c:	82 2b       	or	r24, r18
     68e:	93 2b       	or	r25, r19
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     694:	30 c0       	rjmp	.+96     	; 0x6f6 <adc_get_calibration_data+0xb2>
     696:	85 e2       	ldi	r24, 0x25	; 37
     698:	c4 df       	rcall	.-120    	; 0x622 <nvm_read_production_signature_row>
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	98 2f       	mov	r25, r24
     6a8:	88 27       	eor	r24, r24
     6aa:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
     6ac:	9a 83       	std	Y+2, r25	; 0x02
     6ae:	84 e2       	ldi	r24, 0x24	; 36
     6b0:	b8 df       	rcall	.-144    	; 0x622 <nvm_read_production_signature_row>
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ba:	82 2b       	or	r24, r18
     6bc:	93 2b       	or	r25, r19
     6be:	89 83       	std	Y+1, r24	; 0x01
		break;
     6c0:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
     6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <adc_get_calibration_data+0xb2>
     6c4:	8f e2       	ldi	r24, 0x2F	; 47
     6c6:	ad df       	rcall	.-166    	; 0x622 <nvm_read_production_signature_row>
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	98 2f       	mov	r25, r24
     6d6:	88 27       	eor	r24, r24
     6d8:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	8e e2       	ldi	r24, 0x2E	; 46
     6de:	a1 df       	rcall	.-190    	; 0x622 <nvm_read_production_signature_row>
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	29 81       	ldd	r18, Y+1	; 0x01
     6e6:	3a 81       	ldd	r19, Y+2	; 0x02
     6e8:	82 2b       	or	r24, r18
     6ea:	93 2b       	or	r25, r19
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	9a 83       	std	Y+2, r25	; 0x02
		break;
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     6f2:	19 82       	std	Y+1, r1	; 0x01
     6f4:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6fa:	23 96       	adiw	r28, 0x03	; 3
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     716:	0f 92       	push	r0
     718:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     71c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     720:	0f 92       	push	r0
     722:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     726:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     72a:	0f 92       	push	r0
     72c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     730:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     734:	0f 92       	push	r0
     736:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     73a:	2f 93       	push	r18
     73c:	3f 93       	push	r19
     73e:	4f 93       	push	r20
     740:	5f 93       	push	r21
     742:	6f 93       	push	r22
     744:	7f 93       	push	r23
     746:	8f 93       	push	r24
     748:	9f 93       	push	r25
     74a:	af 93       	push	r26
     74c:	bf 93       	push	r27
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	00 d0       	rcall	.+0      	; 0x758 <__vector_71+0x52>
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     75e:	20 91 d7 22 	lds	r18, 0x22D7	; 0x8022d7 <adca_callback>
     762:	30 91 d8 22 	lds	r19, 0x22D8	; 0x8022d8 <adca_callback+0x1>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     772:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	83 70       	andi	r24, 0x03	; 3
     77c:	99 27       	eor	r25, r25
     77e:	89 2b       	or	r24, r25
     780:	39 f4       	brne	.+14     	; 0x790 <__vector_71+0x8a>
		index += 2;
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	8e 5f       	subi	r24, 0xFE	; 254
     786:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	86 95       	lsr	r24
     78c:	86 95       	lsr	r24
     78e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     790:	8b 81       	ldd	r24, Y+3	; 0x03
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	81 70       	andi	r24, 0x01	; 1
     798:	99 27       	eor	r25, r25
     79a:	89 2b       	or	r24, r25
     79c:	19 f4       	brne	.+6      	; 0x7a4 <__vector_71+0x9e>
		index++;
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	ac 01       	movw	r20, r24
     7aa:	40 5e       	subi	r20, 0xE0	; 224
     7ac:	5f 4f       	sbci	r21, 0xFF	; 255
     7ae:	8c 81       	ldd	r24, Y+4	; 0x04
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	84 0f       	add	r24, r20
     7c2:	95 1f       	adc	r25, r21
     7c4:	fc 01       	movw	r30, r24
     7c6:	84 81       	ldd	r24, Z+4	; 0x04
     7c8:	95 81       	ldd	r25, Z+5	; 0x05
     7ca:	ac 01       	movw	r20, r24
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	f9 01       	movw	r30, r18
     7d4:	19 95       	eicall
}
     7d6:	00 00       	nop
     7d8:	24 96       	adiw	r28, 0x04	; 4
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     800:	0f 90       	pop	r0
     802:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     806:	0f 90       	pop	r0
     808:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     80c:	0f 90       	pop	r0
     80e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     812:	0f 90       	pop	r0
     814:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     82e:	0f 92       	push	r0
     830:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     834:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     838:	0f 92       	push	r0
     83a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     83e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     842:	0f 92       	push	r0
     844:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     848:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     84c:	0f 92       	push	r0
     84e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     852:	2f 93       	push	r18
     854:	3f 93       	push	r19
     856:	4f 93       	push	r20
     858:	5f 93       	push	r21
     85a:	6f 93       	push	r22
     85c:	7f 93       	push	r23
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <__vector_72+0x52>
     870:	1f 92       	push	r1
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     876:	20 91 d7 22 	lds	r18, 0x22D7	; 0x8022d7 <adca_callback>
     87a:	30 91 d8 22 	lds	r19, 0x22D8	; 0x8022d8 <adca_callback+0x1>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     88a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	83 70       	andi	r24, 0x03	; 3
     894:	99 27       	eor	r25, r25
     896:	89 2b       	or	r24, r25
     898:	39 f4       	brne	.+14     	; 0x8a8 <__vector_72+0x8a>
		index += 2;
     89a:	8c 81       	ldd	r24, Y+4	; 0x04
     89c:	8e 5f       	subi	r24, 0xFE	; 254
     89e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	86 95       	lsr	r24
     8a4:	86 95       	lsr	r24
     8a6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	81 70       	andi	r24, 0x01	; 1
     8b0:	99 27       	eor	r25, r25
     8b2:	89 2b       	or	r24, r25
     8b4:	19 f4       	brne	.+6      	; 0x8bc <__vector_72+0x9e>
		index++;
     8b6:	8c 81       	ldd	r24, Y+4	; 0x04
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	ac 01       	movw	r20, r24
     8c2:	40 5e       	subi	r20, 0xE0	; 224
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	8c 81       	ldd	r24, Y+4	; 0x04
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	84 0f       	add	r24, r20
     8da:	95 1f       	adc	r25, r21
     8dc:	fc 01       	movw	r30, r24
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	95 81       	ldd	r25, Z+5	; 0x05
     8e2:	ac 01       	movw	r20, r24
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	f9 01       	movw	r30, r18
     8ec:	19 95       	eicall
}
     8ee:	00 00       	nop
     8f0:	24 96       	adiw	r28, 0x04	; 4
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	bf 91       	pop	r27
     900:	af 91       	pop	r26
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	7f 91       	pop	r23
     908:	6f 91       	pop	r22
     90a:	5f 91       	pop	r21
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     918:	0f 90       	pop	r0
     91a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     91e:	0f 90       	pop	r0
     920:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     924:	0f 90       	pop	r0
     926:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     92a:	0f 90       	pop	r0
     92c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     946:	0f 92       	push	r0
     948:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     94c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     950:	0f 92       	push	r0
     952:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     956:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     95a:	0f 92       	push	r0
     95c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     960:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     964:	0f 92       	push	r0
     966:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	4f 93       	push	r20
     970:	5f 93       	push	r21
     972:	6f 93       	push	r22
     974:	7f 93       	push	r23
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	00 d0       	rcall	.+0      	; 0x988 <__vector_73+0x52>
     988:	1f 92       	push	r1
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     98e:	20 91 d7 22 	lds	r18, 0x22D7	; 0x8022d7 <adca_callback>
     992:	30 91 d8 22 	lds	r19, 0x22D8	; 0x8022d8 <adca_callback+0x1>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     9a2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	83 70       	andi	r24, 0x03	; 3
     9ac:	99 27       	eor	r25, r25
     9ae:	89 2b       	or	r24, r25
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <__vector_73+0x8a>
		index += 2;
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	8e 5f       	subi	r24, 0xFE	; 254
     9b6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	81 70       	andi	r24, 0x01	; 1
     9c8:	99 27       	eor	r25, r25
     9ca:	89 2b       	or	r24, r25
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <__vector_73+0x9e>
		index++;
     9ce:	8c 81       	ldd	r24, Y+4	; 0x04
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	ac 01       	movw	r20, r24
     9da:	40 5e       	subi	r20, 0xE0	; 224
     9dc:	5f 4f       	sbci	r21, 0xFF	; 255
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	84 0f       	add	r24, r20
     9f2:	95 1f       	adc	r25, r21
     9f4:	fc 01       	movw	r30, r24
     9f6:	84 81       	ldd	r24, Z+4	; 0x04
     9f8:	95 81       	ldd	r25, Z+5	; 0x05
     9fa:	ac 01       	movw	r20, r24
     9fc:	64 e0       	ldi	r22, 0x04	; 4
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	f9 01       	movw	r30, r18
     a04:	19 95       	eicall
}
     a06:	00 00       	nop
     a08:	24 96       	adiw	r28, 0x04	; 4
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a30:	0f 90       	pop	r0
     a32:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a36:	0f 90       	pop	r0
     a38:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a3c:	0f 90       	pop	r0
     a3e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a42:	0f 90       	pop	r0
     a44:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a5e:	0f 92       	push	r0
     a60:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a64:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a68:	0f 92       	push	r0
     a6a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a6e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a72:	0f 92       	push	r0
     a74:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a78:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a7c:	0f 92       	push	r0
     a7e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <__vector_74+0x52>
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     aa6:	20 91 d7 22 	lds	r18, 0x22D7	; 0x8022d7 <adca_callback>
     aaa:	30 91 d8 22 	lds	r19, 0x22D8	; 0x8022d8 <adca_callback+0x1>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	9a 83       	std	Y+2, r25	; 0x02
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     aba:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	83 70       	andi	r24, 0x03	; 3
     ac4:	99 27       	eor	r25, r25
     ac6:	89 2b       	or	r24, r25
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__vector_74+0x8a>
		index += 2;
     aca:	8c 81       	ldd	r24, Y+4	; 0x04
     acc:	8e 5f       	subi	r24, 0xFE	; 254
     ace:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	86 95       	lsr	r24
     ad4:	86 95       	lsr	r24
     ad6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	88 2f       	mov	r24, r24
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	81 70       	andi	r24, 0x01	; 1
     ae0:	99 27       	eor	r25, r25
     ae2:	89 2b       	or	r24, r25
     ae4:	19 f4       	brne	.+6      	; 0xaec <__vector_74+0x9e>
		index++;
     ae6:	8c 81       	ldd	r24, Y+4	; 0x04
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	ac 01       	movw	r20, r24
     af2:	40 5e       	subi	r20, 0xE0	; 224
     af4:	5f 4f       	sbci	r21, 0xFF	; 255
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	88 2f       	mov	r24, r24
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	84 0f       	add	r24, r20
     b0a:	95 1f       	adc	r25, r21
     b0c:	fc 01       	movw	r30, r24
     b0e:	84 81       	ldd	r24, Z+4	; 0x04
     b10:	95 81       	ldd	r25, Z+5	; 0x05
     b12:	ac 01       	movw	r20, r24
     b14:	68 e0       	ldi	r22, 0x08	; 8
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	f9 01       	movw	r30, r18
     b1c:	19 95       	eicall
}
     b1e:	00 00       	nop
     b20:	24 96       	adiw	r28, 0x04	; 4
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b48:	0f 90       	pop	r0
     b4a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b4e:	0f 90       	pop	r0
     b50:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b54:	0f 90       	pop	r0
     b56:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b5a:	0f 90       	pop	r0
     b5c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b76:	0f 92       	push	r0
     b78:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b7c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b80:	0f 92       	push	r0
     b82:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b86:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b8a:	0f 92       	push	r0
     b8c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b90:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b94:	0f 92       	push	r0
     b96:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b9a:	2f 93       	push	r18
     b9c:	3f 93       	push	r19
     b9e:	4f 93       	push	r20
     ba0:	5f 93       	push	r21
     ba2:	6f 93       	push	r22
     ba4:	7f 93       	push	r23
     ba6:	8f 93       	push	r24
     ba8:	9f 93       	push	r25
     baa:	af 93       	push	r26
     bac:	bf 93       	push	r27
     bae:	ef 93       	push	r30
     bb0:	ff 93       	push	r31
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <__vector_39+0x52>
     bb8:	1f 92       	push	r1
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     bbe:	20 91 d5 22 	lds	r18, 0x22D5	; 0x8022d5 <adcb_callback>
     bc2:	30 91 d6 22 	lds	r19, 0x22D6	; 0x8022d6 <adcb_callback+0x1>
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     bd2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	83 70       	andi	r24, 0x03	; 3
     bdc:	99 27       	eor	r25, r25
     bde:	89 2b       	or	r24, r25
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__vector_39+0x8a>
		index += 2;
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	8e 5f       	subi	r24, 0xFE	; 254
     be6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	86 95       	lsr	r24
     bec:	86 95       	lsr	r24
     bee:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	99 27       	eor	r25, r25
     bfa:	89 2b       	or	r24, r25
     bfc:	19 f4       	brne	.+6      	; 0xc04 <__vector_39+0x9e>
		index++;
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	ac 01       	movw	r20, r24
     c0a:	40 5e       	subi	r20, 0xE0	; 224
     c0c:	5f 4f       	sbci	r21, 0xFF	; 255
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	84 0f       	add	r24, r20
     c22:	95 1f       	adc	r25, r21
     c24:	fc 01       	movw	r30, r24
     c26:	84 81       	ldd	r24, Z+4	; 0x04
     c28:	95 81       	ldd	r25, Z+5	; 0x05
     c2a:	ac 01       	movw	r20, r24
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	80 e4       	ldi	r24, 0x40	; 64
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	f9 01       	movw	r30, r18
     c34:	19 95       	eicall
}
     c36:	00 00       	nop
     c38:	24 96       	adiw	r28, 0x04	; 4
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c60:	0f 90       	pop	r0
     c62:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c66:	0f 90       	pop	r0
     c68:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c6c:	0f 90       	pop	r0
     c6e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c72:	0f 90       	pop	r0
     c74:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c8e:	0f 92       	push	r0
     c90:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c94:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c98:	0f 92       	push	r0
     c9a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c9e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ca2:	0f 92       	push	r0
     ca4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ca8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cac:	0f 92       	push	r0
     cae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <__vector_40+0x52>
     cd0:	1f 92       	push	r1
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     cd6:	20 91 d5 22 	lds	r18, 0x22D5	; 0x8022d5 <adcb_callback>
     cda:	30 91 d6 22 	lds	r19, 0x22D6	; 0x8022d6 <adcb_callback+0x1>
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cea:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	83 70       	andi	r24, 0x03	; 3
     cf4:	99 27       	eor	r25, r25
     cf6:	89 2b       	or	r24, r25
     cf8:	39 f4       	brne	.+14     	; 0xd08 <__vector_40+0x8a>
		index += 2;
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	8e 5f       	subi	r24, 0xFE	; 254
     cfe:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	86 95       	lsr	r24
     d04:	86 95       	lsr	r24
     d06:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	81 70       	andi	r24, 0x01	; 1
     d10:	99 27       	eor	r25, r25
     d12:	89 2b       	or	r24, r25
     d14:	19 f4       	brne	.+6      	; 0xd1c <__vector_40+0x9e>
		index++;
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	ac 01       	movw	r20, r24
     d22:	40 5e       	subi	r20, 0xE0	; 224
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	84 0f       	add	r24, r20
     d3a:	95 1f       	adc	r25, r21
     d3c:	fc 01       	movw	r30, r24
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	95 81       	ldd	r25, Z+5	; 0x05
     d42:	ac 01       	movw	r20, r24
     d44:	62 e0       	ldi	r22, 0x02	; 2
     d46:	80 e4       	ldi	r24, 0x40	; 64
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	f9 01       	movw	r30, r18
     d4c:	19 95       	eicall
}
     d4e:	00 00       	nop
     d50:	24 96       	adiw	r28, 0x04	; 4
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	0f 90       	pop	r0
     d74:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d78:	0f 90       	pop	r0
     d7a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d7e:	0f 90       	pop	r0
     d80:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d84:	0f 90       	pop	r0
     d86:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d8a:	0f 90       	pop	r0
     d8c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     da6:	0f 92       	push	r0
     da8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dac:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     db0:	0f 92       	push	r0
     db2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     db6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dba:	0f 92       	push	r0
     dbc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dc0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dc4:	0f 92       	push	r0
     dc6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <__vector_41+0x52>
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     dee:	20 91 d5 22 	lds	r18, 0x22D5	; 0x8022d5 <adcb_callback>
     df2:	30 91 d6 22 	lds	r19, 0x22D6	; 0x8022d6 <adcb_callback+0x1>
     df6:	80 e4       	ldi	r24, 0x40	; 64
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     e02:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	83 70       	andi	r24, 0x03	; 3
     e0c:	99 27       	eor	r25, r25
     e0e:	89 2b       	or	r24, r25
     e10:	39 f4       	brne	.+14     	; 0xe20 <__vector_41+0x8a>
		index += 2;
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	8e 5f       	subi	r24, 0xFE	; 254
     e16:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	86 95       	lsr	r24
     e1c:	86 95       	lsr	r24
     e1e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	81 70       	andi	r24, 0x01	; 1
     e28:	99 27       	eor	r25, r25
     e2a:	89 2b       	or	r24, r25
     e2c:	19 f4       	brne	.+6      	; 0xe34 <__vector_41+0x9e>
		index++;
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	ac 01       	movw	r20, r24
     e3a:	40 5e       	subi	r20, 0xE0	; 224
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	84 0f       	add	r24, r20
     e52:	95 1f       	adc	r25, r21
     e54:	fc 01       	movw	r30, r24
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	95 81       	ldd	r25, Z+5	; 0x05
     e5a:	ac 01       	movw	r20, r24
     e5c:	64 e0       	ldi	r22, 0x04	; 4
     e5e:	80 e4       	ldi	r24, 0x40	; 64
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	f9 01       	movw	r30, r18
     e64:	19 95       	eicall
}
     e66:	00 00       	nop
     e68:	24 96       	adiw	r28, 0x04	; 4
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e90:	0f 90       	pop	r0
     e92:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e96:	0f 90       	pop	r0
     e98:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e9c:	0f 90       	pop	r0
     e9e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ea2:	0f 90       	pop	r0
     ea4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ebe:	0f 92       	push	r0
     ec0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ec4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ec8:	0f 92       	push	r0
     eca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ece:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ed2:	0f 92       	push	r0
     ed4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ed8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     edc:	0f 92       	push	r0
     ede:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	00 d0       	rcall	.+0      	; 0xf00 <__vector_42+0x52>
     f00:	1f 92       	push	r1
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     f06:	20 91 d5 22 	lds	r18, 0x22D5	; 0x8022d5 <adcb_callback>
     f0a:	30 91 d6 22 	lds	r19, 0x22D6	; 0x8022d6 <adcb_callback+0x1>
     f0e:	80 e4       	ldi	r24, 0x40	; 64
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	88 e0       	ldi	r24, 0x08	; 8
     f18:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f1a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	83 70       	andi	r24, 0x03	; 3
     f24:	99 27       	eor	r25, r25
     f26:	89 2b       	or	r24, r25
     f28:	39 f4       	brne	.+14     	; 0xf38 <__vector_42+0x8a>
		index += 2;
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	8e 5f       	subi	r24, 0xFE	; 254
     f2e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	86 95       	lsr	r24
     f34:	86 95       	lsr	r24
     f36:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	81 70       	andi	r24, 0x01	; 1
     f40:	99 27       	eor	r25, r25
     f42:	89 2b       	or	r24, r25
     f44:	19 f4       	brne	.+6      	; 0xf4c <__vector_42+0x9e>
		index++;
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	ac 01       	movw	r20, r24
     f52:	40 5e       	subi	r20, 0xE0	; 224
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	84 0f       	add	r24, r20
     f6a:	95 1f       	adc	r25, r21
     f6c:	fc 01       	movw	r30, r24
     f6e:	84 81       	ldd	r24, Z+4	; 0x04
     f70:	95 81       	ldd	r25, Z+5	; 0x05
     f72:	ac 01       	movw	r20, r24
     f74:	68 e0       	ldi	r22, 0x08	; 8
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	f9 01       	movw	r30, r18
     f7c:	19 95       	eicall
}
     f7e:	00 00       	nop
     f80:	24 96       	adiw	r28, 0x04	; 4
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fa8:	0f 90       	pop	r0
     faa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fae:	0f 90       	pop	r0
     fb0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fb4:	0f 90       	pop	r0
     fb6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fba:	0f 90       	pop	r0
     fbc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	28 97       	sbiw	r28, 0x08	; 8
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	6f 83       	std	Y+7, r22	; 0x07
     fda:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	81 15       	cp	r24, r1
     fe2:	92 40       	sbci	r25, 0x02	; 2
     fe4:	29 f4       	brne	.+10     	; 0xff0 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	2d db       	rcall	.-2470   	; 0x644 <adc_get_calibration_data>
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	0a c0       	rjmp	.+20     	; 0x1004 <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	80 34       	cpi	r24, 0x40	; 64
     ff6:	92 40       	sbci	r25, 0x02	; 2
     ff8:	09 f0       	breq	.+2      	; 0xffc <adc_write_configuration+0x36>
     ffa:	56 c0       	rjmp	.+172    	; 0x10a8 <adc_write_configuration+0xe2>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	22 db       	rcall	.-2492   	; 0x644 <adc_get_calibration_data>
    1000:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	ee da       	rcall	.-2596   	; 0x5e2 <cpu_irq_save>
	adc_enable_clock(adc);
    1006:	8b 83       	std	Y+3, r24	; 0x03
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	44 da       	rcall	.-2936   	; 0x496 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	fc 01       	movw	r30, r24
    1014:	80 81       	ld	r24, Z
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	22 e0       	ldi	r18, 0x02	; 2
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
	adc->CAL = cal;
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	29 81       	ldd	r18, Y+1	; 0x01
    102a:	3a 81       	ldd	r19, Y+2	; 0x02
    102c:	fc 01       	movw	r30, r24
    102e:	24 87       	std	Z+12, r18	; 0x0c
    1030:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    1032:	8f 81       	ldd	r24, Y+7	; 0x07
    1034:	98 85       	ldd	r25, Y+8	; 0x08
    1036:	fc 01       	movw	r30, r24
    1038:	25 81       	ldd	r18, Z+5	; 0x05
    103a:	36 81       	ldd	r19, Z+6	; 0x06
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	fc 01       	movw	r30, r24
    1042:	20 8f       	std	Z+24, r18	; 0x18
    1044:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	fc 01       	movw	r30, r24
    104c:	22 81       	ldd	r18, Z+2	; 0x02
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	fc 01       	movw	r30, r24
    1054:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	fc 01       	movw	r30, r24
    105c:	24 81       	ldd	r18, Z+4	; 0x04
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	fc 01       	movw	r30, r24
    1064:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    1066:	8f 81       	ldd	r24, Y+7	; 0x07
    1068:	98 85       	ldd	r25, Y+8	; 0x08
    106a:	fc 01       	movw	r30, r24
    106c:	23 81       	ldd	r18, Z+3	; 0x03
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	fc 01       	movw	r30, r24
    1074:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	98 85       	ldd	r25, Y+8	; 0x08
    107a:	fc 01       	movw	r30, r24
    107c:	21 81       	ldd	r18, Z+1	; 0x01
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	fc 01       	movw	r30, r24
    1084:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	98 85       	ldd	r25, Y+8	; 0x08
    108a:	fc 01       	movw	r30, r24
    108c:	90 81       	ld	r25, Z
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	29 2f       	mov	r18, r25
    1092:	28 2b       	or	r18, r24
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	fc 01       	movw	r30, r24

	adc_disable_clock(adc);
    109a:	20 83       	st	Z, r18
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06

	cpu_irq_restore(flags);
    10a0:	2b da       	rcall	.-2986   	; 0x4f8 <adc_disable_clock>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	ae da       	rcall	.-2724   	; 0x602 <cpu_irq_restore>
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <adc_write_configuration+0xe4>
	} else
#endif

	{
		Assert(0);
		return;
    10a8:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	25 97       	sbiw	r28, 0x05	; 5
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	9b 83       	std	Y+3, r25	; 0x03
    10c8:	6c 83       	std	Y+4, r22	; 0x04
    10ca:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    10cc:	8a da       	rcall	.-2796   	; 0x5e2 <cpu_irq_save>
    10ce:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	e0 d9       	rcall	.-3136   	; 0x496 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	fc 01       	movw	r30, r24
    10dc:	80 81       	ld	r24, Z
    10de:	28 2f       	mov	r18, r24
    10e0:	20 7c       	andi	r18, 0xC0	; 192
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 8d       	ldd	r18, Z+24	; 0x18
    10f2:	31 8d       	ldd	r19, Z+25	; 0x19
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	fc 01       	movw	r30, r24
    10fa:	25 83       	std	Z+5, r18	; 0x05
    10fc:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	fc 01       	movw	r30, r24
    1104:	22 81       	ldd	r18, Z+2	; 0x02
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	fc 01       	movw	r30, r24
    110c:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	fc 01       	movw	r30, r24
    1114:	24 81       	ldd	r18, Z+4	; 0x04
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	fc 01       	movw	r30, r24
    111c:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	fc 01       	movw	r30, r24
    1124:	23 81       	ldd	r18, Z+3	; 0x03
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	fc 01       	movw	r30, r24
    112c:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	fc 01       	movw	r30, r24
    1134:	21 81       	ldd	r18, Z+1	; 0x01
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	fc 01       	movw	r30, r24
    113c:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03

	cpu_irq_restore(flags);
    1142:	da d9       	rcall	.-3148   	; 0x4f8 <adc_disable_clock>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	5d da       	rcall	.-2886   	; 0x602 <cpu_irq_restore>
}
    1148:	00 00       	nop
    114a:	25 96       	adiw	r28, 0x05	; 5
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	2c 97       	sbiw	r28, 0x0c	; 12
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	88 87       	std	Y+8, r24	; 0x08
    1166:	99 87       	std	Y+9, r25	; 0x09
    1168:	6a 87       	std	Y+10, r22	; 0x0a
    116a:	4b 87       	std	Y+11, r20	; 0x0b
    116c:	5c 87       	std	Y+12, r21	; 0x0c
    116e:	88 85       	ldd	r24, Y+8	; 0x08
    1170:	99 85       	ldd	r25, Y+9	; 0x09
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8a 85       	ldd	r24, Y+10	; 0x0a
    1178:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    117a:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	83 70       	andi	r24, 0x03	; 3
    1184:	99 27       	eor	r25, r25
    1186:	89 2b       	or	r24, r25
    1188:	39 f4       	brne	.+14     	; 0x1198 <adcch_write_configuration+0x42>
		index += 2;
    118a:	8f 81       	ldd	r24, Y+7	; 0x07
    118c:	8e 5f       	subi	r24, 0xFE	; 254
    118e:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1190:	8e 81       	ldd	r24, Y+6	; 0x06
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	99 27       	eor	r25, r25
    11a2:	89 2b       	or	r24, r25
    11a4:	19 f4       	brne	.+6      	; 0x11ac <adcch_write_configuration+0x56>
		index++;
    11a6:	8f 81       	ldd	r24, Y+7	; 0x07
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	9c 01       	movw	r18, r24
    11b2:	20 5e       	subi	r18, 0xE0	; 224
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	8f 81       	ldd	r24, Y+7	; 0x07
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    11d0:	08 da       	rcall	.-3056   	; 0x5e2 <cpu_irq_save>
    11d2:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    11d4:	88 85       	ldd	r24, Y+8	; 0x08
    11d6:	99 85       	ldd	r25, Y+9	; 0x09
    11d8:	5e d9       	rcall	.-3396   	; 0x496 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    11da:	8b 85       	ldd	r24, Y+11	; 0x0b
    11dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11de:	fc 01       	movw	r30, r24
    11e0:	20 81       	ld	r18, Z
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	fc 01       	movw	r30, r24
    11e8:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    11ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ee:	fc 01       	movw	r30, r24
    11f0:	22 81       	ldd	r18, Z+2	; 0x02
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	fc 01       	movw	r30, r24
    11f8:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    11fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fe:	fc 01       	movw	r30, r24
    1200:	21 81       	ldd	r18, Z+1	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	fc 01       	movw	r30, r24
    1208:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    120a:	8a 85       	ldd	r24, Y+10	; 0x0a
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	81 70       	andi	r24, 0x01	; 1
    1212:	99 27       	eor	r25, r25
    1214:	89 2b       	or	r24, r25
    1216:	41 f0       	breq	.+16     	; 0x1228 <adcch_write_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1218:	8b 85       	ldd	r24, Y+11	; 0x0b
    121a:	9c 85       	ldd	r25, Y+12	; 0x0c
    121c:	fc 01       	movw	r30, r24
    121e:	23 81       	ldd	r18, Z+3	; 0x03
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	fc 01       	movw	r30, r24
    1226:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
    1228:	88 85       	ldd	r24, Y+8	; 0x08
    122a:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    122c:	65 d9       	rcall	.-3382   	; 0x4f8 <adc_disable_clock>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	e8 d9       	rcall	.-3120   	; 0x602 <cpu_irq_restore>
}
    1232:	00 00       	nop
    1234:	2c 96       	adiw	r28, 0x0c	; 12
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	2c 97       	sbiw	r28, 0x0c	; 12
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	88 87       	std	Y+8, r24	; 0x08
    1250:	99 87       	std	Y+9, r25	; 0x09
    1252:	6a 87       	std	Y+10, r22	; 0x0a
    1254:	4b 87       	std	Y+11, r20	; 0x0b
    1256:	5c 87       	std	Y+12, r21	; 0x0c
    1258:	88 85       	ldd	r24, Y+8	; 0x08
    125a:	99 85       	ldd	r25, Y+9	; 0x09
    125c:	8c 83       	std	Y+4, r24	; 0x04
    125e:	9d 83       	std	Y+5, r25	; 0x05
    1260:	8a 85       	ldd	r24, Y+10	; 0x0a
    1262:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1264:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	83 70       	andi	r24, 0x03	; 3
    126e:	99 27       	eor	r25, r25
    1270:	89 2b       	or	r24, r25
    1272:	39 f4       	brne	.+14     	; 0x1282 <adcch_read_configuration+0x42>
		index += 2;
    1274:	8f 81       	ldd	r24, Y+7	; 0x07
    1276:	8e 5f       	subi	r24, 0xFE	; 254
    1278:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	99 27       	eor	r25, r25
    128c:	89 2b       	or	r24, r25
    128e:	19 f4       	brne	.+6      	; 0x1296 <adcch_read_configuration+0x56>
		index++;
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	9c 01       	movw	r18, r24
    129c:	20 5e       	subi	r18, 0xE0	; 224
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	8f 81       	ldd	r24, Y+7	; 0x07
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	82 0f       	add	r24, r18
    12b4:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    12ba:	93 d9       	rcall	.-3290   	; 0x5e2 <cpu_irq_save>
    12bc:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    12be:	88 85       	ldd	r24, Y+8	; 0x08
    12c0:	99 85       	ldd	r25, Y+9	; 0x09
    12c2:	e9 d8       	rcall	.-3630   	; 0x496 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 81       	ld	r18, Z
    12cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	fc 01       	movw	r30, r24
    12da:	22 81       	ldd	r18, Z+2	; 0x02
    12dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12de:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e0:	fc 01       	movw	r30, r24
    12e2:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	fc 01       	movw	r30, r24
    12ea:	21 81       	ldd	r18, Z+1	; 0x01
    12ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f0:	fc 01       	movw	r30, r24
    12f2:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    12f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	99 27       	eor	r25, r25
    12fe:	89 2b       	or	r24, r25
    1300:	41 f0       	breq	.+16     	; 0x1312 <adcch_read_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	fc 01       	movw	r30, r24
    1308:	26 81       	ldd	r18, Z+6	; 0x06
    130a:	8b 85       	ldd	r24, Y+11	; 0x0b
    130c:	9c 85       	ldd	r25, Y+12	; 0x0c
    130e:	fc 01       	movw	r30, r24
    1310:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
    1312:	88 85       	ldd	r24, Y+8	; 0x08
    1314:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    1316:	f0 d8       	rcall	.-3616   	; 0x4f8 <adc_disable_clock>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	73 d9       	rcall	.-3354   	; 0x602 <cpu_irq_restore>
}
    131c:	00 00       	nop
    131e:	2c 96       	adiw	r28, 0x0c	; 12
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	98 e4       	ldi	r25, 0x48	; 72
    1336:	a8 ee       	ldi	r26, 0xE8	; 232
    1338:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    134e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1350:	ec df       	rcall	.-40     	; 0x132a <sysclk_get_main_hz>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	29 81       	ldd	r18, Y+1	; 0x01
    1358:	22 2f       	mov	r18, r18
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <sysclk_get_per4_hz+0x22>
    135e:	b6 95       	lsr	r27
    1360:	a7 95       	ror	r26
    1362:	97 95       	ror	r25
    1364:	87 95       	ror	r24
    1366:	2a 95       	dec	r18
    1368:	d2 f7       	brpl	.-12     	; 0x135e <sysclk_get_per4_hz+0x1a>
}
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    137e:	e2 df       	rcall	.-60     	; 0x1344 <sysclk_get_per4_hz>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    1396:	ef df       	rcall	.-34     	; 0x1376 <sysclk_get_per2_hz>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
}
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    13ae:	ef df       	rcall	.-34     	; 0x138e <sysclk_get_per_hz>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
}
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <tc_write_clock_source+0x6>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    13d6:	98 2f       	mov	r25, r24
    13d8:	90 7f       	andi	r25, 0xF0	; 240
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	89 2b       	or	r24, r25
    13de:	28 2f       	mov	r18, r24
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    13e8:	00 00       	nop
    13ea:	23 96       	adiw	r28, 0x03	; 3
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <tc_write_period+0x6>
    13fc:	1f 92       	push	r1
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	6b 83       	std	Y+3, r22	; 0x03
    1408:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	fc 01       	movw	r30, r24
    1414:	26 a3       	std	Z+38, r18	; 0x26
    1416:	37 a3       	std	Z+39, r19	; 0x27
}
    1418:	00 00       	nop
    141a:	24 96       	adiw	r28, 0x04	; 4
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	08 95       	ret

00001426 <tc_enable_cc_channels>:
 * \param tc Pointer to TC module.
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <tc_enable_cc_channels+0x6>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	6b 83       	std	Y+3, r22	; 0x03
	if (tc_is_tc0(void *tc)) {
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	80 74       	andi	r24, 0x40	; 64
    143c:	99 27       	eor	r25, r25
    143e:	89 2b       	or	r24, r25
    1440:	61 f4       	brne	.+24     	; 0x145a <tc_enable_cc_channels+0x34>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	fc 01       	movw	r30, r24
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	29 2f       	mov	r18, r25
    144e:	28 2b       	or	r18, r24
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	fc 01       	movw	r30, r24
    1456:	21 83       	std	Z+1, r18	; 0x01
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <tc_enable_cc_channels+0x5a>
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
	} else if (tc_is_tc1(void *tc)) {
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	80 74       	andi	r24, 0x40	; 64
    1460:	99 27       	eor	r25, r25
    1462:	89 2b       	or	r24, r25
    1464:	69 f0       	breq	.+26     	; 0x1480 <tc_enable_cc_channels+0x5a>
		((TC1_t *)tc)->CTRLB |=
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	fc 01       	movw	r30, r24
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	98 2f       	mov	r25, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	80 73       	andi	r24, 0x30	; 48
    1474:	89 2b       	or	r24, r25
    1476:	28 2f       	mov	r18, r24
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	fc 01       	movw	r30, r24
    147e:	21 83       	std	Z+1, r18	; 0x01
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
    1480:	00 00       	nop
    1482:	23 96       	adiw	r28, 0x03	; 3
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	25 97       	sbiw	r28, 0x05	; 5
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	6b 83       	std	Y+3, r22	; 0x03
    14a2:	4c 83       	std	Y+4, r20	; 0x04
    14a4:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	80 74       	andi	r24, 0x40	; 64
    14ac:	99 27       	eor	r25, r25
    14ae:	89 2b       	or	r24, r25
    14b0:	99 f5       	brne	.+102    	; 0x1518 <tc_write_cc_buffer+0x8a>
		switch (channel_index) {
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	a1 f0       	breq	.+40     	; 0x14e6 <tc_write_cc_buffer+0x58>
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	1c f4       	brge	.+6      	; 0x14ca <tc_write_cc_buffer+0x3c>
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	39 f0       	breq	.+14     	; 0x14d6 <tc_write_cc_buffer+0x48>
    14c8:	46 c0       	rjmp	.+140    	; 0x1556 <tc_write_cc_buffer+0xc8>
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	91 05       	cpc	r25, r1
    14ce:	99 f0       	breq	.+38     	; 0x14f6 <tc_write_cc_buffer+0x68>
    14d0:	04 97       	sbiw	r24, 0x04	; 4
    14d2:	c9 f0       	breq	.+50     	; 0x1506 <tc_write_cc_buffer+0x78>
    14d4:	40 c0       	rjmp	.+128    	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	fc 01       	movw	r30, r24
    14e0:	20 af       	std	Z+56, r18	; 0x38
    14e2:	31 af       	std	Z+57, r19	; 0x39
			break;
    14e4:	38 c0       	rjmp	.+112    	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	2c 81       	ldd	r18, Y+4	; 0x04
    14ec:	3d 81       	ldd	r19, Y+5	; 0x05
    14ee:	fc 01       	movw	r30, r24
    14f0:	22 af       	std	Z+58, r18	; 0x3a
    14f2:	33 af       	std	Z+59, r19	; 0x3b
			break;
    14f4:	30 c0       	rjmp	.+96     	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	3d 81       	ldd	r19, Y+5	; 0x05
    14fe:	fc 01       	movw	r30, r24
    1500:	24 af       	std	Z+60, r18	; 0x3c
    1502:	35 af       	std	Z+61, r19	; 0x3d
			break;
    1504:	28 c0       	rjmp	.+80     	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	fc 01       	movw	r30, r24
    1510:	26 af       	std	Z+62, r18	; 0x3e
    1512:	37 af       	std	Z+63, r19	; 0x3f
			break;
    1514:	00 00       	nop
    1516:	1f c0       	rjmp	.+62     	; 0x1556 <tc_write_cc_buffer+0xc8>
		}
	} else if (tc_is_tc1(void *tc)) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	80 74       	andi	r24, 0x40	; 64
    151e:	99 27       	eor	r25, r25
    1520:	89 2b       	or	r24, r25
    1522:	c9 f0       	breq	.+50     	; 0x1556 <tc_write_cc_buffer+0xc8>
			switch (channel_index) {
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	19 f0       	breq	.+6      	; 0x1536 <tc_write_cc_buffer+0xa8>
    1530:	02 97       	sbiw	r24, 0x02	; 2
    1532:	49 f0       	breq	.+18     	; 0x1546 <tc_write_cc_buffer+0xb8>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
				break;
			default:
				return;
    1534:	10 c0       	rjmp	.+32     	; 0x1556 <tc_write_cc_buffer+0xc8>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	fc 01       	movw	r30, r24
    1540:	20 af       	std	Z+56, r18	; 0x38
    1542:	31 af       	std	Z+57, r19	; 0x39
				break;
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <tc_write_cc_buffer+0xc8>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	fc 01       	movw	r30, r24
    1550:	22 af       	std	Z+58, r18	; 0x3a
    1552:	33 af       	std	Z+59, r19	; 0x3b
				break;
    1554:	00 00       	nop
			default:
				return;
			}
		}
}
    1556:	25 96       	adiw	r28, 0x05	; 5
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	00 d0       	rcall	.+0      	; 0x1568 <tc_set_wgm+0x6>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	fc 01       	movw	r30, r24
    1578:	81 81       	ldd	r24, Z+1	; 0x01
    157a:	98 2f       	mov	r25, r24
    157c:	98 7f       	andi	r25, 0xF8	; 248
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	89 2b       	or	r24, r25
    1582:	28 2f       	mov	r18, r24
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	21 83       	std	Z+1, r18	; 0x01
}
    158c:	00 00       	nop
    158e:	23 96       	adiw	r28, 0x03	; 3
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <pwm_set_duty_cycle_percent+0x6>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	fc 01       	movw	r30, r24
    15b0:	85 81       	ldd	r24, Z+5	; 0x05
    15b2:	96 81       	ldd	r25, Z+6	; 0x06
    15b4:	9c 01       	movw	r18, r24
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 aa 4a 	call	0x9554	; 0x9554 <__mulsi3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
    15d0:	24 e6       	ldi	r18, 0x64	; 100
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    15e0:	da 01       	movw	r26, r20
    15e2:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    15e4:	9c 01       	movw	r18, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	fc 01       	movw	r30, r24
    15ec:	62 81       	ldd	r22, Z+2	; 0x02
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	fc 01       	movw	r30, r24
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	a9 01       	movw	r20, r18
    15fa:	49 df       	rcall	.-366    	; 0x148e <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
    15fc:	00 00       	nop
    15fe:	23 96       	adiw	r28, 0x03	; 3
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	2c 97       	sbiw	r28, 0x0c	; 12
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	89 87       	std	Y+9, r24	; 0x09
    1622:	9a 87       	std	Y+10, r25	; 0x0a
    1624:	6b 87       	std	Y+11, r22	; 0x0b
    1626:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t cpu_hz = sysclk_get_cpu_hz();
    1628:	be de       	rcall	.-644    	; 0x13a6 <sysclk_get_cpu_hz>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8b 83       	std	Y+3, r24	; 0x03
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	ad 83       	std	Y+5, r26	; 0x05
    1634:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1636:	8b 85       	ldd	r24, Y+11	; 0x0b
    1638:	9c 85       	ldd	r25, Y+12	; 0x0c
    163a:	9c 01       	movw	r18, r24
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	ad 81       	ldd	r26, Y+5	; 0x05
    1646:	be 81       	ldd	r27, Y+6	; 0x06
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    1650:	da 01       	movw	r26, r20
    1652:	c9 01       	movw	r24, r18
    1654:	2f ef       	ldi	r18, 0xFF	; 255
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    1664:	da 01       	movw	r26, r20
    1666:	c9 01       	movw	r24, r18
    1668:	8f 83       	std	Y+7, r24	; 0x07
    166a:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
    166c:	8f 81       	ldd	r24, Y+7	; 0x07
    166e:	98 85       	ldd	r25, Y+8	; 0x08
    1670:	89 2b       	or	r24, r25
    1672:	51 f4       	brne	.+20     	; 0x1688 <pwm_set_frequency+0x7e>
		dividor = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	21 e0       	ldi	r18, 0x01	; 1
    1682:	fc 01       	movw	r30, r24
    1684:	24 83       	std	Z+4, r18	; 0x04
    1686:	52 c0       	rjmp	.+164    	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 2) {
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	02 97       	sbiw	r24, 0x02	; 2
    168e:	50 f4       	brcc	.+20     	; 0x16a4 <pwm_set_frequency+0x9a>
		dividor = 2;
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	22 e0       	ldi	r18, 0x02	; 2
    169e:	fc 01       	movw	r30, r24
    16a0:	24 83       	std	Z+4, r18	; 0x04
    16a2:	44 c0       	rjmp	.+136    	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 4) {
    16a4:	8f 81       	ldd	r24, Y+7	; 0x07
    16a6:	98 85       	ldd	r25, Y+8	; 0x08
    16a8:	04 97       	sbiw	r24, 0x04	; 4
    16aa:	50 f4       	brcc	.+20     	; 0x16c0 <pwm_set_frequency+0xb6>
		dividor = 4;
    16ac:	84 e0       	ldi	r24, 0x04	; 4
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	23 e0       	ldi	r18, 0x03	; 3
    16ba:	fc 01       	movw	r30, r24
    16bc:	24 83       	std	Z+4, r18	; 0x04
    16be:	36 c0       	rjmp	.+108    	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 8) {
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	08 97       	sbiw	r24, 0x08	; 8
    16c6:	50 f4       	brcc	.+20     	; 0x16dc <pwm_set_frequency+0xd2>
		dividor = 8;
    16c8:	88 e0       	ldi	r24, 0x08	; 8
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	24 e0       	ldi	r18, 0x04	; 4
    16d6:	fc 01       	movw	r30, r24
    16d8:	24 83       	std	Z+4, r18	; 0x04
    16da:	28 c0       	rjmp	.+80     	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 64) {
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	98 85       	ldd	r25, Y+8	; 0x08
    16e0:	80 34       	cpi	r24, 0x40	; 64
    16e2:	91 05       	cpc	r25, r1
    16e4:	50 f4       	brcc	.+20     	; 0x16fa <pwm_set_frequency+0xf0>
		dividor = 64;
    16e6:	80 e4       	ldi	r24, 0x40	; 64
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	25 e0       	ldi	r18, 0x05	; 5
    16f4:	fc 01       	movw	r30, r24
    16f6:	24 83       	std	Z+4, r18	; 0x04
    16f8:	19 c0       	rjmp	.+50     	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 256) {
    16fa:	8f 81       	ldd	r24, Y+7	; 0x07
    16fc:	98 85       	ldd	r25, Y+8	; 0x08
    16fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1700:	91 05       	cpc	r25, r1
    1702:	09 f0       	breq	.+2      	; 0x1706 <pwm_set_frequency+0xfc>
    1704:	50 f4       	brcc	.+20     	; 0x171a <pwm_set_frequency+0x110>
		dividor = 256;
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	26 e0       	ldi	r18, 0x06	; 6
    1714:	fc 01       	movw	r30, r24
    1716:	24 83       	std	Z+4, r18	; 0x04
    1718:	09 c0       	rjmp	.+18     	; 0x172c <pwm_set_frequency+0x122>
	} else {
		dividor = 1024;
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	94 e0       	ldi	r25, 0x04	; 4
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	27 e0       	ldi	r18, 0x07	; 7
    1728:	fc 01       	movw	r30, r24
    172a:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	9c 01       	movw	r18, r24
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	ad 81       	ldd	r26, Y+5	; 0x05
    173c:	be 81       	ldd	r27, Y+6	; 0x06
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    1746:	da 01       	movw	r26, r20
    1748:	c9 01       	movw	r24, r18
    174a:	7c 01       	movw	r14, r24
    174c:	8d 01       	movw	r16, r26
    174e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1750:	9c 85       	ldd	r25, Y+12	; 0x0c
    1752:	9c 01       	movw	r18, r24
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	c8 01       	movw	r24, r16
    175a:	b7 01       	movw	r22, r14
    175c:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    1760:	da 01       	movw	r26, r20
    1762:	c9 01       	movw	r24, r18
    1764:	9c 01       	movw	r18, r24
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	fc 01       	movw	r30, r24
    176c:	25 83       	std	Z+5, r18	; 0x05
    176e:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	fc 01       	movw	r30, r24
    1776:	85 81       	ldd	r24, Z+5	; 0x05
    1778:	96 81       	ldd	r25, Z+6	; 0x06
    177a:	84 36       	cpi	r24, 0x64	; 100
    177c:	91 05       	cpc	r25, r1
    177e:	48 f4       	brcc	.+18     	; 0x1792 <pwm_set_frequency+0x188>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	fc 01       	movw	r30, r24
    1786:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	fc 01       	movw	r30, r24
    178e:	15 82       	std	Z+5, r1	; 0x05
    1790:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
}
    1792:	00 00       	nop
    1794:	2c 96       	adiw	r28, 0x0c	; 12
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	27 97       	sbiw	r28, 0x07	; 7
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	6c 83       	std	Y+4, r22	; 0x04
    17bc:	4d 83       	std	Y+5, r20	; 0x05
    17be:	2e 83       	std	Y+6, r18	; 0x06
    17c0:	3f 83       	std	Y+7, r19	; 0x07
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
    17c2:	19 82       	std	Y+1, r1	; 0x01

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	09 2e       	mov	r0, r25
    17cc:	00 0c       	add	r0, r0
    17ce:	aa 0b       	sbc	r26, r26
    17d0:	bb 0b       	sbc	r27, r27
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	27 e0       	ldi	r18, 0x07	; 7
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	84 1b       	sub	r24, r20
    17dc:	95 0b       	sbc	r25, r21
    17de:	28 17       	cp	r18, r24
    17e0:	39 07       	cpc	r19, r25
    17e2:	08 f4       	brcc	.+2      	; 0x17e6 <pwm_init+0x3e>
    17e4:	0f c1       	rjmp	.+542    	; 0x1a04 <pwm_init+0x25c>
    17e6:	fc 01       	movw	r30, r24
    17e8:	88 27       	eor	r24, r24
    17ea:	e2 50       	subi	r30, 0x02	; 2
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	0c 94 f7 4a 	jmp	0x95ee	; 0x95ee <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	38 e0       	ldi	r19, 0x08	; 8
    17fc:	fc 01       	movw	r30, r24
    17fe:	20 83       	st	Z, r18
    1800:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	96 e0       	ldi	r25, 0x06	; 6
    1806:	20 e4       	ldi	r18, 0x40	; 64
    1808:	36 e0       	ldi	r19, 0x06	; 6
    180a:	f9 01       	movw	r30, r18
    180c:	20 81       	ld	r18, Z
    180e:	62 2f       	mov	r22, r18
    1810:	2d 81       	ldd	r18, Y+5	; 0x05
    1812:	22 2f       	mov	r18, r18
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	41 50       	subi	r20, 0x01	; 1
    181a:	51 09       	sbc	r21, r1
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <pwm_init+0x7e>
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	4a 95       	dec	r20
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <pwm_init+0x7a>
    182a:	26 2b       	or	r18, r22
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
		num_chan = 4;
    1830:	84 e0       	ldi	r24, 0x04	; 4
    1832:	89 83       	std	Y+1, r24	; 0x01
		break;
    1834:	e8 c0       	rjmp	.+464    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	9b 81       	ldd	r25, Y+3	; 0x03
    183a:	20 e4       	ldi	r18, 0x40	; 64
    183c:	38 e0       	ldi	r19, 0x08	; 8
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
    1842:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1844:	80 e4       	ldi	r24, 0x40	; 64
    1846:	96 e0       	ldi	r25, 0x06	; 6
    1848:	20 e4       	ldi	r18, 0x40	; 64
    184a:	36 e0       	ldi	r19, 0x06	; 6
    184c:	f9 01       	movw	r30, r18
    184e:	20 81       	ld	r18, Z
    1850:	62 2f       	mov	r22, r18
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	22 2f       	mov	r18, r18
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	4d 5f       	subi	r20, 0xFD	; 253
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <pwm_init+0xc0>
    1864:	22 0f       	add	r18, r18
    1866:	33 1f       	adc	r19, r19
    1868:	4a 95       	dec	r20
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <pwm_init+0xbc>
    186c:	26 2b       	or	r18, r22
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18
		num_chan = 2;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 83       	std	Y+1, r24	; 0x01
		break;
    1876:	c7 c0       	rjmp	.+398    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	39 e0       	ldi	r19, 0x09	; 9
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
    1884:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1886:	80 e6       	ldi	r24, 0x60	; 96
    1888:	96 e0       	ldi	r25, 0x06	; 6
    188a:	20 e6       	ldi	r18, 0x60	; 96
    188c:	36 e0       	ldi	r19, 0x06	; 6
    188e:	f9 01       	movw	r30, r18
    1890:	20 81       	ld	r18, Z
    1892:	62 2f       	mov	r22, r18
    1894:	2d 81       	ldd	r18, Y+5	; 0x05
    1896:	22 2f       	mov	r18, r18
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	41 50       	subi	r20, 0x01	; 1
    189e:	51 09       	sbc	r21, r1
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <pwm_init+0x102>
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	4a 95       	dec	r20
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <pwm_init+0xfe>
    18ae:	26 2b       	or	r18, r22
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
		num_chan = 4;
    18b4:	84 e0       	ldi	r24, 0x04	; 4
    18b6:	89 83       	std	Y+1, r24	; 0x01
		break;
    18b8:	a6 c0       	rjmp	.+332    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	20 e4       	ldi	r18, 0x40	; 64
    18c0:	39 e0       	ldi	r19, 0x09	; 9
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
    18c6:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    18c8:	80 e6       	ldi	r24, 0x60	; 96
    18ca:	96 e0       	ldi	r25, 0x06	; 6
    18cc:	20 e6       	ldi	r18, 0x60	; 96
    18ce:	36 e0       	ldi	r19, 0x06	; 6
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	62 2f       	mov	r22, r18
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	22 2f       	mov	r18, r18
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	4d 5f       	subi	r20, 0xFD	; 253
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <pwm_init+0x144>
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	4a 95       	dec	r20
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <pwm_init+0x140>
    18f0:	26 2b       	or	r18, r22
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 83       	st	Z, r18
		num_chan = 2;
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	89 83       	std	Y+1, r24	; 0x01
		break;
    18fa:	85 c0       	rjmp	.+266    	; 0x1a06 <pwm_init+0x25e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3a e0       	ldi	r19, 0x0A	; 10
    1904:	fc 01       	movw	r30, r24
    1906:	20 83       	st	Z, r18
    1908:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    190a:	80 e8       	ldi	r24, 0x80	; 128
    190c:	96 e0       	ldi	r25, 0x06	; 6
    190e:	20 e8       	ldi	r18, 0x80	; 128
    1910:	36 e0       	ldi	r19, 0x06	; 6
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	62 2f       	mov	r22, r18
    1918:	2d 81       	ldd	r18, Y+5	; 0x05
    191a:	22 2f       	mov	r18, r18
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	41 50       	subi	r20, 0x01	; 1
    1922:	51 09       	sbc	r21, r1
    1924:	21 e0       	ldi	r18, 0x01	; 1
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <pwm_init+0x186>
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	4a 95       	dec	r20
    1930:	e2 f7       	brpl	.-8      	; 0x192a <pwm_init+0x182>
    1932:	26 2b       	or	r18, r22
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18
		num_chan = 4;
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	89 83       	std	Y+1, r24	; 0x01
		break;
    193c:	64 c0       	rjmp	.+200    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	20 e4       	ldi	r18, 0x40	; 64
    1944:	3a e0       	ldi	r19, 0x0A	; 10
    1946:	fc 01       	movw	r30, r24
    1948:	20 83       	st	Z, r18
    194a:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	96 e0       	ldi	r25, 0x06	; 6
    1950:	20 e8       	ldi	r18, 0x80	; 128
    1952:	36 e0       	ldi	r19, 0x06	; 6
    1954:	f9 01       	movw	r30, r18
    1956:	20 81       	ld	r18, Z
    1958:	62 2f       	mov	r22, r18
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	22 2f       	mov	r18, r18
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	a9 01       	movw	r20, r18
    1962:	4d 5f       	subi	r20, 0xFD	; 253
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <pwm_init+0x1c8>
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	4a 95       	dec	r20
    1972:	e2 f7       	brpl	.-8      	; 0x196c <pwm_init+0x1c4>
    1974:	26 2b       	or	r18, r22
    1976:	fc 01       	movw	r30, r24
    1978:	20 83       	st	Z, r18
		num_chan = 2;
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	89 83       	std	Y+1, r24	; 0x01
		break;
    197e:	43 c0       	rjmp	.+134    	; 0x1a06 <pwm_init+0x25e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3b e0       	ldi	r19, 0x0B	; 11
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18
    198c:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    198e:	80 ea       	ldi	r24, 0xA0	; 160
    1990:	96 e0       	ldi	r25, 0x06	; 6
    1992:	20 ea       	ldi	r18, 0xA0	; 160
    1994:	36 e0       	ldi	r19, 0x06	; 6
    1996:	f9 01       	movw	r30, r18
    1998:	20 81       	ld	r18, Z
    199a:	62 2f       	mov	r22, r18
    199c:	2d 81       	ldd	r18, Y+5	; 0x05
    199e:	22 2f       	mov	r18, r18
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	a9 01       	movw	r20, r18
    19a4:	41 50       	subi	r20, 0x01	; 1
    19a6:	51 09       	sbc	r21, r1
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <pwm_init+0x20a>
    19ae:	22 0f       	add	r18, r18
    19b0:	33 1f       	adc	r19, r19
    19b2:	4a 95       	dec	r20
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <pwm_init+0x206>
    19b6:	26 2b       	or	r18, r22
    19b8:	fc 01       	movw	r30, r24
    19ba:	20 83       	st	Z, r18
		num_chan = 4;
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	89 83       	std	Y+1, r24	; 0x01
		break;
    19c0:	22 c0       	rjmp	.+68     	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCF1)
	case PWM_TCF1:
		config->tc = &TCF1;
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	20 e4       	ldi	r18, 0x40	; 64
    19c8:	3b e0       	ldi	r19, 0x0B	; 11
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 83       	st	Z, r18
    19ce:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel+3));
    19d0:	80 ea       	ldi	r24, 0xA0	; 160
    19d2:	96 e0       	ldi	r25, 0x06	; 6
    19d4:	20 ea       	ldi	r18, 0xA0	; 160
    19d6:	36 e0       	ldi	r19, 0x06	; 6
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	62 2f       	mov	r22, r18
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	22 2f       	mov	r18, r18
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	a9 01       	movw	r20, r18
    19e6:	4d 5f       	subi	r20, 0xFD	; 253
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <pwm_init+0x24c>
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	4a 95       	dec	r20
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <pwm_init+0x248>
    19f8:	26 2b       	or	r18, r22
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
		num_chan = 2;
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	89 83       	std	Y+1, r24	; 0x01
		break;
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <pwm_init+0x25e>
#endif
	default:
		Assert(false);
		break;
    1a04:	00 00       	nop
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	22 83       	std	Z+2, r18	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	91 05       	cpc	r25, r1
    1a1a:	91 f0       	breq	.+36     	; 0x1a40 <pwm_init+0x298>
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	91 05       	cpc	r25, r1
    1a20:	1c f4       	brge	.+6      	; 0x1a28 <pwm_init+0x280>
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	39 f0       	breq	.+14     	; 0x1a34 <pwm_init+0x28c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
		break;
	default:
		Assert(false);
		break;
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <pwm_init+0x2bc>
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;

	/* Set the correct cc_mask */
	switch (channel) {
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	79 f0       	breq	.+30     	; 0x1a4c <pwm_init+0x2a4>
    1a2e:	04 97       	sbiw	r24, 0x04	; 4
    1a30:	99 f0       	breq	.+38     	; 0x1a58 <pwm_init+0x2b0>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
		break;
	default:
		Assert(false);
		break;
    1a32:	18 c0       	rjmp	.+48     	; 0x1a64 <pwm_init+0x2bc>
	config->channel = channel;

	/* Set the correct cc_mask */
	switch (channel) {
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	20 e1       	ldi	r18, 0x10	; 16
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <pwm_init+0x2bc>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	9b 81       	ldd	r25, Y+3	; 0x03
    1a44:	20 e2       	ldi	r18, 0x20	; 32
    1a46:	fc 01       	movw	r30, r24
    1a48:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <pwm_init+0x2bc>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a50:	20 e4       	ldi	r18, 0x40	; 64
    1a52:	fc 01       	movw	r30, r24
    1a54:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <pwm_init+0x2bc>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	20 e8       	ldi	r18, 0x80	; 128
    1a5e:	fc 01       	movw	r30, r24
    1a60:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a62:	00 00       	nop
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	fc 01       	movw	r30, r24
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	0e 94 3d 32 	call	0x647a	; 0x647a <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	fc 01       	movw	r30, r24
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	63 e0       	ldi	r22, 0x03	; 3
    1a7e:	71 dd       	rcall	.-1310   	; 0x1562 <tc_set_wgm>

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	fc 01       	movw	r30, r24
    1a86:	15 82       	std	Z+5, r1	; 0x05
    1a88:	16 82       	std	Z+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	fc 01       	movw	r30, r24
    1a90:	14 82       	std	Z+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	8f dc       	rcall	.-1762   	; 0x13be <tc_write_clock_source>

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa2:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	af dd       	rcall	.-1186   	; 0x160a <pwm_set_frequency>
}
    1aac:	00 00       	nop
    1aae:	27 96       	adiw	r28, 0x07	; 7
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <pwm_start+0x6>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	6b 83       	std	Y+3, r22	; 0x03
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad0:	64 dd       	rcall	.-1336   	; 0x159a <pwm_set_duty_cycle_percent>
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	25 81       	ldd	r18, Z+5	; 0x05
    1ada:	36 81       	ldd	r19, Z+6	; 0x06
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	86 dc       	rcall	.-1780   	; 0x13f6 <tc_write_period>
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	fc 01       	movw	r30, r24
    1af0:	23 81       	ldd	r18, Z+3	; 0x03
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	62 2f       	mov	r22, r18
    1afe:	93 dc       	rcall	.-1754   	; 0x1426 <tc_enable_cc_channels>
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	fc 01       	movw	r30, r24
    1b06:	24 81       	ldd	r18, Z+4	; 0x04
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	62 2f       	mov	r22, r18
    1b14:	54 dc       	rcall	.-1880   	; 0x13be <tc_write_clock_source>
}
    1b16:	00 00       	nop
    1b18:	23 96       	adiw	r28, 0x03	; 3
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	1f 92       	push	r1
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    1b2e:	8f e3       	ldi	r24, 0x3F	; 63
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	fc 01       	movw	r30, r24
    1b34:	80 81       	ld	r24, Z
    1b36:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b38:	f8 94       	cli
	return flags;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	1f 92       	push	r1
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    1b50:	8f e3       	ldi	r24, 0x3F	; 63
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
}
    1b5a:	00 00       	nop
    1b5c:	0f 90       	pop	r0
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	98 e4       	ldi	r25, 0x48	; 72
    1b70:	a8 ee       	ldi	r26, 0xE8	; 232
    1b72:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	1f 92       	push	r1
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    1b88:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1b8a:	ec df       	rcall	.-40     	; 0x1b64 <sysclk_get_main_hz>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	29 81       	ldd	r18, Y+1	; 0x01
    1b92:	22 2f       	mov	r18, r18
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <sysclk_get_per4_hz+0x22>
    1b98:	b6 95       	lsr	r27
    1b9a:	a7 95       	ror	r26
    1b9c:	97 95       	ror	r25
    1b9e:	87 95       	ror	r24
    1ba0:	2a 95       	dec	r18
    1ba2:	d2 f7       	brpl	.-12     	; 0x1b98 <sysclk_get_per4_hz+0x1a>
}
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0f 90       	pop	r0
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    1bb8:	e2 df       	rcall	.-60     	; 0x1b7e <sysclk_get_per4_hz>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    1bd0:	ef df       	rcall	.-34     	; 0x1bb0 <sysclk_get_per2_hz>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
}
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <adc_start_conversion+0x6>
    1be6:	1f 92       	push	r1
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
    1bf2:	98 df       	rcall	.-208    	; 0x1b24 <cpu_irq_save>
    1bf4:	89 83       	std	Y+1, r24	; 0x01
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	82 2b       	or	r24, r18
    1c10:	28 2f       	mov	r18, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
#endif
	cpu_irq_restore(flags);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	93 df       	rcall	.-218    	; 0x1b44 <cpu_irq_restore>
}
    1c1e:	00 00       	nop
    1c20:	24 96       	adiw	r28, 0x04	; 4
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <adc_get_interrupt_flag+0x6>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	fc 01       	movw	r30, r24
    1c42:	96 81       	ldd	r25, Z+6	; 0x06
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	89 23       	and	r24, r25
}
    1c48:	23 96       	adiw	r28, 0x03	; 3
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	08 95       	ret

00001c54 <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <adc_clear_interrupt_flag+0x6>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	26 83       	std	Z+6, r18	; 0x06
}
    1c6e:	00 00       	nop
    1c70:	23 96       	adiw	r28, 0x03	; 3
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <adc_wait_for_interrupt_flag+0x6>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	6b 81       	ldd	r22, Y+3	; 0x03
    1c92:	cc df       	rcall	.-104    	; 0x1c2c <adc_get_interrupt_flag>
    1c94:	98 2f       	mov	r25, r24
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	98 17       	cp	r25, r24
    1c9a:	c1 f7       	brne	.-16     	; 0x1c8c <adc_wait_for_interrupt_flag+0x10>
	adc_clear_interrupt_flag(adc, ch_mask);
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ca2:	d8 df       	rcall	.-80     	; 0x1c54 <adc_clear_interrupt_flag>
}
    1ca4:	00 00       	nop
    1ca6:	23 96       	adiw	r28, 0x03	; 3
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	2d 97       	sbiw	r28, 0x0d	; 13
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	88 87       	std	Y+8, r24	; 0x08
    1cc2:	99 87       	std	Y+9, r25	; 0x09
    1cc4:	4a 87       	std	Y+10, r20	; 0x0a
    1cc6:	5b 87       	std	Y+11, r21	; 0x0b
    1cc8:	6c 87       	std	Y+12, r22	; 0x0c
    1cca:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    1ccc:	7d df       	rcall	.-262    	; 0x1bc8 <sysclk_get_per_hz>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	ac 83       	std	Y+4, r26	; 0x04
    1cd8:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	ac 81       	ldd	r26, Y+4	; 0x04
    1ce0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ce2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ce4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ce6:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ce8:	5d 85       	ldd	r21, Y+13	; 0x0d
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    1cf2:	da 01       	movw	r26, r20
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	8e 83       	std	Y+6, r24	; 0x06
    1cf8:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	05 97       	sbiw	r24, 0x05	; 5
    1d00:	10 f4       	brcc	.+4      	; 0x1d06 <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    1d02:	19 82       	std	Y+1, r1	; 0x01
    1d04:	2f c0       	rjmp	.+94     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    1d06:	8e 81       	ldd	r24, Y+6	; 0x06
    1d08:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0a:	09 97       	sbiw	r24, 0x09	; 9
    1d0c:	18 f4       	brcc	.+6      	; 0x1d14 <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	28 c0       	rjmp	.+80     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	41 97       	sbiw	r24, 0x11	; 17
    1d1a:	18 f4       	brcc	.+6      	; 0x1d22 <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	21 c0       	rjmp	.+66     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	9f 81       	ldd	r25, Y+7	; 0x07
    1d26:	81 97       	sbiw	r24, 0x21	; 33
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	1a c0       	rjmp	.+52     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
    1d32:	9f 81       	ldd	r25, Y+7	; 0x07
    1d34:	81 34       	cpi	r24, 0x41	; 65
    1d36:	91 05       	cpc	r25, r1
    1d38:	18 f4       	brcc	.+6      	; 0x1d40 <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	12 c0       	rjmp	.+36     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	9f 81       	ldd	r25, Y+7	; 0x07
    1d44:	81 38       	cpi	r24, 0x81	; 129
    1d46:	91 05       	cpc	r25, r1
    1d48:	18 f4       	brcc	.+6      	; 0x1d50 <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    1d50:	8e 81       	ldd	r24, Y+6	; 0x06
    1d52:	9f 81       	ldd	r25, Y+7	; 0x07
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 40       	sbci	r25, 0x01	; 1
    1d58:	18 f4       	brcc	.+6      	; 0x1d60 <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    1d60:	87 e0       	ldi	r24, 0x07	; 7
    1d62:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    1d64:	88 85       	ldd	r24, Y+8	; 0x08
    1d66:	99 85       	ldd	r25, Y+9	; 0x09
    1d68:	29 81       	ldd	r18, Y+1	; 0x01
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	24 83       	std	Z+4, r18	; 0x04
}
    1d6e:	00 00       	nop
    1d70:	2d 96       	adiw	r28, 0x0d	; 13
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	25 97       	sbiw	r28, 0x05	; 5
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
    1d90:	4c 83       	std	Y+4, r20	; 0x04
    1d92:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	fc 01       	movw	r30, r24
    1d9a:	81 81       	ldd	r24, Z+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	29 7e       	andi	r18, 0xE9	; 233
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	fc 01       	movw	r30, r24
    1da6:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	fc 01       	movw	r30, r24
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	2c 81       	ldd	r18, Y+4	; 0x04
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	82 2b       	or	r24, r18
    1db6:	29 2f       	mov	r18, r25
    1db8:	28 2b       	or	r18, r24
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	28 2f       	mov	r18, r24
    1dcc:	2f 78       	andi	r18, 0x8F	; 143
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	fc 01       	movw	r30, r24
    1ddc:	92 81       	ldd	r25, Z+2	; 0x02
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	29 2f       	mov	r18, r25
    1de2:	28 2b       	or	r18, r24
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	fc 01       	movw	r30, r24
    1dea:	22 83       	std	Z+2, r18	; 0x02
}
    1dec:	00 00       	nop
    1dee:	25 96       	adiw	r28, 0x05	; 5
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	25 97       	sbiw	r28, 0x05	; 5
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	6b 83       	std	Y+3, r22	; 0x03
    1e0e:	4c 83       	std	Y+4, r20	; 0x04
    1e10:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	11 f1       	breq	.+68     	; 0x1e62 <adc_set_conversion_trigger+0x68>
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	91 05       	cpc	r25, r1
    1e22:	2c f4       	brge	.+10     	; 0x1e2e <adc_set_conversion_trigger+0x34>
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <adc_set_conversion_trigger+0x4a>
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	b9 f1       	breq	.+110    	; 0x1e9a <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    1e2c:	a9 c0       	rjmp	.+338    	; 0x1f80 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	91 05       	cpc	r25, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <adc_set_conversion_trigger+0x3c>
    1e34:	53 c0       	rjmp	.+166    	; 0x1edc <adc_set_conversion_trigger+0xe2>
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	91 05       	cpc	r25, r1
    1e3a:	d4 f1       	brlt	.+116    	; 0x1eb0 <adc_set_conversion_trigger+0xb6>
    1e3c:	05 97       	sbiw	r24, 0x05	; 5
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <adc_set_conversion_trigger+0x48>
    1e40:	76 c0       	rjmp	.+236    	; 0x1f2e <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    1e42:	9e c0       	rjmp	.+316    	; 0x1f80 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	fc 01       	movw	r30, r24
    1e4a:	81 81       	ldd	r24, Z+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	27 7f       	andi	r18, 0xF7	; 247
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	fc 01       	movw	r30, r24
    1e56:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	13 82       	std	Z+3, r1	; 0x03
		break;
    1e60:	8f c0       	rjmp	.+286    	; 0x1f80 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	27 7f       	andi	r18, 0xF7	; 247
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	fc 01       	movw	r30, r24
    1e74:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	98 2f       	mov	r25, r24
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	89 2b       	or	r24, r25
    1e8e:	28 2f       	mov	r18, r24
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	fc 01       	movw	r30, r24
    1e96:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    1e98:	73 c0       	rjmp	.+230    	; 0x1f80 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	28 60       	ori	r18, 0x08	; 8
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	fc 01       	movw	r30, r24
    1eac:	21 83       	std	Z+1, r18	; 0x01
		break;
    1eae:	68 c0       	rjmp	.+208    	; 0x1f80 <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	28 60       	ori	r18, 0x08	; 8
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	81 50       	subi	r24, 0x01	; 1
    1ec8:	28 2f       	mov	r18, r24
    1eca:	22 95       	swap	r18
    1ecc:	22 0f       	add	r18, r18
    1ece:	22 0f       	add	r18, r18
    1ed0:	20 7c       	andi	r18, 0xC0	; 192
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	23 83       	std	Z+3, r18	; 0x03
		break;
    1eda:	52 c0       	rjmp	.+164    	; 0x1f80 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	81 81       	ldd	r24, Z+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	27 7f       	andi	r18, 0xF7	; 247
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	fc 01       	movw	r30, r24
    1eee:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	00 24       	eor	r0, r0
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	07 94       	ror	r0
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	07 94       	ror	r0
    1f06:	98 2f       	mov	r25, r24
    1f08:	80 2d       	mov	r24, r0
    1f0a:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1f1e:	82 2b       	or	r24, r18
    1f20:	85 60       	ori	r24, 0x05	; 5
    1f22:	28 2f       	mov	r18, r24
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	fc 01       	movw	r30, r24
    1f2a:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    1f2c:	29 c0       	rjmp	.+82     	; 0x1f80 <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	fc 01       	movw	r30, r24
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	28 2f       	mov	r18, r24
    1f38:	27 7f       	andi	r18, 0xF7	; 247
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	fc 01       	movw	r30, r24
    1f40:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	00 24       	eor	r0, r0
    1f4c:	96 95       	lsr	r25
    1f4e:	87 95       	ror	r24
    1f50:	07 94       	ror	r0
    1f52:	96 95       	lsr	r25
    1f54:	87 95       	ror	r24
    1f56:	07 94       	ror	r0
    1f58:	98 2f       	mov	r25, r24
    1f5a:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1f5c:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1f70:	82 2b       	or	r24, r18
    1f72:	86 60       	ori	r24, 0x06	; 6
    1f74:	28 2f       	mov	r18, r24
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    1f7e:	00 00       	nop

	default:
		Assert(0);
	}
}
    1f80:	00 00       	nop
    1f82:	25 96       	adiw	r28, 0x05	; 5
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	1f 92       	push	r1
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	51 f1       	breq	.+84     	; 0x1ffa <adcch_get_gain_setting+0x6c>
    1fa6:	89 30       	cpi	r24, 0x09	; 9
    1fa8:	91 05       	cpc	r25, r1
    1faa:	7c f4       	brge	.+30     	; 0x1fca <adcch_get_gain_setting+0x3c>
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	f1 f0       	breq	.+60     	; 0x1fee <adcch_get_gain_setting+0x60>
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	1c f4       	brge	.+6      	; 0x1fbe <adcch_get_gain_setting+0x30>
    1fb8:	89 2b       	or	r24, r25
    1fba:	b9 f0       	breq	.+46     	; 0x1fea <adcch_get_gain_setting+0x5c>
    1fbc:	28 c0       	rjmp	.+80     	; 0x200e <adcch_get_gain_setting+0x80>
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	b9 f0       	breq	.+46     	; 0x1ff2 <adcch_get_gain_setting+0x64>
    1fc4:	04 97       	sbiw	r24, 0x04	; 4
    1fc6:	b9 f0       	breq	.+46     	; 0x1ff6 <adcch_get_gain_setting+0x68>
    1fc8:	22 c0       	rjmp	.+68     	; 0x200e <adcch_get_gain_setting+0x80>
    1fca:	80 32       	cpi	r24, 0x20	; 32
    1fcc:	91 05       	cpc	r25, r1
    1fce:	c9 f0       	breq	.+50     	; 0x2002 <adcch_get_gain_setting+0x74>
    1fd0:	81 32       	cpi	r24, 0x21	; 33
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	1c f4       	brge	.+6      	; 0x1fdc <adcch_get_gain_setting+0x4e>
    1fd6:	40 97       	sbiw	r24, 0x10	; 16
    1fd8:	91 f0       	breq	.+36     	; 0x1ffe <adcch_get_gain_setting+0x70>
    1fda:	19 c0       	rjmp	.+50     	; 0x200e <adcch_get_gain_setting+0x80>
    1fdc:	80 34       	cpi	r24, 0x40	; 64
    1fde:	91 05       	cpc	r25, r1
    1fe0:	91 f0       	breq	.+36     	; 0x2006 <adcch_get_gain_setting+0x78>
    1fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	89 f0       	breq	.+34     	; 0x200a <adcch_get_gain_setting+0x7c>
    1fe8:	12 c0       	rjmp	.+36     	; 0x200e <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    1fea:	8c e1       	ldi	r24, 0x1C	; 28
    1fec:	11 c0       	rjmp	.+34     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    1ff6:	88 e0       	ldi	r24, 0x08	; 8
    1ff8:	0b c0       	rjmp	.+22     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    1ffa:	8c e0       	ldi	r24, 0x0C	; 12
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    1ffe:	80 e1       	ldi	r24, 0x10	; 16
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    2002:	84 e1       	ldi	r24, 0x14	; 20
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    2006:	88 e1       	ldi	r24, 0x18	; 24
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    200e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2010:	0f 90       	pop	r0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	25 97       	sbiw	r28, 0x05	; 5
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	6b 83       	std	Y+3, r22	; 0x03
    202c:	4c 83       	std	Y+4, r20	; 0x04
    202e:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	80 31       	cpi	r24, 0x10	; 16
    2034:	78 f0       	brcs	.+30     	; 0x2054 <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	fc 01       	movw	r30, r24
    203c:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	80 51       	subi	r24, 0x10	; 16
    2042:	28 2f       	mov	r18, r24
    2044:	22 0f       	add	r18, r18
    2046:	22 0f       	add	r18, r18
    2048:	22 0f       	add	r18, r18
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	fc 01       	movw	r30, r24
    2050:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2052:	87 c0       	rjmp	.+270    	; 0x2162 <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	8a 30       	cpi	r24, 0x0A	; 10
    2058:	79 f4       	brne	.+30     	; 0x2078 <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	fc 01       	movw	r30, r24
    2062:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	28 2f       	mov	r18, r24
    2068:	22 0f       	add	r18, r18
    206a:	22 0f       	add	r18, r18
    206c:	22 0f       	add	r18, r18
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	fc 01       	movw	r30, r24
    2074:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2076:	75 c0       	rjmp	.+234    	; 0x2162 <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	b8 f4       	brcc	.+46     	; 0x20ac <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	22 e0       	ldi	r18, 0x02	; 2
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	98 2f       	mov	r25, r24
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	89 2b       	or	r24, r25
    20a0:	28 2f       	mov	r18, r24
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	fc 01       	movw	r30, r24
    20a8:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    20aa:	5b c0       	rjmp	.+182    	; 0x2162 <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	88 30       	cpi	r24, 0x08	; 8
    20b0:	d8 f4       	brcc	.+54     	; 0x20e8 <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	6c df       	rcall	.-296    	; 0x1f8e <adcch_get_gain_setting>
    20b6:	28 2f       	mov	r18, r24
    20b8:	23 60       	ori	r18, 0x03	; 3
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	98 2f       	mov	r25, r24
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	84 50       	subi	r24, 0x04	; 4
    20da:	89 2b       	or	r24, r25
    20dc:	28 2f       	mov	r18, r24
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	fc 01       	movw	r30, r24
    20e4:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    20e6:	3d c0       	rjmp	.+122    	; 0x2162 <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	e1 f4       	brne	.+56     	; 0x2126 <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	22 e0       	ldi	r18, 0x02	; 2
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	98 2f       	mov	r25, r24
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	88 30       	cpi	r24, 0x08	; 8
    2110:	11 f4       	brne	.+4      	; 0x2116 <adcch_set_input+0xfe>
    2112:	85 e0       	ldi	r24, 0x05	; 5
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <adcch_set_input+0x100>
    2116:	87 e0       	ldi	r24, 0x07	; 7
    2118:	89 2b       	or	r24, r25
    211a:	28 2f       	mov	r18, r24
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2124:	1e c0       	rjmp	.+60     	; 0x2162 <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	32 df       	rcall	.-412    	; 0x1f8e <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    212a:	28 2f       	mov	r18, r24
    212c:	23 60       	ori	r18, 0x03	; 3
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	fc 01       	movw	r30, r24
    2134:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	98 2f       	mov	r25, r24
    214a:	8c 81       	ldd	r24, Y+4	; 0x04
    214c:	89 30       	cpi	r24, 0x09	; 9
    214e:	11 f4       	brne	.+4      	; 0x2154 <adcch_set_input+0x13c>
    2150:	84 e0       	ldi	r24, 0x04	; 4
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <adcch_set_input+0x13e>
    2154:	87 e0       	ldi	r24, 0x07	; 7
    2156:	89 2b       	or	r24, r25
    2158:	28 2f       	mov	r18, r24
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	fc 01       	movw	r30, r24
    2160:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2162:	00 00       	nop
    2164:	25 96       	adiw	r28, 0x05	; 5
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask)
{
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	2e 97       	sbiw	r28, 0x0e	; 14
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	8c 87       	std	Y+12, r24	; 0x0c
    2180:	9d 87       	std	Y+13, r25	; 0x0d
    2182:	6e 87       	std	Y+14, r22	; 0x0e
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    2184:	8c 85       	ldd	r24, Y+12	; 0x0c
    2186:	9d 85       	ldd	r25, Y+13	; 0x0d
    2188:	9e 01       	movw	r18, r28
    218a:	2f 5f       	subi	r18, 0xFF	; 255
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	b9 01       	movw	r22, r18
    2190:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    2194:	9e 01       	movw	r18, r28
    2196:	28 5f       	subi	r18, 0xF8	; 248
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	8c 85       	ldd	r24, Y+12	; 0x0c
    219c:	9d 85       	ldd	r25, Y+13	; 0x0d
    219e:	a9 01       	movw	r20, r18
    21a0:	6e 85       	ldd	r22, Y+14	; 0x0e
    21a2:	4e d8       	rcall	.-3940   	; 0x1240 <adcch_read_configuration>
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
    21a4:	20 e1       	ldi	r18, 0x10	; 16
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	ce 01       	movw	r24, r28
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	e6 dd       	rcall	.-1076   	; 0x1d7c <adc_set_conversion_parameters>
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	ce 01       	movw	r24, r28
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	1f de       	rcall	.-962    	; 0x1dfa <adc_set_conversion_trigger>
	adc_set_clock_rate(&adc_conf, 200000UL);
    21bc:	40 e4       	ldi	r20, 0x40	; 64
    21be:	5d e0       	ldi	r21, 0x0D	; 13
    21c0:	63 e0       	ldi	r22, 0x03	; 3
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	74 dd       	rcall	.-1304   	; 0x1cb2 <adc_set_clock_rate>
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 0);
    21ca:	ce 01       	movw	r24, r28
    21cc:	08 96       	adiw	r24, 0x08	; 8
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	4a e0       	ldi	r20, 0x0A	; 10
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	21 df       	rcall	.-446    	; 0x2018 <adcch_set_input>
	adc_write_configuration(adc, &adc_conf);
    21d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    21d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    21da:	9e 01       	movw	r18, r28
    21dc:	2f 5f       	subi	r18, 0xFF	; 255
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	b9 01       	movw	r22, r18
    21e2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    21e6:	9e 01       	movw	r18, r28
    21e8:	28 5f       	subi	r18, 0xF8	; 248
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    21ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    21f0:	a9 01       	movw	r20, r18
    21f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    21f4:	0e 94 ab 08 	call	0x1156	; 0x1156 <adcch_write_configuration>
	
	
}
    21f8:	00 00       	nop
    21fa:	2e 96       	adiw	r28, 0x0e	; 14
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <thermistor_init>:
void thermistor_init(void)
{
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	adc_init(&THERM_ADC,THERM_ADC_CH);
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	92 e0       	ldi	r25, 0x02	; 2
    2214:	ad df       	rcall	.-166    	; 0x2170 <adc_init>
	
	if(DEBUG) printf("Thermistor Initialized.\n");
    2216:	86 e1       	ldi	r24, 0x16	; 22
    2218:	90 e2       	ldi	r25, 0x20	; 32
    221a:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
}
    221e:	00 00       	nop
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <volt_init>:
void volt_init(void)
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	adc_init(&VOLT_ADC,VOLT_ADC_CH);
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	80 e4       	ldi	r24, 0x40	; 64
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	9d df       	rcall	.-198    	; 0x2170 <adc_init>
	
	if(DEBUG) printf("Voltage Initialized.\n");
    2236:	8e e2       	ldi	r24, 0x2E	; 46
    2238:	90 e2       	ldi	r25, 0x20	; 32
    223a:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
}
    223e:	00 00       	nop
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	08 95       	ret

00002246 <getADCRead>:


float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	29 97       	sbiw	r28, 0x09	; 9
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	98 87       	std	Y+8, r25	; 0x08
    2258:	69 87       	std	Y+9, r22	; 0x09
		adc_enable(adc);
    225a:	8f 81       	ldd	r24, Y+7	; 0x07
    225c:	98 85       	ldd	r25, Y+8	; 0x08
    225e:	0e 94 af 02 	call	0x55e	; 0x55e <adc_enable>
		
		
		adc_start_conversion(adc, ch_mask);
    2262:	8f 81       	ldd	r24, Y+7	; 0x07
    2264:	98 85       	ldd	r25, Y+8	; 0x08
    2266:	69 85       	ldd	r22, Y+9	; 0x09
    2268:	bb dc       	rcall	.-1674   	; 0x1be0 <adc_start_conversion>
		adc_wait_for_interrupt_flag(adc, ch_mask);
    226a:	8f 81       	ldd	r24, Y+7	; 0x07
    226c:	98 85       	ldd	r25, Y+8	; 0x08
    226e:	69 85       	ldd	r22, Y+9	; 0x09
    2270:	05 dd       	rcall	.-1526   	; 0x1c7c <adc_wait_for_interrupt_flag>
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	8d 83       	std	Y+5, r24	; 0x05
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    227e:	1e 82       	std	Y+6, r1	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	83 70       	andi	r24, 0x03	; 3
    2288:	99 27       	eor	r25, r25
    228a:	89 2b       	or	r24, r25
    228c:	39 f4       	brne	.+14     	; 0x229c <getADCRead+0x56>
		index += 2;
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	8e 5f       	subi	r24, 0xFE	; 254
    2292:	8e 83       	std	Y+6, r24	; 0x06
		ch_mask >>= 2;
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	86 95       	lsr	r24
    2298:	86 95       	lsr	r24
    229a:	8d 83       	std	Y+5, r24	; 0x05
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	99 27       	eor	r25, r25
    22a6:	89 2b       	or	r24, r25
    22a8:	19 f4       	brne	.+6      	; 0x22b0 <getADCRead+0x6a>
		index++;
    22aa:	8e 81       	ldd	r24, Y+6	; 0x06
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	9c 01       	movw	r18, r24
    22b6:	20 5e       	subi	r18, 0xE0	; 224
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
		uint16_t adcReading = adc_get_result(adc, ch_mask);
    22d0:	fc 01       	movw	r30, r24
    22d2:	84 81       	ldd	r24, Z+4	; 0x04
    22d4:	95 81       	ldd	r25, Z+5	; 0x05
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	9a 83       	std	Y+2, r25	; 0x02
		//printf("ADC reading = %u\n", adcReading);
		//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
		//printf("voltage: %f \n", voltage);
		
		adc_disable(adc);
    22da:	8f 81       	ldd	r24, Y+7	; 0x07
    22dc:	98 85       	ldd	r25, Y+8	; 0x08
    22de:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <adc_disable>
		return adcReading;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	cc 01       	movw	r24, r24
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <__floatunsisf>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
	
}
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	29 96       	adiw	r28, 0x09	; 9
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <getVoltage>:
float getVoltage(void)
{
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	00 d0       	rcall	.+0      	; 0x230e <getVoltage+0x6>
    230e:	1f 92       	push	r1
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	float adc_val = getADCRead(&VOLT_ADC,VOLT_ADC_CH)/4096.0*2;
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	80 e4       	ldi	r24, 0x40	; 64
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	95 df       	rcall	.-214    	; 0x2246 <getADCRead>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	55 e4       	ldi	r21, 0x45	; 69
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 01       	movw	r18, r24
    2336:	ad 01       	movw	r20, r26
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 3e 44 	call	0x887c	; 0x887c <__addsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	ab 83       	std	Y+3, r26	; 0x03
    234a:	bc 83       	std	Y+4, r27	; 0x04
	if(DEBUG && DEBUG_ADC) printf("volt: %f\n",adc_val);
	return adc_val;
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	ab 81       	ldd	r26, Y+3	; 0x03
    2352:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	24 96       	adiw	r28, 0x04	; 4
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	08 95       	ret

00002364 <getTemperature>:
float getTemperature(void)
{
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	28 97       	sbiw	r28, 0x08	; 8
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	de bf       	out	0x3e, r29	; 62
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	92 e0       	ldi	r25, 0x02	; 2
    2378:	66 df       	rcall	.-308    	; 0x2246 <getADCRead>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	25 ee       	ldi	r18, 0xE5	; 229
    2380:	30 ed       	ldi	r19, 0xD0	; 208
    2382:	42 e2       	ldi	r20, 0x22	; 34
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 91 46 	call	0x8d22	; 0x8d22 <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	ab 83       	std	Y+3, r26	; 0x03
    2398:	bc 83       	std	Y+4, r27	; 0x04
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
    239a:	29 81       	ldd	r18, Y+1	; 0x01
    239c:	3a 81       	ldd	r19, Y+2	; 0x02
    239e:	4b 81       	ldd	r20, Y+3	; 0x03
    23a0:	5c 81       	ldd	r21, Y+4	; 0x04
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	80 e8       	ldi	r24, 0x80	; 128
    23a8:	95 e4       	ldi	r25, 0x45	; 69
    23aa:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 3d 44 	call	0x887a	; 0x887a <__subsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <log>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	2c e7       	ldi	r18, 0x7C	; 124
    23d4:	34 ed       	ldi	r19, 0xD4	; 212
    23d6:	43 e8       	ldi	r20, 0x83	; 131
    23d8:	59 e3       	ldi	r21, 0x39	; 57
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 91 46 	call	0x8d22	; 0x8d22 <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	2f e0       	ldi	r18, 0x0F	; 15
    23e8:	3f ec       	ldi	r19, 0xCF	; 207
    23ea:	4b e5       	ldi	r20, 0x5B	; 91
    23ec:	5b e3       	ldi	r21, 0x3B	; 59
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 3e 44 	call	0x887c	; 0x887c <__addsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9c 01       	movw	r18, r24
    23fc:	ad 01       	movw	r20, r26
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	80 e8       	ldi	r24, 0x80	; 128
    2404:	9f e3       	ldi	r25, 0x3F	; 63
    2406:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 44 45 	call	0x8a88	; 0x8a88 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	af 83       	std	Y+7, r26	; 0x07
    2420:	b8 87       	std	Y+8, r27	; 0x08
	if(DEBUG && DEBUG_ADC) printf("temp: %f\n", temperature-273.15);
	return (temperature - 273.15);
    2422:	6d 81       	ldd	r22, Y+5	; 0x05
    2424:	7e 81       	ldd	r23, Y+6	; 0x06
    2426:	8f 81       	ldd	r24, Y+7	; 0x07
    2428:	98 85       	ldd	r25, Y+8	; 0x08
    242a:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <__floatunsisf>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	23 e3       	ldi	r18, 0x33	; 51
    2434:	33 e9       	ldi	r19, 0x93	; 147
    2436:	48 e8       	ldi	r20, 0x88	; 136
    2438:	53 e4       	ldi	r21, 0x43	; 67
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 3d 44 	call	0x887a	; 0x887a <__subsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
	
	
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	28 96       	adiw	r28, 0x08	; 8
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <bno055_init>:
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	return com_rslt;
}
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	27 97       	sbiw	r28, 0x07	; 7
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	8e 83       	std	Y+6, r24	; 0x06
    2466:	9f 83       	std	Y+7, r25	; 0x07
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	1a 82       	std	Y+2, r1	; 0x02
    246e:	1b 82       	std	Y+3, r1	; 0x03
    2470:	1c 82       	std	Y+4, r1	; 0x04
    2472:	1d 82       	std	Y+5, r1	; 0x05
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <p_bno055>
    247c:	90 93 65 22 	sts	0x2265, r25	; 0x802265 <p_bno055+0x1>
    2480:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2484:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2488:	dc 01       	movw	r26, r24
    248a:	19 96       	adiw	r26, 0x09	; 9
    248c:	ed 91       	ld	r30, X+
    248e:	fc 91       	ld	r31, X
    2490:	1a 97       	sbiw	r26, 0x0a	; 10
    2492:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2496:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    249a:	dc 01       	movw	r26, r24
    249c:	18 96       	adiw	r26, 0x08	; 8
    249e:	3c 91       	ld	r19, X
    24a0:	ce 01       	movw	r24, r28
    24a2:	03 96       	adiw	r24, 0x03	; 3
    24a4:	21 e0       	ldi	r18, 0x01	; 1
    24a6:	ac 01       	movw	r20, r24
    24a8:	67 e0       	ldi	r22, 0x07	; 7
    24aa:	83 2f       	mov	r24, r19
    24ac:	19 95       	eicall
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    24b4:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    24b8:	dc 01       	movw	r26, r24
    24ba:	1b 96       	adiw	r26, 0x0b	; 11
    24bc:	ed 91       	ld	r30, X+
    24be:	fc 91       	ld	r31, X
    24c0:	1c 97       	sbiw	r26, 0x0c	; 12
    24c2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    24c6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    24ca:	dc 01       	movw	r26, r24
    24cc:	18 96       	adiw	r26, 0x08	; 8
    24ce:	3c 91       	ld	r19, X
    24d0:	ce 01       	movw	r24, r28
    24d2:	02 96       	adiw	r24, 0x02	; 2
    24d4:	21 e0       	ldi	r18, 0x01	; 1
    24d6:	ac 01       	movw	r20, r24
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	83 2f       	mov	r24, r19
    24dc:	19 95       	eicall
    24de:	98 2f       	mov	r25, r24
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	89 0f       	add	r24, r25
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    24ea:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    24ee:	2a 81       	ldd	r18, Y+2	; 0x02
    24f0:	fc 01       	movw	r30, r24
    24f2:	20 83       	st	Z, r18
    24f4:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    24f8:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    24fc:	dc 01       	movw	r26, r24
    24fe:	1b 96       	adiw	r26, 0x0b	; 11
    2500:	ed 91       	ld	r30, X+
    2502:	fc 91       	ld	r31, X
    2504:	1c 97       	sbiw	r26, 0x0c	; 12
    2506:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    250a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    250e:	dc 01       	movw	r26, r24
    2510:	18 96       	adiw	r26, 0x08	; 8
    2512:	3c 91       	ld	r19, X
    2514:	ce 01       	movw	r24, r28
    2516:	02 96       	adiw	r24, 0x02	; 2
    2518:	21 e0       	ldi	r18, 0x01	; 1
    251a:	ac 01       	movw	r20, r24
    251c:	61 e0       	ldi	r22, 0x01	; 1
    251e:	83 2f       	mov	r24, r19
    2520:	19 95       	eicall
    2522:	98 2f       	mov	r25, r24
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	89 0f       	add	r24, r25
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    252e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2532:	2a 81       	ldd	r18, Y+2	; 0x02
    2534:	fc 01       	movw	r30, r24
    2536:	24 83       	std	Z+4, r18	; 0x04
    2538:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    253c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2540:	dc 01       	movw	r26, r24
    2542:	1b 96       	adiw	r26, 0x0b	; 11
    2544:	ed 91       	ld	r30, X+
    2546:	fc 91       	ld	r31, X
    2548:	1c 97       	sbiw	r26, 0x0c	; 12
    254a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    254e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2552:	dc 01       	movw	r26, r24
    2554:	18 96       	adiw	r26, 0x08	; 8
    2556:	3c 91       	ld	r19, X
    2558:	ce 01       	movw	r24, r28
    255a:	02 96       	adiw	r24, 0x02	; 2
    255c:	21 e0       	ldi	r18, 0x01	; 1
    255e:	ac 01       	movw	r20, r24
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	83 2f       	mov	r24, r19
    2564:	19 95       	eicall
    2566:	98 2f       	mov	r25, r24
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	89 0f       	add	r24, r25
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2572:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2576:	2a 81       	ldd	r18, Y+2	; 0x02
    2578:	fc 01       	movw	r30, r24
    257a:	25 83       	std	Z+5, r18	; 0x05
    257c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2580:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2584:	dc 01       	movw	r26, r24
    2586:	1b 96       	adiw	r26, 0x0b	; 11
    2588:	ed 91       	ld	r30, X+
    258a:	fc 91       	ld	r31, X
    258c:	1c 97       	sbiw	r26, 0x0c	; 12
    258e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2592:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2596:	dc 01       	movw	r26, r24
    2598:	18 96       	adiw	r26, 0x08	; 8
    259a:	3c 91       	ld	r19, X
    259c:	ce 01       	movw	r24, r28
    259e:	02 96       	adiw	r24, 0x02	; 2
    25a0:	21 e0       	ldi	r18, 0x01	; 1
    25a2:	ac 01       	movw	r20, r24
    25a4:	63 e0       	ldi	r22, 0x03	; 3
    25a6:	83 2f       	mov	r24, r19
    25a8:	19 95       	eicall
    25aa:	98 2f       	mov	r25, r24
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	89 0f       	add	r24, r25
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    25b6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    25ba:	2a 81       	ldd	r18, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	26 83       	std	Z+6, r18	; 0x06
    25c0:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    25c4:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    25c8:	dc 01       	movw	r26, r24
    25ca:	1b 96       	adiw	r26, 0x0b	; 11
    25cc:	ed 91       	ld	r30, X+
    25ce:	fc 91       	ld	r31, X
    25d0:	1c 97       	sbiw	r26, 0x0c	; 12
    25d2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    25d6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    25da:	dc 01       	movw	r26, r24
    25dc:	18 96       	adiw	r26, 0x08	; 8
    25de:	3c 91       	ld	r19, X
    25e0:	ce 01       	movw	r24, r28
    25e2:	02 96       	adiw	r24, 0x02	; 2
    25e4:	21 e0       	ldi	r18, 0x01	; 1
    25e6:	ac 01       	movw	r20, r24
    25e8:	66 e0       	ldi	r22, 0x06	; 6
    25ea:	83 2f       	mov	r24, r19
    25ec:	19 95       	eicall
    25ee:	98 2f       	mov	r25, r24
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	89 0f       	add	r24, r25
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    25fa:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    25fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	27 83       	std	Z+7, r18	; 0x07
    2604:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2608:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    260c:	dc 01       	movw	r26, r24
    260e:	1b 96       	adiw	r26, 0x0b	; 11
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	1c 97       	sbiw	r26, 0x0c	; 12
    2616:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    261a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    261e:	dc 01       	movw	r26, r24
    2620:	18 96       	adiw	r26, 0x08	; 8
    2622:	3c 91       	ld	r19, X
    2624:	ce 01       	movw	r24, r28
    2626:	04 96       	adiw	r24, 0x04	; 4
    2628:	22 e0       	ldi	r18, 0x02	; 2
    262a:	ac 01       	movw	r20, r24
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	83 2f       	mov	r24, r19
    2630:	19 95       	eicall
    2632:	98 2f       	mov	r25, r24
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	89 0f       	add	r24, r25
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	8c 83       	std	Y+4, r24	; 0x04
    263e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2642:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2646:	2d 81       	ldd	r18, Y+5	; 0x05
    2648:	22 2f       	mov	r18, r18
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	52 2f       	mov	r21, r18
    264e:	44 27       	eor	r20, r20
    2650:	2c 81       	ldd	r18, Y+4	; 0x04
    2652:	22 2f       	mov	r18, r18
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	24 2b       	or	r18, r20
    2658:	35 2b       	or	r19, r21
    265a:	fc 01       	movw	r30, r24
    265c:	21 83       	std	Z+1, r18	; 0x01
    265e:	32 83       	std	Z+2, r19	; 0x02
    2660:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2664:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2668:	dc 01       	movw	r26, r24
    266a:	1b 96       	adiw	r26, 0x0b	; 11
    266c:	ed 91       	ld	r30, X+
    266e:	fc 91       	ld	r31, X
    2670:	1c 97       	sbiw	r26, 0x0c	; 12
    2672:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2676:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    267a:	dc 01       	movw	r26, r24
    267c:	18 96       	adiw	r26, 0x08	; 8
    267e:	3c 91       	ld	r19, X
    2680:	ce 01       	movw	r24, r28
    2682:	02 96       	adiw	r24, 0x02	; 2
    2684:	21 e0       	ldi	r18, 0x01	; 1
    2686:	ac 01       	movw	r20, r24
    2688:	67 e0       	ldi	r22, 0x07	; 7
    268a:	83 2f       	mov	r24, r19
    268c:	19 95       	eicall
    268e:	98 2f       	mov	r25, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	89 0f       	add	r24, r25
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    269a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    269e:	2a 81       	ldd	r18, Y+2	; 0x02
    26a0:	fc 01       	movw	r30, r24
    26a2:	23 83       	std	Z+3, r18	; 0x03
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	27 96       	adiw	r28, 0x07	; 7
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <bno055_write_register>:
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	25 97       	sbiw	r28, 0x05	; 5
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	6b 83       	std	Y+3, r22	; 0x03
    26c4:	7c 83       	std	Y+4, r23	; 0x04
    26c6:	4d 83       	std	Y+5, r20	; 0x05
    26c8:	8f ef       	ldi	r24, 0xFF	; 255
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    26d0:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    26d4:	89 2b       	or	r24, r25
    26d6:	11 f4       	brne	.+4      	; 0x26dc <bno055_write_register+0x2a>
    26d8:	81 e8       	ldi	r24, 0x81	; 129
    26da:	19 c0       	rjmp	.+50     	; 0x270e <bno055_write_register+0x5c>
    26dc:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    26e0:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    26e4:	dc 01       	movw	r26, r24
    26e6:	19 96       	adiw	r26, 0x09	; 9
    26e8:	ed 91       	ld	r30, X+
    26ea:	fc 91       	ld	r31, X
    26ec:	1a 97       	sbiw	r26, 0x0a	; 10
    26ee:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    26f2:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    26f6:	dc 01       	movw	r26, r24
    26f8:	18 96       	adiw	r26, 0x08	; 8
    26fa:	3c 91       	ld	r19, X
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	2d 81       	ldd	r18, Y+5	; 0x05
    2702:	ac 01       	movw	r20, r24
    2704:	6a 81       	ldd	r22, Y+2	; 0x02
    2706:	83 2f       	mov	r24, r19
    2708:	19 95       	eicall
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	25 96       	adiw	r28, 0x05	; 5
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	08 95       	ret

0000271a <bno055_write_page_id>:
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	00 d0       	rcall	.+0      	; 0x2720 <bno055_write_page_id+0x6>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	1a 82       	std	Y+2, r1	; 0x02
    272c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2730:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2734:	89 2b       	or	r24, r25
    2736:	11 f4       	brne	.+4      	; 0x273c <bno055_write_page_id+0x22>
    2738:	81 e8       	ldi	r24, 0x81	; 129
    273a:	46 c0       	rjmp	.+140    	; 0x27c8 <bno055_write_page_id+0xae>
    273c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2740:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2744:	dc 01       	movw	r26, r24
    2746:	1b 96       	adiw	r26, 0x0b	; 11
    2748:	ed 91       	ld	r30, X+
    274a:	fc 91       	ld	r31, X
    274c:	1c 97       	sbiw	r26, 0x0c	; 12
    274e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2752:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2756:	dc 01       	movw	r26, r24
    2758:	18 96       	adiw	r26, 0x08	; 8
    275a:	3c 91       	ld	r19, X
    275c:	ce 01       	movw	r24, r28
    275e:	02 96       	adiw	r24, 0x02	; 2
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	ac 01       	movw	r20, r24
    2764:	67 e0       	ldi	r22, 0x07	; 7
    2766:	83 2f       	mov	r24, r19
    2768:	19 95       	eicall
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	88 23       	and	r24, r24
    2770:	41 f5       	brne	.+80     	; 0x27c2 <bno055_write_page_id+0xa8>
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	8a 83       	std	Y+2, r24	; 0x02
    2776:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    277a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    277e:	dc 01       	movw	r26, r24
    2780:	19 96       	adiw	r26, 0x09	; 9
    2782:	ed 91       	ld	r30, X+
    2784:	fc 91       	ld	r31, X
    2786:	1a 97       	sbiw	r26, 0x0a	; 10
    2788:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    278c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2790:	dc 01       	movw	r26, r24
    2792:	18 96       	adiw	r26, 0x08	; 8
    2794:	3c 91       	ld	r19, X
    2796:	ce 01       	movw	r24, r28
    2798:	02 96       	adiw	r24, 0x02	; 2
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	ac 01       	movw	r20, r24
    279e:	67 e0       	ldi	r22, 0x07	; 7
    27a0:	83 2f       	mov	r24, r19
    27a2:	19 95       	eicall
    27a4:	98 2f       	mov	r25, r24
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	89 0f       	add	r24, r25
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	88 23       	and	r24, r24
    27b0:	51 f4       	brne	.+20     	; 0x27c6 <bno055_write_page_id+0xac>
    27b2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    27b6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    27ba:	2b 81       	ldd	r18, Y+3	; 0x03
    27bc:	fc 01       	movw	r30, r24
    27be:	23 83       	std	Z+3, r18	; 0x03
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <bno055_write_page_id+0xac>
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	23 96       	adiw	r28, 0x03	; 3
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <bno055_read_euler_hrp>:
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	2a 97       	sbiw	r28, 0x0a	; 10
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	89 87       	std	Y+9, r24	; 0x09
    27e4:	9a 87       	std	Y+10, r25	; 0x0a
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	26 e0       	ldi	r18, 0x06	; 6
    27ec:	ce 01       	movw	r24, r28
    27ee:	03 96       	adiw	r24, 0x03	; 3
    27f0:	dc 01       	movw	r26, r24
    27f2:	e2 2f       	mov	r30, r18
    27f4:	1d 92       	st	X+, r1
    27f6:	ea 95       	dec	r30
    27f8:	e9 f7       	brne	.-6      	; 0x27f4 <bno055_read_euler_hrp+0x20>
    27fa:	8f ef       	ldi	r24, 0xFF	; 255
    27fc:	8a 83       	std	Y+2, r24	; 0x02
    27fe:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2802:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2806:	89 2b       	or	r24, r25
    2808:	11 f4       	brne	.+4      	; 0x280e <bno055_read_euler_hrp+0x3a>
    280a:	81 e8       	ldi	r24, 0x81	; 129
    280c:	72 c0       	rjmp	.+228    	; 0x28f2 <bno055_read_euler_hrp+0x11e>
    280e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2812:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2816:	dc 01       	movw	r26, r24
    2818:	13 96       	adiw	r26, 0x03	; 3
    281a:	8c 91       	ld	r24, X
    281c:	88 23       	and	r24, r24
    281e:	19 f0       	breq	.+6      	; 0x2826 <bno055_read_euler_hrp+0x52>
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	7b df       	rcall	.-266    	; 0x271a <bno055_write_page_id>
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	88 23       	and	r24, r24
    282a:	49 f0       	breq	.+18     	; 0x283e <bno055_read_euler_hrp+0x6a>
    282c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2830:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2834:	fc 01       	movw	r30, r24
    2836:	83 81       	ldd	r24, Z+3	; 0x03
    2838:	88 23       	and	r24, r24
    283a:	09 f0       	breq	.+2      	; 0x283e <bno055_read_euler_hrp+0x6a>
    283c:	57 c0       	rjmp	.+174    	; 0x28ec <bno055_read_euler_hrp+0x118>
    283e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2842:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2846:	dc 01       	movw	r26, r24
    2848:	1b 96       	adiw	r26, 0x0b	; 11
    284a:	ed 91       	ld	r30, X+
    284c:	fc 91       	ld	r31, X
    284e:	1c 97       	sbiw	r26, 0x0c	; 12
    2850:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2854:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2858:	dc 01       	movw	r26, r24
    285a:	18 96       	adiw	r26, 0x08	; 8
    285c:	3c 91       	ld	r19, X
    285e:	ce 01       	movw	r24, r28
    2860:	03 96       	adiw	r24, 0x03	; 3
    2862:	26 e0       	ldi	r18, 0x06	; 6
    2864:	ac 01       	movw	r20, r24
    2866:	6a e1       	ldi	r22, 0x1A	; 26
    2868:	83 2f       	mov	r24, r19
    286a:	19 95       	eicall
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	8b 83       	std	Y+3, r24	; 0x03
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	8c 83       	std	Y+4, r24	; 0x04
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	08 2e       	mov	r0, r24
    287a:	00 0c       	add	r0, r0
    287c:	99 0b       	sbc	r25, r25
    287e:	38 2f       	mov	r19, r24
    2880:	22 27       	eor	r18, r18
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	28 2b       	or	r18, r24
    288a:	39 2b       	or	r19, r25
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
    2894:	31 83       	std	Z+1, r19	; 0x01
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	8e 83       	std	Y+6, r24	; 0x06
    289e:	8e 81       	ldd	r24, Y+6	; 0x06
    28a0:	08 2e       	mov	r0, r24
    28a2:	00 0c       	add	r0, r0
    28a4:	99 0b       	sbc	r25, r25
    28a6:	38 2f       	mov	r19, r24
    28a8:	22 27       	eor	r18, r18
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	28 2b       	or	r18, r24
    28b2:	39 2b       	or	r19, r25
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	dc 01       	movw	r26, r24
    28ba:	12 96       	adiw	r26, 0x02	; 2
    28bc:	2d 93       	st	X+, r18
    28be:	3c 93       	st	X, r19
    28c0:	13 97       	sbiw	r26, 0x03	; 3
    28c2:	8f 81       	ldd	r24, Y+7	; 0x07
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	88 85       	ldd	r24, Y+8	; 0x08
    28c8:	88 87       	std	Y+8, r24	; 0x08
    28ca:	88 85       	ldd	r24, Y+8	; 0x08
    28cc:	08 2e       	mov	r0, r24
    28ce:	00 0c       	add	r0, r0
    28d0:	99 0b       	sbc	r25, r25
    28d2:	38 2f       	mov	r19, r24
    28d4:	22 27       	eor	r18, r18
    28d6:	8f 81       	ldd	r24, Y+7	; 0x07
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	28 2b       	or	r18, r24
    28de:	39 2b       	or	r19, r25
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	fc 01       	movw	r30, r24
    28e6:	24 83       	std	Z+4, r18	; 0x04
    28e8:	35 83       	std	Z+5, r19	; 0x05
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <bno055_read_euler_hrp+0x11c>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	2a 96       	adiw	r28, 0x0a	; 10
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <bno055_read_linear_accel_xyz>:
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	2a 97       	sbiw	r28, 0x0a	; 10
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	89 87       	std	Y+9, r24	; 0x09
    290e:	9a 87       	std	Y+10, r25	; 0x0a
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	26 e0       	ldi	r18, 0x06	; 6
    2916:	ce 01       	movw	r24, r28
    2918:	03 96       	adiw	r24, 0x03	; 3
    291a:	dc 01       	movw	r26, r24
    291c:	e2 2f       	mov	r30, r18
    291e:	1d 92       	st	X+, r1
    2920:	ea 95       	dec	r30
    2922:	e9 f7       	brne	.-6      	; 0x291e <bno055_read_linear_accel_xyz+0x20>
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    292c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2930:	89 2b       	or	r24, r25
    2932:	11 f4       	brne	.+4      	; 0x2938 <bno055_read_linear_accel_xyz+0x3a>
    2934:	81 e8       	ldi	r24, 0x81	; 129
    2936:	72 c0       	rjmp	.+228    	; 0x2a1c <bno055_read_linear_accel_xyz+0x11e>
    2938:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    293c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2940:	dc 01       	movw	r26, r24
    2942:	13 96       	adiw	r26, 0x03	; 3
    2944:	8c 91       	ld	r24, X
    2946:	88 23       	and	r24, r24
    2948:	19 f0       	breq	.+6      	; 0x2950 <bno055_read_linear_accel_xyz+0x52>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	e6 de       	rcall	.-564    	; 0x271a <bno055_write_page_id>
    294e:	8a 83       	std	Y+2, r24	; 0x02
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	88 23       	and	r24, r24
    2954:	49 f0       	breq	.+18     	; 0x2968 <bno055_read_linear_accel_xyz+0x6a>
    2956:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    295a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    295e:	fc 01       	movw	r30, r24
    2960:	83 81       	ldd	r24, Z+3	; 0x03
    2962:	88 23       	and	r24, r24
    2964:	09 f0       	breq	.+2      	; 0x2968 <bno055_read_linear_accel_xyz+0x6a>
    2966:	57 c0       	rjmp	.+174    	; 0x2a16 <bno055_read_linear_accel_xyz+0x118>
    2968:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    296c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2970:	dc 01       	movw	r26, r24
    2972:	1b 96       	adiw	r26, 0x0b	; 11
    2974:	ed 91       	ld	r30, X+
    2976:	fc 91       	ld	r31, X
    2978:	1c 97       	sbiw	r26, 0x0c	; 12
    297a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    297e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2982:	dc 01       	movw	r26, r24
    2984:	18 96       	adiw	r26, 0x08	; 8
    2986:	3c 91       	ld	r19, X
    2988:	ce 01       	movw	r24, r28
    298a:	03 96       	adiw	r24, 0x03	; 3
    298c:	26 e0       	ldi	r18, 0x06	; 6
    298e:	ac 01       	movw	r20, r24
    2990:	68 e2       	ldi	r22, 0x28	; 40
    2992:	83 2f       	mov	r24, r19
    2994:	19 95       	eicall
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	8b 83       	std	Y+3, r24	; 0x03
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	8c 83       	std	Y+4, r24	; 0x04
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	08 2e       	mov	r0, r24
    29a4:	00 0c       	add	r0, r0
    29a6:	99 0b       	sbc	r25, r25
    29a8:	38 2f       	mov	r19, r24
    29aa:	22 27       	eor	r18, r18
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	28 2b       	or	r18, r24
    29b4:	39 2b       	or	r19, r25
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	fc 01       	movw	r30, r24
    29bc:	20 83       	st	Z, r18
    29be:	31 83       	std	Z+1, r19	; 0x01
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	8e 83       	std	Y+6, r24	; 0x06
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	08 2e       	mov	r0, r24
    29cc:	00 0c       	add	r0, r0
    29ce:	99 0b       	sbc	r25, r25
    29d0:	38 2f       	mov	r19, r24
    29d2:	22 27       	eor	r18, r18
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	28 2b       	or	r18, r24
    29dc:	39 2b       	or	r19, r25
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	dc 01       	movw	r26, r24
    29e4:	12 96       	adiw	r26, 0x02	; 2
    29e6:	2d 93       	st	X+, r18
    29e8:	3c 93       	st	X, r19
    29ea:	13 97       	sbiw	r26, 0x03	; 3
    29ec:	8f 81       	ldd	r24, Y+7	; 0x07
    29ee:	8f 83       	std	Y+7, r24	; 0x07
    29f0:	88 85       	ldd	r24, Y+8	; 0x08
    29f2:	88 87       	std	Y+8, r24	; 0x08
    29f4:	88 85       	ldd	r24, Y+8	; 0x08
    29f6:	08 2e       	mov	r0, r24
    29f8:	00 0c       	add	r0, r0
    29fa:	99 0b       	sbc	r25, r25
    29fc:	38 2f       	mov	r19, r24
    29fe:	22 27       	eor	r18, r18
    2a00:	8f 81       	ldd	r24, Y+7	; 0x07
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	28 2b       	or	r18, r24
    2a08:	39 2b       	or	r19, r25
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	fc 01       	movw	r30, r24
    2a10:	24 83       	std	Z+4, r18	; 0x04
    2a12:	35 83       	std	Z+5, r19	; 0x05
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <bno055_read_linear_accel_xyz+0x11c>
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	2a 96       	adiw	r28, 0x0a	; 10
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	08 95       	ret

00002a28 <bno055_convert_double_euler_hpr_deg>:
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	2a 97       	sbiw	r28, 0x0a	; 10
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	89 87       	std	Y+9, r24	; 0x09
    2a38:	9a 87       	std	Y+10, r25	; 0x0a
    2a3a:	8f ef       	ldi	r24, 0xFF	; 255
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	1a 82       	std	Y+2, r1	; 0x02
    2a40:	1b 82       	std	Y+3, r1	; 0x03
    2a42:	1c 82       	std	Y+4, r1	; 0x04
    2a44:	1d 82       	std	Y+5, r1	; 0x05
    2a46:	1e 82       	std	Y+6, r1	; 0x06
    2a48:	1f 82       	std	Y+7, r1	; 0x07
    2a4a:	18 86       	std	Y+8, r1	; 0x08
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	08 96       	adiw	r24, 0x08	; 8
    2a50:	64 d2       	rcall	.+1224   	; 0x2f1a <bno055_get_euler_unit>
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	88 85       	ldd	r24, Y+8	; 0x08
    2a56:	88 23       	and	r24, r24
    2a58:	31 f0       	breq	.+12     	; 0x2a66 <bno055_convert_double_euler_hpr_deg+0x3e>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	bb d2       	rcall	.+1398   	; 0x2fd4 <bno055_set_euler_unit>
    2a5e:	98 2f       	mov	r25, r24
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	89 0f       	add	r24, r25
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	88 23       	and	r24, r24
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <bno055_convert_double_euler_hpr_deg+0x46>
    2a6c:	66 c0       	rjmp	.+204    	; 0x2b3a <bno055_convert_double_euler_hpr_deg+0x112>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	02 96       	adiw	r24, 0x02	; 2
    2a72:	b0 de       	rcall	.-672    	; 0x27d4 <bno055_read_euler_hrp>
    2a74:	98 2f       	mov	r25, r24
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	89 0f       	add	r24, r25
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	88 23       	and	r24, r24
    2a80:	09 f0       	breq	.+2      	; 0x2a84 <bno055_convert_double_euler_hpr_deg+0x5c>
    2a82:	58 c0       	rjmp	.+176    	; 0x2b34 <bno055_convert_double_euler_hpr_deg+0x10c>
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	09 2e       	mov	r0, r25
    2a8a:	00 0c       	add	r0, r0
    2a8c:	aa 0b       	sbc	r26, r26
    2a8e:	bb 0b       	sbc	r27, r27
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <__floatsisf>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	29 85       	ldd	r18, Y+9	; 0x09
    2ab2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	80 83       	st	Z, r24
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	a2 83       	std	Z+2, r26	; 0x02
    2abc:	b3 83       	std	Z+3, r27	; 0x03
    2abe:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac2:	09 2e       	mov	r0, r25
    2ac4:	00 0c       	add	r0, r0
    2ac6:	aa 0b       	sbc	r26, r26
    2ac8:	bb 0b       	sbc	r27, r27
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <__floatsisf>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	51 e4       	ldi	r21, 0x41	; 65
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	29 85       	ldd	r18, Y+9	; 0x09
    2aec:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aee:	f9 01       	movw	r30, r18
    2af0:	80 87       	std	Z+8, r24	; 0x08
    2af2:	91 87       	std	Z+9, r25	; 0x09
    2af4:	a2 87       	std	Z+10, r26	; 0x0a
    2af6:	b3 87       	std	Z+11, r27	; 0x0b
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	9d 81       	ldd	r25, Y+5	; 0x05
    2afc:	09 2e       	mov	r0, r25
    2afe:	00 0c       	add	r0, r0
    2b00:	aa 0b       	sbc	r26, r26
    2b02:	bb 0b       	sbc	r27, r27
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <__floatsisf>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e8       	ldi	r20, 0x80	; 128
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	29 85       	ldd	r18, Y+9	; 0x09
    2b26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b28:	f9 01       	movw	r30, r18
    2b2a:	84 83       	std	Z+4, r24	; 0x04
    2b2c:	95 83       	std	Z+5, r25	; 0x05
    2b2e:	a6 83       	std	Z+6, r26	; 0x06
    2b30:	b7 83       	std	Z+7, r27	; 0x07
    2b32:	05 c0       	rjmp	.+10     	; 0x2b3e <bno055_convert_double_euler_hpr_deg+0x116>
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <bno055_convert_double_euler_hpr_deg+0x116>
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	2a 96       	adiw	r28, 0x0a	; 10
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	08 95       	ret

00002b4c <bno055_convert_double_linear_accel_xyz_msq>:
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	29 97       	sbiw	r28, 0x09	; 9
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	88 87       	std	Y+8, r24	; 0x08
    2b5c:	99 87       	std	Y+9, r25	; 0x09
    2b5e:	8f ef       	ldi	r24, 0xFF	; 255
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	1a 82       	std	Y+2, r1	; 0x02
    2b64:	1b 82       	std	Y+3, r1	; 0x03
    2b66:	1c 82       	std	Y+4, r1	; 0x04
    2b68:	1d 82       	std	Y+5, r1	; 0x05
    2b6a:	1e 82       	std	Y+6, r1	; 0x06
    2b6c:	1f 82       	std	Y+7, r1	; 0x07
    2b6e:	ce 01       	movw	r24, r28
    2b70:	02 96       	adiw	r24, 0x02	; 2
    2b72:	c5 de       	rcall	.-630    	; 0x28fe <bno055_read_linear_accel_xyz>
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	88 23       	and	r24, r24
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <bno055_convert_double_linear_accel_xyz_msq+0x32>
    2b7c:	58 c0       	rjmp	.+176    	; 0x2c2e <bno055_convert_double_linear_accel_xyz_msq+0xe2>
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	09 2e       	mov	r0, r25
    2b84:	00 0c       	add	r0, r0
    2b86:	aa 0b       	sbc	r26, r26
    2b88:	bb 0b       	sbc	r27, r27
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <__floatsisf>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	48 ec       	ldi	r20, 0xC8	; 200
    2b9c:	52 e4       	ldi	r21, 0x42	; 66
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	28 85       	ldd	r18, Y+8	; 0x08
    2bac:	39 85       	ldd	r19, Y+9	; 0x09
    2bae:	f9 01       	movw	r30, r18
    2bb0:	80 83       	st	Z, r24
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	a2 83       	std	Z+2, r26	; 0x02
    2bb6:	b3 83       	std	Z+3, r27	; 0x03
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	09 2e       	mov	r0, r25
    2bbe:	00 0c       	add	r0, r0
    2bc0:	aa 0b       	sbc	r26, r26
    2bc2:	bb 0b       	sbc	r27, r27
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <__floatsisf>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	48 ec       	ldi	r20, 0xC8	; 200
    2bd6:	52 e4       	ldi	r21, 0x42	; 66
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	28 85       	ldd	r18, Y+8	; 0x08
    2be6:	39 85       	ldd	r19, Y+9	; 0x09
    2be8:	f9 01       	movw	r30, r18
    2bea:	84 83       	std	Z+4, r24	; 0x04
    2bec:	95 83       	std	Z+5, r25	; 0x05
    2bee:	a6 83       	std	Z+6, r26	; 0x06
    2bf0:	b7 83       	std	Z+7, r27	; 0x07
    2bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf6:	09 2e       	mov	r0, r25
    2bf8:	00 0c       	add	r0, r0
    2bfa:	aa 0b       	sbc	r26, r26
    2bfc:	bb 0b       	sbc	r27, r27
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <__floatsisf>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	48 ec       	ldi	r20, 0xC8	; 200
    2c10:	52 e4       	ldi	r21, 0x42	; 66
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	28 85       	ldd	r18, Y+8	; 0x08
    2c20:	39 85       	ldd	r19, Y+9	; 0x09
    2c22:	f9 01       	movw	r30, r18
    2c24:	80 87       	std	Z+8, r24	; 0x08
    2c26:	91 87       	std	Z+9, r25	; 0x09
    2c28:	a2 87       	std	Z+10, r26	; 0x0a
    2c2a:	b3 87       	std	Z+11, r27	; 0x0b
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <bno055_convert_double_linear_accel_xyz_msq+0xe6>
    2c2e:	8f ef       	ldi	r24, 0xFF	; 255
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	29 96       	adiw	r28, 0x09	; 9
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	08 95       	ret

00002c40 <bno055_get_mag_calib_stat>:
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	25 97       	sbiw	r28, 0x05	; 5
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	8c 83       	std	Y+4, r24	; 0x04
    2c50:	9d 83       	std	Y+5, r25	; 0x05
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	1b 82       	std	Y+3, r1	; 0x03
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
    2c5c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2c60:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2c64:	89 2b       	or	r24, r25
    2c66:	11 f4       	brne	.+4      	; 0x2c6c <bno055_get_mag_calib_stat+0x2c>
    2c68:	81 e8       	ldi	r24, 0x81	; 129
    2c6a:	3a c0       	rjmp	.+116    	; 0x2ce0 <bno055_get_mag_calib_stat+0xa0>
    2c6c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2c70:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2c74:	dc 01       	movw	r26, r24
    2c76:	13 96       	adiw	r26, 0x03	; 3
    2c78:	8c 91       	ld	r24, X
    2c7a:	88 23       	and	r24, r24
    2c7c:	19 f0       	breq	.+6      	; 0x2c84 <bno055_get_mag_calib_stat+0x44>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	4c dd       	rcall	.-1384   	; 0x271a <bno055_write_page_id>
    2c82:	8a 83       	std	Y+2, r24	; 0x02
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	88 23       	and	r24, r24
    2c88:	41 f0       	breq	.+16     	; 0x2c9a <bno055_get_mag_calib_stat+0x5a>
    2c8a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2c8e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2c92:	fc 01       	movw	r30, r24
    2c94:	83 81       	ldd	r24, Z+3	; 0x03
    2c96:	88 23       	and	r24, r24
    2c98:	01 f5       	brne	.+64     	; 0x2cda <bno055_get_mag_calib_stat+0x9a>
    2c9a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2c9e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	1b 96       	adiw	r26, 0x0b	; 11
    2ca6:	ed 91       	ld	r30, X+
    2ca8:	fc 91       	ld	r31, X
    2caa:	1c 97       	sbiw	r26, 0x0c	; 12
    2cac:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2cb0:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	18 96       	adiw	r26, 0x08	; 8
    2cb8:	3c 91       	ld	r19, X
    2cba:	ce 01       	movw	r24, r28
    2cbc:	03 96       	adiw	r24, 0x03	; 3
    2cbe:	21 e0       	ldi	r18, 0x01	; 1
    2cc0:	ac 01       	movw	r20, r24
    2cc2:	65 e3       	ldi	r22, 0x35	; 53
    2cc4:	83 2f       	mov	r24, r19
    2cc6:	19 95       	eicall
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	28 2f       	mov	r18, r24
    2cce:	23 70       	andi	r18, 0x03	; 3
    2cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	20 83       	st	Z, r18
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <bno055_get_mag_calib_stat+0x9e>
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	25 96       	adiw	r28, 0x05	; 5
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <bno055_get_accel_calib_stat>:
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	25 97       	sbiw	r28, 0x05	; 5
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	8c 83       	std	Y+4, r24	; 0x04
    2cfc:	9d 83       	std	Y+5, r25	; 0x05
    2cfe:	8f ef       	ldi	r24, 0xFF	; 255
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	1b 82       	std	Y+3, r1	; 0x03
    2d04:	8f ef       	ldi	r24, 0xFF	; 255
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2d0c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2d10:	89 2b       	or	r24, r25
    2d12:	11 f4       	brne	.+4      	; 0x2d18 <bno055_get_accel_calib_stat+0x2c>
    2d14:	81 e8       	ldi	r24, 0x81	; 129
    2d16:	41 c0       	rjmp	.+130    	; 0x2d9a <bno055_get_accel_calib_stat+0xae>
    2d18:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2d1c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2d20:	dc 01       	movw	r26, r24
    2d22:	13 96       	adiw	r26, 0x03	; 3
    2d24:	8c 91       	ld	r24, X
    2d26:	88 23       	and	r24, r24
    2d28:	19 f0       	breq	.+6      	; 0x2d30 <bno055_get_accel_calib_stat+0x44>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	f6 dc       	rcall	.-1556   	; 0x271a <bno055_write_page_id>
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	88 23       	and	r24, r24
    2d34:	41 f0       	breq	.+16     	; 0x2d46 <bno055_get_accel_calib_stat+0x5a>
    2d36:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2d3a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2d3e:	fc 01       	movw	r30, r24
    2d40:	83 81       	ldd	r24, Z+3	; 0x03
    2d42:	88 23       	and	r24, r24
    2d44:	39 f5       	brne	.+78     	; 0x2d94 <bno055_get_accel_calib_stat+0xa8>
    2d46:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2d4a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	1b 96       	adiw	r26, 0x0b	; 11
    2d52:	ed 91       	ld	r30, X+
    2d54:	fc 91       	ld	r31, X
    2d56:	1c 97       	sbiw	r26, 0x0c	; 12
    2d58:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2d5c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2d60:	dc 01       	movw	r26, r24
    2d62:	18 96       	adiw	r26, 0x08	; 8
    2d64:	3c 91       	ld	r19, X
    2d66:	ce 01       	movw	r24, r28
    2d68:	03 96       	adiw	r24, 0x03	; 3
    2d6a:	21 e0       	ldi	r18, 0x01	; 1
    2d6c:	ac 01       	movw	r20, r24
    2d6e:	65 e3       	ldi	r22, 0x35	; 53
    2d70:	83 2f       	mov	r24, r19
    2d72:	19 95       	eicall
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	8c 70       	andi	r24, 0x0C	; 12
    2d7e:	99 27       	eor	r25, r25
    2d80:	95 95       	asr	r25
    2d82:	87 95       	ror	r24
    2d84:	95 95       	asr	r25
    2d86:	87 95       	ror	r24
    2d88:	28 2f       	mov	r18, r24
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8e:	fc 01       	movw	r30, r24
    2d90:	20 83       	st	Z, r18
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <bno055_get_accel_calib_stat+0xac>
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	25 96       	adiw	r28, 0x05	; 5
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	08 95       	ret

00002da6 <bno055_get_gyro_calib_stat>:
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	25 97       	sbiw	r28, 0x05	; 5
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	8c 83       	std	Y+4, r24	; 0x04
    2db6:	9d 83       	std	Y+5, r25	; 0x05
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	1b 82       	std	Y+3, r1	; 0x03
    2dbe:	8f ef       	ldi	r24, 0xFF	; 255
    2dc0:	8a 83       	std	Y+2, r24	; 0x02
    2dc2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2dc6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2dca:	89 2b       	or	r24, r25
    2dcc:	11 f4       	brne	.+4      	; 0x2dd2 <bno055_get_gyro_calib_stat+0x2c>
    2dce:	81 e8       	ldi	r24, 0x81	; 129
    2dd0:	45 c0       	rjmp	.+138    	; 0x2e5c <bno055_get_gyro_calib_stat+0xb6>
    2dd2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2dd6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	13 96       	adiw	r26, 0x03	; 3
    2dde:	8c 91       	ld	r24, X
    2de0:	88 23       	and	r24, r24
    2de2:	19 f0       	breq	.+6      	; 0x2dea <bno055_get_gyro_calib_stat+0x44>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	99 dc       	rcall	.-1742   	; 0x271a <bno055_write_page_id>
    2de8:	8a 83       	std	Y+2, r24	; 0x02
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	88 23       	and	r24, r24
    2dee:	41 f0       	breq	.+16     	; 0x2e00 <bno055_get_gyro_calib_stat+0x5a>
    2df0:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2df4:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2df8:	fc 01       	movw	r30, r24
    2dfa:	83 81       	ldd	r24, Z+3	; 0x03
    2dfc:	88 23       	and	r24, r24
    2dfe:	59 f5       	brne	.+86     	; 0x2e56 <bno055_get_gyro_calib_stat+0xb0>
    2e00:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2e04:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	1b 96       	adiw	r26, 0x0b	; 11
    2e0c:	ed 91       	ld	r30, X+
    2e0e:	fc 91       	ld	r31, X
    2e10:	1c 97       	sbiw	r26, 0x0c	; 12
    2e12:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2e16:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	18 96       	adiw	r26, 0x08	; 8
    2e1e:	3c 91       	ld	r19, X
    2e20:	ce 01       	movw	r24, r28
    2e22:	03 96       	adiw	r24, 0x03	; 3
    2e24:	21 e0       	ldi	r18, 0x01	; 1
    2e26:	ac 01       	movw	r20, r24
    2e28:	65 e3       	ldi	r22, 0x35	; 53
    2e2a:	83 2f       	mov	r24, r19
    2e2c:	19 95       	eicall
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	80 73       	andi	r24, 0x30	; 48
    2e38:	99 27       	eor	r25, r25
    2e3a:	95 95       	asr	r25
    2e3c:	87 95       	ror	r24
    2e3e:	95 95       	asr	r25
    2e40:	87 95       	ror	r24
    2e42:	95 95       	asr	r25
    2e44:	87 95       	ror	r24
    2e46:	95 95       	asr	r25
    2e48:	87 95       	ror	r24
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e50:	fc 01       	movw	r30, r24
    2e52:	20 83       	st	Z, r18
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <bno055_get_gyro_calib_stat+0xb4>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	25 96       	adiw	r28, 0x05	; 5
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <bno055_get_sys_calib_stat>:
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	25 97       	sbiw	r28, 0x05	; 5
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	8c 83       	std	Y+4, r24	; 0x04
    2e78:	9d 83       	std	Y+5, r25	; 0x05
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	1b 82       	std	Y+3, r1	; 0x03
    2e80:	8f ef       	ldi	r24, 0xFF	; 255
    2e82:	8a 83       	std	Y+2, r24	; 0x02
    2e84:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2e88:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2e8c:	89 2b       	or	r24, r25
    2e8e:	11 f4       	brne	.+4      	; 0x2e94 <bno055_get_sys_calib_stat+0x2c>
    2e90:	81 e8       	ldi	r24, 0x81	; 129
    2e92:	3d c0       	rjmp	.+122    	; 0x2f0e <bno055_get_sys_calib_stat+0xa6>
    2e94:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2e98:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	13 96       	adiw	r26, 0x03	; 3
    2ea0:	8c 91       	ld	r24, X
    2ea2:	88 23       	and	r24, r24
    2ea4:	19 f0       	breq	.+6      	; 0x2eac <bno055_get_sys_calib_stat+0x44>
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	38 dc       	rcall	.-1936   	; 0x271a <bno055_write_page_id>
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	88 23       	and	r24, r24
    2eb0:	41 f0       	breq	.+16     	; 0x2ec2 <bno055_get_sys_calib_stat+0x5a>
    2eb2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2eb6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2eba:	fc 01       	movw	r30, r24
    2ebc:	83 81       	ldd	r24, Z+3	; 0x03
    2ebe:	88 23       	and	r24, r24
    2ec0:	19 f5       	brne	.+70     	; 0x2f08 <bno055_get_sys_calib_stat+0xa0>
    2ec2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2ec6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	1b 96       	adiw	r26, 0x0b	; 11
    2ece:	ed 91       	ld	r30, X+
    2ed0:	fc 91       	ld	r31, X
    2ed2:	1c 97       	sbiw	r26, 0x0c	; 12
    2ed4:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2ed8:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2edc:	dc 01       	movw	r26, r24
    2ede:	18 96       	adiw	r26, 0x08	; 8
    2ee0:	3c 91       	ld	r19, X
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	03 96       	adiw	r24, 0x03	; 3
    2ee6:	21 e0       	ldi	r18, 0x01	; 1
    2ee8:	ac 01       	movw	r20, r24
    2eea:	65 e3       	ldi	r22, 0x35	; 53
    2eec:	83 2f       	mov	r24, r19
    2eee:	19 95       	eicall
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	22 95       	swap	r18
    2ef8:	26 95       	lsr	r18
    2efa:	26 95       	lsr	r18
    2efc:	23 70       	andi	r18, 0x03	; 3
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	9d 81       	ldd	r25, Y+5	; 0x05
    2f02:	fc 01       	movw	r30, r24
    2f04:	20 83       	st	Z, r18
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <bno055_get_sys_calib_stat+0xa4>
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	25 96       	adiw	r28, 0x05	; 5
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	08 95       	ret

00002f1a <bno055_get_euler_unit>:
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	25 97       	sbiw	r28, 0x05	; 5
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	8c 83       	std	Y+4, r24	; 0x04
    2f2a:	9d 83       	std	Y+5, r25	; 0x05
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	1b 82       	std	Y+3, r1	; 0x03
    2f32:	8f ef       	ldi	r24, 0xFF	; 255
    2f34:	8a 83       	std	Y+2, r24	; 0x02
    2f36:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2f3a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2f3e:	89 2b       	or	r24, r25
    2f40:	11 f4       	brne	.+4      	; 0x2f46 <bno055_get_euler_unit+0x2c>
    2f42:	81 e8       	ldi	r24, 0x81	; 129
    2f44:	41 c0       	rjmp	.+130    	; 0x2fc8 <bno055_get_euler_unit+0xae>
    2f46:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2f4a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	13 96       	adiw	r26, 0x03	; 3
    2f52:	8c 91       	ld	r24, X
    2f54:	88 23       	and	r24, r24
    2f56:	19 f0       	breq	.+6      	; 0x2f5e <bno055_get_euler_unit+0x44>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	df db       	rcall	.-2114   	; 0x271a <bno055_write_page_id>
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	88 23       	and	r24, r24
    2f62:	41 f0       	breq	.+16     	; 0x2f74 <bno055_get_euler_unit+0x5a>
    2f64:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2f68:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	83 81       	ldd	r24, Z+3	; 0x03
    2f70:	88 23       	and	r24, r24
    2f72:	39 f5       	brne	.+78     	; 0x2fc2 <bno055_get_euler_unit+0xa8>
    2f74:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2f78:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	1b 96       	adiw	r26, 0x0b	; 11
    2f80:	ed 91       	ld	r30, X+
    2f82:	fc 91       	ld	r31, X
    2f84:	1c 97       	sbiw	r26, 0x0c	; 12
    2f86:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2f8a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	18 96       	adiw	r26, 0x08	; 8
    2f92:	3c 91       	ld	r19, X
    2f94:	ce 01       	movw	r24, r28
    2f96:	03 96       	adiw	r24, 0x03	; 3
    2f98:	21 e0       	ldi	r18, 0x01	; 1
    2f9a:	ac 01       	movw	r20, r24
    2f9c:	6b e3       	ldi	r22, 0x3B	; 59
    2f9e:	83 2f       	mov	r24, r19
    2fa0:	19 95       	eicall
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	84 70       	andi	r24, 0x04	; 4
    2fac:	99 27       	eor	r25, r25
    2fae:	95 95       	asr	r25
    2fb0:	87 95       	ror	r24
    2fb2:	95 95       	asr	r25
    2fb4:	87 95       	ror	r24
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fba:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	20 83       	st	Z, r18
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <bno055_get_euler_unit+0xac>
    2fc2:	8f ef       	ldi	r24, 0xFF	; 255
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	25 96       	adiw	r28, 0x05	; 5
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <bno055_set_euler_unit>:
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	25 97       	sbiw	r28, 0x05	; 5
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	1b 82       	std	Y+3, r1	; 0x03
    2fea:	1c 82       	std	Y+4, r1	; 0x04
    2fec:	8f ef       	ldi	r24, 0xFF	; 255
    2fee:	8a 83       	std	Y+2, r24	; 0x02
    2ff0:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    2ff4:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    2ff8:	89 2b       	or	r24, r25
    2ffa:	11 f4       	brne	.+4      	; 0x3000 <bno055_set_euler_unit+0x2c>
    2ffc:	81 e8       	ldi	r24, 0x81	; 129
    2ffe:	68 c0       	rjmp	.+208    	; 0x30d0 <bno055_set_euler_unit+0xfc>
    3000:	ce 01       	movw	r24, r28
    3002:	04 96       	adiw	r24, 0x04	; 4
    3004:	6b d0       	rcall	.+214    	; 0x30dc <bno055_get_operation_mode>
    3006:	8a 83       	std	Y+2, r24	; 0x02
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	88 23       	and	r24, r24
    300c:	09 f0       	breq	.+2      	; 0x3010 <bno055_set_euler_unit+0x3c>
    300e:	54 c0       	rjmp	.+168    	; 0x30b8 <bno055_set_euler_unit+0xe4>
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
    3012:	88 23       	and	r24, r24
    3014:	31 f0       	breq	.+12     	; 0x3022 <bno055_set_euler_unit+0x4e>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	b7 d0       	rcall	.+366    	; 0x3188 <bno055_set_operation_mode>
    301a:	98 2f       	mov	r25, r24
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	89 0f       	add	r24, r25
    3020:	8a 83       	std	Y+2, r24	; 0x02
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	88 23       	and	r24, r24
    3026:	09 f0       	breq	.+2      	; 0x302a <bno055_set_euler_unit+0x56>
    3028:	44 c0       	rjmp	.+136    	; 0x30b2 <bno055_set_euler_unit+0xde>
    302a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    302e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3032:	dc 01       	movw	r26, r24
    3034:	1b 96       	adiw	r26, 0x0b	; 11
    3036:	ed 91       	ld	r30, X+
    3038:	fc 91       	ld	r31, X
    303a:	1c 97       	sbiw	r26, 0x0c	; 12
    303c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3040:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3044:	dc 01       	movw	r26, r24
    3046:	18 96       	adiw	r26, 0x08	; 8
    3048:	3c 91       	ld	r19, X
    304a:	ce 01       	movw	r24, r28
    304c:	03 96       	adiw	r24, 0x03	; 3
    304e:	21 e0       	ldi	r18, 0x01	; 1
    3050:	ac 01       	movw	r20, r24
    3052:	6b e3       	ldi	r22, 0x3B	; 59
    3054:	83 2f       	mov	r24, r19
    3056:	19 95       	eicall
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	88 23       	and	r24, r24
    305e:	71 f5       	brne	.+92     	; 0x30bc <bno055_set_euler_unit+0xe8>
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	28 2f       	mov	r18, r24
    3064:	2b 7f       	andi	r18, 0xFB	; 251
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	84 70       	andi	r24, 0x04	; 4
    3076:	82 2b       	or	r24, r18
    3078:	8b 83       	std	Y+3, r24	; 0x03
    307a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    307e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3082:	dc 01       	movw	r26, r24
    3084:	19 96       	adiw	r26, 0x09	; 9
    3086:	ed 91       	ld	r30, X+
    3088:	fc 91       	ld	r31, X
    308a:	1a 97       	sbiw	r26, 0x0a	; 10
    308c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3090:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3094:	dc 01       	movw	r26, r24
    3096:	18 96       	adiw	r26, 0x08	; 8
    3098:	3c 91       	ld	r19, X
    309a:	ce 01       	movw	r24, r28
    309c:	03 96       	adiw	r24, 0x03	; 3
    309e:	21 e0       	ldi	r18, 0x01	; 1
    30a0:	ac 01       	movw	r20, r24
    30a2:	6b e3       	ldi	r22, 0x3B	; 59
    30a4:	83 2f       	mov	r24, r19
    30a6:	19 95       	eicall
    30a8:	98 2f       	mov	r25, r24
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	89 0f       	add	r24, r25
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	05 c0       	rjmp	.+10     	; 0x30bc <bno055_set_euler_unit+0xe8>
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <bno055_set_euler_unit+0xe8>
    30b8:	8f ef       	ldi	r24, 0xFF	; 255
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	8c 81       	ldd	r24, Y+4	; 0x04
    30be:	88 23       	and	r24, r24
    30c0:	31 f0       	breq	.+12     	; 0x30ce <bno055_set_euler_unit+0xfa>
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	61 d0       	rcall	.+194    	; 0x3188 <bno055_set_operation_mode>
    30c6:	98 2f       	mov	r25, r24
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	89 0f       	add	r24, r25
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	25 96       	adiw	r28, 0x05	; 5
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	08 95       	ret

000030dc <bno055_get_operation_mode>:
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	25 97       	sbiw	r28, 0x05	; 5
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	8c 83       	std	Y+4, r24	; 0x04
    30ec:	9d 83       	std	Y+5, r25	; 0x05
    30ee:	8f ef       	ldi	r24, 0xFF	; 255
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	1b 82       	std	Y+3, r1	; 0x03
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	8a 83       	std	Y+2, r24	; 0x02
    30f8:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    30fc:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3100:	89 2b       	or	r24, r25
    3102:	11 f4       	brne	.+4      	; 0x3108 <bno055_get_operation_mode+0x2c>
    3104:	81 e8       	ldi	r24, 0x81	; 129
    3106:	3a c0       	rjmp	.+116    	; 0x317c <bno055_get_operation_mode+0xa0>
    3108:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    310c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3110:	dc 01       	movw	r26, r24
    3112:	13 96       	adiw	r26, 0x03	; 3
    3114:	8c 91       	ld	r24, X
    3116:	88 23       	and	r24, r24
    3118:	19 f0       	breq	.+6      	; 0x3120 <bno055_get_operation_mode+0x44>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	fe da       	rcall	.-2564   	; 0x271a <bno055_write_page_id>
    311e:	8a 83       	std	Y+2, r24	; 0x02
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	88 23       	and	r24, r24
    3124:	41 f0       	breq	.+16     	; 0x3136 <bno055_get_operation_mode+0x5a>
    3126:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    312a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    312e:	fc 01       	movw	r30, r24
    3130:	83 81       	ldd	r24, Z+3	; 0x03
    3132:	88 23       	and	r24, r24
    3134:	01 f5       	brne	.+64     	; 0x3176 <bno055_get_operation_mode+0x9a>
    3136:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    313a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    313e:	dc 01       	movw	r26, r24
    3140:	1b 96       	adiw	r26, 0x0b	; 11
    3142:	ed 91       	ld	r30, X+
    3144:	fc 91       	ld	r31, X
    3146:	1c 97       	sbiw	r26, 0x0c	; 12
    3148:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    314c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3150:	dc 01       	movw	r26, r24
    3152:	18 96       	adiw	r26, 0x08	; 8
    3154:	3c 91       	ld	r19, X
    3156:	ce 01       	movw	r24, r28
    3158:	03 96       	adiw	r24, 0x03	; 3
    315a:	21 e0       	ldi	r18, 0x01	; 1
    315c:	ac 01       	movw	r20, r24
    315e:	6d e3       	ldi	r22, 0x3D	; 61
    3160:	83 2f       	mov	r24, r19
    3162:	19 95       	eicall
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	28 2f       	mov	r18, r24
    316a:	2f 70       	andi	r18, 0x0F	; 15
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	fc 01       	movw	r30, r24
    3172:	20 83       	st	Z, r18
    3174:	02 c0       	rjmp	.+4      	; 0x317a <bno055_get_operation_mode+0x9e>
    3176:	8f ef       	ldi	r24, 0xFF	; 255
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	25 96       	adiw	r28, 0x05	; 5
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	08 95       	ret

00003188 <bno055_set_operation_mode>:
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	25 97       	sbiw	r28, 0x05	; 5
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	8d 83       	std	Y+5, r24	; 0x05
    3198:	8f ef       	ldi	r24, 0xFF	; 255
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	1b 82       	std	Y+3, r1	; 0x03
    319e:	1c 82       	std	Y+4, r1	; 0x04
    31a0:	8f ef       	ldi	r24, 0xFF	; 255
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    31a8:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    31ac:	89 2b       	or	r24, r25
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <bno055_set_operation_mode+0x2c>
    31b0:	81 e8       	ldi	r24, 0x81	; 129
    31b2:	d9 c0       	rjmp	.+434    	; 0x3366 <bno055_set_operation_mode+0x1de>
    31b4:	ce 01       	movw	r24, r28
    31b6:	04 96       	adiw	r24, 0x04	; 4
    31b8:	91 df       	rcall	.-222    	; 0x30dc <bno055_get_operation_mode>
    31ba:	8a 83       	std	Y+2, r24	; 0x02
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	88 23       	and	r24, r24
    31c0:	09 f0       	breq	.+2      	; 0x31c4 <bno055_set_operation_mode+0x3c>
    31c2:	ce c0       	rjmp	.+412    	; 0x3360 <bno055_set_operation_mode+0x1d8>
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	88 23       	and	r24, r24
    31c8:	09 f0       	breq	.+2      	; 0x31cc <bno055_set_operation_mode+0x44>
    31ca:	4a c0       	rjmp	.+148    	; 0x3260 <bno055_set_operation_mode+0xd8>
    31cc:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    31d0:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    31d4:	dc 01       	movw	r26, r24
    31d6:	1b 96       	adiw	r26, 0x0b	; 11
    31d8:	ed 91       	ld	r30, X+
    31da:	fc 91       	ld	r31, X
    31dc:	1c 97       	sbiw	r26, 0x0c	; 12
    31de:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    31e2:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    31e6:	dc 01       	movw	r26, r24
    31e8:	18 96       	adiw	r26, 0x08	; 8
    31ea:	3c 91       	ld	r19, X
    31ec:	ce 01       	movw	r24, r28
    31ee:	03 96       	adiw	r24, 0x03	; 3
    31f0:	21 e0       	ldi	r18, 0x01	; 1
    31f2:	ac 01       	movw	r20, r24
    31f4:	6d e3       	ldi	r22, 0x3D	; 61
    31f6:	83 2f       	mov	r24, r19
    31f8:	19 95       	eicall
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	88 23       	and	r24, r24
    3200:	09 f0       	breq	.+2      	; 0x3204 <bno055_set_operation_mode+0x7c>
    3202:	b0 c0       	rjmp	.+352    	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	98 2f       	mov	r25, r24
    3208:	90 7f       	andi	r25, 0xF0	; 240
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	8f 70       	andi	r24, 0x0F	; 15
    320e:	89 2b       	or	r24, r25
    3210:	8b 83       	std	Y+3, r24	; 0x03
    3212:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3216:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    321a:	dc 01       	movw	r26, r24
    321c:	19 96       	adiw	r26, 0x09	; 9
    321e:	ed 91       	ld	r30, X+
    3220:	fc 91       	ld	r31, X
    3222:	1a 97       	sbiw	r26, 0x0a	; 10
    3224:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3228:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    322c:	dc 01       	movw	r26, r24
    322e:	18 96       	adiw	r26, 0x08	; 8
    3230:	3c 91       	ld	r19, X
    3232:	ce 01       	movw	r24, r28
    3234:	03 96       	adiw	r24, 0x03	; 3
    3236:	21 e0       	ldi	r18, 0x01	; 1
    3238:	ac 01       	movw	r20, r24
    323a:	6d e3       	ldi	r22, 0x3D	; 61
    323c:	83 2f       	mov	r24, r19
    323e:	19 95       	eicall
    3240:	98 2f       	mov	r25, r24
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	89 0f       	add	r24, r25
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    324c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3250:	fc 01       	movw	r30, r24
    3252:	25 85       	ldd	r18, Z+13	; 0x0d
    3254:	36 85       	ldd	r19, Z+14	; 0x0e
    3256:	88 e5       	ldi	r24, 0x58	; 88
    3258:	92 e0       	ldi	r25, 0x02	; 2
    325a:	f9 01       	movw	r30, r18
    325c:	19 95       	eicall
    325e:	82 c0       	rjmp	.+260    	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3260:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3264:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3268:	dc 01       	movw	r26, r24
    326a:	1b 96       	adiw	r26, 0x0b	; 11
    326c:	ed 91       	ld	r30, X+
    326e:	fc 91       	ld	r31, X
    3270:	1c 97       	sbiw	r26, 0x0c	; 12
    3272:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3276:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    327a:	dc 01       	movw	r26, r24
    327c:	18 96       	adiw	r26, 0x08	; 8
    327e:	3c 91       	ld	r19, X
    3280:	ce 01       	movw	r24, r28
    3282:	03 96       	adiw	r24, 0x03	; 3
    3284:	21 e0       	ldi	r18, 0x01	; 1
    3286:	ac 01       	movw	r20, r24
    3288:	6d e3       	ldi	r22, 0x3D	; 61
    328a:	83 2f       	mov	r24, r19
    328c:	19 95       	eicall
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	88 23       	and	r24, r24
    3294:	c1 f4       	brne	.+48     	; 0x32c6 <bno055_set_operation_mode+0x13e>
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	80 7f       	andi	r24, 0xF0	; 240
    329a:	8b 83       	std	Y+3, r24	; 0x03
    329c:	ce 01       	movw	r24, r28
    329e:	03 96       	adiw	r24, 0x03	; 3
    32a0:	41 e0       	ldi	r20, 0x01	; 1
    32a2:	bc 01       	movw	r22, r24
    32a4:	8d e3       	ldi	r24, 0x3D	; 61
    32a6:	05 da       	rcall	.-3062   	; 0x26b2 <bno055_write_register>
    32a8:	98 2f       	mov	r25, r24
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	89 0f       	add	r24, r25
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    32b4:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    32b8:	fc 01       	movw	r30, r24
    32ba:	25 85       	ldd	r18, Z+13	; 0x0d
    32bc:	36 85       	ldd	r19, Z+14	; 0x0e
    32be:	84 e1       	ldi	r24, 0x14	; 20
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	f9 01       	movw	r30, r18
    32c4:	19 95       	eicall
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	88 23       	and	r24, r24
    32ca:	09 f4       	brne	.+2      	; 0x32ce <bno055_set_operation_mode+0x146>
    32cc:	4b c0       	rjmp	.+150    	; 0x3364 <bno055_set_operation_mode+0x1dc>
    32ce:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    32d2:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    32d6:	dc 01       	movw	r26, r24
    32d8:	1b 96       	adiw	r26, 0x0b	; 11
    32da:	ed 91       	ld	r30, X+
    32dc:	fc 91       	ld	r31, X
    32de:	1c 97       	sbiw	r26, 0x0c	; 12
    32e0:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    32e4:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    32e8:	dc 01       	movw	r26, r24
    32ea:	18 96       	adiw	r26, 0x08	; 8
    32ec:	3c 91       	ld	r19, X
    32ee:	ce 01       	movw	r24, r28
    32f0:	03 96       	adiw	r24, 0x03	; 3
    32f2:	21 e0       	ldi	r18, 0x01	; 1
    32f4:	ac 01       	movw	r20, r24
    32f6:	6d e3       	ldi	r22, 0x3D	; 61
    32f8:	83 2f       	mov	r24, r19
    32fa:	19 95       	eicall
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	88 23       	and	r24, r24
    3302:	81 f5       	brne	.+96     	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3304:	8b 81       	ldd	r24, Y+3	; 0x03
    3306:	98 2f       	mov	r25, r24
    3308:	90 7f       	andi	r25, 0xF0	; 240
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	8f 70       	andi	r24, 0x0F	; 15
    330e:	89 2b       	or	r24, r25
    3310:	8b 83       	std	Y+3, r24	; 0x03
    3312:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3316:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    331a:	dc 01       	movw	r26, r24
    331c:	19 96       	adiw	r26, 0x09	; 9
    331e:	ed 91       	ld	r30, X+
    3320:	fc 91       	ld	r31, X
    3322:	1a 97       	sbiw	r26, 0x0a	; 10
    3324:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3328:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    332c:	dc 01       	movw	r26, r24
    332e:	18 96       	adiw	r26, 0x08	; 8
    3330:	3c 91       	ld	r19, X
    3332:	ce 01       	movw	r24, r28
    3334:	03 96       	adiw	r24, 0x03	; 3
    3336:	21 e0       	ldi	r18, 0x01	; 1
    3338:	ac 01       	movw	r20, r24
    333a:	6d e3       	ldi	r22, 0x3D	; 61
    333c:	83 2f       	mov	r24, r19
    333e:	19 95       	eicall
    3340:	98 2f       	mov	r25, r24
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	89 0f       	add	r24, r25
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    334c:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3350:	fc 01       	movw	r30, r24
    3352:	25 85       	ldd	r18, Z+13	; 0x0d
    3354:	36 85       	ldd	r19, Z+14	; 0x0e
    3356:	88 e5       	ldi	r24, 0x58	; 88
    3358:	92 e0       	ldi	r25, 0x02	; 2
    335a:	f9 01       	movw	r30, r18
    335c:	19 95       	eicall
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3360:	8f ef       	ldi	r24, 0xFF	; 255
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	25 96       	adiw	r28, 0x05	; 5
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <bno055_set_power_mode>:
 *	@note For detailed about LOWPOWER mode
 *	refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	25 97       	sbiw	r28, 0x05	; 5
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	8d 83       	std	Y+5, r24	; 0x05
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    3382:	8f ef       	ldi	r24, 0xFF	; 255
    3384:	89 83       	std	Y+1, r24	; 0x01
u8 data_u8r = BNO055_INIT_VALUE;
    3386:	1b 82       	std	Y+3, r1	; 0x03
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    3388:	1c 82       	std	Y+4, r1	; 0x04
s8 stat_s8 = BNO055_ERROR;
    338a:	8f ef       	ldi	r24, 0xFF	; 255
    338c:	8a 83       	std	Y+2, r24	; 0x02
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    338e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3392:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3396:	89 2b       	or	r24, r25
    3398:	11 f4       	brne	.+4      	; 0x339e <bno055_set_power_mode+0x2c>
	return BNO055_E_NULL_PTR;
    339a:	81 e8       	ldi	r24, 0x81	; 129
    339c:	62 c0       	rjmp	.+196    	; 0x3462 <bno055_set_power_mode+0xf0>
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    339e:	ce 01       	movw	r24, r28
    33a0:	04 96       	adiw	r24, 0x04	; 4
    33a2:	9c de       	rcall	.-712    	; 0x30dc <bno055_get_operation_mode>
    33a4:	8a 83       	std	Y+2, r24	; 0x02
		if (stat_s8 == BNO055_SUCCESS) {
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	88 23       	and	r24, r24
    33aa:	09 f0       	breq	.+2      	; 0x33ae <bno055_set_power_mode+0x3c>
    33ac:	4e c0       	rjmp	.+156    	; 0x344a <bno055_set_power_mode+0xd8>
			if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    33ae:	8c 81       	ldd	r24, Y+4	; 0x04
    33b0:	88 23       	and	r24, r24
    33b2:	31 f0       	breq	.+12     	; 0x33c0 <bno055_set_power_mode+0x4e>
				stat_s8 += bno055_set_operation_mode
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	e8 de       	rcall	.-560    	; 0x3188 <bno055_set_operation_mode>
    33b8:	98 2f       	mov	r25, r24
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	89 0f       	add	r24, r25
    33be:	8a 83       	std	Y+2, r24	; 0x02
				(BNO055_OPERATION_MODE_CONFIG);
			if (stat_s8 == BNO055_SUCCESS) {
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	88 23       	and	r24, r24
    33c4:	09 f0       	breq	.+2      	; 0x33c8 <bno055_set_power_mode+0x56>
    33c6:	3e c0       	rjmp	.+124    	; 0x3444 <bno055_set_power_mode+0xd2>
				/* Write the value of power mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    33c8:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    33cc:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    33d0:	dc 01       	movw	r26, r24
    33d2:	1b 96       	adiw	r26, 0x0b	; 11
    33d4:	ed 91       	ld	r30, X+
    33d6:	fc 91       	ld	r31, X
    33d8:	1c 97       	sbiw	r26, 0x0c	; 12
    33da:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    33de:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    33e2:	dc 01       	movw	r26, r24
    33e4:	18 96       	adiw	r26, 0x08	; 8
    33e6:	3c 91       	ld	r19, X
    33e8:	ce 01       	movw	r24, r28
    33ea:	03 96       	adiw	r24, 0x03	; 3
    33ec:	21 e0       	ldi	r18, 0x01	; 1
    33ee:	ac 01       	movw	r20, r24
    33f0:	6e e3       	ldi	r22, 0x3E	; 62
    33f2:	83 2f       	mov	r24, r19
    33f4:	19 95       	eicall
    33f6:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_POWER_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	88 23       	and	r24, r24
    33fc:	41 f5       	brne	.+80     	; 0x344e <bno055_set_power_mode+0xdc>
					data_u8r =
    33fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3400:	98 2f       	mov	r25, r24
    3402:	9c 7f       	andi	r25, 0xFC	; 252
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	83 70       	andi	r24, 0x03	; 3
    3408:	89 2b       	or	r24, r25
    340a:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    340c:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3410:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3414:	dc 01       	movw	r26, r24
    3416:	19 96       	adiw	r26, 0x09	; 9
    3418:	ed 91       	ld	r30, X+
    341a:	fc 91       	ld	r31, X
    341c:	1a 97       	sbiw	r26, 0x0a	; 10
    341e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <p_bno055>
    3422:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <p_bno055+0x1>
    3426:	dc 01       	movw	r26, r24
    3428:	18 96       	adiw	r26, 0x08	; 8
    342a:	3c 91       	ld	r19, X
    342c:	ce 01       	movw	r24, r28
    342e:	03 96       	adiw	r24, 0x03	; 3
    3430:	21 e0       	ldi	r18, 0x01	; 1
    3432:	ac 01       	movw	r20, r24
    3434:	6e e3       	ldi	r22, 0x3E	; 62
    3436:	83 2f       	mov	r24, r19
    3438:	19 95       	eicall
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
					data_u8r =
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
    343a:	98 2f       	mov	r25, r24
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	89 0f       	add	r24, r25
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	05 c0       	rjmp	.+10     	; 0x344e <bno055_set_power_mode+0xdc>
					BNO055_POWER_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
				}
			} else {
			com_rslt = BNO055_ERROR;
    3444:	8f ef       	ldi	r24, 0xFF	; 255
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	02 c0       	rjmp	.+4      	; 0x344e <bno055_set_power_mode+0xdc>
			}
		} else {
		com_rslt = BNO055_ERROR;
    344a:	8f ef       	ldi	r24, 0xFF	; 255
    344c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    344e:	8c 81       	ldd	r24, Y+4	; 0x04
    3450:	88 23       	and	r24, r24
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
    3452:	31 f0       	breq	.+12     	; 0x3460 <bno055_set_power_mode+0xee>
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	98 de       	rcall	.-720    	; 0x3188 <bno055_set_operation_mode>
    3458:	98 2f       	mov	r25, r24
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	89 0f       	add	r24, r25
    345e:	89 83       	std	Y+1, r24	; 0x01
		(prev_opmode_u8);
	return com_rslt;
    3460:	89 81       	ldd	r24, Y+1	; 0x01
}
    3462:	25 96       	adiw	r28, 0x05	; 5
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	08 95       	ret

0000346e <sysclk_get_main_hz>:
}

uint8_t imu_sys_cal()
{
	return sys_calib;
}
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	98 e4       	ldi	r25, 0x48	; 72
    347a:	a8 ee       	ldi	r26, 0xE8	; 232
    347c:	b1 e0       	ldi	r27, 0x01	; 1
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	08 95       	ret

00003488 <sysclk_get_per4_hz>:
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	1f 92       	push	r1
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	19 82       	std	Y+1, r1	; 0x01
    3494:	ec df       	rcall	.-40     	; 0x346e <sysclk_get_main_hz>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	29 81       	ldd	r18, Y+1	; 0x01
    349c:	22 2f       	mov	r18, r18
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <sysclk_get_per4_hz+0x22>
    34a2:	b6 95       	lsr	r27
    34a4:	a7 95       	ror	r26
    34a6:	97 95       	ror	r25
    34a8:	87 95       	ror	r24
    34aa:	2a 95       	dec	r18
    34ac:	d2 f7       	brpl	.-12     	; 0x34a2 <sysclk_get_per4_hz+0x1a>
    34ae:	bc 01       	movw	r22, r24
    34b0:	cd 01       	movw	r24, r26
    34b2:	0f 90       	pop	r0
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	08 95       	ret

000034ba <sysclk_get_per2_hz>:
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	e2 df       	rcall	.-60     	; 0x3488 <sysclk_get_per4_hz>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	08 95       	ret

000034d2 <sysclk_get_per_hz>:
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	ef df       	rcall	.-34     	; 0x34ba <sysclk_get_per2_hz>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <sysclk_get_cpu_hz>:
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	ef df       	rcall	.-34     	; 0x34d2 <sysclk_get_per_hz>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	08 95       	ret

00003502 <sysclk_enable_peripheral_clock>:
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	1f 92       	push	r1
    3508:	1f 92       	push	r1
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	9a 81       	ldd	r25, Y+2	; 0x02
    3516:	89 2b       	or	r24, r25
    3518:	09 f4       	brne	.+2      	; 0x351c <sysclk_enable_peripheral_clock+0x1a>
    351a:	5e c1       	rjmp	.+700    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	9a 81       	ldd	r25, Y+2	; 0x02
    3520:	80 3c       	cpi	r24, 0xC0	; 192
    3522:	91 05       	cpc	r25, r1
    3524:	21 f4       	brne	.+8      	; 0x352e <sysclk_enable_peripheral_clock+0x2c>
    3526:	60 e1       	ldi	r22, 0x10	; 16
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	47 d7       	rcall	.+3726   	; 0x43ba <sysclk_enable_module>
    352c:	55 c1       	rjmp	.+682    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	9a 81       	ldd	r25, Y+2	; 0x02
    3532:	80 34       	cpi	r24, 0x40	; 64
    3534:	94 40       	sbci	r25, 0x04	; 4
    3536:	21 f4       	brne	.+8      	; 0x3540 <sysclk_enable_peripheral_clock+0x3e>
    3538:	68 e0       	ldi	r22, 0x08	; 8
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	3e d7       	rcall	.+3708   	; 0x43ba <sysclk_enable_module>
    353e:	4c c1       	rjmp	.+664    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	9a 81       	ldd	r25, Y+2	; 0x02
    3544:	81 15       	cp	r24, r1
    3546:	94 40       	sbci	r25, 0x04	; 4
    3548:	21 f4       	brne	.+8      	; 0x3552 <sysclk_enable_peripheral_clock+0x50>
    354a:	64 e0       	ldi	r22, 0x04	; 4
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	35 d7       	rcall	.+3690   	; 0x43ba <sysclk_enable_module>
    3550:	43 c1       	rjmp	.+646    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	80 38       	cpi	r24, 0x80	; 128
    3558:	91 40       	sbci	r25, 0x01	; 1
    355a:	21 f4       	brne	.+8      	; 0x3564 <sysclk_enable_peripheral_clock+0x62>
    355c:	62 e0       	ldi	r22, 0x02	; 2
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	2c d7       	rcall	.+3672   	; 0x43ba <sysclk_enable_module>
    3562:	3a c1       	rjmp	.+628    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	9a 81       	ldd	r25, Y+2	; 0x02
    3568:	81 15       	cp	r24, r1
    356a:	91 40       	sbci	r25, 0x01	; 1
    356c:	21 f4       	brne	.+8      	; 0x3576 <sysclk_enable_peripheral_clock+0x74>
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	23 d7       	rcall	.+3654   	; 0x43ba <sysclk_enable_module>
    3574:	31 c1       	rjmp	.+610    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	80 38       	cpi	r24, 0x80	; 128
    357c:	93 40       	sbci	r25, 0x03	; 3
    357e:	21 f4       	brne	.+8      	; 0x3588 <sysclk_enable_peripheral_clock+0x86>
    3580:	61 e0       	ldi	r22, 0x01	; 1
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	1a d7       	rcall	.+3636   	; 0x43ba <sysclk_enable_module>
    3586:	28 c1       	rjmp	.+592    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	80 39       	cpi	r24, 0x90	; 144
    358e:	93 40       	sbci	r25, 0x03	; 3
    3590:	21 f4       	brne	.+8      	; 0x359a <sysclk_enable_peripheral_clock+0x98>
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	82 e0       	ldi	r24, 0x02	; 2
    3596:	11 d7       	rcall	.+3618   	; 0x43ba <sysclk_enable_module>
    3598:	1f c1       	rjmp	.+574    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	81 15       	cp	r24, r1
    35a0:	92 40       	sbci	r25, 0x02	; 2
    35a2:	21 f4       	brne	.+8      	; 0x35ac <sysclk_enable_peripheral_clock+0xaa>
    35a4:	62 e0       	ldi	r22, 0x02	; 2
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	08 d7       	rcall	.+3600   	; 0x43ba <sysclk_enable_module>
    35aa:	16 c1       	rjmp	.+556    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	9a 81       	ldd	r25, Y+2	; 0x02
    35b0:	80 34       	cpi	r24, 0x40	; 64
    35b2:	92 40       	sbci	r25, 0x02	; 2
    35b4:	21 f4       	brne	.+8      	; 0x35be <sysclk_enable_peripheral_clock+0xbc>
    35b6:	62 e0       	ldi	r22, 0x02	; 2
    35b8:	82 e0       	ldi	r24, 0x02	; 2
    35ba:	ff d6       	rcall	.+3582   	; 0x43ba <sysclk_enable_module>
    35bc:	0d c1       	rjmp	.+538    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	81 15       	cp	r24, r1
    35c4:	93 40       	sbci	r25, 0x03	; 3
    35c6:	21 f4       	brne	.+8      	; 0x35d0 <sysclk_enable_peripheral_clock+0xce>
    35c8:	64 e0       	ldi	r22, 0x04	; 4
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	f6 d6       	rcall	.+3564   	; 0x43ba <sysclk_enable_module>
    35ce:	04 c1       	rjmp	.+520    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	9a 81       	ldd	r25, Y+2	; 0x02
    35d4:	80 32       	cpi	r24, 0x20	; 32
    35d6:	93 40       	sbci	r25, 0x03	; 3
    35d8:	21 f4       	brne	.+8      	; 0x35e2 <sysclk_enable_peripheral_clock+0xe0>
    35da:	64 e0       	ldi	r22, 0x04	; 4
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	ed d6       	rcall	.+3546   	; 0x43ba <sysclk_enable_module>
    35e0:	fb c0       	rjmp	.+502    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	9a 81       	ldd	r25, Y+2	; 0x02
    35e6:	81 15       	cp	r24, r1
    35e8:	98 40       	sbci	r25, 0x08	; 8
    35ea:	21 f4       	brne	.+8      	; 0x35f4 <sysclk_enable_peripheral_clock+0xf2>
    35ec:	61 e0       	ldi	r22, 0x01	; 1
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	e4 d6       	rcall	.+3528   	; 0x43ba <sysclk_enable_module>
    35f2:	f2 c0       	rjmp	.+484    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	81 15       	cp	r24, r1
    35fa:	99 40       	sbci	r25, 0x09	; 9
    35fc:	21 f4       	brne	.+8      	; 0x3606 <sysclk_enable_peripheral_clock+0x104>
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	84 e0       	ldi	r24, 0x04	; 4
    3602:	db d6       	rcall	.+3510   	; 0x43ba <sysclk_enable_module>
    3604:	e9 c0       	rjmp	.+466    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	81 15       	cp	r24, r1
    360c:	9a 40       	sbci	r25, 0x0A	; 10
    360e:	21 f4       	brne	.+8      	; 0x3618 <sysclk_enable_peripheral_clock+0x116>
    3610:	61 e0       	ldi	r22, 0x01	; 1
    3612:	85 e0       	ldi	r24, 0x05	; 5
    3614:	d2 d6       	rcall	.+3492   	; 0x43ba <sysclk_enable_module>
    3616:	e0 c0       	rjmp	.+448    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	81 15       	cp	r24, r1
    361e:	9b 40       	sbci	r25, 0x0B	; 11
    3620:	21 f4       	brne	.+8      	; 0x362a <sysclk_enable_peripheral_clock+0x128>
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	86 e0       	ldi	r24, 0x06	; 6
    3626:	c9 d6       	rcall	.+3474   	; 0x43ba <sysclk_enable_module>
    3628:	d7 c0       	rjmp	.+430    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	80 34       	cpi	r24, 0x40	; 64
    3630:	98 40       	sbci	r25, 0x08	; 8
    3632:	21 f4       	brne	.+8      	; 0x363c <sysclk_enable_peripheral_clock+0x13a>
    3634:	62 e0       	ldi	r22, 0x02	; 2
    3636:	83 e0       	ldi	r24, 0x03	; 3
    3638:	c0 d6       	rcall	.+3456   	; 0x43ba <sysclk_enable_module>
    363a:	ce c0       	rjmp	.+412    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	9a 81       	ldd	r25, Y+2	; 0x02
    3640:	80 34       	cpi	r24, 0x40	; 64
    3642:	99 40       	sbci	r25, 0x09	; 9
    3644:	21 f4       	brne	.+8      	; 0x364e <sysclk_enable_peripheral_clock+0x14c>
    3646:	62 e0       	ldi	r22, 0x02	; 2
    3648:	84 e0       	ldi	r24, 0x04	; 4
    364a:	b7 d6       	rcall	.+3438   	; 0x43ba <sysclk_enable_module>
    364c:	c5 c0       	rjmp	.+394    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	80 34       	cpi	r24, 0x40	; 64
    3654:	9a 40       	sbci	r25, 0x0A	; 10
    3656:	21 f4       	brne	.+8      	; 0x3660 <sysclk_enable_peripheral_clock+0x15e>
    3658:	62 e0       	ldi	r22, 0x02	; 2
    365a:	85 e0       	ldi	r24, 0x05	; 5
    365c:	ae d6       	rcall	.+3420   	; 0x43ba <sysclk_enable_module>
    365e:	bc c0       	rjmp	.+376    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	80 34       	cpi	r24, 0x40	; 64
    3666:	9b 40       	sbci	r25, 0x0B	; 11
    3668:	21 f4       	brne	.+8      	; 0x3672 <sysclk_enable_peripheral_clock+0x170>
    366a:	62 e0       	ldi	r22, 0x02	; 2
    366c:	86 e0       	ldi	r24, 0x06	; 6
    366e:	a5 d6       	rcall	.+3402   	; 0x43ba <sysclk_enable_module>
    3670:	b3 c0       	rjmp	.+358    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	80 39       	cpi	r24, 0x90	; 144
    3678:	98 40       	sbci	r25, 0x08	; 8
    367a:	21 f4       	brne	.+8      	; 0x3684 <sysclk_enable_peripheral_clock+0x182>
    367c:	64 e0       	ldi	r22, 0x04	; 4
    367e:	83 e0       	ldi	r24, 0x03	; 3
    3680:	9c d6       	rcall	.+3384   	; 0x43ba <sysclk_enable_module>
    3682:	aa c0       	rjmp	.+340    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	9a 81       	ldd	r25, Y+2	; 0x02
    3688:	80 39       	cpi	r24, 0x90	; 144
    368a:	99 40       	sbci	r25, 0x09	; 9
    368c:	21 f4       	brne	.+8      	; 0x3696 <sysclk_enable_peripheral_clock+0x194>
    368e:	64 e0       	ldi	r22, 0x04	; 4
    3690:	84 e0       	ldi	r24, 0x04	; 4
    3692:	93 d6       	rcall	.+3366   	; 0x43ba <sysclk_enable_module>
    3694:	a1 c0       	rjmp	.+322    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	9a 81       	ldd	r25, Y+2	; 0x02
    369a:	80 39       	cpi	r24, 0x90	; 144
    369c:	9a 40       	sbci	r25, 0x0A	; 10
    369e:	21 f4       	brne	.+8      	; 0x36a8 <sysclk_enable_peripheral_clock+0x1a6>
    36a0:	64 e0       	ldi	r22, 0x04	; 4
    36a2:	85 e0       	ldi	r24, 0x05	; 5
    36a4:	8a d6       	rcall	.+3348   	; 0x43ba <sysclk_enable_module>
    36a6:	98 c0       	rjmp	.+304    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	80 39       	cpi	r24, 0x90	; 144
    36ae:	9b 40       	sbci	r25, 0x0B	; 11
    36b0:	21 f4       	brne	.+8      	; 0x36ba <sysclk_enable_peripheral_clock+0x1b8>
    36b2:	64 e0       	ldi	r22, 0x04	; 4
    36b4:	86 e0       	ldi	r24, 0x06	; 6
    36b6:	81 d6       	rcall	.+3330   	; 0x43ba <sysclk_enable_module>
    36b8:	8f c0       	rjmp	.+286    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	80 3c       	cpi	r24, 0xC0	; 192
    36c0:	98 40       	sbci	r25, 0x08	; 8
    36c2:	21 f4       	brne	.+8      	; 0x36cc <sysclk_enable_peripheral_clock+0x1ca>
    36c4:	68 e0       	ldi	r22, 0x08	; 8
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	78 d6       	rcall	.+3312   	; 0x43ba <sysclk_enable_module>
    36ca:	86 c0       	rjmp	.+268    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	80 3c       	cpi	r24, 0xC0	; 192
    36d2:	99 40       	sbci	r25, 0x09	; 9
    36d4:	21 f4       	brne	.+8      	; 0x36de <sysclk_enable_peripheral_clock+0x1dc>
    36d6:	68 e0       	ldi	r22, 0x08	; 8
    36d8:	84 e0       	ldi	r24, 0x04	; 4
    36da:	6f d6       	rcall	.+3294   	; 0x43ba <sysclk_enable_module>
    36dc:	7d c0       	rjmp	.+250    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	80 3c       	cpi	r24, 0xC0	; 192
    36e4:	9a 40       	sbci	r25, 0x0A	; 10
    36e6:	21 f4       	brne	.+8      	; 0x36f0 <sysclk_enable_peripheral_clock+0x1ee>
    36e8:	68 e0       	ldi	r22, 0x08	; 8
    36ea:	85 e0       	ldi	r24, 0x05	; 5
    36ec:	66 d6       	rcall	.+3276   	; 0x43ba <sysclk_enable_module>
    36ee:	74 c0       	rjmp	.+232    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	80 3c       	cpi	r24, 0xC0	; 192
    36f6:	9b 40       	sbci	r25, 0x0B	; 11
    36f8:	21 f4       	brne	.+8      	; 0x3702 <sysclk_enable_peripheral_clock+0x200>
    36fa:	68 e0       	ldi	r22, 0x08	; 8
    36fc:	86 e0       	ldi	r24, 0x06	; 6
    36fe:	5d d6       	rcall	.+3258   	; 0x43ba <sysclk_enable_module>
    3700:	6b c0       	rjmp	.+214    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	80 3a       	cpi	r24, 0xA0	; 160
    3708:	98 40       	sbci	r25, 0x08	; 8
    370a:	21 f4       	brne	.+8      	; 0x3714 <sysclk_enable_peripheral_clock+0x212>
    370c:	60 e1       	ldi	r22, 0x10	; 16
    370e:	83 e0       	ldi	r24, 0x03	; 3
    3710:	54 d6       	rcall	.+3240   	; 0x43ba <sysclk_enable_module>
    3712:	62 c0       	rjmp	.+196    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	80 3a       	cpi	r24, 0xA0	; 160
    371a:	99 40       	sbci	r25, 0x09	; 9
    371c:	21 f4       	brne	.+8      	; 0x3726 <sysclk_enable_peripheral_clock+0x224>
    371e:	60 e1       	ldi	r22, 0x10	; 16
    3720:	84 e0       	ldi	r24, 0x04	; 4
    3722:	4b d6       	rcall	.+3222   	; 0x43ba <sysclk_enable_module>
    3724:	59 c0       	rjmp	.+178    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	80 3a       	cpi	r24, 0xA0	; 160
    372c:	9a 40       	sbci	r25, 0x0A	; 10
    372e:	21 f4       	brne	.+8      	; 0x3738 <sysclk_enable_peripheral_clock+0x236>
    3730:	60 e1       	ldi	r22, 0x10	; 16
    3732:	85 e0       	ldi	r24, 0x05	; 5
    3734:	42 d6       	rcall	.+3204   	; 0x43ba <sysclk_enable_module>
    3736:	50 c0       	rjmp	.+160    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	9a 81       	ldd	r25, Y+2	; 0x02
    373c:	80 3a       	cpi	r24, 0xA0	; 160
    373e:	9b 40       	sbci	r25, 0x0B	; 11
    3740:	21 f4       	brne	.+8      	; 0x374a <sysclk_enable_peripheral_clock+0x248>
    3742:	60 e1       	ldi	r22, 0x10	; 16
    3744:	86 e0       	ldi	r24, 0x06	; 6
    3746:	39 d6       	rcall	.+3186   	; 0x43ba <sysclk_enable_module>
    3748:	47 c0       	rjmp	.+142    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	80 3b       	cpi	r24, 0xB0	; 176
    3750:	98 40       	sbci	r25, 0x08	; 8
    3752:	21 f4       	brne	.+8      	; 0x375c <sysclk_enable_peripheral_clock+0x25a>
    3754:	60 e2       	ldi	r22, 0x20	; 32
    3756:	83 e0       	ldi	r24, 0x03	; 3
    3758:	30 d6       	rcall	.+3168   	; 0x43ba <sysclk_enable_module>
    375a:	3e c0       	rjmp	.+124    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
    3760:	80 3b       	cpi	r24, 0xB0	; 176
    3762:	99 40       	sbci	r25, 0x09	; 9
    3764:	21 f4       	brne	.+8      	; 0x376e <sysclk_enable_peripheral_clock+0x26c>
    3766:	60 e2       	ldi	r22, 0x20	; 32
    3768:	84 e0       	ldi	r24, 0x04	; 4
    376a:	27 d6       	rcall	.+3150   	; 0x43ba <sysclk_enable_module>
    376c:	35 c0       	rjmp	.+106    	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	80 3b       	cpi	r24, 0xB0	; 176
    3774:	9a 40       	sbci	r25, 0x0A	; 10
    3776:	21 f4       	brne	.+8      	; 0x3780 <sysclk_enable_peripheral_clock+0x27e>
    3778:	60 e2       	ldi	r22, 0x20	; 32
    377a:	85 e0       	ldi	r24, 0x05	; 5
    377c:	1e d6       	rcall	.+3132   	; 0x43ba <sysclk_enable_module>
    377e:	2c c0       	rjmp	.+88     	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	80 3b       	cpi	r24, 0xB0	; 176
    3786:	9b 40       	sbci	r25, 0x0B	; 11
    3788:	21 f4       	brne	.+8      	; 0x3792 <sysclk_enable_peripheral_clock+0x290>
    378a:	60 e2       	ldi	r22, 0x20	; 32
    378c:	86 e0       	ldi	r24, 0x06	; 6
    378e:	15 d6       	rcall	.+3114   	; 0x43ba <sysclk_enable_module>
    3790:	23 c0       	rjmp	.+70     	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	80 38       	cpi	r24, 0x80	; 128
    3798:	94 40       	sbci	r25, 0x04	; 4
    379a:	21 f4       	brne	.+8      	; 0x37a4 <sysclk_enable_peripheral_clock+0x2a2>
    379c:	60 e4       	ldi	r22, 0x40	; 64
    379e:	83 e0       	ldi	r24, 0x03	; 3
    37a0:	0c d6       	rcall	.+3096   	; 0x43ba <sysclk_enable_module>
    37a2:	1a c0       	rjmp	.+52     	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
    37a8:	80 39       	cpi	r24, 0x90	; 144
    37aa:	94 40       	sbci	r25, 0x04	; 4
    37ac:	21 f4       	brne	.+8      	; 0x37b6 <sysclk_enable_peripheral_clock+0x2b4>
    37ae:	60 e4       	ldi	r22, 0x40	; 64
    37b0:	84 e0       	ldi	r24, 0x04	; 4
    37b2:	03 d6       	rcall	.+3078   	; 0x43ba <sysclk_enable_module>
    37b4:	11 c0       	rjmp	.+34     	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ba:	80 3a       	cpi	r24, 0xA0	; 160
    37bc:	94 40       	sbci	r25, 0x04	; 4
    37be:	21 f4       	brne	.+8      	; 0x37c8 <sysclk_enable_peripheral_clock+0x2c6>
    37c0:	60 e4       	ldi	r22, 0x40	; 64
    37c2:	85 e0       	ldi	r24, 0x05	; 5
    37c4:	fa d5       	rcall	.+3060   	; 0x43ba <sysclk_enable_module>
    37c6:	08 c0       	rjmp	.+16     	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	80 3b       	cpi	r24, 0xB0	; 176
    37ce:	94 40       	sbci	r25, 0x04	; 4
    37d0:	19 f4       	brne	.+6      	; 0x37d8 <sysclk_enable_peripheral_clock+0x2d6>
    37d2:	60 e4       	ldi	r22, 0x40	; 64
    37d4:	86 e0       	ldi	r24, 0x06	; 6
    37d6:	f1 d5       	rcall	.+3042   	; 0x43ba <sysclk_enable_module>
    37d8:	00 00       	nop
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	08 95       	ret

000037e4 <__portable_avr_delay_cycles>:
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <__portable_avr_delay_cycles+0xa>
    37e6:	61 50       	subi	r22, 0x01	; 1
    37e8:	71 09       	sbc	r23, r1
    37ea:	81 09       	sbc	r24, r1
    37ec:	91 09       	sbc	r25, r1
    37ee:	61 15       	cp	r22, r1
    37f0:	71 05       	cpc	r23, r1
    37f2:	81 05       	cpc	r24, r1
    37f4:	91 05       	cpc	r25, r1
    37f6:	b9 f7       	brne	.-18     	; 0x37e6 <__portable_avr_delay_cycles+0x2>
    37f8:	08 95       	ret

000037fa <twi_master_read>:
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <twi_master_read+0x6>
    3800:	1f 92       	push	r1
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	89 83       	std	Y+1, r24	; 0x01
    3808:	9a 83       	std	Y+2, r25	; 0x02
    380a:	6b 83       	std	Y+3, r22	; 0x03
    380c:	7c 83       	std	Y+4, r23	; 0x04
    380e:	2b 81       	ldd	r18, Y+3	; 0x03
    3810:	3c 81       	ldd	r19, Y+4	; 0x04
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	9a 81       	ldd	r25, Y+2	; 0x02
    3816:	41 e0       	ldi	r20, 0x01	; 1
    3818:	b9 01       	movw	r22, r18
    381a:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <twi_master_transfer>
    381e:	24 96       	adiw	r28, 0x04	; 4
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	08 95       	ret

0000382a <twi_master_write>:
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	00 d0       	rcall	.+0      	; 0x3830 <twi_master_write+0x6>
    3830:	1f 92       	push	r1
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	89 83       	std	Y+1, r24	; 0x01
    3838:	9a 83       	std	Y+2, r25	; 0x02
    383a:	6b 83       	std	Y+3, r22	; 0x03
    383c:	7c 83       	std	Y+4, r23	; 0x04
    383e:	2b 81       	ldd	r18, Y+3	; 0x03
    3840:	3c 81       	ldd	r19, Y+4	; 0x04
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	9a 81       	ldd	r25, Y+2	; 0x02
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	b9 01       	movw	r22, r18
    384a:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <twi_master_transfer>
    384e:	24 96       	adiw	r28, 0x04	; 4
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	08 95       	ret

0000385a <twi_master_enable>:
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	1f 92       	push	r1
    3860:	1f 92       	push	r1
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	9a 83       	std	Y+2, r25	; 0x02
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	9a 81       	ldd	r25, Y+2	; 0x02
    386e:	fc 01       	movw	r30, r24
    3870:	81 81       	ldd	r24, Z+1	; 0x01
    3872:	28 2f       	mov	r18, r24
    3874:	28 60       	ori	r18, 0x08	; 8
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	fc 01       	movw	r30, r24
    387c:	21 83       	std	Z+1, r18	; 0x01
    387e:	00 00       	nop
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	df 91       	pop	r29
    3886:	cf 91       	pop	r28
    3888:	08 95       	ret

0000388a <imu_init>:
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	2c 97       	sbiw	r28, 0x0c	; 12
    3894:	cd bf       	out	0x3d, r28	; 61
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	60 e4       	ldi	r22, 0x40	; 64
    389a:	86 e0       	ldi	r24, 0x06	; 6
    389c:	8e d5       	rcall	.+2844   	; 0x43ba <sysclk_enable_module>
    389e:	80 eb       	ldi	r24, 0xB0	; 176
    38a0:	94 e0       	ldi	r25, 0x04	; 4
    38a2:	2f de       	rcall	.-930    	; 0x3502 <sysclk_enable_peripheral_clock>
    38a4:	29 e0       	ldi	r18, 0x09	; 9
    38a6:	ce 01       	movw	r24, r28
    38a8:	03 96       	adiw	r24, 0x03	; 3
    38aa:	fc 01       	movw	r30, r24
    38ac:	32 2f       	mov	r19, r18
    38ae:	11 92       	st	Z+, r1
    38b0:	3a 95       	dec	r19
    38b2:	e9 f7       	brne	.-6      	; 0x38ae <imu_init+0x24>
    38b4:	80 e8       	ldi	r24, 0x80	; 128
    38b6:	9a e1       	ldi	r25, 0x1A	; 26
    38b8:	a6 e0       	ldi	r26, 0x06	; 6
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	8b 83       	std	Y+3, r24	; 0x03
    38be:	9c 83       	std	Y+4, r25	; 0x04
    38c0:	ad 83       	std	Y+5, r26	; 0x05
    38c2:	be 83       	std	Y+6, r27	; 0x06
    38c4:	83 e2       	ldi	r24, 0x23	; 35
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	a0 e0       	ldi	r26, 0x00	; 0
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	8f 83       	std	Y+7, r24	; 0x07
    38ce:	98 87       	std	Y+8, r25	; 0x08
    38d0:	a9 87       	std	Y+9, r26	; 0x09
    38d2:	ba 87       	std	Y+10, r27	; 0x0a
    38d4:	80 eb       	ldi	r24, 0xB0	; 176
    38d6:	94 e0       	ldi	r25, 0x04	; 4
    38d8:	14 de       	rcall	.-984    	; 0x3502 <sysclk_enable_peripheral_clock>
    38da:	ce 01       	movw	r24, r28
    38dc:	03 96       	adiw	r24, 0x03	; 3
    38de:	bc 01       	movw	r22, r24
    38e0:	80 eb       	ldi	r24, 0xB0	; 176
    38e2:	94 e0       	ldi	r25, 0x04	; 4
    38e4:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <twi_master_init>
    38e8:	80 eb       	ldi	r24, 0xB0	; 176
    38ea:	94 e0       	ldi	r25, 0x04	; 4
    38ec:	b6 df       	rcall	.-148    	; 0x385a <twi_master_enable>
    38ee:	81 e4       	ldi	r24, 0x41	; 65
    38f0:	9d e1       	ldi	r25, 0x1D	; 29
    38f2:	80 93 07 23 	sts	0x2307, r24	; 0x802307 <bno055+0x9>
    38f6:	90 93 08 23 	sts	0x2308, r25	; 0x802308 <bno055+0xa>
    38fa:	83 ed       	ldi	r24, 0xD3	; 211
    38fc:	9d e1       	ldi	r25, 0x1D	; 29
    38fe:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <bno055+0xb>
    3902:	90 93 0a 23 	sts	0x230A, r25	; 0x80230a <bno055+0xc>
    3906:	87 e5       	ldi	r24, 0x57	; 87
    3908:	9e e1       	ldi	r25, 0x1E	; 30
    390a:	80 93 0b 23 	sts	0x230B, r24	; 0x80230b <bno055+0xd>
    390e:	90 93 0c 23 	sts	0x230C, r25	; 0x80230c <bno055+0xe>
    3912:	88 e2       	ldi	r24, 0x28	; 40
    3914:	80 93 06 23 	sts	0x2306, r24	; 0x802306 <bno055+0x8>
    3918:	8e ef       	ldi	r24, 0xFE	; 254
    391a:	92 e2       	ldi	r25, 0x22	; 34
    391c:	0e 94 2b 12 	call	0x2456	; 0x2456 <bno055_init>
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	88 23       	and	r24, r24
    3926:	a1 f0       	breq	.+40     	; 0x3950 <imu_init+0xc6>
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	08 2e       	mov	r0, r24
    392c:	00 0c       	add	r0, r0
    392e:	99 0b       	sbc	r25, r25
    3930:	29 2f       	mov	r18, r25
    3932:	2f 93       	push	r18
    3934:	8f 93       	push	r24
    3936:	83 e4       	ldi	r24, 0x43	; 67
    3938:	90 e2       	ldi	r25, 0x20	; 32
    393a:	89 2f       	mov	r24, r25
    393c:	8f 93       	push	r24
    393e:	83 e4       	ldi	r24, 0x43	; 67
    3940:	90 e2       	ldi	r25, 0x20	; 32
    3942:	8f 93       	push	r24
    3944:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	0f dd       	rcall	.-1506   	; 0x3372 <bno055_set_power_mode>
    3954:	8c e0       	ldi	r24, 0x0C	; 12
    3956:	18 dc       	rcall	.-2000   	; 0x3188 <bno055_set_operation_mode>
    3958:	8a 83       	std	Y+2, r24	; 0x02
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	88 23       	and	r24, r24
    395e:	a1 f0       	breq	.+40     	; 0x3988 <imu_init+0xfe>
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	08 2e       	mov	r0, r24
    3964:	00 0c       	add	r0, r0
    3966:	99 0b       	sbc	r25, r25
    3968:	29 2f       	mov	r18, r25
    396a:	2f 93       	push	r18
    396c:	8f 93       	push	r24
    396e:	87 e6       	ldi	r24, 0x67	; 103
    3970:	90 e2       	ldi	r25, 0x20	; 32
    3972:	89 2f       	mov	r24, r25
    3974:	8f 93       	push	r24
    3976:	87 e6       	ldi	r24, 0x67	; 103
    3978:	90 e2       	ldi	r25, 0x20	; 32
    397a:	8f 93       	push	r24
    397c:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	1c 86       	std	Y+12, r1	; 0x0c
    398a:	ce 01       	movw	r24, r28
    398c:	0c 96       	adiw	r24, 0x0c	; 12
    398e:	a6 db       	rcall	.-2228   	; 0x30dc <bno055_get_operation_mode>
    3990:	8c 85       	ldd	r24, Y+12	; 0x0c
    3992:	8c 30       	cpi	r24, 0x0C	; 12
    3994:	f1 f0       	breq	.+60     	; 0x39d2 <imu_init+0x148>
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	28 2f       	mov	r18, r24
    399a:	88 0f       	add	r24, r24
    399c:	33 0b       	sbc	r19, r19
    399e:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	43 2f       	mov	r20, r19
    39a6:	4f 93       	push	r20
    39a8:	2f 93       	push	r18
    39aa:	1f 92       	push	r1
    39ac:	2c e0       	ldi	r18, 0x0C	; 12
    39ae:	2f 93       	push	r18
    39b0:	29 2f       	mov	r18, r25
    39b2:	2f 93       	push	r18
    39b4:	8f 93       	push	r24
    39b6:	85 e8       	ldi	r24, 0x85	; 133
    39b8:	90 e2       	ldi	r25, 0x20	; 32
    39ba:	89 2f       	mov	r24, r25
    39bc:	8f 93       	push	r24
    39be:	85 e8       	ldi	r24, 0x85	; 133
    39c0:	90 e2       	ldi	r25, 0x20	; 32
    39c2:	8f 93       	push	r24
    39c4:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    39c8:	8d b7       	in	r24, 0x3d	; 61
    39ca:	9e b7       	in	r25, 0x3e	; 62
    39cc:	08 96       	adiw	r24, 0x08	; 8
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	8e ec       	ldi	r24, 0xCE	; 206
    39d4:	90 e2       	ldi	r25, 0x20	; 32
    39d6:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
    39da:	00 00       	nop
    39dc:	2c 96       	adiw	r28, 0x0c	; 12
    39de:	cd bf       	out	0x3d, r28	; 61
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	08 95       	ret

000039e8 <imu_update>:
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	8d e0       	ldi	r24, 0x0D	; 13
    39f2:	93 e2       	ldi	r25, 0x23	; 35
    39f4:	ab d8       	rcall	.-3754   	; 0x2b4c <bno055_convert_double_linear_accel_xyz_msq>
    39f6:	89 e1       	ldi	r24, 0x19	; 25
    39f8:	93 e2       	ldi	r25, 0x23	; 35
    39fa:	16 d8       	rcall	.-4052   	; 0x2a28 <bno055_convert_double_euler_hpr_deg>
    39fc:	86 e2       	ldi	r24, 0x26	; 38
    39fe:	93 e2       	ldi	r25, 0x23	; 35
    3a00:	75 d9       	rcall	.-3350   	; 0x2cec <bno055_get_accel_calib_stat>
    3a02:	88 e2       	ldi	r24, 0x28	; 40
    3a04:	93 e2       	ldi	r25, 0x23	; 35
    3a06:	cf d9       	rcall	.-3170   	; 0x2da6 <bno055_get_gyro_calib_stat>
    3a08:	85 e2       	ldi	r24, 0x25	; 37
    3a0a:	93 e2       	ldi	r25, 0x23	; 35
    3a0c:	19 d9       	rcall	.-3534   	; 0x2c40 <bno055_get_mag_calib_stat>
    3a0e:	87 e2       	ldi	r24, 0x27	; 39
    3a10:	93 e2       	ldi	r25, 0x23	; 35
    3a12:	2a da       	rcall	.-2988   	; 0x2e68 <bno055_get_sys_calib_stat>
    3a14:	00 00       	nop
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	08 95       	ret

00003a1c <imu_roll>:
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <bno055_euler+0x4>
    3a28:	90 91 1e 23 	lds	r25, 0x231E	; 0x80231e <bno055_euler+0x5>
    3a2c:	a0 91 1f 23 	lds	r26, 0x231F	; 0x80231f <bno055_euler+0x6>
    3a30:	b0 91 20 23 	lds	r27, 0x2320	; 0x802320 <bno055_euler+0x7>
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	08 95       	ret

00003a3e <imu_pitch>:
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	80 91 21 23 	lds	r24, 0x2321	; 0x802321 <bno055_euler+0x8>
    3a4a:	90 91 22 23 	lds	r25, 0x2322	; 0x802322 <bno055_euler+0x9>
    3a4e:	a0 91 23 23 	lds	r26, 0x2323	; 0x802323 <bno055_euler+0xa>
    3a52:	b0 91 24 23 	lds	r27, 0x2324	; 0x802324 <bno055_euler+0xb>
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	08 95       	ret

00003a60 <imu_heading>:
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <bno055_euler>
    3a6c:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <bno055_euler+0x1>
    3a70:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <bno055_euler+0x2>
    3a74:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <bno055_euler+0x3>
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	08 95       	ret

00003a82 <BNO055_I2C_bus_write>:
 *	\param reg_data : It is a value hold in the array,
 *		will be used for write the value into the register
 *	\param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	c2 55       	subi	r28, 0x52	; 82
    3a8c:	d1 09       	sbc	r29, r1
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	fe 01       	movw	r30, r28
    3a94:	e2 5b       	subi	r30, 0xB2	; 178
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 83       	st	Z, r24
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	81 5b       	subi	r24, 0xB1	; 177
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	60 83       	st	Z, r22
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	80 5b       	subi	r24, 0xB0	; 176
    3aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aaa:	fc 01       	movw	r30, r24
    3aac:	40 83       	st	Z, r20
    3aae:	51 83       	std	Z+1, r21	; 0x01
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	8e 5a       	subi	r24, 0xAE	; 174
    3ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	20 83       	st	Z, r18
	s32 BNO055_iERROR = BNO055_INIT_VALUE;
    3aba:	19 82       	std	Y+1, r1	; 0x01
    3abc:	1a 82       	std	Y+2, r1	; 0x02
// 	{
// 		array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] =
// 			*(reg_data + stringpos);
// 	}

	if(cnt > 1)
    3abe:	ce 01       	movw	r24, r28
    3ac0:	8e 5a       	subi	r24, 0xAE	; 174
    3ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	80 81       	ld	r24, Z
    3ac8:	82 30       	cpi	r24, 0x02	; 2
    3aca:	58 f0       	brcs	.+22     	; 0x3ae2 <BNO055_I2C_bus_write+0x60>
	{
		printf("The BNO055 Actually does write more than one byte at a time, isn't that surprising.\nI guess it's time to fix the I2C write hack then.");
    3acc:	8f ed       	ldi	r24, 0xDF	; 223
    3ace:	90 e2       	ldi	r25, 0x20	; 32
    3ad0:	89 2f       	mov	r24, r25
    3ad2:	8f 93       	push	r24
    3ad4:	8f ed       	ldi	r24, 0xDF	; 223
    3ad6:	90 e2       	ldi	r25, 0x20	; 32
    3ad8:	8f 93       	push	r24
    3ada:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
	}

	cnt = cnt + 1;	// BNO055 Discards the first write, so we make the first value 0
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	8e 5a       	subi	r24, 0xAE	; 174
    3ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae8:	9e 01       	movw	r18, r28
    3aea:	2e 5a       	subi	r18, 0xAE	; 174
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	f9 01       	movw	r30, r18
    3af0:	20 81       	ld	r18, Z
    3af2:	2f 5f       	subi	r18, 0xFF	; 255
    3af4:	fc 01       	movw	r30, r24
    3af6:	20 83       	st	Z, r18
	array[0] = 0;
    3af8:	1b 82       	std	Y+3, r1	; 0x03
	array[1] = reg_data[0]; // This breaks if it ever sends more than one byte at a time, but I don't think it does;
    3afa:	ce 01       	movw	r24, r28
    3afc:	80 5b       	subi	r24, 0xB0	; 176
    3afe:	9f 4f       	sbci	r25, 0xFF	; 255
    3b00:	fc 01       	movw	r30, r24
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	fc 01       	movw	r30, r24
    3b08:	80 81       	ld	r24, Z
    3b0a:	8c 83       	std	Y+4, r24	; 0x04
	*/

	

	twi_package_t readbno055;
	readbno055.addr[0]	   = reg_addr-1; // it's minus one because the BNO055 discards the first write, and the second write one is at the next address 
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	81 5b       	subi	r24, 0xB1	; 177
    3b10:	9f 4f       	sbci	r25, 0xFF	; 255
    3b12:	fc 01       	movw	r30, r24
    3b14:	80 81       	ld	r24, Z
    3b16:	2f ef       	ldi	r18, 0xFF	; 255
    3b18:	28 0f       	add	r18, r24
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	8d 5b       	subi	r24, 0xBD	; 189
    3b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b20:	fc 01       	movw	r30, r24
    3b22:	21 83       	std	Z+1, r18	; 0x01
	readbno055.addr_length = 1;
    3b24:	ce 01       	movw	r24, r28
    3b26:	8d 5b       	subi	r24, 0xBD	; 189
    3b28:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2a:	21 e0       	ldi	r18, 0x01	; 1
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	fc 01       	movw	r30, r24
    3b30:	24 83       	std	Z+4, r18	; 0x04
    3b32:	35 83       	std	Z+5, r19	; 0x05
	readbno055.chip        = dev_addr;
    3b34:	ce 01       	movw	r24, r28
    3b36:	82 5b       	subi	r24, 0xB2	; 178
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	20 81       	ld	r18, Z
    3b3e:	ce 01       	movw	r24, r28
    3b40:	8d 5b       	subi	r24, 0xBD	; 189
    3b42:	9f 4f       	sbci	r25, 0xFF	; 255
    3b44:	fc 01       	movw	r30, r24
    3b46:	20 83       	st	Z, r18
	readbno055.buffer      = array;
    3b48:	ce 01       	movw	r24, r28
    3b4a:	8d 5b       	subi	r24, 0xBD	; 189
    3b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4e:	9e 01       	movw	r18, r28
    3b50:	2d 5f       	subi	r18, 0xFD	; 253
    3b52:	3f 4f       	sbci	r19, 0xFF	; 255
    3b54:	fc 01       	movw	r30, r24
    3b56:	26 83       	std	Z+6, r18	; 0x06
    3b58:	37 83       	std	Z+7, r19	; 0x07
	readbno055.length      = cnt;
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	8e 5a       	subi	r24, 0xAE	; 174
    3b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b60:	fc 01       	movw	r30, r24
    3b62:	80 81       	ld	r24, Z
    3b64:	28 2f       	mov	r18, r24
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	ce 01       	movw	r24, r28
    3b6a:	8d 5b       	subi	r24, 0xBD	; 189
    3b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6e:	fc 01       	movw	r30, r24
    3b70:	20 87       	std	Z+8, r18	; 0x08
    3b72:	31 87       	std	Z+9, r19	; 0x09
	readbno055.no_wait     = false;
    3b74:	ce 01       	movw	r24, r28
    3b76:	8d 5b       	subi	r24, 0xBD	; 189
    3b78:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	12 86       	std	Z+10, r1	; 0x0a


	BNO055_iERROR = (s8)twi_master_write(&IMU_TWI,&readbno055);
    3b7e:	ce 01       	movw	r24, r28
    3b80:	8d 5b       	subi	r24, 0xBD	; 189
    3b82:	9f 4f       	sbci	r25, 0xFF	; 255
    3b84:	bc 01       	movw	r22, r24
    3b86:	80 eb       	ldi	r24, 0xB0	; 176
    3b88:	94 e0       	ldi	r25, 0x04	; 4
    3b8a:	4f de       	rcall	.-866    	; 0x382a <twi_master_write>
    3b8c:	08 2e       	mov	r0, r24
    3b8e:	00 0c       	add	r0, r0
    3b90:	99 0b       	sbc	r25, r25
    3b92:	89 83       	std	Y+1, r24	; 0x01
    3b94:	9a 83       	std	Y+2, r25	; 0x02
// 	{
// 		printf(" %x, ",array[i]);
// 	}
// 	printf("\n");

	return (s8)BNO055_iERROR;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b98:	ce 5a       	subi	r28, 0xAE	; 174
    3b9a:	df 4f       	sbci	r29, 0xFF	; 255
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	08 95       	ret

00003ba6 <BNO055_I2C_bus_read>:
 *	\param reg_data : This data read from the sensor,
 *   which is hold in an array
 *	\param cnt : The no of byte of data to be read
 */
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	c2 55       	subi	r28, 0x52	; 82
    3bb0:	d1 09       	sbc	r29, r1
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e2 5b       	subi	r30, 0xB2	; 178
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 83       	st	Z, r24
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	81 5b       	subi	r24, 0xB1	; 177
    3bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	60 83       	st	Z, r22
    3bc8:	ce 01       	movw	r24, r28
    3bca:	80 5b       	subi	r24, 0xB0	; 176
    3bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bce:	fc 01       	movw	r30, r24
    3bd0:	40 83       	st	Z, r20
    3bd2:	51 83       	std	Z+1, r21	; 0x01
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	8e 5a       	subi	r24, 0xAE	; 174
    3bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bda:	fc 01       	movw	r30, r24
    3bdc:	20 83       	st	Z, r18
	s32 BNO055_iERROR = BNO055_INIT_VALUE;
    3bde:	19 82       	std	Y+1, r1	; 0x01
    3be0:	1a 82       	std	Y+2, r1	; 0x02
	u8 array[I2C_BUFFER_LEN] = {BNO055_INIT_VALUE};
    3be2:	20 e4       	ldi	r18, 0x40	; 64
    3be4:	ce 01       	movw	r24, r28
    3be6:	03 96       	adiw	r24, 0x03	; 3
    3be8:	fc 01       	movw	r30, r24
    3bea:	32 2f       	mov	r19, r18
    3bec:	11 92       	st	Z+, r1
    3bee:	3a 95       	dec	r19
    3bf0:	e9 f7       	brne	.-6      	; 0x3bec <BNO055_I2C_bus_read+0x46>
     * In the driver BNO055_SUCCESS defined as 0
     * and FAILURE defined as -1
	 */

	twi_package_t readbno055;
	readbno055.addr[0]	   = reg_addr;
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	8d 5b       	subi	r24, 0xBD	; 189
    3bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf8:	9e 01       	movw	r18, r28
    3bfa:	21 5b       	subi	r18, 0xB1	; 177
    3bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfe:	f9 01       	movw	r30, r18
    3c00:	20 81       	ld	r18, Z
    3c02:	fc 01       	movw	r30, r24
    3c04:	21 83       	std	Z+1, r18	; 0x01
	readbno055.addr_length = 1;
    3c06:	ce 01       	movw	r24, r28
    3c08:	8d 5b       	subi	r24, 0xBD	; 189
    3c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0c:	21 e0       	ldi	r18, 0x01	; 1
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	fc 01       	movw	r30, r24
    3c12:	24 83       	std	Z+4, r18	; 0x04
    3c14:	35 83       	std	Z+5, r19	; 0x05
	readbno055.chip        = dev_addr;
    3c16:	ce 01       	movw	r24, r28
    3c18:	82 5b       	subi	r24, 0xB2	; 178
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	20 81       	ld	r18, Z
    3c20:	ce 01       	movw	r24, r28
    3c22:	8d 5b       	subi	r24, 0xBD	; 189
    3c24:	9f 4f       	sbci	r25, 0xFF	; 255
    3c26:	fc 01       	movw	r30, r24
    3c28:	20 83       	st	Z, r18
	readbno055.buffer      = array;
    3c2a:	ce 01       	movw	r24, r28
    3c2c:	8d 5b       	subi	r24, 0xBD	; 189
    3c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c30:	9e 01       	movw	r18, r28
    3c32:	2d 5f       	subi	r18, 0xFD	; 253
    3c34:	3f 4f       	sbci	r19, 0xFF	; 255
    3c36:	fc 01       	movw	r30, r24
    3c38:	26 83       	std	Z+6, r18	; 0x06
    3c3a:	37 83       	std	Z+7, r19	; 0x07
	readbno055.length      = cnt;
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	8e 5a       	subi	r24, 0xAE	; 174
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	fc 01       	movw	r30, r24
    3c44:	80 81       	ld	r24, Z
    3c46:	28 2f       	mov	r18, r24
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	8d 5b       	subi	r24, 0xBD	; 189
    3c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c50:	fc 01       	movw	r30, r24
    3c52:	20 87       	std	Z+8, r18	; 0x08
    3c54:	31 87       	std	Z+9, r19	; 0x09
	readbno055.no_wait     = false;
    3c56:	ce 01       	movw	r24, r28
    3c58:	8d 5b       	subi	r24, 0xBD	; 189
    3c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	12 86       	std	Z+10, r1	; 0x0a

	BNO055_iERROR = (int8_t) twi_master_read(&IMU_TWI, &readbno055);
    3c60:	ce 01       	movw	r24, r28
    3c62:	8d 5b       	subi	r24, 0xBD	; 189
    3c64:	9f 4f       	sbci	r25, 0xFF	; 255
    3c66:	bc 01       	movw	r22, r24
    3c68:	80 eb       	ldi	r24, 0xB0	; 176
    3c6a:	94 e0       	ldi	r25, 0x04	; 4
    3c6c:	c6 dd       	rcall	.-1140   	; 0x37fa <twi_master_read>
    3c6e:	08 2e       	mov	r0, r24
    3c70:	00 0c       	add	r0, r0
    3c72:	99 0b       	sbc	r25, r25
    3c74:	89 83       	std	Y+1, r24	; 0x01
    3c76:	9a 83       	std	Y+2, r25	; 0x02
	memcpy(reg_data, array, cnt);
    3c78:	ce 01       	movw	r24, r28
    3c7a:	8e 5a       	subi	r24, 0xAE	; 174
    3c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7e:	fc 01       	movw	r30, r24
    3c80:	80 81       	ld	r24, Z
    3c82:	48 2f       	mov	r20, r24
    3c84:	50 e0       	ldi	r21, 0x00	; 0
    3c86:	9e 01       	movw	r18, r28
    3c88:	2d 5f       	subi	r18, 0xFD	; 253
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	80 5b       	subi	r24, 0xB0	; 176
    3c90:	9f 4f       	sbci	r25, 0xFF	; 255
    3c92:	fc 01       	movw	r30, r24
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	b9 01       	movw	r22, r18
    3c9a:	0e 94 f7 4d 	call	0x9bee	; 0x9bee <memcpy>
	
/*	printf("I2C Read: %x\n",array[0]);*/

// 	for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
// 		*(reg_data + stringpos) = array[stringpos];
	return (s8)BNO055_iERROR;
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ca0:	ce 5a       	subi	r28, 0xAE	; 174
    3ca2:	df 4f       	sbci	r29, 0xFF	; 255
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	08 95       	ret

00003cae <BNO055_delay_msek>:

void BNO055_delay_msek(u32 msek)
{
    3cae:	2f 92       	push	r2
    3cb0:	3f 92       	push	r3
    3cb2:	4f 92       	push	r4
    3cb4:	5f 92       	push	r5
    3cb6:	6f 92       	push	r6
    3cb8:	7f 92       	push	r7
    3cba:	8f 92       	push	r8
    3cbc:	9f 92       	push	r9
    3cbe:	af 92       	push	r10
    3cc0:	bf 92       	push	r11
    3cc2:	cf 92       	push	r12
    3cc4:	df 92       	push	r13
    3cc6:	ef 92       	push	r14
    3cc8:	ff 92       	push	r15
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	1f 92       	push	r1
    3cd4:	1f 92       	push	r1
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
	delay_ms(msek);
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce2:	89 2b       	or	r24, r25
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <BNO055_delay_msek+0x3a>
    3ce6:	97 c0       	rjmp	.+302    	; 0x3e16 <BNO055_delay_msek+0x168>
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
    3cec:	1c 01       	movw	r2, r24
    3cee:	41 2c       	mov	r4, r1
    3cf0:	51 2c       	mov	r5, r1
    3cf2:	61 2c       	mov	r6, r1
    3cf4:	71 2c       	mov	r7, r1
    3cf6:	43 01       	movw	r8, r6
    3cf8:	f8 db       	rcall	.-2064   	; 0x34ea <sysclk_get_cpu_hz>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	9c 01       	movw	r18, r24
    3d00:	ad 01       	movw	r20, r26
    3d02:	60 e0       	ldi	r22, 0x00	; 0
    3d04:	70 e0       	ldi	r23, 0x00	; 0
    3d06:	cb 01       	movw	r24, r22
    3d08:	a2 2e       	mov	r10, r18
    3d0a:	b3 2e       	mov	r11, r19
    3d0c:	c4 2e       	mov	r12, r20
    3d0e:	d5 2e       	mov	r13, r21
    3d10:	e6 2e       	mov	r14, r22
    3d12:	f7 2e       	mov	r15, r23
    3d14:	08 2f       	mov	r16, r24
    3d16:	19 2f       	mov	r17, r25
    3d18:	22 2d       	mov	r18, r2
    3d1a:	33 2d       	mov	r19, r3
    3d1c:	44 2d       	mov	r20, r4
    3d1e:	55 2d       	mov	r21, r5
    3d20:	66 2d       	mov	r22, r6
    3d22:	77 2d       	mov	r23, r7
    3d24:	88 2d       	mov	r24, r8
    3d26:	99 2d       	mov	r25, r9
    3d28:	0e 94 0a 4b 	call	0x9614	; 0x9614 <__muldi3>
    3d2c:	a2 2e       	mov	r10, r18
    3d2e:	b3 2e       	mov	r11, r19
    3d30:	c4 2e       	mov	r12, r20
    3d32:	d5 2e       	mov	r13, r21
    3d34:	e6 2e       	mov	r14, r22
    3d36:	f7 2e       	mov	r15, r23
    3d38:	08 2f       	mov	r16, r24
    3d3a:	19 2f       	mov	r17, r25
    3d3c:	2a 2c       	mov	r2, r10
    3d3e:	3b 2c       	mov	r3, r11
    3d40:	4c 2c       	mov	r4, r12
    3d42:	5d 2c       	mov	r5, r13
    3d44:	6e 2c       	mov	r6, r14
    3d46:	7f 2c       	mov	r7, r15
    3d48:	80 2e       	mov	r8, r16
    3d4a:	91 2e       	mov	r9, r17
    3d4c:	0f 2e       	mov	r0, r31
    3d4e:	f6 e0       	ldi	r31, 0x06	; 6
    3d50:	af 2e       	mov	r10, r31
    3d52:	f0 2d       	mov	r31, r0
    3d54:	b1 2c       	mov	r11, r1
    3d56:	c1 2c       	mov	r12, r1
    3d58:	d1 2c       	mov	r13, r1
    3d5a:	e1 2c       	mov	r14, r1
    3d5c:	f1 2c       	mov	r15, r1
    3d5e:	00 e0       	ldi	r16, 0x00	; 0
    3d60:	10 e0       	ldi	r17, 0x00	; 0
    3d62:	22 2d       	mov	r18, r2
    3d64:	33 2d       	mov	r19, r3
    3d66:	44 2d       	mov	r20, r4
    3d68:	55 2d       	mov	r21, r5
    3d6a:	66 2d       	mov	r22, r6
    3d6c:	77 2d       	mov	r23, r7
    3d6e:	88 2d       	mov	r24, r8
    3d70:	99 2d       	mov	r25, r9
    3d72:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__udivdi3>
    3d76:	22 2e       	mov	r2, r18
    3d78:	33 2e       	mov	r3, r19
    3d7a:	44 2e       	mov	r4, r20
    3d7c:	55 2e       	mov	r5, r21
    3d7e:	66 2e       	mov	r6, r22
    3d80:	77 2e       	mov	r7, r23
    3d82:	88 2e       	mov	r8, r24
    3d84:	99 2e       	mov	r9, r25
    3d86:	a2 2c       	mov	r10, r2
    3d88:	b3 2c       	mov	r11, r3
    3d8a:	c4 2c       	mov	r12, r4
    3d8c:	d5 2c       	mov	r13, r5
    3d8e:	e6 2c       	mov	r14, r6
    3d90:	f7 2c       	mov	r15, r7
    3d92:	08 2d       	mov	r16, r8
    3d94:	19 2d       	mov	r17, r9
    3d96:	2a 2d       	mov	r18, r10
    3d98:	3b 2d       	mov	r19, r11
    3d9a:	4c 2d       	mov	r20, r12
    3d9c:	5d 2d       	mov	r21, r13
    3d9e:	6e 2d       	mov	r22, r14
    3da0:	7f 2d       	mov	r23, r15
    3da2:	80 2f       	mov	r24, r16
    3da4:	91 2f       	mov	r25, r17
    3da6:	29 51       	subi	r18, 0x19	; 25
    3da8:	3c 4f       	sbci	r19, 0xFC	; 252
    3daa:	4f 4f       	sbci	r20, 0xFF	; 255
    3dac:	5f 4f       	sbci	r21, 0xFF	; 255
    3dae:	6f 4f       	sbci	r22, 0xFF	; 255
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	8f 4f       	sbci	r24, 0xFF	; 255
    3db4:	9f 4f       	sbci	r25, 0xFF	; 255
    3db6:	a2 2e       	mov	r10, r18
    3db8:	b3 2e       	mov	r11, r19
    3dba:	c4 2e       	mov	r12, r20
    3dbc:	d5 2e       	mov	r13, r21
    3dbe:	e6 2e       	mov	r14, r22
    3dc0:	f7 2e       	mov	r15, r23
    3dc2:	08 2f       	mov	r16, r24
    3dc4:	19 2f       	mov	r17, r25
    3dc6:	2a 2d       	mov	r18, r10
    3dc8:	3b 2d       	mov	r19, r11
    3dca:	4c 2d       	mov	r20, r12
    3dcc:	5d 2d       	mov	r21, r13
    3dce:	6e 2d       	mov	r22, r14
    3dd0:	7f 2d       	mov	r23, r15
    3dd2:	80 2f       	mov	r24, r16
    3dd4:	91 2f       	mov	r25, r17
    3dd6:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <__floatundisf>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	4a e7       	ldi	r20, 0x7A	; 122
    3de4:	54 e4       	ldi	r21, 0x44	; 68
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <__fixunssfdi>
    3dfa:	a2 2e       	mov	r10, r18
    3dfc:	b3 2e       	mov	r11, r19
    3dfe:	c4 2e       	mov	r12, r20
    3e00:	d5 2e       	mov	r13, r21
    3e02:	e6 2e       	mov	r14, r22
    3e04:	f7 2e       	mov	r15, r23
    3e06:	08 2f       	mov	r16, r24
    3e08:	19 2f       	mov	r17, r25
    3e0a:	d6 01       	movw	r26, r12
    3e0c:	c5 01       	movw	r24, r10
    3e0e:	bc 01       	movw	r22, r24
    3e10:	cd 01       	movw	r24, r26
    3e12:	e8 dc       	rcall	.-1584   	; 0x37e4 <__portable_avr_delay_cycles>
    3e14:	6c c0       	rjmp	.+216    	; 0x3eee <BNO055_delay_msek+0x240>
	return (s8)BNO055_iERROR;
}

void BNO055_delay_msek(u32 msek)
{
	delay_ms(msek);
    3e16:	69 db       	rcall	.-2350   	; 0x34ea <sysclk_get_cpu_hz>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	1c 01       	movw	r2, r24
    3e1e:	2d 01       	movw	r4, r26
    3e20:	61 2c       	mov	r6, r1
    3e22:	71 2c       	mov	r7, r1
    3e24:	43 01       	movw	r8, r6
    3e26:	0f 2e       	mov	r0, r31
    3e28:	f6 e0       	ldi	r31, 0x06	; 6
    3e2a:	af 2e       	mov	r10, r31
    3e2c:	f0 2d       	mov	r31, r0
    3e2e:	b1 2c       	mov	r11, r1
    3e30:	c1 2c       	mov	r12, r1
    3e32:	d1 2c       	mov	r13, r1
    3e34:	e1 2c       	mov	r14, r1
    3e36:	f1 2c       	mov	r15, r1
    3e38:	00 e0       	ldi	r16, 0x00	; 0
    3e3a:	10 e0       	ldi	r17, 0x00	; 0
    3e3c:	22 2d       	mov	r18, r2
    3e3e:	33 2d       	mov	r19, r3
    3e40:	44 2d       	mov	r20, r4
    3e42:	55 2d       	mov	r21, r5
    3e44:	66 2d       	mov	r22, r6
    3e46:	77 2d       	mov	r23, r7
    3e48:	88 2d       	mov	r24, r8
    3e4a:	99 2d       	mov	r25, r9
    3e4c:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__udivdi3>
    3e50:	22 2e       	mov	r2, r18
    3e52:	33 2e       	mov	r3, r19
    3e54:	44 2e       	mov	r4, r20
    3e56:	55 2e       	mov	r5, r21
    3e58:	66 2e       	mov	r6, r22
    3e5a:	77 2e       	mov	r7, r23
    3e5c:	88 2e       	mov	r8, r24
    3e5e:	99 2e       	mov	r9, r25
    3e60:	a2 2c       	mov	r10, r2
    3e62:	b3 2c       	mov	r11, r3
    3e64:	c4 2c       	mov	r12, r4
    3e66:	d5 2c       	mov	r13, r5
    3e68:	e6 2c       	mov	r14, r6
    3e6a:	f7 2c       	mov	r15, r7
    3e6c:	08 2d       	mov	r16, r8
    3e6e:	19 2d       	mov	r17, r9
    3e70:	2a 2d       	mov	r18, r10
    3e72:	3b 2d       	mov	r19, r11
    3e74:	4c 2d       	mov	r20, r12
    3e76:	5d 2d       	mov	r21, r13
    3e78:	6e 2d       	mov	r22, r14
    3e7a:	7f 2d       	mov	r23, r15
    3e7c:	80 2f       	mov	r24, r16
    3e7e:	91 2f       	mov	r25, r17
    3e80:	21 5c       	subi	r18, 0xC1	; 193
    3e82:	3d 4b       	sbci	r19, 0xBD	; 189
    3e84:	40 4f       	sbci	r20, 0xF0	; 240
    3e86:	5f 4f       	sbci	r21, 0xFF	; 255
    3e88:	6f 4f       	sbci	r22, 0xFF	; 255
    3e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e90:	a2 2e       	mov	r10, r18
    3e92:	b3 2e       	mov	r11, r19
    3e94:	c4 2e       	mov	r12, r20
    3e96:	d5 2e       	mov	r13, r21
    3e98:	e6 2e       	mov	r14, r22
    3e9a:	f7 2e       	mov	r15, r23
    3e9c:	08 2f       	mov	r16, r24
    3e9e:	19 2f       	mov	r17, r25
    3ea0:	2a 2d       	mov	r18, r10
    3ea2:	3b 2d       	mov	r19, r11
    3ea4:	4c 2d       	mov	r20, r12
    3ea6:	5d 2d       	mov	r21, r13
    3ea8:	6e 2d       	mov	r22, r14
    3eaa:	7f 2d       	mov	r23, r15
    3eac:	80 2f       	mov	r24, r16
    3eae:	91 2f       	mov	r25, r17
    3eb0:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <__floatundisf>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	34 e2       	ldi	r19, 0x24	; 36
    3ebc:	44 e7       	ldi	r20, 0x74	; 116
    3ebe:	59 e4       	ldi	r21, 0x49	; 73
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 a2 44 	call	0x8944	; 0x8944 <__divsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	bc 01       	movw	r22, r24
    3ece:	cd 01       	movw	r24, r26
    3ed0:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <__fixunssfdi>
    3ed4:	a2 2e       	mov	r10, r18
    3ed6:	b3 2e       	mov	r11, r19
    3ed8:	c4 2e       	mov	r12, r20
    3eda:	d5 2e       	mov	r13, r21
    3edc:	e6 2e       	mov	r14, r22
    3ede:	f7 2e       	mov	r15, r23
    3ee0:	08 2f       	mov	r16, r24
    3ee2:	19 2f       	mov	r17, r25
    3ee4:	d6 01       	movw	r26, r12
    3ee6:	c5 01       	movw	r24, r10
    3ee8:	bc 01       	movw	r22, r24
    3eea:	cd 01       	movw	r24, r26
    3eec:	7b dc       	rcall	.-1802   	; 0x37e4 <__portable_avr_delay_cycles>
    3eee:	00 00       	nop
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	ff 90       	pop	r15
    3efe:	ef 90       	pop	r14
    3f00:	df 90       	pop	r13
    3f02:	cf 90       	pop	r12
    3f04:	bf 90       	pop	r11
    3f06:	af 90       	pop	r10
    3f08:	9f 90       	pop	r9
    3f0a:	8f 90       	pop	r8
    3f0c:	7f 90       	pop	r7
    3f0e:	6f 90       	pop	r6
    3f10:	5f 90       	pop	r5
    3f12:	4f 90       	pop	r4
    3f14:	3f 90       	pop	r3
    3f16:	2f 90       	pop	r2
    3f18:	08 95       	ret

00003f1a <servo_init>:

#include "drivers/mechanisms.h"
#include "pwm.h"

void servo_init(void)
{
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
	
	
	pwm_init(&pwm_cfg, SERVO_TC, SERVO_PWM, 500);
    3f22:	24 ef       	ldi	r18, 0xF4	; 244
    3f24:	31 e0       	ldi	r19, 0x01	; 1
    3f26:	41 e0       	ldi	r20, 0x01	; 1
    3f28:	64 e0       	ldi	r22, 0x04	; 4
    3f2a:	89 e2       	ldi	r24, 0x29	; 41
    3f2c:	93 e2       	ldi	r25, 0x23	; 35
    3f2e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <pwm_init>
	
	if(DEBUG) printf("Servos Initialized.\n");
    3f32:	85 e6       	ldi	r24, 0x65	; 101
    3f34:	91 e2       	ldi	r25, 0x21	; 33
    3f36:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
}
    3f3a:	00 00       	nop
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	08 95       	ret

00003f42 <set_servo>:

void set_servo(uint16_t dutyCycle)
{
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	1f 92       	push	r1
    3f48:	1f 92       	push	r1
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	89 83       	std	Y+1, r24	; 0x01
    3f50:	9a 83       	std	Y+2, r25	; 0x02
	pwm_start(&pwm_cfg,dutyCycle);
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	68 2f       	mov	r22, r24
    3f56:	89 e2       	ldi	r24, 0x29	; 41
    3f58:	93 e2       	ldi	r25, 0x23	; 35
    3f5a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <pwm_start>
	if(DEBUG) printf("Set Servo to duty cycle of %u\n", dutyCycle);
    3f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f60:	8f 93       	push	r24
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	8f 93       	push	r24
    3f66:	89 e7       	ldi	r24, 0x79	; 121
    3f68:	91 e2       	ldi	r25, 0x21	; 33
    3f6a:	89 2f       	mov	r24, r25
    3f6c:	8f 93       	push	r24
    3f6e:	89 e7       	ldi	r24, 0x79	; 121
    3f70:	91 e2       	ldi	r25, 0x21	; 33
    3f72:	8f 93       	push	r24
    3f74:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    3f78:	0f 90       	pop	r0
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
}
    3f80:	00 00       	nop
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	08 95       	ret

00003f8c <buzz_on>:



void buzz_on(void)
{
    3f8c:	cf 93       	push	r28
    3f8e:	df 93       	push	r29
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    3f94:	80 e4       	ldi	r24, 0x40	; 64
    3f96:	96 e0       	ldi	r25, 0x06	; 6
    3f98:	20 e4       	ldi	r18, 0x40	; 64
    3f9a:	36 e0       	ldi	r19, 0x06	; 6
    3f9c:	f9 01       	movw	r30, r18
    3f9e:	21 81       	ldd	r18, Z+1	; 0x01
    3fa0:	21 60       	ori	r18, 0x01	; 1
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET |= 0b00000001;
    3fa6:	80 e4       	ldi	r24, 0x40	; 64
    3fa8:	96 e0       	ldi	r25, 0x06	; 6
    3faa:	20 e4       	ldi	r18, 0x40	; 64
    3fac:	36 e0       	ldi	r19, 0x06	; 6
    3fae:	f9 01       	movw	r30, r18
    3fb0:	25 81       	ldd	r18, Z+5	; 0x05
    3fb2:	21 60       	ori	r18, 0x01	; 1
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer ON\n");
    3fb8:	88 e9       	ldi	r24, 0x98	; 152
    3fba:	91 e2       	ldi	r25, 0x21	; 33
    3fbc:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
	
}
    3fc0:	00 00       	nop
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	08 95       	ret

00003fc8 <buzz_off>:
void buzz_off(void)
{
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    3fd0:	80 e4       	ldi	r24, 0x40	; 64
    3fd2:	96 e0       	ldi	r25, 0x06	; 6
    3fd4:	20 e4       	ldi	r18, 0x40	; 64
    3fd6:	36 e0       	ldi	r19, 0x06	; 6
    3fd8:	f9 01       	movw	r30, r18
    3fda:	21 81       	ldd	r18, Z+1	; 0x01
    3fdc:	21 60       	ori	r18, 0x01	; 1
    3fde:	fc 01       	movw	r30, r24
    3fe0:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET &= 0b11111110;
    3fe2:	80 e4       	ldi	r24, 0x40	; 64
    3fe4:	96 e0       	ldi	r25, 0x06	; 6
    3fe6:	20 e4       	ldi	r18, 0x40	; 64
    3fe8:	36 e0       	ldi	r19, 0x06	; 6
    3fea:	f9 01       	movw	r30, r18
    3fec:	25 81       	ldd	r18, Z+5	; 0x05
    3fee:	2e 7f       	andi	r18, 0xFE	; 254
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer OFF\n");
    3ff4:	82 ea       	ldi	r24, 0xA2	; 162
    3ff6:	91 e2       	ldi	r25, 0x21	; 33
    3ff8:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
    3ffc:	00 00       	nop
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	08 95       	ret

00004004 <xbee_init>:
#include "Xbee.h"
static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

void xbee_init()
{
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
	xbee_uart.Baud=XBEEBAUD;
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	92 ec       	ldi	r25, 0xC2	; 194
    4010:	a1 e0       	ldi	r26, 0x01	; 1
    4012:	b0 e0       	ldi	r27, 0x00	; 0
    4014:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <xbee_uart+0x6>
    4018:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <xbee_uart+0x7>
    401c:	a0 93 6e 22 	sts	0x226E, r26	; 0x80226e <xbee_uart+0x8>
    4020:	b0 93 6f 22 	sts	0x226F, r27	; 0x80226f <xbee_uart+0x9>
	xbee_uart.Port=P_XBEEPORT;
    4024:	80 ea       	ldi	r24, 0xA0	; 160
    4026:	96 e0       	ldi	r25, 0x06	; 6
    4028:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <xbee_uart>
    402c:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <xbee_uart+0x1>
	xbee_uart.Usart=P_XBEEUART;
    4030:	80 ea       	ldi	r24, 0xA0	; 160
    4032:	9b e0       	ldi	r25, 0x0B	; 11
    4034:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <xbee_uart+0x2>
    4038:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <xbee_uart+0x3>
	xbee_uart.tx=XBEETXPIN;
    403c:	88 e0       	ldi	r24, 0x08	; 8
    403e:	80 93 6b 22 	sts	0x226B, r24	; 0x80226b <xbee_uart+0x5>
	xbee_uart.rx=XBEERXPIN;
    4042:	84 e0       	ldi	r24, 0x04	; 4
    4044:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <xbee_uart+0x4>
	uart_init(&xbee_uart);
    4048:	86 e6       	ldi	r24, 0x66	; 102
    404a:	92 e2       	ldi	r25, 0x22	; 34
    404c:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <uart_init>
	XBEE_UART.CTRLA=0x14;
    4050:	80 ea       	ldi	r24, 0xA0	; 160
    4052:	9b e0       	ldi	r25, 0x0B	; 11
    4054:	24 e1       	ldi	r18, 0x14	; 20
    4056:	fc 01       	movw	r30, r24
    4058:	23 83       	std	Z+3, r18	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    405a:	8d ea       	ldi	r24, 0xAD	; 173
    405c:	91 e2       	ldi	r25, 0x21	; 33
    405e:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
}
    4062:	00 00       	nop
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	08 95       	ret

0000406a <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	1f 92       	push	r1
    4070:	1f 92       	push	r1
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	89 83       	std	Y+1, r24	; 0x01
    4078:	9a 83       	std	Y+2, r25	; 0x02
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	9a 81       	ldd	r25, Y+2	; 0x02
    407e:	0e 94 00 4e 	call	0x9c00	; 0x9c00 <strlen>
    4082:	9c 01       	movw	r18, r24
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	9a 81       	ldd	r25, Y+2	; 0x02
    4088:	a9 01       	movw	r20, r18
    408a:	bc 01       	movw	r22, r24
    408c:	80 ea       	ldi	r24, 0xA0	; 160
    408e:	9b e0       	ldi	r25, 0x0B	; 11
    4090:	ed d1       	rcall	.+986    	; 0x446c <usart_serial_write_packet>
	if(DEBUG) printf("%s \n",(const)data);
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	9a 81       	ldd	r25, Y+2	; 0x02
    4096:	29 2f       	mov	r18, r25
    4098:	2f 93       	push	r18
    409a:	8f 93       	push	r24
    409c:	8f eb       	ldi	r24, 0xBF	; 191
    409e:	91 e2       	ldi	r25, 0x21	; 33
    40a0:	89 2f       	mov	r24, r25
    40a2:	8f 93       	push	r24
    40a4:	8f eb       	ldi	r24, 0xBF	; 191
    40a6:	91 e2       	ldi	r25, 0x21	; 33
    40a8:	8f 93       	push	r24
    40aa:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
}
    40b6:	00 00       	nop
    40b8:	0f 90       	pop	r0
    40ba:	0f 90       	pop	r0
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	08 95       	ret

000040c2 <__vector_119>:

ISR(READ_INTURUPT)
{
    40c2:	1f 92       	push	r1
    40c4:	0f 92       	push	r0
    40c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    40ca:	0f 92       	push	r0
    40cc:	11 24       	eor	r1, r1
    40ce:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40d2:	0f 92       	push	r0
    40d4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40d8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40dc:	0f 92       	push	r0
    40de:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40e6:	0f 92       	push	r0
    40e8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40ec:	8f 93       	push	r24
    40ee:	9f 93       	push	r25
    40f0:	ef 93       	push	r30
    40f2:	ff 93       	push	r31
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    40fc:	80 ea       	ldi	r24, 0xA0	; 160
    40fe:	9b e0       	ldi	r25, 0x0B	; 11
    4100:	fc 01       	movw	r30, r24
    4102:	80 81       	ld	r24, Z
    4104:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <XbeeRx>
    4108:	00 00       	nop
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	ff 91       	pop	r31
    4110:	ef 91       	pop	r30
    4112:	9f 91       	pop	r25
    4114:	8f 91       	pop	r24
    4116:	0f 90       	pop	r0
    4118:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    411c:	0f 90       	pop	r0
    411e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4122:	0f 90       	pop	r0
    4124:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4128:	0f 90       	pop	r0
    412a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    412e:	0f 90       	pop	r0
    4130:	1f 90       	pop	r1
    4132:	18 95       	reti

00004134 <newOLogInit>:

static uart_device openLog;


void newOLogInit()//initializes the openLog uart communication interface
{
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	92 ec       	ldi	r25, 0xC2	; 194
    4140:	a1 e0       	ldi	r26, 0x01	; 1
    4142:	b0 e0       	ldi	r27, 0x00	; 0
    4144:	80 93 76 22 	sts	0x2276, r24	; 0x802276 <openLog+0x6>
    4148:	90 93 77 22 	sts	0x2277, r25	; 0x802277 <openLog+0x7>
    414c:	a0 93 78 22 	sts	0x2278, r26	; 0x802278 <openLog+0x8>
    4150:	b0 93 79 22 	sts	0x2279, r27	; 0x802279 <openLog+0x9>
    openLog.Port=P_OPENLOG_PORT;
    4154:	80 e4       	ldi	r24, 0x40	; 64
    4156:	96 e0       	ldi	r25, 0x06	; 6
    4158:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <openLog>
    415c:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <openLog+0x1>
	openLog.Usart=P_OPENLOG_UART;
    4160:	80 ea       	ldi	r24, 0xA0	; 160
    4162:	98 e0       	ldi	r25, 0x08	; 8
    4164:	80 93 72 22 	sts	0x2272, r24	; 0x802272 <openLog+0x2>
    4168:	90 93 73 22 	sts	0x2273, r25	; 0x802273 <openLog+0x3>
	openLog.tx=OPENLOG_TX_PIN;
    416c:	88 e0       	ldi	r24, 0x08	; 8
    416e:	80 93 75 22 	sts	0x2275, r24	; 0x802275 <openLog+0x5>
	openLog.rx=OPENLOG_RX_PIN;
    4172:	84 e0       	ldi	r24, 0x04	; 4
    4174:	80 93 74 22 	sts	0x2274, r24	; 0x802274 <openLog+0x4>
	uart_init(&openLog);//function that initializes uart
    4178:	80 e7       	ldi	r24, 0x70	; 112
    417a:	92 e2       	ldi	r25, 0x22	; 34
    417c:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n");
    4180:	84 ec       	ldi	r24, 0xC4	; 196
    4182:	91 e2       	ldi	r25, 0x21	; 33
    4184:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
}
    4188:	00 00       	nop
    418a:	df 91       	pop	r29
    418c:	cf 91       	pop	r28
    418e:	08 95       	ret

00004190 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	1f 92       	push	r1
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    419a:	8f e3       	ldi	r24, 0x3F	; 63
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	fc 01       	movw	r30, r24
    41a0:	80 81       	ld	r24, Z
    41a2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    41a4:	f8 94       	cli
	return flags;
    41a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    41a8:	0f 90       	pop	r0
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	08 95       	ret

000041b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	1f 92       	push	r1
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    41bc:	8f e3       	ldi	r24, 0x3F	; 63
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	29 81       	ldd	r18, Y+1	; 0x01
    41c2:	fc 01       	movw	r30, r24
    41c4:	20 83       	st	Z, r18
}
    41c6:	00 00       	nop
    41c8:	0f 90       	pop	r0
    41ca:	df 91       	pop	r29
    41cc:	cf 91       	pop	r28
    41ce:	08 95       	ret

000041d0 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    41d0:	cf 93       	push	r28
    41d2:	df 93       	push	r29
    41d4:	1f 92       	push	r1
    41d6:	1f 92       	push	r1
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    41de:	d8 df       	rcall	.-80     	; 0x4190 <cpu_irq_save>
    41e0:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    41e2:	80 e5       	ldi	r24, 0x50	; 80
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	20 e5       	ldi	r18, 0x50	; 80
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	f9 01       	movw	r30, r18
    41ec:	30 81       	ld	r19, Z
    41ee:	2a 81       	ldd	r18, Y+2	; 0x02
    41f0:	23 2b       	or	r18, r19
    41f2:	fc 01       	movw	r30, r24
    41f4:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	db df       	rcall	.-74     	; 0x41b0 <cpu_irq_restore>
}
    41fa:	00 00       	nop
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	08 95       	ret

00004206 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	1f 92       	push	r1
    420c:	1f 92       	push	r1
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    4214:	80 e5       	ldi	r24, 0x50	; 80
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	22 e0       	ldi	r18, 0x02	; 2
    421a:	fc 01       	movw	r30, r24
    421c:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    421e:	b8 df       	rcall	.-144    	; 0x4190 <cpu_irq_save>
    4220:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    4222:	80 e5       	ldi	r24, 0x50	; 80
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	20 e5       	ldi	r18, 0x50	; 80
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	f9 01       	movw	r30, r18
    422c:	30 81       	ld	r19, Z
    422e:	2a 81       	ldd	r18, Y+2	; 0x02
    4230:	23 2b       	or	r18, r19
    4232:	fc 01       	movw	r30, r24
    4234:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	bb df       	rcall	.-138    	; 0x41b0 <cpu_irq_restore>
}
    423a:	00 00       	nop
    423c:	0f 90       	pop	r0
    423e:	0f 90       	pop	r0
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	08 95       	ret

00004246 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    4246:	cf 93       	push	r28
    4248:	df 93       	push	r29
    424a:	1f 92       	push	r1
    424c:	1f 92       	push	r1
    424e:	cd b7       	in	r28, 0x3d	; 61
    4250:	de b7       	in	r29, 0x3e	; 62
    4252:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    4254:	9d df       	rcall	.-198    	; 0x4190 <cpu_irq_save>
    4256:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    4258:	80 e5       	ldi	r24, 0x50	; 80
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	20 e5       	ldi	r18, 0x50	; 80
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	f9 01       	movw	r30, r18
    4262:	20 81       	ld	r18, Z
    4264:	32 2f       	mov	r19, r18
    4266:	2a 81       	ldd	r18, Y+2	; 0x02
    4268:	20 95       	com	r18
    426a:	23 23       	and	r18, r19
    426c:	fc 01       	movw	r30, r24
    426e:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	9e df       	rcall	.-196    	; 0x41b0 <cpu_irq_restore>
}
    4274:	00 00       	nop
    4276:	0f 90       	pop	r0
    4278:	0f 90       	pop	r0
    427a:	df 91       	pop	r29
    427c:	cf 91       	pop	r28
    427e:	08 95       	ret

00004280 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    4280:	cf 93       	push	r28
    4282:	df 93       	push	r29
    4284:	1f 92       	push	r1
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	88 30       	cpi	r24, 0x08	; 8
    4290:	19 f0       	breq	.+6      	; 0x4298 <osc_enable+0x18>
		osc_enable_internal(id);
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	9d df       	rcall	.-198    	; 0x41d0 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    4296:	02 c0       	rjmp	.+4      	; 0x429c <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	b5 df       	rcall	.-150    	; 0x4206 <osc_enable_external>
	}
}
    429c:	00 00       	nop
    429e:	0f 90       	pop	r0
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	08 95       	ret

000042a6 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	1f 92       	push	r1
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    42b0:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    42b2:	80 e5       	ldi	r24, 0x50	; 80
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	fc 01       	movw	r30, r24
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	98 23       	and	r25, r24
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	99 23       	and	r25, r25
    42c2:	09 f4       	brne	.+2      	; 0x42c6 <osc_is_ready+0x20>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
}
    42c6:	0f 90       	pop	r0
    42c8:	df 91       	pop	r29
    42ca:	cf 91       	pop	r28
    42cc:	08 95       	ret

000042ce <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    42ce:	cf 93       	push	r28
    42d0:	df 93       	push	r29
    42d2:	1f 92       	push	r1
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
    42d8:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    42da:	00 00       	nop
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	e3 df       	rcall	.-58     	; 0x42a6 <osc_is_ready>
    42e0:	98 2f       	mov	r25, r24
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	89 27       	eor	r24, r25
    42e6:	88 23       	and	r24, r24
    42e8:	c9 f7       	brne	.-14     	; 0x42dc <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    42ea:	00 00       	nop
    42ec:	0f 90       	pop	r0
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	08 95       	ret

000042f4 <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    42f4:	cf 93       	push	r28
    42f6:	df 93       	push	r29
    42f8:	1f 92       	push	r1
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
    42fe:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	88 2f       	mov	r24, r24
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	8a 30       	cpi	r24, 0x0A	; 10
    4308:	91 05       	cpc	r25, r1
    430a:	a1 f0       	breq	.+40     	; 0x4334 <sysclk_rtcsrc_enable+0x40>
    430c:	8b 30       	cpi	r24, 0x0B	; 11
    430e:	91 05       	cpc	r25, r1
    4310:	34 f4       	brge	.+12     	; 0x431e <sysclk_rtcsrc_enable+0x2a>
    4312:	82 30       	cpi	r24, 0x02	; 2
    4314:	91 05       	cpc	r25, r1
    4316:	71 f0       	breq	.+28     	; 0x4334 <sysclk_rtcsrc_enable+0x40>
    4318:	04 97       	sbiw	r24, 0x04	; 4
    431a:	39 f0       	breq	.+14     	; 0x432a <sysclk_rtcsrc_enable+0x36>
    431c:	10 c0       	rjmp	.+32     	; 0x433e <sysclk_rtcsrc_enable+0x4a>
    431e:	8c 30       	cpi	r24, 0x0C	; 12
    4320:	91 05       	cpc	r25, r1
    4322:	19 f0       	breq	.+6      	; 0x432a <sysclk_rtcsrc_enable+0x36>
    4324:	0e 97       	sbiw	r24, 0x0e	; 14
    4326:	31 f0       	breq	.+12     	; 0x4334 <sysclk_rtcsrc_enable+0x40>
    4328:	0a c0       	rjmp	.+20     	; 0x433e <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    432a:	84 e0       	ldi	r24, 0x04	; 4
    432c:	a9 df       	rcall	.-174    	; 0x4280 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    432e:	84 e0       	ldi	r24, 0x04	; 4
    4330:	ce df       	rcall	.-100    	; 0x42ce <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    4332:	05 c0       	rjmp	.+10     	; 0x433e <sysclk_rtcsrc_enable+0x4a>
    4334:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    4336:	a4 df       	rcall	.-184    	; 0x4280 <osc_enable>
    4338:	88 e0       	ldi	r24, 0x08	; 8
    433a:	c9 df       	rcall	.-110    	; 0x42ce <osc_wait_ready>
		break;
    433c:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    433e:	80 e4       	ldi	r24, 0x40	; 64
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	29 81       	ldd	r18, Y+1	; 0x01
    4344:	21 60       	ori	r18, 0x01	; 1
    4346:	fc 01       	movw	r30, r24
    4348:	23 83       	std	Z+3, r18	; 0x03
}
    434a:	00 00       	nop
    434c:	0f 90       	pop	r0
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	08 95       	ret

00004354 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	00 d0       	rcall	.+0      	; 0x435a <sysclk_init+0x6>
    435a:	1f 92       	push	r1
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    4360:	80 e7       	ldi	r24, 0x70	; 112
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	89 83       	std	Y+1, r24	; 0x01
    4366:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    4368:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    436a:	1b 82       	std	Y+3, r1	; 0x03
    436c:	0d c0       	rjmp	.+26     	; 0x4388 <sysclk_init+0x34>
		*(reg++) = 0xff;
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	9a 81       	ldd	r25, Y+2	; 0x02
    4372:	9c 01       	movw	r18, r24
    4374:	2f 5f       	subi	r18, 0xFF	; 255
    4376:	3f 4f       	sbci	r19, 0xFF	; 255
    4378:	29 83       	std	Y+1, r18	; 0x01
    437a:	3a 83       	std	Y+2, r19	; 0x02
    437c:	2f ef       	ldi	r18, 0xFF	; 255
    437e:	fc 01       	movw	r30, r24
    4380:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    4382:	8b 81       	ldd	r24, Y+3	; 0x03
    4384:	8f 5f       	subi	r24, 0xFF	; 255
    4386:	8b 83       	std	Y+3, r24	; 0x03
    4388:	8b 81       	ldd	r24, Y+3	; 0x03
    438a:	87 30       	cpi	r24, 0x07	; 7
    438c:	80 f3       	brcs	.-32     	; 0x436e <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    438e:	82 e0       	ldi	r24, 0x02	; 2
    4390:	77 df       	rcall	.-274    	; 0x4280 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    4392:	82 e0       	ldi	r24, 0x02	; 2
    4394:	9c df       	rcall	.-200    	; 0x42ce <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    4396:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    4398:	61 e0       	ldi	r22, 0x01	; 1
    439a:	80 e4       	ldi	r24, 0x40	; 64
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	cf d0       	rcall	.+414    	; 0x453e <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    43a0:	8c 81       	ldd	r24, Y+4	; 0x04
    43a2:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    43a4:	11 f4       	brne	.+4      	; 0x43aa <sysclk_init+0x56>
    43a6:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    43a8:	4e df       	rcall	.-356    	; 0x4246 <osc_disable>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	a3 df       	rcall	.-186    	; 0x42f4 <sysclk_rtcsrc_enable>
#endif
}
    43ae:	24 96       	adiw	r28, 0x04	; 4
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	de bf       	out	0x3e, r29	; 62
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	08 95       	ret

000043ba <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	00 d0       	rcall	.+0      	; 0x43c0 <sysclk_enable_module+0x6>
    43c0:	cd b7       	in	r28, 0x3d	; 61
    43c2:	de b7       	in	r29, 0x3e	; 62
    43c4:	8a 83       	std	Y+2, r24	; 0x02
    43c6:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    43c8:	e3 de       	rcall	.-570    	; 0x4190 <cpu_irq_save>
    43ca:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    43cc:	8a 81       	ldd	r24, Y+2	; 0x02
    43ce:	88 2f       	mov	r24, r24
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	80 59       	subi	r24, 0x90	; 144
    43d4:	9f 4f       	sbci	r25, 0xFF	; 255
    43d6:	2a 81       	ldd	r18, Y+2	; 0x02
    43d8:	22 2f       	mov	r18, r18
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	20 59       	subi	r18, 0x90	; 144
    43de:	3f 4f       	sbci	r19, 0xFF	; 255
    43e0:	f9 01       	movw	r30, r18
    43e2:	20 81       	ld	r18, Z
    43e4:	32 2f       	mov	r19, r18
    43e6:	2b 81       	ldd	r18, Y+3	; 0x03
    43e8:	20 95       	com	r18
    43ea:	23 23       	and	r18, r19
    43ec:	fc 01       	movw	r30, r24
    43ee:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    43f0:	89 81       	ldd	r24, Y+1	; 0x01
    43f2:	de de       	rcall	.-580    	; 0x41b0 <cpu_irq_restore>
}
    43f4:	00 00       	nop
    43f6:	23 96       	adiw	r28, 0x03	; 3
    43f8:	cd bf       	out	0x3d, r28	; 61
    43fa:	de bf       	out	0x3e, r29	; 62
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	08 95       	ret

00004402 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    4402:	cf 93       	push	r28
    4404:	df 93       	push	r29
    4406:	00 d0       	rcall	.+0      	; 0x4408 <sysclk_disable_module+0x6>
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	8a 83       	std	Y+2, r24	; 0x02
    440e:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    4410:	bf de       	rcall	.-642    	; 0x4190 <cpu_irq_save>
    4412:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	88 2f       	mov	r24, r24
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	80 59       	subi	r24, 0x90	; 144
    441c:	9f 4f       	sbci	r25, 0xFF	; 255
    441e:	2a 81       	ldd	r18, Y+2	; 0x02
    4420:	22 2f       	mov	r18, r18
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	20 59       	subi	r18, 0x90	; 144
    4426:	3f 4f       	sbci	r19, 0xFF	; 255
    4428:	f9 01       	movw	r30, r18
    442a:	30 81       	ld	r19, Z
    442c:	2b 81       	ldd	r18, Y+3	; 0x03
    442e:	23 2b       	or	r18, r19
    4430:	fc 01       	movw	r30, r24
    4432:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	bc de       	rcall	.-648    	; 0x41b0 <cpu_irq_restore>
}
    4438:	00 00       	nop
    443a:	23 96       	adiw	r28, 0x03	; 3
    443c:	cd bf       	out	0x3d, r28	; 61
    443e:	de bf       	out	0x3e, r29	; 62
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	08 95       	ret

00004446 <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    4446:	cf 93       	push	r28
    4448:	df 93       	push	r29
    444a:	00 d0       	rcall	.+0      	; 0x444c <usart_serial_putchar+0x6>
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	89 83       	std	Y+1, r24	; 0x01
    4452:	9a 83       	std	Y+2, r25	; 0x02
    4454:	6b 83       	std	Y+3, r22	; 0x03
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	9a 81       	ldd	r25, Y+2	; 0x02
    445a:	6b 81       	ldd	r22, Y+3	; 0x03
    445c:	0e 94 06 39 	call	0x720c	; 0x720c <usart_putchar>
    4460:	23 96       	adiw	r28, 0x03	; 3
    4462:	cd bf       	out	0x3d, r28	; 61
    4464:	de bf       	out	0x3e, r29	; 62
    4466:	df 91       	pop	r29
    4468:	cf 91       	pop	r28
    446a:	08 95       	ret

0000446c <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    4470:	00 d0       	rcall	.+0      	; 0x4472 <usart_serial_write_packet+0x6>
    4472:	00 d0       	rcall	.+0      	; 0x4474 <usart_serial_write_packet+0x8>
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	89 83       	std	Y+1, r24	; 0x01
    447a:	9a 83       	std	Y+2, r25	; 0x02
    447c:	6b 83       	std	Y+3, r22	; 0x03
    447e:	7c 83       	std	Y+4, r23	; 0x04
    4480:	4d 83       	std	Y+5, r20	; 0x05
    4482:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    4484:	12 c0       	rjmp	.+36     	; 0x44aa <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    4486:	8b 81       	ldd	r24, Y+3	; 0x03
    4488:	9c 81       	ldd	r25, Y+4	; 0x04
    448a:	fc 01       	movw	r30, r24
    448c:	20 81       	ld	r18, Z
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	9a 81       	ldd	r25, Y+2	; 0x02
    4492:	62 2f       	mov	r22, r18
    4494:	d8 df       	rcall	.-80     	; 0x4446 <usart_serial_putchar>
		len--;
    4496:	8d 81       	ldd	r24, Y+5	; 0x05
    4498:	9e 81       	ldd	r25, Y+6	; 0x06
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	8d 83       	std	Y+5, r24	; 0x05
    449e:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	9c 81       	ldd	r25, Y+4	; 0x04
    44a4:	01 96       	adiw	r24, 0x01	; 1
    44a6:	8b 83       	std	Y+3, r24	; 0x03
    44a8:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    44aa:	8d 81       	ldd	r24, Y+5	; 0x05
    44ac:	9e 81       	ldd	r25, Y+6	; 0x06
    44ae:	89 2b       	or	r24, r25
    44b0:	51 f7       	brne	.-44     	; 0x4486 <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    44b2:	80 e0       	ldi	r24, 0x00	; 0
}
    44b4:	26 96       	adiw	r28, 0x06	; 6
    44b6:	cd bf       	out	0x3d, r28	; 61
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	08 95       	ret

000044c0 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	00 d0       	rcall	.+0      	; 0x44c6 <_read+0x6>
    44c6:	cd b7       	in	r28, 0x3d	; 61
    44c8:	de b7       	in	r29, 0x3e	; 62
    44ca:	8a 83       	std	Y+2, r24	; 0x02
    44cc:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    44ce:	20 91 37 23 	lds	r18, 0x2337	; 0x802337 <ptr_get>
    44d2:	30 91 38 23 	lds	r19, 0x2338	; 0x802338 <ptr_get+0x1>
    44d6:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <stdio_base>
    44da:	90 91 3c 23 	lds	r25, 0x233C	; 0x80233c <stdio_base+0x1>
    44de:	ae 01       	movw	r20, r28
    44e0:	4f 5f       	subi	r20, 0xFF	; 255
    44e2:	5f 4f       	sbci	r21, 0xFF	; 255
    44e4:	ba 01       	movw	r22, r20
    44e6:	f9 01       	movw	r30, r18
    44e8:	19 95       	eicall
	return c;
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	08 2e       	mov	r0, r24
    44ee:	00 0c       	add	r0, r0
    44f0:	99 0b       	sbc	r25, r25
}
    44f2:	23 96       	adiw	r28, 0x03	; 3
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	de bf       	out	0x3e, r29	; 62
    44f8:	df 91       	pop	r29
    44fa:	cf 91       	pop	r28
    44fc:	08 95       	ret

000044fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    44fe:	cf 93       	push	r28
    4500:	df 93       	push	r29
    4502:	00 d0       	rcall	.+0      	; 0x4504 <_write+0x6>
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
    4508:	89 83       	std	Y+1, r24	; 0x01
    450a:	6a 83       	std	Y+2, r22	; 0x02
    450c:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    450e:	20 91 39 23 	lds	r18, 0x2339	; 0x802339 <ptr_put>
    4512:	30 91 3a 23 	lds	r19, 0x233A	; 0x80233a <ptr_put+0x1>
    4516:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <stdio_base>
    451a:	90 91 3c 23 	lds	r25, 0x233C	; 0x80233c <stdio_base+0x1>
    451e:	69 81       	ldd	r22, Y+1	; 0x01
    4520:	f9 01       	movw	r30, r18
    4522:	19 95       	eicall
    4524:	99 23       	and	r25, r25
    4526:	1c f4       	brge	.+6      	; 0x452e <_write+0x30>
		return -1;
    4528:	8f ef       	ldi	r24, 0xFF	; 255
    452a:	9f ef       	ldi	r25, 0xFF	; 255
    452c:	02 c0       	rjmp	.+4      	; 0x4532 <_write+0x34>
	}
	return 1;
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
}
    4532:	23 96       	adiw	r28, 0x03	; 3
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	de bf       	out	0x3e, r29	; 62
    4538:	df 91       	pop	r29
    453a:	cf 91       	pop	r28
    453c:	08 95       	ret

0000453e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    453e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4540:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4542:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4544:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    4546:	60 83       	st	Z, r22
	ret                             // Return to caller
    4548:	08 95       	ret

0000454a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    454a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    454e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    4550:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    4552:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    4556:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    4558:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    455c:	08 95       	ret

0000455e <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	1f 92       	push	r1
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
    4568:	8f e3       	ldi	r24, 0x3F	; 63
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	fc 01       	movw	r30, r24
    456e:	80 81       	ld	r24, Z
    4570:	89 83       	std	Y+1, r24	; 0x01
    4572:	f8 94       	cli
    4574:	89 81       	ldd	r24, Y+1	; 0x01
    4576:	0f 90       	pop	r0
    4578:	df 91       	pop	r29
    457a:	cf 91       	pop	r28
    457c:	08 95       	ret

0000457e <cpu_irq_restore>:
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	1f 92       	push	r1
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	89 83       	std	Y+1, r24	; 0x01
    458a:	8f e3       	ldi	r24, 0x3F	; 63
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	29 81       	ldd	r18, Y+1	; 0x01
    4590:	fc 01       	movw	r30, r24
    4592:	20 83       	st	Z, r18
    4594:	00 00       	nop
    4596:	0f 90       	pop	r0
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	08 95       	ret

0000459e <sleepmgr_lock_mode>:
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	1f 92       	push	r1
    45a4:	1f 92       	push	r1
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	8a 83       	std	Y+2, r24	; 0x02
    45ac:	8a 81       	ldd	r24, Y+2	; 0x02
    45ae:	88 2f       	mov	r24, r24
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	8f 5c       	subi	r24, 0xCF	; 207
    45b4:	9c 4d       	sbci	r25, 0xDC	; 220
    45b6:	fc 01       	movw	r30, r24
    45b8:	80 81       	ld	r24, Z
    45ba:	8f 3f       	cpi	r24, 0xFF	; 255
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <sleepmgr_lock_mode+0x22>
    45be:	ff cf       	rjmp	.-2      	; 0x45be <sleepmgr_lock_mode+0x20>
    45c0:	ce df       	rcall	.-100    	; 0x455e <cpu_irq_save>
    45c2:	89 83       	std	Y+1, r24	; 0x01
    45c4:	8a 81       	ldd	r24, Y+2	; 0x02
    45c6:	88 2f       	mov	r24, r24
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	9c 01       	movw	r18, r24
    45cc:	2f 5c       	subi	r18, 0xCF	; 207
    45ce:	3c 4d       	sbci	r19, 0xDC	; 220
    45d0:	f9 01       	movw	r30, r18
    45d2:	20 81       	ld	r18, Z
    45d4:	2f 5f       	subi	r18, 0xFF	; 255
    45d6:	8f 5c       	subi	r24, 0xCF	; 207
    45d8:	9c 4d       	sbci	r25, 0xDC	; 220
    45da:	fc 01       	movw	r30, r24
    45dc:	20 83       	st	Z, r18
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	ce df       	rcall	.-100    	; 0x457e <cpu_irq_restore>
    45e2:	00 00       	nop
    45e4:	0f 90       	pop	r0
    45e6:	0f 90       	pop	r0
    45e8:	df 91       	pop	r29
    45ea:	cf 91       	pop	r28
    45ec:	08 95       	ret

000045ee <rtc_get_time>:
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	cd b7       	in	r28, 0x3d	; 61
    45f4:	de b7       	in	r29, 0x3e	; 62
    45f6:	25 97       	sbiw	r28, 0x05	; 5
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	00 00       	nop
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	94 e0       	ldi	r25, 0x04	; 4
    4602:	fc 01       	movw	r30, r24
    4604:	81 81       	ldd	r24, Z+1	; 0x01
    4606:	88 2f       	mov	r24, r24
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	81 70       	andi	r24, 0x01	; 1
    460c:	99 27       	eor	r25, r25
    460e:	21 e0       	ldi	r18, 0x01	; 1
    4610:	89 2b       	or	r24, r25
    4612:	09 f4       	brne	.+2      	; 0x4616 <rtc_get_time+0x28>
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	22 23       	and	r18, r18
    4618:	91 f7       	brne	.-28     	; 0x45fe <rtc_get_time+0x10>
    461a:	a1 df       	rcall	.-190    	; 0x455e <cpu_irq_save>
    461c:	8b 83       	std	Y+3, r24	; 0x03
    461e:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <rtc_data>
    4622:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <rtc_data+0x1>
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	9a 83       	std	Y+2, r25	; 0x02
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	94 e0       	ldi	r25, 0x04	; 4
    462e:	fc 01       	movw	r30, r24
    4630:	80 85       	ldd	r24, Z+8	; 0x08
    4632:	91 85       	ldd	r25, Z+9	; 0x09
    4634:	8c 83       	std	Y+4, r24	; 0x04
    4636:	9d 83       	std	Y+5, r25	; 0x05
    4638:	8c 81       	ldd	r24, Y+4	; 0x04
    463a:	9d 81       	ldd	r25, Y+5	; 0x05
    463c:	89 2b       	or	r24, r25
    463e:	79 f4       	brne	.+30     	; 0x465e <rtc_get_time+0x70>
    4640:	80 e0       	ldi	r24, 0x00	; 0
    4642:	94 e0       	ldi	r25, 0x04	; 4
    4644:	fc 01       	movw	r30, r24
    4646:	83 81       	ldd	r24, Z+3	; 0x03
    4648:	88 2f       	mov	r24, r24
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	81 70       	andi	r24, 0x01	; 1
    464e:	99 27       	eor	r25, r25
    4650:	89 2b       	or	r24, r25
    4652:	29 f0       	breq	.+10     	; 0x465e <rtc_get_time+0x70>
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	9a 81       	ldd	r25, Y+2	; 0x02
    4658:	01 96       	adiw	r24, 0x01	; 1
    465a:	89 83       	std	Y+1, r24	; 0x01
    465c:	9a 83       	std	Y+2, r25	; 0x02
    465e:	8b 81       	ldd	r24, Y+3	; 0x03
    4660:	8e df       	rcall	.-228    	; 0x457e <cpu_irq_restore>
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
    4666:	cc 01       	movw	r24, r24
    4668:	a0 e0       	ldi	r26, 0x00	; 0
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	ac 01       	movw	r20, r24
    466e:	33 27       	eor	r19, r19
    4670:	22 27       	eor	r18, r18
    4672:	8c 81       	ldd	r24, Y+4	; 0x04
    4674:	9d 81       	ldd	r25, Y+5	; 0x05
    4676:	cc 01       	movw	r24, r24
    4678:	a0 e0       	ldi	r26, 0x00	; 0
    467a:	b0 e0       	ldi	r27, 0x00	; 0
    467c:	82 2b       	or	r24, r18
    467e:	93 2b       	or	r25, r19
    4680:	a4 2b       	or	r26, r20
    4682:	b5 2b       	or	r27, r21
    4684:	bc 01       	movw	r22, r24
    4686:	cd 01       	movw	r24, r26
    4688:	25 96       	adiw	r28, 0x05	; 5
    468a:	cd bf       	out	0x3d, r28	; 61
    468c:	de bf       	out	0x3e, r29	; 62
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	08 95       	ret

00004694 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    4694:	cf 93       	push	r28
    4696:	df 93       	push	r29
    4698:	cd b7       	in	r28, 0x3d	; 61
    469a:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    469c:	64 e0       	ldi	r22, 0x04	; 4
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	8c de       	rcall	.-744    	; 0x43ba <sysclk_enable_module>
	RTC.PER = 0xffff;
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	94 e0       	ldi	r25, 0x04	; 4
    46a6:	2f ef       	ldi	r18, 0xFF	; 255
    46a8:	3f ef       	ldi	r19, 0xFF	; 255
    46aa:	fc 01       	movw	r30, r24
    46ac:	22 87       	std	Z+10, r18	; 0x0a
    46ae:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	94 e0       	ldi	r25, 0x04	; 4
    46b4:	fc 01       	movw	r30, r24
    46b6:	10 86       	std	Z+8, r1	; 0x08
    46b8:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    46ba:	83 e0       	ldi	r24, 0x03	; 3
    46bc:	70 df       	rcall	.-288    	; 0x459e <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	94 e0       	ldi	r25, 0x04	; 4
    46c2:	21 e0       	ldi	r18, 0x01	; 1
    46c4:	fc 01       	movw	r30, r24
    46c6:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	94 e0       	ldi	r25, 0x04	; 4
    46cc:	27 e0       	ldi	r18, 0x07	; 7
    46ce:	fc 01       	movw	r30, r24
    46d0:	20 83       	st	Z, r18
}
    46d2:	00 00       	nop
    46d4:	df 91       	pop	r29
    46d6:	cf 91       	pop	r28
    46d8:	08 95       	ret

000046da <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    46da:	1f 92       	push	r1
    46dc:	0f 92       	push	r0
    46de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    46e2:	0f 92       	push	r0
    46e4:	11 24       	eor	r1, r1
    46e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    46ea:	0f 92       	push	r0
    46ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    46f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    46f4:	0f 92       	push	r0
    46f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    46fa:	8f 93       	push	r24
    46fc:	9f 93       	push	r25
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    4706:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <rtc_data>
    470a:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <rtc_data+0x1>
    470e:	01 96       	adiw	r24, 0x01	; 1
    4710:	80 93 3d 23 	sts	0x233D, r24	; 0x80233d <rtc_data>
    4714:	90 93 3e 23 	sts	0x233E, r25	; 0x80233e <rtc_data+0x1>
}
    4718:	00 00       	nop
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	9f 91       	pop	r25
    4720:	8f 91       	pop	r24
    4722:	0f 90       	pop	r0
    4724:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4728:	0f 90       	pop	r0
    472a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    472e:	0f 90       	pop	r0
    4730:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4734:	0f 90       	pop	r0
    4736:	1f 90       	pop	r1
    4738:	18 95       	reti

0000473a <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    473a:	1f 92       	push	r1
    473c:	0f 92       	push	r0
    473e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4742:	0f 92       	push	r0
    4744:	11 24       	eor	r1, r1
    4746:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    474a:	0f 92       	push	r0
    474c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4750:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4754:	0f 92       	push	r0
    4756:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    475a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    475e:	0f 92       	push	r0
    4760:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4764:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4768:	0f 92       	push	r0
    476a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    476e:	2f 93       	push	r18
    4770:	3f 93       	push	r19
    4772:	4f 93       	push	r20
    4774:	5f 93       	push	r21
    4776:	6f 93       	push	r22
    4778:	7f 93       	push	r23
    477a:	8f 93       	push	r24
    477c:	9f 93       	push	r25
    477e:	af 93       	push	r26
    4780:	bf 93       	push	r27
    4782:	ef 93       	push	r30
    4784:	ff 93       	push	r31
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	28 97       	sbiw	r28, 0x08	; 8
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    4794:	20 91 3d 23 	lds	r18, 0x233D	; 0x80233d <rtc_data>
    4798:	30 91 3e 23 	lds	r19, 0x233E	; 0x80233e <rtc_data+0x1>
    479c:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <rtc_data+0x2>
    47a0:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <rtc_data+0x3>
    47a4:	28 17       	cp	r18, r24
    47a6:	39 07       	cpc	r19, r25
    47a8:	08 f4       	brcc	.+2      	; 0x47ac <__vector_11+0x72>
    47aa:	63 c0       	rjmp	.+198    	; 0x4872 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	94 e0       	ldi	r25, 0x04	; 4
    47b0:	21 e0       	ldi	r18, 0x01	; 1
    47b2:	fc 01       	movw	r30, r24
    47b4:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    47b6:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <rtc_data+0x6>
    47ba:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <rtc_data+0x7>
    47be:	89 2b       	or	r24, r25
    47c0:	09 f4       	brne	.+2      	; 0x47c4 <__vector_11+0x8a>
    47c2:	57 c0       	rjmp	.+174    	; 0x4872 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    47c4:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <rtc_data>
    47c8:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <rtc_data+0x1>
    47cc:	cc 01       	movw	r24, r24
    47ce:	a0 e0       	ldi	r26, 0x00	; 0
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	ac 01       	movw	r20, r24
    47d4:	33 27       	eor	r19, r19
    47d6:	22 27       	eor	r18, r18
					| RTC.CNT;
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	94 e0       	ldi	r25, 0x04	; 4
    47dc:	fc 01       	movw	r30, r24
    47de:	80 85       	ldd	r24, Z+8	; 0x08
    47e0:	91 85       	ldd	r25, Z+9	; 0x09
    47e2:	cc 01       	movw	r24, r24
    47e4:	a0 e0       	ldi	r26, 0x00	; 0
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    47e8:	82 2b       	or	r24, r18
    47ea:	93 2b       	or	r25, r19
    47ec:	a4 2b       	or	r26, r20
    47ee:	b5 2b       	or	r27, r21
    47f0:	89 83       	std	Y+1, r24	; 0x01
    47f2:	9a 83       	std	Y+2, r25	; 0x02
    47f4:	ab 83       	std	Y+3, r26	; 0x03
    47f6:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    47f8:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <rtc_data+0x2>
    47fc:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <rtc_data+0x3>
    4800:	cc 01       	movw	r24, r24
    4802:	a0 e0       	ldi	r26, 0x00	; 0
    4804:	b0 e0       	ldi	r27, 0x00	; 0
    4806:	ac 01       	movw	r20, r24
    4808:	33 27       	eor	r19, r19
    480a:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    480c:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <rtc_data+0x4>
    4810:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <rtc_data+0x5>
    4814:	cc 01       	movw	r24, r24
    4816:	a0 e0       	ldi	r26, 0x00	; 0
    4818:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    481a:	82 2b       	or	r24, r18
    481c:	93 2b       	or	r25, r19
    481e:	a4 2b       	or	r26, r20
    4820:	b5 2b       	or	r27, r21
    4822:	8d 83       	std	Y+5, r24	; 0x05
    4824:	9e 83       	std	Y+6, r25	; 0x06
    4826:	af 83       	std	Y+7, r26	; 0x07
    4828:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    482a:	2d 81       	ldd	r18, Y+5	; 0x05
    482c:	3e 81       	ldd	r19, Y+6	; 0x06
    482e:	4f 81       	ldd	r20, Y+7	; 0x07
    4830:	58 85       	ldd	r21, Y+8	; 0x08
    4832:	89 81       	ldd	r24, Y+1	; 0x01
    4834:	9a 81       	ldd	r25, Y+2	; 0x02
    4836:	ab 81       	ldd	r26, Y+3	; 0x03
    4838:	bc 81       	ldd	r27, Y+4	; 0x04
    483a:	28 17       	cp	r18, r24
    483c:	39 07       	cpc	r19, r25
    483e:	4a 07       	cpc	r20, r26
    4840:	5b 07       	cpc	r21, r27
    4842:	58 f0       	brcs	.+22     	; 0x485a <__vector_11+0x120>
				count = alarm + 1;
    4844:	8d 81       	ldd	r24, Y+5	; 0x05
    4846:	9e 81       	ldd	r25, Y+6	; 0x06
    4848:	af 81       	ldd	r26, Y+7	; 0x07
    484a:	b8 85       	ldd	r27, Y+8	; 0x08
    484c:	01 96       	adiw	r24, 0x01	; 1
    484e:	a1 1d       	adc	r26, r1
    4850:	b1 1d       	adc	r27, r1
    4852:	89 83       	std	Y+1, r24	; 0x01
    4854:	9a 83       	std	Y+2, r25	; 0x02
    4856:	ab 83       	std	Y+3, r26	; 0x03
    4858:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    485a:	20 91 43 23 	lds	r18, 0x2343	; 0x802343 <rtc_data+0x6>
    485e:	30 91 44 23 	lds	r19, 0x2344	; 0x802344 <rtc_data+0x7>
    4862:	89 81       	ldd	r24, Y+1	; 0x01
    4864:	9a 81       	ldd	r25, Y+2	; 0x02
    4866:	ab 81       	ldd	r26, Y+3	; 0x03
    4868:	bc 81       	ldd	r27, Y+4	; 0x04
    486a:	bc 01       	movw	r22, r24
    486c:	cd 01       	movw	r24, r26
    486e:	f9 01       	movw	r30, r18
    4870:	19 95       	eicall
		}
	}
}
    4872:	00 00       	nop
    4874:	28 96       	adiw	r28, 0x08	; 8
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	df 91       	pop	r29
    487c:	cf 91       	pop	r28
    487e:	ff 91       	pop	r31
    4880:	ef 91       	pop	r30
    4882:	bf 91       	pop	r27
    4884:	af 91       	pop	r26
    4886:	9f 91       	pop	r25
    4888:	8f 91       	pop	r24
    488a:	7f 91       	pop	r23
    488c:	6f 91       	pop	r22
    488e:	5f 91       	pop	r21
    4890:	4f 91       	pop	r20
    4892:	3f 91       	pop	r19
    4894:	2f 91       	pop	r18
    4896:	0f 90       	pop	r0
    4898:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    489c:	0f 90       	pop	r0
    489e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    48a2:	0f 90       	pop	r0
    48a4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    48a8:	0f 90       	pop	r0
    48aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    48ae:	0f 90       	pop	r0
    48b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    48b4:	0f 90       	pop	r0
    48b6:	1f 90       	pop	r1
    48b8:	18 95       	reti

000048ba <cpu_irq_save>:
	// Leave the critical section
	cpu_irq_restore(flags);
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    48ba:	cf 93       	push	r28
    48bc:	df 93       	push	r29
    48be:	1f 92       	push	r1
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	8f e3       	ldi	r24, 0x3F	; 63
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	fc 01       	movw	r30, r24
    48ca:	80 81       	ld	r24, Z
    48cc:	89 83       	std	Y+1, r24	; 0x01
    48ce:	f8 94       	cli
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	0f 90       	pop	r0
    48d4:	df 91       	pop	r29
    48d6:	cf 91       	pop	r28
    48d8:	08 95       	ret

000048da <cpu_irq_restore>:
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	1f 92       	push	r1
    48e0:	cd b7       	in	r28, 0x3d	; 61
    48e2:	de b7       	in	r29, 0x3e	; 62
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	8f e3       	ldi	r24, 0x3F	; 63
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	29 81       	ldd	r18, Y+1	; 0x01
    48ec:	fc 01       	movw	r30, r24
    48ee:	20 83       	st	Z, r18
    48f0:	00 00       	nop
    48f2:	0f 90       	pop	r0
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	08 95       	ret

000048fa <sleepmgr_lock_mode>:
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	1f 92       	push	r1
    4900:	1f 92       	push	r1
    4902:	cd b7       	in	r28, 0x3d	; 61
    4904:	de b7       	in	r29, 0x3e	; 62
    4906:	8a 83       	std	Y+2, r24	; 0x02
    4908:	8a 81       	ldd	r24, Y+2	; 0x02
    490a:	88 2f       	mov	r24, r24
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	8f 5c       	subi	r24, 0xCF	; 207
    4910:	9c 4d       	sbci	r25, 0xDC	; 220
    4912:	fc 01       	movw	r30, r24
    4914:	80 81       	ld	r24, Z
    4916:	8f 3f       	cpi	r24, 0xFF	; 255
    4918:	09 f4       	brne	.+2      	; 0x491c <sleepmgr_lock_mode+0x22>
    491a:	ff cf       	rjmp	.-2      	; 0x491a <sleepmgr_lock_mode+0x20>
    491c:	ce df       	rcall	.-100    	; 0x48ba <cpu_irq_save>
    491e:	89 83       	std	Y+1, r24	; 0x01
    4920:	8a 81       	ldd	r24, Y+2	; 0x02
    4922:	88 2f       	mov	r24, r24
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	9c 01       	movw	r18, r24
    4928:	2f 5c       	subi	r18, 0xCF	; 207
    492a:	3c 4d       	sbci	r19, 0xDC	; 220
    492c:	f9 01       	movw	r30, r18
    492e:	20 81       	ld	r18, Z
    4930:	2f 5f       	subi	r18, 0xFF	; 255
    4932:	8f 5c       	subi	r24, 0xCF	; 207
    4934:	9c 4d       	sbci	r25, 0xDC	; 220
    4936:	fc 01       	movw	r30, r24
    4938:	20 83       	st	Z, r18
    493a:	89 81       	ldd	r24, Y+1	; 0x01
    493c:	ce df       	rcall	.-100    	; 0x48da <cpu_irq_restore>
    493e:	00 00       	nop
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	08 95       	ret

0000494a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    494a:	1f 92       	push	r1
    494c:	0f 92       	push	r0
    494e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4952:	0f 92       	push	r0
    4954:	11 24       	eor	r1, r1
    4956:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    495a:	0f 92       	push	r0
    495c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4960:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4964:	0f 92       	push	r0
    4966:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    496a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    496e:	0f 92       	push	r0
    4970:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4974:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4978:	0f 92       	push	r0
    497a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    497e:	2f 93       	push	r18
    4980:	3f 93       	push	r19
    4982:	4f 93       	push	r20
    4984:	5f 93       	push	r21
    4986:	6f 93       	push	r22
    4988:	7f 93       	push	r23
    498a:	8f 93       	push	r24
    498c:	9f 93       	push	r25
    498e:	af 93       	push	r26
    4990:	bf 93       	push	r27
    4992:	ef 93       	push	r30
    4994:	ff 93       	push	r31
    4996:	cf 93       	push	r28
    4998:	df 93       	push	r29
    499a:	cd b7       	in	r28, 0x3d	; 61
    499c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    499e:	80 91 7a 22 	lds	r24, 0x227A	; 0x80227a <tc_tcc0_ovf_callback>
    49a2:	90 91 7b 22 	lds	r25, 0x227B	; 0x80227b <tc_tcc0_ovf_callback+0x1>
    49a6:	89 2b       	or	r24, r25
    49a8:	31 f0       	breq	.+12     	; 0x49b6 <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    49aa:	80 91 7a 22 	lds	r24, 0x227A	; 0x80227a <tc_tcc0_ovf_callback>
    49ae:	90 91 7b 22 	lds	r25, 0x227B	; 0x80227b <tc_tcc0_ovf_callback+0x1>
    49b2:	fc 01       	movw	r30, r24
    49b4:	19 95       	eicall
	}
}
    49b6:	00 00       	nop
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	ff 91       	pop	r31
    49be:	ef 91       	pop	r30
    49c0:	bf 91       	pop	r27
    49c2:	af 91       	pop	r26
    49c4:	9f 91       	pop	r25
    49c6:	8f 91       	pop	r24
    49c8:	7f 91       	pop	r23
    49ca:	6f 91       	pop	r22
    49cc:	5f 91       	pop	r21
    49ce:	4f 91       	pop	r20
    49d0:	3f 91       	pop	r19
    49d2:	2f 91       	pop	r18
    49d4:	0f 90       	pop	r0
    49d6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    49da:	0f 90       	pop	r0
    49dc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    49e0:	0f 90       	pop	r0
    49e2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49e6:	0f 90       	pop	r0
    49e8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49ec:	0f 90       	pop	r0
    49ee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    49f2:	0f 90       	pop	r0
    49f4:	1f 90       	pop	r1
    49f6:	18 95       	reti

000049f8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    49f8:	1f 92       	push	r1
    49fa:	0f 92       	push	r0
    49fc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a00:	0f 92       	push	r0
    4a02:	11 24       	eor	r1, r1
    4a04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a08:	0f 92       	push	r0
    4a0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a12:	0f 92       	push	r0
    4a14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a1c:	0f 92       	push	r0
    4a1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a26:	0f 92       	push	r0
    4a28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a2c:	2f 93       	push	r18
    4a2e:	3f 93       	push	r19
    4a30:	4f 93       	push	r20
    4a32:	5f 93       	push	r21
    4a34:	6f 93       	push	r22
    4a36:	7f 93       	push	r23
    4a38:	8f 93       	push	r24
    4a3a:	9f 93       	push	r25
    4a3c:	af 93       	push	r26
    4a3e:	bf 93       	push	r27
    4a40:	ef 93       	push	r30
    4a42:	ff 93       	push	r31
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    4a4c:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <tc_tcc0_err_callback>
    4a50:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <tc_tcc0_err_callback+0x1>
    4a54:	89 2b       	or	r24, r25
    4a56:	31 f0       	breq	.+12     	; 0x4a64 <__vector_15+0x6c>
		tc_tcc0_err_callback();
    4a58:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <tc_tcc0_err_callback>
    4a5c:	90 91 7d 22 	lds	r25, 0x227D	; 0x80227d <tc_tcc0_err_callback+0x1>
    4a60:	fc 01       	movw	r30, r24
    4a62:	19 95       	eicall
	}
}
    4a64:	00 00       	nop
    4a66:	df 91       	pop	r29
    4a68:	cf 91       	pop	r28
    4a6a:	ff 91       	pop	r31
    4a6c:	ef 91       	pop	r30
    4a6e:	bf 91       	pop	r27
    4a70:	af 91       	pop	r26
    4a72:	9f 91       	pop	r25
    4a74:	8f 91       	pop	r24
    4a76:	7f 91       	pop	r23
    4a78:	6f 91       	pop	r22
    4a7a:	5f 91       	pop	r21
    4a7c:	4f 91       	pop	r20
    4a7e:	3f 91       	pop	r19
    4a80:	2f 91       	pop	r18
    4a82:	0f 90       	pop	r0
    4a84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a88:	0f 90       	pop	r0
    4a8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a8e:	0f 90       	pop	r0
    4a90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a94:	0f 90       	pop	r0
    4a96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a9a:	0f 90       	pop	r0
    4a9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4aa0:	0f 90       	pop	r0
    4aa2:	1f 90       	pop	r1
    4aa4:	18 95       	reti

00004aa6 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    4aa6:	1f 92       	push	r1
    4aa8:	0f 92       	push	r0
    4aaa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4aae:	0f 92       	push	r0
    4ab0:	11 24       	eor	r1, r1
    4ab2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ab6:	0f 92       	push	r0
    4ab8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4abc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ac0:	0f 92       	push	r0
    4ac2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ac6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4aca:	0f 92       	push	r0
    4acc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ad0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ad4:	0f 92       	push	r0
    4ad6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ada:	2f 93       	push	r18
    4adc:	3f 93       	push	r19
    4ade:	4f 93       	push	r20
    4ae0:	5f 93       	push	r21
    4ae2:	6f 93       	push	r22
    4ae4:	7f 93       	push	r23
    4ae6:	8f 93       	push	r24
    4ae8:	9f 93       	push	r25
    4aea:	af 93       	push	r26
    4aec:	bf 93       	push	r27
    4aee:	ef 93       	push	r30
    4af0:	ff 93       	push	r31
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    4afa:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <tc_tcc0_cca_callback>
    4afe:	90 91 7f 22 	lds	r25, 0x227F	; 0x80227f <tc_tcc0_cca_callback+0x1>
    4b02:	89 2b       	or	r24, r25
    4b04:	31 f0       	breq	.+12     	; 0x4b12 <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    4b06:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <tc_tcc0_cca_callback>
    4b0a:	90 91 7f 22 	lds	r25, 0x227F	; 0x80227f <tc_tcc0_cca_callback+0x1>
    4b0e:	fc 01       	movw	r30, r24
    4b10:	19 95       	eicall
	}
}
    4b12:	00 00       	nop
    4b14:	df 91       	pop	r29
    4b16:	cf 91       	pop	r28
    4b18:	ff 91       	pop	r31
    4b1a:	ef 91       	pop	r30
    4b1c:	bf 91       	pop	r27
    4b1e:	af 91       	pop	r26
    4b20:	9f 91       	pop	r25
    4b22:	8f 91       	pop	r24
    4b24:	7f 91       	pop	r23
    4b26:	6f 91       	pop	r22
    4b28:	5f 91       	pop	r21
    4b2a:	4f 91       	pop	r20
    4b2c:	3f 91       	pop	r19
    4b2e:	2f 91       	pop	r18
    4b30:	0f 90       	pop	r0
    4b32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b36:	0f 90       	pop	r0
    4b38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b3c:	0f 90       	pop	r0
    4b3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b42:	0f 90       	pop	r0
    4b44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b48:	0f 90       	pop	r0
    4b4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b4e:	0f 90       	pop	r0
    4b50:	1f 90       	pop	r1
    4b52:	18 95       	reti

00004b54 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    4b54:	1f 92       	push	r1
    4b56:	0f 92       	push	r0
    4b58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b5c:	0f 92       	push	r0
    4b5e:	11 24       	eor	r1, r1
    4b60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b64:	0f 92       	push	r0
    4b66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b6e:	0f 92       	push	r0
    4b70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b78:	0f 92       	push	r0
    4b7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b82:	0f 92       	push	r0
    4b84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b88:	2f 93       	push	r18
    4b8a:	3f 93       	push	r19
    4b8c:	4f 93       	push	r20
    4b8e:	5f 93       	push	r21
    4b90:	6f 93       	push	r22
    4b92:	7f 93       	push	r23
    4b94:	8f 93       	push	r24
    4b96:	9f 93       	push	r25
    4b98:	af 93       	push	r26
    4b9a:	bf 93       	push	r27
    4b9c:	ef 93       	push	r30
    4b9e:	ff 93       	push	r31
    4ba0:	cf 93       	push	r28
    4ba2:	df 93       	push	r29
    4ba4:	cd b7       	in	r28, 0x3d	; 61
    4ba6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    4ba8:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <tc_tcc0_ccb_callback>
    4bac:	90 91 81 22 	lds	r25, 0x2281	; 0x802281 <tc_tcc0_ccb_callback+0x1>
    4bb0:	89 2b       	or	r24, r25
    4bb2:	31 f0       	breq	.+12     	; 0x4bc0 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    4bb4:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <tc_tcc0_ccb_callback>
    4bb8:	90 91 81 22 	lds	r25, 0x2281	; 0x802281 <tc_tcc0_ccb_callback+0x1>
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	19 95       	eicall
	}
}
    4bc0:	00 00       	nop
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	ff 91       	pop	r31
    4bc8:	ef 91       	pop	r30
    4bca:	bf 91       	pop	r27
    4bcc:	af 91       	pop	r26
    4bce:	9f 91       	pop	r25
    4bd0:	8f 91       	pop	r24
    4bd2:	7f 91       	pop	r23
    4bd4:	6f 91       	pop	r22
    4bd6:	5f 91       	pop	r21
    4bd8:	4f 91       	pop	r20
    4bda:	3f 91       	pop	r19
    4bdc:	2f 91       	pop	r18
    4bde:	0f 90       	pop	r0
    4be0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4be4:	0f 90       	pop	r0
    4be6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4bea:	0f 90       	pop	r0
    4bec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4bf0:	0f 90       	pop	r0
    4bf2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bf6:	0f 90       	pop	r0
    4bf8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4bfc:	0f 90       	pop	r0
    4bfe:	1f 90       	pop	r1
    4c00:	18 95       	reti

00004c02 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    4c02:	1f 92       	push	r1
    4c04:	0f 92       	push	r0
    4c06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c0a:	0f 92       	push	r0
    4c0c:	11 24       	eor	r1, r1
    4c0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c12:	0f 92       	push	r0
    4c14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c1c:	0f 92       	push	r0
    4c1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c26:	0f 92       	push	r0
    4c28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c30:	0f 92       	push	r0
    4c32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c36:	2f 93       	push	r18
    4c38:	3f 93       	push	r19
    4c3a:	4f 93       	push	r20
    4c3c:	5f 93       	push	r21
    4c3e:	6f 93       	push	r22
    4c40:	7f 93       	push	r23
    4c42:	8f 93       	push	r24
    4c44:	9f 93       	push	r25
    4c46:	af 93       	push	r26
    4c48:	bf 93       	push	r27
    4c4a:	ef 93       	push	r30
    4c4c:	ff 93       	push	r31
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	cd b7       	in	r28, 0x3d	; 61
    4c54:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    4c56:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <tc_tcc0_ccc_callback>
    4c5a:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <tc_tcc0_ccc_callback+0x1>
    4c5e:	89 2b       	or	r24, r25
    4c60:	31 f0       	breq	.+12     	; 0x4c6e <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    4c62:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <tc_tcc0_ccc_callback>
    4c66:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <tc_tcc0_ccc_callback+0x1>
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	19 95       	eicall
	}
}
    4c6e:	00 00       	nop
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	ff 91       	pop	r31
    4c76:	ef 91       	pop	r30
    4c78:	bf 91       	pop	r27
    4c7a:	af 91       	pop	r26
    4c7c:	9f 91       	pop	r25
    4c7e:	8f 91       	pop	r24
    4c80:	7f 91       	pop	r23
    4c82:	6f 91       	pop	r22
    4c84:	5f 91       	pop	r21
    4c86:	4f 91       	pop	r20
    4c88:	3f 91       	pop	r19
    4c8a:	2f 91       	pop	r18
    4c8c:	0f 90       	pop	r0
    4c8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c92:	0f 90       	pop	r0
    4c94:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c98:	0f 90       	pop	r0
    4c9a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c9e:	0f 90       	pop	r0
    4ca0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ca4:	0f 90       	pop	r0
    4ca6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4caa:	0f 90       	pop	r0
    4cac:	1f 90       	pop	r1
    4cae:	18 95       	reti

00004cb0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    4cb0:	1f 92       	push	r1
    4cb2:	0f 92       	push	r0
    4cb4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4cb8:	0f 92       	push	r0
    4cba:	11 24       	eor	r1, r1
    4cbc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4cc0:	0f 92       	push	r0
    4cc2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4cc6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4cca:	0f 92       	push	r0
    4ccc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4cd0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4cd4:	0f 92       	push	r0
    4cd6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4cda:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4cde:	0f 92       	push	r0
    4ce0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ce4:	2f 93       	push	r18
    4ce6:	3f 93       	push	r19
    4ce8:	4f 93       	push	r20
    4cea:	5f 93       	push	r21
    4cec:	6f 93       	push	r22
    4cee:	7f 93       	push	r23
    4cf0:	8f 93       	push	r24
    4cf2:	9f 93       	push	r25
    4cf4:	af 93       	push	r26
    4cf6:	bf 93       	push	r27
    4cf8:	ef 93       	push	r30
    4cfa:	ff 93       	push	r31
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    4d04:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <tc_tcc0_ccd_callback>
    4d08:	90 91 85 22 	lds	r25, 0x2285	; 0x802285 <tc_tcc0_ccd_callback+0x1>
    4d0c:	89 2b       	or	r24, r25
    4d0e:	31 f0       	breq	.+12     	; 0x4d1c <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    4d10:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <tc_tcc0_ccd_callback>
    4d14:	90 91 85 22 	lds	r25, 0x2285	; 0x802285 <tc_tcc0_ccd_callback+0x1>
    4d18:	fc 01       	movw	r30, r24
    4d1a:	19 95       	eicall
	}
}
    4d1c:	00 00       	nop
    4d1e:	df 91       	pop	r29
    4d20:	cf 91       	pop	r28
    4d22:	ff 91       	pop	r31
    4d24:	ef 91       	pop	r30
    4d26:	bf 91       	pop	r27
    4d28:	af 91       	pop	r26
    4d2a:	9f 91       	pop	r25
    4d2c:	8f 91       	pop	r24
    4d2e:	7f 91       	pop	r23
    4d30:	6f 91       	pop	r22
    4d32:	5f 91       	pop	r21
    4d34:	4f 91       	pop	r20
    4d36:	3f 91       	pop	r19
    4d38:	2f 91       	pop	r18
    4d3a:	0f 90       	pop	r0
    4d3c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d40:	0f 90       	pop	r0
    4d42:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d46:	0f 90       	pop	r0
    4d48:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d4c:	0f 90       	pop	r0
    4d4e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d52:	0f 90       	pop	r0
    4d54:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d58:	0f 90       	pop	r0
    4d5a:	1f 90       	pop	r1
    4d5c:	18 95       	reti

00004d5e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    4d5e:	1f 92       	push	r1
    4d60:	0f 92       	push	r0
    4d62:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d66:	0f 92       	push	r0
    4d68:	11 24       	eor	r1, r1
    4d6a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d6e:	0f 92       	push	r0
    4d70:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d74:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d78:	0f 92       	push	r0
    4d7a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d7e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d82:	0f 92       	push	r0
    4d84:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d88:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d8c:	0f 92       	push	r0
    4d8e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d92:	2f 93       	push	r18
    4d94:	3f 93       	push	r19
    4d96:	4f 93       	push	r20
    4d98:	5f 93       	push	r21
    4d9a:	6f 93       	push	r22
    4d9c:	7f 93       	push	r23
    4d9e:	8f 93       	push	r24
    4da0:	9f 93       	push	r25
    4da2:	af 93       	push	r26
    4da4:	bf 93       	push	r27
    4da6:	ef 93       	push	r30
    4da8:	ff 93       	push	r31
    4daa:	cf 93       	push	r28
    4dac:	df 93       	push	r29
    4dae:	cd b7       	in	r28, 0x3d	; 61
    4db0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    4db2:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <tc_tcc1_ovf_callback>
    4db6:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <tc_tcc1_ovf_callback+0x1>
    4dba:	89 2b       	or	r24, r25
    4dbc:	31 f0       	breq	.+12     	; 0x4dca <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    4dbe:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <tc_tcc1_ovf_callback>
    4dc2:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <tc_tcc1_ovf_callback+0x1>
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	19 95       	eicall
	}
}
    4dca:	00 00       	nop
    4dcc:	df 91       	pop	r29
    4dce:	cf 91       	pop	r28
    4dd0:	ff 91       	pop	r31
    4dd2:	ef 91       	pop	r30
    4dd4:	bf 91       	pop	r27
    4dd6:	af 91       	pop	r26
    4dd8:	9f 91       	pop	r25
    4dda:	8f 91       	pop	r24
    4ddc:	7f 91       	pop	r23
    4dde:	6f 91       	pop	r22
    4de0:	5f 91       	pop	r21
    4de2:	4f 91       	pop	r20
    4de4:	3f 91       	pop	r19
    4de6:	2f 91       	pop	r18
    4de8:	0f 90       	pop	r0
    4dea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4dee:	0f 90       	pop	r0
    4df0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4df4:	0f 90       	pop	r0
    4df6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4dfa:	0f 90       	pop	r0
    4dfc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e00:	0f 90       	pop	r0
    4e02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e06:	0f 90       	pop	r0
    4e08:	1f 90       	pop	r1
    4e0a:	18 95       	reti

00004e0c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    4e0c:	1f 92       	push	r1
    4e0e:	0f 92       	push	r0
    4e10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e14:	0f 92       	push	r0
    4e16:	11 24       	eor	r1, r1
    4e18:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e1c:	0f 92       	push	r0
    4e1e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e22:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e26:	0f 92       	push	r0
    4e28:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e2c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e30:	0f 92       	push	r0
    4e32:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e36:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e3a:	0f 92       	push	r0
    4e3c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e40:	2f 93       	push	r18
    4e42:	3f 93       	push	r19
    4e44:	4f 93       	push	r20
    4e46:	5f 93       	push	r21
    4e48:	6f 93       	push	r22
    4e4a:	7f 93       	push	r23
    4e4c:	8f 93       	push	r24
    4e4e:	9f 93       	push	r25
    4e50:	af 93       	push	r26
    4e52:	bf 93       	push	r27
    4e54:	ef 93       	push	r30
    4e56:	ff 93       	push	r31
    4e58:	cf 93       	push	r28
    4e5a:	df 93       	push	r29
    4e5c:	cd b7       	in	r28, 0x3d	; 61
    4e5e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    4e60:	80 91 88 22 	lds	r24, 0x2288	; 0x802288 <tc_tcc1_err_callback>
    4e64:	90 91 89 22 	lds	r25, 0x2289	; 0x802289 <tc_tcc1_err_callback+0x1>
    4e68:	89 2b       	or	r24, r25
    4e6a:	31 f0       	breq	.+12     	; 0x4e78 <__vector_21+0x6c>
		tc_tcc1_err_callback();
    4e6c:	80 91 88 22 	lds	r24, 0x2288	; 0x802288 <tc_tcc1_err_callback>
    4e70:	90 91 89 22 	lds	r25, 0x2289	; 0x802289 <tc_tcc1_err_callback+0x1>
    4e74:	fc 01       	movw	r30, r24
    4e76:	19 95       	eicall
	}
}
    4e78:	00 00       	nop
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	ff 91       	pop	r31
    4e80:	ef 91       	pop	r30
    4e82:	bf 91       	pop	r27
    4e84:	af 91       	pop	r26
    4e86:	9f 91       	pop	r25
    4e88:	8f 91       	pop	r24
    4e8a:	7f 91       	pop	r23
    4e8c:	6f 91       	pop	r22
    4e8e:	5f 91       	pop	r21
    4e90:	4f 91       	pop	r20
    4e92:	3f 91       	pop	r19
    4e94:	2f 91       	pop	r18
    4e96:	0f 90       	pop	r0
    4e98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e9c:	0f 90       	pop	r0
    4e9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ea2:	0f 90       	pop	r0
    4ea4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ea8:	0f 90       	pop	r0
    4eaa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4eae:	0f 90       	pop	r0
    4eb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4eb4:	0f 90       	pop	r0
    4eb6:	1f 90       	pop	r1
    4eb8:	18 95       	reti

00004eba <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    4eba:	1f 92       	push	r1
    4ebc:	0f 92       	push	r0
    4ebe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ec2:	0f 92       	push	r0
    4ec4:	11 24       	eor	r1, r1
    4ec6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4eca:	0f 92       	push	r0
    4ecc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ed0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ed4:	0f 92       	push	r0
    4ed6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4eda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ede:	0f 92       	push	r0
    4ee0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ee4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ee8:	0f 92       	push	r0
    4eea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4eee:	2f 93       	push	r18
    4ef0:	3f 93       	push	r19
    4ef2:	4f 93       	push	r20
    4ef4:	5f 93       	push	r21
    4ef6:	6f 93       	push	r22
    4ef8:	7f 93       	push	r23
    4efa:	8f 93       	push	r24
    4efc:	9f 93       	push	r25
    4efe:	af 93       	push	r26
    4f00:	bf 93       	push	r27
    4f02:	ef 93       	push	r30
    4f04:	ff 93       	push	r31
    4f06:	cf 93       	push	r28
    4f08:	df 93       	push	r29
    4f0a:	cd b7       	in	r28, 0x3d	; 61
    4f0c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    4f0e:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <tc_tcc1_cca_callback>
    4f12:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <tc_tcc1_cca_callback+0x1>
    4f16:	89 2b       	or	r24, r25
    4f18:	31 f0       	breq	.+12     	; 0x4f26 <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    4f1a:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <tc_tcc1_cca_callback>
    4f1e:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <tc_tcc1_cca_callback+0x1>
    4f22:	fc 01       	movw	r30, r24
    4f24:	19 95       	eicall
	}
}
    4f26:	00 00       	nop
    4f28:	df 91       	pop	r29
    4f2a:	cf 91       	pop	r28
    4f2c:	ff 91       	pop	r31
    4f2e:	ef 91       	pop	r30
    4f30:	bf 91       	pop	r27
    4f32:	af 91       	pop	r26
    4f34:	9f 91       	pop	r25
    4f36:	8f 91       	pop	r24
    4f38:	7f 91       	pop	r23
    4f3a:	6f 91       	pop	r22
    4f3c:	5f 91       	pop	r21
    4f3e:	4f 91       	pop	r20
    4f40:	3f 91       	pop	r19
    4f42:	2f 91       	pop	r18
    4f44:	0f 90       	pop	r0
    4f46:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f4a:	0f 90       	pop	r0
    4f4c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f50:	0f 90       	pop	r0
    4f52:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f56:	0f 90       	pop	r0
    4f58:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f5c:	0f 90       	pop	r0
    4f5e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f62:	0f 90       	pop	r0
    4f64:	1f 90       	pop	r1
    4f66:	18 95       	reti

00004f68 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    4f68:	1f 92       	push	r1
    4f6a:	0f 92       	push	r0
    4f6c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f70:	0f 92       	push	r0
    4f72:	11 24       	eor	r1, r1
    4f74:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f78:	0f 92       	push	r0
    4f7a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f7e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f82:	0f 92       	push	r0
    4f84:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f88:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f8c:	0f 92       	push	r0
    4f8e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f92:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f96:	0f 92       	push	r0
    4f98:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f9c:	2f 93       	push	r18
    4f9e:	3f 93       	push	r19
    4fa0:	4f 93       	push	r20
    4fa2:	5f 93       	push	r21
    4fa4:	6f 93       	push	r22
    4fa6:	7f 93       	push	r23
    4fa8:	8f 93       	push	r24
    4faa:	9f 93       	push	r25
    4fac:	af 93       	push	r26
    4fae:	bf 93       	push	r27
    4fb0:	ef 93       	push	r30
    4fb2:	ff 93       	push	r31
    4fb4:	cf 93       	push	r28
    4fb6:	df 93       	push	r29
    4fb8:	cd b7       	in	r28, 0x3d	; 61
    4fba:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    4fbc:	80 91 8c 22 	lds	r24, 0x228C	; 0x80228c <tc_tcc1_ccb_callback>
    4fc0:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <tc_tcc1_ccb_callback+0x1>
    4fc4:	89 2b       	or	r24, r25
    4fc6:	31 f0       	breq	.+12     	; 0x4fd4 <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    4fc8:	80 91 8c 22 	lds	r24, 0x228C	; 0x80228c <tc_tcc1_ccb_callback>
    4fcc:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <tc_tcc1_ccb_callback+0x1>
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	19 95       	eicall
	}
}
    4fd4:	00 00       	nop
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	ff 91       	pop	r31
    4fdc:	ef 91       	pop	r30
    4fde:	bf 91       	pop	r27
    4fe0:	af 91       	pop	r26
    4fe2:	9f 91       	pop	r25
    4fe4:	8f 91       	pop	r24
    4fe6:	7f 91       	pop	r23
    4fe8:	6f 91       	pop	r22
    4fea:	5f 91       	pop	r21
    4fec:	4f 91       	pop	r20
    4fee:	3f 91       	pop	r19
    4ff0:	2f 91       	pop	r18
    4ff2:	0f 90       	pop	r0
    4ff4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ff8:	0f 90       	pop	r0
    4ffa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ffe:	0f 90       	pop	r0
    5000:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5004:	0f 90       	pop	r0
    5006:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    500a:	0f 90       	pop	r0
    500c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5010:	0f 90       	pop	r0
    5012:	1f 90       	pop	r1
    5014:	18 95       	reti

00005016 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    5016:	1f 92       	push	r1
    5018:	0f 92       	push	r0
    501a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    501e:	0f 92       	push	r0
    5020:	11 24       	eor	r1, r1
    5022:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5026:	0f 92       	push	r0
    5028:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    502c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5030:	0f 92       	push	r0
    5032:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5036:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    503a:	0f 92       	push	r0
    503c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5040:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5044:	0f 92       	push	r0
    5046:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    504a:	2f 93       	push	r18
    504c:	3f 93       	push	r19
    504e:	4f 93       	push	r20
    5050:	5f 93       	push	r21
    5052:	6f 93       	push	r22
    5054:	7f 93       	push	r23
    5056:	8f 93       	push	r24
    5058:	9f 93       	push	r25
    505a:	af 93       	push	r26
    505c:	bf 93       	push	r27
    505e:	ef 93       	push	r30
    5060:	ff 93       	push	r31
    5062:	cf 93       	push	r28
    5064:	df 93       	push	r29
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    506a:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <tc_tcd0_ovf_callback>
    506e:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <tc_tcd0_ovf_callback+0x1>
    5072:	89 2b       	or	r24, r25
    5074:	31 f0       	breq	.+12     	; 0x5082 <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    5076:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <tc_tcd0_ovf_callback>
    507a:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <tc_tcd0_ovf_callback+0x1>
    507e:	fc 01       	movw	r30, r24
    5080:	19 95       	eicall
	}
}
    5082:	00 00       	nop
    5084:	df 91       	pop	r29
    5086:	cf 91       	pop	r28
    5088:	ff 91       	pop	r31
    508a:	ef 91       	pop	r30
    508c:	bf 91       	pop	r27
    508e:	af 91       	pop	r26
    5090:	9f 91       	pop	r25
    5092:	8f 91       	pop	r24
    5094:	7f 91       	pop	r23
    5096:	6f 91       	pop	r22
    5098:	5f 91       	pop	r21
    509a:	4f 91       	pop	r20
    509c:	3f 91       	pop	r19
    509e:	2f 91       	pop	r18
    50a0:	0f 90       	pop	r0
    50a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50a6:	0f 90       	pop	r0
    50a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50ac:	0f 90       	pop	r0
    50ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    50b2:	0f 90       	pop	r0
    50b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    50b8:	0f 90       	pop	r0
    50ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    50be:	0f 90       	pop	r0
    50c0:	1f 90       	pop	r1
    50c2:	18 95       	reti

000050c4 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    50c4:	1f 92       	push	r1
    50c6:	0f 92       	push	r0
    50c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    50cc:	0f 92       	push	r0
    50ce:	11 24       	eor	r1, r1
    50d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    50d4:	0f 92       	push	r0
    50d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    50da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    50de:	0f 92       	push	r0
    50e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    50e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50e8:	0f 92       	push	r0
    50ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50f2:	0f 92       	push	r0
    50f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50f8:	2f 93       	push	r18
    50fa:	3f 93       	push	r19
    50fc:	4f 93       	push	r20
    50fe:	5f 93       	push	r21
    5100:	6f 93       	push	r22
    5102:	7f 93       	push	r23
    5104:	8f 93       	push	r24
    5106:	9f 93       	push	r25
    5108:	af 93       	push	r26
    510a:	bf 93       	push	r27
    510c:	ef 93       	push	r30
    510e:	ff 93       	push	r31
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    5118:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <tc_tcd0_err_callback>
    511c:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <tc_tcd0_err_callback+0x1>
    5120:	89 2b       	or	r24, r25
    5122:	31 f0       	breq	.+12     	; 0x5130 <__vector_78+0x6c>
		tc_tcd0_err_callback();
    5124:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <tc_tcd0_err_callback>
    5128:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <tc_tcd0_err_callback+0x1>
    512c:	fc 01       	movw	r30, r24
    512e:	19 95       	eicall
	}
}
    5130:	00 00       	nop
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	ff 91       	pop	r31
    5138:	ef 91       	pop	r30
    513a:	bf 91       	pop	r27
    513c:	af 91       	pop	r26
    513e:	9f 91       	pop	r25
    5140:	8f 91       	pop	r24
    5142:	7f 91       	pop	r23
    5144:	6f 91       	pop	r22
    5146:	5f 91       	pop	r21
    5148:	4f 91       	pop	r20
    514a:	3f 91       	pop	r19
    514c:	2f 91       	pop	r18
    514e:	0f 90       	pop	r0
    5150:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5154:	0f 90       	pop	r0
    5156:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    515a:	0f 90       	pop	r0
    515c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5160:	0f 90       	pop	r0
    5162:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5166:	0f 90       	pop	r0
    5168:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    516c:	0f 90       	pop	r0
    516e:	1f 90       	pop	r1
    5170:	18 95       	reti

00005172 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    5172:	1f 92       	push	r1
    5174:	0f 92       	push	r0
    5176:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    517a:	0f 92       	push	r0
    517c:	11 24       	eor	r1, r1
    517e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5182:	0f 92       	push	r0
    5184:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5188:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    518c:	0f 92       	push	r0
    518e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5192:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5196:	0f 92       	push	r0
    5198:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    519c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    51a0:	0f 92       	push	r0
    51a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    51a6:	2f 93       	push	r18
    51a8:	3f 93       	push	r19
    51aa:	4f 93       	push	r20
    51ac:	5f 93       	push	r21
    51ae:	6f 93       	push	r22
    51b0:	7f 93       	push	r23
    51b2:	8f 93       	push	r24
    51b4:	9f 93       	push	r25
    51b6:	af 93       	push	r26
    51b8:	bf 93       	push	r27
    51ba:	ef 93       	push	r30
    51bc:	ff 93       	push	r31
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	cd b7       	in	r28, 0x3d	; 61
    51c4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    51c6:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <tc_tcd0_cca_callback>
    51ca:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <tc_tcd0_cca_callback+0x1>
    51ce:	89 2b       	or	r24, r25
    51d0:	31 f0       	breq	.+12     	; 0x51de <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    51d2:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <tc_tcd0_cca_callback>
    51d6:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <tc_tcd0_cca_callback+0x1>
    51da:	fc 01       	movw	r30, r24
    51dc:	19 95       	eicall
	}
}
    51de:	00 00       	nop
    51e0:	df 91       	pop	r29
    51e2:	cf 91       	pop	r28
    51e4:	ff 91       	pop	r31
    51e6:	ef 91       	pop	r30
    51e8:	bf 91       	pop	r27
    51ea:	af 91       	pop	r26
    51ec:	9f 91       	pop	r25
    51ee:	8f 91       	pop	r24
    51f0:	7f 91       	pop	r23
    51f2:	6f 91       	pop	r22
    51f4:	5f 91       	pop	r21
    51f6:	4f 91       	pop	r20
    51f8:	3f 91       	pop	r19
    51fa:	2f 91       	pop	r18
    51fc:	0f 90       	pop	r0
    51fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5202:	0f 90       	pop	r0
    5204:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5208:	0f 90       	pop	r0
    520a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    520e:	0f 90       	pop	r0
    5210:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5214:	0f 90       	pop	r0
    5216:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    521a:	0f 90       	pop	r0
    521c:	1f 90       	pop	r1
    521e:	18 95       	reti

00005220 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    5220:	1f 92       	push	r1
    5222:	0f 92       	push	r0
    5224:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5228:	0f 92       	push	r0
    522a:	11 24       	eor	r1, r1
    522c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5230:	0f 92       	push	r0
    5232:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5236:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    523a:	0f 92       	push	r0
    523c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5240:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5244:	0f 92       	push	r0
    5246:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    524a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    524e:	0f 92       	push	r0
    5250:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5254:	2f 93       	push	r18
    5256:	3f 93       	push	r19
    5258:	4f 93       	push	r20
    525a:	5f 93       	push	r21
    525c:	6f 93       	push	r22
    525e:	7f 93       	push	r23
    5260:	8f 93       	push	r24
    5262:	9f 93       	push	r25
    5264:	af 93       	push	r26
    5266:	bf 93       	push	r27
    5268:	ef 93       	push	r30
    526a:	ff 93       	push	r31
    526c:	cf 93       	push	r28
    526e:	df 93       	push	r29
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    5274:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <tc_tcd0_ccb_callback>
    5278:	90 91 95 22 	lds	r25, 0x2295	; 0x802295 <tc_tcd0_ccb_callback+0x1>
    527c:	89 2b       	or	r24, r25
    527e:	31 f0       	breq	.+12     	; 0x528c <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    5280:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <tc_tcd0_ccb_callback>
    5284:	90 91 95 22 	lds	r25, 0x2295	; 0x802295 <tc_tcd0_ccb_callback+0x1>
    5288:	fc 01       	movw	r30, r24
    528a:	19 95       	eicall
	}
}
    528c:	00 00       	nop
    528e:	df 91       	pop	r29
    5290:	cf 91       	pop	r28
    5292:	ff 91       	pop	r31
    5294:	ef 91       	pop	r30
    5296:	bf 91       	pop	r27
    5298:	af 91       	pop	r26
    529a:	9f 91       	pop	r25
    529c:	8f 91       	pop	r24
    529e:	7f 91       	pop	r23
    52a0:	6f 91       	pop	r22
    52a2:	5f 91       	pop	r21
    52a4:	4f 91       	pop	r20
    52a6:	3f 91       	pop	r19
    52a8:	2f 91       	pop	r18
    52aa:	0f 90       	pop	r0
    52ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    52b0:	0f 90       	pop	r0
    52b2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52b6:	0f 90       	pop	r0
    52b8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52bc:	0f 90       	pop	r0
    52be:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52c2:	0f 90       	pop	r0
    52c4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    52c8:	0f 90       	pop	r0
    52ca:	1f 90       	pop	r1
    52cc:	18 95       	reti

000052ce <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    52ce:	1f 92       	push	r1
    52d0:	0f 92       	push	r0
    52d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    52d6:	0f 92       	push	r0
    52d8:	11 24       	eor	r1, r1
    52da:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52de:	0f 92       	push	r0
    52e0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52e4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52e8:	0f 92       	push	r0
    52ea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52ee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52f2:	0f 92       	push	r0
    52f4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    52fc:	0f 92       	push	r0
    52fe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5302:	2f 93       	push	r18
    5304:	3f 93       	push	r19
    5306:	4f 93       	push	r20
    5308:	5f 93       	push	r21
    530a:	6f 93       	push	r22
    530c:	7f 93       	push	r23
    530e:	8f 93       	push	r24
    5310:	9f 93       	push	r25
    5312:	af 93       	push	r26
    5314:	bf 93       	push	r27
    5316:	ef 93       	push	r30
    5318:	ff 93       	push	r31
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	cd b7       	in	r28, 0x3d	; 61
    5320:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    5322:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <tc_tcd0_ccc_callback>
    5326:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <tc_tcd0_ccc_callback+0x1>
    532a:	89 2b       	or	r24, r25
    532c:	31 f0       	breq	.+12     	; 0x533a <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    532e:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <tc_tcd0_ccc_callback>
    5332:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <tc_tcd0_ccc_callback+0x1>
    5336:	fc 01       	movw	r30, r24
    5338:	19 95       	eicall
	}
}
    533a:	00 00       	nop
    533c:	df 91       	pop	r29
    533e:	cf 91       	pop	r28
    5340:	ff 91       	pop	r31
    5342:	ef 91       	pop	r30
    5344:	bf 91       	pop	r27
    5346:	af 91       	pop	r26
    5348:	9f 91       	pop	r25
    534a:	8f 91       	pop	r24
    534c:	7f 91       	pop	r23
    534e:	6f 91       	pop	r22
    5350:	5f 91       	pop	r21
    5352:	4f 91       	pop	r20
    5354:	3f 91       	pop	r19
    5356:	2f 91       	pop	r18
    5358:	0f 90       	pop	r0
    535a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    535e:	0f 90       	pop	r0
    5360:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5364:	0f 90       	pop	r0
    5366:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    536a:	0f 90       	pop	r0
    536c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5370:	0f 90       	pop	r0
    5372:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5376:	0f 90       	pop	r0
    5378:	1f 90       	pop	r1
    537a:	18 95       	reti

0000537c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    537c:	1f 92       	push	r1
    537e:	0f 92       	push	r0
    5380:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5384:	0f 92       	push	r0
    5386:	11 24       	eor	r1, r1
    5388:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    538c:	0f 92       	push	r0
    538e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5392:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5396:	0f 92       	push	r0
    5398:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    539c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    53a0:	0f 92       	push	r0
    53a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    53a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    53aa:	0f 92       	push	r0
    53ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    53b0:	2f 93       	push	r18
    53b2:	3f 93       	push	r19
    53b4:	4f 93       	push	r20
    53b6:	5f 93       	push	r21
    53b8:	6f 93       	push	r22
    53ba:	7f 93       	push	r23
    53bc:	8f 93       	push	r24
    53be:	9f 93       	push	r25
    53c0:	af 93       	push	r26
    53c2:	bf 93       	push	r27
    53c4:	ef 93       	push	r30
    53c6:	ff 93       	push	r31
    53c8:	cf 93       	push	r28
    53ca:	df 93       	push	r29
    53cc:	cd b7       	in	r28, 0x3d	; 61
    53ce:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    53d0:	80 91 98 22 	lds	r24, 0x2298	; 0x802298 <tc_tcd0_ccd_callback>
    53d4:	90 91 99 22 	lds	r25, 0x2299	; 0x802299 <tc_tcd0_ccd_callback+0x1>
    53d8:	89 2b       	or	r24, r25
    53da:	31 f0       	breq	.+12     	; 0x53e8 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    53dc:	80 91 98 22 	lds	r24, 0x2298	; 0x802298 <tc_tcd0_ccd_callback>
    53e0:	90 91 99 22 	lds	r25, 0x2299	; 0x802299 <tc_tcd0_ccd_callback+0x1>
    53e4:	fc 01       	movw	r30, r24
    53e6:	19 95       	eicall
	}
}
    53e8:	00 00       	nop
    53ea:	df 91       	pop	r29
    53ec:	cf 91       	pop	r28
    53ee:	ff 91       	pop	r31
    53f0:	ef 91       	pop	r30
    53f2:	bf 91       	pop	r27
    53f4:	af 91       	pop	r26
    53f6:	9f 91       	pop	r25
    53f8:	8f 91       	pop	r24
    53fa:	7f 91       	pop	r23
    53fc:	6f 91       	pop	r22
    53fe:	5f 91       	pop	r21
    5400:	4f 91       	pop	r20
    5402:	3f 91       	pop	r19
    5404:	2f 91       	pop	r18
    5406:	0f 90       	pop	r0
    5408:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    540c:	0f 90       	pop	r0
    540e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5412:	0f 90       	pop	r0
    5414:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5418:	0f 90       	pop	r0
    541a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    541e:	0f 90       	pop	r0
    5420:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5424:	0f 90       	pop	r0
    5426:	1f 90       	pop	r1
    5428:	18 95       	reti

0000542a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    542a:	1f 92       	push	r1
    542c:	0f 92       	push	r0
    542e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5432:	0f 92       	push	r0
    5434:	11 24       	eor	r1, r1
    5436:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    543a:	0f 92       	push	r0
    543c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5440:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5444:	0f 92       	push	r0
    5446:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    544a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    544e:	0f 92       	push	r0
    5450:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5454:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5458:	0f 92       	push	r0
    545a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    545e:	2f 93       	push	r18
    5460:	3f 93       	push	r19
    5462:	4f 93       	push	r20
    5464:	5f 93       	push	r21
    5466:	6f 93       	push	r22
    5468:	7f 93       	push	r23
    546a:	8f 93       	push	r24
    546c:	9f 93       	push	r25
    546e:	af 93       	push	r26
    5470:	bf 93       	push	r27
    5472:	ef 93       	push	r30
    5474:	ff 93       	push	r31
    5476:	cf 93       	push	r28
    5478:	df 93       	push	r29
    547a:	cd b7       	in	r28, 0x3d	; 61
    547c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    547e:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <tc_tcd1_ovf_callback>
    5482:	90 91 9b 22 	lds	r25, 0x229B	; 0x80229b <tc_tcd1_ovf_callback+0x1>
    5486:	89 2b       	or	r24, r25
    5488:	31 f0       	breq	.+12     	; 0x5496 <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    548a:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <tc_tcd1_ovf_callback>
    548e:	90 91 9b 22 	lds	r25, 0x229B	; 0x80229b <tc_tcd1_ovf_callback+0x1>
    5492:	fc 01       	movw	r30, r24
    5494:	19 95       	eicall
	}
}
    5496:	00 00       	nop
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
    549c:	ff 91       	pop	r31
    549e:	ef 91       	pop	r30
    54a0:	bf 91       	pop	r27
    54a2:	af 91       	pop	r26
    54a4:	9f 91       	pop	r25
    54a6:	8f 91       	pop	r24
    54a8:	7f 91       	pop	r23
    54aa:	6f 91       	pop	r22
    54ac:	5f 91       	pop	r21
    54ae:	4f 91       	pop	r20
    54b0:	3f 91       	pop	r19
    54b2:	2f 91       	pop	r18
    54b4:	0f 90       	pop	r0
    54b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    54ba:	0f 90       	pop	r0
    54bc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54c0:	0f 90       	pop	r0
    54c2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54c6:	0f 90       	pop	r0
    54c8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54cc:	0f 90       	pop	r0
    54ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    54d2:	0f 90       	pop	r0
    54d4:	1f 90       	pop	r1
    54d6:	18 95       	reti

000054d8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    54d8:	1f 92       	push	r1
    54da:	0f 92       	push	r0
    54dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    54e0:	0f 92       	push	r0
    54e2:	11 24       	eor	r1, r1
    54e4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54e8:	0f 92       	push	r0
    54ea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54ee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54f2:	0f 92       	push	r0
    54f4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54f8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54fc:	0f 92       	push	r0
    54fe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5502:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5506:	0f 92       	push	r0
    5508:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    550c:	2f 93       	push	r18
    550e:	3f 93       	push	r19
    5510:	4f 93       	push	r20
    5512:	5f 93       	push	r21
    5514:	6f 93       	push	r22
    5516:	7f 93       	push	r23
    5518:	8f 93       	push	r24
    551a:	9f 93       	push	r25
    551c:	af 93       	push	r26
    551e:	bf 93       	push	r27
    5520:	ef 93       	push	r30
    5522:	ff 93       	push	r31
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	cd b7       	in	r28, 0x3d	; 61
    552a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    552c:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <tc_tcd1_err_callback>
    5530:	90 91 9d 22 	lds	r25, 0x229D	; 0x80229d <tc_tcd1_err_callback+0x1>
    5534:	89 2b       	or	r24, r25
    5536:	31 f0       	breq	.+12     	; 0x5544 <__vector_84+0x6c>
		tc_tcd1_err_callback();
    5538:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <tc_tcd1_err_callback>
    553c:	90 91 9d 22 	lds	r25, 0x229D	; 0x80229d <tc_tcd1_err_callback+0x1>
    5540:	fc 01       	movw	r30, r24
    5542:	19 95       	eicall
	}
}
    5544:	00 00       	nop
    5546:	df 91       	pop	r29
    5548:	cf 91       	pop	r28
    554a:	ff 91       	pop	r31
    554c:	ef 91       	pop	r30
    554e:	bf 91       	pop	r27
    5550:	af 91       	pop	r26
    5552:	9f 91       	pop	r25
    5554:	8f 91       	pop	r24
    5556:	7f 91       	pop	r23
    5558:	6f 91       	pop	r22
    555a:	5f 91       	pop	r21
    555c:	4f 91       	pop	r20
    555e:	3f 91       	pop	r19
    5560:	2f 91       	pop	r18
    5562:	0f 90       	pop	r0
    5564:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5568:	0f 90       	pop	r0
    556a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    556e:	0f 90       	pop	r0
    5570:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5574:	0f 90       	pop	r0
    5576:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    557a:	0f 90       	pop	r0
    557c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5580:	0f 90       	pop	r0
    5582:	1f 90       	pop	r1
    5584:	18 95       	reti

00005586 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    5586:	1f 92       	push	r1
    5588:	0f 92       	push	r0
    558a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    558e:	0f 92       	push	r0
    5590:	11 24       	eor	r1, r1
    5592:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5596:	0f 92       	push	r0
    5598:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    559c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    55a0:	0f 92       	push	r0
    55a2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    55a6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    55aa:	0f 92       	push	r0
    55ac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    55b0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    55b4:	0f 92       	push	r0
    55b6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    55ba:	2f 93       	push	r18
    55bc:	3f 93       	push	r19
    55be:	4f 93       	push	r20
    55c0:	5f 93       	push	r21
    55c2:	6f 93       	push	r22
    55c4:	7f 93       	push	r23
    55c6:	8f 93       	push	r24
    55c8:	9f 93       	push	r25
    55ca:	af 93       	push	r26
    55cc:	bf 93       	push	r27
    55ce:	ef 93       	push	r30
    55d0:	ff 93       	push	r31
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	cd b7       	in	r28, 0x3d	; 61
    55d8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    55da:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <tc_tcd1_cca_callback>
    55de:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <tc_tcd1_cca_callback+0x1>
    55e2:	89 2b       	or	r24, r25
    55e4:	31 f0       	breq	.+12     	; 0x55f2 <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    55e6:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <tc_tcd1_cca_callback>
    55ea:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <tc_tcd1_cca_callback+0x1>
    55ee:	fc 01       	movw	r30, r24
    55f0:	19 95       	eicall
	}
}
    55f2:	00 00       	nop
    55f4:	df 91       	pop	r29
    55f6:	cf 91       	pop	r28
    55f8:	ff 91       	pop	r31
    55fa:	ef 91       	pop	r30
    55fc:	bf 91       	pop	r27
    55fe:	af 91       	pop	r26
    5600:	9f 91       	pop	r25
    5602:	8f 91       	pop	r24
    5604:	7f 91       	pop	r23
    5606:	6f 91       	pop	r22
    5608:	5f 91       	pop	r21
    560a:	4f 91       	pop	r20
    560c:	3f 91       	pop	r19
    560e:	2f 91       	pop	r18
    5610:	0f 90       	pop	r0
    5612:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5616:	0f 90       	pop	r0
    5618:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    561c:	0f 90       	pop	r0
    561e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5622:	0f 90       	pop	r0
    5624:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5628:	0f 90       	pop	r0
    562a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    562e:	0f 90       	pop	r0
    5630:	1f 90       	pop	r1
    5632:	18 95       	reti

00005634 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    5634:	1f 92       	push	r1
    5636:	0f 92       	push	r0
    5638:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    563c:	0f 92       	push	r0
    563e:	11 24       	eor	r1, r1
    5640:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5644:	0f 92       	push	r0
    5646:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    564a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    564e:	0f 92       	push	r0
    5650:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5654:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5658:	0f 92       	push	r0
    565a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    565e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5662:	0f 92       	push	r0
    5664:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5668:	2f 93       	push	r18
    566a:	3f 93       	push	r19
    566c:	4f 93       	push	r20
    566e:	5f 93       	push	r21
    5670:	6f 93       	push	r22
    5672:	7f 93       	push	r23
    5674:	8f 93       	push	r24
    5676:	9f 93       	push	r25
    5678:	af 93       	push	r26
    567a:	bf 93       	push	r27
    567c:	ef 93       	push	r30
    567e:	ff 93       	push	r31
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    5688:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <tc_tcd1_ccb_callback>
    568c:	90 91 a1 22 	lds	r25, 0x22A1	; 0x8022a1 <tc_tcd1_ccb_callback+0x1>
    5690:	89 2b       	or	r24, r25
    5692:	31 f0       	breq	.+12     	; 0x56a0 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    5694:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <tc_tcd1_ccb_callback>
    5698:	90 91 a1 22 	lds	r25, 0x22A1	; 0x8022a1 <tc_tcd1_ccb_callback+0x1>
    569c:	fc 01       	movw	r30, r24
    569e:	19 95       	eicall
	}
}
    56a0:	00 00       	nop
    56a2:	df 91       	pop	r29
    56a4:	cf 91       	pop	r28
    56a6:	ff 91       	pop	r31
    56a8:	ef 91       	pop	r30
    56aa:	bf 91       	pop	r27
    56ac:	af 91       	pop	r26
    56ae:	9f 91       	pop	r25
    56b0:	8f 91       	pop	r24
    56b2:	7f 91       	pop	r23
    56b4:	6f 91       	pop	r22
    56b6:	5f 91       	pop	r21
    56b8:	4f 91       	pop	r20
    56ba:	3f 91       	pop	r19
    56bc:	2f 91       	pop	r18
    56be:	0f 90       	pop	r0
    56c0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    56c4:	0f 90       	pop	r0
    56c6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    56ca:	0f 90       	pop	r0
    56cc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56d0:	0f 90       	pop	r0
    56d2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56d6:	0f 90       	pop	r0
    56d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    56dc:	0f 90       	pop	r0
    56de:	1f 90       	pop	r1
    56e0:	18 95       	reti

000056e2 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    56e2:	1f 92       	push	r1
    56e4:	0f 92       	push	r0
    56e6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56f2:	0f 92       	push	r0
    56f4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56f8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56fc:	0f 92       	push	r0
    56fe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5702:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5706:	0f 92       	push	r0
    5708:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    570c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5710:	0f 92       	push	r0
    5712:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5716:	2f 93       	push	r18
    5718:	3f 93       	push	r19
    571a:	4f 93       	push	r20
    571c:	5f 93       	push	r21
    571e:	6f 93       	push	r22
    5720:	7f 93       	push	r23
    5722:	8f 93       	push	r24
    5724:	9f 93       	push	r25
    5726:	af 93       	push	r26
    5728:	bf 93       	push	r27
    572a:	ef 93       	push	r30
    572c:	ff 93       	push	r31
    572e:	cf 93       	push	r28
    5730:	df 93       	push	r29
    5732:	cd b7       	in	r28, 0x3d	; 61
    5734:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    5736:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <tc_tce0_ovf_callback>
    573a:	90 91 a3 22 	lds	r25, 0x22A3	; 0x8022a3 <tc_tce0_ovf_callback+0x1>
    573e:	89 2b       	or	r24, r25
    5740:	31 f0       	breq	.+12     	; 0x574e <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    5742:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <tc_tce0_ovf_callback>
    5746:	90 91 a3 22 	lds	r25, 0x22A3	; 0x8022a3 <tc_tce0_ovf_callback+0x1>
    574a:	fc 01       	movw	r30, r24
    574c:	19 95       	eicall
	}
}
    574e:	00 00       	nop
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	ff 91       	pop	r31
    5756:	ef 91       	pop	r30
    5758:	bf 91       	pop	r27
    575a:	af 91       	pop	r26
    575c:	9f 91       	pop	r25
    575e:	8f 91       	pop	r24
    5760:	7f 91       	pop	r23
    5762:	6f 91       	pop	r22
    5764:	5f 91       	pop	r21
    5766:	4f 91       	pop	r20
    5768:	3f 91       	pop	r19
    576a:	2f 91       	pop	r18
    576c:	0f 90       	pop	r0
    576e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5772:	0f 90       	pop	r0
    5774:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5778:	0f 90       	pop	r0
    577a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    577e:	0f 90       	pop	r0
    5780:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5784:	0f 90       	pop	r0
    5786:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    578a:	0f 90       	pop	r0
    578c:	1f 90       	pop	r1
    578e:	18 95       	reti

00005790 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    5790:	1f 92       	push	r1
    5792:	0f 92       	push	r0
    5794:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5798:	0f 92       	push	r0
    579a:	11 24       	eor	r1, r1
    579c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    57a0:	0f 92       	push	r0
    57a2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    57a6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    57aa:	0f 92       	push	r0
    57ac:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    57b0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    57b4:	0f 92       	push	r0
    57b6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    57ba:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    57be:	0f 92       	push	r0
    57c0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    57c4:	2f 93       	push	r18
    57c6:	3f 93       	push	r19
    57c8:	4f 93       	push	r20
    57ca:	5f 93       	push	r21
    57cc:	6f 93       	push	r22
    57ce:	7f 93       	push	r23
    57d0:	8f 93       	push	r24
    57d2:	9f 93       	push	r25
    57d4:	af 93       	push	r26
    57d6:	bf 93       	push	r27
    57d8:	ef 93       	push	r30
    57da:	ff 93       	push	r31
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    57e4:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <tc_tce0_err_callback>
    57e8:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <tc_tce0_err_callback+0x1>
    57ec:	89 2b       	or	r24, r25
    57ee:	31 f0       	breq	.+12     	; 0x57fc <__vector_48+0x6c>
		tc_tce0_err_callback();
    57f0:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <tc_tce0_err_callback>
    57f4:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <tc_tce0_err_callback+0x1>
    57f8:	fc 01       	movw	r30, r24
    57fa:	19 95       	eicall
	}
}
    57fc:	00 00       	nop
    57fe:	df 91       	pop	r29
    5800:	cf 91       	pop	r28
    5802:	ff 91       	pop	r31
    5804:	ef 91       	pop	r30
    5806:	bf 91       	pop	r27
    5808:	af 91       	pop	r26
    580a:	9f 91       	pop	r25
    580c:	8f 91       	pop	r24
    580e:	7f 91       	pop	r23
    5810:	6f 91       	pop	r22
    5812:	5f 91       	pop	r21
    5814:	4f 91       	pop	r20
    5816:	3f 91       	pop	r19
    5818:	2f 91       	pop	r18
    581a:	0f 90       	pop	r0
    581c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5820:	0f 90       	pop	r0
    5822:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5826:	0f 90       	pop	r0
    5828:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    582c:	0f 90       	pop	r0
    582e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5832:	0f 90       	pop	r0
    5834:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5838:	0f 90       	pop	r0
    583a:	1f 90       	pop	r1
    583c:	18 95       	reti

0000583e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    583e:	1f 92       	push	r1
    5840:	0f 92       	push	r0
    5842:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5846:	0f 92       	push	r0
    5848:	11 24       	eor	r1, r1
    584a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    584e:	0f 92       	push	r0
    5850:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5854:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5858:	0f 92       	push	r0
    585a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    585e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5862:	0f 92       	push	r0
    5864:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5868:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    586c:	0f 92       	push	r0
    586e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5872:	2f 93       	push	r18
    5874:	3f 93       	push	r19
    5876:	4f 93       	push	r20
    5878:	5f 93       	push	r21
    587a:	6f 93       	push	r22
    587c:	7f 93       	push	r23
    587e:	8f 93       	push	r24
    5880:	9f 93       	push	r25
    5882:	af 93       	push	r26
    5884:	bf 93       	push	r27
    5886:	ef 93       	push	r30
    5888:	ff 93       	push	r31
    588a:	cf 93       	push	r28
    588c:	df 93       	push	r29
    588e:	cd b7       	in	r28, 0x3d	; 61
    5890:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    5892:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <tc_tce0_cca_callback>
    5896:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <tc_tce0_cca_callback+0x1>
    589a:	89 2b       	or	r24, r25
    589c:	31 f0       	breq	.+12     	; 0x58aa <__vector_49+0x6c>
		tc_tce0_cca_callback();
    589e:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <tc_tce0_cca_callback>
    58a2:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <tc_tce0_cca_callback+0x1>
    58a6:	fc 01       	movw	r30, r24
    58a8:	19 95       	eicall
	}
}
    58aa:	00 00       	nop
    58ac:	df 91       	pop	r29
    58ae:	cf 91       	pop	r28
    58b0:	ff 91       	pop	r31
    58b2:	ef 91       	pop	r30
    58b4:	bf 91       	pop	r27
    58b6:	af 91       	pop	r26
    58b8:	9f 91       	pop	r25
    58ba:	8f 91       	pop	r24
    58bc:	7f 91       	pop	r23
    58be:	6f 91       	pop	r22
    58c0:	5f 91       	pop	r21
    58c2:	4f 91       	pop	r20
    58c4:	3f 91       	pop	r19
    58c6:	2f 91       	pop	r18
    58c8:	0f 90       	pop	r0
    58ca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    58ce:	0f 90       	pop	r0
    58d0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    58d4:	0f 90       	pop	r0
    58d6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    58da:	0f 90       	pop	r0
    58dc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58e0:	0f 90       	pop	r0
    58e2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    58e6:	0f 90       	pop	r0
    58e8:	1f 90       	pop	r1
    58ea:	18 95       	reti

000058ec <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    58ec:	1f 92       	push	r1
    58ee:	0f 92       	push	r0
    58f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    58f4:	0f 92       	push	r0
    58f6:	11 24       	eor	r1, r1
    58f8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58fc:	0f 92       	push	r0
    58fe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5902:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5906:	0f 92       	push	r0
    5908:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    590c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5910:	0f 92       	push	r0
    5912:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5916:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    591a:	0f 92       	push	r0
    591c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5920:	2f 93       	push	r18
    5922:	3f 93       	push	r19
    5924:	4f 93       	push	r20
    5926:	5f 93       	push	r21
    5928:	6f 93       	push	r22
    592a:	7f 93       	push	r23
    592c:	8f 93       	push	r24
    592e:	9f 93       	push	r25
    5930:	af 93       	push	r26
    5932:	bf 93       	push	r27
    5934:	ef 93       	push	r30
    5936:	ff 93       	push	r31
    5938:	cf 93       	push	r28
    593a:	df 93       	push	r29
    593c:	cd b7       	in	r28, 0x3d	; 61
    593e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    5940:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <tc_tce0_ccb_callback>
    5944:	90 91 a9 22 	lds	r25, 0x22A9	; 0x8022a9 <tc_tce0_ccb_callback+0x1>
    5948:	89 2b       	or	r24, r25
    594a:	31 f0       	breq	.+12     	; 0x5958 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    594c:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <tc_tce0_ccb_callback>
    5950:	90 91 a9 22 	lds	r25, 0x22A9	; 0x8022a9 <tc_tce0_ccb_callback+0x1>
    5954:	fc 01       	movw	r30, r24
    5956:	19 95       	eicall
	}
}
    5958:	00 00       	nop
    595a:	df 91       	pop	r29
    595c:	cf 91       	pop	r28
    595e:	ff 91       	pop	r31
    5960:	ef 91       	pop	r30
    5962:	bf 91       	pop	r27
    5964:	af 91       	pop	r26
    5966:	9f 91       	pop	r25
    5968:	8f 91       	pop	r24
    596a:	7f 91       	pop	r23
    596c:	6f 91       	pop	r22
    596e:	5f 91       	pop	r21
    5970:	4f 91       	pop	r20
    5972:	3f 91       	pop	r19
    5974:	2f 91       	pop	r18
    5976:	0f 90       	pop	r0
    5978:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    597c:	0f 90       	pop	r0
    597e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5982:	0f 90       	pop	r0
    5984:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5988:	0f 90       	pop	r0
    598a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    598e:	0f 90       	pop	r0
    5990:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5994:	0f 90       	pop	r0
    5996:	1f 90       	pop	r1
    5998:	18 95       	reti

0000599a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    599a:	1f 92       	push	r1
    599c:	0f 92       	push	r0
    599e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    59a2:	0f 92       	push	r0
    59a4:	11 24       	eor	r1, r1
    59a6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    59aa:	0f 92       	push	r0
    59ac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    59b0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    59b4:	0f 92       	push	r0
    59b6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    59ba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    59be:	0f 92       	push	r0
    59c0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    59c4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    59c8:	0f 92       	push	r0
    59ca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    59ce:	2f 93       	push	r18
    59d0:	3f 93       	push	r19
    59d2:	4f 93       	push	r20
    59d4:	5f 93       	push	r21
    59d6:	6f 93       	push	r22
    59d8:	7f 93       	push	r23
    59da:	8f 93       	push	r24
    59dc:	9f 93       	push	r25
    59de:	af 93       	push	r26
    59e0:	bf 93       	push	r27
    59e2:	ef 93       	push	r30
    59e4:	ff 93       	push	r31
    59e6:	cf 93       	push	r28
    59e8:	df 93       	push	r29
    59ea:	cd b7       	in	r28, 0x3d	; 61
    59ec:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    59ee:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <tc_tce0_ccc_callback>
    59f2:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <tc_tce0_ccc_callback+0x1>
    59f6:	89 2b       	or	r24, r25
    59f8:	31 f0       	breq	.+12     	; 0x5a06 <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    59fa:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <tc_tce0_ccc_callback>
    59fe:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <tc_tce0_ccc_callback+0x1>
    5a02:	fc 01       	movw	r30, r24
    5a04:	19 95       	eicall
	}
}
    5a06:	00 00       	nop
    5a08:	df 91       	pop	r29
    5a0a:	cf 91       	pop	r28
    5a0c:	ff 91       	pop	r31
    5a0e:	ef 91       	pop	r30
    5a10:	bf 91       	pop	r27
    5a12:	af 91       	pop	r26
    5a14:	9f 91       	pop	r25
    5a16:	8f 91       	pop	r24
    5a18:	7f 91       	pop	r23
    5a1a:	6f 91       	pop	r22
    5a1c:	5f 91       	pop	r21
    5a1e:	4f 91       	pop	r20
    5a20:	3f 91       	pop	r19
    5a22:	2f 91       	pop	r18
    5a24:	0f 90       	pop	r0
    5a26:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a2a:	0f 90       	pop	r0
    5a2c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a30:	0f 90       	pop	r0
    5a32:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a36:	0f 90       	pop	r0
    5a38:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a3c:	0f 90       	pop	r0
    5a3e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5a42:	0f 90       	pop	r0
    5a44:	1f 90       	pop	r1
    5a46:	18 95       	reti

00005a48 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    5a48:	1f 92       	push	r1
    5a4a:	0f 92       	push	r0
    5a4c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5a50:	0f 92       	push	r0
    5a52:	11 24       	eor	r1, r1
    5a54:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a58:	0f 92       	push	r0
    5a5a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a5e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a62:	0f 92       	push	r0
    5a64:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a68:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a6c:	0f 92       	push	r0
    5a6e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a72:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a76:	0f 92       	push	r0
    5a78:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a7c:	2f 93       	push	r18
    5a7e:	3f 93       	push	r19
    5a80:	4f 93       	push	r20
    5a82:	5f 93       	push	r21
    5a84:	6f 93       	push	r22
    5a86:	7f 93       	push	r23
    5a88:	8f 93       	push	r24
    5a8a:	9f 93       	push	r25
    5a8c:	af 93       	push	r26
    5a8e:	bf 93       	push	r27
    5a90:	ef 93       	push	r30
    5a92:	ff 93       	push	r31
    5a94:	cf 93       	push	r28
    5a96:	df 93       	push	r29
    5a98:	cd b7       	in	r28, 0x3d	; 61
    5a9a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    5a9c:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <tc_tce0_ccd_callback>
    5aa0:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <tc_tce0_ccd_callback+0x1>
    5aa4:	89 2b       	or	r24, r25
    5aa6:	31 f0       	breq	.+12     	; 0x5ab4 <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    5aa8:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <tc_tce0_ccd_callback>
    5aac:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <tc_tce0_ccd_callback+0x1>
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	19 95       	eicall
	}
}
    5ab4:	00 00       	nop
    5ab6:	df 91       	pop	r29
    5ab8:	cf 91       	pop	r28
    5aba:	ff 91       	pop	r31
    5abc:	ef 91       	pop	r30
    5abe:	bf 91       	pop	r27
    5ac0:	af 91       	pop	r26
    5ac2:	9f 91       	pop	r25
    5ac4:	8f 91       	pop	r24
    5ac6:	7f 91       	pop	r23
    5ac8:	6f 91       	pop	r22
    5aca:	5f 91       	pop	r21
    5acc:	4f 91       	pop	r20
    5ace:	3f 91       	pop	r19
    5ad0:	2f 91       	pop	r18
    5ad2:	0f 90       	pop	r0
    5ad4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ad8:	0f 90       	pop	r0
    5ada:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ade:	0f 90       	pop	r0
    5ae0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ae4:	0f 90       	pop	r0
    5ae6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5aea:	0f 90       	pop	r0
    5aec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5af0:	0f 90       	pop	r0
    5af2:	1f 90       	pop	r1
    5af4:	18 95       	reti

00005af6 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    5af6:	1f 92       	push	r1
    5af8:	0f 92       	push	r0
    5afa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5afe:	0f 92       	push	r0
    5b00:	11 24       	eor	r1, r1
    5b02:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b06:	0f 92       	push	r0
    5b08:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b0c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b10:	0f 92       	push	r0
    5b12:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b16:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b1a:	0f 92       	push	r0
    5b1c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b20:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b24:	0f 92       	push	r0
    5b26:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b2a:	2f 93       	push	r18
    5b2c:	3f 93       	push	r19
    5b2e:	4f 93       	push	r20
    5b30:	5f 93       	push	r21
    5b32:	6f 93       	push	r22
    5b34:	7f 93       	push	r23
    5b36:	8f 93       	push	r24
    5b38:	9f 93       	push	r25
    5b3a:	af 93       	push	r26
    5b3c:	bf 93       	push	r27
    5b3e:	ef 93       	push	r30
    5b40:	ff 93       	push	r31
    5b42:	cf 93       	push	r28
    5b44:	df 93       	push	r29
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    5b4a:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <tc_tce1_ovf_callback>
    5b4e:	90 91 af 22 	lds	r25, 0x22AF	; 0x8022af <tc_tce1_ovf_callback+0x1>
    5b52:	89 2b       	or	r24, r25
    5b54:	31 f0       	breq	.+12     	; 0x5b62 <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    5b56:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <tc_tce1_ovf_callback>
    5b5a:	90 91 af 22 	lds	r25, 0x22AF	; 0x8022af <tc_tce1_ovf_callback+0x1>
    5b5e:	fc 01       	movw	r30, r24
    5b60:	19 95       	eicall
	}
}
    5b62:	00 00       	nop
    5b64:	df 91       	pop	r29
    5b66:	cf 91       	pop	r28
    5b68:	ff 91       	pop	r31
    5b6a:	ef 91       	pop	r30
    5b6c:	bf 91       	pop	r27
    5b6e:	af 91       	pop	r26
    5b70:	9f 91       	pop	r25
    5b72:	8f 91       	pop	r24
    5b74:	7f 91       	pop	r23
    5b76:	6f 91       	pop	r22
    5b78:	5f 91       	pop	r21
    5b7a:	4f 91       	pop	r20
    5b7c:	3f 91       	pop	r19
    5b7e:	2f 91       	pop	r18
    5b80:	0f 90       	pop	r0
    5b82:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b86:	0f 90       	pop	r0
    5b88:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b8c:	0f 90       	pop	r0
    5b8e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b92:	0f 90       	pop	r0
    5b94:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b98:	0f 90       	pop	r0
    5b9a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5b9e:	0f 90       	pop	r0
    5ba0:	1f 90       	pop	r1
    5ba2:	18 95       	reti

00005ba4 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    5ba4:	1f 92       	push	r1
    5ba6:	0f 92       	push	r0
    5ba8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5bac:	0f 92       	push	r0
    5bae:	11 24       	eor	r1, r1
    5bb0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5bb4:	0f 92       	push	r0
    5bb6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5bba:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5bbe:	0f 92       	push	r0
    5bc0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5bc4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5bc8:	0f 92       	push	r0
    5bca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5bce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5bd2:	0f 92       	push	r0
    5bd4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5bd8:	2f 93       	push	r18
    5bda:	3f 93       	push	r19
    5bdc:	4f 93       	push	r20
    5bde:	5f 93       	push	r21
    5be0:	6f 93       	push	r22
    5be2:	7f 93       	push	r23
    5be4:	8f 93       	push	r24
    5be6:	9f 93       	push	r25
    5be8:	af 93       	push	r26
    5bea:	bf 93       	push	r27
    5bec:	ef 93       	push	r30
    5bee:	ff 93       	push	r31
    5bf0:	cf 93       	push	r28
    5bf2:	df 93       	push	r29
    5bf4:	cd b7       	in	r28, 0x3d	; 61
    5bf6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    5bf8:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <tc_tce1_err_callback>
    5bfc:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <tc_tce1_err_callback+0x1>
    5c00:	89 2b       	or	r24, r25
    5c02:	31 f0       	breq	.+12     	; 0x5c10 <__vector_54+0x6c>
		tc_tce1_err_callback();
    5c04:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <tc_tce1_err_callback>
    5c08:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <tc_tce1_err_callback+0x1>
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	19 95       	eicall
	}
}
    5c10:	00 00       	nop
    5c12:	df 91       	pop	r29
    5c14:	cf 91       	pop	r28
    5c16:	ff 91       	pop	r31
    5c18:	ef 91       	pop	r30
    5c1a:	bf 91       	pop	r27
    5c1c:	af 91       	pop	r26
    5c1e:	9f 91       	pop	r25
    5c20:	8f 91       	pop	r24
    5c22:	7f 91       	pop	r23
    5c24:	6f 91       	pop	r22
    5c26:	5f 91       	pop	r21
    5c28:	4f 91       	pop	r20
    5c2a:	3f 91       	pop	r19
    5c2c:	2f 91       	pop	r18
    5c2e:	0f 90       	pop	r0
    5c30:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5c34:	0f 90       	pop	r0
    5c36:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c3a:	0f 90       	pop	r0
    5c3c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5c40:	0f 90       	pop	r0
    5c42:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c46:	0f 90       	pop	r0
    5c48:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5c4c:	0f 90       	pop	r0
    5c4e:	1f 90       	pop	r1
    5c50:	18 95       	reti

00005c52 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    5c52:	1f 92       	push	r1
    5c54:	0f 92       	push	r0
    5c56:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5c5a:	0f 92       	push	r0
    5c5c:	11 24       	eor	r1, r1
    5c5e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c62:	0f 92       	push	r0
    5c64:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c68:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5c6c:	0f 92       	push	r0
    5c6e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5c72:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c76:	0f 92       	push	r0
    5c78:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c7c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5c80:	0f 92       	push	r0
    5c82:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5c86:	2f 93       	push	r18
    5c88:	3f 93       	push	r19
    5c8a:	4f 93       	push	r20
    5c8c:	5f 93       	push	r21
    5c8e:	6f 93       	push	r22
    5c90:	7f 93       	push	r23
    5c92:	8f 93       	push	r24
    5c94:	9f 93       	push	r25
    5c96:	af 93       	push	r26
    5c98:	bf 93       	push	r27
    5c9a:	ef 93       	push	r30
    5c9c:	ff 93       	push	r31
    5c9e:	cf 93       	push	r28
    5ca0:	df 93       	push	r29
    5ca2:	cd b7       	in	r28, 0x3d	; 61
    5ca4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    5ca6:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <tc_tce1_cca_callback>
    5caa:	90 91 b3 22 	lds	r25, 0x22B3	; 0x8022b3 <tc_tce1_cca_callback+0x1>
    5cae:	89 2b       	or	r24, r25
    5cb0:	31 f0       	breq	.+12     	; 0x5cbe <__vector_55+0x6c>
		tc_tce1_cca_callback();
    5cb2:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <tc_tce1_cca_callback>
    5cb6:	90 91 b3 22 	lds	r25, 0x22B3	; 0x8022b3 <tc_tce1_cca_callback+0x1>
    5cba:	fc 01       	movw	r30, r24
    5cbc:	19 95       	eicall
	}
}
    5cbe:	00 00       	nop
    5cc0:	df 91       	pop	r29
    5cc2:	cf 91       	pop	r28
    5cc4:	ff 91       	pop	r31
    5cc6:	ef 91       	pop	r30
    5cc8:	bf 91       	pop	r27
    5cca:	af 91       	pop	r26
    5ccc:	9f 91       	pop	r25
    5cce:	8f 91       	pop	r24
    5cd0:	7f 91       	pop	r23
    5cd2:	6f 91       	pop	r22
    5cd4:	5f 91       	pop	r21
    5cd6:	4f 91       	pop	r20
    5cd8:	3f 91       	pop	r19
    5cda:	2f 91       	pop	r18
    5cdc:	0f 90       	pop	r0
    5cde:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ce2:	0f 90       	pop	r0
    5ce4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ce8:	0f 90       	pop	r0
    5cea:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5cee:	0f 90       	pop	r0
    5cf0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cf4:	0f 90       	pop	r0
    5cf6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5cfa:	0f 90       	pop	r0
    5cfc:	1f 90       	pop	r1
    5cfe:	18 95       	reti

00005d00 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    5d00:	1f 92       	push	r1
    5d02:	0f 92       	push	r0
    5d04:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5d08:	0f 92       	push	r0
    5d0a:	11 24       	eor	r1, r1
    5d0c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5d10:	0f 92       	push	r0
    5d12:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5d16:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d1a:	0f 92       	push	r0
    5d1c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d20:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d24:	0f 92       	push	r0
    5d26:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d2a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d2e:	0f 92       	push	r0
    5d30:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d34:	2f 93       	push	r18
    5d36:	3f 93       	push	r19
    5d38:	4f 93       	push	r20
    5d3a:	5f 93       	push	r21
    5d3c:	6f 93       	push	r22
    5d3e:	7f 93       	push	r23
    5d40:	8f 93       	push	r24
    5d42:	9f 93       	push	r25
    5d44:	af 93       	push	r26
    5d46:	bf 93       	push	r27
    5d48:	ef 93       	push	r30
    5d4a:	ff 93       	push	r31
    5d4c:	cf 93       	push	r28
    5d4e:	df 93       	push	r29
    5d50:	cd b7       	in	r28, 0x3d	; 61
    5d52:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    5d54:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <tc_tce1_ccb_callback>
    5d58:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <tc_tce1_ccb_callback+0x1>
    5d5c:	89 2b       	or	r24, r25
    5d5e:	31 f0       	breq	.+12     	; 0x5d6c <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    5d60:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <tc_tce1_ccb_callback>
    5d64:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <tc_tce1_ccb_callback+0x1>
    5d68:	fc 01       	movw	r30, r24
    5d6a:	19 95       	eicall
	}
}
    5d6c:	00 00       	nop
    5d6e:	df 91       	pop	r29
    5d70:	cf 91       	pop	r28
    5d72:	ff 91       	pop	r31
    5d74:	ef 91       	pop	r30
    5d76:	bf 91       	pop	r27
    5d78:	af 91       	pop	r26
    5d7a:	9f 91       	pop	r25
    5d7c:	8f 91       	pop	r24
    5d7e:	7f 91       	pop	r23
    5d80:	6f 91       	pop	r22
    5d82:	5f 91       	pop	r21
    5d84:	4f 91       	pop	r20
    5d86:	3f 91       	pop	r19
    5d88:	2f 91       	pop	r18
    5d8a:	0f 90       	pop	r0
    5d8c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d90:	0f 90       	pop	r0
    5d92:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d96:	0f 90       	pop	r0
    5d98:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d9c:	0f 90       	pop	r0
    5d9e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5da2:	0f 90       	pop	r0
    5da4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5da8:	0f 90       	pop	r0
    5daa:	1f 90       	pop	r1
    5dac:	18 95       	reti

00005dae <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    5dae:	1f 92       	push	r1
    5db0:	0f 92       	push	r0
    5db2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5db6:	0f 92       	push	r0
    5db8:	11 24       	eor	r1, r1
    5dba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5dbe:	0f 92       	push	r0
    5dc0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5dc4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5dc8:	0f 92       	push	r0
    5dca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5dce:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5dd2:	0f 92       	push	r0
    5dd4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5dd8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ddc:	0f 92       	push	r0
    5dde:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5de2:	2f 93       	push	r18
    5de4:	3f 93       	push	r19
    5de6:	4f 93       	push	r20
    5de8:	5f 93       	push	r21
    5dea:	6f 93       	push	r22
    5dec:	7f 93       	push	r23
    5dee:	8f 93       	push	r24
    5df0:	9f 93       	push	r25
    5df2:	af 93       	push	r26
    5df4:	bf 93       	push	r27
    5df6:	ef 93       	push	r30
    5df8:	ff 93       	push	r31
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    5e02:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <tc_tcf0_ovf_callback>
    5e06:	90 91 b7 22 	lds	r25, 0x22B7	; 0x8022b7 <tc_tcf0_ovf_callback+0x1>
    5e0a:	89 2b       	or	r24, r25
    5e0c:	31 f0       	breq	.+12     	; 0x5e1a <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    5e0e:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <tc_tcf0_ovf_callback>
    5e12:	90 91 b7 22 	lds	r25, 0x22B7	; 0x8022b7 <tc_tcf0_ovf_callback+0x1>
    5e16:	fc 01       	movw	r30, r24
    5e18:	19 95       	eicall
	}
}
    5e1a:	00 00       	nop
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	ff 91       	pop	r31
    5e22:	ef 91       	pop	r30
    5e24:	bf 91       	pop	r27
    5e26:	af 91       	pop	r26
    5e28:	9f 91       	pop	r25
    5e2a:	8f 91       	pop	r24
    5e2c:	7f 91       	pop	r23
    5e2e:	6f 91       	pop	r22
    5e30:	5f 91       	pop	r21
    5e32:	4f 91       	pop	r20
    5e34:	3f 91       	pop	r19
    5e36:	2f 91       	pop	r18
    5e38:	0f 90       	pop	r0
    5e3a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5e3e:	0f 90       	pop	r0
    5e40:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e44:	0f 90       	pop	r0
    5e46:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e4a:	0f 90       	pop	r0
    5e4c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e50:	0f 90       	pop	r0
    5e52:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5e56:	0f 90       	pop	r0
    5e58:	1f 90       	pop	r1
    5e5a:	18 95       	reti

00005e5c <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    5e5c:	1f 92       	push	r1
    5e5e:	0f 92       	push	r0
    5e60:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5e64:	0f 92       	push	r0
    5e66:	11 24       	eor	r1, r1
    5e68:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e6c:	0f 92       	push	r0
    5e6e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e72:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e76:	0f 92       	push	r0
    5e78:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e7c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e80:	0f 92       	push	r0
    5e82:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e86:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5e8a:	0f 92       	push	r0
    5e8c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5e90:	2f 93       	push	r18
    5e92:	3f 93       	push	r19
    5e94:	4f 93       	push	r20
    5e96:	5f 93       	push	r21
    5e98:	6f 93       	push	r22
    5e9a:	7f 93       	push	r23
    5e9c:	8f 93       	push	r24
    5e9e:	9f 93       	push	r25
    5ea0:	af 93       	push	r26
    5ea2:	bf 93       	push	r27
    5ea4:	ef 93       	push	r30
    5ea6:	ff 93       	push	r31
    5ea8:	cf 93       	push	r28
    5eaa:	df 93       	push	r29
    5eac:	cd b7       	in	r28, 0x3d	; 61
    5eae:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    5eb0:	80 91 b8 22 	lds	r24, 0x22B8	; 0x8022b8 <tc_tcf0_err_callback>
    5eb4:	90 91 b9 22 	lds	r25, 0x22B9	; 0x8022b9 <tc_tcf0_err_callback+0x1>
    5eb8:	89 2b       	or	r24, r25
    5eba:	31 f0       	breq	.+12     	; 0x5ec8 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    5ebc:	80 91 b8 22 	lds	r24, 0x22B8	; 0x8022b8 <tc_tcf0_err_callback>
    5ec0:	90 91 b9 22 	lds	r25, 0x22B9	; 0x8022b9 <tc_tcf0_err_callback+0x1>
    5ec4:	fc 01       	movw	r30, r24
    5ec6:	19 95       	eicall
	}
}
    5ec8:	00 00       	nop
    5eca:	df 91       	pop	r29
    5ecc:	cf 91       	pop	r28
    5ece:	ff 91       	pop	r31
    5ed0:	ef 91       	pop	r30
    5ed2:	bf 91       	pop	r27
    5ed4:	af 91       	pop	r26
    5ed6:	9f 91       	pop	r25
    5ed8:	8f 91       	pop	r24
    5eda:	7f 91       	pop	r23
    5edc:	6f 91       	pop	r22
    5ede:	5f 91       	pop	r21
    5ee0:	4f 91       	pop	r20
    5ee2:	3f 91       	pop	r19
    5ee4:	2f 91       	pop	r18
    5ee6:	0f 90       	pop	r0
    5ee8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5eec:	0f 90       	pop	r0
    5eee:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ef2:	0f 90       	pop	r0
    5ef4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ef8:	0f 90       	pop	r0
    5efa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5efe:	0f 90       	pop	r0
    5f00:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5f04:	0f 90       	pop	r0
    5f06:	1f 90       	pop	r1
    5f08:	18 95       	reti

00005f0a <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    5f0a:	1f 92       	push	r1
    5f0c:	0f 92       	push	r0
    5f0e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5f12:	0f 92       	push	r0
    5f14:	11 24       	eor	r1, r1
    5f16:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5f1a:	0f 92       	push	r0
    5f1c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5f20:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5f24:	0f 92       	push	r0
    5f26:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5f2a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5f2e:	0f 92       	push	r0
    5f30:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5f34:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5f38:	0f 92       	push	r0
    5f3a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5f3e:	2f 93       	push	r18
    5f40:	3f 93       	push	r19
    5f42:	4f 93       	push	r20
    5f44:	5f 93       	push	r21
    5f46:	6f 93       	push	r22
    5f48:	7f 93       	push	r23
    5f4a:	8f 93       	push	r24
    5f4c:	9f 93       	push	r25
    5f4e:	af 93       	push	r26
    5f50:	bf 93       	push	r27
    5f52:	ef 93       	push	r30
    5f54:	ff 93       	push	r31
    5f56:	cf 93       	push	r28
    5f58:	df 93       	push	r29
    5f5a:	cd b7       	in	r28, 0x3d	; 61
    5f5c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    5f5e:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <tc_tcf0_cca_callback>
    5f62:	90 91 bb 22 	lds	r25, 0x22BB	; 0x8022bb <tc_tcf0_cca_callback+0x1>
    5f66:	89 2b       	or	r24, r25
    5f68:	31 f0       	breq	.+12     	; 0x5f76 <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    5f6a:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <tc_tcf0_cca_callback>
    5f6e:	90 91 bb 22 	lds	r25, 0x22BB	; 0x8022bb <tc_tcf0_cca_callback+0x1>
    5f72:	fc 01       	movw	r30, r24
    5f74:	19 95       	eicall
	}
}
    5f76:	00 00       	nop
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	ff 91       	pop	r31
    5f7e:	ef 91       	pop	r30
    5f80:	bf 91       	pop	r27
    5f82:	af 91       	pop	r26
    5f84:	9f 91       	pop	r25
    5f86:	8f 91       	pop	r24
    5f88:	7f 91       	pop	r23
    5f8a:	6f 91       	pop	r22
    5f8c:	5f 91       	pop	r21
    5f8e:	4f 91       	pop	r20
    5f90:	3f 91       	pop	r19
    5f92:	2f 91       	pop	r18
    5f94:	0f 90       	pop	r0
    5f96:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5f9a:	0f 90       	pop	r0
    5f9c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5fa0:	0f 90       	pop	r0
    5fa2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5fa6:	0f 90       	pop	r0
    5fa8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5fac:	0f 90       	pop	r0
    5fae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5fb2:	0f 90       	pop	r0
    5fb4:	1f 90       	pop	r1
    5fb6:	18 95       	reti

00005fb8 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    5fb8:	1f 92       	push	r1
    5fba:	0f 92       	push	r0
    5fbc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5fc0:	0f 92       	push	r0
    5fc2:	11 24       	eor	r1, r1
    5fc4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5fc8:	0f 92       	push	r0
    5fca:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5fce:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5fd2:	0f 92       	push	r0
    5fd4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5fd8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5fdc:	0f 92       	push	r0
    5fde:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5fe2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5fe6:	0f 92       	push	r0
    5fe8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5fec:	2f 93       	push	r18
    5fee:	3f 93       	push	r19
    5ff0:	4f 93       	push	r20
    5ff2:	5f 93       	push	r21
    5ff4:	6f 93       	push	r22
    5ff6:	7f 93       	push	r23
    5ff8:	8f 93       	push	r24
    5ffa:	9f 93       	push	r25
    5ffc:	af 93       	push	r26
    5ffe:	bf 93       	push	r27
    6000:	ef 93       	push	r30
    6002:	ff 93       	push	r31
    6004:	cf 93       	push	r28
    6006:	df 93       	push	r29
    6008:	cd b7       	in	r28, 0x3d	; 61
    600a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    600c:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <tc_tcf0_ccb_callback>
    6010:	90 91 bd 22 	lds	r25, 0x22BD	; 0x8022bd <tc_tcf0_ccb_callback+0x1>
    6014:	89 2b       	or	r24, r25
    6016:	31 f0       	breq	.+12     	; 0x6024 <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    6018:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <tc_tcf0_ccb_callback>
    601c:	90 91 bd 22 	lds	r25, 0x22BD	; 0x8022bd <tc_tcf0_ccb_callback+0x1>
    6020:	fc 01       	movw	r30, r24
    6022:	19 95       	eicall
	}
}
    6024:	00 00       	nop
    6026:	df 91       	pop	r29
    6028:	cf 91       	pop	r28
    602a:	ff 91       	pop	r31
    602c:	ef 91       	pop	r30
    602e:	bf 91       	pop	r27
    6030:	af 91       	pop	r26
    6032:	9f 91       	pop	r25
    6034:	8f 91       	pop	r24
    6036:	7f 91       	pop	r23
    6038:	6f 91       	pop	r22
    603a:	5f 91       	pop	r21
    603c:	4f 91       	pop	r20
    603e:	3f 91       	pop	r19
    6040:	2f 91       	pop	r18
    6042:	0f 90       	pop	r0
    6044:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6048:	0f 90       	pop	r0
    604a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    604e:	0f 90       	pop	r0
    6050:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6054:	0f 90       	pop	r0
    6056:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    605a:	0f 90       	pop	r0
    605c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6060:	0f 90       	pop	r0
    6062:	1f 90       	pop	r1
    6064:	18 95       	reti

00006066 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    6066:	1f 92       	push	r1
    6068:	0f 92       	push	r0
    606a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    606e:	0f 92       	push	r0
    6070:	11 24       	eor	r1, r1
    6072:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6076:	0f 92       	push	r0
    6078:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    607c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6080:	0f 92       	push	r0
    6082:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6086:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    608a:	0f 92       	push	r0
    608c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6090:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6094:	0f 92       	push	r0
    6096:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    609a:	2f 93       	push	r18
    609c:	3f 93       	push	r19
    609e:	4f 93       	push	r20
    60a0:	5f 93       	push	r21
    60a2:	6f 93       	push	r22
    60a4:	7f 93       	push	r23
    60a6:	8f 93       	push	r24
    60a8:	9f 93       	push	r25
    60aa:	af 93       	push	r26
    60ac:	bf 93       	push	r27
    60ae:	ef 93       	push	r30
    60b0:	ff 93       	push	r31
    60b2:	cf 93       	push	r28
    60b4:	df 93       	push	r29
    60b6:	cd b7       	in	r28, 0x3d	; 61
    60b8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    60ba:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <tc_tcf0_ccc_callback>
    60be:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <tc_tcf0_ccc_callback+0x1>
    60c2:	89 2b       	or	r24, r25
    60c4:	31 f0       	breq	.+12     	; 0x60d2 <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    60c6:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <tc_tcf0_ccc_callback>
    60ca:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <tc_tcf0_ccc_callback+0x1>
    60ce:	fc 01       	movw	r30, r24
    60d0:	19 95       	eicall
	}
}
    60d2:	00 00       	nop
    60d4:	df 91       	pop	r29
    60d6:	cf 91       	pop	r28
    60d8:	ff 91       	pop	r31
    60da:	ef 91       	pop	r30
    60dc:	bf 91       	pop	r27
    60de:	af 91       	pop	r26
    60e0:	9f 91       	pop	r25
    60e2:	8f 91       	pop	r24
    60e4:	7f 91       	pop	r23
    60e6:	6f 91       	pop	r22
    60e8:	5f 91       	pop	r21
    60ea:	4f 91       	pop	r20
    60ec:	3f 91       	pop	r19
    60ee:	2f 91       	pop	r18
    60f0:	0f 90       	pop	r0
    60f2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60f6:	0f 90       	pop	r0
    60f8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    60fc:	0f 90       	pop	r0
    60fe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6102:	0f 90       	pop	r0
    6104:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6108:	0f 90       	pop	r0
    610a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    610e:	0f 90       	pop	r0
    6110:	1f 90       	pop	r1
    6112:	18 95       	reti

00006114 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    6114:	1f 92       	push	r1
    6116:	0f 92       	push	r0
    6118:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    611c:	0f 92       	push	r0
    611e:	11 24       	eor	r1, r1
    6120:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6124:	0f 92       	push	r0
    6126:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    612a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    612e:	0f 92       	push	r0
    6130:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6134:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6138:	0f 92       	push	r0
    613a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    613e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6142:	0f 92       	push	r0
    6144:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6148:	2f 93       	push	r18
    614a:	3f 93       	push	r19
    614c:	4f 93       	push	r20
    614e:	5f 93       	push	r21
    6150:	6f 93       	push	r22
    6152:	7f 93       	push	r23
    6154:	8f 93       	push	r24
    6156:	9f 93       	push	r25
    6158:	af 93       	push	r26
    615a:	bf 93       	push	r27
    615c:	ef 93       	push	r30
    615e:	ff 93       	push	r31
    6160:	cf 93       	push	r28
    6162:	df 93       	push	r29
    6164:	cd b7       	in	r28, 0x3d	; 61
    6166:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    6168:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <tc_tcf0_ccd_callback>
    616c:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <tc_tcf0_ccd_callback+0x1>
    6170:	89 2b       	or	r24, r25
    6172:	31 f0       	breq	.+12     	; 0x6180 <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    6174:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <tc_tcf0_ccd_callback>
    6178:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <tc_tcf0_ccd_callback+0x1>
    617c:	fc 01       	movw	r30, r24
    617e:	19 95       	eicall
	}
}
    6180:	00 00       	nop
    6182:	df 91       	pop	r29
    6184:	cf 91       	pop	r28
    6186:	ff 91       	pop	r31
    6188:	ef 91       	pop	r30
    618a:	bf 91       	pop	r27
    618c:	af 91       	pop	r26
    618e:	9f 91       	pop	r25
    6190:	8f 91       	pop	r24
    6192:	7f 91       	pop	r23
    6194:	6f 91       	pop	r22
    6196:	5f 91       	pop	r21
    6198:	4f 91       	pop	r20
    619a:	3f 91       	pop	r19
    619c:	2f 91       	pop	r18
    619e:	0f 90       	pop	r0
    61a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    61a4:	0f 90       	pop	r0
    61a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    61aa:	0f 90       	pop	r0
    61ac:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    61b0:	0f 90       	pop	r0
    61b2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61b6:	0f 90       	pop	r0
    61b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    61bc:	0f 90       	pop	r0
    61be:	1f 90       	pop	r1
    61c0:	18 95       	reti

000061c2 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    61c2:	1f 92       	push	r1
    61c4:	0f 92       	push	r0
    61c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    61ca:	0f 92       	push	r0
    61cc:	11 24       	eor	r1, r1
    61ce:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61d2:	0f 92       	push	r0
    61d4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61d8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    61dc:	0f 92       	push	r0
    61de:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    61e2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    61e6:	0f 92       	push	r0
    61e8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    61ec:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    61f0:	0f 92       	push	r0
    61f2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    61f6:	2f 93       	push	r18
    61f8:	3f 93       	push	r19
    61fa:	4f 93       	push	r20
    61fc:	5f 93       	push	r21
    61fe:	6f 93       	push	r22
    6200:	7f 93       	push	r23
    6202:	8f 93       	push	r24
    6204:	9f 93       	push	r25
    6206:	af 93       	push	r26
    6208:	bf 93       	push	r27
    620a:	ef 93       	push	r30
    620c:	ff 93       	push	r31
    620e:	cf 93       	push	r28
    6210:	df 93       	push	r29
    6212:	cd b7       	in	r28, 0x3d	; 61
    6214:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    6216:	80 91 c2 22 	lds	r24, 0x22C2	; 0x8022c2 <tc_tcf1_ovf_callback>
    621a:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <tc_tcf1_ovf_callback+0x1>
    621e:	89 2b       	or	r24, r25
    6220:	31 f0       	breq	.+12     	; 0x622e <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    6222:	80 91 c2 22 	lds	r24, 0x22C2	; 0x8022c2 <tc_tcf1_ovf_callback>
    6226:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <tc_tcf1_ovf_callback+0x1>
    622a:	fc 01       	movw	r30, r24
    622c:	19 95       	eicall
	}
}
    622e:	00 00       	nop
    6230:	df 91       	pop	r29
    6232:	cf 91       	pop	r28
    6234:	ff 91       	pop	r31
    6236:	ef 91       	pop	r30
    6238:	bf 91       	pop	r27
    623a:	af 91       	pop	r26
    623c:	9f 91       	pop	r25
    623e:	8f 91       	pop	r24
    6240:	7f 91       	pop	r23
    6242:	6f 91       	pop	r22
    6244:	5f 91       	pop	r21
    6246:	4f 91       	pop	r20
    6248:	3f 91       	pop	r19
    624a:	2f 91       	pop	r18
    624c:	0f 90       	pop	r0
    624e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6252:	0f 90       	pop	r0
    6254:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6258:	0f 90       	pop	r0
    625a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    625e:	0f 90       	pop	r0
    6260:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6264:	0f 90       	pop	r0
    6266:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    626a:	0f 90       	pop	r0
    626c:	1f 90       	pop	r1
    626e:	18 95       	reti

00006270 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    6270:	1f 92       	push	r1
    6272:	0f 92       	push	r0
    6274:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6278:	0f 92       	push	r0
    627a:	11 24       	eor	r1, r1
    627c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6280:	0f 92       	push	r0
    6282:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6286:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    628a:	0f 92       	push	r0
    628c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6290:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6294:	0f 92       	push	r0
    6296:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    629a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    629e:	0f 92       	push	r0
    62a0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62a4:	2f 93       	push	r18
    62a6:	3f 93       	push	r19
    62a8:	4f 93       	push	r20
    62aa:	5f 93       	push	r21
    62ac:	6f 93       	push	r22
    62ae:	7f 93       	push	r23
    62b0:	8f 93       	push	r24
    62b2:	9f 93       	push	r25
    62b4:	af 93       	push	r26
    62b6:	bf 93       	push	r27
    62b8:	ef 93       	push	r30
    62ba:	ff 93       	push	r31
    62bc:	cf 93       	push	r28
    62be:	df 93       	push	r29
    62c0:	cd b7       	in	r28, 0x3d	; 61
    62c2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    62c4:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <tc_tcf1_err_callback>
    62c8:	90 91 c5 22 	lds	r25, 0x22C5	; 0x8022c5 <tc_tcf1_err_callback+0x1>
    62cc:	89 2b       	or	r24, r25
    62ce:	31 f0       	breq	.+12     	; 0x62dc <__vector_115+0x6c>
		tc_tcf1_err_callback();
    62d0:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <tc_tcf1_err_callback>
    62d4:	90 91 c5 22 	lds	r25, 0x22C5	; 0x8022c5 <tc_tcf1_err_callback+0x1>
    62d8:	fc 01       	movw	r30, r24
    62da:	19 95       	eicall
	}
}
    62dc:	00 00       	nop
    62de:	df 91       	pop	r29
    62e0:	cf 91       	pop	r28
    62e2:	ff 91       	pop	r31
    62e4:	ef 91       	pop	r30
    62e6:	bf 91       	pop	r27
    62e8:	af 91       	pop	r26
    62ea:	9f 91       	pop	r25
    62ec:	8f 91       	pop	r24
    62ee:	7f 91       	pop	r23
    62f0:	6f 91       	pop	r22
    62f2:	5f 91       	pop	r21
    62f4:	4f 91       	pop	r20
    62f6:	3f 91       	pop	r19
    62f8:	2f 91       	pop	r18
    62fa:	0f 90       	pop	r0
    62fc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6300:	0f 90       	pop	r0
    6302:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6306:	0f 90       	pop	r0
    6308:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    630c:	0f 90       	pop	r0
    630e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6312:	0f 90       	pop	r0
    6314:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6318:	0f 90       	pop	r0
    631a:	1f 90       	pop	r1
    631c:	18 95       	reti

0000631e <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    631e:	1f 92       	push	r1
    6320:	0f 92       	push	r0
    6322:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6326:	0f 92       	push	r0
    6328:	11 24       	eor	r1, r1
    632a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    632e:	0f 92       	push	r0
    6330:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6334:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6338:	0f 92       	push	r0
    633a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    633e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6342:	0f 92       	push	r0
    6344:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6348:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    634c:	0f 92       	push	r0
    634e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6352:	2f 93       	push	r18
    6354:	3f 93       	push	r19
    6356:	4f 93       	push	r20
    6358:	5f 93       	push	r21
    635a:	6f 93       	push	r22
    635c:	7f 93       	push	r23
    635e:	8f 93       	push	r24
    6360:	9f 93       	push	r25
    6362:	af 93       	push	r26
    6364:	bf 93       	push	r27
    6366:	ef 93       	push	r30
    6368:	ff 93       	push	r31
    636a:	cf 93       	push	r28
    636c:	df 93       	push	r29
    636e:	cd b7       	in	r28, 0x3d	; 61
    6370:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    6372:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <tc_tcf1_cca_callback>
    6376:	90 91 c7 22 	lds	r25, 0x22C7	; 0x8022c7 <tc_tcf1_cca_callback+0x1>
    637a:	89 2b       	or	r24, r25
    637c:	31 f0       	breq	.+12     	; 0x638a <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    637e:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <tc_tcf1_cca_callback>
    6382:	90 91 c7 22 	lds	r25, 0x22C7	; 0x8022c7 <tc_tcf1_cca_callback+0x1>
    6386:	fc 01       	movw	r30, r24
    6388:	19 95       	eicall
	}
}
    638a:	00 00       	nop
    638c:	df 91       	pop	r29
    638e:	cf 91       	pop	r28
    6390:	ff 91       	pop	r31
    6392:	ef 91       	pop	r30
    6394:	bf 91       	pop	r27
    6396:	af 91       	pop	r26
    6398:	9f 91       	pop	r25
    639a:	8f 91       	pop	r24
    639c:	7f 91       	pop	r23
    639e:	6f 91       	pop	r22
    63a0:	5f 91       	pop	r21
    63a2:	4f 91       	pop	r20
    63a4:	3f 91       	pop	r19
    63a6:	2f 91       	pop	r18
    63a8:	0f 90       	pop	r0
    63aa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    63ae:	0f 90       	pop	r0
    63b0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    63b4:	0f 90       	pop	r0
    63b6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    63ba:	0f 90       	pop	r0
    63bc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    63c0:	0f 90       	pop	r0
    63c2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    63c6:	0f 90       	pop	r0
    63c8:	1f 90       	pop	r1
    63ca:	18 95       	reti

000063cc <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    63cc:	1f 92       	push	r1
    63ce:	0f 92       	push	r0
    63d0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    63d4:	0f 92       	push	r0
    63d6:	11 24       	eor	r1, r1
    63d8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    63dc:	0f 92       	push	r0
    63de:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    63e2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    63e6:	0f 92       	push	r0
    63e8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    63ec:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    63f0:	0f 92       	push	r0
    63f2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    63f6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    63fa:	0f 92       	push	r0
    63fc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6400:	2f 93       	push	r18
    6402:	3f 93       	push	r19
    6404:	4f 93       	push	r20
    6406:	5f 93       	push	r21
    6408:	6f 93       	push	r22
    640a:	7f 93       	push	r23
    640c:	8f 93       	push	r24
    640e:	9f 93       	push	r25
    6410:	af 93       	push	r26
    6412:	bf 93       	push	r27
    6414:	ef 93       	push	r30
    6416:	ff 93       	push	r31
    6418:	cf 93       	push	r28
    641a:	df 93       	push	r29
    641c:	cd b7       	in	r28, 0x3d	; 61
    641e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    6420:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <tc_tcf1_ccb_callback>
    6424:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <tc_tcf1_ccb_callback+0x1>
    6428:	89 2b       	or	r24, r25
    642a:	31 f0       	breq	.+12     	; 0x6438 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    642c:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <tc_tcf1_ccb_callback>
    6430:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <tc_tcf1_ccb_callback+0x1>
    6434:	fc 01       	movw	r30, r24
    6436:	19 95       	eicall
	}
}
    6438:	00 00       	nop
    643a:	df 91       	pop	r29
    643c:	cf 91       	pop	r28
    643e:	ff 91       	pop	r31
    6440:	ef 91       	pop	r30
    6442:	bf 91       	pop	r27
    6444:	af 91       	pop	r26
    6446:	9f 91       	pop	r25
    6448:	8f 91       	pop	r24
    644a:	7f 91       	pop	r23
    644c:	6f 91       	pop	r22
    644e:	5f 91       	pop	r21
    6450:	4f 91       	pop	r20
    6452:	3f 91       	pop	r19
    6454:	2f 91       	pop	r18
    6456:	0f 90       	pop	r0
    6458:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    645c:	0f 90       	pop	r0
    645e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6462:	0f 90       	pop	r0
    6464:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6468:	0f 90       	pop	r0
    646a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    646e:	0f 90       	pop	r0
    6470:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6474:	0f 90       	pop	r0
    6476:	1f 90       	pop	r1
    6478:	18 95       	reti

0000647a <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    647a:	cf 93       	push	r28
    647c:	df 93       	push	r29
    647e:	00 d0       	rcall	.+0      	; 0x6480 <tc_enable+0x6>
    6480:	cd b7       	in	r28, 0x3d	; 61
    6482:	de b7       	in	r29, 0x3e	; 62
    6484:	8a 83       	std	Y+2, r24	; 0x02
    6486:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t iflags = cpu_irq_save();
    6488:	0e 94 5d 24 	call	0x48ba	; 0x48ba <cpu_irq_save>
    648c:	89 83       	std	Y+1, r24	; 0x01

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    648e:	8a 81       	ldd	r24, Y+2	; 0x02
    6490:	9b 81       	ldd	r25, Y+3	; 0x03
    6492:	81 15       	cp	r24, r1
    6494:	98 40       	sbci	r25, 0x08	; 8
    6496:	49 f4       	brne	.+18     	; 0x64aa <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    6498:	61 e0       	ldi	r22, 0x01	; 1
    649a:	83 e0       	ldi	r24, 0x03	; 3
    649c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    64a0:	64 e0       	ldi	r22, 0x04	; 4
    64a2:	83 e0       	ldi	r24, 0x03	; 3
    64a4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    64a8:	66 c0       	rjmp	.+204    	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    64aa:	8a 81       	ldd	r24, Y+2	; 0x02
    64ac:	9b 81       	ldd	r25, Y+3	; 0x03
    64ae:	80 34       	cpi	r24, 0x40	; 64
    64b0:	98 40       	sbci	r25, 0x08	; 8
    64b2:	49 f4       	brne	.+18     	; 0x64c6 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    64b4:	62 e0       	ldi	r22, 0x02	; 2
    64b6:	83 e0       	ldi	r24, 0x03	; 3
    64b8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    64bc:	64 e0       	ldi	r22, 0x04	; 4
    64be:	83 e0       	ldi	r24, 0x03	; 3
    64c0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    64c4:	58 c0       	rjmp	.+176    	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    64c6:	8a 81       	ldd	r24, Y+2	; 0x02
    64c8:	9b 81       	ldd	r25, Y+3	; 0x03
    64ca:	81 15       	cp	r24, r1
    64cc:	99 40       	sbci	r25, 0x09	; 9
    64ce:	49 f4       	brne	.+18     	; 0x64e2 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    64d0:	61 e0       	ldi	r22, 0x01	; 1
    64d2:	84 e0       	ldi	r24, 0x04	; 4
    64d4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    64d8:	64 e0       	ldi	r22, 0x04	; 4
    64da:	84 e0       	ldi	r24, 0x04	; 4
    64dc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    64e0:	4a c0       	rjmp	.+148    	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    64e2:	8a 81       	ldd	r24, Y+2	; 0x02
    64e4:	9b 81       	ldd	r25, Y+3	; 0x03
    64e6:	80 34       	cpi	r24, 0x40	; 64
    64e8:	99 40       	sbci	r25, 0x09	; 9
    64ea:	49 f4       	brne	.+18     	; 0x64fe <tc_enable+0x84>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    64ec:	62 e0       	ldi	r22, 0x02	; 2
    64ee:	84 e0       	ldi	r24, 0x04	; 4
    64f0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    64f4:	64 e0       	ldi	r22, 0x04	; 4
    64f6:	84 e0       	ldi	r24, 0x04	; 4
    64f8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    64fc:	3c c0       	rjmp	.+120    	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    64fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6500:	9b 81       	ldd	r25, Y+3	; 0x03
    6502:	81 15       	cp	r24, r1
    6504:	9a 40       	sbci	r25, 0x0A	; 10
    6506:	49 f4       	brne	.+18     	; 0x651a <tc_enable+0xa0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    6508:	61 e0       	ldi	r22, 0x01	; 1
    650a:	85 e0       	ldi	r24, 0x05	; 5
    650c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    6510:	64 e0       	ldi	r22, 0x04	; 4
    6512:	85 e0       	ldi	r24, 0x05	; 5
    6514:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6518:	2e c0       	rjmp	.+92     	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    651a:	8a 81       	ldd	r24, Y+2	; 0x02
    651c:	9b 81       	ldd	r25, Y+3	; 0x03
    651e:	80 34       	cpi	r24, 0x40	; 64
    6520:	9a 40       	sbci	r25, 0x0A	; 10
    6522:	49 f4       	brne	.+18     	; 0x6536 <tc_enable+0xbc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    6524:	62 e0       	ldi	r22, 0x02	; 2
    6526:	85 e0       	ldi	r24, 0x05	; 5
    6528:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    652c:	64 e0       	ldi	r22, 0x04	; 4
    652e:	85 e0       	ldi	r24, 0x05	; 5
    6530:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6534:	20 c0       	rjmp	.+64     	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6536:	8a 81       	ldd	r24, Y+2	; 0x02
    6538:	9b 81       	ldd	r25, Y+3	; 0x03
    653a:	81 15       	cp	r24, r1
    653c:	9b 40       	sbci	r25, 0x0B	; 11
    653e:	49 f4       	brne	.+18     	; 0x6552 <tc_enable+0xd8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    6540:	61 e0       	ldi	r22, 0x01	; 1
    6542:	86 e0       	ldi	r24, 0x06	; 6
    6544:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    6548:	64 e0       	ldi	r22, 0x04	; 4
    654a:	86 e0       	ldi	r24, 0x06	; 6
    654c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6550:	12 c0       	rjmp	.+36     	; 0x6576 <tc_enable+0xfc>
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    6552:	8a 81       	ldd	r24, Y+2	; 0x02
    6554:	9b 81       	ldd	r25, Y+3	; 0x03
    6556:	80 34       	cpi	r24, 0x40	; 64
    6558:	9b 40       	sbci	r25, 0x0B	; 11
    655a:	49 f4       	brne	.+18     	; 0x656e <tc_enable+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    655c:	62 e0       	ldi	r22, 0x02	; 2
    655e:	86 e0       	ldi	r24, 0x06	; 6
    6560:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    6564:	64 e0       	ldi	r22, 0x04	; 4
    6566:	86 e0       	ldi	r24, 0x06	; 6
    6568:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    656c:	04 c0       	rjmp	.+8      	; 0x6576 <tc_enable+0xfc>
	} else
#endif
	{
		cpu_irq_restore(iflags);
    656e:	89 81       	ldd	r24, Y+1	; 0x01
    6570:	0e 94 6d 24 	call	0x48da	; 0x48da <cpu_irq_restore>
		return;
    6574:	06 c0       	rjmp	.+12     	; 0x6582 <tc_enable+0x108>
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	0e 94 7d 24 	call	0x48fa	; 0x48fa <sleepmgr_lock_mode>
	cpu_irq_restore(iflags);
    657c:	89 81       	ldd	r24, Y+1	; 0x01
    657e:	0e 94 6d 24 	call	0x48da	; 0x48da <cpu_irq_restore>
}
    6582:	23 96       	adiw	r28, 0x03	; 3
    6584:	cd bf       	out	0x3d, r28	; 61
    6586:	de bf       	out	0x3e, r29	; 62
    6588:	df 91       	pop	r29
    658a:	cf 91       	pop	r28
    658c:	08 95       	ret

0000658e <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    658e:	cf 93       	push	r28
    6590:	df 93       	push	r29
    6592:	1f 92       	push	r1
    6594:	cd b7       	in	r28, 0x3d	; 61
    6596:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    6598:	8f e3       	ldi	r24, 0x3F	; 63
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	fc 01       	movw	r30, r24
    659e:	80 81       	ld	r24, Z
    65a0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    65a2:	f8 94       	cli
	return flags;
    65a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    65a6:	0f 90       	pop	r0
    65a8:	df 91       	pop	r29
    65aa:	cf 91       	pop	r28
    65ac:	08 95       	ret

000065ae <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    65ae:	cf 93       	push	r28
    65b0:	df 93       	push	r29
    65b2:	1f 92       	push	r1
    65b4:	cd b7       	in	r28, 0x3d	; 61
    65b6:	de b7       	in	r29, 0x3e	; 62
    65b8:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    65ba:	8f e3       	ldi	r24, 0x3F	; 63
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	29 81       	ldd	r18, Y+1	; 0x01
    65c0:	fc 01       	movw	r30, r24
    65c2:	20 83       	st	Z, r18
}
    65c4:	00 00       	nop
    65c6:	0f 90       	pop	r0
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	08 95       	ret

000065ce <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    65ce:	1f 92       	push	r1
    65d0:	0f 92       	push	r0
    65d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    65d6:	0f 92       	push	r0
    65d8:	11 24       	eor	r1, r1
    65da:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    65de:	0f 92       	push	r0
    65e0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    65e4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    65e8:	0f 92       	push	r0
    65ea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    65ee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65f2:	0f 92       	push	r0
    65f4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65fc:	0f 92       	push	r0
    65fe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6602:	2f 93       	push	r18
    6604:	3f 93       	push	r19
    6606:	4f 93       	push	r20
    6608:	5f 93       	push	r21
    660a:	6f 93       	push	r22
    660c:	7f 93       	push	r23
    660e:	8f 93       	push	r24
    6610:	9f 93       	push	r25
    6612:	af 93       	push	r26
    6614:	bf 93       	push	r27
    6616:	ef 93       	push	r30
    6618:	ff 93       	push	r31
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    661e:	cd b7       	in	r28, 0x3d	; 61
    6620:	de b7       	in	r29, 0x3e	; 62
    6622:	43 d2       	rcall	.+1158   	; 0x6aaa <twim_interrupt_handler>
    6624:	00 00       	nop
    6626:	df 91       	pop	r29
    6628:	cf 91       	pop	r28
    662a:	ff 91       	pop	r31
    662c:	ef 91       	pop	r30
    662e:	bf 91       	pop	r27
    6630:	af 91       	pop	r26
    6632:	9f 91       	pop	r25
    6634:	8f 91       	pop	r24
    6636:	7f 91       	pop	r23
    6638:	6f 91       	pop	r22
    663a:	5f 91       	pop	r21
    663c:	4f 91       	pop	r20
    663e:	3f 91       	pop	r19
    6640:	2f 91       	pop	r18
    6642:	0f 90       	pop	r0
    6644:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6648:	0f 90       	pop	r0
    664a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    664e:	0f 90       	pop	r0
    6650:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6654:	0f 90       	pop	r0
    6656:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    665a:	0f 90       	pop	r0
    665c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6660:	0f 90       	pop	r0
    6662:	1f 90       	pop	r1
    6664:	18 95       	reti

00006666 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    6666:	1f 92       	push	r1
    6668:	0f 92       	push	r0
    666a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    666e:	0f 92       	push	r0
    6670:	11 24       	eor	r1, r1
    6672:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6676:	0f 92       	push	r0
    6678:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    667c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6680:	0f 92       	push	r0
    6682:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6686:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    668a:	0f 92       	push	r0
    668c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6690:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6694:	0f 92       	push	r0
    6696:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    669a:	2f 93       	push	r18
    669c:	3f 93       	push	r19
    669e:	4f 93       	push	r20
    66a0:	5f 93       	push	r21
    66a2:	6f 93       	push	r22
    66a4:	7f 93       	push	r23
    66a6:	8f 93       	push	r24
    66a8:	9f 93       	push	r25
    66aa:	af 93       	push	r26
    66ac:	bf 93       	push	r27
    66ae:	ef 93       	push	r30
    66b0:	ff 93       	push	r31
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	cd b7       	in	r28, 0x3d	; 61
    66b8:	de b7       	in	r29, 0x3e	; 62
    66ba:	f7 d1       	rcall	.+1006   	; 0x6aaa <twim_interrupt_handler>
    66bc:	00 00       	nop
    66be:	df 91       	pop	r29
    66c0:	cf 91       	pop	r28
    66c2:	ff 91       	pop	r31
    66c4:	ef 91       	pop	r30
    66c6:	bf 91       	pop	r27
    66c8:	af 91       	pop	r26
    66ca:	9f 91       	pop	r25
    66cc:	8f 91       	pop	r24
    66ce:	7f 91       	pop	r23
    66d0:	6f 91       	pop	r22
    66d2:	5f 91       	pop	r21
    66d4:	4f 91       	pop	r20
    66d6:	3f 91       	pop	r19
    66d8:	2f 91       	pop	r18
    66da:	0f 90       	pop	r0
    66dc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    66e0:	0f 90       	pop	r0
    66e2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66e6:	0f 90       	pop	r0
    66e8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66ec:	0f 90       	pop	r0
    66ee:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66f2:	0f 90       	pop	r0
    66f4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    66f8:	0f 90       	pop	r0
    66fa:	1f 90       	pop	r1
    66fc:	18 95       	reti

000066fe <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    66fe:	1f 92       	push	r1
    6700:	0f 92       	push	r0
    6702:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6706:	0f 92       	push	r0
    6708:	11 24       	eor	r1, r1
    670a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    670e:	0f 92       	push	r0
    6710:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6714:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6718:	0f 92       	push	r0
    671a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    671e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6722:	0f 92       	push	r0
    6724:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6728:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    672c:	0f 92       	push	r0
    672e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6732:	2f 93       	push	r18
    6734:	3f 93       	push	r19
    6736:	4f 93       	push	r20
    6738:	5f 93       	push	r21
    673a:	6f 93       	push	r22
    673c:	7f 93       	push	r23
    673e:	8f 93       	push	r24
    6740:	9f 93       	push	r25
    6742:	af 93       	push	r26
    6744:	bf 93       	push	r27
    6746:	ef 93       	push	r30
    6748:	ff 93       	push	r31
    674a:	cf 93       	push	r28
    674c:	df 93       	push	r29
    674e:	cd b7       	in	r28, 0x3d	; 61
    6750:	de b7       	in	r29, 0x3e	; 62
    6752:	ab d1       	rcall	.+854    	; 0x6aaa <twim_interrupt_handler>
    6754:	00 00       	nop
    6756:	df 91       	pop	r29
    6758:	cf 91       	pop	r28
    675a:	ff 91       	pop	r31
    675c:	ef 91       	pop	r30
    675e:	bf 91       	pop	r27
    6760:	af 91       	pop	r26
    6762:	9f 91       	pop	r25
    6764:	8f 91       	pop	r24
    6766:	7f 91       	pop	r23
    6768:	6f 91       	pop	r22
    676a:	5f 91       	pop	r21
    676c:	4f 91       	pop	r20
    676e:	3f 91       	pop	r19
    6770:	2f 91       	pop	r18
    6772:	0f 90       	pop	r0
    6774:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6778:	0f 90       	pop	r0
    677a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    677e:	0f 90       	pop	r0
    6780:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6784:	0f 90       	pop	r0
    6786:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    678a:	0f 90       	pop	r0
    678c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6790:	0f 90       	pop	r0
    6792:	1f 90       	pop	r1
    6794:	18 95       	reti

00006796 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    6796:	1f 92       	push	r1
    6798:	0f 92       	push	r0
    679a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    679e:	0f 92       	push	r0
    67a0:	11 24       	eor	r1, r1
    67a2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    67a6:	0f 92       	push	r0
    67a8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    67ac:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    67b0:	0f 92       	push	r0
    67b2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    67b6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    67ba:	0f 92       	push	r0
    67bc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    67c0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    67c4:	0f 92       	push	r0
    67c6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    67ca:	2f 93       	push	r18
    67cc:	3f 93       	push	r19
    67ce:	4f 93       	push	r20
    67d0:	5f 93       	push	r21
    67d2:	6f 93       	push	r22
    67d4:	7f 93       	push	r23
    67d6:	8f 93       	push	r24
    67d8:	9f 93       	push	r25
    67da:	af 93       	push	r26
    67dc:	bf 93       	push	r27
    67de:	ef 93       	push	r30
    67e0:	ff 93       	push	r31
    67e2:	cf 93       	push	r28
    67e4:	df 93       	push	r29
    67e6:	cd b7       	in	r28, 0x3d	; 61
    67e8:	de b7       	in	r29, 0x3e	; 62
    67ea:	5f d1       	rcall	.+702    	; 0x6aaa <twim_interrupt_handler>
    67ec:	00 00       	nop
    67ee:	df 91       	pop	r29
    67f0:	cf 91       	pop	r28
    67f2:	ff 91       	pop	r31
    67f4:	ef 91       	pop	r30
    67f6:	bf 91       	pop	r27
    67f8:	af 91       	pop	r26
    67fa:	9f 91       	pop	r25
    67fc:	8f 91       	pop	r24
    67fe:	7f 91       	pop	r23
    6800:	6f 91       	pop	r22
    6802:	5f 91       	pop	r21
    6804:	4f 91       	pop	r20
    6806:	3f 91       	pop	r19
    6808:	2f 91       	pop	r18
    680a:	0f 90       	pop	r0
    680c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6810:	0f 90       	pop	r0
    6812:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6816:	0f 90       	pop	r0
    6818:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    681c:	0f 90       	pop	r0
    681e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6822:	0f 90       	pop	r0
    6824:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6828:	0f 90       	pop	r0
    682a:	1f 90       	pop	r1
    682c:	18 95       	reti

0000682e <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    682e:	cf 93       	push	r28
    6830:	df 93       	push	r29
    6832:	1f 92       	push	r1
    6834:	1f 92       	push	r1
    6836:	cd b7       	in	r28, 0x3d	; 61
    6838:	de b7       	in	r29, 0x3e	; 62
    683a:	89 83       	std	Y+1, r24	; 0x01
    683c:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    683e:	89 81       	ldd	r24, Y+1	; 0x01
    6840:	9a 81       	ldd	r25, Y+2	; 0x02
    6842:	fc 01       	movw	r30, r24
    6844:	84 81       	ldd	r24, Z+4	; 0x04
    6846:	88 2f       	mov	r24, r24
    6848:	90 e0       	ldi	r25, 0x00	; 0
    684a:	83 70       	andi	r24, 0x03	; 3
    684c:	99 27       	eor	r25, r25
    684e:	21 e0       	ldi	r18, 0x01	; 1
    6850:	01 97       	sbiw	r24, 0x01	; 1
    6852:	09 f0       	breq	.+2      	; 0x6856 <twim_idle+0x28>
    6854:	20 e0       	ldi	r18, 0x00	; 0
    6856:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    6858:	0f 90       	pop	r0
    685a:	0f 90       	pop	r0
    685c:	df 91       	pop	r29
    685e:	cf 91       	pop	r28
    6860:	08 95       	ret

00006862 <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    6862:	cf 93       	push	r28
    6864:	df 93       	push	r29
    6866:	1f 92       	push	r1
    6868:	1f 92       	push	r1
    686a:	cd b7       	in	r28, 0x3d	; 61
    686c:	de b7       	in	r29, 0x3e	; 62
    686e:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    6870:	05 c0       	rjmp	.+10     	; 0x687c <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    6872:	8a 81       	ldd	r24, Y+2	; 0x02
    6874:	88 23       	and	r24, r24
    6876:	11 f0       	breq	.+4      	; 0x687c <twim_acquire+0x1a>
    6878:	86 ef       	ldi	r24, 0xF6	; 246
    687a:	0f c0       	rjmp	.+30     	; 0x689a <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    687c:	80 91 d3 22 	lds	r24, 0x22D3	; 0x8022d3 <transfer+0x9>
    6880:	88 23       	and	r24, r24
    6882:	b9 f7       	brne	.-18     	; 0x6872 <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    6884:	84 de       	rcall	.-760    	; 0x658e <cpu_irq_save>
    6886:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    6888:	81 e0       	ldi	r24, 0x01	; 1
    688a:	80 93 d3 22 	sts	0x22D3, r24	; 0x8022d3 <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    688e:	80 e8       	ldi	r24, 0x80	; 128
    6890:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <transfer+0xa>

	cpu_irq_restore (flags);
    6894:	89 81       	ldd	r24, Y+1	; 0x01
    6896:	8b de       	rcall	.-746    	; 0x65ae <cpu_irq_restore>

	return STATUS_OK;
    6898:	80 e0       	ldi	r24, 0x00	; 0
}
    689a:	0f 90       	pop	r0
    689c:	0f 90       	pop	r0
    689e:	df 91       	pop	r29
    68a0:	cf 91       	pop	r28
    68a2:	08 95       	ret

000068a4 <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    68a4:	cf 93       	push	r28
    68a6:	df 93       	push	r29
    68a8:	1f 92       	push	r1
    68aa:	cd b7       	in	r28, 0x3d	; 61
    68ac:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    68ae:	00 00       	nop
    68b0:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <transfer+0xa>
    68b4:	80 38       	cpi	r24, 0x80	; 128
    68b6:	e1 f3       	breq	.-8      	; 0x68b0 <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    68b8:	00 c0       	rjmp	.+0      	; 0x68ba <twim_release+0x16>
    68ba:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    68be:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    68c2:	b5 df       	rcall	.-150    	; 0x682e <twim_idle>
    68c4:	98 2f       	mov	r25, r24
    68c6:	81 e0       	ldi	r24, 0x01	; 1
    68c8:	89 27       	eor	r24, r25
    68ca:	88 23       	and	r24, r24
    68cc:	b1 f7       	brne	.-20     	; 0x68ba <twim_release+0x16>

	status_code_t const status = transfer.status;
    68ce:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <transfer+0xa>
    68d2:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    68d4:	10 92 d3 22 	sts	0x22D3, r1	; 0x8022d3 <transfer+0x9>

	return status;
    68d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    68da:	0f 90       	pop	r0
    68dc:	df 91       	pop	r29
    68de:	cf 91       	pop	r28
    68e0:	08 95       	ret

000068e2 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    68e2:	cf 93       	push	r28
    68e4:	df 93       	push	r29
    68e6:	cd b7       	in	r28, 0x3d	; 61
    68e8:	de b7       	in	r29, 0x3e	; 62
    68ea:	28 97       	sbiw	r28, 0x08	; 8
    68ec:	cd bf       	out	0x3d, r28	; 61
    68ee:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    68f0:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    68f4:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    68f8:	89 83       	std	Y+1, r24	; 0x01
    68fa:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    68fc:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <transfer+0x2>
    6900:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <transfer+0x3>
    6904:	8b 83       	std	Y+3, r24	; 0x03
    6906:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    6908:	20 91 ce 22 	lds	r18, 0x22CE	; 0x8022ce <transfer+0x4>
    690c:	30 91 cf 22 	lds	r19, 0x22CF	; 0x8022cf <transfer+0x5>
    6910:	8b 81       	ldd	r24, Y+3	; 0x03
    6912:	9c 81       	ldd	r25, Y+4	; 0x04
    6914:	fc 01       	movw	r30, r24
    6916:	84 81       	ldd	r24, Z+4	; 0x04
    6918:	95 81       	ldd	r25, Z+5	; 0x05
    691a:	28 17       	cp	r18, r24
    691c:	39 07       	cpc	r19, r25
    691e:	e4 f4       	brge	.+56     	; 0x6958 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    6920:	8b 81       	ldd	r24, Y+3	; 0x03
    6922:	9c 81       	ldd	r25, Y+4	; 0x04
    6924:	01 96       	adiw	r24, 0x01	; 1
    6926:	8d 83       	std	Y+5, r24	; 0x05
    6928:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    692a:	80 91 ce 22 	lds	r24, 0x22CE	; 0x8022ce <transfer+0x4>
    692e:	90 91 cf 22 	lds	r25, 0x22CF	; 0x8022cf <transfer+0x5>
    6932:	9c 01       	movw	r18, r24
    6934:	2f 5f       	subi	r18, 0xFF	; 255
    6936:	3f 4f       	sbci	r19, 0xFF	; 255
    6938:	20 93 ce 22 	sts	0x22CE, r18	; 0x8022ce <transfer+0x4>
    693c:	30 93 cf 22 	sts	0x22CF, r19	; 0x8022cf <transfer+0x5>
    6940:	9c 01       	movw	r18, r24
    6942:	8d 81       	ldd	r24, Y+5	; 0x05
    6944:	9e 81       	ldd	r25, Y+6	; 0x06
    6946:	82 0f       	add	r24, r18
    6948:	93 1f       	adc	r25, r19
    694a:	fc 01       	movw	r30, r24
    694c:	20 81       	ld	r18, Z
    694e:	89 81       	ldd	r24, Y+1	; 0x01
    6950:	9a 81       	ldd	r25, Y+2	; 0x02
    6952:	fc 01       	movw	r30, r24
    6954:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    6956:	3f c0       	rjmp	.+126    	; 0x69d6 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    6958:	20 91 d0 22 	lds	r18, 0x22D0	; 0x8022d0 <transfer+0x6>
    695c:	30 91 d1 22 	lds	r19, 0x22D1	; 0x8022d1 <transfer+0x7>
    6960:	8b 81       	ldd	r24, Y+3	; 0x03
    6962:	9c 81       	ldd	r25, Y+4	; 0x04
    6964:	fc 01       	movw	r30, r24
    6966:	80 85       	ldd	r24, Z+8	; 0x08
    6968:	91 85       	ldd	r25, Z+9	; 0x09
    696a:	28 17       	cp	r18, r24
    696c:	39 07       	cpc	r19, r25
    696e:	60 f5       	brcc	.+88     	; 0x69c8 <twim_write_handler+0xe6>

		if (transfer.read) {
    6970:	80 91 d2 22 	lds	r24, 0x22D2	; 0x8022d2 <transfer+0x8>
    6974:	88 23       	and	r24, r24
    6976:	59 f0       	breq	.+22     	; 0x698e <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    6978:	89 81       	ldd	r24, Y+1	; 0x01
    697a:	9a 81       	ldd	r25, Y+2	; 0x02
    697c:	fc 01       	movw	r30, r24
    697e:	86 81       	ldd	r24, Z+6	; 0x06
    6980:	28 2f       	mov	r18, r24
    6982:	21 60       	ori	r18, 0x01	; 1
    6984:	89 81       	ldd	r24, Y+1	; 0x01
    6986:	9a 81       	ldd	r25, Y+2	; 0x02
    6988:	fc 01       	movw	r30, r24
    698a:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    698c:	24 c0       	rjmp	.+72     	; 0x69d6 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    698e:	8b 81       	ldd	r24, Y+3	; 0x03
    6990:	9c 81       	ldd	r25, Y+4	; 0x04
    6992:	fc 01       	movw	r30, r24
    6994:	86 81       	ldd	r24, Z+6	; 0x06
    6996:	97 81       	ldd	r25, Z+7	; 0x07
    6998:	8f 83       	std	Y+7, r24	; 0x07
    699a:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    699c:	80 91 d0 22 	lds	r24, 0x22D0	; 0x8022d0 <transfer+0x6>
    69a0:	90 91 d1 22 	lds	r25, 0x22D1	; 0x8022d1 <transfer+0x7>
    69a4:	9c 01       	movw	r18, r24
    69a6:	2f 5f       	subi	r18, 0xFF	; 255
    69a8:	3f 4f       	sbci	r19, 0xFF	; 255
    69aa:	20 93 d0 22 	sts	0x22D0, r18	; 0x8022d0 <transfer+0x6>
    69ae:	30 93 d1 22 	sts	0x22D1, r19	; 0x8022d1 <transfer+0x7>
    69b2:	2f 81       	ldd	r18, Y+7	; 0x07
    69b4:	38 85       	ldd	r19, Y+8	; 0x08
    69b6:	82 0f       	add	r24, r18
    69b8:	93 1f       	adc	r25, r19
    69ba:	fc 01       	movw	r30, r24
    69bc:	20 81       	ld	r18, Z
    69be:	89 81       	ldd	r24, Y+1	; 0x01
    69c0:	9a 81       	ldd	r25, Y+2	; 0x02
    69c2:	fc 01       	movw	r30, r24
    69c4:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    69c6:	07 c0       	rjmp	.+14     	; 0x69d6 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    69c8:	89 81       	ldd	r24, Y+1	; 0x01
    69ca:	9a 81       	ldd	r25, Y+2	; 0x02
    69cc:	23 e0       	ldi	r18, 0x03	; 3
    69ce:	fc 01       	movw	r30, r24
    69d0:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    69d2:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <transfer+0xa>
	}
}
    69d6:	00 00       	nop
    69d8:	28 96       	adiw	r28, 0x08	; 8
    69da:	cd bf       	out	0x3d, r28	; 61
    69dc:	de bf       	out	0x3e, r29	; 62
    69de:	df 91       	pop	r29
    69e0:	cf 91       	pop	r28
    69e2:	08 95       	ret

000069e4 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    69e4:	cf 93       	push	r28
    69e6:	df 93       	push	r29
    69e8:	00 d0       	rcall	.+0      	; 0x69ea <twim_read_handler+0x6>
    69ea:	00 d0       	rcall	.+0      	; 0x69ec <twim_read_handler+0x8>
    69ec:	cd b7       	in	r28, 0x3d	; 61
    69ee:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    69f0:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    69f4:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    69f8:	89 83       	std	Y+1, r24	; 0x01
    69fa:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    69fc:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <transfer+0x2>
    6a00:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <transfer+0x3>
    6a04:	8b 83       	std	Y+3, r24	; 0x03
    6a06:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    6a08:	20 91 d0 22 	lds	r18, 0x22D0	; 0x8022d0 <transfer+0x6>
    6a0c:	30 91 d1 22 	lds	r19, 0x22D1	; 0x8022d1 <transfer+0x7>
    6a10:	8b 81       	ldd	r24, Y+3	; 0x03
    6a12:	9c 81       	ldd	r25, Y+4	; 0x04
    6a14:	fc 01       	movw	r30, r24
    6a16:	80 85       	ldd	r24, Z+8	; 0x08
    6a18:	91 85       	ldd	r25, Z+9	; 0x09
    6a1a:	28 17       	cp	r18, r24
    6a1c:	39 07       	cpc	r19, r25
    6a1e:	b0 f5       	brcc	.+108    	; 0x6a8c <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    6a20:	8b 81       	ldd	r24, Y+3	; 0x03
    6a22:	9c 81       	ldd	r25, Y+4	; 0x04
    6a24:	fc 01       	movw	r30, r24
    6a26:	86 81       	ldd	r24, Z+6	; 0x06
    6a28:	97 81       	ldd	r25, Z+7	; 0x07
    6a2a:	8d 83       	std	Y+5, r24	; 0x05
    6a2c:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    6a2e:	80 91 d0 22 	lds	r24, 0x22D0	; 0x8022d0 <transfer+0x6>
    6a32:	90 91 d1 22 	lds	r25, 0x22D1	; 0x8022d1 <transfer+0x7>
    6a36:	9c 01       	movw	r18, r24
    6a38:	2f 5f       	subi	r18, 0xFF	; 255
    6a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a3c:	20 93 d0 22 	sts	0x22D0, r18	; 0x8022d0 <transfer+0x6>
    6a40:	30 93 d1 22 	sts	0x22D1, r19	; 0x8022d1 <transfer+0x7>
    6a44:	2d 81       	ldd	r18, Y+5	; 0x05
    6a46:	3e 81       	ldd	r19, Y+6	; 0x06
    6a48:	82 0f       	add	r24, r18
    6a4a:	93 1f       	adc	r25, r19
    6a4c:	29 81       	ldd	r18, Y+1	; 0x01
    6a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    6a50:	f9 01       	movw	r30, r18
    6a52:	27 81       	ldd	r18, Z+7	; 0x07
    6a54:	fc 01       	movw	r30, r24
    6a56:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    6a58:	20 91 d0 22 	lds	r18, 0x22D0	; 0x8022d0 <transfer+0x6>
    6a5c:	30 91 d1 22 	lds	r19, 0x22D1	; 0x8022d1 <transfer+0x7>
    6a60:	8b 81       	ldd	r24, Y+3	; 0x03
    6a62:	9c 81       	ldd	r25, Y+4	; 0x04
    6a64:	fc 01       	movw	r30, r24
    6a66:	80 85       	ldd	r24, Z+8	; 0x08
    6a68:	91 85       	ldd	r25, Z+9	; 0x09
    6a6a:	28 17       	cp	r18, r24
    6a6c:	39 07       	cpc	r19, r25
    6a6e:	30 f4       	brcc	.+12     	; 0x6a7c <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6a70:	89 81       	ldd	r24, Y+1	; 0x01
    6a72:	9a 81       	ldd	r25, Y+2	; 0x02
    6a74:	22 e0       	ldi	r18, 0x02	; 2
    6a76:	fc 01       	movw	r30, r24
    6a78:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    6a7a:	10 c0       	rjmp	.+32     	; 0x6a9c <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    6a7c:	89 81       	ldd	r24, Y+1	; 0x01
    6a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a80:	27 e0       	ldi	r18, 0x07	; 7
    6a82:	fc 01       	movw	r30, r24
    6a84:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    6a86:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    6a8a:	08 c0       	rjmp	.+16     	; 0x6a9c <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6a8c:	89 81       	ldd	r24, Y+1	; 0x01
    6a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a90:	23 e0       	ldi	r18, 0x03	; 3
    6a92:	fc 01       	movw	r30, r24
    6a94:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    6a96:	89 ef       	ldi	r24, 0xF9	; 249
    6a98:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <transfer+0xa>
	}
}
    6a9c:	00 00       	nop
    6a9e:	26 96       	adiw	r28, 0x06	; 6
    6aa0:	cd bf       	out	0x3d, r28	; 61
    6aa2:	de bf       	out	0x3e, r29	; 62
    6aa4:	df 91       	pop	r29
    6aa6:	cf 91       	pop	r28
    6aa8:	08 95       	ret

00006aaa <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    6aaa:	cf 93       	push	r28
    6aac:	df 93       	push	r29
    6aae:	1f 92       	push	r1
    6ab0:	cd b7       	in	r28, 0x3d	; 61
    6ab2:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    6ab4:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    6ab8:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    6abc:	fc 01       	movw	r30, r24
    6abe:	84 81       	ldd	r24, Z+4	; 0x04
    6ac0:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    6ac2:	89 81       	ldd	r24, Y+1	; 0x01
    6ac4:	88 2f       	mov	r24, r24
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	88 70       	andi	r24, 0x08	; 8
    6aca:	99 27       	eor	r25, r25
    6acc:	89 2b       	or	r24, r25
    6ace:	99 f0       	breq	.+38     	; 0x6af6 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    6ad0:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    6ad4:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    6ad8:	29 81       	ldd	r18, Y+1	; 0x01
    6ada:	28 60       	ori	r18, 0x08	; 8
    6adc:	fc 01       	movw	r30, r24
    6ade:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    6ae0:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    6ae4:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    6ae8:	23 e0       	ldi	r18, 0x03	; 3
    6aea:	fc 01       	movw	r30, r24
    6aec:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    6aee:	86 ef       	ldi	r24, 0xF6	; 246
    6af0:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    6af4:	2a c0       	rjmp	.+84     	; 0x6b4a <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    6af6:	89 81       	ldd	r24, Y+1	; 0x01
    6af8:	88 2f       	mov	r24, r24
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	84 70       	andi	r24, 0x04	; 4
    6afe:	99 27       	eor	r25, r25
    6b00:	89 2b       	or	r24, r25
    6b02:	39 f4       	brne	.+14     	; 0x6b12 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    6b04:	89 81       	ldd	r24, Y+1	; 0x01
    6b06:	88 2f       	mov	r24, r24
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	80 71       	andi	r24, 0x10	; 16
    6b0c:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    6b0e:	89 2b       	or	r24, r25
    6b10:	59 f0       	breq	.+22     	; 0x6b28 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6b12:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    6b16:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    6b1a:	23 e0       	ldi	r18, 0x03	; 3
    6b1c:	fc 01       	movw	r30, r24
    6b1e:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    6b20:	8f ef       	ldi	r24, 0xFF	; 255
    6b22:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    6b26:	11 c0       	rjmp	.+34     	; 0x6b4a <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    6b28:	89 81       	ldd	r24, Y+1	; 0x01
    6b2a:	88 2f       	mov	r24, r24
    6b2c:	90 e0       	ldi	r25, 0x00	; 0
    6b2e:	80 74       	andi	r24, 0x40	; 64
    6b30:	99 27       	eor	r25, r25
    6b32:	89 2b       	or	r24, r25
    6b34:	11 f0       	breq	.+4      	; 0x6b3a <twim_interrupt_handler+0x90>

		twim_write_handler();
    6b36:	d5 de       	rcall	.-598    	; 0x68e2 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    6b38:	08 c0       	rjmp	.+16     	; 0x6b4a <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    6b3a:	89 81       	ldd	r24, Y+1	; 0x01
    6b3c:	88 23       	and	r24, r24

		twim_read_handler();
    6b3e:	14 f4       	brge	.+4      	; 0x6b44 <twim_interrupt_handler+0x9a>
    6b40:	51 df       	rcall	.-350    	; 0x69e4 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    6b42:	03 c0       	rjmp	.+6      	; 0x6b4a <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    6b44:	8b ef       	ldi	r24, 0xFB	; 251
    6b46:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <transfer+0xa>
	}
}
    6b4a:	00 00       	nop
    6b4c:	0f 90       	pop	r0
    6b4e:	df 91       	pop	r29
    6b50:	cf 91       	pop	r28
    6b52:	08 95       	ret

00006b54 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    6b54:	cf 93       	push	r28
    6b56:	df 93       	push	r29
    6b58:	cd b7       	in	r28, 0x3d	; 61
    6b5a:	de b7       	in	r29, 0x3e	; 62
    6b5c:	25 97       	sbiw	r28, 0x05	; 5
    6b5e:	cd bf       	out	0x3d, r28	; 61
    6b60:	de bf       	out	0x3e, r29	; 62
    6b62:	8a 83       	std	Y+2, r24	; 0x02
    6b64:	9b 83       	std	Y+3, r25	; 0x03
    6b66:	6c 83       	std	Y+4, r22	; 0x04
    6b68:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    6b6a:	88 eb       	ldi	r24, 0xB8	; 184
    6b6c:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    6b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b70:	9d 81       	ldd	r25, Y+5	; 0x05
    6b72:	fc 01       	movw	r30, r24
    6b74:	84 81       	ldd	r24, Z+4	; 0x04
    6b76:	95 81       	ldd	r25, Z+5	; 0x05
    6b78:	a6 81       	ldd	r26, Z+6	; 0x06
    6b7a:	b7 81       	ldd	r27, Z+7	; 0x07
    6b7c:	28 2f       	mov	r18, r24
    6b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b80:	9b 81       	ldd	r25, Y+3	; 0x03
    6b82:	fc 01       	movw	r30, r24
    6b84:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    6b86:	8a 81       	ldd	r24, Y+2	; 0x02
    6b88:	9b 81       	ldd	r25, Y+3	; 0x03
    6b8a:	29 81       	ldd	r18, Y+1	; 0x01
    6b8c:	fc 01       	movw	r30, r24
    6b8e:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    6b90:	8a 81       	ldd	r24, Y+2	; 0x02
    6b92:	9b 81       	ldd	r25, Y+3	; 0x03
    6b94:	21 e0       	ldi	r18, 0x01	; 1
    6b96:	fc 01       	movw	r30, r24
    6b98:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    6b9a:	10 92 d3 22 	sts	0x22D3, r1	; 0x8022d3 <transfer+0x9>
	transfer.status    = STATUS_OK;
    6b9e:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    6ba2:	80 ea       	ldi	r24, 0xA0	; 160
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	20 ea       	ldi	r18, 0xA0	; 160
    6ba8:	30 e0       	ldi	r19, 0x00	; 0
    6baa:	f9 01       	movw	r30, r18
    6bac:	22 81       	ldd	r18, Z+2	; 0x02
    6bae:	22 60       	ori	r18, 0x02	; 2
    6bb0:	fc 01       	movw	r30, r24
    6bb2:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    6bb4:	78 94       	sei

	return STATUS_OK;
    6bb6:	80 e0       	ldi	r24, 0x00	; 0
}
    6bb8:	25 96       	adiw	r28, 0x05	; 5
    6bba:	cd bf       	out	0x3d, r28	; 61
    6bbc:	de bf       	out	0x3e, r29	; 62
    6bbe:	df 91       	pop	r29
    6bc0:	cf 91       	pop	r28
    6bc2:	08 95       	ret

00006bc4 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    6bc4:	cf 93       	push	r28
    6bc6:	df 93       	push	r29
    6bc8:	cd b7       	in	r28, 0x3d	; 61
    6bca:	de b7       	in	r29, 0x3e	; 62
    6bcc:	27 97       	sbiw	r28, 0x07	; 7
    6bce:	cd bf       	out	0x3d, r28	; 61
    6bd0:	de bf       	out	0x3e, r29	; 62
    6bd2:	8b 83       	std	Y+3, r24	; 0x03
    6bd4:	9c 83       	std	Y+4, r25	; 0x04
    6bd6:	6d 83       	std	Y+5, r22	; 0x05
    6bd8:	7e 83       	std	Y+6, r23	; 0x06
    6bda:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    6bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    6bde:	9c 81       	ldd	r25, Y+4	; 0x04
    6be0:	89 2b       	or	r24, r25
    6be2:	21 f0       	breq	.+8      	; 0x6bec <twi_master_transfer+0x28>
    6be4:	8d 81       	ldd	r24, Y+5	; 0x05
    6be6:	9e 81       	ldd	r25, Y+6	; 0x06
    6be8:	89 2b       	or	r24, r25
    6bea:	11 f4       	brne	.+4      	; 0x6bf0 <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    6bec:	88 ef       	ldi	r24, 0xF8	; 248
    6bee:	49 c0       	rjmp	.+146    	; 0x6c82 <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    6bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    6bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    6bf4:	fc 01       	movw	r30, r24
    6bf6:	82 85       	ldd	r24, Z+10	; 0x0a
    6bf8:	34 de       	rcall	.-920    	; 0x6862 <twim_acquire>
    6bfa:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    6bfc:	89 81       	ldd	r24, Y+1	; 0x01
    6bfe:	88 23       	and	r24, r24
    6c00:	09 f0       	breq	.+2      	; 0x6c04 <twi_master_transfer+0x40>
    6c02:	3e c0       	rjmp	.+124    	; 0x6c80 <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    6c04:	8b 81       	ldd	r24, Y+3	; 0x03
    6c06:	9c 81       	ldd	r25, Y+4	; 0x04
    6c08:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <transfer>
    6c0c:	90 93 cb 22 	sts	0x22CB, r25	; 0x8022cb <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    6c10:	8d 81       	ldd	r24, Y+5	; 0x05
    6c12:	9e 81       	ldd	r25, Y+6	; 0x06
    6c14:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <transfer+0x2>
    6c18:	90 93 cd 22 	sts	0x22CD, r25	; 0x8022cd <transfer+0x3>
		transfer.addr_count  = 0;
    6c1c:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <transfer+0x4>
    6c20:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <transfer+0x5>
		transfer.data_count  = 0;
    6c24:	10 92 d0 22 	sts	0x22D0, r1	; 0x8022d0 <transfer+0x6>
    6c28:	10 92 d1 22 	sts	0x22D1, r1	; 0x8022d1 <transfer+0x7>
		transfer.read        = read;
    6c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    6c2e:	80 93 d2 22 	sts	0x22D2, r24	; 0x8022d2 <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    6c32:	8d 81       	ldd	r24, Y+5	; 0x05
    6c34:	9e 81       	ldd	r25, Y+6	; 0x06
    6c36:	fc 01       	movw	r30, r24
    6c38:	80 81       	ld	r24, Z
    6c3a:	88 0f       	add	r24, r24
    6c3c:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    6c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    6c40:	9e 81       	ldd	r25, Y+6	; 0x06
    6c42:	fc 01       	movw	r30, r24
    6c44:	84 81       	ldd	r24, Z+4	; 0x04
    6c46:	95 81       	ldd	r25, Z+5	; 0x05
    6c48:	89 2b       	or	r24, r25
    6c4a:	29 f4       	brne	.+10     	; 0x6c56 <twi_master_transfer+0x92>
    6c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    6c4e:	81 e0       	ldi	r24, 0x01	; 1
    6c50:	89 27       	eor	r24, r25
    6c52:	88 23       	and	r24, r24
    6c54:	41 f0       	breq	.+16     	; 0x6c66 <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    6c56:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    6c5a:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    6c5e:	2a 81       	ldd	r18, Y+2	; 0x02
    6c60:	fc 01       	movw	r30, r24
    6c62:	26 83       	std	Z+6, r18	; 0x06
    6c64:	0b c0       	rjmp	.+22     	; 0x6c7c <twi_master_transfer+0xb8>
		} else if (read) {
    6c66:	8f 81       	ldd	r24, Y+7	; 0x07
    6c68:	88 23       	and	r24, r24
    6c6a:	41 f0       	breq	.+16     	; 0x6c7c <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    6c6c:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <transfer>
    6c70:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <transfer+0x1>
    6c74:	2a 81       	ldd	r18, Y+2	; 0x02
    6c76:	21 60       	ori	r18, 0x01	; 1
    6c78:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    6c7a:	26 83       	std	Z+6, r18	; 0x06
    6c7c:	13 de       	rcall	.-986    	; 0x68a4 <twim_release>
    6c7e:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    6c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c82:	27 96       	adiw	r28, 0x07	; 7
    6c84:	cd bf       	out	0x3d, r28	; 61
    6c86:	de bf       	out	0x3e, r29	; 62
    6c88:	df 91       	pop	r29
    6c8a:	cf 91       	pop	r28
    6c8c:	08 95       	ret

00006c8e <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    6c8e:	cf 93       	push	r28
    6c90:	df 93       	push	r29
    6c92:	1f 92       	push	r1
    6c94:	1f 92       	push	r1
    6c96:	cd b7       	in	r28, 0x3d	; 61
    6c98:	de b7       	in	r29, 0x3e	; 62
    6c9a:	89 83       	std	Y+1, r24	; 0x01
    6c9c:	9a 83       	std	Y+2, r25	; 0x02
    6c9e:	89 81       	ldd	r24, Y+1	; 0x01
    6ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ca2:	fc 01       	movw	r30, r24
    6ca4:	84 81       	ldd	r24, Z+4	; 0x04
    6ca6:	28 2f       	mov	r18, r24
    6ca8:	20 61       	ori	r18, 0x10	; 16
    6caa:	89 81       	ldd	r24, Y+1	; 0x01
    6cac:	9a 81       	ldd	r25, Y+2	; 0x02
    6cae:	fc 01       	movw	r30, r24
    6cb0:	24 83       	std	Z+4, r18	; 0x04
    6cb2:	00 00       	nop
    6cb4:	0f 90       	pop	r0
    6cb6:	0f 90       	pop	r0
    6cb8:	df 91       	pop	r29
    6cba:	cf 91       	pop	r28
    6cbc:	08 95       	ret

00006cbe <usart_format_set>:
    6cbe:	cf 93       	push	r28
    6cc0:	df 93       	push	r29
    6cc2:	cd b7       	in	r28, 0x3d	; 61
    6cc4:	de b7       	in	r29, 0x3e	; 62
    6cc6:	25 97       	sbiw	r28, 0x05	; 5
    6cc8:	cd bf       	out	0x3d, r28	; 61
    6cca:	de bf       	out	0x3e, r29	; 62
    6ccc:	89 83       	std	Y+1, r24	; 0x01
    6cce:	9a 83       	std	Y+2, r25	; 0x02
    6cd0:	6b 83       	std	Y+3, r22	; 0x03
    6cd2:	4c 83       	std	Y+4, r20	; 0x04
    6cd4:	2d 83       	std	Y+5, r18	; 0x05
    6cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    6cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    6cda:	89 2b       	or	r24, r25
    6cdc:	98 2f       	mov	r25, r24
    6cde:	8d 81       	ldd	r24, Y+5	; 0x05
    6ce0:	88 23       	and	r24, r24
    6ce2:	11 f0       	breq	.+4      	; 0x6ce8 <usart_format_set+0x2a>
    6ce4:	88 e0       	ldi	r24, 0x08	; 8
    6ce6:	01 c0       	rjmp	.+2      	; 0x6cea <usart_format_set+0x2c>
    6ce8:	80 e0       	ldi	r24, 0x00	; 0
    6cea:	89 2b       	or	r24, r25
    6cec:	28 2f       	mov	r18, r24
    6cee:	89 81       	ldd	r24, Y+1	; 0x01
    6cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf2:	fc 01       	movw	r30, r24
    6cf4:	25 83       	std	Z+5, r18	; 0x05
    6cf6:	00 00       	nop
    6cf8:	25 96       	adiw	r28, 0x05	; 5
    6cfa:	cd bf       	out	0x3d, r28	; 61
    6cfc:	de bf       	out	0x3e, r29	; 62
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	08 95       	ret

00006d04 <usart_tx_enable>:
    6d04:	cf 93       	push	r28
    6d06:	df 93       	push	r29
    6d08:	1f 92       	push	r1
    6d0a:	1f 92       	push	r1
    6d0c:	cd b7       	in	r28, 0x3d	; 61
    6d0e:	de b7       	in	r29, 0x3e	; 62
    6d10:	89 83       	std	Y+1, r24	; 0x01
    6d12:	9a 83       	std	Y+2, r25	; 0x02
    6d14:	89 81       	ldd	r24, Y+1	; 0x01
    6d16:	9a 81       	ldd	r25, Y+2	; 0x02
    6d18:	fc 01       	movw	r30, r24
    6d1a:	84 81       	ldd	r24, Z+4	; 0x04
    6d1c:	28 2f       	mov	r18, r24
    6d1e:	28 60       	ori	r18, 0x08	; 8
    6d20:	89 81       	ldd	r24, Y+1	; 0x01
    6d22:	9a 81       	ldd	r25, Y+2	; 0x02
    6d24:	fc 01       	movw	r30, r24
    6d26:	24 83       	std	Z+4, r18	; 0x04
    6d28:	00 00       	nop
    6d2a:	0f 90       	pop	r0
    6d2c:	0f 90       	pop	r0
    6d2e:	df 91       	pop	r29
    6d30:	cf 91       	pop	r28
    6d32:	08 95       	ret

00006d34 <usart_set_mode>:
    6d34:	cf 93       	push	r28
    6d36:	df 93       	push	r29
    6d38:	00 d0       	rcall	.+0      	; 0x6d3a <usart_set_mode+0x6>
    6d3a:	cd b7       	in	r28, 0x3d	; 61
    6d3c:	de b7       	in	r29, 0x3e	; 62
    6d3e:	89 83       	std	Y+1, r24	; 0x01
    6d40:	9a 83       	std	Y+2, r25	; 0x02
    6d42:	6b 83       	std	Y+3, r22	; 0x03
    6d44:	89 81       	ldd	r24, Y+1	; 0x01
    6d46:	9a 81       	ldd	r25, Y+2	; 0x02
    6d48:	fc 01       	movw	r30, r24
    6d4a:	85 81       	ldd	r24, Z+5	; 0x05
    6d4c:	98 2f       	mov	r25, r24
    6d4e:	9f 73       	andi	r25, 0x3F	; 63
    6d50:	8b 81       	ldd	r24, Y+3	; 0x03
    6d52:	89 2b       	or	r24, r25
    6d54:	28 2f       	mov	r18, r24
    6d56:	89 81       	ldd	r24, Y+1	; 0x01
    6d58:	9a 81       	ldd	r25, Y+2	; 0x02
    6d5a:	fc 01       	movw	r30, r24
    6d5c:	25 83       	std	Z+5, r18	; 0x05
    6d5e:	00 00       	nop
    6d60:	23 96       	adiw	r28, 0x03	; 3
    6d62:	cd bf       	out	0x3d, r28	; 61
    6d64:	de bf       	out	0x3e, r29	; 62
    6d66:	df 91       	pop	r29
    6d68:	cf 91       	pop	r28
    6d6a:	08 95       	ret

00006d6c <usart_data_register_is_empty>:
    6d6c:	cf 93       	push	r28
    6d6e:	df 93       	push	r29
    6d70:	1f 92       	push	r1
    6d72:	1f 92       	push	r1
    6d74:	cd b7       	in	r28, 0x3d	; 61
    6d76:	de b7       	in	r29, 0x3e	; 62
    6d78:	89 83       	std	Y+1, r24	; 0x01
    6d7a:	9a 83       	std	Y+2, r25	; 0x02
    6d7c:	89 81       	ldd	r24, Y+1	; 0x01
    6d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d80:	fc 01       	movw	r30, r24
    6d82:	81 81       	ldd	r24, Z+1	; 0x01
    6d84:	88 2f       	mov	r24, r24
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	80 72       	andi	r24, 0x20	; 32
    6d8a:	99 27       	eor	r25, r25
    6d8c:	21 e0       	ldi	r18, 0x01	; 1
    6d8e:	89 2b       	or	r24, r25
    6d90:	09 f4       	brne	.+2      	; 0x6d94 <usart_data_register_is_empty+0x28>
    6d92:	20 e0       	ldi	r18, 0x00	; 0
    6d94:	82 2f       	mov	r24, r18
    6d96:	0f 90       	pop	r0
    6d98:	0f 90       	pop	r0
    6d9a:	df 91       	pop	r29
    6d9c:	cf 91       	pop	r28
    6d9e:	08 95       	ret

00006da0 <usart_rx_is_complete>:
    6da0:	cf 93       	push	r28
    6da2:	df 93       	push	r29
    6da4:	1f 92       	push	r1
    6da6:	1f 92       	push	r1
    6da8:	cd b7       	in	r28, 0x3d	; 61
    6daa:	de b7       	in	r29, 0x3e	; 62
    6dac:	89 83       	std	Y+1, r24	; 0x01
    6dae:	9a 83       	std	Y+2, r25	; 0x02
    6db0:	89 81       	ldd	r24, Y+1	; 0x01
    6db2:	9a 81       	ldd	r25, Y+2	; 0x02
    6db4:	fc 01       	movw	r30, r24
    6db6:	81 81       	ldd	r24, Z+1	; 0x01
    6db8:	88 2f       	mov	r24, r24
    6dba:	90 e0       	ldi	r25, 0x00	; 0
    6dbc:	80 78       	andi	r24, 0x80	; 128
    6dbe:	99 27       	eor	r25, r25
    6dc0:	21 e0       	ldi	r18, 0x01	; 1
    6dc2:	89 2b       	or	r24, r25
    6dc4:	09 f4       	brne	.+2      	; 0x6dc8 <usart_rx_is_complete+0x28>
    6dc6:	20 e0       	ldi	r18, 0x00	; 0
    6dc8:	82 2f       	mov	r24, r18
    6dca:	0f 90       	pop	r0
    6dcc:	0f 90       	pop	r0
    6dce:	df 91       	pop	r29
    6dd0:	cf 91       	pop	r28
    6dd2:	08 95       	ret

00006dd4 <sysclk_get_main_hz>:
    6dd4:	cf 93       	push	r28
    6dd6:	df 93       	push	r29
    6dd8:	cd b7       	in	r28, 0x3d	; 61
    6dda:	de b7       	in	r29, 0x3e	; 62
    6ddc:	80 e0       	ldi	r24, 0x00	; 0
    6dde:	98 e4       	ldi	r25, 0x48	; 72
    6de0:	a8 ee       	ldi	r26, 0xE8	; 232
    6de2:	b1 e0       	ldi	r27, 0x01	; 1
    6de4:	bc 01       	movw	r22, r24
    6de6:	cd 01       	movw	r24, r26
    6de8:	df 91       	pop	r29
    6dea:	cf 91       	pop	r28
    6dec:	08 95       	ret

00006dee <sysclk_get_per4_hz>:
    6dee:	cf 93       	push	r28
    6df0:	df 93       	push	r29
    6df2:	1f 92       	push	r1
    6df4:	cd b7       	in	r28, 0x3d	; 61
    6df6:	de b7       	in	r29, 0x3e	; 62
    6df8:	19 82       	std	Y+1, r1	; 0x01
    6dfa:	ec df       	rcall	.-40     	; 0x6dd4 <sysclk_get_main_hz>
    6dfc:	dc 01       	movw	r26, r24
    6dfe:	cb 01       	movw	r24, r22
    6e00:	29 81       	ldd	r18, Y+1	; 0x01
    6e02:	22 2f       	mov	r18, r18
    6e04:	30 e0       	ldi	r19, 0x00	; 0
    6e06:	04 c0       	rjmp	.+8      	; 0x6e10 <sysclk_get_per4_hz+0x22>
    6e08:	b6 95       	lsr	r27
    6e0a:	a7 95       	ror	r26
    6e0c:	97 95       	ror	r25
    6e0e:	87 95       	ror	r24
    6e10:	2a 95       	dec	r18
    6e12:	d2 f7       	brpl	.-12     	; 0x6e08 <sysclk_get_per4_hz+0x1a>
    6e14:	bc 01       	movw	r22, r24
    6e16:	cd 01       	movw	r24, r26
    6e18:	0f 90       	pop	r0
    6e1a:	df 91       	pop	r29
    6e1c:	cf 91       	pop	r28
    6e1e:	08 95       	ret

00006e20 <sysclk_get_per2_hz>:
    6e20:	cf 93       	push	r28
    6e22:	df 93       	push	r29
    6e24:	cd b7       	in	r28, 0x3d	; 61
    6e26:	de b7       	in	r29, 0x3e	; 62
    6e28:	e2 df       	rcall	.-60     	; 0x6dee <sysclk_get_per4_hz>
    6e2a:	dc 01       	movw	r26, r24
    6e2c:	cb 01       	movw	r24, r22
    6e2e:	bc 01       	movw	r22, r24
    6e30:	cd 01       	movw	r24, r26
    6e32:	df 91       	pop	r29
    6e34:	cf 91       	pop	r28
    6e36:	08 95       	ret

00006e38 <sysclk_get_per_hz>:
    6e38:	cf 93       	push	r28
    6e3a:	df 93       	push	r29
    6e3c:	cd b7       	in	r28, 0x3d	; 61
    6e3e:	de b7       	in	r29, 0x3e	; 62
    6e40:	ef df       	rcall	.-34     	; 0x6e20 <sysclk_get_per2_hz>
    6e42:	dc 01       	movw	r26, r24
    6e44:	cb 01       	movw	r24, r22
    6e46:	bc 01       	movw	r22, r24
    6e48:	cd 01       	movw	r24, r26
    6e4a:	df 91       	pop	r29
    6e4c:	cf 91       	pop	r28
    6e4e:	08 95       	ret

00006e50 <sysclk_enable_peripheral_clock>:
    6e50:	cf 93       	push	r28
    6e52:	df 93       	push	r29
    6e54:	1f 92       	push	r1
    6e56:	1f 92       	push	r1
    6e58:	cd b7       	in	r28, 0x3d	; 61
    6e5a:	de b7       	in	r29, 0x3e	; 62
    6e5c:	89 83       	std	Y+1, r24	; 0x01
    6e5e:	9a 83       	std	Y+2, r25	; 0x02
    6e60:	89 81       	ldd	r24, Y+1	; 0x01
    6e62:	9a 81       	ldd	r25, Y+2	; 0x02
    6e64:	89 2b       	or	r24, r25
    6e66:	09 f4       	brne	.+2      	; 0x6e6a <sysclk_enable_peripheral_clock+0x1a>
    6e68:	85 c1       	rjmp	.+778    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6e6a:	89 81       	ldd	r24, Y+1	; 0x01
    6e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    6e6e:	80 3c       	cpi	r24, 0xC0	; 192
    6e70:	91 05       	cpc	r25, r1
    6e72:	29 f4       	brne	.+10     	; 0x6e7e <sysclk_enable_peripheral_clock+0x2e>
    6e74:	60 e1       	ldi	r22, 0x10	; 16
    6e76:	80 e0       	ldi	r24, 0x00	; 0
    6e78:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6e7c:	7b c1       	rjmp	.+758    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6e7e:	89 81       	ldd	r24, Y+1	; 0x01
    6e80:	9a 81       	ldd	r25, Y+2	; 0x02
    6e82:	80 34       	cpi	r24, 0x40	; 64
    6e84:	94 40       	sbci	r25, 0x04	; 4
    6e86:	29 f4       	brne	.+10     	; 0x6e92 <sysclk_enable_peripheral_clock+0x42>
    6e88:	68 e0       	ldi	r22, 0x08	; 8
    6e8a:	80 e0       	ldi	r24, 0x00	; 0
    6e8c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6e90:	71 c1       	rjmp	.+738    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6e92:	89 81       	ldd	r24, Y+1	; 0x01
    6e94:	9a 81       	ldd	r25, Y+2	; 0x02
    6e96:	81 15       	cp	r24, r1
    6e98:	94 40       	sbci	r25, 0x04	; 4
    6e9a:	29 f4       	brne	.+10     	; 0x6ea6 <sysclk_enable_peripheral_clock+0x56>
    6e9c:	64 e0       	ldi	r22, 0x04	; 4
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
    6ea0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6ea4:	67 c1       	rjmp	.+718    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6ea6:	89 81       	ldd	r24, Y+1	; 0x01
    6ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    6eaa:	80 38       	cpi	r24, 0x80	; 128
    6eac:	91 40       	sbci	r25, 0x01	; 1
    6eae:	29 f4       	brne	.+10     	; 0x6eba <sysclk_enable_peripheral_clock+0x6a>
    6eb0:	62 e0       	ldi	r22, 0x02	; 2
    6eb2:	80 e0       	ldi	r24, 0x00	; 0
    6eb4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6eb8:	5d c1       	rjmp	.+698    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6eba:	89 81       	ldd	r24, Y+1	; 0x01
    6ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ebe:	81 15       	cp	r24, r1
    6ec0:	91 40       	sbci	r25, 0x01	; 1
    6ec2:	29 f4       	brne	.+10     	; 0x6ece <sysclk_enable_peripheral_clock+0x7e>
    6ec4:	61 e0       	ldi	r22, 0x01	; 1
    6ec6:	80 e0       	ldi	r24, 0x00	; 0
    6ec8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6ecc:	53 c1       	rjmp	.+678    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ed2:	80 38       	cpi	r24, 0x80	; 128
    6ed4:	93 40       	sbci	r25, 0x03	; 3
    6ed6:	29 f4       	brne	.+10     	; 0x6ee2 <sysclk_enable_peripheral_clock+0x92>
    6ed8:	61 e0       	ldi	r22, 0x01	; 1
    6eda:	81 e0       	ldi	r24, 0x01	; 1
    6edc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6ee0:	49 c1       	rjmp	.+658    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6ee2:	89 81       	ldd	r24, Y+1	; 0x01
    6ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee6:	80 39       	cpi	r24, 0x90	; 144
    6ee8:	93 40       	sbci	r25, 0x03	; 3
    6eea:	29 f4       	brne	.+10     	; 0x6ef6 <sysclk_enable_peripheral_clock+0xa6>
    6eec:	61 e0       	ldi	r22, 0x01	; 1
    6eee:	82 e0       	ldi	r24, 0x02	; 2
    6ef0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6ef4:	3f c1       	rjmp	.+638    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6ef6:	89 81       	ldd	r24, Y+1	; 0x01
    6ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    6efa:	81 15       	cp	r24, r1
    6efc:	92 40       	sbci	r25, 0x02	; 2
    6efe:	29 f4       	brne	.+10     	; 0x6f0a <sysclk_enable_peripheral_clock+0xba>
    6f00:	62 e0       	ldi	r22, 0x02	; 2
    6f02:	81 e0       	ldi	r24, 0x01	; 1
    6f04:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f08:	35 c1       	rjmp	.+618    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f0a:	89 81       	ldd	r24, Y+1	; 0x01
    6f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f0e:	80 34       	cpi	r24, 0x40	; 64
    6f10:	92 40       	sbci	r25, 0x02	; 2
    6f12:	29 f4       	brne	.+10     	; 0x6f1e <sysclk_enable_peripheral_clock+0xce>
    6f14:	62 e0       	ldi	r22, 0x02	; 2
    6f16:	82 e0       	ldi	r24, 0x02	; 2
    6f18:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f1c:	2b c1       	rjmp	.+598    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f1e:	89 81       	ldd	r24, Y+1	; 0x01
    6f20:	9a 81       	ldd	r25, Y+2	; 0x02
    6f22:	81 15       	cp	r24, r1
    6f24:	93 40       	sbci	r25, 0x03	; 3
    6f26:	29 f4       	brne	.+10     	; 0x6f32 <sysclk_enable_peripheral_clock+0xe2>
    6f28:	64 e0       	ldi	r22, 0x04	; 4
    6f2a:	81 e0       	ldi	r24, 0x01	; 1
    6f2c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f30:	21 c1       	rjmp	.+578    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f32:	89 81       	ldd	r24, Y+1	; 0x01
    6f34:	9a 81       	ldd	r25, Y+2	; 0x02
    6f36:	80 32       	cpi	r24, 0x20	; 32
    6f38:	93 40       	sbci	r25, 0x03	; 3
    6f3a:	29 f4       	brne	.+10     	; 0x6f46 <sysclk_enable_peripheral_clock+0xf6>
    6f3c:	64 e0       	ldi	r22, 0x04	; 4
    6f3e:	82 e0       	ldi	r24, 0x02	; 2
    6f40:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f44:	17 c1       	rjmp	.+558    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f46:	89 81       	ldd	r24, Y+1	; 0x01
    6f48:	9a 81       	ldd	r25, Y+2	; 0x02
    6f4a:	81 15       	cp	r24, r1
    6f4c:	98 40       	sbci	r25, 0x08	; 8
    6f4e:	29 f4       	brne	.+10     	; 0x6f5a <sysclk_enable_peripheral_clock+0x10a>
    6f50:	61 e0       	ldi	r22, 0x01	; 1
    6f52:	83 e0       	ldi	r24, 0x03	; 3
    6f54:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f58:	0d c1       	rjmp	.+538    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f5a:	89 81       	ldd	r24, Y+1	; 0x01
    6f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f5e:	81 15       	cp	r24, r1
    6f60:	99 40       	sbci	r25, 0x09	; 9
    6f62:	29 f4       	brne	.+10     	; 0x6f6e <sysclk_enable_peripheral_clock+0x11e>
    6f64:	61 e0       	ldi	r22, 0x01	; 1
    6f66:	84 e0       	ldi	r24, 0x04	; 4
    6f68:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f6c:	03 c1       	rjmp	.+518    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f6e:	89 81       	ldd	r24, Y+1	; 0x01
    6f70:	9a 81       	ldd	r25, Y+2	; 0x02
    6f72:	81 15       	cp	r24, r1
    6f74:	9a 40       	sbci	r25, 0x0A	; 10
    6f76:	29 f4       	brne	.+10     	; 0x6f82 <sysclk_enable_peripheral_clock+0x132>
    6f78:	61 e0       	ldi	r22, 0x01	; 1
    6f7a:	85 e0       	ldi	r24, 0x05	; 5
    6f7c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f80:	f9 c0       	rjmp	.+498    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f82:	89 81       	ldd	r24, Y+1	; 0x01
    6f84:	9a 81       	ldd	r25, Y+2	; 0x02
    6f86:	81 15       	cp	r24, r1
    6f88:	9b 40       	sbci	r25, 0x0B	; 11
    6f8a:	29 f4       	brne	.+10     	; 0x6f96 <sysclk_enable_peripheral_clock+0x146>
    6f8c:	61 e0       	ldi	r22, 0x01	; 1
    6f8e:	86 e0       	ldi	r24, 0x06	; 6
    6f90:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6f94:	ef c0       	rjmp	.+478    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6f96:	89 81       	ldd	r24, Y+1	; 0x01
    6f98:	9a 81       	ldd	r25, Y+2	; 0x02
    6f9a:	80 34       	cpi	r24, 0x40	; 64
    6f9c:	98 40       	sbci	r25, 0x08	; 8
    6f9e:	29 f4       	brne	.+10     	; 0x6faa <sysclk_enable_peripheral_clock+0x15a>
    6fa0:	62 e0       	ldi	r22, 0x02	; 2
    6fa2:	83 e0       	ldi	r24, 0x03	; 3
    6fa4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6fa8:	e5 c0       	rjmp	.+458    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6faa:	89 81       	ldd	r24, Y+1	; 0x01
    6fac:	9a 81       	ldd	r25, Y+2	; 0x02
    6fae:	80 34       	cpi	r24, 0x40	; 64
    6fb0:	99 40       	sbci	r25, 0x09	; 9
    6fb2:	29 f4       	brne	.+10     	; 0x6fbe <sysclk_enable_peripheral_clock+0x16e>
    6fb4:	62 e0       	ldi	r22, 0x02	; 2
    6fb6:	84 e0       	ldi	r24, 0x04	; 4
    6fb8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6fbc:	db c0       	rjmp	.+438    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6fbe:	89 81       	ldd	r24, Y+1	; 0x01
    6fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fc2:	80 34       	cpi	r24, 0x40	; 64
    6fc4:	9a 40       	sbci	r25, 0x0A	; 10
    6fc6:	29 f4       	brne	.+10     	; 0x6fd2 <sysclk_enable_peripheral_clock+0x182>
    6fc8:	62 e0       	ldi	r22, 0x02	; 2
    6fca:	85 e0       	ldi	r24, 0x05	; 5
    6fcc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6fd0:	d1 c0       	rjmp	.+418    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6fd2:	89 81       	ldd	r24, Y+1	; 0x01
    6fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd6:	80 34       	cpi	r24, 0x40	; 64
    6fd8:	9b 40       	sbci	r25, 0x0B	; 11
    6fda:	29 f4       	brne	.+10     	; 0x6fe6 <sysclk_enable_peripheral_clock+0x196>
    6fdc:	62 e0       	ldi	r22, 0x02	; 2
    6fde:	86 e0       	ldi	r24, 0x06	; 6
    6fe0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6fe4:	c7 c0       	rjmp	.+398    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6fe6:	89 81       	ldd	r24, Y+1	; 0x01
    6fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    6fea:	80 39       	cpi	r24, 0x90	; 144
    6fec:	98 40       	sbci	r25, 0x08	; 8
    6fee:	29 f4       	brne	.+10     	; 0x6ffa <sysclk_enable_peripheral_clock+0x1aa>
    6ff0:	64 e0       	ldi	r22, 0x04	; 4
    6ff2:	83 e0       	ldi	r24, 0x03	; 3
    6ff4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    6ff8:	bd c0       	rjmp	.+378    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    6ffa:	89 81       	ldd	r24, Y+1	; 0x01
    6ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ffe:	80 39       	cpi	r24, 0x90	; 144
    7000:	99 40       	sbci	r25, 0x09	; 9
    7002:	29 f4       	brne	.+10     	; 0x700e <sysclk_enable_peripheral_clock+0x1be>
    7004:	64 e0       	ldi	r22, 0x04	; 4
    7006:	84 e0       	ldi	r24, 0x04	; 4
    7008:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    700c:	b3 c0       	rjmp	.+358    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    700e:	89 81       	ldd	r24, Y+1	; 0x01
    7010:	9a 81       	ldd	r25, Y+2	; 0x02
    7012:	80 39       	cpi	r24, 0x90	; 144
    7014:	9a 40       	sbci	r25, 0x0A	; 10
    7016:	29 f4       	brne	.+10     	; 0x7022 <sysclk_enable_peripheral_clock+0x1d2>
    7018:	64 e0       	ldi	r22, 0x04	; 4
    701a:	85 e0       	ldi	r24, 0x05	; 5
    701c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7020:	a9 c0       	rjmp	.+338    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7022:	89 81       	ldd	r24, Y+1	; 0x01
    7024:	9a 81       	ldd	r25, Y+2	; 0x02
    7026:	80 39       	cpi	r24, 0x90	; 144
    7028:	9b 40       	sbci	r25, 0x0B	; 11
    702a:	29 f4       	brne	.+10     	; 0x7036 <sysclk_enable_peripheral_clock+0x1e6>
    702c:	64 e0       	ldi	r22, 0x04	; 4
    702e:	86 e0       	ldi	r24, 0x06	; 6
    7030:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7034:	9f c0       	rjmp	.+318    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	9a 81       	ldd	r25, Y+2	; 0x02
    703a:	80 3c       	cpi	r24, 0xC0	; 192
    703c:	98 40       	sbci	r25, 0x08	; 8
    703e:	29 f4       	brne	.+10     	; 0x704a <sysclk_enable_peripheral_clock+0x1fa>
    7040:	68 e0       	ldi	r22, 0x08	; 8
    7042:	83 e0       	ldi	r24, 0x03	; 3
    7044:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7048:	95 c0       	rjmp	.+298    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    704a:	89 81       	ldd	r24, Y+1	; 0x01
    704c:	9a 81       	ldd	r25, Y+2	; 0x02
    704e:	80 3c       	cpi	r24, 0xC0	; 192
    7050:	99 40       	sbci	r25, 0x09	; 9
    7052:	29 f4       	brne	.+10     	; 0x705e <sysclk_enable_peripheral_clock+0x20e>
    7054:	68 e0       	ldi	r22, 0x08	; 8
    7056:	84 e0       	ldi	r24, 0x04	; 4
    7058:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    705c:	8b c0       	rjmp	.+278    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    705e:	89 81       	ldd	r24, Y+1	; 0x01
    7060:	9a 81       	ldd	r25, Y+2	; 0x02
    7062:	80 3c       	cpi	r24, 0xC0	; 192
    7064:	9a 40       	sbci	r25, 0x0A	; 10
    7066:	29 f4       	brne	.+10     	; 0x7072 <sysclk_enable_peripheral_clock+0x222>
    7068:	68 e0       	ldi	r22, 0x08	; 8
    706a:	85 e0       	ldi	r24, 0x05	; 5
    706c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7070:	81 c0       	rjmp	.+258    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7072:	89 81       	ldd	r24, Y+1	; 0x01
    7074:	9a 81       	ldd	r25, Y+2	; 0x02
    7076:	80 3c       	cpi	r24, 0xC0	; 192
    7078:	9b 40       	sbci	r25, 0x0B	; 11
    707a:	29 f4       	brne	.+10     	; 0x7086 <sysclk_enable_peripheral_clock+0x236>
    707c:	68 e0       	ldi	r22, 0x08	; 8
    707e:	86 e0       	ldi	r24, 0x06	; 6
    7080:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7084:	77 c0       	rjmp	.+238    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7086:	89 81       	ldd	r24, Y+1	; 0x01
    7088:	9a 81       	ldd	r25, Y+2	; 0x02
    708a:	80 3a       	cpi	r24, 0xA0	; 160
    708c:	98 40       	sbci	r25, 0x08	; 8
    708e:	29 f4       	brne	.+10     	; 0x709a <sysclk_enable_peripheral_clock+0x24a>
    7090:	60 e1       	ldi	r22, 0x10	; 16
    7092:	83 e0       	ldi	r24, 0x03	; 3
    7094:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7098:	6d c0       	rjmp	.+218    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    709a:	89 81       	ldd	r24, Y+1	; 0x01
    709c:	9a 81       	ldd	r25, Y+2	; 0x02
    709e:	80 3a       	cpi	r24, 0xA0	; 160
    70a0:	99 40       	sbci	r25, 0x09	; 9
    70a2:	29 f4       	brne	.+10     	; 0x70ae <sysclk_enable_peripheral_clock+0x25e>
    70a4:	60 e1       	ldi	r22, 0x10	; 16
    70a6:	84 e0       	ldi	r24, 0x04	; 4
    70a8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    70ac:	63 c0       	rjmp	.+198    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    70ae:	89 81       	ldd	r24, Y+1	; 0x01
    70b0:	9a 81       	ldd	r25, Y+2	; 0x02
    70b2:	80 3a       	cpi	r24, 0xA0	; 160
    70b4:	9a 40       	sbci	r25, 0x0A	; 10
    70b6:	29 f4       	brne	.+10     	; 0x70c2 <sysclk_enable_peripheral_clock+0x272>
    70b8:	60 e1       	ldi	r22, 0x10	; 16
    70ba:	85 e0       	ldi	r24, 0x05	; 5
    70bc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    70c0:	59 c0       	rjmp	.+178    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    70c2:	89 81       	ldd	r24, Y+1	; 0x01
    70c4:	9a 81       	ldd	r25, Y+2	; 0x02
    70c6:	80 3a       	cpi	r24, 0xA0	; 160
    70c8:	9b 40       	sbci	r25, 0x0B	; 11
    70ca:	29 f4       	brne	.+10     	; 0x70d6 <sysclk_enable_peripheral_clock+0x286>
    70cc:	60 e1       	ldi	r22, 0x10	; 16
    70ce:	86 e0       	ldi	r24, 0x06	; 6
    70d0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    70d4:	4f c0       	rjmp	.+158    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    70d6:	89 81       	ldd	r24, Y+1	; 0x01
    70d8:	9a 81       	ldd	r25, Y+2	; 0x02
    70da:	80 3b       	cpi	r24, 0xB0	; 176
    70dc:	98 40       	sbci	r25, 0x08	; 8
    70de:	29 f4       	brne	.+10     	; 0x70ea <sysclk_enable_peripheral_clock+0x29a>
    70e0:	60 e2       	ldi	r22, 0x20	; 32
    70e2:	83 e0       	ldi	r24, 0x03	; 3
    70e4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    70e8:	45 c0       	rjmp	.+138    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    70ea:	89 81       	ldd	r24, Y+1	; 0x01
    70ec:	9a 81       	ldd	r25, Y+2	; 0x02
    70ee:	80 3b       	cpi	r24, 0xB0	; 176
    70f0:	99 40       	sbci	r25, 0x09	; 9
    70f2:	29 f4       	brne	.+10     	; 0x70fe <sysclk_enable_peripheral_clock+0x2ae>
    70f4:	60 e2       	ldi	r22, 0x20	; 32
    70f6:	84 e0       	ldi	r24, 0x04	; 4
    70f8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    70fc:	3b c0       	rjmp	.+118    	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    70fe:	89 81       	ldd	r24, Y+1	; 0x01
    7100:	9a 81       	ldd	r25, Y+2	; 0x02
    7102:	80 3b       	cpi	r24, 0xB0	; 176
    7104:	9a 40       	sbci	r25, 0x0A	; 10
    7106:	29 f4       	brne	.+10     	; 0x7112 <sysclk_enable_peripheral_clock+0x2c2>
    7108:	60 e2       	ldi	r22, 0x20	; 32
    710a:	85 e0       	ldi	r24, 0x05	; 5
    710c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7110:	31 c0       	rjmp	.+98     	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7112:	89 81       	ldd	r24, Y+1	; 0x01
    7114:	9a 81       	ldd	r25, Y+2	; 0x02
    7116:	80 3b       	cpi	r24, 0xB0	; 176
    7118:	9b 40       	sbci	r25, 0x0B	; 11
    711a:	29 f4       	brne	.+10     	; 0x7126 <sysclk_enable_peripheral_clock+0x2d6>
    711c:	60 e2       	ldi	r22, 0x20	; 32
    711e:	86 e0       	ldi	r24, 0x06	; 6
    7120:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7124:	27 c0       	rjmp	.+78     	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7126:	89 81       	ldd	r24, Y+1	; 0x01
    7128:	9a 81       	ldd	r25, Y+2	; 0x02
    712a:	80 38       	cpi	r24, 0x80	; 128
    712c:	94 40       	sbci	r25, 0x04	; 4
    712e:	29 f4       	brne	.+10     	; 0x713a <sysclk_enable_peripheral_clock+0x2ea>
    7130:	60 e4       	ldi	r22, 0x40	; 64
    7132:	83 e0       	ldi	r24, 0x03	; 3
    7134:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7138:	1d c0       	rjmp	.+58     	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    713a:	89 81       	ldd	r24, Y+1	; 0x01
    713c:	9a 81       	ldd	r25, Y+2	; 0x02
    713e:	80 39       	cpi	r24, 0x90	; 144
    7140:	94 40       	sbci	r25, 0x04	; 4
    7142:	29 f4       	brne	.+10     	; 0x714e <sysclk_enable_peripheral_clock+0x2fe>
    7144:	60 e4       	ldi	r22, 0x40	; 64
    7146:	84 e0       	ldi	r24, 0x04	; 4
    7148:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    714c:	13 c0       	rjmp	.+38     	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    714e:	89 81       	ldd	r24, Y+1	; 0x01
    7150:	9a 81       	ldd	r25, Y+2	; 0x02
    7152:	80 3a       	cpi	r24, 0xA0	; 160
    7154:	94 40       	sbci	r25, 0x04	; 4
    7156:	29 f4       	brne	.+10     	; 0x7162 <sysclk_enable_peripheral_clock+0x312>
    7158:	60 e4       	ldi	r22, 0x40	; 64
    715a:	85 e0       	ldi	r24, 0x05	; 5
    715c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7160:	09 c0       	rjmp	.+18     	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    7162:	89 81       	ldd	r24, Y+1	; 0x01
    7164:	9a 81       	ldd	r25, Y+2	; 0x02
    7166:	80 3b       	cpi	r24, 0xB0	; 176
    7168:	94 40       	sbci	r25, 0x04	; 4
    716a:	21 f4       	brne	.+8      	; 0x7174 <sysclk_enable_peripheral_clock+0x324>
    716c:	60 e4       	ldi	r22, 0x40	; 64
    716e:	86 e0       	ldi	r24, 0x06	; 6
    7170:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7174:	00 00       	nop
    7176:	0f 90       	pop	r0
    7178:	0f 90       	pop	r0
    717a:	df 91       	pop	r29
    717c:	cf 91       	pop	r28
    717e:	08 95       	ret

00007180 <usart_init_rs232>:
    7180:	0f 93       	push	r16
    7182:	1f 93       	push	r17
    7184:	cf 93       	push	r28
    7186:	df 93       	push	r29
    7188:	cd b7       	in	r28, 0x3d	; 61
    718a:	de b7       	in	r29, 0x3e	; 62
    718c:	25 97       	sbiw	r28, 0x05	; 5
    718e:	cd bf       	out	0x3d, r28	; 61
    7190:	de bf       	out	0x3e, r29	; 62
    7192:	8a 83       	std	Y+2, r24	; 0x02
    7194:	9b 83       	std	Y+3, r25	; 0x03
    7196:	6c 83       	std	Y+4, r22	; 0x04
    7198:	7d 83       	std	Y+5, r23	; 0x05
    719a:	8a 81       	ldd	r24, Y+2	; 0x02
    719c:	9b 81       	ldd	r25, Y+3	; 0x03
    719e:	58 de       	rcall	.-848    	; 0x6e50 <sysclk_enable_peripheral_clock>
    71a0:	8a 81       	ldd	r24, Y+2	; 0x02
    71a2:	9b 81       	ldd	r25, Y+3	; 0x03
    71a4:	60 e0       	ldi	r22, 0x00	; 0
    71a6:	c6 dd       	rcall	.-1140   	; 0x6d34 <usart_set_mode>
    71a8:	8c 81       	ldd	r24, Y+4	; 0x04
    71aa:	9d 81       	ldd	r25, Y+5	; 0x05
    71ac:	fc 01       	movw	r30, r24
    71ae:	26 81       	ldd	r18, Z+6	; 0x06
    71b0:	8c 81       	ldd	r24, Y+4	; 0x04
    71b2:	9d 81       	ldd	r25, Y+5	; 0x05
    71b4:	fc 01       	movw	r30, r24
    71b6:	45 81       	ldd	r20, Z+5	; 0x05
    71b8:	8c 81       	ldd	r24, Y+4	; 0x04
    71ba:	9d 81       	ldd	r25, Y+5	; 0x05
    71bc:	fc 01       	movw	r30, r24
    71be:	34 81       	ldd	r19, Z+4	; 0x04
    71c0:	8a 81       	ldd	r24, Y+2	; 0x02
    71c2:	9b 81       	ldd	r25, Y+3	; 0x03
    71c4:	63 2f       	mov	r22, r19
    71c6:	7b dd       	rcall	.-1290   	; 0x6cbe <usart_format_set>
    71c8:	37 de       	rcall	.-914    	; 0x6e38 <sysclk_get_per_hz>
    71ca:	9b 01       	movw	r18, r22
    71cc:	ac 01       	movw	r20, r24
    71ce:	8c 81       	ldd	r24, Y+4	; 0x04
    71d0:	9d 81       	ldd	r25, Y+5	; 0x05
    71d2:	fc 01       	movw	r30, r24
    71d4:	80 81       	ld	r24, Z
    71d6:	91 81       	ldd	r25, Z+1	; 0x01
    71d8:	a2 81       	ldd	r26, Z+2	; 0x02
    71da:	b3 81       	ldd	r27, Z+3	; 0x03
    71dc:	ea 81       	ldd	r30, Y+2	; 0x02
    71de:	fb 81       	ldd	r31, Y+3	; 0x03
    71e0:	89 01       	movw	r16, r18
    71e2:	9a 01       	movw	r18, r20
    71e4:	ac 01       	movw	r20, r24
    71e6:	bd 01       	movw	r22, r26
    71e8:	cf 01       	movw	r24, r30
    71ea:	48 d0       	rcall	.+144    	; 0x727c <usart_set_baudrate>
    71ec:	89 83       	std	Y+1, r24	; 0x01
    71ee:	8a 81       	ldd	r24, Y+2	; 0x02
    71f0:	9b 81       	ldd	r25, Y+3	; 0x03
    71f2:	88 dd       	rcall	.-1264   	; 0x6d04 <usart_tx_enable>
    71f4:	8a 81       	ldd	r24, Y+2	; 0x02
    71f6:	9b 81       	ldd	r25, Y+3	; 0x03
    71f8:	4a dd       	rcall	.-1388   	; 0x6c8e <usart_rx_enable>
    71fa:	89 81       	ldd	r24, Y+1	; 0x01
    71fc:	25 96       	adiw	r28, 0x05	; 5
    71fe:	cd bf       	out	0x3d, r28	; 61
    7200:	de bf       	out	0x3e, r29	; 62
    7202:	df 91       	pop	r29
    7204:	cf 91       	pop	r28
    7206:	1f 91       	pop	r17
    7208:	0f 91       	pop	r16
    720a:	08 95       	ret

0000720c <usart_putchar>:
    720c:	cf 93       	push	r28
    720e:	df 93       	push	r29
    7210:	00 d0       	rcall	.+0      	; 0x7212 <usart_putchar+0x6>
    7212:	cd b7       	in	r28, 0x3d	; 61
    7214:	de b7       	in	r29, 0x3e	; 62
    7216:	89 83       	std	Y+1, r24	; 0x01
    7218:	9a 83       	std	Y+2, r25	; 0x02
    721a:	6b 83       	std	Y+3, r22	; 0x03
    721c:	00 00       	nop
    721e:	89 81       	ldd	r24, Y+1	; 0x01
    7220:	9a 81       	ldd	r25, Y+2	; 0x02
    7222:	a4 dd       	rcall	.-1208   	; 0x6d6c <usart_data_register_is_empty>
    7224:	98 2f       	mov	r25, r24
    7226:	81 e0       	ldi	r24, 0x01	; 1
    7228:	89 27       	eor	r24, r25
    722a:	88 23       	and	r24, r24
    722c:	c1 f7       	brne	.-16     	; 0x721e <usart_putchar+0x12>
    722e:	89 81       	ldd	r24, Y+1	; 0x01
    7230:	9a 81       	ldd	r25, Y+2	; 0x02
    7232:	2b 81       	ldd	r18, Y+3	; 0x03
    7234:	fc 01       	movw	r30, r24
    7236:	20 83       	st	Z, r18
    7238:	80 e0       	ldi	r24, 0x00	; 0
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	23 96       	adiw	r28, 0x03	; 3
    723e:	cd bf       	out	0x3d, r28	; 61
    7240:	de bf       	out	0x3e, r29	; 62
    7242:	df 91       	pop	r29
    7244:	cf 91       	pop	r28
    7246:	08 95       	ret

00007248 <usart_getchar>:
    7248:	cf 93       	push	r28
    724a:	df 93       	push	r29
    724c:	1f 92       	push	r1
    724e:	1f 92       	push	r1
    7250:	cd b7       	in	r28, 0x3d	; 61
    7252:	de b7       	in	r29, 0x3e	; 62
    7254:	89 83       	std	Y+1, r24	; 0x01
    7256:	9a 83       	std	Y+2, r25	; 0x02
    7258:	00 00       	nop
    725a:	89 81       	ldd	r24, Y+1	; 0x01
    725c:	9a 81       	ldd	r25, Y+2	; 0x02
    725e:	a0 dd       	rcall	.-1216   	; 0x6da0 <usart_rx_is_complete>
    7260:	98 2f       	mov	r25, r24
    7262:	81 e0       	ldi	r24, 0x01	; 1
    7264:	89 27       	eor	r24, r25
    7266:	88 23       	and	r24, r24
    7268:	c1 f7       	brne	.-16     	; 0x725a <usart_getchar+0x12>
    726a:	89 81       	ldd	r24, Y+1	; 0x01
    726c:	9a 81       	ldd	r25, Y+2	; 0x02
    726e:	fc 01       	movw	r30, r24
    7270:	80 81       	ld	r24, Z
    7272:	0f 90       	pop	r0
    7274:	0f 90       	pop	r0
    7276:	df 91       	pop	r29
    7278:	cf 91       	pop	r28
    727a:	08 95       	ret

0000727c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    727c:	ef 92       	push	r14
    727e:	ff 92       	push	r15
    7280:	0f 93       	push	r16
    7282:	1f 93       	push	r17
    7284:	cf 93       	push	r28
    7286:	df 93       	push	r29
    7288:	cd b7       	in	r28, 0x3d	; 61
    728a:	de b7       	in	r29, 0x3e	; 62
    728c:	6f 97       	sbiw	r28, 0x1f	; 31
    728e:	cd bf       	out	0x3d, r28	; 61
    7290:	de bf       	out	0x3e, r29	; 62
    7292:	8e 8b       	std	Y+22, r24	; 0x16
    7294:	9f 8b       	std	Y+23, r25	; 0x17
    7296:	48 8f       	std	Y+24, r20	; 0x18
    7298:	59 8f       	std	Y+25, r21	; 0x19
    729a:	6a 8f       	std	Y+26, r22	; 0x1a
    729c:	7b 8f       	std	Y+27, r23	; 0x1b
    729e:	0c 8f       	std	Y+28, r16	; 0x1c
    72a0:	1d 8f       	std	Y+29, r17	; 0x1d
    72a2:	2e 8f       	std	Y+30, r18	; 0x1e
    72a4:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    72a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    72a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    72aa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    72ac:	bf 8d       	ldd	r27, Y+31	; 0x1f
    72ae:	68 94       	set
    72b0:	12 f8       	bld	r1, 2
    72b2:	b6 95       	lsr	r27
    72b4:	a7 95       	ror	r26
    72b6:	97 95       	ror	r25
    72b8:	87 95       	ror	r24
    72ba:	16 94       	lsr	r1
    72bc:	d1 f7       	brne	.-12     	; 0x72b2 <usart_set_baudrate+0x36>
    72be:	8e 87       	std	Y+14, r24	; 0x0e
    72c0:	9f 87       	std	Y+15, r25	; 0x0f
    72c2:	a8 8b       	std	Y+16, r26	; 0x10
    72c4:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    72c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    72c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    72ca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    72cc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    72ce:	07 2e       	mov	r0, r23
    72d0:	76 e1       	ldi	r23, 0x16	; 22
    72d2:	b6 95       	lsr	r27
    72d4:	a7 95       	ror	r26
    72d6:	97 95       	ror	r25
    72d8:	87 95       	ror	r24
    72da:	7a 95       	dec	r23
    72dc:	d1 f7       	brne	.-12     	; 0x72d2 <usart_set_baudrate+0x56>
    72de:	70 2d       	mov	r23, r0
    72e0:	8a 87       	std	Y+10, r24	; 0x0a
    72e2:	9b 87       	std	Y+11, r25	; 0x0b
    72e4:	ac 87       	std	Y+12, r26	; 0x0c
    72e6:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    72e8:	8e 89       	ldd	r24, Y+22	; 0x16
    72ea:	9f 89       	ldd	r25, Y+23	; 0x17
    72ec:	fc 01       	movw	r30, r24
    72ee:	84 81       	ldd	r24, Z+4	; 0x04
    72f0:	88 2f       	mov	r24, r24
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	84 70       	andi	r24, 0x04	; 4
    72f6:	99 27       	eor	r25, r25
    72f8:	89 2b       	or	r24, r25
    72fa:	c1 f4       	brne	.+48     	; 0x732c <usart_set_baudrate+0xb0>
		max_rate /= 2;
    72fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    72fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    7300:	a8 89       	ldd	r26, Y+16	; 0x10
    7302:	b9 89       	ldd	r27, Y+17	; 0x11
    7304:	b6 95       	lsr	r27
    7306:	a7 95       	ror	r26
    7308:	97 95       	ror	r25
    730a:	87 95       	ror	r24
    730c:	8e 87       	std	Y+14, r24	; 0x0e
    730e:	9f 87       	std	Y+15, r25	; 0x0f
    7310:	a8 8b       	std	Y+16, r26	; 0x10
    7312:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    7314:	8a 85       	ldd	r24, Y+10	; 0x0a
    7316:	9b 85       	ldd	r25, Y+11	; 0x0b
    7318:	ac 85       	ldd	r26, Y+12	; 0x0c
    731a:	bd 85       	ldd	r27, Y+13	; 0x0d
    731c:	b6 95       	lsr	r27
    731e:	a7 95       	ror	r26
    7320:	97 95       	ror	r25
    7322:	87 95       	ror	r24
    7324:	8a 87       	std	Y+10, r24	; 0x0a
    7326:	9b 87       	std	Y+11, r25	; 0x0b
    7328:	ac 87       	std	Y+12, r26	; 0x0c
    732a:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    732c:	28 8d       	ldd	r18, Y+24	; 0x18
    732e:	39 8d       	ldd	r19, Y+25	; 0x19
    7330:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7332:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7334:	8e 85       	ldd	r24, Y+14	; 0x0e
    7336:	9f 85       	ldd	r25, Y+15	; 0x0f
    7338:	a8 89       	ldd	r26, Y+16	; 0x10
    733a:	b9 89       	ldd	r27, Y+17	; 0x11
    733c:	82 17       	cp	r24, r18
    733e:	93 07       	cpc	r25, r19
    7340:	a4 07       	cpc	r26, r20
    7342:	b5 07       	cpc	r27, r21
    7344:	68 f0       	brcs	.+26     	; 0x7360 <usart_set_baudrate+0xe4>
    7346:	28 8d       	ldd	r18, Y+24	; 0x18
    7348:	39 8d       	ldd	r19, Y+25	; 0x19
    734a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    734c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    734e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7350:	9b 85       	ldd	r25, Y+11	; 0x0b
    7352:	ac 85       	ldd	r26, Y+12	; 0x0c
    7354:	bd 85       	ldd	r27, Y+13	; 0x0d
    7356:	28 17       	cp	r18, r24
    7358:	39 07       	cpc	r19, r25
    735a:	4a 07       	cpc	r20, r26
    735c:	5b 07       	cpc	r21, r27
    735e:	10 f4       	brcc	.+4      	; 0x7364 <usart_set_baudrate+0xe8>
		return false;
    7360:	80 e0       	ldi	r24, 0x00	; 0
    7362:	40 c1       	rjmp	.+640    	; 0x75e4 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    7364:	8e 89       	ldd	r24, Y+22	; 0x16
    7366:	9f 89       	ldd	r25, Y+23	; 0x17
    7368:	fc 01       	movw	r30, r24
    736a:	84 81       	ldd	r24, Z+4	; 0x04
    736c:	88 2f       	mov	r24, r24
    736e:	90 e0       	ldi	r25, 0x00	; 0
    7370:	84 70       	andi	r24, 0x04	; 4
    7372:	99 27       	eor	r25, r25
    7374:	89 2b       	or	r24, r25
    7376:	61 f4       	brne	.+24     	; 0x7390 <usart_set_baudrate+0x114>
		baud *= 2;
    7378:	88 8d       	ldd	r24, Y+24	; 0x18
    737a:	99 8d       	ldd	r25, Y+25	; 0x19
    737c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    737e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7380:	88 0f       	add	r24, r24
    7382:	99 1f       	adc	r25, r25
    7384:	aa 1f       	adc	r26, r26
    7386:	bb 1f       	adc	r27, r27
    7388:	88 8f       	std	Y+24, r24	; 0x18
    738a:	99 8f       	std	Y+25, r25	; 0x19
    738c:	aa 8f       	std	Y+26, r26	; 0x1a
    738e:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    7390:	8f ef       	ldi	r24, 0xFF	; 255
    7392:	90 e0       	ldi	r25, 0x00	; 0
    7394:	a0 e0       	ldi	r26, 0x00	; 0
    7396:	b0 e0       	ldi	r27, 0x00	; 0
    7398:	8e 83       	std	Y+6, r24	; 0x06
    739a:	9f 83       	std	Y+7, r25	; 0x07
    739c:	a8 87       	std	Y+8, r26	; 0x08
    739e:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    73a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    73a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    73a4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    73a6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    73a8:	28 8d       	ldd	r18, Y+24	; 0x18
    73aa:	39 8d       	ldd	r19, Y+25	; 0x19
    73ac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    73ae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    73b0:	bc 01       	movw	r22, r24
    73b2:	cd 01       	movw	r24, r26
    73b4:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    73b8:	da 01       	movw	r26, r20
    73ba:	c9 01       	movw	r24, r18
    73bc:	8a 8b       	std	Y+18, r24	; 0x12
    73be:	9b 8b       	std	Y+19, r25	; 0x13
    73c0:	ac 8b       	std	Y+20, r26	; 0x14
    73c2:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    73c4:	89 ef       	ldi	r24, 0xF9	; 249
    73c6:	89 83       	std	Y+1, r24	; 0x01
    73c8:	28 c0       	rjmp	.+80     	; 0x741a <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    73ca:	2a 89       	ldd	r18, Y+18	; 0x12
    73cc:	3b 89       	ldd	r19, Y+19	; 0x13
    73ce:	4c 89       	ldd	r20, Y+20	; 0x14
    73d0:	5d 89       	ldd	r21, Y+21	; 0x15
    73d2:	8e 81       	ldd	r24, Y+6	; 0x06
    73d4:	9f 81       	ldd	r25, Y+7	; 0x07
    73d6:	a8 85       	ldd	r26, Y+8	; 0x08
    73d8:	b9 85       	ldd	r27, Y+9	; 0x09
    73da:	28 17       	cp	r18, r24
    73dc:	39 07       	cpc	r19, r25
    73de:	4a 07       	cpc	r20, r26
    73e0:	5b 07       	cpc	r21, r27
    73e2:	f8 f0       	brcs	.+62     	; 0x7422 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    73e4:	8e 81       	ldd	r24, Y+6	; 0x06
    73e6:	9f 81       	ldd	r25, Y+7	; 0x07
    73e8:	a8 85       	ldd	r26, Y+8	; 0x08
    73ea:	b9 85       	ldd	r27, Y+9	; 0x09
    73ec:	88 0f       	add	r24, r24
    73ee:	99 1f       	adc	r25, r25
    73f0:	aa 1f       	adc	r26, r26
    73f2:	bb 1f       	adc	r27, r27
    73f4:	8e 83       	std	Y+6, r24	; 0x06
    73f6:	9f 83       	std	Y+7, r25	; 0x07
    73f8:	a8 87       	std	Y+8, r26	; 0x08
    73fa:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    73fc:	89 81       	ldd	r24, Y+1	; 0x01
    73fe:	8d 3f       	cpi	r24, 0xFD	; 253
    7400:	4c f4       	brge	.+18     	; 0x7414 <usart_set_baudrate+0x198>
			limit |= 1;
    7402:	8e 81       	ldd	r24, Y+6	; 0x06
    7404:	9f 81       	ldd	r25, Y+7	; 0x07
    7406:	a8 85       	ldd	r26, Y+8	; 0x08
    7408:	b9 85       	ldd	r27, Y+9	; 0x09
    740a:	81 60       	ori	r24, 0x01	; 1
    740c:	8e 83       	std	Y+6, r24	; 0x06
    740e:	9f 83       	std	Y+7, r25	; 0x07
    7410:	a8 87       	std	Y+8, r26	; 0x08
    7412:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    7414:	89 81       	ldd	r24, Y+1	; 0x01
    7416:	8f 5f       	subi	r24, 0xFF	; 255
    7418:	89 83       	std	Y+1, r24	; 0x01
    741a:	89 81       	ldd	r24, Y+1	; 0x01
    741c:	87 30       	cpi	r24, 0x07	; 7
    741e:	ac f2       	brlt	.-86     	; 0x73ca <usart_set_baudrate+0x14e>
    7420:	01 c0       	rjmp	.+2      	; 0x7424 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    7422:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    7424:	89 81       	ldd	r24, Y+1	; 0x01
    7426:	88 23       	and	r24, r24
    7428:	0c f0       	brlt	.+2      	; 0x742c <usart_set_baudrate+0x1b0>
    742a:	8a c0       	rjmp	.+276    	; 0x7540 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    742c:	88 8d       	ldd	r24, Y+24	; 0x18
    742e:	99 8d       	ldd	r25, Y+25	; 0x19
    7430:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7432:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7434:	88 0f       	add	r24, r24
    7436:	99 1f       	adc	r25, r25
    7438:	aa 1f       	adc	r26, r26
    743a:	bb 1f       	adc	r27, r27
    743c:	88 0f       	add	r24, r24
    743e:	99 1f       	adc	r25, r25
    7440:	aa 1f       	adc	r26, r26
    7442:	bb 1f       	adc	r27, r27
    7444:	88 0f       	add	r24, r24
    7446:	99 1f       	adc	r25, r25
    7448:	aa 1f       	adc	r26, r26
    744a:	bb 1f       	adc	r27, r27
    744c:	9c 01       	movw	r18, r24
    744e:	ad 01       	movw	r20, r26
    7450:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7452:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7454:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7456:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7458:	82 1b       	sub	r24, r18
    745a:	93 0b       	sbc	r25, r19
    745c:	a4 0b       	sbc	r26, r20
    745e:	b5 0b       	sbc	r27, r21
    7460:	8c 8f       	std	Y+28, r24	; 0x1c
    7462:	9d 8f       	std	Y+29, r25	; 0x1d
    7464:	ae 8f       	std	Y+30, r26	; 0x1e
    7466:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    7468:	89 81       	ldd	r24, Y+1	; 0x01
    746a:	8e 3f       	cpi	r24, 0xFE	; 254
    746c:	94 f5       	brge	.+100    	; 0x74d2 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    746e:	89 81       	ldd	r24, Y+1	; 0x01
    7470:	08 2e       	mov	r0, r24
    7472:	00 0c       	add	r0, r0
    7474:	99 0b       	sbc	r25, r25
    7476:	2d ef       	ldi	r18, 0xFD	; 253
    7478:	3f ef       	ldi	r19, 0xFF	; 255
    747a:	28 1b       	sub	r18, r24
    747c:	39 0b       	sbc	r19, r25
    747e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7480:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7482:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7484:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7486:	7c 01       	movw	r14, r24
    7488:	8d 01       	movw	r16, r26
    748a:	04 c0       	rjmp	.+8      	; 0x7494 <usart_set_baudrate+0x218>
    748c:	ee 0c       	add	r14, r14
    748e:	ff 1c       	adc	r15, r15
    7490:	00 1f       	adc	r16, r16
    7492:	11 1f       	adc	r17, r17
    7494:	2a 95       	dec	r18
    7496:	d2 f7       	brpl	.-12     	; 0x748c <usart_set_baudrate+0x210>
    7498:	a8 01       	movw	r20, r16
    749a:	97 01       	movw	r18, r14
    749c:	88 8d       	ldd	r24, Y+24	; 0x18
    749e:	99 8d       	ldd	r25, Y+25	; 0x19
    74a0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    74a2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    74a4:	b6 95       	lsr	r27
    74a6:	a7 95       	ror	r26
    74a8:	97 95       	ror	r25
    74aa:	87 95       	ror	r24
    74ac:	82 0f       	add	r24, r18
    74ae:	93 1f       	adc	r25, r19
    74b0:	a4 1f       	adc	r26, r20
    74b2:	b5 1f       	adc	r27, r21
    74b4:	28 8d       	ldd	r18, Y+24	; 0x18
    74b6:	39 8d       	ldd	r19, Y+25	; 0x19
    74b8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    74ba:	5b 8d       	ldd	r21, Y+27	; 0x1b
    74bc:	bc 01       	movw	r22, r24
    74be:	cd 01       	movw	r24, r26
    74c0:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    74c4:	da 01       	movw	r26, r20
    74c6:	c9 01       	movw	r24, r18
    74c8:	8a 83       	std	Y+2, r24	; 0x02
    74ca:	9b 83       	std	Y+3, r25	; 0x03
    74cc:	ac 83       	std	Y+4, r26	; 0x04
    74ce:	bd 83       	std	Y+5, r27	; 0x05
    74d0:	70 c0       	rjmp	.+224    	; 0x75b2 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    74d2:	89 81       	ldd	r24, Y+1	; 0x01
    74d4:	08 2e       	mov	r0, r24
    74d6:	00 0c       	add	r0, r0
    74d8:	99 0b       	sbc	r25, r25
    74da:	9c 01       	movw	r18, r24
    74dc:	2d 5f       	subi	r18, 0xFD	; 253
    74de:	3f 4f       	sbci	r19, 0xFF	; 255
    74e0:	88 8d       	ldd	r24, Y+24	; 0x18
    74e2:	99 8d       	ldd	r25, Y+25	; 0x19
    74e4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    74e6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    74e8:	04 c0       	rjmp	.+8      	; 0x74f2 <usart_set_baudrate+0x276>
    74ea:	88 0f       	add	r24, r24
    74ec:	99 1f       	adc	r25, r25
    74ee:	aa 1f       	adc	r26, r26
    74f0:	bb 1f       	adc	r27, r27
    74f2:	2a 95       	dec	r18
    74f4:	d2 f7       	brpl	.-12     	; 0x74ea <usart_set_baudrate+0x26e>
    74f6:	88 8f       	std	Y+24, r24	; 0x18
    74f8:	99 8f       	std	Y+25, r25	; 0x19
    74fa:	aa 8f       	std	Y+26, r26	; 0x1a
    74fc:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    74fe:	88 8d       	ldd	r24, Y+24	; 0x18
    7500:	99 8d       	ldd	r25, Y+25	; 0x19
    7502:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7504:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7506:	9c 01       	movw	r18, r24
    7508:	ad 01       	movw	r20, r26
    750a:	56 95       	lsr	r21
    750c:	47 95       	ror	r20
    750e:	37 95       	ror	r19
    7510:	27 95       	ror	r18
    7512:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7514:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7516:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7518:	bf 8d       	ldd	r27, Y+31	; 0x1f
    751a:	82 0f       	add	r24, r18
    751c:	93 1f       	adc	r25, r19
    751e:	a4 1f       	adc	r26, r20
    7520:	b5 1f       	adc	r27, r21
    7522:	28 8d       	ldd	r18, Y+24	; 0x18
    7524:	39 8d       	ldd	r19, Y+25	; 0x19
    7526:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7528:	5b 8d       	ldd	r21, Y+27	; 0x1b
    752a:	bc 01       	movw	r22, r24
    752c:	cd 01       	movw	r24, r26
    752e:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    7532:	da 01       	movw	r26, r20
    7534:	c9 01       	movw	r24, r18
    7536:	8a 83       	std	Y+2, r24	; 0x02
    7538:	9b 83       	std	Y+3, r25	; 0x03
    753a:	ac 83       	std	Y+4, r26	; 0x04
    753c:	bd 83       	std	Y+5, r27	; 0x05
    753e:	39 c0       	rjmp	.+114    	; 0x75b2 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    7540:	89 81       	ldd	r24, Y+1	; 0x01
    7542:	08 2e       	mov	r0, r24
    7544:	00 0c       	add	r0, r0
    7546:	99 0b       	sbc	r25, r25
    7548:	9c 01       	movw	r18, r24
    754a:	2d 5f       	subi	r18, 0xFD	; 253
    754c:	3f 4f       	sbci	r19, 0xFF	; 255
    754e:	88 8d       	ldd	r24, Y+24	; 0x18
    7550:	99 8d       	ldd	r25, Y+25	; 0x19
    7552:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7554:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7556:	04 c0       	rjmp	.+8      	; 0x7560 <usart_set_baudrate+0x2e4>
    7558:	88 0f       	add	r24, r24
    755a:	99 1f       	adc	r25, r25
    755c:	aa 1f       	adc	r26, r26
    755e:	bb 1f       	adc	r27, r27
    7560:	2a 95       	dec	r18
    7562:	d2 f7       	brpl	.-12     	; 0x7558 <usart_set_baudrate+0x2dc>
    7564:	88 8f       	std	Y+24, r24	; 0x18
    7566:	99 8f       	std	Y+25, r25	; 0x19
    7568:	aa 8f       	std	Y+26, r26	; 0x1a
    756a:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    756c:	88 8d       	ldd	r24, Y+24	; 0x18
    756e:	99 8d       	ldd	r25, Y+25	; 0x19
    7570:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7572:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7574:	9c 01       	movw	r18, r24
    7576:	ad 01       	movw	r20, r26
    7578:	56 95       	lsr	r21
    757a:	47 95       	ror	r20
    757c:	37 95       	ror	r19
    757e:	27 95       	ror	r18
    7580:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7582:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7584:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7586:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7588:	82 0f       	add	r24, r18
    758a:	93 1f       	adc	r25, r19
    758c:	a4 1f       	adc	r26, r20
    758e:	b5 1f       	adc	r27, r21
    7590:	28 8d       	ldd	r18, Y+24	; 0x18
    7592:	39 8d       	ldd	r19, Y+25	; 0x19
    7594:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7596:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7598:	bc 01       	movw	r22, r24
    759a:	cd 01       	movw	r24, r26
    759c:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__udivmodsi4>
    75a0:	da 01       	movw	r26, r20
    75a2:	c9 01       	movw	r24, r18
    75a4:	01 97       	sbiw	r24, 0x01	; 1
    75a6:	a1 09       	sbc	r26, r1
    75a8:	b1 09       	sbc	r27, r1
    75aa:	8a 83       	std	Y+2, r24	; 0x02
    75ac:	9b 83       	std	Y+3, r25	; 0x03
    75ae:	ac 83       	std	Y+4, r26	; 0x04
    75b0:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    75b2:	8a 81       	ldd	r24, Y+2	; 0x02
    75b4:	9b 81       	ldd	r25, Y+3	; 0x03
    75b6:	ac 81       	ldd	r26, Y+4	; 0x04
    75b8:	bd 81       	ldd	r27, Y+5	; 0x05
    75ba:	89 2f       	mov	r24, r25
    75bc:	9a 2f       	mov	r25, r26
    75be:	ab 2f       	mov	r26, r27
    75c0:	bb 27       	eor	r27, r27
    75c2:	98 2f       	mov	r25, r24
    75c4:	9f 70       	andi	r25, 0x0F	; 15
    75c6:	89 81       	ldd	r24, Y+1	; 0x01
    75c8:	82 95       	swap	r24
    75ca:	80 7f       	andi	r24, 0xF0	; 240
    75cc:	29 2f       	mov	r18, r25
    75ce:	28 2b       	or	r18, r24
    75d0:	8e 89       	ldd	r24, Y+22	; 0x16
    75d2:	9f 89       	ldd	r25, Y+23	; 0x17
    75d4:	fc 01       	movw	r30, r24
    75d6:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    75d8:	2a 81       	ldd	r18, Y+2	; 0x02
    75da:	8e 89       	ldd	r24, Y+22	; 0x16
    75dc:	9f 89       	ldd	r25, Y+23	; 0x17
    75de:	fc 01       	movw	r30, r24
    75e0:	26 83       	std	Z+6, r18	; 0x06

	return true;
    75e2:	81 e0       	ldi	r24, 0x01	; 1
}
    75e4:	6f 96       	adiw	r28, 0x1f	; 31
    75e6:	cd bf       	out	0x3d, r28	; 61
    75e8:	de bf       	out	0x3e, r29	; 62
    75ea:	df 91       	pop	r29
    75ec:	cf 91       	pop	r28
    75ee:	1f 91       	pop	r17
    75f0:	0f 91       	pop	r16
    75f2:	ff 90       	pop	r15
    75f4:	ef 90       	pop	r14
    75f6:	08 95       	ret

000075f8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    75f8:	cf 93       	push	r28
    75fa:	df 93       	push	r29
    75fc:	00 d0       	rcall	.+0      	; 0x75fe <ioport_configure_port_pin+0x6>
    75fe:	00 d0       	rcall	.+0      	; 0x7600 <ioport_configure_port_pin+0x8>
    7600:	cd b7       	in	r28, 0x3d	; 61
    7602:	de b7       	in	r29, 0x3e	; 62
    7604:	8a 83       	std	Y+2, r24	; 0x02
    7606:	9b 83       	std	Y+3, r25	; 0x03
    7608:	6c 83       	std	Y+4, r22	; 0x04
    760a:	4d 83       	std	Y+5, r20	; 0x05
    760c:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    760e:	19 82       	std	Y+1, r1	; 0x01
    7610:	20 c0       	rjmp	.+64     	; 0x7652 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    7612:	8c 81       	ldd	r24, Y+4	; 0x04
    7614:	88 2f       	mov	r24, r24
    7616:	90 e0       	ldi	r25, 0x00	; 0
    7618:	29 81       	ldd	r18, Y+1	; 0x01
    761a:	22 2f       	mov	r18, r18
    761c:	30 e0       	ldi	r19, 0x00	; 0
    761e:	02 c0       	rjmp	.+4      	; 0x7624 <ioport_configure_port_pin+0x2c>
    7620:	95 95       	asr	r25
    7622:	87 95       	ror	r24
    7624:	2a 95       	dec	r18
    7626:	e2 f7       	brpl	.-8      	; 0x7620 <ioport_configure_port_pin+0x28>
    7628:	81 70       	andi	r24, 0x01	; 1
    762a:	99 27       	eor	r25, r25
    762c:	89 2b       	or	r24, r25
    762e:	71 f0       	breq	.+28     	; 0x764c <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    7630:	89 81       	ldd	r24, Y+1	; 0x01
    7632:	88 2f       	mov	r24, r24
    7634:	90 e0       	ldi	r25, 0x00	; 0
    7636:	40 96       	adiw	r24, 0x10	; 16
    7638:	2a 81       	ldd	r18, Y+2	; 0x02
    763a:	3b 81       	ldd	r19, Y+3	; 0x03
    763c:	82 0f       	add	r24, r18
    763e:	93 1f       	adc	r25, r19
    7640:	2d 81       	ldd	r18, Y+5	; 0x05
    7642:	3e 81       	ldd	r19, Y+6	; 0x06
    7644:	23 2f       	mov	r18, r19
    7646:	33 27       	eor	r19, r19
    7648:	fc 01       	movw	r30, r24
    764a:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    764c:	89 81       	ldd	r24, Y+1	; 0x01
    764e:	8f 5f       	subi	r24, 0xFF	; 255
    7650:	89 83       	std	Y+1, r24	; 0x01
    7652:	89 81       	ldd	r24, Y+1	; 0x01
    7654:	88 30       	cpi	r24, 0x08	; 8
    7656:	e8 f2       	brcs	.-70     	; 0x7612 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    7658:	8d 81       	ldd	r24, Y+5	; 0x05
    765a:	9e 81       	ldd	r25, Y+6	; 0x06
    765c:	81 70       	andi	r24, 0x01	; 1
    765e:	99 27       	eor	r25, r25
    7660:	89 2b       	or	r24, r25
    7662:	d1 f0       	breq	.+52     	; 0x7698 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    7664:	8d 81       	ldd	r24, Y+5	; 0x05
    7666:	9e 81       	ldd	r25, Y+6	; 0x06
    7668:	82 70       	andi	r24, 0x02	; 2
    766a:	99 27       	eor	r25, r25
    766c:	89 2b       	or	r24, r25
    766e:	39 f0       	breq	.+14     	; 0x767e <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    7670:	8a 81       	ldd	r24, Y+2	; 0x02
    7672:	9b 81       	ldd	r25, Y+3	; 0x03
    7674:	05 96       	adiw	r24, 0x05	; 5
    7676:	2c 81       	ldd	r18, Y+4	; 0x04
    7678:	fc 01       	movw	r30, r24
    767a:	20 83       	st	Z, r18
    767c:	06 c0       	rjmp	.+12     	; 0x768a <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    767e:	8a 81       	ldd	r24, Y+2	; 0x02
    7680:	9b 81       	ldd	r25, Y+3	; 0x03
    7682:	06 96       	adiw	r24, 0x06	; 6
    7684:	2c 81       	ldd	r18, Y+4	; 0x04
    7686:	fc 01       	movw	r30, r24
    7688:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    768a:	8a 81       	ldd	r24, Y+2	; 0x02
    768c:	9b 81       	ldd	r25, Y+3	; 0x03
    768e:	01 96       	adiw	r24, 0x01	; 1
    7690:	2c 81       	ldd	r18, Y+4	; 0x04
    7692:	fc 01       	movw	r30, r24
    7694:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    7696:	06 c0       	rjmp	.+12     	; 0x76a4 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    7698:	8a 81       	ldd	r24, Y+2	; 0x02
    769a:	9b 81       	ldd	r25, Y+3	; 0x03
    769c:	02 96       	adiw	r24, 0x02	; 2
    769e:	2c 81       	ldd	r18, Y+4	; 0x04
    76a0:	fc 01       	movw	r30, r24
    76a2:	20 83       	st	Z, r18
	}
}
    76a4:	00 00       	nop
    76a6:	26 96       	adiw	r28, 0x06	; 6
    76a8:	cd bf       	out	0x3d, r28	; 61
    76aa:	de bf       	out	0x3e, r29	; 62
    76ac:	df 91       	pop	r29
    76ae:	cf 91       	pop	r28
    76b0:	08 95       	ret

000076b2 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    76b2:	cf 93       	push	r28
    76b4:	df 93       	push	r29
    76b6:	cd b7       	in	r28, 0x3d	; 61
    76b8:	de b7       	in	r29, 0x3e	; 62
    76ba:	27 97       	sbiw	r28, 0x07	; 7
    76bc:	cd bf       	out	0x3d, r28	; 61
    76be:	de bf       	out	0x3e, r29	; 62
    76c0:	8d 83       	std	Y+5, r24	; 0x05
    76c2:	6e 83       	std	Y+6, r22	; 0x06
    76c4:	7f 83       	std	Y+7, r23	; 0x07
    76c6:	8d 81       	ldd	r24, Y+5	; 0x05
    76c8:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    76ca:	89 81       	ldd	r24, Y+1	; 0x01
    76cc:	88 2f       	mov	r24, r24
    76ce:	90 e0       	ldi	r25, 0x00	; 0
    76d0:	9c 01       	movw	r18, r24
    76d2:	27 70       	andi	r18, 0x07	; 7
    76d4:	33 27       	eor	r19, r19
    76d6:	81 e0       	ldi	r24, 0x01	; 1
    76d8:	90 e0       	ldi	r25, 0x00	; 0
    76da:	02 c0       	rjmp	.+4      	; 0x76e0 <ioport_configure_pin+0x2e>
    76dc:	88 0f       	add	r24, r24
    76de:	99 1f       	adc	r25, r25
    76e0:	2a 95       	dec	r18
    76e2:	e2 f7       	brpl	.-8      	; 0x76dc <ioport_configure_pin+0x2a>
    76e4:	68 2f       	mov	r22, r24
    76e6:	8d 81       	ldd	r24, Y+5	; 0x05
    76e8:	8a 83       	std	Y+2, r24	; 0x02
    76ea:	8a 81       	ldd	r24, Y+2	; 0x02
    76ec:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    76ee:	8b 81       	ldd	r24, Y+3	; 0x03
    76f0:	86 95       	lsr	r24
    76f2:	86 95       	lsr	r24
    76f4:	86 95       	lsr	r24
    76f6:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    76f8:	8c 81       	ldd	r24, Y+4	; 0x04
    76fa:	88 2f       	mov	r24, r24
    76fc:	90 e0       	ldi	r25, 0x00	; 0
    76fe:	88 0f       	add	r24, r24
    7700:	99 1f       	adc	r25, r25
    7702:	82 95       	swap	r24
    7704:	92 95       	swap	r25
    7706:	90 7f       	andi	r25, 0xF0	; 240
    7708:	98 27       	eor	r25, r24
    770a:	80 7f       	andi	r24, 0xF0	; 240
    770c:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    770e:	9a 5f       	subi	r25, 0xFA	; 250
    7710:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    7712:	8e 81       	ldd	r24, Y+6	; 0x06
    7714:	9f 81       	ldd	r25, Y+7	; 0x07
    7716:	ac 01       	movw	r20, r24
    7718:	c9 01       	movw	r24, r18
    771a:	6e df       	rcall	.-292    	; 0x75f8 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    771c:	00 00       	nop
    771e:	27 96       	adiw	r28, 0x07	; 7
    7720:	cd bf       	out	0x3d, r28	; 61
    7722:	de bf       	out	0x3e, r29	; 62
    7724:	df 91       	pop	r29
    7726:	cf 91       	pop	r28
    7728:	08 95       	ret

0000772a <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    772a:	cf 93       	push	r28
    772c:	df 93       	push	r29
    772e:	cd b7       	in	r28, 0x3d	; 61
    7730:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    7732:	63 e0       	ldi	r22, 0x03	; 3
    7734:	70 e0       	ldi	r23, 0x00	; 0
    7736:	83 e7       	ldi	r24, 0x73	; 115
    7738:	bc df       	rcall	.-136    	; 0x76b2 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    773a:	60 e0       	ldi	r22, 0x00	; 0
    773c:	78 e1       	ldi	r23, 0x18	; 24
    773e:	82 e7       	ldi	r24, 0x72	; 114
    7740:	b8 df       	rcall	.-144    	; 0x76b2 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    7742:	00 00       	nop
    7744:	df 91       	pop	r29
    7746:	cf 91       	pop	r28
    7748:	08 95       	ret

0000774a <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    774a:	cf 93       	push	r28
    774c:	df 93       	push	r29
    774e:	1f 92       	push	r1
    7750:	1f 92       	push	r1
    7752:	cd b7       	in	r28, 0x3d	; 61
    7754:	de b7       	in	r29, 0x3e	; 62
    7756:	89 83       	std	Y+1, r24	; 0x01
    7758:	9a 83       	std	Y+2, r25	; 0x02
    775a:	89 81       	ldd	r24, Y+1	; 0x01
    775c:	9a 81       	ldd	r25, Y+2	; 0x02
    775e:	89 2b       	or	r24, r25
    7760:	09 f4       	brne	.+2      	; 0x7764 <sysclk_enable_peripheral_clock+0x1a>
    7762:	85 c1       	rjmp	.+778    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7764:	89 81       	ldd	r24, Y+1	; 0x01
    7766:	9a 81       	ldd	r25, Y+2	; 0x02
    7768:	80 3c       	cpi	r24, 0xC0	; 192
    776a:	91 05       	cpc	r25, r1
    776c:	29 f4       	brne	.+10     	; 0x7778 <sysclk_enable_peripheral_clock+0x2e>
    776e:	60 e1       	ldi	r22, 0x10	; 16
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7776:	7b c1       	rjmp	.+758    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7778:	89 81       	ldd	r24, Y+1	; 0x01
    777a:	9a 81       	ldd	r25, Y+2	; 0x02
    777c:	80 34       	cpi	r24, 0x40	; 64
    777e:	94 40       	sbci	r25, 0x04	; 4
    7780:	29 f4       	brne	.+10     	; 0x778c <sysclk_enable_peripheral_clock+0x42>
    7782:	68 e0       	ldi	r22, 0x08	; 8
    7784:	80 e0       	ldi	r24, 0x00	; 0
    7786:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    778a:	71 c1       	rjmp	.+738    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    778c:	89 81       	ldd	r24, Y+1	; 0x01
    778e:	9a 81       	ldd	r25, Y+2	; 0x02
    7790:	81 15       	cp	r24, r1
    7792:	94 40       	sbci	r25, 0x04	; 4
    7794:	29 f4       	brne	.+10     	; 0x77a0 <sysclk_enable_peripheral_clock+0x56>
    7796:	64 e0       	ldi	r22, 0x04	; 4
    7798:	80 e0       	ldi	r24, 0x00	; 0
    779a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    779e:	67 c1       	rjmp	.+718    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    77a0:	89 81       	ldd	r24, Y+1	; 0x01
    77a2:	9a 81       	ldd	r25, Y+2	; 0x02
    77a4:	80 38       	cpi	r24, 0x80	; 128
    77a6:	91 40       	sbci	r25, 0x01	; 1
    77a8:	29 f4       	brne	.+10     	; 0x77b4 <sysclk_enable_peripheral_clock+0x6a>
    77aa:	62 e0       	ldi	r22, 0x02	; 2
    77ac:	80 e0       	ldi	r24, 0x00	; 0
    77ae:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    77b2:	5d c1       	rjmp	.+698    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    77b4:	89 81       	ldd	r24, Y+1	; 0x01
    77b6:	9a 81       	ldd	r25, Y+2	; 0x02
    77b8:	81 15       	cp	r24, r1
    77ba:	91 40       	sbci	r25, 0x01	; 1
    77bc:	29 f4       	brne	.+10     	; 0x77c8 <sysclk_enable_peripheral_clock+0x7e>
    77be:	61 e0       	ldi	r22, 0x01	; 1
    77c0:	80 e0       	ldi	r24, 0x00	; 0
    77c2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    77c6:	53 c1       	rjmp	.+678    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    77c8:	89 81       	ldd	r24, Y+1	; 0x01
    77ca:	9a 81       	ldd	r25, Y+2	; 0x02
    77cc:	80 38       	cpi	r24, 0x80	; 128
    77ce:	93 40       	sbci	r25, 0x03	; 3
    77d0:	29 f4       	brne	.+10     	; 0x77dc <sysclk_enable_peripheral_clock+0x92>
    77d2:	61 e0       	ldi	r22, 0x01	; 1
    77d4:	81 e0       	ldi	r24, 0x01	; 1
    77d6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    77da:	49 c1       	rjmp	.+658    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    77dc:	89 81       	ldd	r24, Y+1	; 0x01
    77de:	9a 81       	ldd	r25, Y+2	; 0x02
    77e0:	80 39       	cpi	r24, 0x90	; 144
    77e2:	93 40       	sbci	r25, 0x03	; 3
    77e4:	29 f4       	brne	.+10     	; 0x77f0 <sysclk_enable_peripheral_clock+0xa6>
    77e6:	61 e0       	ldi	r22, 0x01	; 1
    77e8:	82 e0       	ldi	r24, 0x02	; 2
    77ea:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    77ee:	3f c1       	rjmp	.+638    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    77f0:	89 81       	ldd	r24, Y+1	; 0x01
    77f2:	9a 81       	ldd	r25, Y+2	; 0x02
    77f4:	81 15       	cp	r24, r1
    77f6:	92 40       	sbci	r25, 0x02	; 2
    77f8:	29 f4       	brne	.+10     	; 0x7804 <sysclk_enable_peripheral_clock+0xba>
    77fa:	62 e0       	ldi	r22, 0x02	; 2
    77fc:	81 e0       	ldi	r24, 0x01	; 1
    77fe:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7802:	35 c1       	rjmp	.+618    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7804:	89 81       	ldd	r24, Y+1	; 0x01
    7806:	9a 81       	ldd	r25, Y+2	; 0x02
    7808:	80 34       	cpi	r24, 0x40	; 64
    780a:	92 40       	sbci	r25, 0x02	; 2
    780c:	29 f4       	brne	.+10     	; 0x7818 <sysclk_enable_peripheral_clock+0xce>
    780e:	62 e0       	ldi	r22, 0x02	; 2
    7810:	82 e0       	ldi	r24, 0x02	; 2
    7812:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7816:	2b c1       	rjmp	.+598    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7818:	89 81       	ldd	r24, Y+1	; 0x01
    781a:	9a 81       	ldd	r25, Y+2	; 0x02
    781c:	81 15       	cp	r24, r1
    781e:	93 40       	sbci	r25, 0x03	; 3
    7820:	29 f4       	brne	.+10     	; 0x782c <sysclk_enable_peripheral_clock+0xe2>
    7822:	64 e0       	ldi	r22, 0x04	; 4
    7824:	81 e0       	ldi	r24, 0x01	; 1
    7826:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    782a:	21 c1       	rjmp	.+578    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    782c:	89 81       	ldd	r24, Y+1	; 0x01
    782e:	9a 81       	ldd	r25, Y+2	; 0x02
    7830:	80 32       	cpi	r24, 0x20	; 32
    7832:	93 40       	sbci	r25, 0x03	; 3
    7834:	29 f4       	brne	.+10     	; 0x7840 <sysclk_enable_peripheral_clock+0xf6>
    7836:	64 e0       	ldi	r22, 0x04	; 4
    7838:	82 e0       	ldi	r24, 0x02	; 2
    783a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    783e:	17 c1       	rjmp	.+558    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7840:	89 81       	ldd	r24, Y+1	; 0x01
    7842:	9a 81       	ldd	r25, Y+2	; 0x02
    7844:	81 15       	cp	r24, r1
    7846:	98 40       	sbci	r25, 0x08	; 8
    7848:	29 f4       	brne	.+10     	; 0x7854 <sysclk_enable_peripheral_clock+0x10a>
    784a:	61 e0       	ldi	r22, 0x01	; 1
    784c:	83 e0       	ldi	r24, 0x03	; 3
    784e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7852:	0d c1       	rjmp	.+538    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7854:	89 81       	ldd	r24, Y+1	; 0x01
    7856:	9a 81       	ldd	r25, Y+2	; 0x02
    7858:	81 15       	cp	r24, r1
    785a:	99 40       	sbci	r25, 0x09	; 9
    785c:	29 f4       	brne	.+10     	; 0x7868 <sysclk_enable_peripheral_clock+0x11e>
    785e:	61 e0       	ldi	r22, 0x01	; 1
    7860:	84 e0       	ldi	r24, 0x04	; 4
    7862:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7866:	03 c1       	rjmp	.+518    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7868:	89 81       	ldd	r24, Y+1	; 0x01
    786a:	9a 81       	ldd	r25, Y+2	; 0x02
    786c:	81 15       	cp	r24, r1
    786e:	9a 40       	sbci	r25, 0x0A	; 10
    7870:	29 f4       	brne	.+10     	; 0x787c <sysclk_enable_peripheral_clock+0x132>
    7872:	61 e0       	ldi	r22, 0x01	; 1
    7874:	85 e0       	ldi	r24, 0x05	; 5
    7876:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    787a:	f9 c0       	rjmp	.+498    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    787c:	89 81       	ldd	r24, Y+1	; 0x01
    787e:	9a 81       	ldd	r25, Y+2	; 0x02
    7880:	81 15       	cp	r24, r1
    7882:	9b 40       	sbci	r25, 0x0B	; 11
    7884:	29 f4       	brne	.+10     	; 0x7890 <sysclk_enable_peripheral_clock+0x146>
    7886:	61 e0       	ldi	r22, 0x01	; 1
    7888:	86 e0       	ldi	r24, 0x06	; 6
    788a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    788e:	ef c0       	rjmp	.+478    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7890:	89 81       	ldd	r24, Y+1	; 0x01
    7892:	9a 81       	ldd	r25, Y+2	; 0x02
    7894:	80 34       	cpi	r24, 0x40	; 64
    7896:	98 40       	sbci	r25, 0x08	; 8
    7898:	29 f4       	brne	.+10     	; 0x78a4 <sysclk_enable_peripheral_clock+0x15a>
    789a:	62 e0       	ldi	r22, 0x02	; 2
    789c:	83 e0       	ldi	r24, 0x03	; 3
    789e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    78a2:	e5 c0       	rjmp	.+458    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    78a4:	89 81       	ldd	r24, Y+1	; 0x01
    78a6:	9a 81       	ldd	r25, Y+2	; 0x02
    78a8:	80 34       	cpi	r24, 0x40	; 64
    78aa:	99 40       	sbci	r25, 0x09	; 9
    78ac:	29 f4       	brne	.+10     	; 0x78b8 <sysclk_enable_peripheral_clock+0x16e>
    78ae:	62 e0       	ldi	r22, 0x02	; 2
    78b0:	84 e0       	ldi	r24, 0x04	; 4
    78b2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    78b6:	db c0       	rjmp	.+438    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    78b8:	89 81       	ldd	r24, Y+1	; 0x01
    78ba:	9a 81       	ldd	r25, Y+2	; 0x02
    78bc:	80 34       	cpi	r24, 0x40	; 64
    78be:	9a 40       	sbci	r25, 0x0A	; 10
    78c0:	29 f4       	brne	.+10     	; 0x78cc <sysclk_enable_peripheral_clock+0x182>
    78c2:	62 e0       	ldi	r22, 0x02	; 2
    78c4:	85 e0       	ldi	r24, 0x05	; 5
    78c6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    78ca:	d1 c0       	rjmp	.+418    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    78cc:	89 81       	ldd	r24, Y+1	; 0x01
    78ce:	9a 81       	ldd	r25, Y+2	; 0x02
    78d0:	80 34       	cpi	r24, 0x40	; 64
    78d2:	9b 40       	sbci	r25, 0x0B	; 11
    78d4:	29 f4       	brne	.+10     	; 0x78e0 <sysclk_enable_peripheral_clock+0x196>
    78d6:	62 e0       	ldi	r22, 0x02	; 2
    78d8:	86 e0       	ldi	r24, 0x06	; 6
    78da:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    78de:	c7 c0       	rjmp	.+398    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    78e0:	89 81       	ldd	r24, Y+1	; 0x01
    78e2:	9a 81       	ldd	r25, Y+2	; 0x02
    78e4:	80 39       	cpi	r24, 0x90	; 144
    78e6:	98 40       	sbci	r25, 0x08	; 8
    78e8:	29 f4       	brne	.+10     	; 0x78f4 <sysclk_enable_peripheral_clock+0x1aa>
    78ea:	64 e0       	ldi	r22, 0x04	; 4
    78ec:	83 e0       	ldi	r24, 0x03	; 3
    78ee:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    78f2:	bd c0       	rjmp	.+378    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    78f4:	89 81       	ldd	r24, Y+1	; 0x01
    78f6:	9a 81       	ldd	r25, Y+2	; 0x02
    78f8:	80 39       	cpi	r24, 0x90	; 144
    78fa:	99 40       	sbci	r25, 0x09	; 9
    78fc:	29 f4       	brne	.+10     	; 0x7908 <sysclk_enable_peripheral_clock+0x1be>
    78fe:	64 e0       	ldi	r22, 0x04	; 4
    7900:	84 e0       	ldi	r24, 0x04	; 4
    7902:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7906:	b3 c0       	rjmp	.+358    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7908:	89 81       	ldd	r24, Y+1	; 0x01
    790a:	9a 81       	ldd	r25, Y+2	; 0x02
    790c:	80 39       	cpi	r24, 0x90	; 144
    790e:	9a 40       	sbci	r25, 0x0A	; 10
    7910:	29 f4       	brne	.+10     	; 0x791c <sysclk_enable_peripheral_clock+0x1d2>
    7912:	64 e0       	ldi	r22, 0x04	; 4
    7914:	85 e0       	ldi	r24, 0x05	; 5
    7916:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    791a:	a9 c0       	rjmp	.+338    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    791c:	89 81       	ldd	r24, Y+1	; 0x01
    791e:	9a 81       	ldd	r25, Y+2	; 0x02
    7920:	80 39       	cpi	r24, 0x90	; 144
    7922:	9b 40       	sbci	r25, 0x0B	; 11
    7924:	29 f4       	brne	.+10     	; 0x7930 <sysclk_enable_peripheral_clock+0x1e6>
    7926:	64 e0       	ldi	r22, 0x04	; 4
    7928:	86 e0       	ldi	r24, 0x06	; 6
    792a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    792e:	9f c0       	rjmp	.+318    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7930:	89 81       	ldd	r24, Y+1	; 0x01
    7932:	9a 81       	ldd	r25, Y+2	; 0x02
    7934:	80 3c       	cpi	r24, 0xC0	; 192
    7936:	98 40       	sbci	r25, 0x08	; 8
    7938:	29 f4       	brne	.+10     	; 0x7944 <sysclk_enable_peripheral_clock+0x1fa>
    793a:	68 e0       	ldi	r22, 0x08	; 8
    793c:	83 e0       	ldi	r24, 0x03	; 3
    793e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7942:	95 c0       	rjmp	.+298    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7944:	89 81       	ldd	r24, Y+1	; 0x01
    7946:	9a 81       	ldd	r25, Y+2	; 0x02
    7948:	80 3c       	cpi	r24, 0xC0	; 192
    794a:	99 40       	sbci	r25, 0x09	; 9
    794c:	29 f4       	brne	.+10     	; 0x7958 <sysclk_enable_peripheral_clock+0x20e>
    794e:	68 e0       	ldi	r22, 0x08	; 8
    7950:	84 e0       	ldi	r24, 0x04	; 4
    7952:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7956:	8b c0       	rjmp	.+278    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7958:	89 81       	ldd	r24, Y+1	; 0x01
    795a:	9a 81       	ldd	r25, Y+2	; 0x02
    795c:	80 3c       	cpi	r24, 0xC0	; 192
    795e:	9a 40       	sbci	r25, 0x0A	; 10
    7960:	29 f4       	brne	.+10     	; 0x796c <sysclk_enable_peripheral_clock+0x222>
    7962:	68 e0       	ldi	r22, 0x08	; 8
    7964:	85 e0       	ldi	r24, 0x05	; 5
    7966:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    796a:	81 c0       	rjmp	.+258    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    796c:	89 81       	ldd	r24, Y+1	; 0x01
    796e:	9a 81       	ldd	r25, Y+2	; 0x02
    7970:	80 3c       	cpi	r24, 0xC0	; 192
    7972:	9b 40       	sbci	r25, 0x0B	; 11
    7974:	29 f4       	brne	.+10     	; 0x7980 <sysclk_enable_peripheral_clock+0x236>
    7976:	68 e0       	ldi	r22, 0x08	; 8
    7978:	86 e0       	ldi	r24, 0x06	; 6
    797a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    797e:	77 c0       	rjmp	.+238    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7980:	89 81       	ldd	r24, Y+1	; 0x01
    7982:	9a 81       	ldd	r25, Y+2	; 0x02
    7984:	80 3a       	cpi	r24, 0xA0	; 160
    7986:	98 40       	sbci	r25, 0x08	; 8
    7988:	29 f4       	brne	.+10     	; 0x7994 <sysclk_enable_peripheral_clock+0x24a>
    798a:	60 e1       	ldi	r22, 0x10	; 16
    798c:	83 e0       	ldi	r24, 0x03	; 3
    798e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7992:	6d c0       	rjmp	.+218    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7994:	89 81       	ldd	r24, Y+1	; 0x01
    7996:	9a 81       	ldd	r25, Y+2	; 0x02
    7998:	80 3a       	cpi	r24, 0xA0	; 160
    799a:	99 40       	sbci	r25, 0x09	; 9
    799c:	29 f4       	brne	.+10     	; 0x79a8 <sysclk_enable_peripheral_clock+0x25e>
    799e:	60 e1       	ldi	r22, 0x10	; 16
    79a0:	84 e0       	ldi	r24, 0x04	; 4
    79a2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    79a6:	63 c0       	rjmp	.+198    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    79a8:	89 81       	ldd	r24, Y+1	; 0x01
    79aa:	9a 81       	ldd	r25, Y+2	; 0x02
    79ac:	80 3a       	cpi	r24, 0xA0	; 160
    79ae:	9a 40       	sbci	r25, 0x0A	; 10
    79b0:	29 f4       	brne	.+10     	; 0x79bc <sysclk_enable_peripheral_clock+0x272>
    79b2:	60 e1       	ldi	r22, 0x10	; 16
    79b4:	85 e0       	ldi	r24, 0x05	; 5
    79b6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    79ba:	59 c0       	rjmp	.+178    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    79bc:	89 81       	ldd	r24, Y+1	; 0x01
    79be:	9a 81       	ldd	r25, Y+2	; 0x02
    79c0:	80 3a       	cpi	r24, 0xA0	; 160
    79c2:	9b 40       	sbci	r25, 0x0B	; 11
    79c4:	29 f4       	brne	.+10     	; 0x79d0 <sysclk_enable_peripheral_clock+0x286>
    79c6:	60 e1       	ldi	r22, 0x10	; 16
    79c8:	86 e0       	ldi	r24, 0x06	; 6
    79ca:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    79ce:	4f c0       	rjmp	.+158    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    79d0:	89 81       	ldd	r24, Y+1	; 0x01
    79d2:	9a 81       	ldd	r25, Y+2	; 0x02
    79d4:	80 3b       	cpi	r24, 0xB0	; 176
    79d6:	98 40       	sbci	r25, 0x08	; 8
    79d8:	29 f4       	brne	.+10     	; 0x79e4 <sysclk_enable_peripheral_clock+0x29a>
    79da:	60 e2       	ldi	r22, 0x20	; 32
    79dc:	83 e0       	ldi	r24, 0x03	; 3
    79de:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    79e2:	45 c0       	rjmp	.+138    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    79e4:	89 81       	ldd	r24, Y+1	; 0x01
    79e6:	9a 81       	ldd	r25, Y+2	; 0x02
    79e8:	80 3b       	cpi	r24, 0xB0	; 176
    79ea:	99 40       	sbci	r25, 0x09	; 9
    79ec:	29 f4       	brne	.+10     	; 0x79f8 <sysclk_enable_peripheral_clock+0x2ae>
    79ee:	60 e2       	ldi	r22, 0x20	; 32
    79f0:	84 e0       	ldi	r24, 0x04	; 4
    79f2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    79f6:	3b c0       	rjmp	.+118    	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    79f8:	89 81       	ldd	r24, Y+1	; 0x01
    79fa:	9a 81       	ldd	r25, Y+2	; 0x02
    79fc:	80 3b       	cpi	r24, 0xB0	; 176
    79fe:	9a 40       	sbci	r25, 0x0A	; 10
    7a00:	29 f4       	brne	.+10     	; 0x7a0c <sysclk_enable_peripheral_clock+0x2c2>
    7a02:	60 e2       	ldi	r22, 0x20	; 32
    7a04:	85 e0       	ldi	r24, 0x05	; 5
    7a06:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7a0a:	31 c0       	rjmp	.+98     	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7a0c:	89 81       	ldd	r24, Y+1	; 0x01
    7a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7a10:	80 3b       	cpi	r24, 0xB0	; 176
    7a12:	9b 40       	sbci	r25, 0x0B	; 11
    7a14:	29 f4       	brne	.+10     	; 0x7a20 <sysclk_enable_peripheral_clock+0x2d6>
    7a16:	60 e2       	ldi	r22, 0x20	; 32
    7a18:	86 e0       	ldi	r24, 0x06	; 6
    7a1a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7a1e:	27 c0       	rjmp	.+78     	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7a20:	89 81       	ldd	r24, Y+1	; 0x01
    7a22:	9a 81       	ldd	r25, Y+2	; 0x02
    7a24:	80 38       	cpi	r24, 0x80	; 128
    7a26:	94 40       	sbci	r25, 0x04	; 4
    7a28:	29 f4       	brne	.+10     	; 0x7a34 <sysclk_enable_peripheral_clock+0x2ea>
    7a2a:	60 e4       	ldi	r22, 0x40	; 64
    7a2c:	83 e0       	ldi	r24, 0x03	; 3
    7a2e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7a32:	1d c0       	rjmp	.+58     	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7a34:	89 81       	ldd	r24, Y+1	; 0x01
    7a36:	9a 81       	ldd	r25, Y+2	; 0x02
    7a38:	80 39       	cpi	r24, 0x90	; 144
    7a3a:	94 40       	sbci	r25, 0x04	; 4
    7a3c:	29 f4       	brne	.+10     	; 0x7a48 <sysclk_enable_peripheral_clock+0x2fe>
    7a3e:	60 e4       	ldi	r22, 0x40	; 64
    7a40:	84 e0       	ldi	r24, 0x04	; 4
    7a42:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7a46:	13 c0       	rjmp	.+38     	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7a48:	89 81       	ldd	r24, Y+1	; 0x01
    7a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    7a4c:	80 3a       	cpi	r24, 0xA0	; 160
    7a4e:	94 40       	sbci	r25, 0x04	; 4
    7a50:	29 f4       	brne	.+10     	; 0x7a5c <sysclk_enable_peripheral_clock+0x312>
    7a52:	60 e4       	ldi	r22, 0x40	; 64
    7a54:	85 e0       	ldi	r24, 0x05	; 5
    7a56:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7a5a:	09 c0       	rjmp	.+18     	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7a5c:	89 81       	ldd	r24, Y+1	; 0x01
    7a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    7a60:	80 3b       	cpi	r24, 0xB0	; 176
    7a62:	94 40       	sbci	r25, 0x04	; 4
    7a64:	21 f4       	brne	.+8      	; 0x7a6e <sysclk_enable_peripheral_clock+0x324>
    7a66:	60 e4       	ldi	r22, 0x40	; 64
    7a68:	86 e0       	ldi	r24, 0x06	; 6
    7a6a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7a6e:	00 00       	nop
    7a70:	0f 90       	pop	r0
    7a72:	0f 90       	pop	r0
    7a74:	df 91       	pop	r29
    7a76:	cf 91       	pop	r28
    7a78:	08 95       	ret

00007a7a <usart_serial_init>:
    7a7a:	cf 93       	push	r28
    7a7c:	df 93       	push	r29
    7a7e:	cd b7       	in	r28, 0x3d	; 61
    7a80:	de b7       	in	r29, 0x3e	; 62
    7a82:	2b 97       	sbiw	r28, 0x0b	; 11
    7a84:	cd bf       	out	0x3d, r28	; 61
    7a86:	de bf       	out	0x3e, r29	; 62
    7a88:	88 87       	std	Y+8, r24	; 0x08
    7a8a:	99 87       	std	Y+9, r25	; 0x09
    7a8c:	6a 87       	std	Y+10, r22	; 0x0a
    7a8e:	7b 87       	std	Y+11, r23	; 0x0b
    7a90:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a92:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a94:	fc 01       	movw	r30, r24
    7a96:	84 81       	ldd	r24, Z+4	; 0x04
    7a98:	8d 83       	std	Y+5, r24	; 0x05
    7a9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a9e:	fc 01       	movw	r30, r24
    7aa0:	85 81       	ldd	r24, Z+5	; 0x05
    7aa2:	8e 83       	std	Y+6, r24	; 0x06
    7aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7aa8:	fc 01       	movw	r30, r24
    7aaa:	86 81       	ldd	r24, Z+6	; 0x06
    7aac:	8f 83       	std	Y+7, r24	; 0x07
    7aae:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ab0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ab2:	fc 01       	movw	r30, r24
    7ab4:	80 81       	ld	r24, Z
    7ab6:	91 81       	ldd	r25, Z+1	; 0x01
    7ab8:	a2 81       	ldd	r26, Z+2	; 0x02
    7aba:	b3 81       	ldd	r27, Z+3	; 0x03
    7abc:	89 83       	std	Y+1, r24	; 0x01
    7abe:	9a 83       	std	Y+2, r25	; 0x02
    7ac0:	ab 83       	std	Y+3, r26	; 0x03
    7ac2:	bc 83       	std	Y+4, r27	; 0x04
    7ac4:	88 85       	ldd	r24, Y+8	; 0x08
    7ac6:	99 85       	ldd	r25, Y+9	; 0x09
    7ac8:	80 3a       	cpi	r24, 0xA0	; 160
    7aca:	98 40       	sbci	r25, 0x08	; 8
    7acc:	21 f4       	brne	.+8      	; 0x7ad6 <usart_serial_init+0x5c>
    7ace:	60 e1       	ldi	r22, 0x10	; 16
    7ad0:	83 e0       	ldi	r24, 0x03	; 3
    7ad2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7ad6:	88 85       	ldd	r24, Y+8	; 0x08
    7ad8:	99 85       	ldd	r25, Y+9	; 0x09
    7ada:	80 3b       	cpi	r24, 0xB0	; 176
    7adc:	98 40       	sbci	r25, 0x08	; 8
    7ade:	21 f4       	brne	.+8      	; 0x7ae8 <usart_serial_init+0x6e>
    7ae0:	60 e2       	ldi	r22, 0x20	; 32
    7ae2:	83 e0       	ldi	r24, 0x03	; 3
    7ae4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7ae8:	88 85       	ldd	r24, Y+8	; 0x08
    7aea:	99 85       	ldd	r25, Y+9	; 0x09
    7aec:	80 3a       	cpi	r24, 0xA0	; 160
    7aee:	99 40       	sbci	r25, 0x09	; 9
    7af0:	21 f4       	brne	.+8      	; 0x7afa <usart_serial_init+0x80>
    7af2:	60 e1       	ldi	r22, 0x10	; 16
    7af4:	84 e0       	ldi	r24, 0x04	; 4
    7af6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7afa:	88 85       	ldd	r24, Y+8	; 0x08
    7afc:	99 85       	ldd	r25, Y+9	; 0x09
    7afe:	80 3b       	cpi	r24, 0xB0	; 176
    7b00:	99 40       	sbci	r25, 0x09	; 9
    7b02:	21 f4       	brne	.+8      	; 0x7b0c <usart_serial_init+0x92>
    7b04:	60 e2       	ldi	r22, 0x20	; 32
    7b06:	84 e0       	ldi	r24, 0x04	; 4
    7b08:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7b0c:	88 85       	ldd	r24, Y+8	; 0x08
    7b0e:	99 85       	ldd	r25, Y+9	; 0x09
    7b10:	80 3a       	cpi	r24, 0xA0	; 160
    7b12:	9a 40       	sbci	r25, 0x0A	; 10
    7b14:	21 f4       	brne	.+8      	; 0x7b1e <usart_serial_init+0xa4>
    7b16:	60 e1       	ldi	r22, 0x10	; 16
    7b18:	85 e0       	ldi	r24, 0x05	; 5
    7b1a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7b1e:	88 85       	ldd	r24, Y+8	; 0x08
    7b20:	99 85       	ldd	r25, Y+9	; 0x09
    7b22:	80 3b       	cpi	r24, 0xB0	; 176
    7b24:	9a 40       	sbci	r25, 0x0A	; 10
    7b26:	21 f4       	brne	.+8      	; 0x7b30 <usart_serial_init+0xb6>
    7b28:	60 e2       	ldi	r22, 0x20	; 32
    7b2a:	85 e0       	ldi	r24, 0x05	; 5
    7b2c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7b30:	88 85       	ldd	r24, Y+8	; 0x08
    7b32:	99 85       	ldd	r25, Y+9	; 0x09
    7b34:	80 3a       	cpi	r24, 0xA0	; 160
    7b36:	9b 40       	sbci	r25, 0x0B	; 11
    7b38:	21 f4       	brne	.+8      	; 0x7b42 <usart_serial_init+0xc8>
    7b3a:	60 e1       	ldi	r22, 0x10	; 16
    7b3c:	86 e0       	ldi	r24, 0x06	; 6
    7b3e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7b42:	88 85       	ldd	r24, Y+8	; 0x08
    7b44:	99 85       	ldd	r25, Y+9	; 0x09
    7b46:	80 3b       	cpi	r24, 0xB0	; 176
    7b48:	9b 40       	sbci	r25, 0x0B	; 11
    7b4a:	21 f4       	brne	.+8      	; 0x7b54 <usart_serial_init+0xda>
    7b4c:	60 e2       	ldi	r22, 0x20	; 32
    7b4e:	86 e0       	ldi	r24, 0x06	; 6
    7b50:	0e 94 dd 21 	call	0x43ba	; 0x43ba <sysclk_enable_module>
    7b54:	88 85       	ldd	r24, Y+8	; 0x08
    7b56:	99 85       	ldd	r25, Y+9	; 0x09
    7b58:	9e 01       	movw	r18, r28
    7b5a:	2f 5f       	subi	r18, 0xFF	; 255
    7b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b5e:	b9 01       	movw	r22, r18
    7b60:	0f db       	rcall	.-2530   	; 0x7180 <usart_init_rs232>
    7b62:	88 23       	and	r24, r24
    7b64:	11 f0       	breq	.+4      	; 0x7b6a <usart_serial_init+0xf0>
    7b66:	81 e0       	ldi	r24, 0x01	; 1
    7b68:	01 c0       	rjmp	.+2      	; 0x7b6c <usart_serial_init+0xf2>
    7b6a:	80 e0       	ldi	r24, 0x00	; 0
    7b6c:	2b 96       	adiw	r28, 0x0b	; 11
    7b6e:	cd bf       	out	0x3d, r28	; 61
    7b70:	de bf       	out	0x3e, r29	; 62
    7b72:	df 91       	pop	r29
    7b74:	cf 91       	pop	r28
    7b76:	08 95       	ret

00007b78 <usart_serial_putchar>:
    7b78:	cf 93       	push	r28
    7b7a:	df 93       	push	r29
    7b7c:	00 d0       	rcall	.+0      	; 0x7b7e <usart_serial_putchar+0x6>
    7b7e:	cd b7       	in	r28, 0x3d	; 61
    7b80:	de b7       	in	r29, 0x3e	; 62
    7b82:	89 83       	std	Y+1, r24	; 0x01
    7b84:	9a 83       	std	Y+2, r25	; 0x02
    7b86:	6b 83       	std	Y+3, r22	; 0x03
    7b88:	89 81       	ldd	r24, Y+1	; 0x01
    7b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    7b8c:	6b 81       	ldd	r22, Y+3	; 0x03
    7b8e:	3e db       	rcall	.-2436   	; 0x720c <usart_putchar>
    7b90:	23 96       	adiw	r28, 0x03	; 3
    7b92:	cd bf       	out	0x3d, r28	; 61
    7b94:	de bf       	out	0x3e, r29	; 62
    7b96:	df 91       	pop	r29
    7b98:	cf 91       	pop	r28
    7b9a:	08 95       	ret

00007b9c <usart_serial_getchar>:
    7b9c:	cf 93       	push	r28
    7b9e:	df 93       	push	r29
    7ba0:	00 d0       	rcall	.+0      	; 0x7ba2 <usart_serial_getchar+0x6>
    7ba2:	1f 92       	push	r1
    7ba4:	cd b7       	in	r28, 0x3d	; 61
    7ba6:	de b7       	in	r29, 0x3e	; 62
    7ba8:	89 83       	std	Y+1, r24	; 0x01
    7baa:	9a 83       	std	Y+2, r25	; 0x02
    7bac:	6b 83       	std	Y+3, r22	; 0x03
    7bae:	7c 83       	std	Y+4, r23	; 0x04
    7bb0:	89 81       	ldd	r24, Y+1	; 0x01
    7bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7bb4:	49 db       	rcall	.-2414   	; 0x7248 <usart_getchar>
    7bb6:	28 2f       	mov	r18, r24
    7bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    7bba:	9c 81       	ldd	r25, Y+4	; 0x04
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	20 83       	st	Z, r18
    7bc0:	00 00       	nop
    7bc2:	24 96       	adiw	r28, 0x04	; 4
    7bc4:	cd bf       	out	0x3d, r28	; 61
    7bc6:	de bf       	out	0x3e, r29	; 62
    7bc8:	df 91       	pop	r29
    7bca:	cf 91       	pop	r28
    7bcc:	08 95       	ret

00007bce <stdio_serial_init>:
    7bce:	cf 93       	push	r28
    7bd0:	df 93       	push	r29
    7bd2:	00 d0       	rcall	.+0      	; 0x7bd4 <stdio_serial_init+0x6>
    7bd4:	1f 92       	push	r1
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
    7bda:	89 83       	std	Y+1, r24	; 0x01
    7bdc:	9a 83       	std	Y+2, r25	; 0x02
    7bde:	6b 83       	std	Y+3, r22	; 0x03
    7be0:	7c 83       	std	Y+4, r23	; 0x04
    7be2:	89 81       	ldd	r24, Y+1	; 0x01
    7be4:	9a 81       	ldd	r25, Y+2	; 0x02
    7be6:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <stdio_base>
    7bea:	90 93 3c 23 	sts	0x233C, r25	; 0x80233c <stdio_base+0x1>
    7bee:	8c eb       	ldi	r24, 0xBC	; 188
    7bf0:	9d e3       	ldi	r25, 0x3D	; 61
    7bf2:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <ptr_put>
    7bf6:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <ptr_put+0x1>
    7bfa:	8e ec       	ldi	r24, 0xCE	; 206
    7bfc:	9d e3       	ldi	r25, 0x3D	; 61
    7bfe:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <ptr_get>
    7c02:	90 93 38 23 	sts	0x2338, r25	; 0x802338 <ptr_get+0x1>
    7c06:	2b 81       	ldd	r18, Y+3	; 0x03
    7c08:	3c 81       	ldd	r19, Y+4	; 0x04
    7c0a:	89 81       	ldd	r24, Y+1	; 0x01
    7c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    7c0e:	b9 01       	movw	r22, r18
    7c10:	34 df       	rcall	.-408    	; 0x7a7a <usart_serial_init>
    7c12:	60 e6       	ldi	r22, 0x60	; 96
    7c14:	72 e2       	ldi	r23, 0x22	; 34
    7c16:	8f e7       	ldi	r24, 0x7F	; 127
    7c18:	92 e2       	ldi	r25, 0x22	; 34
    7c1a:	0e 94 14 4e 	call	0x9c28	; 0x9c28 <fdevopen>
    7c1e:	00 00       	nop
    7c20:	24 96       	adiw	r28, 0x04	; 4
    7c22:	cd bf       	out	0x3d, r28	; 61
    7c24:	de bf       	out	0x3e, r29	; 62
    7c26:	df 91       	pop	r29
    7c28:	cf 91       	pop	r28
    7c2a:	08 95       	ret

00007c2c <uart_init>:
    7c2c:	cf 93       	push	r28
    7c2e:	df 93       	push	r29
    7c30:	1f 92       	push	r1
    7c32:	1f 92       	push	r1
    7c34:	cd b7       	in	r28, 0x3d	; 61
    7c36:	de b7       	in	r29, 0x3e	; 62
    7c38:	89 83       	std	Y+1, r24	; 0x01
    7c3a:	9a 83       	std	Y+2, r25	; 0x02
    7c3c:	89 81       	ldd	r24, Y+1	; 0x01
    7c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c40:	fc 01       	movw	r30, r24
    7c42:	86 81       	ldd	r24, Z+6	; 0x06
    7c44:	97 81       	ldd	r25, Z+7	; 0x07
    7c46:	a0 85       	ldd	r26, Z+8	; 0x08
    7c48:	b1 85       	ldd	r27, Z+9	; 0x09
    7c4a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6721>
    7c4e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6721+0x1>
    7c52:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6721+0x2>
    7c56:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6721+0x3>
    7c5a:	89 81       	ldd	r24, Y+1	; 0x01
    7c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    7c5e:	fc 01       	movw	r30, r24
    7c60:	80 81       	ld	r24, Z
    7c62:	91 81       	ldd	r25, Z+1	; 0x01
    7c64:	29 81       	ldd	r18, Y+1	; 0x01
    7c66:	3a 81       	ldd	r19, Y+2	; 0x02
    7c68:	f9 01       	movw	r30, r18
    7c6a:	20 81       	ld	r18, Z
    7c6c:	31 81       	ldd	r19, Z+1	; 0x01
    7c6e:	f9 01       	movw	r30, r18
    7c70:	40 81       	ld	r20, Z
    7c72:	29 81       	ldd	r18, Y+1	; 0x01
    7c74:	3a 81       	ldd	r19, Y+2	; 0x02
    7c76:	f9 01       	movw	r30, r18
    7c78:	25 81       	ldd	r18, Z+5	; 0x05
    7c7a:	24 2b       	or	r18, r20
    7c7c:	fc 01       	movw	r30, r24
    7c7e:	20 83       	st	Z, r18
    7c80:	89 81       	ldd	r24, Y+1	; 0x01
    7c82:	9a 81       	ldd	r25, Y+2	; 0x02
    7c84:	fc 01       	movw	r30, r24
    7c86:	80 81       	ld	r24, Z
    7c88:	91 81       	ldd	r25, Z+1	; 0x01
    7c8a:	29 81       	ldd	r18, Y+1	; 0x01
    7c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    7c8e:	f9 01       	movw	r30, r18
    7c90:	20 81       	ld	r18, Z
    7c92:	31 81       	ldd	r19, Z+1	; 0x01
    7c94:	f9 01       	movw	r30, r18
    7c96:	44 81       	ldd	r20, Z+4	; 0x04
    7c98:	29 81       	ldd	r18, Y+1	; 0x01
    7c9a:	3a 81       	ldd	r19, Y+2	; 0x02
    7c9c:	f9 01       	movw	r30, r18
    7c9e:	25 81       	ldd	r18, Z+5	; 0x05
    7ca0:	24 2b       	or	r18, r20
    7ca2:	fc 01       	movw	r30, r24
    7ca4:	24 83       	std	Z+4, r18	; 0x04
    7ca6:	89 81       	ldd	r24, Y+1	; 0x01
    7ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    7caa:	fc 01       	movw	r30, r24
    7cac:	80 81       	ld	r24, Z
    7cae:	91 81       	ldd	r25, Z+1	; 0x01
    7cb0:	29 81       	ldd	r18, Y+1	; 0x01
    7cb2:	3a 81       	ldd	r19, Y+2	; 0x02
    7cb4:	f9 01       	movw	r30, r18
    7cb6:	20 81       	ld	r18, Z
    7cb8:	31 81       	ldd	r19, Z+1	; 0x01
    7cba:	f9 01       	movw	r30, r18
    7cbc:	20 81       	ld	r18, Z
    7cbe:	42 2f       	mov	r20, r18
    7cc0:	29 81       	ldd	r18, Y+1	; 0x01
    7cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    7cc4:	f9 01       	movw	r30, r18
    7cc6:	24 81       	ldd	r18, Z+4	; 0x04
    7cc8:	20 95       	com	r18
    7cca:	24 23       	and	r18, r20
    7ccc:	fc 01       	movw	r30, r24
    7cce:	20 83       	st	Z, r18
    7cd0:	89 81       	ldd	r24, Y+1	; 0x01
    7cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    7cd4:	fc 01       	movw	r30, r24
    7cd6:	82 81       	ldd	r24, Z+2	; 0x02
    7cd8:	93 81       	ldd	r25, Z+3	; 0x03
    7cda:	37 dd       	rcall	.-1426   	; 0x774a <sysclk_enable_peripheral_clock>
    7cdc:	89 81       	ldd	r24, Y+1	; 0x01
    7cde:	9a 81       	ldd	r25, Y+2	; 0x02
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	82 81       	ldd	r24, Z+2	; 0x02
    7ce4:	93 81       	ldd	r25, Z+3	; 0x03
    7ce6:	66 e0       	ldi	r22, 0x06	; 6
    7ce8:	70 e2       	ldi	r23, 0x20	; 32
    7cea:	c7 de       	rcall	.-626    	; 0x7a7a <usart_serial_init>
    7cec:	00 00       	nop
    7cee:	0f 90       	pop	r0
    7cf0:	0f 90       	pop	r0
    7cf2:	df 91       	pop	r29
    7cf4:	cf 91       	pop	r28
    7cf6:	08 95       	ret

00007cf8 <uart_terminal_init>:

void uart_terminal_init()
{
    7cf8:	cf 93       	push	r28
    7cfa:	df 93       	push	r29
    7cfc:	cd b7       	in	r28, 0x3d	; 61
    7cfe:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    7d00:	80 ea       	ldi	r24, 0xA0	; 160
    7d02:	9a e0       	ldi	r25, 0x0A	; 10
    7d04:	22 dd       	rcall	.-1468   	; 0x774a <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    7d06:	80 e8       	ldi	r24, 0x80	; 128
    7d08:	96 e0       	ldi	r25, 0x06	; 6
    7d0a:	20 e8       	ldi	r18, 0x80	; 128
    7d0c:	36 e0       	ldi	r19, 0x06	; 6
    7d0e:	f9 01       	movw	r30, r18
    7d10:	20 81       	ld	r18, Z
    7d12:	28 60       	ori	r18, 0x08	; 8
    7d14:	fc 01       	movw	r30, r24
    7d16:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    7d18:	6d e0       	ldi	r22, 0x0D	; 13
    7d1a:	70 e2       	ldi	r23, 0x20	; 32
    7d1c:	80 ea       	ldi	r24, 0xA0	; 160
    7d1e:	9a e0       	ldi	r25, 0x0A	; 10
    7d20:	56 df       	rcall	.-340    	; 0x7bce <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    7d22:	8d ee       	ldi	r24, 0xED	; 237
    7d24:	91 e2       	ldi	r25, 0x21	; 33
    7d26:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
		printf("UART Initialized\n");
    7d2a:	82 e1       	ldi	r24, 0x12	; 18
    7d2c:	92 e2       	ldi	r25, 0x22	; 34
    7d2e:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <puts>
	}
}
    7d32:	00 00       	nop
    7d34:	df 91       	pop	r29
    7d36:	cf 91       	pop	r28
    7d38:	08 95       	ret

00007d3a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    7d3a:	cf 93       	push	r28
    7d3c:	df 93       	push	r29
    7d3e:	cd b7       	in	r28, 0x3d	; 61
    7d40:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    7d42:	80 e0       	ldi	r24, 0x00	; 0
    7d44:	98 e4       	ldi	r25, 0x48	; 72
    7d46:	a8 ee       	ldi	r26, 0xE8	; 232
    7d48:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    7d4a:	bc 01       	movw	r22, r24
    7d4c:	cd 01       	movw	r24, r26
    7d4e:	df 91       	pop	r29
    7d50:	cf 91       	pop	r28
    7d52:	08 95       	ret

00007d54 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    7d54:	cf 93       	push	r28
    7d56:	df 93       	push	r29
    7d58:	1f 92       	push	r1
    7d5a:	cd b7       	in	r28, 0x3d	; 61
    7d5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    7d5e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    7d60:	ec df       	rcall	.-40     	; 0x7d3a <sysclk_get_main_hz>
    7d62:	dc 01       	movw	r26, r24
    7d64:	cb 01       	movw	r24, r22
    7d66:	29 81       	ldd	r18, Y+1	; 0x01
    7d68:	22 2f       	mov	r18, r18
    7d6a:	30 e0       	ldi	r19, 0x00	; 0
    7d6c:	04 c0       	rjmp	.+8      	; 0x7d76 <sysclk_get_per4_hz+0x22>
    7d6e:	b6 95       	lsr	r27
    7d70:	a7 95       	ror	r26
    7d72:	97 95       	ror	r25
    7d74:	87 95       	ror	r24
    7d76:	2a 95       	dec	r18
    7d78:	d2 f7       	brpl	.-12     	; 0x7d6e <sysclk_get_per4_hz+0x1a>
}
    7d7a:	bc 01       	movw	r22, r24
    7d7c:	cd 01       	movw	r24, r26
    7d7e:	0f 90       	pop	r0
    7d80:	df 91       	pop	r29
    7d82:	cf 91       	pop	r28
    7d84:	08 95       	ret

00007d86 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    7d86:	cf 93       	push	r28
    7d88:	df 93       	push	r29
    7d8a:	cd b7       	in	r28, 0x3d	; 61
    7d8c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    7d8e:	e2 df       	rcall	.-60     	; 0x7d54 <sysclk_get_per4_hz>
    7d90:	dc 01       	movw	r26, r24
    7d92:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    7d94:	bc 01       	movw	r22, r24
    7d96:	cd 01       	movw	r24, r26
    7d98:	df 91       	pop	r29
    7d9a:	cf 91       	pop	r28
    7d9c:	08 95       	ret

00007d9e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    7d9e:	cf 93       	push	r28
    7da0:	df 93       	push	r29
    7da2:	cd b7       	in	r28, 0x3d	; 61
    7da4:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    7da6:	ef df       	rcall	.-34     	; 0x7d86 <sysclk_get_per2_hz>
    7da8:	dc 01       	movw	r26, r24
    7daa:	cb 01       	movw	r24, r22
}
    7dac:	bc 01       	movw	r22, r24
    7dae:	cd 01       	movw	r24, r26
    7db0:	df 91       	pop	r29
    7db2:	cf 91       	pop	r28
    7db4:	08 95       	ret

00007db6 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    7db6:	cf 93       	push	r28
    7db8:	df 93       	push	r29
    7dba:	cd b7       	in	r28, 0x3d	; 61
    7dbc:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    7dbe:	ef df       	rcall	.-34     	; 0x7d9e <sysclk_get_per_hz>
    7dc0:	dc 01       	movw	r26, r24
    7dc2:	cb 01       	movw	r24, r22
}
    7dc4:	bc 01       	movw	r22, r24
    7dc6:	cd 01       	movw	r24, r26
    7dc8:	df 91       	pop	r29
    7dca:	cf 91       	pop	r28
    7dcc:	08 95       	ret

00007dce <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    7dce:	04 c0       	rjmp	.+8      	; 0x7dd8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    7dd0:	61 50       	subi	r22, 0x01	; 1
    7dd2:	71 09       	sbc	r23, r1
    7dd4:	81 09       	sbc	r24, r1
    7dd6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    7dd8:	61 15       	cp	r22, r1
    7dda:	71 05       	cpc	r23, r1
    7ddc:	81 05       	cpc	r24, r1
    7dde:	91 05       	cpc	r25, r1
    7de0:	b9 f7       	brne	.-18     	; 0x7dd0 <__portable_avr_delay_cycles+0x2>
    7de2:	08 95       	ret

00007de4 <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    7de4:	cf 93       	push	r28
    7de6:	df 93       	push	r29
    7de8:	cd b7       	in	r28, 0x3d	; 61
    7dea:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    7dec:	80 ea       	ldi	r24, 0xA0	; 160
    7dee:	90 e0       	ldi	r25, 0x00	; 0
    7df0:	27 e0       	ldi	r18, 0x07	; 7
    7df2:	fc 01       	movw	r30, r24
    7df4:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    7df6:	00 00       	nop
    7df8:	df 91       	pop	r29
    7dfa:	cf 91       	pop	r28
    7dfc:	08 95       	ret

00007dfe <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    7dfe:	cf 93       	push	r28
    7e00:	df 93       	push	r29
    7e02:	1f 92       	push	r1
    7e04:	cd b7       	in	r28, 0x3d	; 61
    7e06:	de b7       	in	r29, 0x3e	; 62
    7e08:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    7e0a:	89 81       	ldd	r24, Y+1	; 0x01
    7e0c:	88 2f       	mov	r24, r24
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	00 97       	sbiw	r24, 0x00	; 0
    7e12:	19 f0       	breq	.+6      	; 0x7e1a <pmic_set_scheduling+0x1c>
    7e14:	01 97       	sbiw	r24, 0x01	; 1
    7e16:	79 f0       	breq	.+30     	; 0x7e36 <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    7e18:	18 c0       	rjmp	.+48     	; 0x7e4a <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    7e1a:	80 ea       	ldi	r24, 0xA0	; 160
    7e1c:	90 e0       	ldi	r25, 0x00	; 0
    7e1e:	20 ea       	ldi	r18, 0xA0	; 160
    7e20:	30 e0       	ldi	r19, 0x00	; 0
    7e22:	f9 01       	movw	r30, r18
    7e24:	22 81       	ldd	r18, Z+2	; 0x02
    7e26:	2f 77       	andi	r18, 0x7F	; 127
    7e28:	fc 01       	movw	r30, r24
    7e2a:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    7e2c:	80 ea       	ldi	r24, 0xA0	; 160
    7e2e:	90 e0       	ldi	r25, 0x00	; 0
    7e30:	fc 01       	movw	r30, r24
    7e32:	11 82       	std	Z+1, r1	; 0x01
		break;
    7e34:	0a c0       	rjmp	.+20     	; 0x7e4a <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    7e36:	80 ea       	ldi	r24, 0xA0	; 160
    7e38:	90 e0       	ldi	r25, 0x00	; 0
    7e3a:	20 ea       	ldi	r18, 0xA0	; 160
    7e3c:	30 e0       	ldi	r19, 0x00	; 0
    7e3e:	f9 01       	movw	r30, r18
    7e40:	22 81       	ldd	r18, Z+2	; 0x02
    7e42:	20 68       	ori	r18, 0x80	; 128
    7e44:	fc 01       	movw	r30, r24
    7e46:	22 83       	std	Z+2, r18	; 0x02
		break;
    7e48:	00 00       	nop

	default:
		break;
	};
}
    7e4a:	00 00       	nop
    7e4c:	0f 90       	pop	r0
    7e4e:	df 91       	pop	r29
    7e50:	cf 91       	pop	r28
    7e52:	08 95       	ret

00007e54 <main>:


void print_calibration_data(void);

int main (void)
{
    7e54:	2f 92       	push	r2
    7e56:	3f 92       	push	r3
    7e58:	4f 92       	push	r4
    7e5a:	5f 92       	push	r5
    7e5c:	6f 92       	push	r6
    7e5e:	7f 92       	push	r7
    7e60:	8f 92       	push	r8
    7e62:	9f 92       	push	r9
    7e64:	af 92       	push	r10
    7e66:	bf 92       	push	r11
    7e68:	cf 92       	push	r12
    7e6a:	df 92       	push	r13
    7e6c:	ef 92       	push	r14
    7e6e:	ff 92       	push	r15
    7e70:	0f 93       	push	r16
    7e72:	1f 93       	push	r17
    7e74:	cf 93       	push	r28
    7e76:	df 93       	push	r29
    7e78:	cd b7       	in	r28, 0x3d	; 61
    7e7a:	de b7       	in	r29, 0x3e	; 62
    7e7c:	61 97       	sbiw	r28, 0x11	; 17
    7e7e:	cd bf       	out	0x3d, r28	; 61
    7e80:	de bf       	out	0x3e, r29	; 62
	board_init();
    7e82:	53 dc       	rcall	.-1882   	; 0x772a <board_init>
	sysclk_init();
    7e84:	0e 94 aa 21 	call	0x4354	; 0x4354 <sysclk_init>
	rtc_init();
    7e88:	0e 94 4a 23 	call	0x4694	; 0x4694 <rtc_init>
	
	packetCount = 0;
    7e8c:	10 92 ea 22 	sts	0x22EA, r1	; 0x8022ea <packetCount>
    7e90:	10 92 eb 22 	sts	0x22EB, r1	; 0x8022eb <packetCount+0x1>
    7e94:	10 92 ec 22 	sts	0x22EC, r1	; 0x8022ec <packetCount+0x2>
    7e98:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <packetCount+0x3>
	missionTime = rtc_get_time();
    7e9c:	0e 94 f7 22 	call	0x45ee	; 0x45ee <rtc_get_time>
    7ea0:	dc 01       	movw	r26, r24
    7ea2:	cb 01       	movw	r24, r22
    7ea4:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <missionTime>
    7ea8:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <missionTime+0x1>
    7eac:	a0 93 df 22 	sts	0x22DF, r26	; 0x8022df <missionTime+0x2>
    7eb0:	b0 93 e0 22 	sts	0x22E0, r27	; 0x8022e0 <missionTime+0x3>
	printf("%u", missionTime >> 16);
    7eb4:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <missionTime>
    7eb8:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <missionTime+0x1>
    7ebc:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <missionTime+0x2>
    7ec0:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <missionTime+0x3>
    7ec4:	cd 01       	movw	r24, r26
    7ec6:	aa 27       	eor	r26, r26
    7ec8:	bb 27       	eor	r27, r27
    7eca:	2b 2f       	mov	r18, r27
    7ecc:	2f 93       	push	r18
    7ece:	2a 2f       	mov	r18, r26
    7ed0:	2f 93       	push	r18
    7ed2:	29 2f       	mov	r18, r25
    7ed4:	2f 93       	push	r18
    7ed6:	8f 93       	push	r24
    7ed8:	83 e2       	ldi	r24, 0x23	; 35
    7eda:	92 e2       	ldi	r25, 0x22	; 34
    7edc:	89 2f       	mov	r24, r25
    7ede:	8f 93       	push	r24
    7ee0:	83 e2       	ldi	r24, 0x23	; 35
    7ee2:	92 e2       	ldi	r25, 0x22	; 34
    7ee4:	8f 93       	push	r24
    7ee6:	0e 94 9a 4e 	call	0x9d34	; 0x9d34 <printf>
    7eea:	0f 90       	pop	r0
    7eec:	0f 90       	pop	r0
    7eee:	0f 90       	pop	r0
    7ef0:	0f 90       	pop	r0
    7ef2:	0f 90       	pop	r0
		wdt_enable();
	}
	

	
	uart_terminal_init();
    7ef4:	0f 90       	pop	r0
    7ef6:	00 df       	rcall	.-512    	; 0x7cf8 <uart_terminal_init>
	newOLogInit();
    7ef8:	0e 94 9a 20 	call	0x4134	; 0x4134 <newOLogInit>
		

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    7efc:	73 df       	rcall	.-282    	; 0x7de4 <pmic_init>
    7efe:	81 e0       	ldi	r24, 0x01	; 1
	cpu_irq_enable();
    7f00:	7e df       	rcall	.-260    	; 0x7dfe <pmic_set_scheduling>

	
	imu_init();
    7f02:	78 94       	sei
    7f04:	0e 94 45 1c 	call	0x388a	; 0x388a <imu_init>
	delay_s(1);
    7f08:	56 df       	rcall	.-340    	; 0x7db6 <sysclk_get_cpu_hz>
    7f0a:	dc 01       	movw	r26, r24
    7f0c:	cb 01       	movw	r24, r22
    7f0e:	8c 01       	movw	r16, r24
    7f10:	9d 01       	movw	r18, r26
    7f12:	40 e0       	ldi	r20, 0x00	; 0
    7f14:	50 e0       	ldi	r21, 0x00	; 0
    7f16:	ba 01       	movw	r22, r20
    7f18:	0a 83       	std	Y+2, r16	; 0x02
    7f1a:	1b 83       	std	Y+3, r17	; 0x03
    7f1c:	2c 83       	std	Y+4, r18	; 0x04
    7f1e:	3d 83       	std	Y+5, r19	; 0x05
    7f20:	4e 83       	std	Y+6, r20	; 0x06
    7f22:	5f 83       	std	Y+7, r21	; 0x07
    7f24:	68 87       	std	Y+8, r22	; 0x08
    7f26:	79 87       	std	Y+9, r23	; 0x09
    7f28:	2a 80       	ldd	r2, Y+2	; 0x02
    7f2a:	3b 80       	ldd	r3, Y+3	; 0x03
    7f2c:	4c 80       	ldd	r4, Y+4	; 0x04
    7f2e:	5d 80       	ldd	r5, Y+5	; 0x05
    7f30:	6e 80       	ldd	r6, Y+6	; 0x06
    7f32:	7f 80       	ldd	r7, Y+7	; 0x07
    7f34:	88 84       	ldd	r8, Y+8	; 0x08
    7f36:	99 84       	ldd	r9, Y+9	; 0x09
    7f38:	22 2d       	mov	r18, r2
    7f3a:	33 2d       	mov	r19, r3
    7f3c:	44 2d       	mov	r20, r4
    7f3e:	55 2d       	mov	r21, r5
    7f40:	66 2d       	mov	r22, r6
    7f42:	77 2d       	mov	r23, r7
    7f44:	88 2d       	mov	r24, r8
    7f46:	99 2d       	mov	r25, r9
    7f48:	02 e0       	ldi	r16, 0x02	; 2
    7f4a:	0e 94 b9 4b 	call	0x9772	; 0x9772 <__ashldi3>
    7f4e:	a2 2e       	mov	r10, r18
    7f50:	b3 2e       	mov	r11, r19
    7f52:	c4 2e       	mov	r12, r20
    7f54:	d5 2e       	mov	r13, r21
    7f56:	e6 2e       	mov	r14, r22
    7f58:	f7 2e       	mov	r15, r23
    7f5a:	08 2f       	mov	r16, r24
    7f5c:	19 2f       	mov	r17, r25
    7f5e:	2a 2c       	mov	r2, r10
    7f60:	3b 2c       	mov	r3, r11
    7f62:	4c 2c       	mov	r4, r12
    7f64:	5d 2c       	mov	r5, r13
    7f66:	6e 2c       	mov	r6, r14
    7f68:	7f 2c       	mov	r7, r15
    7f6a:	80 2e       	mov	r8, r16
    7f6c:	91 2e       	mov	r9, r17
    7f6e:	22 2d       	mov	r18, r2
    7f70:	33 2d       	mov	r19, r3
    7f72:	44 2d       	mov	r20, r4
    7f74:	55 2d       	mov	r21, r5
    7f76:	66 2d       	mov	r22, r6
    7f78:	77 2d       	mov	r23, r7
    7f7a:	88 2d       	mov	r24, r8
    7f7c:	99 2d       	mov	r25, r9
    7f7e:	05 e0       	ldi	r16, 0x05	; 5
    7f80:	0e 94 b9 4b 	call	0x9772	; 0x9772 <__ashldi3>
    7f84:	a2 2e       	mov	r10, r18
    7f86:	b3 2e       	mov	r11, r19
    7f88:	c4 2e       	mov	r12, r20
    7f8a:	d5 2e       	mov	r13, r21
    7f8c:	e6 2e       	mov	r14, r22
    7f8e:	f7 2e       	mov	r15, r23
    7f90:	08 2f       	mov	r16, r24
    7f92:	19 2f       	mov	r17, r25
    7f94:	2a 2d       	mov	r18, r10
    7f96:	3b 2d       	mov	r19, r11
    7f98:	4c 2d       	mov	r20, r12
    7f9a:	5d 2d       	mov	r21, r13
    7f9c:	6e 2d       	mov	r22, r14
    7f9e:	7f 2d       	mov	r23, r15
    7fa0:	80 2f       	mov	r24, r16
    7fa2:	91 2f       	mov	r25, r17
    7fa4:	a2 2c       	mov	r10, r2
    7fa6:	b3 2c       	mov	r11, r3
    7fa8:	c4 2c       	mov	r12, r4
    7faa:	d5 2c       	mov	r13, r5
    7fac:	e6 2c       	mov	r14, r6
    7fae:	f7 2c       	mov	r15, r7
    7fb0:	08 2d       	mov	r16, r8
    7fb2:	19 2d       	mov	r17, r9
    7fb4:	0e 94 db 4b 	call	0x97b6	; 0x97b6 <__subdi3>
    7fb8:	a2 2e       	mov	r10, r18
    7fba:	b3 2e       	mov	r11, r19
    7fbc:	c4 2e       	mov	r12, r20
    7fbe:	d5 2e       	mov	r13, r21
    7fc0:	e6 2e       	mov	r14, r22
    7fc2:	f7 2e       	mov	r15, r23
    7fc4:	08 2f       	mov	r16, r24
    7fc6:	19 2f       	mov	r17, r25
    7fc8:	2a 2d       	mov	r18, r10
    7fca:	3b 2d       	mov	r19, r11
    7fcc:	4c 2d       	mov	r20, r12
    7fce:	5d 2d       	mov	r21, r13
    7fd0:	6e 2d       	mov	r22, r14
    7fd2:	7f 2d       	mov	r23, r15
    7fd4:	80 2f       	mov	r24, r16
    7fd6:	91 2f       	mov	r25, r17
    7fd8:	aa 80       	ldd	r10, Y+2	; 0x02
    7fda:	bb 80       	ldd	r11, Y+3	; 0x03
    7fdc:	cc 80       	ldd	r12, Y+4	; 0x04
    7fde:	dd 80       	ldd	r13, Y+5	; 0x05
    7fe0:	ee 80       	ldd	r14, Y+6	; 0x06
    7fe2:	ff 80       	ldd	r15, Y+7	; 0x07
    7fe4:	08 85       	ldd	r16, Y+8	; 0x08
    7fe6:	19 85       	ldd	r17, Y+9	; 0x09
    7fe8:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <__adddi3>
    7fec:	a2 2e       	mov	r10, r18
    7fee:	b3 2e       	mov	r11, r19
    7ff0:	c4 2e       	mov	r12, r20
    7ff2:	d5 2e       	mov	r13, r21
    7ff4:	e6 2e       	mov	r14, r22
    7ff6:	f7 2e       	mov	r15, r23
    7ff8:	08 2f       	mov	r16, r24
    7ffa:	19 2f       	mov	r17, r25
    7ffc:	2a 2d       	mov	r18, r10
    7ffe:	3b 2d       	mov	r19, r11
    8000:	4c 2d       	mov	r20, r12
    8002:	5d 2d       	mov	r21, r13
    8004:	6e 2d       	mov	r22, r14
    8006:	7f 2d       	mov	r23, r15
    8008:	80 2f       	mov	r24, r16
    800a:	91 2f       	mov	r25, r17
    800c:	03 e0       	ldi	r16, 0x03	; 3
    800e:	0e 94 b9 4b 	call	0x9772	; 0x9772 <__ashldi3>
    8012:	22 2e       	mov	r2, r18
    8014:	33 2e       	mov	r3, r19
    8016:	44 2e       	mov	r4, r20
    8018:	55 2e       	mov	r5, r21
    801a:	66 2e       	mov	r6, r22
    801c:	77 2e       	mov	r7, r23
    801e:	88 2e       	mov	r8, r24
    8020:	99 2e       	mov	r9, r25
    8022:	a2 2c       	mov	r10, r2
    8024:	b3 2c       	mov	r11, r3
    8026:	c4 2c       	mov	r12, r4
    8028:	d5 2c       	mov	r13, r5
    802a:	e6 2c       	mov	r14, r6
    802c:	f7 2c       	mov	r15, r7
    802e:	08 2d       	mov	r16, r8
    8030:	19 2d       	mov	r17, r9
    8032:	2a 2c       	mov	r2, r10
    8034:	3b 2c       	mov	r3, r11
    8036:	4c 2c       	mov	r4, r12
    8038:	5d 2c       	mov	r5, r13
    803a:	6e 2c       	mov	r6, r14
    803c:	7f 2c       	mov	r7, r15
    803e:	80 2e       	mov	r8, r16
    8040:	91 2e       	mov	r9, r17
    8042:	0f 2e       	mov	r0, r31
    8044:	f6 e0       	ldi	r31, 0x06	; 6
    8046:	af 2e       	mov	r10, r31
    8048:	f0 2d       	mov	r31, r0
    804a:	b1 2c       	mov	r11, r1
    804c:	c1 2c       	mov	r12, r1
    804e:	d1 2c       	mov	r13, r1
    8050:	e1 2c       	mov	r14, r1
    8052:	f1 2c       	mov	r15, r1
    8054:	00 e0       	ldi	r16, 0x00	; 0
    8056:	10 e0       	ldi	r17, 0x00	; 0
    8058:	22 2d       	mov	r18, r2
    805a:	33 2d       	mov	r19, r3
    805c:	44 2d       	mov	r20, r4
    805e:	55 2d       	mov	r21, r5
    8060:	66 2d       	mov	r22, r6
    8062:	77 2d       	mov	r23, r7
    8064:	88 2d       	mov	r24, r8
    8066:	99 2d       	mov	r25, r9
    8068:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__udivdi3>
    806c:	22 2e       	mov	r2, r18
    806e:	33 2e       	mov	r3, r19
    8070:	44 2e       	mov	r4, r20
    8072:	55 2e       	mov	r5, r21
    8074:	66 2e       	mov	r6, r22
    8076:	77 2e       	mov	r7, r23
    8078:	88 2e       	mov	r8, r24
    807a:	99 2e       	mov	r9, r25
    807c:	a2 2c       	mov	r10, r2
    807e:	b3 2c       	mov	r11, r3
    8080:	c4 2c       	mov	r12, r4
    8082:	d5 2c       	mov	r13, r5
    8084:	e6 2c       	mov	r14, r6
    8086:	f7 2c       	mov	r15, r7
    8088:	08 2d       	mov	r16, r8
    808a:	19 2d       	mov	r17, r9
    808c:	2a 2d       	mov	r18, r10
    808e:	3b 2d       	mov	r19, r11
    8090:	4c 2d       	mov	r20, r12
    8092:	5d 2d       	mov	r21, r13
    8094:	6e 2d       	mov	r22, r14
    8096:	7f 2d       	mov	r23, r15
    8098:	80 2f       	mov	r24, r16
    809a:	91 2f       	mov	r25, r17
    809c:	29 51       	subi	r18, 0x19	; 25
    809e:	3c 4f       	sbci	r19, 0xFC	; 252
    80a0:	4f 4f       	sbci	r20, 0xFF	; 255
    80a2:	5f 4f       	sbci	r21, 0xFF	; 255
    80a4:	6f 4f       	sbci	r22, 0xFF	; 255
    80a6:	7f 4f       	sbci	r23, 0xFF	; 255
    80a8:	8f 4f       	sbci	r24, 0xFF	; 255
    80aa:	9f 4f       	sbci	r25, 0xFF	; 255
    80ac:	a2 2e       	mov	r10, r18
    80ae:	b3 2e       	mov	r11, r19
    80b0:	c4 2e       	mov	r12, r20
    80b2:	d5 2e       	mov	r13, r21
    80b4:	e6 2e       	mov	r14, r22
    80b6:	f7 2e       	mov	r15, r23
    80b8:	08 2f       	mov	r16, r24
    80ba:	19 2f       	mov	r17, r25
    80bc:	2a 2d       	mov	r18, r10
    80be:	3b 2d       	mov	r19, r11
    80c0:	4c 2d       	mov	r20, r12
    80c2:	5d 2d       	mov	r21, r13
    80c4:	6e 2d       	mov	r22, r14
    80c6:	7f 2d       	mov	r23, r15
    80c8:	80 2f       	mov	r24, r16
    80ca:	91 2f       	mov	r25, r17
    80cc:	46 d5       	rcall	.+2700   	; 0x8b5a <__floatundisf>
    80ce:	dc 01       	movw	r26, r24
    80d0:	cb 01       	movw	r24, r22
    80d2:	20 e0       	ldi	r18, 0x00	; 0
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	4a e7       	ldi	r20, 0x7A	; 122
    80d8:	54 e4       	ldi	r21, 0x44	; 68
    80da:	bc 01       	movw	r22, r24
    80dc:	cd 01       	movw	r24, r26
    80de:	32 d4       	rcall	.+2148   	; 0x8944 <__divsf3>
    80e0:	dc 01       	movw	r26, r24
    80e2:	cb 01       	movw	r24, r22
    80e4:	bc 01       	movw	r22, r24
    80e6:	cd 01       	movw	r24, r26
    80e8:	9a d4       	rcall	.+2356   	; 0x8a1e <__fixunssfdi>
    80ea:	a2 2e       	mov	r10, r18
    80ec:	b3 2e       	mov	r11, r19
    80ee:	c4 2e       	mov	r12, r20
    80f0:	d5 2e       	mov	r13, r21
    80f2:	e6 2e       	mov	r14, r22
    80f4:	f7 2e       	mov	r15, r23
    80f6:	08 2f       	mov	r16, r24
    80f8:	19 2f       	mov	r17, r25
    80fa:	d6 01       	movw	r26, r12
    80fc:	c5 01       	movw	r24, r10
    80fe:	bc 01       	movw	r22, r24
    8100:	cd 01       	movw	r24, r26
    8102:	65 de       	rcall	.-822    	; 0x7dce <__portable_avr_delay_cycles>
	xbee_init();
    8104:	0e 94 02 20 	call	0x4004	; 0x4004 <xbee_init>
	servo_init();
    8108:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <servo_init>
	thermistor_init();
    810c:	0e 94 03 11 	call	0x2206	; 0x2206 <thermistor_init>
	volt_init();
    8110:	0e 94 13 11 	call	0x2226	; 0x2226 <volt_init>
	
	
	
	uint8_t data;

	uint8_t servoPos = 0;
    8114:	19 82       	std	Y+1, r1	; 0x01
	set_servo(0);
    8116:	80 e0       	ldi	r24, 0x00	; 0
    8118:	90 e0       	ldi	r25, 0x00	; 0
    811a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <set_servo>
	buzz_on();
    811e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <buzz_on>
	buzz_off();
    8122:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <buzz_off>
	while (1) 
	{
		imu_update();
    8126:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <imu_update>
		
		//printf("Pitch: %i\nRoll: %i\nYaw: %i\n",(int)imu_pitch(), (int)imu_roll(), (int)imu_heading());
		//printf("CALBRATION STATUSES:  Accel: %u, Gyro: %u, Mag: %u, Sys: %u\n", imu_accel_cal(), imu_gyro_cal(), imu_mag_cal(), imu_sys_cal());

		//Get Telemetry
		missionTime = rtc_get_time();
    812a:	0e 94 f7 22 	call	0x45ee	; 0x45ee <rtc_get_time>
    812e:	dc 01       	movw	r26, r24
    8130:	cb 01       	movw	r24, r22
    8132:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <missionTime>
    8136:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <missionTime+0x1>
    813a:	a0 93 df 22 	sts	0x22DF, r26	; 0x8022df <missionTime+0x2>
    813e:	b0 93 e0 22 	sts	0x22E0, r27	; 0x8022e0 <missionTime+0x3>
		packetCount++;
    8142:	80 91 ea 22 	lds	r24, 0x22EA	; 0x8022ea <packetCount>
    8146:	90 91 eb 22 	lds	r25, 0x22EB	; 0x8022eb <packetCount+0x1>
    814a:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <packetCount+0x2>
    814e:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <packetCount+0x3>
    8152:	01 96       	adiw	r24, 0x01	; 1
    8154:	a1 1d       	adc	r26, r1
    8156:	b1 1d       	adc	r27, r1
    8158:	80 93 ea 22 	sts	0x22EA, r24	; 0x8022ea <packetCount>
    815c:	90 93 eb 22 	sts	0x22EB, r25	; 0x8022eb <packetCount+0x1>
    8160:	a0 93 ec 22 	sts	0x22EC, r26	; 0x8022ec <packetCount+0x2>
    8164:	b0 93 ed 22 	sts	0x22ED, r27	; 0x8022ed <packetCount+0x3>
		//pressure = getPressure();
		altitude = pressure / 9000; // TODO: finish function
    8168:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <pressure>
    816c:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <pressure+0x1>
    8170:	a0 91 e7 22 	lds	r26, 0x22E7	; 0x8022e7 <pressure+0x2>
    8174:	b0 91 e8 22 	lds	r27, 0x22E8	; 0x8022e8 <pressure+0x3>
    8178:	28 e2       	ldi	r18, 0x28	; 40
    817a:	33 e2       	ldi	r19, 0x23	; 35
    817c:	40 e0       	ldi	r20, 0x00	; 0
    817e:	50 e0       	ldi	r21, 0x00	; 0
    8180:	bc 01       	movw	r22, r24
    8182:	cd 01       	movw	r24, r26
    8184:	0e 94 db 4a 	call	0x95b6	; 0x95b6 <__divmodsi4>
    8188:	da 01       	movw	r26, r20
    818a:	c9 01       	movw	r24, r18
    818c:	bc 01       	movw	r22, r24
    818e:	cd 01       	movw	r24, r26
    8190:	a9 d4       	rcall	.+2386   	; 0x8ae4 <__floatsisf>
    8192:	dc 01       	movw	r26, r24
    8194:	cb 01       	movw	r24, r22
    8196:	80 93 ee 22 	sts	0x22EE, r24	; 0x8022ee <altitude>
    819a:	90 93 ef 22 	sts	0x22EF, r25	; 0x8022ef <altitude+0x1>
    819e:	a0 93 f0 22 	sts	0x22F0, r26	; 0x8022f0 <altitude+0x2>
    81a2:	b0 93 f1 22 	sts	0x22F1, r27	; 0x8022f1 <altitude+0x3>
		temp = getTemperature();	
    81a6:	0e 94 b2 11 	call	0x2364	; 0x2364 <getTemperature>
    81aa:	dc 01       	movw	r26, r24
    81ac:	cb 01       	movw	r24, r22
    81ae:	80 93 d9 22 	sts	0x22D9, r24	; 0x8022d9 <temp>
    81b2:	90 93 da 22 	sts	0x22DA, r25	; 0x8022da <temp+0x1>
    81b6:	a0 93 db 22 	sts	0x22DB, r26	; 0x8022db <temp+0x2>
    81ba:	b0 93 dc 22 	sts	0x22DC, r27	; 0x8022dc <temp+0x3>
		voltage = getVoltage();
    81be:	0e 94 84 11 	call	0x2308	; 0x2308 <getVoltage>
    81c2:	dc 01       	movw	r26, r24
    81c4:	cb 01       	movw	r24, r22
    81c6:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <voltage>
    81ca:	90 93 e2 22 	sts	0x22E2, r25	; 0x8022e2 <voltage+0x1>
    81ce:	a0 93 e3 22 	sts	0x22E3, r26	; 0x8022e3 <voltage+0x2>
    81d2:	b0 93 e4 22 	sts	0x22E4, r27	; 0x8022e4 <voltage+0x3>

		set_servo(servoPos);
    81d6:	89 81       	ldd	r24, Y+1	; 0x01
    81d8:	88 2f       	mov	r24, r24
    81da:	90 e0       	ldi	r25, 0x00	; 0
    81dc:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <set_servo>
		servoPos +=100;
    81e0:	89 81       	ldd	r24, Y+1	; 0x01
    81e2:	8c 59       	subi	r24, 0x9C	; 156
    81e4:	89 83       	std	Y+1, r24	; 0x01
		pitch = imu_pitch();
    81e6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <imu_pitch>
    81ea:	dc 01       	movw	r26, r24
    81ec:	cb 01       	movw	r24, r22
    81ee:	80 93 f2 22 	sts	0x22F2, r24	; 0x8022f2 <pitch>
    81f2:	90 93 f3 22 	sts	0x22F3, r25	; 0x8022f3 <pitch+0x1>
    81f6:	a0 93 f4 22 	sts	0x22F4, r26	; 0x8022f4 <pitch+0x2>
    81fa:	b0 93 f5 22 	sts	0x22F5, r27	; 0x8022f5 <pitch+0x3>
		roll = imu_roll();
    81fe:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <imu_roll>
    8202:	dc 01       	movw	r26, r24
    8204:	cb 01       	movw	r24, r22
    8206:	80 93 f6 22 	sts	0x22F6, r24	; 0x8022f6 <roll>
    820a:	90 93 f7 22 	sts	0x22F7, r25	; 0x8022f7 <roll+0x1>
    820e:	a0 93 f8 22 	sts	0x22F8, r26	; 0x8022f8 <roll+0x2>
    8212:	b0 93 f9 22 	sts	0x22F9, r27	; 0x8022f9 <roll+0x3>
		heading = imu_heading();
    8216:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <imu_heading>
    821a:	dc 01       	movw	r26, r24
    821c:	cb 01       	movw	r24, r22
    821e:	80 93 fa 22 	sts	0x22FA, r24	; 0x8022fa <heading>
    8222:	90 93 fb 22 	sts	0x22FB, r25	; 0x8022fb <heading+0x1>
    8226:	a0 93 fc 22 	sts	0x22FC, r26	; 0x8022fc <heading+0x2>
		
		
		write_telem_to_xbee();
    822a:	b0 93 fd 22 	sts	0x22FD, r27	; 0x8022fd <heading+0x3>
		
		
		
		delay_ms(1000);
    822e:	ff d0       	rcall	.+510    	; 0x842e <write_telem_to_xbee>
    8230:	c2 dd       	rcall	.-1148   	; 0x7db6 <sysclk_get_cpu_hz>
    8232:	dc 01       	movw	r26, r24
    8234:	cb 01       	movw	r24, r22
    8236:	8c 01       	movw	r16, r24
    8238:	9d 01       	movw	r18, r26
    823a:	40 e0       	ldi	r20, 0x00	; 0
    823c:	50 e0       	ldi	r21, 0x00	; 0
    823e:	ba 01       	movw	r22, r20
    8240:	0a 87       	std	Y+10, r16	; 0x0a
    8242:	1b 87       	std	Y+11, r17	; 0x0b
    8244:	2c 87       	std	Y+12, r18	; 0x0c
    8246:	3d 87       	std	Y+13, r19	; 0x0d
    8248:	4e 87       	std	Y+14, r20	; 0x0e
    824a:	5f 87       	std	Y+15, r21	; 0x0f
    824c:	68 8b       	std	Y+16, r22	; 0x10
    824e:	79 8b       	std	Y+17, r23	; 0x11
    8250:	2a 84       	ldd	r2, Y+10	; 0x0a
    8252:	3b 84       	ldd	r3, Y+11	; 0x0b
    8254:	4c 84       	ldd	r4, Y+12	; 0x0c
    8256:	5d 84       	ldd	r5, Y+13	; 0x0d
    8258:	6e 84       	ldd	r6, Y+14	; 0x0e
    825a:	7f 84       	ldd	r7, Y+15	; 0x0f
    825c:	88 88       	ldd	r8, Y+16	; 0x10
    825e:	99 88       	ldd	r9, Y+17	; 0x11
    8260:	22 2d       	mov	r18, r2
    8262:	33 2d       	mov	r19, r3
    8264:	44 2d       	mov	r20, r4
    8266:	55 2d       	mov	r21, r5
    8268:	66 2d       	mov	r22, r6
    826a:	77 2d       	mov	r23, r7
    826c:	88 2d       	mov	r24, r8
    826e:	99 2d       	mov	r25, r9
    8270:	02 e0       	ldi	r16, 0x02	; 2
    8272:	0e 94 b9 4b 	call	0x9772	; 0x9772 <__ashldi3>
    8276:	a2 2e       	mov	r10, r18
    8278:	b3 2e       	mov	r11, r19
    827a:	c4 2e       	mov	r12, r20
    827c:	d5 2e       	mov	r13, r21
    827e:	e6 2e       	mov	r14, r22
    8280:	f7 2e       	mov	r15, r23
    8282:	08 2f       	mov	r16, r24
    8284:	19 2f       	mov	r17, r25
    8286:	2a 2c       	mov	r2, r10
    8288:	3b 2c       	mov	r3, r11
    828a:	4c 2c       	mov	r4, r12
    828c:	5d 2c       	mov	r5, r13
    828e:	6e 2c       	mov	r6, r14
    8290:	7f 2c       	mov	r7, r15
    8292:	80 2e       	mov	r8, r16
    8294:	91 2e       	mov	r9, r17
    8296:	22 2d       	mov	r18, r2
    8298:	33 2d       	mov	r19, r3
    829a:	44 2d       	mov	r20, r4
    829c:	55 2d       	mov	r21, r5
    829e:	66 2d       	mov	r22, r6
    82a0:	77 2d       	mov	r23, r7
    82a2:	88 2d       	mov	r24, r8
    82a4:	99 2d       	mov	r25, r9
    82a6:	05 e0       	ldi	r16, 0x05	; 5
    82a8:	0e 94 b9 4b 	call	0x9772	; 0x9772 <__ashldi3>
    82ac:	a2 2e       	mov	r10, r18
    82ae:	b3 2e       	mov	r11, r19
    82b0:	c4 2e       	mov	r12, r20
    82b2:	d5 2e       	mov	r13, r21
    82b4:	e6 2e       	mov	r14, r22
    82b6:	f7 2e       	mov	r15, r23
    82b8:	08 2f       	mov	r16, r24
    82ba:	19 2f       	mov	r17, r25
    82bc:	2a 2d       	mov	r18, r10
    82be:	3b 2d       	mov	r19, r11
    82c0:	4c 2d       	mov	r20, r12
    82c2:	5d 2d       	mov	r21, r13
    82c4:	6e 2d       	mov	r22, r14
    82c6:	7f 2d       	mov	r23, r15
    82c8:	80 2f       	mov	r24, r16
    82ca:	91 2f       	mov	r25, r17
    82cc:	a2 2c       	mov	r10, r2
    82ce:	b3 2c       	mov	r11, r3
    82d0:	c4 2c       	mov	r12, r4
    82d2:	d5 2c       	mov	r13, r5
    82d4:	e6 2c       	mov	r14, r6
    82d6:	f7 2c       	mov	r15, r7
    82d8:	08 2d       	mov	r16, r8
    82da:	19 2d       	mov	r17, r9
    82dc:	0e 94 db 4b 	call	0x97b6	; 0x97b6 <__subdi3>
    82e0:	a2 2e       	mov	r10, r18
    82e2:	b3 2e       	mov	r11, r19
    82e4:	c4 2e       	mov	r12, r20
    82e6:	d5 2e       	mov	r13, r21
    82e8:	e6 2e       	mov	r14, r22
    82ea:	f7 2e       	mov	r15, r23
    82ec:	08 2f       	mov	r16, r24
    82ee:	19 2f       	mov	r17, r25
    82f0:	2a 2d       	mov	r18, r10
    82f2:	3b 2d       	mov	r19, r11
    82f4:	4c 2d       	mov	r20, r12
    82f6:	5d 2d       	mov	r21, r13
    82f8:	6e 2d       	mov	r22, r14
    82fa:	7f 2d       	mov	r23, r15
    82fc:	80 2f       	mov	r24, r16
    82fe:	91 2f       	mov	r25, r17
    8300:	aa 84       	ldd	r10, Y+10	; 0x0a
    8302:	bb 84       	ldd	r11, Y+11	; 0x0b
    8304:	cc 84       	ldd	r12, Y+12	; 0x0c
    8306:	dd 84       	ldd	r13, Y+13	; 0x0d
    8308:	ee 84       	ldd	r14, Y+14	; 0x0e
    830a:	ff 84       	ldd	r15, Y+15	; 0x0f
    830c:	08 89       	ldd	r16, Y+16	; 0x10
    830e:	19 89       	ldd	r17, Y+17	; 0x11
    8310:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <__adddi3>
    8314:	a2 2e       	mov	r10, r18
    8316:	b3 2e       	mov	r11, r19
    8318:	c4 2e       	mov	r12, r20
    831a:	d5 2e       	mov	r13, r21
    831c:	e6 2e       	mov	r14, r22
    831e:	f7 2e       	mov	r15, r23
    8320:	08 2f       	mov	r16, r24
    8322:	19 2f       	mov	r17, r25
    8324:	2a 2d       	mov	r18, r10
    8326:	3b 2d       	mov	r19, r11
    8328:	4c 2d       	mov	r20, r12
    832a:	5d 2d       	mov	r21, r13
    832c:	6e 2d       	mov	r22, r14
    832e:	7f 2d       	mov	r23, r15
    8330:	80 2f       	mov	r24, r16
    8332:	91 2f       	mov	r25, r17
    8334:	03 e0       	ldi	r16, 0x03	; 3
    8336:	0e 94 b9 4b 	call	0x9772	; 0x9772 <__ashldi3>
    833a:	22 2e       	mov	r2, r18
    833c:	33 2e       	mov	r3, r19
    833e:	44 2e       	mov	r4, r20
    8340:	55 2e       	mov	r5, r21
    8342:	66 2e       	mov	r6, r22
    8344:	77 2e       	mov	r7, r23
    8346:	88 2e       	mov	r8, r24
    8348:	99 2e       	mov	r9, r25
    834a:	a2 2c       	mov	r10, r2
    834c:	b3 2c       	mov	r11, r3
    834e:	c4 2c       	mov	r12, r4
    8350:	d5 2c       	mov	r13, r5
    8352:	e6 2c       	mov	r14, r6
    8354:	f7 2c       	mov	r15, r7
    8356:	08 2d       	mov	r16, r8
    8358:	19 2d       	mov	r17, r9
    835a:	2a 2c       	mov	r2, r10
    835c:	3b 2c       	mov	r3, r11
    835e:	4c 2c       	mov	r4, r12
    8360:	5d 2c       	mov	r5, r13
    8362:	6e 2c       	mov	r6, r14
    8364:	7f 2c       	mov	r7, r15
    8366:	80 2e       	mov	r8, r16
    8368:	91 2e       	mov	r9, r17
    836a:	0f 2e       	mov	r0, r31
    836c:	f6 e0       	ldi	r31, 0x06	; 6
    836e:	af 2e       	mov	r10, r31
    8370:	f0 2d       	mov	r31, r0
    8372:	b1 2c       	mov	r11, r1
    8374:	c1 2c       	mov	r12, r1
    8376:	d1 2c       	mov	r13, r1
    8378:	e1 2c       	mov	r14, r1
    837a:	f1 2c       	mov	r15, r1
    837c:	00 e0       	ldi	r16, 0x00	; 0
    837e:	10 e0       	ldi	r17, 0x00	; 0
    8380:	22 2d       	mov	r18, r2
    8382:	33 2d       	mov	r19, r3
    8384:	44 2d       	mov	r20, r4
    8386:	55 2d       	mov	r21, r5
    8388:	66 2d       	mov	r22, r6
    838a:	77 2d       	mov	r23, r7
    838c:	88 2d       	mov	r24, r8
    838e:	99 2d       	mov	r25, r9
    8390:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__udivdi3>
    8394:	22 2e       	mov	r2, r18
    8396:	33 2e       	mov	r3, r19
    8398:	44 2e       	mov	r4, r20
    839a:	55 2e       	mov	r5, r21
    839c:	66 2e       	mov	r6, r22
    839e:	77 2e       	mov	r7, r23
    83a0:	88 2e       	mov	r8, r24
    83a2:	99 2e       	mov	r9, r25
    83a4:	a2 2c       	mov	r10, r2
    83a6:	b3 2c       	mov	r11, r3
    83a8:	c4 2c       	mov	r12, r4
    83aa:	d5 2c       	mov	r13, r5
    83ac:	e6 2c       	mov	r14, r6
    83ae:	f7 2c       	mov	r15, r7
    83b0:	08 2d       	mov	r16, r8
    83b2:	19 2d       	mov	r17, r9
    83b4:	2a 2d       	mov	r18, r10
    83b6:	3b 2d       	mov	r19, r11
    83b8:	4c 2d       	mov	r20, r12
    83ba:	5d 2d       	mov	r21, r13
    83bc:	6e 2d       	mov	r22, r14
    83be:	7f 2d       	mov	r23, r15
    83c0:	80 2f       	mov	r24, r16
    83c2:	91 2f       	mov	r25, r17
    83c4:	29 51       	subi	r18, 0x19	; 25
    83c6:	3c 4f       	sbci	r19, 0xFC	; 252
    83c8:	4f 4f       	sbci	r20, 0xFF	; 255
    83ca:	5f 4f       	sbci	r21, 0xFF	; 255
    83cc:	6f 4f       	sbci	r22, 0xFF	; 255
    83ce:	7f 4f       	sbci	r23, 0xFF	; 255
    83d0:	8f 4f       	sbci	r24, 0xFF	; 255
    83d2:	9f 4f       	sbci	r25, 0xFF	; 255
    83d4:	a2 2e       	mov	r10, r18
    83d6:	b3 2e       	mov	r11, r19
    83d8:	c4 2e       	mov	r12, r20
    83da:	d5 2e       	mov	r13, r21
    83dc:	e6 2e       	mov	r14, r22
    83de:	f7 2e       	mov	r15, r23
    83e0:	08 2f       	mov	r16, r24
    83e2:	19 2f       	mov	r17, r25
    83e4:	2a 2d       	mov	r18, r10
    83e6:	3b 2d       	mov	r19, r11
    83e8:	4c 2d       	mov	r20, r12
    83ea:	5d 2d       	mov	r21, r13
    83ec:	6e 2d       	mov	r22, r14
    83ee:	7f 2d       	mov	r23, r15
    83f0:	80 2f       	mov	r24, r16
    83f2:	91 2f       	mov	r25, r17
    83f4:	b2 d3       	rcall	.+1892   	; 0x8b5a <__floatundisf>
    83f6:	dc 01       	movw	r26, r24
    83f8:	cb 01       	movw	r24, r22
    83fa:	20 e0       	ldi	r18, 0x00	; 0
    83fc:	30 e0       	ldi	r19, 0x00	; 0
    83fe:	4a e7       	ldi	r20, 0x7A	; 122
    8400:	54 e4       	ldi	r21, 0x44	; 68
    8402:	bc 01       	movw	r22, r24
    8404:	cd 01       	movw	r24, r26
    8406:	9e d2       	rcall	.+1340   	; 0x8944 <__divsf3>
    8408:	dc 01       	movw	r26, r24
    840a:	cb 01       	movw	r24, r22
    840c:	bc 01       	movw	r22, r24
    840e:	cd 01       	movw	r24, r26
    8410:	06 d3       	rcall	.+1548   	; 0x8a1e <__fixunssfdi>
    8412:	a2 2e       	mov	r10, r18
    8414:	b3 2e       	mov	r11, r19
    8416:	c4 2e       	mov	r12, r20
    8418:	d5 2e       	mov	r13, r21
    841a:	e6 2e       	mov	r14, r22
    841c:	f7 2e       	mov	r15, r23
    841e:	08 2f       	mov	r16, r24
    8420:	19 2f       	mov	r17, r25
    8422:	d6 01       	movw	r26, r12
    8424:	c5 01       	movw	r24, r10
    8426:	bc 01       	movw	r22, r24
    8428:	cd 01       	movw	r24, r26
    842a:	d1 dc       	rcall	.-1630   	; 0x7dce <__portable_avr_delay_cycles>


		
	
							
	}
    842c:	7c ce       	rjmp	.-776    	; 0x8126 <main+0x2d2>

0000842e <write_telem_to_xbee>:
}

void write_telem_to_xbee()
{
    842e:	cf 93       	push	r28
    8430:	df 93       	push	r29
    8432:	cd b7       	in	r28, 0x3d	; 61
    8434:	de b7       	in	r29, 0x3e	; 62
    8436:	c0 54       	subi	r28, 0x40	; 64
    8438:	d3 40       	sbci	r29, 0x03	; 3
    843a:	cd bf       	out	0x3d, r28	; 61
    843c:	de bf       	out	0x3e, r29	; 62
	char* telemetryString [255];
	*telemetryString = "\0";
    843e:	84 e1       	ldi	r24, 0x14	; 20
    8440:	90 e2       	ldi	r25, 0x20	; 32
    8442:	8b 83       	std	Y+3, r24	; 0x03
    8444:	9c 83       	std	Y+4, r25	; 0x04
	char* s_teamID = "2118";
    8446:	86 e2       	ldi	r24, 0x26	; 38
    8448:	92 e2       	ldi	r25, 0x22	; 34
    844a:	89 83       	std	Y+1, r24	; 0x01
    844c:	9a 83       	std	Y+2, r25	; 0x02
	char* s_roll [10];
	char* s_spinRate [10];
	char* s_flightState [10];
	char* s_cardinalDir [10];
	
	sprintf(s_missionTime, "%i", missionTime);
    844e:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <missionTime>
    8452:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <missionTime+0x1>
    8456:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <missionTime+0x2>
    845a:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <missionTime+0x3>
    845e:	2b 2f       	mov	r18, r27
    8460:	2f 93       	push	r18
    8462:	2a 2f       	mov	r18, r26
    8464:	2f 93       	push	r18
    8466:	29 2f       	mov	r18, r25
    8468:	2f 93       	push	r18
    846a:	8f 93       	push	r24
    846c:	8b e2       	ldi	r24, 0x2B	; 43
    846e:	92 e2       	ldi	r25, 0x22	; 34
    8470:	89 2f       	mov	r24, r25
    8472:	8f 93       	push	r24
    8474:	8b e2       	ldi	r24, 0x2B	; 43
    8476:	92 e2       	ldi	r25, 0x22	; 34
    8478:	8f 93       	push	r24
    847a:	ce 01       	movw	r24, r28
    847c:	8f 5f       	subi	r24, 0xFF	; 255
    847e:	9d 4f       	sbci	r25, 0xFD	; 253
    8480:	29 2f       	mov	r18, r25
    8482:	2f 93       	push	r18
    8484:	8f 93       	push	r24
    8486:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    848a:	8d b7       	in	r24, 0x3d	; 61
    848c:	9e b7       	in	r25, 0x3e	; 62
    848e:	08 96       	adiw	r24, 0x08	; 8
    8490:	cd bf       	out	0x3d, r28	; 61
    8492:	de bf       	out	0x3e, r29	; 62
	sprintf(s_packetCount, "%i", packetCount);
    8494:	80 91 ea 22 	lds	r24, 0x22EA	; 0x8022ea <packetCount>
    8498:	90 91 eb 22 	lds	r25, 0x22EB	; 0x8022eb <packetCount+0x1>
    849c:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <packetCount+0x2>
    84a0:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <packetCount+0x3>
    84a4:	2b 2f       	mov	r18, r27
    84a6:	2f 93       	push	r18
    84a8:	2a 2f       	mov	r18, r26
    84aa:	2f 93       	push	r18
    84ac:	29 2f       	mov	r18, r25
    84ae:	2f 93       	push	r18
    84b0:	8f 93       	push	r24
    84b2:	8b e2       	ldi	r24, 0x2B	; 43
    84b4:	92 e2       	ldi	r25, 0x22	; 34
    84b6:	89 2f       	mov	r24, r25
    84b8:	8f 93       	push	r24
    84ba:	8b e2       	ldi	r24, 0x2B	; 43
    84bc:	92 e2       	ldi	r25, 0x22	; 34
    84be:	8f 93       	push	r24
    84c0:	ce 01       	movw	r24, r28
    84c2:	8b 5e       	subi	r24, 0xEB	; 235
    84c4:	9d 4f       	sbci	r25, 0xFD	; 253
    84c6:	29 2f       	mov	r18, r25
    84c8:	2f 93       	push	r18
    84ca:	8f 93       	push	r24
    84cc:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    84d0:	ed b7       	in	r30, 0x3d	; 61
    84d2:	fe b7       	in	r31, 0x3e	; 62
    84d4:	38 96       	adiw	r30, 0x08	; 8
    84d6:	cd bf       	out	0x3d, r28	; 61
    84d8:	de bf       	out	0x3e, r29	; 62
	sprintf(s_altitude, "%f", altitude);
    84da:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <altitude>
    84de:	90 91 ef 22 	lds	r25, 0x22EF	; 0x8022ef <altitude+0x1>
    84e2:	a0 91 f0 22 	lds	r26, 0x22F0	; 0x8022f0 <altitude+0x2>
    84e6:	b0 91 f1 22 	lds	r27, 0x22F1	; 0x8022f1 <altitude+0x3>
    84ea:	2b 2f       	mov	r18, r27
    84ec:	2f 93       	push	r18
    84ee:	2a 2f       	mov	r18, r26
    84f0:	2f 93       	push	r18
    84f2:	29 2f       	mov	r18, r25
    84f4:	2f 93       	push	r18
    84f6:	8f 93       	push	r24
    84f8:	8e e2       	ldi	r24, 0x2E	; 46
    84fa:	92 e2       	ldi	r25, 0x22	; 34
    84fc:	89 2f       	mov	r24, r25
    84fe:	8f 93       	push	r24
    8500:	8e e2       	ldi	r24, 0x2E	; 46
    8502:	92 e2       	ldi	r25, 0x22	; 34
    8504:	8f 93       	push	r24
    8506:	ce 01       	movw	r24, r28
    8508:	87 5d       	subi	r24, 0xD7	; 215
    850a:	9d 4f       	sbci	r25, 0xFD	; 253
    850c:	29 2f       	mov	r18, r25
    850e:	2f 93       	push	r18
    8510:	8f 93       	push	r24
    8512:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    8516:	8d b7       	in	r24, 0x3d	; 61
    8518:	9e b7       	in	r25, 0x3e	; 62
    851a:	08 96       	adiw	r24, 0x08	; 8
    851c:	cd bf       	out	0x3d, r28	; 61
    851e:	de bf       	out	0x3e, r29	; 62
	sprintf(s_pressure, "%i",pressure);
    8520:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <pressure>
    8524:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <pressure+0x1>
    8528:	a0 91 e7 22 	lds	r26, 0x22E7	; 0x8022e7 <pressure+0x2>
    852c:	b0 91 e8 22 	lds	r27, 0x22E8	; 0x8022e8 <pressure+0x3>
    8530:	2b 2f       	mov	r18, r27
    8532:	2f 93       	push	r18
    8534:	2a 2f       	mov	r18, r26
    8536:	2f 93       	push	r18
    8538:	29 2f       	mov	r18, r25
    853a:	2f 93       	push	r18
    853c:	8f 93       	push	r24
    853e:	8b e2       	ldi	r24, 0x2B	; 43
    8540:	92 e2       	ldi	r25, 0x22	; 34
    8542:	89 2f       	mov	r24, r25
    8544:	8f 93       	push	r24
    8546:	8b e2       	ldi	r24, 0x2B	; 43
    8548:	92 e2       	ldi	r25, 0x22	; 34
    854a:	8f 93       	push	r24
    854c:	ce 01       	movw	r24, r28
    854e:	83 5c       	subi	r24, 0xC3	; 195
    8550:	9d 4f       	sbci	r25, 0xFD	; 253
    8552:	29 2f       	mov	r18, r25
    8554:	2f 93       	push	r18
    8556:	8f 93       	push	r24
    8558:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    855c:	ed b7       	in	r30, 0x3d	; 61
    855e:	fe b7       	in	r31, 0x3e	; 62
    8560:	38 96       	adiw	r30, 0x08	; 8
    8562:	cd bf       	out	0x3d, r28	; 61
    8564:	de bf       	out	0x3e, r29	; 62
	sprintf(s_temp, "%f", temp);
    8566:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <temp>
    856a:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <temp+0x1>
    856e:	a0 91 db 22 	lds	r26, 0x22DB	; 0x8022db <temp+0x2>
    8572:	b0 91 dc 22 	lds	r27, 0x22DC	; 0x8022dc <temp+0x3>
    8576:	2b 2f       	mov	r18, r27
    8578:	2f 93       	push	r18
    857a:	2a 2f       	mov	r18, r26
    857c:	2f 93       	push	r18
    857e:	29 2f       	mov	r18, r25
    8580:	2f 93       	push	r18
    8582:	8f 93       	push	r24
    8584:	8e e2       	ldi	r24, 0x2E	; 46
    8586:	92 e2       	ldi	r25, 0x22	; 34
    8588:	89 2f       	mov	r24, r25
    858a:	8f 93       	push	r24
    858c:	8e e2       	ldi	r24, 0x2E	; 46
    858e:	92 e2       	ldi	r25, 0x22	; 34
    8590:	8f 93       	push	r24
    8592:	ce 01       	movw	r24, r28
    8594:	8f 5a       	subi	r24, 0xAF	; 175
    8596:	9d 4f       	sbci	r25, 0xFD	; 253
    8598:	29 2f       	mov	r18, r25
    859a:	2f 93       	push	r18
    859c:	8f 93       	push	r24
    859e:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    85a2:	8d b7       	in	r24, 0x3d	; 61
    85a4:	9e b7       	in	r25, 0x3e	; 62
    85a6:	08 96       	adiw	r24, 0x08	; 8
    85a8:	cd bf       	out	0x3d, r28	; 61
    85aa:	de bf       	out	0x3e, r29	; 62
	sprintf(s_voltage, "%f", voltage);
    85ac:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <voltage>
    85b0:	90 91 e2 22 	lds	r25, 0x22E2	; 0x8022e2 <voltage+0x1>
    85b4:	a0 91 e3 22 	lds	r26, 0x22E3	; 0x8022e3 <voltage+0x2>
    85b8:	b0 91 e4 22 	lds	r27, 0x22E4	; 0x8022e4 <voltage+0x3>
    85bc:	2b 2f       	mov	r18, r27
    85be:	2f 93       	push	r18
    85c0:	2a 2f       	mov	r18, r26
    85c2:	2f 93       	push	r18
    85c4:	29 2f       	mov	r18, r25
    85c6:	2f 93       	push	r18
    85c8:	8f 93       	push	r24
    85ca:	8e e2       	ldi	r24, 0x2E	; 46
    85cc:	92 e2       	ldi	r25, 0x22	; 34
    85ce:	89 2f       	mov	r24, r25
    85d0:	8f 93       	push	r24
    85d2:	8e e2       	ldi	r24, 0x2E	; 46
    85d4:	92 e2       	ldi	r25, 0x22	; 34
    85d6:	8f 93       	push	r24
    85d8:	ce 01       	movw	r24, r28
    85da:	8b 59       	subi	r24, 0x9B	; 155
    85dc:	9d 4f       	sbci	r25, 0xFD	; 253
    85de:	29 2f       	mov	r18, r25
    85e0:	2f 93       	push	r18
    85e2:	8f 93       	push	r24
    85e4:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    85e8:	ed b7       	in	r30, 0x3d	; 61
    85ea:	fe b7       	in	r31, 0x3e	; 62
    85ec:	38 96       	adiw	r30, 0x08	; 8
    85ee:	cd bf       	out	0x3d, r28	; 61
    85f0:	de bf       	out	0x3e, r29	; 62
	sprintf(s_gpsTime, " ");
    85f2:	20 91 e7 21 	lds	r18, 0x21E7	; 0x8021e7 <usart_config.6754+0x1da>
    85f6:	30 91 e8 21 	lds	r19, 0x21E8	; 0x8021e8 <usart_config.6754+0x1db>
    85fa:	ce 01       	movw	r24, r28
    85fc:	87 58       	subi	r24, 0x87	; 135
    85fe:	9d 4f       	sbci	r25, 0xFD	; 253
    8600:	fc 01       	movw	r30, r24
    8602:	20 83       	st	Z, r18
    8604:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLat, " ");
    8606:	20 91 e7 21 	lds	r18, 0x21E7	; 0x8021e7 <usart_config.6754+0x1da>
    860a:	30 91 e8 21 	lds	r19, 0x21E8	; 0x8021e8 <usart_config.6754+0x1db>
    860e:	ce 01       	movw	r24, r28
    8610:	83 57       	subi	r24, 0x73	; 115
    8612:	9d 4f       	sbci	r25, 0xFD	; 253
    8614:	fc 01       	movw	r30, r24
    8616:	20 83       	st	Z, r18
    8618:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLong, " ");
    861a:	20 91 e7 21 	lds	r18, 0x21E7	; 0x8021e7 <usart_config.6754+0x1da>
    861e:	30 91 e8 21 	lds	r19, 0x21E8	; 0x8021e8 <usart_config.6754+0x1db>
    8622:	ce 01       	movw	r24, r28
    8624:	8f 55       	subi	r24, 0x5F	; 95
    8626:	9d 4f       	sbci	r25, 0xFD	; 253
    8628:	fc 01       	movw	r30, r24
    862a:	20 83       	st	Z, r18
    862c:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsAlt, " ");
    862e:	20 91 e7 21 	lds	r18, 0x21E7	; 0x8021e7 <usart_config.6754+0x1da>
    8632:	30 91 e8 21 	lds	r19, 0x21E8	; 0x8021e8 <usart_config.6754+0x1db>
    8636:	ce 01       	movw	r24, r28
    8638:	8b 54       	subi	r24, 0x4B	; 75
    863a:	9d 4f       	sbci	r25, 0xFD	; 253
    863c:	fc 01       	movw	r30, r24
    863e:	20 83       	st	Z, r18
    8640:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsSats, " ");
    8642:	20 91 e7 21 	lds	r18, 0x21E7	; 0x8021e7 <usart_config.6754+0x1da>
    8646:	30 91 e8 21 	lds	r19, 0x21E8	; 0x8021e8 <usart_config.6754+0x1db>
    864a:	ce 01       	movw	r24, r28
    864c:	87 53       	subi	r24, 0x37	; 55
    864e:	9d 4f       	sbci	r25, 0xFD	; 253
    8650:	fc 01       	movw	r30, r24
    8652:	20 83       	st	Z, r18
    8654:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_pitch, "%f", pitch);
    8656:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <pitch>
    865a:	90 91 f3 22 	lds	r25, 0x22F3	; 0x8022f3 <pitch+0x1>
    865e:	a0 91 f4 22 	lds	r26, 0x22F4	; 0x8022f4 <pitch+0x2>
    8662:	b0 91 f5 22 	lds	r27, 0x22F5	; 0x8022f5 <pitch+0x3>
    8666:	2b 2f       	mov	r18, r27
    8668:	2f 93       	push	r18
    866a:	2a 2f       	mov	r18, r26
    866c:	2f 93       	push	r18
    866e:	29 2f       	mov	r18, r25
    8670:	2f 93       	push	r18
    8672:	8f 93       	push	r24
    8674:	8e e2       	ldi	r24, 0x2E	; 46
    8676:	92 e2       	ldi	r25, 0x22	; 34
    8678:	89 2f       	mov	r24, r25
    867a:	8f 93       	push	r24
    867c:	8e e2       	ldi	r24, 0x2E	; 46
    867e:	92 e2       	ldi	r25, 0x22	; 34
    8680:	8f 93       	push	r24
    8682:	ce 01       	movw	r24, r28
    8684:	83 52       	subi	r24, 0x23	; 35
    8686:	9d 4f       	sbci	r25, 0xFD	; 253
    8688:	29 2f       	mov	r18, r25
    868a:	2f 93       	push	r18
    868c:	8f 93       	push	r24
    868e:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    8692:	8d b7       	in	r24, 0x3d	; 61
    8694:	9e b7       	in	r25, 0x3e	; 62
    8696:	08 96       	adiw	r24, 0x08	; 8
    8698:	cd bf       	out	0x3d, r28	; 61
    869a:	de bf       	out	0x3e, r29	; 62
	sprintf(s_roll, "%f", roll);
    869c:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <roll>
    86a0:	90 91 f7 22 	lds	r25, 0x22F7	; 0x8022f7 <roll+0x1>
    86a4:	a0 91 f8 22 	lds	r26, 0x22F8	; 0x8022f8 <roll+0x2>
    86a8:	b0 91 f9 22 	lds	r27, 0x22F9	; 0x8022f9 <roll+0x3>
    86ac:	2b 2f       	mov	r18, r27
    86ae:	2f 93       	push	r18
    86b0:	2a 2f       	mov	r18, r26
    86b2:	2f 93       	push	r18
    86b4:	29 2f       	mov	r18, r25
    86b6:	2f 93       	push	r18
    86b8:	8f 93       	push	r24
    86ba:	8e e2       	ldi	r24, 0x2E	; 46
    86bc:	92 e2       	ldi	r25, 0x22	; 34
    86be:	89 2f       	mov	r24, r25
    86c0:	8f 93       	push	r24
    86c2:	8e e2       	ldi	r24, 0x2E	; 46
    86c4:	92 e2       	ldi	r25, 0x22	; 34
    86c6:	8f 93       	push	r24
    86c8:	ce 01       	movw	r24, r28
    86ca:	8f 50       	subi	r24, 0x0F	; 15
    86cc:	9d 4f       	sbci	r25, 0xFD	; 253
    86ce:	29 2f       	mov	r18, r25
    86d0:	2f 93       	push	r18
    86d2:	8f 93       	push	r24
    86d4:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    86d8:	ed b7       	in	r30, 0x3d	; 61
    86da:	fe b7       	in	r31, 0x3e	; 62
    86dc:	38 96       	adiw	r30, 0x08	; 8
    86de:	cd bf       	out	0x3d, r28	; 61
    86e0:	de bf       	out	0x3e, r29	; 62
	sprintf(s_spinRate, " ");
    86e2:	20 91 e7 21 	lds	r18, 0x21E7	; 0x8021e7 <usart_config.6754+0x1da>
    86e6:	30 91 e8 21 	lds	r19, 0x21E8	; 0x8021e8 <usart_config.6754+0x1db>
    86ea:	ce 01       	movw	r24, r28
    86ec:	8b 5f       	subi	r24, 0xFB	; 251
    86ee:	9c 4f       	sbci	r25, 0xFC	; 252
    86f0:	fc 01       	movw	r30, r24
    86f2:	20 83       	st	Z, r18
    86f4:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_flightState, "%i", flightState);
    86f6:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <flightState>
    86fa:	88 2f       	mov	r24, r24
    86fc:	90 e0       	ldi	r25, 0x00	; 0
    86fe:	29 2f       	mov	r18, r25
    8700:	2f 93       	push	r18
    8702:	8f 93       	push	r24
    8704:	8b e2       	ldi	r24, 0x2B	; 43
    8706:	92 e2       	ldi	r25, 0x22	; 34
    8708:	89 2f       	mov	r24, r25
    870a:	8f 93       	push	r24
    870c:	8b e2       	ldi	r24, 0x2B	; 43
    870e:	92 e2       	ldi	r25, 0x22	; 34
    8710:	8f 93       	push	r24
    8712:	ce 01       	movw	r24, r28
    8714:	87 5e       	subi	r24, 0xE7	; 231
    8716:	9c 4f       	sbci	r25, 0xFC	; 252
    8718:	29 2f       	mov	r18, r25
    871a:	2f 93       	push	r18
    871c:	8f 93       	push	r24
    871e:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    8722:	0f 90       	pop	r0
    8724:	0f 90       	pop	r0
    8726:	0f 90       	pop	r0
    8728:	0f 90       	pop	r0
    872a:	0f 90       	pop	r0
    872c:	0f 90       	pop	r0
	sprintf(s_cardinalDir, "%f", heading);
    872e:	80 91 fa 22 	lds	r24, 0x22FA	; 0x8022fa <heading>
    8732:	90 91 fb 22 	lds	r25, 0x22FB	; 0x8022fb <heading+0x1>
    8736:	a0 91 fc 22 	lds	r26, 0x22FC	; 0x8022fc <heading+0x2>
    873a:	b0 91 fd 22 	lds	r27, 0x22FD	; 0x8022fd <heading+0x3>
    873e:	2b 2f       	mov	r18, r27
    8740:	2f 93       	push	r18
    8742:	2a 2f       	mov	r18, r26
    8744:	2f 93       	push	r18
    8746:	29 2f       	mov	r18, r25
    8748:	2f 93       	push	r18
    874a:	8f 93       	push	r24
    874c:	8e e2       	ldi	r24, 0x2E	; 46
    874e:	92 e2       	ldi	r25, 0x22	; 34
    8750:	89 2f       	mov	r24, r25
    8752:	8f 93       	push	r24
    8754:	8e e2       	ldi	r24, 0x2E	; 46
    8756:	92 e2       	ldi	r25, 0x22	; 34
    8758:	8f 93       	push	r24
    875a:	ce 01       	movw	r24, r28
    875c:	83 5d       	subi	r24, 0xD3	; 211
    875e:	9c 4f       	sbci	r25, 0xFC	; 252
    8760:	29 2f       	mov	r18, r25
    8762:	2f 93       	push	r18
    8764:	8f 93       	push	r24
    8766:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    876a:	8d b7       	in	r24, 0x3d	; 61
    876c:	9e b7       	in	r25, 0x3e	; 62
    876e:	08 96       	adiw	r24, 0x08	; 8
    8770:	cd bf       	out	0x3d, r28	; 61
    8772:	de bf       	out	0x3e, r29	; 62
	
	
	sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,",
    8774:	ce 01       	movw	r24, r28
    8776:	83 5d       	subi	r24, 0xD3	; 211
    8778:	9c 4f       	sbci	r25, 0xFC	; 252
    877a:	29 2f       	mov	r18, r25
    877c:	2f 93       	push	r18
    877e:	8f 93       	push	r24
    8780:	ce 01       	movw	r24, r28
    8782:	87 5e       	subi	r24, 0xE7	; 231
    8784:	9c 4f       	sbci	r25, 0xFC	; 252
    8786:	29 2f       	mov	r18, r25
    8788:	2f 93       	push	r18
    878a:	8f 93       	push	r24
    878c:	ce 01       	movw	r24, r28
    878e:	8b 5f       	subi	r24, 0xFB	; 251
    8790:	9c 4f       	sbci	r25, 0xFC	; 252
    8792:	29 2f       	mov	r18, r25
    8794:	2f 93       	push	r18
    8796:	8f 93       	push	r24
    8798:	ce 01       	movw	r24, r28
    879a:	8f 50       	subi	r24, 0x0F	; 15
    879c:	9d 4f       	sbci	r25, 0xFD	; 253
    879e:	29 2f       	mov	r18, r25
    87a0:	2f 93       	push	r18
    87a2:	8f 93       	push	r24
    87a4:	ce 01       	movw	r24, r28
    87a6:	83 52       	subi	r24, 0x23	; 35
    87a8:	9d 4f       	sbci	r25, 0xFD	; 253
    87aa:	29 2f       	mov	r18, r25
    87ac:	2f 93       	push	r18
    87ae:	8f 93       	push	r24
    87b0:	ce 01       	movw	r24, r28
    87b2:	87 53       	subi	r24, 0x37	; 55
    87b4:	9d 4f       	sbci	r25, 0xFD	; 253
    87b6:	29 2f       	mov	r18, r25
    87b8:	2f 93       	push	r18
    87ba:	8f 93       	push	r24
    87bc:	ce 01       	movw	r24, r28
    87be:	8b 54       	subi	r24, 0x4B	; 75
    87c0:	9d 4f       	sbci	r25, 0xFD	; 253
    87c2:	29 2f       	mov	r18, r25
    87c4:	2f 93       	push	r18
    87c6:	8f 93       	push	r24
    87c8:	ce 01       	movw	r24, r28
    87ca:	8f 55       	subi	r24, 0x5F	; 95
    87cc:	9d 4f       	sbci	r25, 0xFD	; 253
    87ce:	29 2f       	mov	r18, r25
    87d0:	2f 93       	push	r18
    87d2:	8f 93       	push	r24
    87d4:	ce 01       	movw	r24, r28
    87d6:	83 57       	subi	r24, 0x73	; 115
    87d8:	9d 4f       	sbci	r25, 0xFD	; 253
    87da:	29 2f       	mov	r18, r25
    87dc:	2f 93       	push	r18
    87de:	8f 93       	push	r24
    87e0:	ce 01       	movw	r24, r28
    87e2:	87 58       	subi	r24, 0x87	; 135
    87e4:	9d 4f       	sbci	r25, 0xFD	; 253
    87e6:	29 2f       	mov	r18, r25
    87e8:	2f 93       	push	r18
    87ea:	8f 93       	push	r24
    87ec:	ce 01       	movw	r24, r28
    87ee:	8b 59       	subi	r24, 0x9B	; 155
    87f0:	9d 4f       	sbci	r25, 0xFD	; 253
    87f2:	29 2f       	mov	r18, r25
    87f4:	2f 93       	push	r18
    87f6:	8f 93       	push	r24
    87f8:	ce 01       	movw	r24, r28
    87fa:	8f 5a       	subi	r24, 0xAF	; 175
    87fc:	9d 4f       	sbci	r25, 0xFD	; 253
    87fe:	29 2f       	mov	r18, r25
    8800:	2f 93       	push	r18
    8802:	8f 93       	push	r24
    8804:	ce 01       	movw	r24, r28
    8806:	83 5c       	subi	r24, 0xC3	; 195
    8808:	9d 4f       	sbci	r25, 0xFD	; 253
    880a:	29 2f       	mov	r18, r25
    880c:	2f 93       	push	r18
    880e:	8f 93       	push	r24
    8810:	ce 01       	movw	r24, r28
    8812:	87 5d       	subi	r24, 0xD7	; 215
    8814:	9d 4f       	sbci	r25, 0xFD	; 253
    8816:	29 2f       	mov	r18, r25
    8818:	2f 93       	push	r18
    881a:	8f 93       	push	r24
    881c:	ce 01       	movw	r24, r28
    881e:	8b 5e       	subi	r24, 0xEB	; 235
    8820:	9d 4f       	sbci	r25, 0xFD	; 253
    8822:	29 2f       	mov	r18, r25
    8824:	2f 93       	push	r18
    8826:	8f 93       	push	r24
    8828:	ce 01       	movw	r24, r28
    882a:	8f 5f       	subi	r24, 0xFF	; 255
    882c:	9d 4f       	sbci	r25, 0xFD	; 253
    882e:	29 2f       	mov	r18, r25
    8830:	2f 93       	push	r18
    8832:	8f 93       	push	r24
    8834:	8a 81       	ldd	r24, Y+2	; 0x02
    8836:	8f 93       	push	r24
    8838:	89 81       	ldd	r24, Y+1	; 0x01
    883a:	8f 93       	push	r24
    883c:	81 e3       	ldi	r24, 0x31	; 49
    883e:	92 e2       	ldi	r25, 0x22	; 34
    8840:	89 2f       	mov	r24, r25
    8842:	8f 93       	push	r24
    8844:	81 e3       	ldi	r24, 0x31	; 49
    8846:	92 e2       	ldi	r25, 0x22	; 34
    8848:	8f 93       	push	r24
    884a:	ce 01       	movw	r24, r28
    884c:	03 96       	adiw	r24, 0x03	; 3
    884e:	29 2f       	mov	r18, r25
    8850:	2f 93       	push	r18
    8852:	8f 93       	push	r24
    8854:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <sprintf>
    8858:	ed b7       	in	r30, 0x3d	; 61
    885a:	fe b7       	in	r31, 0x3e	; 62
    885c:	b6 96       	adiw	r30, 0x26	; 38
    885e:	cd bf       	out	0x3d, r28	; 61
    8860:	de bf       	out	0x3e, r29	; 62
	s_roll,
	s_spinRate,
	s_flightState,
	s_cardinalDir);
	
	xbeeWrite(telemetryString);
    8862:	ce 01       	movw	r24, r28
    8864:	03 96       	adiw	r24, 0x03	; 3
    8866:	0e 94 35 20 	call	0x406a	; 0x406a <xbeeWrite>
}
    886a:	00 00       	nop
    886c:	c0 5c       	subi	r28, 0xC0	; 192
    886e:	dc 4f       	sbci	r29, 0xFC	; 252
    8870:	cd bf       	out	0x3d, r28	; 61
    8872:	de bf       	out	0x3e, r29	; 62
    8874:	df 91       	pop	r29
    8876:	cf 91       	pop	r28
    8878:	08 95       	ret

0000887a <__subsf3>:
    887a:	50 58       	subi	r21, 0x80	; 128

0000887c <__addsf3>:
    887c:	bb 27       	eor	r27, r27
    887e:	aa 27       	eor	r26, r26
    8880:	0e d0       	rcall	.+28     	; 0x889e <__addsf3x>
    8882:	d0 c1       	rjmp	.+928    	; 0x8c24 <__fp_round>
    8884:	c1 d1       	rcall	.+898    	; 0x8c08 <__fp_pscA>
    8886:	30 f0       	brcs	.+12     	; 0x8894 <__addsf3+0x18>
    8888:	c6 d1       	rcall	.+908    	; 0x8c16 <__fp_pscB>
    888a:	20 f0       	brcs	.+8      	; 0x8894 <__addsf3+0x18>
    888c:	31 f4       	brne	.+12     	; 0x889a <__addsf3+0x1e>
    888e:	9f 3f       	cpi	r25, 0xFF	; 255
    8890:	11 f4       	brne	.+4      	; 0x8896 <__addsf3+0x1a>
    8892:	1e f4       	brtc	.+6      	; 0x889a <__addsf3+0x1e>
    8894:	a6 c1       	rjmp	.+844    	; 0x8be2 <__fp_nan>
    8896:	0e f4       	brtc	.+2      	; 0x889a <__addsf3+0x1e>
    8898:	e0 95       	com	r30
    889a:	e7 fb       	bst	r30, 7
    889c:	9c c1       	rjmp	.+824    	; 0x8bd6 <__fp_inf>

0000889e <__addsf3x>:
    889e:	e9 2f       	mov	r30, r25
    88a0:	d2 d1       	rcall	.+932    	; 0x8c46 <__fp_split3>
    88a2:	80 f3       	brcs	.-32     	; 0x8884 <__addsf3+0x8>
    88a4:	ba 17       	cp	r27, r26
    88a6:	62 07       	cpc	r22, r18
    88a8:	73 07       	cpc	r23, r19
    88aa:	84 07       	cpc	r24, r20
    88ac:	95 07       	cpc	r25, r21
    88ae:	18 f0       	brcs	.+6      	; 0x88b6 <__addsf3x+0x18>
    88b0:	71 f4       	brne	.+28     	; 0x88ce <__addsf3x+0x30>
    88b2:	9e f5       	brtc	.+102    	; 0x891a <__addsf3x+0x7c>
    88b4:	ea c1       	rjmp	.+980    	; 0x8c8a <__fp_zero>
    88b6:	0e f4       	brtc	.+2      	; 0x88ba <__addsf3x+0x1c>
    88b8:	e0 95       	com	r30
    88ba:	0b 2e       	mov	r0, r27
    88bc:	ba 2f       	mov	r27, r26
    88be:	a0 2d       	mov	r26, r0
    88c0:	0b 01       	movw	r0, r22
    88c2:	b9 01       	movw	r22, r18
    88c4:	90 01       	movw	r18, r0
    88c6:	0c 01       	movw	r0, r24
    88c8:	ca 01       	movw	r24, r20
    88ca:	a0 01       	movw	r20, r0
    88cc:	11 24       	eor	r1, r1
    88ce:	ff 27       	eor	r31, r31
    88d0:	59 1b       	sub	r21, r25
    88d2:	99 f0       	breq	.+38     	; 0x88fa <__addsf3x+0x5c>
    88d4:	59 3f       	cpi	r21, 0xF9	; 249
    88d6:	50 f4       	brcc	.+20     	; 0x88ec <__addsf3x+0x4e>
    88d8:	50 3e       	cpi	r21, 0xE0	; 224
    88da:	68 f1       	brcs	.+90     	; 0x8936 <__addsf3x+0x98>
    88dc:	1a 16       	cp	r1, r26
    88de:	f0 40       	sbci	r31, 0x00	; 0
    88e0:	a2 2f       	mov	r26, r18
    88e2:	23 2f       	mov	r18, r19
    88e4:	34 2f       	mov	r19, r20
    88e6:	44 27       	eor	r20, r20
    88e8:	58 5f       	subi	r21, 0xF8	; 248
    88ea:	f3 cf       	rjmp	.-26     	; 0x88d2 <__addsf3x+0x34>
    88ec:	46 95       	lsr	r20
    88ee:	37 95       	ror	r19
    88f0:	27 95       	ror	r18
    88f2:	a7 95       	ror	r26
    88f4:	f0 40       	sbci	r31, 0x00	; 0
    88f6:	53 95       	inc	r21
    88f8:	c9 f7       	brne	.-14     	; 0x88ec <__addsf3x+0x4e>
    88fa:	7e f4       	brtc	.+30     	; 0x891a <__addsf3x+0x7c>
    88fc:	1f 16       	cp	r1, r31
    88fe:	ba 0b       	sbc	r27, r26
    8900:	62 0b       	sbc	r22, r18
    8902:	73 0b       	sbc	r23, r19
    8904:	84 0b       	sbc	r24, r20
    8906:	ba f0       	brmi	.+46     	; 0x8936 <__addsf3x+0x98>
    8908:	91 50       	subi	r25, 0x01	; 1
    890a:	a1 f0       	breq	.+40     	; 0x8934 <__addsf3x+0x96>
    890c:	ff 0f       	add	r31, r31
    890e:	bb 1f       	adc	r27, r27
    8910:	66 1f       	adc	r22, r22
    8912:	77 1f       	adc	r23, r23
    8914:	88 1f       	adc	r24, r24
    8916:	c2 f7       	brpl	.-16     	; 0x8908 <__addsf3x+0x6a>
    8918:	0e c0       	rjmp	.+28     	; 0x8936 <__addsf3x+0x98>
    891a:	ba 0f       	add	r27, r26
    891c:	62 1f       	adc	r22, r18
    891e:	73 1f       	adc	r23, r19
    8920:	84 1f       	adc	r24, r20
    8922:	48 f4       	brcc	.+18     	; 0x8936 <__addsf3x+0x98>
    8924:	87 95       	ror	r24
    8926:	77 95       	ror	r23
    8928:	67 95       	ror	r22
    892a:	b7 95       	ror	r27
    892c:	f7 95       	ror	r31
    892e:	9e 3f       	cpi	r25, 0xFE	; 254
    8930:	08 f0       	brcs	.+2      	; 0x8934 <__addsf3x+0x96>
    8932:	b3 cf       	rjmp	.-154    	; 0x889a <__addsf3+0x1e>
    8934:	93 95       	inc	r25
    8936:	88 0f       	add	r24, r24
    8938:	08 f0       	brcs	.+2      	; 0x893c <__addsf3x+0x9e>
    893a:	99 27       	eor	r25, r25
    893c:	ee 0f       	add	r30, r30
    893e:	97 95       	ror	r25
    8940:	87 95       	ror	r24
    8942:	08 95       	ret

00008944 <__divsf3>:
    8944:	0c d0       	rcall	.+24     	; 0x895e <__divsf3x>
    8946:	6e c1       	rjmp	.+732    	; 0x8c24 <__fp_round>
    8948:	66 d1       	rcall	.+716    	; 0x8c16 <__fp_pscB>
    894a:	40 f0       	brcs	.+16     	; 0x895c <__divsf3+0x18>
    894c:	5d d1       	rcall	.+698    	; 0x8c08 <__fp_pscA>
    894e:	30 f0       	brcs	.+12     	; 0x895c <__divsf3+0x18>
    8950:	21 f4       	brne	.+8      	; 0x895a <__divsf3+0x16>
    8952:	5f 3f       	cpi	r21, 0xFF	; 255
    8954:	19 f0       	breq	.+6      	; 0x895c <__divsf3+0x18>
    8956:	3f c1       	rjmp	.+638    	; 0x8bd6 <__fp_inf>
    8958:	51 11       	cpse	r21, r1
    895a:	98 c1       	rjmp	.+816    	; 0x8c8c <__fp_szero>
    895c:	42 c1       	rjmp	.+644    	; 0x8be2 <__fp_nan>

0000895e <__divsf3x>:
    895e:	73 d1       	rcall	.+742    	; 0x8c46 <__fp_split3>
    8960:	98 f3       	brcs	.-26     	; 0x8948 <__divsf3+0x4>

00008962 <__divsf3_pse>:
    8962:	99 23       	and	r25, r25
    8964:	c9 f3       	breq	.-14     	; 0x8958 <__divsf3+0x14>
    8966:	55 23       	and	r21, r21
    8968:	b1 f3       	breq	.-20     	; 0x8956 <__divsf3+0x12>
    896a:	95 1b       	sub	r25, r21
    896c:	55 0b       	sbc	r21, r21
    896e:	bb 27       	eor	r27, r27
    8970:	aa 27       	eor	r26, r26
    8972:	62 17       	cp	r22, r18
    8974:	73 07       	cpc	r23, r19
    8976:	84 07       	cpc	r24, r20
    8978:	38 f0       	brcs	.+14     	; 0x8988 <__divsf3_pse+0x26>
    897a:	9f 5f       	subi	r25, 0xFF	; 255
    897c:	5f 4f       	sbci	r21, 0xFF	; 255
    897e:	22 0f       	add	r18, r18
    8980:	33 1f       	adc	r19, r19
    8982:	44 1f       	adc	r20, r20
    8984:	aa 1f       	adc	r26, r26
    8986:	a9 f3       	breq	.-22     	; 0x8972 <__divsf3_pse+0x10>
    8988:	33 d0       	rcall	.+102    	; 0x89f0 <__divsf3_pse+0x8e>
    898a:	0e 2e       	mov	r0, r30
    898c:	3a f0       	brmi	.+14     	; 0x899c <__divsf3_pse+0x3a>
    898e:	e0 e8       	ldi	r30, 0x80	; 128
    8990:	30 d0       	rcall	.+96     	; 0x89f2 <__divsf3_pse+0x90>
    8992:	91 50       	subi	r25, 0x01	; 1
    8994:	50 40       	sbci	r21, 0x00	; 0
    8996:	e6 95       	lsr	r30
    8998:	00 1c       	adc	r0, r0
    899a:	ca f7       	brpl	.-14     	; 0x898e <__divsf3_pse+0x2c>
    899c:	29 d0       	rcall	.+82     	; 0x89f0 <__divsf3_pse+0x8e>
    899e:	fe 2f       	mov	r31, r30
    89a0:	27 d0       	rcall	.+78     	; 0x89f0 <__divsf3_pse+0x8e>
    89a2:	66 0f       	add	r22, r22
    89a4:	77 1f       	adc	r23, r23
    89a6:	88 1f       	adc	r24, r24
    89a8:	bb 1f       	adc	r27, r27
    89aa:	26 17       	cp	r18, r22
    89ac:	37 07       	cpc	r19, r23
    89ae:	48 07       	cpc	r20, r24
    89b0:	ab 07       	cpc	r26, r27
    89b2:	b0 e8       	ldi	r27, 0x80	; 128
    89b4:	09 f0       	breq	.+2      	; 0x89b8 <__divsf3_pse+0x56>
    89b6:	bb 0b       	sbc	r27, r27
    89b8:	80 2d       	mov	r24, r0
    89ba:	bf 01       	movw	r22, r30
    89bc:	ff 27       	eor	r31, r31
    89be:	93 58       	subi	r25, 0x83	; 131
    89c0:	5f 4f       	sbci	r21, 0xFF	; 255
    89c2:	2a f0       	brmi	.+10     	; 0x89ce <__divsf3_pse+0x6c>
    89c4:	9e 3f       	cpi	r25, 0xFE	; 254
    89c6:	51 05       	cpc	r21, r1
    89c8:	68 f0       	brcs	.+26     	; 0x89e4 <__divsf3_pse+0x82>
    89ca:	05 c1       	rjmp	.+522    	; 0x8bd6 <__fp_inf>
    89cc:	5f c1       	rjmp	.+702    	; 0x8c8c <__fp_szero>
    89ce:	5f 3f       	cpi	r21, 0xFF	; 255
    89d0:	ec f3       	brlt	.-6      	; 0x89cc <__divsf3_pse+0x6a>
    89d2:	98 3e       	cpi	r25, 0xE8	; 232
    89d4:	dc f3       	brlt	.-10     	; 0x89cc <__divsf3_pse+0x6a>
    89d6:	86 95       	lsr	r24
    89d8:	77 95       	ror	r23
    89da:	67 95       	ror	r22
    89dc:	b7 95       	ror	r27
    89de:	f7 95       	ror	r31
    89e0:	9f 5f       	subi	r25, 0xFF	; 255
    89e2:	c9 f7       	brne	.-14     	; 0x89d6 <__divsf3_pse+0x74>
    89e4:	88 0f       	add	r24, r24
    89e6:	91 1d       	adc	r25, r1
    89e8:	96 95       	lsr	r25
    89ea:	87 95       	ror	r24
    89ec:	97 f9       	bld	r25, 7
    89ee:	08 95       	ret
    89f0:	e1 e0       	ldi	r30, 0x01	; 1
    89f2:	66 0f       	add	r22, r22
    89f4:	77 1f       	adc	r23, r23
    89f6:	88 1f       	adc	r24, r24
    89f8:	bb 1f       	adc	r27, r27
    89fa:	62 17       	cp	r22, r18
    89fc:	73 07       	cpc	r23, r19
    89fe:	84 07       	cpc	r24, r20
    8a00:	ba 07       	cpc	r27, r26
    8a02:	20 f0       	brcs	.+8      	; 0x8a0c <__divsf3_pse+0xaa>
    8a04:	62 1b       	sub	r22, r18
    8a06:	73 0b       	sbc	r23, r19
    8a08:	84 0b       	sbc	r24, r20
    8a0a:	ba 0b       	sbc	r27, r26
    8a0c:	ee 1f       	adc	r30, r30
    8a0e:	88 f7       	brcc	.-30     	; 0x89f2 <__divsf3_pse+0x90>
    8a10:	e0 95       	com	r30
    8a12:	08 95       	ret

00008a14 <__fixsfdi>:
    8a14:	be e3       	ldi	r27, 0x3E	; 62
    8a16:	04 d0       	rcall	.+8      	; 0x8a20 <__fixunssfdi+0x2>
    8a18:	08 f4       	brcc	.+2      	; 0x8a1c <__fixsfdi+0x8>
    8a1a:	90 e8       	ldi	r25, 0x80	; 128
    8a1c:	08 95       	ret

00008a1e <__fixunssfdi>:
    8a1e:	bf e3       	ldi	r27, 0x3F	; 63
    8a20:	22 27       	eor	r18, r18
    8a22:	33 27       	eor	r19, r19
    8a24:	a9 01       	movw	r20, r18
    8a26:	17 d1       	rcall	.+558    	; 0x8c56 <__fp_splitA>
    8a28:	58 f1       	brcs	.+86     	; 0x8a80 <__fixunssfdi+0x62>
    8a2a:	9f 57       	subi	r25, 0x7F	; 127
    8a2c:	40 f1       	brcs	.+80     	; 0x8a7e <__fixunssfdi+0x60>
    8a2e:	b9 17       	cp	r27, r25
    8a30:	38 f1       	brcs	.+78     	; 0x8a80 <__fixunssfdi+0x62>
    8a32:	bf e3       	ldi	r27, 0x3F	; 63
    8a34:	b9 1b       	sub	r27, r25
    8a36:	99 27       	eor	r25, r25
    8a38:	b8 50       	subi	r27, 0x08	; 8
    8a3a:	3a f4       	brpl	.+14     	; 0x8a4a <__fixunssfdi+0x2c>
    8a3c:	66 0f       	add	r22, r22
    8a3e:	77 1f       	adc	r23, r23
    8a40:	88 1f       	adc	r24, r24
    8a42:	99 1f       	adc	r25, r25
    8a44:	b3 95       	inc	r27
    8a46:	d2 f3       	brmi	.-12     	; 0x8a3c <__fixunssfdi+0x1e>
    8a48:	16 c0       	rjmp	.+44     	; 0x8a76 <__fixunssfdi+0x58>
    8a4a:	b8 50       	subi	r27, 0x08	; 8
    8a4c:	4a f0       	brmi	.+18     	; 0x8a60 <__fixunssfdi+0x42>
    8a4e:	23 2f       	mov	r18, r19
    8a50:	34 2f       	mov	r19, r20
    8a52:	45 2f       	mov	r20, r21
    8a54:	56 2f       	mov	r21, r22
    8a56:	67 2f       	mov	r22, r23
    8a58:	78 2f       	mov	r23, r24
    8a5a:	88 27       	eor	r24, r24
    8a5c:	b8 50       	subi	r27, 0x08	; 8
    8a5e:	ba f7       	brpl	.-18     	; 0x8a4e <__fixunssfdi+0x30>
    8a60:	b8 5f       	subi	r27, 0xF8	; 248
    8a62:	49 f0       	breq	.+18     	; 0x8a76 <__fixunssfdi+0x58>
    8a64:	86 95       	lsr	r24
    8a66:	77 95       	ror	r23
    8a68:	67 95       	ror	r22
    8a6a:	57 95       	ror	r21
    8a6c:	47 95       	ror	r20
    8a6e:	37 95       	ror	r19
    8a70:	27 95       	ror	r18
    8a72:	ba 95       	dec	r27
    8a74:	b9 f7       	brne	.-18     	; 0x8a64 <__fixunssfdi+0x46>
    8a76:	0e f4       	brtc	.+2      	; 0x8a7a <__fixunssfdi+0x5c>
    8a78:	b7 d0       	rcall	.+366    	; 0x8be8 <__fp_negdi>
    8a7a:	88 94       	clc
    8a7c:	08 95       	ret
    8a7e:	88 94       	clc
    8a80:	60 e0       	ldi	r22, 0x00	; 0
    8a82:	70 e0       	ldi	r23, 0x00	; 0
    8a84:	cb 01       	movw	r24, r22
    8a86:	08 95       	ret

00008a88 <__fixunssfsi>:
    8a88:	e6 d0       	rcall	.+460    	; 0x8c56 <__fp_splitA>
    8a8a:	88 f0       	brcs	.+34     	; 0x8aae <__fixunssfsi+0x26>
    8a8c:	9f 57       	subi	r25, 0x7F	; 127
    8a8e:	90 f0       	brcs	.+36     	; 0x8ab4 <__fixunssfsi+0x2c>
    8a90:	b9 2f       	mov	r27, r25
    8a92:	99 27       	eor	r25, r25
    8a94:	b7 51       	subi	r27, 0x17	; 23
    8a96:	a0 f0       	brcs	.+40     	; 0x8ac0 <__fixunssfsi+0x38>
    8a98:	d1 f0       	breq	.+52     	; 0x8ace <__fixunssfsi+0x46>
    8a9a:	66 0f       	add	r22, r22
    8a9c:	77 1f       	adc	r23, r23
    8a9e:	88 1f       	adc	r24, r24
    8aa0:	99 1f       	adc	r25, r25
    8aa2:	1a f0       	brmi	.+6      	; 0x8aaa <__fixunssfsi+0x22>
    8aa4:	ba 95       	dec	r27
    8aa6:	c9 f7       	brne	.-14     	; 0x8a9a <__fixunssfsi+0x12>
    8aa8:	12 c0       	rjmp	.+36     	; 0x8ace <__fixunssfsi+0x46>
    8aaa:	b1 30       	cpi	r27, 0x01	; 1
    8aac:	81 f0       	breq	.+32     	; 0x8ace <__fixunssfsi+0x46>
    8aae:	ed d0       	rcall	.+474    	; 0x8c8a <__fp_zero>
    8ab0:	b1 e0       	ldi	r27, 0x01	; 1
    8ab2:	08 95       	ret
    8ab4:	ea c0       	rjmp	.+468    	; 0x8c8a <__fp_zero>
    8ab6:	67 2f       	mov	r22, r23
    8ab8:	78 2f       	mov	r23, r24
    8aba:	88 27       	eor	r24, r24
    8abc:	b8 5f       	subi	r27, 0xF8	; 248
    8abe:	39 f0       	breq	.+14     	; 0x8ace <__fixunssfsi+0x46>
    8ac0:	b9 3f       	cpi	r27, 0xF9	; 249
    8ac2:	cc f3       	brlt	.-14     	; 0x8ab6 <__fixunssfsi+0x2e>
    8ac4:	86 95       	lsr	r24
    8ac6:	77 95       	ror	r23
    8ac8:	67 95       	ror	r22
    8aca:	b3 95       	inc	r27
    8acc:	d9 f7       	brne	.-10     	; 0x8ac4 <__fixunssfsi+0x3c>
    8ace:	3e f4       	brtc	.+14     	; 0x8ade <__fixunssfsi+0x56>
    8ad0:	90 95       	com	r25
    8ad2:	80 95       	com	r24
    8ad4:	70 95       	com	r23
    8ad6:	61 95       	neg	r22
    8ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    8ada:	8f 4f       	sbci	r24, 0xFF	; 255
    8adc:	9f 4f       	sbci	r25, 0xFF	; 255
    8ade:	08 95       	ret

00008ae0 <__floatunsisf>:
    8ae0:	e8 94       	clt
    8ae2:	09 c0       	rjmp	.+18     	; 0x8af6 <__floatsisf+0x12>

00008ae4 <__floatsisf>:
    8ae4:	97 fb       	bst	r25, 7
    8ae6:	3e f4       	brtc	.+14     	; 0x8af6 <__floatsisf+0x12>
    8ae8:	90 95       	com	r25
    8aea:	80 95       	com	r24
    8aec:	70 95       	com	r23
    8aee:	61 95       	neg	r22
    8af0:	7f 4f       	sbci	r23, 0xFF	; 255
    8af2:	8f 4f       	sbci	r24, 0xFF	; 255
    8af4:	9f 4f       	sbci	r25, 0xFF	; 255
    8af6:	99 23       	and	r25, r25
    8af8:	a9 f0       	breq	.+42     	; 0x8b24 <__floatsisf+0x40>
    8afa:	f9 2f       	mov	r31, r25
    8afc:	96 e9       	ldi	r25, 0x96	; 150
    8afe:	bb 27       	eor	r27, r27
    8b00:	93 95       	inc	r25
    8b02:	f6 95       	lsr	r31
    8b04:	87 95       	ror	r24
    8b06:	77 95       	ror	r23
    8b08:	67 95       	ror	r22
    8b0a:	b7 95       	ror	r27
    8b0c:	f1 11       	cpse	r31, r1
    8b0e:	f8 cf       	rjmp	.-16     	; 0x8b00 <__floatsisf+0x1c>
    8b10:	fa f4       	brpl	.+62     	; 0x8b50 <__floatsisf+0x6c>
    8b12:	bb 0f       	add	r27, r27
    8b14:	11 f4       	brne	.+4      	; 0x8b1a <__floatsisf+0x36>
    8b16:	60 ff       	sbrs	r22, 0
    8b18:	1b c0       	rjmp	.+54     	; 0x8b50 <__floatsisf+0x6c>
    8b1a:	6f 5f       	subi	r22, 0xFF	; 255
    8b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    8b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    8b20:	9f 4f       	sbci	r25, 0xFF	; 255
    8b22:	16 c0       	rjmp	.+44     	; 0x8b50 <__floatsisf+0x6c>
    8b24:	88 23       	and	r24, r24
    8b26:	11 f0       	breq	.+4      	; 0x8b2c <__floatsisf+0x48>
    8b28:	96 e9       	ldi	r25, 0x96	; 150
    8b2a:	11 c0       	rjmp	.+34     	; 0x8b4e <__floatsisf+0x6a>
    8b2c:	77 23       	and	r23, r23
    8b2e:	21 f0       	breq	.+8      	; 0x8b38 <__floatsisf+0x54>
    8b30:	9e e8       	ldi	r25, 0x8E	; 142
    8b32:	87 2f       	mov	r24, r23
    8b34:	76 2f       	mov	r23, r22
    8b36:	05 c0       	rjmp	.+10     	; 0x8b42 <__floatsisf+0x5e>
    8b38:	66 23       	and	r22, r22
    8b3a:	71 f0       	breq	.+28     	; 0x8b58 <__floatsisf+0x74>
    8b3c:	96 e8       	ldi	r25, 0x86	; 134
    8b3e:	86 2f       	mov	r24, r22
    8b40:	70 e0       	ldi	r23, 0x00	; 0
    8b42:	60 e0       	ldi	r22, 0x00	; 0
    8b44:	2a f0       	brmi	.+10     	; 0x8b50 <__floatsisf+0x6c>
    8b46:	9a 95       	dec	r25
    8b48:	66 0f       	add	r22, r22
    8b4a:	77 1f       	adc	r23, r23
    8b4c:	88 1f       	adc	r24, r24
    8b4e:	da f7       	brpl	.-10     	; 0x8b46 <__floatsisf+0x62>
    8b50:	88 0f       	add	r24, r24
    8b52:	96 95       	lsr	r25
    8b54:	87 95       	ror	r24
    8b56:	97 f9       	bld	r25, 7
    8b58:	08 95       	ret

00008b5a <__floatundisf>:
    8b5a:	e8 94       	clt

00008b5c <__fp_di2sf>:
    8b5c:	f9 2f       	mov	r31, r25
    8b5e:	96 eb       	ldi	r25, 0xB6	; 182
    8b60:	ff 23       	and	r31, r31
    8b62:	81 f0       	breq	.+32     	; 0x8b84 <__fp_di2sf+0x28>
    8b64:	12 16       	cp	r1, r18
    8b66:	13 06       	cpc	r1, r19
    8b68:	14 06       	cpc	r1, r20
    8b6a:	44 0b       	sbc	r20, r20
    8b6c:	93 95       	inc	r25
    8b6e:	f6 95       	lsr	r31
    8b70:	87 95       	ror	r24
    8b72:	77 95       	ror	r23
    8b74:	67 95       	ror	r22
    8b76:	57 95       	ror	r21
    8b78:	40 40       	sbci	r20, 0x00	; 0
    8b7a:	ff 23       	and	r31, r31
    8b7c:	b9 f7       	brne	.-18     	; 0x8b6c <__fp_di2sf+0x10>
    8b7e:	1b c0       	rjmp	.+54     	; 0x8bb6 <__fp_di2sf+0x5a>
    8b80:	99 27       	eor	r25, r25
    8b82:	08 95       	ret
    8b84:	88 23       	and	r24, r24
    8b86:	51 f4       	brne	.+20     	; 0x8b9c <__fp_di2sf+0x40>
    8b88:	98 50       	subi	r25, 0x08	; 8
    8b8a:	d2 f7       	brpl	.-12     	; 0x8b80 <__fp_di2sf+0x24>
    8b8c:	87 2b       	or	r24, r23
    8b8e:	76 2f       	mov	r23, r22
    8b90:	65 2f       	mov	r22, r21
    8b92:	54 2f       	mov	r21, r20
    8b94:	43 2f       	mov	r20, r19
    8b96:	32 2f       	mov	r19, r18
    8b98:	20 e0       	ldi	r18, 0x00	; 0
    8b9a:	b1 f3       	breq	.-20     	; 0x8b88 <__fp_di2sf+0x2c>
    8b9c:	12 16       	cp	r1, r18
    8b9e:	13 06       	cpc	r1, r19
    8ba0:	14 06       	cpc	r1, r20
    8ba2:	44 0b       	sbc	r20, r20
    8ba4:	88 23       	and	r24, r24
    8ba6:	3a f0       	brmi	.+14     	; 0x8bb6 <__fp_di2sf+0x5a>
    8ba8:	9a 95       	dec	r25
    8baa:	44 0f       	add	r20, r20
    8bac:	55 1f       	adc	r21, r21
    8bae:	66 1f       	adc	r22, r22
    8bb0:	77 1f       	adc	r23, r23
    8bb2:	88 1f       	adc	r24, r24
    8bb4:	ca f7       	brpl	.-14     	; 0x8ba8 <__fp_di2sf+0x4c>
    8bb6:	55 23       	and	r21, r21
    8bb8:	4a f4       	brpl	.+18     	; 0x8bcc <__fp_di2sf+0x70>
    8bba:	44 0f       	add	r20, r20
    8bbc:	55 1f       	adc	r21, r21
    8bbe:	11 f4       	brne	.+4      	; 0x8bc4 <__fp_di2sf+0x68>
    8bc0:	60 ff       	sbrs	r22, 0
    8bc2:	04 c0       	rjmp	.+8      	; 0x8bcc <__fp_di2sf+0x70>
    8bc4:	6f 5f       	subi	r22, 0xFF	; 255
    8bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    8bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    8bca:	9f 4f       	sbci	r25, 0xFF	; 255
    8bcc:	88 0f       	add	r24, r24
    8bce:	96 95       	lsr	r25
    8bd0:	87 95       	ror	r24
    8bd2:	97 f9       	bld	r25, 7
    8bd4:	08 95       	ret

00008bd6 <__fp_inf>:
    8bd6:	97 f9       	bld	r25, 7
    8bd8:	9f 67       	ori	r25, 0x7F	; 127
    8bda:	80 e8       	ldi	r24, 0x80	; 128
    8bdc:	70 e0       	ldi	r23, 0x00	; 0
    8bde:	60 e0       	ldi	r22, 0x00	; 0
    8be0:	08 95       	ret

00008be2 <__fp_nan>:
    8be2:	9f ef       	ldi	r25, 0xFF	; 255
    8be4:	80 ec       	ldi	r24, 0xC0	; 192
    8be6:	08 95       	ret

00008be8 <__fp_negdi>:
    8be8:	90 95       	com	r25
    8bea:	80 95       	com	r24
    8bec:	70 95       	com	r23
    8bee:	60 95       	com	r22
    8bf0:	50 95       	com	r21
    8bf2:	40 95       	com	r20
    8bf4:	30 95       	com	r19
    8bf6:	21 95       	neg	r18
    8bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    8bfa:	4f 4f       	sbci	r20, 0xFF	; 255
    8bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    8bfe:	6f 4f       	sbci	r22, 0xFF	; 255
    8c00:	7f 4f       	sbci	r23, 0xFF	; 255
    8c02:	8f 4f       	sbci	r24, 0xFF	; 255
    8c04:	9f 4f       	sbci	r25, 0xFF	; 255
    8c06:	08 95       	ret

00008c08 <__fp_pscA>:
    8c08:	00 24       	eor	r0, r0
    8c0a:	0a 94       	dec	r0
    8c0c:	16 16       	cp	r1, r22
    8c0e:	17 06       	cpc	r1, r23
    8c10:	18 06       	cpc	r1, r24
    8c12:	09 06       	cpc	r0, r25
    8c14:	08 95       	ret

00008c16 <__fp_pscB>:
    8c16:	00 24       	eor	r0, r0
    8c18:	0a 94       	dec	r0
    8c1a:	12 16       	cp	r1, r18
    8c1c:	13 06       	cpc	r1, r19
    8c1e:	14 06       	cpc	r1, r20
    8c20:	05 06       	cpc	r0, r21
    8c22:	08 95       	ret

00008c24 <__fp_round>:
    8c24:	09 2e       	mov	r0, r25
    8c26:	03 94       	inc	r0
    8c28:	00 0c       	add	r0, r0
    8c2a:	11 f4       	brne	.+4      	; 0x8c30 <__fp_round+0xc>
    8c2c:	88 23       	and	r24, r24
    8c2e:	52 f0       	brmi	.+20     	; 0x8c44 <__fp_round+0x20>
    8c30:	bb 0f       	add	r27, r27
    8c32:	40 f4       	brcc	.+16     	; 0x8c44 <__fp_round+0x20>
    8c34:	bf 2b       	or	r27, r31
    8c36:	11 f4       	brne	.+4      	; 0x8c3c <__fp_round+0x18>
    8c38:	60 ff       	sbrs	r22, 0
    8c3a:	04 c0       	rjmp	.+8      	; 0x8c44 <__fp_round+0x20>
    8c3c:	6f 5f       	subi	r22, 0xFF	; 255
    8c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c40:	8f 4f       	sbci	r24, 0xFF	; 255
    8c42:	9f 4f       	sbci	r25, 0xFF	; 255
    8c44:	08 95       	ret

00008c46 <__fp_split3>:
    8c46:	57 fd       	sbrc	r21, 7
    8c48:	90 58       	subi	r25, 0x80	; 128
    8c4a:	44 0f       	add	r20, r20
    8c4c:	55 1f       	adc	r21, r21
    8c4e:	59 f0       	breq	.+22     	; 0x8c66 <__fp_splitA+0x10>
    8c50:	5f 3f       	cpi	r21, 0xFF	; 255
    8c52:	71 f0       	breq	.+28     	; 0x8c70 <__fp_splitA+0x1a>
    8c54:	47 95       	ror	r20

00008c56 <__fp_splitA>:
    8c56:	88 0f       	add	r24, r24
    8c58:	97 fb       	bst	r25, 7
    8c5a:	99 1f       	adc	r25, r25
    8c5c:	61 f0       	breq	.+24     	; 0x8c76 <__fp_splitA+0x20>
    8c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    8c60:	79 f0       	breq	.+30     	; 0x8c80 <__fp_splitA+0x2a>
    8c62:	87 95       	ror	r24
    8c64:	08 95       	ret
    8c66:	12 16       	cp	r1, r18
    8c68:	13 06       	cpc	r1, r19
    8c6a:	14 06       	cpc	r1, r20
    8c6c:	55 1f       	adc	r21, r21
    8c6e:	f2 cf       	rjmp	.-28     	; 0x8c54 <__fp_split3+0xe>
    8c70:	46 95       	lsr	r20
    8c72:	f1 df       	rcall	.-30     	; 0x8c56 <__fp_splitA>
    8c74:	08 c0       	rjmp	.+16     	; 0x8c86 <__fp_splitA+0x30>
    8c76:	16 16       	cp	r1, r22
    8c78:	17 06       	cpc	r1, r23
    8c7a:	18 06       	cpc	r1, r24
    8c7c:	99 1f       	adc	r25, r25
    8c7e:	f1 cf       	rjmp	.-30     	; 0x8c62 <__fp_splitA+0xc>
    8c80:	86 95       	lsr	r24
    8c82:	71 05       	cpc	r23, r1
    8c84:	61 05       	cpc	r22, r1
    8c86:	08 94       	sec
    8c88:	08 95       	ret

00008c8a <__fp_zero>:
    8c8a:	e8 94       	clt

00008c8c <__fp_szero>:
    8c8c:	bb 27       	eor	r27, r27
    8c8e:	66 27       	eor	r22, r22
    8c90:	77 27       	eor	r23, r23
    8c92:	cb 01       	movw	r24, r22
    8c94:	97 f9       	bld	r25, 7
    8c96:	08 95       	ret
    8c98:	0e f0       	brts	.+2      	; 0x8c9c <__fp_szero+0x10>
    8c9a:	a6 c0       	rjmp	.+332    	; 0x8de8 <__fp_mpack>
    8c9c:	a2 cf       	rjmp	.-188    	; 0x8be2 <__fp_nan>
    8c9e:	68 94       	set
    8ca0:	9a cf       	rjmp	.-204    	; 0x8bd6 <__fp_inf>

00008ca2 <log>:
    8ca2:	d9 df       	rcall	.-78     	; 0x8c56 <__fp_splitA>
    8ca4:	c8 f3       	brcs	.-14     	; 0x8c98 <__fp_szero+0xc>
    8ca6:	99 23       	and	r25, r25
    8ca8:	d1 f3       	breq	.-12     	; 0x8c9e <__fp_szero+0x12>
    8caa:	c6 f3       	brts	.-16     	; 0x8c9c <__fp_szero+0x10>
    8cac:	df 93       	push	r29
    8cae:	cf 93       	push	r28
    8cb0:	1f 93       	push	r17
    8cb2:	0f 93       	push	r16
    8cb4:	ff 92       	push	r15
    8cb6:	c9 2f       	mov	r28, r25
    8cb8:	dd 27       	eor	r29, r29
    8cba:	88 23       	and	r24, r24
    8cbc:	2a f0       	brmi	.+10     	; 0x8cc8 <log+0x26>
    8cbe:	21 97       	sbiw	r28, 0x01	; 1
    8cc0:	66 0f       	add	r22, r22
    8cc2:	77 1f       	adc	r23, r23
    8cc4:	88 1f       	adc	r24, r24
    8cc6:	da f7       	brpl	.-10     	; 0x8cbe <log+0x1c>
    8cc8:	20 e0       	ldi	r18, 0x00	; 0
    8cca:	30 e0       	ldi	r19, 0x00	; 0
    8ccc:	40 e8       	ldi	r20, 0x80	; 128
    8cce:	5f eb       	ldi	r21, 0xBF	; 191
    8cd0:	9f e3       	ldi	r25, 0x3F	; 63
    8cd2:	88 39       	cpi	r24, 0x98	; 152
    8cd4:	20 f0       	brcs	.+8      	; 0x8cde <log+0x3c>
    8cd6:	80 3e       	cpi	r24, 0xE0	; 224
    8cd8:	30 f0       	brcs	.+12     	; 0x8ce6 <log+0x44>
    8cda:	21 96       	adiw	r28, 0x01	; 1
    8cdc:	8f 77       	andi	r24, 0x7F	; 127
    8cde:	ce dd       	rcall	.-1124   	; 0x887c <__addsf3>
    8ce0:	ec e0       	ldi	r30, 0x0C	; 12
    8ce2:	f2 e0       	ldi	r31, 0x02	; 2
    8ce4:	03 c0       	rjmp	.+6      	; 0x8cec <log+0x4a>
    8ce6:	ca dd       	rcall	.-1132   	; 0x887c <__addsf3>
    8ce8:	e9 e3       	ldi	r30, 0x39	; 57
    8cea:	f2 e0       	ldi	r31, 0x02	; 2
    8cec:	8b d0       	rcall	.+278    	; 0x8e04 <__fp_powser>
    8cee:	8b 01       	movw	r16, r22
    8cf0:	be 01       	movw	r22, r28
    8cf2:	ec 01       	movw	r28, r24
    8cf4:	fb 2e       	mov	r15, r27
    8cf6:	6f 57       	subi	r22, 0x7F	; 127
    8cf8:	71 09       	sbc	r23, r1
    8cfa:	75 95       	asr	r23
    8cfc:	77 1f       	adc	r23, r23
    8cfe:	88 0b       	sbc	r24, r24
    8d00:	99 0b       	sbc	r25, r25
    8d02:	f0 de       	rcall	.-544    	; 0x8ae4 <__floatsisf>
    8d04:	28 e1       	ldi	r18, 0x18	; 24
    8d06:	32 e7       	ldi	r19, 0x72	; 114
    8d08:	41 e3       	ldi	r20, 0x31	; 49
    8d0a:	5f e3       	ldi	r21, 0x3F	; 63
    8d0c:	16 d0       	rcall	.+44     	; 0x8d3a <__mulsf3x>
    8d0e:	af 2d       	mov	r26, r15
    8d10:	98 01       	movw	r18, r16
    8d12:	ae 01       	movw	r20, r28
    8d14:	ff 90       	pop	r15
    8d16:	0f 91       	pop	r16
    8d18:	1f 91       	pop	r17
    8d1a:	cf 91       	pop	r28
    8d1c:	df 91       	pop	r29
    8d1e:	bf dd       	rcall	.-1154   	; 0x889e <__addsf3x>
    8d20:	81 cf       	rjmp	.-254    	; 0x8c24 <__fp_round>

00008d22 <__mulsf3>:
    8d22:	0b d0       	rcall	.+22     	; 0x8d3a <__mulsf3x>
    8d24:	7f cf       	rjmp	.-258    	; 0x8c24 <__fp_round>
    8d26:	70 df       	rcall	.-288    	; 0x8c08 <__fp_pscA>
    8d28:	28 f0       	brcs	.+10     	; 0x8d34 <__mulsf3+0x12>
    8d2a:	75 df       	rcall	.-278    	; 0x8c16 <__fp_pscB>
    8d2c:	18 f0       	brcs	.+6      	; 0x8d34 <__mulsf3+0x12>
    8d2e:	95 23       	and	r25, r21
    8d30:	09 f0       	breq	.+2      	; 0x8d34 <__mulsf3+0x12>
    8d32:	51 cf       	rjmp	.-350    	; 0x8bd6 <__fp_inf>
    8d34:	56 cf       	rjmp	.-340    	; 0x8be2 <__fp_nan>
    8d36:	11 24       	eor	r1, r1
    8d38:	a9 cf       	rjmp	.-174    	; 0x8c8c <__fp_szero>

00008d3a <__mulsf3x>:
    8d3a:	85 df       	rcall	.-246    	; 0x8c46 <__fp_split3>
    8d3c:	a0 f3       	brcs	.-24     	; 0x8d26 <__mulsf3+0x4>

00008d3e <__mulsf3_pse>:
    8d3e:	95 9f       	mul	r25, r21
    8d40:	d1 f3       	breq	.-12     	; 0x8d36 <__mulsf3+0x14>
    8d42:	95 0f       	add	r25, r21
    8d44:	50 e0       	ldi	r21, 0x00	; 0
    8d46:	55 1f       	adc	r21, r21
    8d48:	62 9f       	mul	r22, r18
    8d4a:	f0 01       	movw	r30, r0
    8d4c:	72 9f       	mul	r23, r18
    8d4e:	bb 27       	eor	r27, r27
    8d50:	f0 0d       	add	r31, r0
    8d52:	b1 1d       	adc	r27, r1
    8d54:	63 9f       	mul	r22, r19
    8d56:	aa 27       	eor	r26, r26
    8d58:	f0 0d       	add	r31, r0
    8d5a:	b1 1d       	adc	r27, r1
    8d5c:	aa 1f       	adc	r26, r26
    8d5e:	64 9f       	mul	r22, r20
    8d60:	66 27       	eor	r22, r22
    8d62:	b0 0d       	add	r27, r0
    8d64:	a1 1d       	adc	r26, r1
    8d66:	66 1f       	adc	r22, r22
    8d68:	82 9f       	mul	r24, r18
    8d6a:	22 27       	eor	r18, r18
    8d6c:	b0 0d       	add	r27, r0
    8d6e:	a1 1d       	adc	r26, r1
    8d70:	62 1f       	adc	r22, r18
    8d72:	73 9f       	mul	r23, r19
    8d74:	b0 0d       	add	r27, r0
    8d76:	a1 1d       	adc	r26, r1
    8d78:	62 1f       	adc	r22, r18
    8d7a:	83 9f       	mul	r24, r19
    8d7c:	a0 0d       	add	r26, r0
    8d7e:	61 1d       	adc	r22, r1
    8d80:	22 1f       	adc	r18, r18
    8d82:	74 9f       	mul	r23, r20
    8d84:	33 27       	eor	r19, r19
    8d86:	a0 0d       	add	r26, r0
    8d88:	61 1d       	adc	r22, r1
    8d8a:	23 1f       	adc	r18, r19
    8d8c:	84 9f       	mul	r24, r20
    8d8e:	60 0d       	add	r22, r0
    8d90:	21 1d       	adc	r18, r1
    8d92:	82 2f       	mov	r24, r18
    8d94:	76 2f       	mov	r23, r22
    8d96:	6a 2f       	mov	r22, r26
    8d98:	11 24       	eor	r1, r1
    8d9a:	9f 57       	subi	r25, 0x7F	; 127
    8d9c:	50 40       	sbci	r21, 0x00	; 0
    8d9e:	8a f0       	brmi	.+34     	; 0x8dc2 <__mulsf3_pse+0x84>
    8da0:	e1 f0       	breq	.+56     	; 0x8dda <__mulsf3_pse+0x9c>
    8da2:	88 23       	and	r24, r24
    8da4:	4a f0       	brmi	.+18     	; 0x8db8 <__mulsf3_pse+0x7a>
    8da6:	ee 0f       	add	r30, r30
    8da8:	ff 1f       	adc	r31, r31
    8daa:	bb 1f       	adc	r27, r27
    8dac:	66 1f       	adc	r22, r22
    8dae:	77 1f       	adc	r23, r23
    8db0:	88 1f       	adc	r24, r24
    8db2:	91 50       	subi	r25, 0x01	; 1
    8db4:	50 40       	sbci	r21, 0x00	; 0
    8db6:	a9 f7       	brne	.-22     	; 0x8da2 <__mulsf3_pse+0x64>
    8db8:	9e 3f       	cpi	r25, 0xFE	; 254
    8dba:	51 05       	cpc	r21, r1
    8dbc:	70 f0       	brcs	.+28     	; 0x8dda <__mulsf3_pse+0x9c>
    8dbe:	0b cf       	rjmp	.-490    	; 0x8bd6 <__fp_inf>
    8dc0:	65 cf       	rjmp	.-310    	; 0x8c8c <__fp_szero>
    8dc2:	5f 3f       	cpi	r21, 0xFF	; 255
    8dc4:	ec f3       	brlt	.-6      	; 0x8dc0 <__mulsf3_pse+0x82>
    8dc6:	98 3e       	cpi	r25, 0xE8	; 232
    8dc8:	dc f3       	brlt	.-10     	; 0x8dc0 <__mulsf3_pse+0x82>
    8dca:	86 95       	lsr	r24
    8dcc:	77 95       	ror	r23
    8dce:	67 95       	ror	r22
    8dd0:	b7 95       	ror	r27
    8dd2:	f7 95       	ror	r31
    8dd4:	e7 95       	ror	r30
    8dd6:	9f 5f       	subi	r25, 0xFF	; 255
    8dd8:	c1 f7       	brne	.-16     	; 0x8dca <__mulsf3_pse+0x8c>
    8dda:	fe 2b       	or	r31, r30
    8ddc:	88 0f       	add	r24, r24
    8dde:	91 1d       	adc	r25, r1
    8de0:	96 95       	lsr	r25
    8de2:	87 95       	ror	r24
    8de4:	97 f9       	bld	r25, 7
    8de6:	08 95       	ret

00008de8 <__fp_mpack>:
    8de8:	9f 3f       	cpi	r25, 0xFF	; 255
    8dea:	31 f0       	breq	.+12     	; 0x8df8 <__fp_mpack_finite+0xc>

00008dec <__fp_mpack_finite>:
    8dec:	91 50       	subi	r25, 0x01	; 1
    8dee:	20 f4       	brcc	.+8      	; 0x8df8 <__fp_mpack_finite+0xc>
    8df0:	87 95       	ror	r24
    8df2:	77 95       	ror	r23
    8df4:	67 95       	ror	r22
    8df6:	b7 95       	ror	r27
    8df8:	88 0f       	add	r24, r24
    8dfa:	91 1d       	adc	r25, r1
    8dfc:	96 95       	lsr	r25
    8dfe:	87 95       	ror	r24
    8e00:	97 f9       	bld	r25, 7
    8e02:	08 95       	ret

00008e04 <__fp_powser>:
    8e04:	df 93       	push	r29
    8e06:	cf 93       	push	r28
    8e08:	1f 93       	push	r17
    8e0a:	0f 93       	push	r16
    8e0c:	ff 92       	push	r15
    8e0e:	ef 92       	push	r14
    8e10:	df 92       	push	r13
    8e12:	7b 01       	movw	r14, r22
    8e14:	8c 01       	movw	r16, r24
    8e16:	68 94       	set
    8e18:	05 c0       	rjmp	.+10     	; 0x8e24 <__fp_powser+0x20>
    8e1a:	da 2e       	mov	r13, r26
    8e1c:	ef 01       	movw	r28, r30
    8e1e:	8d df       	rcall	.-230    	; 0x8d3a <__mulsf3x>
    8e20:	fe 01       	movw	r30, r28
    8e22:	e8 94       	clt
    8e24:	a5 91       	lpm	r26, Z+
    8e26:	25 91       	lpm	r18, Z+
    8e28:	35 91       	lpm	r19, Z+
    8e2a:	45 91       	lpm	r20, Z+
    8e2c:	55 91       	lpm	r21, Z+
    8e2e:	ae f3       	brts	.-22     	; 0x8e1a <__fp_powser+0x16>
    8e30:	ef 01       	movw	r28, r30
    8e32:	35 dd       	rcall	.-1430   	; 0x889e <__addsf3x>
    8e34:	fe 01       	movw	r30, r28
    8e36:	97 01       	movw	r18, r14
    8e38:	a8 01       	movw	r20, r16
    8e3a:	da 94       	dec	r13
    8e3c:	79 f7       	brne	.-34     	; 0x8e1c <__fp_powser+0x18>
    8e3e:	df 90       	pop	r13
    8e40:	ef 90       	pop	r14
    8e42:	ff 90       	pop	r15
    8e44:	0f 91       	pop	r16
    8e46:	1f 91       	pop	r17
    8e48:	cf 91       	pop	r28
    8e4a:	df 91       	pop	r29
    8e4c:	08 95       	ret

00008e4e <vfprintf>:
    8e4e:	2f 92       	push	r2
    8e50:	3f 92       	push	r3
    8e52:	4f 92       	push	r4
    8e54:	5f 92       	push	r5
    8e56:	6f 92       	push	r6
    8e58:	7f 92       	push	r7
    8e5a:	8f 92       	push	r8
    8e5c:	9f 92       	push	r9
    8e5e:	af 92       	push	r10
    8e60:	bf 92       	push	r11
    8e62:	cf 92       	push	r12
    8e64:	df 92       	push	r13
    8e66:	ef 92       	push	r14
    8e68:	ff 92       	push	r15
    8e6a:	0f 93       	push	r16
    8e6c:	1f 93       	push	r17
    8e6e:	cf 93       	push	r28
    8e70:	df 93       	push	r29
    8e72:	cd b7       	in	r28, 0x3d	; 61
    8e74:	de b7       	in	r29, 0x3e	; 62
    8e76:	60 97       	sbiw	r28, 0x10	; 16
    8e78:	cd bf       	out	0x3d, r28	; 61
    8e7a:	de bf       	out	0x3e, r29	; 62
    8e7c:	7c 01       	movw	r14, r24
    8e7e:	1b 01       	movw	r2, r22
    8e80:	6a 01       	movw	r12, r20
    8e82:	fc 01       	movw	r30, r24
    8e84:	16 82       	std	Z+6, r1	; 0x06
    8e86:	17 82       	std	Z+7, r1	; 0x07
    8e88:	83 81       	ldd	r24, Z+3	; 0x03
    8e8a:	81 ff       	sbrs	r24, 1
    8e8c:	2a c3       	rjmp	.+1620   	; 0x94e2 <vfprintf+0x694>
    8e8e:	9e 01       	movw	r18, r28
    8e90:	2f 5f       	subi	r18, 0xFF	; 255
    8e92:	3f 4f       	sbci	r19, 0xFF	; 255
    8e94:	39 01       	movw	r6, r18
    8e96:	f7 01       	movw	r30, r14
    8e98:	93 81       	ldd	r25, Z+3	; 0x03
    8e9a:	f1 01       	movw	r30, r2
    8e9c:	93 fd       	sbrc	r25, 3
    8e9e:	85 91       	lpm	r24, Z+
    8ea0:	93 ff       	sbrs	r25, 3
    8ea2:	81 91       	ld	r24, Z+
    8ea4:	1f 01       	movw	r2, r30
    8ea6:	88 23       	and	r24, r24
    8ea8:	09 f4       	brne	.+2      	; 0x8eac <vfprintf+0x5e>
    8eaa:	17 c3       	rjmp	.+1582   	; 0x94da <vfprintf+0x68c>
    8eac:	85 32       	cpi	r24, 0x25	; 37
    8eae:	39 f4       	brne	.+14     	; 0x8ebe <vfprintf+0x70>
    8eb0:	93 fd       	sbrc	r25, 3
    8eb2:	85 91       	lpm	r24, Z+
    8eb4:	93 ff       	sbrs	r25, 3
    8eb6:	81 91       	ld	r24, Z+
    8eb8:	1f 01       	movw	r2, r30
    8eba:	85 32       	cpi	r24, 0x25	; 37
    8ebc:	31 f4       	brne	.+12     	; 0x8eca <vfprintf+0x7c>
    8ebe:	b7 01       	movw	r22, r14
    8ec0:	90 e0       	ldi	r25, 0x00	; 0
    8ec2:	fc d6       	rcall	.+3576   	; 0x9cbc <fputc>
    8ec4:	56 01       	movw	r10, r12
    8ec6:	65 01       	movw	r12, r10
    8ec8:	e6 cf       	rjmp	.-52     	; 0x8e96 <vfprintf+0x48>
    8eca:	10 e0       	ldi	r17, 0x00	; 0
    8ecc:	51 2c       	mov	r5, r1
    8ece:	91 2c       	mov	r9, r1
    8ed0:	ff e1       	ldi	r31, 0x1F	; 31
    8ed2:	f9 15       	cp	r31, r9
    8ed4:	d8 f0       	brcs	.+54     	; 0x8f0c <vfprintf+0xbe>
    8ed6:	8b 32       	cpi	r24, 0x2B	; 43
    8ed8:	79 f0       	breq	.+30     	; 0x8ef8 <vfprintf+0xaa>
    8eda:	38 f4       	brcc	.+14     	; 0x8eea <vfprintf+0x9c>
    8edc:	80 32       	cpi	r24, 0x20	; 32
    8ede:	79 f0       	breq	.+30     	; 0x8efe <vfprintf+0xb0>
    8ee0:	83 32       	cpi	r24, 0x23	; 35
    8ee2:	a1 f4       	brne	.+40     	; 0x8f0c <vfprintf+0xbe>
    8ee4:	f9 2d       	mov	r31, r9
    8ee6:	f0 61       	ori	r31, 0x10	; 16
    8ee8:	2e c0       	rjmp	.+92     	; 0x8f46 <vfprintf+0xf8>
    8eea:	8d 32       	cpi	r24, 0x2D	; 45
    8eec:	61 f0       	breq	.+24     	; 0x8f06 <vfprintf+0xb8>
    8eee:	80 33       	cpi	r24, 0x30	; 48
    8ef0:	69 f4       	brne	.+26     	; 0x8f0c <vfprintf+0xbe>
    8ef2:	29 2d       	mov	r18, r9
    8ef4:	21 60       	ori	r18, 0x01	; 1
    8ef6:	2d c0       	rjmp	.+90     	; 0x8f52 <vfprintf+0x104>
    8ef8:	39 2d       	mov	r19, r9
    8efa:	32 60       	ori	r19, 0x02	; 2
    8efc:	93 2e       	mov	r9, r19
    8efe:	89 2d       	mov	r24, r9
    8f00:	84 60       	ori	r24, 0x04	; 4
    8f02:	98 2e       	mov	r9, r24
    8f04:	2a c0       	rjmp	.+84     	; 0x8f5a <vfprintf+0x10c>
    8f06:	e9 2d       	mov	r30, r9
    8f08:	e8 60       	ori	r30, 0x08	; 8
    8f0a:	15 c0       	rjmp	.+42     	; 0x8f36 <vfprintf+0xe8>
    8f0c:	97 fc       	sbrc	r9, 7
    8f0e:	2d c0       	rjmp	.+90     	; 0x8f6a <vfprintf+0x11c>
    8f10:	20 ed       	ldi	r18, 0xD0	; 208
    8f12:	28 0f       	add	r18, r24
    8f14:	2a 30       	cpi	r18, 0x0A	; 10
    8f16:	88 f4       	brcc	.+34     	; 0x8f3a <vfprintf+0xec>
    8f18:	96 fe       	sbrs	r9, 6
    8f1a:	06 c0       	rjmp	.+12     	; 0x8f28 <vfprintf+0xda>
    8f1c:	3a e0       	ldi	r19, 0x0A	; 10
    8f1e:	13 9f       	mul	r17, r19
    8f20:	20 0d       	add	r18, r0
    8f22:	11 24       	eor	r1, r1
    8f24:	12 2f       	mov	r17, r18
    8f26:	19 c0       	rjmp	.+50     	; 0x8f5a <vfprintf+0x10c>
    8f28:	8a e0       	ldi	r24, 0x0A	; 10
    8f2a:	58 9e       	mul	r5, r24
    8f2c:	20 0d       	add	r18, r0
    8f2e:	11 24       	eor	r1, r1
    8f30:	52 2e       	mov	r5, r18
    8f32:	e9 2d       	mov	r30, r9
    8f34:	e0 62       	ori	r30, 0x20	; 32
    8f36:	9e 2e       	mov	r9, r30
    8f38:	10 c0       	rjmp	.+32     	; 0x8f5a <vfprintf+0x10c>
    8f3a:	8e 32       	cpi	r24, 0x2E	; 46
    8f3c:	31 f4       	brne	.+12     	; 0x8f4a <vfprintf+0xfc>
    8f3e:	96 fc       	sbrc	r9, 6
    8f40:	cc c2       	rjmp	.+1432   	; 0x94da <vfprintf+0x68c>
    8f42:	f9 2d       	mov	r31, r9
    8f44:	f0 64       	ori	r31, 0x40	; 64
    8f46:	9f 2e       	mov	r9, r31
    8f48:	08 c0       	rjmp	.+16     	; 0x8f5a <vfprintf+0x10c>
    8f4a:	8c 36       	cpi	r24, 0x6C	; 108
    8f4c:	21 f4       	brne	.+8      	; 0x8f56 <vfprintf+0x108>
    8f4e:	29 2d       	mov	r18, r9
    8f50:	20 68       	ori	r18, 0x80	; 128
    8f52:	92 2e       	mov	r9, r18
    8f54:	02 c0       	rjmp	.+4      	; 0x8f5a <vfprintf+0x10c>
    8f56:	88 36       	cpi	r24, 0x68	; 104
    8f58:	41 f4       	brne	.+16     	; 0x8f6a <vfprintf+0x11c>
    8f5a:	f1 01       	movw	r30, r2
    8f5c:	93 fd       	sbrc	r25, 3
    8f5e:	85 91       	lpm	r24, Z+
    8f60:	93 ff       	sbrs	r25, 3
    8f62:	81 91       	ld	r24, Z+
    8f64:	1f 01       	movw	r2, r30
    8f66:	81 11       	cpse	r24, r1
    8f68:	b3 cf       	rjmp	.-154    	; 0x8ed0 <vfprintf+0x82>
    8f6a:	9b eb       	ldi	r25, 0xBB	; 187
    8f6c:	98 0f       	add	r25, r24
    8f6e:	93 30       	cpi	r25, 0x03	; 3
    8f70:	20 f4       	brcc	.+8      	; 0x8f7a <vfprintf+0x12c>
    8f72:	99 2d       	mov	r25, r9
    8f74:	90 61       	ori	r25, 0x10	; 16
    8f76:	80 5e       	subi	r24, 0xE0	; 224
    8f78:	07 c0       	rjmp	.+14     	; 0x8f88 <vfprintf+0x13a>
    8f7a:	9b e9       	ldi	r25, 0x9B	; 155
    8f7c:	98 0f       	add	r25, r24
    8f7e:	93 30       	cpi	r25, 0x03	; 3
    8f80:	08 f0       	brcs	.+2      	; 0x8f84 <vfprintf+0x136>
    8f82:	59 c1       	rjmp	.+690    	; 0x9236 <vfprintf+0x3e8>
    8f84:	99 2d       	mov	r25, r9
    8f86:	9f 7e       	andi	r25, 0xEF	; 239
    8f88:	96 ff       	sbrs	r25, 6
    8f8a:	16 e0       	ldi	r17, 0x06	; 6
    8f8c:	9f 73       	andi	r25, 0x3F	; 63
    8f8e:	99 2e       	mov	r9, r25
    8f90:	85 36       	cpi	r24, 0x65	; 101
    8f92:	19 f4       	brne	.+6      	; 0x8f9a <vfprintf+0x14c>
    8f94:	90 64       	ori	r25, 0x40	; 64
    8f96:	99 2e       	mov	r9, r25
    8f98:	08 c0       	rjmp	.+16     	; 0x8faa <vfprintf+0x15c>
    8f9a:	86 36       	cpi	r24, 0x66	; 102
    8f9c:	21 f4       	brne	.+8      	; 0x8fa6 <vfprintf+0x158>
    8f9e:	39 2f       	mov	r19, r25
    8fa0:	30 68       	ori	r19, 0x80	; 128
    8fa2:	93 2e       	mov	r9, r19
    8fa4:	02 c0       	rjmp	.+4      	; 0x8faa <vfprintf+0x15c>
    8fa6:	11 11       	cpse	r17, r1
    8fa8:	11 50       	subi	r17, 0x01	; 1
    8faa:	97 fe       	sbrs	r9, 7
    8fac:	07 c0       	rjmp	.+14     	; 0x8fbc <vfprintf+0x16e>
    8fae:	1c 33       	cpi	r17, 0x3C	; 60
    8fb0:	50 f4       	brcc	.+20     	; 0x8fc6 <vfprintf+0x178>
    8fb2:	44 24       	eor	r4, r4
    8fb4:	43 94       	inc	r4
    8fb6:	41 0e       	add	r4, r17
    8fb8:	27 e0       	ldi	r18, 0x07	; 7
    8fba:	0b c0       	rjmp	.+22     	; 0x8fd2 <vfprintf+0x184>
    8fbc:	18 30       	cpi	r17, 0x08	; 8
    8fbe:	38 f0       	brcs	.+14     	; 0x8fce <vfprintf+0x180>
    8fc0:	27 e0       	ldi	r18, 0x07	; 7
    8fc2:	17 e0       	ldi	r17, 0x07	; 7
    8fc4:	05 c0       	rjmp	.+10     	; 0x8fd0 <vfprintf+0x182>
    8fc6:	27 e0       	ldi	r18, 0x07	; 7
    8fc8:	9c e3       	ldi	r25, 0x3C	; 60
    8fca:	49 2e       	mov	r4, r25
    8fcc:	02 c0       	rjmp	.+4      	; 0x8fd2 <vfprintf+0x184>
    8fce:	21 2f       	mov	r18, r17
    8fd0:	41 2c       	mov	r4, r1
    8fd2:	56 01       	movw	r10, r12
    8fd4:	84 e0       	ldi	r24, 0x04	; 4
    8fd6:	a8 0e       	add	r10, r24
    8fd8:	b1 1c       	adc	r11, r1
    8fda:	f6 01       	movw	r30, r12
    8fdc:	60 81       	ld	r22, Z
    8fde:	71 81       	ldd	r23, Z+1	; 0x01
    8fe0:	82 81       	ldd	r24, Z+2	; 0x02
    8fe2:	93 81       	ldd	r25, Z+3	; 0x03
    8fe4:	04 2d       	mov	r16, r4
    8fe6:	a3 01       	movw	r20, r6
    8fe8:	1f d5       	rcall	.+2622   	; 0x9a28 <__ftoa_engine>
    8fea:	6c 01       	movw	r12, r24
    8fec:	f9 81       	ldd	r31, Y+1	; 0x01
    8fee:	fc 87       	std	Y+12, r31	; 0x0c
    8ff0:	f0 ff       	sbrs	r31, 0
    8ff2:	02 c0       	rjmp	.+4      	; 0x8ff8 <vfprintf+0x1aa>
    8ff4:	f3 ff       	sbrs	r31, 3
    8ff6:	06 c0       	rjmp	.+12     	; 0x9004 <vfprintf+0x1b6>
    8ff8:	91 fc       	sbrc	r9, 1
    8ffa:	06 c0       	rjmp	.+12     	; 0x9008 <vfprintf+0x1ba>
    8ffc:	92 fe       	sbrs	r9, 2
    8ffe:	06 c0       	rjmp	.+12     	; 0x900c <vfprintf+0x1be>
    9000:	00 e2       	ldi	r16, 0x20	; 32
    9002:	05 c0       	rjmp	.+10     	; 0x900e <vfprintf+0x1c0>
    9004:	0d e2       	ldi	r16, 0x2D	; 45
    9006:	03 c0       	rjmp	.+6      	; 0x900e <vfprintf+0x1c0>
    9008:	0b e2       	ldi	r16, 0x2B	; 43
    900a:	01 c0       	rjmp	.+2      	; 0x900e <vfprintf+0x1c0>
    900c:	00 e0       	ldi	r16, 0x00	; 0
    900e:	8c 85       	ldd	r24, Y+12	; 0x0c
    9010:	8c 70       	andi	r24, 0x0C	; 12
    9012:	19 f0       	breq	.+6      	; 0x901a <vfprintf+0x1cc>
    9014:	01 11       	cpse	r16, r1
    9016:	43 c2       	rjmp	.+1158   	; 0x949e <vfprintf+0x650>
    9018:	80 c2       	rjmp	.+1280   	; 0x951a <vfprintf+0x6cc>
    901a:	97 fe       	sbrs	r9, 7
    901c:	10 c0       	rjmp	.+32     	; 0x903e <vfprintf+0x1f0>
    901e:	4c 0c       	add	r4, r12
    9020:	fc 85       	ldd	r31, Y+12	; 0x0c
    9022:	f4 ff       	sbrs	r31, 4
    9024:	04 c0       	rjmp	.+8      	; 0x902e <vfprintf+0x1e0>
    9026:	8a 81       	ldd	r24, Y+2	; 0x02
    9028:	81 33       	cpi	r24, 0x31	; 49
    902a:	09 f4       	brne	.+2      	; 0x902e <vfprintf+0x1e0>
    902c:	4a 94       	dec	r4
    902e:	14 14       	cp	r1, r4
    9030:	74 f5       	brge	.+92     	; 0x908e <vfprintf+0x240>
    9032:	28 e0       	ldi	r18, 0x08	; 8
    9034:	24 15       	cp	r18, r4
    9036:	78 f5       	brcc	.+94     	; 0x9096 <vfprintf+0x248>
    9038:	88 e0       	ldi	r24, 0x08	; 8
    903a:	48 2e       	mov	r4, r24
    903c:	2c c0       	rjmp	.+88     	; 0x9096 <vfprintf+0x248>
    903e:	96 fc       	sbrc	r9, 6
    9040:	2a c0       	rjmp	.+84     	; 0x9096 <vfprintf+0x248>
    9042:	81 2f       	mov	r24, r17
    9044:	90 e0       	ldi	r25, 0x00	; 0
    9046:	8c 15       	cp	r24, r12
    9048:	9d 05       	cpc	r25, r13
    904a:	9c f0       	brlt	.+38     	; 0x9072 <vfprintf+0x224>
    904c:	3c ef       	ldi	r19, 0xFC	; 252
    904e:	c3 16       	cp	r12, r19
    9050:	3f ef       	ldi	r19, 0xFF	; 255
    9052:	d3 06       	cpc	r13, r19
    9054:	74 f0       	brlt	.+28     	; 0x9072 <vfprintf+0x224>
    9056:	89 2d       	mov	r24, r9
    9058:	80 68       	ori	r24, 0x80	; 128
    905a:	98 2e       	mov	r9, r24
    905c:	0a c0       	rjmp	.+20     	; 0x9072 <vfprintf+0x224>
    905e:	e2 e0       	ldi	r30, 0x02	; 2
    9060:	f0 e0       	ldi	r31, 0x00	; 0
    9062:	ec 0f       	add	r30, r28
    9064:	fd 1f       	adc	r31, r29
    9066:	e1 0f       	add	r30, r17
    9068:	f1 1d       	adc	r31, r1
    906a:	80 81       	ld	r24, Z
    906c:	80 33       	cpi	r24, 0x30	; 48
    906e:	19 f4       	brne	.+6      	; 0x9076 <vfprintf+0x228>
    9070:	11 50       	subi	r17, 0x01	; 1
    9072:	11 11       	cpse	r17, r1
    9074:	f4 cf       	rjmp	.-24     	; 0x905e <vfprintf+0x210>
    9076:	97 fe       	sbrs	r9, 7
    9078:	0e c0       	rjmp	.+28     	; 0x9096 <vfprintf+0x248>
    907a:	44 24       	eor	r4, r4
    907c:	43 94       	inc	r4
    907e:	41 0e       	add	r4, r17
    9080:	81 2f       	mov	r24, r17
    9082:	90 e0       	ldi	r25, 0x00	; 0
    9084:	c8 16       	cp	r12, r24
    9086:	d9 06       	cpc	r13, r25
    9088:	2c f4       	brge	.+10     	; 0x9094 <vfprintf+0x246>
    908a:	1c 19       	sub	r17, r12
    908c:	04 c0       	rjmp	.+8      	; 0x9096 <vfprintf+0x248>
    908e:	44 24       	eor	r4, r4
    9090:	43 94       	inc	r4
    9092:	01 c0       	rjmp	.+2      	; 0x9096 <vfprintf+0x248>
    9094:	10 e0       	ldi	r17, 0x00	; 0
    9096:	97 fe       	sbrs	r9, 7
    9098:	06 c0       	rjmp	.+12     	; 0x90a6 <vfprintf+0x258>
    909a:	1c 14       	cp	r1, r12
    909c:	1d 04       	cpc	r1, r13
    909e:	34 f4       	brge	.+12     	; 0x90ac <vfprintf+0x25e>
    90a0:	c6 01       	movw	r24, r12
    90a2:	01 96       	adiw	r24, 0x01	; 1
    90a4:	05 c0       	rjmp	.+10     	; 0x90b0 <vfprintf+0x262>
    90a6:	85 e0       	ldi	r24, 0x05	; 5
    90a8:	90 e0       	ldi	r25, 0x00	; 0
    90aa:	02 c0       	rjmp	.+4      	; 0x90b0 <vfprintf+0x262>
    90ac:	81 e0       	ldi	r24, 0x01	; 1
    90ae:	90 e0       	ldi	r25, 0x00	; 0
    90b0:	01 11       	cpse	r16, r1
    90b2:	01 96       	adiw	r24, 0x01	; 1
    90b4:	11 23       	and	r17, r17
    90b6:	31 f0       	breq	.+12     	; 0x90c4 <vfprintf+0x276>
    90b8:	21 2f       	mov	r18, r17
    90ba:	30 e0       	ldi	r19, 0x00	; 0
    90bc:	2f 5f       	subi	r18, 0xFF	; 255
    90be:	3f 4f       	sbci	r19, 0xFF	; 255
    90c0:	82 0f       	add	r24, r18
    90c2:	93 1f       	adc	r25, r19
    90c4:	25 2d       	mov	r18, r5
    90c6:	30 e0       	ldi	r19, 0x00	; 0
    90c8:	82 17       	cp	r24, r18
    90ca:	93 07       	cpc	r25, r19
    90cc:	14 f4       	brge	.+4      	; 0x90d2 <vfprintf+0x284>
    90ce:	58 1a       	sub	r5, r24
    90d0:	01 c0       	rjmp	.+2      	; 0x90d4 <vfprintf+0x286>
    90d2:	51 2c       	mov	r5, r1
    90d4:	89 2d       	mov	r24, r9
    90d6:	89 70       	andi	r24, 0x09	; 9
    90d8:	41 f4       	brne	.+16     	; 0x90ea <vfprintf+0x29c>
    90da:	55 20       	and	r5, r5
    90dc:	31 f0       	breq	.+12     	; 0x90ea <vfprintf+0x29c>
    90de:	b7 01       	movw	r22, r14
    90e0:	80 e2       	ldi	r24, 0x20	; 32
    90e2:	90 e0       	ldi	r25, 0x00	; 0
    90e4:	eb d5       	rcall	.+3030   	; 0x9cbc <fputc>
    90e6:	5a 94       	dec	r5
    90e8:	f8 cf       	rjmp	.-16     	; 0x90da <vfprintf+0x28c>
    90ea:	00 23       	and	r16, r16
    90ec:	21 f0       	breq	.+8      	; 0x90f6 <vfprintf+0x2a8>
    90ee:	b7 01       	movw	r22, r14
    90f0:	80 2f       	mov	r24, r16
    90f2:	90 e0       	ldi	r25, 0x00	; 0
    90f4:	e3 d5       	rcall	.+3014   	; 0x9cbc <fputc>
    90f6:	93 fc       	sbrc	r9, 3
    90f8:	08 c0       	rjmp	.+16     	; 0x910a <vfprintf+0x2bc>
    90fa:	55 20       	and	r5, r5
    90fc:	31 f0       	breq	.+12     	; 0x910a <vfprintf+0x2bc>
    90fe:	b7 01       	movw	r22, r14
    9100:	80 e3       	ldi	r24, 0x30	; 48
    9102:	90 e0       	ldi	r25, 0x00	; 0
    9104:	db d5       	rcall	.+2998   	; 0x9cbc <fputc>
    9106:	5a 94       	dec	r5
    9108:	f8 cf       	rjmp	.-16     	; 0x90fa <vfprintf+0x2ac>
    910a:	97 fe       	sbrs	r9, 7
    910c:	4a c0       	rjmp	.+148    	; 0x91a2 <vfprintf+0x354>
    910e:	46 01       	movw	r8, r12
    9110:	d7 fe       	sbrs	r13, 7
    9112:	02 c0       	rjmp	.+4      	; 0x9118 <vfprintf+0x2ca>
    9114:	81 2c       	mov	r8, r1
    9116:	91 2c       	mov	r9, r1
    9118:	c6 01       	movw	r24, r12
    911a:	88 19       	sub	r24, r8
    911c:	99 09       	sbc	r25, r9
    911e:	f3 01       	movw	r30, r6
    9120:	e8 0f       	add	r30, r24
    9122:	f9 1f       	adc	r31, r25
    9124:	ed 87       	std	Y+13, r30	; 0x0d
    9126:	fe 87       	std	Y+14, r31	; 0x0e
    9128:	96 01       	movw	r18, r12
    912a:	24 19       	sub	r18, r4
    912c:	31 09       	sbc	r19, r1
    912e:	2f 87       	std	Y+15, r18	; 0x0f
    9130:	38 8b       	std	Y+16, r19	; 0x10
    9132:	01 2f       	mov	r16, r17
    9134:	10 e0       	ldi	r17, 0x00	; 0
    9136:	11 95       	neg	r17
    9138:	01 95       	neg	r16
    913a:	11 09       	sbc	r17, r1
    913c:	3f ef       	ldi	r19, 0xFF	; 255
    913e:	83 16       	cp	r8, r19
    9140:	93 06       	cpc	r9, r19
    9142:	21 f4       	brne	.+8      	; 0x914c <vfprintf+0x2fe>
    9144:	b7 01       	movw	r22, r14
    9146:	8e e2       	ldi	r24, 0x2E	; 46
    9148:	90 e0       	ldi	r25, 0x00	; 0
    914a:	b8 d5       	rcall	.+2928   	; 0x9cbc <fputc>
    914c:	c8 14       	cp	r12, r8
    914e:	d9 04       	cpc	r13, r9
    9150:	4c f0       	brlt	.+18     	; 0x9164 <vfprintf+0x316>
    9152:	8f 85       	ldd	r24, Y+15	; 0x0f
    9154:	98 89       	ldd	r25, Y+16	; 0x10
    9156:	88 15       	cp	r24, r8
    9158:	99 05       	cpc	r25, r9
    915a:	24 f4       	brge	.+8      	; 0x9164 <vfprintf+0x316>
    915c:	ed 85       	ldd	r30, Y+13	; 0x0d
    915e:	fe 85       	ldd	r31, Y+14	; 0x0e
    9160:	81 81       	ldd	r24, Z+1	; 0x01
    9162:	01 c0       	rjmp	.+2      	; 0x9166 <vfprintf+0x318>
    9164:	80 e3       	ldi	r24, 0x30	; 48
    9166:	f1 e0       	ldi	r31, 0x01	; 1
    9168:	8f 1a       	sub	r8, r31
    916a:	91 08       	sbc	r9, r1
    916c:	2d 85       	ldd	r18, Y+13	; 0x0d
    916e:	3e 85       	ldd	r19, Y+14	; 0x0e
    9170:	2f 5f       	subi	r18, 0xFF	; 255
    9172:	3f 4f       	sbci	r19, 0xFF	; 255
    9174:	2d 87       	std	Y+13, r18	; 0x0d
    9176:	3e 87       	std	Y+14, r19	; 0x0e
    9178:	80 16       	cp	r8, r16
    917a:	91 06       	cpc	r9, r17
    917c:	24 f0       	brlt	.+8      	; 0x9186 <vfprintf+0x338>
    917e:	b7 01       	movw	r22, r14
    9180:	90 e0       	ldi	r25, 0x00	; 0
    9182:	9c d5       	rcall	.+2872   	; 0x9cbc <fputc>
    9184:	db cf       	rjmp	.-74     	; 0x913c <vfprintf+0x2ee>
    9186:	c8 14       	cp	r12, r8
    9188:	d9 04       	cpc	r13, r9
    918a:	41 f4       	brne	.+16     	; 0x919c <vfprintf+0x34e>
    918c:	9a 81       	ldd	r25, Y+2	; 0x02
    918e:	96 33       	cpi	r25, 0x36	; 54
    9190:	20 f4       	brcc	.+8      	; 0x919a <vfprintf+0x34c>
    9192:	95 33       	cpi	r25, 0x35	; 53
    9194:	19 f4       	brne	.+6      	; 0x919c <vfprintf+0x34e>
    9196:	3c 85       	ldd	r19, Y+12	; 0x0c
    9198:	34 ff       	sbrs	r19, 4
    919a:	81 e3       	ldi	r24, 0x31	; 49
    919c:	b7 01       	movw	r22, r14
    919e:	90 e0       	ldi	r25, 0x00	; 0
    91a0:	48 c0       	rjmp	.+144    	; 0x9232 <vfprintf+0x3e4>
    91a2:	8a 81       	ldd	r24, Y+2	; 0x02
    91a4:	81 33       	cpi	r24, 0x31	; 49
    91a6:	19 f0       	breq	.+6      	; 0x91ae <vfprintf+0x360>
    91a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    91aa:	9f 7e       	andi	r25, 0xEF	; 239
    91ac:	9c 87       	std	Y+12, r25	; 0x0c
    91ae:	b7 01       	movw	r22, r14
    91b0:	90 e0       	ldi	r25, 0x00	; 0
    91b2:	84 d5       	rcall	.+2824   	; 0x9cbc <fputc>
    91b4:	11 11       	cpse	r17, r1
    91b6:	05 c0       	rjmp	.+10     	; 0x91c2 <vfprintf+0x374>
    91b8:	94 fc       	sbrc	r9, 4
    91ba:	16 c0       	rjmp	.+44     	; 0x91e8 <vfprintf+0x39a>
    91bc:	85 e6       	ldi	r24, 0x65	; 101
    91be:	90 e0       	ldi	r25, 0x00	; 0
    91c0:	15 c0       	rjmp	.+42     	; 0x91ec <vfprintf+0x39e>
    91c2:	b7 01       	movw	r22, r14
    91c4:	8e e2       	ldi	r24, 0x2E	; 46
    91c6:	90 e0       	ldi	r25, 0x00	; 0
    91c8:	79 d5       	rcall	.+2802   	; 0x9cbc <fputc>
    91ca:	1e 5f       	subi	r17, 0xFE	; 254
    91cc:	82 e0       	ldi	r24, 0x02	; 2
    91ce:	01 e0       	ldi	r16, 0x01	; 1
    91d0:	08 0f       	add	r16, r24
    91d2:	f3 01       	movw	r30, r6
    91d4:	e8 0f       	add	r30, r24
    91d6:	f1 1d       	adc	r31, r1
    91d8:	80 81       	ld	r24, Z
    91da:	b7 01       	movw	r22, r14
    91dc:	90 e0       	ldi	r25, 0x00	; 0
    91de:	6e d5       	rcall	.+2780   	; 0x9cbc <fputc>
    91e0:	80 2f       	mov	r24, r16
    91e2:	01 13       	cpse	r16, r17
    91e4:	f4 cf       	rjmp	.-24     	; 0x91ce <vfprintf+0x380>
    91e6:	e8 cf       	rjmp	.-48     	; 0x91b8 <vfprintf+0x36a>
    91e8:	85 e4       	ldi	r24, 0x45	; 69
    91ea:	90 e0       	ldi	r25, 0x00	; 0
    91ec:	b7 01       	movw	r22, r14
    91ee:	66 d5       	rcall	.+2764   	; 0x9cbc <fputc>
    91f0:	d7 fc       	sbrc	r13, 7
    91f2:	06 c0       	rjmp	.+12     	; 0x9200 <vfprintf+0x3b2>
    91f4:	c1 14       	cp	r12, r1
    91f6:	d1 04       	cpc	r13, r1
    91f8:	41 f4       	brne	.+16     	; 0x920a <vfprintf+0x3bc>
    91fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    91fc:	e4 ff       	sbrs	r30, 4
    91fe:	05 c0       	rjmp	.+10     	; 0x920a <vfprintf+0x3bc>
    9200:	d1 94       	neg	r13
    9202:	c1 94       	neg	r12
    9204:	d1 08       	sbc	r13, r1
    9206:	8d e2       	ldi	r24, 0x2D	; 45
    9208:	01 c0       	rjmp	.+2      	; 0x920c <vfprintf+0x3be>
    920a:	8b e2       	ldi	r24, 0x2B	; 43
    920c:	b7 01       	movw	r22, r14
    920e:	90 e0       	ldi	r25, 0x00	; 0
    9210:	55 d5       	rcall	.+2730   	; 0x9cbc <fputc>
    9212:	80 e3       	ldi	r24, 0x30	; 48
    9214:	2a e0       	ldi	r18, 0x0A	; 10
    9216:	c2 16       	cp	r12, r18
    9218:	d1 04       	cpc	r13, r1
    921a:	2c f0       	brlt	.+10     	; 0x9226 <vfprintf+0x3d8>
    921c:	8f 5f       	subi	r24, 0xFF	; 255
    921e:	fa e0       	ldi	r31, 0x0A	; 10
    9220:	cf 1a       	sub	r12, r31
    9222:	d1 08       	sbc	r13, r1
    9224:	f7 cf       	rjmp	.-18     	; 0x9214 <vfprintf+0x3c6>
    9226:	b7 01       	movw	r22, r14
    9228:	90 e0       	ldi	r25, 0x00	; 0
    922a:	48 d5       	rcall	.+2704   	; 0x9cbc <fputc>
    922c:	b7 01       	movw	r22, r14
    922e:	c6 01       	movw	r24, r12
    9230:	c0 96       	adiw	r24, 0x30	; 48
    9232:	44 d5       	rcall	.+2696   	; 0x9cbc <fputc>
    9234:	49 c1       	rjmp	.+658    	; 0x94c8 <vfprintf+0x67a>
    9236:	83 36       	cpi	r24, 0x63	; 99
    9238:	31 f0       	breq	.+12     	; 0x9246 <vfprintf+0x3f8>
    923a:	83 37       	cpi	r24, 0x73	; 115
    923c:	79 f0       	breq	.+30     	; 0x925c <vfprintf+0x40e>
    923e:	83 35       	cpi	r24, 0x53	; 83
    9240:	09 f0       	breq	.+2      	; 0x9244 <vfprintf+0x3f6>
    9242:	52 c0       	rjmp	.+164    	; 0x92e8 <vfprintf+0x49a>
    9244:	1f c0       	rjmp	.+62     	; 0x9284 <vfprintf+0x436>
    9246:	56 01       	movw	r10, r12
    9248:	32 e0       	ldi	r19, 0x02	; 2
    924a:	a3 0e       	add	r10, r19
    924c:	b1 1c       	adc	r11, r1
    924e:	f6 01       	movw	r30, r12
    9250:	80 81       	ld	r24, Z
    9252:	89 83       	std	Y+1, r24	; 0x01
    9254:	01 e0       	ldi	r16, 0x01	; 1
    9256:	10 e0       	ldi	r17, 0x00	; 0
    9258:	63 01       	movw	r12, r6
    925a:	11 c0       	rjmp	.+34     	; 0x927e <vfprintf+0x430>
    925c:	56 01       	movw	r10, r12
    925e:	f2 e0       	ldi	r31, 0x02	; 2
    9260:	af 0e       	add	r10, r31
    9262:	b1 1c       	adc	r11, r1
    9264:	f6 01       	movw	r30, r12
    9266:	c0 80       	ld	r12, Z
    9268:	d1 80       	ldd	r13, Z+1	; 0x01
    926a:	96 fe       	sbrs	r9, 6
    926c:	03 c0       	rjmp	.+6      	; 0x9274 <vfprintf+0x426>
    926e:	61 2f       	mov	r22, r17
    9270:	70 e0       	ldi	r23, 0x00	; 0
    9272:	02 c0       	rjmp	.+4      	; 0x9278 <vfprintf+0x42a>
    9274:	6f ef       	ldi	r22, 0xFF	; 255
    9276:	7f ef       	ldi	r23, 0xFF	; 255
    9278:	c6 01       	movw	r24, r12
    927a:	cb d4       	rcall	.+2454   	; 0x9c12 <strnlen>
    927c:	8c 01       	movw	r16, r24
    927e:	f9 2d       	mov	r31, r9
    9280:	ff 77       	andi	r31, 0x7F	; 127
    9282:	13 c0       	rjmp	.+38     	; 0x92aa <vfprintf+0x45c>
    9284:	56 01       	movw	r10, r12
    9286:	22 e0       	ldi	r18, 0x02	; 2
    9288:	a2 0e       	add	r10, r18
    928a:	b1 1c       	adc	r11, r1
    928c:	f6 01       	movw	r30, r12
    928e:	c0 80       	ld	r12, Z
    9290:	d1 80       	ldd	r13, Z+1	; 0x01
    9292:	96 fe       	sbrs	r9, 6
    9294:	03 c0       	rjmp	.+6      	; 0x929c <vfprintf+0x44e>
    9296:	61 2f       	mov	r22, r17
    9298:	70 e0       	ldi	r23, 0x00	; 0
    929a:	02 c0       	rjmp	.+4      	; 0x92a0 <vfprintf+0x452>
    929c:	6f ef       	ldi	r22, 0xFF	; 255
    929e:	7f ef       	ldi	r23, 0xFF	; 255
    92a0:	c6 01       	movw	r24, r12
    92a2:	9a d4       	rcall	.+2356   	; 0x9bd8 <strnlen_P>
    92a4:	8c 01       	movw	r16, r24
    92a6:	f9 2d       	mov	r31, r9
    92a8:	f0 68       	ori	r31, 0x80	; 128
    92aa:	9f 2e       	mov	r9, r31
    92ac:	f3 fd       	sbrc	r31, 3
    92ae:	18 c0       	rjmp	.+48     	; 0x92e0 <vfprintf+0x492>
    92b0:	85 2d       	mov	r24, r5
    92b2:	90 e0       	ldi	r25, 0x00	; 0
    92b4:	08 17       	cp	r16, r24
    92b6:	19 07       	cpc	r17, r25
    92b8:	98 f4       	brcc	.+38     	; 0x92e0 <vfprintf+0x492>
    92ba:	b7 01       	movw	r22, r14
    92bc:	80 e2       	ldi	r24, 0x20	; 32
    92be:	90 e0       	ldi	r25, 0x00	; 0
    92c0:	fd d4       	rcall	.+2554   	; 0x9cbc <fputc>
    92c2:	5a 94       	dec	r5
    92c4:	f5 cf       	rjmp	.-22     	; 0x92b0 <vfprintf+0x462>
    92c6:	f6 01       	movw	r30, r12
    92c8:	97 fc       	sbrc	r9, 7
    92ca:	85 91       	lpm	r24, Z+
    92cc:	97 fe       	sbrs	r9, 7
    92ce:	81 91       	ld	r24, Z+
    92d0:	6f 01       	movw	r12, r30
    92d2:	b7 01       	movw	r22, r14
    92d4:	90 e0       	ldi	r25, 0x00	; 0
    92d6:	f2 d4       	rcall	.+2532   	; 0x9cbc <fputc>
    92d8:	51 10       	cpse	r5, r1
    92da:	5a 94       	dec	r5
    92dc:	01 50       	subi	r16, 0x01	; 1
    92de:	11 09       	sbc	r17, r1
    92e0:	01 15       	cp	r16, r1
    92e2:	11 05       	cpc	r17, r1
    92e4:	81 f7       	brne	.-32     	; 0x92c6 <vfprintf+0x478>
    92e6:	f0 c0       	rjmp	.+480    	; 0x94c8 <vfprintf+0x67a>
    92e8:	84 36       	cpi	r24, 0x64	; 100
    92ea:	11 f0       	breq	.+4      	; 0x92f0 <vfprintf+0x4a2>
    92ec:	89 36       	cpi	r24, 0x69	; 105
    92ee:	59 f5       	brne	.+86     	; 0x9346 <vfprintf+0x4f8>
    92f0:	56 01       	movw	r10, r12
    92f2:	97 fe       	sbrs	r9, 7
    92f4:	09 c0       	rjmp	.+18     	; 0x9308 <vfprintf+0x4ba>
    92f6:	24 e0       	ldi	r18, 0x04	; 4
    92f8:	a2 0e       	add	r10, r18
    92fa:	b1 1c       	adc	r11, r1
    92fc:	f6 01       	movw	r30, r12
    92fe:	60 81       	ld	r22, Z
    9300:	71 81       	ldd	r23, Z+1	; 0x01
    9302:	82 81       	ldd	r24, Z+2	; 0x02
    9304:	93 81       	ldd	r25, Z+3	; 0x03
    9306:	0a c0       	rjmp	.+20     	; 0x931c <vfprintf+0x4ce>
    9308:	f2 e0       	ldi	r31, 0x02	; 2
    930a:	af 0e       	add	r10, r31
    930c:	b1 1c       	adc	r11, r1
    930e:	f6 01       	movw	r30, r12
    9310:	60 81       	ld	r22, Z
    9312:	71 81       	ldd	r23, Z+1	; 0x01
    9314:	07 2e       	mov	r0, r23
    9316:	00 0c       	add	r0, r0
    9318:	88 0b       	sbc	r24, r24
    931a:	99 0b       	sbc	r25, r25
    931c:	f9 2d       	mov	r31, r9
    931e:	ff 76       	andi	r31, 0x6F	; 111
    9320:	9f 2e       	mov	r9, r31
    9322:	97 ff       	sbrs	r25, 7
    9324:	09 c0       	rjmp	.+18     	; 0x9338 <vfprintf+0x4ea>
    9326:	90 95       	com	r25
    9328:	80 95       	com	r24
    932a:	70 95       	com	r23
    932c:	61 95       	neg	r22
    932e:	7f 4f       	sbci	r23, 0xFF	; 255
    9330:	8f 4f       	sbci	r24, 0xFF	; 255
    9332:	9f 4f       	sbci	r25, 0xFF	; 255
    9334:	f0 68       	ori	r31, 0x80	; 128
    9336:	9f 2e       	mov	r9, r31
    9338:	2a e0       	ldi	r18, 0x0A	; 10
    933a:	30 e0       	ldi	r19, 0x00	; 0
    933c:	a3 01       	movw	r20, r6
    933e:	65 d5       	rcall	.+2762   	; 0x9e0a <__ultoa_invert>
    9340:	c8 2e       	mov	r12, r24
    9342:	c6 18       	sub	r12, r6
    9344:	3e c0       	rjmp	.+124    	; 0x93c2 <vfprintf+0x574>
    9346:	09 2d       	mov	r16, r9
    9348:	85 37       	cpi	r24, 0x75	; 117
    934a:	21 f4       	brne	.+8      	; 0x9354 <vfprintf+0x506>
    934c:	0f 7e       	andi	r16, 0xEF	; 239
    934e:	2a e0       	ldi	r18, 0x0A	; 10
    9350:	30 e0       	ldi	r19, 0x00	; 0
    9352:	1d c0       	rjmp	.+58     	; 0x938e <vfprintf+0x540>
    9354:	09 7f       	andi	r16, 0xF9	; 249
    9356:	8f 36       	cpi	r24, 0x6F	; 111
    9358:	91 f0       	breq	.+36     	; 0x937e <vfprintf+0x530>
    935a:	18 f4       	brcc	.+6      	; 0x9362 <vfprintf+0x514>
    935c:	88 35       	cpi	r24, 0x58	; 88
    935e:	59 f0       	breq	.+22     	; 0x9376 <vfprintf+0x528>
    9360:	bc c0       	rjmp	.+376    	; 0x94da <vfprintf+0x68c>
    9362:	80 37       	cpi	r24, 0x70	; 112
    9364:	19 f0       	breq	.+6      	; 0x936c <vfprintf+0x51e>
    9366:	88 37       	cpi	r24, 0x78	; 120
    9368:	11 f0       	breq	.+4      	; 0x936e <vfprintf+0x520>
    936a:	b7 c0       	rjmp	.+366    	; 0x94da <vfprintf+0x68c>
    936c:	00 61       	ori	r16, 0x10	; 16
    936e:	04 ff       	sbrs	r16, 4
    9370:	09 c0       	rjmp	.+18     	; 0x9384 <vfprintf+0x536>
    9372:	04 60       	ori	r16, 0x04	; 4
    9374:	07 c0       	rjmp	.+14     	; 0x9384 <vfprintf+0x536>
    9376:	94 fe       	sbrs	r9, 4
    9378:	08 c0       	rjmp	.+16     	; 0x938a <vfprintf+0x53c>
    937a:	06 60       	ori	r16, 0x06	; 6
    937c:	06 c0       	rjmp	.+12     	; 0x938a <vfprintf+0x53c>
    937e:	28 e0       	ldi	r18, 0x08	; 8
    9380:	30 e0       	ldi	r19, 0x00	; 0
    9382:	05 c0       	rjmp	.+10     	; 0x938e <vfprintf+0x540>
    9384:	20 e1       	ldi	r18, 0x10	; 16
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	02 c0       	rjmp	.+4      	; 0x938e <vfprintf+0x540>
    938a:	20 e1       	ldi	r18, 0x10	; 16
    938c:	32 e0       	ldi	r19, 0x02	; 2
    938e:	56 01       	movw	r10, r12
    9390:	07 ff       	sbrs	r16, 7
    9392:	09 c0       	rjmp	.+18     	; 0x93a6 <vfprintf+0x558>
    9394:	84 e0       	ldi	r24, 0x04	; 4
    9396:	a8 0e       	add	r10, r24
    9398:	b1 1c       	adc	r11, r1
    939a:	f6 01       	movw	r30, r12
    939c:	60 81       	ld	r22, Z
    939e:	71 81       	ldd	r23, Z+1	; 0x01
    93a0:	82 81       	ldd	r24, Z+2	; 0x02
    93a2:	93 81       	ldd	r25, Z+3	; 0x03
    93a4:	08 c0       	rjmp	.+16     	; 0x93b6 <vfprintf+0x568>
    93a6:	f2 e0       	ldi	r31, 0x02	; 2
    93a8:	af 0e       	add	r10, r31
    93aa:	b1 1c       	adc	r11, r1
    93ac:	f6 01       	movw	r30, r12
    93ae:	60 81       	ld	r22, Z
    93b0:	71 81       	ldd	r23, Z+1	; 0x01
    93b2:	80 e0       	ldi	r24, 0x00	; 0
    93b4:	90 e0       	ldi	r25, 0x00	; 0
    93b6:	a3 01       	movw	r20, r6
    93b8:	28 d5       	rcall	.+2640   	; 0x9e0a <__ultoa_invert>
    93ba:	c8 2e       	mov	r12, r24
    93bc:	c6 18       	sub	r12, r6
    93be:	0f 77       	andi	r16, 0x7F	; 127
    93c0:	90 2e       	mov	r9, r16
    93c2:	96 fe       	sbrs	r9, 6
    93c4:	0b c0       	rjmp	.+22     	; 0x93dc <vfprintf+0x58e>
    93c6:	09 2d       	mov	r16, r9
    93c8:	0e 7f       	andi	r16, 0xFE	; 254
    93ca:	c1 16       	cp	r12, r17
    93cc:	50 f4       	brcc	.+20     	; 0x93e2 <vfprintf+0x594>
    93ce:	94 fe       	sbrs	r9, 4
    93d0:	0a c0       	rjmp	.+20     	; 0x93e6 <vfprintf+0x598>
    93d2:	92 fc       	sbrc	r9, 2
    93d4:	08 c0       	rjmp	.+16     	; 0x93e6 <vfprintf+0x598>
    93d6:	09 2d       	mov	r16, r9
    93d8:	0e 7e       	andi	r16, 0xEE	; 238
    93da:	05 c0       	rjmp	.+10     	; 0x93e6 <vfprintf+0x598>
    93dc:	dc 2c       	mov	r13, r12
    93de:	09 2d       	mov	r16, r9
    93e0:	03 c0       	rjmp	.+6      	; 0x93e8 <vfprintf+0x59a>
    93e2:	dc 2c       	mov	r13, r12
    93e4:	01 c0       	rjmp	.+2      	; 0x93e8 <vfprintf+0x59a>
    93e6:	d1 2e       	mov	r13, r17
    93e8:	04 ff       	sbrs	r16, 4
    93ea:	0d c0       	rjmp	.+26     	; 0x9406 <vfprintf+0x5b8>
    93ec:	fe 01       	movw	r30, r28
    93ee:	ec 0d       	add	r30, r12
    93f0:	f1 1d       	adc	r31, r1
    93f2:	80 81       	ld	r24, Z
    93f4:	80 33       	cpi	r24, 0x30	; 48
    93f6:	11 f4       	brne	.+4      	; 0x93fc <vfprintf+0x5ae>
    93f8:	09 7e       	andi	r16, 0xE9	; 233
    93fa:	09 c0       	rjmp	.+18     	; 0x940e <vfprintf+0x5c0>
    93fc:	02 ff       	sbrs	r16, 2
    93fe:	06 c0       	rjmp	.+12     	; 0x940c <vfprintf+0x5be>
    9400:	d3 94       	inc	r13
    9402:	d3 94       	inc	r13
    9404:	04 c0       	rjmp	.+8      	; 0x940e <vfprintf+0x5c0>
    9406:	80 2f       	mov	r24, r16
    9408:	86 78       	andi	r24, 0x86	; 134
    940a:	09 f0       	breq	.+2      	; 0x940e <vfprintf+0x5c0>
    940c:	d3 94       	inc	r13
    940e:	03 fd       	sbrc	r16, 3
    9410:	10 c0       	rjmp	.+32     	; 0x9432 <vfprintf+0x5e4>
    9412:	00 ff       	sbrs	r16, 0
    9414:	06 c0       	rjmp	.+12     	; 0x9422 <vfprintf+0x5d4>
    9416:	1c 2d       	mov	r17, r12
    9418:	d5 14       	cp	r13, r5
    941a:	78 f4       	brcc	.+30     	; 0x943a <vfprintf+0x5ec>
    941c:	15 0d       	add	r17, r5
    941e:	1d 19       	sub	r17, r13
    9420:	0c c0       	rjmp	.+24     	; 0x943a <vfprintf+0x5ec>
    9422:	d5 14       	cp	r13, r5
    9424:	50 f4       	brcc	.+20     	; 0x943a <vfprintf+0x5ec>
    9426:	b7 01       	movw	r22, r14
    9428:	80 e2       	ldi	r24, 0x20	; 32
    942a:	90 e0       	ldi	r25, 0x00	; 0
    942c:	47 d4       	rcall	.+2190   	; 0x9cbc <fputc>
    942e:	d3 94       	inc	r13
    9430:	f8 cf       	rjmp	.-16     	; 0x9422 <vfprintf+0x5d4>
    9432:	d5 14       	cp	r13, r5
    9434:	10 f4       	brcc	.+4      	; 0x943a <vfprintf+0x5ec>
    9436:	5d 18       	sub	r5, r13
    9438:	01 c0       	rjmp	.+2      	; 0x943c <vfprintf+0x5ee>
    943a:	51 2c       	mov	r5, r1
    943c:	04 ff       	sbrs	r16, 4
    943e:	0f c0       	rjmp	.+30     	; 0x945e <vfprintf+0x610>
    9440:	b7 01       	movw	r22, r14
    9442:	80 e3       	ldi	r24, 0x30	; 48
    9444:	90 e0       	ldi	r25, 0x00	; 0
    9446:	3a d4       	rcall	.+2164   	; 0x9cbc <fputc>
    9448:	02 ff       	sbrs	r16, 2
    944a:	16 c0       	rjmp	.+44     	; 0x9478 <vfprintf+0x62a>
    944c:	01 fd       	sbrc	r16, 1
    944e:	03 c0       	rjmp	.+6      	; 0x9456 <vfprintf+0x608>
    9450:	88 e7       	ldi	r24, 0x78	; 120
    9452:	90 e0       	ldi	r25, 0x00	; 0
    9454:	02 c0       	rjmp	.+4      	; 0x945a <vfprintf+0x60c>
    9456:	88 e5       	ldi	r24, 0x58	; 88
    9458:	90 e0       	ldi	r25, 0x00	; 0
    945a:	b7 01       	movw	r22, r14
    945c:	0c c0       	rjmp	.+24     	; 0x9476 <vfprintf+0x628>
    945e:	80 2f       	mov	r24, r16
    9460:	86 78       	andi	r24, 0x86	; 134
    9462:	51 f0       	breq	.+20     	; 0x9478 <vfprintf+0x62a>
    9464:	01 ff       	sbrs	r16, 1
    9466:	02 c0       	rjmp	.+4      	; 0x946c <vfprintf+0x61e>
    9468:	8b e2       	ldi	r24, 0x2B	; 43
    946a:	01 c0       	rjmp	.+2      	; 0x946e <vfprintf+0x620>
    946c:	80 e2       	ldi	r24, 0x20	; 32
    946e:	07 fd       	sbrc	r16, 7
    9470:	8d e2       	ldi	r24, 0x2D	; 45
    9472:	b7 01       	movw	r22, r14
    9474:	90 e0       	ldi	r25, 0x00	; 0
    9476:	22 d4       	rcall	.+2116   	; 0x9cbc <fputc>
    9478:	c1 16       	cp	r12, r17
    947a:	30 f4       	brcc	.+12     	; 0x9488 <vfprintf+0x63a>
    947c:	b7 01       	movw	r22, r14
    947e:	80 e3       	ldi	r24, 0x30	; 48
    9480:	90 e0       	ldi	r25, 0x00	; 0
    9482:	1c d4       	rcall	.+2104   	; 0x9cbc <fputc>
    9484:	11 50       	subi	r17, 0x01	; 1
    9486:	f8 cf       	rjmp	.-16     	; 0x9478 <vfprintf+0x62a>
    9488:	ca 94       	dec	r12
    948a:	f3 01       	movw	r30, r6
    948c:	ec 0d       	add	r30, r12
    948e:	f1 1d       	adc	r31, r1
    9490:	80 81       	ld	r24, Z
    9492:	b7 01       	movw	r22, r14
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	12 d4       	rcall	.+2084   	; 0x9cbc <fputc>
    9498:	c1 10       	cpse	r12, r1
    949a:	f6 cf       	rjmp	.-20     	; 0x9488 <vfprintf+0x63a>
    949c:	15 c0       	rjmp	.+42     	; 0x94c8 <vfprintf+0x67a>
    949e:	f4 e0       	ldi	r31, 0x04	; 4
    94a0:	f5 15       	cp	r31, r5
    94a2:	50 f5       	brcc	.+84     	; 0x94f8 <vfprintf+0x6aa>
    94a4:	84 e0       	ldi	r24, 0x04	; 4
    94a6:	58 1a       	sub	r5, r24
    94a8:	93 fe       	sbrs	r9, 3
    94aa:	1e c0       	rjmp	.+60     	; 0x94e8 <vfprintf+0x69a>
    94ac:	01 11       	cpse	r16, r1
    94ae:	25 c0       	rjmp	.+74     	; 0x94fa <vfprintf+0x6ac>
    94b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    94b2:	23 ff       	sbrs	r18, 3
    94b4:	27 c0       	rjmp	.+78     	; 0x9504 <vfprintf+0x6b6>
    94b6:	06 e6       	ldi	r16, 0x66	; 102
    94b8:	12 e0       	ldi	r17, 0x02	; 2
    94ba:	39 2d       	mov	r19, r9
    94bc:	30 71       	andi	r19, 0x10	; 16
    94be:	93 2e       	mov	r9, r19
    94c0:	f8 01       	movw	r30, r16
    94c2:	84 91       	lpm	r24, Z
    94c4:	81 11       	cpse	r24, r1
    94c6:	21 c0       	rjmp	.+66     	; 0x950a <vfprintf+0x6bc>
    94c8:	55 20       	and	r5, r5
    94ca:	09 f4       	brne	.+2      	; 0x94ce <vfprintf+0x680>
    94cc:	fc cc       	rjmp	.-1544   	; 0x8ec6 <vfprintf+0x78>
    94ce:	b7 01       	movw	r22, r14
    94d0:	80 e2       	ldi	r24, 0x20	; 32
    94d2:	90 e0       	ldi	r25, 0x00	; 0
    94d4:	f3 d3       	rcall	.+2022   	; 0x9cbc <fputc>
    94d6:	5a 94       	dec	r5
    94d8:	f7 cf       	rjmp	.-18     	; 0x94c8 <vfprintf+0x67a>
    94da:	f7 01       	movw	r30, r14
    94dc:	86 81       	ldd	r24, Z+6	; 0x06
    94de:	97 81       	ldd	r25, Z+7	; 0x07
    94e0:	23 c0       	rjmp	.+70     	; 0x9528 <vfprintf+0x6da>
    94e2:	8f ef       	ldi	r24, 0xFF	; 255
    94e4:	9f ef       	ldi	r25, 0xFF	; 255
    94e6:	20 c0       	rjmp	.+64     	; 0x9528 <vfprintf+0x6da>
    94e8:	b7 01       	movw	r22, r14
    94ea:	80 e2       	ldi	r24, 0x20	; 32
    94ec:	90 e0       	ldi	r25, 0x00	; 0
    94ee:	e6 d3       	rcall	.+1996   	; 0x9cbc <fputc>
    94f0:	5a 94       	dec	r5
    94f2:	51 10       	cpse	r5, r1
    94f4:	f9 cf       	rjmp	.-14     	; 0x94e8 <vfprintf+0x69a>
    94f6:	da cf       	rjmp	.-76     	; 0x94ac <vfprintf+0x65e>
    94f8:	51 2c       	mov	r5, r1
    94fa:	b7 01       	movw	r22, r14
    94fc:	80 2f       	mov	r24, r16
    94fe:	90 e0       	ldi	r25, 0x00	; 0
    9500:	dd d3       	rcall	.+1978   	; 0x9cbc <fputc>
    9502:	d6 cf       	rjmp	.-84     	; 0x94b0 <vfprintf+0x662>
    9504:	0a e6       	ldi	r16, 0x6A	; 106
    9506:	12 e0       	ldi	r17, 0x02	; 2
    9508:	d8 cf       	rjmp	.-80     	; 0x94ba <vfprintf+0x66c>
    950a:	91 10       	cpse	r9, r1
    950c:	80 52       	subi	r24, 0x20	; 32
    950e:	b7 01       	movw	r22, r14
    9510:	90 e0       	ldi	r25, 0x00	; 0
    9512:	d4 d3       	rcall	.+1960   	; 0x9cbc <fputc>
    9514:	0f 5f       	subi	r16, 0xFF	; 255
    9516:	1f 4f       	sbci	r17, 0xFF	; 255
    9518:	d3 cf       	rjmp	.-90     	; 0x94c0 <vfprintf+0x672>
    951a:	23 e0       	ldi	r18, 0x03	; 3
    951c:	25 15       	cp	r18, r5
    951e:	10 f4       	brcc	.+4      	; 0x9524 <vfprintf+0x6d6>
    9520:	83 e0       	ldi	r24, 0x03	; 3
    9522:	c1 cf       	rjmp	.-126    	; 0x94a6 <vfprintf+0x658>
    9524:	51 2c       	mov	r5, r1
    9526:	c4 cf       	rjmp	.-120    	; 0x94b0 <vfprintf+0x662>
    9528:	60 96       	adiw	r28, 0x10	; 16
    952a:	cd bf       	out	0x3d, r28	; 61
    952c:	de bf       	out	0x3e, r29	; 62
    952e:	df 91       	pop	r29
    9530:	cf 91       	pop	r28
    9532:	1f 91       	pop	r17
    9534:	0f 91       	pop	r16
    9536:	ff 90       	pop	r15
    9538:	ef 90       	pop	r14
    953a:	df 90       	pop	r13
    953c:	cf 90       	pop	r12
    953e:	bf 90       	pop	r11
    9540:	af 90       	pop	r10
    9542:	9f 90       	pop	r9
    9544:	8f 90       	pop	r8
    9546:	7f 90       	pop	r7
    9548:	6f 90       	pop	r6
    954a:	5f 90       	pop	r5
    954c:	4f 90       	pop	r4
    954e:	3f 90       	pop	r3
    9550:	2f 90       	pop	r2
    9552:	08 95       	ret

00009554 <__mulsi3>:
    9554:	db 01       	movw	r26, r22
    9556:	8f 93       	push	r24
    9558:	9f 93       	push	r25
    955a:	52 d0       	rcall	.+164    	; 0x9600 <__muluhisi3>
    955c:	bf 91       	pop	r27
    955e:	af 91       	pop	r26
    9560:	a2 9f       	mul	r26, r18
    9562:	80 0d       	add	r24, r0
    9564:	91 1d       	adc	r25, r1
    9566:	a3 9f       	mul	r26, r19
    9568:	90 0d       	add	r25, r0
    956a:	b2 9f       	mul	r27, r18
    956c:	90 0d       	add	r25, r0
    956e:	11 24       	eor	r1, r1
    9570:	08 95       	ret

00009572 <__udivmodsi4>:
    9572:	a1 e2       	ldi	r26, 0x21	; 33
    9574:	1a 2e       	mov	r1, r26
    9576:	aa 1b       	sub	r26, r26
    9578:	bb 1b       	sub	r27, r27
    957a:	fd 01       	movw	r30, r26
    957c:	0d c0       	rjmp	.+26     	; 0x9598 <__udivmodsi4_ep>

0000957e <__udivmodsi4_loop>:
    957e:	aa 1f       	adc	r26, r26
    9580:	bb 1f       	adc	r27, r27
    9582:	ee 1f       	adc	r30, r30
    9584:	ff 1f       	adc	r31, r31
    9586:	a2 17       	cp	r26, r18
    9588:	b3 07       	cpc	r27, r19
    958a:	e4 07       	cpc	r30, r20
    958c:	f5 07       	cpc	r31, r21
    958e:	20 f0       	brcs	.+8      	; 0x9598 <__udivmodsi4_ep>
    9590:	a2 1b       	sub	r26, r18
    9592:	b3 0b       	sbc	r27, r19
    9594:	e4 0b       	sbc	r30, r20
    9596:	f5 0b       	sbc	r31, r21

00009598 <__udivmodsi4_ep>:
    9598:	66 1f       	adc	r22, r22
    959a:	77 1f       	adc	r23, r23
    959c:	88 1f       	adc	r24, r24
    959e:	99 1f       	adc	r25, r25
    95a0:	1a 94       	dec	r1
    95a2:	69 f7       	brne	.-38     	; 0x957e <__udivmodsi4_loop>
    95a4:	60 95       	com	r22
    95a6:	70 95       	com	r23
    95a8:	80 95       	com	r24
    95aa:	90 95       	com	r25
    95ac:	9b 01       	movw	r18, r22
    95ae:	ac 01       	movw	r20, r24
    95b0:	bd 01       	movw	r22, r26
    95b2:	cf 01       	movw	r24, r30
    95b4:	08 95       	ret

000095b6 <__divmodsi4>:
    95b6:	05 2e       	mov	r0, r21
    95b8:	97 fb       	bst	r25, 7
    95ba:	16 f4       	brtc	.+4      	; 0x95c0 <__divmodsi4+0xa>
    95bc:	00 94       	com	r0
    95be:	0f d0       	rcall	.+30     	; 0x95de <__negsi2>
    95c0:	57 fd       	sbrc	r21, 7
    95c2:	05 d0       	rcall	.+10     	; 0x95ce <__divmodsi4_neg2>
    95c4:	d6 df       	rcall	.-84     	; 0x9572 <__udivmodsi4>
    95c6:	07 fc       	sbrc	r0, 7
    95c8:	02 d0       	rcall	.+4      	; 0x95ce <__divmodsi4_neg2>
    95ca:	46 f4       	brtc	.+16     	; 0x95dc <__divmodsi4_exit>
    95cc:	08 c0       	rjmp	.+16     	; 0x95de <__negsi2>

000095ce <__divmodsi4_neg2>:
    95ce:	50 95       	com	r21
    95d0:	40 95       	com	r20
    95d2:	30 95       	com	r19
    95d4:	21 95       	neg	r18
    95d6:	3f 4f       	sbci	r19, 0xFF	; 255
    95d8:	4f 4f       	sbci	r20, 0xFF	; 255
    95da:	5f 4f       	sbci	r21, 0xFF	; 255

000095dc <__divmodsi4_exit>:
    95dc:	08 95       	ret

000095de <__negsi2>:
    95de:	90 95       	com	r25
    95e0:	80 95       	com	r24
    95e2:	70 95       	com	r23
    95e4:	61 95       	neg	r22
    95e6:	7f 4f       	sbci	r23, 0xFF	; 255
    95e8:	8f 4f       	sbci	r24, 0xFF	; 255
    95ea:	9f 4f       	sbci	r25, 0xFF	; 255
    95ec:	08 95       	ret

000095ee <__tablejump2__>:
    95ee:	ee 0f       	add	r30, r30
    95f0:	ff 1f       	adc	r31, r31
    95f2:	88 1f       	adc	r24, r24
    95f4:	8b bf       	out	0x3b, r24	; 59
    95f6:	07 90       	elpm	r0, Z+
    95f8:	f6 91       	elpm	r31, Z
    95fa:	e0 2d       	mov	r30, r0
    95fc:	1b be       	out	0x3b, r1	; 59
    95fe:	19 94       	eijmp

00009600 <__muluhisi3>:
    9600:	e3 d0       	rcall	.+454    	; 0x97c8 <__umulhisi3>
    9602:	a5 9f       	mul	r26, r21
    9604:	90 0d       	add	r25, r0
    9606:	b4 9f       	mul	r27, r20
    9608:	90 0d       	add	r25, r0
    960a:	a4 9f       	mul	r26, r20
    960c:	80 0d       	add	r24, r0
    960e:	91 1d       	adc	r25, r1
    9610:	11 24       	eor	r1, r1
    9612:	08 95       	ret

00009614 <__muldi3>:
    9614:	df 93       	push	r29
    9616:	cf 93       	push	r28
    9618:	1f 93       	push	r17
    961a:	0f 93       	push	r16
    961c:	9a 9d       	mul	r25, r10
    961e:	f0 2d       	mov	r31, r0
    9620:	21 9f       	mul	r18, r17
    9622:	f0 0d       	add	r31, r0
    9624:	8b 9d       	mul	r24, r11
    9626:	f0 0d       	add	r31, r0
    9628:	8a 9d       	mul	r24, r10
    962a:	e0 2d       	mov	r30, r0
    962c:	f1 0d       	add	r31, r1
    962e:	03 9f       	mul	r16, r19
    9630:	f0 0d       	add	r31, r0
    9632:	02 9f       	mul	r16, r18
    9634:	e0 0d       	add	r30, r0
    9636:	f1 1d       	adc	r31, r1
    9638:	4e 9d       	mul	r20, r14
    963a:	e0 0d       	add	r30, r0
    963c:	f1 1d       	adc	r31, r1
    963e:	5e 9d       	mul	r21, r14
    9640:	f0 0d       	add	r31, r0
    9642:	4f 9d       	mul	r20, r15
    9644:	f0 0d       	add	r31, r0
    9646:	7f 93       	push	r23
    9648:	6f 93       	push	r22
    964a:	bf 92       	push	r11
    964c:	af 92       	push	r10
    964e:	5f 93       	push	r21
    9650:	4f 93       	push	r20
    9652:	d5 01       	movw	r26, r10
    9654:	b9 d0       	rcall	.+370    	; 0x97c8 <__umulhisi3>
    9656:	8b 01       	movw	r16, r22
    9658:	ac 01       	movw	r20, r24
    965a:	d7 01       	movw	r26, r14
    965c:	b5 d0       	rcall	.+362    	; 0x97c8 <__umulhisi3>
    965e:	eb 01       	movw	r28, r22
    9660:	e8 0f       	add	r30, r24
    9662:	f9 1f       	adc	r31, r25
    9664:	d6 01       	movw	r26, r12
    9666:	1f d0       	rcall	.+62     	; 0x96a6 <__muldi3_6>
    9668:	2f 91       	pop	r18
    966a:	3f 91       	pop	r19
    966c:	d6 01       	movw	r26, r12
    966e:	ac d0       	rcall	.+344    	; 0x97c8 <__umulhisi3>
    9670:	c6 0f       	add	r28, r22
    9672:	d7 1f       	adc	r29, r23
    9674:	e8 1f       	adc	r30, r24
    9676:	f9 1f       	adc	r31, r25
    9678:	af 91       	pop	r26
    967a:	bf 91       	pop	r27
    967c:	14 d0       	rcall	.+40     	; 0x96a6 <__muldi3_6>
    967e:	2f 91       	pop	r18
    9680:	3f 91       	pop	r19
    9682:	a2 d0       	rcall	.+324    	; 0x97c8 <__umulhisi3>
    9684:	c6 0f       	add	r28, r22
    9686:	d7 1f       	adc	r29, r23
    9688:	e8 1f       	adc	r30, r24
    968a:	f9 1f       	adc	r31, r25
    968c:	d6 01       	movw	r26, r12
    968e:	9c d0       	rcall	.+312    	; 0x97c8 <__umulhisi3>
    9690:	e6 0f       	add	r30, r22
    9692:	f7 1f       	adc	r31, r23
    9694:	98 01       	movw	r18, r16
    9696:	be 01       	movw	r22, r28
    9698:	cf 01       	movw	r24, r30
    969a:	11 24       	eor	r1, r1
    969c:	0f 91       	pop	r16
    969e:	1f 91       	pop	r17
    96a0:	cf 91       	pop	r28
    96a2:	df 91       	pop	r29
    96a4:	08 95       	ret

000096a6 <__muldi3_6>:
    96a6:	90 d0       	rcall	.+288    	; 0x97c8 <__umulhisi3>
    96a8:	46 0f       	add	r20, r22
    96aa:	57 1f       	adc	r21, r23
    96ac:	c8 1f       	adc	r28, r24
    96ae:	d9 1f       	adc	r29, r25
    96b0:	08 f4       	brcc	.+2      	; 0x96b4 <__muldi3_6+0xe>
    96b2:	31 96       	adiw	r30, 0x01	; 1
    96b4:	08 95       	ret

000096b6 <__umoddi3>:
    96b6:	68 94       	set
    96b8:	01 c0       	rjmp	.+2      	; 0x96bc <__udivdi3_umoddi3>

000096ba <__udivdi3>:
    96ba:	e8 94       	clt

000096bc <__udivdi3_umoddi3>:
    96bc:	8f 92       	push	r8
    96be:	9f 92       	push	r9
    96c0:	cf 93       	push	r28
    96c2:	df 93       	push	r29
    96c4:	05 d0       	rcall	.+10     	; 0x96d0 <__udivmod64>
    96c6:	df 91       	pop	r29
    96c8:	cf 91       	pop	r28
    96ca:	9f 90       	pop	r9
    96cc:	8f 90       	pop	r8
    96ce:	08 95       	ret

000096d0 <__udivmod64>:
    96d0:	88 24       	eor	r8, r8
    96d2:	99 24       	eor	r9, r9
    96d4:	f4 01       	movw	r30, r8
    96d6:	e4 01       	movw	r28, r8
    96d8:	b0 e4       	ldi	r27, 0x40	; 64
    96da:	9f 93       	push	r25
    96dc:	aa 27       	eor	r26, r26
    96de:	9a 15       	cp	r25, r10
    96e0:	8b 04       	cpc	r8, r11
    96e2:	9c 04       	cpc	r9, r12
    96e4:	ed 05       	cpc	r30, r13
    96e6:	fe 05       	cpc	r31, r14
    96e8:	cf 05       	cpc	r28, r15
    96ea:	d0 07       	cpc	r29, r16
    96ec:	a1 07       	cpc	r26, r17
    96ee:	98 f4       	brcc	.+38     	; 0x9716 <__udivmod64+0x46>
    96f0:	ad 2f       	mov	r26, r29
    96f2:	dc 2f       	mov	r29, r28
    96f4:	cf 2f       	mov	r28, r31
    96f6:	fe 2f       	mov	r31, r30
    96f8:	e9 2d       	mov	r30, r9
    96fa:	98 2c       	mov	r9, r8
    96fc:	89 2e       	mov	r8, r25
    96fe:	98 2f       	mov	r25, r24
    9700:	87 2f       	mov	r24, r23
    9702:	76 2f       	mov	r23, r22
    9704:	65 2f       	mov	r22, r21
    9706:	54 2f       	mov	r21, r20
    9708:	43 2f       	mov	r20, r19
    970a:	32 2f       	mov	r19, r18
    970c:	22 27       	eor	r18, r18
    970e:	b8 50       	subi	r27, 0x08	; 8
    9710:	31 f7       	brne	.-52     	; 0x96de <__udivmod64+0xe>
    9712:	bf 91       	pop	r27
    9714:	27 c0       	rjmp	.+78     	; 0x9764 <__udivmod64+0x94>
    9716:	1b 2e       	mov	r1, r27
    9718:	bf 91       	pop	r27
    971a:	bb 27       	eor	r27, r27
    971c:	22 0f       	add	r18, r18
    971e:	33 1f       	adc	r19, r19
    9720:	44 1f       	adc	r20, r20
    9722:	55 1f       	adc	r21, r21
    9724:	66 1f       	adc	r22, r22
    9726:	77 1f       	adc	r23, r23
    9728:	88 1f       	adc	r24, r24
    972a:	99 1f       	adc	r25, r25
    972c:	88 1c       	adc	r8, r8
    972e:	99 1c       	adc	r9, r9
    9730:	ee 1f       	adc	r30, r30
    9732:	ff 1f       	adc	r31, r31
    9734:	cc 1f       	adc	r28, r28
    9736:	dd 1f       	adc	r29, r29
    9738:	aa 1f       	adc	r26, r26
    973a:	bb 1f       	adc	r27, r27
    973c:	8a 14       	cp	r8, r10
    973e:	9b 04       	cpc	r9, r11
    9740:	ec 05       	cpc	r30, r12
    9742:	fd 05       	cpc	r31, r13
    9744:	ce 05       	cpc	r28, r14
    9746:	df 05       	cpc	r29, r15
    9748:	a0 07       	cpc	r26, r16
    974a:	b1 07       	cpc	r27, r17
    974c:	48 f0       	brcs	.+18     	; 0x9760 <__udivmod64+0x90>
    974e:	8a 18       	sub	r8, r10
    9750:	9b 08       	sbc	r9, r11
    9752:	ec 09       	sbc	r30, r12
    9754:	fd 09       	sbc	r31, r13
    9756:	ce 09       	sbc	r28, r14
    9758:	df 09       	sbc	r29, r15
    975a:	a0 0b       	sbc	r26, r16
    975c:	b1 0b       	sbc	r27, r17
    975e:	21 60       	ori	r18, 0x01	; 1
    9760:	1a 94       	dec	r1
    9762:	e1 f6       	brne	.-72     	; 0x971c <__udivmod64+0x4c>
    9764:	2e f4       	brtc	.+10     	; 0x9770 <__udivmod64+0xa0>
    9766:	94 01       	movw	r18, r8
    9768:	af 01       	movw	r20, r30
    976a:	be 01       	movw	r22, r28
    976c:	cd 01       	movw	r24, r26
    976e:	00 0c       	add	r0, r0
    9770:	08 95       	ret

00009772 <__ashldi3>:
    9772:	0f 93       	push	r16
    9774:	08 30       	cpi	r16, 0x08	; 8
    9776:	90 f0       	brcs	.+36     	; 0x979c <__ashldi3+0x2a>
    9778:	98 2f       	mov	r25, r24
    977a:	87 2f       	mov	r24, r23
    977c:	76 2f       	mov	r23, r22
    977e:	65 2f       	mov	r22, r21
    9780:	54 2f       	mov	r21, r20
    9782:	43 2f       	mov	r20, r19
    9784:	32 2f       	mov	r19, r18
    9786:	22 27       	eor	r18, r18
    9788:	08 50       	subi	r16, 0x08	; 8
    978a:	f4 cf       	rjmp	.-24     	; 0x9774 <__ashldi3+0x2>
    978c:	22 0f       	add	r18, r18
    978e:	33 1f       	adc	r19, r19
    9790:	44 1f       	adc	r20, r20
    9792:	55 1f       	adc	r21, r21
    9794:	66 1f       	adc	r22, r22
    9796:	77 1f       	adc	r23, r23
    9798:	88 1f       	adc	r24, r24
    979a:	99 1f       	adc	r25, r25
    979c:	0a 95       	dec	r16
    979e:	b2 f7       	brpl	.-20     	; 0x978c <__ashldi3+0x1a>
    97a0:	0f 91       	pop	r16
    97a2:	08 95       	ret

000097a4 <__adddi3>:
    97a4:	2a 0d       	add	r18, r10
    97a6:	3b 1d       	adc	r19, r11
    97a8:	4c 1d       	adc	r20, r12
    97aa:	5d 1d       	adc	r21, r13
    97ac:	6e 1d       	adc	r22, r14
    97ae:	7f 1d       	adc	r23, r15
    97b0:	80 1f       	adc	r24, r16
    97b2:	91 1f       	adc	r25, r17
    97b4:	08 95       	ret

000097b6 <__subdi3>:
    97b6:	2a 19       	sub	r18, r10
    97b8:	3b 09       	sbc	r19, r11
    97ba:	4c 09       	sbc	r20, r12
    97bc:	5d 09       	sbc	r21, r13
    97be:	6e 09       	sbc	r22, r14
    97c0:	7f 09       	sbc	r23, r15
    97c2:	80 0b       	sbc	r24, r16
    97c4:	91 0b       	sbc	r25, r17
    97c6:	08 95       	ret

000097c8 <__umulhisi3>:
    97c8:	a2 9f       	mul	r26, r18
    97ca:	b0 01       	movw	r22, r0
    97cc:	b3 9f       	mul	r27, r19
    97ce:	c0 01       	movw	r24, r0
    97d0:	a3 9f       	mul	r26, r19
    97d2:	70 0d       	add	r23, r0
    97d4:	81 1d       	adc	r24, r1
    97d6:	11 24       	eor	r1, r1
    97d8:	91 1d       	adc	r25, r1
    97da:	b2 9f       	mul	r27, r18
    97dc:	70 0d       	add	r23, r0
    97de:	81 1d       	adc	r24, r1
    97e0:	11 24       	eor	r1, r1
    97e2:	91 1d       	adc	r25, r1
    97e4:	08 95       	ret

000097e6 <malloc>:
    97e6:	0f 93       	push	r16
    97e8:	1f 93       	push	r17
    97ea:	cf 93       	push	r28
    97ec:	df 93       	push	r29
    97ee:	82 30       	cpi	r24, 0x02	; 2
    97f0:	91 05       	cpc	r25, r1
    97f2:	10 f4       	brcc	.+4      	; 0x97f8 <malloc+0x12>
    97f4:	82 e0       	ldi	r24, 0x02	; 2
    97f6:	90 e0       	ldi	r25, 0x00	; 0
    97f8:	e0 91 47 23 	lds	r30, 0x2347	; 0x802347 <__flp>
    97fc:	f0 91 48 23 	lds	r31, 0x2348	; 0x802348 <__flp+0x1>
    9800:	20 e0       	ldi	r18, 0x00	; 0
    9802:	30 e0       	ldi	r19, 0x00	; 0
    9804:	a0 e0       	ldi	r26, 0x00	; 0
    9806:	b0 e0       	ldi	r27, 0x00	; 0
    9808:	30 97       	sbiw	r30, 0x00	; 0
    980a:	19 f1       	breq	.+70     	; 0x9852 <malloc+0x6c>
    980c:	40 81       	ld	r20, Z
    980e:	51 81       	ldd	r21, Z+1	; 0x01
    9810:	02 81       	ldd	r16, Z+2	; 0x02
    9812:	13 81       	ldd	r17, Z+3	; 0x03
    9814:	48 17       	cp	r20, r24
    9816:	59 07       	cpc	r21, r25
    9818:	c8 f0       	brcs	.+50     	; 0x984c <malloc+0x66>
    981a:	84 17       	cp	r24, r20
    981c:	95 07       	cpc	r25, r21
    981e:	69 f4       	brne	.+26     	; 0x983a <malloc+0x54>
    9820:	10 97       	sbiw	r26, 0x00	; 0
    9822:	31 f0       	breq	.+12     	; 0x9830 <malloc+0x4a>
    9824:	12 96       	adiw	r26, 0x02	; 2
    9826:	0c 93       	st	X, r16
    9828:	12 97       	sbiw	r26, 0x02	; 2
    982a:	13 96       	adiw	r26, 0x03	; 3
    982c:	1c 93       	st	X, r17
    982e:	27 c0       	rjmp	.+78     	; 0x987e <malloc+0x98>
    9830:	00 93 47 23 	sts	0x2347, r16	; 0x802347 <__flp>
    9834:	10 93 48 23 	sts	0x2348, r17	; 0x802348 <__flp+0x1>
    9838:	22 c0       	rjmp	.+68     	; 0x987e <malloc+0x98>
    983a:	21 15       	cp	r18, r1
    983c:	31 05       	cpc	r19, r1
    983e:	19 f0       	breq	.+6      	; 0x9846 <malloc+0x60>
    9840:	42 17       	cp	r20, r18
    9842:	53 07       	cpc	r21, r19
    9844:	18 f4       	brcc	.+6      	; 0x984c <malloc+0x66>
    9846:	9a 01       	movw	r18, r20
    9848:	bd 01       	movw	r22, r26
    984a:	ef 01       	movw	r28, r30
    984c:	df 01       	movw	r26, r30
    984e:	f8 01       	movw	r30, r16
    9850:	db cf       	rjmp	.-74     	; 0x9808 <malloc+0x22>
    9852:	21 15       	cp	r18, r1
    9854:	31 05       	cpc	r19, r1
    9856:	f9 f0       	breq	.+62     	; 0x9896 <malloc+0xb0>
    9858:	28 1b       	sub	r18, r24
    985a:	39 0b       	sbc	r19, r25
    985c:	24 30       	cpi	r18, 0x04	; 4
    985e:	31 05       	cpc	r19, r1
    9860:	80 f4       	brcc	.+32     	; 0x9882 <malloc+0x9c>
    9862:	8a 81       	ldd	r24, Y+2	; 0x02
    9864:	9b 81       	ldd	r25, Y+3	; 0x03
    9866:	61 15       	cp	r22, r1
    9868:	71 05       	cpc	r23, r1
    986a:	21 f0       	breq	.+8      	; 0x9874 <malloc+0x8e>
    986c:	fb 01       	movw	r30, r22
    986e:	82 83       	std	Z+2, r24	; 0x02
    9870:	93 83       	std	Z+3, r25	; 0x03
    9872:	04 c0       	rjmp	.+8      	; 0x987c <malloc+0x96>
    9874:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <__flp>
    9878:	90 93 48 23 	sts	0x2348, r25	; 0x802348 <__flp+0x1>
    987c:	fe 01       	movw	r30, r28
    987e:	32 96       	adiw	r30, 0x02	; 2
    9880:	44 c0       	rjmp	.+136    	; 0x990a <malloc+0x124>
    9882:	fe 01       	movw	r30, r28
    9884:	e2 0f       	add	r30, r18
    9886:	f3 1f       	adc	r31, r19
    9888:	81 93       	st	Z+, r24
    988a:	91 93       	st	Z+, r25
    988c:	22 50       	subi	r18, 0x02	; 2
    988e:	31 09       	sbc	r19, r1
    9890:	28 83       	st	Y, r18
    9892:	39 83       	std	Y+1, r19	; 0x01
    9894:	3a c0       	rjmp	.+116    	; 0x990a <malloc+0x124>
    9896:	20 91 45 23 	lds	r18, 0x2345	; 0x802345 <__brkval>
    989a:	30 91 46 23 	lds	r19, 0x2346	; 0x802346 <__brkval+0x1>
    989e:	23 2b       	or	r18, r19
    98a0:	41 f4       	brne	.+16     	; 0x98b2 <malloc+0xcc>
    98a2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    98a6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    98aa:	20 93 45 23 	sts	0x2345, r18	; 0x802345 <__brkval>
    98ae:	30 93 46 23 	sts	0x2346, r19	; 0x802346 <__brkval+0x1>
    98b2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    98b6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    98ba:	21 15       	cp	r18, r1
    98bc:	31 05       	cpc	r19, r1
    98be:	41 f4       	brne	.+16     	; 0x98d0 <malloc+0xea>
    98c0:	2d b7       	in	r18, 0x3d	; 61
    98c2:	3e b7       	in	r19, 0x3e	; 62
    98c4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    98c8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    98cc:	24 1b       	sub	r18, r20
    98ce:	35 0b       	sbc	r19, r21
    98d0:	e0 91 45 23 	lds	r30, 0x2345	; 0x802345 <__brkval>
    98d4:	f0 91 46 23 	lds	r31, 0x2346	; 0x802346 <__brkval+0x1>
    98d8:	e2 17       	cp	r30, r18
    98da:	f3 07       	cpc	r31, r19
    98dc:	a0 f4       	brcc	.+40     	; 0x9906 <malloc+0x120>
    98de:	2e 1b       	sub	r18, r30
    98e0:	3f 0b       	sbc	r19, r31
    98e2:	28 17       	cp	r18, r24
    98e4:	39 07       	cpc	r19, r25
    98e6:	78 f0       	brcs	.+30     	; 0x9906 <malloc+0x120>
    98e8:	ac 01       	movw	r20, r24
    98ea:	4e 5f       	subi	r20, 0xFE	; 254
    98ec:	5f 4f       	sbci	r21, 0xFF	; 255
    98ee:	24 17       	cp	r18, r20
    98f0:	35 07       	cpc	r19, r21
    98f2:	48 f0       	brcs	.+18     	; 0x9906 <malloc+0x120>
    98f4:	4e 0f       	add	r20, r30
    98f6:	5f 1f       	adc	r21, r31
    98f8:	40 93 45 23 	sts	0x2345, r20	; 0x802345 <__brkval>
    98fc:	50 93 46 23 	sts	0x2346, r21	; 0x802346 <__brkval+0x1>
    9900:	81 93       	st	Z+, r24
    9902:	91 93       	st	Z+, r25
    9904:	02 c0       	rjmp	.+4      	; 0x990a <malloc+0x124>
    9906:	e0 e0       	ldi	r30, 0x00	; 0
    9908:	f0 e0       	ldi	r31, 0x00	; 0
    990a:	cf 01       	movw	r24, r30
    990c:	df 91       	pop	r29
    990e:	cf 91       	pop	r28
    9910:	1f 91       	pop	r17
    9912:	0f 91       	pop	r16
    9914:	08 95       	ret

00009916 <free>:
    9916:	cf 93       	push	r28
    9918:	df 93       	push	r29
    991a:	00 97       	sbiw	r24, 0x00	; 0
    991c:	09 f4       	brne	.+2      	; 0x9920 <free+0xa>
    991e:	81 c0       	rjmp	.+258    	; 0x9a22 <free+0x10c>
    9920:	fc 01       	movw	r30, r24
    9922:	32 97       	sbiw	r30, 0x02	; 2
    9924:	12 82       	std	Z+2, r1	; 0x02
    9926:	13 82       	std	Z+3, r1	; 0x03
    9928:	a0 91 47 23 	lds	r26, 0x2347	; 0x802347 <__flp>
    992c:	b0 91 48 23 	lds	r27, 0x2348	; 0x802348 <__flp+0x1>
    9930:	10 97       	sbiw	r26, 0x00	; 0
    9932:	81 f4       	brne	.+32     	; 0x9954 <free+0x3e>
    9934:	20 81       	ld	r18, Z
    9936:	31 81       	ldd	r19, Z+1	; 0x01
    9938:	82 0f       	add	r24, r18
    993a:	93 1f       	adc	r25, r19
    993c:	20 91 45 23 	lds	r18, 0x2345	; 0x802345 <__brkval>
    9940:	30 91 46 23 	lds	r19, 0x2346	; 0x802346 <__brkval+0x1>
    9944:	28 17       	cp	r18, r24
    9946:	39 07       	cpc	r19, r25
    9948:	51 f5       	brne	.+84     	; 0x999e <free+0x88>
    994a:	e0 93 45 23 	sts	0x2345, r30	; 0x802345 <__brkval>
    994e:	f0 93 46 23 	sts	0x2346, r31	; 0x802346 <__brkval+0x1>
    9952:	67 c0       	rjmp	.+206    	; 0x9a22 <free+0x10c>
    9954:	ed 01       	movw	r28, r26
    9956:	20 e0       	ldi	r18, 0x00	; 0
    9958:	30 e0       	ldi	r19, 0x00	; 0
    995a:	ce 17       	cp	r28, r30
    995c:	df 07       	cpc	r29, r31
    995e:	40 f4       	brcc	.+16     	; 0x9970 <free+0x5a>
    9960:	4a 81       	ldd	r20, Y+2	; 0x02
    9962:	5b 81       	ldd	r21, Y+3	; 0x03
    9964:	9e 01       	movw	r18, r28
    9966:	41 15       	cp	r20, r1
    9968:	51 05       	cpc	r21, r1
    996a:	f1 f0       	breq	.+60     	; 0x99a8 <free+0x92>
    996c:	ea 01       	movw	r28, r20
    996e:	f5 cf       	rjmp	.-22     	; 0x995a <free+0x44>
    9970:	c2 83       	std	Z+2, r28	; 0x02
    9972:	d3 83       	std	Z+3, r29	; 0x03
    9974:	40 81       	ld	r20, Z
    9976:	51 81       	ldd	r21, Z+1	; 0x01
    9978:	84 0f       	add	r24, r20
    997a:	95 1f       	adc	r25, r21
    997c:	c8 17       	cp	r28, r24
    997e:	d9 07       	cpc	r29, r25
    9980:	59 f4       	brne	.+22     	; 0x9998 <free+0x82>
    9982:	88 81       	ld	r24, Y
    9984:	99 81       	ldd	r25, Y+1	; 0x01
    9986:	84 0f       	add	r24, r20
    9988:	95 1f       	adc	r25, r21
    998a:	02 96       	adiw	r24, 0x02	; 2
    998c:	80 83       	st	Z, r24
    998e:	91 83       	std	Z+1, r25	; 0x01
    9990:	8a 81       	ldd	r24, Y+2	; 0x02
    9992:	9b 81       	ldd	r25, Y+3	; 0x03
    9994:	82 83       	std	Z+2, r24	; 0x02
    9996:	93 83       	std	Z+3, r25	; 0x03
    9998:	21 15       	cp	r18, r1
    999a:	31 05       	cpc	r19, r1
    999c:	29 f4       	brne	.+10     	; 0x99a8 <free+0x92>
    999e:	e0 93 47 23 	sts	0x2347, r30	; 0x802347 <__flp>
    99a2:	f0 93 48 23 	sts	0x2348, r31	; 0x802348 <__flp+0x1>
    99a6:	3d c0       	rjmp	.+122    	; 0x9a22 <free+0x10c>
    99a8:	e9 01       	movw	r28, r18
    99aa:	ea 83       	std	Y+2, r30	; 0x02
    99ac:	fb 83       	std	Y+3, r31	; 0x03
    99ae:	49 91       	ld	r20, Y+
    99b0:	59 91       	ld	r21, Y+
    99b2:	c4 0f       	add	r28, r20
    99b4:	d5 1f       	adc	r29, r21
    99b6:	ec 17       	cp	r30, r28
    99b8:	fd 07       	cpc	r31, r29
    99ba:	61 f4       	brne	.+24     	; 0x99d4 <free+0xbe>
    99bc:	80 81       	ld	r24, Z
    99be:	91 81       	ldd	r25, Z+1	; 0x01
    99c0:	84 0f       	add	r24, r20
    99c2:	95 1f       	adc	r25, r21
    99c4:	02 96       	adiw	r24, 0x02	; 2
    99c6:	e9 01       	movw	r28, r18
    99c8:	88 83       	st	Y, r24
    99ca:	99 83       	std	Y+1, r25	; 0x01
    99cc:	82 81       	ldd	r24, Z+2	; 0x02
    99ce:	93 81       	ldd	r25, Z+3	; 0x03
    99d0:	8a 83       	std	Y+2, r24	; 0x02
    99d2:	9b 83       	std	Y+3, r25	; 0x03
    99d4:	e0 e0       	ldi	r30, 0x00	; 0
    99d6:	f0 e0       	ldi	r31, 0x00	; 0
    99d8:	12 96       	adiw	r26, 0x02	; 2
    99da:	8d 91       	ld	r24, X+
    99dc:	9c 91       	ld	r25, X
    99de:	13 97       	sbiw	r26, 0x03	; 3
    99e0:	00 97       	sbiw	r24, 0x00	; 0
    99e2:	19 f0       	breq	.+6      	; 0x99ea <free+0xd4>
    99e4:	fd 01       	movw	r30, r26
    99e6:	dc 01       	movw	r26, r24
    99e8:	f7 cf       	rjmp	.-18     	; 0x99d8 <free+0xc2>
    99ea:	8d 91       	ld	r24, X+
    99ec:	9c 91       	ld	r25, X
    99ee:	11 97       	sbiw	r26, 0x01	; 1
    99f0:	9d 01       	movw	r18, r26
    99f2:	2e 5f       	subi	r18, 0xFE	; 254
    99f4:	3f 4f       	sbci	r19, 0xFF	; 255
    99f6:	82 0f       	add	r24, r18
    99f8:	93 1f       	adc	r25, r19
    99fa:	20 91 45 23 	lds	r18, 0x2345	; 0x802345 <__brkval>
    99fe:	30 91 46 23 	lds	r19, 0x2346	; 0x802346 <__brkval+0x1>
    9a02:	28 17       	cp	r18, r24
    9a04:	39 07       	cpc	r19, r25
    9a06:	69 f4       	brne	.+26     	; 0x9a22 <free+0x10c>
    9a08:	30 97       	sbiw	r30, 0x00	; 0
    9a0a:	29 f4       	brne	.+10     	; 0x9a16 <free+0x100>
    9a0c:	10 92 47 23 	sts	0x2347, r1	; 0x802347 <__flp>
    9a10:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <__flp+0x1>
    9a14:	02 c0       	rjmp	.+4      	; 0x9a1a <free+0x104>
    9a16:	12 82       	std	Z+2, r1	; 0x02
    9a18:	13 82       	std	Z+3, r1	; 0x03
    9a1a:	a0 93 45 23 	sts	0x2345, r26	; 0x802345 <__brkval>
    9a1e:	b0 93 46 23 	sts	0x2346, r27	; 0x802346 <__brkval+0x1>
    9a22:	df 91       	pop	r29
    9a24:	cf 91       	pop	r28
    9a26:	08 95       	ret

00009a28 <__ftoa_engine>:
    9a28:	28 30       	cpi	r18, 0x08	; 8
    9a2a:	08 f0       	brcs	.+2      	; 0x9a2e <__ftoa_engine+0x6>
    9a2c:	27 e0       	ldi	r18, 0x07	; 7
    9a2e:	33 27       	eor	r19, r19
    9a30:	da 01       	movw	r26, r20
    9a32:	99 0f       	add	r25, r25
    9a34:	31 1d       	adc	r19, r1
    9a36:	87 fd       	sbrc	r24, 7
    9a38:	91 60       	ori	r25, 0x01	; 1
    9a3a:	00 96       	adiw	r24, 0x00	; 0
    9a3c:	61 05       	cpc	r22, r1
    9a3e:	71 05       	cpc	r23, r1
    9a40:	39 f4       	brne	.+14     	; 0x9a50 <__ftoa_engine+0x28>
    9a42:	32 60       	ori	r19, 0x02	; 2
    9a44:	2e 5f       	subi	r18, 0xFE	; 254
    9a46:	3d 93       	st	X+, r19
    9a48:	30 e3       	ldi	r19, 0x30	; 48
    9a4a:	2a 95       	dec	r18
    9a4c:	e1 f7       	brne	.-8      	; 0x9a46 <__ftoa_engine+0x1e>
    9a4e:	08 95       	ret
    9a50:	9f 3f       	cpi	r25, 0xFF	; 255
    9a52:	30 f0       	brcs	.+12     	; 0x9a60 <__ftoa_engine+0x38>
    9a54:	80 38       	cpi	r24, 0x80	; 128
    9a56:	71 05       	cpc	r23, r1
    9a58:	61 05       	cpc	r22, r1
    9a5a:	09 f0       	breq	.+2      	; 0x9a5e <__ftoa_engine+0x36>
    9a5c:	3c 5f       	subi	r19, 0xFC	; 252
    9a5e:	3c 5f       	subi	r19, 0xFC	; 252
    9a60:	3d 93       	st	X+, r19
    9a62:	91 30       	cpi	r25, 0x01	; 1
    9a64:	08 f0       	brcs	.+2      	; 0x9a68 <__ftoa_engine+0x40>
    9a66:	80 68       	ori	r24, 0x80	; 128
    9a68:	91 1d       	adc	r25, r1
    9a6a:	df 93       	push	r29
    9a6c:	cf 93       	push	r28
    9a6e:	1f 93       	push	r17
    9a70:	0f 93       	push	r16
    9a72:	ff 92       	push	r15
    9a74:	ef 92       	push	r14
    9a76:	19 2f       	mov	r17, r25
    9a78:	98 7f       	andi	r25, 0xF8	; 248
    9a7a:	96 95       	lsr	r25
    9a7c:	e9 2f       	mov	r30, r25
    9a7e:	96 95       	lsr	r25
    9a80:	96 95       	lsr	r25
    9a82:	e9 0f       	add	r30, r25
    9a84:	ff 27       	eor	r31, r31
    9a86:	e8 53       	subi	r30, 0x38	; 56
    9a88:	fd 4f       	sbci	r31, 0xFD	; 253
    9a8a:	99 27       	eor	r25, r25
    9a8c:	33 27       	eor	r19, r19
    9a8e:	ee 24       	eor	r14, r14
    9a90:	ff 24       	eor	r15, r15
    9a92:	a7 01       	movw	r20, r14
    9a94:	e7 01       	movw	r28, r14
    9a96:	05 90       	lpm	r0, Z+
    9a98:	08 94       	sec
    9a9a:	07 94       	ror	r0
    9a9c:	28 f4       	brcc	.+10     	; 0x9aa8 <__ftoa_engine+0x80>
    9a9e:	36 0f       	add	r19, r22
    9aa0:	e7 1e       	adc	r14, r23
    9aa2:	f8 1e       	adc	r15, r24
    9aa4:	49 1f       	adc	r20, r25
    9aa6:	51 1d       	adc	r21, r1
    9aa8:	66 0f       	add	r22, r22
    9aaa:	77 1f       	adc	r23, r23
    9aac:	88 1f       	adc	r24, r24
    9aae:	99 1f       	adc	r25, r25
    9ab0:	06 94       	lsr	r0
    9ab2:	a1 f7       	brne	.-24     	; 0x9a9c <__ftoa_engine+0x74>
    9ab4:	05 90       	lpm	r0, Z+
    9ab6:	07 94       	ror	r0
    9ab8:	28 f4       	brcc	.+10     	; 0x9ac4 <__ftoa_engine+0x9c>
    9aba:	e7 0e       	add	r14, r23
    9abc:	f8 1e       	adc	r15, r24
    9abe:	49 1f       	adc	r20, r25
    9ac0:	56 1f       	adc	r21, r22
    9ac2:	c1 1d       	adc	r28, r1
    9ac4:	77 0f       	add	r23, r23
    9ac6:	88 1f       	adc	r24, r24
    9ac8:	99 1f       	adc	r25, r25
    9aca:	66 1f       	adc	r22, r22
    9acc:	06 94       	lsr	r0
    9ace:	a1 f7       	brne	.-24     	; 0x9ab8 <__ftoa_engine+0x90>
    9ad0:	05 90       	lpm	r0, Z+
    9ad2:	07 94       	ror	r0
    9ad4:	28 f4       	brcc	.+10     	; 0x9ae0 <__ftoa_engine+0xb8>
    9ad6:	f8 0e       	add	r15, r24
    9ad8:	49 1f       	adc	r20, r25
    9ada:	56 1f       	adc	r21, r22
    9adc:	c7 1f       	adc	r28, r23
    9ade:	d1 1d       	adc	r29, r1
    9ae0:	88 0f       	add	r24, r24
    9ae2:	99 1f       	adc	r25, r25
    9ae4:	66 1f       	adc	r22, r22
    9ae6:	77 1f       	adc	r23, r23
    9ae8:	06 94       	lsr	r0
    9aea:	a1 f7       	brne	.-24     	; 0x9ad4 <__ftoa_engine+0xac>
    9aec:	05 90       	lpm	r0, Z+
    9aee:	07 94       	ror	r0
    9af0:	20 f4       	brcc	.+8      	; 0x9afa <__ftoa_engine+0xd2>
    9af2:	49 0f       	add	r20, r25
    9af4:	56 1f       	adc	r21, r22
    9af6:	c7 1f       	adc	r28, r23
    9af8:	d8 1f       	adc	r29, r24
    9afa:	99 0f       	add	r25, r25
    9afc:	66 1f       	adc	r22, r22
    9afe:	77 1f       	adc	r23, r23
    9b00:	88 1f       	adc	r24, r24
    9b02:	06 94       	lsr	r0
    9b04:	a9 f7       	brne	.-22     	; 0x9af0 <__ftoa_engine+0xc8>
    9b06:	84 91       	lpm	r24, Z
    9b08:	10 95       	com	r17
    9b0a:	17 70       	andi	r17, 0x07	; 7
    9b0c:	41 f0       	breq	.+16     	; 0x9b1e <__ftoa_engine+0xf6>
    9b0e:	d6 95       	lsr	r29
    9b10:	c7 95       	ror	r28
    9b12:	57 95       	ror	r21
    9b14:	47 95       	ror	r20
    9b16:	f7 94       	ror	r15
    9b18:	e7 94       	ror	r14
    9b1a:	1a 95       	dec	r17
    9b1c:	c1 f7       	brne	.-16     	; 0x9b0e <__ftoa_engine+0xe6>
    9b1e:	ee e6       	ldi	r30, 0x6E	; 110
    9b20:	f2 e0       	ldi	r31, 0x02	; 2
    9b22:	68 94       	set
    9b24:	15 90       	lpm	r1, Z+
    9b26:	15 91       	lpm	r17, Z+
    9b28:	35 91       	lpm	r19, Z+
    9b2a:	65 91       	lpm	r22, Z+
    9b2c:	95 91       	lpm	r25, Z+
    9b2e:	05 90       	lpm	r0, Z+
    9b30:	7f e2       	ldi	r23, 0x2F	; 47
    9b32:	73 95       	inc	r23
    9b34:	e1 18       	sub	r14, r1
    9b36:	f1 0a       	sbc	r15, r17
    9b38:	43 0b       	sbc	r20, r19
    9b3a:	56 0b       	sbc	r21, r22
    9b3c:	c9 0b       	sbc	r28, r25
    9b3e:	d0 09       	sbc	r29, r0
    9b40:	c0 f7       	brcc	.-16     	; 0x9b32 <__ftoa_engine+0x10a>
    9b42:	e1 0c       	add	r14, r1
    9b44:	f1 1e       	adc	r15, r17
    9b46:	43 1f       	adc	r20, r19
    9b48:	56 1f       	adc	r21, r22
    9b4a:	c9 1f       	adc	r28, r25
    9b4c:	d0 1d       	adc	r29, r0
    9b4e:	7e f4       	brtc	.+30     	; 0x9b6e <__ftoa_engine+0x146>
    9b50:	70 33       	cpi	r23, 0x30	; 48
    9b52:	11 f4       	brne	.+4      	; 0x9b58 <__ftoa_engine+0x130>
    9b54:	8a 95       	dec	r24
    9b56:	e6 cf       	rjmp	.-52     	; 0x9b24 <__ftoa_engine+0xfc>
    9b58:	e8 94       	clt
    9b5a:	01 50       	subi	r16, 0x01	; 1
    9b5c:	30 f0       	brcs	.+12     	; 0x9b6a <__ftoa_engine+0x142>
    9b5e:	08 0f       	add	r16, r24
    9b60:	0a f4       	brpl	.+2      	; 0x9b64 <__ftoa_engine+0x13c>
    9b62:	00 27       	eor	r16, r16
    9b64:	02 17       	cp	r16, r18
    9b66:	08 f4       	brcc	.+2      	; 0x9b6a <__ftoa_engine+0x142>
    9b68:	20 2f       	mov	r18, r16
    9b6a:	23 95       	inc	r18
    9b6c:	02 2f       	mov	r16, r18
    9b6e:	7a 33       	cpi	r23, 0x3A	; 58
    9b70:	28 f0       	brcs	.+10     	; 0x9b7c <__ftoa_engine+0x154>
    9b72:	79 e3       	ldi	r23, 0x39	; 57
    9b74:	7d 93       	st	X+, r23
    9b76:	2a 95       	dec	r18
    9b78:	e9 f7       	brne	.-6      	; 0x9b74 <__ftoa_engine+0x14c>
    9b7a:	10 c0       	rjmp	.+32     	; 0x9b9c <__ftoa_engine+0x174>
    9b7c:	7d 93       	st	X+, r23
    9b7e:	2a 95       	dec	r18
    9b80:	89 f6       	brne	.-94     	; 0x9b24 <__ftoa_engine+0xfc>
    9b82:	06 94       	lsr	r0
    9b84:	97 95       	ror	r25
    9b86:	67 95       	ror	r22
    9b88:	37 95       	ror	r19
    9b8a:	17 95       	ror	r17
    9b8c:	17 94       	ror	r1
    9b8e:	e1 18       	sub	r14, r1
    9b90:	f1 0a       	sbc	r15, r17
    9b92:	43 0b       	sbc	r20, r19
    9b94:	56 0b       	sbc	r21, r22
    9b96:	c9 0b       	sbc	r28, r25
    9b98:	d0 09       	sbc	r29, r0
    9b9a:	98 f0       	brcs	.+38     	; 0x9bc2 <__ftoa_engine+0x19a>
    9b9c:	23 95       	inc	r18
    9b9e:	7e 91       	ld	r23, -X
    9ba0:	73 95       	inc	r23
    9ba2:	7a 33       	cpi	r23, 0x3A	; 58
    9ba4:	08 f0       	brcs	.+2      	; 0x9ba8 <__ftoa_engine+0x180>
    9ba6:	70 e3       	ldi	r23, 0x30	; 48
    9ba8:	7c 93       	st	X, r23
    9baa:	20 13       	cpse	r18, r16
    9bac:	b8 f7       	brcc	.-18     	; 0x9b9c <__ftoa_engine+0x174>
    9bae:	7e 91       	ld	r23, -X
    9bb0:	70 61       	ori	r23, 0x10	; 16
    9bb2:	7d 93       	st	X+, r23
    9bb4:	30 f0       	brcs	.+12     	; 0x9bc2 <__ftoa_engine+0x19a>
    9bb6:	83 95       	inc	r24
    9bb8:	71 e3       	ldi	r23, 0x31	; 49
    9bba:	7d 93       	st	X+, r23
    9bbc:	70 e3       	ldi	r23, 0x30	; 48
    9bbe:	2a 95       	dec	r18
    9bc0:	e1 f7       	brne	.-8      	; 0x9bba <__ftoa_engine+0x192>
    9bc2:	11 24       	eor	r1, r1
    9bc4:	ef 90       	pop	r14
    9bc6:	ff 90       	pop	r15
    9bc8:	0f 91       	pop	r16
    9bca:	1f 91       	pop	r17
    9bcc:	cf 91       	pop	r28
    9bce:	df 91       	pop	r29
    9bd0:	99 27       	eor	r25, r25
    9bd2:	87 fd       	sbrc	r24, 7
    9bd4:	90 95       	com	r25
    9bd6:	08 95       	ret

00009bd8 <strnlen_P>:
    9bd8:	fc 01       	movw	r30, r24
    9bda:	05 90       	lpm	r0, Z+
    9bdc:	61 50       	subi	r22, 0x01	; 1
    9bde:	70 40       	sbci	r23, 0x00	; 0
    9be0:	01 10       	cpse	r0, r1
    9be2:	d8 f7       	brcc	.-10     	; 0x9bda <strnlen_P+0x2>
    9be4:	80 95       	com	r24
    9be6:	90 95       	com	r25
    9be8:	8e 0f       	add	r24, r30
    9bea:	9f 1f       	adc	r25, r31
    9bec:	08 95       	ret

00009bee <memcpy>:
    9bee:	fb 01       	movw	r30, r22
    9bf0:	dc 01       	movw	r26, r24
    9bf2:	02 c0       	rjmp	.+4      	; 0x9bf8 <memcpy+0xa>
    9bf4:	01 90       	ld	r0, Z+
    9bf6:	0d 92       	st	X+, r0
    9bf8:	41 50       	subi	r20, 0x01	; 1
    9bfa:	50 40       	sbci	r21, 0x00	; 0
    9bfc:	d8 f7       	brcc	.-10     	; 0x9bf4 <memcpy+0x6>
    9bfe:	08 95       	ret

00009c00 <strlen>:
    9c00:	fc 01       	movw	r30, r24
    9c02:	01 90       	ld	r0, Z+
    9c04:	00 20       	and	r0, r0
    9c06:	e9 f7       	brne	.-6      	; 0x9c02 <strlen+0x2>
    9c08:	80 95       	com	r24
    9c0a:	90 95       	com	r25
    9c0c:	8e 0f       	add	r24, r30
    9c0e:	9f 1f       	adc	r25, r31
    9c10:	08 95       	ret

00009c12 <strnlen>:
    9c12:	fc 01       	movw	r30, r24
    9c14:	61 50       	subi	r22, 0x01	; 1
    9c16:	70 40       	sbci	r23, 0x00	; 0
    9c18:	01 90       	ld	r0, Z+
    9c1a:	01 10       	cpse	r0, r1
    9c1c:	d8 f7       	brcc	.-10     	; 0x9c14 <strnlen+0x2>
    9c1e:	80 95       	com	r24
    9c20:	90 95       	com	r25
    9c22:	8e 0f       	add	r24, r30
    9c24:	9f 1f       	adc	r25, r31
    9c26:	08 95       	ret

00009c28 <fdevopen>:
    9c28:	0f 93       	push	r16
    9c2a:	1f 93       	push	r17
    9c2c:	cf 93       	push	r28
    9c2e:	df 93       	push	r29
    9c30:	00 97       	sbiw	r24, 0x00	; 0
    9c32:	31 f4       	brne	.+12     	; 0x9c40 <fdevopen+0x18>
    9c34:	61 15       	cp	r22, r1
    9c36:	71 05       	cpc	r23, r1
    9c38:	19 f4       	brne	.+6      	; 0x9c40 <fdevopen+0x18>
    9c3a:	80 e0       	ldi	r24, 0x00	; 0
    9c3c:	90 e0       	ldi	r25, 0x00	; 0
    9c3e:	39 c0       	rjmp	.+114    	; 0x9cb2 <fdevopen+0x8a>
    9c40:	8b 01       	movw	r16, r22
    9c42:	ec 01       	movw	r28, r24
    9c44:	6e e0       	ldi	r22, 0x0E	; 14
    9c46:	70 e0       	ldi	r23, 0x00	; 0
    9c48:	81 e0       	ldi	r24, 0x01	; 1
    9c4a:	90 e0       	ldi	r25, 0x00	; 0
    9c4c:	3c d1       	rcall	.+632    	; 0x9ec6 <calloc>
    9c4e:	fc 01       	movw	r30, r24
    9c50:	89 2b       	or	r24, r25
    9c52:	99 f3       	breq	.-26     	; 0x9c3a <fdevopen+0x12>
    9c54:	80 e8       	ldi	r24, 0x80	; 128
    9c56:	83 83       	std	Z+3, r24	; 0x03
    9c58:	01 15       	cp	r16, r1
    9c5a:	11 05       	cpc	r17, r1
    9c5c:	71 f0       	breq	.+28     	; 0x9c7a <fdevopen+0x52>
    9c5e:	02 87       	std	Z+10, r16	; 0x0a
    9c60:	13 87       	std	Z+11, r17	; 0x0b
    9c62:	81 e8       	ldi	r24, 0x81	; 129
    9c64:	83 83       	std	Z+3, r24	; 0x03
    9c66:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <__iob>
    9c6a:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <__iob+0x1>
    9c6e:	89 2b       	or	r24, r25
    9c70:	21 f4       	brne	.+8      	; 0x9c7a <fdevopen+0x52>
    9c72:	e0 93 49 23 	sts	0x2349, r30	; 0x802349 <__iob>
    9c76:	f0 93 4a 23 	sts	0x234A, r31	; 0x80234a <__iob+0x1>
    9c7a:	20 97       	sbiw	r28, 0x00	; 0
    9c7c:	c9 f0       	breq	.+50     	; 0x9cb0 <fdevopen+0x88>
    9c7e:	c0 87       	std	Z+8, r28	; 0x08
    9c80:	d1 87       	std	Z+9, r29	; 0x09
    9c82:	83 81       	ldd	r24, Z+3	; 0x03
    9c84:	82 60       	ori	r24, 0x02	; 2
    9c86:	83 83       	std	Z+3, r24	; 0x03
    9c88:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <__iob+0x2>
    9c8c:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <__iob+0x3>
    9c90:	89 2b       	or	r24, r25
    9c92:	71 f4       	brne	.+28     	; 0x9cb0 <fdevopen+0x88>
    9c94:	e0 93 4b 23 	sts	0x234B, r30	; 0x80234b <__iob+0x2>
    9c98:	f0 93 4c 23 	sts	0x234C, r31	; 0x80234c <__iob+0x3>
    9c9c:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <__iob+0x4>
    9ca0:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <__iob+0x5>
    9ca4:	89 2b       	or	r24, r25
    9ca6:	21 f4       	brne	.+8      	; 0x9cb0 <fdevopen+0x88>
    9ca8:	e0 93 4d 23 	sts	0x234D, r30	; 0x80234d <__iob+0x4>
    9cac:	f0 93 4e 23 	sts	0x234E, r31	; 0x80234e <__iob+0x5>
    9cb0:	cf 01       	movw	r24, r30
    9cb2:	df 91       	pop	r29
    9cb4:	cf 91       	pop	r28
    9cb6:	1f 91       	pop	r17
    9cb8:	0f 91       	pop	r16
    9cba:	08 95       	ret

00009cbc <fputc>:
    9cbc:	0f 93       	push	r16
    9cbe:	1f 93       	push	r17
    9cc0:	cf 93       	push	r28
    9cc2:	df 93       	push	r29
    9cc4:	fb 01       	movw	r30, r22
    9cc6:	23 81       	ldd	r18, Z+3	; 0x03
    9cc8:	21 fd       	sbrc	r18, 1
    9cca:	03 c0       	rjmp	.+6      	; 0x9cd2 <fputc+0x16>
    9ccc:	8f ef       	ldi	r24, 0xFF	; 255
    9cce:	9f ef       	ldi	r25, 0xFF	; 255
    9cd0:	2c c0       	rjmp	.+88     	; 0x9d2a <fputc+0x6e>
    9cd2:	22 ff       	sbrs	r18, 2
    9cd4:	16 c0       	rjmp	.+44     	; 0x9d02 <fputc+0x46>
    9cd6:	46 81       	ldd	r20, Z+6	; 0x06
    9cd8:	57 81       	ldd	r21, Z+7	; 0x07
    9cda:	24 81       	ldd	r18, Z+4	; 0x04
    9cdc:	35 81       	ldd	r19, Z+5	; 0x05
    9cde:	42 17       	cp	r20, r18
    9ce0:	53 07       	cpc	r21, r19
    9ce2:	44 f4       	brge	.+16     	; 0x9cf4 <fputc+0x38>
    9ce4:	a0 81       	ld	r26, Z
    9ce6:	b1 81       	ldd	r27, Z+1	; 0x01
    9ce8:	9d 01       	movw	r18, r26
    9cea:	2f 5f       	subi	r18, 0xFF	; 255
    9cec:	3f 4f       	sbci	r19, 0xFF	; 255
    9cee:	20 83       	st	Z, r18
    9cf0:	31 83       	std	Z+1, r19	; 0x01
    9cf2:	8c 93       	st	X, r24
    9cf4:	26 81       	ldd	r18, Z+6	; 0x06
    9cf6:	37 81       	ldd	r19, Z+7	; 0x07
    9cf8:	2f 5f       	subi	r18, 0xFF	; 255
    9cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    9cfc:	26 83       	std	Z+6, r18	; 0x06
    9cfe:	37 83       	std	Z+7, r19	; 0x07
    9d00:	14 c0       	rjmp	.+40     	; 0x9d2a <fputc+0x6e>
    9d02:	8b 01       	movw	r16, r22
    9d04:	ec 01       	movw	r28, r24
    9d06:	fb 01       	movw	r30, r22
    9d08:	00 84       	ldd	r0, Z+8	; 0x08
    9d0a:	f1 85       	ldd	r31, Z+9	; 0x09
    9d0c:	e0 2d       	mov	r30, r0
    9d0e:	19 95       	eicall
    9d10:	89 2b       	or	r24, r25
    9d12:	e1 f6       	brne	.-72     	; 0x9ccc <fputc+0x10>
    9d14:	d8 01       	movw	r26, r16
    9d16:	16 96       	adiw	r26, 0x06	; 6
    9d18:	8d 91       	ld	r24, X+
    9d1a:	9c 91       	ld	r25, X
    9d1c:	17 97       	sbiw	r26, 0x07	; 7
    9d1e:	01 96       	adiw	r24, 0x01	; 1
    9d20:	16 96       	adiw	r26, 0x06	; 6
    9d22:	8d 93       	st	X+, r24
    9d24:	9c 93       	st	X, r25
    9d26:	17 97       	sbiw	r26, 0x07	; 7
    9d28:	ce 01       	movw	r24, r28
    9d2a:	df 91       	pop	r29
    9d2c:	cf 91       	pop	r28
    9d2e:	1f 91       	pop	r17
    9d30:	0f 91       	pop	r16
    9d32:	08 95       	ret

00009d34 <printf>:
    9d34:	cf 93       	push	r28
    9d36:	df 93       	push	r29
    9d38:	cd b7       	in	r28, 0x3d	; 61
    9d3a:	de b7       	in	r29, 0x3e	; 62
    9d3c:	ae 01       	movw	r20, r28
    9d3e:	4a 5f       	subi	r20, 0xFA	; 250
    9d40:	5f 4f       	sbci	r21, 0xFF	; 255
    9d42:	fa 01       	movw	r30, r20
    9d44:	61 91       	ld	r22, Z+
    9d46:	71 91       	ld	r23, Z+
    9d48:	af 01       	movw	r20, r30
    9d4a:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <__iob+0x2>
    9d4e:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <__iob+0x3>
    9d52:	7d d8       	rcall	.-3846   	; 0x8e4e <vfprintf>
    9d54:	df 91       	pop	r29
    9d56:	cf 91       	pop	r28
    9d58:	08 95       	ret

00009d5a <puts>:
    9d5a:	0f 93       	push	r16
    9d5c:	1f 93       	push	r17
    9d5e:	cf 93       	push	r28
    9d60:	df 93       	push	r29
    9d62:	e0 91 4b 23 	lds	r30, 0x234B	; 0x80234b <__iob+0x2>
    9d66:	f0 91 4c 23 	lds	r31, 0x234C	; 0x80234c <__iob+0x3>
    9d6a:	23 81       	ldd	r18, Z+3	; 0x03
    9d6c:	21 ff       	sbrs	r18, 1
    9d6e:	1b c0       	rjmp	.+54     	; 0x9da6 <puts+0x4c>
    9d70:	8c 01       	movw	r16, r24
    9d72:	d0 e0       	ldi	r29, 0x00	; 0
    9d74:	c0 e0       	ldi	r28, 0x00	; 0
    9d76:	f8 01       	movw	r30, r16
    9d78:	81 91       	ld	r24, Z+
    9d7a:	8f 01       	movw	r16, r30
    9d7c:	60 91 4b 23 	lds	r22, 0x234B	; 0x80234b <__iob+0x2>
    9d80:	70 91 4c 23 	lds	r23, 0x234C	; 0x80234c <__iob+0x3>
    9d84:	db 01       	movw	r26, r22
    9d86:	18 96       	adiw	r26, 0x08	; 8
    9d88:	ed 91       	ld	r30, X+
    9d8a:	fc 91       	ld	r31, X
    9d8c:	19 97       	sbiw	r26, 0x09	; 9
    9d8e:	88 23       	and	r24, r24
    9d90:	31 f0       	breq	.+12     	; 0x9d9e <puts+0x44>
    9d92:	19 95       	eicall
    9d94:	89 2b       	or	r24, r25
    9d96:	79 f3       	breq	.-34     	; 0x9d76 <puts+0x1c>
    9d98:	df ef       	ldi	r29, 0xFF	; 255
    9d9a:	cf ef       	ldi	r28, 0xFF	; 255
    9d9c:	ec cf       	rjmp	.-40     	; 0x9d76 <puts+0x1c>
    9d9e:	8a e0       	ldi	r24, 0x0A	; 10
    9da0:	19 95       	eicall
    9da2:	89 2b       	or	r24, r25
    9da4:	19 f0       	breq	.+6      	; 0x9dac <puts+0x52>
    9da6:	8f ef       	ldi	r24, 0xFF	; 255
    9da8:	9f ef       	ldi	r25, 0xFF	; 255
    9daa:	02 c0       	rjmp	.+4      	; 0x9db0 <puts+0x56>
    9dac:	8d 2f       	mov	r24, r29
    9dae:	9c 2f       	mov	r25, r28
    9db0:	df 91       	pop	r29
    9db2:	cf 91       	pop	r28
    9db4:	1f 91       	pop	r17
    9db6:	0f 91       	pop	r16
    9db8:	08 95       	ret

00009dba <sprintf>:
    9dba:	0f 93       	push	r16
    9dbc:	1f 93       	push	r17
    9dbe:	cf 93       	push	r28
    9dc0:	df 93       	push	r29
    9dc2:	cd b7       	in	r28, 0x3d	; 61
    9dc4:	de b7       	in	r29, 0x3e	; 62
    9dc6:	2e 97       	sbiw	r28, 0x0e	; 14
    9dc8:	cd bf       	out	0x3d, r28	; 61
    9dca:	de bf       	out	0x3e, r29	; 62
    9dcc:	0e 89       	ldd	r16, Y+22	; 0x16
    9dce:	1f 89       	ldd	r17, Y+23	; 0x17
    9dd0:	86 e0       	ldi	r24, 0x06	; 6
    9dd2:	8c 83       	std	Y+4, r24	; 0x04
    9dd4:	09 83       	std	Y+1, r16	; 0x01
    9dd6:	1a 83       	std	Y+2, r17	; 0x02
    9dd8:	8f ef       	ldi	r24, 0xFF	; 255
    9dda:	9f e7       	ldi	r25, 0x7F	; 127
    9ddc:	8d 83       	std	Y+5, r24	; 0x05
    9dde:	9e 83       	std	Y+6, r25	; 0x06
    9de0:	ae 01       	movw	r20, r28
    9de2:	46 5e       	subi	r20, 0xE6	; 230
    9de4:	5f 4f       	sbci	r21, 0xFF	; 255
    9de6:	68 8d       	ldd	r22, Y+24	; 0x18
    9de8:	79 8d       	ldd	r23, Y+25	; 0x19
    9dea:	ce 01       	movw	r24, r28
    9dec:	01 96       	adiw	r24, 0x01	; 1
    9dee:	2f d8       	rcall	.-4002   	; 0x8e4e <vfprintf>
    9df0:	ef 81       	ldd	r30, Y+7	; 0x07
    9df2:	f8 85       	ldd	r31, Y+8	; 0x08
    9df4:	e0 0f       	add	r30, r16
    9df6:	f1 1f       	adc	r31, r17
    9df8:	10 82       	st	Z, r1
    9dfa:	2e 96       	adiw	r28, 0x0e	; 14
    9dfc:	cd bf       	out	0x3d, r28	; 61
    9dfe:	de bf       	out	0x3e, r29	; 62
    9e00:	df 91       	pop	r29
    9e02:	cf 91       	pop	r28
    9e04:	1f 91       	pop	r17
    9e06:	0f 91       	pop	r16
    9e08:	08 95       	ret

00009e0a <__ultoa_invert>:
    9e0a:	fa 01       	movw	r30, r20
    9e0c:	aa 27       	eor	r26, r26
    9e0e:	28 30       	cpi	r18, 0x08	; 8
    9e10:	51 f1       	breq	.+84     	; 0x9e66 <__ultoa_invert+0x5c>
    9e12:	20 31       	cpi	r18, 0x10	; 16
    9e14:	81 f1       	breq	.+96     	; 0x9e76 <__ultoa_invert+0x6c>
    9e16:	e8 94       	clt
    9e18:	6f 93       	push	r22
    9e1a:	6e 7f       	andi	r22, 0xFE	; 254
    9e1c:	6e 5f       	subi	r22, 0xFE	; 254
    9e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    9e20:	8f 4f       	sbci	r24, 0xFF	; 255
    9e22:	9f 4f       	sbci	r25, 0xFF	; 255
    9e24:	af 4f       	sbci	r26, 0xFF	; 255
    9e26:	b1 e0       	ldi	r27, 0x01	; 1
    9e28:	3e d0       	rcall	.+124    	; 0x9ea6 <__ultoa_invert+0x9c>
    9e2a:	b4 e0       	ldi	r27, 0x04	; 4
    9e2c:	3c d0       	rcall	.+120    	; 0x9ea6 <__ultoa_invert+0x9c>
    9e2e:	67 0f       	add	r22, r23
    9e30:	78 1f       	adc	r23, r24
    9e32:	89 1f       	adc	r24, r25
    9e34:	9a 1f       	adc	r25, r26
    9e36:	a1 1d       	adc	r26, r1
    9e38:	68 0f       	add	r22, r24
    9e3a:	79 1f       	adc	r23, r25
    9e3c:	8a 1f       	adc	r24, r26
    9e3e:	91 1d       	adc	r25, r1
    9e40:	a1 1d       	adc	r26, r1
    9e42:	6a 0f       	add	r22, r26
    9e44:	71 1d       	adc	r23, r1
    9e46:	81 1d       	adc	r24, r1
    9e48:	91 1d       	adc	r25, r1
    9e4a:	a1 1d       	adc	r26, r1
    9e4c:	20 d0       	rcall	.+64     	; 0x9e8e <__ultoa_invert+0x84>
    9e4e:	09 f4       	brne	.+2      	; 0x9e52 <__ultoa_invert+0x48>
    9e50:	68 94       	set
    9e52:	3f 91       	pop	r19
    9e54:	2a e0       	ldi	r18, 0x0A	; 10
    9e56:	26 9f       	mul	r18, r22
    9e58:	11 24       	eor	r1, r1
    9e5a:	30 19       	sub	r19, r0
    9e5c:	30 5d       	subi	r19, 0xD0	; 208
    9e5e:	31 93       	st	Z+, r19
    9e60:	de f6       	brtc	.-74     	; 0x9e18 <__ultoa_invert+0xe>
    9e62:	cf 01       	movw	r24, r30
    9e64:	08 95       	ret
    9e66:	46 2f       	mov	r20, r22
    9e68:	47 70       	andi	r20, 0x07	; 7
    9e6a:	40 5d       	subi	r20, 0xD0	; 208
    9e6c:	41 93       	st	Z+, r20
    9e6e:	b3 e0       	ldi	r27, 0x03	; 3
    9e70:	0f d0       	rcall	.+30     	; 0x9e90 <__ultoa_invert+0x86>
    9e72:	c9 f7       	brne	.-14     	; 0x9e66 <__ultoa_invert+0x5c>
    9e74:	f6 cf       	rjmp	.-20     	; 0x9e62 <__ultoa_invert+0x58>
    9e76:	46 2f       	mov	r20, r22
    9e78:	4f 70       	andi	r20, 0x0F	; 15
    9e7a:	40 5d       	subi	r20, 0xD0	; 208
    9e7c:	4a 33       	cpi	r20, 0x3A	; 58
    9e7e:	18 f0       	brcs	.+6      	; 0x9e86 <__ultoa_invert+0x7c>
    9e80:	49 5d       	subi	r20, 0xD9	; 217
    9e82:	31 fd       	sbrc	r19, 1
    9e84:	40 52       	subi	r20, 0x20	; 32
    9e86:	41 93       	st	Z+, r20
    9e88:	02 d0       	rcall	.+4      	; 0x9e8e <__ultoa_invert+0x84>
    9e8a:	a9 f7       	brne	.-22     	; 0x9e76 <__ultoa_invert+0x6c>
    9e8c:	ea cf       	rjmp	.-44     	; 0x9e62 <__ultoa_invert+0x58>
    9e8e:	b4 e0       	ldi	r27, 0x04	; 4
    9e90:	a6 95       	lsr	r26
    9e92:	97 95       	ror	r25
    9e94:	87 95       	ror	r24
    9e96:	77 95       	ror	r23
    9e98:	67 95       	ror	r22
    9e9a:	ba 95       	dec	r27
    9e9c:	c9 f7       	brne	.-14     	; 0x9e90 <__ultoa_invert+0x86>
    9e9e:	00 97       	sbiw	r24, 0x00	; 0
    9ea0:	61 05       	cpc	r22, r1
    9ea2:	71 05       	cpc	r23, r1
    9ea4:	08 95       	ret
    9ea6:	9b 01       	movw	r18, r22
    9ea8:	ac 01       	movw	r20, r24
    9eaa:	0a 2e       	mov	r0, r26
    9eac:	06 94       	lsr	r0
    9eae:	57 95       	ror	r21
    9eb0:	47 95       	ror	r20
    9eb2:	37 95       	ror	r19
    9eb4:	27 95       	ror	r18
    9eb6:	ba 95       	dec	r27
    9eb8:	c9 f7       	brne	.-14     	; 0x9eac <__ultoa_invert+0xa2>
    9eba:	62 0f       	add	r22, r18
    9ebc:	73 1f       	adc	r23, r19
    9ebe:	84 1f       	adc	r24, r20
    9ec0:	95 1f       	adc	r25, r21
    9ec2:	a0 1d       	adc	r26, r0
    9ec4:	08 95       	ret

00009ec6 <calloc>:
    9ec6:	0f 93       	push	r16
    9ec8:	1f 93       	push	r17
    9eca:	cf 93       	push	r28
    9ecc:	df 93       	push	r29
    9ece:	86 9f       	mul	r24, r22
    9ed0:	80 01       	movw	r16, r0
    9ed2:	87 9f       	mul	r24, r23
    9ed4:	10 0d       	add	r17, r0
    9ed6:	96 9f       	mul	r25, r22
    9ed8:	10 0d       	add	r17, r0
    9eda:	11 24       	eor	r1, r1
    9edc:	c8 01       	movw	r24, r16
    9ede:	83 dc       	rcall	.-1786   	; 0x97e6 <malloc>
    9ee0:	ec 01       	movw	r28, r24
    9ee2:	00 97       	sbiw	r24, 0x00	; 0
    9ee4:	21 f0       	breq	.+8      	; 0x9eee <calloc+0x28>
    9ee6:	a8 01       	movw	r20, r16
    9ee8:	60 e0       	ldi	r22, 0x00	; 0
    9eea:	70 e0       	ldi	r23, 0x00	; 0
    9eec:	06 d0       	rcall	.+12     	; 0x9efa <memset>
    9eee:	ce 01       	movw	r24, r28
    9ef0:	df 91       	pop	r29
    9ef2:	cf 91       	pop	r28
    9ef4:	1f 91       	pop	r17
    9ef6:	0f 91       	pop	r16
    9ef8:	08 95       	ret

00009efa <memset>:
    9efa:	dc 01       	movw	r26, r24
    9efc:	01 c0       	rjmp	.+2      	; 0x9f00 <memset+0x6>
    9efe:	6d 93       	st	X+, r22
    9f00:	41 50       	subi	r20, 0x01	; 1
    9f02:	50 40       	sbci	r21, 0x00	; 0
    9f04:	e0 f7       	brcc	.-8      	; 0x9efe <memset+0x4>
    9f06:	08 95       	ret

00009f08 <_exit>:
    9f08:	f8 94       	cli

00009f0a <__stop_program>:
    9f0a:	ff cf       	rjmp	.-2      	; 0x9f0a <__stop_program>
