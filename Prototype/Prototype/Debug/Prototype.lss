
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b94a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001bc  00802000  0000b94a  0000b9de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000665  008021bc  008021bc  0000bb9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bb9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bbf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001420  00000000  00000000  0000bc38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000207c1  00000000  00000000  0000d058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007249  00000000  00000000  0002d819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001cc3a  00000000  00000000  00034a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005898  00000000  00000000  0005169c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00044178  00000000  00000000  00056f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c2db  00000000  00000000  0009b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012d0  00000000  00000000  000a7388  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00013cb1  00000000  00000000  000a8658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 40 2e 	jmp	0x5c80	; 0x5c80 <__vector_10>
      2c:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__vector_11>
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <__vector_13>
      38:	0c 94 f0 2f 	jmp	0x5fe0	; 0x5fe0 <__vector_14>
      3c:	0c 94 47 30 	jmp	0x608e	; 0x608e <__vector_15>
      40:	0c 94 9e 30 	jmp	0x613c	; 0x613c <__vector_16>
      44:	0c 94 f5 30 	jmp	0x61ea	; 0x61ea <__vector_17>
      48:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__vector_18>
      4c:	0c 94 a3 31 	jmp	0x6346	; 0x6346 <__vector_19>
      50:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__vector_20>
      54:	0c 94 51 32 	jmp	0x64a2	; 0x64a2 <__vector_21>
      58:	0c 94 a8 32 	jmp	0x6550	; 0x6550 <__vector_22>
      5c:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <__vector_23>
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__vector_25>
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ef c7       	rjmp	.+4062   	; 0x107c <__vector_39>
      9e:	00 00       	nop
      a0:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_40>
      a4:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_41>
      a8:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_42>
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 1a 3f 	jmp	0x7e34	; 0x7e34 <__vector_46>
      bc:	0c 94 bc 36 	jmp	0x6d78	; 0x6d78 <__vector_47>
      c0:	0c 94 13 37 	jmp	0x6e26	; 0x6e26 <__vector_48>
      c4:	0c 94 6a 37 	jmp	0x6ed4	; 0x6ed4 <__vector_49>
      c8:	0c 94 c1 37 	jmp	0x6f82	; 0x6f82 <__vector_50>
      cc:	0c 94 18 38 	jmp	0x7030	; 0x7030 <__vector_51>
      d0:	0c 94 6f 38 	jmp	0x70de	; 0x70de <__vector_52>
      d4:	0c 94 c6 38 	jmp	0x718c	; 0x718c <__vector_53>
      d8:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__vector_54>
      dc:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <__vector_55>
      e0:	0c 94 cb 39 	jmp	0x7396	; 0x7396 <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	7f c5       	rjmp	.+2814   	; 0xc1c <__vector_71>
     11e:	00 00       	nop
     120:	09 c6       	rjmp	.+3090   	; 0xd34 <__vector_72>
     122:	00 00       	nop
     124:	93 c6       	rjmp	.+3366   	; 0xe4c <__vector_73>
     126:	00 00       	nop
     128:	1d c7       	rjmp	.+3642   	; 0xf64 <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 ce 3e 	jmp	0x7d9c	; 0x7d9c <__vector_76>
     134:	0c 94 56 33 	jmp	0x66ac	; 0x66ac <__vector_77>
     138:	0c 94 ad 33 	jmp	0x675a	; 0x675a <__vector_78>
     13c:	0c 94 04 34 	jmp	0x6808	; 0x6808 <__vector_79>
     140:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <__vector_80>
     144:	0c 94 b2 34 	jmp	0x6964	; 0x6964 <__vector_81>
     148:	0c 94 09 35 	jmp	0x6a12	; 0x6a12 <__vector_82>
     14c:	0c 94 60 35 	jmp	0x6ac0	; 0x6ac0 <__vector_83>
     150:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__vector_84>
     154:	0c 94 0e 36 	jmp	0x6c1c	; 0x6c1c <__vector_85>
     158:	0c 94 65 36 	jmp	0x6cca	; 0x6cca <__vector_86>
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 66 3f 	jmp	0x7ecc	; 0x7ecc <__vector_107>
     1b0:	0c 94 22 3a 	jmp	0x7444	; 0x7444 <__vector_108>
     1b4:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__vector_109>
     1b8:	0c 94 d0 3a 	jmp	0x75a0	; 0x75a0 <__vector_110>
     1bc:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__vector_111>
     1c0:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__vector_112>
     1c4:	0c 94 d5 3b 	jmp	0x77aa	; 0x77aa <__vector_113>
     1c8:	0c 94 2c 3c 	jmp	0x7858	; 0x7858 <__vector_114>
     1cc:	0c 94 83 3c 	jmp	0x7906	; 0x7906 <__vector_115>
     1d0:	0c 94 da 3c 	jmp	0x79b4	; 0x79b4 <__vector_116>
     1d4:	0c 94 31 3d 	jmp	0x7a62	; 0x7a62 <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__vector_122>
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__vector_124>
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <adc_disable_clock+0x42>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	11 e2       	ldi	r17, 0x21	; 33
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	ea e4       	ldi	r30, 0x4A	; 74
     378:	f9 eb       	ldi	r31, 0xB9	; 185
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 3b       	cpi	r26, 0xBC	; 188
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	28 e2       	ldi	r18, 0x28	; 40
     38e:	ac eb       	ldi	r26, 0xBC	; 188
     390:	b1 e2       	ldi	r27, 0x21	; 33
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a1 32       	cpi	r26, 0x21	; 33
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 06 4c 	call	0x980c	; 0x980c <main>
     3a0:	0c 94 a3 5c 	jmp	0xb946	; 0xb946 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <ioport_set_pin_low>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_low(port_pin_t pin)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	2a 97       	sbiw	r28, 0x0a	; 10
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	8a 87       	std	Y+10, r24	; 0x0a
     3b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	1a 82       	std	Y+2, r1	; 0x02
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	8b 83       	std	Y+3, r24	; 0x03
     3c0:	8b 81       	ldd	r24, Y+3	; 0x03
     3c2:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	86 95       	lsr	r24
     3c8:	86 95       	lsr	r24
     3ca:	86 95       	lsr	r24
     3cc:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	88 2f       	mov	r24, r24
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	82 95       	swap	r24
     3da:	92 95       	swap	r25
     3dc:	90 7f       	andi	r25, 0xF0	; 240
     3de:	98 27       	eor	r25, r24
     3e0:	80 7f       	andi	r24, 0xF0	; 240
     3e2:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     3e4:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     3e6:	8e 83       	std	Y+6, r24	; 0x06
     3e8:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	88 23       	and	r24, r24
     3ee:	a9 f0       	breq	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3f4:	88 85       	ldd	r24, Y+8	; 0x08
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c 01       	movw	r18, r24
     3fc:	27 70       	andi	r18, 0x07	; 7
     3fe:	33 27       	eor	r19, r19
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	2a 95       	dec	r18
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40e:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     410:	8e 81       	ldd	r24, Y+6	; 0x06
     412:	9f 81       	ldd	r25, Y+7	; 0x07
     414:	fc 01       	movw	r30, r24
     416:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, false);
}
     418:	14 c0       	rjmp	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     41e:	89 85       	ldd	r24, Y+9	; 0x09
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9c 01       	movw	r18, r24
     426:	27 70       	andi	r18, 0x07	; 7
     428:	33 27       	eor	r19, r19
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	2a 95       	dec	r18
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	fc 01       	movw	r30, r24
     440:	26 83       	std	Z+6, r18	; 0x06
     442:	00 00       	nop
     444:	2a 96       	adiw	r28, 0x0a	; 10
     446:	cd bf       	out	0x3d, r28	; 61
     448:	de bf       	out	0x3e, r29	; 62
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	2a 97       	sbiw	r28, 0x0a	; 10
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	8a 87       	std	Y+10, r24	; 0x0a
     460:	8a 85       	ldd	r24, Y+10	; 0x0a
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	8a 83       	std	Y+2, r24	; 0x02
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	8b 83       	std	Y+3, r24	; 0x03
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     470:	8c 81       	ldd	r24, Y+4	; 0x04
     472:	86 95       	lsr	r24
     474:	86 95       	lsr	r24
     476:	86 95       	lsr	r24
     478:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     47a:	8d 81       	ldd	r24, Y+5	; 0x05
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	82 95       	swap	r24
     486:	92 95       	swap	r25
     488:	90 7f       	andi	r25, 0xF0	; 240
     48a:	98 27       	eor	r25, r24
     48c:	80 7f       	andi	r24, 0xF0	; 240
     48e:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     490:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     492:	8e 83       	std	Y+6, r24	; 0x06
     494:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	88 23       	and	r24, r24
     49a:	a9 f0       	breq	.+42     	; 0x4c6 <ioport_set_pin_high+0x76>
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4a0:	88 85       	ldd	r24, Y+8	; 0x08
     4a2:	88 2f       	mov	r24, r24
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9c 01       	movw	r18, r24
     4a8:	27 70       	andi	r18, 0x07	; 7
     4aa:	33 27       	eor	r19, r19
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <ioport_set_pin_high+0x66>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	2a 95       	dec	r18
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <ioport_set_pin_high+0x62>
     4ba:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4bc:	8e 81       	ldd	r24, Y+6	; 0x06
     4be:	9f 81       	ldd	r25, Y+7	; 0x07
     4c0:	fc 01       	movw	r30, r24
     4c2:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, true);
}
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <ioport_set_pin_high+0x9e>
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4ca:	89 85       	ldd	r24, Y+9	; 0x09
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9c 01       	movw	r18, r24
     4d2:	27 70       	andi	r18, 0x07	; 7
     4d4:	33 27       	eor	r19, r19
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <ioport_set_pin_high+0x90>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	2a 95       	dec	r18
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <ioport_set_pin_high+0x8c>
     4e4:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ea:	fc 01       	movw	r30, r24
     4ec:	26 83       	std	Z+6, r18	; 0x06
     4ee:	00 00       	nop
     4f0:	2a 96       	adiw	r28, 0x0a	; 10
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 d0       	rcall	.+0      	; 0x502 <spi_put+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	6b 83       	std	Y+3, r22	; 0x03
	spi->DATA = data;
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	2b 81       	ldd	r18, Y+3	; 0x03
     512:	fc 01       	movw	r30, r24
     514:	23 83       	std	Z+3, r18	; 0x03
}
     516:	00 00       	nop
     518:	23 96       	adiw	r28, 0x03	; 3
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	1f 92       	push	r1
     52a:	1f 92       	push	r1
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	9a 83       	std	Y+2, r25	; 0x02
	return spi->DATA;
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	fc 01       	movw	r30, r24
     53a:	83 81       	ldd	r24, Z+3	; 0x03
}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <spi_is_tx_ok>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	1f 92       	push	r1
     54c:	1f 92       	push	r1
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	9a 83       	std	Y+2, r25	; 0x02
	return spi->STATUS & SPI_IF_bm ? true : false;
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	fc 01       	movw	r30, r24
     55c:	82 81       	ldd	r24, Z+2	; 0x02
     55e:	88 1f       	adc	r24, r24
     560:	88 27       	eor	r24, r24
     562:	88 1f       	adc	r24, r24
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <spi_enable_master_mode>:
 * \param spi Base address of the SPI instance.
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	1f 92       	push	r1
     574:	1f 92       	push	r1
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_MASTER_bm;
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	28 2f       	mov	r18, r24
     588:	20 61       	ori	r18, 0x10	; 16
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
}
     592:	00 00       	nop
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <spi_read_single>:
 * \param spi Base address of the SPI instance.
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <spi_read_single+0x6>
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	6b 83       	std	Y+3, r22	; 0x03
     5b0:	7c 83       	std	Y+4, r23	; 0x04
	*data=spi_get(spi);
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	b6 df       	rcall	.-148    	; 0x524 <spi_get>
     5b8:	28 2f       	mov	r18, r24
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
}
     5c2:	00 00       	nop
     5c4:	24 96       	adiw	r28, 0x04	; 4
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <spi_is_rx_full>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
inline static bool spi_is_rx_full(SPI_t *spi)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	1f 92       	push	r1
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	9a 83       	std	Y+2, r25	; 0x02
	return spi_is_tx_ok(spi);
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	b0 df       	rcall	.-160    	; 0x546 <spi_is_tx_ok>
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	9c e6       	ldi	r25, 0x6C	; 108
     5fc:	ac ed       	ldi	r26, 0xDC	; 220
     5fe:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     600:	bc 01       	movw	r22, r24
     602:	cd 01       	movw	r24, r26
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	1f 92       	push	r1
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     614:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     616:	ec df       	rcall	.-40     	; 0x5f0 <sysclk_get_main_hz>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	29 81       	ldd	r18, Y+1	; 0x01
     61e:	22 2f       	mov	r18, r18
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	04 c0       	rjmp	.+8      	; 0x62c <sysclk_get_per4_hz+0x22>
     624:	b6 95       	lsr	r27
     626:	a7 95       	ror	r26
     628:	97 95       	ror	r25
     62a:	87 95       	ror	r24
     62c:	2a 95       	dec	r18
     62e:	d2 f7       	brpl	.-12     	; 0x624 <sysclk_get_per4_hz+0x1a>
}
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	0f 90       	pop	r0
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     644:	e2 df       	rcall	.-60     	; 0x60a <sysclk_get_per4_hz>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     65c:	ef df       	rcall	.-34     	; 0x63c <sysclk_get_per2_hz>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
}
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
     674:	ef df       	rcall	.-34     	; 0x654 <sysclk_get_per_hz>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
}
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	1f 92       	push	r1
     68a:	1f 92       	push	r1
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	9a 83       	std	Y+2, r25	; 0x02
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	80 3c       	cpi	r24, 0xC0	; 192
     69a:	98 40       	sbci	r25, 0x08	; 8
     69c:	21 f4       	brne	.+8      	; 0x6a6 <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     69e:	68 e0       	ldi	r22, 0x08	; 8
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	80 3c       	cpi	r24, 0xC0	; 192
     6ac:	99 40       	sbci	r25, 0x09	; 9
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <spi_master_init+0x34>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     6b0:	68 e0       	ldi	r22, 0x08	; 8
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	if ((uint16_t)spi == (uint16_t)&SPIE) {
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	80 3c       	cpi	r24, 0xC0	; 192
     6be:	9a 40       	sbci	r25, 0x0A	; 10
     6c0:	21 f4       	brne	.+8      	; 0x6ca <spi_master_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E, PR_SPI_bm);
     6c2:	68 e0       	ldi	r22, 0x08	; 8
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	if ((uint16_t)spi == (uint16_t)&SPIF) {
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	80 3c       	cpi	r24, 0xC0	; 192
     6d0:	9b 40       	sbci	r25, 0x0B	; 11
     6d2:	21 f4       	brne	.+8      	; 0x6dc <spi_master_init+0x58>
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
     6d4:	68 e0       	ldi	r22, 0x08	; 8
     6d6:	86 e0       	ldi	r24, 0x06	; 6
     6d8:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
	}
#endif
	spi_enable_master_mode(spi);
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	46 df       	rcall	.-372    	; 0x56e <spi_enable_master_mode>
}
     6e2:	00 00       	nop
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	2d 97       	sbiw	r28, 0x0d	; 13
     704:	cd bf       	out	0x3d, r28	; 61
     706:	de bf       	out	0x3e, r29	; 62
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	6b 83       	std	Y+3, r22	; 0x03
     70e:	7c 83       	std	Y+4, r23	; 0x04
     710:	4d 83       	std	Y+5, r20	; 0x05
     712:	0e 83       	std	Y+6, r16	; 0x06
     714:	1f 83       	std	Y+7, r17	; 0x07
     716:	28 87       	std	Y+8, r18	; 0x08
     718:	39 87       	std	Y+9, r19	; 0x09
     71a:	ca 86       	std	Y+10, r12	; 0x0a
     71c:	db 86       	std	Y+11, r13	; 0x0b
     71e:	ec 86       	std	Y+12, r14	; 0x0c
     720:	fd 86       	std	Y+13, r15	; 0x0d
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     722:	a4 df       	rcall	.-184    	; 0x66c <sysclk_get_cpu_hz>
     724:	9b 01       	movw	r18, r22
     726:	ac 01       	movw	r20, r24
     728:	8e 81       	ldd	r24, Y+6	; 0x06
     72a:	9f 81       	ldd	r25, Y+7	; 0x07
     72c:	a8 85       	ldd	r26, Y+8	; 0x08
     72e:	b9 85       	ldd	r27, Y+9	; 0x09
     730:	e9 81       	ldd	r30, Y+1	; 0x01
     732:	fa 81       	ldd	r31, Y+2	; 0x02
     734:	89 01       	movw	r16, r18
     736:	9a 01       	movw	r18, r20
     738:	ac 01       	movw	r20, r24
     73a:	bd 01       	movw	r22, r26
     73c:	cf 01       	movw	r24, r30
     73e:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <spi_xmega_set_baud_div>
     742:	88 23       	and	r24, r24
     744:	ac f0       	brlt	.+42     	; 0x770 <spi_master_setup_device+0x82>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	28 2f       	mov	r18, r24
     750:	23 7f       	andi	r18, 0xF3	; 243
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     752:	8d 81       	ldd	r24, Y+5	; 0x05
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     760:	8c 70       	andi	r24, 0x0C	; 12
     762:	82 2b       	or	r24, r18
     764:	28 2f       	mov	r18, r24
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
     76e:	01 c0       	rjmp	.+2      	; 0x772 <spi_master_setup_device+0x84>
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
		Assert(false);
		return;
     770:	00 00       	nop
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     772:	2d 96       	adiw	r28, 0x0d	; 13
     774:	cd bf       	out	0x3d, r28	; 61
     776:	de bf       	out	0x3e, r29	; 62
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	29 97       	sbiw	r28, 0x09	; 9
     794:	cd bf       	out	0x3d, r28	; 61
     796:	de bf       	out	0x3e, r29	; 62
     798:	8c 83       	std	Y+4, r24	; 0x04
     79a:	9d 83       	std	Y+5, r25	; 0x05
     79c:	6e 83       	std	Y+6, r22	; 0x06
     79e:	7f 83       	std	Y+7, r23	; 0x07
     7a0:	48 87       	std	Y+8, r20	; 0x08
     7a2:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     7a4:	1b c0       	rjmp	.+54     	; 0x7dc <spi_write_packet+0x52>
		spi_write_single(spi, *data++);
     7a6:	8e 81       	ldd	r24, Y+6	; 0x06
     7a8:	9f 81       	ldd	r25, Y+7	; 0x07
     7aa:	9c 01       	movw	r18, r24
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	2e 83       	std	Y+6, r18	; 0x06
     7b2:	3f 83       	std	Y+7, r19	; 0x07
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 81       	ld	r18, Z
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	9d 81       	ldd	r25, Y+5	; 0x05
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	2b 83       	std	Y+3, r18	; 0x03
 * \param data The data byte to be loaded
 *
 */
__always_inline static void spi_write_single(SPI_t *spi, uint8_t data)
{
	spi_put(spi,data);
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	6b 81       	ldd	r22, Y+3	; 0x03
     7c8:	99 de       	rcall	.-718    	; 0x4fc <spi_put>
		
		while (!spi_is_rx_full(spi)) {
     7ca:	00 00       	nop
     7cc:	8c 81       	ldd	r24, Y+4	; 0x04
     7ce:	9d 81       	ldd	r25, Y+5	; 0x05
     7d0:	ff de       	rcall	.-514    	; 0x5d0 <spi_is_rx_full>
     7d2:	98 2f       	mov	r25, r24
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	89 27       	eor	r24, r25
     7d8:	88 23       	and	r24, r24
     7da:	c1 f7       	brne	.-16     	; 0x7cc <spi_write_packet+0x42>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     7dc:	88 85       	ldd	r24, Y+8	; 0x08
     7de:	99 85       	ldd	r25, Y+9	; 0x09
     7e0:	9c 01       	movw	r18, r24
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	31 09       	sbc	r19, r1
     7e6:	28 87       	std	Y+8, r18	; 0x08
     7e8:	39 87       	std	Y+9, r19	; 0x09
     7ea:	89 2b       	or	r24, r25
     7ec:	e1 f6       	brne	.-72     	; 0x7a6 <spi_write_packet+0x1c>
		
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
}
     7f0:	29 96       	adiw	r28, 0x09	; 9
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	29 97       	sbiw	r28, 0x09	; 9
     806:	cd bf       	out	0x3d, r28	; 61
     808:	de bf       	out	0x3e, r29	; 62
     80a:	8c 83       	std	Y+4, r24	; 0x04
     80c:	9d 83       	std	Y+5, r25	; 0x05
     80e:	6e 83       	std	Y+6, r22	; 0x06
     810:	7f 83       	std	Y+7, r23	; 0x07
     812:	48 87       	std	Y+8, r20	; 0x08
     814:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     816:	1e c0       	rjmp	.+60     	; 0x854 <spi_read_packet+0x58>
     818:	8c 81       	ldd	r24, Y+4	; 0x04
     81a:	9d 81       	ldd	r25, Y+5	; 0x05
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	6b 81       	ldd	r22, Y+3	; 0x03
     82a:	68 de       	rcall	.-816    	; 0x4fc <spi_put>
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     82c:	00 00       	nop
     82e:	8c 81       	ldd	r24, Y+4	; 0x04
     830:	9d 81       	ldd	r25, Y+5	; 0x05
     832:	ce de       	rcall	.-612    	; 0x5d0 <spi_is_rx_full>
     834:	98 2f       	mov	r25, r24
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	89 27       	eor	r24, r25
     83a:	88 23       	and	r24, r24
     83c:	c1 f7       	brne	.-16     	; 0x82e <spi_read_packet+0x32>
		}
		
		spi_read_single(spi, data);
     83e:	2e 81       	ldd	r18, Y+6	; 0x06
     840:	3f 81       	ldd	r19, Y+7	; 0x07
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	b9 01       	movw	r22, r18
     848:	aa de       	rcall	.-684    	; 0x59e <spi_read_single>
		data++;
     84a:	8e 81       	ldd	r24, Y+6	; 0x06
     84c:	9f 81       	ldd	r25, Y+7	; 0x07
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	8e 83       	std	Y+6, r24	; 0x06
     852:	9f 83       	std	Y+7, r25	; 0x07
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     854:	88 85       	ldd	r24, Y+8	; 0x08
     856:	99 85       	ldd	r25, Y+9	; 0x09
     858:	9c 01       	movw	r18, r24
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	31 09       	sbc	r19, r1
     85e:	28 87       	std	Y+8, r18	; 0x08
     860:	39 87       	std	Y+9, r19	; 0x09
     862:	89 2b       	or	r24, r25
     864:	c9 f6       	brne	.-78     	; 0x818 <spi_read_packet+0x1c>
		
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
     866:	80 e0       	ldi	r24, 0x00	; 0
}
     868:	29 96       	adiw	r28, 0x09	; 9
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	00 d0       	rcall	.+0      	; 0x87a <spi_select_device+0x6>
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	9a 83       	std	Y+2, r25	; 0x02
     884:	6b 83       	std	Y+3, r22	; 0x03
     886:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_low(device->id);
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	fc 01       	movw	r30, r24
     88e:	80 81       	ld	r24, Z
     890:	8a dd       	rcall	.-1260   	; 0x3a6 <ioport_set_pin_low>
}
     892:	00 00       	nop
     894:	24 96       	adiw	r28, 0x04	; 4
     896:	cd bf       	out	0x3d, r28	; 61
     898:	de bf       	out	0x3e, r29	; 62
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <spi_deselect_device+0x6>
     8a6:	1f 92       	push	r1
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	6b 83       	std	Y+3, r22	; 0x03
     8b2:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_high(device->id);
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	9c 81       	ldd	r25, Y+4	; 0x04
     8b8:	fc 01       	movw	r30, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	c9 dd       	rcall	.-1134   	; 0x450 <ioport_set_pin_high>
}
     8be:	00 00       	nop
     8c0:	24 96       	adiw	r28, 0x04	; 4
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <cpu_irq_save>:
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	1f 92       	push	r1
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	8f e3       	ldi	r24, 0x3F	; 63
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	89 83       	std	Y+1, r24	; 0x01
     8e0:	f8 94       	cli
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	0f 90       	pop	r0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <cpu_irq_restore>:
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	89 83       	std	Y+1, r24	; 0x01
     8f8:	8f e3       	ldi	r24, 0x3F	; 63
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	29 81       	ldd	r18, Y+1	; 0x01
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
     902:	00 00       	nop
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <sleepmgr_lock_mode>:
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	1f 92       	push	r1
     912:	1f 92       	push	r1
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	8a 83       	std	Y+2, r24	; 0x02
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	8d 5f       	subi	r24, 0xFD	; 253
     922:	97 4d       	sbci	r25, 0xD7	; 215
     924:	fc 01       	movw	r30, r24
     926:	80 81       	ld	r24, Z
     928:	8f 3f       	cpi	r24, 0xFF	; 255
     92a:	09 f4       	brne	.+2      	; 0x92e <sleepmgr_lock_mode+0x22>
     92c:	ff cf       	rjmp	.-2      	; 0x92c <sleepmgr_lock_mode+0x20>
     92e:	ce df       	rcall	.-100    	; 0x8cc <cpu_irq_save>
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9c 01       	movw	r18, r24
     93a:	2d 5f       	subi	r18, 0xFD	; 253
     93c:	37 4d       	sbci	r19, 0xD7	; 215
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	8d 5f       	subi	r24, 0xFD	; 253
     946:	97 4d       	sbci	r25, 0xD7	; 215
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	ce df       	rcall	.-100    	; 0x8ec <cpu_irq_restore>
     950:	00 00       	nop
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <sleepmgr_unlock_mode>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	1f 92       	push	r1
     962:	1f 92       	push	r1
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	8a 83       	std	Y+2, r24	; 0x02
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8d 5f       	subi	r24, 0xFD	; 253
     972:	97 4d       	sbci	r25, 0xD7	; 215
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	88 23       	and	r24, r24
     97a:	09 f4       	brne	.+2      	; 0x97e <sleepmgr_unlock_mode+0x22>
     97c:	ff cf       	rjmp	.-2      	; 0x97c <sleepmgr_unlock_mode+0x20>
     97e:	a6 df       	rcall	.-180    	; 0x8cc <cpu_irq_save>
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	9c 01       	movw	r18, r24
     98a:	2d 5f       	subi	r18, 0xFD	; 253
     98c:	37 4d       	sbci	r19, 0xD7	; 215
     98e:	f9 01       	movw	r30, r18
     990:	20 81       	ld	r18, Z
     992:	21 50       	subi	r18, 0x01	; 1
     994:	8d 5f       	subi	r24, 0xFD	; 253
     996:	97 4d       	sbci	r25, 0xD7	; 215
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	a6 df       	rcall	.-180    	; 0x8ec <cpu_irq_restore>
     9a0:	00 00       	nop
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	1f 92       	push	r1
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	89 83       	std	Y+1, r24	; 0x01
     9ba:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	81 15       	cp	r24, r1
     9c2:	92 40       	sbci	r25, 0x02	; 2
     9c4:	69 f4       	brne	.+26     	; 0x9e0 <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     9c6:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <__data_end>
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	98 0f       	add	r25, r24
     9ce:	90 93 bc 21 	sts	0x21BC, r25	; 0x8021bc <__data_end>
     9d2:	88 23       	and	r24, r24
     9d4:	b1 f4       	brne	.+44     	; 0xa02 <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9d6:	62 e0       	ldi	r22, 0x02	; 2
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     9de:	11 c0       	rjmp	.+34     	; 0xa02 <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	80 34       	cpi	r24, 0x40	; 64
     9e6:	92 40       	sbci	r25, 0x02	; 2
     9e8:	61 f4       	brne	.+24     	; 0xa02 <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     9ea:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <adcb_enable_count>
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	98 0f       	add	r25, r24
     9f2:	90 93 bd 21 	sts	0x21BD, r25	; 0x8021bd <adcb_enable_count>
     9f6:	88 23       	and	r24, r24
     9f8:	21 f4       	brne	.+8      	; 0xa02 <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     a02:	00 00       	nop
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	1f 92       	push	r1
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	81 15       	cp	r24, r1
     a24:	92 40       	sbci	r25, 0x02	; 2
     a26:	71 f4       	brne	.+28     	; 0xa44 <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     a28:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <__data_end>
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <__data_end>
     a32:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <__data_end>
     a36:	88 23       	and	r24, r24
     a38:	b9 f4       	brne	.+46     	; 0xa68 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     a42:	12 c0       	rjmp	.+36     	; 0xa68 <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	80 34       	cpi	r24, 0x40	; 64
     a4a:	92 40       	sbci	r25, 0x02	; 2
     a4c:	69 f4       	brne	.+26     	; 0xa68 <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     a4e:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <adcb_enable_count>
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <adcb_enable_count>
     a58:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <adcb_enable_count>
     a5c:	88 23       	and	r24, r24
     a5e:	21 f4       	brne	.+8      	; 0xa68 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     a68:	00 00       	nop
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <adc_enable+0x6>
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	8a 83       	std	Y+2, r24	; 0x02
     a80:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     a82:	24 df       	rcall	.-440    	; 0x8cc <cpu_irq_save>
     a84:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
     a86:	8a 81       	ldd	r24, Y+2	; 0x02
     a88:	9b 81       	ldd	r25, Y+3	; 0x03
     a8a:	90 df       	rcall	.-224    	; 0x9ac <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	9b 81       	ldd	r25, Y+3	; 0x03
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	28 2f       	mov	r18, r24
     a96:	21 60       	ori	r18, 0x01	; 1
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	9b 81       	ldd	r25, Y+3	; 0x03
     a9c:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
     a9e:	20 83       	st	Z, r18
     aa0:	89 81       	ldd	r24, Y+1	; 0x01

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
     aa2:	24 df       	rcall	.-440    	; 0x8ec <cpu_irq_restore>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	32 df       	rcall	.-412    	; 0x90c <sleepmgr_lock_mode>
}
     aa8:	00 00       	nop
     aaa:	23 96       	adiw	r28, 0x03	; 3
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	00 d0       	rcall	.+0      	; 0xabc <adc_disable+0x6>
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	8a 83       	std	Y+2, r24	; 0x02
     ac2:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     ac4:	03 df       	rcall	.-506    	; 0x8cc <cpu_irq_save>
     ac6:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA &= ~ADC_ENABLE_bm;
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	9b 81       	ldd	r25, Y+3	; 0x03
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	28 2f       	mov	r18, r24
     ad2:	2e 7f       	andi	r18, 0xFE	; 254
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	9b 81       	ldd	r25, Y+3	; 0x03
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	9b 81       	ldd	r25, Y+3	; 0x03
     ae0:	96 df       	rcall	.-212    	; 0xa0e <adc_disable_clock>
	cpu_irq_restore(flags);
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	03 df       	rcall	.-506    	; 0x8ec <cpu_irq_restore>

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	39 df       	rcall	.-398    	; 0x95c <sleepmgr_unlock_mode>
     aea:	00 00       	nop
}
     aec:	23 96       	adiw	r28, 0x03	; 3
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	1f 92       	push	r1
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     b02:	8f e3       	ldi	r24, 0x3F	; 63
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b0c:	f8 94       	cli
	return flags;
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	1f 92       	push	r1
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     b24:	8f e3       	ldi	r24, 0x3F	; 63
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	29 81       	ldd	r18, Y+1	; 0x01
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
}
     b2e:	00 00       	nop
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	1f 92       	push	r1
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	88 2f       	mov	r24, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	bc 01       	movw	r22, r24
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <nvm_read_byte>
}
     b52:	0f 90       	pop	r0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <adc_get_calibration_data+0x6>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	e9 f0       	breq	.+58     	; 0xbac <adc_get_calibration_data+0x52>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	89 f1       	breq	.+98     	; 0xbda <adc_get_calibration_data+0x80>
     b78:	89 2b       	or	r24, r25
     b7a:	09 f0       	breq	.+2      	; 0xb7e <adc_get_calibration_data+0x24>
     b7c:	45 c0       	rjmp	.+138    	; 0xc08 <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     b7e:	81 e2       	ldi	r24, 0x21	; 33
     b80:	db df       	rcall	.-74     	; 0xb38 <nvm_read_production_signature_row>
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	98 2f       	mov	r25, r24
     b90:	88 27       	eor	r24, r24
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	cf df       	rcall	.-98     	; 0xb38 <nvm_read_production_signature_row>
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	3a 81       	ldd	r19, Y+2	; 0x02
     ba2:	82 2b       	or	r24, r18
     ba4:	93 2b       	or	r25, r19
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     baa:	30 c0       	rjmp	.+96     	; 0xc0c <adc_get_calibration_data+0xb2>
     bac:	85 e2       	ldi	r24, 0x25	; 37
     bae:	c4 df       	rcall	.-120    	; 0xb38 <nvm_read_production_signature_row>
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	98 2f       	mov	r25, r24
     bbe:	88 27       	eor	r24, r24
     bc0:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	84 e2       	ldi	r24, 0x24	; 36
     bc6:	b8 df       	rcall	.-144    	; 0xb38 <nvm_read_production_signature_row>
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	29 81       	ldd	r18, Y+1	; 0x01
     bce:	3a 81       	ldd	r19, Y+2	; 0x02
     bd0:	82 2b       	or	r24, r18
     bd2:	93 2b       	or	r25, r19
     bd4:	89 83       	std	Y+1, r24	; 0x01
		break;
     bd6:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <adc_get_calibration_data+0xb2>
     bda:	8f e2       	ldi	r24, 0x2F	; 47
     bdc:	ad df       	rcall	.-166    	; 0xb38 <nvm_read_production_signature_row>
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	98 2f       	mov	r25, r24
     bec:	88 27       	eor	r24, r24
     bee:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	8e e2       	ldi	r24, 0x2E	; 46
     bf4:	a1 df       	rcall	.-190    	; 0xb38 <nvm_read_production_signature_row>
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	29 81       	ldd	r18, Y+1	; 0x01
     bfc:	3a 81       	ldd	r19, Y+2	; 0x02
     bfe:	82 2b       	or	r24, r18
     c00:	93 2b       	or	r25, r19
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	9a 83       	std	Y+2, r25	; 0x02
		break;
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     c08:	19 82       	std	Y+1, r1	; 0x01
     c0a:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c10:	23 96       	adiw	r28, 0x03	; 3
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c2c:	0f 92       	push	r0
     c2e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c32:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c36:	0f 92       	push	r0
     c38:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c3c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c40:	0f 92       	push	r0
     c42:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c46:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c4a:	0f 92       	push	r0
     c4c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <__vector_71+0x52>
     c6e:	1f 92       	push	r1
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     c74:	20 91 31 22 	lds	r18, 0x2231	; 0x802231 <adca_callback>
     c78:	30 91 32 22 	lds	r19, 0x2232	; 0x802232 <adca_callback+0x1>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c88:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	83 70       	andi	r24, 0x03	; 3
     c92:	99 27       	eor	r25, r25
     c94:	89 2b       	or	r24, r25
     c96:	39 f4       	brne	.+14     	; 0xca6 <__vector_71+0x8a>
		index += 2;
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	8e 5f       	subi	r24, 0xFE	; 254
     c9c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	86 95       	lsr	r24
     ca2:	86 95       	lsr	r24
     ca4:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	81 70       	andi	r24, 0x01	; 1
     cae:	99 27       	eor	r25, r25
     cb0:	89 2b       	or	r24, r25
     cb2:	19 f4       	brne	.+6      	; 0xcba <__vector_71+0x9e>
		index++;
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	ac 01       	movw	r20, r24
     cc0:	40 5e       	subi	r20, 0xE0	; 224
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	84 0f       	add	r24, r20
     cd8:	95 1f       	adc	r25, r21
     cda:	fc 01       	movw	r30, r24
     cdc:	84 81       	ldd	r24, Z+4	; 0x04
     cde:	95 81       	ldd	r25, Z+5	; 0x05
     ce0:	ac 01       	movw	r20, r24
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	f9 01       	movw	r30, r18
     cea:	19 95       	eicall
}
     cec:	00 00       	nop
     cee:	24 96       	adiw	r28, 0x04	; 4
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d16:	0f 90       	pop	r0
     d18:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d1c:	0f 90       	pop	r0
     d1e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d22:	0f 90       	pop	r0
     d24:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d28:	0f 90       	pop	r0
     d2a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d44:	0f 92       	push	r0
     d46:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d4a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d4e:	0f 92       	push	r0
     d50:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d54:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d58:	0f 92       	push	r0
     d5a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d62:	0f 92       	push	r0
     d64:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	00 d0       	rcall	.+0      	; 0xd86 <__vector_72+0x52>
     d86:	1f 92       	push	r1
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     d8c:	20 91 31 22 	lds	r18, 0x2231	; 0x802231 <adca_callback>
     d90:	30 91 32 22 	lds	r19, 0x2232	; 0x802232 <adca_callback+0x1>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     da0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	83 70       	andi	r24, 0x03	; 3
     daa:	99 27       	eor	r25, r25
     dac:	89 2b       	or	r24, r25
     dae:	39 f4       	brne	.+14     	; 0xdbe <__vector_72+0x8a>
		index += 2;
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	8e 5f       	subi	r24, 0xFE	; 254
     db4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	86 95       	lsr	r24
     dba:	86 95       	lsr	r24
     dbc:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	99 27       	eor	r25, r25
     dc8:	89 2b       	or	r24, r25
     dca:	19 f4       	brne	.+6      	; 0xdd2 <__vector_72+0x9e>
		index++;
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	ac 01       	movw	r20, r24
     dd8:	40 5e       	subi	r20, 0xE0	; 224
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	84 0f       	add	r24, r20
     df0:	95 1f       	adc	r25, r21
     df2:	fc 01       	movw	r30, r24
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	95 81       	ldd	r25, Z+5	; 0x05
     df8:	ac 01       	movw	r20, r24
     dfa:	62 e0       	ldi	r22, 0x02	; 2
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	f9 01       	movw	r30, r18
     e02:	19 95       	eicall
}
     e04:	00 00       	nop
     e06:	24 96       	adiw	r28, 0x04	; 4
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e2e:	0f 90       	pop	r0
     e30:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e34:	0f 90       	pop	r0
     e36:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e3a:	0f 90       	pop	r0
     e3c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e40:	0f 90       	pop	r0
     e42:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e5c:	0f 92       	push	r0
     e5e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e62:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e66:	0f 92       	push	r0
     e68:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e6c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e70:	0f 92       	push	r0
     e72:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e76:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e7a:	0f 92       	push	r0
     e7c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <__vector_73+0x52>
     e9e:	1f 92       	push	r1
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     ea4:	20 91 31 22 	lds	r18, 0x2231	; 0x802231 <adca_callback>
     ea8:	30 91 32 22 	lds	r19, 0x2232	; 0x802232 <adca_callback+0x1>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     eb8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	83 70       	andi	r24, 0x03	; 3
     ec2:	99 27       	eor	r25, r25
     ec4:	89 2b       	or	r24, r25
     ec6:	39 f4       	brne	.+14     	; 0xed6 <__vector_73+0x8a>
		index += 2;
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	8e 5f       	subi	r24, 0xFE	; 254
     ecc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	86 95       	lsr	r24
     ed2:	86 95       	lsr	r24
     ed4:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	81 70       	andi	r24, 0x01	; 1
     ede:	99 27       	eor	r25, r25
     ee0:	89 2b       	or	r24, r25
     ee2:	19 f4       	brne	.+6      	; 0xeea <__vector_73+0x9e>
		index++;
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	ac 01       	movw	r20, r24
     ef0:	40 5e       	subi	r20, 0xE0	; 224
     ef2:	5f 4f       	sbci	r21, 0xFF	; 255
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	84 0f       	add	r24, r20
     f08:	95 1f       	adc	r25, r21
     f0a:	fc 01       	movw	r30, r24
     f0c:	84 81       	ldd	r24, Z+4	; 0x04
     f0e:	95 81       	ldd	r25, Z+5	; 0x05
     f10:	ac 01       	movw	r20, r24
     f12:	64 e0       	ldi	r22, 0x04	; 4
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	f9 01       	movw	r30, r18
     f1a:	19 95       	eicall
}
     f1c:	00 00       	nop
     f1e:	24 96       	adiw	r28, 0x04	; 4
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f46:	0f 90       	pop	r0
     f48:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f4c:	0f 90       	pop	r0
     f4e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f52:	0f 90       	pop	r0
     f54:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f58:	0f 90       	pop	r0
     f5a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f74:	0f 92       	push	r0
     f76:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f7a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f7e:	0f 92       	push	r0
     f80:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f84:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f88:	0f 92       	push	r0
     f8a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f8e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f92:	0f 92       	push	r0
     f94:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <__vector_74+0x52>
     fb6:	1f 92       	push	r1
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     fbc:	20 91 31 22 	lds	r18, 0x2231	; 0x802231 <adca_callback>
     fc0:	30 91 32 22 	lds	r19, 0x2232	; 0x802232 <adca_callback+0x1>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	88 e0       	ldi	r24, 0x08	; 8
     fce:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     fd0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	83 70       	andi	r24, 0x03	; 3
     fda:	99 27       	eor	r25, r25
     fdc:	89 2b       	or	r24, r25
     fde:	39 f4       	brne	.+14     	; 0xfee <__vector_74+0x8a>
		index += 2;
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	8e 5f       	subi	r24, 0xFE	; 254
     fe4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	86 95       	lsr	r24
     fea:	86 95       	lsr	r24
     fec:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	99 27       	eor	r25, r25
     ff8:	89 2b       	or	r24, r25
     ffa:	19 f4       	brne	.+6      	; 0x1002 <__vector_74+0x9e>
		index++;
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	ac 01       	movw	r20, r24
    1008:	40 5e       	subi	r20, 0xE0	; 224
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	fc 01       	movw	r30, r24
    1024:	84 81       	ldd	r24, Z+4	; 0x04
    1026:	95 81       	ldd	r25, Z+5	; 0x05
    1028:	ac 01       	movw	r20, r24
    102a:	68 e0       	ldi	r22, 0x08	; 8
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	f9 01       	movw	r30, r18
    1032:	19 95       	eicall
}
    1034:	00 00       	nop
    1036:	24 96       	adiw	r28, 0x04	; 4
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    105e:	0f 90       	pop	r0
    1060:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1064:	0f 90       	pop	r0
    1066:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    106a:	0f 90       	pop	r0
    106c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1070:	0f 90       	pop	r0
    1072:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    108c:	0f 92       	push	r0
    108e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1092:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1096:	0f 92       	push	r0
    1098:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    109c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10a0:	0f 92       	push	r0
    10a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10aa:	0f 92       	push	r0
    10ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	4f 93       	push	r20
    10b6:	5f 93       	push	r21
    10b8:	6f 93       	push	r22
    10ba:	7f 93       	push	r23
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	af 93       	push	r26
    10c2:	bf 93       	push	r27
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <__vector_39+0x52>
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    10d4:	20 91 2f 22 	lds	r18, 0x222F	; 0x80222f <adcb_callback>
    10d8:	30 91 30 22 	lds	r19, 0x2230	; 0x802230 <adcb_callback+0x1>
    10dc:	80 e4       	ldi	r24, 0x40	; 64
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    10e8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	83 70       	andi	r24, 0x03	; 3
    10f2:	99 27       	eor	r25, r25
    10f4:	89 2b       	or	r24, r25
    10f6:	39 f4       	brne	.+14     	; 0x1106 <__vector_39+0x8a>
		index += 2;
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	8e 5f       	subi	r24, 0xFE	; 254
    10fc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	86 95       	lsr	r24
    1102:	86 95       	lsr	r24
    1104:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	99 27       	eor	r25, r25
    1110:	89 2b       	or	r24, r25
    1112:	19 f4       	brne	.+6      	; 0x111a <__vector_39+0x9e>
		index++;
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	ac 01       	movw	r20, r24
    1120:	40 5e       	subi	r20, 0xE0	; 224
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	84 0f       	add	r24, r20
    1138:	95 1f       	adc	r25, r21
    113a:	fc 01       	movw	r30, r24
    113c:	84 81       	ldd	r24, Z+4	; 0x04
    113e:	95 81       	ldd	r25, Z+5	; 0x05
    1140:	ac 01       	movw	r20, r24
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	80 e4       	ldi	r24, 0x40	; 64
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	f9 01       	movw	r30, r18
    114a:	19 95       	eicall
}
    114c:	00 00       	nop
    114e:	24 96       	adiw	r28, 0x04	; 4
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1176:	0f 90       	pop	r0
    1178:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    117c:	0f 90       	pop	r0
    117e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1182:	0f 90       	pop	r0
    1184:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1188:	0f 90       	pop	r0
    118a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11a4:	0f 92       	push	r0
    11a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11ae:	0f 92       	push	r0
    11b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11b8:	0f 92       	push	r0
    11ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11c2:	0f 92       	push	r0
    11c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <__vector_40+0x52>
    11e6:	1f 92       	push	r1
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    11ec:	20 91 2f 22 	lds	r18, 0x222F	; 0x80222f <adcb_callback>
    11f0:	30 91 30 22 	lds	r19, 0x2230	; 0x802230 <adcb_callback+0x1>
    11f4:	80 e4       	ldi	r24, 0x40	; 64
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1200:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	83 70       	andi	r24, 0x03	; 3
    120a:	99 27       	eor	r25, r25
    120c:	89 2b       	or	r24, r25
    120e:	39 f4       	brne	.+14     	; 0x121e <__vector_40+0x8a>
		index += 2;
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	8e 5f       	subi	r24, 0xFE	; 254
    1214:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	99 27       	eor	r25, r25
    1228:	89 2b       	or	r24, r25
    122a:	19 f4       	brne	.+6      	; 0x1232 <__vector_40+0x9e>
		index++;
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	ac 01       	movw	r20, r24
    1238:	40 5e       	subi	r20, 0xE0	; 224
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	84 0f       	add	r24, r20
    1250:	95 1f       	adc	r25, r21
    1252:	fc 01       	movw	r30, r24
    1254:	84 81       	ldd	r24, Z+4	; 0x04
    1256:	95 81       	ldd	r25, Z+5	; 0x05
    1258:	ac 01       	movw	r20, r24
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	80 e4       	ldi	r24, 0x40	; 64
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	f9 01       	movw	r30, r18
    1262:	19 95       	eicall
}
    1264:	00 00       	nop
    1266:	24 96       	adiw	r28, 0x04	; 4
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    128e:	0f 90       	pop	r0
    1290:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1294:	0f 90       	pop	r0
    1296:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    129a:	0f 90       	pop	r0
    129c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12a0:	0f 90       	pop	r0
    12a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12bc:	0f 92       	push	r0
    12be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12c6:	0f 92       	push	r0
    12c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12d0:	0f 92       	push	r0
    12d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12da:	0f 92       	push	r0
    12dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <__vector_41+0x52>
    12fe:	1f 92       	push	r1
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1304:	20 91 2f 22 	lds	r18, 0x222F	; 0x80222f <adcb_callback>
    1308:	30 91 30 22 	lds	r19, 0x2230	; 0x802230 <adcb_callback+0x1>
    130c:	80 e4       	ldi	r24, 0x40	; 64
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1318:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	83 70       	andi	r24, 0x03	; 3
    1322:	99 27       	eor	r25, r25
    1324:	89 2b       	or	r24, r25
    1326:	39 f4       	brne	.+14     	; 0x1336 <__vector_41+0x8a>
		index += 2;
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	8e 5f       	subi	r24, 0xFE	; 254
    132c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	86 95       	lsr	r24
    1332:	86 95       	lsr	r24
    1334:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	99 27       	eor	r25, r25
    1340:	89 2b       	or	r24, r25
    1342:	19 f4       	brne	.+6      	; 0x134a <__vector_41+0x9e>
		index++;
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	ac 01       	movw	r20, r24
    1350:	40 5e       	subi	r20, 0xE0	; 224
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	84 0f       	add	r24, r20
    1368:	95 1f       	adc	r25, r21
    136a:	fc 01       	movw	r30, r24
    136c:	84 81       	ldd	r24, Z+4	; 0x04
    136e:	95 81       	ldd	r25, Z+5	; 0x05
    1370:	ac 01       	movw	r20, r24
    1372:	64 e0       	ldi	r22, 0x04	; 4
    1374:	80 e4       	ldi	r24, 0x40	; 64
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	f9 01       	movw	r30, r18
    137a:	19 95       	eicall
}
    137c:	00 00       	nop
    137e:	24 96       	adiw	r28, 0x04	; 4
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13a6:	0f 90       	pop	r0
    13a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ac:	0f 90       	pop	r0
    13ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13b2:	0f 90       	pop	r0
    13b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13b8:	0f 90       	pop	r0
    13ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13d4:	0f 92       	push	r0
    13d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13de:	0f 92       	push	r0
    13e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13e8:	0f 92       	push	r0
    13ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13f2:	0f 92       	push	r0
    13f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	00 d0       	rcall	.+0      	; 0x1416 <__vector_42+0x52>
    1416:	1f 92       	push	r1
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    141c:	20 91 2f 22 	lds	r18, 0x222F	; 0x80222f <adcb_callback>
    1420:	30 91 30 22 	lds	r19, 0x2230	; 0x802230 <adcb_callback+0x1>
    1424:	80 e4       	ldi	r24, 0x40	; 64
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	88 e0       	ldi	r24, 0x08	; 8
    142e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1430:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	99 27       	eor	r25, r25
    143c:	89 2b       	or	r24, r25
    143e:	39 f4       	brne	.+14     	; 0x144e <__vector_42+0x8a>
		index += 2;
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	8e 5f       	subi	r24, 0xFE	; 254
    1444:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	99 27       	eor	r25, r25
    1458:	89 2b       	or	r24, r25
    145a:	19 f4       	brne	.+6      	; 0x1462 <__vector_42+0x9e>
		index++;
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	8f 5f       	subi	r24, 0xFF	; 255
    1460:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	ac 01       	movw	r20, r24
    1468:	40 5e       	subi	r20, 0xE0	; 224
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	84 0f       	add	r24, r20
    1480:	95 1f       	adc	r25, r21
    1482:	fc 01       	movw	r30, r24
    1484:	84 81       	ldd	r24, Z+4	; 0x04
    1486:	95 81       	ldd	r25, Z+5	; 0x05
    1488:	ac 01       	movw	r20, r24
    148a:	68 e0       	ldi	r22, 0x08	; 8
    148c:	80 e4       	ldi	r24, 0x40	; 64
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	f9 01       	movw	r30, r18
    1492:	19 95       	eicall
}
    1494:	00 00       	nop
    1496:	24 96       	adiw	r28, 0x04	; 4
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14be:	0f 90       	pop	r0
    14c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14c4:	0f 90       	pop	r0
    14c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    14ca:	0f 90       	pop	r0
    14cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    14d0:	0f 90       	pop	r0
    14d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	28 97       	sbiw	r28, 0x08	; 8
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	6f 83       	std	Y+7, r22	; 0x07
    14f0:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	81 15       	cp	r24, r1
    14f8:	92 40       	sbci	r25, 0x02	; 2
    14fa:	29 f4       	brne	.+10     	; 0x1506 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	2d db       	rcall	.-2470   	; 0xb5a <adc_get_calibration_data>
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	0a c0       	rjmp	.+20     	; 0x151a <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	80 34       	cpi	r24, 0x40	; 64
    150c:	92 40       	sbci	r25, 0x02	; 2
    150e:	09 f0       	breq	.+2      	; 0x1512 <adc_write_configuration+0x36>
    1510:	56 c0       	rjmp	.+172    	; 0x15be <adc_write_configuration+0xe2>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	22 db       	rcall	.-2492   	; 0xb5a <adc_get_calibration_data>
    1516:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	ee da       	rcall	.-2596   	; 0xaf8 <cpu_irq_save>
	adc_enable_clock(adc);
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	44 da       	rcall	.-2936   	; 0x9ac <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	22 e0       	ldi	r18, 0x02	; 2
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
	adc->CAL = cal;
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	3a 81       	ldd	r19, Y+2	; 0x02
    1542:	fc 01       	movw	r30, r24
    1544:	24 87       	std	Z+12, r18	; 0x0c
    1546:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    1548:	8f 81       	ldd	r24, Y+7	; 0x07
    154a:	98 85       	ldd	r25, Y+8	; 0x08
    154c:	fc 01       	movw	r30, r24
    154e:	25 81       	ldd	r18, Z+5	; 0x05
    1550:	36 81       	ldd	r19, Z+6	; 0x06
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	fc 01       	movw	r30, r24
    1558:	20 8f       	std	Z+24, r18	; 0x18
    155a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    155c:	8f 81       	ldd	r24, Y+7	; 0x07
    155e:	98 85       	ldd	r25, Y+8	; 0x08
    1560:	fc 01       	movw	r30, r24
    1562:	22 81       	ldd	r18, Z+2	; 0x02
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	fc 01       	movw	r30, r24
    156a:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    156c:	8f 81       	ldd	r24, Y+7	; 0x07
    156e:	98 85       	ldd	r25, Y+8	; 0x08
    1570:	fc 01       	movw	r30, r24
    1572:	24 81       	ldd	r18, Z+4	; 0x04
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	fc 01       	movw	r30, r24
    157a:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	fc 01       	movw	r30, r24
    1582:	23 81       	ldd	r18, Z+3	; 0x03
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	fc 01       	movw	r30, r24
    158a:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	fc 01       	movw	r30, r24
    1592:	21 81       	ldd	r18, Z+1	; 0x01
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	fc 01       	movw	r30, r24
    159a:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	98 85       	ldd	r25, Y+8	; 0x08
    15a0:	fc 01       	movw	r30, r24
    15a2:	90 81       	ld	r25, Z
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	29 2f       	mov	r18, r25
    15a8:	28 2b       	or	r18, r24
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	fc 01       	movw	r30, r24

	adc_disable_clock(adc);
    15b0:	20 83       	st	Z, r18
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06

	cpu_irq_restore(flags);
    15b6:	2b da       	rcall	.-2986   	; 0xa0e <adc_disable_clock>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	ae da       	rcall	.-2724   	; 0xb18 <cpu_irq_restore>
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <adc_write_configuration+0xe4>
	} else
#endif

	{
		Assert(0);
		return;
    15be:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    15c0:	28 96       	adiw	r28, 0x08	; 8
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	25 97       	sbiw	r28, 0x05	; 5
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	9b 83       	std	Y+3, r25	; 0x03
    15de:	6c 83       	std	Y+4, r22	; 0x04
    15e0:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    15e2:	8a da       	rcall	.-2796   	; 0xaf8 <cpu_irq_save>
    15e4:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	e0 d9       	rcall	.-3136   	; 0x9ac <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	fc 01       	movw	r30, r24
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	20 7c       	andi	r18, 0xC0	; 192
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	fc 01       	movw	r30, r24
    15fe:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	9b 81       	ldd	r25, Y+3	; 0x03
    1604:	fc 01       	movw	r30, r24
    1606:	20 8d       	ldd	r18, Z+24	; 0x18
    1608:	31 8d       	ldd	r19, Z+25	; 0x19
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	9d 81       	ldd	r25, Y+5	; 0x05
    160e:	fc 01       	movw	r30, r24
    1610:	25 83       	std	Z+5, r18	; 0x05
    1612:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	fc 01       	movw	r30, r24
    161a:	22 81       	ldd	r18, Z+2	; 0x02
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	9d 81       	ldd	r25, Y+5	; 0x05
    1620:	fc 01       	movw	r30, r24
    1622:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	fc 01       	movw	r30, r24
    162a:	24 81       	ldd	r18, Z+4	; 0x04
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	fc 01       	movw	r30, r24
    1632:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	fc 01       	movw	r30, r24
    163a:	23 81       	ldd	r18, Z+3	; 0x03
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	fc 01       	movw	r30, r24
    1642:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	9b 81       	ldd	r25, Y+3	; 0x03
    1648:	fc 01       	movw	r30, r24
    164a:	21 81       	ldd	r18, Z+1	; 0x01
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	fc 01       	movw	r30, r24
    1652:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03

	cpu_irq_restore(flags);
    1658:	da d9       	rcall	.-3148   	; 0xa0e <adc_disable_clock>
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	5d da       	rcall	.-2886   	; 0xb18 <cpu_irq_restore>
}
    165e:	00 00       	nop
    1660:	25 96       	adiw	r28, 0x05	; 5
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2c 97       	sbiw	r28, 0x0c	; 12
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	88 87       	std	Y+8, r24	; 0x08
    167c:	99 87       	std	Y+9, r25	; 0x09
    167e:	6a 87       	std	Y+10, r22	; 0x0a
    1680:	4b 87       	std	Y+11, r20	; 0x0b
    1682:	5c 87       	std	Y+12, r21	; 0x0c
    1684:	88 85       	ldd	r24, Y+8	; 0x08
    1686:	99 85       	ldd	r25, Y+9	; 0x09
    1688:	8c 83       	std	Y+4, r24	; 0x04
    168a:	9d 83       	std	Y+5, r25	; 0x05
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1690:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1692:	8e 81       	ldd	r24, Y+6	; 0x06
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	83 70       	andi	r24, 0x03	; 3
    169a:	99 27       	eor	r25, r25
    169c:	89 2b       	or	r24, r25
    169e:	39 f4       	brne	.+14     	; 0x16ae <adcch_write_configuration+0x42>
		index += 2;
    16a0:	8f 81       	ldd	r24, Y+7	; 0x07
    16a2:	8e 5f       	subi	r24, 0xFE	; 254
    16a4:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	86 95       	lsr	r24
    16aa:	86 95       	lsr	r24
    16ac:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	99 27       	eor	r25, r25
    16b8:	89 2b       	or	r24, r25
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <adcch_write_configuration+0x56>
		index++;
    16bc:	8f 81       	ldd	r24, Y+7	; 0x07
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	9c 01       	movw	r18, r24
    16c8:	20 5e       	subi	r18, 0xE0	; 224
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	8f 81       	ldd	r24, Y+7	; 0x07
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    16e6:	08 da       	rcall	.-3056   	; 0xaf8 <cpu_irq_save>
    16e8:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    16ea:	88 85       	ldd	r24, Y+8	; 0x08
    16ec:	99 85       	ldd	r25, Y+9	; 0x09
    16ee:	5e d9       	rcall	.-3396   	; 0x9ac <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    16f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 81       	ld	r18, Z
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    1700:	8b 85       	ldd	r24, Y+11	; 0x0b
    1702:	9c 85       	ldd	r25, Y+12	; 0x0c
    1704:	fc 01       	movw	r30, r24
    1706:	22 81       	ldd	r18, Z+2	; 0x02
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	fc 01       	movw	r30, r24
    170e:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1710:	8b 85       	ldd	r24, Y+11	; 0x0b
    1712:	9c 85       	ldd	r25, Y+12	; 0x0c
    1714:	fc 01       	movw	r30, r24
    1716:	21 81       	ldd	r18, Z+1	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	fc 01       	movw	r30, r24
    171e:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    1720:	8a 85       	ldd	r24, Y+10	; 0x0a
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	81 70       	andi	r24, 0x01	; 1
    1728:	99 27       	eor	r25, r25
    172a:	89 2b       	or	r24, r25
    172c:	41 f0       	breq	.+16     	; 0x173e <adcch_write_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    172e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1730:	9c 85       	ldd	r25, Y+12	; 0x0c
    1732:	fc 01       	movw	r30, r24
    1734:	23 81       	ldd	r18, Z+3	; 0x03
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	fc 01       	movw	r30, r24
    173c:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
    173e:	88 85       	ldd	r24, Y+8	; 0x08
    1740:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    1742:	65 d9       	rcall	.-3382   	; 0xa0e <adc_disable_clock>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	e8 d9       	rcall	.-3120   	; 0xb18 <cpu_irq_restore>
}
    1748:	00 00       	nop
    174a:	2c 96       	adiw	r28, 0x0c	; 12
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	2c 97       	sbiw	r28, 0x0c	; 12
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	88 87       	std	Y+8, r24	; 0x08
    1766:	99 87       	std	Y+9, r25	; 0x09
    1768:	6a 87       	std	Y+10, r22	; 0x0a
    176a:	4b 87       	std	Y+11, r20	; 0x0b
    176c:	5c 87       	std	Y+12, r21	; 0x0c
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	99 85       	ldd	r25, Y+9	; 0x09
    1772:	8c 83       	std	Y+4, r24	; 0x04
    1774:	9d 83       	std	Y+5, r25	; 0x05
    1776:	8a 85       	ldd	r24, Y+10	; 0x0a
    1778:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    177a:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	83 70       	andi	r24, 0x03	; 3
    1784:	99 27       	eor	r25, r25
    1786:	89 2b       	or	r24, r25
    1788:	39 f4       	brne	.+14     	; 0x1798 <adcch_read_configuration+0x42>
		index += 2;
    178a:	8f 81       	ldd	r24, Y+7	; 0x07
    178c:	8e 5f       	subi	r24, 0xFE	; 254
    178e:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	86 95       	lsr	r24
    1794:	86 95       	lsr	r24
    1796:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	99 27       	eor	r25, r25
    17a2:	89 2b       	or	r24, r25
    17a4:	19 f4       	brne	.+6      	; 0x17ac <adcch_read_configuration+0x56>
		index++;
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	9c 01       	movw	r18, r24
    17b2:	20 5e       	subi	r18, 0xE0	; 224
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	8f 81       	ldd	r24, Y+7	; 0x07
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    17d0:	93 d9       	rcall	.-3290   	; 0xaf8 <cpu_irq_save>
    17d2:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    17d4:	88 85       	ldd	r24, Y+8	; 0x08
    17d6:	99 85       	ldd	r25, Y+9	; 0x09
    17d8:	e9 d8       	rcall	.-3630   	; 0x9ac <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	fc 01       	movw	r30, r24
    17e0:	20 81       	ld	r18, Z
    17e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	fc 01       	movw	r30, r24
    17f0:	22 81       	ldd	r18, Z+2	; 0x02
    17f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f6:	fc 01       	movw	r30, r24
    17f8:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	fc 01       	movw	r30, r24
    1800:	21 81       	ldd	r18, Z+1	; 0x01
    1802:	8b 85       	ldd	r24, Y+11	; 0x0b
    1804:	9c 85       	ldd	r25, Y+12	; 0x0c
    1806:	fc 01       	movw	r30, r24
    1808:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    180a:	8a 85       	ldd	r24, Y+10	; 0x0a
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	99 27       	eor	r25, r25
    1814:	89 2b       	or	r24, r25
    1816:	41 f0       	breq	.+16     	; 0x1828 <adcch_read_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	9a 81       	ldd	r25, Y+2	; 0x02
    181c:	fc 01       	movw	r30, r24
    181e:	26 81       	ldd	r18, Z+6	; 0x06
    1820:	8b 85       	ldd	r24, Y+11	; 0x0b
    1822:	9c 85       	ldd	r25, Y+12	; 0x0c
    1824:	fc 01       	movw	r30, r24
    1826:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
    1828:	88 85       	ldd	r24, Y+8	; 0x08
    182a:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    182c:	f0 d8       	rcall	.-3616   	; 0xa0e <adc_disable_clock>
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	73 d9       	rcall	.-3354   	; 0xb18 <cpu_irq_restore>
}
    1832:	00 00       	nop
    1834:	2c 96       	adiw	r28, 0x0c	; 12
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	1f 92       	push	r1
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    184a:	8f e3       	ldi	r24, 0x3F	; 63
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	80 81       	ld	r24, Z
    1852:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1854:	f8 94       	cli
	return flags;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
}
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	1f 92       	push	r1
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    186c:	8f e3       	ldi	r24, 0x3F	; 63
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	29 81       	ldd	r18, Y+1	; 0x01
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
}
    1876:	00 00       	nop
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	9c e6       	ldi	r25, 0x6C	; 108
    188c:	ac ed       	ldi	r26, 0xDC	; 220
    188e:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	1f 92       	push	r1
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    18a4:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    18a6:	ec df       	rcall	.-40     	; 0x1880 <sysclk_get_main_hz>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	29 81       	ldd	r18, Y+1	; 0x01
    18ae:	22 2f       	mov	r18, r18
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <sysclk_get_per4_hz+0x22>
    18b4:	b6 95       	lsr	r27
    18b6:	a7 95       	ror	r26
    18b8:	97 95       	ror	r25
    18ba:	87 95       	ror	r24
    18bc:	2a 95       	dec	r18
    18be:	d2 f7       	brpl	.-12     	; 0x18b4 <sysclk_get_per4_hz+0x1a>
}
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0f 90       	pop	r0
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    18d4:	e2 df       	rcall	.-60     	; 0x189a <sysclk_get_per4_hz>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	08 95       	ret

000018e4 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    18ec:	ef df       	rcall	.-34     	; 0x18cc <sysclk_get_per2_hz>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
}
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <adc_start_conversion+0x6>
    1902:	1f 92       	push	r1
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
    190e:	98 df       	rcall	.-208    	; 0x1840 <cpu_irq_save>
    1910:	89 83       	std	Y+1, r24	; 0x01
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	82 2b       	or	r24, r18
    192c:	28 2f       	mov	r18, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	9b 81       	ldd	r25, Y+3	; 0x03
    1932:	fc 01       	movw	r30, r24
    1934:	20 83       	st	Z, r18
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
#endif
	cpu_irq_restore(flags);
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	93 df       	rcall	.-218    	; 0x1860 <cpu_irq_restore>
}
    193a:	00 00       	nop
    193c:	24 96       	adiw	r28, 0x04	; 4
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	00 d0       	rcall	.+0      	; 0x194e <adc_get_interrupt_flag+0x6>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	96 81       	ldd	r25, Z+6	; 0x06
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	89 23       	and	r24, r25
}
    1964:	23 96       	adiw	r28, 0x03	; 3
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	00 d0       	rcall	.+0      	; 0x1976 <adc_clear_interrupt_flag+0x6>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	fc 01       	movw	r30, r24
    1988:	26 83       	std	Z+6, r18	; 0x06
}
    198a:	00 00       	nop
    198c:	23 96       	adiw	r28, 0x03	; 3
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	00 d0       	rcall	.+0      	; 0x199e <adc_wait_for_interrupt_flag+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	6b 81       	ldd	r22, Y+3	; 0x03
    19ae:	cc df       	rcall	.-104    	; 0x1948 <adc_get_interrupt_flag>
    19b0:	98 2f       	mov	r25, r24
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	98 17       	cp	r25, r24
    19b6:	c1 f7       	brne	.-16     	; 0x19a8 <adc_wait_for_interrupt_flag+0x10>
	adc_clear_interrupt_flag(adc, ch_mask);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	6b 81       	ldd	r22, Y+3	; 0x03
    19be:	d8 df       	rcall	.-80     	; 0x1970 <adc_clear_interrupt_flag>
}
    19c0:	00 00       	nop
    19c2:	23 96       	adiw	r28, 0x03	; 3
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	2d 97       	sbiw	r28, 0x0d	; 13
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	88 87       	std	Y+8, r24	; 0x08
    19de:	99 87       	std	Y+9, r25	; 0x09
    19e0:	4a 87       	std	Y+10, r20	; 0x0a
    19e2:	5b 87       	std	Y+11, r21	; 0x0b
    19e4:	6c 87       	std	Y+12, r22	; 0x0c
    19e6:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    19e8:	7d df       	rcall	.-262    	; 0x18e4 <sysclk_get_per_hz>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	9b 83       	std	Y+3, r25	; 0x03
    19f2:	ac 83       	std	Y+4, r26	; 0x04
    19f4:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	ac 81       	ldd	r26, Y+4	; 0x04
    19fc:	bd 81       	ldd	r27, Y+5	; 0x05
    19fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a00:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a02:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a04:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <__udivmodsi4>
    1a0e:	da 01       	movw	r26, r20
    1a10:	c9 01       	movw	r24, r18
    1a12:	8e 83       	std	Y+6, r24	; 0x06
    1a14:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	05 97       	sbiw	r24, 0x05	; 5
    1a1c:	10 f4       	brcc	.+4      	; 0x1a22 <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	2f c0       	rjmp	.+94     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	9f 81       	ldd	r25, Y+7	; 0x07
    1a26:	09 97       	sbiw	r24, 0x09	; 9
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	28 c0       	rjmp	.+80     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    1a30:	8e 81       	ldd	r24, Y+6	; 0x06
    1a32:	9f 81       	ldd	r25, Y+7	; 0x07
    1a34:	41 97       	sbiw	r24, 0x11	; 17
    1a36:	18 f4       	brcc	.+6      	; 0x1a3e <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	21 c0       	rjmp	.+66     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    1a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a40:	9f 81       	ldd	r25, Y+7	; 0x07
    1a42:	81 97       	sbiw	r24, 0x21	; 33
    1a44:	18 f4       	brcc	.+6      	; 0x1a4c <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	1a c0       	rjmp	.+52     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    1a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a50:	81 34       	cpi	r24, 0x41	; 65
    1a52:	91 05       	cpc	r25, r1
    1a54:	18 f4       	brcc	.+6      	; 0x1a5c <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	81 38       	cpi	r24, 0x81	; 129
    1a62:	91 05       	cpc	r25, r1
    1a64:	18 f4       	brcc	.+6      	; 0x1a6c <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	0a c0       	rjmp	.+20     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 40       	sbci	r25, 0x01	; 1
    1a74:	18 f4       	brcc	.+6      	; 0x1a7c <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    1a76:	86 e0       	ldi	r24, 0x06	; 6
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    1a7c:	87 e0       	ldi	r24, 0x07	; 7
    1a7e:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    1a80:	88 85       	ldd	r24, Y+8	; 0x08
    1a82:	99 85       	ldd	r25, Y+9	; 0x09
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	fc 01       	movw	r30, r24
    1a88:	24 83       	std	Z+4, r18	; 0x04
}
    1a8a:	00 00       	nop
    1a8c:	2d 96       	adiw	r28, 0x0d	; 13
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	25 97       	sbiw	r28, 0x05	; 5
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	6b 83       	std	Y+3, r22	; 0x03
    1aac:	4c 83       	std	Y+4, r20	; 0x04
    1aae:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	28 2f       	mov	r18, r24
    1aba:	29 7e       	andi	r18, 0xE9	; 233
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	fc 01       	movw	r30, r24
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	82 2b       	or	r24, r18
    1ad2:	29 2f       	mov	r18, r25
    1ad4:	28 2b       	or	r18, r24
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	fc 01       	movw	r30, r24
    1adc:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	2f 78       	andi	r18, 0x8F	; 143
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	fc 01       	movw	r30, r24
    1af0:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	fc 01       	movw	r30, r24
    1af8:	92 81       	ldd	r25, Z+2	; 0x02
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	29 2f       	mov	r18, r25
    1afe:	28 2b       	or	r18, r24
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	fc 01       	movw	r30, r24
    1b06:	22 83       	std	Z+2, r18	; 0x02
}
    1b08:	00 00       	nop
    1b0a:	25 96       	adiw	r28, 0x05	; 5
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	25 97       	sbiw	r28, 0x05	; 5
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	6b 83       	std	Y+3, r22	; 0x03
    1b2a:	4c 83       	std	Y+4, r20	; 0x04
    1b2c:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	91 05       	cpc	r25, r1
    1b38:	11 f1       	breq	.+68     	; 0x1b7e <adc_set_conversion_trigger+0x68>
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <adc_set_conversion_trigger+0x34>
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <adc_set_conversion_trigger+0x4a>
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	b9 f1       	breq	.+110    	; 0x1bb6 <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    1b48:	a9 c0       	rjmp	.+338    	; 0x1c9c <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <adc_set_conversion_trigger+0x3c>
    1b50:	53 c0       	rjmp	.+166    	; 0x1bf8 <adc_set_conversion_trigger+0xe2>
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	91 05       	cpc	r25, r1
    1b56:	d4 f1       	brlt	.+116    	; 0x1bcc <adc_set_conversion_trigger+0xb6>
    1b58:	05 97       	sbiw	r24, 0x05	; 5
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <adc_set_conversion_trigger+0x48>
    1b5c:	76 c0       	rjmp	.+236    	; 0x1c4a <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    1b5e:	9e c0       	rjmp	.+316    	; 0x1c9c <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	fc 01       	movw	r30, r24
    1b66:	81 81       	ldd	r24, Z+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	27 7f       	andi	r18, 0xF7	; 247
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	fc 01       	movw	r30, r24
    1b72:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	fc 01       	movw	r30, r24
    1b7a:	13 82       	std	Z+3, r1	; 0x03
		break;
    1b7c:	8f c0       	rjmp	.+286    	; 0x1c9c <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	fc 01       	movw	r30, r24
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	27 7f       	andi	r18, 0xF7	; 247
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	fc 01       	movw	r30, r24
    1b90:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	89 2b       	or	r24, r25
    1baa:	28 2f       	mov	r18, r24
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    1bb4:	73 c0       	rjmp	.+230    	; 0x1c9c <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	fc 01       	movw	r30, r24
    1bbc:	81 81       	ldd	r24, Z+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	28 60       	ori	r18, 0x08	; 8
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	21 83       	std	Z+1, r18	; 0x01
		break;
    1bca:	68 c0       	rjmp	.+208    	; 0x1c9c <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	81 81       	ldd	r24, Z+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	28 60       	ori	r18, 0x08	; 8
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	fc 01       	movw	r30, r24
    1bde:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	28 2f       	mov	r18, r24
    1be6:	22 95       	swap	r18
    1be8:	22 0f       	add	r18, r18
    1bea:	22 0f       	add	r18, r18
    1bec:	20 7c       	andi	r18, 0xC0	; 192
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	23 83       	std	Z+3, r18	; 0x03
		break;
    1bf6:	52 c0       	rjmp	.+164    	; 0x1c9c <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	27 7f       	andi	r18, 0xF7	; 247
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	fc 01       	movw	r30, r24
    1c0a:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	00 24       	eor	r0, r0
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	07 94       	ror	r0
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	07 94       	ror	r0
    1c22:	98 2f       	mov	r25, r24
    1c24:	80 2d       	mov	r24, r0
    1c26:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1c3a:	82 2b       	or	r24, r18
    1c3c:	85 60       	ori	r24, 0x05	; 5
    1c3e:	28 2f       	mov	r18, r24
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	fc 01       	movw	r30, r24
    1c46:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    1c48:	29 c0       	rjmp	.+82     	; 0x1c9c <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	fc 01       	movw	r30, r24
    1c50:	81 81       	ldd	r24, Z+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	27 7f       	andi	r18, 0xF7	; 247
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	00 24       	eor	r0, r0
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	07 94       	ror	r0
    1c6e:	96 95       	lsr	r25
    1c70:	87 95       	ror	r24
    1c72:	07 94       	ror	r0
    1c74:	98 2f       	mov	r25, r24
    1c76:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1c78:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1c8c:	82 2b       	or	r24, r18
    1c8e:	86 60       	ori	r24, 0x06	; 6
    1c90:	28 2f       	mov	r18, r24
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	fc 01       	movw	r30, r24
    1c98:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    1c9a:	00 00       	nop

	default:
		Assert(0);
	}
}
    1c9c:	00 00       	nop
    1c9e:	25 96       	adiw	r28, 0x05	; 5
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	1f 92       	push	r1
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	88 30       	cpi	r24, 0x08	; 8
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	51 f1       	breq	.+84     	; 0x1d16 <adcch_get_gain_setting+0x6c>
    1cc2:	89 30       	cpi	r24, 0x09	; 9
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	7c f4       	brge	.+30     	; 0x1ce6 <adcch_get_gain_setting+0x3c>
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	f1 f0       	breq	.+60     	; 0x1d0a <adcch_get_gain_setting+0x60>
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	1c f4       	brge	.+6      	; 0x1cda <adcch_get_gain_setting+0x30>
    1cd4:	89 2b       	or	r24, r25
    1cd6:	b9 f0       	breq	.+46     	; 0x1d06 <adcch_get_gain_setting+0x5c>
    1cd8:	28 c0       	rjmp	.+80     	; 0x1d2a <adcch_get_gain_setting+0x80>
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	91 05       	cpc	r25, r1
    1cde:	b9 f0       	breq	.+46     	; 0x1d0e <adcch_get_gain_setting+0x64>
    1ce0:	04 97       	sbiw	r24, 0x04	; 4
    1ce2:	b9 f0       	breq	.+46     	; 0x1d12 <adcch_get_gain_setting+0x68>
    1ce4:	22 c0       	rjmp	.+68     	; 0x1d2a <adcch_get_gain_setting+0x80>
    1ce6:	80 32       	cpi	r24, 0x20	; 32
    1ce8:	91 05       	cpc	r25, r1
    1cea:	c9 f0       	breq	.+50     	; 0x1d1e <adcch_get_gain_setting+0x74>
    1cec:	81 32       	cpi	r24, 0x21	; 33
    1cee:	91 05       	cpc	r25, r1
    1cf0:	1c f4       	brge	.+6      	; 0x1cf8 <adcch_get_gain_setting+0x4e>
    1cf2:	40 97       	sbiw	r24, 0x10	; 16
    1cf4:	91 f0       	breq	.+36     	; 0x1d1a <adcch_get_gain_setting+0x70>
    1cf6:	19 c0       	rjmp	.+50     	; 0x1d2a <adcch_get_gain_setting+0x80>
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	91 f0       	breq	.+36     	; 0x1d22 <adcch_get_gain_setting+0x78>
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	91 05       	cpc	r25, r1
    1d02:	89 f0       	breq	.+34     	; 0x1d26 <adcch_get_gain_setting+0x7c>
    1d04:	12 c0       	rjmp	.+36     	; 0x1d2a <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    1d06:	8c e1       	ldi	r24, 0x1C	; 28
    1d08:	11 c0       	rjmp	.+34     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	0d c0       	rjmp	.+26     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    1d12:	88 e0       	ldi	r24, 0x08	; 8
    1d14:	0b c0       	rjmp	.+22     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    1d16:	8c e0       	ldi	r24, 0x0C	; 12
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    1d1a:	80 e1       	ldi	r24, 0x10	; 16
    1d1c:	07 c0       	rjmp	.+14     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    1d1e:	84 e1       	ldi	r24, 0x14	; 20
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    1d22:	88 e1       	ldi	r24, 0x18	; 24
    1d24:	03 c0       	rjmp	.+6      	; 0x1d2c <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d2c:	0f 90       	pop	r0
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	25 97       	sbiw	r28, 0x05	; 5
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
    1d48:	4c 83       	std	Y+4, r20	; 0x04
    1d4a:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	80 31       	cpi	r24, 0x10	; 16
    1d50:	78 f0       	brcs	.+30     	; 0x1d70 <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	fc 01       	movw	r30, r24
    1d58:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	80 51       	subi	r24, 0x10	; 16
    1d5e:	28 2f       	mov	r18, r24
    1d60:	22 0f       	add	r18, r18
    1d62:	22 0f       	add	r18, r18
    1d64:	22 0f       	add	r18, r18
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1d6e:	87 c0       	rjmp	.+270    	; 0x1e7e <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	8a 30       	cpi	r24, 0x0A	; 10
    1d74:	79 f4       	brne	.+30     	; 0x1d94 <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	28 2f       	mov	r18, r24
    1d84:	22 0f       	add	r18, r18
    1d86:	22 0f       	add	r18, r18
    1d88:	22 0f       	add	r18, r18
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	fc 01       	movw	r30, r24
    1d90:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1d92:	75 c0       	rjmp	.+234    	; 0x1e7e <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	84 30       	cpi	r24, 0x04	; 4
    1d98:	b8 f4       	brcc	.+46     	; 0x1dc8 <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	22 e0       	ldi	r18, 0x02	; 2
    1da0:	fc 01       	movw	r30, r24
    1da2:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	98 2f       	mov	r25, r24
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	89 2b       	or	r24, r25
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1dc6:	5b c0       	rjmp	.+182    	; 0x1e7e <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	88 30       	cpi	r24, 0x08	; 8
    1dcc:	d8 f4       	brcc	.+54     	; 0x1e04 <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	6c df       	rcall	.-296    	; 0x1caa <adcch_get_gain_setting>
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	23 60       	ori	r18, 0x03	; 3
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	98 2f       	mov	r25, r24
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	84 50       	subi	r24, 0x04	; 4
    1df6:	89 2b       	or	r24, r25
    1df8:	28 2f       	mov	r18, r24
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	fc 01       	movw	r30, r24
    1e00:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1e02:	3d c0       	rjmp	.+122    	; 0x1e7e <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	e1 f4       	brne	.+56     	; 0x1e42 <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	fc 01       	movw	r30, r24
    1e12:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	98 2f       	mov	r25, r24
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	88 30       	cpi	r24, 0x08	; 8
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <adcch_set_input+0xfe>
    1e2e:	85 e0       	ldi	r24, 0x05	; 5
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <adcch_set_input+0x100>
    1e32:	87 e0       	ldi	r24, 0x07	; 7
    1e34:	89 2b       	or	r24, r25
    1e36:	28 2f       	mov	r18, r24
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1e40:	1e c0       	rjmp	.+60     	; 0x1e7e <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	32 df       	rcall	.-412    	; 0x1caa <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    1e46:	28 2f       	mov	r18, r24
    1e48:	23 60       	ori	r18, 0x03	; 3
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	fc 01       	movw	r30, r24
    1e50:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	98 2f       	mov	r25, r24
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	89 30       	cpi	r24, 0x09	; 9
    1e6a:	11 f4       	brne	.+4      	; 0x1e70 <adcch_set_input+0x13c>
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <adcch_set_input+0x13e>
    1e70:	87 e0       	ldi	r24, 0x07	; 7
    1e72:	89 2b       	or	r24, r25
    1e74:	28 2f       	mov	r18, r24
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1e7e:	00 00       	nop
    1e80:	25 96       	adiw	r28, 0x05	; 5
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask)
{
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	2e 97       	sbiw	r28, 0x0e	; 14
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	8c 87       	std	Y+12, r24	; 0x0c
    1e9c:	9d 87       	std	Y+13, r25	; 0x0d
    1e9e:	6e 87       	std	Y+14, r22	; 0x0e
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    1ea0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ea4:	9e 01       	movw	r18, r28
    1ea6:	2f 5f       	subi	r18, 0xFF	; 255
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	b9 01       	movw	r22, r18
    1eac:	8f db       	rcall	.-2274   	; 0x15cc <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    1eae:	9e 01       	movw	r18, r28
    1eb0:	28 5f       	subi	r18, 0xF8	; 248
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eb8:	a9 01       	movw	r20, r18
    1eba:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ebc:	4c dc       	rcall	.-1896   	; 0x1756 <adcch_read_configuration>
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
    1ebe:	20 e1       	ldi	r18, 0x10	; 16
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	e7 dd       	rcall	.-1074   	; 0x1a98 <adc_set_conversion_parameters>
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	20 de       	rcall	.-960    	; 0x1b16 <adc_set_conversion_trigger>
	adc_set_clock_rate(&adc_conf, 200000UL);
    1ed6:	40 e4       	ldi	r20, 0x40	; 64
    1ed8:	5d e0       	ldi	r21, 0x0D	; 13
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	ce 01       	movw	r24, r28
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	75 dd       	rcall	.-1302   	; 0x19ce <adc_set_clock_rate>
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 0);
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	08 96       	adiw	r24, 0x08	; 8
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	4a e0       	ldi	r20, 0x0A	; 10
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	22 df       	rcall	.-444    	; 0x1d34 <adcch_set_input>
	adc_write_configuration(adc, &adc_conf);
    1ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ef2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	b9 01       	movw	r22, r18
    1efc:	ef da       	rcall	.-2594   	; 0x14dc <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    1efe:	9e 01       	movw	r18, r28
    1f00:	28 5f       	subi	r18, 0xF8	; 248
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f06:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f08:	a9 01       	movw	r20, r18
    1f0a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f0c:	af db       	rcall	.-2210   	; 0x166c <adcch_write_configuration>
	
	
}
    1f0e:	00 00       	nop
    1f10:	2e 96       	adiw	r28, 0x0e	; 14
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <thermistor_init>:
void thermistor_init(void)
{
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	adc_init(&THERM_ADC,THERM_ADC_CH);
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	92 e0       	ldi	r25, 0x02	; 2
    1f2a:	b0 df       	rcall	.-160    	; 0x1e8c <adc_init>
	
	if(DEBUG) printf("Thermistor Initialized.\n");
    1f2c:	87 e5       	ldi	r24, 0x57	; 87
    1f2e:	90 e2       	ldi	r25, 0x20	; 32
    1f30:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
}
    1f34:	00 00       	nop
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <volt_init>:
void volt_init(void)
{
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	adc_init(&VOLT_ADC,VOLT_ADC_CH);
    1f44:	61 e0       	ldi	r22, 0x01	; 1
    1f46:	80 e4       	ldi	r24, 0x40	; 64
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	a0 df       	rcall	.-192    	; 0x1e8c <adc_init>
	
	if(DEBUG) printf("Voltage Initialized.\n");
    1f4c:	8f e6       	ldi	r24, 0x6F	; 111
    1f4e:	90 e2       	ldi	r25, 0x20	; 32
    1f50:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
}
    1f54:	00 00       	nop
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <getADCRead>:


float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	29 97       	sbiw	r28, 0x09	; 9
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	8f 83       	std	Y+7, r24	; 0x07
    1f6c:	98 87       	std	Y+8, r25	; 0x08
    1f6e:	69 87       	std	Y+9, r22	; 0x09
		adc_enable(adc);
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	0e 94 3a 05 	call	0xa74	; 0xa74 <adc_enable>
		
		
		adc_start_conversion(adc, ch_mask);
    1f78:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7a:	98 85       	ldd	r25, Y+8	; 0x08
    1f7c:	69 85       	ldd	r22, Y+9	; 0x09
    1f7e:	be dc       	rcall	.-1668   	; 0x18fc <adc_start_conversion>
		adc_wait_for_interrupt_flag(adc, ch_mask);
    1f80:	8f 81       	ldd	r24, Y+7	; 0x07
    1f82:	98 85       	ldd	r25, Y+8	; 0x08
    1f84:	69 85       	ldd	r22, Y+9	; 0x09
    1f86:	08 dd       	rcall	.-1520   	; 0x1998 <adc_wait_for_interrupt_flag>
    1f88:	8f 81       	ldd	r24, Y+7	; 0x07
    1f8a:	98 85       	ldd	r25, Y+8	; 0x08
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	8d 83       	std	Y+5, r24	; 0x05
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1f94:	1e 82       	std	Y+6, r1	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	83 70       	andi	r24, 0x03	; 3
    1f9e:	99 27       	eor	r25, r25
    1fa0:	89 2b       	or	r24, r25
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <getADCRead+0x56>
		index += 2;
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	8e 5f       	subi	r24, 0xFE	; 254
    1fa8:	8e 83       	std	Y+6, r24	; 0x06
		ch_mask >>= 2;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	99 27       	eor	r25, r25
    1fbc:	89 2b       	or	r24, r25
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <getADCRead+0x6a>
		index++;
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	9c 01       	movw	r18, r24
    1fcc:	20 5e       	subi	r18, 0xE0	; 224
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	82 0f       	add	r24, r18
    1fe4:	93 1f       	adc	r25, r19
		uint16_t adcReading = adc_get_result(adc, ch_mask);
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	84 81       	ldd	r24, Z+4	; 0x04
    1fea:	95 81       	ldd	r25, Z+5	; 0x05
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	9a 83       	std	Y+2, r25	; 0x02
		//printf("ADC reading = %u\n", adcReading);
		//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
		//printf("voltage: %f \n", voltage);
		
		adc_disable(adc);
    1ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff2:	98 85       	ldd	r25, Y+8	; 0x08
    1ff4:	0e 94 5b 05 	call	0xab6	; 0xab6 <adc_disable>
		return adcReading;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	cc 01       	movw	r24, r24
    1ffe:	a0 e0       	ldi	r26, 0x00	; 0
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 4c 52 	call	0xa498	; 0xa498 <__floatunsisf>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
	
}
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	29 96       	adiw	r28, 0x09	; 9
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <getVoltage>:
float getVoltage(void)
{
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	00 d0       	rcall	.+0      	; 0x2024 <getVoltage+0x6>
    2024:	1f 92       	push	r1
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	float adc_val = getADCRead(&VOLT_ADC,VOLT_ADC_CH)/4096.0*2;
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	80 e4       	ldi	r24, 0x40	; 64
    202e:	92 e0       	ldi	r25, 0x02	; 2
    2030:	95 df       	rcall	.-214    	; 0x1f5c <getADCRead>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	55 e4       	ldi	r21, 0x45	; 69
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9c 01       	movw	r18, r24
    204c:	ad 01       	movw	r20, r26
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 11 51 	call	0xa222	; 0xa222 <__addsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	ab 83       	std	Y+3, r26	; 0x03
    2060:	bc 83       	std	Y+4, r27	; 0x04
	if(DEBUG && DEBUG_ADC) printf("volt: %f\n",adc_val);
	return adc_val;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	ab 81       	ldd	r26, Y+3	; 0x03
    2068:	bc 81       	ldd	r27, Y+4	; 0x04
}
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	24 96       	adiw	r28, 0x04	; 4
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <getTemperature>:
float getTemperature(void)
{
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	28 97       	sbiw	r28, 0x08	; 8
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	de bf       	out	0x3e, r29	; 62
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	66 df       	rcall	.-308    	; 0x1f5c <getADCRead>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	25 ee       	ldi	r18, 0xE5	; 229
    2096:	30 ed       	ldi	r19, 0xD0	; 208
    2098:	42 e2       	ldi	r20, 0x22	; 34
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 95 53 	call	0xa72a	; 0xa72a <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	ab 83       	std	Y+3, r26	; 0x03
    20ae:	bc 83       	std	Y+4, r27	; 0x04
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
    20b0:	29 81       	ldd	r18, Y+1	; 0x01
    20b2:	3a 81       	ldd	r19, Y+2	; 0x02
    20b4:	4b 81       	ldd	r20, Y+3	; 0x03
    20b6:	5c 81       	ldd	r21, Y+4	; 0x04
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	80 e8       	ldi	r24, 0x80	; 128
    20be:	95 e4       	ldi	r25, 0x45	; 69
    20c0:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 10 51 	call	0xa220	; 0xa220 <__subsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 55 53 	call	0xa6aa	; 0xa6aa <log>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	2c e7       	ldi	r18, 0x7C	; 124
    20ea:	34 ed       	ldi	r19, 0xD4	; 212
    20ec:	43 e8       	ldi	r20, 0x83	; 131
    20ee:	59 e3       	ldi	r21, 0x39	; 57
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 95 53 	call	0xa72a	; 0xa72a <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	2f e0       	ldi	r18, 0x0F	; 15
    20fe:	3f ec       	ldi	r19, 0xCF	; 207
    2100:	4b e5       	ldi	r20, 0x5B	; 91
    2102:	5b e3       	ldi	r21, 0x3B	; 59
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 11 51 	call	0xa222	; 0xa222 <__addsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 01       	movw	r18, r24
    2112:	ad 01       	movw	r20, r26
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	80 e8       	ldi	r24, 0x80	; 128
    211a:	9f e3       	ldi	r25, 0x3F	; 63
    211c:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 20 52 	call	0xa440	; 0xa440 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	af 83       	std	Y+7, r26	; 0x07
    2136:	b8 87       	std	Y+8, r27	; 0x08
	if(DEBUG && DEBUG_ADC) printf("temp: %f\n", temperature-273.15);
	return (temperature - 273.15);
    2138:	6d 81       	ldd	r22, Y+5	; 0x05
    213a:	7e 81       	ldd	r23, Y+6	; 0x06
    213c:	8f 81       	ldd	r24, Y+7	; 0x07
    213e:	98 85       	ldd	r25, Y+8	; 0x08
    2140:	0e 94 4c 52 	call	0xa498	; 0xa498 <__floatunsisf>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	23 e3       	ldi	r18, 0x33	; 51
    214a:	33 e9       	ldi	r19, 0x93	; 147
    214c:	48 e8       	ldi	r20, 0x88	; 136
    214e:	53 e4       	ldi	r21, 0x43	; 67
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 10 51 	call	0xa220	; 0xa220 <__subsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
	
	
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	28 96       	adiw	r28, 0x08	; 8
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <bno055_write_register>:
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
		(prev_opmode_u8);
	return com_rslt;
}
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	25 97       	sbiw	r28, 0x05	; 5
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	6b 83       	std	Y+3, r22	; 0x03
    217e:	7c 83       	std	Y+4, r23	; 0x04
    2180:	4d 83       	std	Y+5, r20	; 0x05
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    218a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    218e:	89 2b       	or	r24, r25
    2190:	11 f4       	brne	.+4      	; 0x2196 <bno055_write_register+0x2a>
    2192:	81 e8       	ldi	r24, 0x81	; 129
    2194:	19 c0       	rjmp	.+50     	; 0x21c8 <bno055_write_register+0x5c>
    2196:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    219a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    219e:	dc 01       	movw	r26, r24
    21a0:	19 96       	adiw	r26, 0x09	; 9
    21a2:	ed 91       	ld	r30, X+
    21a4:	fc 91       	ld	r31, X
    21a6:	1a 97       	sbiw	r26, 0x0a	; 10
    21a8:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    21ac:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    21b0:	dc 01       	movw	r26, r24
    21b2:	18 96       	adiw	r26, 0x08	; 8
    21b4:	3c 91       	ld	r19, X
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	2d 81       	ldd	r18, Y+5	; 0x05
    21bc:	ac 01       	movw	r20, r24
    21be:	6a 81       	ldd	r22, Y+2	; 0x02
    21c0:	83 2f       	mov	r24, r19
    21c2:	19 95       	eicall
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	25 96       	adiw	r28, 0x05	; 5
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <bno055_write_page_id>:
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	00 d0       	rcall	.+0      	; 0x21da <bno055_write_page_id+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	1a 82       	std	Y+2, r1	; 0x02
    21e6:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    21ea:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    21ee:	89 2b       	or	r24, r25
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <bno055_write_page_id+0x22>
    21f2:	81 e8       	ldi	r24, 0x81	; 129
    21f4:	46 c0       	rjmp	.+140    	; 0x2282 <bno055_write_page_id+0xae>
    21f6:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    21fa:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    21fe:	dc 01       	movw	r26, r24
    2200:	1b 96       	adiw	r26, 0x0b	; 11
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	1c 97       	sbiw	r26, 0x0c	; 12
    2208:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    220c:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2210:	dc 01       	movw	r26, r24
    2212:	18 96       	adiw	r26, 0x08	; 8
    2214:	3c 91       	ld	r19, X
    2216:	ce 01       	movw	r24, r28
    2218:	02 96       	adiw	r24, 0x02	; 2
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	ac 01       	movw	r20, r24
    221e:	67 e0       	ldi	r22, 0x07	; 7
    2220:	83 2f       	mov	r24, r19
    2222:	19 95       	eicall
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	88 23       	and	r24, r24
    222a:	41 f5       	brne	.+80     	; 0x227c <bno055_write_page_id+0xa8>
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2234:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2238:	dc 01       	movw	r26, r24
    223a:	19 96       	adiw	r26, 0x09	; 9
    223c:	ed 91       	ld	r30, X+
    223e:	fc 91       	ld	r31, X
    2240:	1a 97       	sbiw	r26, 0x0a	; 10
    2242:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2246:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    224a:	dc 01       	movw	r26, r24
    224c:	18 96       	adiw	r26, 0x08	; 8
    224e:	3c 91       	ld	r19, X
    2250:	ce 01       	movw	r24, r28
    2252:	02 96       	adiw	r24, 0x02	; 2
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	ac 01       	movw	r20, r24
    2258:	67 e0       	ldi	r22, 0x07	; 7
    225a:	83 2f       	mov	r24, r19
    225c:	19 95       	eicall
    225e:	98 2f       	mov	r25, r24
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	89 0f       	add	r24, r25
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	88 23       	and	r24, r24
    226a:	51 f4       	brne	.+20     	; 0x2280 <bno055_write_page_id+0xac>
    226c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2270:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2274:	2b 81       	ldd	r18, Y+3	; 0x03
    2276:	fc 01       	movw	r30, r24
    2278:	23 83       	std	Z+3, r18	; 0x03
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <bno055_write_page_id+0xac>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	23 96       	adiw	r28, 0x03	; 3
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <bno055_read_euler_hrp>:
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	2a 97       	sbiw	r28, 0x0a	; 10
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	89 87       	std	Y+9, r24	; 0x09
    229e:	9a 87       	std	Y+10, r25	; 0x0a
    22a0:	8f ef       	ldi	r24, 0xFF	; 255
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	26 e0       	ldi	r18, 0x06	; 6
    22a6:	ce 01       	movw	r24, r28
    22a8:	03 96       	adiw	r24, 0x03	; 3
    22aa:	dc 01       	movw	r26, r24
    22ac:	e2 2f       	mov	r30, r18
    22ae:	1d 92       	st	X+, r1
    22b0:	ea 95       	dec	r30
    22b2:	e9 f7       	brne	.-6      	; 0x22ae <bno055_read_euler_hrp+0x20>
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	8a 83       	std	Y+2, r24	; 0x02
    22b8:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    22bc:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    22c0:	89 2b       	or	r24, r25
    22c2:	11 f4       	brne	.+4      	; 0x22c8 <bno055_read_euler_hrp+0x3a>
    22c4:	81 e8       	ldi	r24, 0x81	; 129
    22c6:	72 c0       	rjmp	.+228    	; 0x23ac <bno055_read_euler_hrp+0x11e>
    22c8:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    22cc:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    22d0:	dc 01       	movw	r26, r24
    22d2:	13 96       	adiw	r26, 0x03	; 3
    22d4:	8c 91       	ld	r24, X
    22d6:	88 23       	and	r24, r24
    22d8:	19 f0       	breq	.+6      	; 0x22e0 <bno055_read_euler_hrp+0x52>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	7b df       	rcall	.-266    	; 0x21d4 <bno055_write_page_id>
    22de:	8a 83       	std	Y+2, r24	; 0x02
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	88 23       	and	r24, r24
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <bno055_read_euler_hrp+0x6a>
    22e6:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    22ea:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    22ee:	fc 01       	movw	r30, r24
    22f0:	83 81       	ldd	r24, Z+3	; 0x03
    22f2:	88 23       	and	r24, r24
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <bno055_read_euler_hrp+0x6a>
    22f6:	57 c0       	rjmp	.+174    	; 0x23a6 <bno055_read_euler_hrp+0x118>
    22f8:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    22fc:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2300:	dc 01       	movw	r26, r24
    2302:	1b 96       	adiw	r26, 0x0b	; 11
    2304:	ed 91       	ld	r30, X+
    2306:	fc 91       	ld	r31, X
    2308:	1c 97       	sbiw	r26, 0x0c	; 12
    230a:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    230e:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2312:	dc 01       	movw	r26, r24
    2314:	18 96       	adiw	r26, 0x08	; 8
    2316:	3c 91       	ld	r19, X
    2318:	ce 01       	movw	r24, r28
    231a:	03 96       	adiw	r24, 0x03	; 3
    231c:	26 e0       	ldi	r18, 0x06	; 6
    231e:	ac 01       	movw	r20, r24
    2320:	6a e1       	ldi	r22, 0x1A	; 26
    2322:	83 2f       	mov	r24, r19
    2324:	19 95       	eicall
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	8b 83       	std	Y+3, r24	; 0x03
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	8c 83       	std	Y+4, r24	; 0x04
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	08 2e       	mov	r0, r24
    2334:	00 0c       	add	r0, r0
    2336:	99 0b       	sbc	r25, r25
    2338:	38 2f       	mov	r19, r24
    233a:	22 27       	eor	r18, r18
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	28 2b       	or	r18, r24
    2344:	39 2b       	or	r19, r25
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	fc 01       	movw	r30, r24
    234c:	20 83       	st	Z, r18
    234e:	31 83       	std	Z+1, r19	; 0x01
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	8e 83       	std	Y+6, r24	; 0x06
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	08 2e       	mov	r0, r24
    235c:	00 0c       	add	r0, r0
    235e:	99 0b       	sbc	r25, r25
    2360:	38 2f       	mov	r19, r24
    2362:	22 27       	eor	r18, r18
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	28 2b       	or	r18, r24
    236c:	39 2b       	or	r19, r25
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	dc 01       	movw	r26, r24
    2374:	12 96       	adiw	r26, 0x02	; 2
    2376:	2d 93       	st	X+, r18
    2378:	3c 93       	st	X, r19
    237a:	13 97       	sbiw	r26, 0x03	; 3
    237c:	8f 81       	ldd	r24, Y+7	; 0x07
    237e:	8f 83       	std	Y+7, r24	; 0x07
    2380:	88 85       	ldd	r24, Y+8	; 0x08
    2382:	88 87       	std	Y+8, r24	; 0x08
    2384:	88 85       	ldd	r24, Y+8	; 0x08
    2386:	08 2e       	mov	r0, r24
    2388:	00 0c       	add	r0, r0
    238a:	99 0b       	sbc	r25, r25
    238c:	38 2f       	mov	r19, r24
    238e:	22 27       	eor	r18, r18
    2390:	8f 81       	ldd	r24, Y+7	; 0x07
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	28 2b       	or	r18, r24
    2398:	39 2b       	or	r19, r25
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	fc 01       	movw	r30, r24
    23a0:	24 83       	std	Z+4, r18	; 0x04
    23a2:	35 83       	std	Z+5, r19	; 0x05
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <bno055_read_euler_hrp+0x11c>
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	2a 96       	adiw	r28, 0x0a	; 10
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <bno055_read_linear_accel_xyz>:
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	2a 97       	sbiw	r28, 0x0a	; 10
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	89 87       	std	Y+9, r24	; 0x09
    23c8:	9a 87       	std	Y+10, r25	; 0x0a
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	26 e0       	ldi	r18, 0x06	; 6
    23d0:	ce 01       	movw	r24, r28
    23d2:	03 96       	adiw	r24, 0x03	; 3
    23d4:	dc 01       	movw	r26, r24
    23d6:	e2 2f       	mov	r30, r18
    23d8:	1d 92       	st	X+, r1
    23da:	ea 95       	dec	r30
    23dc:	e9 f7       	brne	.-6      	; 0x23d8 <bno055_read_linear_accel_xyz+0x20>
    23de:	8f ef       	ldi	r24, 0xFF	; 255
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    23e6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    23ea:	89 2b       	or	r24, r25
    23ec:	11 f4       	brne	.+4      	; 0x23f2 <bno055_read_linear_accel_xyz+0x3a>
    23ee:	81 e8       	ldi	r24, 0x81	; 129
    23f0:	72 c0       	rjmp	.+228    	; 0x24d6 <bno055_read_linear_accel_xyz+0x11e>
    23f2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    23f6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    23fa:	dc 01       	movw	r26, r24
    23fc:	13 96       	adiw	r26, 0x03	; 3
    23fe:	8c 91       	ld	r24, X
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <bno055_read_linear_accel_xyz+0x52>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	e6 de       	rcall	.-564    	; 0x21d4 <bno055_write_page_id>
    2408:	8a 83       	std	Y+2, r24	; 0x02
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	88 23       	and	r24, r24
    240e:	49 f0       	breq	.+18     	; 0x2422 <bno055_read_linear_accel_xyz+0x6a>
    2410:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2414:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2418:	fc 01       	movw	r30, r24
    241a:	83 81       	ldd	r24, Z+3	; 0x03
    241c:	88 23       	and	r24, r24
    241e:	09 f0       	breq	.+2      	; 0x2422 <bno055_read_linear_accel_xyz+0x6a>
    2420:	57 c0       	rjmp	.+174    	; 0x24d0 <bno055_read_linear_accel_xyz+0x118>
    2422:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2426:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    242a:	dc 01       	movw	r26, r24
    242c:	1b 96       	adiw	r26, 0x0b	; 11
    242e:	ed 91       	ld	r30, X+
    2430:	fc 91       	ld	r31, X
    2432:	1c 97       	sbiw	r26, 0x0c	; 12
    2434:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2438:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    243c:	dc 01       	movw	r26, r24
    243e:	18 96       	adiw	r26, 0x08	; 8
    2440:	3c 91       	ld	r19, X
    2442:	ce 01       	movw	r24, r28
    2444:	03 96       	adiw	r24, 0x03	; 3
    2446:	26 e0       	ldi	r18, 0x06	; 6
    2448:	ac 01       	movw	r20, r24
    244a:	68 e2       	ldi	r22, 0x28	; 40
    244c:	83 2f       	mov	r24, r19
    244e:	19 95       	eicall
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	8c 83       	std	Y+4, r24	; 0x04
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	08 2e       	mov	r0, r24
    245e:	00 0c       	add	r0, r0
    2460:	99 0b       	sbc	r25, r25
    2462:	38 2f       	mov	r19, r24
    2464:	22 27       	eor	r18, r18
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	28 2b       	or	r18, r24
    246e:	39 2b       	or	r19, r25
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	fc 01       	movw	r30, r24
    2476:	20 83       	st	Z, r18
    2478:	31 83       	std	Z+1, r19	; 0x01
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8e 81       	ldd	r24, Y+6	; 0x06
    2480:	8e 83       	std	Y+6, r24	; 0x06
    2482:	8e 81       	ldd	r24, Y+6	; 0x06
    2484:	08 2e       	mov	r0, r24
    2486:	00 0c       	add	r0, r0
    2488:	99 0b       	sbc	r25, r25
    248a:	38 2f       	mov	r19, r24
    248c:	22 27       	eor	r18, r18
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	28 2b       	or	r18, r24
    2496:	39 2b       	or	r19, r25
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	dc 01       	movw	r26, r24
    249e:	12 96       	adiw	r26, 0x02	; 2
    24a0:	2d 93       	st	X+, r18
    24a2:	3c 93       	st	X, r19
    24a4:	13 97       	sbiw	r26, 0x03	; 3
    24a6:	8f 81       	ldd	r24, Y+7	; 0x07
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	88 85       	ldd	r24, Y+8	; 0x08
    24ac:	88 87       	std	Y+8, r24	; 0x08
    24ae:	88 85       	ldd	r24, Y+8	; 0x08
    24b0:	08 2e       	mov	r0, r24
    24b2:	00 0c       	add	r0, r0
    24b4:	99 0b       	sbc	r25, r25
    24b6:	38 2f       	mov	r19, r24
    24b8:	22 27       	eor	r18, r18
    24ba:	8f 81       	ldd	r24, Y+7	; 0x07
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	28 2b       	or	r18, r24
    24c2:	39 2b       	or	r19, r25
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	fc 01       	movw	r30, r24
    24ca:	24 83       	std	Z+4, r18	; 0x04
    24cc:	35 83       	std	Z+5, r19	; 0x05
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <bno055_read_linear_accel_xyz+0x11c>
    24d0:	8f ef       	ldi	r24, 0xFF	; 255
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	2a 96       	adiw	r28, 0x0a	; 10
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	08 95       	ret

000024e2 <bno055_convert_double_euler_hpr_deg>:
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	2a 97       	sbiw	r28, 0x0a	; 10
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	89 87       	std	Y+9, r24	; 0x09
    24f2:	9a 87       	std	Y+10, r25	; 0x0a
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	1a 82       	std	Y+2, r1	; 0x02
    24fa:	1b 82       	std	Y+3, r1	; 0x03
    24fc:	1c 82       	std	Y+4, r1	; 0x04
    24fe:	1d 82       	std	Y+5, r1	; 0x05
    2500:	1e 82       	std	Y+6, r1	; 0x06
    2502:	1f 82       	std	Y+7, r1	; 0x07
    2504:	18 86       	std	Y+8, r1	; 0x08
    2506:	ce 01       	movw	r24, r28
    2508:	08 96       	adiw	r24, 0x08	; 8
    250a:	64 d2       	rcall	.+1224   	; 0x29d4 <bno055_get_euler_unit>
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	88 85       	ldd	r24, Y+8	; 0x08
    2510:	88 23       	and	r24, r24
    2512:	31 f0       	breq	.+12     	; 0x2520 <bno055_convert_double_euler_hpr_deg+0x3e>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	bb d2       	rcall	.+1398   	; 0x2a8e <bno055_set_euler_unit>
    2518:	98 2f       	mov	r25, r24
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	89 0f       	add	r24, r25
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	88 23       	and	r24, r24
    2524:	09 f0       	breq	.+2      	; 0x2528 <bno055_convert_double_euler_hpr_deg+0x46>
    2526:	66 c0       	rjmp	.+204    	; 0x25f4 <bno055_convert_double_euler_hpr_deg+0x112>
    2528:	ce 01       	movw	r24, r28
    252a:	02 96       	adiw	r24, 0x02	; 2
    252c:	b0 de       	rcall	.-672    	; 0x228e <bno055_read_euler_hrp>
    252e:	98 2f       	mov	r25, r24
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	89 0f       	add	r24, r25
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	88 23       	and	r24, r24
    253a:	09 f0       	breq	.+2      	; 0x253e <bno055_convert_double_euler_hpr_deg+0x5c>
    253c:	58 c0       	rjmp	.+176    	; 0x25ee <bno055_convert_double_euler_hpr_deg+0x10c>
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	09 2e       	mov	r0, r25
    2544:	00 0c       	add	r0, r0
    2546:	aa 0b       	sbc	r26, r26
    2548:	bb 0b       	sbc	r27, r27
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__floatsisf>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	29 85       	ldd	r18, Y+9	; 0x09
    256c:	3a 85       	ldd	r19, Y+10	; 0x0a
    256e:	f9 01       	movw	r30, r18
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
    2578:	8e 81       	ldd	r24, Y+6	; 0x06
    257a:	9f 81       	ldd	r25, Y+7	; 0x07
    257c:	09 2e       	mov	r0, r25
    257e:	00 0c       	add	r0, r0
    2580:	aa 0b       	sbc	r26, r26
    2582:	bb 0b       	sbc	r27, r27
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__floatsisf>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	29 85       	ldd	r18, Y+9	; 0x09
    25a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    25a8:	f9 01       	movw	r30, r18
    25aa:	80 87       	std	Z+8, r24	; 0x08
    25ac:	91 87       	std	Z+9, r25	; 0x09
    25ae:	a2 87       	std	Z+10, r26	; 0x0a
    25b0:	b3 87       	std	Z+11, r27	; 0x0b
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    25b6:	09 2e       	mov	r0, r25
    25b8:	00 0c       	add	r0, r0
    25ba:	aa 0b       	sbc	r26, r26
    25bc:	bb 0b       	sbc	r27, r27
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__floatsisf>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	29 85       	ldd	r18, Y+9	; 0x09
    25e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    25e2:	f9 01       	movw	r30, r18
    25e4:	84 83       	std	Z+4, r24	; 0x04
    25e6:	95 83       	std	Z+5, r25	; 0x05
    25e8:	a6 83       	std	Z+6, r26	; 0x06
    25ea:	b7 83       	std	Z+7, r27	; 0x07
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <bno055_convert_double_euler_hpr_deg+0x116>
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <bno055_convert_double_euler_hpr_deg+0x116>
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	2a 96       	adiw	r28, 0x0a	; 10
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <bno055_convert_double_linear_accel_xyz_msq>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	29 97       	sbiw	r28, 0x09	; 9
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	88 87       	std	Y+8, r24	; 0x08
    2616:	99 87       	std	Y+9, r25	; 0x09
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	1a 82       	std	Y+2, r1	; 0x02
    261e:	1b 82       	std	Y+3, r1	; 0x03
    2620:	1c 82       	std	Y+4, r1	; 0x04
    2622:	1d 82       	std	Y+5, r1	; 0x05
    2624:	1e 82       	std	Y+6, r1	; 0x06
    2626:	1f 82       	std	Y+7, r1	; 0x07
    2628:	ce 01       	movw	r24, r28
    262a:	02 96       	adiw	r24, 0x02	; 2
    262c:	c5 de       	rcall	.-630    	; 0x23b8 <bno055_read_linear_accel_xyz>
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	88 23       	and	r24, r24
    2634:	09 f0       	breq	.+2      	; 0x2638 <bno055_convert_double_linear_accel_xyz_msq+0x32>
    2636:	58 c0       	rjmp	.+176    	; 0x26e8 <bno055_convert_double_linear_accel_xyz_msq+0xe2>
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	09 2e       	mov	r0, r25
    263e:	00 0c       	add	r0, r0
    2640:	aa 0b       	sbc	r26, r26
    2642:	bb 0b       	sbc	r27, r27
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__floatsisf>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	48 ec       	ldi	r20, 0xC8	; 200
    2656:	52 e4       	ldi	r21, 0x42	; 66
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	28 85       	ldd	r18, Y+8	; 0x08
    2666:	39 85       	ldd	r19, Y+9	; 0x09
    2668:	f9 01       	movw	r30, r18
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	09 2e       	mov	r0, r25
    2678:	00 0c       	add	r0, r0
    267a:	aa 0b       	sbc	r26, r26
    267c:	bb 0b       	sbc	r27, r27
    267e:	bc 01       	movw	r22, r24
    2680:	cd 01       	movw	r24, r26
    2682:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__floatsisf>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	48 ec       	ldi	r20, 0xC8	; 200
    2690:	52 e4       	ldi	r21, 0x42	; 66
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	28 85       	ldd	r18, Y+8	; 0x08
    26a0:	39 85       	ldd	r19, Y+9	; 0x09
    26a2:	f9 01       	movw	r30, r18
    26a4:	84 83       	std	Z+4, r24	; 0x04
    26a6:	95 83       	std	Z+5, r25	; 0x05
    26a8:	a6 83       	std	Z+6, r26	; 0x06
    26aa:	b7 83       	std	Z+7, r27	; 0x07
    26ac:	8e 81       	ldd	r24, Y+6	; 0x06
    26ae:	9f 81       	ldd	r25, Y+7	; 0x07
    26b0:	09 2e       	mov	r0, r25
    26b2:	00 0c       	add	r0, r0
    26b4:	aa 0b       	sbc	r26, r26
    26b6:	bb 0b       	sbc	r27, r27
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 4e 52 	call	0xa49c	; 0xa49c <__floatsisf>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	48 ec       	ldi	r20, 0xC8	; 200
    26ca:	52 e4       	ldi	r21, 0x42	; 66
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	28 85       	ldd	r18, Y+8	; 0x08
    26da:	39 85       	ldd	r19, Y+9	; 0x09
    26dc:	f9 01       	movw	r30, r18
    26de:	80 87       	std	Z+8, r24	; 0x08
    26e0:	91 87       	std	Z+9, r25	; 0x09
    26e2:	a2 87       	std	Z+10, r26	; 0x0a
    26e4:	b3 87       	std	Z+11, r27	; 0x0b
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <bno055_convert_double_linear_accel_xyz_msq+0xe6>
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	29 96       	adiw	r28, 0x09	; 9
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <bno055_get_mag_calib_stat>:
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	25 97       	sbiw	r28, 0x05	; 5
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	8c 83       	std	Y+4, r24	; 0x04
    270a:	9d 83       	std	Y+5, r25	; 0x05
    270c:	8f ef       	ldi	r24, 0xFF	; 255
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	1b 82       	std	Y+3, r1	; 0x03
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	8a 83       	std	Y+2, r24	; 0x02
    2716:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    271a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    271e:	89 2b       	or	r24, r25
    2720:	11 f4       	brne	.+4      	; 0x2726 <bno055_get_mag_calib_stat+0x2c>
    2722:	81 e8       	ldi	r24, 0x81	; 129
    2724:	3a c0       	rjmp	.+116    	; 0x279a <bno055_get_mag_calib_stat+0xa0>
    2726:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    272a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    272e:	dc 01       	movw	r26, r24
    2730:	13 96       	adiw	r26, 0x03	; 3
    2732:	8c 91       	ld	r24, X
    2734:	88 23       	and	r24, r24
    2736:	19 f0       	breq	.+6      	; 0x273e <bno055_get_mag_calib_stat+0x44>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	4c dd       	rcall	.-1384   	; 0x21d4 <bno055_write_page_id>
    273c:	8a 83       	std	Y+2, r24	; 0x02
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	88 23       	and	r24, r24
    2742:	41 f0       	breq	.+16     	; 0x2754 <bno055_get_mag_calib_stat+0x5a>
    2744:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2748:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    274c:	fc 01       	movw	r30, r24
    274e:	83 81       	ldd	r24, Z+3	; 0x03
    2750:	88 23       	and	r24, r24
    2752:	01 f5       	brne	.+64     	; 0x2794 <bno055_get_mag_calib_stat+0x9a>
    2754:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2758:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    275c:	dc 01       	movw	r26, r24
    275e:	1b 96       	adiw	r26, 0x0b	; 11
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	1c 97       	sbiw	r26, 0x0c	; 12
    2766:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    276a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    276e:	dc 01       	movw	r26, r24
    2770:	18 96       	adiw	r26, 0x08	; 8
    2772:	3c 91       	ld	r19, X
    2774:	ce 01       	movw	r24, r28
    2776:	03 96       	adiw	r24, 0x03	; 3
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	ac 01       	movw	r20, r24
    277c:	65 e3       	ldi	r22, 0x35	; 53
    277e:	83 2f       	mov	r24, r19
    2780:	19 95       	eicall
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	28 2f       	mov	r18, r24
    2788:	23 70       	andi	r18, 0x03	; 3
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <bno055_get_mag_calib_stat+0x9e>
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	25 96       	adiw	r28, 0x05	; 5
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	08 95       	ret

000027a6 <bno055_get_accel_calib_stat>:
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	25 97       	sbiw	r28, 0x05	; 5
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	8c 83       	std	Y+4, r24	; 0x04
    27b6:	9d 83       	std	Y+5, r25	; 0x05
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	1b 82       	std	Y+3, r1	; 0x03
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    27c6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    27ca:	89 2b       	or	r24, r25
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <bno055_get_accel_calib_stat+0x2c>
    27ce:	81 e8       	ldi	r24, 0x81	; 129
    27d0:	41 c0       	rjmp	.+130    	; 0x2854 <bno055_get_accel_calib_stat+0xae>
    27d2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    27d6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    27da:	dc 01       	movw	r26, r24
    27dc:	13 96       	adiw	r26, 0x03	; 3
    27de:	8c 91       	ld	r24, X
    27e0:	88 23       	and	r24, r24
    27e2:	19 f0       	breq	.+6      	; 0x27ea <bno055_get_accel_calib_stat+0x44>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	f6 dc       	rcall	.-1556   	; 0x21d4 <bno055_write_page_id>
    27e8:	8a 83       	std	Y+2, r24	; 0x02
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	88 23       	and	r24, r24
    27ee:	41 f0       	breq	.+16     	; 0x2800 <bno055_get_accel_calib_stat+0x5a>
    27f0:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    27f4:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    27f8:	fc 01       	movw	r30, r24
    27fa:	83 81       	ldd	r24, Z+3	; 0x03
    27fc:	88 23       	and	r24, r24
    27fe:	39 f5       	brne	.+78     	; 0x284e <bno055_get_accel_calib_stat+0xa8>
    2800:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2804:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2808:	dc 01       	movw	r26, r24
    280a:	1b 96       	adiw	r26, 0x0b	; 11
    280c:	ed 91       	ld	r30, X+
    280e:	fc 91       	ld	r31, X
    2810:	1c 97       	sbiw	r26, 0x0c	; 12
    2812:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2816:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    281a:	dc 01       	movw	r26, r24
    281c:	18 96       	adiw	r26, 0x08	; 8
    281e:	3c 91       	ld	r19, X
    2820:	ce 01       	movw	r24, r28
    2822:	03 96       	adiw	r24, 0x03	; 3
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	ac 01       	movw	r20, r24
    2828:	65 e3       	ldi	r22, 0x35	; 53
    282a:	83 2f       	mov	r24, r19
    282c:	19 95       	eicall
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	8c 70       	andi	r24, 0x0C	; 12
    2838:	99 27       	eor	r25, r25
    283a:	95 95       	asr	r25
    283c:	87 95       	ror	r24
    283e:	95 95       	asr	r25
    2840:	87 95       	ror	r24
    2842:	28 2f       	mov	r18, r24
    2844:	8c 81       	ldd	r24, Y+4	; 0x04
    2846:	9d 81       	ldd	r25, Y+5	; 0x05
    2848:	fc 01       	movw	r30, r24
    284a:	20 83       	st	Z, r18
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <bno055_get_accel_calib_stat+0xac>
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	25 96       	adiw	r28, 0x05	; 5
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	08 95       	ret

00002860 <bno055_get_gyro_calib_stat>:
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	25 97       	sbiw	r28, 0x05	; 5
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	8c 83       	std	Y+4, r24	; 0x04
    2870:	9d 83       	std	Y+5, r25	; 0x05
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	1b 82       	std	Y+3, r1	; 0x03
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2880:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2884:	89 2b       	or	r24, r25
    2886:	11 f4       	brne	.+4      	; 0x288c <bno055_get_gyro_calib_stat+0x2c>
    2888:	81 e8       	ldi	r24, 0x81	; 129
    288a:	45 c0       	rjmp	.+138    	; 0x2916 <bno055_get_gyro_calib_stat+0xb6>
    288c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2890:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2894:	dc 01       	movw	r26, r24
    2896:	13 96       	adiw	r26, 0x03	; 3
    2898:	8c 91       	ld	r24, X
    289a:	88 23       	and	r24, r24
    289c:	19 f0       	breq	.+6      	; 0x28a4 <bno055_get_gyro_calib_stat+0x44>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	99 dc       	rcall	.-1742   	; 0x21d4 <bno055_write_page_id>
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	88 23       	and	r24, r24
    28a8:	41 f0       	breq	.+16     	; 0x28ba <bno055_get_gyro_calib_stat+0x5a>
    28aa:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    28ae:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    28b2:	fc 01       	movw	r30, r24
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	88 23       	and	r24, r24
    28b8:	59 f5       	brne	.+86     	; 0x2910 <bno055_get_gyro_calib_stat+0xb0>
    28ba:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    28be:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    28c2:	dc 01       	movw	r26, r24
    28c4:	1b 96       	adiw	r26, 0x0b	; 11
    28c6:	ed 91       	ld	r30, X+
    28c8:	fc 91       	ld	r31, X
    28ca:	1c 97       	sbiw	r26, 0x0c	; 12
    28cc:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    28d0:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    28d4:	dc 01       	movw	r26, r24
    28d6:	18 96       	adiw	r26, 0x08	; 8
    28d8:	3c 91       	ld	r19, X
    28da:	ce 01       	movw	r24, r28
    28dc:	03 96       	adiw	r24, 0x03	; 3
    28de:	21 e0       	ldi	r18, 0x01	; 1
    28e0:	ac 01       	movw	r20, r24
    28e2:	65 e3       	ldi	r22, 0x35	; 53
    28e4:	83 2f       	mov	r24, r19
    28e6:	19 95       	eicall
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	80 73       	andi	r24, 0x30	; 48
    28f2:	99 27       	eor	r25, r25
    28f4:	95 95       	asr	r25
    28f6:	87 95       	ror	r24
    28f8:	95 95       	asr	r25
    28fa:	87 95       	ror	r24
    28fc:	95 95       	asr	r25
    28fe:	87 95       	ror	r24
    2900:	95 95       	asr	r25
    2902:	87 95       	ror	r24
    2904:	28 2f       	mov	r18, r24
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	fc 01       	movw	r30, r24
    290c:	20 83       	st	Z, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <bno055_get_gyro_calib_stat+0xb4>
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	25 96       	adiw	r28, 0x05	; 5
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <bno055_get_sys_calib_stat>:
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	25 97       	sbiw	r28, 0x05	; 5
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	8c 83       	std	Y+4, r24	; 0x04
    2932:	9d 83       	std	Y+5, r25	; 0x05
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	1b 82       	std	Y+3, r1	; 0x03
    293a:	8f ef       	ldi	r24, 0xFF	; 255
    293c:	8a 83       	std	Y+2, r24	; 0x02
    293e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2942:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2946:	89 2b       	or	r24, r25
    2948:	11 f4       	brne	.+4      	; 0x294e <bno055_get_sys_calib_stat+0x2c>
    294a:	81 e8       	ldi	r24, 0x81	; 129
    294c:	3d c0       	rjmp	.+122    	; 0x29c8 <bno055_get_sys_calib_stat+0xa6>
    294e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2952:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2956:	dc 01       	movw	r26, r24
    2958:	13 96       	adiw	r26, 0x03	; 3
    295a:	8c 91       	ld	r24, X
    295c:	88 23       	and	r24, r24
    295e:	19 f0       	breq	.+6      	; 0x2966 <bno055_get_sys_calib_stat+0x44>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	38 dc       	rcall	.-1936   	; 0x21d4 <bno055_write_page_id>
    2964:	8a 83       	std	Y+2, r24	; 0x02
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	88 23       	and	r24, r24
    296a:	41 f0       	breq	.+16     	; 0x297c <bno055_get_sys_calib_stat+0x5a>
    296c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2970:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2974:	fc 01       	movw	r30, r24
    2976:	83 81       	ldd	r24, Z+3	; 0x03
    2978:	88 23       	and	r24, r24
    297a:	19 f5       	brne	.+70     	; 0x29c2 <bno055_get_sys_calib_stat+0xa0>
    297c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2980:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2984:	dc 01       	movw	r26, r24
    2986:	1b 96       	adiw	r26, 0x0b	; 11
    2988:	ed 91       	ld	r30, X+
    298a:	fc 91       	ld	r31, X
    298c:	1c 97       	sbiw	r26, 0x0c	; 12
    298e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2992:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2996:	dc 01       	movw	r26, r24
    2998:	18 96       	adiw	r26, 0x08	; 8
    299a:	3c 91       	ld	r19, X
    299c:	ce 01       	movw	r24, r28
    299e:	03 96       	adiw	r24, 0x03	; 3
    29a0:	21 e0       	ldi	r18, 0x01	; 1
    29a2:	ac 01       	movw	r20, r24
    29a4:	65 e3       	ldi	r22, 0x35	; 53
    29a6:	83 2f       	mov	r24, r19
    29a8:	19 95       	eicall
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	28 2f       	mov	r18, r24
    29b0:	22 95       	swap	r18
    29b2:	26 95       	lsr	r18
    29b4:	26 95       	lsr	r18
    29b6:	23 70       	andi	r18, 0x03	; 3
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	fc 01       	movw	r30, r24
    29be:	20 83       	st	Z, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <bno055_get_sys_calib_stat+0xa4>
    29c2:	8f ef       	ldi	r24, 0xFF	; 255
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	25 96       	adiw	r28, 0x05	; 5
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <bno055_get_euler_unit>:
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	25 97       	sbiw	r28, 0x05	; 5
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	1b 82       	std	Y+3, r1	; 0x03
    29ec:	8f ef       	ldi	r24, 0xFF	; 255
    29ee:	8a 83       	std	Y+2, r24	; 0x02
    29f0:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    29f4:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    29f8:	89 2b       	or	r24, r25
    29fa:	11 f4       	brne	.+4      	; 0x2a00 <bno055_get_euler_unit+0x2c>
    29fc:	81 e8       	ldi	r24, 0x81	; 129
    29fe:	41 c0       	rjmp	.+130    	; 0x2a82 <bno055_get_euler_unit+0xae>
    2a00:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2a04:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	13 96       	adiw	r26, 0x03	; 3
    2a0c:	8c 91       	ld	r24, X
    2a0e:	88 23       	and	r24, r24
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <bno055_get_euler_unit+0x44>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	df db       	rcall	.-2114   	; 0x21d4 <bno055_write_page_id>
    2a16:	8a 83       	std	Y+2, r24	; 0x02
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	88 23       	and	r24, r24
    2a1c:	41 f0       	breq	.+16     	; 0x2a2e <bno055_get_euler_unit+0x5a>
    2a1e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2a22:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2a26:	fc 01       	movw	r30, r24
    2a28:	83 81       	ldd	r24, Z+3	; 0x03
    2a2a:	88 23       	and	r24, r24
    2a2c:	39 f5       	brne	.+78     	; 0x2a7c <bno055_get_euler_unit+0xa8>
    2a2e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2a32:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2a36:	dc 01       	movw	r26, r24
    2a38:	1b 96       	adiw	r26, 0x0b	; 11
    2a3a:	ed 91       	ld	r30, X+
    2a3c:	fc 91       	ld	r31, X
    2a3e:	1c 97       	sbiw	r26, 0x0c	; 12
    2a40:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2a44:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	18 96       	adiw	r26, 0x08	; 8
    2a4c:	3c 91       	ld	r19, X
    2a4e:	ce 01       	movw	r24, r28
    2a50:	03 96       	adiw	r24, 0x03	; 3
    2a52:	21 e0       	ldi	r18, 0x01	; 1
    2a54:	ac 01       	movw	r20, r24
    2a56:	6b e3       	ldi	r22, 0x3B	; 59
    2a58:	83 2f       	mov	r24, r19
    2a5a:	19 95       	eicall
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	84 70       	andi	r24, 0x04	; 4
    2a66:	99 27       	eor	r25, r25
    2a68:	95 95       	asr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	95 95       	asr	r25
    2a6e:	87 95       	ror	r24
    2a70:	28 2f       	mov	r18, r24
    2a72:	8c 81       	ldd	r24, Y+4	; 0x04
    2a74:	9d 81       	ldd	r25, Y+5	; 0x05
    2a76:	fc 01       	movw	r30, r24
    2a78:	20 83       	st	Z, r18
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <bno055_get_euler_unit+0xac>
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	25 96       	adiw	r28, 0x05	; 5
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <bno055_set_euler_unit>:
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	25 97       	sbiw	r28, 0x05	; 5
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	8f ef       	ldi	r24, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	1b 82       	std	Y+3, r1	; 0x03
    2aa4:	1c 82       	std	Y+4, r1	; 0x04
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2aae:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2ab2:	89 2b       	or	r24, r25
    2ab4:	11 f4       	brne	.+4      	; 0x2aba <bno055_set_euler_unit+0x2c>
    2ab6:	81 e8       	ldi	r24, 0x81	; 129
    2ab8:	68 c0       	rjmp	.+208    	; 0x2b8a <bno055_set_euler_unit+0xfc>
    2aba:	ce 01       	movw	r24, r28
    2abc:	04 96       	adiw	r24, 0x04	; 4
    2abe:	6b d0       	rcall	.+214    	; 0x2b96 <bno055_get_operation_mode>
    2ac0:	8a 83       	std	Y+2, r24	; 0x02
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	88 23       	and	r24, r24
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <bno055_set_euler_unit+0x3c>
    2ac8:	54 c0       	rjmp	.+168    	; 0x2b72 <bno055_set_euler_unit+0xe4>
    2aca:	8c 81       	ldd	r24, Y+4	; 0x04
    2acc:	88 23       	and	r24, r24
    2ace:	31 f0       	breq	.+12     	; 0x2adc <bno055_set_euler_unit+0x4e>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	b7 d0       	rcall	.+366    	; 0x2c42 <bno055_set_operation_mode>
    2ad4:	98 2f       	mov	r25, r24
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	89 0f       	add	r24, r25
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	88 23       	and	r24, r24
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <bno055_set_euler_unit+0x56>
    2ae2:	44 c0       	rjmp	.+136    	; 0x2b6c <bno055_set_euler_unit+0xde>
    2ae4:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2ae8:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2aec:	dc 01       	movw	r26, r24
    2aee:	1b 96       	adiw	r26, 0x0b	; 11
    2af0:	ed 91       	ld	r30, X+
    2af2:	fc 91       	ld	r31, X
    2af4:	1c 97       	sbiw	r26, 0x0c	; 12
    2af6:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2afa:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2afe:	dc 01       	movw	r26, r24
    2b00:	18 96       	adiw	r26, 0x08	; 8
    2b02:	3c 91       	ld	r19, X
    2b04:	ce 01       	movw	r24, r28
    2b06:	03 96       	adiw	r24, 0x03	; 3
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	6b e3       	ldi	r22, 0x3B	; 59
    2b0e:	83 2f       	mov	r24, r19
    2b10:	19 95       	eicall
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	88 23       	and	r24, r24
    2b18:	71 f5       	brne	.+92     	; 0x2b76 <bno055_set_euler_unit+0xe8>
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	2b 7f       	andi	r18, 0xFB	; 251
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	84 70       	andi	r24, 0x04	; 4
    2b30:	82 2b       	or	r24, r18
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2b38:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	19 96       	adiw	r26, 0x09	; 9
    2b40:	ed 91       	ld	r30, X+
    2b42:	fc 91       	ld	r31, X
    2b44:	1a 97       	sbiw	r26, 0x0a	; 10
    2b46:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2b4a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	18 96       	adiw	r26, 0x08	; 8
    2b52:	3c 91       	ld	r19, X
    2b54:	ce 01       	movw	r24, r28
    2b56:	03 96       	adiw	r24, 0x03	; 3
    2b58:	21 e0       	ldi	r18, 0x01	; 1
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	6b e3       	ldi	r22, 0x3B	; 59
    2b5e:	83 2f       	mov	r24, r19
    2b60:	19 95       	eicall
    2b62:	98 2f       	mov	r25, r24
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	89 0f       	add	r24, r25
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	05 c0       	rjmp	.+10     	; 0x2b76 <bno055_set_euler_unit+0xe8>
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <bno055_set_euler_unit+0xe8>
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	88 23       	and	r24, r24
    2b7a:	31 f0       	breq	.+12     	; 0x2b88 <bno055_set_euler_unit+0xfa>
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	61 d0       	rcall	.+194    	; 0x2c42 <bno055_set_operation_mode>
    2b80:	98 2f       	mov	r25, r24
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	89 0f       	add	r24, r25
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	25 96       	adiw	r28, 0x05	; 5
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <bno055_get_operation_mode>:
 *	to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(
u8 *operation_mode_u8)
{
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	25 97       	sbiw	r28, 0x05	; 5
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	8c 83       	std	Y+4, r24	; 0x04
    2ba6:	9d 83       	std	Y+5, r25	; 0x05
	/* Variable used to return value of
	communication routine*/
	BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    2ba8:	8f ef       	ldi	r24, 0xFF	; 255
    2baa:	89 83       	std	Y+1, r24	; 0x01
	u8 data_u8r = BNO055_INIT_VALUE;
    2bac:	1b 82       	std	Y+3, r1	; 0x03
	s8 stat_s8 = BNO055_ERROR;
    2bae:	8f ef       	ldi	r24, 0xFF	; 255
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
	/* Check the struct p_bno055 is empty */
	if (p_bno055 == BNO055_INIT_VALUE) {
    2bb2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2bb6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2bba:	89 2b       	or	r24, r25
    2bbc:	11 f4       	brne	.+4      	; 0x2bc2 <bno055_get_operation_mode+0x2c>
		return BNO055_E_NULL_PTR;
    2bbe:	81 e8       	ldi	r24, 0x81	; 129
    2bc0:	3a c0       	rjmp	.+116    	; 0x2c36 <bno055_get_operation_mode+0xa0>
		} else {
		/*condition check for page, operation mode is
		available in the page zero*/
		if (p_bno055->page_id != BNO055_PAGE_ZERO)
    2bc2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2bc6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	13 96       	adiw	r26, 0x03	; 3
    2bce:	8c 91       	ld	r24, X
    2bd0:	88 23       	and	r24, r24
    2bd2:	19 f0       	breq	.+6      	; 0x2bda <bno055_get_operation_mode+0x44>
			/* Write the page zero*/
			stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	fe da       	rcall	.-2564   	; 0x21d4 <bno055_write_page_id>
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
		if ((stat_s8 == BNO055_SUCCESS) ||
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	88 23       	and	r24, r24
    2bde:	41 f0       	breq	.+16     	; 0x2bf0 <bno055_get_operation_mode+0x5a>
		(p_bno055->page_id == BNO055_PAGE_ZERO)) {
    2be0:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2be4:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2be8:	fc 01       	movw	r30, r24
    2bea:	83 81       	ldd	r24, Z+3	; 0x03
		/*condition check for page, operation mode is
		available in the page zero*/
		if (p_bno055->page_id != BNO055_PAGE_ZERO)
			/* Write the page zero*/
			stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
		if ((stat_s8 == BNO055_SUCCESS) ||
    2bec:	88 23       	and	r24, r24
    2bee:	01 f5       	brne	.+64     	; 0x2c30 <bno055_get_operation_mode+0x9a>
		(p_bno055->page_id == BNO055_PAGE_ZERO)) {
			/* Read the value of operation mode*/
			com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2bf0:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2bf4:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	1b 96       	adiw	r26, 0x0b	; 11
    2bfc:	ed 91       	ld	r30, X+
    2bfe:	fc 91       	ld	r31, X
    2c00:	1c 97       	sbiw	r26, 0x0c	; 12
    2c02:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2c06:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	18 96       	adiw	r26, 0x08	; 8
    2c0e:	3c 91       	ld	r19, X
    2c10:	ce 01       	movw	r24, r28
    2c12:	03 96       	adiw	r24, 0x03	; 3
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	ac 01       	movw	r20, r24
    2c18:	6d e3       	ldi	r22, 0x3D	; 61
    2c1a:	83 2f       	mov	r24, r19
    2c1c:	19 95       	eicall
    2c1e:	89 83       	std	Y+1, r24	; 0x01
			(p_bno055->dev_addr,
			BNO055_OPERATION_MODE_REG,
			&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
			*operation_mode_u8 =
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	28 2f       	mov	r18, r24
    2c24:	2f 70       	andi	r18, 0x0F	; 15
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	20 83       	st	Z, r18
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <bno055_get_operation_mode+0x9e>
			BNO055_GET_BITSLICE(data_u8r,
			BNO055_OPERATION_MODE);
		} else {
		com_rslt = BNO055_ERROR;
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return com_rslt;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c36:	25 96       	adiw	r28, 0x05	; 5
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <bno055_set_operation_mode>:
 *	becomes zero and it is mainly derived
 *	to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	25 97       	sbiw	r28, 0x05	; 5
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	8d 83       	std	Y+5, r24	; 0x05
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	89 83       	std	Y+1, r24	; 0x01
u8 data_u8r = BNO055_INIT_VALUE;
    2c56:	1b 82       	std	Y+3, r1	; 0x03
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    2c58:	1c 82       	std	Y+4, r1	; 0x04
s8 stat_s8 = BNO055_ERROR;
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    2c5e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2c62:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2c66:	89 2b       	or	r24, r25
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <bno055_set_operation_mode+0x2c>
	return BNO055_E_NULL_PTR;
    2c6a:	81 e8       	ldi	r24, 0x81	; 129
    2c6c:	d9 c0       	rjmp	.+434    	; 0x2e20 <bno055_set_operation_mode+0x1de>
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    2c6e:	ce 01       	movw	r24, r28
    2c70:	04 96       	adiw	r24, 0x04	; 4
    2c72:	91 df       	rcall	.-222    	; 0x2b96 <bno055_get_operation_mode>
    2c74:	8a 83       	std	Y+2, r24	; 0x02
		if (stat_s8 == BNO055_SUCCESS) {
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	88 23       	and	r24, r24
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <bno055_set_operation_mode+0x3c>
    2c7c:	ce c0       	rjmp	.+412    	; 0x2e1a <bno055_set_operation_mode+0x1d8>
			/* If the previous operation mode is config it is
				directly write the operation mode */
			if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG) {
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	88 23       	and	r24, r24
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <bno055_set_operation_mode+0x44>
    2c84:	4a c0       	rjmp	.+148    	; 0x2d1a <bno055_set_operation_mode+0xd8>
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2c86:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2c8a:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	1b 96       	adiw	r26, 0x0b	; 11
    2c92:	ed 91       	ld	r30, X+
    2c94:	fc 91       	ld	r31, X
    2c96:	1c 97       	sbiw	r26, 0x0c	; 12
    2c98:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2c9c:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	18 96       	adiw	r26, 0x08	; 8
    2ca4:	3c 91       	ld	r19, X
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	03 96       	adiw	r24, 0x03	; 3
    2caa:	21 e0       	ldi	r18, 0x01	; 1
    2cac:	ac 01       	movw	r20, r24
    2cae:	6d e3       	ldi	r22, 0x3D	; 61
    2cb0:	83 2f       	mov	r24, r19
    2cb2:	19 95       	eicall
    2cb4:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_OPERATION_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 23       	and	r24, r24
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <bno055_set_operation_mode+0x7c>
    2cbc:	b0 c0       	rjmp	.+352    	; 0x2e1e <bno055_set_operation_mode+0x1dc>
					data_u8r =
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	90 7f       	andi	r25, 0xF0	; 240
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	8f 70       	andi	r24, 0x0F	; 15
    2cc8:	89 2b       	or	r24, r25
    2cca:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_OPERATION_MODE,
					operation_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    2ccc:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2cd0:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	19 96       	adiw	r26, 0x09	; 9
    2cd8:	ed 91       	ld	r30, X+
    2cda:	fc 91       	ld	r31, X
    2cdc:	1a 97       	sbiw	r26, 0x0a	; 10
    2cde:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2ce2:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	18 96       	adiw	r26, 0x08	; 8
    2cea:	3c 91       	ld	r19, X
    2cec:	ce 01       	movw	r24, r28
    2cee:	03 96       	adiw	r24, 0x03	; 3
    2cf0:	21 e0       	ldi	r18, 0x01	; 1
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	6d e3       	ldi	r22, 0x3D	; 61
    2cf6:	83 2f       	mov	r24, r19
    2cf8:	19 95       	eicall
				if (com_rslt == BNO055_SUCCESS) {
					data_u8r =
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_OPERATION_MODE,
					operation_mode_u8);
					com_rslt +=
    2cfa:	98 2f       	mov	r25, r24
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	89 0f       	add	r24, r25
    2d00:	89 83       	std	Y+1, r24	; 0x01
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
					/* Config mode to other
					operation mode switching
					required delay of 600ms*/
					p_bno055->delay_msec(
    2d02:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2d06:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	25 85       	ldd	r18, Z+13	; 0x0d
    2d0e:	36 85       	ldd	r19, Z+14	; 0x0e
    2d10:	88 e5       	ldi	r24, 0x58	; 88
    2d12:	92 e0       	ldi	r25, 0x02	; 2
    2d14:	f9 01       	movw	r30, r18
    2d16:	19 95       	eicall
    2d18:	82 c0       	rjmp	.+260    	; 0x2e1e <bno055_set_operation_mode+0x1dc>
				}
			} else {
				/* If the previous operation
				mode is not config it is
				 write the config mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2d1a:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2d1e:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2d22:	dc 01       	movw	r26, r24
    2d24:	1b 96       	adiw	r26, 0x0b	; 11
    2d26:	ed 91       	ld	r30, X+
    2d28:	fc 91       	ld	r31, X
    2d2a:	1c 97       	sbiw	r26, 0x0c	; 12
    2d2c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2d30:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2d34:	dc 01       	movw	r26, r24
    2d36:	18 96       	adiw	r26, 0x08	; 8
    2d38:	3c 91       	ld	r19, X
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	03 96       	adiw	r24, 0x03	; 3
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	ac 01       	movw	r20, r24
    2d42:	6d e3       	ldi	r22, 0x3D	; 61
    2d44:	83 2f       	mov	r24, r19
    2d46:	19 95       	eicall
    2d48:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_OPERATION_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	88 23       	and	r24, r24
    2d4e:	c1 f4       	brne	.+48     	; 0x2d80 <bno055_set_operation_mode+0x13e>
					data_u8r =
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	80 7f       	andi	r24, 0xF0	; 240
    2d54:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_OPERATION_MODE,
					BNO055_OPERATION_MODE_CONFIG);
					com_rslt += bno055_write_register(
    2d56:	ce 01       	movw	r24, r28
    2d58:	03 96       	adiw	r24, 0x03	; 3
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	8d e3       	ldi	r24, 0x3D	; 61
    2d60:	05 da       	rcall	.-3062   	; 0x216c <bno055_write_register>
    2d62:	98 2f       	mov	r25, r24
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	89 0f       	add	r24, r25
    2d68:	89 83       	std	Y+1, r24	; 0x01
					BNO055_OPERATION_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
					/* other mode to config mode switching
					required delay of 20ms*/
					p_bno055->delay_msec(
    2d6a:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2d6e:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2d72:	fc 01       	movw	r30, r24
    2d74:	25 85       	ldd	r18, Z+13	; 0x0d
    2d76:	36 85       	ldd	r19, Z+14	; 0x0e
    2d78:	84 e1       	ldi	r24, 0x14	; 20
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	f9 01       	movw	r30, r18
    2d7e:	19 95       	eicall
					BNO055_CONFIG_MODE_SWITCHING_DELAY);
				}
				/* Write the operation mode */
				if (operation_mode_u8 !=
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	88 23       	and	r24, r24
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <bno055_set_operation_mode+0x146>
    2d86:	4b c0       	rjmp	.+150    	; 0x2e1e <bno055_set_operation_mode+0x1dc>
				BNO055_OPERATION_MODE_CONFIG) {
					com_rslt =
					p_bno055->BNO055_BUS_READ_FUNC
    2d88:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2d8c:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2d90:	dc 01       	movw	r26, r24
    2d92:	1b 96       	adiw	r26, 0x0b	; 11
    2d94:	ed 91       	ld	r30, X+
    2d96:	fc 91       	ld	r31, X
    2d98:	1c 97       	sbiw	r26, 0x0c	; 12
    2d9a:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2d9e:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2da2:	dc 01       	movw	r26, r24
    2da4:	18 96       	adiw	r26, 0x08	; 8
    2da6:	3c 91       	ld	r19, X
					BNO055_CONFIG_MODE_SWITCHING_DELAY);
				}
				/* Write the operation mode */
				if (operation_mode_u8 !=
				BNO055_OPERATION_MODE_CONFIG) {
					com_rslt =
    2da8:	ce 01       	movw	r24, r28
    2daa:	03 96       	adiw	r24, 0x03	; 3
    2dac:	21 e0       	ldi	r18, 0x01	; 1
    2dae:	ac 01       	movw	r20, r24
    2db0:	6d e3       	ldi	r22, 0x3D	; 61
    2db2:	83 2f       	mov	r24, r19
    2db4:	19 95       	eicall
    2db6:	89 83       	std	Y+1, r24	; 0x01
					p_bno055->BNO055_BUS_READ_FUNC
					(p_bno055->dev_addr,
					BNO055_OPERATION_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
					if (com_rslt == BNO055_SUCCESS) {
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	88 23       	and	r24, r24
    2dbc:	81 f5       	brne	.+96     	; 0x2e1e <bno055_set_operation_mode+0x1dc>
						data_u8r = BNO055_SET_BITSLICE
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	90 7f       	andi	r25, 0xF0	; 240
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	8f 70       	andi	r24, 0x0F	; 15
    2dc8:	89 2b       	or	r24, r25
    2dca:	8b 83       	std	Y+3, r24	; 0x03
						(data_u8r,
						BNO055_OPERATION_MODE,
						operation_mode_u8);
						com_rslt +=
						p_bno055->BNO055_BUS_WRITE_FUNC
    2dcc:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2dd0:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	19 96       	adiw	r26, 0x09	; 9
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	1a 97       	sbiw	r26, 0x0a	; 10
    2dde:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2de2:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2de6:	dc 01       	movw	r26, r24
    2de8:	18 96       	adiw	r26, 0x08	; 8
    2dea:	3c 91       	ld	r19, X
    2dec:	ce 01       	movw	r24, r28
    2dee:	03 96       	adiw	r24, 0x03	; 3
    2df0:	21 e0       	ldi	r18, 0x01	; 1
    2df2:	ac 01       	movw	r20, r24
    2df4:	6d e3       	ldi	r22, 0x3D	; 61
    2df6:	83 2f       	mov	r24, r19
    2df8:	19 95       	eicall
					if (com_rslt == BNO055_SUCCESS) {
						data_u8r = BNO055_SET_BITSLICE
						(data_u8r,
						BNO055_OPERATION_MODE,
						operation_mode_u8);
						com_rslt +=
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	89 0f       	add	r24, r25
    2e00:	89 83       	std	Y+1, r24	; 0x01
						&data_u8r,
						BNO055_GEN_READ_WRITE_LENGTH);
						/* Config mode to other
						operation mode switching
						required delay of 600ms*/
						p_bno055->delay_msec(
    2e02:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <p_bno055>
    2e06:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <p_bno055+0x1>
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	25 85       	ldd	r18, Z+13	; 0x0d
    2e0e:	36 85       	ldd	r19, Z+14	; 0x0e
    2e10:	88 e5       	ldi	r24, 0x58	; 88
    2e12:	92 e0       	ldi	r25, 0x02	; 2
    2e14:	f9 01       	movw	r30, r18
    2e16:	19 95       	eicall
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <bno055_set_operation_mode+0x1dc>
						BNO055_MODE_SWITCHING_DELAY);
					}
				}
			}
		} else {
		com_rslt = BNO055_ERROR;
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return com_rslt;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e20:	25 96       	adiw	r28, 0x05	; 5
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <init_gps_interrupts>:
#include <string.h>
#include "gps.h"
#include "gps_interrupts.h"

void init_gps_interrupts(void)
{
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	1f 92       	push	r1
    2e32:	1f 92       	push	r1
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
    2e38:	80 eb       	ldi	r24, 0xB0	; 176
    2e3a:	9b e0       	ldi	r25, 0x0B	; 11
    2e3c:	24 e1       	ldi	r18, 0x14	; 20
    2e3e:	fc 01       	movw	r30, r24
    2e40:	23 83       	std	Z+3, r18	; 0x03
	gpgga_index = 0;
    2e42:	10 92 9b 27 	sts	0x279B, r1	; 0x80279b <gpgga_index>
	uint8_t dollar_counter = 0;
    2e46:	19 82       	std	Y+1, r1	; 0x01
	uint8_t current_sentence = SENTENCE_NONE;
    2e48:	1a 82       	std	Y+2, r1	; 0x02
	last_finished = SENTENCE_NONE;
    2e4a:	10 92 a6 25 	sts	0x25A6, r1	; 0x8025a6 <last_finished>
	
}
    2e4e:	00 00       	nop
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	08 95       	ret

00002e5a <init_gps_buffers>:

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	51 e0       	ldi	r21, 0x01	; 1
    2e66:	6e ef       	ldi	r22, 0xFE	; 254
    2e68:	75 e2       	ldi	r23, 0x25	; 37
    2e6a:	8e e9       	ldi	r24, 0x9E	; 158
    2e6c:	95 e2       	ldi	r25, 0x25	; 37
    2e6e:	0e 94 e5 25 	call	0x4bca	; 0x4bca <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
    2e72:	40 e4       	ldi	r20, 0x40	; 64
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	6e ef       	ldi	r22, 0xFE	; 254
    2e78:	76 e2       	ldi	r23, 0x26	; 38
    2e7a:	8e e3       	ldi	r24, 0x3E	; 62
    2e7c:	97 e2       	ldi	r25, 0x27	; 39
    2e7e:	0e 94 e5 25 	call	0x4bca	; 0x4bca <rbu8_init>
}
    2e82:	00 00       	nop
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <__vector_122>:

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
    2e8a:	1f 92       	push	r1
    2e8c:	0f 92       	push	r0
    2e8e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e9a:	0f 92       	push	r0
    2e9c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ea0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ea4:	0f 92       	push	r0
    2ea6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2eaa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2eae:	0f 92       	push	r0
    2eb0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2eb4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2eb8:	0f 92       	push	r0
    2eba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	1f 92       	push	r1
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t ch = GPS_USART.DATA;
    2ee0:	80 eb       	ldi	r24, 0xB0	; 176
    2ee2:	9b e0       	ldi	r25, 0x0B	; 11
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	80 81       	ld	r24, Z
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	
	printf("%c\n",ch);
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	29 2f       	mov	r18, r25
    2ef2:	2f 93       	push	r18
    2ef4:	8f 93       	push	r24
    2ef6:	84 e8       	ldi	r24, 0x84	; 132
    2ef8:	90 e2       	ldi	r25, 0x20	; 32
    2efa:	89 2f       	mov	r24, r25
    2efc:	8f 93       	push	r24
    2efe:	84 e8       	ldi	r24, 0x84	; 132
    2f00:	90 e2       	ldi	r25, 0x20	; 32
    2f02:	8f 93       	push	r24
    2f04:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
	//printf("%c""\0", (char)ch);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
    2f10:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <current_sentence>
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	41 f5       	brne	.+80     	; 0x2f68 <__vector_122+0xde>
	{
		if (ch == '\n')
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	8a 30       	cpi	r24, 0x0A	; 10
    2f1c:	b1 f4       	brne	.+44     	; 0x2f4a <__vector_122+0xc0>
		{
			
			rbu8_write(gpgga_buff, &gps_receive_buffer, gpgga_index);
    2f1e:	80 91 9b 27 	lds	r24, 0x279B	; 0x80279b <gpgga_index>
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	ac 01       	movw	r20, r24
    2f28:	6e e9       	ldi	r22, 0x9E	; 158
    2f2a:	75 e2       	ldi	r23, 0x25	; 37
    2f2c:	86 e4       	ldi	r24, 0x46	; 70
    2f2e:	97 e2       	ldi	r25, 0x27	; 39
    2f30:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <rbu8_write>
			last_finished = current_sentence;
    2f34:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <current_sentence>
    2f38:	80 93 a6 25 	sts	0x25A6, r24	; 0x8025a6 <last_finished>
			gpgga_index=0;
    2f3c:	10 92 9b 27 	sts	0x279B, r1	; 0x80279b <gpgga_index>
			current_sentence = SENTENCE_WAIT;
    2f40:	85 e0       	ldi	r24, 0x05	; 5
    2f42:	80 93 fd 25 	sts	0x25FD, r24	; 0x8025fd <current_sentence>
			dollar_counter = 0;
    2f46:	10 92 9d 25 	sts	0x259D, r1	; 0x80259d <dollar_counter>
		}
		
		gpgga_buff[gpgga_index] = ch;
    2f4a:	80 91 9b 27 	lds	r24, 0x279B	; 0x80279b <gpgga_index>
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	8a 5b       	subi	r24, 0xBA	; 186
    2f54:	98 4d       	sbci	r25, 0xD8	; 216
    2f56:	29 81       	ldd	r18, Y+1	; 0x01
    2f58:	fc 01       	movw	r30, r24
    2f5a:	20 83       	st	Z, r18
		gpgga_index++;
    2f5c:	80 91 9b 27 	lds	r24, 0x279B	; 0x80279b <gpgga_index>
    2f60:	8f 5f       	subi	r24, 0xFF	; 255
    2f62:	80 93 9b 27 	sts	0x279B, r24	; 0x80279b <gpgga_index>
    2f66:	0a c0       	rjmp	.+20     	; 0x2f7c <__vector_122+0xf2>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
		
	

	}
	else if (ch == '$' && current_sentence == SENTENCE_NONE)
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	84 32       	cpi	r24, 0x24	; 36
    2f6c:	39 f4       	brne	.+14     	; 0x2f7c <__vector_122+0xf2>
    2f6e:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <current_sentence>
    2f72:	88 23       	and	r24, r24
    2f74:	19 f4       	brne	.+6      	; 0x2f7c <__vector_122+0xf2>
	{
		dollar_counter = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	80 93 9d 25 	sts	0x259D, r24	; 0x80259d <dollar_counter>
	}
	
	if (dollar_counter > 0 && current_sentence == SENTENCE_NONE)
    2f7c:	80 91 9d 25 	lds	r24, 0x259D	; 0x80259d <dollar_counter>
    2f80:	88 23       	and	r24, r24
    2f82:	21 f1       	breq	.+72     	; 0x2fcc <__vector_122+0x142>
    2f84:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <current_sentence>
    2f88:	88 23       	and	r24, r24
    2f8a:	01 f5       	brne	.+64     	; 0x2fcc <__vector_122+0x142>
	{
		if (dollar_counter == 5 && ch == 'G' )
    2f8c:	80 91 9d 25 	lds	r24, 0x259D	; 0x80259d <dollar_counter>
    2f90:	85 30       	cpi	r24, 0x05	; 5
    2f92:	b9 f4       	brne	.+46     	; 0x2fc2 <__vector_122+0x138>
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	87 34       	cpi	r24, 0x47	; 71
    2f98:	a1 f4       	brne	.+40     	; 0x2fc2 <__vector_122+0x138>
		{
			current_sentence= SENTENCE_GPGGA;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	80 93 fd 25 	sts	0x25FD, r24	; 0x8025fd <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
    2fa0:	45 e0       	ldi	r20, 0x05	; 5
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	68 e8       	ldi	r22, 0x88	; 136
    2fa6:	70 e2       	ldi	r23, 0x20	; 32
    2fa8:	86 e4       	ldi	r24, 0x46	; 70
    2faa:	97 e2       	ldi	r25, 0x27	; 39
    2fac:	0e 94 07 5b 	call	0xb60e	; 0xb60e <memcpy>
			gpgga_index = 5;
    2fb0:	85 e0       	ldi	r24, 0x05	; 5
    2fb2:	80 93 9b 27 	sts	0x279B, r24	; 0x80279b <gpgga_index>
			dollar_counter++;
    2fb6:	80 91 9d 25 	lds	r24, 0x259D	; 0x80259d <dollar_counter>
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	80 93 9d 25 	sts	0x259D, r24	; 0x80259d <dollar_counter>
			dollar_counter++;
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <__vector_122+0x142>
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
    2fc2:	80 91 9d 25 	lds	r24, 0x259D	; 0x80259d <dollar_counter>
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	80 93 9d 25 	sts	0x259D, r24	; 0x80259d <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    2fcc:	00 00       	nop
    2fce:	0f 90       	pop	r0
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	ff 91       	pop	r31
    2fd6:	ef 91       	pop	r30
    2fd8:	bf 91       	pop	r27
    2fda:	af 91       	pop	r26
    2fdc:	9f 91       	pop	r25
    2fde:	8f 91       	pop	r24
    2fe0:	7f 91       	pop	r23
    2fe2:	6f 91       	pop	r22
    2fe4:	5f 91       	pop	r21
    2fe6:	4f 91       	pop	r20
    2fe8:	3f 91       	pop	r19
    2fea:	2f 91       	pop	r18
    2fec:	0f 90       	pop	r0
    2fee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ff2:	0f 90       	pop	r0
    2ff4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ff8:	0f 90       	pop	r0
    2ffa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ffe:	0f 90       	pop	r0
    3000:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3004:	0f 90       	pop	r0
    3006:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    300a:	0f 90       	pop	r0
    300c:	1f 90       	pop	r1
    300e:	18 95       	reti

00003010 <__vector_124>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
    3010:	1f 92       	push	r1
    3012:	0f 92       	push	r0
    3014:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3018:	0f 92       	push	r0
    301a:	11 24       	eor	r1, r1
    301c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3020:	0f 92       	push	r0
    3022:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3026:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    302a:	0f 92       	push	r0
    302c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3030:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3034:	0f 92       	push	r0
    3036:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    303a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    303e:	0f 92       	push	r0
    3040:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3044:	2f 93       	push	r18
    3046:	3f 93       	push	r19
    3048:	4f 93       	push	r20
    304a:	5f 93       	push	r21
    304c:	6f 93       	push	r22
    304e:	7f 93       	push	r23
    3050:	8f 93       	push	r24
    3052:	9f 93       	push	r25
    3054:	af 93       	push	r26
    3056:	bf 93       	push	r27
    3058:	ef 93       	push	r30
    305a:	ff 93       	push	r31
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	60 eb       	ldi	r22, 0xB0	; 176
    306a:	7b e0       	ldi	r23, 0x0B	; 11
    306c:	8e e3       	ldi	r24, 0x3E	; 62
    306e:	97 e2       	ldi	r25, 0x27	; 39
    3070:	0e 94 10 26 	call	0x4c20	; 0x4c20 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
    3074:	61 e0       	ldi	r22, 0x01	; 1
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	8e e3       	ldi	r24, 0x3E	; 62
    307a:	97 e2       	ldi	r25, 0x27	; 39
    307c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <rbu8_delete_oldest>
    3080:	00 00       	nop
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	ff 91       	pop	r31
    3088:	ef 91       	pop	r30
    308a:	bf 91       	pop	r27
    308c:	af 91       	pop	r26
    308e:	9f 91       	pop	r25
    3090:	8f 91       	pop	r24
    3092:	7f 91       	pop	r23
    3094:	6f 91       	pop	r22
    3096:	5f 91       	pop	r21
    3098:	4f 91       	pop	r20
    309a:	3f 91       	pop	r19
    309c:	2f 91       	pop	r18
    309e:	0f 90       	pop	r0
    30a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    30a4:	0f 90       	pop	r0
    30a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    30aa:	0f 90       	pop	r0
    30ac:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    30b0:	0f 90       	pop	r0
    30b2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    30b6:	0f 90       	pop	r0
    30b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    30bc:	0f 90       	pop	r0
    30be:	1f 90       	pop	r1
    30c0:	18 95       	reti

000030c2 <imu_update>:
}

double imu_accel_dist()
{	
	return sqrt(bno055_linear_accel.x*bno055_linear_accel.x+ bno055_linear_accel.y*bno055_linear_accel.y +bno055_linear_accel.z*bno055_linear_accel.z)-9.8;
}
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	84 eb       	ldi	r24, 0xB4	; 180
    30d8:	97 e2       	ldi	r25, 0x27	; 39
    30da:	95 da       	rcall	.-2774   	; 0x2606 <bno055_convert_double_linear_accel_xyz_msq>
    30dc:	80 ec       	ldi	r24, 0xC0	; 192
    30de:	97 e2       	ldi	r25, 0x27	; 39
    30e0:	00 da       	rcall	.-3072   	; 0x24e2 <bno055_convert_double_euler_hpr_deg>
    30e2:	81 ee       	ldi	r24, 0xE1	; 225
    30e4:	97 e2       	ldi	r25, 0x27	; 39
    30e6:	5f db       	rcall	.-2370   	; 0x27a6 <bno055_get_accel_calib_stat>
    30e8:	87 ee       	ldi	r24, 0xE7	; 231
    30ea:	97 e2       	ldi	r25, 0x27	; 39
    30ec:	b9 db       	rcall	.-2190   	; 0x2860 <bno055_get_gyro_calib_stat>
    30ee:	88 ed       	ldi	r24, 0xD8	; 216
    30f0:	97 e2       	ldi	r25, 0x27	; 39
    30f2:	03 db       	rcall	.-2554   	; 0x26fa <bno055_get_mag_calib_stat>
    30f4:	82 ee       	ldi	r24, 0xE2	; 226
    30f6:	97 e2       	ldi	r25, 0x27	; 39
    30f8:	14 dc       	rcall	.-2008   	; 0x2922 <bno055_get_sys_calib_stat>
    30fa:	80 91 d4 27 	lds	r24, 0x27D4	; 0x8027d4 <prevTime>
    30fe:	90 91 d5 27 	lds	r25, 0x27D5	; 0x8027d5 <prevTime+0x1>
    3102:	a0 91 d6 27 	lds	r26, 0x27D6	; 0x8027d6 <prevTime+0x2>
    3106:	b0 91 d7 27 	lds	r27, 0x27D7	; 0x8027d7 <prevTime+0x3>
    310a:	80 93 9d 27 	sts	0x279D, r24	; 0x80279d <prevPrevTime>
    310e:	90 93 9e 27 	sts	0x279E, r25	; 0x80279e <prevPrevTime+0x1>
    3112:	a0 93 9f 27 	sts	0x279F, r26	; 0x80279f <prevPrevTime+0x2>
    3116:	b0 93 a0 27 	sts	0x27A0, r27	; 0x8027a0 <prevPrevTime+0x3>
    311a:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <rtc_get_time>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 4c 52 	call	0xa498	; 0xa498 <__floatunsisf>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	80 93 d4 27 	sts	0x27D4, r24	; 0x8027d4 <prevTime>
    3132:	90 93 d5 27 	sts	0x27D5, r25	; 0x8027d5 <prevTime+0x1>
    3136:	a0 93 d6 27 	sts	0x27D6, r26	; 0x8027d6 <prevTime+0x2>
    313a:	b0 93 d7 27 	sts	0x27D7, r27	; 0x8027d7 <prevTime+0x3>
    313e:	80 91 dd 27 	lds	r24, 0x27DD	; 0x8027dd <currentAccZ>
    3142:	90 91 de 27 	lds	r25, 0x27DE	; 0x8027de <currentAccZ+0x1>
    3146:	a0 91 df 27 	lds	r26, 0x27DF	; 0x8027df <currentAccZ+0x2>
    314a:	b0 91 e0 27 	lds	r27, 0x27E0	; 0x8027e0 <currentAccZ+0x3>
    314e:	80 93 d9 27 	sts	0x27D9, r24	; 0x8027d9 <prevAccZ>
    3152:	90 93 da 27 	sts	0x27DA, r25	; 0x8027da <prevAccZ+0x1>
    3156:	a0 93 db 27 	sts	0x27DB, r26	; 0x8027db <prevAccZ+0x2>
    315a:	b0 93 dc 27 	sts	0x27DC, r27	; 0x8027dc <prevAccZ+0x3>
    315e:	e8 d0       	rcall	.+464    	; 0x3330 <imu_accel_z>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	80 93 dd 27 	sts	0x27DD, r24	; 0x8027dd <currentAccZ>
    3168:	90 93 de 27 	sts	0x27DE, r25	; 0x8027de <currentAccZ+0x1>
    316c:	a0 93 df 27 	sts	0x27DF, r26	; 0x8027df <currentAccZ+0x2>
    3170:	b0 93 e0 27 	sts	0x27E0, r27	; 0x8027e0 <currentAccZ+0x3>
    3174:	80 91 a1 27 	lds	r24, 0x27A1	; 0x8027a1 <currentVelZ>
    3178:	90 91 a2 27 	lds	r25, 0x27A2	; 0x8027a2 <currentVelZ+0x1>
    317c:	a0 91 a3 27 	lds	r26, 0x27A3	; 0x8027a3 <currentVelZ+0x2>
    3180:	b0 91 a4 27 	lds	r27, 0x27A4	; 0x8027a4 <currentVelZ+0x3>
    3184:	80 93 cc 27 	sts	0x27CC, r24	; 0x8027cc <prevVelZ>
    3188:	90 93 cd 27 	sts	0x27CD, r25	; 0x8027cd <prevVelZ+0x1>
    318c:	a0 93 ce 27 	sts	0x27CE, r26	; 0x8027ce <prevVelZ+0x2>
    3190:	b0 93 cf 27 	sts	0x27CF, r27	; 0x8027cf <prevVelZ+0x3>
    3194:	80 91 d9 27 	lds	r24, 0x27D9	; 0x8027d9 <prevAccZ>
    3198:	90 91 da 27 	lds	r25, 0x27DA	; 0x8027da <prevAccZ+0x1>
    319c:	a0 91 db 27 	lds	r26, 0x27DB	; 0x8027db <prevAccZ+0x2>
    31a0:	b0 91 dc 27 	lds	r27, 0x27DC	; 0x8027dc <prevAccZ+0x3>
    31a4:	20 91 dd 27 	lds	r18, 0x27DD	; 0x8027dd <currentAccZ>
    31a8:	30 91 de 27 	lds	r19, 0x27DE	; 0x8027de <currentAccZ+0x1>
    31ac:	40 91 df 27 	lds	r20, 0x27DF	; 0x8027df <currentAccZ+0x2>
    31b0:	50 91 e0 27 	lds	r21, 0x27E0	; 0x8027e0 <currentAccZ+0x3>
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 11 51 	call	0xa222	; 0xa222 <__addsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	50 e4       	ldi	r21, 0x40	; 64
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	6c 01       	movw	r12, r24
    31d6:	7d 01       	movw	r14, r26
    31d8:	80 91 d4 27 	lds	r24, 0x27D4	; 0x8027d4 <prevTime>
    31dc:	90 91 d5 27 	lds	r25, 0x27D5	; 0x8027d5 <prevTime+0x1>
    31e0:	a0 91 d6 27 	lds	r26, 0x27D6	; 0x8027d6 <prevTime+0x2>
    31e4:	b0 91 d7 27 	lds	r27, 0x27D7	; 0x8027d7 <prevTime+0x3>
    31e8:	20 91 9d 27 	lds	r18, 0x279D	; 0x80279d <prevPrevTime>
    31ec:	30 91 9e 27 	lds	r19, 0x279E	; 0x80279e <prevPrevTime+0x1>
    31f0:	40 91 9f 27 	lds	r20, 0x279F	; 0x80279f <prevPrevTime+0x2>
    31f4:	50 91 a0 27 	lds	r21, 0x27A0	; 0x8027a0 <prevPrevTime+0x3>
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 10 51 	call	0xa220	; 0xa220 <__subsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9c 01       	movw	r18, r24
    3206:	ad 01       	movw	r20, r26
    3208:	c7 01       	movw	r24, r14
    320a:	b6 01       	movw	r22, r12
    320c:	0e 94 95 53 	call	0xa72a	; 0xa72a <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	7c 01       	movw	r14, r24
    3216:	8d 01       	movw	r16, r26
    3218:	80 91 cc 27 	lds	r24, 0x27CC	; 0x8027cc <prevVelZ>
    321c:	90 91 cd 27 	lds	r25, 0x27CD	; 0x8027cd <prevVelZ+0x1>
    3220:	a0 91 ce 27 	lds	r26, 0x27CE	; 0x8027ce <prevVelZ+0x2>
    3224:	b0 91 cf 27 	lds	r27, 0x27CF	; 0x8027cf <prevVelZ+0x3>
    3228:	9c 01       	movw	r18, r24
    322a:	ad 01       	movw	r20, r26
    322c:	c8 01       	movw	r24, r16
    322e:	b7 01       	movw	r22, r14
    3230:	0e 94 11 51 	call	0xa222	; 0xa222 <__addsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	80 93 a1 27 	sts	0x27A1, r24	; 0x8027a1 <currentVelZ>
    323c:	90 93 a2 27 	sts	0x27A2, r25	; 0x8027a2 <currentVelZ+0x1>
    3240:	a0 93 a3 27 	sts	0x27A3, r26	; 0x8027a3 <currentVelZ+0x2>
    3244:	b0 93 a4 27 	sts	0x27A4, r27	; 0x8027a4 <currentVelZ+0x3>
    3248:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <currentPosZ>
    324c:	90 91 d1 27 	lds	r25, 0x27D1	; 0x8027d1 <currentPosZ+0x1>
    3250:	a0 91 d2 27 	lds	r26, 0x27D2	; 0x8027d2 <currentPosZ+0x2>
    3254:	b0 91 d3 27 	lds	r27, 0x27D3	; 0x8027d3 <currentPosZ+0x3>
    3258:	80 93 e3 27 	sts	0x27E3, r24	; 0x8027e3 <prevPosZ>
    325c:	90 93 e4 27 	sts	0x27E4, r25	; 0x8027e4 <prevPosZ+0x1>
    3260:	a0 93 e5 27 	sts	0x27E5, r26	; 0x8027e5 <prevPosZ+0x2>
    3264:	b0 93 e6 27 	sts	0x27E6, r27	; 0x8027e6 <prevPosZ+0x3>
    3268:	80 91 a1 27 	lds	r24, 0x27A1	; 0x8027a1 <currentVelZ>
    326c:	90 91 a2 27 	lds	r25, 0x27A2	; 0x8027a2 <currentVelZ+0x1>
    3270:	a0 91 a3 27 	lds	r26, 0x27A3	; 0x8027a3 <currentVelZ+0x2>
    3274:	b0 91 a4 27 	lds	r27, 0x27A4	; 0x8027a4 <currentVelZ+0x3>
    3278:	20 91 cc 27 	lds	r18, 0x27CC	; 0x8027cc <prevVelZ>
    327c:	30 91 cd 27 	lds	r19, 0x27CD	; 0x8027cd <prevVelZ+0x1>
    3280:	40 91 ce 27 	lds	r20, 0x27CE	; 0x8027ce <prevVelZ+0x2>
    3284:	50 91 cf 27 	lds	r21, 0x27CF	; 0x8027cf <prevVelZ+0x3>
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 11 51 	call	0xa222	; 0xa222 <__addsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e0       	ldi	r20, 0x00	; 0
    329a:	50 e4       	ldi	r21, 0x40	; 64
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	6c 01       	movw	r12, r24
    32aa:	7d 01       	movw	r14, r26
    32ac:	80 91 d4 27 	lds	r24, 0x27D4	; 0x8027d4 <prevTime>
    32b0:	90 91 d5 27 	lds	r25, 0x27D5	; 0x8027d5 <prevTime+0x1>
    32b4:	a0 91 d6 27 	lds	r26, 0x27D6	; 0x8027d6 <prevTime+0x2>
    32b8:	b0 91 d7 27 	lds	r27, 0x27D7	; 0x8027d7 <prevTime+0x3>
    32bc:	20 91 9d 27 	lds	r18, 0x279D	; 0x80279d <prevPrevTime>
    32c0:	30 91 9e 27 	lds	r19, 0x279E	; 0x80279e <prevPrevTime+0x1>
    32c4:	40 91 9f 27 	lds	r20, 0x279F	; 0x80279f <prevPrevTime+0x2>
    32c8:	50 91 a0 27 	lds	r21, 0x27A0	; 0x8027a0 <prevPrevTime+0x3>
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 10 51 	call	0xa220	; 0xa220 <__subsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9c 01       	movw	r18, r24
    32da:	ad 01       	movw	r20, r26
    32dc:	c7 01       	movw	r24, r14
    32de:	b6 01       	movw	r22, r12
    32e0:	0e 94 95 53 	call	0xa72a	; 0xa72a <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	7c 01       	movw	r14, r24
    32ea:	8d 01       	movw	r16, r26
    32ec:	80 91 e3 27 	lds	r24, 0x27E3	; 0x8027e3 <prevPosZ>
    32f0:	90 91 e4 27 	lds	r25, 0x27E4	; 0x8027e4 <prevPosZ+0x1>
    32f4:	a0 91 e5 27 	lds	r26, 0x27E5	; 0x8027e5 <prevPosZ+0x2>
    32f8:	b0 91 e6 27 	lds	r27, 0x27E6	; 0x8027e6 <prevPosZ+0x3>
    32fc:	9c 01       	movw	r18, r24
    32fe:	ad 01       	movw	r20, r26
    3300:	c8 01       	movw	r24, r16
    3302:	b7 01       	movw	r22, r14
    3304:	0e 94 11 51 	call	0xa222	; 0xa222 <__addsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	80 93 d0 27 	sts	0x27D0, r24	; 0x8027d0 <currentPosZ>
    3310:	90 93 d1 27 	sts	0x27D1, r25	; 0x8027d1 <currentPosZ+0x1>
    3314:	a0 93 d2 27 	sts	0x27D2, r26	; 0x8027d2 <currentPosZ+0x2>
    3318:	b0 93 d3 27 	sts	0x27D3, r27	; 0x8027d3 <currentPosZ+0x3>
    331c:	00 00       	nop
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	df 90       	pop	r13
    332c:	cf 90       	pop	r12
    332e:	08 95       	ret

00003330 <imu_accel_z>:
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <bno055_linear_accel+0x8>
    333c:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <bno055_linear_accel+0x9>
    3340:	a0 91 be 27 	lds	r26, 0x27BE	; 0x8027be <bno055_linear_accel+0xa>
    3344:	b0 91 bf 27 	lds	r27, 0x27BF	; 0x8027bf <bno055_linear_accel+0xb>
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	08 95       	ret

00003352 <imu_vel_z>:


double imu_vel_z()
{
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
	return currentVelZ;
    335a:	80 91 a1 27 	lds	r24, 0x27A1	; 0x8027a1 <currentVelZ>
    335e:	90 91 a2 27 	lds	r25, 0x27A2	; 0x8027a2 <currentVelZ+0x1>
    3362:	a0 91 a3 27 	lds	r26, 0x27A3	; 0x8027a3 <currentVelZ+0x2>
    3366:	b0 91 a4 27 	lds	r27, 0x27A4	; 0x8027a4 <currentVelZ+0x3>
}
    336a:	bc 01       	movw	r22, r24
    336c:	cd 01       	movw	r24, r26
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	08 95       	ret

00003374 <imu_pos_z>:

double imu_pos_z()
{
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
	return currentPosZ;
    337c:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <currentPosZ>
    3380:	90 91 d1 27 	lds	r25, 0x27D1	; 0x8027d1 <currentPosZ+0x1>
    3384:	a0 91 d2 27 	lds	r26, 0x27D2	; 0x8027d2 <currentPosZ+0x2>
    3388:	b0 91 d3 27 	lds	r27, 0x27D3	; 0x8027d3 <currentPosZ+0x3>
}
    338c:	bc 01       	movw	r22, r24
    338e:	cd 01       	movw	r24, r26
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	08 95       	ret

00003396 <imu_roll>:




double imu_roll()
{
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.r;
    339e:	80 91 c4 27 	lds	r24, 0x27C4	; 0x8027c4 <bno055_euler+0x4>
    33a2:	90 91 c5 27 	lds	r25, 0x27C5	; 0x8027c5 <bno055_euler+0x5>
    33a6:	a0 91 c6 27 	lds	r26, 0x27C6	; 0x8027c6 <bno055_euler+0x6>
    33aa:	b0 91 c7 27 	lds	r27, 0x27C7	; 0x8027c7 <bno055_euler+0x7>
}
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	08 95       	ret

000033b8 <imu_pitch>:

double imu_pitch()
{
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.p;
    33c0:	80 91 c8 27 	lds	r24, 0x27C8	; 0x8027c8 <bno055_euler+0x8>
    33c4:	90 91 c9 27 	lds	r25, 0x27C9	; 0x8027c9 <bno055_euler+0x9>
    33c8:	a0 91 ca 27 	lds	r26, 0x27CA	; 0x8027ca <bno055_euler+0xa>
    33cc:	b0 91 cb 27 	lds	r27, 0x27CB	; 0x8027cb <bno055_euler+0xb>
}
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	08 95       	ret

000033da <imu_heading>:

double imu_heading()
{
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.h;
    33e2:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <bno055_euler>
    33e6:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <bno055_euler+0x1>
    33ea:	a0 91 c2 27 	lds	r26, 0x27C2	; 0x8027c2 <bno055_euler+0x2>
    33ee:	b0 91 c3 27 	lds	r27, 0x27C3	; 0x8027c3 <bno055_euler+0x3>
}
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	08 95       	ret

000033fc <servo_init>:

void set_servo(uint16_t dutyCycle)
{
	pwm_start(&pwm_cfg,dutyCycle);
	if(DEBUG) printf("Set Servo to duty cycle of %u\n", dutyCycle);
}
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	80 e8       	ldi	r24, 0x80	; 128
    3406:	96 e0       	ldi	r25, 0x06	; 6
    3408:	20 e8       	ldi	r18, 0x80	; 128
    340a:	36 e0       	ldi	r19, 0x06	; 6
    340c:	f9 01       	movw	r30, r18
    340e:	21 81       	ldd	r18, Z+1	; 0x01
    3410:	21 60       	ori	r18, 0x01	; 1
    3412:	fc 01       	movw	r30, r24
    3414:	21 83       	std	Z+1, r18	; 0x01
    3416:	80 e8       	ldi	r24, 0x80	; 128
    3418:	96 e0       	ldi	r25, 0x06	; 6
    341a:	20 e8       	ldi	r18, 0x80	; 128
    341c:	36 e0       	ldi	r19, 0x06	; 6
    341e:	f9 01       	movw	r30, r18
    3420:	25 81       	ldd	r18, Z+5	; 0x05
    3422:	21 60       	ori	r18, 0x01	; 1
    3424:	fc 01       	movw	r30, r24
    3426:	25 83       	std	Z+5, r18	; 0x05
    3428:	8e e8       	ldi	r24, 0x8E	; 142
    342a:	90 e2       	ldi	r25, 0x20	; 32
    342c:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
    3430:	00 00       	nop
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	08 95       	ret

00003438 <buzz_on>:



void buzz_on(void)
{
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    3440:	80 e4       	ldi	r24, 0x40	; 64
    3442:	96 e0       	ldi	r25, 0x06	; 6
    3444:	20 e4       	ldi	r18, 0x40	; 64
    3446:	36 e0       	ldi	r19, 0x06	; 6
    3448:	f9 01       	movw	r30, r18
    344a:	21 81       	ldd	r18, Z+1	; 0x01
    344c:	21 60       	ori	r18, 0x01	; 1
    344e:	fc 01       	movw	r30, r24
    3450:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET |= 0b00000001;
    3452:	80 e4       	ldi	r24, 0x40	; 64
    3454:	96 e0       	ldi	r25, 0x06	; 6
    3456:	20 e4       	ldi	r18, 0x40	; 64
    3458:	36 e0       	ldi	r19, 0x06	; 6
    345a:	f9 01       	movw	r30, r18
    345c:	25 81       	ldd	r18, Z+5	; 0x05
    345e:	21 60       	ori	r18, 0x01	; 1
    3460:	fc 01       	movw	r30, r24
    3462:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer ON\n");
    3464:	81 ec       	ldi	r24, 0xC1	; 193
    3466:	90 e2       	ldi	r25, 0x20	; 32
    3468:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
	
}
    346c:	00 00       	nop
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	08 95       	ret

00003474 <buzz_off>:
void buzz_off(void)
{
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    347c:	80 e4       	ldi	r24, 0x40	; 64
    347e:	96 e0       	ldi	r25, 0x06	; 6
    3480:	20 e4       	ldi	r18, 0x40	; 64
    3482:	36 e0       	ldi	r19, 0x06	; 6
    3484:	f9 01       	movw	r30, r18
    3486:	21 81       	ldd	r18, Z+1	; 0x01
    3488:	21 60       	ori	r18, 0x01	; 1
    348a:	fc 01       	movw	r30, r24
    348c:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET &= 0b11111110;
    348e:	80 e4       	ldi	r24, 0x40	; 64
    3490:	96 e0       	ldi	r25, 0x06	; 6
    3492:	20 e4       	ldi	r18, 0x40	; 64
    3494:	36 e0       	ldi	r19, 0x06	; 6
    3496:	f9 01       	movw	r30, r18
    3498:	25 81       	ldd	r18, Z+5	; 0x05
    349a:	2e 7f       	andi	r18, 0xFE	; 254
    349c:	fc 01       	movw	r30, r24
    349e:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer OFF\n");
    34a0:	8b ec       	ldi	r24, 0xCB	; 203
    34a2:	90 e2       	ldi	r25, 0x20	; 32
    34a4:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
    34a8:	00 00       	nop
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	08 95       	ret

000034b0 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	9c e6       	ldi	r25, 0x6C	; 108
    34bc:	ac ed       	ldi	r26, 0xDC	; 220
    34be:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	1f 92       	push	r1
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    34d4:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    34d6:	ec df       	rcall	.-40     	; 0x34b0 <sysclk_get_main_hz>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	29 81       	ldd	r18, Y+1	; 0x01
    34de:	22 2f       	mov	r18, r18
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	04 c0       	rjmp	.+8      	; 0x34ec <sysclk_get_per4_hz+0x22>
    34e4:	b6 95       	lsr	r27
    34e6:	a7 95       	ror	r26
    34e8:	97 95       	ror	r25
    34ea:	87 95       	ror	r24
    34ec:	2a 95       	dec	r18
    34ee:	d2 f7       	brpl	.-12     	; 0x34e4 <sysclk_get_per4_hz+0x1a>
}
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0f 90       	pop	r0
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	08 95       	ret

000034fc <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    3504:	e2 df       	rcall	.-60     	; 0x34ca <sysclk_get_per4_hz>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	08 95       	ret

00003514 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    351c:	ef df       	rcall	.-34     	; 0x34fc <sysclk_get_per2_hz>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
}
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	df 91       	pop	r29
    3528:	cf 91       	pop	r28
    352a:	08 95       	ret

0000352c <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    3534:	ef df       	rcall	.-34     	; 0x3514 <sysclk_get_per_hz>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
}
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3544:	04 c0       	rjmp	.+8      	; 0x354e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3546:	61 50       	subi	r22, 0x01	; 1
    3548:	71 09       	sbc	r23, r1
    354a:	81 09       	sbc	r24, r1
    354c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    354e:	61 15       	cp	r22, r1
    3550:	71 05       	cpc	r23, r1
    3552:	81 05       	cpc	r24, r1
    3554:	91 05       	cpc	r25, r1
    3556:	b9 f7       	brne	.-18     	; 0x3546 <__portable_avr_delay_cycles+0x2>
    3558:	08 95       	ret

0000355a <spi_enable>:
/*! \brief Enables the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	1f 92       	push	r1
    3560:	1f 92       	push	r1
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_ENABLE_bm;
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	fc 01       	movw	r30, r24
    3570:	80 81       	ld	r24, Z
    3572:	28 2f       	mov	r18, r24
    3574:	20 64       	ori	r18, 0x40	; 64
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	fc 01       	movw	r30, r24
    357c:	20 83       	st	Z, r18
}
    357e:	00 00       	nop
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	08 95       	ret

0000358a <spi_init_pins>:

uint8_t commands [2] = {0x48, 0x58};
uint8_t read_buffer [2*3];
	
void spi_init_pins(void)
{
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
	ioport_configure_port_pin(&PORTC, PIN1_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    3592:	43 e0       	ldi	r20, 0x03	; 3
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	62 e0       	ldi	r22, 0x02	; 2
    3598:	80 e4       	ldi	r24, 0x40	; 64
    359a:	96 e0       	ldi	r25, 0x06	; 6
    359c:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ioport_configure_port_pin>
	
	ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_PULL_UP|IOPORT_DIR_INPUT);
    35a0:	40 e0       	ldi	r20, 0x00	; 0
    35a2:	58 e1       	ldi	r21, 0x18	; 24
    35a4:	60 e1       	ldi	r22, 0x10	; 16
    35a6:	80 e4       	ldi	r24, 0x40	; 64
    35a8:	96 e0       	ldi	r25, 0x06	; 6
    35aa:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    35ae:	43 e0       	ldi	r20, 0x03	; 3
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	60 e2       	ldi	r22, 0x20	; 32
    35b4:	80 e4       	ldi	r24, 0x40	; 64
    35b6:	96 e0       	ldi	r25, 0x06	; 6
    35b8:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
    35bc:	40 e0       	ldi	r20, 0x00	; 0
    35be:	50 e0       	ldi	r21, 0x00	; 0
    35c0:	60 e4       	ldi	r22, 0x40	; 64
    35c2:	80 e4       	ldi	r24, 0x40	; 64
    35c4:	96 e0       	ldi	r25, 0x06	; 6
    35c6:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    35ca:	43 e0       	ldi	r20, 0x03	; 3
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	60 e8       	ldi	r22, 0x80	; 128
    35d0:	80 e4       	ldi	r24, 0x40	; 64
    35d2:	96 e0       	ldi	r25, 0x06	; 6
    35d4:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ioport_configure_port_pin>
	
}
    35d8:	00 00       	nop
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	08 95       	ret

000035e0 <spi_init_module>:

void spi_init_module(void)
{
    35e0:	cf 92       	push	r12
    35e2:	df 92       	push	r13
    35e4:	ef 92       	push	r14
    35e6:	ff 92       	push	r15
    35e8:	0f 93       	push	r16
    35ea:	1f 93       	push	r17
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	1f 92       	push	r1
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
	spi_init_pins();
    35f6:	c9 df       	rcall	.-110    	; 0x358a <spi_init_pins>
	struct spi_device  spi_device_cong = {
    35f8:	81 e1       	ldi	r24, 0x11	; 17
    35fa:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
		
	spi_master_init(&MS5607_SPI_PORT);
    35fc:	80 ec       	ldi	r24, 0xC0	; 192
    35fe:	98 e0       	ldi	r25, 0x08	; 8
    3600:	0e 94 42 03 	call	0x684	; 0x684 <spi_master_init>
	spi_master_setup_device(&MS5607_SPI_PORT, &spi_device_cong, SPI_MODE_0, 1000000,0);
    3604:	c1 2c       	mov	r12, r1
    3606:	d1 2c       	mov	r13, r1
    3608:	76 01       	movw	r14, r12
    360a:	00 e4       	ldi	r16, 0x40	; 64
    360c:	12 e4       	ldi	r17, 0x42	; 66
    360e:	2f e0       	ldi	r18, 0x0F	; 15
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	ce 01       	movw	r24, r28
    3616:	01 96       	adiw	r24, 0x01	; 1
    3618:	bc 01       	movw	r22, r24
    361a:	80 ec       	ldi	r24, 0xC0	; 192
    361c:	98 e0       	ldi	r25, 0x08	; 8
    361e:	0e 94 77 03 	call	0x6ee	; 0x6ee <spi_master_setup_device>
	spi_enable(&MS5607_SPI_PORT);
    3622:	80 ec       	ldi	r24, 0xC0	; 192
    3624:	98 e0       	ldi	r25, 0x08	; 8
    3626:	99 df       	rcall	.-206    	; 0x355a <spi_enable>
	spi_write_packet(&MS5607_SPI_PORT, "0x1e", 1); //reset
    3628:	41 e0       	ldi	r20, 0x01	; 1
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	66 ed       	ldi	r22, 0xD6	; 214
    362e:	70 e2       	ldi	r23, 0x20	; 32
    3630:	80 ec       	ldi	r24, 0xC0	; 192
    3632:	98 e0       	ldi	r25, 0x08	; 8
    3634:	0e 94 c5 03 	call	0x78a	; 0x78a <spi_write_packet>
	prom_read();
    3638:	16 d0       	rcall	.+44     	; 0x3666 <prom_read>
	
	printf("spi init");
    363a:	8b ed       	ldi	r24, 0xDB	; 219
    363c:	90 e2       	ldi	r25, 0x20	; 32
    363e:	89 2f       	mov	r24, r25
    3640:	8f 93       	push	r24
    3642:	8b ed       	ldi	r24, 0xDB	; 219
    3644:	90 e2       	ldi	r25, 0x20	; 32
    3646:	8f 93       	push	r24
    3648:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
}
    3650:	00 00       	nop
    3652:	0f 90       	pop	r0
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	08 95       	ret

00003666 <prom_read>:

void prom_read(void)
{
    3666:	2f 92       	push	r2
    3668:	3f 92       	push	r3
    366a:	4f 92       	push	r4
    366c:	5f 92       	push	r5
    366e:	6f 92       	push	r6
    3670:	7f 92       	push	r7
    3672:	8f 92       	push	r8
    3674:	9f 92       	push	r9
    3676:	af 92       	push	r10
    3678:	bf 92       	push	r11
    367a:	cf 92       	push	r12
    367c:	df 92       	push	r13
    367e:	ef 92       	push	r14
    3680:	ff 92       	push	r15
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	a4 97       	sbiw	r28, 0x24	; 36
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	de bf       	out	0x3e, r29	; 62
	struct spi_device  spi_device_cong = {
    3694:	81 e1       	ldi	r24, 0x11	; 17
    3696:	8a 83       	std	Y+2, r24	; 0x02
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    3698:	ce 01       	movw	r24, r28
    369a:	02 96       	adiw	r24, 0x02	; 2
    369c:	bc 01       	movw	r22, r24
    369e:	80 ec       	ldi	r24, 0xC0	; 192
    36a0:	98 e0       	ldi	r25, 0x08	; 8
    36a2:	0e 94 3a 04 	call	0x874	; 0x874 <spi_select_device>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
    36a6:	86 e0       	ldi	r24, 0x06	; 6
    36a8:	ed e1       	ldi	r30, 0x1D	; 29
    36aa:	f0 e2       	ldi	r31, 0x20	; 32
    36ac:	de 01       	movw	r26, r28
    36ae:	13 96       	adiw	r26, 0x03	; 3
    36b0:	01 90       	ld	r0, Z+
    36b2:	0d 92       	st	X+, r0
    36b4:	8a 95       	dec	r24
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <prom_read+0x4a>
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    36b8:	19 82       	std	Y+1, r1	; 0x01
    36ba:	e5 c1       	rjmp	.+970    	; 0x3a86 <prom_read+0x420>
	{
		
		spi_write_packet(&MS5607_SPI_PORT, prom_commands_c[i], 1);
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	88 2f       	mov	r24, r24
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9e 01       	movw	r18, r28
    36c4:	2d 5f       	subi	r18, 0xFD	; 253
    36c6:	3f 4f       	sbci	r19, 0xFF	; 255
    36c8:	82 0f       	add	r24, r18
    36ca:	93 1f       	adc	r25, r19
    36cc:	fc 01       	movw	r30, r24
    36ce:	80 81       	ld	r24, Z
    36d0:	88 2f       	mov	r24, r24
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	41 e0       	ldi	r20, 0x01	; 1
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	bc 01       	movw	r22, r24
    36da:	80 ec       	ldi	r24, 0xC0	; 192
    36dc:	98 e0       	ldi	r25, 0x08	; 8
    36de:	0e 94 c5 03 	call	0x78a	; 0x78a <spi_write_packet>
		delay_ms(25);
    36e2:	24 df       	rcall	.-440    	; 0x352c <sysclk_get_cpu_hz>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8c 01       	movw	r16, r24
    36ea:	9d 01       	movw	r18, r26
    36ec:	40 e0       	ldi	r20, 0x00	; 0
    36ee:	50 e0       	ldi	r21, 0x00	; 0
    36f0:	ba 01       	movw	r22, r20
    36f2:	0d 8b       	std	Y+21, r16	; 0x15
    36f4:	1e 8b       	std	Y+22, r17	; 0x16
    36f6:	2f 8b       	std	Y+23, r18	; 0x17
    36f8:	38 8f       	std	Y+24, r19	; 0x18
    36fa:	49 8f       	std	Y+25, r20	; 0x19
    36fc:	5a 8f       	std	Y+26, r21	; 0x1a
    36fe:	6b 8f       	std	Y+27, r22	; 0x1b
    3700:	7c 8f       	std	Y+28, r23	; 0x1c
    3702:	2d 88       	ldd	r2, Y+21	; 0x15
    3704:	3e 88       	ldd	r3, Y+22	; 0x16
    3706:	4f 88       	ldd	r4, Y+23	; 0x17
    3708:	58 8c       	ldd	r5, Y+24	; 0x18
    370a:	69 8c       	ldd	r6, Y+25	; 0x19
    370c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    370e:	8b 8c       	ldd	r8, Y+27	; 0x1b
    3710:	9c 8c       	ldd	r9, Y+28	; 0x1c
    3712:	22 2d       	mov	r18, r2
    3714:	33 2d       	mov	r19, r3
    3716:	44 2d       	mov	r20, r4
    3718:	55 2d       	mov	r21, r5
    371a:	66 2d       	mov	r22, r6
    371c:	77 2d       	mov	r23, r7
    371e:	88 2d       	mov	r24, r8
    3720:	99 2d       	mov	r25, r9
    3722:	03 e0       	ldi	r16, 0x03	; 3
    3724:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    3728:	a2 2e       	mov	r10, r18
    372a:	b3 2e       	mov	r11, r19
    372c:	c4 2e       	mov	r12, r20
    372e:	d5 2e       	mov	r13, r21
    3730:	e6 2e       	mov	r14, r22
    3732:	f7 2e       	mov	r15, r23
    3734:	08 2f       	mov	r16, r24
    3736:	19 2f       	mov	r17, r25
    3738:	2a 2c       	mov	r2, r10
    373a:	3b 2c       	mov	r3, r11
    373c:	4c 2c       	mov	r4, r12
    373e:	5d 2c       	mov	r5, r13
    3740:	6e 2c       	mov	r6, r14
    3742:	7f 2c       	mov	r7, r15
    3744:	80 2e       	mov	r8, r16
    3746:	91 2e       	mov	r9, r17
    3748:	22 2d       	mov	r18, r2
    374a:	33 2d       	mov	r19, r3
    374c:	44 2d       	mov	r20, r4
    374e:	55 2d       	mov	r21, r5
    3750:	66 2d       	mov	r22, r6
    3752:	77 2d       	mov	r23, r7
    3754:	88 2d       	mov	r24, r8
    3756:	99 2d       	mov	r25, r9
    3758:	02 e0       	ldi	r16, 0x02	; 2
    375a:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    375e:	a2 2e       	mov	r10, r18
    3760:	b3 2e       	mov	r11, r19
    3762:	c4 2e       	mov	r12, r20
    3764:	d5 2e       	mov	r13, r21
    3766:	e6 2e       	mov	r14, r22
    3768:	f7 2e       	mov	r15, r23
    376a:	08 2f       	mov	r16, r24
    376c:	19 2f       	mov	r17, r25
    376e:	2a 2d       	mov	r18, r10
    3770:	3b 2d       	mov	r19, r11
    3772:	4c 2d       	mov	r20, r12
    3774:	5d 2d       	mov	r21, r13
    3776:	6e 2d       	mov	r22, r14
    3778:	7f 2d       	mov	r23, r15
    377a:	80 2f       	mov	r24, r16
    377c:	91 2f       	mov	r25, r17
    377e:	a2 2c       	mov	r10, r2
    3780:	b3 2c       	mov	r11, r3
    3782:	c4 2c       	mov	r12, r4
    3784:	d5 2c       	mov	r13, r5
    3786:	e6 2c       	mov	r14, r6
    3788:	f7 2c       	mov	r15, r7
    378a:	08 2d       	mov	r16, r8
    378c:	19 2d       	mov	r17, r9
    378e:	0e 94 df 58 	call	0xb1be	; 0xb1be <__subdi3>
    3792:	a2 2e       	mov	r10, r18
    3794:	b3 2e       	mov	r11, r19
    3796:	c4 2e       	mov	r12, r20
    3798:	d5 2e       	mov	r13, r21
    379a:	e6 2e       	mov	r14, r22
    379c:	f7 2e       	mov	r15, r23
    379e:	08 2f       	mov	r16, r24
    37a0:	19 2f       	mov	r17, r25
    37a2:	2a 2d       	mov	r18, r10
    37a4:	3b 2d       	mov	r19, r11
    37a6:	4c 2d       	mov	r20, r12
    37a8:	5d 2d       	mov	r21, r13
    37aa:	6e 2d       	mov	r22, r14
    37ac:	7f 2d       	mov	r23, r15
    37ae:	80 2f       	mov	r24, r16
    37b0:	91 2f       	mov	r25, r17
    37b2:	ad 88       	ldd	r10, Y+21	; 0x15
    37b4:	be 88       	ldd	r11, Y+22	; 0x16
    37b6:	cf 88       	ldd	r12, Y+23	; 0x17
    37b8:	d8 8c       	ldd	r13, Y+24	; 0x18
    37ba:	e9 8c       	ldd	r14, Y+25	; 0x19
    37bc:	fa 8c       	ldd	r15, Y+26	; 0x1a
    37be:	0b 8d       	ldd	r16, Y+27	; 0x1b
    37c0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    37c2:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    37c6:	22 2e       	mov	r2, r18
    37c8:	33 2e       	mov	r3, r19
    37ca:	44 2e       	mov	r4, r20
    37cc:	55 2e       	mov	r5, r21
    37ce:	66 2e       	mov	r6, r22
    37d0:	77 2e       	mov	r7, r23
    37d2:	88 2e       	mov	r8, r24
    37d4:	99 2e       	mov	r9, r25
    37d6:	0f 2e       	mov	r0, r31
    37d8:	f6 e0       	ldi	r31, 0x06	; 6
    37da:	af 2e       	mov	r10, r31
    37dc:	f0 2d       	mov	r31, r0
    37de:	b1 2c       	mov	r11, r1
    37e0:	c1 2c       	mov	r12, r1
    37e2:	d1 2c       	mov	r13, r1
    37e4:	e1 2c       	mov	r14, r1
    37e6:	f1 2c       	mov	r15, r1
    37e8:	00 e0       	ldi	r16, 0x00	; 0
    37ea:	10 e0       	ldi	r17, 0x00	; 0
    37ec:	22 2d       	mov	r18, r2
    37ee:	33 2d       	mov	r19, r3
    37f0:	44 2d       	mov	r20, r4
    37f2:	55 2d       	mov	r21, r5
    37f4:	66 2d       	mov	r22, r6
    37f6:	77 2d       	mov	r23, r7
    37f8:	88 2d       	mov	r24, r8
    37fa:	99 2d       	mov	r25, r9
    37fc:	0e 94 37 58 	call	0xb06e	; 0xb06e <__udivdi3>
    3800:	22 2e       	mov	r2, r18
    3802:	33 2e       	mov	r3, r19
    3804:	44 2e       	mov	r4, r20
    3806:	55 2e       	mov	r5, r21
    3808:	66 2e       	mov	r6, r22
    380a:	77 2e       	mov	r7, r23
    380c:	88 2e       	mov	r8, r24
    380e:	99 2e       	mov	r9, r25
    3810:	a2 2c       	mov	r10, r2
    3812:	b3 2c       	mov	r11, r3
    3814:	c4 2c       	mov	r12, r4
    3816:	d5 2c       	mov	r13, r5
    3818:	e6 2c       	mov	r14, r6
    381a:	f7 2c       	mov	r15, r7
    381c:	08 2d       	mov	r16, r8
    381e:	19 2d       	mov	r17, r9
    3820:	2a 2d       	mov	r18, r10
    3822:	3b 2d       	mov	r19, r11
    3824:	4c 2d       	mov	r20, r12
    3826:	5d 2d       	mov	r21, r13
    3828:	6e 2d       	mov	r22, r14
    382a:	7f 2d       	mov	r23, r15
    382c:	80 2f       	mov	r24, r16
    382e:	91 2f       	mov	r25, r17
    3830:	29 51       	subi	r18, 0x19	; 25
    3832:	3c 4f       	sbci	r19, 0xFC	; 252
    3834:	4f 4f       	sbci	r20, 0xFF	; 255
    3836:	5f 4f       	sbci	r21, 0xFF	; 255
    3838:	6f 4f       	sbci	r22, 0xFF	; 255
    383a:	7f 4f       	sbci	r23, 0xFF	; 255
    383c:	8f 4f       	sbci	r24, 0xFF	; 255
    383e:	9f 4f       	sbci	r25, 0xFF	; 255
    3840:	a2 2e       	mov	r10, r18
    3842:	b3 2e       	mov	r11, r19
    3844:	c4 2e       	mov	r12, r20
    3846:	d5 2e       	mov	r13, r21
    3848:	e6 2e       	mov	r14, r22
    384a:	f7 2e       	mov	r15, r23
    384c:	08 2f       	mov	r16, r24
    384e:	19 2f       	mov	r17, r25
    3850:	2a 2d       	mov	r18, r10
    3852:	3b 2d       	mov	r19, r11
    3854:	4c 2d       	mov	r20, r12
    3856:	5d 2d       	mov	r21, r13
    3858:	6e 2d       	mov	r22, r14
    385a:	7f 2d       	mov	r23, r15
    385c:	80 2f       	mov	r24, r16
    385e:	91 2f       	mov	r25, r17
    3860:	0e 94 89 52 	call	0xa512	; 0xa512 <__floatundisf>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a e7       	ldi	r20, 0x7A	; 122
    386e:	54 e4       	ldi	r21, 0x44	; 68
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 e6 51 	call	0xa3cc	; 0xa3cc <__fixunssfdi>
    3884:	a2 2e       	mov	r10, r18
    3886:	b3 2e       	mov	r11, r19
    3888:	c4 2e       	mov	r12, r20
    388a:	d5 2e       	mov	r13, r21
    388c:	e6 2e       	mov	r14, r22
    388e:	f7 2e       	mov	r15, r23
    3890:	08 2f       	mov	r16, r24
    3892:	19 2f       	mov	r17, r25
    3894:	d6 01       	movw	r26, r12
    3896:	c5 01       	movw	r24, r10
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	53 de       	rcall	.-858    	; 0x3544 <__portable_avr_delay_cycles>
		spi_read_packet(&MS5607_SPI_PORT, prom_c_read_buffer[i], 2);
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	88 2f       	mov	r24, r24
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9e 01       	movw	r18, r28
    38a6:	27 5f       	subi	r18, 0xF7	; 247
    38a8:	3f 4f       	sbci	r19, 0xFF	; 255
    38aa:	82 0f       	add	r24, r18
    38ac:	93 1f       	adc	r25, r19
    38ae:	fc 01       	movw	r30, r24
    38b0:	80 81       	ld	r24, Z
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	42 e0       	ldi	r20, 0x02	; 2
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	bc 01       	movw	r22, r24
    38bc:	80 ec       	ldi	r24, 0xC0	; 192
    38be:	98 e0       	ldi	r25, 0x08	; 8
    38c0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_read_packet>
		delay_ms(25);
    38c4:	33 de       	rcall	.-922    	; 0x352c <sysclk_get_cpu_hz>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8c 01       	movw	r16, r24
    38cc:	9d 01       	movw	r18, r26
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	ba 01       	movw	r22, r20
    38d4:	0d 8f       	std	Y+29, r16	; 0x1d
    38d6:	1e 8f       	std	Y+30, r17	; 0x1e
    38d8:	2f 8f       	std	Y+31, r18	; 0x1f
    38da:	38 a3       	std	Y+32, r19	; 0x20
    38dc:	49 a3       	std	Y+33, r20	; 0x21
    38de:	5a a3       	std	Y+34, r21	; 0x22
    38e0:	6b a3       	std	Y+35, r22	; 0x23
    38e2:	7c a3       	std	Y+36, r23	; 0x24
    38e4:	2d 8c       	ldd	r2, Y+29	; 0x1d
    38e6:	3e 8c       	ldd	r3, Y+30	; 0x1e
    38e8:	4f 8c       	ldd	r4, Y+31	; 0x1f
    38ea:	58 a0       	ldd	r5, Y+32	; 0x20
    38ec:	69 a0       	ldd	r6, Y+33	; 0x21
    38ee:	7a a0       	ldd	r7, Y+34	; 0x22
    38f0:	8b a0       	ldd	r8, Y+35	; 0x23
    38f2:	9c a0       	ldd	r9, Y+36	; 0x24
    38f4:	22 2d       	mov	r18, r2
    38f6:	33 2d       	mov	r19, r3
    38f8:	44 2d       	mov	r20, r4
    38fa:	55 2d       	mov	r21, r5
    38fc:	66 2d       	mov	r22, r6
    38fe:	77 2d       	mov	r23, r7
    3900:	88 2d       	mov	r24, r8
    3902:	99 2d       	mov	r25, r9
    3904:	03 e0       	ldi	r16, 0x03	; 3
    3906:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    390a:	a2 2e       	mov	r10, r18
    390c:	b3 2e       	mov	r11, r19
    390e:	c4 2e       	mov	r12, r20
    3910:	d5 2e       	mov	r13, r21
    3912:	e6 2e       	mov	r14, r22
    3914:	f7 2e       	mov	r15, r23
    3916:	08 2f       	mov	r16, r24
    3918:	19 2f       	mov	r17, r25
    391a:	2a 2c       	mov	r2, r10
    391c:	3b 2c       	mov	r3, r11
    391e:	4c 2c       	mov	r4, r12
    3920:	5d 2c       	mov	r5, r13
    3922:	6e 2c       	mov	r6, r14
    3924:	7f 2c       	mov	r7, r15
    3926:	80 2e       	mov	r8, r16
    3928:	91 2e       	mov	r9, r17
    392a:	22 2d       	mov	r18, r2
    392c:	33 2d       	mov	r19, r3
    392e:	44 2d       	mov	r20, r4
    3930:	55 2d       	mov	r21, r5
    3932:	66 2d       	mov	r22, r6
    3934:	77 2d       	mov	r23, r7
    3936:	88 2d       	mov	r24, r8
    3938:	99 2d       	mov	r25, r9
    393a:	02 e0       	ldi	r16, 0x02	; 2
    393c:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    3940:	a2 2e       	mov	r10, r18
    3942:	b3 2e       	mov	r11, r19
    3944:	c4 2e       	mov	r12, r20
    3946:	d5 2e       	mov	r13, r21
    3948:	e6 2e       	mov	r14, r22
    394a:	f7 2e       	mov	r15, r23
    394c:	08 2f       	mov	r16, r24
    394e:	19 2f       	mov	r17, r25
    3950:	2a 2d       	mov	r18, r10
    3952:	3b 2d       	mov	r19, r11
    3954:	4c 2d       	mov	r20, r12
    3956:	5d 2d       	mov	r21, r13
    3958:	6e 2d       	mov	r22, r14
    395a:	7f 2d       	mov	r23, r15
    395c:	80 2f       	mov	r24, r16
    395e:	91 2f       	mov	r25, r17
    3960:	a2 2c       	mov	r10, r2
    3962:	b3 2c       	mov	r11, r3
    3964:	c4 2c       	mov	r12, r4
    3966:	d5 2c       	mov	r13, r5
    3968:	e6 2c       	mov	r14, r6
    396a:	f7 2c       	mov	r15, r7
    396c:	08 2d       	mov	r16, r8
    396e:	19 2d       	mov	r17, r9
    3970:	0e 94 df 58 	call	0xb1be	; 0xb1be <__subdi3>
    3974:	a2 2e       	mov	r10, r18
    3976:	b3 2e       	mov	r11, r19
    3978:	c4 2e       	mov	r12, r20
    397a:	d5 2e       	mov	r13, r21
    397c:	e6 2e       	mov	r14, r22
    397e:	f7 2e       	mov	r15, r23
    3980:	08 2f       	mov	r16, r24
    3982:	19 2f       	mov	r17, r25
    3984:	2a 2d       	mov	r18, r10
    3986:	3b 2d       	mov	r19, r11
    3988:	4c 2d       	mov	r20, r12
    398a:	5d 2d       	mov	r21, r13
    398c:	6e 2d       	mov	r22, r14
    398e:	7f 2d       	mov	r23, r15
    3990:	80 2f       	mov	r24, r16
    3992:	91 2f       	mov	r25, r17
    3994:	ad 8c       	ldd	r10, Y+29	; 0x1d
    3996:	be 8c       	ldd	r11, Y+30	; 0x1e
    3998:	cf 8c       	ldd	r12, Y+31	; 0x1f
    399a:	d8 a0       	ldd	r13, Y+32	; 0x20
    399c:	e9 a0       	ldd	r14, Y+33	; 0x21
    399e:	fa a0       	ldd	r15, Y+34	; 0x22
    39a0:	0b a1       	ldd	r16, Y+35	; 0x23
    39a2:	1c a1       	ldd	r17, Y+36	; 0x24
    39a4:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    39a8:	22 2e       	mov	r2, r18
    39aa:	33 2e       	mov	r3, r19
    39ac:	44 2e       	mov	r4, r20
    39ae:	55 2e       	mov	r5, r21
    39b0:	66 2e       	mov	r6, r22
    39b2:	77 2e       	mov	r7, r23
    39b4:	88 2e       	mov	r8, r24
    39b6:	99 2e       	mov	r9, r25
    39b8:	0f 2e       	mov	r0, r31
    39ba:	f6 e0       	ldi	r31, 0x06	; 6
    39bc:	af 2e       	mov	r10, r31
    39be:	f0 2d       	mov	r31, r0
    39c0:	b1 2c       	mov	r11, r1
    39c2:	c1 2c       	mov	r12, r1
    39c4:	d1 2c       	mov	r13, r1
    39c6:	e1 2c       	mov	r14, r1
    39c8:	f1 2c       	mov	r15, r1
    39ca:	00 e0       	ldi	r16, 0x00	; 0
    39cc:	10 e0       	ldi	r17, 0x00	; 0
    39ce:	22 2d       	mov	r18, r2
    39d0:	33 2d       	mov	r19, r3
    39d2:	44 2d       	mov	r20, r4
    39d4:	55 2d       	mov	r21, r5
    39d6:	66 2d       	mov	r22, r6
    39d8:	77 2d       	mov	r23, r7
    39da:	88 2d       	mov	r24, r8
    39dc:	99 2d       	mov	r25, r9
    39de:	0e 94 37 58 	call	0xb06e	; 0xb06e <__udivdi3>
    39e2:	22 2e       	mov	r2, r18
    39e4:	33 2e       	mov	r3, r19
    39e6:	44 2e       	mov	r4, r20
    39e8:	55 2e       	mov	r5, r21
    39ea:	66 2e       	mov	r6, r22
    39ec:	77 2e       	mov	r7, r23
    39ee:	88 2e       	mov	r8, r24
    39f0:	99 2e       	mov	r9, r25
    39f2:	a2 2c       	mov	r10, r2
    39f4:	b3 2c       	mov	r11, r3
    39f6:	c4 2c       	mov	r12, r4
    39f8:	d5 2c       	mov	r13, r5
    39fa:	e6 2c       	mov	r14, r6
    39fc:	f7 2c       	mov	r15, r7
    39fe:	08 2d       	mov	r16, r8
    3a00:	19 2d       	mov	r17, r9
    3a02:	2a 2d       	mov	r18, r10
    3a04:	3b 2d       	mov	r19, r11
    3a06:	4c 2d       	mov	r20, r12
    3a08:	5d 2d       	mov	r21, r13
    3a0a:	6e 2d       	mov	r22, r14
    3a0c:	7f 2d       	mov	r23, r15
    3a0e:	80 2f       	mov	r24, r16
    3a10:	91 2f       	mov	r25, r17
    3a12:	29 51       	subi	r18, 0x19	; 25
    3a14:	3c 4f       	sbci	r19, 0xFC	; 252
    3a16:	4f 4f       	sbci	r20, 0xFF	; 255
    3a18:	5f 4f       	sbci	r21, 0xFF	; 255
    3a1a:	6f 4f       	sbci	r22, 0xFF	; 255
    3a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a20:	9f 4f       	sbci	r25, 0xFF	; 255
    3a22:	a2 2e       	mov	r10, r18
    3a24:	b3 2e       	mov	r11, r19
    3a26:	c4 2e       	mov	r12, r20
    3a28:	d5 2e       	mov	r13, r21
    3a2a:	e6 2e       	mov	r14, r22
    3a2c:	f7 2e       	mov	r15, r23
    3a2e:	08 2f       	mov	r16, r24
    3a30:	19 2f       	mov	r17, r25
    3a32:	2a 2d       	mov	r18, r10
    3a34:	3b 2d       	mov	r19, r11
    3a36:	4c 2d       	mov	r20, r12
    3a38:	5d 2d       	mov	r21, r13
    3a3a:	6e 2d       	mov	r22, r14
    3a3c:	7f 2d       	mov	r23, r15
    3a3e:	80 2f       	mov	r24, r16
    3a40:	91 2f       	mov	r25, r17
    3a42:	0e 94 89 52 	call	0xa512	; 0xa512 <__floatundisf>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	4a e7       	ldi	r20, 0x7A	; 122
    3a50:	54 e4       	ldi	r21, 0x44	; 68
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <__divsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	0e 94 e6 51 	call	0xa3cc	; 0xa3cc <__fixunssfdi>
    3a66:	a2 2e       	mov	r10, r18
    3a68:	b3 2e       	mov	r11, r19
    3a6a:	c4 2e       	mov	r12, r20
    3a6c:	d5 2e       	mov	r13, r21
    3a6e:	e6 2e       	mov	r14, r22
    3a70:	f7 2e       	mov	r15, r23
    3a72:	08 2f       	mov	r16, r24
    3a74:	19 2f       	mov	r17, r25
    3a76:	d6 01       	movw	r26, r12
    3a78:	c5 01       	movw	r24, r10
    3a7a:	bc 01       	movw	r22, r24
    3a7c:	cd 01       	movw	r24, r26
    3a7e:	62 dd       	rcall	.-1340   	; 0x3544 <__portable_avr_delay_cycles>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	8f 5f       	subi	r24, 0xFF	; 255
    3a84:	89 83       	std	Y+1, r24	; 0x01
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	87 30       	cpi	r24, 0x07	; 7
    3a8a:	08 f4       	brcc	.+2      	; 0x3a8e <prom_read+0x428>
    3a8c:	17 ce       	rjmp	.-978    	; 0x36bc <prom_read+0x56>
		
	}

	
	
	C1 = prom_c_read_buffer[0]<<8 |prom_c_read_buffer[1];
    3a8e:	89 85       	ldd	r24, Y+9	; 0x09
    3a90:	88 2f       	mov	r24, r24
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	38 2f       	mov	r19, r24
    3a96:	22 27       	eor	r18, r18
    3a98:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a9a:	88 2f       	mov	r24, r24
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	82 2b       	or	r24, r18
    3aa0:	93 2b       	or	r25, r19
    3aa2:	80 93 e8 27 	sts	0x27E8, r24	; 0x8027e8 <C1>
    3aa6:	90 93 e9 27 	sts	0x27E9, r25	; 0x8027e9 <C1+0x1>
	C2 = prom_c_read_buffer[2]<<8 |prom_c_read_buffer[3];
    3aaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    3aac:	88 2f       	mov	r24, r24
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	38 2f       	mov	r19, r24
    3ab2:	22 27       	eor	r18, r18
    3ab4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ab6:	88 2f       	mov	r24, r24
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	82 2b       	or	r24, r18
    3abc:	93 2b       	or	r25, r19
    3abe:	80 93 ec 27 	sts	0x27EC, r24	; 0x8027ec <C2>
    3ac2:	90 93 ed 27 	sts	0x27ED, r25	; 0x8027ed <C2+0x1>
	C3 = prom_c_read_buffer[4]<<8 |prom_c_read_buffer[5];
    3ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac8:	88 2f       	mov	r24, r24
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	38 2f       	mov	r19, r24
    3ace:	22 27       	eor	r18, r18
    3ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ad2:	88 2f       	mov	r24, r24
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	82 2b       	or	r24, r18
    3ad8:	93 2b       	or	r25, r19
    3ada:	80 93 ea 27 	sts	0x27EA, r24	; 0x8027ea <C3>
    3ade:	90 93 eb 27 	sts	0x27EB, r25	; 0x8027eb <C3+0x1>
	C4 = prom_c_read_buffer[6]<<8 |prom_c_read_buffer[7];
    3ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	38 2f       	mov	r19, r24
    3aea:	22 27       	eor	r18, r18
    3aec:	88 89       	ldd	r24, Y+16	; 0x10
    3aee:	88 2f       	mov	r24, r24
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	82 2b       	or	r24, r18
    3af4:	93 2b       	or	r25, r19
    3af6:	80 93 fc 27 	sts	0x27FC, r24	; 0x8027fc <C4>
    3afa:	90 93 fd 27 	sts	0x27FD, r25	; 0x8027fd <C4+0x1>
	C5 = prom_c_read_buffer[8]<<8 |prom_c_read_buffer[9];
    3afe:	89 89       	ldd	r24, Y+17	; 0x11
    3b00:	88 2f       	mov	r24, r24
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	38 2f       	mov	r19, r24
    3b06:	22 27       	eor	r18, r18
    3b08:	8a 89       	ldd	r24, Y+18	; 0x12
    3b0a:	88 2f       	mov	r24, r24
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	82 2b       	or	r24, r18
    3b10:	93 2b       	or	r25, r19
    3b12:	80 93 fa 27 	sts	0x27FA, r24	; 0x8027fa <C5>
    3b16:	90 93 fb 27 	sts	0x27FB, r25	; 0x8027fb <C5+0x1>
	C6 = prom_c_read_buffer[10]<<8 |prom_c_read_buffer[11];
    3b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	38 2f       	mov	r19, r24
    3b22:	22 27       	eor	r18, r18
    3b24:	8c 89       	ldd	r24, Y+20	; 0x14
    3b26:	88 2f       	mov	r24, r24
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	82 2b       	or	r24, r18
    3b2c:	93 2b       	or	r25, r19
    3b2e:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <C6>
    3b32:	90 93 ef 27 	sts	0x27EF, r25	; 0x8027ef <C6+0x1>
	
	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    3b36:	ce 01       	movw	r24, r28
    3b38:	02 96       	adiw	r24, 0x02	; 2
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	80 ec       	ldi	r24, 0xC0	; 192
    3b3e:	98 e0       	ldi	r25, 0x08	; 8
    3b40:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_deselect_device>
	

	
}
    3b44:	00 00       	nop
    3b46:	a4 96       	adiw	r28, 0x24	; 36
    3b48:	cd bf       	out	0x3d, r28	; 61
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	1f 91       	pop	r17
    3b52:	0f 91       	pop	r16
    3b54:	ff 90       	pop	r15
    3b56:	ef 90       	pop	r14
    3b58:	df 90       	pop	r13
    3b5a:	cf 90       	pop	r12
    3b5c:	bf 90       	pop	r11
    3b5e:	af 90       	pop	r10
    3b60:	9f 90       	pop	r9
    3b62:	8f 90       	pop	r8
    3b64:	7f 90       	pop	r7
    3b66:	6f 90       	pop	r6
    3b68:	5f 90       	pop	r5
    3b6a:	4f 90       	pop	r4
    3b6c:	3f 90       	pop	r3
    3b6e:	2f 90       	pop	r2
    3b70:	08 95       	ret

00003b72 <getPressure>:

int32_t getPressure(void)
{
    3b72:	2f 92       	push	r2
    3b74:	3f 92       	push	r3
    3b76:	4f 92       	push	r4
    3b78:	5f 92       	push	r5
    3b7a:	6f 92       	push	r6
    3b7c:	7f 92       	push	r7
    3b7e:	8f 92       	push	r8
    3b80:	9f 92       	push	r9
    3b82:	af 92       	push	r10
    3b84:	bf 92       	push	r11
    3b86:	cf 92       	push	r12
    3b88:	df 92       	push	r13
    3b8a:	ef 92       	push	r14
    3b8c:	ff 92       	push	r15
    3b8e:	0f 93       	push	r16
    3b90:	1f 93       	push	r17
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	c2 54       	subi	r28, 0x42	; 66
    3b9c:	d1 09       	sbc	r29, r1
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	de bf       	out	0x3e, r29	; 62

	struct spi_device  spi_device_cong = {
    3ba2:	81 e1       	ldi	r24, 0x11	; 17
    3ba4:	8a a3       	std	Y+34, r24	; 0x22
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	82 96       	adiw	r24, 0x22	; 34
    3baa:	bc 01       	movw	r22, r24
    3bac:	80 ec       	ldi	r24, 0xC0	; 192
    3bae:	98 e0       	ldi	r25, 0x08	; 8
    3bb0:	0e 94 3a 04 	call	0x874	; 0x874 <spi_select_device>

	for(uint8_t i = 0; i < sizeof(commands); i++)
    3bb4:	19 82       	std	Y+1, r1	; 0x01
    3bb6:	23 c0       	rjmp	.+70     	; 0x3bfe <getPressure+0x8c>
	{
		spi_write_packet(&MS5607_SPI_PORT, commands[i], 1);
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	88 2f       	mov	r24, r24
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	8a 5f       	subi	r24, 0xFA	; 250
    3bc0:	9f 4d       	sbci	r25, 0xDF	; 223
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	80 81       	ld	r24, Z
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	41 e0       	ldi	r20, 0x01	; 1
    3bcc:	50 e0       	ldi	r21, 0x00	; 0
    3bce:	bc 01       	movw	r22, r24
    3bd0:	80 ec       	ldi	r24, 0xC0	; 192
    3bd2:	98 e0       	ldi	r25, 0x08	; 8
    3bd4:	0e 94 c5 03 	call	0x78a	; 0x78a <spi_write_packet>
		spi_read_packet(&MS5607_SPI_PORT, read_buffer[i], 3);
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	8c 50       	subi	r24, 0x0C	; 12
    3be0:	98 4d       	sbci	r25, 0xD8	; 216
    3be2:	fc 01       	movw	r30, r24
    3be4:	80 81       	ld	r24, Z
    3be6:	88 2f       	mov	r24, r24
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	43 e0       	ldi	r20, 0x03	; 3
    3bec:	50 e0       	ldi	r21, 0x00	; 0
    3bee:	bc 01       	movw	r22, r24
    3bf0:	80 ec       	ldi	r24, 0xC0	; 192
    3bf2:	98 e0       	ldi	r25, 0x08	; 8
    3bf4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_read_packet>
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);

	for(uint8_t i = 0; i < sizeof(commands); i++)
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	8f 5f       	subi	r24, 0xFF	; 255
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	82 30       	cpi	r24, 0x02	; 2
    3c02:	d0 f2       	brcs	.-76     	; 0x3bb8 <getPressure+0x46>
		
	}
	
	

	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    3c04:	ce 01       	movw	r24, r28
    3c06:	82 96       	adiw	r24, 0x22	; 34
    3c08:	bc 01       	movw	r22, r24
    3c0a:	80 ec       	ldi	r24, 0xC0	; 192
    3c0c:	98 e0       	ldi	r25, 0x08	; 8
    3c0e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_deselect_device>
	uint32_t pressure_val = (uint32_t) read_buffer[0]<<16| read_buffer[1]<<8 |read_buffer[2];
    3c12:	80 91 f4 27 	lds	r24, 0x27F4	; 0x8027f4 <read_buffer>
    3c16:	88 2f       	mov	r24, r24
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	ac 01       	movw	r20, r24
    3c20:	33 27       	eor	r19, r19
    3c22:	22 27       	eor	r18, r18
    3c24:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <read_buffer+0x1>
    3c28:	88 2f       	mov	r24, r24
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	98 2f       	mov	r25, r24
    3c2e:	88 27       	eor	r24, r24
    3c30:	09 2e       	mov	r0, r25
    3c32:	00 0c       	add	r0, r0
    3c34:	aa 0b       	sbc	r26, r26
    3c36:	bb 0b       	sbc	r27, r27
    3c38:	28 2b       	or	r18, r24
    3c3a:	39 2b       	or	r19, r25
    3c3c:	4a 2b       	or	r20, r26
    3c3e:	5b 2b       	or	r21, r27
    3c40:	80 91 f6 27 	lds	r24, 0x27F6	; 0x8027f6 <read_buffer+0x2>
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	a0 e0       	ldi	r26, 0x00	; 0
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	82 2b       	or	r24, r18
    3c4e:	93 2b       	or	r25, r19
    3c50:	a4 2b       	or	r26, r20
    3c52:	b5 2b       	or	r27, r21
    3c54:	8a 83       	std	Y+2, r24	; 0x02
    3c56:	9b 83       	std	Y+3, r25	; 0x03
    3c58:	ac 83       	std	Y+4, r26	; 0x04
    3c5a:	bd 83       	std	Y+5, r27	; 0x05
	printf("%u\n",pressure_val);
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	8f 93       	push	r24
    3c60:	8c 81       	ldd	r24, Y+4	; 0x04
    3c62:	8f 93       	push	r24
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	8f 93       	push	r24
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	8f 93       	push	r24
    3c6c:	8d eb       	ldi	r24, 0xBD	; 189
    3c6e:	90 e2       	ldi	r25, 0x20	; 32
    3c70:	89 2f       	mov	r24, r25
    3c72:	8f 93       	push	r24
    3c74:	8d eb       	ldi	r24, 0xBD	; 189
    3c76:	90 e2       	ldi	r25, 0x20	; 32
    3c78:	8f 93       	push	r24
    3c7a:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
	
	D1 = (uint32_t) read_buffer[0]<<16| read_buffer[1]<<8 |read_buffer[2];
    3c8a:	80 91 f4 27 	lds	r24, 0x27F4	; 0x8027f4 <read_buffer>
    3c8e:	88 2f       	mov	r24, r24
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	a0 e0       	ldi	r26, 0x00	; 0
    3c94:	b0 e0       	ldi	r27, 0x00	; 0
    3c96:	ac 01       	movw	r20, r24
    3c98:	33 27       	eor	r19, r19
    3c9a:	22 27       	eor	r18, r18
    3c9c:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <read_buffer+0x1>
    3ca0:	88 2f       	mov	r24, r24
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	98 2f       	mov	r25, r24
    3ca6:	88 27       	eor	r24, r24
    3ca8:	09 2e       	mov	r0, r25
    3caa:	00 0c       	add	r0, r0
    3cac:	aa 0b       	sbc	r26, r26
    3cae:	bb 0b       	sbc	r27, r27
    3cb0:	28 2b       	or	r18, r24
    3cb2:	39 2b       	or	r19, r25
    3cb4:	4a 2b       	or	r20, r26
    3cb6:	5b 2b       	or	r21, r27
    3cb8:	80 91 f6 27 	lds	r24, 0x27F6	; 0x8027f6 <read_buffer+0x2>
    3cbc:	88 2f       	mov	r24, r24
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	a0 e0       	ldi	r26, 0x00	; 0
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	82 2b       	or	r24, r18
    3cc6:	93 2b       	or	r25, r19
    3cc8:	a4 2b       	or	r26, r20
    3cca:	b5 2b       	or	r27, r21
    3ccc:	80 93 fe 27 	sts	0x27FE, r24	; 0x8027fe <D1>
    3cd0:	90 93 ff 27 	sts	0x27FF, r25	; 0x8027ff <D1+0x1>
    3cd4:	a0 93 00 28 	sts	0x2800, r26	; 0x802800 <D1+0x2>
    3cd8:	b0 93 01 28 	sts	0x2801, r27	; 0x802801 <D1+0x3>
	D2 = (uint32_t)  read_buffer[3]<<16| read_buffer[4]<<8 |read_buffer[5];
    3cdc:	80 91 f7 27 	lds	r24, 0x27F7	; 0x8027f7 <read_buffer+0x3>
    3ce0:	88 2f       	mov	r24, r24
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	a0 e0       	ldi	r26, 0x00	; 0
    3ce6:	b0 e0       	ldi	r27, 0x00	; 0
    3ce8:	ac 01       	movw	r20, r24
    3cea:	33 27       	eor	r19, r19
    3cec:	22 27       	eor	r18, r18
    3cee:	80 91 f8 27 	lds	r24, 0x27F8	; 0x8027f8 <read_buffer+0x4>
    3cf2:	88 2f       	mov	r24, r24
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	98 2f       	mov	r25, r24
    3cf8:	88 27       	eor	r24, r24
    3cfa:	09 2e       	mov	r0, r25
    3cfc:	00 0c       	add	r0, r0
    3cfe:	aa 0b       	sbc	r26, r26
    3d00:	bb 0b       	sbc	r27, r27
    3d02:	28 2b       	or	r18, r24
    3d04:	39 2b       	or	r19, r25
    3d06:	4a 2b       	or	r20, r26
    3d08:	5b 2b       	or	r21, r27
    3d0a:	80 91 f9 27 	lds	r24, 0x27F9	; 0x8027f9 <read_buffer+0x5>
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	a0 e0       	ldi	r26, 0x00	; 0
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	82 2b       	or	r24, r18
    3d18:	93 2b       	or	r25, r19
    3d1a:	a4 2b       	or	r26, r20
    3d1c:	b5 2b       	or	r27, r21
    3d1e:	80 93 f0 27 	sts	0x27F0, r24	; 0x8027f0 <D2>
    3d22:	90 93 f1 27 	sts	0x27F1, r25	; 0x8027f1 <D2+0x1>
    3d26:	a0 93 f2 27 	sts	0x27F2, r26	; 0x8027f2 <D2+0x2>
    3d2a:	b0 93 f3 27 	sts	0x27F3, r27	; 0x8027f3 <D2+0x3>
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
    3d2e:	20 91 f0 27 	lds	r18, 0x27F0	; 0x8027f0 <D2>
    3d32:	30 91 f1 27 	lds	r19, 0x27F1	; 0x8027f1 <D2+0x1>
    3d36:	40 91 f2 27 	lds	r20, 0x27F2	; 0x8027f2 <D2+0x2>
    3d3a:	50 91 f3 27 	lds	r21, 0x27F3	; 0x8027f3 <D2+0x3>
    3d3e:	80 91 fa 27 	lds	r24, 0x27FA	; 0x8027fa <C5>
    3d42:	90 91 fb 27 	lds	r25, 0x27FB	; 0x8027fb <C5+0x1>
    3d46:	cc 01       	movw	r24, r24
    3d48:	a0 e0       	ldi	r26, 0x00	; 0
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	ba 2f       	mov	r27, r26
    3d4e:	a9 2f       	mov	r26, r25
    3d50:	98 2f       	mov	r25, r24
    3d52:	88 27       	eor	r24, r24
    3d54:	79 01       	movw	r14, r18
    3d56:	8a 01       	movw	r16, r20
    3d58:	e8 1a       	sub	r14, r24
    3d5a:	f9 0a       	sbc	r15, r25
    3d5c:	0a 0b       	sbc	r16, r26
    3d5e:	1b 0b       	sbc	r17, r27
    3d60:	d8 01       	movw	r26, r16
    3d62:	c7 01       	movw	r24, r14
    3d64:	8e 83       	std	Y+6, r24	; 0x06
    3d66:	9f 83       	std	Y+7, r25	; 0x07
    3d68:	a8 87       	std	Y+8, r26	; 0x08
    3d6a:	b9 87       	std	Y+9, r27	; 0x09
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    3d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    3d6e:	9f 81       	ldd	r25, Y+7	; 0x07
    3d70:	a8 85       	ldd	r26, Y+8	; 0x08
    3d72:	b9 85       	ldd	r27, Y+9	; 0x09
    3d74:	1c 01       	movw	r2, r24
    3d76:	2d 01       	movw	r4, r26
    3d78:	bb 0f       	add	r27, r27
    3d7a:	88 0b       	sbc	r24, r24
    3d7c:	98 2f       	mov	r25, r24
    3d7e:	dc 01       	movw	r26, r24
    3d80:	68 2e       	mov	r6, r24
    3d82:	78 2e       	mov	r7, r24
    3d84:	88 2e       	mov	r8, r24
    3d86:	98 2e       	mov	r9, r24
    3d88:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <C6>
    3d8c:	90 91 ef 27 	lds	r25, 0x27EF	; 0x8027ef <C6+0x1>
    3d90:	9c 01       	movw	r18, r24
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	60 e0       	ldi	r22, 0x00	; 0
    3d98:	70 e0       	ldi	r23, 0x00	; 0
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	a2 2e       	mov	r10, r18
    3d9e:	b3 2e       	mov	r11, r19
    3da0:	c4 2e       	mov	r12, r20
    3da2:	d5 2e       	mov	r13, r21
    3da4:	e6 2e       	mov	r14, r22
    3da6:	f7 2e       	mov	r15, r23
    3da8:	08 2f       	mov	r16, r24
    3daa:	19 2f       	mov	r17, r25
    3dac:	22 2d       	mov	r18, r2
    3dae:	33 2d       	mov	r19, r3
    3db0:	44 2d       	mov	r20, r4
    3db2:	55 2d       	mov	r21, r5
    3db4:	66 2d       	mov	r22, r6
    3db6:	77 2d       	mov	r23, r7
    3db8:	88 2d       	mov	r24, r8
    3dba:	99 2d       	mov	r25, r9
    3dbc:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <__muldi3>
    3dc0:	a2 2e       	mov	r10, r18
    3dc2:	b3 2e       	mov	r11, r19
    3dc4:	c4 2e       	mov	r12, r20
    3dc6:	d5 2e       	mov	r13, r21
    3dc8:	e6 2e       	mov	r14, r22
    3dca:	f7 2e       	mov	r15, r23
    3dcc:	08 2f       	mov	r16, r24
    3dce:	19 2f       	mov	r17, r25
    3dd0:	2a 2d       	mov	r18, r10
    3dd2:	3b 2d       	mov	r19, r11
    3dd4:	4c 2d       	mov	r20, r12
    3dd6:	5d 2d       	mov	r21, r13
    3dd8:	6e 2d       	mov	r22, r14
    3dda:	7f 2d       	mov	r23, r15
    3ddc:	80 2f       	mov	r24, r16
    3dde:	91 2f       	mov	r25, r17
    3de0:	a2 2e       	mov	r10, r18
    3de2:	b3 2e       	mov	r11, r19
    3de4:	c4 2e       	mov	r12, r20
    3de6:	d5 2e       	mov	r13, r21
    3de8:	e6 2e       	mov	r14, r22
    3dea:	f7 2e       	mov	r15, r23
    3dec:	08 2f       	mov	r16, r24
    3dee:	19 2f       	mov	r17, r25
    3df0:	2a 2d       	mov	r18, r10
    3df2:	3b 2d       	mov	r19, r11
    3df4:	4c 2d       	mov	r20, r12
    3df6:	5d 2d       	mov	r21, r13
    3df8:	6e 2d       	mov	r22, r14
    3dfa:	7f 2d       	mov	r23, r15
    3dfc:	80 2f       	mov	r24, r16
    3dfe:	91 2f       	mov	r25, r17
    3e00:	a0 e0       	ldi	r26, 0x00	; 0
    3e02:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__cmpdi2_s8>
    3e06:	04 f5       	brge	.+64     	; 0x3e48 <getPressure+0x2d6>
    3e08:	2a 2d       	mov	r18, r10
    3e0a:	3b 2d       	mov	r19, r11
    3e0c:	4c 2d       	mov	r20, r12
    3e0e:	5d 2d       	mov	r21, r13
    3e10:	6e 2d       	mov	r22, r14
    3e12:	7f 2d       	mov	r23, r15
    3e14:	80 2f       	mov	r24, r16
    3e16:	91 2f       	mov	r25, r17
    3e18:	21 50       	subi	r18, 0x01	; 1
    3e1a:	31 09       	sbc	r19, r1
    3e1c:	40 48       	sbci	r20, 0x80	; 128
    3e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e20:	6f 4f       	sbci	r22, 0xFF	; 255
    3e22:	7f 4f       	sbci	r23, 0xFF	; 255
    3e24:	8f 4f       	sbci	r24, 0xFF	; 255
    3e26:	9f 4f       	sbci	r25, 0xFF	; 255
    3e28:	22 2e       	mov	r2, r18
    3e2a:	33 2e       	mov	r3, r19
    3e2c:	44 2e       	mov	r4, r20
    3e2e:	55 2e       	mov	r5, r21
    3e30:	66 2e       	mov	r6, r22
    3e32:	77 2e       	mov	r7, r23
    3e34:	88 2e       	mov	r8, r24
    3e36:	99 2e       	mov	r9, r25
    3e38:	a2 2c       	mov	r10, r2
    3e3a:	b3 2c       	mov	r11, r3
    3e3c:	c4 2c       	mov	r12, r4
    3e3e:	d5 2c       	mov	r13, r5
    3e40:	e6 2c       	mov	r14, r6
    3e42:	f7 2c       	mov	r15, r7
    3e44:	08 2d       	mov	r16, r8
    3e46:	19 2d       	mov	r17, r9
    3e48:	2a 2d       	mov	r18, r10
    3e4a:	3b 2d       	mov	r19, r11
    3e4c:	4c 2d       	mov	r20, r12
    3e4e:	5d 2d       	mov	r21, r13
    3e50:	6e 2d       	mov	r22, r14
    3e52:	7f 2d       	mov	r23, r15
    3e54:	80 2f       	mov	r24, r16
    3e56:	91 2f       	mov	r25, r17
    3e58:	07 e1       	ldi	r16, 0x17	; 23
    3e5a:	0e 94 ac 58 	call	0xb158	; 0xb158 <__ashrdi3>
    3e5e:	a2 2e       	mov	r10, r18
    3e60:	b3 2e       	mov	r11, r19
    3e62:	c4 2e       	mov	r12, r20
    3e64:	d5 2e       	mov	r13, r21
    3e66:	e6 2e       	mov	r14, r22
    3e68:	f7 2e       	mov	r15, r23
    3e6a:	08 2f       	mov	r16, r24
    3e6c:	19 2f       	mov	r17, r25
    3e6e:	2a 2d       	mov	r18, r10
    3e70:	3b 2d       	mov	r19, r11
    3e72:	4c 2d       	mov	r20, r12
    3e74:	5d 2d       	mov	r21, r13
    3e76:	6e 2d       	mov	r22, r14
    3e78:	7f 2d       	mov	r23, r15
    3e7a:	80 2f       	mov	r24, r16
    3e7c:	91 2f       	mov	r25, r17
    3e7e:	da 01       	movw	r26, r20
    3e80:	c9 01       	movw	r24, r18
    3e82:	80 53       	subi	r24, 0x30	; 48
    3e84:	98 4f       	sbci	r25, 0xF8	; 248
    3e86:	af 4f       	sbci	r26, 0xFF	; 255
    3e88:	bf 4f       	sbci	r27, 0xFF	; 255
    3e8a:	8a 87       	std	Y+10, r24	; 0x0a
    3e8c:	9b 87       	std	Y+11, r25	; 0x0b
    3e8e:	ac 87       	std	Y+12, r26	; 0x0c
    3e90:	bd 87       	std	Y+13, r27	; 0x0d

	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
    3e92:	80 91 ec 27 	lds	r24, 0x27EC	; 0x8027ec <C2>
    3e96:	90 91 ed 27 	lds	r25, 0x27ED	; 0x8027ed <C2+0x1>
    3e9a:	5c 01       	movw	r10, r24
    3e9c:	c1 2c       	mov	r12, r1
    3e9e:	d1 2c       	mov	r13, r1
    3ea0:	e1 2c       	mov	r14, r1
    3ea2:	f1 2c       	mov	r15, r1
    3ea4:	87 01       	movw	r16, r14
    3ea6:	2a 2d       	mov	r18, r10
    3ea8:	3b 2d       	mov	r19, r11
    3eaa:	4c 2d       	mov	r20, r12
    3eac:	5d 2d       	mov	r21, r13
    3eae:	6e 2d       	mov	r22, r14
    3eb0:	7f 2d       	mov	r23, r15
    3eb2:	80 2f       	mov	r24, r16
    3eb4:	91 2f       	mov	r25, r17
    3eb6:	01 e1       	ldi	r16, 0x11	; 17
    3eb8:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    3ebc:	2b a3       	std	Y+35, r18	; 0x23
    3ebe:	3c a3       	std	Y+36, r19	; 0x24
    3ec0:	4d a3       	std	Y+37, r20	; 0x25
    3ec2:	5e a3       	std	Y+38, r21	; 0x26
    3ec4:	6f a3       	std	Y+39, r22	; 0x27
    3ec6:	78 a7       	std	Y+40, r23	; 0x28
    3ec8:	89 a7       	std	Y+41, r24	; 0x29
    3eca:	9a a7       	std	Y+42, r25	; 0x2a
    3ecc:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <C4>
    3ed0:	90 91 fd 27 	lds	r25, 0x27FD	; 0x8027fd <C4+0x1>
    3ed4:	1c 01       	movw	r2, r24
    3ed6:	41 2c       	mov	r4, r1
    3ed8:	51 2c       	mov	r5, r1
    3eda:	61 2c       	mov	r6, r1
    3edc:	71 2c       	mov	r7, r1
    3ede:	43 01       	movw	r8, r6
    3ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ee4:	a8 85       	ldd	r26, Y+8	; 0x08
    3ee6:	b9 85       	ldd	r27, Y+9	; 0x09
    3ee8:	8b a7       	std	Y+43, r24	; 0x2b
    3eea:	9c a7       	std	Y+44, r25	; 0x2c
    3eec:	ad a7       	std	Y+45, r26	; 0x2d
    3eee:	be a7       	std	Y+46, r27	; 0x2e
    3ef0:	bb 0f       	add	r27, r27
    3ef2:	88 0b       	sbc	r24, r24
    3ef4:	98 2f       	mov	r25, r24
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	8f a7       	std	Y+47, r24	; 0x2f
    3efa:	88 ab       	std	Y+48, r24	; 0x30
    3efc:	89 ab       	std	Y+49, r24	; 0x31
    3efe:	8a ab       	std	Y+50, r24	; 0x32
    3f00:	ab a4       	ldd	r10, Y+43	; 0x2b
    3f02:	bc a4       	ldd	r11, Y+44	; 0x2c
    3f04:	cd a4       	ldd	r12, Y+45	; 0x2d
    3f06:	de a4       	ldd	r13, Y+46	; 0x2e
    3f08:	ef a4       	ldd	r14, Y+47	; 0x2f
    3f0a:	f8 a8       	ldd	r15, Y+48	; 0x30
    3f0c:	09 a9       	ldd	r16, Y+49	; 0x31
    3f0e:	1a a9       	ldd	r17, Y+50	; 0x32
    3f10:	22 2d       	mov	r18, r2
    3f12:	33 2d       	mov	r19, r3
    3f14:	44 2d       	mov	r20, r4
    3f16:	55 2d       	mov	r21, r5
    3f18:	66 2d       	mov	r22, r6
    3f1a:	77 2d       	mov	r23, r7
    3f1c:	88 2d       	mov	r24, r8
    3f1e:	99 2d       	mov	r25, r9
    3f20:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <__muldi3>
    3f24:	a2 2e       	mov	r10, r18
    3f26:	b3 2e       	mov	r11, r19
    3f28:	c4 2e       	mov	r12, r20
    3f2a:	d5 2e       	mov	r13, r21
    3f2c:	e6 2e       	mov	r14, r22
    3f2e:	f7 2e       	mov	r15, r23
    3f30:	08 2f       	mov	r16, r24
    3f32:	19 2f       	mov	r17, r25
    3f34:	2a 2d       	mov	r18, r10
    3f36:	3b 2d       	mov	r19, r11
    3f38:	4c 2d       	mov	r20, r12
    3f3a:	5d 2d       	mov	r21, r13
    3f3c:	6e 2d       	mov	r22, r14
    3f3e:	7f 2d       	mov	r23, r15
    3f40:	80 2f       	mov	r24, r16
    3f42:	91 2f       	mov	r25, r17
    3f44:	a2 2e       	mov	r10, r18
    3f46:	b3 2e       	mov	r11, r19
    3f48:	c4 2e       	mov	r12, r20
    3f4a:	d5 2e       	mov	r13, r21
    3f4c:	e6 2e       	mov	r14, r22
    3f4e:	f7 2e       	mov	r15, r23
    3f50:	08 2f       	mov	r16, r24
    3f52:	19 2f       	mov	r17, r25
    3f54:	2a 2d       	mov	r18, r10
    3f56:	3b 2d       	mov	r19, r11
    3f58:	4c 2d       	mov	r20, r12
    3f5a:	5d 2d       	mov	r21, r13
    3f5c:	6e 2d       	mov	r22, r14
    3f5e:	7f 2d       	mov	r23, r15
    3f60:	80 2f       	mov	r24, r16
    3f62:	91 2f       	mov	r25, r17
    3f64:	a0 e0       	ldi	r26, 0x00	; 0
    3f66:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__cmpdi2_s8>
    3f6a:	dc f4       	brge	.+54     	; 0x3fa2 <getPressure+0x430>
    3f6c:	2a 2d       	mov	r18, r10
    3f6e:	3b 2d       	mov	r19, r11
    3f70:	4c 2d       	mov	r20, r12
    3f72:	5d 2d       	mov	r21, r13
    3f74:	6e 2d       	mov	r22, r14
    3f76:	7f 2d       	mov	r23, r15
    3f78:	80 2f       	mov	r24, r16
    3f7a:	91 2f       	mov	r25, r17
    3f7c:	af e3       	ldi	r26, 0x3F	; 63
    3f7e:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <__adddi3_s8>
    3f82:	22 2e       	mov	r2, r18
    3f84:	33 2e       	mov	r3, r19
    3f86:	44 2e       	mov	r4, r20
    3f88:	55 2e       	mov	r5, r21
    3f8a:	66 2e       	mov	r6, r22
    3f8c:	77 2e       	mov	r7, r23
    3f8e:	88 2e       	mov	r8, r24
    3f90:	99 2e       	mov	r9, r25
    3f92:	a2 2c       	mov	r10, r2
    3f94:	b3 2c       	mov	r11, r3
    3f96:	c4 2c       	mov	r12, r4
    3f98:	d5 2c       	mov	r13, r5
    3f9a:	e6 2c       	mov	r14, r6
    3f9c:	f7 2c       	mov	r15, r7
    3f9e:	08 2d       	mov	r16, r8
    3fa0:	19 2d       	mov	r17, r9
    3fa2:	2a 2d       	mov	r18, r10
    3fa4:	3b 2d       	mov	r19, r11
    3fa6:	4c 2d       	mov	r20, r12
    3fa8:	5d 2d       	mov	r21, r13
    3faa:	6e 2d       	mov	r22, r14
    3fac:	7f 2d       	mov	r23, r15
    3fae:	80 2f       	mov	r24, r16
    3fb0:	91 2f       	mov	r25, r17
    3fb2:	06 e0       	ldi	r16, 0x06	; 6
    3fb4:	0e 94 ac 58 	call	0xb158	; 0xb158 <__ashrdi3>
    3fb8:	a2 2e       	mov	r10, r18
    3fba:	b3 2e       	mov	r11, r19
    3fbc:	c4 2e       	mov	r12, r20
    3fbe:	d5 2e       	mov	r13, r21
    3fc0:	e6 2e       	mov	r14, r22
    3fc2:	f7 2e       	mov	r15, r23
    3fc4:	08 2f       	mov	r16, r24
    3fc6:	19 2f       	mov	r17, r25
    3fc8:	2a 2c       	mov	r2, r10
    3fca:	3b 2c       	mov	r3, r11
    3fcc:	4c 2c       	mov	r4, r12
    3fce:	5d 2c       	mov	r5, r13
    3fd0:	6e 2c       	mov	r6, r14
    3fd2:	7f 2c       	mov	r7, r15
    3fd4:	80 2e       	mov	r8, r16
    3fd6:	91 2e       	mov	r9, r17
    3fd8:	2b a1       	ldd	r18, Y+35	; 0x23
    3fda:	3c a1       	ldd	r19, Y+36	; 0x24
    3fdc:	4d a1       	ldd	r20, Y+37	; 0x25
    3fde:	5e a1       	ldd	r21, Y+38	; 0x26
    3fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe8:	a2 2c       	mov	r10, r2
    3fea:	b3 2c       	mov	r11, r3
    3fec:	c4 2c       	mov	r12, r4
    3fee:	d5 2c       	mov	r13, r5
    3ff0:	e6 2c       	mov	r14, r6
    3ff2:	f7 2c       	mov	r15, r7
    3ff4:	08 2d       	mov	r16, r8
    3ff6:	19 2d       	mov	r17, r9
    3ff8:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    3ffc:	2e 87       	std	Y+14, r18	; 0x0e
    3ffe:	3f 87       	std	Y+15, r19	; 0x0f
    4000:	48 8b       	std	Y+16, r20	; 0x10
    4002:	59 8b       	std	Y+17, r21	; 0x11
    4004:	6a 8b       	std	Y+18, r22	; 0x12
    4006:	7b 8b       	std	Y+19, r23	; 0x13
    4008:	8c 8b       	std	Y+20, r24	; 0x14
    400a:	9d 8b       	std	Y+21, r25	; 0x15
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128;
    400c:	80 91 e8 27 	lds	r24, 0x27E8	; 0x8027e8 <C1>
    4010:	90 91 e9 27 	lds	r25, 0x27E9	; 0x8027e9 <C1+0x1>
    4014:	5c 01       	movw	r10, r24
    4016:	c1 2c       	mov	r12, r1
    4018:	d1 2c       	mov	r13, r1
    401a:	e1 2c       	mov	r14, r1
    401c:	f1 2c       	mov	r15, r1
    401e:	87 01       	movw	r16, r14
    4020:	2a 2d       	mov	r18, r10
    4022:	3b 2d       	mov	r19, r11
    4024:	4c 2d       	mov	r20, r12
    4026:	5d 2d       	mov	r21, r13
    4028:	6e 2d       	mov	r22, r14
    402a:	7f 2d       	mov	r23, r15
    402c:	80 2f       	mov	r24, r16
    402e:	91 2f       	mov	r25, r17
    4030:	00 e1       	ldi	r16, 0x10	; 16
    4032:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    4036:	2b ab       	std	Y+51, r18	; 0x33
    4038:	3c ab       	std	Y+52, r19	; 0x34
    403a:	4d ab       	std	Y+53, r20	; 0x35
    403c:	5e ab       	std	Y+54, r21	; 0x36
    403e:	6f ab       	std	Y+55, r22	; 0x37
    4040:	78 af       	std	Y+56, r23	; 0x38
    4042:	89 af       	std	Y+57, r24	; 0x39
    4044:	9a af       	std	Y+58, r25	; 0x3a
    4046:	80 91 ea 27 	lds	r24, 0x27EA	; 0x8027ea <C3>
    404a:	90 91 eb 27 	lds	r25, 0x27EB	; 0x8027eb <C3+0x1>
    404e:	1c 01       	movw	r2, r24
    4050:	41 2c       	mov	r4, r1
    4052:	51 2c       	mov	r5, r1
    4054:	61 2c       	mov	r6, r1
    4056:	71 2c       	mov	r7, r1
    4058:	43 01       	movw	r8, r6
    405a:	8e 81       	ldd	r24, Y+6	; 0x06
    405c:	9f 81       	ldd	r25, Y+7	; 0x07
    405e:	a8 85       	ldd	r26, Y+8	; 0x08
    4060:	b9 85       	ldd	r27, Y+9	; 0x09
    4062:	8b af       	std	Y+59, r24	; 0x3b
    4064:	9c af       	std	Y+60, r25	; 0x3c
    4066:	ad af       	std	Y+61, r26	; 0x3d
    4068:	be af       	std	Y+62, r27	; 0x3e
    406a:	bb 0f       	add	r27, r27
    406c:	88 0b       	sbc	r24, r24
    406e:	98 2f       	mov	r25, r24
    4070:	dc 01       	movw	r26, r24
    4072:	8f af       	std	Y+63, r24	; 0x3f
    4074:	21 96       	adiw	r28, 0x01	; 1
    4076:	8f af       	std	Y+63, r24	; 0x3f
    4078:	21 97       	sbiw	r28, 0x01	; 1
    407a:	22 96       	adiw	r28, 0x02	; 2
    407c:	8f af       	std	Y+63, r24	; 0x3f
    407e:	22 97       	sbiw	r28, 0x02	; 2
    4080:	23 96       	adiw	r28, 0x03	; 3
    4082:	8f af       	std	Y+63, r24	; 0x3f
    4084:	23 97       	sbiw	r28, 0x03	; 3
    4086:	ab ac       	ldd	r10, Y+59	; 0x3b
    4088:	bc ac       	ldd	r11, Y+60	; 0x3c
    408a:	cd ac       	ldd	r12, Y+61	; 0x3d
    408c:	de ac       	ldd	r13, Y+62	; 0x3e
    408e:	ef ac       	ldd	r14, Y+63	; 0x3f
    4090:	21 96       	adiw	r28, 0x01	; 1
    4092:	ff ac       	ldd	r15, Y+63	; 0x3f
    4094:	21 97       	sbiw	r28, 0x01	; 1
    4096:	22 96       	adiw	r28, 0x02	; 2
    4098:	0f ad       	ldd	r16, Y+63	; 0x3f
    409a:	22 97       	sbiw	r28, 0x02	; 2
    409c:	23 96       	adiw	r28, 0x03	; 3
    409e:	1f ad       	ldd	r17, Y+63	; 0x3f
    40a0:	23 97       	sbiw	r28, 0x03	; 3
    40a2:	22 2d       	mov	r18, r2
    40a4:	33 2d       	mov	r19, r3
    40a6:	44 2d       	mov	r20, r4
    40a8:	55 2d       	mov	r21, r5
    40aa:	66 2d       	mov	r22, r6
    40ac:	77 2d       	mov	r23, r7
    40ae:	88 2d       	mov	r24, r8
    40b0:	99 2d       	mov	r25, r9
    40b2:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <__muldi3>
    40b6:	a2 2e       	mov	r10, r18
    40b8:	b3 2e       	mov	r11, r19
    40ba:	c4 2e       	mov	r12, r20
    40bc:	d5 2e       	mov	r13, r21
    40be:	e6 2e       	mov	r14, r22
    40c0:	f7 2e       	mov	r15, r23
    40c2:	08 2f       	mov	r16, r24
    40c4:	19 2f       	mov	r17, r25
    40c6:	2a 2d       	mov	r18, r10
    40c8:	3b 2d       	mov	r19, r11
    40ca:	4c 2d       	mov	r20, r12
    40cc:	5d 2d       	mov	r21, r13
    40ce:	6e 2d       	mov	r22, r14
    40d0:	7f 2d       	mov	r23, r15
    40d2:	80 2f       	mov	r24, r16
    40d4:	91 2f       	mov	r25, r17
    40d6:	a2 2e       	mov	r10, r18
    40d8:	b3 2e       	mov	r11, r19
    40da:	c4 2e       	mov	r12, r20
    40dc:	d5 2e       	mov	r13, r21
    40de:	e6 2e       	mov	r14, r22
    40e0:	f7 2e       	mov	r15, r23
    40e2:	08 2f       	mov	r16, r24
    40e4:	19 2f       	mov	r17, r25
    40e6:	2a 2d       	mov	r18, r10
    40e8:	3b 2d       	mov	r19, r11
    40ea:	4c 2d       	mov	r20, r12
    40ec:	5d 2d       	mov	r21, r13
    40ee:	6e 2d       	mov	r22, r14
    40f0:	7f 2d       	mov	r23, r15
    40f2:	80 2f       	mov	r24, r16
    40f4:	91 2f       	mov	r25, r17
    40f6:	a0 e0       	ldi	r26, 0x00	; 0
    40f8:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__cmpdi2_s8>
    40fc:	dc f4       	brge	.+54     	; 0x4134 <__stack+0x135>
    40fe:	2a 2d       	mov	r18, r10
    4100:	3b 2d       	mov	r19, r11
    4102:	4c 2d       	mov	r20, r12
    4104:	5d 2d       	mov	r21, r13
    4106:	6e 2d       	mov	r22, r14
    4108:	7f 2d       	mov	r23, r15
    410a:	80 2f       	mov	r24, r16
    410c:	91 2f       	mov	r25, r17
    410e:	af e7       	ldi	r26, 0x7F	; 127
    4110:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <__adddi3_s8>
    4114:	22 2e       	mov	r2, r18
    4116:	33 2e       	mov	r3, r19
    4118:	44 2e       	mov	r4, r20
    411a:	55 2e       	mov	r5, r21
    411c:	66 2e       	mov	r6, r22
    411e:	77 2e       	mov	r7, r23
    4120:	88 2e       	mov	r8, r24
    4122:	99 2e       	mov	r9, r25
    4124:	a2 2c       	mov	r10, r2
    4126:	b3 2c       	mov	r11, r3
    4128:	c4 2c       	mov	r12, r4
    412a:	d5 2c       	mov	r13, r5
    412c:	e6 2c       	mov	r14, r6
    412e:	f7 2c       	mov	r15, r7
    4130:	08 2d       	mov	r16, r8
    4132:	19 2d       	mov	r17, r9
    4134:	2a 2d       	mov	r18, r10
    4136:	3b 2d       	mov	r19, r11
    4138:	4c 2d       	mov	r20, r12
    413a:	5d 2d       	mov	r21, r13
    413c:	6e 2d       	mov	r22, r14
    413e:	7f 2d       	mov	r23, r15
    4140:	80 2f       	mov	r24, r16
    4142:	91 2f       	mov	r25, r17
    4144:	07 e0       	ldi	r16, 0x07	; 7
    4146:	0e 94 ac 58 	call	0xb158	; 0xb158 <__ashrdi3>
    414a:	a2 2e       	mov	r10, r18
    414c:	b3 2e       	mov	r11, r19
    414e:	c4 2e       	mov	r12, r20
    4150:	d5 2e       	mov	r13, r21
    4152:	e6 2e       	mov	r14, r22
    4154:	f7 2e       	mov	r15, r23
    4156:	08 2f       	mov	r16, r24
    4158:	19 2f       	mov	r17, r25
    415a:	2a 2c       	mov	r2, r10
    415c:	3b 2c       	mov	r3, r11
    415e:	4c 2c       	mov	r4, r12
    4160:	5d 2c       	mov	r5, r13
    4162:	6e 2c       	mov	r6, r14
    4164:	7f 2c       	mov	r7, r15
    4166:	80 2e       	mov	r8, r16
    4168:	91 2e       	mov	r9, r17
    416a:	2b a9       	ldd	r18, Y+51	; 0x33
    416c:	3c a9       	ldd	r19, Y+52	; 0x34
    416e:	4d a9       	ldd	r20, Y+53	; 0x35
    4170:	5e a9       	ldd	r21, Y+54	; 0x36
    4172:	6f a9       	ldd	r22, Y+55	; 0x37
    4174:	78 ad       	ldd	r23, Y+56	; 0x38
    4176:	89 ad       	ldd	r24, Y+57	; 0x39
    4178:	9a ad       	ldd	r25, Y+58	; 0x3a
    417a:	a2 2c       	mov	r10, r2
    417c:	b3 2c       	mov	r11, r3
    417e:	c4 2c       	mov	r12, r4
    4180:	d5 2c       	mov	r13, r5
    4182:	e6 2c       	mov	r14, r6
    4184:	f7 2c       	mov	r15, r7
    4186:	08 2d       	mov	r16, r8
    4188:	19 2d       	mov	r17, r9
    418a:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    418e:	2e 8b       	std	Y+22, r18	; 0x16
    4190:	3f 8b       	std	Y+23, r19	; 0x17
    4192:	48 8f       	std	Y+24, r20	; 0x18
    4194:	59 8f       	std	Y+25, r21	; 0x19
    4196:	6a 8f       	std	Y+26, r22	; 0x1a
    4198:	7b 8f       	std	Y+27, r23	; 0x1b
    419a:	8c 8f       	std	Y+28, r24	; 0x1c
    419c:	9d 8f       	std	Y+29, r25	; 0x1d
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    419e:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <D1>
    41a2:	90 91 ff 27 	lds	r25, 0x27FF	; 0x8027ff <D1+0x1>
    41a6:	a0 91 00 28 	lds	r26, 0x2800	; 0x802800 <D1+0x2>
    41aa:	b0 91 01 28 	lds	r27, 0x2801	; 0x802801 <D1+0x3>
    41ae:	1c 01       	movw	r2, r24
    41b0:	2d 01       	movw	r4, r26
    41b2:	61 2c       	mov	r6, r1
    41b4:	71 2c       	mov	r7, r1
    41b6:	43 01       	movw	r8, r6
    41b8:	ae 88       	ldd	r10, Y+22	; 0x16
    41ba:	bf 88       	ldd	r11, Y+23	; 0x17
    41bc:	c8 8c       	ldd	r12, Y+24	; 0x18
    41be:	d9 8c       	ldd	r13, Y+25	; 0x19
    41c0:	ea 8c       	ldd	r14, Y+26	; 0x1a
    41c2:	fb 8c       	ldd	r15, Y+27	; 0x1b
    41c4:	0c 8d       	ldd	r16, Y+28	; 0x1c
    41c6:	1d 8d       	ldd	r17, Y+29	; 0x1d
    41c8:	22 2d       	mov	r18, r2
    41ca:	33 2d       	mov	r19, r3
    41cc:	44 2d       	mov	r20, r4
    41ce:	55 2d       	mov	r21, r5
    41d0:	66 2d       	mov	r22, r6
    41d2:	77 2d       	mov	r23, r7
    41d4:	88 2d       	mov	r24, r8
    41d6:	99 2d       	mov	r25, r9
    41d8:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <__muldi3>
    41dc:	a2 2e       	mov	r10, r18
    41de:	b3 2e       	mov	r11, r19
    41e0:	c4 2e       	mov	r12, r20
    41e2:	d5 2e       	mov	r13, r21
    41e4:	e6 2e       	mov	r14, r22
    41e6:	f7 2e       	mov	r15, r23
    41e8:	08 2f       	mov	r16, r24
    41ea:	19 2f       	mov	r17, r25
    41ec:	2a 2d       	mov	r18, r10
    41ee:	3b 2d       	mov	r19, r11
    41f0:	4c 2d       	mov	r20, r12
    41f2:	5d 2d       	mov	r21, r13
    41f4:	6e 2d       	mov	r22, r14
    41f6:	7f 2d       	mov	r23, r15
    41f8:	80 2f       	mov	r24, r16
    41fa:	91 2f       	mov	r25, r17
    41fc:	a2 2e       	mov	r10, r18
    41fe:	b3 2e       	mov	r11, r19
    4200:	c4 2e       	mov	r12, r20
    4202:	d5 2e       	mov	r13, r21
    4204:	e6 2e       	mov	r14, r22
    4206:	f7 2e       	mov	r15, r23
    4208:	08 2f       	mov	r16, r24
    420a:	19 2f       	mov	r17, r25
    420c:	2a 2d       	mov	r18, r10
    420e:	3b 2d       	mov	r19, r11
    4210:	4c 2d       	mov	r20, r12
    4212:	5d 2d       	mov	r21, r13
    4214:	6e 2d       	mov	r22, r14
    4216:	7f 2d       	mov	r23, r15
    4218:	80 2f       	mov	r24, r16
    421a:	91 2f       	mov	r25, r17
    421c:	a0 e0       	ldi	r26, 0x00	; 0
    421e:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__cmpdi2_s8>
    4222:	04 f5       	brge	.+64     	; 0x4264 <__stack+0x265>
    4224:	2a 2d       	mov	r18, r10
    4226:	3b 2d       	mov	r19, r11
    4228:	4c 2d       	mov	r20, r12
    422a:	5d 2d       	mov	r21, r13
    422c:	6e 2d       	mov	r22, r14
    422e:	7f 2d       	mov	r23, r15
    4230:	80 2f       	mov	r24, r16
    4232:	91 2f       	mov	r25, r17
    4234:	21 50       	subi	r18, 0x01	; 1
    4236:	31 09       	sbc	r19, r1
    4238:	40 4e       	sbci	r20, 0xE0	; 224
    423a:	5f 4f       	sbci	r21, 0xFF	; 255
    423c:	6f 4f       	sbci	r22, 0xFF	; 255
    423e:	7f 4f       	sbci	r23, 0xFF	; 255
    4240:	8f 4f       	sbci	r24, 0xFF	; 255
    4242:	9f 4f       	sbci	r25, 0xFF	; 255
    4244:	22 2e       	mov	r2, r18
    4246:	33 2e       	mov	r3, r19
    4248:	44 2e       	mov	r4, r20
    424a:	55 2e       	mov	r5, r21
    424c:	66 2e       	mov	r6, r22
    424e:	77 2e       	mov	r7, r23
    4250:	88 2e       	mov	r8, r24
    4252:	99 2e       	mov	r9, r25
    4254:	a2 2c       	mov	r10, r2
    4256:	b3 2c       	mov	r11, r3
    4258:	c4 2c       	mov	r12, r4
    425a:	d5 2c       	mov	r13, r5
    425c:	e6 2c       	mov	r14, r6
    425e:	f7 2c       	mov	r15, r7
    4260:	08 2d       	mov	r16, r8
    4262:	19 2d       	mov	r17, r9
    4264:	2a 2d       	mov	r18, r10
    4266:	3b 2d       	mov	r19, r11
    4268:	4c 2d       	mov	r20, r12
    426a:	5d 2d       	mov	r21, r13
    426c:	6e 2d       	mov	r22, r14
    426e:	7f 2d       	mov	r23, r15
    4270:	80 2f       	mov	r24, r16
    4272:	91 2f       	mov	r25, r17
    4274:	05 e1       	ldi	r16, 0x15	; 21
    4276:	0e 94 ac 58 	call	0xb158	; 0xb158 <__ashrdi3>
    427a:	22 2e       	mov	r2, r18
    427c:	33 2e       	mov	r3, r19
    427e:	44 2e       	mov	r4, r20
    4280:	55 2e       	mov	r5, r21
    4282:	66 2e       	mov	r6, r22
    4284:	77 2e       	mov	r7, r23
    4286:	88 2e       	mov	r8, r24
    4288:	99 2e       	mov	r9, r25
    428a:	a2 2c       	mov	r10, r2
    428c:	b3 2c       	mov	r11, r3
    428e:	c4 2c       	mov	r12, r4
    4290:	d5 2c       	mov	r13, r5
    4292:	e6 2c       	mov	r14, r6
    4294:	f7 2c       	mov	r15, r7
    4296:	08 2d       	mov	r16, r8
    4298:	19 2d       	mov	r17, r9
    429a:	2a 2d       	mov	r18, r10
    429c:	3b 2d       	mov	r19, r11
    429e:	4c 2d       	mov	r20, r12
    42a0:	5d 2d       	mov	r21, r13
    42a2:	6e 2d       	mov	r22, r14
    42a4:	7f 2d       	mov	r23, r15
    42a6:	80 2f       	mov	r24, r16
    42a8:	91 2f       	mov	r25, r17
    42aa:	ae 84       	ldd	r10, Y+14	; 0x0e
    42ac:	bf 84       	ldd	r11, Y+15	; 0x0f
    42ae:	c8 88       	ldd	r12, Y+16	; 0x10
    42b0:	d9 88       	ldd	r13, Y+17	; 0x11
    42b2:	ea 88       	ldd	r14, Y+18	; 0x12
    42b4:	fb 88       	ldd	r15, Y+19	; 0x13
    42b6:	0c 89       	ldd	r16, Y+20	; 0x14
    42b8:	1d 89       	ldd	r17, Y+21	; 0x15
    42ba:	0e 94 df 58 	call	0xb1be	; 0xb1be <__subdi3>
    42be:	22 2e       	mov	r2, r18
    42c0:	33 2e       	mov	r3, r19
    42c2:	44 2e       	mov	r4, r20
    42c4:	55 2e       	mov	r5, r21
    42c6:	66 2e       	mov	r6, r22
    42c8:	77 2e       	mov	r7, r23
    42ca:	88 2e       	mov	r8, r24
    42cc:	99 2e       	mov	r9, r25
    42ce:	a2 2c       	mov	r10, r2
    42d0:	b3 2c       	mov	r11, r3
    42d2:	c4 2c       	mov	r12, r4
    42d4:	d5 2c       	mov	r13, r5
    42d6:	e6 2c       	mov	r14, r6
    42d8:	f7 2c       	mov	r15, r7
    42da:	08 2d       	mov	r16, r8
    42dc:	19 2d       	mov	r17, r9
    42de:	2a 2d       	mov	r18, r10
    42e0:	3b 2d       	mov	r19, r11
    42e2:	4c 2d       	mov	r20, r12
    42e4:	5d 2d       	mov	r21, r13
    42e6:	6e 2d       	mov	r22, r14
    42e8:	7f 2d       	mov	r23, r15
    42ea:	80 2f       	mov	r24, r16
    42ec:	91 2f       	mov	r25, r17
    42ee:	a0 e0       	ldi	r26, 0x00	; 0
    42f0:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__cmpdi2_s8>
    42f4:	04 f5       	brge	.+64     	; 0x4336 <__stack+0x337>
    42f6:	2a 2d       	mov	r18, r10
    42f8:	3b 2d       	mov	r19, r11
    42fa:	4c 2d       	mov	r20, r12
    42fc:	5d 2d       	mov	r21, r13
    42fe:	6e 2d       	mov	r22, r14
    4300:	7f 2d       	mov	r23, r15
    4302:	80 2f       	mov	r24, r16
    4304:	91 2f       	mov	r25, r17
    4306:	21 50       	subi	r18, 0x01	; 1
    4308:	30 48       	sbci	r19, 0x80	; 128
    430a:	4f 4f       	sbci	r20, 0xFF	; 255
    430c:	5f 4f       	sbci	r21, 0xFF	; 255
    430e:	6f 4f       	sbci	r22, 0xFF	; 255
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	8f 4f       	sbci	r24, 0xFF	; 255
    4314:	9f 4f       	sbci	r25, 0xFF	; 255
    4316:	22 2e       	mov	r2, r18
    4318:	33 2e       	mov	r3, r19
    431a:	44 2e       	mov	r4, r20
    431c:	55 2e       	mov	r5, r21
    431e:	66 2e       	mov	r6, r22
    4320:	77 2e       	mov	r7, r23
    4322:	88 2e       	mov	r8, r24
    4324:	99 2e       	mov	r9, r25
    4326:	a2 2c       	mov	r10, r2
    4328:	b3 2c       	mov	r11, r3
    432a:	c4 2c       	mov	r12, r4
    432c:	d5 2c       	mov	r13, r5
    432e:	e6 2c       	mov	r14, r6
    4330:	f7 2c       	mov	r15, r7
    4332:	08 2d       	mov	r16, r8
    4334:	19 2d       	mov	r17, r9
    4336:	2a 2d       	mov	r18, r10
    4338:	3b 2d       	mov	r19, r11
    433a:	4c 2d       	mov	r20, r12
    433c:	5d 2d       	mov	r21, r13
    433e:	6e 2d       	mov	r22, r14
    4340:	7f 2d       	mov	r23, r15
    4342:	80 2f       	mov	r24, r16
    4344:	91 2f       	mov	r25, r17
    4346:	0f e0       	ldi	r16, 0x0F	; 15
    4348:	0e 94 ac 58 	call	0xb158	; 0xb158 <__ashrdi3>
    434c:	a2 2e       	mov	r10, r18
    434e:	b3 2e       	mov	r11, r19
    4350:	c4 2e       	mov	r12, r20
    4352:	d5 2e       	mov	r13, r21
    4354:	e6 2e       	mov	r14, r22
    4356:	f7 2e       	mov	r15, r23
    4358:	08 2f       	mov	r16, r24
    435a:	19 2f       	mov	r17, r25
    435c:	2a 2d       	mov	r18, r10
    435e:	3b 2d       	mov	r19, r11
    4360:	4c 2d       	mov	r20, r12
    4362:	5d 2d       	mov	r21, r13
    4364:	6e 2d       	mov	r22, r14
    4366:	7f 2d       	mov	r23, r15
    4368:	80 2f       	mov	r24, r16
    436a:	91 2f       	mov	r25, r17
    436c:	2e 8f       	std	Y+30, r18	; 0x1e
    436e:	3f 8f       	std	Y+31, r19	; 0x1f
    4370:	48 a3       	std	Y+32, r20	; 0x20
    4372:	59 a3       	std	Y+33, r21	; 0x21

	fprintf("%f\n", P);
    4374:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4376:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4378:	29 2f       	mov	r18, r25
    437a:	2f 93       	push	r18
    437c:	8f 93       	push	r24
    437e:	84 ee       	ldi	r24, 0xE4	; 228
    4380:	90 e2       	ldi	r25, 0x20	; 32
    4382:	89 2f       	mov	r24, r25
    4384:	8f 93       	push	r24
    4386:	84 ee       	ldi	r24, 0xE4	; 228
    4388:	90 e2       	ldi	r25, 0x20	; 32
    438a:	8f 93       	push	r24
    438c:	0e 94 6e 5b 	call	0xb6dc	; 0xb6dc <fprintf>
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
	return P;
    4398:	8e 8d       	ldd	r24, Y+30	; 0x1e
    439a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    439c:	a8 a1       	ldd	r26, Y+32	; 0x20
    439e:	b9 a1       	ldd	r27, Y+33	; 0x21
    43a0:	bc 01       	movw	r22, r24
    43a2:	cd 01       	movw	r24, r26
    43a4:	ce 5b       	subi	r28, 0xBE	; 190
    43a6:	df 4f       	sbci	r29, 0xFF	; 255
    43a8:	cd bf       	out	0x3d, r28	; 61
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	df 91       	pop	r29
    43ae:	cf 91       	pop	r28
    43b0:	1f 91       	pop	r17
    43b2:	0f 91       	pop	r16
    43b4:	ff 90       	pop	r15
    43b6:	ef 90       	pop	r14
    43b8:	df 90       	pop	r13
    43ba:	cf 90       	pop	r12
    43bc:	bf 90       	pop	r11
    43be:	af 90       	pop	r10
    43c0:	9f 90       	pop	r9
    43c2:	8f 90       	pop	r8
    43c4:	7f 90       	pop	r7
    43c6:	6f 90       	pop	r6
    43c8:	5f 90       	pop	r5
    43ca:	4f 90       	pop	r4
    43cc:	3f 90       	pop	r3
    43ce:	2f 90       	pop	r2
    43d0:	08 95       	ret

000043d2 <tc_set_overflow_interrupt_level>:
 * \param level Overflow interrupt level
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
    43d2:	cf 93       	push	r28
    43d4:	df 93       	push	r29
    43d6:	00 d0       	rcall	.+0      	; 0x43d8 <tc_set_overflow_interrupt_level+0x6>
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	89 83       	std	Y+1, r24	; 0x01
    43de:	9a 83       	std	Y+2, r25	; 0x02
    43e0:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    43e2:	89 81       	ldd	r24, Y+1	; 0x01
    43e4:	9a 81       	ldd	r25, Y+2	; 0x02
    43e6:	fc 01       	movw	r30, r24
    43e8:	86 81       	ldd	r24, Z+6	; 0x06
    43ea:	28 2f       	mov	r18, r24
    43ec:	2c 7f       	andi	r18, 0xFC	; 252
    43ee:	89 81       	ldd	r24, Y+1	; 0x01
    43f0:	9a 81       	ldd	r25, Y+2	; 0x02
    43f2:	fc 01       	movw	r30, r24
    43f4:	26 83       	std	Z+6, r18	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	9a 81       	ldd	r25, Y+2	; 0x02
    43fa:	fc 01       	movw	r30, r24
    43fc:	96 81       	ldd	r25, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    43fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4400:	29 2f       	mov	r18, r25
    4402:	28 2b       	or	r18, r24
    4404:	89 81       	ldd	r24, Y+1	; 0x01
    4406:	9a 81       	ldd	r25, Y+2	; 0x02
    4408:	fc 01       	movw	r30, r24
    440a:	26 83       	std	Z+6, r18	; 0x06
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
}
    440c:	00 00       	nop
    440e:	23 96       	adiw	r28, 0x03	; 3
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	de bf       	out	0x3e, r29	; 62
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	08 95       	ret

0000441a <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	00 d0       	rcall	.+0      	; 0x4420 <tc_write_clock_source+0x6>
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
    4424:	89 83       	std	Y+1, r24	; 0x01
    4426:	9a 83       	std	Y+2, r25	; 0x02
    4428:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    442a:	89 81       	ldd	r24, Y+1	; 0x01
    442c:	9a 81       	ldd	r25, Y+2	; 0x02
    442e:	fc 01       	movw	r30, r24
    4430:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    4432:	98 2f       	mov	r25, r24
    4434:	90 7f       	andi	r25, 0xF0	; 240
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	89 2b       	or	r24, r25
    443a:	28 2f       	mov	r18, r24
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	9a 81       	ldd	r25, Y+2	; 0x02
    4440:	fc 01       	movw	r30, r24
    4442:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    4444:	00 00       	nop
    4446:	23 96       	adiw	r28, 0x03	; 3
    4448:	cd bf       	out	0x3d, r28	; 61
    444a:	de bf       	out	0x3e, r29	; 62
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	08 95       	ret

00004452 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	00 d0       	rcall	.+0      	; 0x4458 <tc_write_period+0x6>
    4458:	1f 92       	push	r1
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
    445e:	89 83       	std	Y+1, r24	; 0x01
    4460:	9a 83       	std	Y+2, r25	; 0x02
    4462:	6b 83       	std	Y+3, r22	; 0x03
    4464:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	9a 81       	ldd	r25, Y+2	; 0x02
    446a:	2b 81       	ldd	r18, Y+3	; 0x03
    446c:	3c 81       	ldd	r19, Y+4	; 0x04
    446e:	fc 01       	movw	r30, r24
    4470:	26 a3       	std	Z+38, r18	; 0x26
    4472:	37 a3       	std	Z+39, r19	; 0x27
}
    4474:	00 00       	nop
    4476:	24 96       	adiw	r28, 0x04	; 4
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	df 91       	pop	r29
    447e:	cf 91       	pop	r28
    4480:	08 95       	ret

00004482 <tc_clear_overflow>:
 *
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	1f 92       	push	r1
    4488:	1f 92       	push	r1
    448a:	cd b7       	in	r28, 0x3d	; 61
    448c:	de b7       	in	r29, 0x3e	; 62
    448e:	89 83       	std	Y+1, r24	; 0x01
    4490:	9a 83       	std	Y+2, r25	; 0x02
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	9a 81       	ldd	r25, Y+2	; 0x02
    4496:	fc 01       	movw	r30, r24
    4498:	84 85       	ldd	r24, Z+12	; 0x0c
    449a:	28 2f       	mov	r18, r24
    449c:	21 60       	ori	r18, 0x01	; 1
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	9a 81       	ldd	r25, Y+2	; 0x02
    44a2:	fc 01       	movw	r30, r24
    44a4:	24 87       	std	Z+12, r18	; 0x0c
}
    44a6:	00 00       	nop
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	df 91       	pop	r29
    44ae:	cf 91       	pop	r28
    44b0:	08 95       	ret

000044b2 <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    44b2:	cf 93       	push	r28
    44b4:	df 93       	push	r29
    44b6:	00 d0       	rcall	.+0      	; 0x44b8 <tc_set_wgm+0x6>
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
    44bc:	89 83       	std	Y+1, r24	; 0x01
    44be:	9a 83       	std	Y+2, r25	; 0x02
    44c0:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	9a 81       	ldd	r25, Y+2	; 0x02
    44c6:	fc 01       	movw	r30, r24
    44c8:	81 81       	ldd	r24, Z+1	; 0x01
    44ca:	98 2f       	mov	r25, r24
    44cc:	98 7f       	andi	r25, 0xF8	; 248
    44ce:	8b 81       	ldd	r24, Y+3	; 0x03
    44d0:	89 2b       	or	r24, r25
    44d2:	28 2f       	mov	r18, r24
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	9a 81       	ldd	r25, Y+2	; 0x02
    44d8:	fc 01       	movw	r30, r24
    44da:	21 83       	std	Z+1, r18	; 0x01
}
    44dc:	00 00       	nop
    44de:	23 96       	adiw	r28, 0x03	; 3
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	08 95       	ret

000044ea <xbee_callback>:

static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

static void xbee_callback(void)
{
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
	write_telem_to_xbee();
    44f2:	89 d0       	rcall	.+274    	; 0x4606 <write_telem_to_xbee>

		tc_clear_overflow(&XBEE_TC);
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	98 e0       	ldi	r25, 0x08	; 8
    44f8:	c4 df       	rcall	.-120    	; 0x4482 <tc_clear_overflow>
		
	
}
    44fa:	00 00       	nop
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	08 95       	ret

00004502 <xbee_init>:

void xbee_init()
{
    4502:	cf 93       	push	r28
    4504:	df 93       	push	r29
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
	xbee_uart.Baud=XBEEBAUD;
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	92 ec       	ldi	r25, 0xC2	; 194
    450e:	a1 e0       	ldi	r26, 0x01	; 1
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <xbee_uart+0x6>
    4516:	90 93 c7 21 	sts	0x21C7, r25	; 0x8021c7 <xbee_uart+0x7>
    451a:	a0 93 c8 21 	sts	0x21C8, r26	; 0x8021c8 <xbee_uart+0x8>
    451e:	b0 93 c9 21 	sts	0x21C9, r27	; 0x8021c9 <xbee_uart+0x9>
	xbee_uart.Port=P_XBEEPORT;
    4522:	80 e4       	ldi	r24, 0x40	; 64
    4524:	96 e0       	ldi	r25, 0x06	; 6
    4526:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <xbee_uart>
    452a:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <xbee_uart+0x1>
	xbee_uart.Usart=P_XBEEUART;
    452e:	80 ea       	ldi	r24, 0xA0	; 160
    4530:	98 e0       	ldi	r25, 0x08	; 8
    4532:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <xbee_uart+0x2>
    4536:	90 93 c3 21 	sts	0x21C3, r25	; 0x8021c3 <xbee_uart+0x3>
	xbee_uart.tx=XBEETXPIN;
    453a:	88 e0       	ldi	r24, 0x08	; 8
    453c:	80 93 c5 21 	sts	0x21C5, r24	; 0x8021c5 <xbee_uart+0x5>
	xbee_uart.rx=XBEERXPIN;
    4540:	84 e0       	ldi	r24, 0x04	; 4
    4542:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <xbee_uart+0x4>
	uart_init(&xbee_uart);
    4546:	80 ec       	ldi	r24, 0xC0	; 192
    4548:	91 e2       	ldi	r25, 0x21	; 33
    454a:	0e 94 ba 48 	call	0x9174	; 0x9174 <uart_init>
	XBEE_UART.CTRLA=0x14;
    454e:	80 ea       	ldi	r24, 0xA0	; 160
    4550:	98 e0       	ldi	r25, 0x08	; 8
    4552:	24 e1       	ldi	r18, 0x14	; 20
    4554:	fc 01       	movw	r30, r24
    4556:	23 83       	std	Z+3, r18	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    4558:	88 ee       	ldi	r24, 0xE8	; 232
    455a:	90 e2       	ldi	r25, 0x20	; 32
    455c:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
	
	tc_enable(&XBEE_TC);
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	98 e0       	ldi	r25, 0x08	; 8
    4564:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <tc_enable>
	tc_set_overflow_interrupt_callback(&XBEE_TC, xbee_callback);
    4568:	65 e7       	ldi	r22, 0x75	; 117
    456a:	72 e2       	ldi	r23, 0x22	; 34
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	98 e0       	ldi	r25, 0x08	; 8
    4570:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <tc_set_overflow_interrupt_callback>
	tc_set_wgm(&XBEE_TC, TC_WG_NORMAL);
    4574:	60 e0       	ldi	r22, 0x00	; 0
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	98 e0       	ldi	r25, 0x08	; 8
    457a:	9b df       	rcall	.-202    	; 0x44b2 <tc_set_wgm>
	tc_write_period(&XBEE_TC, XBEE_WRITE_INTERVAL);
    457c:	61 e1       	ldi	r22, 0x11	; 17
    457e:	7a e7       	ldi	r23, 0x7A	; 122
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	98 e0       	ldi	r25, 0x08	; 8
    4584:	66 df       	rcall	.-308    	; 0x4452 <tc_write_period>
	tc_set_overflow_interrupt_level(&XBEE_TC, TC_INT_LVL_LO);
    4586:	61 e0       	ldi	r22, 0x01	; 1
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	98 e0       	ldi	r25, 0x08	; 8
    458c:	22 df       	rcall	.-444    	; 0x43d2 <tc_set_overflow_interrupt_level>
	cpu_irq_enable();
    458e:	78 94       	sei
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
    4590:	61 e0       	ldi	r22, 0x01	; 1
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	98 e0       	ldi	r25, 0x08	; 8
    4596:	41 df       	rcall	.-382    	; 0x441a <tc_write_clock_source>
}
    4598:	00 00       	nop
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	08 95       	ret

000045a0 <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	1f 92       	push	r1
    45a6:	1f 92       	push	r1
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
    45ac:	89 83       	std	Y+1, r24	; 0x01
    45ae:	9a 83       	std	Y+2, r25	; 0x02
	if(blockTransmission) return NULL;
    45b0:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <blockTransmission>
    45b4:	88 23       	and	r24, r24
    45b6:	09 f5       	brne	.+66     	; 0x45fa <xbeeWrite+0x5a>
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	9a 81       	ldd	r25, Y+2	; 0x02
    45bc:	0e 94 10 5b 	call	0xb620	; 0xb620 <strlen>
    45c0:	9c 01       	movw	r18, r24
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	9a 81       	ldd	r25, Y+2	; 0x02
    45c6:	a9 01       	movw	r20, r18
    45c8:	bc 01       	movw	r22, r24
    45ca:	80 ea       	ldi	r24, 0xA0	; 160
    45cc:	98 e0       	ldi	r25, 0x08	; 8
    45ce:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <usart_serial_write_packet>
	packetCount++;
    45d2:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <packetCount>
    45d6:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <packetCount+0x1>
    45da:	a0 91 5f 22 	lds	r26, 0x225F	; 0x80225f <packetCount+0x2>
    45de:	b0 91 60 22 	lds	r27, 0x2260	; 0x802260 <packetCount+0x3>
    45e2:	01 96       	adiw	r24, 0x01	; 1
    45e4:	a1 1d       	adc	r26, r1
    45e6:	b1 1d       	adc	r27, r1
    45e8:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <packetCount>
    45ec:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <packetCount+0x1>
    45f0:	a0 93 5f 22 	sts	0x225F, r26	; 0x80225f <packetCount+0x2>
    45f4:	b0 93 60 22 	sts	0x2260, r27	; 0x802260 <packetCount+0x3>
    45f8:	01 c0       	rjmp	.+2      	; 0x45fc <xbeeWrite+0x5c>
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
}

void xbeeWrite(uint8_t* data)
{	
	if(blockTransmission) return NULL;
    45fa:	00 00       	nop
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
	packetCount++;
   // if(DEBUG) printf("%s \n",(const)data);
}
    45fc:	0f 90       	pop	r0
    45fe:	0f 90       	pop	r0
    4600:	df 91       	pop	r29
    4602:	cf 91       	pop	r28
    4604:	08 95       	ret

00004606 <write_telem_to_xbee>:

void write_telem_to_xbee()
{
    4606:	cf 93       	push	r28
    4608:	df 93       	push	r29
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
    460e:	c0 54       	subi	r28, 0x40	; 64
    4610:	d3 40       	sbci	r29, 0x03	; 3
    4612:	cd bf       	out	0x3d, r28	; 61
    4614:	de bf       	out	0x3e, r29	; 62
	char* telemetryString [255];
	*telemetryString = "\0";
    4616:	83 e2       	ldi	r24, 0x23	; 35
    4618:	90 e2       	ldi	r25, 0x20	; 32
    461a:	8b 83       	std	Y+3, r24	; 0x03
    461c:	9c 83       	std	Y+4, r25	; 0x04
	char* s_teamID = "2118";
    461e:	8a ef       	ldi	r24, 0xFA	; 250
    4620:	90 e2       	ldi	r25, 0x20	; 32
    4622:	89 83       	std	Y+1, r24	; 0x01
    4624:	9a 83       	std	Y+2, r25	; 0x02
	char* s_roll [10];
	char* s_spinRate [10];
	char* s_flightState [10];
	char* s_cardinalDir [10];
	
	sprintf(s_missionTime, "%i", missionTime);
    4626:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <missionTime>
    462a:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <missionTime+0x1>
    462e:	a0 91 45 22 	lds	r26, 0x2245	; 0x802245 <missionTime+0x2>
    4632:	b0 91 46 22 	lds	r27, 0x2246	; 0x802246 <missionTime+0x3>
    4636:	2b 2f       	mov	r18, r27
    4638:	2f 93       	push	r18
    463a:	2a 2f       	mov	r18, r26
    463c:	2f 93       	push	r18
    463e:	29 2f       	mov	r18, r25
    4640:	2f 93       	push	r18
    4642:	8f 93       	push	r24
    4644:	8f ef       	ldi	r24, 0xFF	; 255
    4646:	90 e2       	ldi	r25, 0x20	; 32
    4648:	89 2f       	mov	r24, r25
    464a:	8f 93       	push	r24
    464c:	8f ef       	ldi	r24, 0xFF	; 255
    464e:	90 e2       	ldi	r25, 0x20	; 32
    4650:	8f 93       	push	r24
    4652:	ce 01       	movw	r24, r28
    4654:	8f 5f       	subi	r24, 0xFF	; 255
    4656:	9d 4f       	sbci	r25, 0xFD	; 253
    4658:	29 2f       	mov	r18, r25
    465a:	2f 93       	push	r18
    465c:	8f 93       	push	r24
    465e:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    4662:	8d b7       	in	r24, 0x3d	; 61
    4664:	9e b7       	in	r25, 0x3e	; 62
    4666:	08 96       	adiw	r24, 0x08	; 8
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	de bf       	out	0x3e, r29	; 62
	sprintf(s_packetCount, "%i", packetCount);
    466c:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <packetCount>
    4670:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <packetCount+0x1>
    4674:	a0 91 5f 22 	lds	r26, 0x225F	; 0x80225f <packetCount+0x2>
    4678:	b0 91 60 22 	lds	r27, 0x2260	; 0x802260 <packetCount+0x3>
    467c:	2b 2f       	mov	r18, r27
    467e:	2f 93       	push	r18
    4680:	2a 2f       	mov	r18, r26
    4682:	2f 93       	push	r18
    4684:	29 2f       	mov	r18, r25
    4686:	2f 93       	push	r18
    4688:	8f 93       	push	r24
    468a:	8f ef       	ldi	r24, 0xFF	; 255
    468c:	90 e2       	ldi	r25, 0x20	; 32
    468e:	89 2f       	mov	r24, r25
    4690:	8f 93       	push	r24
    4692:	8f ef       	ldi	r24, 0xFF	; 255
    4694:	90 e2       	ldi	r25, 0x20	; 32
    4696:	8f 93       	push	r24
    4698:	ce 01       	movw	r24, r28
    469a:	8b 5e       	subi	r24, 0xEB	; 235
    469c:	9d 4f       	sbci	r25, 0xFD	; 253
    469e:	29 2f       	mov	r18, r25
    46a0:	2f 93       	push	r18
    46a2:	8f 93       	push	r24
    46a4:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    46a8:	ed b7       	in	r30, 0x3d	; 61
    46aa:	fe b7       	in	r31, 0x3e	; 62
    46ac:	38 96       	adiw	r30, 0x08	; 8
    46ae:	cd bf       	out	0x3d, r28	; 61
    46b0:	de bf       	out	0x3e, r29	; 62
	sprintf(s_altitude, "%f", altitude);
    46b2:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <altitude>
    46b6:	90 91 62 22 	lds	r25, 0x2262	; 0x802262 <altitude+0x1>
    46ba:	a0 91 63 22 	lds	r26, 0x2263	; 0x802263 <altitude+0x2>
    46be:	b0 91 64 22 	lds	r27, 0x2264	; 0x802264 <altitude+0x3>
    46c2:	2b 2f       	mov	r18, r27
    46c4:	2f 93       	push	r18
    46c6:	2a 2f       	mov	r18, r26
    46c8:	2f 93       	push	r18
    46ca:	29 2f       	mov	r18, r25
    46cc:	2f 93       	push	r18
    46ce:	8f 93       	push	r24
    46d0:	82 e0       	ldi	r24, 0x02	; 2
    46d2:	91 e2       	ldi	r25, 0x21	; 33
    46d4:	89 2f       	mov	r24, r25
    46d6:	8f 93       	push	r24
    46d8:	82 e0       	ldi	r24, 0x02	; 2
    46da:	91 e2       	ldi	r25, 0x21	; 33
    46dc:	8f 93       	push	r24
    46de:	ce 01       	movw	r24, r28
    46e0:	87 5d       	subi	r24, 0xD7	; 215
    46e2:	9d 4f       	sbci	r25, 0xFD	; 253
    46e4:	29 2f       	mov	r18, r25
    46e6:	2f 93       	push	r18
    46e8:	8f 93       	push	r24
    46ea:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    46ee:	8d b7       	in	r24, 0x3d	; 61
    46f0:	9e b7       	in	r25, 0x3e	; 62
    46f2:	08 96       	adiw	r24, 0x08	; 8
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	de bf       	out	0x3e, r29	; 62
	sprintf(s_pressure, "%i",pressure);
    46f8:	80 91 4b 22 	lds	r24, 0x224B	; 0x80224b <pressure>
    46fc:	90 91 4c 22 	lds	r25, 0x224C	; 0x80224c <pressure+0x1>
    4700:	a0 91 4d 22 	lds	r26, 0x224D	; 0x80224d <pressure+0x2>
    4704:	b0 91 4e 22 	lds	r27, 0x224E	; 0x80224e <pressure+0x3>
    4708:	2b 2f       	mov	r18, r27
    470a:	2f 93       	push	r18
    470c:	2a 2f       	mov	r18, r26
    470e:	2f 93       	push	r18
    4710:	29 2f       	mov	r18, r25
    4712:	2f 93       	push	r18
    4714:	8f 93       	push	r24
    4716:	8f ef       	ldi	r24, 0xFF	; 255
    4718:	90 e2       	ldi	r25, 0x20	; 32
    471a:	89 2f       	mov	r24, r25
    471c:	8f 93       	push	r24
    471e:	8f ef       	ldi	r24, 0xFF	; 255
    4720:	90 e2       	ldi	r25, 0x20	; 32
    4722:	8f 93       	push	r24
    4724:	ce 01       	movw	r24, r28
    4726:	83 5c       	subi	r24, 0xC3	; 195
    4728:	9d 4f       	sbci	r25, 0xFD	; 253
    472a:	29 2f       	mov	r18, r25
    472c:	2f 93       	push	r18
    472e:	8f 93       	push	r24
    4730:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    4734:	ed b7       	in	r30, 0x3d	; 61
    4736:	fe b7       	in	r31, 0x3e	; 62
    4738:	38 96       	adiw	r30, 0x08	; 8
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	de bf       	out	0x3e, r29	; 62
	sprintf(s_temp, "%f", temp);
    473e:	80 91 3f 22 	lds	r24, 0x223F	; 0x80223f <temp>
    4742:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <temp+0x1>
    4746:	a0 91 41 22 	lds	r26, 0x2241	; 0x802241 <temp+0x2>
    474a:	b0 91 42 22 	lds	r27, 0x2242	; 0x802242 <temp+0x3>
    474e:	2b 2f       	mov	r18, r27
    4750:	2f 93       	push	r18
    4752:	2a 2f       	mov	r18, r26
    4754:	2f 93       	push	r18
    4756:	29 2f       	mov	r18, r25
    4758:	2f 93       	push	r18
    475a:	8f 93       	push	r24
    475c:	82 e0       	ldi	r24, 0x02	; 2
    475e:	91 e2       	ldi	r25, 0x21	; 33
    4760:	89 2f       	mov	r24, r25
    4762:	8f 93       	push	r24
    4764:	82 e0       	ldi	r24, 0x02	; 2
    4766:	91 e2       	ldi	r25, 0x21	; 33
    4768:	8f 93       	push	r24
    476a:	ce 01       	movw	r24, r28
    476c:	8f 5a       	subi	r24, 0xAF	; 175
    476e:	9d 4f       	sbci	r25, 0xFD	; 253
    4770:	29 2f       	mov	r18, r25
    4772:	2f 93       	push	r18
    4774:	8f 93       	push	r24
    4776:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    477a:	8d b7       	in	r24, 0x3d	; 61
    477c:	9e b7       	in	r25, 0x3e	; 62
    477e:	08 96       	adiw	r24, 0x08	; 8
    4780:	cd bf       	out	0x3d, r28	; 61
    4782:	de bf       	out	0x3e, r29	; 62
	sprintf(s_voltage, "%f", voltage);
    4784:	80 91 47 22 	lds	r24, 0x2247	; 0x802247 <voltage>
    4788:	90 91 48 22 	lds	r25, 0x2248	; 0x802248 <voltage+0x1>
    478c:	a0 91 49 22 	lds	r26, 0x2249	; 0x802249 <voltage+0x2>
    4790:	b0 91 4a 22 	lds	r27, 0x224A	; 0x80224a <voltage+0x3>
    4794:	2b 2f       	mov	r18, r27
    4796:	2f 93       	push	r18
    4798:	2a 2f       	mov	r18, r26
    479a:	2f 93       	push	r18
    479c:	29 2f       	mov	r18, r25
    479e:	2f 93       	push	r18
    47a0:	8f 93       	push	r24
    47a2:	82 e0       	ldi	r24, 0x02	; 2
    47a4:	91 e2       	ldi	r25, 0x21	; 33
    47a6:	89 2f       	mov	r24, r25
    47a8:	8f 93       	push	r24
    47aa:	82 e0       	ldi	r24, 0x02	; 2
    47ac:	91 e2       	ldi	r25, 0x21	; 33
    47ae:	8f 93       	push	r24
    47b0:	ce 01       	movw	r24, r28
    47b2:	8b 59       	subi	r24, 0x9B	; 155
    47b4:	9d 4f       	sbci	r25, 0xFD	; 253
    47b6:	29 2f       	mov	r18, r25
    47b8:	2f 93       	push	r18
    47ba:	8f 93       	push	r24
    47bc:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    47c0:	ed b7       	in	r30, 0x3d	; 61
    47c2:	fe b7       	in	r31, 0x3e	; 62
    47c4:	38 96       	adiw	r30, 0x08	; 8
    47c6:	cd bf       	out	0x3d, r28	; 61
    47c8:	de bf       	out	0x3e, r29	; 62
	sprintf(s_gpsTime, " ");
    47ca:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <usart_config.7021+0x112>
    47ce:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <usart_config.7021+0x113>
    47d2:	ce 01       	movw	r24, r28
    47d4:	87 58       	subi	r24, 0x87	; 135
    47d6:	9d 4f       	sbci	r25, 0xFD	; 253
    47d8:	fc 01       	movw	r30, r24
    47da:	20 83       	st	Z, r18
    47dc:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLat, " ");
    47de:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <usart_config.7021+0x112>
    47e2:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <usart_config.7021+0x113>
    47e6:	ce 01       	movw	r24, r28
    47e8:	83 57       	subi	r24, 0x73	; 115
    47ea:	9d 4f       	sbci	r25, 0xFD	; 253
    47ec:	fc 01       	movw	r30, r24
    47ee:	20 83       	st	Z, r18
    47f0:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLong, " ");
    47f2:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <usart_config.7021+0x112>
    47f6:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <usart_config.7021+0x113>
    47fa:	ce 01       	movw	r24, r28
    47fc:	8f 55       	subi	r24, 0x5F	; 95
    47fe:	9d 4f       	sbci	r25, 0xFD	; 253
    4800:	fc 01       	movw	r30, r24
    4802:	20 83       	st	Z, r18
    4804:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsAlt, " ");
    4806:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <usart_config.7021+0x112>
    480a:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <usart_config.7021+0x113>
    480e:	ce 01       	movw	r24, r28
    4810:	8b 54       	subi	r24, 0x4B	; 75
    4812:	9d 4f       	sbci	r25, 0xFD	; 253
    4814:	fc 01       	movw	r30, r24
    4816:	20 83       	st	Z, r18
    4818:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsSats, " ");
    481a:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <usart_config.7021+0x112>
    481e:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <usart_config.7021+0x113>
    4822:	ce 01       	movw	r24, r28
    4824:	87 53       	subi	r24, 0x37	; 55
    4826:	9d 4f       	sbci	r25, 0xFD	; 253
    4828:	fc 01       	movw	r30, r24
    482a:	20 83       	st	Z, r18
    482c:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_pitch, "%f", pitch);
    482e:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <pitch>
    4832:	90 91 df 22 	lds	r25, 0x22DF	; 0x8022df <pitch+0x1>
    4836:	a0 91 e0 22 	lds	r26, 0x22E0	; 0x8022e0 <pitch+0x2>
    483a:	b0 91 e1 22 	lds	r27, 0x22E1	; 0x8022e1 <pitch+0x3>
    483e:	2b 2f       	mov	r18, r27
    4840:	2f 93       	push	r18
    4842:	2a 2f       	mov	r18, r26
    4844:	2f 93       	push	r18
    4846:	29 2f       	mov	r18, r25
    4848:	2f 93       	push	r18
    484a:	8f 93       	push	r24
    484c:	82 e0       	ldi	r24, 0x02	; 2
    484e:	91 e2       	ldi	r25, 0x21	; 33
    4850:	89 2f       	mov	r24, r25
    4852:	8f 93       	push	r24
    4854:	82 e0       	ldi	r24, 0x02	; 2
    4856:	91 e2       	ldi	r25, 0x21	; 33
    4858:	8f 93       	push	r24
    485a:	ce 01       	movw	r24, r28
    485c:	83 52       	subi	r24, 0x23	; 35
    485e:	9d 4f       	sbci	r25, 0xFD	; 253
    4860:	29 2f       	mov	r18, r25
    4862:	2f 93       	push	r18
    4864:	8f 93       	push	r24
    4866:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    486a:	8d b7       	in	r24, 0x3d	; 61
    486c:	9e b7       	in	r25, 0x3e	; 62
    486e:	08 96       	adiw	r24, 0x08	; 8
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	de bf       	out	0x3e, r29	; 62
	sprintf(s_roll, "%f", roll);
    4874:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <roll>
    4878:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <roll+0x1>
    487c:	a0 91 e4 22 	lds	r26, 0x22E4	; 0x8022e4 <roll+0x2>
    4880:	b0 91 e5 22 	lds	r27, 0x22E5	; 0x8022e5 <roll+0x3>
    4884:	2b 2f       	mov	r18, r27
    4886:	2f 93       	push	r18
    4888:	2a 2f       	mov	r18, r26
    488a:	2f 93       	push	r18
    488c:	29 2f       	mov	r18, r25
    488e:	2f 93       	push	r18
    4890:	8f 93       	push	r24
    4892:	82 e0       	ldi	r24, 0x02	; 2
    4894:	91 e2       	ldi	r25, 0x21	; 33
    4896:	89 2f       	mov	r24, r25
    4898:	8f 93       	push	r24
    489a:	82 e0       	ldi	r24, 0x02	; 2
    489c:	91 e2       	ldi	r25, 0x21	; 33
    489e:	8f 93       	push	r24
    48a0:	ce 01       	movw	r24, r28
    48a2:	8f 50       	subi	r24, 0x0F	; 15
    48a4:	9d 4f       	sbci	r25, 0xFD	; 253
    48a6:	29 2f       	mov	r18, r25
    48a8:	2f 93       	push	r18
    48aa:	8f 93       	push	r24
    48ac:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    48b0:	ed b7       	in	r30, 0x3d	; 61
    48b2:	fe b7       	in	r31, 0x3e	; 62
    48b4:	38 96       	adiw	r30, 0x08	; 8
    48b6:	cd bf       	out	0x3d, r28	; 61
    48b8:	de bf       	out	0x3e, r29	; 62
	sprintf(s_spinRate, " ");
    48ba:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <usart_config.7021+0x112>
    48be:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <usart_config.7021+0x113>
    48c2:	ce 01       	movw	r24, r28
    48c4:	8b 5f       	subi	r24, 0xFB	; 251
    48c6:	9c 4f       	sbci	r25, 0xFC	; 252
    48c8:	fc 01       	movw	r30, r24
    48ca:	20 83       	st	Z, r18
    48cc:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_flightState, "%i", flightState);
    48ce:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <flightState>
    48d2:	88 2f       	mov	r24, r24
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	29 2f       	mov	r18, r25
    48d8:	2f 93       	push	r18
    48da:	8f 93       	push	r24
    48dc:	8f ef       	ldi	r24, 0xFF	; 255
    48de:	90 e2       	ldi	r25, 0x20	; 32
    48e0:	89 2f       	mov	r24, r25
    48e2:	8f 93       	push	r24
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	90 e2       	ldi	r25, 0x20	; 32
    48e8:	8f 93       	push	r24
    48ea:	ce 01       	movw	r24, r28
    48ec:	87 5e       	subi	r24, 0xE7	; 231
    48ee:	9c 4f       	sbci	r25, 0xFC	; 252
    48f0:	29 2f       	mov	r18, r25
    48f2:	2f 93       	push	r18
    48f4:	8f 93       	push	r24
    48f6:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
	sprintf(s_cardinalDir, "%f", heading);
    4906:	80 91 ee 24 	lds	r24, 0x24EE	; 0x8024ee <heading>
    490a:	90 91 ef 24 	lds	r25, 0x24EF	; 0x8024ef <heading+0x1>
    490e:	a0 91 f0 24 	lds	r26, 0x24F0	; 0x8024f0 <heading+0x2>
    4912:	b0 91 f1 24 	lds	r27, 0x24F1	; 0x8024f1 <heading+0x3>
    4916:	2b 2f       	mov	r18, r27
    4918:	2f 93       	push	r18
    491a:	2a 2f       	mov	r18, r26
    491c:	2f 93       	push	r18
    491e:	29 2f       	mov	r18, r25
    4920:	2f 93       	push	r18
    4922:	8f 93       	push	r24
    4924:	82 e0       	ldi	r24, 0x02	; 2
    4926:	91 e2       	ldi	r25, 0x21	; 33
    4928:	89 2f       	mov	r24, r25
    492a:	8f 93       	push	r24
    492c:	82 e0       	ldi	r24, 0x02	; 2
    492e:	91 e2       	ldi	r25, 0x21	; 33
    4930:	8f 93       	push	r24
    4932:	ce 01       	movw	r24, r28
    4934:	83 5d       	subi	r24, 0xD3	; 211
    4936:	9c 4f       	sbci	r25, 0xFC	; 252
    4938:	29 2f       	mov	r18, r25
    493a:	2f 93       	push	r18
    493c:	8f 93       	push	r24
    493e:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    4942:	8d b7       	in	r24, 0x3d	; 61
    4944:	9e b7       	in	r25, 0x3e	; 62
    4946:	08 96       	adiw	r24, 0x08	; 8
    4948:	cd bf       	out	0x3d, r28	; 61
    494a:	de bf       	out	0x3e, r29	; 62
	
	
	sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n\0",
    494c:	ce 01       	movw	r24, r28
    494e:	83 5d       	subi	r24, 0xD3	; 211
    4950:	9c 4f       	sbci	r25, 0xFC	; 252
    4952:	29 2f       	mov	r18, r25
    4954:	2f 93       	push	r18
    4956:	8f 93       	push	r24
    4958:	ce 01       	movw	r24, r28
    495a:	87 5e       	subi	r24, 0xE7	; 231
    495c:	9c 4f       	sbci	r25, 0xFC	; 252
    495e:	29 2f       	mov	r18, r25
    4960:	2f 93       	push	r18
    4962:	8f 93       	push	r24
    4964:	ce 01       	movw	r24, r28
    4966:	8b 5f       	subi	r24, 0xFB	; 251
    4968:	9c 4f       	sbci	r25, 0xFC	; 252
    496a:	29 2f       	mov	r18, r25
    496c:	2f 93       	push	r18
    496e:	8f 93       	push	r24
    4970:	ce 01       	movw	r24, r28
    4972:	8f 50       	subi	r24, 0x0F	; 15
    4974:	9d 4f       	sbci	r25, 0xFD	; 253
    4976:	29 2f       	mov	r18, r25
    4978:	2f 93       	push	r18
    497a:	8f 93       	push	r24
    497c:	ce 01       	movw	r24, r28
    497e:	83 52       	subi	r24, 0x23	; 35
    4980:	9d 4f       	sbci	r25, 0xFD	; 253
    4982:	29 2f       	mov	r18, r25
    4984:	2f 93       	push	r18
    4986:	8f 93       	push	r24
    4988:	ce 01       	movw	r24, r28
    498a:	87 53       	subi	r24, 0x37	; 55
    498c:	9d 4f       	sbci	r25, 0xFD	; 253
    498e:	29 2f       	mov	r18, r25
    4990:	2f 93       	push	r18
    4992:	8f 93       	push	r24
    4994:	ce 01       	movw	r24, r28
    4996:	8b 54       	subi	r24, 0x4B	; 75
    4998:	9d 4f       	sbci	r25, 0xFD	; 253
    499a:	29 2f       	mov	r18, r25
    499c:	2f 93       	push	r18
    499e:	8f 93       	push	r24
    49a0:	ce 01       	movw	r24, r28
    49a2:	8f 55       	subi	r24, 0x5F	; 95
    49a4:	9d 4f       	sbci	r25, 0xFD	; 253
    49a6:	29 2f       	mov	r18, r25
    49a8:	2f 93       	push	r18
    49aa:	8f 93       	push	r24
    49ac:	ce 01       	movw	r24, r28
    49ae:	83 57       	subi	r24, 0x73	; 115
    49b0:	9d 4f       	sbci	r25, 0xFD	; 253
    49b2:	29 2f       	mov	r18, r25
    49b4:	2f 93       	push	r18
    49b6:	8f 93       	push	r24
    49b8:	ce 01       	movw	r24, r28
    49ba:	87 58       	subi	r24, 0x87	; 135
    49bc:	9d 4f       	sbci	r25, 0xFD	; 253
    49be:	29 2f       	mov	r18, r25
    49c0:	2f 93       	push	r18
    49c2:	8f 93       	push	r24
    49c4:	ce 01       	movw	r24, r28
    49c6:	8b 59       	subi	r24, 0x9B	; 155
    49c8:	9d 4f       	sbci	r25, 0xFD	; 253
    49ca:	29 2f       	mov	r18, r25
    49cc:	2f 93       	push	r18
    49ce:	8f 93       	push	r24
    49d0:	ce 01       	movw	r24, r28
    49d2:	8f 5a       	subi	r24, 0xAF	; 175
    49d4:	9d 4f       	sbci	r25, 0xFD	; 253
    49d6:	29 2f       	mov	r18, r25
    49d8:	2f 93       	push	r18
    49da:	8f 93       	push	r24
    49dc:	ce 01       	movw	r24, r28
    49de:	83 5c       	subi	r24, 0xC3	; 195
    49e0:	9d 4f       	sbci	r25, 0xFD	; 253
    49e2:	29 2f       	mov	r18, r25
    49e4:	2f 93       	push	r18
    49e6:	8f 93       	push	r24
    49e8:	ce 01       	movw	r24, r28
    49ea:	87 5d       	subi	r24, 0xD7	; 215
    49ec:	9d 4f       	sbci	r25, 0xFD	; 253
    49ee:	29 2f       	mov	r18, r25
    49f0:	2f 93       	push	r18
    49f2:	8f 93       	push	r24
    49f4:	ce 01       	movw	r24, r28
    49f6:	8b 5e       	subi	r24, 0xEB	; 235
    49f8:	9d 4f       	sbci	r25, 0xFD	; 253
    49fa:	29 2f       	mov	r18, r25
    49fc:	2f 93       	push	r18
    49fe:	8f 93       	push	r24
    4a00:	ce 01       	movw	r24, r28
    4a02:	8f 5f       	subi	r24, 0xFF	; 255
    4a04:	9d 4f       	sbci	r25, 0xFD	; 253
    4a06:	29 2f       	mov	r18, r25
    4a08:	2f 93       	push	r18
    4a0a:	8f 93       	push	r24
    4a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0e:	8f 93       	push	r24
    4a10:	89 81       	ldd	r24, Y+1	; 0x01
    4a12:	8f 93       	push	r24
    4a14:	85 e2       	ldi	r24, 0x25	; 37
    4a16:	90 e2       	ldi	r25, 0x20	; 32
    4a18:	89 2f       	mov	r24, r25
    4a1a:	8f 93       	push	r24
    4a1c:	85 e2       	ldi	r24, 0x25	; 37
    4a1e:	90 e2       	ldi	r25, 0x20	; 32
    4a20:	8f 93       	push	r24
    4a22:	ce 01       	movw	r24, r28
    4a24:	03 96       	adiw	r24, 0x03	; 3
    4a26:	29 2f       	mov	r18, r25
    4a28:	2f 93       	push	r18
    4a2a:	8f 93       	push	r24
    4a2c:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <sprintf>
    4a30:	ed b7       	in	r30, 0x3d	; 61
    4a32:	fe b7       	in	r31, 0x3e	; 62
    4a34:	b6 96       	adiw	r30, 0x26	; 38
    4a36:	cd bf       	out	0x3d, r28	; 61
    4a38:	de bf       	out	0x3e, r29	; 62
	s_roll,
	s_spinRate,
	s_flightState,
	s_cardinalDir);
	
	xbeeWrite(telemetryString);
    4a3a:	ce 01       	movw	r24, r28
    4a3c:	03 96       	adiw	r24, 0x03	; 3
    4a3e:	b0 dd       	rcall	.-1184   	; 0x45a0 <xbeeWrite>
}
    4a40:	00 00       	nop
    4a42:	c0 5c       	subi	r28, 0xC0	; 192
    4a44:	dc 4f       	sbci	r29, 0xFC	; 252
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	df 91       	pop	r29
    4a4c:	cf 91       	pop	r28
    4a4e:	08 95       	ret

00004a50 <__vector_25>:


ISR(READ_INTURUPT)
{
    4a50:	1f 92       	push	r1
    4a52:	0f 92       	push	r0
    4a54:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a58:	0f 92       	push	r0
    4a5a:	11 24       	eor	r1, r1
    4a5c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a60:	0f 92       	push	r0
    4a62:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a66:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a6a:	0f 92       	push	r0
    4a6c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a70:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a74:	0f 92       	push	r0
    4a76:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a7a:	8f 93       	push	r24
    4a7c:	9f 93       	push	r25
    4a7e:	ef 93       	push	r30
    4a80:	ff 93       	push	r31
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    4a8a:	80 ea       	ldi	r24, 0xA0	; 160
    4a8c:	98 e0       	ldi	r25, 0x08	; 8
    4a8e:	fc 01       	movw	r30, r24
    4a90:	80 81       	ld	r24, Z
    4a92:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <XbeeRx>
    4a96:	00 00       	nop
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	ff 91       	pop	r31
    4a9e:	ef 91       	pop	r30
    4aa0:	9f 91       	pop	r25
    4aa2:	8f 91       	pop	r24
    4aa4:	0f 90       	pop	r0
    4aa6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4aaa:	0f 90       	pop	r0
    4aac:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ab0:	0f 90       	pop	r0
    4ab2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ab6:	0f 90       	pop	r0
    4ab8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4abc:	0f 90       	pop	r0
    4abe:	1f 90       	pop	r1
    4ac0:	18 95       	reti

00004ac2 <rbu8_write>:
	rbu8_write(buffer, data, i);
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	27 97       	sbiw	r28, 0x07	; 7
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	8a 83       	std	Y+2, r24	; 0x02
    4ad2:	9b 83       	std	Y+3, r25	; 0x03
    4ad4:	6c 83       	std	Y+4, r22	; 0x04
    4ad6:	7d 83       	std	Y+5, r23	; 0x05
    4ad8:	4e 83       	std	Y+6, r20	; 0x06
    4ada:	5f 83       	std	Y+7, r21	; 0x07
	for (uint8_t i = 0; i < length; i++)
    4adc:	19 82       	std	Y+1, r1	; 0x01
    4ade:	65 c0       	rjmp	.+202    	; 0x4baa <rbu8_write+0xe8>
	{
		buffer->buffer[buffer->head] = data[i]; // data can be not be access greater length-1
    4ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	26 81       	ldd	r18, Z+6	; 0x06
    4ae8:	37 81       	ldd	r19, Z+7	; 0x07
    4aea:	8a 81       	ldd	r24, Y+2	; 0x02
    4aec:	9b 81       	ldd	r25, Y+3	; 0x03
    4aee:	fc 01       	movw	r30, r24
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	82 0f       	add	r24, r18
    4af6:	93 1f       	adc	r25, r19
    4af8:	29 81       	ldd	r18, Y+1	; 0x01
    4afa:	22 2f       	mov	r18, r18
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	4c 81       	ldd	r20, Y+4	; 0x04
    4b00:	5d 81       	ldd	r21, Y+5	; 0x05
    4b02:	24 0f       	add	r18, r20
    4b04:	35 1f       	adc	r19, r21
    4b06:	f9 01       	movw	r30, r18
    4b08:	20 81       	ld	r18, Z
    4b0a:	fc 01       	movw	r30, r24
    4b0c:	20 83       	st	Z, r18
		buffer->head++;
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	9b 81       	ldd	r25, Y+3	; 0x03
    4b12:	fc 01       	movw	r30, r24
    4b14:	82 81       	ldd	r24, Z+2	; 0x02
    4b16:	93 81       	ldd	r25, Z+3	; 0x03
    4b18:	9c 01       	movw	r18, r24
    4b1a:	2f 5f       	subi	r18, 0xFF	; 255
    4b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b20:	9b 81       	ldd	r25, Y+3	; 0x03
    4b22:	fc 01       	movw	r30, r24
    4b24:	22 83       	std	Z+2, r18	; 0x02
    4b26:	33 83       	std	Z+3, r19	; 0x03
		
		if (buffer->head == buffer->array_length) //Next value to write to is beyond the end of the array
    4b28:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	22 81       	ldd	r18, Z+2	; 0x02
    4b30:	33 81       	ldd	r19, Z+3	; 0x03
    4b32:	8a 81       	ldd	r24, Y+2	; 0x02
    4b34:	9b 81       	ldd	r25, Y+3	; 0x03
    4b36:	fc 01       	movw	r30, r24
    4b38:	80 81       	ld	r24, Z
    4b3a:	91 81       	ldd	r25, Z+1	; 0x01
    4b3c:	28 17       	cp	r18, r24
    4b3e:	39 07       	cpc	r19, r25
    4b40:	29 f4       	brne	.+10     	; 0x4b4c <rbu8_write+0x8a>
		{
			buffer->head = 0;
    4b42:	8a 81       	ldd	r24, Y+2	; 0x02
    4b44:	9b 81       	ldd	r25, Y+3	; 0x03
    4b46:	fc 01       	movw	r30, r24
    4b48:	12 82       	std	Z+2, r1	; 0x02
    4b4a:	13 82       	std	Z+3, r1	; 0x03
		} // end if
		
		if (buffer->head == buffer->tail)
    4b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b50:	fc 01       	movw	r30, r24
    4b52:	22 81       	ldd	r18, Z+2	; 0x02
    4b54:	33 81       	ldd	r19, Z+3	; 0x03
    4b56:	8a 81       	ldd	r24, Y+2	; 0x02
    4b58:	9b 81       	ldd	r25, Y+3	; 0x03
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	84 81       	ldd	r24, Z+4	; 0x04
    4b5e:	95 81       	ldd	r25, Z+5	; 0x05
    4b60:	28 17       	cp	r18, r24
    4b62:	39 07       	cpc	r19, r25
    4b64:	f9 f4       	brne	.+62     	; 0x4ba4 <rbu8_write+0xe2>
		{
			buffer->tail++;
    4b66:	8a 81       	ldd	r24, Y+2	; 0x02
    4b68:	9b 81       	ldd	r25, Y+3	; 0x03
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	84 81       	ldd	r24, Z+4	; 0x04
    4b6e:	95 81       	ldd	r25, Z+5	; 0x05
    4b70:	9c 01       	movw	r18, r24
    4b72:	2f 5f       	subi	r18, 0xFF	; 255
    4b74:	3f 4f       	sbci	r19, 0xFF	; 255
    4b76:	8a 81       	ldd	r24, Y+2	; 0x02
    4b78:	9b 81       	ldd	r25, Y+3	; 0x03
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	24 83       	std	Z+4, r18	; 0x04
    4b7e:	35 83       	std	Z+5, r19	; 0x05
			
			if (buffer->tail == buffer->array_length){
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	9b 81       	ldd	r25, Y+3	; 0x03
    4b84:	fc 01       	movw	r30, r24
    4b86:	24 81       	ldd	r18, Z+4	; 0x04
    4b88:	35 81       	ldd	r19, Z+5	; 0x05
    4b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b8e:	fc 01       	movw	r30, r24
    4b90:	80 81       	ld	r24, Z
    4b92:	91 81       	ldd	r25, Z+1	; 0x01
    4b94:	28 17       	cp	r18, r24
    4b96:	39 07       	cpc	r19, r25
    4b98:	29 f4       	brne	.+10     	; 0x4ba4 <rbu8_write+0xe2>
				buffer->tail = 0;
    4b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	14 82       	std	Z+4, r1	; 0x04
    4ba2:	15 82       	std	Z+5, r1	; 0x05
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
	for (uint8_t i = 0; i < length; i++)
    4ba4:	89 81       	ldd	r24, Y+1	; 0x01
    4ba6:	8f 5f       	subi	r24, 0xFF	; 255
    4ba8:	89 83       	std	Y+1, r24	; 0x01
    4baa:	89 81       	ldd	r24, Y+1	; 0x01
    4bac:	28 2f       	mov	r18, r24
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    4bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    4bb4:	28 17       	cp	r18, r24
    4bb6:	39 07       	cpc	r19, r25
    4bb8:	08 f4       	brcc	.+2      	; 0x4bbc <rbu8_write+0xfa>
    4bba:	92 cf       	rjmp	.-220    	; 0x4ae0 <rbu8_write+0x1e>
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
			}// end if
		} // end if
	} // end for
} // end write_to_ring_buffer
    4bbc:	00 00       	nop
    4bbe:	27 96       	adiw	r28, 0x07	; 7
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	de bf       	out	0x3e, r29	; 62
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	08 95       	ret

00004bca <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
    4bce:	00 d0       	rcall	.+0      	; 0x4bd0 <rbu8_init+0x6>
    4bd0:	00 d0       	rcall	.+0      	; 0x4bd2 <rbu8_init+0x8>
    4bd2:	cd b7       	in	r28, 0x3d	; 61
    4bd4:	de b7       	in	r29, 0x3e	; 62
    4bd6:	89 83       	std	Y+1, r24	; 0x01
    4bd8:	9a 83       	std	Y+2, r25	; 0x02
    4bda:	6b 83       	std	Y+3, r22	; 0x03
    4bdc:	7c 83       	std	Y+4, r23	; 0x04
    4bde:	4d 83       	std	Y+5, r20	; 0x05
    4be0:	5e 83       	std	Y+6, r21	; 0x06
	buffer->head = 0; //Beginning of array
    4be2:	89 81       	ldd	r24, Y+1	; 0x01
    4be4:	9a 81       	ldd	r25, Y+2	; 0x02
    4be6:	fc 01       	movw	r30, r24
    4be8:	12 82       	std	Z+2, r1	; 0x02
    4bea:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	14 82       	std	Z+4, r1	; 0x04
    4bf4:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    4bf6:	89 81       	ldd	r24, Y+1	; 0x01
    4bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    4bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    4bfe:	fc 01       	movw	r30, r24
    4c00:	26 83       	std	Z+6, r18	; 0x06
    4c02:	37 83       	std	Z+7, r19	; 0x07
	buffer->array_length = backing_array_length;
    4c04:	89 81       	ldd	r24, Y+1	; 0x01
    4c06:	9a 81       	ldd	r25, Y+2	; 0x02
    4c08:	2d 81       	ldd	r18, Y+5	; 0x05
    4c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    4c0c:	fc 01       	movw	r30, r24
    4c0e:	20 83       	st	Z, r18
    4c10:	31 83       	std	Z+1, r19	; 0x01
}
    4c12:	00 00       	nop
    4c14:	26 96       	adiw	r28, 0x06	; 6
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	de bf       	out	0x3e, r29	; 62
    4c1a:	df 91       	pop	r29
    4c1c:	cf 91       	pop	r28
    4c1e:	08 95       	ret

00004c20 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    4c20:	cf 93       	push	r28
    4c22:	df 93       	push	r29
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
    4c28:	2a 97       	sbiw	r28, 0x0a	; 10
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	de bf       	out	0x3e, r29	; 62
    4c2e:	8d 83       	std	Y+5, r24	; 0x05
    4c30:	9e 83       	std	Y+6, r25	; 0x06
    4c32:	6f 83       	std	Y+7, r22	; 0x07
    4c34:	78 87       	std	Y+8, r23	; 0x08
    4c36:	49 87       	std	Y+9, r20	; 0x09
    4c38:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t index = buffer->tail;
    4c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c3e:	fc 01       	movw	r30, r24
    4c40:	84 81       	ldd	r24, Z+4	; 0x04
    4c42:	95 81       	ldd	r25, Z+5	; 0x05
    4c44:	89 83       	std	Y+1, r24	; 0x01
    4c46:	9a 83       	std	Y+2, r25	; 0x02
	uint16_t i = 0;
    4c48:	1b 82       	std	Y+3, r1	; 0x03
    4c4a:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    4c4c:	1b 82       	std	Y+3, r1	; 0x03
    4c4e:	1c 82       	std	Y+4, r1	; 0x04
    4c50:	2d c0       	rjmp	.+90     	; 0x4cac <rbu8_read+0x8c>
	{

		dest[i] = buffer->buffer[index];
    4c52:	2f 81       	ldd	r18, Y+7	; 0x07
    4c54:	38 85       	ldd	r19, Y+8	; 0x08
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
    4c58:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5a:	82 0f       	add	r24, r18
    4c5c:	93 1f       	adc	r25, r19
    4c5e:	2d 81       	ldd	r18, Y+5	; 0x05
    4c60:	3e 81       	ldd	r19, Y+6	; 0x06
    4c62:	f9 01       	movw	r30, r18
    4c64:	46 81       	ldd	r20, Z+6	; 0x06
    4c66:	57 81       	ldd	r21, Z+7	; 0x07
    4c68:	29 81       	ldd	r18, Y+1	; 0x01
    4c6a:	3a 81       	ldd	r19, Y+2	; 0x02
    4c6c:	24 0f       	add	r18, r20
    4c6e:	35 1f       	adc	r19, r21
    4c70:	f9 01       	movw	r30, r18
    4c72:	20 81       	ld	r18, Z
    4c74:	fc 01       	movw	r30, r24
    4c76:	20 83       	st	Z, r18
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    4c78:	8d 81       	ldd	r24, Y+5	; 0x05
    4c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	80 81       	ld	r24, Z
    4c80:	91 81       	ldd	r25, Z+1	; 0x01
    4c82:	9c 01       	movw	r18, r24
    4c84:	21 50       	subi	r18, 0x01	; 1
    4c86:	31 09       	sbc	r19, r1
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8c:	28 17       	cp	r18, r24
    4c8e:	39 07       	cpc	r19, r25
    4c90:	19 f4       	brne	.+6      	; 0x4c98 <rbu8_read+0x78>
		{
			index = 0;
    4c92:	19 82       	std	Y+1, r1	; 0x01
    4c94:	1a 82       	std	Y+2, r1	; 0x02
    4c96:	05 c0       	rjmp	.+10     	; 0x4ca2 <rbu8_read+0x82>
		}
		else
		{
			index++;
    4c98:	89 81       	ldd	r24, Y+1	; 0x01
    4c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9c:	01 96       	adiw	r24, 0x01	; 1
    4c9e:	89 83       	std	Y+1, r24	; 0x01
    4ca0:	9a 83       	std	Y+2, r25	; 0x02
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    4ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ca6:	01 96       	adiw	r24, 0x01	; 1
    4ca8:	8b 83       	std	Y+3, r24	; 0x03
    4caa:	9c 83       	std	Y+4, r25	; 0x04
    4cac:	8d 81       	ldd	r24, Y+5	; 0x05
    4cae:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb0:	8c d0       	rcall	.+280    	; 0x4dca <rbu8_length>
    4cb2:	9c 01       	movw	r18, r24
    4cb4:	89 85       	ldd	r24, Y+9	; 0x09
    4cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb8:	28 17       	cp	r18, r24
    4cba:	39 07       	cpc	r19, r25
    4cbc:	20 f4       	brcc	.+8      	; 0x4cc6 <rbu8_read+0xa6>
    4cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc2:	83 d0       	rcall	.+262    	; 0x4dca <rbu8_length>
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <rbu8_read+0xaa>
    4cc6:	89 85       	ldd	r24, Y+9	; 0x09
    4cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cca:	2b 81       	ldd	r18, Y+3	; 0x03
    4ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    4cce:	28 17       	cp	r18, r24
    4cd0:	39 07       	cpc	r19, r25
    4cd2:	08 f4       	brcc	.+2      	; 0x4cd6 <rbu8_read+0xb6>
    4cd4:	be cf       	rjmp	.-132    	; 0x4c52 <rbu8_read+0x32>
		{
			index++;
		}
		
	}
	if (length > rbu8_length(buffer))
    4cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4cda:	77 d0       	rcall	.+238    	; 0x4dca <rbu8_length>
    4cdc:	9c 01       	movw	r18, r24
    4cde:	89 85       	ldd	r24, Y+9	; 0x09
    4ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce2:	28 17       	cp	r18, r24
    4ce4:	39 07       	cpc	r19, r25
    4ce6:	10 f4       	brcc	.+4      	; 0x4cec <rbu8_read+0xcc>
		return 1;
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	01 c0       	rjmp	.+2      	; 0x4cee <rbu8_read+0xce>
	else
		return 0;
    4cec:	80 e0       	ldi	r24, 0x00	; 0
}
    4cee:	2a 96       	adiw	r28, 0x0a	; 10
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	de bf       	out	0x3e, r29	; 62
    4cf4:	df 91       	pop	r29
    4cf6:	cf 91       	pop	r28
    4cf8:	08 95       	ret

00004cfa <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    4cfa:	cf 93       	push	r28
    4cfc:	df 93       	push	r29
    4cfe:	00 d0       	rcall	.+0      	; 0x4d00 <rbu8_delete_oldest+0x6>
    4d00:	00 d0       	rcall	.+0      	; 0x4d02 <rbu8_delete_oldest+0x8>
    4d02:	cd b7       	in	r28, 0x3d	; 61
    4d04:	de b7       	in	r29, 0x3e	; 62
    4d06:	8b 83       	std	Y+3, r24	; 0x03
    4d08:	9c 83       	std	Y+4, r25	; 0x04
    4d0a:	6d 83       	std	Y+5, r22	; 0x05
    4d0c:	7e 83       	std	Y+6, r23	; 0x06
	uint16_t move_distance = min(length, rbu8_length(buffer));
    4d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d10:	9c 81       	ldd	r25, Y+4	; 0x04
    4d12:	5b d0       	rcall	.+182    	; 0x4dca <rbu8_length>
    4d14:	9c 01       	movw	r18, r24
    4d16:	8d 81       	ldd	r24, Y+5	; 0x05
    4d18:	9e 81       	ldd	r25, Y+6	; 0x06
    4d1a:	82 17       	cp	r24, r18
    4d1c:	93 07       	cpc	r25, r19
    4d1e:	20 f0       	brcs	.+8      	; 0x4d28 <rbu8_delete_oldest+0x2e>
    4d20:	8b 81       	ldd	r24, Y+3	; 0x03
    4d22:	9c 81       	ldd	r25, Y+4	; 0x04
    4d24:	52 d0       	rcall	.+164    	; 0x4dca <rbu8_length>
    4d26:	02 c0       	rjmp	.+4      	; 0x4d2c <rbu8_delete_oldest+0x32>
    4d28:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2c:	89 83       	std	Y+1, r24	; 0x01
    4d2e:	9a 83       	std	Y+2, r25	; 0x02
	if (move_distance >= rbu8_length(buffer))
    4d30:	8b 81       	ldd	r24, Y+3	; 0x03
    4d32:	9c 81       	ldd	r25, Y+4	; 0x04
    4d34:	4a d0       	rcall	.+148    	; 0x4dca <rbu8_length>
    4d36:	9c 01       	movw	r18, r24
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3c:	82 17       	cp	r24, r18
    4d3e:	93 07       	cpc	r25, r19
    4d40:	20 f1       	brcs	.+72     	; 0x4d8a <rbu8_delete_oldest+0x90>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    4d42:	8b 81       	ldd	r24, Y+3	; 0x03
    4d44:	9c 81       	ldd	r25, Y+4	; 0x04
    4d46:	fc 01       	movw	r30, r24
    4d48:	24 81       	ldd	r18, Z+4	; 0x04
    4d4a:	35 81       	ldd	r19, Z+5	; 0x05
    4d4c:	89 81       	ldd	r24, Y+1	; 0x01
    4d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d50:	a9 01       	movw	r20, r18
    4d52:	48 0f       	add	r20, r24
    4d54:	59 1f       	adc	r21, r25
    4d56:	8b 81       	ldd	r24, Y+3	; 0x03
    4d58:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	20 81       	ld	r18, Z
    4d5e:	31 81       	ldd	r19, Z+1	; 0x01
    4d60:	ca 01       	movw	r24, r20
    4d62:	b9 01       	movw	r22, r18
    4d64:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__udivmodhi4>
    4d68:	9c 01       	movw	r18, r24
    4d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d6e:	fc 01       	movw	r30, r24
    4d70:	24 83       	std	Z+4, r18	; 0x04
    4d72:	35 83       	std	Z+5, r19	; 0x05
		buffer->head = buffer->tail;
    4d74:	8b 81       	ldd	r24, Y+3	; 0x03
    4d76:	9c 81       	ldd	r25, Y+4	; 0x04
    4d78:	fc 01       	movw	r30, r24
    4d7a:	24 81       	ldd	r18, Z+4	; 0x04
    4d7c:	35 81       	ldd	r19, Z+5	; 0x05
    4d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d80:	9c 81       	ldd	r25, Y+4	; 0x04
    4d82:	fc 01       	movw	r30, r24
    4d84:	22 83       	std	Z+2, r18	; 0x02
    4d86:	33 83       	std	Z+3, r19	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    4d88:	19 c0       	rjmp	.+50     	; 0x4dbc <rbu8_delete_oldest+0xc2>
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
		buffer->head = buffer->tail;
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    4d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d8e:	fc 01       	movw	r30, r24
    4d90:	24 81       	ldd	r18, Z+4	; 0x04
    4d92:	35 81       	ldd	r19, Z+5	; 0x05
    4d94:	89 81       	ldd	r24, Y+1	; 0x01
    4d96:	9a 81       	ldd	r25, Y+2	; 0x02
    4d98:	a9 01       	movw	r20, r18
    4d9a:	48 0f       	add	r20, r24
    4d9c:	59 1f       	adc	r21, r25
    4d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4da0:	9c 81       	ldd	r25, Y+4	; 0x04
    4da2:	fc 01       	movw	r30, r24
    4da4:	20 81       	ld	r18, Z
    4da6:	31 81       	ldd	r19, Z+1	; 0x01
    4da8:	ca 01       	movw	r24, r20
    4daa:	b9 01       	movw	r22, r18
    4dac:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__udivmodhi4>
    4db0:	9c 01       	movw	r18, r24
    4db2:	8b 81       	ldd	r24, Y+3	; 0x03
    4db4:	9c 81       	ldd	r25, Y+4	; 0x04
    4db6:	fc 01       	movw	r30, r24
    4db8:	24 83       	std	Z+4, r18	; 0x04
    4dba:	35 83       	std	Z+5, r19	; 0x05
	}
}
    4dbc:	00 00       	nop
    4dbe:	26 96       	adiw	r28, 0x06	; 6
    4dc0:	cd bf       	out	0x3d, r28	; 61
    4dc2:	de bf       	out	0x3e, r29	; 62
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	08 95       	ret

00004dca <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    4dca:	cf 93       	push	r28
    4dcc:	df 93       	push	r29
    4dce:	1f 92       	push	r1
    4dd0:	1f 92       	push	r1
    4dd2:	cd b7       	in	r28, 0x3d	; 61
    4dd4:	de b7       	in	r29, 0x3e	; 62
    4dd6:	89 83       	std	Y+1, r24	; 0x01
    4dd8:	9a 83       	std	Y+2, r25	; 0x02
	if (buffer->head >= buffer->tail)
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dde:	fc 01       	movw	r30, r24
    4de0:	22 81       	ldd	r18, Z+2	; 0x02
    4de2:	33 81       	ldd	r19, Z+3	; 0x03
    4de4:	89 81       	ldd	r24, Y+1	; 0x01
    4de6:	9a 81       	ldd	r25, Y+2	; 0x02
    4de8:	fc 01       	movw	r30, r24
    4dea:	84 81       	ldd	r24, Z+4	; 0x04
    4dec:	95 81       	ldd	r25, Z+5	; 0x05
    4dee:	28 17       	cp	r18, r24
    4df0:	39 07       	cpc	r19, r25
    4df2:	78 f0       	brcs	.+30     	; 0x4e12 <rbu8_length+0x48>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    4df4:	89 81       	ldd	r24, Y+1	; 0x01
    4df6:	9a 81       	ldd	r25, Y+2	; 0x02
    4df8:	fc 01       	movw	r30, r24
    4dfa:	22 81       	ldd	r18, Z+2	; 0x02
    4dfc:	33 81       	ldd	r19, Z+3	; 0x03
    4dfe:	89 81       	ldd	r24, Y+1	; 0x01
    4e00:	9a 81       	ldd	r25, Y+2	; 0x02
    4e02:	fc 01       	movw	r30, r24
    4e04:	84 81       	ldd	r24, Z+4	; 0x04
    4e06:	95 81       	ldd	r25, Z+5	; 0x05
    4e08:	a9 01       	movw	r20, r18
    4e0a:	48 1b       	sub	r20, r24
    4e0c:	59 0b       	sbc	r21, r25
    4e0e:	ca 01       	movw	r24, r20
    4e10:	15 c0       	rjmp	.+42     	; 0x4e3c <rbu8_length+0x72>
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	9a 81       	ldd	r25, Y+2	; 0x02
    4e16:	fc 01       	movw	r30, r24
    4e18:	20 81       	ld	r18, Z
    4e1a:	31 81       	ldd	r19, Z+1	; 0x01
    4e1c:	89 81       	ldd	r24, Y+1	; 0x01
    4e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e20:	fc 01       	movw	r30, r24
    4e22:	42 81       	ldd	r20, Z+2	; 0x02
    4e24:	53 81       	ldd	r21, Z+3	; 0x03
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	84 81       	ldd	r24, Z+4	; 0x04
    4e2e:	95 81       	ldd	r25, Z+5	; 0x05
    4e30:	ba 01       	movw	r22, r20
    4e32:	68 1b       	sub	r22, r24
    4e34:	79 0b       	sbc	r23, r25
    4e36:	cb 01       	movw	r24, r22
    4e38:	82 0f       	add	r24, r18
    4e3a:	93 1f       	adc	r25, r19
	}
}
    4e3c:	0f 90       	pop	r0
    4e3e:	0f 90       	pop	r0
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	08 95       	ret

00004e46 <sysclk_enable_peripheral_clock>:
		if (searchstr[i] == target)
		{
			return i;
		}
	}
}
    4e46:	cf 93       	push	r28
    4e48:	df 93       	push	r29
    4e4a:	1f 92       	push	r1
    4e4c:	1f 92       	push	r1
    4e4e:	cd b7       	in	r28, 0x3d	; 61
    4e50:	de b7       	in	r29, 0x3e	; 62
    4e52:	89 83       	std	Y+1, r24	; 0x01
    4e54:	9a 83       	std	Y+2, r25	; 0x02
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	9a 81       	ldd	r25, Y+2	; 0x02
    4e5a:	89 2b       	or	r24, r25
    4e5c:	09 f4       	brne	.+2      	; 0x4e60 <sysclk_enable_peripheral_clock+0x1a>
    4e5e:	5e c1       	rjmp	.+700    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	9a 81       	ldd	r25, Y+2	; 0x02
    4e64:	80 3c       	cpi	r24, 0xC0	; 192
    4e66:	91 05       	cpc	r25, r1
    4e68:	21 f4       	brne	.+8      	; 0x4e72 <sysclk_enable_peripheral_clock+0x2c>
    4e6a:	60 e1       	ldi	r22, 0x10	; 16
    4e6c:	80 e0       	ldi	r24, 0x00	; 0
    4e6e:	78 d5       	rcall	.+2800   	; 0x5960 <sysclk_enable_module>
    4e70:	55 c1       	rjmp	.+682    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	9a 81       	ldd	r25, Y+2	; 0x02
    4e76:	80 34       	cpi	r24, 0x40	; 64
    4e78:	94 40       	sbci	r25, 0x04	; 4
    4e7a:	21 f4       	brne	.+8      	; 0x4e84 <sysclk_enable_peripheral_clock+0x3e>
    4e7c:	68 e0       	ldi	r22, 0x08	; 8
    4e7e:	80 e0       	ldi	r24, 0x00	; 0
    4e80:	6f d5       	rcall	.+2782   	; 0x5960 <sysclk_enable_module>
    4e82:	4c c1       	rjmp	.+664    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4e84:	89 81       	ldd	r24, Y+1	; 0x01
    4e86:	9a 81       	ldd	r25, Y+2	; 0x02
    4e88:	81 15       	cp	r24, r1
    4e8a:	94 40       	sbci	r25, 0x04	; 4
    4e8c:	21 f4       	brne	.+8      	; 0x4e96 <sysclk_enable_peripheral_clock+0x50>
    4e8e:	64 e0       	ldi	r22, 0x04	; 4
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	66 d5       	rcall	.+2764   	; 0x5960 <sysclk_enable_module>
    4e94:	43 c1       	rjmp	.+646    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9a:	80 38       	cpi	r24, 0x80	; 128
    4e9c:	91 40       	sbci	r25, 0x01	; 1
    4e9e:	21 f4       	brne	.+8      	; 0x4ea8 <sysclk_enable_peripheral_clock+0x62>
    4ea0:	62 e0       	ldi	r22, 0x02	; 2
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	5d d5       	rcall	.+2746   	; 0x5960 <sysclk_enable_module>
    4ea6:	3a c1       	rjmp	.+628    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4ea8:	89 81       	ldd	r24, Y+1	; 0x01
    4eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4eac:	81 15       	cp	r24, r1
    4eae:	91 40       	sbci	r25, 0x01	; 1
    4eb0:	21 f4       	brne	.+8      	; 0x4eba <sysclk_enable_peripheral_clock+0x74>
    4eb2:	61 e0       	ldi	r22, 0x01	; 1
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	54 d5       	rcall	.+2728   	; 0x5960 <sysclk_enable_module>
    4eb8:	31 c1       	rjmp	.+610    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4eba:	89 81       	ldd	r24, Y+1	; 0x01
    4ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebe:	80 38       	cpi	r24, 0x80	; 128
    4ec0:	93 40       	sbci	r25, 0x03	; 3
    4ec2:	21 f4       	brne	.+8      	; 0x4ecc <sysclk_enable_peripheral_clock+0x86>
    4ec4:	61 e0       	ldi	r22, 0x01	; 1
    4ec6:	81 e0       	ldi	r24, 0x01	; 1
    4ec8:	4b d5       	rcall	.+2710   	; 0x5960 <sysclk_enable_module>
    4eca:	28 c1       	rjmp	.+592    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed0:	80 39       	cpi	r24, 0x90	; 144
    4ed2:	93 40       	sbci	r25, 0x03	; 3
    4ed4:	21 f4       	brne	.+8      	; 0x4ede <sysclk_enable_peripheral_clock+0x98>
    4ed6:	61 e0       	ldi	r22, 0x01	; 1
    4ed8:	82 e0       	ldi	r24, 0x02	; 2
    4eda:	42 d5       	rcall	.+2692   	; 0x5960 <sysclk_enable_module>
    4edc:	1f c1       	rjmp	.+574    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
    4ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee2:	81 15       	cp	r24, r1
    4ee4:	92 40       	sbci	r25, 0x02	; 2
    4ee6:	21 f4       	brne	.+8      	; 0x4ef0 <sysclk_enable_peripheral_clock+0xaa>
    4ee8:	62 e0       	ldi	r22, 0x02	; 2
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	39 d5       	rcall	.+2674   	; 0x5960 <sysclk_enable_module>
    4eee:	16 c1       	rjmp	.+556    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef4:	80 34       	cpi	r24, 0x40	; 64
    4ef6:	92 40       	sbci	r25, 0x02	; 2
    4ef8:	21 f4       	brne	.+8      	; 0x4f02 <sysclk_enable_peripheral_clock+0xbc>
    4efa:	62 e0       	ldi	r22, 0x02	; 2
    4efc:	82 e0       	ldi	r24, 0x02	; 2
    4efe:	30 d5       	rcall	.+2656   	; 0x5960 <sysclk_enable_module>
    4f00:	0d c1       	rjmp	.+538    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
    4f04:	9a 81       	ldd	r25, Y+2	; 0x02
    4f06:	81 15       	cp	r24, r1
    4f08:	93 40       	sbci	r25, 0x03	; 3
    4f0a:	21 f4       	brne	.+8      	; 0x4f14 <sysclk_enable_peripheral_clock+0xce>
    4f0c:	64 e0       	ldi	r22, 0x04	; 4
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	27 d5       	rcall	.+2638   	; 0x5960 <sysclk_enable_module>
    4f12:	04 c1       	rjmp	.+520    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f14:	89 81       	ldd	r24, Y+1	; 0x01
    4f16:	9a 81       	ldd	r25, Y+2	; 0x02
    4f18:	80 32       	cpi	r24, 0x20	; 32
    4f1a:	93 40       	sbci	r25, 0x03	; 3
    4f1c:	21 f4       	brne	.+8      	; 0x4f26 <sysclk_enable_peripheral_clock+0xe0>
    4f1e:	64 e0       	ldi	r22, 0x04	; 4
    4f20:	82 e0       	ldi	r24, 0x02	; 2
    4f22:	1e d5       	rcall	.+2620   	; 0x5960 <sysclk_enable_module>
    4f24:	fb c0       	rjmp	.+502    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f26:	89 81       	ldd	r24, Y+1	; 0x01
    4f28:	9a 81       	ldd	r25, Y+2	; 0x02
    4f2a:	81 15       	cp	r24, r1
    4f2c:	98 40       	sbci	r25, 0x08	; 8
    4f2e:	21 f4       	brne	.+8      	; 0x4f38 <sysclk_enable_peripheral_clock+0xf2>
    4f30:	61 e0       	ldi	r22, 0x01	; 1
    4f32:	83 e0       	ldi	r24, 0x03	; 3
    4f34:	15 d5       	rcall	.+2602   	; 0x5960 <sysclk_enable_module>
    4f36:	f2 c0       	rjmp	.+484    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f38:	89 81       	ldd	r24, Y+1	; 0x01
    4f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3c:	81 15       	cp	r24, r1
    4f3e:	99 40       	sbci	r25, 0x09	; 9
    4f40:	21 f4       	brne	.+8      	; 0x4f4a <sysclk_enable_peripheral_clock+0x104>
    4f42:	61 e0       	ldi	r22, 0x01	; 1
    4f44:	84 e0       	ldi	r24, 0x04	; 4
    4f46:	0c d5       	rcall	.+2584   	; 0x5960 <sysclk_enable_module>
    4f48:	e9 c0       	rjmp	.+466    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01
    4f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4e:	81 15       	cp	r24, r1
    4f50:	9a 40       	sbci	r25, 0x0A	; 10
    4f52:	21 f4       	brne	.+8      	; 0x4f5c <sysclk_enable_peripheral_clock+0x116>
    4f54:	61 e0       	ldi	r22, 0x01	; 1
    4f56:	85 e0       	ldi	r24, 0x05	; 5
    4f58:	03 d5       	rcall	.+2566   	; 0x5960 <sysclk_enable_module>
    4f5a:	e0 c0       	rjmp	.+448    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f5c:	89 81       	ldd	r24, Y+1	; 0x01
    4f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f60:	81 15       	cp	r24, r1
    4f62:	9b 40       	sbci	r25, 0x0B	; 11
    4f64:	21 f4       	brne	.+8      	; 0x4f6e <sysclk_enable_peripheral_clock+0x128>
    4f66:	61 e0       	ldi	r22, 0x01	; 1
    4f68:	86 e0       	ldi	r24, 0x06	; 6
    4f6a:	fa d4       	rcall	.+2548   	; 0x5960 <sysclk_enable_module>
    4f6c:	d7 c0       	rjmp	.+430    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f6e:	89 81       	ldd	r24, Y+1	; 0x01
    4f70:	9a 81       	ldd	r25, Y+2	; 0x02
    4f72:	80 34       	cpi	r24, 0x40	; 64
    4f74:	98 40       	sbci	r25, 0x08	; 8
    4f76:	21 f4       	brne	.+8      	; 0x4f80 <sysclk_enable_peripheral_clock+0x13a>
    4f78:	62 e0       	ldi	r22, 0x02	; 2
    4f7a:	83 e0       	ldi	r24, 0x03	; 3
    4f7c:	f1 d4       	rcall	.+2530   	; 0x5960 <sysclk_enable_module>
    4f7e:	ce c0       	rjmp	.+412    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f80:	89 81       	ldd	r24, Y+1	; 0x01
    4f82:	9a 81       	ldd	r25, Y+2	; 0x02
    4f84:	80 34       	cpi	r24, 0x40	; 64
    4f86:	99 40       	sbci	r25, 0x09	; 9
    4f88:	21 f4       	brne	.+8      	; 0x4f92 <sysclk_enable_peripheral_clock+0x14c>
    4f8a:	62 e0       	ldi	r22, 0x02	; 2
    4f8c:	84 e0       	ldi	r24, 0x04	; 4
    4f8e:	e8 d4       	rcall	.+2512   	; 0x5960 <sysclk_enable_module>
    4f90:	c5 c0       	rjmp	.+394    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4f92:	89 81       	ldd	r24, Y+1	; 0x01
    4f94:	9a 81       	ldd	r25, Y+2	; 0x02
    4f96:	80 34       	cpi	r24, 0x40	; 64
    4f98:	9a 40       	sbci	r25, 0x0A	; 10
    4f9a:	21 f4       	brne	.+8      	; 0x4fa4 <sysclk_enable_peripheral_clock+0x15e>
    4f9c:	62 e0       	ldi	r22, 0x02	; 2
    4f9e:	85 e0       	ldi	r24, 0x05	; 5
    4fa0:	df d4       	rcall	.+2494   	; 0x5960 <sysclk_enable_module>
    4fa2:	bc c0       	rjmp	.+376    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa8:	80 34       	cpi	r24, 0x40	; 64
    4faa:	9b 40       	sbci	r25, 0x0B	; 11
    4fac:	21 f4       	brne	.+8      	; 0x4fb6 <sysclk_enable_peripheral_clock+0x170>
    4fae:	62 e0       	ldi	r22, 0x02	; 2
    4fb0:	86 e0       	ldi	r24, 0x06	; 6
    4fb2:	d6 d4       	rcall	.+2476   	; 0x5960 <sysclk_enable_module>
    4fb4:	b3 c0       	rjmp	.+358    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fba:	80 39       	cpi	r24, 0x90	; 144
    4fbc:	98 40       	sbci	r25, 0x08	; 8
    4fbe:	21 f4       	brne	.+8      	; 0x4fc8 <sysclk_enable_peripheral_clock+0x182>
    4fc0:	64 e0       	ldi	r22, 0x04	; 4
    4fc2:	83 e0       	ldi	r24, 0x03	; 3
    4fc4:	cd d4       	rcall	.+2458   	; 0x5960 <sysclk_enable_module>
    4fc6:	aa c0       	rjmp	.+340    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4fc8:	89 81       	ldd	r24, Y+1	; 0x01
    4fca:	9a 81       	ldd	r25, Y+2	; 0x02
    4fcc:	80 39       	cpi	r24, 0x90	; 144
    4fce:	99 40       	sbci	r25, 0x09	; 9
    4fd0:	21 f4       	brne	.+8      	; 0x4fda <sysclk_enable_peripheral_clock+0x194>
    4fd2:	64 e0       	ldi	r22, 0x04	; 4
    4fd4:	84 e0       	ldi	r24, 0x04	; 4
    4fd6:	c4 d4       	rcall	.+2440   	; 0x5960 <sysclk_enable_module>
    4fd8:	a1 c0       	rjmp	.+322    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4fda:	89 81       	ldd	r24, Y+1	; 0x01
    4fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fde:	80 39       	cpi	r24, 0x90	; 144
    4fe0:	9a 40       	sbci	r25, 0x0A	; 10
    4fe2:	21 f4       	brne	.+8      	; 0x4fec <sysclk_enable_peripheral_clock+0x1a6>
    4fe4:	64 e0       	ldi	r22, 0x04	; 4
    4fe6:	85 e0       	ldi	r24, 0x05	; 5
    4fe8:	bb d4       	rcall	.+2422   	; 0x5960 <sysclk_enable_module>
    4fea:	98 c0       	rjmp	.+304    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4fec:	89 81       	ldd	r24, Y+1	; 0x01
    4fee:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff0:	80 39       	cpi	r24, 0x90	; 144
    4ff2:	9b 40       	sbci	r25, 0x0B	; 11
    4ff4:	21 f4       	brne	.+8      	; 0x4ffe <sysclk_enable_peripheral_clock+0x1b8>
    4ff6:	64 e0       	ldi	r22, 0x04	; 4
    4ff8:	86 e0       	ldi	r24, 0x06	; 6
    4ffa:	b2 d4       	rcall	.+2404   	; 0x5960 <sysclk_enable_module>
    4ffc:	8f c0       	rjmp	.+286    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	9a 81       	ldd	r25, Y+2	; 0x02
    5002:	80 3c       	cpi	r24, 0xC0	; 192
    5004:	98 40       	sbci	r25, 0x08	; 8
    5006:	21 f4       	brne	.+8      	; 0x5010 <sysclk_enable_peripheral_clock+0x1ca>
    5008:	68 e0       	ldi	r22, 0x08	; 8
    500a:	83 e0       	ldi	r24, 0x03	; 3
    500c:	a9 d4       	rcall	.+2386   	; 0x5960 <sysclk_enable_module>
    500e:	86 c0       	rjmp	.+268    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    5010:	89 81       	ldd	r24, Y+1	; 0x01
    5012:	9a 81       	ldd	r25, Y+2	; 0x02
    5014:	80 3c       	cpi	r24, 0xC0	; 192
    5016:	99 40       	sbci	r25, 0x09	; 9
    5018:	21 f4       	brne	.+8      	; 0x5022 <sysclk_enable_peripheral_clock+0x1dc>
    501a:	68 e0       	ldi	r22, 0x08	; 8
    501c:	84 e0       	ldi	r24, 0x04	; 4
    501e:	a0 d4       	rcall	.+2368   	; 0x5960 <sysclk_enable_module>
    5020:	7d c0       	rjmp	.+250    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    5022:	89 81       	ldd	r24, Y+1	; 0x01
    5024:	9a 81       	ldd	r25, Y+2	; 0x02
    5026:	80 3c       	cpi	r24, 0xC0	; 192
    5028:	9a 40       	sbci	r25, 0x0A	; 10
    502a:	21 f4       	brne	.+8      	; 0x5034 <sysclk_enable_peripheral_clock+0x1ee>
    502c:	68 e0       	ldi	r22, 0x08	; 8
    502e:	85 e0       	ldi	r24, 0x05	; 5
    5030:	97 d4       	rcall	.+2350   	; 0x5960 <sysclk_enable_module>
    5032:	74 c0       	rjmp	.+232    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    5034:	89 81       	ldd	r24, Y+1	; 0x01
    5036:	9a 81       	ldd	r25, Y+2	; 0x02
    5038:	80 3c       	cpi	r24, 0xC0	; 192
    503a:	9b 40       	sbci	r25, 0x0B	; 11
    503c:	21 f4       	brne	.+8      	; 0x5046 <sysclk_enable_peripheral_clock+0x200>
    503e:	68 e0       	ldi	r22, 0x08	; 8
    5040:	86 e0       	ldi	r24, 0x06	; 6
    5042:	8e d4       	rcall	.+2332   	; 0x5960 <sysclk_enable_module>
    5044:	6b c0       	rjmp	.+214    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    5046:	89 81       	ldd	r24, Y+1	; 0x01
    5048:	9a 81       	ldd	r25, Y+2	; 0x02
    504a:	80 3a       	cpi	r24, 0xA0	; 160
    504c:	98 40       	sbci	r25, 0x08	; 8
    504e:	21 f4       	brne	.+8      	; 0x5058 <sysclk_enable_peripheral_clock+0x212>
    5050:	60 e1       	ldi	r22, 0x10	; 16
    5052:	83 e0       	ldi	r24, 0x03	; 3
    5054:	85 d4       	rcall	.+2314   	; 0x5960 <sysclk_enable_module>
    5056:	62 c0       	rjmp	.+196    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	9a 81       	ldd	r25, Y+2	; 0x02
    505c:	80 3a       	cpi	r24, 0xA0	; 160
    505e:	99 40       	sbci	r25, 0x09	; 9
    5060:	21 f4       	brne	.+8      	; 0x506a <sysclk_enable_peripheral_clock+0x224>
    5062:	60 e1       	ldi	r22, 0x10	; 16
    5064:	84 e0       	ldi	r24, 0x04	; 4
    5066:	7c d4       	rcall	.+2296   	; 0x5960 <sysclk_enable_module>
    5068:	59 c0       	rjmp	.+178    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    506a:	89 81       	ldd	r24, Y+1	; 0x01
    506c:	9a 81       	ldd	r25, Y+2	; 0x02
    506e:	80 3a       	cpi	r24, 0xA0	; 160
    5070:	9a 40       	sbci	r25, 0x0A	; 10
    5072:	21 f4       	brne	.+8      	; 0x507c <sysclk_enable_peripheral_clock+0x236>
    5074:	60 e1       	ldi	r22, 0x10	; 16
    5076:	85 e0       	ldi	r24, 0x05	; 5
    5078:	73 d4       	rcall	.+2278   	; 0x5960 <sysclk_enable_module>
    507a:	50 c0       	rjmp	.+160    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	9a 81       	ldd	r25, Y+2	; 0x02
    5080:	80 3a       	cpi	r24, 0xA0	; 160
    5082:	9b 40       	sbci	r25, 0x0B	; 11
    5084:	21 f4       	brne	.+8      	; 0x508e <sysclk_enable_peripheral_clock+0x248>
    5086:	60 e1       	ldi	r22, 0x10	; 16
    5088:	86 e0       	ldi	r24, 0x06	; 6
    508a:	6a d4       	rcall	.+2260   	; 0x5960 <sysclk_enable_module>
    508c:	47 c0       	rjmp	.+142    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	9a 81       	ldd	r25, Y+2	; 0x02
    5092:	80 3b       	cpi	r24, 0xB0	; 176
    5094:	98 40       	sbci	r25, 0x08	; 8
    5096:	21 f4       	brne	.+8      	; 0x50a0 <sysclk_enable_peripheral_clock+0x25a>
    5098:	60 e2       	ldi	r22, 0x20	; 32
    509a:	83 e0       	ldi	r24, 0x03	; 3
    509c:	61 d4       	rcall	.+2242   	; 0x5960 <sysclk_enable_module>
    509e:	3e c0       	rjmp	.+124    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    50a0:	89 81       	ldd	r24, Y+1	; 0x01
    50a2:	9a 81       	ldd	r25, Y+2	; 0x02
    50a4:	80 3b       	cpi	r24, 0xB0	; 176
    50a6:	99 40       	sbci	r25, 0x09	; 9
    50a8:	21 f4       	brne	.+8      	; 0x50b2 <sysclk_enable_peripheral_clock+0x26c>
    50aa:	60 e2       	ldi	r22, 0x20	; 32
    50ac:	84 e0       	ldi	r24, 0x04	; 4
    50ae:	58 d4       	rcall	.+2224   	; 0x5960 <sysclk_enable_module>
    50b0:	35 c0       	rjmp	.+106    	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    50b2:	89 81       	ldd	r24, Y+1	; 0x01
    50b4:	9a 81       	ldd	r25, Y+2	; 0x02
    50b6:	80 3b       	cpi	r24, 0xB0	; 176
    50b8:	9a 40       	sbci	r25, 0x0A	; 10
    50ba:	21 f4       	brne	.+8      	; 0x50c4 <sysclk_enable_peripheral_clock+0x27e>
    50bc:	60 e2       	ldi	r22, 0x20	; 32
    50be:	85 e0       	ldi	r24, 0x05	; 5
    50c0:	4f d4       	rcall	.+2206   	; 0x5960 <sysclk_enable_module>
    50c2:	2c c0       	rjmp	.+88     	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    50c4:	89 81       	ldd	r24, Y+1	; 0x01
    50c6:	9a 81       	ldd	r25, Y+2	; 0x02
    50c8:	80 3b       	cpi	r24, 0xB0	; 176
    50ca:	9b 40       	sbci	r25, 0x0B	; 11
    50cc:	21 f4       	brne	.+8      	; 0x50d6 <sysclk_enable_peripheral_clock+0x290>
    50ce:	60 e2       	ldi	r22, 0x20	; 32
    50d0:	86 e0       	ldi	r24, 0x06	; 6
    50d2:	46 d4       	rcall	.+2188   	; 0x5960 <sysclk_enable_module>
    50d4:	23 c0       	rjmp	.+70     	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    50d6:	89 81       	ldd	r24, Y+1	; 0x01
    50d8:	9a 81       	ldd	r25, Y+2	; 0x02
    50da:	80 38       	cpi	r24, 0x80	; 128
    50dc:	94 40       	sbci	r25, 0x04	; 4
    50de:	21 f4       	brne	.+8      	; 0x50e8 <sysclk_enable_peripheral_clock+0x2a2>
    50e0:	60 e4       	ldi	r22, 0x40	; 64
    50e2:	83 e0       	ldi	r24, 0x03	; 3
    50e4:	3d d4       	rcall	.+2170   	; 0x5960 <sysclk_enable_module>
    50e6:	1a c0       	rjmp	.+52     	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
    50ea:	9a 81       	ldd	r25, Y+2	; 0x02
    50ec:	80 39       	cpi	r24, 0x90	; 144
    50ee:	94 40       	sbci	r25, 0x04	; 4
    50f0:	21 f4       	brne	.+8      	; 0x50fa <sysclk_enable_peripheral_clock+0x2b4>
    50f2:	60 e4       	ldi	r22, 0x40	; 64
    50f4:	84 e0       	ldi	r24, 0x04	; 4
    50f6:	34 d4       	rcall	.+2152   	; 0x5960 <sysclk_enable_module>
    50f8:	11 c0       	rjmp	.+34     	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    50fa:	89 81       	ldd	r24, Y+1	; 0x01
    50fc:	9a 81       	ldd	r25, Y+2	; 0x02
    50fe:	80 3a       	cpi	r24, 0xA0	; 160
    5100:	94 40       	sbci	r25, 0x04	; 4
    5102:	21 f4       	brne	.+8      	; 0x510c <sysclk_enable_peripheral_clock+0x2c6>
    5104:	60 e4       	ldi	r22, 0x40	; 64
    5106:	85 e0       	ldi	r24, 0x05	; 5
    5108:	2b d4       	rcall	.+2134   	; 0x5960 <sysclk_enable_module>
    510a:	08 c0       	rjmp	.+16     	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	9a 81       	ldd	r25, Y+2	; 0x02
    5110:	80 3b       	cpi	r24, 0xB0	; 176
    5112:	94 40       	sbci	r25, 0x04	; 4
    5114:	19 f4       	brne	.+6      	; 0x511c <sysclk_enable_peripheral_clock+0x2d6>
    5116:	60 e4       	ldi	r22, 0x40	; 64
    5118:	86 e0       	ldi	r24, 0x06	; 6
    511a:	22 d4       	rcall	.+2116   	; 0x5960 <sysclk_enable_module>
    511c:	00 00       	nop
    511e:	0f 90       	pop	r0
    5120:	0f 90       	pop	r0
    5122:	df 91       	pop	r29
    5124:	cf 91       	pop	r28
    5126:	08 95       	ret

00005128 <ioport_set_pin_high>:
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
    512c:	cd b7       	in	r28, 0x3d	; 61
    512e:	de b7       	in	r29, 0x3e	; 62
    5130:	2a 97       	sbiw	r28, 0x0a	; 10
    5132:	cd bf       	out	0x3d, r28	; 61
    5134:	de bf       	out	0x3e, r29	; 62
    5136:	8a 87       	std	Y+10, r24	; 0x0a
    5138:	8a 85       	ldd	r24, Y+10	; 0x0a
    513a:	89 83       	std	Y+1, r24	; 0x01
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	8a 83       	std	Y+2, r24	; 0x02
    5140:	89 81       	ldd	r24, Y+1	; 0x01
    5142:	8b 83       	std	Y+3, r24	; 0x03
    5144:	8b 81       	ldd	r24, Y+3	; 0x03
    5146:	8c 83       	std	Y+4, r24	; 0x04
    5148:	8c 81       	ldd	r24, Y+4	; 0x04
    514a:	86 95       	lsr	r24
    514c:	86 95       	lsr	r24
    514e:	86 95       	lsr	r24
    5150:	8d 83       	std	Y+5, r24	; 0x05
    5152:	8d 81       	ldd	r24, Y+5	; 0x05
    5154:	88 2f       	mov	r24, r24
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	88 0f       	add	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	82 95       	swap	r24
    515e:	92 95       	swap	r25
    5160:	90 7f       	andi	r25, 0xF0	; 240
    5162:	98 27       	eor	r25, r24
    5164:	80 7f       	andi	r24, 0xF0	; 240
    5166:	98 27       	eor	r25, r24
    5168:	9a 5f       	subi	r25, 0xFA	; 250
    516a:	8e 83       	std	Y+6, r24	; 0x06
    516c:	9f 83       	std	Y+7, r25	; 0x07
    516e:	8a 81       	ldd	r24, Y+2	; 0x02
    5170:	88 23       	and	r24, r24
    5172:	a9 f0       	breq	.+42     	; 0x519e <ioport_set_pin_high+0x76>
    5174:	89 81       	ldd	r24, Y+1	; 0x01
    5176:	88 87       	std	Y+8, r24	; 0x08
    5178:	88 85       	ldd	r24, Y+8	; 0x08
    517a:	88 2f       	mov	r24, r24
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	9c 01       	movw	r18, r24
    5180:	27 70       	andi	r18, 0x07	; 7
    5182:	33 27       	eor	r19, r19
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	02 c0       	rjmp	.+4      	; 0x518e <ioport_set_pin_high+0x66>
    518a:	88 0f       	add	r24, r24
    518c:	99 1f       	adc	r25, r25
    518e:	2a 95       	dec	r18
    5190:	e2 f7       	brpl	.-8      	; 0x518a <ioport_set_pin_high+0x62>
    5192:	28 2f       	mov	r18, r24
    5194:	8e 81       	ldd	r24, Y+6	; 0x06
    5196:	9f 81       	ldd	r25, Y+7	; 0x07
    5198:	fc 01       	movw	r30, r24
    519a:	25 83       	std	Z+5, r18	; 0x05
    519c:	14 c0       	rjmp	.+40     	; 0x51c6 <ioport_set_pin_high+0x9e>
    519e:	89 81       	ldd	r24, Y+1	; 0x01
    51a0:	89 87       	std	Y+9, r24	; 0x09
    51a2:	89 85       	ldd	r24, Y+9	; 0x09
    51a4:	88 2f       	mov	r24, r24
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	9c 01       	movw	r18, r24
    51aa:	27 70       	andi	r18, 0x07	; 7
    51ac:	33 27       	eor	r19, r19
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	02 c0       	rjmp	.+4      	; 0x51b8 <ioport_set_pin_high+0x90>
    51b4:	88 0f       	add	r24, r24
    51b6:	99 1f       	adc	r25, r25
    51b8:	2a 95       	dec	r18
    51ba:	e2 f7       	brpl	.-8      	; 0x51b4 <ioport_set_pin_high+0x8c>
    51bc:	28 2f       	mov	r18, r24
    51be:	8e 81       	ldd	r24, Y+6	; 0x06
    51c0:	9f 81       	ldd	r25, Y+7	; 0x07
    51c2:	fc 01       	movw	r30, r24
    51c4:	26 83       	std	Z+6, r18	; 0x06
    51c6:	00 00       	nop
    51c8:	2a 96       	adiw	r28, 0x0a	; 10
    51ca:	cd bf       	out	0x3d, r28	; 61
    51cc:	de bf       	out	0x3e, r29	; 62
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	08 95       	ret

000051d4 <usart_serial_init>:
    51d4:	cf 93       	push	r28
    51d6:	df 93       	push	r29
    51d8:	cd b7       	in	r28, 0x3d	; 61
    51da:	de b7       	in	r29, 0x3e	; 62
    51dc:	2b 97       	sbiw	r28, 0x0b	; 11
    51de:	cd bf       	out	0x3d, r28	; 61
    51e0:	de bf       	out	0x3e, r29	; 62
    51e2:	88 87       	std	Y+8, r24	; 0x08
    51e4:	99 87       	std	Y+9, r25	; 0x09
    51e6:	6a 87       	std	Y+10, r22	; 0x0a
    51e8:	7b 87       	std	Y+11, r23	; 0x0b
    51ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    51ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    51ee:	fc 01       	movw	r30, r24
    51f0:	84 81       	ldd	r24, Z+4	; 0x04
    51f2:	8d 83       	std	Y+5, r24	; 0x05
    51f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    51f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    51f8:	fc 01       	movw	r30, r24
    51fa:	85 81       	ldd	r24, Z+5	; 0x05
    51fc:	8e 83       	std	Y+6, r24	; 0x06
    51fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5200:	9b 85       	ldd	r25, Y+11	; 0x0b
    5202:	fc 01       	movw	r30, r24
    5204:	86 81       	ldd	r24, Z+6	; 0x06
    5206:	8f 83       	std	Y+7, r24	; 0x07
    5208:	8a 85       	ldd	r24, Y+10	; 0x0a
    520a:	9b 85       	ldd	r25, Y+11	; 0x0b
    520c:	fc 01       	movw	r30, r24
    520e:	80 81       	ld	r24, Z
    5210:	91 81       	ldd	r25, Z+1	; 0x01
    5212:	a2 81       	ldd	r26, Z+2	; 0x02
    5214:	b3 81       	ldd	r27, Z+3	; 0x03
    5216:	89 83       	std	Y+1, r24	; 0x01
    5218:	9a 83       	std	Y+2, r25	; 0x02
    521a:	ab 83       	std	Y+3, r26	; 0x03
    521c:	bc 83       	std	Y+4, r27	; 0x04
    521e:	88 85       	ldd	r24, Y+8	; 0x08
    5220:	99 85       	ldd	r25, Y+9	; 0x09
    5222:	80 3a       	cpi	r24, 0xA0	; 160
    5224:	98 40       	sbci	r25, 0x08	; 8
    5226:	19 f4       	brne	.+6      	; 0x522e <usart_serial_init+0x5a>
    5228:	60 e1       	ldi	r22, 0x10	; 16
    522a:	83 e0       	ldi	r24, 0x03	; 3
    522c:	99 d3       	rcall	.+1842   	; 0x5960 <sysclk_enable_module>
    522e:	88 85       	ldd	r24, Y+8	; 0x08
    5230:	99 85       	ldd	r25, Y+9	; 0x09
    5232:	80 3b       	cpi	r24, 0xB0	; 176
    5234:	98 40       	sbci	r25, 0x08	; 8
    5236:	19 f4       	brne	.+6      	; 0x523e <usart_serial_init+0x6a>
    5238:	60 e2       	ldi	r22, 0x20	; 32
    523a:	83 e0       	ldi	r24, 0x03	; 3
    523c:	91 d3       	rcall	.+1826   	; 0x5960 <sysclk_enable_module>
    523e:	88 85       	ldd	r24, Y+8	; 0x08
    5240:	99 85       	ldd	r25, Y+9	; 0x09
    5242:	80 3a       	cpi	r24, 0xA0	; 160
    5244:	99 40       	sbci	r25, 0x09	; 9
    5246:	19 f4       	brne	.+6      	; 0x524e <usart_serial_init+0x7a>
    5248:	60 e1       	ldi	r22, 0x10	; 16
    524a:	84 e0       	ldi	r24, 0x04	; 4
    524c:	89 d3       	rcall	.+1810   	; 0x5960 <sysclk_enable_module>
    524e:	88 85       	ldd	r24, Y+8	; 0x08
    5250:	99 85       	ldd	r25, Y+9	; 0x09
    5252:	80 3b       	cpi	r24, 0xB0	; 176
    5254:	99 40       	sbci	r25, 0x09	; 9
    5256:	19 f4       	brne	.+6      	; 0x525e <usart_serial_init+0x8a>
    5258:	60 e2       	ldi	r22, 0x20	; 32
    525a:	84 e0       	ldi	r24, 0x04	; 4
    525c:	81 d3       	rcall	.+1794   	; 0x5960 <sysclk_enable_module>
    525e:	88 85       	ldd	r24, Y+8	; 0x08
    5260:	99 85       	ldd	r25, Y+9	; 0x09
    5262:	80 3a       	cpi	r24, 0xA0	; 160
    5264:	9a 40       	sbci	r25, 0x0A	; 10
    5266:	19 f4       	brne	.+6      	; 0x526e <usart_serial_init+0x9a>
    5268:	60 e1       	ldi	r22, 0x10	; 16
    526a:	85 e0       	ldi	r24, 0x05	; 5
    526c:	79 d3       	rcall	.+1778   	; 0x5960 <sysclk_enable_module>
    526e:	88 85       	ldd	r24, Y+8	; 0x08
    5270:	99 85       	ldd	r25, Y+9	; 0x09
    5272:	80 3b       	cpi	r24, 0xB0	; 176
    5274:	9a 40       	sbci	r25, 0x0A	; 10
    5276:	19 f4       	brne	.+6      	; 0x527e <usart_serial_init+0xaa>
    5278:	60 e2       	ldi	r22, 0x20	; 32
    527a:	85 e0       	ldi	r24, 0x05	; 5
    527c:	71 d3       	rcall	.+1762   	; 0x5960 <sysclk_enable_module>
    527e:	88 85       	ldd	r24, Y+8	; 0x08
    5280:	99 85       	ldd	r25, Y+9	; 0x09
    5282:	80 3a       	cpi	r24, 0xA0	; 160
    5284:	9b 40       	sbci	r25, 0x0B	; 11
    5286:	19 f4       	brne	.+6      	; 0x528e <usart_serial_init+0xba>
    5288:	60 e1       	ldi	r22, 0x10	; 16
    528a:	86 e0       	ldi	r24, 0x06	; 6
    528c:	69 d3       	rcall	.+1746   	; 0x5960 <sysclk_enable_module>
    528e:	88 85       	ldd	r24, Y+8	; 0x08
    5290:	99 85       	ldd	r25, Y+9	; 0x09
    5292:	80 3b       	cpi	r24, 0xB0	; 176
    5294:	9b 40       	sbci	r25, 0x0B	; 11
    5296:	19 f4       	brne	.+6      	; 0x529e <usart_serial_init+0xca>
    5298:	60 e2       	ldi	r22, 0x20	; 32
    529a:	86 e0       	ldi	r24, 0x06	; 6
    529c:	61 d3       	rcall	.+1730   	; 0x5960 <sysclk_enable_module>
    529e:	88 85       	ldd	r24, Y+8	; 0x08
    52a0:	99 85       	ldd	r25, Y+9	; 0x09
    52a2:	9e 01       	movw	r18, r28
    52a4:	2f 5f       	subi	r18, 0xFF	; 255
    52a6:	3f 4f       	sbci	r19, 0xFF	; 255
    52a8:	b9 01       	movw	r22, r18
    52aa:	0e 94 64 43 	call	0x86c8	; 0x86c8 <usart_init_rs232>
    52ae:	88 23       	and	r24, r24
    52b0:	11 f0       	breq	.+4      	; 0x52b6 <usart_serial_init+0xe2>
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	01 c0       	rjmp	.+2      	; 0x52b8 <usart_serial_init+0xe4>
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	2b 96       	adiw	r28, 0x0b	; 11
    52ba:	cd bf       	out	0x3d, r28	; 61
    52bc:	de bf       	out	0x3e, r29	; 62
    52be:	df 91       	pop	r29
    52c0:	cf 91       	pop	r28
    52c2:	08 95       	ret

000052c4 <init_GPS_pins_and_usart>:
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
    52c8:	cd b7       	in	r28, 0x3d	; 61
    52ca:	de b7       	in	r29, 0x3e	; 62
    52cc:	80 ea       	ldi	r24, 0xA0	; 160
    52ce:	96 e0       	ldi	r25, 0x06	; 6
    52d0:	20 ea       	ldi	r18, 0xA0	; 160
    52d2:	36 e0       	ldi	r19, 0x06	; 6
    52d4:	f9 01       	movw	r30, r18
    52d6:	20 81       	ld	r18, Z
    52d8:	20 68       	ori	r18, 0x80	; 128
    52da:	fc 01       	movw	r30, r24
    52dc:	20 83       	st	Z, r18
    52de:	80 ea       	ldi	r24, 0xA0	; 160
    52e0:	96 e0       	ldi	r25, 0x06	; 6
    52e2:	20 ea       	ldi	r18, 0xA0	; 160
    52e4:	36 e0       	ldi	r19, 0x06	; 6
    52e6:	f9 01       	movw	r30, r18
    52e8:	20 81       	ld	r18, Z
    52ea:	2f 7b       	andi	r18, 0xBF	; 191
    52ec:	fc 01       	movw	r30, r24
    52ee:	20 83       	st	Z, r18
    52f0:	8f e2       	ldi	r24, 0x2F	; 47
    52f2:	1a df       	rcall	.-460    	; 0x5128 <ioport_set_pin_high>
    52f4:	80 eb       	ldi	r24, 0xB0	; 176
    52f6:	9b e0       	ldi	r25, 0x0B	; 11
    52f8:	a6 dd       	rcall	.-1204   	; 0x4e46 <sysclk_enable_peripheral_clock>
    52fa:	68 e0       	ldi	r22, 0x08	; 8
    52fc:	70 e2       	ldi	r23, 0x20	; 32
    52fe:	80 eb       	ldi	r24, 0xB0	; 176
    5300:	9b e0       	ldi	r25, 0x0B	; 11
    5302:	68 df       	rcall	.-304    	; 0x51d4 <usart_serial_init>
    5304:	00 00       	nop
    5306:	df 91       	pop	r29
    5308:	cf 91       	pop	r28
    530a:	08 95       	ret

0000530c <altitude_from_gpgga>:

void altitude_from_gpgga(char *NMEAMESSAGE,char * buff)
{
    530c:	cf 93       	push	r28
    530e:	df 93       	push	r29
    5310:	00 d0       	rcall	.+0      	; 0x5312 <altitude_from_gpgga+0x6>
    5312:	1f 92       	push	r1
    5314:	cd b7       	in	r28, 0x3d	; 61
    5316:	de b7       	in	r29, 0x3e	; 62
    5318:	89 83       	std	Y+1, r24	; 0x01
    531a:	9a 83       	std	Y+2, r25	; 0x02
    531c:	6b 83       	std	Y+3, r22	; 0x03
    531e:	7c 83       	std	Y+4, r23	; 0x04
	findAfterCommma(8, NMEAMESSAGE,buff);
    5320:	2b 81       	ldd	r18, Y+3	; 0x03
    5322:	3c 81       	ldd	r19, Y+4	; 0x04
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	9a 81       	ldd	r25, Y+2	; 0x02
    5328:	a9 01       	movw	r20, r18
    532a:	bc 01       	movw	r22, r24
    532c:	88 e0       	ldi	r24, 0x08	; 8
    532e:	6b d0       	rcall	.+214    	; 0x5406 <findAfterCommma>
}
    5330:	00 00       	nop
    5332:	24 96       	adiw	r28, 0x04	; 4
    5334:	cd bf       	out	0x3d, r28	; 61
    5336:	de bf       	out	0x3e, r29	; 62
    5338:	df 91       	pop	r29
    533a:	cf 91       	pop	r28
    533c:	08 95       	ret

0000533e <latitude_from_gpgga>:
void latitude_from_gpgga(char *NMEAMESSAGE,char * buff)
{
    533e:	cf 93       	push	r28
    5340:	df 93       	push	r29
    5342:	00 d0       	rcall	.+0      	; 0x5344 <latitude_from_gpgga+0x6>
    5344:	1f 92       	push	r1
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
    534a:	89 83       	std	Y+1, r24	; 0x01
    534c:	9a 83       	std	Y+2, r25	; 0x02
    534e:	6b 83       	std	Y+3, r22	; 0x03
    5350:	7c 83       	std	Y+4, r23	; 0x04
	findAfterCommma(1, NMEAMESSAGE,buff);
    5352:	2b 81       	ldd	r18, Y+3	; 0x03
    5354:	3c 81       	ldd	r19, Y+4	; 0x04
    5356:	89 81       	ldd	r24, Y+1	; 0x01
    5358:	9a 81       	ldd	r25, Y+2	; 0x02
    535a:	a9 01       	movw	r20, r18
    535c:	bc 01       	movw	r22, r24
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	52 d0       	rcall	.+164    	; 0x5406 <findAfterCommma>
}
    5362:	00 00       	nop
    5364:	24 96       	adiw	r28, 0x04	; 4
    5366:	cd bf       	out	0x3d, r28	; 61
    5368:	de bf       	out	0x3e, r29	; 62
    536a:	df 91       	pop	r29
    536c:	cf 91       	pop	r28
    536e:	08 95       	ret

00005370 <longitude_from_gpgga>:
void longitude_from_gpgga(char *NMEAMESSAGE,char * buff)
{
    5370:	cf 93       	push	r28
    5372:	df 93       	push	r29
    5374:	00 d0       	rcall	.+0      	; 0x5376 <longitude_from_gpgga+0x6>
    5376:	1f 92       	push	r1
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
    537c:	89 83       	std	Y+1, r24	; 0x01
    537e:	9a 83       	std	Y+2, r25	; 0x02
    5380:	6b 83       	std	Y+3, r22	; 0x03
    5382:	7c 83       	std	Y+4, r23	; 0x04
	findAfterCommma(3, NMEAMESSAGE,buff);
    5384:	2b 81       	ldd	r18, Y+3	; 0x03
    5386:	3c 81       	ldd	r19, Y+4	; 0x04
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	9a 81       	ldd	r25, Y+2	; 0x02
    538c:	a9 01       	movw	r20, r18
    538e:	bc 01       	movw	r22, r24
    5390:	83 e0       	ldi	r24, 0x03	; 3
    5392:	39 d0       	rcall	.+114    	; 0x5406 <findAfterCommma>
}
    5394:	00 00       	nop
    5396:	24 96       	adiw	r28, 0x04	; 4
    5398:	cd bf       	out	0x3d, r28	; 61
    539a:	de bf       	out	0x3e, r29	; 62
    539c:	df 91       	pop	r29
    539e:	cf 91       	pop	r28
    53a0:	08 95       	ret

000053a2 <time_from_gpgga>:
void time_from_gpgga(char *NMEAMESSAGE,char * buff)
{
    53a2:	cf 93       	push	r28
    53a4:	df 93       	push	r29
    53a6:	00 d0       	rcall	.+0      	; 0x53a8 <time_from_gpgga+0x6>
    53a8:	1f 92       	push	r1
    53aa:	cd b7       	in	r28, 0x3d	; 61
    53ac:	de b7       	in	r29, 0x3e	; 62
    53ae:	89 83       	std	Y+1, r24	; 0x01
    53b0:	9a 83       	std	Y+2, r25	; 0x02
    53b2:	6b 83       	std	Y+3, r22	; 0x03
    53b4:	7c 83       	std	Y+4, r23	; 0x04
	findAfterCommma(0, NMEAMESSAGE,buff);
    53b6:	2b 81       	ldd	r18, Y+3	; 0x03
    53b8:	3c 81       	ldd	r19, Y+4	; 0x04
    53ba:	89 81       	ldd	r24, Y+1	; 0x01
    53bc:	9a 81       	ldd	r25, Y+2	; 0x02
    53be:	a9 01       	movw	r20, r18
    53c0:	bc 01       	movw	r22, r24
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	20 d0       	rcall	.+64     	; 0x5406 <findAfterCommma>
}
    53c6:	00 00       	nop
    53c8:	24 96       	adiw	r28, 0x04	; 4
    53ca:	cd bf       	out	0x3d, r28	; 61
    53cc:	de bf       	out	0x3e, r29	; 62
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	08 95       	ret

000053d4 <num_sat_from_gpgga>:
void num_sat_from_gpgga(char *NMEAMESSAGE,char * buff)
{
    53d4:	cf 93       	push	r28
    53d6:	df 93       	push	r29
    53d8:	00 d0       	rcall	.+0      	; 0x53da <num_sat_from_gpgga+0x6>
    53da:	1f 92       	push	r1
    53dc:	cd b7       	in	r28, 0x3d	; 61
    53de:	de b7       	in	r29, 0x3e	; 62
    53e0:	89 83       	std	Y+1, r24	; 0x01
    53e2:	9a 83       	std	Y+2, r25	; 0x02
    53e4:	6b 83       	std	Y+3, r22	; 0x03
    53e6:	7c 83       	std	Y+4, r23	; 0x04
	findAfterCommma(6, NMEAMESSAGE,buff);
    53e8:	2b 81       	ldd	r18, Y+3	; 0x03
    53ea:	3c 81       	ldd	r19, Y+4	; 0x04
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	9a 81       	ldd	r25, Y+2	; 0x02
    53f0:	a9 01       	movw	r20, r18
    53f2:	bc 01       	movw	r22, r24
    53f4:	86 e0       	ldi	r24, 0x06	; 6
    53f6:	07 d0       	rcall	.+14     	; 0x5406 <findAfterCommma>
}
    53f8:	00 00       	nop
    53fa:	24 96       	adiw	r28, 0x04	; 4
    53fc:	cd bf       	out	0x3d, r28	; 61
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	df 91       	pop	r29
    5402:	cf 91       	pop	r28
    5404:	08 95       	ret

00005406 <findAfterCommma>:
void findAfterCommma(uint8_t Cnum,char* NMEAMESSAGE,char * buff)
{
    5406:	cf 93       	push	r28
    5408:	df 93       	push	r29
    540a:	cd b7       	in	r28, 0x3d	; 61
    540c:	de b7       	in	r29, 0x3e	; 62
    540e:	28 97       	sbiw	r28, 0x08	; 8
    5410:	cd bf       	out	0x3d, r28	; 61
    5412:	de bf       	out	0x3e, r29	; 62
    5414:	8c 83       	std	Y+4, r24	; 0x04
    5416:	6d 83       	std	Y+5, r22	; 0x05
    5418:	7e 83       	std	Y+6, r23	; 0x06
    541a:	4f 83       	std	Y+7, r20	; 0x07
    541c:	58 87       	std	Y+8, r21	; 0x08
	uint8_t strpos=0;
    541e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Ccount=0;
    5420:	1a 82       	std	Y+2, r1	; 0x02
	while (Ccount<Cnum)
    5422:	59 c0       	rjmp	.+178    	; 0x54d6 <findAfterCommma+0xd0>
	{
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==NULL||NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]=='\n')
    5424:	99 81       	ldd	r25, Y+1	; 0x01
    5426:	8d ec       	ldi	r24, 0xCD	; 205
    5428:	98 9f       	mul	r25, r24
    542a:	81 2d       	mov	r24, r1
    542c:	11 24       	eor	r1, r1
    542e:	82 95       	swap	r24
    5430:	86 95       	lsr	r24
    5432:	86 95       	lsr	r24
    5434:	83 70       	andi	r24, 0x03	; 3
    5436:	20 e5       	ldi	r18, 0x50	; 80
    5438:	82 9f       	mul	r24, r18
    543a:	80 2d       	mov	r24, r0
    543c:	11 24       	eor	r1, r1
    543e:	29 2f       	mov	r18, r25
    5440:	28 1b       	sub	r18, r24
    5442:	82 2f       	mov	r24, r18
    5444:	88 2f       	mov	r24, r24
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	2d 81       	ldd	r18, Y+5	; 0x05
    544a:	3e 81       	ldd	r19, Y+6	; 0x06
    544c:	82 0f       	add	r24, r18
    544e:	93 1f       	adc	r25, r19
    5450:	fc 01       	movw	r30, r24
    5452:	80 81       	ld	r24, Z
    5454:	08 2e       	mov	r0, r24
    5456:	00 0c       	add	r0, r0
    5458:	99 0b       	sbc	r25, r25
    545a:	89 2b       	or	r24, r25
    545c:	09 f4       	brne	.+2      	; 0x5460 <findAfterCommma+0x5a>
    545e:	cd c0       	rjmp	.+410    	; 0x55fa <findAfterCommma+0x1f4>
    5460:	99 81       	ldd	r25, Y+1	; 0x01
    5462:	8d ec       	ldi	r24, 0xCD	; 205
    5464:	98 9f       	mul	r25, r24
    5466:	81 2d       	mov	r24, r1
    5468:	11 24       	eor	r1, r1
    546a:	82 95       	swap	r24
    546c:	86 95       	lsr	r24
    546e:	86 95       	lsr	r24
    5470:	83 70       	andi	r24, 0x03	; 3
    5472:	20 e5       	ldi	r18, 0x50	; 80
    5474:	82 9f       	mul	r24, r18
    5476:	80 2d       	mov	r24, r0
    5478:	11 24       	eor	r1, r1
    547a:	f9 2f       	mov	r31, r25
    547c:	f8 1b       	sub	r31, r24
    547e:	8f 2f       	mov	r24, r31
    5480:	88 2f       	mov	r24, r24
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	2d 81       	ldd	r18, Y+5	; 0x05
    5486:	3e 81       	ldd	r19, Y+6	; 0x06
    5488:	82 0f       	add	r24, r18
    548a:	93 1f       	adc	r25, r19
    548c:	fc 01       	movw	r30, r24
    548e:	80 81       	ld	r24, Z
    5490:	8a 30       	cpi	r24, 0x0A	; 10
    5492:	09 f4       	brne	.+2      	; 0x5496 <findAfterCommma+0x90>
    5494:	b2 c0       	rjmp	.+356    	; 0x55fa <findAfterCommma+0x1f4>
		return;
		
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==',')
    5496:	99 81       	ldd	r25, Y+1	; 0x01
    5498:	8d ec       	ldi	r24, 0xCD	; 205
    549a:	98 9f       	mul	r25, r24
    549c:	81 2d       	mov	r24, r1
    549e:	11 24       	eor	r1, r1
    54a0:	82 95       	swap	r24
    54a2:	86 95       	lsr	r24
    54a4:	86 95       	lsr	r24
    54a6:	83 70       	andi	r24, 0x03	; 3
    54a8:	20 e5       	ldi	r18, 0x50	; 80
    54aa:	82 9f       	mul	r24, r18
    54ac:	80 2d       	mov	r24, r0
    54ae:	11 24       	eor	r1, r1
    54b0:	f9 2f       	mov	r31, r25
    54b2:	f8 1b       	sub	r31, r24
    54b4:	8f 2f       	mov	r24, r31
    54b6:	88 2f       	mov	r24, r24
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	2d 81       	ldd	r18, Y+5	; 0x05
    54bc:	3e 81       	ldd	r19, Y+6	; 0x06
    54be:	82 0f       	add	r24, r18
    54c0:	93 1f       	adc	r25, r19
    54c2:	fc 01       	movw	r30, r24
    54c4:	80 81       	ld	r24, Z
    54c6:	8c 32       	cpi	r24, 0x2C	; 44
    54c8:	19 f4       	brne	.+6      	; 0x54d0 <findAfterCommma+0xca>
		Ccount++;
    54ca:	8a 81       	ldd	r24, Y+2	; 0x02
    54cc:	8f 5f       	subi	r24, 0xFF	; 255
    54ce:	8a 83       	std	Y+2, r24	; 0x02
		strpos++;
    54d0:	89 81       	ldd	r24, Y+1	; 0x01
    54d2:	8f 5f       	subi	r24, 0xFF	; 255
    54d4:	89 83       	std	Y+1, r24	; 0x01
}
void findAfterCommma(uint8_t Cnum,char* NMEAMESSAGE,char * buff)
{
	uint8_t strpos=0;
	uint8_t Ccount=0;
	while (Ccount<Cnum)
    54d6:	9a 81       	ldd	r25, Y+2	; 0x02
    54d8:	8c 81       	ldd	r24, Y+4	; 0x04
    54da:	98 17       	cp	r25, r24
    54dc:	08 f4       	brcc	.+2      	; 0x54e0 <findAfterCommma+0xda>
    54de:	a2 cf       	rjmp	.-188    	; 0x5424 <findAfterCommma+0x1e>
		
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==',')
		Ccount++;
		strpos++;
	}
	uint8_t buffPos=0;
    54e0:	1b 82       	std	Y+3, r1	; 0x03
	while(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]!=',')
    54e2:	6f c0       	rjmp	.+222    	; 0x55c2 <findAfterCommma+0x1bc>
	{
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==NULL||NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]=='\n')
    54e4:	99 81       	ldd	r25, Y+1	; 0x01
    54e6:	8d ec       	ldi	r24, 0xCD	; 205
    54e8:	98 9f       	mul	r25, r24
    54ea:	81 2d       	mov	r24, r1
    54ec:	11 24       	eor	r1, r1
    54ee:	82 95       	swap	r24
    54f0:	86 95       	lsr	r24
    54f2:	86 95       	lsr	r24
    54f4:	83 70       	andi	r24, 0x03	; 3
    54f6:	20 e5       	ldi	r18, 0x50	; 80
    54f8:	82 9f       	mul	r24, r18
    54fa:	80 2d       	mov	r24, r0
    54fc:	11 24       	eor	r1, r1
    54fe:	f9 2f       	mov	r31, r25
    5500:	f8 1b       	sub	r31, r24
    5502:	8f 2f       	mov	r24, r31
    5504:	88 2f       	mov	r24, r24
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	2d 81       	ldd	r18, Y+5	; 0x05
    550a:	3e 81       	ldd	r19, Y+6	; 0x06
    550c:	82 0f       	add	r24, r18
    550e:	93 1f       	adc	r25, r19
    5510:	fc 01       	movw	r30, r24
    5512:	80 81       	ld	r24, Z
    5514:	08 2e       	mov	r0, r24
    5516:	00 0c       	add	r0, r0
    5518:	99 0b       	sbc	r25, r25
    551a:	89 2b       	or	r24, r25
    551c:	09 f4       	brne	.+2      	; 0x5520 <findAfterCommma+0x11a>
    551e:	6f c0       	rjmp	.+222    	; 0x55fe <findAfterCommma+0x1f8>
    5520:	99 81       	ldd	r25, Y+1	; 0x01
    5522:	8d ec       	ldi	r24, 0xCD	; 205
    5524:	98 9f       	mul	r25, r24
    5526:	81 2d       	mov	r24, r1
    5528:	11 24       	eor	r1, r1
    552a:	82 95       	swap	r24
    552c:	86 95       	lsr	r24
    552e:	86 95       	lsr	r24
    5530:	83 70       	andi	r24, 0x03	; 3
    5532:	20 e5       	ldi	r18, 0x50	; 80
    5534:	82 9f       	mul	r24, r18
    5536:	80 2d       	mov	r24, r0
    5538:	11 24       	eor	r1, r1
    553a:	f9 2f       	mov	r31, r25
    553c:	f8 1b       	sub	r31, r24
    553e:	8f 2f       	mov	r24, r31
    5540:	88 2f       	mov	r24, r24
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	2d 81       	ldd	r18, Y+5	; 0x05
    5546:	3e 81       	ldd	r19, Y+6	; 0x06
    5548:	82 0f       	add	r24, r18
    554a:	93 1f       	adc	r25, r19
    554c:	fc 01       	movw	r30, r24
    554e:	80 81       	ld	r24, Z
    5550:	8a 30       	cpi	r24, 0x0A	; 10
    5552:	09 f4       	brne	.+2      	; 0x5556 <findAfterCommma+0x150>
    5554:	54 c0       	rjmp	.+168    	; 0x55fe <findAfterCommma+0x1f8>
		return;
		
		buff[buffPos%WORD_MAXSIZE]=NMEAMESSAGE[strpos%SENTENCE_MAXSIZE];
    5556:	9b 81       	ldd	r25, Y+3	; 0x03
    5558:	8d ec       	ldi	r24, 0xCD	; 205
    555a:	98 9f       	mul	r25, r24
    555c:	81 2d       	mov	r24, r1
    555e:	11 24       	eor	r1, r1
    5560:	86 95       	lsr	r24
    5562:	86 95       	lsr	r24
    5564:	86 95       	lsr	r24
    5566:	88 0f       	add	r24, r24
    5568:	28 2f       	mov	r18, r24
    556a:	22 0f       	add	r18, r18
    556c:	22 0f       	add	r18, r18
    556e:	82 0f       	add	r24, r18
    5570:	f9 2f       	mov	r31, r25
    5572:	f8 1b       	sub	r31, r24
    5574:	8f 2f       	mov	r24, r31
    5576:	88 2f       	mov	r24, r24
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	2f 81       	ldd	r18, Y+7	; 0x07
    557c:	38 85       	ldd	r19, Y+8	; 0x08
    557e:	82 0f       	add	r24, r18
    5580:	93 1f       	adc	r25, r19
    5582:	39 81       	ldd	r19, Y+1	; 0x01
    5584:	2d ec       	ldi	r18, 0xCD	; 205
    5586:	32 9f       	mul	r19, r18
    5588:	21 2d       	mov	r18, r1
    558a:	11 24       	eor	r1, r1
    558c:	22 95       	swap	r18
    558e:	26 95       	lsr	r18
    5590:	26 95       	lsr	r18
    5592:	23 70       	andi	r18, 0x03	; 3
    5594:	40 e5       	ldi	r20, 0x50	; 80
    5596:	24 9f       	mul	r18, r20
    5598:	20 2d       	mov	r18, r0
    559a:	11 24       	eor	r1, r1
    559c:	43 2f       	mov	r20, r19
    559e:	42 1b       	sub	r20, r18
    55a0:	24 2f       	mov	r18, r20
    55a2:	22 2f       	mov	r18, r18
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	4d 81       	ldd	r20, Y+5	; 0x05
    55a8:	5e 81       	ldd	r21, Y+6	; 0x06
    55aa:	24 0f       	add	r18, r20
    55ac:	35 1f       	adc	r19, r21
    55ae:	f9 01       	movw	r30, r18
    55b0:	20 81       	ld	r18, Z
    55b2:	fc 01       	movw	r30, r24
    55b4:	20 83       	st	Z, r18
		
		buffPos++;
    55b6:	8b 81       	ldd	r24, Y+3	; 0x03
    55b8:	8f 5f       	subi	r24, 0xFF	; 255
    55ba:	8b 83       	std	Y+3, r24	; 0x03
		strpos++;
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	8f 5f       	subi	r24, 0xFF	; 255
    55c0:	89 83       	std	Y+1, r24	; 0x01
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==',')
		Ccount++;
		strpos++;
	}
	uint8_t buffPos=0;
	while(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]!=',')
    55c2:	99 81       	ldd	r25, Y+1	; 0x01
    55c4:	8d ec       	ldi	r24, 0xCD	; 205
    55c6:	98 9f       	mul	r25, r24
    55c8:	81 2d       	mov	r24, r1
    55ca:	11 24       	eor	r1, r1
    55cc:	82 95       	swap	r24
    55ce:	86 95       	lsr	r24
    55d0:	86 95       	lsr	r24
    55d2:	83 70       	andi	r24, 0x03	; 3
    55d4:	20 e5       	ldi	r18, 0x50	; 80
    55d6:	82 9f       	mul	r24, r18
    55d8:	80 2d       	mov	r24, r0
    55da:	11 24       	eor	r1, r1
    55dc:	f9 2f       	mov	r31, r25
    55de:	f8 1b       	sub	r31, r24
    55e0:	8f 2f       	mov	r24, r31
    55e2:	88 2f       	mov	r24, r24
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	2d 81       	ldd	r18, Y+5	; 0x05
    55e8:	3e 81       	ldd	r19, Y+6	; 0x06
    55ea:	82 0f       	add	r24, r18
    55ec:	93 1f       	adc	r25, r19
    55ee:	fc 01       	movw	r30, r24
    55f0:	80 81       	ld	r24, Z
    55f2:	8c 32       	cpi	r24, 0x2C	; 44
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <findAfterCommma+0x1f2>
    55f6:	76 cf       	rjmp	.-276    	; 0x54e4 <findAfterCommma+0xde>
    55f8:	03 c0       	rjmp	.+6      	; 0x5600 <findAfterCommma+0x1fa>
	uint8_t strpos=0;
	uint8_t Ccount=0;
	while (Ccount<Cnum)
	{
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==NULL||NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]=='\n')
		return;
    55fa:	00 00       	nop
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <findAfterCommma+0x1fa>
	}
	uint8_t buffPos=0;
	while(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]!=',')
	{
		if(NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]==NULL||NMEAMESSAGE[strpos%SENTENCE_MAXSIZE]=='\n')
		return;
    55fe:	00 00       	nop
		buff[buffPos%WORD_MAXSIZE]=NMEAMESSAGE[strpos%SENTENCE_MAXSIZE];
		
		buffPos++;
		strpos++;
	}
}
    5600:	28 96       	adiw	r28, 0x08	; 8
    5602:	cd bf       	out	0x3d, r28	; 61
    5604:	de bf       	out	0x3e, r29	; 62
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	08 95       	ret

0000560c <newOLogInit>:
#include "uart.h"
static uart_device openLog;


void newOLogInit()//initializes the openLog uart communication interface
{
    560c:	cf 93       	push	r28
    560e:	df 93       	push	r29
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    5614:	80 e0       	ldi	r24, 0x00	; 0
    5616:	92 ec       	ldi	r25, 0xC2	; 194
    5618:	a1 e0       	ldi	r26, 0x01	; 1
    561a:	b0 e0       	ldi	r27, 0x00	; 0
    561c:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <openLog+0x6>
    5620:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <openLog+0x7>
    5624:	a0 93 d2 21 	sts	0x21D2, r26	; 0x8021d2 <openLog+0x8>
    5628:	b0 93 d3 21 	sts	0x21D3, r27	; 0x8021d3 <openLog+0x9>
    openLog.Port=P_OPENLOG_PORT;
    562c:	80 e4       	ldi	r24, 0x40	; 64
    562e:	96 e0       	ldi	r25, 0x06	; 6
    5630:	80 93 ca 21 	sts	0x21CA, r24	; 0x8021ca <openLog>
    5634:	90 93 cb 21 	sts	0x21CB, r25	; 0x8021cb <openLog+0x1>
	openLog.Usart=P_OPENLOG_UART;
    5638:	80 ea       	ldi	r24, 0xA0	; 160
    563a:	98 e0       	ldi	r25, 0x08	; 8
    563c:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <openLog+0x2>
    5640:	90 93 cd 21 	sts	0x21CD, r25	; 0x8021cd <openLog+0x3>
	openLog.tx=OPENLOG_TX_PIN;
    5644:	88 e0       	ldi	r24, 0x08	; 8
    5646:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <openLog+0x5>
	openLog.rx=OPENLOG_RX_PIN;
    564a:	84 e0       	ldi	r24, 0x04	; 4
    564c:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <openLog+0x4>
	uart_init(&openLog);//function that initializes uart
    5650:	8a ec       	ldi	r24, 0xCA	; 202
    5652:	91 e2       	ldi	r25, 0x21	; 33
    5654:	0e 94 ba 48 	call	0x9174	; 0x9174 <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n\0");
    5658:	85 e0       	ldi	r24, 0x05	; 5
    565a:	91 e2       	ldi	r25, 0x21	; 33
    565c:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
}
    5660:	00 00       	nop
    5662:	df 91       	pop	r29
    5664:	cf 91       	pop	r28
    5666:	08 95       	ret

00005668 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    5668:	cf 93       	push	r28
    566a:	df 93       	push	r29
    566c:	1f 92       	push	r1
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    5672:	8f e3       	ldi	r24, 0x3F	; 63
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	fc 01       	movw	r30, r24
    5678:	80 81       	ld	r24, Z
    567a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    567c:	f8 94       	cli
	return flags;
    567e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5680:	0f 90       	pop	r0
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	08 95       	ret

00005688 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5688:	cf 93       	push	r28
    568a:	df 93       	push	r29
    568c:	1f 92       	push	r1
    568e:	cd b7       	in	r28, 0x3d	; 61
    5690:	de b7       	in	r29, 0x3e	; 62
    5692:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    5694:	8f e3       	ldi	r24, 0x3F	; 63
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	29 81       	ldd	r18, Y+1	; 0x01
    569a:	fc 01       	movw	r30, r24
    569c:	20 83       	st	Z, r18
}
    569e:	00 00       	nop
    56a0:	0f 90       	pop	r0
    56a2:	df 91       	pop	r29
    56a4:	cf 91       	pop	r28
    56a6:	08 95       	ret

000056a8 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
    56ac:	1f 92       	push	r1
    56ae:	1f 92       	push	r1
    56b0:	cd b7       	in	r28, 0x3d	; 61
    56b2:	de b7       	in	r29, 0x3e	; 62
    56b4:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    56b6:	d8 df       	rcall	.-80     	; 0x5668 <cpu_irq_save>
    56b8:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    56ba:	80 e5       	ldi	r24, 0x50	; 80
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	20 e5       	ldi	r18, 0x50	; 80
    56c0:	30 e0       	ldi	r19, 0x00	; 0
    56c2:	f9 01       	movw	r30, r18
    56c4:	30 81       	ld	r19, Z
    56c6:	2a 81       	ldd	r18, Y+2	; 0x02
    56c8:	23 2b       	or	r18, r19
    56ca:	fc 01       	movw	r30, r24
    56cc:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    56ce:	89 81       	ldd	r24, Y+1	; 0x01
    56d0:	db df       	rcall	.-74     	; 0x5688 <cpu_irq_restore>
}
    56d2:	00 00       	nop
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	08 95       	ret

000056de <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	1f 92       	push	r1
    56e4:	1f 92       	push	r1
    56e6:	cd b7       	in	r28, 0x3d	; 61
    56e8:	de b7       	in	r29, 0x3e	; 62
    56ea:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    56ec:	80 e5       	ldi	r24, 0x50	; 80
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	22 e0       	ldi	r18, 0x02	; 2
    56f2:	fc 01       	movw	r30, r24
    56f4:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    56f6:	b8 df       	rcall	.-144    	; 0x5668 <cpu_irq_save>
    56f8:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    56fa:	80 e5       	ldi	r24, 0x50	; 80
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	20 e5       	ldi	r18, 0x50	; 80
    5700:	30 e0       	ldi	r19, 0x00	; 0
    5702:	f9 01       	movw	r30, r18
    5704:	30 81       	ld	r19, Z
    5706:	2a 81       	ldd	r18, Y+2	; 0x02
    5708:	23 2b       	or	r18, r19
    570a:	fc 01       	movw	r30, r24
    570c:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    570e:	89 81       	ldd	r24, Y+1	; 0x01
    5710:	bb df       	rcall	.-138    	; 0x5688 <cpu_irq_restore>
}
    5712:	00 00       	nop
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
    5718:	df 91       	pop	r29
    571a:	cf 91       	pop	r28
    571c:	08 95       	ret

0000571e <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    571e:	cf 93       	push	r28
    5720:	df 93       	push	r29
    5722:	1f 92       	push	r1
    5724:	1f 92       	push	r1
    5726:	cd b7       	in	r28, 0x3d	; 61
    5728:	de b7       	in	r29, 0x3e	; 62
    572a:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    572c:	9d df       	rcall	.-198    	; 0x5668 <cpu_irq_save>
    572e:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    5730:	80 e5       	ldi	r24, 0x50	; 80
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	20 e5       	ldi	r18, 0x50	; 80
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	f9 01       	movw	r30, r18
    573a:	20 81       	ld	r18, Z
    573c:	32 2f       	mov	r19, r18
    573e:	2a 81       	ldd	r18, Y+2	; 0x02
    5740:	20 95       	com	r18
    5742:	23 23       	and	r18, r19
    5744:	fc 01       	movw	r30, r24
    5746:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5748:	89 81       	ldd	r24, Y+1	; 0x01
    574a:	9e df       	rcall	.-196    	; 0x5688 <cpu_irq_restore>
}
    574c:	00 00       	nop
    574e:	0f 90       	pop	r0
    5750:	0f 90       	pop	r0
    5752:	df 91       	pop	r29
    5754:	cf 91       	pop	r28
    5756:	08 95       	ret

00005758 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    5758:	cf 93       	push	r28
    575a:	df 93       	push	r29
    575c:	1f 92       	push	r1
    575e:	cd b7       	in	r28, 0x3d	; 61
    5760:	de b7       	in	r29, 0x3e	; 62
    5762:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    5764:	89 81       	ldd	r24, Y+1	; 0x01
    5766:	88 30       	cpi	r24, 0x08	; 8
    5768:	19 f0       	breq	.+6      	; 0x5770 <osc_enable+0x18>
		osc_enable_internal(id);
    576a:	89 81       	ldd	r24, Y+1	; 0x01
    576c:	9d df       	rcall	.-198    	; 0x56a8 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    576e:	02 c0       	rjmp	.+4      	; 0x5774 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    5770:	89 81       	ldd	r24, Y+1	; 0x01
    5772:	b5 df       	rcall	.-150    	; 0x56de <osc_enable_external>
	}
}
    5774:	00 00       	nop
    5776:	0f 90       	pop	r0
    5778:	df 91       	pop	r29
    577a:	cf 91       	pop	r28
    577c:	08 95       	ret

0000577e <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    577e:	cf 93       	push	r28
    5780:	df 93       	push	r29
    5782:	1f 92       	push	r1
    5784:	cd b7       	in	r28, 0x3d	; 61
    5786:	de b7       	in	r29, 0x3e	; 62
    5788:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    578a:	80 e5       	ldi	r24, 0x50	; 80
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	fc 01       	movw	r30, r24
    5790:	91 81       	ldd	r25, Z+1	; 0x01
    5792:	89 81       	ldd	r24, Y+1	; 0x01
    5794:	98 23       	and	r25, r24
    5796:	81 e0       	ldi	r24, 0x01	; 1
    5798:	99 23       	and	r25, r25
    579a:	09 f4       	brne	.+2      	; 0x579e <osc_is_ready+0x20>
    579c:	80 e0       	ldi	r24, 0x00	; 0
}
    579e:	0f 90       	pop	r0
    57a0:	df 91       	pop	r29
    57a2:	cf 91       	pop	r28
    57a4:	08 95       	ret

000057a6 <osc_user_calibration>:
 * \arg \c OSC_ID_RC2MHZ or \c OSC_ID_RC32MHZ.
 * \param calib The specific calibration value required:
 *
 */
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
    57aa:	00 d0       	rcall	.+0      	; 0x57ac <osc_user_calibration+0x6>
    57ac:	cd b7       	in	r28, 0x3d	; 61
    57ae:	de b7       	in	r29, 0x3e	; 62
    57b0:	89 83       	std	Y+1, r24	; 0x01
    57b2:	6a 83       	std	Y+2, r22	; 0x02
    57b4:	7b 83       	std	Y+3, r23	; 0x03
	switch (id) {
    57b6:	89 81       	ldd	r24, Y+1	; 0x01
    57b8:	88 2f       	mov	r24, r24
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	81 30       	cpi	r24, 0x01	; 1
    57be:	91 05       	cpc	r25, r1
    57c0:	19 f0       	breq	.+6      	; 0x57c8 <osc_user_calibration+0x22>
    57c2:	02 97       	sbiw	r24, 0x02	; 2
    57c4:	81 f0       	breq	.+32     	; 0x57e6 <osc_user_calibration+0x40>
		break;
#endif

	default:
		Assert(false);
		break;
    57c6:	1e c0       	rjmp	.+60     	; 0x5804 <osc_user_calibration+0x5e>
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
	switch (id) {
	case OSC_ID_RC2MHZ:
#if !XMEGA_E
		DFLLRC2M.CALA=LSB(calib);
    57c8:	88 e6       	ldi	r24, 0x68	; 104
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	9e 01       	movw	r18, r28
    57ce:	2e 5f       	subi	r18, 0xFE	; 254
    57d0:	3f 4f       	sbci	r19, 0xFF	; 255
    57d2:	f9 01       	movw	r30, r18
    57d4:	20 81       	ld	r18, Z
    57d6:	fc 01       	movw	r30, r24
    57d8:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC2M.CALB=MSB(calib);
    57da:	88 e6       	ldi	r24, 0x68	; 104
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	2b 81       	ldd	r18, Y+3	; 0x03
    57e0:	fc 01       	movw	r30, r24
    57e2:	23 83       	std	Z+3, r18	; 0x03
#endif
		break;
    57e4:	0f c0       	rjmp	.+30     	; 0x5804 <osc_user_calibration+0x5e>

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    57e6:	80 e6       	ldi	r24, 0x60	; 96
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	9e 01       	movw	r18, r28
    57ec:	2e 5f       	subi	r18, 0xFE	; 254
    57ee:	3f 4f       	sbci	r19, 0xFF	; 255
    57f0:	f9 01       	movw	r30, r18
    57f2:	20 81       	ld	r18, Z
    57f4:	fc 01       	movw	r30, r24
    57f6:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    57f8:	80 e6       	ldi	r24, 0x60	; 96
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	2b 81       	ldd	r18, Y+3	; 0x03
    57fe:	fc 01       	movw	r30, r24
    5800:	23 83       	std	Z+3, r18	; 0x03
		break;
    5802:	00 00       	nop

	default:
		Assert(false);
		break;
	}
}
    5804:	00 00       	nop
    5806:	23 96       	adiw	r28, 0x03	; 3
    5808:	cd bf       	out	0x3d, r28	; 61
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	08 95       	ret

00005812 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    5812:	cf 93       	push	r28
    5814:	df 93       	push	r29
    5816:	1f 92       	push	r1
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    581e:	00 00       	nop
    5820:	89 81       	ldd	r24, Y+1	; 0x01
    5822:	ad df       	rcall	.-166    	; 0x577e <osc_is_ready>
    5824:	98 2f       	mov	r25, r24
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	89 27       	eor	r24, r25
    582a:	88 23       	and	r24, r24
    582c:	c9 f7       	brne	.-14     	; 0x5820 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    582e:	00 00       	nop
    5830:	0f 90       	pop	r0
    5832:	df 91       	pop	r29
    5834:	cf 91       	pop	r28
    5836:	08 95       	ret

00005838 <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    5838:	cf 93       	push	r28
    583a:	df 93       	push	r29
    583c:	1f 92       	push	r1
    583e:	cd b7       	in	r28, 0x3d	; 61
    5840:	de b7       	in	r29, 0x3e	; 62
    5842:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    5844:	89 81       	ldd	r24, Y+1	; 0x01
    5846:	88 2f       	mov	r24, r24
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	8a 30       	cpi	r24, 0x0A	; 10
    584c:	91 05       	cpc	r25, r1
    584e:	a1 f0       	breq	.+40     	; 0x5878 <sysclk_rtcsrc_enable+0x40>
    5850:	8b 30       	cpi	r24, 0x0B	; 11
    5852:	91 05       	cpc	r25, r1
    5854:	34 f4       	brge	.+12     	; 0x5862 <sysclk_rtcsrc_enable+0x2a>
    5856:	82 30       	cpi	r24, 0x02	; 2
    5858:	91 05       	cpc	r25, r1
    585a:	71 f0       	breq	.+28     	; 0x5878 <sysclk_rtcsrc_enable+0x40>
    585c:	04 97       	sbiw	r24, 0x04	; 4
    585e:	39 f0       	breq	.+14     	; 0x586e <sysclk_rtcsrc_enable+0x36>
    5860:	10 c0       	rjmp	.+32     	; 0x5882 <sysclk_rtcsrc_enable+0x4a>
    5862:	8c 30       	cpi	r24, 0x0C	; 12
    5864:	91 05       	cpc	r25, r1
    5866:	19 f0       	breq	.+6      	; 0x586e <sysclk_rtcsrc_enable+0x36>
    5868:	0e 97       	sbiw	r24, 0x0e	; 14
    586a:	31 f0       	breq	.+12     	; 0x5878 <sysclk_rtcsrc_enable+0x40>
    586c:	0a c0       	rjmp	.+20     	; 0x5882 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    586e:	84 e0       	ldi	r24, 0x04	; 4
    5870:	73 df       	rcall	.-282    	; 0x5758 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    5872:	84 e0       	ldi	r24, 0x04	; 4
    5874:	ce df       	rcall	.-100    	; 0x5812 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    5876:	05 c0       	rjmp	.+10     	; 0x5882 <sysclk_rtcsrc_enable+0x4a>
    5878:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    587a:	6e df       	rcall	.-292    	; 0x5758 <osc_enable>
    587c:	88 e0       	ldi	r24, 0x08	; 8
    587e:	c9 df       	rcall	.-110    	; 0x5812 <osc_wait_ready>
		break;
    5880:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    5882:	80 e4       	ldi	r24, 0x40	; 64
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	29 81       	ldd	r18, Y+1	; 0x01
    5888:	21 60       	ori	r18, 0x01	; 1
    588a:	fc 01       	movw	r30, r24
    588c:	23 83       	std	Z+3, r18	; 0x03
}
    588e:	00 00       	nop
    5890:	0f 90       	pop	r0
    5892:	df 91       	pop	r29
    5894:	cf 91       	pop	r28
    5896:	08 95       	ret

00005898 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    5898:	cf 93       	push	r28
    589a:	df 93       	push	r29
    589c:	1f 92       	push	r1
    589e:	cd b7       	in	r28, 0x3d	; 61
    58a0:	de b7       	in	r29, 0x3e	; 62
    58a2:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    58a4:	89 81       	ldd	r24, Y+1	; 0x01
    58a6:	88 2f       	mov	r24, r24
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	bc 01       	movw	r22, r24
    58ac:	82 e0       	ldi	r24, 0x02	; 2
    58ae:	20 d1       	rcall	.+576    	; 0x5af0 <nvm_read_byte>
}
    58b0:	0f 90       	pop	r0
    58b2:	df 91       	pop	r29
    58b4:	cf 91       	pop	r28
    58b6:	08 95       	ret

000058b8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    58b8:	0f 93       	push	r16
    58ba:	1f 93       	push	r17
    58bc:	cf 93       	push	r28
    58be:	df 93       	push	r29
    58c0:	00 d0       	rcall	.+0      	; 0x58c2 <sysclk_init+0xa>
    58c2:	00 d0       	rcall	.+0      	; 0x58c4 <sysclk_init+0xc>
    58c4:	cd b7       	in	r28, 0x3d	; 61
    58c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    58c8:	80 e7       	ldi	r24, 0x70	; 112
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	89 83       	std	Y+1, r24	; 0x01
    58ce:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    58d0:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    58d2:	1b 82       	std	Y+3, r1	; 0x03
    58d4:	0d c0       	rjmp	.+26     	; 0x58f0 <sysclk_init+0x38>
		*(reg++) = 0xff;
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	9a 81       	ldd	r25, Y+2	; 0x02
    58da:	9c 01       	movw	r18, r24
    58dc:	2f 5f       	subi	r18, 0xFF	; 255
    58de:	3f 4f       	sbci	r19, 0xFF	; 255
    58e0:	29 83       	std	Y+1, r18	; 0x01
    58e2:	3a 83       	std	Y+2, r19	; 0x02
    58e4:	2f ef       	ldi	r18, 0xFF	; 255
    58e6:	fc 01       	movw	r30, r24
    58e8:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    58ea:	8b 81       	ldd	r24, Y+3	; 0x03
    58ec:	8f 5f       	subi	r24, 0xFF	; 255
    58ee:	8b 83       	std	Y+3, r24	; 0x03
    58f0:	8b 81       	ldd	r24, Y+3	; 0x03
    58f2:	87 30       	cpi	r24, 0x07	; 7
    58f4:	80 f3       	brcs	.-32     	; 0x58d6 <sysclk_init+0x1e>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    58f6:	8e 01       	movw	r16, r28
    58f8:	0b 5f       	subi	r16, 0xFB	; 251
    58fa:	1f 4f       	sbci	r17, 0xFF	; 255
    58fc:	0f 5f       	subi	r16, 0xFF	; 255
    58fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5900:	8c e1       	ldi	r24, 0x1C	; 28
    5902:	ca df       	rcall	.-108    	; 0x5898 <nvm_read_production_signature_row>
    5904:	f8 01       	movw	r30, r16
    5906:	80 83       	st	Z, r24
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    5908:	8e 01       	movw	r16, r28
    590a:	0b 5f       	subi	r16, 0xFB	; 251
    590c:	1f 4f       	sbci	r17, 0xFF	; 255
    590e:	8d e1       	ldi	r24, 0x1D	; 29
    5910:	c3 df       	rcall	.-122    	; 0x5898 <nvm_read_production_signature_row>
    5912:	f8 01       	movw	r30, r16
    5914:	80 83       	st	Z, r24
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    5916:	8d 81       	ldd	r24, Y+5	; 0x05
    5918:	9e 81       	ldd	r25, Y+6	; 0x06
    591a:	01 96       	adiw	r24, 0x01	; 1
    591c:	21 f4       	brne	.+8      	; 0x5926 <sysclk_init+0x6e>
		cal = 0x2340;
    591e:	80 e4       	ldi	r24, 0x40	; 64
    5920:	93 e2       	ldi	r25, 0x23	; 35
    5922:	8d 83       	std	Y+5, r24	; 0x05
    5924:	9e 83       	std	Y+6, r25	; 0x06
	}
	osc_user_calibration(OSC_ID_RC32MHZ,cal);
    5926:	8d 81       	ldd	r24, Y+5	; 0x05
    5928:	9e 81       	ldd	r25, Y+6	; 0x06
    592a:	bc 01       	movw	r22, r24
    592c:	82 e0       	ldi	r24, 0x02	; 2
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    592e:	3b df       	rcall	.-394    	; 0x57a6 <osc_user_calibration>
    5930:	82 e0       	ldi	r24, 0x02	; 2
			osc_wait_ready(OSC_ID_RC32MHZ);
    5932:	12 df       	rcall	.-476    	; 0x5758 <osc_enable>
    5934:	82 e0       	ldi	r24, 0x02	; 2
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    5936:	6d df       	rcall	.-294    	; 0x5812 <osc_wait_ready>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    5938:	00 00       	nop
    593a:	61 e0       	ldi	r22, 0x01	; 1
    593c:	80 e4       	ldi	r24, 0x40	; 64
    593e:	90 e0       	ldi	r25, 0x00	; 0
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    5940:	d1 d0       	rcall	.+418    	; 0x5ae4 <ccp_write_io>
    5942:	8c 81       	ldd	r24, Y+4	; 0x04
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    5944:	88 23       	and	r24, r24
    5946:	11 f4       	brne	.+4      	; 0x594c <sysclk_init+0x94>
    5948:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    594a:	e9 de       	rcall	.-558    	; 0x571e <osc_disable>
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	74 df       	rcall	.-280    	; 0x5838 <sysclk_rtcsrc_enable>
#endif
}
    5950:	26 96       	adiw	r28, 0x06	; 6
    5952:	cd bf       	out	0x3d, r28	; 61
    5954:	de bf       	out	0x3e, r29	; 62
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	1f 91       	pop	r17
    595c:	0f 91       	pop	r16
    595e:	08 95       	ret

00005960 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    5960:	cf 93       	push	r28
    5962:	df 93       	push	r29
    5964:	00 d0       	rcall	.+0      	; 0x5966 <sysclk_enable_module+0x6>
    5966:	cd b7       	in	r28, 0x3d	; 61
    5968:	de b7       	in	r29, 0x3e	; 62
    596a:	8a 83       	std	Y+2, r24	; 0x02
    596c:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    596e:	7c de       	rcall	.-776    	; 0x5668 <cpu_irq_save>
    5970:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5972:	8a 81       	ldd	r24, Y+2	; 0x02
    5974:	88 2f       	mov	r24, r24
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	80 59       	subi	r24, 0x90	; 144
    597a:	9f 4f       	sbci	r25, 0xFF	; 255
    597c:	2a 81       	ldd	r18, Y+2	; 0x02
    597e:	22 2f       	mov	r18, r18
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	20 59       	subi	r18, 0x90	; 144
    5984:	3f 4f       	sbci	r19, 0xFF	; 255
    5986:	f9 01       	movw	r30, r18
    5988:	20 81       	ld	r18, Z
    598a:	32 2f       	mov	r19, r18
    598c:	2b 81       	ldd	r18, Y+3	; 0x03
    598e:	20 95       	com	r18
    5990:	23 23       	and	r18, r19
    5992:	fc 01       	movw	r30, r24
    5994:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    5996:	89 81       	ldd	r24, Y+1	; 0x01
    5998:	77 de       	rcall	.-786    	; 0x5688 <cpu_irq_restore>
}
    599a:	00 00       	nop
    599c:	23 96       	adiw	r28, 0x03	; 3
    599e:	cd bf       	out	0x3d, r28	; 61
    59a0:	de bf       	out	0x3e, r29	; 62
    59a2:	df 91       	pop	r29
    59a4:	cf 91       	pop	r28
    59a6:	08 95       	ret

000059a8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    59a8:	cf 93       	push	r28
    59aa:	df 93       	push	r29
    59ac:	00 d0       	rcall	.+0      	; 0x59ae <sysclk_disable_module+0x6>
    59ae:	cd b7       	in	r28, 0x3d	; 61
    59b0:	de b7       	in	r29, 0x3e	; 62
    59b2:	8a 83       	std	Y+2, r24	; 0x02
    59b4:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    59b6:	58 de       	rcall	.-848    	; 0x5668 <cpu_irq_save>
    59b8:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    59ba:	8a 81       	ldd	r24, Y+2	; 0x02
    59bc:	88 2f       	mov	r24, r24
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	80 59       	subi	r24, 0x90	; 144
    59c2:	9f 4f       	sbci	r25, 0xFF	; 255
    59c4:	2a 81       	ldd	r18, Y+2	; 0x02
    59c6:	22 2f       	mov	r18, r18
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	20 59       	subi	r18, 0x90	; 144
    59cc:	3f 4f       	sbci	r19, 0xFF	; 255
    59ce:	f9 01       	movw	r30, r18
    59d0:	30 81       	ld	r19, Z
    59d2:	2b 81       	ldd	r18, Y+3	; 0x03
    59d4:	23 2b       	or	r18, r19
    59d6:	fc 01       	movw	r30, r24
    59d8:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    59da:	89 81       	ldd	r24, Y+1	; 0x01
    59dc:	55 de       	rcall	.-854    	; 0x5688 <cpu_irq_restore>
}
    59de:	00 00       	nop
    59e0:	23 96       	adiw	r28, 0x03	; 3
    59e2:	cd bf       	out	0x3d, r28	; 61
    59e4:	de bf       	out	0x3e, r29	; 62
    59e6:	df 91       	pop	r29
    59e8:	cf 91       	pop	r28
    59ea:	08 95       	ret

000059ec <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    59ec:	cf 93       	push	r28
    59ee:	df 93       	push	r29
    59f0:	00 d0       	rcall	.+0      	; 0x59f2 <usart_serial_putchar+0x6>
    59f2:	cd b7       	in	r28, 0x3d	; 61
    59f4:	de b7       	in	r29, 0x3e	; 62
    59f6:	89 83       	std	Y+1, r24	; 0x01
    59f8:	9a 83       	std	Y+2, r25	; 0x02
    59fa:	6b 83       	std	Y+3, r22	; 0x03
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5a00:	6b 81       	ldd	r22, Y+3	; 0x03
    5a02:	0e 94 aa 43 	call	0x8754	; 0x8754 <usart_putchar>
    5a06:	23 96       	adiw	r28, 0x03	; 3
    5a08:	cd bf       	out	0x3d, r28	; 61
    5a0a:	de bf       	out	0x3e, r29	; 62
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	08 95       	ret

00005a12 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
    5a16:	00 d0       	rcall	.+0      	; 0x5a18 <usart_serial_write_packet+0x6>
    5a18:	00 d0       	rcall	.+0      	; 0x5a1a <usart_serial_write_packet+0x8>
    5a1a:	cd b7       	in	r28, 0x3d	; 61
    5a1c:	de b7       	in	r29, 0x3e	; 62
    5a1e:	89 83       	std	Y+1, r24	; 0x01
    5a20:	9a 83       	std	Y+2, r25	; 0x02
    5a22:	6b 83       	std	Y+3, r22	; 0x03
    5a24:	7c 83       	std	Y+4, r23	; 0x04
    5a26:	4d 83       	std	Y+5, r20	; 0x05
    5a28:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    5a2a:	12 c0       	rjmp	.+36     	; 0x5a50 <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    5a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    5a30:	fc 01       	movw	r30, r24
    5a32:	20 81       	ld	r18, Z
    5a34:	89 81       	ldd	r24, Y+1	; 0x01
    5a36:	9a 81       	ldd	r25, Y+2	; 0x02
    5a38:	62 2f       	mov	r22, r18
    5a3a:	d8 df       	rcall	.-80     	; 0x59ec <usart_serial_putchar>
		len--;
    5a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a40:	01 97       	sbiw	r24, 0x01	; 1
    5a42:	8d 83       	std	Y+5, r24	; 0x05
    5a44:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    5a46:	8b 81       	ldd	r24, Y+3	; 0x03
    5a48:	9c 81       	ldd	r25, Y+4	; 0x04
    5a4a:	01 96       	adiw	r24, 0x01	; 1
    5a4c:	8b 83       	std	Y+3, r24	; 0x03
    5a4e:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    5a50:	8d 81       	ldd	r24, Y+5	; 0x05
    5a52:	9e 81       	ldd	r25, Y+6	; 0x06
    5a54:	89 2b       	or	r24, r25
    5a56:	51 f7       	brne	.-44     	; 0x5a2c <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    5a58:	80 e0       	ldi	r24, 0x00	; 0
}
    5a5a:	26 96       	adiw	r28, 0x06	; 6
    5a5c:	cd bf       	out	0x3d, r28	; 61
    5a5e:	de bf       	out	0x3e, r29	; 62
    5a60:	df 91       	pop	r29
    5a62:	cf 91       	pop	r28
    5a64:	08 95       	ret

00005a66 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    5a66:	cf 93       	push	r28
    5a68:	df 93       	push	r29
    5a6a:	00 d0       	rcall	.+0      	; 0x5a6c <_read+0x6>
    5a6c:	cd b7       	in	r28, 0x3d	; 61
    5a6e:	de b7       	in	r29, 0x3e	; 62
    5a70:	8a 83       	std	Y+2, r24	; 0x02
    5a72:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    5a74:	20 91 09 28 	lds	r18, 0x2809	; 0x802809 <ptr_get>
    5a78:	30 91 0a 28 	lds	r19, 0x280A	; 0x80280a <ptr_get+0x1>
    5a7c:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <stdio_base>
    5a80:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <stdio_base+0x1>
    5a84:	ae 01       	movw	r20, r28
    5a86:	4f 5f       	subi	r20, 0xFF	; 255
    5a88:	5f 4f       	sbci	r21, 0xFF	; 255
    5a8a:	ba 01       	movw	r22, r20
    5a8c:	f9 01       	movw	r30, r18
    5a8e:	19 95       	eicall
	return c;
    5a90:	89 81       	ldd	r24, Y+1	; 0x01
    5a92:	08 2e       	mov	r0, r24
    5a94:	00 0c       	add	r0, r0
    5a96:	99 0b       	sbc	r25, r25
}
    5a98:	23 96       	adiw	r28, 0x03	; 3
    5a9a:	cd bf       	out	0x3d, r28	; 61
    5a9c:	de bf       	out	0x3e, r29	; 62
    5a9e:	df 91       	pop	r29
    5aa0:	cf 91       	pop	r28
    5aa2:	08 95       	ret

00005aa4 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    5aa4:	cf 93       	push	r28
    5aa6:	df 93       	push	r29
    5aa8:	00 d0       	rcall	.+0      	; 0x5aaa <_write+0x6>
    5aaa:	cd b7       	in	r28, 0x3d	; 61
    5aac:	de b7       	in	r29, 0x3e	; 62
    5aae:	89 83       	std	Y+1, r24	; 0x01
    5ab0:	6a 83       	std	Y+2, r22	; 0x02
    5ab2:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    5ab4:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <ptr_put>
    5ab8:	30 91 0c 28 	lds	r19, 0x280C	; 0x80280c <ptr_put+0x1>
    5abc:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <stdio_base>
    5ac0:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <stdio_base+0x1>
    5ac4:	69 81       	ldd	r22, Y+1	; 0x01
    5ac6:	f9 01       	movw	r30, r18
    5ac8:	19 95       	eicall
    5aca:	99 23       	and	r25, r25
    5acc:	1c f4       	brge	.+6      	; 0x5ad4 <_write+0x30>
		return -1;
    5ace:	8f ef       	ldi	r24, 0xFF	; 255
    5ad0:	9f ef       	ldi	r25, 0xFF	; 255
    5ad2:	02 c0       	rjmp	.+4      	; 0x5ad8 <_write+0x34>
	}
	return 1;
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
}
    5ad8:	23 96       	adiw	r28, 0x03	; 3
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	de bf       	out	0x3e, r29	; 62
    5ade:	df 91       	pop	r29
    5ae0:	cf 91       	pop	r28
    5ae2:	08 95       	ret

00005ae4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    5ae4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    5ae6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    5ae8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    5aea:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    5aec:	60 83       	st	Z, r22
	ret                             // Return to caller
    5aee:	08 95       	ret

00005af0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    5af0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    5af4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    5af6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    5af8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    5afc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    5afe:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    5b02:	08 95       	ret

00005b04 <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    5b04:	cf 93       	push	r28
    5b06:	df 93       	push	r29
    5b08:	1f 92       	push	r1
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	8f e3       	ldi	r24, 0x3F	; 63
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	fc 01       	movw	r30, r24
    5b14:	80 81       	ld	r24, Z
    5b16:	89 83       	std	Y+1, r24	; 0x01
    5b18:	f8 94       	cli
    5b1a:	89 81       	ldd	r24, Y+1	; 0x01
    5b1c:	0f 90       	pop	r0
    5b1e:	df 91       	pop	r29
    5b20:	cf 91       	pop	r28
    5b22:	08 95       	ret

00005b24 <cpu_irq_restore>:
    5b24:	cf 93       	push	r28
    5b26:	df 93       	push	r29
    5b28:	1f 92       	push	r1
    5b2a:	cd b7       	in	r28, 0x3d	; 61
    5b2c:	de b7       	in	r29, 0x3e	; 62
    5b2e:	89 83       	std	Y+1, r24	; 0x01
    5b30:	8f e3       	ldi	r24, 0x3F	; 63
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	29 81       	ldd	r18, Y+1	; 0x01
    5b36:	fc 01       	movw	r30, r24
    5b38:	20 83       	st	Z, r18
    5b3a:	00 00       	nop
    5b3c:	0f 90       	pop	r0
    5b3e:	df 91       	pop	r29
    5b40:	cf 91       	pop	r28
    5b42:	08 95       	ret

00005b44 <sleepmgr_lock_mode>:
    5b44:	cf 93       	push	r28
    5b46:	df 93       	push	r29
    5b48:	1f 92       	push	r1
    5b4a:	1f 92       	push	r1
    5b4c:	cd b7       	in	r28, 0x3d	; 61
    5b4e:	de b7       	in	r29, 0x3e	; 62
    5b50:	8a 83       	std	Y+2, r24	; 0x02
    5b52:	8a 81       	ldd	r24, Y+2	; 0x02
    5b54:	88 2f       	mov	r24, r24
    5b56:	90 e0       	ldi	r25, 0x00	; 0
    5b58:	8d 5f       	subi	r24, 0xFD	; 253
    5b5a:	97 4d       	sbci	r25, 0xD7	; 215
    5b5c:	fc 01       	movw	r30, r24
    5b5e:	80 81       	ld	r24, Z
    5b60:	8f 3f       	cpi	r24, 0xFF	; 255
    5b62:	09 f4       	brne	.+2      	; 0x5b66 <sleepmgr_lock_mode+0x22>
    5b64:	ff cf       	rjmp	.-2      	; 0x5b64 <sleepmgr_lock_mode+0x20>
    5b66:	ce df       	rcall	.-100    	; 0x5b04 <cpu_irq_save>
    5b68:	89 83       	std	Y+1, r24	; 0x01
    5b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b6c:	88 2f       	mov	r24, r24
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	9c 01       	movw	r18, r24
    5b72:	2d 5f       	subi	r18, 0xFD	; 253
    5b74:	37 4d       	sbci	r19, 0xD7	; 215
    5b76:	f9 01       	movw	r30, r18
    5b78:	20 81       	ld	r18, Z
    5b7a:	2f 5f       	subi	r18, 0xFF	; 255
    5b7c:	8d 5f       	subi	r24, 0xFD	; 253
    5b7e:	97 4d       	sbci	r25, 0xD7	; 215
    5b80:	fc 01       	movw	r30, r24
    5b82:	20 83       	st	Z, r18
    5b84:	89 81       	ldd	r24, Y+1	; 0x01
    5b86:	ce df       	rcall	.-100    	; 0x5b24 <cpu_irq_restore>
    5b88:	00 00       	nop
    5b8a:	0f 90       	pop	r0
    5b8c:	0f 90       	pop	r0
    5b8e:	df 91       	pop	r29
    5b90:	cf 91       	pop	r28
    5b92:	08 95       	ret

00005b94 <rtc_get_time>:
    5b94:	cf 93       	push	r28
    5b96:	df 93       	push	r29
    5b98:	cd b7       	in	r28, 0x3d	; 61
    5b9a:	de b7       	in	r29, 0x3e	; 62
    5b9c:	25 97       	sbiw	r28, 0x05	; 5
    5b9e:	cd bf       	out	0x3d, r28	; 61
    5ba0:	de bf       	out	0x3e, r29	; 62
    5ba2:	00 00       	nop
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	94 e0       	ldi	r25, 0x04	; 4
    5ba8:	fc 01       	movw	r30, r24
    5baa:	81 81       	ldd	r24, Z+1	; 0x01
    5bac:	88 2f       	mov	r24, r24
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	81 70       	andi	r24, 0x01	; 1
    5bb2:	99 27       	eor	r25, r25
    5bb4:	21 e0       	ldi	r18, 0x01	; 1
    5bb6:	89 2b       	or	r24, r25
    5bb8:	09 f4       	brne	.+2      	; 0x5bbc <rtc_get_time+0x28>
    5bba:	20 e0       	ldi	r18, 0x00	; 0
    5bbc:	22 23       	and	r18, r18
    5bbe:	91 f7       	brne	.-28     	; 0x5ba4 <rtc_get_time+0x10>
    5bc0:	a1 df       	rcall	.-190    	; 0x5b04 <cpu_irq_save>
    5bc2:	8b 83       	std	Y+3, r24	; 0x03
    5bc4:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <rtc_data>
    5bc8:	90 91 10 28 	lds	r25, 0x2810	; 0x802810 <rtc_data+0x1>
    5bcc:	89 83       	std	Y+1, r24	; 0x01
    5bce:	9a 83       	std	Y+2, r25	; 0x02
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	94 e0       	ldi	r25, 0x04	; 4
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	80 85       	ldd	r24, Z+8	; 0x08
    5bd8:	91 85       	ldd	r25, Z+9	; 0x09
    5bda:	8c 83       	std	Y+4, r24	; 0x04
    5bdc:	9d 83       	std	Y+5, r25	; 0x05
    5bde:	8c 81       	ldd	r24, Y+4	; 0x04
    5be0:	9d 81       	ldd	r25, Y+5	; 0x05
    5be2:	89 2b       	or	r24, r25
    5be4:	79 f4       	brne	.+30     	; 0x5c04 <rtc_get_time+0x70>
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	94 e0       	ldi	r25, 0x04	; 4
    5bea:	fc 01       	movw	r30, r24
    5bec:	83 81       	ldd	r24, Z+3	; 0x03
    5bee:	88 2f       	mov	r24, r24
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	81 70       	andi	r24, 0x01	; 1
    5bf4:	99 27       	eor	r25, r25
    5bf6:	89 2b       	or	r24, r25
    5bf8:	29 f0       	breq	.+10     	; 0x5c04 <rtc_get_time+0x70>
    5bfa:	89 81       	ldd	r24, Y+1	; 0x01
    5bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfe:	01 96       	adiw	r24, 0x01	; 1
    5c00:	89 83       	std	Y+1, r24	; 0x01
    5c02:	9a 83       	std	Y+2, r25	; 0x02
    5c04:	8b 81       	ldd	r24, Y+3	; 0x03
    5c06:	8e df       	rcall	.-228    	; 0x5b24 <cpu_irq_restore>
    5c08:	89 81       	ldd	r24, Y+1	; 0x01
    5c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c0c:	cc 01       	movw	r24, r24
    5c0e:	a0 e0       	ldi	r26, 0x00	; 0
    5c10:	b0 e0       	ldi	r27, 0x00	; 0
    5c12:	ac 01       	movw	r20, r24
    5c14:	33 27       	eor	r19, r19
    5c16:	22 27       	eor	r18, r18
    5c18:	8c 81       	ldd	r24, Y+4	; 0x04
    5c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    5c1c:	cc 01       	movw	r24, r24
    5c1e:	a0 e0       	ldi	r26, 0x00	; 0
    5c20:	b0 e0       	ldi	r27, 0x00	; 0
    5c22:	82 2b       	or	r24, r18
    5c24:	93 2b       	or	r25, r19
    5c26:	a4 2b       	or	r26, r20
    5c28:	b5 2b       	or	r27, r21
    5c2a:	bc 01       	movw	r22, r24
    5c2c:	cd 01       	movw	r24, r26
    5c2e:	25 96       	adiw	r28, 0x05	; 5
    5c30:	cd bf       	out	0x3d, r28	; 61
    5c32:	de bf       	out	0x3e, r29	; 62
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	08 95       	ret

00005c3a <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    5c3a:	cf 93       	push	r28
    5c3c:	df 93       	push	r29
    5c3e:	cd b7       	in	r28, 0x3d	; 61
    5c40:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    5c42:	64 e0       	ldi	r22, 0x04	; 4
    5c44:	80 e0       	ldi	r24, 0x00	; 0
    5c46:	8c de       	rcall	.-744    	; 0x5960 <sysclk_enable_module>
	RTC.PER = 0xffff;
    5c48:	80 e0       	ldi	r24, 0x00	; 0
    5c4a:	94 e0       	ldi	r25, 0x04	; 4
    5c4c:	2f ef       	ldi	r18, 0xFF	; 255
    5c4e:	3f ef       	ldi	r19, 0xFF	; 255
    5c50:	fc 01       	movw	r30, r24
    5c52:	22 87       	std	Z+10, r18	; 0x0a
    5c54:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    5c56:	80 e0       	ldi	r24, 0x00	; 0
    5c58:	94 e0       	ldi	r25, 0x04	; 4
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	10 86       	std	Z+8, r1	; 0x08
    5c5e:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    5c60:	83 e0       	ldi	r24, 0x03	; 3
    5c62:	70 df       	rcall	.-288    	; 0x5b44 <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    5c64:	80 e0       	ldi	r24, 0x00	; 0
    5c66:	94 e0       	ldi	r25, 0x04	; 4
    5c68:	21 e0       	ldi	r18, 0x01	; 1
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	94 e0       	ldi	r25, 0x04	; 4
    5c72:	27 e0       	ldi	r18, 0x07	; 7
    5c74:	fc 01       	movw	r30, r24
    5c76:	20 83       	st	Z, r18
}
    5c78:	00 00       	nop
    5c7a:	df 91       	pop	r29
    5c7c:	cf 91       	pop	r28
    5c7e:	08 95       	ret

00005c80 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    5c80:	1f 92       	push	r1
    5c82:	0f 92       	push	r0
    5c84:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5c88:	0f 92       	push	r0
    5c8a:	11 24       	eor	r1, r1
    5c8c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c90:	0f 92       	push	r0
    5c92:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c96:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c9a:	0f 92       	push	r0
    5c9c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ca0:	8f 93       	push	r24
    5ca2:	9f 93       	push	r25
    5ca4:	cf 93       	push	r28
    5ca6:	df 93       	push	r29
    5ca8:	cd b7       	in	r28, 0x3d	; 61
    5caa:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    5cac:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <rtc_data>
    5cb0:	90 91 10 28 	lds	r25, 0x2810	; 0x802810 <rtc_data+0x1>
    5cb4:	01 96       	adiw	r24, 0x01	; 1
    5cb6:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <rtc_data>
    5cba:	90 93 10 28 	sts	0x2810, r25	; 0x802810 <rtc_data+0x1>
}
    5cbe:	00 00       	nop
    5cc0:	df 91       	pop	r29
    5cc2:	cf 91       	pop	r28
    5cc4:	9f 91       	pop	r25
    5cc6:	8f 91       	pop	r24
    5cc8:	0f 90       	pop	r0
    5cca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5cce:	0f 90       	pop	r0
    5cd0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cd4:	0f 90       	pop	r0
    5cd6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5cda:	0f 90       	pop	r0
    5cdc:	1f 90       	pop	r1
    5cde:	18 95       	reti

00005ce0 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    5ce0:	1f 92       	push	r1
    5ce2:	0f 92       	push	r0
    5ce4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5ce8:	0f 92       	push	r0
    5cea:	11 24       	eor	r1, r1
    5cec:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cf0:	0f 92       	push	r0
    5cf2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cf6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5cfa:	0f 92       	push	r0
    5cfc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d00:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d04:	0f 92       	push	r0
    5d06:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d0a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d0e:	0f 92       	push	r0
    5d10:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d14:	2f 93       	push	r18
    5d16:	3f 93       	push	r19
    5d18:	4f 93       	push	r20
    5d1a:	5f 93       	push	r21
    5d1c:	6f 93       	push	r22
    5d1e:	7f 93       	push	r23
    5d20:	8f 93       	push	r24
    5d22:	9f 93       	push	r25
    5d24:	af 93       	push	r26
    5d26:	bf 93       	push	r27
    5d28:	ef 93       	push	r30
    5d2a:	ff 93       	push	r31
    5d2c:	cf 93       	push	r28
    5d2e:	df 93       	push	r29
    5d30:	cd b7       	in	r28, 0x3d	; 61
    5d32:	de b7       	in	r29, 0x3e	; 62
    5d34:	28 97       	sbiw	r28, 0x08	; 8
    5d36:	cd bf       	out	0x3d, r28	; 61
    5d38:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    5d3a:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <rtc_data>
    5d3e:	30 91 10 28 	lds	r19, 0x2810	; 0x802810 <rtc_data+0x1>
    5d42:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <rtc_data+0x2>
    5d46:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <rtc_data+0x3>
    5d4a:	28 17       	cp	r18, r24
    5d4c:	39 07       	cpc	r19, r25
    5d4e:	08 f4       	brcc	.+2      	; 0x5d52 <__vector_11+0x72>
    5d50:	63 c0       	rjmp	.+198    	; 0x5e18 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    5d52:	80 e0       	ldi	r24, 0x00	; 0
    5d54:	94 e0       	ldi	r25, 0x04	; 4
    5d56:	21 e0       	ldi	r18, 0x01	; 1
    5d58:	fc 01       	movw	r30, r24
    5d5a:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    5d5c:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <rtc_data+0x6>
    5d60:	90 91 16 28 	lds	r25, 0x2816	; 0x802816 <rtc_data+0x7>
    5d64:	89 2b       	or	r24, r25
    5d66:	09 f4       	brne	.+2      	; 0x5d6a <__vector_11+0x8a>
    5d68:	57 c0       	rjmp	.+174    	; 0x5e18 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    5d6a:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <rtc_data>
    5d6e:	90 91 10 28 	lds	r25, 0x2810	; 0x802810 <rtc_data+0x1>
    5d72:	cc 01       	movw	r24, r24
    5d74:	a0 e0       	ldi	r26, 0x00	; 0
    5d76:	b0 e0       	ldi	r27, 0x00	; 0
    5d78:	ac 01       	movw	r20, r24
    5d7a:	33 27       	eor	r19, r19
    5d7c:	22 27       	eor	r18, r18
					| RTC.CNT;
    5d7e:	80 e0       	ldi	r24, 0x00	; 0
    5d80:	94 e0       	ldi	r25, 0x04	; 4
    5d82:	fc 01       	movw	r30, r24
    5d84:	80 85       	ldd	r24, Z+8	; 0x08
    5d86:	91 85       	ldd	r25, Z+9	; 0x09
    5d88:	cc 01       	movw	r24, r24
    5d8a:	a0 e0       	ldi	r26, 0x00	; 0
    5d8c:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    5d8e:	82 2b       	or	r24, r18
    5d90:	93 2b       	or	r25, r19
    5d92:	a4 2b       	or	r26, r20
    5d94:	b5 2b       	or	r27, r21
    5d96:	89 83       	std	Y+1, r24	; 0x01
    5d98:	9a 83       	std	Y+2, r25	; 0x02
    5d9a:	ab 83       	std	Y+3, r26	; 0x03
    5d9c:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    5d9e:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <rtc_data+0x2>
    5da2:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <rtc_data+0x3>
    5da6:	cc 01       	movw	r24, r24
    5da8:	a0 e0       	ldi	r26, 0x00	; 0
    5daa:	b0 e0       	ldi	r27, 0x00	; 0
    5dac:	ac 01       	movw	r20, r24
    5dae:	33 27       	eor	r19, r19
    5db0:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    5db2:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <rtc_data+0x4>
    5db6:	90 91 14 28 	lds	r25, 0x2814	; 0x802814 <rtc_data+0x5>
    5dba:	cc 01       	movw	r24, r24
    5dbc:	a0 e0       	ldi	r26, 0x00	; 0
    5dbe:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    5dc0:	82 2b       	or	r24, r18
    5dc2:	93 2b       	or	r25, r19
    5dc4:	a4 2b       	or	r26, r20
    5dc6:	b5 2b       	or	r27, r21
    5dc8:	8d 83       	std	Y+5, r24	; 0x05
    5dca:	9e 83       	std	Y+6, r25	; 0x06
    5dcc:	af 83       	std	Y+7, r26	; 0x07
    5dce:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    5dd0:	2d 81       	ldd	r18, Y+5	; 0x05
    5dd2:	3e 81       	ldd	r19, Y+6	; 0x06
    5dd4:	4f 81       	ldd	r20, Y+7	; 0x07
    5dd6:	58 85       	ldd	r21, Y+8	; 0x08
    5dd8:	89 81       	ldd	r24, Y+1	; 0x01
    5dda:	9a 81       	ldd	r25, Y+2	; 0x02
    5ddc:	ab 81       	ldd	r26, Y+3	; 0x03
    5dde:	bc 81       	ldd	r27, Y+4	; 0x04
    5de0:	28 17       	cp	r18, r24
    5de2:	39 07       	cpc	r19, r25
    5de4:	4a 07       	cpc	r20, r26
    5de6:	5b 07       	cpc	r21, r27
    5de8:	58 f0       	brcs	.+22     	; 0x5e00 <__vector_11+0x120>
				count = alarm + 1;
    5dea:	8d 81       	ldd	r24, Y+5	; 0x05
    5dec:	9e 81       	ldd	r25, Y+6	; 0x06
    5dee:	af 81       	ldd	r26, Y+7	; 0x07
    5df0:	b8 85       	ldd	r27, Y+8	; 0x08
    5df2:	01 96       	adiw	r24, 0x01	; 1
    5df4:	a1 1d       	adc	r26, r1
    5df6:	b1 1d       	adc	r27, r1
    5df8:	89 83       	std	Y+1, r24	; 0x01
    5dfa:	9a 83       	std	Y+2, r25	; 0x02
    5dfc:	ab 83       	std	Y+3, r26	; 0x03
    5dfe:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    5e00:	20 91 15 28 	lds	r18, 0x2815	; 0x802815 <rtc_data+0x6>
    5e04:	30 91 16 28 	lds	r19, 0x2816	; 0x802816 <rtc_data+0x7>
    5e08:	89 81       	ldd	r24, Y+1	; 0x01
    5e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e0c:	ab 81       	ldd	r26, Y+3	; 0x03
    5e0e:	bc 81       	ldd	r27, Y+4	; 0x04
    5e10:	bc 01       	movw	r22, r24
    5e12:	cd 01       	movw	r24, r26
    5e14:	f9 01       	movw	r30, r18
    5e16:	19 95       	eicall
		}
	}
}
    5e18:	00 00       	nop
    5e1a:	28 96       	adiw	r28, 0x08	; 8
    5e1c:	cd bf       	out	0x3d, r28	; 61
    5e1e:	de bf       	out	0x3e, r29	; 62
    5e20:	df 91       	pop	r29
    5e22:	cf 91       	pop	r28
    5e24:	ff 91       	pop	r31
    5e26:	ef 91       	pop	r30
    5e28:	bf 91       	pop	r27
    5e2a:	af 91       	pop	r26
    5e2c:	9f 91       	pop	r25
    5e2e:	8f 91       	pop	r24
    5e30:	7f 91       	pop	r23
    5e32:	6f 91       	pop	r22
    5e34:	5f 91       	pop	r21
    5e36:	4f 91       	pop	r20
    5e38:	3f 91       	pop	r19
    5e3a:	2f 91       	pop	r18
    5e3c:	0f 90       	pop	r0
    5e3e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5e42:	0f 90       	pop	r0
    5e44:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e48:	0f 90       	pop	r0
    5e4a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e4e:	0f 90       	pop	r0
    5e50:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e54:	0f 90       	pop	r0
    5e56:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5e5a:	0f 90       	pop	r0
    5e5c:	1f 90       	pop	r1
    5e5e:	18 95       	reti

00005e60 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    5e60:	0f 93       	push	r16
    5e62:	1f 93       	push	r17
    5e64:	cf 93       	push	r28
    5e66:	df 93       	push	r29
    5e68:	cd b7       	in	r28, 0x3d	; 61
    5e6a:	de b7       	in	r29, 0x3e	; 62
    5e6c:	60 97       	sbiw	r28, 0x10	; 16
    5e6e:	cd bf       	out	0x3d, r28	; 61
    5e70:	de bf       	out	0x3e, r29	; 62
    5e72:	8f 83       	std	Y+7, r24	; 0x07
    5e74:	98 87       	std	Y+8, r25	; 0x08
    5e76:	49 87       	std	Y+9, r20	; 0x09
    5e78:	5a 87       	std	Y+10, r21	; 0x0a
    5e7a:	6b 87       	std	Y+11, r22	; 0x0b
    5e7c:	7c 87       	std	Y+12, r23	; 0x0c
    5e7e:	0d 87       	std	Y+13, r16	; 0x0d
    5e80:	1e 87       	std	Y+14, r17	; 0x0e
    5e82:	2f 87       	std	Y+15, r18	; 0x0f
    5e84:	38 8b       	std	Y+16, r19	; 0x10

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    5e86:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e88:	3e 85       	ldd	r19, Y+14	; 0x0e
    5e8a:	4f 85       	ldd	r20, Y+15	; 0x0f
    5e8c:	58 89       	ldd	r21, Y+16	; 0x10
    5e8e:	89 85       	ldd	r24, Y+9	; 0x09
    5e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e92:	ab 85       	ldd	r26, Y+11	; 0x0b
    5e94:	bc 85       	ldd	r27, Y+12	; 0x0c
    5e96:	82 0f       	add	r24, r18
    5e98:	93 1f       	adc	r25, r19
    5e9a:	a4 1f       	adc	r26, r20
    5e9c:	b5 1f       	adc	r27, r21
    5e9e:	01 97       	sbiw	r24, 0x01	; 1
    5ea0:	a1 09       	sbc	r26, r1
    5ea2:	b1 09       	sbc	r27, r1
    5ea4:	29 85       	ldd	r18, Y+9	; 0x09
    5ea6:	3a 85       	ldd	r19, Y+10	; 0x0a
    5ea8:	4b 85       	ldd	r20, Y+11	; 0x0b
    5eaa:	5c 85       	ldd	r21, Y+12	; 0x0c
    5eac:	bc 01       	movw	r22, r24
    5eae:	cd 01       	movw	r24, r26
    5eb0:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <__udivmodsi4>
    5eb4:	da 01       	movw	r26, r20
    5eb6:	c9 01       	movw	r24, r18
    5eb8:	8a 83       	std	Y+2, r24	; 0x02
    5eba:	9b 83       	std	Y+3, r25	; 0x03
    5ebc:	ac 83       	std	Y+4, r26	; 0x04
    5ebe:	bd 83       	std	Y+5, r27	; 0x05

	if (divisor > 128) {
    5ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ec4:	ac 81       	ldd	r26, Y+4	; 0x04
    5ec6:	bd 81       	ldd	r27, Y+5	; 0x05
    5ec8:	81 38       	cpi	r24, 0x81	; 129
    5eca:	91 05       	cpc	r25, r1
    5ecc:	a1 05       	cpc	r26, r1
    5ece:	b1 05       	cpc	r27, r1
    5ed0:	10 f0       	brcs	.+4      	; 0x5ed6 <spi_xmega_set_baud_div+0x76>
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    5ed2:	8f ef       	ldi	r24, 0xFF	; 255
    5ed4:	35 c0       	rjmp	.+106    	; 0x5f40 <spi_xmega_set_baud_div+0xe0>

	/*
	 * We now know that the divisor is 128 or lower so move it into a 8-bit
	 * variable to make sure the following comparison is more optimized.
	 */
	divisor_8bit = divisor;
    5ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed8:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    5eda:	8e 81       	ldd	r24, Y+6	; 0x06
    5edc:	81 34       	cpi	r24, 0x41	; 65
    5ede:	18 f0       	brcs	.+6      	; 0x5ee6 <spi_xmega_set_baud_div+0x86>
		ctrl = SPI_PRESCALER_DIV128_gc;
    5ee0:	83 e0       	ldi	r24, 0x03	; 3
    5ee2:	89 83       	std	Y+1, r24	; 0x01
    5ee4:	1f c0       	rjmp	.+62     	; 0x5f24 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 32) {
    5ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ee8:	81 32       	cpi	r24, 0x21	; 33
    5eea:	18 f0       	brcs	.+6      	; 0x5ef2 <spi_xmega_set_baud_div+0x92>
		ctrl = SPI_PRESCALER_DIV64_gc;
    5eec:	82 e0       	ldi	r24, 0x02	; 2
    5eee:	89 83       	std	Y+1, r24	; 0x01
    5ef0:	19 c0       	rjmp	.+50     	; 0x5f24 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 16) {
    5ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ef4:	81 31       	cpi	r24, 0x11	; 17
    5ef6:	18 f0       	brcs	.+6      	; 0x5efe <spi_xmega_set_baud_div+0x9e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    5ef8:	82 e8       	ldi	r24, 0x82	; 130
    5efa:	89 83       	std	Y+1, r24	; 0x01
    5efc:	13 c0       	rjmp	.+38     	; 0x5f24 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 8) {
    5efe:	8e 81       	ldd	r24, Y+6	; 0x06
    5f00:	89 30       	cpi	r24, 0x09	; 9
    5f02:	18 f0       	brcs	.+6      	; 0x5f0a <spi_xmega_set_baud_div+0xaa>
		ctrl = SPI_PRESCALER_DIV16_gc;
    5f04:	81 e0       	ldi	r24, 0x01	; 1
    5f06:	89 83       	std	Y+1, r24	; 0x01
    5f08:	0d c0       	rjmp	.+26     	; 0x5f24 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 4) {
    5f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    5f0c:	85 30       	cpi	r24, 0x05	; 5
    5f0e:	18 f0       	brcs	.+6      	; 0x5f16 <spi_xmega_set_baud_div+0xb6>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    5f10:	81 e8       	ldi	r24, 0x81	; 129
    5f12:	89 83       	std	Y+1, r24	; 0x01
    5f14:	07 c0       	rjmp	.+14     	; 0x5f24 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 2) {
    5f16:	8e 81       	ldd	r24, Y+6	; 0x06
    5f18:	83 30       	cpi	r24, 0x03	; 3
    5f1a:	10 f0       	brcs	.+4      	; 0x5f20 <spi_xmega_set_baud_div+0xc0>
		ctrl = SPI_PRESCALER_DIV4_gc;
    5f1c:	19 82       	std	Y+1, r1	; 0x01
    5f1e:	02 c0       	rjmp	.+4      	; 0x5f24 <spi_xmega_set_baud_div+0xc4>
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    5f20:	80 e8       	ldi	r24, 0x80	; 128
    5f22:	89 83       	std	Y+1, r24	; 0x01
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    5f24:	8f 81       	ldd	r24, Y+7	; 0x07
    5f26:	98 85       	ldd	r25, Y+8	; 0x08
    5f28:	fc 01       	movw	r30, r24
    5f2a:	80 81       	ld	r24, Z
    5f2c:	98 2f       	mov	r25, r24
    5f2e:	9c 77       	andi	r25, 0x7C	; 124
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
    5f32:	89 2b       	or	r24, r25
    5f34:	28 2f       	mov	r18, r24
    5f36:	8f 81       	ldd	r24, Y+7	; 0x07
    5f38:	98 85       	ldd	r25, Y+8	; 0x08
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	20 83       	st	Z, r18

	return 1;
    5f3e:	81 e0       	ldi	r24, 0x01	; 1
}
    5f40:	60 96       	adiw	r28, 0x10	; 16
    5f42:	cd bf       	out	0x3d, r28	; 61
    5f44:	de bf       	out	0x3e, r29	; 62
    5f46:	df 91       	pop	r29
    5f48:	cf 91       	pop	r28
    5f4a:	1f 91       	pop	r17
    5f4c:	0f 91       	pop	r16
    5f4e:	08 95       	ret

00005f50 <cpu_irq_save>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	1f 92       	push	r1
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
    5f5a:	8f e3       	ldi	r24, 0x3F	; 63
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	fc 01       	movw	r30, r24
    5f60:	80 81       	ld	r24, Z
    5f62:	89 83       	std	Y+1, r24	; 0x01
    5f64:	f8 94       	cli
    5f66:	89 81       	ldd	r24, Y+1	; 0x01
    5f68:	0f 90       	pop	r0
    5f6a:	df 91       	pop	r29
    5f6c:	cf 91       	pop	r28
    5f6e:	08 95       	ret

00005f70 <cpu_irq_restore>:
    5f70:	cf 93       	push	r28
    5f72:	df 93       	push	r29
    5f74:	1f 92       	push	r1
    5f76:	cd b7       	in	r28, 0x3d	; 61
    5f78:	de b7       	in	r29, 0x3e	; 62
    5f7a:	89 83       	std	Y+1, r24	; 0x01
    5f7c:	8f e3       	ldi	r24, 0x3F	; 63
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	29 81       	ldd	r18, Y+1	; 0x01
    5f82:	fc 01       	movw	r30, r24
    5f84:	20 83       	st	Z, r18
    5f86:	00 00       	nop
    5f88:	0f 90       	pop	r0
    5f8a:	df 91       	pop	r29
    5f8c:	cf 91       	pop	r28
    5f8e:	08 95       	ret

00005f90 <sleepmgr_lock_mode>:
    5f90:	cf 93       	push	r28
    5f92:	df 93       	push	r29
    5f94:	1f 92       	push	r1
    5f96:	1f 92       	push	r1
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
    5f9c:	8a 83       	std	Y+2, r24	; 0x02
    5f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa0:	88 2f       	mov	r24, r24
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	8d 5f       	subi	r24, 0xFD	; 253
    5fa6:	97 4d       	sbci	r25, 0xD7	; 215
    5fa8:	fc 01       	movw	r30, r24
    5faa:	80 81       	ld	r24, Z
    5fac:	8f 3f       	cpi	r24, 0xFF	; 255
    5fae:	09 f4       	brne	.+2      	; 0x5fb2 <sleepmgr_lock_mode+0x22>
    5fb0:	ff cf       	rjmp	.-2      	; 0x5fb0 <sleepmgr_lock_mode+0x20>
    5fb2:	ce df       	rcall	.-100    	; 0x5f50 <cpu_irq_save>
    5fb4:	89 83       	std	Y+1, r24	; 0x01
    5fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    5fb8:	88 2f       	mov	r24, r24
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	9c 01       	movw	r18, r24
    5fbe:	2d 5f       	subi	r18, 0xFD	; 253
    5fc0:	37 4d       	sbci	r19, 0xD7	; 215
    5fc2:	f9 01       	movw	r30, r18
    5fc4:	20 81       	ld	r18, Z
    5fc6:	2f 5f       	subi	r18, 0xFF	; 255
    5fc8:	8d 5f       	subi	r24, 0xFD	; 253
    5fca:	97 4d       	sbci	r25, 0xD7	; 215
    5fcc:	fc 01       	movw	r30, r24
    5fce:	20 83       	st	Z, r18
    5fd0:	89 81       	ldd	r24, Y+1	; 0x01
    5fd2:	ce df       	rcall	.-100    	; 0x5f70 <cpu_irq_restore>
    5fd4:	00 00       	nop
    5fd6:	0f 90       	pop	r0
    5fd8:	0f 90       	pop	r0
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	08 95       	ret

00005fe0 <__vector_14>:
    5fe0:	1f 92       	push	r1
    5fe2:	0f 92       	push	r0
    5fe4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5fe8:	0f 92       	push	r0
    5fea:	11 24       	eor	r1, r1
    5fec:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5ff0:	0f 92       	push	r0
    5ff2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5ff6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ffa:	0f 92       	push	r0
    5ffc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6000:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6004:	0f 92       	push	r0
    6006:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    600a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    600e:	0f 92       	push	r0
    6010:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6014:	2f 93       	push	r18
    6016:	3f 93       	push	r19
    6018:	4f 93       	push	r20
    601a:	5f 93       	push	r21
    601c:	6f 93       	push	r22
    601e:	7f 93       	push	r23
    6020:	8f 93       	push	r24
    6022:	9f 93       	push	r25
    6024:	af 93       	push	r26
    6026:	bf 93       	push	r27
    6028:	ef 93       	push	r30
    602a:	ff 93       	push	r31
    602c:	cf 93       	push	r28
    602e:	df 93       	push	r29
    6030:	cd b7       	in	r28, 0x3d	; 61
    6032:	de b7       	in	r29, 0x3e	; 62
    6034:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <tc_tcc0_ovf_callback>
    6038:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <tc_tcc0_ovf_callback+0x1>
    603c:	89 2b       	or	r24, r25
    603e:	31 f0       	breq	.+12     	; 0x604c <__vector_14+0x6c>
    6040:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <tc_tcc0_ovf_callback>
    6044:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <tc_tcc0_ovf_callback+0x1>
    6048:	fc 01       	movw	r30, r24
    604a:	19 95       	eicall
    604c:	00 00       	nop
    604e:	df 91       	pop	r29
    6050:	cf 91       	pop	r28
    6052:	ff 91       	pop	r31
    6054:	ef 91       	pop	r30
    6056:	bf 91       	pop	r27
    6058:	af 91       	pop	r26
    605a:	9f 91       	pop	r25
    605c:	8f 91       	pop	r24
    605e:	7f 91       	pop	r23
    6060:	6f 91       	pop	r22
    6062:	5f 91       	pop	r21
    6064:	4f 91       	pop	r20
    6066:	3f 91       	pop	r19
    6068:	2f 91       	pop	r18
    606a:	0f 90       	pop	r0
    606c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6070:	0f 90       	pop	r0
    6072:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6076:	0f 90       	pop	r0
    6078:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    607c:	0f 90       	pop	r0
    607e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6082:	0f 90       	pop	r0
    6084:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6088:	0f 90       	pop	r0
    608a:	1f 90       	pop	r1
    608c:	18 95       	reti

0000608e <__vector_15>:
    608e:	1f 92       	push	r1
    6090:	0f 92       	push	r0
    6092:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6096:	0f 92       	push	r0
    6098:	11 24       	eor	r1, r1
    609a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    609e:	0f 92       	push	r0
    60a0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    60a4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    60a8:	0f 92       	push	r0
    60aa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    60ae:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    60b2:	0f 92       	push	r0
    60b4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    60b8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60bc:	0f 92       	push	r0
    60be:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60c2:	2f 93       	push	r18
    60c4:	3f 93       	push	r19
    60c6:	4f 93       	push	r20
    60c8:	5f 93       	push	r21
    60ca:	6f 93       	push	r22
    60cc:	7f 93       	push	r23
    60ce:	8f 93       	push	r24
    60d0:	9f 93       	push	r25
    60d2:	af 93       	push	r26
    60d4:	bf 93       	push	r27
    60d6:	ef 93       	push	r30
    60d8:	ff 93       	push	r31
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	cd b7       	in	r28, 0x3d	; 61
    60e0:	de b7       	in	r29, 0x3e	; 62
    60e2:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <tc_tcc0_err_callback>
    60e6:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <tc_tcc0_err_callback+0x1>
    60ea:	89 2b       	or	r24, r25
    60ec:	31 f0       	breq	.+12     	; 0x60fa <__vector_15+0x6c>
    60ee:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <tc_tcc0_err_callback>
    60f2:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <tc_tcc0_err_callback+0x1>
    60f6:	fc 01       	movw	r30, r24
    60f8:	19 95       	eicall
    60fa:	00 00       	nop
    60fc:	df 91       	pop	r29
    60fe:	cf 91       	pop	r28
    6100:	ff 91       	pop	r31
    6102:	ef 91       	pop	r30
    6104:	bf 91       	pop	r27
    6106:	af 91       	pop	r26
    6108:	9f 91       	pop	r25
    610a:	8f 91       	pop	r24
    610c:	7f 91       	pop	r23
    610e:	6f 91       	pop	r22
    6110:	5f 91       	pop	r21
    6112:	4f 91       	pop	r20
    6114:	3f 91       	pop	r19
    6116:	2f 91       	pop	r18
    6118:	0f 90       	pop	r0
    611a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    611e:	0f 90       	pop	r0
    6120:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6124:	0f 90       	pop	r0
    6126:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    612a:	0f 90       	pop	r0
    612c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6130:	0f 90       	pop	r0
    6132:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6136:	0f 90       	pop	r0
    6138:	1f 90       	pop	r1
    613a:	18 95       	reti

0000613c <__vector_16>:
    613c:	1f 92       	push	r1
    613e:	0f 92       	push	r0
    6140:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6144:	0f 92       	push	r0
    6146:	11 24       	eor	r1, r1
    6148:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    614c:	0f 92       	push	r0
    614e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6152:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6156:	0f 92       	push	r0
    6158:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    615c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6160:	0f 92       	push	r0
    6162:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6166:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    616a:	0f 92       	push	r0
    616c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6170:	2f 93       	push	r18
    6172:	3f 93       	push	r19
    6174:	4f 93       	push	r20
    6176:	5f 93       	push	r21
    6178:	6f 93       	push	r22
    617a:	7f 93       	push	r23
    617c:	8f 93       	push	r24
    617e:	9f 93       	push	r25
    6180:	af 93       	push	r26
    6182:	bf 93       	push	r27
    6184:	ef 93       	push	r30
    6186:	ff 93       	push	r31
    6188:	cf 93       	push	r28
    618a:	df 93       	push	r29
    618c:	cd b7       	in	r28, 0x3d	; 61
    618e:	de b7       	in	r29, 0x3e	; 62
    6190:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <tc_tcc0_cca_callback>
    6194:	90 91 d9 21 	lds	r25, 0x21D9	; 0x8021d9 <tc_tcc0_cca_callback+0x1>
    6198:	89 2b       	or	r24, r25
    619a:	31 f0       	breq	.+12     	; 0x61a8 <__vector_16+0x6c>
    619c:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <tc_tcc0_cca_callback>
    61a0:	90 91 d9 21 	lds	r25, 0x21D9	; 0x8021d9 <tc_tcc0_cca_callback+0x1>
    61a4:	fc 01       	movw	r30, r24
    61a6:	19 95       	eicall
    61a8:	00 00       	nop
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	ff 91       	pop	r31
    61b0:	ef 91       	pop	r30
    61b2:	bf 91       	pop	r27
    61b4:	af 91       	pop	r26
    61b6:	9f 91       	pop	r25
    61b8:	8f 91       	pop	r24
    61ba:	7f 91       	pop	r23
    61bc:	6f 91       	pop	r22
    61be:	5f 91       	pop	r21
    61c0:	4f 91       	pop	r20
    61c2:	3f 91       	pop	r19
    61c4:	2f 91       	pop	r18
    61c6:	0f 90       	pop	r0
    61c8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    61cc:	0f 90       	pop	r0
    61ce:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    61d2:	0f 90       	pop	r0
    61d4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    61d8:	0f 90       	pop	r0
    61da:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61de:	0f 90       	pop	r0
    61e0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    61e4:	0f 90       	pop	r0
    61e6:	1f 90       	pop	r1
    61e8:	18 95       	reti

000061ea <__vector_17>:
    61ea:	1f 92       	push	r1
    61ec:	0f 92       	push	r0
    61ee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    61f2:	0f 92       	push	r0
    61f4:	11 24       	eor	r1, r1
    61f6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61fa:	0f 92       	push	r0
    61fc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6200:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6204:	0f 92       	push	r0
    6206:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    620a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    620e:	0f 92       	push	r0
    6210:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6214:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6218:	0f 92       	push	r0
    621a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    621e:	2f 93       	push	r18
    6220:	3f 93       	push	r19
    6222:	4f 93       	push	r20
    6224:	5f 93       	push	r21
    6226:	6f 93       	push	r22
    6228:	7f 93       	push	r23
    622a:	8f 93       	push	r24
    622c:	9f 93       	push	r25
    622e:	af 93       	push	r26
    6230:	bf 93       	push	r27
    6232:	ef 93       	push	r30
    6234:	ff 93       	push	r31
    6236:	cf 93       	push	r28
    6238:	df 93       	push	r29
    623a:	cd b7       	in	r28, 0x3d	; 61
    623c:	de b7       	in	r29, 0x3e	; 62
    623e:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <tc_tcc0_ccb_callback>
    6242:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <tc_tcc0_ccb_callback+0x1>
    6246:	89 2b       	or	r24, r25
    6248:	31 f0       	breq	.+12     	; 0x6256 <__vector_17+0x6c>
    624a:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <tc_tcc0_ccb_callback>
    624e:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <tc_tcc0_ccb_callback+0x1>
    6252:	fc 01       	movw	r30, r24
    6254:	19 95       	eicall
    6256:	00 00       	nop
    6258:	df 91       	pop	r29
    625a:	cf 91       	pop	r28
    625c:	ff 91       	pop	r31
    625e:	ef 91       	pop	r30
    6260:	bf 91       	pop	r27
    6262:	af 91       	pop	r26
    6264:	9f 91       	pop	r25
    6266:	8f 91       	pop	r24
    6268:	7f 91       	pop	r23
    626a:	6f 91       	pop	r22
    626c:	5f 91       	pop	r21
    626e:	4f 91       	pop	r20
    6270:	3f 91       	pop	r19
    6272:	2f 91       	pop	r18
    6274:	0f 90       	pop	r0
    6276:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    627a:	0f 90       	pop	r0
    627c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6280:	0f 90       	pop	r0
    6282:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6286:	0f 90       	pop	r0
    6288:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    628c:	0f 90       	pop	r0
    628e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6292:	0f 90       	pop	r0
    6294:	1f 90       	pop	r1
    6296:	18 95       	reti

00006298 <__vector_18>:
    6298:	1f 92       	push	r1
    629a:	0f 92       	push	r0
    629c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    62a0:	0f 92       	push	r0
    62a2:	11 24       	eor	r1, r1
    62a4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    62a8:	0f 92       	push	r0
    62aa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    62ae:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    62b2:	0f 92       	push	r0
    62b4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    62b8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    62bc:	0f 92       	push	r0
    62be:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    62c2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62c6:	0f 92       	push	r0
    62c8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62cc:	2f 93       	push	r18
    62ce:	3f 93       	push	r19
    62d0:	4f 93       	push	r20
    62d2:	5f 93       	push	r21
    62d4:	6f 93       	push	r22
    62d6:	7f 93       	push	r23
    62d8:	8f 93       	push	r24
    62da:	9f 93       	push	r25
    62dc:	af 93       	push	r26
    62de:	bf 93       	push	r27
    62e0:	ef 93       	push	r30
    62e2:	ff 93       	push	r31
    62e4:	cf 93       	push	r28
    62e6:	df 93       	push	r29
    62e8:	cd b7       	in	r28, 0x3d	; 61
    62ea:	de b7       	in	r29, 0x3e	; 62
    62ec:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <tc_tcc0_ccc_callback>
    62f0:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <tc_tcc0_ccc_callback+0x1>
    62f4:	89 2b       	or	r24, r25
    62f6:	31 f0       	breq	.+12     	; 0x6304 <__vector_18+0x6c>
    62f8:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <tc_tcc0_ccc_callback>
    62fc:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <tc_tcc0_ccc_callback+0x1>
    6300:	fc 01       	movw	r30, r24
    6302:	19 95       	eicall
    6304:	00 00       	nop
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	ff 91       	pop	r31
    630c:	ef 91       	pop	r30
    630e:	bf 91       	pop	r27
    6310:	af 91       	pop	r26
    6312:	9f 91       	pop	r25
    6314:	8f 91       	pop	r24
    6316:	7f 91       	pop	r23
    6318:	6f 91       	pop	r22
    631a:	5f 91       	pop	r21
    631c:	4f 91       	pop	r20
    631e:	3f 91       	pop	r19
    6320:	2f 91       	pop	r18
    6322:	0f 90       	pop	r0
    6324:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6328:	0f 90       	pop	r0
    632a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    632e:	0f 90       	pop	r0
    6330:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6334:	0f 90       	pop	r0
    6336:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    633a:	0f 90       	pop	r0
    633c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6340:	0f 90       	pop	r0
    6342:	1f 90       	pop	r1
    6344:	18 95       	reti

00006346 <__vector_19>:
    6346:	1f 92       	push	r1
    6348:	0f 92       	push	r0
    634a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    634e:	0f 92       	push	r0
    6350:	11 24       	eor	r1, r1
    6352:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6356:	0f 92       	push	r0
    6358:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    635c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6360:	0f 92       	push	r0
    6362:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6366:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    636a:	0f 92       	push	r0
    636c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6370:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6374:	0f 92       	push	r0
    6376:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    637a:	2f 93       	push	r18
    637c:	3f 93       	push	r19
    637e:	4f 93       	push	r20
    6380:	5f 93       	push	r21
    6382:	6f 93       	push	r22
    6384:	7f 93       	push	r23
    6386:	8f 93       	push	r24
    6388:	9f 93       	push	r25
    638a:	af 93       	push	r26
    638c:	bf 93       	push	r27
    638e:	ef 93       	push	r30
    6390:	ff 93       	push	r31
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
    6396:	cd b7       	in	r28, 0x3d	; 61
    6398:	de b7       	in	r29, 0x3e	; 62
    639a:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <tc_tcc0_ccd_callback>
    639e:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <tc_tcc0_ccd_callback+0x1>
    63a2:	89 2b       	or	r24, r25
    63a4:	31 f0       	breq	.+12     	; 0x63b2 <__vector_19+0x6c>
    63a6:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <tc_tcc0_ccd_callback>
    63aa:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <tc_tcc0_ccd_callback+0x1>
    63ae:	fc 01       	movw	r30, r24
    63b0:	19 95       	eicall
    63b2:	00 00       	nop
    63b4:	df 91       	pop	r29
    63b6:	cf 91       	pop	r28
    63b8:	ff 91       	pop	r31
    63ba:	ef 91       	pop	r30
    63bc:	bf 91       	pop	r27
    63be:	af 91       	pop	r26
    63c0:	9f 91       	pop	r25
    63c2:	8f 91       	pop	r24
    63c4:	7f 91       	pop	r23
    63c6:	6f 91       	pop	r22
    63c8:	5f 91       	pop	r21
    63ca:	4f 91       	pop	r20
    63cc:	3f 91       	pop	r19
    63ce:	2f 91       	pop	r18
    63d0:	0f 90       	pop	r0
    63d2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    63d6:	0f 90       	pop	r0
    63d8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    63dc:	0f 90       	pop	r0
    63de:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    63e2:	0f 90       	pop	r0
    63e4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    63e8:	0f 90       	pop	r0
    63ea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    63ee:	0f 90       	pop	r0
    63f0:	1f 90       	pop	r1
    63f2:	18 95       	reti

000063f4 <__vector_20>:
    63f4:	1f 92       	push	r1
    63f6:	0f 92       	push	r0
    63f8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    63fc:	0f 92       	push	r0
    63fe:	11 24       	eor	r1, r1
    6400:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6404:	0f 92       	push	r0
    6406:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    640a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    640e:	0f 92       	push	r0
    6410:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6414:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6418:	0f 92       	push	r0
    641a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    641e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6422:	0f 92       	push	r0
    6424:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6428:	2f 93       	push	r18
    642a:	3f 93       	push	r19
    642c:	4f 93       	push	r20
    642e:	5f 93       	push	r21
    6430:	6f 93       	push	r22
    6432:	7f 93       	push	r23
    6434:	8f 93       	push	r24
    6436:	9f 93       	push	r25
    6438:	af 93       	push	r26
    643a:	bf 93       	push	r27
    643c:	ef 93       	push	r30
    643e:	ff 93       	push	r31
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
    6448:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <tc_tcc1_ovf_callback>
    644c:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <tc_tcc1_ovf_callback+0x1>
    6450:	89 2b       	or	r24, r25
    6452:	31 f0       	breq	.+12     	; 0x6460 <__vector_20+0x6c>
    6454:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <tc_tcc1_ovf_callback>
    6458:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <tc_tcc1_ovf_callback+0x1>
    645c:	fc 01       	movw	r30, r24
    645e:	19 95       	eicall
    6460:	00 00       	nop
    6462:	df 91       	pop	r29
    6464:	cf 91       	pop	r28
    6466:	ff 91       	pop	r31
    6468:	ef 91       	pop	r30
    646a:	bf 91       	pop	r27
    646c:	af 91       	pop	r26
    646e:	9f 91       	pop	r25
    6470:	8f 91       	pop	r24
    6472:	7f 91       	pop	r23
    6474:	6f 91       	pop	r22
    6476:	5f 91       	pop	r21
    6478:	4f 91       	pop	r20
    647a:	3f 91       	pop	r19
    647c:	2f 91       	pop	r18
    647e:	0f 90       	pop	r0
    6480:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6484:	0f 90       	pop	r0
    6486:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    648a:	0f 90       	pop	r0
    648c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6490:	0f 90       	pop	r0
    6492:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6496:	0f 90       	pop	r0
    6498:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    649c:	0f 90       	pop	r0
    649e:	1f 90       	pop	r1
    64a0:	18 95       	reti

000064a2 <__vector_21>:
    64a2:	1f 92       	push	r1
    64a4:	0f 92       	push	r0
    64a6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    64aa:	0f 92       	push	r0
    64ac:	11 24       	eor	r1, r1
    64ae:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    64b2:	0f 92       	push	r0
    64b4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    64b8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    64bc:	0f 92       	push	r0
    64be:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    64c2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    64c6:	0f 92       	push	r0
    64c8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    64cc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    64d0:	0f 92       	push	r0
    64d2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    64d6:	2f 93       	push	r18
    64d8:	3f 93       	push	r19
    64da:	4f 93       	push	r20
    64dc:	5f 93       	push	r21
    64de:	6f 93       	push	r22
    64e0:	7f 93       	push	r23
    64e2:	8f 93       	push	r24
    64e4:	9f 93       	push	r25
    64e6:	af 93       	push	r26
    64e8:	bf 93       	push	r27
    64ea:	ef 93       	push	r30
    64ec:	ff 93       	push	r31
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29
    64f2:	cd b7       	in	r28, 0x3d	; 61
    64f4:	de b7       	in	r29, 0x3e	; 62
    64f6:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <tc_tcc1_err_callback>
    64fa:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <tc_tcc1_err_callback+0x1>
    64fe:	89 2b       	or	r24, r25
    6500:	31 f0       	breq	.+12     	; 0x650e <__vector_21+0x6c>
    6502:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <tc_tcc1_err_callback>
    6506:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <tc_tcc1_err_callback+0x1>
    650a:	fc 01       	movw	r30, r24
    650c:	19 95       	eicall
    650e:	00 00       	nop
    6510:	df 91       	pop	r29
    6512:	cf 91       	pop	r28
    6514:	ff 91       	pop	r31
    6516:	ef 91       	pop	r30
    6518:	bf 91       	pop	r27
    651a:	af 91       	pop	r26
    651c:	9f 91       	pop	r25
    651e:	8f 91       	pop	r24
    6520:	7f 91       	pop	r23
    6522:	6f 91       	pop	r22
    6524:	5f 91       	pop	r21
    6526:	4f 91       	pop	r20
    6528:	3f 91       	pop	r19
    652a:	2f 91       	pop	r18
    652c:	0f 90       	pop	r0
    652e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6532:	0f 90       	pop	r0
    6534:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6538:	0f 90       	pop	r0
    653a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    653e:	0f 90       	pop	r0
    6540:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6544:	0f 90       	pop	r0
    6546:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    654a:	0f 90       	pop	r0
    654c:	1f 90       	pop	r1
    654e:	18 95       	reti

00006550 <__vector_22>:
    6550:	1f 92       	push	r1
    6552:	0f 92       	push	r0
    6554:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6558:	0f 92       	push	r0
    655a:	11 24       	eor	r1, r1
    655c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6560:	0f 92       	push	r0
    6562:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6566:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    656a:	0f 92       	push	r0
    656c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6570:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6574:	0f 92       	push	r0
    6576:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    657a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    657e:	0f 92       	push	r0
    6580:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6584:	2f 93       	push	r18
    6586:	3f 93       	push	r19
    6588:	4f 93       	push	r20
    658a:	5f 93       	push	r21
    658c:	6f 93       	push	r22
    658e:	7f 93       	push	r23
    6590:	8f 93       	push	r24
    6592:	9f 93       	push	r25
    6594:	af 93       	push	r26
    6596:	bf 93       	push	r27
    6598:	ef 93       	push	r30
    659a:	ff 93       	push	r31
    659c:	cf 93       	push	r28
    659e:	df 93       	push	r29
    65a0:	cd b7       	in	r28, 0x3d	; 61
    65a2:	de b7       	in	r29, 0x3e	; 62
    65a4:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <tc_tcc1_cca_callback>
    65a8:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <tc_tcc1_cca_callback+0x1>
    65ac:	89 2b       	or	r24, r25
    65ae:	31 f0       	breq	.+12     	; 0x65bc <__vector_22+0x6c>
    65b0:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <tc_tcc1_cca_callback>
    65b4:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <tc_tcc1_cca_callback+0x1>
    65b8:	fc 01       	movw	r30, r24
    65ba:	19 95       	eicall
    65bc:	00 00       	nop
    65be:	df 91       	pop	r29
    65c0:	cf 91       	pop	r28
    65c2:	ff 91       	pop	r31
    65c4:	ef 91       	pop	r30
    65c6:	bf 91       	pop	r27
    65c8:	af 91       	pop	r26
    65ca:	9f 91       	pop	r25
    65cc:	8f 91       	pop	r24
    65ce:	7f 91       	pop	r23
    65d0:	6f 91       	pop	r22
    65d2:	5f 91       	pop	r21
    65d4:	4f 91       	pop	r20
    65d6:	3f 91       	pop	r19
    65d8:	2f 91       	pop	r18
    65da:	0f 90       	pop	r0
    65dc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65e0:	0f 90       	pop	r0
    65e2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65e6:	0f 90       	pop	r0
    65e8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    65ec:	0f 90       	pop	r0
    65ee:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    65f2:	0f 90       	pop	r0
    65f4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    65f8:	0f 90       	pop	r0
    65fa:	1f 90       	pop	r1
    65fc:	18 95       	reti

000065fe <__vector_23>:
    65fe:	1f 92       	push	r1
    6600:	0f 92       	push	r0
    6602:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6606:	0f 92       	push	r0
    6608:	11 24       	eor	r1, r1
    660a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    660e:	0f 92       	push	r0
    6610:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6614:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6618:	0f 92       	push	r0
    661a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    661e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6622:	0f 92       	push	r0
    6624:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6628:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    662c:	0f 92       	push	r0
    662e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6632:	2f 93       	push	r18
    6634:	3f 93       	push	r19
    6636:	4f 93       	push	r20
    6638:	5f 93       	push	r21
    663a:	6f 93       	push	r22
    663c:	7f 93       	push	r23
    663e:	8f 93       	push	r24
    6640:	9f 93       	push	r25
    6642:	af 93       	push	r26
    6644:	bf 93       	push	r27
    6646:	ef 93       	push	r30
    6648:	ff 93       	push	r31
    664a:	cf 93       	push	r28
    664c:	df 93       	push	r29
    664e:	cd b7       	in	r28, 0x3d	; 61
    6650:	de b7       	in	r29, 0x3e	; 62
    6652:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <tc_tcc1_ccb_callback>
    6656:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <tc_tcc1_ccb_callback+0x1>
    665a:	89 2b       	or	r24, r25
    665c:	31 f0       	breq	.+12     	; 0x666a <__vector_23+0x6c>
    665e:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <tc_tcc1_ccb_callback>
    6662:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <tc_tcc1_ccb_callback+0x1>
    6666:	fc 01       	movw	r30, r24
    6668:	19 95       	eicall
    666a:	00 00       	nop
    666c:	df 91       	pop	r29
    666e:	cf 91       	pop	r28
    6670:	ff 91       	pop	r31
    6672:	ef 91       	pop	r30
    6674:	bf 91       	pop	r27
    6676:	af 91       	pop	r26
    6678:	9f 91       	pop	r25
    667a:	8f 91       	pop	r24
    667c:	7f 91       	pop	r23
    667e:	6f 91       	pop	r22
    6680:	5f 91       	pop	r21
    6682:	4f 91       	pop	r20
    6684:	3f 91       	pop	r19
    6686:	2f 91       	pop	r18
    6688:	0f 90       	pop	r0
    668a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    668e:	0f 90       	pop	r0
    6690:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6694:	0f 90       	pop	r0
    6696:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    669a:	0f 90       	pop	r0
    669c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66a0:	0f 90       	pop	r0
    66a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    66a6:	0f 90       	pop	r0
    66a8:	1f 90       	pop	r1
    66aa:	18 95       	reti

000066ac <__vector_77>:
    66ac:	1f 92       	push	r1
    66ae:	0f 92       	push	r0
    66b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    66b4:	0f 92       	push	r0
    66b6:	11 24       	eor	r1, r1
    66b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66bc:	0f 92       	push	r0
    66be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66c6:	0f 92       	push	r0
    66c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66d0:	0f 92       	push	r0
    66d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    66da:	0f 92       	push	r0
    66dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    66e0:	2f 93       	push	r18
    66e2:	3f 93       	push	r19
    66e4:	4f 93       	push	r20
    66e6:	5f 93       	push	r21
    66e8:	6f 93       	push	r22
    66ea:	7f 93       	push	r23
    66ec:	8f 93       	push	r24
    66ee:	9f 93       	push	r25
    66f0:	af 93       	push	r26
    66f2:	bf 93       	push	r27
    66f4:	ef 93       	push	r30
    66f6:	ff 93       	push	r31
    66f8:	cf 93       	push	r28
    66fa:	df 93       	push	r29
    66fc:	cd b7       	in	r28, 0x3d	; 61
    66fe:	de b7       	in	r29, 0x3e	; 62
    6700:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <tc_tcd0_ovf_callback>
    6704:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <tc_tcd0_ovf_callback+0x1>
    6708:	89 2b       	or	r24, r25
    670a:	31 f0       	breq	.+12     	; 0x6718 <__vector_77+0x6c>
    670c:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <tc_tcd0_ovf_callback>
    6710:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <tc_tcd0_ovf_callback+0x1>
    6714:	fc 01       	movw	r30, r24
    6716:	19 95       	eicall
    6718:	00 00       	nop
    671a:	df 91       	pop	r29
    671c:	cf 91       	pop	r28
    671e:	ff 91       	pop	r31
    6720:	ef 91       	pop	r30
    6722:	bf 91       	pop	r27
    6724:	af 91       	pop	r26
    6726:	9f 91       	pop	r25
    6728:	8f 91       	pop	r24
    672a:	7f 91       	pop	r23
    672c:	6f 91       	pop	r22
    672e:	5f 91       	pop	r21
    6730:	4f 91       	pop	r20
    6732:	3f 91       	pop	r19
    6734:	2f 91       	pop	r18
    6736:	0f 90       	pop	r0
    6738:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    673c:	0f 90       	pop	r0
    673e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6742:	0f 90       	pop	r0
    6744:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6748:	0f 90       	pop	r0
    674a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    674e:	0f 90       	pop	r0
    6750:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6754:	0f 90       	pop	r0
    6756:	1f 90       	pop	r1
    6758:	18 95       	reti

0000675a <__vector_78>:
    675a:	1f 92       	push	r1
    675c:	0f 92       	push	r0
    675e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6762:	0f 92       	push	r0
    6764:	11 24       	eor	r1, r1
    6766:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    676a:	0f 92       	push	r0
    676c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6770:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6774:	0f 92       	push	r0
    6776:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    677a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    677e:	0f 92       	push	r0
    6780:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6784:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6788:	0f 92       	push	r0
    678a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    678e:	2f 93       	push	r18
    6790:	3f 93       	push	r19
    6792:	4f 93       	push	r20
    6794:	5f 93       	push	r21
    6796:	6f 93       	push	r22
    6798:	7f 93       	push	r23
    679a:	8f 93       	push	r24
    679c:	9f 93       	push	r25
    679e:	af 93       	push	r26
    67a0:	bf 93       	push	r27
    67a2:	ef 93       	push	r30
    67a4:	ff 93       	push	r31
    67a6:	cf 93       	push	r28
    67a8:	df 93       	push	r29
    67aa:	cd b7       	in	r28, 0x3d	; 61
    67ac:	de b7       	in	r29, 0x3e	; 62
    67ae:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <tc_tcd0_err_callback>
    67b2:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <tc_tcd0_err_callback+0x1>
    67b6:	89 2b       	or	r24, r25
    67b8:	31 f0       	breq	.+12     	; 0x67c6 <__vector_78+0x6c>
    67ba:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <tc_tcd0_err_callback>
    67be:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <tc_tcd0_err_callback+0x1>
    67c2:	fc 01       	movw	r30, r24
    67c4:	19 95       	eicall
    67c6:	00 00       	nop
    67c8:	df 91       	pop	r29
    67ca:	cf 91       	pop	r28
    67cc:	ff 91       	pop	r31
    67ce:	ef 91       	pop	r30
    67d0:	bf 91       	pop	r27
    67d2:	af 91       	pop	r26
    67d4:	9f 91       	pop	r25
    67d6:	8f 91       	pop	r24
    67d8:	7f 91       	pop	r23
    67da:	6f 91       	pop	r22
    67dc:	5f 91       	pop	r21
    67de:	4f 91       	pop	r20
    67e0:	3f 91       	pop	r19
    67e2:	2f 91       	pop	r18
    67e4:	0f 90       	pop	r0
    67e6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    67ea:	0f 90       	pop	r0
    67ec:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    67f0:	0f 90       	pop	r0
    67f2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    67f6:	0f 90       	pop	r0
    67f8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    67fc:	0f 90       	pop	r0
    67fe:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6802:	0f 90       	pop	r0
    6804:	1f 90       	pop	r1
    6806:	18 95       	reti

00006808 <__vector_79>:
    6808:	1f 92       	push	r1
    680a:	0f 92       	push	r0
    680c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6810:	0f 92       	push	r0
    6812:	11 24       	eor	r1, r1
    6814:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6818:	0f 92       	push	r0
    681a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    681e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6822:	0f 92       	push	r0
    6824:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6828:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    682c:	0f 92       	push	r0
    682e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6832:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6836:	0f 92       	push	r0
    6838:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    683c:	2f 93       	push	r18
    683e:	3f 93       	push	r19
    6840:	4f 93       	push	r20
    6842:	5f 93       	push	r21
    6844:	6f 93       	push	r22
    6846:	7f 93       	push	r23
    6848:	8f 93       	push	r24
    684a:	9f 93       	push	r25
    684c:	af 93       	push	r26
    684e:	bf 93       	push	r27
    6850:	ef 93       	push	r30
    6852:	ff 93       	push	r31
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	cd b7       	in	r28, 0x3d	; 61
    685a:	de b7       	in	r29, 0x3e	; 62
    685c:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <tc_tcd0_cca_callback>
    6860:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <tc_tcd0_cca_callback+0x1>
    6864:	89 2b       	or	r24, r25
    6866:	31 f0       	breq	.+12     	; 0x6874 <__vector_79+0x6c>
    6868:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <tc_tcd0_cca_callback>
    686c:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <tc_tcd0_cca_callback+0x1>
    6870:	fc 01       	movw	r30, r24
    6872:	19 95       	eicall
    6874:	00 00       	nop
    6876:	df 91       	pop	r29
    6878:	cf 91       	pop	r28
    687a:	ff 91       	pop	r31
    687c:	ef 91       	pop	r30
    687e:	bf 91       	pop	r27
    6880:	af 91       	pop	r26
    6882:	9f 91       	pop	r25
    6884:	8f 91       	pop	r24
    6886:	7f 91       	pop	r23
    6888:	6f 91       	pop	r22
    688a:	5f 91       	pop	r21
    688c:	4f 91       	pop	r20
    688e:	3f 91       	pop	r19
    6890:	2f 91       	pop	r18
    6892:	0f 90       	pop	r0
    6894:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6898:	0f 90       	pop	r0
    689a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    689e:	0f 90       	pop	r0
    68a0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68a4:	0f 90       	pop	r0
    68a6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68aa:	0f 90       	pop	r0
    68ac:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    68b0:	0f 90       	pop	r0
    68b2:	1f 90       	pop	r1
    68b4:	18 95       	reti

000068b6 <__vector_80>:
    68b6:	1f 92       	push	r1
    68b8:	0f 92       	push	r0
    68ba:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    68be:	0f 92       	push	r0
    68c0:	11 24       	eor	r1, r1
    68c2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68c6:	0f 92       	push	r0
    68c8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68cc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68d0:	0f 92       	push	r0
    68d2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68d6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    68da:	0f 92       	push	r0
    68dc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    68e0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    68e4:	0f 92       	push	r0
    68e6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    68ea:	2f 93       	push	r18
    68ec:	3f 93       	push	r19
    68ee:	4f 93       	push	r20
    68f0:	5f 93       	push	r21
    68f2:	6f 93       	push	r22
    68f4:	7f 93       	push	r23
    68f6:	8f 93       	push	r24
    68f8:	9f 93       	push	r25
    68fa:	af 93       	push	r26
    68fc:	bf 93       	push	r27
    68fe:	ef 93       	push	r30
    6900:	ff 93       	push	r31
    6902:	cf 93       	push	r28
    6904:	df 93       	push	r29
    6906:	cd b7       	in	r28, 0x3d	; 61
    6908:	de b7       	in	r29, 0x3e	; 62
    690a:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <tc_tcd0_ccb_callback>
    690e:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <tc_tcd0_ccb_callback+0x1>
    6912:	89 2b       	or	r24, r25
    6914:	31 f0       	breq	.+12     	; 0x6922 <__vector_80+0x6c>
    6916:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <tc_tcd0_ccb_callback>
    691a:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <tc_tcd0_ccb_callback+0x1>
    691e:	fc 01       	movw	r30, r24
    6920:	19 95       	eicall
    6922:	00 00       	nop
    6924:	df 91       	pop	r29
    6926:	cf 91       	pop	r28
    6928:	ff 91       	pop	r31
    692a:	ef 91       	pop	r30
    692c:	bf 91       	pop	r27
    692e:	af 91       	pop	r26
    6930:	9f 91       	pop	r25
    6932:	8f 91       	pop	r24
    6934:	7f 91       	pop	r23
    6936:	6f 91       	pop	r22
    6938:	5f 91       	pop	r21
    693a:	4f 91       	pop	r20
    693c:	3f 91       	pop	r19
    693e:	2f 91       	pop	r18
    6940:	0f 90       	pop	r0
    6942:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6946:	0f 90       	pop	r0
    6948:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    694c:	0f 90       	pop	r0
    694e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6952:	0f 90       	pop	r0
    6954:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6958:	0f 90       	pop	r0
    695a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    695e:	0f 90       	pop	r0
    6960:	1f 90       	pop	r1
    6962:	18 95       	reti

00006964 <__vector_81>:
    6964:	1f 92       	push	r1
    6966:	0f 92       	push	r0
    6968:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    696c:	0f 92       	push	r0
    696e:	11 24       	eor	r1, r1
    6970:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6974:	0f 92       	push	r0
    6976:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    697a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    697e:	0f 92       	push	r0
    6980:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6984:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6988:	0f 92       	push	r0
    698a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    698e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6992:	0f 92       	push	r0
    6994:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6998:	2f 93       	push	r18
    699a:	3f 93       	push	r19
    699c:	4f 93       	push	r20
    699e:	5f 93       	push	r21
    69a0:	6f 93       	push	r22
    69a2:	7f 93       	push	r23
    69a4:	8f 93       	push	r24
    69a6:	9f 93       	push	r25
    69a8:	af 93       	push	r26
    69aa:	bf 93       	push	r27
    69ac:	ef 93       	push	r30
    69ae:	ff 93       	push	r31
    69b0:	cf 93       	push	r28
    69b2:	df 93       	push	r29
    69b4:	cd b7       	in	r28, 0x3d	; 61
    69b6:	de b7       	in	r29, 0x3e	; 62
    69b8:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <tc_tcd0_ccc_callback>
    69bc:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <tc_tcd0_ccc_callback+0x1>
    69c0:	89 2b       	or	r24, r25
    69c2:	31 f0       	breq	.+12     	; 0x69d0 <__vector_81+0x6c>
    69c4:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <tc_tcd0_ccc_callback>
    69c8:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <tc_tcd0_ccc_callback+0x1>
    69cc:	fc 01       	movw	r30, r24
    69ce:	19 95       	eicall
    69d0:	00 00       	nop
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	ff 91       	pop	r31
    69d8:	ef 91       	pop	r30
    69da:	bf 91       	pop	r27
    69dc:	af 91       	pop	r26
    69de:	9f 91       	pop	r25
    69e0:	8f 91       	pop	r24
    69e2:	7f 91       	pop	r23
    69e4:	6f 91       	pop	r22
    69e6:	5f 91       	pop	r21
    69e8:	4f 91       	pop	r20
    69ea:	3f 91       	pop	r19
    69ec:	2f 91       	pop	r18
    69ee:	0f 90       	pop	r0
    69f0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    69f4:	0f 90       	pop	r0
    69f6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    69fa:	0f 90       	pop	r0
    69fc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a00:	0f 90       	pop	r0
    6a02:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a06:	0f 90       	pop	r0
    6a08:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6a0c:	0f 90       	pop	r0
    6a0e:	1f 90       	pop	r1
    6a10:	18 95       	reti

00006a12 <__vector_82>:
    6a12:	1f 92       	push	r1
    6a14:	0f 92       	push	r0
    6a16:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6a1a:	0f 92       	push	r0
    6a1c:	11 24       	eor	r1, r1
    6a1e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a22:	0f 92       	push	r0
    6a24:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a28:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a2c:	0f 92       	push	r0
    6a2e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a32:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a36:	0f 92       	push	r0
    6a38:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a3c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a40:	0f 92       	push	r0
    6a42:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a46:	2f 93       	push	r18
    6a48:	3f 93       	push	r19
    6a4a:	4f 93       	push	r20
    6a4c:	5f 93       	push	r21
    6a4e:	6f 93       	push	r22
    6a50:	7f 93       	push	r23
    6a52:	8f 93       	push	r24
    6a54:	9f 93       	push	r25
    6a56:	af 93       	push	r26
    6a58:	bf 93       	push	r27
    6a5a:	ef 93       	push	r30
    6a5c:	ff 93       	push	r31
    6a5e:	cf 93       	push	r28
    6a60:	df 93       	push	r29
    6a62:	cd b7       	in	r28, 0x3d	; 61
    6a64:	de b7       	in	r29, 0x3e	; 62
    6a66:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <tc_tcd0_ccd_callback>
    6a6a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <tc_tcd0_ccd_callback+0x1>
    6a6e:	89 2b       	or	r24, r25
    6a70:	31 f0       	breq	.+12     	; 0x6a7e <__vector_82+0x6c>
    6a72:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <tc_tcd0_ccd_callback>
    6a76:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <tc_tcd0_ccd_callback+0x1>
    6a7a:	fc 01       	movw	r30, r24
    6a7c:	19 95       	eicall
    6a7e:	00 00       	nop
    6a80:	df 91       	pop	r29
    6a82:	cf 91       	pop	r28
    6a84:	ff 91       	pop	r31
    6a86:	ef 91       	pop	r30
    6a88:	bf 91       	pop	r27
    6a8a:	af 91       	pop	r26
    6a8c:	9f 91       	pop	r25
    6a8e:	8f 91       	pop	r24
    6a90:	7f 91       	pop	r23
    6a92:	6f 91       	pop	r22
    6a94:	5f 91       	pop	r21
    6a96:	4f 91       	pop	r20
    6a98:	3f 91       	pop	r19
    6a9a:	2f 91       	pop	r18
    6a9c:	0f 90       	pop	r0
    6a9e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6aa2:	0f 90       	pop	r0
    6aa4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6aa8:	0f 90       	pop	r0
    6aaa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6aae:	0f 90       	pop	r0
    6ab0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ab4:	0f 90       	pop	r0
    6ab6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6aba:	0f 90       	pop	r0
    6abc:	1f 90       	pop	r1
    6abe:	18 95       	reti

00006ac0 <__vector_83>:
    6ac0:	1f 92       	push	r1
    6ac2:	0f 92       	push	r0
    6ac4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6ac8:	0f 92       	push	r0
    6aca:	11 24       	eor	r1, r1
    6acc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ad0:	0f 92       	push	r0
    6ad2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ad6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ada:	0f 92       	push	r0
    6adc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ae0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ae4:	0f 92       	push	r0
    6ae6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6aea:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6aee:	0f 92       	push	r0
    6af0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6af4:	2f 93       	push	r18
    6af6:	3f 93       	push	r19
    6af8:	4f 93       	push	r20
    6afa:	5f 93       	push	r21
    6afc:	6f 93       	push	r22
    6afe:	7f 93       	push	r23
    6b00:	8f 93       	push	r24
    6b02:	9f 93       	push	r25
    6b04:	af 93       	push	r26
    6b06:	bf 93       	push	r27
    6b08:	ef 93       	push	r30
    6b0a:	ff 93       	push	r31
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	cd b7       	in	r28, 0x3d	; 61
    6b12:	de b7       	in	r29, 0x3e	; 62
    6b14:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <tc_tcd1_ovf_callback>
    6b18:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <tc_tcd1_ovf_callback+0x1>
    6b1c:	89 2b       	or	r24, r25
    6b1e:	31 f0       	breq	.+12     	; 0x6b2c <__vector_83+0x6c>
    6b20:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <tc_tcd1_ovf_callback>
    6b24:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <tc_tcd1_ovf_callback+0x1>
    6b28:	fc 01       	movw	r30, r24
    6b2a:	19 95       	eicall
    6b2c:	00 00       	nop
    6b2e:	df 91       	pop	r29
    6b30:	cf 91       	pop	r28
    6b32:	ff 91       	pop	r31
    6b34:	ef 91       	pop	r30
    6b36:	bf 91       	pop	r27
    6b38:	af 91       	pop	r26
    6b3a:	9f 91       	pop	r25
    6b3c:	8f 91       	pop	r24
    6b3e:	7f 91       	pop	r23
    6b40:	6f 91       	pop	r22
    6b42:	5f 91       	pop	r21
    6b44:	4f 91       	pop	r20
    6b46:	3f 91       	pop	r19
    6b48:	2f 91       	pop	r18
    6b4a:	0f 90       	pop	r0
    6b4c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b50:	0f 90       	pop	r0
    6b52:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b56:	0f 90       	pop	r0
    6b58:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b5c:	0f 90       	pop	r0
    6b5e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b62:	0f 90       	pop	r0
    6b64:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6b68:	0f 90       	pop	r0
    6b6a:	1f 90       	pop	r1
    6b6c:	18 95       	reti

00006b6e <__vector_84>:
    6b6e:	1f 92       	push	r1
    6b70:	0f 92       	push	r0
    6b72:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6b76:	0f 92       	push	r0
    6b78:	11 24       	eor	r1, r1
    6b7a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b7e:	0f 92       	push	r0
    6b80:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b84:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b88:	0f 92       	push	r0
    6b8a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b8e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b92:	0f 92       	push	r0
    6b94:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b98:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b9c:	0f 92       	push	r0
    6b9e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6ba2:	2f 93       	push	r18
    6ba4:	3f 93       	push	r19
    6ba6:	4f 93       	push	r20
    6ba8:	5f 93       	push	r21
    6baa:	6f 93       	push	r22
    6bac:	7f 93       	push	r23
    6bae:	8f 93       	push	r24
    6bb0:	9f 93       	push	r25
    6bb2:	af 93       	push	r26
    6bb4:	bf 93       	push	r27
    6bb6:	ef 93       	push	r30
    6bb8:	ff 93       	push	r31
    6bba:	cf 93       	push	r28
    6bbc:	df 93       	push	r29
    6bbe:	cd b7       	in	r28, 0x3d	; 61
    6bc0:	de b7       	in	r29, 0x3e	; 62
    6bc2:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <tc_tcd1_err_callback>
    6bc6:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <tc_tcd1_err_callback+0x1>
    6bca:	89 2b       	or	r24, r25
    6bcc:	31 f0       	breq	.+12     	; 0x6bda <__vector_84+0x6c>
    6bce:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <tc_tcd1_err_callback>
    6bd2:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <tc_tcd1_err_callback+0x1>
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	19 95       	eicall
    6bda:	00 00       	nop
    6bdc:	df 91       	pop	r29
    6bde:	cf 91       	pop	r28
    6be0:	ff 91       	pop	r31
    6be2:	ef 91       	pop	r30
    6be4:	bf 91       	pop	r27
    6be6:	af 91       	pop	r26
    6be8:	9f 91       	pop	r25
    6bea:	8f 91       	pop	r24
    6bec:	7f 91       	pop	r23
    6bee:	6f 91       	pop	r22
    6bf0:	5f 91       	pop	r21
    6bf2:	4f 91       	pop	r20
    6bf4:	3f 91       	pop	r19
    6bf6:	2f 91       	pop	r18
    6bf8:	0f 90       	pop	r0
    6bfa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6bfe:	0f 90       	pop	r0
    6c00:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c04:	0f 90       	pop	r0
    6c06:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c0a:	0f 90       	pop	r0
    6c0c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c10:	0f 90       	pop	r0
    6c12:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6c16:	0f 90       	pop	r0
    6c18:	1f 90       	pop	r1
    6c1a:	18 95       	reti

00006c1c <__vector_85>:
    6c1c:	1f 92       	push	r1
    6c1e:	0f 92       	push	r0
    6c20:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6c24:	0f 92       	push	r0
    6c26:	11 24       	eor	r1, r1
    6c28:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c2c:	0f 92       	push	r0
    6c2e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c32:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c36:	0f 92       	push	r0
    6c38:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c3c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c40:	0f 92       	push	r0
    6c42:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c46:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c4a:	0f 92       	push	r0
    6c4c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c50:	2f 93       	push	r18
    6c52:	3f 93       	push	r19
    6c54:	4f 93       	push	r20
    6c56:	5f 93       	push	r21
    6c58:	6f 93       	push	r22
    6c5a:	7f 93       	push	r23
    6c5c:	8f 93       	push	r24
    6c5e:	9f 93       	push	r25
    6c60:	af 93       	push	r26
    6c62:	bf 93       	push	r27
    6c64:	ef 93       	push	r30
    6c66:	ff 93       	push	r31
    6c68:	cf 93       	push	r28
    6c6a:	df 93       	push	r29
    6c6c:	cd b7       	in	r28, 0x3d	; 61
    6c6e:	de b7       	in	r29, 0x3e	; 62
    6c70:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <tc_tcd1_cca_callback>
    6c74:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <tc_tcd1_cca_callback+0x1>
    6c78:	89 2b       	or	r24, r25
    6c7a:	31 f0       	breq	.+12     	; 0x6c88 <__vector_85+0x6c>
    6c7c:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <tc_tcd1_cca_callback>
    6c80:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <tc_tcd1_cca_callback+0x1>
    6c84:	fc 01       	movw	r30, r24
    6c86:	19 95       	eicall
    6c88:	00 00       	nop
    6c8a:	df 91       	pop	r29
    6c8c:	cf 91       	pop	r28
    6c8e:	ff 91       	pop	r31
    6c90:	ef 91       	pop	r30
    6c92:	bf 91       	pop	r27
    6c94:	af 91       	pop	r26
    6c96:	9f 91       	pop	r25
    6c98:	8f 91       	pop	r24
    6c9a:	7f 91       	pop	r23
    6c9c:	6f 91       	pop	r22
    6c9e:	5f 91       	pop	r21
    6ca0:	4f 91       	pop	r20
    6ca2:	3f 91       	pop	r19
    6ca4:	2f 91       	pop	r18
    6ca6:	0f 90       	pop	r0
    6ca8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6cac:	0f 90       	pop	r0
    6cae:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6cb2:	0f 90       	pop	r0
    6cb4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6cb8:	0f 90       	pop	r0
    6cba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6cbe:	0f 90       	pop	r0
    6cc0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6cc4:	0f 90       	pop	r0
    6cc6:	1f 90       	pop	r1
    6cc8:	18 95       	reti

00006cca <__vector_86>:
    6cca:	1f 92       	push	r1
    6ccc:	0f 92       	push	r0
    6cce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6cd2:	0f 92       	push	r0
    6cd4:	11 24       	eor	r1, r1
    6cd6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6cda:	0f 92       	push	r0
    6cdc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ce0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ce4:	0f 92       	push	r0
    6ce6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6cea:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6cee:	0f 92       	push	r0
    6cf0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6cf4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6cf8:	0f 92       	push	r0
    6cfa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6cfe:	2f 93       	push	r18
    6d00:	3f 93       	push	r19
    6d02:	4f 93       	push	r20
    6d04:	5f 93       	push	r21
    6d06:	6f 93       	push	r22
    6d08:	7f 93       	push	r23
    6d0a:	8f 93       	push	r24
    6d0c:	9f 93       	push	r25
    6d0e:	af 93       	push	r26
    6d10:	bf 93       	push	r27
    6d12:	ef 93       	push	r30
    6d14:	ff 93       	push	r31
    6d16:	cf 93       	push	r28
    6d18:	df 93       	push	r29
    6d1a:	cd b7       	in	r28, 0x3d	; 61
    6d1c:	de b7       	in	r29, 0x3e	; 62
    6d1e:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <tc_tcd1_ccb_callback>
    6d22:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <tc_tcd1_ccb_callback+0x1>
    6d26:	89 2b       	or	r24, r25
    6d28:	31 f0       	breq	.+12     	; 0x6d36 <__vector_86+0x6c>
    6d2a:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <tc_tcd1_ccb_callback>
    6d2e:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <tc_tcd1_ccb_callback+0x1>
    6d32:	fc 01       	movw	r30, r24
    6d34:	19 95       	eicall
    6d36:	00 00       	nop
    6d38:	df 91       	pop	r29
    6d3a:	cf 91       	pop	r28
    6d3c:	ff 91       	pop	r31
    6d3e:	ef 91       	pop	r30
    6d40:	bf 91       	pop	r27
    6d42:	af 91       	pop	r26
    6d44:	9f 91       	pop	r25
    6d46:	8f 91       	pop	r24
    6d48:	7f 91       	pop	r23
    6d4a:	6f 91       	pop	r22
    6d4c:	5f 91       	pop	r21
    6d4e:	4f 91       	pop	r20
    6d50:	3f 91       	pop	r19
    6d52:	2f 91       	pop	r18
    6d54:	0f 90       	pop	r0
    6d56:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d5a:	0f 90       	pop	r0
    6d5c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d60:	0f 90       	pop	r0
    6d62:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d66:	0f 90       	pop	r0
    6d68:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d6c:	0f 90       	pop	r0
    6d6e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6d72:	0f 90       	pop	r0
    6d74:	1f 90       	pop	r1
    6d76:	18 95       	reti

00006d78 <__vector_47>:
    6d78:	1f 92       	push	r1
    6d7a:	0f 92       	push	r0
    6d7c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6d80:	0f 92       	push	r0
    6d82:	11 24       	eor	r1, r1
    6d84:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d88:	0f 92       	push	r0
    6d8a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d8e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d92:	0f 92       	push	r0
    6d94:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d98:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d9c:	0f 92       	push	r0
    6d9e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6da2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6da6:	0f 92       	push	r0
    6da8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6dac:	2f 93       	push	r18
    6dae:	3f 93       	push	r19
    6db0:	4f 93       	push	r20
    6db2:	5f 93       	push	r21
    6db4:	6f 93       	push	r22
    6db6:	7f 93       	push	r23
    6db8:	8f 93       	push	r24
    6dba:	9f 93       	push	r25
    6dbc:	af 93       	push	r26
    6dbe:	bf 93       	push	r27
    6dc0:	ef 93       	push	r30
    6dc2:	ff 93       	push	r31
    6dc4:	cf 93       	push	r28
    6dc6:	df 93       	push	r29
    6dc8:	cd b7       	in	r28, 0x3d	; 61
    6dca:	de b7       	in	r29, 0x3e	; 62
    6dcc:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <tc_tce0_ovf_callback>
    6dd0:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <tc_tce0_ovf_callback+0x1>
    6dd4:	89 2b       	or	r24, r25
    6dd6:	31 f0       	breq	.+12     	; 0x6de4 <__vector_47+0x6c>
    6dd8:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <tc_tce0_ovf_callback>
    6ddc:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <tc_tce0_ovf_callback+0x1>
    6de0:	fc 01       	movw	r30, r24
    6de2:	19 95       	eicall
    6de4:	00 00       	nop
    6de6:	df 91       	pop	r29
    6de8:	cf 91       	pop	r28
    6dea:	ff 91       	pop	r31
    6dec:	ef 91       	pop	r30
    6dee:	bf 91       	pop	r27
    6df0:	af 91       	pop	r26
    6df2:	9f 91       	pop	r25
    6df4:	8f 91       	pop	r24
    6df6:	7f 91       	pop	r23
    6df8:	6f 91       	pop	r22
    6dfa:	5f 91       	pop	r21
    6dfc:	4f 91       	pop	r20
    6dfe:	3f 91       	pop	r19
    6e00:	2f 91       	pop	r18
    6e02:	0f 90       	pop	r0
    6e04:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e08:	0f 90       	pop	r0
    6e0a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e0e:	0f 90       	pop	r0
    6e10:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e14:	0f 90       	pop	r0
    6e16:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e1a:	0f 90       	pop	r0
    6e1c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6e20:	0f 90       	pop	r0
    6e22:	1f 90       	pop	r1
    6e24:	18 95       	reti

00006e26 <__vector_48>:
    6e26:	1f 92       	push	r1
    6e28:	0f 92       	push	r0
    6e2a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6e2e:	0f 92       	push	r0
    6e30:	11 24       	eor	r1, r1
    6e32:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e36:	0f 92       	push	r0
    6e38:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e3c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e40:	0f 92       	push	r0
    6e42:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e46:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e4a:	0f 92       	push	r0
    6e4c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e50:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e54:	0f 92       	push	r0
    6e56:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e5a:	2f 93       	push	r18
    6e5c:	3f 93       	push	r19
    6e5e:	4f 93       	push	r20
    6e60:	5f 93       	push	r21
    6e62:	6f 93       	push	r22
    6e64:	7f 93       	push	r23
    6e66:	8f 93       	push	r24
    6e68:	9f 93       	push	r25
    6e6a:	af 93       	push	r26
    6e6c:	bf 93       	push	r27
    6e6e:	ef 93       	push	r30
    6e70:	ff 93       	push	r31
    6e72:	cf 93       	push	r28
    6e74:	df 93       	push	r29
    6e76:	cd b7       	in	r28, 0x3d	; 61
    6e78:	de b7       	in	r29, 0x3e	; 62
    6e7a:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <tc_tce0_err_callback>
    6e7e:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <tc_tce0_err_callback+0x1>
    6e82:	89 2b       	or	r24, r25
    6e84:	31 f0       	breq	.+12     	; 0x6e92 <__vector_48+0x6c>
    6e86:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <tc_tce0_err_callback>
    6e8a:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <tc_tce0_err_callback+0x1>
    6e8e:	fc 01       	movw	r30, r24
    6e90:	19 95       	eicall
    6e92:	00 00       	nop
    6e94:	df 91       	pop	r29
    6e96:	cf 91       	pop	r28
    6e98:	ff 91       	pop	r31
    6e9a:	ef 91       	pop	r30
    6e9c:	bf 91       	pop	r27
    6e9e:	af 91       	pop	r26
    6ea0:	9f 91       	pop	r25
    6ea2:	8f 91       	pop	r24
    6ea4:	7f 91       	pop	r23
    6ea6:	6f 91       	pop	r22
    6ea8:	5f 91       	pop	r21
    6eaa:	4f 91       	pop	r20
    6eac:	3f 91       	pop	r19
    6eae:	2f 91       	pop	r18
    6eb0:	0f 90       	pop	r0
    6eb2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6eb6:	0f 90       	pop	r0
    6eb8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ebc:	0f 90       	pop	r0
    6ebe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ec2:	0f 90       	pop	r0
    6ec4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ec8:	0f 90       	pop	r0
    6eca:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6ece:	0f 90       	pop	r0
    6ed0:	1f 90       	pop	r1
    6ed2:	18 95       	reti

00006ed4 <__vector_49>:
    6ed4:	1f 92       	push	r1
    6ed6:	0f 92       	push	r0
    6ed8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6edc:	0f 92       	push	r0
    6ede:	11 24       	eor	r1, r1
    6ee0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ee4:	0f 92       	push	r0
    6ee6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6eea:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6eee:	0f 92       	push	r0
    6ef0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ef4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ef8:	0f 92       	push	r0
    6efa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6efe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f02:	0f 92       	push	r0
    6f04:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f08:	2f 93       	push	r18
    6f0a:	3f 93       	push	r19
    6f0c:	4f 93       	push	r20
    6f0e:	5f 93       	push	r21
    6f10:	6f 93       	push	r22
    6f12:	7f 93       	push	r23
    6f14:	8f 93       	push	r24
    6f16:	9f 93       	push	r25
    6f18:	af 93       	push	r26
    6f1a:	bf 93       	push	r27
    6f1c:	ef 93       	push	r30
    6f1e:	ff 93       	push	r31
    6f20:	cf 93       	push	r28
    6f22:	df 93       	push	r29
    6f24:	cd b7       	in	r28, 0x3d	; 61
    6f26:	de b7       	in	r29, 0x3e	; 62
    6f28:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <tc_tce0_cca_callback>
    6f2c:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <tc_tce0_cca_callback+0x1>
    6f30:	89 2b       	or	r24, r25
    6f32:	31 f0       	breq	.+12     	; 0x6f40 <__vector_49+0x6c>
    6f34:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <tc_tce0_cca_callback>
    6f38:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <tc_tce0_cca_callback+0x1>
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	19 95       	eicall
    6f40:	00 00       	nop
    6f42:	df 91       	pop	r29
    6f44:	cf 91       	pop	r28
    6f46:	ff 91       	pop	r31
    6f48:	ef 91       	pop	r30
    6f4a:	bf 91       	pop	r27
    6f4c:	af 91       	pop	r26
    6f4e:	9f 91       	pop	r25
    6f50:	8f 91       	pop	r24
    6f52:	7f 91       	pop	r23
    6f54:	6f 91       	pop	r22
    6f56:	5f 91       	pop	r21
    6f58:	4f 91       	pop	r20
    6f5a:	3f 91       	pop	r19
    6f5c:	2f 91       	pop	r18
    6f5e:	0f 90       	pop	r0
    6f60:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f64:	0f 90       	pop	r0
    6f66:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f6a:	0f 90       	pop	r0
    6f6c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f70:	0f 90       	pop	r0
    6f72:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f76:	0f 90       	pop	r0
    6f78:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6f7c:	0f 90       	pop	r0
    6f7e:	1f 90       	pop	r1
    6f80:	18 95       	reti

00006f82 <__vector_50>:
    6f82:	1f 92       	push	r1
    6f84:	0f 92       	push	r0
    6f86:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6f8a:	0f 92       	push	r0
    6f8c:	11 24       	eor	r1, r1
    6f8e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f92:	0f 92       	push	r0
    6f94:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f98:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f9c:	0f 92       	push	r0
    6f9e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6fa2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6fa6:	0f 92       	push	r0
    6fa8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6fac:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6fb0:	0f 92       	push	r0
    6fb2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6fb6:	2f 93       	push	r18
    6fb8:	3f 93       	push	r19
    6fba:	4f 93       	push	r20
    6fbc:	5f 93       	push	r21
    6fbe:	6f 93       	push	r22
    6fc0:	7f 93       	push	r23
    6fc2:	8f 93       	push	r24
    6fc4:	9f 93       	push	r25
    6fc6:	af 93       	push	r26
    6fc8:	bf 93       	push	r27
    6fca:	ef 93       	push	r30
    6fcc:	ff 93       	push	r31
    6fce:	cf 93       	push	r28
    6fd0:	df 93       	push	r29
    6fd2:	cd b7       	in	r28, 0x3d	; 61
    6fd4:	de b7       	in	r29, 0x3e	; 62
    6fd6:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <tc_tce0_ccb_callback>
    6fda:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <tc_tce0_ccb_callback+0x1>
    6fde:	89 2b       	or	r24, r25
    6fe0:	31 f0       	breq	.+12     	; 0x6fee <__vector_50+0x6c>
    6fe2:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <tc_tce0_ccb_callback>
    6fe6:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <tc_tce0_ccb_callback+0x1>
    6fea:	fc 01       	movw	r30, r24
    6fec:	19 95       	eicall
    6fee:	00 00       	nop
    6ff0:	df 91       	pop	r29
    6ff2:	cf 91       	pop	r28
    6ff4:	ff 91       	pop	r31
    6ff6:	ef 91       	pop	r30
    6ff8:	bf 91       	pop	r27
    6ffa:	af 91       	pop	r26
    6ffc:	9f 91       	pop	r25
    6ffe:	8f 91       	pop	r24
    7000:	7f 91       	pop	r23
    7002:	6f 91       	pop	r22
    7004:	5f 91       	pop	r21
    7006:	4f 91       	pop	r20
    7008:	3f 91       	pop	r19
    700a:	2f 91       	pop	r18
    700c:	0f 90       	pop	r0
    700e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7012:	0f 90       	pop	r0
    7014:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7018:	0f 90       	pop	r0
    701a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    701e:	0f 90       	pop	r0
    7020:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7024:	0f 90       	pop	r0
    7026:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    702a:	0f 90       	pop	r0
    702c:	1f 90       	pop	r1
    702e:	18 95       	reti

00007030 <__vector_51>:
    7030:	1f 92       	push	r1
    7032:	0f 92       	push	r0
    7034:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7038:	0f 92       	push	r0
    703a:	11 24       	eor	r1, r1
    703c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7040:	0f 92       	push	r0
    7042:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7046:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    704a:	0f 92       	push	r0
    704c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7050:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7054:	0f 92       	push	r0
    7056:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    705a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    705e:	0f 92       	push	r0
    7060:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7064:	2f 93       	push	r18
    7066:	3f 93       	push	r19
    7068:	4f 93       	push	r20
    706a:	5f 93       	push	r21
    706c:	6f 93       	push	r22
    706e:	7f 93       	push	r23
    7070:	8f 93       	push	r24
    7072:	9f 93       	push	r25
    7074:	af 93       	push	r26
    7076:	bf 93       	push	r27
    7078:	ef 93       	push	r30
    707a:	ff 93       	push	r31
    707c:	cf 93       	push	r28
    707e:	df 93       	push	r29
    7080:	cd b7       	in	r28, 0x3d	; 61
    7082:	de b7       	in	r29, 0x3e	; 62
    7084:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <tc_tce0_ccc_callback>
    7088:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <tc_tce0_ccc_callback+0x1>
    708c:	89 2b       	or	r24, r25
    708e:	31 f0       	breq	.+12     	; 0x709c <__vector_51+0x6c>
    7090:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <tc_tce0_ccc_callback>
    7094:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <tc_tce0_ccc_callback+0x1>
    7098:	fc 01       	movw	r30, r24
    709a:	19 95       	eicall
    709c:	00 00       	nop
    709e:	df 91       	pop	r29
    70a0:	cf 91       	pop	r28
    70a2:	ff 91       	pop	r31
    70a4:	ef 91       	pop	r30
    70a6:	bf 91       	pop	r27
    70a8:	af 91       	pop	r26
    70aa:	9f 91       	pop	r25
    70ac:	8f 91       	pop	r24
    70ae:	7f 91       	pop	r23
    70b0:	6f 91       	pop	r22
    70b2:	5f 91       	pop	r21
    70b4:	4f 91       	pop	r20
    70b6:	3f 91       	pop	r19
    70b8:	2f 91       	pop	r18
    70ba:	0f 90       	pop	r0
    70bc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    70c0:	0f 90       	pop	r0
    70c2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    70c6:	0f 90       	pop	r0
    70c8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70cc:	0f 90       	pop	r0
    70ce:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70d2:	0f 90       	pop	r0
    70d4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    70d8:	0f 90       	pop	r0
    70da:	1f 90       	pop	r1
    70dc:	18 95       	reti

000070de <__vector_52>:
    70de:	1f 92       	push	r1
    70e0:	0f 92       	push	r0
    70e2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    70e6:	0f 92       	push	r0
    70e8:	11 24       	eor	r1, r1
    70ea:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70ee:	0f 92       	push	r0
    70f0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70f4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70f8:	0f 92       	push	r0
    70fa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70fe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7102:	0f 92       	push	r0
    7104:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7108:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    710c:	0f 92       	push	r0
    710e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7112:	2f 93       	push	r18
    7114:	3f 93       	push	r19
    7116:	4f 93       	push	r20
    7118:	5f 93       	push	r21
    711a:	6f 93       	push	r22
    711c:	7f 93       	push	r23
    711e:	8f 93       	push	r24
    7120:	9f 93       	push	r25
    7122:	af 93       	push	r26
    7124:	bf 93       	push	r27
    7126:	ef 93       	push	r30
    7128:	ff 93       	push	r31
    712a:	cf 93       	push	r28
    712c:	df 93       	push	r29
    712e:	cd b7       	in	r28, 0x3d	; 61
    7130:	de b7       	in	r29, 0x3e	; 62
    7132:	80 91 06 22 	lds	r24, 0x2206	; 0x802206 <tc_tce0_ccd_callback>
    7136:	90 91 07 22 	lds	r25, 0x2207	; 0x802207 <tc_tce0_ccd_callback+0x1>
    713a:	89 2b       	or	r24, r25
    713c:	31 f0       	breq	.+12     	; 0x714a <__vector_52+0x6c>
    713e:	80 91 06 22 	lds	r24, 0x2206	; 0x802206 <tc_tce0_ccd_callback>
    7142:	90 91 07 22 	lds	r25, 0x2207	; 0x802207 <tc_tce0_ccd_callback+0x1>
    7146:	fc 01       	movw	r30, r24
    7148:	19 95       	eicall
    714a:	00 00       	nop
    714c:	df 91       	pop	r29
    714e:	cf 91       	pop	r28
    7150:	ff 91       	pop	r31
    7152:	ef 91       	pop	r30
    7154:	bf 91       	pop	r27
    7156:	af 91       	pop	r26
    7158:	9f 91       	pop	r25
    715a:	8f 91       	pop	r24
    715c:	7f 91       	pop	r23
    715e:	6f 91       	pop	r22
    7160:	5f 91       	pop	r21
    7162:	4f 91       	pop	r20
    7164:	3f 91       	pop	r19
    7166:	2f 91       	pop	r18
    7168:	0f 90       	pop	r0
    716a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    716e:	0f 90       	pop	r0
    7170:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7174:	0f 90       	pop	r0
    7176:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    717a:	0f 90       	pop	r0
    717c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7180:	0f 90       	pop	r0
    7182:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7186:	0f 90       	pop	r0
    7188:	1f 90       	pop	r1
    718a:	18 95       	reti

0000718c <__vector_53>:
    718c:	1f 92       	push	r1
    718e:	0f 92       	push	r0
    7190:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7194:	0f 92       	push	r0
    7196:	11 24       	eor	r1, r1
    7198:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    719c:	0f 92       	push	r0
    719e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    71a2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    71a6:	0f 92       	push	r0
    71a8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    71ac:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    71b0:	0f 92       	push	r0
    71b2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    71b6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    71ba:	0f 92       	push	r0
    71bc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    71c0:	2f 93       	push	r18
    71c2:	3f 93       	push	r19
    71c4:	4f 93       	push	r20
    71c6:	5f 93       	push	r21
    71c8:	6f 93       	push	r22
    71ca:	7f 93       	push	r23
    71cc:	8f 93       	push	r24
    71ce:	9f 93       	push	r25
    71d0:	af 93       	push	r26
    71d2:	bf 93       	push	r27
    71d4:	ef 93       	push	r30
    71d6:	ff 93       	push	r31
    71d8:	cf 93       	push	r28
    71da:	df 93       	push	r29
    71dc:	cd b7       	in	r28, 0x3d	; 61
    71de:	de b7       	in	r29, 0x3e	; 62
    71e0:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <tc_tce1_ovf_callback>
    71e4:	90 91 09 22 	lds	r25, 0x2209	; 0x802209 <tc_tce1_ovf_callback+0x1>
    71e8:	89 2b       	or	r24, r25
    71ea:	31 f0       	breq	.+12     	; 0x71f8 <__vector_53+0x6c>
    71ec:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <tc_tce1_ovf_callback>
    71f0:	90 91 09 22 	lds	r25, 0x2209	; 0x802209 <tc_tce1_ovf_callback+0x1>
    71f4:	fc 01       	movw	r30, r24
    71f6:	19 95       	eicall
    71f8:	00 00       	nop
    71fa:	df 91       	pop	r29
    71fc:	cf 91       	pop	r28
    71fe:	ff 91       	pop	r31
    7200:	ef 91       	pop	r30
    7202:	bf 91       	pop	r27
    7204:	af 91       	pop	r26
    7206:	9f 91       	pop	r25
    7208:	8f 91       	pop	r24
    720a:	7f 91       	pop	r23
    720c:	6f 91       	pop	r22
    720e:	5f 91       	pop	r21
    7210:	4f 91       	pop	r20
    7212:	3f 91       	pop	r19
    7214:	2f 91       	pop	r18
    7216:	0f 90       	pop	r0
    7218:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    721c:	0f 90       	pop	r0
    721e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7222:	0f 90       	pop	r0
    7224:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7228:	0f 90       	pop	r0
    722a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    722e:	0f 90       	pop	r0
    7230:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7234:	0f 90       	pop	r0
    7236:	1f 90       	pop	r1
    7238:	18 95       	reti

0000723a <__vector_54>:
    723a:	1f 92       	push	r1
    723c:	0f 92       	push	r0
    723e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7242:	0f 92       	push	r0
    7244:	11 24       	eor	r1, r1
    7246:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    724a:	0f 92       	push	r0
    724c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7250:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7254:	0f 92       	push	r0
    7256:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    725a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    725e:	0f 92       	push	r0
    7260:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7264:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7268:	0f 92       	push	r0
    726a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    726e:	2f 93       	push	r18
    7270:	3f 93       	push	r19
    7272:	4f 93       	push	r20
    7274:	5f 93       	push	r21
    7276:	6f 93       	push	r22
    7278:	7f 93       	push	r23
    727a:	8f 93       	push	r24
    727c:	9f 93       	push	r25
    727e:	af 93       	push	r26
    7280:	bf 93       	push	r27
    7282:	ef 93       	push	r30
    7284:	ff 93       	push	r31
    7286:	cf 93       	push	r28
    7288:	df 93       	push	r29
    728a:	cd b7       	in	r28, 0x3d	; 61
    728c:	de b7       	in	r29, 0x3e	; 62
    728e:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <tc_tce1_err_callback>
    7292:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <tc_tce1_err_callback+0x1>
    7296:	89 2b       	or	r24, r25
    7298:	31 f0       	breq	.+12     	; 0x72a6 <__vector_54+0x6c>
    729a:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <tc_tce1_err_callback>
    729e:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <tc_tce1_err_callback+0x1>
    72a2:	fc 01       	movw	r30, r24
    72a4:	19 95       	eicall
    72a6:	00 00       	nop
    72a8:	df 91       	pop	r29
    72aa:	cf 91       	pop	r28
    72ac:	ff 91       	pop	r31
    72ae:	ef 91       	pop	r30
    72b0:	bf 91       	pop	r27
    72b2:	af 91       	pop	r26
    72b4:	9f 91       	pop	r25
    72b6:	8f 91       	pop	r24
    72b8:	7f 91       	pop	r23
    72ba:	6f 91       	pop	r22
    72bc:	5f 91       	pop	r21
    72be:	4f 91       	pop	r20
    72c0:	3f 91       	pop	r19
    72c2:	2f 91       	pop	r18
    72c4:	0f 90       	pop	r0
    72c6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    72ca:	0f 90       	pop	r0
    72cc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    72d0:	0f 90       	pop	r0
    72d2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    72d6:	0f 90       	pop	r0
    72d8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    72dc:	0f 90       	pop	r0
    72de:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    72e2:	0f 90       	pop	r0
    72e4:	1f 90       	pop	r1
    72e6:	18 95       	reti

000072e8 <__vector_55>:
    72e8:	1f 92       	push	r1
    72ea:	0f 92       	push	r0
    72ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    72f0:	0f 92       	push	r0
    72f2:	11 24       	eor	r1, r1
    72f4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    72f8:	0f 92       	push	r0
    72fa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    72fe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7302:	0f 92       	push	r0
    7304:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7308:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    730c:	0f 92       	push	r0
    730e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7312:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7316:	0f 92       	push	r0
    7318:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    731c:	2f 93       	push	r18
    731e:	3f 93       	push	r19
    7320:	4f 93       	push	r20
    7322:	5f 93       	push	r21
    7324:	6f 93       	push	r22
    7326:	7f 93       	push	r23
    7328:	8f 93       	push	r24
    732a:	9f 93       	push	r25
    732c:	af 93       	push	r26
    732e:	bf 93       	push	r27
    7330:	ef 93       	push	r30
    7332:	ff 93       	push	r31
    7334:	cf 93       	push	r28
    7336:	df 93       	push	r29
    7338:	cd b7       	in	r28, 0x3d	; 61
    733a:	de b7       	in	r29, 0x3e	; 62
    733c:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <tc_tce1_cca_callback>
    7340:	90 91 0d 22 	lds	r25, 0x220D	; 0x80220d <tc_tce1_cca_callback+0x1>
    7344:	89 2b       	or	r24, r25
    7346:	31 f0       	breq	.+12     	; 0x7354 <__vector_55+0x6c>
    7348:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <tc_tce1_cca_callback>
    734c:	90 91 0d 22 	lds	r25, 0x220D	; 0x80220d <tc_tce1_cca_callback+0x1>
    7350:	fc 01       	movw	r30, r24
    7352:	19 95       	eicall
    7354:	00 00       	nop
    7356:	df 91       	pop	r29
    7358:	cf 91       	pop	r28
    735a:	ff 91       	pop	r31
    735c:	ef 91       	pop	r30
    735e:	bf 91       	pop	r27
    7360:	af 91       	pop	r26
    7362:	9f 91       	pop	r25
    7364:	8f 91       	pop	r24
    7366:	7f 91       	pop	r23
    7368:	6f 91       	pop	r22
    736a:	5f 91       	pop	r21
    736c:	4f 91       	pop	r20
    736e:	3f 91       	pop	r19
    7370:	2f 91       	pop	r18
    7372:	0f 90       	pop	r0
    7374:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7378:	0f 90       	pop	r0
    737a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    737e:	0f 90       	pop	r0
    7380:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7384:	0f 90       	pop	r0
    7386:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    738a:	0f 90       	pop	r0
    738c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7390:	0f 90       	pop	r0
    7392:	1f 90       	pop	r1
    7394:	18 95       	reti

00007396 <__vector_56>:
    7396:	1f 92       	push	r1
    7398:	0f 92       	push	r0
    739a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    739e:	0f 92       	push	r0
    73a0:	11 24       	eor	r1, r1
    73a2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    73a6:	0f 92       	push	r0
    73a8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    73ac:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73b0:	0f 92       	push	r0
    73b2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73b6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73ba:	0f 92       	push	r0
    73bc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73c0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    73c4:	0f 92       	push	r0
    73c6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    73ca:	2f 93       	push	r18
    73cc:	3f 93       	push	r19
    73ce:	4f 93       	push	r20
    73d0:	5f 93       	push	r21
    73d2:	6f 93       	push	r22
    73d4:	7f 93       	push	r23
    73d6:	8f 93       	push	r24
    73d8:	9f 93       	push	r25
    73da:	af 93       	push	r26
    73dc:	bf 93       	push	r27
    73de:	ef 93       	push	r30
    73e0:	ff 93       	push	r31
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
    73e6:	cd b7       	in	r28, 0x3d	; 61
    73e8:	de b7       	in	r29, 0x3e	; 62
    73ea:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <tc_tce1_ccb_callback>
    73ee:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <tc_tce1_ccb_callback+0x1>
    73f2:	89 2b       	or	r24, r25
    73f4:	31 f0       	breq	.+12     	; 0x7402 <__vector_56+0x6c>
    73f6:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <tc_tce1_ccb_callback>
    73fa:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <tc_tce1_ccb_callback+0x1>
    73fe:	fc 01       	movw	r30, r24
    7400:	19 95       	eicall
    7402:	00 00       	nop
    7404:	df 91       	pop	r29
    7406:	cf 91       	pop	r28
    7408:	ff 91       	pop	r31
    740a:	ef 91       	pop	r30
    740c:	bf 91       	pop	r27
    740e:	af 91       	pop	r26
    7410:	9f 91       	pop	r25
    7412:	8f 91       	pop	r24
    7414:	7f 91       	pop	r23
    7416:	6f 91       	pop	r22
    7418:	5f 91       	pop	r21
    741a:	4f 91       	pop	r20
    741c:	3f 91       	pop	r19
    741e:	2f 91       	pop	r18
    7420:	0f 90       	pop	r0
    7422:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7426:	0f 90       	pop	r0
    7428:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    742c:	0f 90       	pop	r0
    742e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7432:	0f 90       	pop	r0
    7434:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7438:	0f 90       	pop	r0
    743a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    743e:	0f 90       	pop	r0
    7440:	1f 90       	pop	r1
    7442:	18 95       	reti

00007444 <__vector_108>:
    7444:	1f 92       	push	r1
    7446:	0f 92       	push	r0
    7448:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    744c:	0f 92       	push	r0
    744e:	11 24       	eor	r1, r1
    7450:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7454:	0f 92       	push	r0
    7456:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    745a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    745e:	0f 92       	push	r0
    7460:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7464:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7468:	0f 92       	push	r0
    746a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    746e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7472:	0f 92       	push	r0
    7474:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7478:	2f 93       	push	r18
    747a:	3f 93       	push	r19
    747c:	4f 93       	push	r20
    747e:	5f 93       	push	r21
    7480:	6f 93       	push	r22
    7482:	7f 93       	push	r23
    7484:	8f 93       	push	r24
    7486:	9f 93       	push	r25
    7488:	af 93       	push	r26
    748a:	bf 93       	push	r27
    748c:	ef 93       	push	r30
    748e:	ff 93       	push	r31
    7490:	cf 93       	push	r28
    7492:	df 93       	push	r29
    7494:	cd b7       	in	r28, 0x3d	; 61
    7496:	de b7       	in	r29, 0x3e	; 62
    7498:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <tc_tcf0_ovf_callback>
    749c:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <tc_tcf0_ovf_callback+0x1>
    74a0:	89 2b       	or	r24, r25
    74a2:	31 f0       	breq	.+12     	; 0x74b0 <__vector_108+0x6c>
    74a4:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <tc_tcf0_ovf_callback>
    74a8:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <tc_tcf0_ovf_callback+0x1>
    74ac:	fc 01       	movw	r30, r24
    74ae:	19 95       	eicall
    74b0:	00 00       	nop
    74b2:	df 91       	pop	r29
    74b4:	cf 91       	pop	r28
    74b6:	ff 91       	pop	r31
    74b8:	ef 91       	pop	r30
    74ba:	bf 91       	pop	r27
    74bc:	af 91       	pop	r26
    74be:	9f 91       	pop	r25
    74c0:	8f 91       	pop	r24
    74c2:	7f 91       	pop	r23
    74c4:	6f 91       	pop	r22
    74c6:	5f 91       	pop	r21
    74c8:	4f 91       	pop	r20
    74ca:	3f 91       	pop	r19
    74cc:	2f 91       	pop	r18
    74ce:	0f 90       	pop	r0
    74d0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    74d4:	0f 90       	pop	r0
    74d6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    74da:	0f 90       	pop	r0
    74dc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    74e0:	0f 90       	pop	r0
    74e2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    74e6:	0f 90       	pop	r0
    74e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    74ec:	0f 90       	pop	r0
    74ee:	1f 90       	pop	r1
    74f0:	18 95       	reti

000074f2 <__vector_109>:
    74f2:	1f 92       	push	r1
    74f4:	0f 92       	push	r0
    74f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    74fa:	0f 92       	push	r0
    74fc:	11 24       	eor	r1, r1
    74fe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7502:	0f 92       	push	r0
    7504:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7508:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    750c:	0f 92       	push	r0
    750e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7512:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7516:	0f 92       	push	r0
    7518:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    751c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7520:	0f 92       	push	r0
    7522:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7526:	2f 93       	push	r18
    7528:	3f 93       	push	r19
    752a:	4f 93       	push	r20
    752c:	5f 93       	push	r21
    752e:	6f 93       	push	r22
    7530:	7f 93       	push	r23
    7532:	8f 93       	push	r24
    7534:	9f 93       	push	r25
    7536:	af 93       	push	r26
    7538:	bf 93       	push	r27
    753a:	ef 93       	push	r30
    753c:	ff 93       	push	r31
    753e:	cf 93       	push	r28
    7540:	df 93       	push	r29
    7542:	cd b7       	in	r28, 0x3d	; 61
    7544:	de b7       	in	r29, 0x3e	; 62
    7546:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <tc_tcf0_err_callback>
    754a:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <tc_tcf0_err_callback+0x1>
    754e:	89 2b       	or	r24, r25
    7550:	31 f0       	breq	.+12     	; 0x755e <__vector_109+0x6c>
    7552:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <tc_tcf0_err_callback>
    7556:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <tc_tcf0_err_callback+0x1>
    755a:	fc 01       	movw	r30, r24
    755c:	19 95       	eicall
    755e:	00 00       	nop
    7560:	df 91       	pop	r29
    7562:	cf 91       	pop	r28
    7564:	ff 91       	pop	r31
    7566:	ef 91       	pop	r30
    7568:	bf 91       	pop	r27
    756a:	af 91       	pop	r26
    756c:	9f 91       	pop	r25
    756e:	8f 91       	pop	r24
    7570:	7f 91       	pop	r23
    7572:	6f 91       	pop	r22
    7574:	5f 91       	pop	r21
    7576:	4f 91       	pop	r20
    7578:	3f 91       	pop	r19
    757a:	2f 91       	pop	r18
    757c:	0f 90       	pop	r0
    757e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7582:	0f 90       	pop	r0
    7584:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7588:	0f 90       	pop	r0
    758a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    758e:	0f 90       	pop	r0
    7590:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7594:	0f 90       	pop	r0
    7596:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    759a:	0f 90       	pop	r0
    759c:	1f 90       	pop	r1
    759e:	18 95       	reti

000075a0 <__vector_110>:
    75a0:	1f 92       	push	r1
    75a2:	0f 92       	push	r0
    75a4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    75a8:	0f 92       	push	r0
    75aa:	11 24       	eor	r1, r1
    75ac:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75b0:	0f 92       	push	r0
    75b2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75b6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75ba:	0f 92       	push	r0
    75bc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75c0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75c4:	0f 92       	push	r0
    75c6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75ca:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75ce:	0f 92       	push	r0
    75d0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75d4:	2f 93       	push	r18
    75d6:	3f 93       	push	r19
    75d8:	4f 93       	push	r20
    75da:	5f 93       	push	r21
    75dc:	6f 93       	push	r22
    75de:	7f 93       	push	r23
    75e0:	8f 93       	push	r24
    75e2:	9f 93       	push	r25
    75e4:	af 93       	push	r26
    75e6:	bf 93       	push	r27
    75e8:	ef 93       	push	r30
    75ea:	ff 93       	push	r31
    75ec:	cf 93       	push	r28
    75ee:	df 93       	push	r29
    75f0:	cd b7       	in	r28, 0x3d	; 61
    75f2:	de b7       	in	r29, 0x3e	; 62
    75f4:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <tc_tcf0_cca_callback>
    75f8:	90 91 15 22 	lds	r25, 0x2215	; 0x802215 <tc_tcf0_cca_callback+0x1>
    75fc:	89 2b       	or	r24, r25
    75fe:	31 f0       	breq	.+12     	; 0x760c <__vector_110+0x6c>
    7600:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <tc_tcf0_cca_callback>
    7604:	90 91 15 22 	lds	r25, 0x2215	; 0x802215 <tc_tcf0_cca_callback+0x1>
    7608:	fc 01       	movw	r30, r24
    760a:	19 95       	eicall
    760c:	00 00       	nop
    760e:	df 91       	pop	r29
    7610:	cf 91       	pop	r28
    7612:	ff 91       	pop	r31
    7614:	ef 91       	pop	r30
    7616:	bf 91       	pop	r27
    7618:	af 91       	pop	r26
    761a:	9f 91       	pop	r25
    761c:	8f 91       	pop	r24
    761e:	7f 91       	pop	r23
    7620:	6f 91       	pop	r22
    7622:	5f 91       	pop	r21
    7624:	4f 91       	pop	r20
    7626:	3f 91       	pop	r19
    7628:	2f 91       	pop	r18
    762a:	0f 90       	pop	r0
    762c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7630:	0f 90       	pop	r0
    7632:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7636:	0f 90       	pop	r0
    7638:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    763c:	0f 90       	pop	r0
    763e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7642:	0f 90       	pop	r0
    7644:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7648:	0f 90       	pop	r0
    764a:	1f 90       	pop	r1
    764c:	18 95       	reti

0000764e <__vector_111>:
    764e:	1f 92       	push	r1
    7650:	0f 92       	push	r0
    7652:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7656:	0f 92       	push	r0
    7658:	11 24       	eor	r1, r1
    765a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    765e:	0f 92       	push	r0
    7660:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7664:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7668:	0f 92       	push	r0
    766a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    766e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7672:	0f 92       	push	r0
    7674:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7678:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    767c:	0f 92       	push	r0
    767e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7682:	2f 93       	push	r18
    7684:	3f 93       	push	r19
    7686:	4f 93       	push	r20
    7688:	5f 93       	push	r21
    768a:	6f 93       	push	r22
    768c:	7f 93       	push	r23
    768e:	8f 93       	push	r24
    7690:	9f 93       	push	r25
    7692:	af 93       	push	r26
    7694:	bf 93       	push	r27
    7696:	ef 93       	push	r30
    7698:	ff 93       	push	r31
    769a:	cf 93       	push	r28
    769c:	df 93       	push	r29
    769e:	cd b7       	in	r28, 0x3d	; 61
    76a0:	de b7       	in	r29, 0x3e	; 62
    76a2:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <tc_tcf0_ccb_callback>
    76a6:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <tc_tcf0_ccb_callback+0x1>
    76aa:	89 2b       	or	r24, r25
    76ac:	31 f0       	breq	.+12     	; 0x76ba <__vector_111+0x6c>
    76ae:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <tc_tcf0_ccb_callback>
    76b2:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <tc_tcf0_ccb_callback+0x1>
    76b6:	fc 01       	movw	r30, r24
    76b8:	19 95       	eicall
    76ba:	00 00       	nop
    76bc:	df 91       	pop	r29
    76be:	cf 91       	pop	r28
    76c0:	ff 91       	pop	r31
    76c2:	ef 91       	pop	r30
    76c4:	bf 91       	pop	r27
    76c6:	af 91       	pop	r26
    76c8:	9f 91       	pop	r25
    76ca:	8f 91       	pop	r24
    76cc:	7f 91       	pop	r23
    76ce:	6f 91       	pop	r22
    76d0:	5f 91       	pop	r21
    76d2:	4f 91       	pop	r20
    76d4:	3f 91       	pop	r19
    76d6:	2f 91       	pop	r18
    76d8:	0f 90       	pop	r0
    76da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    76de:	0f 90       	pop	r0
    76e0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    76e4:	0f 90       	pop	r0
    76e6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    76ea:	0f 90       	pop	r0
    76ec:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    76f0:	0f 90       	pop	r0
    76f2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    76f6:	0f 90       	pop	r0
    76f8:	1f 90       	pop	r1
    76fa:	18 95       	reti

000076fc <__vector_112>:
    76fc:	1f 92       	push	r1
    76fe:	0f 92       	push	r0
    7700:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7704:	0f 92       	push	r0
    7706:	11 24       	eor	r1, r1
    7708:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    770c:	0f 92       	push	r0
    770e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7712:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7716:	0f 92       	push	r0
    7718:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    771c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7720:	0f 92       	push	r0
    7722:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7726:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    772a:	0f 92       	push	r0
    772c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7730:	2f 93       	push	r18
    7732:	3f 93       	push	r19
    7734:	4f 93       	push	r20
    7736:	5f 93       	push	r21
    7738:	6f 93       	push	r22
    773a:	7f 93       	push	r23
    773c:	8f 93       	push	r24
    773e:	9f 93       	push	r25
    7740:	af 93       	push	r26
    7742:	bf 93       	push	r27
    7744:	ef 93       	push	r30
    7746:	ff 93       	push	r31
    7748:	cf 93       	push	r28
    774a:	df 93       	push	r29
    774c:	cd b7       	in	r28, 0x3d	; 61
    774e:	de b7       	in	r29, 0x3e	; 62
    7750:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <tc_tcf0_ccc_callback>
    7754:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <tc_tcf0_ccc_callback+0x1>
    7758:	89 2b       	or	r24, r25
    775a:	31 f0       	breq	.+12     	; 0x7768 <__vector_112+0x6c>
    775c:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <tc_tcf0_ccc_callback>
    7760:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <tc_tcf0_ccc_callback+0x1>
    7764:	fc 01       	movw	r30, r24
    7766:	19 95       	eicall
    7768:	00 00       	nop
    776a:	df 91       	pop	r29
    776c:	cf 91       	pop	r28
    776e:	ff 91       	pop	r31
    7770:	ef 91       	pop	r30
    7772:	bf 91       	pop	r27
    7774:	af 91       	pop	r26
    7776:	9f 91       	pop	r25
    7778:	8f 91       	pop	r24
    777a:	7f 91       	pop	r23
    777c:	6f 91       	pop	r22
    777e:	5f 91       	pop	r21
    7780:	4f 91       	pop	r20
    7782:	3f 91       	pop	r19
    7784:	2f 91       	pop	r18
    7786:	0f 90       	pop	r0
    7788:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    778c:	0f 90       	pop	r0
    778e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7792:	0f 90       	pop	r0
    7794:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7798:	0f 90       	pop	r0
    779a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    779e:	0f 90       	pop	r0
    77a0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    77a4:	0f 90       	pop	r0
    77a6:	1f 90       	pop	r1
    77a8:	18 95       	reti

000077aa <__vector_113>:
    77aa:	1f 92       	push	r1
    77ac:	0f 92       	push	r0
    77ae:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    77b2:	0f 92       	push	r0
    77b4:	11 24       	eor	r1, r1
    77b6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77ba:	0f 92       	push	r0
    77bc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77c0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77c4:	0f 92       	push	r0
    77c6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77ca:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77ce:	0f 92       	push	r0
    77d0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77d4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    77d8:	0f 92       	push	r0
    77da:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    77de:	2f 93       	push	r18
    77e0:	3f 93       	push	r19
    77e2:	4f 93       	push	r20
    77e4:	5f 93       	push	r21
    77e6:	6f 93       	push	r22
    77e8:	7f 93       	push	r23
    77ea:	8f 93       	push	r24
    77ec:	9f 93       	push	r25
    77ee:	af 93       	push	r26
    77f0:	bf 93       	push	r27
    77f2:	ef 93       	push	r30
    77f4:	ff 93       	push	r31
    77f6:	cf 93       	push	r28
    77f8:	df 93       	push	r29
    77fa:	cd b7       	in	r28, 0x3d	; 61
    77fc:	de b7       	in	r29, 0x3e	; 62
    77fe:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <tc_tcf0_ccd_callback>
    7802:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <tc_tcf0_ccd_callback+0x1>
    7806:	89 2b       	or	r24, r25
    7808:	31 f0       	breq	.+12     	; 0x7816 <__vector_113+0x6c>
    780a:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <tc_tcf0_ccd_callback>
    780e:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <tc_tcf0_ccd_callback+0x1>
    7812:	fc 01       	movw	r30, r24
    7814:	19 95       	eicall
    7816:	00 00       	nop
    7818:	df 91       	pop	r29
    781a:	cf 91       	pop	r28
    781c:	ff 91       	pop	r31
    781e:	ef 91       	pop	r30
    7820:	bf 91       	pop	r27
    7822:	af 91       	pop	r26
    7824:	9f 91       	pop	r25
    7826:	8f 91       	pop	r24
    7828:	7f 91       	pop	r23
    782a:	6f 91       	pop	r22
    782c:	5f 91       	pop	r21
    782e:	4f 91       	pop	r20
    7830:	3f 91       	pop	r19
    7832:	2f 91       	pop	r18
    7834:	0f 90       	pop	r0
    7836:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    783a:	0f 90       	pop	r0
    783c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7840:	0f 90       	pop	r0
    7842:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7846:	0f 90       	pop	r0
    7848:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    784c:	0f 90       	pop	r0
    784e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7852:	0f 90       	pop	r0
    7854:	1f 90       	pop	r1
    7856:	18 95       	reti

00007858 <__vector_114>:
    7858:	1f 92       	push	r1
    785a:	0f 92       	push	r0
    785c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7860:	0f 92       	push	r0
    7862:	11 24       	eor	r1, r1
    7864:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7868:	0f 92       	push	r0
    786a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    786e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7872:	0f 92       	push	r0
    7874:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7878:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    787c:	0f 92       	push	r0
    787e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7882:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7886:	0f 92       	push	r0
    7888:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    788c:	2f 93       	push	r18
    788e:	3f 93       	push	r19
    7890:	4f 93       	push	r20
    7892:	5f 93       	push	r21
    7894:	6f 93       	push	r22
    7896:	7f 93       	push	r23
    7898:	8f 93       	push	r24
    789a:	9f 93       	push	r25
    789c:	af 93       	push	r26
    789e:	bf 93       	push	r27
    78a0:	ef 93       	push	r30
    78a2:	ff 93       	push	r31
    78a4:	cf 93       	push	r28
    78a6:	df 93       	push	r29
    78a8:	cd b7       	in	r28, 0x3d	; 61
    78aa:	de b7       	in	r29, 0x3e	; 62
    78ac:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <tc_tcf1_ovf_callback>
    78b0:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <tc_tcf1_ovf_callback+0x1>
    78b4:	89 2b       	or	r24, r25
    78b6:	31 f0       	breq	.+12     	; 0x78c4 <__vector_114+0x6c>
    78b8:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <tc_tcf1_ovf_callback>
    78bc:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <tc_tcf1_ovf_callback+0x1>
    78c0:	fc 01       	movw	r30, r24
    78c2:	19 95       	eicall
    78c4:	00 00       	nop
    78c6:	df 91       	pop	r29
    78c8:	cf 91       	pop	r28
    78ca:	ff 91       	pop	r31
    78cc:	ef 91       	pop	r30
    78ce:	bf 91       	pop	r27
    78d0:	af 91       	pop	r26
    78d2:	9f 91       	pop	r25
    78d4:	8f 91       	pop	r24
    78d6:	7f 91       	pop	r23
    78d8:	6f 91       	pop	r22
    78da:	5f 91       	pop	r21
    78dc:	4f 91       	pop	r20
    78de:	3f 91       	pop	r19
    78e0:	2f 91       	pop	r18
    78e2:	0f 90       	pop	r0
    78e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    78e8:	0f 90       	pop	r0
    78ea:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    78ee:	0f 90       	pop	r0
    78f0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    78f4:	0f 90       	pop	r0
    78f6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    78fa:	0f 90       	pop	r0
    78fc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7900:	0f 90       	pop	r0
    7902:	1f 90       	pop	r1
    7904:	18 95       	reti

00007906 <__vector_115>:
    7906:	1f 92       	push	r1
    7908:	0f 92       	push	r0
    790a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    790e:	0f 92       	push	r0
    7910:	11 24       	eor	r1, r1
    7912:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7916:	0f 92       	push	r0
    7918:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    791c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7920:	0f 92       	push	r0
    7922:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7926:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    792a:	0f 92       	push	r0
    792c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7930:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7934:	0f 92       	push	r0
    7936:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    793a:	2f 93       	push	r18
    793c:	3f 93       	push	r19
    793e:	4f 93       	push	r20
    7940:	5f 93       	push	r21
    7942:	6f 93       	push	r22
    7944:	7f 93       	push	r23
    7946:	8f 93       	push	r24
    7948:	9f 93       	push	r25
    794a:	af 93       	push	r26
    794c:	bf 93       	push	r27
    794e:	ef 93       	push	r30
    7950:	ff 93       	push	r31
    7952:	cf 93       	push	r28
    7954:	df 93       	push	r29
    7956:	cd b7       	in	r28, 0x3d	; 61
    7958:	de b7       	in	r29, 0x3e	; 62
    795a:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <tc_tcf1_err_callback>
    795e:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <tc_tcf1_err_callback+0x1>
    7962:	89 2b       	or	r24, r25
    7964:	31 f0       	breq	.+12     	; 0x7972 <__vector_115+0x6c>
    7966:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <tc_tcf1_err_callback>
    796a:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <tc_tcf1_err_callback+0x1>
    796e:	fc 01       	movw	r30, r24
    7970:	19 95       	eicall
    7972:	00 00       	nop
    7974:	df 91       	pop	r29
    7976:	cf 91       	pop	r28
    7978:	ff 91       	pop	r31
    797a:	ef 91       	pop	r30
    797c:	bf 91       	pop	r27
    797e:	af 91       	pop	r26
    7980:	9f 91       	pop	r25
    7982:	8f 91       	pop	r24
    7984:	7f 91       	pop	r23
    7986:	6f 91       	pop	r22
    7988:	5f 91       	pop	r21
    798a:	4f 91       	pop	r20
    798c:	3f 91       	pop	r19
    798e:	2f 91       	pop	r18
    7990:	0f 90       	pop	r0
    7992:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7996:	0f 90       	pop	r0
    7998:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    799c:	0f 90       	pop	r0
    799e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79a2:	0f 90       	pop	r0
    79a4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79a8:	0f 90       	pop	r0
    79aa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    79ae:	0f 90       	pop	r0
    79b0:	1f 90       	pop	r1
    79b2:	18 95       	reti

000079b4 <__vector_116>:
    79b4:	1f 92       	push	r1
    79b6:	0f 92       	push	r0
    79b8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    79bc:	0f 92       	push	r0
    79be:	11 24       	eor	r1, r1
    79c0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79c4:	0f 92       	push	r0
    79c6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79ca:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79ce:	0f 92       	push	r0
    79d0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79d4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    79d8:	0f 92       	push	r0
    79da:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    79de:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    79e2:	0f 92       	push	r0
    79e4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    79e8:	2f 93       	push	r18
    79ea:	3f 93       	push	r19
    79ec:	4f 93       	push	r20
    79ee:	5f 93       	push	r21
    79f0:	6f 93       	push	r22
    79f2:	7f 93       	push	r23
    79f4:	8f 93       	push	r24
    79f6:	9f 93       	push	r25
    79f8:	af 93       	push	r26
    79fa:	bf 93       	push	r27
    79fc:	ef 93       	push	r30
    79fe:	ff 93       	push	r31
    7a00:	cf 93       	push	r28
    7a02:	df 93       	push	r29
    7a04:	cd b7       	in	r28, 0x3d	; 61
    7a06:	de b7       	in	r29, 0x3e	; 62
    7a08:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <tc_tcf1_cca_callback>
    7a0c:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <tc_tcf1_cca_callback+0x1>
    7a10:	89 2b       	or	r24, r25
    7a12:	31 f0       	breq	.+12     	; 0x7a20 <__vector_116+0x6c>
    7a14:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <tc_tcf1_cca_callback>
    7a18:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <tc_tcf1_cca_callback+0x1>
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	19 95       	eicall
    7a20:	00 00       	nop
    7a22:	df 91       	pop	r29
    7a24:	cf 91       	pop	r28
    7a26:	ff 91       	pop	r31
    7a28:	ef 91       	pop	r30
    7a2a:	bf 91       	pop	r27
    7a2c:	af 91       	pop	r26
    7a2e:	9f 91       	pop	r25
    7a30:	8f 91       	pop	r24
    7a32:	7f 91       	pop	r23
    7a34:	6f 91       	pop	r22
    7a36:	5f 91       	pop	r21
    7a38:	4f 91       	pop	r20
    7a3a:	3f 91       	pop	r19
    7a3c:	2f 91       	pop	r18
    7a3e:	0f 90       	pop	r0
    7a40:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a44:	0f 90       	pop	r0
    7a46:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a4a:	0f 90       	pop	r0
    7a4c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a50:	0f 90       	pop	r0
    7a52:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a56:	0f 90       	pop	r0
    7a58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7a5c:	0f 90       	pop	r0
    7a5e:	1f 90       	pop	r1
    7a60:	18 95       	reti

00007a62 <__vector_117>:
    7a62:	1f 92       	push	r1
    7a64:	0f 92       	push	r0
    7a66:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7a6a:	0f 92       	push	r0
    7a6c:	11 24       	eor	r1, r1
    7a6e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a72:	0f 92       	push	r0
    7a74:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a78:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a7c:	0f 92       	push	r0
    7a7e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a82:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a86:	0f 92       	push	r0
    7a88:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a8c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a90:	0f 92       	push	r0
    7a92:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a96:	2f 93       	push	r18
    7a98:	3f 93       	push	r19
    7a9a:	4f 93       	push	r20
    7a9c:	5f 93       	push	r21
    7a9e:	6f 93       	push	r22
    7aa0:	7f 93       	push	r23
    7aa2:	8f 93       	push	r24
    7aa4:	9f 93       	push	r25
    7aa6:	af 93       	push	r26
    7aa8:	bf 93       	push	r27
    7aaa:	ef 93       	push	r30
    7aac:	ff 93       	push	r31
    7aae:	cf 93       	push	r28
    7ab0:	df 93       	push	r29
    7ab2:	cd b7       	in	r28, 0x3d	; 61
    7ab4:	de b7       	in	r29, 0x3e	; 62
    7ab6:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <tc_tcf1_ccb_callback>
    7aba:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <tc_tcf1_ccb_callback+0x1>
    7abe:	89 2b       	or	r24, r25
    7ac0:	31 f0       	breq	.+12     	; 0x7ace <__vector_117+0x6c>
    7ac2:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <tc_tcf1_ccb_callback>
    7ac6:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <tc_tcf1_ccb_callback+0x1>
    7aca:	fc 01       	movw	r30, r24
    7acc:	19 95       	eicall
    7ace:	00 00       	nop
    7ad0:	df 91       	pop	r29
    7ad2:	cf 91       	pop	r28
    7ad4:	ff 91       	pop	r31
    7ad6:	ef 91       	pop	r30
    7ad8:	bf 91       	pop	r27
    7ada:	af 91       	pop	r26
    7adc:	9f 91       	pop	r25
    7ade:	8f 91       	pop	r24
    7ae0:	7f 91       	pop	r23
    7ae2:	6f 91       	pop	r22
    7ae4:	5f 91       	pop	r21
    7ae6:	4f 91       	pop	r20
    7ae8:	3f 91       	pop	r19
    7aea:	2f 91       	pop	r18
    7aec:	0f 90       	pop	r0
    7aee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7af2:	0f 90       	pop	r0
    7af4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7af8:	0f 90       	pop	r0
    7afa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7afe:	0f 90       	pop	r0
    7b00:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7b04:	0f 90       	pop	r0
    7b06:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7b0a:	0f 90       	pop	r0
    7b0c:	1f 90       	pop	r1
    7b0e:	18 95       	reti

00007b10 <tc_enable>:
    7b10:	cf 93       	push	r28
    7b12:	df 93       	push	r29
    7b14:	00 d0       	rcall	.+0      	; 0x7b16 <tc_enable+0x6>
    7b16:	cd b7       	in	r28, 0x3d	; 61
    7b18:	de b7       	in	r29, 0x3e	; 62
    7b1a:	8a 83       	std	Y+2, r24	; 0x02
    7b1c:	9b 83       	std	Y+3, r25	; 0x03
    7b1e:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <cpu_irq_save>
    7b22:	89 83       	std	Y+1, r24	; 0x01
    7b24:	8a 81       	ldd	r24, Y+2	; 0x02
    7b26:	9b 81       	ldd	r25, Y+3	; 0x03
    7b28:	81 15       	cp	r24, r1
    7b2a:	98 40       	sbci	r25, 0x08	; 8
    7b2c:	49 f4       	brne	.+18     	; 0x7b40 <tc_enable+0x30>
    7b2e:	61 e0       	ldi	r22, 0x01	; 1
    7b30:	83 e0       	ldi	r24, 0x03	; 3
    7b32:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b36:	64 e0       	ldi	r22, 0x04	; 4
    7b38:	83 e0       	ldi	r24, 0x03	; 3
    7b3a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b3e:	66 c0       	rjmp	.+204    	; 0x7c0c <tc_enable+0xfc>
    7b40:	8a 81       	ldd	r24, Y+2	; 0x02
    7b42:	9b 81       	ldd	r25, Y+3	; 0x03
    7b44:	80 34       	cpi	r24, 0x40	; 64
    7b46:	98 40       	sbci	r25, 0x08	; 8
    7b48:	49 f4       	brne	.+18     	; 0x7b5c <tc_enable+0x4c>
    7b4a:	62 e0       	ldi	r22, 0x02	; 2
    7b4c:	83 e0       	ldi	r24, 0x03	; 3
    7b4e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b52:	64 e0       	ldi	r22, 0x04	; 4
    7b54:	83 e0       	ldi	r24, 0x03	; 3
    7b56:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b5a:	58 c0       	rjmp	.+176    	; 0x7c0c <tc_enable+0xfc>
    7b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    7b60:	81 15       	cp	r24, r1
    7b62:	99 40       	sbci	r25, 0x09	; 9
    7b64:	49 f4       	brne	.+18     	; 0x7b78 <tc_enable+0x68>
    7b66:	61 e0       	ldi	r22, 0x01	; 1
    7b68:	84 e0       	ldi	r24, 0x04	; 4
    7b6a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b6e:	64 e0       	ldi	r22, 0x04	; 4
    7b70:	84 e0       	ldi	r24, 0x04	; 4
    7b72:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b76:	4a c0       	rjmp	.+148    	; 0x7c0c <tc_enable+0xfc>
    7b78:	8a 81       	ldd	r24, Y+2	; 0x02
    7b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    7b7c:	80 34       	cpi	r24, 0x40	; 64
    7b7e:	99 40       	sbci	r25, 0x09	; 9
    7b80:	49 f4       	brne	.+18     	; 0x7b94 <tc_enable+0x84>
    7b82:	62 e0       	ldi	r22, 0x02	; 2
    7b84:	84 e0       	ldi	r24, 0x04	; 4
    7b86:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b8a:	64 e0       	ldi	r22, 0x04	; 4
    7b8c:	84 e0       	ldi	r24, 0x04	; 4
    7b8e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7b92:	3c c0       	rjmp	.+120    	; 0x7c0c <tc_enable+0xfc>
    7b94:	8a 81       	ldd	r24, Y+2	; 0x02
    7b96:	9b 81       	ldd	r25, Y+3	; 0x03
    7b98:	81 15       	cp	r24, r1
    7b9a:	9a 40       	sbci	r25, 0x0A	; 10
    7b9c:	49 f4       	brne	.+18     	; 0x7bb0 <tc_enable+0xa0>
    7b9e:	61 e0       	ldi	r22, 0x01	; 1
    7ba0:	85 e0       	ldi	r24, 0x05	; 5
    7ba2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7ba6:	64 e0       	ldi	r22, 0x04	; 4
    7ba8:	85 e0       	ldi	r24, 0x05	; 5
    7baa:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7bae:	2e c0       	rjmp	.+92     	; 0x7c0c <tc_enable+0xfc>
    7bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    7bb4:	80 34       	cpi	r24, 0x40	; 64
    7bb6:	9a 40       	sbci	r25, 0x0A	; 10
    7bb8:	49 f4       	brne	.+18     	; 0x7bcc <tc_enable+0xbc>
    7bba:	62 e0       	ldi	r22, 0x02	; 2
    7bbc:	85 e0       	ldi	r24, 0x05	; 5
    7bbe:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7bc2:	64 e0       	ldi	r22, 0x04	; 4
    7bc4:	85 e0       	ldi	r24, 0x05	; 5
    7bc6:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7bca:	20 c0       	rjmp	.+64     	; 0x7c0c <tc_enable+0xfc>
    7bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    7bce:	9b 81       	ldd	r25, Y+3	; 0x03
    7bd0:	81 15       	cp	r24, r1
    7bd2:	9b 40       	sbci	r25, 0x0B	; 11
    7bd4:	49 f4       	brne	.+18     	; 0x7be8 <tc_enable+0xd8>
    7bd6:	61 e0       	ldi	r22, 0x01	; 1
    7bd8:	86 e0       	ldi	r24, 0x06	; 6
    7bda:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7bde:	64 e0       	ldi	r22, 0x04	; 4
    7be0:	86 e0       	ldi	r24, 0x06	; 6
    7be2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7be6:	12 c0       	rjmp	.+36     	; 0x7c0c <tc_enable+0xfc>
    7be8:	8a 81       	ldd	r24, Y+2	; 0x02
    7bea:	9b 81       	ldd	r25, Y+3	; 0x03
    7bec:	80 34       	cpi	r24, 0x40	; 64
    7bee:	9b 40       	sbci	r25, 0x0B	; 11
    7bf0:	49 f4       	brne	.+18     	; 0x7c04 <tc_enable+0xf4>
    7bf2:	62 e0       	ldi	r22, 0x02	; 2
    7bf4:	86 e0       	ldi	r24, 0x06	; 6
    7bf6:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7bfa:	64 e0       	ldi	r22, 0x04	; 4
    7bfc:	86 e0       	ldi	r24, 0x06	; 6
    7bfe:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    7c02:	04 c0       	rjmp	.+8      	; 0x7c0c <tc_enable+0xfc>
    7c04:	89 81       	ldd	r24, Y+1	; 0x01
    7c06:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <cpu_irq_restore>
    7c0a:	06 c0       	rjmp	.+12     	; 0x7c18 <tc_enable+0x108>
    7c0c:	81 e0       	ldi	r24, 0x01	; 1
    7c0e:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sleepmgr_lock_mode>
    7c12:	89 81       	ldd	r24, Y+1	; 0x01
    7c14:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <cpu_irq_restore>
    7c18:	23 96       	adiw	r28, 0x03	; 3
    7c1a:	cd bf       	out	0x3d, r28	; 61
    7c1c:	de bf       	out	0x3e, r29	; 62
    7c1e:	df 91       	pop	r29
    7c20:	cf 91       	pop	r28
    7c22:	08 95       	ret

00007c24 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    7c24:	cf 93       	push	r28
    7c26:	df 93       	push	r29
    7c28:	00 d0       	rcall	.+0      	; 0x7c2a <tc_set_overflow_interrupt_callback+0x6>
    7c2a:	1f 92       	push	r1
    7c2c:	cd b7       	in	r28, 0x3d	; 61
    7c2e:	de b7       	in	r29, 0x3e	; 62
    7c30:	89 83       	std	Y+1, r24	; 0x01
    7c32:	9a 83       	std	Y+2, r25	; 0x02
    7c34:	6b 83       	std	Y+3, r22	; 0x03
    7c36:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    7c38:	89 81       	ldd	r24, Y+1	; 0x01
    7c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c3c:	81 15       	cp	r24, r1
    7c3e:	98 40       	sbci	r25, 0x08	; 8
    7c40:	39 f4       	brne	.+14     	; 0x7c50 <tc_set_overflow_interrupt_callback+0x2c>
		tc_tcc0_ovf_callback = callback;
    7c42:	8b 81       	ldd	r24, Y+3	; 0x03
    7c44:	9c 81       	ldd	r25, Y+4	; 0x04
    7c46:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <tc_tcc0_ovf_callback>
    7c4a:	90 93 d5 21 	sts	0x21D5, r25	; 0x8021d5 <tc_tcc0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7c4e:	53 c0       	rjmp	.+166    	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_ovf_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    7c50:	89 81       	ldd	r24, Y+1	; 0x01
    7c52:	9a 81       	ldd	r25, Y+2	; 0x02
    7c54:	80 34       	cpi	r24, 0x40	; 64
    7c56:	98 40       	sbci	r25, 0x08	; 8
    7c58:	39 f4       	brne	.+14     	; 0x7c68 <tc_set_overflow_interrupt_callback+0x44>
		tc_tcc1_ovf_callback = callback;
    7c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c5e:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <tc_tcc1_ovf_callback>
    7c62:	90 93 e1 21 	sts	0x21E1, r25	; 0x8021e1 <tc_tcc1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7c66:	47 c0       	rjmp	.+142    	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_ovf_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    7c68:	89 81       	ldd	r24, Y+1	; 0x01
    7c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c6c:	81 15       	cp	r24, r1
    7c6e:	99 40       	sbci	r25, 0x09	; 9
    7c70:	39 f4       	brne	.+14     	; 0x7c80 <tc_set_overflow_interrupt_callback+0x5c>
		tc_tcd0_ovf_callback = callback;
    7c72:	8b 81       	ldd	r24, Y+3	; 0x03
    7c74:	9c 81       	ldd	r25, Y+4	; 0x04
    7c76:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <tc_tcd0_ovf_callback>
    7c7a:	90 93 e9 21 	sts	0x21E9, r25	; 0x8021e9 <tc_tcd0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7c7e:	3b c0       	rjmp	.+118    	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_ovf_callback = callback;
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    7c80:	89 81       	ldd	r24, Y+1	; 0x01
    7c82:	9a 81       	ldd	r25, Y+2	; 0x02
    7c84:	80 34       	cpi	r24, 0x40	; 64
    7c86:	99 40       	sbci	r25, 0x09	; 9
    7c88:	39 f4       	brne	.+14     	; 0x7c98 <tc_set_overflow_interrupt_callback+0x74>
		tc_tcd1_ovf_callback = callback;
    7c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c8e:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <tc_tcd1_ovf_callback>
    7c92:	90 93 f5 21 	sts	0x21F5, r25	; 0x8021f5 <tc_tcd1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7c96:	2f c0       	rjmp	.+94     	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    7c98:	89 81       	ldd	r24, Y+1	; 0x01
    7c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c9c:	81 15       	cp	r24, r1
    7c9e:	9a 40       	sbci	r25, 0x0A	; 10
    7ca0:	39 f4       	brne	.+14     	; 0x7cb0 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tce0_ovf_callback = callback;
    7ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    7ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    7ca6:	80 93 fc 21 	sts	0x21FC, r24	; 0x8021fc <tc_tce0_ovf_callback>
    7caa:	90 93 fd 21 	sts	0x21FD, r25	; 0x8021fd <tc_tce0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7cae:	23 c0       	rjmp	.+70     	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_ovf_callback = callback;
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    7cb0:	89 81       	ldd	r24, Y+1	; 0x01
    7cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7cb4:	80 34       	cpi	r24, 0x40	; 64
    7cb6:	9a 40       	sbci	r25, 0x0A	; 10
    7cb8:	39 f4       	brne	.+14     	; 0x7cc8 <tc_set_overflow_interrupt_callback+0xa4>
		tc_tce1_ovf_callback = callback;
    7cba:	8b 81       	ldd	r24, Y+3	; 0x03
    7cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    7cbe:	80 93 08 22 	sts	0x2208, r24	; 0x802208 <tc_tce1_ovf_callback>
    7cc2:	90 93 09 22 	sts	0x2209, r25	; 0x802209 <tc_tce1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7cc6:	17 c0       	rjmp	.+46     	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    7cc8:	89 81       	ldd	r24, Y+1	; 0x01
    7cca:	9a 81       	ldd	r25, Y+2	; 0x02
    7ccc:	81 15       	cp	r24, r1
    7cce:	9b 40       	sbci	r25, 0x0B	; 11
    7cd0:	39 f4       	brne	.+14     	; 0x7ce0 <tc_set_overflow_interrupt_callback+0xbc>
		tc_tcf0_ovf_callback = callback;
    7cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    7cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    7cd6:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <tc_tcf0_ovf_callback>
    7cda:	90 93 11 22 	sts	0x2211, r25	; 0x802211 <tc_tcf0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    7cde:	0b c0       	rjmp	.+22     	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_ovf_callback = callback;
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    7ce0:	89 81       	ldd	r24, Y+1	; 0x01
    7ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    7ce4:	80 34       	cpi	r24, 0x40	; 64
    7ce6:	9b 40       	sbci	r25, 0x0B	; 11
    7ce8:	31 f4       	brne	.+12     	; 0x7cf6 <tc_set_overflow_interrupt_callback+0xd2>
		tc_tcf1_ovf_callback = callback;
    7cea:	8b 81       	ldd	r24, Y+3	; 0x03
    7cec:	9c 81       	ldd	r25, Y+4	; 0x04
    7cee:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <tc_tcf1_ovf_callback>
    7cf2:	90 93 1d 22 	sts	0x221D, r25	; 0x80221d <tc_tcf1_ovf_callback+0x1>
	} else
#endif
	{}
}
    7cf6:	00 00       	nop
    7cf8:	24 96       	adiw	r28, 0x04	; 4
    7cfa:	cd bf       	out	0x3d, r28	; 61
    7cfc:	de bf       	out	0x3e, r29	; 62
    7cfe:	df 91       	pop	r29
    7d00:	cf 91       	pop	r28
    7d02:	08 95       	ret

00007d04 <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    7d04:	1f 92       	push	r1
    7d06:	0f 92       	push	r0
    7d08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7d0c:	0f 92       	push	r0
    7d0e:	11 24       	eor	r1, r1
    7d10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d14:	0f 92       	push	r0
    7d16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d1e:	0f 92       	push	r0
    7d20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d28:	0f 92       	push	r0
    7d2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d32:	0f 92       	push	r0
    7d34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d38:	2f 93       	push	r18
    7d3a:	3f 93       	push	r19
    7d3c:	4f 93       	push	r20
    7d3e:	5f 93       	push	r21
    7d40:	6f 93       	push	r22
    7d42:	7f 93       	push	r23
    7d44:	8f 93       	push	r24
    7d46:	9f 93       	push	r25
    7d48:	af 93       	push	r26
    7d4a:	bf 93       	push	r27
    7d4c:	ef 93       	push	r30
    7d4e:	ff 93       	push	r31
    7d50:	cf 93       	push	r28
    7d52:	df 93       	push	r29
    7d54:	cd b7       	in	r28, 0x3d	; 61
    7d56:	de b7       	in	r29, 0x3e	; 62
    7d58:	e9 d1       	rcall	.+978    	; 0x812c <twim_interrupt_handler>
    7d5a:	00 00       	nop
    7d5c:	df 91       	pop	r29
    7d5e:	cf 91       	pop	r28
    7d60:	ff 91       	pop	r31
    7d62:	ef 91       	pop	r30
    7d64:	bf 91       	pop	r27
    7d66:	af 91       	pop	r26
    7d68:	9f 91       	pop	r25
    7d6a:	8f 91       	pop	r24
    7d6c:	7f 91       	pop	r23
    7d6e:	6f 91       	pop	r22
    7d70:	5f 91       	pop	r21
    7d72:	4f 91       	pop	r20
    7d74:	3f 91       	pop	r19
    7d76:	2f 91       	pop	r18
    7d78:	0f 90       	pop	r0
    7d7a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d7e:	0f 90       	pop	r0
    7d80:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d84:	0f 90       	pop	r0
    7d86:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d8a:	0f 90       	pop	r0
    7d8c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d90:	0f 90       	pop	r0
    7d92:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7d96:	0f 90       	pop	r0
    7d98:	1f 90       	pop	r1
    7d9a:	18 95       	reti

00007d9c <__vector_76>:
    7d9c:	1f 92       	push	r1
    7d9e:	0f 92       	push	r0
    7da0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7da4:	0f 92       	push	r0
    7da6:	11 24       	eor	r1, r1
    7da8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7dac:	0f 92       	push	r0
    7dae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7db2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7db6:	0f 92       	push	r0
    7db8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7dbc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7dc0:	0f 92       	push	r0
    7dc2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7dc6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7dca:	0f 92       	push	r0
    7dcc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7dd0:	2f 93       	push	r18
    7dd2:	3f 93       	push	r19
    7dd4:	4f 93       	push	r20
    7dd6:	5f 93       	push	r21
    7dd8:	6f 93       	push	r22
    7dda:	7f 93       	push	r23
    7ddc:	8f 93       	push	r24
    7dde:	9f 93       	push	r25
    7de0:	af 93       	push	r26
    7de2:	bf 93       	push	r27
    7de4:	ef 93       	push	r30
    7de6:	ff 93       	push	r31
    7de8:	cf 93       	push	r28
    7dea:	df 93       	push	r29
    7dec:	cd b7       	in	r28, 0x3d	; 61
    7dee:	de b7       	in	r29, 0x3e	; 62
    7df0:	9d d1       	rcall	.+826    	; 0x812c <twim_interrupt_handler>
    7df2:	00 00       	nop
    7df4:	df 91       	pop	r29
    7df6:	cf 91       	pop	r28
    7df8:	ff 91       	pop	r31
    7dfa:	ef 91       	pop	r30
    7dfc:	bf 91       	pop	r27
    7dfe:	af 91       	pop	r26
    7e00:	9f 91       	pop	r25
    7e02:	8f 91       	pop	r24
    7e04:	7f 91       	pop	r23
    7e06:	6f 91       	pop	r22
    7e08:	5f 91       	pop	r21
    7e0a:	4f 91       	pop	r20
    7e0c:	3f 91       	pop	r19
    7e0e:	2f 91       	pop	r18
    7e10:	0f 90       	pop	r0
    7e12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e16:	0f 90       	pop	r0
    7e18:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e1c:	0f 90       	pop	r0
    7e1e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e22:	0f 90       	pop	r0
    7e24:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e28:	0f 90       	pop	r0
    7e2a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7e2e:	0f 90       	pop	r0
    7e30:	1f 90       	pop	r1
    7e32:	18 95       	reti

00007e34 <__vector_46>:
    7e34:	1f 92       	push	r1
    7e36:	0f 92       	push	r0
    7e38:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7e3c:	0f 92       	push	r0
    7e3e:	11 24       	eor	r1, r1
    7e40:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e44:	0f 92       	push	r0
    7e46:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e4a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e4e:	0f 92       	push	r0
    7e50:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e54:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e58:	0f 92       	push	r0
    7e5a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e62:	0f 92       	push	r0
    7e64:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e68:	2f 93       	push	r18
    7e6a:	3f 93       	push	r19
    7e6c:	4f 93       	push	r20
    7e6e:	5f 93       	push	r21
    7e70:	6f 93       	push	r22
    7e72:	7f 93       	push	r23
    7e74:	8f 93       	push	r24
    7e76:	9f 93       	push	r25
    7e78:	af 93       	push	r26
    7e7a:	bf 93       	push	r27
    7e7c:	ef 93       	push	r30
    7e7e:	ff 93       	push	r31
    7e80:	cf 93       	push	r28
    7e82:	df 93       	push	r29
    7e84:	cd b7       	in	r28, 0x3d	; 61
    7e86:	de b7       	in	r29, 0x3e	; 62
    7e88:	51 d1       	rcall	.+674    	; 0x812c <twim_interrupt_handler>
    7e8a:	00 00       	nop
    7e8c:	df 91       	pop	r29
    7e8e:	cf 91       	pop	r28
    7e90:	ff 91       	pop	r31
    7e92:	ef 91       	pop	r30
    7e94:	bf 91       	pop	r27
    7e96:	af 91       	pop	r26
    7e98:	9f 91       	pop	r25
    7e9a:	8f 91       	pop	r24
    7e9c:	7f 91       	pop	r23
    7e9e:	6f 91       	pop	r22
    7ea0:	5f 91       	pop	r21
    7ea2:	4f 91       	pop	r20
    7ea4:	3f 91       	pop	r19
    7ea6:	2f 91       	pop	r18
    7ea8:	0f 90       	pop	r0
    7eaa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7eae:	0f 90       	pop	r0
    7eb0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7eb4:	0f 90       	pop	r0
    7eb6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7eba:	0f 90       	pop	r0
    7ebc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7ec0:	0f 90       	pop	r0
    7ec2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7ec6:	0f 90       	pop	r0
    7ec8:	1f 90       	pop	r1
    7eca:	18 95       	reti

00007ecc <__vector_107>:
    7ecc:	1f 92       	push	r1
    7ece:	0f 92       	push	r0
    7ed0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7ed4:	0f 92       	push	r0
    7ed6:	11 24       	eor	r1, r1
    7ed8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7edc:	0f 92       	push	r0
    7ede:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7ee2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7ee6:	0f 92       	push	r0
    7ee8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7eec:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7ef0:	0f 92       	push	r0
    7ef2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7ef6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7efa:	0f 92       	push	r0
    7efc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f00:	2f 93       	push	r18
    7f02:	3f 93       	push	r19
    7f04:	4f 93       	push	r20
    7f06:	5f 93       	push	r21
    7f08:	6f 93       	push	r22
    7f0a:	7f 93       	push	r23
    7f0c:	8f 93       	push	r24
    7f0e:	9f 93       	push	r25
    7f10:	af 93       	push	r26
    7f12:	bf 93       	push	r27
    7f14:	ef 93       	push	r30
    7f16:	ff 93       	push	r31
    7f18:	cf 93       	push	r28
    7f1a:	df 93       	push	r29
    7f1c:	cd b7       	in	r28, 0x3d	; 61
    7f1e:	de b7       	in	r29, 0x3e	; 62
    7f20:	05 d1       	rcall	.+522    	; 0x812c <twim_interrupt_handler>
    7f22:	00 00       	nop
    7f24:	df 91       	pop	r29
    7f26:	cf 91       	pop	r28
    7f28:	ff 91       	pop	r31
    7f2a:	ef 91       	pop	r30
    7f2c:	bf 91       	pop	r27
    7f2e:	af 91       	pop	r26
    7f30:	9f 91       	pop	r25
    7f32:	8f 91       	pop	r24
    7f34:	7f 91       	pop	r23
    7f36:	6f 91       	pop	r22
    7f38:	5f 91       	pop	r21
    7f3a:	4f 91       	pop	r20
    7f3c:	3f 91       	pop	r19
    7f3e:	2f 91       	pop	r18
    7f40:	0f 90       	pop	r0
    7f42:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f46:	0f 90       	pop	r0
    7f48:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7f4c:	0f 90       	pop	r0
    7f4e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f52:	0f 90       	pop	r0
    7f54:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f58:	0f 90       	pop	r0
    7f5a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7f5e:	0f 90       	pop	r0
    7f60:	1f 90       	pop	r1
    7f62:	18 95       	reti

00007f64 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    7f64:	cf 93       	push	r28
    7f66:	df 93       	push	r29
    7f68:	cd b7       	in	r28, 0x3d	; 61
    7f6a:	de b7       	in	r29, 0x3e	; 62
    7f6c:	28 97       	sbiw	r28, 0x08	; 8
    7f6e:	cd bf       	out	0x3d, r28	; 61
    7f70:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    7f72:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <transfer>
    7f76:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <transfer+0x1>
    7f7a:	89 83       	std	Y+1, r24	; 0x01
    7f7c:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    7f7e:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <transfer+0x2>
    7f82:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <transfer+0x3>
    7f86:	8b 83       	std	Y+3, r24	; 0x03
    7f88:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    7f8a:	20 91 28 22 	lds	r18, 0x2228	; 0x802228 <transfer+0x4>
    7f8e:	30 91 29 22 	lds	r19, 0x2229	; 0x802229 <transfer+0x5>
    7f92:	8b 81       	ldd	r24, Y+3	; 0x03
    7f94:	9c 81       	ldd	r25, Y+4	; 0x04
    7f96:	fc 01       	movw	r30, r24
    7f98:	84 81       	ldd	r24, Z+4	; 0x04
    7f9a:	95 81       	ldd	r25, Z+5	; 0x05
    7f9c:	28 17       	cp	r18, r24
    7f9e:	39 07       	cpc	r19, r25
    7fa0:	e4 f4       	brge	.+56     	; 0x7fda <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    7fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    7fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    7fa6:	01 96       	adiw	r24, 0x01	; 1
    7fa8:	8d 83       	std	Y+5, r24	; 0x05
    7faa:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    7fac:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <transfer+0x4>
    7fb0:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <transfer+0x5>
    7fb4:	9c 01       	movw	r18, r24
    7fb6:	2f 5f       	subi	r18, 0xFF	; 255
    7fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    7fba:	20 93 28 22 	sts	0x2228, r18	; 0x802228 <transfer+0x4>
    7fbe:	30 93 29 22 	sts	0x2229, r19	; 0x802229 <transfer+0x5>
    7fc2:	9c 01       	movw	r18, r24
    7fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    7fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    7fc8:	82 0f       	add	r24, r18
    7fca:	93 1f       	adc	r25, r19
    7fcc:	fc 01       	movw	r30, r24
    7fce:	20 81       	ld	r18, Z
    7fd0:	89 81       	ldd	r24, Y+1	; 0x01
    7fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    7fd4:	fc 01       	movw	r30, r24
    7fd6:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    7fd8:	3f c0       	rjmp	.+126    	; 0x8058 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    7fda:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <transfer+0x6>
    7fde:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <transfer+0x7>
    7fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    7fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    7fe6:	fc 01       	movw	r30, r24
    7fe8:	80 85       	ldd	r24, Z+8	; 0x08
    7fea:	91 85       	ldd	r25, Z+9	; 0x09
    7fec:	28 17       	cp	r18, r24
    7fee:	39 07       	cpc	r19, r25
    7ff0:	60 f5       	brcc	.+88     	; 0x804a <twim_write_handler+0xe6>

		if (transfer.read) {
    7ff2:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <transfer+0x8>
    7ff6:	88 23       	and	r24, r24
    7ff8:	59 f0       	breq	.+22     	; 0x8010 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    7ffa:	89 81       	ldd	r24, Y+1	; 0x01
    7ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    7ffe:	fc 01       	movw	r30, r24
    8000:	86 81       	ldd	r24, Z+6	; 0x06
    8002:	28 2f       	mov	r18, r24
    8004:	21 60       	ori	r18, 0x01	; 1
    8006:	89 81       	ldd	r24, Y+1	; 0x01
    8008:	9a 81       	ldd	r25, Y+2	; 0x02
    800a:	fc 01       	movw	r30, r24
    800c:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    800e:	24 c0       	rjmp	.+72     	; 0x8058 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    8010:	8b 81       	ldd	r24, Y+3	; 0x03
    8012:	9c 81       	ldd	r25, Y+4	; 0x04
    8014:	fc 01       	movw	r30, r24
    8016:	86 81       	ldd	r24, Z+6	; 0x06
    8018:	97 81       	ldd	r25, Z+7	; 0x07
    801a:	8f 83       	std	Y+7, r24	; 0x07
    801c:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    801e:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <transfer+0x6>
    8022:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <transfer+0x7>
    8026:	9c 01       	movw	r18, r24
    8028:	2f 5f       	subi	r18, 0xFF	; 255
    802a:	3f 4f       	sbci	r19, 0xFF	; 255
    802c:	20 93 2a 22 	sts	0x222A, r18	; 0x80222a <transfer+0x6>
    8030:	30 93 2b 22 	sts	0x222B, r19	; 0x80222b <transfer+0x7>
    8034:	2f 81       	ldd	r18, Y+7	; 0x07
    8036:	38 85       	ldd	r19, Y+8	; 0x08
    8038:	82 0f       	add	r24, r18
    803a:	93 1f       	adc	r25, r19
    803c:	fc 01       	movw	r30, r24
    803e:	20 81       	ld	r18, Z
    8040:	89 81       	ldd	r24, Y+1	; 0x01
    8042:	9a 81       	ldd	r25, Y+2	; 0x02
    8044:	fc 01       	movw	r30, r24
    8046:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    8048:	07 c0       	rjmp	.+14     	; 0x8058 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    804a:	89 81       	ldd	r24, Y+1	; 0x01
    804c:	9a 81       	ldd	r25, Y+2	; 0x02
    804e:	23 e0       	ldi	r18, 0x03	; 3
    8050:	fc 01       	movw	r30, r24
    8052:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    8054:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <transfer+0xa>
	}
}
    8058:	00 00       	nop
    805a:	28 96       	adiw	r28, 0x08	; 8
    805c:	cd bf       	out	0x3d, r28	; 61
    805e:	de bf       	out	0x3e, r29	; 62
    8060:	df 91       	pop	r29
    8062:	cf 91       	pop	r28
    8064:	08 95       	ret

00008066 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    8066:	cf 93       	push	r28
    8068:	df 93       	push	r29
    806a:	00 d0       	rcall	.+0      	; 0x806c <twim_read_handler+0x6>
    806c:	00 d0       	rcall	.+0      	; 0x806e <twim_read_handler+0x8>
    806e:	cd b7       	in	r28, 0x3d	; 61
    8070:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    8072:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <transfer>
    8076:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <transfer+0x1>
    807a:	89 83       	std	Y+1, r24	; 0x01
    807c:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    807e:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <transfer+0x2>
    8082:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <transfer+0x3>
    8086:	8b 83       	std	Y+3, r24	; 0x03
    8088:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    808a:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <transfer+0x6>
    808e:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <transfer+0x7>
    8092:	8b 81       	ldd	r24, Y+3	; 0x03
    8094:	9c 81       	ldd	r25, Y+4	; 0x04
    8096:	fc 01       	movw	r30, r24
    8098:	80 85       	ldd	r24, Z+8	; 0x08
    809a:	91 85       	ldd	r25, Z+9	; 0x09
    809c:	28 17       	cp	r18, r24
    809e:	39 07       	cpc	r19, r25
    80a0:	b0 f5       	brcc	.+108    	; 0x810e <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    80a2:	8b 81       	ldd	r24, Y+3	; 0x03
    80a4:	9c 81       	ldd	r25, Y+4	; 0x04
    80a6:	fc 01       	movw	r30, r24
    80a8:	86 81       	ldd	r24, Z+6	; 0x06
    80aa:	97 81       	ldd	r25, Z+7	; 0x07
    80ac:	8d 83       	std	Y+5, r24	; 0x05
    80ae:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    80b0:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <transfer+0x6>
    80b4:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <transfer+0x7>
    80b8:	9c 01       	movw	r18, r24
    80ba:	2f 5f       	subi	r18, 0xFF	; 255
    80bc:	3f 4f       	sbci	r19, 0xFF	; 255
    80be:	20 93 2a 22 	sts	0x222A, r18	; 0x80222a <transfer+0x6>
    80c2:	30 93 2b 22 	sts	0x222B, r19	; 0x80222b <transfer+0x7>
    80c6:	2d 81       	ldd	r18, Y+5	; 0x05
    80c8:	3e 81       	ldd	r19, Y+6	; 0x06
    80ca:	82 0f       	add	r24, r18
    80cc:	93 1f       	adc	r25, r19
    80ce:	29 81       	ldd	r18, Y+1	; 0x01
    80d0:	3a 81       	ldd	r19, Y+2	; 0x02
    80d2:	f9 01       	movw	r30, r18
    80d4:	27 81       	ldd	r18, Z+7	; 0x07
    80d6:	fc 01       	movw	r30, r24
    80d8:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    80da:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <transfer+0x6>
    80de:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <transfer+0x7>
    80e2:	8b 81       	ldd	r24, Y+3	; 0x03
    80e4:	9c 81       	ldd	r25, Y+4	; 0x04
    80e6:	fc 01       	movw	r30, r24
    80e8:	80 85       	ldd	r24, Z+8	; 0x08
    80ea:	91 85       	ldd	r25, Z+9	; 0x09
    80ec:	28 17       	cp	r18, r24
    80ee:	39 07       	cpc	r19, r25
    80f0:	30 f4       	brcc	.+12     	; 0x80fe <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    80f2:	89 81       	ldd	r24, Y+1	; 0x01
    80f4:	9a 81       	ldd	r25, Y+2	; 0x02
    80f6:	22 e0       	ldi	r18, 0x02	; 2
    80f8:	fc 01       	movw	r30, r24
    80fa:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    80fc:	10 c0       	rjmp	.+32     	; 0x811e <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    80fe:	89 81       	ldd	r24, Y+1	; 0x01
    8100:	9a 81       	ldd	r25, Y+2	; 0x02
    8102:	27 e0       	ldi	r18, 0x07	; 7
    8104:	fc 01       	movw	r30, r24
    8106:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    8108:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    810c:	08 c0       	rjmp	.+16     	; 0x811e <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    810e:	89 81       	ldd	r24, Y+1	; 0x01
    8110:	9a 81       	ldd	r25, Y+2	; 0x02
    8112:	23 e0       	ldi	r18, 0x03	; 3
    8114:	fc 01       	movw	r30, r24
    8116:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    8118:	89 ef       	ldi	r24, 0xF9	; 249
    811a:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <transfer+0xa>
	}
}
    811e:	00 00       	nop
    8120:	26 96       	adiw	r28, 0x06	; 6
    8122:	cd bf       	out	0x3d, r28	; 61
    8124:	de bf       	out	0x3e, r29	; 62
    8126:	df 91       	pop	r29
    8128:	cf 91       	pop	r28
    812a:	08 95       	ret

0000812c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    812c:	cf 93       	push	r28
    812e:	df 93       	push	r29
    8130:	1f 92       	push	r1
    8132:	cd b7       	in	r28, 0x3d	; 61
    8134:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    8136:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <transfer>
    813a:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <transfer+0x1>
    813e:	fc 01       	movw	r30, r24
    8140:	84 81       	ldd	r24, Z+4	; 0x04
    8142:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    8144:	89 81       	ldd	r24, Y+1	; 0x01
    8146:	88 2f       	mov	r24, r24
    8148:	90 e0       	ldi	r25, 0x00	; 0
    814a:	88 70       	andi	r24, 0x08	; 8
    814c:	99 27       	eor	r25, r25
    814e:	89 2b       	or	r24, r25
    8150:	99 f0       	breq	.+38     	; 0x8178 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    8152:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <transfer>
    8156:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <transfer+0x1>
    815a:	29 81       	ldd	r18, Y+1	; 0x01
    815c:	28 60       	ori	r18, 0x08	; 8
    815e:	fc 01       	movw	r30, r24
    8160:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    8162:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <transfer>
    8166:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <transfer+0x1>
    816a:	23 e0       	ldi	r18, 0x03	; 3
    816c:	fc 01       	movw	r30, r24
    816e:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    8170:	86 ef       	ldi	r24, 0xF6	; 246
    8172:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    8176:	2a c0       	rjmp	.+84     	; 0x81cc <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    8178:	89 81       	ldd	r24, Y+1	; 0x01
    817a:	88 2f       	mov	r24, r24
    817c:	90 e0       	ldi	r25, 0x00	; 0
    817e:	84 70       	andi	r24, 0x04	; 4
    8180:	99 27       	eor	r25, r25
    8182:	89 2b       	or	r24, r25
    8184:	39 f4       	brne	.+14     	; 0x8194 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    8186:	89 81       	ldd	r24, Y+1	; 0x01
    8188:	88 2f       	mov	r24, r24
    818a:	90 e0       	ldi	r25, 0x00	; 0
    818c:	80 71       	andi	r24, 0x10	; 16
    818e:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    8190:	89 2b       	or	r24, r25
    8192:	59 f0       	breq	.+22     	; 0x81aa <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    8194:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <transfer>
    8198:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <transfer+0x1>
    819c:	23 e0       	ldi	r18, 0x03	; 3
    819e:	fc 01       	movw	r30, r24
    81a0:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    81a2:	8f ef       	ldi	r24, 0xFF	; 255
    81a4:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    81a8:	11 c0       	rjmp	.+34     	; 0x81cc <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    81aa:	89 81       	ldd	r24, Y+1	; 0x01
    81ac:	88 2f       	mov	r24, r24
    81ae:	90 e0       	ldi	r25, 0x00	; 0
    81b0:	80 74       	andi	r24, 0x40	; 64
    81b2:	99 27       	eor	r25, r25
    81b4:	89 2b       	or	r24, r25
    81b6:	11 f0       	breq	.+4      	; 0x81bc <twim_interrupt_handler+0x90>

		twim_write_handler();
    81b8:	d5 de       	rcall	.-598    	; 0x7f64 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    81ba:	08 c0       	rjmp	.+16     	; 0x81cc <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    81bc:	89 81       	ldd	r24, Y+1	; 0x01
    81be:	88 23       	and	r24, r24

		twim_read_handler();
    81c0:	14 f4       	brge	.+4      	; 0x81c6 <twim_interrupt_handler+0x9a>
    81c2:	51 df       	rcall	.-350    	; 0x8066 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    81c4:	03 c0       	rjmp	.+6      	; 0x81cc <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    81c6:	8b ef       	ldi	r24, 0xFB	; 251
    81c8:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <transfer+0xa>
	}
}
    81cc:	00 00       	nop
    81ce:	0f 90       	pop	r0
    81d0:	df 91       	pop	r29
    81d2:	cf 91       	pop	r28
    81d4:	08 95       	ret

000081d6 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    81d6:	cf 93       	push	r28
    81d8:	df 93       	push	r29
    81da:	1f 92       	push	r1
    81dc:	1f 92       	push	r1
    81de:	cd b7       	in	r28, 0x3d	; 61
    81e0:	de b7       	in	r29, 0x3e	; 62
    81e2:	89 83       	std	Y+1, r24	; 0x01
    81e4:	9a 83       	std	Y+2, r25	; 0x02
    81e6:	89 81       	ldd	r24, Y+1	; 0x01
    81e8:	9a 81       	ldd	r25, Y+2	; 0x02
    81ea:	fc 01       	movw	r30, r24
    81ec:	84 81       	ldd	r24, Z+4	; 0x04
    81ee:	28 2f       	mov	r18, r24
    81f0:	20 61       	ori	r18, 0x10	; 16
    81f2:	89 81       	ldd	r24, Y+1	; 0x01
    81f4:	9a 81       	ldd	r25, Y+2	; 0x02
    81f6:	fc 01       	movw	r30, r24
    81f8:	24 83       	std	Z+4, r18	; 0x04
    81fa:	00 00       	nop
    81fc:	0f 90       	pop	r0
    81fe:	0f 90       	pop	r0
    8200:	df 91       	pop	r29
    8202:	cf 91       	pop	r28
    8204:	08 95       	ret

00008206 <usart_format_set>:
    8206:	cf 93       	push	r28
    8208:	df 93       	push	r29
    820a:	cd b7       	in	r28, 0x3d	; 61
    820c:	de b7       	in	r29, 0x3e	; 62
    820e:	25 97       	sbiw	r28, 0x05	; 5
    8210:	cd bf       	out	0x3d, r28	; 61
    8212:	de bf       	out	0x3e, r29	; 62
    8214:	89 83       	std	Y+1, r24	; 0x01
    8216:	9a 83       	std	Y+2, r25	; 0x02
    8218:	6b 83       	std	Y+3, r22	; 0x03
    821a:	4c 83       	std	Y+4, r20	; 0x04
    821c:	2d 83       	std	Y+5, r18	; 0x05
    821e:	9b 81       	ldd	r25, Y+3	; 0x03
    8220:	8c 81       	ldd	r24, Y+4	; 0x04
    8222:	89 2b       	or	r24, r25
    8224:	98 2f       	mov	r25, r24
    8226:	8d 81       	ldd	r24, Y+5	; 0x05
    8228:	88 23       	and	r24, r24
    822a:	11 f0       	breq	.+4      	; 0x8230 <usart_format_set+0x2a>
    822c:	88 e0       	ldi	r24, 0x08	; 8
    822e:	01 c0       	rjmp	.+2      	; 0x8232 <usart_format_set+0x2c>
    8230:	80 e0       	ldi	r24, 0x00	; 0
    8232:	89 2b       	or	r24, r25
    8234:	28 2f       	mov	r18, r24
    8236:	89 81       	ldd	r24, Y+1	; 0x01
    8238:	9a 81       	ldd	r25, Y+2	; 0x02
    823a:	fc 01       	movw	r30, r24
    823c:	25 83       	std	Z+5, r18	; 0x05
    823e:	00 00       	nop
    8240:	25 96       	adiw	r28, 0x05	; 5
    8242:	cd bf       	out	0x3d, r28	; 61
    8244:	de bf       	out	0x3e, r29	; 62
    8246:	df 91       	pop	r29
    8248:	cf 91       	pop	r28
    824a:	08 95       	ret

0000824c <usart_tx_enable>:
    824c:	cf 93       	push	r28
    824e:	df 93       	push	r29
    8250:	1f 92       	push	r1
    8252:	1f 92       	push	r1
    8254:	cd b7       	in	r28, 0x3d	; 61
    8256:	de b7       	in	r29, 0x3e	; 62
    8258:	89 83       	std	Y+1, r24	; 0x01
    825a:	9a 83       	std	Y+2, r25	; 0x02
    825c:	89 81       	ldd	r24, Y+1	; 0x01
    825e:	9a 81       	ldd	r25, Y+2	; 0x02
    8260:	fc 01       	movw	r30, r24
    8262:	84 81       	ldd	r24, Z+4	; 0x04
    8264:	28 2f       	mov	r18, r24
    8266:	28 60       	ori	r18, 0x08	; 8
    8268:	89 81       	ldd	r24, Y+1	; 0x01
    826a:	9a 81       	ldd	r25, Y+2	; 0x02
    826c:	fc 01       	movw	r30, r24
    826e:	24 83       	std	Z+4, r18	; 0x04
    8270:	00 00       	nop
    8272:	0f 90       	pop	r0
    8274:	0f 90       	pop	r0
    8276:	df 91       	pop	r29
    8278:	cf 91       	pop	r28
    827a:	08 95       	ret

0000827c <usart_set_mode>:
    827c:	cf 93       	push	r28
    827e:	df 93       	push	r29
    8280:	00 d0       	rcall	.+0      	; 0x8282 <usart_set_mode+0x6>
    8282:	cd b7       	in	r28, 0x3d	; 61
    8284:	de b7       	in	r29, 0x3e	; 62
    8286:	89 83       	std	Y+1, r24	; 0x01
    8288:	9a 83       	std	Y+2, r25	; 0x02
    828a:	6b 83       	std	Y+3, r22	; 0x03
    828c:	89 81       	ldd	r24, Y+1	; 0x01
    828e:	9a 81       	ldd	r25, Y+2	; 0x02
    8290:	fc 01       	movw	r30, r24
    8292:	85 81       	ldd	r24, Z+5	; 0x05
    8294:	98 2f       	mov	r25, r24
    8296:	9f 73       	andi	r25, 0x3F	; 63
    8298:	8b 81       	ldd	r24, Y+3	; 0x03
    829a:	89 2b       	or	r24, r25
    829c:	28 2f       	mov	r18, r24
    829e:	89 81       	ldd	r24, Y+1	; 0x01
    82a0:	9a 81       	ldd	r25, Y+2	; 0x02
    82a2:	fc 01       	movw	r30, r24
    82a4:	25 83       	std	Z+5, r18	; 0x05
    82a6:	00 00       	nop
    82a8:	23 96       	adiw	r28, 0x03	; 3
    82aa:	cd bf       	out	0x3d, r28	; 61
    82ac:	de bf       	out	0x3e, r29	; 62
    82ae:	df 91       	pop	r29
    82b0:	cf 91       	pop	r28
    82b2:	08 95       	ret

000082b4 <usart_data_register_is_empty>:
    82b4:	cf 93       	push	r28
    82b6:	df 93       	push	r29
    82b8:	1f 92       	push	r1
    82ba:	1f 92       	push	r1
    82bc:	cd b7       	in	r28, 0x3d	; 61
    82be:	de b7       	in	r29, 0x3e	; 62
    82c0:	89 83       	std	Y+1, r24	; 0x01
    82c2:	9a 83       	std	Y+2, r25	; 0x02
    82c4:	89 81       	ldd	r24, Y+1	; 0x01
    82c6:	9a 81       	ldd	r25, Y+2	; 0x02
    82c8:	fc 01       	movw	r30, r24
    82ca:	81 81       	ldd	r24, Z+1	; 0x01
    82cc:	88 2f       	mov	r24, r24
    82ce:	90 e0       	ldi	r25, 0x00	; 0
    82d0:	80 72       	andi	r24, 0x20	; 32
    82d2:	99 27       	eor	r25, r25
    82d4:	21 e0       	ldi	r18, 0x01	; 1
    82d6:	89 2b       	or	r24, r25
    82d8:	09 f4       	brne	.+2      	; 0x82dc <usart_data_register_is_empty+0x28>
    82da:	20 e0       	ldi	r18, 0x00	; 0
    82dc:	82 2f       	mov	r24, r18
    82de:	0f 90       	pop	r0
    82e0:	0f 90       	pop	r0
    82e2:	df 91       	pop	r29
    82e4:	cf 91       	pop	r28
    82e6:	08 95       	ret

000082e8 <usart_rx_is_complete>:
    82e8:	cf 93       	push	r28
    82ea:	df 93       	push	r29
    82ec:	1f 92       	push	r1
    82ee:	1f 92       	push	r1
    82f0:	cd b7       	in	r28, 0x3d	; 61
    82f2:	de b7       	in	r29, 0x3e	; 62
    82f4:	89 83       	std	Y+1, r24	; 0x01
    82f6:	9a 83       	std	Y+2, r25	; 0x02
    82f8:	89 81       	ldd	r24, Y+1	; 0x01
    82fa:	9a 81       	ldd	r25, Y+2	; 0x02
    82fc:	fc 01       	movw	r30, r24
    82fe:	81 81       	ldd	r24, Z+1	; 0x01
    8300:	88 2f       	mov	r24, r24
    8302:	90 e0       	ldi	r25, 0x00	; 0
    8304:	80 78       	andi	r24, 0x80	; 128
    8306:	99 27       	eor	r25, r25
    8308:	21 e0       	ldi	r18, 0x01	; 1
    830a:	89 2b       	or	r24, r25
    830c:	09 f4       	brne	.+2      	; 0x8310 <usart_rx_is_complete+0x28>
    830e:	20 e0       	ldi	r18, 0x00	; 0
    8310:	82 2f       	mov	r24, r18
    8312:	0f 90       	pop	r0
    8314:	0f 90       	pop	r0
    8316:	df 91       	pop	r29
    8318:	cf 91       	pop	r28
    831a:	08 95       	ret

0000831c <sysclk_get_main_hz>:
    831c:	cf 93       	push	r28
    831e:	df 93       	push	r29
    8320:	cd b7       	in	r28, 0x3d	; 61
    8322:	de b7       	in	r29, 0x3e	; 62
    8324:	80 e0       	ldi	r24, 0x00	; 0
    8326:	9c e6       	ldi	r25, 0x6C	; 108
    8328:	ac ed       	ldi	r26, 0xDC	; 220
    832a:	b2 e0       	ldi	r27, 0x02	; 2
    832c:	bc 01       	movw	r22, r24
    832e:	cd 01       	movw	r24, r26
    8330:	df 91       	pop	r29
    8332:	cf 91       	pop	r28
    8334:	08 95       	ret

00008336 <sysclk_get_per4_hz>:
    8336:	cf 93       	push	r28
    8338:	df 93       	push	r29
    833a:	1f 92       	push	r1
    833c:	cd b7       	in	r28, 0x3d	; 61
    833e:	de b7       	in	r29, 0x3e	; 62
    8340:	19 82       	std	Y+1, r1	; 0x01
    8342:	ec df       	rcall	.-40     	; 0x831c <sysclk_get_main_hz>
    8344:	dc 01       	movw	r26, r24
    8346:	cb 01       	movw	r24, r22
    8348:	29 81       	ldd	r18, Y+1	; 0x01
    834a:	22 2f       	mov	r18, r18
    834c:	30 e0       	ldi	r19, 0x00	; 0
    834e:	04 c0       	rjmp	.+8      	; 0x8358 <sysclk_get_per4_hz+0x22>
    8350:	b6 95       	lsr	r27
    8352:	a7 95       	ror	r26
    8354:	97 95       	ror	r25
    8356:	87 95       	ror	r24
    8358:	2a 95       	dec	r18
    835a:	d2 f7       	brpl	.-12     	; 0x8350 <sysclk_get_per4_hz+0x1a>
    835c:	bc 01       	movw	r22, r24
    835e:	cd 01       	movw	r24, r26
    8360:	0f 90       	pop	r0
    8362:	df 91       	pop	r29
    8364:	cf 91       	pop	r28
    8366:	08 95       	ret

00008368 <sysclk_get_per2_hz>:
    8368:	cf 93       	push	r28
    836a:	df 93       	push	r29
    836c:	cd b7       	in	r28, 0x3d	; 61
    836e:	de b7       	in	r29, 0x3e	; 62
    8370:	e2 df       	rcall	.-60     	; 0x8336 <sysclk_get_per4_hz>
    8372:	dc 01       	movw	r26, r24
    8374:	cb 01       	movw	r24, r22
    8376:	bc 01       	movw	r22, r24
    8378:	cd 01       	movw	r24, r26
    837a:	df 91       	pop	r29
    837c:	cf 91       	pop	r28
    837e:	08 95       	ret

00008380 <sysclk_get_per_hz>:
    8380:	cf 93       	push	r28
    8382:	df 93       	push	r29
    8384:	cd b7       	in	r28, 0x3d	; 61
    8386:	de b7       	in	r29, 0x3e	; 62
    8388:	ef df       	rcall	.-34     	; 0x8368 <sysclk_get_per2_hz>
    838a:	dc 01       	movw	r26, r24
    838c:	cb 01       	movw	r24, r22
    838e:	bc 01       	movw	r22, r24
    8390:	cd 01       	movw	r24, r26
    8392:	df 91       	pop	r29
    8394:	cf 91       	pop	r28
    8396:	08 95       	ret

00008398 <sysclk_enable_peripheral_clock>:
    8398:	cf 93       	push	r28
    839a:	df 93       	push	r29
    839c:	1f 92       	push	r1
    839e:	1f 92       	push	r1
    83a0:	cd b7       	in	r28, 0x3d	; 61
    83a2:	de b7       	in	r29, 0x3e	; 62
    83a4:	89 83       	std	Y+1, r24	; 0x01
    83a6:	9a 83       	std	Y+2, r25	; 0x02
    83a8:	89 81       	ldd	r24, Y+1	; 0x01
    83aa:	9a 81       	ldd	r25, Y+2	; 0x02
    83ac:	89 2b       	or	r24, r25
    83ae:	09 f4       	brne	.+2      	; 0x83b2 <sysclk_enable_peripheral_clock+0x1a>
    83b0:	85 c1       	rjmp	.+778    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    83b2:	89 81       	ldd	r24, Y+1	; 0x01
    83b4:	9a 81       	ldd	r25, Y+2	; 0x02
    83b6:	80 3c       	cpi	r24, 0xC0	; 192
    83b8:	91 05       	cpc	r25, r1
    83ba:	29 f4       	brne	.+10     	; 0x83c6 <sysclk_enable_peripheral_clock+0x2e>
    83bc:	60 e1       	ldi	r22, 0x10	; 16
    83be:	80 e0       	ldi	r24, 0x00	; 0
    83c0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    83c4:	7b c1       	rjmp	.+758    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    83c6:	89 81       	ldd	r24, Y+1	; 0x01
    83c8:	9a 81       	ldd	r25, Y+2	; 0x02
    83ca:	80 34       	cpi	r24, 0x40	; 64
    83cc:	94 40       	sbci	r25, 0x04	; 4
    83ce:	29 f4       	brne	.+10     	; 0x83da <sysclk_enable_peripheral_clock+0x42>
    83d0:	68 e0       	ldi	r22, 0x08	; 8
    83d2:	80 e0       	ldi	r24, 0x00	; 0
    83d4:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    83d8:	71 c1       	rjmp	.+738    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    83da:	89 81       	ldd	r24, Y+1	; 0x01
    83dc:	9a 81       	ldd	r25, Y+2	; 0x02
    83de:	81 15       	cp	r24, r1
    83e0:	94 40       	sbci	r25, 0x04	; 4
    83e2:	29 f4       	brne	.+10     	; 0x83ee <sysclk_enable_peripheral_clock+0x56>
    83e4:	64 e0       	ldi	r22, 0x04	; 4
    83e6:	80 e0       	ldi	r24, 0x00	; 0
    83e8:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    83ec:	67 c1       	rjmp	.+718    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    83ee:	89 81       	ldd	r24, Y+1	; 0x01
    83f0:	9a 81       	ldd	r25, Y+2	; 0x02
    83f2:	80 38       	cpi	r24, 0x80	; 128
    83f4:	91 40       	sbci	r25, 0x01	; 1
    83f6:	29 f4       	brne	.+10     	; 0x8402 <sysclk_enable_peripheral_clock+0x6a>
    83f8:	62 e0       	ldi	r22, 0x02	; 2
    83fa:	80 e0       	ldi	r24, 0x00	; 0
    83fc:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8400:	5d c1       	rjmp	.+698    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8402:	89 81       	ldd	r24, Y+1	; 0x01
    8404:	9a 81       	ldd	r25, Y+2	; 0x02
    8406:	81 15       	cp	r24, r1
    8408:	91 40       	sbci	r25, 0x01	; 1
    840a:	29 f4       	brne	.+10     	; 0x8416 <sysclk_enable_peripheral_clock+0x7e>
    840c:	61 e0       	ldi	r22, 0x01	; 1
    840e:	80 e0       	ldi	r24, 0x00	; 0
    8410:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8414:	53 c1       	rjmp	.+678    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8416:	89 81       	ldd	r24, Y+1	; 0x01
    8418:	9a 81       	ldd	r25, Y+2	; 0x02
    841a:	80 38       	cpi	r24, 0x80	; 128
    841c:	93 40       	sbci	r25, 0x03	; 3
    841e:	29 f4       	brne	.+10     	; 0x842a <sysclk_enable_peripheral_clock+0x92>
    8420:	61 e0       	ldi	r22, 0x01	; 1
    8422:	81 e0       	ldi	r24, 0x01	; 1
    8424:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8428:	49 c1       	rjmp	.+658    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    842a:	89 81       	ldd	r24, Y+1	; 0x01
    842c:	9a 81       	ldd	r25, Y+2	; 0x02
    842e:	80 39       	cpi	r24, 0x90	; 144
    8430:	93 40       	sbci	r25, 0x03	; 3
    8432:	29 f4       	brne	.+10     	; 0x843e <sysclk_enable_peripheral_clock+0xa6>
    8434:	61 e0       	ldi	r22, 0x01	; 1
    8436:	82 e0       	ldi	r24, 0x02	; 2
    8438:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    843c:	3f c1       	rjmp	.+638    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    843e:	89 81       	ldd	r24, Y+1	; 0x01
    8440:	9a 81       	ldd	r25, Y+2	; 0x02
    8442:	81 15       	cp	r24, r1
    8444:	92 40       	sbci	r25, 0x02	; 2
    8446:	29 f4       	brne	.+10     	; 0x8452 <sysclk_enable_peripheral_clock+0xba>
    8448:	62 e0       	ldi	r22, 0x02	; 2
    844a:	81 e0       	ldi	r24, 0x01	; 1
    844c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8450:	35 c1       	rjmp	.+618    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8452:	89 81       	ldd	r24, Y+1	; 0x01
    8454:	9a 81       	ldd	r25, Y+2	; 0x02
    8456:	80 34       	cpi	r24, 0x40	; 64
    8458:	92 40       	sbci	r25, 0x02	; 2
    845a:	29 f4       	brne	.+10     	; 0x8466 <sysclk_enable_peripheral_clock+0xce>
    845c:	62 e0       	ldi	r22, 0x02	; 2
    845e:	82 e0       	ldi	r24, 0x02	; 2
    8460:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8464:	2b c1       	rjmp	.+598    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8466:	89 81       	ldd	r24, Y+1	; 0x01
    8468:	9a 81       	ldd	r25, Y+2	; 0x02
    846a:	81 15       	cp	r24, r1
    846c:	93 40       	sbci	r25, 0x03	; 3
    846e:	29 f4       	brne	.+10     	; 0x847a <sysclk_enable_peripheral_clock+0xe2>
    8470:	64 e0       	ldi	r22, 0x04	; 4
    8472:	81 e0       	ldi	r24, 0x01	; 1
    8474:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8478:	21 c1       	rjmp	.+578    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    847a:	89 81       	ldd	r24, Y+1	; 0x01
    847c:	9a 81       	ldd	r25, Y+2	; 0x02
    847e:	80 32       	cpi	r24, 0x20	; 32
    8480:	93 40       	sbci	r25, 0x03	; 3
    8482:	29 f4       	brne	.+10     	; 0x848e <sysclk_enable_peripheral_clock+0xf6>
    8484:	64 e0       	ldi	r22, 0x04	; 4
    8486:	82 e0       	ldi	r24, 0x02	; 2
    8488:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    848c:	17 c1       	rjmp	.+558    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    848e:	89 81       	ldd	r24, Y+1	; 0x01
    8490:	9a 81       	ldd	r25, Y+2	; 0x02
    8492:	81 15       	cp	r24, r1
    8494:	98 40       	sbci	r25, 0x08	; 8
    8496:	29 f4       	brne	.+10     	; 0x84a2 <sysclk_enable_peripheral_clock+0x10a>
    8498:	61 e0       	ldi	r22, 0x01	; 1
    849a:	83 e0       	ldi	r24, 0x03	; 3
    849c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    84a0:	0d c1       	rjmp	.+538    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    84a2:	89 81       	ldd	r24, Y+1	; 0x01
    84a4:	9a 81       	ldd	r25, Y+2	; 0x02
    84a6:	81 15       	cp	r24, r1
    84a8:	99 40       	sbci	r25, 0x09	; 9
    84aa:	29 f4       	brne	.+10     	; 0x84b6 <sysclk_enable_peripheral_clock+0x11e>
    84ac:	61 e0       	ldi	r22, 0x01	; 1
    84ae:	84 e0       	ldi	r24, 0x04	; 4
    84b0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    84b4:	03 c1       	rjmp	.+518    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    84b6:	89 81       	ldd	r24, Y+1	; 0x01
    84b8:	9a 81       	ldd	r25, Y+2	; 0x02
    84ba:	81 15       	cp	r24, r1
    84bc:	9a 40       	sbci	r25, 0x0A	; 10
    84be:	29 f4       	brne	.+10     	; 0x84ca <sysclk_enable_peripheral_clock+0x132>
    84c0:	61 e0       	ldi	r22, 0x01	; 1
    84c2:	85 e0       	ldi	r24, 0x05	; 5
    84c4:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    84c8:	f9 c0       	rjmp	.+498    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    84ca:	89 81       	ldd	r24, Y+1	; 0x01
    84cc:	9a 81       	ldd	r25, Y+2	; 0x02
    84ce:	81 15       	cp	r24, r1
    84d0:	9b 40       	sbci	r25, 0x0B	; 11
    84d2:	29 f4       	brne	.+10     	; 0x84de <sysclk_enable_peripheral_clock+0x146>
    84d4:	61 e0       	ldi	r22, 0x01	; 1
    84d6:	86 e0       	ldi	r24, 0x06	; 6
    84d8:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    84dc:	ef c0       	rjmp	.+478    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    84de:	89 81       	ldd	r24, Y+1	; 0x01
    84e0:	9a 81       	ldd	r25, Y+2	; 0x02
    84e2:	80 34       	cpi	r24, 0x40	; 64
    84e4:	98 40       	sbci	r25, 0x08	; 8
    84e6:	29 f4       	brne	.+10     	; 0x84f2 <sysclk_enable_peripheral_clock+0x15a>
    84e8:	62 e0       	ldi	r22, 0x02	; 2
    84ea:	83 e0       	ldi	r24, 0x03	; 3
    84ec:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    84f0:	e5 c0       	rjmp	.+458    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    84f2:	89 81       	ldd	r24, Y+1	; 0x01
    84f4:	9a 81       	ldd	r25, Y+2	; 0x02
    84f6:	80 34       	cpi	r24, 0x40	; 64
    84f8:	99 40       	sbci	r25, 0x09	; 9
    84fa:	29 f4       	brne	.+10     	; 0x8506 <sysclk_enable_peripheral_clock+0x16e>
    84fc:	62 e0       	ldi	r22, 0x02	; 2
    84fe:	84 e0       	ldi	r24, 0x04	; 4
    8500:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8504:	db c0       	rjmp	.+438    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8506:	89 81       	ldd	r24, Y+1	; 0x01
    8508:	9a 81       	ldd	r25, Y+2	; 0x02
    850a:	80 34       	cpi	r24, 0x40	; 64
    850c:	9a 40       	sbci	r25, 0x0A	; 10
    850e:	29 f4       	brne	.+10     	; 0x851a <sysclk_enable_peripheral_clock+0x182>
    8510:	62 e0       	ldi	r22, 0x02	; 2
    8512:	85 e0       	ldi	r24, 0x05	; 5
    8514:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8518:	d1 c0       	rjmp	.+418    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    851a:	89 81       	ldd	r24, Y+1	; 0x01
    851c:	9a 81       	ldd	r25, Y+2	; 0x02
    851e:	80 34       	cpi	r24, 0x40	; 64
    8520:	9b 40       	sbci	r25, 0x0B	; 11
    8522:	29 f4       	brne	.+10     	; 0x852e <sysclk_enable_peripheral_clock+0x196>
    8524:	62 e0       	ldi	r22, 0x02	; 2
    8526:	86 e0       	ldi	r24, 0x06	; 6
    8528:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    852c:	c7 c0       	rjmp	.+398    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    852e:	89 81       	ldd	r24, Y+1	; 0x01
    8530:	9a 81       	ldd	r25, Y+2	; 0x02
    8532:	80 39       	cpi	r24, 0x90	; 144
    8534:	98 40       	sbci	r25, 0x08	; 8
    8536:	29 f4       	brne	.+10     	; 0x8542 <sysclk_enable_peripheral_clock+0x1aa>
    8538:	64 e0       	ldi	r22, 0x04	; 4
    853a:	83 e0       	ldi	r24, 0x03	; 3
    853c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8540:	bd c0       	rjmp	.+378    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8542:	89 81       	ldd	r24, Y+1	; 0x01
    8544:	9a 81       	ldd	r25, Y+2	; 0x02
    8546:	80 39       	cpi	r24, 0x90	; 144
    8548:	99 40       	sbci	r25, 0x09	; 9
    854a:	29 f4       	brne	.+10     	; 0x8556 <sysclk_enable_peripheral_clock+0x1be>
    854c:	64 e0       	ldi	r22, 0x04	; 4
    854e:	84 e0       	ldi	r24, 0x04	; 4
    8550:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8554:	b3 c0       	rjmp	.+358    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8556:	89 81       	ldd	r24, Y+1	; 0x01
    8558:	9a 81       	ldd	r25, Y+2	; 0x02
    855a:	80 39       	cpi	r24, 0x90	; 144
    855c:	9a 40       	sbci	r25, 0x0A	; 10
    855e:	29 f4       	brne	.+10     	; 0x856a <sysclk_enable_peripheral_clock+0x1d2>
    8560:	64 e0       	ldi	r22, 0x04	; 4
    8562:	85 e0       	ldi	r24, 0x05	; 5
    8564:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8568:	a9 c0       	rjmp	.+338    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    856a:	89 81       	ldd	r24, Y+1	; 0x01
    856c:	9a 81       	ldd	r25, Y+2	; 0x02
    856e:	80 39       	cpi	r24, 0x90	; 144
    8570:	9b 40       	sbci	r25, 0x0B	; 11
    8572:	29 f4       	brne	.+10     	; 0x857e <sysclk_enable_peripheral_clock+0x1e6>
    8574:	64 e0       	ldi	r22, 0x04	; 4
    8576:	86 e0       	ldi	r24, 0x06	; 6
    8578:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    857c:	9f c0       	rjmp	.+318    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    857e:	89 81       	ldd	r24, Y+1	; 0x01
    8580:	9a 81       	ldd	r25, Y+2	; 0x02
    8582:	80 3c       	cpi	r24, 0xC0	; 192
    8584:	98 40       	sbci	r25, 0x08	; 8
    8586:	29 f4       	brne	.+10     	; 0x8592 <sysclk_enable_peripheral_clock+0x1fa>
    8588:	68 e0       	ldi	r22, 0x08	; 8
    858a:	83 e0       	ldi	r24, 0x03	; 3
    858c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8590:	95 c0       	rjmp	.+298    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8592:	89 81       	ldd	r24, Y+1	; 0x01
    8594:	9a 81       	ldd	r25, Y+2	; 0x02
    8596:	80 3c       	cpi	r24, 0xC0	; 192
    8598:	99 40       	sbci	r25, 0x09	; 9
    859a:	29 f4       	brne	.+10     	; 0x85a6 <sysclk_enable_peripheral_clock+0x20e>
    859c:	68 e0       	ldi	r22, 0x08	; 8
    859e:	84 e0       	ldi	r24, 0x04	; 4
    85a0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    85a4:	8b c0       	rjmp	.+278    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    85a6:	89 81       	ldd	r24, Y+1	; 0x01
    85a8:	9a 81       	ldd	r25, Y+2	; 0x02
    85aa:	80 3c       	cpi	r24, 0xC0	; 192
    85ac:	9a 40       	sbci	r25, 0x0A	; 10
    85ae:	29 f4       	brne	.+10     	; 0x85ba <sysclk_enable_peripheral_clock+0x222>
    85b0:	68 e0       	ldi	r22, 0x08	; 8
    85b2:	85 e0       	ldi	r24, 0x05	; 5
    85b4:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    85b8:	81 c0       	rjmp	.+258    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    85ba:	89 81       	ldd	r24, Y+1	; 0x01
    85bc:	9a 81       	ldd	r25, Y+2	; 0x02
    85be:	80 3c       	cpi	r24, 0xC0	; 192
    85c0:	9b 40       	sbci	r25, 0x0B	; 11
    85c2:	29 f4       	brne	.+10     	; 0x85ce <sysclk_enable_peripheral_clock+0x236>
    85c4:	68 e0       	ldi	r22, 0x08	; 8
    85c6:	86 e0       	ldi	r24, 0x06	; 6
    85c8:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    85cc:	77 c0       	rjmp	.+238    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    85ce:	89 81       	ldd	r24, Y+1	; 0x01
    85d0:	9a 81       	ldd	r25, Y+2	; 0x02
    85d2:	80 3a       	cpi	r24, 0xA0	; 160
    85d4:	98 40       	sbci	r25, 0x08	; 8
    85d6:	29 f4       	brne	.+10     	; 0x85e2 <sysclk_enable_peripheral_clock+0x24a>
    85d8:	60 e1       	ldi	r22, 0x10	; 16
    85da:	83 e0       	ldi	r24, 0x03	; 3
    85dc:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    85e0:	6d c0       	rjmp	.+218    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    85e2:	89 81       	ldd	r24, Y+1	; 0x01
    85e4:	9a 81       	ldd	r25, Y+2	; 0x02
    85e6:	80 3a       	cpi	r24, 0xA0	; 160
    85e8:	99 40       	sbci	r25, 0x09	; 9
    85ea:	29 f4       	brne	.+10     	; 0x85f6 <sysclk_enable_peripheral_clock+0x25e>
    85ec:	60 e1       	ldi	r22, 0x10	; 16
    85ee:	84 e0       	ldi	r24, 0x04	; 4
    85f0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    85f4:	63 c0       	rjmp	.+198    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    85f6:	89 81       	ldd	r24, Y+1	; 0x01
    85f8:	9a 81       	ldd	r25, Y+2	; 0x02
    85fa:	80 3a       	cpi	r24, 0xA0	; 160
    85fc:	9a 40       	sbci	r25, 0x0A	; 10
    85fe:	29 f4       	brne	.+10     	; 0x860a <sysclk_enable_peripheral_clock+0x272>
    8600:	60 e1       	ldi	r22, 0x10	; 16
    8602:	85 e0       	ldi	r24, 0x05	; 5
    8604:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8608:	59 c0       	rjmp	.+178    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    860a:	89 81       	ldd	r24, Y+1	; 0x01
    860c:	9a 81       	ldd	r25, Y+2	; 0x02
    860e:	80 3a       	cpi	r24, 0xA0	; 160
    8610:	9b 40       	sbci	r25, 0x0B	; 11
    8612:	29 f4       	brne	.+10     	; 0x861e <sysclk_enable_peripheral_clock+0x286>
    8614:	60 e1       	ldi	r22, 0x10	; 16
    8616:	86 e0       	ldi	r24, 0x06	; 6
    8618:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    861c:	4f c0       	rjmp	.+158    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    861e:	89 81       	ldd	r24, Y+1	; 0x01
    8620:	9a 81       	ldd	r25, Y+2	; 0x02
    8622:	80 3b       	cpi	r24, 0xB0	; 176
    8624:	98 40       	sbci	r25, 0x08	; 8
    8626:	29 f4       	brne	.+10     	; 0x8632 <sysclk_enable_peripheral_clock+0x29a>
    8628:	60 e2       	ldi	r22, 0x20	; 32
    862a:	83 e0       	ldi	r24, 0x03	; 3
    862c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8630:	45 c0       	rjmp	.+138    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8632:	89 81       	ldd	r24, Y+1	; 0x01
    8634:	9a 81       	ldd	r25, Y+2	; 0x02
    8636:	80 3b       	cpi	r24, 0xB0	; 176
    8638:	99 40       	sbci	r25, 0x09	; 9
    863a:	29 f4       	brne	.+10     	; 0x8646 <sysclk_enable_peripheral_clock+0x2ae>
    863c:	60 e2       	ldi	r22, 0x20	; 32
    863e:	84 e0       	ldi	r24, 0x04	; 4
    8640:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8644:	3b c0       	rjmp	.+118    	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8646:	89 81       	ldd	r24, Y+1	; 0x01
    8648:	9a 81       	ldd	r25, Y+2	; 0x02
    864a:	80 3b       	cpi	r24, 0xB0	; 176
    864c:	9a 40       	sbci	r25, 0x0A	; 10
    864e:	29 f4       	brne	.+10     	; 0x865a <sysclk_enable_peripheral_clock+0x2c2>
    8650:	60 e2       	ldi	r22, 0x20	; 32
    8652:	85 e0       	ldi	r24, 0x05	; 5
    8654:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8658:	31 c0       	rjmp	.+98     	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    865a:	89 81       	ldd	r24, Y+1	; 0x01
    865c:	9a 81       	ldd	r25, Y+2	; 0x02
    865e:	80 3b       	cpi	r24, 0xB0	; 176
    8660:	9b 40       	sbci	r25, 0x0B	; 11
    8662:	29 f4       	brne	.+10     	; 0x866e <sysclk_enable_peripheral_clock+0x2d6>
    8664:	60 e2       	ldi	r22, 0x20	; 32
    8666:	86 e0       	ldi	r24, 0x06	; 6
    8668:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    866c:	27 c0       	rjmp	.+78     	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    866e:	89 81       	ldd	r24, Y+1	; 0x01
    8670:	9a 81       	ldd	r25, Y+2	; 0x02
    8672:	80 38       	cpi	r24, 0x80	; 128
    8674:	94 40       	sbci	r25, 0x04	; 4
    8676:	29 f4       	brne	.+10     	; 0x8682 <sysclk_enable_peripheral_clock+0x2ea>
    8678:	60 e4       	ldi	r22, 0x40	; 64
    867a:	83 e0       	ldi	r24, 0x03	; 3
    867c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8680:	1d c0       	rjmp	.+58     	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8682:	89 81       	ldd	r24, Y+1	; 0x01
    8684:	9a 81       	ldd	r25, Y+2	; 0x02
    8686:	80 39       	cpi	r24, 0x90	; 144
    8688:	94 40       	sbci	r25, 0x04	; 4
    868a:	29 f4       	brne	.+10     	; 0x8696 <sysclk_enable_peripheral_clock+0x2fe>
    868c:	60 e4       	ldi	r22, 0x40	; 64
    868e:	84 e0       	ldi	r24, 0x04	; 4
    8690:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8694:	13 c0       	rjmp	.+38     	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    8696:	89 81       	ldd	r24, Y+1	; 0x01
    8698:	9a 81       	ldd	r25, Y+2	; 0x02
    869a:	80 3a       	cpi	r24, 0xA0	; 160
    869c:	94 40       	sbci	r25, 0x04	; 4
    869e:	29 f4       	brne	.+10     	; 0x86aa <sysclk_enable_peripheral_clock+0x312>
    86a0:	60 e4       	ldi	r22, 0x40	; 64
    86a2:	85 e0       	ldi	r24, 0x05	; 5
    86a4:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    86a8:	09 c0       	rjmp	.+18     	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    86aa:	89 81       	ldd	r24, Y+1	; 0x01
    86ac:	9a 81       	ldd	r25, Y+2	; 0x02
    86ae:	80 3b       	cpi	r24, 0xB0	; 176
    86b0:	94 40       	sbci	r25, 0x04	; 4
    86b2:	21 f4       	brne	.+8      	; 0x86bc <sysclk_enable_peripheral_clock+0x324>
    86b4:	60 e4       	ldi	r22, 0x40	; 64
    86b6:	86 e0       	ldi	r24, 0x06	; 6
    86b8:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    86bc:	00 00       	nop
    86be:	0f 90       	pop	r0
    86c0:	0f 90       	pop	r0
    86c2:	df 91       	pop	r29
    86c4:	cf 91       	pop	r28
    86c6:	08 95       	ret

000086c8 <usart_init_rs232>:
    86c8:	0f 93       	push	r16
    86ca:	1f 93       	push	r17
    86cc:	cf 93       	push	r28
    86ce:	df 93       	push	r29
    86d0:	cd b7       	in	r28, 0x3d	; 61
    86d2:	de b7       	in	r29, 0x3e	; 62
    86d4:	25 97       	sbiw	r28, 0x05	; 5
    86d6:	cd bf       	out	0x3d, r28	; 61
    86d8:	de bf       	out	0x3e, r29	; 62
    86da:	8a 83       	std	Y+2, r24	; 0x02
    86dc:	9b 83       	std	Y+3, r25	; 0x03
    86de:	6c 83       	std	Y+4, r22	; 0x04
    86e0:	7d 83       	std	Y+5, r23	; 0x05
    86e2:	8a 81       	ldd	r24, Y+2	; 0x02
    86e4:	9b 81       	ldd	r25, Y+3	; 0x03
    86e6:	58 de       	rcall	.-848    	; 0x8398 <sysclk_enable_peripheral_clock>
    86e8:	8a 81       	ldd	r24, Y+2	; 0x02
    86ea:	9b 81       	ldd	r25, Y+3	; 0x03
    86ec:	60 e0       	ldi	r22, 0x00	; 0
    86ee:	c6 dd       	rcall	.-1140   	; 0x827c <usart_set_mode>
    86f0:	8c 81       	ldd	r24, Y+4	; 0x04
    86f2:	9d 81       	ldd	r25, Y+5	; 0x05
    86f4:	fc 01       	movw	r30, r24
    86f6:	26 81       	ldd	r18, Z+6	; 0x06
    86f8:	8c 81       	ldd	r24, Y+4	; 0x04
    86fa:	9d 81       	ldd	r25, Y+5	; 0x05
    86fc:	fc 01       	movw	r30, r24
    86fe:	45 81       	ldd	r20, Z+5	; 0x05
    8700:	8c 81       	ldd	r24, Y+4	; 0x04
    8702:	9d 81       	ldd	r25, Y+5	; 0x05
    8704:	fc 01       	movw	r30, r24
    8706:	34 81       	ldd	r19, Z+4	; 0x04
    8708:	8a 81       	ldd	r24, Y+2	; 0x02
    870a:	9b 81       	ldd	r25, Y+3	; 0x03
    870c:	63 2f       	mov	r22, r19
    870e:	7b dd       	rcall	.-1290   	; 0x8206 <usart_format_set>
    8710:	37 de       	rcall	.-914    	; 0x8380 <sysclk_get_per_hz>
    8712:	9b 01       	movw	r18, r22
    8714:	ac 01       	movw	r20, r24
    8716:	8c 81       	ldd	r24, Y+4	; 0x04
    8718:	9d 81       	ldd	r25, Y+5	; 0x05
    871a:	fc 01       	movw	r30, r24
    871c:	80 81       	ld	r24, Z
    871e:	91 81       	ldd	r25, Z+1	; 0x01
    8720:	a2 81       	ldd	r26, Z+2	; 0x02
    8722:	b3 81       	ldd	r27, Z+3	; 0x03
    8724:	ea 81       	ldd	r30, Y+2	; 0x02
    8726:	fb 81       	ldd	r31, Y+3	; 0x03
    8728:	89 01       	movw	r16, r18
    872a:	9a 01       	movw	r18, r20
    872c:	ac 01       	movw	r20, r24
    872e:	bd 01       	movw	r22, r26
    8730:	cf 01       	movw	r24, r30
    8732:	48 d0       	rcall	.+144    	; 0x87c4 <usart_set_baudrate>
    8734:	89 83       	std	Y+1, r24	; 0x01
    8736:	8a 81       	ldd	r24, Y+2	; 0x02
    8738:	9b 81       	ldd	r25, Y+3	; 0x03
    873a:	88 dd       	rcall	.-1264   	; 0x824c <usart_tx_enable>
    873c:	8a 81       	ldd	r24, Y+2	; 0x02
    873e:	9b 81       	ldd	r25, Y+3	; 0x03
    8740:	4a dd       	rcall	.-1388   	; 0x81d6 <usart_rx_enable>
    8742:	89 81       	ldd	r24, Y+1	; 0x01
    8744:	25 96       	adiw	r28, 0x05	; 5
    8746:	cd bf       	out	0x3d, r28	; 61
    8748:	de bf       	out	0x3e, r29	; 62
    874a:	df 91       	pop	r29
    874c:	cf 91       	pop	r28
    874e:	1f 91       	pop	r17
    8750:	0f 91       	pop	r16
    8752:	08 95       	ret

00008754 <usart_putchar>:
    8754:	cf 93       	push	r28
    8756:	df 93       	push	r29
    8758:	00 d0       	rcall	.+0      	; 0x875a <usart_putchar+0x6>
    875a:	cd b7       	in	r28, 0x3d	; 61
    875c:	de b7       	in	r29, 0x3e	; 62
    875e:	89 83       	std	Y+1, r24	; 0x01
    8760:	9a 83       	std	Y+2, r25	; 0x02
    8762:	6b 83       	std	Y+3, r22	; 0x03
    8764:	00 00       	nop
    8766:	89 81       	ldd	r24, Y+1	; 0x01
    8768:	9a 81       	ldd	r25, Y+2	; 0x02
    876a:	a4 dd       	rcall	.-1208   	; 0x82b4 <usart_data_register_is_empty>
    876c:	98 2f       	mov	r25, r24
    876e:	81 e0       	ldi	r24, 0x01	; 1
    8770:	89 27       	eor	r24, r25
    8772:	88 23       	and	r24, r24
    8774:	c1 f7       	brne	.-16     	; 0x8766 <usart_putchar+0x12>
    8776:	89 81       	ldd	r24, Y+1	; 0x01
    8778:	9a 81       	ldd	r25, Y+2	; 0x02
    877a:	2b 81       	ldd	r18, Y+3	; 0x03
    877c:	fc 01       	movw	r30, r24
    877e:	20 83       	st	Z, r18
    8780:	80 e0       	ldi	r24, 0x00	; 0
    8782:	90 e0       	ldi	r25, 0x00	; 0
    8784:	23 96       	adiw	r28, 0x03	; 3
    8786:	cd bf       	out	0x3d, r28	; 61
    8788:	de bf       	out	0x3e, r29	; 62
    878a:	df 91       	pop	r29
    878c:	cf 91       	pop	r28
    878e:	08 95       	ret

00008790 <usart_getchar>:
    8790:	cf 93       	push	r28
    8792:	df 93       	push	r29
    8794:	1f 92       	push	r1
    8796:	1f 92       	push	r1
    8798:	cd b7       	in	r28, 0x3d	; 61
    879a:	de b7       	in	r29, 0x3e	; 62
    879c:	89 83       	std	Y+1, r24	; 0x01
    879e:	9a 83       	std	Y+2, r25	; 0x02
    87a0:	00 00       	nop
    87a2:	89 81       	ldd	r24, Y+1	; 0x01
    87a4:	9a 81       	ldd	r25, Y+2	; 0x02
    87a6:	a0 dd       	rcall	.-1216   	; 0x82e8 <usart_rx_is_complete>
    87a8:	98 2f       	mov	r25, r24
    87aa:	81 e0       	ldi	r24, 0x01	; 1
    87ac:	89 27       	eor	r24, r25
    87ae:	88 23       	and	r24, r24
    87b0:	c1 f7       	brne	.-16     	; 0x87a2 <usart_getchar+0x12>
    87b2:	89 81       	ldd	r24, Y+1	; 0x01
    87b4:	9a 81       	ldd	r25, Y+2	; 0x02
    87b6:	fc 01       	movw	r30, r24
    87b8:	80 81       	ld	r24, Z
    87ba:	0f 90       	pop	r0
    87bc:	0f 90       	pop	r0
    87be:	df 91       	pop	r29
    87c0:	cf 91       	pop	r28
    87c2:	08 95       	ret

000087c4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    87c4:	ef 92       	push	r14
    87c6:	ff 92       	push	r15
    87c8:	0f 93       	push	r16
    87ca:	1f 93       	push	r17
    87cc:	cf 93       	push	r28
    87ce:	df 93       	push	r29
    87d0:	cd b7       	in	r28, 0x3d	; 61
    87d2:	de b7       	in	r29, 0x3e	; 62
    87d4:	6f 97       	sbiw	r28, 0x1f	; 31
    87d6:	cd bf       	out	0x3d, r28	; 61
    87d8:	de bf       	out	0x3e, r29	; 62
    87da:	8e 8b       	std	Y+22, r24	; 0x16
    87dc:	9f 8b       	std	Y+23, r25	; 0x17
    87de:	48 8f       	std	Y+24, r20	; 0x18
    87e0:	59 8f       	std	Y+25, r21	; 0x19
    87e2:	6a 8f       	std	Y+26, r22	; 0x1a
    87e4:	7b 8f       	std	Y+27, r23	; 0x1b
    87e6:	0c 8f       	std	Y+28, r16	; 0x1c
    87e8:	1d 8f       	std	Y+29, r17	; 0x1d
    87ea:	2e 8f       	std	Y+30, r18	; 0x1e
    87ec:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    87ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    87f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    87f2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    87f4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    87f6:	68 94       	set
    87f8:	12 f8       	bld	r1, 2
    87fa:	b6 95       	lsr	r27
    87fc:	a7 95       	ror	r26
    87fe:	97 95       	ror	r25
    8800:	87 95       	ror	r24
    8802:	16 94       	lsr	r1
    8804:	d1 f7       	brne	.-12     	; 0x87fa <usart_set_baudrate+0x36>
    8806:	8e 87       	std	Y+14, r24	; 0x0e
    8808:	9f 87       	std	Y+15, r25	; 0x0f
    880a:	a8 8b       	std	Y+16, r26	; 0x10
    880c:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    880e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8810:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8812:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8814:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8816:	07 2e       	mov	r0, r23
    8818:	76 e1       	ldi	r23, 0x16	; 22
    881a:	b6 95       	lsr	r27
    881c:	a7 95       	ror	r26
    881e:	97 95       	ror	r25
    8820:	87 95       	ror	r24
    8822:	7a 95       	dec	r23
    8824:	d1 f7       	brne	.-12     	; 0x881a <usart_set_baudrate+0x56>
    8826:	70 2d       	mov	r23, r0
    8828:	8a 87       	std	Y+10, r24	; 0x0a
    882a:	9b 87       	std	Y+11, r25	; 0x0b
    882c:	ac 87       	std	Y+12, r26	; 0x0c
    882e:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    8830:	8e 89       	ldd	r24, Y+22	; 0x16
    8832:	9f 89       	ldd	r25, Y+23	; 0x17
    8834:	fc 01       	movw	r30, r24
    8836:	84 81       	ldd	r24, Z+4	; 0x04
    8838:	88 2f       	mov	r24, r24
    883a:	90 e0       	ldi	r25, 0x00	; 0
    883c:	84 70       	andi	r24, 0x04	; 4
    883e:	99 27       	eor	r25, r25
    8840:	89 2b       	or	r24, r25
    8842:	c1 f4       	brne	.+48     	; 0x8874 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    8844:	8e 85       	ldd	r24, Y+14	; 0x0e
    8846:	9f 85       	ldd	r25, Y+15	; 0x0f
    8848:	a8 89       	ldd	r26, Y+16	; 0x10
    884a:	b9 89       	ldd	r27, Y+17	; 0x11
    884c:	b6 95       	lsr	r27
    884e:	a7 95       	ror	r26
    8850:	97 95       	ror	r25
    8852:	87 95       	ror	r24
    8854:	8e 87       	std	Y+14, r24	; 0x0e
    8856:	9f 87       	std	Y+15, r25	; 0x0f
    8858:	a8 8b       	std	Y+16, r26	; 0x10
    885a:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    885c:	8a 85       	ldd	r24, Y+10	; 0x0a
    885e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8860:	ac 85       	ldd	r26, Y+12	; 0x0c
    8862:	bd 85       	ldd	r27, Y+13	; 0x0d
    8864:	b6 95       	lsr	r27
    8866:	a7 95       	ror	r26
    8868:	97 95       	ror	r25
    886a:	87 95       	ror	r24
    886c:	8a 87       	std	Y+10, r24	; 0x0a
    886e:	9b 87       	std	Y+11, r25	; 0x0b
    8870:	ac 87       	std	Y+12, r26	; 0x0c
    8872:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    8874:	28 8d       	ldd	r18, Y+24	; 0x18
    8876:	39 8d       	ldd	r19, Y+25	; 0x19
    8878:	4a 8d       	ldd	r20, Y+26	; 0x1a
    887a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    887c:	8e 85       	ldd	r24, Y+14	; 0x0e
    887e:	9f 85       	ldd	r25, Y+15	; 0x0f
    8880:	a8 89       	ldd	r26, Y+16	; 0x10
    8882:	b9 89       	ldd	r27, Y+17	; 0x11
    8884:	82 17       	cp	r24, r18
    8886:	93 07       	cpc	r25, r19
    8888:	a4 07       	cpc	r26, r20
    888a:	b5 07       	cpc	r27, r21
    888c:	68 f0       	brcs	.+26     	; 0x88a8 <usart_set_baudrate+0xe4>
    888e:	28 8d       	ldd	r18, Y+24	; 0x18
    8890:	39 8d       	ldd	r19, Y+25	; 0x19
    8892:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8894:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8896:	8a 85       	ldd	r24, Y+10	; 0x0a
    8898:	9b 85       	ldd	r25, Y+11	; 0x0b
    889a:	ac 85       	ldd	r26, Y+12	; 0x0c
    889c:	bd 85       	ldd	r27, Y+13	; 0x0d
    889e:	28 17       	cp	r18, r24
    88a0:	39 07       	cpc	r19, r25
    88a2:	4a 07       	cpc	r20, r26
    88a4:	5b 07       	cpc	r21, r27
    88a6:	10 f4       	brcc	.+4      	; 0x88ac <usart_set_baudrate+0xe8>
		return false;
    88a8:	80 e0       	ldi	r24, 0x00	; 0
    88aa:	40 c1       	rjmp	.+640    	; 0x8b2c <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    88ac:	8e 89       	ldd	r24, Y+22	; 0x16
    88ae:	9f 89       	ldd	r25, Y+23	; 0x17
    88b0:	fc 01       	movw	r30, r24
    88b2:	84 81       	ldd	r24, Z+4	; 0x04
    88b4:	88 2f       	mov	r24, r24
    88b6:	90 e0       	ldi	r25, 0x00	; 0
    88b8:	84 70       	andi	r24, 0x04	; 4
    88ba:	99 27       	eor	r25, r25
    88bc:	89 2b       	or	r24, r25
    88be:	61 f4       	brne	.+24     	; 0x88d8 <usart_set_baudrate+0x114>
		baud *= 2;
    88c0:	88 8d       	ldd	r24, Y+24	; 0x18
    88c2:	99 8d       	ldd	r25, Y+25	; 0x19
    88c4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    88c6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    88c8:	88 0f       	add	r24, r24
    88ca:	99 1f       	adc	r25, r25
    88cc:	aa 1f       	adc	r26, r26
    88ce:	bb 1f       	adc	r27, r27
    88d0:	88 8f       	std	Y+24, r24	; 0x18
    88d2:	99 8f       	std	Y+25, r25	; 0x19
    88d4:	aa 8f       	std	Y+26, r26	; 0x1a
    88d6:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    88d8:	8f ef       	ldi	r24, 0xFF	; 255
    88da:	90 e0       	ldi	r25, 0x00	; 0
    88dc:	a0 e0       	ldi	r26, 0x00	; 0
    88de:	b0 e0       	ldi	r27, 0x00	; 0
    88e0:	8e 83       	std	Y+6, r24	; 0x06
    88e2:	9f 83       	std	Y+7, r25	; 0x07
    88e4:	a8 87       	std	Y+8, r26	; 0x08
    88e6:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    88e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    88ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    88ec:	ae 8d       	ldd	r26, Y+30	; 0x1e
    88ee:	bf 8d       	ldd	r27, Y+31	; 0x1f
    88f0:	28 8d       	ldd	r18, Y+24	; 0x18
    88f2:	39 8d       	ldd	r19, Y+25	; 0x19
    88f4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    88f6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    88f8:	bc 01       	movw	r22, r24
    88fa:	cd 01       	movw	r24, r26
    88fc:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <__udivmodsi4>
    8900:	da 01       	movw	r26, r20
    8902:	c9 01       	movw	r24, r18
    8904:	8a 8b       	std	Y+18, r24	; 0x12
    8906:	9b 8b       	std	Y+19, r25	; 0x13
    8908:	ac 8b       	std	Y+20, r26	; 0x14
    890a:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    890c:	89 ef       	ldi	r24, 0xF9	; 249
    890e:	89 83       	std	Y+1, r24	; 0x01
    8910:	28 c0       	rjmp	.+80     	; 0x8962 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    8912:	2a 89       	ldd	r18, Y+18	; 0x12
    8914:	3b 89       	ldd	r19, Y+19	; 0x13
    8916:	4c 89       	ldd	r20, Y+20	; 0x14
    8918:	5d 89       	ldd	r21, Y+21	; 0x15
    891a:	8e 81       	ldd	r24, Y+6	; 0x06
    891c:	9f 81       	ldd	r25, Y+7	; 0x07
    891e:	a8 85       	ldd	r26, Y+8	; 0x08
    8920:	b9 85       	ldd	r27, Y+9	; 0x09
    8922:	28 17       	cp	r18, r24
    8924:	39 07       	cpc	r19, r25
    8926:	4a 07       	cpc	r20, r26
    8928:	5b 07       	cpc	r21, r27
    892a:	f8 f0       	brcs	.+62     	; 0x896a <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    892c:	8e 81       	ldd	r24, Y+6	; 0x06
    892e:	9f 81       	ldd	r25, Y+7	; 0x07
    8930:	a8 85       	ldd	r26, Y+8	; 0x08
    8932:	b9 85       	ldd	r27, Y+9	; 0x09
    8934:	88 0f       	add	r24, r24
    8936:	99 1f       	adc	r25, r25
    8938:	aa 1f       	adc	r26, r26
    893a:	bb 1f       	adc	r27, r27
    893c:	8e 83       	std	Y+6, r24	; 0x06
    893e:	9f 83       	std	Y+7, r25	; 0x07
    8940:	a8 87       	std	Y+8, r26	; 0x08
    8942:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    8944:	89 81       	ldd	r24, Y+1	; 0x01
    8946:	8d 3f       	cpi	r24, 0xFD	; 253
    8948:	4c f4       	brge	.+18     	; 0x895c <usart_set_baudrate+0x198>
			limit |= 1;
    894a:	8e 81       	ldd	r24, Y+6	; 0x06
    894c:	9f 81       	ldd	r25, Y+7	; 0x07
    894e:	a8 85       	ldd	r26, Y+8	; 0x08
    8950:	b9 85       	ldd	r27, Y+9	; 0x09
    8952:	81 60       	ori	r24, 0x01	; 1
    8954:	8e 83       	std	Y+6, r24	; 0x06
    8956:	9f 83       	std	Y+7, r25	; 0x07
    8958:	a8 87       	std	Y+8, r26	; 0x08
    895a:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    895c:	89 81       	ldd	r24, Y+1	; 0x01
    895e:	8f 5f       	subi	r24, 0xFF	; 255
    8960:	89 83       	std	Y+1, r24	; 0x01
    8962:	89 81       	ldd	r24, Y+1	; 0x01
    8964:	87 30       	cpi	r24, 0x07	; 7
    8966:	ac f2       	brlt	.-86     	; 0x8912 <usart_set_baudrate+0x14e>
    8968:	01 c0       	rjmp	.+2      	; 0x896c <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    896a:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    896c:	89 81       	ldd	r24, Y+1	; 0x01
    896e:	88 23       	and	r24, r24
    8970:	0c f0       	brlt	.+2      	; 0x8974 <usart_set_baudrate+0x1b0>
    8972:	8a c0       	rjmp	.+276    	; 0x8a88 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    8974:	88 8d       	ldd	r24, Y+24	; 0x18
    8976:	99 8d       	ldd	r25, Y+25	; 0x19
    8978:	aa 8d       	ldd	r26, Y+26	; 0x1a
    897a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    897c:	88 0f       	add	r24, r24
    897e:	99 1f       	adc	r25, r25
    8980:	aa 1f       	adc	r26, r26
    8982:	bb 1f       	adc	r27, r27
    8984:	88 0f       	add	r24, r24
    8986:	99 1f       	adc	r25, r25
    8988:	aa 1f       	adc	r26, r26
    898a:	bb 1f       	adc	r27, r27
    898c:	88 0f       	add	r24, r24
    898e:	99 1f       	adc	r25, r25
    8990:	aa 1f       	adc	r26, r26
    8992:	bb 1f       	adc	r27, r27
    8994:	9c 01       	movw	r18, r24
    8996:	ad 01       	movw	r20, r26
    8998:	8c 8d       	ldd	r24, Y+28	; 0x1c
    899a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    899c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    899e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    89a0:	82 1b       	sub	r24, r18
    89a2:	93 0b       	sbc	r25, r19
    89a4:	a4 0b       	sbc	r26, r20
    89a6:	b5 0b       	sbc	r27, r21
    89a8:	8c 8f       	std	Y+28, r24	; 0x1c
    89aa:	9d 8f       	std	Y+29, r25	; 0x1d
    89ac:	ae 8f       	std	Y+30, r26	; 0x1e
    89ae:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    89b0:	89 81       	ldd	r24, Y+1	; 0x01
    89b2:	8e 3f       	cpi	r24, 0xFE	; 254
    89b4:	94 f5       	brge	.+100    	; 0x8a1a <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    89b6:	89 81       	ldd	r24, Y+1	; 0x01
    89b8:	08 2e       	mov	r0, r24
    89ba:	00 0c       	add	r0, r0
    89bc:	99 0b       	sbc	r25, r25
    89be:	2d ef       	ldi	r18, 0xFD	; 253
    89c0:	3f ef       	ldi	r19, 0xFF	; 255
    89c2:	28 1b       	sub	r18, r24
    89c4:	39 0b       	sbc	r19, r25
    89c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    89c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    89ca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    89cc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    89ce:	7c 01       	movw	r14, r24
    89d0:	8d 01       	movw	r16, r26
    89d2:	04 c0       	rjmp	.+8      	; 0x89dc <usart_set_baudrate+0x218>
    89d4:	ee 0c       	add	r14, r14
    89d6:	ff 1c       	adc	r15, r15
    89d8:	00 1f       	adc	r16, r16
    89da:	11 1f       	adc	r17, r17
    89dc:	2a 95       	dec	r18
    89de:	d2 f7       	brpl	.-12     	; 0x89d4 <usart_set_baudrate+0x210>
    89e0:	a8 01       	movw	r20, r16
    89e2:	97 01       	movw	r18, r14
    89e4:	88 8d       	ldd	r24, Y+24	; 0x18
    89e6:	99 8d       	ldd	r25, Y+25	; 0x19
    89e8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    89ea:	bb 8d       	ldd	r27, Y+27	; 0x1b
    89ec:	b6 95       	lsr	r27
    89ee:	a7 95       	ror	r26
    89f0:	97 95       	ror	r25
    89f2:	87 95       	ror	r24
    89f4:	82 0f       	add	r24, r18
    89f6:	93 1f       	adc	r25, r19
    89f8:	a4 1f       	adc	r26, r20
    89fa:	b5 1f       	adc	r27, r21
    89fc:	28 8d       	ldd	r18, Y+24	; 0x18
    89fe:	39 8d       	ldd	r19, Y+25	; 0x19
    8a00:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8a02:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8a04:	bc 01       	movw	r22, r24
    8a06:	cd 01       	movw	r24, r26
    8a08:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <__udivmodsi4>
    8a0c:	da 01       	movw	r26, r20
    8a0e:	c9 01       	movw	r24, r18
    8a10:	8a 83       	std	Y+2, r24	; 0x02
    8a12:	9b 83       	std	Y+3, r25	; 0x03
    8a14:	ac 83       	std	Y+4, r26	; 0x04
    8a16:	bd 83       	std	Y+5, r27	; 0x05
    8a18:	70 c0       	rjmp	.+224    	; 0x8afa <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    8a1a:	89 81       	ldd	r24, Y+1	; 0x01
    8a1c:	08 2e       	mov	r0, r24
    8a1e:	00 0c       	add	r0, r0
    8a20:	99 0b       	sbc	r25, r25
    8a22:	9c 01       	movw	r18, r24
    8a24:	2d 5f       	subi	r18, 0xFD	; 253
    8a26:	3f 4f       	sbci	r19, 0xFF	; 255
    8a28:	88 8d       	ldd	r24, Y+24	; 0x18
    8a2a:	99 8d       	ldd	r25, Y+25	; 0x19
    8a2c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8a2e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8a30:	04 c0       	rjmp	.+8      	; 0x8a3a <usart_set_baudrate+0x276>
    8a32:	88 0f       	add	r24, r24
    8a34:	99 1f       	adc	r25, r25
    8a36:	aa 1f       	adc	r26, r26
    8a38:	bb 1f       	adc	r27, r27
    8a3a:	2a 95       	dec	r18
    8a3c:	d2 f7       	brpl	.-12     	; 0x8a32 <usart_set_baudrate+0x26e>
    8a3e:	88 8f       	std	Y+24, r24	; 0x18
    8a40:	99 8f       	std	Y+25, r25	; 0x19
    8a42:	aa 8f       	std	Y+26, r26	; 0x1a
    8a44:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    8a46:	88 8d       	ldd	r24, Y+24	; 0x18
    8a48:	99 8d       	ldd	r25, Y+25	; 0x19
    8a4a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8a4c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8a4e:	9c 01       	movw	r18, r24
    8a50:	ad 01       	movw	r20, r26
    8a52:	56 95       	lsr	r21
    8a54:	47 95       	ror	r20
    8a56:	37 95       	ror	r19
    8a58:	27 95       	ror	r18
    8a5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8a5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8a5e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8a60:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8a62:	82 0f       	add	r24, r18
    8a64:	93 1f       	adc	r25, r19
    8a66:	a4 1f       	adc	r26, r20
    8a68:	b5 1f       	adc	r27, r21
    8a6a:	28 8d       	ldd	r18, Y+24	; 0x18
    8a6c:	39 8d       	ldd	r19, Y+25	; 0x19
    8a6e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8a70:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8a72:	bc 01       	movw	r22, r24
    8a74:	cd 01       	movw	r24, r26
    8a76:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <__udivmodsi4>
    8a7a:	da 01       	movw	r26, r20
    8a7c:	c9 01       	movw	r24, r18
    8a7e:	8a 83       	std	Y+2, r24	; 0x02
    8a80:	9b 83       	std	Y+3, r25	; 0x03
    8a82:	ac 83       	std	Y+4, r26	; 0x04
    8a84:	bd 83       	std	Y+5, r27	; 0x05
    8a86:	39 c0       	rjmp	.+114    	; 0x8afa <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    8a88:	89 81       	ldd	r24, Y+1	; 0x01
    8a8a:	08 2e       	mov	r0, r24
    8a8c:	00 0c       	add	r0, r0
    8a8e:	99 0b       	sbc	r25, r25
    8a90:	9c 01       	movw	r18, r24
    8a92:	2d 5f       	subi	r18, 0xFD	; 253
    8a94:	3f 4f       	sbci	r19, 0xFF	; 255
    8a96:	88 8d       	ldd	r24, Y+24	; 0x18
    8a98:	99 8d       	ldd	r25, Y+25	; 0x19
    8a9a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8a9c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8a9e:	04 c0       	rjmp	.+8      	; 0x8aa8 <usart_set_baudrate+0x2e4>
    8aa0:	88 0f       	add	r24, r24
    8aa2:	99 1f       	adc	r25, r25
    8aa4:	aa 1f       	adc	r26, r26
    8aa6:	bb 1f       	adc	r27, r27
    8aa8:	2a 95       	dec	r18
    8aaa:	d2 f7       	brpl	.-12     	; 0x8aa0 <usart_set_baudrate+0x2dc>
    8aac:	88 8f       	std	Y+24, r24	; 0x18
    8aae:	99 8f       	std	Y+25, r25	; 0x19
    8ab0:	aa 8f       	std	Y+26, r26	; 0x1a
    8ab2:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    8ab4:	88 8d       	ldd	r24, Y+24	; 0x18
    8ab6:	99 8d       	ldd	r25, Y+25	; 0x19
    8ab8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8aba:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8abc:	9c 01       	movw	r18, r24
    8abe:	ad 01       	movw	r20, r26
    8ac0:	56 95       	lsr	r21
    8ac2:	47 95       	ror	r20
    8ac4:	37 95       	ror	r19
    8ac6:	27 95       	ror	r18
    8ac8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8aca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8acc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8ace:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8ad0:	82 0f       	add	r24, r18
    8ad2:	93 1f       	adc	r25, r19
    8ad4:	a4 1f       	adc	r26, r20
    8ad6:	b5 1f       	adc	r27, r21
    8ad8:	28 8d       	ldd	r18, Y+24	; 0x18
    8ada:	39 8d       	ldd	r19, Y+25	; 0x19
    8adc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8ade:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8ae0:	bc 01       	movw	r22, r24
    8ae2:	cd 01       	movw	r24, r26
    8ae4:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <__udivmodsi4>
    8ae8:	da 01       	movw	r26, r20
    8aea:	c9 01       	movw	r24, r18
    8aec:	01 97       	sbiw	r24, 0x01	; 1
    8aee:	a1 09       	sbc	r26, r1
    8af0:	b1 09       	sbc	r27, r1
    8af2:	8a 83       	std	Y+2, r24	; 0x02
    8af4:	9b 83       	std	Y+3, r25	; 0x03
    8af6:	ac 83       	std	Y+4, r26	; 0x04
    8af8:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    8afa:	8a 81       	ldd	r24, Y+2	; 0x02
    8afc:	9b 81       	ldd	r25, Y+3	; 0x03
    8afe:	ac 81       	ldd	r26, Y+4	; 0x04
    8b00:	bd 81       	ldd	r27, Y+5	; 0x05
    8b02:	89 2f       	mov	r24, r25
    8b04:	9a 2f       	mov	r25, r26
    8b06:	ab 2f       	mov	r26, r27
    8b08:	bb 27       	eor	r27, r27
    8b0a:	98 2f       	mov	r25, r24
    8b0c:	9f 70       	andi	r25, 0x0F	; 15
    8b0e:	89 81       	ldd	r24, Y+1	; 0x01
    8b10:	82 95       	swap	r24
    8b12:	80 7f       	andi	r24, 0xF0	; 240
    8b14:	29 2f       	mov	r18, r25
    8b16:	28 2b       	or	r18, r24
    8b18:	8e 89       	ldd	r24, Y+22	; 0x16
    8b1a:	9f 89       	ldd	r25, Y+23	; 0x17
    8b1c:	fc 01       	movw	r30, r24
    8b1e:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    8b20:	2a 81       	ldd	r18, Y+2	; 0x02
    8b22:	8e 89       	ldd	r24, Y+22	; 0x16
    8b24:	9f 89       	ldd	r25, Y+23	; 0x17
    8b26:	fc 01       	movw	r30, r24
    8b28:	26 83       	std	Z+6, r18	; 0x06

	return true;
    8b2a:	81 e0       	ldi	r24, 0x01	; 1
}
    8b2c:	6f 96       	adiw	r28, 0x1f	; 31
    8b2e:	cd bf       	out	0x3d, r28	; 61
    8b30:	de bf       	out	0x3e, r29	; 62
    8b32:	df 91       	pop	r29
    8b34:	cf 91       	pop	r28
    8b36:	1f 91       	pop	r17
    8b38:	0f 91       	pop	r16
    8b3a:	ff 90       	pop	r15
    8b3c:	ef 90       	pop	r14
    8b3e:	08 95       	ret

00008b40 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    8b40:	cf 93       	push	r28
    8b42:	df 93       	push	r29
    8b44:	00 d0       	rcall	.+0      	; 0x8b46 <ioport_configure_port_pin+0x6>
    8b46:	00 d0       	rcall	.+0      	; 0x8b48 <ioport_configure_port_pin+0x8>
    8b48:	cd b7       	in	r28, 0x3d	; 61
    8b4a:	de b7       	in	r29, 0x3e	; 62
    8b4c:	8a 83       	std	Y+2, r24	; 0x02
    8b4e:	9b 83       	std	Y+3, r25	; 0x03
    8b50:	6c 83       	std	Y+4, r22	; 0x04
    8b52:	4d 83       	std	Y+5, r20	; 0x05
    8b54:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    8b56:	19 82       	std	Y+1, r1	; 0x01
    8b58:	20 c0       	rjmp	.+64     	; 0x8b9a <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    8b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    8b5c:	88 2f       	mov	r24, r24
    8b5e:	90 e0       	ldi	r25, 0x00	; 0
    8b60:	29 81       	ldd	r18, Y+1	; 0x01
    8b62:	22 2f       	mov	r18, r18
    8b64:	30 e0       	ldi	r19, 0x00	; 0
    8b66:	02 c0       	rjmp	.+4      	; 0x8b6c <ioport_configure_port_pin+0x2c>
    8b68:	95 95       	asr	r25
    8b6a:	87 95       	ror	r24
    8b6c:	2a 95       	dec	r18
    8b6e:	e2 f7       	brpl	.-8      	; 0x8b68 <ioport_configure_port_pin+0x28>
    8b70:	81 70       	andi	r24, 0x01	; 1
    8b72:	99 27       	eor	r25, r25
    8b74:	89 2b       	or	r24, r25
    8b76:	71 f0       	breq	.+28     	; 0x8b94 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    8b78:	89 81       	ldd	r24, Y+1	; 0x01
    8b7a:	88 2f       	mov	r24, r24
    8b7c:	90 e0       	ldi	r25, 0x00	; 0
    8b7e:	40 96       	adiw	r24, 0x10	; 16
    8b80:	2a 81       	ldd	r18, Y+2	; 0x02
    8b82:	3b 81       	ldd	r19, Y+3	; 0x03
    8b84:	82 0f       	add	r24, r18
    8b86:	93 1f       	adc	r25, r19
    8b88:	2d 81       	ldd	r18, Y+5	; 0x05
    8b8a:	3e 81       	ldd	r19, Y+6	; 0x06
    8b8c:	23 2f       	mov	r18, r19
    8b8e:	33 27       	eor	r19, r19
    8b90:	fc 01       	movw	r30, r24
    8b92:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    8b94:	89 81       	ldd	r24, Y+1	; 0x01
    8b96:	8f 5f       	subi	r24, 0xFF	; 255
    8b98:	89 83       	std	Y+1, r24	; 0x01
    8b9a:	89 81       	ldd	r24, Y+1	; 0x01
    8b9c:	88 30       	cpi	r24, 0x08	; 8
    8b9e:	e8 f2       	brcs	.-70     	; 0x8b5a <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    8ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    8ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    8ba4:	81 70       	andi	r24, 0x01	; 1
    8ba6:	99 27       	eor	r25, r25
    8ba8:	89 2b       	or	r24, r25
    8baa:	d1 f0       	breq	.+52     	; 0x8be0 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    8bac:	8d 81       	ldd	r24, Y+5	; 0x05
    8bae:	9e 81       	ldd	r25, Y+6	; 0x06
    8bb0:	82 70       	andi	r24, 0x02	; 2
    8bb2:	99 27       	eor	r25, r25
    8bb4:	89 2b       	or	r24, r25
    8bb6:	39 f0       	breq	.+14     	; 0x8bc6 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    8bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    8bba:	9b 81       	ldd	r25, Y+3	; 0x03
    8bbc:	05 96       	adiw	r24, 0x05	; 5
    8bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    8bc0:	fc 01       	movw	r30, r24
    8bc2:	20 83       	st	Z, r18
    8bc4:	06 c0       	rjmp	.+12     	; 0x8bd2 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    8bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    8bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    8bca:	06 96       	adiw	r24, 0x06	; 6
    8bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    8bce:	fc 01       	movw	r30, r24
    8bd0:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    8bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    8bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    8bd6:	01 96       	adiw	r24, 0x01	; 1
    8bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    8bda:	fc 01       	movw	r30, r24
    8bdc:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    8bde:	06 c0       	rjmp	.+12     	; 0x8bec <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    8be0:	8a 81       	ldd	r24, Y+2	; 0x02
    8be2:	9b 81       	ldd	r25, Y+3	; 0x03
    8be4:	02 96       	adiw	r24, 0x02	; 2
    8be6:	2c 81       	ldd	r18, Y+4	; 0x04
    8be8:	fc 01       	movw	r30, r24
    8bea:	20 83       	st	Z, r18
	}
}
    8bec:	00 00       	nop
    8bee:	26 96       	adiw	r28, 0x06	; 6
    8bf0:	cd bf       	out	0x3d, r28	; 61
    8bf2:	de bf       	out	0x3e, r29	; 62
    8bf4:	df 91       	pop	r29
    8bf6:	cf 91       	pop	r28
    8bf8:	08 95       	ret

00008bfa <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    8bfa:	cf 93       	push	r28
    8bfc:	df 93       	push	r29
    8bfe:	cd b7       	in	r28, 0x3d	; 61
    8c00:	de b7       	in	r29, 0x3e	; 62
    8c02:	27 97       	sbiw	r28, 0x07	; 7
    8c04:	cd bf       	out	0x3d, r28	; 61
    8c06:	de bf       	out	0x3e, r29	; 62
    8c08:	8d 83       	std	Y+5, r24	; 0x05
    8c0a:	6e 83       	std	Y+6, r22	; 0x06
    8c0c:	7f 83       	std	Y+7, r23	; 0x07
    8c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    8c10:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    8c12:	89 81       	ldd	r24, Y+1	; 0x01
    8c14:	88 2f       	mov	r24, r24
    8c16:	90 e0       	ldi	r25, 0x00	; 0
    8c18:	9c 01       	movw	r18, r24
    8c1a:	27 70       	andi	r18, 0x07	; 7
    8c1c:	33 27       	eor	r19, r19
    8c1e:	81 e0       	ldi	r24, 0x01	; 1
    8c20:	90 e0       	ldi	r25, 0x00	; 0
    8c22:	02 c0       	rjmp	.+4      	; 0x8c28 <ioport_configure_pin+0x2e>
    8c24:	88 0f       	add	r24, r24
    8c26:	99 1f       	adc	r25, r25
    8c28:	2a 95       	dec	r18
    8c2a:	e2 f7       	brpl	.-8      	; 0x8c24 <ioport_configure_pin+0x2a>
    8c2c:	68 2f       	mov	r22, r24
    8c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    8c30:	8a 83       	std	Y+2, r24	; 0x02
    8c32:	8a 81       	ldd	r24, Y+2	; 0x02
    8c34:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    8c36:	8b 81       	ldd	r24, Y+3	; 0x03
    8c38:	86 95       	lsr	r24
    8c3a:	86 95       	lsr	r24
    8c3c:	86 95       	lsr	r24
    8c3e:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    8c40:	8c 81       	ldd	r24, Y+4	; 0x04
    8c42:	88 2f       	mov	r24, r24
    8c44:	90 e0       	ldi	r25, 0x00	; 0
    8c46:	88 0f       	add	r24, r24
    8c48:	99 1f       	adc	r25, r25
    8c4a:	82 95       	swap	r24
    8c4c:	92 95       	swap	r25
    8c4e:	90 7f       	andi	r25, 0xF0	; 240
    8c50:	98 27       	eor	r25, r24
    8c52:	80 7f       	andi	r24, 0xF0	; 240
    8c54:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    8c56:	9a 5f       	subi	r25, 0xFA	; 250
    8c58:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    8c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    8c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    8c5e:	ac 01       	movw	r20, r24
    8c60:	c9 01       	movw	r24, r18
    8c62:	6e df       	rcall	.-292    	; 0x8b40 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    8c64:	00 00       	nop
    8c66:	27 96       	adiw	r28, 0x07	; 7
    8c68:	cd bf       	out	0x3d, r28	; 61
    8c6a:	de bf       	out	0x3e, r29	; 62
    8c6c:	df 91       	pop	r29
    8c6e:	cf 91       	pop	r28
    8c70:	08 95       	ret

00008c72 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    8c72:	cf 93       	push	r28
    8c74:	df 93       	push	r29
    8c76:	cd b7       	in	r28, 0x3d	; 61
    8c78:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    8c7a:	63 e0       	ldi	r22, 0x03	; 3
    8c7c:	70 e0       	ldi	r23, 0x00	; 0
    8c7e:	83 e7       	ldi	r24, 0x73	; 115
    8c80:	bc df       	rcall	.-136    	; 0x8bfa <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    8c82:	60 e0       	ldi	r22, 0x00	; 0
    8c84:	78 e1       	ldi	r23, 0x18	; 24
    8c86:	82 e7       	ldi	r24, 0x72	; 114
    8c88:	b8 df       	rcall	.-144    	; 0x8bfa <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    8c8a:	00 00       	nop
    8c8c:	df 91       	pop	r29
    8c8e:	cf 91       	pop	r28
    8c90:	08 95       	ret

00008c92 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device, uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    8c92:	cf 93       	push	r28
    8c94:	df 93       	push	r29
    8c96:	1f 92       	push	r1
    8c98:	1f 92       	push	r1
    8c9a:	cd b7       	in	r28, 0x3d	; 61
    8c9c:	de b7       	in	r29, 0x3e	; 62
    8c9e:	89 83       	std	Y+1, r24	; 0x01
    8ca0:	9a 83       	std	Y+2, r25	; 0x02
    8ca2:	89 81       	ldd	r24, Y+1	; 0x01
    8ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ca6:	89 2b       	or	r24, r25
    8ca8:	09 f4       	brne	.+2      	; 0x8cac <sysclk_enable_peripheral_clock+0x1a>
    8caa:	85 c1       	rjmp	.+778    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8cac:	89 81       	ldd	r24, Y+1	; 0x01
    8cae:	9a 81       	ldd	r25, Y+2	; 0x02
    8cb0:	80 3c       	cpi	r24, 0xC0	; 192
    8cb2:	91 05       	cpc	r25, r1
    8cb4:	29 f4       	brne	.+10     	; 0x8cc0 <sysclk_enable_peripheral_clock+0x2e>
    8cb6:	60 e1       	ldi	r22, 0x10	; 16
    8cb8:	80 e0       	ldi	r24, 0x00	; 0
    8cba:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8cbe:	7b c1       	rjmp	.+758    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8cc0:	89 81       	ldd	r24, Y+1	; 0x01
    8cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    8cc4:	80 34       	cpi	r24, 0x40	; 64
    8cc6:	94 40       	sbci	r25, 0x04	; 4
    8cc8:	29 f4       	brne	.+10     	; 0x8cd4 <sysclk_enable_peripheral_clock+0x42>
    8cca:	68 e0       	ldi	r22, 0x08	; 8
    8ccc:	80 e0       	ldi	r24, 0x00	; 0
    8cce:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8cd2:	71 c1       	rjmp	.+738    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8cd4:	89 81       	ldd	r24, Y+1	; 0x01
    8cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    8cd8:	81 15       	cp	r24, r1
    8cda:	94 40       	sbci	r25, 0x04	; 4
    8cdc:	29 f4       	brne	.+10     	; 0x8ce8 <sysclk_enable_peripheral_clock+0x56>
    8cde:	64 e0       	ldi	r22, 0x04	; 4
    8ce0:	80 e0       	ldi	r24, 0x00	; 0
    8ce2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8ce6:	67 c1       	rjmp	.+718    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8ce8:	89 81       	ldd	r24, Y+1	; 0x01
    8cea:	9a 81       	ldd	r25, Y+2	; 0x02
    8cec:	80 38       	cpi	r24, 0x80	; 128
    8cee:	91 40       	sbci	r25, 0x01	; 1
    8cf0:	29 f4       	brne	.+10     	; 0x8cfc <sysclk_enable_peripheral_clock+0x6a>
    8cf2:	62 e0       	ldi	r22, 0x02	; 2
    8cf4:	80 e0       	ldi	r24, 0x00	; 0
    8cf6:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8cfa:	5d c1       	rjmp	.+698    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8cfc:	89 81       	ldd	r24, Y+1	; 0x01
    8cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    8d00:	81 15       	cp	r24, r1
    8d02:	91 40       	sbci	r25, 0x01	; 1
    8d04:	29 f4       	brne	.+10     	; 0x8d10 <sysclk_enable_peripheral_clock+0x7e>
    8d06:	61 e0       	ldi	r22, 0x01	; 1
    8d08:	80 e0       	ldi	r24, 0x00	; 0
    8d0a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d0e:	53 c1       	rjmp	.+678    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d10:	89 81       	ldd	r24, Y+1	; 0x01
    8d12:	9a 81       	ldd	r25, Y+2	; 0x02
    8d14:	80 38       	cpi	r24, 0x80	; 128
    8d16:	93 40       	sbci	r25, 0x03	; 3
    8d18:	29 f4       	brne	.+10     	; 0x8d24 <sysclk_enable_peripheral_clock+0x92>
    8d1a:	61 e0       	ldi	r22, 0x01	; 1
    8d1c:	81 e0       	ldi	r24, 0x01	; 1
    8d1e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d22:	49 c1       	rjmp	.+658    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d24:	89 81       	ldd	r24, Y+1	; 0x01
    8d26:	9a 81       	ldd	r25, Y+2	; 0x02
    8d28:	80 39       	cpi	r24, 0x90	; 144
    8d2a:	93 40       	sbci	r25, 0x03	; 3
    8d2c:	29 f4       	brne	.+10     	; 0x8d38 <sysclk_enable_peripheral_clock+0xa6>
    8d2e:	61 e0       	ldi	r22, 0x01	; 1
    8d30:	82 e0       	ldi	r24, 0x02	; 2
    8d32:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d36:	3f c1       	rjmp	.+638    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d38:	89 81       	ldd	r24, Y+1	; 0x01
    8d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d3c:	81 15       	cp	r24, r1
    8d3e:	92 40       	sbci	r25, 0x02	; 2
    8d40:	29 f4       	brne	.+10     	; 0x8d4c <sysclk_enable_peripheral_clock+0xba>
    8d42:	62 e0       	ldi	r22, 0x02	; 2
    8d44:	81 e0       	ldi	r24, 0x01	; 1
    8d46:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d4a:	35 c1       	rjmp	.+618    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d4c:	89 81       	ldd	r24, Y+1	; 0x01
    8d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    8d50:	80 34       	cpi	r24, 0x40	; 64
    8d52:	92 40       	sbci	r25, 0x02	; 2
    8d54:	29 f4       	brne	.+10     	; 0x8d60 <sysclk_enable_peripheral_clock+0xce>
    8d56:	62 e0       	ldi	r22, 0x02	; 2
    8d58:	82 e0       	ldi	r24, 0x02	; 2
    8d5a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d5e:	2b c1       	rjmp	.+598    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d60:	89 81       	ldd	r24, Y+1	; 0x01
    8d62:	9a 81       	ldd	r25, Y+2	; 0x02
    8d64:	81 15       	cp	r24, r1
    8d66:	93 40       	sbci	r25, 0x03	; 3
    8d68:	29 f4       	brne	.+10     	; 0x8d74 <sysclk_enable_peripheral_clock+0xe2>
    8d6a:	64 e0       	ldi	r22, 0x04	; 4
    8d6c:	81 e0       	ldi	r24, 0x01	; 1
    8d6e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d72:	21 c1       	rjmp	.+578    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d74:	89 81       	ldd	r24, Y+1	; 0x01
    8d76:	9a 81       	ldd	r25, Y+2	; 0x02
    8d78:	80 32       	cpi	r24, 0x20	; 32
    8d7a:	93 40       	sbci	r25, 0x03	; 3
    8d7c:	29 f4       	brne	.+10     	; 0x8d88 <sysclk_enable_peripheral_clock+0xf6>
    8d7e:	64 e0       	ldi	r22, 0x04	; 4
    8d80:	82 e0       	ldi	r24, 0x02	; 2
    8d82:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d86:	17 c1       	rjmp	.+558    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d88:	89 81       	ldd	r24, Y+1	; 0x01
    8d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d8c:	81 15       	cp	r24, r1
    8d8e:	98 40       	sbci	r25, 0x08	; 8
    8d90:	29 f4       	brne	.+10     	; 0x8d9c <sysclk_enable_peripheral_clock+0x10a>
    8d92:	61 e0       	ldi	r22, 0x01	; 1
    8d94:	83 e0       	ldi	r24, 0x03	; 3
    8d96:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8d9a:	0d c1       	rjmp	.+538    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8d9c:	89 81       	ldd	r24, Y+1	; 0x01
    8d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    8da0:	81 15       	cp	r24, r1
    8da2:	99 40       	sbci	r25, 0x09	; 9
    8da4:	29 f4       	brne	.+10     	; 0x8db0 <sysclk_enable_peripheral_clock+0x11e>
    8da6:	61 e0       	ldi	r22, 0x01	; 1
    8da8:	84 e0       	ldi	r24, 0x04	; 4
    8daa:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8dae:	03 c1       	rjmp	.+518    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8db0:	89 81       	ldd	r24, Y+1	; 0x01
    8db2:	9a 81       	ldd	r25, Y+2	; 0x02
    8db4:	81 15       	cp	r24, r1
    8db6:	9a 40       	sbci	r25, 0x0A	; 10
    8db8:	29 f4       	brne	.+10     	; 0x8dc4 <sysclk_enable_peripheral_clock+0x132>
    8dba:	61 e0       	ldi	r22, 0x01	; 1
    8dbc:	85 e0       	ldi	r24, 0x05	; 5
    8dbe:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8dc2:	f9 c0       	rjmp	.+498    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8dc4:	89 81       	ldd	r24, Y+1	; 0x01
    8dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    8dc8:	81 15       	cp	r24, r1
    8dca:	9b 40       	sbci	r25, 0x0B	; 11
    8dcc:	29 f4       	brne	.+10     	; 0x8dd8 <sysclk_enable_peripheral_clock+0x146>
    8dce:	61 e0       	ldi	r22, 0x01	; 1
    8dd0:	86 e0       	ldi	r24, 0x06	; 6
    8dd2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8dd6:	ef c0       	rjmp	.+478    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8dd8:	89 81       	ldd	r24, Y+1	; 0x01
    8dda:	9a 81       	ldd	r25, Y+2	; 0x02
    8ddc:	80 34       	cpi	r24, 0x40	; 64
    8dde:	98 40       	sbci	r25, 0x08	; 8
    8de0:	29 f4       	brne	.+10     	; 0x8dec <sysclk_enable_peripheral_clock+0x15a>
    8de2:	62 e0       	ldi	r22, 0x02	; 2
    8de4:	83 e0       	ldi	r24, 0x03	; 3
    8de6:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8dea:	e5 c0       	rjmp	.+458    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8dec:	89 81       	ldd	r24, Y+1	; 0x01
    8dee:	9a 81       	ldd	r25, Y+2	; 0x02
    8df0:	80 34       	cpi	r24, 0x40	; 64
    8df2:	99 40       	sbci	r25, 0x09	; 9
    8df4:	29 f4       	brne	.+10     	; 0x8e00 <sysclk_enable_peripheral_clock+0x16e>
    8df6:	62 e0       	ldi	r22, 0x02	; 2
    8df8:	84 e0       	ldi	r24, 0x04	; 4
    8dfa:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8dfe:	db c0       	rjmp	.+438    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e00:	89 81       	ldd	r24, Y+1	; 0x01
    8e02:	9a 81       	ldd	r25, Y+2	; 0x02
    8e04:	80 34       	cpi	r24, 0x40	; 64
    8e06:	9a 40       	sbci	r25, 0x0A	; 10
    8e08:	29 f4       	brne	.+10     	; 0x8e14 <sysclk_enable_peripheral_clock+0x182>
    8e0a:	62 e0       	ldi	r22, 0x02	; 2
    8e0c:	85 e0       	ldi	r24, 0x05	; 5
    8e0e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e12:	d1 c0       	rjmp	.+418    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e14:	89 81       	ldd	r24, Y+1	; 0x01
    8e16:	9a 81       	ldd	r25, Y+2	; 0x02
    8e18:	80 34       	cpi	r24, 0x40	; 64
    8e1a:	9b 40       	sbci	r25, 0x0B	; 11
    8e1c:	29 f4       	brne	.+10     	; 0x8e28 <sysclk_enable_peripheral_clock+0x196>
    8e1e:	62 e0       	ldi	r22, 0x02	; 2
    8e20:	86 e0       	ldi	r24, 0x06	; 6
    8e22:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e26:	c7 c0       	rjmp	.+398    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e28:	89 81       	ldd	r24, Y+1	; 0x01
    8e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    8e2c:	80 39       	cpi	r24, 0x90	; 144
    8e2e:	98 40       	sbci	r25, 0x08	; 8
    8e30:	29 f4       	brne	.+10     	; 0x8e3c <sysclk_enable_peripheral_clock+0x1aa>
    8e32:	64 e0       	ldi	r22, 0x04	; 4
    8e34:	83 e0       	ldi	r24, 0x03	; 3
    8e36:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e3a:	bd c0       	rjmp	.+378    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e3c:	89 81       	ldd	r24, Y+1	; 0x01
    8e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    8e40:	80 39       	cpi	r24, 0x90	; 144
    8e42:	99 40       	sbci	r25, 0x09	; 9
    8e44:	29 f4       	brne	.+10     	; 0x8e50 <sysclk_enable_peripheral_clock+0x1be>
    8e46:	64 e0       	ldi	r22, 0x04	; 4
    8e48:	84 e0       	ldi	r24, 0x04	; 4
    8e4a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e4e:	b3 c0       	rjmp	.+358    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e50:	89 81       	ldd	r24, Y+1	; 0x01
    8e52:	9a 81       	ldd	r25, Y+2	; 0x02
    8e54:	80 39       	cpi	r24, 0x90	; 144
    8e56:	9a 40       	sbci	r25, 0x0A	; 10
    8e58:	29 f4       	brne	.+10     	; 0x8e64 <sysclk_enable_peripheral_clock+0x1d2>
    8e5a:	64 e0       	ldi	r22, 0x04	; 4
    8e5c:	85 e0       	ldi	r24, 0x05	; 5
    8e5e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e62:	a9 c0       	rjmp	.+338    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e64:	89 81       	ldd	r24, Y+1	; 0x01
    8e66:	9a 81       	ldd	r25, Y+2	; 0x02
    8e68:	80 39       	cpi	r24, 0x90	; 144
    8e6a:	9b 40       	sbci	r25, 0x0B	; 11
    8e6c:	29 f4       	brne	.+10     	; 0x8e78 <sysclk_enable_peripheral_clock+0x1e6>
    8e6e:	64 e0       	ldi	r22, 0x04	; 4
    8e70:	86 e0       	ldi	r24, 0x06	; 6
    8e72:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e76:	9f c0       	rjmp	.+318    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e78:	89 81       	ldd	r24, Y+1	; 0x01
    8e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    8e7c:	80 3c       	cpi	r24, 0xC0	; 192
    8e7e:	98 40       	sbci	r25, 0x08	; 8
    8e80:	29 f4       	brne	.+10     	; 0x8e8c <sysclk_enable_peripheral_clock+0x1fa>
    8e82:	68 e0       	ldi	r22, 0x08	; 8
    8e84:	83 e0       	ldi	r24, 0x03	; 3
    8e86:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e8a:	95 c0       	rjmp	.+298    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8e8c:	89 81       	ldd	r24, Y+1	; 0x01
    8e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    8e90:	80 3c       	cpi	r24, 0xC0	; 192
    8e92:	99 40       	sbci	r25, 0x09	; 9
    8e94:	29 f4       	brne	.+10     	; 0x8ea0 <sysclk_enable_peripheral_clock+0x20e>
    8e96:	68 e0       	ldi	r22, 0x08	; 8
    8e98:	84 e0       	ldi	r24, 0x04	; 4
    8e9a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8e9e:	8b c0       	rjmp	.+278    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8ea0:	89 81       	ldd	r24, Y+1	; 0x01
    8ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ea4:	80 3c       	cpi	r24, 0xC0	; 192
    8ea6:	9a 40       	sbci	r25, 0x0A	; 10
    8ea8:	29 f4       	brne	.+10     	; 0x8eb4 <sysclk_enable_peripheral_clock+0x222>
    8eaa:	68 e0       	ldi	r22, 0x08	; 8
    8eac:	85 e0       	ldi	r24, 0x05	; 5
    8eae:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8eb2:	81 c0       	rjmp	.+258    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8eb4:	89 81       	ldd	r24, Y+1	; 0x01
    8eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    8eb8:	80 3c       	cpi	r24, 0xC0	; 192
    8eba:	9b 40       	sbci	r25, 0x0B	; 11
    8ebc:	29 f4       	brne	.+10     	; 0x8ec8 <sysclk_enable_peripheral_clock+0x236>
    8ebe:	68 e0       	ldi	r22, 0x08	; 8
    8ec0:	86 e0       	ldi	r24, 0x06	; 6
    8ec2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8ec6:	77 c0       	rjmp	.+238    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8ec8:	89 81       	ldd	r24, Y+1	; 0x01
    8eca:	9a 81       	ldd	r25, Y+2	; 0x02
    8ecc:	80 3a       	cpi	r24, 0xA0	; 160
    8ece:	98 40       	sbci	r25, 0x08	; 8
    8ed0:	29 f4       	brne	.+10     	; 0x8edc <sysclk_enable_peripheral_clock+0x24a>
    8ed2:	60 e1       	ldi	r22, 0x10	; 16
    8ed4:	83 e0       	ldi	r24, 0x03	; 3
    8ed6:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8eda:	6d c0       	rjmp	.+218    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8edc:	89 81       	ldd	r24, Y+1	; 0x01
    8ede:	9a 81       	ldd	r25, Y+2	; 0x02
    8ee0:	80 3a       	cpi	r24, 0xA0	; 160
    8ee2:	99 40       	sbci	r25, 0x09	; 9
    8ee4:	29 f4       	brne	.+10     	; 0x8ef0 <sysclk_enable_peripheral_clock+0x25e>
    8ee6:	60 e1       	ldi	r22, 0x10	; 16
    8ee8:	84 e0       	ldi	r24, 0x04	; 4
    8eea:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8eee:	63 c0       	rjmp	.+198    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8ef0:	89 81       	ldd	r24, Y+1	; 0x01
    8ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ef4:	80 3a       	cpi	r24, 0xA0	; 160
    8ef6:	9a 40       	sbci	r25, 0x0A	; 10
    8ef8:	29 f4       	brne	.+10     	; 0x8f04 <sysclk_enable_peripheral_clock+0x272>
    8efa:	60 e1       	ldi	r22, 0x10	; 16
    8efc:	85 e0       	ldi	r24, 0x05	; 5
    8efe:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f02:	59 c0       	rjmp	.+178    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f04:	89 81       	ldd	r24, Y+1	; 0x01
    8f06:	9a 81       	ldd	r25, Y+2	; 0x02
    8f08:	80 3a       	cpi	r24, 0xA0	; 160
    8f0a:	9b 40       	sbci	r25, 0x0B	; 11
    8f0c:	29 f4       	brne	.+10     	; 0x8f18 <sysclk_enable_peripheral_clock+0x286>
    8f0e:	60 e1       	ldi	r22, 0x10	; 16
    8f10:	86 e0       	ldi	r24, 0x06	; 6
    8f12:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f16:	4f c0       	rjmp	.+158    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f18:	89 81       	ldd	r24, Y+1	; 0x01
    8f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    8f1c:	80 3b       	cpi	r24, 0xB0	; 176
    8f1e:	98 40       	sbci	r25, 0x08	; 8
    8f20:	29 f4       	brne	.+10     	; 0x8f2c <sysclk_enable_peripheral_clock+0x29a>
    8f22:	60 e2       	ldi	r22, 0x20	; 32
    8f24:	83 e0       	ldi	r24, 0x03	; 3
    8f26:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f2a:	45 c0       	rjmp	.+138    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f2c:	89 81       	ldd	r24, Y+1	; 0x01
    8f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    8f30:	80 3b       	cpi	r24, 0xB0	; 176
    8f32:	99 40       	sbci	r25, 0x09	; 9
    8f34:	29 f4       	brne	.+10     	; 0x8f40 <sysclk_enable_peripheral_clock+0x2ae>
    8f36:	60 e2       	ldi	r22, 0x20	; 32
    8f38:	84 e0       	ldi	r24, 0x04	; 4
    8f3a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f3e:	3b c0       	rjmp	.+118    	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f40:	89 81       	ldd	r24, Y+1	; 0x01
    8f42:	9a 81       	ldd	r25, Y+2	; 0x02
    8f44:	80 3b       	cpi	r24, 0xB0	; 176
    8f46:	9a 40       	sbci	r25, 0x0A	; 10
    8f48:	29 f4       	brne	.+10     	; 0x8f54 <sysclk_enable_peripheral_clock+0x2c2>
    8f4a:	60 e2       	ldi	r22, 0x20	; 32
    8f4c:	85 e0       	ldi	r24, 0x05	; 5
    8f4e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f52:	31 c0       	rjmp	.+98     	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f54:	89 81       	ldd	r24, Y+1	; 0x01
    8f56:	9a 81       	ldd	r25, Y+2	; 0x02
    8f58:	80 3b       	cpi	r24, 0xB0	; 176
    8f5a:	9b 40       	sbci	r25, 0x0B	; 11
    8f5c:	29 f4       	brne	.+10     	; 0x8f68 <sysclk_enable_peripheral_clock+0x2d6>
    8f5e:	60 e2       	ldi	r22, 0x20	; 32
    8f60:	86 e0       	ldi	r24, 0x06	; 6
    8f62:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f66:	27 c0       	rjmp	.+78     	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f68:	89 81       	ldd	r24, Y+1	; 0x01
    8f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    8f6c:	80 38       	cpi	r24, 0x80	; 128
    8f6e:	94 40       	sbci	r25, 0x04	; 4
    8f70:	29 f4       	brne	.+10     	; 0x8f7c <sysclk_enable_peripheral_clock+0x2ea>
    8f72:	60 e4       	ldi	r22, 0x40	; 64
    8f74:	83 e0       	ldi	r24, 0x03	; 3
    8f76:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f7a:	1d c0       	rjmp	.+58     	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f7c:	89 81       	ldd	r24, Y+1	; 0x01
    8f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    8f80:	80 39       	cpi	r24, 0x90	; 144
    8f82:	94 40       	sbci	r25, 0x04	; 4
    8f84:	29 f4       	brne	.+10     	; 0x8f90 <sysclk_enable_peripheral_clock+0x2fe>
    8f86:	60 e4       	ldi	r22, 0x40	; 64
    8f88:	84 e0       	ldi	r24, 0x04	; 4
    8f8a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8f8e:	13 c0       	rjmp	.+38     	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8f90:	89 81       	ldd	r24, Y+1	; 0x01
    8f92:	9a 81       	ldd	r25, Y+2	; 0x02
    8f94:	80 3a       	cpi	r24, 0xA0	; 160
    8f96:	94 40       	sbci	r25, 0x04	; 4
    8f98:	29 f4       	brne	.+10     	; 0x8fa4 <sysclk_enable_peripheral_clock+0x312>
    8f9a:	60 e4       	ldi	r22, 0x40	; 64
    8f9c:	85 e0       	ldi	r24, 0x05	; 5
    8f9e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8fa2:	09 c0       	rjmp	.+18     	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8fa4:	89 81       	ldd	r24, Y+1	; 0x01
    8fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    8fa8:	80 3b       	cpi	r24, 0xB0	; 176
    8faa:	94 40       	sbci	r25, 0x04	; 4
    8fac:	21 f4       	brne	.+8      	; 0x8fb6 <sysclk_enable_peripheral_clock+0x324>
    8fae:	60 e4       	ldi	r22, 0x40	; 64
    8fb0:	86 e0       	ldi	r24, 0x06	; 6
    8fb2:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    8fb6:	00 00       	nop
    8fb8:	0f 90       	pop	r0
    8fba:	0f 90       	pop	r0
    8fbc:	df 91       	pop	r29
    8fbe:	cf 91       	pop	r28
    8fc0:	08 95       	ret

00008fc2 <usart_serial_init>:
    8fc2:	cf 93       	push	r28
    8fc4:	df 93       	push	r29
    8fc6:	cd b7       	in	r28, 0x3d	; 61
    8fc8:	de b7       	in	r29, 0x3e	; 62
    8fca:	2b 97       	sbiw	r28, 0x0b	; 11
    8fcc:	cd bf       	out	0x3d, r28	; 61
    8fce:	de bf       	out	0x3e, r29	; 62
    8fd0:	88 87       	std	Y+8, r24	; 0x08
    8fd2:	99 87       	std	Y+9, r25	; 0x09
    8fd4:	6a 87       	std	Y+10, r22	; 0x0a
    8fd6:	7b 87       	std	Y+11, r23	; 0x0b
    8fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    8fda:	9b 85       	ldd	r25, Y+11	; 0x0b
    8fdc:	fc 01       	movw	r30, r24
    8fde:	84 81       	ldd	r24, Z+4	; 0x04
    8fe0:	8d 83       	std	Y+5, r24	; 0x05
    8fe2:	8a 85       	ldd	r24, Y+10	; 0x0a
    8fe4:	9b 85       	ldd	r25, Y+11	; 0x0b
    8fe6:	fc 01       	movw	r30, r24
    8fe8:	85 81       	ldd	r24, Z+5	; 0x05
    8fea:	8e 83       	std	Y+6, r24	; 0x06
    8fec:	8a 85       	ldd	r24, Y+10	; 0x0a
    8fee:	9b 85       	ldd	r25, Y+11	; 0x0b
    8ff0:	fc 01       	movw	r30, r24
    8ff2:	86 81       	ldd	r24, Z+6	; 0x06
    8ff4:	8f 83       	std	Y+7, r24	; 0x07
    8ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
    8ff8:	9b 85       	ldd	r25, Y+11	; 0x0b
    8ffa:	fc 01       	movw	r30, r24
    8ffc:	80 81       	ld	r24, Z
    8ffe:	91 81       	ldd	r25, Z+1	; 0x01
    9000:	a2 81       	ldd	r26, Z+2	; 0x02
    9002:	b3 81       	ldd	r27, Z+3	; 0x03
    9004:	89 83       	std	Y+1, r24	; 0x01
    9006:	9a 83       	std	Y+2, r25	; 0x02
    9008:	ab 83       	std	Y+3, r26	; 0x03
    900a:	bc 83       	std	Y+4, r27	; 0x04
    900c:	88 85       	ldd	r24, Y+8	; 0x08
    900e:	99 85       	ldd	r25, Y+9	; 0x09
    9010:	80 3a       	cpi	r24, 0xA0	; 160
    9012:	98 40       	sbci	r25, 0x08	; 8
    9014:	21 f4       	brne	.+8      	; 0x901e <usart_serial_init+0x5c>
    9016:	60 e1       	ldi	r22, 0x10	; 16
    9018:	83 e0       	ldi	r24, 0x03	; 3
    901a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    901e:	88 85       	ldd	r24, Y+8	; 0x08
    9020:	99 85       	ldd	r25, Y+9	; 0x09
    9022:	80 3b       	cpi	r24, 0xB0	; 176
    9024:	98 40       	sbci	r25, 0x08	; 8
    9026:	21 f4       	brne	.+8      	; 0x9030 <usart_serial_init+0x6e>
    9028:	60 e2       	ldi	r22, 0x20	; 32
    902a:	83 e0       	ldi	r24, 0x03	; 3
    902c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    9030:	88 85       	ldd	r24, Y+8	; 0x08
    9032:	99 85       	ldd	r25, Y+9	; 0x09
    9034:	80 3a       	cpi	r24, 0xA0	; 160
    9036:	99 40       	sbci	r25, 0x09	; 9
    9038:	21 f4       	brne	.+8      	; 0x9042 <usart_serial_init+0x80>
    903a:	60 e1       	ldi	r22, 0x10	; 16
    903c:	84 e0       	ldi	r24, 0x04	; 4
    903e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    9042:	88 85       	ldd	r24, Y+8	; 0x08
    9044:	99 85       	ldd	r25, Y+9	; 0x09
    9046:	80 3b       	cpi	r24, 0xB0	; 176
    9048:	99 40       	sbci	r25, 0x09	; 9
    904a:	21 f4       	brne	.+8      	; 0x9054 <usart_serial_init+0x92>
    904c:	60 e2       	ldi	r22, 0x20	; 32
    904e:	84 e0       	ldi	r24, 0x04	; 4
    9050:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    9054:	88 85       	ldd	r24, Y+8	; 0x08
    9056:	99 85       	ldd	r25, Y+9	; 0x09
    9058:	80 3a       	cpi	r24, 0xA0	; 160
    905a:	9a 40       	sbci	r25, 0x0A	; 10
    905c:	21 f4       	brne	.+8      	; 0x9066 <usart_serial_init+0xa4>
    905e:	60 e1       	ldi	r22, 0x10	; 16
    9060:	85 e0       	ldi	r24, 0x05	; 5
    9062:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    9066:	88 85       	ldd	r24, Y+8	; 0x08
    9068:	99 85       	ldd	r25, Y+9	; 0x09
    906a:	80 3b       	cpi	r24, 0xB0	; 176
    906c:	9a 40       	sbci	r25, 0x0A	; 10
    906e:	21 f4       	brne	.+8      	; 0x9078 <usart_serial_init+0xb6>
    9070:	60 e2       	ldi	r22, 0x20	; 32
    9072:	85 e0       	ldi	r24, 0x05	; 5
    9074:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    9078:	88 85       	ldd	r24, Y+8	; 0x08
    907a:	99 85       	ldd	r25, Y+9	; 0x09
    907c:	80 3a       	cpi	r24, 0xA0	; 160
    907e:	9b 40       	sbci	r25, 0x0B	; 11
    9080:	21 f4       	brne	.+8      	; 0x908a <usart_serial_init+0xc8>
    9082:	60 e1       	ldi	r22, 0x10	; 16
    9084:	86 e0       	ldi	r24, 0x06	; 6
    9086:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    908a:	88 85       	ldd	r24, Y+8	; 0x08
    908c:	99 85       	ldd	r25, Y+9	; 0x09
    908e:	80 3b       	cpi	r24, 0xB0	; 176
    9090:	9b 40       	sbci	r25, 0x0B	; 11
    9092:	21 f4       	brne	.+8      	; 0x909c <usart_serial_init+0xda>
    9094:	60 e2       	ldi	r22, 0x20	; 32
    9096:	86 e0       	ldi	r24, 0x06	; 6
    9098:	0e 94 b0 2c 	call	0x5960	; 0x5960 <sysclk_enable_module>
    909c:	88 85       	ldd	r24, Y+8	; 0x08
    909e:	99 85       	ldd	r25, Y+9	; 0x09
    90a0:	9e 01       	movw	r18, r28
    90a2:	2f 5f       	subi	r18, 0xFF	; 255
    90a4:	3f 4f       	sbci	r19, 0xFF	; 255
    90a6:	b9 01       	movw	r22, r18
    90a8:	0f db       	rcall	.-2530   	; 0x86c8 <usart_init_rs232>
    90aa:	88 23       	and	r24, r24
    90ac:	11 f0       	breq	.+4      	; 0x90b2 <usart_serial_init+0xf0>
    90ae:	81 e0       	ldi	r24, 0x01	; 1
    90b0:	01 c0       	rjmp	.+2      	; 0x90b4 <usart_serial_init+0xf2>
    90b2:	80 e0       	ldi	r24, 0x00	; 0
    90b4:	2b 96       	adiw	r28, 0x0b	; 11
    90b6:	cd bf       	out	0x3d, r28	; 61
    90b8:	de bf       	out	0x3e, r29	; 62
    90ba:	df 91       	pop	r29
    90bc:	cf 91       	pop	r28
    90be:	08 95       	ret

000090c0 <usart_serial_putchar>:
    90c0:	cf 93       	push	r28
    90c2:	df 93       	push	r29
    90c4:	00 d0       	rcall	.+0      	; 0x90c6 <usart_serial_putchar+0x6>
    90c6:	cd b7       	in	r28, 0x3d	; 61
    90c8:	de b7       	in	r29, 0x3e	; 62
    90ca:	89 83       	std	Y+1, r24	; 0x01
    90cc:	9a 83       	std	Y+2, r25	; 0x02
    90ce:	6b 83       	std	Y+3, r22	; 0x03
    90d0:	89 81       	ldd	r24, Y+1	; 0x01
    90d2:	9a 81       	ldd	r25, Y+2	; 0x02
    90d4:	6b 81       	ldd	r22, Y+3	; 0x03
    90d6:	3e db       	rcall	.-2436   	; 0x8754 <usart_putchar>
    90d8:	23 96       	adiw	r28, 0x03	; 3
    90da:	cd bf       	out	0x3d, r28	; 61
    90dc:	de bf       	out	0x3e, r29	; 62
    90de:	df 91       	pop	r29
    90e0:	cf 91       	pop	r28
    90e2:	08 95       	ret

000090e4 <usart_serial_getchar>:
    90e4:	cf 93       	push	r28
    90e6:	df 93       	push	r29
    90e8:	00 d0       	rcall	.+0      	; 0x90ea <usart_serial_getchar+0x6>
    90ea:	1f 92       	push	r1
    90ec:	cd b7       	in	r28, 0x3d	; 61
    90ee:	de b7       	in	r29, 0x3e	; 62
    90f0:	89 83       	std	Y+1, r24	; 0x01
    90f2:	9a 83       	std	Y+2, r25	; 0x02
    90f4:	6b 83       	std	Y+3, r22	; 0x03
    90f6:	7c 83       	std	Y+4, r23	; 0x04
    90f8:	89 81       	ldd	r24, Y+1	; 0x01
    90fa:	9a 81       	ldd	r25, Y+2	; 0x02
    90fc:	49 db       	rcall	.-2414   	; 0x8790 <usart_getchar>
    90fe:	28 2f       	mov	r18, r24
    9100:	8b 81       	ldd	r24, Y+3	; 0x03
    9102:	9c 81       	ldd	r25, Y+4	; 0x04
    9104:	fc 01       	movw	r30, r24
    9106:	20 83       	st	Z, r18
    9108:	00 00       	nop
    910a:	24 96       	adiw	r28, 0x04	; 4
    910c:	cd bf       	out	0x3d, r28	; 61
    910e:	de bf       	out	0x3e, r29	; 62
    9110:	df 91       	pop	r29
    9112:	cf 91       	pop	r28
    9114:	08 95       	ret

00009116 <stdio_serial_init>:
    9116:	cf 93       	push	r28
    9118:	df 93       	push	r29
    911a:	00 d0       	rcall	.+0      	; 0x911c <stdio_serial_init+0x6>
    911c:	1f 92       	push	r1
    911e:	cd b7       	in	r28, 0x3d	; 61
    9120:	de b7       	in	r29, 0x3e	; 62
    9122:	89 83       	std	Y+1, r24	; 0x01
    9124:	9a 83       	std	Y+2, r25	; 0x02
    9126:	6b 83       	std	Y+3, r22	; 0x03
    9128:	7c 83       	std	Y+4, r23	; 0x04
    912a:	89 81       	ldd	r24, Y+1	; 0x01
    912c:	9a 81       	ldd	r25, Y+2	; 0x02
    912e:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <stdio_base>
    9132:	90 93 0e 28 	sts	0x280E, r25	; 0x80280e <stdio_base+0x1>
    9136:	80 e6       	ldi	r24, 0x60	; 96
    9138:	98 e4       	ldi	r25, 0x48	; 72
    913a:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <ptr_put>
    913e:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <ptr_put+0x1>
    9142:	82 e7       	ldi	r24, 0x72	; 114
    9144:	98 e4       	ldi	r25, 0x48	; 72
    9146:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <ptr_get>
    914a:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <ptr_get+0x1>
    914e:	2b 81       	ldd	r18, Y+3	; 0x03
    9150:	3c 81       	ldd	r19, Y+4	; 0x04
    9152:	89 81       	ldd	r24, Y+1	; 0x01
    9154:	9a 81       	ldd	r25, Y+2	; 0x02
    9156:	b9 01       	movw	r22, r18
    9158:	34 df       	rcall	.-408    	; 0x8fc2 <usart_serial_init>
    915a:	63 e3       	ldi	r22, 0x33	; 51
    915c:	7d e2       	ldi	r23, 0x2D	; 45
    915e:	82 e5       	ldi	r24, 0x52	; 82
    9160:	9d e2       	ldi	r25, 0x2D	; 45
    9162:	0e 94 24 5b 	call	0xb648	; 0xb648 <fdevopen>
    9166:	00 00       	nop
    9168:	24 96       	adiw	r28, 0x04	; 4
    916a:	cd bf       	out	0x3d, r28	; 61
    916c:	de bf       	out	0x3e, r29	; 62
    916e:	df 91       	pop	r29
    9170:	cf 91       	pop	r28
    9172:	08 95       	ret

00009174 <uart_init>:
    9174:	cf 93       	push	r28
    9176:	df 93       	push	r29
    9178:	1f 92       	push	r1
    917a:	1f 92       	push	r1
    917c:	cd b7       	in	r28, 0x3d	; 61
    917e:	de b7       	in	r29, 0x3e	; 62
    9180:	89 83       	std	Y+1, r24	; 0x01
    9182:	9a 83       	std	Y+2, r25	; 0x02
    9184:	89 81       	ldd	r24, Y+1	; 0x01
    9186:	9a 81       	ldd	r25, Y+2	; 0x02
    9188:	fc 01       	movw	r30, r24
    918a:	86 81       	ldd	r24, Z+6	; 0x06
    918c:	97 81       	ldd	r25, Z+7	; 0x07
    918e:	a0 85       	ldd	r26, Z+8	; 0x08
    9190:	b1 85       	ldd	r27, Z+9	; 0x09
    9192:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <usart_options.6991>
    9196:	90 93 10 20 	sts	0x2010, r25	; 0x802010 <usart_options.6991+0x1>
    919a:	a0 93 11 20 	sts	0x2011, r26	; 0x802011 <usart_options.6991+0x2>
    919e:	b0 93 12 20 	sts	0x2012, r27	; 0x802012 <usart_options.6991+0x3>
    91a2:	89 81       	ldd	r24, Y+1	; 0x01
    91a4:	9a 81       	ldd	r25, Y+2	; 0x02
    91a6:	fc 01       	movw	r30, r24
    91a8:	80 81       	ld	r24, Z
    91aa:	91 81       	ldd	r25, Z+1	; 0x01
    91ac:	29 81       	ldd	r18, Y+1	; 0x01
    91ae:	3a 81       	ldd	r19, Y+2	; 0x02
    91b0:	f9 01       	movw	r30, r18
    91b2:	20 81       	ld	r18, Z
    91b4:	31 81       	ldd	r19, Z+1	; 0x01
    91b6:	f9 01       	movw	r30, r18
    91b8:	40 81       	ld	r20, Z
    91ba:	29 81       	ldd	r18, Y+1	; 0x01
    91bc:	3a 81       	ldd	r19, Y+2	; 0x02
    91be:	f9 01       	movw	r30, r18
    91c0:	25 81       	ldd	r18, Z+5	; 0x05
    91c2:	24 2b       	or	r18, r20
    91c4:	fc 01       	movw	r30, r24
    91c6:	20 83       	st	Z, r18
    91c8:	89 81       	ldd	r24, Y+1	; 0x01
    91ca:	9a 81       	ldd	r25, Y+2	; 0x02
    91cc:	fc 01       	movw	r30, r24
    91ce:	80 81       	ld	r24, Z
    91d0:	91 81       	ldd	r25, Z+1	; 0x01
    91d2:	29 81       	ldd	r18, Y+1	; 0x01
    91d4:	3a 81       	ldd	r19, Y+2	; 0x02
    91d6:	f9 01       	movw	r30, r18
    91d8:	20 81       	ld	r18, Z
    91da:	31 81       	ldd	r19, Z+1	; 0x01
    91dc:	f9 01       	movw	r30, r18
    91de:	44 81       	ldd	r20, Z+4	; 0x04
    91e0:	29 81       	ldd	r18, Y+1	; 0x01
    91e2:	3a 81       	ldd	r19, Y+2	; 0x02
    91e4:	f9 01       	movw	r30, r18
    91e6:	25 81       	ldd	r18, Z+5	; 0x05
    91e8:	24 2b       	or	r18, r20
    91ea:	fc 01       	movw	r30, r24
    91ec:	24 83       	std	Z+4, r18	; 0x04
    91ee:	89 81       	ldd	r24, Y+1	; 0x01
    91f0:	9a 81       	ldd	r25, Y+2	; 0x02
    91f2:	fc 01       	movw	r30, r24
    91f4:	80 81       	ld	r24, Z
    91f6:	91 81       	ldd	r25, Z+1	; 0x01
    91f8:	29 81       	ldd	r18, Y+1	; 0x01
    91fa:	3a 81       	ldd	r19, Y+2	; 0x02
    91fc:	f9 01       	movw	r30, r18
    91fe:	20 81       	ld	r18, Z
    9200:	31 81       	ldd	r19, Z+1	; 0x01
    9202:	f9 01       	movw	r30, r18
    9204:	20 81       	ld	r18, Z
    9206:	42 2f       	mov	r20, r18
    9208:	29 81       	ldd	r18, Y+1	; 0x01
    920a:	3a 81       	ldd	r19, Y+2	; 0x02
    920c:	f9 01       	movw	r30, r18
    920e:	24 81       	ldd	r18, Z+4	; 0x04
    9210:	20 95       	com	r18
    9212:	24 23       	and	r18, r20
    9214:	fc 01       	movw	r30, r24
    9216:	20 83       	st	Z, r18
    9218:	89 81       	ldd	r24, Y+1	; 0x01
    921a:	9a 81       	ldd	r25, Y+2	; 0x02
    921c:	fc 01       	movw	r30, r24
    921e:	82 81       	ldd	r24, Z+2	; 0x02
    9220:	93 81       	ldd	r25, Z+3	; 0x03
    9222:	37 dd       	rcall	.-1426   	; 0x8c92 <sysclk_enable_peripheral_clock>
    9224:	89 81       	ldd	r24, Y+1	; 0x01
    9226:	9a 81       	ldd	r25, Y+2	; 0x02
    9228:	fc 01       	movw	r30, r24
    922a:	82 81       	ldd	r24, Z+2	; 0x02
    922c:	93 81       	ldd	r25, Z+3	; 0x03
    922e:	6f e0       	ldi	r22, 0x0F	; 15
    9230:	70 e2       	ldi	r23, 0x20	; 32
    9232:	c7 de       	rcall	.-626    	; 0x8fc2 <usart_serial_init>
    9234:	00 00       	nop
    9236:	0f 90       	pop	r0
    9238:	0f 90       	pop	r0
    923a:	df 91       	pop	r29
    923c:	cf 91       	pop	r28
    923e:	08 95       	ret

00009240 <uart_terminal_init>:

void uart_terminal_init()
{
    9240:	cf 93       	push	r28
    9242:	df 93       	push	r29
    9244:	cd b7       	in	r28, 0x3d	; 61
    9246:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    9248:	80 ea       	ldi	r24, 0xA0	; 160
    924a:	9a e0       	ldi	r25, 0x0A	; 10
    924c:	22 dd       	rcall	.-1468   	; 0x8c92 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    924e:	80 e8       	ldi	r24, 0x80	; 128
    9250:	96 e0       	ldi	r25, 0x06	; 6
    9252:	20 e8       	ldi	r18, 0x80	; 128
    9254:	36 e0       	ldi	r19, 0x06	; 6
    9256:	f9 01       	movw	r30, r18
    9258:	20 81       	ld	r18, Z
    925a:	28 60       	ori	r18, 0x08	; 8
    925c:	fc 01       	movw	r30, r24
    925e:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    9260:	66 e1       	ldi	r22, 0x16	; 22
    9262:	70 e2       	ldi	r23, 0x20	; 32
    9264:	80 ea       	ldi	r24, 0xA0	; 160
    9266:	9a e0       	ldi	r25, 0x0A	; 10
    9268:	56 df       	rcall	.-340    	; 0x9116 <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    926a:	8e e2       	ldi	r24, 0x2E	; 46
    926c:	91 e2       	ldi	r25, 0x21	; 33
    926e:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
		printf("UART Initialized\n");
    9272:	83 e5       	ldi	r24, 0x53	; 83
    9274:	91 e2       	ldi	r25, 0x21	; 33
    9276:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
	}
}
    927a:	00 00       	nop
    927c:	df 91       	pop	r29
    927e:	cf 91       	pop	r28
    9280:	08 95       	ret

00009282 <sysclk_get_main_hz>:
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    9282:	cf 93       	push	r28
    9284:	df 93       	push	r29
    9286:	cd b7       	in	r28, 0x3d	; 61
    9288:	de b7       	in	r29, 0x3e	; 62
    928a:	80 e0       	ldi	r24, 0x00	; 0
    928c:	9c e6       	ldi	r25, 0x6C	; 108
    928e:	ac ed       	ldi	r26, 0xDC	; 220
    9290:	b2 e0       	ldi	r27, 0x02	; 2
    9292:	bc 01       	movw	r22, r24
    9294:	cd 01       	movw	r24, r26
    9296:	df 91       	pop	r29
    9298:	cf 91       	pop	r28
    929a:	08 95       	ret

0000929c <sysclk_get_per4_hz>:
    929c:	cf 93       	push	r28
    929e:	df 93       	push	r29
    92a0:	1f 92       	push	r1
    92a2:	cd b7       	in	r28, 0x3d	; 61
    92a4:	de b7       	in	r29, 0x3e	; 62
    92a6:	19 82       	std	Y+1, r1	; 0x01
    92a8:	ec df       	rcall	.-40     	; 0x9282 <sysclk_get_main_hz>
    92aa:	dc 01       	movw	r26, r24
    92ac:	cb 01       	movw	r24, r22
    92ae:	29 81       	ldd	r18, Y+1	; 0x01
    92b0:	22 2f       	mov	r18, r18
    92b2:	30 e0       	ldi	r19, 0x00	; 0
    92b4:	04 c0       	rjmp	.+8      	; 0x92be <sysclk_get_per4_hz+0x22>
    92b6:	b6 95       	lsr	r27
    92b8:	a7 95       	ror	r26
    92ba:	97 95       	ror	r25
    92bc:	87 95       	ror	r24
    92be:	2a 95       	dec	r18
    92c0:	d2 f7       	brpl	.-12     	; 0x92b6 <sysclk_get_per4_hz+0x1a>
    92c2:	bc 01       	movw	r22, r24
    92c4:	cd 01       	movw	r24, r26
    92c6:	0f 90       	pop	r0
    92c8:	df 91       	pop	r29
    92ca:	cf 91       	pop	r28
    92cc:	08 95       	ret

000092ce <sysclk_get_per2_hz>:
    92ce:	cf 93       	push	r28
    92d0:	df 93       	push	r29
    92d2:	cd b7       	in	r28, 0x3d	; 61
    92d4:	de b7       	in	r29, 0x3e	; 62
    92d6:	e2 df       	rcall	.-60     	; 0x929c <sysclk_get_per4_hz>
    92d8:	dc 01       	movw	r26, r24
    92da:	cb 01       	movw	r24, r22
    92dc:	bc 01       	movw	r22, r24
    92de:	cd 01       	movw	r24, r26
    92e0:	df 91       	pop	r29
    92e2:	cf 91       	pop	r28
    92e4:	08 95       	ret

000092e6 <sysclk_get_per_hz>:
    92e6:	cf 93       	push	r28
    92e8:	df 93       	push	r29
    92ea:	cd b7       	in	r28, 0x3d	; 61
    92ec:	de b7       	in	r29, 0x3e	; 62
    92ee:	ef df       	rcall	.-34     	; 0x92ce <sysclk_get_per2_hz>
    92f0:	dc 01       	movw	r26, r24
    92f2:	cb 01       	movw	r24, r22
    92f4:	bc 01       	movw	r22, r24
    92f6:	cd 01       	movw	r24, r26
    92f8:	df 91       	pop	r29
    92fa:	cf 91       	pop	r28
    92fc:	08 95       	ret

000092fe <sysclk_get_cpu_hz>:
    92fe:	cf 93       	push	r28
    9300:	df 93       	push	r29
    9302:	cd b7       	in	r28, 0x3d	; 61
    9304:	de b7       	in	r29, 0x3e	; 62
    9306:	ef df       	rcall	.-34     	; 0x92e6 <sysclk_get_per_hz>
    9308:	dc 01       	movw	r26, r24
    930a:	cb 01       	movw	r24, r22
    930c:	bc 01       	movw	r22, r24
    930e:	cd 01       	movw	r24, r26
    9310:	df 91       	pop	r29
    9312:	cf 91       	pop	r28
    9314:	08 95       	ret

00009316 <__portable_avr_delay_cycles>:
    9316:	04 c0       	rjmp	.+8      	; 0x9320 <__portable_avr_delay_cycles+0xa>
    9318:	61 50       	subi	r22, 0x01	; 1
    931a:	71 09       	sbc	r23, r1
    931c:	81 09       	sbc	r24, r1
    931e:	91 09       	sbc	r25, r1
    9320:	61 15       	cp	r22, r1
    9322:	71 05       	cpc	r23, r1
    9324:	81 05       	cpc	r24, r1
    9326:	91 05       	cpc	r25, r1
    9328:	b9 f7       	brne	.-18     	; 0x9318 <__portable_avr_delay_cycles+0x2>
    932a:	08 95       	ret

0000932c <pmic_init>:
    932c:	cf 93       	push	r28
    932e:	df 93       	push	r29
    9330:	cd b7       	in	r28, 0x3d	; 61
    9332:	de b7       	in	r29, 0x3e	; 62
    9334:	80 ea       	ldi	r24, 0xA0	; 160
    9336:	90 e0       	ldi	r25, 0x00	; 0
    9338:	27 e0       	ldi	r18, 0x07	; 7
    933a:	fc 01       	movw	r30, r24
    933c:	22 83       	std	Z+2, r18	; 0x02
    933e:	00 00       	nop
    9340:	df 91       	pop	r29
    9342:	cf 91       	pop	r28
    9344:	08 95       	ret

00009346 <pmic_set_scheduling>:
    9346:	cf 93       	push	r28
    9348:	df 93       	push	r29
    934a:	1f 92       	push	r1
    934c:	cd b7       	in	r28, 0x3d	; 61
    934e:	de b7       	in	r29, 0x3e	; 62
    9350:	89 83       	std	Y+1, r24	; 0x01
    9352:	89 81       	ldd	r24, Y+1	; 0x01
    9354:	88 2f       	mov	r24, r24
    9356:	90 e0       	ldi	r25, 0x00	; 0
    9358:	00 97       	sbiw	r24, 0x00	; 0
    935a:	19 f0       	breq	.+6      	; 0x9362 <pmic_set_scheduling+0x1c>
    935c:	01 97       	sbiw	r24, 0x01	; 1
    935e:	79 f0       	breq	.+30     	; 0x937e <pmic_set_scheduling+0x38>
    9360:	18 c0       	rjmp	.+48     	; 0x9392 <pmic_set_scheduling+0x4c>
    9362:	80 ea       	ldi	r24, 0xA0	; 160
    9364:	90 e0       	ldi	r25, 0x00	; 0
    9366:	20 ea       	ldi	r18, 0xA0	; 160
    9368:	30 e0       	ldi	r19, 0x00	; 0
    936a:	f9 01       	movw	r30, r18
    936c:	22 81       	ldd	r18, Z+2	; 0x02
    936e:	2f 77       	andi	r18, 0x7F	; 127
    9370:	fc 01       	movw	r30, r24
    9372:	22 83       	std	Z+2, r18	; 0x02
    9374:	80 ea       	ldi	r24, 0xA0	; 160
    9376:	90 e0       	ldi	r25, 0x00	; 0
    9378:	fc 01       	movw	r30, r24
    937a:	11 82       	std	Z+1, r1	; 0x01
    937c:	0a c0       	rjmp	.+20     	; 0x9392 <pmic_set_scheduling+0x4c>
    937e:	80 ea       	ldi	r24, 0xA0	; 160
    9380:	90 e0       	ldi	r25, 0x00	; 0
    9382:	20 ea       	ldi	r18, 0xA0	; 160
    9384:	30 e0       	ldi	r19, 0x00	; 0
    9386:	f9 01       	movw	r30, r18
    9388:	22 81       	ldd	r18, Z+2	; 0x02
    938a:	20 68       	ori	r18, 0x80	; 128
    938c:	fc 01       	movw	r30, r24
    938e:	22 83       	std	Z+2, r18	; 0x02
    9390:	00 00       	nop
    9392:	00 00       	nop
    9394:	0f 90       	pop	r0
    9396:	df 91       	pop	r29
    9398:	cf 91       	pop	r28
    939a:	08 95       	ret

0000939c <fs_0>:

//#include "asf.h"
void fs_0()
{
    939c:	cf 93       	push	r28
    939e:	df 93       	push	r29
    93a0:	cd b7       	in	r28, 0x3d	; 61
    93a2:	de b7       	in	r29, 0x3e	; 62
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
    93a4:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <velocity>
    93a8:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <velocity+0x1>
    93ac:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <velocity+0x2>
    93b0:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <velocity+0x3>
    93b4:	20 e0       	ldi	r18, 0x00	; 0
    93b6:	30 e0       	ldi	r19, 0x00	; 0
    93b8:	40 e0       	ldi	r20, 0x00	; 0
    93ba:	50 e4       	ldi	r21, 0x40	; 64
    93bc:	bc 01       	movw	r22, r24
    93be:	cd 01       	movw	r24, r26
    93c0:	0e 94 4c 53 	call	0xa698	; 0xa698 <__gesf2>
    93c4:	18 16       	cp	r1, r24
    93c6:	0c f0       	brlt	.+2      	; 0x93ca <fs_0+0x2e>
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    93c8:	65 c0       	rjmp	.+202    	; 0x9494 <fs_0+0xf8>
//#include "asf.h"
void fs_0()
{
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
    93ca:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <accZ>
    93ce:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <accZ+0x1>
    93d2:	a0 91 39 22 	lds	r26, 0x2239	; 0x802239 <accZ+0x2>
    93d6:	b0 91 3a 22 	lds	r27, 0x223A	; 0x80223a <accZ+0x3>
    93da:	20 e0       	ldi	r18, 0x00	; 0
    93dc:	30 e0       	ldi	r19, 0x00	; 0
    93de:	40 ea       	ldi	r20, 0xA0	; 160
    93e0:	50 e4       	ldi	r21, 0x40	; 64
    93e2:	bc 01       	movw	r22, r24
    93e4:	cd 01       	movw	r24, r26
    93e6:	0e 94 4c 53 	call	0xa698	; 0xa698 <__gesf2>
    93ea:	18 16       	cp	r1, r24
    93ec:	0c f0       	brlt	.+2      	; 0x93f0 <fs_0+0x54>
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    93ee:	52 c0       	rjmp	.+164    	; 0x9494 <fs_0+0xf8>
void fs_0()
{
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
    93f0:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    93f4:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    93f8:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    93fc:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    9400:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    9404:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    9408:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    940c:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    9410:	bc 01       	movw	r22, r24
    9412:	cd 01       	movw	r24, r26
    9414:	05 d7       	rcall	.+3594   	; 0xa220 <__subsf3>
    9416:	dc 01       	movw	r26, r24
    9418:	cb 01       	movw	r24, r22
    941a:	bc 01       	movw	r22, r24
    941c:	cd 01       	movw	r24, r26
    941e:	0e 94 1b 52 	call	0xa436	; 0xa436 <__fixsfsi>
    9422:	dc 01       	movw	r26, r24
    9424:	cb 01       	movw	r24, r22
    9426:	82 3f       	cpi	r24, 0xF2	; 242
    9428:	9f 4f       	sbci	r25, 0xFF	; 255
    942a:	a4 f1       	brlt	.+104    	; 0x9494 <fs_0+0xf8>
    942c:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    9430:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    9434:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    9438:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    943c:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    9440:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    9444:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    9448:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    944c:	bc 01       	movw	r22, r24
    944e:	cd 01       	movw	r24, r26
    9450:	e7 d6       	rcall	.+3534   	; 0xa220 <__subsf3>
    9452:	dc 01       	movw	r26, r24
    9454:	cb 01       	movw	r24, r22
    9456:	bc 01       	movw	r22, r24
    9458:	cd 01       	movw	r24, r26
    945a:	ed d7       	rcall	.+4058   	; 0xa436 <__fixsfsi>
    945c:	dc 01       	movw	r26, r24
    945e:	cb 01       	movw	r24, r22
    9460:	0f 97       	sbiw	r24, 0x0f	; 15
    9462:	c4 f4       	brge	.+48     	; 0x9494 <fs_0+0xf8>
		&& altitude > FS0_MIN_ALTITUDE)
    9464:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <altitude>
    9468:	90 91 62 22 	lds	r25, 0x2262	; 0x802262 <altitude+0x1>
    946c:	a0 91 63 22 	lds	r26, 0x2263	; 0x802263 <altitude+0x2>
    9470:	b0 91 64 22 	lds	r27, 0x2264	; 0x802264 <altitude+0x3>
    9474:	20 e0       	ldi	r18, 0x00	; 0
    9476:	30 e0       	ldi	r19, 0x00	; 0
    9478:	40 e2       	ldi	r20, 0x20	; 32
    947a:	52 e4       	ldi	r21, 0x42	; 66
    947c:	bc 01       	movw	r22, r24
    947e:	cd 01       	movw	r24, r26
    9480:	0e 94 4c 53 	call	0xa698	; 0xa698 <__gesf2>
    9484:	18 16       	cp	r1, r24
    9486:	0c f0       	brlt	.+2      	; 0x948a <fs_0+0xee>
	{
			flightState ++;
	}
}
    9488:	05 c0       	rjmp	.+10     	; 0x9494 <fs_0+0xf8>
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
    948a:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <flightState>
    948e:	8f 5f       	subi	r24, 0xFF	; 255
    9490:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <flightState>
	}
}
    9494:	00 00       	nop
    9496:	df 91       	pop	r29
    9498:	cf 91       	pop	r28
    949a:	08 95       	ret

0000949c <fs_1>:

void fs_1()
{
    949c:	cf 93       	push	r28
    949e:	df 93       	push	r29
    94a0:	cd b7       	in	r28, 0x3d	; 61
    94a2:	de b7       	in	r29, 0x3e	; 62
	// get vertical velocity
	// see if we've found a peak vertical velocity
	// we auto-deploy
	// move to next flight state
	if(velocity < FS1_MAX_VEL 
    94a4:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <velocity>
    94a8:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <velocity+0x1>
    94ac:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <velocity+0x2>
    94b0:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <velocity+0x3>
    94b4:	20 e0       	ldi	r18, 0x00	; 0
    94b6:	30 e0       	ldi	r19, 0x00	; 0
    94b8:	40 e0       	ldi	r20, 0x00	; 0
    94ba:	50 ec       	ldi	r21, 0xC0	; 192
    94bc:	bc 01       	movw	r22, r24
    94be:	cd 01       	movw	r24, r26
    94c0:	14 d7       	rcall	.+3624   	; 0xa2ea <__cmpsf2>
    94c2:	88 23       	and	r24, r24
    94c4:	0c f0       	brlt	.+2      	; 0x94c8 <fs_1+0x2c>
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
		&& altitude > FS1_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    94c6:	84 c0       	rjmp	.+264    	; 0x95d0 <fs_1+0x134>
	// get vertical velocity
	// see if we've found a peak vertical velocity
	// we auto-deploy
	// move to next flight state
	if(velocity < FS1_MAX_VEL 
		&& abs(accZ - 9.8) < FS1_MAX_ACCEL  
    94c8:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <accZ>
    94cc:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <accZ+0x1>
    94d0:	a0 91 39 22 	lds	r26, 0x2239	; 0x802239 <accZ+0x2>
    94d4:	b0 91 3a 22 	lds	r27, 0x223A	; 0x80223a <accZ+0x3>
    94d8:	2d ec       	ldi	r18, 0xCD	; 205
    94da:	3c ec       	ldi	r19, 0xCC	; 204
    94dc:	4c e1       	ldi	r20, 0x1C	; 28
    94de:	51 e4       	ldi	r21, 0x41	; 65
    94e0:	bc 01       	movw	r22, r24
    94e2:	cd 01       	movw	r24, r26
    94e4:	9d d6       	rcall	.+3386   	; 0xa220 <__subsf3>
    94e6:	dc 01       	movw	r26, r24
    94e8:	cb 01       	movw	r24, r22
    94ea:	bc 01       	movw	r22, r24
    94ec:	cd 01       	movw	r24, r26
    94ee:	a3 d7       	rcall	.+3910   	; 0xa436 <__fixsfsi>
    94f0:	dc 01       	movw	r26, r24
    94f2:	cb 01       	movw	r24, r22
    94f4:	8f 3f       	cpi	r24, 0xFF	; 255
    94f6:	9f 4f       	sbci	r25, 0xFF	; 255
    94f8:	0c f4       	brge	.+2      	; 0x94fc <fs_1+0x60>
    94fa:	6a c0       	rjmp	.+212    	; 0x95d0 <fs_1+0x134>
    94fc:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <accZ>
    9500:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <accZ+0x1>
    9504:	a0 91 39 22 	lds	r26, 0x2239	; 0x802239 <accZ+0x2>
    9508:	b0 91 3a 22 	lds	r27, 0x223A	; 0x80223a <accZ+0x3>
    950c:	2d ec       	ldi	r18, 0xCD	; 205
    950e:	3c ec       	ldi	r19, 0xCC	; 204
    9510:	4c e1       	ldi	r20, 0x1C	; 28
    9512:	51 e4       	ldi	r21, 0x41	; 65
    9514:	bc 01       	movw	r22, r24
    9516:	cd 01       	movw	r24, r26
    9518:	83 d6       	rcall	.+3334   	; 0xa220 <__subsf3>
    951a:	dc 01       	movw	r26, r24
    951c:	cb 01       	movw	r24, r22
    951e:	bc 01       	movw	r22, r24
    9520:	cd 01       	movw	r24, r26
    9522:	89 d7       	rcall	.+3858   	; 0xa436 <__fixsfsi>
    9524:	dc 01       	movw	r26, r24
    9526:	cb 01       	movw	r24, r22
    9528:	02 97       	sbiw	r24, 0x02	; 2
    952a:	0c f0       	brlt	.+2      	; 0x952e <fs_1+0x92>
    952c:	51 c0       	rjmp	.+162    	; 0x95d0 <fs_1+0x134>
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
    952e:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    9532:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    9536:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    953a:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    953e:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    9542:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    9546:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    954a:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    954e:	bc 01       	movw	r22, r24
    9550:	cd 01       	movw	r24, r26
    9552:	66 d6       	rcall	.+3276   	; 0xa220 <__subsf3>
    9554:	dc 01       	movw	r26, r24
    9556:	cb 01       	movw	r24, r22
    9558:	bc 01       	movw	r22, r24
    955a:	cd 01       	movw	r24, r26
    955c:	6c d7       	rcall	.+3800   	; 0xa436 <__fixsfsi>
    955e:	dc 01       	movw	r26, r24
    9560:	cb 01       	movw	r24, r22
    9562:	8f 3c       	cpi	r24, 0xCF	; 207
    9564:	9f 4f       	sbci	r25, 0xFF	; 255
    9566:	a4 f1       	brlt	.+104    	; 0x95d0 <fs_1+0x134>
    9568:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    956c:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    9570:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    9574:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    9578:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    957c:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    9580:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    9584:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    9588:	bc 01       	movw	r22, r24
    958a:	cd 01       	movw	r24, r26
    958c:	49 d6       	rcall	.+3218   	; 0xa220 <__subsf3>
    958e:	dc 01       	movw	r26, r24
    9590:	cb 01       	movw	r24, r22
    9592:	bc 01       	movw	r22, r24
    9594:	cd 01       	movw	r24, r26
    9596:	4f d7       	rcall	.+3742   	; 0xa436 <__fixsfsi>
    9598:	dc 01       	movw	r26, r24
    959a:	cb 01       	movw	r24, r22
    959c:	c2 97       	sbiw	r24, 0x32	; 50
    959e:	c4 f4       	brge	.+48     	; 0x95d0 <fs_1+0x134>
		&& altitude > FS1_MIN_ALTITUDE)
    95a0:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <altitude>
    95a4:	90 91 62 22 	lds	r25, 0x2262	; 0x802262 <altitude+0x1>
    95a8:	a0 91 63 22 	lds	r26, 0x2263	; 0x802263 <altitude+0x2>
    95ac:	b0 91 64 22 	lds	r27, 0x2264	; 0x802264 <altitude+0x3>
    95b0:	20 e0       	ldi	r18, 0x00	; 0
    95b2:	30 e0       	ldi	r19, 0x00	; 0
    95b4:	40 e2       	ldi	r20, 0x20	; 32
    95b6:	51 e4       	ldi	r21, 0x41	; 65
    95b8:	bc 01       	movw	r22, r24
    95ba:	cd 01       	movw	r24, r26
    95bc:	0e 94 4c 53 	call	0xa698	; 0xa698 <__gesf2>
    95c0:	18 16       	cp	r1, r24
    95c2:	0c f0       	brlt	.+2      	; 0x95c6 <fs_1+0x12a>
	{
			flightState ++;
	}
}
    95c4:	05 c0       	rjmp	.+10     	; 0x95d0 <fs_1+0x134>
	if(velocity < FS1_MAX_VEL 
		&& abs(accZ - 9.8) < FS1_MAX_ACCEL  
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
		&& altitude > FS1_MIN_ALTITUDE)
	{
			flightState ++;
    95c6:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <flightState>
    95ca:	8f 5f       	subi	r24, 0xFF	; 255
    95cc:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <flightState>
	}
}
    95d0:	00 00       	nop
    95d2:	df 91       	pop	r29
    95d4:	cf 91       	pop	r28
    95d6:	08 95       	ret

000095d8 <fs_2>:
void fs_2()
{
    95d8:	cf 93       	push	r28
    95da:	df 93       	push	r29
    95dc:	cd b7       	in	r28, 0x3d	; 61
    95de:	de b7       	in	r29, 0x3e	; 62
	// make sure our velocity is nominal
	// if altitude is just above 450m, trigger servo for deployment (time servo and deployment to see how long it takes for umbilical to disconnect?)
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
    95e0:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <velocity>
    95e4:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <velocity+0x1>
    95e8:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <velocity+0x2>
    95ec:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <velocity+0x3>
    95f0:	20 e0       	ldi	r18, 0x00	; 0
    95f2:	30 e0       	ldi	r19, 0x00	; 0
    95f4:	40 e0       	ldi	r20, 0x00	; 0
    95f6:	50 e4       	ldi	r21, 0x40	; 64
    95f8:	bc 01       	movw	r22, r24
    95fa:	cd 01       	movw	r24, r26
    95fc:	0e 94 4c 53 	call	0xa698	; 0xa698 <__gesf2>
    9600:	18 16       	cp	r1, r24
    9602:	0c f0       	brlt	.+2      	; 0x9606 <fs_2+0x2e>
	{
			servo_init();
			//set_servo(100);
			flightState ++;
	}
}
    9604:	65 c0       	rjmp	.+202    	; 0x96d0 <fs_2+0xf8>
	// if altitude is just above 450m, trigger servo for deployment (time servo and deployment to see how long it takes for umbilical to disconnect?)
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
    9606:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <accZ>
    960a:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <accZ+0x1>
    960e:	a0 91 39 22 	lds	r26, 0x2239	; 0x802239 <accZ+0x2>
    9612:	b0 91 3a 22 	lds	r27, 0x223A	; 0x80223a <accZ+0x3>
    9616:	20 e0       	ldi	r18, 0x00	; 0
    9618:	30 e0       	ldi	r19, 0x00	; 0
    961a:	40 ea       	ldi	r20, 0xA0	; 160
    961c:	50 ec       	ldi	r21, 0xC0	; 192
    961e:	bc 01       	movw	r22, r24
    9620:	cd 01       	movw	r24, r26
    9622:	0e 94 4c 53 	call	0xa698	; 0xa698 <__gesf2>
    9626:	18 16       	cp	r1, r24
    9628:	0c f0       	brlt	.+2      	; 0x962c <fs_2+0x54>
	{
			servo_init();
			//set_servo(100);
			flightState ++;
	}
}
    962a:	52 c0       	rjmp	.+164    	; 0x96d0 <fs_2+0xf8>
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
		&& abs(accelHeight - altitude) < FS2_MAX_HEIGHT_DRIFT 
    962c:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    9630:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    9634:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    9638:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    963c:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    9640:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    9644:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    9648:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    964c:	bc 01       	movw	r22, r24
    964e:	cd 01       	movw	r24, r26
    9650:	e7 d5       	rcall	.+3022   	; 0xa220 <__subsf3>
    9652:	dc 01       	movw	r26, r24
    9654:	cb 01       	movw	r24, r22
    9656:	bc 01       	movw	r22, r24
    9658:	cd 01       	movw	r24, r26
    965a:	ed d6       	rcall	.+3546   	; 0xa436 <__fixsfsi>
    965c:	dc 01       	movw	r26, r24
    965e:	cb 01       	movw	r24, r22
    9660:	8f 3c       	cpi	r24, 0xCF	; 207
    9662:	9f 4f       	sbci	r25, 0xFF	; 255
    9664:	ac f1       	brlt	.+106    	; 0x96d0 <fs_2+0xf8>
    9666:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    966a:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    966e:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    9672:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    9676:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    967a:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    967e:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    9682:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    9686:	bc 01       	movw	r22, r24
    9688:	cd 01       	movw	r24, r26
    968a:	ca d5       	rcall	.+2964   	; 0xa220 <__subsf3>
    968c:	dc 01       	movw	r26, r24
    968e:	cb 01       	movw	r24, r22
    9690:	bc 01       	movw	r22, r24
    9692:	cd 01       	movw	r24, r26
    9694:	d0 d6       	rcall	.+3488   	; 0xa436 <__fixsfsi>
    9696:	dc 01       	movw	r26, r24
    9698:	cb 01       	movw	r24, r22
    969a:	c2 97       	sbiw	r24, 0x32	; 50
    969c:	cc f4       	brge	.+50     	; 0x96d0 <fs_2+0xf8>
		&& altitude < FS2_MAX_ALTITUDE)
    969e:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <altitude>
    96a2:	90 91 62 22 	lds	r25, 0x2262	; 0x802262 <altitude+0x1>
    96a6:	a0 91 63 22 	lds	r26, 0x2263	; 0x802263 <altitude+0x2>
    96aa:	b0 91 64 22 	lds	r27, 0x2264	; 0x802264 <altitude+0x3>
    96ae:	20 e0       	ldi	r18, 0x00	; 0
    96b0:	30 e0       	ldi	r19, 0x00	; 0
    96b2:	46 ee       	ldi	r20, 0xE6	; 230
    96b4:	53 e4       	ldi	r21, 0x43	; 67
    96b6:	bc 01       	movw	r22, r24
    96b8:	cd 01       	movw	r24, r26
    96ba:	17 d6       	rcall	.+3118   	; 0xa2ea <__cmpsf2>
    96bc:	88 23       	and	r24, r24
    96be:	0c f0       	brlt	.+2      	; 0x96c2 <fs_2+0xea>
	{
			servo_init();
			//set_servo(100);
			flightState ++;
	}
}
    96c0:	07 c0       	rjmp	.+14     	; 0x96d0 <fs_2+0xf8>
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
		&& abs(accelHeight - altitude) < FS2_MAX_HEIGHT_DRIFT 
		&& altitude < FS2_MAX_ALTITUDE)
	{
			servo_init();
    96c2:	0e 94 fe 19 	call	0x33fc	; 0x33fc <servo_init>
			//set_servo(100);
			flightState ++;
    96c6:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <flightState>
    96ca:	8f 5f       	subi	r24, 0xFF	; 255
    96cc:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <flightState>
	}
}
    96d0:	00 00       	nop
    96d2:	df 91       	pop	r29
    96d4:	cf 91       	pop	r28
    96d6:	08 95       	ret

000096d8 <fs_3>:
void fs_3()
{
    96d8:	cf 93       	push	r28
    96da:	df 93       	push	r29
    96dc:	cd b7       	in	r28, 0x3d	; 61
    96de:	de b7       	in	r29, 0x3e	; 62
	// get altitude and vertical velocity
	// check nominal velocity
	// if altitude is < 40m and velocity < 1 m/s -->> landed
	//   Turn buzzer on
	//   stop transmitting
	if(abs(velocity) < FS3_MAX_VEL 
    96e0:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <velocity>
    96e4:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <velocity+0x1>
    96e8:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <velocity+0x2>
    96ec:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <velocity+0x3>
    96f0:	bc 01       	movw	r22, r24
    96f2:	cd 01       	movw	r24, r26
    96f4:	a0 d6       	rcall	.+3392   	; 0xa436 <__fixsfsi>
    96f6:	dc 01       	movw	r26, r24
    96f8:	cb 01       	movw	r24, r22
    96fa:	8e 3f       	cpi	r24, 0xFE	; 254
    96fc:	9f 4f       	sbci	r25, 0xFF	; 255
    96fe:	0c f4       	brge	.+2      	; 0x9702 <fs_3+0x2a>
    9700:	81 c0       	rjmp	.+258    	; 0x9804 <fs_3+0x12c>
    9702:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <velocity>
    9706:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <velocity+0x1>
    970a:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <velocity+0x2>
    970e:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <velocity+0x3>
    9712:	bc 01       	movw	r22, r24
    9714:	cd 01       	movw	r24, r26
    9716:	8f d6       	rcall	.+3358   	; 0xa436 <__fixsfsi>
    9718:	dc 01       	movw	r26, r24
    971a:	cb 01       	movw	r24, r22
    971c:	03 97       	sbiw	r24, 0x03	; 3
    971e:	0c f0       	brlt	.+2      	; 0x9722 <fs_3+0x4a>
    9720:	71 c0       	rjmp	.+226    	; 0x9804 <fs_3+0x12c>
		&& abs(accZ) < FS3_MAX_ACCEL
    9722:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <accZ>
    9726:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <accZ+0x1>
    972a:	a0 91 39 22 	lds	r26, 0x2239	; 0x802239 <accZ+0x2>
    972e:	b0 91 3a 22 	lds	r27, 0x223A	; 0x80223a <accZ+0x3>
    9732:	bc 01       	movw	r22, r24
    9734:	cd 01       	movw	r24, r26
    9736:	7f d6       	rcall	.+3326   	; 0xa436 <__fixsfsi>
    9738:	dc 01       	movw	r26, r24
    973a:	cb 01       	movw	r24, r22
    973c:	87 3f       	cpi	r24, 0xF7	; 247
    973e:	9f 4f       	sbci	r25, 0xFF	; 255
    9740:	0c f4       	brge	.+2      	; 0x9744 <fs_3+0x6c>
    9742:	60 c0       	rjmp	.+192    	; 0x9804 <fs_3+0x12c>
    9744:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <accZ>
    9748:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <accZ+0x1>
    974c:	a0 91 39 22 	lds	r26, 0x2239	; 0x802239 <accZ+0x2>
    9750:	b0 91 3a 22 	lds	r27, 0x223A	; 0x80223a <accZ+0x3>
    9754:	bc 01       	movw	r22, r24
    9756:	cd 01       	movw	r24, r26
    9758:	6e d6       	rcall	.+3292   	; 0xa436 <__fixsfsi>
    975a:	dc 01       	movw	r26, r24
    975c:	cb 01       	movw	r24, r22
    975e:	0a 97       	sbiw	r24, 0x0a	; 10
    9760:	0c f0       	brlt	.+2      	; 0x9764 <fs_3+0x8c>
    9762:	50 c0       	rjmp	.+160    	; 0x9804 <fs_3+0x12c>
		&& abs(accelHeight - altitude) < FS3_MAX_HEIGHT_DRIFT
    9764:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    9768:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    976c:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    9770:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    9774:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    9778:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    977c:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    9780:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    9784:	bc 01       	movw	r22, r24
    9786:	cd 01       	movw	r24, r26
    9788:	4b d5       	rcall	.+2710   	; 0xa220 <__subsf3>
    978a:	dc 01       	movw	r26, r24
    978c:	cb 01       	movw	r24, r22
    978e:	bc 01       	movw	r22, r24
    9790:	cd 01       	movw	r24, r26
    9792:	51 d6       	rcall	.+3234   	; 0xa436 <__fixsfsi>
    9794:	dc 01       	movw	r26, r24
    9796:	cb 01       	movw	r24, r22
    9798:	8f 3c       	cpi	r24, 0xCF	; 207
    979a:	9f 4f       	sbci	r25, 0xFF	; 255
    979c:	9c f1       	brlt	.+102    	; 0x9804 <fs_3+0x12c>
    979e:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <accelHeight>
    97a2:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <accelHeight+0x1>
    97a6:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <accelHeight+0x2>
    97aa:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <accelHeight+0x3>
    97ae:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <altitude>
    97b2:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <altitude+0x1>
    97b6:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <altitude+0x2>
    97ba:	50 91 64 22 	lds	r21, 0x2264	; 0x802264 <altitude+0x3>
    97be:	bc 01       	movw	r22, r24
    97c0:	cd 01       	movw	r24, r26
    97c2:	2e d5       	rcall	.+2652   	; 0xa220 <__subsf3>
    97c4:	dc 01       	movw	r26, r24
    97c6:	cb 01       	movw	r24, r22
    97c8:	bc 01       	movw	r22, r24
    97ca:	cd 01       	movw	r24, r26
    97cc:	34 d6       	rcall	.+3176   	; 0xa436 <__fixsfsi>
    97ce:	dc 01       	movw	r26, r24
    97d0:	cb 01       	movw	r24, r22
    97d2:	c2 97       	sbiw	r24, 0x32	; 50
    97d4:	bc f4       	brge	.+46     	; 0x9804 <fs_3+0x12c>
		&& altitude > FS3_MAX_ALTITUDE)
    97d6:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <altitude>
    97da:	90 91 62 22 	lds	r25, 0x2262	; 0x802262 <altitude+0x1>
    97de:	a0 91 63 22 	lds	r26, 0x2263	; 0x802263 <altitude+0x2>
    97e2:	b0 91 64 22 	lds	r27, 0x2264	; 0x802264 <altitude+0x3>
    97e6:	20 e0       	ldi	r18, 0x00	; 0
    97e8:	30 e0       	ldi	r19, 0x00	; 0
    97ea:	40 ea       	ldi	r20, 0xA0	; 160
    97ec:	52 e4       	ldi	r21, 0x42	; 66
    97ee:	bc 01       	movw	r22, r24
    97f0:	cd 01       	movw	r24, r26
    97f2:	52 d7       	rcall	.+3748   	; 0xa698 <__gesf2>
    97f4:	18 16       	cp	r1, r24
    97f6:	0c f0       	brlt	.+2      	; 0x97fa <fs_3+0x122>
	{
			buzz_on();
			blockTransmission = true;
	}
}
    97f8:	05 c0       	rjmp	.+10     	; 0x9804 <fs_3+0x12c>
	if(abs(velocity) < FS3_MAX_VEL 
		&& abs(accZ) < FS3_MAX_ACCEL
		&& abs(accelHeight - altitude) < FS3_MAX_HEIGHT_DRIFT
		&& altitude > FS3_MAX_ALTITUDE)
	{
			buzz_on();
    97fa:	0e 94 1c 1a 	call	0x3438	; 0x3438 <buzz_on>
			blockTransmission = true;
    97fe:	81 e0       	ldi	r24, 0x01	; 1
    9800:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <blockTransmission>
	}
}
    9804:	00 00       	nop
    9806:	df 91       	pop	r29
    9808:	cf 91       	pop	r28
    980a:	08 95       	ret

0000980c <main>:




int main (void)
{
    980c:	2f 92       	push	r2
    980e:	3f 92       	push	r3
    9810:	4f 92       	push	r4
    9812:	5f 92       	push	r5
    9814:	6f 92       	push	r6
    9816:	7f 92       	push	r7
    9818:	8f 92       	push	r8
    981a:	9f 92       	push	r9
    981c:	af 92       	push	r10
    981e:	bf 92       	push	r11
    9820:	cf 92       	push	r12
    9822:	df 92       	push	r13
    9824:	ef 92       	push	r14
    9826:	ff 92       	push	r15
    9828:	0f 93       	push	r16
    982a:	1f 93       	push	r17
    982c:	cf 93       	push	r28
    982e:	df 93       	push	r29
    9830:	cd b7       	in	r28, 0x3d	; 61
    9832:	de b7       	in	r29, 0x3e	; 62
    9834:	cb 55       	subi	r28, 0x5B	; 91
    9836:	d1 09       	sbc	r29, r1
    9838:	cd bf       	out	0x3d, r28	; 61
    983a:	de bf       	out	0x3e, r29	; 62
	blockTransmission = false;
    983c:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <blockTransmission>
	board_init();
    9840:	18 da       	rcall	.-3024   	; 0x8c72 <board_init>
	//TODO: HANDLE RESETS
	
	
	**/
	
	sysclk_init();
    9842:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <sysclk_init>
	rtc_init();
    9846:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <rtc_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    984a:	fa dc       	rcall	.-1548   	; 0x9240 <uart_terminal_init>
	newOLogInit();
    984c:	0e 94 06 2b 	call	0x560c	; 0x560c <newOLogInit>

	if(DEBUG) printf("uart is working\n");
    9850:	84 e6       	ldi	r24, 0x64	; 100
    9852:	91 e2       	ldi	r25, 0x21	; 33
    9854:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
	
	
	spi_init_module();
    9858:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <spi_init_module>
	
	

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    985c:	67 dd       	rcall	.-1330   	; 0x932c <pmic_init>
    985e:	81 e0       	ldi	r24, 0x01	; 1
    9860:	72 dd       	rcall	.-1308   	; 0x9346 <pmic_set_scheduling>
	irq_initialize_vectors();
    9862:	80 ea       	ldi	r24, 0xA0	; 160
    9864:	90 e0       	ldi	r25, 0x00	; 0
    9866:	27 e0       	ldi	r18, 0x07	; 7
    9868:	fc 01       	movw	r30, r24
    986a:	22 83       	std	Z+2, r18	; 0x02
	cpu_irq_enable();
    986c:	78 94       	sei
	
	init_GPS_pins_and_usart();
    986e:	0e 94 62 29 	call	0x52c4	; 0x52c4 <init_GPS_pins_and_usart>
	init_gps_interrupts();
    9872:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <init_gps_interrupts>
	init_gps_buffers();	
    9876:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <init_gps_buffers>
	//imu_init();
	//delay_s(1);
	xbee_init();
    987a:	0e 94 81 22 	call	0x4502	; 0x4502 <xbee_init>
	

	thermistor_init();
    987e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <thermistor_init>
	volt_init();
    9882:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <volt_init>

	uint8_t servoPos = 0;
	//set_servo(0);
	
	buzz_on();
    9886:	19 82       	std	Y+1, r1	; 0x01
    9888:	0e 94 1c 1a 	call	0x3438	; 0x3438 <buzz_on>
	delay_ms(1000);
    988c:	38 dd       	rcall	.-1424   	; 0x92fe <sysclk_get_cpu_hz>
    988e:	dc 01       	movw	r26, r24
    9890:	cb 01       	movw	r24, r22
    9892:	8c 01       	movw	r16, r24
    9894:	9d 01       	movw	r18, r26
    9896:	40 e0       	ldi	r20, 0x00	; 0
    9898:	50 e0       	ldi	r21, 0x00	; 0
    989a:	ba 01       	movw	r22, r20
    989c:	0c ab       	std	Y+52, r16	; 0x34
    989e:	1d ab       	std	Y+53, r17	; 0x35
    98a0:	2e ab       	std	Y+54, r18	; 0x36
    98a2:	3f ab       	std	Y+55, r19	; 0x37
    98a4:	48 af       	std	Y+56, r20	; 0x38
    98a6:	59 af       	std	Y+57, r21	; 0x39
    98a8:	6a af       	std	Y+58, r22	; 0x3a
    98aa:	7b af       	std	Y+59, r23	; 0x3b
    98ac:	2c a8       	ldd	r2, Y+52	; 0x34
    98ae:	3d a8       	ldd	r3, Y+53	; 0x35
    98b0:	4e a8       	ldd	r4, Y+54	; 0x36
    98b2:	5f a8       	ldd	r5, Y+55	; 0x37
    98b4:	68 ac       	ldd	r6, Y+56	; 0x38
    98b6:	79 ac       	ldd	r7, Y+57	; 0x39
    98b8:	8a ac       	ldd	r8, Y+58	; 0x3a
    98ba:	9b ac       	ldd	r9, Y+59	; 0x3b
    98bc:	22 2d       	mov	r18, r2
    98be:	33 2d       	mov	r19, r3
    98c0:	44 2d       	mov	r20, r4
    98c2:	55 2d       	mov	r21, r5
    98c4:	66 2d       	mov	r22, r6
    98c6:	77 2d       	mov	r23, r7
    98c8:	88 2d       	mov	r24, r8
    98ca:	99 2d       	mov	r25, r9
    98cc:	02 e0       	ldi	r16, 0x02	; 2
    98ce:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    98d2:	a2 2e       	mov	r10, r18
    98d4:	b3 2e       	mov	r11, r19
    98d6:	c4 2e       	mov	r12, r20
    98d8:	d5 2e       	mov	r13, r21
    98da:	e6 2e       	mov	r14, r22
    98dc:	f7 2e       	mov	r15, r23
    98de:	08 2f       	mov	r16, r24
    98e0:	19 2f       	mov	r17, r25
    98e2:	2a 2c       	mov	r2, r10
    98e4:	3b 2c       	mov	r3, r11
    98e6:	4c 2c       	mov	r4, r12
    98e8:	5d 2c       	mov	r5, r13
    98ea:	6e 2c       	mov	r6, r14
    98ec:	7f 2c       	mov	r7, r15
    98ee:	80 2e       	mov	r8, r16
    98f0:	91 2e       	mov	r9, r17
    98f2:	22 2d       	mov	r18, r2
    98f4:	33 2d       	mov	r19, r3
    98f6:	44 2d       	mov	r20, r4
    98f8:	55 2d       	mov	r21, r5
    98fa:	66 2d       	mov	r22, r6
    98fc:	77 2d       	mov	r23, r7
    98fe:	88 2d       	mov	r24, r8
    9900:	99 2d       	mov	r25, r9
    9902:	05 e0       	ldi	r16, 0x05	; 5
    9904:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    9908:	a2 2e       	mov	r10, r18
    990a:	b3 2e       	mov	r11, r19
    990c:	c4 2e       	mov	r12, r20
    990e:	d5 2e       	mov	r13, r21
    9910:	e6 2e       	mov	r14, r22
    9912:	f7 2e       	mov	r15, r23
    9914:	08 2f       	mov	r16, r24
    9916:	19 2f       	mov	r17, r25
    9918:	2a 2d       	mov	r18, r10
    991a:	3b 2d       	mov	r19, r11
    991c:	4c 2d       	mov	r20, r12
    991e:	5d 2d       	mov	r21, r13
    9920:	6e 2d       	mov	r22, r14
    9922:	7f 2d       	mov	r23, r15
    9924:	80 2f       	mov	r24, r16
    9926:	91 2f       	mov	r25, r17
    9928:	a2 2c       	mov	r10, r2
    992a:	b3 2c       	mov	r11, r3
    992c:	c4 2c       	mov	r12, r4
    992e:	d5 2c       	mov	r13, r5
    9930:	e6 2c       	mov	r14, r6
    9932:	f7 2c       	mov	r15, r7
    9934:	08 2d       	mov	r16, r8
    9936:	19 2d       	mov	r17, r9
    9938:	0e 94 df 58 	call	0xb1be	; 0xb1be <__subdi3>
    993c:	a2 2e       	mov	r10, r18
    993e:	b3 2e       	mov	r11, r19
    9940:	c4 2e       	mov	r12, r20
    9942:	d5 2e       	mov	r13, r21
    9944:	e6 2e       	mov	r14, r22
    9946:	f7 2e       	mov	r15, r23
    9948:	08 2f       	mov	r16, r24
    994a:	19 2f       	mov	r17, r25
    994c:	2a 2d       	mov	r18, r10
    994e:	3b 2d       	mov	r19, r11
    9950:	4c 2d       	mov	r20, r12
    9952:	5d 2d       	mov	r21, r13
    9954:	6e 2d       	mov	r22, r14
    9956:	7f 2d       	mov	r23, r15
    9958:	80 2f       	mov	r24, r16
    995a:	91 2f       	mov	r25, r17
    995c:	ac a8       	ldd	r10, Y+52	; 0x34
    995e:	bd a8       	ldd	r11, Y+53	; 0x35
    9960:	ce a8       	ldd	r12, Y+54	; 0x36
    9962:	df a8       	ldd	r13, Y+55	; 0x37
    9964:	e8 ac       	ldd	r14, Y+56	; 0x38
    9966:	f9 ac       	ldd	r15, Y+57	; 0x39
    9968:	0a ad       	ldd	r16, Y+58	; 0x3a
    996a:	1b ad       	ldd	r17, Y+59	; 0x3b
    996c:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    9970:	a2 2e       	mov	r10, r18
    9972:	b3 2e       	mov	r11, r19
    9974:	c4 2e       	mov	r12, r20
    9976:	d5 2e       	mov	r13, r21
    9978:	e6 2e       	mov	r14, r22
    997a:	f7 2e       	mov	r15, r23
    997c:	08 2f       	mov	r16, r24
    997e:	19 2f       	mov	r17, r25
    9980:	2a 2d       	mov	r18, r10
    9982:	3b 2d       	mov	r19, r11
    9984:	4c 2d       	mov	r20, r12
    9986:	5d 2d       	mov	r21, r13
    9988:	6e 2d       	mov	r22, r14
    998a:	7f 2d       	mov	r23, r15
    998c:	80 2f       	mov	r24, r16
    998e:	91 2f       	mov	r25, r17
    9990:	03 e0       	ldi	r16, 0x03	; 3
    9992:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    9996:	22 2e       	mov	r2, r18
    9998:	33 2e       	mov	r3, r19
    999a:	44 2e       	mov	r4, r20
    999c:	55 2e       	mov	r5, r21
    999e:	66 2e       	mov	r6, r22
    99a0:	77 2e       	mov	r7, r23
    99a2:	88 2e       	mov	r8, r24
    99a4:	99 2e       	mov	r9, r25
    99a6:	a2 2c       	mov	r10, r2
    99a8:	b3 2c       	mov	r11, r3
    99aa:	c4 2c       	mov	r12, r4
    99ac:	d5 2c       	mov	r13, r5
    99ae:	e6 2c       	mov	r14, r6
    99b0:	f7 2c       	mov	r15, r7
    99b2:	08 2d       	mov	r16, r8
    99b4:	19 2d       	mov	r17, r9
    99b6:	2a 2c       	mov	r2, r10
    99b8:	3b 2c       	mov	r3, r11
    99ba:	4c 2c       	mov	r4, r12
    99bc:	5d 2c       	mov	r5, r13
    99be:	6e 2c       	mov	r6, r14
    99c0:	7f 2c       	mov	r7, r15
    99c2:	80 2e       	mov	r8, r16
    99c4:	91 2e       	mov	r9, r17
    99c6:	0f 2e       	mov	r0, r31
    99c8:	f6 e0       	ldi	r31, 0x06	; 6
    99ca:	af 2e       	mov	r10, r31
    99cc:	f0 2d       	mov	r31, r0
    99ce:	b1 2c       	mov	r11, r1
    99d0:	c1 2c       	mov	r12, r1
    99d2:	d1 2c       	mov	r13, r1
    99d4:	e1 2c       	mov	r14, r1
    99d6:	f1 2c       	mov	r15, r1
    99d8:	00 e0       	ldi	r16, 0x00	; 0
    99da:	10 e0       	ldi	r17, 0x00	; 0
    99dc:	22 2d       	mov	r18, r2
    99de:	33 2d       	mov	r19, r3
    99e0:	44 2d       	mov	r20, r4
    99e2:	55 2d       	mov	r21, r5
    99e4:	66 2d       	mov	r22, r6
    99e6:	77 2d       	mov	r23, r7
    99e8:	88 2d       	mov	r24, r8
    99ea:	99 2d       	mov	r25, r9
    99ec:	0e 94 37 58 	call	0xb06e	; 0xb06e <__udivdi3>
    99f0:	22 2e       	mov	r2, r18
    99f2:	33 2e       	mov	r3, r19
    99f4:	44 2e       	mov	r4, r20
    99f6:	55 2e       	mov	r5, r21
    99f8:	66 2e       	mov	r6, r22
    99fa:	77 2e       	mov	r7, r23
    99fc:	88 2e       	mov	r8, r24
    99fe:	99 2e       	mov	r9, r25
    9a00:	a2 2c       	mov	r10, r2
    9a02:	b3 2c       	mov	r11, r3
    9a04:	c4 2c       	mov	r12, r4
    9a06:	d5 2c       	mov	r13, r5
    9a08:	e6 2c       	mov	r14, r6
    9a0a:	f7 2c       	mov	r15, r7
    9a0c:	08 2d       	mov	r16, r8
    9a0e:	19 2d       	mov	r17, r9
    9a10:	2a 2d       	mov	r18, r10
    9a12:	3b 2d       	mov	r19, r11
    9a14:	4c 2d       	mov	r20, r12
    9a16:	5d 2d       	mov	r21, r13
    9a18:	6e 2d       	mov	r22, r14
    9a1a:	7f 2d       	mov	r23, r15
    9a1c:	80 2f       	mov	r24, r16
    9a1e:	91 2f       	mov	r25, r17
    9a20:	29 51       	subi	r18, 0x19	; 25
    9a22:	3c 4f       	sbci	r19, 0xFC	; 252
    9a24:	4f 4f       	sbci	r20, 0xFF	; 255
    9a26:	5f 4f       	sbci	r21, 0xFF	; 255
    9a28:	6f 4f       	sbci	r22, 0xFF	; 255
    9a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    9a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a30:	a2 2e       	mov	r10, r18
    9a32:	b3 2e       	mov	r11, r19
    9a34:	c4 2e       	mov	r12, r20
    9a36:	d5 2e       	mov	r13, r21
    9a38:	e6 2e       	mov	r14, r22
    9a3a:	f7 2e       	mov	r15, r23
    9a3c:	08 2f       	mov	r16, r24
    9a3e:	19 2f       	mov	r17, r25
    9a40:	2a 2d       	mov	r18, r10
    9a42:	3b 2d       	mov	r19, r11
    9a44:	4c 2d       	mov	r20, r12
    9a46:	5d 2d       	mov	r21, r13
    9a48:	6e 2d       	mov	r22, r14
    9a4a:	7f 2d       	mov	r23, r15
    9a4c:	80 2f       	mov	r24, r16
    9a4e:	91 2f       	mov	r25, r17
    9a50:	60 d5       	rcall	.+2752   	; 0xa512 <__floatundisf>
    9a52:	dc 01       	movw	r26, r24
    9a54:	cb 01       	movw	r24, r22
    9a56:	20 e0       	ldi	r18, 0x00	; 0
    9a58:	30 e0       	ldi	r19, 0x00	; 0
    9a5a:	4a e7       	ldi	r20, 0x7A	; 122
    9a5c:	54 e4       	ldi	r21, 0x44	; 68
    9a5e:	bc 01       	movw	r22, r24
    9a60:	cd 01       	movw	r24, r26
    9a62:	47 d4       	rcall	.+2190   	; 0xa2f2 <__divsf3>
    9a64:	dc 01       	movw	r26, r24
    9a66:	cb 01       	movw	r24, r22
    9a68:	bc 01       	movw	r22, r24
    9a6a:	cd 01       	movw	r24, r26
    9a6c:	af d4       	rcall	.+2398   	; 0xa3cc <__fixunssfdi>
    9a6e:	a2 2e       	mov	r10, r18
    9a70:	b3 2e       	mov	r11, r19
    9a72:	c4 2e       	mov	r12, r20
    9a74:	d5 2e       	mov	r13, r21
    9a76:	e6 2e       	mov	r14, r22
    9a78:	f7 2e       	mov	r15, r23
    9a7a:	08 2f       	mov	r16, r24
    9a7c:	19 2f       	mov	r17, r25
    9a7e:	d6 01       	movw	r26, r12
    9a80:	c5 01       	movw	r24, r10
    9a82:	bc 01       	movw	r22, r24
    9a84:	cd 01       	movw	r24, r26
    9a86:	47 dc       	rcall	.-1906   	; 0x9316 <__portable_avr_delay_cycles>
	buzz_off();
    9a88:	0e 94 3a 1a 	call	0x3474	; 0x3474 <buzz_off>
	//xbeeWrite("hello There!");
	while (true)
	{
		
		
		printf("\ngood morning realterm");
    9a8c:	84 e7       	ldi	r24, 0x74	; 116
    9a8e:	91 e2       	ldi	r25, 0x21	; 33
    9a90:	89 2f       	mov	r24, r25
    9a92:	8f 93       	push	r24
    9a94:	84 e7       	ldi	r24, 0x74	; 116
    9a96:	91 e2       	ldi	r25, 0x21	; 33
    9a98:	8f 93       	push	r24
    9a9a:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    9a9e:	0f 90       	pop	r0
		//xbeeWrite("hello There! xbee");
		imu_update();
    9aa0:	0f 90       	pop	r0
    9aa2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <imu_update>
		
		
		/***
		Get Telemetry - Part of every flight state
		***/
		missionTime = ((float)rtc_get_time())/10.0;
    9aa6:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <rtc_get_time>
    9aaa:	dc 01       	movw	r26, r24
    9aac:	cb 01       	movw	r24, r22
    9aae:	bc 01       	movw	r22, r24
    9ab0:	cd 01       	movw	r24, r26
    9ab2:	f2 d4       	rcall	.+2532   	; 0xa498 <__floatunsisf>
    9ab4:	dc 01       	movw	r26, r24
    9ab6:	cb 01       	movw	r24, r22
    9ab8:	20 e0       	ldi	r18, 0x00	; 0
    9aba:	30 e0       	ldi	r19, 0x00	; 0
    9abc:	40 e2       	ldi	r20, 0x20	; 32
    9abe:	51 e4       	ldi	r21, 0x41	; 65
    9ac0:	bc 01       	movw	r22, r24
    9ac2:	cd 01       	movw	r24, r26
    9ac4:	16 d4       	rcall	.+2092   	; 0xa2f2 <__divsf3>
    9ac6:	dc 01       	movw	r26, r24
    9ac8:	cb 01       	movw	r24, r22
    9aca:	80 93 43 22 	sts	0x2243, r24	; 0x802243 <missionTime>
    9ace:	90 93 44 22 	sts	0x2244, r25	; 0x802244 <missionTime+0x1>
    9ad2:	a0 93 45 22 	sts	0x2245, r26	; 0x802245 <missionTime+0x2>
    9ad6:	b0 93 46 22 	sts	0x2246, r27	; 0x802246 <missionTime+0x3>
		pressure = getPressure();
    9ada:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <getPressure>
    9ade:	dc 01       	movw	r26, r24
    9ae0:	cb 01       	movw	r24, r22
    9ae2:	80 93 4b 22 	sts	0x224B, r24	; 0x80224b <pressure>
    9ae6:	90 93 4c 22 	sts	0x224C, r25	; 0x80224c <pressure+0x1>
    9aea:	a0 93 4d 22 	sts	0x224D, r26	; 0x80224d <pressure+0x2>
    9aee:	b0 93 4e 22 	sts	0x224E, r27	; 0x80224e <pressure+0x3>
		printf("%f\n", pressure);
    9af2:	80 91 4b 22 	lds	r24, 0x224B	; 0x80224b <pressure>
    9af6:	90 91 4c 22 	lds	r25, 0x224C	; 0x80224c <pressure+0x1>
    9afa:	a0 91 4d 22 	lds	r26, 0x224D	; 0x80224d <pressure+0x2>
    9afe:	b0 91 4e 22 	lds	r27, 0x224E	; 0x80224e <pressure+0x3>
    9b02:	2b 2f       	mov	r18, r27
    9b04:	2f 93       	push	r18
    9b06:	2a 2f       	mov	r18, r26
    9b08:	2f 93       	push	r18
    9b0a:	29 2f       	mov	r18, r25
    9b0c:	2f 93       	push	r18
    9b0e:	8f 93       	push	r24
    9b10:	84 ee       	ldi	r24, 0xE4	; 228
    9b12:	90 e2       	ldi	r25, 0x20	; 32
    9b14:	89 2f       	mov	r24, r25
    9b16:	8f 93       	push	r24
    9b18:	84 ee       	ldi	r24, 0xE4	; 228
    9b1a:	90 e2       	ldi	r25, 0x20	; 32
    9b1c:	8f 93       	push	r24
    9b1e:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    9b22:	0f 90       	pop	r0
    9b24:	0f 90       	pop	r0
    9b26:	0f 90       	pop	r0
    9b28:	0f 90       	pop	r0
    9b2a:	0f 90       	pop	r0
    9b2c:	0f 90       	pop	r0
		char lat[10];
		char longi[10];
		char numSat[10];
		char gpstime[10];
		
		if (last_finished != SENTENCE_NONE)
    9b2e:	80 91 a6 25 	lds	r24, 0x25A6	; 0x8025a6 <last_finished>
    9b32:	88 23       	and	r24, r24
    9b34:	09 f4       	brne	.+2      	; 0x9b38 <main+0x32c>
    9b36:	80 c1       	rjmp	.+768    	; 0x9e38 <main+0x62c>
		{
			rbu8_read(&gps_receive_buffer,gpstmp,85);
    9b38:	45 e5       	ldi	r20, 0x55	; 85
    9b3a:	50 e0       	ldi	r21, 0x00	; 0
    9b3c:	65 e8       	ldi	r22, 0x85	; 133
    9b3e:	72 e2       	ldi	r23, 0x22	; 34
    9b40:	8e e9       	ldi	r24, 0x9E	; 158
    9b42:	95 e2       	ldi	r25, 0x25	; 37
    9b44:	0e 94 10 26 	call	0x4c20	; 0x4c20 <rbu8_read>
			altitude_from_gpgga(gps_receive_buffer.buffer,alt);
    9b48:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <gps_receive_buffer+0x6>
    9b4c:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <gps_receive_buffer+0x7>
    9b50:	9e 01       	movw	r18, r28
    9b52:	2e 5f       	subi	r18, 0xFE	; 254
    9b54:	3f 4f       	sbci	r19, 0xFF	; 255
    9b56:	b9 01       	movw	r22, r18
    9b58:	0e 94 86 29 	call	0x530c	; 0x530c <altitude_from_gpgga>
			latitude_from_gpgga(gps_receive_buffer.buffer,lat);
    9b5c:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <gps_receive_buffer+0x6>
    9b60:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <gps_receive_buffer+0x7>
    9b64:	9e 01       	movw	r18, r28
    9b66:	24 5f       	subi	r18, 0xF4	; 244
    9b68:	3f 4f       	sbci	r19, 0xFF	; 255
    9b6a:	b9 01       	movw	r22, r18
    9b6c:	0e 94 9f 29 	call	0x533e	; 0x533e <latitude_from_gpgga>
			longitude_from_gpgga(gps_receive_buffer.buffer,longi);
    9b70:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <gps_receive_buffer+0x6>
    9b74:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <gps_receive_buffer+0x7>
    9b78:	9e 01       	movw	r18, r28
    9b7a:	2a 5e       	subi	r18, 0xEA	; 234
    9b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    9b7e:	b9 01       	movw	r22, r18
    9b80:	0e 94 b8 29 	call	0x5370	; 0x5370 <longitude_from_gpgga>
			num_sat_from_gpgga(gps_receive_buffer.buffer,numSat);
    9b84:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <gps_receive_buffer+0x6>
    9b88:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <gps_receive_buffer+0x7>
    9b8c:	9e 01       	movw	r18, r28
    9b8e:	20 5e       	subi	r18, 0xE0	; 224
    9b90:	3f 4f       	sbci	r19, 0xFF	; 255
    9b92:	b9 01       	movw	r22, r18
    9b94:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <num_sat_from_gpgga>
			time_from_gpgga(gps_receive_buffer.buffer,gpstime);
    9b98:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <gps_receive_buffer+0x6>
    9b9c:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <gps_receive_buffer+0x7>
    9ba0:	9e 01       	movw	r18, r28
    9ba2:	26 5d       	subi	r18, 0xD6	; 214
    9ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    9ba6:	b9 01       	movw	r22, r18
    9ba8:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <time_from_gpgga>
			current_sentence=SENTENCE_NONE;
    9bac:	10 92 fd 25 	sts	0x25FD, r1	; 0x8025fd <current_sentence>
				printf("%s\n",gps_receive_buffer.buffer);
    9bb0:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <gps_receive_buffer+0x6>
    9bb4:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <gps_receive_buffer+0x7>
    9bb8:	0e 94 cc 5b 	call	0xb798	; 0xb798 <puts>
				delay_s(1);
    9bbc:	a0 db       	rcall	.-2240   	; 0x92fe <sysclk_get_cpu_hz>
    9bbe:	dc 01       	movw	r26, r24
    9bc0:	cb 01       	movw	r24, r22
    9bc2:	8c 01       	movw	r16, r24
    9bc4:	9d 01       	movw	r18, r26
    9bc6:	40 e0       	ldi	r20, 0x00	; 0
    9bc8:	50 e0       	ldi	r21, 0x00	; 0
    9bca:	ba 01       	movw	r22, r20
    9bcc:	0c af       	std	Y+60, r16	; 0x3c
    9bce:	1d af       	std	Y+61, r17	; 0x3d
    9bd0:	2e af       	std	Y+62, r18	; 0x3e
    9bd2:	3f af       	std	Y+63, r19	; 0x3f
    9bd4:	21 96       	adiw	r28, 0x01	; 1
    9bd6:	4f af       	std	Y+63, r20	; 0x3f
    9bd8:	21 97       	sbiw	r28, 0x01	; 1
    9bda:	22 96       	adiw	r28, 0x02	; 2
    9bdc:	5f af       	std	Y+63, r21	; 0x3f
    9bde:	22 97       	sbiw	r28, 0x02	; 2
    9be0:	23 96       	adiw	r28, 0x03	; 3
    9be2:	6f af       	std	Y+63, r22	; 0x3f
    9be4:	23 97       	sbiw	r28, 0x03	; 3
    9be6:	24 96       	adiw	r28, 0x04	; 4
    9be8:	7f af       	std	Y+63, r23	; 0x3f
    9bea:	24 97       	sbiw	r28, 0x04	; 4
    9bec:	2c ac       	ldd	r2, Y+60	; 0x3c
    9bee:	3d ac       	ldd	r3, Y+61	; 0x3d
    9bf0:	4e ac       	ldd	r4, Y+62	; 0x3e
    9bf2:	5f ac       	ldd	r5, Y+63	; 0x3f
    9bf4:	21 96       	adiw	r28, 0x01	; 1
    9bf6:	6f ac       	ldd	r6, Y+63	; 0x3f
    9bf8:	21 97       	sbiw	r28, 0x01	; 1
    9bfa:	22 96       	adiw	r28, 0x02	; 2
    9bfc:	7f ac       	ldd	r7, Y+63	; 0x3f
    9bfe:	22 97       	sbiw	r28, 0x02	; 2
    9c00:	23 96       	adiw	r28, 0x03	; 3
    9c02:	8f ac       	ldd	r8, Y+63	; 0x3f
    9c04:	23 97       	sbiw	r28, 0x03	; 3
    9c06:	24 96       	adiw	r28, 0x04	; 4
    9c08:	9f ac       	ldd	r9, Y+63	; 0x3f
    9c0a:	24 97       	sbiw	r28, 0x04	; 4
    9c0c:	22 2d       	mov	r18, r2
    9c0e:	33 2d       	mov	r19, r3
    9c10:	44 2d       	mov	r20, r4
    9c12:	55 2d       	mov	r21, r5
    9c14:	66 2d       	mov	r22, r6
    9c16:	77 2d       	mov	r23, r7
    9c18:	88 2d       	mov	r24, r8
    9c1a:	99 2d       	mov	r25, r9
    9c1c:	02 e0       	ldi	r16, 0x02	; 2
    9c1e:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    9c22:	a2 2e       	mov	r10, r18
    9c24:	b3 2e       	mov	r11, r19
    9c26:	c4 2e       	mov	r12, r20
    9c28:	d5 2e       	mov	r13, r21
    9c2a:	e6 2e       	mov	r14, r22
    9c2c:	f7 2e       	mov	r15, r23
    9c2e:	08 2f       	mov	r16, r24
    9c30:	19 2f       	mov	r17, r25
    9c32:	2a 2c       	mov	r2, r10
    9c34:	3b 2c       	mov	r3, r11
    9c36:	4c 2c       	mov	r4, r12
    9c38:	5d 2c       	mov	r5, r13
    9c3a:	6e 2c       	mov	r6, r14
    9c3c:	7f 2c       	mov	r7, r15
    9c3e:	80 2e       	mov	r8, r16
    9c40:	91 2e       	mov	r9, r17
    9c42:	22 2d       	mov	r18, r2
    9c44:	33 2d       	mov	r19, r3
    9c46:	44 2d       	mov	r20, r4
    9c48:	55 2d       	mov	r21, r5
    9c4a:	66 2d       	mov	r22, r6
    9c4c:	77 2d       	mov	r23, r7
    9c4e:	88 2d       	mov	r24, r8
    9c50:	99 2d       	mov	r25, r9
    9c52:	05 e0       	ldi	r16, 0x05	; 5
    9c54:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    9c58:	a2 2e       	mov	r10, r18
    9c5a:	b3 2e       	mov	r11, r19
    9c5c:	c4 2e       	mov	r12, r20
    9c5e:	d5 2e       	mov	r13, r21
    9c60:	e6 2e       	mov	r14, r22
    9c62:	f7 2e       	mov	r15, r23
    9c64:	08 2f       	mov	r16, r24
    9c66:	19 2f       	mov	r17, r25
    9c68:	2a 2d       	mov	r18, r10
    9c6a:	3b 2d       	mov	r19, r11
    9c6c:	4c 2d       	mov	r20, r12
    9c6e:	5d 2d       	mov	r21, r13
    9c70:	6e 2d       	mov	r22, r14
    9c72:	7f 2d       	mov	r23, r15
    9c74:	80 2f       	mov	r24, r16
    9c76:	91 2f       	mov	r25, r17
    9c78:	a2 2c       	mov	r10, r2
    9c7a:	b3 2c       	mov	r11, r3
    9c7c:	c4 2c       	mov	r12, r4
    9c7e:	d5 2c       	mov	r13, r5
    9c80:	e6 2c       	mov	r14, r6
    9c82:	f7 2c       	mov	r15, r7
    9c84:	08 2d       	mov	r16, r8
    9c86:	19 2d       	mov	r17, r9
    9c88:	0e 94 df 58 	call	0xb1be	; 0xb1be <__subdi3>
    9c8c:	a2 2e       	mov	r10, r18
    9c8e:	b3 2e       	mov	r11, r19
    9c90:	c4 2e       	mov	r12, r20
    9c92:	d5 2e       	mov	r13, r21
    9c94:	e6 2e       	mov	r14, r22
    9c96:	f7 2e       	mov	r15, r23
    9c98:	08 2f       	mov	r16, r24
    9c9a:	19 2f       	mov	r17, r25
    9c9c:	2a 2d       	mov	r18, r10
    9c9e:	3b 2d       	mov	r19, r11
    9ca0:	4c 2d       	mov	r20, r12
    9ca2:	5d 2d       	mov	r21, r13
    9ca4:	6e 2d       	mov	r22, r14
    9ca6:	7f 2d       	mov	r23, r15
    9ca8:	80 2f       	mov	r24, r16
    9caa:	91 2f       	mov	r25, r17
    9cac:	ac ac       	ldd	r10, Y+60	; 0x3c
    9cae:	bd ac       	ldd	r11, Y+61	; 0x3d
    9cb0:	ce ac       	ldd	r12, Y+62	; 0x3e
    9cb2:	df ac       	ldd	r13, Y+63	; 0x3f
    9cb4:	21 96       	adiw	r28, 0x01	; 1
    9cb6:	ef ac       	ldd	r14, Y+63	; 0x3f
    9cb8:	21 97       	sbiw	r28, 0x01	; 1
    9cba:	22 96       	adiw	r28, 0x02	; 2
    9cbc:	ff ac       	ldd	r15, Y+63	; 0x3f
    9cbe:	22 97       	sbiw	r28, 0x02	; 2
    9cc0:	23 96       	adiw	r28, 0x03	; 3
    9cc2:	0f ad       	ldd	r16, Y+63	; 0x3f
    9cc4:	23 97       	sbiw	r28, 0x03	; 3
    9cc6:	24 96       	adiw	r28, 0x04	; 4
    9cc8:	1f ad       	ldd	r17, Y+63	; 0x3f
    9cca:	24 97       	sbiw	r28, 0x04	; 4
    9ccc:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    9cd0:	a2 2e       	mov	r10, r18
    9cd2:	b3 2e       	mov	r11, r19
    9cd4:	c4 2e       	mov	r12, r20
    9cd6:	d5 2e       	mov	r13, r21
    9cd8:	e6 2e       	mov	r14, r22
    9cda:	f7 2e       	mov	r15, r23
    9cdc:	08 2f       	mov	r16, r24
    9cde:	19 2f       	mov	r17, r25
    9ce0:	2a 2d       	mov	r18, r10
    9ce2:	3b 2d       	mov	r19, r11
    9ce4:	4c 2d       	mov	r20, r12
    9ce6:	5d 2d       	mov	r21, r13
    9ce8:	6e 2d       	mov	r22, r14
    9cea:	7f 2d       	mov	r23, r15
    9cec:	80 2f       	mov	r24, r16
    9cee:	91 2f       	mov	r25, r17
    9cf0:	03 e0       	ldi	r16, 0x03	; 3
    9cf2:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    9cf6:	22 2e       	mov	r2, r18
    9cf8:	33 2e       	mov	r3, r19
    9cfa:	44 2e       	mov	r4, r20
    9cfc:	55 2e       	mov	r5, r21
    9cfe:	66 2e       	mov	r6, r22
    9d00:	77 2e       	mov	r7, r23
    9d02:	88 2e       	mov	r8, r24
    9d04:	99 2e       	mov	r9, r25
    9d06:	a2 2c       	mov	r10, r2
    9d08:	b3 2c       	mov	r11, r3
    9d0a:	c4 2c       	mov	r12, r4
    9d0c:	d5 2c       	mov	r13, r5
    9d0e:	e6 2c       	mov	r14, r6
    9d10:	f7 2c       	mov	r15, r7
    9d12:	08 2d       	mov	r16, r8
    9d14:	19 2d       	mov	r17, r9
    9d16:	2a 2c       	mov	r2, r10
    9d18:	3b 2c       	mov	r3, r11
    9d1a:	4c 2c       	mov	r4, r12
    9d1c:	5d 2c       	mov	r5, r13
    9d1e:	6e 2c       	mov	r6, r14
    9d20:	7f 2c       	mov	r7, r15
    9d22:	80 2e       	mov	r8, r16
    9d24:	91 2e       	mov	r9, r17
    9d26:	0f 2e       	mov	r0, r31
    9d28:	f6 e0       	ldi	r31, 0x06	; 6
    9d2a:	af 2e       	mov	r10, r31
    9d2c:	f0 2d       	mov	r31, r0
    9d2e:	b1 2c       	mov	r11, r1
    9d30:	c1 2c       	mov	r12, r1
    9d32:	d1 2c       	mov	r13, r1
    9d34:	e1 2c       	mov	r14, r1
    9d36:	f1 2c       	mov	r15, r1
    9d38:	00 e0       	ldi	r16, 0x00	; 0
    9d3a:	10 e0       	ldi	r17, 0x00	; 0
    9d3c:	22 2d       	mov	r18, r2
    9d3e:	33 2d       	mov	r19, r3
    9d40:	44 2d       	mov	r20, r4
    9d42:	55 2d       	mov	r21, r5
    9d44:	66 2d       	mov	r22, r6
    9d46:	77 2d       	mov	r23, r7
    9d48:	88 2d       	mov	r24, r8
    9d4a:	99 2d       	mov	r25, r9
    9d4c:	0e 94 37 58 	call	0xb06e	; 0xb06e <__udivdi3>
    9d50:	22 2e       	mov	r2, r18
    9d52:	33 2e       	mov	r3, r19
    9d54:	44 2e       	mov	r4, r20
    9d56:	55 2e       	mov	r5, r21
    9d58:	66 2e       	mov	r6, r22
    9d5a:	77 2e       	mov	r7, r23
    9d5c:	88 2e       	mov	r8, r24
    9d5e:	99 2e       	mov	r9, r25
    9d60:	a2 2c       	mov	r10, r2
    9d62:	b3 2c       	mov	r11, r3
    9d64:	c4 2c       	mov	r12, r4
    9d66:	d5 2c       	mov	r13, r5
    9d68:	e6 2c       	mov	r14, r6
    9d6a:	f7 2c       	mov	r15, r7
    9d6c:	08 2d       	mov	r16, r8
    9d6e:	19 2d       	mov	r17, r9
    9d70:	2a 2d       	mov	r18, r10
    9d72:	3b 2d       	mov	r19, r11
    9d74:	4c 2d       	mov	r20, r12
    9d76:	5d 2d       	mov	r21, r13
    9d78:	6e 2d       	mov	r22, r14
    9d7a:	7f 2d       	mov	r23, r15
    9d7c:	80 2f       	mov	r24, r16
    9d7e:	91 2f       	mov	r25, r17
    9d80:	29 51       	subi	r18, 0x19	; 25
    9d82:	3c 4f       	sbci	r19, 0xFC	; 252
    9d84:	4f 4f       	sbci	r20, 0xFF	; 255
    9d86:	5f 4f       	sbci	r21, 0xFF	; 255
    9d88:	6f 4f       	sbci	r22, 0xFF	; 255
    9d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    9d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d90:	a2 2e       	mov	r10, r18
    9d92:	b3 2e       	mov	r11, r19
    9d94:	c4 2e       	mov	r12, r20
    9d96:	d5 2e       	mov	r13, r21
    9d98:	e6 2e       	mov	r14, r22
    9d9a:	f7 2e       	mov	r15, r23
    9d9c:	08 2f       	mov	r16, r24
    9d9e:	19 2f       	mov	r17, r25
    9da0:	2a 2d       	mov	r18, r10
    9da2:	3b 2d       	mov	r19, r11
    9da4:	4c 2d       	mov	r20, r12
    9da6:	5d 2d       	mov	r21, r13
    9da8:	6e 2d       	mov	r22, r14
    9daa:	7f 2d       	mov	r23, r15
    9dac:	80 2f       	mov	r24, r16
    9dae:	91 2f       	mov	r25, r17
    9db0:	b0 d3       	rcall	.+1888   	; 0xa512 <__floatundisf>
    9db2:	dc 01       	movw	r26, r24
    9db4:	cb 01       	movw	r24, r22
    9db6:	20 e0       	ldi	r18, 0x00	; 0
    9db8:	30 e0       	ldi	r19, 0x00	; 0
    9dba:	4a e7       	ldi	r20, 0x7A	; 122
    9dbc:	54 e4       	ldi	r21, 0x44	; 68
    9dbe:	bc 01       	movw	r22, r24
    9dc0:	cd 01       	movw	r24, r26
    9dc2:	97 d2       	rcall	.+1326   	; 0xa2f2 <__divsf3>
    9dc4:	dc 01       	movw	r26, r24
    9dc6:	cb 01       	movw	r24, r22
    9dc8:	bc 01       	movw	r22, r24
    9dca:	cd 01       	movw	r24, r26
    9dcc:	ff d2       	rcall	.+1534   	; 0xa3cc <__fixunssfdi>
    9dce:	a2 2e       	mov	r10, r18
    9dd0:	b3 2e       	mov	r11, r19
    9dd2:	c4 2e       	mov	r12, r20
    9dd4:	d5 2e       	mov	r13, r21
    9dd6:	e6 2e       	mov	r14, r22
    9dd8:	f7 2e       	mov	r15, r23
    9dda:	08 2f       	mov	r16, r24
    9ddc:	19 2f       	mov	r17, r25
    9dde:	d6 01       	movw	r26, r12
    9de0:	c5 01       	movw	r24, r10
    9de2:	bc 01       	movw	r22, r24
    9de4:	cd 01       	movw	r24, r26
    9de6:	97 da       	rcall	.-2770   	; 0x9316 <__portable_avr_delay_cycles>
				printf("alt=%s, lat=%s longi=%s, numsat=%s, gpstime=%s \n",alt,lat,longi,numSat,gpstime);
    9de8:	ce 01       	movw	r24, r28
    9dea:	8a 96       	adiw	r24, 0x2a	; 42
    9dec:	29 2f       	mov	r18, r25
    9dee:	2f 93       	push	r18
    9df0:	8f 93       	push	r24
    9df2:	ce 01       	movw	r24, r28
    9df4:	80 96       	adiw	r24, 0x20	; 32
    9df6:	29 2f       	mov	r18, r25
    9df8:	2f 93       	push	r18
    9dfa:	8f 93       	push	r24
    9dfc:	ce 01       	movw	r24, r28
    9dfe:	46 96       	adiw	r24, 0x16	; 22
    9e00:	29 2f       	mov	r18, r25
    9e02:	2f 93       	push	r18
    9e04:	8f 93       	push	r24
    9e06:	ce 01       	movw	r24, r28
    9e08:	0c 96       	adiw	r24, 0x0c	; 12
    9e0a:	29 2f       	mov	r18, r25
    9e0c:	2f 93       	push	r18
    9e0e:	8f 93       	push	r24
    9e10:	ce 01       	movw	r24, r28
    9e12:	02 96       	adiw	r24, 0x02	; 2
    9e14:	29 2f       	mov	r18, r25
    9e16:	2f 93       	push	r18
    9e18:	8f 93       	push	r24
    9e1a:	8b e8       	ldi	r24, 0x8B	; 139
    9e1c:	91 e2       	ldi	r25, 0x21	; 33
    9e1e:	89 2f       	mov	r24, r25
    9e20:	8f 93       	push	r24
    9e22:	8b e8       	ldi	r24, 0x8B	; 139
    9e24:	91 e2       	ldi	r25, 0x21	; 33
    9e26:	8f 93       	push	r24
    9e28:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    9e2c:	2d b7       	in	r18, 0x3d	; 61
    9e2e:	3e b7       	in	r19, 0x3e	; 62
    9e30:	24 5f       	subi	r18, 0xF4	; 244
    9e32:	3f 4f       	sbci	r19, 0xFF	; 255
    9e34:	cd bf       	out	0x3d, r28	; 61
    9e36:	de bf       	out	0x3e, r29	; 62
	
		
		//printf("Sats: %u\n",GPSSats);
		////printf("Lat: %u\n",GPSLat);
		////printf("Long: %u\n",GPSLong);
		temp = getTemperature();
    9e38:	0e 94 3d 10 	call	0x207a	; 0x207a <getTemperature>
    9e3c:	dc 01       	movw	r26, r24
    9e3e:	cb 01       	movw	r24, r22
    9e40:	80 93 3f 22 	sts	0x223F, r24	; 0x80223f <temp>
    9e44:	90 93 40 22 	sts	0x2240, r25	; 0x802240 <temp+0x1>
    9e48:	a0 93 41 22 	sts	0x2241, r26	; 0x802241 <temp+0x2>
    9e4c:	b0 93 42 22 	sts	0x2242, r27	; 0x802242 <temp+0x3>
		printf("%f\n", temp);
    9e50:	80 91 3f 22 	lds	r24, 0x223F	; 0x80223f <temp>
    9e54:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <temp+0x1>
    9e58:	a0 91 41 22 	lds	r26, 0x2241	; 0x802241 <temp+0x2>
    9e5c:	b0 91 42 22 	lds	r27, 0x2242	; 0x802242 <temp+0x3>
    9e60:	2b 2f       	mov	r18, r27
    9e62:	2f 93       	push	r18
    9e64:	2a 2f       	mov	r18, r26
    9e66:	2f 93       	push	r18
    9e68:	29 2f       	mov	r18, r25
    9e6a:	2f 93       	push	r18
    9e6c:	8f 93       	push	r24
    9e6e:	84 ee       	ldi	r24, 0xE4	; 228
    9e70:	90 e2       	ldi	r25, 0x20	; 32
    9e72:	89 2f       	mov	r24, r25
    9e74:	8f 93       	push	r24
    9e76:	84 ee       	ldi	r24, 0xE4	; 228
    9e78:	90 e2       	ldi	r25, 0x20	; 32
    9e7a:	8f 93       	push	r24
    9e7c:	0e 94 b9 5b 	call	0xb772	; 0xb772 <printf>
    9e80:	0f 90       	pop	r0
    9e82:	0f 90       	pop	r0
    9e84:	0f 90       	pop	r0
    9e86:	0f 90       	pop	r0
    9e88:	0f 90       	pop	r0
		altitude = pressure ; // TODO: finish function
    9e8a:	0f 90       	pop	r0
    9e8c:	80 91 4b 22 	lds	r24, 0x224B	; 0x80224b <pressure>
    9e90:	90 91 4c 22 	lds	r25, 0x224C	; 0x80224c <pressure+0x1>
    9e94:	a0 91 4d 22 	lds	r26, 0x224D	; 0x80224d <pressure+0x2>
    9e98:	b0 91 4e 22 	lds	r27, 0x224E	; 0x80224e <pressure+0x3>
    9e9c:	bc 01       	movw	r22, r24
    9e9e:	cd 01       	movw	r24, r26
    9ea0:	fd d2       	rcall	.+1530   	; 0xa49c <__floatsisf>
    9ea2:	dc 01       	movw	r26, r24
    9ea4:	cb 01       	movw	r24, r22
    9ea6:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <altitude>
    9eaa:	90 93 62 22 	sts	0x2262, r25	; 0x802262 <altitude+0x1>
    9eae:	a0 93 63 22 	sts	0x2263, r26	; 0x802263 <altitude+0x2>
    9eb2:	b0 93 64 22 	sts	0x2264, r27	; 0x802264 <altitude+0x3>
		voltage = getVoltage();
    9eb6:	0e 94 0f 10 	call	0x201e	; 0x201e <getVoltage>
    9eba:	dc 01       	movw	r26, r24
    9ebc:	cb 01       	movw	r24, r22
    9ebe:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <voltage>
    9ec2:	90 93 48 22 	sts	0x2248, r25	; 0x802248 <voltage+0x1>
    9ec6:	a0 93 49 22 	sts	0x2249, r26	; 0x802249 <voltage+0x2>
    9eca:	b0 93 4a 22 	sts	0x224A, r27	; 0x80224a <voltage+0x3>
		velocity = imu_vel_z();
    9ece:	0e 94 a9 19 	call	0x3352	; 0x3352 <imu_vel_z>
    9ed2:	dc 01       	movw	r26, r24
    9ed4:	cb 01       	movw	r24, r22
    9ed6:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <velocity>
    9eda:	90 93 59 22 	sts	0x2259, r25	; 0x802259 <velocity+0x1>
    9ede:	a0 93 5a 22 	sts	0x225A, r26	; 0x80225a <velocity+0x2>
    9ee2:	b0 93 5b 22 	sts	0x225B, r27	; 0x80225b <velocity+0x3>
		accelHeight = imu_pos_z();
    9ee6:	0e 94 ba 19 	call	0x3374	; 0x3374 <imu_pos_z>
    9eea:	dc 01       	movw	r26, r24
    9eec:	cb 01       	movw	r24, r22
    9eee:	80 93 33 22 	sts	0x2233, r24	; 0x802233 <accelHeight>
    9ef2:	90 93 34 22 	sts	0x2234, r25	; 0x802234 <accelHeight+0x1>
    9ef6:	a0 93 35 22 	sts	0x2235, r26	; 0x802235 <accelHeight+0x2>
    9efa:	b0 93 36 22 	sts	0x2236, r27	; 0x802236 <accelHeight+0x3>
		accZ = imu_accel_z();
    9efe:	0e 94 98 19 	call	0x3330	; 0x3330 <imu_accel_z>
    9f02:	dc 01       	movw	r26, r24
    9f04:	cb 01       	movw	r24, r22
    9f06:	80 93 37 22 	sts	0x2237, r24	; 0x802237 <accZ>
    9f0a:	90 93 38 22 	sts	0x2238, r25	; 0x802238 <accZ+0x1>
    9f0e:	a0 93 39 22 	sts	0x2239, r26	; 0x802239 <accZ+0x2>
    9f12:	b0 93 3a 22 	sts	0x223A, r27	; 0x80223a <accZ+0x3>
		pitch = imu_pitch();
    9f16:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <imu_pitch>
    9f1a:	dc 01       	movw	r26, r24
    9f1c:	cb 01       	movw	r24, r22
    9f1e:	80 93 de 22 	sts	0x22DE, r24	; 0x8022de <pitch>
    9f22:	90 93 df 22 	sts	0x22DF, r25	; 0x8022df <pitch+0x1>
    9f26:	a0 93 e0 22 	sts	0x22E0, r26	; 0x8022e0 <pitch+0x2>
    9f2a:	b0 93 e1 22 	sts	0x22E1, r27	; 0x8022e1 <pitch+0x3>
		roll = imu_roll();
    9f2e:	0e 94 cb 19 	call	0x3396	; 0x3396 <imu_roll>
    9f32:	dc 01       	movw	r26, r24
    9f34:	cb 01       	movw	r24, r22
    9f36:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <roll>
    9f3a:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <roll+0x1>
    9f3e:	a0 93 e4 22 	sts	0x22E4, r26	; 0x8022e4 <roll+0x2>
    9f42:	b0 93 e5 22 	sts	0x22E5, r27	; 0x8022e5 <roll+0x3>
		heading = imu_heading();
    9f46:	0e 94 ed 19 	call	0x33da	; 0x33da <imu_heading>
    9f4a:	dc 01       	movw	r26, r24
    9f4c:	cb 01       	movw	r24, r22
    9f4e:	80 93 ee 24 	sts	0x24EE, r24	; 0x8024ee <heading>
    9f52:	90 93 ef 24 	sts	0x24EF, r25	; 0x8024ef <heading+0x1>
    9f56:	a0 93 f0 24 	sts	0x24F0, r26	; 0x8024f0 <heading+0x2>
    9f5a:	b0 93 f1 24 	sts	0x24F1, r27	; 0x8024f1 <heading+0x3>
		
		switch(flightState)
    9f5e:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <flightState>
    9f62:	88 2f       	mov	r24, r24
    9f64:	90 e0       	ldi	r25, 0x00	; 0
    9f66:	81 30       	cpi	r24, 0x01	; 1
    9f68:	91 05       	cpc	r25, r1
    9f6a:	71 f0       	breq	.+28     	; 0x9f88 <main+0x77c>
    9f6c:	82 30       	cpi	r24, 0x02	; 2
				break;
		    case 3:
				fs_3();
				break;
			default: 
				break;
    9f6e:	91 05       	cpc	r25, r1
		accZ = imu_accel_z();
		pitch = imu_pitch();
		roll = imu_roll();
		heading = imu_heading();
		
		switch(flightState)
    9f70:	1c f4       	brge	.+6      	; 0x9f78 <main+0x76c>
    9f72:	89 2b       	or	r24, r25
    9f74:	39 f0       	breq	.+14     	; 0x9f84 <main+0x778>
    9f76:	0e c0       	rjmp	.+28     	; 0x9f94 <main+0x788>
    9f78:	82 30       	cpi	r24, 0x02	; 2
				break;
		    case 3:
				fs_3();
				break;
			default: 
				break;
    9f7a:	91 05       	cpc	r25, r1
		heading = imu_heading();
		
		switch(flightState)
		{
			case 0:
				fs_0();
    9f7c:	39 f0       	breq	.+14     	; 0x9f8c <main+0x780>
    9f7e:	03 97       	sbiw	r24, 0x03	; 3
				break;
    9f80:	39 f0       	breq	.+14     	; 0x9f90 <main+0x784>
			case 1:
				fs_1();
    9f82:	08 c0       	rjmp	.+16     	; 0x9f94 <main+0x788>
    9f84:	0b da       	rcall	.-3050   	; 0x939c <fs_0>
				break;
    9f86:	06 c0       	rjmp	.+12     	; 0x9f94 <main+0x788>
			case 2:
				fs_2();
    9f88:	89 da       	rcall	.-2798   	; 0x949c <fs_1>
    9f8a:	04 c0       	rjmp	.+8      	; 0x9f94 <main+0x788>
				break;
    9f8c:	25 db       	rcall	.-2486   	; 0x95d8 <fs_2>
		    case 3:
				fs_3();
    9f8e:	02 c0       	rjmp	.+4      	; 0x9f94 <main+0x788>
    9f90:	a3 db       	rcall	.-2234   	; 0x96d8 <fs_3>
				break;
    9f92:	00 00       	nop
				break;
			
		};
		
			
		delay_ms(50);		
    9f94:	b4 d9       	rcall	.-3224   	; 0x92fe <sysclk_get_cpu_hz>
    9f96:	dc 01       	movw	r26, r24
    9f98:	cb 01       	movw	r24, r22
    9f9a:	9c 01       	movw	r18, r24
    9f9c:	ad 01       	movw	r20, r26
    9f9e:	60 e0       	ldi	r22, 0x00	; 0
    9fa0:	70 e0       	ldi	r23, 0x00	; 0
    9fa2:	cb 01       	movw	r24, r22
    9fa4:	82 2e       	mov	r8, r18
    9fa6:	93 2e       	mov	r9, r19
    9fa8:	a4 2e       	mov	r10, r20
    9faa:	b5 2e       	mov	r11, r21
    9fac:	c6 2e       	mov	r12, r22
    9fae:	d7 2e       	mov	r13, r23
    9fb0:	e8 2e       	mov	r14, r24
    9fb2:	f9 2e       	mov	r15, r25
    9fb4:	28 2d       	mov	r18, r8
    9fb6:	39 2d       	mov	r19, r9
    9fb8:	4a 2d       	mov	r20, r10
    9fba:	5b 2d       	mov	r21, r11
    9fbc:	6c 2d       	mov	r22, r12
    9fbe:	7d 2d       	mov	r23, r13
    9fc0:	8e 2d       	mov	r24, r14
    9fc2:	9f 2d       	mov	r25, r15
    9fc4:	01 e0       	ldi	r16, 0x01	; 1
    9fc6:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    9fca:	25 96       	adiw	r28, 0x05	; 5
    9fcc:	2f af       	std	Y+63, r18	; 0x3f
    9fce:	25 97       	sbiw	r28, 0x05	; 5
    9fd0:	26 96       	adiw	r28, 0x06	; 6
    9fd2:	3f af       	std	Y+63, r19	; 0x3f
    9fd4:	26 97       	sbiw	r28, 0x06	; 6
    9fd6:	27 96       	adiw	r28, 0x07	; 7
    9fd8:	4f af       	std	Y+63, r20	; 0x3f
    9fda:	27 97       	sbiw	r28, 0x07	; 7
    9fdc:	28 96       	adiw	r28, 0x08	; 8
    9fde:	5f af       	std	Y+63, r21	; 0x3f
    9fe0:	28 97       	sbiw	r28, 0x08	; 8
    9fe2:	29 96       	adiw	r28, 0x09	; 9
    9fe4:	6f af       	std	Y+63, r22	; 0x3f
    9fe6:	29 97       	sbiw	r28, 0x09	; 9
    9fe8:	2a 96       	adiw	r28, 0x0a	; 10
    9fea:	7f af       	std	Y+63, r23	; 0x3f
    9fec:	2a 97       	sbiw	r28, 0x0a	; 10
    9fee:	2b 96       	adiw	r28, 0x0b	; 11
    9ff0:	8f af       	std	Y+63, r24	; 0x3f
    9ff2:	2b 97       	sbiw	r28, 0x0b	; 11
    9ff4:	2c 96       	adiw	r28, 0x0c	; 12
    9ff6:	9f af       	std	Y+63, r25	; 0x3f
    9ff8:	2c 97       	sbiw	r28, 0x0c	; 12
    9ffa:	25 96       	adiw	r28, 0x05	; 5
    9ffc:	8f ac       	ldd	r8, Y+63	; 0x3f
    9ffe:	25 97       	sbiw	r28, 0x05	; 5
    a000:	26 96       	adiw	r28, 0x06	; 6
    a002:	9f ac       	ldd	r9, Y+63	; 0x3f
    a004:	26 97       	sbiw	r28, 0x06	; 6
    a006:	27 96       	adiw	r28, 0x07	; 7
    a008:	af ac       	ldd	r10, Y+63	; 0x3f
    a00a:	27 97       	sbiw	r28, 0x07	; 7
    a00c:	28 96       	adiw	r28, 0x08	; 8
    a00e:	bf ac       	ldd	r11, Y+63	; 0x3f
    a010:	28 97       	sbiw	r28, 0x08	; 8
    a012:	29 96       	adiw	r28, 0x09	; 9
    a014:	cf ac       	ldd	r12, Y+63	; 0x3f
    a016:	29 97       	sbiw	r28, 0x09	; 9
    a018:	2a 96       	adiw	r28, 0x0a	; 10
    a01a:	df ac       	ldd	r13, Y+63	; 0x3f
    a01c:	2a 97       	sbiw	r28, 0x0a	; 10
    a01e:	2b 96       	adiw	r28, 0x0b	; 11
    a020:	ef ac       	ldd	r14, Y+63	; 0x3f
    a022:	2b 97       	sbiw	r28, 0x0b	; 11
    a024:	2c 96       	adiw	r28, 0x0c	; 12
    a026:	ff ac       	ldd	r15, Y+63	; 0x3f
    a028:	2c 97       	sbiw	r28, 0x0c	; 12
    a02a:	28 2d       	mov	r18, r8
    a02c:	39 2d       	mov	r19, r9
    a02e:	4a 2d       	mov	r20, r10
    a030:	5b 2d       	mov	r21, r11
    a032:	6c 2d       	mov	r22, r12
    a034:	7d 2d       	mov	r23, r13
    a036:	8e 2d       	mov	r24, r14
    a038:	9f 2d       	mov	r25, r15
    a03a:	02 e0       	ldi	r16, 0x02	; 2
    a03c:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    a040:	2d 96       	adiw	r28, 0x0d	; 13
    a042:	2f af       	std	Y+63, r18	; 0x3f
    a044:	2d 97       	sbiw	r28, 0x0d	; 13
    a046:	2e 96       	adiw	r28, 0x0e	; 14
    a048:	3f af       	std	Y+63, r19	; 0x3f
    a04a:	2e 97       	sbiw	r28, 0x0e	; 14
    a04c:	2f 96       	adiw	r28, 0x0f	; 15
    a04e:	4f af       	std	Y+63, r20	; 0x3f
    a050:	2f 97       	sbiw	r28, 0x0f	; 15
    a052:	60 96       	adiw	r28, 0x10	; 16
    a054:	5f af       	std	Y+63, r21	; 0x3f
    a056:	60 97       	sbiw	r28, 0x10	; 16
    a058:	61 96       	adiw	r28, 0x11	; 17
    a05a:	6f af       	std	Y+63, r22	; 0x3f
    a05c:	61 97       	sbiw	r28, 0x11	; 17
    a05e:	62 96       	adiw	r28, 0x12	; 18
    a060:	7f af       	std	Y+63, r23	; 0x3f
    a062:	62 97       	sbiw	r28, 0x12	; 18
    a064:	63 96       	adiw	r28, 0x13	; 19
    a066:	8f af       	std	Y+63, r24	; 0x3f
    a068:	63 97       	sbiw	r28, 0x13	; 19
    a06a:	64 96       	adiw	r28, 0x14	; 20
    a06c:	9f af       	std	Y+63, r25	; 0x3f
    a06e:	64 97       	sbiw	r28, 0x14	; 20
    a070:	28 2d       	mov	r18, r8
    a072:	39 2d       	mov	r19, r9
    a074:	4a 2d       	mov	r20, r10
    a076:	5b 2d       	mov	r21, r11
    a078:	6c 2d       	mov	r22, r12
    a07a:	7d 2d       	mov	r23, r13
    a07c:	8e 2d       	mov	r24, r14
    a07e:	9f 2d       	mov	r25, r15
    a080:	2d 96       	adiw	r28, 0x0d	; 13
    a082:	af ac       	ldd	r10, Y+63	; 0x3f
    a084:	2d 97       	sbiw	r28, 0x0d	; 13
    a086:	2e 96       	adiw	r28, 0x0e	; 14
    a088:	bf ac       	ldd	r11, Y+63	; 0x3f
    a08a:	2e 97       	sbiw	r28, 0x0e	; 14
    a08c:	2f 96       	adiw	r28, 0x0f	; 15
    a08e:	cf ac       	ldd	r12, Y+63	; 0x3f
    a090:	2f 97       	sbiw	r28, 0x0f	; 15
    a092:	60 96       	adiw	r28, 0x10	; 16
    a094:	df ac       	ldd	r13, Y+63	; 0x3f
    a096:	60 97       	sbiw	r28, 0x10	; 16
    a098:	61 96       	adiw	r28, 0x11	; 17
    a09a:	ef ac       	ldd	r14, Y+63	; 0x3f
    a09c:	61 97       	sbiw	r28, 0x11	; 17
    a09e:	62 96       	adiw	r28, 0x12	; 18
    a0a0:	ff ac       	ldd	r15, Y+63	; 0x3f
    a0a2:	62 97       	sbiw	r28, 0x12	; 18
    a0a4:	63 96       	adiw	r28, 0x13	; 19
    a0a6:	0f ad       	ldd	r16, Y+63	; 0x3f
    a0a8:	63 97       	sbiw	r28, 0x13	; 19
    a0aa:	64 96       	adiw	r28, 0x14	; 20
    a0ac:	1f ad       	ldd	r17, Y+63	; 0x3f
    a0ae:	64 97       	sbiw	r28, 0x14	; 20
    a0b0:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    a0b4:	82 2e       	mov	r8, r18
    a0b6:	93 2e       	mov	r9, r19
    a0b8:	a4 2e       	mov	r10, r20
    a0ba:	b5 2e       	mov	r11, r21
    a0bc:	c6 2e       	mov	r12, r22
    a0be:	d7 2e       	mov	r13, r23
    a0c0:	e8 2e       	mov	r14, r24
    a0c2:	f9 2e       	mov	r15, r25
    a0c4:	28 2d       	mov	r18, r8
    a0c6:	39 2d       	mov	r19, r9
    a0c8:	4a 2d       	mov	r20, r10
    a0ca:	5b 2d       	mov	r21, r11
    a0cc:	6c 2d       	mov	r22, r12
    a0ce:	7d 2d       	mov	r23, r13
    a0d0:	8e 2d       	mov	r24, r14
    a0d2:	9f 2d       	mov	r25, r15
    a0d4:	02 e0       	ldi	r16, 0x02	; 2
    a0d6:	0e 94 93 58 	call	0xb126	; 0xb126 <__ashldi3>
    a0da:	65 96       	adiw	r28, 0x15	; 21
    a0dc:	2f af       	std	Y+63, r18	; 0x3f
    a0de:	65 97       	sbiw	r28, 0x15	; 21
    a0e0:	66 96       	adiw	r28, 0x16	; 22
    a0e2:	3f af       	std	Y+63, r19	; 0x3f
    a0e4:	66 97       	sbiw	r28, 0x16	; 22
    a0e6:	67 96       	adiw	r28, 0x17	; 23
    a0e8:	4f af       	std	Y+63, r20	; 0x3f
    a0ea:	67 97       	sbiw	r28, 0x17	; 23
    a0ec:	68 96       	adiw	r28, 0x18	; 24
    a0ee:	5f af       	std	Y+63, r21	; 0x3f
    a0f0:	68 97       	sbiw	r28, 0x18	; 24
    a0f2:	69 96       	adiw	r28, 0x19	; 25
    a0f4:	6f af       	std	Y+63, r22	; 0x3f
    a0f6:	69 97       	sbiw	r28, 0x19	; 25
    a0f8:	6a 96       	adiw	r28, 0x1a	; 26
    a0fa:	7f af       	std	Y+63, r23	; 0x3f
    a0fc:	6a 97       	sbiw	r28, 0x1a	; 26
    a0fe:	6b 96       	adiw	r28, 0x1b	; 27
    a100:	8f af       	std	Y+63, r24	; 0x3f
    a102:	6b 97       	sbiw	r28, 0x1b	; 27
    a104:	6c 96       	adiw	r28, 0x1c	; 28
    a106:	9f af       	std	Y+63, r25	; 0x3f
    a108:	6c 97       	sbiw	r28, 0x1c	; 28
    a10a:	28 2d       	mov	r18, r8
    a10c:	39 2d       	mov	r19, r9
    a10e:	4a 2d       	mov	r20, r10
    a110:	5b 2d       	mov	r21, r11
    a112:	6c 2d       	mov	r22, r12
    a114:	7d 2d       	mov	r23, r13
    a116:	8e 2d       	mov	r24, r14
    a118:	9f 2d       	mov	r25, r15
    a11a:	65 96       	adiw	r28, 0x15	; 21
    a11c:	af ac       	ldd	r10, Y+63	; 0x3f
    a11e:	65 97       	sbiw	r28, 0x15	; 21
    a120:	66 96       	adiw	r28, 0x16	; 22
    a122:	bf ac       	ldd	r11, Y+63	; 0x3f
    a124:	66 97       	sbiw	r28, 0x16	; 22
    a126:	67 96       	adiw	r28, 0x17	; 23
    a128:	cf ac       	ldd	r12, Y+63	; 0x3f
    a12a:	67 97       	sbiw	r28, 0x17	; 23
    a12c:	68 96       	adiw	r28, 0x18	; 24
    a12e:	df ac       	ldd	r13, Y+63	; 0x3f
    a130:	68 97       	sbiw	r28, 0x18	; 24
    a132:	69 96       	adiw	r28, 0x19	; 25
    a134:	ef ac       	ldd	r14, Y+63	; 0x3f
    a136:	69 97       	sbiw	r28, 0x19	; 25
    a138:	6a 96       	adiw	r28, 0x1a	; 26
    a13a:	ff ac       	ldd	r15, Y+63	; 0x3f
    a13c:	6a 97       	sbiw	r28, 0x1a	; 26
    a13e:	6b 96       	adiw	r28, 0x1b	; 27
    a140:	0f ad       	ldd	r16, Y+63	; 0x3f
    a142:	6b 97       	sbiw	r28, 0x1b	; 27
    a144:	6c 96       	adiw	r28, 0x1c	; 28
    a146:	1f ad       	ldd	r17, Y+63	; 0x3f
    a148:	6c 97       	sbiw	r28, 0x1c	; 28
    a14a:	0e 94 ca 58 	call	0xb194	; 0xb194 <__adddi3>
    a14e:	22 2e       	mov	r2, r18
    a150:	33 2e       	mov	r3, r19
    a152:	44 2e       	mov	r4, r20
    a154:	55 2e       	mov	r5, r21
    a156:	66 2e       	mov	r6, r22
    a158:	77 2e       	mov	r7, r23
    a15a:	88 2e       	mov	r8, r24
    a15c:	99 2e       	mov	r9, r25
    a15e:	0f 2e       	mov	r0, r31
    a160:	f6 e0       	ldi	r31, 0x06	; 6
    a162:	af 2e       	mov	r10, r31
    a164:	f0 2d       	mov	r31, r0
    a166:	b1 2c       	mov	r11, r1
    a168:	c1 2c       	mov	r12, r1
    a16a:	d1 2c       	mov	r13, r1
    a16c:	e1 2c       	mov	r14, r1
    a16e:	f1 2c       	mov	r15, r1
    a170:	00 e0       	ldi	r16, 0x00	; 0
    a172:	10 e0       	ldi	r17, 0x00	; 0
    a174:	22 2d       	mov	r18, r2
    a176:	33 2d       	mov	r19, r3
    a178:	44 2d       	mov	r20, r4
    a17a:	55 2d       	mov	r21, r5
    a17c:	66 2d       	mov	r22, r6
    a17e:	77 2d       	mov	r23, r7
    a180:	88 2d       	mov	r24, r8
    a182:	99 2d       	mov	r25, r9
    a184:	74 d7       	rcall	.+3816   	; 0xb06e <__udivdi3>
    a186:	22 2e       	mov	r2, r18
    a188:	33 2e       	mov	r3, r19
    a18a:	44 2e       	mov	r4, r20
    a18c:	55 2e       	mov	r5, r21
    a18e:	66 2e       	mov	r6, r22
    a190:	77 2e       	mov	r7, r23
    a192:	88 2e       	mov	r8, r24
    a194:	99 2e       	mov	r9, r25
    a196:	a2 2c       	mov	r10, r2
    a198:	b3 2c       	mov	r11, r3
    a19a:	c4 2c       	mov	r12, r4
    a19c:	d5 2c       	mov	r13, r5
    a19e:	e6 2c       	mov	r14, r6
    a1a0:	f7 2c       	mov	r15, r7
    a1a2:	08 2d       	mov	r16, r8
    a1a4:	19 2d       	mov	r17, r9
    a1a6:	2a 2d       	mov	r18, r10
    a1a8:	3b 2d       	mov	r19, r11
    a1aa:	4c 2d       	mov	r20, r12
    a1ac:	5d 2d       	mov	r21, r13
    a1ae:	6e 2d       	mov	r22, r14
    a1b0:	7f 2d       	mov	r23, r15
    a1b2:	80 2f       	mov	r24, r16
    a1b4:	91 2f       	mov	r25, r17
    a1b6:	29 51       	subi	r18, 0x19	; 25
    a1b8:	3c 4f       	sbci	r19, 0xFC	; 252
    a1ba:	4f 4f       	sbci	r20, 0xFF	; 255
    a1bc:	5f 4f       	sbci	r21, 0xFF	; 255
    a1be:	6f 4f       	sbci	r22, 0xFF	; 255
    a1c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a1c2:	8f 4f       	sbci	r24, 0xFF	; 255
    a1c4:	9f 4f       	sbci	r25, 0xFF	; 255
    a1c6:	a2 2e       	mov	r10, r18
    a1c8:	b3 2e       	mov	r11, r19
    a1ca:	c4 2e       	mov	r12, r20
    a1cc:	d5 2e       	mov	r13, r21
    a1ce:	e6 2e       	mov	r14, r22
    a1d0:	f7 2e       	mov	r15, r23
    a1d2:	08 2f       	mov	r16, r24
    a1d4:	19 2f       	mov	r17, r25
    a1d6:	2a 2d       	mov	r18, r10
    a1d8:	3b 2d       	mov	r19, r11
    a1da:	4c 2d       	mov	r20, r12
    a1dc:	5d 2d       	mov	r21, r13
    a1de:	6e 2d       	mov	r22, r14
    a1e0:	7f 2d       	mov	r23, r15
    a1e2:	80 2f       	mov	r24, r16
    a1e4:	91 2f       	mov	r25, r17
    a1e6:	95 d1       	rcall	.+810    	; 0xa512 <__floatundisf>
    a1e8:	dc 01       	movw	r26, r24
    a1ea:	cb 01       	movw	r24, r22
    a1ec:	20 e0       	ldi	r18, 0x00	; 0
    a1ee:	30 e0       	ldi	r19, 0x00	; 0
    a1f0:	4a e7       	ldi	r20, 0x7A	; 122
    a1f2:	54 e4       	ldi	r21, 0x44	; 68
    a1f4:	bc 01       	movw	r22, r24
    a1f6:	cd 01       	movw	r24, r26
    a1f8:	7c d0       	rcall	.+248    	; 0xa2f2 <__divsf3>
    a1fa:	dc 01       	movw	r26, r24
    a1fc:	cb 01       	movw	r24, r22
    a1fe:	bc 01       	movw	r22, r24
    a200:	cd 01       	movw	r24, r26
    a202:	e4 d0       	rcall	.+456    	; 0xa3cc <__fixunssfdi>
    a204:	a2 2e       	mov	r10, r18
    a206:	b3 2e       	mov	r11, r19
    a208:	c4 2e       	mov	r12, r20
    a20a:	d5 2e       	mov	r13, r21
    a20c:	e6 2e       	mov	r14, r22
    a20e:	f7 2e       	mov	r15, r23
    a210:	08 2f       	mov	r16, r24
    a212:	19 2f       	mov	r17, r25
    a214:	d6 01       	movw	r26, r12
    a216:	c5 01       	movw	r24, r10
    a218:	bc 01       	movw	r22, r24
    a21a:	cd 01       	movw	r24, r26
    a21c:	7c d8       	rcall	.-3848   	; 0x9316 <__portable_avr_delay_cycles>
    a21e:	36 cc       	rjmp	.-1940   	; 0x9a8c <main+0x280>

0000a220 <__subsf3>:
	}
    a220:	50 58       	subi	r21, 0x80	; 128

0000a222 <__addsf3>:
    a222:	bb 27       	eor	r27, r27
    a224:	aa 27       	eor	r26, r26
    a226:	0e d0       	rcall	.+28     	; 0xa244 <__addsf3x>
    a228:	fd c1       	rjmp	.+1018   	; 0xa624 <__fp_round>
    a22a:	ee d1       	rcall	.+988    	; 0xa608 <__fp_pscA>
    a22c:	30 f0       	brcs	.+12     	; 0xa23a <__addsf3+0x18>
    a22e:	f3 d1       	rcall	.+998    	; 0xa616 <__fp_pscB>
    a230:	20 f0       	brcs	.+8      	; 0xa23a <__addsf3+0x18>
    a232:	31 f4       	brne	.+12     	; 0xa240 <__addsf3+0x1e>
    a234:	9f 3f       	cpi	r25, 0xFF	; 255
    a236:	11 f4       	brne	.+4      	; 0xa23c <__addsf3+0x1a>
    a238:	1e f4       	brtc	.+6      	; 0xa240 <__addsf3+0x1e>
    a23a:	d3 c1       	rjmp	.+934    	; 0xa5e2 <__fp_nan>
    a23c:	0e f4       	brtc	.+2      	; 0xa240 <__addsf3+0x1e>
    a23e:	e0 95       	com	r30
    a240:	e7 fb       	bst	r30, 7
    a242:	c9 c1       	rjmp	.+914    	; 0xa5d6 <__fp_inf>

0000a244 <__addsf3x>:
    a244:	e9 2f       	mov	r30, r25
    a246:	ff d1       	rcall	.+1022   	; 0xa646 <__fp_split3>
    a248:	80 f3       	brcs	.-32     	; 0xa22a <__addsf3+0x8>
    a24a:	ba 17       	cp	r27, r26
    a24c:	62 07       	cpc	r22, r18
    a24e:	73 07       	cpc	r23, r19
    a250:	84 07       	cpc	r24, r20
    a252:	95 07       	cpc	r25, r21
    a254:	18 f0       	brcs	.+6      	; 0xa25c <__addsf3x+0x18>
    a256:	71 f4       	brne	.+28     	; 0xa274 <__addsf3x+0x30>
    a258:	9e f5       	brtc	.+102    	; 0xa2c0 <__addsf3x+0x7c>
    a25a:	17 c2       	rjmp	.+1070   	; 0xa68a <__fp_zero>
    a25c:	0e f4       	brtc	.+2      	; 0xa260 <__addsf3x+0x1c>
    a25e:	e0 95       	com	r30
    a260:	0b 2e       	mov	r0, r27
    a262:	ba 2f       	mov	r27, r26
    a264:	a0 2d       	mov	r26, r0
    a266:	0b 01       	movw	r0, r22
    a268:	b9 01       	movw	r22, r18
    a26a:	90 01       	movw	r18, r0
    a26c:	0c 01       	movw	r0, r24
    a26e:	ca 01       	movw	r24, r20
    a270:	a0 01       	movw	r20, r0
    a272:	11 24       	eor	r1, r1
    a274:	ff 27       	eor	r31, r31
    a276:	59 1b       	sub	r21, r25
    a278:	99 f0       	breq	.+38     	; 0xa2a0 <__addsf3x+0x5c>
    a27a:	59 3f       	cpi	r21, 0xF9	; 249
    a27c:	50 f4       	brcc	.+20     	; 0xa292 <__addsf3x+0x4e>
    a27e:	50 3e       	cpi	r21, 0xE0	; 224
    a280:	68 f1       	brcs	.+90     	; 0xa2dc <__addsf3x+0x98>
    a282:	1a 16       	cp	r1, r26
    a284:	f0 40       	sbci	r31, 0x00	; 0
    a286:	a2 2f       	mov	r26, r18
    a288:	23 2f       	mov	r18, r19
    a28a:	34 2f       	mov	r19, r20
    a28c:	44 27       	eor	r20, r20
    a28e:	58 5f       	subi	r21, 0xF8	; 248
    a290:	f3 cf       	rjmp	.-26     	; 0xa278 <__addsf3x+0x34>
    a292:	46 95       	lsr	r20
    a294:	37 95       	ror	r19
    a296:	27 95       	ror	r18
    a298:	a7 95       	ror	r26
    a29a:	f0 40       	sbci	r31, 0x00	; 0
    a29c:	53 95       	inc	r21
    a29e:	c9 f7       	brne	.-14     	; 0xa292 <__addsf3x+0x4e>
    a2a0:	7e f4       	brtc	.+30     	; 0xa2c0 <__addsf3x+0x7c>
    a2a2:	1f 16       	cp	r1, r31
    a2a4:	ba 0b       	sbc	r27, r26
    a2a6:	62 0b       	sbc	r22, r18
    a2a8:	73 0b       	sbc	r23, r19
    a2aa:	84 0b       	sbc	r24, r20
    a2ac:	ba f0       	brmi	.+46     	; 0xa2dc <__addsf3x+0x98>
    a2ae:	91 50       	subi	r25, 0x01	; 1
    a2b0:	a1 f0       	breq	.+40     	; 0xa2da <__addsf3x+0x96>
    a2b2:	ff 0f       	add	r31, r31
    a2b4:	bb 1f       	adc	r27, r27
    a2b6:	66 1f       	adc	r22, r22
    a2b8:	77 1f       	adc	r23, r23
    a2ba:	88 1f       	adc	r24, r24
    a2bc:	c2 f7       	brpl	.-16     	; 0xa2ae <__addsf3x+0x6a>
    a2be:	0e c0       	rjmp	.+28     	; 0xa2dc <__addsf3x+0x98>
    a2c0:	ba 0f       	add	r27, r26
    a2c2:	62 1f       	adc	r22, r18
    a2c4:	73 1f       	adc	r23, r19
    a2c6:	84 1f       	adc	r24, r20
    a2c8:	48 f4       	brcc	.+18     	; 0xa2dc <__addsf3x+0x98>
    a2ca:	87 95       	ror	r24
    a2cc:	77 95       	ror	r23
    a2ce:	67 95       	ror	r22
    a2d0:	b7 95       	ror	r27
    a2d2:	f7 95       	ror	r31
    a2d4:	9e 3f       	cpi	r25, 0xFE	; 254
    a2d6:	08 f0       	brcs	.+2      	; 0xa2da <__addsf3x+0x96>
    a2d8:	b3 cf       	rjmp	.-154    	; 0xa240 <__addsf3+0x1e>
    a2da:	93 95       	inc	r25
    a2dc:	88 0f       	add	r24, r24
    a2de:	08 f0       	brcs	.+2      	; 0xa2e2 <__addsf3x+0x9e>
    a2e0:	99 27       	eor	r25, r25
    a2e2:	ee 0f       	add	r30, r30
    a2e4:	97 95       	ror	r25
    a2e6:	87 95       	ror	r24
    a2e8:	08 95       	ret

0000a2ea <__cmpsf2>:
    a2ea:	51 d1       	rcall	.+674    	; 0xa58e <__fp_cmp>
    a2ec:	08 f4       	brcc	.+2      	; 0xa2f0 <__cmpsf2+0x6>
    a2ee:	81 e0       	ldi	r24, 0x01	; 1
    a2f0:	08 95       	ret

0000a2f2 <__divsf3>:
    a2f2:	0c d0       	rcall	.+24     	; 0xa30c <__divsf3x>
    a2f4:	97 c1       	rjmp	.+814    	; 0xa624 <__fp_round>
    a2f6:	8f d1       	rcall	.+798    	; 0xa616 <__fp_pscB>
    a2f8:	40 f0       	brcs	.+16     	; 0xa30a <__divsf3+0x18>
    a2fa:	86 d1       	rcall	.+780    	; 0xa608 <__fp_pscA>
    a2fc:	30 f0       	brcs	.+12     	; 0xa30a <__divsf3+0x18>
    a2fe:	21 f4       	brne	.+8      	; 0xa308 <__divsf3+0x16>
    a300:	5f 3f       	cpi	r21, 0xFF	; 255
    a302:	19 f0       	breq	.+6      	; 0xa30a <__divsf3+0x18>
    a304:	68 c1       	rjmp	.+720    	; 0xa5d6 <__fp_inf>
    a306:	51 11       	cpse	r21, r1
    a308:	c1 c1       	rjmp	.+898    	; 0xa68c <__fp_szero>
    a30a:	6b c1       	rjmp	.+726    	; 0xa5e2 <__fp_nan>

0000a30c <__divsf3x>:
    a30c:	9c d1       	rcall	.+824    	; 0xa646 <__fp_split3>
    a30e:	98 f3       	brcs	.-26     	; 0xa2f6 <__divsf3+0x4>

0000a310 <__divsf3_pse>:
    a310:	99 23       	and	r25, r25
    a312:	c9 f3       	breq	.-14     	; 0xa306 <__divsf3+0x14>
    a314:	55 23       	and	r21, r21
    a316:	b1 f3       	breq	.-20     	; 0xa304 <__divsf3+0x12>
    a318:	95 1b       	sub	r25, r21
    a31a:	55 0b       	sbc	r21, r21
    a31c:	bb 27       	eor	r27, r27
    a31e:	aa 27       	eor	r26, r26
    a320:	62 17       	cp	r22, r18
    a322:	73 07       	cpc	r23, r19
    a324:	84 07       	cpc	r24, r20
    a326:	38 f0       	brcs	.+14     	; 0xa336 <__divsf3_pse+0x26>
    a328:	9f 5f       	subi	r25, 0xFF	; 255
    a32a:	5f 4f       	sbci	r21, 0xFF	; 255
    a32c:	22 0f       	add	r18, r18
    a32e:	33 1f       	adc	r19, r19
    a330:	44 1f       	adc	r20, r20
    a332:	aa 1f       	adc	r26, r26
    a334:	a9 f3       	breq	.-22     	; 0xa320 <__divsf3_pse+0x10>
    a336:	33 d0       	rcall	.+102    	; 0xa39e <__divsf3_pse+0x8e>
    a338:	0e 2e       	mov	r0, r30
    a33a:	3a f0       	brmi	.+14     	; 0xa34a <__divsf3_pse+0x3a>
    a33c:	e0 e8       	ldi	r30, 0x80	; 128
    a33e:	30 d0       	rcall	.+96     	; 0xa3a0 <__divsf3_pse+0x90>
    a340:	91 50       	subi	r25, 0x01	; 1
    a342:	50 40       	sbci	r21, 0x00	; 0
    a344:	e6 95       	lsr	r30
    a346:	00 1c       	adc	r0, r0
    a348:	ca f7       	brpl	.-14     	; 0xa33c <__divsf3_pse+0x2c>
    a34a:	29 d0       	rcall	.+82     	; 0xa39e <__divsf3_pse+0x8e>
    a34c:	fe 2f       	mov	r31, r30
    a34e:	27 d0       	rcall	.+78     	; 0xa39e <__divsf3_pse+0x8e>
    a350:	66 0f       	add	r22, r22
    a352:	77 1f       	adc	r23, r23
    a354:	88 1f       	adc	r24, r24
    a356:	bb 1f       	adc	r27, r27
    a358:	26 17       	cp	r18, r22
    a35a:	37 07       	cpc	r19, r23
    a35c:	48 07       	cpc	r20, r24
    a35e:	ab 07       	cpc	r26, r27
    a360:	b0 e8       	ldi	r27, 0x80	; 128
    a362:	09 f0       	breq	.+2      	; 0xa366 <__divsf3_pse+0x56>
    a364:	bb 0b       	sbc	r27, r27
    a366:	80 2d       	mov	r24, r0
    a368:	bf 01       	movw	r22, r30
    a36a:	ff 27       	eor	r31, r31
    a36c:	93 58       	subi	r25, 0x83	; 131
    a36e:	5f 4f       	sbci	r21, 0xFF	; 255
    a370:	2a f0       	brmi	.+10     	; 0xa37c <__divsf3_pse+0x6c>
    a372:	9e 3f       	cpi	r25, 0xFE	; 254
    a374:	51 05       	cpc	r21, r1
    a376:	68 f0       	brcs	.+26     	; 0xa392 <__divsf3_pse+0x82>
    a378:	2e c1       	rjmp	.+604    	; 0xa5d6 <__fp_inf>
    a37a:	88 c1       	rjmp	.+784    	; 0xa68c <__fp_szero>
    a37c:	5f 3f       	cpi	r21, 0xFF	; 255
    a37e:	ec f3       	brlt	.-6      	; 0xa37a <__divsf3_pse+0x6a>
    a380:	98 3e       	cpi	r25, 0xE8	; 232
    a382:	dc f3       	brlt	.-10     	; 0xa37a <__divsf3_pse+0x6a>
    a384:	86 95       	lsr	r24
    a386:	77 95       	ror	r23
    a388:	67 95       	ror	r22
    a38a:	b7 95       	ror	r27
    a38c:	f7 95       	ror	r31
    a38e:	9f 5f       	subi	r25, 0xFF	; 255
    a390:	c9 f7       	brne	.-14     	; 0xa384 <__divsf3_pse+0x74>
    a392:	88 0f       	add	r24, r24
    a394:	91 1d       	adc	r25, r1
    a396:	96 95       	lsr	r25
    a398:	87 95       	ror	r24
    a39a:	97 f9       	bld	r25, 7
    a39c:	08 95       	ret
    a39e:	e1 e0       	ldi	r30, 0x01	; 1
    a3a0:	66 0f       	add	r22, r22
    a3a2:	77 1f       	adc	r23, r23
    a3a4:	88 1f       	adc	r24, r24
    a3a6:	bb 1f       	adc	r27, r27
    a3a8:	62 17       	cp	r22, r18
    a3aa:	73 07       	cpc	r23, r19
    a3ac:	84 07       	cpc	r24, r20
    a3ae:	ba 07       	cpc	r27, r26
    a3b0:	20 f0       	brcs	.+8      	; 0xa3ba <__divsf3_pse+0xaa>
    a3b2:	62 1b       	sub	r22, r18
    a3b4:	73 0b       	sbc	r23, r19
    a3b6:	84 0b       	sbc	r24, r20
    a3b8:	ba 0b       	sbc	r27, r26
    a3ba:	ee 1f       	adc	r30, r30
    a3bc:	88 f7       	brcc	.-30     	; 0xa3a0 <__divsf3_pse+0x90>
    a3be:	e0 95       	com	r30
    a3c0:	08 95       	ret

0000a3c2 <__fixsfdi>:
    a3c2:	be e3       	ldi	r27, 0x3E	; 62
    a3c4:	04 d0       	rcall	.+8      	; 0xa3ce <__fixunssfdi+0x2>
    a3c6:	08 f4       	brcc	.+2      	; 0xa3ca <__fixsfdi+0x8>
    a3c8:	90 e8       	ldi	r25, 0x80	; 128
    a3ca:	08 95       	ret

0000a3cc <__fixunssfdi>:
    a3cc:	bf e3       	ldi	r27, 0x3F	; 63
    a3ce:	22 27       	eor	r18, r18
    a3d0:	33 27       	eor	r19, r19
    a3d2:	a9 01       	movw	r20, r18
    a3d4:	40 d1       	rcall	.+640    	; 0xa656 <__fp_splitA>
    a3d6:	58 f1       	brcs	.+86     	; 0xa42e <__fixunssfdi+0x62>
    a3d8:	9f 57       	subi	r25, 0x7F	; 127
    a3da:	40 f1       	brcs	.+80     	; 0xa42c <__fixunssfdi+0x60>
    a3dc:	b9 17       	cp	r27, r25
    a3de:	38 f1       	brcs	.+78     	; 0xa42e <__fixunssfdi+0x62>
    a3e0:	bf e3       	ldi	r27, 0x3F	; 63
    a3e2:	b9 1b       	sub	r27, r25
    a3e4:	99 27       	eor	r25, r25
    a3e6:	b8 50       	subi	r27, 0x08	; 8
    a3e8:	3a f4       	brpl	.+14     	; 0xa3f8 <__fixunssfdi+0x2c>
    a3ea:	66 0f       	add	r22, r22
    a3ec:	77 1f       	adc	r23, r23
    a3ee:	88 1f       	adc	r24, r24
    a3f0:	99 1f       	adc	r25, r25
    a3f2:	b3 95       	inc	r27
    a3f4:	d2 f3       	brmi	.-12     	; 0xa3ea <__fixunssfdi+0x1e>
    a3f6:	16 c0       	rjmp	.+44     	; 0xa424 <__fixunssfdi+0x58>
    a3f8:	b8 50       	subi	r27, 0x08	; 8
    a3fa:	4a f0       	brmi	.+18     	; 0xa40e <__fixunssfdi+0x42>
    a3fc:	23 2f       	mov	r18, r19
    a3fe:	34 2f       	mov	r19, r20
    a400:	45 2f       	mov	r20, r21
    a402:	56 2f       	mov	r21, r22
    a404:	67 2f       	mov	r22, r23
    a406:	78 2f       	mov	r23, r24
    a408:	88 27       	eor	r24, r24
    a40a:	b8 50       	subi	r27, 0x08	; 8
    a40c:	ba f7       	brpl	.-18     	; 0xa3fc <__fixunssfdi+0x30>
    a40e:	b8 5f       	subi	r27, 0xF8	; 248
    a410:	49 f0       	breq	.+18     	; 0xa424 <__fixunssfdi+0x58>
    a412:	86 95       	lsr	r24
    a414:	77 95       	ror	r23
    a416:	67 95       	ror	r22
    a418:	57 95       	ror	r21
    a41a:	47 95       	ror	r20
    a41c:	37 95       	ror	r19
    a41e:	27 95       	ror	r18
    a420:	ba 95       	dec	r27
    a422:	b9 f7       	brne	.-18     	; 0xa412 <__fixunssfdi+0x46>
    a424:	0e f4       	brtc	.+2      	; 0xa428 <__fixunssfdi+0x5c>
    a426:	e0 d0       	rcall	.+448    	; 0xa5e8 <__fp_negdi>
    a428:	88 94       	clc
    a42a:	08 95       	ret
    a42c:	88 94       	clc
    a42e:	60 e0       	ldi	r22, 0x00	; 0
    a430:	70 e0       	ldi	r23, 0x00	; 0
    a432:	cb 01       	movw	r24, r22
    a434:	08 95       	ret

0000a436 <__fixsfsi>:
    a436:	04 d0       	rcall	.+8      	; 0xa440 <__fixunssfsi>
    a438:	68 94       	set
    a43a:	b1 11       	cpse	r27, r1
    a43c:	27 c1       	rjmp	.+590    	; 0xa68c <__fp_szero>
    a43e:	08 95       	ret

0000a440 <__fixunssfsi>:
    a440:	0a d1       	rcall	.+532    	; 0xa656 <__fp_splitA>
    a442:	88 f0       	brcs	.+34     	; 0xa466 <__fixunssfsi+0x26>
    a444:	9f 57       	subi	r25, 0x7F	; 127
    a446:	90 f0       	brcs	.+36     	; 0xa46c <__fixunssfsi+0x2c>
    a448:	b9 2f       	mov	r27, r25
    a44a:	99 27       	eor	r25, r25
    a44c:	b7 51       	subi	r27, 0x17	; 23
    a44e:	a0 f0       	brcs	.+40     	; 0xa478 <__fixunssfsi+0x38>
    a450:	d1 f0       	breq	.+52     	; 0xa486 <__fixunssfsi+0x46>
    a452:	66 0f       	add	r22, r22
    a454:	77 1f       	adc	r23, r23
    a456:	88 1f       	adc	r24, r24
    a458:	99 1f       	adc	r25, r25
    a45a:	1a f0       	brmi	.+6      	; 0xa462 <__fixunssfsi+0x22>
    a45c:	ba 95       	dec	r27
    a45e:	c9 f7       	brne	.-14     	; 0xa452 <__fixunssfsi+0x12>
    a460:	12 c0       	rjmp	.+36     	; 0xa486 <__fixunssfsi+0x46>
    a462:	b1 30       	cpi	r27, 0x01	; 1
    a464:	81 f0       	breq	.+32     	; 0xa486 <__fixunssfsi+0x46>
    a466:	11 d1       	rcall	.+546    	; 0xa68a <__fp_zero>
    a468:	b1 e0       	ldi	r27, 0x01	; 1
    a46a:	08 95       	ret
    a46c:	0e c1       	rjmp	.+540    	; 0xa68a <__fp_zero>
    a46e:	67 2f       	mov	r22, r23
    a470:	78 2f       	mov	r23, r24
    a472:	88 27       	eor	r24, r24
    a474:	b8 5f       	subi	r27, 0xF8	; 248
    a476:	39 f0       	breq	.+14     	; 0xa486 <__fixunssfsi+0x46>
    a478:	b9 3f       	cpi	r27, 0xF9	; 249
    a47a:	cc f3       	brlt	.-14     	; 0xa46e <__fixunssfsi+0x2e>
    a47c:	86 95       	lsr	r24
    a47e:	77 95       	ror	r23
    a480:	67 95       	ror	r22
    a482:	b3 95       	inc	r27
    a484:	d9 f7       	brne	.-10     	; 0xa47c <__fixunssfsi+0x3c>
    a486:	3e f4       	brtc	.+14     	; 0xa496 <__fixunssfsi+0x56>
    a488:	90 95       	com	r25
    a48a:	80 95       	com	r24
    a48c:	70 95       	com	r23
    a48e:	61 95       	neg	r22
    a490:	7f 4f       	sbci	r23, 0xFF	; 255
    a492:	8f 4f       	sbci	r24, 0xFF	; 255
    a494:	9f 4f       	sbci	r25, 0xFF	; 255
    a496:	08 95       	ret

0000a498 <__floatunsisf>:
    a498:	e8 94       	clt
    a49a:	09 c0       	rjmp	.+18     	; 0xa4ae <__floatsisf+0x12>

0000a49c <__floatsisf>:
    a49c:	97 fb       	bst	r25, 7
    a49e:	3e f4       	brtc	.+14     	; 0xa4ae <__floatsisf+0x12>
    a4a0:	90 95       	com	r25
    a4a2:	80 95       	com	r24
    a4a4:	70 95       	com	r23
    a4a6:	61 95       	neg	r22
    a4a8:	7f 4f       	sbci	r23, 0xFF	; 255
    a4aa:	8f 4f       	sbci	r24, 0xFF	; 255
    a4ac:	9f 4f       	sbci	r25, 0xFF	; 255
    a4ae:	99 23       	and	r25, r25
    a4b0:	a9 f0       	breq	.+42     	; 0xa4dc <__floatsisf+0x40>
    a4b2:	f9 2f       	mov	r31, r25
    a4b4:	96 e9       	ldi	r25, 0x96	; 150
    a4b6:	bb 27       	eor	r27, r27
    a4b8:	93 95       	inc	r25
    a4ba:	f6 95       	lsr	r31
    a4bc:	87 95       	ror	r24
    a4be:	77 95       	ror	r23
    a4c0:	67 95       	ror	r22
    a4c2:	b7 95       	ror	r27
    a4c4:	f1 11       	cpse	r31, r1
    a4c6:	f8 cf       	rjmp	.-16     	; 0xa4b8 <__floatsisf+0x1c>
    a4c8:	fa f4       	brpl	.+62     	; 0xa508 <__floatsisf+0x6c>
    a4ca:	bb 0f       	add	r27, r27
    a4cc:	11 f4       	brne	.+4      	; 0xa4d2 <__floatsisf+0x36>
    a4ce:	60 ff       	sbrs	r22, 0
    a4d0:	1b c0       	rjmp	.+54     	; 0xa508 <__floatsisf+0x6c>
    a4d2:	6f 5f       	subi	r22, 0xFF	; 255
    a4d4:	7f 4f       	sbci	r23, 0xFF	; 255
    a4d6:	8f 4f       	sbci	r24, 0xFF	; 255
    a4d8:	9f 4f       	sbci	r25, 0xFF	; 255
    a4da:	16 c0       	rjmp	.+44     	; 0xa508 <__floatsisf+0x6c>
    a4dc:	88 23       	and	r24, r24
    a4de:	11 f0       	breq	.+4      	; 0xa4e4 <__floatsisf+0x48>
    a4e0:	96 e9       	ldi	r25, 0x96	; 150
    a4e2:	11 c0       	rjmp	.+34     	; 0xa506 <__floatsisf+0x6a>
    a4e4:	77 23       	and	r23, r23
    a4e6:	21 f0       	breq	.+8      	; 0xa4f0 <__floatsisf+0x54>
    a4e8:	9e e8       	ldi	r25, 0x8E	; 142
    a4ea:	87 2f       	mov	r24, r23
    a4ec:	76 2f       	mov	r23, r22
    a4ee:	05 c0       	rjmp	.+10     	; 0xa4fa <__floatsisf+0x5e>
    a4f0:	66 23       	and	r22, r22
    a4f2:	71 f0       	breq	.+28     	; 0xa510 <__floatsisf+0x74>
    a4f4:	96 e8       	ldi	r25, 0x86	; 134
    a4f6:	86 2f       	mov	r24, r22
    a4f8:	70 e0       	ldi	r23, 0x00	; 0
    a4fa:	60 e0       	ldi	r22, 0x00	; 0
    a4fc:	2a f0       	brmi	.+10     	; 0xa508 <__floatsisf+0x6c>
    a4fe:	9a 95       	dec	r25
    a500:	66 0f       	add	r22, r22
    a502:	77 1f       	adc	r23, r23
    a504:	88 1f       	adc	r24, r24
    a506:	da f7       	brpl	.-10     	; 0xa4fe <__floatsisf+0x62>
    a508:	88 0f       	add	r24, r24
    a50a:	96 95       	lsr	r25
    a50c:	87 95       	ror	r24
    a50e:	97 f9       	bld	r25, 7
    a510:	08 95       	ret

0000a512 <__floatundisf>:
    a512:	e8 94       	clt

0000a514 <__fp_di2sf>:
    a514:	f9 2f       	mov	r31, r25
    a516:	96 eb       	ldi	r25, 0xB6	; 182
    a518:	ff 23       	and	r31, r31
    a51a:	81 f0       	breq	.+32     	; 0xa53c <__fp_di2sf+0x28>
    a51c:	12 16       	cp	r1, r18
    a51e:	13 06       	cpc	r1, r19
    a520:	14 06       	cpc	r1, r20
    a522:	44 0b       	sbc	r20, r20
    a524:	93 95       	inc	r25
    a526:	f6 95       	lsr	r31
    a528:	87 95       	ror	r24
    a52a:	77 95       	ror	r23
    a52c:	67 95       	ror	r22
    a52e:	57 95       	ror	r21
    a530:	40 40       	sbci	r20, 0x00	; 0
    a532:	ff 23       	and	r31, r31
    a534:	b9 f7       	brne	.-18     	; 0xa524 <__fp_di2sf+0x10>
    a536:	1b c0       	rjmp	.+54     	; 0xa56e <__fp_di2sf+0x5a>
    a538:	99 27       	eor	r25, r25
    a53a:	08 95       	ret
    a53c:	88 23       	and	r24, r24
    a53e:	51 f4       	brne	.+20     	; 0xa554 <__fp_di2sf+0x40>
    a540:	98 50       	subi	r25, 0x08	; 8
    a542:	d2 f7       	brpl	.-12     	; 0xa538 <__fp_di2sf+0x24>
    a544:	87 2b       	or	r24, r23
    a546:	76 2f       	mov	r23, r22
    a548:	65 2f       	mov	r22, r21
    a54a:	54 2f       	mov	r21, r20
    a54c:	43 2f       	mov	r20, r19
    a54e:	32 2f       	mov	r19, r18
    a550:	20 e0       	ldi	r18, 0x00	; 0
    a552:	b1 f3       	breq	.-20     	; 0xa540 <__fp_di2sf+0x2c>
    a554:	12 16       	cp	r1, r18
    a556:	13 06       	cpc	r1, r19
    a558:	14 06       	cpc	r1, r20
    a55a:	44 0b       	sbc	r20, r20
    a55c:	88 23       	and	r24, r24
    a55e:	3a f0       	brmi	.+14     	; 0xa56e <__fp_di2sf+0x5a>
    a560:	9a 95       	dec	r25
    a562:	44 0f       	add	r20, r20
    a564:	55 1f       	adc	r21, r21
    a566:	66 1f       	adc	r22, r22
    a568:	77 1f       	adc	r23, r23
    a56a:	88 1f       	adc	r24, r24
    a56c:	ca f7       	brpl	.-14     	; 0xa560 <__fp_di2sf+0x4c>
    a56e:	55 23       	and	r21, r21
    a570:	4a f4       	brpl	.+18     	; 0xa584 <__fp_di2sf+0x70>
    a572:	44 0f       	add	r20, r20
    a574:	55 1f       	adc	r21, r21
    a576:	11 f4       	brne	.+4      	; 0xa57c <__fp_di2sf+0x68>
    a578:	60 ff       	sbrs	r22, 0
    a57a:	04 c0       	rjmp	.+8      	; 0xa584 <__fp_di2sf+0x70>
    a57c:	6f 5f       	subi	r22, 0xFF	; 255
    a57e:	7f 4f       	sbci	r23, 0xFF	; 255
    a580:	8f 4f       	sbci	r24, 0xFF	; 255
    a582:	9f 4f       	sbci	r25, 0xFF	; 255
    a584:	88 0f       	add	r24, r24
    a586:	96 95       	lsr	r25
    a588:	87 95       	ror	r24
    a58a:	97 f9       	bld	r25, 7
    a58c:	08 95       	ret

0000a58e <__fp_cmp>:
    a58e:	99 0f       	add	r25, r25
    a590:	00 08       	sbc	r0, r0
    a592:	55 0f       	add	r21, r21
    a594:	aa 0b       	sbc	r26, r26
    a596:	e0 e8       	ldi	r30, 0x80	; 128
    a598:	fe ef       	ldi	r31, 0xFE	; 254
    a59a:	16 16       	cp	r1, r22
    a59c:	17 06       	cpc	r1, r23
    a59e:	e8 07       	cpc	r30, r24
    a5a0:	f9 07       	cpc	r31, r25
    a5a2:	c0 f0       	brcs	.+48     	; 0xa5d4 <__fp_cmp+0x46>
    a5a4:	12 16       	cp	r1, r18
    a5a6:	13 06       	cpc	r1, r19
    a5a8:	e4 07       	cpc	r30, r20
    a5aa:	f5 07       	cpc	r31, r21
    a5ac:	98 f0       	brcs	.+38     	; 0xa5d4 <__fp_cmp+0x46>
    a5ae:	62 1b       	sub	r22, r18
    a5b0:	73 0b       	sbc	r23, r19
    a5b2:	84 0b       	sbc	r24, r20
    a5b4:	95 0b       	sbc	r25, r21
    a5b6:	39 f4       	brne	.+14     	; 0xa5c6 <__fp_cmp+0x38>
    a5b8:	0a 26       	eor	r0, r26
    a5ba:	61 f0       	breq	.+24     	; 0xa5d4 <__fp_cmp+0x46>
    a5bc:	23 2b       	or	r18, r19
    a5be:	24 2b       	or	r18, r20
    a5c0:	25 2b       	or	r18, r21
    a5c2:	21 f4       	brne	.+8      	; 0xa5cc <__fp_cmp+0x3e>
    a5c4:	08 95       	ret
    a5c6:	0a 26       	eor	r0, r26
    a5c8:	09 f4       	brne	.+2      	; 0xa5cc <__fp_cmp+0x3e>
    a5ca:	a1 40       	sbci	r26, 0x01	; 1
    a5cc:	a6 95       	lsr	r26
    a5ce:	8f ef       	ldi	r24, 0xFF	; 255
    a5d0:	81 1d       	adc	r24, r1
    a5d2:	81 1d       	adc	r24, r1
    a5d4:	08 95       	ret

0000a5d6 <__fp_inf>:
    a5d6:	97 f9       	bld	r25, 7
    a5d8:	9f 67       	ori	r25, 0x7F	; 127
    a5da:	80 e8       	ldi	r24, 0x80	; 128
    a5dc:	70 e0       	ldi	r23, 0x00	; 0
    a5de:	60 e0       	ldi	r22, 0x00	; 0
    a5e0:	08 95       	ret

0000a5e2 <__fp_nan>:
    a5e2:	9f ef       	ldi	r25, 0xFF	; 255
    a5e4:	80 ec       	ldi	r24, 0xC0	; 192
    a5e6:	08 95       	ret

0000a5e8 <__fp_negdi>:
    a5e8:	90 95       	com	r25
    a5ea:	80 95       	com	r24
    a5ec:	70 95       	com	r23
    a5ee:	60 95       	com	r22
    a5f0:	50 95       	com	r21
    a5f2:	40 95       	com	r20
    a5f4:	30 95       	com	r19
    a5f6:	21 95       	neg	r18
    a5f8:	3f 4f       	sbci	r19, 0xFF	; 255
    a5fa:	4f 4f       	sbci	r20, 0xFF	; 255
    a5fc:	5f 4f       	sbci	r21, 0xFF	; 255
    a5fe:	6f 4f       	sbci	r22, 0xFF	; 255
    a600:	7f 4f       	sbci	r23, 0xFF	; 255
    a602:	8f 4f       	sbci	r24, 0xFF	; 255
    a604:	9f 4f       	sbci	r25, 0xFF	; 255
    a606:	08 95       	ret

0000a608 <__fp_pscA>:
    a608:	00 24       	eor	r0, r0
    a60a:	0a 94       	dec	r0
    a60c:	16 16       	cp	r1, r22
    a60e:	17 06       	cpc	r1, r23
    a610:	18 06       	cpc	r1, r24
    a612:	09 06       	cpc	r0, r25
    a614:	08 95       	ret

0000a616 <__fp_pscB>:
    a616:	00 24       	eor	r0, r0
    a618:	0a 94       	dec	r0
    a61a:	12 16       	cp	r1, r18
    a61c:	13 06       	cpc	r1, r19
    a61e:	14 06       	cpc	r1, r20
    a620:	05 06       	cpc	r0, r21
    a622:	08 95       	ret

0000a624 <__fp_round>:
    a624:	09 2e       	mov	r0, r25
    a626:	03 94       	inc	r0
    a628:	00 0c       	add	r0, r0
    a62a:	11 f4       	brne	.+4      	; 0xa630 <__fp_round+0xc>
    a62c:	88 23       	and	r24, r24
    a62e:	52 f0       	brmi	.+20     	; 0xa644 <__fp_round+0x20>
    a630:	bb 0f       	add	r27, r27
    a632:	40 f4       	brcc	.+16     	; 0xa644 <__fp_round+0x20>
    a634:	bf 2b       	or	r27, r31
    a636:	11 f4       	brne	.+4      	; 0xa63c <__fp_round+0x18>
    a638:	60 ff       	sbrs	r22, 0
    a63a:	04 c0       	rjmp	.+8      	; 0xa644 <__fp_round+0x20>
    a63c:	6f 5f       	subi	r22, 0xFF	; 255
    a63e:	7f 4f       	sbci	r23, 0xFF	; 255
    a640:	8f 4f       	sbci	r24, 0xFF	; 255
    a642:	9f 4f       	sbci	r25, 0xFF	; 255
    a644:	08 95       	ret

0000a646 <__fp_split3>:
    a646:	57 fd       	sbrc	r21, 7
    a648:	90 58       	subi	r25, 0x80	; 128
    a64a:	44 0f       	add	r20, r20
    a64c:	55 1f       	adc	r21, r21
    a64e:	59 f0       	breq	.+22     	; 0xa666 <__fp_splitA+0x10>
    a650:	5f 3f       	cpi	r21, 0xFF	; 255
    a652:	71 f0       	breq	.+28     	; 0xa670 <__fp_splitA+0x1a>
    a654:	47 95       	ror	r20

0000a656 <__fp_splitA>:
    a656:	88 0f       	add	r24, r24
    a658:	97 fb       	bst	r25, 7
    a65a:	99 1f       	adc	r25, r25
    a65c:	61 f0       	breq	.+24     	; 0xa676 <__fp_splitA+0x20>
    a65e:	9f 3f       	cpi	r25, 0xFF	; 255
    a660:	79 f0       	breq	.+30     	; 0xa680 <__fp_splitA+0x2a>
    a662:	87 95       	ror	r24
    a664:	08 95       	ret
    a666:	12 16       	cp	r1, r18
    a668:	13 06       	cpc	r1, r19
    a66a:	14 06       	cpc	r1, r20
    a66c:	55 1f       	adc	r21, r21
    a66e:	f2 cf       	rjmp	.-28     	; 0xa654 <__fp_split3+0xe>
    a670:	46 95       	lsr	r20
    a672:	f1 df       	rcall	.-30     	; 0xa656 <__fp_splitA>
    a674:	08 c0       	rjmp	.+16     	; 0xa686 <__fp_splitA+0x30>
    a676:	16 16       	cp	r1, r22
    a678:	17 06       	cpc	r1, r23
    a67a:	18 06       	cpc	r1, r24
    a67c:	99 1f       	adc	r25, r25
    a67e:	f1 cf       	rjmp	.-30     	; 0xa662 <__fp_splitA+0xc>
    a680:	86 95       	lsr	r24
    a682:	71 05       	cpc	r23, r1
    a684:	61 05       	cpc	r22, r1
    a686:	08 94       	sec
    a688:	08 95       	ret

0000a68a <__fp_zero>:
    a68a:	e8 94       	clt

0000a68c <__fp_szero>:
    a68c:	bb 27       	eor	r27, r27
    a68e:	66 27       	eor	r22, r22
    a690:	77 27       	eor	r23, r23
    a692:	cb 01       	movw	r24, r22
    a694:	97 f9       	bld	r25, 7
    a696:	08 95       	ret

0000a698 <__gesf2>:
    a698:	7a df       	rcall	.-268    	; 0xa58e <__fp_cmp>
    a69a:	08 f4       	brcc	.+2      	; 0xa69e <__gesf2+0x6>
    a69c:	8f ef       	ldi	r24, 0xFF	; 255
    a69e:	08 95       	ret
    a6a0:	0e f0       	brts	.+2      	; 0xa6a4 <__gesf2+0xc>
    a6a2:	a6 c0       	rjmp	.+332    	; 0xa7f0 <__fp_mpack>
    a6a4:	9e cf       	rjmp	.-196    	; 0xa5e2 <__fp_nan>
    a6a6:	68 94       	set
    a6a8:	96 cf       	rjmp	.-212    	; 0xa5d6 <__fp_inf>

0000a6aa <log>:
    a6aa:	d5 df       	rcall	.-86     	; 0xa656 <__fp_splitA>
    a6ac:	c8 f3       	brcs	.-14     	; 0xa6a0 <__gesf2+0x8>
    a6ae:	99 23       	and	r25, r25
    a6b0:	d1 f3       	breq	.-12     	; 0xa6a6 <__gesf2+0xe>
    a6b2:	c6 f3       	brts	.-16     	; 0xa6a4 <__gesf2+0xc>
    a6b4:	df 93       	push	r29
    a6b6:	cf 93       	push	r28
    a6b8:	1f 93       	push	r17
    a6ba:	0f 93       	push	r16
    a6bc:	ff 92       	push	r15
    a6be:	c9 2f       	mov	r28, r25
    a6c0:	dd 27       	eor	r29, r29
    a6c2:	88 23       	and	r24, r24
    a6c4:	2a f0       	brmi	.+10     	; 0xa6d0 <log+0x26>
    a6c6:	21 97       	sbiw	r28, 0x01	; 1
    a6c8:	66 0f       	add	r22, r22
    a6ca:	77 1f       	adc	r23, r23
    a6cc:	88 1f       	adc	r24, r24
    a6ce:	da f7       	brpl	.-10     	; 0xa6c6 <log+0x1c>
    a6d0:	20 e0       	ldi	r18, 0x00	; 0
    a6d2:	30 e0       	ldi	r19, 0x00	; 0
    a6d4:	40 e8       	ldi	r20, 0x80	; 128
    a6d6:	5f eb       	ldi	r21, 0xBF	; 191
    a6d8:	9f e3       	ldi	r25, 0x3F	; 63
    a6da:	88 39       	cpi	r24, 0x98	; 152
    a6dc:	20 f0       	brcs	.+8      	; 0xa6e6 <log+0x3c>
    a6de:	80 3e       	cpi	r24, 0xE0	; 224
    a6e0:	30 f0       	brcs	.+12     	; 0xa6ee <log+0x44>
    a6e2:	21 96       	adiw	r28, 0x01	; 1
    a6e4:	8f 77       	andi	r24, 0x7F	; 127
    a6e6:	9d dd       	rcall	.-1222   	; 0xa222 <__addsf3>
    a6e8:	ec ef       	ldi	r30, 0xFC	; 252
    a6ea:	f1 e0       	ldi	r31, 0x01	; 1
    a6ec:	03 c0       	rjmp	.+6      	; 0xa6f4 <log+0x4a>
    a6ee:	99 dd       	rcall	.-1230   	; 0xa222 <__addsf3>
    a6f0:	e9 e2       	ldi	r30, 0x29	; 41
    a6f2:	f2 e0       	ldi	r31, 0x02	; 2
    a6f4:	8b d0       	rcall	.+278    	; 0xa80c <__fp_powser>
    a6f6:	8b 01       	movw	r16, r22
    a6f8:	be 01       	movw	r22, r28
    a6fa:	ec 01       	movw	r28, r24
    a6fc:	fb 2e       	mov	r15, r27
    a6fe:	6f 57       	subi	r22, 0x7F	; 127
    a700:	71 09       	sbc	r23, r1
    a702:	75 95       	asr	r23
    a704:	77 1f       	adc	r23, r23
    a706:	88 0b       	sbc	r24, r24
    a708:	99 0b       	sbc	r25, r25
    a70a:	c8 de       	rcall	.-624    	; 0xa49c <__floatsisf>
    a70c:	28 e1       	ldi	r18, 0x18	; 24
    a70e:	32 e7       	ldi	r19, 0x72	; 114
    a710:	41 e3       	ldi	r20, 0x31	; 49
    a712:	5f e3       	ldi	r21, 0x3F	; 63
    a714:	16 d0       	rcall	.+44     	; 0xa742 <__mulsf3x>
    a716:	af 2d       	mov	r26, r15
    a718:	98 01       	movw	r18, r16
    a71a:	ae 01       	movw	r20, r28
    a71c:	ff 90       	pop	r15
    a71e:	0f 91       	pop	r16
    a720:	1f 91       	pop	r17
    a722:	cf 91       	pop	r28
    a724:	df 91       	pop	r29
    a726:	8e dd       	rcall	.-1252   	; 0xa244 <__addsf3x>
    a728:	7d cf       	rjmp	.-262    	; 0xa624 <__fp_round>

0000a72a <__mulsf3>:
    a72a:	0b d0       	rcall	.+22     	; 0xa742 <__mulsf3x>
    a72c:	7b cf       	rjmp	.-266    	; 0xa624 <__fp_round>
    a72e:	6c df       	rcall	.-296    	; 0xa608 <__fp_pscA>
    a730:	28 f0       	brcs	.+10     	; 0xa73c <__mulsf3+0x12>
    a732:	71 df       	rcall	.-286    	; 0xa616 <__fp_pscB>
    a734:	18 f0       	brcs	.+6      	; 0xa73c <__mulsf3+0x12>
    a736:	95 23       	and	r25, r21
    a738:	09 f0       	breq	.+2      	; 0xa73c <__mulsf3+0x12>
    a73a:	4d cf       	rjmp	.-358    	; 0xa5d6 <__fp_inf>
    a73c:	52 cf       	rjmp	.-348    	; 0xa5e2 <__fp_nan>
    a73e:	11 24       	eor	r1, r1
    a740:	a5 cf       	rjmp	.-182    	; 0xa68c <__fp_szero>

0000a742 <__mulsf3x>:
    a742:	81 df       	rcall	.-254    	; 0xa646 <__fp_split3>
    a744:	a0 f3       	brcs	.-24     	; 0xa72e <__mulsf3+0x4>

0000a746 <__mulsf3_pse>:
    a746:	95 9f       	mul	r25, r21
    a748:	d1 f3       	breq	.-12     	; 0xa73e <__mulsf3+0x14>
    a74a:	95 0f       	add	r25, r21
    a74c:	50 e0       	ldi	r21, 0x00	; 0
    a74e:	55 1f       	adc	r21, r21
    a750:	62 9f       	mul	r22, r18
    a752:	f0 01       	movw	r30, r0
    a754:	72 9f       	mul	r23, r18
    a756:	bb 27       	eor	r27, r27
    a758:	f0 0d       	add	r31, r0
    a75a:	b1 1d       	adc	r27, r1
    a75c:	63 9f       	mul	r22, r19
    a75e:	aa 27       	eor	r26, r26
    a760:	f0 0d       	add	r31, r0
    a762:	b1 1d       	adc	r27, r1
    a764:	aa 1f       	adc	r26, r26
    a766:	64 9f       	mul	r22, r20
    a768:	66 27       	eor	r22, r22
    a76a:	b0 0d       	add	r27, r0
    a76c:	a1 1d       	adc	r26, r1
    a76e:	66 1f       	adc	r22, r22
    a770:	82 9f       	mul	r24, r18
    a772:	22 27       	eor	r18, r18
    a774:	b0 0d       	add	r27, r0
    a776:	a1 1d       	adc	r26, r1
    a778:	62 1f       	adc	r22, r18
    a77a:	73 9f       	mul	r23, r19
    a77c:	b0 0d       	add	r27, r0
    a77e:	a1 1d       	adc	r26, r1
    a780:	62 1f       	adc	r22, r18
    a782:	83 9f       	mul	r24, r19
    a784:	a0 0d       	add	r26, r0
    a786:	61 1d       	adc	r22, r1
    a788:	22 1f       	adc	r18, r18
    a78a:	74 9f       	mul	r23, r20
    a78c:	33 27       	eor	r19, r19
    a78e:	a0 0d       	add	r26, r0
    a790:	61 1d       	adc	r22, r1
    a792:	23 1f       	adc	r18, r19
    a794:	84 9f       	mul	r24, r20
    a796:	60 0d       	add	r22, r0
    a798:	21 1d       	adc	r18, r1
    a79a:	82 2f       	mov	r24, r18
    a79c:	76 2f       	mov	r23, r22
    a79e:	6a 2f       	mov	r22, r26
    a7a0:	11 24       	eor	r1, r1
    a7a2:	9f 57       	subi	r25, 0x7F	; 127
    a7a4:	50 40       	sbci	r21, 0x00	; 0
    a7a6:	8a f0       	brmi	.+34     	; 0xa7ca <__mulsf3_pse+0x84>
    a7a8:	e1 f0       	breq	.+56     	; 0xa7e2 <__mulsf3_pse+0x9c>
    a7aa:	88 23       	and	r24, r24
    a7ac:	4a f0       	brmi	.+18     	; 0xa7c0 <__mulsf3_pse+0x7a>
    a7ae:	ee 0f       	add	r30, r30
    a7b0:	ff 1f       	adc	r31, r31
    a7b2:	bb 1f       	adc	r27, r27
    a7b4:	66 1f       	adc	r22, r22
    a7b6:	77 1f       	adc	r23, r23
    a7b8:	88 1f       	adc	r24, r24
    a7ba:	91 50       	subi	r25, 0x01	; 1
    a7bc:	50 40       	sbci	r21, 0x00	; 0
    a7be:	a9 f7       	brne	.-22     	; 0xa7aa <__mulsf3_pse+0x64>
    a7c0:	9e 3f       	cpi	r25, 0xFE	; 254
    a7c2:	51 05       	cpc	r21, r1
    a7c4:	70 f0       	brcs	.+28     	; 0xa7e2 <__mulsf3_pse+0x9c>
    a7c6:	07 cf       	rjmp	.-498    	; 0xa5d6 <__fp_inf>
    a7c8:	61 cf       	rjmp	.-318    	; 0xa68c <__fp_szero>
    a7ca:	5f 3f       	cpi	r21, 0xFF	; 255
    a7cc:	ec f3       	brlt	.-6      	; 0xa7c8 <__mulsf3_pse+0x82>
    a7ce:	98 3e       	cpi	r25, 0xE8	; 232
    a7d0:	dc f3       	brlt	.-10     	; 0xa7c8 <__mulsf3_pse+0x82>
    a7d2:	86 95       	lsr	r24
    a7d4:	77 95       	ror	r23
    a7d6:	67 95       	ror	r22
    a7d8:	b7 95       	ror	r27
    a7da:	f7 95       	ror	r31
    a7dc:	e7 95       	ror	r30
    a7de:	9f 5f       	subi	r25, 0xFF	; 255
    a7e0:	c1 f7       	brne	.-16     	; 0xa7d2 <__mulsf3_pse+0x8c>
    a7e2:	fe 2b       	or	r31, r30
    a7e4:	88 0f       	add	r24, r24
    a7e6:	91 1d       	adc	r25, r1
    a7e8:	96 95       	lsr	r25
    a7ea:	87 95       	ror	r24
    a7ec:	97 f9       	bld	r25, 7
    a7ee:	08 95       	ret

0000a7f0 <__fp_mpack>:
    a7f0:	9f 3f       	cpi	r25, 0xFF	; 255
    a7f2:	31 f0       	breq	.+12     	; 0xa800 <__fp_mpack_finite+0xc>

0000a7f4 <__fp_mpack_finite>:
    a7f4:	91 50       	subi	r25, 0x01	; 1
    a7f6:	20 f4       	brcc	.+8      	; 0xa800 <__fp_mpack_finite+0xc>
    a7f8:	87 95       	ror	r24
    a7fa:	77 95       	ror	r23
    a7fc:	67 95       	ror	r22
    a7fe:	b7 95       	ror	r27
    a800:	88 0f       	add	r24, r24
    a802:	91 1d       	adc	r25, r1
    a804:	96 95       	lsr	r25
    a806:	87 95       	ror	r24
    a808:	97 f9       	bld	r25, 7
    a80a:	08 95       	ret

0000a80c <__fp_powser>:
    a80c:	df 93       	push	r29
    a80e:	cf 93       	push	r28
    a810:	1f 93       	push	r17
    a812:	0f 93       	push	r16
    a814:	ff 92       	push	r15
    a816:	ef 92       	push	r14
    a818:	df 92       	push	r13
    a81a:	7b 01       	movw	r14, r22
    a81c:	8c 01       	movw	r16, r24
    a81e:	68 94       	set
    a820:	05 c0       	rjmp	.+10     	; 0xa82c <__fp_powser+0x20>
    a822:	da 2e       	mov	r13, r26
    a824:	ef 01       	movw	r28, r30
    a826:	8d df       	rcall	.-230    	; 0xa742 <__mulsf3x>
    a828:	fe 01       	movw	r30, r28
    a82a:	e8 94       	clt
    a82c:	a5 91       	lpm	r26, Z+
    a82e:	25 91       	lpm	r18, Z+
    a830:	35 91       	lpm	r19, Z+
    a832:	45 91       	lpm	r20, Z+
    a834:	55 91       	lpm	r21, Z+
    a836:	ae f3       	brts	.-22     	; 0xa822 <__fp_powser+0x16>
    a838:	ef 01       	movw	r28, r30
    a83a:	04 dd       	rcall	.-1528   	; 0xa244 <__addsf3x>
    a83c:	fe 01       	movw	r30, r28
    a83e:	97 01       	movw	r18, r14
    a840:	a8 01       	movw	r20, r16
    a842:	da 94       	dec	r13
    a844:	79 f7       	brne	.-34     	; 0xa824 <__fp_powser+0x18>
    a846:	df 90       	pop	r13
    a848:	ef 90       	pop	r14
    a84a:	ff 90       	pop	r15
    a84c:	0f 91       	pop	r16
    a84e:	1f 91       	pop	r17
    a850:	cf 91       	pop	r28
    a852:	df 91       	pop	r29
    a854:	08 95       	ret

0000a856 <vfprintf>:
    a856:	2f 92       	push	r2
    a858:	3f 92       	push	r3
    a85a:	4f 92       	push	r4
    a85c:	5f 92       	push	r5
    a85e:	6f 92       	push	r6
    a860:	7f 92       	push	r7
    a862:	8f 92       	push	r8
    a864:	9f 92       	push	r9
    a866:	af 92       	push	r10
    a868:	bf 92       	push	r11
    a86a:	cf 92       	push	r12
    a86c:	df 92       	push	r13
    a86e:	ef 92       	push	r14
    a870:	ff 92       	push	r15
    a872:	0f 93       	push	r16
    a874:	1f 93       	push	r17
    a876:	cf 93       	push	r28
    a878:	df 93       	push	r29
    a87a:	cd b7       	in	r28, 0x3d	; 61
    a87c:	de b7       	in	r29, 0x3e	; 62
    a87e:	60 97       	sbiw	r28, 0x10	; 16
    a880:	cd bf       	out	0x3d, r28	; 61
    a882:	de bf       	out	0x3e, r29	; 62
    a884:	7c 01       	movw	r14, r24
    a886:	1b 01       	movw	r2, r22
    a888:	6a 01       	movw	r12, r20
    a88a:	fc 01       	movw	r30, r24
    a88c:	16 82       	std	Z+6, r1	; 0x06
    a88e:	17 82       	std	Z+7, r1	; 0x07
    a890:	83 81       	ldd	r24, Z+3	; 0x03
    a892:	81 ff       	sbrs	r24, 1
    a894:	2a c3       	rjmp	.+1620   	; 0xaeea <vfprintf+0x694>
    a896:	9e 01       	movw	r18, r28
    a898:	2f 5f       	subi	r18, 0xFF	; 255
    a89a:	3f 4f       	sbci	r19, 0xFF	; 255
    a89c:	39 01       	movw	r6, r18
    a89e:	f7 01       	movw	r30, r14
    a8a0:	93 81       	ldd	r25, Z+3	; 0x03
    a8a2:	f1 01       	movw	r30, r2
    a8a4:	93 fd       	sbrc	r25, 3
    a8a6:	85 91       	lpm	r24, Z+
    a8a8:	93 ff       	sbrs	r25, 3
    a8aa:	81 91       	ld	r24, Z+
    a8ac:	1f 01       	movw	r2, r30
    a8ae:	88 23       	and	r24, r24
    a8b0:	09 f4       	brne	.+2      	; 0xa8b4 <vfprintf+0x5e>
    a8b2:	17 c3       	rjmp	.+1582   	; 0xaee2 <vfprintf+0x68c>
    a8b4:	85 32       	cpi	r24, 0x25	; 37
    a8b6:	39 f4       	brne	.+14     	; 0xa8c6 <vfprintf+0x70>
    a8b8:	93 fd       	sbrc	r25, 3
    a8ba:	85 91       	lpm	r24, Z+
    a8bc:	93 ff       	sbrs	r25, 3
    a8be:	81 91       	ld	r24, Z+
    a8c0:	1f 01       	movw	r2, r30
    a8c2:	85 32       	cpi	r24, 0x25	; 37
    a8c4:	31 f4       	brne	.+12     	; 0xa8d2 <vfprintf+0x7c>
    a8c6:	b7 01       	movw	r22, r14
    a8c8:	90 e0       	ldi	r25, 0x00	; 0
    a8ca:	17 d7       	rcall	.+3630   	; 0xb6fa <fputc>
    a8cc:	56 01       	movw	r10, r12
    a8ce:	65 01       	movw	r12, r10
    a8d0:	e6 cf       	rjmp	.-52     	; 0xa89e <vfprintf+0x48>
    a8d2:	10 e0       	ldi	r17, 0x00	; 0
    a8d4:	51 2c       	mov	r5, r1
    a8d6:	91 2c       	mov	r9, r1
    a8d8:	ff e1       	ldi	r31, 0x1F	; 31
    a8da:	f9 15       	cp	r31, r9
    a8dc:	d8 f0       	brcs	.+54     	; 0xa914 <vfprintf+0xbe>
    a8de:	8b 32       	cpi	r24, 0x2B	; 43
    a8e0:	79 f0       	breq	.+30     	; 0xa900 <vfprintf+0xaa>
    a8e2:	38 f4       	brcc	.+14     	; 0xa8f2 <vfprintf+0x9c>
    a8e4:	80 32       	cpi	r24, 0x20	; 32
    a8e6:	79 f0       	breq	.+30     	; 0xa906 <vfprintf+0xb0>
    a8e8:	83 32       	cpi	r24, 0x23	; 35
    a8ea:	a1 f4       	brne	.+40     	; 0xa914 <vfprintf+0xbe>
    a8ec:	f9 2d       	mov	r31, r9
    a8ee:	f0 61       	ori	r31, 0x10	; 16
    a8f0:	2e c0       	rjmp	.+92     	; 0xa94e <vfprintf+0xf8>
    a8f2:	8d 32       	cpi	r24, 0x2D	; 45
    a8f4:	61 f0       	breq	.+24     	; 0xa90e <vfprintf+0xb8>
    a8f6:	80 33       	cpi	r24, 0x30	; 48
    a8f8:	69 f4       	brne	.+26     	; 0xa914 <vfprintf+0xbe>
    a8fa:	29 2d       	mov	r18, r9
    a8fc:	21 60       	ori	r18, 0x01	; 1
    a8fe:	2d c0       	rjmp	.+90     	; 0xa95a <vfprintf+0x104>
    a900:	39 2d       	mov	r19, r9
    a902:	32 60       	ori	r19, 0x02	; 2
    a904:	93 2e       	mov	r9, r19
    a906:	89 2d       	mov	r24, r9
    a908:	84 60       	ori	r24, 0x04	; 4
    a90a:	98 2e       	mov	r9, r24
    a90c:	2a c0       	rjmp	.+84     	; 0xa962 <vfprintf+0x10c>
    a90e:	e9 2d       	mov	r30, r9
    a910:	e8 60       	ori	r30, 0x08	; 8
    a912:	15 c0       	rjmp	.+42     	; 0xa93e <vfprintf+0xe8>
    a914:	97 fc       	sbrc	r9, 7
    a916:	2d c0       	rjmp	.+90     	; 0xa972 <vfprintf+0x11c>
    a918:	20 ed       	ldi	r18, 0xD0	; 208
    a91a:	28 0f       	add	r18, r24
    a91c:	2a 30       	cpi	r18, 0x0A	; 10
    a91e:	88 f4       	brcc	.+34     	; 0xa942 <vfprintf+0xec>
    a920:	96 fe       	sbrs	r9, 6
    a922:	06 c0       	rjmp	.+12     	; 0xa930 <vfprintf+0xda>
    a924:	3a e0       	ldi	r19, 0x0A	; 10
    a926:	13 9f       	mul	r17, r19
    a928:	20 0d       	add	r18, r0
    a92a:	11 24       	eor	r1, r1
    a92c:	12 2f       	mov	r17, r18
    a92e:	19 c0       	rjmp	.+50     	; 0xa962 <vfprintf+0x10c>
    a930:	8a e0       	ldi	r24, 0x0A	; 10
    a932:	58 9e       	mul	r5, r24
    a934:	20 0d       	add	r18, r0
    a936:	11 24       	eor	r1, r1
    a938:	52 2e       	mov	r5, r18
    a93a:	e9 2d       	mov	r30, r9
    a93c:	e0 62       	ori	r30, 0x20	; 32
    a93e:	9e 2e       	mov	r9, r30
    a940:	10 c0       	rjmp	.+32     	; 0xa962 <vfprintf+0x10c>
    a942:	8e 32       	cpi	r24, 0x2E	; 46
    a944:	31 f4       	brne	.+12     	; 0xa952 <vfprintf+0xfc>
    a946:	96 fc       	sbrc	r9, 6
    a948:	cc c2       	rjmp	.+1432   	; 0xaee2 <vfprintf+0x68c>
    a94a:	f9 2d       	mov	r31, r9
    a94c:	f0 64       	ori	r31, 0x40	; 64
    a94e:	9f 2e       	mov	r9, r31
    a950:	08 c0       	rjmp	.+16     	; 0xa962 <vfprintf+0x10c>
    a952:	8c 36       	cpi	r24, 0x6C	; 108
    a954:	21 f4       	brne	.+8      	; 0xa95e <vfprintf+0x108>
    a956:	29 2d       	mov	r18, r9
    a958:	20 68       	ori	r18, 0x80	; 128
    a95a:	92 2e       	mov	r9, r18
    a95c:	02 c0       	rjmp	.+4      	; 0xa962 <vfprintf+0x10c>
    a95e:	88 36       	cpi	r24, 0x68	; 104
    a960:	41 f4       	brne	.+16     	; 0xa972 <vfprintf+0x11c>
    a962:	f1 01       	movw	r30, r2
    a964:	93 fd       	sbrc	r25, 3
    a966:	85 91       	lpm	r24, Z+
    a968:	93 ff       	sbrs	r25, 3
    a96a:	81 91       	ld	r24, Z+
    a96c:	1f 01       	movw	r2, r30
    a96e:	81 11       	cpse	r24, r1
    a970:	b3 cf       	rjmp	.-154    	; 0xa8d8 <vfprintf+0x82>
    a972:	9b eb       	ldi	r25, 0xBB	; 187
    a974:	98 0f       	add	r25, r24
    a976:	93 30       	cpi	r25, 0x03	; 3
    a978:	20 f4       	brcc	.+8      	; 0xa982 <vfprintf+0x12c>
    a97a:	99 2d       	mov	r25, r9
    a97c:	90 61       	ori	r25, 0x10	; 16
    a97e:	80 5e       	subi	r24, 0xE0	; 224
    a980:	07 c0       	rjmp	.+14     	; 0xa990 <vfprintf+0x13a>
    a982:	9b e9       	ldi	r25, 0x9B	; 155
    a984:	98 0f       	add	r25, r24
    a986:	93 30       	cpi	r25, 0x03	; 3
    a988:	08 f0       	brcs	.+2      	; 0xa98c <vfprintf+0x136>
    a98a:	59 c1       	rjmp	.+690    	; 0xac3e <vfprintf+0x3e8>
    a98c:	99 2d       	mov	r25, r9
    a98e:	9f 7e       	andi	r25, 0xEF	; 239
    a990:	96 ff       	sbrs	r25, 6
    a992:	16 e0       	ldi	r17, 0x06	; 6
    a994:	9f 73       	andi	r25, 0x3F	; 63
    a996:	99 2e       	mov	r9, r25
    a998:	85 36       	cpi	r24, 0x65	; 101
    a99a:	19 f4       	brne	.+6      	; 0xa9a2 <vfprintf+0x14c>
    a99c:	90 64       	ori	r25, 0x40	; 64
    a99e:	99 2e       	mov	r9, r25
    a9a0:	08 c0       	rjmp	.+16     	; 0xa9b2 <vfprintf+0x15c>
    a9a2:	86 36       	cpi	r24, 0x66	; 102
    a9a4:	21 f4       	brne	.+8      	; 0xa9ae <vfprintf+0x158>
    a9a6:	39 2f       	mov	r19, r25
    a9a8:	30 68       	ori	r19, 0x80	; 128
    a9aa:	93 2e       	mov	r9, r19
    a9ac:	02 c0       	rjmp	.+4      	; 0xa9b2 <vfprintf+0x15c>
    a9ae:	11 11       	cpse	r17, r1
    a9b0:	11 50       	subi	r17, 0x01	; 1
    a9b2:	97 fe       	sbrs	r9, 7
    a9b4:	07 c0       	rjmp	.+14     	; 0xa9c4 <vfprintf+0x16e>
    a9b6:	1c 33       	cpi	r17, 0x3C	; 60
    a9b8:	50 f4       	brcc	.+20     	; 0xa9ce <vfprintf+0x178>
    a9ba:	44 24       	eor	r4, r4
    a9bc:	43 94       	inc	r4
    a9be:	41 0e       	add	r4, r17
    a9c0:	27 e0       	ldi	r18, 0x07	; 7
    a9c2:	0b c0       	rjmp	.+22     	; 0xa9da <vfprintf+0x184>
    a9c4:	18 30       	cpi	r17, 0x08	; 8
    a9c6:	38 f0       	brcs	.+14     	; 0xa9d6 <vfprintf+0x180>
    a9c8:	27 e0       	ldi	r18, 0x07	; 7
    a9ca:	17 e0       	ldi	r17, 0x07	; 7
    a9cc:	05 c0       	rjmp	.+10     	; 0xa9d8 <vfprintf+0x182>
    a9ce:	27 e0       	ldi	r18, 0x07	; 7
    a9d0:	9c e3       	ldi	r25, 0x3C	; 60
    a9d2:	49 2e       	mov	r4, r25
    a9d4:	02 c0       	rjmp	.+4      	; 0xa9da <vfprintf+0x184>
    a9d6:	21 2f       	mov	r18, r17
    a9d8:	41 2c       	mov	r4, r1
    a9da:	56 01       	movw	r10, r12
    a9dc:	84 e0       	ldi	r24, 0x04	; 4
    a9de:	a8 0e       	add	r10, r24
    a9e0:	b1 1c       	adc	r11, r1
    a9e2:	f6 01       	movw	r30, r12
    a9e4:	60 81       	ld	r22, Z
    a9e6:	71 81       	ldd	r23, Z+1	; 0x01
    a9e8:	82 81       	ldd	r24, Z+2	; 0x02
    a9ea:	93 81       	ldd	r25, Z+3	; 0x03
    a9ec:	04 2d       	mov	r16, r4
    a9ee:	a3 01       	movw	r20, r6
    a9f0:	2b d5       	rcall	.+2646   	; 0xb448 <__ftoa_engine>
    a9f2:	6c 01       	movw	r12, r24
    a9f4:	f9 81       	ldd	r31, Y+1	; 0x01
    a9f6:	fc 87       	std	Y+12, r31	; 0x0c
    a9f8:	f0 ff       	sbrs	r31, 0
    a9fa:	02 c0       	rjmp	.+4      	; 0xaa00 <vfprintf+0x1aa>
    a9fc:	f3 ff       	sbrs	r31, 3
    a9fe:	06 c0       	rjmp	.+12     	; 0xaa0c <vfprintf+0x1b6>
    aa00:	91 fc       	sbrc	r9, 1
    aa02:	06 c0       	rjmp	.+12     	; 0xaa10 <vfprintf+0x1ba>
    aa04:	92 fe       	sbrs	r9, 2
    aa06:	06 c0       	rjmp	.+12     	; 0xaa14 <vfprintf+0x1be>
    aa08:	00 e2       	ldi	r16, 0x20	; 32
    aa0a:	05 c0       	rjmp	.+10     	; 0xaa16 <vfprintf+0x1c0>
    aa0c:	0d e2       	ldi	r16, 0x2D	; 45
    aa0e:	03 c0       	rjmp	.+6      	; 0xaa16 <vfprintf+0x1c0>
    aa10:	0b e2       	ldi	r16, 0x2B	; 43
    aa12:	01 c0       	rjmp	.+2      	; 0xaa16 <vfprintf+0x1c0>
    aa14:	00 e0       	ldi	r16, 0x00	; 0
    aa16:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa18:	8c 70       	andi	r24, 0x0C	; 12
    aa1a:	19 f0       	breq	.+6      	; 0xaa22 <vfprintf+0x1cc>
    aa1c:	01 11       	cpse	r16, r1
    aa1e:	43 c2       	rjmp	.+1158   	; 0xaea6 <vfprintf+0x650>
    aa20:	80 c2       	rjmp	.+1280   	; 0xaf22 <vfprintf+0x6cc>
    aa22:	97 fe       	sbrs	r9, 7
    aa24:	10 c0       	rjmp	.+32     	; 0xaa46 <vfprintf+0x1f0>
    aa26:	4c 0c       	add	r4, r12
    aa28:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa2a:	f4 ff       	sbrs	r31, 4
    aa2c:	04 c0       	rjmp	.+8      	; 0xaa36 <vfprintf+0x1e0>
    aa2e:	8a 81       	ldd	r24, Y+2	; 0x02
    aa30:	81 33       	cpi	r24, 0x31	; 49
    aa32:	09 f4       	brne	.+2      	; 0xaa36 <vfprintf+0x1e0>
    aa34:	4a 94       	dec	r4
    aa36:	14 14       	cp	r1, r4
    aa38:	74 f5       	brge	.+92     	; 0xaa96 <vfprintf+0x240>
    aa3a:	28 e0       	ldi	r18, 0x08	; 8
    aa3c:	24 15       	cp	r18, r4
    aa3e:	78 f5       	brcc	.+94     	; 0xaa9e <vfprintf+0x248>
    aa40:	88 e0       	ldi	r24, 0x08	; 8
    aa42:	48 2e       	mov	r4, r24
    aa44:	2c c0       	rjmp	.+88     	; 0xaa9e <vfprintf+0x248>
    aa46:	96 fc       	sbrc	r9, 6
    aa48:	2a c0       	rjmp	.+84     	; 0xaa9e <vfprintf+0x248>
    aa4a:	81 2f       	mov	r24, r17
    aa4c:	90 e0       	ldi	r25, 0x00	; 0
    aa4e:	8c 15       	cp	r24, r12
    aa50:	9d 05       	cpc	r25, r13
    aa52:	9c f0       	brlt	.+38     	; 0xaa7a <vfprintf+0x224>
    aa54:	3c ef       	ldi	r19, 0xFC	; 252
    aa56:	c3 16       	cp	r12, r19
    aa58:	3f ef       	ldi	r19, 0xFF	; 255
    aa5a:	d3 06       	cpc	r13, r19
    aa5c:	74 f0       	brlt	.+28     	; 0xaa7a <vfprintf+0x224>
    aa5e:	89 2d       	mov	r24, r9
    aa60:	80 68       	ori	r24, 0x80	; 128
    aa62:	98 2e       	mov	r9, r24
    aa64:	0a c0       	rjmp	.+20     	; 0xaa7a <vfprintf+0x224>
    aa66:	e2 e0       	ldi	r30, 0x02	; 2
    aa68:	f0 e0       	ldi	r31, 0x00	; 0
    aa6a:	ec 0f       	add	r30, r28
    aa6c:	fd 1f       	adc	r31, r29
    aa6e:	e1 0f       	add	r30, r17
    aa70:	f1 1d       	adc	r31, r1
    aa72:	80 81       	ld	r24, Z
    aa74:	80 33       	cpi	r24, 0x30	; 48
    aa76:	19 f4       	brne	.+6      	; 0xaa7e <vfprintf+0x228>
    aa78:	11 50       	subi	r17, 0x01	; 1
    aa7a:	11 11       	cpse	r17, r1
    aa7c:	f4 cf       	rjmp	.-24     	; 0xaa66 <vfprintf+0x210>
    aa7e:	97 fe       	sbrs	r9, 7
    aa80:	0e c0       	rjmp	.+28     	; 0xaa9e <vfprintf+0x248>
    aa82:	44 24       	eor	r4, r4
    aa84:	43 94       	inc	r4
    aa86:	41 0e       	add	r4, r17
    aa88:	81 2f       	mov	r24, r17
    aa8a:	90 e0       	ldi	r25, 0x00	; 0
    aa8c:	c8 16       	cp	r12, r24
    aa8e:	d9 06       	cpc	r13, r25
    aa90:	2c f4       	brge	.+10     	; 0xaa9c <vfprintf+0x246>
    aa92:	1c 19       	sub	r17, r12
    aa94:	04 c0       	rjmp	.+8      	; 0xaa9e <vfprintf+0x248>
    aa96:	44 24       	eor	r4, r4
    aa98:	43 94       	inc	r4
    aa9a:	01 c0       	rjmp	.+2      	; 0xaa9e <vfprintf+0x248>
    aa9c:	10 e0       	ldi	r17, 0x00	; 0
    aa9e:	97 fe       	sbrs	r9, 7
    aaa0:	06 c0       	rjmp	.+12     	; 0xaaae <vfprintf+0x258>
    aaa2:	1c 14       	cp	r1, r12
    aaa4:	1d 04       	cpc	r1, r13
    aaa6:	34 f4       	brge	.+12     	; 0xaab4 <vfprintf+0x25e>
    aaa8:	c6 01       	movw	r24, r12
    aaaa:	01 96       	adiw	r24, 0x01	; 1
    aaac:	05 c0       	rjmp	.+10     	; 0xaab8 <vfprintf+0x262>
    aaae:	85 e0       	ldi	r24, 0x05	; 5
    aab0:	90 e0       	ldi	r25, 0x00	; 0
    aab2:	02 c0       	rjmp	.+4      	; 0xaab8 <vfprintf+0x262>
    aab4:	81 e0       	ldi	r24, 0x01	; 1
    aab6:	90 e0       	ldi	r25, 0x00	; 0
    aab8:	01 11       	cpse	r16, r1
    aaba:	01 96       	adiw	r24, 0x01	; 1
    aabc:	11 23       	and	r17, r17
    aabe:	31 f0       	breq	.+12     	; 0xaacc <vfprintf+0x276>
    aac0:	21 2f       	mov	r18, r17
    aac2:	30 e0       	ldi	r19, 0x00	; 0
    aac4:	2f 5f       	subi	r18, 0xFF	; 255
    aac6:	3f 4f       	sbci	r19, 0xFF	; 255
    aac8:	82 0f       	add	r24, r18
    aaca:	93 1f       	adc	r25, r19
    aacc:	25 2d       	mov	r18, r5
    aace:	30 e0       	ldi	r19, 0x00	; 0
    aad0:	82 17       	cp	r24, r18
    aad2:	93 07       	cpc	r25, r19
    aad4:	14 f4       	brge	.+4      	; 0xaada <vfprintf+0x284>
    aad6:	58 1a       	sub	r5, r24
    aad8:	01 c0       	rjmp	.+2      	; 0xaadc <vfprintf+0x286>
    aada:	51 2c       	mov	r5, r1
    aadc:	89 2d       	mov	r24, r9
    aade:	89 70       	andi	r24, 0x09	; 9
    aae0:	41 f4       	brne	.+16     	; 0xaaf2 <vfprintf+0x29c>
    aae2:	55 20       	and	r5, r5
    aae4:	31 f0       	breq	.+12     	; 0xaaf2 <vfprintf+0x29c>
    aae6:	b7 01       	movw	r22, r14
    aae8:	80 e2       	ldi	r24, 0x20	; 32
    aaea:	90 e0       	ldi	r25, 0x00	; 0
    aaec:	06 d6       	rcall	.+3084   	; 0xb6fa <fputc>
    aaee:	5a 94       	dec	r5
    aaf0:	f8 cf       	rjmp	.-16     	; 0xaae2 <vfprintf+0x28c>
    aaf2:	00 23       	and	r16, r16
    aaf4:	21 f0       	breq	.+8      	; 0xaafe <vfprintf+0x2a8>
    aaf6:	b7 01       	movw	r22, r14
    aaf8:	80 2f       	mov	r24, r16
    aafa:	90 e0       	ldi	r25, 0x00	; 0
    aafc:	fe d5       	rcall	.+3068   	; 0xb6fa <fputc>
    aafe:	93 fc       	sbrc	r9, 3
    ab00:	08 c0       	rjmp	.+16     	; 0xab12 <vfprintf+0x2bc>
    ab02:	55 20       	and	r5, r5
    ab04:	31 f0       	breq	.+12     	; 0xab12 <vfprintf+0x2bc>
    ab06:	b7 01       	movw	r22, r14
    ab08:	80 e3       	ldi	r24, 0x30	; 48
    ab0a:	90 e0       	ldi	r25, 0x00	; 0
    ab0c:	f6 d5       	rcall	.+3052   	; 0xb6fa <fputc>
    ab0e:	5a 94       	dec	r5
    ab10:	f8 cf       	rjmp	.-16     	; 0xab02 <vfprintf+0x2ac>
    ab12:	97 fe       	sbrs	r9, 7
    ab14:	4a c0       	rjmp	.+148    	; 0xabaa <vfprintf+0x354>
    ab16:	46 01       	movw	r8, r12
    ab18:	d7 fe       	sbrs	r13, 7
    ab1a:	02 c0       	rjmp	.+4      	; 0xab20 <vfprintf+0x2ca>
    ab1c:	81 2c       	mov	r8, r1
    ab1e:	91 2c       	mov	r9, r1
    ab20:	c6 01       	movw	r24, r12
    ab22:	88 19       	sub	r24, r8
    ab24:	99 09       	sbc	r25, r9
    ab26:	f3 01       	movw	r30, r6
    ab28:	e8 0f       	add	r30, r24
    ab2a:	f9 1f       	adc	r31, r25
    ab2c:	ed 87       	std	Y+13, r30	; 0x0d
    ab2e:	fe 87       	std	Y+14, r31	; 0x0e
    ab30:	96 01       	movw	r18, r12
    ab32:	24 19       	sub	r18, r4
    ab34:	31 09       	sbc	r19, r1
    ab36:	2f 87       	std	Y+15, r18	; 0x0f
    ab38:	38 8b       	std	Y+16, r19	; 0x10
    ab3a:	01 2f       	mov	r16, r17
    ab3c:	10 e0       	ldi	r17, 0x00	; 0
    ab3e:	11 95       	neg	r17
    ab40:	01 95       	neg	r16
    ab42:	11 09       	sbc	r17, r1
    ab44:	3f ef       	ldi	r19, 0xFF	; 255
    ab46:	83 16       	cp	r8, r19
    ab48:	93 06       	cpc	r9, r19
    ab4a:	21 f4       	brne	.+8      	; 0xab54 <vfprintf+0x2fe>
    ab4c:	b7 01       	movw	r22, r14
    ab4e:	8e e2       	ldi	r24, 0x2E	; 46
    ab50:	90 e0       	ldi	r25, 0x00	; 0
    ab52:	d3 d5       	rcall	.+2982   	; 0xb6fa <fputc>
    ab54:	c8 14       	cp	r12, r8
    ab56:	d9 04       	cpc	r13, r9
    ab58:	4c f0       	brlt	.+18     	; 0xab6c <vfprintf+0x316>
    ab5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    ab5c:	98 89       	ldd	r25, Y+16	; 0x10
    ab5e:	88 15       	cp	r24, r8
    ab60:	99 05       	cpc	r25, r9
    ab62:	24 f4       	brge	.+8      	; 0xab6c <vfprintf+0x316>
    ab64:	ed 85       	ldd	r30, Y+13	; 0x0d
    ab66:	fe 85       	ldd	r31, Y+14	; 0x0e
    ab68:	81 81       	ldd	r24, Z+1	; 0x01
    ab6a:	01 c0       	rjmp	.+2      	; 0xab6e <vfprintf+0x318>
    ab6c:	80 e3       	ldi	r24, 0x30	; 48
    ab6e:	f1 e0       	ldi	r31, 0x01	; 1
    ab70:	8f 1a       	sub	r8, r31
    ab72:	91 08       	sbc	r9, r1
    ab74:	2d 85       	ldd	r18, Y+13	; 0x0d
    ab76:	3e 85       	ldd	r19, Y+14	; 0x0e
    ab78:	2f 5f       	subi	r18, 0xFF	; 255
    ab7a:	3f 4f       	sbci	r19, 0xFF	; 255
    ab7c:	2d 87       	std	Y+13, r18	; 0x0d
    ab7e:	3e 87       	std	Y+14, r19	; 0x0e
    ab80:	80 16       	cp	r8, r16
    ab82:	91 06       	cpc	r9, r17
    ab84:	24 f0       	brlt	.+8      	; 0xab8e <vfprintf+0x338>
    ab86:	b7 01       	movw	r22, r14
    ab88:	90 e0       	ldi	r25, 0x00	; 0
    ab8a:	b7 d5       	rcall	.+2926   	; 0xb6fa <fputc>
    ab8c:	db cf       	rjmp	.-74     	; 0xab44 <vfprintf+0x2ee>
    ab8e:	c8 14       	cp	r12, r8
    ab90:	d9 04       	cpc	r13, r9
    ab92:	41 f4       	brne	.+16     	; 0xaba4 <vfprintf+0x34e>
    ab94:	9a 81       	ldd	r25, Y+2	; 0x02
    ab96:	96 33       	cpi	r25, 0x36	; 54
    ab98:	20 f4       	brcc	.+8      	; 0xaba2 <vfprintf+0x34c>
    ab9a:	95 33       	cpi	r25, 0x35	; 53
    ab9c:	19 f4       	brne	.+6      	; 0xaba4 <vfprintf+0x34e>
    ab9e:	3c 85       	ldd	r19, Y+12	; 0x0c
    aba0:	34 ff       	sbrs	r19, 4
    aba2:	81 e3       	ldi	r24, 0x31	; 49
    aba4:	b7 01       	movw	r22, r14
    aba6:	90 e0       	ldi	r25, 0x00	; 0
    aba8:	48 c0       	rjmp	.+144    	; 0xac3a <vfprintf+0x3e4>
    abaa:	8a 81       	ldd	r24, Y+2	; 0x02
    abac:	81 33       	cpi	r24, 0x31	; 49
    abae:	19 f0       	breq	.+6      	; 0xabb6 <vfprintf+0x360>
    abb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    abb2:	9f 7e       	andi	r25, 0xEF	; 239
    abb4:	9c 87       	std	Y+12, r25	; 0x0c
    abb6:	b7 01       	movw	r22, r14
    abb8:	90 e0       	ldi	r25, 0x00	; 0
    abba:	9f d5       	rcall	.+2878   	; 0xb6fa <fputc>
    abbc:	11 11       	cpse	r17, r1
    abbe:	05 c0       	rjmp	.+10     	; 0xabca <vfprintf+0x374>
    abc0:	94 fc       	sbrc	r9, 4
    abc2:	16 c0       	rjmp	.+44     	; 0xabf0 <vfprintf+0x39a>
    abc4:	85 e6       	ldi	r24, 0x65	; 101
    abc6:	90 e0       	ldi	r25, 0x00	; 0
    abc8:	15 c0       	rjmp	.+42     	; 0xabf4 <vfprintf+0x39e>
    abca:	b7 01       	movw	r22, r14
    abcc:	8e e2       	ldi	r24, 0x2E	; 46
    abce:	90 e0       	ldi	r25, 0x00	; 0
    abd0:	94 d5       	rcall	.+2856   	; 0xb6fa <fputc>
    abd2:	1e 5f       	subi	r17, 0xFE	; 254
    abd4:	82 e0       	ldi	r24, 0x02	; 2
    abd6:	01 e0       	ldi	r16, 0x01	; 1
    abd8:	08 0f       	add	r16, r24
    abda:	f3 01       	movw	r30, r6
    abdc:	e8 0f       	add	r30, r24
    abde:	f1 1d       	adc	r31, r1
    abe0:	80 81       	ld	r24, Z
    abe2:	b7 01       	movw	r22, r14
    abe4:	90 e0       	ldi	r25, 0x00	; 0
    abe6:	89 d5       	rcall	.+2834   	; 0xb6fa <fputc>
    abe8:	80 2f       	mov	r24, r16
    abea:	01 13       	cpse	r16, r17
    abec:	f4 cf       	rjmp	.-24     	; 0xabd6 <vfprintf+0x380>
    abee:	e8 cf       	rjmp	.-48     	; 0xabc0 <vfprintf+0x36a>
    abf0:	85 e4       	ldi	r24, 0x45	; 69
    abf2:	90 e0       	ldi	r25, 0x00	; 0
    abf4:	b7 01       	movw	r22, r14
    abf6:	81 d5       	rcall	.+2818   	; 0xb6fa <fputc>
    abf8:	d7 fc       	sbrc	r13, 7
    abfa:	06 c0       	rjmp	.+12     	; 0xac08 <vfprintf+0x3b2>
    abfc:	c1 14       	cp	r12, r1
    abfe:	d1 04       	cpc	r13, r1
    ac00:	41 f4       	brne	.+16     	; 0xac12 <vfprintf+0x3bc>
    ac02:	ec 85       	ldd	r30, Y+12	; 0x0c
    ac04:	e4 ff       	sbrs	r30, 4
    ac06:	05 c0       	rjmp	.+10     	; 0xac12 <vfprintf+0x3bc>
    ac08:	d1 94       	neg	r13
    ac0a:	c1 94       	neg	r12
    ac0c:	d1 08       	sbc	r13, r1
    ac0e:	8d e2       	ldi	r24, 0x2D	; 45
    ac10:	01 c0       	rjmp	.+2      	; 0xac14 <vfprintf+0x3be>
    ac12:	8b e2       	ldi	r24, 0x2B	; 43
    ac14:	b7 01       	movw	r22, r14
    ac16:	90 e0       	ldi	r25, 0x00	; 0
    ac18:	70 d5       	rcall	.+2784   	; 0xb6fa <fputc>
    ac1a:	80 e3       	ldi	r24, 0x30	; 48
    ac1c:	2a e0       	ldi	r18, 0x0A	; 10
    ac1e:	c2 16       	cp	r12, r18
    ac20:	d1 04       	cpc	r13, r1
    ac22:	2c f0       	brlt	.+10     	; 0xac2e <vfprintf+0x3d8>
    ac24:	8f 5f       	subi	r24, 0xFF	; 255
    ac26:	fa e0       	ldi	r31, 0x0A	; 10
    ac28:	cf 1a       	sub	r12, r31
    ac2a:	d1 08       	sbc	r13, r1
    ac2c:	f7 cf       	rjmp	.-18     	; 0xac1c <vfprintf+0x3c6>
    ac2e:	b7 01       	movw	r22, r14
    ac30:	90 e0       	ldi	r25, 0x00	; 0
    ac32:	63 d5       	rcall	.+2758   	; 0xb6fa <fputc>
    ac34:	b7 01       	movw	r22, r14
    ac36:	c6 01       	movw	r24, r12
    ac38:	c0 96       	adiw	r24, 0x30	; 48
    ac3a:	5f d5       	rcall	.+2750   	; 0xb6fa <fputc>
    ac3c:	49 c1       	rjmp	.+658    	; 0xaed0 <vfprintf+0x67a>
    ac3e:	83 36       	cpi	r24, 0x63	; 99
    ac40:	31 f0       	breq	.+12     	; 0xac4e <vfprintf+0x3f8>
    ac42:	83 37       	cpi	r24, 0x73	; 115
    ac44:	79 f0       	breq	.+30     	; 0xac64 <vfprintf+0x40e>
    ac46:	83 35       	cpi	r24, 0x53	; 83
    ac48:	09 f0       	breq	.+2      	; 0xac4c <vfprintf+0x3f6>
    ac4a:	52 c0       	rjmp	.+164    	; 0xacf0 <vfprintf+0x49a>
    ac4c:	1f c0       	rjmp	.+62     	; 0xac8c <vfprintf+0x436>
    ac4e:	56 01       	movw	r10, r12
    ac50:	32 e0       	ldi	r19, 0x02	; 2
    ac52:	a3 0e       	add	r10, r19
    ac54:	b1 1c       	adc	r11, r1
    ac56:	f6 01       	movw	r30, r12
    ac58:	80 81       	ld	r24, Z
    ac5a:	89 83       	std	Y+1, r24	; 0x01
    ac5c:	01 e0       	ldi	r16, 0x01	; 1
    ac5e:	10 e0       	ldi	r17, 0x00	; 0
    ac60:	63 01       	movw	r12, r6
    ac62:	11 c0       	rjmp	.+34     	; 0xac86 <vfprintf+0x430>
    ac64:	56 01       	movw	r10, r12
    ac66:	f2 e0       	ldi	r31, 0x02	; 2
    ac68:	af 0e       	add	r10, r31
    ac6a:	b1 1c       	adc	r11, r1
    ac6c:	f6 01       	movw	r30, r12
    ac6e:	c0 80       	ld	r12, Z
    ac70:	d1 80       	ldd	r13, Z+1	; 0x01
    ac72:	96 fe       	sbrs	r9, 6
    ac74:	03 c0       	rjmp	.+6      	; 0xac7c <vfprintf+0x426>
    ac76:	61 2f       	mov	r22, r17
    ac78:	70 e0       	ldi	r23, 0x00	; 0
    ac7a:	02 c0       	rjmp	.+4      	; 0xac80 <vfprintf+0x42a>
    ac7c:	6f ef       	ldi	r22, 0xFF	; 255
    ac7e:	7f ef       	ldi	r23, 0xFF	; 255
    ac80:	c6 01       	movw	r24, r12
    ac82:	d7 d4       	rcall	.+2478   	; 0xb632 <strnlen>
    ac84:	8c 01       	movw	r16, r24
    ac86:	f9 2d       	mov	r31, r9
    ac88:	ff 77       	andi	r31, 0x7F	; 127
    ac8a:	13 c0       	rjmp	.+38     	; 0xacb2 <vfprintf+0x45c>
    ac8c:	56 01       	movw	r10, r12
    ac8e:	22 e0       	ldi	r18, 0x02	; 2
    ac90:	a2 0e       	add	r10, r18
    ac92:	b1 1c       	adc	r11, r1
    ac94:	f6 01       	movw	r30, r12
    ac96:	c0 80       	ld	r12, Z
    ac98:	d1 80       	ldd	r13, Z+1	; 0x01
    ac9a:	96 fe       	sbrs	r9, 6
    ac9c:	03 c0       	rjmp	.+6      	; 0xaca4 <vfprintf+0x44e>
    ac9e:	61 2f       	mov	r22, r17
    aca0:	70 e0       	ldi	r23, 0x00	; 0
    aca2:	02 c0       	rjmp	.+4      	; 0xaca8 <vfprintf+0x452>
    aca4:	6f ef       	ldi	r22, 0xFF	; 255
    aca6:	7f ef       	ldi	r23, 0xFF	; 255
    aca8:	c6 01       	movw	r24, r12
    acaa:	a6 d4       	rcall	.+2380   	; 0xb5f8 <strnlen_P>
    acac:	8c 01       	movw	r16, r24
    acae:	f9 2d       	mov	r31, r9
    acb0:	f0 68       	ori	r31, 0x80	; 128
    acb2:	9f 2e       	mov	r9, r31
    acb4:	f3 fd       	sbrc	r31, 3
    acb6:	18 c0       	rjmp	.+48     	; 0xace8 <vfprintf+0x492>
    acb8:	85 2d       	mov	r24, r5
    acba:	90 e0       	ldi	r25, 0x00	; 0
    acbc:	08 17       	cp	r16, r24
    acbe:	19 07       	cpc	r17, r25
    acc0:	98 f4       	brcc	.+38     	; 0xace8 <vfprintf+0x492>
    acc2:	b7 01       	movw	r22, r14
    acc4:	80 e2       	ldi	r24, 0x20	; 32
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	18 d5       	rcall	.+2608   	; 0xb6fa <fputc>
    acca:	5a 94       	dec	r5
    accc:	f5 cf       	rjmp	.-22     	; 0xacb8 <vfprintf+0x462>
    acce:	f6 01       	movw	r30, r12
    acd0:	97 fc       	sbrc	r9, 7
    acd2:	85 91       	lpm	r24, Z+
    acd4:	97 fe       	sbrs	r9, 7
    acd6:	81 91       	ld	r24, Z+
    acd8:	6f 01       	movw	r12, r30
    acda:	b7 01       	movw	r22, r14
    acdc:	90 e0       	ldi	r25, 0x00	; 0
    acde:	0d d5       	rcall	.+2586   	; 0xb6fa <fputc>
    ace0:	51 10       	cpse	r5, r1
    ace2:	5a 94       	dec	r5
    ace4:	01 50       	subi	r16, 0x01	; 1
    ace6:	11 09       	sbc	r17, r1
    ace8:	01 15       	cp	r16, r1
    acea:	11 05       	cpc	r17, r1
    acec:	81 f7       	brne	.-32     	; 0xacce <vfprintf+0x478>
    acee:	f0 c0       	rjmp	.+480    	; 0xaed0 <vfprintf+0x67a>
    acf0:	84 36       	cpi	r24, 0x64	; 100
    acf2:	11 f0       	breq	.+4      	; 0xacf8 <vfprintf+0x4a2>
    acf4:	89 36       	cpi	r24, 0x69	; 105
    acf6:	59 f5       	brne	.+86     	; 0xad4e <vfprintf+0x4f8>
    acf8:	56 01       	movw	r10, r12
    acfa:	97 fe       	sbrs	r9, 7
    acfc:	09 c0       	rjmp	.+18     	; 0xad10 <vfprintf+0x4ba>
    acfe:	24 e0       	ldi	r18, 0x04	; 4
    ad00:	a2 0e       	add	r10, r18
    ad02:	b1 1c       	adc	r11, r1
    ad04:	f6 01       	movw	r30, r12
    ad06:	60 81       	ld	r22, Z
    ad08:	71 81       	ldd	r23, Z+1	; 0x01
    ad0a:	82 81       	ldd	r24, Z+2	; 0x02
    ad0c:	93 81       	ldd	r25, Z+3	; 0x03
    ad0e:	0a c0       	rjmp	.+20     	; 0xad24 <vfprintf+0x4ce>
    ad10:	f2 e0       	ldi	r31, 0x02	; 2
    ad12:	af 0e       	add	r10, r31
    ad14:	b1 1c       	adc	r11, r1
    ad16:	f6 01       	movw	r30, r12
    ad18:	60 81       	ld	r22, Z
    ad1a:	71 81       	ldd	r23, Z+1	; 0x01
    ad1c:	07 2e       	mov	r0, r23
    ad1e:	00 0c       	add	r0, r0
    ad20:	88 0b       	sbc	r24, r24
    ad22:	99 0b       	sbc	r25, r25
    ad24:	f9 2d       	mov	r31, r9
    ad26:	ff 76       	andi	r31, 0x6F	; 111
    ad28:	9f 2e       	mov	r9, r31
    ad2a:	97 ff       	sbrs	r25, 7
    ad2c:	09 c0       	rjmp	.+18     	; 0xad40 <vfprintf+0x4ea>
    ad2e:	90 95       	com	r25
    ad30:	80 95       	com	r24
    ad32:	70 95       	com	r23
    ad34:	61 95       	neg	r22
    ad36:	7f 4f       	sbci	r23, 0xFF	; 255
    ad38:	8f 4f       	sbci	r24, 0xFF	; 255
    ad3a:	9f 4f       	sbci	r25, 0xFF	; 255
    ad3c:	f0 68       	ori	r31, 0x80	; 128
    ad3e:	9f 2e       	mov	r9, r31
    ad40:	2a e0       	ldi	r18, 0x0A	; 10
    ad42:	30 e0       	ldi	r19, 0x00	; 0
    ad44:	a3 01       	movw	r20, r6
    ad46:	80 d5       	rcall	.+2816   	; 0xb848 <__ultoa_invert>
    ad48:	c8 2e       	mov	r12, r24
    ad4a:	c6 18       	sub	r12, r6
    ad4c:	3e c0       	rjmp	.+124    	; 0xadca <vfprintf+0x574>
    ad4e:	09 2d       	mov	r16, r9
    ad50:	85 37       	cpi	r24, 0x75	; 117
    ad52:	21 f4       	brne	.+8      	; 0xad5c <vfprintf+0x506>
    ad54:	0f 7e       	andi	r16, 0xEF	; 239
    ad56:	2a e0       	ldi	r18, 0x0A	; 10
    ad58:	30 e0       	ldi	r19, 0x00	; 0
    ad5a:	1d c0       	rjmp	.+58     	; 0xad96 <vfprintf+0x540>
    ad5c:	09 7f       	andi	r16, 0xF9	; 249
    ad5e:	8f 36       	cpi	r24, 0x6F	; 111
    ad60:	91 f0       	breq	.+36     	; 0xad86 <vfprintf+0x530>
    ad62:	18 f4       	brcc	.+6      	; 0xad6a <vfprintf+0x514>
    ad64:	88 35       	cpi	r24, 0x58	; 88
    ad66:	59 f0       	breq	.+22     	; 0xad7e <vfprintf+0x528>
    ad68:	bc c0       	rjmp	.+376    	; 0xaee2 <vfprintf+0x68c>
    ad6a:	80 37       	cpi	r24, 0x70	; 112
    ad6c:	19 f0       	breq	.+6      	; 0xad74 <vfprintf+0x51e>
    ad6e:	88 37       	cpi	r24, 0x78	; 120
    ad70:	11 f0       	breq	.+4      	; 0xad76 <vfprintf+0x520>
    ad72:	b7 c0       	rjmp	.+366    	; 0xaee2 <vfprintf+0x68c>
    ad74:	00 61       	ori	r16, 0x10	; 16
    ad76:	04 ff       	sbrs	r16, 4
    ad78:	09 c0       	rjmp	.+18     	; 0xad8c <vfprintf+0x536>
    ad7a:	04 60       	ori	r16, 0x04	; 4
    ad7c:	07 c0       	rjmp	.+14     	; 0xad8c <vfprintf+0x536>
    ad7e:	94 fe       	sbrs	r9, 4
    ad80:	08 c0       	rjmp	.+16     	; 0xad92 <vfprintf+0x53c>
    ad82:	06 60       	ori	r16, 0x06	; 6
    ad84:	06 c0       	rjmp	.+12     	; 0xad92 <vfprintf+0x53c>
    ad86:	28 e0       	ldi	r18, 0x08	; 8
    ad88:	30 e0       	ldi	r19, 0x00	; 0
    ad8a:	05 c0       	rjmp	.+10     	; 0xad96 <vfprintf+0x540>
    ad8c:	20 e1       	ldi	r18, 0x10	; 16
    ad8e:	30 e0       	ldi	r19, 0x00	; 0
    ad90:	02 c0       	rjmp	.+4      	; 0xad96 <vfprintf+0x540>
    ad92:	20 e1       	ldi	r18, 0x10	; 16
    ad94:	32 e0       	ldi	r19, 0x02	; 2
    ad96:	56 01       	movw	r10, r12
    ad98:	07 ff       	sbrs	r16, 7
    ad9a:	09 c0       	rjmp	.+18     	; 0xadae <vfprintf+0x558>
    ad9c:	84 e0       	ldi	r24, 0x04	; 4
    ad9e:	a8 0e       	add	r10, r24
    ada0:	b1 1c       	adc	r11, r1
    ada2:	f6 01       	movw	r30, r12
    ada4:	60 81       	ld	r22, Z
    ada6:	71 81       	ldd	r23, Z+1	; 0x01
    ada8:	82 81       	ldd	r24, Z+2	; 0x02
    adaa:	93 81       	ldd	r25, Z+3	; 0x03
    adac:	08 c0       	rjmp	.+16     	; 0xadbe <vfprintf+0x568>
    adae:	f2 e0       	ldi	r31, 0x02	; 2
    adb0:	af 0e       	add	r10, r31
    adb2:	b1 1c       	adc	r11, r1
    adb4:	f6 01       	movw	r30, r12
    adb6:	60 81       	ld	r22, Z
    adb8:	71 81       	ldd	r23, Z+1	; 0x01
    adba:	80 e0       	ldi	r24, 0x00	; 0
    adbc:	90 e0       	ldi	r25, 0x00	; 0
    adbe:	a3 01       	movw	r20, r6
    adc0:	43 d5       	rcall	.+2694   	; 0xb848 <__ultoa_invert>
    adc2:	c8 2e       	mov	r12, r24
    adc4:	c6 18       	sub	r12, r6
    adc6:	0f 77       	andi	r16, 0x7F	; 127
    adc8:	90 2e       	mov	r9, r16
    adca:	96 fe       	sbrs	r9, 6
    adcc:	0b c0       	rjmp	.+22     	; 0xade4 <vfprintf+0x58e>
    adce:	09 2d       	mov	r16, r9
    add0:	0e 7f       	andi	r16, 0xFE	; 254
    add2:	c1 16       	cp	r12, r17
    add4:	50 f4       	brcc	.+20     	; 0xadea <vfprintf+0x594>
    add6:	94 fe       	sbrs	r9, 4
    add8:	0a c0       	rjmp	.+20     	; 0xadee <vfprintf+0x598>
    adda:	92 fc       	sbrc	r9, 2
    addc:	08 c0       	rjmp	.+16     	; 0xadee <vfprintf+0x598>
    adde:	09 2d       	mov	r16, r9
    ade0:	0e 7e       	andi	r16, 0xEE	; 238
    ade2:	05 c0       	rjmp	.+10     	; 0xadee <vfprintf+0x598>
    ade4:	dc 2c       	mov	r13, r12
    ade6:	09 2d       	mov	r16, r9
    ade8:	03 c0       	rjmp	.+6      	; 0xadf0 <vfprintf+0x59a>
    adea:	dc 2c       	mov	r13, r12
    adec:	01 c0       	rjmp	.+2      	; 0xadf0 <vfprintf+0x59a>
    adee:	d1 2e       	mov	r13, r17
    adf0:	04 ff       	sbrs	r16, 4
    adf2:	0d c0       	rjmp	.+26     	; 0xae0e <vfprintf+0x5b8>
    adf4:	fe 01       	movw	r30, r28
    adf6:	ec 0d       	add	r30, r12
    adf8:	f1 1d       	adc	r31, r1
    adfa:	80 81       	ld	r24, Z
    adfc:	80 33       	cpi	r24, 0x30	; 48
    adfe:	11 f4       	brne	.+4      	; 0xae04 <vfprintf+0x5ae>
    ae00:	09 7e       	andi	r16, 0xE9	; 233
    ae02:	09 c0       	rjmp	.+18     	; 0xae16 <vfprintf+0x5c0>
    ae04:	02 ff       	sbrs	r16, 2
    ae06:	06 c0       	rjmp	.+12     	; 0xae14 <vfprintf+0x5be>
    ae08:	d3 94       	inc	r13
    ae0a:	d3 94       	inc	r13
    ae0c:	04 c0       	rjmp	.+8      	; 0xae16 <vfprintf+0x5c0>
    ae0e:	80 2f       	mov	r24, r16
    ae10:	86 78       	andi	r24, 0x86	; 134
    ae12:	09 f0       	breq	.+2      	; 0xae16 <vfprintf+0x5c0>
    ae14:	d3 94       	inc	r13
    ae16:	03 fd       	sbrc	r16, 3
    ae18:	10 c0       	rjmp	.+32     	; 0xae3a <vfprintf+0x5e4>
    ae1a:	00 ff       	sbrs	r16, 0
    ae1c:	06 c0       	rjmp	.+12     	; 0xae2a <vfprintf+0x5d4>
    ae1e:	1c 2d       	mov	r17, r12
    ae20:	d5 14       	cp	r13, r5
    ae22:	78 f4       	brcc	.+30     	; 0xae42 <vfprintf+0x5ec>
    ae24:	15 0d       	add	r17, r5
    ae26:	1d 19       	sub	r17, r13
    ae28:	0c c0       	rjmp	.+24     	; 0xae42 <vfprintf+0x5ec>
    ae2a:	d5 14       	cp	r13, r5
    ae2c:	50 f4       	brcc	.+20     	; 0xae42 <vfprintf+0x5ec>
    ae2e:	b7 01       	movw	r22, r14
    ae30:	80 e2       	ldi	r24, 0x20	; 32
    ae32:	90 e0       	ldi	r25, 0x00	; 0
    ae34:	62 d4       	rcall	.+2244   	; 0xb6fa <fputc>
    ae36:	d3 94       	inc	r13
    ae38:	f8 cf       	rjmp	.-16     	; 0xae2a <vfprintf+0x5d4>
    ae3a:	d5 14       	cp	r13, r5
    ae3c:	10 f4       	brcc	.+4      	; 0xae42 <vfprintf+0x5ec>
    ae3e:	5d 18       	sub	r5, r13
    ae40:	01 c0       	rjmp	.+2      	; 0xae44 <vfprintf+0x5ee>
    ae42:	51 2c       	mov	r5, r1
    ae44:	04 ff       	sbrs	r16, 4
    ae46:	0f c0       	rjmp	.+30     	; 0xae66 <vfprintf+0x610>
    ae48:	b7 01       	movw	r22, r14
    ae4a:	80 e3       	ldi	r24, 0x30	; 48
    ae4c:	90 e0       	ldi	r25, 0x00	; 0
    ae4e:	55 d4       	rcall	.+2218   	; 0xb6fa <fputc>
    ae50:	02 ff       	sbrs	r16, 2
    ae52:	16 c0       	rjmp	.+44     	; 0xae80 <vfprintf+0x62a>
    ae54:	01 fd       	sbrc	r16, 1
    ae56:	03 c0       	rjmp	.+6      	; 0xae5e <vfprintf+0x608>
    ae58:	88 e7       	ldi	r24, 0x78	; 120
    ae5a:	90 e0       	ldi	r25, 0x00	; 0
    ae5c:	02 c0       	rjmp	.+4      	; 0xae62 <vfprintf+0x60c>
    ae5e:	88 e5       	ldi	r24, 0x58	; 88
    ae60:	90 e0       	ldi	r25, 0x00	; 0
    ae62:	b7 01       	movw	r22, r14
    ae64:	0c c0       	rjmp	.+24     	; 0xae7e <vfprintf+0x628>
    ae66:	80 2f       	mov	r24, r16
    ae68:	86 78       	andi	r24, 0x86	; 134
    ae6a:	51 f0       	breq	.+20     	; 0xae80 <vfprintf+0x62a>
    ae6c:	01 ff       	sbrs	r16, 1
    ae6e:	02 c0       	rjmp	.+4      	; 0xae74 <vfprintf+0x61e>
    ae70:	8b e2       	ldi	r24, 0x2B	; 43
    ae72:	01 c0       	rjmp	.+2      	; 0xae76 <vfprintf+0x620>
    ae74:	80 e2       	ldi	r24, 0x20	; 32
    ae76:	07 fd       	sbrc	r16, 7
    ae78:	8d e2       	ldi	r24, 0x2D	; 45
    ae7a:	b7 01       	movw	r22, r14
    ae7c:	90 e0       	ldi	r25, 0x00	; 0
    ae7e:	3d d4       	rcall	.+2170   	; 0xb6fa <fputc>
    ae80:	c1 16       	cp	r12, r17
    ae82:	30 f4       	brcc	.+12     	; 0xae90 <vfprintf+0x63a>
    ae84:	b7 01       	movw	r22, r14
    ae86:	80 e3       	ldi	r24, 0x30	; 48
    ae88:	90 e0       	ldi	r25, 0x00	; 0
    ae8a:	37 d4       	rcall	.+2158   	; 0xb6fa <fputc>
    ae8c:	11 50       	subi	r17, 0x01	; 1
    ae8e:	f8 cf       	rjmp	.-16     	; 0xae80 <vfprintf+0x62a>
    ae90:	ca 94       	dec	r12
    ae92:	f3 01       	movw	r30, r6
    ae94:	ec 0d       	add	r30, r12
    ae96:	f1 1d       	adc	r31, r1
    ae98:	80 81       	ld	r24, Z
    ae9a:	b7 01       	movw	r22, r14
    ae9c:	90 e0       	ldi	r25, 0x00	; 0
    ae9e:	2d d4       	rcall	.+2138   	; 0xb6fa <fputc>
    aea0:	c1 10       	cpse	r12, r1
    aea2:	f6 cf       	rjmp	.-20     	; 0xae90 <vfprintf+0x63a>
    aea4:	15 c0       	rjmp	.+42     	; 0xaed0 <vfprintf+0x67a>
    aea6:	f4 e0       	ldi	r31, 0x04	; 4
    aea8:	f5 15       	cp	r31, r5
    aeaa:	50 f5       	brcc	.+84     	; 0xaf00 <vfprintf+0x6aa>
    aeac:	84 e0       	ldi	r24, 0x04	; 4
    aeae:	58 1a       	sub	r5, r24
    aeb0:	93 fe       	sbrs	r9, 3
    aeb2:	1e c0       	rjmp	.+60     	; 0xaef0 <vfprintf+0x69a>
    aeb4:	01 11       	cpse	r16, r1
    aeb6:	25 c0       	rjmp	.+74     	; 0xaf02 <vfprintf+0x6ac>
    aeb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    aeba:	23 ff       	sbrs	r18, 3
    aebc:	27 c0       	rjmp	.+78     	; 0xaf0c <vfprintf+0x6b6>
    aebe:	06 e5       	ldi	r16, 0x56	; 86
    aec0:	12 e0       	ldi	r17, 0x02	; 2
    aec2:	39 2d       	mov	r19, r9
    aec4:	30 71       	andi	r19, 0x10	; 16
    aec6:	93 2e       	mov	r9, r19
    aec8:	f8 01       	movw	r30, r16
    aeca:	84 91       	lpm	r24, Z
    aecc:	81 11       	cpse	r24, r1
    aece:	21 c0       	rjmp	.+66     	; 0xaf12 <vfprintf+0x6bc>
    aed0:	55 20       	and	r5, r5
    aed2:	09 f4       	brne	.+2      	; 0xaed6 <vfprintf+0x680>
    aed4:	fc cc       	rjmp	.-1544   	; 0xa8ce <vfprintf+0x78>
    aed6:	b7 01       	movw	r22, r14
    aed8:	80 e2       	ldi	r24, 0x20	; 32
    aeda:	90 e0       	ldi	r25, 0x00	; 0
    aedc:	0e d4       	rcall	.+2076   	; 0xb6fa <fputc>
    aede:	5a 94       	dec	r5
    aee0:	f7 cf       	rjmp	.-18     	; 0xaed0 <vfprintf+0x67a>
    aee2:	f7 01       	movw	r30, r14
    aee4:	86 81       	ldd	r24, Z+6	; 0x06
    aee6:	97 81       	ldd	r25, Z+7	; 0x07
    aee8:	23 c0       	rjmp	.+70     	; 0xaf30 <vfprintf+0x6da>
    aeea:	8f ef       	ldi	r24, 0xFF	; 255
    aeec:	9f ef       	ldi	r25, 0xFF	; 255
    aeee:	20 c0       	rjmp	.+64     	; 0xaf30 <vfprintf+0x6da>
    aef0:	b7 01       	movw	r22, r14
    aef2:	80 e2       	ldi	r24, 0x20	; 32
    aef4:	90 e0       	ldi	r25, 0x00	; 0
    aef6:	01 d4       	rcall	.+2050   	; 0xb6fa <fputc>
    aef8:	5a 94       	dec	r5
    aefa:	51 10       	cpse	r5, r1
    aefc:	f9 cf       	rjmp	.-14     	; 0xaef0 <vfprintf+0x69a>
    aefe:	da cf       	rjmp	.-76     	; 0xaeb4 <vfprintf+0x65e>
    af00:	51 2c       	mov	r5, r1
    af02:	b7 01       	movw	r22, r14
    af04:	80 2f       	mov	r24, r16
    af06:	90 e0       	ldi	r25, 0x00	; 0
    af08:	f8 d3       	rcall	.+2032   	; 0xb6fa <fputc>
    af0a:	d6 cf       	rjmp	.-84     	; 0xaeb8 <vfprintf+0x662>
    af0c:	0a e5       	ldi	r16, 0x5A	; 90
    af0e:	12 e0       	ldi	r17, 0x02	; 2
    af10:	d8 cf       	rjmp	.-80     	; 0xaec2 <vfprintf+0x66c>
    af12:	91 10       	cpse	r9, r1
    af14:	80 52       	subi	r24, 0x20	; 32
    af16:	b7 01       	movw	r22, r14
    af18:	90 e0       	ldi	r25, 0x00	; 0
    af1a:	ef d3       	rcall	.+2014   	; 0xb6fa <fputc>
    af1c:	0f 5f       	subi	r16, 0xFF	; 255
    af1e:	1f 4f       	sbci	r17, 0xFF	; 255
    af20:	d3 cf       	rjmp	.-90     	; 0xaec8 <vfprintf+0x672>
    af22:	23 e0       	ldi	r18, 0x03	; 3
    af24:	25 15       	cp	r18, r5
    af26:	10 f4       	brcc	.+4      	; 0xaf2c <vfprintf+0x6d6>
    af28:	83 e0       	ldi	r24, 0x03	; 3
    af2a:	c1 cf       	rjmp	.-126    	; 0xaeae <vfprintf+0x658>
    af2c:	51 2c       	mov	r5, r1
    af2e:	c4 cf       	rjmp	.-120    	; 0xaeb8 <vfprintf+0x662>
    af30:	60 96       	adiw	r28, 0x10	; 16
    af32:	cd bf       	out	0x3d, r28	; 61
    af34:	de bf       	out	0x3e, r29	; 62
    af36:	df 91       	pop	r29
    af38:	cf 91       	pop	r28
    af3a:	1f 91       	pop	r17
    af3c:	0f 91       	pop	r16
    af3e:	ff 90       	pop	r15
    af40:	ef 90       	pop	r14
    af42:	df 90       	pop	r13
    af44:	cf 90       	pop	r12
    af46:	bf 90       	pop	r11
    af48:	af 90       	pop	r10
    af4a:	9f 90       	pop	r9
    af4c:	8f 90       	pop	r8
    af4e:	7f 90       	pop	r7
    af50:	6f 90       	pop	r6
    af52:	5f 90       	pop	r5
    af54:	4f 90       	pop	r4
    af56:	3f 90       	pop	r3
    af58:	2f 90       	pop	r2
    af5a:	08 95       	ret

0000af5c <__udivmodhi4>:
    af5c:	aa 1b       	sub	r26, r26
    af5e:	bb 1b       	sub	r27, r27
    af60:	51 e1       	ldi	r21, 0x11	; 17
    af62:	07 c0       	rjmp	.+14     	; 0xaf72 <__udivmodhi4_ep>

0000af64 <__udivmodhi4_loop>:
    af64:	aa 1f       	adc	r26, r26
    af66:	bb 1f       	adc	r27, r27
    af68:	a6 17       	cp	r26, r22
    af6a:	b7 07       	cpc	r27, r23
    af6c:	10 f0       	brcs	.+4      	; 0xaf72 <__udivmodhi4_ep>
    af6e:	a6 1b       	sub	r26, r22
    af70:	b7 0b       	sbc	r27, r23

0000af72 <__udivmodhi4_ep>:
    af72:	88 1f       	adc	r24, r24
    af74:	99 1f       	adc	r25, r25
    af76:	5a 95       	dec	r21
    af78:	a9 f7       	brne	.-22     	; 0xaf64 <__udivmodhi4_loop>
    af7a:	80 95       	com	r24
    af7c:	90 95       	com	r25
    af7e:	bc 01       	movw	r22, r24
    af80:	cd 01       	movw	r24, r26
    af82:	08 95       	ret

0000af84 <__udivmodsi4>:
    af84:	a1 e2       	ldi	r26, 0x21	; 33
    af86:	1a 2e       	mov	r1, r26
    af88:	aa 1b       	sub	r26, r26
    af8a:	bb 1b       	sub	r27, r27
    af8c:	fd 01       	movw	r30, r26
    af8e:	0d c0       	rjmp	.+26     	; 0xafaa <__udivmodsi4_ep>

0000af90 <__udivmodsi4_loop>:
    af90:	aa 1f       	adc	r26, r26
    af92:	bb 1f       	adc	r27, r27
    af94:	ee 1f       	adc	r30, r30
    af96:	ff 1f       	adc	r31, r31
    af98:	a2 17       	cp	r26, r18
    af9a:	b3 07       	cpc	r27, r19
    af9c:	e4 07       	cpc	r30, r20
    af9e:	f5 07       	cpc	r31, r21
    afa0:	20 f0       	brcs	.+8      	; 0xafaa <__udivmodsi4_ep>
    afa2:	a2 1b       	sub	r26, r18
    afa4:	b3 0b       	sbc	r27, r19
    afa6:	e4 0b       	sbc	r30, r20
    afa8:	f5 0b       	sbc	r31, r21

0000afaa <__udivmodsi4_ep>:
    afaa:	66 1f       	adc	r22, r22
    afac:	77 1f       	adc	r23, r23
    afae:	88 1f       	adc	r24, r24
    afb0:	99 1f       	adc	r25, r25
    afb2:	1a 94       	dec	r1
    afb4:	69 f7       	brne	.-38     	; 0xaf90 <__udivmodsi4_loop>
    afb6:	60 95       	com	r22
    afb8:	70 95       	com	r23
    afba:	80 95       	com	r24
    afbc:	90 95       	com	r25
    afbe:	9b 01       	movw	r18, r22
    afc0:	ac 01       	movw	r20, r24
    afc2:	bd 01       	movw	r22, r26
    afc4:	cf 01       	movw	r24, r30
    afc6:	08 95       	ret

0000afc8 <__muldi3>:
    afc8:	df 93       	push	r29
    afca:	cf 93       	push	r28
    afcc:	1f 93       	push	r17
    afce:	0f 93       	push	r16
    afd0:	9a 9d       	mul	r25, r10
    afd2:	f0 2d       	mov	r31, r0
    afd4:	21 9f       	mul	r18, r17
    afd6:	f0 0d       	add	r31, r0
    afd8:	8b 9d       	mul	r24, r11
    afda:	f0 0d       	add	r31, r0
    afdc:	8a 9d       	mul	r24, r10
    afde:	e0 2d       	mov	r30, r0
    afe0:	f1 0d       	add	r31, r1
    afe2:	03 9f       	mul	r16, r19
    afe4:	f0 0d       	add	r31, r0
    afe6:	02 9f       	mul	r16, r18
    afe8:	e0 0d       	add	r30, r0
    afea:	f1 1d       	adc	r31, r1
    afec:	4e 9d       	mul	r20, r14
    afee:	e0 0d       	add	r30, r0
    aff0:	f1 1d       	adc	r31, r1
    aff2:	5e 9d       	mul	r21, r14
    aff4:	f0 0d       	add	r31, r0
    aff6:	4f 9d       	mul	r20, r15
    aff8:	f0 0d       	add	r31, r0
    affa:	7f 93       	push	r23
    affc:	6f 93       	push	r22
    affe:	bf 92       	push	r11
    b000:	af 92       	push	r10
    b002:	5f 93       	push	r21
    b004:	4f 93       	push	r20
    b006:	d5 01       	movw	r26, r10
    b008:	ef d0       	rcall	.+478    	; 0xb1e8 <__umulhisi3>
    b00a:	8b 01       	movw	r16, r22
    b00c:	ac 01       	movw	r20, r24
    b00e:	d7 01       	movw	r26, r14
    b010:	eb d0       	rcall	.+470    	; 0xb1e8 <__umulhisi3>
    b012:	eb 01       	movw	r28, r22
    b014:	e8 0f       	add	r30, r24
    b016:	f9 1f       	adc	r31, r25
    b018:	d6 01       	movw	r26, r12
    b01a:	1f d0       	rcall	.+62     	; 0xb05a <__muldi3_6>
    b01c:	2f 91       	pop	r18
    b01e:	3f 91       	pop	r19
    b020:	d6 01       	movw	r26, r12
    b022:	e2 d0       	rcall	.+452    	; 0xb1e8 <__umulhisi3>
    b024:	c6 0f       	add	r28, r22
    b026:	d7 1f       	adc	r29, r23
    b028:	e8 1f       	adc	r30, r24
    b02a:	f9 1f       	adc	r31, r25
    b02c:	af 91       	pop	r26
    b02e:	bf 91       	pop	r27
    b030:	14 d0       	rcall	.+40     	; 0xb05a <__muldi3_6>
    b032:	2f 91       	pop	r18
    b034:	3f 91       	pop	r19
    b036:	d8 d0       	rcall	.+432    	; 0xb1e8 <__umulhisi3>
    b038:	c6 0f       	add	r28, r22
    b03a:	d7 1f       	adc	r29, r23
    b03c:	e8 1f       	adc	r30, r24
    b03e:	f9 1f       	adc	r31, r25
    b040:	d6 01       	movw	r26, r12
    b042:	d2 d0       	rcall	.+420    	; 0xb1e8 <__umulhisi3>
    b044:	e6 0f       	add	r30, r22
    b046:	f7 1f       	adc	r31, r23
    b048:	98 01       	movw	r18, r16
    b04a:	be 01       	movw	r22, r28
    b04c:	cf 01       	movw	r24, r30
    b04e:	11 24       	eor	r1, r1
    b050:	0f 91       	pop	r16
    b052:	1f 91       	pop	r17
    b054:	cf 91       	pop	r28
    b056:	df 91       	pop	r29
    b058:	08 95       	ret

0000b05a <__muldi3_6>:
    b05a:	c6 d0       	rcall	.+396    	; 0xb1e8 <__umulhisi3>
    b05c:	46 0f       	add	r20, r22
    b05e:	57 1f       	adc	r21, r23
    b060:	c8 1f       	adc	r28, r24
    b062:	d9 1f       	adc	r29, r25
    b064:	08 f4       	brcc	.+2      	; 0xb068 <__muldi3_6+0xe>
    b066:	31 96       	adiw	r30, 0x01	; 1
    b068:	08 95       	ret

0000b06a <__umoddi3>:
    b06a:	68 94       	set
    b06c:	01 c0       	rjmp	.+2      	; 0xb070 <__udivdi3_umoddi3>

0000b06e <__udivdi3>:
    b06e:	e8 94       	clt

0000b070 <__udivdi3_umoddi3>:
    b070:	8f 92       	push	r8
    b072:	9f 92       	push	r9
    b074:	cf 93       	push	r28
    b076:	df 93       	push	r29
    b078:	05 d0       	rcall	.+10     	; 0xb084 <__udivmod64>
    b07a:	df 91       	pop	r29
    b07c:	cf 91       	pop	r28
    b07e:	9f 90       	pop	r9
    b080:	8f 90       	pop	r8
    b082:	08 95       	ret

0000b084 <__udivmod64>:
    b084:	88 24       	eor	r8, r8
    b086:	99 24       	eor	r9, r9
    b088:	f4 01       	movw	r30, r8
    b08a:	e4 01       	movw	r28, r8
    b08c:	b0 e4       	ldi	r27, 0x40	; 64
    b08e:	9f 93       	push	r25
    b090:	aa 27       	eor	r26, r26
    b092:	9a 15       	cp	r25, r10
    b094:	8b 04       	cpc	r8, r11
    b096:	9c 04       	cpc	r9, r12
    b098:	ed 05       	cpc	r30, r13
    b09a:	fe 05       	cpc	r31, r14
    b09c:	cf 05       	cpc	r28, r15
    b09e:	d0 07       	cpc	r29, r16
    b0a0:	a1 07       	cpc	r26, r17
    b0a2:	98 f4       	brcc	.+38     	; 0xb0ca <__udivmod64+0x46>
    b0a4:	ad 2f       	mov	r26, r29
    b0a6:	dc 2f       	mov	r29, r28
    b0a8:	cf 2f       	mov	r28, r31
    b0aa:	fe 2f       	mov	r31, r30
    b0ac:	e9 2d       	mov	r30, r9
    b0ae:	98 2c       	mov	r9, r8
    b0b0:	89 2e       	mov	r8, r25
    b0b2:	98 2f       	mov	r25, r24
    b0b4:	87 2f       	mov	r24, r23
    b0b6:	76 2f       	mov	r23, r22
    b0b8:	65 2f       	mov	r22, r21
    b0ba:	54 2f       	mov	r21, r20
    b0bc:	43 2f       	mov	r20, r19
    b0be:	32 2f       	mov	r19, r18
    b0c0:	22 27       	eor	r18, r18
    b0c2:	b8 50       	subi	r27, 0x08	; 8
    b0c4:	31 f7       	brne	.-52     	; 0xb092 <__udivmod64+0xe>
    b0c6:	bf 91       	pop	r27
    b0c8:	27 c0       	rjmp	.+78     	; 0xb118 <__udivmod64+0x94>
    b0ca:	1b 2e       	mov	r1, r27
    b0cc:	bf 91       	pop	r27
    b0ce:	bb 27       	eor	r27, r27
    b0d0:	22 0f       	add	r18, r18
    b0d2:	33 1f       	adc	r19, r19
    b0d4:	44 1f       	adc	r20, r20
    b0d6:	55 1f       	adc	r21, r21
    b0d8:	66 1f       	adc	r22, r22
    b0da:	77 1f       	adc	r23, r23
    b0dc:	88 1f       	adc	r24, r24
    b0de:	99 1f       	adc	r25, r25
    b0e0:	88 1c       	adc	r8, r8
    b0e2:	99 1c       	adc	r9, r9
    b0e4:	ee 1f       	adc	r30, r30
    b0e6:	ff 1f       	adc	r31, r31
    b0e8:	cc 1f       	adc	r28, r28
    b0ea:	dd 1f       	adc	r29, r29
    b0ec:	aa 1f       	adc	r26, r26
    b0ee:	bb 1f       	adc	r27, r27
    b0f0:	8a 14       	cp	r8, r10
    b0f2:	9b 04       	cpc	r9, r11
    b0f4:	ec 05       	cpc	r30, r12
    b0f6:	fd 05       	cpc	r31, r13
    b0f8:	ce 05       	cpc	r28, r14
    b0fa:	df 05       	cpc	r29, r15
    b0fc:	a0 07       	cpc	r26, r16
    b0fe:	b1 07       	cpc	r27, r17
    b100:	48 f0       	brcs	.+18     	; 0xb114 <__udivmod64+0x90>
    b102:	8a 18       	sub	r8, r10
    b104:	9b 08       	sbc	r9, r11
    b106:	ec 09       	sbc	r30, r12
    b108:	fd 09       	sbc	r31, r13
    b10a:	ce 09       	sbc	r28, r14
    b10c:	df 09       	sbc	r29, r15
    b10e:	a0 0b       	sbc	r26, r16
    b110:	b1 0b       	sbc	r27, r17
    b112:	21 60       	ori	r18, 0x01	; 1
    b114:	1a 94       	dec	r1
    b116:	e1 f6       	brne	.-72     	; 0xb0d0 <__udivmod64+0x4c>
    b118:	2e f4       	brtc	.+10     	; 0xb124 <__udivmod64+0xa0>
    b11a:	94 01       	movw	r18, r8
    b11c:	af 01       	movw	r20, r30
    b11e:	be 01       	movw	r22, r28
    b120:	cd 01       	movw	r24, r26
    b122:	00 0c       	add	r0, r0
    b124:	08 95       	ret

0000b126 <__ashldi3>:
    b126:	0f 93       	push	r16
    b128:	08 30       	cpi	r16, 0x08	; 8
    b12a:	90 f0       	brcs	.+36     	; 0xb150 <__ashldi3+0x2a>
    b12c:	98 2f       	mov	r25, r24
    b12e:	87 2f       	mov	r24, r23
    b130:	76 2f       	mov	r23, r22
    b132:	65 2f       	mov	r22, r21
    b134:	54 2f       	mov	r21, r20
    b136:	43 2f       	mov	r20, r19
    b138:	32 2f       	mov	r19, r18
    b13a:	22 27       	eor	r18, r18
    b13c:	08 50       	subi	r16, 0x08	; 8
    b13e:	f4 cf       	rjmp	.-24     	; 0xb128 <__ashldi3+0x2>
    b140:	22 0f       	add	r18, r18
    b142:	33 1f       	adc	r19, r19
    b144:	44 1f       	adc	r20, r20
    b146:	55 1f       	adc	r21, r21
    b148:	66 1f       	adc	r22, r22
    b14a:	77 1f       	adc	r23, r23
    b14c:	88 1f       	adc	r24, r24
    b14e:	99 1f       	adc	r25, r25
    b150:	0a 95       	dec	r16
    b152:	b2 f7       	brpl	.-20     	; 0xb140 <__ashldi3+0x1a>
    b154:	0f 91       	pop	r16
    b156:	08 95       	ret

0000b158 <__ashrdi3>:
    b158:	97 fb       	bst	r25, 7
    b15a:	10 f8       	bld	r1, 0

0000b15c <__lshrdi3>:
    b15c:	16 94       	lsr	r1
    b15e:	00 08       	sbc	r0, r0
    b160:	0f 93       	push	r16
    b162:	08 30       	cpi	r16, 0x08	; 8
    b164:	98 f0       	brcs	.+38     	; 0xb18c <__lshrdi3+0x30>
    b166:	08 50       	subi	r16, 0x08	; 8
    b168:	23 2f       	mov	r18, r19
    b16a:	34 2f       	mov	r19, r20
    b16c:	45 2f       	mov	r20, r21
    b16e:	56 2f       	mov	r21, r22
    b170:	67 2f       	mov	r22, r23
    b172:	78 2f       	mov	r23, r24
    b174:	89 2f       	mov	r24, r25
    b176:	90 2d       	mov	r25, r0
    b178:	f4 cf       	rjmp	.-24     	; 0xb162 <__lshrdi3+0x6>
    b17a:	05 94       	asr	r0
    b17c:	97 95       	ror	r25
    b17e:	87 95       	ror	r24
    b180:	77 95       	ror	r23
    b182:	67 95       	ror	r22
    b184:	57 95       	ror	r21
    b186:	47 95       	ror	r20
    b188:	37 95       	ror	r19
    b18a:	27 95       	ror	r18
    b18c:	0a 95       	dec	r16
    b18e:	aa f7       	brpl	.-22     	; 0xb17a <__lshrdi3+0x1e>
    b190:	0f 91       	pop	r16
    b192:	08 95       	ret

0000b194 <__adddi3>:
    b194:	2a 0d       	add	r18, r10
    b196:	3b 1d       	adc	r19, r11
    b198:	4c 1d       	adc	r20, r12
    b19a:	5d 1d       	adc	r21, r13
    b19c:	6e 1d       	adc	r22, r14
    b19e:	7f 1d       	adc	r23, r15
    b1a0:	80 1f       	adc	r24, r16
    b1a2:	91 1f       	adc	r25, r17
    b1a4:	08 95       	ret

0000b1a6 <__adddi3_s8>:
    b1a6:	00 24       	eor	r0, r0
    b1a8:	a7 fd       	sbrc	r26, 7
    b1aa:	00 94       	com	r0
    b1ac:	2a 0f       	add	r18, r26
    b1ae:	30 1d       	adc	r19, r0
    b1b0:	40 1d       	adc	r20, r0
    b1b2:	50 1d       	adc	r21, r0
    b1b4:	60 1d       	adc	r22, r0
    b1b6:	70 1d       	adc	r23, r0
    b1b8:	80 1d       	adc	r24, r0
    b1ba:	90 1d       	adc	r25, r0
    b1bc:	08 95       	ret

0000b1be <__subdi3>:
    b1be:	2a 19       	sub	r18, r10
    b1c0:	3b 09       	sbc	r19, r11
    b1c2:	4c 09       	sbc	r20, r12
    b1c4:	5d 09       	sbc	r21, r13
    b1c6:	6e 09       	sbc	r22, r14
    b1c8:	7f 09       	sbc	r23, r15
    b1ca:	80 0b       	sbc	r24, r16
    b1cc:	91 0b       	sbc	r25, r17
    b1ce:	08 95       	ret

0000b1d0 <__cmpdi2_s8>:
    b1d0:	00 24       	eor	r0, r0
    b1d2:	a7 fd       	sbrc	r26, 7
    b1d4:	00 94       	com	r0
    b1d6:	2a 17       	cp	r18, r26
    b1d8:	30 05       	cpc	r19, r0
    b1da:	40 05       	cpc	r20, r0
    b1dc:	50 05       	cpc	r21, r0
    b1de:	60 05       	cpc	r22, r0
    b1e0:	70 05       	cpc	r23, r0
    b1e2:	80 05       	cpc	r24, r0
    b1e4:	90 05       	cpc	r25, r0
    b1e6:	08 95       	ret

0000b1e8 <__umulhisi3>:
    b1e8:	a2 9f       	mul	r26, r18
    b1ea:	b0 01       	movw	r22, r0
    b1ec:	b3 9f       	mul	r27, r19
    b1ee:	c0 01       	movw	r24, r0
    b1f0:	a3 9f       	mul	r26, r19
    b1f2:	70 0d       	add	r23, r0
    b1f4:	81 1d       	adc	r24, r1
    b1f6:	11 24       	eor	r1, r1
    b1f8:	91 1d       	adc	r25, r1
    b1fa:	b2 9f       	mul	r27, r18
    b1fc:	70 0d       	add	r23, r0
    b1fe:	81 1d       	adc	r24, r1
    b200:	11 24       	eor	r1, r1
    b202:	91 1d       	adc	r25, r1
    b204:	08 95       	ret

0000b206 <malloc>:
    b206:	0f 93       	push	r16
    b208:	1f 93       	push	r17
    b20a:	cf 93       	push	r28
    b20c:	df 93       	push	r29
    b20e:	82 30       	cpi	r24, 0x02	; 2
    b210:	91 05       	cpc	r25, r1
    b212:	10 f4       	brcc	.+4      	; 0xb218 <malloc+0x12>
    b214:	82 e0       	ldi	r24, 0x02	; 2
    b216:	90 e0       	ldi	r25, 0x00	; 0
    b218:	e0 91 19 28 	lds	r30, 0x2819	; 0x802819 <__flp>
    b21c:	f0 91 1a 28 	lds	r31, 0x281A	; 0x80281a <__flp+0x1>
    b220:	20 e0       	ldi	r18, 0x00	; 0
    b222:	30 e0       	ldi	r19, 0x00	; 0
    b224:	a0 e0       	ldi	r26, 0x00	; 0
    b226:	b0 e0       	ldi	r27, 0x00	; 0
    b228:	30 97       	sbiw	r30, 0x00	; 0
    b22a:	19 f1       	breq	.+70     	; 0xb272 <malloc+0x6c>
    b22c:	40 81       	ld	r20, Z
    b22e:	51 81       	ldd	r21, Z+1	; 0x01
    b230:	02 81       	ldd	r16, Z+2	; 0x02
    b232:	13 81       	ldd	r17, Z+3	; 0x03
    b234:	48 17       	cp	r20, r24
    b236:	59 07       	cpc	r21, r25
    b238:	c8 f0       	brcs	.+50     	; 0xb26c <malloc+0x66>
    b23a:	84 17       	cp	r24, r20
    b23c:	95 07       	cpc	r25, r21
    b23e:	69 f4       	brne	.+26     	; 0xb25a <malloc+0x54>
    b240:	10 97       	sbiw	r26, 0x00	; 0
    b242:	31 f0       	breq	.+12     	; 0xb250 <malloc+0x4a>
    b244:	12 96       	adiw	r26, 0x02	; 2
    b246:	0c 93       	st	X, r16
    b248:	12 97       	sbiw	r26, 0x02	; 2
    b24a:	13 96       	adiw	r26, 0x03	; 3
    b24c:	1c 93       	st	X, r17
    b24e:	27 c0       	rjmp	.+78     	; 0xb29e <malloc+0x98>
    b250:	00 93 19 28 	sts	0x2819, r16	; 0x802819 <__flp>
    b254:	10 93 1a 28 	sts	0x281A, r17	; 0x80281a <__flp+0x1>
    b258:	22 c0       	rjmp	.+68     	; 0xb29e <malloc+0x98>
    b25a:	21 15       	cp	r18, r1
    b25c:	31 05       	cpc	r19, r1
    b25e:	19 f0       	breq	.+6      	; 0xb266 <malloc+0x60>
    b260:	42 17       	cp	r20, r18
    b262:	53 07       	cpc	r21, r19
    b264:	18 f4       	brcc	.+6      	; 0xb26c <malloc+0x66>
    b266:	9a 01       	movw	r18, r20
    b268:	bd 01       	movw	r22, r26
    b26a:	ef 01       	movw	r28, r30
    b26c:	df 01       	movw	r26, r30
    b26e:	f8 01       	movw	r30, r16
    b270:	db cf       	rjmp	.-74     	; 0xb228 <malloc+0x22>
    b272:	21 15       	cp	r18, r1
    b274:	31 05       	cpc	r19, r1
    b276:	f9 f0       	breq	.+62     	; 0xb2b6 <malloc+0xb0>
    b278:	28 1b       	sub	r18, r24
    b27a:	39 0b       	sbc	r19, r25
    b27c:	24 30       	cpi	r18, 0x04	; 4
    b27e:	31 05       	cpc	r19, r1
    b280:	80 f4       	brcc	.+32     	; 0xb2a2 <malloc+0x9c>
    b282:	8a 81       	ldd	r24, Y+2	; 0x02
    b284:	9b 81       	ldd	r25, Y+3	; 0x03
    b286:	61 15       	cp	r22, r1
    b288:	71 05       	cpc	r23, r1
    b28a:	21 f0       	breq	.+8      	; 0xb294 <malloc+0x8e>
    b28c:	fb 01       	movw	r30, r22
    b28e:	82 83       	std	Z+2, r24	; 0x02
    b290:	93 83       	std	Z+3, r25	; 0x03
    b292:	04 c0       	rjmp	.+8      	; 0xb29c <malloc+0x96>
    b294:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <__flp>
    b298:	90 93 1a 28 	sts	0x281A, r25	; 0x80281a <__flp+0x1>
    b29c:	fe 01       	movw	r30, r28
    b29e:	32 96       	adiw	r30, 0x02	; 2
    b2a0:	44 c0       	rjmp	.+136    	; 0xb32a <malloc+0x124>
    b2a2:	fe 01       	movw	r30, r28
    b2a4:	e2 0f       	add	r30, r18
    b2a6:	f3 1f       	adc	r31, r19
    b2a8:	81 93       	st	Z+, r24
    b2aa:	91 93       	st	Z+, r25
    b2ac:	22 50       	subi	r18, 0x02	; 2
    b2ae:	31 09       	sbc	r19, r1
    b2b0:	28 83       	st	Y, r18
    b2b2:	39 83       	std	Y+1, r19	; 0x01
    b2b4:	3a c0       	rjmp	.+116    	; 0xb32a <malloc+0x124>
    b2b6:	20 91 17 28 	lds	r18, 0x2817	; 0x802817 <__brkval>
    b2ba:	30 91 18 28 	lds	r19, 0x2818	; 0x802818 <__brkval+0x1>
    b2be:	23 2b       	or	r18, r19
    b2c0:	41 f4       	brne	.+16     	; 0xb2d2 <malloc+0xcc>
    b2c2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    b2c6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    b2ca:	20 93 17 28 	sts	0x2817, r18	; 0x802817 <__brkval>
    b2ce:	30 93 18 28 	sts	0x2818, r19	; 0x802818 <__brkval+0x1>
    b2d2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    b2d6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    b2da:	21 15       	cp	r18, r1
    b2dc:	31 05       	cpc	r19, r1
    b2de:	41 f4       	brne	.+16     	; 0xb2f0 <malloc+0xea>
    b2e0:	2d b7       	in	r18, 0x3d	; 61
    b2e2:	3e b7       	in	r19, 0x3e	; 62
    b2e4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    b2e8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    b2ec:	24 1b       	sub	r18, r20
    b2ee:	35 0b       	sbc	r19, r21
    b2f0:	e0 91 17 28 	lds	r30, 0x2817	; 0x802817 <__brkval>
    b2f4:	f0 91 18 28 	lds	r31, 0x2818	; 0x802818 <__brkval+0x1>
    b2f8:	e2 17       	cp	r30, r18
    b2fa:	f3 07       	cpc	r31, r19
    b2fc:	a0 f4       	brcc	.+40     	; 0xb326 <malloc+0x120>
    b2fe:	2e 1b       	sub	r18, r30
    b300:	3f 0b       	sbc	r19, r31
    b302:	28 17       	cp	r18, r24
    b304:	39 07       	cpc	r19, r25
    b306:	78 f0       	brcs	.+30     	; 0xb326 <malloc+0x120>
    b308:	ac 01       	movw	r20, r24
    b30a:	4e 5f       	subi	r20, 0xFE	; 254
    b30c:	5f 4f       	sbci	r21, 0xFF	; 255
    b30e:	24 17       	cp	r18, r20
    b310:	35 07       	cpc	r19, r21
    b312:	48 f0       	brcs	.+18     	; 0xb326 <malloc+0x120>
    b314:	4e 0f       	add	r20, r30
    b316:	5f 1f       	adc	r21, r31
    b318:	40 93 17 28 	sts	0x2817, r20	; 0x802817 <__brkval>
    b31c:	50 93 18 28 	sts	0x2818, r21	; 0x802818 <__brkval+0x1>
    b320:	81 93       	st	Z+, r24
    b322:	91 93       	st	Z+, r25
    b324:	02 c0       	rjmp	.+4      	; 0xb32a <malloc+0x124>
    b326:	e0 e0       	ldi	r30, 0x00	; 0
    b328:	f0 e0       	ldi	r31, 0x00	; 0
    b32a:	cf 01       	movw	r24, r30
    b32c:	df 91       	pop	r29
    b32e:	cf 91       	pop	r28
    b330:	1f 91       	pop	r17
    b332:	0f 91       	pop	r16
    b334:	08 95       	ret

0000b336 <free>:
    b336:	cf 93       	push	r28
    b338:	df 93       	push	r29
    b33a:	00 97       	sbiw	r24, 0x00	; 0
    b33c:	09 f4       	brne	.+2      	; 0xb340 <free+0xa>
    b33e:	81 c0       	rjmp	.+258    	; 0xb442 <free+0x10c>
    b340:	fc 01       	movw	r30, r24
    b342:	32 97       	sbiw	r30, 0x02	; 2
    b344:	12 82       	std	Z+2, r1	; 0x02
    b346:	13 82       	std	Z+3, r1	; 0x03
    b348:	a0 91 19 28 	lds	r26, 0x2819	; 0x802819 <__flp>
    b34c:	b0 91 1a 28 	lds	r27, 0x281A	; 0x80281a <__flp+0x1>
    b350:	10 97       	sbiw	r26, 0x00	; 0
    b352:	81 f4       	brne	.+32     	; 0xb374 <free+0x3e>
    b354:	20 81       	ld	r18, Z
    b356:	31 81       	ldd	r19, Z+1	; 0x01
    b358:	82 0f       	add	r24, r18
    b35a:	93 1f       	adc	r25, r19
    b35c:	20 91 17 28 	lds	r18, 0x2817	; 0x802817 <__brkval>
    b360:	30 91 18 28 	lds	r19, 0x2818	; 0x802818 <__brkval+0x1>
    b364:	28 17       	cp	r18, r24
    b366:	39 07       	cpc	r19, r25
    b368:	51 f5       	brne	.+84     	; 0xb3be <free+0x88>
    b36a:	e0 93 17 28 	sts	0x2817, r30	; 0x802817 <__brkval>
    b36e:	f0 93 18 28 	sts	0x2818, r31	; 0x802818 <__brkval+0x1>
    b372:	67 c0       	rjmp	.+206    	; 0xb442 <free+0x10c>
    b374:	ed 01       	movw	r28, r26
    b376:	20 e0       	ldi	r18, 0x00	; 0
    b378:	30 e0       	ldi	r19, 0x00	; 0
    b37a:	ce 17       	cp	r28, r30
    b37c:	df 07       	cpc	r29, r31
    b37e:	40 f4       	brcc	.+16     	; 0xb390 <free+0x5a>
    b380:	4a 81       	ldd	r20, Y+2	; 0x02
    b382:	5b 81       	ldd	r21, Y+3	; 0x03
    b384:	9e 01       	movw	r18, r28
    b386:	41 15       	cp	r20, r1
    b388:	51 05       	cpc	r21, r1
    b38a:	f1 f0       	breq	.+60     	; 0xb3c8 <free+0x92>
    b38c:	ea 01       	movw	r28, r20
    b38e:	f5 cf       	rjmp	.-22     	; 0xb37a <free+0x44>
    b390:	c2 83       	std	Z+2, r28	; 0x02
    b392:	d3 83       	std	Z+3, r29	; 0x03
    b394:	40 81       	ld	r20, Z
    b396:	51 81       	ldd	r21, Z+1	; 0x01
    b398:	84 0f       	add	r24, r20
    b39a:	95 1f       	adc	r25, r21
    b39c:	c8 17       	cp	r28, r24
    b39e:	d9 07       	cpc	r29, r25
    b3a0:	59 f4       	brne	.+22     	; 0xb3b8 <free+0x82>
    b3a2:	88 81       	ld	r24, Y
    b3a4:	99 81       	ldd	r25, Y+1	; 0x01
    b3a6:	84 0f       	add	r24, r20
    b3a8:	95 1f       	adc	r25, r21
    b3aa:	02 96       	adiw	r24, 0x02	; 2
    b3ac:	80 83       	st	Z, r24
    b3ae:	91 83       	std	Z+1, r25	; 0x01
    b3b0:	8a 81       	ldd	r24, Y+2	; 0x02
    b3b2:	9b 81       	ldd	r25, Y+3	; 0x03
    b3b4:	82 83       	std	Z+2, r24	; 0x02
    b3b6:	93 83       	std	Z+3, r25	; 0x03
    b3b8:	21 15       	cp	r18, r1
    b3ba:	31 05       	cpc	r19, r1
    b3bc:	29 f4       	brne	.+10     	; 0xb3c8 <free+0x92>
    b3be:	e0 93 19 28 	sts	0x2819, r30	; 0x802819 <__flp>
    b3c2:	f0 93 1a 28 	sts	0x281A, r31	; 0x80281a <__flp+0x1>
    b3c6:	3d c0       	rjmp	.+122    	; 0xb442 <free+0x10c>
    b3c8:	e9 01       	movw	r28, r18
    b3ca:	ea 83       	std	Y+2, r30	; 0x02
    b3cc:	fb 83       	std	Y+3, r31	; 0x03
    b3ce:	49 91       	ld	r20, Y+
    b3d0:	59 91       	ld	r21, Y+
    b3d2:	c4 0f       	add	r28, r20
    b3d4:	d5 1f       	adc	r29, r21
    b3d6:	ec 17       	cp	r30, r28
    b3d8:	fd 07       	cpc	r31, r29
    b3da:	61 f4       	brne	.+24     	; 0xb3f4 <free+0xbe>
    b3dc:	80 81       	ld	r24, Z
    b3de:	91 81       	ldd	r25, Z+1	; 0x01
    b3e0:	84 0f       	add	r24, r20
    b3e2:	95 1f       	adc	r25, r21
    b3e4:	02 96       	adiw	r24, 0x02	; 2
    b3e6:	e9 01       	movw	r28, r18
    b3e8:	88 83       	st	Y, r24
    b3ea:	99 83       	std	Y+1, r25	; 0x01
    b3ec:	82 81       	ldd	r24, Z+2	; 0x02
    b3ee:	93 81       	ldd	r25, Z+3	; 0x03
    b3f0:	8a 83       	std	Y+2, r24	; 0x02
    b3f2:	9b 83       	std	Y+3, r25	; 0x03
    b3f4:	e0 e0       	ldi	r30, 0x00	; 0
    b3f6:	f0 e0       	ldi	r31, 0x00	; 0
    b3f8:	12 96       	adiw	r26, 0x02	; 2
    b3fa:	8d 91       	ld	r24, X+
    b3fc:	9c 91       	ld	r25, X
    b3fe:	13 97       	sbiw	r26, 0x03	; 3
    b400:	00 97       	sbiw	r24, 0x00	; 0
    b402:	19 f0       	breq	.+6      	; 0xb40a <free+0xd4>
    b404:	fd 01       	movw	r30, r26
    b406:	dc 01       	movw	r26, r24
    b408:	f7 cf       	rjmp	.-18     	; 0xb3f8 <free+0xc2>
    b40a:	8d 91       	ld	r24, X+
    b40c:	9c 91       	ld	r25, X
    b40e:	11 97       	sbiw	r26, 0x01	; 1
    b410:	9d 01       	movw	r18, r26
    b412:	2e 5f       	subi	r18, 0xFE	; 254
    b414:	3f 4f       	sbci	r19, 0xFF	; 255
    b416:	82 0f       	add	r24, r18
    b418:	93 1f       	adc	r25, r19
    b41a:	20 91 17 28 	lds	r18, 0x2817	; 0x802817 <__brkval>
    b41e:	30 91 18 28 	lds	r19, 0x2818	; 0x802818 <__brkval+0x1>
    b422:	28 17       	cp	r18, r24
    b424:	39 07       	cpc	r19, r25
    b426:	69 f4       	brne	.+26     	; 0xb442 <free+0x10c>
    b428:	30 97       	sbiw	r30, 0x00	; 0
    b42a:	29 f4       	brne	.+10     	; 0xb436 <free+0x100>
    b42c:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <__flp>
    b430:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <__flp+0x1>
    b434:	02 c0       	rjmp	.+4      	; 0xb43a <free+0x104>
    b436:	12 82       	std	Z+2, r1	; 0x02
    b438:	13 82       	std	Z+3, r1	; 0x03
    b43a:	a0 93 17 28 	sts	0x2817, r26	; 0x802817 <__brkval>
    b43e:	b0 93 18 28 	sts	0x2818, r27	; 0x802818 <__brkval+0x1>
    b442:	df 91       	pop	r29
    b444:	cf 91       	pop	r28
    b446:	08 95       	ret

0000b448 <__ftoa_engine>:
    b448:	28 30       	cpi	r18, 0x08	; 8
    b44a:	08 f0       	brcs	.+2      	; 0xb44e <__ftoa_engine+0x6>
    b44c:	27 e0       	ldi	r18, 0x07	; 7
    b44e:	33 27       	eor	r19, r19
    b450:	da 01       	movw	r26, r20
    b452:	99 0f       	add	r25, r25
    b454:	31 1d       	adc	r19, r1
    b456:	87 fd       	sbrc	r24, 7
    b458:	91 60       	ori	r25, 0x01	; 1
    b45a:	00 96       	adiw	r24, 0x00	; 0
    b45c:	61 05       	cpc	r22, r1
    b45e:	71 05       	cpc	r23, r1
    b460:	39 f4       	brne	.+14     	; 0xb470 <__ftoa_engine+0x28>
    b462:	32 60       	ori	r19, 0x02	; 2
    b464:	2e 5f       	subi	r18, 0xFE	; 254
    b466:	3d 93       	st	X+, r19
    b468:	30 e3       	ldi	r19, 0x30	; 48
    b46a:	2a 95       	dec	r18
    b46c:	e1 f7       	brne	.-8      	; 0xb466 <__ftoa_engine+0x1e>
    b46e:	08 95       	ret
    b470:	9f 3f       	cpi	r25, 0xFF	; 255
    b472:	30 f0       	brcs	.+12     	; 0xb480 <__ftoa_engine+0x38>
    b474:	80 38       	cpi	r24, 0x80	; 128
    b476:	71 05       	cpc	r23, r1
    b478:	61 05       	cpc	r22, r1
    b47a:	09 f0       	breq	.+2      	; 0xb47e <__ftoa_engine+0x36>
    b47c:	3c 5f       	subi	r19, 0xFC	; 252
    b47e:	3c 5f       	subi	r19, 0xFC	; 252
    b480:	3d 93       	st	X+, r19
    b482:	91 30       	cpi	r25, 0x01	; 1
    b484:	08 f0       	brcs	.+2      	; 0xb488 <__ftoa_engine+0x40>
    b486:	80 68       	ori	r24, 0x80	; 128
    b488:	91 1d       	adc	r25, r1
    b48a:	df 93       	push	r29
    b48c:	cf 93       	push	r28
    b48e:	1f 93       	push	r17
    b490:	0f 93       	push	r16
    b492:	ff 92       	push	r15
    b494:	ef 92       	push	r14
    b496:	19 2f       	mov	r17, r25
    b498:	98 7f       	andi	r25, 0xF8	; 248
    b49a:	96 95       	lsr	r25
    b49c:	e9 2f       	mov	r30, r25
    b49e:	96 95       	lsr	r25
    b4a0:	96 95       	lsr	r25
    b4a2:	e9 0f       	add	r30, r25
    b4a4:	ff 27       	eor	r31, r31
    b4a6:	e8 54       	subi	r30, 0x48	; 72
    b4a8:	fd 4f       	sbci	r31, 0xFD	; 253
    b4aa:	99 27       	eor	r25, r25
    b4ac:	33 27       	eor	r19, r19
    b4ae:	ee 24       	eor	r14, r14
    b4b0:	ff 24       	eor	r15, r15
    b4b2:	a7 01       	movw	r20, r14
    b4b4:	e7 01       	movw	r28, r14
    b4b6:	05 90       	lpm	r0, Z+
    b4b8:	08 94       	sec
    b4ba:	07 94       	ror	r0
    b4bc:	28 f4       	brcc	.+10     	; 0xb4c8 <__ftoa_engine+0x80>
    b4be:	36 0f       	add	r19, r22
    b4c0:	e7 1e       	adc	r14, r23
    b4c2:	f8 1e       	adc	r15, r24
    b4c4:	49 1f       	adc	r20, r25
    b4c6:	51 1d       	adc	r21, r1
    b4c8:	66 0f       	add	r22, r22
    b4ca:	77 1f       	adc	r23, r23
    b4cc:	88 1f       	adc	r24, r24
    b4ce:	99 1f       	adc	r25, r25
    b4d0:	06 94       	lsr	r0
    b4d2:	a1 f7       	brne	.-24     	; 0xb4bc <__ftoa_engine+0x74>
    b4d4:	05 90       	lpm	r0, Z+
    b4d6:	07 94       	ror	r0
    b4d8:	28 f4       	brcc	.+10     	; 0xb4e4 <__ftoa_engine+0x9c>
    b4da:	e7 0e       	add	r14, r23
    b4dc:	f8 1e       	adc	r15, r24
    b4de:	49 1f       	adc	r20, r25
    b4e0:	56 1f       	adc	r21, r22
    b4e2:	c1 1d       	adc	r28, r1
    b4e4:	77 0f       	add	r23, r23
    b4e6:	88 1f       	adc	r24, r24
    b4e8:	99 1f       	adc	r25, r25
    b4ea:	66 1f       	adc	r22, r22
    b4ec:	06 94       	lsr	r0
    b4ee:	a1 f7       	brne	.-24     	; 0xb4d8 <__ftoa_engine+0x90>
    b4f0:	05 90       	lpm	r0, Z+
    b4f2:	07 94       	ror	r0
    b4f4:	28 f4       	brcc	.+10     	; 0xb500 <__ftoa_engine+0xb8>
    b4f6:	f8 0e       	add	r15, r24
    b4f8:	49 1f       	adc	r20, r25
    b4fa:	56 1f       	adc	r21, r22
    b4fc:	c7 1f       	adc	r28, r23
    b4fe:	d1 1d       	adc	r29, r1
    b500:	88 0f       	add	r24, r24
    b502:	99 1f       	adc	r25, r25
    b504:	66 1f       	adc	r22, r22
    b506:	77 1f       	adc	r23, r23
    b508:	06 94       	lsr	r0
    b50a:	a1 f7       	brne	.-24     	; 0xb4f4 <__ftoa_engine+0xac>
    b50c:	05 90       	lpm	r0, Z+
    b50e:	07 94       	ror	r0
    b510:	20 f4       	brcc	.+8      	; 0xb51a <__ftoa_engine+0xd2>
    b512:	49 0f       	add	r20, r25
    b514:	56 1f       	adc	r21, r22
    b516:	c7 1f       	adc	r28, r23
    b518:	d8 1f       	adc	r29, r24
    b51a:	99 0f       	add	r25, r25
    b51c:	66 1f       	adc	r22, r22
    b51e:	77 1f       	adc	r23, r23
    b520:	88 1f       	adc	r24, r24
    b522:	06 94       	lsr	r0
    b524:	a9 f7       	brne	.-22     	; 0xb510 <__ftoa_engine+0xc8>
    b526:	84 91       	lpm	r24, Z
    b528:	10 95       	com	r17
    b52a:	17 70       	andi	r17, 0x07	; 7
    b52c:	41 f0       	breq	.+16     	; 0xb53e <__ftoa_engine+0xf6>
    b52e:	d6 95       	lsr	r29
    b530:	c7 95       	ror	r28
    b532:	57 95       	ror	r21
    b534:	47 95       	ror	r20
    b536:	f7 94       	ror	r15
    b538:	e7 94       	ror	r14
    b53a:	1a 95       	dec	r17
    b53c:	c1 f7       	brne	.-16     	; 0xb52e <__ftoa_engine+0xe6>
    b53e:	ee e5       	ldi	r30, 0x5E	; 94
    b540:	f2 e0       	ldi	r31, 0x02	; 2
    b542:	68 94       	set
    b544:	15 90       	lpm	r1, Z+
    b546:	15 91       	lpm	r17, Z+
    b548:	35 91       	lpm	r19, Z+
    b54a:	65 91       	lpm	r22, Z+
    b54c:	95 91       	lpm	r25, Z+
    b54e:	05 90       	lpm	r0, Z+
    b550:	7f e2       	ldi	r23, 0x2F	; 47
    b552:	73 95       	inc	r23
    b554:	e1 18       	sub	r14, r1
    b556:	f1 0a       	sbc	r15, r17
    b558:	43 0b       	sbc	r20, r19
    b55a:	56 0b       	sbc	r21, r22
    b55c:	c9 0b       	sbc	r28, r25
    b55e:	d0 09       	sbc	r29, r0
    b560:	c0 f7       	brcc	.-16     	; 0xb552 <__ftoa_engine+0x10a>
    b562:	e1 0c       	add	r14, r1
    b564:	f1 1e       	adc	r15, r17
    b566:	43 1f       	adc	r20, r19
    b568:	56 1f       	adc	r21, r22
    b56a:	c9 1f       	adc	r28, r25
    b56c:	d0 1d       	adc	r29, r0
    b56e:	7e f4       	brtc	.+30     	; 0xb58e <__ftoa_engine+0x146>
    b570:	70 33       	cpi	r23, 0x30	; 48
    b572:	11 f4       	brne	.+4      	; 0xb578 <__ftoa_engine+0x130>
    b574:	8a 95       	dec	r24
    b576:	e6 cf       	rjmp	.-52     	; 0xb544 <__ftoa_engine+0xfc>
    b578:	e8 94       	clt
    b57a:	01 50       	subi	r16, 0x01	; 1
    b57c:	30 f0       	brcs	.+12     	; 0xb58a <__ftoa_engine+0x142>
    b57e:	08 0f       	add	r16, r24
    b580:	0a f4       	brpl	.+2      	; 0xb584 <__ftoa_engine+0x13c>
    b582:	00 27       	eor	r16, r16
    b584:	02 17       	cp	r16, r18
    b586:	08 f4       	brcc	.+2      	; 0xb58a <__ftoa_engine+0x142>
    b588:	20 2f       	mov	r18, r16
    b58a:	23 95       	inc	r18
    b58c:	02 2f       	mov	r16, r18
    b58e:	7a 33       	cpi	r23, 0x3A	; 58
    b590:	28 f0       	brcs	.+10     	; 0xb59c <__ftoa_engine+0x154>
    b592:	79 e3       	ldi	r23, 0x39	; 57
    b594:	7d 93       	st	X+, r23
    b596:	2a 95       	dec	r18
    b598:	e9 f7       	brne	.-6      	; 0xb594 <__ftoa_engine+0x14c>
    b59a:	10 c0       	rjmp	.+32     	; 0xb5bc <__ftoa_engine+0x174>
    b59c:	7d 93       	st	X+, r23
    b59e:	2a 95       	dec	r18
    b5a0:	89 f6       	brne	.-94     	; 0xb544 <__ftoa_engine+0xfc>
    b5a2:	06 94       	lsr	r0
    b5a4:	97 95       	ror	r25
    b5a6:	67 95       	ror	r22
    b5a8:	37 95       	ror	r19
    b5aa:	17 95       	ror	r17
    b5ac:	17 94       	ror	r1
    b5ae:	e1 18       	sub	r14, r1
    b5b0:	f1 0a       	sbc	r15, r17
    b5b2:	43 0b       	sbc	r20, r19
    b5b4:	56 0b       	sbc	r21, r22
    b5b6:	c9 0b       	sbc	r28, r25
    b5b8:	d0 09       	sbc	r29, r0
    b5ba:	98 f0       	brcs	.+38     	; 0xb5e2 <__ftoa_engine+0x19a>
    b5bc:	23 95       	inc	r18
    b5be:	7e 91       	ld	r23, -X
    b5c0:	73 95       	inc	r23
    b5c2:	7a 33       	cpi	r23, 0x3A	; 58
    b5c4:	08 f0       	brcs	.+2      	; 0xb5c8 <__ftoa_engine+0x180>
    b5c6:	70 e3       	ldi	r23, 0x30	; 48
    b5c8:	7c 93       	st	X, r23
    b5ca:	20 13       	cpse	r18, r16
    b5cc:	b8 f7       	brcc	.-18     	; 0xb5bc <__ftoa_engine+0x174>
    b5ce:	7e 91       	ld	r23, -X
    b5d0:	70 61       	ori	r23, 0x10	; 16
    b5d2:	7d 93       	st	X+, r23
    b5d4:	30 f0       	brcs	.+12     	; 0xb5e2 <__ftoa_engine+0x19a>
    b5d6:	83 95       	inc	r24
    b5d8:	71 e3       	ldi	r23, 0x31	; 49
    b5da:	7d 93       	st	X+, r23
    b5dc:	70 e3       	ldi	r23, 0x30	; 48
    b5de:	2a 95       	dec	r18
    b5e0:	e1 f7       	brne	.-8      	; 0xb5da <__ftoa_engine+0x192>
    b5e2:	11 24       	eor	r1, r1
    b5e4:	ef 90       	pop	r14
    b5e6:	ff 90       	pop	r15
    b5e8:	0f 91       	pop	r16
    b5ea:	1f 91       	pop	r17
    b5ec:	cf 91       	pop	r28
    b5ee:	df 91       	pop	r29
    b5f0:	99 27       	eor	r25, r25
    b5f2:	87 fd       	sbrc	r24, 7
    b5f4:	90 95       	com	r25
    b5f6:	08 95       	ret

0000b5f8 <strnlen_P>:
    b5f8:	fc 01       	movw	r30, r24
    b5fa:	05 90       	lpm	r0, Z+
    b5fc:	61 50       	subi	r22, 0x01	; 1
    b5fe:	70 40       	sbci	r23, 0x00	; 0
    b600:	01 10       	cpse	r0, r1
    b602:	d8 f7       	brcc	.-10     	; 0xb5fa <strnlen_P+0x2>
    b604:	80 95       	com	r24
    b606:	90 95       	com	r25
    b608:	8e 0f       	add	r24, r30
    b60a:	9f 1f       	adc	r25, r31
    b60c:	08 95       	ret

0000b60e <memcpy>:
    b60e:	fb 01       	movw	r30, r22
    b610:	dc 01       	movw	r26, r24
    b612:	02 c0       	rjmp	.+4      	; 0xb618 <memcpy+0xa>
    b614:	01 90       	ld	r0, Z+
    b616:	0d 92       	st	X+, r0
    b618:	41 50       	subi	r20, 0x01	; 1
    b61a:	50 40       	sbci	r21, 0x00	; 0
    b61c:	d8 f7       	brcc	.-10     	; 0xb614 <memcpy+0x6>
    b61e:	08 95       	ret

0000b620 <strlen>:
    b620:	fc 01       	movw	r30, r24
    b622:	01 90       	ld	r0, Z+
    b624:	00 20       	and	r0, r0
    b626:	e9 f7       	brne	.-6      	; 0xb622 <strlen+0x2>
    b628:	80 95       	com	r24
    b62a:	90 95       	com	r25
    b62c:	8e 0f       	add	r24, r30
    b62e:	9f 1f       	adc	r25, r31
    b630:	08 95       	ret

0000b632 <strnlen>:
    b632:	fc 01       	movw	r30, r24
    b634:	61 50       	subi	r22, 0x01	; 1
    b636:	70 40       	sbci	r23, 0x00	; 0
    b638:	01 90       	ld	r0, Z+
    b63a:	01 10       	cpse	r0, r1
    b63c:	d8 f7       	brcc	.-10     	; 0xb634 <strnlen+0x2>
    b63e:	80 95       	com	r24
    b640:	90 95       	com	r25
    b642:	8e 0f       	add	r24, r30
    b644:	9f 1f       	adc	r25, r31
    b646:	08 95       	ret

0000b648 <fdevopen>:
    b648:	0f 93       	push	r16
    b64a:	1f 93       	push	r17
    b64c:	cf 93       	push	r28
    b64e:	df 93       	push	r29
    b650:	00 97       	sbiw	r24, 0x00	; 0
    b652:	31 f4       	brne	.+12     	; 0xb660 <fdevopen+0x18>
    b654:	61 15       	cp	r22, r1
    b656:	71 05       	cpc	r23, r1
    b658:	19 f4       	brne	.+6      	; 0xb660 <fdevopen+0x18>
    b65a:	80 e0       	ldi	r24, 0x00	; 0
    b65c:	90 e0       	ldi	r25, 0x00	; 0
    b65e:	39 c0       	rjmp	.+114    	; 0xb6d2 <fdevopen+0x8a>
    b660:	8b 01       	movw	r16, r22
    b662:	ec 01       	movw	r28, r24
    b664:	6e e0       	ldi	r22, 0x0E	; 14
    b666:	70 e0       	ldi	r23, 0x00	; 0
    b668:	81 e0       	ldi	r24, 0x01	; 1
    b66a:	90 e0       	ldi	r25, 0x00	; 0
    b66c:	4b d1       	rcall	.+662    	; 0xb904 <calloc>
    b66e:	fc 01       	movw	r30, r24
    b670:	89 2b       	or	r24, r25
    b672:	99 f3       	breq	.-26     	; 0xb65a <fdevopen+0x12>
    b674:	80 e8       	ldi	r24, 0x80	; 128
    b676:	83 83       	std	Z+3, r24	; 0x03
    b678:	01 15       	cp	r16, r1
    b67a:	11 05       	cpc	r17, r1
    b67c:	71 f0       	breq	.+28     	; 0xb69a <fdevopen+0x52>
    b67e:	02 87       	std	Z+10, r16	; 0x0a
    b680:	13 87       	std	Z+11, r17	; 0x0b
    b682:	81 e8       	ldi	r24, 0x81	; 129
    b684:	83 83       	std	Z+3, r24	; 0x03
    b686:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <__iob>
    b68a:	90 91 1c 28 	lds	r25, 0x281C	; 0x80281c <__iob+0x1>
    b68e:	89 2b       	or	r24, r25
    b690:	21 f4       	brne	.+8      	; 0xb69a <fdevopen+0x52>
    b692:	e0 93 1b 28 	sts	0x281B, r30	; 0x80281b <__iob>
    b696:	f0 93 1c 28 	sts	0x281C, r31	; 0x80281c <__iob+0x1>
    b69a:	20 97       	sbiw	r28, 0x00	; 0
    b69c:	c9 f0       	breq	.+50     	; 0xb6d0 <fdevopen+0x88>
    b69e:	c0 87       	std	Z+8, r28	; 0x08
    b6a0:	d1 87       	std	Z+9, r29	; 0x09
    b6a2:	83 81       	ldd	r24, Z+3	; 0x03
    b6a4:	82 60       	ori	r24, 0x02	; 2
    b6a6:	83 83       	std	Z+3, r24	; 0x03
    b6a8:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <__iob+0x2>
    b6ac:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <__iob+0x3>
    b6b0:	89 2b       	or	r24, r25
    b6b2:	71 f4       	brne	.+28     	; 0xb6d0 <fdevopen+0x88>
    b6b4:	e0 93 1d 28 	sts	0x281D, r30	; 0x80281d <__iob+0x2>
    b6b8:	f0 93 1e 28 	sts	0x281E, r31	; 0x80281e <__iob+0x3>
    b6bc:	80 91 1f 28 	lds	r24, 0x281F	; 0x80281f <__iob+0x4>
    b6c0:	90 91 20 28 	lds	r25, 0x2820	; 0x802820 <__iob+0x5>
    b6c4:	89 2b       	or	r24, r25
    b6c6:	21 f4       	brne	.+8      	; 0xb6d0 <fdevopen+0x88>
    b6c8:	e0 93 1f 28 	sts	0x281F, r30	; 0x80281f <__iob+0x4>
    b6cc:	f0 93 20 28 	sts	0x2820, r31	; 0x802820 <__iob+0x5>
    b6d0:	cf 01       	movw	r24, r30
    b6d2:	df 91       	pop	r29
    b6d4:	cf 91       	pop	r28
    b6d6:	1f 91       	pop	r17
    b6d8:	0f 91       	pop	r16
    b6da:	08 95       	ret

0000b6dc <fprintf>:
    b6dc:	cf 93       	push	r28
    b6de:	df 93       	push	r29
    b6e0:	cd b7       	in	r28, 0x3d	; 61
    b6e2:	de b7       	in	r29, 0x3e	; 62
    b6e4:	ae 01       	movw	r20, r28
    b6e6:	46 5f       	subi	r20, 0xF6	; 246
    b6e8:	5f 4f       	sbci	r21, 0xFF	; 255
    b6ea:	68 85       	ldd	r22, Y+8	; 0x08
    b6ec:	79 85       	ldd	r23, Y+9	; 0x09
    b6ee:	8e 81       	ldd	r24, Y+6	; 0x06
    b6f0:	9f 81       	ldd	r25, Y+7	; 0x07
    b6f2:	b1 d8       	rcall	.-3742   	; 0xa856 <vfprintf>
    b6f4:	df 91       	pop	r29
    b6f6:	cf 91       	pop	r28
    b6f8:	08 95       	ret

0000b6fa <fputc>:
    b6fa:	0f 93       	push	r16
    b6fc:	1f 93       	push	r17
    b6fe:	cf 93       	push	r28
    b700:	df 93       	push	r29
    b702:	fb 01       	movw	r30, r22
    b704:	23 81       	ldd	r18, Z+3	; 0x03
    b706:	21 fd       	sbrc	r18, 1
    b708:	03 c0       	rjmp	.+6      	; 0xb710 <fputc+0x16>
    b70a:	8f ef       	ldi	r24, 0xFF	; 255
    b70c:	9f ef       	ldi	r25, 0xFF	; 255
    b70e:	2c c0       	rjmp	.+88     	; 0xb768 <fputc+0x6e>
    b710:	22 ff       	sbrs	r18, 2
    b712:	16 c0       	rjmp	.+44     	; 0xb740 <fputc+0x46>
    b714:	46 81       	ldd	r20, Z+6	; 0x06
    b716:	57 81       	ldd	r21, Z+7	; 0x07
    b718:	24 81       	ldd	r18, Z+4	; 0x04
    b71a:	35 81       	ldd	r19, Z+5	; 0x05
    b71c:	42 17       	cp	r20, r18
    b71e:	53 07       	cpc	r21, r19
    b720:	44 f4       	brge	.+16     	; 0xb732 <fputc+0x38>
    b722:	a0 81       	ld	r26, Z
    b724:	b1 81       	ldd	r27, Z+1	; 0x01
    b726:	9d 01       	movw	r18, r26
    b728:	2f 5f       	subi	r18, 0xFF	; 255
    b72a:	3f 4f       	sbci	r19, 0xFF	; 255
    b72c:	20 83       	st	Z, r18
    b72e:	31 83       	std	Z+1, r19	; 0x01
    b730:	8c 93       	st	X, r24
    b732:	26 81       	ldd	r18, Z+6	; 0x06
    b734:	37 81       	ldd	r19, Z+7	; 0x07
    b736:	2f 5f       	subi	r18, 0xFF	; 255
    b738:	3f 4f       	sbci	r19, 0xFF	; 255
    b73a:	26 83       	std	Z+6, r18	; 0x06
    b73c:	37 83       	std	Z+7, r19	; 0x07
    b73e:	14 c0       	rjmp	.+40     	; 0xb768 <fputc+0x6e>
    b740:	8b 01       	movw	r16, r22
    b742:	ec 01       	movw	r28, r24
    b744:	fb 01       	movw	r30, r22
    b746:	00 84       	ldd	r0, Z+8	; 0x08
    b748:	f1 85       	ldd	r31, Z+9	; 0x09
    b74a:	e0 2d       	mov	r30, r0
    b74c:	19 95       	eicall
    b74e:	89 2b       	or	r24, r25
    b750:	e1 f6       	brne	.-72     	; 0xb70a <fputc+0x10>
    b752:	d8 01       	movw	r26, r16
    b754:	16 96       	adiw	r26, 0x06	; 6
    b756:	8d 91       	ld	r24, X+
    b758:	9c 91       	ld	r25, X
    b75a:	17 97       	sbiw	r26, 0x07	; 7
    b75c:	01 96       	adiw	r24, 0x01	; 1
    b75e:	16 96       	adiw	r26, 0x06	; 6
    b760:	8d 93       	st	X+, r24
    b762:	9c 93       	st	X, r25
    b764:	17 97       	sbiw	r26, 0x07	; 7
    b766:	ce 01       	movw	r24, r28
    b768:	df 91       	pop	r29
    b76a:	cf 91       	pop	r28
    b76c:	1f 91       	pop	r17
    b76e:	0f 91       	pop	r16
    b770:	08 95       	ret

0000b772 <printf>:
    b772:	cf 93       	push	r28
    b774:	df 93       	push	r29
    b776:	cd b7       	in	r28, 0x3d	; 61
    b778:	de b7       	in	r29, 0x3e	; 62
    b77a:	ae 01       	movw	r20, r28
    b77c:	4a 5f       	subi	r20, 0xFA	; 250
    b77e:	5f 4f       	sbci	r21, 0xFF	; 255
    b780:	fa 01       	movw	r30, r20
    b782:	61 91       	ld	r22, Z+
    b784:	71 91       	ld	r23, Z+
    b786:	af 01       	movw	r20, r30
    b788:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <__iob+0x2>
    b78c:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <__iob+0x3>
    b790:	62 d8       	rcall	.-3900   	; 0xa856 <vfprintf>
    b792:	df 91       	pop	r29
    b794:	cf 91       	pop	r28
    b796:	08 95       	ret

0000b798 <puts>:
    b798:	0f 93       	push	r16
    b79a:	1f 93       	push	r17
    b79c:	cf 93       	push	r28
    b79e:	df 93       	push	r29
    b7a0:	e0 91 1d 28 	lds	r30, 0x281D	; 0x80281d <__iob+0x2>
    b7a4:	f0 91 1e 28 	lds	r31, 0x281E	; 0x80281e <__iob+0x3>
    b7a8:	23 81       	ldd	r18, Z+3	; 0x03
    b7aa:	21 ff       	sbrs	r18, 1
    b7ac:	1b c0       	rjmp	.+54     	; 0xb7e4 <puts+0x4c>
    b7ae:	8c 01       	movw	r16, r24
    b7b0:	d0 e0       	ldi	r29, 0x00	; 0
    b7b2:	c0 e0       	ldi	r28, 0x00	; 0
    b7b4:	f8 01       	movw	r30, r16
    b7b6:	81 91       	ld	r24, Z+
    b7b8:	8f 01       	movw	r16, r30
    b7ba:	60 91 1d 28 	lds	r22, 0x281D	; 0x80281d <__iob+0x2>
    b7be:	70 91 1e 28 	lds	r23, 0x281E	; 0x80281e <__iob+0x3>
    b7c2:	db 01       	movw	r26, r22
    b7c4:	18 96       	adiw	r26, 0x08	; 8
    b7c6:	ed 91       	ld	r30, X+
    b7c8:	fc 91       	ld	r31, X
    b7ca:	19 97       	sbiw	r26, 0x09	; 9
    b7cc:	88 23       	and	r24, r24
    b7ce:	31 f0       	breq	.+12     	; 0xb7dc <puts+0x44>
    b7d0:	19 95       	eicall
    b7d2:	89 2b       	or	r24, r25
    b7d4:	79 f3       	breq	.-34     	; 0xb7b4 <puts+0x1c>
    b7d6:	df ef       	ldi	r29, 0xFF	; 255
    b7d8:	cf ef       	ldi	r28, 0xFF	; 255
    b7da:	ec cf       	rjmp	.-40     	; 0xb7b4 <puts+0x1c>
    b7dc:	8a e0       	ldi	r24, 0x0A	; 10
    b7de:	19 95       	eicall
    b7e0:	89 2b       	or	r24, r25
    b7e2:	19 f0       	breq	.+6      	; 0xb7ea <puts+0x52>
    b7e4:	8f ef       	ldi	r24, 0xFF	; 255
    b7e6:	9f ef       	ldi	r25, 0xFF	; 255
    b7e8:	02 c0       	rjmp	.+4      	; 0xb7ee <puts+0x56>
    b7ea:	8d 2f       	mov	r24, r29
    b7ec:	9c 2f       	mov	r25, r28
    b7ee:	df 91       	pop	r29
    b7f0:	cf 91       	pop	r28
    b7f2:	1f 91       	pop	r17
    b7f4:	0f 91       	pop	r16
    b7f6:	08 95       	ret

0000b7f8 <sprintf>:
    b7f8:	0f 93       	push	r16
    b7fa:	1f 93       	push	r17
    b7fc:	cf 93       	push	r28
    b7fe:	df 93       	push	r29
    b800:	cd b7       	in	r28, 0x3d	; 61
    b802:	de b7       	in	r29, 0x3e	; 62
    b804:	2e 97       	sbiw	r28, 0x0e	; 14
    b806:	cd bf       	out	0x3d, r28	; 61
    b808:	de bf       	out	0x3e, r29	; 62
    b80a:	0e 89       	ldd	r16, Y+22	; 0x16
    b80c:	1f 89       	ldd	r17, Y+23	; 0x17
    b80e:	86 e0       	ldi	r24, 0x06	; 6
    b810:	8c 83       	std	Y+4, r24	; 0x04
    b812:	09 83       	std	Y+1, r16	; 0x01
    b814:	1a 83       	std	Y+2, r17	; 0x02
    b816:	8f ef       	ldi	r24, 0xFF	; 255
    b818:	9f e7       	ldi	r25, 0x7F	; 127
    b81a:	8d 83       	std	Y+5, r24	; 0x05
    b81c:	9e 83       	std	Y+6, r25	; 0x06
    b81e:	ae 01       	movw	r20, r28
    b820:	46 5e       	subi	r20, 0xE6	; 230
    b822:	5f 4f       	sbci	r21, 0xFF	; 255
    b824:	68 8d       	ldd	r22, Y+24	; 0x18
    b826:	79 8d       	ldd	r23, Y+25	; 0x19
    b828:	ce 01       	movw	r24, r28
    b82a:	01 96       	adiw	r24, 0x01	; 1
    b82c:	14 d8       	rcall	.-4056   	; 0xa856 <vfprintf>
    b82e:	ef 81       	ldd	r30, Y+7	; 0x07
    b830:	f8 85       	ldd	r31, Y+8	; 0x08
    b832:	e0 0f       	add	r30, r16
    b834:	f1 1f       	adc	r31, r17
    b836:	10 82       	st	Z, r1
    b838:	2e 96       	adiw	r28, 0x0e	; 14
    b83a:	cd bf       	out	0x3d, r28	; 61
    b83c:	de bf       	out	0x3e, r29	; 62
    b83e:	df 91       	pop	r29
    b840:	cf 91       	pop	r28
    b842:	1f 91       	pop	r17
    b844:	0f 91       	pop	r16
    b846:	08 95       	ret

0000b848 <__ultoa_invert>:
    b848:	fa 01       	movw	r30, r20
    b84a:	aa 27       	eor	r26, r26
    b84c:	28 30       	cpi	r18, 0x08	; 8
    b84e:	51 f1       	breq	.+84     	; 0xb8a4 <__ultoa_invert+0x5c>
    b850:	20 31       	cpi	r18, 0x10	; 16
    b852:	81 f1       	breq	.+96     	; 0xb8b4 <__ultoa_invert+0x6c>
    b854:	e8 94       	clt
    b856:	6f 93       	push	r22
    b858:	6e 7f       	andi	r22, 0xFE	; 254
    b85a:	6e 5f       	subi	r22, 0xFE	; 254
    b85c:	7f 4f       	sbci	r23, 0xFF	; 255
    b85e:	8f 4f       	sbci	r24, 0xFF	; 255
    b860:	9f 4f       	sbci	r25, 0xFF	; 255
    b862:	af 4f       	sbci	r26, 0xFF	; 255
    b864:	b1 e0       	ldi	r27, 0x01	; 1
    b866:	3e d0       	rcall	.+124    	; 0xb8e4 <__ultoa_invert+0x9c>
    b868:	b4 e0       	ldi	r27, 0x04	; 4
    b86a:	3c d0       	rcall	.+120    	; 0xb8e4 <__ultoa_invert+0x9c>
    b86c:	67 0f       	add	r22, r23
    b86e:	78 1f       	adc	r23, r24
    b870:	89 1f       	adc	r24, r25
    b872:	9a 1f       	adc	r25, r26
    b874:	a1 1d       	adc	r26, r1
    b876:	68 0f       	add	r22, r24
    b878:	79 1f       	adc	r23, r25
    b87a:	8a 1f       	adc	r24, r26
    b87c:	91 1d       	adc	r25, r1
    b87e:	a1 1d       	adc	r26, r1
    b880:	6a 0f       	add	r22, r26
    b882:	71 1d       	adc	r23, r1
    b884:	81 1d       	adc	r24, r1
    b886:	91 1d       	adc	r25, r1
    b888:	a1 1d       	adc	r26, r1
    b88a:	20 d0       	rcall	.+64     	; 0xb8cc <__ultoa_invert+0x84>
    b88c:	09 f4       	brne	.+2      	; 0xb890 <__ultoa_invert+0x48>
    b88e:	68 94       	set
    b890:	3f 91       	pop	r19
    b892:	2a e0       	ldi	r18, 0x0A	; 10
    b894:	26 9f       	mul	r18, r22
    b896:	11 24       	eor	r1, r1
    b898:	30 19       	sub	r19, r0
    b89a:	30 5d       	subi	r19, 0xD0	; 208
    b89c:	31 93       	st	Z+, r19
    b89e:	de f6       	brtc	.-74     	; 0xb856 <__ultoa_invert+0xe>
    b8a0:	cf 01       	movw	r24, r30
    b8a2:	08 95       	ret
    b8a4:	46 2f       	mov	r20, r22
    b8a6:	47 70       	andi	r20, 0x07	; 7
    b8a8:	40 5d       	subi	r20, 0xD0	; 208
    b8aa:	41 93       	st	Z+, r20
    b8ac:	b3 e0       	ldi	r27, 0x03	; 3
    b8ae:	0f d0       	rcall	.+30     	; 0xb8ce <__ultoa_invert+0x86>
    b8b0:	c9 f7       	brne	.-14     	; 0xb8a4 <__ultoa_invert+0x5c>
    b8b2:	f6 cf       	rjmp	.-20     	; 0xb8a0 <__ultoa_invert+0x58>
    b8b4:	46 2f       	mov	r20, r22
    b8b6:	4f 70       	andi	r20, 0x0F	; 15
    b8b8:	40 5d       	subi	r20, 0xD0	; 208
    b8ba:	4a 33       	cpi	r20, 0x3A	; 58
    b8bc:	18 f0       	brcs	.+6      	; 0xb8c4 <__ultoa_invert+0x7c>
    b8be:	49 5d       	subi	r20, 0xD9	; 217
    b8c0:	31 fd       	sbrc	r19, 1
    b8c2:	40 52       	subi	r20, 0x20	; 32
    b8c4:	41 93       	st	Z+, r20
    b8c6:	02 d0       	rcall	.+4      	; 0xb8cc <__ultoa_invert+0x84>
    b8c8:	a9 f7       	brne	.-22     	; 0xb8b4 <__ultoa_invert+0x6c>
    b8ca:	ea cf       	rjmp	.-44     	; 0xb8a0 <__ultoa_invert+0x58>
    b8cc:	b4 e0       	ldi	r27, 0x04	; 4
    b8ce:	a6 95       	lsr	r26
    b8d0:	97 95       	ror	r25
    b8d2:	87 95       	ror	r24
    b8d4:	77 95       	ror	r23
    b8d6:	67 95       	ror	r22
    b8d8:	ba 95       	dec	r27
    b8da:	c9 f7       	brne	.-14     	; 0xb8ce <__ultoa_invert+0x86>
    b8dc:	00 97       	sbiw	r24, 0x00	; 0
    b8de:	61 05       	cpc	r22, r1
    b8e0:	71 05       	cpc	r23, r1
    b8e2:	08 95       	ret
    b8e4:	9b 01       	movw	r18, r22
    b8e6:	ac 01       	movw	r20, r24
    b8e8:	0a 2e       	mov	r0, r26
    b8ea:	06 94       	lsr	r0
    b8ec:	57 95       	ror	r21
    b8ee:	47 95       	ror	r20
    b8f0:	37 95       	ror	r19
    b8f2:	27 95       	ror	r18
    b8f4:	ba 95       	dec	r27
    b8f6:	c9 f7       	brne	.-14     	; 0xb8ea <__ultoa_invert+0xa2>
    b8f8:	62 0f       	add	r22, r18
    b8fa:	73 1f       	adc	r23, r19
    b8fc:	84 1f       	adc	r24, r20
    b8fe:	95 1f       	adc	r25, r21
    b900:	a0 1d       	adc	r26, r0
    b902:	08 95       	ret

0000b904 <calloc>:
    b904:	0f 93       	push	r16
    b906:	1f 93       	push	r17
    b908:	cf 93       	push	r28
    b90a:	df 93       	push	r29
    b90c:	86 9f       	mul	r24, r22
    b90e:	80 01       	movw	r16, r0
    b910:	87 9f       	mul	r24, r23
    b912:	10 0d       	add	r17, r0
    b914:	96 9f       	mul	r25, r22
    b916:	10 0d       	add	r17, r0
    b918:	11 24       	eor	r1, r1
    b91a:	c8 01       	movw	r24, r16
    b91c:	74 dc       	rcall	.-1816   	; 0xb206 <malloc>
    b91e:	ec 01       	movw	r28, r24
    b920:	00 97       	sbiw	r24, 0x00	; 0
    b922:	21 f0       	breq	.+8      	; 0xb92c <calloc+0x28>
    b924:	a8 01       	movw	r20, r16
    b926:	60 e0       	ldi	r22, 0x00	; 0
    b928:	70 e0       	ldi	r23, 0x00	; 0
    b92a:	06 d0       	rcall	.+12     	; 0xb938 <memset>
    b92c:	ce 01       	movw	r24, r28
    b92e:	df 91       	pop	r29
    b930:	cf 91       	pop	r28
    b932:	1f 91       	pop	r17
    b934:	0f 91       	pop	r16
    b936:	08 95       	ret

0000b938 <memset>:
    b938:	dc 01       	movw	r26, r24
    b93a:	01 c0       	rjmp	.+2      	; 0xb93e <memset+0x6>
    b93c:	6d 93       	st	X+, r22
    b93e:	41 50       	subi	r20, 0x01	; 1
    b940:	50 40       	sbci	r21, 0x00	; 0
    b942:	e0 f7       	brcc	.-8      	; 0xb93c <memset+0x4>
    b944:	08 95       	ret

0000b946 <_exit>:
    b946:	f8 94       	cli

0000b948 <__stop_program>:
    b948:	ff cf       	rjmp	.-2      	; 0xb948 <__stop_program>
