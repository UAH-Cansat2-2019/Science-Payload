
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00802000  00007438  000074cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  008020a8  008020a8  00007574  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007574  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000075d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  00007610  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f6dc  00000000  00000000  00007d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000056cd  00000000  00000000  0001742c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009ab0  00000000  00000000  0001caf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026c8  00000000  00000000  000265ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035d6e  00000000  00000000  00028c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000569e  00000000  00000000  0005e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  00064080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004107  00000000  00000000  000646f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_10>
      2c:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_11>
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__vector_13>
      38:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__vector_14>
      3c:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__vector_15>
      40:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_16>
      44:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_17>
      48:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__vector_18>
      4c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_19>
      50:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__vector_20>
      54:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_21>
      58:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__vector_22>
      5c:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__vector_23>
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__vector_46>
      bc:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_47>
      c0:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__vector_48>
      c4:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__vector_49>
      c8:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__vector_50>
      cc:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__vector_51>
      d0:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__vector_52>
      d4:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_53>
      d8:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__vector_54>
      dc:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__vector_55>
      e0:	0c 94 87 18 	jmp	0x310e	; 0x310e <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__vector_76>
     134:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__vector_77>
     138:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__vector_78>
     13c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__vector_79>
     140:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_80>
     144:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__vector_81>
     148:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__vector_82>
     14c:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_83>
     150:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__vector_84>
     154:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__vector_85>
     158:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__vector_107>
     1b0:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__vector_108>
     1b4:	0c 94 35 19 	jmp	0x326a	; 0x326a <__vector_109>
     1b8:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__vector_110>
     1bc:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__vector_111>
     1c0:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__vector_112>
     1c4:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__vector_113>
     1c8:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__vector_114>
     1cc:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__vector_115>
     1d0:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__vector_116>
     1d4:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_119>
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e3       	ldi	r30, 0x38	; 56
     21c:	f4 e7       	ldi	r31, 0x74	; 116
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a8 3a       	cpi	r26, 0xA8	; 168
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a8 ea       	ldi	r26, 0xA8	; 168
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a7 32       	cpi	r26, 0x27	; 39
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 90 2b 	call	0x5720	; 0x5720 <main>
     244:	0c 94 1a 3a 	jmp	0x7434	; 0x7434 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <sysclk_get_main_hz>:
	//delay_ms(30);
	//
	//data=0X0C;
	//twi_write(&data,BN0_ADDR,0X3D);
	//delay_ms(10);
}
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	98 e4       	ldi	r25, 0x48	; 72
     256:	a8 ee       	ldi	r26, 0xE8	; 232
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	bc 01       	movw	r22, r24
     25c:	cd 01       	movw	r24, r26
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <sysclk_get_per4_hz>:
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	19 82       	std	Y+1, r1	; 0x01
     270:	ec df       	rcall	.-40     	; 0x24a <sysclk_get_main_hz>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	29 81       	ldd	r18, Y+1	; 0x01
     278:	22 2f       	mov	r18, r18
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	04 c0       	rjmp	.+8      	; 0x286 <sysclk_get_per4_hz+0x22>
     27e:	b6 95       	lsr	r27
     280:	a7 95       	ror	r26
     282:	97 95       	ror	r25
     284:	87 95       	ror	r24
     286:	2a 95       	dec	r18
     288:	d2 f7       	brpl	.-12     	; 0x27e <sysclk_get_per4_hz+0x1a>
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <sysclk_get_per2_hz>:
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	e2 df       	rcall	.-60     	; 0x264 <sysclk_get_per4_hz>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <sysclk_get_per_hz>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	ef df       	rcall	.-34     	; 0x296 <sysclk_get_per2_hz>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	bc 01       	movw	r22, r24
     2be:	cd 01       	movw	r24, r26
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <sysclk_get_cpu_hz>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	ef df       	rcall	.-34     	; 0x2ae <sysclk_get_per_hz>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	bc 01       	movw	r22, r24
     2d6:	cd 01       	movw	r24, r26
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <__portable_avr_delay_cycles>:
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <__portable_avr_delay_cycles+0xa>
     2e0:	61 50       	subi	r22, 0x01	; 1
     2e2:	71 09       	sbc	r23, r1
     2e4:	81 09       	sbc	r24, r1
     2e6:	91 09       	sbc	r25, r1
     2e8:	61 15       	cp	r22, r1
     2ea:	71 05       	cpc	r23, r1
     2ec:	81 05       	cpc	r24, r1
     2ee:	91 05       	cpc	r25, r1
     2f0:	b9 f7       	brne	.-18     	; 0x2e0 <__portable_avr_delay_cycles+0x2>
     2f2:	08 95       	ret

000002f4 <BNO_Write>:
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <BNO_Write+0x6>
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	9a 83       	std	Y+2, r25	; 0x02
     302:	6b 83       	std	Y+3, r22	; 0x03
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	4b 81       	ldd	r20, Y+3	; 0x03
     30a:	69 e2       	ldi	r22, 0x29	; 41
     30c:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <twi_write>
     310:	00 00       	nop
     312:	23 96       	adiw	r28, 0x03	; 3
     314:	cd bf       	out	0x3d, r28	; 61
     316:	de bf       	out	0x3e, r29	; 62
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <BNO_Read>:
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <BNO_Read+0x6>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	6b 83       	std	Y+3, r22	; 0x03
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	4b 81       	ldd	r20, Y+3	; 0x03
     334:	69 e2       	ldi	r22, 0x29	; 41
     336:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <twi_read>
     33a:	00 00       	nop
     33c:	23 96       	adiw	r28, 0x03	; 3
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	de bf       	out	0x3e, r29	; 62
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <get_acceleration_x>:
//return data;
//}

//store a three long array containing the x, y and z acceleration in that order units of cm/s^2
uint16_t get_acceleration_x()
{
     348:	2f 92       	push	r2
     34a:	3f 92       	push	r3
     34c:	4f 92       	push	r4
     34e:	5f 92       	push	r5
     350:	6f 92       	push	r6
     352:	7f 92       	push	r7
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	c3 54       	subi	r28, 0x43	; 67
     372:	d1 09       	sbc	r29, r1
     374:	cd bf       	out	0x3d, r28	; 61
     376:	de bf       	out	0x3e, r29	; 62
	uint16_t acelx;
	uint8_t data = 0xff;
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	8b 83       	std	Y+3, r24	; 0x03
	delay_ms(10);
     37c:	a4 df       	rcall	.-184    	; 0x2c6 <sysclk_get_cpu_hz>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	9c 01       	movw	r18, r24
     384:	ad 01       	movw	r20, r26
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	cb 01       	movw	r24, r22
     38c:	82 2e       	mov	r8, r18
     38e:	93 2e       	mov	r9, r19
     390:	a4 2e       	mov	r10, r20
     392:	b5 2e       	mov	r11, r21
     394:	c6 2e       	mov	r12, r22
     396:	d7 2e       	mov	r13, r23
     398:	e8 2e       	mov	r14, r24
     39a:	f9 2e       	mov	r15, r25
     39c:	28 2d       	mov	r18, r8
     39e:	39 2d       	mov	r19, r9
     3a0:	4a 2d       	mov	r20, r10
     3a2:	5b 2d       	mov	r21, r11
     3a4:	6c 2d       	mov	r22, r12
     3a6:	7d 2d       	mov	r23, r13
     3a8:	8e 2d       	mov	r24, r14
     3aa:	9f 2d       	mov	r25, r15
     3ac:	01 e0       	ldi	r16, 0x01	; 1
     3ae:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     3b2:	2c 83       	std	Y+4, r18	; 0x04
     3b4:	3d 83       	std	Y+5, r19	; 0x05
     3b6:	4e 83       	std	Y+6, r20	; 0x06
     3b8:	5f 83       	std	Y+7, r21	; 0x07
     3ba:	68 87       	std	Y+8, r22	; 0x08
     3bc:	79 87       	std	Y+9, r23	; 0x09
     3be:	8a 87       	std	Y+10, r24	; 0x0a
     3c0:	9b 87       	std	Y+11, r25	; 0x0b
     3c2:	8c 80       	ldd	r8, Y+4	; 0x04
     3c4:	9d 80       	ldd	r9, Y+5	; 0x05
     3c6:	ae 80       	ldd	r10, Y+6	; 0x06
     3c8:	bf 80       	ldd	r11, Y+7	; 0x07
     3ca:	c8 84       	ldd	r12, Y+8	; 0x08
     3cc:	d9 84       	ldd	r13, Y+9	; 0x09
     3ce:	ea 84       	ldd	r14, Y+10	; 0x0a
     3d0:	fb 84       	ldd	r15, Y+11	; 0x0b
     3d2:	28 2d       	mov	r18, r8
     3d4:	39 2d       	mov	r19, r9
     3d6:	4a 2d       	mov	r20, r10
     3d8:	5b 2d       	mov	r21, r11
     3da:	6c 2d       	mov	r22, r12
     3dc:	7d 2d       	mov	r23, r13
     3de:	8e 2d       	mov	r24, r14
     3e0:	9f 2d       	mov	r25, r15
     3e2:	02 e0       	ldi	r16, 0x02	; 2
     3e4:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     3e8:	2c 87       	std	Y+12, r18	; 0x0c
     3ea:	3d 87       	std	Y+13, r19	; 0x0d
     3ec:	4e 87       	std	Y+14, r20	; 0x0e
     3ee:	5f 87       	std	Y+15, r21	; 0x0f
     3f0:	68 8b       	std	Y+16, r22	; 0x10
     3f2:	79 8b       	std	Y+17, r23	; 0x11
     3f4:	8a 8b       	std	Y+18, r24	; 0x12
     3f6:	9b 8b       	std	Y+19, r25	; 0x13
     3f8:	28 2d       	mov	r18, r8
     3fa:	39 2d       	mov	r19, r9
     3fc:	4a 2d       	mov	r20, r10
     3fe:	5b 2d       	mov	r21, r11
     400:	6c 2d       	mov	r22, r12
     402:	7d 2d       	mov	r23, r13
     404:	8e 2d       	mov	r24, r14
     406:	9f 2d       	mov	r25, r15
     408:	ac 84       	ldd	r10, Y+12	; 0x0c
     40a:	bd 84       	ldd	r11, Y+13	; 0x0d
     40c:	ce 84       	ldd	r12, Y+14	; 0x0e
     40e:	df 84       	ldd	r13, Y+15	; 0x0f
     410:	e8 88       	ldd	r14, Y+16	; 0x10
     412:	f9 88       	ldd	r15, Y+17	; 0x11
     414:	0a 89       	ldd	r16, Y+18	; 0x12
     416:	1b 89       	ldd	r17, Y+19	; 0x13
     418:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     41c:	22 2e       	mov	r2, r18
     41e:	33 2e       	mov	r3, r19
     420:	44 2e       	mov	r4, r20
     422:	55 2e       	mov	r5, r21
     424:	66 2e       	mov	r6, r22
     426:	77 2e       	mov	r7, r23
     428:	88 2e       	mov	r8, r24
     42a:	99 2e       	mov	r9, r25
     42c:	0f 2e       	mov	r0, r31
     42e:	f6 e0       	ldi	r31, 0x06	; 6
     430:	af 2e       	mov	r10, r31
     432:	f0 2d       	mov	r31, r0
     434:	b1 2c       	mov	r11, r1
     436:	c1 2c       	mov	r12, r1
     438:	d1 2c       	mov	r13, r1
     43a:	e1 2c       	mov	r14, r1
     43c:	f1 2c       	mov	r15, r1
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	22 2d       	mov	r18, r2
     444:	33 2d       	mov	r19, r3
     446:	44 2d       	mov	r20, r4
     448:	55 2d       	mov	r21, r5
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	88 2d       	mov	r24, r8
     450:	99 2d       	mov	r25, r9
     452:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     456:	22 2e       	mov	r2, r18
     458:	33 2e       	mov	r3, r19
     45a:	44 2e       	mov	r4, r20
     45c:	55 2e       	mov	r5, r21
     45e:	66 2e       	mov	r6, r22
     460:	77 2e       	mov	r7, r23
     462:	88 2e       	mov	r8, r24
     464:	99 2e       	mov	r9, r25
     466:	a2 2c       	mov	r10, r2
     468:	b3 2c       	mov	r11, r3
     46a:	c4 2c       	mov	r12, r4
     46c:	d5 2c       	mov	r13, r5
     46e:	e6 2c       	mov	r14, r6
     470:	f7 2c       	mov	r15, r7
     472:	08 2d       	mov	r16, r8
     474:	19 2d       	mov	r17, r9
     476:	2a 2d       	mov	r18, r10
     478:	3b 2d       	mov	r19, r11
     47a:	4c 2d       	mov	r20, r12
     47c:	5d 2d       	mov	r21, r13
     47e:	6e 2d       	mov	r22, r14
     480:	7f 2d       	mov	r23, r15
     482:	80 2f       	mov	r24, r16
     484:	91 2f       	mov	r25, r17
     486:	29 51       	subi	r18, 0x19	; 25
     488:	3c 4f       	sbci	r19, 0xFC	; 252
     48a:	4f 4f       	sbci	r20, 0xFF	; 255
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	6f 4f       	sbci	r22, 0xFF	; 255
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	8f 4f       	sbci	r24, 0xFF	; 255
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	a2 2e       	mov	r10, r18
     498:	b3 2e       	mov	r11, r19
     49a:	c4 2e       	mov	r12, r20
     49c:	d5 2e       	mov	r13, r21
     49e:	e6 2e       	mov	r14, r22
     4a0:	f7 2e       	mov	r15, r23
     4a2:	08 2f       	mov	r16, r24
     4a4:	19 2f       	mov	r17, r25
     4a6:	2a 2d       	mov	r18, r10
     4a8:	3b 2d       	mov	r19, r11
     4aa:	4c 2d       	mov	r20, r12
     4ac:	5d 2d       	mov	r21, r13
     4ae:	6e 2d       	mov	r22, r14
     4b0:	7f 2d       	mov	r23, r15
     4b2:	80 2f       	mov	r24, r16
     4b4:	91 2f       	mov	r25, r17
     4b6:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4a e7       	ldi	r20, 0x7A	; 122
     4c4:	54 e4       	ldi	r21, 0x44	; 68
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     4da:	a2 2e       	mov	r10, r18
     4dc:	b3 2e       	mov	r11, r19
     4de:	c4 2e       	mov	r12, r20
     4e0:	d5 2e       	mov	r13, r21
     4e2:	e6 2e       	mov	r14, r22
     4e4:	f7 2e       	mov	r15, r23
     4e6:	08 2f       	mov	r16, r24
     4e8:	19 2f       	mov	r17, r25
     4ea:	d6 01       	movw	r26, r12
     4ec:	c5 01       	movw	r24, r10
     4ee:	bc 01       	movw	r22, r24
     4f0:	cd 01       	movw	r24, r26
     4f2:	f5 de       	rcall	.-534    	; 0x2de <__portable_avr_delay_cycles>
	BNO_Read(&data,BNO055_ACCEL_DATA_X_MSB_ADDR);
     4f4:	ce 01       	movw	r24, r28
     4f6:	03 96       	adiw	r24, 0x03	; 3
     4f8:	69 e0       	ldi	r22, 0x09	; 9
	delay_ms(10);
     4fa:	11 df       	rcall	.-478    	; 0x31e <BNO_Read>
     4fc:	e4 de       	rcall	.-568    	; 0x2c6 <sysclk_get_cpu_hz>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	9c 01       	movw	r18, r24
     504:	ad 01       	movw	r20, r26
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	cb 01       	movw	r24, r22
     50c:	82 2e       	mov	r8, r18
     50e:	93 2e       	mov	r9, r19
     510:	a4 2e       	mov	r10, r20
     512:	b5 2e       	mov	r11, r21
     514:	c6 2e       	mov	r12, r22
     516:	d7 2e       	mov	r13, r23
     518:	e8 2e       	mov	r14, r24
     51a:	f9 2e       	mov	r15, r25
     51c:	28 2d       	mov	r18, r8
     51e:	39 2d       	mov	r19, r9
     520:	4a 2d       	mov	r20, r10
     522:	5b 2d       	mov	r21, r11
     524:	6c 2d       	mov	r22, r12
     526:	7d 2d       	mov	r23, r13
     528:	8e 2d       	mov	r24, r14
     52a:	9f 2d       	mov	r25, r15
     52c:	01 e0       	ldi	r16, 0x01	; 1
     52e:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     532:	2c 8b       	std	Y+20, r18	; 0x14
     534:	3d 8b       	std	Y+21, r19	; 0x15
     536:	4e 8b       	std	Y+22, r20	; 0x16
     538:	5f 8b       	std	Y+23, r21	; 0x17
     53a:	68 8f       	std	Y+24, r22	; 0x18
     53c:	79 8f       	std	Y+25, r23	; 0x19
     53e:	8a 8f       	std	Y+26, r24	; 0x1a
     540:	9b 8f       	std	Y+27, r25	; 0x1b
     542:	8c 88       	ldd	r8, Y+20	; 0x14
     544:	9d 88       	ldd	r9, Y+21	; 0x15
     546:	ae 88       	ldd	r10, Y+22	; 0x16
     548:	bf 88       	ldd	r11, Y+23	; 0x17
     54a:	c8 8c       	ldd	r12, Y+24	; 0x18
     54c:	d9 8c       	ldd	r13, Y+25	; 0x19
     54e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     550:	fb 8c       	ldd	r15, Y+27	; 0x1b
     552:	28 2d       	mov	r18, r8
     554:	39 2d       	mov	r19, r9
     556:	4a 2d       	mov	r20, r10
     558:	5b 2d       	mov	r21, r11
     55a:	6c 2d       	mov	r22, r12
     55c:	7d 2d       	mov	r23, r13
     55e:	8e 2d       	mov	r24, r14
     560:	9f 2d       	mov	r25, r15
     562:	02 e0       	ldi	r16, 0x02	; 2
     564:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     568:	2c 8f       	std	Y+28, r18	; 0x1c
     56a:	3d 8f       	std	Y+29, r19	; 0x1d
     56c:	4e 8f       	std	Y+30, r20	; 0x1e
     56e:	5f 8f       	std	Y+31, r21	; 0x1f
     570:	68 a3       	std	Y+32, r22	; 0x20
     572:	79 a3       	std	Y+33, r23	; 0x21
     574:	8a a3       	std	Y+34, r24	; 0x22
     576:	9b a3       	std	Y+35, r25	; 0x23
     578:	28 2d       	mov	r18, r8
     57a:	39 2d       	mov	r19, r9
     57c:	4a 2d       	mov	r20, r10
     57e:	5b 2d       	mov	r21, r11
     580:	6c 2d       	mov	r22, r12
     582:	7d 2d       	mov	r23, r13
     584:	8e 2d       	mov	r24, r14
     586:	9f 2d       	mov	r25, r15
     588:	ac 8c       	ldd	r10, Y+28	; 0x1c
     58a:	bd 8c       	ldd	r11, Y+29	; 0x1d
     58c:	ce 8c       	ldd	r12, Y+30	; 0x1e
     58e:	df 8c       	ldd	r13, Y+31	; 0x1f
     590:	e8 a0       	ldd	r14, Y+32	; 0x20
     592:	f9 a0       	ldd	r15, Y+33	; 0x21
     594:	0a a1       	ldd	r16, Y+34	; 0x22
     596:	1b a1       	ldd	r17, Y+35	; 0x23
     598:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     59c:	22 2e       	mov	r2, r18
     59e:	33 2e       	mov	r3, r19
     5a0:	44 2e       	mov	r4, r20
     5a2:	55 2e       	mov	r5, r21
     5a4:	66 2e       	mov	r6, r22
     5a6:	77 2e       	mov	r7, r23
     5a8:	88 2e       	mov	r8, r24
     5aa:	99 2e       	mov	r9, r25
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f6 e0       	ldi	r31, 0x06	; 6
     5b0:	af 2e       	mov	r10, r31
     5b2:	f0 2d       	mov	r31, r0
     5b4:	b1 2c       	mov	r11, r1
     5b6:	c1 2c       	mov	r12, r1
     5b8:	d1 2c       	mov	r13, r1
     5ba:	e1 2c       	mov	r14, r1
     5bc:	f1 2c       	mov	r15, r1
     5be:	00 e0       	ldi	r16, 0x00	; 0
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	22 2d       	mov	r18, r2
     5c4:	33 2d       	mov	r19, r3
     5c6:	44 2d       	mov	r20, r4
     5c8:	55 2d       	mov	r21, r5
     5ca:	66 2d       	mov	r22, r6
     5cc:	77 2d       	mov	r23, r7
     5ce:	88 2d       	mov	r24, r8
     5d0:	99 2d       	mov	r25, r9
     5d2:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     5d6:	22 2e       	mov	r2, r18
     5d8:	33 2e       	mov	r3, r19
     5da:	44 2e       	mov	r4, r20
     5dc:	55 2e       	mov	r5, r21
     5de:	66 2e       	mov	r6, r22
     5e0:	77 2e       	mov	r7, r23
     5e2:	88 2e       	mov	r8, r24
     5e4:	99 2e       	mov	r9, r25
     5e6:	a2 2c       	mov	r10, r2
     5e8:	b3 2c       	mov	r11, r3
     5ea:	c4 2c       	mov	r12, r4
     5ec:	d5 2c       	mov	r13, r5
     5ee:	e6 2c       	mov	r14, r6
     5f0:	f7 2c       	mov	r15, r7
     5f2:	08 2d       	mov	r16, r8
     5f4:	19 2d       	mov	r17, r9
     5f6:	2a 2d       	mov	r18, r10
     5f8:	3b 2d       	mov	r19, r11
     5fa:	4c 2d       	mov	r20, r12
     5fc:	5d 2d       	mov	r21, r13
     5fe:	6e 2d       	mov	r22, r14
     600:	7f 2d       	mov	r23, r15
     602:	80 2f       	mov	r24, r16
     604:	91 2f       	mov	r25, r17
     606:	29 51       	subi	r18, 0x19	; 25
     608:	3c 4f       	sbci	r19, 0xFC	; 252
     60a:	4f 4f       	sbci	r20, 0xFF	; 255
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	6f 4f       	sbci	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	8f 4f       	sbci	r24, 0xFF	; 255
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	a2 2e       	mov	r10, r18
     618:	b3 2e       	mov	r11, r19
     61a:	c4 2e       	mov	r12, r20
     61c:	d5 2e       	mov	r13, r21
     61e:	e6 2e       	mov	r14, r22
     620:	f7 2e       	mov	r15, r23
     622:	08 2f       	mov	r16, r24
     624:	19 2f       	mov	r17, r25
     626:	2a 2d       	mov	r18, r10
     628:	3b 2d       	mov	r19, r11
     62a:	4c 2d       	mov	r20, r12
     62c:	5d 2d       	mov	r21, r13
     62e:	6e 2d       	mov	r22, r14
     630:	7f 2d       	mov	r23, r15
     632:	80 2f       	mov	r24, r16
     634:	91 2f       	mov	r25, r17
     636:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	4a e7       	ldi	r20, 0x7A	; 122
     644:	54 e4       	ldi	r21, 0x44	; 68
     646:	bc 01       	movw	r22, r24
     648:	cd 01       	movw	r24, r26
     64a:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	bc 01       	movw	r22, r24
     654:	cd 01       	movw	r24, r26
     656:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     65a:	a2 2e       	mov	r10, r18
     65c:	b3 2e       	mov	r11, r19
     65e:	c4 2e       	mov	r12, r20
     660:	d5 2e       	mov	r13, r21
     662:	e6 2e       	mov	r14, r22
     664:	f7 2e       	mov	r15, r23
     666:	08 2f       	mov	r16, r24
     668:	19 2f       	mov	r17, r25
     66a:	d6 01       	movw	r26, r12
     66c:	c5 01       	movw	r24, r10
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	35 de       	rcall	.-918    	; 0x2de <__portable_avr_delay_cycles>
	
	acelx=(int16_t)data;
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	9a 83       	std	Y+2, r25	; 0x02
	
	acelx=acelx<<8;
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	98 2f       	mov	r25, r24
     684:	88 27       	eor	r24, r24
     686:	89 83       	std	Y+1, r24	; 0x01
	
	
	data = 0xff;
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	8f ef       	ldi	r24, 0xFF	; 255
	delay_ms(10);
     68c:	8b 83       	std	Y+3, r24	; 0x03
     68e:	1b de       	rcall	.-970    	; 0x2c6 <sysclk_get_cpu_hz>
     690:	dc 01       	movw	r26, r24
     692:	cb 01       	movw	r24, r22
     694:	9c 01       	movw	r18, r24
     696:	ad 01       	movw	r20, r26
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	cb 01       	movw	r24, r22
     69e:	82 2e       	mov	r8, r18
     6a0:	93 2e       	mov	r9, r19
     6a2:	a4 2e       	mov	r10, r20
     6a4:	b5 2e       	mov	r11, r21
     6a6:	c6 2e       	mov	r12, r22
     6a8:	d7 2e       	mov	r13, r23
     6aa:	e8 2e       	mov	r14, r24
     6ac:	f9 2e       	mov	r15, r25
     6ae:	28 2d       	mov	r18, r8
     6b0:	39 2d       	mov	r19, r9
     6b2:	4a 2d       	mov	r20, r10
     6b4:	5b 2d       	mov	r21, r11
     6b6:	6c 2d       	mov	r22, r12
     6b8:	7d 2d       	mov	r23, r13
     6ba:	8e 2d       	mov	r24, r14
     6bc:	9f 2d       	mov	r25, r15
     6be:	01 e0       	ldi	r16, 0x01	; 1
     6c0:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     6c4:	2c a3       	std	Y+36, r18	; 0x24
     6c6:	3d a3       	std	Y+37, r19	; 0x25
     6c8:	4e a3       	std	Y+38, r20	; 0x26
     6ca:	5f a3       	std	Y+39, r21	; 0x27
     6cc:	68 a7       	std	Y+40, r22	; 0x28
     6ce:	79 a7       	std	Y+41, r23	; 0x29
     6d0:	8a a7       	std	Y+42, r24	; 0x2a
     6d2:	9b a7       	std	Y+43, r25	; 0x2b
     6d4:	8c a0       	ldd	r8, Y+36	; 0x24
     6d6:	9d a0       	ldd	r9, Y+37	; 0x25
     6d8:	ae a0       	ldd	r10, Y+38	; 0x26
     6da:	bf a0       	ldd	r11, Y+39	; 0x27
     6dc:	c8 a4       	ldd	r12, Y+40	; 0x28
     6de:	d9 a4       	ldd	r13, Y+41	; 0x29
     6e0:	ea a4       	ldd	r14, Y+42	; 0x2a
     6e2:	fb a4       	ldd	r15, Y+43	; 0x2b
     6e4:	28 2d       	mov	r18, r8
     6e6:	39 2d       	mov	r19, r9
     6e8:	4a 2d       	mov	r20, r10
     6ea:	5b 2d       	mov	r21, r11
     6ec:	6c 2d       	mov	r22, r12
     6ee:	7d 2d       	mov	r23, r13
     6f0:	8e 2d       	mov	r24, r14
     6f2:	9f 2d       	mov	r25, r15
     6f4:	02 e0       	ldi	r16, 0x02	; 2
     6f6:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     6fa:	2c a7       	std	Y+44, r18	; 0x2c
     6fc:	3d a7       	std	Y+45, r19	; 0x2d
     6fe:	4e a7       	std	Y+46, r20	; 0x2e
     700:	5f a7       	std	Y+47, r21	; 0x2f
     702:	68 ab       	std	Y+48, r22	; 0x30
     704:	79 ab       	std	Y+49, r23	; 0x31
     706:	8a ab       	std	Y+50, r24	; 0x32
     708:	9b ab       	std	Y+51, r25	; 0x33
     70a:	28 2d       	mov	r18, r8
     70c:	39 2d       	mov	r19, r9
     70e:	4a 2d       	mov	r20, r10
     710:	5b 2d       	mov	r21, r11
     712:	6c 2d       	mov	r22, r12
     714:	7d 2d       	mov	r23, r13
     716:	8e 2d       	mov	r24, r14
     718:	9f 2d       	mov	r25, r15
     71a:	ac a4       	ldd	r10, Y+44	; 0x2c
     71c:	bd a4       	ldd	r11, Y+45	; 0x2d
     71e:	ce a4       	ldd	r12, Y+46	; 0x2e
     720:	df a4       	ldd	r13, Y+47	; 0x2f
     722:	e8 a8       	ldd	r14, Y+48	; 0x30
     724:	f9 a8       	ldd	r15, Y+49	; 0x31
     726:	0a a9       	ldd	r16, Y+50	; 0x32
     728:	1b a9       	ldd	r17, Y+51	; 0x33
     72a:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     72e:	22 2e       	mov	r2, r18
     730:	33 2e       	mov	r3, r19
     732:	44 2e       	mov	r4, r20
     734:	55 2e       	mov	r5, r21
     736:	66 2e       	mov	r6, r22
     738:	77 2e       	mov	r7, r23
     73a:	88 2e       	mov	r8, r24
     73c:	99 2e       	mov	r9, r25
     73e:	0f 2e       	mov	r0, r31
     740:	f6 e0       	ldi	r31, 0x06	; 6
     742:	af 2e       	mov	r10, r31
     744:	f0 2d       	mov	r31, r0
     746:	b1 2c       	mov	r11, r1
     748:	c1 2c       	mov	r12, r1
     74a:	d1 2c       	mov	r13, r1
     74c:	e1 2c       	mov	r14, r1
     74e:	f1 2c       	mov	r15, r1
     750:	00 e0       	ldi	r16, 0x00	; 0
     752:	10 e0       	ldi	r17, 0x00	; 0
     754:	22 2d       	mov	r18, r2
     756:	33 2d       	mov	r19, r3
     758:	44 2d       	mov	r20, r4
     75a:	55 2d       	mov	r21, r5
     75c:	66 2d       	mov	r22, r6
     75e:	77 2d       	mov	r23, r7
     760:	88 2d       	mov	r24, r8
     762:	99 2d       	mov	r25, r9
     764:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     768:	22 2e       	mov	r2, r18
     76a:	33 2e       	mov	r3, r19
     76c:	44 2e       	mov	r4, r20
     76e:	55 2e       	mov	r5, r21
     770:	66 2e       	mov	r6, r22
     772:	77 2e       	mov	r7, r23
     774:	88 2e       	mov	r8, r24
     776:	99 2e       	mov	r9, r25
     778:	a2 2c       	mov	r10, r2
     77a:	b3 2c       	mov	r11, r3
     77c:	c4 2c       	mov	r12, r4
     77e:	d5 2c       	mov	r13, r5
     780:	e6 2c       	mov	r14, r6
     782:	f7 2c       	mov	r15, r7
     784:	08 2d       	mov	r16, r8
     786:	19 2d       	mov	r17, r9
     788:	2a 2d       	mov	r18, r10
     78a:	3b 2d       	mov	r19, r11
     78c:	4c 2d       	mov	r20, r12
     78e:	5d 2d       	mov	r21, r13
     790:	6e 2d       	mov	r22, r14
     792:	7f 2d       	mov	r23, r15
     794:	80 2f       	mov	r24, r16
     796:	91 2f       	mov	r25, r17
     798:	29 51       	subi	r18, 0x19	; 25
     79a:	3c 4f       	sbci	r19, 0xFC	; 252
     79c:	4f 4f       	sbci	r20, 0xFF	; 255
     79e:	5f 4f       	sbci	r21, 0xFF	; 255
     7a0:	6f 4f       	sbci	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	9f 4f       	sbci	r25, 0xFF	; 255
     7a8:	a2 2e       	mov	r10, r18
     7aa:	b3 2e       	mov	r11, r19
     7ac:	c4 2e       	mov	r12, r20
     7ae:	d5 2e       	mov	r13, r21
     7b0:	e6 2e       	mov	r14, r22
     7b2:	f7 2e       	mov	r15, r23
     7b4:	08 2f       	mov	r16, r24
     7b6:	19 2f       	mov	r17, r25
     7b8:	2a 2d       	mov	r18, r10
     7ba:	3b 2d       	mov	r19, r11
     7bc:	4c 2d       	mov	r20, r12
     7be:	5d 2d       	mov	r21, r13
     7c0:	6e 2d       	mov	r22, r14
     7c2:	7f 2d       	mov	r23, r15
     7c4:	80 2f       	mov	r24, r16
     7c6:	91 2f       	mov	r25, r17
     7c8:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	4a e7       	ldi	r20, 0x7A	; 122
     7d6:	54 e4       	ldi	r21, 0x44	; 68
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     7ec:	a2 2e       	mov	r10, r18
     7ee:	b3 2e       	mov	r11, r19
     7f0:	c4 2e       	mov	r12, r20
     7f2:	d5 2e       	mov	r13, r21
     7f4:	e6 2e       	mov	r14, r22
     7f6:	f7 2e       	mov	r15, r23
     7f8:	08 2f       	mov	r16, r24
     7fa:	19 2f       	mov	r17, r25
     7fc:	d6 01       	movw	r26, r12
     7fe:	c5 01       	movw	r24, r10
     800:	bc 01       	movw	r22, r24
	BNO_Read(&data,BNO055_ACCEL_DATA_X_LSB_ADDR);
     802:	cd 01       	movw	r24, r26
     804:	6c dd       	rcall	.-1320   	; 0x2de <__portable_avr_delay_cycles>
     806:	ce 01       	movw	r24, r28
     808:	03 96       	adiw	r24, 0x03	; 3
     80a:	68 e0       	ldi	r22, 0x08	; 8
	delay_ms(10);
     80c:	88 dd       	rcall	.-1264   	; 0x31e <BNO_Read>
     80e:	5b dd       	rcall	.-1354   	; 0x2c6 <sysclk_get_cpu_hz>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	9c 01       	movw	r18, r24
     816:	ad 01       	movw	r20, r26
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	cb 01       	movw	r24, r22
     81e:	82 2e       	mov	r8, r18
     820:	93 2e       	mov	r9, r19
     822:	a4 2e       	mov	r10, r20
     824:	b5 2e       	mov	r11, r21
     826:	c6 2e       	mov	r12, r22
     828:	d7 2e       	mov	r13, r23
     82a:	e8 2e       	mov	r14, r24
     82c:	f9 2e       	mov	r15, r25
     82e:	28 2d       	mov	r18, r8
     830:	39 2d       	mov	r19, r9
     832:	4a 2d       	mov	r20, r10
     834:	5b 2d       	mov	r21, r11
     836:	6c 2d       	mov	r22, r12
     838:	7d 2d       	mov	r23, r13
     83a:	8e 2d       	mov	r24, r14
     83c:	9f 2d       	mov	r25, r15
     83e:	01 e0       	ldi	r16, 0x01	; 1
     840:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     844:	2c ab       	std	Y+52, r18	; 0x34
     846:	3d ab       	std	Y+53, r19	; 0x35
     848:	4e ab       	std	Y+54, r20	; 0x36
     84a:	5f ab       	std	Y+55, r21	; 0x37
     84c:	68 af       	std	Y+56, r22	; 0x38
     84e:	79 af       	std	Y+57, r23	; 0x39
     850:	8a af       	std	Y+58, r24	; 0x3a
     852:	9b af       	std	Y+59, r25	; 0x3b
     854:	8c a8       	ldd	r8, Y+52	; 0x34
     856:	9d a8       	ldd	r9, Y+53	; 0x35
     858:	ae a8       	ldd	r10, Y+54	; 0x36
     85a:	bf a8       	ldd	r11, Y+55	; 0x37
     85c:	c8 ac       	ldd	r12, Y+56	; 0x38
     85e:	d9 ac       	ldd	r13, Y+57	; 0x39
     860:	ea ac       	ldd	r14, Y+58	; 0x3a
     862:	fb ac       	ldd	r15, Y+59	; 0x3b
     864:	28 2d       	mov	r18, r8
     866:	39 2d       	mov	r19, r9
     868:	4a 2d       	mov	r20, r10
     86a:	5b 2d       	mov	r21, r11
     86c:	6c 2d       	mov	r22, r12
     86e:	7d 2d       	mov	r23, r13
     870:	8e 2d       	mov	r24, r14
     872:	9f 2d       	mov	r25, r15
     874:	02 e0       	ldi	r16, 0x02	; 2
     876:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     87a:	2c af       	std	Y+60, r18	; 0x3c
     87c:	3d af       	std	Y+61, r19	; 0x3d
     87e:	4e af       	std	Y+62, r20	; 0x3e
     880:	5f af       	std	Y+63, r21	; 0x3f
     882:	21 96       	adiw	r28, 0x01	; 1
     884:	6f af       	std	Y+63, r22	; 0x3f
     886:	21 97       	sbiw	r28, 0x01	; 1
     888:	22 96       	adiw	r28, 0x02	; 2
     88a:	7f af       	std	Y+63, r23	; 0x3f
     88c:	22 97       	sbiw	r28, 0x02	; 2
     88e:	23 96       	adiw	r28, 0x03	; 3
     890:	8f af       	std	Y+63, r24	; 0x3f
     892:	23 97       	sbiw	r28, 0x03	; 3
     894:	24 96       	adiw	r28, 0x04	; 4
     896:	9f af       	std	Y+63, r25	; 0x3f
     898:	24 97       	sbiw	r28, 0x04	; 4
     89a:	28 2d       	mov	r18, r8
     89c:	39 2d       	mov	r19, r9
     89e:	4a 2d       	mov	r20, r10
     8a0:	5b 2d       	mov	r21, r11
     8a2:	6c 2d       	mov	r22, r12
     8a4:	7d 2d       	mov	r23, r13
     8a6:	8e 2d       	mov	r24, r14
     8a8:	9f 2d       	mov	r25, r15
     8aa:	ac ac       	ldd	r10, Y+60	; 0x3c
     8ac:	bd ac       	ldd	r11, Y+61	; 0x3d
     8ae:	ce ac       	ldd	r12, Y+62	; 0x3e
     8b0:	df ac       	ldd	r13, Y+63	; 0x3f
     8b2:	21 96       	adiw	r28, 0x01	; 1
     8b4:	ef ac       	ldd	r14, Y+63	; 0x3f
     8b6:	21 97       	sbiw	r28, 0x01	; 1
     8b8:	22 96       	adiw	r28, 0x02	; 2
     8ba:	ff ac       	ldd	r15, Y+63	; 0x3f
     8bc:	22 97       	sbiw	r28, 0x02	; 2
     8be:	23 96       	adiw	r28, 0x03	; 3
     8c0:	0f ad       	ldd	r16, Y+63	; 0x3f
     8c2:	23 97       	sbiw	r28, 0x03	; 3
     8c4:	24 96       	adiw	r28, 0x04	; 4
     8c6:	1f ad       	ldd	r17, Y+63	; 0x3f
     8c8:	24 97       	sbiw	r28, 0x04	; 4
     8ca:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     8ce:	22 2e       	mov	r2, r18
     8d0:	33 2e       	mov	r3, r19
     8d2:	44 2e       	mov	r4, r20
     8d4:	55 2e       	mov	r5, r21
     8d6:	66 2e       	mov	r6, r22
     8d8:	77 2e       	mov	r7, r23
     8da:	88 2e       	mov	r8, r24
     8dc:	99 2e       	mov	r9, r25
     8de:	0f 2e       	mov	r0, r31
     8e0:	f6 e0       	ldi	r31, 0x06	; 6
     8e2:	af 2e       	mov	r10, r31
     8e4:	f0 2d       	mov	r31, r0
     8e6:	b1 2c       	mov	r11, r1
     8e8:	c1 2c       	mov	r12, r1
     8ea:	d1 2c       	mov	r13, r1
     8ec:	e1 2c       	mov	r14, r1
     8ee:	f1 2c       	mov	r15, r1
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
     8f4:	22 2d       	mov	r18, r2
     8f6:	33 2d       	mov	r19, r3
     8f8:	44 2d       	mov	r20, r4
     8fa:	55 2d       	mov	r21, r5
     8fc:	66 2d       	mov	r22, r6
     8fe:	77 2d       	mov	r23, r7
     900:	88 2d       	mov	r24, r8
     902:	99 2d       	mov	r25, r9
     904:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     908:	22 2e       	mov	r2, r18
     90a:	33 2e       	mov	r3, r19
     90c:	44 2e       	mov	r4, r20
     90e:	55 2e       	mov	r5, r21
     910:	66 2e       	mov	r6, r22
     912:	77 2e       	mov	r7, r23
     914:	88 2e       	mov	r8, r24
     916:	99 2e       	mov	r9, r25
     918:	a2 2c       	mov	r10, r2
     91a:	b3 2c       	mov	r11, r3
     91c:	c4 2c       	mov	r12, r4
     91e:	d5 2c       	mov	r13, r5
     920:	e6 2c       	mov	r14, r6
     922:	f7 2c       	mov	r15, r7
     924:	08 2d       	mov	r16, r8
     926:	19 2d       	mov	r17, r9
     928:	2a 2d       	mov	r18, r10
     92a:	3b 2d       	mov	r19, r11
     92c:	4c 2d       	mov	r20, r12
     92e:	5d 2d       	mov	r21, r13
     930:	6e 2d       	mov	r22, r14
     932:	7f 2d       	mov	r23, r15
     934:	80 2f       	mov	r24, r16
     936:	91 2f       	mov	r25, r17
     938:	29 51       	subi	r18, 0x19	; 25
     93a:	3c 4f       	sbci	r19, 0xFC	; 252
     93c:	4f 4f       	sbci	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	6f 4f       	sbci	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	8f 4f       	sbci	r24, 0xFF	; 255
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	a2 2e       	mov	r10, r18
     94a:	b3 2e       	mov	r11, r19
     94c:	c4 2e       	mov	r12, r20
     94e:	d5 2e       	mov	r13, r21
     950:	e6 2e       	mov	r14, r22
     952:	f7 2e       	mov	r15, r23
     954:	08 2f       	mov	r16, r24
     956:	19 2f       	mov	r17, r25
     958:	2a 2d       	mov	r18, r10
     95a:	3b 2d       	mov	r19, r11
     95c:	4c 2d       	mov	r20, r12
     95e:	5d 2d       	mov	r21, r13
     960:	6e 2d       	mov	r22, r14
     962:	7f 2d       	mov	r23, r15
     964:	80 2f       	mov	r24, r16
     966:	91 2f       	mov	r25, r17
     968:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	4a e7       	ldi	r20, 0x7A	; 122
     976:	54 e4       	ldi	r21, 0x44	; 68
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     98c:	a2 2e       	mov	r10, r18
     98e:	b3 2e       	mov	r11, r19
     990:	c4 2e       	mov	r12, r20
     992:	d5 2e       	mov	r13, r21
     994:	e6 2e       	mov	r14, r22
     996:	f7 2e       	mov	r15, r23
     998:	08 2f       	mov	r16, r24
     99a:	19 2f       	mov	r17, r25
     99c:	d6 01       	movw	r26, r12
     99e:	c5 01       	movw	r24, r10
     9a0:	bc 01       	movw	r22, r24
     9a2:	cd 01       	movw	r24, r26
     9a4:	9c dc       	rcall	.-1736   	; 0x2de <__portable_avr_delay_cycles>

	acelx+=data;
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	29 81       	ldd	r18, Y+1	; 0x01
     9ae:	3a 81       	ldd	r19, Y+2	; 0x02
     9b0:	82 0f       	add	r24, r18
     9b2:	93 1f       	adc	r25, r19
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	9a 83       	std	Y+2, r25	; 0x02
	return acelx;
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9bc:	cd 5b       	subi	r28, 0xBD	; 189
     9be:	df 4f       	sbci	r29, 0xFF	; 255
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	3f 90       	pop	r3
     9e6:	2f 90       	pop	r2
     9e8:	08 95       	ret

000009ea <get_acceleration_y>:

uint16_t get_acceleration_y()
{
     9ea:	2f 92       	push	r2
     9ec:	3f 92       	push	r3
     9ee:	4f 92       	push	r4
     9f0:	5f 92       	push	r5
     9f2:	6f 92       	push	r6
     9f4:	7f 92       	push	r7
     9f6:	8f 92       	push	r8
     9f8:	9f 92       	push	r9
     9fa:	af 92       	push	r10
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	c3 54       	subi	r28, 0x43	; 67
     a14:	d1 09       	sbc	r29, r1
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	de bf       	out	0x3e, r29	; 62
	uint16_t acely;
	uint8_t data = 0xff;
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	8b 83       	std	Y+3, r24	; 0x03
	delay_ms(10);
     a1e:	53 dc       	rcall	.-1882   	; 0x2c6 <sysclk_get_cpu_hz>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	9c 01       	movw	r18, r24
     a26:	ad 01       	movw	r20, r26
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	cb 01       	movw	r24, r22
     a2e:	82 2e       	mov	r8, r18
     a30:	93 2e       	mov	r9, r19
     a32:	a4 2e       	mov	r10, r20
     a34:	b5 2e       	mov	r11, r21
     a36:	c6 2e       	mov	r12, r22
     a38:	d7 2e       	mov	r13, r23
     a3a:	e8 2e       	mov	r14, r24
     a3c:	f9 2e       	mov	r15, r25
     a3e:	28 2d       	mov	r18, r8
     a40:	39 2d       	mov	r19, r9
     a42:	4a 2d       	mov	r20, r10
     a44:	5b 2d       	mov	r21, r11
     a46:	6c 2d       	mov	r22, r12
     a48:	7d 2d       	mov	r23, r13
     a4a:	8e 2d       	mov	r24, r14
     a4c:	9f 2d       	mov	r25, r15
     a4e:	01 e0       	ldi	r16, 0x01	; 1
     a50:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     a54:	2c 83       	std	Y+4, r18	; 0x04
     a56:	3d 83       	std	Y+5, r19	; 0x05
     a58:	4e 83       	std	Y+6, r20	; 0x06
     a5a:	5f 83       	std	Y+7, r21	; 0x07
     a5c:	68 87       	std	Y+8, r22	; 0x08
     a5e:	79 87       	std	Y+9, r23	; 0x09
     a60:	8a 87       	std	Y+10, r24	; 0x0a
     a62:	9b 87       	std	Y+11, r25	; 0x0b
     a64:	8c 80       	ldd	r8, Y+4	; 0x04
     a66:	9d 80       	ldd	r9, Y+5	; 0x05
     a68:	ae 80       	ldd	r10, Y+6	; 0x06
     a6a:	bf 80       	ldd	r11, Y+7	; 0x07
     a6c:	c8 84       	ldd	r12, Y+8	; 0x08
     a6e:	d9 84       	ldd	r13, Y+9	; 0x09
     a70:	ea 84       	ldd	r14, Y+10	; 0x0a
     a72:	fb 84       	ldd	r15, Y+11	; 0x0b
     a74:	28 2d       	mov	r18, r8
     a76:	39 2d       	mov	r19, r9
     a78:	4a 2d       	mov	r20, r10
     a7a:	5b 2d       	mov	r21, r11
     a7c:	6c 2d       	mov	r22, r12
     a7e:	7d 2d       	mov	r23, r13
     a80:	8e 2d       	mov	r24, r14
     a82:	9f 2d       	mov	r25, r15
     a84:	02 e0       	ldi	r16, 0x02	; 2
     a86:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     a8a:	2c 87       	std	Y+12, r18	; 0x0c
     a8c:	3d 87       	std	Y+13, r19	; 0x0d
     a8e:	4e 87       	std	Y+14, r20	; 0x0e
     a90:	5f 87       	std	Y+15, r21	; 0x0f
     a92:	68 8b       	std	Y+16, r22	; 0x10
     a94:	79 8b       	std	Y+17, r23	; 0x11
     a96:	8a 8b       	std	Y+18, r24	; 0x12
     a98:	9b 8b       	std	Y+19, r25	; 0x13
     a9a:	28 2d       	mov	r18, r8
     a9c:	39 2d       	mov	r19, r9
     a9e:	4a 2d       	mov	r20, r10
     aa0:	5b 2d       	mov	r21, r11
     aa2:	6c 2d       	mov	r22, r12
     aa4:	7d 2d       	mov	r23, r13
     aa6:	8e 2d       	mov	r24, r14
     aa8:	9f 2d       	mov	r25, r15
     aaa:	ac 84       	ldd	r10, Y+12	; 0x0c
     aac:	bd 84       	ldd	r11, Y+13	; 0x0d
     aae:	ce 84       	ldd	r12, Y+14	; 0x0e
     ab0:	df 84       	ldd	r13, Y+15	; 0x0f
     ab2:	e8 88       	ldd	r14, Y+16	; 0x10
     ab4:	f9 88       	ldd	r15, Y+17	; 0x11
     ab6:	0a 89       	ldd	r16, Y+18	; 0x12
     ab8:	1b 89       	ldd	r17, Y+19	; 0x13
     aba:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     abe:	22 2e       	mov	r2, r18
     ac0:	33 2e       	mov	r3, r19
     ac2:	44 2e       	mov	r4, r20
     ac4:	55 2e       	mov	r5, r21
     ac6:	66 2e       	mov	r6, r22
     ac8:	77 2e       	mov	r7, r23
     aca:	88 2e       	mov	r8, r24
     acc:	99 2e       	mov	r9, r25
     ace:	0f 2e       	mov	r0, r31
     ad0:	f6 e0       	ldi	r31, 0x06	; 6
     ad2:	af 2e       	mov	r10, r31
     ad4:	f0 2d       	mov	r31, r0
     ad6:	b1 2c       	mov	r11, r1
     ad8:	c1 2c       	mov	r12, r1
     ada:	d1 2c       	mov	r13, r1
     adc:	e1 2c       	mov	r14, r1
     ade:	f1 2c       	mov	r15, r1
     ae0:	00 e0       	ldi	r16, 0x00	; 0
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	22 2d       	mov	r18, r2
     ae6:	33 2d       	mov	r19, r3
     ae8:	44 2d       	mov	r20, r4
     aea:	55 2d       	mov	r21, r5
     aec:	66 2d       	mov	r22, r6
     aee:	77 2d       	mov	r23, r7
     af0:	88 2d       	mov	r24, r8
     af2:	99 2d       	mov	r25, r9
     af4:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     af8:	22 2e       	mov	r2, r18
     afa:	33 2e       	mov	r3, r19
     afc:	44 2e       	mov	r4, r20
     afe:	55 2e       	mov	r5, r21
     b00:	66 2e       	mov	r6, r22
     b02:	77 2e       	mov	r7, r23
     b04:	88 2e       	mov	r8, r24
     b06:	99 2e       	mov	r9, r25
     b08:	a2 2c       	mov	r10, r2
     b0a:	b3 2c       	mov	r11, r3
     b0c:	c4 2c       	mov	r12, r4
     b0e:	d5 2c       	mov	r13, r5
     b10:	e6 2c       	mov	r14, r6
     b12:	f7 2c       	mov	r15, r7
     b14:	08 2d       	mov	r16, r8
     b16:	19 2d       	mov	r17, r9
     b18:	2a 2d       	mov	r18, r10
     b1a:	3b 2d       	mov	r19, r11
     b1c:	4c 2d       	mov	r20, r12
     b1e:	5d 2d       	mov	r21, r13
     b20:	6e 2d       	mov	r22, r14
     b22:	7f 2d       	mov	r23, r15
     b24:	80 2f       	mov	r24, r16
     b26:	91 2f       	mov	r25, r17
     b28:	29 51       	subi	r18, 0x19	; 25
     b2a:	3c 4f       	sbci	r19, 0xFC	; 252
     b2c:	4f 4f       	sbci	r20, 0xFF	; 255
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	6f 4f       	sbci	r22, 0xFF	; 255
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	8f 4f       	sbci	r24, 0xFF	; 255
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	a2 2e       	mov	r10, r18
     b3a:	b3 2e       	mov	r11, r19
     b3c:	c4 2e       	mov	r12, r20
     b3e:	d5 2e       	mov	r13, r21
     b40:	e6 2e       	mov	r14, r22
     b42:	f7 2e       	mov	r15, r23
     b44:	08 2f       	mov	r16, r24
     b46:	19 2f       	mov	r17, r25
     b48:	2a 2d       	mov	r18, r10
     b4a:	3b 2d       	mov	r19, r11
     b4c:	4c 2d       	mov	r20, r12
     b4e:	5d 2d       	mov	r21, r13
     b50:	6e 2d       	mov	r22, r14
     b52:	7f 2d       	mov	r23, r15
     b54:	80 2f       	mov	r24, r16
     b56:	91 2f       	mov	r25, r17
     b58:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	4a e7       	ldi	r20, 0x7A	; 122
     b66:	54 e4       	ldi	r21, 0x44	; 68
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	bc 01       	movw	r22, r24
     b76:	cd 01       	movw	r24, r26
     b78:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     b7c:	a2 2e       	mov	r10, r18
     b7e:	b3 2e       	mov	r11, r19
     b80:	c4 2e       	mov	r12, r20
     b82:	d5 2e       	mov	r13, r21
     b84:	e6 2e       	mov	r14, r22
     b86:	f7 2e       	mov	r15, r23
     b88:	08 2f       	mov	r16, r24
     b8a:	19 2f       	mov	r17, r25
     b8c:	d6 01       	movw	r26, r12
     b8e:	c5 01       	movw	r24, r10
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	a4 db       	rcall	.-2232   	; 0x2de <__portable_avr_delay_cycles>
	BNO_Read(&data,BNO055_ACCEL_DATA_Y_MSB_ADDR);
     b96:	ce 01       	movw	r24, r28
     b98:	03 96       	adiw	r24, 0x03	; 3
     b9a:	6b e0       	ldi	r22, 0x0B	; 11
	delay_ms(10);
     b9c:	c0 db       	rcall	.-2176   	; 0x31e <BNO_Read>
     b9e:	93 db       	rcall	.-2266   	; 0x2c6 <sysclk_get_cpu_hz>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	9c 01       	movw	r18, r24
     ba6:	ad 01       	movw	r20, r26
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	cb 01       	movw	r24, r22
     bae:	82 2e       	mov	r8, r18
     bb0:	93 2e       	mov	r9, r19
     bb2:	a4 2e       	mov	r10, r20
     bb4:	b5 2e       	mov	r11, r21
     bb6:	c6 2e       	mov	r12, r22
     bb8:	d7 2e       	mov	r13, r23
     bba:	e8 2e       	mov	r14, r24
     bbc:	f9 2e       	mov	r15, r25
     bbe:	28 2d       	mov	r18, r8
     bc0:	39 2d       	mov	r19, r9
     bc2:	4a 2d       	mov	r20, r10
     bc4:	5b 2d       	mov	r21, r11
     bc6:	6c 2d       	mov	r22, r12
     bc8:	7d 2d       	mov	r23, r13
     bca:	8e 2d       	mov	r24, r14
     bcc:	9f 2d       	mov	r25, r15
     bce:	01 e0       	ldi	r16, 0x01	; 1
     bd0:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     bd4:	2c 8b       	std	Y+20, r18	; 0x14
     bd6:	3d 8b       	std	Y+21, r19	; 0x15
     bd8:	4e 8b       	std	Y+22, r20	; 0x16
     bda:	5f 8b       	std	Y+23, r21	; 0x17
     bdc:	68 8f       	std	Y+24, r22	; 0x18
     bde:	79 8f       	std	Y+25, r23	; 0x19
     be0:	8a 8f       	std	Y+26, r24	; 0x1a
     be2:	9b 8f       	std	Y+27, r25	; 0x1b
     be4:	8c 88       	ldd	r8, Y+20	; 0x14
     be6:	9d 88       	ldd	r9, Y+21	; 0x15
     be8:	ae 88       	ldd	r10, Y+22	; 0x16
     bea:	bf 88       	ldd	r11, Y+23	; 0x17
     bec:	c8 8c       	ldd	r12, Y+24	; 0x18
     bee:	d9 8c       	ldd	r13, Y+25	; 0x19
     bf0:	ea 8c       	ldd	r14, Y+26	; 0x1a
     bf2:	fb 8c       	ldd	r15, Y+27	; 0x1b
     bf4:	28 2d       	mov	r18, r8
     bf6:	39 2d       	mov	r19, r9
     bf8:	4a 2d       	mov	r20, r10
     bfa:	5b 2d       	mov	r21, r11
     bfc:	6c 2d       	mov	r22, r12
     bfe:	7d 2d       	mov	r23, r13
     c00:	8e 2d       	mov	r24, r14
     c02:	9f 2d       	mov	r25, r15
     c04:	02 e0       	ldi	r16, 0x02	; 2
     c06:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     c0a:	2c 8f       	std	Y+28, r18	; 0x1c
     c0c:	3d 8f       	std	Y+29, r19	; 0x1d
     c0e:	4e 8f       	std	Y+30, r20	; 0x1e
     c10:	5f 8f       	std	Y+31, r21	; 0x1f
     c12:	68 a3       	std	Y+32, r22	; 0x20
     c14:	79 a3       	std	Y+33, r23	; 0x21
     c16:	8a a3       	std	Y+34, r24	; 0x22
     c18:	9b a3       	std	Y+35, r25	; 0x23
     c1a:	28 2d       	mov	r18, r8
     c1c:	39 2d       	mov	r19, r9
     c1e:	4a 2d       	mov	r20, r10
     c20:	5b 2d       	mov	r21, r11
     c22:	6c 2d       	mov	r22, r12
     c24:	7d 2d       	mov	r23, r13
     c26:	8e 2d       	mov	r24, r14
     c28:	9f 2d       	mov	r25, r15
     c2a:	ac 8c       	ldd	r10, Y+28	; 0x1c
     c2c:	bd 8c       	ldd	r11, Y+29	; 0x1d
     c2e:	ce 8c       	ldd	r12, Y+30	; 0x1e
     c30:	df 8c       	ldd	r13, Y+31	; 0x1f
     c32:	e8 a0       	ldd	r14, Y+32	; 0x20
     c34:	f9 a0       	ldd	r15, Y+33	; 0x21
     c36:	0a a1       	ldd	r16, Y+34	; 0x22
     c38:	1b a1       	ldd	r17, Y+35	; 0x23
     c3a:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     c3e:	22 2e       	mov	r2, r18
     c40:	33 2e       	mov	r3, r19
     c42:	44 2e       	mov	r4, r20
     c44:	55 2e       	mov	r5, r21
     c46:	66 2e       	mov	r6, r22
     c48:	77 2e       	mov	r7, r23
     c4a:	88 2e       	mov	r8, r24
     c4c:	99 2e       	mov	r9, r25
     c4e:	0f 2e       	mov	r0, r31
     c50:	f6 e0       	ldi	r31, 0x06	; 6
     c52:	af 2e       	mov	r10, r31
     c54:	f0 2d       	mov	r31, r0
     c56:	b1 2c       	mov	r11, r1
     c58:	c1 2c       	mov	r12, r1
     c5a:	d1 2c       	mov	r13, r1
     c5c:	e1 2c       	mov	r14, r1
     c5e:	f1 2c       	mov	r15, r1
     c60:	00 e0       	ldi	r16, 0x00	; 0
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	22 2d       	mov	r18, r2
     c66:	33 2d       	mov	r19, r3
     c68:	44 2d       	mov	r20, r4
     c6a:	55 2d       	mov	r21, r5
     c6c:	66 2d       	mov	r22, r6
     c6e:	77 2d       	mov	r23, r7
     c70:	88 2d       	mov	r24, r8
     c72:	99 2d       	mov	r25, r9
     c74:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     c78:	22 2e       	mov	r2, r18
     c7a:	33 2e       	mov	r3, r19
     c7c:	44 2e       	mov	r4, r20
     c7e:	55 2e       	mov	r5, r21
     c80:	66 2e       	mov	r6, r22
     c82:	77 2e       	mov	r7, r23
     c84:	88 2e       	mov	r8, r24
     c86:	99 2e       	mov	r9, r25
     c88:	a2 2c       	mov	r10, r2
     c8a:	b3 2c       	mov	r11, r3
     c8c:	c4 2c       	mov	r12, r4
     c8e:	d5 2c       	mov	r13, r5
     c90:	e6 2c       	mov	r14, r6
     c92:	f7 2c       	mov	r15, r7
     c94:	08 2d       	mov	r16, r8
     c96:	19 2d       	mov	r17, r9
     c98:	2a 2d       	mov	r18, r10
     c9a:	3b 2d       	mov	r19, r11
     c9c:	4c 2d       	mov	r20, r12
     c9e:	5d 2d       	mov	r21, r13
     ca0:	6e 2d       	mov	r22, r14
     ca2:	7f 2d       	mov	r23, r15
     ca4:	80 2f       	mov	r24, r16
     ca6:	91 2f       	mov	r25, r17
     ca8:	29 51       	subi	r18, 0x19	; 25
     caa:	3c 4f       	sbci	r19, 0xFC	; 252
     cac:	4f 4f       	sbci	r20, 0xFF	; 255
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	6f 4f       	sbci	r22, 0xFF	; 255
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	8f 4f       	sbci	r24, 0xFF	; 255
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	a2 2e       	mov	r10, r18
     cba:	b3 2e       	mov	r11, r19
     cbc:	c4 2e       	mov	r12, r20
     cbe:	d5 2e       	mov	r13, r21
     cc0:	e6 2e       	mov	r14, r22
     cc2:	f7 2e       	mov	r15, r23
     cc4:	08 2f       	mov	r16, r24
     cc6:	19 2f       	mov	r17, r25
     cc8:	2a 2d       	mov	r18, r10
     cca:	3b 2d       	mov	r19, r11
     ccc:	4c 2d       	mov	r20, r12
     cce:	5d 2d       	mov	r21, r13
     cd0:	6e 2d       	mov	r22, r14
     cd2:	7f 2d       	mov	r23, r15
     cd4:	80 2f       	mov	r24, r16
     cd6:	91 2f       	mov	r25, r17
     cd8:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	54 e4       	ldi	r21, 0x44	; 68
     ce8:	bc 01       	movw	r22, r24
     cea:	cd 01       	movw	r24, r26
     cec:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     cfc:	a2 2e       	mov	r10, r18
     cfe:	b3 2e       	mov	r11, r19
     d00:	c4 2e       	mov	r12, r20
     d02:	d5 2e       	mov	r13, r21
     d04:	e6 2e       	mov	r14, r22
     d06:	f7 2e       	mov	r15, r23
     d08:	08 2f       	mov	r16, r24
     d0a:	19 2f       	mov	r17, r25
     d0c:	d6 01       	movw	r26, r12
     d0e:	c5 01       	movw	r24, r10
     d10:	bc 01       	movw	r22, r24
     d12:	cd 01       	movw	r24, r26
     d14:	e4 da       	rcall	.-2616   	; 0x2de <__portable_avr_delay_cycles>
	
	acely=(int16_t)data;
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	9a 83       	std	Y+2, r25	; 0x02
	
	acely=acely<<8;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	98 2f       	mov	r25, r24
     d26:	88 27       	eor	r24, r24
     d28:	89 83       	std	Y+1, r24	; 0x01
	
	
	data = 0xff;
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
	delay_ms(10);
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	ca da       	rcall	.-2668   	; 0x2c6 <sysclk_get_cpu_hz>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	9c 01       	movw	r18, r24
     d38:	ad 01       	movw	r20, r26
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	cb 01       	movw	r24, r22
     d40:	82 2e       	mov	r8, r18
     d42:	93 2e       	mov	r9, r19
     d44:	a4 2e       	mov	r10, r20
     d46:	b5 2e       	mov	r11, r21
     d48:	c6 2e       	mov	r12, r22
     d4a:	d7 2e       	mov	r13, r23
     d4c:	e8 2e       	mov	r14, r24
     d4e:	f9 2e       	mov	r15, r25
     d50:	28 2d       	mov	r18, r8
     d52:	39 2d       	mov	r19, r9
     d54:	4a 2d       	mov	r20, r10
     d56:	5b 2d       	mov	r21, r11
     d58:	6c 2d       	mov	r22, r12
     d5a:	7d 2d       	mov	r23, r13
     d5c:	8e 2d       	mov	r24, r14
     d5e:	9f 2d       	mov	r25, r15
     d60:	01 e0       	ldi	r16, 0x01	; 1
     d62:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     d66:	2c a3       	std	Y+36, r18	; 0x24
     d68:	3d a3       	std	Y+37, r19	; 0x25
     d6a:	4e a3       	std	Y+38, r20	; 0x26
     d6c:	5f a3       	std	Y+39, r21	; 0x27
     d6e:	68 a7       	std	Y+40, r22	; 0x28
     d70:	79 a7       	std	Y+41, r23	; 0x29
     d72:	8a a7       	std	Y+42, r24	; 0x2a
     d74:	9b a7       	std	Y+43, r25	; 0x2b
     d76:	8c a0       	ldd	r8, Y+36	; 0x24
     d78:	9d a0       	ldd	r9, Y+37	; 0x25
     d7a:	ae a0       	ldd	r10, Y+38	; 0x26
     d7c:	bf a0       	ldd	r11, Y+39	; 0x27
     d7e:	c8 a4       	ldd	r12, Y+40	; 0x28
     d80:	d9 a4       	ldd	r13, Y+41	; 0x29
     d82:	ea a4       	ldd	r14, Y+42	; 0x2a
     d84:	fb a4       	ldd	r15, Y+43	; 0x2b
     d86:	28 2d       	mov	r18, r8
     d88:	39 2d       	mov	r19, r9
     d8a:	4a 2d       	mov	r20, r10
     d8c:	5b 2d       	mov	r21, r11
     d8e:	6c 2d       	mov	r22, r12
     d90:	7d 2d       	mov	r23, r13
     d92:	8e 2d       	mov	r24, r14
     d94:	9f 2d       	mov	r25, r15
     d96:	02 e0       	ldi	r16, 0x02	; 2
     d98:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     d9c:	2c a7       	std	Y+44, r18	; 0x2c
     d9e:	3d a7       	std	Y+45, r19	; 0x2d
     da0:	4e a7       	std	Y+46, r20	; 0x2e
     da2:	5f a7       	std	Y+47, r21	; 0x2f
     da4:	68 ab       	std	Y+48, r22	; 0x30
     da6:	79 ab       	std	Y+49, r23	; 0x31
     da8:	8a ab       	std	Y+50, r24	; 0x32
     daa:	9b ab       	std	Y+51, r25	; 0x33
     dac:	28 2d       	mov	r18, r8
     dae:	39 2d       	mov	r19, r9
     db0:	4a 2d       	mov	r20, r10
     db2:	5b 2d       	mov	r21, r11
     db4:	6c 2d       	mov	r22, r12
     db6:	7d 2d       	mov	r23, r13
     db8:	8e 2d       	mov	r24, r14
     dba:	9f 2d       	mov	r25, r15
     dbc:	ac a4       	ldd	r10, Y+44	; 0x2c
     dbe:	bd a4       	ldd	r11, Y+45	; 0x2d
     dc0:	ce a4       	ldd	r12, Y+46	; 0x2e
     dc2:	df a4       	ldd	r13, Y+47	; 0x2f
     dc4:	e8 a8       	ldd	r14, Y+48	; 0x30
     dc6:	f9 a8       	ldd	r15, Y+49	; 0x31
     dc8:	0a a9       	ldd	r16, Y+50	; 0x32
     dca:	1b a9       	ldd	r17, Y+51	; 0x33
     dcc:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     dd0:	22 2e       	mov	r2, r18
     dd2:	33 2e       	mov	r3, r19
     dd4:	44 2e       	mov	r4, r20
     dd6:	55 2e       	mov	r5, r21
     dd8:	66 2e       	mov	r6, r22
     dda:	77 2e       	mov	r7, r23
     ddc:	88 2e       	mov	r8, r24
     dde:	99 2e       	mov	r9, r25
     de0:	0f 2e       	mov	r0, r31
     de2:	f6 e0       	ldi	r31, 0x06	; 6
     de4:	af 2e       	mov	r10, r31
     de6:	f0 2d       	mov	r31, r0
     de8:	b1 2c       	mov	r11, r1
     dea:	c1 2c       	mov	r12, r1
     dec:	d1 2c       	mov	r13, r1
     dee:	e1 2c       	mov	r14, r1
     df0:	f1 2c       	mov	r15, r1
     df2:	00 e0       	ldi	r16, 0x00	; 0
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	22 2d       	mov	r18, r2
     df8:	33 2d       	mov	r19, r3
     dfa:	44 2d       	mov	r20, r4
     dfc:	55 2d       	mov	r21, r5
     dfe:	66 2d       	mov	r22, r6
     e00:	77 2d       	mov	r23, r7
     e02:	88 2d       	mov	r24, r8
     e04:	99 2d       	mov	r25, r9
     e06:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     e0a:	22 2e       	mov	r2, r18
     e0c:	33 2e       	mov	r3, r19
     e0e:	44 2e       	mov	r4, r20
     e10:	55 2e       	mov	r5, r21
     e12:	66 2e       	mov	r6, r22
     e14:	77 2e       	mov	r7, r23
     e16:	88 2e       	mov	r8, r24
     e18:	99 2e       	mov	r9, r25
     e1a:	a2 2c       	mov	r10, r2
     e1c:	b3 2c       	mov	r11, r3
     e1e:	c4 2c       	mov	r12, r4
     e20:	d5 2c       	mov	r13, r5
     e22:	e6 2c       	mov	r14, r6
     e24:	f7 2c       	mov	r15, r7
     e26:	08 2d       	mov	r16, r8
     e28:	19 2d       	mov	r17, r9
     e2a:	2a 2d       	mov	r18, r10
     e2c:	3b 2d       	mov	r19, r11
     e2e:	4c 2d       	mov	r20, r12
     e30:	5d 2d       	mov	r21, r13
     e32:	6e 2d       	mov	r22, r14
     e34:	7f 2d       	mov	r23, r15
     e36:	80 2f       	mov	r24, r16
     e38:	91 2f       	mov	r25, r17
     e3a:	29 51       	subi	r18, 0x19	; 25
     e3c:	3c 4f       	sbci	r19, 0xFC	; 252
     e3e:	4f 4f       	sbci	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	6f 4f       	sbci	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	a2 2e       	mov	r10, r18
     e4c:	b3 2e       	mov	r11, r19
     e4e:	c4 2e       	mov	r12, r20
     e50:	d5 2e       	mov	r13, r21
     e52:	e6 2e       	mov	r14, r22
     e54:	f7 2e       	mov	r15, r23
     e56:	08 2f       	mov	r16, r24
     e58:	19 2f       	mov	r17, r25
     e5a:	2a 2d       	mov	r18, r10
     e5c:	3b 2d       	mov	r19, r11
     e5e:	4c 2d       	mov	r20, r12
     e60:	5d 2d       	mov	r21, r13
     e62:	6e 2d       	mov	r22, r14
     e64:	7f 2d       	mov	r23, r15
     e66:	80 2f       	mov	r24, r16
     e68:	91 2f       	mov	r25, r17
     e6a:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a e7       	ldi	r20, 0x7A	; 122
     e78:	54 e4       	ldi	r21, 0x44	; 68
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
     e8e:	a2 2e       	mov	r10, r18
     e90:	b3 2e       	mov	r11, r19
     e92:	c4 2e       	mov	r12, r20
     e94:	d5 2e       	mov	r13, r21
     e96:	e6 2e       	mov	r14, r22
     e98:	f7 2e       	mov	r15, r23
     e9a:	08 2f       	mov	r16, r24
     e9c:	19 2f       	mov	r17, r25
     e9e:	d6 01       	movw	r26, r12
     ea0:	c5 01       	movw	r24, r10
     ea2:	bc 01       	movw	r22, r24
	BNO_Read(&data,BNO055_ACCEL_DATA_Y_LSB_ADDR);
     ea4:	cd 01       	movw	r24, r26
     ea6:	1b da       	rcall	.-3018   	; 0x2de <__portable_avr_delay_cycles>
     ea8:	ce 01       	movw	r24, r28
     eaa:	03 96       	adiw	r24, 0x03	; 3
     eac:	6a e0       	ldi	r22, 0x0A	; 10
	delay_ms(10);
     eae:	37 da       	rcall	.-2962   	; 0x31e <BNO_Read>
     eb0:	0a da       	rcall	.-3052   	; 0x2c6 <sysclk_get_cpu_hz>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	9c 01       	movw	r18, r24
     eb8:	ad 01       	movw	r20, r26
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	cb 01       	movw	r24, r22
     ec0:	82 2e       	mov	r8, r18
     ec2:	93 2e       	mov	r9, r19
     ec4:	a4 2e       	mov	r10, r20
     ec6:	b5 2e       	mov	r11, r21
     ec8:	c6 2e       	mov	r12, r22
     eca:	d7 2e       	mov	r13, r23
     ecc:	e8 2e       	mov	r14, r24
     ece:	f9 2e       	mov	r15, r25
     ed0:	28 2d       	mov	r18, r8
     ed2:	39 2d       	mov	r19, r9
     ed4:	4a 2d       	mov	r20, r10
     ed6:	5b 2d       	mov	r21, r11
     ed8:	6c 2d       	mov	r22, r12
     eda:	7d 2d       	mov	r23, r13
     edc:	8e 2d       	mov	r24, r14
     ede:	9f 2d       	mov	r25, r15
     ee0:	01 e0       	ldi	r16, 0x01	; 1
     ee2:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     ee6:	2c ab       	std	Y+52, r18	; 0x34
     ee8:	3d ab       	std	Y+53, r19	; 0x35
     eea:	4e ab       	std	Y+54, r20	; 0x36
     eec:	5f ab       	std	Y+55, r21	; 0x37
     eee:	68 af       	std	Y+56, r22	; 0x38
     ef0:	79 af       	std	Y+57, r23	; 0x39
     ef2:	8a af       	std	Y+58, r24	; 0x3a
     ef4:	9b af       	std	Y+59, r25	; 0x3b
     ef6:	8c a8       	ldd	r8, Y+52	; 0x34
     ef8:	9d a8       	ldd	r9, Y+53	; 0x35
     efa:	ae a8       	ldd	r10, Y+54	; 0x36
     efc:	bf a8       	ldd	r11, Y+55	; 0x37
     efe:	c8 ac       	ldd	r12, Y+56	; 0x38
     f00:	d9 ac       	ldd	r13, Y+57	; 0x39
     f02:	ea ac       	ldd	r14, Y+58	; 0x3a
     f04:	fb ac       	ldd	r15, Y+59	; 0x3b
     f06:	28 2d       	mov	r18, r8
     f08:	39 2d       	mov	r19, r9
     f0a:	4a 2d       	mov	r20, r10
     f0c:	5b 2d       	mov	r21, r11
     f0e:	6c 2d       	mov	r22, r12
     f10:	7d 2d       	mov	r23, r13
     f12:	8e 2d       	mov	r24, r14
     f14:	9f 2d       	mov	r25, r15
     f16:	02 e0       	ldi	r16, 0x02	; 2
     f18:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
     f1c:	2c af       	std	Y+60, r18	; 0x3c
     f1e:	3d af       	std	Y+61, r19	; 0x3d
     f20:	4e af       	std	Y+62, r20	; 0x3e
     f22:	5f af       	std	Y+63, r21	; 0x3f
     f24:	21 96       	adiw	r28, 0x01	; 1
     f26:	6f af       	std	Y+63, r22	; 0x3f
     f28:	21 97       	sbiw	r28, 0x01	; 1
     f2a:	22 96       	adiw	r28, 0x02	; 2
     f2c:	7f af       	std	Y+63, r23	; 0x3f
     f2e:	22 97       	sbiw	r28, 0x02	; 2
     f30:	23 96       	adiw	r28, 0x03	; 3
     f32:	8f af       	std	Y+63, r24	; 0x3f
     f34:	23 97       	sbiw	r28, 0x03	; 3
     f36:	24 96       	adiw	r28, 0x04	; 4
     f38:	9f af       	std	Y+63, r25	; 0x3f
     f3a:	24 97       	sbiw	r28, 0x04	; 4
     f3c:	28 2d       	mov	r18, r8
     f3e:	39 2d       	mov	r19, r9
     f40:	4a 2d       	mov	r20, r10
     f42:	5b 2d       	mov	r21, r11
     f44:	6c 2d       	mov	r22, r12
     f46:	7d 2d       	mov	r23, r13
     f48:	8e 2d       	mov	r24, r14
     f4a:	9f 2d       	mov	r25, r15
     f4c:	ac ac       	ldd	r10, Y+60	; 0x3c
     f4e:	bd ac       	ldd	r11, Y+61	; 0x3d
     f50:	ce ac       	ldd	r12, Y+62	; 0x3e
     f52:	df ac       	ldd	r13, Y+63	; 0x3f
     f54:	21 96       	adiw	r28, 0x01	; 1
     f56:	ef ac       	ldd	r14, Y+63	; 0x3f
     f58:	21 97       	sbiw	r28, 0x01	; 1
     f5a:	22 96       	adiw	r28, 0x02	; 2
     f5c:	ff ac       	ldd	r15, Y+63	; 0x3f
     f5e:	22 97       	sbiw	r28, 0x02	; 2
     f60:	23 96       	adiw	r28, 0x03	; 3
     f62:	0f ad       	ldd	r16, Y+63	; 0x3f
     f64:	23 97       	sbiw	r28, 0x03	; 3
     f66:	24 96       	adiw	r28, 0x04	; 4
     f68:	1f ad       	ldd	r17, Y+63	; 0x3f
     f6a:	24 97       	sbiw	r28, 0x04	; 4
     f6c:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
     f70:	22 2e       	mov	r2, r18
     f72:	33 2e       	mov	r3, r19
     f74:	44 2e       	mov	r4, r20
     f76:	55 2e       	mov	r5, r21
     f78:	66 2e       	mov	r6, r22
     f7a:	77 2e       	mov	r7, r23
     f7c:	88 2e       	mov	r8, r24
     f7e:	99 2e       	mov	r9, r25
     f80:	0f 2e       	mov	r0, r31
     f82:	f6 e0       	ldi	r31, 0x06	; 6
     f84:	af 2e       	mov	r10, r31
     f86:	f0 2d       	mov	r31, r0
     f88:	b1 2c       	mov	r11, r1
     f8a:	c1 2c       	mov	r12, r1
     f8c:	d1 2c       	mov	r13, r1
     f8e:	e1 2c       	mov	r14, r1
     f90:	f1 2c       	mov	r15, r1
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	22 2d       	mov	r18, r2
     f98:	33 2d       	mov	r19, r3
     f9a:	44 2d       	mov	r20, r4
     f9c:	55 2d       	mov	r21, r5
     f9e:	66 2d       	mov	r22, r6
     fa0:	77 2d       	mov	r23, r7
     fa2:	88 2d       	mov	r24, r8
     fa4:	99 2d       	mov	r25, r9
     fa6:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
     faa:	22 2e       	mov	r2, r18
     fac:	33 2e       	mov	r3, r19
     fae:	44 2e       	mov	r4, r20
     fb0:	55 2e       	mov	r5, r21
     fb2:	66 2e       	mov	r6, r22
     fb4:	77 2e       	mov	r7, r23
     fb6:	88 2e       	mov	r8, r24
     fb8:	99 2e       	mov	r9, r25
     fba:	a2 2c       	mov	r10, r2
     fbc:	b3 2c       	mov	r11, r3
     fbe:	c4 2c       	mov	r12, r4
     fc0:	d5 2c       	mov	r13, r5
     fc2:	e6 2c       	mov	r14, r6
     fc4:	f7 2c       	mov	r15, r7
     fc6:	08 2d       	mov	r16, r8
     fc8:	19 2d       	mov	r17, r9
     fca:	2a 2d       	mov	r18, r10
     fcc:	3b 2d       	mov	r19, r11
     fce:	4c 2d       	mov	r20, r12
     fd0:	5d 2d       	mov	r21, r13
     fd2:	6e 2d       	mov	r22, r14
     fd4:	7f 2d       	mov	r23, r15
     fd6:	80 2f       	mov	r24, r16
     fd8:	91 2f       	mov	r25, r17
     fda:	29 51       	subi	r18, 0x19	; 25
     fdc:	3c 4f       	sbci	r19, 0xFC	; 252
     fde:	4f 4f       	sbci	r20, 0xFF	; 255
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	6f 4f       	sbci	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	a2 2e       	mov	r10, r18
     fec:	b3 2e       	mov	r11, r19
     fee:	c4 2e       	mov	r12, r20
     ff0:	d5 2e       	mov	r13, r21
     ff2:	e6 2e       	mov	r14, r22
     ff4:	f7 2e       	mov	r15, r23
     ff6:	08 2f       	mov	r16, r24
     ff8:	19 2f       	mov	r17, r25
     ffa:	2a 2d       	mov	r18, r10
     ffc:	3b 2d       	mov	r19, r11
     ffe:	4c 2d       	mov	r20, r12
    1000:	5d 2d       	mov	r21, r13
    1002:	6e 2d       	mov	r22, r14
    1004:	7f 2d       	mov	r23, r15
    1006:	80 2f       	mov	r24, r16
    1008:	91 2f       	mov	r25, r17
    100a:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a e7       	ldi	r20, 0x7A	; 122
    1018:	54 e4       	ldi	r21, 0x44	; 68
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
    102e:	a2 2e       	mov	r10, r18
    1030:	b3 2e       	mov	r11, r19
    1032:	c4 2e       	mov	r12, r20
    1034:	d5 2e       	mov	r13, r21
    1036:	e6 2e       	mov	r14, r22
    1038:	f7 2e       	mov	r15, r23
    103a:	08 2f       	mov	r16, r24
    103c:	19 2f       	mov	r17, r25
    103e:	d6 01       	movw	r26, r12
    1040:	c5 01       	movw	r24, r10
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	4b d9       	rcall	.-3434   	; 0x2de <__portable_avr_delay_cycles>

	acely+=data;
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	29 81       	ldd	r18, Y+1	; 0x01
    1050:	3a 81       	ldd	r19, Y+2	; 0x02
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9a 83       	std	Y+2, r25	; 0x02
	return acely;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    105e:	cd 5b       	subi	r28, 0xBD	; 189
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	3f 90       	pop	r3
    1088:	2f 90       	pop	r2
    108a:	08 95       	ret

0000108c <get_acceleration_z>:

uint16_t get_acceleration_z()
{
    108c:	2f 92       	push	r2
    108e:	3f 92       	push	r3
    1090:	4f 92       	push	r4
    1092:	5f 92       	push	r5
    1094:	6f 92       	push	r6
    1096:	7f 92       	push	r7
    1098:	8f 92       	push	r8
    109a:	9f 92       	push	r9
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	c3 54       	subi	r28, 0x43	; 67
    10b6:	d1 09       	sbc	r29, r1
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	de bf       	out	0x3e, r29	; 62
	uint16_t acelz;
	uint8_t data = 0xff;
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	8b 83       	std	Y+3, r24	; 0x03
	delay_ms(10);
    10c0:	02 d9       	rcall	.-3580   	; 0x2c6 <sysclk_get_cpu_hz>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9c 01       	movw	r18, r24
    10c8:	ad 01       	movw	r20, r26
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	cb 01       	movw	r24, r22
    10d0:	82 2e       	mov	r8, r18
    10d2:	93 2e       	mov	r9, r19
    10d4:	a4 2e       	mov	r10, r20
    10d6:	b5 2e       	mov	r11, r21
    10d8:	c6 2e       	mov	r12, r22
    10da:	d7 2e       	mov	r13, r23
    10dc:	e8 2e       	mov	r14, r24
    10de:	f9 2e       	mov	r15, r25
    10e0:	28 2d       	mov	r18, r8
    10e2:	39 2d       	mov	r19, r9
    10e4:	4a 2d       	mov	r20, r10
    10e6:	5b 2d       	mov	r21, r11
    10e8:	6c 2d       	mov	r22, r12
    10ea:	7d 2d       	mov	r23, r13
    10ec:	8e 2d       	mov	r24, r14
    10ee:	9f 2d       	mov	r25, r15
    10f0:	01 e0       	ldi	r16, 0x01	; 1
    10f2:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    10f6:	2c 83       	std	Y+4, r18	; 0x04
    10f8:	3d 83       	std	Y+5, r19	; 0x05
    10fa:	4e 83       	std	Y+6, r20	; 0x06
    10fc:	5f 83       	std	Y+7, r21	; 0x07
    10fe:	68 87       	std	Y+8, r22	; 0x08
    1100:	79 87       	std	Y+9, r23	; 0x09
    1102:	8a 87       	std	Y+10, r24	; 0x0a
    1104:	9b 87       	std	Y+11, r25	; 0x0b
    1106:	8c 80       	ldd	r8, Y+4	; 0x04
    1108:	9d 80       	ldd	r9, Y+5	; 0x05
    110a:	ae 80       	ldd	r10, Y+6	; 0x06
    110c:	bf 80       	ldd	r11, Y+7	; 0x07
    110e:	c8 84       	ldd	r12, Y+8	; 0x08
    1110:	d9 84       	ldd	r13, Y+9	; 0x09
    1112:	ea 84       	ldd	r14, Y+10	; 0x0a
    1114:	fb 84       	ldd	r15, Y+11	; 0x0b
    1116:	28 2d       	mov	r18, r8
    1118:	39 2d       	mov	r19, r9
    111a:	4a 2d       	mov	r20, r10
    111c:	5b 2d       	mov	r21, r11
    111e:	6c 2d       	mov	r22, r12
    1120:	7d 2d       	mov	r23, r13
    1122:	8e 2d       	mov	r24, r14
    1124:	9f 2d       	mov	r25, r15
    1126:	02 e0       	ldi	r16, 0x02	; 2
    1128:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    112c:	2c 87       	std	Y+12, r18	; 0x0c
    112e:	3d 87       	std	Y+13, r19	; 0x0d
    1130:	4e 87       	std	Y+14, r20	; 0x0e
    1132:	5f 87       	std	Y+15, r21	; 0x0f
    1134:	68 8b       	std	Y+16, r22	; 0x10
    1136:	79 8b       	std	Y+17, r23	; 0x11
    1138:	8a 8b       	std	Y+18, r24	; 0x12
    113a:	9b 8b       	std	Y+19, r25	; 0x13
    113c:	28 2d       	mov	r18, r8
    113e:	39 2d       	mov	r19, r9
    1140:	4a 2d       	mov	r20, r10
    1142:	5b 2d       	mov	r21, r11
    1144:	6c 2d       	mov	r22, r12
    1146:	7d 2d       	mov	r23, r13
    1148:	8e 2d       	mov	r24, r14
    114a:	9f 2d       	mov	r25, r15
    114c:	ac 84       	ldd	r10, Y+12	; 0x0c
    114e:	bd 84       	ldd	r11, Y+13	; 0x0d
    1150:	ce 84       	ldd	r12, Y+14	; 0x0e
    1152:	df 84       	ldd	r13, Y+15	; 0x0f
    1154:	e8 88       	ldd	r14, Y+16	; 0x10
    1156:	f9 88       	ldd	r15, Y+17	; 0x11
    1158:	0a 89       	ldd	r16, Y+18	; 0x12
    115a:	1b 89       	ldd	r17, Y+19	; 0x13
    115c:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
    1160:	22 2e       	mov	r2, r18
    1162:	33 2e       	mov	r3, r19
    1164:	44 2e       	mov	r4, r20
    1166:	55 2e       	mov	r5, r21
    1168:	66 2e       	mov	r6, r22
    116a:	77 2e       	mov	r7, r23
    116c:	88 2e       	mov	r8, r24
    116e:	99 2e       	mov	r9, r25
    1170:	0f 2e       	mov	r0, r31
    1172:	f6 e0       	ldi	r31, 0x06	; 6
    1174:	af 2e       	mov	r10, r31
    1176:	f0 2d       	mov	r31, r0
    1178:	b1 2c       	mov	r11, r1
    117a:	c1 2c       	mov	r12, r1
    117c:	d1 2c       	mov	r13, r1
    117e:	e1 2c       	mov	r14, r1
    1180:	f1 2c       	mov	r15, r1
    1182:	00 e0       	ldi	r16, 0x00	; 0
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	22 2d       	mov	r18, r2
    1188:	33 2d       	mov	r19, r3
    118a:	44 2d       	mov	r20, r4
    118c:	55 2d       	mov	r21, r5
    118e:	66 2d       	mov	r22, r6
    1190:	77 2d       	mov	r23, r7
    1192:	88 2d       	mov	r24, r8
    1194:	99 2d       	mov	r25, r9
    1196:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
    119a:	22 2e       	mov	r2, r18
    119c:	33 2e       	mov	r3, r19
    119e:	44 2e       	mov	r4, r20
    11a0:	55 2e       	mov	r5, r21
    11a2:	66 2e       	mov	r6, r22
    11a4:	77 2e       	mov	r7, r23
    11a6:	88 2e       	mov	r8, r24
    11a8:	99 2e       	mov	r9, r25
    11aa:	a2 2c       	mov	r10, r2
    11ac:	b3 2c       	mov	r11, r3
    11ae:	c4 2c       	mov	r12, r4
    11b0:	d5 2c       	mov	r13, r5
    11b2:	e6 2c       	mov	r14, r6
    11b4:	f7 2c       	mov	r15, r7
    11b6:	08 2d       	mov	r16, r8
    11b8:	19 2d       	mov	r17, r9
    11ba:	2a 2d       	mov	r18, r10
    11bc:	3b 2d       	mov	r19, r11
    11be:	4c 2d       	mov	r20, r12
    11c0:	5d 2d       	mov	r21, r13
    11c2:	6e 2d       	mov	r22, r14
    11c4:	7f 2d       	mov	r23, r15
    11c6:	80 2f       	mov	r24, r16
    11c8:	91 2f       	mov	r25, r17
    11ca:	29 51       	subi	r18, 0x19	; 25
    11cc:	3c 4f       	sbci	r19, 0xFC	; 252
    11ce:	4f 4f       	sbci	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	6f 4f       	sbci	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8f 4f       	sbci	r24, 0xFF	; 255
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	a2 2e       	mov	r10, r18
    11dc:	b3 2e       	mov	r11, r19
    11de:	c4 2e       	mov	r12, r20
    11e0:	d5 2e       	mov	r13, r21
    11e2:	e6 2e       	mov	r14, r22
    11e4:	f7 2e       	mov	r15, r23
    11e6:	08 2f       	mov	r16, r24
    11e8:	19 2f       	mov	r17, r25
    11ea:	2a 2d       	mov	r18, r10
    11ec:	3b 2d       	mov	r19, r11
    11ee:	4c 2d       	mov	r20, r12
    11f0:	5d 2d       	mov	r21, r13
    11f2:	6e 2d       	mov	r22, r14
    11f4:	7f 2d       	mov	r23, r15
    11f6:	80 2f       	mov	r24, r16
    11f8:	91 2f       	mov	r25, r17
    11fa:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a e7       	ldi	r20, 0x7A	; 122
    1208:	54 e4       	ldi	r21, 0x44	; 68
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
    121e:	a2 2e       	mov	r10, r18
    1220:	b3 2e       	mov	r11, r19
    1222:	c4 2e       	mov	r12, r20
    1224:	d5 2e       	mov	r13, r21
    1226:	e6 2e       	mov	r14, r22
    1228:	f7 2e       	mov	r15, r23
    122a:	08 2f       	mov	r16, r24
    122c:	19 2f       	mov	r17, r25
    122e:	d6 01       	movw	r26, r12
    1230:	c5 01       	movw	r24, r10
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	53 d8       	rcall	.-3930   	; 0x2de <__portable_avr_delay_cycles>
	BNO_Read(&data,BNO055_ACCEL_DATA_Z_MSB_ADDR);
    1238:	ce 01       	movw	r24, r28
    123a:	03 96       	adiw	r24, 0x03	; 3
    123c:	6d e0       	ldi	r22, 0x0D	; 13
	delay_ms(10);
    123e:	6f d8       	rcall	.-3874   	; 0x31e <BNO_Read>
    1240:	42 d8       	rcall	.-3964   	; 0x2c6 <sysclk_get_cpu_hz>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9c 01       	movw	r18, r24
    1248:	ad 01       	movw	r20, r26
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	cb 01       	movw	r24, r22
    1250:	82 2e       	mov	r8, r18
    1252:	93 2e       	mov	r9, r19
    1254:	a4 2e       	mov	r10, r20
    1256:	b5 2e       	mov	r11, r21
    1258:	c6 2e       	mov	r12, r22
    125a:	d7 2e       	mov	r13, r23
    125c:	e8 2e       	mov	r14, r24
    125e:	f9 2e       	mov	r15, r25
    1260:	28 2d       	mov	r18, r8
    1262:	39 2d       	mov	r19, r9
    1264:	4a 2d       	mov	r20, r10
    1266:	5b 2d       	mov	r21, r11
    1268:	6c 2d       	mov	r22, r12
    126a:	7d 2d       	mov	r23, r13
    126c:	8e 2d       	mov	r24, r14
    126e:	9f 2d       	mov	r25, r15
    1270:	01 e0       	ldi	r16, 0x01	; 1
    1272:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    1276:	2c 8b       	std	Y+20, r18	; 0x14
    1278:	3d 8b       	std	Y+21, r19	; 0x15
    127a:	4e 8b       	std	Y+22, r20	; 0x16
    127c:	5f 8b       	std	Y+23, r21	; 0x17
    127e:	68 8f       	std	Y+24, r22	; 0x18
    1280:	79 8f       	std	Y+25, r23	; 0x19
    1282:	8a 8f       	std	Y+26, r24	; 0x1a
    1284:	9b 8f       	std	Y+27, r25	; 0x1b
    1286:	8c 88       	ldd	r8, Y+20	; 0x14
    1288:	9d 88       	ldd	r9, Y+21	; 0x15
    128a:	ae 88       	ldd	r10, Y+22	; 0x16
    128c:	bf 88       	ldd	r11, Y+23	; 0x17
    128e:	c8 8c       	ldd	r12, Y+24	; 0x18
    1290:	d9 8c       	ldd	r13, Y+25	; 0x19
    1292:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1294:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1296:	28 2d       	mov	r18, r8
    1298:	39 2d       	mov	r19, r9
    129a:	4a 2d       	mov	r20, r10
    129c:	5b 2d       	mov	r21, r11
    129e:	6c 2d       	mov	r22, r12
    12a0:	7d 2d       	mov	r23, r13
    12a2:	8e 2d       	mov	r24, r14
    12a4:	9f 2d       	mov	r25, r15
    12a6:	02 e0       	ldi	r16, 0x02	; 2
    12a8:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    12ac:	2c 8f       	std	Y+28, r18	; 0x1c
    12ae:	3d 8f       	std	Y+29, r19	; 0x1d
    12b0:	4e 8f       	std	Y+30, r20	; 0x1e
    12b2:	5f 8f       	std	Y+31, r21	; 0x1f
    12b4:	68 a3       	std	Y+32, r22	; 0x20
    12b6:	79 a3       	std	Y+33, r23	; 0x21
    12b8:	8a a3       	std	Y+34, r24	; 0x22
    12ba:	9b a3       	std	Y+35, r25	; 0x23
    12bc:	28 2d       	mov	r18, r8
    12be:	39 2d       	mov	r19, r9
    12c0:	4a 2d       	mov	r20, r10
    12c2:	5b 2d       	mov	r21, r11
    12c4:	6c 2d       	mov	r22, r12
    12c6:	7d 2d       	mov	r23, r13
    12c8:	8e 2d       	mov	r24, r14
    12ca:	9f 2d       	mov	r25, r15
    12cc:	ac 8c       	ldd	r10, Y+28	; 0x1c
    12ce:	bd 8c       	ldd	r11, Y+29	; 0x1d
    12d0:	ce 8c       	ldd	r12, Y+30	; 0x1e
    12d2:	df 8c       	ldd	r13, Y+31	; 0x1f
    12d4:	e8 a0       	ldd	r14, Y+32	; 0x20
    12d6:	f9 a0       	ldd	r15, Y+33	; 0x21
    12d8:	0a a1       	ldd	r16, Y+34	; 0x22
    12da:	1b a1       	ldd	r17, Y+35	; 0x23
    12dc:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
    12e0:	22 2e       	mov	r2, r18
    12e2:	33 2e       	mov	r3, r19
    12e4:	44 2e       	mov	r4, r20
    12e6:	55 2e       	mov	r5, r21
    12e8:	66 2e       	mov	r6, r22
    12ea:	77 2e       	mov	r7, r23
    12ec:	88 2e       	mov	r8, r24
    12ee:	99 2e       	mov	r9, r25
    12f0:	0f 2e       	mov	r0, r31
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	af 2e       	mov	r10, r31
    12f6:	f0 2d       	mov	r31, r0
    12f8:	b1 2c       	mov	r11, r1
    12fa:	c1 2c       	mov	r12, r1
    12fc:	d1 2c       	mov	r13, r1
    12fe:	e1 2c       	mov	r14, r1
    1300:	f1 2c       	mov	r15, r1
    1302:	00 e0       	ldi	r16, 0x00	; 0
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	22 2d       	mov	r18, r2
    1308:	33 2d       	mov	r19, r3
    130a:	44 2d       	mov	r20, r4
    130c:	55 2d       	mov	r21, r5
    130e:	66 2d       	mov	r22, r6
    1310:	77 2d       	mov	r23, r7
    1312:	88 2d       	mov	r24, r8
    1314:	99 2d       	mov	r25, r9
    1316:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
    131a:	22 2e       	mov	r2, r18
    131c:	33 2e       	mov	r3, r19
    131e:	44 2e       	mov	r4, r20
    1320:	55 2e       	mov	r5, r21
    1322:	66 2e       	mov	r6, r22
    1324:	77 2e       	mov	r7, r23
    1326:	88 2e       	mov	r8, r24
    1328:	99 2e       	mov	r9, r25
    132a:	a2 2c       	mov	r10, r2
    132c:	b3 2c       	mov	r11, r3
    132e:	c4 2c       	mov	r12, r4
    1330:	d5 2c       	mov	r13, r5
    1332:	e6 2c       	mov	r14, r6
    1334:	f7 2c       	mov	r15, r7
    1336:	08 2d       	mov	r16, r8
    1338:	19 2d       	mov	r17, r9
    133a:	2a 2d       	mov	r18, r10
    133c:	3b 2d       	mov	r19, r11
    133e:	4c 2d       	mov	r20, r12
    1340:	5d 2d       	mov	r21, r13
    1342:	6e 2d       	mov	r22, r14
    1344:	7f 2d       	mov	r23, r15
    1346:	80 2f       	mov	r24, r16
    1348:	91 2f       	mov	r25, r17
    134a:	29 51       	subi	r18, 0x19	; 25
    134c:	3c 4f       	sbci	r19, 0xFC	; 252
    134e:	4f 4f       	sbci	r20, 0xFF	; 255
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	6f 4f       	sbci	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	a2 2e       	mov	r10, r18
    135c:	b3 2e       	mov	r11, r19
    135e:	c4 2e       	mov	r12, r20
    1360:	d5 2e       	mov	r13, r21
    1362:	e6 2e       	mov	r14, r22
    1364:	f7 2e       	mov	r15, r23
    1366:	08 2f       	mov	r16, r24
    1368:	19 2f       	mov	r17, r25
    136a:	2a 2d       	mov	r18, r10
    136c:	3b 2d       	mov	r19, r11
    136e:	4c 2d       	mov	r20, r12
    1370:	5d 2d       	mov	r21, r13
    1372:	6e 2d       	mov	r22, r14
    1374:	7f 2d       	mov	r23, r15
    1376:	80 2f       	mov	r24, r16
    1378:	91 2f       	mov	r25, r17
    137a:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	4a e7       	ldi	r20, 0x7A	; 122
    1388:	54 e4       	ldi	r21, 0x44	; 68
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
    139e:	a2 2e       	mov	r10, r18
    13a0:	b3 2e       	mov	r11, r19
    13a2:	c4 2e       	mov	r12, r20
    13a4:	d5 2e       	mov	r13, r21
    13a6:	e6 2e       	mov	r14, r22
    13a8:	f7 2e       	mov	r15, r23
    13aa:	08 2f       	mov	r16, r24
    13ac:	19 2f       	mov	r17, r25
    13ae:	d6 01       	movw	r26, r12
    13b0:	c5 01       	movw	r24, r10
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 6f 01 	call	0x2de	; 0x2de <__portable_avr_delay_cycles>
	
	acelz=(int16_t)data;
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	9a 83       	std	Y+2, r25	; 0x02
	
	acelz=acelz<<8;
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	98 2f       	mov	r25, r24
    13ca:	88 27       	eor	r24, r24
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	9a 83       	std	Y+2, r25	; 0x02
	
	
	data = 0xff;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	8b 83       	std	Y+3, r24	; 0x03
	delay_ms(10);
    13d4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <sysclk_get_cpu_hz>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9c 01       	movw	r18, r24
    13de:	ad 01       	movw	r20, r26
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	cb 01       	movw	r24, r22
    13e6:	82 2e       	mov	r8, r18
    13e8:	93 2e       	mov	r9, r19
    13ea:	a4 2e       	mov	r10, r20
    13ec:	b5 2e       	mov	r11, r21
    13ee:	c6 2e       	mov	r12, r22
    13f0:	d7 2e       	mov	r13, r23
    13f2:	e8 2e       	mov	r14, r24
    13f4:	f9 2e       	mov	r15, r25
    13f6:	28 2d       	mov	r18, r8
    13f8:	39 2d       	mov	r19, r9
    13fa:	4a 2d       	mov	r20, r10
    13fc:	5b 2d       	mov	r21, r11
    13fe:	6c 2d       	mov	r22, r12
    1400:	7d 2d       	mov	r23, r13
    1402:	8e 2d       	mov	r24, r14
    1404:	9f 2d       	mov	r25, r15
    1406:	01 e0       	ldi	r16, 0x01	; 1
    1408:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    140c:	2c a3       	std	Y+36, r18	; 0x24
    140e:	3d a3       	std	Y+37, r19	; 0x25
    1410:	4e a3       	std	Y+38, r20	; 0x26
    1412:	5f a3       	std	Y+39, r21	; 0x27
    1414:	68 a7       	std	Y+40, r22	; 0x28
    1416:	79 a7       	std	Y+41, r23	; 0x29
    1418:	8a a7       	std	Y+42, r24	; 0x2a
    141a:	9b a7       	std	Y+43, r25	; 0x2b
    141c:	8c a0       	ldd	r8, Y+36	; 0x24
    141e:	9d a0       	ldd	r9, Y+37	; 0x25
    1420:	ae a0       	ldd	r10, Y+38	; 0x26
    1422:	bf a0       	ldd	r11, Y+39	; 0x27
    1424:	c8 a4       	ldd	r12, Y+40	; 0x28
    1426:	d9 a4       	ldd	r13, Y+41	; 0x29
    1428:	ea a4       	ldd	r14, Y+42	; 0x2a
    142a:	fb a4       	ldd	r15, Y+43	; 0x2b
    142c:	28 2d       	mov	r18, r8
    142e:	39 2d       	mov	r19, r9
    1430:	4a 2d       	mov	r20, r10
    1432:	5b 2d       	mov	r21, r11
    1434:	6c 2d       	mov	r22, r12
    1436:	7d 2d       	mov	r23, r13
    1438:	8e 2d       	mov	r24, r14
    143a:	9f 2d       	mov	r25, r15
    143c:	02 e0       	ldi	r16, 0x02	; 2
    143e:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    1442:	2c a7       	std	Y+44, r18	; 0x2c
    1444:	3d a7       	std	Y+45, r19	; 0x2d
    1446:	4e a7       	std	Y+46, r20	; 0x2e
    1448:	5f a7       	std	Y+47, r21	; 0x2f
    144a:	68 ab       	std	Y+48, r22	; 0x30
    144c:	79 ab       	std	Y+49, r23	; 0x31
    144e:	8a ab       	std	Y+50, r24	; 0x32
    1450:	9b ab       	std	Y+51, r25	; 0x33
    1452:	28 2d       	mov	r18, r8
    1454:	39 2d       	mov	r19, r9
    1456:	4a 2d       	mov	r20, r10
    1458:	5b 2d       	mov	r21, r11
    145a:	6c 2d       	mov	r22, r12
    145c:	7d 2d       	mov	r23, r13
    145e:	8e 2d       	mov	r24, r14
    1460:	9f 2d       	mov	r25, r15
    1462:	ac a4       	ldd	r10, Y+44	; 0x2c
    1464:	bd a4       	ldd	r11, Y+45	; 0x2d
    1466:	ce a4       	ldd	r12, Y+46	; 0x2e
    1468:	df a4       	ldd	r13, Y+47	; 0x2f
    146a:	e8 a8       	ldd	r14, Y+48	; 0x30
    146c:	f9 a8       	ldd	r15, Y+49	; 0x31
    146e:	0a a9       	ldd	r16, Y+50	; 0x32
    1470:	1b a9       	ldd	r17, Y+51	; 0x33
    1472:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
    1476:	22 2e       	mov	r2, r18
    1478:	33 2e       	mov	r3, r19
    147a:	44 2e       	mov	r4, r20
    147c:	55 2e       	mov	r5, r21
    147e:	66 2e       	mov	r6, r22
    1480:	77 2e       	mov	r7, r23
    1482:	88 2e       	mov	r8, r24
    1484:	99 2e       	mov	r9, r25
    1486:	0f 2e       	mov	r0, r31
    1488:	f6 e0       	ldi	r31, 0x06	; 6
    148a:	af 2e       	mov	r10, r31
    148c:	f0 2d       	mov	r31, r0
    148e:	b1 2c       	mov	r11, r1
    1490:	c1 2c       	mov	r12, r1
    1492:	d1 2c       	mov	r13, r1
    1494:	e1 2c       	mov	r14, r1
    1496:	f1 2c       	mov	r15, r1
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	22 2d       	mov	r18, r2
    149e:	33 2d       	mov	r19, r3
    14a0:	44 2d       	mov	r20, r4
    14a2:	55 2d       	mov	r21, r5
    14a4:	66 2d       	mov	r22, r6
    14a6:	77 2d       	mov	r23, r7
    14a8:	88 2d       	mov	r24, r8
    14aa:	99 2d       	mov	r25, r9
    14ac:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
    14b0:	22 2e       	mov	r2, r18
    14b2:	33 2e       	mov	r3, r19
    14b4:	44 2e       	mov	r4, r20
    14b6:	55 2e       	mov	r5, r21
    14b8:	66 2e       	mov	r6, r22
    14ba:	77 2e       	mov	r7, r23
    14bc:	88 2e       	mov	r8, r24
    14be:	99 2e       	mov	r9, r25
    14c0:	a2 2c       	mov	r10, r2
    14c2:	b3 2c       	mov	r11, r3
    14c4:	c4 2c       	mov	r12, r4
    14c6:	d5 2c       	mov	r13, r5
    14c8:	e6 2c       	mov	r14, r6
    14ca:	f7 2c       	mov	r15, r7
    14cc:	08 2d       	mov	r16, r8
    14ce:	19 2d       	mov	r17, r9
    14d0:	2a 2d       	mov	r18, r10
    14d2:	3b 2d       	mov	r19, r11
    14d4:	4c 2d       	mov	r20, r12
    14d6:	5d 2d       	mov	r21, r13
    14d8:	6e 2d       	mov	r22, r14
    14da:	7f 2d       	mov	r23, r15
    14dc:	80 2f       	mov	r24, r16
    14de:	91 2f       	mov	r25, r17
    14e0:	29 51       	subi	r18, 0x19	; 25
    14e2:	3c 4f       	sbci	r19, 0xFC	; 252
    14e4:	4f 4f       	sbci	r20, 0xFF	; 255
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	6f 4f       	sbci	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	a2 2e       	mov	r10, r18
    14f2:	b3 2e       	mov	r11, r19
    14f4:	c4 2e       	mov	r12, r20
    14f6:	d5 2e       	mov	r13, r21
    14f8:	e6 2e       	mov	r14, r22
    14fa:	f7 2e       	mov	r15, r23
    14fc:	08 2f       	mov	r16, r24
    14fe:	19 2f       	mov	r17, r25
    1500:	2a 2d       	mov	r18, r10
    1502:	3b 2d       	mov	r19, r11
    1504:	4c 2d       	mov	r20, r12
    1506:	5d 2d       	mov	r21, r13
    1508:	6e 2d       	mov	r22, r14
    150a:	7f 2d       	mov	r23, r15
    150c:	80 2f       	mov	r24, r16
    150e:	91 2f       	mov	r25, r17
    1510:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a e7       	ldi	r20, 0x7A	; 122
    151e:	54 e4       	ldi	r21, 0x44	; 68
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
    1534:	a2 2e       	mov	r10, r18
    1536:	b3 2e       	mov	r11, r19
    1538:	c4 2e       	mov	r12, r20
    153a:	d5 2e       	mov	r13, r21
    153c:	e6 2e       	mov	r14, r22
    153e:	f7 2e       	mov	r15, r23
    1540:	08 2f       	mov	r16, r24
    1542:	19 2f       	mov	r17, r25
    1544:	d6 01       	movw	r26, r12
    1546:	c5 01       	movw	r24, r10
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 6f 01 	call	0x2de	; 0x2de <__portable_avr_delay_cycles>
	BNO_Read(&data,BNO055_ACCEL_DATA_Z_LSB_ADDR);
    1550:	ce 01       	movw	r24, r28
    1552:	03 96       	adiw	r24, 0x03	; 3
    1554:	6c e0       	ldi	r22, 0x0C	; 12
    1556:	0e 94 8f 01 	call	0x31e	; 0x31e <BNO_Read>
	delay_ms(10);
    155a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <sysclk_get_cpu_hz>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9c 01       	movw	r18, r24
    1564:	ad 01       	movw	r20, r26
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	cb 01       	movw	r24, r22
    156c:	82 2e       	mov	r8, r18
    156e:	93 2e       	mov	r9, r19
    1570:	a4 2e       	mov	r10, r20
    1572:	b5 2e       	mov	r11, r21
    1574:	c6 2e       	mov	r12, r22
    1576:	d7 2e       	mov	r13, r23
    1578:	e8 2e       	mov	r14, r24
    157a:	f9 2e       	mov	r15, r25
    157c:	28 2d       	mov	r18, r8
    157e:	39 2d       	mov	r19, r9
    1580:	4a 2d       	mov	r20, r10
    1582:	5b 2d       	mov	r21, r11
    1584:	6c 2d       	mov	r22, r12
    1586:	7d 2d       	mov	r23, r13
    1588:	8e 2d       	mov	r24, r14
    158a:	9f 2d       	mov	r25, r15
    158c:	01 e0       	ldi	r16, 0x01	; 1
    158e:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    1592:	2c ab       	std	Y+52, r18	; 0x34
    1594:	3d ab       	std	Y+53, r19	; 0x35
    1596:	4e ab       	std	Y+54, r20	; 0x36
    1598:	5f ab       	std	Y+55, r21	; 0x37
    159a:	68 af       	std	Y+56, r22	; 0x38
    159c:	79 af       	std	Y+57, r23	; 0x39
    159e:	8a af       	std	Y+58, r24	; 0x3a
    15a0:	9b af       	std	Y+59, r25	; 0x3b
    15a2:	8c a8       	ldd	r8, Y+52	; 0x34
    15a4:	9d a8       	ldd	r9, Y+53	; 0x35
    15a6:	ae a8       	ldd	r10, Y+54	; 0x36
    15a8:	bf a8       	ldd	r11, Y+55	; 0x37
    15aa:	c8 ac       	ldd	r12, Y+56	; 0x38
    15ac:	d9 ac       	ldd	r13, Y+57	; 0x39
    15ae:	ea ac       	ldd	r14, Y+58	; 0x3a
    15b0:	fb ac       	ldd	r15, Y+59	; 0x3b
    15b2:	28 2d       	mov	r18, r8
    15b4:	39 2d       	mov	r19, r9
    15b6:	4a 2d       	mov	r20, r10
    15b8:	5b 2d       	mov	r21, r11
    15ba:	6c 2d       	mov	r22, r12
    15bc:	7d 2d       	mov	r23, r13
    15be:	8e 2d       	mov	r24, r14
    15c0:	9f 2d       	mov	r25, r15
    15c2:	02 e0       	ldi	r16, 0x02	; 2
    15c4:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    15c8:	2c af       	std	Y+60, r18	; 0x3c
    15ca:	3d af       	std	Y+61, r19	; 0x3d
    15cc:	4e af       	std	Y+62, r20	; 0x3e
    15ce:	5f af       	std	Y+63, r21	; 0x3f
    15d0:	21 96       	adiw	r28, 0x01	; 1
    15d2:	6f af       	std	Y+63, r22	; 0x3f
    15d4:	21 97       	sbiw	r28, 0x01	; 1
    15d6:	22 96       	adiw	r28, 0x02	; 2
    15d8:	7f af       	std	Y+63, r23	; 0x3f
    15da:	22 97       	sbiw	r28, 0x02	; 2
    15dc:	23 96       	adiw	r28, 0x03	; 3
    15de:	8f af       	std	Y+63, r24	; 0x3f
    15e0:	23 97       	sbiw	r28, 0x03	; 3
    15e2:	24 96       	adiw	r28, 0x04	; 4
    15e4:	9f af       	std	Y+63, r25	; 0x3f
    15e6:	24 97       	sbiw	r28, 0x04	; 4
    15e8:	28 2d       	mov	r18, r8
    15ea:	39 2d       	mov	r19, r9
    15ec:	4a 2d       	mov	r20, r10
    15ee:	5b 2d       	mov	r21, r11
    15f0:	6c 2d       	mov	r22, r12
    15f2:	7d 2d       	mov	r23, r13
    15f4:	8e 2d       	mov	r24, r14
    15f6:	9f 2d       	mov	r25, r15
    15f8:	ac ac       	ldd	r10, Y+60	; 0x3c
    15fa:	bd ac       	ldd	r11, Y+61	; 0x3d
    15fc:	ce ac       	ldd	r12, Y+62	; 0x3e
    15fe:	df ac       	ldd	r13, Y+63	; 0x3f
    1600:	21 96       	adiw	r28, 0x01	; 1
    1602:	ef ac       	ldd	r14, Y+63	; 0x3f
    1604:	21 97       	sbiw	r28, 0x01	; 1
    1606:	22 96       	adiw	r28, 0x02	; 2
    1608:	ff ac       	ldd	r15, Y+63	; 0x3f
    160a:	22 97       	sbiw	r28, 0x02	; 2
    160c:	23 96       	adiw	r28, 0x03	; 3
    160e:	0f ad       	ldd	r16, Y+63	; 0x3f
    1610:	23 97       	sbiw	r28, 0x03	; 3
    1612:	24 96       	adiw	r28, 0x04	; 4
    1614:	1f ad       	ldd	r17, Y+63	; 0x3f
    1616:	24 97       	sbiw	r28, 0x04	; 4
    1618:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__adddi3>
    161c:	22 2e       	mov	r2, r18
    161e:	33 2e       	mov	r3, r19
    1620:	44 2e       	mov	r4, r20
    1622:	55 2e       	mov	r5, r21
    1624:	66 2e       	mov	r6, r22
    1626:	77 2e       	mov	r7, r23
    1628:	88 2e       	mov	r8, r24
    162a:	99 2e       	mov	r9, r25
    162c:	0f 2e       	mov	r0, r31
    162e:	f6 e0       	ldi	r31, 0x06	; 6
    1630:	af 2e       	mov	r10, r31
    1632:	f0 2d       	mov	r31, r0
    1634:	b1 2c       	mov	r11, r1
    1636:	c1 2c       	mov	r12, r1
    1638:	d1 2c       	mov	r13, r1
    163a:	e1 2c       	mov	r14, r1
    163c:	f1 2c       	mov	r15, r1
    163e:	00 e0       	ldi	r16, 0x00	; 0
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	22 2d       	mov	r18, r2
    1644:	33 2d       	mov	r19, r3
    1646:	44 2d       	mov	r20, r4
    1648:	55 2d       	mov	r21, r5
    164a:	66 2d       	mov	r22, r6
    164c:	77 2d       	mov	r23, r7
    164e:	88 2d       	mov	r24, r8
    1650:	99 2d       	mov	r25, r9
    1652:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <__udivdi3>
    1656:	22 2e       	mov	r2, r18
    1658:	33 2e       	mov	r3, r19
    165a:	44 2e       	mov	r4, r20
    165c:	55 2e       	mov	r5, r21
    165e:	66 2e       	mov	r6, r22
    1660:	77 2e       	mov	r7, r23
    1662:	88 2e       	mov	r8, r24
    1664:	99 2e       	mov	r9, r25
    1666:	a2 2c       	mov	r10, r2
    1668:	b3 2c       	mov	r11, r3
    166a:	c4 2c       	mov	r12, r4
    166c:	d5 2c       	mov	r13, r5
    166e:	e6 2c       	mov	r14, r6
    1670:	f7 2c       	mov	r15, r7
    1672:	08 2d       	mov	r16, r8
    1674:	19 2d       	mov	r17, r9
    1676:	2a 2d       	mov	r18, r10
    1678:	3b 2d       	mov	r19, r11
    167a:	4c 2d       	mov	r20, r12
    167c:	5d 2d       	mov	r21, r13
    167e:	6e 2d       	mov	r22, r14
    1680:	7f 2d       	mov	r23, r15
    1682:	80 2f       	mov	r24, r16
    1684:	91 2f       	mov	r25, r17
    1686:	29 51       	subi	r18, 0x19	; 25
    1688:	3c 4f       	sbci	r19, 0xFC	; 252
    168a:	4f 4f       	sbci	r20, 0xFF	; 255
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	6f 4f       	sbci	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	a2 2e       	mov	r10, r18
    1698:	b3 2e       	mov	r11, r19
    169a:	c4 2e       	mov	r12, r20
    169c:	d5 2e       	mov	r13, r21
    169e:	e6 2e       	mov	r14, r22
    16a0:	f7 2e       	mov	r15, r23
    16a2:	08 2f       	mov	r16, r24
    16a4:	19 2f       	mov	r17, r25
    16a6:	2a 2d       	mov	r18, r10
    16a8:	3b 2d       	mov	r19, r11
    16aa:	4c 2d       	mov	r20, r12
    16ac:	5d 2d       	mov	r21, r13
    16ae:	6e 2d       	mov	r22, r14
    16b0:	7f 2d       	mov	r23, r15
    16b2:	80 2f       	mov	r24, r16
    16b4:	91 2f       	mov	r25, r17
    16b6:	0e 94 02 34 	call	0x6804	; 0x6804 <__floatundisf>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a e7       	ldi	r20, 0x7A	; 122
    16c4:	54 e4       	ldi	r21, 0x44	; 68
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__divsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 cd 33 	call	0x679a	; 0x679a <__fixunssfdi>
    16da:	a2 2e       	mov	r10, r18
    16dc:	b3 2e       	mov	r11, r19
    16de:	c4 2e       	mov	r12, r20
    16e0:	d5 2e       	mov	r13, r21
    16e2:	e6 2e       	mov	r14, r22
    16e4:	f7 2e       	mov	r15, r23
    16e6:	08 2f       	mov	r16, r24
    16e8:	19 2f       	mov	r17, r25
    16ea:	d6 01       	movw	r26, r12
    16ec:	c5 01       	movw	r24, r10
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 6f 01 	call	0x2de	; 0x2de <__portable_avr_delay_cycles>

	acelz+=data;
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	29 81       	ldd	r18, Y+1	; 0x01
    16fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1700:	82 0f       	add	r24, r18
    1702:	93 1f       	adc	r25, r19
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	9a 83       	std	Y+2, r25	; 0x02
	return acelz;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    170c:	cd 5b       	subi	r28, 0xBD	; 189
    170e:	df 4f       	sbci	r29, 0xFF	; 255
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	7f 90       	pop	r7
    172e:	6f 90       	pop	r6
    1730:	5f 90       	pop	r5
    1732:	4f 90       	pop	r4
    1734:	3f 90       	pop	r3
    1736:	2f 90       	pop	r2
    1738:	08 95       	ret

0000173a <xbee_init>:
#include "Xbee.h"
static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

void xbee_init()
{
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	
	xbee_uart.Baud=XBEEBAUD;
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	92 ec       	ldi	r25, 0xC2	; 194
    1746:	a1 e0       	ldi	r26, 0x01	; 1
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <__data_end+0x6>
    174e:	90 93 af 20 	sts	0x20AF, r25	; 0x8020af <__data_end+0x7>
    1752:	a0 93 b0 20 	sts	0x20B0, r26	; 0x8020b0 <__data_end+0x8>
    1756:	b0 93 b1 20 	sts	0x20B1, r27	; 0x8020b1 <__data_end+0x9>
	xbee_uart.Port=P_XBEEPORT;
    175a:	80 ea       	ldi	r24, 0xA0	; 160
    175c:	96 e0       	ldi	r25, 0x06	; 6
    175e:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <__data_end>
    1762:	90 93 a9 20 	sts	0x20A9, r25	; 0x8020a9 <__data_end+0x1>
	xbee_uart.Usart=P_XBEEUART;
    1766:	80 ea       	ldi	r24, 0xA0	; 160
    1768:	9b e0       	ldi	r25, 0x0B	; 11
    176a:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <__data_end+0x2>
    176e:	90 93 ab 20 	sts	0x20AB, r25	; 0x8020ab <__data_end+0x3>
	xbee_uart.tx=XBEETXPIN;
    1772:	88 e0       	ldi	r24, 0x08	; 8
    1774:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <__data_end+0x5>
	xbee_uart.rx=XBEERXPIN;
    1778:	84 e0       	ldi	r24, 0x04	; 4
    177a:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end+0x4>
	uart_init(&xbee_uart);
    177e:	88 ea       	ldi	r24, 0xA8	; 168
    1780:	90 e2       	ldi	r25, 0x20	; 32
    1782:	0e 94 84 2a 	call	0x5508	; 0x5508 <uart_init>
	XBEE_UART.CTRLA=0x14;
    1786:	80 ea       	ldi	r24, 0xA0	; 160
    1788:	9b e0       	ldi	r25, 0x0B	; 11
    178a:	24 e1       	ldi	r18, 0x14	; 20
    178c:	fc 01       	movw	r30, r24
    178e:	23 83       	std	Z+3, r18	; 0x03
}
    1790:	00 00       	nop
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	1f 92       	push	r1
    179e:	1f 92       	push	r1
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	9a 83       	std	Y+2, r25	; 0x02
	printf("\n%i\n",strlen(data));
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	0e 94 94 36 	call	0x6d28	; 0x6d28 <strlen>
    17b0:	29 2f       	mov	r18, r25
    17b2:	2f 93       	push	r18
    17b4:	8f 93       	push	r24
    17b6:	84 e1       	ldi	r24, 0x14	; 20
    17b8:	90 e2       	ldi	r25, 0x20	; 32
    17ba:	89 2f       	mov	r24, r25
    17bc:	8f 93       	push	r24
    17be:	84 e1       	ldi	r24, 0x14	; 20
    17c0:	90 e2       	ldi	r25, 0x20	; 32
    17c2:	8f 93       	push	r24
    17c4:	0e 94 e7 36 	call	0x6dce	; 0x6dce <printf>
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	0e 94 94 36 	call	0x6d28	; 0x6d28 <strlen>
    17d8:	9c 01       	movw	r18, r24
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	a9 01       	movw	r20, r18
    17e0:	bc 01       	movw	r22, r24
    17e2:	80 ea       	ldi	r24, 0xA0	; 160
    17e4:	9b e0       	ldi	r25, 0x0B	; 11
    17e6:	59 d1       	rcall	.+690    	; 0x1a9a <usart_serial_write_packet>
	//uart_write(P_XBEEUART,data);
	
	
	
}
    17e8:	00 00       	nop
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <__vector_119>:

ISR(READ_INTURUPT)
{
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1804:	0f 92       	push	r0
    1806:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    180a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    180e:	0f 92       	push	r0
    1810:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1814:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1818:	0f 92       	push	r0
    181a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    181e:	8f 93       	push	r24
    1820:	9f 93       	push	r25
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    182e:	80 ea       	ldi	r24, 0xA0	; 160
    1830:	9b e0       	ldi	r25, 0x0B	; 11
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
    1836:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <XbeeRx>
    183a:	00 00       	nop
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	0f 90       	pop	r0
    184a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    184e:	0f 90       	pop	r0
    1850:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1854:	0f 90       	pop	r0
    1856:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    185a:	0f 90       	pop	r0
    185c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	1f 92       	push	r1
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    1870:	8f e3       	ldi	r24, 0x3F	; 63
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    187a:	f8 94       	cli
	return flags;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
}
    187e:	0f 90       	pop	r0
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	1f 92       	push	r1
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    1892:	8f e3       	ldi	r24, 0x3F	; 63
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	29 81       	ldd	r18, Y+1	; 0x01
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
}
    189c:	00 00       	nop
    189e:	0f 90       	pop	r0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	1f 92       	push	r1
    18ac:	1f 92       	push	r1
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    18b4:	d8 df       	rcall	.-80     	; 0x1866 <cpu_irq_save>
    18b6:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    18b8:	80 e5       	ldi	r24, 0x50	; 80
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	20 e5       	ldi	r18, 0x50	; 80
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	f9 01       	movw	r30, r18
    18c2:	30 81       	ld	r19, Z
    18c4:	2a 81       	ldd	r18, Y+2	; 0x02
    18c6:	23 2b       	or	r18, r19
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	db df       	rcall	.-74     	; 0x1886 <cpu_irq_restore>
}
    18d0:	00 00       	nop
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	1f 92       	push	r1
    18e2:	1f 92       	push	r1
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    18ea:	80 e5       	ldi	r24, 0x50	; 80
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	22 e0       	ldi	r18, 0x02	; 2
    18f0:	fc 01       	movw	r30, r24
    18f2:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    18f4:	b8 df       	rcall	.-144    	; 0x1866 <cpu_irq_save>
    18f6:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    18f8:	80 e5       	ldi	r24, 0x50	; 80
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	20 e5       	ldi	r18, 0x50	; 80
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	f9 01       	movw	r30, r18
    1902:	30 81       	ld	r19, Z
    1904:	2a 81       	ldd	r18, Y+2	; 0x02
    1906:	23 2b       	or	r18, r19
    1908:	fc 01       	movw	r30, r24
    190a:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	bb df       	rcall	.-138    	; 0x1886 <cpu_irq_restore>
}
    1910:	00 00       	nop
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	1f 92       	push	r1
    1922:	1f 92       	push	r1
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    192a:	9d df       	rcall	.-198    	; 0x1866 <cpu_irq_save>
    192c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    192e:	80 e5       	ldi	r24, 0x50	; 80
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	20 e5       	ldi	r18, 0x50	; 80
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	f9 01       	movw	r30, r18
    1938:	20 81       	ld	r18, Z
    193a:	32 2f       	mov	r19, r18
    193c:	2a 81       	ldd	r18, Y+2	; 0x02
    193e:	20 95       	com	r18
    1940:	23 23       	and	r18, r19
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9e df       	rcall	.-196    	; 0x1886 <cpu_irq_restore>
}
    194a:	00 00       	nop
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	1f 92       	push	r1
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 30       	cpi	r24, 0x08	; 8
    1966:	19 f0       	breq	.+6      	; 0x196e <osc_enable+0x18>
		osc_enable_internal(id);
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9d df       	rcall	.-198    	; 0x18a6 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	b5 df       	rcall	.-150    	; 0x18dc <osc_enable_external>
	}
}
    1972:	00 00       	nop
    1974:	0f 90       	pop	r0
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	1f 92       	push	r1
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1988:	80 e5       	ldi	r24, 0x50	; 80
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	fc 01       	movw	r30, r24
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	98 23       	and	r25, r24
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	99 23       	and	r25, r25
    1998:	09 f4       	brne	.+2      	; 0x199c <osc_is_ready+0x20>
    199a:	80 e0       	ldi	r24, 0x00	; 0
}
    199c:	0f 90       	pop	r0
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	1f 92       	push	r1
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    19b0:	00 00       	nop
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	e3 df       	rcall	.-58     	; 0x197c <osc_is_ready>
    19b6:	98 2f       	mov	r25, r24
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 27       	eor	r24, r25
    19bc:	88 23       	and	r24, r24
    19be:	c9 f7       	brne	.-14     	; 0x19b2 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    19c0:	00 00       	nop
    19c2:	0f 90       	pop	r0
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <sysclk_init+0x6>
    19d0:	1f 92       	push	r1
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    19d6:	80 e7       	ldi	r24, 0x70	; 112
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    19de:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    19e0:	1b 82       	std	Y+3, r1	; 0x03
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <sysclk_init+0x34>
		*(reg++) = 0xff;
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	9c 01       	movw	r18, r24
    19ea:	2f 5f       	subi	r18, 0xFF	; 255
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	29 83       	std	Y+1, r18	; 0x01
    19f0:	3a 83       	std	Y+2, r19	; 0x02
    19f2:	2f ef       	ldi	r18, 0xFF	; 255
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	87 30       	cpi	r24, 0x07	; 7
    1a02:	80 f3       	brcs	.-32     	; 0x19e4 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	a7 df       	rcall	.-178    	; 0x1956 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	cc df       	rcall	.-104    	; 0x19a4 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    1a0c:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	80 e4       	ldi	r24, 0x40	; 64
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	ab d0       	rcall	.+342    	; 0x1b6c <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <sysclk_init+0x56>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	7e df       	rcall	.-260    	; 0x191c <osc_disable>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1a20:	24 96       	adiw	r28, 0x04	; 4
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <sysclk_enable_module+0x6>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	8a 83       	std	Y+2, r24	; 0x02
    1a38:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    1a3a:	15 df       	rcall	.-470    	; 0x1866 <cpu_irq_save>
    1a3c:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	80 59       	subi	r24, 0x90	; 144
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	2a 81       	ldd	r18, Y+2	; 0x02
    1a4a:	22 2f       	mov	r18, r18
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	20 59       	subi	r18, 0x90	; 144
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	f9 01       	movw	r30, r18
    1a54:	20 81       	ld	r18, Z
    1a56:	32 2f       	mov	r19, r18
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	20 95       	com	r18
    1a5c:	23 23       	and	r18, r19
    1a5e:	fc 01       	movw	r30, r24
    1a60:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	10 df       	rcall	.-480    	; 0x1886 <cpu_irq_restore>
}
    1a66:	00 00       	nop
    1a68:	23 96       	adiw	r28, 0x03	; 3
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <usart_serial_putchar+0x6>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	6b 83       	std	Y+3, r22	; 0x03
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	6b 81       	ldd	r22, Y+3	; 0x03
    1a8a:	0e 94 83 22 	call	0x4506	; 0x4506 <usart_putchar>
    1a8e:	23 96       	adiw	r28, 0x03	; 3
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret

00001a9a <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <usart_serial_write_packet+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <usart_serial_write_packet+0x8>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	6b 83       	std	Y+3, r22	; 0x03
    1aac:	7c 83       	std	Y+4, r23	; 0x04
    1aae:	4d 83       	std	Y+5, r20	; 0x05
    1ab0:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    1ab2:	12 c0       	rjmp	.+36     	; 0x1ad8 <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	fc 01       	movw	r30, r24
    1aba:	20 81       	ld	r18, Z
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	62 2f       	mov	r22, r18
    1ac2:	d8 df       	rcall	.-80     	; 0x1a74 <usart_serial_putchar>
		len--;
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	89 2b       	or	r24, r25
    1ade:	51 f7       	brne	.-44     	; 0x1ab4 <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ae2:	26 96       	adiw	r28, 0x06	; 6
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <_read+0x6>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8a 83       	std	Y+2, r24	; 0x02
    1afa:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    1afc:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <ptr_get>
    1b00:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <ptr_get+0x1>
    1b04:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <stdio_base>
    1b08:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <stdio_base+0x1>
    1b0c:	ae 01       	movw	r20, r28
    1b0e:	4f 5f       	subi	r20, 0xFF	; 255
    1b10:	5f 4f       	sbci	r21, 0xFF	; 255
    1b12:	ba 01       	movw	r22, r20
    1b14:	f9 01       	movw	r30, r18
    1b16:	19 95       	eicall
	return c;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	08 2e       	mov	r0, r24
    1b1c:	00 0c       	add	r0, r0
    1b1e:	99 0b       	sbc	r25, r25
}
    1b20:	23 96       	adiw	r28, 0x03	; 3
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <_write+0x6>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	6a 83       	std	Y+2, r22	; 0x02
    1b3a:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    1b3c:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <ptr_put>
    1b40:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <ptr_put+0x1>
    1b44:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <stdio_base>
    1b48:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <stdio_base+0x1>
    1b4c:	69 81       	ldd	r22, Y+1	; 0x01
    1b4e:	f9 01       	movw	r30, r18
    1b50:	19 95       	eicall
    1b52:	99 23       	and	r25, r25
    1b54:	1c f4       	brge	.+6      	; 0x1b5c <_write+0x30>
		return -1;
    1b56:	8f ef       	ldi	r24, 0xFF	; 255
    1b58:	9f ef       	ldi	r25, 0xFF	; 255
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <_write+0x34>
	}
	return 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
}
    1b60:	23 96       	adiw	r28, 0x03	; 3
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	08 95       	ret

00001b6c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b6c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b6e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b70:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b72:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b74:	60 83       	st	Z, r22
	ret                             // Return to caller
    1b76:	08 95       	ret

00001b78 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b80:	0f 92       	push	r0
    1b82:	11 24       	eor	r1, r1
    1b84:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b88:	0f 92       	push	r0
    1b8a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b8e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b92:	0f 92       	push	r0
    1b94:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    1ba4:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rtc_data>
    1ba8:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rtc_data+0x1>
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <rtc_data>
    1bb2:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <rtc_data+0x1>
}
    1bb6:	00 00       	nop
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	0f 90       	pop	r0
    1bc2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bc6:	0f 90       	pop	r0
    1bc8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bcc:	0f 90       	pop	r0
    1bce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1bd8:	1f 92       	push	r1
    1bda:	0f 92       	push	r0
    1bdc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1be8:	0f 92       	push	r0
    1bea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1bf2:	0f 92       	push	r0
    1bf4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1bf8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bfc:	0f 92       	push	r0
    1bfe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c02:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c06:	0f 92       	push	r0
    1c08:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c0c:	2f 93       	push	r18
    1c0e:	3f 93       	push	r19
    1c10:	4f 93       	push	r20
    1c12:	5f 93       	push	r21
    1c14:	6f 93       	push	r22
    1c16:	7f 93       	push	r23
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	28 97       	sbiw	r28, 0x08	; 8
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1c32:	20 91 14 21 	lds	r18, 0x2114	; 0x802114 <rtc_data>
    1c36:	30 91 15 21 	lds	r19, 0x2115	; 0x802115 <rtc_data+0x1>
    1c3a:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rtc_data+0x2>
    1c3e:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rtc_data+0x3>
    1c42:	28 17       	cp	r18, r24
    1c44:	39 07       	cpc	r19, r25
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <__vector_11+0x72>
    1c48:	63 c0       	rjmp	.+198    	; 0x1d10 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	94 e0       	ldi	r25, 0x04	; 4
    1c4e:	21 e0       	ldi	r18, 0x01	; 1
    1c50:	fc 01       	movw	r30, r24
    1c52:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    1c54:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rtc_data+0x6>
    1c58:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rtc_data+0x7>
    1c5c:	89 2b       	or	r24, r25
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <__vector_11+0x8a>
    1c60:	57 c0       	rjmp	.+174    	; 0x1d10 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    1c62:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rtc_data>
    1c66:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rtc_data+0x1>
    1c6a:	cc 01       	movw	r24, r24
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	ac 01       	movw	r20, r24
    1c72:	33 27       	eor	r19, r19
    1c74:	22 27       	eor	r18, r18
					| RTC.CNT;
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	94 e0       	ldi	r25, 0x04	; 4
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 85       	ldd	r24, Z+8	; 0x08
    1c7e:	91 85       	ldd	r25, Z+9	; 0x09
    1c80:	cc 01       	movw	r24, r24
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    1c86:	82 2b       	or	r24, r18
    1c88:	93 2b       	or	r25, r19
    1c8a:	a4 2b       	or	r26, r20
    1c8c:	b5 2b       	or	r27, r21
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	ab 83       	std	Y+3, r26	; 0x03
    1c94:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    1c96:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rtc_data+0x2>
    1c9a:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rtc_data+0x3>
    1c9e:	cc 01       	movw	r24, r24
    1ca0:	a0 e0       	ldi	r26, 0x00	; 0
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	33 27       	eor	r19, r19
    1ca8:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    1caa:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <rtc_data+0x4>
    1cae:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <rtc_data+0x5>
    1cb2:	cc 01       	movw	r24, r24
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    1cb8:	82 2b       	or	r24, r18
    1cba:	93 2b       	or	r25, r19
    1cbc:	a4 2b       	or	r26, r20
    1cbe:	b5 2b       	or	r27, r21
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	af 83       	std	Y+7, r26	; 0x07
    1cc6:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    1cc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cca:	3e 81       	ldd	r19, Y+6	; 0x06
    1ccc:	4f 81       	ldd	r20, Y+7	; 0x07
    1cce:	58 85       	ldd	r21, Y+8	; 0x08
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    1cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    1cd8:	28 17       	cp	r18, r24
    1cda:	39 07       	cpc	r19, r25
    1cdc:	4a 07       	cpc	r20, r26
    1cde:	5b 07       	cpc	r21, r27
    1ce0:	58 f0       	brcs	.+22     	; 0x1cf8 <__vector_11+0x120>
				count = alarm + 1;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	af 81       	ldd	r26, Y+7	; 0x07
    1ce8:	b8 85       	ldd	r27, Y+8	; 0x08
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	a1 1d       	adc	r26, r1
    1cee:	b1 1d       	adc	r27, r1
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	ab 83       	std	Y+3, r26	; 0x03
    1cf6:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    1cf8:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <rtc_data+0x6>
    1cfc:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <rtc_data+0x7>
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	ab 81       	ldd	r26, Y+3	; 0x03
    1d06:	bc 81       	ldd	r27, Y+4	; 0x04
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	19 95       	eicall
		}
	}
}
    1d10:	00 00       	nop
    1d12:	28 96       	adiw	r28, 0x08	; 8
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	ff 91       	pop	r31
    1d1e:	ef 91       	pop	r30
    1d20:	bf 91       	pop	r27
    1d22:	af 91       	pop	r26
    1d24:	9f 91       	pop	r25
    1d26:	8f 91       	pop	r24
    1d28:	7f 91       	pop	r23
    1d2a:	6f 91       	pop	r22
    1d2c:	5f 91       	pop	r21
    1d2e:	4f 91       	pop	r20
    1d30:	3f 91       	pop	r19
    1d32:	2f 91       	pop	r18
    1d34:	0f 90       	pop	r0
    1d36:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d3a:	0f 90       	pop	r0
    1d3c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d40:	0f 90       	pop	r0
    1d42:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d46:	0f 90       	pop	r0
    1d48:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d4c:	0f 90       	pop	r0
    1d4e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d52:	0f 90       	pop	r0
    1d54:	1f 90       	pop	r1
    1d56:	18 95       	reti

00001d58 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    1d58:	1f 92       	push	r1
    1d5a:	0f 92       	push	r0
    1d5c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d68:	0f 92       	push	r0
    1d6a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d6e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d72:	0f 92       	push	r0
    1d74:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d78:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d7c:	0f 92       	push	r0
    1d7e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d82:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d86:	0f 92       	push	r0
    1d88:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d8c:	2f 93       	push	r18
    1d8e:	3f 93       	push	r19
    1d90:	4f 93       	push	r20
    1d92:	5f 93       	push	r21
    1d94:	6f 93       	push	r22
    1d96:	7f 93       	push	r23
    1d98:	8f 93       	push	r24
    1d9a:	9f 93       	push	r25
    1d9c:	af 93       	push	r26
    1d9e:	bf 93       	push	r27
    1da0:	ef 93       	push	r30
    1da2:	ff 93       	push	r31
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    1dac:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcc0_ovf_callback>
    1db0:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcc0_ovf_callback+0x1>
    1db4:	89 2b       	or	r24, r25
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    1db8:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcc0_ovf_callback>
    1dbc:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcc0_ovf_callback+0x1>
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	19 95       	eicall
	}
}
    1dc4:	00 00       	nop
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	ff 91       	pop	r31
    1dcc:	ef 91       	pop	r30
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1de8:	0f 90       	pop	r0
    1dea:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1dee:	0f 90       	pop	r0
    1df0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1df4:	0f 90       	pop	r0
    1df6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1dfa:	0f 90       	pop	r0
    1dfc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    1e06:	1f 92       	push	r1
    1e08:	0f 92       	push	r0
    1e0a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e16:	0f 92       	push	r0
    1e18:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e1c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e20:	0f 92       	push	r0
    1e22:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e26:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e2a:	0f 92       	push	r0
    1e2c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e30:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e34:	0f 92       	push	r0
    1e36:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    1e5a:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcc0_err_callback>
    1e5e:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcc0_err_callback+0x1>
    1e62:	89 2b       	or	r24, r25
    1e64:	31 f0       	breq	.+12     	; 0x1e72 <__vector_15+0x6c>
		tc_tcc0_err_callback();
    1e66:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcc0_err_callback>
    1e6a:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcc0_err_callback+0x1>
    1e6e:	fc 01       	movw	r30, r24
    1e70:	19 95       	eicall
	}
}
    1e72:	00 00       	nop
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	ff 91       	pop	r31
    1e7a:	ef 91       	pop	r30
    1e7c:	bf 91       	pop	r27
    1e7e:	af 91       	pop	r26
    1e80:	9f 91       	pop	r25
    1e82:	8f 91       	pop	r24
    1e84:	7f 91       	pop	r23
    1e86:	6f 91       	pop	r22
    1e88:	5f 91       	pop	r21
    1e8a:	4f 91       	pop	r20
    1e8c:	3f 91       	pop	r19
    1e8e:	2f 91       	pop	r18
    1e90:	0f 90       	pop	r0
    1e92:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e96:	0f 90       	pop	r0
    1e98:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e9c:	0f 90       	pop	r0
    1e9e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ea2:	0f 90       	pop	r0
    1ea4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ea8:	0f 90       	pop	r0
    1eaa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1eae:	0f 90       	pop	r0
    1eb0:	1f 90       	pop	r1
    1eb2:	18 95       	reti

00001eb4 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ebc:	0f 92       	push	r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ec4:	0f 92       	push	r0
    1ec6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1eca:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ece:	0f 92       	push	r0
    1ed0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ed4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ed8:	0f 92       	push	r0
    1eda:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ede:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ee2:	0f 92       	push	r0
    1ee4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ee8:	2f 93       	push	r18
    1eea:	3f 93       	push	r19
    1eec:	4f 93       	push	r20
    1eee:	5f 93       	push	r21
    1ef0:	6f 93       	push	r22
    1ef2:	7f 93       	push	r23
    1ef4:	8f 93       	push	r24
    1ef6:	9f 93       	push	r25
    1ef8:	af 93       	push	r26
    1efa:	bf 93       	push	r27
    1efc:	ef 93       	push	r30
    1efe:	ff 93       	push	r31
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    1f08:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcc0_cca_callback>
    1f0c:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcc0_cca_callback+0x1>
    1f10:	89 2b       	or	r24, r25
    1f12:	31 f0       	breq	.+12     	; 0x1f20 <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    1f14:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcc0_cca_callback>
    1f18:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcc0_cca_callback+0x1>
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	19 95       	eicall
	}
}
    1f20:	00 00       	nop
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	ff 91       	pop	r31
    1f28:	ef 91       	pop	r30
    1f2a:	bf 91       	pop	r27
    1f2c:	af 91       	pop	r26
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	7f 91       	pop	r23
    1f34:	6f 91       	pop	r22
    1f36:	5f 91       	pop	r21
    1f38:	4f 91       	pop	r20
    1f3a:	3f 91       	pop	r19
    1f3c:	2f 91       	pop	r18
    1f3e:	0f 90       	pop	r0
    1f40:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f44:	0f 90       	pop	r0
    1f46:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f4a:	0f 90       	pop	r0
    1f4c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f50:	0f 90       	pop	r0
    1f52:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f56:	0f 90       	pop	r0
    1f58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f6a:	0f 92       	push	r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f72:	0f 92       	push	r0
    1f74:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f78:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f7c:	0f 92       	push	r0
    1f7e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f82:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f86:	0f 92       	push	r0
    1f88:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f8c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f90:	0f 92       	push	r0
    1f92:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f96:	2f 93       	push	r18
    1f98:	3f 93       	push	r19
    1f9a:	4f 93       	push	r20
    1f9c:	5f 93       	push	r21
    1f9e:	6f 93       	push	r22
    1fa0:	7f 93       	push	r23
    1fa2:	8f 93       	push	r24
    1fa4:	9f 93       	push	r25
    1fa6:	af 93       	push	r26
    1fa8:	bf 93       	push	r27
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    1fb6:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcc0_ccb_callback>
    1fba:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcc0_ccb_callback+0x1>
    1fbe:	89 2b       	or	r24, r25
    1fc0:	31 f0       	breq	.+12     	; 0x1fce <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    1fc2:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcc0_ccb_callback>
    1fc6:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcc0_ccb_callback+0x1>
    1fca:	fc 01       	movw	r30, r24
    1fcc:	19 95       	eicall
	}
}
    1fce:	00 00       	nop
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	ff 91       	pop	r31
    1fd6:	ef 91       	pop	r30
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	0f 90       	pop	r0
    1fee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ff2:	0f 90       	pop	r0
    1ff4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ff8:	0f 90       	pop	r0
    1ffa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ffe:	0f 90       	pop	r0
    2000:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2004:	0f 90       	pop	r0
    2006:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2018:	0f 92       	push	r0
    201a:	11 24       	eor	r1, r1
    201c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2020:	0f 92       	push	r0
    2022:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2026:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    202a:	0f 92       	push	r0
    202c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2030:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2034:	0f 92       	push	r0
    2036:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    203a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    203e:	0f 92       	push	r0
    2040:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	ef 93       	push	r30
    205a:	ff 93       	push	r31
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    2064:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tcc0_ccc_callback>
    2068:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tcc0_ccc_callback+0x1>
    206c:	89 2b       	or	r24, r25
    206e:	31 f0       	breq	.+12     	; 0x207c <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    2070:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tcc0_ccc_callback>
    2074:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tcc0_ccc_callback+0x1>
    2078:	fc 01       	movw	r30, r24
    207a:	19 95       	eicall
	}
}
    207c:	00 00       	nop
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	ff 91       	pop	r31
    2084:	ef 91       	pop	r30
    2086:	bf 91       	pop	r27
    2088:	af 91       	pop	r26
    208a:	9f 91       	pop	r25
    208c:	8f 91       	pop	r24
    208e:	7f 91       	pop	r23
    2090:	6f 91       	pop	r22
    2092:	5f 91       	pop	r21
    2094:	4f 91       	pop	r20
    2096:	3f 91       	pop	r19
    2098:	2f 91       	pop	r18
    209a:	0f 90       	pop	r0
    209c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20a0:	0f 90       	pop	r0
    20a2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20a6:	0f 90       	pop	r0
    20a8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20ac:	0f 90       	pop	r0
    20ae:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20b2:	0f 90       	pop	r0
    20b4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20b8:	0f 90       	pop	r0
    20ba:	1f 90       	pop	r1
    20bc:	18 95       	reti

000020be <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20ce:	0f 92       	push	r0
    20d0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20d4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20d8:	0f 92       	push	r0
    20da:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20de:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20e2:	0f 92       	push	r0
    20e4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20e8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20ec:	0f 92       	push	r0
    20ee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20f2:	2f 93       	push	r18
    20f4:	3f 93       	push	r19
    20f6:	4f 93       	push	r20
    20f8:	5f 93       	push	r21
    20fa:	6f 93       	push	r22
    20fc:	7f 93       	push	r23
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    2112:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tcc0_ccd_callback>
    2116:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tcc0_ccd_callback+0x1>
    211a:	89 2b       	or	r24, r25
    211c:	31 f0       	breq	.+12     	; 0x212a <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    211e:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tcc0_ccd_callback>
    2122:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tcc0_ccd_callback+0x1>
    2126:	fc 01       	movw	r30, r24
    2128:	19 95       	eicall
	}
}
    212a:	00 00       	nop
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    214e:	0f 90       	pop	r0
    2150:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2154:	0f 90       	pop	r0
    2156:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    215a:	0f 90       	pop	r0
    215c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2160:	0f 90       	pop	r0
    2162:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    216c:	1f 92       	push	r1
    216e:	0f 92       	push	r0
    2170:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2174:	0f 92       	push	r0
    2176:	11 24       	eor	r1, r1
    2178:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    217c:	0f 92       	push	r0
    217e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2182:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2186:	0f 92       	push	r0
    2188:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    218c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2190:	0f 92       	push	r0
    2192:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2196:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    219a:	0f 92       	push	r0
    219c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21a0:	2f 93       	push	r18
    21a2:	3f 93       	push	r19
    21a4:	4f 93       	push	r20
    21a6:	5f 93       	push	r21
    21a8:	6f 93       	push	r22
    21aa:	7f 93       	push	r23
    21ac:	8f 93       	push	r24
    21ae:	9f 93       	push	r25
    21b0:	af 93       	push	r26
    21b2:	bf 93       	push	r27
    21b4:	ef 93       	push	r30
    21b6:	ff 93       	push	r31
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    21c0:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tcc1_ovf_callback>
    21c4:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tcc1_ovf_callback+0x1>
    21c8:	89 2b       	or	r24, r25
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    21cc:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tcc1_ovf_callback>
    21d0:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tcc1_ovf_callback+0x1>
    21d4:	fc 01       	movw	r30, r24
    21d6:	19 95       	eicall
	}
}
    21d8:	00 00       	nop
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	bf 91       	pop	r27
    21e4:	af 91       	pop	r26
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	7f 91       	pop	r23
    21ec:	6f 91       	pop	r22
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21fc:	0f 90       	pop	r0
    21fe:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2202:	0f 90       	pop	r0
    2204:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2208:	0f 90       	pop	r0
    220a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    220e:	0f 90       	pop	r0
    2210:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2222:	0f 92       	push	r0
    2224:	11 24       	eor	r1, r1
    2226:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    222a:	0f 92       	push	r0
    222c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2230:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2234:	0f 92       	push	r0
    2236:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    223a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    223e:	0f 92       	push	r0
    2240:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2244:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2248:	0f 92       	push	r0
    224a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    224e:	2f 93       	push	r18
    2250:	3f 93       	push	r19
    2252:	4f 93       	push	r20
    2254:	5f 93       	push	r21
    2256:	6f 93       	push	r22
    2258:	7f 93       	push	r23
    225a:	8f 93       	push	r24
    225c:	9f 93       	push	r25
    225e:	af 93       	push	r26
    2260:	bf 93       	push	r27
    2262:	ef 93       	push	r30
    2264:	ff 93       	push	r31
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    226e:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcc1_err_callback>
    2272:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcc1_err_callback+0x1>
    2276:	89 2b       	or	r24, r25
    2278:	31 f0       	breq	.+12     	; 0x2286 <__vector_21+0x6c>
		tc_tcc1_err_callback();
    227a:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcc1_err_callback>
    227e:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcc1_err_callback+0x1>
    2282:	fc 01       	movw	r30, r24
    2284:	19 95       	eicall
	}
}
    2286:	00 00       	nop
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	ff 91       	pop	r31
    228e:	ef 91       	pop	r30
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	0f 90       	pop	r0
    22a6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22aa:	0f 90       	pop	r0
    22ac:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22b0:	0f 90       	pop	r0
    22b2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22b6:	0f 90       	pop	r0
    22b8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22bc:	0f 90       	pop	r0
    22be:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti

000022c8 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    22c8:	1f 92       	push	r1
    22ca:	0f 92       	push	r0
    22cc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22d0:	0f 92       	push	r0
    22d2:	11 24       	eor	r1, r1
    22d4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22d8:	0f 92       	push	r0
    22da:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22de:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22e2:	0f 92       	push	r0
    22e4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22e8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22ec:	0f 92       	push	r0
    22ee:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22f2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22f6:	0f 92       	push	r0
    22f8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22fc:	2f 93       	push	r18
    22fe:	3f 93       	push	r19
    2300:	4f 93       	push	r20
    2302:	5f 93       	push	r21
    2304:	6f 93       	push	r22
    2306:	7f 93       	push	r23
    2308:	8f 93       	push	r24
    230a:	9f 93       	push	r25
    230c:	af 93       	push	r26
    230e:	bf 93       	push	r27
    2310:	ef 93       	push	r30
    2312:	ff 93       	push	r31
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    231c:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcc1_cca_callback>
    2320:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcc1_cca_callback+0x1>
    2324:	89 2b       	or	r24, r25
    2326:	31 f0       	breq	.+12     	; 0x2334 <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    2328:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcc1_cca_callback>
    232c:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcc1_cca_callback+0x1>
    2330:	fc 01       	movw	r30, r24
    2332:	19 95       	eicall
	}
}
    2334:	00 00       	nop
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	ff 91       	pop	r31
    233c:	ef 91       	pop	r30
    233e:	bf 91       	pop	r27
    2340:	af 91       	pop	r26
    2342:	9f 91       	pop	r25
    2344:	8f 91       	pop	r24
    2346:	7f 91       	pop	r23
    2348:	6f 91       	pop	r22
    234a:	5f 91       	pop	r21
    234c:	4f 91       	pop	r20
    234e:	3f 91       	pop	r19
    2350:	2f 91       	pop	r18
    2352:	0f 90       	pop	r0
    2354:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2358:	0f 90       	pop	r0
    235a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    235e:	0f 90       	pop	r0
    2360:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2364:	0f 90       	pop	r0
    2366:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    236a:	0f 90       	pop	r0
    236c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2370:	0f 90       	pop	r0
    2372:	1f 90       	pop	r1
    2374:	18 95       	reti

00002376 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    2376:	1f 92       	push	r1
    2378:	0f 92       	push	r0
    237a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2386:	0f 92       	push	r0
    2388:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    238c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2390:	0f 92       	push	r0
    2392:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2396:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    239a:	0f 92       	push	r0
    239c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23a0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23a4:	0f 92       	push	r0
    23a6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23aa:	2f 93       	push	r18
    23ac:	3f 93       	push	r19
    23ae:	4f 93       	push	r20
    23b0:	5f 93       	push	r21
    23b2:	6f 93       	push	r22
    23b4:	7f 93       	push	r23
    23b6:	8f 93       	push	r24
    23b8:	9f 93       	push	r25
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	ef 93       	push	r30
    23c0:	ff 93       	push	r31
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    23ca:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcc1_ccb_callback>
    23ce:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcc1_ccb_callback+0x1>
    23d2:	89 2b       	or	r24, r25
    23d4:	31 f0       	breq	.+12     	; 0x23e2 <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    23d6:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcc1_ccb_callback>
    23da:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcc1_ccb_callback+0x1>
    23de:	fc 01       	movw	r30, r24
    23e0:	19 95       	eicall
	}
}
    23e2:	00 00       	nop
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	0f 90       	pop	r0
    2402:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2406:	0f 90       	pop	r0
    2408:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    240c:	0f 90       	pop	r0
    240e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2412:	0f 90       	pop	r0
    2414:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2418:	0f 90       	pop	r0
    241a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    241e:	0f 90       	pop	r0
    2420:	1f 90       	pop	r1
    2422:	18 95       	reti

00002424 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    2424:	1f 92       	push	r1
    2426:	0f 92       	push	r0
    2428:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    242c:	0f 92       	push	r0
    242e:	11 24       	eor	r1, r1
    2430:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2434:	0f 92       	push	r0
    2436:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    243a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    243e:	0f 92       	push	r0
    2440:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2444:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2448:	0f 92       	push	r0
    244a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    244e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2452:	0f 92       	push	r0
    2454:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2458:	2f 93       	push	r18
    245a:	3f 93       	push	r19
    245c:	4f 93       	push	r20
    245e:	5f 93       	push	r21
    2460:	6f 93       	push	r22
    2462:	7f 93       	push	r23
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
    2468:	af 93       	push	r26
    246a:	bf 93       	push	r27
    246c:	ef 93       	push	r30
    246e:	ff 93       	push	r31
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    2478:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcd0_ovf_callback>
    247c:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcd0_ovf_callback+0x1>
    2480:	89 2b       	or	r24, r25
    2482:	31 f0       	breq	.+12     	; 0x2490 <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    2484:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcd0_ovf_callback>
    2488:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcd0_ovf_callback+0x1>
    248c:	fc 01       	movw	r30, r24
    248e:	19 95       	eicall
	}
}
    2490:	00 00       	nop
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	bf 91       	pop	r27
    249c:	af 91       	pop	r26
    249e:	9f 91       	pop	r25
    24a0:	8f 91       	pop	r24
    24a2:	7f 91       	pop	r23
    24a4:	6f 91       	pop	r22
    24a6:	5f 91       	pop	r21
    24a8:	4f 91       	pop	r20
    24aa:	3f 91       	pop	r19
    24ac:	2f 91       	pop	r18
    24ae:	0f 90       	pop	r0
    24b0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24b4:	0f 90       	pop	r0
    24b6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24ba:	0f 90       	pop	r0
    24bc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24c0:	0f 90       	pop	r0
    24c2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24c6:	0f 90       	pop	r0
    24c8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    24d2:	1f 92       	push	r1
    24d4:	0f 92       	push	r0
    24d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24da:	0f 92       	push	r0
    24dc:	11 24       	eor	r1, r1
    24de:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24e2:	0f 92       	push	r0
    24e4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24e8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24ec:	0f 92       	push	r0
    24ee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24f2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24f6:	0f 92       	push	r0
    24f8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24fc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2500:	0f 92       	push	r0
    2502:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2506:	2f 93       	push	r18
    2508:	3f 93       	push	r19
    250a:	4f 93       	push	r20
    250c:	5f 93       	push	r21
    250e:	6f 93       	push	r22
    2510:	7f 93       	push	r23
    2512:	8f 93       	push	r24
    2514:	9f 93       	push	r25
    2516:	af 93       	push	r26
    2518:	bf 93       	push	r27
    251a:	ef 93       	push	r30
    251c:	ff 93       	push	r31
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    2526:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcd0_err_callback>
    252a:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcd0_err_callback+0x1>
    252e:	89 2b       	or	r24, r25
    2530:	31 f0       	breq	.+12     	; 0x253e <__vector_78+0x6c>
		tc_tcd0_err_callback();
    2532:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcd0_err_callback>
    2536:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcd0_err_callback+0x1>
    253a:	fc 01       	movw	r30, r24
    253c:	19 95       	eicall
	}
}
    253e:	00 00       	nop
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	7f 91       	pop	r23
    2552:	6f 91       	pop	r22
    2554:	5f 91       	pop	r21
    2556:	4f 91       	pop	r20
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	0f 90       	pop	r0
    255e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2562:	0f 90       	pop	r0
    2564:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2568:	0f 90       	pop	r0
    256a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    256e:	0f 90       	pop	r0
    2570:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2574:	0f 90       	pop	r0
    2576:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    257a:	0f 90       	pop	r0
    257c:	1f 90       	pop	r1
    257e:	18 95       	reti

00002580 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2588:	0f 92       	push	r0
    258a:	11 24       	eor	r1, r1
    258c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2590:	0f 92       	push	r0
    2592:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2596:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    259a:	0f 92       	push	r0
    259c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25a0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25a4:	0f 92       	push	r0
    25a6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25aa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25ae:	0f 92       	push	r0
    25b0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25b4:	2f 93       	push	r18
    25b6:	3f 93       	push	r19
    25b8:	4f 93       	push	r20
    25ba:	5f 93       	push	r21
    25bc:	6f 93       	push	r22
    25be:	7f 93       	push	r23
    25c0:	8f 93       	push	r24
    25c2:	9f 93       	push	r25
    25c4:	af 93       	push	r26
    25c6:	bf 93       	push	r27
    25c8:	ef 93       	push	r30
    25ca:	ff 93       	push	r31
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    25d4:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tcd0_cca_callback>
    25d8:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tcd0_cca_callback+0x1>
    25dc:	89 2b       	or	r24, r25
    25de:	31 f0       	breq	.+12     	; 0x25ec <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    25e0:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tcd0_cca_callback>
    25e4:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tcd0_cca_callback+0x1>
    25e8:	fc 01       	movw	r30, r24
    25ea:	19 95       	eicall
	}
}
    25ec:	00 00       	nop
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	7f 91       	pop	r23
    2600:	6f 91       	pop	r22
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2610:	0f 90       	pop	r0
    2612:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2616:	0f 90       	pop	r0
    2618:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    261c:	0f 90       	pop	r0
    261e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2622:	0f 90       	pop	r0
    2624:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2628:	0f 90       	pop	r0
    262a:	1f 90       	pop	r1
    262c:	18 95       	reti

0000262e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2636:	0f 92       	push	r0
    2638:	11 24       	eor	r1, r1
    263a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    263e:	0f 92       	push	r0
    2640:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2644:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2648:	0f 92       	push	r0
    264a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    264e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2652:	0f 92       	push	r0
    2654:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2658:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    265c:	0f 92       	push	r0
    265e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    2682:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tcd0_ccb_callback>
    2686:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tcd0_ccb_callback+0x1>
    268a:	89 2b       	or	r24, r25
    268c:	31 f0       	breq	.+12     	; 0x269a <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    268e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tcd0_ccb_callback>
    2692:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tcd0_ccb_callback+0x1>
    2696:	fc 01       	movw	r30, r24
    2698:	19 95       	eicall
	}
}
    269a:	00 00       	nop
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	ff 91       	pop	r31
    26a2:	ef 91       	pop	r30
    26a4:	bf 91       	pop	r27
    26a6:	af 91       	pop	r26
    26a8:	9f 91       	pop	r25
    26aa:	8f 91       	pop	r24
    26ac:	7f 91       	pop	r23
    26ae:	6f 91       	pop	r22
    26b0:	5f 91       	pop	r21
    26b2:	4f 91       	pop	r20
    26b4:	3f 91       	pop	r19
    26b6:	2f 91       	pop	r18
    26b8:	0f 90       	pop	r0
    26ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    26be:	0f 90       	pop	r0
    26c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    26c4:	0f 90       	pop	r0
    26c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26ca:	0f 90       	pop	r0
    26cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26d0:	0f 90       	pop	r0
    26d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26d6:	0f 90       	pop	r0
    26d8:	1f 90       	pop	r1
    26da:	18 95       	reti

000026dc <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    26dc:	1f 92       	push	r1
    26de:	0f 92       	push	r0
    26e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26ec:	0f 92       	push	r0
    26ee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26f2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26f6:	0f 92       	push	r0
    26f8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26fc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2700:	0f 92       	push	r0
    2702:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2706:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    270a:	0f 92       	push	r0
    270c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2710:	2f 93       	push	r18
    2712:	3f 93       	push	r19
    2714:	4f 93       	push	r20
    2716:	5f 93       	push	r21
    2718:	6f 93       	push	r22
    271a:	7f 93       	push	r23
    271c:	8f 93       	push	r24
    271e:	9f 93       	push	r25
    2720:	af 93       	push	r26
    2722:	bf 93       	push	r27
    2724:	ef 93       	push	r30
    2726:	ff 93       	push	r31
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    2730:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tcd0_ccc_callback>
    2734:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tcd0_ccc_callback+0x1>
    2738:	89 2b       	or	r24, r25
    273a:	31 f0       	breq	.+12     	; 0x2748 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    273c:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tcd0_ccc_callback>
    2740:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tcd0_ccc_callback+0x1>
    2744:	fc 01       	movw	r30, r24
    2746:	19 95       	eicall
	}
}
    2748:	00 00       	nop
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	ff 91       	pop	r31
    2750:	ef 91       	pop	r30
    2752:	bf 91       	pop	r27
    2754:	af 91       	pop	r26
    2756:	9f 91       	pop	r25
    2758:	8f 91       	pop	r24
    275a:	7f 91       	pop	r23
    275c:	6f 91       	pop	r22
    275e:	5f 91       	pop	r21
    2760:	4f 91       	pop	r20
    2762:	3f 91       	pop	r19
    2764:	2f 91       	pop	r18
    2766:	0f 90       	pop	r0
    2768:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    276c:	0f 90       	pop	r0
    276e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2772:	0f 90       	pop	r0
    2774:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2778:	0f 90       	pop	r0
    277a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    277e:	0f 90       	pop	r0
    2780:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2784:	0f 90       	pop	r0
    2786:	1f 90       	pop	r1
    2788:	18 95       	reti

0000278a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    278a:	1f 92       	push	r1
    278c:	0f 92       	push	r0
    278e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2792:	0f 92       	push	r0
    2794:	11 24       	eor	r1, r1
    2796:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    279a:	0f 92       	push	r0
    279c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    27a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27a4:	0f 92       	push	r0
    27a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27ae:	0f 92       	push	r0
    27b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27b8:	0f 92       	push	r0
    27ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27be:	2f 93       	push	r18
    27c0:	3f 93       	push	r19
    27c2:	4f 93       	push	r20
    27c4:	5f 93       	push	r21
    27c6:	6f 93       	push	r22
    27c8:	7f 93       	push	r23
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
    27ce:	af 93       	push	r26
    27d0:	bf 93       	push	r27
    27d2:	ef 93       	push	r30
    27d4:	ff 93       	push	r31
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    27de:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tcd0_ccd_callback>
    27e2:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tcd0_ccd_callback+0x1>
    27e6:	89 2b       	or	r24, r25
    27e8:	31 f0       	breq	.+12     	; 0x27f6 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    27ea:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tcd0_ccd_callback>
    27ee:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tcd0_ccd_callback+0x1>
    27f2:	fc 01       	movw	r30, r24
    27f4:	19 95       	eicall
	}
}
    27f6:	00 00       	nop
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	ff 91       	pop	r31
    27fe:	ef 91       	pop	r30
    2800:	bf 91       	pop	r27
    2802:	af 91       	pop	r26
    2804:	9f 91       	pop	r25
    2806:	8f 91       	pop	r24
    2808:	7f 91       	pop	r23
    280a:	6f 91       	pop	r22
    280c:	5f 91       	pop	r21
    280e:	4f 91       	pop	r20
    2810:	3f 91       	pop	r19
    2812:	2f 91       	pop	r18
    2814:	0f 90       	pop	r0
    2816:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    281a:	0f 90       	pop	r0
    281c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2820:	0f 90       	pop	r0
    2822:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2826:	0f 90       	pop	r0
    2828:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    282c:	0f 90       	pop	r0
    282e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2840:	0f 92       	push	r0
    2842:	11 24       	eor	r1, r1
    2844:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2848:	0f 92       	push	r0
    284a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    284e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2852:	0f 92       	push	r0
    2854:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2858:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    285c:	0f 92       	push	r0
    285e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2862:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2866:	0f 92       	push	r0
    2868:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    286c:	2f 93       	push	r18
    286e:	3f 93       	push	r19
    2870:	4f 93       	push	r20
    2872:	5f 93       	push	r21
    2874:	6f 93       	push	r22
    2876:	7f 93       	push	r23
    2878:	8f 93       	push	r24
    287a:	9f 93       	push	r25
    287c:	af 93       	push	r26
    287e:	bf 93       	push	r27
    2880:	ef 93       	push	r30
    2882:	ff 93       	push	r31
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    288c:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tcd1_ovf_callback>
    2890:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tcd1_ovf_callback+0x1>
    2894:	89 2b       	or	r24, r25
    2896:	31 f0       	breq	.+12     	; 0x28a4 <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    2898:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tcd1_ovf_callback>
    289c:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tcd1_ovf_callback+0x1>
    28a0:	fc 01       	movw	r30, r24
    28a2:	19 95       	eicall
	}
}
    28a4:	00 00       	nop
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	ff 91       	pop	r31
    28ac:	ef 91       	pop	r30
    28ae:	bf 91       	pop	r27
    28b0:	af 91       	pop	r26
    28b2:	9f 91       	pop	r25
    28b4:	8f 91       	pop	r24
    28b6:	7f 91       	pop	r23
    28b8:	6f 91       	pop	r22
    28ba:	5f 91       	pop	r21
    28bc:	4f 91       	pop	r20
    28be:	3f 91       	pop	r19
    28c0:	2f 91       	pop	r18
    28c2:	0f 90       	pop	r0
    28c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    28c8:	0f 90       	pop	r0
    28ca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28ce:	0f 90       	pop	r0
    28d0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28d4:	0f 90       	pop	r0
    28d6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28da:	0f 90       	pop	r0
    28dc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28e0:	0f 90       	pop	r0
    28e2:	1f 90       	pop	r1
    28e4:	18 95       	reti

000028e6 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    28e6:	1f 92       	push	r1
    28e8:	0f 92       	push	r0
    28ea:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28ee:	0f 92       	push	r0
    28f0:	11 24       	eor	r1, r1
    28f2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28f6:	0f 92       	push	r0
    28f8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28fc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2900:	0f 92       	push	r0
    2902:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2906:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    290a:	0f 92       	push	r0
    290c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2910:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2914:	0f 92       	push	r0
    2916:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    291a:	2f 93       	push	r18
    291c:	3f 93       	push	r19
    291e:	4f 93       	push	r20
    2920:	5f 93       	push	r21
    2922:	6f 93       	push	r22
    2924:	7f 93       	push	r23
    2926:	8f 93       	push	r24
    2928:	9f 93       	push	r25
    292a:	af 93       	push	r26
    292c:	bf 93       	push	r27
    292e:	ef 93       	push	r30
    2930:	ff 93       	push	r31
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    293a:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <tc_tcd1_err_callback>
    293e:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <tc_tcd1_err_callback+0x1>
    2942:	89 2b       	or	r24, r25
    2944:	31 f0       	breq	.+12     	; 0x2952 <__vector_84+0x6c>
		tc_tcd1_err_callback();
    2946:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <tc_tcd1_err_callback>
    294a:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <tc_tcd1_err_callback+0x1>
    294e:	fc 01       	movw	r30, r24
    2950:	19 95       	eicall
	}
}
    2952:	00 00       	nop
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	ff 91       	pop	r31
    295a:	ef 91       	pop	r30
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	9f 91       	pop	r25
    2962:	8f 91       	pop	r24
    2964:	7f 91       	pop	r23
    2966:	6f 91       	pop	r22
    2968:	5f 91       	pop	r21
    296a:	4f 91       	pop	r20
    296c:	3f 91       	pop	r19
    296e:	2f 91       	pop	r18
    2970:	0f 90       	pop	r0
    2972:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2976:	0f 90       	pop	r0
    2978:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    297c:	0f 90       	pop	r0
    297e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2982:	0f 90       	pop	r0
    2984:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2988:	0f 90       	pop	r0
    298a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    298e:	0f 90       	pop	r0
    2990:	1f 90       	pop	r1
    2992:	18 95       	reti

00002994 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    2994:	1f 92       	push	r1
    2996:	0f 92       	push	r0
    2998:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    299c:	0f 92       	push	r0
    299e:	11 24       	eor	r1, r1
    29a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    29a4:	0f 92       	push	r0
    29a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    29aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29ae:	0f 92       	push	r0
    29b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29b8:	0f 92       	push	r0
    29ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29c2:	0f 92       	push	r0
    29c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    29e8:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <tc_tcd1_cca_callback>
    29ec:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <tc_tcd1_cca_callback+0x1>
    29f0:	89 2b       	or	r24, r25
    29f2:	31 f0       	breq	.+12     	; 0x2a00 <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    29f4:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <tc_tcd1_cca_callback>
    29f8:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <tc_tcd1_cca_callback+0x1>
    29fc:	fc 01       	movw	r30, r24
    29fe:	19 95       	eicall
	}
}
    2a00:	00 00       	nop
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	ff 91       	pop	r31
    2a08:	ef 91       	pop	r30
    2a0a:	bf 91       	pop	r27
    2a0c:	af 91       	pop	r26
    2a0e:	9f 91       	pop	r25
    2a10:	8f 91       	pop	r24
    2a12:	7f 91       	pop	r23
    2a14:	6f 91       	pop	r22
    2a16:	5f 91       	pop	r21
    2a18:	4f 91       	pop	r20
    2a1a:	3f 91       	pop	r19
    2a1c:	2f 91       	pop	r18
    2a1e:	0f 90       	pop	r0
    2a20:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a24:	0f 90       	pop	r0
    2a26:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a2a:	0f 90       	pop	r0
    2a2c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a30:	0f 90       	pop	r0
    2a32:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a36:	0f 90       	pop	r0
    2a38:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a3c:	0f 90       	pop	r0
    2a3e:	1f 90       	pop	r1
    2a40:	18 95       	reti

00002a42 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    2a42:	1f 92       	push	r1
    2a44:	0f 92       	push	r0
    2a46:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a52:	0f 92       	push	r0
    2a54:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a58:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a5c:	0f 92       	push	r0
    2a5e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a62:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a66:	0f 92       	push	r0
    2a68:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a6c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a70:	0f 92       	push	r0
    2a72:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a76:	2f 93       	push	r18
    2a78:	3f 93       	push	r19
    2a7a:	4f 93       	push	r20
    2a7c:	5f 93       	push	r21
    2a7e:	6f 93       	push	r22
    2a80:	7f 93       	push	r23
    2a82:	8f 93       	push	r24
    2a84:	9f 93       	push	r25
    2a86:	af 93       	push	r26
    2a88:	bf 93       	push	r27
    2a8a:	ef 93       	push	r30
    2a8c:	ff 93       	push	r31
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    2a96:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <tc_tcd1_ccb_callback>
    2a9a:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <tc_tcd1_ccb_callback+0x1>
    2a9e:	89 2b       	or	r24, r25
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    2aa2:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <tc_tcd1_ccb_callback>
    2aa6:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <tc_tcd1_ccb_callback+0x1>
    2aaa:	fc 01       	movw	r30, r24
    2aac:	19 95       	eicall
	}
}
    2aae:	00 00       	nop
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	ff 91       	pop	r31
    2ab6:	ef 91       	pop	r30
    2ab8:	bf 91       	pop	r27
    2aba:	af 91       	pop	r26
    2abc:	9f 91       	pop	r25
    2abe:	8f 91       	pop	r24
    2ac0:	7f 91       	pop	r23
    2ac2:	6f 91       	pop	r22
    2ac4:	5f 91       	pop	r21
    2ac6:	4f 91       	pop	r20
    2ac8:	3f 91       	pop	r19
    2aca:	2f 91       	pop	r18
    2acc:	0f 90       	pop	r0
    2ace:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ad2:	0f 90       	pop	r0
    2ad4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ad8:	0f 90       	pop	r0
    2ada:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ade:	0f 90       	pop	r0
    2ae0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ae4:	0f 90       	pop	r0
    2ae6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2af8:	0f 92       	push	r0
    2afa:	11 24       	eor	r1, r1
    2afc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b00:	0f 92       	push	r0
    2b02:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b06:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b0a:	0f 92       	push	r0
    2b0c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b10:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b14:	0f 92       	push	r0
    2b16:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b1a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b1e:	0f 92       	push	r0
    2b20:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b24:	2f 93       	push	r18
    2b26:	3f 93       	push	r19
    2b28:	4f 93       	push	r20
    2b2a:	5f 93       	push	r21
    2b2c:	6f 93       	push	r22
    2b2e:	7f 93       	push	r23
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
    2b34:	af 93       	push	r26
    2b36:	bf 93       	push	r27
    2b38:	ef 93       	push	r30
    2b3a:	ff 93       	push	r31
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    2b44:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <tc_tce0_ovf_callback>
    2b48:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <tc_tce0_ovf_callback+0x1>
    2b4c:	89 2b       	or	r24, r25
    2b4e:	31 f0       	breq	.+12     	; 0x2b5c <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    2b50:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <tc_tce0_ovf_callback>
    2b54:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <tc_tce0_ovf_callback+0x1>
    2b58:	fc 01       	movw	r30, r24
    2b5a:	19 95       	eicall
	}
}
    2b5c:	00 00       	nop
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	ff 91       	pop	r31
    2b64:	ef 91       	pop	r30
    2b66:	bf 91       	pop	r27
    2b68:	af 91       	pop	r26
    2b6a:	9f 91       	pop	r25
    2b6c:	8f 91       	pop	r24
    2b6e:	7f 91       	pop	r23
    2b70:	6f 91       	pop	r22
    2b72:	5f 91       	pop	r21
    2b74:	4f 91       	pop	r20
    2b76:	3f 91       	pop	r19
    2b78:	2f 91       	pop	r18
    2b7a:	0f 90       	pop	r0
    2b7c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b80:	0f 90       	pop	r0
    2b82:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b86:	0f 90       	pop	r0
    2b88:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b8c:	0f 90       	pop	r0
    2b8e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b92:	0f 90       	pop	r0
    2b94:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b98:	0f 90       	pop	r0
    2b9a:	1f 90       	pop	r1
    2b9c:	18 95       	reti

00002b9e <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    2b9e:	1f 92       	push	r1
    2ba0:	0f 92       	push	r0
    2ba2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ba6:	0f 92       	push	r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2bae:	0f 92       	push	r0
    2bb0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2bb4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bb8:	0f 92       	push	r0
    2bba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bbe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bc2:	0f 92       	push	r0
    2bc4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bc8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bcc:	0f 92       	push	r0
    2bce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bd2:	2f 93       	push	r18
    2bd4:	3f 93       	push	r19
    2bd6:	4f 93       	push	r20
    2bd8:	5f 93       	push	r21
    2bda:	6f 93       	push	r22
    2bdc:	7f 93       	push	r23
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	af 93       	push	r26
    2be4:	bf 93       	push	r27
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    2bf2:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <tc_tce0_err_callback>
    2bf6:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <tc_tce0_err_callback+0x1>
    2bfa:	89 2b       	or	r24, r25
    2bfc:	31 f0       	breq	.+12     	; 0x2c0a <__vector_48+0x6c>
		tc_tce0_err_callback();
    2bfe:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <tc_tce0_err_callback>
    2c02:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <tc_tce0_err_callback+0x1>
    2c06:	fc 01       	movw	r30, r24
    2c08:	19 95       	eicall
	}
}
    2c0a:	00 00       	nop
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	ff 91       	pop	r31
    2c12:	ef 91       	pop	r30
    2c14:	bf 91       	pop	r27
    2c16:	af 91       	pop	r26
    2c18:	9f 91       	pop	r25
    2c1a:	8f 91       	pop	r24
    2c1c:	7f 91       	pop	r23
    2c1e:	6f 91       	pop	r22
    2c20:	5f 91       	pop	r21
    2c22:	4f 91       	pop	r20
    2c24:	3f 91       	pop	r19
    2c26:	2f 91       	pop	r18
    2c28:	0f 90       	pop	r0
    2c2a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c2e:	0f 90       	pop	r0
    2c30:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c34:	0f 90       	pop	r0
    2c36:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c3a:	0f 90       	pop	r0
    2c3c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c40:	0f 90       	pop	r0
    2c42:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c46:	0f 90       	pop	r0
    2c48:	1f 90       	pop	r1
    2c4a:	18 95       	reti

00002c4c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    2c4c:	1f 92       	push	r1
    2c4e:	0f 92       	push	r0
    2c50:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c54:	0f 92       	push	r0
    2c56:	11 24       	eor	r1, r1
    2c58:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c5c:	0f 92       	push	r0
    2c5e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c62:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c66:	0f 92       	push	r0
    2c68:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c6c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c70:	0f 92       	push	r0
    2c72:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c76:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c7a:	0f 92       	push	r0
    2c7c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c80:	2f 93       	push	r18
    2c82:	3f 93       	push	r19
    2c84:	4f 93       	push	r20
    2c86:	5f 93       	push	r21
    2c88:	6f 93       	push	r22
    2c8a:	7f 93       	push	r23
    2c8c:	8f 93       	push	r24
    2c8e:	9f 93       	push	r25
    2c90:	af 93       	push	r26
    2c92:	bf 93       	push	r27
    2c94:	ef 93       	push	r30
    2c96:	ff 93       	push	r31
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    2ca0:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <tc_tce0_cca_callback>
    2ca4:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <tc_tce0_cca_callback+0x1>
    2ca8:	89 2b       	or	r24, r25
    2caa:	31 f0       	breq	.+12     	; 0x2cb8 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    2cac:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <tc_tce0_cca_callback>
    2cb0:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <tc_tce0_cca_callback+0x1>
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	19 95       	eicall
	}
}
    2cb8:	00 00       	nop
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	ff 91       	pop	r31
    2cc0:	ef 91       	pop	r30
    2cc2:	bf 91       	pop	r27
    2cc4:	af 91       	pop	r26
    2cc6:	9f 91       	pop	r25
    2cc8:	8f 91       	pop	r24
    2cca:	7f 91       	pop	r23
    2ccc:	6f 91       	pop	r22
    2cce:	5f 91       	pop	r21
    2cd0:	4f 91       	pop	r20
    2cd2:	3f 91       	pop	r19
    2cd4:	2f 91       	pop	r18
    2cd6:	0f 90       	pop	r0
    2cd8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2cdc:	0f 90       	pop	r0
    2cde:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ce2:	0f 90       	pop	r0
    2ce4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ce8:	0f 90       	pop	r0
    2cea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2cee:	0f 90       	pop	r0
    2cf0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    2cfa:	1f 92       	push	r1
    2cfc:	0f 92       	push	r0
    2cfe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d02:	0f 92       	push	r0
    2d04:	11 24       	eor	r1, r1
    2d06:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d0a:	0f 92       	push	r0
    2d0c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d10:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d14:	0f 92       	push	r0
    2d16:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d1a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d1e:	0f 92       	push	r0
    2d20:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d24:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d28:	0f 92       	push	r0
    2d2a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d2e:	2f 93       	push	r18
    2d30:	3f 93       	push	r19
    2d32:	4f 93       	push	r20
    2d34:	5f 93       	push	r21
    2d36:	6f 93       	push	r22
    2d38:	7f 93       	push	r23
    2d3a:	8f 93       	push	r24
    2d3c:	9f 93       	push	r25
    2d3e:	af 93       	push	r26
    2d40:	bf 93       	push	r27
    2d42:	ef 93       	push	r30
    2d44:	ff 93       	push	r31
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    2d4e:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <tc_tce0_ccb_callback>
    2d52:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <tc_tce0_ccb_callback+0x1>
    2d56:	89 2b       	or	r24, r25
    2d58:	31 f0       	breq	.+12     	; 0x2d66 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    2d5a:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <tc_tce0_ccb_callback>
    2d5e:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <tc_tce0_ccb_callback+0x1>
    2d62:	fc 01       	movw	r30, r24
    2d64:	19 95       	eicall
	}
}
    2d66:	00 00       	nop
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	ff 91       	pop	r31
    2d6e:	ef 91       	pop	r30
    2d70:	bf 91       	pop	r27
    2d72:	af 91       	pop	r26
    2d74:	9f 91       	pop	r25
    2d76:	8f 91       	pop	r24
    2d78:	7f 91       	pop	r23
    2d7a:	6f 91       	pop	r22
    2d7c:	5f 91       	pop	r21
    2d7e:	4f 91       	pop	r20
    2d80:	3f 91       	pop	r19
    2d82:	2f 91       	pop	r18
    2d84:	0f 90       	pop	r0
    2d86:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d8a:	0f 90       	pop	r0
    2d8c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d90:	0f 90       	pop	r0
    2d92:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d96:	0f 90       	pop	r0
    2d98:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d9c:	0f 90       	pop	r0
    2d9e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2da2:	0f 90       	pop	r0
    2da4:	1f 90       	pop	r1
    2da6:	18 95       	reti

00002da8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    2da8:	1f 92       	push	r1
    2daa:	0f 92       	push	r0
    2dac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2db8:	0f 92       	push	r0
    2dba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2dbe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2dc2:	0f 92       	push	r0
    2dc4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2dc8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2dcc:	0f 92       	push	r0
    2dce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2dd2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2dd6:	0f 92       	push	r0
    2dd8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ddc:	2f 93       	push	r18
    2dde:	3f 93       	push	r19
    2de0:	4f 93       	push	r20
    2de2:	5f 93       	push	r21
    2de4:	6f 93       	push	r22
    2de6:	7f 93       	push	r23
    2de8:	8f 93       	push	r24
    2dea:	9f 93       	push	r25
    2dec:	af 93       	push	r26
    2dee:	bf 93       	push	r27
    2df0:	ef 93       	push	r30
    2df2:	ff 93       	push	r31
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    2dfc:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <tc_tce0_ccc_callback>
    2e00:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <tc_tce0_ccc_callback+0x1>
    2e04:	89 2b       	or	r24, r25
    2e06:	31 f0       	breq	.+12     	; 0x2e14 <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    2e08:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <tc_tce0_ccc_callback>
    2e0c:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <tc_tce0_ccc_callback+0x1>
    2e10:	fc 01       	movw	r30, r24
    2e12:	19 95       	eicall
	}
}
    2e14:	00 00       	nop
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e38:	0f 90       	pop	r0
    2e3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e3e:	0f 90       	pop	r0
    2e40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e44:	0f 90       	pop	r0
    2e46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e4a:	0f 90       	pop	r0
    2e4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e50:	0f 90       	pop	r0
    2e52:	1f 90       	pop	r1
    2e54:	18 95       	reti

00002e56 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    2e56:	1f 92       	push	r1
    2e58:	0f 92       	push	r0
    2e5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e5e:	0f 92       	push	r0
    2e60:	11 24       	eor	r1, r1
    2e62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e66:	0f 92       	push	r0
    2e68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e70:	0f 92       	push	r0
    2e72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e7a:	0f 92       	push	r0
    2e7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e84:	0f 92       	push	r0
    2e86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e8a:	2f 93       	push	r18
    2e8c:	3f 93       	push	r19
    2e8e:	4f 93       	push	r20
    2e90:	5f 93       	push	r21
    2e92:	6f 93       	push	r22
    2e94:	7f 93       	push	r23
    2e96:	8f 93       	push	r24
    2e98:	9f 93       	push	r25
    2e9a:	af 93       	push	r26
    2e9c:	bf 93       	push	r27
    2e9e:	ef 93       	push	r30
    2ea0:	ff 93       	push	r31
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    2eaa:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <tc_tce0_ccd_callback>
    2eae:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <tc_tce0_ccd_callback+0x1>
    2eb2:	89 2b       	or	r24, r25
    2eb4:	31 f0       	breq	.+12     	; 0x2ec2 <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    2eb6:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <tc_tce0_ccd_callback>
    2eba:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <tc_tce0_ccd_callback+0x1>
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	19 95       	eicall
	}
}
    2ec2:	00 00       	nop
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	ff 91       	pop	r31
    2eca:	ef 91       	pop	r30
    2ecc:	bf 91       	pop	r27
    2ece:	af 91       	pop	r26
    2ed0:	9f 91       	pop	r25
    2ed2:	8f 91       	pop	r24
    2ed4:	7f 91       	pop	r23
    2ed6:	6f 91       	pop	r22
    2ed8:	5f 91       	pop	r21
    2eda:	4f 91       	pop	r20
    2edc:	3f 91       	pop	r19
    2ede:	2f 91       	pop	r18
    2ee0:	0f 90       	pop	r0
    2ee2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ee6:	0f 90       	pop	r0
    2ee8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2eec:	0f 90       	pop	r0
    2eee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ef2:	0f 90       	pop	r0
    2ef4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ef8:	0f 90       	pop	r0
    2efa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f0c:	0f 92       	push	r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f14:	0f 92       	push	r0
    2f16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f1e:	0f 92       	push	r0
    2f20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f28:	0f 92       	push	r0
    2f2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f32:	0f 92       	push	r0
    2f34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f38:	2f 93       	push	r18
    2f3a:	3f 93       	push	r19
    2f3c:	4f 93       	push	r20
    2f3e:	5f 93       	push	r21
    2f40:	6f 93       	push	r22
    2f42:	7f 93       	push	r23
    2f44:	8f 93       	push	r24
    2f46:	9f 93       	push	r25
    2f48:	af 93       	push	r26
    2f4a:	bf 93       	push	r27
    2f4c:	ef 93       	push	r30
    2f4e:	ff 93       	push	r31
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    2f58:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <tc_tce1_ovf_callback>
    2f5c:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <tc_tce1_ovf_callback+0x1>
    2f60:	89 2b       	or	r24, r25
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    2f64:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <tc_tce1_ovf_callback>
    2f68:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <tc_tce1_ovf_callback+0x1>
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	19 95       	eicall
	}
}
    2f70:	00 00       	nop
    2f72:	df 91       	pop	r29
    2f74:	cf 91       	pop	r28
    2f76:	ff 91       	pop	r31
    2f78:	ef 91       	pop	r30
    2f7a:	bf 91       	pop	r27
    2f7c:	af 91       	pop	r26
    2f7e:	9f 91       	pop	r25
    2f80:	8f 91       	pop	r24
    2f82:	7f 91       	pop	r23
    2f84:	6f 91       	pop	r22
    2f86:	5f 91       	pop	r21
    2f88:	4f 91       	pop	r20
    2f8a:	3f 91       	pop	r19
    2f8c:	2f 91       	pop	r18
    2f8e:	0f 90       	pop	r0
    2f90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f94:	0f 90       	pop	r0
    2f96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f9a:	0f 90       	pop	r0
    2f9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fa0:	0f 90       	pop	r0
    2fa2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fa6:	0f 90       	pop	r0
    2fa8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fac:	0f 90       	pop	r0
    2fae:	1f 90       	pop	r1
    2fb0:	18 95       	reti

00002fb2 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    2fb2:	1f 92       	push	r1
    2fb4:	0f 92       	push	r0
    2fb6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fba:	0f 92       	push	r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fc2:	0f 92       	push	r0
    2fc4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fc8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fcc:	0f 92       	push	r0
    2fce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fd2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fd6:	0f 92       	push	r0
    2fd8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fdc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fe0:	0f 92       	push	r0
    2fe2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fe6:	2f 93       	push	r18
    2fe8:	3f 93       	push	r19
    2fea:	4f 93       	push	r20
    2fec:	5f 93       	push	r21
    2fee:	6f 93       	push	r22
    2ff0:	7f 93       	push	r23
    2ff2:	8f 93       	push	r24
    2ff4:	9f 93       	push	r25
    2ff6:	af 93       	push	r26
    2ff8:	bf 93       	push	r27
    2ffa:	ef 93       	push	r30
    2ffc:	ff 93       	push	r31
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    3006:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <tc_tce1_err_callback>
    300a:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <tc_tce1_err_callback+0x1>
    300e:	89 2b       	or	r24, r25
    3010:	31 f0       	breq	.+12     	; 0x301e <__vector_54+0x6c>
		tc_tce1_err_callback();
    3012:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <tc_tce1_err_callback>
    3016:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <tc_tce1_err_callback+0x1>
    301a:	fc 01       	movw	r30, r24
    301c:	19 95       	eicall
	}
}
    301e:	00 00       	nop
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	ff 91       	pop	r31
    3026:	ef 91       	pop	r30
    3028:	bf 91       	pop	r27
    302a:	af 91       	pop	r26
    302c:	9f 91       	pop	r25
    302e:	8f 91       	pop	r24
    3030:	7f 91       	pop	r23
    3032:	6f 91       	pop	r22
    3034:	5f 91       	pop	r21
    3036:	4f 91       	pop	r20
    3038:	3f 91       	pop	r19
    303a:	2f 91       	pop	r18
    303c:	0f 90       	pop	r0
    303e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3042:	0f 90       	pop	r0
    3044:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3048:	0f 90       	pop	r0
    304a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    304e:	0f 90       	pop	r0
    3050:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3054:	0f 90       	pop	r0
    3056:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    305a:	0f 90       	pop	r0
    305c:	1f 90       	pop	r1
    305e:	18 95       	reti

00003060 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    3060:	1f 92       	push	r1
    3062:	0f 92       	push	r0
    3064:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3068:	0f 92       	push	r0
    306a:	11 24       	eor	r1, r1
    306c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3070:	0f 92       	push	r0
    3072:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3076:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    307a:	0f 92       	push	r0
    307c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3080:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3084:	0f 92       	push	r0
    3086:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    308a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    308e:	0f 92       	push	r0
    3090:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3094:	2f 93       	push	r18
    3096:	3f 93       	push	r19
    3098:	4f 93       	push	r20
    309a:	5f 93       	push	r21
    309c:	6f 93       	push	r22
    309e:	7f 93       	push	r23
    30a0:	8f 93       	push	r24
    30a2:	9f 93       	push	r25
    30a4:	af 93       	push	r26
    30a6:	bf 93       	push	r27
    30a8:	ef 93       	push	r30
    30aa:	ff 93       	push	r31
    30ac:	cf 93       	push	r28
    30ae:	df 93       	push	r29
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    30b4:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <tc_tce1_cca_callback>
    30b8:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <tc_tce1_cca_callback+0x1>
    30bc:	89 2b       	or	r24, r25
    30be:	31 f0       	breq	.+12     	; 0x30cc <__vector_55+0x6c>
		tc_tce1_cca_callback();
    30c0:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <tc_tce1_cca_callback>
    30c4:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <tc_tce1_cca_callback+0x1>
    30c8:	fc 01       	movw	r30, r24
    30ca:	19 95       	eicall
	}
}
    30cc:	00 00       	nop
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	ff 91       	pop	r31
    30d4:	ef 91       	pop	r30
    30d6:	bf 91       	pop	r27
    30d8:	af 91       	pop	r26
    30da:	9f 91       	pop	r25
    30dc:	8f 91       	pop	r24
    30de:	7f 91       	pop	r23
    30e0:	6f 91       	pop	r22
    30e2:	5f 91       	pop	r21
    30e4:	4f 91       	pop	r20
    30e6:	3f 91       	pop	r19
    30e8:	2f 91       	pop	r18
    30ea:	0f 90       	pop	r0
    30ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    30f0:	0f 90       	pop	r0
    30f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    30f6:	0f 90       	pop	r0
    30f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    30fc:	0f 90       	pop	r0
    30fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3102:	0f 90       	pop	r0
    3104:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3108:	0f 90       	pop	r0
    310a:	1f 90       	pop	r1
    310c:	18 95       	reti

0000310e <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    310e:	1f 92       	push	r1
    3110:	0f 92       	push	r0
    3112:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3116:	0f 92       	push	r0
    3118:	11 24       	eor	r1, r1
    311a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    311e:	0f 92       	push	r0
    3120:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3124:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3128:	0f 92       	push	r0
    312a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    312e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3132:	0f 92       	push	r0
    3134:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3138:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    313c:	0f 92       	push	r0
    313e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3142:	2f 93       	push	r18
    3144:	3f 93       	push	r19
    3146:	4f 93       	push	r20
    3148:	5f 93       	push	r21
    314a:	6f 93       	push	r22
    314c:	7f 93       	push	r23
    314e:	8f 93       	push	r24
    3150:	9f 93       	push	r25
    3152:	af 93       	push	r26
    3154:	bf 93       	push	r27
    3156:	ef 93       	push	r30
    3158:	ff 93       	push	r31
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    3162:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <tc_tce1_ccb_callback>
    3166:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <tc_tce1_ccb_callback+0x1>
    316a:	89 2b       	or	r24, r25
    316c:	31 f0       	breq	.+12     	; 0x317a <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    316e:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <tc_tce1_ccb_callback>
    3172:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <tc_tce1_ccb_callback+0x1>
    3176:	fc 01       	movw	r30, r24
    3178:	19 95       	eicall
	}
}
    317a:	00 00       	nop
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	ff 91       	pop	r31
    3182:	ef 91       	pop	r30
    3184:	bf 91       	pop	r27
    3186:	af 91       	pop	r26
    3188:	9f 91       	pop	r25
    318a:	8f 91       	pop	r24
    318c:	7f 91       	pop	r23
    318e:	6f 91       	pop	r22
    3190:	5f 91       	pop	r21
    3192:	4f 91       	pop	r20
    3194:	3f 91       	pop	r19
    3196:	2f 91       	pop	r18
    3198:	0f 90       	pop	r0
    319a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    319e:	0f 90       	pop	r0
    31a0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31a4:	0f 90       	pop	r0
    31a6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31aa:	0f 90       	pop	r0
    31ac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31b0:	0f 90       	pop	r0
    31b2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31b6:	0f 90       	pop	r0
    31b8:	1f 90       	pop	r1
    31ba:	18 95       	reti

000031bc <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    31bc:	1f 92       	push	r1
    31be:	0f 92       	push	r0
    31c0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31c4:	0f 92       	push	r0
    31c6:	11 24       	eor	r1, r1
    31c8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31cc:	0f 92       	push	r0
    31ce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31d2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31d6:	0f 92       	push	r0
    31d8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31dc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31e0:	0f 92       	push	r0
    31e2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31e6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31ea:	0f 92       	push	r0
    31ec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31f0:	2f 93       	push	r18
    31f2:	3f 93       	push	r19
    31f4:	4f 93       	push	r20
    31f6:	5f 93       	push	r21
    31f8:	6f 93       	push	r22
    31fa:	7f 93       	push	r23
    31fc:	8f 93       	push	r24
    31fe:	9f 93       	push	r25
    3200:	af 93       	push	r26
    3202:	bf 93       	push	r27
    3204:	ef 93       	push	r30
    3206:	ff 93       	push	r31
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    3210:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <tc_tcf0_ovf_callback>
    3214:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <tc_tcf0_ovf_callback+0x1>
    3218:	89 2b       	or	r24, r25
    321a:	31 f0       	breq	.+12     	; 0x3228 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    321c:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <tc_tcf0_ovf_callback>
    3220:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <tc_tcf0_ovf_callback+0x1>
    3224:	fc 01       	movw	r30, r24
    3226:	19 95       	eicall
	}
}
    3228:	00 00       	nop
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	ff 91       	pop	r31
    3230:	ef 91       	pop	r30
    3232:	bf 91       	pop	r27
    3234:	af 91       	pop	r26
    3236:	9f 91       	pop	r25
    3238:	8f 91       	pop	r24
    323a:	7f 91       	pop	r23
    323c:	6f 91       	pop	r22
    323e:	5f 91       	pop	r21
    3240:	4f 91       	pop	r20
    3242:	3f 91       	pop	r19
    3244:	2f 91       	pop	r18
    3246:	0f 90       	pop	r0
    3248:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    324c:	0f 90       	pop	r0
    324e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3252:	0f 90       	pop	r0
    3254:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3258:	0f 90       	pop	r0
    325a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    325e:	0f 90       	pop	r0
    3260:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3264:	0f 90       	pop	r0
    3266:	1f 90       	pop	r1
    3268:	18 95       	reti

0000326a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    326a:	1f 92       	push	r1
    326c:	0f 92       	push	r0
    326e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3272:	0f 92       	push	r0
    3274:	11 24       	eor	r1, r1
    3276:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    327a:	0f 92       	push	r0
    327c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3280:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3284:	0f 92       	push	r0
    3286:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    328a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    328e:	0f 92       	push	r0
    3290:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3294:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3298:	0f 92       	push	r0
    329a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    329e:	2f 93       	push	r18
    32a0:	3f 93       	push	r19
    32a2:	4f 93       	push	r20
    32a4:	5f 93       	push	r21
    32a6:	6f 93       	push	r22
    32a8:	7f 93       	push	r23
    32aa:	8f 93       	push	r24
    32ac:	9f 93       	push	r25
    32ae:	af 93       	push	r26
    32b0:	bf 93       	push	r27
    32b2:	ef 93       	push	r30
    32b4:	ff 93       	push	r31
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    32be:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <tc_tcf0_err_callback>
    32c2:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <tc_tcf0_err_callback+0x1>
    32c6:	89 2b       	or	r24, r25
    32c8:	31 f0       	breq	.+12     	; 0x32d6 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    32ca:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <tc_tcf0_err_callback>
    32ce:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <tc_tcf0_err_callback+0x1>
    32d2:	fc 01       	movw	r30, r24
    32d4:	19 95       	eicall
	}
}
    32d6:	00 00       	nop
    32d8:	df 91       	pop	r29
    32da:	cf 91       	pop	r28
    32dc:	ff 91       	pop	r31
    32de:	ef 91       	pop	r30
    32e0:	bf 91       	pop	r27
    32e2:	af 91       	pop	r26
    32e4:	9f 91       	pop	r25
    32e6:	8f 91       	pop	r24
    32e8:	7f 91       	pop	r23
    32ea:	6f 91       	pop	r22
    32ec:	5f 91       	pop	r21
    32ee:	4f 91       	pop	r20
    32f0:	3f 91       	pop	r19
    32f2:	2f 91       	pop	r18
    32f4:	0f 90       	pop	r0
    32f6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    32fa:	0f 90       	pop	r0
    32fc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3300:	0f 90       	pop	r0
    3302:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3306:	0f 90       	pop	r0
    3308:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    330c:	0f 90       	pop	r0
    330e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3312:	0f 90       	pop	r0
    3314:	1f 90       	pop	r1
    3316:	18 95       	reti

00003318 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    3318:	1f 92       	push	r1
    331a:	0f 92       	push	r0
    331c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3320:	0f 92       	push	r0
    3322:	11 24       	eor	r1, r1
    3324:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3328:	0f 92       	push	r0
    332a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    332e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3332:	0f 92       	push	r0
    3334:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3338:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    333c:	0f 92       	push	r0
    333e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3342:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3346:	0f 92       	push	r0
    3348:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    334c:	2f 93       	push	r18
    334e:	3f 93       	push	r19
    3350:	4f 93       	push	r20
    3352:	5f 93       	push	r21
    3354:	6f 93       	push	r22
    3356:	7f 93       	push	r23
    3358:	8f 93       	push	r24
    335a:	9f 93       	push	r25
    335c:	af 93       	push	r26
    335e:	bf 93       	push	r27
    3360:	ef 93       	push	r30
    3362:	ff 93       	push	r31
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    336c:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <tc_tcf0_cca_callback>
    3370:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <tc_tcf0_cca_callback+0x1>
    3374:	89 2b       	or	r24, r25
    3376:	31 f0       	breq	.+12     	; 0x3384 <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    3378:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <tc_tcf0_cca_callback>
    337c:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <tc_tcf0_cca_callback+0x1>
    3380:	fc 01       	movw	r30, r24
    3382:	19 95       	eicall
	}
}
    3384:	00 00       	nop
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	ff 91       	pop	r31
    338c:	ef 91       	pop	r30
    338e:	bf 91       	pop	r27
    3390:	af 91       	pop	r26
    3392:	9f 91       	pop	r25
    3394:	8f 91       	pop	r24
    3396:	7f 91       	pop	r23
    3398:	6f 91       	pop	r22
    339a:	5f 91       	pop	r21
    339c:	4f 91       	pop	r20
    339e:	3f 91       	pop	r19
    33a0:	2f 91       	pop	r18
    33a2:	0f 90       	pop	r0
    33a4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33a8:	0f 90       	pop	r0
    33aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33ae:	0f 90       	pop	r0
    33b0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33b4:	0f 90       	pop	r0
    33b6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33ba:	0f 90       	pop	r0
    33bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33c0:	0f 90       	pop	r0
    33c2:	1f 90       	pop	r1
    33c4:	18 95       	reti

000033c6 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    33c6:	1f 92       	push	r1
    33c8:	0f 92       	push	r0
    33ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33ce:	0f 92       	push	r0
    33d0:	11 24       	eor	r1, r1
    33d2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33d6:	0f 92       	push	r0
    33d8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33dc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33e0:	0f 92       	push	r0
    33e2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33e6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33ea:	0f 92       	push	r0
    33ec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33f0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33f4:	0f 92       	push	r0
    33f6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33fa:	2f 93       	push	r18
    33fc:	3f 93       	push	r19
    33fe:	4f 93       	push	r20
    3400:	5f 93       	push	r21
    3402:	6f 93       	push	r22
    3404:	7f 93       	push	r23
    3406:	8f 93       	push	r24
    3408:	9f 93       	push	r25
    340a:	af 93       	push	r26
    340c:	bf 93       	push	r27
    340e:	ef 93       	push	r30
    3410:	ff 93       	push	r31
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    341a:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <tc_tcf0_ccb_callback>
    341e:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <tc_tcf0_ccb_callback+0x1>
    3422:	89 2b       	or	r24, r25
    3424:	31 f0       	breq	.+12     	; 0x3432 <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    3426:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <tc_tcf0_ccb_callback>
    342a:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <tc_tcf0_ccb_callback+0x1>
    342e:	fc 01       	movw	r30, r24
    3430:	19 95       	eicall
	}
}
    3432:	00 00       	nop
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	ff 91       	pop	r31
    343a:	ef 91       	pop	r30
    343c:	bf 91       	pop	r27
    343e:	af 91       	pop	r26
    3440:	9f 91       	pop	r25
    3442:	8f 91       	pop	r24
    3444:	7f 91       	pop	r23
    3446:	6f 91       	pop	r22
    3448:	5f 91       	pop	r21
    344a:	4f 91       	pop	r20
    344c:	3f 91       	pop	r19
    344e:	2f 91       	pop	r18
    3450:	0f 90       	pop	r0
    3452:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3456:	0f 90       	pop	r0
    3458:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    345c:	0f 90       	pop	r0
    345e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3462:	0f 90       	pop	r0
    3464:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3468:	0f 90       	pop	r0
    346a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    346e:	0f 90       	pop	r0
    3470:	1f 90       	pop	r1
    3472:	18 95       	reti

00003474 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    3474:	1f 92       	push	r1
    3476:	0f 92       	push	r0
    3478:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3484:	0f 92       	push	r0
    3486:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    348a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    348e:	0f 92       	push	r0
    3490:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3494:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3498:	0f 92       	push	r0
    349a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    349e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34a2:	0f 92       	push	r0
    34a4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34a8:	2f 93       	push	r18
    34aa:	3f 93       	push	r19
    34ac:	4f 93       	push	r20
    34ae:	5f 93       	push	r21
    34b0:	6f 93       	push	r22
    34b2:	7f 93       	push	r23
    34b4:	8f 93       	push	r24
    34b6:	9f 93       	push	r25
    34b8:	af 93       	push	r26
    34ba:	bf 93       	push	r27
    34bc:	ef 93       	push	r30
    34be:	ff 93       	push	r31
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    34c8:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <tc_tcf0_ccc_callback>
    34cc:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <tc_tcf0_ccc_callback+0x1>
    34d0:	89 2b       	or	r24, r25
    34d2:	31 f0       	breq	.+12     	; 0x34e0 <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    34d4:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <tc_tcf0_ccc_callback>
    34d8:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <tc_tcf0_ccc_callback+0x1>
    34dc:	fc 01       	movw	r30, r24
    34de:	19 95       	eicall
	}
}
    34e0:	00 00       	nop
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	ff 91       	pop	r31
    34e8:	ef 91       	pop	r30
    34ea:	bf 91       	pop	r27
    34ec:	af 91       	pop	r26
    34ee:	9f 91       	pop	r25
    34f0:	8f 91       	pop	r24
    34f2:	7f 91       	pop	r23
    34f4:	6f 91       	pop	r22
    34f6:	5f 91       	pop	r21
    34f8:	4f 91       	pop	r20
    34fa:	3f 91       	pop	r19
    34fc:	2f 91       	pop	r18
    34fe:	0f 90       	pop	r0
    3500:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3504:	0f 90       	pop	r0
    3506:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    350a:	0f 90       	pop	r0
    350c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3510:	0f 90       	pop	r0
    3512:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3516:	0f 90       	pop	r0
    3518:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    3522:	1f 92       	push	r1
    3524:	0f 92       	push	r0
    3526:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    352a:	0f 92       	push	r0
    352c:	11 24       	eor	r1, r1
    352e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3532:	0f 92       	push	r0
    3534:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3538:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    353c:	0f 92       	push	r0
    353e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3542:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3546:	0f 92       	push	r0
    3548:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    354c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3550:	0f 92       	push	r0
    3552:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3556:	2f 93       	push	r18
    3558:	3f 93       	push	r19
    355a:	4f 93       	push	r20
    355c:	5f 93       	push	r21
    355e:	6f 93       	push	r22
    3560:	7f 93       	push	r23
    3562:	8f 93       	push	r24
    3564:	9f 93       	push	r25
    3566:	af 93       	push	r26
    3568:	bf 93       	push	r27
    356a:	ef 93       	push	r30
    356c:	ff 93       	push	r31
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    3576:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <tc_tcf0_ccd_callback>
    357a:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <tc_tcf0_ccd_callback+0x1>
    357e:	89 2b       	or	r24, r25
    3580:	31 f0       	breq	.+12     	; 0x358e <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    3582:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <tc_tcf0_ccd_callback>
    3586:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <tc_tcf0_ccd_callback+0x1>
    358a:	fc 01       	movw	r30, r24
    358c:	19 95       	eicall
	}
}
    358e:	00 00       	nop
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	ff 91       	pop	r31
    3596:	ef 91       	pop	r30
    3598:	bf 91       	pop	r27
    359a:	af 91       	pop	r26
    359c:	9f 91       	pop	r25
    359e:	8f 91       	pop	r24
    35a0:	7f 91       	pop	r23
    35a2:	6f 91       	pop	r22
    35a4:	5f 91       	pop	r21
    35a6:	4f 91       	pop	r20
    35a8:	3f 91       	pop	r19
    35aa:	2f 91       	pop	r18
    35ac:	0f 90       	pop	r0
    35ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    35b2:	0f 90       	pop	r0
    35b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35b8:	0f 90       	pop	r0
    35ba:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35be:	0f 90       	pop	r0
    35c0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35c4:	0f 90       	pop	r0
    35c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    35ca:	0f 90       	pop	r0
    35cc:	1f 90       	pop	r1
    35ce:	18 95       	reti

000035d0 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    35d0:	1f 92       	push	r1
    35d2:	0f 92       	push	r0
    35d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    35d8:	0f 92       	push	r0
    35da:	11 24       	eor	r1, r1
    35dc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35e0:	0f 92       	push	r0
    35e2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35e6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35ea:	0f 92       	push	r0
    35ec:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35f4:	0f 92       	push	r0
    35f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35fa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    35fe:	0f 92       	push	r0
    3600:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3604:	2f 93       	push	r18
    3606:	3f 93       	push	r19
    3608:	4f 93       	push	r20
    360a:	5f 93       	push	r21
    360c:	6f 93       	push	r22
    360e:	7f 93       	push	r23
    3610:	8f 93       	push	r24
    3612:	9f 93       	push	r25
    3614:	af 93       	push	r26
    3616:	bf 93       	push	r27
    3618:	ef 93       	push	r30
    361a:	ff 93       	push	r31
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    3624:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <tc_tcf1_ovf_callback>
    3628:	90 91 fb 20 	lds	r25, 0x20FB	; 0x8020fb <tc_tcf1_ovf_callback+0x1>
    362c:	89 2b       	or	r24, r25
    362e:	31 f0       	breq	.+12     	; 0x363c <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    3630:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <tc_tcf1_ovf_callback>
    3634:	90 91 fb 20 	lds	r25, 0x20FB	; 0x8020fb <tc_tcf1_ovf_callback+0x1>
    3638:	fc 01       	movw	r30, r24
    363a:	19 95       	eicall
	}
}
    363c:	00 00       	nop
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	bf 91       	pop	r27
    3648:	af 91       	pop	r26
    364a:	9f 91       	pop	r25
    364c:	8f 91       	pop	r24
    364e:	7f 91       	pop	r23
    3650:	6f 91       	pop	r22
    3652:	5f 91       	pop	r21
    3654:	4f 91       	pop	r20
    3656:	3f 91       	pop	r19
    3658:	2f 91       	pop	r18
    365a:	0f 90       	pop	r0
    365c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3660:	0f 90       	pop	r0
    3662:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3666:	0f 90       	pop	r0
    3668:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    366c:	0f 90       	pop	r0
    366e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3672:	0f 90       	pop	r0
    3674:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3678:	0f 90       	pop	r0
    367a:	1f 90       	pop	r1
    367c:	18 95       	reti

0000367e <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    367e:	1f 92       	push	r1
    3680:	0f 92       	push	r0
    3682:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3686:	0f 92       	push	r0
    3688:	11 24       	eor	r1, r1
    368a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    368e:	0f 92       	push	r0
    3690:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3694:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3698:	0f 92       	push	r0
    369a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    369e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    36a2:	0f 92       	push	r0
    36a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    36a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    36ac:	0f 92       	push	r0
    36ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    36b2:	2f 93       	push	r18
    36b4:	3f 93       	push	r19
    36b6:	4f 93       	push	r20
    36b8:	5f 93       	push	r21
    36ba:	6f 93       	push	r22
    36bc:	7f 93       	push	r23
    36be:	8f 93       	push	r24
    36c0:	9f 93       	push	r25
    36c2:	af 93       	push	r26
    36c4:	bf 93       	push	r27
    36c6:	ef 93       	push	r30
    36c8:	ff 93       	push	r31
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    36d2:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <tc_tcf1_err_callback>
    36d6:	90 91 fd 20 	lds	r25, 0x20FD	; 0x8020fd <tc_tcf1_err_callback+0x1>
    36da:	89 2b       	or	r24, r25
    36dc:	31 f0       	breq	.+12     	; 0x36ea <__vector_115+0x6c>
		tc_tcf1_err_callback();
    36de:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <tc_tcf1_err_callback>
    36e2:	90 91 fd 20 	lds	r25, 0x20FD	; 0x8020fd <tc_tcf1_err_callback+0x1>
    36e6:	fc 01       	movw	r30, r24
    36e8:	19 95       	eicall
	}
}
    36ea:	00 00       	nop
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	ff 91       	pop	r31
    36f2:	ef 91       	pop	r30
    36f4:	bf 91       	pop	r27
    36f6:	af 91       	pop	r26
    36f8:	9f 91       	pop	r25
    36fa:	8f 91       	pop	r24
    36fc:	7f 91       	pop	r23
    36fe:	6f 91       	pop	r22
    3700:	5f 91       	pop	r21
    3702:	4f 91       	pop	r20
    3704:	3f 91       	pop	r19
    3706:	2f 91       	pop	r18
    3708:	0f 90       	pop	r0
    370a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    370e:	0f 90       	pop	r0
    3710:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3714:	0f 90       	pop	r0
    3716:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    371a:	0f 90       	pop	r0
    371c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3720:	0f 90       	pop	r0
    3722:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3726:	0f 90       	pop	r0
    3728:	1f 90       	pop	r1
    372a:	18 95       	reti

0000372c <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    372c:	1f 92       	push	r1
    372e:	0f 92       	push	r0
    3730:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3734:	0f 92       	push	r0
    3736:	11 24       	eor	r1, r1
    3738:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    373c:	0f 92       	push	r0
    373e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3742:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3746:	0f 92       	push	r0
    3748:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    374c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3750:	0f 92       	push	r0
    3752:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3756:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    375a:	0f 92       	push	r0
    375c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3760:	2f 93       	push	r18
    3762:	3f 93       	push	r19
    3764:	4f 93       	push	r20
    3766:	5f 93       	push	r21
    3768:	6f 93       	push	r22
    376a:	7f 93       	push	r23
    376c:	8f 93       	push	r24
    376e:	9f 93       	push	r25
    3770:	af 93       	push	r26
    3772:	bf 93       	push	r27
    3774:	ef 93       	push	r30
    3776:	ff 93       	push	r31
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    3780:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <tc_tcf1_cca_callback>
    3784:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <tc_tcf1_cca_callback+0x1>
    3788:	89 2b       	or	r24, r25
    378a:	31 f0       	breq	.+12     	; 0x3798 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    378c:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <tc_tcf1_cca_callback>
    3790:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <tc_tcf1_cca_callback+0x1>
    3794:	fc 01       	movw	r30, r24
    3796:	19 95       	eicall
	}
}
    3798:	00 00       	nop
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	ff 91       	pop	r31
    37a0:	ef 91       	pop	r30
    37a2:	bf 91       	pop	r27
    37a4:	af 91       	pop	r26
    37a6:	9f 91       	pop	r25
    37a8:	8f 91       	pop	r24
    37aa:	7f 91       	pop	r23
    37ac:	6f 91       	pop	r22
    37ae:	5f 91       	pop	r21
    37b0:	4f 91       	pop	r20
    37b2:	3f 91       	pop	r19
    37b4:	2f 91       	pop	r18
    37b6:	0f 90       	pop	r0
    37b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    37bc:	0f 90       	pop	r0
    37be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    37c2:	0f 90       	pop	r0
    37c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37c8:	0f 90       	pop	r0
    37ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37ce:	0f 90       	pop	r0
    37d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    37d4:	0f 90       	pop	r0
    37d6:	1f 90       	pop	r1
    37d8:	18 95       	reti

000037da <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    37da:	1f 92       	push	r1
    37dc:	0f 92       	push	r0
    37de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    37e2:	0f 92       	push	r0
    37e4:	11 24       	eor	r1, r1
    37e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37ea:	0f 92       	push	r0
    37ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37f4:	0f 92       	push	r0
    37f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    37fe:	0f 92       	push	r0
    3800:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3804:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3808:	0f 92       	push	r0
    380a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    380e:	2f 93       	push	r18
    3810:	3f 93       	push	r19
    3812:	4f 93       	push	r20
    3814:	5f 93       	push	r21
    3816:	6f 93       	push	r22
    3818:	7f 93       	push	r23
    381a:	8f 93       	push	r24
    381c:	9f 93       	push	r25
    381e:	af 93       	push	r26
    3820:	bf 93       	push	r27
    3822:	ef 93       	push	r30
    3824:	ff 93       	push	r31
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    382e:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <tc_tcf1_ccb_callback>
    3832:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <tc_tcf1_ccb_callback+0x1>
    3836:	89 2b       	or	r24, r25
    3838:	31 f0       	breq	.+12     	; 0x3846 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    383a:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <tc_tcf1_ccb_callback>
    383e:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <tc_tcf1_ccb_callback+0x1>
    3842:	fc 01       	movw	r30, r24
    3844:	19 95       	eicall
	}
}
    3846:	00 00       	nop
    3848:	df 91       	pop	r29
    384a:	cf 91       	pop	r28
    384c:	ff 91       	pop	r31
    384e:	ef 91       	pop	r30
    3850:	bf 91       	pop	r27
    3852:	af 91       	pop	r26
    3854:	9f 91       	pop	r25
    3856:	8f 91       	pop	r24
    3858:	7f 91       	pop	r23
    385a:	6f 91       	pop	r22
    385c:	5f 91       	pop	r21
    385e:	4f 91       	pop	r20
    3860:	3f 91       	pop	r19
    3862:	2f 91       	pop	r18
    3864:	0f 90       	pop	r0
    3866:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    386a:	0f 90       	pop	r0
    386c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3870:	0f 90       	pop	r0
    3872:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3876:	0f 90       	pop	r0
    3878:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    387c:	0f 90       	pop	r0
    387e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3882:	0f 90       	pop	r0
    3884:	1f 90       	pop	r1
    3886:	18 95       	reti

00003888 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	1f 92       	push	r1
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    3892:	8f e3       	ldi	r24, 0x3F	; 63
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	fc 01       	movw	r30, r24
    3898:	80 81       	ld	r24, Z
    389a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    389c:	f8 94       	cli
	return flags;
    389e:	89 81       	ldd	r24, Y+1	; 0x01
}
    38a0:	0f 90       	pop	r0
    38a2:	df 91       	pop	r29
    38a4:	cf 91       	pop	r28
    38a6:	08 95       	ret

000038a8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	1f 92       	push	r1
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    38b4:	8f e3       	ldi	r24, 0x3F	; 63
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	29 81       	ldd	r18, Y+1	; 0x01
    38ba:	fc 01       	movw	r30, r24
    38bc:	20 83       	st	Z, r18
}
    38be:	00 00       	nop
    38c0:	0f 90       	pop	r0
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret

000038c8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    38c8:	1f 92       	push	r1
    38ca:	0f 92       	push	r0
    38cc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    38d0:	0f 92       	push	r0
    38d2:	11 24       	eor	r1, r1
    38d4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    38d8:	0f 92       	push	r0
    38da:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    38de:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    38e2:	0f 92       	push	r0
    38e4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    38e8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    38ec:	0f 92       	push	r0
    38ee:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    38f2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38f6:	0f 92       	push	r0
    38f8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38fc:	2f 93       	push	r18
    38fe:	3f 93       	push	r19
    3900:	4f 93       	push	r20
    3902:	5f 93       	push	r21
    3904:	6f 93       	push	r22
    3906:	7f 93       	push	r23
    3908:	8f 93       	push	r24
    390a:	9f 93       	push	r25
    390c:	af 93       	push	r26
    390e:	bf 93       	push	r27
    3910:	ef 93       	push	r30
    3912:	ff 93       	push	r31
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	43 d2       	rcall	.+1158   	; 0x3da4 <twim_interrupt_handler>
    391e:	00 00       	nop
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	ff 91       	pop	r31
    3926:	ef 91       	pop	r30
    3928:	bf 91       	pop	r27
    392a:	af 91       	pop	r26
    392c:	9f 91       	pop	r25
    392e:	8f 91       	pop	r24
    3930:	7f 91       	pop	r23
    3932:	6f 91       	pop	r22
    3934:	5f 91       	pop	r21
    3936:	4f 91       	pop	r20
    3938:	3f 91       	pop	r19
    393a:	2f 91       	pop	r18
    393c:	0f 90       	pop	r0
    393e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3942:	0f 90       	pop	r0
    3944:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3948:	0f 90       	pop	r0
    394a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    394e:	0f 90       	pop	r0
    3950:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3954:	0f 90       	pop	r0
    3956:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    395a:	0f 90       	pop	r0
    395c:	1f 90       	pop	r1
    395e:	18 95       	reti

00003960 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    3960:	1f 92       	push	r1
    3962:	0f 92       	push	r0
    3964:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3968:	0f 92       	push	r0
    396a:	11 24       	eor	r1, r1
    396c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3970:	0f 92       	push	r0
    3972:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3976:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    397a:	0f 92       	push	r0
    397c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3980:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3984:	0f 92       	push	r0
    3986:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    398a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    398e:	0f 92       	push	r0
    3990:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3994:	2f 93       	push	r18
    3996:	3f 93       	push	r19
    3998:	4f 93       	push	r20
    399a:	5f 93       	push	r21
    399c:	6f 93       	push	r22
    399e:	7f 93       	push	r23
    39a0:	8f 93       	push	r24
    39a2:	9f 93       	push	r25
    39a4:	af 93       	push	r26
    39a6:	bf 93       	push	r27
    39a8:	ef 93       	push	r30
    39aa:	ff 93       	push	r31
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	f7 d1       	rcall	.+1006   	; 0x3da4 <twim_interrupt_handler>
    39b6:	00 00       	nop
    39b8:	df 91       	pop	r29
    39ba:	cf 91       	pop	r28
    39bc:	ff 91       	pop	r31
    39be:	ef 91       	pop	r30
    39c0:	bf 91       	pop	r27
    39c2:	af 91       	pop	r26
    39c4:	9f 91       	pop	r25
    39c6:	8f 91       	pop	r24
    39c8:	7f 91       	pop	r23
    39ca:	6f 91       	pop	r22
    39cc:	5f 91       	pop	r21
    39ce:	4f 91       	pop	r20
    39d0:	3f 91       	pop	r19
    39d2:	2f 91       	pop	r18
    39d4:	0f 90       	pop	r0
    39d6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    39da:	0f 90       	pop	r0
    39dc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    39e0:	0f 90       	pop	r0
    39e2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    39e6:	0f 90       	pop	r0
    39e8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    39ec:	0f 90       	pop	r0
    39ee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    39f2:	0f 90       	pop	r0
    39f4:	1f 90       	pop	r1
    39f6:	18 95       	reti

000039f8 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    39f8:	1f 92       	push	r1
    39fa:	0f 92       	push	r0
    39fc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3a00:	0f 92       	push	r0
    3a02:	11 24       	eor	r1, r1
    3a04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a08:	0f 92       	push	r0
    3a0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a12:	0f 92       	push	r0
    3a14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a1c:	0f 92       	push	r0
    3a1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a26:	0f 92       	push	r0
    3a28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a2c:	2f 93       	push	r18
    3a2e:	3f 93       	push	r19
    3a30:	4f 93       	push	r20
    3a32:	5f 93       	push	r21
    3a34:	6f 93       	push	r22
    3a36:	7f 93       	push	r23
    3a38:	8f 93       	push	r24
    3a3a:	9f 93       	push	r25
    3a3c:	af 93       	push	r26
    3a3e:	bf 93       	push	r27
    3a40:	ef 93       	push	r30
    3a42:	ff 93       	push	r31
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	ab d1       	rcall	.+854    	; 0x3da4 <twim_interrupt_handler>
    3a4e:	00 00       	nop
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	ff 91       	pop	r31
    3a56:	ef 91       	pop	r30
    3a58:	bf 91       	pop	r27
    3a5a:	af 91       	pop	r26
    3a5c:	9f 91       	pop	r25
    3a5e:	8f 91       	pop	r24
    3a60:	7f 91       	pop	r23
    3a62:	6f 91       	pop	r22
    3a64:	5f 91       	pop	r21
    3a66:	4f 91       	pop	r20
    3a68:	3f 91       	pop	r19
    3a6a:	2f 91       	pop	r18
    3a6c:	0f 90       	pop	r0
    3a6e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a72:	0f 90       	pop	r0
    3a74:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a78:	0f 90       	pop	r0
    3a7a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a7e:	0f 90       	pop	r0
    3a80:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a84:	0f 90       	pop	r0
    3a86:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3a8a:	0f 90       	pop	r0
    3a8c:	1f 90       	pop	r1
    3a8e:	18 95       	reti

00003a90 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    3a90:	1f 92       	push	r1
    3a92:	0f 92       	push	r0
    3a94:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3a98:	0f 92       	push	r0
    3a9a:	11 24       	eor	r1, r1
    3a9c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3aa0:	0f 92       	push	r0
    3aa2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3aa6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3aaa:	0f 92       	push	r0
    3aac:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ab0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ab4:	0f 92       	push	r0
    3ab6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3aba:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3abe:	0f 92       	push	r0
    3ac0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ac4:	2f 93       	push	r18
    3ac6:	3f 93       	push	r19
    3ac8:	4f 93       	push	r20
    3aca:	5f 93       	push	r21
    3acc:	6f 93       	push	r22
    3ace:	7f 93       	push	r23
    3ad0:	8f 93       	push	r24
    3ad2:	9f 93       	push	r25
    3ad4:	af 93       	push	r26
    3ad6:	bf 93       	push	r27
    3ad8:	ef 93       	push	r30
    3ada:	ff 93       	push	r31
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	5f d1       	rcall	.+702    	; 0x3da4 <twim_interrupt_handler>
    3ae6:	00 00       	nop
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	ff 91       	pop	r31
    3aee:	ef 91       	pop	r30
    3af0:	bf 91       	pop	r27
    3af2:	af 91       	pop	r26
    3af4:	9f 91       	pop	r25
    3af6:	8f 91       	pop	r24
    3af8:	7f 91       	pop	r23
    3afa:	6f 91       	pop	r22
    3afc:	5f 91       	pop	r21
    3afe:	4f 91       	pop	r20
    3b00:	3f 91       	pop	r19
    3b02:	2f 91       	pop	r18
    3b04:	0f 90       	pop	r0
    3b06:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b0a:	0f 90       	pop	r0
    3b0c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b10:	0f 90       	pop	r0
    3b12:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b16:	0f 90       	pop	r0
    3b18:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b1c:	0f 90       	pop	r0
    3b1e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3b22:	0f 90       	pop	r0
    3b24:	1f 90       	pop	r1
    3b26:	18 95       	reti

00003b28 <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	1f 92       	push	r1
    3b2e:	1f 92       	push	r1
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	84 81       	ldd	r24, Z+4	; 0x04
    3b40:	88 2f       	mov	r24, r24
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	83 70       	andi	r24, 0x03	; 3
    3b46:	99 27       	eor	r25, r25
    3b48:	21 e0       	ldi	r18, 0x01	; 1
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <twim_idle+0x28>
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	08 95       	ret

00003b5c <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	1f 92       	push	r1
    3b62:	1f 92       	push	r1
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    3b6a:	05 c0       	rjmp	.+10     	; 0x3b76 <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    3b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6e:	88 23       	and	r24, r24
    3b70:	11 f0       	breq	.+4      	; 0x3b76 <twim_acquire+0x1a>
    3b72:	86 ef       	ldi	r24, 0xF6	; 246
    3b74:	0f c0       	rjmp	.+30     	; 0x3b94 <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    3b76:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <transfer+0x9>
    3b7a:	88 23       	and	r24, r24
    3b7c:	b9 f7       	brne	.-18     	; 0x3b6c <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    3b7e:	84 de       	rcall	.-760    	; 0x3888 <cpu_irq_save>
    3b80:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    3b88:	80 e8       	ldi	r24, 0x80	; 128
    3b8a:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <transfer+0xa>

	cpu_irq_restore (flags);
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	8b de       	rcall	.-746    	; 0x38a8 <cpu_irq_restore>

	return STATUS_OK;
    3b92:	80 e0       	ldi	r24, 0x00	; 0
}
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	08 95       	ret

00003b9e <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	1f 92       	push	r1
    3ba4:	cd b7       	in	r28, 0x3d	; 61
    3ba6:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    3ba8:	00 00       	nop
    3baa:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <transfer+0xa>
    3bae:	80 38       	cpi	r24, 0x80	; 128
    3bb0:	e1 f3       	breq	.-8      	; 0x3baa <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    3bb2:	00 c0       	rjmp	.+0      	; 0x3bb4 <twim_release+0x16>
    3bb4:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3bb8:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3bbc:	b5 df       	rcall	.-150    	; 0x3b28 <twim_idle>
    3bbe:	98 2f       	mov	r25, r24
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	89 27       	eor	r24, r25
    3bc4:	88 23       	and	r24, r24
    3bc6:	b1 f7       	brne	.-20     	; 0x3bb4 <twim_release+0x16>

	status_code_t const status = transfer.status;
    3bc8:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <transfer+0xa>
    3bcc:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    3bce:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <transfer+0x9>

	return status;
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bd4:	0f 90       	pop	r0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	08 95       	ret

00003bdc <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	28 97       	sbiw	r28, 0x08	; 8
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    3bea:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3bee:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3bf2:	89 83       	std	Y+1, r24	; 0x01
    3bf4:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    3bf6:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <transfer+0x2>
    3bfa:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <transfer+0x3>
    3bfe:	8b 83       	std	Y+3, r24	; 0x03
    3c00:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    3c02:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <transfer+0x4>
    3c06:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <transfer+0x5>
    3c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0e:	fc 01       	movw	r30, r24
    3c10:	84 81       	ldd	r24, Z+4	; 0x04
    3c12:	95 81       	ldd	r25, Z+5	; 0x05
    3c14:	28 17       	cp	r18, r24
    3c16:	39 07       	cpc	r19, r25
    3c18:	e4 f4       	brge	.+56     	; 0x3c52 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    3c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1e:	01 96       	adiw	r24, 0x01	; 1
    3c20:	8d 83       	std	Y+5, r24	; 0x05
    3c22:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    3c24:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <transfer+0x4>
    3c28:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <transfer+0x5>
    3c2c:	9c 01       	movw	r18, r24
    3c2e:	2f 5f       	subi	r18, 0xFF	; 255
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	20 93 06 21 	sts	0x2106, r18	; 0x802106 <transfer+0x4>
    3c36:	30 93 07 21 	sts	0x2107, r19	; 0x802107 <transfer+0x5>
    3c3a:	9c 01       	movw	r18, r24
    3c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c40:	82 0f       	add	r24, r18
    3c42:	93 1f       	adc	r25, r19
    3c44:	fc 01       	movw	r30, r24
    3c46:	20 81       	ld	r18, Z
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3c50:	3f c0       	rjmp	.+126    	; 0x3cd0 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    3c52:	20 91 08 21 	lds	r18, 0x2108	; 0x802108 <transfer+0x6>
    3c56:	30 91 09 21 	lds	r19, 0x2109	; 0x802109 <transfer+0x7>
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5e:	fc 01       	movw	r30, r24
    3c60:	80 85       	ldd	r24, Z+8	; 0x08
    3c62:	91 85       	ldd	r25, Z+9	; 0x09
    3c64:	28 17       	cp	r18, r24
    3c66:	39 07       	cpc	r19, r25
    3c68:	60 f5       	brcc	.+88     	; 0x3cc2 <twim_write_handler+0xe6>

		if (transfer.read) {
    3c6a:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <transfer+0x8>
    3c6e:	88 23       	and	r24, r24
    3c70:	59 f0       	breq	.+22     	; 0x3c88 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
    3c74:	9a 81       	ldd	r25, Y+2	; 0x02
    3c76:	fc 01       	movw	r30, r24
    3c78:	86 81       	ldd	r24, Z+6	; 0x06
    3c7a:	28 2f       	mov	r18, r24
    3c7c:	21 60       	ori	r18, 0x01	; 1
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	9a 81       	ldd	r25, Y+2	; 0x02
    3c82:	fc 01       	movw	r30, r24
    3c84:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3c86:	24 c0       	rjmp	.+72     	; 0x3cd0 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	86 81       	ldd	r24, Z+6	; 0x06
    3c90:	97 81       	ldd	r25, Z+7	; 0x07
    3c92:	8f 83       	std	Y+7, r24	; 0x07
    3c94:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    3c96:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <transfer+0x6>
    3c9a:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <transfer+0x7>
    3c9e:	9c 01       	movw	r18, r24
    3ca0:	2f 5f       	subi	r18, 0xFF	; 255
    3ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca4:	20 93 08 21 	sts	0x2108, r18	; 0x802108 <transfer+0x6>
    3ca8:	30 93 09 21 	sts	0x2109, r19	; 0x802109 <transfer+0x7>
    3cac:	2f 81       	ldd	r18, Y+7	; 0x07
    3cae:	38 85       	ldd	r19, Y+8	; 0x08
    3cb0:	82 0f       	add	r24, r18
    3cb2:	93 1f       	adc	r25, r19
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	20 81       	ld	r18, Z
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3cc0:	07 c0       	rjmp	.+14     	; 0x3cd0 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc6:	23 e0       	ldi	r18, 0x03	; 3
    3cc8:	fc 01       	movw	r30, r24
    3cca:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    3ccc:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <transfer+0xa>
	}
}
    3cd0:	00 00       	nop
    3cd2:	28 96       	adiw	r28, 0x08	; 8
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	08 95       	ret

00003cde <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	00 d0       	rcall	.+0      	; 0x3ce4 <twim_read_handler+0x6>
    3ce4:	00 d0       	rcall	.+0      	; 0x3ce6 <twim_read_handler+0x8>
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    3cea:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3cee:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3cf2:	89 83       	std	Y+1, r24	; 0x01
    3cf4:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    3cf6:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <transfer+0x2>
    3cfa:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <transfer+0x3>
    3cfe:	8b 83       	std	Y+3, r24	; 0x03
    3d00:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    3d02:	20 91 08 21 	lds	r18, 0x2108	; 0x802108 <transfer+0x6>
    3d06:	30 91 09 21 	lds	r19, 0x2109	; 0x802109 <transfer+0x7>
    3d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0e:	fc 01       	movw	r30, r24
    3d10:	80 85       	ldd	r24, Z+8	; 0x08
    3d12:	91 85       	ldd	r25, Z+9	; 0x09
    3d14:	28 17       	cp	r18, r24
    3d16:	39 07       	cpc	r19, r25
    3d18:	b0 f5       	brcc	.+108    	; 0x3d86 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    3d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1e:	fc 01       	movw	r30, r24
    3d20:	86 81       	ldd	r24, Z+6	; 0x06
    3d22:	97 81       	ldd	r25, Z+7	; 0x07
    3d24:	8d 83       	std	Y+5, r24	; 0x05
    3d26:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    3d28:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <transfer+0x6>
    3d2c:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <transfer+0x7>
    3d30:	9c 01       	movw	r18, r24
    3d32:	2f 5f       	subi	r18, 0xFF	; 255
    3d34:	3f 4f       	sbci	r19, 0xFF	; 255
    3d36:	20 93 08 21 	sts	0x2108, r18	; 0x802108 <transfer+0x6>
    3d3a:	30 93 09 21 	sts	0x2109, r19	; 0x802109 <transfer+0x7>
    3d3e:	2d 81       	ldd	r18, Y+5	; 0x05
    3d40:	3e 81       	ldd	r19, Y+6	; 0x06
    3d42:	82 0f       	add	r24, r18
    3d44:	93 1f       	adc	r25, r19
    3d46:	29 81       	ldd	r18, Y+1	; 0x01
    3d48:	3a 81       	ldd	r19, Y+2	; 0x02
    3d4a:	f9 01       	movw	r30, r18
    3d4c:	27 81       	ldd	r18, Z+7	; 0x07
    3d4e:	fc 01       	movw	r30, r24
    3d50:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    3d52:	20 91 08 21 	lds	r18, 0x2108	; 0x802108 <transfer+0x6>
    3d56:	30 91 09 21 	lds	r19, 0x2109	; 0x802109 <transfer+0x7>
    3d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5e:	fc 01       	movw	r30, r24
    3d60:	80 85       	ldd	r24, Z+8	; 0x08
    3d62:	91 85       	ldd	r25, Z+9	; 0x09
    3d64:	28 17       	cp	r18, r24
    3d66:	39 07       	cpc	r19, r25
    3d68:	30 f4       	brcc	.+12     	; 0x3d76 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6e:	22 e0       	ldi	r18, 0x02	; 2
    3d70:	fc 01       	movw	r30, r24
    3d72:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    3d74:	10 c0       	rjmp	.+32     	; 0x3d96 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7a:	27 e0       	ldi	r18, 0x07	; 7
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    3d80:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    3d84:	08 c0       	rjmp	.+16     	; 0x3d96 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8a:	23 e0       	ldi	r18, 0x03	; 3
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3d90:	89 ef       	ldi	r24, 0xF9	; 249
    3d92:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <transfer+0xa>
	}
}
    3d96:	00 00       	nop
    3d98:	26 96       	adiw	r28, 0x06	; 6
    3d9a:	cd bf       	out	0x3d, r28	; 61
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	08 95       	ret

00003da4 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	1f 92       	push	r1
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    3dae:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3db2:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3db6:	fc 01       	movw	r30, r24
    3db8:	84 81       	ldd	r24, Z+4	; 0x04
    3dba:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	88 2f       	mov	r24, r24
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	88 70       	andi	r24, 0x08	; 8
    3dc4:	99 27       	eor	r25, r25
    3dc6:	89 2b       	or	r24, r25
    3dc8:	99 f0       	breq	.+38     	; 0x3df0 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    3dca:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3dce:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3dd2:	29 81       	ldd	r18, Y+1	; 0x01
    3dd4:	28 60       	ori	r18, 0x08	; 8
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    3dda:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3dde:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3de2:	23 e0       	ldi	r18, 0x03	; 3
    3de4:	fc 01       	movw	r30, r24
    3de6:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    3de8:	86 ef       	ldi	r24, 0xF6	; 246
    3dea:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3dee:	2a c0       	rjmp	.+84     	; 0x3e44 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	88 2f       	mov	r24, r24
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	84 70       	andi	r24, 0x04	; 4
    3df8:	99 27       	eor	r25, r25
    3dfa:	89 2b       	or	r24, r25
    3dfc:	39 f4       	brne	.+14     	; 0x3e0c <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	88 2f       	mov	r24, r24
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	80 71       	andi	r24, 0x10	; 16
    3e06:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3e08:	89 2b       	or	r24, r25
    3e0a:	59 f0       	breq	.+22     	; 0x3e22 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3e0c:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3e10:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3e14:	23 e0       	ldi	r18, 0x03	; 3
    3e16:	fc 01       	movw	r30, r24
    3e18:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    3e1a:	8f ef       	ldi	r24, 0xFF	; 255
    3e1c:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3e20:	11 c0       	rjmp	.+34     	; 0x3e44 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	88 2f       	mov	r24, r24
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	80 74       	andi	r24, 0x40	; 64
    3e2a:	99 27       	eor	r25, r25
    3e2c:	89 2b       	or	r24, r25
    3e2e:	11 f0       	breq	.+4      	; 0x3e34 <twim_interrupt_handler+0x90>

		twim_write_handler();
    3e30:	d5 de       	rcall	.-598    	; 0x3bdc <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3e32:	08 c0       	rjmp	.+16     	; 0x3e44 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	88 23       	and	r24, r24

		twim_read_handler();
    3e38:	14 f4       	brge	.+4      	; 0x3e3e <twim_interrupt_handler+0x9a>
    3e3a:	51 df       	rcall	.-350    	; 0x3cde <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3e3c:	03 c0       	rjmp	.+6      	; 0x3e44 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    3e3e:	8b ef       	ldi	r24, 0xFB	; 251
    3e40:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <transfer+0xa>
	}
}
    3e44:	00 00       	nop
    3e46:	0f 90       	pop	r0
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	08 95       	ret

00003e4e <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	25 97       	sbiw	r28, 0x05	; 5
    3e58:	cd bf       	out	0x3d, r28	; 61
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	8a 83       	std	Y+2, r24	; 0x02
    3e5e:	9b 83       	std	Y+3, r25	; 0x03
    3e60:	6c 83       	std	Y+4, r22	; 0x04
    3e62:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    3e64:	88 eb       	ldi	r24, 0xB8	; 184
    3e66:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    3e68:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	84 81       	ldd	r24, Z+4	; 0x04
    3e70:	95 81       	ldd	r25, Z+5	; 0x05
    3e72:	a6 81       	ldd	r26, Z+6	; 0x06
    3e74:	b7 81       	ldd	r27, Z+7	; 0x07
    3e76:	28 2f       	mov	r18, r24
    3e78:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    3e80:	8a 81       	ldd	r24, Y+2	; 0x02
    3e82:	9b 81       	ldd	r25, Y+3	; 0x03
    3e84:	29 81       	ldd	r18, Y+1	; 0x01
    3e86:	fc 01       	movw	r30, r24
    3e88:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8e:	21 e0       	ldi	r18, 0x01	; 1
    3e90:	fc 01       	movw	r30, r24
    3e92:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    3e94:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <transfer+0x9>
	transfer.status    = STATUS_OK;
    3e98:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    3e9c:	80 ea       	ldi	r24, 0xA0	; 160
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	20 ea       	ldi	r18, 0xA0	; 160
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	f9 01       	movw	r30, r18
    3ea6:	22 81       	ldd	r18, Z+2	; 0x02
    3ea8:	22 60       	ori	r18, 0x02	; 2
    3eaa:	fc 01       	movw	r30, r24
    3eac:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    3eae:	78 94       	sei

	return STATUS_OK;
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
}
    3eb2:	25 96       	adiw	r28, 0x05	; 5
    3eb4:	cd bf       	out	0x3d, r28	; 61
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	08 95       	ret

00003ebe <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	27 97       	sbiw	r28, 0x07	; 7
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	8b 83       	std	Y+3, r24	; 0x03
    3ece:	9c 83       	std	Y+4, r25	; 0x04
    3ed0:	6d 83       	std	Y+5, r22	; 0x05
    3ed2:	7e 83       	std	Y+6, r23	; 0x06
    3ed4:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    3ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eda:	89 2b       	or	r24, r25
    3edc:	21 f0       	breq	.+8      	; 0x3ee6 <twi_master_transfer+0x28>
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee2:	89 2b       	or	r24, r25
    3ee4:	11 f4       	brne	.+4      	; 0x3eea <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    3ee6:	88 ef       	ldi	r24, 0xF8	; 248
    3ee8:	49 c0       	rjmp	.+146    	; 0x3f7c <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    3eea:	8d 81       	ldd	r24, Y+5	; 0x05
    3eec:	9e 81       	ldd	r25, Y+6	; 0x06
    3eee:	fc 01       	movw	r30, r24
    3ef0:	82 85       	ldd	r24, Z+10	; 0x0a
    3ef2:	34 de       	rcall	.-920    	; 0x3b5c <twim_acquire>
    3ef4:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	88 23       	and	r24, r24
    3efa:	09 f0       	breq	.+2      	; 0x3efe <twi_master_transfer+0x40>
    3efc:	3e c0       	rjmp	.+124    	; 0x3f7a <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	9c 81       	ldd	r25, Y+4	; 0x04
    3f02:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <transfer>
    3f06:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    3f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0e:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <transfer+0x2>
    3f12:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <transfer+0x3>
		transfer.addr_count  = 0;
    3f16:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <transfer+0x4>
    3f1a:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <transfer+0x5>
		transfer.data_count  = 0;
    3f1e:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <transfer+0x6>
    3f22:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <transfer+0x7>
		transfer.read        = read;
    3f26:	8f 81       	ldd	r24, Y+7	; 0x07
    3f28:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    3f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f30:	fc 01       	movw	r30, r24
    3f32:	80 81       	ld	r24, Z
    3f34:	88 0f       	add	r24, r24
    3f36:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    3f38:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	84 81       	ldd	r24, Z+4	; 0x04
    3f40:	95 81       	ldd	r25, Z+5	; 0x05
    3f42:	89 2b       	or	r24, r25
    3f44:	29 f4       	brne	.+10     	; 0x3f50 <twi_master_transfer+0x92>
    3f46:	9f 81       	ldd	r25, Y+7	; 0x07
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	89 27       	eor	r24, r25
    3f4c:	88 23       	and	r24, r24
    3f4e:	41 f0       	breq	.+16     	; 0x3f60 <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    3f50:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3f54:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3f58:	2a 81       	ldd	r18, Y+2	; 0x02
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	26 83       	std	Z+6, r18	; 0x06
    3f5e:	0b c0       	rjmp	.+22     	; 0x3f76 <twi_master_transfer+0xb8>
		} else if (read) {
    3f60:	8f 81       	ldd	r24, Y+7	; 0x07
    3f62:	88 23       	and	r24, r24
    3f64:	41 f0       	breq	.+16     	; 0x3f76 <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    3f66:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <transfer>
    3f6a:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <transfer+0x1>
    3f6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3f70:	21 60       	ori	r18, 0x01	; 1
    3f72:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    3f74:	26 83       	std	Z+6, r18	; 0x06
    3f76:	13 de       	rcall	.-986    	; 0x3b9e <twim_release>
    3f78:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f7c:	27 96       	adiw	r28, 0x07	; 7
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	de bf       	out	0x3e, r29	; 62
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	08 95       	ret

00003f88 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	1f 92       	push	r1
    3f8e:	1f 92       	push	r1
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	9a 83       	std	Y+2, r25	; 0x02
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	84 81       	ldd	r24, Z+4	; 0x04
    3fa0:	28 2f       	mov	r18, r24
    3fa2:	20 61       	ori	r18, 0x10	; 16
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa8:	fc 01       	movw	r30, r24
    3faa:	24 83       	std	Z+4, r18	; 0x04
    3fac:	00 00       	nop
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	08 95       	ret

00003fb8 <usart_format_set>:
    3fb8:	cf 93       	push	r28
    3fba:	df 93       	push	r29
    3fbc:	cd b7       	in	r28, 0x3d	; 61
    3fbe:	de b7       	in	r29, 0x3e	; 62
    3fc0:	25 97       	sbiw	r28, 0x05	; 5
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	de bf       	out	0x3e, r29	; 62
    3fc6:	89 83       	std	Y+1, r24	; 0x01
    3fc8:	9a 83       	std	Y+2, r25	; 0x02
    3fca:	6b 83       	std	Y+3, r22	; 0x03
    3fcc:	4c 83       	std	Y+4, r20	; 0x04
    3fce:	2d 83       	std	Y+5, r18	; 0x05
    3fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd4:	89 2b       	or	r24, r25
    3fd6:	98 2f       	mov	r25, r24
    3fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fda:	88 23       	and	r24, r24
    3fdc:	11 f0       	breq	.+4      	; 0x3fe2 <usart_format_set+0x2a>
    3fde:	88 e0       	ldi	r24, 0x08	; 8
    3fe0:	01 c0       	rjmp	.+2      	; 0x3fe4 <usart_format_set+0x2c>
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	89 2b       	or	r24, r25
    3fe6:	28 2f       	mov	r18, r24
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
    3fea:	9a 81       	ldd	r25, Y+2	; 0x02
    3fec:	fc 01       	movw	r30, r24
    3fee:	25 83       	std	Z+5, r18	; 0x05
    3ff0:	00 00       	nop
    3ff2:	25 96       	adiw	r28, 0x05	; 5
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <usart_tx_enable>:
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	1f 92       	push	r1
    4004:	1f 92       	push	r1
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	89 83       	std	Y+1, r24	; 0x01
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	9a 81       	ldd	r25, Y+2	; 0x02
    4012:	fc 01       	movw	r30, r24
    4014:	84 81       	ldd	r24, Z+4	; 0x04
    4016:	28 2f       	mov	r18, r24
    4018:	28 60       	ori	r18, 0x08	; 8
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	9a 81       	ldd	r25, Y+2	; 0x02
    401e:	fc 01       	movw	r30, r24
    4020:	24 83       	std	Z+4, r18	; 0x04
    4022:	00 00       	nop
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	08 95       	ret

0000402e <usart_set_mode>:
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	00 d0       	rcall	.+0      	; 0x4034 <usart_set_mode+0x6>
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	89 83       	std	Y+1, r24	; 0x01
    403a:	9a 83       	std	Y+2, r25	; 0x02
    403c:	6b 83       	std	Y+3, r22	; 0x03
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	fc 01       	movw	r30, r24
    4044:	85 81       	ldd	r24, Z+5	; 0x05
    4046:	98 2f       	mov	r25, r24
    4048:	9f 73       	andi	r25, 0x3F	; 63
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	89 2b       	or	r24, r25
    404e:	28 2f       	mov	r18, r24
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	fc 01       	movw	r30, r24
    4056:	25 83       	std	Z+5, r18	; 0x05
    4058:	00 00       	nop
    405a:	23 96       	adiw	r28, 0x03	; 3
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	08 95       	ret

00004066 <usart_data_register_is_empty>:
    4066:	cf 93       	push	r28
    4068:	df 93       	push	r29
    406a:	1f 92       	push	r1
    406c:	1f 92       	push	r1
    406e:	cd b7       	in	r28, 0x3d	; 61
    4070:	de b7       	in	r29, 0x3e	; 62
    4072:	89 83       	std	Y+1, r24	; 0x01
    4074:	9a 83       	std	Y+2, r25	; 0x02
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	9a 81       	ldd	r25, Y+2	; 0x02
    407a:	fc 01       	movw	r30, r24
    407c:	81 81       	ldd	r24, Z+1	; 0x01
    407e:	88 2f       	mov	r24, r24
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	80 72       	andi	r24, 0x20	; 32
    4084:	99 27       	eor	r25, r25
    4086:	21 e0       	ldi	r18, 0x01	; 1
    4088:	89 2b       	or	r24, r25
    408a:	09 f4       	brne	.+2      	; 0x408e <usart_data_register_is_empty+0x28>
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	82 2f       	mov	r24, r18
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	08 95       	ret

0000409a <usart_rx_is_complete>:
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	1f 92       	push	r1
    40a0:	1f 92       	push	r1
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    40a6:	89 83       	std	Y+1, r24	; 0x01
    40a8:	9a 83       	std	Y+2, r25	; 0x02
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	9a 81       	ldd	r25, Y+2	; 0x02
    40ae:	fc 01       	movw	r30, r24
    40b0:	81 81       	ldd	r24, Z+1	; 0x01
    40b2:	88 2f       	mov	r24, r24
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	80 78       	andi	r24, 0x80	; 128
    40b8:	99 27       	eor	r25, r25
    40ba:	21 e0       	ldi	r18, 0x01	; 1
    40bc:	89 2b       	or	r24, r25
    40be:	09 f4       	brne	.+2      	; 0x40c2 <usart_rx_is_complete+0x28>
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	82 2f       	mov	r24, r18
    40c4:	0f 90       	pop	r0
    40c6:	0f 90       	pop	r0
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	08 95       	ret

000040ce <sysclk_get_main_hz>:
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	98 e4       	ldi	r25, 0x48	; 72
    40da:	a8 ee       	ldi	r26, 0xE8	; 232
    40dc:	b1 e0       	ldi	r27, 0x01	; 1
    40de:	bc 01       	movw	r22, r24
    40e0:	cd 01       	movw	r24, r26
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	08 95       	ret

000040e8 <sysclk_get_per4_hz>:
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	1f 92       	push	r1
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    40f2:	19 82       	std	Y+1, r1	; 0x01
    40f4:	ec df       	rcall	.-40     	; 0x40ce <sysclk_get_main_hz>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	29 81       	ldd	r18, Y+1	; 0x01
    40fc:	22 2f       	mov	r18, r18
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	04 c0       	rjmp	.+8      	; 0x410a <sysclk_get_per4_hz+0x22>
    4102:	b6 95       	lsr	r27
    4104:	a7 95       	ror	r26
    4106:	97 95       	ror	r25
    4108:	87 95       	ror	r24
    410a:	2a 95       	dec	r18
    410c:	d2 f7       	brpl	.-12     	; 0x4102 <sysclk_get_per4_hz+0x1a>
    410e:	bc 01       	movw	r22, r24
    4110:	cd 01       	movw	r24, r26
    4112:	0f 90       	pop	r0
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	08 95       	ret

0000411a <sysclk_get_per2_hz>:
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	e2 df       	rcall	.-60     	; 0x40e8 <sysclk_get_per4_hz>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	bc 01       	movw	r22, r24
    412a:	cd 01       	movw	r24, r26
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	08 95       	ret

00004132 <sysclk_get_per_hz>:
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	ef df       	rcall	.-34     	; 0x411a <sysclk_get_per2_hz>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	bc 01       	movw	r22, r24
    4142:	cd 01       	movw	r24, r26
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	08 95       	ret

0000414a <sysclk_enable_peripheral_clock>:
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	1f 92       	push	r1
    4150:	1f 92       	push	r1
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	89 83       	std	Y+1, r24	; 0x01
    4158:	9a 83       	std	Y+2, r25	; 0x02
    415a:	89 81       	ldd	r24, Y+1	; 0x01
    415c:	9a 81       	ldd	r25, Y+2	; 0x02
    415e:	89 2b       	or	r24, r25
    4160:	09 f4       	brne	.+2      	; 0x4164 <sysclk_enable_peripheral_clock+0x1a>
    4162:	85 c1       	rjmp	.+778    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	9a 81       	ldd	r25, Y+2	; 0x02
    4168:	80 3c       	cpi	r24, 0xC0	; 192
    416a:	91 05       	cpc	r25, r1
    416c:	29 f4       	brne	.+10     	; 0x4178 <sysclk_enable_peripheral_clock+0x2e>
    416e:	60 e1       	ldi	r22, 0x10	; 16
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4176:	7b c1       	rjmp	.+758    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	9a 81       	ldd	r25, Y+2	; 0x02
    417c:	80 34       	cpi	r24, 0x40	; 64
    417e:	94 40       	sbci	r25, 0x04	; 4
    4180:	29 f4       	brne	.+10     	; 0x418c <sysclk_enable_peripheral_clock+0x42>
    4182:	68 e0       	ldi	r22, 0x08	; 8
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    418a:	71 c1       	rjmp	.+738    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	9a 81       	ldd	r25, Y+2	; 0x02
    4190:	81 15       	cp	r24, r1
    4192:	94 40       	sbci	r25, 0x04	; 4
    4194:	29 f4       	brne	.+10     	; 0x41a0 <sysclk_enable_peripheral_clock+0x56>
    4196:	64 e0       	ldi	r22, 0x04	; 4
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    419e:	67 c1       	rjmp	.+718    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	80 38       	cpi	r24, 0x80	; 128
    41a6:	91 40       	sbci	r25, 0x01	; 1
    41a8:	29 f4       	brne	.+10     	; 0x41b4 <sysclk_enable_peripheral_clock+0x6a>
    41aa:	62 e0       	ldi	r22, 0x02	; 2
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    41b2:	5d c1       	rjmp	.+698    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	9a 81       	ldd	r25, Y+2	; 0x02
    41b8:	81 15       	cp	r24, r1
    41ba:	91 40       	sbci	r25, 0x01	; 1
    41bc:	29 f4       	brne	.+10     	; 0x41c8 <sysclk_enable_peripheral_clock+0x7e>
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    41c6:	53 c1       	rjmp	.+678    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	9a 81       	ldd	r25, Y+2	; 0x02
    41cc:	80 38       	cpi	r24, 0x80	; 128
    41ce:	93 40       	sbci	r25, 0x03	; 3
    41d0:	29 f4       	brne	.+10     	; 0x41dc <sysclk_enable_peripheral_clock+0x92>
    41d2:	61 e0       	ldi	r22, 0x01	; 1
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    41da:	49 c1       	rjmp	.+658    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    41dc:	89 81       	ldd	r24, Y+1	; 0x01
    41de:	9a 81       	ldd	r25, Y+2	; 0x02
    41e0:	80 39       	cpi	r24, 0x90	; 144
    41e2:	93 40       	sbci	r25, 0x03	; 3
    41e4:	29 f4       	brne	.+10     	; 0x41f0 <sysclk_enable_peripheral_clock+0xa6>
    41e6:	61 e0       	ldi	r22, 0x01	; 1
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    41ee:	3f c1       	rjmp	.+638    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	9a 81       	ldd	r25, Y+2	; 0x02
    41f4:	81 15       	cp	r24, r1
    41f6:	92 40       	sbci	r25, 0x02	; 2
    41f8:	29 f4       	brne	.+10     	; 0x4204 <sysclk_enable_peripheral_clock+0xba>
    41fa:	62 e0       	ldi	r22, 0x02	; 2
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4202:	35 c1       	rjmp	.+618    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
    4208:	80 34       	cpi	r24, 0x40	; 64
    420a:	92 40       	sbci	r25, 0x02	; 2
    420c:	29 f4       	brne	.+10     	; 0x4218 <sysclk_enable_peripheral_clock+0xce>
    420e:	62 e0       	ldi	r22, 0x02	; 2
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4216:	2b c1       	rjmp	.+598    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4218:	89 81       	ldd	r24, Y+1	; 0x01
    421a:	9a 81       	ldd	r25, Y+2	; 0x02
    421c:	81 15       	cp	r24, r1
    421e:	93 40       	sbci	r25, 0x03	; 3
    4220:	29 f4       	brne	.+10     	; 0x422c <sysclk_enable_peripheral_clock+0xe2>
    4222:	64 e0       	ldi	r22, 0x04	; 4
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    422a:	21 c1       	rjmp	.+578    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	9a 81       	ldd	r25, Y+2	; 0x02
    4230:	80 32       	cpi	r24, 0x20	; 32
    4232:	93 40       	sbci	r25, 0x03	; 3
    4234:	29 f4       	brne	.+10     	; 0x4240 <sysclk_enable_peripheral_clock+0xf6>
    4236:	64 e0       	ldi	r22, 0x04	; 4
    4238:	82 e0       	ldi	r24, 0x02	; 2
    423a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    423e:	17 c1       	rjmp	.+558    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	9a 81       	ldd	r25, Y+2	; 0x02
    4244:	81 15       	cp	r24, r1
    4246:	98 40       	sbci	r25, 0x08	; 8
    4248:	29 f4       	brne	.+10     	; 0x4254 <sysclk_enable_peripheral_clock+0x10a>
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	83 e0       	ldi	r24, 0x03	; 3
    424e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4252:	0d c1       	rjmp	.+538    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	9a 81       	ldd	r25, Y+2	; 0x02
    4258:	81 15       	cp	r24, r1
    425a:	99 40       	sbci	r25, 0x09	; 9
    425c:	29 f4       	brne	.+10     	; 0x4268 <sysclk_enable_peripheral_clock+0x11e>
    425e:	61 e0       	ldi	r22, 0x01	; 1
    4260:	84 e0       	ldi	r24, 0x04	; 4
    4262:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4266:	03 c1       	rjmp	.+518    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	81 15       	cp	r24, r1
    426e:	9a 40       	sbci	r25, 0x0A	; 10
    4270:	29 f4       	brne	.+10     	; 0x427c <sysclk_enable_peripheral_clock+0x132>
    4272:	61 e0       	ldi	r22, 0x01	; 1
    4274:	85 e0       	ldi	r24, 0x05	; 5
    4276:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    427a:	f9 c0       	rjmp	.+498    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	81 15       	cp	r24, r1
    4282:	9b 40       	sbci	r25, 0x0B	; 11
    4284:	29 f4       	brne	.+10     	; 0x4290 <sysclk_enable_peripheral_clock+0x146>
    4286:	61 e0       	ldi	r22, 0x01	; 1
    4288:	86 e0       	ldi	r24, 0x06	; 6
    428a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    428e:	ef c0       	rjmp	.+478    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	9a 81       	ldd	r25, Y+2	; 0x02
    4294:	80 34       	cpi	r24, 0x40	; 64
    4296:	98 40       	sbci	r25, 0x08	; 8
    4298:	29 f4       	brne	.+10     	; 0x42a4 <sysclk_enable_peripheral_clock+0x15a>
    429a:	62 e0       	ldi	r22, 0x02	; 2
    429c:	83 e0       	ldi	r24, 0x03	; 3
    429e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    42a2:	e5 c0       	rjmp	.+458    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	9a 81       	ldd	r25, Y+2	; 0x02
    42a8:	80 34       	cpi	r24, 0x40	; 64
    42aa:	99 40       	sbci	r25, 0x09	; 9
    42ac:	29 f4       	brne	.+10     	; 0x42b8 <sysclk_enable_peripheral_clock+0x16e>
    42ae:	62 e0       	ldi	r22, 0x02	; 2
    42b0:	84 e0       	ldi	r24, 0x04	; 4
    42b2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    42b6:	db c0       	rjmp	.+438    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	9a 81       	ldd	r25, Y+2	; 0x02
    42bc:	80 34       	cpi	r24, 0x40	; 64
    42be:	9a 40       	sbci	r25, 0x0A	; 10
    42c0:	29 f4       	brne	.+10     	; 0x42cc <sysclk_enable_peripheral_clock+0x182>
    42c2:	62 e0       	ldi	r22, 0x02	; 2
    42c4:	85 e0       	ldi	r24, 0x05	; 5
    42c6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    42ca:	d1 c0       	rjmp	.+418    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	9a 81       	ldd	r25, Y+2	; 0x02
    42d0:	80 34       	cpi	r24, 0x40	; 64
    42d2:	9b 40       	sbci	r25, 0x0B	; 11
    42d4:	29 f4       	brne	.+10     	; 0x42e0 <sysclk_enable_peripheral_clock+0x196>
    42d6:	62 e0       	ldi	r22, 0x02	; 2
    42d8:	86 e0       	ldi	r24, 0x06	; 6
    42da:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    42de:	c7 c0       	rjmp	.+398    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    42e0:	89 81       	ldd	r24, Y+1	; 0x01
    42e2:	9a 81       	ldd	r25, Y+2	; 0x02
    42e4:	80 39       	cpi	r24, 0x90	; 144
    42e6:	98 40       	sbci	r25, 0x08	; 8
    42e8:	29 f4       	brne	.+10     	; 0x42f4 <sysclk_enable_peripheral_clock+0x1aa>
    42ea:	64 e0       	ldi	r22, 0x04	; 4
    42ec:	83 e0       	ldi	r24, 0x03	; 3
    42ee:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    42f2:	bd c0       	rjmp	.+378    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	9a 81       	ldd	r25, Y+2	; 0x02
    42f8:	80 39       	cpi	r24, 0x90	; 144
    42fa:	99 40       	sbci	r25, 0x09	; 9
    42fc:	29 f4       	brne	.+10     	; 0x4308 <sysclk_enable_peripheral_clock+0x1be>
    42fe:	64 e0       	ldi	r22, 0x04	; 4
    4300:	84 e0       	ldi	r24, 0x04	; 4
    4302:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4306:	b3 c0       	rjmp	.+358    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	80 39       	cpi	r24, 0x90	; 144
    430e:	9a 40       	sbci	r25, 0x0A	; 10
    4310:	29 f4       	brne	.+10     	; 0x431c <sysclk_enable_peripheral_clock+0x1d2>
    4312:	64 e0       	ldi	r22, 0x04	; 4
    4314:	85 e0       	ldi	r24, 0x05	; 5
    4316:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    431a:	a9 c0       	rjmp	.+338    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	9a 81       	ldd	r25, Y+2	; 0x02
    4320:	80 39       	cpi	r24, 0x90	; 144
    4322:	9b 40       	sbci	r25, 0x0B	; 11
    4324:	29 f4       	brne	.+10     	; 0x4330 <sysclk_enable_peripheral_clock+0x1e6>
    4326:	64 e0       	ldi	r22, 0x04	; 4
    4328:	86 e0       	ldi	r24, 0x06	; 6
    432a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    432e:	9f c0       	rjmp	.+318    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4330:	89 81       	ldd	r24, Y+1	; 0x01
    4332:	9a 81       	ldd	r25, Y+2	; 0x02
    4334:	80 3c       	cpi	r24, 0xC0	; 192
    4336:	98 40       	sbci	r25, 0x08	; 8
    4338:	29 f4       	brne	.+10     	; 0x4344 <sysclk_enable_peripheral_clock+0x1fa>
    433a:	68 e0       	ldi	r22, 0x08	; 8
    433c:	83 e0       	ldi	r24, 0x03	; 3
    433e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4342:	95 c0       	rjmp	.+298    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4344:	89 81       	ldd	r24, Y+1	; 0x01
    4346:	9a 81       	ldd	r25, Y+2	; 0x02
    4348:	80 3c       	cpi	r24, 0xC0	; 192
    434a:	99 40       	sbci	r25, 0x09	; 9
    434c:	29 f4       	brne	.+10     	; 0x4358 <sysclk_enable_peripheral_clock+0x20e>
    434e:	68 e0       	ldi	r22, 0x08	; 8
    4350:	84 e0       	ldi	r24, 0x04	; 4
    4352:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4356:	8b c0       	rjmp	.+278    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	9a 81       	ldd	r25, Y+2	; 0x02
    435c:	80 3c       	cpi	r24, 0xC0	; 192
    435e:	9a 40       	sbci	r25, 0x0A	; 10
    4360:	29 f4       	brne	.+10     	; 0x436c <sysclk_enable_peripheral_clock+0x222>
    4362:	68 e0       	ldi	r22, 0x08	; 8
    4364:	85 e0       	ldi	r24, 0x05	; 5
    4366:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    436a:	81 c0       	rjmp	.+258    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	9a 81       	ldd	r25, Y+2	; 0x02
    4370:	80 3c       	cpi	r24, 0xC0	; 192
    4372:	9b 40       	sbci	r25, 0x0B	; 11
    4374:	29 f4       	brne	.+10     	; 0x4380 <sysclk_enable_peripheral_clock+0x236>
    4376:	68 e0       	ldi	r22, 0x08	; 8
    4378:	86 e0       	ldi	r24, 0x06	; 6
    437a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    437e:	77 c0       	rjmp	.+238    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	9a 81       	ldd	r25, Y+2	; 0x02
    4384:	80 3a       	cpi	r24, 0xA0	; 160
    4386:	98 40       	sbci	r25, 0x08	; 8
    4388:	29 f4       	brne	.+10     	; 0x4394 <sysclk_enable_peripheral_clock+0x24a>
    438a:	60 e1       	ldi	r22, 0x10	; 16
    438c:	83 e0       	ldi	r24, 0x03	; 3
    438e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4392:	6d c0       	rjmp	.+218    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	9a 81       	ldd	r25, Y+2	; 0x02
    4398:	80 3a       	cpi	r24, 0xA0	; 160
    439a:	99 40       	sbci	r25, 0x09	; 9
    439c:	29 f4       	brne	.+10     	; 0x43a8 <sysclk_enable_peripheral_clock+0x25e>
    439e:	60 e1       	ldi	r22, 0x10	; 16
    43a0:	84 e0       	ldi	r24, 0x04	; 4
    43a2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    43a6:	63 c0       	rjmp	.+198    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	9a 81       	ldd	r25, Y+2	; 0x02
    43ac:	80 3a       	cpi	r24, 0xA0	; 160
    43ae:	9a 40       	sbci	r25, 0x0A	; 10
    43b0:	29 f4       	brne	.+10     	; 0x43bc <sysclk_enable_peripheral_clock+0x272>
    43b2:	60 e1       	ldi	r22, 0x10	; 16
    43b4:	85 e0       	ldi	r24, 0x05	; 5
    43b6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    43ba:	59 c0       	rjmp	.+178    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	9a 81       	ldd	r25, Y+2	; 0x02
    43c0:	80 3a       	cpi	r24, 0xA0	; 160
    43c2:	9b 40       	sbci	r25, 0x0B	; 11
    43c4:	29 f4       	brne	.+10     	; 0x43d0 <sysclk_enable_peripheral_clock+0x286>
    43c6:	60 e1       	ldi	r22, 0x10	; 16
    43c8:	86 e0       	ldi	r24, 0x06	; 6
    43ca:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    43ce:	4f c0       	rjmp	.+158    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	9a 81       	ldd	r25, Y+2	; 0x02
    43d4:	80 3b       	cpi	r24, 0xB0	; 176
    43d6:	98 40       	sbci	r25, 0x08	; 8
    43d8:	29 f4       	brne	.+10     	; 0x43e4 <sysclk_enable_peripheral_clock+0x29a>
    43da:	60 e2       	ldi	r22, 0x20	; 32
    43dc:	83 e0       	ldi	r24, 0x03	; 3
    43de:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    43e2:	45 c0       	rjmp	.+138    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    43e4:	89 81       	ldd	r24, Y+1	; 0x01
    43e6:	9a 81       	ldd	r25, Y+2	; 0x02
    43e8:	80 3b       	cpi	r24, 0xB0	; 176
    43ea:	99 40       	sbci	r25, 0x09	; 9
    43ec:	29 f4       	brne	.+10     	; 0x43f8 <sysclk_enable_peripheral_clock+0x2ae>
    43ee:	60 e2       	ldi	r22, 0x20	; 32
    43f0:	84 e0       	ldi	r24, 0x04	; 4
    43f2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    43f6:	3b c0       	rjmp	.+118    	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	9a 81       	ldd	r25, Y+2	; 0x02
    43fc:	80 3b       	cpi	r24, 0xB0	; 176
    43fe:	9a 40       	sbci	r25, 0x0A	; 10
    4400:	29 f4       	brne	.+10     	; 0x440c <sysclk_enable_peripheral_clock+0x2c2>
    4402:	60 e2       	ldi	r22, 0x20	; 32
    4404:	85 e0       	ldi	r24, 0x05	; 5
    4406:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    440a:	31 c0       	rjmp	.+98     	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	80 3b       	cpi	r24, 0xB0	; 176
    4412:	9b 40       	sbci	r25, 0x0B	; 11
    4414:	29 f4       	brne	.+10     	; 0x4420 <sysclk_enable_peripheral_clock+0x2d6>
    4416:	60 e2       	ldi	r22, 0x20	; 32
    4418:	86 e0       	ldi	r24, 0x06	; 6
    441a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    441e:	27 c0       	rjmp	.+78     	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4420:	89 81       	ldd	r24, Y+1	; 0x01
    4422:	9a 81       	ldd	r25, Y+2	; 0x02
    4424:	80 38       	cpi	r24, 0x80	; 128
    4426:	94 40       	sbci	r25, 0x04	; 4
    4428:	29 f4       	brne	.+10     	; 0x4434 <sysclk_enable_peripheral_clock+0x2ea>
    442a:	60 e4       	ldi	r22, 0x40	; 64
    442c:	83 e0       	ldi	r24, 0x03	; 3
    442e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4432:	1d c0       	rjmp	.+58     	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	9a 81       	ldd	r25, Y+2	; 0x02
    4438:	80 39       	cpi	r24, 0x90	; 144
    443a:	94 40       	sbci	r25, 0x04	; 4
    443c:	29 f4       	brne	.+10     	; 0x4448 <sysclk_enable_peripheral_clock+0x2fe>
    443e:	60 e4       	ldi	r22, 0x40	; 64
    4440:	84 e0       	ldi	r24, 0x04	; 4
    4442:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4446:	13 c0       	rjmp	.+38     	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4448:	89 81       	ldd	r24, Y+1	; 0x01
    444a:	9a 81       	ldd	r25, Y+2	; 0x02
    444c:	80 3a       	cpi	r24, 0xA0	; 160
    444e:	94 40       	sbci	r25, 0x04	; 4
    4450:	29 f4       	brne	.+10     	; 0x445c <sysclk_enable_peripheral_clock+0x312>
    4452:	60 e4       	ldi	r22, 0x40	; 64
    4454:	85 e0       	ldi	r24, 0x05	; 5
    4456:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    445a:	09 c0       	rjmp	.+18     	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    445c:	89 81       	ldd	r24, Y+1	; 0x01
    445e:	9a 81       	ldd	r25, Y+2	; 0x02
    4460:	80 3b       	cpi	r24, 0xB0	; 176
    4462:	94 40       	sbci	r25, 0x04	; 4
    4464:	21 f4       	brne	.+8      	; 0x446e <sysclk_enable_peripheral_clock+0x324>
    4466:	60 e4       	ldi	r22, 0x40	; 64
    4468:	86 e0       	ldi	r24, 0x06	; 6
    446a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    446e:	00 00       	nop
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	df 91       	pop	r29
    4476:	cf 91       	pop	r28
    4478:	08 95       	ret

0000447a <usart_init_rs232>:
    447a:	0f 93       	push	r16
    447c:	1f 93       	push	r17
    447e:	cf 93       	push	r28
    4480:	df 93       	push	r29
    4482:	cd b7       	in	r28, 0x3d	; 61
    4484:	de b7       	in	r29, 0x3e	; 62
    4486:	25 97       	sbiw	r28, 0x05	; 5
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	8a 83       	std	Y+2, r24	; 0x02
    448e:	9b 83       	std	Y+3, r25	; 0x03
    4490:	6c 83       	std	Y+4, r22	; 0x04
    4492:	7d 83       	std	Y+5, r23	; 0x05
    4494:	8a 81       	ldd	r24, Y+2	; 0x02
    4496:	9b 81       	ldd	r25, Y+3	; 0x03
    4498:	58 de       	rcall	.-848    	; 0x414a <sysclk_enable_peripheral_clock>
    449a:	8a 81       	ldd	r24, Y+2	; 0x02
    449c:	9b 81       	ldd	r25, Y+3	; 0x03
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	c6 dd       	rcall	.-1140   	; 0x402e <usart_set_mode>
    44a2:	8c 81       	ldd	r24, Y+4	; 0x04
    44a4:	9d 81       	ldd	r25, Y+5	; 0x05
    44a6:	fc 01       	movw	r30, r24
    44a8:	26 81       	ldd	r18, Z+6	; 0x06
    44aa:	8c 81       	ldd	r24, Y+4	; 0x04
    44ac:	9d 81       	ldd	r25, Y+5	; 0x05
    44ae:	fc 01       	movw	r30, r24
    44b0:	45 81       	ldd	r20, Z+5	; 0x05
    44b2:	8c 81       	ldd	r24, Y+4	; 0x04
    44b4:	9d 81       	ldd	r25, Y+5	; 0x05
    44b6:	fc 01       	movw	r30, r24
    44b8:	34 81       	ldd	r19, Z+4	; 0x04
    44ba:	8a 81       	ldd	r24, Y+2	; 0x02
    44bc:	9b 81       	ldd	r25, Y+3	; 0x03
    44be:	63 2f       	mov	r22, r19
    44c0:	7b dd       	rcall	.-1290   	; 0x3fb8 <usart_format_set>
    44c2:	37 de       	rcall	.-914    	; 0x4132 <sysclk_get_per_hz>
    44c4:	9b 01       	movw	r18, r22
    44c6:	ac 01       	movw	r20, r24
    44c8:	8c 81       	ldd	r24, Y+4	; 0x04
    44ca:	9d 81       	ldd	r25, Y+5	; 0x05
    44cc:	fc 01       	movw	r30, r24
    44ce:	80 81       	ld	r24, Z
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	a2 81       	ldd	r26, Z+2	; 0x02
    44d4:	b3 81       	ldd	r27, Z+3	; 0x03
    44d6:	ea 81       	ldd	r30, Y+2	; 0x02
    44d8:	fb 81       	ldd	r31, Y+3	; 0x03
    44da:	89 01       	movw	r16, r18
    44dc:	9a 01       	movw	r18, r20
    44de:	ac 01       	movw	r20, r24
    44e0:	bd 01       	movw	r22, r26
    44e2:	cf 01       	movw	r24, r30
    44e4:	48 d0       	rcall	.+144    	; 0x4576 <usart_set_baudrate>
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	9b 81       	ldd	r25, Y+3	; 0x03
    44ec:	88 dd       	rcall	.-1264   	; 0x3ffe <usart_tx_enable>
    44ee:	8a 81       	ldd	r24, Y+2	; 0x02
    44f0:	9b 81       	ldd	r25, Y+3	; 0x03
    44f2:	4a dd       	rcall	.-1388   	; 0x3f88 <usart_rx_enable>
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	25 96       	adiw	r28, 0x05	; 5
    44f8:	cd bf       	out	0x3d, r28	; 61
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	1f 91       	pop	r17
    4502:	0f 91       	pop	r16
    4504:	08 95       	ret

00004506 <usart_putchar>:
    4506:	cf 93       	push	r28
    4508:	df 93       	push	r29
    450a:	00 d0       	rcall	.+0      	; 0x450c <usart_putchar+0x6>
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	6b 83       	std	Y+3, r22	; 0x03
    4516:	00 00       	nop
    4518:	89 81       	ldd	r24, Y+1	; 0x01
    451a:	9a 81       	ldd	r25, Y+2	; 0x02
    451c:	a4 dd       	rcall	.-1208   	; 0x4066 <usart_data_register_is_empty>
    451e:	98 2f       	mov	r25, r24
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	89 27       	eor	r24, r25
    4524:	88 23       	and	r24, r24
    4526:	c1 f7       	brne	.-16     	; 0x4518 <usart_putchar+0x12>
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	9a 81       	ldd	r25, Y+2	; 0x02
    452c:	2b 81       	ldd	r18, Y+3	; 0x03
    452e:	fc 01       	movw	r30, r24
    4530:	20 83       	st	Z, r18
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	23 96       	adiw	r28, 0x03	; 3
    4538:	cd bf       	out	0x3d, r28	; 61
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	08 95       	ret

00004542 <usart_getchar>:
    4542:	cf 93       	push	r28
    4544:	df 93       	push	r29
    4546:	1f 92       	push	r1
    4548:	1f 92       	push	r1
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	89 83       	std	Y+1, r24	; 0x01
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	00 00       	nop
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	9a 81       	ldd	r25, Y+2	; 0x02
    4558:	a0 dd       	rcall	.-1216   	; 0x409a <usart_rx_is_complete>
    455a:	98 2f       	mov	r25, r24
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	89 27       	eor	r24, r25
    4560:	88 23       	and	r24, r24
    4562:	c1 f7       	brne	.-16     	; 0x4554 <usart_getchar+0x12>
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	9a 81       	ldd	r25, Y+2	; 0x02
    4568:	fc 01       	movw	r30, r24
    456a:	80 81       	ld	r24, Z
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	08 95       	ret

00004576 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    4576:	ef 92       	push	r14
    4578:	ff 92       	push	r15
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	6f 97       	sbiw	r28, 0x1f	; 31
    4588:	cd bf       	out	0x3d, r28	; 61
    458a:	de bf       	out	0x3e, r29	; 62
    458c:	8e 8b       	std	Y+22, r24	; 0x16
    458e:	9f 8b       	std	Y+23, r25	; 0x17
    4590:	48 8f       	std	Y+24, r20	; 0x18
    4592:	59 8f       	std	Y+25, r21	; 0x19
    4594:	6a 8f       	std	Y+26, r22	; 0x1a
    4596:	7b 8f       	std	Y+27, r23	; 0x1b
    4598:	0c 8f       	std	Y+28, r16	; 0x1c
    459a:	1d 8f       	std	Y+29, r17	; 0x1d
    459c:	2e 8f       	std	Y+30, r18	; 0x1e
    459e:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    45a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    45a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45a4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    45a6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    45a8:	68 94       	set
    45aa:	12 f8       	bld	r1, 2
    45ac:	b6 95       	lsr	r27
    45ae:	a7 95       	ror	r26
    45b0:	97 95       	ror	r25
    45b2:	87 95       	ror	r24
    45b4:	16 94       	lsr	r1
    45b6:	d1 f7       	brne	.-12     	; 0x45ac <usart_set_baudrate+0x36>
    45b8:	8e 87       	std	Y+14, r24	; 0x0e
    45ba:	9f 87       	std	Y+15, r25	; 0x0f
    45bc:	a8 8b       	std	Y+16, r26	; 0x10
    45be:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    45c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    45c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45c4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    45c6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    45c8:	07 2e       	mov	r0, r23
    45ca:	76 e1       	ldi	r23, 0x16	; 22
    45cc:	b6 95       	lsr	r27
    45ce:	a7 95       	ror	r26
    45d0:	97 95       	ror	r25
    45d2:	87 95       	ror	r24
    45d4:	7a 95       	dec	r23
    45d6:	d1 f7       	brne	.-12     	; 0x45cc <usart_set_baudrate+0x56>
    45d8:	70 2d       	mov	r23, r0
    45da:	8a 87       	std	Y+10, r24	; 0x0a
    45dc:	9b 87       	std	Y+11, r25	; 0x0b
    45de:	ac 87       	std	Y+12, r26	; 0x0c
    45e0:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    45e2:	8e 89       	ldd	r24, Y+22	; 0x16
    45e4:	9f 89       	ldd	r25, Y+23	; 0x17
    45e6:	fc 01       	movw	r30, r24
    45e8:	84 81       	ldd	r24, Z+4	; 0x04
    45ea:	88 2f       	mov	r24, r24
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	84 70       	andi	r24, 0x04	; 4
    45f0:	99 27       	eor	r25, r25
    45f2:	89 2b       	or	r24, r25
    45f4:	c1 f4       	brne	.+48     	; 0x4626 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    45f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    45f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    45fa:	a8 89       	ldd	r26, Y+16	; 0x10
    45fc:	b9 89       	ldd	r27, Y+17	; 0x11
    45fe:	b6 95       	lsr	r27
    4600:	a7 95       	ror	r26
    4602:	97 95       	ror	r25
    4604:	87 95       	ror	r24
    4606:	8e 87       	std	Y+14, r24	; 0x0e
    4608:	9f 87       	std	Y+15, r25	; 0x0f
    460a:	a8 8b       	std	Y+16, r26	; 0x10
    460c:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    460e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4610:	9b 85       	ldd	r25, Y+11	; 0x0b
    4612:	ac 85       	ldd	r26, Y+12	; 0x0c
    4614:	bd 85       	ldd	r27, Y+13	; 0x0d
    4616:	b6 95       	lsr	r27
    4618:	a7 95       	ror	r26
    461a:	97 95       	ror	r25
    461c:	87 95       	ror	r24
    461e:	8a 87       	std	Y+10, r24	; 0x0a
    4620:	9b 87       	std	Y+11, r25	; 0x0b
    4622:	ac 87       	std	Y+12, r26	; 0x0c
    4624:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    4626:	28 8d       	ldd	r18, Y+24	; 0x18
    4628:	39 8d       	ldd	r19, Y+25	; 0x19
    462a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    462c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    462e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4630:	9f 85       	ldd	r25, Y+15	; 0x0f
    4632:	a8 89       	ldd	r26, Y+16	; 0x10
    4634:	b9 89       	ldd	r27, Y+17	; 0x11
    4636:	82 17       	cp	r24, r18
    4638:	93 07       	cpc	r25, r19
    463a:	a4 07       	cpc	r26, r20
    463c:	b5 07       	cpc	r27, r21
    463e:	68 f0       	brcs	.+26     	; 0x465a <usart_set_baudrate+0xe4>
    4640:	28 8d       	ldd	r18, Y+24	; 0x18
    4642:	39 8d       	ldd	r19, Y+25	; 0x19
    4644:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4646:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4648:	8a 85       	ldd	r24, Y+10	; 0x0a
    464a:	9b 85       	ldd	r25, Y+11	; 0x0b
    464c:	ac 85       	ldd	r26, Y+12	; 0x0c
    464e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4650:	28 17       	cp	r18, r24
    4652:	39 07       	cpc	r19, r25
    4654:	4a 07       	cpc	r20, r26
    4656:	5b 07       	cpc	r21, r27
    4658:	10 f4       	brcc	.+4      	; 0x465e <usart_set_baudrate+0xe8>
		return false;
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	40 c1       	rjmp	.+640    	; 0x48de <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    465e:	8e 89       	ldd	r24, Y+22	; 0x16
    4660:	9f 89       	ldd	r25, Y+23	; 0x17
    4662:	fc 01       	movw	r30, r24
    4664:	84 81       	ldd	r24, Z+4	; 0x04
    4666:	88 2f       	mov	r24, r24
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	84 70       	andi	r24, 0x04	; 4
    466c:	99 27       	eor	r25, r25
    466e:	89 2b       	or	r24, r25
    4670:	61 f4       	brne	.+24     	; 0x468a <usart_set_baudrate+0x114>
		baud *= 2;
    4672:	88 8d       	ldd	r24, Y+24	; 0x18
    4674:	99 8d       	ldd	r25, Y+25	; 0x19
    4676:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4678:	bb 8d       	ldd	r27, Y+27	; 0x1b
    467a:	88 0f       	add	r24, r24
    467c:	99 1f       	adc	r25, r25
    467e:	aa 1f       	adc	r26, r26
    4680:	bb 1f       	adc	r27, r27
    4682:	88 8f       	std	Y+24, r24	; 0x18
    4684:	99 8f       	std	Y+25, r25	; 0x19
    4686:	aa 8f       	std	Y+26, r26	; 0x1a
    4688:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    468a:	8f ef       	ldi	r24, 0xFF	; 255
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	a0 e0       	ldi	r26, 0x00	; 0
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	8e 83       	std	Y+6, r24	; 0x06
    4694:	9f 83       	std	Y+7, r25	; 0x07
    4696:	a8 87       	std	Y+8, r26	; 0x08
    4698:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    469a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    469c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    469e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    46a0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    46a2:	28 8d       	ldd	r18, Y+24	; 0x18
    46a4:	39 8d       	ldd	r19, Y+25	; 0x19
    46a6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    46a8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    46aa:	bc 01       	movw	r22, r24
    46ac:	cd 01       	movw	r24, r26
    46ae:	0e 94 c8 34 	call	0x6990	; 0x6990 <__udivmodsi4>
    46b2:	da 01       	movw	r26, r20
    46b4:	c9 01       	movw	r24, r18
    46b6:	8a 8b       	std	Y+18, r24	; 0x12
    46b8:	9b 8b       	std	Y+19, r25	; 0x13
    46ba:	ac 8b       	std	Y+20, r26	; 0x14
    46bc:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    46be:	89 ef       	ldi	r24, 0xF9	; 249
    46c0:	89 83       	std	Y+1, r24	; 0x01
    46c2:	28 c0       	rjmp	.+80     	; 0x4714 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    46c4:	2a 89       	ldd	r18, Y+18	; 0x12
    46c6:	3b 89       	ldd	r19, Y+19	; 0x13
    46c8:	4c 89       	ldd	r20, Y+20	; 0x14
    46ca:	5d 89       	ldd	r21, Y+21	; 0x15
    46cc:	8e 81       	ldd	r24, Y+6	; 0x06
    46ce:	9f 81       	ldd	r25, Y+7	; 0x07
    46d0:	a8 85       	ldd	r26, Y+8	; 0x08
    46d2:	b9 85       	ldd	r27, Y+9	; 0x09
    46d4:	28 17       	cp	r18, r24
    46d6:	39 07       	cpc	r19, r25
    46d8:	4a 07       	cpc	r20, r26
    46da:	5b 07       	cpc	r21, r27
    46dc:	f8 f0       	brcs	.+62     	; 0x471c <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    46de:	8e 81       	ldd	r24, Y+6	; 0x06
    46e0:	9f 81       	ldd	r25, Y+7	; 0x07
    46e2:	a8 85       	ldd	r26, Y+8	; 0x08
    46e4:	b9 85       	ldd	r27, Y+9	; 0x09
    46e6:	88 0f       	add	r24, r24
    46e8:	99 1f       	adc	r25, r25
    46ea:	aa 1f       	adc	r26, r26
    46ec:	bb 1f       	adc	r27, r27
    46ee:	8e 83       	std	Y+6, r24	; 0x06
    46f0:	9f 83       	std	Y+7, r25	; 0x07
    46f2:	a8 87       	std	Y+8, r26	; 0x08
    46f4:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    46f6:	89 81       	ldd	r24, Y+1	; 0x01
    46f8:	8d 3f       	cpi	r24, 0xFD	; 253
    46fa:	4c f4       	brge	.+18     	; 0x470e <usart_set_baudrate+0x198>
			limit |= 1;
    46fc:	8e 81       	ldd	r24, Y+6	; 0x06
    46fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4700:	a8 85       	ldd	r26, Y+8	; 0x08
    4702:	b9 85       	ldd	r27, Y+9	; 0x09
    4704:	81 60       	ori	r24, 0x01	; 1
    4706:	8e 83       	std	Y+6, r24	; 0x06
    4708:	9f 83       	std	Y+7, r25	; 0x07
    470a:	a8 87       	std	Y+8, r26	; 0x08
    470c:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	8f 5f       	subi	r24, 0xFF	; 255
    4712:	89 83       	std	Y+1, r24	; 0x01
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	87 30       	cpi	r24, 0x07	; 7
    4718:	ac f2       	brlt	.-86     	; 0x46c4 <usart_set_baudrate+0x14e>
    471a:	01 c0       	rjmp	.+2      	; 0x471e <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    471c:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	88 23       	and	r24, r24
    4722:	0c f0       	brlt	.+2      	; 0x4726 <usart_set_baudrate+0x1b0>
    4724:	8a c0       	rjmp	.+276    	; 0x483a <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    4726:	88 8d       	ldd	r24, Y+24	; 0x18
    4728:	99 8d       	ldd	r25, Y+25	; 0x19
    472a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    472c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	aa 1f       	adc	r26, r26
    4734:	bb 1f       	adc	r27, r27
    4736:	88 0f       	add	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	aa 1f       	adc	r26, r26
    473c:	bb 1f       	adc	r27, r27
    473e:	88 0f       	add	r24, r24
    4740:	99 1f       	adc	r25, r25
    4742:	aa 1f       	adc	r26, r26
    4744:	bb 1f       	adc	r27, r27
    4746:	9c 01       	movw	r18, r24
    4748:	ad 01       	movw	r20, r26
    474a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    474c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    474e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4750:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4752:	82 1b       	sub	r24, r18
    4754:	93 0b       	sbc	r25, r19
    4756:	a4 0b       	sbc	r26, r20
    4758:	b5 0b       	sbc	r27, r21
    475a:	8c 8f       	std	Y+28, r24	; 0x1c
    475c:	9d 8f       	std	Y+29, r25	; 0x1d
    475e:	ae 8f       	std	Y+30, r26	; 0x1e
    4760:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    4762:	89 81       	ldd	r24, Y+1	; 0x01
    4764:	8e 3f       	cpi	r24, 0xFE	; 254
    4766:	94 f5       	brge	.+100    	; 0x47cc <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	08 2e       	mov	r0, r24
    476c:	00 0c       	add	r0, r0
    476e:	99 0b       	sbc	r25, r25
    4770:	2d ef       	ldi	r18, 0xFD	; 253
    4772:	3f ef       	ldi	r19, 0xFF	; 255
    4774:	28 1b       	sub	r18, r24
    4776:	39 0b       	sbc	r19, r25
    4778:	8c 8d       	ldd	r24, Y+28	; 0x1c
    477a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    477c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    477e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4780:	7c 01       	movw	r14, r24
    4782:	8d 01       	movw	r16, r26
    4784:	04 c0       	rjmp	.+8      	; 0x478e <usart_set_baudrate+0x218>
    4786:	ee 0c       	add	r14, r14
    4788:	ff 1c       	adc	r15, r15
    478a:	00 1f       	adc	r16, r16
    478c:	11 1f       	adc	r17, r17
    478e:	2a 95       	dec	r18
    4790:	d2 f7       	brpl	.-12     	; 0x4786 <usart_set_baudrate+0x210>
    4792:	a8 01       	movw	r20, r16
    4794:	97 01       	movw	r18, r14
    4796:	88 8d       	ldd	r24, Y+24	; 0x18
    4798:	99 8d       	ldd	r25, Y+25	; 0x19
    479a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    479c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    479e:	b6 95       	lsr	r27
    47a0:	a7 95       	ror	r26
    47a2:	97 95       	ror	r25
    47a4:	87 95       	ror	r24
    47a6:	82 0f       	add	r24, r18
    47a8:	93 1f       	adc	r25, r19
    47aa:	a4 1f       	adc	r26, r20
    47ac:	b5 1f       	adc	r27, r21
    47ae:	28 8d       	ldd	r18, Y+24	; 0x18
    47b0:	39 8d       	ldd	r19, Y+25	; 0x19
    47b2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    47b4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	0e 94 c8 34 	call	0x6990	; 0x6990 <__udivmodsi4>
    47be:	da 01       	movw	r26, r20
    47c0:	c9 01       	movw	r24, r18
    47c2:	8a 83       	std	Y+2, r24	; 0x02
    47c4:	9b 83       	std	Y+3, r25	; 0x03
    47c6:	ac 83       	std	Y+4, r26	; 0x04
    47c8:	bd 83       	std	Y+5, r27	; 0x05
    47ca:	70 c0       	rjmp	.+224    	; 0x48ac <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	08 2e       	mov	r0, r24
    47d0:	00 0c       	add	r0, r0
    47d2:	99 0b       	sbc	r25, r25
    47d4:	9c 01       	movw	r18, r24
    47d6:	2d 5f       	subi	r18, 0xFD	; 253
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	88 8d       	ldd	r24, Y+24	; 0x18
    47dc:	99 8d       	ldd	r25, Y+25	; 0x19
    47de:	aa 8d       	ldd	r26, Y+26	; 0x1a
    47e0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    47e2:	04 c0       	rjmp	.+8      	; 0x47ec <usart_set_baudrate+0x276>
    47e4:	88 0f       	add	r24, r24
    47e6:	99 1f       	adc	r25, r25
    47e8:	aa 1f       	adc	r26, r26
    47ea:	bb 1f       	adc	r27, r27
    47ec:	2a 95       	dec	r18
    47ee:	d2 f7       	brpl	.-12     	; 0x47e4 <usart_set_baudrate+0x26e>
    47f0:	88 8f       	std	Y+24, r24	; 0x18
    47f2:	99 8f       	std	Y+25, r25	; 0x19
    47f4:	aa 8f       	std	Y+26, r26	; 0x1a
    47f6:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    47f8:	88 8d       	ldd	r24, Y+24	; 0x18
    47fa:	99 8d       	ldd	r25, Y+25	; 0x19
    47fc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    47fe:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4800:	9c 01       	movw	r18, r24
    4802:	ad 01       	movw	r20, r26
    4804:	56 95       	lsr	r21
    4806:	47 95       	ror	r20
    4808:	37 95       	ror	r19
    480a:	27 95       	ror	r18
    480c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    480e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4810:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4812:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4814:	82 0f       	add	r24, r18
    4816:	93 1f       	adc	r25, r19
    4818:	a4 1f       	adc	r26, r20
    481a:	b5 1f       	adc	r27, r21
    481c:	28 8d       	ldd	r18, Y+24	; 0x18
    481e:	39 8d       	ldd	r19, Y+25	; 0x19
    4820:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4822:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4824:	bc 01       	movw	r22, r24
    4826:	cd 01       	movw	r24, r26
    4828:	0e 94 c8 34 	call	0x6990	; 0x6990 <__udivmodsi4>
    482c:	da 01       	movw	r26, r20
    482e:	c9 01       	movw	r24, r18
    4830:	8a 83       	std	Y+2, r24	; 0x02
    4832:	9b 83       	std	Y+3, r25	; 0x03
    4834:	ac 83       	std	Y+4, r26	; 0x04
    4836:	bd 83       	std	Y+5, r27	; 0x05
    4838:	39 c0       	rjmp	.+114    	; 0x48ac <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    483a:	89 81       	ldd	r24, Y+1	; 0x01
    483c:	08 2e       	mov	r0, r24
    483e:	00 0c       	add	r0, r0
    4840:	99 0b       	sbc	r25, r25
    4842:	9c 01       	movw	r18, r24
    4844:	2d 5f       	subi	r18, 0xFD	; 253
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	88 8d       	ldd	r24, Y+24	; 0x18
    484a:	99 8d       	ldd	r25, Y+25	; 0x19
    484c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    484e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4850:	04 c0       	rjmp	.+8      	; 0x485a <usart_set_baudrate+0x2e4>
    4852:	88 0f       	add	r24, r24
    4854:	99 1f       	adc	r25, r25
    4856:	aa 1f       	adc	r26, r26
    4858:	bb 1f       	adc	r27, r27
    485a:	2a 95       	dec	r18
    485c:	d2 f7       	brpl	.-12     	; 0x4852 <usart_set_baudrate+0x2dc>
    485e:	88 8f       	std	Y+24, r24	; 0x18
    4860:	99 8f       	std	Y+25, r25	; 0x19
    4862:	aa 8f       	std	Y+26, r26	; 0x1a
    4864:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    4866:	88 8d       	ldd	r24, Y+24	; 0x18
    4868:	99 8d       	ldd	r25, Y+25	; 0x19
    486a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    486c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    486e:	9c 01       	movw	r18, r24
    4870:	ad 01       	movw	r20, r26
    4872:	56 95       	lsr	r21
    4874:	47 95       	ror	r20
    4876:	37 95       	ror	r19
    4878:	27 95       	ror	r18
    487a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    487c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    487e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4880:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4882:	82 0f       	add	r24, r18
    4884:	93 1f       	adc	r25, r19
    4886:	a4 1f       	adc	r26, r20
    4888:	b5 1f       	adc	r27, r21
    488a:	28 8d       	ldd	r18, Y+24	; 0x18
    488c:	39 8d       	ldd	r19, Y+25	; 0x19
    488e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4890:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4892:	bc 01       	movw	r22, r24
    4894:	cd 01       	movw	r24, r26
    4896:	0e 94 c8 34 	call	0x6990	; 0x6990 <__udivmodsi4>
    489a:	da 01       	movw	r26, r20
    489c:	c9 01       	movw	r24, r18
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	a1 09       	sbc	r26, r1
    48a2:	b1 09       	sbc	r27, r1
    48a4:	8a 83       	std	Y+2, r24	; 0x02
    48a6:	9b 83       	std	Y+3, r25	; 0x03
    48a8:	ac 83       	std	Y+4, r26	; 0x04
    48aa:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    48ac:	8a 81       	ldd	r24, Y+2	; 0x02
    48ae:	9b 81       	ldd	r25, Y+3	; 0x03
    48b0:	ac 81       	ldd	r26, Y+4	; 0x04
    48b2:	bd 81       	ldd	r27, Y+5	; 0x05
    48b4:	89 2f       	mov	r24, r25
    48b6:	9a 2f       	mov	r25, r26
    48b8:	ab 2f       	mov	r26, r27
    48ba:	bb 27       	eor	r27, r27
    48bc:	98 2f       	mov	r25, r24
    48be:	9f 70       	andi	r25, 0x0F	; 15
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	82 95       	swap	r24
    48c4:	80 7f       	andi	r24, 0xF0	; 240
    48c6:	29 2f       	mov	r18, r25
    48c8:	28 2b       	or	r18, r24
    48ca:	8e 89       	ldd	r24, Y+22	; 0x16
    48cc:	9f 89       	ldd	r25, Y+23	; 0x17
    48ce:	fc 01       	movw	r30, r24
    48d0:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    48d2:	2a 81       	ldd	r18, Y+2	; 0x02
    48d4:	8e 89       	ldd	r24, Y+22	; 0x16
    48d6:	9f 89       	ldd	r25, Y+23	; 0x17
    48d8:	fc 01       	movw	r30, r24
    48da:	26 83       	std	Z+6, r18	; 0x06

	return true;
    48dc:	81 e0       	ldi	r24, 0x01	; 1
}
    48de:	6f 96       	adiw	r28, 0x1f	; 31
    48e0:	cd bf       	out	0x3d, r28	; 61
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	df 91       	pop	r29
    48e6:	cf 91       	pop	r28
    48e8:	1f 91       	pop	r17
    48ea:	0f 91       	pop	r16
    48ec:	ff 90       	pop	r15
    48ee:	ef 90       	pop	r14
    48f0:	08 95       	ret

000048f2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    48f2:	cf 93       	push	r28
    48f4:	df 93       	push	r29
    48f6:	00 d0       	rcall	.+0      	; 0x48f8 <ioport_configure_port_pin+0x6>
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <ioport_configure_port_pin+0x8>
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
    48fe:	8a 83       	std	Y+2, r24	; 0x02
    4900:	9b 83       	std	Y+3, r25	; 0x03
    4902:	6c 83       	std	Y+4, r22	; 0x04
    4904:	4d 83       	std	Y+5, r20	; 0x05
    4906:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    4908:	19 82       	std	Y+1, r1	; 0x01
    490a:	20 c0       	rjmp	.+64     	; 0x494c <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    490c:	8c 81       	ldd	r24, Y+4	; 0x04
    490e:	88 2f       	mov	r24, r24
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	29 81       	ldd	r18, Y+1	; 0x01
    4914:	22 2f       	mov	r18, r18
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	02 c0       	rjmp	.+4      	; 0x491e <ioport_configure_port_pin+0x2c>
    491a:	95 95       	asr	r25
    491c:	87 95       	ror	r24
    491e:	2a 95       	dec	r18
    4920:	e2 f7       	brpl	.-8      	; 0x491a <ioport_configure_port_pin+0x28>
    4922:	81 70       	andi	r24, 0x01	; 1
    4924:	99 27       	eor	r25, r25
    4926:	89 2b       	or	r24, r25
    4928:	71 f0       	breq	.+28     	; 0x4946 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	88 2f       	mov	r24, r24
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	40 96       	adiw	r24, 0x10	; 16
    4932:	2a 81       	ldd	r18, Y+2	; 0x02
    4934:	3b 81       	ldd	r19, Y+3	; 0x03
    4936:	82 0f       	add	r24, r18
    4938:	93 1f       	adc	r25, r19
    493a:	2d 81       	ldd	r18, Y+5	; 0x05
    493c:	3e 81       	ldd	r19, Y+6	; 0x06
    493e:	23 2f       	mov	r18, r19
    4940:	33 27       	eor	r19, r19
    4942:	fc 01       	movw	r30, r24
    4944:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    4946:	89 81       	ldd	r24, Y+1	; 0x01
    4948:	8f 5f       	subi	r24, 0xFF	; 255
    494a:	89 83       	std	Y+1, r24	; 0x01
    494c:	89 81       	ldd	r24, Y+1	; 0x01
    494e:	88 30       	cpi	r24, 0x08	; 8
    4950:	e8 f2       	brcs	.-70     	; 0x490c <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    4952:	8d 81       	ldd	r24, Y+5	; 0x05
    4954:	9e 81       	ldd	r25, Y+6	; 0x06
    4956:	81 70       	andi	r24, 0x01	; 1
    4958:	99 27       	eor	r25, r25
    495a:	89 2b       	or	r24, r25
    495c:	d1 f0       	breq	.+52     	; 0x4992 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    495e:	8d 81       	ldd	r24, Y+5	; 0x05
    4960:	9e 81       	ldd	r25, Y+6	; 0x06
    4962:	82 70       	andi	r24, 0x02	; 2
    4964:	99 27       	eor	r25, r25
    4966:	89 2b       	or	r24, r25
    4968:	39 f0       	breq	.+14     	; 0x4978 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	9b 81       	ldd	r25, Y+3	; 0x03
    496e:	05 96       	adiw	r24, 0x05	; 5
    4970:	2c 81       	ldd	r18, Y+4	; 0x04
    4972:	fc 01       	movw	r30, r24
    4974:	20 83       	st	Z, r18
    4976:	06 c0       	rjmp	.+12     	; 0x4984 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    4978:	8a 81       	ldd	r24, Y+2	; 0x02
    497a:	9b 81       	ldd	r25, Y+3	; 0x03
    497c:	06 96       	adiw	r24, 0x06	; 6
    497e:	2c 81       	ldd	r18, Y+4	; 0x04
    4980:	fc 01       	movw	r30, r24
    4982:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    4984:	8a 81       	ldd	r24, Y+2	; 0x02
    4986:	9b 81       	ldd	r25, Y+3	; 0x03
    4988:	01 96       	adiw	r24, 0x01	; 1
    498a:	2c 81       	ldd	r18, Y+4	; 0x04
    498c:	fc 01       	movw	r30, r24
    498e:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    4990:	06 c0       	rjmp	.+12     	; 0x499e <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    4992:	8a 81       	ldd	r24, Y+2	; 0x02
    4994:	9b 81       	ldd	r25, Y+3	; 0x03
    4996:	02 96       	adiw	r24, 0x02	; 2
    4998:	2c 81       	ldd	r18, Y+4	; 0x04
    499a:	fc 01       	movw	r30, r24
    499c:	20 83       	st	Z, r18
	}
}
    499e:	00 00       	nop
    49a0:	26 96       	adiw	r28, 0x06	; 6
    49a2:	cd bf       	out	0x3d, r28	; 61
    49a4:	de bf       	out	0x3e, r29	; 62
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	08 95       	ret

000049ac <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    49ac:	cf 93       	push	r28
    49ae:	df 93       	push	r29
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	27 97       	sbiw	r28, 0x07	; 7
    49b6:	cd bf       	out	0x3d, r28	; 61
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	8d 83       	std	Y+5, r24	; 0x05
    49bc:	6e 83       	std	Y+6, r22	; 0x06
    49be:	7f 83       	std	Y+7, r23	; 0x07
    49c0:	8d 81       	ldd	r24, Y+5	; 0x05
    49c2:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    49c4:	89 81       	ldd	r24, Y+1	; 0x01
    49c6:	88 2f       	mov	r24, r24
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	9c 01       	movw	r18, r24
    49cc:	27 70       	andi	r18, 0x07	; 7
    49ce:	33 27       	eor	r19, r19
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	02 c0       	rjmp	.+4      	; 0x49da <ioport_configure_pin+0x2e>
    49d6:	88 0f       	add	r24, r24
    49d8:	99 1f       	adc	r25, r25
    49da:	2a 95       	dec	r18
    49dc:	e2 f7       	brpl	.-8      	; 0x49d6 <ioport_configure_pin+0x2a>
    49de:	68 2f       	mov	r22, r24
    49e0:	8d 81       	ldd	r24, Y+5	; 0x05
    49e2:	8a 83       	std	Y+2, r24	; 0x02
    49e4:	8a 81       	ldd	r24, Y+2	; 0x02
    49e6:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    49e8:	8b 81       	ldd	r24, Y+3	; 0x03
    49ea:	86 95       	lsr	r24
    49ec:	86 95       	lsr	r24
    49ee:	86 95       	lsr	r24
    49f0:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    49f2:	8c 81       	ldd	r24, Y+4	; 0x04
    49f4:	88 2f       	mov	r24, r24
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	88 0f       	add	r24, r24
    49fa:	99 1f       	adc	r25, r25
    49fc:	82 95       	swap	r24
    49fe:	92 95       	swap	r25
    4a00:	90 7f       	andi	r25, 0xF0	; 240
    4a02:	98 27       	eor	r25, r24
    4a04:	80 7f       	andi	r24, 0xF0	; 240
    4a06:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    4a08:	9a 5f       	subi	r25, 0xFA	; 250
    4a0a:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    4a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a10:	ac 01       	movw	r20, r24
    4a12:	c9 01       	movw	r24, r18
    4a14:	6e df       	rcall	.-292    	; 0x48f2 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    4a16:	00 00       	nop
    4a18:	27 96       	adiw	r28, 0x07	; 7
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	08 95       	ret

00004a24 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    4a24:	cf 93       	push	r28
    4a26:	df 93       	push	r29
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    4a2c:	63 e0       	ldi	r22, 0x03	; 3
    4a2e:	70 e0       	ldi	r23, 0x00	; 0
    4a30:	83 e7       	ldi	r24, 0x73	; 115
    4a32:	bc df       	rcall	.-136    	; 0x49ac <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    4a34:	60 e0       	ldi	r22, 0x00	; 0
    4a36:	78 e1       	ldi	r23, 0x18	; 24
    4a38:	82 e7       	ldi	r24, 0x72	; 114
    4a3a:	b8 df       	rcall	.-144    	; 0x49ac <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    4a3c:	00 00       	nop
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	08 95       	ret

00004a44 <sysclk_get_main_hz>:
	twi_master_setup(&MYI2C,&opt);//sets up master
}
uint8_t readBusad()
{
	return busAddress;
}
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	98 e4       	ldi	r25, 0x48	; 72
    4a50:	a8 ee       	ldi	r26, 0xE8	; 232
    4a52:	b1 e0       	ldi	r27, 0x01	; 1
    4a54:	bc 01       	movw	r22, r24
    4a56:	cd 01       	movw	r24, r26
    4a58:	df 91       	pop	r29
    4a5a:	cf 91       	pop	r28
    4a5c:	08 95       	ret

00004a5e <sysclk_get_per4_hz>:
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	1f 92       	push	r1
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	19 82       	std	Y+1, r1	; 0x01
    4a6a:	ec df       	rcall	.-40     	; 0x4a44 <sysclk_get_main_hz>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	29 81       	ldd	r18, Y+1	; 0x01
    4a72:	22 2f       	mov	r18, r18
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	04 c0       	rjmp	.+8      	; 0x4a80 <sysclk_get_per4_hz+0x22>
    4a78:	b6 95       	lsr	r27
    4a7a:	a7 95       	ror	r26
    4a7c:	97 95       	ror	r25
    4a7e:	87 95       	ror	r24
    4a80:	2a 95       	dec	r18
    4a82:	d2 f7       	brpl	.-12     	; 0x4a78 <sysclk_get_per4_hz+0x1a>
    4a84:	bc 01       	movw	r22, r24
    4a86:	cd 01       	movw	r24, r26
    4a88:	0f 90       	pop	r0
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	08 95       	ret

00004a90 <sysclk_get_per2_hz>:
    4a90:	cf 93       	push	r28
    4a92:	df 93       	push	r29
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	e2 df       	rcall	.-60     	; 0x4a5e <sysclk_get_per4_hz>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	bc 01       	movw	r22, r24
    4aa0:	cd 01       	movw	r24, r26
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	08 95       	ret

00004aa8 <sysclk_get_per_hz>:
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	cd b7       	in	r28, 0x3d	; 61
    4aae:	de b7       	in	r29, 0x3e	; 62
    4ab0:	ef df       	rcall	.-34     	; 0x4a90 <sysclk_get_per2_hz>
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	bc 01       	movw	r22, r24
    4ab8:	cd 01       	movw	r24, r26
    4aba:	df 91       	pop	r29
    4abc:	cf 91       	pop	r28
    4abe:	08 95       	ret

00004ac0 <sysclk_get_cpu_hz>:
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	ef df       	rcall	.-34     	; 0x4aa8 <sysclk_get_per_hz>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	bc 01       	movw	r22, r24
    4ad0:	cd 01       	movw	r24, r26
    4ad2:	df 91       	pop	r29
    4ad4:	cf 91       	pop	r28
    4ad6:	08 95       	ret

00004ad8 <sysclk_enable_peripheral_clock>:
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	1f 92       	push	r1
    4ade:	1f 92       	push	r1
    4ae0:	cd b7       	in	r28, 0x3d	; 61
    4ae2:	de b7       	in	r29, 0x3e	; 62
    4ae4:	89 83       	std	Y+1, r24	; 0x01
    4ae6:	9a 83       	std	Y+2, r25	; 0x02
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	9a 81       	ldd	r25, Y+2	; 0x02
    4aec:	89 2b       	or	r24, r25
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <sysclk_enable_peripheral_clock+0x1a>
    4af0:	85 c1       	rjmp	.+778    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4af2:	89 81       	ldd	r24, Y+1	; 0x01
    4af4:	9a 81       	ldd	r25, Y+2	; 0x02
    4af6:	80 3c       	cpi	r24, 0xC0	; 192
    4af8:	91 05       	cpc	r25, r1
    4afa:	29 f4       	brne	.+10     	; 0x4b06 <sysclk_enable_peripheral_clock+0x2e>
    4afc:	60 e1       	ldi	r22, 0x10	; 16
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b04:	7b c1       	rjmp	.+758    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b06:	89 81       	ldd	r24, Y+1	; 0x01
    4b08:	9a 81       	ldd	r25, Y+2	; 0x02
    4b0a:	80 34       	cpi	r24, 0x40	; 64
    4b0c:	94 40       	sbci	r25, 0x04	; 4
    4b0e:	29 f4       	brne	.+10     	; 0x4b1a <sysclk_enable_peripheral_clock+0x42>
    4b10:	68 e0       	ldi	r22, 0x08	; 8
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b18:	71 c1       	rjmp	.+738    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1e:	81 15       	cp	r24, r1
    4b20:	94 40       	sbci	r25, 0x04	; 4
    4b22:	29 f4       	brne	.+10     	; 0x4b2e <sysclk_enable_peripheral_clock+0x56>
    4b24:	64 e0       	ldi	r22, 0x04	; 4
    4b26:	80 e0       	ldi	r24, 0x00	; 0
    4b28:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b2c:	67 c1       	rjmp	.+718    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b2e:	89 81       	ldd	r24, Y+1	; 0x01
    4b30:	9a 81       	ldd	r25, Y+2	; 0x02
    4b32:	80 38       	cpi	r24, 0x80	; 128
    4b34:	91 40       	sbci	r25, 0x01	; 1
    4b36:	29 f4       	brne	.+10     	; 0x4b42 <sysclk_enable_peripheral_clock+0x6a>
    4b38:	62 e0       	ldi	r22, 0x02	; 2
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b40:	5d c1       	rjmp	.+698    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b42:	89 81       	ldd	r24, Y+1	; 0x01
    4b44:	9a 81       	ldd	r25, Y+2	; 0x02
    4b46:	81 15       	cp	r24, r1
    4b48:	91 40       	sbci	r25, 0x01	; 1
    4b4a:	29 f4       	brne	.+10     	; 0x4b56 <sysclk_enable_peripheral_clock+0x7e>
    4b4c:	61 e0       	ldi	r22, 0x01	; 1
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b54:	53 c1       	rjmp	.+678    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	80 38       	cpi	r24, 0x80	; 128
    4b5c:	93 40       	sbci	r25, 0x03	; 3
    4b5e:	29 f4       	brne	.+10     	; 0x4b6a <sysclk_enable_peripheral_clock+0x92>
    4b60:	61 e0       	ldi	r22, 0x01	; 1
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b68:	49 c1       	rjmp	.+658    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b6a:	89 81       	ldd	r24, Y+1	; 0x01
    4b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6e:	80 39       	cpi	r24, 0x90	; 144
    4b70:	93 40       	sbci	r25, 0x03	; 3
    4b72:	29 f4       	brne	.+10     	; 0x4b7e <sysclk_enable_peripheral_clock+0xa6>
    4b74:	61 e0       	ldi	r22, 0x01	; 1
    4b76:	82 e0       	ldi	r24, 0x02	; 2
    4b78:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b7c:	3f c1       	rjmp	.+638    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b7e:	89 81       	ldd	r24, Y+1	; 0x01
    4b80:	9a 81       	ldd	r25, Y+2	; 0x02
    4b82:	81 15       	cp	r24, r1
    4b84:	92 40       	sbci	r25, 0x02	; 2
    4b86:	29 f4       	brne	.+10     	; 0x4b92 <sysclk_enable_peripheral_clock+0xba>
    4b88:	62 e0       	ldi	r22, 0x02	; 2
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4b90:	35 c1       	rjmp	.+618    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	9a 81       	ldd	r25, Y+2	; 0x02
    4b96:	80 34       	cpi	r24, 0x40	; 64
    4b98:	92 40       	sbci	r25, 0x02	; 2
    4b9a:	29 f4       	brne	.+10     	; 0x4ba6 <sysclk_enable_peripheral_clock+0xce>
    4b9c:	62 e0       	ldi	r22, 0x02	; 2
    4b9e:	82 e0       	ldi	r24, 0x02	; 2
    4ba0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4ba4:	2b c1       	rjmp	.+598    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    4baa:	81 15       	cp	r24, r1
    4bac:	93 40       	sbci	r25, 0x03	; 3
    4bae:	29 f4       	brne	.+10     	; 0x4bba <sysclk_enable_peripheral_clock+0xe2>
    4bb0:	64 e0       	ldi	r22, 0x04	; 4
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4bb8:	21 c1       	rjmp	.+578    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4bba:	89 81       	ldd	r24, Y+1	; 0x01
    4bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbe:	80 32       	cpi	r24, 0x20	; 32
    4bc0:	93 40       	sbci	r25, 0x03	; 3
    4bc2:	29 f4       	brne	.+10     	; 0x4bce <sysclk_enable_peripheral_clock+0xf6>
    4bc4:	64 e0       	ldi	r22, 0x04	; 4
    4bc6:	82 e0       	ldi	r24, 0x02	; 2
    4bc8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4bcc:	17 c1       	rjmp	.+558    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4bce:	89 81       	ldd	r24, Y+1	; 0x01
    4bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd2:	81 15       	cp	r24, r1
    4bd4:	98 40       	sbci	r25, 0x08	; 8
    4bd6:	29 f4       	brne	.+10     	; 0x4be2 <sysclk_enable_peripheral_clock+0x10a>
    4bd8:	61 e0       	ldi	r22, 0x01	; 1
    4bda:	83 e0       	ldi	r24, 0x03	; 3
    4bdc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4be0:	0d c1       	rjmp	.+538    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4be2:	89 81       	ldd	r24, Y+1	; 0x01
    4be4:	9a 81       	ldd	r25, Y+2	; 0x02
    4be6:	81 15       	cp	r24, r1
    4be8:	99 40       	sbci	r25, 0x09	; 9
    4bea:	29 f4       	brne	.+10     	; 0x4bf6 <sysclk_enable_peripheral_clock+0x11e>
    4bec:	61 e0       	ldi	r22, 0x01	; 1
    4bee:	84 e0       	ldi	r24, 0x04	; 4
    4bf0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4bf4:	03 c1       	rjmp	.+518    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4bf6:	89 81       	ldd	r24, Y+1	; 0x01
    4bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfa:	81 15       	cp	r24, r1
    4bfc:	9a 40       	sbci	r25, 0x0A	; 10
    4bfe:	29 f4       	brne	.+10     	; 0x4c0a <sysclk_enable_peripheral_clock+0x132>
    4c00:	61 e0       	ldi	r22, 0x01	; 1
    4c02:	85 e0       	ldi	r24, 0x05	; 5
    4c04:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c08:	f9 c0       	rjmp	.+498    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0e:	81 15       	cp	r24, r1
    4c10:	9b 40       	sbci	r25, 0x0B	; 11
    4c12:	29 f4       	brne	.+10     	; 0x4c1e <sysclk_enable_peripheral_clock+0x146>
    4c14:	61 e0       	ldi	r22, 0x01	; 1
    4c16:	86 e0       	ldi	r24, 0x06	; 6
    4c18:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c1c:	ef c0       	rjmp	.+478    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c1e:	89 81       	ldd	r24, Y+1	; 0x01
    4c20:	9a 81       	ldd	r25, Y+2	; 0x02
    4c22:	80 34       	cpi	r24, 0x40	; 64
    4c24:	98 40       	sbci	r25, 0x08	; 8
    4c26:	29 f4       	brne	.+10     	; 0x4c32 <sysclk_enable_peripheral_clock+0x15a>
    4c28:	62 e0       	ldi	r22, 0x02	; 2
    4c2a:	83 e0       	ldi	r24, 0x03	; 3
    4c2c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c30:	e5 c0       	rjmp	.+458    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	9a 81       	ldd	r25, Y+2	; 0x02
    4c36:	80 34       	cpi	r24, 0x40	; 64
    4c38:	99 40       	sbci	r25, 0x09	; 9
    4c3a:	29 f4       	brne	.+10     	; 0x4c46 <sysclk_enable_peripheral_clock+0x16e>
    4c3c:	62 e0       	ldi	r22, 0x02	; 2
    4c3e:	84 e0       	ldi	r24, 0x04	; 4
    4c40:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c44:	db c0       	rjmp	.+438    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c46:	89 81       	ldd	r24, Y+1	; 0x01
    4c48:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4a:	80 34       	cpi	r24, 0x40	; 64
    4c4c:	9a 40       	sbci	r25, 0x0A	; 10
    4c4e:	29 f4       	brne	.+10     	; 0x4c5a <sysclk_enable_peripheral_clock+0x182>
    4c50:	62 e0       	ldi	r22, 0x02	; 2
    4c52:	85 e0       	ldi	r24, 0x05	; 5
    4c54:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c58:	d1 c0       	rjmp	.+418    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
    4c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5e:	80 34       	cpi	r24, 0x40	; 64
    4c60:	9b 40       	sbci	r25, 0x0B	; 11
    4c62:	29 f4       	brne	.+10     	; 0x4c6e <sysclk_enable_peripheral_clock+0x196>
    4c64:	62 e0       	ldi	r22, 0x02	; 2
    4c66:	86 e0       	ldi	r24, 0x06	; 6
    4c68:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c6c:	c7 c0       	rjmp	.+398    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c6e:	89 81       	ldd	r24, Y+1	; 0x01
    4c70:	9a 81       	ldd	r25, Y+2	; 0x02
    4c72:	80 39       	cpi	r24, 0x90	; 144
    4c74:	98 40       	sbci	r25, 0x08	; 8
    4c76:	29 f4       	brne	.+10     	; 0x4c82 <sysclk_enable_peripheral_clock+0x1aa>
    4c78:	64 e0       	ldi	r22, 0x04	; 4
    4c7a:	83 e0       	ldi	r24, 0x03	; 3
    4c7c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c80:	bd c0       	rjmp	.+378    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c82:	89 81       	ldd	r24, Y+1	; 0x01
    4c84:	9a 81       	ldd	r25, Y+2	; 0x02
    4c86:	80 39       	cpi	r24, 0x90	; 144
    4c88:	99 40       	sbci	r25, 0x09	; 9
    4c8a:	29 f4       	brne	.+10     	; 0x4c96 <sysclk_enable_peripheral_clock+0x1be>
    4c8c:	64 e0       	ldi	r22, 0x04	; 4
    4c8e:	84 e0       	ldi	r24, 0x04	; 4
    4c90:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4c94:	b3 c0       	rjmp	.+358    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	80 39       	cpi	r24, 0x90	; 144
    4c9c:	9a 40       	sbci	r25, 0x0A	; 10
    4c9e:	29 f4       	brne	.+10     	; 0x4caa <sysclk_enable_peripheral_clock+0x1d2>
    4ca0:	64 e0       	ldi	r22, 0x04	; 4
    4ca2:	85 e0       	ldi	r24, 0x05	; 5
    4ca4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4ca8:	a9 c0       	rjmp	.+338    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4caa:	89 81       	ldd	r24, Y+1	; 0x01
    4cac:	9a 81       	ldd	r25, Y+2	; 0x02
    4cae:	80 39       	cpi	r24, 0x90	; 144
    4cb0:	9b 40       	sbci	r25, 0x0B	; 11
    4cb2:	29 f4       	brne	.+10     	; 0x4cbe <sysclk_enable_peripheral_clock+0x1e6>
    4cb4:	64 e0       	ldi	r22, 0x04	; 4
    4cb6:	86 e0       	ldi	r24, 0x06	; 6
    4cb8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4cbc:	9f c0       	rjmp	.+318    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4cbe:	89 81       	ldd	r24, Y+1	; 0x01
    4cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc2:	80 3c       	cpi	r24, 0xC0	; 192
    4cc4:	98 40       	sbci	r25, 0x08	; 8
    4cc6:	29 f4       	brne	.+10     	; 0x4cd2 <sysclk_enable_peripheral_clock+0x1fa>
    4cc8:	68 e0       	ldi	r22, 0x08	; 8
    4cca:	83 e0       	ldi	r24, 0x03	; 3
    4ccc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4cd0:	95 c0       	rjmp	.+298    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
    4cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd6:	80 3c       	cpi	r24, 0xC0	; 192
    4cd8:	99 40       	sbci	r25, 0x09	; 9
    4cda:	29 f4       	brne	.+10     	; 0x4ce6 <sysclk_enable_peripheral_clock+0x20e>
    4cdc:	68 e0       	ldi	r22, 0x08	; 8
    4cde:	84 e0       	ldi	r24, 0x04	; 4
    4ce0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4ce4:	8b c0       	rjmp	.+278    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4ce6:	89 81       	ldd	r24, Y+1	; 0x01
    4ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cea:	80 3c       	cpi	r24, 0xC0	; 192
    4cec:	9a 40       	sbci	r25, 0x0A	; 10
    4cee:	29 f4       	brne	.+10     	; 0x4cfa <sysclk_enable_peripheral_clock+0x222>
    4cf0:	68 e0       	ldi	r22, 0x08	; 8
    4cf2:	85 e0       	ldi	r24, 0x05	; 5
    4cf4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4cf8:	81 c0       	rjmp	.+258    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfe:	80 3c       	cpi	r24, 0xC0	; 192
    4d00:	9b 40       	sbci	r25, 0x0B	; 11
    4d02:	29 f4       	brne	.+10     	; 0x4d0e <sysclk_enable_peripheral_clock+0x236>
    4d04:	68 e0       	ldi	r22, 0x08	; 8
    4d06:	86 e0       	ldi	r24, 0x06	; 6
    4d08:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d0c:	77 c0       	rjmp	.+238    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d0e:	89 81       	ldd	r24, Y+1	; 0x01
    4d10:	9a 81       	ldd	r25, Y+2	; 0x02
    4d12:	80 3a       	cpi	r24, 0xA0	; 160
    4d14:	98 40       	sbci	r25, 0x08	; 8
    4d16:	29 f4       	brne	.+10     	; 0x4d22 <sysclk_enable_peripheral_clock+0x24a>
    4d18:	60 e1       	ldi	r22, 0x10	; 16
    4d1a:	83 e0       	ldi	r24, 0x03	; 3
    4d1c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d20:	6d c0       	rjmp	.+218    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d22:	89 81       	ldd	r24, Y+1	; 0x01
    4d24:	9a 81       	ldd	r25, Y+2	; 0x02
    4d26:	80 3a       	cpi	r24, 0xA0	; 160
    4d28:	99 40       	sbci	r25, 0x09	; 9
    4d2a:	29 f4       	brne	.+10     	; 0x4d36 <sysclk_enable_peripheral_clock+0x25e>
    4d2c:	60 e1       	ldi	r22, 0x10	; 16
    4d2e:	84 e0       	ldi	r24, 0x04	; 4
    4d30:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d34:	63 c0       	rjmp	.+198    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3a:	80 3a       	cpi	r24, 0xA0	; 160
    4d3c:	9a 40       	sbci	r25, 0x0A	; 10
    4d3e:	29 f4       	brne	.+10     	; 0x4d4a <sysclk_enable_peripheral_clock+0x272>
    4d40:	60 e1       	ldi	r22, 0x10	; 16
    4d42:	85 e0       	ldi	r24, 0x05	; 5
    4d44:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d48:	59 c0       	rjmp	.+178    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d4a:	89 81       	ldd	r24, Y+1	; 0x01
    4d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d4e:	80 3a       	cpi	r24, 0xA0	; 160
    4d50:	9b 40       	sbci	r25, 0x0B	; 11
    4d52:	29 f4       	brne	.+10     	; 0x4d5e <sysclk_enable_peripheral_clock+0x286>
    4d54:	60 e1       	ldi	r22, 0x10	; 16
    4d56:	86 e0       	ldi	r24, 0x06	; 6
    4d58:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d5c:	4f c0       	rjmp	.+158    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	9a 81       	ldd	r25, Y+2	; 0x02
    4d62:	80 3b       	cpi	r24, 0xB0	; 176
    4d64:	98 40       	sbci	r25, 0x08	; 8
    4d66:	29 f4       	brne	.+10     	; 0x4d72 <sysclk_enable_peripheral_clock+0x29a>
    4d68:	60 e2       	ldi	r22, 0x20	; 32
    4d6a:	83 e0       	ldi	r24, 0x03	; 3
    4d6c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d70:	45 c0       	rjmp	.+138    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d72:	89 81       	ldd	r24, Y+1	; 0x01
    4d74:	9a 81       	ldd	r25, Y+2	; 0x02
    4d76:	80 3b       	cpi	r24, 0xB0	; 176
    4d78:	99 40       	sbci	r25, 0x09	; 9
    4d7a:	29 f4       	brne	.+10     	; 0x4d86 <sysclk_enable_peripheral_clock+0x2ae>
    4d7c:	60 e2       	ldi	r22, 0x20	; 32
    4d7e:	84 e0       	ldi	r24, 0x04	; 4
    4d80:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d84:	3b c0       	rjmp	.+118    	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	9a 81       	ldd	r25, Y+2	; 0x02
    4d8a:	80 3b       	cpi	r24, 0xB0	; 176
    4d8c:	9a 40       	sbci	r25, 0x0A	; 10
    4d8e:	29 f4       	brne	.+10     	; 0x4d9a <sysclk_enable_peripheral_clock+0x2c2>
    4d90:	60 e2       	ldi	r22, 0x20	; 32
    4d92:	85 e0       	ldi	r24, 0x05	; 5
    4d94:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4d98:	31 c0       	rjmp	.+98     	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4d9a:	89 81       	ldd	r24, Y+1	; 0x01
    4d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9e:	80 3b       	cpi	r24, 0xB0	; 176
    4da0:	9b 40       	sbci	r25, 0x0B	; 11
    4da2:	29 f4       	brne	.+10     	; 0x4dae <sysclk_enable_peripheral_clock+0x2d6>
    4da4:	60 e2       	ldi	r22, 0x20	; 32
    4da6:	86 e0       	ldi	r24, 0x06	; 6
    4da8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4dac:	27 c0       	rjmp	.+78     	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4dae:	89 81       	ldd	r24, Y+1	; 0x01
    4db0:	9a 81       	ldd	r25, Y+2	; 0x02
    4db2:	80 38       	cpi	r24, 0x80	; 128
    4db4:	94 40       	sbci	r25, 0x04	; 4
    4db6:	29 f4       	brne	.+10     	; 0x4dc2 <sysclk_enable_peripheral_clock+0x2ea>
    4db8:	60 e4       	ldi	r22, 0x40	; 64
    4dba:	83 e0       	ldi	r24, 0x03	; 3
    4dbc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4dc0:	1d c0       	rjmp	.+58     	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc6:	80 39       	cpi	r24, 0x90	; 144
    4dc8:	94 40       	sbci	r25, 0x04	; 4
    4dca:	29 f4       	brne	.+10     	; 0x4dd6 <sysclk_enable_peripheral_clock+0x2fe>
    4dcc:	60 e4       	ldi	r22, 0x40	; 64
    4dce:	84 e0       	ldi	r24, 0x04	; 4
    4dd0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4dd4:	13 c0       	rjmp	.+38     	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dda:	80 3a       	cpi	r24, 0xA0	; 160
    4ddc:	94 40       	sbci	r25, 0x04	; 4
    4dde:	29 f4       	brne	.+10     	; 0x4dea <sysclk_enable_peripheral_clock+0x312>
    4de0:	60 e4       	ldi	r22, 0x40	; 64
    4de2:	85 e0       	ldi	r24, 0x05	; 5
    4de4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4de8:	09 c0       	rjmp	.+18     	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	9a 81       	ldd	r25, Y+2	; 0x02
    4dee:	80 3b       	cpi	r24, 0xB0	; 176
    4df0:	94 40       	sbci	r25, 0x04	; 4
    4df2:	21 f4       	brne	.+8      	; 0x4dfc <sysclk_enable_peripheral_clock+0x324>
    4df4:	60 e4       	ldi	r22, 0x40	; 64
    4df6:	86 e0       	ldi	r24, 0x06	; 6
    4df8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    4dfc:	00 00       	nop
    4dfe:	0f 90       	pop	r0
    4e00:	0f 90       	pop	r0
    4e02:	df 91       	pop	r29
    4e04:	cf 91       	pop	r28
    4e06:	08 95       	ret

00004e08 <twi_master_read>:
    4e08:	cf 93       	push	r28
    4e0a:	df 93       	push	r29
    4e0c:	00 d0       	rcall	.+0      	; 0x4e0e <twi_master_read+0x6>
    4e0e:	1f 92       	push	r1
    4e10:	cd b7       	in	r28, 0x3d	; 61
    4e12:	de b7       	in	r29, 0x3e	; 62
    4e14:	89 83       	std	Y+1, r24	; 0x01
    4e16:	9a 83       	std	Y+2, r25	; 0x02
    4e18:	6b 83       	std	Y+3, r22	; 0x03
    4e1a:	7c 83       	std	Y+4, r23	; 0x04
    4e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    4e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    4e20:	89 81       	ldd	r24, Y+1	; 0x01
    4e22:	9a 81       	ldd	r25, Y+2	; 0x02
    4e24:	41 e0       	ldi	r20, 0x01	; 1
    4e26:	b9 01       	movw	r22, r18
    4e28:	4a d8       	rcall	.-3948   	; 0x3ebe <twi_master_transfer>
    4e2a:	24 96       	adiw	r28, 0x04	; 4
    4e2c:	cd bf       	out	0x3d, r28	; 61
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	df 91       	pop	r29
    4e32:	cf 91       	pop	r28
    4e34:	08 95       	ret

00004e36 <twi_master_write>:
    4e36:	cf 93       	push	r28
    4e38:	df 93       	push	r29
    4e3a:	00 d0       	rcall	.+0      	; 0x4e3c <twi_master_write+0x6>
    4e3c:	1f 92       	push	r1
    4e3e:	cd b7       	in	r28, 0x3d	; 61
    4e40:	de b7       	in	r29, 0x3e	; 62
    4e42:	89 83       	std	Y+1, r24	; 0x01
    4e44:	9a 83       	std	Y+2, r25	; 0x02
    4e46:	6b 83       	std	Y+3, r22	; 0x03
    4e48:	7c 83       	std	Y+4, r23	; 0x04
    4e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    4e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	9a 81       	ldd	r25, Y+2	; 0x02
    4e52:	40 e0       	ldi	r20, 0x00	; 0
    4e54:	b9 01       	movw	r22, r18
    4e56:	33 d8       	rcall	.-3994   	; 0x3ebe <twi_master_transfer>
    4e58:	24 96       	adiw	r28, 0x04	; 4
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	de bf       	out	0x3e, r29	; 62
    4e5e:	df 91       	pop	r29
    4e60:	cf 91       	pop	r28
    4e62:	08 95       	ret

00004e64 <twi_master_setup>:
    4e64:	ef 92       	push	r14
    4e66:	ff 92       	push	r15
    4e68:	0f 93       	push	r16
    4e6a:	1f 93       	push	r17
    4e6c:	cf 93       	push	r28
    4e6e:	df 93       	push	r29
    4e70:	00 d0       	rcall	.+0      	; 0x4e72 <twi_master_setup+0xe>
    4e72:	1f 92       	push	r1
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
    4e78:	89 83       	std	Y+1, r24	; 0x01
    4e7a:	9a 83       	std	Y+2, r25	; 0x02
    4e7c:	6b 83       	std	Y+3, r22	; 0x03
    4e7e:	7c 83       	std	Y+4, r23	; 0x04
    4e80:	1f de       	rcall	.-962    	; 0x4ac0 <sysclk_get_cpu_hz>
    4e82:	7b 01       	movw	r14, r22
    4e84:	8c 01       	movw	r16, r24
    4e86:	8b 81       	ldd	r24, Y+3	; 0x03
    4e88:	9c 81       	ldd	r25, Y+4	; 0x04
    4e8a:	fc 01       	movw	r30, r24
    4e8c:	80 81       	ld	r24, Z
    4e8e:	91 81       	ldd	r25, Z+1	; 0x01
    4e90:	a2 81       	ldd	r26, Z+2	; 0x02
    4e92:	b3 81       	ldd	r27, Z+3	; 0x03
    4e94:	9c 01       	movw	r18, r24
    4e96:	ad 01       	movw	r20, r26
    4e98:	22 0f       	add	r18, r18
    4e9a:	33 1f       	adc	r19, r19
    4e9c:	44 1f       	adc	r20, r20
    4e9e:	55 1f       	adc	r21, r21
    4ea0:	c8 01       	movw	r24, r16
    4ea2:	b7 01       	movw	r22, r14
    4ea4:	0e 94 c8 34 	call	0x6990	; 0x6990 <__udivmodsi4>
    4ea8:	da 01       	movw	r26, r20
    4eaa:	c9 01       	movw	r24, r18
    4eac:	05 97       	sbiw	r24, 0x05	; 5
    4eae:	a1 09       	sbc	r26, r1
    4eb0:	b1 09       	sbc	r27, r1
    4eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    4eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    4eb6:	f9 01       	movw	r30, r18
    4eb8:	84 83       	std	Z+4, r24	; 0x04
    4eba:	95 83       	std	Z+5, r25	; 0x05
    4ebc:	a6 83       	std	Z+6, r26	; 0x06
    4ebe:	b7 83       	std	Z+7, r27	; 0x07
    4ec0:	89 81       	ldd	r24, Y+1	; 0x01
    4ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec4:	09 de       	rcall	.-1006   	; 0x4ad8 <sysclk_enable_peripheral_clock>
    4ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    4ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    4eca:	89 81       	ldd	r24, Y+1	; 0x01
    4ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ece:	b9 01       	movw	r22, r18
    4ed0:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <twi_master_init>
    4ed4:	08 2e       	mov	r0, r24
    4ed6:	00 0c       	add	r0, r0
    4ed8:	99 0b       	sbc	r25, r25
    4eda:	24 96       	adiw	r28, 0x04	; 4
    4edc:	cd bf       	out	0x3d, r28	; 61
    4ede:	de bf       	out	0x3e, r29	; 62
    4ee0:	df 91       	pop	r29
    4ee2:	cf 91       	pop	r28
    4ee4:	1f 91       	pop	r17
    4ee6:	0f 91       	pop	r16
    4ee8:	ff 90       	pop	r15
    4eea:	ef 90       	pop	r14
    4eec:	08 95       	ret

00004eee <I2CInit>:
    4eee:	cf 93       	push	r28
    4ef0:	df 93       	push	r29
    4ef2:	cd b7       	in	r28, 0x3d	; 61
    4ef4:	de b7       	in	r29, 0x3e	; 62
    4ef6:	2e 97       	sbiw	r28, 0x0e	; 14
    4ef8:	cd bf       	out	0x3d, r28	; 61
    4efa:	de bf       	out	0x3e, r29	; 62
    4efc:	6a 87       	std	Y+10, r22	; 0x0a
    4efe:	7b 87       	std	Y+11, r23	; 0x0b
    4f00:	8c 87       	std	Y+12, r24	; 0x0c
    4f02:	9d 87       	std	Y+13, r25	; 0x0d
    4f04:	4e 87       	std	Y+14, r20	; 0x0e
    4f06:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f08:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <busAddress>
    4f0c:	29 e0       	ldi	r18, 0x09	; 9
    4f0e:	ce 01       	movw	r24, r28
    4f10:	01 96       	adiw	r24, 0x01	; 1
    4f12:	fc 01       	movw	r30, r24
    4f14:	32 2f       	mov	r19, r18
    4f16:	11 92       	st	Z+, r1
    4f18:	3a 95       	dec	r19
    4f1a:	e9 f7       	brne	.-6      	; 0x4f16 <I2CInit+0x28>
    4f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f20:	ac 85       	ldd	r26, Y+12	; 0x0c
    4f22:	bd 85       	ldd	r27, Y+13	; 0x0d
    4f24:	89 83       	std	Y+1, r24	; 0x01
    4f26:	9a 83       	std	Y+2, r25	; 0x02
    4f28:	ab 83       	std	Y+3, r26	; 0x03
    4f2a:	bc 83       	std	Y+4, r27	; 0x04
    4f2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f2e:	89 87       	std	Y+9, r24	; 0x09
    4f30:	ce 01       	movw	r24, r28
    4f32:	01 96       	adiw	r24, 0x01	; 1
    4f34:	bc 01       	movw	r22, r24
    4f36:	80 e8       	ldi	r24, 0x80	; 128
    4f38:	94 e0       	ldi	r25, 0x04	; 4
    4f3a:	94 df       	rcall	.-216    	; 0x4e64 <twi_master_setup>
    4f3c:	00 00       	nop
    4f3e:	2e 96       	adiw	r28, 0x0e	; 14
    4f40:	cd bf       	out	0x3d, r28	; 61
    4f42:	de bf       	out	0x3e, r29	; 62
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	08 95       	ret

00004f4a <twi_write>:
// writes to a device using two wire interface. the address is the seven bit identifier for the specific device
//data is an array of data that you wish to transfer. 
void twi_write(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    4f4a:	cf 93       	push	r28
    4f4c:	df 93       	push	r29
    4f4e:	cd b7       	in	r28, 0x3d	; 61
    4f50:	de b7       	in	r29, 0x3e	; 62
    4f52:	2f 97       	sbiw	r28, 0x0f	; 15
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	de bf       	out	0x3e, r29	; 62
    4f58:	8c 87       	std	Y+12, r24	; 0x0c
    4f5a:	9d 87       	std	Y+13, r25	; 0x0d
    4f5c:	6e 87       	std	Y+14, r22	; 0x0e
    4f5e:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_write = 
    4f60:	2b e0       	ldi	r18, 0x0B	; 11
    4f62:	ce 01       	movw	r24, r28
    4f64:	01 96       	adiw	r24, 0x01	; 1
    4f66:	fc 01       	movw	r30, r24
    4f68:	32 2f       	mov	r19, r18
    4f6a:	11 92       	st	Z+, r1
    4f6c:	3a 95       	dec	r19
    4f6e:	e9 f7       	brne	.-6      	; 0x4f6a <twi_write+0x20>
    4f70:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f72:	89 83       	std	Y+1, r24	; 0x01
    4f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f76:	8a 83       	std	Y+2, r24	; 0x02
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	8d 83       	std	Y+5, r24	; 0x05
    4f7e:	9e 83       	std	Y+6, r25	; 0x06
    4f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f82:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f84:	8f 83       	std	Y+7, r24	; 0x07
    4f86:	98 87       	std	Y+8, r25	; 0x08
    4f88:	82 e0       	ldi	r24, 0x02	; 2
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	89 87       	std	Y+9, r24	; 0x09
    4f8e:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,      // TWI slave bus address
		.buffer       = Data, // transfer data source buffer
		.length       = sizeof(Data)  // transfer data size (bytes)
	};
	while (twi_master_write(&MYI2C, &packet_write) != TWI_SUCCESS) printf("fail");//transfers data and waits until transfer is finished to do anything else
    4f90:	0b c0       	rjmp	.+22     	; 0x4fa8 <twi_write+0x5e>
    4f92:	89 e1       	ldi	r24, 0x19	; 25
    4f94:	90 e2       	ldi	r25, 0x20	; 32
    4f96:	89 2f       	mov	r24, r25
    4f98:	8f 93       	push	r24
    4f9a:	89 e1       	ldi	r24, 0x19	; 25
    4f9c:	90 e2       	ldi	r25, 0x20	; 32
    4f9e:	8f 93       	push	r24
    4fa0:	0e 94 e7 36 	call	0x6dce	; 0x6dce <printf>
    4fa4:	0f 90       	pop	r0
    4fa6:	0f 90       	pop	r0
    4fa8:	ce 01       	movw	r24, r28
    4faa:	01 96       	adiw	r24, 0x01	; 1
    4fac:	bc 01       	movw	r22, r24
    4fae:	80 e8       	ldi	r24, 0x80	; 128
    4fb0:	94 e0       	ldi	r25, 0x04	; 4
    4fb2:	41 df       	rcall	.-382    	; 0x4e36 <twi_master_write>
    4fb4:	88 23       	and	r24, r24
    4fb6:	69 f7       	brne	.-38     	; 0x4f92 <twi_write+0x48>
}
    4fb8:	00 00       	nop
    4fba:	2f 96       	adiw	r28, 0x0f	; 15
    4fbc:	cd bf       	out	0x3d, r28	; 61
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	08 95       	ret

00004fc6 <twi_read>:

//reads using two wire interface. address is the 7 bit identifier for each device. Data is the array the data will be stored in.
//returns the status of the transfer
void twi_read(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	cd b7       	in	r28, 0x3d	; 61
    4fcc:	de b7       	in	r29, 0x3e	; 62
    4fce:	2f 97       	sbiw	r28, 0x0f	; 15
    4fd0:	cd bf       	out	0x3d, r28	; 61
    4fd2:	de bf       	out	0x3e, r29	; 62
    4fd4:	8c 87       	std	Y+12, r24	; 0x0c
    4fd6:	9d 87       	std	Y+13, r25	; 0x0d
    4fd8:	6e 87       	std	Y+14, r22	; 0x0e
    4fda:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_read = 
    4fdc:	2b e0       	ldi	r18, 0x0B	; 11
    4fde:	ce 01       	movw	r24, r28
    4fe0:	01 96       	adiw	r24, 0x01	; 1
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	32 2f       	mov	r19, r18
    4fe6:	11 92       	st	Z+, r1
    4fe8:	3a 95       	dec	r19
    4fea:	e9 f7       	brne	.-6      	; 0x4fe6 <twi_read+0x20>
    4fec:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fee:	89 83       	std	Y+1, r24	; 0x01
    4ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ff2:	8a 83       	std	Y+2, r24	; 0x02
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	8d 83       	std	Y+5, r24	; 0x05
    4ffa:	9e 83       	std	Y+6, r25	; 0x06
    4ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ffe:	9d 85       	ldd	r25, Y+13	; 0x0d
    5000:	8f 83       	std	Y+7, r24	; 0x07
    5002:	98 87       	std	Y+8, r25	; 0x08
    5004:	82 e0       	ldi	r24, 0x02	; 2
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	89 87       	std	Y+9, r24	; 0x09
    500a:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,       // TWI slave bus address
		.buffer       = Data,          // transfer data destination buffer
		.length       = sizeof(Data)        // transfer data size (bytes)
	};
	twi_master_read(&MYI2C, &packet_read); //preform read and return the status of the read
    500c:	ce 01       	movw	r24, r28
    500e:	01 96       	adiw	r24, 0x01	; 1
    5010:	bc 01       	movw	r22, r24
    5012:	80 e8       	ldi	r24, 0x80	; 128
    5014:	94 e0       	ldi	r25, 0x04	; 4
    5016:	f8 de       	rcall	.-528    	; 0x4e08 <twi_master_read>
	//Data = packet_read.buffer;
	
	
}
    5018:	00 00       	nop
    501a:	2f 96       	adiw	r28, 0x0f	; 15
    501c:	cd bf       	out	0x3d, r28	; 61
    501e:	de bf       	out	0x3e, r29	; 62
    5020:	df 91       	pop	r29
    5022:	cf 91       	pop	r28
    5024:	08 95       	ret

00005026 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    5026:	cf 93       	push	r28
    5028:	df 93       	push	r29
    502a:	1f 92       	push	r1
    502c:	1f 92       	push	r1
    502e:	cd b7       	in	r28, 0x3d	; 61
    5030:	de b7       	in	r29, 0x3e	; 62
    5032:	89 83       	std	Y+1, r24	; 0x01
    5034:	9a 83       	std	Y+2, r25	; 0x02
    5036:	89 81       	ldd	r24, Y+1	; 0x01
    5038:	9a 81       	ldd	r25, Y+2	; 0x02
    503a:	89 2b       	or	r24, r25
    503c:	09 f4       	brne	.+2      	; 0x5040 <sysclk_enable_peripheral_clock+0x1a>
    503e:	85 c1       	rjmp	.+778    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5040:	89 81       	ldd	r24, Y+1	; 0x01
    5042:	9a 81       	ldd	r25, Y+2	; 0x02
    5044:	80 3c       	cpi	r24, 0xC0	; 192
    5046:	91 05       	cpc	r25, r1
    5048:	29 f4       	brne	.+10     	; 0x5054 <sysclk_enable_peripheral_clock+0x2e>
    504a:	60 e1       	ldi	r22, 0x10	; 16
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5052:	7b c1       	rjmp	.+758    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	9a 81       	ldd	r25, Y+2	; 0x02
    5058:	80 34       	cpi	r24, 0x40	; 64
    505a:	94 40       	sbci	r25, 0x04	; 4
    505c:	29 f4       	brne	.+10     	; 0x5068 <sysclk_enable_peripheral_clock+0x42>
    505e:	68 e0       	ldi	r22, 0x08	; 8
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5066:	71 c1       	rjmp	.+738    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5068:	89 81       	ldd	r24, Y+1	; 0x01
    506a:	9a 81       	ldd	r25, Y+2	; 0x02
    506c:	81 15       	cp	r24, r1
    506e:	94 40       	sbci	r25, 0x04	; 4
    5070:	29 f4       	brne	.+10     	; 0x507c <sysclk_enable_peripheral_clock+0x56>
    5072:	64 e0       	ldi	r22, 0x04	; 4
    5074:	80 e0       	ldi	r24, 0x00	; 0
    5076:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    507a:	67 c1       	rjmp	.+718    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	9a 81       	ldd	r25, Y+2	; 0x02
    5080:	80 38       	cpi	r24, 0x80	; 128
    5082:	91 40       	sbci	r25, 0x01	; 1
    5084:	29 f4       	brne	.+10     	; 0x5090 <sysclk_enable_peripheral_clock+0x6a>
    5086:	62 e0       	ldi	r22, 0x02	; 2
    5088:	80 e0       	ldi	r24, 0x00	; 0
    508a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    508e:	5d c1       	rjmp	.+698    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5090:	89 81       	ldd	r24, Y+1	; 0x01
    5092:	9a 81       	ldd	r25, Y+2	; 0x02
    5094:	81 15       	cp	r24, r1
    5096:	91 40       	sbci	r25, 0x01	; 1
    5098:	29 f4       	brne	.+10     	; 0x50a4 <sysclk_enable_peripheral_clock+0x7e>
    509a:	61 e0       	ldi	r22, 0x01	; 1
    509c:	80 e0       	ldi	r24, 0x00	; 0
    509e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    50a2:	53 c1       	rjmp	.+678    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	9a 81       	ldd	r25, Y+2	; 0x02
    50a8:	80 38       	cpi	r24, 0x80	; 128
    50aa:	93 40       	sbci	r25, 0x03	; 3
    50ac:	29 f4       	brne	.+10     	; 0x50b8 <sysclk_enable_peripheral_clock+0x92>
    50ae:	61 e0       	ldi	r22, 0x01	; 1
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    50b6:	49 c1       	rjmp	.+658    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    50b8:	89 81       	ldd	r24, Y+1	; 0x01
    50ba:	9a 81       	ldd	r25, Y+2	; 0x02
    50bc:	80 39       	cpi	r24, 0x90	; 144
    50be:	93 40       	sbci	r25, 0x03	; 3
    50c0:	29 f4       	brne	.+10     	; 0x50cc <sysclk_enable_peripheral_clock+0xa6>
    50c2:	61 e0       	ldi	r22, 0x01	; 1
    50c4:	82 e0       	ldi	r24, 0x02	; 2
    50c6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    50ca:	3f c1       	rjmp	.+638    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    50cc:	89 81       	ldd	r24, Y+1	; 0x01
    50ce:	9a 81       	ldd	r25, Y+2	; 0x02
    50d0:	81 15       	cp	r24, r1
    50d2:	92 40       	sbci	r25, 0x02	; 2
    50d4:	29 f4       	brne	.+10     	; 0x50e0 <sysclk_enable_peripheral_clock+0xba>
    50d6:	62 e0       	ldi	r22, 0x02	; 2
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    50de:	35 c1       	rjmp	.+618    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    50e0:	89 81       	ldd	r24, Y+1	; 0x01
    50e2:	9a 81       	ldd	r25, Y+2	; 0x02
    50e4:	80 34       	cpi	r24, 0x40	; 64
    50e6:	92 40       	sbci	r25, 0x02	; 2
    50e8:	29 f4       	brne	.+10     	; 0x50f4 <sysclk_enable_peripheral_clock+0xce>
    50ea:	62 e0       	ldi	r22, 0x02	; 2
    50ec:	82 e0       	ldi	r24, 0x02	; 2
    50ee:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    50f2:	2b c1       	rjmp	.+598    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    50f4:	89 81       	ldd	r24, Y+1	; 0x01
    50f6:	9a 81       	ldd	r25, Y+2	; 0x02
    50f8:	81 15       	cp	r24, r1
    50fa:	93 40       	sbci	r25, 0x03	; 3
    50fc:	29 f4       	brne	.+10     	; 0x5108 <sysclk_enable_peripheral_clock+0xe2>
    50fe:	64 e0       	ldi	r22, 0x04	; 4
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5106:	21 c1       	rjmp	.+578    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	9a 81       	ldd	r25, Y+2	; 0x02
    510c:	80 32       	cpi	r24, 0x20	; 32
    510e:	93 40       	sbci	r25, 0x03	; 3
    5110:	29 f4       	brne	.+10     	; 0x511c <sysclk_enable_peripheral_clock+0xf6>
    5112:	64 e0       	ldi	r22, 0x04	; 4
    5114:	82 e0       	ldi	r24, 0x02	; 2
    5116:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    511a:	17 c1       	rjmp	.+558    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    511c:	89 81       	ldd	r24, Y+1	; 0x01
    511e:	9a 81       	ldd	r25, Y+2	; 0x02
    5120:	81 15       	cp	r24, r1
    5122:	98 40       	sbci	r25, 0x08	; 8
    5124:	29 f4       	brne	.+10     	; 0x5130 <sysclk_enable_peripheral_clock+0x10a>
    5126:	61 e0       	ldi	r22, 0x01	; 1
    5128:	83 e0       	ldi	r24, 0x03	; 3
    512a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    512e:	0d c1       	rjmp	.+538    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5130:	89 81       	ldd	r24, Y+1	; 0x01
    5132:	9a 81       	ldd	r25, Y+2	; 0x02
    5134:	81 15       	cp	r24, r1
    5136:	99 40       	sbci	r25, 0x09	; 9
    5138:	29 f4       	brne	.+10     	; 0x5144 <sysclk_enable_peripheral_clock+0x11e>
    513a:	61 e0       	ldi	r22, 0x01	; 1
    513c:	84 e0       	ldi	r24, 0x04	; 4
    513e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5142:	03 c1       	rjmp	.+518    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5144:	89 81       	ldd	r24, Y+1	; 0x01
    5146:	9a 81       	ldd	r25, Y+2	; 0x02
    5148:	81 15       	cp	r24, r1
    514a:	9a 40       	sbci	r25, 0x0A	; 10
    514c:	29 f4       	brne	.+10     	; 0x5158 <sysclk_enable_peripheral_clock+0x132>
    514e:	61 e0       	ldi	r22, 0x01	; 1
    5150:	85 e0       	ldi	r24, 0x05	; 5
    5152:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5156:	f9 c0       	rjmp	.+498    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5158:	89 81       	ldd	r24, Y+1	; 0x01
    515a:	9a 81       	ldd	r25, Y+2	; 0x02
    515c:	81 15       	cp	r24, r1
    515e:	9b 40       	sbci	r25, 0x0B	; 11
    5160:	29 f4       	brne	.+10     	; 0x516c <sysclk_enable_peripheral_clock+0x146>
    5162:	61 e0       	ldi	r22, 0x01	; 1
    5164:	86 e0       	ldi	r24, 0x06	; 6
    5166:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    516a:	ef c0       	rjmp	.+478    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    516c:	89 81       	ldd	r24, Y+1	; 0x01
    516e:	9a 81       	ldd	r25, Y+2	; 0x02
    5170:	80 34       	cpi	r24, 0x40	; 64
    5172:	98 40       	sbci	r25, 0x08	; 8
    5174:	29 f4       	brne	.+10     	; 0x5180 <sysclk_enable_peripheral_clock+0x15a>
    5176:	62 e0       	ldi	r22, 0x02	; 2
    5178:	83 e0       	ldi	r24, 0x03	; 3
    517a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    517e:	e5 c0       	rjmp	.+458    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5180:	89 81       	ldd	r24, Y+1	; 0x01
    5182:	9a 81       	ldd	r25, Y+2	; 0x02
    5184:	80 34       	cpi	r24, 0x40	; 64
    5186:	99 40       	sbci	r25, 0x09	; 9
    5188:	29 f4       	brne	.+10     	; 0x5194 <sysclk_enable_peripheral_clock+0x16e>
    518a:	62 e0       	ldi	r22, 0x02	; 2
    518c:	84 e0       	ldi	r24, 0x04	; 4
    518e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5192:	db c0       	rjmp	.+438    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5194:	89 81       	ldd	r24, Y+1	; 0x01
    5196:	9a 81       	ldd	r25, Y+2	; 0x02
    5198:	80 34       	cpi	r24, 0x40	; 64
    519a:	9a 40       	sbci	r25, 0x0A	; 10
    519c:	29 f4       	brne	.+10     	; 0x51a8 <sysclk_enable_peripheral_clock+0x182>
    519e:	62 e0       	ldi	r22, 0x02	; 2
    51a0:	85 e0       	ldi	r24, 0x05	; 5
    51a2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    51a6:	d1 c0       	rjmp	.+418    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    51a8:	89 81       	ldd	r24, Y+1	; 0x01
    51aa:	9a 81       	ldd	r25, Y+2	; 0x02
    51ac:	80 34       	cpi	r24, 0x40	; 64
    51ae:	9b 40       	sbci	r25, 0x0B	; 11
    51b0:	29 f4       	brne	.+10     	; 0x51bc <sysclk_enable_peripheral_clock+0x196>
    51b2:	62 e0       	ldi	r22, 0x02	; 2
    51b4:	86 e0       	ldi	r24, 0x06	; 6
    51b6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    51ba:	c7 c0       	rjmp	.+398    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	9a 81       	ldd	r25, Y+2	; 0x02
    51c0:	80 39       	cpi	r24, 0x90	; 144
    51c2:	98 40       	sbci	r25, 0x08	; 8
    51c4:	29 f4       	brne	.+10     	; 0x51d0 <sysclk_enable_peripheral_clock+0x1aa>
    51c6:	64 e0       	ldi	r22, 0x04	; 4
    51c8:	83 e0       	ldi	r24, 0x03	; 3
    51ca:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    51ce:	bd c0       	rjmp	.+378    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    51d0:	89 81       	ldd	r24, Y+1	; 0x01
    51d2:	9a 81       	ldd	r25, Y+2	; 0x02
    51d4:	80 39       	cpi	r24, 0x90	; 144
    51d6:	99 40       	sbci	r25, 0x09	; 9
    51d8:	29 f4       	brne	.+10     	; 0x51e4 <sysclk_enable_peripheral_clock+0x1be>
    51da:	64 e0       	ldi	r22, 0x04	; 4
    51dc:	84 e0       	ldi	r24, 0x04	; 4
    51de:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    51e2:	b3 c0       	rjmp	.+358    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    51e4:	89 81       	ldd	r24, Y+1	; 0x01
    51e6:	9a 81       	ldd	r25, Y+2	; 0x02
    51e8:	80 39       	cpi	r24, 0x90	; 144
    51ea:	9a 40       	sbci	r25, 0x0A	; 10
    51ec:	29 f4       	brne	.+10     	; 0x51f8 <sysclk_enable_peripheral_clock+0x1d2>
    51ee:	64 e0       	ldi	r22, 0x04	; 4
    51f0:	85 e0       	ldi	r24, 0x05	; 5
    51f2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    51f6:	a9 c0       	rjmp	.+338    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    51f8:	89 81       	ldd	r24, Y+1	; 0x01
    51fa:	9a 81       	ldd	r25, Y+2	; 0x02
    51fc:	80 39       	cpi	r24, 0x90	; 144
    51fe:	9b 40       	sbci	r25, 0x0B	; 11
    5200:	29 f4       	brne	.+10     	; 0x520c <sysclk_enable_peripheral_clock+0x1e6>
    5202:	64 e0       	ldi	r22, 0x04	; 4
    5204:	86 e0       	ldi	r24, 0x06	; 6
    5206:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    520a:	9f c0       	rjmp	.+318    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    520c:	89 81       	ldd	r24, Y+1	; 0x01
    520e:	9a 81       	ldd	r25, Y+2	; 0x02
    5210:	80 3c       	cpi	r24, 0xC0	; 192
    5212:	98 40       	sbci	r25, 0x08	; 8
    5214:	29 f4       	brne	.+10     	; 0x5220 <sysclk_enable_peripheral_clock+0x1fa>
    5216:	68 e0       	ldi	r22, 0x08	; 8
    5218:	83 e0       	ldi	r24, 0x03	; 3
    521a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    521e:	95 c0       	rjmp	.+298    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	9a 81       	ldd	r25, Y+2	; 0x02
    5224:	80 3c       	cpi	r24, 0xC0	; 192
    5226:	99 40       	sbci	r25, 0x09	; 9
    5228:	29 f4       	brne	.+10     	; 0x5234 <sysclk_enable_peripheral_clock+0x20e>
    522a:	68 e0       	ldi	r22, 0x08	; 8
    522c:	84 e0       	ldi	r24, 0x04	; 4
    522e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5232:	8b c0       	rjmp	.+278    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5234:	89 81       	ldd	r24, Y+1	; 0x01
    5236:	9a 81       	ldd	r25, Y+2	; 0x02
    5238:	80 3c       	cpi	r24, 0xC0	; 192
    523a:	9a 40       	sbci	r25, 0x0A	; 10
    523c:	29 f4       	brne	.+10     	; 0x5248 <sysclk_enable_peripheral_clock+0x222>
    523e:	68 e0       	ldi	r22, 0x08	; 8
    5240:	85 e0       	ldi	r24, 0x05	; 5
    5242:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5246:	81 c0       	rjmp	.+258    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5248:	89 81       	ldd	r24, Y+1	; 0x01
    524a:	9a 81       	ldd	r25, Y+2	; 0x02
    524c:	80 3c       	cpi	r24, 0xC0	; 192
    524e:	9b 40       	sbci	r25, 0x0B	; 11
    5250:	29 f4       	brne	.+10     	; 0x525c <sysclk_enable_peripheral_clock+0x236>
    5252:	68 e0       	ldi	r22, 0x08	; 8
    5254:	86 e0       	ldi	r24, 0x06	; 6
    5256:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    525a:	77 c0       	rjmp	.+238    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    525c:	89 81       	ldd	r24, Y+1	; 0x01
    525e:	9a 81       	ldd	r25, Y+2	; 0x02
    5260:	80 3a       	cpi	r24, 0xA0	; 160
    5262:	98 40       	sbci	r25, 0x08	; 8
    5264:	29 f4       	brne	.+10     	; 0x5270 <sysclk_enable_peripheral_clock+0x24a>
    5266:	60 e1       	ldi	r22, 0x10	; 16
    5268:	83 e0       	ldi	r24, 0x03	; 3
    526a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    526e:	6d c0       	rjmp	.+218    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5270:	89 81       	ldd	r24, Y+1	; 0x01
    5272:	9a 81       	ldd	r25, Y+2	; 0x02
    5274:	80 3a       	cpi	r24, 0xA0	; 160
    5276:	99 40       	sbci	r25, 0x09	; 9
    5278:	29 f4       	brne	.+10     	; 0x5284 <sysclk_enable_peripheral_clock+0x25e>
    527a:	60 e1       	ldi	r22, 0x10	; 16
    527c:	84 e0       	ldi	r24, 0x04	; 4
    527e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5282:	63 c0       	rjmp	.+198    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5284:	89 81       	ldd	r24, Y+1	; 0x01
    5286:	9a 81       	ldd	r25, Y+2	; 0x02
    5288:	80 3a       	cpi	r24, 0xA0	; 160
    528a:	9a 40       	sbci	r25, 0x0A	; 10
    528c:	29 f4       	brne	.+10     	; 0x5298 <sysclk_enable_peripheral_clock+0x272>
    528e:	60 e1       	ldi	r22, 0x10	; 16
    5290:	85 e0       	ldi	r24, 0x05	; 5
    5292:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5296:	59 c0       	rjmp	.+178    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	9a 81       	ldd	r25, Y+2	; 0x02
    529c:	80 3a       	cpi	r24, 0xA0	; 160
    529e:	9b 40       	sbci	r25, 0x0B	; 11
    52a0:	29 f4       	brne	.+10     	; 0x52ac <sysclk_enable_peripheral_clock+0x286>
    52a2:	60 e1       	ldi	r22, 0x10	; 16
    52a4:	86 e0       	ldi	r24, 0x06	; 6
    52a6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    52aa:	4f c0       	rjmp	.+158    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	9a 81       	ldd	r25, Y+2	; 0x02
    52b0:	80 3b       	cpi	r24, 0xB0	; 176
    52b2:	98 40       	sbci	r25, 0x08	; 8
    52b4:	29 f4       	brne	.+10     	; 0x52c0 <sysclk_enable_peripheral_clock+0x29a>
    52b6:	60 e2       	ldi	r22, 0x20	; 32
    52b8:	83 e0       	ldi	r24, 0x03	; 3
    52ba:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    52be:	45 c0       	rjmp	.+138    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    52c0:	89 81       	ldd	r24, Y+1	; 0x01
    52c2:	9a 81       	ldd	r25, Y+2	; 0x02
    52c4:	80 3b       	cpi	r24, 0xB0	; 176
    52c6:	99 40       	sbci	r25, 0x09	; 9
    52c8:	29 f4       	brne	.+10     	; 0x52d4 <sysclk_enable_peripheral_clock+0x2ae>
    52ca:	60 e2       	ldi	r22, 0x20	; 32
    52cc:	84 e0       	ldi	r24, 0x04	; 4
    52ce:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    52d2:	3b c0       	rjmp	.+118    	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    52d4:	89 81       	ldd	r24, Y+1	; 0x01
    52d6:	9a 81       	ldd	r25, Y+2	; 0x02
    52d8:	80 3b       	cpi	r24, 0xB0	; 176
    52da:	9a 40       	sbci	r25, 0x0A	; 10
    52dc:	29 f4       	brne	.+10     	; 0x52e8 <sysclk_enable_peripheral_clock+0x2c2>
    52de:	60 e2       	ldi	r22, 0x20	; 32
    52e0:	85 e0       	ldi	r24, 0x05	; 5
    52e2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    52e6:	31 c0       	rjmp	.+98     	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	9a 81       	ldd	r25, Y+2	; 0x02
    52ec:	80 3b       	cpi	r24, 0xB0	; 176
    52ee:	9b 40       	sbci	r25, 0x0B	; 11
    52f0:	29 f4       	brne	.+10     	; 0x52fc <sysclk_enable_peripheral_clock+0x2d6>
    52f2:	60 e2       	ldi	r22, 0x20	; 32
    52f4:	86 e0       	ldi	r24, 0x06	; 6
    52f6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    52fa:	27 c0       	rjmp	.+78     	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5300:	80 38       	cpi	r24, 0x80	; 128
    5302:	94 40       	sbci	r25, 0x04	; 4
    5304:	29 f4       	brne	.+10     	; 0x5310 <sysclk_enable_peripheral_clock+0x2ea>
    5306:	60 e4       	ldi	r22, 0x40	; 64
    5308:	83 e0       	ldi	r24, 0x03	; 3
    530a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    530e:	1d c0       	rjmp	.+58     	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	9a 81       	ldd	r25, Y+2	; 0x02
    5314:	80 39       	cpi	r24, 0x90	; 144
    5316:	94 40       	sbci	r25, 0x04	; 4
    5318:	29 f4       	brne	.+10     	; 0x5324 <sysclk_enable_peripheral_clock+0x2fe>
    531a:	60 e4       	ldi	r22, 0x40	; 64
    531c:	84 e0       	ldi	r24, 0x04	; 4
    531e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5322:	13 c0       	rjmp	.+38     	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	9a 81       	ldd	r25, Y+2	; 0x02
    5328:	80 3a       	cpi	r24, 0xA0	; 160
    532a:	94 40       	sbci	r25, 0x04	; 4
    532c:	29 f4       	brne	.+10     	; 0x5338 <sysclk_enable_peripheral_clock+0x312>
    532e:	60 e4       	ldi	r22, 0x40	; 64
    5330:	85 e0       	ldi	r24, 0x05	; 5
    5332:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5336:	09 c0       	rjmp	.+18     	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	9a 81       	ldd	r25, Y+2	; 0x02
    533c:	80 3b       	cpi	r24, 0xB0	; 176
    533e:	94 40       	sbci	r25, 0x04	; 4
    5340:	21 f4       	brne	.+8      	; 0x534a <sysclk_enable_peripheral_clock+0x324>
    5342:	60 e4       	ldi	r22, 0x40	; 64
    5344:	86 e0       	ldi	r24, 0x06	; 6
    5346:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    534a:	00 00       	nop
    534c:	0f 90       	pop	r0
    534e:	0f 90       	pop	r0
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	08 95       	ret

00005356 <usart_serial_init>:
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
    535a:	cd b7       	in	r28, 0x3d	; 61
    535c:	de b7       	in	r29, 0x3e	; 62
    535e:	2b 97       	sbiw	r28, 0x0b	; 11
    5360:	cd bf       	out	0x3d, r28	; 61
    5362:	de bf       	out	0x3e, r29	; 62
    5364:	88 87       	std	Y+8, r24	; 0x08
    5366:	99 87       	std	Y+9, r25	; 0x09
    5368:	6a 87       	std	Y+10, r22	; 0x0a
    536a:	7b 87       	std	Y+11, r23	; 0x0b
    536c:	8a 85       	ldd	r24, Y+10	; 0x0a
    536e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5370:	fc 01       	movw	r30, r24
    5372:	84 81       	ldd	r24, Z+4	; 0x04
    5374:	8d 83       	std	Y+5, r24	; 0x05
    5376:	8a 85       	ldd	r24, Y+10	; 0x0a
    5378:	9b 85       	ldd	r25, Y+11	; 0x0b
    537a:	fc 01       	movw	r30, r24
    537c:	85 81       	ldd	r24, Z+5	; 0x05
    537e:	8e 83       	std	Y+6, r24	; 0x06
    5380:	8a 85       	ldd	r24, Y+10	; 0x0a
    5382:	9b 85       	ldd	r25, Y+11	; 0x0b
    5384:	fc 01       	movw	r30, r24
    5386:	86 81       	ldd	r24, Z+6	; 0x06
    5388:	8f 83       	std	Y+7, r24	; 0x07
    538a:	8a 85       	ldd	r24, Y+10	; 0x0a
    538c:	9b 85       	ldd	r25, Y+11	; 0x0b
    538e:	fc 01       	movw	r30, r24
    5390:	80 81       	ld	r24, Z
    5392:	91 81       	ldd	r25, Z+1	; 0x01
    5394:	a2 81       	ldd	r26, Z+2	; 0x02
    5396:	b3 81       	ldd	r27, Z+3	; 0x03
    5398:	89 83       	std	Y+1, r24	; 0x01
    539a:	9a 83       	std	Y+2, r25	; 0x02
    539c:	ab 83       	std	Y+3, r26	; 0x03
    539e:	bc 83       	std	Y+4, r27	; 0x04
    53a0:	88 85       	ldd	r24, Y+8	; 0x08
    53a2:	99 85       	ldd	r25, Y+9	; 0x09
    53a4:	80 3a       	cpi	r24, 0xA0	; 160
    53a6:	98 40       	sbci	r25, 0x08	; 8
    53a8:	21 f4       	brne	.+8      	; 0x53b2 <usart_serial_init+0x5c>
    53aa:	60 e1       	ldi	r22, 0x10	; 16
    53ac:	83 e0       	ldi	r24, 0x03	; 3
    53ae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    53b2:	88 85       	ldd	r24, Y+8	; 0x08
    53b4:	99 85       	ldd	r25, Y+9	; 0x09
    53b6:	80 3b       	cpi	r24, 0xB0	; 176
    53b8:	98 40       	sbci	r25, 0x08	; 8
    53ba:	21 f4       	brne	.+8      	; 0x53c4 <usart_serial_init+0x6e>
    53bc:	60 e2       	ldi	r22, 0x20	; 32
    53be:	83 e0       	ldi	r24, 0x03	; 3
    53c0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    53c4:	88 85       	ldd	r24, Y+8	; 0x08
    53c6:	99 85       	ldd	r25, Y+9	; 0x09
    53c8:	80 3a       	cpi	r24, 0xA0	; 160
    53ca:	99 40       	sbci	r25, 0x09	; 9
    53cc:	21 f4       	brne	.+8      	; 0x53d6 <usart_serial_init+0x80>
    53ce:	60 e1       	ldi	r22, 0x10	; 16
    53d0:	84 e0       	ldi	r24, 0x04	; 4
    53d2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    53d6:	88 85       	ldd	r24, Y+8	; 0x08
    53d8:	99 85       	ldd	r25, Y+9	; 0x09
    53da:	80 3b       	cpi	r24, 0xB0	; 176
    53dc:	99 40       	sbci	r25, 0x09	; 9
    53de:	21 f4       	brne	.+8      	; 0x53e8 <usart_serial_init+0x92>
    53e0:	60 e2       	ldi	r22, 0x20	; 32
    53e2:	84 e0       	ldi	r24, 0x04	; 4
    53e4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    53e8:	88 85       	ldd	r24, Y+8	; 0x08
    53ea:	99 85       	ldd	r25, Y+9	; 0x09
    53ec:	80 3a       	cpi	r24, 0xA0	; 160
    53ee:	9a 40       	sbci	r25, 0x0A	; 10
    53f0:	21 f4       	brne	.+8      	; 0x53fa <usart_serial_init+0xa4>
    53f2:	60 e1       	ldi	r22, 0x10	; 16
    53f4:	85 e0       	ldi	r24, 0x05	; 5
    53f6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    53fa:	88 85       	ldd	r24, Y+8	; 0x08
    53fc:	99 85       	ldd	r25, Y+9	; 0x09
    53fe:	80 3b       	cpi	r24, 0xB0	; 176
    5400:	9a 40       	sbci	r25, 0x0A	; 10
    5402:	21 f4       	brne	.+8      	; 0x540c <usart_serial_init+0xb6>
    5404:	60 e2       	ldi	r22, 0x20	; 32
    5406:	85 e0       	ldi	r24, 0x05	; 5
    5408:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    540c:	88 85       	ldd	r24, Y+8	; 0x08
    540e:	99 85       	ldd	r25, Y+9	; 0x09
    5410:	80 3a       	cpi	r24, 0xA0	; 160
    5412:	9b 40       	sbci	r25, 0x0B	; 11
    5414:	21 f4       	brne	.+8      	; 0x541e <usart_serial_init+0xc8>
    5416:	60 e1       	ldi	r22, 0x10	; 16
    5418:	86 e0       	ldi	r24, 0x06	; 6
    541a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    541e:	88 85       	ldd	r24, Y+8	; 0x08
    5420:	99 85       	ldd	r25, Y+9	; 0x09
    5422:	80 3b       	cpi	r24, 0xB0	; 176
    5424:	9b 40       	sbci	r25, 0x0B	; 11
    5426:	21 f4       	brne	.+8      	; 0x5430 <usart_serial_init+0xda>
    5428:	60 e2       	ldi	r22, 0x20	; 32
    542a:	86 e0       	ldi	r24, 0x06	; 6
    542c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <sysclk_enable_module>
    5430:	88 85       	ldd	r24, Y+8	; 0x08
    5432:	99 85       	ldd	r25, Y+9	; 0x09
    5434:	9e 01       	movw	r18, r28
    5436:	2f 5f       	subi	r18, 0xFF	; 255
    5438:	3f 4f       	sbci	r19, 0xFF	; 255
    543a:	b9 01       	movw	r22, r18
    543c:	1e d8       	rcall	.-4036   	; 0x447a <usart_init_rs232>
    543e:	88 23       	and	r24, r24
    5440:	11 f0       	breq	.+4      	; 0x5446 <usart_serial_init+0xf0>
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	01 c0       	rjmp	.+2      	; 0x5448 <usart_serial_init+0xf2>
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	2b 96       	adiw	r28, 0x0b	; 11
    544a:	cd bf       	out	0x3d, r28	; 61
    544c:	de bf       	out	0x3e, r29	; 62
    544e:	df 91       	pop	r29
    5450:	cf 91       	pop	r28
    5452:	08 95       	ret

00005454 <usart_serial_putchar>:
    5454:	cf 93       	push	r28
    5456:	df 93       	push	r29
    5458:	00 d0       	rcall	.+0      	; 0x545a <usart_serial_putchar+0x6>
    545a:	cd b7       	in	r28, 0x3d	; 61
    545c:	de b7       	in	r29, 0x3e	; 62
    545e:	89 83       	std	Y+1, r24	; 0x01
    5460:	9a 83       	std	Y+2, r25	; 0x02
    5462:	6b 83       	std	Y+3, r22	; 0x03
    5464:	89 81       	ldd	r24, Y+1	; 0x01
    5466:	9a 81       	ldd	r25, Y+2	; 0x02
    5468:	6b 81       	ldd	r22, Y+3	; 0x03
    546a:	4d d8       	rcall	.-3942   	; 0x4506 <usart_putchar>
    546c:	23 96       	adiw	r28, 0x03	; 3
    546e:	cd bf       	out	0x3d, r28	; 61
    5470:	de bf       	out	0x3e, r29	; 62
    5472:	df 91       	pop	r29
    5474:	cf 91       	pop	r28
    5476:	08 95       	ret

00005478 <usart_serial_getchar>:
    5478:	cf 93       	push	r28
    547a:	df 93       	push	r29
    547c:	00 d0       	rcall	.+0      	; 0x547e <usart_serial_getchar+0x6>
    547e:	1f 92       	push	r1
    5480:	cd b7       	in	r28, 0x3d	; 61
    5482:	de b7       	in	r29, 0x3e	; 62
    5484:	89 83       	std	Y+1, r24	; 0x01
    5486:	9a 83       	std	Y+2, r25	; 0x02
    5488:	6b 83       	std	Y+3, r22	; 0x03
    548a:	7c 83       	std	Y+4, r23	; 0x04
    548c:	89 81       	ldd	r24, Y+1	; 0x01
    548e:	9a 81       	ldd	r25, Y+2	; 0x02
    5490:	58 d8       	rcall	.-3920   	; 0x4542 <usart_getchar>
    5492:	28 2f       	mov	r18, r24
    5494:	8b 81       	ldd	r24, Y+3	; 0x03
    5496:	9c 81       	ldd	r25, Y+4	; 0x04
    5498:	fc 01       	movw	r30, r24
    549a:	20 83       	st	Z, r18
    549c:	00 00       	nop
    549e:	24 96       	adiw	r28, 0x04	; 4
    54a0:	cd bf       	out	0x3d, r28	; 61
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	08 95       	ret

000054aa <stdio_serial_init>:
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
    54ae:	00 d0       	rcall	.+0      	; 0x54b0 <stdio_serial_init+0x6>
    54b0:	1f 92       	push	r1
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
    54b6:	89 83       	std	Y+1, r24	; 0x01
    54b8:	9a 83       	std	Y+2, r25	; 0x02
    54ba:	6b 83       	std	Y+3, r22	; 0x03
    54bc:	7c 83       	std	Y+4, r23	; 0x04
    54be:	89 81       	ldd	r24, Y+1	; 0x01
    54c0:	9a 81       	ldd	r25, Y+2	; 0x02
    54c2:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <stdio_base>
    54c6:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <stdio_base+0x1>
    54ca:	8a e2       	ldi	r24, 0x2A	; 42
    54cc:	9a e2       	ldi	r25, 0x2A	; 42
    54ce:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <ptr_put>
    54d2:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <ptr_put+0x1>
    54d6:	8c e3       	ldi	r24, 0x3C	; 60
    54d8:	9a e2       	ldi	r25, 0x2A	; 42
    54da:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <ptr_get>
    54de:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <ptr_get+0x1>
    54e2:	2b 81       	ldd	r18, Y+3	; 0x03
    54e4:	3c 81       	ldd	r19, Y+4	; 0x04
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ea:	b9 01       	movw	r22, r18
    54ec:	34 df       	rcall	.-408    	; 0x5356 <usart_serial_init>
    54ee:	67 e7       	ldi	r22, 0x77	; 119
    54f0:	7d e0       	ldi	r23, 0x0D	; 13
    54f2:	86 e9       	ldi	r24, 0x96	; 150
    54f4:	9d e0       	ldi	r25, 0x0D	; 13
    54f6:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <fdevopen>
    54fa:	00 00       	nop
    54fc:	24 96       	adiw	r28, 0x04	; 4
    54fe:	cd bf       	out	0x3d, r28	; 61
    5500:	de bf       	out	0x3e, r29	; 62
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	08 95       	ret

00005508 <uart_init>:
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	1f 92       	push	r1
    550e:	1f 92       	push	r1
    5510:	cd b7       	in	r28, 0x3d	; 61
    5512:	de b7       	in	r29, 0x3e	; 62
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	9a 83       	std	Y+2, r25	; 0x02
    5518:	89 81       	ldd	r24, Y+1	; 0x01
    551a:	9a 81       	ldd	r25, Y+2	; 0x02
    551c:	fc 01       	movw	r30, r24
    551e:	86 81       	ldd	r24, Z+6	; 0x06
    5520:	97 81       	ldd	r25, Z+7	; 0x07
    5522:	a0 85       	ldd	r26, Z+8	; 0x08
    5524:	b1 85       	ldd	r27, Z+9	; 0x09
    5526:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6315>
    552a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6315+0x1>
    552e:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6315+0x2>
    5532:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6315+0x3>
    5536:	89 81       	ldd	r24, Y+1	; 0x01
    5538:	9a 81       	ldd	r25, Y+2	; 0x02
    553a:	fc 01       	movw	r30, r24
    553c:	80 81       	ld	r24, Z
    553e:	91 81       	ldd	r25, Z+1	; 0x01
    5540:	29 81       	ldd	r18, Y+1	; 0x01
    5542:	3a 81       	ldd	r19, Y+2	; 0x02
    5544:	f9 01       	movw	r30, r18
    5546:	20 81       	ld	r18, Z
    5548:	31 81       	ldd	r19, Z+1	; 0x01
    554a:	f9 01       	movw	r30, r18
    554c:	40 81       	ld	r20, Z
    554e:	29 81       	ldd	r18, Y+1	; 0x01
    5550:	3a 81       	ldd	r19, Y+2	; 0x02
    5552:	f9 01       	movw	r30, r18
    5554:	25 81       	ldd	r18, Z+5	; 0x05
    5556:	24 2b       	or	r18, r20
    5558:	fc 01       	movw	r30, r24
    555a:	20 83       	st	Z, r18
    555c:	89 81       	ldd	r24, Y+1	; 0x01
    555e:	9a 81       	ldd	r25, Y+2	; 0x02
    5560:	fc 01       	movw	r30, r24
    5562:	80 81       	ld	r24, Z
    5564:	91 81       	ldd	r25, Z+1	; 0x01
    5566:	29 81       	ldd	r18, Y+1	; 0x01
    5568:	3a 81       	ldd	r19, Y+2	; 0x02
    556a:	f9 01       	movw	r30, r18
    556c:	20 81       	ld	r18, Z
    556e:	31 81       	ldd	r19, Z+1	; 0x01
    5570:	f9 01       	movw	r30, r18
    5572:	44 81       	ldd	r20, Z+4	; 0x04
    5574:	29 81       	ldd	r18, Y+1	; 0x01
    5576:	3a 81       	ldd	r19, Y+2	; 0x02
    5578:	f9 01       	movw	r30, r18
    557a:	25 81       	ldd	r18, Z+5	; 0x05
    557c:	24 2b       	or	r18, r20
    557e:	fc 01       	movw	r30, r24
    5580:	24 83       	std	Z+4, r18	; 0x04
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	9a 81       	ldd	r25, Y+2	; 0x02
    5586:	fc 01       	movw	r30, r24
    5588:	80 81       	ld	r24, Z
    558a:	91 81       	ldd	r25, Z+1	; 0x01
    558c:	29 81       	ldd	r18, Y+1	; 0x01
    558e:	3a 81       	ldd	r19, Y+2	; 0x02
    5590:	f9 01       	movw	r30, r18
    5592:	20 81       	ld	r18, Z
    5594:	31 81       	ldd	r19, Z+1	; 0x01
    5596:	f9 01       	movw	r30, r18
    5598:	20 81       	ld	r18, Z
    559a:	42 2f       	mov	r20, r18
    559c:	29 81       	ldd	r18, Y+1	; 0x01
    559e:	3a 81       	ldd	r19, Y+2	; 0x02
    55a0:	f9 01       	movw	r30, r18
    55a2:	24 81       	ldd	r18, Z+4	; 0x04
    55a4:	20 95       	com	r18
    55a6:	24 23       	and	r18, r20
    55a8:	fc 01       	movw	r30, r24
    55aa:	20 83       	st	Z, r18
    55ac:	89 81       	ldd	r24, Y+1	; 0x01
    55ae:	9a 81       	ldd	r25, Y+2	; 0x02
    55b0:	fc 01       	movw	r30, r24
    55b2:	82 81       	ldd	r24, Z+2	; 0x02
    55b4:	93 81       	ldd	r25, Z+3	; 0x03
    55b6:	37 dd       	rcall	.-1426   	; 0x5026 <sysclk_enable_peripheral_clock>
    55b8:	89 81       	ldd	r24, Y+1	; 0x01
    55ba:	9a 81       	ldd	r25, Y+2	; 0x02
    55bc:	fc 01       	movw	r30, r24
    55be:	82 81       	ldd	r24, Z+2	; 0x02
    55c0:	93 81       	ldd	r25, Z+3	; 0x03
    55c2:	66 e0       	ldi	r22, 0x06	; 6
    55c4:	70 e2       	ldi	r23, 0x20	; 32
    55c6:	c7 de       	rcall	.-626    	; 0x5356 <usart_serial_init>
    55c8:	00 00       	nop
    55ca:	0f 90       	pop	r0
    55cc:	0f 90       	pop	r0
    55ce:	df 91       	pop	r29
    55d0:	cf 91       	pop	r28
    55d2:	08 95       	ret

000055d4 <uart_terminal_init>:

void uart_terminal_init()
{
    55d4:	cf 93       	push	r28
    55d6:	df 93       	push	r29
    55d8:	cd b7       	in	r28, 0x3d	; 61
    55da:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    55dc:	80 ea       	ldi	r24, 0xA0	; 160
    55de:	9a e0       	ldi	r25, 0x0A	; 10
    55e0:	22 dd       	rcall	.-1468   	; 0x5026 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    55e2:	80 e8       	ldi	r24, 0x80	; 128
    55e4:	96 e0       	ldi	r25, 0x06	; 6
    55e6:	20 e8       	ldi	r18, 0x80	; 128
    55e8:	36 e0       	ldi	r19, 0x06	; 6
    55ea:	f9 01       	movw	r30, r18
    55ec:	20 81       	ld	r18, Z
    55ee:	28 60       	ori	r18, 0x08	; 8
    55f0:	fc 01       	movw	r30, r24
    55f2:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    55f4:	6d e0       	ldi	r22, 0x0D	; 13
    55f6:	70 e2       	ldi	r23, 0x20	; 32
    55f8:	80 ea       	ldi	r24, 0xA0	; 160
    55fa:	9a e0       	ldi	r25, 0x0A	; 10
    55fc:	56 df       	rcall	.-340    	; 0x54aa <stdio_serial_init>
	
}
    55fe:	00 00       	nop
    5600:	df 91       	pop	r29
    5602:	cf 91       	pop	r28
    5604:	08 95       	ret

00005606 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	cd b7       	in	r28, 0x3d	; 61
    560c:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	98 e4       	ldi	r25, 0x48	; 72
    5612:	a8 ee       	ldi	r26, 0xE8	; 232
    5614:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    5616:	bc 01       	movw	r22, r24
    5618:	cd 01       	movw	r24, r26
    561a:	df 91       	pop	r29
    561c:	cf 91       	pop	r28
    561e:	08 95       	ret

00005620 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	1f 92       	push	r1
    5626:	cd b7       	in	r28, 0x3d	; 61
    5628:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    562a:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    562c:	ec df       	rcall	.-40     	; 0x5606 <sysclk_get_main_hz>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	29 81       	ldd	r18, Y+1	; 0x01
    5634:	22 2f       	mov	r18, r18
    5636:	30 e0       	ldi	r19, 0x00	; 0
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <sysclk_get_per4_hz+0x22>
    563a:	b6 95       	lsr	r27
    563c:	a7 95       	ror	r26
    563e:	97 95       	ror	r25
    5640:	87 95       	ror	r24
    5642:	2a 95       	dec	r18
    5644:	d2 f7       	brpl	.-12     	; 0x563a <sysclk_get_per4_hz+0x1a>
}
    5646:	bc 01       	movw	r22, r24
    5648:	cd 01       	movw	r24, r26
    564a:	0f 90       	pop	r0
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	08 95       	ret

00005652 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    5652:	cf 93       	push	r28
    5654:	df 93       	push	r29
    5656:	cd b7       	in	r28, 0x3d	; 61
    5658:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    565a:	e2 df       	rcall	.-60     	; 0x5620 <sysclk_get_per4_hz>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    5660:	bc 01       	movw	r22, r24
    5662:	cd 01       	movw	r24, r26
    5664:	df 91       	pop	r29
    5666:	cf 91       	pop	r28
    5668:	08 95       	ret

0000566a <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    5672:	ef df       	rcall	.-34     	; 0x5652 <sysclk_get_per2_hz>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
}
    5678:	bc 01       	movw	r22, r24
    567a:	cd 01       	movw	r24, r26
    567c:	df 91       	pop	r29
    567e:	cf 91       	pop	r28
    5680:	08 95       	ret

00005682 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    568a:	ef df       	rcall	.-34     	; 0x566a <sysclk_get_per_hz>
    568c:	dc 01       	movw	r26, r24
    568e:	cb 01       	movw	r24, r22
}
    5690:	bc 01       	movw	r22, r24
    5692:	cd 01       	movw	r24, r26
    5694:	df 91       	pop	r29
    5696:	cf 91       	pop	r28
    5698:	08 95       	ret

0000569a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    569a:	04 c0       	rjmp	.+8      	; 0x56a4 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    569c:	61 50       	subi	r22, 0x01	; 1
    569e:	71 09       	sbc	r23, r1
    56a0:	81 09       	sbc	r24, r1
    56a2:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    56a4:	61 15       	cp	r22, r1
    56a6:	71 05       	cpc	r23, r1
    56a8:	81 05       	cpc	r24, r1
    56aa:	91 05       	cpc	r25, r1
    56ac:	b9 f7       	brne	.-18     	; 0x569c <__portable_avr_delay_cycles+0x2>
    56ae:	08 95       	ret

000056b0 <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    56b0:	cf 93       	push	r28
    56b2:	df 93       	push	r29
    56b4:	cd b7       	in	r28, 0x3d	; 61
    56b6:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    56b8:	80 ea       	ldi	r24, 0xA0	; 160
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	27 e0       	ldi	r18, 0x07	; 7
    56be:	fc 01       	movw	r30, r24
    56c0:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    56c2:	00 00       	nop
    56c4:	df 91       	pop	r29
    56c6:	cf 91       	pop	r28
    56c8:	08 95       	ret

000056ca <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	1f 92       	push	r1
    56d0:	cd b7       	in	r28, 0x3d	; 61
    56d2:	de b7       	in	r29, 0x3e	; 62
    56d4:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    56d6:	89 81       	ldd	r24, Y+1	; 0x01
    56d8:	88 2f       	mov	r24, r24
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	00 97       	sbiw	r24, 0x00	; 0
    56de:	19 f0       	breq	.+6      	; 0x56e6 <pmic_set_scheduling+0x1c>
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	79 f0       	breq	.+30     	; 0x5702 <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    56e4:	18 c0       	rjmp	.+48     	; 0x5716 <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    56e6:	80 ea       	ldi	r24, 0xA0	; 160
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	20 ea       	ldi	r18, 0xA0	; 160
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	f9 01       	movw	r30, r18
    56f0:	22 81       	ldd	r18, Z+2	; 0x02
    56f2:	2f 77       	andi	r18, 0x7F	; 127
    56f4:	fc 01       	movw	r30, r24
    56f6:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    56f8:	80 ea       	ldi	r24, 0xA0	; 160
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	fc 01       	movw	r30, r24
    56fe:	11 82       	std	Z+1, r1	; 0x01
		break;
    5700:	0a c0       	rjmp	.+20     	; 0x5716 <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    5702:	80 ea       	ldi	r24, 0xA0	; 160
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	20 ea       	ldi	r18, 0xA0	; 160
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	f9 01       	movw	r30, r18
    570c:	22 81       	ldd	r18, Z+2	; 0x02
    570e:	20 68       	ori	r18, 0x80	; 128
    5710:	fc 01       	movw	r30, r24
    5712:	22 83       	std	Z+2, r18	; 0x02
		break;
    5714:	00 00       	nop

	default:
		break;
	};
}
    5716:	00 00       	nop
    5718:	0f 90       	pop	r0
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	08 95       	ret

00005720 <main>:




int main (void)
{
    5720:	2f 92       	push	r2
    5722:	3f 92       	push	r3
    5724:	4f 92       	push	r4
    5726:	5f 92       	push	r5
    5728:	6f 92       	push	r6
    572a:	7f 92       	push	r7
    572c:	8f 92       	push	r8
    572e:	9f 92       	push	r9
    5730:	af 92       	push	r10
    5732:	bf 92       	push	r11
    5734:	cf 92       	push	r12
    5736:	df 92       	push	r13
    5738:	ef 92       	push	r14
    573a:	ff 92       	push	r15
    573c:	0f 93       	push	r16
    573e:	1f 93       	push	r17
    5740:	cf 93       	push	r28
    5742:	df 93       	push	r29
    5744:	cd b7       	in	r28, 0x3d	; 61
    5746:	de b7       	in	r29, 0x3e	; 62
    5748:	c1 56       	subi	r28, 0x61	; 97
    574a:	d1 09       	sbc	r29, r1
    574c:	cd bf       	out	0x3d, r28	; 61
    574e:	de bf       	out	0x3e, r29	; 62
	
	
	char* telemetryString = (char*)malloc(255 * sizeof(char)) ;
    5750:	8f ef       	ldi	r24, 0xFF	; 255
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5758:	89 83       	std	Y+1, r24	; 0x01
    575a:	9a 83       	std	Y+2, r25	; 0x02
	char* s_teamID = "2118";
    575c:	8e e1       	ldi	r24, 0x1E	; 30
    575e:	90 e2       	ldi	r25, 0x20	; 32
    5760:	8b 83       	std	Y+3, r24	; 0x03
    5762:	9c 83       	std	Y+4, r25	; 0x04
	char* s_missionTime = (char*)malloc(10 * sizeof(char));
    5764:	8a e0       	ldi	r24, 0x0A	; 10
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    576c:	8d 83       	std	Y+5, r24	; 0x05
    576e:	9e 83       	std	Y+6, r25	; 0x06
	char* s_packetCount =(char*)malloc(10 * sizeof(char));
    5770:	8a e0       	ldi	r24, 0x0A	; 10
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5778:	8f 83       	std	Y+7, r24	; 0x07
    577a:	98 87       	std	Y+8, r25	; 0x08
	char* s_altitude= (char*)malloc(10 * sizeof(char));
    577c:	8a e0       	ldi	r24, 0x0A	; 10
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5784:	89 87       	std	Y+9, r24	; 0x09
    5786:	9a 87       	std	Y+10, r25	; 0x0a
	char* s_pressure= (char*)malloc(10 * sizeof(char));
    5788:	8a e0       	ldi	r24, 0x0A	; 10
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5790:	8b 87       	std	Y+11, r24	; 0x0b
    5792:	9c 87       	std	Y+12, r25	; 0x0c
	char* s_temp= (char*)malloc(10 * sizeof(char));
    5794:	8a e0       	ldi	r24, 0x0A	; 10
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    579c:	8d 87       	std	Y+13, r24	; 0x0d
    579e:	9e 87       	std	Y+14, r25	; 0x0e
	char* s_voltage= (char*)malloc(10 * sizeof(char));
    57a0:	8a e0       	ldi	r24, 0x0A	; 10
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57a8:	8f 87       	std	Y+15, r24	; 0x0f
    57aa:	98 8b       	std	Y+16, r25	; 0x10
	char* s_gpsTime= (char*)malloc(10 * sizeof(char));
    57ac:	8a e0       	ldi	r24, 0x0A	; 10
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57b4:	89 8b       	std	Y+17, r24	; 0x11
    57b6:	9a 8b       	std	Y+18, r25	; 0x12
	char* s_gpsLat= (char*)malloc(10 * sizeof(char));
    57b8:	8a e0       	ldi	r24, 0x0A	; 10
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57c0:	8b 8b       	std	Y+19, r24	; 0x13
    57c2:	9c 8b       	std	Y+20, r25	; 0x14
	char* s_gpsLong= (char*)malloc(10 * sizeof(char));
    57c4:	8a e0       	ldi	r24, 0x0A	; 10
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57cc:	8d 8b       	std	Y+21, r24	; 0x15
    57ce:	9e 8b       	std	Y+22, r25	; 0x16
	char* s_gpsAlt= (char*)malloc(10 * sizeof(char));
    57d0:	8a e0       	ldi	r24, 0x0A	; 10
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57d8:	8f 8b       	std	Y+23, r24	; 0x17
    57da:	98 8f       	std	Y+24, r25	; 0x18
	char* s_gpsSats= (char*)malloc(10 * sizeof(char));
    57dc:	8a e0       	ldi	r24, 0x0A	; 10
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57e4:	89 8f       	std	Y+25, r24	; 0x19
    57e6:	9a 8f       	std	Y+26, r25	; 0x1a
	char* s_pitch= (char*)malloc(10 * sizeof(char));
    57e8:	8a e0       	ldi	r24, 0x0A	; 10
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57f0:	8b 8f       	std	Y+27, r24	; 0x1b
    57f2:	9c 8f       	std	Y+28, r25	; 0x1c
	char* s_roll= (char*)malloc(10 * sizeof(char));
    57f4:	8a e0       	ldi	r24, 0x0A	; 10
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    57fc:	8d 8f       	std	Y+29, r24	; 0x1d
    57fe:	9e 8f       	std	Y+30, r25	; 0x1e
	char* s_spinRate= (char*)malloc(10 * sizeof(char));
    5800:	8a e0       	ldi	r24, 0x0A	; 10
    5802:	90 e0       	ldi	r25, 0x00	; 0
    5804:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5808:	8f 8f       	std	Y+31, r24	; 0x1f
    580a:	98 a3       	std	Y+32, r25	; 0x20
	char* s_flightState= (char*)malloc(10 * sizeof(char));
    580c:	8a e0       	ldi	r24, 0x0A	; 10
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5814:	89 a3       	std	Y+33, r24	; 0x21
    5816:	9a a3       	std	Y+34, r25	; 0x22
	char* s_cardinalDir= (char*)malloc(10 * sizeof(char));
    5818:	8a e0       	ldi	r24, 0x0A	; 10
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <malloc>
    5820:	8b a3       	std	Y+35, r24	; 0x23
    5822:	9c a3       	std	Y+36, r25	; 0x24
	
	uint16_t packetCount = 0;
    5824:	1d a2       	std	Y+37, r1	; 0x25
    5826:	1e a2       	std	Y+38, r1	; 0x26
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	
	
	sysclk_init();
    5828:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <sysclk_init>
	board_init();
    582c:	fb d8       	rcall	.-3594   	; 0x4a24 <board_init>
	uart_terminal_init();
    582e:	d2 de       	rcall	.-604    	; 0x55d4 <uart_terminal_init>
    5830:	83 e2       	ldi	r24, 0x23	; 35
	printf("uart is working\n");
    5832:	90 e2       	ldi	r25, 0x20	; 32
    5834:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <puts>
	
	pmic_init();
    5838:	3b df       	rcall	.-394    	; 0x56b0 <pmic_init>
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    583a:	81 e0       	ldi	r24, 0x01	; 1
    583c:	46 df       	rcall	.-372    	; 0x56ca <pmic_set_scheduling>
    583e:	78 94       	sei
	cpu_irq_enable();
    5840:	49 e2       	ldi	r20, 0x29	; 41
	
	//printf("\tpmic Init\n");
	
	I2CInit(115200,0x29);
    5842:	60 e0       	ldi	r22, 0x00	; 0
    5844:	72 ec       	ldi	r23, 0xC2	; 194
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	51 db       	rcall	.-2398   	; 0x4eee <I2CInit>
    584c:	0e 94 9d 0b 	call	0x173a	; 0x173a <xbee_init>
	
	//printf("\tI2CInit\n");
	
	xbee_init();
    5850:	1c aa       	std	Y+52, r1	; 0x34
	//printf("\tXbee Init\n");
	
	
	
	uint8_t data;
	int16_t acel[]={0,0,0};
    5852:	1d aa       	std	Y+53, r1	; 0x35
    5854:	1e aa       	std	Y+54, r1	; 0x36
    5856:	1f aa       	std	Y+55, r1	; 0x37
    5858:	18 ae       	std	Y+56, r1	; 0x38
    585a:	19 ae       	std	Y+57, r1	; 0x39
    585c:	1b aa       	std	Y+51, r1	; 0x33
	int16_t acelx;
		data=BNO055_OPERATION_MODE_CONFIG;
    585e:	ce 01       	movw	r24, r28
	//printf("\tPre-read1\n");
		BNO_Write (&data, BNO055_OPR_MODE_ADDR);
    5860:	c3 96       	adiw	r24, 0x33	; 51
    5862:	6d e3       	ldi	r22, 0x3D	; 61
    5864:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <BNO_Write>
	//printf("\tPre-read2\n");
		delay_ms(22);
    5868:	0c df       	rcall	.-488    	; 0x5682 <sysclk_get_cpu_hz>
    586a:	dc 01       	movw	r26, r24
    586c:	cb 01       	movw	r24, r22
    586e:	8c 01       	movw	r16, r24
    5870:	9d 01       	movw	r18, r26
    5872:	40 e0       	ldi	r20, 0x00	; 0
    5874:	50 e0       	ldi	r21, 0x00	; 0
    5876:	ba 01       	movw	r22, r20
    5878:	0a af       	std	Y+58, r16	; 0x3a
    587a:	1b af       	std	Y+59, r17	; 0x3b
    587c:	2c af       	std	Y+60, r18	; 0x3c
    587e:	3d af       	std	Y+61, r19	; 0x3d
    5880:	4e af       	std	Y+62, r20	; 0x3e
    5882:	5f af       	std	Y+63, r21	; 0x3f
    5884:	21 96       	adiw	r28, 0x01	; 1
    5886:	6f af       	std	Y+63, r22	; 0x3f
    5888:	21 97       	sbiw	r28, 0x01	; 1
    588a:	22 96       	adiw	r28, 0x02	; 2
    588c:	7f af       	std	Y+63, r23	; 0x3f
    588e:	22 97       	sbiw	r28, 0x02	; 2
    5890:	2a ac       	ldd	r2, Y+58	; 0x3a
    5892:	3b ac       	ldd	r3, Y+59	; 0x3b
    5894:	4c ac       	ldd	r4, Y+60	; 0x3c
    5896:	5d ac       	ldd	r5, Y+61	; 0x3d
    5898:	6e ac       	ldd	r6, Y+62	; 0x3e
    589a:	7f ac       	ldd	r7, Y+63	; 0x3f
    589c:	21 96       	adiw	r28, 0x01	; 1
    589e:	8f ac       	ldd	r8, Y+63	; 0x3f
    58a0:	21 97       	sbiw	r28, 0x01	; 1
    58a2:	22 96       	adiw	r28, 0x02	; 2
    58a4:	9f ac       	ldd	r9, Y+63	; 0x3f
    58a6:	22 97       	sbiw	r28, 0x02	; 2
    58a8:	22 2d       	mov	r18, r2
    58aa:	33 2d       	mov	r19, r3
    58ac:	44 2d       	mov	r20, r4
    58ae:	55 2d       	mov	r21, r5
    58b0:	66 2d       	mov	r22, r6
    58b2:	77 2d       	mov	r23, r7
    58b4:	88 2d       	mov	r24, r8
    58b6:	99 2d       	mov	r25, r9
    58b8:	02 e0       	ldi	r16, 0x02	; 2
    58ba:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    58be:	a2 2e       	mov	r10, r18
    58c0:	b3 2e       	mov	r11, r19
    58c2:	c4 2e       	mov	r12, r20
    58c4:	d5 2e       	mov	r13, r21
    58c6:	e6 2e       	mov	r14, r22
    58c8:	f7 2e       	mov	r15, r23
    58ca:	08 2f       	mov	r16, r24
    58cc:	19 2f       	mov	r17, r25
    58ce:	2a 2c       	mov	r2, r10
    58d0:	3b 2c       	mov	r3, r11
    58d2:	4c 2c       	mov	r4, r12
    58d4:	5d 2c       	mov	r5, r13
    58d6:	6e 2c       	mov	r6, r14
    58d8:	7f 2c       	mov	r7, r15
    58da:	80 2e       	mov	r8, r16
    58dc:	91 2e       	mov	r9, r17
    58de:	22 2d       	mov	r18, r2
    58e0:	33 2d       	mov	r19, r3
    58e2:	44 2d       	mov	r20, r4
    58e4:	55 2d       	mov	r21, r5
    58e6:	66 2d       	mov	r22, r6
    58e8:	77 2d       	mov	r23, r7
    58ea:	88 2d       	mov	r24, r8
    58ec:	99 2d       	mov	r25, r9
    58ee:	02 e0       	ldi	r16, 0x02	; 2
    58f0:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    58f4:	a2 2e       	mov	r10, r18
    58f6:	b3 2e       	mov	r11, r19
    58f8:	c4 2e       	mov	r12, r20
    58fa:	d5 2e       	mov	r13, r21
    58fc:	e6 2e       	mov	r14, r22
    58fe:	f7 2e       	mov	r15, r23
    5900:	08 2f       	mov	r16, r24
    5902:	19 2f       	mov	r17, r25
    5904:	2a 2d       	mov	r18, r10
    5906:	3b 2d       	mov	r19, r11
    5908:	4c 2d       	mov	r20, r12
    590a:	5d 2d       	mov	r21, r13
    590c:	6e 2d       	mov	r22, r14
    590e:	7f 2d       	mov	r23, r15
    5910:	80 2f       	mov	r24, r16
    5912:	91 2f       	mov	r25, r17
    5914:	a2 2c       	mov	r10, r2
    5916:	b3 2c       	mov	r11, r3
    5918:	c4 2c       	mov	r12, r4
    591a:	d5 2c       	mov	r13, r5
    591c:	e6 2c       	mov	r14, r6
    591e:	f7 2c       	mov	r15, r7
    5920:	08 2d       	mov	r16, r8
    5922:	19 2d       	mov	r17, r9
    5924:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <__subdi3>
    5928:	a2 2e       	mov	r10, r18
    592a:	b3 2e       	mov	r11, r19
    592c:	c4 2e       	mov	r12, r20
    592e:	d5 2e       	mov	r13, r21
    5930:	e6 2e       	mov	r14, r22
    5932:	f7 2e       	mov	r15, r23
    5934:	08 2f       	mov	r16, r24
    5936:	19 2f       	mov	r17, r25
    5938:	2a 2d       	mov	r18, r10
    593a:	3b 2d       	mov	r19, r11
    593c:	4c 2d       	mov	r20, r12
    593e:	5d 2d       	mov	r21, r13
    5940:	6e 2d       	mov	r22, r14
    5942:	7f 2d       	mov	r23, r15
    5944:	80 2f       	mov	r24, r16
    5946:	91 2f       	mov	r25, r17
    5948:	aa ac       	ldd	r10, Y+58	; 0x3a
    594a:	bb ac       	ldd	r11, Y+59	; 0x3b
    594c:	cc ac       	ldd	r12, Y+60	; 0x3c
    594e:	dd ac       	ldd	r13, Y+61	; 0x3d
    5950:	ee ac       	ldd	r14, Y+62	; 0x3e
    5952:	ff ac       	ldd	r15, Y+63	; 0x3f
    5954:	21 96       	adiw	r28, 0x01	; 1
    5956:	0f ad       	ldd	r16, Y+63	; 0x3f
    5958:	21 97       	sbiw	r28, 0x01	; 1
    595a:	22 96       	adiw	r28, 0x02	; 2
    595c:	1f ad       	ldd	r17, Y+63	; 0x3f
    595e:	22 97       	sbiw	r28, 0x02	; 2
    5960:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <__subdi3>
    5964:	a2 2e       	mov	r10, r18
    5966:	b3 2e       	mov	r11, r19
    5968:	c4 2e       	mov	r12, r20
    596a:	d5 2e       	mov	r13, r21
    596c:	e6 2e       	mov	r14, r22
    596e:	f7 2e       	mov	r15, r23
    5970:	08 2f       	mov	r16, r24
    5972:	19 2f       	mov	r17, r25
    5974:	2a 2d       	mov	r18, r10
    5976:	3b 2d       	mov	r19, r11
    5978:	4c 2d       	mov	r20, r12
    597a:	5d 2d       	mov	r21, r13
    597c:	6e 2d       	mov	r22, r14
    597e:	7f 2d       	mov	r23, r15
    5980:	80 2f       	mov	r24, r16
    5982:	91 2f       	mov	r25, r17
    5984:	01 e0       	ldi	r16, 0x01	; 1
    5986:	0e 94 48 35 	call	0x6a90	; 0x6a90 <__ashldi3>
    598a:	22 2e       	mov	r2, r18
    598c:	33 2e       	mov	r3, r19
    598e:	44 2e       	mov	r4, r20
    5990:	55 2e       	mov	r5, r21
    5992:	66 2e       	mov	r6, r22
    5994:	77 2e       	mov	r7, r23
    5996:	88 2e       	mov	r8, r24
    5998:	99 2e       	mov	r9, r25
    599a:	a2 2c       	mov	r10, r2
    599c:	b3 2c       	mov	r11, r3
    599e:	c4 2c       	mov	r12, r4
    59a0:	d5 2c       	mov	r13, r5
    59a2:	e6 2c       	mov	r14, r6
    59a4:	f7 2c       	mov	r15, r7
    59a6:	08 2d       	mov	r16, r8
    59a8:	19 2d       	mov	r17, r9
    59aa:	2a 2c       	mov	r2, r10
    59ac:	3b 2c       	mov	r3, r11
    59ae:	4c 2c       	mov	r4, r12
    59b0:	5d 2c       	mov	r5, r13
    59b2:	6e 2c       	mov	r6, r14
    59b4:	7f 2c       	mov	r7, r15
    59b6:	80 2e       	mov	r8, r16
    59b8:	91 2e       	mov	r9, r17
    59ba:	0f 2e       	mov	r0, r31
    59bc:	f6 e0       	ldi	r31, 0x06	; 6
    59be:	af 2e       	mov	r10, r31
    59c0:	f0 2d       	mov	r31, r0
    59c2:	b1 2c       	mov	r11, r1
    59c4:	c1 2c       	mov	r12, r1
    59c6:	d1 2c       	mov	r13, r1
    59c8:	e1 2c       	mov	r14, r1
    59ca:	f1 2c       	mov	r15, r1
    59cc:	00 e0       	ldi	r16, 0x00	; 0
    59ce:	10 e0       	ldi	r17, 0x00	; 0
    59d0:	22 2d       	mov	r18, r2
    59d2:	33 2d       	mov	r19, r3
    59d4:	44 2d       	mov	r20, r4
    59d6:	55 2d       	mov	r21, r5
    59d8:	66 2d       	mov	r22, r6
    59da:	77 2d       	mov	r23, r7
    59dc:	88 2d       	mov	r24, r8
    59de:	99 2d       	mov	r25, r9
    59e0:	fb d7       	rcall	.+4086   	; 0x69d8 <__udivdi3>
    59e2:	22 2e       	mov	r2, r18
    59e4:	33 2e       	mov	r3, r19
    59e6:	44 2e       	mov	r4, r20
    59e8:	55 2e       	mov	r5, r21
    59ea:	66 2e       	mov	r6, r22
    59ec:	77 2e       	mov	r7, r23
    59ee:	88 2e       	mov	r8, r24
    59f0:	99 2e       	mov	r9, r25
    59f2:	a2 2c       	mov	r10, r2
    59f4:	b3 2c       	mov	r11, r3
    59f6:	c4 2c       	mov	r12, r4
    59f8:	d5 2c       	mov	r13, r5
    59fa:	e6 2c       	mov	r14, r6
    59fc:	f7 2c       	mov	r15, r7
    59fe:	08 2d       	mov	r16, r8
    5a00:	19 2d       	mov	r17, r9
    5a02:	2a 2d       	mov	r18, r10
    5a04:	3b 2d       	mov	r19, r11
    5a06:	4c 2d       	mov	r20, r12
    5a08:	5d 2d       	mov	r21, r13
    5a0a:	6e 2d       	mov	r22, r14
    5a0c:	7f 2d       	mov	r23, r15
    5a0e:	80 2f       	mov	r24, r16
    5a10:	91 2f       	mov	r25, r17
    5a12:	29 51       	subi	r18, 0x19	; 25
    5a14:	3c 4f       	sbci	r19, 0xFC	; 252
    5a16:	4f 4f       	sbci	r20, 0xFF	; 255
    5a18:	5f 4f       	sbci	r21, 0xFF	; 255
    5a1a:	6f 4f       	sbci	r22, 0xFF	; 255
    5a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a20:	9f 4f       	sbci	r25, 0xFF	; 255
    5a22:	a2 2e       	mov	r10, r18
    5a24:	b3 2e       	mov	r11, r19
    5a26:	c4 2e       	mov	r12, r20
    5a28:	d5 2e       	mov	r13, r21
    5a2a:	e6 2e       	mov	r14, r22
    5a2c:	f7 2e       	mov	r15, r23
    5a2e:	08 2f       	mov	r16, r24
    5a30:	19 2f       	mov	r17, r25
    5a32:	2a 2d       	mov	r18, r10
    5a34:	3b 2d       	mov	r19, r11
    5a36:	4c 2d       	mov	r20, r12
    5a38:	5d 2d       	mov	r21, r13
    5a3a:	6e 2d       	mov	r22, r14
    5a3c:	7f 2d       	mov	r23, r15
    5a3e:	80 2f       	mov	r24, r16
    5a40:	91 2f       	mov	r25, r17
    5a42:	e0 d6       	rcall	.+3520   	; 0x6804 <__floatundisf>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	20 e0       	ldi	r18, 0x00	; 0
    5a4a:	30 e0       	ldi	r19, 0x00	; 0
    5a4c:	4a e7       	ldi	r20, 0x7A	; 122
    5a4e:	54 e4       	ldi	r21, 0x44	; 68
    5a50:	bc 01       	movw	r22, r24
    5a52:	cd 01       	movw	r24, r26
    5a54:	35 d6       	rcall	.+3178   	; 0x66c0 <__divsf3>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	bc 01       	movw	r22, r24
    5a5c:	cd 01       	movw	r24, r26
    5a5e:	9d d6       	rcall	.+3386   	; 0x679a <__fixunssfdi>
    5a60:	a2 2e       	mov	r10, r18
    5a62:	b3 2e       	mov	r11, r19
    5a64:	c4 2e       	mov	r12, r20
    5a66:	d5 2e       	mov	r13, r21
    5a68:	e6 2e       	mov	r14, r22
    5a6a:	f7 2e       	mov	r15, r23
    5a6c:	08 2f       	mov	r16, r24
    5a6e:	19 2f       	mov	r17, r25
    5a70:	d6 01       	movw	r26, r12
    5a72:	c5 01       	movw	r24, r10
    5a74:	bc 01       	movw	r22, r24
    5a76:	cd 01       	movw	r24, r26
    5a78:	10 de       	rcall	.-992    	; 0x569a <__portable_avr_delay_cycles>
    5a7a:	8c e0       	ldi	r24, 0x0C	; 12
		
		data=BNO055_OPERATION_MODE_NDOF;
    5a7c:	8b ab       	std	Y+51, r24	; 0x33
    5a7e:	ce 01       	movw	r24, r28
		BNO_Write (&data,BNO055_OPR_MODE_ADDR);
    5a80:	c3 96       	adiw	r24, 0x33	; 51
    5a82:	6d e3       	ldi	r22, 0x3D	; 61
    5a84:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <BNO_Write>
    5a88:	fc dd       	rcall	.-1032   	; 0x5682 <sysclk_get_cpu_hz>
		delay_ms(8);
    5a8a:	dc 01       	movw	r26, r24
    5a8c:	cb 01       	movw	r24, r22
    5a8e:	5c 01       	movw	r10, r24
    5a90:	6d 01       	movw	r12, r26
    5a92:	e1 2c       	mov	r14, r1
    5a94:	f1 2c       	mov	r15, r1
    5a96:	87 01       	movw	r16, r14
    5a98:	2a 2d       	mov	r18, r10
    5a9a:	3b 2d       	mov	r19, r11
    5a9c:	4c 2d       	mov	r20, r12
    5a9e:	5d 2d       	mov	r21, r13
    5aa0:	6e 2d       	mov	r22, r14
    5aa2:	7f 2d       	mov	r23, r15
    5aa4:	80 2f       	mov	r24, r16
    5aa6:	91 2f       	mov	r25, r17
    5aa8:	03 e0       	ldi	r16, 0x03	; 3
    5aaa:	f2 d7       	rcall	.+4068   	; 0x6a90 <__ashldi3>
    5aac:	22 2e       	mov	r2, r18
    5aae:	33 2e       	mov	r3, r19
    5ab0:	44 2e       	mov	r4, r20
    5ab2:	55 2e       	mov	r5, r21
    5ab4:	66 2e       	mov	r6, r22
    5ab6:	77 2e       	mov	r7, r23
    5ab8:	88 2e       	mov	r8, r24
    5aba:	99 2e       	mov	r9, r25
    5abc:	0f 2e       	mov	r0, r31
    5abe:	f6 e0       	ldi	r31, 0x06	; 6
    5ac0:	af 2e       	mov	r10, r31
    5ac2:	f0 2d       	mov	r31, r0
    5ac4:	b1 2c       	mov	r11, r1
    5ac6:	c1 2c       	mov	r12, r1
    5ac8:	d1 2c       	mov	r13, r1
    5aca:	e1 2c       	mov	r14, r1
    5acc:	f1 2c       	mov	r15, r1
    5ace:	00 e0       	ldi	r16, 0x00	; 0
    5ad0:	10 e0       	ldi	r17, 0x00	; 0
    5ad2:	22 2d       	mov	r18, r2
    5ad4:	33 2d       	mov	r19, r3
    5ad6:	44 2d       	mov	r20, r4
    5ad8:	55 2d       	mov	r21, r5
    5ada:	66 2d       	mov	r22, r6
    5adc:	77 2d       	mov	r23, r7
    5ade:	88 2d       	mov	r24, r8
    5ae0:	99 2d       	mov	r25, r9
    5ae2:	7a d7       	rcall	.+3828   	; 0x69d8 <__udivdi3>
    5ae4:	22 2e       	mov	r2, r18
    5ae6:	33 2e       	mov	r3, r19
    5ae8:	44 2e       	mov	r4, r20
    5aea:	55 2e       	mov	r5, r21
    5aec:	66 2e       	mov	r6, r22
    5aee:	77 2e       	mov	r7, r23
    5af0:	88 2e       	mov	r8, r24
    5af2:	99 2e       	mov	r9, r25
    5af4:	a2 2c       	mov	r10, r2
    5af6:	b3 2c       	mov	r11, r3
    5af8:	c4 2c       	mov	r12, r4
    5afa:	d5 2c       	mov	r13, r5
    5afc:	e6 2c       	mov	r14, r6
    5afe:	f7 2c       	mov	r15, r7
    5b00:	08 2d       	mov	r16, r8
    5b02:	19 2d       	mov	r17, r9
    5b04:	2a 2d       	mov	r18, r10
    5b06:	3b 2d       	mov	r19, r11
    5b08:	4c 2d       	mov	r20, r12
    5b0a:	5d 2d       	mov	r21, r13
    5b0c:	6e 2d       	mov	r22, r14
    5b0e:	7f 2d       	mov	r23, r15
    5b10:	80 2f       	mov	r24, r16
    5b12:	91 2f       	mov	r25, r17
    5b14:	29 51       	subi	r18, 0x19	; 25
    5b16:	3c 4f       	sbci	r19, 0xFC	; 252
    5b18:	4f 4f       	sbci	r20, 0xFF	; 255
    5b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1c:	6f 4f       	sbci	r22, 0xFF	; 255
    5b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b20:	8f 4f       	sbci	r24, 0xFF	; 255
    5b22:	9f 4f       	sbci	r25, 0xFF	; 255
    5b24:	a2 2e       	mov	r10, r18
    5b26:	b3 2e       	mov	r11, r19
    5b28:	c4 2e       	mov	r12, r20
    5b2a:	d5 2e       	mov	r13, r21
    5b2c:	e6 2e       	mov	r14, r22
    5b2e:	f7 2e       	mov	r15, r23
    5b30:	08 2f       	mov	r16, r24
    5b32:	19 2f       	mov	r17, r25
    5b34:	2a 2d       	mov	r18, r10
    5b36:	3b 2d       	mov	r19, r11
    5b38:	4c 2d       	mov	r20, r12
    5b3a:	5d 2d       	mov	r21, r13
    5b3c:	6e 2d       	mov	r22, r14
    5b3e:	7f 2d       	mov	r23, r15
    5b40:	80 2f       	mov	r24, r16
    5b42:	91 2f       	mov	r25, r17
    5b44:	5f d6       	rcall	.+3262   	; 0x6804 <__floatundisf>
    5b46:	dc 01       	movw	r26, r24
    5b48:	cb 01       	movw	r24, r22
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	4a e7       	ldi	r20, 0x7A	; 122
    5b50:	54 e4       	ldi	r21, 0x44	; 68
    5b52:	bc 01       	movw	r22, r24
    5b54:	cd 01       	movw	r24, r26
    5b56:	b4 d5       	rcall	.+2920   	; 0x66c0 <__divsf3>
    5b58:	dc 01       	movw	r26, r24
    5b5a:	cb 01       	movw	r24, r22
    5b5c:	bc 01       	movw	r22, r24
    5b5e:	cd 01       	movw	r24, r26
    5b60:	1c d6       	rcall	.+3128   	; 0x679a <__fixunssfdi>
    5b62:	a2 2e       	mov	r10, r18
    5b64:	b3 2e       	mov	r11, r19
    5b66:	c4 2e       	mov	r12, r20
    5b68:	d5 2e       	mov	r13, r21
    5b6a:	e6 2e       	mov	r14, r22
    5b6c:	f7 2e       	mov	r15, r23
    5b6e:	08 2f       	mov	r16, r24
    5b70:	19 2f       	mov	r17, r25
    5b72:	d6 01       	movw	r26, r12
    5b74:	c5 01       	movw	r24, r10
    5b76:	bc 01       	movw	r22, r24
    5b78:	cd 01       	movw	r24, r26
    5b7a:	8f dd       	rcall	.-1250   	; 0x569a <__portable_avr_delay_cycles>
		
		const char* accXStr = (char*)malloc(83 * sizeof(char)) ;
    5b7c:	83 e5       	ldi	r24, 0x53	; 83
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	b2 d7       	rcall	.+3940   	; 0x6ae6 <malloc>
    5b82:	8f a3       	std	Y+39, r24	; 0x27
    5b84:	98 a7       	std	Y+40, r25	; 0x28
    5b86:	83 e5       	ldi	r24, 0x53	; 83
		const char* accYStr = (char*)malloc(83 * sizeof(char)) ;
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	ad d7       	rcall	.+3930   	; 0x6ae6 <malloc>
    5b8c:	89 a7       	std	Y+41, r24	; 0x29
    5b8e:	9a a7       	std	Y+42, r25	; 0x2a
    5b90:	83 e5       	ldi	r24, 0x53	; 83
    5b92:	90 e0       	ldi	r25, 0x00	; 0
		const char* accZStr = (char*)malloc(83 * sizeof(char)) ;
    5b94:	a8 d7       	rcall	.+3920   	; 0x6ae6 <malloc>
    5b96:	8b a7       	std	Y+43, r24	; 0x2b
    5b98:	9c a7       	std	Y+44, r25	; 0x2c
    5b9a:	0e 94 a4 01 	call	0x348	; 0x348 <get_acceleration_x>
		//get_acceleration(acel);
		//printf("acceleration is x = %i",acel[0]);
		//printf(", y=%i",acel[1]);
		//printf(", z=%i\n",acel[2]);
		
		int accX = get_acceleration_x();
    5b9e:	8d a7       	std	Y+45, r24	; 0x2d
    5ba0:	9e a7       	std	Y+46, r25	; 0x2e
    5ba2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <get_acceleration_y>
		int accY = get_acceleration_y();
    5ba6:	8f a7       	std	Y+47, r24	; 0x2f
    5ba8:	98 ab       	std	Y+48, r25	; 0x30
    5baa:	0e 94 46 08 	call	0x108c	; 0x108c <get_acceleration_z>
		int accZ = get_acceleration_z();
    5bae:	89 ab       	std	Y+49, r24	; 0x31
    5bb0:	9a ab       	std	Y+50, r25	; 0x32
    5bb2:	67 dd       	rcall	.-1330   	; 0x5682 <sysclk_get_cpu_hz>
    5bb4:	dc 01       	movw	r26, r24
		
		
		
		
		delay_ms(5);
    5bb6:	cb 01       	movw	r24, r22
    5bb8:	1c 01       	movw	r2, r24
    5bba:	2d 01       	movw	r4, r26
    5bbc:	61 2c       	mov	r6, r1
    5bbe:	71 2c       	mov	r7, r1
    5bc0:	43 01       	movw	r8, r6
    5bc2:	a2 2c       	mov	r10, r2
    5bc4:	b3 2c       	mov	r11, r3
    5bc6:	c4 2c       	mov	r12, r4
    5bc8:	d5 2c       	mov	r13, r5
    5bca:	e6 2c       	mov	r14, r6
    5bcc:	f7 2c       	mov	r15, r7
    5bce:	08 2d       	mov	r16, r8
    5bd0:	19 2d       	mov	r17, r9
    5bd2:	2a 2d       	mov	r18, r10
    5bd4:	3b 2d       	mov	r19, r11
    5bd6:	4c 2d       	mov	r20, r12
    5bd8:	5d 2d       	mov	r21, r13
    5bda:	6e 2d       	mov	r22, r14
    5bdc:	7f 2d       	mov	r23, r15
    5bde:	80 2f       	mov	r24, r16
    5be0:	91 2f       	mov	r25, r17
    5be2:	02 e0       	ldi	r16, 0x02	; 2
    5be4:	55 d7       	rcall	.+3754   	; 0x6a90 <__ashldi3>
    5be6:	2b 96       	adiw	r28, 0x0b	; 11
    5be8:	2f af       	std	Y+63, r18	; 0x3f
    5bea:	2b 97       	sbiw	r28, 0x0b	; 11
    5bec:	2c 96       	adiw	r28, 0x0c	; 12
    5bee:	3f af       	std	Y+63, r19	; 0x3f
    5bf0:	2c 97       	sbiw	r28, 0x0c	; 12
    5bf2:	2d 96       	adiw	r28, 0x0d	; 13
    5bf4:	4f af       	std	Y+63, r20	; 0x3f
    5bf6:	2d 97       	sbiw	r28, 0x0d	; 13
    5bf8:	2e 96       	adiw	r28, 0x0e	; 14
    5bfa:	5f af       	std	Y+63, r21	; 0x3f
    5bfc:	2e 97       	sbiw	r28, 0x0e	; 14
    5bfe:	2f 96       	adiw	r28, 0x0f	; 15
    5c00:	6f af       	std	Y+63, r22	; 0x3f
    5c02:	2f 97       	sbiw	r28, 0x0f	; 15
    5c04:	60 96       	adiw	r28, 0x10	; 16
    5c06:	7f af       	std	Y+63, r23	; 0x3f
    5c08:	60 97       	sbiw	r28, 0x10	; 16
    5c0a:	61 96       	adiw	r28, 0x11	; 17
    5c0c:	8f af       	std	Y+63, r24	; 0x3f
    5c0e:	61 97       	sbiw	r28, 0x11	; 17
    5c10:	62 96       	adiw	r28, 0x12	; 18
    5c12:	9f af       	std	Y+63, r25	; 0x3f
    5c14:	62 97       	sbiw	r28, 0x12	; 18
    5c16:	2b 96       	adiw	r28, 0x0b	; 11
    5c18:	af ac       	ldd	r10, Y+63	; 0x3f
    5c1a:	2b 97       	sbiw	r28, 0x0b	; 11
    5c1c:	2c 96       	adiw	r28, 0x0c	; 12
    5c1e:	bf ac       	ldd	r11, Y+63	; 0x3f
    5c20:	2c 97       	sbiw	r28, 0x0c	; 12
    5c22:	2d 96       	adiw	r28, 0x0d	; 13
    5c24:	cf ac       	ldd	r12, Y+63	; 0x3f
    5c26:	2d 97       	sbiw	r28, 0x0d	; 13
    5c28:	2e 96       	adiw	r28, 0x0e	; 14
    5c2a:	df ac       	ldd	r13, Y+63	; 0x3f
    5c2c:	2e 97       	sbiw	r28, 0x0e	; 14
    5c2e:	2f 96       	adiw	r28, 0x0f	; 15
    5c30:	ef ac       	ldd	r14, Y+63	; 0x3f
    5c32:	2f 97       	sbiw	r28, 0x0f	; 15
    5c34:	60 96       	adiw	r28, 0x10	; 16
    5c36:	ff ac       	ldd	r15, Y+63	; 0x3f
    5c38:	60 97       	sbiw	r28, 0x10	; 16
    5c3a:	61 96       	adiw	r28, 0x11	; 17
    5c3c:	0f ad       	ldd	r16, Y+63	; 0x3f
    5c3e:	61 97       	sbiw	r28, 0x11	; 17
    5c40:	62 96       	adiw	r28, 0x12	; 18
    5c42:	1f ad       	ldd	r17, Y+63	; 0x3f
    5c44:	62 97       	sbiw	r28, 0x12	; 18
    5c46:	2a 2d       	mov	r18, r10
    5c48:	3b 2d       	mov	r19, r11
    5c4a:	4c 2d       	mov	r20, r12
    5c4c:	5d 2d       	mov	r21, r13
    5c4e:	6e 2d       	mov	r22, r14
    5c50:	7f 2d       	mov	r23, r15
    5c52:	80 2f       	mov	r24, r16
    5c54:	91 2f       	mov	r25, r17
    5c56:	a2 2c       	mov	r10, r2
    5c58:	b3 2c       	mov	r11, r3
    5c5a:	c4 2c       	mov	r12, r4
    5c5c:	d5 2c       	mov	r13, r5
    5c5e:	e6 2c       	mov	r14, r6
    5c60:	f7 2c       	mov	r15, r7
    5c62:	08 2d       	mov	r16, r8
    5c64:	19 2d       	mov	r17, r9
    5c66:	2d d7       	rcall	.+3674   	; 0x6ac2 <__adddi3>
    5c68:	22 2e       	mov	r2, r18
    5c6a:	33 2e       	mov	r3, r19
    5c6c:	44 2e       	mov	r4, r20
    5c6e:	55 2e       	mov	r5, r21
    5c70:	66 2e       	mov	r6, r22
    5c72:	77 2e       	mov	r7, r23
    5c74:	88 2e       	mov	r8, r24
    5c76:	99 2e       	mov	r9, r25
    5c78:	0f 2e       	mov	r0, r31
    5c7a:	f6 e0       	ldi	r31, 0x06	; 6
    5c7c:	af 2e       	mov	r10, r31
    5c7e:	f0 2d       	mov	r31, r0
    5c80:	b1 2c       	mov	r11, r1
    5c82:	c1 2c       	mov	r12, r1
    5c84:	d1 2c       	mov	r13, r1
    5c86:	e1 2c       	mov	r14, r1
    5c88:	f1 2c       	mov	r15, r1
    5c8a:	00 e0       	ldi	r16, 0x00	; 0
    5c8c:	10 e0       	ldi	r17, 0x00	; 0
    5c8e:	22 2d       	mov	r18, r2
    5c90:	33 2d       	mov	r19, r3
    5c92:	44 2d       	mov	r20, r4
    5c94:	55 2d       	mov	r21, r5
    5c96:	66 2d       	mov	r22, r6
    5c98:	77 2d       	mov	r23, r7
    5c9a:	88 2d       	mov	r24, r8
    5c9c:	99 2d       	mov	r25, r9
    5c9e:	9c d6       	rcall	.+3384   	; 0x69d8 <__udivdi3>
    5ca0:	22 2e       	mov	r2, r18
    5ca2:	33 2e       	mov	r3, r19
    5ca4:	44 2e       	mov	r4, r20
    5ca6:	55 2e       	mov	r5, r21
    5ca8:	66 2e       	mov	r6, r22
    5caa:	77 2e       	mov	r7, r23
    5cac:	88 2e       	mov	r8, r24
    5cae:	99 2e       	mov	r9, r25
    5cb0:	a2 2c       	mov	r10, r2
    5cb2:	b3 2c       	mov	r11, r3
    5cb4:	c4 2c       	mov	r12, r4
    5cb6:	d5 2c       	mov	r13, r5
    5cb8:	e6 2c       	mov	r14, r6
    5cba:	f7 2c       	mov	r15, r7
    5cbc:	08 2d       	mov	r16, r8
    5cbe:	19 2d       	mov	r17, r9
    5cc0:	2a 2d       	mov	r18, r10
    5cc2:	3b 2d       	mov	r19, r11
    5cc4:	4c 2d       	mov	r20, r12
    5cc6:	5d 2d       	mov	r21, r13
    5cc8:	6e 2d       	mov	r22, r14
    5cca:	7f 2d       	mov	r23, r15
    5ccc:	80 2f       	mov	r24, r16
    5cce:	91 2f       	mov	r25, r17
    5cd0:	29 51       	subi	r18, 0x19	; 25
    5cd2:	3c 4f       	sbci	r19, 0xFC	; 252
    5cd4:	4f 4f       	sbci	r20, 0xFF	; 255
    5cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd8:	6f 4f       	sbci	r22, 0xFF	; 255
    5cda:	7f 4f       	sbci	r23, 0xFF	; 255
    5cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    5cde:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce0:	a2 2e       	mov	r10, r18
    5ce2:	b3 2e       	mov	r11, r19
    5ce4:	c4 2e       	mov	r12, r20
    5ce6:	d5 2e       	mov	r13, r21
    5ce8:	e6 2e       	mov	r14, r22
    5cea:	f7 2e       	mov	r15, r23
    5cec:	08 2f       	mov	r16, r24
    5cee:	19 2f       	mov	r17, r25
    5cf0:	2a 2d       	mov	r18, r10
    5cf2:	3b 2d       	mov	r19, r11
    5cf4:	4c 2d       	mov	r20, r12
    5cf6:	5d 2d       	mov	r21, r13
    5cf8:	6e 2d       	mov	r22, r14
    5cfa:	7f 2d       	mov	r23, r15
    5cfc:	80 2f       	mov	r24, r16
    5cfe:	91 2f       	mov	r25, r17
    5d00:	81 d5       	rcall	.+2818   	; 0x6804 <__floatundisf>
    5d02:	dc 01       	movw	r26, r24
    5d04:	cb 01       	movw	r24, r22
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	30 e0       	ldi	r19, 0x00	; 0
    5d0a:	4a e7       	ldi	r20, 0x7A	; 122
    5d0c:	54 e4       	ldi	r21, 0x44	; 68
    5d0e:	bc 01       	movw	r22, r24
    5d10:	cd 01       	movw	r24, r26
    5d12:	d6 d4       	rcall	.+2476   	; 0x66c0 <__divsf3>
    5d14:	dc 01       	movw	r26, r24
    5d16:	cb 01       	movw	r24, r22
    5d18:	bc 01       	movw	r22, r24
    5d1a:	cd 01       	movw	r24, r26
    5d1c:	3e d5       	rcall	.+2684   	; 0x679a <__fixunssfdi>
    5d1e:	a2 2e       	mov	r10, r18
    5d20:	b3 2e       	mov	r11, r19
    5d22:	c4 2e       	mov	r12, r20
    5d24:	d5 2e       	mov	r13, r21
    5d26:	e6 2e       	mov	r14, r22
    5d28:	f7 2e       	mov	r15, r23
    5d2a:	08 2f       	mov	r16, r24
    5d2c:	19 2f       	mov	r17, r25
    5d2e:	d6 01       	movw	r26, r12
    5d30:	c5 01       	movw	r24, r10
    5d32:	bc 01       	movw	r22, r24
    5d34:	cd 01       	movw	r24, r26
    5d36:	b1 dc       	rcall	.-1694   	; 0x569a <__portable_avr_delay_cycles>
    5d38:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d3a:	9e a5       	ldd	r25, Y+46	; 0x2e
		if(accX>=0) sprintf(accXStr,"acelx %i.%i\n",abs(accX/100), abs(accX%100));
    5d3c:	99 23       	and	r25, r25
    5d3e:	9c f1       	brlt	.+102    	; 0x5da6 <main+0x686>
    5d40:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d42:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d44:	24 e6       	ldi	r18, 0x64	; 100
    5d46:	30 e0       	ldi	r19, 0x00	; 0
    5d48:	b9 01       	movw	r22, r18
    5d4a:	0f d6       	rcall	.+3102   	; 0x696a <__divmodhi4>
    5d4c:	99 23       	and	r25, r25
    5d4e:	1c f4       	brge	.+6      	; 0x5d56 <main+0x636>
    5d50:	91 95       	neg	r25
    5d52:	81 95       	neg	r24
    5d54:	91 09       	sbc	r25, r1
    5d56:	fc 01       	movw	r30, r24
    5d58:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d5c:	24 e6       	ldi	r18, 0x64	; 100
    5d5e:	30 e0       	ldi	r19, 0x00	; 0
    5d60:	b9 01       	movw	r22, r18
    5d62:	03 d6       	rcall	.+3078   	; 0x696a <__divmodhi4>
    5d64:	cb 01       	movw	r24, r22
    5d66:	99 23       	and	r25, r25
    5d68:	1c f4       	brge	.+6      	; 0x5d70 <main+0x650>
    5d6a:	91 95       	neg	r25
    5d6c:	81 95       	neg	r24
    5d6e:	91 09       	sbc	r25, r1
    5d70:	2f 2f       	mov	r18, r31
    5d72:	2f 93       	push	r18
    5d74:	2e 2f       	mov	r18, r30
    5d76:	2f 93       	push	r18
    5d78:	29 2f       	mov	r18, r25
    5d7a:	2f 93       	push	r18
    5d7c:	8f 93       	push	r24
    5d7e:	83 e3       	ldi	r24, 0x33	; 51
    5d80:	90 e2       	ldi	r25, 0x20	; 32
    5d82:	89 2f       	mov	r24, r25
    5d84:	8f 93       	push	r24
    5d86:	83 e3       	ldi	r24, 0x33	; 51
    5d88:	90 e2       	ldi	r25, 0x20	; 32
    5d8a:	8f 93       	push	r24
    5d8c:	88 a5       	ldd	r24, Y+40	; 0x28
    5d8e:	8f 93       	push	r24
    5d90:	8f a1       	ldd	r24, Y+39	; 0x27
    5d92:	8f 93       	push	r24
    5d94:	0e 94 2a 37 	call	0x6e54	; 0x6e54 <sprintf>
    5d98:	2d b7       	in	r18, 0x3d	; 61
    5d9a:	3e b7       	in	r19, 0x3e	; 62
    5d9c:	28 5f       	subi	r18, 0xF8	; 248
    5d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	de bf       	out	0x3e, r29	; 62
    5da4:	32 c0       	rjmp	.+100    	; 0x5e0a <main+0x6ea>
    5da6:	8d a5       	ldd	r24, Y+45	; 0x2d
    5da8:	9e a5       	ldd	r25, Y+46	; 0x2e
		else sprintf(accXStr,"acelx -%i.%i\n",abs(accX/100), abs(accX%100));
    5daa:	24 e6       	ldi	r18, 0x64	; 100
    5dac:	30 e0       	ldi	r19, 0x00	; 0
    5dae:	b9 01       	movw	r22, r18
    5db0:	dc d5       	rcall	.+3000   	; 0x696a <__divmodhi4>
    5db2:	99 23       	and	r25, r25
    5db4:	1c f4       	brge	.+6      	; 0x5dbc <main+0x69c>
    5db6:	91 95       	neg	r25
    5db8:	81 95       	neg	r24
    5dba:	91 09       	sbc	r25, r1
    5dbc:	fc 01       	movw	r30, r24
    5dbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    5dc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    5dc2:	24 e6       	ldi	r18, 0x64	; 100
    5dc4:	30 e0       	ldi	r19, 0x00	; 0
    5dc6:	b9 01       	movw	r22, r18
    5dc8:	d0 d5       	rcall	.+2976   	; 0x696a <__divmodhi4>
    5dca:	cb 01       	movw	r24, r22
    5dcc:	99 23       	and	r25, r25
    5dce:	1c f4       	brge	.+6      	; 0x5dd6 <main+0x6b6>
    5dd0:	91 95       	neg	r25
    5dd2:	81 95       	neg	r24
    5dd4:	91 09       	sbc	r25, r1
    5dd6:	2f 2f       	mov	r18, r31
    5dd8:	2f 93       	push	r18
    5dda:	2e 2f       	mov	r18, r30
    5ddc:	2f 93       	push	r18
    5dde:	29 2f       	mov	r18, r25
    5de0:	2f 93       	push	r18
    5de2:	8f 93       	push	r24
    5de4:	80 e4       	ldi	r24, 0x40	; 64
    5de6:	90 e2       	ldi	r25, 0x20	; 32
    5de8:	89 2f       	mov	r24, r25
    5dea:	8f 93       	push	r24
    5dec:	80 e4       	ldi	r24, 0x40	; 64
    5dee:	90 e2       	ldi	r25, 0x20	; 32
    5df0:	8f 93       	push	r24
    5df2:	88 a5       	ldd	r24, Y+40	; 0x28
    5df4:	8f 93       	push	r24
    5df6:	8f a1       	ldd	r24, Y+39	; 0x27
    5df8:	8f 93       	push	r24
    5dfa:	0e 94 2a 37 	call	0x6e54	; 0x6e54 <sprintf>
    5dfe:	4d b7       	in	r20, 0x3d	; 61
    5e00:	5e b7       	in	r21, 0x3e	; 62
    5e02:	48 5f       	subi	r20, 0xF8	; 248
    5e04:	5f 4f       	sbci	r21, 0xFF	; 255
    5e06:	cd bf       	out	0x3d, r28	; 61
    5e08:	de bf       	out	0x3e, r29	; 62
    5e0a:	3b dc       	rcall	.-1930   	; 0x5682 <sysclk_get_cpu_hz>
    5e0c:	dc 01       	movw	r26, r24
		delay_ms(5);
    5e0e:	cb 01       	movw	r24, r22
    5e10:	1c 01       	movw	r2, r24
    5e12:	2d 01       	movw	r4, r26
    5e14:	61 2c       	mov	r6, r1
    5e16:	71 2c       	mov	r7, r1
    5e18:	43 01       	movw	r8, r6
    5e1a:	a2 2c       	mov	r10, r2
    5e1c:	b3 2c       	mov	r11, r3
    5e1e:	c4 2c       	mov	r12, r4
    5e20:	d5 2c       	mov	r13, r5
    5e22:	e6 2c       	mov	r14, r6
    5e24:	f7 2c       	mov	r15, r7
    5e26:	08 2d       	mov	r16, r8
    5e28:	19 2d       	mov	r17, r9
    5e2a:	2a 2d       	mov	r18, r10
    5e2c:	3b 2d       	mov	r19, r11
    5e2e:	4c 2d       	mov	r20, r12
    5e30:	5d 2d       	mov	r21, r13
    5e32:	6e 2d       	mov	r22, r14
    5e34:	7f 2d       	mov	r23, r15
    5e36:	80 2f       	mov	r24, r16
    5e38:	91 2f       	mov	r25, r17
    5e3a:	02 e0       	ldi	r16, 0x02	; 2
    5e3c:	29 d6       	rcall	.+3154   	; 0x6a90 <__ashldi3>
    5e3e:	63 96       	adiw	r28, 0x13	; 19
    5e40:	2f af       	std	Y+63, r18	; 0x3f
    5e42:	63 97       	sbiw	r28, 0x13	; 19
    5e44:	64 96       	adiw	r28, 0x14	; 20
    5e46:	3f af       	std	Y+63, r19	; 0x3f
    5e48:	64 97       	sbiw	r28, 0x14	; 20
    5e4a:	65 96       	adiw	r28, 0x15	; 21
    5e4c:	4f af       	std	Y+63, r20	; 0x3f
    5e4e:	65 97       	sbiw	r28, 0x15	; 21
    5e50:	66 96       	adiw	r28, 0x16	; 22
    5e52:	5f af       	std	Y+63, r21	; 0x3f
    5e54:	66 97       	sbiw	r28, 0x16	; 22
    5e56:	67 96       	adiw	r28, 0x17	; 23
    5e58:	6f af       	std	Y+63, r22	; 0x3f
    5e5a:	67 97       	sbiw	r28, 0x17	; 23
    5e5c:	68 96       	adiw	r28, 0x18	; 24
    5e5e:	7f af       	std	Y+63, r23	; 0x3f
    5e60:	68 97       	sbiw	r28, 0x18	; 24
    5e62:	69 96       	adiw	r28, 0x19	; 25
    5e64:	8f af       	std	Y+63, r24	; 0x3f
    5e66:	69 97       	sbiw	r28, 0x19	; 25
    5e68:	6a 96       	adiw	r28, 0x1a	; 26
    5e6a:	9f af       	std	Y+63, r25	; 0x3f
    5e6c:	6a 97       	sbiw	r28, 0x1a	; 26
    5e6e:	63 96       	adiw	r28, 0x13	; 19
    5e70:	af ac       	ldd	r10, Y+63	; 0x3f
    5e72:	63 97       	sbiw	r28, 0x13	; 19
    5e74:	64 96       	adiw	r28, 0x14	; 20
    5e76:	bf ac       	ldd	r11, Y+63	; 0x3f
    5e78:	64 97       	sbiw	r28, 0x14	; 20
    5e7a:	65 96       	adiw	r28, 0x15	; 21
    5e7c:	cf ac       	ldd	r12, Y+63	; 0x3f
    5e7e:	65 97       	sbiw	r28, 0x15	; 21
    5e80:	66 96       	adiw	r28, 0x16	; 22
    5e82:	df ac       	ldd	r13, Y+63	; 0x3f
    5e84:	66 97       	sbiw	r28, 0x16	; 22
    5e86:	67 96       	adiw	r28, 0x17	; 23
    5e88:	ef ac       	ldd	r14, Y+63	; 0x3f
    5e8a:	67 97       	sbiw	r28, 0x17	; 23
    5e8c:	68 96       	adiw	r28, 0x18	; 24
    5e8e:	ff ac       	ldd	r15, Y+63	; 0x3f
    5e90:	68 97       	sbiw	r28, 0x18	; 24
    5e92:	69 96       	adiw	r28, 0x19	; 25
    5e94:	0f ad       	ldd	r16, Y+63	; 0x3f
    5e96:	69 97       	sbiw	r28, 0x19	; 25
    5e98:	6a 96       	adiw	r28, 0x1a	; 26
    5e9a:	1f ad       	ldd	r17, Y+63	; 0x3f
    5e9c:	6a 97       	sbiw	r28, 0x1a	; 26
    5e9e:	2a 2d       	mov	r18, r10
    5ea0:	3b 2d       	mov	r19, r11
    5ea2:	4c 2d       	mov	r20, r12
    5ea4:	5d 2d       	mov	r21, r13
    5ea6:	6e 2d       	mov	r22, r14
    5ea8:	7f 2d       	mov	r23, r15
    5eaa:	80 2f       	mov	r24, r16
    5eac:	91 2f       	mov	r25, r17
    5eae:	a2 2c       	mov	r10, r2
    5eb0:	b3 2c       	mov	r11, r3
    5eb2:	c4 2c       	mov	r12, r4
    5eb4:	d5 2c       	mov	r13, r5
    5eb6:	e6 2c       	mov	r14, r6
    5eb8:	f7 2c       	mov	r15, r7
    5eba:	08 2d       	mov	r16, r8
    5ebc:	19 2d       	mov	r17, r9
    5ebe:	01 d6       	rcall	.+3074   	; 0x6ac2 <__adddi3>
    5ec0:	22 2e       	mov	r2, r18
    5ec2:	33 2e       	mov	r3, r19
    5ec4:	44 2e       	mov	r4, r20
    5ec6:	55 2e       	mov	r5, r21
    5ec8:	66 2e       	mov	r6, r22
    5eca:	77 2e       	mov	r7, r23
    5ecc:	88 2e       	mov	r8, r24
    5ece:	99 2e       	mov	r9, r25
    5ed0:	0f 2e       	mov	r0, r31
    5ed2:	f6 e0       	ldi	r31, 0x06	; 6
    5ed4:	af 2e       	mov	r10, r31
    5ed6:	f0 2d       	mov	r31, r0
    5ed8:	b1 2c       	mov	r11, r1
    5eda:	c1 2c       	mov	r12, r1
    5edc:	d1 2c       	mov	r13, r1
    5ede:	e1 2c       	mov	r14, r1
    5ee0:	f1 2c       	mov	r15, r1
    5ee2:	00 e0       	ldi	r16, 0x00	; 0
    5ee4:	10 e0       	ldi	r17, 0x00	; 0
    5ee6:	22 2d       	mov	r18, r2
    5ee8:	33 2d       	mov	r19, r3
    5eea:	44 2d       	mov	r20, r4
    5eec:	55 2d       	mov	r21, r5
    5eee:	66 2d       	mov	r22, r6
    5ef0:	77 2d       	mov	r23, r7
    5ef2:	88 2d       	mov	r24, r8
    5ef4:	99 2d       	mov	r25, r9
    5ef6:	70 d5       	rcall	.+2784   	; 0x69d8 <__udivdi3>
    5ef8:	22 2e       	mov	r2, r18
    5efa:	33 2e       	mov	r3, r19
    5efc:	44 2e       	mov	r4, r20
    5efe:	55 2e       	mov	r5, r21
    5f00:	66 2e       	mov	r6, r22
    5f02:	77 2e       	mov	r7, r23
    5f04:	88 2e       	mov	r8, r24
    5f06:	99 2e       	mov	r9, r25
    5f08:	a2 2c       	mov	r10, r2
    5f0a:	b3 2c       	mov	r11, r3
    5f0c:	c4 2c       	mov	r12, r4
    5f0e:	d5 2c       	mov	r13, r5
    5f10:	e6 2c       	mov	r14, r6
    5f12:	f7 2c       	mov	r15, r7
    5f14:	08 2d       	mov	r16, r8
    5f16:	19 2d       	mov	r17, r9
    5f18:	2a 2d       	mov	r18, r10
    5f1a:	3b 2d       	mov	r19, r11
    5f1c:	4c 2d       	mov	r20, r12
    5f1e:	5d 2d       	mov	r21, r13
    5f20:	6e 2d       	mov	r22, r14
    5f22:	7f 2d       	mov	r23, r15
    5f24:	80 2f       	mov	r24, r16
    5f26:	91 2f       	mov	r25, r17
    5f28:	29 51       	subi	r18, 0x19	; 25
    5f2a:	3c 4f       	sbci	r19, 0xFC	; 252
    5f2c:	4f 4f       	sbci	r20, 0xFF	; 255
    5f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f30:	6f 4f       	sbci	r22, 0xFF	; 255
    5f32:	7f 4f       	sbci	r23, 0xFF	; 255
    5f34:	8f 4f       	sbci	r24, 0xFF	; 255
    5f36:	9f 4f       	sbci	r25, 0xFF	; 255
    5f38:	a2 2e       	mov	r10, r18
    5f3a:	b3 2e       	mov	r11, r19
    5f3c:	c4 2e       	mov	r12, r20
    5f3e:	d5 2e       	mov	r13, r21
    5f40:	e6 2e       	mov	r14, r22
    5f42:	f7 2e       	mov	r15, r23
    5f44:	08 2f       	mov	r16, r24
    5f46:	19 2f       	mov	r17, r25
    5f48:	2a 2d       	mov	r18, r10
    5f4a:	3b 2d       	mov	r19, r11
    5f4c:	4c 2d       	mov	r20, r12
    5f4e:	5d 2d       	mov	r21, r13
    5f50:	6e 2d       	mov	r22, r14
    5f52:	7f 2d       	mov	r23, r15
    5f54:	80 2f       	mov	r24, r16
    5f56:	91 2f       	mov	r25, r17
    5f58:	55 d4       	rcall	.+2218   	; 0x6804 <__floatundisf>
    5f5a:	dc 01       	movw	r26, r24
    5f5c:	cb 01       	movw	r24, r22
    5f5e:	20 e0       	ldi	r18, 0x00	; 0
    5f60:	30 e0       	ldi	r19, 0x00	; 0
    5f62:	4a e7       	ldi	r20, 0x7A	; 122
    5f64:	54 e4       	ldi	r21, 0x44	; 68
    5f66:	bc 01       	movw	r22, r24
    5f68:	cd 01       	movw	r24, r26
    5f6a:	aa d3       	rcall	.+1876   	; 0x66c0 <__divsf3>
    5f6c:	dc 01       	movw	r26, r24
    5f6e:	cb 01       	movw	r24, r22
    5f70:	bc 01       	movw	r22, r24
    5f72:	cd 01       	movw	r24, r26
    5f74:	12 d4       	rcall	.+2084   	; 0x679a <__fixunssfdi>
    5f76:	a2 2e       	mov	r10, r18
    5f78:	b3 2e       	mov	r11, r19
    5f7a:	c4 2e       	mov	r12, r20
    5f7c:	d5 2e       	mov	r13, r21
    5f7e:	e6 2e       	mov	r14, r22
    5f80:	f7 2e       	mov	r15, r23
    5f82:	08 2f       	mov	r16, r24
    5f84:	19 2f       	mov	r17, r25
    5f86:	d6 01       	movw	r26, r12
    5f88:	c5 01       	movw	r24, r10
    5f8a:	bc 01       	movw	r22, r24
    5f8c:	cd 01       	movw	r24, r26
    5f8e:	85 db       	rcall	.-2294   	; 0x569a <__portable_avr_delay_cycles>
    5f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f92:	98 a9       	ldd	r25, Y+48	; 0x30
		if(accY>=0)sprintf(accYStr,"acely %i.%i\n",abs(accY/100), abs(accY%100) );
    5f94:	99 23       	and	r25, r25
    5f96:	94 f1       	brlt	.+100    	; 0x5ffc <main+0x8dc>
    5f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    5f9c:	24 e6       	ldi	r18, 0x64	; 100
    5f9e:	30 e0       	ldi	r19, 0x00	; 0
    5fa0:	b9 01       	movw	r22, r18
    5fa2:	e3 d4       	rcall	.+2502   	; 0x696a <__divmodhi4>
    5fa4:	99 23       	and	r25, r25
    5fa6:	1c f4       	brge	.+6      	; 0x5fae <main+0x88e>
    5fa8:	91 95       	neg	r25
    5faa:	81 95       	neg	r24
    5fac:	91 09       	sbc	r25, r1
    5fae:	fc 01       	movw	r30, r24
    5fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    5fb4:	24 e6       	ldi	r18, 0x64	; 100
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	b9 01       	movw	r22, r18
    5fba:	d7 d4       	rcall	.+2478   	; 0x696a <__divmodhi4>
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	99 23       	and	r25, r25
    5fc0:	1c f4       	brge	.+6      	; 0x5fc8 <main+0x8a8>
    5fc2:	91 95       	neg	r25
    5fc4:	81 95       	neg	r24
    5fc6:	91 09       	sbc	r25, r1
    5fc8:	2f 2f       	mov	r18, r31
    5fca:	2f 93       	push	r18
    5fcc:	2e 2f       	mov	r18, r30
    5fce:	2f 93       	push	r18
    5fd0:	29 2f       	mov	r18, r25
    5fd2:	2f 93       	push	r18
    5fd4:	8f 93       	push	r24
    5fd6:	8e e4       	ldi	r24, 0x4E	; 78
    5fd8:	90 e2       	ldi	r25, 0x20	; 32
    5fda:	89 2f       	mov	r24, r25
    5fdc:	8f 93       	push	r24
    5fde:	8e e4       	ldi	r24, 0x4E	; 78
    5fe0:	90 e2       	ldi	r25, 0x20	; 32
    5fe2:	8f 93       	push	r24
    5fe4:	8a a5       	ldd	r24, Y+42	; 0x2a
    5fe6:	8f 93       	push	r24
    5fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    5fea:	8f 93       	push	r24
    5fec:	33 d7       	rcall	.+3686   	; 0x6e54 <sprintf>
    5fee:	6d b7       	in	r22, 0x3d	; 61
    5ff0:	7e b7       	in	r23, 0x3e	; 62
    5ff2:	68 5f       	subi	r22, 0xF8	; 248
    5ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff6:	cd bf       	out	0x3d, r28	; 61
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	30 c0       	rjmp	.+96     	; 0x605c <main+0x93c>
    5ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ffe:	98 a9       	ldd	r25, Y+48	; 0x30
		else sprintf(accYStr,"acely -%i.%i\n",abs(accY/100), abs(accY%100) );
    6000:	24 e6       	ldi	r18, 0x64	; 100
    6002:	30 e0       	ldi	r19, 0x00	; 0
    6004:	b9 01       	movw	r22, r18
    6006:	b1 d4       	rcall	.+2402   	; 0x696a <__divmodhi4>
    6008:	99 23       	and	r25, r25
    600a:	1c f4       	brge	.+6      	; 0x6012 <main+0x8f2>
    600c:	91 95       	neg	r25
    600e:	81 95       	neg	r24
    6010:	91 09       	sbc	r25, r1
    6012:	fc 01       	movw	r30, r24
    6014:	8f a5       	ldd	r24, Y+47	; 0x2f
    6016:	98 a9       	ldd	r25, Y+48	; 0x30
    6018:	24 e6       	ldi	r18, 0x64	; 100
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	b9 01       	movw	r22, r18
    601e:	a5 d4       	rcall	.+2378   	; 0x696a <__divmodhi4>
    6020:	cb 01       	movw	r24, r22
    6022:	99 23       	and	r25, r25
    6024:	1c f4       	brge	.+6      	; 0x602c <main+0x90c>
    6026:	91 95       	neg	r25
    6028:	81 95       	neg	r24
    602a:	91 09       	sbc	r25, r1
    602c:	2f 2f       	mov	r18, r31
    602e:	2f 93       	push	r18
    6030:	2e 2f       	mov	r18, r30
    6032:	2f 93       	push	r18
    6034:	29 2f       	mov	r18, r25
    6036:	2f 93       	push	r18
    6038:	8f 93       	push	r24
    603a:	8b e5       	ldi	r24, 0x5B	; 91
    603c:	90 e2       	ldi	r25, 0x20	; 32
    603e:	89 2f       	mov	r24, r25
    6040:	8f 93       	push	r24
    6042:	8b e5       	ldi	r24, 0x5B	; 91
    6044:	90 e2       	ldi	r25, 0x20	; 32
    6046:	8f 93       	push	r24
    6048:	8a a5       	ldd	r24, Y+42	; 0x2a
    604a:	8f 93       	push	r24
    604c:	89 a5       	ldd	r24, Y+41	; 0x29
    604e:	8f 93       	push	r24
    6050:	01 d7       	rcall	.+3586   	; 0x6e54 <sprintf>
    6052:	8d b7       	in	r24, 0x3d	; 61
    6054:	9e b7       	in	r25, 0x3e	; 62
    6056:	08 96       	adiw	r24, 0x08	; 8
    6058:	cd bf       	out	0x3d, r28	; 61
    605a:	de bf       	out	0x3e, r29	; 62
    605c:	12 db       	rcall	.-2524   	; 0x5682 <sysclk_get_cpu_hz>
    605e:	dc 01       	movw	r26, r24
		delay_ms(5);
    6060:	cb 01       	movw	r24, r22
    6062:	1c 01       	movw	r2, r24
    6064:	2d 01       	movw	r4, r26
    6066:	61 2c       	mov	r6, r1
    6068:	71 2c       	mov	r7, r1
    606a:	43 01       	movw	r8, r6
    606c:	a2 2c       	mov	r10, r2
    606e:	b3 2c       	mov	r11, r3
    6070:	c4 2c       	mov	r12, r4
    6072:	d5 2c       	mov	r13, r5
    6074:	e6 2c       	mov	r14, r6
    6076:	f7 2c       	mov	r15, r7
    6078:	08 2d       	mov	r16, r8
    607a:	19 2d       	mov	r17, r9
    607c:	2a 2d       	mov	r18, r10
    607e:	3b 2d       	mov	r19, r11
    6080:	4c 2d       	mov	r20, r12
    6082:	5d 2d       	mov	r21, r13
    6084:	6e 2d       	mov	r22, r14
    6086:	7f 2d       	mov	r23, r15
    6088:	80 2f       	mov	r24, r16
    608a:	91 2f       	mov	r25, r17
    608c:	02 e0       	ldi	r16, 0x02	; 2
    608e:	00 d5       	rcall	.+2560   	; 0x6a90 <__ashldi3>
    6090:	6b 96       	adiw	r28, 0x1b	; 27
    6092:	2f af       	std	Y+63, r18	; 0x3f
    6094:	6b 97       	sbiw	r28, 0x1b	; 27
    6096:	6c 96       	adiw	r28, 0x1c	; 28
    6098:	3f af       	std	Y+63, r19	; 0x3f
    609a:	6c 97       	sbiw	r28, 0x1c	; 28
    609c:	6d 96       	adiw	r28, 0x1d	; 29
    609e:	4f af       	std	Y+63, r20	; 0x3f
    60a0:	6d 97       	sbiw	r28, 0x1d	; 29
    60a2:	6e 96       	adiw	r28, 0x1e	; 30
    60a4:	5f af       	std	Y+63, r21	; 0x3f
    60a6:	6e 97       	sbiw	r28, 0x1e	; 30
    60a8:	6f 96       	adiw	r28, 0x1f	; 31
    60aa:	6f af       	std	Y+63, r22	; 0x3f
    60ac:	6f 97       	sbiw	r28, 0x1f	; 31
    60ae:	a0 96       	adiw	r28, 0x20	; 32
    60b0:	7f af       	std	Y+63, r23	; 0x3f
    60b2:	a0 97       	sbiw	r28, 0x20	; 32
    60b4:	a1 96       	adiw	r28, 0x21	; 33
    60b6:	8f af       	std	Y+63, r24	; 0x3f
    60b8:	a1 97       	sbiw	r28, 0x21	; 33
    60ba:	a2 96       	adiw	r28, 0x22	; 34
    60bc:	9f af       	std	Y+63, r25	; 0x3f
    60be:	a2 97       	sbiw	r28, 0x22	; 34
    60c0:	6b 96       	adiw	r28, 0x1b	; 27
    60c2:	af ac       	ldd	r10, Y+63	; 0x3f
    60c4:	6b 97       	sbiw	r28, 0x1b	; 27
    60c6:	6c 96       	adiw	r28, 0x1c	; 28
    60c8:	bf ac       	ldd	r11, Y+63	; 0x3f
    60ca:	6c 97       	sbiw	r28, 0x1c	; 28
    60cc:	6d 96       	adiw	r28, 0x1d	; 29
    60ce:	cf ac       	ldd	r12, Y+63	; 0x3f
    60d0:	6d 97       	sbiw	r28, 0x1d	; 29
    60d2:	6e 96       	adiw	r28, 0x1e	; 30
    60d4:	df ac       	ldd	r13, Y+63	; 0x3f
    60d6:	6e 97       	sbiw	r28, 0x1e	; 30
    60d8:	6f 96       	adiw	r28, 0x1f	; 31
    60da:	ef ac       	ldd	r14, Y+63	; 0x3f
    60dc:	6f 97       	sbiw	r28, 0x1f	; 31
    60de:	a0 96       	adiw	r28, 0x20	; 32
    60e0:	ff ac       	ldd	r15, Y+63	; 0x3f
    60e2:	a0 97       	sbiw	r28, 0x20	; 32
    60e4:	a1 96       	adiw	r28, 0x21	; 33
    60e6:	0f ad       	ldd	r16, Y+63	; 0x3f
    60e8:	a1 97       	sbiw	r28, 0x21	; 33
    60ea:	a2 96       	adiw	r28, 0x22	; 34
    60ec:	1f ad       	ldd	r17, Y+63	; 0x3f
    60ee:	a2 97       	sbiw	r28, 0x22	; 34
    60f0:	2a 2d       	mov	r18, r10
    60f2:	3b 2d       	mov	r19, r11
    60f4:	4c 2d       	mov	r20, r12
    60f6:	5d 2d       	mov	r21, r13
    60f8:	6e 2d       	mov	r22, r14
    60fa:	7f 2d       	mov	r23, r15
    60fc:	80 2f       	mov	r24, r16
    60fe:	91 2f       	mov	r25, r17
    6100:	a2 2c       	mov	r10, r2
    6102:	b3 2c       	mov	r11, r3
    6104:	c4 2c       	mov	r12, r4
    6106:	d5 2c       	mov	r13, r5
    6108:	e6 2c       	mov	r14, r6
    610a:	f7 2c       	mov	r15, r7
    610c:	08 2d       	mov	r16, r8
    610e:	19 2d       	mov	r17, r9
    6110:	d8 d4       	rcall	.+2480   	; 0x6ac2 <__adddi3>
    6112:	22 2e       	mov	r2, r18
    6114:	33 2e       	mov	r3, r19
    6116:	44 2e       	mov	r4, r20
    6118:	55 2e       	mov	r5, r21
    611a:	66 2e       	mov	r6, r22
    611c:	77 2e       	mov	r7, r23
    611e:	88 2e       	mov	r8, r24
    6120:	99 2e       	mov	r9, r25
    6122:	0f 2e       	mov	r0, r31
    6124:	f6 e0       	ldi	r31, 0x06	; 6
    6126:	af 2e       	mov	r10, r31
    6128:	f0 2d       	mov	r31, r0
    612a:	b1 2c       	mov	r11, r1
    612c:	c1 2c       	mov	r12, r1
    612e:	d1 2c       	mov	r13, r1
    6130:	e1 2c       	mov	r14, r1
    6132:	f1 2c       	mov	r15, r1
    6134:	00 e0       	ldi	r16, 0x00	; 0
    6136:	10 e0       	ldi	r17, 0x00	; 0
    6138:	22 2d       	mov	r18, r2
    613a:	33 2d       	mov	r19, r3
    613c:	44 2d       	mov	r20, r4
    613e:	55 2d       	mov	r21, r5
    6140:	66 2d       	mov	r22, r6
    6142:	77 2d       	mov	r23, r7
    6144:	88 2d       	mov	r24, r8
    6146:	99 2d       	mov	r25, r9
    6148:	47 d4       	rcall	.+2190   	; 0x69d8 <__udivdi3>
    614a:	22 2e       	mov	r2, r18
    614c:	33 2e       	mov	r3, r19
    614e:	44 2e       	mov	r4, r20
    6150:	55 2e       	mov	r5, r21
    6152:	66 2e       	mov	r6, r22
    6154:	77 2e       	mov	r7, r23
    6156:	88 2e       	mov	r8, r24
    6158:	99 2e       	mov	r9, r25
    615a:	a2 2c       	mov	r10, r2
    615c:	b3 2c       	mov	r11, r3
    615e:	c4 2c       	mov	r12, r4
    6160:	d5 2c       	mov	r13, r5
    6162:	e6 2c       	mov	r14, r6
    6164:	f7 2c       	mov	r15, r7
    6166:	08 2d       	mov	r16, r8
    6168:	19 2d       	mov	r17, r9
    616a:	2a 2d       	mov	r18, r10
    616c:	3b 2d       	mov	r19, r11
    616e:	4c 2d       	mov	r20, r12
    6170:	5d 2d       	mov	r21, r13
    6172:	6e 2d       	mov	r22, r14
    6174:	7f 2d       	mov	r23, r15
    6176:	80 2f       	mov	r24, r16
    6178:	91 2f       	mov	r25, r17
    617a:	29 51       	subi	r18, 0x19	; 25
    617c:	3c 4f       	sbci	r19, 0xFC	; 252
    617e:	4f 4f       	sbci	r20, 0xFF	; 255
    6180:	5f 4f       	sbci	r21, 0xFF	; 255
    6182:	6f 4f       	sbci	r22, 0xFF	; 255
    6184:	7f 4f       	sbci	r23, 0xFF	; 255
    6186:	8f 4f       	sbci	r24, 0xFF	; 255
    6188:	9f 4f       	sbci	r25, 0xFF	; 255
    618a:	a2 2e       	mov	r10, r18
    618c:	b3 2e       	mov	r11, r19
    618e:	c4 2e       	mov	r12, r20
    6190:	d5 2e       	mov	r13, r21
    6192:	e6 2e       	mov	r14, r22
    6194:	f7 2e       	mov	r15, r23
    6196:	08 2f       	mov	r16, r24
    6198:	19 2f       	mov	r17, r25
    619a:	2a 2d       	mov	r18, r10
    619c:	3b 2d       	mov	r19, r11
    619e:	4c 2d       	mov	r20, r12
    61a0:	5d 2d       	mov	r21, r13
    61a2:	6e 2d       	mov	r22, r14
    61a4:	7f 2d       	mov	r23, r15
    61a6:	80 2f       	mov	r24, r16
    61a8:	91 2f       	mov	r25, r17
    61aa:	2c d3       	rcall	.+1624   	; 0x6804 <__floatundisf>
    61ac:	dc 01       	movw	r26, r24
    61ae:	cb 01       	movw	r24, r22
    61b0:	20 e0       	ldi	r18, 0x00	; 0
    61b2:	30 e0       	ldi	r19, 0x00	; 0
    61b4:	4a e7       	ldi	r20, 0x7A	; 122
    61b6:	54 e4       	ldi	r21, 0x44	; 68
    61b8:	bc 01       	movw	r22, r24
    61ba:	cd 01       	movw	r24, r26
    61bc:	81 d2       	rcall	.+1282   	; 0x66c0 <__divsf3>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	bc 01       	movw	r22, r24
    61c4:	cd 01       	movw	r24, r26
    61c6:	e9 d2       	rcall	.+1490   	; 0x679a <__fixunssfdi>
    61c8:	a2 2e       	mov	r10, r18
    61ca:	b3 2e       	mov	r11, r19
    61cc:	c4 2e       	mov	r12, r20
    61ce:	d5 2e       	mov	r13, r21
    61d0:	e6 2e       	mov	r14, r22
    61d2:	f7 2e       	mov	r15, r23
    61d4:	08 2f       	mov	r16, r24
    61d6:	19 2f       	mov	r17, r25
    61d8:	d6 01       	movw	r26, r12
    61da:	c5 01       	movw	r24, r10
    61dc:	bc 01       	movw	r22, r24
    61de:	cd 01       	movw	r24, r26
    61e0:	5c da       	rcall	.-2888   	; 0x569a <__portable_avr_delay_cycles>
    61e2:	89 a9       	ldd	r24, Y+49	; 0x31
    61e4:	9a a9       	ldd	r25, Y+50	; 0x32
		if(accZ>=0)sprintf(accZStr,"acelz %i.%i\n",abs(accZ/100), abs(accZ%100));
    61e6:	99 23       	and	r25, r25
    61e8:	8c f1       	brlt	.+98     	; 0x624c <main+0xb2c>
    61ea:	89 a9       	ldd	r24, Y+49	; 0x31
    61ec:	9a a9       	ldd	r25, Y+50	; 0x32
    61ee:	24 e6       	ldi	r18, 0x64	; 100
    61f0:	30 e0       	ldi	r19, 0x00	; 0
    61f2:	b9 01       	movw	r22, r18
    61f4:	ba d3       	rcall	.+1908   	; 0x696a <__divmodhi4>
    61f6:	99 23       	and	r25, r25
    61f8:	1c f4       	brge	.+6      	; 0x6200 <main+0xae0>
    61fa:	91 95       	neg	r25
    61fc:	81 95       	neg	r24
    61fe:	91 09       	sbc	r25, r1
    6200:	fc 01       	movw	r30, r24
    6202:	89 a9       	ldd	r24, Y+49	; 0x31
    6204:	9a a9       	ldd	r25, Y+50	; 0x32
    6206:	24 e6       	ldi	r18, 0x64	; 100
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	b9 01       	movw	r22, r18
    620c:	ae d3       	rcall	.+1884   	; 0x696a <__divmodhi4>
    620e:	cb 01       	movw	r24, r22
    6210:	99 23       	and	r25, r25
    6212:	1c f4       	brge	.+6      	; 0x621a <main+0xafa>
    6214:	91 95       	neg	r25
    6216:	81 95       	neg	r24
    6218:	91 09       	sbc	r25, r1
    621a:	2f 2f       	mov	r18, r31
    621c:	2f 93       	push	r18
    621e:	2e 2f       	mov	r18, r30
    6220:	2f 93       	push	r18
    6222:	29 2f       	mov	r18, r25
    6224:	2f 93       	push	r18
    6226:	8f 93       	push	r24
    6228:	89 e6       	ldi	r24, 0x69	; 105
    622a:	90 e2       	ldi	r25, 0x20	; 32
    622c:	89 2f       	mov	r24, r25
    622e:	8f 93       	push	r24
    6230:	89 e6       	ldi	r24, 0x69	; 105
    6232:	90 e2       	ldi	r25, 0x20	; 32
    6234:	8f 93       	push	r24
    6236:	8c a5       	ldd	r24, Y+44	; 0x2c
    6238:	8f 93       	push	r24
    623a:	8b a5       	ldd	r24, Y+43	; 0x2b
    623c:	8f 93       	push	r24
    623e:	0a d6       	rcall	.+3092   	; 0x6e54 <sprintf>
    6240:	ed b7       	in	r30, 0x3d	; 61
    6242:	fe b7       	in	r31, 0x3e	; 62
    6244:	38 96       	adiw	r30, 0x08	; 8
    6246:	cd bf       	out	0x3d, r28	; 61
    6248:	de bf       	out	0x3e, r29	; 62
    624a:	31 c0       	rjmp	.+98     	; 0x62ae <main+0xb8e>
    624c:	89 a9       	ldd	r24, Y+49	; 0x31
    624e:	9a a9       	ldd	r25, Y+50	; 0x32
		else sprintf(accZStr,"acelz %i.%i\n",abs(accZ/100), abs(accZ%100));
    6250:	24 e6       	ldi	r18, 0x64	; 100
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	b9 01       	movw	r22, r18
    6256:	89 d3       	rcall	.+1810   	; 0x696a <__divmodhi4>
    6258:	99 23       	and	r25, r25
    625a:	1c f4       	brge	.+6      	; 0x6262 <main+0xb42>
    625c:	91 95       	neg	r25
    625e:	81 95       	neg	r24
    6260:	91 09       	sbc	r25, r1
    6262:	fc 01       	movw	r30, r24
    6264:	89 a9       	ldd	r24, Y+49	; 0x31
    6266:	9a a9       	ldd	r25, Y+50	; 0x32
    6268:	24 e6       	ldi	r18, 0x64	; 100
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	b9 01       	movw	r22, r18
    626e:	7d d3       	rcall	.+1786   	; 0x696a <__divmodhi4>
    6270:	cb 01       	movw	r24, r22
    6272:	99 23       	and	r25, r25
    6274:	1c f4       	brge	.+6      	; 0x627c <main+0xb5c>
    6276:	91 95       	neg	r25
    6278:	81 95       	neg	r24
    627a:	91 09       	sbc	r25, r1
    627c:	2f 2f       	mov	r18, r31
    627e:	2f 93       	push	r18
    6280:	2e 2f       	mov	r18, r30
    6282:	2f 93       	push	r18
    6284:	29 2f       	mov	r18, r25
    6286:	2f 93       	push	r18
    6288:	8f 93       	push	r24
    628a:	89 e6       	ldi	r24, 0x69	; 105
    628c:	90 e2       	ldi	r25, 0x20	; 32
    628e:	89 2f       	mov	r24, r25
    6290:	8f 93       	push	r24
    6292:	89 e6       	ldi	r24, 0x69	; 105
    6294:	90 e2       	ldi	r25, 0x20	; 32
    6296:	8f 93       	push	r24
    6298:	8c a5       	ldd	r24, Y+44	; 0x2c
    629a:	8f 93       	push	r24
    629c:	8b a5       	ldd	r24, Y+43	; 0x2b
    629e:	8f 93       	push	r24
    62a0:	d9 d5       	rcall	.+2994   	; 0x6e54 <sprintf>
    62a2:	0d b7       	in	r16, 0x3d	; 61
    62a4:	1e b7       	in	r17, 0x3e	; 62
    62a6:	08 5f       	subi	r16, 0xF8	; 248
    62a8:	1f 4f       	sbci	r17, 0xFF	; 255
    62aa:	cd bf       	out	0x3d, r28	; 61
    62ac:	de bf       	out	0x3e, r29	; 62
    62ae:	88 a5       	ldd	r24, Y+40	; 0x28
    62b0:	8f 93       	push	r24
    62b2:	8f a1       	ldd	r24, Y+39	; 0x27
		
		
		
		printf(accXStr);
    62b4:	8f 93       	push	r24
    62b6:	8b d5       	rcall	.+2838   	; 0x6dce <printf>
    62b8:	0f 90       	pop	r0
    62ba:	0f 90       	pop	r0
    62bc:	8a a5       	ldd	r24, Y+42	; 0x2a
    62be:	8f 93       	push	r24
    62c0:	89 a5       	ldd	r24, Y+41	; 0x29
    62c2:	8f 93       	push	r24
		printf(accYStr);
    62c4:	84 d5       	rcall	.+2824   	; 0x6dce <printf>
    62c6:	0f 90       	pop	r0
    62c8:	0f 90       	pop	r0
    62ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    62cc:	8f 93       	push	r24
    62ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    62d0:	8f 93       	push	r24
    62d2:	7d d5       	rcall	.+2810   	; 0x6dce <printf>
		printf(accZStr);
    62d4:	0f 90       	pop	r0
    62d6:	0f 90       	pop	r0
    62d8:	8d 81       	ldd	r24, Y+5	; 0x05
    62da:	9e 81       	ldd	r25, Y+6	; 0x06
    62dc:	20 e2       	ldi	r18, 0x20	; 32
    62de:	30 e0       	ldi	r19, 0x00	; 0
    62e0:	fc 01       	movw	r30, r24
    62e2:	20 83       	st	Z, r18
	
		sprintf(s_missionTime, " ");
    62e4:	31 83       	std	Z+1, r19	; 0x01
    62e6:	8f 81       	ldd	r24, Y+7	; 0x07
    62e8:	98 85       	ldd	r25, Y+8	; 0x08
    62ea:	20 e2       	ldi	r18, 0x20	; 32
    62ec:	30 e0       	ldi	r19, 0x00	; 0
    62ee:	fc 01       	movw	r30, r24
    62f0:	20 83       	st	Z, r18
		sprintf(s_packetCount, " ");
    62f2:	31 83       	std	Z+1, r19	; 0x01
    62f4:	89 85       	ldd	r24, Y+9	; 0x09
    62f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    62f8:	20 e2       	ldi	r18, 0x20	; 32
    62fa:	30 e0       	ldi	r19, 0x00	; 0
    62fc:	fc 01       	movw	r30, r24
    62fe:	20 83       	st	Z, r18
		sprintf(s_altitude, " ");
    6300:	31 83       	std	Z+1, r19	; 0x01
    6302:	8b 85       	ldd	r24, Y+11	; 0x0b
    6304:	9c 85       	ldd	r25, Y+12	; 0x0c
    6306:	20 e2       	ldi	r18, 0x20	; 32
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	fc 01       	movw	r30, r24
    630c:	20 83       	st	Z, r18
		sprintf(s_pressure, " ");
    630e:	31 83       	std	Z+1, r19	; 0x01
    6310:	8d 85       	ldd	r24, Y+13	; 0x0d
    6312:	9e 85       	ldd	r25, Y+14	; 0x0e
    6314:	20 e2       	ldi	r18, 0x20	; 32
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	fc 01       	movw	r30, r24
    631a:	20 83       	st	Z, r18
		sprintf(s_temp, " ");
    631c:	31 83       	std	Z+1, r19	; 0x01
    631e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6320:	98 89       	ldd	r25, Y+16	; 0x10
    6322:	20 e2       	ldi	r18, 0x20	; 32
    6324:	30 e0       	ldi	r19, 0x00	; 0
    6326:	fc 01       	movw	r30, r24
    6328:	20 83       	st	Z, r18
		sprintf(s_voltage, " ");
    632a:	31 83       	std	Z+1, r19	; 0x01
    632c:	89 89       	ldd	r24, Y+17	; 0x11
    632e:	9a 89       	ldd	r25, Y+18	; 0x12
    6330:	20 e2       	ldi	r18, 0x20	; 32
    6332:	30 e0       	ldi	r19, 0x00	; 0
    6334:	fc 01       	movw	r30, r24
    6336:	20 83       	st	Z, r18
		sprintf(s_gpsTime, " ");
    6338:	31 83       	std	Z+1, r19	; 0x01
    633a:	8b 89       	ldd	r24, Y+19	; 0x13
    633c:	9c 89       	ldd	r25, Y+20	; 0x14
    633e:	20 e2       	ldi	r18, 0x20	; 32
    6340:	30 e0       	ldi	r19, 0x00	; 0
    6342:	fc 01       	movw	r30, r24
    6344:	20 83       	st	Z, r18
		sprintf(s_gpsLat, " ");
    6346:	31 83       	std	Z+1, r19	; 0x01
    6348:	8d 89       	ldd	r24, Y+21	; 0x15
    634a:	9e 89       	ldd	r25, Y+22	; 0x16
    634c:	20 e2       	ldi	r18, 0x20	; 32
    634e:	30 e0       	ldi	r19, 0x00	; 0
    6350:	fc 01       	movw	r30, r24
    6352:	20 83       	st	Z, r18
		sprintf(s_gpsLong, " ");
    6354:	31 83       	std	Z+1, r19	; 0x01
    6356:	8f 89       	ldd	r24, Y+23	; 0x17
    6358:	98 8d       	ldd	r25, Y+24	; 0x18
    635a:	20 e2       	ldi	r18, 0x20	; 32
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	fc 01       	movw	r30, r24
    6360:	20 83       	st	Z, r18
		sprintf(s_gpsAlt, " ");
    6362:	31 83       	std	Z+1, r19	; 0x01
    6364:	89 8d       	ldd	r24, Y+25	; 0x19
    6366:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6368:	20 e2       	ldi	r18, 0x20	; 32
    636a:	30 e0       	ldi	r19, 0x00	; 0
    636c:	fc 01       	movw	r30, r24
    636e:	20 83       	st	Z, r18
		sprintf(s_gpsSats, " ");
    6370:	31 83       	std	Z+1, r19	; 0x01
    6372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6376:	20 e2       	ldi	r18, 0x20	; 32
    6378:	30 e0       	ldi	r19, 0x00	; 0
    637a:	fc 01       	movw	r30, r24
    637c:	20 83       	st	Z, r18
		sprintf(s_pitch, " ");
    637e:	31 83       	std	Z+1, r19	; 0x01
    6380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6382:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6384:	20 e2       	ldi	r18, 0x20	; 32
    6386:	30 e0       	ldi	r19, 0x00	; 0
    6388:	fc 01       	movw	r30, r24
    638a:	20 83       	st	Z, r18
		sprintf(s_roll, " ");
    638c:	31 83       	std	Z+1, r19	; 0x01
    638e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6390:	98 a1       	ldd	r25, Y+32	; 0x20
    6392:	20 e2       	ldi	r18, 0x20	; 32
    6394:	30 e0       	ldi	r19, 0x00	; 0
    6396:	fc 01       	movw	r30, r24
    6398:	20 83       	st	Z, r18
		sprintf(s_spinRate, " ");
    639a:	31 83       	std	Z+1, r19	; 0x01
    639c:	89 a1       	ldd	r24, Y+33	; 0x21
    639e:	9a a1       	ldd	r25, Y+34	; 0x22
    63a0:	20 e2       	ldi	r18, 0x20	; 32
    63a2:	30 e0       	ldi	r19, 0x00	; 0
    63a4:	fc 01       	movw	r30, r24
    63a6:	20 83       	st	Z, r18
		sprintf(s_flightState, " ");
    63a8:	31 83       	std	Z+1, r19	; 0x01
    63aa:	8b a1       	ldd	r24, Y+35	; 0x23
    63ac:	9c a1       	ldd	r25, Y+36	; 0x24
    63ae:	20 e2       	ldi	r18, 0x20	; 32
    63b0:	30 e0       	ldi	r19, 0x00	; 0
    63b2:	fc 01       	movw	r30, r24
    63b4:	20 83       	st	Z, r18
		sprintf(s_cardinalDir, " ");
    63b6:	31 83       	std	Z+1, r19	; 0x01
    63b8:	8c a1       	ldd	r24, Y+36	; 0x24
    63ba:	8f 93       	push	r24
    63bc:	8b a1       	ldd	r24, Y+35	; 0x23
    63be:	8f 93       	push	r24
    63c0:	8a a1       	ldd	r24, Y+34	; 0x22
    63c2:	8f 93       	push	r24
		
		
		sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,",s_teamID,
    63c4:	89 a1       	ldd	r24, Y+33	; 0x21
    63c6:	8f 93       	push	r24
    63c8:	88 a1       	ldd	r24, Y+32	; 0x20
    63ca:	8f 93       	push	r24
    63cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    63ce:	8f 93       	push	r24
    63d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    63d2:	8f 93       	push	r24
    63d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    63d6:	8f 93       	push	r24
    63d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    63da:	8f 93       	push	r24
    63dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    63de:	8f 93       	push	r24
    63e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    63e2:	8f 93       	push	r24
    63e4:	89 8d       	ldd	r24, Y+25	; 0x19
    63e6:	8f 93       	push	r24
    63e8:	88 8d       	ldd	r24, Y+24	; 0x18
    63ea:	8f 93       	push	r24
    63ec:	8f 89       	ldd	r24, Y+23	; 0x17
    63ee:	8f 93       	push	r24
    63f0:	8e 89       	ldd	r24, Y+22	; 0x16
    63f2:	8f 93       	push	r24
    63f4:	8d 89       	ldd	r24, Y+21	; 0x15
    63f6:	8f 93       	push	r24
    63f8:	8c 89       	ldd	r24, Y+20	; 0x14
    63fa:	8f 93       	push	r24
    63fc:	8b 89       	ldd	r24, Y+19	; 0x13
    63fe:	8f 93       	push	r24
    6400:	8a 89       	ldd	r24, Y+18	; 0x12
    6402:	8f 93       	push	r24
    6404:	89 89       	ldd	r24, Y+17	; 0x11
    6406:	8f 93       	push	r24
    6408:	88 89       	ldd	r24, Y+16	; 0x10
    640a:	8f 93       	push	r24
    640c:	8f 85       	ldd	r24, Y+15	; 0x0f
    640e:	8f 93       	push	r24
    6410:	8e 85       	ldd	r24, Y+14	; 0x0e
    6412:	8f 93       	push	r24
    6414:	8d 85       	ldd	r24, Y+13	; 0x0d
    6416:	8f 93       	push	r24
    6418:	8c 85       	ldd	r24, Y+12	; 0x0c
    641a:	8f 93       	push	r24
    641c:	8b 85       	ldd	r24, Y+11	; 0x0b
    641e:	8f 93       	push	r24
    6420:	8a 85       	ldd	r24, Y+10	; 0x0a
    6422:	8f 93       	push	r24
    6424:	89 85       	ldd	r24, Y+9	; 0x09
    6426:	8f 93       	push	r24
    6428:	88 85       	ldd	r24, Y+8	; 0x08
    642a:	8f 93       	push	r24
    642c:	8f 81       	ldd	r24, Y+7	; 0x07
    642e:	8f 93       	push	r24
    6430:	8e 81       	ldd	r24, Y+6	; 0x06
    6432:	8f 93       	push	r24
    6434:	8d 81       	ldd	r24, Y+5	; 0x05
    6436:	8f 93       	push	r24
    6438:	8c 81       	ldd	r24, Y+4	; 0x04
    643a:	8f 93       	push	r24
    643c:	8b 81       	ldd	r24, Y+3	; 0x03
    643e:	8f 93       	push	r24
    6440:	86 e7       	ldi	r24, 0x76	; 118
    6442:	90 e2       	ldi	r25, 0x20	; 32
    6444:	89 2f       	mov	r24, r25
    6446:	8f 93       	push	r24
    6448:	86 e7       	ldi	r24, 0x76	; 118
    644a:	90 e2       	ldi	r25, 0x20	; 32
    644c:	8f 93       	push	r24
    644e:	8a 81       	ldd	r24, Y+2	; 0x02
    6450:	8f 93       	push	r24
    6452:	89 81       	ldd	r24, Y+1	; 0x01
    6454:	8f 93       	push	r24
    6456:	fe d4       	rcall	.+2556   	; 0x6e54 <sprintf>
    6458:	0d b7       	in	r16, 0x3d	; 61
    645a:	1e b7       	in	r17, 0x3e	; 62
    645c:	0a 5d       	subi	r16, 0xDA	; 218
    645e:	1f 4f       	sbci	r17, 0xFF	; 255
    6460:	cd bf       	out	0x3d, r28	; 61
    6462:	de bf       	out	0x3e, r29	; 62
    6464:	89 81       	ldd	r24, Y+1	; 0x01
    6466:	9a 81       	ldd	r25, Y+2	; 0x02
    6468:	0e 94 cc 0b 	call	0x1798	; 0x1798 <xbeeWrite>
    646c:	0a d9       	rcall	.-3564   	; 0x5682 <sysclk_get_cpu_hz>
		s_roll,
		s_spinRate,
		s_flightState,
		s_cardinalDir);
		
		xbeeWrite(telemetryString);
    646e:	dc 01       	movw	r26, r24
    6470:	cb 01       	movw	r24, r22
    6472:	8c 01       	movw	r16, r24
    6474:	9d 01       	movw	r18, r26
	
		
		delay_ms(500);
    6476:	40 e0       	ldi	r20, 0x00	; 0
    6478:	50 e0       	ldi	r21, 0x00	; 0
    647a:	ba 01       	movw	r22, r20
    647c:	23 96       	adiw	r28, 0x03	; 3
    647e:	0f af       	std	Y+63, r16	; 0x3f
    6480:	23 97       	sbiw	r28, 0x03	; 3
    6482:	24 96       	adiw	r28, 0x04	; 4
    6484:	1f af       	std	Y+63, r17	; 0x3f
    6486:	24 97       	sbiw	r28, 0x04	; 4
    6488:	25 96       	adiw	r28, 0x05	; 5
    648a:	2f af       	std	Y+63, r18	; 0x3f
    648c:	25 97       	sbiw	r28, 0x05	; 5
    648e:	26 96       	adiw	r28, 0x06	; 6
    6490:	3f af       	std	Y+63, r19	; 0x3f
    6492:	26 97       	sbiw	r28, 0x06	; 6
    6494:	27 96       	adiw	r28, 0x07	; 7
    6496:	4f af       	std	Y+63, r20	; 0x3f
    6498:	27 97       	sbiw	r28, 0x07	; 7
    649a:	28 96       	adiw	r28, 0x08	; 8
    649c:	5f af       	std	Y+63, r21	; 0x3f
    649e:	28 97       	sbiw	r28, 0x08	; 8
    64a0:	29 96       	adiw	r28, 0x09	; 9
    64a2:	6f af       	std	Y+63, r22	; 0x3f
    64a4:	29 97       	sbiw	r28, 0x09	; 9
    64a6:	2a 96       	adiw	r28, 0x0a	; 10
    64a8:	7f af       	std	Y+63, r23	; 0x3f
    64aa:	2a 97       	sbiw	r28, 0x0a	; 10
    64ac:	23 96       	adiw	r28, 0x03	; 3
    64ae:	2f ac       	ldd	r2, Y+63	; 0x3f
    64b0:	23 97       	sbiw	r28, 0x03	; 3
    64b2:	24 96       	adiw	r28, 0x04	; 4
    64b4:	3f ac       	ldd	r3, Y+63	; 0x3f
    64b6:	24 97       	sbiw	r28, 0x04	; 4
    64b8:	25 96       	adiw	r28, 0x05	; 5
    64ba:	4f ac       	ldd	r4, Y+63	; 0x3f
    64bc:	25 97       	sbiw	r28, 0x05	; 5
    64be:	26 96       	adiw	r28, 0x06	; 6
    64c0:	5f ac       	ldd	r5, Y+63	; 0x3f
    64c2:	26 97       	sbiw	r28, 0x06	; 6
    64c4:	27 96       	adiw	r28, 0x07	; 7
    64c6:	6f ac       	ldd	r6, Y+63	; 0x3f
    64c8:	27 97       	sbiw	r28, 0x07	; 7
    64ca:	28 96       	adiw	r28, 0x08	; 8
    64cc:	7f ac       	ldd	r7, Y+63	; 0x3f
    64ce:	28 97       	sbiw	r28, 0x08	; 8
    64d0:	29 96       	adiw	r28, 0x09	; 9
    64d2:	8f ac       	ldd	r8, Y+63	; 0x3f
    64d4:	29 97       	sbiw	r28, 0x09	; 9
    64d6:	2a 96       	adiw	r28, 0x0a	; 10
    64d8:	9f ac       	ldd	r9, Y+63	; 0x3f
    64da:	2a 97       	sbiw	r28, 0x0a	; 10
    64dc:	22 2d       	mov	r18, r2
    64de:	33 2d       	mov	r19, r3
    64e0:	44 2d       	mov	r20, r4
    64e2:	55 2d       	mov	r21, r5
    64e4:	66 2d       	mov	r22, r6
    64e6:	77 2d       	mov	r23, r7
    64e8:	88 2d       	mov	r24, r8
    64ea:	99 2d       	mov	r25, r9
    64ec:	02 e0       	ldi	r16, 0x02	; 2
    64ee:	d0 d2       	rcall	.+1440   	; 0x6a90 <__ashldi3>
    64f0:	a2 2e       	mov	r10, r18
    64f2:	b3 2e       	mov	r11, r19
    64f4:	c4 2e       	mov	r12, r20
    64f6:	d5 2e       	mov	r13, r21
    64f8:	e6 2e       	mov	r14, r22
    64fa:	f7 2e       	mov	r15, r23
    64fc:	08 2f       	mov	r16, r24
    64fe:	19 2f       	mov	r17, r25
    6500:	2a 2c       	mov	r2, r10
    6502:	3b 2c       	mov	r3, r11
    6504:	4c 2c       	mov	r4, r12
    6506:	5d 2c       	mov	r5, r13
    6508:	6e 2c       	mov	r6, r14
    650a:	7f 2c       	mov	r7, r15
    650c:	80 2e       	mov	r8, r16
    650e:	91 2e       	mov	r9, r17
    6510:	22 2d       	mov	r18, r2
    6512:	33 2d       	mov	r19, r3
    6514:	44 2d       	mov	r20, r4
    6516:	55 2d       	mov	r21, r5
    6518:	66 2d       	mov	r22, r6
    651a:	77 2d       	mov	r23, r7
    651c:	88 2d       	mov	r24, r8
    651e:	99 2d       	mov	r25, r9
    6520:	05 e0       	ldi	r16, 0x05	; 5
    6522:	b6 d2       	rcall	.+1388   	; 0x6a90 <__ashldi3>
    6524:	a2 2e       	mov	r10, r18
    6526:	b3 2e       	mov	r11, r19
    6528:	c4 2e       	mov	r12, r20
    652a:	d5 2e       	mov	r13, r21
    652c:	e6 2e       	mov	r14, r22
    652e:	f7 2e       	mov	r15, r23
    6530:	08 2f       	mov	r16, r24
    6532:	19 2f       	mov	r17, r25
    6534:	2a 2d       	mov	r18, r10
    6536:	3b 2d       	mov	r19, r11
    6538:	4c 2d       	mov	r20, r12
    653a:	5d 2d       	mov	r21, r13
    653c:	6e 2d       	mov	r22, r14
    653e:	7f 2d       	mov	r23, r15
    6540:	80 2f       	mov	r24, r16
    6542:	91 2f       	mov	r25, r17
    6544:	a2 2c       	mov	r10, r2
    6546:	b3 2c       	mov	r11, r3
    6548:	c4 2c       	mov	r12, r4
    654a:	d5 2c       	mov	r13, r5
    654c:	e6 2c       	mov	r14, r6
    654e:	f7 2c       	mov	r15, r7
    6550:	08 2d       	mov	r16, r8
    6552:	19 2d       	mov	r17, r9
    6554:	bf d2       	rcall	.+1406   	; 0x6ad4 <__subdi3>
    6556:	a2 2e       	mov	r10, r18
    6558:	b3 2e       	mov	r11, r19
    655a:	c4 2e       	mov	r12, r20
    655c:	d5 2e       	mov	r13, r21
    655e:	e6 2e       	mov	r14, r22
    6560:	f7 2e       	mov	r15, r23
    6562:	08 2f       	mov	r16, r24
    6564:	19 2f       	mov	r17, r25
    6566:	2a 2d       	mov	r18, r10
    6568:	3b 2d       	mov	r19, r11
    656a:	4c 2d       	mov	r20, r12
    656c:	5d 2d       	mov	r21, r13
    656e:	6e 2d       	mov	r22, r14
    6570:	7f 2d       	mov	r23, r15
    6572:	80 2f       	mov	r24, r16
    6574:	91 2f       	mov	r25, r17
    6576:	23 96       	adiw	r28, 0x03	; 3
    6578:	af ac       	ldd	r10, Y+63	; 0x3f
    657a:	23 97       	sbiw	r28, 0x03	; 3
    657c:	24 96       	adiw	r28, 0x04	; 4
    657e:	bf ac       	ldd	r11, Y+63	; 0x3f
    6580:	24 97       	sbiw	r28, 0x04	; 4
    6582:	25 96       	adiw	r28, 0x05	; 5
    6584:	cf ac       	ldd	r12, Y+63	; 0x3f
    6586:	25 97       	sbiw	r28, 0x05	; 5
    6588:	26 96       	adiw	r28, 0x06	; 6
    658a:	df ac       	ldd	r13, Y+63	; 0x3f
    658c:	26 97       	sbiw	r28, 0x06	; 6
    658e:	27 96       	adiw	r28, 0x07	; 7
    6590:	ef ac       	ldd	r14, Y+63	; 0x3f
    6592:	27 97       	sbiw	r28, 0x07	; 7
    6594:	28 96       	adiw	r28, 0x08	; 8
    6596:	ff ac       	ldd	r15, Y+63	; 0x3f
    6598:	28 97       	sbiw	r28, 0x08	; 8
    659a:	29 96       	adiw	r28, 0x09	; 9
    659c:	0f ad       	ldd	r16, Y+63	; 0x3f
    659e:	29 97       	sbiw	r28, 0x09	; 9
    65a0:	2a 96       	adiw	r28, 0x0a	; 10
    65a2:	1f ad       	ldd	r17, Y+63	; 0x3f
    65a4:	2a 97       	sbiw	r28, 0x0a	; 10
    65a6:	8d d2       	rcall	.+1306   	; 0x6ac2 <__adddi3>
    65a8:	a2 2e       	mov	r10, r18
    65aa:	b3 2e       	mov	r11, r19
    65ac:	c4 2e       	mov	r12, r20
    65ae:	d5 2e       	mov	r13, r21
    65b0:	e6 2e       	mov	r14, r22
    65b2:	f7 2e       	mov	r15, r23
    65b4:	08 2f       	mov	r16, r24
    65b6:	19 2f       	mov	r17, r25
    65b8:	2a 2d       	mov	r18, r10
    65ba:	3b 2d       	mov	r19, r11
    65bc:	4c 2d       	mov	r20, r12
    65be:	5d 2d       	mov	r21, r13
    65c0:	6e 2d       	mov	r22, r14
    65c2:	7f 2d       	mov	r23, r15
    65c4:	80 2f       	mov	r24, r16
    65c6:	91 2f       	mov	r25, r17
    65c8:	02 e0       	ldi	r16, 0x02	; 2
    65ca:	62 d2       	rcall	.+1220   	; 0x6a90 <__ashldi3>
    65cc:	22 2e       	mov	r2, r18
    65ce:	33 2e       	mov	r3, r19
    65d0:	44 2e       	mov	r4, r20
    65d2:	55 2e       	mov	r5, r21
    65d4:	66 2e       	mov	r6, r22
    65d6:	77 2e       	mov	r7, r23
    65d8:	88 2e       	mov	r8, r24
    65da:	99 2e       	mov	r9, r25
    65dc:	a2 2c       	mov	r10, r2
    65de:	b3 2c       	mov	r11, r3
    65e0:	c4 2c       	mov	r12, r4
    65e2:	d5 2c       	mov	r13, r5
    65e4:	e6 2c       	mov	r14, r6
    65e6:	f7 2c       	mov	r15, r7
    65e8:	08 2d       	mov	r16, r8
    65ea:	19 2d       	mov	r17, r9
    65ec:	2a 2c       	mov	r2, r10
    65ee:	3b 2c       	mov	r3, r11
    65f0:	4c 2c       	mov	r4, r12
    65f2:	5d 2c       	mov	r5, r13
    65f4:	6e 2c       	mov	r6, r14
    65f6:	7f 2c       	mov	r7, r15
    65f8:	80 2e       	mov	r8, r16
    65fa:	91 2e       	mov	r9, r17
    65fc:	0f 2e       	mov	r0, r31
    65fe:	f6 e0       	ldi	r31, 0x06	; 6
    6600:	af 2e       	mov	r10, r31
    6602:	f0 2d       	mov	r31, r0
    6604:	b1 2c       	mov	r11, r1
    6606:	c1 2c       	mov	r12, r1
    6608:	d1 2c       	mov	r13, r1
    660a:	e1 2c       	mov	r14, r1
    660c:	f1 2c       	mov	r15, r1
    660e:	00 e0       	ldi	r16, 0x00	; 0
    6610:	10 e0       	ldi	r17, 0x00	; 0
    6612:	22 2d       	mov	r18, r2
    6614:	33 2d       	mov	r19, r3
    6616:	44 2d       	mov	r20, r4
    6618:	55 2d       	mov	r21, r5
    661a:	66 2d       	mov	r22, r6
    661c:	77 2d       	mov	r23, r7
    661e:	88 2d       	mov	r24, r8
    6620:	99 2d       	mov	r25, r9
    6622:	da d1       	rcall	.+948    	; 0x69d8 <__udivdi3>
    6624:	22 2e       	mov	r2, r18
    6626:	33 2e       	mov	r3, r19
    6628:	44 2e       	mov	r4, r20
    662a:	55 2e       	mov	r5, r21
    662c:	66 2e       	mov	r6, r22
    662e:	77 2e       	mov	r7, r23
    6630:	88 2e       	mov	r8, r24
    6632:	99 2e       	mov	r9, r25
    6634:	a2 2c       	mov	r10, r2
    6636:	b3 2c       	mov	r11, r3
    6638:	c4 2c       	mov	r12, r4
    663a:	d5 2c       	mov	r13, r5
    663c:	e6 2c       	mov	r14, r6
    663e:	f7 2c       	mov	r15, r7
    6640:	08 2d       	mov	r16, r8
    6642:	19 2d       	mov	r17, r9
    6644:	2a 2d       	mov	r18, r10
    6646:	3b 2d       	mov	r19, r11
    6648:	4c 2d       	mov	r20, r12
    664a:	5d 2d       	mov	r21, r13
    664c:	6e 2d       	mov	r22, r14
    664e:	7f 2d       	mov	r23, r15
    6650:	80 2f       	mov	r24, r16
    6652:	91 2f       	mov	r25, r17
    6654:	29 51       	subi	r18, 0x19	; 25
    6656:	3c 4f       	sbci	r19, 0xFC	; 252
    6658:	4f 4f       	sbci	r20, 0xFF	; 255
    665a:	5f 4f       	sbci	r21, 0xFF	; 255
    665c:	6f 4f       	sbci	r22, 0xFF	; 255
    665e:	7f 4f       	sbci	r23, 0xFF	; 255
    6660:	8f 4f       	sbci	r24, 0xFF	; 255
    6662:	9f 4f       	sbci	r25, 0xFF	; 255
    6664:	a2 2e       	mov	r10, r18
    6666:	b3 2e       	mov	r11, r19
    6668:	c4 2e       	mov	r12, r20
    666a:	d5 2e       	mov	r13, r21
    666c:	e6 2e       	mov	r14, r22
    666e:	f7 2e       	mov	r15, r23
    6670:	08 2f       	mov	r16, r24
    6672:	19 2f       	mov	r17, r25
    6674:	2a 2d       	mov	r18, r10
    6676:	3b 2d       	mov	r19, r11
    6678:	4c 2d       	mov	r20, r12
    667a:	5d 2d       	mov	r21, r13
    667c:	6e 2d       	mov	r22, r14
    667e:	7f 2d       	mov	r23, r15
    6680:	80 2f       	mov	r24, r16
    6682:	91 2f       	mov	r25, r17
    6684:	bf d0       	rcall	.+382    	; 0x6804 <__floatundisf>
    6686:	dc 01       	movw	r26, r24
    6688:	cb 01       	movw	r24, r22
    668a:	20 e0       	ldi	r18, 0x00	; 0
    668c:	30 e0       	ldi	r19, 0x00	; 0
    668e:	4a e7       	ldi	r20, 0x7A	; 122
    6690:	54 e4       	ldi	r21, 0x44	; 68
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	14 d0       	rcall	.+40     	; 0x66c0 <__divsf3>
    6698:	dc 01       	movw	r26, r24
    669a:	cb 01       	movw	r24, r22
    669c:	bc 01       	movw	r22, r24
    669e:	cd 01       	movw	r24, r26
    66a0:	7c d0       	rcall	.+248    	; 0x679a <__fixunssfdi>
    66a2:	a2 2e       	mov	r10, r18
    66a4:	b3 2e       	mov	r11, r19
    66a6:	c4 2e       	mov	r12, r20
    66a8:	d5 2e       	mov	r13, r21
    66aa:	e6 2e       	mov	r14, r22
    66ac:	f7 2e       	mov	r15, r23
    66ae:	08 2f       	mov	r16, r24
    66b0:	19 2f       	mov	r17, r25
    66b2:	d6 01       	movw	r26, r12
    66b4:	c5 01       	movw	r24, r10
    66b6:	bc 01       	movw	r22, r24
    66b8:	cd 01       	movw	r24, r26
    66ba:	0e 94 4d 2b 	call	0x569a	; 0x569a <__portable_avr_delay_cycles>
    66be:	6d ca       	rjmp	.-2854   	; 0x5b9a <main+0x47a>

000066c0 <__divsf3>:
    66c0:	0c d0       	rcall	.+24     	; 0x66da <__divsf3x>
    66c2:	05 c1       	rjmp	.+522    	; 0x68ce <__fp_round>
    66c4:	fd d0       	rcall	.+506    	; 0x68c0 <__fp_pscB>
    66c6:	40 f0       	brcs	.+16     	; 0x66d8 <__divsf3+0x18>
    66c8:	f4 d0       	rcall	.+488    	; 0x68b2 <__fp_pscA>
		//printf("HELEHLALH\n");
		
		
							
	}
    66ca:	30 f0       	brcs	.+12     	; 0x66d8 <__divsf3+0x18>
    66cc:	21 f4       	brne	.+8      	; 0x66d6 <__divsf3+0x16>
    66ce:	5f 3f       	cpi	r21, 0xFF	; 255
    66d0:	19 f0       	breq	.+6      	; 0x66d8 <__divsf3+0x18>
    66d2:	d6 c0       	rjmp	.+428    	; 0x6880 <__fp_inf>
    66d4:	51 11       	cpse	r21, r1
    66d6:	2f c1       	rjmp	.+606    	; 0x6936 <__fp_szero>
    66d8:	d9 c0       	rjmp	.+434    	; 0x688c <__fp_nan>

000066da <__divsf3x>:
    66da:	0a d1       	rcall	.+532    	; 0x68f0 <__fp_split3>
    66dc:	98 f3       	brcs	.-26     	; 0x66c4 <__divsf3+0x4>

000066de <__divsf3_pse>:
    66de:	99 23       	and	r25, r25
    66e0:	c9 f3       	breq	.-14     	; 0x66d4 <__divsf3+0x14>
    66e2:	55 23       	and	r21, r21
    66e4:	b1 f3       	breq	.-20     	; 0x66d2 <__divsf3+0x12>
    66e6:	95 1b       	sub	r25, r21
    66e8:	55 0b       	sbc	r21, r21
    66ea:	bb 27       	eor	r27, r27
    66ec:	aa 27       	eor	r26, r26
    66ee:	62 17       	cp	r22, r18
    66f0:	73 07       	cpc	r23, r19
    66f2:	84 07       	cpc	r24, r20
    66f4:	38 f0       	brcs	.+14     	; 0x6704 <__divsf3_pse+0x26>
    66f6:	9f 5f       	subi	r25, 0xFF	; 255
    66f8:	5f 4f       	sbci	r21, 0xFF	; 255
    66fa:	22 0f       	add	r18, r18
    66fc:	33 1f       	adc	r19, r19
    66fe:	44 1f       	adc	r20, r20
    6700:	aa 1f       	adc	r26, r26
    6702:	a9 f3       	breq	.-22     	; 0x66ee <__divsf3_pse+0x10>
    6704:	33 d0       	rcall	.+102    	; 0x676c <__divsf3_pse+0x8e>
    6706:	0e 2e       	mov	r0, r30
    6708:	3a f0       	brmi	.+14     	; 0x6718 <__divsf3_pse+0x3a>
    670a:	e0 e8       	ldi	r30, 0x80	; 128
    670c:	30 d0       	rcall	.+96     	; 0x676e <__divsf3_pse+0x90>
    670e:	91 50       	subi	r25, 0x01	; 1
    6710:	50 40       	sbci	r21, 0x00	; 0
    6712:	e6 95       	lsr	r30
    6714:	00 1c       	adc	r0, r0
    6716:	ca f7       	brpl	.-14     	; 0x670a <__divsf3_pse+0x2c>
    6718:	29 d0       	rcall	.+82     	; 0x676c <__divsf3_pse+0x8e>
    671a:	fe 2f       	mov	r31, r30
    671c:	27 d0       	rcall	.+78     	; 0x676c <__divsf3_pse+0x8e>
    671e:	66 0f       	add	r22, r22
    6720:	77 1f       	adc	r23, r23
    6722:	88 1f       	adc	r24, r24
    6724:	bb 1f       	adc	r27, r27
    6726:	26 17       	cp	r18, r22
    6728:	37 07       	cpc	r19, r23
    672a:	48 07       	cpc	r20, r24
    672c:	ab 07       	cpc	r26, r27
    672e:	b0 e8       	ldi	r27, 0x80	; 128
    6730:	09 f0       	breq	.+2      	; 0x6734 <__divsf3_pse+0x56>
    6732:	bb 0b       	sbc	r27, r27
    6734:	80 2d       	mov	r24, r0
    6736:	bf 01       	movw	r22, r30
    6738:	ff 27       	eor	r31, r31
    673a:	93 58       	subi	r25, 0x83	; 131
    673c:	5f 4f       	sbci	r21, 0xFF	; 255
    673e:	2a f0       	brmi	.+10     	; 0x674a <__divsf3_pse+0x6c>
    6740:	9e 3f       	cpi	r25, 0xFE	; 254
    6742:	51 05       	cpc	r21, r1
    6744:	68 f0       	brcs	.+26     	; 0x6760 <__divsf3_pse+0x82>
    6746:	9c c0       	rjmp	.+312    	; 0x6880 <__fp_inf>
    6748:	f6 c0       	rjmp	.+492    	; 0x6936 <__fp_szero>
    674a:	5f 3f       	cpi	r21, 0xFF	; 255
    674c:	ec f3       	brlt	.-6      	; 0x6748 <__divsf3_pse+0x6a>
    674e:	98 3e       	cpi	r25, 0xE8	; 232
    6750:	dc f3       	brlt	.-10     	; 0x6748 <__divsf3_pse+0x6a>
    6752:	86 95       	lsr	r24
    6754:	77 95       	ror	r23
    6756:	67 95       	ror	r22
    6758:	b7 95       	ror	r27
    675a:	f7 95       	ror	r31
    675c:	9f 5f       	subi	r25, 0xFF	; 255
    675e:	c9 f7       	brne	.-14     	; 0x6752 <__divsf3_pse+0x74>
    6760:	88 0f       	add	r24, r24
    6762:	91 1d       	adc	r25, r1
    6764:	96 95       	lsr	r25
    6766:	87 95       	ror	r24
    6768:	97 f9       	bld	r25, 7
    676a:	08 95       	ret
    676c:	e1 e0       	ldi	r30, 0x01	; 1
    676e:	66 0f       	add	r22, r22
    6770:	77 1f       	adc	r23, r23
    6772:	88 1f       	adc	r24, r24
    6774:	bb 1f       	adc	r27, r27
    6776:	62 17       	cp	r22, r18
    6778:	73 07       	cpc	r23, r19
    677a:	84 07       	cpc	r24, r20
    677c:	ba 07       	cpc	r27, r26
    677e:	20 f0       	brcs	.+8      	; 0x6788 <__divsf3_pse+0xaa>
    6780:	62 1b       	sub	r22, r18
    6782:	73 0b       	sbc	r23, r19
    6784:	84 0b       	sbc	r24, r20
    6786:	ba 0b       	sbc	r27, r26
    6788:	ee 1f       	adc	r30, r30
    678a:	88 f7       	brcc	.-30     	; 0x676e <__divsf3_pse+0x90>
    678c:	e0 95       	com	r30
    678e:	08 95       	ret

00006790 <__fixsfdi>:
    6790:	be e3       	ldi	r27, 0x3E	; 62
    6792:	04 d0       	rcall	.+8      	; 0x679c <__fixunssfdi+0x2>
    6794:	08 f4       	brcc	.+2      	; 0x6798 <__fixsfdi+0x8>
    6796:	90 e8       	ldi	r25, 0x80	; 128
    6798:	08 95       	ret

0000679a <__fixunssfdi>:
    679a:	bf e3       	ldi	r27, 0x3F	; 63
    679c:	22 27       	eor	r18, r18
    679e:	33 27       	eor	r19, r19
    67a0:	a9 01       	movw	r20, r18
    67a2:	ae d0       	rcall	.+348    	; 0x6900 <__fp_splitA>
    67a4:	58 f1       	brcs	.+86     	; 0x67fc <__fixunssfdi+0x62>
    67a6:	9f 57       	subi	r25, 0x7F	; 127
    67a8:	40 f1       	brcs	.+80     	; 0x67fa <__fixunssfdi+0x60>
    67aa:	b9 17       	cp	r27, r25
    67ac:	38 f1       	brcs	.+78     	; 0x67fc <__fixunssfdi+0x62>
    67ae:	bf e3       	ldi	r27, 0x3F	; 63
    67b0:	b9 1b       	sub	r27, r25
    67b2:	99 27       	eor	r25, r25
    67b4:	b8 50       	subi	r27, 0x08	; 8
    67b6:	3a f4       	brpl	.+14     	; 0x67c6 <__fixunssfdi+0x2c>
    67b8:	66 0f       	add	r22, r22
    67ba:	77 1f       	adc	r23, r23
    67bc:	88 1f       	adc	r24, r24
    67be:	99 1f       	adc	r25, r25
    67c0:	b3 95       	inc	r27
    67c2:	d2 f3       	brmi	.-12     	; 0x67b8 <__fixunssfdi+0x1e>
    67c4:	16 c0       	rjmp	.+44     	; 0x67f2 <__fixunssfdi+0x58>
    67c6:	b8 50       	subi	r27, 0x08	; 8
    67c8:	4a f0       	brmi	.+18     	; 0x67dc <__fixunssfdi+0x42>
    67ca:	23 2f       	mov	r18, r19
    67cc:	34 2f       	mov	r19, r20
    67ce:	45 2f       	mov	r20, r21
    67d0:	56 2f       	mov	r21, r22
    67d2:	67 2f       	mov	r22, r23
    67d4:	78 2f       	mov	r23, r24
    67d6:	88 27       	eor	r24, r24
    67d8:	b8 50       	subi	r27, 0x08	; 8
    67da:	ba f7       	brpl	.-18     	; 0x67ca <__fixunssfdi+0x30>
    67dc:	b8 5f       	subi	r27, 0xF8	; 248
    67de:	49 f0       	breq	.+18     	; 0x67f2 <__fixunssfdi+0x58>
    67e0:	86 95       	lsr	r24
    67e2:	77 95       	ror	r23
    67e4:	67 95       	ror	r22
    67e6:	57 95       	ror	r21
    67e8:	47 95       	ror	r20
    67ea:	37 95       	ror	r19
    67ec:	27 95       	ror	r18
    67ee:	ba 95       	dec	r27
    67f0:	b9 f7       	brne	.-18     	; 0x67e0 <__fixunssfdi+0x46>
    67f2:	0e f4       	brtc	.+2      	; 0x67f6 <__fixunssfdi+0x5c>
    67f4:	4e d0       	rcall	.+156    	; 0x6892 <__fp_negdi>
    67f6:	88 94       	clc
    67f8:	08 95       	ret
    67fa:	88 94       	clc
    67fc:	60 e0       	ldi	r22, 0x00	; 0
    67fe:	70 e0       	ldi	r23, 0x00	; 0
    6800:	cb 01       	movw	r24, r22
    6802:	08 95       	ret

00006804 <__floatundisf>:
    6804:	e8 94       	clt

00006806 <__fp_di2sf>:
    6806:	f9 2f       	mov	r31, r25
    6808:	96 eb       	ldi	r25, 0xB6	; 182
    680a:	ff 23       	and	r31, r31
    680c:	81 f0       	breq	.+32     	; 0x682e <__fp_di2sf+0x28>
    680e:	12 16       	cp	r1, r18
    6810:	13 06       	cpc	r1, r19
    6812:	14 06       	cpc	r1, r20
    6814:	44 0b       	sbc	r20, r20
    6816:	93 95       	inc	r25
    6818:	f6 95       	lsr	r31
    681a:	87 95       	ror	r24
    681c:	77 95       	ror	r23
    681e:	67 95       	ror	r22
    6820:	57 95       	ror	r21
    6822:	40 40       	sbci	r20, 0x00	; 0
    6824:	ff 23       	and	r31, r31
    6826:	b9 f7       	brne	.-18     	; 0x6816 <__fp_di2sf+0x10>
    6828:	1b c0       	rjmp	.+54     	; 0x6860 <__fp_di2sf+0x5a>
    682a:	99 27       	eor	r25, r25
    682c:	08 95       	ret
    682e:	88 23       	and	r24, r24
    6830:	51 f4       	brne	.+20     	; 0x6846 <__fp_di2sf+0x40>
    6832:	98 50       	subi	r25, 0x08	; 8
    6834:	d2 f7       	brpl	.-12     	; 0x682a <__fp_di2sf+0x24>
    6836:	87 2b       	or	r24, r23
    6838:	76 2f       	mov	r23, r22
    683a:	65 2f       	mov	r22, r21
    683c:	54 2f       	mov	r21, r20
    683e:	43 2f       	mov	r20, r19
    6840:	32 2f       	mov	r19, r18
    6842:	20 e0       	ldi	r18, 0x00	; 0
    6844:	b1 f3       	breq	.-20     	; 0x6832 <__fp_di2sf+0x2c>
    6846:	12 16       	cp	r1, r18
    6848:	13 06       	cpc	r1, r19
    684a:	14 06       	cpc	r1, r20
    684c:	44 0b       	sbc	r20, r20
    684e:	88 23       	and	r24, r24
    6850:	3a f0       	brmi	.+14     	; 0x6860 <__fp_di2sf+0x5a>
    6852:	9a 95       	dec	r25
    6854:	44 0f       	add	r20, r20
    6856:	55 1f       	adc	r21, r21
    6858:	66 1f       	adc	r22, r22
    685a:	77 1f       	adc	r23, r23
    685c:	88 1f       	adc	r24, r24
    685e:	ca f7       	brpl	.-14     	; 0x6852 <__fp_di2sf+0x4c>
    6860:	55 23       	and	r21, r21
    6862:	4a f4       	brpl	.+18     	; 0x6876 <__fp_di2sf+0x70>
    6864:	44 0f       	add	r20, r20
    6866:	55 1f       	adc	r21, r21
    6868:	11 f4       	brne	.+4      	; 0x686e <__fp_di2sf+0x68>
    686a:	60 ff       	sbrs	r22, 0
    686c:	04 c0       	rjmp	.+8      	; 0x6876 <__fp_di2sf+0x70>
    686e:	6f 5f       	subi	r22, 0xFF	; 255
    6870:	7f 4f       	sbci	r23, 0xFF	; 255
    6872:	8f 4f       	sbci	r24, 0xFF	; 255
    6874:	9f 4f       	sbci	r25, 0xFF	; 255
    6876:	88 0f       	add	r24, r24
    6878:	96 95       	lsr	r25
    687a:	87 95       	ror	r24
    687c:	97 f9       	bld	r25, 7
    687e:	08 95       	ret

00006880 <__fp_inf>:
    6880:	97 f9       	bld	r25, 7
    6882:	9f 67       	ori	r25, 0x7F	; 127
    6884:	80 e8       	ldi	r24, 0x80	; 128
    6886:	70 e0       	ldi	r23, 0x00	; 0
    6888:	60 e0       	ldi	r22, 0x00	; 0
    688a:	08 95       	ret

0000688c <__fp_nan>:
    688c:	9f ef       	ldi	r25, 0xFF	; 255
    688e:	80 ec       	ldi	r24, 0xC0	; 192
    6890:	08 95       	ret

00006892 <__fp_negdi>:
    6892:	90 95       	com	r25
    6894:	80 95       	com	r24
    6896:	70 95       	com	r23
    6898:	60 95       	com	r22
    689a:	50 95       	com	r21
    689c:	40 95       	com	r20
    689e:	30 95       	com	r19
    68a0:	21 95       	neg	r18
    68a2:	3f 4f       	sbci	r19, 0xFF	; 255
    68a4:	4f 4f       	sbci	r20, 0xFF	; 255
    68a6:	5f 4f       	sbci	r21, 0xFF	; 255
    68a8:	6f 4f       	sbci	r22, 0xFF	; 255
    68aa:	7f 4f       	sbci	r23, 0xFF	; 255
    68ac:	8f 4f       	sbci	r24, 0xFF	; 255
    68ae:	9f 4f       	sbci	r25, 0xFF	; 255
    68b0:	08 95       	ret

000068b2 <__fp_pscA>:
    68b2:	00 24       	eor	r0, r0
    68b4:	0a 94       	dec	r0
    68b6:	16 16       	cp	r1, r22
    68b8:	17 06       	cpc	r1, r23
    68ba:	18 06       	cpc	r1, r24
    68bc:	09 06       	cpc	r0, r25
    68be:	08 95       	ret

000068c0 <__fp_pscB>:
    68c0:	00 24       	eor	r0, r0
    68c2:	0a 94       	dec	r0
    68c4:	12 16       	cp	r1, r18
    68c6:	13 06       	cpc	r1, r19
    68c8:	14 06       	cpc	r1, r20
    68ca:	05 06       	cpc	r0, r21
    68cc:	08 95       	ret

000068ce <__fp_round>:
    68ce:	09 2e       	mov	r0, r25
    68d0:	03 94       	inc	r0
    68d2:	00 0c       	add	r0, r0
    68d4:	11 f4       	brne	.+4      	; 0x68da <__fp_round+0xc>
    68d6:	88 23       	and	r24, r24
    68d8:	52 f0       	brmi	.+20     	; 0x68ee <__fp_round+0x20>
    68da:	bb 0f       	add	r27, r27
    68dc:	40 f4       	brcc	.+16     	; 0x68ee <__fp_round+0x20>
    68de:	bf 2b       	or	r27, r31
    68e0:	11 f4       	brne	.+4      	; 0x68e6 <__fp_round+0x18>
    68e2:	60 ff       	sbrs	r22, 0
    68e4:	04 c0       	rjmp	.+8      	; 0x68ee <__fp_round+0x20>
    68e6:	6f 5f       	subi	r22, 0xFF	; 255
    68e8:	7f 4f       	sbci	r23, 0xFF	; 255
    68ea:	8f 4f       	sbci	r24, 0xFF	; 255
    68ec:	9f 4f       	sbci	r25, 0xFF	; 255
    68ee:	08 95       	ret

000068f0 <__fp_split3>:
    68f0:	57 fd       	sbrc	r21, 7
    68f2:	90 58       	subi	r25, 0x80	; 128
    68f4:	44 0f       	add	r20, r20
    68f6:	55 1f       	adc	r21, r21
    68f8:	59 f0       	breq	.+22     	; 0x6910 <__fp_splitA+0x10>
    68fa:	5f 3f       	cpi	r21, 0xFF	; 255
    68fc:	71 f0       	breq	.+28     	; 0x691a <__fp_splitA+0x1a>
    68fe:	47 95       	ror	r20

00006900 <__fp_splitA>:
    6900:	88 0f       	add	r24, r24
    6902:	97 fb       	bst	r25, 7
    6904:	99 1f       	adc	r25, r25
    6906:	61 f0       	breq	.+24     	; 0x6920 <__fp_splitA+0x20>
    6908:	9f 3f       	cpi	r25, 0xFF	; 255
    690a:	79 f0       	breq	.+30     	; 0x692a <__fp_splitA+0x2a>
    690c:	87 95       	ror	r24
    690e:	08 95       	ret
    6910:	12 16       	cp	r1, r18
    6912:	13 06       	cpc	r1, r19
    6914:	14 06       	cpc	r1, r20
    6916:	55 1f       	adc	r21, r21
    6918:	f2 cf       	rjmp	.-28     	; 0x68fe <__fp_split3+0xe>
    691a:	46 95       	lsr	r20
    691c:	f1 df       	rcall	.-30     	; 0x6900 <__fp_splitA>
    691e:	08 c0       	rjmp	.+16     	; 0x6930 <__fp_splitA+0x30>
    6920:	16 16       	cp	r1, r22
    6922:	17 06       	cpc	r1, r23
    6924:	18 06       	cpc	r1, r24
    6926:	99 1f       	adc	r25, r25
    6928:	f1 cf       	rjmp	.-30     	; 0x690c <__fp_splitA+0xc>
    692a:	86 95       	lsr	r24
    692c:	71 05       	cpc	r23, r1
    692e:	61 05       	cpc	r22, r1
    6930:	08 94       	sec
    6932:	08 95       	ret

00006934 <__fp_zero>:
    6934:	e8 94       	clt

00006936 <__fp_szero>:
    6936:	bb 27       	eor	r27, r27
    6938:	66 27       	eor	r22, r22
    693a:	77 27       	eor	r23, r23
    693c:	cb 01       	movw	r24, r22
    693e:	97 f9       	bld	r25, 7
    6940:	08 95       	ret

00006942 <__udivmodhi4>:
    6942:	aa 1b       	sub	r26, r26
    6944:	bb 1b       	sub	r27, r27
    6946:	51 e1       	ldi	r21, 0x11	; 17
    6948:	07 c0       	rjmp	.+14     	; 0x6958 <__udivmodhi4_ep>

0000694a <__udivmodhi4_loop>:
    694a:	aa 1f       	adc	r26, r26
    694c:	bb 1f       	adc	r27, r27
    694e:	a6 17       	cp	r26, r22
    6950:	b7 07       	cpc	r27, r23
    6952:	10 f0       	brcs	.+4      	; 0x6958 <__udivmodhi4_ep>
    6954:	a6 1b       	sub	r26, r22
    6956:	b7 0b       	sbc	r27, r23

00006958 <__udivmodhi4_ep>:
    6958:	88 1f       	adc	r24, r24
    695a:	99 1f       	adc	r25, r25
    695c:	5a 95       	dec	r21
    695e:	a9 f7       	brne	.-22     	; 0x694a <__udivmodhi4_loop>
    6960:	80 95       	com	r24
    6962:	90 95       	com	r25
    6964:	bc 01       	movw	r22, r24
    6966:	cd 01       	movw	r24, r26
    6968:	08 95       	ret

0000696a <__divmodhi4>:
    696a:	97 fb       	bst	r25, 7
    696c:	07 2e       	mov	r0, r23
    696e:	16 f4       	brtc	.+4      	; 0x6974 <__divmodhi4+0xa>
    6970:	00 94       	com	r0
    6972:	06 d0       	rcall	.+12     	; 0x6980 <__divmodhi4_neg1>
    6974:	77 fd       	sbrc	r23, 7
    6976:	08 d0       	rcall	.+16     	; 0x6988 <__divmodhi4_neg2>
    6978:	e4 df       	rcall	.-56     	; 0x6942 <__udivmodhi4>
    697a:	07 fc       	sbrc	r0, 7
    697c:	05 d0       	rcall	.+10     	; 0x6988 <__divmodhi4_neg2>
    697e:	3e f4       	brtc	.+14     	; 0x698e <__divmodhi4_exit>

00006980 <__divmodhi4_neg1>:
    6980:	90 95       	com	r25
    6982:	81 95       	neg	r24
    6984:	9f 4f       	sbci	r25, 0xFF	; 255
    6986:	08 95       	ret

00006988 <__divmodhi4_neg2>:
    6988:	70 95       	com	r23
    698a:	61 95       	neg	r22
    698c:	7f 4f       	sbci	r23, 0xFF	; 255

0000698e <__divmodhi4_exit>:
    698e:	08 95       	ret

00006990 <__udivmodsi4>:
    6990:	a1 e2       	ldi	r26, 0x21	; 33
    6992:	1a 2e       	mov	r1, r26
    6994:	aa 1b       	sub	r26, r26
    6996:	bb 1b       	sub	r27, r27
    6998:	fd 01       	movw	r30, r26
    699a:	0d c0       	rjmp	.+26     	; 0x69b6 <__udivmodsi4_ep>

0000699c <__udivmodsi4_loop>:
    699c:	aa 1f       	adc	r26, r26
    699e:	bb 1f       	adc	r27, r27
    69a0:	ee 1f       	adc	r30, r30
    69a2:	ff 1f       	adc	r31, r31
    69a4:	a2 17       	cp	r26, r18
    69a6:	b3 07       	cpc	r27, r19
    69a8:	e4 07       	cpc	r30, r20
    69aa:	f5 07       	cpc	r31, r21
    69ac:	20 f0       	brcs	.+8      	; 0x69b6 <__udivmodsi4_ep>
    69ae:	a2 1b       	sub	r26, r18
    69b0:	b3 0b       	sbc	r27, r19
    69b2:	e4 0b       	sbc	r30, r20
    69b4:	f5 0b       	sbc	r31, r21

000069b6 <__udivmodsi4_ep>:
    69b6:	66 1f       	adc	r22, r22
    69b8:	77 1f       	adc	r23, r23
    69ba:	88 1f       	adc	r24, r24
    69bc:	99 1f       	adc	r25, r25
    69be:	1a 94       	dec	r1
    69c0:	69 f7       	brne	.-38     	; 0x699c <__udivmodsi4_loop>
    69c2:	60 95       	com	r22
    69c4:	70 95       	com	r23
    69c6:	80 95       	com	r24
    69c8:	90 95       	com	r25
    69ca:	9b 01       	movw	r18, r22
    69cc:	ac 01       	movw	r20, r24
    69ce:	bd 01       	movw	r22, r26
    69d0:	cf 01       	movw	r24, r30
    69d2:	08 95       	ret

000069d4 <__umoddi3>:
    69d4:	68 94       	set
    69d6:	01 c0       	rjmp	.+2      	; 0x69da <__udivdi3_umoddi3>

000069d8 <__udivdi3>:
    69d8:	e8 94       	clt

000069da <__udivdi3_umoddi3>:
    69da:	8f 92       	push	r8
    69dc:	9f 92       	push	r9
    69de:	cf 93       	push	r28
    69e0:	df 93       	push	r29
    69e2:	05 d0       	rcall	.+10     	; 0x69ee <__udivmod64>
    69e4:	df 91       	pop	r29
    69e6:	cf 91       	pop	r28
    69e8:	9f 90       	pop	r9
    69ea:	8f 90       	pop	r8
    69ec:	08 95       	ret

000069ee <__udivmod64>:
    69ee:	88 24       	eor	r8, r8
    69f0:	99 24       	eor	r9, r9
    69f2:	f4 01       	movw	r30, r8
    69f4:	e4 01       	movw	r28, r8
    69f6:	b0 e4       	ldi	r27, 0x40	; 64
    69f8:	9f 93       	push	r25
    69fa:	aa 27       	eor	r26, r26
    69fc:	9a 15       	cp	r25, r10
    69fe:	8b 04       	cpc	r8, r11
    6a00:	9c 04       	cpc	r9, r12
    6a02:	ed 05       	cpc	r30, r13
    6a04:	fe 05       	cpc	r31, r14
    6a06:	cf 05       	cpc	r28, r15
    6a08:	d0 07       	cpc	r29, r16
    6a0a:	a1 07       	cpc	r26, r17
    6a0c:	98 f4       	brcc	.+38     	; 0x6a34 <__udivmod64+0x46>
    6a0e:	ad 2f       	mov	r26, r29
    6a10:	dc 2f       	mov	r29, r28
    6a12:	cf 2f       	mov	r28, r31
    6a14:	fe 2f       	mov	r31, r30
    6a16:	e9 2d       	mov	r30, r9
    6a18:	98 2c       	mov	r9, r8
    6a1a:	89 2e       	mov	r8, r25
    6a1c:	98 2f       	mov	r25, r24
    6a1e:	87 2f       	mov	r24, r23
    6a20:	76 2f       	mov	r23, r22
    6a22:	65 2f       	mov	r22, r21
    6a24:	54 2f       	mov	r21, r20
    6a26:	43 2f       	mov	r20, r19
    6a28:	32 2f       	mov	r19, r18
    6a2a:	22 27       	eor	r18, r18
    6a2c:	b8 50       	subi	r27, 0x08	; 8
    6a2e:	31 f7       	brne	.-52     	; 0x69fc <__udivmod64+0xe>
    6a30:	bf 91       	pop	r27
    6a32:	27 c0       	rjmp	.+78     	; 0x6a82 <__udivmod64+0x94>
    6a34:	1b 2e       	mov	r1, r27
    6a36:	bf 91       	pop	r27
    6a38:	bb 27       	eor	r27, r27
    6a3a:	22 0f       	add	r18, r18
    6a3c:	33 1f       	adc	r19, r19
    6a3e:	44 1f       	adc	r20, r20
    6a40:	55 1f       	adc	r21, r21
    6a42:	66 1f       	adc	r22, r22
    6a44:	77 1f       	adc	r23, r23
    6a46:	88 1f       	adc	r24, r24
    6a48:	99 1f       	adc	r25, r25
    6a4a:	88 1c       	adc	r8, r8
    6a4c:	99 1c       	adc	r9, r9
    6a4e:	ee 1f       	adc	r30, r30
    6a50:	ff 1f       	adc	r31, r31
    6a52:	cc 1f       	adc	r28, r28
    6a54:	dd 1f       	adc	r29, r29
    6a56:	aa 1f       	adc	r26, r26
    6a58:	bb 1f       	adc	r27, r27
    6a5a:	8a 14       	cp	r8, r10
    6a5c:	9b 04       	cpc	r9, r11
    6a5e:	ec 05       	cpc	r30, r12
    6a60:	fd 05       	cpc	r31, r13
    6a62:	ce 05       	cpc	r28, r14
    6a64:	df 05       	cpc	r29, r15
    6a66:	a0 07       	cpc	r26, r16
    6a68:	b1 07       	cpc	r27, r17
    6a6a:	48 f0       	brcs	.+18     	; 0x6a7e <__udivmod64+0x90>
    6a6c:	8a 18       	sub	r8, r10
    6a6e:	9b 08       	sbc	r9, r11
    6a70:	ec 09       	sbc	r30, r12
    6a72:	fd 09       	sbc	r31, r13
    6a74:	ce 09       	sbc	r28, r14
    6a76:	df 09       	sbc	r29, r15
    6a78:	a0 0b       	sbc	r26, r16
    6a7a:	b1 0b       	sbc	r27, r17
    6a7c:	21 60       	ori	r18, 0x01	; 1
    6a7e:	1a 94       	dec	r1
    6a80:	e1 f6       	brne	.-72     	; 0x6a3a <__udivmod64+0x4c>
    6a82:	2e f4       	brtc	.+10     	; 0x6a8e <__udivmod64+0xa0>
    6a84:	94 01       	movw	r18, r8
    6a86:	af 01       	movw	r20, r30
    6a88:	be 01       	movw	r22, r28
    6a8a:	cd 01       	movw	r24, r26
    6a8c:	00 0c       	add	r0, r0
    6a8e:	08 95       	ret

00006a90 <__ashldi3>:
    6a90:	0f 93       	push	r16
    6a92:	08 30       	cpi	r16, 0x08	; 8
    6a94:	90 f0       	brcs	.+36     	; 0x6aba <__ashldi3+0x2a>
    6a96:	98 2f       	mov	r25, r24
    6a98:	87 2f       	mov	r24, r23
    6a9a:	76 2f       	mov	r23, r22
    6a9c:	65 2f       	mov	r22, r21
    6a9e:	54 2f       	mov	r21, r20
    6aa0:	43 2f       	mov	r20, r19
    6aa2:	32 2f       	mov	r19, r18
    6aa4:	22 27       	eor	r18, r18
    6aa6:	08 50       	subi	r16, 0x08	; 8
    6aa8:	f4 cf       	rjmp	.-24     	; 0x6a92 <__ashldi3+0x2>
    6aaa:	22 0f       	add	r18, r18
    6aac:	33 1f       	adc	r19, r19
    6aae:	44 1f       	adc	r20, r20
    6ab0:	55 1f       	adc	r21, r21
    6ab2:	66 1f       	adc	r22, r22
    6ab4:	77 1f       	adc	r23, r23
    6ab6:	88 1f       	adc	r24, r24
    6ab8:	99 1f       	adc	r25, r25
    6aba:	0a 95       	dec	r16
    6abc:	b2 f7       	brpl	.-20     	; 0x6aaa <__ashldi3+0x1a>
    6abe:	0f 91       	pop	r16
    6ac0:	08 95       	ret

00006ac2 <__adddi3>:
    6ac2:	2a 0d       	add	r18, r10
    6ac4:	3b 1d       	adc	r19, r11
    6ac6:	4c 1d       	adc	r20, r12
    6ac8:	5d 1d       	adc	r21, r13
    6aca:	6e 1d       	adc	r22, r14
    6acc:	7f 1d       	adc	r23, r15
    6ace:	80 1f       	adc	r24, r16
    6ad0:	91 1f       	adc	r25, r17
    6ad2:	08 95       	ret

00006ad4 <__subdi3>:
    6ad4:	2a 19       	sub	r18, r10
    6ad6:	3b 09       	sbc	r19, r11
    6ad8:	4c 09       	sbc	r20, r12
    6ada:	5d 09       	sbc	r21, r13
    6adc:	6e 09       	sbc	r22, r14
    6ade:	7f 09       	sbc	r23, r15
    6ae0:	80 0b       	sbc	r24, r16
    6ae2:	91 0b       	sbc	r25, r17
    6ae4:	08 95       	ret

00006ae6 <malloc>:
    6ae6:	0f 93       	push	r16
    6ae8:	1f 93       	push	r17
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	82 30       	cpi	r24, 0x02	; 2
    6af0:	91 05       	cpc	r25, r1
    6af2:	10 f4       	brcc	.+4      	; 0x6af8 <malloc+0x12>
    6af4:	82 e0       	ldi	r24, 0x02	; 2
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	e0 91 1f 21 	lds	r30, 0x211F	; 0x80211f <__flp>
    6afc:	f0 91 20 21 	lds	r31, 0x2120	; 0x802120 <__flp+0x1>
    6b00:	20 e0       	ldi	r18, 0x00	; 0
    6b02:	30 e0       	ldi	r19, 0x00	; 0
    6b04:	a0 e0       	ldi	r26, 0x00	; 0
    6b06:	b0 e0       	ldi	r27, 0x00	; 0
    6b08:	30 97       	sbiw	r30, 0x00	; 0
    6b0a:	19 f1       	breq	.+70     	; 0x6b52 <malloc+0x6c>
    6b0c:	40 81       	ld	r20, Z
    6b0e:	51 81       	ldd	r21, Z+1	; 0x01
    6b10:	02 81       	ldd	r16, Z+2	; 0x02
    6b12:	13 81       	ldd	r17, Z+3	; 0x03
    6b14:	48 17       	cp	r20, r24
    6b16:	59 07       	cpc	r21, r25
    6b18:	c8 f0       	brcs	.+50     	; 0x6b4c <malloc+0x66>
    6b1a:	84 17       	cp	r24, r20
    6b1c:	95 07       	cpc	r25, r21
    6b1e:	69 f4       	brne	.+26     	; 0x6b3a <malloc+0x54>
    6b20:	10 97       	sbiw	r26, 0x00	; 0
    6b22:	31 f0       	breq	.+12     	; 0x6b30 <malloc+0x4a>
    6b24:	12 96       	adiw	r26, 0x02	; 2
    6b26:	0c 93       	st	X, r16
    6b28:	12 97       	sbiw	r26, 0x02	; 2
    6b2a:	13 96       	adiw	r26, 0x03	; 3
    6b2c:	1c 93       	st	X, r17
    6b2e:	27 c0       	rjmp	.+78     	; 0x6b7e <malloc+0x98>
    6b30:	00 93 1f 21 	sts	0x211F, r16	; 0x80211f <__flp>
    6b34:	10 93 20 21 	sts	0x2120, r17	; 0x802120 <__flp+0x1>
    6b38:	22 c0       	rjmp	.+68     	; 0x6b7e <malloc+0x98>
    6b3a:	21 15       	cp	r18, r1
    6b3c:	31 05       	cpc	r19, r1
    6b3e:	19 f0       	breq	.+6      	; 0x6b46 <malloc+0x60>
    6b40:	42 17       	cp	r20, r18
    6b42:	53 07       	cpc	r21, r19
    6b44:	18 f4       	brcc	.+6      	; 0x6b4c <malloc+0x66>
    6b46:	9a 01       	movw	r18, r20
    6b48:	bd 01       	movw	r22, r26
    6b4a:	ef 01       	movw	r28, r30
    6b4c:	df 01       	movw	r26, r30
    6b4e:	f8 01       	movw	r30, r16
    6b50:	db cf       	rjmp	.-74     	; 0x6b08 <malloc+0x22>
    6b52:	21 15       	cp	r18, r1
    6b54:	31 05       	cpc	r19, r1
    6b56:	f9 f0       	breq	.+62     	; 0x6b96 <malloc+0xb0>
    6b58:	28 1b       	sub	r18, r24
    6b5a:	39 0b       	sbc	r19, r25
    6b5c:	24 30       	cpi	r18, 0x04	; 4
    6b5e:	31 05       	cpc	r19, r1
    6b60:	80 f4       	brcc	.+32     	; 0x6b82 <malloc+0x9c>
    6b62:	8a 81       	ldd	r24, Y+2	; 0x02
    6b64:	9b 81       	ldd	r25, Y+3	; 0x03
    6b66:	61 15       	cp	r22, r1
    6b68:	71 05       	cpc	r23, r1
    6b6a:	21 f0       	breq	.+8      	; 0x6b74 <malloc+0x8e>
    6b6c:	fb 01       	movw	r30, r22
    6b6e:	82 83       	std	Z+2, r24	; 0x02
    6b70:	93 83       	std	Z+3, r25	; 0x03
    6b72:	04 c0       	rjmp	.+8      	; 0x6b7c <malloc+0x96>
    6b74:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <__flp>
    6b78:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <__flp+0x1>
    6b7c:	fe 01       	movw	r30, r28
    6b7e:	32 96       	adiw	r30, 0x02	; 2
    6b80:	44 c0       	rjmp	.+136    	; 0x6c0a <malloc+0x124>
    6b82:	fe 01       	movw	r30, r28
    6b84:	e2 0f       	add	r30, r18
    6b86:	f3 1f       	adc	r31, r19
    6b88:	81 93       	st	Z+, r24
    6b8a:	91 93       	st	Z+, r25
    6b8c:	22 50       	subi	r18, 0x02	; 2
    6b8e:	31 09       	sbc	r19, r1
    6b90:	28 83       	st	Y, r18
    6b92:	39 83       	std	Y+1, r19	; 0x01
    6b94:	3a c0       	rjmp	.+116    	; 0x6c0a <malloc+0x124>
    6b96:	20 91 1d 21 	lds	r18, 0x211D	; 0x80211d <__brkval>
    6b9a:	30 91 1e 21 	lds	r19, 0x211E	; 0x80211e <__brkval+0x1>
    6b9e:	23 2b       	or	r18, r19
    6ba0:	41 f4       	brne	.+16     	; 0x6bb2 <malloc+0xcc>
    6ba2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6ba6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6baa:	20 93 1d 21 	sts	0x211D, r18	; 0x80211d <__brkval>
    6bae:	30 93 1e 21 	sts	0x211E, r19	; 0x80211e <__brkval+0x1>
    6bb2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6bb6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6bba:	21 15       	cp	r18, r1
    6bbc:	31 05       	cpc	r19, r1
    6bbe:	41 f4       	brne	.+16     	; 0x6bd0 <malloc+0xea>
    6bc0:	2d b7       	in	r18, 0x3d	; 61
    6bc2:	3e b7       	in	r19, 0x3e	; 62
    6bc4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6bc8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6bcc:	24 1b       	sub	r18, r20
    6bce:	35 0b       	sbc	r19, r21
    6bd0:	e0 91 1d 21 	lds	r30, 0x211D	; 0x80211d <__brkval>
    6bd4:	f0 91 1e 21 	lds	r31, 0x211E	; 0x80211e <__brkval+0x1>
    6bd8:	e2 17       	cp	r30, r18
    6bda:	f3 07       	cpc	r31, r19
    6bdc:	a0 f4       	brcc	.+40     	; 0x6c06 <malloc+0x120>
    6bde:	2e 1b       	sub	r18, r30
    6be0:	3f 0b       	sbc	r19, r31
    6be2:	28 17       	cp	r18, r24
    6be4:	39 07       	cpc	r19, r25
    6be6:	78 f0       	brcs	.+30     	; 0x6c06 <malloc+0x120>
    6be8:	ac 01       	movw	r20, r24
    6bea:	4e 5f       	subi	r20, 0xFE	; 254
    6bec:	5f 4f       	sbci	r21, 0xFF	; 255
    6bee:	24 17       	cp	r18, r20
    6bf0:	35 07       	cpc	r19, r21
    6bf2:	48 f0       	brcs	.+18     	; 0x6c06 <malloc+0x120>
    6bf4:	4e 0f       	add	r20, r30
    6bf6:	5f 1f       	adc	r21, r31
    6bf8:	40 93 1d 21 	sts	0x211D, r20	; 0x80211d <__brkval>
    6bfc:	50 93 1e 21 	sts	0x211E, r21	; 0x80211e <__brkval+0x1>
    6c00:	81 93       	st	Z+, r24
    6c02:	91 93       	st	Z+, r25
    6c04:	02 c0       	rjmp	.+4      	; 0x6c0a <malloc+0x124>
    6c06:	e0 e0       	ldi	r30, 0x00	; 0
    6c08:	f0 e0       	ldi	r31, 0x00	; 0
    6c0a:	cf 01       	movw	r24, r30
    6c0c:	df 91       	pop	r29
    6c0e:	cf 91       	pop	r28
    6c10:	1f 91       	pop	r17
    6c12:	0f 91       	pop	r16
    6c14:	08 95       	ret

00006c16 <free>:
    6c16:	cf 93       	push	r28
    6c18:	df 93       	push	r29
    6c1a:	00 97       	sbiw	r24, 0x00	; 0
    6c1c:	09 f4       	brne	.+2      	; 0x6c20 <free+0xa>
    6c1e:	81 c0       	rjmp	.+258    	; 0x6d22 <free+0x10c>
    6c20:	fc 01       	movw	r30, r24
    6c22:	32 97       	sbiw	r30, 0x02	; 2
    6c24:	12 82       	std	Z+2, r1	; 0x02
    6c26:	13 82       	std	Z+3, r1	; 0x03
    6c28:	a0 91 1f 21 	lds	r26, 0x211F	; 0x80211f <__flp>
    6c2c:	b0 91 20 21 	lds	r27, 0x2120	; 0x802120 <__flp+0x1>
    6c30:	10 97       	sbiw	r26, 0x00	; 0
    6c32:	81 f4       	brne	.+32     	; 0x6c54 <free+0x3e>
    6c34:	20 81       	ld	r18, Z
    6c36:	31 81       	ldd	r19, Z+1	; 0x01
    6c38:	82 0f       	add	r24, r18
    6c3a:	93 1f       	adc	r25, r19
    6c3c:	20 91 1d 21 	lds	r18, 0x211D	; 0x80211d <__brkval>
    6c40:	30 91 1e 21 	lds	r19, 0x211E	; 0x80211e <__brkval+0x1>
    6c44:	28 17       	cp	r18, r24
    6c46:	39 07       	cpc	r19, r25
    6c48:	51 f5       	brne	.+84     	; 0x6c9e <free+0x88>
    6c4a:	e0 93 1d 21 	sts	0x211D, r30	; 0x80211d <__brkval>
    6c4e:	f0 93 1e 21 	sts	0x211E, r31	; 0x80211e <__brkval+0x1>
    6c52:	67 c0       	rjmp	.+206    	; 0x6d22 <free+0x10c>
    6c54:	ed 01       	movw	r28, r26
    6c56:	20 e0       	ldi	r18, 0x00	; 0
    6c58:	30 e0       	ldi	r19, 0x00	; 0
    6c5a:	ce 17       	cp	r28, r30
    6c5c:	df 07       	cpc	r29, r31
    6c5e:	40 f4       	brcc	.+16     	; 0x6c70 <free+0x5a>
    6c60:	4a 81       	ldd	r20, Y+2	; 0x02
    6c62:	5b 81       	ldd	r21, Y+3	; 0x03
    6c64:	9e 01       	movw	r18, r28
    6c66:	41 15       	cp	r20, r1
    6c68:	51 05       	cpc	r21, r1
    6c6a:	f1 f0       	breq	.+60     	; 0x6ca8 <free+0x92>
    6c6c:	ea 01       	movw	r28, r20
    6c6e:	f5 cf       	rjmp	.-22     	; 0x6c5a <free+0x44>
    6c70:	c2 83       	std	Z+2, r28	; 0x02
    6c72:	d3 83       	std	Z+3, r29	; 0x03
    6c74:	40 81       	ld	r20, Z
    6c76:	51 81       	ldd	r21, Z+1	; 0x01
    6c78:	84 0f       	add	r24, r20
    6c7a:	95 1f       	adc	r25, r21
    6c7c:	c8 17       	cp	r28, r24
    6c7e:	d9 07       	cpc	r29, r25
    6c80:	59 f4       	brne	.+22     	; 0x6c98 <free+0x82>
    6c82:	88 81       	ld	r24, Y
    6c84:	99 81       	ldd	r25, Y+1	; 0x01
    6c86:	84 0f       	add	r24, r20
    6c88:	95 1f       	adc	r25, r21
    6c8a:	02 96       	adiw	r24, 0x02	; 2
    6c8c:	80 83       	st	Z, r24
    6c8e:	91 83       	std	Z+1, r25	; 0x01
    6c90:	8a 81       	ldd	r24, Y+2	; 0x02
    6c92:	9b 81       	ldd	r25, Y+3	; 0x03
    6c94:	82 83       	std	Z+2, r24	; 0x02
    6c96:	93 83       	std	Z+3, r25	; 0x03
    6c98:	21 15       	cp	r18, r1
    6c9a:	31 05       	cpc	r19, r1
    6c9c:	29 f4       	brne	.+10     	; 0x6ca8 <free+0x92>
    6c9e:	e0 93 1f 21 	sts	0x211F, r30	; 0x80211f <__flp>
    6ca2:	f0 93 20 21 	sts	0x2120, r31	; 0x802120 <__flp+0x1>
    6ca6:	3d c0       	rjmp	.+122    	; 0x6d22 <free+0x10c>
    6ca8:	e9 01       	movw	r28, r18
    6caa:	ea 83       	std	Y+2, r30	; 0x02
    6cac:	fb 83       	std	Y+3, r31	; 0x03
    6cae:	49 91       	ld	r20, Y+
    6cb0:	59 91       	ld	r21, Y+
    6cb2:	c4 0f       	add	r28, r20
    6cb4:	d5 1f       	adc	r29, r21
    6cb6:	ec 17       	cp	r30, r28
    6cb8:	fd 07       	cpc	r31, r29
    6cba:	61 f4       	brne	.+24     	; 0x6cd4 <free+0xbe>
    6cbc:	80 81       	ld	r24, Z
    6cbe:	91 81       	ldd	r25, Z+1	; 0x01
    6cc0:	84 0f       	add	r24, r20
    6cc2:	95 1f       	adc	r25, r21
    6cc4:	02 96       	adiw	r24, 0x02	; 2
    6cc6:	e9 01       	movw	r28, r18
    6cc8:	88 83       	st	Y, r24
    6cca:	99 83       	std	Y+1, r25	; 0x01
    6ccc:	82 81       	ldd	r24, Z+2	; 0x02
    6cce:	93 81       	ldd	r25, Z+3	; 0x03
    6cd0:	8a 83       	std	Y+2, r24	; 0x02
    6cd2:	9b 83       	std	Y+3, r25	; 0x03
    6cd4:	e0 e0       	ldi	r30, 0x00	; 0
    6cd6:	f0 e0       	ldi	r31, 0x00	; 0
    6cd8:	12 96       	adiw	r26, 0x02	; 2
    6cda:	8d 91       	ld	r24, X+
    6cdc:	9c 91       	ld	r25, X
    6cde:	13 97       	sbiw	r26, 0x03	; 3
    6ce0:	00 97       	sbiw	r24, 0x00	; 0
    6ce2:	19 f0       	breq	.+6      	; 0x6cea <free+0xd4>
    6ce4:	fd 01       	movw	r30, r26
    6ce6:	dc 01       	movw	r26, r24
    6ce8:	f7 cf       	rjmp	.-18     	; 0x6cd8 <free+0xc2>
    6cea:	8d 91       	ld	r24, X+
    6cec:	9c 91       	ld	r25, X
    6cee:	11 97       	sbiw	r26, 0x01	; 1
    6cf0:	9d 01       	movw	r18, r26
    6cf2:	2e 5f       	subi	r18, 0xFE	; 254
    6cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    6cf6:	82 0f       	add	r24, r18
    6cf8:	93 1f       	adc	r25, r19
    6cfa:	20 91 1d 21 	lds	r18, 0x211D	; 0x80211d <__brkval>
    6cfe:	30 91 1e 21 	lds	r19, 0x211E	; 0x80211e <__brkval+0x1>
    6d02:	28 17       	cp	r18, r24
    6d04:	39 07       	cpc	r19, r25
    6d06:	69 f4       	brne	.+26     	; 0x6d22 <free+0x10c>
    6d08:	30 97       	sbiw	r30, 0x00	; 0
    6d0a:	29 f4       	brne	.+10     	; 0x6d16 <free+0x100>
    6d0c:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <__flp>
    6d10:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <__flp+0x1>
    6d14:	02 c0       	rjmp	.+4      	; 0x6d1a <free+0x104>
    6d16:	12 82       	std	Z+2, r1	; 0x02
    6d18:	13 82       	std	Z+3, r1	; 0x03
    6d1a:	a0 93 1d 21 	sts	0x211D, r26	; 0x80211d <__brkval>
    6d1e:	b0 93 1e 21 	sts	0x211E, r27	; 0x80211e <__brkval+0x1>
    6d22:	df 91       	pop	r29
    6d24:	cf 91       	pop	r28
    6d26:	08 95       	ret

00006d28 <strlen>:
    6d28:	fc 01       	movw	r30, r24
    6d2a:	01 90       	ld	r0, Z+
    6d2c:	00 20       	and	r0, r0
    6d2e:	e9 f7       	brne	.-6      	; 0x6d2a <strlen+0x2>
    6d30:	80 95       	com	r24
    6d32:	90 95       	com	r25
    6d34:	8e 0f       	add	r24, r30
    6d36:	9f 1f       	adc	r25, r31
    6d38:	08 95       	ret

00006d3a <fdevopen>:
    6d3a:	0f 93       	push	r16
    6d3c:	1f 93       	push	r17
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	00 97       	sbiw	r24, 0x00	; 0
    6d44:	31 f4       	brne	.+12     	; 0x6d52 <fdevopen+0x18>
    6d46:	61 15       	cp	r22, r1
    6d48:	71 05       	cpc	r23, r1
    6d4a:	19 f4       	brne	.+6      	; 0x6d52 <fdevopen+0x18>
    6d4c:	80 e0       	ldi	r24, 0x00	; 0
    6d4e:	90 e0       	ldi	r25, 0x00	; 0
    6d50:	39 c0       	rjmp	.+114    	; 0x6dc4 <fdevopen+0x8a>
    6d52:	8b 01       	movw	r16, r22
    6d54:	ec 01       	movw	r28, r24
    6d56:	6e e0       	ldi	r22, 0x0E	; 14
    6d58:	70 e0       	ldi	r23, 0x00	; 0
    6d5a:	81 e0       	ldi	r24, 0x01	; 1
    6d5c:	90 e0       	ldi	r25, 0x00	; 0
    6d5e:	99 d2       	rcall	.+1330   	; 0x7292 <calloc>
    6d60:	fc 01       	movw	r30, r24
    6d62:	89 2b       	or	r24, r25
    6d64:	99 f3       	breq	.-26     	; 0x6d4c <fdevopen+0x12>
    6d66:	80 e8       	ldi	r24, 0x80	; 128
    6d68:	83 83       	std	Z+3, r24	; 0x03
    6d6a:	01 15       	cp	r16, r1
    6d6c:	11 05       	cpc	r17, r1
    6d6e:	71 f0       	breq	.+28     	; 0x6d8c <fdevopen+0x52>
    6d70:	02 87       	std	Z+10, r16	; 0x0a
    6d72:	13 87       	std	Z+11, r17	; 0x0b
    6d74:	81 e8       	ldi	r24, 0x81	; 129
    6d76:	83 83       	std	Z+3, r24	; 0x03
    6d78:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <__iob>
    6d7c:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <__iob+0x1>
    6d80:	89 2b       	or	r24, r25
    6d82:	21 f4       	brne	.+8      	; 0x6d8c <fdevopen+0x52>
    6d84:	e0 93 21 21 	sts	0x2121, r30	; 0x802121 <__iob>
    6d88:	f0 93 22 21 	sts	0x2122, r31	; 0x802122 <__iob+0x1>
    6d8c:	20 97       	sbiw	r28, 0x00	; 0
    6d8e:	c9 f0       	breq	.+50     	; 0x6dc2 <fdevopen+0x88>
    6d90:	c0 87       	std	Z+8, r28	; 0x08
    6d92:	d1 87       	std	Z+9, r29	; 0x09
    6d94:	83 81       	ldd	r24, Z+3	; 0x03
    6d96:	82 60       	ori	r24, 0x02	; 2
    6d98:	83 83       	std	Z+3, r24	; 0x03
    6d9a:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <__iob+0x2>
    6d9e:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <__iob+0x3>
    6da2:	89 2b       	or	r24, r25
    6da4:	71 f4       	brne	.+28     	; 0x6dc2 <fdevopen+0x88>
    6da6:	e0 93 23 21 	sts	0x2123, r30	; 0x802123 <__iob+0x2>
    6daa:	f0 93 24 21 	sts	0x2124, r31	; 0x802124 <__iob+0x3>
    6dae:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <__iob+0x4>
    6db2:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <__iob+0x5>
    6db6:	89 2b       	or	r24, r25
    6db8:	21 f4       	brne	.+8      	; 0x6dc2 <fdevopen+0x88>
    6dba:	e0 93 25 21 	sts	0x2125, r30	; 0x802125 <__iob+0x4>
    6dbe:	f0 93 26 21 	sts	0x2126, r31	; 0x802126 <__iob+0x5>
    6dc2:	cf 01       	movw	r24, r30
    6dc4:	df 91       	pop	r29
    6dc6:	cf 91       	pop	r28
    6dc8:	1f 91       	pop	r17
    6dca:	0f 91       	pop	r16
    6dcc:	08 95       	ret

00006dce <printf>:
    6dce:	cf 93       	push	r28
    6dd0:	df 93       	push	r29
    6dd2:	cd b7       	in	r28, 0x3d	; 61
    6dd4:	de b7       	in	r29, 0x3e	; 62
    6dd6:	ae 01       	movw	r20, r28
    6dd8:	4a 5f       	subi	r20, 0xFA	; 250
    6dda:	5f 4f       	sbci	r21, 0xFF	; 255
    6ddc:	fa 01       	movw	r30, r20
    6dde:	61 91       	ld	r22, Z+
    6de0:	71 91       	ld	r23, Z+
    6de2:	af 01       	movw	r20, r30
    6de4:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <__iob+0x2>
    6de8:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <__iob+0x3>
    6dec:	5b d0       	rcall	.+182    	; 0x6ea4 <vfprintf>
    6dee:	df 91       	pop	r29
    6df0:	cf 91       	pop	r28
    6df2:	08 95       	ret

00006df4 <puts>:
    6df4:	0f 93       	push	r16
    6df6:	1f 93       	push	r17
    6df8:	cf 93       	push	r28
    6dfa:	df 93       	push	r29
    6dfc:	e0 91 23 21 	lds	r30, 0x2123	; 0x802123 <__iob+0x2>
    6e00:	f0 91 24 21 	lds	r31, 0x2124	; 0x802124 <__iob+0x3>
    6e04:	23 81       	ldd	r18, Z+3	; 0x03
    6e06:	21 ff       	sbrs	r18, 1
    6e08:	1b c0       	rjmp	.+54     	; 0x6e40 <puts+0x4c>
    6e0a:	8c 01       	movw	r16, r24
    6e0c:	d0 e0       	ldi	r29, 0x00	; 0
    6e0e:	c0 e0       	ldi	r28, 0x00	; 0
    6e10:	f8 01       	movw	r30, r16
    6e12:	81 91       	ld	r24, Z+
    6e14:	8f 01       	movw	r16, r30
    6e16:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <__iob+0x2>
    6e1a:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <__iob+0x3>
    6e1e:	db 01       	movw	r26, r22
    6e20:	18 96       	adiw	r26, 0x08	; 8
    6e22:	ed 91       	ld	r30, X+
    6e24:	fc 91       	ld	r31, X
    6e26:	19 97       	sbiw	r26, 0x09	; 9
    6e28:	88 23       	and	r24, r24
    6e2a:	31 f0       	breq	.+12     	; 0x6e38 <puts+0x44>
    6e2c:	19 95       	eicall
    6e2e:	89 2b       	or	r24, r25
    6e30:	79 f3       	breq	.-34     	; 0x6e10 <puts+0x1c>
    6e32:	df ef       	ldi	r29, 0xFF	; 255
    6e34:	cf ef       	ldi	r28, 0xFF	; 255
    6e36:	ec cf       	rjmp	.-40     	; 0x6e10 <puts+0x1c>
    6e38:	8a e0       	ldi	r24, 0x0A	; 10
    6e3a:	19 95       	eicall
    6e3c:	89 2b       	or	r24, r25
    6e3e:	19 f0       	breq	.+6      	; 0x6e46 <puts+0x52>
    6e40:	8f ef       	ldi	r24, 0xFF	; 255
    6e42:	9f ef       	ldi	r25, 0xFF	; 255
    6e44:	02 c0       	rjmp	.+4      	; 0x6e4a <puts+0x56>
    6e46:	8d 2f       	mov	r24, r29
    6e48:	9c 2f       	mov	r25, r28
    6e4a:	df 91       	pop	r29
    6e4c:	cf 91       	pop	r28
    6e4e:	1f 91       	pop	r17
    6e50:	0f 91       	pop	r16
    6e52:	08 95       	ret

00006e54 <sprintf>:
    6e54:	0f 93       	push	r16
    6e56:	1f 93       	push	r17
    6e58:	cf 93       	push	r28
    6e5a:	df 93       	push	r29
    6e5c:	cd b7       	in	r28, 0x3d	; 61
    6e5e:	de b7       	in	r29, 0x3e	; 62
    6e60:	2e 97       	sbiw	r28, 0x0e	; 14
    6e62:	cd bf       	out	0x3d, r28	; 61
    6e64:	de bf       	out	0x3e, r29	; 62
    6e66:	0e 89       	ldd	r16, Y+22	; 0x16
    6e68:	1f 89       	ldd	r17, Y+23	; 0x17
    6e6a:	86 e0       	ldi	r24, 0x06	; 6
    6e6c:	8c 83       	std	Y+4, r24	; 0x04
    6e6e:	09 83       	std	Y+1, r16	; 0x01
    6e70:	1a 83       	std	Y+2, r17	; 0x02
    6e72:	8f ef       	ldi	r24, 0xFF	; 255
    6e74:	9f e7       	ldi	r25, 0x7F	; 127
    6e76:	8d 83       	std	Y+5, r24	; 0x05
    6e78:	9e 83       	std	Y+6, r25	; 0x06
    6e7a:	ae 01       	movw	r20, r28
    6e7c:	46 5e       	subi	r20, 0xE6	; 230
    6e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6e80:	68 8d       	ldd	r22, Y+24	; 0x18
    6e82:	79 8d       	ldd	r23, Y+25	; 0x19
    6e84:	ce 01       	movw	r24, r28
    6e86:	01 96       	adiw	r24, 0x01	; 1
    6e88:	0d d0       	rcall	.+26     	; 0x6ea4 <vfprintf>
    6e8a:	ef 81       	ldd	r30, Y+7	; 0x07
    6e8c:	f8 85       	ldd	r31, Y+8	; 0x08
    6e8e:	e0 0f       	add	r30, r16
    6e90:	f1 1f       	adc	r31, r17
    6e92:	10 82       	st	Z, r1
    6e94:	2e 96       	adiw	r28, 0x0e	; 14
    6e96:	cd bf       	out	0x3d, r28	; 61
    6e98:	de bf       	out	0x3e, r29	; 62
    6e9a:	df 91       	pop	r29
    6e9c:	cf 91       	pop	r28
    6e9e:	1f 91       	pop	r17
    6ea0:	0f 91       	pop	r16
    6ea2:	08 95       	ret

00006ea4 <vfprintf>:
    6ea4:	2f 92       	push	r2
    6ea6:	3f 92       	push	r3
    6ea8:	4f 92       	push	r4
    6eaa:	5f 92       	push	r5
    6eac:	6f 92       	push	r6
    6eae:	7f 92       	push	r7
    6eb0:	8f 92       	push	r8
    6eb2:	9f 92       	push	r9
    6eb4:	af 92       	push	r10
    6eb6:	bf 92       	push	r11
    6eb8:	cf 92       	push	r12
    6eba:	df 92       	push	r13
    6ebc:	ef 92       	push	r14
    6ebe:	ff 92       	push	r15
    6ec0:	0f 93       	push	r16
    6ec2:	1f 93       	push	r17
    6ec4:	cf 93       	push	r28
    6ec6:	df 93       	push	r29
    6ec8:	cd b7       	in	r28, 0x3d	; 61
    6eca:	de b7       	in	r29, 0x3e	; 62
    6ecc:	2b 97       	sbiw	r28, 0x0b	; 11
    6ece:	cd bf       	out	0x3d, r28	; 61
    6ed0:	de bf       	out	0x3e, r29	; 62
    6ed2:	6c 01       	movw	r12, r24
    6ed4:	7b 01       	movw	r14, r22
    6ed6:	8a 01       	movw	r16, r20
    6ed8:	fc 01       	movw	r30, r24
    6eda:	16 82       	std	Z+6, r1	; 0x06
    6edc:	17 82       	std	Z+7, r1	; 0x07
    6ede:	83 81       	ldd	r24, Z+3	; 0x03
    6ee0:	81 ff       	sbrs	r24, 1
    6ee2:	bf c1       	rjmp	.+894    	; 0x7262 <vfprintf+0x3be>
    6ee4:	ce 01       	movw	r24, r28
    6ee6:	01 96       	adiw	r24, 0x01	; 1
    6ee8:	3c 01       	movw	r6, r24
    6eea:	f6 01       	movw	r30, r12
    6eec:	93 81       	ldd	r25, Z+3	; 0x03
    6eee:	f7 01       	movw	r30, r14
    6ef0:	93 fd       	sbrc	r25, 3
    6ef2:	85 91       	lpm	r24, Z+
    6ef4:	93 ff       	sbrs	r25, 3
    6ef6:	81 91       	ld	r24, Z+
    6ef8:	7f 01       	movw	r14, r30
    6efa:	88 23       	and	r24, r24
    6efc:	09 f4       	brne	.+2      	; 0x6f00 <vfprintf+0x5c>
    6efe:	ad c1       	rjmp	.+858    	; 0x725a <vfprintf+0x3b6>
    6f00:	85 32       	cpi	r24, 0x25	; 37
    6f02:	39 f4       	brne	.+14     	; 0x6f12 <vfprintf+0x6e>
    6f04:	93 fd       	sbrc	r25, 3
    6f06:	85 91       	lpm	r24, Z+
    6f08:	93 ff       	sbrs	r25, 3
    6f0a:	81 91       	ld	r24, Z+
    6f0c:	7f 01       	movw	r14, r30
    6f0e:	85 32       	cpi	r24, 0x25	; 37
    6f10:	21 f4       	brne	.+8      	; 0x6f1a <vfprintf+0x76>
    6f12:	b6 01       	movw	r22, r12
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	f4 d1       	rcall	.+1000   	; 0x7300 <fputc>
    6f18:	e8 cf       	rjmp	.-48     	; 0x6eea <vfprintf+0x46>
    6f1a:	91 2c       	mov	r9, r1
    6f1c:	21 2c       	mov	r2, r1
    6f1e:	31 2c       	mov	r3, r1
    6f20:	ff e1       	ldi	r31, 0x1F	; 31
    6f22:	f3 15       	cp	r31, r3
    6f24:	d8 f0       	brcs	.+54     	; 0x6f5c <vfprintf+0xb8>
    6f26:	8b 32       	cpi	r24, 0x2B	; 43
    6f28:	79 f0       	breq	.+30     	; 0x6f48 <vfprintf+0xa4>
    6f2a:	38 f4       	brcc	.+14     	; 0x6f3a <vfprintf+0x96>
    6f2c:	80 32       	cpi	r24, 0x20	; 32
    6f2e:	79 f0       	breq	.+30     	; 0x6f4e <vfprintf+0xaa>
    6f30:	83 32       	cpi	r24, 0x23	; 35
    6f32:	a1 f4       	brne	.+40     	; 0x6f5c <vfprintf+0xb8>
    6f34:	23 2d       	mov	r18, r3
    6f36:	20 61       	ori	r18, 0x10	; 16
    6f38:	1d c0       	rjmp	.+58     	; 0x6f74 <vfprintf+0xd0>
    6f3a:	8d 32       	cpi	r24, 0x2D	; 45
    6f3c:	61 f0       	breq	.+24     	; 0x6f56 <vfprintf+0xb2>
    6f3e:	80 33       	cpi	r24, 0x30	; 48
    6f40:	69 f4       	brne	.+26     	; 0x6f5c <vfprintf+0xb8>
    6f42:	23 2d       	mov	r18, r3
    6f44:	21 60       	ori	r18, 0x01	; 1
    6f46:	16 c0       	rjmp	.+44     	; 0x6f74 <vfprintf+0xd0>
    6f48:	83 2d       	mov	r24, r3
    6f4a:	82 60       	ori	r24, 0x02	; 2
    6f4c:	38 2e       	mov	r3, r24
    6f4e:	e3 2d       	mov	r30, r3
    6f50:	e4 60       	ori	r30, 0x04	; 4
    6f52:	3e 2e       	mov	r3, r30
    6f54:	2a c0       	rjmp	.+84     	; 0x6faa <vfprintf+0x106>
    6f56:	f3 2d       	mov	r31, r3
    6f58:	f8 60       	ori	r31, 0x08	; 8
    6f5a:	1d c0       	rjmp	.+58     	; 0x6f96 <vfprintf+0xf2>
    6f5c:	37 fc       	sbrc	r3, 7
    6f5e:	2d c0       	rjmp	.+90     	; 0x6fba <vfprintf+0x116>
    6f60:	20 ed       	ldi	r18, 0xD0	; 208
    6f62:	28 0f       	add	r18, r24
    6f64:	2a 30       	cpi	r18, 0x0A	; 10
    6f66:	40 f0       	brcs	.+16     	; 0x6f78 <vfprintf+0xd4>
    6f68:	8e 32       	cpi	r24, 0x2E	; 46
    6f6a:	b9 f4       	brne	.+46     	; 0x6f9a <vfprintf+0xf6>
    6f6c:	36 fc       	sbrc	r3, 6
    6f6e:	75 c1       	rjmp	.+746    	; 0x725a <vfprintf+0x3b6>
    6f70:	23 2d       	mov	r18, r3
    6f72:	20 64       	ori	r18, 0x40	; 64
    6f74:	32 2e       	mov	r3, r18
    6f76:	19 c0       	rjmp	.+50     	; 0x6faa <vfprintf+0x106>
    6f78:	36 fe       	sbrs	r3, 6
    6f7a:	06 c0       	rjmp	.+12     	; 0x6f88 <vfprintf+0xe4>
    6f7c:	8a e0       	ldi	r24, 0x0A	; 10
    6f7e:	98 9e       	mul	r9, r24
    6f80:	20 0d       	add	r18, r0
    6f82:	11 24       	eor	r1, r1
    6f84:	92 2e       	mov	r9, r18
    6f86:	11 c0       	rjmp	.+34     	; 0x6faa <vfprintf+0x106>
    6f88:	ea e0       	ldi	r30, 0x0A	; 10
    6f8a:	2e 9e       	mul	r2, r30
    6f8c:	20 0d       	add	r18, r0
    6f8e:	11 24       	eor	r1, r1
    6f90:	22 2e       	mov	r2, r18
    6f92:	f3 2d       	mov	r31, r3
    6f94:	f0 62       	ori	r31, 0x20	; 32
    6f96:	3f 2e       	mov	r3, r31
    6f98:	08 c0       	rjmp	.+16     	; 0x6faa <vfprintf+0x106>
    6f9a:	8c 36       	cpi	r24, 0x6C	; 108
    6f9c:	21 f4       	brne	.+8      	; 0x6fa6 <vfprintf+0x102>
    6f9e:	83 2d       	mov	r24, r3
    6fa0:	80 68       	ori	r24, 0x80	; 128
    6fa2:	38 2e       	mov	r3, r24
    6fa4:	02 c0       	rjmp	.+4      	; 0x6faa <vfprintf+0x106>
    6fa6:	88 36       	cpi	r24, 0x68	; 104
    6fa8:	41 f4       	brne	.+16     	; 0x6fba <vfprintf+0x116>
    6faa:	f7 01       	movw	r30, r14
    6fac:	93 fd       	sbrc	r25, 3
    6fae:	85 91       	lpm	r24, Z+
    6fb0:	93 ff       	sbrs	r25, 3
    6fb2:	81 91       	ld	r24, Z+
    6fb4:	7f 01       	movw	r14, r30
    6fb6:	81 11       	cpse	r24, r1
    6fb8:	b3 cf       	rjmp	.-154    	; 0x6f20 <vfprintf+0x7c>
    6fba:	98 2f       	mov	r25, r24
    6fbc:	9f 7d       	andi	r25, 0xDF	; 223
    6fbe:	95 54       	subi	r25, 0x45	; 69
    6fc0:	93 30       	cpi	r25, 0x03	; 3
    6fc2:	28 f4       	brcc	.+10     	; 0x6fce <vfprintf+0x12a>
    6fc4:	0c 5f       	subi	r16, 0xFC	; 252
    6fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    6fc8:	9f e3       	ldi	r25, 0x3F	; 63
    6fca:	99 83       	std	Y+1, r25	; 0x01
    6fcc:	0d c0       	rjmp	.+26     	; 0x6fe8 <vfprintf+0x144>
    6fce:	83 36       	cpi	r24, 0x63	; 99
    6fd0:	31 f0       	breq	.+12     	; 0x6fde <vfprintf+0x13a>
    6fd2:	83 37       	cpi	r24, 0x73	; 115
    6fd4:	71 f0       	breq	.+28     	; 0x6ff2 <vfprintf+0x14e>
    6fd6:	83 35       	cpi	r24, 0x53	; 83
    6fd8:	09 f0       	breq	.+2      	; 0x6fdc <vfprintf+0x138>
    6fda:	55 c0       	rjmp	.+170    	; 0x7086 <vfprintf+0x1e2>
    6fdc:	20 c0       	rjmp	.+64     	; 0x701e <vfprintf+0x17a>
    6fde:	f8 01       	movw	r30, r16
    6fe0:	80 81       	ld	r24, Z
    6fe2:	89 83       	std	Y+1, r24	; 0x01
    6fe4:	0e 5f       	subi	r16, 0xFE	; 254
    6fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    6fe8:	88 24       	eor	r8, r8
    6fea:	83 94       	inc	r8
    6fec:	91 2c       	mov	r9, r1
    6fee:	53 01       	movw	r10, r6
    6ff0:	12 c0       	rjmp	.+36     	; 0x7016 <vfprintf+0x172>
    6ff2:	28 01       	movw	r4, r16
    6ff4:	f2 e0       	ldi	r31, 0x02	; 2
    6ff6:	4f 0e       	add	r4, r31
    6ff8:	51 1c       	adc	r5, r1
    6ffa:	f8 01       	movw	r30, r16
    6ffc:	a0 80       	ld	r10, Z
    6ffe:	b1 80       	ldd	r11, Z+1	; 0x01
    7000:	36 fe       	sbrs	r3, 6
    7002:	03 c0       	rjmp	.+6      	; 0x700a <vfprintf+0x166>
    7004:	69 2d       	mov	r22, r9
    7006:	70 e0       	ldi	r23, 0x00	; 0
    7008:	02 c0       	rjmp	.+4      	; 0x700e <vfprintf+0x16a>
    700a:	6f ef       	ldi	r22, 0xFF	; 255
    700c:	7f ef       	ldi	r23, 0xFF	; 255
    700e:	c5 01       	movw	r24, r10
    7010:	6c d1       	rcall	.+728    	; 0x72ea <strnlen>
    7012:	4c 01       	movw	r8, r24
    7014:	82 01       	movw	r16, r4
    7016:	f3 2d       	mov	r31, r3
    7018:	ff 77       	andi	r31, 0x7F	; 127
    701a:	3f 2e       	mov	r3, r31
    701c:	15 c0       	rjmp	.+42     	; 0x7048 <vfprintf+0x1a4>
    701e:	28 01       	movw	r4, r16
    7020:	22 e0       	ldi	r18, 0x02	; 2
    7022:	42 0e       	add	r4, r18
    7024:	51 1c       	adc	r5, r1
    7026:	f8 01       	movw	r30, r16
    7028:	a0 80       	ld	r10, Z
    702a:	b1 80       	ldd	r11, Z+1	; 0x01
    702c:	36 fe       	sbrs	r3, 6
    702e:	03 c0       	rjmp	.+6      	; 0x7036 <vfprintf+0x192>
    7030:	69 2d       	mov	r22, r9
    7032:	70 e0       	ldi	r23, 0x00	; 0
    7034:	02 c0       	rjmp	.+4      	; 0x703a <vfprintf+0x196>
    7036:	6f ef       	ldi	r22, 0xFF	; 255
    7038:	7f ef       	ldi	r23, 0xFF	; 255
    703a:	c5 01       	movw	r24, r10
    703c:	44 d1       	rcall	.+648    	; 0x72c6 <strnlen_P>
    703e:	4c 01       	movw	r8, r24
    7040:	f3 2d       	mov	r31, r3
    7042:	f0 68       	ori	r31, 0x80	; 128
    7044:	3f 2e       	mov	r3, r31
    7046:	82 01       	movw	r16, r4
    7048:	33 fc       	sbrc	r3, 3
    704a:	19 c0       	rjmp	.+50     	; 0x707e <vfprintf+0x1da>
    704c:	82 2d       	mov	r24, r2
    704e:	90 e0       	ldi	r25, 0x00	; 0
    7050:	88 16       	cp	r8, r24
    7052:	99 06       	cpc	r9, r25
    7054:	a0 f4       	brcc	.+40     	; 0x707e <vfprintf+0x1da>
    7056:	b6 01       	movw	r22, r12
    7058:	80 e2       	ldi	r24, 0x20	; 32
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	51 d1       	rcall	.+674    	; 0x7300 <fputc>
    705e:	2a 94       	dec	r2
    7060:	f5 cf       	rjmp	.-22     	; 0x704c <vfprintf+0x1a8>
    7062:	f5 01       	movw	r30, r10
    7064:	37 fc       	sbrc	r3, 7
    7066:	85 91       	lpm	r24, Z+
    7068:	37 fe       	sbrs	r3, 7
    706a:	81 91       	ld	r24, Z+
    706c:	5f 01       	movw	r10, r30
    706e:	b6 01       	movw	r22, r12
    7070:	90 e0       	ldi	r25, 0x00	; 0
    7072:	46 d1       	rcall	.+652    	; 0x7300 <fputc>
    7074:	21 10       	cpse	r2, r1
    7076:	2a 94       	dec	r2
    7078:	21 e0       	ldi	r18, 0x01	; 1
    707a:	82 1a       	sub	r8, r18
    707c:	91 08       	sbc	r9, r1
    707e:	81 14       	cp	r8, r1
    7080:	91 04       	cpc	r9, r1
    7082:	79 f7       	brne	.-34     	; 0x7062 <vfprintf+0x1be>
    7084:	e1 c0       	rjmp	.+450    	; 0x7248 <vfprintf+0x3a4>
    7086:	84 36       	cpi	r24, 0x64	; 100
    7088:	11 f0       	breq	.+4      	; 0x708e <vfprintf+0x1ea>
    708a:	89 36       	cpi	r24, 0x69	; 105
    708c:	39 f5       	brne	.+78     	; 0x70dc <vfprintf+0x238>
    708e:	f8 01       	movw	r30, r16
    7090:	37 fe       	sbrs	r3, 7
    7092:	07 c0       	rjmp	.+14     	; 0x70a2 <vfprintf+0x1fe>
    7094:	60 81       	ld	r22, Z
    7096:	71 81       	ldd	r23, Z+1	; 0x01
    7098:	82 81       	ldd	r24, Z+2	; 0x02
    709a:	93 81       	ldd	r25, Z+3	; 0x03
    709c:	0c 5f       	subi	r16, 0xFC	; 252
    709e:	1f 4f       	sbci	r17, 0xFF	; 255
    70a0:	08 c0       	rjmp	.+16     	; 0x70b2 <vfprintf+0x20e>
    70a2:	60 81       	ld	r22, Z
    70a4:	71 81       	ldd	r23, Z+1	; 0x01
    70a6:	07 2e       	mov	r0, r23
    70a8:	00 0c       	add	r0, r0
    70aa:	88 0b       	sbc	r24, r24
    70ac:	99 0b       	sbc	r25, r25
    70ae:	0e 5f       	subi	r16, 0xFE	; 254
    70b0:	1f 4f       	sbci	r17, 0xFF	; 255
    70b2:	f3 2d       	mov	r31, r3
    70b4:	ff 76       	andi	r31, 0x6F	; 111
    70b6:	3f 2e       	mov	r3, r31
    70b8:	97 ff       	sbrs	r25, 7
    70ba:	09 c0       	rjmp	.+18     	; 0x70ce <vfprintf+0x22a>
    70bc:	90 95       	com	r25
    70be:	80 95       	com	r24
    70c0:	70 95       	com	r23
    70c2:	61 95       	neg	r22
    70c4:	7f 4f       	sbci	r23, 0xFF	; 255
    70c6:	8f 4f       	sbci	r24, 0xFF	; 255
    70c8:	9f 4f       	sbci	r25, 0xFF	; 255
    70ca:	f0 68       	ori	r31, 0x80	; 128
    70cc:	3f 2e       	mov	r3, r31
    70ce:	2a e0       	ldi	r18, 0x0A	; 10
    70d0:	30 e0       	ldi	r19, 0x00	; 0
    70d2:	a3 01       	movw	r20, r6
    70d4:	51 d1       	rcall	.+674    	; 0x7378 <__ultoa_invert>
    70d6:	88 2e       	mov	r8, r24
    70d8:	86 18       	sub	r8, r6
    70da:	44 c0       	rjmp	.+136    	; 0x7164 <vfprintf+0x2c0>
    70dc:	85 37       	cpi	r24, 0x75	; 117
    70de:	31 f4       	brne	.+12     	; 0x70ec <vfprintf+0x248>
    70e0:	23 2d       	mov	r18, r3
    70e2:	2f 7e       	andi	r18, 0xEF	; 239
    70e4:	b2 2e       	mov	r11, r18
    70e6:	2a e0       	ldi	r18, 0x0A	; 10
    70e8:	30 e0       	ldi	r19, 0x00	; 0
    70ea:	25 c0       	rjmp	.+74     	; 0x7136 <vfprintf+0x292>
    70ec:	93 2d       	mov	r25, r3
    70ee:	99 7f       	andi	r25, 0xF9	; 249
    70f0:	b9 2e       	mov	r11, r25
    70f2:	8f 36       	cpi	r24, 0x6F	; 111
    70f4:	c1 f0       	breq	.+48     	; 0x7126 <vfprintf+0x282>
    70f6:	18 f4       	brcc	.+6      	; 0x70fe <vfprintf+0x25a>
    70f8:	88 35       	cpi	r24, 0x58	; 88
    70fa:	79 f0       	breq	.+30     	; 0x711a <vfprintf+0x276>
    70fc:	ae c0       	rjmp	.+348    	; 0x725a <vfprintf+0x3b6>
    70fe:	80 37       	cpi	r24, 0x70	; 112
    7100:	19 f0       	breq	.+6      	; 0x7108 <vfprintf+0x264>
    7102:	88 37       	cpi	r24, 0x78	; 120
    7104:	21 f0       	breq	.+8      	; 0x710e <vfprintf+0x26a>
    7106:	a9 c0       	rjmp	.+338    	; 0x725a <vfprintf+0x3b6>
    7108:	e9 2f       	mov	r30, r25
    710a:	e0 61       	ori	r30, 0x10	; 16
    710c:	be 2e       	mov	r11, r30
    710e:	b4 fe       	sbrs	r11, 4
    7110:	0d c0       	rjmp	.+26     	; 0x712c <vfprintf+0x288>
    7112:	fb 2d       	mov	r31, r11
    7114:	f4 60       	ori	r31, 0x04	; 4
    7116:	bf 2e       	mov	r11, r31
    7118:	09 c0       	rjmp	.+18     	; 0x712c <vfprintf+0x288>
    711a:	34 fe       	sbrs	r3, 4
    711c:	0a c0       	rjmp	.+20     	; 0x7132 <vfprintf+0x28e>
    711e:	29 2f       	mov	r18, r25
    7120:	26 60       	ori	r18, 0x06	; 6
    7122:	b2 2e       	mov	r11, r18
    7124:	06 c0       	rjmp	.+12     	; 0x7132 <vfprintf+0x28e>
    7126:	28 e0       	ldi	r18, 0x08	; 8
    7128:	30 e0       	ldi	r19, 0x00	; 0
    712a:	05 c0       	rjmp	.+10     	; 0x7136 <vfprintf+0x292>
    712c:	20 e1       	ldi	r18, 0x10	; 16
    712e:	30 e0       	ldi	r19, 0x00	; 0
    7130:	02 c0       	rjmp	.+4      	; 0x7136 <vfprintf+0x292>
    7132:	20 e1       	ldi	r18, 0x10	; 16
    7134:	32 e0       	ldi	r19, 0x02	; 2
    7136:	f8 01       	movw	r30, r16
    7138:	b7 fe       	sbrs	r11, 7
    713a:	07 c0       	rjmp	.+14     	; 0x714a <vfprintf+0x2a6>
    713c:	60 81       	ld	r22, Z
    713e:	71 81       	ldd	r23, Z+1	; 0x01
    7140:	82 81       	ldd	r24, Z+2	; 0x02
    7142:	93 81       	ldd	r25, Z+3	; 0x03
    7144:	0c 5f       	subi	r16, 0xFC	; 252
    7146:	1f 4f       	sbci	r17, 0xFF	; 255
    7148:	06 c0       	rjmp	.+12     	; 0x7156 <vfprintf+0x2b2>
    714a:	60 81       	ld	r22, Z
    714c:	71 81       	ldd	r23, Z+1	; 0x01
    714e:	80 e0       	ldi	r24, 0x00	; 0
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	0e 5f       	subi	r16, 0xFE	; 254
    7154:	1f 4f       	sbci	r17, 0xFF	; 255
    7156:	a3 01       	movw	r20, r6
    7158:	0f d1       	rcall	.+542    	; 0x7378 <__ultoa_invert>
    715a:	88 2e       	mov	r8, r24
    715c:	86 18       	sub	r8, r6
    715e:	fb 2d       	mov	r31, r11
    7160:	ff 77       	andi	r31, 0x7F	; 127
    7162:	3f 2e       	mov	r3, r31
    7164:	36 fe       	sbrs	r3, 6
    7166:	0d c0       	rjmp	.+26     	; 0x7182 <vfprintf+0x2de>
    7168:	23 2d       	mov	r18, r3
    716a:	2e 7f       	andi	r18, 0xFE	; 254
    716c:	a2 2e       	mov	r10, r18
    716e:	89 14       	cp	r8, r9
    7170:	58 f4       	brcc	.+22     	; 0x7188 <vfprintf+0x2e4>
    7172:	34 fe       	sbrs	r3, 4
    7174:	0b c0       	rjmp	.+22     	; 0x718c <vfprintf+0x2e8>
    7176:	32 fc       	sbrc	r3, 2
    7178:	09 c0       	rjmp	.+18     	; 0x718c <vfprintf+0x2e8>
    717a:	83 2d       	mov	r24, r3
    717c:	8e 7e       	andi	r24, 0xEE	; 238
    717e:	a8 2e       	mov	r10, r24
    7180:	05 c0       	rjmp	.+10     	; 0x718c <vfprintf+0x2e8>
    7182:	b8 2c       	mov	r11, r8
    7184:	a3 2c       	mov	r10, r3
    7186:	03 c0       	rjmp	.+6      	; 0x718e <vfprintf+0x2ea>
    7188:	b8 2c       	mov	r11, r8
    718a:	01 c0       	rjmp	.+2      	; 0x718e <vfprintf+0x2ea>
    718c:	b9 2c       	mov	r11, r9
    718e:	a4 fe       	sbrs	r10, 4
    7190:	0f c0       	rjmp	.+30     	; 0x71b0 <vfprintf+0x30c>
    7192:	fe 01       	movw	r30, r28
    7194:	e8 0d       	add	r30, r8
    7196:	f1 1d       	adc	r31, r1
    7198:	80 81       	ld	r24, Z
    719a:	80 33       	cpi	r24, 0x30	; 48
    719c:	21 f4       	brne	.+8      	; 0x71a6 <vfprintf+0x302>
    719e:	9a 2d       	mov	r25, r10
    71a0:	99 7e       	andi	r25, 0xE9	; 233
    71a2:	a9 2e       	mov	r10, r25
    71a4:	09 c0       	rjmp	.+18     	; 0x71b8 <vfprintf+0x314>
    71a6:	a2 fe       	sbrs	r10, 2
    71a8:	06 c0       	rjmp	.+12     	; 0x71b6 <vfprintf+0x312>
    71aa:	b3 94       	inc	r11
    71ac:	b3 94       	inc	r11
    71ae:	04 c0       	rjmp	.+8      	; 0x71b8 <vfprintf+0x314>
    71b0:	8a 2d       	mov	r24, r10
    71b2:	86 78       	andi	r24, 0x86	; 134
    71b4:	09 f0       	breq	.+2      	; 0x71b8 <vfprintf+0x314>
    71b6:	b3 94       	inc	r11
    71b8:	a3 fc       	sbrc	r10, 3
    71ba:	10 c0       	rjmp	.+32     	; 0x71dc <vfprintf+0x338>
    71bc:	a0 fe       	sbrs	r10, 0
    71be:	06 c0       	rjmp	.+12     	; 0x71cc <vfprintf+0x328>
    71c0:	b2 14       	cp	r11, r2
    71c2:	80 f4       	brcc	.+32     	; 0x71e4 <vfprintf+0x340>
    71c4:	28 0c       	add	r2, r8
    71c6:	92 2c       	mov	r9, r2
    71c8:	9b 18       	sub	r9, r11
    71ca:	0d c0       	rjmp	.+26     	; 0x71e6 <vfprintf+0x342>
    71cc:	b2 14       	cp	r11, r2
    71ce:	58 f4       	brcc	.+22     	; 0x71e6 <vfprintf+0x342>
    71d0:	b6 01       	movw	r22, r12
    71d2:	80 e2       	ldi	r24, 0x20	; 32
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	94 d0       	rcall	.+296    	; 0x7300 <fputc>
    71d8:	b3 94       	inc	r11
    71da:	f8 cf       	rjmp	.-16     	; 0x71cc <vfprintf+0x328>
    71dc:	b2 14       	cp	r11, r2
    71de:	18 f4       	brcc	.+6      	; 0x71e6 <vfprintf+0x342>
    71e0:	2b 18       	sub	r2, r11
    71e2:	02 c0       	rjmp	.+4      	; 0x71e8 <vfprintf+0x344>
    71e4:	98 2c       	mov	r9, r8
    71e6:	21 2c       	mov	r2, r1
    71e8:	a4 fe       	sbrs	r10, 4
    71ea:	0f c0       	rjmp	.+30     	; 0x720a <vfprintf+0x366>
    71ec:	b6 01       	movw	r22, r12
    71ee:	80 e3       	ldi	r24, 0x30	; 48
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	86 d0       	rcall	.+268    	; 0x7300 <fputc>
    71f4:	a2 fe       	sbrs	r10, 2
    71f6:	16 c0       	rjmp	.+44     	; 0x7224 <vfprintf+0x380>
    71f8:	a1 fc       	sbrc	r10, 1
    71fa:	03 c0       	rjmp	.+6      	; 0x7202 <vfprintf+0x35e>
    71fc:	88 e7       	ldi	r24, 0x78	; 120
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	02 c0       	rjmp	.+4      	; 0x7206 <vfprintf+0x362>
    7202:	88 e5       	ldi	r24, 0x58	; 88
    7204:	90 e0       	ldi	r25, 0x00	; 0
    7206:	b6 01       	movw	r22, r12
    7208:	0c c0       	rjmp	.+24     	; 0x7222 <vfprintf+0x37e>
    720a:	8a 2d       	mov	r24, r10
    720c:	86 78       	andi	r24, 0x86	; 134
    720e:	51 f0       	breq	.+20     	; 0x7224 <vfprintf+0x380>
    7210:	a1 fe       	sbrs	r10, 1
    7212:	02 c0       	rjmp	.+4      	; 0x7218 <vfprintf+0x374>
    7214:	8b e2       	ldi	r24, 0x2B	; 43
    7216:	01 c0       	rjmp	.+2      	; 0x721a <vfprintf+0x376>
    7218:	80 e2       	ldi	r24, 0x20	; 32
    721a:	a7 fc       	sbrc	r10, 7
    721c:	8d e2       	ldi	r24, 0x2D	; 45
    721e:	b6 01       	movw	r22, r12
    7220:	90 e0       	ldi	r25, 0x00	; 0
    7222:	6e d0       	rcall	.+220    	; 0x7300 <fputc>
    7224:	89 14       	cp	r8, r9
    7226:	30 f4       	brcc	.+12     	; 0x7234 <vfprintf+0x390>
    7228:	b6 01       	movw	r22, r12
    722a:	80 e3       	ldi	r24, 0x30	; 48
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	68 d0       	rcall	.+208    	; 0x7300 <fputc>
    7230:	9a 94       	dec	r9
    7232:	f8 cf       	rjmp	.-16     	; 0x7224 <vfprintf+0x380>
    7234:	8a 94       	dec	r8
    7236:	f3 01       	movw	r30, r6
    7238:	e8 0d       	add	r30, r8
    723a:	f1 1d       	adc	r31, r1
    723c:	80 81       	ld	r24, Z
    723e:	b6 01       	movw	r22, r12
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	5e d0       	rcall	.+188    	; 0x7300 <fputc>
    7244:	81 10       	cpse	r8, r1
    7246:	f6 cf       	rjmp	.-20     	; 0x7234 <vfprintf+0x390>
    7248:	22 20       	and	r2, r2
    724a:	09 f4       	brne	.+2      	; 0x724e <vfprintf+0x3aa>
    724c:	4e ce       	rjmp	.-868    	; 0x6eea <vfprintf+0x46>
    724e:	b6 01       	movw	r22, r12
    7250:	80 e2       	ldi	r24, 0x20	; 32
    7252:	90 e0       	ldi	r25, 0x00	; 0
    7254:	55 d0       	rcall	.+170    	; 0x7300 <fputc>
    7256:	2a 94       	dec	r2
    7258:	f7 cf       	rjmp	.-18     	; 0x7248 <vfprintf+0x3a4>
    725a:	f6 01       	movw	r30, r12
    725c:	86 81       	ldd	r24, Z+6	; 0x06
    725e:	97 81       	ldd	r25, Z+7	; 0x07
    7260:	02 c0       	rjmp	.+4      	; 0x7266 <vfprintf+0x3c2>
    7262:	8f ef       	ldi	r24, 0xFF	; 255
    7264:	9f ef       	ldi	r25, 0xFF	; 255
    7266:	2b 96       	adiw	r28, 0x0b	; 11
    7268:	cd bf       	out	0x3d, r28	; 61
    726a:	de bf       	out	0x3e, r29	; 62
    726c:	df 91       	pop	r29
    726e:	cf 91       	pop	r28
    7270:	1f 91       	pop	r17
    7272:	0f 91       	pop	r16
    7274:	ff 90       	pop	r15
    7276:	ef 90       	pop	r14
    7278:	df 90       	pop	r13
    727a:	cf 90       	pop	r12
    727c:	bf 90       	pop	r11
    727e:	af 90       	pop	r10
    7280:	9f 90       	pop	r9
    7282:	8f 90       	pop	r8
    7284:	7f 90       	pop	r7
    7286:	6f 90       	pop	r6
    7288:	5f 90       	pop	r5
    728a:	4f 90       	pop	r4
    728c:	3f 90       	pop	r3
    728e:	2f 90       	pop	r2
    7290:	08 95       	ret

00007292 <calloc>:
    7292:	0f 93       	push	r16
    7294:	1f 93       	push	r17
    7296:	cf 93       	push	r28
    7298:	df 93       	push	r29
    729a:	86 9f       	mul	r24, r22
    729c:	80 01       	movw	r16, r0
    729e:	87 9f       	mul	r24, r23
    72a0:	10 0d       	add	r17, r0
    72a2:	96 9f       	mul	r25, r22
    72a4:	10 0d       	add	r17, r0
    72a6:	11 24       	eor	r1, r1
    72a8:	c8 01       	movw	r24, r16
    72aa:	1d dc       	rcall	.-1990   	; 0x6ae6 <malloc>
    72ac:	ec 01       	movw	r28, r24
    72ae:	00 97       	sbiw	r24, 0x00	; 0
    72b0:	21 f0       	breq	.+8      	; 0x72ba <calloc+0x28>
    72b2:	a8 01       	movw	r20, r16
    72b4:	60 e0       	ldi	r22, 0x00	; 0
    72b6:	70 e0       	ldi	r23, 0x00	; 0
    72b8:	11 d0       	rcall	.+34     	; 0x72dc <memset>
    72ba:	ce 01       	movw	r24, r28
    72bc:	df 91       	pop	r29
    72be:	cf 91       	pop	r28
    72c0:	1f 91       	pop	r17
    72c2:	0f 91       	pop	r16
    72c4:	08 95       	ret

000072c6 <strnlen_P>:
    72c6:	fc 01       	movw	r30, r24
    72c8:	05 90       	lpm	r0, Z+
    72ca:	61 50       	subi	r22, 0x01	; 1
    72cc:	70 40       	sbci	r23, 0x00	; 0
    72ce:	01 10       	cpse	r0, r1
    72d0:	d8 f7       	brcc	.-10     	; 0x72c8 <strnlen_P+0x2>
    72d2:	80 95       	com	r24
    72d4:	90 95       	com	r25
    72d6:	8e 0f       	add	r24, r30
    72d8:	9f 1f       	adc	r25, r31
    72da:	08 95       	ret

000072dc <memset>:
    72dc:	dc 01       	movw	r26, r24
    72de:	01 c0       	rjmp	.+2      	; 0x72e2 <memset+0x6>
    72e0:	6d 93       	st	X+, r22
    72e2:	41 50       	subi	r20, 0x01	; 1
    72e4:	50 40       	sbci	r21, 0x00	; 0
    72e6:	e0 f7       	brcc	.-8      	; 0x72e0 <memset+0x4>
    72e8:	08 95       	ret

000072ea <strnlen>:
    72ea:	fc 01       	movw	r30, r24
    72ec:	61 50       	subi	r22, 0x01	; 1
    72ee:	70 40       	sbci	r23, 0x00	; 0
    72f0:	01 90       	ld	r0, Z+
    72f2:	01 10       	cpse	r0, r1
    72f4:	d8 f7       	brcc	.-10     	; 0x72ec <strnlen+0x2>
    72f6:	80 95       	com	r24
    72f8:	90 95       	com	r25
    72fa:	8e 0f       	add	r24, r30
    72fc:	9f 1f       	adc	r25, r31
    72fe:	08 95       	ret

00007300 <fputc>:
    7300:	0f 93       	push	r16
    7302:	1f 93       	push	r17
    7304:	cf 93       	push	r28
    7306:	df 93       	push	r29
    7308:	fb 01       	movw	r30, r22
    730a:	23 81       	ldd	r18, Z+3	; 0x03
    730c:	21 fd       	sbrc	r18, 1
    730e:	03 c0       	rjmp	.+6      	; 0x7316 <fputc+0x16>
    7310:	8f ef       	ldi	r24, 0xFF	; 255
    7312:	9f ef       	ldi	r25, 0xFF	; 255
    7314:	2c c0       	rjmp	.+88     	; 0x736e <fputc+0x6e>
    7316:	22 ff       	sbrs	r18, 2
    7318:	16 c0       	rjmp	.+44     	; 0x7346 <fputc+0x46>
    731a:	46 81       	ldd	r20, Z+6	; 0x06
    731c:	57 81       	ldd	r21, Z+7	; 0x07
    731e:	24 81       	ldd	r18, Z+4	; 0x04
    7320:	35 81       	ldd	r19, Z+5	; 0x05
    7322:	42 17       	cp	r20, r18
    7324:	53 07       	cpc	r21, r19
    7326:	44 f4       	brge	.+16     	; 0x7338 <fputc+0x38>
    7328:	a0 81       	ld	r26, Z
    732a:	b1 81       	ldd	r27, Z+1	; 0x01
    732c:	9d 01       	movw	r18, r26
    732e:	2f 5f       	subi	r18, 0xFF	; 255
    7330:	3f 4f       	sbci	r19, 0xFF	; 255
    7332:	20 83       	st	Z, r18
    7334:	31 83       	std	Z+1, r19	; 0x01
    7336:	8c 93       	st	X, r24
    7338:	26 81       	ldd	r18, Z+6	; 0x06
    733a:	37 81       	ldd	r19, Z+7	; 0x07
    733c:	2f 5f       	subi	r18, 0xFF	; 255
    733e:	3f 4f       	sbci	r19, 0xFF	; 255
    7340:	26 83       	std	Z+6, r18	; 0x06
    7342:	37 83       	std	Z+7, r19	; 0x07
    7344:	14 c0       	rjmp	.+40     	; 0x736e <fputc+0x6e>
    7346:	8b 01       	movw	r16, r22
    7348:	ec 01       	movw	r28, r24
    734a:	fb 01       	movw	r30, r22
    734c:	00 84       	ldd	r0, Z+8	; 0x08
    734e:	f1 85       	ldd	r31, Z+9	; 0x09
    7350:	e0 2d       	mov	r30, r0
    7352:	19 95       	eicall
    7354:	89 2b       	or	r24, r25
    7356:	e1 f6       	brne	.-72     	; 0x7310 <fputc+0x10>
    7358:	d8 01       	movw	r26, r16
    735a:	16 96       	adiw	r26, 0x06	; 6
    735c:	8d 91       	ld	r24, X+
    735e:	9c 91       	ld	r25, X
    7360:	17 97       	sbiw	r26, 0x07	; 7
    7362:	01 96       	adiw	r24, 0x01	; 1
    7364:	16 96       	adiw	r26, 0x06	; 6
    7366:	8d 93       	st	X+, r24
    7368:	9c 93       	st	X, r25
    736a:	17 97       	sbiw	r26, 0x07	; 7
    736c:	ce 01       	movw	r24, r28
    736e:	df 91       	pop	r29
    7370:	cf 91       	pop	r28
    7372:	1f 91       	pop	r17
    7374:	0f 91       	pop	r16
    7376:	08 95       	ret

00007378 <__ultoa_invert>:
    7378:	fa 01       	movw	r30, r20
    737a:	aa 27       	eor	r26, r26
    737c:	28 30       	cpi	r18, 0x08	; 8
    737e:	51 f1       	breq	.+84     	; 0x73d4 <__ultoa_invert+0x5c>
    7380:	20 31       	cpi	r18, 0x10	; 16
    7382:	81 f1       	breq	.+96     	; 0x73e4 <__ultoa_invert+0x6c>
    7384:	e8 94       	clt
    7386:	6f 93       	push	r22
    7388:	6e 7f       	andi	r22, 0xFE	; 254
    738a:	6e 5f       	subi	r22, 0xFE	; 254
    738c:	7f 4f       	sbci	r23, 0xFF	; 255
    738e:	8f 4f       	sbci	r24, 0xFF	; 255
    7390:	9f 4f       	sbci	r25, 0xFF	; 255
    7392:	af 4f       	sbci	r26, 0xFF	; 255
    7394:	b1 e0       	ldi	r27, 0x01	; 1
    7396:	3e d0       	rcall	.+124    	; 0x7414 <__ultoa_invert+0x9c>
    7398:	b4 e0       	ldi	r27, 0x04	; 4
    739a:	3c d0       	rcall	.+120    	; 0x7414 <__ultoa_invert+0x9c>
    739c:	67 0f       	add	r22, r23
    739e:	78 1f       	adc	r23, r24
    73a0:	89 1f       	adc	r24, r25
    73a2:	9a 1f       	adc	r25, r26
    73a4:	a1 1d       	adc	r26, r1
    73a6:	68 0f       	add	r22, r24
    73a8:	79 1f       	adc	r23, r25
    73aa:	8a 1f       	adc	r24, r26
    73ac:	91 1d       	adc	r25, r1
    73ae:	a1 1d       	adc	r26, r1
    73b0:	6a 0f       	add	r22, r26
    73b2:	71 1d       	adc	r23, r1
    73b4:	81 1d       	adc	r24, r1
    73b6:	91 1d       	adc	r25, r1
    73b8:	a1 1d       	adc	r26, r1
    73ba:	20 d0       	rcall	.+64     	; 0x73fc <__ultoa_invert+0x84>
    73bc:	09 f4       	brne	.+2      	; 0x73c0 <__ultoa_invert+0x48>
    73be:	68 94       	set
    73c0:	3f 91       	pop	r19
    73c2:	2a e0       	ldi	r18, 0x0A	; 10
    73c4:	26 9f       	mul	r18, r22
    73c6:	11 24       	eor	r1, r1
    73c8:	30 19       	sub	r19, r0
    73ca:	30 5d       	subi	r19, 0xD0	; 208
    73cc:	31 93       	st	Z+, r19
    73ce:	de f6       	brtc	.-74     	; 0x7386 <__ultoa_invert+0xe>
    73d0:	cf 01       	movw	r24, r30
    73d2:	08 95       	ret
    73d4:	46 2f       	mov	r20, r22
    73d6:	47 70       	andi	r20, 0x07	; 7
    73d8:	40 5d       	subi	r20, 0xD0	; 208
    73da:	41 93       	st	Z+, r20
    73dc:	b3 e0       	ldi	r27, 0x03	; 3
    73de:	0f d0       	rcall	.+30     	; 0x73fe <__ultoa_invert+0x86>
    73e0:	c9 f7       	brne	.-14     	; 0x73d4 <__ultoa_invert+0x5c>
    73e2:	f6 cf       	rjmp	.-20     	; 0x73d0 <__ultoa_invert+0x58>
    73e4:	46 2f       	mov	r20, r22
    73e6:	4f 70       	andi	r20, 0x0F	; 15
    73e8:	40 5d       	subi	r20, 0xD0	; 208
    73ea:	4a 33       	cpi	r20, 0x3A	; 58
    73ec:	18 f0       	brcs	.+6      	; 0x73f4 <__ultoa_invert+0x7c>
    73ee:	49 5d       	subi	r20, 0xD9	; 217
    73f0:	31 fd       	sbrc	r19, 1
    73f2:	40 52       	subi	r20, 0x20	; 32
    73f4:	41 93       	st	Z+, r20
    73f6:	02 d0       	rcall	.+4      	; 0x73fc <__ultoa_invert+0x84>
    73f8:	a9 f7       	brne	.-22     	; 0x73e4 <__ultoa_invert+0x6c>
    73fa:	ea cf       	rjmp	.-44     	; 0x73d0 <__ultoa_invert+0x58>
    73fc:	b4 e0       	ldi	r27, 0x04	; 4
    73fe:	a6 95       	lsr	r26
    7400:	97 95       	ror	r25
    7402:	87 95       	ror	r24
    7404:	77 95       	ror	r23
    7406:	67 95       	ror	r22
    7408:	ba 95       	dec	r27
    740a:	c9 f7       	brne	.-14     	; 0x73fe <__ultoa_invert+0x86>
    740c:	00 97       	sbiw	r24, 0x00	; 0
    740e:	61 05       	cpc	r22, r1
    7410:	71 05       	cpc	r23, r1
    7412:	08 95       	ret
    7414:	9b 01       	movw	r18, r22
    7416:	ac 01       	movw	r20, r24
    7418:	0a 2e       	mov	r0, r26
    741a:	06 94       	lsr	r0
    741c:	57 95       	ror	r21
    741e:	47 95       	ror	r20
    7420:	37 95       	ror	r19
    7422:	27 95       	ror	r18
    7424:	ba 95       	dec	r27
    7426:	c9 f7       	brne	.-14     	; 0x741a <__ultoa_invert+0xa2>
    7428:	62 0f       	add	r22, r18
    742a:	73 1f       	adc	r23, r19
    742c:	84 1f       	adc	r24, r20
    742e:	95 1f       	adc	r25, r21
    7430:	a0 1d       	adc	r26, r0
    7432:	08 95       	ret

00007434 <_exit>:
    7434:	f8 94       	cli

00007436 <__stop_program>:
    7436:	ff cf       	rjmp	.-2      	; 0x7436 <__stop_program>
