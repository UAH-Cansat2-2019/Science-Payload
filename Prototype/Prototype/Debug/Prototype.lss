
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  00802000  00802000  00001d22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001d98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009d7b  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ad4  00000000  00000000  0000be23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003edc  00000000  00000000  000108f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001300  00000000  00000000  000147d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003d576  00000000  00000000  00015ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033ea  00000000  00000000  0005304a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00056434  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b3ea  00000000  00000000  000566f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	61 c1       	rjmp	.+706    	; 0x2ec <__vector_10>
      2a:	00 00       	nop
      2c:	82 c1       	rjmp	.+772    	; 0x332 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_13>
      38:	00 c2       	rjmp	.+1024   	; 0x43a <__vector_14>
      3a:	00 00       	nop
      3c:	36 c2       	rjmp	.+1132   	; 0x4aa <__vector_15>
      3e:	00 00       	nop
      40:	6c c2       	rjmp	.+1240   	; 0x51a <__vector_16>
      42:	00 00       	nop
      44:	a2 c2       	rjmp	.+1348   	; 0x58a <__vector_17>
      46:	00 00       	nop
      48:	d8 c2       	rjmp	.+1456   	; 0x5fa <__vector_18>
      4a:	00 00       	nop
      4c:	0e c3       	rjmp	.+1564   	; 0x66a <__vector_19>
      4e:	00 00       	nop
      50:	44 c3       	rjmp	.+1672   	; 0x6da <__vector_20>
      52:	00 00       	nop
      54:	7a c3       	rjmp	.+1780   	; 0x74a <__vector_21>
      56:	00 00       	nop
      58:	b0 c3       	rjmp	.+1888   	; 0x7ba <__vector_22>
      5a:	00 00       	nop
      5c:	e6 c3       	rjmp	.+1996   	; 0x82a <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_46>
      bc:	1e c6       	rjmp	.+3132   	; 0xcfa <__vector_47>
      be:	00 00       	nop
      c0:	54 c6       	rjmp	.+3240   	; 0xd6a <__vector_48>
      c2:	00 00       	nop
      c4:	8a c6       	rjmp	.+3348   	; 0xdda <__vector_49>
      c6:	00 00       	nop
      c8:	c0 c6       	rjmp	.+3456   	; 0xe4a <__vector_50>
      ca:	00 00       	nop
      cc:	f6 c6       	rjmp	.+3564   	; 0xeba <__vector_51>
      ce:	00 00       	nop
      d0:	2c c7       	rjmp	.+3672   	; 0xf2a <__vector_52>
      d2:	00 00       	nop
      d4:	62 c7       	rjmp	.+3780   	; 0xf9a <__vector_53>
      d6:	00 00       	nop
      d8:	98 c7       	rjmp	.+3888   	; 0x100a <__vector_54>
      da:	00 00       	nop
      dc:	ce c7       	rjmp	.+3996   	; 0x107a <__vector_55>
      de:	00 00       	nop
      e0:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_76>
     134:	b2 c3       	rjmp	.+1892   	; 0x89a <__vector_77>
     136:	00 00       	nop
     138:	e8 c3       	rjmp	.+2000   	; 0x90a <__vector_78>
     13a:	00 00       	nop
     13c:	1e c4       	rjmp	.+2108   	; 0x97a <__vector_79>
     13e:	00 00       	nop
     140:	54 c4       	rjmp	.+2216   	; 0x9ea <__vector_80>
     142:	00 00       	nop
     144:	8a c4       	rjmp	.+2324   	; 0xa5a <__vector_81>
     146:	00 00       	nop
     148:	c0 c4       	rjmp	.+2432   	; 0xaca <__vector_82>
     14a:	00 00       	nop
     14c:	f6 c4       	rjmp	.+2540   	; 0xb3a <__vector_83>
     14e:	00 00       	nop
     150:	2c c5       	rjmp	.+2648   	; 0xbaa <__vector_84>
     152:	00 00       	nop
     154:	62 c5       	rjmp	.+2756   	; 0xc1a <__vector_85>
     156:	00 00       	nop
     158:	98 c5       	rjmp	.+2864   	; 0xc8a <__vector_86>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_107>
     1b0:	d4 c7       	rjmp	.+4008   	; 0x115a <__vector_108>
     1b2:	00 00       	nop
     1b4:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__vector_109>
     1b8:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_110>
     1bc:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_111>
     1c0:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_112>
     1c4:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_113>
     1c8:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_114>
     1cc:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_115>
     1d0:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_116>
     1d4:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ee ea       	ldi	r30, 0xAE	; 174
     21c:	fc e1       	ldi	r31, 0x1C	; 28
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 30       	cpi	r26, 0x00	; 0
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a0 e0       	ldi	r26, 0x00	; 0
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a3 36       	cpi	r26, 0x63	; 99
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <main>
     244:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	1f 92       	push	r1
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     25c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     260:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     264:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     268:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     26c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     270:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     274:	8f b7       	in	r24, 0x3f	; 63
     276:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     278:	f8 94       	cli
	return flags;
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	82 60       	ori	r24, 0x02	; 2
     284:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     286:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     288:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     28a:	81 ff       	sbrs	r24, 1
     28c:	fd cf       	rjmp	.-6      	; 0x288 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	80 e4       	ldi	r24, 0x40	; 64
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	25 d0       	rcall	.+74     	; 0x2e0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     296:	8f b7       	in	r24, 0x3f	; 63
     298:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     29a:	f8 94       	cli
	return flags;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     29e:	e0 e5       	ldi	r30, 0x50	; 80
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8e 7f       	andi	r24, 0xFE	; 254
     2a6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	1f 92       	push	r1
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2be:	9f b7       	in	r25, 0x3f	; 63
     2c0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     2c2:	f8 94       	cli
	return flags;
     2c4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     2c6:	e8 2f       	mov	r30, r24
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	e0 59       	subi	r30, 0x90	; 144
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	60 95       	com	r22
     2d0:	80 81       	ld	r24, Z
     2d2:	68 23       	and	r22, r24
     2d4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2d6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     2e0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     2e2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     2e4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     2e6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     2e8:	60 83       	st	Z, r22
	ret                             // Return to caller
     2ea:	08 95       	ret

000002ec <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     2ec:	1f 92       	push	r1
     2ee:	0f 92       	push	r0
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	0f 92       	push	r0
     2f4:	11 24       	eor	r1, r1
     2f6:	08 b6       	in	r0, 0x38	; 56
     2f8:	0f 92       	push	r0
     2fa:	18 be       	out	0x38, r1	; 56
     2fc:	0b b6       	in	r0, 0x3b	; 59
     2fe:	0f 92       	push	r0
     300:	1b be       	out	0x3b, r1	; 59
     302:	8f 93       	push	r24
     304:	9f 93       	push	r25
     306:	ef 93       	push	r30
     308:	ff 93       	push	r31
	rtc_data.counter_high++;
     30a:	eb e5       	ldi	r30, 0x5B	; 91
     30c:	f0 e2       	ldi	r31, 0x20	; 32
     30e:	80 81       	ld	r24, Z
     310:	91 81       	ldd	r25, Z+1	; 0x01
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
     316:	91 83       	std	Z+1, r25	; 0x01
}
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	0f 90       	pop	r0
     322:	0b be       	out	0x3b, r0	; 59
     324:	0f 90       	pop	r0
     326:	08 be       	out	0x38, r0	; 56
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	08 b6       	in	r0, 0x38	; 56
     33e:	0f 92       	push	r0
     340:	18 be       	out	0x38, r1	; 56
     342:	09 b6       	in	r0, 0x39	; 57
     344:	0f 92       	push	r0
     346:	19 be       	out	0x39, r1	; 57
     348:	0b b6       	in	r0, 0x3b	; 59
     34a:	0f 92       	push	r0
     34c:	1b be       	out	0x3b, r1	; 59
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	2f 93       	push	r18
     35c:	3f 93       	push	r19
     35e:	4f 93       	push	r20
     360:	5f 93       	push	r21
     362:	6f 93       	push	r22
     364:	7f 93       	push	r23
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	af 93       	push	r26
     36c:	bf 93       	push	r27
     36e:	ef 93       	push	r30
     370:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     372:	eb e5       	ldi	r30, 0x5B	; 91
     374:	f0 e2       	ldi	r31, 0x20	; 32
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	22 81       	ldd	r18, Z+2	; 0x02
     37c:	33 81       	ldd	r19, Z+3	; 0x03
     37e:	82 17       	cp	r24, r18
     380:	93 07       	cpc	r25, r19
     382:	f0 f1       	brcs	.+124    	; 0x400 <__LOCK_REGION_LENGTH__>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     38a:	e0 91 61 20 	lds	r30, 0x2061	; 0x802061 <rtc_data+0x6>
     38e:	f0 91 62 20 	lds	r31, 0x2062	; 0x802062 <rtc_data+0x7>
     392:	30 97       	sbiw	r30, 0x00	; 0
     394:	a9 f1       	breq	.+106    	; 0x400 <__LOCK_REGION_LENGTH__>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     396:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     39a:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     39e:	a0 e0       	ldi	r26, 0x00	; 0
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	dc 01       	movw	r26, r24
     3a4:	99 27       	eor	r25, r25
     3a6:	88 27       	eor	r24, r24
     3a8:	ab 01       	movw	r20, r22
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	8c 01       	movw	r16, r24
     3b0:	9d 01       	movw	r18, r26
     3b2:	04 2b       	or	r16, r20
     3b4:	15 2b       	or	r17, r21
     3b6:	26 2b       	or	r18, r22
     3b8:	37 2b       	or	r19, r23
     3ba:	c9 01       	movw	r24, r18
     3bc:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3be:	ab e5       	ldi	r26, 0x5B	; 91
     3c0:	b0 e2       	ldi	r27, 0x20	; 32
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	0d 91       	ld	r16, X+
     3c6:	1c 91       	ld	r17, X
     3c8:	13 97       	sbiw	r26, 0x03	; 3
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	98 01       	movw	r18, r16
     3d0:	11 27       	eor	r17, r17
     3d2:	00 27       	eor	r16, r16
     3d4:	14 96       	adiw	r26, 0x04	; 4
     3d6:	cd 90       	ld	r12, X+
     3d8:	dc 90       	ld	r13, X
     3da:	15 97       	sbiw	r26, 0x05	; 5
     3dc:	e1 2c       	mov	r14, r1
     3de:	f1 2c       	mov	r15, r1
     3e0:	0c 29       	or	r16, r12
     3e2:	1d 29       	or	r17, r13
     3e4:	2e 29       	or	r18, r14
     3e6:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     3e8:	06 17       	cp	r16, r22
     3ea:	17 07       	cpc	r17, r23
     3ec:	28 07       	cpc	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	30 f0       	brcs	.+12     	; 0x3fe <__vector_11+0xcc>
				count = alarm + 1;
     3f2:	c9 01       	movw	r24, r18
     3f4:	b8 01       	movw	r22, r16
     3f6:	6f 5f       	subi	r22, 0xFF	; 255
     3f8:	7f 4f       	sbci	r23, 0xFF	; 255
     3fa:	8f 4f       	sbci	r24, 0xFF	; 255
     3fc:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     3fe:	19 95       	eicall
		}
	}
}
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	0f 90       	pop	r0
     426:	0b be       	out	0x3b, r0	; 59
     428:	0f 90       	pop	r0
     42a:	09 be       	out	0x39, r0	; 57
     42c:	0f 90       	pop	r0
     42e:	08 be       	out	0x38, r0	; 56
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	08 b6       	in	r0, 0x38	; 56
     446:	0f 92       	push	r0
     448:	18 be       	out	0x38, r1	; 56
     44a:	09 b6       	in	r0, 0x39	; 57
     44c:	0f 92       	push	r0
     44e:	19 be       	out	0x39, r1	; 57
     450:	0b b6       	in	r0, 0x3b	; 59
     452:	0f 92       	push	r0
     454:	1b be       	out	0x3b, r1	; 59
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     46e:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcc0_ovf_callback>
     472:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcc0_ovf_callback+0x1>
     476:	30 97       	sbiw	r30, 0x00	; 0
     478:	09 f0       	breq	.+2      	; 0x47c <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     47a:	19 95       	eicall
	}
}
     47c:	ff 91       	pop	r31
     47e:	ef 91       	pop	r30
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	0f 90       	pop	r0
     496:	0b be       	out	0x3b, r0	; 59
     498:	0f 90       	pop	r0
     49a:	09 be       	out	0x39, r0	; 57
     49c:	0f 90       	pop	r0
     49e:	08 be       	out	0x38, r0	; 56
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	08 b6       	in	r0, 0x38	; 56
     4b6:	0f 92       	push	r0
     4b8:	18 be       	out	0x38, r1	; 56
     4ba:	09 b6       	in	r0, 0x39	; 57
     4bc:	0f 92       	push	r0
     4be:	19 be       	out	0x39, r1	; 57
     4c0:	0b b6       	in	r0, 0x3b	; 59
     4c2:	0f 92       	push	r0
     4c4:	1b be       	out	0x3b, r1	; 59
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     4de:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tcc0_err_callback>
     4e2:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tcc0_err_callback+0x1>
     4e6:	30 97       	sbiw	r30, 0x00	; 0
     4e8:	09 f0       	breq	.+2      	; 0x4ec <__vector_15+0x42>
		tc_tcc0_err_callback();
     4ea:	19 95       	eicall
	}
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0b be       	out	0x3b, r0	; 59
     508:	0f 90       	pop	r0
     50a:	09 be       	out	0x39, r0	; 57
     50c:	0f 90       	pop	r0
     50e:	08 be       	out	0x38, r0	; 56
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	08 b6       	in	r0, 0x38	; 56
     526:	0f 92       	push	r0
     528:	18 be       	out	0x38, r1	; 56
     52a:	09 b6       	in	r0, 0x39	; 57
     52c:	0f 92       	push	r0
     52e:	19 be       	out	0x39, r1	; 57
     530:	0b b6       	in	r0, 0x3b	; 59
     532:	0f 92       	push	r0
     534:	1b be       	out	0x3b, r1	; 59
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     54e:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tcc0_cca_callback>
     552:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tcc0_cca_callback+0x1>
     556:	30 97       	sbiw	r30, 0x00	; 0
     558:	09 f0       	breq	.+2      	; 0x55c <__vector_16+0x42>
		tc_tcc0_cca_callback();
     55a:	19 95       	eicall
	}
}
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0b be       	out	0x3b, r0	; 59
     578:	0f 90       	pop	r0
     57a:	09 be       	out	0x39, r0	; 57
     57c:	0f 90       	pop	r0
     57e:	08 be       	out	0x38, r0	; 56
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	08 b6       	in	r0, 0x38	; 56
     596:	0f 92       	push	r0
     598:	18 be       	out	0x38, r1	; 56
     59a:	09 b6       	in	r0, 0x39	; 57
     59c:	0f 92       	push	r0
     59e:	19 be       	out	0x39, r1	; 57
     5a0:	0b b6       	in	r0, 0x3b	; 59
     5a2:	0f 92       	push	r0
     5a4:	1b be       	out	0x3b, r1	; 59
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     5be:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcc0_ccb_callback>
     5c2:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcc0_ccb_callback+0x1>
     5c6:	30 97       	sbiw	r30, 0x00	; 0
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     5ca:	19 95       	eicall
	}
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0b be       	out	0x3b, r0	; 59
     5e8:	0f 90       	pop	r0
     5ea:	09 be       	out	0x39, r0	; 57
     5ec:	0f 90       	pop	r0
     5ee:	08 be       	out	0x38, r0	; 56
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	08 b6       	in	r0, 0x38	; 56
     606:	0f 92       	push	r0
     608:	18 be       	out	0x38, r1	; 56
     60a:	09 b6       	in	r0, 0x39	; 57
     60c:	0f 92       	push	r0
     60e:	19 be       	out	0x39, r1	; 57
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	1b be       	out	0x3b, r1	; 59
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     62e:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcc0_ccc_callback>
     632:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcc0_ccc_callback+0x1>
     636:	30 97       	sbiw	r30, 0x00	; 0
     638:	09 f0       	breq	.+2      	; 0x63c <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     63a:	19 95       	eicall
	}
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0b be       	out	0x3b, r0	; 59
     658:	0f 90       	pop	r0
     65a:	09 be       	out	0x39, r0	; 57
     65c:	0f 90       	pop	r0
     65e:	08 be       	out	0x38, r0	; 56
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	1f 90       	pop	r1
     668:	18 95       	reti

0000066a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	08 b6       	in	r0, 0x38	; 56
     676:	0f 92       	push	r0
     678:	18 be       	out	0x38, r1	; 56
     67a:	09 b6       	in	r0, 0x39	; 57
     67c:	0f 92       	push	r0
     67e:	19 be       	out	0x39, r1	; 57
     680:	0b b6       	in	r0, 0x3b	; 59
     682:	0f 92       	push	r0
     684:	1b be       	out	0x3b, r1	; 59
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     69e:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcc0_ccd_callback>
     6a2:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcc0_ccd_callback+0x1>
     6a6:	30 97       	sbiw	r30, 0x00	; 0
     6a8:	09 f0       	breq	.+2      	; 0x6ac <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     6aa:	19 95       	eicall
	}
}
     6ac:	ff 91       	pop	r31
     6ae:	ef 91       	pop	r30
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0b be       	out	0x3b, r0	; 59
     6c8:	0f 90       	pop	r0
     6ca:	09 be       	out	0x39, r0	; 57
     6cc:	0f 90       	pop	r0
     6ce:	08 be       	out	0x38, r0	; 56
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	08 b6       	in	r0, 0x38	; 56
     6e6:	0f 92       	push	r0
     6e8:	18 be       	out	0x38, r1	; 56
     6ea:	09 b6       	in	r0, 0x39	; 57
     6ec:	0f 92       	push	r0
     6ee:	19 be       	out	0x39, r1	; 57
     6f0:	0b b6       	in	r0, 0x3b	; 59
     6f2:	0f 92       	push	r0
     6f4:	1b be       	out	0x3b, r1	; 59
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     70e:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcc1_ovf_callback>
     712:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcc1_ovf_callback+0x1>
     716:	30 97       	sbiw	r30, 0x00	; 0
     718:	09 f0       	breq	.+2      	; 0x71c <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     71a:	19 95       	eicall
	}
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0b be       	out	0x3b, r0	; 59
     738:	0f 90       	pop	r0
     73a:	09 be       	out	0x39, r0	; 57
     73c:	0f 90       	pop	r0
     73e:	08 be       	out	0x38, r0	; 56
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	08 b6       	in	r0, 0x38	; 56
     756:	0f 92       	push	r0
     758:	18 be       	out	0x38, r1	; 56
     75a:	09 b6       	in	r0, 0x39	; 57
     75c:	0f 92       	push	r0
     75e:	19 be       	out	0x39, r1	; 57
     760:	0b b6       	in	r0, 0x3b	; 59
     762:	0f 92       	push	r0
     764:	1b be       	out	0x3b, r1	; 59
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     77e:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcc1_err_callback>
     782:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcc1_err_callback+0x1>
     786:	30 97       	sbiw	r30, 0x00	; 0
     788:	09 f0       	breq	.+2      	; 0x78c <__vector_21+0x42>
		tc_tcc1_err_callback();
     78a:	19 95       	eicall
	}
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0b be       	out	0x3b, r0	; 59
     7a8:	0f 90       	pop	r0
     7aa:	09 be       	out	0x39, r0	; 57
     7ac:	0f 90       	pop	r0
     7ae:	08 be       	out	0x38, r0	; 56
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	08 b6       	in	r0, 0x38	; 56
     7c6:	0f 92       	push	r0
     7c8:	18 be       	out	0x38, r1	; 56
     7ca:	09 b6       	in	r0, 0x39	; 57
     7cc:	0f 92       	push	r0
     7ce:	19 be       	out	0x39, r1	; 57
     7d0:	0b b6       	in	r0, 0x3b	; 59
     7d2:	0f 92       	push	r0
     7d4:	1b be       	out	0x3b, r1	; 59
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     7ee:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcc1_cca_callback>
     7f2:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcc1_cca_callback+0x1>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	09 f0       	breq	.+2      	; 0x7fc <__vector_22+0x42>
		tc_tcc1_cca_callback();
     7fa:	19 95       	eicall
	}
}
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0b be       	out	0x3b, r0	; 59
     818:	0f 90       	pop	r0
     81a:	09 be       	out	0x39, r0	; 57
     81c:	0f 90       	pop	r0
     81e:	08 be       	out	0x38, r0	; 56
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	08 b6       	in	r0, 0x38	; 56
     836:	0f 92       	push	r0
     838:	18 be       	out	0x38, r1	; 56
     83a:	09 b6       	in	r0, 0x39	; 57
     83c:	0f 92       	push	r0
     83e:	19 be       	out	0x39, r1	; 57
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	1b be       	out	0x3b, r1	; 59
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	4f 93       	push	r20
     84c:	5f 93       	push	r21
     84e:	6f 93       	push	r22
     850:	7f 93       	push	r23
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	af 93       	push	r26
     858:	bf 93       	push	r27
     85a:	ef 93       	push	r30
     85c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     85e:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcc1_ccb_callback>
     862:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcc1_ccb_callback+0x1>
     866:	30 97       	sbiw	r30, 0x00	; 0
     868:	09 f0       	breq	.+2      	; 0x86c <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     86a:	19 95       	eicall
	}
}
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	09 be       	out	0x39, r0	; 57
     88c:	0f 90       	pop	r0
     88e:	08 be       	out	0x38, r0	; 56
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	08 b6       	in	r0, 0x38	; 56
     8a6:	0f 92       	push	r0
     8a8:	18 be       	out	0x38, r1	; 56
     8aa:	09 b6       	in	r0, 0x39	; 57
     8ac:	0f 92       	push	r0
     8ae:	19 be       	out	0x39, r1	; 57
     8b0:	0b b6       	in	r0, 0x3b	; 59
     8b2:	0f 92       	push	r0
     8b4:	1b be       	out	0x3b, r1	; 59
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     8ce:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tcd0_ovf_callback>
     8d2:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tcd0_ovf_callback+0x1>
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f0       	breq	.+2      	; 0x8dc <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     8da:	19 95       	eicall
	}
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0b be       	out	0x3b, r0	; 59
     8f8:	0f 90       	pop	r0
     8fa:	09 be       	out	0x39, r0	; 57
     8fc:	0f 90       	pop	r0
     8fe:	08 be       	out	0x38, r0	; 56
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	08 b6       	in	r0, 0x38	; 56
     916:	0f 92       	push	r0
     918:	18 be       	out	0x38, r1	; 56
     91a:	09 b6       	in	r0, 0x39	; 57
     91c:	0f 92       	push	r0
     91e:	19 be       	out	0x39, r1	; 57
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	1b be       	out	0x3b, r1	; 59
     926:	2f 93       	push	r18
     928:	3f 93       	push	r19
     92a:	4f 93       	push	r20
     92c:	5f 93       	push	r21
     92e:	6f 93       	push	r22
     930:	7f 93       	push	r23
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
     936:	af 93       	push	r26
     938:	bf 93       	push	r27
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     93e:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcd0_err_callback>
     942:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcd0_err_callback+0x1>
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	09 f0       	breq	.+2      	; 0x94c <__vector_78+0x42>
		tc_tcd0_err_callback();
     94a:	19 95       	eicall
	}
}
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0b be       	out	0x3b, r0	; 59
     968:	0f 90       	pop	r0
     96a:	09 be       	out	0x39, r0	; 57
     96c:	0f 90       	pop	r0
     96e:	08 be       	out	0x38, r0	; 56
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	08 b6       	in	r0, 0x38	; 56
     986:	0f 92       	push	r0
     988:	18 be       	out	0x38, r1	; 56
     98a:	09 b6       	in	r0, 0x39	; 57
     98c:	0f 92       	push	r0
     98e:	19 be       	out	0x39, r1	; 57
     990:	0b b6       	in	r0, 0x3b	; 59
     992:	0f 92       	push	r0
     994:	1b be       	out	0x3b, r1	; 59
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     9ae:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcd0_cca_callback>
     9b2:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcd0_cca_callback+0x1>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_79+0x42>
		tc_tcd0_cca_callback();
     9ba:	19 95       	eicall
	}
}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	09 be       	out	0x39, r0	; 57
     9dc:	0f 90       	pop	r0
     9de:	08 be       	out	0x38, r0	; 56
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	08 b6       	in	r0, 0x38	; 56
     9f6:	0f 92       	push	r0
     9f8:	18 be       	out	0x38, r1	; 56
     9fa:	09 b6       	in	r0, 0x39	; 57
     9fc:	0f 92       	push	r0
     9fe:	19 be       	out	0x39, r1	; 57
     a00:	0b b6       	in	r0, 0x3b	; 59
     a02:	0f 92       	push	r0
     a04:	1b be       	out	0x3b, r1	; 59
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     a1e:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcd0_ccb_callback>
     a22:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcd0_ccb_callback+0x1>
     a26:	30 97       	sbiw	r30, 0x00	; 0
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     a2a:	19 95       	eicall
	}
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	09 be       	out	0x39, r0	; 57
     a4c:	0f 90       	pop	r0
     a4e:	08 be       	out	0x38, r0	; 56
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	08 b6       	in	r0, 0x38	; 56
     a66:	0f 92       	push	r0
     a68:	18 be       	out	0x38, r1	; 56
     a6a:	09 b6       	in	r0, 0x39	; 57
     a6c:	0f 92       	push	r0
     a6e:	19 be       	out	0x39, r1	; 57
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	1b be       	out	0x3b, r1	; 59
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     a8e:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcd0_ccc_callback>
     a92:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcd0_ccc_callback+0x1>
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     a9a:	19 95       	eicall
	}
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	09 be       	out	0x39, r0	; 57
     abc:	0f 90       	pop	r0
     abe:	08 be       	out	0x38, r0	; 56
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	08 b6       	in	r0, 0x38	; 56
     ad6:	0f 92       	push	r0
     ad8:	18 be       	out	0x38, r1	; 56
     ada:	09 b6       	in	r0, 0x39	; 57
     adc:	0f 92       	push	r0
     ade:	19 be       	out	0x39, r1	; 57
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	1b be       	out	0x3b, r1	; 59
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     afe:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcd0_ccd_callback>
     b02:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcd0_ccd_callback+0x1>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     b0a:	19 95       	eicall
	}
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0b be       	out	0x3b, r0	; 59
     b28:	0f 90       	pop	r0
     b2a:	09 be       	out	0x39, r0	; 57
     b2c:	0f 90       	pop	r0
     b2e:	08 be       	out	0x38, r0	; 56
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	08 b6       	in	r0, 0x38	; 56
     b46:	0f 92       	push	r0
     b48:	18 be       	out	0x38, r1	; 56
     b4a:	09 b6       	in	r0, 0x39	; 57
     b4c:	0f 92       	push	r0
     b4e:	19 be       	out	0x39, r1	; 57
     b50:	0b b6       	in	r0, 0x3b	; 59
     b52:	0f 92       	push	r0
     b54:	1b be       	out	0x3b, r1	; 59
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     b6e:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcd1_ovf_callback>
     b72:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcd1_ovf_callback+0x1>
     b76:	30 97       	sbiw	r30, 0x00	; 0
     b78:	09 f0       	breq	.+2      	; 0xb7c <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     b7a:	19 95       	eicall
	}
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	09 be       	out	0x39, r0	; 57
     b9c:	0f 90       	pop	r0
     b9e:	08 be       	out	0x38, r0	; 56
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	08 b6       	in	r0, 0x38	; 56
     bb6:	0f 92       	push	r0
     bb8:	18 be       	out	0x38, r1	; 56
     bba:	09 b6       	in	r0, 0x39	; 57
     bbc:	0f 92       	push	r0
     bbe:	19 be       	out	0x39, r1	; 57
     bc0:	0b b6       	in	r0, 0x3b	; 59
     bc2:	0f 92       	push	r0
     bc4:	1b be       	out	0x3b, r1	; 59
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     bde:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcd1_err_callback>
     be2:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcd1_err_callback+0x1>
     be6:	30 97       	sbiw	r30, 0x00	; 0
     be8:	09 f0       	breq	.+2      	; 0xbec <__vector_84+0x42>
		tc_tcd1_err_callback();
     bea:	19 95       	eicall
	}
}
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0b be       	out	0x3b, r0	; 59
     c08:	0f 90       	pop	r0
     c0a:	09 be       	out	0x39, r0	; 57
     c0c:	0f 90       	pop	r0
     c0e:	08 be       	out	0x38, r0	; 56
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	08 b6       	in	r0, 0x38	; 56
     c26:	0f 92       	push	r0
     c28:	18 be       	out	0x38, r1	; 56
     c2a:	09 b6       	in	r0, 0x39	; 57
     c2c:	0f 92       	push	r0
     c2e:	19 be       	out	0x39, r1	; 57
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	1b be       	out	0x3b, r1	; 59
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     c4e:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcd1_cca_callback>
     c52:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcd1_cca_callback+0x1>
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <__vector_85+0x42>
		tc_tcd1_cca_callback();
     c5a:	19 95       	eicall
	}
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	09 be       	out	0x39, r0	; 57
     c7c:	0f 90       	pop	r0
     c7e:	08 be       	out	0x38, r0	; 56
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1
     c94:	08 b6       	in	r0, 0x38	; 56
     c96:	0f 92       	push	r0
     c98:	18 be       	out	0x38, r1	; 56
     c9a:	09 b6       	in	r0, 0x39	; 57
     c9c:	0f 92       	push	r0
     c9e:	19 be       	out	0x39, r1	; 57
     ca0:	0b b6       	in	r0, 0x3b	; 59
     ca2:	0f 92       	push	r0
     ca4:	1b be       	out	0x3b, r1	; 59
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     cbe:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcd1_ccb_callback>
     cc2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcd1_ccb_callback+0x1>
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	09 f0       	breq	.+2      	; 0xccc <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     cca:	19 95       	eicall
	}
}
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	09 be       	out	0x39, r0	; 57
     cec:	0f 90       	pop	r0
     cee:	08 be       	out	0x38, r0	; 56
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	0f 92       	push	r0
     d08:	18 be       	out	0x38, r1	; 56
     d0a:	09 b6       	in	r0, 0x39	; 57
     d0c:	0f 92       	push	r0
     d0e:	19 be       	out	0x39, r1	; 57
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	1b be       	out	0x3b, r1	; 59
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     d2e:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tce0_ovf_callback>
     d32:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tce0_ovf_callback+0x1>
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_47+0x42>
		tc_tce0_ovf_callback();
     d3a:	19 95       	eicall
	}
}
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	7f 91       	pop	r23
     d4a:	6f 91       	pop	r22
     d4c:	5f 91       	pop	r21
     d4e:	4f 91       	pop	r20
     d50:	3f 91       	pop	r19
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0b be       	out	0x3b, r0	; 59
     d58:	0f 90       	pop	r0
     d5a:	09 be       	out	0x39, r0	; 57
     d5c:	0f 90       	pop	r0
     d5e:	08 be       	out	0x38, r0	; 56
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	08 b6       	in	r0, 0x38	; 56
     d76:	0f 92       	push	r0
     d78:	18 be       	out	0x38, r1	; 56
     d7a:	09 b6       	in	r0, 0x39	; 57
     d7c:	0f 92       	push	r0
     d7e:	19 be       	out	0x39, r1	; 57
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	1b be       	out	0x3b, r1	; 59
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     d9e:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tce0_err_callback>
     da2:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tce0_err_callback+0x1>
     da6:	30 97       	sbiw	r30, 0x00	; 0
     da8:	09 f0       	breq	.+2      	; 0xdac <__vector_48+0x42>
		tc_tce0_err_callback();
     daa:	19 95       	eicall
	}
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	09 be       	out	0x39, r0	; 57
     dcc:	0f 90       	pop	r0
     dce:	08 be       	out	0x38, r0	; 56
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	08 b6       	in	r0, 0x38	; 56
     de6:	0f 92       	push	r0
     de8:	18 be       	out	0x38, r1	; 56
     dea:	09 b6       	in	r0, 0x39	; 57
     dec:	0f 92       	push	r0
     dee:	19 be       	out	0x39, r1	; 57
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	1b be       	out	0x3b, r1	; 59
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     e0e:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tce0_cca_callback>
     e12:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tce0_cca_callback+0x1>
     e16:	30 97       	sbiw	r30, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <__vector_49+0x42>
		tc_tce0_cca_callback();
     e1a:	19 95       	eicall
	}
}
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	09 be       	out	0x39, r0	; 57
     e3c:	0f 90       	pop	r0
     e3e:	08 be       	out	0x38, r0	; 56
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	08 b6       	in	r0, 0x38	; 56
     e56:	0f 92       	push	r0
     e58:	18 be       	out	0x38, r1	; 56
     e5a:	09 b6       	in	r0, 0x39	; 57
     e5c:	0f 92       	push	r0
     e5e:	19 be       	out	0x39, r1	; 57
     e60:	0b b6       	in	r0, 0x3b	; 59
     e62:	0f 92       	push	r0
     e64:	1b be       	out	0x3b, r1	; 59
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     e7e:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tce0_ccb_callback>
     e82:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tce0_ccb_callback+0x1>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_50+0x42>
		tc_tce0_ccb_callback();
     e8a:	19 95       	eicall
	}
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	09 be       	out	0x39, r0	; 57
     eac:	0f 90       	pop	r0
     eae:	08 be       	out	0x38, r0	; 56
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	08 b6       	in	r0, 0x38	; 56
     ec6:	0f 92       	push	r0
     ec8:	18 be       	out	0x38, r1	; 56
     eca:	09 b6       	in	r0, 0x39	; 57
     ecc:	0f 92       	push	r0
     ece:	19 be       	out	0x39, r1	; 57
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	1b be       	out	0x3b, r1	; 59
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     eee:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tce0_ccc_callback>
     ef2:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tce0_ccc_callback+0x1>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_51+0x42>
		tc_tce0_ccc_callback();
     efa:	19 95       	eicall
	}
}
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	09 be       	out	0x39, r0	; 57
     f1c:	0f 90       	pop	r0
     f1e:	08 be       	out	0x38, r0	; 56
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	08 b6       	in	r0, 0x38	; 56
     f36:	0f 92       	push	r0
     f38:	18 be       	out	0x38, r1	; 56
     f3a:	09 b6       	in	r0, 0x39	; 57
     f3c:	0f 92       	push	r0
     f3e:	19 be       	out	0x39, r1	; 57
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	1b be       	out	0x3b, r1	; 59
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     f5e:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tce0_ccd_callback>
     f62:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tce0_ccd_callback+0x1>
     f66:	30 97       	sbiw	r30, 0x00	; 0
     f68:	09 f0       	breq	.+2      	; 0xf6c <__vector_52+0x42>
		tc_tce0_ccd_callback();
     f6a:	19 95       	eicall
	}
}
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0b be       	out	0x3b, r0	; 59
     f88:	0f 90       	pop	r0
     f8a:	09 be       	out	0x39, r0	; 57
     f8c:	0f 90       	pop	r0
     f8e:	08 be       	out	0x38, r0	; 56
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	08 b6       	in	r0, 0x38	; 56
     fa6:	0f 92       	push	r0
     fa8:	18 be       	out	0x38, r1	; 56
     faa:	09 b6       	in	r0, 0x39	; 57
     fac:	0f 92       	push	r0
     fae:	19 be       	out	0x39, r1	; 57
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	1b be       	out	0x3b, r1	; 59
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     fce:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tce1_ovf_callback>
     fd2:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tce1_ovf_callback+0x1>
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__vector_53+0x42>
		tc_tce1_ovf_callback();
     fda:	19 95       	eicall
	}
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0b be       	out	0x3b, r0	; 59
     ff8:	0f 90       	pop	r0
     ffa:	09 be       	out	0x39, r0	; 57
     ffc:	0f 90       	pop	r0
     ffe:	08 be       	out	0x38, r0	; 56
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	08 b6       	in	r0, 0x38	; 56
    1016:	0f 92       	push	r0
    1018:	18 be       	out	0x38, r1	; 56
    101a:	09 b6       	in	r0, 0x39	; 57
    101c:	0f 92       	push	r0
    101e:	19 be       	out	0x39, r1	; 57
    1020:	0b b6       	in	r0, 0x3b	; 59
    1022:	0f 92       	push	r0
    1024:	1b be       	out	0x3b, r1	; 59
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    103e:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tce1_err_callback>
    1042:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tce1_err_callback+0x1>
    1046:	30 97       	sbiw	r30, 0x00	; 0
    1048:	09 f0       	breq	.+2      	; 0x104c <__vector_54+0x42>
		tc_tce1_err_callback();
    104a:	19 95       	eicall
	}
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0b be       	out	0x3b, r0	; 59
    1068:	0f 90       	pop	r0
    106a:	09 be       	out	0x39, r0	; 57
    106c:	0f 90       	pop	r0
    106e:	08 be       	out	0x38, r0	; 56
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	08 b6       	in	r0, 0x38	; 56
    1086:	0f 92       	push	r0
    1088:	18 be       	out	0x38, r1	; 56
    108a:	09 b6       	in	r0, 0x39	; 57
    108c:	0f 92       	push	r0
    108e:	19 be       	out	0x39, r1	; 57
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	1b be       	out	0x3b, r1	; 59
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    10ae:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tce1_cca_callback>
    10b2:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tce1_cca_callback+0x1>
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__vector_55+0x42>
		tc_tce1_cca_callback();
    10ba:	19 95       	eicall
	}
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0b be       	out	0x3b, r0	; 59
    10d8:	0f 90       	pop	r0
    10da:	09 be       	out	0x39, r0	; 57
    10dc:	0f 90       	pop	r0
    10de:	08 be       	out	0x38, r0	; 56
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	08 b6       	in	r0, 0x38	; 56
    10f6:	0f 92       	push	r0
    10f8:	18 be       	out	0x38, r1	; 56
    10fa:	09 b6       	in	r0, 0x39	; 57
    10fc:	0f 92       	push	r0
    10fe:	19 be       	out	0x39, r1	; 57
    1100:	0b b6       	in	r0, 0x3b	; 59
    1102:	0f 92       	push	r0
    1104:	1b be       	out	0x3b, r1	; 59
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    111e:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tce1_ccb_callback>
    1122:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tce1_ccb_callback+0x1>
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	09 f0       	breq	.+2      	; 0x112c <__vector_56+0x42>
		tc_tce1_ccb_callback();
    112a:	19 95       	eicall
	}
}
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0b be       	out	0x3b, r0	; 59
    1148:	0f 90       	pop	r0
    114a:	09 be       	out	0x39, r0	; 57
    114c:	0f 90       	pop	r0
    114e:	08 be       	out	0x38, r0	; 56
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	08 b6       	in	r0, 0x38	; 56
    1166:	0f 92       	push	r0
    1168:	18 be       	out	0x38, r1	; 56
    116a:	09 b6       	in	r0, 0x39	; 57
    116c:	0f 92       	push	r0
    116e:	19 be       	out	0x39, r1	; 57
    1170:	0b b6       	in	r0, 0x3b	; 59
    1172:	0f 92       	push	r0
    1174:	1b be       	out	0x3b, r1	; 59
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    118e:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <tc_tcf0_ovf_callback>
    1192:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <tc_tcf0_ovf_callback+0x1>
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	09 f0       	breq	.+2      	; 0x119c <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    119a:	19 95       	eicall
	}
}
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0b be       	out	0x3b, r0	; 59
    11b8:	0f 90       	pop	r0
    11ba:	09 be       	out	0x39, r0	; 57
    11bc:	0f 90       	pop	r0
    11be:	08 be       	out	0x38, r0	; 56
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	08 b6       	in	r0, 0x38	; 56
    11d6:	0f 92       	push	r0
    11d8:	18 be       	out	0x38, r1	; 56
    11da:	09 b6       	in	r0, 0x39	; 57
    11dc:	0f 92       	push	r0
    11de:	19 be       	out	0x39, r1	; 57
    11e0:	0b b6       	in	r0, 0x3b	; 59
    11e2:	0f 92       	push	r0
    11e4:	1b be       	out	0x3b, r1	; 59
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    11fe:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <tc_tcf0_err_callback>
    1202:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <tc_tcf0_err_callback+0x1>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_109+0x42>
		tc_tcf0_err_callback();
    120a:	19 95       	eicall
	}
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0b be       	out	0x3b, r0	; 59
    1228:	0f 90       	pop	r0
    122a:	09 be       	out	0x39, r0	; 57
    122c:	0f 90       	pop	r0
    122e:	08 be       	out	0x38, r0	; 56
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	08 b6       	in	r0, 0x38	; 56
    1246:	0f 92       	push	r0
    1248:	18 be       	out	0x38, r1	; 56
    124a:	09 b6       	in	r0, 0x39	; 57
    124c:	0f 92       	push	r0
    124e:	19 be       	out	0x39, r1	; 57
    1250:	0b b6       	in	r0, 0x3b	; 59
    1252:	0f 92       	push	r0
    1254:	1b be       	out	0x3b, r1	; 59
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    126e:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <tc_tcf0_cca_callback>
    1272:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <tc_tcf0_cca_callback+0x1>
    1276:	30 97       	sbiw	r30, 0x00	; 0
    1278:	09 f0       	breq	.+2      	; 0x127c <__vector_110+0x42>
		tc_tcf0_cca_callback();
    127a:	19 95       	eicall
	}
}
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0b be       	out	0x3b, r0	; 59
    1298:	0f 90       	pop	r0
    129a:	09 be       	out	0x39, r0	; 57
    129c:	0f 90       	pop	r0
    129e:	08 be       	out	0x38, r0	; 56
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	08 b6       	in	r0, 0x38	; 56
    12b6:	0f 92       	push	r0
    12b8:	18 be       	out	0x38, r1	; 56
    12ba:	09 b6       	in	r0, 0x39	; 57
    12bc:	0f 92       	push	r0
    12be:	19 be       	out	0x39, r1	; 57
    12c0:	0b b6       	in	r0, 0x3b	; 59
    12c2:	0f 92       	push	r0
    12c4:	1b be       	out	0x3b, r1	; 59
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    12de:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <tc_tcf0_ccb_callback>
    12e2:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <tc_tcf0_ccb_callback+0x1>
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    12ea:	19 95       	eicall
	}
}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0b be       	out	0x3b, r0	; 59
    1308:	0f 90       	pop	r0
    130a:	09 be       	out	0x39, r0	; 57
    130c:	0f 90       	pop	r0
    130e:	08 be       	out	0x38, r0	; 56
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	08 b6       	in	r0, 0x38	; 56
    1326:	0f 92       	push	r0
    1328:	18 be       	out	0x38, r1	; 56
    132a:	09 b6       	in	r0, 0x39	; 57
    132c:	0f 92       	push	r0
    132e:	19 be       	out	0x39, r1	; 57
    1330:	0b b6       	in	r0, 0x3b	; 59
    1332:	0f 92       	push	r0
    1334:	1b be       	out	0x3b, r1	; 59
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    134e:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <tc_tcf0_ccc_callback>
    1352:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <tc_tcf0_ccc_callback+0x1>
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	09 f0       	breq	.+2      	; 0x135c <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    135a:	19 95       	eicall
	}
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0b be       	out	0x3b, r0	; 59
    1378:	0f 90       	pop	r0
    137a:	09 be       	out	0x39, r0	; 57
    137c:	0f 90       	pop	r0
    137e:	08 be       	out	0x38, r0	; 56
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	08 b6       	in	r0, 0x38	; 56
    1396:	0f 92       	push	r0
    1398:	18 be       	out	0x38, r1	; 56
    139a:	09 b6       	in	r0, 0x39	; 57
    139c:	0f 92       	push	r0
    139e:	19 be       	out	0x39, r1	; 57
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	1b be       	out	0x3b, r1	; 59
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    13be:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <tc_tcf0_ccd_callback>
    13c2:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <tc_tcf0_ccd_callback+0x1>
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    13ca:	19 95       	eicall
	}
}
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0b be       	out	0x3b, r0	; 59
    13e8:	0f 90       	pop	r0
    13ea:	09 be       	out	0x39, r0	; 57
    13ec:	0f 90       	pop	r0
    13ee:	08 be       	out	0x38, r0	; 56
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	08 b6       	in	r0, 0x38	; 56
    1406:	0f 92       	push	r0
    1408:	18 be       	out	0x38, r1	; 56
    140a:	09 b6       	in	r0, 0x39	; 57
    140c:	0f 92       	push	r0
    140e:	19 be       	out	0x39, r1	; 57
    1410:	0b b6       	in	r0, 0x3b	; 59
    1412:	0f 92       	push	r0
    1414:	1b be       	out	0x3b, r1	; 59
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    142e:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <tc_tcf1_ovf_callback>
    1432:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <tc_tcf1_ovf_callback+0x1>
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    143a:	19 95       	eicall
	}
}
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0b be       	out	0x3b, r0	; 59
    1458:	0f 90       	pop	r0
    145a:	09 be       	out	0x39, r0	; 57
    145c:	0f 90       	pop	r0
    145e:	08 be       	out	0x38, r0	; 56
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	08 b6       	in	r0, 0x38	; 56
    1476:	0f 92       	push	r0
    1478:	18 be       	out	0x38, r1	; 56
    147a:	09 b6       	in	r0, 0x39	; 57
    147c:	0f 92       	push	r0
    147e:	19 be       	out	0x39, r1	; 57
    1480:	0b b6       	in	r0, 0x3b	; 59
    1482:	0f 92       	push	r0
    1484:	1b be       	out	0x3b, r1	; 59
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    149e:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <tc_tcf1_err_callback>
    14a2:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <tc_tcf1_err_callback+0x1>
    14a6:	30 97       	sbiw	r30, 0x00	; 0
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__vector_115+0x42>
		tc_tcf1_err_callback();
    14aa:	19 95       	eicall
	}
}
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0b be       	out	0x3b, r0	; 59
    14c8:	0f 90       	pop	r0
    14ca:	09 be       	out	0x39, r0	; 57
    14cc:	0f 90       	pop	r0
    14ce:	08 be       	out	0x38, r0	; 56
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	08 b6       	in	r0, 0x38	; 56
    14e6:	0f 92       	push	r0
    14e8:	18 be       	out	0x38, r1	; 56
    14ea:	09 b6       	in	r0, 0x39	; 57
    14ec:	0f 92       	push	r0
    14ee:	19 be       	out	0x39, r1	; 57
    14f0:	0b b6       	in	r0, 0x3b	; 59
    14f2:	0f 92       	push	r0
    14f4:	1b be       	out	0x3b, r1	; 59
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    150e:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <tc_tcf1_cca_callback>
    1512:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <tc_tcf1_cca_callback+0x1>
    1516:	30 97       	sbiw	r30, 0x00	; 0
    1518:	09 f0       	breq	.+2      	; 0x151c <__vector_116+0x42>
		tc_tcf1_cca_callback();
    151a:	19 95       	eicall
	}
}
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0b be       	out	0x3b, r0	; 59
    1538:	0f 90       	pop	r0
    153a:	09 be       	out	0x39, r0	; 57
    153c:	0f 90       	pop	r0
    153e:	08 be       	out	0x38, r0	; 56
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	08 b6       	in	r0, 0x38	; 56
    1556:	0f 92       	push	r0
    1558:	18 be       	out	0x38, r1	; 56
    155a:	09 b6       	in	r0, 0x39	; 57
    155c:	0f 92       	push	r0
    155e:	19 be       	out	0x39, r1	; 57
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	1b be       	out	0x3b, r1	; 59
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    157e:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
    1582:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    158a:	19 95       	eicall
	}
}
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0b be       	out	0x3b, r0	; 59
    15a8:	0f 90       	pop	r0
    15aa:	09 be       	out	0x39, r0	; 57
    15ac:	0f 90       	pop	r0
    15ae:	08 be       	out	0x38, r0	; 56
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    15be:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <transfer>
    15c2:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <transfer+0x1>
    15c6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    15c8:	83 ff       	sbrs	r24, 3
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    15cc:	88 60       	ori	r24, 0x08	; 8
    15ce:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    15d4:	86 ef       	ldi	r24, 0xF6	; 246
    15d6:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <transfer+0xa>
    15da:	83 c0       	rjmp	.+262    	; 0x16e2 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    15dc:	98 2f       	mov	r25, r24
    15de:	94 71       	andi	r25, 0x14	; 20
    15e0:	31 f0       	breq	.+12     	; 0x15ee <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <transfer+0xa>
    15ec:	7a c0       	rjmp	.+244    	; 0x16e2 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    15ee:	86 ff       	sbrs	r24, 6
    15f0:	43 c0       	rjmp	.+134    	; 0x1678 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    15f2:	c0 e5       	ldi	r28, 0x50	; 80
    15f4:	d0 e2       	ldi	r29, 0x20	; 32
    15f6:	aa 81       	ldd	r26, Y+2	; 0x02
    15f8:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	14 96       	adiw	r26, 0x04	; 4
    1600:	2d 91       	ld	r18, X+
    1602:	3c 91       	ld	r19, X
    1604:	15 97       	sbiw	r26, 0x05	; 5
    1606:	82 17       	cp	r24, r18
    1608:	93 07       	cpc	r25, r19
    160a:	6c f4       	brge	.+26     	; 0x1626 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    160c:	9c 01       	movw	r18, r24
    160e:	2f 5f       	subi	r18, 0xFF	; 255
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	20 93 54 20 	sts	0x2054, r18	; 0x802054 <transfer+0x4>
    1616:	30 93 55 20 	sts	0x2055, r19	; 0x802055 <transfer+0x5>
    161a:	a8 0f       	add	r26, r24
    161c:	b9 1f       	adc	r27, r25
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	8c 91       	ld	r24, X
    1622:	87 83       	std	Z+7, r24	; 0x07
    1624:	5e c0       	rjmp	.+188    	; 0x16e2 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1626:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <transfer+0x6>
    162a:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <transfer+0x7>
    162e:	18 96       	adiw	r26, 0x08	; 8
    1630:	2d 91       	ld	r18, X+
    1632:	3c 91       	ld	r19, X
    1634:	19 97       	sbiw	r26, 0x09	; 9
    1636:	82 17       	cp	r24, r18
    1638:	93 07       	cpc	r25, r19
    163a:	c8 f4       	brcc	.+50     	; 0x166e <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    163c:	20 91 58 20 	lds	r18, 0x2058	; 0x802058 <transfer+0x8>
    1640:	22 23       	and	r18, r18
    1642:	21 f0       	breq	.+8      	; 0x164c <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1644:	86 81       	ldd	r24, Z+6	; 0x06
    1646:	81 60       	ori	r24, 0x01	; 1
    1648:	86 83       	std	Z+6, r24	; 0x06
    164a:	4b c0       	rjmp	.+150    	; 0x16e2 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    164c:	16 96       	adiw	r26, 0x06	; 6
    164e:	2d 91       	ld	r18, X+
    1650:	3c 91       	ld	r19, X
    1652:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1654:	ac 01       	movw	r20, r24
    1656:	4f 5f       	subi	r20, 0xFF	; 255
    1658:	5f 4f       	sbci	r21, 0xFF	; 255
    165a:	40 93 56 20 	sts	0x2056, r20	; 0x802056 <transfer+0x6>
    165e:	50 93 57 20 	sts	0x2057, r21	; 0x802057 <transfer+0x7>
    1662:	d9 01       	movw	r26, r18
    1664:	a8 0f       	add	r26, r24
    1666:	b9 1f       	adc	r27, r25
    1668:	8c 91       	ld	r24, X
    166a:	87 83       	std	Z+7, r24	; 0x07
    166c:	3a c0       	rjmp	.+116    	; 0x16e2 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1672:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <transfer+0xa>
    1676:	35 c0       	rjmp	.+106    	; 0x16e2 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1678:	88 23       	and	r24, r24
    167a:	84 f5       	brge	.+96     	; 0x16dc <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    167c:	a0 e5       	ldi	r26, 0x50	; 80
    167e:	b0 e2       	ldi	r27, 0x20	; 32
    1680:	12 96       	adiw	r26, 0x02	; 2
    1682:	cd 91       	ld	r28, X+
    1684:	dc 91       	ld	r29, X
    1686:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1688:	16 96       	adiw	r26, 0x06	; 6
    168a:	8d 91       	ld	r24, X+
    168c:	9c 91       	ld	r25, X
    168e:	17 97       	sbiw	r26, 0x07	; 7
    1690:	28 85       	ldd	r18, Y+8	; 0x08
    1692:	39 85       	ldd	r19, Y+9	; 0x09
    1694:	82 17       	cp	r24, r18
    1696:	93 07       	cpc	r25, r19
    1698:	d8 f4       	brcc	.+54     	; 0x16d0 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    169a:	6e 81       	ldd	r22, Y+6	; 0x06
    169c:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    169e:	9c 01       	movw	r18, r24
    16a0:	2f 5f       	subi	r18, 0xFF	; 255
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	20 93 56 20 	sts	0x2056, r18	; 0x802056 <transfer+0x6>
    16a8:	30 93 57 20 	sts	0x2057, r19	; 0x802057 <transfer+0x7>
    16ac:	47 81       	ldd	r20, Z+7	; 0x07
    16ae:	db 01       	movw	r26, r22
    16b0:	a8 0f       	add	r26, r24
    16b2:	b9 1f       	adc	r27, r25
    16b4:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    16b6:	88 85       	ldd	r24, Y+8	; 0x08
    16b8:	99 85       	ldd	r25, Y+9	; 0x09
    16ba:	28 17       	cp	r18, r24
    16bc:	39 07       	cpc	r19, r25
    16be:	18 f4       	brcc	.+6      	; 0x16c6 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	83 83       	std	Z+3, r24	; 0x03
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    16c6:	87 e0       	ldi	r24, 0x07	; 7
    16c8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    16ca:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <transfer+0xa>
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    16d4:	89 ef       	ldi	r24, 0xF9	; 249
    16d6:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <transfer+0xa>
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    16dc:	8b ef       	ldi	r24, 0xFB	; 251
    16de:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <transfer+0xa>
	}
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	08 b6       	in	r0, 0x38	; 56
    16f4:	0f 92       	push	r0
    16f6:	18 be       	out	0x38, r1	; 56
    16f8:	09 b6       	in	r0, 0x39	; 57
    16fa:	0f 92       	push	r0
    16fc:	19 be       	out	0x39, r1	; 57
    16fe:	0b b6       	in	r0, 0x3b	; 59
    1700:	0f 92       	push	r0
    1702:	1b be       	out	0x3b, r1	; 59
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	4e df       	rcall	.-356    	; 0x15ba <twim_interrupt_handler>
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0b be       	out	0x3b, r0	; 59
    173a:	0f 90       	pop	r0
    173c:	09 be       	out	0x39, r0	; 57
    173e:	0f 90       	pop	r0
    1740:	08 be       	out	0x38, r0	; 56
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	08 b6       	in	r0, 0x38	; 56
    1758:	0f 92       	push	r0
    175a:	18 be       	out	0x38, r1	; 56
    175c:	09 b6       	in	r0, 0x39	; 57
    175e:	0f 92       	push	r0
    1760:	19 be       	out	0x39, r1	; 57
    1762:	0b b6       	in	r0, 0x3b	; 59
    1764:	0f 92       	push	r0
    1766:	1b be       	out	0x3b, r1	; 59
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	1c df       	rcall	.-456    	; 0x15ba <twim_interrupt_handler>
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0b be       	out	0x3b, r0	; 59
    179e:	0f 90       	pop	r0
    17a0:	09 be       	out	0x39, r0	; 57
    17a2:	0f 90       	pop	r0
    17a4:	08 be       	out	0x38, r0	; 56
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	08 b6       	in	r0, 0x38	; 56
    17bc:	0f 92       	push	r0
    17be:	18 be       	out	0x38, r1	; 56
    17c0:	09 b6       	in	r0, 0x39	; 57
    17c2:	0f 92       	push	r0
    17c4:	19 be       	out	0x39, r1	; 57
    17c6:	0b b6       	in	r0, 0x3b	; 59
    17c8:	0f 92       	push	r0
    17ca:	1b be       	out	0x3b, r1	; 59
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	ea de       	rcall	.-556    	; 0x15ba <twim_interrupt_handler>
    17e6:	ff 91       	pop	r31
    17e8:	ef 91       	pop	r30
    17ea:	bf 91       	pop	r27
    17ec:	af 91       	pop	r26
    17ee:	9f 91       	pop	r25
    17f0:	8f 91       	pop	r24
    17f2:	7f 91       	pop	r23
    17f4:	6f 91       	pop	r22
    17f6:	5f 91       	pop	r21
    17f8:	4f 91       	pop	r20
    17fa:	3f 91       	pop	r19
    17fc:	2f 91       	pop	r18
    17fe:	0f 90       	pop	r0
    1800:	0b be       	out	0x3b, r0	; 59
    1802:	0f 90       	pop	r0
    1804:	09 be       	out	0x39, r0	; 57
    1806:	0f 90       	pop	r0
    1808:	08 be       	out	0x38, r0	; 56
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	0f 90       	pop	r0
    1810:	1f 90       	pop	r1
    1812:	18 95       	reti

00001814 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    1814:	1f 92       	push	r1
    1816:	0f 92       	push	r0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	0f 92       	push	r0
    181c:	11 24       	eor	r1, r1
    181e:	08 b6       	in	r0, 0x38	; 56
    1820:	0f 92       	push	r0
    1822:	18 be       	out	0x38, r1	; 56
    1824:	09 b6       	in	r0, 0x39	; 57
    1826:	0f 92       	push	r0
    1828:	19 be       	out	0x39, r1	; 57
    182a:	0b b6       	in	r0, 0x3b	; 59
    182c:	0f 92       	push	r0
    182e:	1b be       	out	0x3b, r1	; 59
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	b8 de       	rcall	.-656    	; 0x15ba <twim_interrupt_handler>
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0b be       	out	0x3b, r0	; 59
    1866:	0f 90       	pop	r0
    1868:	09 be       	out	0x39, r0	; 57
    186a:	0f 90       	pop	r0
    186c:	08 be       	out	0x38, r0	; 56
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	1f 90       	pop	r1
    1876:	18 95       	reti

00001878 <uart_init>:
{
	
	while(device->Usart->STATUS>>7);//wait for data to be read
	return device->Usart->DATA;
	
}
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	ec 01       	movw	r28, r24
    187e:	e8 81       	ld	r30, Y
    1880:	f9 81       	ldd	r31, Y+1	; 0x01
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	81 83       	std	Z+1, r24	; 0x01
    1886:	e8 81       	ld	r30, Y
    1888:	f9 81       	ldd	r31, Y+1	; 0x01
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	82 83       	std	Z+2, r24	; 0x02
    188e:	e8 81       	ld	r30, Y
    1890:	f9 81       	ldd	r31, Y+1	; 0x01
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	85 83       	std	Z+5, r24	; 0x05
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	09 f4       	brne	.+2      	; 0x18a0 <uart_init+0x28>
    189e:	5c c1       	rjmp	.+696    	; 0x1b58 <uart_init+0x2e0>
    18a0:	80 3c       	cpi	r24, 0xC0	; 192
    18a2:	91 05       	cpc	r25, r1
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <uart_init+0x38>
    18a6:	60 e1       	ldi	r22, 0x10	; 16
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    18ae:	54 c1       	rjmp	.+680    	; 0x1b58 <uart_init+0x2e0>
    18b0:	80 34       	cpi	r24, 0x40	; 64
    18b2:	24 e0       	ldi	r18, 0x04	; 4
    18b4:	92 07       	cpc	r25, r18
    18b6:	29 f4       	brne	.+10     	; 0x18c2 <uart_init+0x4a>
    18b8:	68 e0       	ldi	r22, 0x08	; 8
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    18c0:	4b c1       	rjmp	.+662    	; 0x1b58 <uart_init+0x2e0>
    18c2:	81 15       	cp	r24, r1
    18c4:	24 e0       	ldi	r18, 0x04	; 4
    18c6:	92 07       	cpc	r25, r18
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <uart_init+0x5c>
    18ca:	64 e0       	ldi	r22, 0x04	; 4
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    18d2:	42 c1       	rjmp	.+644    	; 0x1b58 <uart_init+0x2e0>
    18d4:	80 38       	cpi	r24, 0x80	; 128
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	92 07       	cpc	r25, r18
    18da:	29 f4       	brne	.+10     	; 0x18e6 <uart_init+0x6e>
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    18e4:	39 c1       	rjmp	.+626    	; 0x1b58 <uart_init+0x2e0>
    18e6:	81 15       	cp	r24, r1
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	92 07       	cpc	r25, r18
    18ec:	29 f4       	brne	.+10     	; 0x18f8 <uart_init+0x80>
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    18f6:	30 c1       	rjmp	.+608    	; 0x1b58 <uart_init+0x2e0>
    18f8:	80 38       	cpi	r24, 0x80	; 128
    18fa:	23 e0       	ldi	r18, 0x03	; 3
    18fc:	92 07       	cpc	r25, r18
    18fe:	29 f4       	brne	.+10     	; 0x190a <uart_init+0x92>
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1908:	27 c1       	rjmp	.+590    	; 0x1b58 <uart_init+0x2e0>
    190a:	80 39       	cpi	r24, 0x90	; 144
    190c:	23 e0       	ldi	r18, 0x03	; 3
    190e:	92 07       	cpc	r25, r18
    1910:	29 f4       	brne	.+10     	; 0x191c <uart_init+0xa4>
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    191a:	1e c1       	rjmp	.+572    	; 0x1b58 <uart_init+0x2e0>
    191c:	81 15       	cp	r24, r1
    191e:	22 e0       	ldi	r18, 0x02	; 2
    1920:	92 07       	cpc	r25, r18
    1922:	29 f4       	brne	.+10     	; 0x192e <uart_init+0xb6>
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    192c:	15 c1       	rjmp	.+554    	; 0x1b58 <uart_init+0x2e0>
    192e:	80 34       	cpi	r24, 0x40	; 64
    1930:	22 e0       	ldi	r18, 0x02	; 2
    1932:	92 07       	cpc	r25, r18
    1934:	29 f4       	brne	.+10     	; 0x1940 <uart_init+0xc8>
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    193e:	0c c1       	rjmp	.+536    	; 0x1b58 <uart_init+0x2e0>
    1940:	81 15       	cp	r24, r1
    1942:	23 e0       	ldi	r18, 0x03	; 3
    1944:	92 07       	cpc	r25, r18
    1946:	29 f4       	brne	.+10     	; 0x1952 <uart_init+0xda>
    1948:	64 e0       	ldi	r22, 0x04	; 4
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1950:	03 c1       	rjmp	.+518    	; 0x1b58 <uart_init+0x2e0>
    1952:	80 32       	cpi	r24, 0x20	; 32
    1954:	23 e0       	ldi	r18, 0x03	; 3
    1956:	92 07       	cpc	r25, r18
    1958:	29 f4       	brne	.+10     	; 0x1964 <uart_init+0xec>
    195a:	64 e0       	ldi	r22, 0x04	; 4
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1962:	fa c0       	rjmp	.+500    	; 0x1b58 <uart_init+0x2e0>
    1964:	81 15       	cp	r24, r1
    1966:	28 e0       	ldi	r18, 0x08	; 8
    1968:	92 07       	cpc	r25, r18
    196a:	29 f4       	brne	.+10     	; 0x1976 <uart_init+0xfe>
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1974:	f1 c0       	rjmp	.+482    	; 0x1b58 <uart_init+0x2e0>
    1976:	81 15       	cp	r24, r1
    1978:	29 e0       	ldi	r18, 0x09	; 9
    197a:	92 07       	cpc	r25, r18
    197c:	29 f4       	brne	.+10     	; 0x1988 <uart_init+0x110>
    197e:	61 e0       	ldi	r22, 0x01	; 1
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1986:	e8 c0       	rjmp	.+464    	; 0x1b58 <uart_init+0x2e0>
    1988:	81 15       	cp	r24, r1
    198a:	2a e0       	ldi	r18, 0x0A	; 10
    198c:	92 07       	cpc	r25, r18
    198e:	29 f4       	brne	.+10     	; 0x199a <uart_init+0x122>
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	85 e0       	ldi	r24, 0x05	; 5
    1994:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1998:	df c0       	rjmp	.+446    	; 0x1b58 <uart_init+0x2e0>
    199a:	81 15       	cp	r24, r1
    199c:	2b e0       	ldi	r18, 0x0B	; 11
    199e:	92 07       	cpc	r25, r18
    19a0:	29 f4       	brne	.+10     	; 0x19ac <uart_init+0x134>
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	86 e0       	ldi	r24, 0x06	; 6
    19a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    19aa:	d6 c0       	rjmp	.+428    	; 0x1b58 <uart_init+0x2e0>
    19ac:	80 34       	cpi	r24, 0x40	; 64
    19ae:	28 e0       	ldi	r18, 0x08	; 8
    19b0:	92 07       	cpc	r25, r18
    19b2:	29 f4       	brne	.+10     	; 0x19be <uart_init+0x146>
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    19bc:	cd c0       	rjmp	.+410    	; 0x1b58 <uart_init+0x2e0>
    19be:	80 34       	cpi	r24, 0x40	; 64
    19c0:	29 e0       	ldi	r18, 0x09	; 9
    19c2:	92 07       	cpc	r25, r18
    19c4:	29 f4       	brne	.+10     	; 0x19d0 <uart_init+0x158>
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	84 e0       	ldi	r24, 0x04	; 4
    19ca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    19ce:	c4 c0       	rjmp	.+392    	; 0x1b58 <uart_init+0x2e0>
    19d0:	80 34       	cpi	r24, 0x40	; 64
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	92 07       	cpc	r25, r18
    19d6:	29 f4       	brne	.+10     	; 0x19e2 <uart_init+0x16a>
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	85 e0       	ldi	r24, 0x05	; 5
    19dc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    19e0:	bb c0       	rjmp	.+374    	; 0x1b58 <uart_init+0x2e0>
    19e2:	80 34       	cpi	r24, 0x40	; 64
    19e4:	2b e0       	ldi	r18, 0x0B	; 11
    19e6:	92 07       	cpc	r25, r18
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <uart_init+0x17c>
    19ea:	62 e0       	ldi	r22, 0x02	; 2
    19ec:	86 e0       	ldi	r24, 0x06	; 6
    19ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    19f2:	b2 c0       	rjmp	.+356    	; 0x1b58 <uart_init+0x2e0>
    19f4:	80 39       	cpi	r24, 0x90	; 144
    19f6:	28 e0       	ldi	r18, 0x08	; 8
    19f8:	92 07       	cpc	r25, r18
    19fa:	29 f4       	brne	.+10     	; 0x1a06 <uart_init+0x18e>
    19fc:	64 e0       	ldi	r22, 0x04	; 4
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a04:	a9 c0       	rjmp	.+338    	; 0x1b58 <uart_init+0x2e0>
    1a06:	80 39       	cpi	r24, 0x90	; 144
    1a08:	29 e0       	ldi	r18, 0x09	; 9
    1a0a:	92 07       	cpc	r25, r18
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <uart_init+0x1a0>
    1a0e:	64 e0       	ldi	r22, 0x04	; 4
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a16:	a0 c0       	rjmp	.+320    	; 0x1b58 <uart_init+0x2e0>
    1a18:	80 39       	cpi	r24, 0x90	; 144
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	92 07       	cpc	r25, r18
    1a1e:	29 f4       	brne	.+10     	; 0x1a2a <uart_init+0x1b2>
    1a20:	64 e0       	ldi	r22, 0x04	; 4
    1a22:	85 e0       	ldi	r24, 0x05	; 5
    1a24:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a28:	97 c0       	rjmp	.+302    	; 0x1b58 <uart_init+0x2e0>
    1a2a:	80 39       	cpi	r24, 0x90	; 144
    1a2c:	2b e0       	ldi	r18, 0x0B	; 11
    1a2e:	92 07       	cpc	r25, r18
    1a30:	29 f4       	brne	.+10     	; 0x1a3c <uart_init+0x1c4>
    1a32:	64 e0       	ldi	r22, 0x04	; 4
    1a34:	86 e0       	ldi	r24, 0x06	; 6
    1a36:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a3a:	8e c0       	rjmp	.+284    	; 0x1b58 <uart_init+0x2e0>
    1a3c:	80 3c       	cpi	r24, 0xC0	; 192
    1a3e:	28 e0       	ldi	r18, 0x08	; 8
    1a40:	92 07       	cpc	r25, r18
    1a42:	29 f4       	brne	.+10     	; 0x1a4e <uart_init+0x1d6>
    1a44:	68 e0       	ldi	r22, 0x08	; 8
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a4c:	85 c0       	rjmp	.+266    	; 0x1b58 <uart_init+0x2e0>
    1a4e:	80 3c       	cpi	r24, 0xC0	; 192
    1a50:	29 e0       	ldi	r18, 0x09	; 9
    1a52:	92 07       	cpc	r25, r18
    1a54:	29 f4       	brne	.+10     	; 0x1a60 <uart_init+0x1e8>
    1a56:	68 e0       	ldi	r22, 0x08	; 8
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a5e:	7c c0       	rjmp	.+248    	; 0x1b58 <uart_init+0x2e0>
    1a60:	80 3c       	cpi	r24, 0xC0	; 192
    1a62:	2a e0       	ldi	r18, 0x0A	; 10
    1a64:	92 07       	cpc	r25, r18
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <uart_init+0x1fa>
    1a68:	68 e0       	ldi	r22, 0x08	; 8
    1a6a:	85 e0       	ldi	r24, 0x05	; 5
    1a6c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a70:	73 c0       	rjmp	.+230    	; 0x1b58 <uart_init+0x2e0>
    1a72:	80 3c       	cpi	r24, 0xC0	; 192
    1a74:	2b e0       	ldi	r18, 0x0B	; 11
    1a76:	92 07       	cpc	r25, r18
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <uart_init+0x20c>
    1a7a:	68 e0       	ldi	r22, 0x08	; 8
    1a7c:	86 e0       	ldi	r24, 0x06	; 6
    1a7e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a82:	6a c0       	rjmp	.+212    	; 0x1b58 <uart_init+0x2e0>
    1a84:	80 3a       	cpi	r24, 0xA0	; 160
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	92 07       	cpc	r25, r18
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <uart_init+0x21e>
    1a8c:	60 e1       	ldi	r22, 0x10	; 16
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1a94:	61 c0       	rjmp	.+194    	; 0x1b58 <uart_init+0x2e0>
    1a96:	80 3a       	cpi	r24, 0xA0	; 160
    1a98:	29 e0       	ldi	r18, 0x09	; 9
    1a9a:	92 07       	cpc	r25, r18
    1a9c:	29 f4       	brne	.+10     	; 0x1aa8 <uart_init+0x230>
    1a9e:	60 e1       	ldi	r22, 0x10	; 16
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1aa6:	58 c0       	rjmp	.+176    	; 0x1b58 <uart_init+0x2e0>
    1aa8:	80 3a       	cpi	r24, 0xA0	; 160
    1aaa:	2a e0       	ldi	r18, 0x0A	; 10
    1aac:	92 07       	cpc	r25, r18
    1aae:	29 f4       	brne	.+10     	; 0x1aba <uart_init+0x242>
    1ab0:	60 e1       	ldi	r22, 0x10	; 16
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ab8:	4f c0       	rjmp	.+158    	; 0x1b58 <uart_init+0x2e0>
    1aba:	80 3a       	cpi	r24, 0xA0	; 160
    1abc:	2b e0       	ldi	r18, 0x0B	; 11
    1abe:	92 07       	cpc	r25, r18
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <uart_init+0x254>
    1ac2:	60 e1       	ldi	r22, 0x10	; 16
    1ac4:	86 e0       	ldi	r24, 0x06	; 6
    1ac6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1aca:	46 c0       	rjmp	.+140    	; 0x1b58 <uart_init+0x2e0>
    1acc:	80 3b       	cpi	r24, 0xB0	; 176
    1ace:	28 e0       	ldi	r18, 0x08	; 8
    1ad0:	92 07       	cpc	r25, r18
    1ad2:	29 f4       	brne	.+10     	; 0x1ade <uart_init+0x266>
    1ad4:	60 e2       	ldi	r22, 0x20	; 32
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1adc:	3d c0       	rjmp	.+122    	; 0x1b58 <uart_init+0x2e0>
    1ade:	80 3b       	cpi	r24, 0xB0	; 176
    1ae0:	29 e0       	ldi	r18, 0x09	; 9
    1ae2:	92 07       	cpc	r25, r18
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <uart_init+0x278>
    1ae6:	60 e2       	ldi	r22, 0x20	; 32
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1aee:	34 c0       	rjmp	.+104    	; 0x1b58 <uart_init+0x2e0>
    1af0:	80 3b       	cpi	r24, 0xB0	; 176
    1af2:	2a e0       	ldi	r18, 0x0A	; 10
    1af4:	92 07       	cpc	r25, r18
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <uart_init+0x28a>
    1af8:	60 e2       	ldi	r22, 0x20	; 32
    1afa:	85 e0       	ldi	r24, 0x05	; 5
    1afc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b00:	2b c0       	rjmp	.+86     	; 0x1b58 <uart_init+0x2e0>
    1b02:	80 3b       	cpi	r24, 0xB0	; 176
    1b04:	2b e0       	ldi	r18, 0x0B	; 11
    1b06:	92 07       	cpc	r25, r18
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <uart_init+0x29c>
    1b0a:	60 e2       	ldi	r22, 0x20	; 32
    1b0c:	86 e0       	ldi	r24, 0x06	; 6
    1b0e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b12:	22 c0       	rjmp	.+68     	; 0x1b58 <uart_init+0x2e0>
    1b14:	80 38       	cpi	r24, 0x80	; 128
    1b16:	24 e0       	ldi	r18, 0x04	; 4
    1b18:	92 07       	cpc	r25, r18
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <uart_init+0x2ae>
    1b1c:	60 e4       	ldi	r22, 0x40	; 64
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b24:	19 c0       	rjmp	.+50     	; 0x1b58 <uart_init+0x2e0>
    1b26:	80 39       	cpi	r24, 0x90	; 144
    1b28:	24 e0       	ldi	r18, 0x04	; 4
    1b2a:	92 07       	cpc	r25, r18
    1b2c:	29 f4       	brne	.+10     	; 0x1b38 <uart_init+0x2c0>
    1b2e:	60 e4       	ldi	r22, 0x40	; 64
    1b30:	84 e0       	ldi	r24, 0x04	; 4
    1b32:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b36:	10 c0       	rjmp	.+32     	; 0x1b58 <uart_init+0x2e0>
    1b38:	80 3a       	cpi	r24, 0xA0	; 160
    1b3a:	24 e0       	ldi	r18, 0x04	; 4
    1b3c:	92 07       	cpc	r25, r18
    1b3e:	29 f4       	brne	.+10     	; 0x1b4a <uart_init+0x2d2>
    1b40:	60 e4       	ldi	r22, 0x40	; 64
    1b42:	85 e0       	ldi	r24, 0x05	; 5
    1b44:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b48:	07 c0       	rjmp	.+14     	; 0x1b58 <uart_init+0x2e0>
    1b4a:	80 3b       	cpi	r24, 0xB0	; 176
    1b4c:	94 40       	sbci	r25, 0x04	; 4
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <uart_init+0x2e0>
    1b50:	60 e4       	ldi	r22, 0x40	; 64
    1b52:	86 e0       	ldi	r24, 0x06	; 6
    1b54:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5c:	a8 85       	ldd	r26, Y+8	; 0x08
    1b5e:	b9 85       	ldd	r27, Y+9	; 0x09
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	aa 1f       	adc	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	9c 01       	movw	r18, r24
    1b72:	ad 01       	movw	r20, r26
    1b74:	22 0f       	add	r18, r18
    1b76:	33 1f       	adc	r19, r19
    1b78:	44 1f       	adc	r20, r20
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	44 1f       	adc	r20, r20
    1b82:	55 1f       	adc	r21, r21
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	6c d0       	rcall	.+216    	; 0x1c66 <__udivmodsi4>
    1b8e:	da 01       	movw	r26, r20
    1b90:	c9 01       	movw	r24, r18
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	a1 09       	sbc	r26, r1
    1b96:	b1 09       	sbc	r27, r1
    1b98:	ea 81       	ldd	r30, Y+2	; 0x02
    1b9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9c:	17 82       	std	Z+7, r1	; 0x07
    1b9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba2:	86 83       	std	Z+6, r24	; 0x06
    1ba4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba8:	8f e3       	ldi	r24, 0x3F	; 63
    1baa:	83 83       	std	Z+3, r24	; 0x03
    1bac:	ea 81       	ldd	r30, Y+2	; 0x02
    1bae:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb0:	88 e1       	ldi	r24, 0x18	; 24
    1bb2:	84 83       	std	Z+4, r24	; 0x04
    1bb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	85 83       	std	Z+5, r24	; 0x05
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <uart_write>:
void uart_write(uart_device * device,uint8_t data)
{
    1bc2:	dc 01       	movw	r26, r24
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
    1bc4:	12 96       	adiw	r26, 0x02	; 2
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	13 97       	sbiw	r26, 0x03	; 3
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	95 ff       	sbrs	r25, 5
    1bd0:	fd cf       	rjmp	.-6      	; 0x1bcc <uart_write+0xa>
	device->Usart->DATA=data;
    1bd2:	60 83       	st	Z, r22
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
    1bd4:	12 96       	adiw	r26, 0x02	; 2
    1bd6:	ed 91       	ld	r30, X+
    1bd8:	fc 91       	ld	r31, X
    1bda:	13 97       	sbiw	r26, 0x03	; 3
    1bdc:	81 81       	ldd	r24, Z+1	; 0x01
    1bde:	86 fd       	sbrc	r24, 6
    1be0:	fd cf       	rjmp	.-6      	; 0x1bdc <uart_write+0x1a>
    1be2:	08 95       	ret

00001be4 <__portable_avr_delay_cycles>:
}
/*	Brief : The delay routine
 *	\param : delay in ms
*/
void BNO055_delay_msek(u32 msek)
{
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <__portable_avr_delay_cycles+0xa>
    1be6:	61 50       	subi	r22, 0x01	; 1
    1be8:	71 09       	sbc	r23, r1
    1bea:	81 09       	sbc	r24, r1
    1bec:	91 09       	sbc	r25, r1
    1bee:	61 15       	cp	r22, r1
    1bf0:	71 05       	cpc	r23, r1
    1bf2:	81 05       	cpc	r24, r1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	b9 f7       	brne	.-18     	; 0x1be6 <__portable_avr_delay_cycles+0x2>
    1bf8:	08 95       	ret

00001bfa <main>:
	/*Here you can write your own delay routine*/
}


int main (void)
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	2a 97       	sbiw	r28, 0x0a	; 10
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	de bf       	out	0x3e, r29	; 62
	//bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);//NDOF
	//
	//struct bno055_euler_float_t eulerData;
	//bno055_convert_float_euler_hpr_deg(&eulerData);
	
	sysclk_init();
    1c08:	0e 94 25 01 	call	0x24a	; 0x24a <sysclk_init>
	uart_device mydevice;
	mydevice.Baud=9600;
    1c0c:	80 e8       	ldi	r24, 0x80	; 128
    1c0e:	95 e2       	ldi	r25, 0x25	; 37
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	98 87       	std	Y+8, r25	; 0x08
    1c18:	a9 87       	std	Y+9, r26	; 0x09
    1c1a:	ba 87       	std	Y+10, r27	; 0x0a
	mydevice.Port=&PORTC;
    1c1c:	80 e4       	ldi	r24, 0x40	; 64
    1c1e:	96 e0       	ldi	r25, 0x06	; 6
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	9a 83       	std	Y+2, r25	; 0x02
	mydevice.Usart=&USARTC0;
    1c24:	80 ea       	ldi	r24, 0xA0	; 160
    1c26:	98 e0       	ldi	r25, 0x08	; 8
    1c28:	8b 83       	std	Y+3, r24	; 0x03
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
	mydevice.Txpin=0b00001000;
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	8e 83       	std	Y+6, r24	; 0x06
	mydevice.Rxpin=0b00000100;
    1c30:	84 e0       	ldi	r24, 0x04	; 4
    1c32:	8d 83       	std	Y+5, r24	; 0x05
	uart_init(&mydevice);
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	1f de       	rcall	.-962    	; 0x1878 <uart_init>
	while (1) {
		uart_write(&mydevice,45);
    1c3a:	6d e2       	ldi	r22, 0x2D	; 45
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	c0 df       	rcall	.-128    	; 0x1bc2 <uart_write>
		uart_write(&mydevice,26);
    1c42:	6a e1       	ldi	r22, 0x1A	; 26
    1c44:	ce 01       	movw	r24, r28
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	bc df       	rcall	.-136    	; 0x1bc2 <uart_write>
		uart_write(&mydevice,26);
    1c4a:	6a e1       	ldi	r22, 0x1A	; 26
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	b8 df       	rcall	.-144    	; 0x1bc2 <uart_write>
		uart_write(&mydevice,26);
    1c52:	6a e1       	ldi	r22, 0x1A	; 26
    1c54:	ce 01       	movw	r24, r28
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	b4 df       	rcall	.-152    	; 0x1bc2 <uart_write>
		delay_s(5);
    1c5a:	6c ea       	ldi	r22, 0xAC	; 172
    1c5c:	76 ee       	ldi	r23, 0xE6	; 230
    1c5e:	86 e9       	ldi	r24, 0x96	; 150
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	c0 df       	rcall	.-128    	; 0x1be4 <__portable_avr_delay_cycles>
    1c64:	ea cf       	rjmp	.-44     	; 0x1c3a <main+0x40>

00001c66 <__udivmodsi4>:
    1c66:	a1 e2       	ldi	r26, 0x21	; 33
    1c68:	1a 2e       	mov	r1, r26
    1c6a:	aa 1b       	sub	r26, r26
    1c6c:	bb 1b       	sub	r27, r27
    1c6e:	fd 01       	movw	r30, r26
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <__udivmodsi4_ep>

00001c72 <__udivmodsi4_loop>:
    1c72:	aa 1f       	adc	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	ee 1f       	adc	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	a2 17       	cp	r26, r18
    1c7c:	b3 07       	cpc	r27, r19
    1c7e:	e4 07       	cpc	r30, r20
    1c80:	f5 07       	cpc	r31, r21
    1c82:	20 f0       	brcs	.+8      	; 0x1c8c <__udivmodsi4_ep>
    1c84:	a2 1b       	sub	r26, r18
    1c86:	b3 0b       	sbc	r27, r19
    1c88:	e4 0b       	sbc	r30, r20
    1c8a:	f5 0b       	sbc	r31, r21

00001c8c <__udivmodsi4_ep>:
    1c8c:	66 1f       	adc	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	1a 94       	dec	r1
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <__udivmodsi4_loop>
    1c98:	60 95       	com	r22
    1c9a:	70 95       	com	r23
    1c9c:	80 95       	com	r24
    1c9e:	90 95       	com	r25
    1ca0:	9b 01       	movw	r18, r22
    1ca2:	ac 01       	movw	r20, r24
    1ca4:	bd 01       	movw	r22, r26
    1ca6:	cf 01       	movw	r24, r30
    1ca8:	08 95       	ret

00001caa <_exit>:
    1caa:	f8 94       	cli

00001cac <__stop_program>:
    1cac:	ff cf       	rjmp	.-2      	; 0x1cac <__stop_program>
