
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00802000  00009408  0000949c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c1  008021f0  008021f0  0000968c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000968c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000096e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000010b0  00000000  00000000  00009728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a3f8  00000000  00000000  0000a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006225  00000000  00000000  00024bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000169cc  00000000  00000000  0002adf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004b18  00000000  00000000  000417c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00042e99  00000000  00000000  000462dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a688  00000000  00000000  00089175  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f88  00000000  00000000  00093800  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00012447  00000000  00000000  00094788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <__vector_10>
      2c:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__vector_11>
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__vector_13>
      38:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__vector_14>
      3c:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__vector_15>
      40:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__vector_16>
      44:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__vector_17>
      48:	0c 94 87 20 	jmp	0x410e	; 0x410e <__vector_18>
      4c:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <__vector_19>
      50:	0c 94 35 21 	jmp	0x426a	; 0x426a <__vector_20>
      54:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__vector_21>
      58:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <__vector_22>
      5c:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__vector_23>
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5c c5       	rjmp	.+2744   	; 0xb56 <__vector_39>
      9e:	00 00       	nop
      a0:	e6 c5       	rjmp	.+3020   	; 0xc6e <__vector_40>
      a2:	00 00       	nop
      a4:	70 c6       	rjmp	.+3296   	; 0xd86 <__vector_41>
      a6:	00 00       	nop
      a8:	fa c6       	rjmp	.+3572   	; 0xe9e <__vector_42>
      aa:	00 00       	nop
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 7b 2d 	jmp	0x5af6	; 0x5af6 <__vector_46>
      bc:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__vector_47>
      c0:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__vector_48>
      c4:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__vector_49>
      c8:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__vector_50>
      cc:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <__vector_51>
      d0:	0c 94 aa 27 	jmp	0x4f54	; 0x4f54 <__vector_52>
      d4:	0c 94 01 28 	jmp	0x5002	; 0x5002 <__vector_53>
      d8:	0c 94 58 28 	jmp	0x50b0	; 0x50b0 <__vector_54>
      dc:	0c 94 af 28 	jmp	0x515e	; 0x515e <__vector_55>
      e0:	0c 94 06 29 	jmp	0x520c	; 0x520c <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ec c2       	rjmp	.+1496   	; 0x6f6 <__vector_71>
     11e:	00 00       	nop
     120:	76 c3       	rjmp	.+1772   	; 0x80e <__vector_72>
     122:	00 00       	nop
     124:	00 c4       	rjmp	.+2048   	; 0x926 <__vector_73>
     126:	00 00       	nop
     128:	8a c4       	rjmp	.+2324   	; 0xa3e <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 2f 2d 	jmp	0x5a5e	; 0x5a5e <__vector_76>
     134:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__vector_77>
     138:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <__vector_78>
     13c:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__vector_79>
     140:	0c 94 96 23 	jmp	0x472c	; 0x472c <__vector_80>
     144:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__vector_81>
     148:	0c 94 44 24 	jmp	0x4888	; 0x4888 <__vector_82>
     14c:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__vector_83>
     150:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__vector_84>
     154:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__vector_85>
     158:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__vector_86>
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 c7 2d 	jmp	0x5b8e	; 0x5b8e <__vector_107>
     1b0:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <__vector_108>
     1b4:	0c 94 b4 29 	jmp	0x5368	; 0x5368 <__vector_109>
     1b8:	0c 94 0b 2a 	jmp	0x5416	; 0x5416 <__vector_110>
     1bc:	0c 94 62 2a 	jmp	0x54c4	; 0x54c4 <__vector_111>
     1c0:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__vector_112>
     1c4:	0c 94 10 2b 	jmp	0x5620	; 0x5620 <__vector_113>
     1c8:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__vector_114>
     1cc:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__vector_115>
     1d0:	0c 94 15 2c 	jmp	0x582a	; 0x582a <__vector_116>
     1d4:	0c 94 6c 2c 	jmp	0x58d8	; 0x58d8 <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__vector_119>
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c0       	rjmp	.+442    	; 0x3a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c0       	rjmp	.+434    	; 0x3a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_74+0x12>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	11 e2       	ldi	r17, 0x21	; 33
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	e8 e0       	ldi	r30, 0x08	; 8
     378:	f4 e9       	ldi	r31, 0x94	; 148
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 3f       	cpi	r26, 0xF0	; 240
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	22 e2       	ldi	r18, 0x22	; 34
     38e:	a0 ef       	ldi	r26, 0xF0	; 240
     390:	b1 e2       	ldi	r27, 0x21	; 33
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a1 3b       	cpi	r26, 0xB1	; 177
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 b6 3a 	call	0x756c	; 0x756c <main>
     3a0:	0c 94 02 4a 	jmp	0x9404	; 0x9404 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <cpu_irq_save>:
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	8f e3       	ldi	r24, 0x3F	; 63
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	f8 94       	cli
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	0f 90       	pop	r0
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <cpu_irq_restore>:
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
     3dc:	00 00       	nop
     3de:	0f 90       	pop	r0
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <sleepmgr_lock_mode>:
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	1f 92       	push	r1
     3ec:	1f 92       	push	r1
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	8a 83       	std	Y+2, r24	; 0x02
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	8d 56       	subi	r24, 0x6D	; 109
     3fc:	9d 4d       	sbci	r25, 0xDD	; 221
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	8f 3f       	cpi	r24, 0xFF	; 255
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	ff cf       	rjmp	.-2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     408:	ce df       	rcall	.-100    	; 0x3a6 <cpu_irq_save>
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	9c 01       	movw	r18, r24
     414:	2d 56       	subi	r18, 0x6D	; 109
     416:	3d 4d       	sbci	r19, 0xDD	; 221
     418:	f9 01       	movw	r30, r18
     41a:	20 81       	ld	r18, Z
     41c:	2f 5f       	subi	r18, 0xFF	; 255
     41e:	8d 56       	subi	r24, 0x6D	; 109
     420:	9d 4d       	sbci	r25, 0xDD	; 221
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	ce df       	rcall	.-100    	; 0x3c6 <cpu_irq_restore>
     42a:	00 00       	nop
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <sleepmgr_unlock_mode>:
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	1f 92       	push	r1
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8a 83       	std	Y+2, r24	; 0x02
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	8d 56       	subi	r24, 0x6D	; 109
     44c:	9d 4d       	sbci	r25, 0xDD	; 221
     44e:	fc 01       	movw	r30, r24
     450:	80 81       	ld	r24, Z
     452:	88 23       	and	r24, r24
     454:	09 f4       	brne	.+2      	; 0x458 <sleepmgr_unlock_mode+0x22>
     456:	ff cf       	rjmp	.-2      	; 0x456 <sleepmgr_unlock_mode+0x20>
     458:	a6 df       	rcall	.-180    	; 0x3a6 <cpu_irq_save>
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9c 01       	movw	r18, r24
     464:	2d 56       	subi	r18, 0x6D	; 109
     466:	3d 4d       	sbci	r19, 0xDD	; 221
     468:	f9 01       	movw	r30, r18
     46a:	20 81       	ld	r18, Z
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	8d 56       	subi	r24, 0x6D	; 109
     470:	9d 4d       	sbci	r25, 0xDD	; 221
     472:	fc 01       	movw	r30, r24
     474:	20 83       	st	Z, r18
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	a6 df       	rcall	.-180    	; 0x3c6 <cpu_irq_restore>
     47a:	00 00       	nop
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	1f 92       	push	r1
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	81 15       	cp	r24, r1
     49c:	92 40       	sbci	r25, 0x02	; 2
     49e:	69 f4       	brne	.+26     	; 0x4ba <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     4a0:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <__data_end>
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	98 0f       	add	r25, r24
     4a8:	90 93 f0 21 	sts	0x21F0, r25	; 0x8021f0 <__data_end>
     4ac:	88 23       	and	r24, r24
     4ae:	b1 f4       	brne	.+44     	; 0x4dc <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4b0:	62 e0       	ldi	r22, 0x02	; 2
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     4b8:	11 c0       	rjmp	.+34     	; 0x4dc <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	80 34       	cpi	r24, 0x40	; 64
     4c0:	92 40       	sbci	r25, 0x02	; 2
     4c2:	61 f4       	brne	.+24     	; 0x4dc <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     4c4:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <adcb_enable_count>
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	98 0f       	add	r25, r24
     4cc:	90 93 f1 21 	sts	0x21F1, r25	; 0x8021f1 <adcb_enable_count>
     4d0:	88 23       	and	r24, r24
     4d2:	21 f4       	brne	.+8      	; 0x4dc <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4d4:	62 e0       	ldi	r22, 0x02	; 2
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     4dc:	00 00       	nop
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	1f 92       	push	r1
     4ee:	1f 92       	push	r1
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	81 15       	cp	r24, r1
     4fe:	92 40       	sbci	r25, 0x02	; 2
     500:	71 f4       	brne	.+28     	; 0x51e <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     502:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <__data_end>
     506:	81 50       	subi	r24, 0x01	; 1
     508:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <__data_end>
     50c:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <__data_end>
     510:	88 23       	and	r24, r24
     512:	b9 f4       	brne	.+46     	; 0x542 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     514:	62 e0       	ldi	r22, 0x02	; 2
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     51c:	12 c0       	rjmp	.+36     	; 0x542 <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	80 34       	cpi	r24, 0x40	; 64
     524:	92 40       	sbci	r25, 0x02	; 2
     526:	69 f4       	brne	.+26     	; 0x542 <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     528:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <adcb_enable_count>
     52c:	81 50       	subi	r24, 0x01	; 1
     52e:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <adcb_enable_count>
     532:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <adcb_enable_count>
     536:	88 23       	and	r24, r24
     538:	21 f4       	brne	.+8      	; 0x542 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     542:	00 00       	nop
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	00 d0       	rcall	.+0      	; 0x554 <adc_enable+0x6>
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	8a 83       	std	Y+2, r24	; 0x02
     55a:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     55c:	24 df       	rcall	.-440    	; 0x3a6 <cpu_irq_save>
     55e:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	9b 81       	ldd	r25, Y+3	; 0x03
     564:	90 df       	rcall	.-224    	; 0x486 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	28 2f       	mov	r18, r24
     570:	21 60       	ori	r18, 0x01	; 1
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	9b 81       	ldd	r25, Y+3	; 0x03
     576:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
     578:	20 83       	st	Z, r18
     57a:	89 81       	ldd	r24, Y+1	; 0x01

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
     57c:	24 df       	rcall	.-440    	; 0x3c6 <cpu_irq_restore>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	32 df       	rcall	.-412    	; 0x3e6 <sleepmgr_lock_mode>
}
     582:	00 00       	nop
     584:	23 96       	adiw	r28, 0x03	; 3
     586:	cd bf       	out	0x3d, r28	; 61
     588:	de bf       	out	0x3e, r29	; 62
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	00 d0       	rcall	.+0      	; 0x596 <adc_disable+0x6>
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	8a 83       	std	Y+2, r24	; 0x02
     59c:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     59e:	03 df       	rcall	.-506    	; 0x3a6 <cpu_irq_save>
     5a0:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA &= ~ADC_ENABLE_bm;
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	9b 81       	ldd	r25, Y+3	; 0x03
     5a6:	fc 01       	movw	r30, r24
     5a8:	80 81       	ld	r24, Z
     5aa:	28 2f       	mov	r18, r24
     5ac:	2e 7f       	andi	r18, 0xFE	; 254
     5ae:	8a 81       	ldd	r24, Y+2	; 0x02
     5b0:	9b 81       	ldd	r25, Y+3	; 0x03
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ba:	96 df       	rcall	.-212    	; 0x4e8 <adc_disable_clock>
	cpu_irq_restore(flags);
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	03 df       	rcall	.-506    	; 0x3c6 <cpu_irq_restore>

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	39 df       	rcall	.-398    	; 0x436 <sleepmgr_unlock_mode>
     5c4:	00 00       	nop
}
     5c6:	23 96       	adiw	r28, 0x03	; 3
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     5dc:	8f e3       	ldi	r24, 0x3F	; 63
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	80 81       	ld	r24, Z
     5e4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     5e6:	f8 94       	cli
	return flags;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ea:	0f 90       	pop	r0
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	1f 92       	push	r1
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     5fe:	8f e3       	ldi	r24, 0x3F	; 63
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	29 81       	ldd	r18, Y+1	; 0x01
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
}
     608:	00 00       	nop
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	1f 92       	push	r1
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	88 2f       	mov	r24, r24
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	bc 01       	movw	r22, r24
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <nvm_read_byte>
}
     62c:	0f 90       	pop	r0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <adc_get_calibration_data+0x6>
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	88 2f       	mov	r24, r24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	91 05       	cpc	r25, r1
     64a:	e9 f0       	breq	.+58     	; 0x686 <adc_get_calibration_data+0x52>
     64c:	82 30       	cpi	r24, 0x02	; 2
     64e:	91 05       	cpc	r25, r1
     650:	89 f1       	breq	.+98     	; 0x6b4 <adc_get_calibration_data+0x80>
     652:	89 2b       	or	r24, r25
     654:	09 f0       	breq	.+2      	; 0x658 <adc_get_calibration_data+0x24>
     656:	45 c0       	rjmp	.+138    	; 0x6e2 <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     658:	81 e2       	ldi	r24, 0x21	; 33
     65a:	db df       	rcall	.-74     	; 0x612 <nvm_read_production_signature_row>
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	98 2f       	mov	r25, r24
     66a:	88 27       	eor	r24, r24
     66c:	89 83       	std	Y+1, r24	; 0x01
     66e:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
     670:	80 e2       	ldi	r24, 0x20	; 32
     672:	cf df       	rcall	.-98     	; 0x612 <nvm_read_production_signature_row>
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	29 81       	ldd	r18, Y+1	; 0x01
     67a:	3a 81       	ldd	r19, Y+2	; 0x02
     67c:	82 2b       	or	r24, r18
     67e:	93 2b       	or	r25, r19
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     684:	30 c0       	rjmp	.+96     	; 0x6e6 <adc_get_calibration_data+0xb2>
     686:	85 e2       	ldi	r24, 0x25	; 37
     688:	c4 df       	rcall	.-120    	; 0x612 <nvm_read_production_signature_row>
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	98 2f       	mov	r25, r24
     698:	88 27       	eor	r24, r24
     69a:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	84 e2       	ldi	r24, 0x24	; 36
     6a0:	b8 df       	rcall	.-144    	; 0x612 <nvm_read_production_signature_row>
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	29 81       	ldd	r18, Y+1	; 0x01
     6a8:	3a 81       	ldd	r19, Y+2	; 0x02
     6aa:	82 2b       	or	r24, r18
     6ac:	93 2b       	or	r25, r19
     6ae:	89 83       	std	Y+1, r24	; 0x01
		break;
     6b0:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
     6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <adc_get_calibration_data+0xb2>
     6b4:	8f e2       	ldi	r24, 0x2F	; 47
     6b6:	ad df       	rcall	.-166    	; 0x612 <nvm_read_production_signature_row>
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	98 2f       	mov	r25, r24
     6c6:	88 27       	eor	r24, r24
     6c8:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	8e e2       	ldi	r24, 0x2E	; 46
     6ce:	a1 df       	rcall	.-190    	; 0x612 <nvm_read_production_signature_row>
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	29 81       	ldd	r18, Y+1	; 0x01
     6d6:	3a 81       	ldd	r19, Y+2	; 0x02
     6d8:	82 2b       	or	r24, r18
     6da:	93 2b       	or	r25, r19
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	9a 83       	std	Y+2, r25	; 0x02
		break;
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     6e2:	19 82       	std	Y+1, r1	; 0x01
     6e4:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6ea:	23 96       	adiw	r28, 0x03	; 3
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     706:	0f 92       	push	r0
     708:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     70c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     710:	0f 92       	push	r0
     712:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     716:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     71a:	0f 92       	push	r0
     71c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     720:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     724:	0f 92       	push	r0
     726:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <__vector_71+0x52>
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     74e:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <adca_callback>
     752:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <adca_callback+0x1>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     762:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	83 70       	andi	r24, 0x03	; 3
     76c:	99 27       	eor	r25, r25
     76e:	89 2b       	or	r24, r25
     770:	39 f4       	brne	.+14     	; 0x780 <__vector_71+0x8a>
		index += 2;
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	8e 5f       	subi	r24, 0xFE	; 254
     776:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	86 95       	lsr	r24
     77c:	86 95       	lsr	r24
     77e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	81 70       	andi	r24, 0x01	; 1
     788:	99 27       	eor	r25, r25
     78a:	89 2b       	or	r24, r25
     78c:	19 f4       	brne	.+6      	; 0x794 <__vector_71+0x9e>
		index++;
     78e:	8c 81       	ldd	r24, Y+4	; 0x04
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	ac 01       	movw	r20, r24
     79a:	40 5e       	subi	r20, 0xE0	; 224
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	84 0f       	add	r24, r20
     7b2:	95 1f       	adc	r25, r21
     7b4:	fc 01       	movw	r30, r24
     7b6:	84 81       	ldd	r24, Z+4	; 0x04
     7b8:	95 81       	ldd	r25, Z+5	; 0x05
     7ba:	ac 01       	movw	r20, r24
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	f9 01       	movw	r30, r18
     7c4:	19 95       	eicall
}
     7c6:	00 00       	nop
     7c8:	24 96       	adiw	r28, 0x04	; 4
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	ff 91       	pop	r31
     7d4:	ef 91       	pop	r30
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	0f 90       	pop	r0
     7ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7f0:	0f 90       	pop	r0
     7f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7f6:	0f 90       	pop	r0
     7f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7fc:	0f 90       	pop	r0
     7fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     802:	0f 90       	pop	r0
     804:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     81e:	0f 92       	push	r0
     820:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     824:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     828:	0f 92       	push	r0
     82a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     82e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     832:	0f 92       	push	r0
     834:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     838:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     83c:	0f 92       	push	r0
     83e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	00 d0       	rcall	.+0      	; 0x860 <__vector_72+0x52>
     860:	1f 92       	push	r1
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     866:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <adca_callback>
     86a:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <adca_callback+0x1>
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     87a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	83 70       	andi	r24, 0x03	; 3
     884:	99 27       	eor	r25, r25
     886:	89 2b       	or	r24, r25
     888:	39 f4       	brne	.+14     	; 0x898 <__vector_72+0x8a>
		index += 2;
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	8e 5f       	subi	r24, 0xFE	; 254
     88e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	86 95       	lsr	r24
     894:	86 95       	lsr	r24
     896:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	81 70       	andi	r24, 0x01	; 1
     8a0:	99 27       	eor	r25, r25
     8a2:	89 2b       	or	r24, r25
     8a4:	19 f4       	brne	.+6      	; 0x8ac <__vector_72+0x9e>
		index++;
     8a6:	8c 81       	ldd	r24, Y+4	; 0x04
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	ac 01       	movw	r20, r24
     8b2:	40 5e       	subi	r20, 0xE0	; 224
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
     8b6:	8c 81       	ldd	r24, Y+4	; 0x04
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	84 0f       	add	r24, r20
     8ca:	95 1f       	adc	r25, r21
     8cc:	fc 01       	movw	r30, r24
     8ce:	84 81       	ldd	r24, Z+4	; 0x04
     8d0:	95 81       	ldd	r25, Z+5	; 0x05
     8d2:	ac 01       	movw	r20, r24
     8d4:	62 e0       	ldi	r22, 0x02	; 2
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	f9 01       	movw	r30, r18
     8dc:	19 95       	eicall
}
     8de:	00 00       	nop
     8e0:	24 96       	adiw	r28, 0x04	; 4
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     908:	0f 90       	pop	r0
     90a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     90e:	0f 90       	pop	r0
     910:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     914:	0f 90       	pop	r0
     916:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     91a:	0f 90       	pop	r0
     91c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     936:	0f 92       	push	r0
     938:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     93c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     940:	0f 92       	push	r0
     942:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     946:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     94a:	0f 92       	push	r0
     94c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     950:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     954:	0f 92       	push	r0
     956:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     95a:	2f 93       	push	r18
     95c:	3f 93       	push	r19
     95e:	4f 93       	push	r20
     960:	5f 93       	push	r21
     962:	6f 93       	push	r22
     964:	7f 93       	push	r23
     966:	8f 93       	push	r24
     968:	9f 93       	push	r25
     96a:	af 93       	push	r26
     96c:	bf 93       	push	r27
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	00 d0       	rcall	.+0      	; 0x978 <__vector_73+0x52>
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     97e:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <adca_callback>
     982:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <adca_callback+0x1>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	9a 83       	std	Y+2, r25	; 0x02
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     992:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	83 70       	andi	r24, 0x03	; 3
     99c:	99 27       	eor	r25, r25
     99e:	89 2b       	or	r24, r25
     9a0:	39 f4       	brne	.+14     	; 0x9b0 <__vector_73+0x8a>
		index += 2;
     9a2:	8c 81       	ldd	r24, Y+4	; 0x04
     9a4:	8e 5f       	subi	r24, 0xFE	; 254
     9a6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	86 95       	lsr	r24
     9ac:	86 95       	lsr	r24
     9ae:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	81 70       	andi	r24, 0x01	; 1
     9b8:	99 27       	eor	r25, r25
     9ba:	89 2b       	or	r24, r25
     9bc:	19 f4       	brne	.+6      	; 0x9c4 <__vector_73+0x9e>
		index++;
     9be:	8c 81       	ldd	r24, Y+4	; 0x04
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	ac 01       	movw	r20, r24
     9ca:	40 5e       	subi	r20, 0xE0	; 224
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	8c 81       	ldd	r24, Y+4	; 0x04
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	84 0f       	add	r24, r20
     9e2:	95 1f       	adc	r25, r21
     9e4:	fc 01       	movw	r30, r24
     9e6:	84 81       	ldd	r24, Z+4	; 0x04
     9e8:	95 81       	ldd	r25, Z+5	; 0x05
     9ea:	ac 01       	movw	r20, r24
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	f9 01       	movw	r30, r18
     9f4:	19 95       	eicall
}
     9f6:	00 00       	nop
     9f8:	24 96       	adiw	r28, 0x04	; 4
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a20:	0f 90       	pop	r0
     a22:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a26:	0f 90       	pop	r0
     a28:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a2c:	0f 90       	pop	r0
     a2e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a32:	0f 90       	pop	r0
     a34:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a4e:	0f 92       	push	r0
     a50:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a54:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a58:	0f 92       	push	r0
     a5a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a5e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a62:	0f 92       	push	r0
     a64:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a68:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a6c:	0f 92       	push	r0
     a6e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a72:	2f 93       	push	r18
     a74:	3f 93       	push	r19
     a76:	4f 93       	push	r20
     a78:	5f 93       	push	r21
     a7a:	6f 93       	push	r22
     a7c:	7f 93       	push	r23
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <__vector_74+0x52>
     a90:	1f 92       	push	r1
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     a96:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <adca_callback>
     a9a:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <adca_callback+0x1>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	88 e0       	ldi	r24, 0x08	; 8
     aa8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     aaa:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	83 70       	andi	r24, 0x03	; 3
     ab4:	99 27       	eor	r25, r25
     ab6:	89 2b       	or	r24, r25
     ab8:	39 f4       	brne	.+14     	; 0xac8 <__vector_74+0x8a>
		index += 2;
     aba:	8c 81       	ldd	r24, Y+4	; 0x04
     abc:	8e 5f       	subi	r24, 0xFE	; 254
     abe:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	86 95       	lsr	r24
     ac4:	86 95       	lsr	r24
     ac6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	81 70       	andi	r24, 0x01	; 1
     ad0:	99 27       	eor	r25, r25
     ad2:	89 2b       	or	r24, r25
     ad4:	19 f4       	brne	.+6      	; 0xadc <__vector_74+0x9e>
		index++;
     ad6:	8c 81       	ldd	r24, Y+4	; 0x04
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	ac 01       	movw	r20, r24
     ae2:	40 5e       	subi	r20, 0xE0	; 224
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	8c 81       	ldd	r24, Y+4	; 0x04
     ae8:	88 2f       	mov	r24, r24
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	84 0f       	add	r24, r20
     afa:	95 1f       	adc	r25, r21
     afc:	fc 01       	movw	r30, r24
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	95 81       	ldd	r25, Z+5	; 0x05
     b02:	ac 01       	movw	r20, r24
     b04:	68 e0       	ldi	r22, 0x08	; 8
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	f9 01       	movw	r30, r18
     b0c:	19 95       	eicall
}
     b0e:	00 00       	nop
     b10:	24 96       	adiw	r28, 0x04	; 4
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b38:	0f 90       	pop	r0
     b3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b3e:	0f 90       	pop	r0
     b40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b44:	0f 90       	pop	r0
     b46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b4a:	0f 90       	pop	r0
     b4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b66:	0f 92       	push	r0
     b68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b70:	0f 92       	push	r0
     b72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b7a:	0f 92       	push	r0
     b7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b84:	0f 92       	push	r0
     b86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <__vector_39+0x52>
     ba8:	1f 92       	push	r1
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     bae:	20 91 63 22 	lds	r18, 0x2263	; 0x802263 <adcb_callback>
     bb2:	30 91 64 22 	lds	r19, 0x2264	; 0x802264 <adcb_callback+0x1>
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	9a 83       	std	Y+2, r25	; 0x02
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     bc2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	83 70       	andi	r24, 0x03	; 3
     bcc:	99 27       	eor	r25, r25
     bce:	89 2b       	or	r24, r25
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__vector_39+0x8a>
		index += 2;
     bd2:	8c 81       	ldd	r24, Y+4	; 0x04
     bd4:	8e 5f       	subi	r24, 0xFE	; 254
     bd6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	86 95       	lsr	r24
     bdc:	86 95       	lsr	r24
     bde:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	81 70       	andi	r24, 0x01	; 1
     be8:	99 27       	eor	r25, r25
     bea:	89 2b       	or	r24, r25
     bec:	19 f4       	brne	.+6      	; 0xbf4 <__vector_39+0x9e>
		index++;
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	ac 01       	movw	r20, r24
     bfa:	40 5e       	subi	r20, 0xE0	; 224
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	84 0f       	add	r24, r20
     c12:	95 1f       	adc	r25, r21
     c14:	fc 01       	movw	r30, r24
     c16:	84 81       	ldd	r24, Z+4	; 0x04
     c18:	95 81       	ldd	r25, Z+5	; 0x05
     c1a:	ac 01       	movw	r20, r24
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	f9 01       	movw	r30, r18
     c24:	19 95       	eicall
}
     c26:	00 00       	nop
     c28:	24 96       	adiw	r28, 0x04	; 4
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c50:	0f 90       	pop	r0
     c52:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c56:	0f 90       	pop	r0
     c58:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c5c:	0f 90       	pop	r0
     c5e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c62:	0f 90       	pop	r0
     c64:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c7e:	0f 92       	push	r0
     c80:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c84:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c88:	0f 92       	push	r0
     c8a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c8e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c92:	0f 92       	push	r0
     c94:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c98:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c9c:	0f 92       	push	r0
     c9e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <__vector_40+0x52>
     cc0:	1f 92       	push	r1
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     cc6:	20 91 63 22 	lds	r18, 0x2263	; 0x802263 <adcb_callback>
     cca:	30 91 64 22 	lds	r19, 0x2264	; 0x802264 <adcb_callback+0x1>
     cce:	80 e4       	ldi	r24, 0x40	; 64
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cda:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	83 70       	andi	r24, 0x03	; 3
     ce4:	99 27       	eor	r25, r25
     ce6:	89 2b       	or	r24, r25
     ce8:	39 f4       	brne	.+14     	; 0xcf8 <__vector_40+0x8a>
		index += 2;
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	8e 5f       	subi	r24, 0xFE	; 254
     cee:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	86 95       	lsr	r24
     cf4:	86 95       	lsr	r24
     cf6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	81 70       	andi	r24, 0x01	; 1
     d00:	99 27       	eor	r25, r25
     d02:	89 2b       	or	r24, r25
     d04:	19 f4       	brne	.+6      	; 0xd0c <__vector_40+0x9e>
		index++;
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	ac 01       	movw	r20, r24
     d12:	40 5e       	subi	r20, 0xE0	; 224
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	84 0f       	add	r24, r20
     d2a:	95 1f       	adc	r25, r21
     d2c:	fc 01       	movw	r30, r24
     d2e:	84 81       	ldd	r24, Z+4	; 0x04
     d30:	95 81       	ldd	r25, Z+5	; 0x05
     d32:	ac 01       	movw	r20, r24
     d34:	62 e0       	ldi	r22, 0x02	; 2
     d36:	80 e4       	ldi	r24, 0x40	; 64
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	f9 01       	movw	r30, r18
     d3c:	19 95       	eicall
}
     d3e:	00 00       	nop
     d40:	24 96       	adiw	r28, 0x04	; 4
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d68:	0f 90       	pop	r0
     d6a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d6e:	0f 90       	pop	r0
     d70:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d74:	0f 90       	pop	r0
     d76:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d7a:	0f 90       	pop	r0
     d7c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d96:	0f 92       	push	r0
     d98:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d9c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     da0:	0f 92       	push	r0
     da2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     da6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     daa:	0f 92       	push	r0
     dac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     db0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     db4:	0f 92       	push	r0
     db6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dba:	2f 93       	push	r18
     dbc:	3f 93       	push	r19
     dbe:	4f 93       	push	r20
     dc0:	5f 93       	push	r21
     dc2:	6f 93       	push	r22
     dc4:	7f 93       	push	r23
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
     dca:	af 93       	push	r26
     dcc:	bf 93       	push	r27
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <__vector_41+0x52>
     dd8:	1f 92       	push	r1
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     dde:	20 91 63 22 	lds	r18, 0x2263	; 0x802263 <adcb_callback>
     de2:	30 91 64 22 	lds	r19, 0x2264	; 0x802264 <adcb_callback+0x1>
     de6:	80 e4       	ldi	r24, 0x40	; 64
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     df2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	83 70       	andi	r24, 0x03	; 3
     dfc:	99 27       	eor	r25, r25
     dfe:	89 2b       	or	r24, r25
     e00:	39 f4       	brne	.+14     	; 0xe10 <__vector_41+0x8a>
		index += 2;
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	8e 5f       	subi	r24, 0xFE	; 254
     e06:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	86 95       	lsr	r24
     e0c:	86 95       	lsr	r24
     e0e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	81 70       	andi	r24, 0x01	; 1
     e18:	99 27       	eor	r25, r25
     e1a:	89 2b       	or	r24, r25
     e1c:	19 f4       	brne	.+6      	; 0xe24 <__vector_41+0x9e>
		index++;
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	ac 01       	movw	r20, r24
     e2a:	40 5e       	subi	r20, 0xE0	; 224
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	84 0f       	add	r24, r20
     e42:	95 1f       	adc	r25, r21
     e44:	fc 01       	movw	r30, r24
     e46:	84 81       	ldd	r24, Z+4	; 0x04
     e48:	95 81       	ldd	r25, Z+5	; 0x05
     e4a:	ac 01       	movw	r20, r24
     e4c:	64 e0       	ldi	r22, 0x04	; 4
     e4e:	80 e4       	ldi	r24, 0x40	; 64
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	f9 01       	movw	r30, r18
     e54:	19 95       	eicall
}
     e56:	00 00       	nop
     e58:	24 96       	adiw	r28, 0x04	; 4
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e80:	0f 90       	pop	r0
     e82:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e86:	0f 90       	pop	r0
     e88:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e8c:	0f 90       	pop	r0
     e8e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e92:	0f 90       	pop	r0
     e94:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     eae:	0f 92       	push	r0
     eb0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     eb4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     eb8:	0f 92       	push	r0
     eba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ebe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ec2:	0f 92       	push	r0
     ec4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ec8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ecc:	0f 92       	push	r0
     ece:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <__vector_42+0x52>
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     ef6:	20 91 63 22 	lds	r18, 0x2263	; 0x802263 <adcb_callback>
     efa:	30 91 64 22 	lds	r19, 0x2264	; 0x802264 <adcb_callback+0x1>
     efe:	80 e4       	ldi	r24, 0x40	; 64
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f0a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	83 70       	andi	r24, 0x03	; 3
     f14:	99 27       	eor	r25, r25
     f16:	89 2b       	or	r24, r25
     f18:	39 f4       	brne	.+14     	; 0xf28 <__vector_42+0x8a>
		index += 2;
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	8e 5f       	subi	r24, 0xFE	; 254
     f1e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	81 70       	andi	r24, 0x01	; 1
     f30:	99 27       	eor	r25, r25
     f32:	89 2b       	or	r24, r25
     f34:	19 f4       	brne	.+6      	; 0xf3c <__vector_42+0x9e>
		index++;
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	ac 01       	movw	r20, r24
     f42:	40 5e       	subi	r20, 0xE0	; 224
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	84 0f       	add	r24, r20
     f5a:	95 1f       	adc	r25, r21
     f5c:	fc 01       	movw	r30, r24
     f5e:	84 81       	ldd	r24, Z+4	; 0x04
     f60:	95 81       	ldd	r25, Z+5	; 0x05
     f62:	ac 01       	movw	r20, r24
     f64:	68 e0       	ldi	r22, 0x08	; 8
     f66:	80 e4       	ldi	r24, 0x40	; 64
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	f9 01       	movw	r30, r18
     f6c:	19 95       	eicall
}
     f6e:	00 00       	nop
     f70:	24 96       	adiw	r28, 0x04	; 4
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f98:	0f 90       	pop	r0
     f9a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f9e:	0f 90       	pop	r0
     fa0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fa4:	0f 90       	pop	r0
     fa6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     faa:	0f 90       	pop	r0
     fac:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	28 97       	sbiw	r28, 0x08	; 8
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	6f 83       	std	Y+7, r22	; 0x07
     fca:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	81 15       	cp	r24, r1
     fd2:	92 40       	sbci	r25, 0x02	; 2
     fd4:	29 f4       	brne	.+10     	; 0xfe0 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	2d db       	rcall	.-2470   	; 0x634 <adc_get_calibration_data>
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	0a c0       	rjmp	.+20     	; 0xff4 <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	80 34       	cpi	r24, 0x40	; 64
     fe6:	92 40       	sbci	r25, 0x02	; 2
     fe8:	09 f0       	breq	.+2      	; 0xfec <adc_write_configuration+0x36>
     fea:	56 c0       	rjmp	.+172    	; 0x1098 <adc_write_configuration+0xe2>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	22 db       	rcall	.-2492   	; 0x634 <adc_get_calibration_data>
     ff0:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	ee da       	rcall	.-2596   	; 0x5d2 <cpu_irq_save>
	adc_enable_clock(adc);
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	44 da       	rcall	.-2936   	; 0x486 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	fc 01       	movw	r30, r24
    1004:	80 81       	ld	r24, Z
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	22 e0       	ldi	r18, 0x02	; 2
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
	adc->CAL = cal;
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	29 81       	ldd	r18, Y+1	; 0x01
    101a:	3a 81       	ldd	r19, Y+2	; 0x02
    101c:	fc 01       	movw	r30, r24
    101e:	24 87       	std	Z+12, r18	; 0x0c
    1020:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    1022:	8f 81       	ldd	r24, Y+7	; 0x07
    1024:	98 85       	ldd	r25, Y+8	; 0x08
    1026:	fc 01       	movw	r30, r24
    1028:	25 81       	ldd	r18, Z+5	; 0x05
    102a:	36 81       	ldd	r19, Z+6	; 0x06
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	fc 01       	movw	r30, r24
    1032:	20 8f       	std	Z+24, r18	; 0x18
    1034:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1036:	8f 81       	ldd	r24, Y+7	; 0x07
    1038:	98 85       	ldd	r25, Y+8	; 0x08
    103a:	fc 01       	movw	r30, r24
    103c:	22 81       	ldd	r18, Z+2	; 0x02
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	fc 01       	movw	r30, r24
    1044:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	fc 01       	movw	r30, r24
    104c:	24 81       	ldd	r18, Z+4	; 0x04
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	fc 01       	movw	r30, r24
    1054:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	fc 01       	movw	r30, r24
    105c:	23 81       	ldd	r18, Z+3	; 0x03
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	fc 01       	movw	r30, r24
    1064:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    1066:	8f 81       	ldd	r24, Y+7	; 0x07
    1068:	98 85       	ldd	r25, Y+8	; 0x08
    106a:	fc 01       	movw	r30, r24
    106c:	21 81       	ldd	r18, Z+1	; 0x01
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	fc 01       	movw	r30, r24
    1074:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	98 85       	ldd	r25, Y+8	; 0x08
    107a:	fc 01       	movw	r30, r24
    107c:	90 81       	ld	r25, Z
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	29 2f       	mov	r18, r25
    1082:	28 2b       	or	r18, r24
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	fc 01       	movw	r30, r24

	adc_disable_clock(adc);
    108a:	20 83       	st	Z, r18
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06

	cpu_irq_restore(flags);
    1090:	2b da       	rcall	.-2986   	; 0x4e8 <adc_disable_clock>
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	ae da       	rcall	.-2724   	; 0x5f2 <cpu_irq_restore>
    1096:	01 c0       	rjmp	.+2      	; 0x109a <adc_write_configuration+0xe4>
	} else
#endif

	{
		Assert(0);
		return;
    1098:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    109a:	28 96       	adiw	r28, 0x08	; 8
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	25 97       	sbiw	r28, 0x05	; 5
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	9b 83       	std	Y+3, r25	; 0x03
    10b8:	6c 83       	std	Y+4, r22	; 0x04
    10ba:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    10bc:	8a da       	rcall	.-2796   	; 0x5d2 <cpu_irq_save>
    10be:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	e0 d9       	rcall	.-3136   	; 0x486 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	20 7c       	andi	r18, 0xC0	; 192
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9b 81       	ldd	r25, Y+3	; 0x03
    10de:	fc 01       	movw	r30, r24
    10e0:	20 8d       	ldd	r18, Z+24	; 0x18
    10e2:	31 8d       	ldd	r19, Z+25	; 0x19
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	fc 01       	movw	r30, r24
    10ea:	25 83       	std	Z+5, r18	; 0x05
    10ec:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	9b 81       	ldd	r25, Y+3	; 0x03
    10f2:	fc 01       	movw	r30, r24
    10f4:	22 81       	ldd	r18, Z+2	; 0x02
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	fc 01       	movw	r30, r24
    10fc:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	fc 01       	movw	r30, r24
    1104:	24 81       	ldd	r18, Z+4	; 0x04
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	fc 01       	movw	r30, r24
    110c:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	fc 01       	movw	r30, r24
    1114:	23 81       	ldd	r18, Z+3	; 0x03
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	fc 01       	movw	r30, r24
    111c:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	fc 01       	movw	r30, r24
    1124:	21 81       	ldd	r18, Z+1	; 0x01
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	fc 01       	movw	r30, r24
    112c:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03

	cpu_irq_restore(flags);
    1132:	da d9       	rcall	.-3148   	; 0x4e8 <adc_disable_clock>
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	5d da       	rcall	.-2886   	; 0x5f2 <cpu_irq_restore>
}
    1138:	00 00       	nop
    113a:	25 96       	adiw	r28, 0x05	; 5
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	2c 97       	sbiw	r28, 0x0c	; 12
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	88 87       	std	Y+8, r24	; 0x08
    1156:	99 87       	std	Y+9, r25	; 0x09
    1158:	6a 87       	std	Y+10, r22	; 0x0a
    115a:	4b 87       	std	Y+11, r20	; 0x0b
    115c:	5c 87       	std	Y+12, r21	; 0x0c
    115e:	88 85       	ldd	r24, Y+8	; 0x08
    1160:	99 85       	ldd	r25, Y+9	; 0x09
    1162:	8c 83       	std	Y+4, r24	; 0x04
    1164:	9d 83       	std	Y+5, r25	; 0x05
    1166:	8a 85       	ldd	r24, Y+10	; 0x0a
    1168:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    116a:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	83 70       	andi	r24, 0x03	; 3
    1174:	99 27       	eor	r25, r25
    1176:	89 2b       	or	r24, r25
    1178:	39 f4       	brne	.+14     	; 0x1188 <adcch_write_configuration+0x42>
		index += 2;
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	8e 5f       	subi	r24, 0xFE	; 254
    117e:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	86 95       	lsr	r24
    1184:	86 95       	lsr	r24
    1186:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	99 27       	eor	r25, r25
    1192:	89 2b       	or	r24, r25
    1194:	19 f4       	brne	.+6      	; 0x119c <adcch_write_configuration+0x56>
		index++;
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	9c 01       	movw	r18, r24
    11a2:	20 5e       	subi	r18, 0xE0	; 224
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	8f 81       	ldd	r24, Y+7	; 0x07
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	82 0f       	add	r24, r18
    11ba:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    11c0:	08 da       	rcall	.-3056   	; 0x5d2 <cpu_irq_save>
    11c2:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    11c4:	88 85       	ldd	r24, Y+8	; 0x08
    11c6:	99 85       	ldd	r25, Y+9	; 0x09
    11c8:	5e d9       	rcall	.-3396   	; 0x486 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    11ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    11cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 81       	ld	r18, Z
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    11da:	8b 85       	ldd	r24, Y+11	; 0x0b
    11dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11de:	fc 01       	movw	r30, r24
    11e0:	22 81       	ldd	r18, Z+2	; 0x02
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	fc 01       	movw	r30, r24
    11e8:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    11ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ee:	fc 01       	movw	r30, r24
    11f0:	21 81       	ldd	r18, Z+1	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	fc 01       	movw	r30, r24
    11f8:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    11fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	99 27       	eor	r25, r25
    1204:	89 2b       	or	r24, r25
    1206:	41 f0       	breq	.+16     	; 0x1218 <adcch_write_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1208:	8b 85       	ldd	r24, Y+11	; 0x0b
    120a:	9c 85       	ldd	r25, Y+12	; 0x0c
    120c:	fc 01       	movw	r30, r24
    120e:	23 81       	ldd	r18, Z+3	; 0x03
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	fc 01       	movw	r30, r24
    1216:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
    1218:	88 85       	ldd	r24, Y+8	; 0x08
    121a:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    121c:	65 d9       	rcall	.-3382   	; 0x4e8 <adc_disable_clock>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	e8 d9       	rcall	.-3120   	; 0x5f2 <cpu_irq_restore>
}
    1222:	00 00       	nop
    1224:	2c 96       	adiw	r28, 0x0c	; 12
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	2c 97       	sbiw	r28, 0x0c	; 12
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	88 87       	std	Y+8, r24	; 0x08
    1240:	99 87       	std	Y+9, r25	; 0x09
    1242:	6a 87       	std	Y+10, r22	; 0x0a
    1244:	4b 87       	std	Y+11, r20	; 0x0b
    1246:	5c 87       	std	Y+12, r21	; 0x0c
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	9d 83       	std	Y+5, r25	; 0x05
    1250:	8a 85       	ldd	r24, Y+10	; 0x0a
    1252:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1254:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	83 70       	andi	r24, 0x03	; 3
    125e:	99 27       	eor	r25, r25
    1260:	89 2b       	or	r24, r25
    1262:	39 f4       	brne	.+14     	; 0x1272 <adcch_read_configuration+0x42>
		index += 2;
    1264:	8f 81       	ldd	r24, Y+7	; 0x07
    1266:	8e 5f       	subi	r24, 0xFE	; 254
    1268:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	86 95       	lsr	r24
    126e:	86 95       	lsr	r24
    1270:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	99 27       	eor	r25, r25
    127c:	89 2b       	or	r24, r25
    127e:	19 f4       	brne	.+6      	; 0x1286 <adcch_read_configuration+0x56>
		index++;
    1280:	8f 81       	ldd	r24, Y+7	; 0x07
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	9c 01       	movw	r18, r24
    128c:	20 5e       	subi	r18, 0xE0	; 224
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	82 0f       	add	r24, r18
    12a4:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    12aa:	93 d9       	rcall	.-3290   	; 0x5d2 <cpu_irq_save>
    12ac:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    12ae:	88 85       	ldd	r24, Y+8	; 0x08
    12b0:	99 85       	ldd	r25, Y+9	; 0x09
    12b2:	e9 d8       	rcall	.-3630   	; 0x486 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 81       	ld	r18, Z
    12bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12be:	9c 85       	ldd	r25, Y+12	; 0x0c
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	fc 01       	movw	r30, r24
    12ca:	22 81       	ldd	r18, Z+2	; 0x02
    12cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d0:	fc 01       	movw	r30, r24
    12d2:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	fc 01       	movw	r30, r24
    12da:	21 81       	ldd	r18, Z+1	; 0x01
    12dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12de:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e0:	fc 01       	movw	r30, r24
    12e2:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    12e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	81 70       	andi	r24, 0x01	; 1
    12ec:	99 27       	eor	r25, r25
    12ee:	89 2b       	or	r24, r25
    12f0:	41 f0       	breq	.+16     	; 0x1302 <adcch_read_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	fc 01       	movw	r30, r24
    12f8:	26 81       	ldd	r18, Z+6	; 0x06
    12fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    12fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    12fe:	fc 01       	movw	r30, r24
    1300:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
    1302:	88 85       	ldd	r24, Y+8	; 0x08
    1304:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    1306:	f0 d8       	rcall	.-3616   	; 0x4e8 <adc_disable_clock>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	73 d9       	rcall	.-3354   	; 0x5f2 <cpu_irq_restore>
}
    130c:	00 00       	nop
    130e:	2c 96       	adiw	r28, 0x0c	; 12
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	1f 92       	push	r1
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    1324:	8f e3       	ldi	r24, 0x3F	; 63
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	fc 01       	movw	r30, r24
    132a:	80 81       	ld	r24, Z
    132c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    132e:	f8 94       	cli
	return flags;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
}
    1332:	0f 90       	pop	r0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	1f 92       	push	r1
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    1346:	8f e3       	ldi	r24, 0x3F	; 63
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	29 81       	ldd	r18, Y+1	; 0x01
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
}
    1350:	00 00       	nop
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	98 e4       	ldi	r25, 0x48	; 72
    1366:	a8 ee       	ldi	r26, 0xE8	; 232
    1368:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	1f 92       	push	r1
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    137e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1380:	ec df       	rcall	.-40     	; 0x135a <sysclk_get_main_hz>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	29 81       	ldd	r18, Y+1	; 0x01
    1388:	22 2f       	mov	r18, r18
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <sysclk_get_per4_hz+0x22>
    138e:	b6 95       	lsr	r27
    1390:	a7 95       	ror	r26
    1392:	97 95       	ror	r25
    1394:	87 95       	ror	r24
    1396:	2a 95       	dec	r18
    1398:	d2 f7       	brpl	.-12     	; 0x138e <sysclk_get_per4_hz+0x1a>
}
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    13ae:	e2 df       	rcall	.-60     	; 0x1374 <sysclk_get_per4_hz>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    13c6:	ef df       	rcall	.-34     	; 0x13a6 <sysclk_get_per2_hz>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
}
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	00 d0       	rcall	.+0      	; 0x13dc <adc_start_conversion+0x6>
    13dc:	1f 92       	push	r1
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	9b 83       	std	Y+3, r25	; 0x03
    13e6:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
    13e8:	98 df       	rcall	.-208    	; 0x131a <cpu_irq_save>
    13ea:	89 83       	std	Y+1, r24	; 0x01
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	82 2b       	or	r24, r18
    1406:	28 2f       	mov	r18, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
#endif
	cpu_irq_restore(flags);
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	93 df       	rcall	.-218    	; 0x133a <cpu_irq_restore>
}
    1414:	00 00       	nop
    1416:	24 96       	adiw	r28, 0x04	; 4
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <adc_get_interrupt_flag+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	fc 01       	movw	r30, r24
    1438:	96 81       	ldd	r25, Z+6	; 0x06
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	89 23       	and	r24, r25
}
    143e:	23 96       	adiw	r28, 0x03	; 3
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	00 d0       	rcall	.+0      	; 0x1450 <adc_clear_interrupt_flag+0x6>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	fc 01       	movw	r30, r24
    1462:	26 83       	std	Z+6, r18	; 0x06
}
    1464:	00 00       	nop
    1466:	23 96       	adiw	r28, 0x03	; 3
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <adc_wait_for_interrupt_flag+0x6>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	6b 81       	ldd	r22, Y+3	; 0x03
    1488:	cc df       	rcall	.-104    	; 0x1422 <adc_get_interrupt_flag>
    148a:	98 2f       	mov	r25, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	98 17       	cp	r25, r24
    1490:	c1 f7       	brne	.-16     	; 0x1482 <adc_wait_for_interrupt_flag+0x10>
	adc_clear_interrupt_flag(adc, ch_mask);
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	6b 81       	ldd	r22, Y+3	; 0x03
    1498:	d8 df       	rcall	.-80     	; 0x144a <adc_clear_interrupt_flag>
}
    149a:	00 00       	nop
    149c:	23 96       	adiw	r28, 0x03	; 3
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	2d 97       	sbiw	r28, 0x0d	; 13
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	88 87       	std	Y+8, r24	; 0x08
    14b8:	99 87       	std	Y+9, r25	; 0x09
    14ba:	4a 87       	std	Y+10, r20	; 0x0a
    14bc:	5b 87       	std	Y+11, r21	; 0x0b
    14be:	6c 87       	std	Y+12, r22	; 0x0c
    14c0:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    14c2:	7d df       	rcall	.-262    	; 0x13be <sysclk_get_per_hz>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	9b 83       	std	Y+3, r25	; 0x03
    14cc:	ac 83       	std	Y+4, r26	; 0x04
    14ce:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	ac 81       	ldd	r26, Y+4	; 0x04
    14d6:	bd 81       	ldd	r27, Y+5	; 0x05
    14d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    14da:	3b 85       	ldd	r19, Y+11	; 0x0b
    14dc:	4c 85       	ldd	r20, Y+12	; 0x0c
    14de:	5d 85       	ldd	r21, Y+13	; 0x0d
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 66 45 	call	0x8acc	; 0x8acc <__udivmodsi4>
    14e8:	da 01       	movw	r26, r20
    14ea:	c9 01       	movw	r24, r18
    14ec:	8e 83       	std	Y+6, r24	; 0x06
    14ee:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    14f0:	8e 81       	ldd	r24, Y+6	; 0x06
    14f2:	9f 81       	ldd	r25, Y+7	; 0x07
    14f4:	05 97       	sbiw	r24, 0x05	; 5
    14f6:	10 f4       	brcc	.+4      	; 0x14fc <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    14f8:	19 82       	std	Y+1, r1	; 0x01
    14fa:	2f c0       	rjmp	.+94     	; 0x155a <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    14fc:	8e 81       	ldd	r24, Y+6	; 0x06
    14fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1500:	09 97       	sbiw	r24, 0x09	; 9
    1502:	18 f4       	brcc	.+6      	; 0x150a <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	28 c0       	rjmp	.+80     	; 0x155a <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    150a:	8e 81       	ldd	r24, Y+6	; 0x06
    150c:	9f 81       	ldd	r25, Y+7	; 0x07
    150e:	41 97       	sbiw	r24, 0x11	; 17
    1510:	18 f4       	brcc	.+6      	; 0x1518 <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	21 c0       	rjmp	.+66     	; 0x155a <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    1518:	8e 81       	ldd	r24, Y+6	; 0x06
    151a:	9f 81       	ldd	r25, Y+7	; 0x07
    151c:	81 97       	sbiw	r24, 0x21	; 33
    151e:	18 f4       	brcc	.+6      	; 0x1526 <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	1a c0       	rjmp	.+52     	; 0x155a <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	81 34       	cpi	r24, 0x41	; 65
    152c:	91 05       	cpc	r25, r1
    152e:	18 f4       	brcc	.+6      	; 0x1536 <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    1530:	84 e0       	ldi	r24, 0x04	; 4
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	12 c0       	rjmp	.+36     	; 0x155a <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    1536:	8e 81       	ldd	r24, Y+6	; 0x06
    1538:	9f 81       	ldd	r25, Y+7	; 0x07
    153a:	81 38       	cpi	r24, 0x81	; 129
    153c:	91 05       	cpc	r25, r1
    153e:	18 f4       	brcc	.+6      	; 0x1546 <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    1540:	85 e0       	ldi	r24, 0x05	; 5
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	0a c0       	rjmp	.+20     	; 0x155a <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
    1548:	9f 81       	ldd	r25, Y+7	; 0x07
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 40       	sbci	r25, 0x01	; 1
    154e:	18 f4       	brcc	.+6      	; 0x1556 <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    1550:	86 e0       	ldi	r24, 0x06	; 6
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	02 c0       	rjmp	.+4      	; 0x155a <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    1556:	87 e0       	ldi	r24, 0x07	; 7
    1558:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    155a:	88 85       	ldd	r24, Y+8	; 0x08
    155c:	99 85       	ldd	r25, Y+9	; 0x09
    155e:	29 81       	ldd	r18, Y+1	; 0x01
    1560:	fc 01       	movw	r30, r24
    1562:	24 83       	std	Z+4, r18	; 0x04
}
    1564:	00 00       	nop
    1566:	2d 96       	adiw	r28, 0x0d	; 13
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	25 97       	sbiw	r28, 0x05	; 5
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	6b 83       	std	Y+3, r22	; 0x03
    1586:	4c 83       	std	Y+4, r20	; 0x04
    1588:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	fc 01       	movw	r30, r24
    1590:	81 81       	ldd	r24, Z+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	29 7e       	andi	r18, 0xE9	; 233
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	fc 01       	movw	r30, r24
    159c:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	fc 01       	movw	r30, r24
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	82 2b       	or	r24, r18
    15ac:	29 2f       	mov	r18, r25
    15ae:	28 2b       	or	r18, r24
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	fc 01       	movw	r30, r24
    15b6:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	fc 01       	movw	r30, r24
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	2f 78       	andi	r18, 0x8F	; 143
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	fc 01       	movw	r30, r24
    15ca:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	fc 01       	movw	r30, r24
    15d2:	92 81       	ldd	r25, Z+2	; 0x02
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	29 2f       	mov	r18, r25
    15d8:	28 2b       	or	r18, r24
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	fc 01       	movw	r30, r24
    15e0:	22 83       	std	Z+2, r18	; 0x02
}
    15e2:	00 00       	nop
    15e4:	25 96       	adiw	r28, 0x05	; 5
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	25 97       	sbiw	r28, 0x05	; 5
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	6b 83       	std	Y+3, r22	; 0x03
    1604:	4c 83       	std	Y+4, r20	; 0x04
    1606:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	11 f1       	breq	.+68     	; 0x1658 <adc_set_conversion_trigger+0x68>
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	91 05       	cpc	r25, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <adc_set_conversion_trigger+0x34>
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	71 f0       	breq	.+28     	; 0x163a <adc_set_conversion_trigger+0x4a>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	b9 f1       	breq	.+110    	; 0x1690 <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    1622:	a9 c0       	rjmp	.+338    	; 0x1776 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1624:	84 30       	cpi	r24, 0x04	; 4
    1626:	91 05       	cpc	r25, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <adc_set_conversion_trigger+0x3c>
    162a:	53 c0       	rjmp	.+166    	; 0x16d2 <adc_set_conversion_trigger+0xe2>
    162c:	84 30       	cpi	r24, 0x04	; 4
    162e:	91 05       	cpc	r25, r1
    1630:	d4 f1       	brlt	.+116    	; 0x16a6 <adc_set_conversion_trigger+0xb6>
    1632:	05 97       	sbiw	r24, 0x05	; 5
    1634:	09 f4       	brne	.+2      	; 0x1638 <adc_set_conversion_trigger+0x48>
    1636:	76 c0       	rjmp	.+236    	; 0x1724 <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    1638:	9e c0       	rjmp	.+316    	; 0x1776 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	fc 01       	movw	r30, r24
    1640:	81 81       	ldd	r24, Z+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	27 7f       	andi	r18, 0xF7	; 247
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	fc 01       	movw	r30, r24
    164c:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	fc 01       	movw	r30, r24
    1654:	13 82       	std	Z+3, r1	; 0x03
		break;
    1656:	8f c0       	rjmp	.+286    	; 0x1776 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	fc 01       	movw	r30, r24
    165e:	81 81       	ldd	r24, Z+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	27 7f       	andi	r18, 0xF7	; 247
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	fc 01       	movw	r30, r24
    166a:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	98 2f       	mov	r25, r24
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	89 2b       	or	r24, r25
    1684:	28 2f       	mov	r18, r24
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	fc 01       	movw	r30, r24
    168c:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    168e:	73 c0       	rjmp	.+230    	; 0x1776 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	fc 01       	movw	r30, r24
    1696:	81 81       	ldd	r24, Z+1	; 0x01
    1698:	28 2f       	mov	r18, r24
    169a:	28 60       	ori	r18, 0x08	; 8
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	fc 01       	movw	r30, r24
    16a2:	21 83       	std	Z+1, r18	; 0x01
		break;
    16a4:	68 c0       	rjmp	.+208    	; 0x1776 <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	fc 01       	movw	r30, r24
    16ac:	81 81       	ldd	r24, Z+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	28 60       	ori	r18, 0x08	; 8
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	fc 01       	movw	r30, r24
    16b8:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	81 50       	subi	r24, 0x01	; 1
    16be:	28 2f       	mov	r18, r24
    16c0:	22 95       	swap	r18
    16c2:	22 0f       	add	r18, r18
    16c4:	22 0f       	add	r18, r18
    16c6:	20 7c       	andi	r18, 0xC0	; 192
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	fc 01       	movw	r30, r24
    16ce:	23 83       	std	Z+3, r18	; 0x03
		break;
    16d0:	52 c0       	rjmp	.+164    	; 0x1776 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	fc 01       	movw	r30, r24
    16d8:	81 81       	ldd	r24, Z+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	27 7f       	andi	r18, 0xF7	; 247
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	fc 01       	movw	r30, r24
    16e4:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	00 24       	eor	r0, r0
    16f0:	96 95       	lsr	r25
    16f2:	87 95       	ror	r24
    16f4:	07 94       	ror	r0
    16f6:	96 95       	lsr	r25
    16f8:	87 95       	ror	r24
    16fa:	07 94       	ror	r0
    16fc:	98 2f       	mov	r25, r24
    16fe:	80 2d       	mov	r24, r0
    1700:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1714:	82 2b       	or	r24, r18
    1716:	85 60       	ori	r24, 0x05	; 5
    1718:	28 2f       	mov	r18, r24
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	fc 01       	movw	r30, r24
    1720:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    1722:	29 c0       	rjmp	.+82     	; 0x1776 <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	fc 01       	movw	r30, r24
    172a:	81 81       	ldd	r24, Z+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	27 7f       	andi	r18, 0xF7	; 247
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	fc 01       	movw	r30, r24
    1736:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	00 24       	eor	r0, r0
    1742:	96 95       	lsr	r25
    1744:	87 95       	ror	r24
    1746:	07 94       	ror	r0
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	07 94       	ror	r0
    174e:	98 2f       	mov	r25, r24
    1750:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1752:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1766:	82 2b       	or	r24, r18
    1768:	86 60       	ori	r24, 0x06	; 6
    176a:	28 2f       	mov	r18, r24
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	fc 01       	movw	r30, r24
    1772:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    1774:	00 00       	nop

	default:
		Assert(0);
	}
}
    1776:	00 00       	nop
    1778:	25 96       	adiw	r28, 0x05	; 5
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	1f 92       	push	r1
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	91 05       	cpc	r25, r1
    179a:	51 f1       	breq	.+84     	; 0x17f0 <adcch_get_gain_setting+0x6c>
    179c:	89 30       	cpi	r24, 0x09	; 9
    179e:	91 05       	cpc	r25, r1
    17a0:	7c f4       	brge	.+30     	; 0x17c0 <adcch_get_gain_setting+0x3c>
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	91 05       	cpc	r25, r1
    17a6:	f1 f0       	breq	.+60     	; 0x17e4 <adcch_get_gain_setting+0x60>
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	91 05       	cpc	r25, r1
    17ac:	1c f4       	brge	.+6      	; 0x17b4 <adcch_get_gain_setting+0x30>
    17ae:	89 2b       	or	r24, r25
    17b0:	b9 f0       	breq	.+46     	; 0x17e0 <adcch_get_gain_setting+0x5c>
    17b2:	28 c0       	rjmp	.+80     	; 0x1804 <adcch_get_gain_setting+0x80>
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	91 05       	cpc	r25, r1
    17b8:	b9 f0       	breq	.+46     	; 0x17e8 <adcch_get_gain_setting+0x64>
    17ba:	04 97       	sbiw	r24, 0x04	; 4
    17bc:	b9 f0       	breq	.+46     	; 0x17ec <adcch_get_gain_setting+0x68>
    17be:	22 c0       	rjmp	.+68     	; 0x1804 <adcch_get_gain_setting+0x80>
    17c0:	80 32       	cpi	r24, 0x20	; 32
    17c2:	91 05       	cpc	r25, r1
    17c4:	c9 f0       	breq	.+50     	; 0x17f8 <adcch_get_gain_setting+0x74>
    17c6:	81 32       	cpi	r24, 0x21	; 33
    17c8:	91 05       	cpc	r25, r1
    17ca:	1c f4       	brge	.+6      	; 0x17d2 <adcch_get_gain_setting+0x4e>
    17cc:	40 97       	sbiw	r24, 0x10	; 16
    17ce:	91 f0       	breq	.+36     	; 0x17f4 <adcch_get_gain_setting+0x70>
    17d0:	19 c0       	rjmp	.+50     	; 0x1804 <adcch_get_gain_setting+0x80>
    17d2:	80 34       	cpi	r24, 0x40	; 64
    17d4:	91 05       	cpc	r25, r1
    17d6:	91 f0       	breq	.+36     	; 0x17fc <adcch_get_gain_setting+0x78>
    17d8:	8f 3f       	cpi	r24, 0xFF	; 255
    17da:	91 05       	cpc	r25, r1
    17dc:	89 f0       	breq	.+34     	; 0x1800 <adcch_get_gain_setting+0x7c>
    17de:	12 c0       	rjmp	.+36     	; 0x1804 <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    17e0:	8c e1       	ldi	r24, 0x1C	; 28
    17e2:	11 c0       	rjmp	.+34     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    17ec:	88 e0       	ldi	r24, 0x08	; 8
    17ee:	0b c0       	rjmp	.+22     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    17f0:	8c e0       	ldi	r24, 0x0C	; 12
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    17f4:	80 e1       	ldi	r24, 0x10	; 16
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    17f8:	84 e1       	ldi	r24, 0x14	; 20
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    17fc:	88 e1       	ldi	r24, 0x18	; 24
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    1804:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	25 97       	sbiw	r28, 0x05	; 5
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	6b 83       	std	Y+3, r22	; 0x03
    1822:	4c 83       	std	Y+4, r20	; 0x04
    1824:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	80 31       	cpi	r24, 0x10	; 16
    182a:	78 f0       	brcs	.+30     	; 0x184a <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	fc 01       	movw	r30, r24
    1832:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	80 51       	subi	r24, 0x10	; 16
    1838:	28 2f       	mov	r18, r24
    183a:	22 0f       	add	r18, r18
    183c:	22 0f       	add	r18, r18
    183e:	22 0f       	add	r18, r18
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	fc 01       	movw	r30, r24
    1846:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1848:	87 c0       	rjmp	.+270    	; 0x1958 <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	8a 30       	cpi	r24, 0x0A	; 10
    184e:	79 f4       	brne	.+30     	; 0x186e <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	22 0f       	add	r18, r18
    1860:	22 0f       	add	r18, r18
    1862:	22 0f       	add	r18, r18
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	fc 01       	movw	r30, r24
    186a:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    186c:	75 c0       	rjmp	.+234    	; 0x1958 <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	b8 f4       	brcc	.+46     	; 0x18a2 <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	22 e0       	ldi	r18, 0x02	; 2
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	98 2f       	mov	r25, r24
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	89 2b       	or	r24, r25
    1896:	28 2f       	mov	r18, r24
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	fc 01       	movw	r30, r24
    189e:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    18a0:	5b c0       	rjmp	.+182    	; 0x1958 <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	d8 f4       	brcc	.+54     	; 0x18de <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	6c df       	rcall	.-296    	; 0x1784 <adcch_get_gain_setting>
    18ac:	28 2f       	mov	r18, r24
    18ae:	23 60       	ori	r18, 0x03	; 3
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	98 2f       	mov	r25, r24
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	84 50       	subi	r24, 0x04	; 4
    18d0:	89 2b       	or	r24, r25
    18d2:	28 2f       	mov	r18, r24
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	fc 01       	movw	r30, r24
    18da:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    18dc:	3d c0       	rjmp	.+122    	; 0x1958 <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	e1 f4       	brne	.+56     	; 0x191c <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	22 e0       	ldi	r18, 0x02	; 2
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	98 2f       	mov	r25, r24
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	11 f4       	brne	.+4      	; 0x190c <adcch_set_input+0xfe>
    1908:	85 e0       	ldi	r24, 0x05	; 5
    190a:	01 c0       	rjmp	.+2      	; 0x190e <adcch_set_input+0x100>
    190c:	87 e0       	ldi	r24, 0x07	; 7
    190e:	89 2b       	or	r24, r25
    1910:	28 2f       	mov	r18, r24
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	fc 01       	movw	r30, r24
    1918:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    191a:	1e c0       	rjmp	.+60     	; 0x1958 <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	32 df       	rcall	.-412    	; 0x1784 <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    1920:	28 2f       	mov	r18, r24
    1922:	23 60       	ori	r18, 0x03	; 3
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	98 2f       	mov	r25, r24
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	89 30       	cpi	r24, 0x09	; 9
    1944:	11 f4       	brne	.+4      	; 0x194a <adcch_set_input+0x13c>
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	01 c0       	rjmp	.+2      	; 0x194c <adcch_set_input+0x13e>
    194a:	87 e0       	ldi	r24, 0x07	; 7
    194c:	89 2b       	or	r24, r25
    194e:	28 2f       	mov	r18, r24
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	fc 01       	movw	r30, r24
    1956:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1958:	00 00       	nop
    195a:	25 96       	adiw	r28, 0x05	; 5
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask)
{
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	2e 97       	sbiw	r28, 0x0e	; 14
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	8c 87       	std	Y+12, r24	; 0x0c
    1976:	9d 87       	std	Y+13, r25	; 0x0d
    1978:	6e 87       	std	Y+14, r22	; 0x0e
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    197a:	8c 85       	ldd	r24, Y+12	; 0x0c
    197c:	9d 85       	ldd	r25, Y+13	; 0x0d
    197e:	9e 01       	movw	r18, r28
    1980:	2f 5f       	subi	r18, 0xFF	; 255
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	b9 01       	movw	r22, r18
    1986:	8f db       	rcall	.-2274   	; 0x10a6 <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    1988:	9e 01       	movw	r18, r28
    198a:	28 5f       	subi	r18, 0xF8	; 248
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
    198e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1990:	9d 85       	ldd	r25, Y+13	; 0x0d
    1992:	a9 01       	movw	r20, r18
    1994:	6e 85       	ldd	r22, Y+14	; 0x0e
    1996:	4c dc       	rcall	.-1896   	; 0x1230 <adcch_read_configuration>
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
    1998:	20 e1       	ldi	r18, 0x10	; 16
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	ce 01       	movw	r24, r28
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	e7 dd       	rcall	.-1074   	; 0x1572 <adc_set_conversion_parameters>
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	ce 01       	movw	r24, r28
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	20 de       	rcall	.-960    	; 0x15f0 <adc_set_conversion_trigger>
	adc_set_clock_rate(&adc_conf, 200000UL);
    19b0:	40 e4       	ldi	r20, 0x40	; 64
    19b2:	5d e0       	ldi	r21, 0x0D	; 13
    19b4:	63 e0       	ldi	r22, 0x03	; 3
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	75 dd       	rcall	.-1302   	; 0x14a8 <adc_set_clock_rate>
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 0);
    19be:	ce 01       	movw	r24, r28
    19c0:	08 96       	adiw	r24, 0x08	; 8
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	4a e0       	ldi	r20, 0x0A	; 10
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	22 df       	rcall	.-444    	; 0x180e <adcch_set_input>
	adc_write_configuration(adc, &adc_conf);
    19ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    19cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ce:	9e 01       	movw	r18, r28
    19d0:	2f 5f       	subi	r18, 0xFF	; 255
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	b9 01       	movw	r22, r18
    19d6:	ef da       	rcall	.-2594   	; 0xfb6 <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    19d8:	9e 01       	movw	r18, r28
    19da:	28 5f       	subi	r18, 0xF8	; 248
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    19e2:	a9 01       	movw	r20, r18
    19e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    19e6:	af db       	rcall	.-2210   	; 0x1146 <adcch_write_configuration>
	
}
    19e8:	00 00       	nop
    19ea:	2e 96       	adiw	r28, 0x0e	; 14
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <thermistor_init>:
void thermistor_init(void)
{
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	adc_init(&THERM_ADC,THERM_ADC_CH);
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	b0 df       	rcall	.-160    	; 0x1966 <adc_init>
	
}
    1a06:	00 00       	nop
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <volt_init>:
void volt_init(void)
{
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	adc_init(&VOLT_ADC,VOLT_ADC_CH);
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	80 e4       	ldi	r24, 0x40	; 64
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	a4 df       	rcall	.-184    	; 0x1966 <adc_init>
}
    1a1e:	00 00       	nop
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <getADCRead>:


float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	2d 97       	sbiw	r28, 0x0d	; 13
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	8b 87       	std	Y+11, r24	; 0x0b
    1a36:	9c 87       	std	Y+12, r25	; 0x0c
    1a38:	6d 87       	std	Y+13, r22	; 0x0d
		adc_enable(adc);
    1a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a3e:	0e 94 a7 02 	call	0x54e	; 0x54e <adc_enable>
		
		
		adc_start_conversion(adc, ch_mask);
    1a42:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a44:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a46:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a48:	c6 dc       	rcall	.-1652   	; 0x13d6 <adc_start_conversion>
		adc_wait_for_interrupt_flag(adc, ch_mask);
    1a4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a4e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a50:	10 dd       	rcall	.-1504   	; 0x1472 <adc_wait_for_interrupt_flag>
    1a52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a56:	8f 83       	std	Y+7, r24	; 0x07
    1a58:	98 87       	std	Y+8, r25	; 0x08
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	89 87       	std	Y+9, r24	; 0x09
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1a5e:	1a 86       	std	Y+10, r1	; 0x0a
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a60:	89 85       	ldd	r24, Y+9	; 0x09
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	83 70       	andi	r24, 0x03	; 3
    1a68:	99 27       	eor	r25, r25
    1a6a:	89 2b       	or	r24, r25
    1a6c:	39 f4       	brne	.+14     	; 0x1a7c <getADCRead+0x56>
		index += 2;
    1a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a70:	8e 5f       	subi	r24, 0xFE	; 254
    1a72:	8a 87       	std	Y+10, r24	; 0x0a
		ch_mask >>= 2;
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	86 95       	lsr	r24
    1a78:	86 95       	lsr	r24
    1a7a:	89 87       	std	Y+9, r24	; 0x09
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	99 27       	eor	r25, r25
    1a86:	89 2b       	or	r24, r25
    1a88:	19 f4       	brne	.+6      	; 0x1a90 <getADCRead+0x6a>
		index++;
    1a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8c:	8f 5f       	subi	r24, 0xFF	; 255
    1a8e:	8a 87       	std	Y+10, r24	; 0x0a
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1a90:	8f 81       	ldd	r24, Y+7	; 0x07
    1a92:	98 85       	ldd	r25, Y+8	; 0x08
    1a94:	9c 01       	movw	r18, r24
    1a96:	20 5e       	subi	r18, 0xE0	; 224
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	82 0f       	add	r24, r18
    1aae:	93 1f       	adc	r25, r19
		uint16_t adcReading = adc_get_result(adc, ch_mask);
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	84 81       	ldd	r24, Z+4	; 0x04
    1ab4:	95 81       	ldd	r25, Z+5	; 0x05
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
		//printf("ADC reading = %u\n", adcReading);
		float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	cc 01       	movw	r24, r24
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 2c 40 	call	0x8058	; 0x8058 <__floatunsisf>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	55 e4       	ldi	r21, 0x45	; 69
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 01       	movw	r18, r24
    1ae6:	ad 01       	movw	r20, r26
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <__addsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	ad 83       	std	Y+5, r26	; 0x05
    1afa:	be 83       	std	Y+6, r27	; 0x06
		//printf("voltage: %f \n", voltage);
		
		adc_disable(adc);
    1afc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b00:	0e 94 c8 02 	call	0x590	; 0x590 <adc_disable>
		return adcReading;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	cc 01       	movw	r24, r24
    1b0a:	a0 e0       	ldi	r26, 0x00	; 0
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 2c 40 	call	0x8058	; 0x8058 <__floatunsisf>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
	
}
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	2d 96       	adiw	r28, 0x0d	; 13
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <getVoltage>:
float getVoltage(void)
{
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <getVoltage+0x6>
    1b30:	1f 92       	push	r1
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	float adc_val = getADCRead(&VOLT_ADC,VOLT_ADC_CH);
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	80 e4       	ldi	r24, 0x40	; 64
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	74 df       	rcall	.-280    	; 0x1a26 <getADCRead>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	ab 83       	std	Y+3, r26	; 0x03
    1b48:	bc 83       	std	Y+4, r27	; 0x04
	return adc_val/4096.0*2;
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	55 e4       	ldi	r21, 0x45	; 69
    1b52:	69 81       	ldd	r22, Y+1	; 0x01
    1b54:	7a 81       	ldd	r23, Y+2	; 0x02
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9c 01       	movw	r18, r24
    1b64:	ad 01       	movw	r20, r26
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <__addsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
}
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	24 96       	adiw	r28, 0x04	; 4
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <getTemperature>:
float getTemperature(void)
{
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	2c 97       	sbiw	r28, 0x0c	; 12
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	de bf       	out	0x3e, r29	; 62
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	47 df       	rcall	.-370    	; 0x1a26 <getADCRead>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	25 ee       	ldi	r18, 0xE5	; 229
    1b9e:	30 ed       	ldi	r19, 0xD0	; 208
    1ba0:	42 e2       	ldi	r20, 0x22	; 34
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 4d 41 	call	0x829a	; 0x829a <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	ab 83       	std	Y+3, r26	; 0x03
    1bb6:	bc 83       	std	Y+4, r27	; 0x04
	float resistance = (8300.0)*((adc_val/3.3)-1);
    1bb8:	23 e3       	ldi	r18, 0x33	; 51
    1bba:	33 e3       	ldi	r19, 0x33	; 51
    1bbc:	43 e5       	ldi	r20, 0x53	; 83
    1bbe:	50 e4       	ldi	r21, 0x40	; 64
    1bc0:	69 81       	ldd	r22, Y+1	; 0x01
    1bc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 f4 3e 	call	0x7de8	; 0x7de8 <__subsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 eb       	ldi	r19, 0xB0	; 176
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	56 e4       	ldi	r21, 0x46	; 70
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 4d 41 	call	0x829a	; 0x829a <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	af 83       	std	Y+7, r26	; 0x07
    1bfe:	b8 87       	std	Y+8, r27	; 0x08
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3950.0*log(4096.0/(float)adc_val-1.0));
    1c00:	29 81       	ldd	r18, Y+1	; 0x01
    1c02:	3a 81       	ldd	r19, Y+2	; 0x02
    1c04:	4b 81       	ldd	r20, Y+3	; 0x03
    1c06:	5c 81       	ldd	r21, Y+4	; 0x04
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	80 e8       	ldi	r24, 0x80	; 128
    1c0e:	95 e4       	ldi	r25, 0x45	; 69
    1c10:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 f4 3e 	call	0x7de8	; 0x7de8 <__subsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 0d 41 	call	0x821a	; 0x821a <log>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	2c e2       	ldi	r18, 0x2C	; 44
    1c3a:	3b eb       	ldi	r19, 0xBB	; 187
    1c3c:	44 e8       	ldi	r20, 0x84	; 132
    1c3e:	59 e3       	ldi	r21, 0x39	; 57
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 4d 41 	call	0x829a	; 0x829a <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	2f e0       	ldi	r18, 0x0F	; 15
    1c4e:	3f ec       	ldi	r19, 0xCF	; 207
    1c50:	4b e5       	ldi	r20, 0x5B	; 91
    1c52:	5b e3       	ldi	r21, 0x3B	; 59
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 f5 3e 	call	0x7dea	; 0x7dea <__addsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9c 01       	movw	r18, r24
    1c62:	ad 01       	movw	r20, r26
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 e8       	ldi	r24, 0x80	; 128
    1c6a:	9f e3       	ldi	r25, 0x3F	; 63
    1c6c:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 00 40 	call	0x8000	; 0x8000 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	89 87       	std	Y+9, r24	; 0x09
    1c82:	9a 87       	std	Y+10, r25	; 0x0a
    1c84:	ab 87       	std	Y+11, r26	; 0x0b
    1c86:	bc 87       	std	Y+12, r27	; 0x0c
	return (temperature - 273.15);
    1c88:	69 85       	ldd	r22, Y+9	; 0x09
    1c8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c90:	0e 94 2c 40 	call	0x8058	; 0x8058 <__floatunsisf>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	23 e3       	ldi	r18, 0x33	; 51
    1c9a:	33 e9       	ldi	r19, 0x93	; 147
    1c9c:	48 e8       	ldi	r20, 0x88	; 136
    1c9e:	53 e4       	ldi	r21, 0x43	; 67
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 f4 3e 	call	0x7de8	; 0x7de8 <__subsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	2c 96       	adiw	r28, 0x0c	; 12
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	08 95       	ret

00001cbc <bno055_init>:
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	return com_rslt;
}
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	27 97       	sbiw	r28, 0x07	; 7
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	8e 83       	std	Y+6, r24	; 0x06
    1ccc:	9f 83       	std	Y+7, r25	; 0x07
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	1a 82       	std	Y+2, r1	; 0x02
    1cd4:	1b 82       	std	Y+3, r1	; 0x03
    1cd6:	1c 82       	std	Y+4, r1	; 0x04
    1cd8:	1d 82       	std	Y+5, r1	; 0x05
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cde:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <p_bno055>
    1ce2:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <p_bno055+0x1>
    1ce6:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1cea:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	19 96       	adiw	r26, 0x09	; 9
    1cf2:	ed 91       	ld	r30, X+
    1cf4:	fc 91       	ld	r31, X
    1cf6:	1a 97       	sbiw	r26, 0x0a	; 10
    1cf8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1cfc:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d00:	dc 01       	movw	r26, r24
    1d02:	18 96       	adiw	r26, 0x08	; 8
    1d04:	3c 91       	ld	r19, X
    1d06:	ce 01       	movw	r24, r28
    1d08:	03 96       	adiw	r24, 0x03	; 3
    1d0a:	21 e0       	ldi	r18, 0x01	; 1
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	67 e0       	ldi	r22, 0x07	; 7
    1d10:	83 2f       	mov	r24, r19
    1d12:	19 95       	eicall
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1d1a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	1b 96       	adiw	r26, 0x0b	; 11
    1d22:	ed 91       	ld	r30, X+
    1d24:	fc 91       	ld	r31, X
    1d26:	1c 97       	sbiw	r26, 0x0c	; 12
    1d28:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1d2c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d30:	dc 01       	movw	r26, r24
    1d32:	18 96       	adiw	r26, 0x08	; 8
    1d34:	3c 91       	ld	r19, X
    1d36:	ce 01       	movw	r24, r28
    1d38:	02 96       	adiw	r24, 0x02	; 2
    1d3a:	21 e0       	ldi	r18, 0x01	; 1
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	83 2f       	mov	r24, r19
    1d42:	19 95       	eicall
    1d44:	98 2f       	mov	r25, r24
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	89 0f       	add	r24, r25
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1d50:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d54:	2a 81       	ldd	r18, Y+2	; 0x02
    1d56:	fc 01       	movw	r30, r24
    1d58:	20 83       	st	Z, r18
    1d5a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1d5e:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d62:	dc 01       	movw	r26, r24
    1d64:	1b 96       	adiw	r26, 0x0b	; 11
    1d66:	ed 91       	ld	r30, X+
    1d68:	fc 91       	ld	r31, X
    1d6a:	1c 97       	sbiw	r26, 0x0c	; 12
    1d6c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1d70:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d74:	dc 01       	movw	r26, r24
    1d76:	18 96       	adiw	r26, 0x08	; 8
    1d78:	3c 91       	ld	r19, X
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	02 96       	adiw	r24, 0x02	; 2
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	ac 01       	movw	r20, r24
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	83 2f       	mov	r24, r19
    1d86:	19 95       	eicall
    1d88:	98 2f       	mov	r25, r24
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	89 0f       	add	r24, r25
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1d94:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1d98:	2a 81       	ldd	r18, Y+2	; 0x02
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	24 83       	std	Z+4, r18	; 0x04
    1d9e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1da2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1da6:	dc 01       	movw	r26, r24
    1da8:	1b 96       	adiw	r26, 0x0b	; 11
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	1c 97       	sbiw	r26, 0x0c	; 12
    1db0:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1db4:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1db8:	dc 01       	movw	r26, r24
    1dba:	18 96       	adiw	r26, 0x08	; 8
    1dbc:	3c 91       	ld	r19, X
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	02 96       	adiw	r24, 0x02	; 2
    1dc2:	21 e0       	ldi	r18, 0x01	; 1
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	83 2f       	mov	r24, r19
    1dca:	19 95       	eicall
    1dcc:	98 2f       	mov	r25, r24
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	89 0f       	add	r24, r25
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1dd8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1ddc:	2a 81       	ldd	r18, Y+2	; 0x02
    1dde:	fc 01       	movw	r30, r24
    1de0:	25 83       	std	Z+5, r18	; 0x05
    1de2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1de6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1dea:	dc 01       	movw	r26, r24
    1dec:	1b 96       	adiw	r26, 0x0b	; 11
    1dee:	ed 91       	ld	r30, X+
    1df0:	fc 91       	ld	r31, X
    1df2:	1c 97       	sbiw	r26, 0x0c	; 12
    1df4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1df8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	18 96       	adiw	r26, 0x08	; 8
    1e00:	3c 91       	ld	r19, X
    1e02:	ce 01       	movw	r24, r28
    1e04:	02 96       	adiw	r24, 0x02	; 2
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	ac 01       	movw	r20, r24
    1e0a:	63 e0       	ldi	r22, 0x03	; 3
    1e0c:	83 2f       	mov	r24, r19
    1e0e:	19 95       	eicall
    1e10:	98 2f       	mov	r25, r24
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	89 0f       	add	r24, r25
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1e1c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1e20:	2a 81       	ldd	r18, Y+2	; 0x02
    1e22:	fc 01       	movw	r30, r24
    1e24:	26 83       	std	Z+6, r18	; 0x06
    1e26:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1e2a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	1b 96       	adiw	r26, 0x0b	; 11
    1e32:	ed 91       	ld	r30, X+
    1e34:	fc 91       	ld	r31, X
    1e36:	1c 97       	sbiw	r26, 0x0c	; 12
    1e38:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1e3c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1e40:	dc 01       	movw	r26, r24
    1e42:	18 96       	adiw	r26, 0x08	; 8
    1e44:	3c 91       	ld	r19, X
    1e46:	ce 01       	movw	r24, r28
    1e48:	02 96       	adiw	r24, 0x02	; 2
    1e4a:	21 e0       	ldi	r18, 0x01	; 1
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	66 e0       	ldi	r22, 0x06	; 6
    1e50:	83 2f       	mov	r24, r19
    1e52:	19 95       	eicall
    1e54:	98 2f       	mov	r25, r24
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	89 0f       	add	r24, r25
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1e60:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1e64:	2a 81       	ldd	r18, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	27 83       	std	Z+7, r18	; 0x07
    1e6a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1e6e:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1e72:	dc 01       	movw	r26, r24
    1e74:	1b 96       	adiw	r26, 0x0b	; 11
    1e76:	ed 91       	ld	r30, X+
    1e78:	fc 91       	ld	r31, X
    1e7a:	1c 97       	sbiw	r26, 0x0c	; 12
    1e7c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1e80:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1e84:	dc 01       	movw	r26, r24
    1e86:	18 96       	adiw	r26, 0x08	; 8
    1e88:	3c 91       	ld	r19, X
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	04 96       	adiw	r24, 0x04	; 4
    1e8e:	22 e0       	ldi	r18, 0x02	; 2
    1e90:	ac 01       	movw	r20, r24
    1e92:	64 e0       	ldi	r22, 0x04	; 4
    1e94:	83 2f       	mov	r24, r19
    1e96:	19 95       	eicall
    1e98:	98 2f       	mov	r25, r24
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	89 0f       	add	r24, r25
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	8c 83       	std	Y+4, r24	; 0x04
    1ea4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1ea8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1eac:	2d 81       	ldd	r18, Y+5	; 0x05
    1eae:	22 2f       	mov	r18, r18
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	52 2f       	mov	r21, r18
    1eb4:	44 27       	eor	r20, r20
    1eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb8:	22 2f       	mov	r18, r18
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	24 2b       	or	r18, r20
    1ebe:	35 2b       	or	r19, r21
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	21 83       	std	Z+1, r18	; 0x01
    1ec4:	32 83       	std	Z+2, r19	; 0x02
    1ec6:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1eca:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	1b 96       	adiw	r26, 0x0b	; 11
    1ed2:	ed 91       	ld	r30, X+
    1ed4:	fc 91       	ld	r31, X
    1ed6:	1c 97       	sbiw	r26, 0x0c	; 12
    1ed8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1edc:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	18 96       	adiw	r26, 0x08	; 8
    1ee4:	3c 91       	ld	r19, X
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	02 96       	adiw	r24, 0x02	; 2
    1eea:	21 e0       	ldi	r18, 0x01	; 1
    1eec:	ac 01       	movw	r20, r24
    1eee:	67 e0       	ldi	r22, 0x07	; 7
    1ef0:	83 2f       	mov	r24, r19
    1ef2:	19 95       	eicall
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	89 0f       	add	r24, r25
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1f00:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1f04:	2a 81       	ldd	r18, Y+2	; 0x02
    1f06:	fc 01       	movw	r30, r24
    1f08:	23 83       	std	Z+3, r18	; 0x03
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	27 96       	adiw	r28, 0x07	; 7
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	08 95       	ret

00001f18 <bno055_write_register>:
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	25 97       	sbiw	r28, 0x05	; 5
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	8a 83       	std	Y+2, r24	; 0x02
    1f28:	6b 83       	std	Y+3, r22	; 0x03
    1f2a:	7c 83       	std	Y+4, r23	; 0x04
    1f2c:	4d 83       	std	Y+5, r20	; 0x05
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1f36:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1f3a:	89 2b       	or	r24, r25
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <bno055_write_register+0x2a>
    1f3e:	81 e8       	ldi	r24, 0x81	; 129
    1f40:	19 c0       	rjmp	.+50     	; 0x1f74 <bno055_write_register+0x5c>
    1f42:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1f46:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	19 96       	adiw	r26, 0x09	; 9
    1f4e:	ed 91       	ld	r30, X+
    1f50:	fc 91       	ld	r31, X
    1f52:	1a 97       	sbiw	r26, 0x0a	; 10
    1f54:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1f58:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	18 96       	adiw	r26, 0x08	; 8
    1f60:	3c 91       	ld	r19, X
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	2d 81       	ldd	r18, Y+5	; 0x05
    1f68:	ac 01       	movw	r20, r24
    1f6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f6c:	83 2f       	mov	r24, r19
    1f6e:	19 95       	eicall
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	25 96       	adiw	r28, 0x05	; 5
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <bno055_write_page_id>:
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <bno055_write_page_id+0x6>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	1a 82       	std	Y+2, r1	; 0x02
    1f92:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1f96:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1f9a:	89 2b       	or	r24, r25
    1f9c:	11 f4       	brne	.+4      	; 0x1fa2 <bno055_write_page_id+0x22>
    1f9e:	81 e8       	ldi	r24, 0x81	; 129
    1fa0:	46 c0       	rjmp	.+140    	; 0x202e <bno055_write_page_id+0xae>
    1fa2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1fa6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1faa:	dc 01       	movw	r26, r24
    1fac:	1b 96       	adiw	r26, 0x0b	; 11
    1fae:	ed 91       	ld	r30, X+
    1fb0:	fc 91       	ld	r31, X
    1fb2:	1c 97       	sbiw	r26, 0x0c	; 12
    1fb4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1fb8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	18 96       	adiw	r26, 0x08	; 8
    1fc0:	3c 91       	ld	r19, X
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	02 96       	adiw	r24, 0x02	; 2
    1fc6:	21 e0       	ldi	r18, 0x01	; 1
    1fc8:	ac 01       	movw	r20, r24
    1fca:	67 e0       	ldi	r22, 0x07	; 7
    1fcc:	83 2f       	mov	r24, r19
    1fce:	19 95       	eicall
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	88 23       	and	r24, r24
    1fd6:	41 f5       	brne	.+80     	; 0x2028 <bno055_write_page_id+0xa8>
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	8a 83       	std	Y+2, r24	; 0x02
    1fdc:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1fe0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	19 96       	adiw	r26, 0x09	; 9
    1fe8:	ed 91       	ld	r30, X+
    1fea:	fc 91       	ld	r31, X
    1fec:	1a 97       	sbiw	r26, 0x0a	; 10
    1fee:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    1ff2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	18 96       	adiw	r26, 0x08	; 8
    1ffa:	3c 91       	ld	r19, X
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	02 96       	adiw	r24, 0x02	; 2
    2000:	21 e0       	ldi	r18, 0x01	; 1
    2002:	ac 01       	movw	r20, r24
    2004:	67 e0       	ldi	r22, 0x07	; 7
    2006:	83 2f       	mov	r24, r19
    2008:	19 95       	eicall
    200a:	98 2f       	mov	r25, r24
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	89 0f       	add	r24, r25
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	88 23       	and	r24, r24
    2016:	51 f4       	brne	.+20     	; 0x202c <bno055_write_page_id+0xac>
    2018:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    201c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2020:	2b 81       	ldd	r18, Y+3	; 0x03
    2022:	fc 01       	movw	r30, r24
    2024:	23 83       	std	Z+3, r18	; 0x03
    2026:	02 c0       	rjmp	.+4      	; 0x202c <bno055_write_page_id+0xac>
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	23 96       	adiw	r28, 0x03	; 3
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <bno055_read_euler_hrp>:
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	2a 97       	sbiw	r28, 0x0a	; 10
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	89 87       	std	Y+9, r24	; 0x09
    204a:	9a 87       	std	Y+10, r25	; 0x0a
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	26 e0       	ldi	r18, 0x06	; 6
    2052:	ce 01       	movw	r24, r28
    2054:	03 96       	adiw	r24, 0x03	; 3
    2056:	dc 01       	movw	r26, r24
    2058:	e2 2f       	mov	r30, r18
    205a:	1d 92       	st	X+, r1
    205c:	ea 95       	dec	r30
    205e:	e9 f7       	brne	.-6      	; 0x205a <bno055_read_euler_hrp+0x20>
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2068:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    206c:	89 2b       	or	r24, r25
    206e:	11 f4       	brne	.+4      	; 0x2074 <bno055_read_euler_hrp+0x3a>
    2070:	81 e8       	ldi	r24, 0x81	; 129
    2072:	72 c0       	rjmp	.+228    	; 0x2158 <bno055_read_euler_hrp+0x11e>
    2074:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2078:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    207c:	dc 01       	movw	r26, r24
    207e:	13 96       	adiw	r26, 0x03	; 3
    2080:	8c 91       	ld	r24, X
    2082:	88 23       	and	r24, r24
    2084:	19 f0       	breq	.+6      	; 0x208c <bno055_read_euler_hrp+0x52>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	7b df       	rcall	.-266    	; 0x1f80 <bno055_write_page_id>
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	88 23       	and	r24, r24
    2090:	49 f0       	breq	.+18     	; 0x20a4 <bno055_read_euler_hrp+0x6a>
    2092:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2096:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    209a:	fc 01       	movw	r30, r24
    209c:	83 81       	ldd	r24, Z+3	; 0x03
    209e:	88 23       	and	r24, r24
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <bno055_read_euler_hrp+0x6a>
    20a2:	57 c0       	rjmp	.+174    	; 0x2152 <bno055_read_euler_hrp+0x118>
    20a4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    20a8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    20ac:	dc 01       	movw	r26, r24
    20ae:	1b 96       	adiw	r26, 0x0b	; 11
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	1c 97       	sbiw	r26, 0x0c	; 12
    20b6:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    20ba:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    20be:	dc 01       	movw	r26, r24
    20c0:	18 96       	adiw	r26, 0x08	; 8
    20c2:	3c 91       	ld	r19, X
    20c4:	ce 01       	movw	r24, r28
    20c6:	03 96       	adiw	r24, 0x03	; 3
    20c8:	26 e0       	ldi	r18, 0x06	; 6
    20ca:	ac 01       	movw	r20, r24
    20cc:	6a e1       	ldi	r22, 0x1A	; 26
    20ce:	83 2f       	mov	r24, r19
    20d0:	19 95       	eicall
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	8b 83       	std	Y+3, r24	; 0x03
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	8c 83       	std	Y+4, r24	; 0x04
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	08 2e       	mov	r0, r24
    20e0:	00 0c       	add	r0, r0
    20e2:	99 0b       	sbc	r25, r25
    20e4:	38 2f       	mov	r19, r24
    20e6:	22 27       	eor	r18, r18
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	28 2b       	or	r18, r24
    20f0:	39 2b       	or	r19, r25
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	fc 01       	movw	r30, r24
    20f8:	20 83       	st	Z, r18
    20fa:	31 83       	std	Z+1, r19	; 0x01
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	8e 83       	std	Y+6, r24	; 0x06
    2104:	8e 81       	ldd	r24, Y+6	; 0x06
    2106:	08 2e       	mov	r0, r24
    2108:	00 0c       	add	r0, r0
    210a:	99 0b       	sbc	r25, r25
    210c:	38 2f       	mov	r19, r24
    210e:	22 27       	eor	r18, r18
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	28 2b       	or	r18, r24
    2118:	39 2b       	or	r19, r25
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	dc 01       	movw	r26, r24
    2120:	12 96       	adiw	r26, 0x02	; 2
    2122:	2d 93       	st	X+, r18
    2124:	3c 93       	st	X, r19
    2126:	13 97       	sbiw	r26, 0x03	; 3
    2128:	8f 81       	ldd	r24, Y+7	; 0x07
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	88 85       	ldd	r24, Y+8	; 0x08
    212e:	88 87       	std	Y+8, r24	; 0x08
    2130:	88 85       	ldd	r24, Y+8	; 0x08
    2132:	08 2e       	mov	r0, r24
    2134:	00 0c       	add	r0, r0
    2136:	99 0b       	sbc	r25, r25
    2138:	38 2f       	mov	r19, r24
    213a:	22 27       	eor	r18, r18
    213c:	8f 81       	ldd	r24, Y+7	; 0x07
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	28 2b       	or	r18, r24
    2144:	39 2b       	or	r19, r25
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	fc 01       	movw	r30, r24
    214c:	24 83       	std	Z+4, r18	; 0x04
    214e:	35 83       	std	Z+5, r19	; 0x05
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <bno055_read_euler_hrp+0x11c>
    2152:	8f ef       	ldi	r24, 0xFF	; 255
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	2a 96       	adiw	r28, 0x0a	; 10
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	08 95       	ret

00002164 <bno055_read_linear_accel_xyz>:
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	2a 97       	sbiw	r28, 0x0a	; 10
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	89 87       	std	Y+9, r24	; 0x09
    2174:	9a 87       	std	Y+10, r25	; 0x0a
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	26 e0       	ldi	r18, 0x06	; 6
    217c:	ce 01       	movw	r24, r28
    217e:	03 96       	adiw	r24, 0x03	; 3
    2180:	dc 01       	movw	r26, r24
    2182:	e2 2f       	mov	r30, r18
    2184:	1d 92       	st	X+, r1
    2186:	ea 95       	dec	r30
    2188:	e9 f7       	brne	.-6      	; 0x2184 <bno055_read_linear_accel_xyz+0x20>
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	8a 83       	std	Y+2, r24	; 0x02
    218e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2192:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2196:	89 2b       	or	r24, r25
    2198:	11 f4       	brne	.+4      	; 0x219e <bno055_read_linear_accel_xyz+0x3a>
    219a:	81 e8       	ldi	r24, 0x81	; 129
    219c:	72 c0       	rjmp	.+228    	; 0x2282 <bno055_read_linear_accel_xyz+0x11e>
    219e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    21a2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    21a6:	dc 01       	movw	r26, r24
    21a8:	13 96       	adiw	r26, 0x03	; 3
    21aa:	8c 91       	ld	r24, X
    21ac:	88 23       	and	r24, r24
    21ae:	19 f0       	breq	.+6      	; 0x21b6 <bno055_read_linear_accel_xyz+0x52>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	e6 de       	rcall	.-564    	; 0x1f80 <bno055_write_page_id>
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	88 23       	and	r24, r24
    21ba:	49 f0       	breq	.+18     	; 0x21ce <bno055_read_linear_accel_xyz+0x6a>
    21bc:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    21c0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    21c4:	fc 01       	movw	r30, r24
    21c6:	83 81       	ldd	r24, Z+3	; 0x03
    21c8:	88 23       	and	r24, r24
    21ca:	09 f0       	breq	.+2      	; 0x21ce <bno055_read_linear_accel_xyz+0x6a>
    21cc:	57 c0       	rjmp	.+174    	; 0x227c <bno055_read_linear_accel_xyz+0x118>
    21ce:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    21d2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    21d6:	dc 01       	movw	r26, r24
    21d8:	1b 96       	adiw	r26, 0x0b	; 11
    21da:	ed 91       	ld	r30, X+
    21dc:	fc 91       	ld	r31, X
    21de:	1c 97       	sbiw	r26, 0x0c	; 12
    21e0:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    21e4:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    21e8:	dc 01       	movw	r26, r24
    21ea:	18 96       	adiw	r26, 0x08	; 8
    21ec:	3c 91       	ld	r19, X
    21ee:	ce 01       	movw	r24, r28
    21f0:	03 96       	adiw	r24, 0x03	; 3
    21f2:	26 e0       	ldi	r18, 0x06	; 6
    21f4:	ac 01       	movw	r20, r24
    21f6:	68 e2       	ldi	r22, 0x28	; 40
    21f8:	83 2f       	mov	r24, r19
    21fa:	19 95       	eicall
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	8c 83       	std	Y+4, r24	; 0x04
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	08 2e       	mov	r0, r24
    220a:	00 0c       	add	r0, r0
    220c:	99 0b       	sbc	r25, r25
    220e:	38 2f       	mov	r19, r24
    2210:	22 27       	eor	r18, r18
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	28 2b       	or	r18, r24
    221a:	39 2b       	or	r19, r25
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	fc 01       	movw	r30, r24
    2222:	20 83       	st	Z, r18
    2224:	31 83       	std	Z+1, r19	; 0x01
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8e 81       	ldd	r24, Y+6	; 0x06
    222c:	8e 83       	std	Y+6, r24	; 0x06
    222e:	8e 81       	ldd	r24, Y+6	; 0x06
    2230:	08 2e       	mov	r0, r24
    2232:	00 0c       	add	r0, r0
    2234:	99 0b       	sbc	r25, r25
    2236:	38 2f       	mov	r19, r24
    2238:	22 27       	eor	r18, r18
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	28 2b       	or	r18, r24
    2242:	39 2b       	or	r19, r25
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	dc 01       	movw	r26, r24
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	2d 93       	st	X+, r18
    224e:	3c 93       	st	X, r19
    2250:	13 97       	sbiw	r26, 0x03	; 3
    2252:	8f 81       	ldd	r24, Y+7	; 0x07
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	88 85       	ldd	r24, Y+8	; 0x08
    2258:	88 87       	std	Y+8, r24	; 0x08
    225a:	88 85       	ldd	r24, Y+8	; 0x08
    225c:	08 2e       	mov	r0, r24
    225e:	00 0c       	add	r0, r0
    2260:	99 0b       	sbc	r25, r25
    2262:	38 2f       	mov	r19, r24
    2264:	22 27       	eor	r18, r18
    2266:	8f 81       	ldd	r24, Y+7	; 0x07
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	28 2b       	or	r18, r24
    226e:	39 2b       	or	r19, r25
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	fc 01       	movw	r30, r24
    2276:	24 83       	std	Z+4, r18	; 0x04
    2278:	35 83       	std	Z+5, r19	; 0x05
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <bno055_read_linear_accel_xyz+0x11c>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	2a 96       	adiw	r28, 0x0a	; 10
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <bno055_convert_double_euler_hpr_deg>:
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	2a 97       	sbiw	r28, 0x0a	; 10
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	89 87       	std	Y+9, r24	; 0x09
    229e:	9a 87       	std	Y+10, r25	; 0x0a
    22a0:	8f ef       	ldi	r24, 0xFF	; 255
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	1a 82       	std	Y+2, r1	; 0x02
    22a6:	1b 82       	std	Y+3, r1	; 0x03
    22a8:	1c 82       	std	Y+4, r1	; 0x04
    22aa:	1d 82       	std	Y+5, r1	; 0x05
    22ac:	1e 82       	std	Y+6, r1	; 0x06
    22ae:	1f 82       	std	Y+7, r1	; 0x07
    22b0:	18 86       	std	Y+8, r1	; 0x08
    22b2:	ce 01       	movw	r24, r28
    22b4:	08 96       	adiw	r24, 0x08	; 8
    22b6:	64 d2       	rcall	.+1224   	; 0x2780 <bno055_get_euler_unit>
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	88 85       	ldd	r24, Y+8	; 0x08
    22bc:	88 23       	and	r24, r24
    22be:	31 f0       	breq	.+12     	; 0x22cc <bno055_convert_double_euler_hpr_deg+0x3e>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	bb d2       	rcall	.+1398   	; 0x283a <bno055_set_euler_unit>
    22c4:	98 2f       	mov	r25, r24
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	89 0f       	add	r24, r25
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	88 23       	and	r24, r24
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <bno055_convert_double_euler_hpr_deg+0x46>
    22d2:	66 c0       	rjmp	.+204    	; 0x23a0 <bno055_convert_double_euler_hpr_deg+0x112>
    22d4:	ce 01       	movw	r24, r28
    22d6:	02 96       	adiw	r24, 0x02	; 2
    22d8:	b0 de       	rcall	.-672    	; 0x203a <bno055_read_euler_hrp>
    22da:	98 2f       	mov	r25, r24
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	89 0f       	add	r24, r25
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	88 23       	and	r24, r24
    22e6:	09 f0       	breq	.+2      	; 0x22ea <bno055_convert_double_euler_hpr_deg+0x5c>
    22e8:	58 c0       	rjmp	.+176    	; 0x239a <bno055_convert_double_euler_hpr_deg+0x10c>
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	9b 81       	ldd	r25, Y+3	; 0x03
    22ee:	09 2e       	mov	r0, r25
    22f0:	00 0c       	add	r0, r0
    22f2:	aa 0b       	sbc	r26, r26
    22f4:	bb 0b       	sbc	r27, r27
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 2e 40 	call	0x805c	; 0x805c <__floatsisf>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	29 85       	ldd	r18, Y+9	; 0x09
    2318:	3a 85       	ldd	r19, Y+10	; 0x0a
    231a:	f9 01       	movw	r30, r18
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	9f 81       	ldd	r25, Y+7	; 0x07
    2328:	09 2e       	mov	r0, r25
    232a:	00 0c       	add	r0, r0
    232c:	aa 0b       	sbc	r26, r26
    232e:	bb 0b       	sbc	r27, r27
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 2e 40 	call	0x805c	; 0x805c <__floatsisf>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	29 85       	ldd	r18, Y+9	; 0x09
    2352:	3a 85       	ldd	r19, Y+10	; 0x0a
    2354:	f9 01       	movw	r30, r18
    2356:	80 87       	std	Z+8, r24	; 0x08
    2358:	91 87       	std	Z+9, r25	; 0x09
    235a:	a2 87       	std	Z+10, r26	; 0x0a
    235c:	b3 87       	std	Z+11, r27	; 0x0b
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	09 2e       	mov	r0, r25
    2364:	00 0c       	add	r0, r0
    2366:	aa 0b       	sbc	r26, r26
    2368:	bb 0b       	sbc	r27, r27
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 2e 40 	call	0x805c	; 0x805c <__floatsisf>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	29 85       	ldd	r18, Y+9	; 0x09
    238c:	3a 85       	ldd	r19, Y+10	; 0x0a
    238e:	f9 01       	movw	r30, r18
    2390:	84 83       	std	Z+4, r24	; 0x04
    2392:	95 83       	std	Z+5, r25	; 0x05
    2394:	a6 83       	std	Z+6, r26	; 0x06
    2396:	b7 83       	std	Z+7, r27	; 0x07
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <bno055_convert_double_euler_hpr_deg+0x116>
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <bno055_convert_double_euler_hpr_deg+0x116>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	2a 96       	adiw	r28, 0x0a	; 10
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	08 95       	ret

000023b2 <bno055_convert_double_linear_accel_xyz_msq>:
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	29 97       	sbiw	r28, 0x09	; 9
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	88 87       	std	Y+8, r24	; 0x08
    23c2:	99 87       	std	Y+9, r25	; 0x09
    23c4:	8f ef       	ldi	r24, 0xFF	; 255
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	1a 82       	std	Y+2, r1	; 0x02
    23ca:	1b 82       	std	Y+3, r1	; 0x03
    23cc:	1c 82       	std	Y+4, r1	; 0x04
    23ce:	1d 82       	std	Y+5, r1	; 0x05
    23d0:	1e 82       	std	Y+6, r1	; 0x06
    23d2:	1f 82       	std	Y+7, r1	; 0x07
    23d4:	ce 01       	movw	r24, r28
    23d6:	02 96       	adiw	r24, 0x02	; 2
    23d8:	c5 de       	rcall	.-630    	; 0x2164 <bno055_read_linear_accel_xyz>
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	88 23       	and	r24, r24
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <bno055_convert_double_linear_accel_xyz_msq+0x32>
    23e2:	58 c0       	rjmp	.+176    	; 0x2494 <bno055_convert_double_linear_accel_xyz_msq+0xe2>
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	09 2e       	mov	r0, r25
    23ea:	00 0c       	add	r0, r0
    23ec:	aa 0b       	sbc	r26, r26
    23ee:	bb 0b       	sbc	r27, r27
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 2e 40 	call	0x805c	; 0x805c <__floatsisf>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	48 ec       	ldi	r20, 0xC8	; 200
    2402:	52 e4       	ldi	r21, 0x42	; 66
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	28 85       	ldd	r18, Y+8	; 0x08
    2412:	39 85       	ldd	r19, Y+9	; 0x09
    2414:	f9 01       	movw	r30, r18
    2416:	80 83       	st	Z, r24
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	a2 83       	std	Z+2, r26	; 0x02
    241c:	b3 83       	std	Z+3, r27	; 0x03
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	9d 81       	ldd	r25, Y+5	; 0x05
    2422:	09 2e       	mov	r0, r25
    2424:	00 0c       	add	r0, r0
    2426:	aa 0b       	sbc	r26, r26
    2428:	bb 0b       	sbc	r27, r27
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 2e 40 	call	0x805c	; 0x805c <__floatsisf>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	48 ec       	ldi	r20, 0xC8	; 200
    243c:	52 e4       	ldi	r21, 0x42	; 66
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	28 85       	ldd	r18, Y+8	; 0x08
    244c:	39 85       	ldd	r19, Y+9	; 0x09
    244e:	f9 01       	movw	r30, r18
    2450:	84 83       	std	Z+4, r24	; 0x04
    2452:	95 83       	std	Z+5, r25	; 0x05
    2454:	a6 83       	std	Z+6, r26	; 0x06
    2456:	b7 83       	std	Z+7, r27	; 0x07
    2458:	8e 81       	ldd	r24, Y+6	; 0x06
    245a:	9f 81       	ldd	r25, Y+7	; 0x07
    245c:	09 2e       	mov	r0, r25
    245e:	00 0c       	add	r0, r0
    2460:	aa 0b       	sbc	r26, r26
    2462:	bb 0b       	sbc	r27, r27
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 2e 40 	call	0x805c	; 0x805c <__floatsisf>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	48 ec       	ldi	r20, 0xC8	; 200
    2476:	52 e4       	ldi	r21, 0x42	; 66
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	28 85       	ldd	r18, Y+8	; 0x08
    2486:	39 85       	ldd	r19, Y+9	; 0x09
    2488:	f9 01       	movw	r30, r18
    248a:	80 87       	std	Z+8, r24	; 0x08
    248c:	91 87       	std	Z+9, r25	; 0x09
    248e:	a2 87       	std	Z+10, r26	; 0x0a
    2490:	b3 87       	std	Z+11, r27	; 0x0b
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <bno055_convert_double_linear_accel_xyz_msq+0xe6>
    2494:	8f ef       	ldi	r24, 0xFF	; 255
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	29 96       	adiw	r28, 0x09	; 9
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <bno055_get_mag_calib_stat>:
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	25 97       	sbiw	r28, 0x05	; 5
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	8c 83       	std	Y+4, r24	; 0x04
    24b6:	9d 83       	std	Y+5, r25	; 0x05
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	1b 82       	std	Y+3, r1	; 0x03
    24be:	8f ef       	ldi	r24, 0xFF	; 255
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    24c2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    24c6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    24ca:	89 2b       	or	r24, r25
    24cc:	11 f4       	brne	.+4      	; 0x24d2 <bno055_get_mag_calib_stat+0x2c>
    24ce:	81 e8       	ldi	r24, 0x81	; 129
    24d0:	3a c0       	rjmp	.+116    	; 0x2546 <bno055_get_mag_calib_stat+0xa0>
    24d2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    24d6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    24da:	dc 01       	movw	r26, r24
    24dc:	13 96       	adiw	r26, 0x03	; 3
    24de:	8c 91       	ld	r24, X
    24e0:	88 23       	and	r24, r24
    24e2:	19 f0       	breq	.+6      	; 0x24ea <bno055_get_mag_calib_stat+0x44>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	4c dd       	rcall	.-1384   	; 0x1f80 <bno055_write_page_id>
    24e8:	8a 83       	std	Y+2, r24	; 0x02
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	88 23       	and	r24, r24
    24ee:	41 f0       	breq	.+16     	; 0x2500 <bno055_get_mag_calib_stat+0x5a>
    24f0:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    24f4:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    24f8:	fc 01       	movw	r30, r24
    24fa:	83 81       	ldd	r24, Z+3	; 0x03
    24fc:	88 23       	and	r24, r24
    24fe:	01 f5       	brne	.+64     	; 0x2540 <bno055_get_mag_calib_stat+0x9a>
    2500:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2504:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2508:	dc 01       	movw	r26, r24
    250a:	1b 96       	adiw	r26, 0x0b	; 11
    250c:	ed 91       	ld	r30, X+
    250e:	fc 91       	ld	r31, X
    2510:	1c 97       	sbiw	r26, 0x0c	; 12
    2512:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2516:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    251a:	dc 01       	movw	r26, r24
    251c:	18 96       	adiw	r26, 0x08	; 8
    251e:	3c 91       	ld	r19, X
    2520:	ce 01       	movw	r24, r28
    2522:	03 96       	adiw	r24, 0x03	; 3
    2524:	21 e0       	ldi	r18, 0x01	; 1
    2526:	ac 01       	movw	r20, r24
    2528:	65 e3       	ldi	r22, 0x35	; 53
    252a:	83 2f       	mov	r24, r19
    252c:	19 95       	eicall
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	28 2f       	mov	r18, r24
    2534:	23 70       	andi	r18, 0x03	; 3
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	fc 01       	movw	r30, r24
    253c:	20 83       	st	Z, r18
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <bno055_get_mag_calib_stat+0x9e>
    2540:	8f ef       	ldi	r24, 0xFF	; 255
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	25 96       	adiw	r28, 0x05	; 5
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	08 95       	ret

00002552 <bno055_get_accel_calib_stat>:
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	25 97       	sbiw	r28, 0x05	; 5
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	8c 83       	std	Y+4, r24	; 0x04
    2562:	9d 83       	std	Y+5, r25	; 0x05
    2564:	8f ef       	ldi	r24, 0xFF	; 255
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	1b 82       	std	Y+3, r1	; 0x03
    256a:	8f ef       	ldi	r24, 0xFF	; 255
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2572:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2576:	89 2b       	or	r24, r25
    2578:	11 f4       	brne	.+4      	; 0x257e <bno055_get_accel_calib_stat+0x2c>
    257a:	81 e8       	ldi	r24, 0x81	; 129
    257c:	41 c0       	rjmp	.+130    	; 0x2600 <bno055_get_accel_calib_stat+0xae>
    257e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2582:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2586:	dc 01       	movw	r26, r24
    2588:	13 96       	adiw	r26, 0x03	; 3
    258a:	8c 91       	ld	r24, X
    258c:	88 23       	and	r24, r24
    258e:	19 f0       	breq	.+6      	; 0x2596 <bno055_get_accel_calib_stat+0x44>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	f6 dc       	rcall	.-1556   	; 0x1f80 <bno055_write_page_id>
    2594:	8a 83       	std	Y+2, r24	; 0x02
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	88 23       	and	r24, r24
    259a:	41 f0       	breq	.+16     	; 0x25ac <bno055_get_accel_calib_stat+0x5a>
    259c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    25a0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    25a4:	fc 01       	movw	r30, r24
    25a6:	83 81       	ldd	r24, Z+3	; 0x03
    25a8:	88 23       	and	r24, r24
    25aa:	39 f5       	brne	.+78     	; 0x25fa <bno055_get_accel_calib_stat+0xa8>
    25ac:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    25b0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    25b4:	dc 01       	movw	r26, r24
    25b6:	1b 96       	adiw	r26, 0x0b	; 11
    25b8:	ed 91       	ld	r30, X+
    25ba:	fc 91       	ld	r31, X
    25bc:	1c 97       	sbiw	r26, 0x0c	; 12
    25be:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    25c2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    25c6:	dc 01       	movw	r26, r24
    25c8:	18 96       	adiw	r26, 0x08	; 8
    25ca:	3c 91       	ld	r19, X
    25cc:	ce 01       	movw	r24, r28
    25ce:	03 96       	adiw	r24, 0x03	; 3
    25d0:	21 e0       	ldi	r18, 0x01	; 1
    25d2:	ac 01       	movw	r20, r24
    25d4:	65 e3       	ldi	r22, 0x35	; 53
    25d6:	83 2f       	mov	r24, r19
    25d8:	19 95       	eicall
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	8c 70       	andi	r24, 0x0C	; 12
    25e4:	99 27       	eor	r25, r25
    25e6:	95 95       	asr	r25
    25e8:	87 95       	ror	r24
    25ea:	95 95       	asr	r25
    25ec:	87 95       	ror	r24
    25ee:	28 2f       	mov	r18, r24
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	9d 81       	ldd	r25, Y+5	; 0x05
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <bno055_get_accel_calib_stat+0xac>
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	25 96       	adiw	r28, 0x05	; 5
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <bno055_get_gyro_calib_stat>:
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	25 97       	sbiw	r28, 0x05	; 5
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	8c 83       	std	Y+4, r24	; 0x04
    261c:	9d 83       	std	Y+5, r25	; 0x05
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	1b 82       	std	Y+3, r1	; 0x03
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	8a 83       	std	Y+2, r24	; 0x02
    2628:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    262c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2630:	89 2b       	or	r24, r25
    2632:	11 f4       	brne	.+4      	; 0x2638 <bno055_get_gyro_calib_stat+0x2c>
    2634:	81 e8       	ldi	r24, 0x81	; 129
    2636:	45 c0       	rjmp	.+138    	; 0x26c2 <bno055_get_gyro_calib_stat+0xb6>
    2638:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    263c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2640:	dc 01       	movw	r26, r24
    2642:	13 96       	adiw	r26, 0x03	; 3
    2644:	8c 91       	ld	r24, X
    2646:	88 23       	and	r24, r24
    2648:	19 f0       	breq	.+6      	; 0x2650 <bno055_get_gyro_calib_stat+0x44>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	99 dc       	rcall	.-1742   	; 0x1f80 <bno055_write_page_id>
    264e:	8a 83       	std	Y+2, r24	; 0x02
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	88 23       	and	r24, r24
    2654:	41 f0       	breq	.+16     	; 0x2666 <bno055_get_gyro_calib_stat+0x5a>
    2656:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    265a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    265e:	fc 01       	movw	r30, r24
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	88 23       	and	r24, r24
    2664:	59 f5       	brne	.+86     	; 0x26bc <bno055_get_gyro_calib_stat+0xb0>
    2666:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    266a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    266e:	dc 01       	movw	r26, r24
    2670:	1b 96       	adiw	r26, 0x0b	; 11
    2672:	ed 91       	ld	r30, X+
    2674:	fc 91       	ld	r31, X
    2676:	1c 97       	sbiw	r26, 0x0c	; 12
    2678:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    267c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2680:	dc 01       	movw	r26, r24
    2682:	18 96       	adiw	r26, 0x08	; 8
    2684:	3c 91       	ld	r19, X
    2686:	ce 01       	movw	r24, r28
    2688:	03 96       	adiw	r24, 0x03	; 3
    268a:	21 e0       	ldi	r18, 0x01	; 1
    268c:	ac 01       	movw	r20, r24
    268e:	65 e3       	ldi	r22, 0x35	; 53
    2690:	83 2f       	mov	r24, r19
    2692:	19 95       	eicall
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	80 73       	andi	r24, 0x30	; 48
    269e:	99 27       	eor	r25, r25
    26a0:	95 95       	asr	r25
    26a2:	87 95       	ror	r24
    26a4:	95 95       	asr	r25
    26a6:	87 95       	ror	r24
    26a8:	95 95       	asr	r25
    26aa:	87 95       	ror	r24
    26ac:	95 95       	asr	r25
    26ae:	87 95       	ror	r24
    26b0:	28 2f       	mov	r18, r24
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	fc 01       	movw	r30, r24
    26b8:	20 83       	st	Z, r18
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <bno055_get_gyro_calib_stat+0xb4>
    26bc:	8f ef       	ldi	r24, 0xFF	; 255
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	25 96       	adiw	r28, 0x05	; 5
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	08 95       	ret

000026ce <bno055_get_sys_calib_stat>:
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	25 97       	sbiw	r28, 0x05	; 5
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	8c 83       	std	Y+4, r24	; 0x04
    26de:	9d 83       	std	Y+5, r25	; 0x05
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	1b 82       	std	Y+3, r1	; 0x03
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	8a 83       	std	Y+2, r24	; 0x02
    26ea:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    26ee:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    26f2:	89 2b       	or	r24, r25
    26f4:	11 f4       	brne	.+4      	; 0x26fa <bno055_get_sys_calib_stat+0x2c>
    26f6:	81 e8       	ldi	r24, 0x81	; 129
    26f8:	3d c0       	rjmp	.+122    	; 0x2774 <bno055_get_sys_calib_stat+0xa6>
    26fa:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    26fe:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2702:	dc 01       	movw	r26, r24
    2704:	13 96       	adiw	r26, 0x03	; 3
    2706:	8c 91       	ld	r24, X
    2708:	88 23       	and	r24, r24
    270a:	19 f0       	breq	.+6      	; 0x2712 <bno055_get_sys_calib_stat+0x44>
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	38 dc       	rcall	.-1936   	; 0x1f80 <bno055_write_page_id>
    2710:	8a 83       	std	Y+2, r24	; 0x02
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	88 23       	and	r24, r24
    2716:	41 f0       	breq	.+16     	; 0x2728 <bno055_get_sys_calib_stat+0x5a>
    2718:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    271c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2720:	fc 01       	movw	r30, r24
    2722:	83 81       	ldd	r24, Z+3	; 0x03
    2724:	88 23       	and	r24, r24
    2726:	19 f5       	brne	.+70     	; 0x276e <bno055_get_sys_calib_stat+0xa0>
    2728:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    272c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2730:	dc 01       	movw	r26, r24
    2732:	1b 96       	adiw	r26, 0x0b	; 11
    2734:	ed 91       	ld	r30, X+
    2736:	fc 91       	ld	r31, X
    2738:	1c 97       	sbiw	r26, 0x0c	; 12
    273a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    273e:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2742:	dc 01       	movw	r26, r24
    2744:	18 96       	adiw	r26, 0x08	; 8
    2746:	3c 91       	ld	r19, X
    2748:	ce 01       	movw	r24, r28
    274a:	03 96       	adiw	r24, 0x03	; 3
    274c:	21 e0       	ldi	r18, 0x01	; 1
    274e:	ac 01       	movw	r20, r24
    2750:	65 e3       	ldi	r22, 0x35	; 53
    2752:	83 2f       	mov	r24, r19
    2754:	19 95       	eicall
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	28 2f       	mov	r18, r24
    275c:	22 95       	swap	r18
    275e:	26 95       	lsr	r18
    2760:	26 95       	lsr	r18
    2762:	23 70       	andi	r18, 0x03	; 3
    2764:	8c 81       	ldd	r24, Y+4	; 0x04
    2766:	9d 81       	ldd	r25, Y+5	; 0x05
    2768:	fc 01       	movw	r30, r24
    276a:	20 83       	st	Z, r18
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <bno055_get_sys_calib_stat+0xa4>
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	25 96       	adiw	r28, 0x05	; 5
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	08 95       	ret

00002780 <bno055_get_euler_unit>:
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	25 97       	sbiw	r28, 0x05	; 5
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	8c 83       	std	Y+4, r24	; 0x04
    2790:	9d 83       	std	Y+5, r25	; 0x05
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	1b 82       	std	Y+3, r1	; 0x03
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	8a 83       	std	Y+2, r24	; 0x02
    279c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    27a0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    27a4:	89 2b       	or	r24, r25
    27a6:	11 f4       	brne	.+4      	; 0x27ac <bno055_get_euler_unit+0x2c>
    27a8:	81 e8       	ldi	r24, 0x81	; 129
    27aa:	41 c0       	rjmp	.+130    	; 0x282e <bno055_get_euler_unit+0xae>
    27ac:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    27b0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    27b4:	dc 01       	movw	r26, r24
    27b6:	13 96       	adiw	r26, 0x03	; 3
    27b8:	8c 91       	ld	r24, X
    27ba:	88 23       	and	r24, r24
    27bc:	19 f0       	breq	.+6      	; 0x27c4 <bno055_get_euler_unit+0x44>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	df db       	rcall	.-2114   	; 0x1f80 <bno055_write_page_id>
    27c2:	8a 83       	std	Y+2, r24	; 0x02
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	88 23       	and	r24, r24
    27c8:	41 f0       	breq	.+16     	; 0x27da <bno055_get_euler_unit+0x5a>
    27ca:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    27ce:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    27d2:	fc 01       	movw	r30, r24
    27d4:	83 81       	ldd	r24, Z+3	; 0x03
    27d6:	88 23       	and	r24, r24
    27d8:	39 f5       	brne	.+78     	; 0x2828 <bno055_get_euler_unit+0xa8>
    27da:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    27de:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    27e2:	dc 01       	movw	r26, r24
    27e4:	1b 96       	adiw	r26, 0x0b	; 11
    27e6:	ed 91       	ld	r30, X+
    27e8:	fc 91       	ld	r31, X
    27ea:	1c 97       	sbiw	r26, 0x0c	; 12
    27ec:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    27f0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    27f4:	dc 01       	movw	r26, r24
    27f6:	18 96       	adiw	r26, 0x08	; 8
    27f8:	3c 91       	ld	r19, X
    27fa:	ce 01       	movw	r24, r28
    27fc:	03 96       	adiw	r24, 0x03	; 3
    27fe:	21 e0       	ldi	r18, 0x01	; 1
    2800:	ac 01       	movw	r20, r24
    2802:	6b e3       	ldi	r22, 0x3B	; 59
    2804:	83 2f       	mov	r24, r19
    2806:	19 95       	eicall
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	84 70       	andi	r24, 0x04	; 4
    2812:	99 27       	eor	r25, r25
    2814:	95 95       	asr	r25
    2816:	87 95       	ror	r24
    2818:	95 95       	asr	r25
    281a:	87 95       	ror	r24
    281c:	28 2f       	mov	r18, r24
    281e:	8c 81       	ldd	r24, Y+4	; 0x04
    2820:	9d 81       	ldd	r25, Y+5	; 0x05
    2822:	fc 01       	movw	r30, r24
    2824:	20 83       	st	Z, r18
    2826:	02 c0       	rjmp	.+4      	; 0x282c <bno055_get_euler_unit+0xac>
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	25 96       	adiw	r28, 0x05	; 5
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <bno055_set_euler_unit>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	25 97       	sbiw	r28, 0x05	; 5
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	8f ef       	ldi	r24, 0xFF	; 255
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	1b 82       	std	Y+3, r1	; 0x03
    2850:	1c 82       	std	Y+4, r1	; 0x04
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	8a 83       	std	Y+2, r24	; 0x02
    2856:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    285a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    285e:	89 2b       	or	r24, r25
    2860:	11 f4       	brne	.+4      	; 0x2866 <bno055_set_euler_unit+0x2c>
    2862:	81 e8       	ldi	r24, 0x81	; 129
    2864:	68 c0       	rjmp	.+208    	; 0x2936 <bno055_set_euler_unit+0xfc>
    2866:	ce 01       	movw	r24, r28
    2868:	04 96       	adiw	r24, 0x04	; 4
    286a:	6b d0       	rcall	.+214    	; 0x2942 <bno055_get_operation_mode>
    286c:	8a 83       	std	Y+2, r24	; 0x02
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	88 23       	and	r24, r24
    2872:	09 f0       	breq	.+2      	; 0x2876 <bno055_set_euler_unit+0x3c>
    2874:	54 c0       	rjmp	.+168    	; 0x291e <bno055_set_euler_unit+0xe4>
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	88 23       	and	r24, r24
    287a:	31 f0       	breq	.+12     	; 0x2888 <bno055_set_euler_unit+0x4e>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	b7 d0       	rcall	.+366    	; 0x29ee <bno055_set_operation_mode>
    2880:	98 2f       	mov	r25, r24
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	89 0f       	add	r24, r25
    2886:	8a 83       	std	Y+2, r24	; 0x02
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	88 23       	and	r24, r24
    288c:	09 f0       	breq	.+2      	; 0x2890 <bno055_set_euler_unit+0x56>
    288e:	44 c0       	rjmp	.+136    	; 0x2918 <bno055_set_euler_unit+0xde>
    2890:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2894:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2898:	dc 01       	movw	r26, r24
    289a:	1b 96       	adiw	r26, 0x0b	; 11
    289c:	ed 91       	ld	r30, X+
    289e:	fc 91       	ld	r31, X
    28a0:	1c 97       	sbiw	r26, 0x0c	; 12
    28a2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    28a6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    28aa:	dc 01       	movw	r26, r24
    28ac:	18 96       	adiw	r26, 0x08	; 8
    28ae:	3c 91       	ld	r19, X
    28b0:	ce 01       	movw	r24, r28
    28b2:	03 96       	adiw	r24, 0x03	; 3
    28b4:	21 e0       	ldi	r18, 0x01	; 1
    28b6:	ac 01       	movw	r20, r24
    28b8:	6b e3       	ldi	r22, 0x3B	; 59
    28ba:	83 2f       	mov	r24, r19
    28bc:	19 95       	eicall
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	88 23       	and	r24, r24
    28c4:	71 f5       	brne	.+92     	; 0x2922 <bno055_set_euler_unit+0xe8>
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	28 2f       	mov	r18, r24
    28ca:	2b 7f       	andi	r18, 0xFB	; 251
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	88 2f       	mov	r24, r24
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	84 70       	andi	r24, 0x04	; 4
    28dc:	82 2b       	or	r24, r18
    28de:	8b 83       	std	Y+3, r24	; 0x03
    28e0:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    28e4:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    28e8:	dc 01       	movw	r26, r24
    28ea:	19 96       	adiw	r26, 0x09	; 9
    28ec:	ed 91       	ld	r30, X+
    28ee:	fc 91       	ld	r31, X
    28f0:	1a 97       	sbiw	r26, 0x0a	; 10
    28f2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    28f6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    28fa:	dc 01       	movw	r26, r24
    28fc:	18 96       	adiw	r26, 0x08	; 8
    28fe:	3c 91       	ld	r19, X
    2900:	ce 01       	movw	r24, r28
    2902:	03 96       	adiw	r24, 0x03	; 3
    2904:	21 e0       	ldi	r18, 0x01	; 1
    2906:	ac 01       	movw	r20, r24
    2908:	6b e3       	ldi	r22, 0x3B	; 59
    290a:	83 2f       	mov	r24, r19
    290c:	19 95       	eicall
    290e:	98 2f       	mov	r25, r24
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	89 0f       	add	r24, r25
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	05 c0       	rjmp	.+10     	; 0x2922 <bno055_set_euler_unit+0xe8>
    2918:	8f ef       	ldi	r24, 0xFF	; 255
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <bno055_set_euler_unit+0xe8>
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	88 23       	and	r24, r24
    2926:	31 f0       	breq	.+12     	; 0x2934 <bno055_set_euler_unit+0xfa>
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	61 d0       	rcall	.+194    	; 0x29ee <bno055_set_operation_mode>
    292c:	98 2f       	mov	r25, r24
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	89 0f       	add	r24, r25
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	25 96       	adiw	r28, 0x05	; 5
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	08 95       	ret

00002942 <bno055_get_operation_mode>:
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	25 97       	sbiw	r28, 0x05	; 5
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	8c 83       	std	Y+4, r24	; 0x04
    2952:	9d 83       	std	Y+5, r25	; 0x05
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	1b 82       	std	Y+3, r1	; 0x03
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2962:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2966:	89 2b       	or	r24, r25
    2968:	11 f4       	brne	.+4      	; 0x296e <bno055_get_operation_mode+0x2c>
    296a:	81 e8       	ldi	r24, 0x81	; 129
    296c:	3a c0       	rjmp	.+116    	; 0x29e2 <bno055_get_operation_mode+0xa0>
    296e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2972:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2976:	dc 01       	movw	r26, r24
    2978:	13 96       	adiw	r26, 0x03	; 3
    297a:	8c 91       	ld	r24, X
    297c:	88 23       	and	r24, r24
    297e:	19 f0       	breq	.+6      	; 0x2986 <bno055_get_operation_mode+0x44>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	fe da       	rcall	.-2564   	; 0x1f80 <bno055_write_page_id>
    2984:	8a 83       	std	Y+2, r24	; 0x02
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	88 23       	and	r24, r24
    298a:	41 f0       	breq	.+16     	; 0x299c <bno055_get_operation_mode+0x5a>
    298c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2990:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2994:	fc 01       	movw	r30, r24
    2996:	83 81       	ldd	r24, Z+3	; 0x03
    2998:	88 23       	and	r24, r24
    299a:	01 f5       	brne	.+64     	; 0x29dc <bno055_get_operation_mode+0x9a>
    299c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    29a0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    29a4:	dc 01       	movw	r26, r24
    29a6:	1b 96       	adiw	r26, 0x0b	; 11
    29a8:	ed 91       	ld	r30, X+
    29aa:	fc 91       	ld	r31, X
    29ac:	1c 97       	sbiw	r26, 0x0c	; 12
    29ae:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    29b2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    29b6:	dc 01       	movw	r26, r24
    29b8:	18 96       	adiw	r26, 0x08	; 8
    29ba:	3c 91       	ld	r19, X
    29bc:	ce 01       	movw	r24, r28
    29be:	03 96       	adiw	r24, 0x03	; 3
    29c0:	21 e0       	ldi	r18, 0x01	; 1
    29c2:	ac 01       	movw	r20, r24
    29c4:	6d e3       	ldi	r22, 0x3D	; 61
    29c6:	83 2f       	mov	r24, r19
    29c8:	19 95       	eicall
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	28 2f       	mov	r18, r24
    29d0:	2f 70       	andi	r18, 0x0F	; 15
    29d2:	8c 81       	ldd	r24, Y+4	; 0x04
    29d4:	9d 81       	ldd	r25, Y+5	; 0x05
    29d6:	fc 01       	movw	r30, r24
    29d8:	20 83       	st	Z, r18
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <bno055_get_operation_mode+0x9e>
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	25 96       	adiw	r28, 0x05	; 5
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <bno055_set_operation_mode>:
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	25 97       	sbiw	r28, 0x05	; 5
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	1b 82       	std	Y+3, r1	; 0x03
    2a04:	1c 82       	std	Y+4, r1	; 0x04
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	8a 83       	std	Y+2, r24	; 0x02
    2a0a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2a0e:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2a12:	89 2b       	or	r24, r25
    2a14:	11 f4       	brne	.+4      	; 0x2a1a <bno055_set_operation_mode+0x2c>
    2a16:	81 e8       	ldi	r24, 0x81	; 129
    2a18:	d9 c0       	rjmp	.+434    	; 0x2bcc <bno055_set_operation_mode+0x1de>
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	04 96       	adiw	r24, 0x04	; 4
    2a1e:	91 df       	rcall	.-222    	; 0x2942 <bno055_get_operation_mode>
    2a20:	8a 83       	std	Y+2, r24	; 0x02
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	88 23       	and	r24, r24
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <bno055_set_operation_mode+0x3c>
    2a28:	ce c0       	rjmp	.+412    	; 0x2bc6 <bno055_set_operation_mode+0x1d8>
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <bno055_set_operation_mode+0x44>
    2a30:	4a c0       	rjmp	.+148    	; 0x2ac6 <bno055_set_operation_mode+0xd8>
    2a32:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2a36:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	1b 96       	adiw	r26, 0x0b	; 11
    2a3e:	ed 91       	ld	r30, X+
    2a40:	fc 91       	ld	r31, X
    2a42:	1c 97       	sbiw	r26, 0x0c	; 12
    2a44:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2a48:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	18 96       	adiw	r26, 0x08	; 8
    2a50:	3c 91       	ld	r19, X
    2a52:	ce 01       	movw	r24, r28
    2a54:	03 96       	adiw	r24, 0x03	; 3
    2a56:	21 e0       	ldi	r18, 0x01	; 1
    2a58:	ac 01       	movw	r20, r24
    2a5a:	6d e3       	ldi	r22, 0x3D	; 61
    2a5c:	83 2f       	mov	r24, r19
    2a5e:	19 95       	eicall
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	88 23       	and	r24, r24
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <bno055_set_operation_mode+0x7c>
    2a68:	b0 c0       	rjmp	.+352    	; 0x2bca <bno055_set_operation_mode+0x1dc>
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	90 7f       	andi	r25, 0xF0	; 240
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	8f 70       	andi	r24, 0x0F	; 15
    2a74:	89 2b       	or	r24, r25
    2a76:	8b 83       	std	Y+3, r24	; 0x03
    2a78:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2a7c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2a80:	dc 01       	movw	r26, r24
    2a82:	19 96       	adiw	r26, 0x09	; 9
    2a84:	ed 91       	ld	r30, X+
    2a86:	fc 91       	ld	r31, X
    2a88:	1a 97       	sbiw	r26, 0x0a	; 10
    2a8a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2a8e:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2a92:	dc 01       	movw	r26, r24
    2a94:	18 96       	adiw	r26, 0x08	; 8
    2a96:	3c 91       	ld	r19, X
    2a98:	ce 01       	movw	r24, r28
    2a9a:	03 96       	adiw	r24, 0x03	; 3
    2a9c:	21 e0       	ldi	r18, 0x01	; 1
    2a9e:	ac 01       	movw	r20, r24
    2aa0:	6d e3       	ldi	r22, 0x3D	; 61
    2aa2:	83 2f       	mov	r24, r19
    2aa4:	19 95       	eicall
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	89 0f       	add	r24, r25
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2ab2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	25 85       	ldd	r18, Z+13	; 0x0d
    2aba:	36 85       	ldd	r19, Z+14	; 0x0e
    2abc:	88 e5       	ldi	r24, 0x58	; 88
    2abe:	92 e0       	ldi	r25, 0x02	; 2
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	19 95       	eicall
    2ac4:	82 c0       	rjmp	.+260    	; 0x2bca <bno055_set_operation_mode+0x1dc>
    2ac6:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2aca:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	1b 96       	adiw	r26, 0x0b	; 11
    2ad2:	ed 91       	ld	r30, X+
    2ad4:	fc 91       	ld	r31, X
    2ad6:	1c 97       	sbiw	r26, 0x0c	; 12
    2ad8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2adc:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	18 96       	adiw	r26, 0x08	; 8
    2ae4:	3c 91       	ld	r19, X
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	03 96       	adiw	r24, 0x03	; 3
    2aea:	21 e0       	ldi	r18, 0x01	; 1
    2aec:	ac 01       	movw	r20, r24
    2aee:	6d e3       	ldi	r22, 0x3D	; 61
    2af0:	83 2f       	mov	r24, r19
    2af2:	19 95       	eicall
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	88 23       	and	r24, r24
    2afa:	c1 f4       	brne	.+48     	; 0x2b2c <bno055_set_operation_mode+0x13e>
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	80 7f       	andi	r24, 0xF0	; 240
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	ce 01       	movw	r24, r28
    2b04:	03 96       	adiw	r24, 0x03	; 3
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	bc 01       	movw	r22, r24
    2b0a:	8d e3       	ldi	r24, 0x3D	; 61
    2b0c:	05 da       	rcall	.-3062   	; 0x1f18 <bno055_write_register>
    2b0e:	98 2f       	mov	r25, r24
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	89 0f       	add	r24, r25
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2b1a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2b1e:	fc 01       	movw	r30, r24
    2b20:	25 85       	ldd	r18, Z+13	; 0x0d
    2b22:	36 85       	ldd	r19, Z+14	; 0x0e
    2b24:	84 e1       	ldi	r24, 0x14	; 20
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	f9 01       	movw	r30, r18
    2b2a:	19 95       	eicall
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <bno055_set_operation_mode+0x146>
    2b32:	4b c0       	rjmp	.+150    	; 0x2bca <bno055_set_operation_mode+0x1dc>
    2b34:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2b38:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	1b 96       	adiw	r26, 0x0b	; 11
    2b40:	ed 91       	ld	r30, X+
    2b42:	fc 91       	ld	r31, X
    2b44:	1c 97       	sbiw	r26, 0x0c	; 12
    2b46:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2b4a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	18 96       	adiw	r26, 0x08	; 8
    2b52:	3c 91       	ld	r19, X
    2b54:	ce 01       	movw	r24, r28
    2b56:	03 96       	adiw	r24, 0x03	; 3
    2b58:	21 e0       	ldi	r18, 0x01	; 1
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	6d e3       	ldi	r22, 0x3D	; 61
    2b5e:	83 2f       	mov	r24, r19
    2b60:	19 95       	eicall
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	88 23       	and	r24, r24
    2b68:	81 f5       	brne	.+96     	; 0x2bca <bno055_set_operation_mode+0x1dc>
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	98 2f       	mov	r25, r24
    2b6e:	90 7f       	andi	r25, 0xF0	; 240
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	8f 70       	andi	r24, 0x0F	; 15
    2b74:	89 2b       	or	r24, r25
    2b76:	8b 83       	std	Y+3, r24	; 0x03
    2b78:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2b7c:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2b80:	dc 01       	movw	r26, r24
    2b82:	19 96       	adiw	r26, 0x09	; 9
    2b84:	ed 91       	ld	r30, X+
    2b86:	fc 91       	ld	r31, X
    2b88:	1a 97       	sbiw	r26, 0x0a	; 10
    2b8a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2b8e:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2b92:	dc 01       	movw	r26, r24
    2b94:	18 96       	adiw	r26, 0x08	; 8
    2b96:	3c 91       	ld	r19, X
    2b98:	ce 01       	movw	r24, r28
    2b9a:	03 96       	adiw	r24, 0x03	; 3
    2b9c:	21 e0       	ldi	r18, 0x01	; 1
    2b9e:	ac 01       	movw	r20, r24
    2ba0:	6d e3       	ldi	r22, 0x3D	; 61
    2ba2:	83 2f       	mov	r24, r19
    2ba4:	19 95       	eicall
    2ba6:	98 2f       	mov	r25, r24
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	89 0f       	add	r24, r25
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2bb2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	25 85       	ldd	r18, Z+13	; 0x0d
    2bba:	36 85       	ldd	r19, Z+14	; 0x0e
    2bbc:	88 e5       	ldi	r24, 0x58	; 88
    2bbe:	92 e0       	ldi	r25, 0x02	; 2
    2bc0:	f9 01       	movw	r30, r18
    2bc2:	19 95       	eicall
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <bno055_set_operation_mode+0x1dc>
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	25 96       	adiw	r28, 0x05	; 5
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <bno055_set_power_mode>:
 *	@note For detailed about LOWPOWER mode
 *	refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	25 97       	sbiw	r28, 0x05	; 5
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	8d 83       	std	Y+5, r24	; 0x05
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    2be8:	8f ef       	ldi	r24, 0xFF	; 255
    2bea:	89 83       	std	Y+1, r24	; 0x01
u8 data_u8r = BNO055_INIT_VALUE;
    2bec:	1b 82       	std	Y+3, r1	; 0x03
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    2bee:	1c 82       	std	Y+4, r1	; 0x04
s8 stat_s8 = BNO055_ERROR;
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    2bf4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2bf8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2bfc:	89 2b       	or	r24, r25
    2bfe:	11 f4       	brne	.+4      	; 0x2c04 <bno055_set_power_mode+0x2c>
	return BNO055_E_NULL_PTR;
    2c00:	81 e8       	ldi	r24, 0x81	; 129
    2c02:	62 c0       	rjmp	.+196    	; 0x2cc8 <bno055_set_power_mode+0xf0>
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    2c04:	ce 01       	movw	r24, r28
    2c06:	04 96       	adiw	r24, 0x04	; 4
    2c08:	9c de       	rcall	.-712    	; 0x2942 <bno055_get_operation_mode>
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
		if (stat_s8 == BNO055_SUCCESS) {
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <bno055_set_power_mode+0x3c>
    2c12:	4e c0       	rjmp	.+156    	; 0x2cb0 <bno055_set_power_mode+0xd8>
			if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	88 23       	and	r24, r24
    2c18:	31 f0       	breq	.+12     	; 0x2c26 <bno055_set_power_mode+0x4e>
				stat_s8 += bno055_set_operation_mode
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	e8 de       	rcall	.-560    	; 0x29ee <bno055_set_operation_mode>
    2c1e:	98 2f       	mov	r25, r24
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	89 0f       	add	r24, r25
    2c24:	8a 83       	std	Y+2, r24	; 0x02
				(BNO055_OPERATION_MODE_CONFIG);
			if (stat_s8 == BNO055_SUCCESS) {
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	88 23       	and	r24, r24
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <bno055_set_power_mode+0x56>
    2c2c:	3e c0       	rjmp	.+124    	; 0x2caa <bno055_set_power_mode+0xd2>
				/* Write the value of power mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2c2e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2c32:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2c36:	dc 01       	movw	r26, r24
    2c38:	1b 96       	adiw	r26, 0x0b	; 11
    2c3a:	ed 91       	ld	r30, X+
    2c3c:	fc 91       	ld	r31, X
    2c3e:	1c 97       	sbiw	r26, 0x0c	; 12
    2c40:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2c44:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	18 96       	adiw	r26, 0x08	; 8
    2c4c:	3c 91       	ld	r19, X
    2c4e:	ce 01       	movw	r24, r28
    2c50:	03 96       	adiw	r24, 0x03	; 3
    2c52:	21 e0       	ldi	r18, 0x01	; 1
    2c54:	ac 01       	movw	r20, r24
    2c56:	6e e3       	ldi	r22, 0x3E	; 62
    2c58:	83 2f       	mov	r24, r19
    2c5a:	19 95       	eicall
    2c5c:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_POWER_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	88 23       	and	r24, r24
    2c62:	41 f5       	brne	.+80     	; 0x2cb4 <bno055_set_power_mode+0xdc>
					data_u8r =
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	98 2f       	mov	r25, r24
    2c68:	9c 7f       	andi	r25, 0xFC	; 252
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	83 70       	andi	r24, 0x03	; 3
    2c6e:	89 2b       	or	r24, r25
    2c70:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    2c72:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2c76:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	19 96       	adiw	r26, 0x09	; 9
    2c7e:	ed 91       	ld	r30, X+
    2c80:	fc 91       	ld	r31, X
    2c82:	1a 97       	sbiw	r26, 0x0a	; 10
    2c84:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <p_bno055>
    2c88:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <p_bno055+0x1>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	18 96       	adiw	r26, 0x08	; 8
    2c90:	3c 91       	ld	r19, X
    2c92:	ce 01       	movw	r24, r28
    2c94:	03 96       	adiw	r24, 0x03	; 3
    2c96:	21 e0       	ldi	r18, 0x01	; 1
    2c98:	ac 01       	movw	r20, r24
    2c9a:	6e e3       	ldi	r22, 0x3E	; 62
    2c9c:	83 2f       	mov	r24, r19
    2c9e:	19 95       	eicall
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
					data_u8r =
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	89 0f       	add	r24, r25
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	05 c0       	rjmp	.+10     	; 0x2cb4 <bno055_set_power_mode+0xdc>
					BNO055_POWER_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
				}
			} else {
			com_rslt = BNO055_ERROR;
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <bno055_set_power_mode+0xdc>
			}
		} else {
		com_rslt = BNO055_ERROR;
    2cb0:	8f ef       	ldi	r24, 0xFF	; 255
    2cb2:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	88 23       	and	r24, r24
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
    2cb8:	31 f0       	breq	.+12     	; 0x2cc6 <bno055_set_power_mode+0xee>
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	98 de       	rcall	.-720    	; 0x29ee <bno055_set_operation_mode>
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	89 0f       	add	r24, r25
    2cc4:	89 83       	std	Y+1, r24	; 0x01
		(prev_opmode_u8);
	return com_rslt;
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cc8:	25 96       	adiw	r28, 0x05	; 5
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <sysclk_get_main_hz>:
}

double imu_accel_z()
{
	return bno055_linear_accel.z;
}
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	98 e4       	ldi	r25, 0x48	; 72
    2ce0:	a8 ee       	ldi	r26, 0xE8	; 232
    2ce2:	b1 e0       	ldi	r27, 0x01	; 1
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	08 95       	ret

00002cee <sysclk_get_per4_hz>:
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	1f 92       	push	r1
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	19 82       	std	Y+1, r1	; 0x01
    2cfa:	ec df       	rcall	.-40     	; 0x2cd4 <sysclk_get_main_hz>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	29 81       	ldd	r18, Y+1	; 0x01
    2d02:	22 2f       	mov	r18, r18
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <sysclk_get_per4_hz+0x22>
    2d08:	b6 95       	lsr	r27
    2d0a:	a7 95       	ror	r26
    2d0c:	97 95       	ror	r25
    2d0e:	87 95       	ror	r24
    2d10:	2a 95       	dec	r18
    2d12:	d2 f7       	brpl	.-12     	; 0x2d08 <sysclk_get_per4_hz+0x1a>
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0f 90       	pop	r0
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	08 95       	ret

00002d20 <sysclk_get_per2_hz>:
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	e2 df       	rcall	.-60     	; 0x2cee <sysclk_get_per4_hz>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	08 95       	ret

00002d38 <sysclk_get_per_hz>:
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	ef df       	rcall	.-34     	; 0x2d20 <sysclk_get_per2_hz>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	08 95       	ret

00002d50 <sysclk_get_cpu_hz>:
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	ef df       	rcall	.-34     	; 0x2d38 <sysclk_get_per_hz>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <sysclk_enable_peripheral_clock>:
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	1f 92       	push	r1
    2d6e:	1f 92       	push	r1
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	9a 83       	std	Y+2, r25	; 0x02
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7c:	89 2b       	or	r24, r25
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <sysclk_enable_peripheral_clock+0x1a>
    2d80:	5e c1       	rjmp	.+700    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	80 3c       	cpi	r24, 0xC0	; 192
    2d88:	91 05       	cpc	r25, r1
    2d8a:	21 f4       	brne	.+8      	; 0x2d94 <sysclk_enable_peripheral_clock+0x2c>
    2d8c:	60 e1       	ldi	r22, 0x10	; 16
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	a0 d6       	rcall	.+3392   	; 0x3ad2 <sysclk_enable_module>
    2d92:	55 c1       	rjmp	.+682    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	80 34       	cpi	r24, 0x40	; 64
    2d9a:	94 40       	sbci	r25, 0x04	; 4
    2d9c:	21 f4       	brne	.+8      	; 0x2da6 <sysclk_enable_peripheral_clock+0x3e>
    2d9e:	68 e0       	ldi	r22, 0x08	; 8
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	97 d6       	rcall	.+3374   	; 0x3ad2 <sysclk_enable_module>
    2da4:	4c c1       	rjmp	.+664    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	81 15       	cp	r24, r1
    2dac:	94 40       	sbci	r25, 0x04	; 4
    2dae:	21 f4       	brne	.+8      	; 0x2db8 <sysclk_enable_peripheral_clock+0x50>
    2db0:	64 e0       	ldi	r22, 0x04	; 4
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	8e d6       	rcall	.+3356   	; 0x3ad2 <sysclk_enable_module>
    2db6:	43 c1       	rjmp	.+646    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	80 38       	cpi	r24, 0x80	; 128
    2dbe:	91 40       	sbci	r25, 0x01	; 1
    2dc0:	21 f4       	brne	.+8      	; 0x2dca <sysclk_enable_peripheral_clock+0x62>
    2dc2:	62 e0       	ldi	r22, 0x02	; 2
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	85 d6       	rcall	.+3338   	; 0x3ad2 <sysclk_enable_module>
    2dc8:	3a c1       	rjmp	.+628    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	81 15       	cp	r24, r1
    2dd0:	91 40       	sbci	r25, 0x01	; 1
    2dd2:	21 f4       	brne	.+8      	; 0x2ddc <sysclk_enable_peripheral_clock+0x74>
    2dd4:	61 e0       	ldi	r22, 0x01	; 1
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	7c d6       	rcall	.+3320   	; 0x3ad2 <sysclk_enable_module>
    2dda:	31 c1       	rjmp	.+610    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	80 38       	cpi	r24, 0x80	; 128
    2de2:	93 40       	sbci	r25, 0x03	; 3
    2de4:	21 f4       	brne	.+8      	; 0x2dee <sysclk_enable_peripheral_clock+0x86>
    2de6:	61 e0       	ldi	r22, 0x01	; 1
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	73 d6       	rcall	.+3302   	; 0x3ad2 <sysclk_enable_module>
    2dec:	28 c1       	rjmp	.+592    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	9a 81       	ldd	r25, Y+2	; 0x02
    2df2:	80 39       	cpi	r24, 0x90	; 144
    2df4:	93 40       	sbci	r25, 0x03	; 3
    2df6:	21 f4       	brne	.+8      	; 0x2e00 <sysclk_enable_peripheral_clock+0x98>
    2df8:	61 e0       	ldi	r22, 0x01	; 1
    2dfa:	82 e0       	ldi	r24, 0x02	; 2
    2dfc:	6a d6       	rcall	.+3284   	; 0x3ad2 <sysclk_enable_module>
    2dfe:	1f c1       	rjmp	.+574    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	81 15       	cp	r24, r1
    2e06:	92 40       	sbci	r25, 0x02	; 2
    2e08:	21 f4       	brne	.+8      	; 0x2e12 <sysclk_enable_peripheral_clock+0xaa>
    2e0a:	62 e0       	ldi	r22, 0x02	; 2
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	61 d6       	rcall	.+3266   	; 0x3ad2 <sysclk_enable_module>
    2e10:	16 c1       	rjmp	.+556    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	80 34       	cpi	r24, 0x40	; 64
    2e18:	92 40       	sbci	r25, 0x02	; 2
    2e1a:	21 f4       	brne	.+8      	; 0x2e24 <sysclk_enable_peripheral_clock+0xbc>
    2e1c:	62 e0       	ldi	r22, 0x02	; 2
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	58 d6       	rcall	.+3248   	; 0x3ad2 <sysclk_enable_module>
    2e22:	0d c1       	rjmp	.+538    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	81 15       	cp	r24, r1
    2e2a:	93 40       	sbci	r25, 0x03	; 3
    2e2c:	21 f4       	brne	.+8      	; 0x2e36 <sysclk_enable_peripheral_clock+0xce>
    2e2e:	64 e0       	ldi	r22, 0x04	; 4
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	4f d6       	rcall	.+3230   	; 0x3ad2 <sysclk_enable_module>
    2e34:	04 c1       	rjmp	.+520    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	80 32       	cpi	r24, 0x20	; 32
    2e3c:	93 40       	sbci	r25, 0x03	; 3
    2e3e:	21 f4       	brne	.+8      	; 0x2e48 <sysclk_enable_peripheral_clock+0xe0>
    2e40:	64 e0       	ldi	r22, 0x04	; 4
    2e42:	82 e0       	ldi	r24, 0x02	; 2
    2e44:	46 d6       	rcall	.+3212   	; 0x3ad2 <sysclk_enable_module>
    2e46:	fb c0       	rjmp	.+502    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	81 15       	cp	r24, r1
    2e4e:	98 40       	sbci	r25, 0x08	; 8
    2e50:	21 f4       	brne	.+8      	; 0x2e5a <sysclk_enable_peripheral_clock+0xf2>
    2e52:	61 e0       	ldi	r22, 0x01	; 1
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	3d d6       	rcall	.+3194   	; 0x3ad2 <sysclk_enable_module>
    2e58:	f2 c0       	rjmp	.+484    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	81 15       	cp	r24, r1
    2e60:	99 40       	sbci	r25, 0x09	; 9
    2e62:	21 f4       	brne	.+8      	; 0x2e6c <sysclk_enable_peripheral_clock+0x104>
    2e64:	61 e0       	ldi	r22, 0x01	; 1
    2e66:	84 e0       	ldi	r24, 0x04	; 4
    2e68:	34 d6       	rcall	.+3176   	; 0x3ad2 <sysclk_enable_module>
    2e6a:	e9 c0       	rjmp	.+466    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	81 15       	cp	r24, r1
    2e72:	9a 40       	sbci	r25, 0x0A	; 10
    2e74:	21 f4       	brne	.+8      	; 0x2e7e <sysclk_enable_peripheral_clock+0x116>
    2e76:	61 e0       	ldi	r22, 0x01	; 1
    2e78:	85 e0       	ldi	r24, 0x05	; 5
    2e7a:	2b d6       	rcall	.+3158   	; 0x3ad2 <sysclk_enable_module>
    2e7c:	e0 c0       	rjmp	.+448    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	81 15       	cp	r24, r1
    2e84:	9b 40       	sbci	r25, 0x0B	; 11
    2e86:	21 f4       	brne	.+8      	; 0x2e90 <sysclk_enable_peripheral_clock+0x128>
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	86 e0       	ldi	r24, 0x06	; 6
    2e8c:	22 d6       	rcall	.+3140   	; 0x3ad2 <sysclk_enable_module>
    2e8e:	d7 c0       	rjmp	.+430    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	80 34       	cpi	r24, 0x40	; 64
    2e96:	98 40       	sbci	r25, 0x08	; 8
    2e98:	21 f4       	brne	.+8      	; 0x2ea2 <sysclk_enable_peripheral_clock+0x13a>
    2e9a:	62 e0       	ldi	r22, 0x02	; 2
    2e9c:	83 e0       	ldi	r24, 0x03	; 3
    2e9e:	19 d6       	rcall	.+3122   	; 0x3ad2 <sysclk_enable_module>
    2ea0:	ce c0       	rjmp	.+412    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	80 34       	cpi	r24, 0x40	; 64
    2ea8:	99 40       	sbci	r25, 0x09	; 9
    2eaa:	21 f4       	brne	.+8      	; 0x2eb4 <sysclk_enable_peripheral_clock+0x14c>
    2eac:	62 e0       	ldi	r22, 0x02	; 2
    2eae:	84 e0       	ldi	r24, 0x04	; 4
    2eb0:	10 d6       	rcall	.+3104   	; 0x3ad2 <sysclk_enable_module>
    2eb2:	c5 c0       	rjmp	.+394    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb8:	80 34       	cpi	r24, 0x40	; 64
    2eba:	9a 40       	sbci	r25, 0x0A	; 10
    2ebc:	21 f4       	brne	.+8      	; 0x2ec6 <sysclk_enable_peripheral_clock+0x15e>
    2ebe:	62 e0       	ldi	r22, 0x02	; 2
    2ec0:	85 e0       	ldi	r24, 0x05	; 5
    2ec2:	07 d6       	rcall	.+3086   	; 0x3ad2 <sysclk_enable_module>
    2ec4:	bc c0       	rjmp	.+376    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	80 34       	cpi	r24, 0x40	; 64
    2ecc:	9b 40       	sbci	r25, 0x0B	; 11
    2ece:	21 f4       	brne	.+8      	; 0x2ed8 <sysclk_enable_peripheral_clock+0x170>
    2ed0:	62 e0       	ldi	r22, 0x02	; 2
    2ed2:	86 e0       	ldi	r24, 0x06	; 6
    2ed4:	fe d5       	rcall	.+3068   	; 0x3ad2 <sysclk_enable_module>
    2ed6:	b3 c0       	rjmp	.+358    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	80 39       	cpi	r24, 0x90	; 144
    2ede:	98 40       	sbci	r25, 0x08	; 8
    2ee0:	21 f4       	brne	.+8      	; 0x2eea <sysclk_enable_peripheral_clock+0x182>
    2ee2:	64 e0       	ldi	r22, 0x04	; 4
    2ee4:	83 e0       	ldi	r24, 0x03	; 3
    2ee6:	f5 d5       	rcall	.+3050   	; 0x3ad2 <sysclk_enable_module>
    2ee8:	aa c0       	rjmp	.+340    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	80 39       	cpi	r24, 0x90	; 144
    2ef0:	99 40       	sbci	r25, 0x09	; 9
    2ef2:	21 f4       	brne	.+8      	; 0x2efc <sysclk_enable_peripheral_clock+0x194>
    2ef4:	64 e0       	ldi	r22, 0x04	; 4
    2ef6:	84 e0       	ldi	r24, 0x04	; 4
    2ef8:	ec d5       	rcall	.+3032   	; 0x3ad2 <sysclk_enable_module>
    2efa:	a1 c0       	rjmp	.+322    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	80 39       	cpi	r24, 0x90	; 144
    2f02:	9a 40       	sbci	r25, 0x0A	; 10
    2f04:	21 f4       	brne	.+8      	; 0x2f0e <sysclk_enable_peripheral_clock+0x1a6>
    2f06:	64 e0       	ldi	r22, 0x04	; 4
    2f08:	85 e0       	ldi	r24, 0x05	; 5
    2f0a:	e3 d5       	rcall	.+3014   	; 0x3ad2 <sysclk_enable_module>
    2f0c:	98 c0       	rjmp	.+304    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	80 39       	cpi	r24, 0x90	; 144
    2f14:	9b 40       	sbci	r25, 0x0B	; 11
    2f16:	21 f4       	brne	.+8      	; 0x2f20 <sysclk_enable_peripheral_clock+0x1b8>
    2f18:	64 e0       	ldi	r22, 0x04	; 4
    2f1a:	86 e0       	ldi	r24, 0x06	; 6
    2f1c:	da d5       	rcall	.+2996   	; 0x3ad2 <sysclk_enable_module>
    2f1e:	8f c0       	rjmp	.+286    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	80 3c       	cpi	r24, 0xC0	; 192
    2f26:	98 40       	sbci	r25, 0x08	; 8
    2f28:	21 f4       	brne	.+8      	; 0x2f32 <sysclk_enable_peripheral_clock+0x1ca>
    2f2a:	68 e0       	ldi	r22, 0x08	; 8
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	d1 d5       	rcall	.+2978   	; 0x3ad2 <sysclk_enable_module>
    2f30:	86 c0       	rjmp	.+268    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	80 3c       	cpi	r24, 0xC0	; 192
    2f38:	99 40       	sbci	r25, 0x09	; 9
    2f3a:	21 f4       	brne	.+8      	; 0x2f44 <sysclk_enable_peripheral_clock+0x1dc>
    2f3c:	68 e0       	ldi	r22, 0x08	; 8
    2f3e:	84 e0       	ldi	r24, 0x04	; 4
    2f40:	c8 d5       	rcall	.+2960   	; 0x3ad2 <sysclk_enable_module>
    2f42:	7d c0       	rjmp	.+250    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	80 3c       	cpi	r24, 0xC0	; 192
    2f4a:	9a 40       	sbci	r25, 0x0A	; 10
    2f4c:	21 f4       	brne	.+8      	; 0x2f56 <sysclk_enable_peripheral_clock+0x1ee>
    2f4e:	68 e0       	ldi	r22, 0x08	; 8
    2f50:	85 e0       	ldi	r24, 0x05	; 5
    2f52:	bf d5       	rcall	.+2942   	; 0x3ad2 <sysclk_enable_module>
    2f54:	74 c0       	rjmp	.+232    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5a:	80 3c       	cpi	r24, 0xC0	; 192
    2f5c:	9b 40       	sbci	r25, 0x0B	; 11
    2f5e:	21 f4       	brne	.+8      	; 0x2f68 <sysclk_enable_peripheral_clock+0x200>
    2f60:	68 e0       	ldi	r22, 0x08	; 8
    2f62:	86 e0       	ldi	r24, 0x06	; 6
    2f64:	b6 d5       	rcall	.+2924   	; 0x3ad2 <sysclk_enable_module>
    2f66:	6b c0       	rjmp	.+214    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	80 3a       	cpi	r24, 0xA0	; 160
    2f6e:	98 40       	sbci	r25, 0x08	; 8
    2f70:	21 f4       	brne	.+8      	; 0x2f7a <sysclk_enable_peripheral_clock+0x212>
    2f72:	60 e1       	ldi	r22, 0x10	; 16
    2f74:	83 e0       	ldi	r24, 0x03	; 3
    2f76:	ad d5       	rcall	.+2906   	; 0x3ad2 <sysclk_enable_module>
    2f78:	62 c0       	rjmp	.+196    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	80 3a       	cpi	r24, 0xA0	; 160
    2f80:	99 40       	sbci	r25, 0x09	; 9
    2f82:	21 f4       	brne	.+8      	; 0x2f8c <sysclk_enable_peripheral_clock+0x224>
    2f84:	60 e1       	ldi	r22, 0x10	; 16
    2f86:	84 e0       	ldi	r24, 0x04	; 4
    2f88:	a4 d5       	rcall	.+2888   	; 0x3ad2 <sysclk_enable_module>
    2f8a:	59 c0       	rjmp	.+178    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	80 3a       	cpi	r24, 0xA0	; 160
    2f92:	9a 40       	sbci	r25, 0x0A	; 10
    2f94:	21 f4       	brne	.+8      	; 0x2f9e <sysclk_enable_peripheral_clock+0x236>
    2f96:	60 e1       	ldi	r22, 0x10	; 16
    2f98:	85 e0       	ldi	r24, 0x05	; 5
    2f9a:	9b d5       	rcall	.+2870   	; 0x3ad2 <sysclk_enable_module>
    2f9c:	50 c0       	rjmp	.+160    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	80 3a       	cpi	r24, 0xA0	; 160
    2fa4:	9b 40       	sbci	r25, 0x0B	; 11
    2fa6:	21 f4       	brne	.+8      	; 0x2fb0 <sysclk_enable_peripheral_clock+0x248>
    2fa8:	60 e1       	ldi	r22, 0x10	; 16
    2faa:	86 e0       	ldi	r24, 0x06	; 6
    2fac:	92 d5       	rcall	.+2852   	; 0x3ad2 <sysclk_enable_module>
    2fae:	47 c0       	rjmp	.+142    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	80 3b       	cpi	r24, 0xB0	; 176
    2fb6:	98 40       	sbci	r25, 0x08	; 8
    2fb8:	21 f4       	brne	.+8      	; 0x2fc2 <sysclk_enable_peripheral_clock+0x25a>
    2fba:	60 e2       	ldi	r22, 0x20	; 32
    2fbc:	83 e0       	ldi	r24, 0x03	; 3
    2fbe:	89 d5       	rcall	.+2834   	; 0x3ad2 <sysclk_enable_module>
    2fc0:	3e c0       	rjmp	.+124    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	80 3b       	cpi	r24, 0xB0	; 176
    2fc8:	99 40       	sbci	r25, 0x09	; 9
    2fca:	21 f4       	brne	.+8      	; 0x2fd4 <sysclk_enable_peripheral_clock+0x26c>
    2fcc:	60 e2       	ldi	r22, 0x20	; 32
    2fce:	84 e0       	ldi	r24, 0x04	; 4
    2fd0:	80 d5       	rcall	.+2816   	; 0x3ad2 <sysclk_enable_module>
    2fd2:	35 c0       	rjmp	.+106    	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	80 3b       	cpi	r24, 0xB0	; 176
    2fda:	9a 40       	sbci	r25, 0x0A	; 10
    2fdc:	21 f4       	brne	.+8      	; 0x2fe6 <sysclk_enable_peripheral_clock+0x27e>
    2fde:	60 e2       	ldi	r22, 0x20	; 32
    2fe0:	85 e0       	ldi	r24, 0x05	; 5
    2fe2:	77 d5       	rcall	.+2798   	; 0x3ad2 <sysclk_enable_module>
    2fe4:	2c c0       	rjmp	.+88     	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	80 3b       	cpi	r24, 0xB0	; 176
    2fec:	9b 40       	sbci	r25, 0x0B	; 11
    2fee:	21 f4       	brne	.+8      	; 0x2ff8 <sysclk_enable_peripheral_clock+0x290>
    2ff0:	60 e2       	ldi	r22, 0x20	; 32
    2ff2:	86 e0       	ldi	r24, 0x06	; 6
    2ff4:	6e d5       	rcall	.+2780   	; 0x3ad2 <sysclk_enable_module>
    2ff6:	23 c0       	rjmp	.+70     	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	80 38       	cpi	r24, 0x80	; 128
    2ffe:	94 40       	sbci	r25, 0x04	; 4
    3000:	21 f4       	brne	.+8      	; 0x300a <sysclk_enable_peripheral_clock+0x2a2>
    3002:	60 e4       	ldi	r22, 0x40	; 64
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	65 d5       	rcall	.+2762   	; 0x3ad2 <sysclk_enable_module>
    3008:	1a c0       	rjmp	.+52     	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	80 39       	cpi	r24, 0x90	; 144
    3010:	94 40       	sbci	r25, 0x04	; 4
    3012:	21 f4       	brne	.+8      	; 0x301c <sysclk_enable_peripheral_clock+0x2b4>
    3014:	60 e4       	ldi	r22, 0x40	; 64
    3016:	84 e0       	ldi	r24, 0x04	; 4
    3018:	5c d5       	rcall	.+2744   	; 0x3ad2 <sysclk_enable_module>
    301a:	11 c0       	rjmp	.+34     	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	80 3a       	cpi	r24, 0xA0	; 160
    3022:	94 40       	sbci	r25, 0x04	; 4
    3024:	21 f4       	brne	.+8      	; 0x302e <sysclk_enable_peripheral_clock+0x2c6>
    3026:	60 e4       	ldi	r22, 0x40	; 64
    3028:	85 e0       	ldi	r24, 0x05	; 5
    302a:	53 d5       	rcall	.+2726   	; 0x3ad2 <sysclk_enable_module>
    302c:	08 c0       	rjmp	.+16     	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	80 3b       	cpi	r24, 0xB0	; 176
    3034:	94 40       	sbci	r25, 0x04	; 4
    3036:	19 f4       	brne	.+6      	; 0x303e <sysclk_enable_peripheral_clock+0x2d6>
    3038:	60 e4       	ldi	r22, 0x40	; 64
    303a:	86 e0       	ldi	r24, 0x06	; 6
    303c:	4a d5       	rcall	.+2708   	; 0x3ad2 <sysclk_enable_module>
    303e:	00 00       	nop
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	08 95       	ret

0000304a <__portable_avr_delay_cycles>:
    304a:	04 c0       	rjmp	.+8      	; 0x3054 <__portable_avr_delay_cycles+0xa>
    304c:	61 50       	subi	r22, 0x01	; 1
    304e:	71 09       	sbc	r23, r1
    3050:	81 09       	sbc	r24, r1
    3052:	91 09       	sbc	r25, r1
    3054:	61 15       	cp	r22, r1
    3056:	71 05       	cpc	r23, r1
    3058:	81 05       	cpc	r24, r1
    305a:	91 05       	cpc	r25, r1
    305c:	b9 f7       	brne	.-18     	; 0x304c <__portable_avr_delay_cycles+0x2>
    305e:	08 95       	ret

00003060 <twi_master_read>:
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	00 d0       	rcall	.+0      	; 0x3066 <twi_master_read+0x6>
    3066:	1f 92       	push	r1
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	6b 83       	std	Y+3, r22	; 0x03
    3072:	7c 83       	std	Y+4, r23	; 0x04
    3074:	2b 81       	ldd	r18, Y+3	; 0x03
    3076:	3c 81       	ldd	r19, Y+4	; 0x04
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	9a 81       	ldd	r25, Y+2	; 0x02
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	b9 01       	movw	r22, r18
    3080:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <twi_master_transfer>
    3084:	24 96       	adiw	r28, 0x04	; 4
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	08 95       	ret

00003090 <twi_master_write>:
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	00 d0       	rcall	.+0      	; 0x3096 <twi_master_write+0x6>
    3096:	1f 92       	push	r1
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	6b 83       	std	Y+3, r22	; 0x03
    30a2:	7c 83       	std	Y+4, r23	; 0x04
    30a4:	2b 81       	ldd	r18, Y+3	; 0x03
    30a6:	3c 81       	ldd	r19, Y+4	; 0x04
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	b9 01       	movw	r22, r18
    30b0:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <twi_master_transfer>
    30b4:	24 96       	adiw	r28, 0x04	; 4
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret

000030c0 <twi_master_enable>:
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	1f 92       	push	r1
    30c6:	1f 92       	push	r1
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	9a 83       	std	Y+2, r25	; 0x02
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	9a 81       	ldd	r25, Y+2	; 0x02
    30d4:	fc 01       	movw	r30, r24
    30d6:	81 81       	ldd	r24, Z+1	; 0x01
    30d8:	28 2f       	mov	r18, r24
    30da:	28 60       	ori	r18, 0x08	; 8
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	fc 01       	movw	r30, r24
    30e2:	21 83       	std	Z+1, r18	; 0x01
    30e4:	00 00       	nop
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <imu_init>:
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	2c 97       	sbiw	r28, 0x0c	; 12
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	29 e0       	ldi	r18, 0x09	; 9
    3100:	ce 01       	movw	r24, r28
    3102:	03 96       	adiw	r24, 0x03	; 3
    3104:	fc 01       	movw	r30, r24
    3106:	32 2f       	mov	r19, r18
    3108:	11 92       	st	Z+, r1
    310a:	3a 95       	dec	r19
    310c:	e9 f7       	brne	.-6      	; 0x3108 <imu_init+0x18>
    310e:	80 e8       	ldi	r24, 0x80	; 128
    3110:	9a e1       	ldi	r25, 0x1A	; 26
    3112:	a6 e0       	ldi	r26, 0x06	; 6
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	8b 83       	std	Y+3, r24	; 0x03
    3118:	9c 83       	std	Y+4, r25	; 0x04
    311a:	ad 83       	std	Y+5, r26	; 0x05
    311c:	be 83       	std	Y+6, r27	; 0x06
    311e:	83 e2       	ldi	r24, 0x23	; 35
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	8f 83       	std	Y+7, r24	; 0x07
    3128:	98 87       	std	Y+8, r25	; 0x08
    312a:	a9 87       	std	Y+9, r26	; 0x09
    312c:	ba 87       	std	Y+10, r27	; 0x0a
    312e:	80 eb       	ldi	r24, 0xB0	; 176
    3130:	94 e0       	ldi	r25, 0x04	; 4
    3132:	1a de       	rcall	.-972    	; 0x2d68 <sysclk_enable_peripheral_clock>
    3134:	ce 01       	movw	r24, r28
    3136:	03 96       	adiw	r24, 0x03	; 3
    3138:	bc 01       	movw	r22, r24
    313a:	80 eb       	ldi	r24, 0xB0	; 176
    313c:	94 e0       	ldi	r25, 0x04	; 4
    313e:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <twi_master_init>
    3142:	80 eb       	ldi	r24, 0xB0	; 176
    3144:	94 e0       	ldi	r25, 0x04	; 4
    3146:	bc df       	rcall	.-136    	; 0x30c0 <twi_master_enable>
    3148:	8e e8       	ldi	r24, 0x8E	; 142
    314a:	99 e1       	ldi	r25, 0x19	; 25
    314c:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <bno055+0x9>
    3150:	90 93 71 22 	sts	0x2271, r25	; 0x802271 <bno055+0xa>
    3154:	80 e2       	ldi	r24, 0x20	; 32
    3156:	9a e1       	ldi	r25, 0x1A	; 26
    3158:	80 93 72 22 	sts	0x2272, r24	; 0x802272 <bno055+0xb>
    315c:	90 93 73 22 	sts	0x2273, r25	; 0x802273 <bno055+0xc>
    3160:	84 ea       	ldi	r24, 0xA4	; 164
    3162:	9a e1       	ldi	r25, 0x1A	; 26
    3164:	80 93 74 22 	sts	0x2274, r24	; 0x802274 <bno055+0xd>
    3168:	90 93 75 22 	sts	0x2275, r25	; 0x802275 <bno055+0xe>
    316c:	88 e2       	ldi	r24, 0x28	; 40
    316e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <bno055+0x8>
    3172:	87 e6       	ldi	r24, 0x67	; 103
    3174:	92 e2       	ldi	r25, 0x22	; 34
    3176:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <bno055_init>
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	88 23       	and	r24, r24
    3180:	a1 f0       	breq	.+40     	; 0x31aa <imu_init+0xba>
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	08 2e       	mov	r0, r24
    3186:	00 0c       	add	r0, r0
    3188:	99 0b       	sbc	r25, r25
    318a:	29 2f       	mov	r18, r25
    318c:	2f 93       	push	r18
    318e:	8f 93       	push	r24
    3190:	86 e1       	ldi	r24, 0x16	; 22
    3192:	90 e2       	ldi	r25, 0x20	; 32
    3194:	89 2f       	mov	r24, r25
    3196:	8f 93       	push	r24
    3198:	86 e1       	ldi	r24, 0x16	; 22
    319a:	90 e2       	ldi	r25, 0x20	; 32
    319c:	8f 93       	push	r24
    319e:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	15 dd       	rcall	.-1494   	; 0x2bd8 <bno055_set_power_mode>
    31ae:	8c e0       	ldi	r24, 0x0C	; 12
    31b0:	1e dc       	rcall	.-1988   	; 0x29ee <bno055_set_operation_mode>
    31b2:	8a 83       	std	Y+2, r24	; 0x02
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	88 23       	and	r24, r24
    31b8:	a1 f0       	breq	.+40     	; 0x31e2 <imu_init+0xf2>
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	08 2e       	mov	r0, r24
    31be:	00 0c       	add	r0, r0
    31c0:	99 0b       	sbc	r25, r25
    31c2:	29 2f       	mov	r18, r25
    31c4:	2f 93       	push	r18
    31c6:	8f 93       	push	r24
    31c8:	8a e3       	ldi	r24, 0x3A	; 58
    31ca:	90 e2       	ldi	r25, 0x20	; 32
    31cc:	89 2f       	mov	r24, r25
    31ce:	8f 93       	push	r24
    31d0:	8a e3       	ldi	r24, 0x3A	; 58
    31d2:	90 e2       	ldi	r25, 0x20	; 32
    31d4:	8f 93       	push	r24
    31d6:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	1c 86       	std	Y+12, r1	; 0x0c
    31e4:	ce 01       	movw	r24, r28
    31e6:	0c 96       	adiw	r24, 0x0c	; 12
    31e8:	ac db       	rcall	.-2216   	; 0x2942 <bno055_get_operation_mode>
    31ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ec:	8c 30       	cpi	r24, 0x0C	; 12
    31ee:	f1 f0       	breq	.+60     	; 0x322c <imu_init+0x13c>
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	28 2f       	mov	r18, r24
    31f4:	88 0f       	add	r24, r24
    31f6:	33 0b       	sbc	r19, r19
    31f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	43 2f       	mov	r20, r19
    3200:	4f 93       	push	r20
    3202:	2f 93       	push	r18
    3204:	1f 92       	push	r1
    3206:	2c e0       	ldi	r18, 0x0C	; 12
    3208:	2f 93       	push	r18
    320a:	29 2f       	mov	r18, r25
    320c:	2f 93       	push	r18
    320e:	8f 93       	push	r24
    3210:	88 e5       	ldi	r24, 0x58	; 88
    3212:	90 e2       	ldi	r25, 0x20	; 32
    3214:	89 2f       	mov	r24, r25
    3216:	8f 93       	push	r24
    3218:	88 e5       	ldi	r24, 0x58	; 88
    321a:	90 e2       	ldi	r25, 0x20	; 32
    321c:	8f 93       	push	r24
    321e:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    3222:	8d b7       	in	r24, 0x3d	; 61
    3224:	9e b7       	in	r25, 0x3e	; 62
    3226:	08 96       	adiw	r24, 0x08	; 8
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	00 00       	nop
    322e:	2c 96       	adiw	r28, 0x0c	; 12
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	08 95       	ret

0000323a <imu_update>:
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	86 e7       	ldi	r24, 0x76	; 118
    3244:	92 e2       	ldi	r25, 0x22	; 34
    3246:	b5 d8       	rcall	.-3734   	; 0x23b2 <bno055_convert_double_linear_accel_xyz_msq>
    3248:	82 e8       	ldi	r24, 0x82	; 130
    324a:	92 e2       	ldi	r25, 0x22	; 34
    324c:	20 d8       	rcall	.-4032   	; 0x228e <bno055_convert_double_euler_hpr_deg>
    324e:	8f e8       	ldi	r24, 0x8F	; 143
    3250:	92 e2       	ldi	r25, 0x22	; 34
    3252:	7f d9       	rcall	.-3330   	; 0x2552 <bno055_get_accel_calib_stat>
    3254:	81 e9       	ldi	r24, 0x91	; 145
    3256:	92 e2       	ldi	r25, 0x22	; 34
    3258:	d9 d9       	rcall	.-3150   	; 0x260c <bno055_get_gyro_calib_stat>
    325a:	8e e8       	ldi	r24, 0x8E	; 142
    325c:	92 e2       	ldi	r25, 0x22	; 34
    325e:	23 d9       	rcall	.-3514   	; 0x24a6 <bno055_get_mag_calib_stat>
    3260:	80 e9       	ldi	r24, 0x90	; 144
    3262:	92 e2       	ldi	r25, 0x22	; 34
    3264:	34 da       	rcall	.-2968   	; 0x26ce <bno055_get_sys_calib_stat>
    3266:	00 00       	nop
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	08 95       	ret

0000326e <imu_roll>:



double imu_roll()
{
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.r;
    3276:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <bno055_euler+0x4>
    327a:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <bno055_euler+0x5>
    327e:	a0 91 88 22 	lds	r26, 0x2288	; 0x802288 <bno055_euler+0x6>
    3282:	b0 91 89 22 	lds	r27, 0x2289	; 0x802289 <bno055_euler+0x7>
}
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret

00003290 <imu_pitch>:

double imu_pitch()
{
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.p;
    3298:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <bno055_euler+0x8>
    329c:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <bno055_euler+0x9>
    32a0:	a0 91 8c 22 	lds	r26, 0x228C	; 0x80228c <bno055_euler+0xa>
    32a4:	b0 91 8d 22 	lds	r27, 0x228D	; 0x80228d <bno055_euler+0xb>
}
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	08 95       	ret

000032b2 <imu_heading>:

double imu_heading()
{
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.h;
    32ba:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <bno055_euler>
    32be:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <bno055_euler+0x1>
    32c2:	a0 91 84 22 	lds	r26, 0x2284	; 0x802284 <bno055_euler+0x2>
    32c6:	b0 91 85 22 	lds	r27, 0x2285	; 0x802285 <bno055_euler+0x3>
}
    32ca:	bc 01       	movw	r22, r24
    32cc:	cd 01       	movw	r24, r26
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	08 95       	ret

000032d4 <imu_accel_cal>:


uint8_t imu_accel_cal()
{
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
	return accel_calib;
    32dc:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <accel_calib>
}
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	08 95       	ret

000032e6 <imu_gyro_cal>:

uint8_t imu_gyro_cal()
{
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
	return gyro_calib;
    32ee:	80 91 91 22 	lds	r24, 0x2291	; 0x802291 <gyro_calib>
}
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	08 95       	ret

000032f8 <imu_mag_cal>:

uint8_t imu_mag_cal()
{
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
	return mag_calib;
    3300:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <mag_calib>
}
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	08 95       	ret

0000330a <imu_sys_cal>:

uint8_t imu_sys_cal()
{
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
	return sys_calib;
    3312:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <sys_calib>
}
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	08 95       	ret

0000331c <BNO055_I2C_bus_write>:
 *	\param reg_data : It is a value hold in the array,
 *		will be used for write the value into the register
 *	\param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	c2 55       	subi	r28, 0x52	; 82
    3326:	d1 09       	sbc	r29, r1
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	fe 01       	movw	r30, r28
    332e:	e2 5b       	subi	r30, 0xB2	; 178
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 83       	st	Z, r24
    3334:	ce 01       	movw	r24, r28
    3336:	81 5b       	subi	r24, 0xB1	; 177
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	fc 01       	movw	r30, r24
    333c:	60 83       	st	Z, r22
    333e:	ce 01       	movw	r24, r28
    3340:	80 5b       	subi	r24, 0xB0	; 176
    3342:	9f 4f       	sbci	r25, 0xFF	; 255
    3344:	fc 01       	movw	r30, r24
    3346:	40 83       	st	Z, r20
    3348:	51 83       	std	Z+1, r21	; 0x01
    334a:	ce 01       	movw	r24, r28
    334c:	8e 5a       	subi	r24, 0xAE	; 174
    334e:	9f 4f       	sbci	r25, 0xFF	; 255
    3350:	fc 01       	movw	r30, r24
    3352:	20 83       	st	Z, r18
	s32 BNO055_iERROR = BNO055_INIT_VALUE;
    3354:	19 82       	std	Y+1, r1	; 0x01
    3356:	1a 82       	std	Y+2, r1	; 0x02
// 	{
// 		array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] =
// 			*(reg_data + stringpos);
// 	}

	if(cnt > 1)
    3358:	ce 01       	movw	r24, r28
    335a:	8e 5a       	subi	r24, 0xAE	; 174
    335c:	9f 4f       	sbci	r25, 0xFF	; 255
    335e:	fc 01       	movw	r30, r24
    3360:	80 81       	ld	r24, Z
    3362:	82 30       	cpi	r24, 0x02	; 2
    3364:	58 f0       	brcs	.+22     	; 0x337c <BNO055_I2C_bus_write+0x60>
	{
		printf("The BNO055 Actually does write more than one byte at a time, isn't that surprising.\nI guess it's time to fix the I2C write hack then.");
    3366:	81 ea       	ldi	r24, 0xA1	; 161
    3368:	90 e2       	ldi	r25, 0x20	; 32
    336a:	89 2f       	mov	r24, r25
    336c:	8f 93       	push	r24
    336e:	81 ea       	ldi	r24, 0xA1	; 161
    3370:	90 e2       	ldi	r25, 0x20	; 32
    3372:	8f 93       	push	r24
    3374:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
	}

	cnt = cnt + 1;	// BNO055 Discards the first write, so we make the first value 0
    337c:	ce 01       	movw	r24, r28
    337e:	8e 5a       	subi	r24, 0xAE	; 174
    3380:	9f 4f       	sbci	r25, 0xFF	; 255
    3382:	9e 01       	movw	r18, r28
    3384:	2e 5a       	subi	r18, 0xAE	; 174
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	f9 01       	movw	r30, r18
    338a:	20 81       	ld	r18, Z
    338c:	2f 5f       	subi	r18, 0xFF	; 255
    338e:	fc 01       	movw	r30, r24
    3390:	20 83       	st	Z, r18
	array[0] = 0;
    3392:	1b 82       	std	Y+3, r1	; 0x03
	array[1] = reg_data[0]; // This breaks if it ever sends more than one byte at a time, but I don't think it does;
    3394:	ce 01       	movw	r24, r28
    3396:	80 5b       	subi	r24, 0xB0	; 176
    3398:	9f 4f       	sbci	r25, 0xFF	; 255
    339a:	fc 01       	movw	r30, r24
    339c:	80 81       	ld	r24, Z
    339e:	91 81       	ldd	r25, Z+1	; 0x01
    33a0:	fc 01       	movw	r30, r24
    33a2:	80 81       	ld	r24, Z
    33a4:	8c 83       	std	Y+4, r24	; 0x04
	*/

	

	twi_package_t readbno055;
	readbno055.addr[0]	   = reg_addr-1; // it's minus one because the BNO055 discards the first write, and the second write one is at the next address 
    33a6:	ce 01       	movw	r24, r28
    33a8:	81 5b       	subi	r24, 0xB1	; 177
    33aa:	9f 4f       	sbci	r25, 0xFF	; 255
    33ac:	fc 01       	movw	r30, r24
    33ae:	80 81       	ld	r24, Z
    33b0:	2f ef       	ldi	r18, 0xFF	; 255
    33b2:	28 0f       	add	r18, r24
    33b4:	ce 01       	movw	r24, r28
    33b6:	8d 5b       	subi	r24, 0xBD	; 189
    33b8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ba:	fc 01       	movw	r30, r24
    33bc:	21 83       	std	Z+1, r18	; 0x01
	readbno055.addr_length = 1;
    33be:	ce 01       	movw	r24, r28
    33c0:	8d 5b       	subi	r24, 0xBD	; 189
    33c2:	9f 4f       	sbci	r25, 0xFF	; 255
    33c4:	21 e0       	ldi	r18, 0x01	; 1
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	fc 01       	movw	r30, r24
    33ca:	24 83       	std	Z+4, r18	; 0x04
    33cc:	35 83       	std	Z+5, r19	; 0x05
	readbno055.chip        = dev_addr;
    33ce:	ce 01       	movw	r24, r28
    33d0:	82 5b       	subi	r24, 0xB2	; 178
    33d2:	9f 4f       	sbci	r25, 0xFF	; 255
    33d4:	fc 01       	movw	r30, r24
    33d6:	20 81       	ld	r18, Z
    33d8:	ce 01       	movw	r24, r28
    33da:	8d 5b       	subi	r24, 0xBD	; 189
    33dc:	9f 4f       	sbci	r25, 0xFF	; 255
    33de:	fc 01       	movw	r30, r24
    33e0:	20 83       	st	Z, r18
	readbno055.buffer      = array;
    33e2:	ce 01       	movw	r24, r28
    33e4:	8d 5b       	subi	r24, 0xBD	; 189
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	9e 01       	movw	r18, r28
    33ea:	2d 5f       	subi	r18, 0xFD	; 253
    33ec:	3f 4f       	sbci	r19, 0xFF	; 255
    33ee:	fc 01       	movw	r30, r24
    33f0:	26 83       	std	Z+6, r18	; 0x06
    33f2:	37 83       	std	Z+7, r19	; 0x07
	readbno055.length      = cnt;
    33f4:	ce 01       	movw	r24, r28
    33f6:	8e 5a       	subi	r24, 0xAE	; 174
    33f8:	9f 4f       	sbci	r25, 0xFF	; 255
    33fa:	fc 01       	movw	r30, r24
    33fc:	80 81       	ld	r24, Z
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	ce 01       	movw	r24, r28
    3404:	8d 5b       	subi	r24, 0xBD	; 189
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	fc 01       	movw	r30, r24
    340a:	20 87       	std	Z+8, r18	; 0x08
    340c:	31 87       	std	Z+9, r19	; 0x09
	readbno055.no_wait     = false;
    340e:	ce 01       	movw	r24, r28
    3410:	8d 5b       	subi	r24, 0xBD	; 189
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	fc 01       	movw	r30, r24
    3416:	12 86       	std	Z+10, r1	; 0x0a


	BNO055_iERROR = (s8)twi_master_write(&IMU_TWI,&readbno055);
    3418:	ce 01       	movw	r24, r28
    341a:	8d 5b       	subi	r24, 0xBD	; 189
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	bc 01       	movw	r22, r24
    3420:	80 eb       	ldi	r24, 0xB0	; 176
    3422:	94 e0       	ldi	r25, 0x04	; 4
    3424:	35 de       	rcall	.-918    	; 0x3090 <twi_master_write>
    3426:	08 2e       	mov	r0, r24
    3428:	00 0c       	add	r0, r0
    342a:	99 0b       	sbc	r25, r25
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	9a 83       	std	Y+2, r25	; 0x02
// 	{
// 		printf(" %x, ",array[i]);
// 	}
// 	printf("\n");

	return (s8)BNO055_iERROR;
    3430:	89 81       	ldd	r24, Y+1	; 0x01
}
    3432:	ce 5a       	subi	r28, 0xAE	; 174
    3434:	df 4f       	sbci	r29, 0xFF	; 255
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	08 95       	ret

00003440 <BNO055_I2C_bus_read>:
 *	\param reg_data : This data read from the sensor,
 *   which is hold in an array
 *	\param cnt : The no of byte of data to be read
 */
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	c2 55       	subi	r28, 0x52	; 82
    344a:	d1 09       	sbc	r29, r1
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	fe 01       	movw	r30, r28
    3452:	e2 5b       	subi	r30, 0xB2	; 178
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 83       	st	Z, r24
    3458:	ce 01       	movw	r24, r28
    345a:	81 5b       	subi	r24, 0xB1	; 177
    345c:	9f 4f       	sbci	r25, 0xFF	; 255
    345e:	fc 01       	movw	r30, r24
    3460:	60 83       	st	Z, r22
    3462:	ce 01       	movw	r24, r28
    3464:	80 5b       	subi	r24, 0xB0	; 176
    3466:	9f 4f       	sbci	r25, 0xFF	; 255
    3468:	fc 01       	movw	r30, r24
    346a:	40 83       	st	Z, r20
    346c:	51 83       	std	Z+1, r21	; 0x01
    346e:	ce 01       	movw	r24, r28
    3470:	8e 5a       	subi	r24, 0xAE	; 174
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	fc 01       	movw	r30, r24
    3476:	20 83       	st	Z, r18
	s32 BNO055_iERROR = BNO055_INIT_VALUE;
    3478:	19 82       	std	Y+1, r1	; 0x01
    347a:	1a 82       	std	Y+2, r1	; 0x02
	u8 array[I2C_BUFFER_LEN] = {BNO055_INIT_VALUE};
    347c:	20 e4       	ldi	r18, 0x40	; 64
    347e:	ce 01       	movw	r24, r28
    3480:	03 96       	adiw	r24, 0x03	; 3
    3482:	fc 01       	movw	r30, r24
    3484:	32 2f       	mov	r19, r18
    3486:	11 92       	st	Z+, r1
    3488:	3a 95       	dec	r19
    348a:	e9 f7       	brne	.-6      	; 0x3486 <BNO055_I2C_bus_read+0x46>
     * In the driver BNO055_SUCCESS defined as 0
     * and FAILURE defined as -1
	 */

	twi_package_t readbno055;
	readbno055.addr[0]	   = reg_addr;
    348c:	ce 01       	movw	r24, r28
    348e:	8d 5b       	subi	r24, 0xBD	; 189
    3490:	9f 4f       	sbci	r25, 0xFF	; 255
    3492:	9e 01       	movw	r18, r28
    3494:	21 5b       	subi	r18, 0xB1	; 177
    3496:	3f 4f       	sbci	r19, 0xFF	; 255
    3498:	f9 01       	movw	r30, r18
    349a:	20 81       	ld	r18, Z
    349c:	fc 01       	movw	r30, r24
    349e:	21 83       	std	Z+1, r18	; 0x01
	readbno055.addr_length = 1;
    34a0:	ce 01       	movw	r24, r28
    34a2:	8d 5b       	subi	r24, 0xBD	; 189
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	21 e0       	ldi	r18, 0x01	; 1
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	fc 01       	movw	r30, r24
    34ac:	24 83       	std	Z+4, r18	; 0x04
    34ae:	35 83       	std	Z+5, r19	; 0x05
	readbno055.chip        = dev_addr;
    34b0:	ce 01       	movw	r24, r28
    34b2:	82 5b       	subi	r24, 0xB2	; 178
    34b4:	9f 4f       	sbci	r25, 0xFF	; 255
    34b6:	fc 01       	movw	r30, r24
    34b8:	20 81       	ld	r18, Z
    34ba:	ce 01       	movw	r24, r28
    34bc:	8d 5b       	subi	r24, 0xBD	; 189
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	fc 01       	movw	r30, r24
    34c2:	20 83       	st	Z, r18
	readbno055.buffer      = array;
    34c4:	ce 01       	movw	r24, r28
    34c6:	8d 5b       	subi	r24, 0xBD	; 189
    34c8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ca:	9e 01       	movw	r18, r28
    34cc:	2d 5f       	subi	r18, 0xFD	; 253
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	fc 01       	movw	r30, r24
    34d2:	26 83       	std	Z+6, r18	; 0x06
    34d4:	37 83       	std	Z+7, r19	; 0x07
	readbno055.length      = cnt;
    34d6:	ce 01       	movw	r24, r28
    34d8:	8e 5a       	subi	r24, 0xAE	; 174
    34da:	9f 4f       	sbci	r25, 0xFF	; 255
    34dc:	fc 01       	movw	r30, r24
    34de:	80 81       	ld	r24, Z
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	ce 01       	movw	r24, r28
    34e6:	8d 5b       	subi	r24, 0xBD	; 189
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	fc 01       	movw	r30, r24
    34ec:	20 87       	std	Z+8, r18	; 0x08
    34ee:	31 87       	std	Z+9, r19	; 0x09
	readbno055.no_wait     = false;
    34f0:	ce 01       	movw	r24, r28
    34f2:	8d 5b       	subi	r24, 0xBD	; 189
    34f4:	9f 4f       	sbci	r25, 0xFF	; 255
    34f6:	fc 01       	movw	r30, r24
    34f8:	12 86       	std	Z+10, r1	; 0x0a

	BNO055_iERROR = (int8_t) twi_master_read(&IMU_TWI, &readbno055);
    34fa:	ce 01       	movw	r24, r28
    34fc:	8d 5b       	subi	r24, 0xBD	; 189
    34fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3500:	bc 01       	movw	r22, r24
    3502:	80 eb       	ldi	r24, 0xB0	; 176
    3504:	94 e0       	ldi	r25, 0x04	; 4
    3506:	ac dd       	rcall	.-1192   	; 0x3060 <twi_master_read>
    3508:	08 2e       	mov	r0, r24
    350a:	00 0c       	add	r0, r0
    350c:	99 0b       	sbc	r25, r25
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	9a 83       	std	Y+2, r25	; 0x02
	memcpy(reg_data, array, cnt);
    3512:	ce 01       	movw	r24, r28
    3514:	8e 5a       	subi	r24, 0xAE	; 174
    3516:	9f 4f       	sbci	r25, 0xFF	; 255
    3518:	fc 01       	movw	r30, r24
    351a:	80 81       	ld	r24, Z
    351c:	48 2f       	mov	r20, r24
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	9e 01       	movw	r18, r28
    3522:	2d 5f       	subi	r18, 0xFD	; 253
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	ce 01       	movw	r24, r28
    3528:	80 5b       	subi	r24, 0xB0	; 176
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	fc 01       	movw	r30, r24
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	b9 01       	movw	r22, r18
    3534:	0e 94 75 48 	call	0x90ea	; 0x90ea <memcpy>
	
/*	printf("I2C Read: %x\n",array[0]);*/

// 	for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
// 		*(reg_data + stringpos) = array[stringpos];
	return (s8)BNO055_iERROR;
    3538:	89 81       	ldd	r24, Y+1	; 0x01
}
    353a:	ce 5a       	subi	r28, 0xAE	; 174
    353c:	df 4f       	sbci	r29, 0xFF	; 255
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	08 95       	ret

00003548 <BNO055_delay_msek>:

void BNO055_delay_msek(u32 msek)
{
    3548:	2f 92       	push	r2
    354a:	3f 92       	push	r3
    354c:	4f 92       	push	r4
    354e:	5f 92       	push	r5
    3550:	6f 92       	push	r6
    3552:	7f 92       	push	r7
    3554:	8f 92       	push	r8
    3556:	9f 92       	push	r9
    3558:	af 92       	push	r10
    355a:	bf 92       	push	r11
    355c:	cf 92       	push	r12
    355e:	df 92       	push	r13
    3560:	ef 92       	push	r14
    3562:	ff 92       	push	r15
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	1f 92       	push	r1
    356e:	1f 92       	push	r1
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	9a 83       	std	Y+2, r25	; 0x02
	delay_ms(msek);
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	89 2b       	or	r24, r25
    357e:	09 f4       	brne	.+2      	; 0x3582 <BNO055_delay_msek+0x3a>
    3580:	97 c0       	rjmp	.+302    	; 0x36b0 <BNO055_delay_msek+0x168>
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	1c 01       	movw	r2, r24
    3588:	41 2c       	mov	r4, r1
    358a:	51 2c       	mov	r5, r1
    358c:	61 2c       	mov	r6, r1
    358e:	71 2c       	mov	r7, r1
    3590:	43 01       	movw	r8, r6
    3592:	de db       	rcall	.-2116   	; 0x2d50 <sysclk_get_cpu_hz>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9c 01       	movw	r18, r24
    359a:	ad 01       	movw	r20, r26
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	70 e0       	ldi	r23, 0x00	; 0
    35a0:	cb 01       	movw	r24, r22
    35a2:	a2 2e       	mov	r10, r18
    35a4:	b3 2e       	mov	r11, r19
    35a6:	c4 2e       	mov	r12, r20
    35a8:	d5 2e       	mov	r13, r21
    35aa:	e6 2e       	mov	r14, r22
    35ac:	f7 2e       	mov	r15, r23
    35ae:	08 2f       	mov	r16, r24
    35b0:	19 2f       	mov	r17, r25
    35b2:	22 2d       	mov	r18, r2
    35b4:	33 2d       	mov	r19, r3
    35b6:	44 2d       	mov	r20, r4
    35b8:	55 2d       	mov	r21, r5
    35ba:	66 2d       	mov	r22, r6
    35bc:	77 2d       	mov	r23, r7
    35be:	88 2d       	mov	r24, r8
    35c0:	99 2d       	mov	r25, r9
    35c2:	0e 94 88 45 	call	0x8b10	; 0x8b10 <__muldi3>
    35c6:	a2 2e       	mov	r10, r18
    35c8:	b3 2e       	mov	r11, r19
    35ca:	c4 2e       	mov	r12, r20
    35cc:	d5 2e       	mov	r13, r21
    35ce:	e6 2e       	mov	r14, r22
    35d0:	f7 2e       	mov	r15, r23
    35d2:	08 2f       	mov	r16, r24
    35d4:	19 2f       	mov	r17, r25
    35d6:	2a 2c       	mov	r2, r10
    35d8:	3b 2c       	mov	r3, r11
    35da:	4c 2c       	mov	r4, r12
    35dc:	5d 2c       	mov	r5, r13
    35de:	6e 2c       	mov	r6, r14
    35e0:	7f 2c       	mov	r7, r15
    35e2:	80 2e       	mov	r8, r16
    35e4:	91 2e       	mov	r9, r17
    35e6:	0f 2e       	mov	r0, r31
    35e8:	f6 e0       	ldi	r31, 0x06	; 6
    35ea:	af 2e       	mov	r10, r31
    35ec:	f0 2d       	mov	r31, r0
    35ee:	b1 2c       	mov	r11, r1
    35f0:	c1 2c       	mov	r12, r1
    35f2:	d1 2c       	mov	r13, r1
    35f4:	e1 2c       	mov	r14, r1
    35f6:	f1 2c       	mov	r15, r1
    35f8:	00 e0       	ldi	r16, 0x00	; 0
    35fa:	10 e0       	ldi	r17, 0x00	; 0
    35fc:	22 2d       	mov	r18, r2
    35fe:	33 2d       	mov	r19, r3
    3600:	44 2d       	mov	r20, r4
    3602:	55 2d       	mov	r21, r5
    3604:	66 2d       	mov	r22, r6
    3606:	77 2d       	mov	r23, r7
    3608:	88 2d       	mov	r24, r8
    360a:	99 2d       	mov	r25, r9
    360c:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__udivdi3>
    3610:	22 2e       	mov	r2, r18
    3612:	33 2e       	mov	r3, r19
    3614:	44 2e       	mov	r4, r20
    3616:	55 2e       	mov	r5, r21
    3618:	66 2e       	mov	r6, r22
    361a:	77 2e       	mov	r7, r23
    361c:	88 2e       	mov	r8, r24
    361e:	99 2e       	mov	r9, r25
    3620:	a2 2c       	mov	r10, r2
    3622:	b3 2c       	mov	r11, r3
    3624:	c4 2c       	mov	r12, r4
    3626:	d5 2c       	mov	r13, r5
    3628:	e6 2c       	mov	r14, r6
    362a:	f7 2c       	mov	r15, r7
    362c:	08 2d       	mov	r16, r8
    362e:	19 2d       	mov	r17, r9
    3630:	2a 2d       	mov	r18, r10
    3632:	3b 2d       	mov	r19, r11
    3634:	4c 2d       	mov	r20, r12
    3636:	5d 2d       	mov	r21, r13
    3638:	6e 2d       	mov	r22, r14
    363a:	7f 2d       	mov	r23, r15
    363c:	80 2f       	mov	r24, r16
    363e:	91 2f       	mov	r25, r17
    3640:	29 51       	subi	r18, 0x19	; 25
    3642:	3c 4f       	sbci	r19, 0xFC	; 252
    3644:	4f 4f       	sbci	r20, 0xFF	; 255
    3646:	5f 4f       	sbci	r21, 0xFF	; 255
    3648:	6f 4f       	sbci	r22, 0xFF	; 255
    364a:	7f 4f       	sbci	r23, 0xFF	; 255
    364c:	8f 4f       	sbci	r24, 0xFF	; 255
    364e:	9f 4f       	sbci	r25, 0xFF	; 255
    3650:	a2 2e       	mov	r10, r18
    3652:	b3 2e       	mov	r11, r19
    3654:	c4 2e       	mov	r12, r20
    3656:	d5 2e       	mov	r13, r21
    3658:	e6 2e       	mov	r14, r22
    365a:	f7 2e       	mov	r15, r23
    365c:	08 2f       	mov	r16, r24
    365e:	19 2f       	mov	r17, r25
    3660:	2a 2d       	mov	r18, r10
    3662:	3b 2d       	mov	r19, r11
    3664:	4c 2d       	mov	r20, r12
    3666:	5d 2d       	mov	r21, r13
    3668:	6e 2d       	mov	r22, r14
    366a:	7f 2d       	mov	r23, r15
    366c:	80 2f       	mov	r24, r16
    366e:	91 2f       	mov	r25, r17
    3670:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__floatundisf>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	4a e7       	ldi	r20, 0x7A	; 122
    367e:	54 e4       	ldi	r21, 0x44	; 68
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <__fixunssfdi>
    3694:	a2 2e       	mov	r10, r18
    3696:	b3 2e       	mov	r11, r19
    3698:	c4 2e       	mov	r12, r20
    369a:	d5 2e       	mov	r13, r21
    369c:	e6 2e       	mov	r14, r22
    369e:	f7 2e       	mov	r15, r23
    36a0:	08 2f       	mov	r16, r24
    36a2:	19 2f       	mov	r17, r25
    36a4:	d6 01       	movw	r26, r12
    36a6:	c5 01       	movw	r24, r10
    36a8:	bc 01       	movw	r22, r24
    36aa:	cd 01       	movw	r24, r26
    36ac:	ce dc       	rcall	.-1636   	; 0x304a <__portable_avr_delay_cycles>
    36ae:	6c c0       	rjmp	.+216    	; 0x3788 <BNO055_delay_msek+0x240>
	return (s8)BNO055_iERROR;
}

void BNO055_delay_msek(u32 msek)
{
	delay_ms(msek);
    36b0:	4f db       	rcall	.-2402   	; 0x2d50 <sysclk_get_cpu_hz>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	1c 01       	movw	r2, r24
    36b8:	2d 01       	movw	r4, r26
    36ba:	61 2c       	mov	r6, r1
    36bc:	71 2c       	mov	r7, r1
    36be:	43 01       	movw	r8, r6
    36c0:	0f 2e       	mov	r0, r31
    36c2:	f6 e0       	ldi	r31, 0x06	; 6
    36c4:	af 2e       	mov	r10, r31
    36c6:	f0 2d       	mov	r31, r0
    36c8:	b1 2c       	mov	r11, r1
    36ca:	c1 2c       	mov	r12, r1
    36cc:	d1 2c       	mov	r13, r1
    36ce:	e1 2c       	mov	r14, r1
    36d0:	f1 2c       	mov	r15, r1
    36d2:	00 e0       	ldi	r16, 0x00	; 0
    36d4:	10 e0       	ldi	r17, 0x00	; 0
    36d6:	22 2d       	mov	r18, r2
    36d8:	33 2d       	mov	r19, r3
    36da:	44 2d       	mov	r20, r4
    36dc:	55 2d       	mov	r21, r5
    36de:	66 2d       	mov	r22, r6
    36e0:	77 2d       	mov	r23, r7
    36e2:	88 2d       	mov	r24, r8
    36e4:	99 2d       	mov	r25, r9
    36e6:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__udivdi3>
    36ea:	22 2e       	mov	r2, r18
    36ec:	33 2e       	mov	r3, r19
    36ee:	44 2e       	mov	r4, r20
    36f0:	55 2e       	mov	r5, r21
    36f2:	66 2e       	mov	r6, r22
    36f4:	77 2e       	mov	r7, r23
    36f6:	88 2e       	mov	r8, r24
    36f8:	99 2e       	mov	r9, r25
    36fa:	a2 2c       	mov	r10, r2
    36fc:	b3 2c       	mov	r11, r3
    36fe:	c4 2c       	mov	r12, r4
    3700:	d5 2c       	mov	r13, r5
    3702:	e6 2c       	mov	r14, r6
    3704:	f7 2c       	mov	r15, r7
    3706:	08 2d       	mov	r16, r8
    3708:	19 2d       	mov	r17, r9
    370a:	2a 2d       	mov	r18, r10
    370c:	3b 2d       	mov	r19, r11
    370e:	4c 2d       	mov	r20, r12
    3710:	5d 2d       	mov	r21, r13
    3712:	6e 2d       	mov	r22, r14
    3714:	7f 2d       	mov	r23, r15
    3716:	80 2f       	mov	r24, r16
    3718:	91 2f       	mov	r25, r17
    371a:	21 5c       	subi	r18, 0xC1	; 193
    371c:	3d 4b       	sbci	r19, 0xBD	; 189
    371e:	40 4f       	sbci	r20, 0xF0	; 240
    3720:	5f 4f       	sbci	r21, 0xFF	; 255
    3722:	6f 4f       	sbci	r22, 0xFF	; 255
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	8f 4f       	sbci	r24, 0xFF	; 255
    3728:	9f 4f       	sbci	r25, 0xFF	; 255
    372a:	a2 2e       	mov	r10, r18
    372c:	b3 2e       	mov	r11, r19
    372e:	c4 2e       	mov	r12, r20
    3730:	d5 2e       	mov	r13, r21
    3732:	e6 2e       	mov	r14, r22
    3734:	f7 2e       	mov	r15, r23
    3736:	08 2f       	mov	r16, r24
    3738:	19 2f       	mov	r17, r25
    373a:	2a 2d       	mov	r18, r10
    373c:	3b 2d       	mov	r19, r11
    373e:	4c 2d       	mov	r20, r12
    3740:	5d 2d       	mov	r21, r13
    3742:	6e 2d       	mov	r22, r14
    3744:	7f 2d       	mov	r23, r15
    3746:	80 2f       	mov	r24, r16
    3748:	91 2f       	mov	r25, r17
    374a:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__floatundisf>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	34 e2       	ldi	r19, 0x24	; 36
    3756:	44 e7       	ldi	r20, 0x74	; 116
    3758:	59 e4       	ldi	r21, 0x49	; 73
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <__divsf3>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <__fixunssfdi>
    376e:	a2 2e       	mov	r10, r18
    3770:	b3 2e       	mov	r11, r19
    3772:	c4 2e       	mov	r12, r20
    3774:	d5 2e       	mov	r13, r21
    3776:	e6 2e       	mov	r14, r22
    3778:	f7 2e       	mov	r15, r23
    377a:	08 2f       	mov	r16, r24
    377c:	19 2f       	mov	r17, r25
    377e:	d6 01       	movw	r26, r12
    3780:	c5 01       	movw	r24, r10
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	61 dc       	rcall	.-1854   	; 0x304a <__portable_avr_delay_cycles>
    3788:	00 00       	nop
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	bf 90       	pop	r11
    37a0:	af 90       	pop	r10
    37a2:	9f 90       	pop	r9
    37a4:	8f 90       	pop	r8
    37a6:	7f 90       	pop	r7
    37a8:	6f 90       	pop	r6
    37aa:	5f 90       	pop	r5
    37ac:	4f 90       	pop	r4
    37ae:	3f 90       	pop	r3
    37b0:	2f 90       	pop	r2
    37b2:	08 95       	ret

000037b4 <xbee_init>:
#include "Xbee.h"
static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

void xbee_init()
{
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
	xbee_uart.Baud=XBEEBAUD;
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	92 ec       	ldi	r25, 0xC2	; 194
    37c0:	a1 e0       	ldi	r26, 0x01	; 1
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <xbee_uart+0x6>
    37c8:	90 93 fb 21 	sts	0x21FB, r25	; 0x8021fb <xbee_uart+0x7>
    37cc:	a0 93 fc 21 	sts	0x21FC, r26	; 0x8021fc <xbee_uart+0x8>
    37d0:	b0 93 fd 21 	sts	0x21FD, r27	; 0x8021fd <xbee_uart+0x9>
	xbee_uart.Port=P_XBEEPORT;
    37d4:	80 ea       	ldi	r24, 0xA0	; 160
    37d6:	96 e0       	ldi	r25, 0x06	; 6
    37d8:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <xbee_uart>
    37dc:	90 93 f5 21 	sts	0x21F5, r25	; 0x8021f5 <xbee_uart+0x1>
	xbee_uart.Usart=P_XBEEUART;
    37e0:	80 ea       	ldi	r24, 0xA0	; 160
    37e2:	9b e0       	ldi	r25, 0x0B	; 11
    37e4:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <xbee_uart+0x2>
    37e8:	90 93 f7 21 	sts	0x21F7, r25	; 0x8021f7 <xbee_uart+0x3>
	xbee_uart.tx=XBEETXPIN;
    37ec:	88 e0       	ldi	r24, 0x08	; 8
    37ee:	80 93 f9 21 	sts	0x21F9, r24	; 0x8021f9 <xbee_uart+0x5>
	xbee_uart.rx=XBEERXPIN;
    37f2:	84 e0       	ldi	r24, 0x04	; 4
    37f4:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <xbee_uart+0x4>
	uart_init(&xbee_uart);
    37f8:	84 ef       	ldi	r24, 0xF4	; 244
    37fa:	91 e2       	ldi	r25, 0x21	; 33
    37fc:	0e 94 12 38 	call	0x7024	; 0x7024 <uart_init>
	XBEE_UART.CTRLA=0x14;
    3800:	80 ea       	ldi	r24, 0xA0	; 160
    3802:	9b e0       	ldi	r25, 0x0B	; 11
    3804:	24 e1       	ldi	r18, 0x14	; 20
    3806:	fc 01       	movw	r30, r24
    3808:	23 83       	std	Z+3, r18	; 0x03
}
    380a:	00 00       	nop
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	08 95       	ret

00003812 <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	1f 92       	push	r1
    3818:	1f 92       	push	r1
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	9a 83       	std	Y+2, r25	; 0x02
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	0e 94 7e 48 	call	0x90fc	; 0x90fc <strlen>
    382a:	9c 01       	movw	r18, r24
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	9a 81       	ldd	r25, Y+2	; 0x02
    3830:	a9 01       	movw	r20, r18
    3832:	bc 01       	movw	r22, r24
    3834:	80 ea       	ldi	r24, 0xA0	; 160
    3836:	9b e0       	ldi	r25, 0x0B	; 11
    3838:	a5 d1       	rcall	.+842    	; 0x3b84 <usart_serial_write_packet>
}
    383a:	00 00       	nop
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <__vector_119>:

ISR(READ_INTURUPT)
{
    3846:	1f 92       	push	r1
    3848:	0f 92       	push	r0
    384a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    384e:	0f 92       	push	r0
    3850:	11 24       	eor	r1, r1
    3852:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3856:	0f 92       	push	r0
    3858:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    385c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3860:	0f 92       	push	r0
    3862:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3866:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    386a:	0f 92       	push	r0
    386c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3870:	8f 93       	push	r24
    3872:	9f 93       	push	r25
    3874:	ef 93       	push	r30
    3876:	ff 93       	push	r31
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    3880:	80 ea       	ldi	r24, 0xA0	; 160
    3882:	9b e0       	ldi	r25, 0x0B	; 11
    3884:	fc 01       	movw	r30, r24
    3886:	80 81       	ld	r24, Z
    3888:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <XbeeRx>
    388c:	00 00       	nop
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	ff 91       	pop	r31
    3894:	ef 91       	pop	r30
    3896:	9f 91       	pop	r25
    3898:	8f 91       	pop	r24
    389a:	0f 90       	pop	r0
    389c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38a0:	0f 90       	pop	r0
    38a2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    38a6:	0f 90       	pop	r0
    38a8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    38ac:	0f 90       	pop	r0
    38ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    38b2:	0f 90       	pop	r0
    38b4:	1f 90       	pop	r1
    38b6:	18 95       	reti

000038b8 <newOLogInit>:

static uart_device openLog;


void newOLogInit()//initializes the openLog uart communication interface
{
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	92 ec       	ldi	r25, 0xC2	; 194
    38c4:	a1 e0       	ldi	r26, 0x01	; 1
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	80 93 04 22 	sts	0x2204, r24	; 0x802204 <openLog+0x6>
    38cc:	90 93 05 22 	sts	0x2205, r25	; 0x802205 <openLog+0x7>
    38d0:	a0 93 06 22 	sts	0x2206, r26	; 0x802206 <openLog+0x8>
    38d4:	b0 93 07 22 	sts	0x2207, r27	; 0x802207 <openLog+0x9>
    openLog.Port=P_OPENLOG_PORT;
    38d8:	80 e4       	ldi	r24, 0x40	; 64
    38da:	96 e0       	ldi	r25, 0x06	; 6
    38dc:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <openLog>
    38e0:	90 93 ff 21 	sts	0x21FF, r25	; 0x8021ff <openLog+0x1>
	openLog.Usart=P_OPENLOG_UART;
    38e4:	80 ea       	ldi	r24, 0xA0	; 160
    38e6:	98 e0       	ldi	r25, 0x08	; 8
    38e8:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <openLog+0x2>
    38ec:	90 93 01 22 	sts	0x2201, r25	; 0x802201 <openLog+0x3>
	openLog.tx=OPENLOG_TX_PIN;
    38f0:	88 e0       	ldi	r24, 0x08	; 8
    38f2:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <openLog+0x5>
	openLog.rx=OPENLOG_RX_PIN;
    38f6:	84 e0       	ldi	r24, 0x04	; 4
    38f8:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <openLog+0x4>
	 uart_init(&openLog);//function that initializes uart
    38fc:	8e ef       	ldi	r24, 0xFE	; 254
    38fe:	91 e2       	ldi	r25, 0x21	; 33
    3900:	0e 94 12 38 	call	0x7024	; 0x7024 <uart_init>
}
    3904:	00 00       	nop
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	08 95       	ret

0000390c <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	1f 92       	push	r1
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    3916:	8f e3       	ldi	r24, 0x3F	; 63
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	fc 01       	movw	r30, r24
    391c:	80 81       	ld	r24, Z
    391e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3920:	f8 94       	cli
	return flags;
    3922:	89 81       	ldd	r24, Y+1	; 0x01
}
    3924:	0f 90       	pop	r0
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	08 95       	ret

0000392c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    392c:	cf 93       	push	r28
    392e:	df 93       	push	r29
    3930:	1f 92       	push	r1
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    3938:	8f e3       	ldi	r24, 0x3F	; 63
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	29 81       	ldd	r18, Y+1	; 0x01
    393e:	fc 01       	movw	r30, r24
    3940:	20 83       	st	Z, r18
}
    3942:	00 00       	nop
    3944:	0f 90       	pop	r0
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	08 95       	ret

0000394c <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	1f 92       	push	r1
    3952:	1f 92       	push	r1
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    395a:	d8 df       	rcall	.-80     	; 0x390c <cpu_irq_save>
    395c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    395e:	80 e5       	ldi	r24, 0x50	; 80
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	20 e5       	ldi	r18, 0x50	; 80
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	f9 01       	movw	r30, r18
    3968:	30 81       	ld	r19, Z
    396a:	2a 81       	ldd	r18, Y+2	; 0x02
    396c:	23 2b       	or	r18, r19
    396e:	fc 01       	movw	r30, r24
    3970:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	db df       	rcall	.-74     	; 0x392c <cpu_irq_restore>
}
    3976:	00 00       	nop
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	08 95       	ret

00003982 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	1f 92       	push	r1
    3988:	1f 92       	push	r1
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3990:	80 e5       	ldi	r24, 0x50	; 80
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	22 e0       	ldi	r18, 0x02	; 2
    3996:	fc 01       	movw	r30, r24
    3998:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    399a:	b8 df       	rcall	.-144    	; 0x390c <cpu_irq_save>
    399c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    399e:	80 e5       	ldi	r24, 0x50	; 80
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	20 e5       	ldi	r18, 0x50	; 80
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	f9 01       	movw	r30, r18
    39a8:	30 81       	ld	r19, Z
    39aa:	2a 81       	ldd	r18, Y+2	; 0x02
    39ac:	23 2b       	or	r18, r19
    39ae:	fc 01       	movw	r30, r24
    39b0:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	bb df       	rcall	.-138    	; 0x392c <cpu_irq_restore>
}
    39b6:	00 00       	nop
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	08 95       	ret

000039c2 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	1f 92       	push	r1
    39c8:	1f 92       	push	r1
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    39d0:	9d df       	rcall	.-198    	; 0x390c <cpu_irq_save>
    39d2:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    39d4:	80 e5       	ldi	r24, 0x50	; 80
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	20 e5       	ldi	r18, 0x50	; 80
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	f9 01       	movw	r30, r18
    39de:	20 81       	ld	r18, Z
    39e0:	32 2f       	mov	r19, r18
    39e2:	2a 81       	ldd	r18, Y+2	; 0x02
    39e4:	20 95       	com	r18
    39e6:	23 23       	and	r18, r19
    39e8:	fc 01       	movw	r30, r24
    39ea:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	9e df       	rcall	.-196    	; 0x392c <cpu_irq_restore>
}
    39f0:	00 00       	nop
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	df 91       	pop	r29
    39f8:	cf 91       	pop	r28
    39fa:	08 95       	ret

000039fc <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    39fc:	cf 93       	push	r28
    39fe:	df 93       	push	r29
    3a00:	1f 92       	push	r1
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
    3a06:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	88 30       	cpi	r24, 0x08	; 8
    3a0c:	19 f0       	breq	.+6      	; 0x3a14 <osc_enable+0x18>
		osc_enable_internal(id);
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	9d df       	rcall	.-198    	; 0x394c <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	b5 df       	rcall	.-150    	; 0x3982 <osc_enable_external>
	}
}
    3a18:	00 00       	nop
    3a1a:	0f 90       	pop	r0
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	1f 92       	push	r1
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3a2e:	80 e5       	ldi	r24, 0x50	; 80
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	fc 01       	movw	r30, r24
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	98 23       	and	r25, r24
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	99 23       	and	r25, r25
    3a3e:	09 f4       	brne	.+2      	; 0x3a42 <osc_is_ready+0x20>
    3a40:	80 e0       	ldi	r24, 0x00	; 0
}
    3a42:	0f 90       	pop	r0
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	08 95       	ret

00003a4a <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	1f 92       	push	r1
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    3a56:	00 00       	nop
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
    3a5a:	e3 df       	rcall	.-58     	; 0x3a22 <osc_is_ready>
    3a5c:	98 2f       	mov	r25, r24
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	89 27       	eor	r24, r25
    3a62:	88 23       	and	r24, r24
    3a64:	c9 f7       	brne	.-14     	; 0x3a58 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    3a66:	00 00       	nop
    3a68:	0f 90       	pop	r0
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	08 95       	ret

00003a70 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <sysclk_init+0x6>
    3a76:	1f 92       	push	r1
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    3a7c:	80 e7       	ldi	r24, 0x70	; 112
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	89 83       	std	Y+1, r24	; 0x01
    3a82:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    3a84:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    3a86:	1b 82       	std	Y+3, r1	; 0x03
    3a88:	0d c0       	rjmp	.+26     	; 0x3aa4 <sysclk_init+0x34>
		*(reg++) = 0xff;
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8e:	9c 01       	movw	r18, r24
    3a90:	2f 5f       	subi	r18, 0xFF	; 255
    3a92:	3f 4f       	sbci	r19, 0xFF	; 255
    3a94:	29 83       	std	Y+1, r18	; 0x01
    3a96:	3a 83       	std	Y+2, r19	; 0x02
    3a98:	2f ef       	ldi	r18, 0xFF	; 255
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	8f 5f       	subi	r24, 0xFF	; 255
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	87 30       	cpi	r24, 0x07	; 7
    3aa8:	80 f3       	brcs	.-32     	; 0x3a8a <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    3aaa:	82 e0       	ldi	r24, 0x02	; 2
    3aac:	a7 df       	rcall	.-178    	; 0x39fc <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    3aae:	82 e0       	ldi	r24, 0x02	; 2
    3ab0:	cc df       	rcall	.-104    	; 0x3a4a <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    3ab2:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	80 e4       	ldi	r24, 0x40	; 64
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	cd d0       	rcall	.+410    	; 0x3c56 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    3abc:	8c 81       	ldd	r24, Y+4	; 0x04
    3abe:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    3ac0:	11 f4       	brne	.+4      	; 0x3ac6 <sysclk_init+0x56>
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	7e df       	rcall	.-260    	; 0x39c2 <osc_disable>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    3ac6:	24 96       	adiw	r28, 0x04	; 4
    3ac8:	cd bf       	out	0x3d, r28	; 61
    3aca:	de bf       	out	0x3e, r29	; 62
    3acc:	df 91       	pop	r29
    3ace:	cf 91       	pop	r28
    3ad0:	08 95       	ret

00003ad2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <sysclk_enable_module+0x6>
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	8a 83       	std	Y+2, r24	; 0x02
    3ade:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    3ae0:	15 df       	rcall	.-470    	; 0x390c <cpu_irq_save>
    3ae2:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae6:	88 2f       	mov	r24, r24
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	80 59       	subi	r24, 0x90	; 144
    3aec:	9f 4f       	sbci	r25, 0xFF	; 255
    3aee:	2a 81       	ldd	r18, Y+2	; 0x02
    3af0:	22 2f       	mov	r18, r18
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	20 59       	subi	r18, 0x90	; 144
    3af6:	3f 4f       	sbci	r19, 0xFF	; 255
    3af8:	f9 01       	movw	r30, r18
    3afa:	20 81       	ld	r18, Z
    3afc:	32 2f       	mov	r19, r18
    3afe:	2b 81       	ldd	r18, Y+3	; 0x03
    3b00:	20 95       	com	r18
    3b02:	23 23       	and	r18, r19
    3b04:	fc 01       	movw	r30, r24
    3b06:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	10 df       	rcall	.-480    	; 0x392c <cpu_irq_restore>
}
    3b0c:	00 00       	nop
    3b0e:	23 96       	adiw	r28, 0x03	; 3
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	08 95       	ret

00003b1a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <sysclk_disable_module+0x6>
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	8a 83       	std	Y+2, r24	; 0x02
    3b26:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    3b28:	f1 de       	rcall	.-542    	; 0x390c <cpu_irq_save>
    3b2a:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	88 2f       	mov	r24, r24
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	80 59       	subi	r24, 0x90	; 144
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
    3b36:	2a 81       	ldd	r18, Y+2	; 0x02
    3b38:	22 2f       	mov	r18, r18
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	20 59       	subi	r18, 0x90	; 144
    3b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b40:	f9 01       	movw	r30, r18
    3b42:	30 81       	ld	r19, Z
    3b44:	2b 81       	ldd	r18, Y+3	; 0x03
    3b46:	23 2b       	or	r18, r19
    3b48:	fc 01       	movw	r30, r24
    3b4a:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	ee de       	rcall	.-548    	; 0x392c <cpu_irq_restore>
}
    3b50:	00 00       	nop
    3b52:	23 96       	adiw	r28, 0x03	; 3
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	de bf       	out	0x3e, r29	; 62
    3b58:	df 91       	pop	r29
    3b5a:	cf 91       	pop	r28
    3b5c:	08 95       	ret

00003b5e <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <usart_serial_putchar+0x6>
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	89 83       	std	Y+1, r24	; 0x01
    3b6a:	9a 83       	std	Y+2, r25	; 0x02
    3b6c:	6b 83       	std	Y+3, r22	; 0x03
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	9a 81       	ldd	r25, Y+2	; 0x02
    3b72:	6b 81       	ldd	r22, Y+3	; 0x03
    3b74:	0e 94 02 33 	call	0x6604	; 0x6604 <usart_putchar>
    3b78:	23 96       	adiw	r28, 0x03	; 3
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	08 95       	ret

00003b84 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <usart_serial_write_packet+0x6>
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <usart_serial_write_packet+0x8>
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	6b 83       	std	Y+3, r22	; 0x03
    3b96:	7c 83       	std	Y+4, r23	; 0x04
    3b98:	4d 83       	std	Y+5, r20	; 0x05
    3b9a:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    3b9c:	12 c0       	rjmp	.+36     	; 0x3bc2 <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	20 81       	ld	r18, Z
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	62 2f       	mov	r22, r18
    3bac:	d8 df       	rcall	.-80     	; 0x3b5e <usart_serial_putchar>
		len--;
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
    3bb6:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    3bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bba:	9c 81       	ldd	r25, Y+4	; 0x04
    3bbc:	01 96       	adiw	r24, 0x01	; 1
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
    3bc0:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    3bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc6:	89 2b       	or	r24, r25
    3bc8:	51 f7       	brne	.-44     	; 0x3b9e <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    3bca:	80 e0       	ldi	r24, 0x00	; 0
}
    3bcc:	26 96       	adiw	r28, 0x06	; 6
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	08 95       	ret

00003bd8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	00 d0       	rcall	.+0      	; 0x3bde <_read+0x6>
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	8a 83       	std	Y+2, r24	; 0x02
    3be4:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    3be6:	20 91 99 22 	lds	r18, 0x2299	; 0x802299 <ptr_get>
    3bea:	30 91 9a 22 	lds	r19, 0x229A	; 0x80229a <ptr_get+0x1>
    3bee:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <stdio_base>
    3bf2:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <stdio_base+0x1>
    3bf6:	ae 01       	movw	r20, r28
    3bf8:	4f 5f       	subi	r20, 0xFF	; 255
    3bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    3bfc:	ba 01       	movw	r22, r20
    3bfe:	f9 01       	movw	r30, r18
    3c00:	19 95       	eicall
	return c;
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	08 2e       	mov	r0, r24
    3c06:	00 0c       	add	r0, r0
    3c08:	99 0b       	sbc	r25, r25
}
    3c0a:	23 96       	adiw	r28, 0x03	; 3
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	08 95       	ret

00003c16 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    3c16:	cf 93       	push	r28
    3c18:	df 93       	push	r29
    3c1a:	00 d0       	rcall	.+0      	; 0x3c1c <_write+0x6>
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	89 83       	std	Y+1, r24	; 0x01
    3c22:	6a 83       	std	Y+2, r22	; 0x02
    3c24:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    3c26:	20 91 9b 22 	lds	r18, 0x229B	; 0x80229b <ptr_put>
    3c2a:	30 91 9c 22 	lds	r19, 0x229C	; 0x80229c <ptr_put+0x1>
    3c2e:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <stdio_base>
    3c32:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <stdio_base+0x1>
    3c36:	69 81       	ldd	r22, Y+1	; 0x01
    3c38:	f9 01       	movw	r30, r18
    3c3a:	19 95       	eicall
    3c3c:	99 23       	and	r25, r25
    3c3e:	1c f4       	brge	.+6      	; 0x3c46 <_write+0x30>
		return -1;
    3c40:	8f ef       	ldi	r24, 0xFF	; 255
    3c42:	9f ef       	ldi	r25, 0xFF	; 255
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <_write+0x34>
	}
	return 1;
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	90 e0       	ldi	r25, 0x00	; 0
}
    3c4a:	23 96       	adiw	r28, 0x03	; 3
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	08 95       	ret

00003c56 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3c56:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3c58:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3c5a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3c5c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3c5e:	60 83       	st	Z, r22
	ret                             // Return to caller
    3c60:	08 95       	ret

00003c62 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3c62:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3c66:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3c68:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3c6a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3c6e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3c70:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3c74:	08 95       	ret

00003c76 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    3c76:	1f 92       	push	r1
    3c78:	0f 92       	push	r0
    3c7a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3c7e:	0f 92       	push	r0
    3c80:	11 24       	eor	r1, r1
    3c82:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3c86:	0f 92       	push	r0
    3c88:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3c8c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c90:	0f 92       	push	r0
    3c92:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c96:	8f 93       	push	r24
    3c98:	9f 93       	push	r25
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    3ca2:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <rtc_data>
    3ca6:	90 91 a0 22 	lds	r25, 0x22A0	; 0x8022a0 <rtc_data+0x1>
    3caa:	01 96       	adiw	r24, 0x01	; 1
    3cac:	80 93 9f 22 	sts	0x229F, r24	; 0x80229f <rtc_data>
    3cb0:	90 93 a0 22 	sts	0x22A0, r25	; 0x8022a0 <rtc_data+0x1>
}
    3cb4:	00 00       	nop
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	9f 91       	pop	r25
    3cbc:	8f 91       	pop	r24
    3cbe:	0f 90       	pop	r0
    3cc0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3cc4:	0f 90       	pop	r0
    3cc6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3cca:	0f 90       	pop	r0
    3ccc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3cd0:	0f 90       	pop	r0
    3cd2:	1f 90       	pop	r1
    3cd4:	18 95       	reti

00003cd6 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    3cd6:	1f 92       	push	r1
    3cd8:	0f 92       	push	r0
    3cda:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3cde:	0f 92       	push	r0
    3ce0:	11 24       	eor	r1, r1
    3ce2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ce6:	0f 92       	push	r0
    3ce8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3cec:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3cf0:	0f 92       	push	r0
    3cf2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3cf6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3cfa:	0f 92       	push	r0
    3cfc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d00:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d04:	0f 92       	push	r0
    3d06:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d0a:	2f 93       	push	r18
    3d0c:	3f 93       	push	r19
    3d0e:	4f 93       	push	r20
    3d10:	5f 93       	push	r21
    3d12:	6f 93       	push	r22
    3d14:	7f 93       	push	r23
    3d16:	8f 93       	push	r24
    3d18:	9f 93       	push	r25
    3d1a:	af 93       	push	r26
    3d1c:	bf 93       	push	r27
    3d1e:	ef 93       	push	r30
    3d20:	ff 93       	push	r31
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	28 97       	sbiw	r28, 0x08	; 8
    3d2c:	cd bf       	out	0x3d, r28	; 61
    3d2e:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    3d30:	20 91 9f 22 	lds	r18, 0x229F	; 0x80229f <rtc_data>
    3d34:	30 91 a0 22 	lds	r19, 0x22A0	; 0x8022a0 <rtc_data+0x1>
    3d38:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <rtc_data+0x2>
    3d3c:	90 91 a2 22 	lds	r25, 0x22A2	; 0x8022a2 <rtc_data+0x3>
    3d40:	28 17       	cp	r18, r24
    3d42:	39 07       	cpc	r19, r25
    3d44:	08 f4       	brcc	.+2      	; 0x3d48 <__vector_11+0x72>
    3d46:	63 c0       	rjmp	.+198    	; 0x3e0e <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	94 e0       	ldi	r25, 0x04	; 4
    3d4c:	21 e0       	ldi	r18, 0x01	; 1
    3d4e:	fc 01       	movw	r30, r24
    3d50:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    3d52:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <rtc_data+0x6>
    3d56:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <rtc_data+0x7>
    3d5a:	89 2b       	or	r24, r25
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <__vector_11+0x8a>
    3d5e:	57 c0       	rjmp	.+174    	; 0x3e0e <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    3d60:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <rtc_data>
    3d64:	90 91 a0 22 	lds	r25, 0x22A0	; 0x8022a0 <rtc_data+0x1>
    3d68:	cc 01       	movw	r24, r24
    3d6a:	a0 e0       	ldi	r26, 0x00	; 0
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	ac 01       	movw	r20, r24
    3d70:	33 27       	eor	r19, r19
    3d72:	22 27       	eor	r18, r18
					| RTC.CNT;
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	94 e0       	ldi	r25, 0x04	; 4
    3d78:	fc 01       	movw	r30, r24
    3d7a:	80 85       	ldd	r24, Z+8	; 0x08
    3d7c:	91 85       	ldd	r25, Z+9	; 0x09
    3d7e:	cc 01       	movw	r24, r24
    3d80:	a0 e0       	ldi	r26, 0x00	; 0
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    3d84:	82 2b       	or	r24, r18
    3d86:	93 2b       	or	r25, r19
    3d88:	a4 2b       	or	r26, r20
    3d8a:	b5 2b       	or	r27, r21
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	9a 83       	std	Y+2, r25	; 0x02
    3d90:	ab 83       	std	Y+3, r26	; 0x03
    3d92:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    3d94:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <rtc_data+0x2>
    3d98:	90 91 a2 22 	lds	r25, 0x22A2	; 0x8022a2 <rtc_data+0x3>
    3d9c:	cc 01       	movw	r24, r24
    3d9e:	a0 e0       	ldi	r26, 0x00	; 0
    3da0:	b0 e0       	ldi	r27, 0x00	; 0
    3da2:	ac 01       	movw	r20, r24
    3da4:	33 27       	eor	r19, r19
    3da6:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    3da8:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <rtc_data+0x4>
    3dac:	90 91 a4 22 	lds	r25, 0x22A4	; 0x8022a4 <rtc_data+0x5>
    3db0:	cc 01       	movw	r24, r24
    3db2:	a0 e0       	ldi	r26, 0x00	; 0
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    3db6:	82 2b       	or	r24, r18
    3db8:	93 2b       	or	r25, r19
    3dba:	a4 2b       	or	r26, r20
    3dbc:	b5 2b       	or	r27, r21
    3dbe:	8d 83       	std	Y+5, r24	; 0x05
    3dc0:	9e 83       	std	Y+6, r25	; 0x06
    3dc2:	af 83       	std	Y+7, r26	; 0x07
    3dc4:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    3dc6:	2d 81       	ldd	r18, Y+5	; 0x05
    3dc8:	3e 81       	ldd	r19, Y+6	; 0x06
    3dca:	4f 81       	ldd	r20, Y+7	; 0x07
    3dcc:	58 85       	ldd	r21, Y+8	; 0x08
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
    3dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd2:	ab 81       	ldd	r26, Y+3	; 0x03
    3dd4:	bc 81       	ldd	r27, Y+4	; 0x04
    3dd6:	28 17       	cp	r18, r24
    3dd8:	39 07       	cpc	r19, r25
    3dda:	4a 07       	cpc	r20, r26
    3ddc:	5b 07       	cpc	r21, r27
    3dde:	58 f0       	brcs	.+22     	; 0x3df6 <__vector_11+0x120>
				count = alarm + 1;
    3de0:	8d 81       	ldd	r24, Y+5	; 0x05
    3de2:	9e 81       	ldd	r25, Y+6	; 0x06
    3de4:	af 81       	ldd	r26, Y+7	; 0x07
    3de6:	b8 85       	ldd	r27, Y+8	; 0x08
    3de8:	01 96       	adiw	r24, 0x01	; 1
    3dea:	a1 1d       	adc	r26, r1
    3dec:	b1 1d       	adc	r27, r1
    3dee:	89 83       	std	Y+1, r24	; 0x01
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	ab 83       	std	Y+3, r26	; 0x03
    3df4:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    3df6:	20 91 a5 22 	lds	r18, 0x22A5	; 0x8022a5 <rtc_data+0x6>
    3dfa:	30 91 a6 22 	lds	r19, 0x22A6	; 0x8022a6 <rtc_data+0x7>
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
    3e02:	ab 81       	ldd	r26, Y+3	; 0x03
    3e04:	bc 81       	ldd	r27, Y+4	; 0x04
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	f9 01       	movw	r30, r18
    3e0c:	19 95       	eicall
		}
	}
}
    3e0e:	00 00       	nop
    3e10:	28 96       	adiw	r28, 0x08	; 8
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	de bf       	out	0x3e, r29	; 62
    3e16:	df 91       	pop	r29
    3e18:	cf 91       	pop	r28
    3e1a:	ff 91       	pop	r31
    3e1c:	ef 91       	pop	r30
    3e1e:	bf 91       	pop	r27
    3e20:	af 91       	pop	r26
    3e22:	9f 91       	pop	r25
    3e24:	8f 91       	pop	r24
    3e26:	7f 91       	pop	r23
    3e28:	6f 91       	pop	r22
    3e2a:	5f 91       	pop	r21
    3e2c:	4f 91       	pop	r20
    3e2e:	3f 91       	pop	r19
    3e30:	2f 91       	pop	r18
    3e32:	0f 90       	pop	r0
    3e34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e38:	0f 90       	pop	r0
    3e3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e3e:	0f 90       	pop	r0
    3e40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e44:	0f 90       	pop	r0
    3e46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e4a:	0f 90       	pop	r0
    3e4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3e50:	0f 90       	pop	r0
    3e52:	1f 90       	pop	r1
    3e54:	18 95       	reti

00003e56 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    3e56:	1f 92       	push	r1
    3e58:	0f 92       	push	r0
    3e5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3e5e:	0f 92       	push	r0
    3e60:	11 24       	eor	r1, r1
    3e62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e66:	0f 92       	push	r0
    3e68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e70:	0f 92       	push	r0
    3e72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e7a:	0f 92       	push	r0
    3e7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e84:	0f 92       	push	r0
    3e86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e8a:	2f 93       	push	r18
    3e8c:	3f 93       	push	r19
    3e8e:	4f 93       	push	r20
    3e90:	5f 93       	push	r21
    3e92:	6f 93       	push	r22
    3e94:	7f 93       	push	r23
    3e96:	8f 93       	push	r24
    3e98:	9f 93       	push	r25
    3e9a:	af 93       	push	r26
    3e9c:	bf 93       	push	r27
    3e9e:	ef 93       	push	r30
    3ea0:	ff 93       	push	r31
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    3eaa:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <tc_tcc0_ovf_callback>
    3eae:	90 91 09 22 	lds	r25, 0x2209	; 0x802209 <tc_tcc0_ovf_callback+0x1>
    3eb2:	89 2b       	or	r24, r25
    3eb4:	31 f0       	breq	.+12     	; 0x3ec2 <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    3eb6:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <tc_tcc0_ovf_callback>
    3eba:	90 91 09 22 	lds	r25, 0x2209	; 0x802209 <tc_tcc0_ovf_callback+0x1>
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	19 95       	eicall
	}
}
    3ec2:	00 00       	nop
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	ff 91       	pop	r31
    3eca:	ef 91       	pop	r30
    3ecc:	bf 91       	pop	r27
    3ece:	af 91       	pop	r26
    3ed0:	9f 91       	pop	r25
    3ed2:	8f 91       	pop	r24
    3ed4:	7f 91       	pop	r23
    3ed6:	6f 91       	pop	r22
    3ed8:	5f 91       	pop	r21
    3eda:	4f 91       	pop	r20
    3edc:	3f 91       	pop	r19
    3ede:	2f 91       	pop	r18
    3ee0:	0f 90       	pop	r0
    3ee2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ee6:	0f 90       	pop	r0
    3ee8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3eec:	0f 90       	pop	r0
    3eee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ef2:	0f 90       	pop	r0
    3ef4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ef8:	0f 90       	pop	r0
    3efa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3efe:	0f 90       	pop	r0
    3f00:	1f 90       	pop	r1
    3f02:	18 95       	reti

00003f04 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    3f04:	1f 92       	push	r1
    3f06:	0f 92       	push	r0
    3f08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3f0c:	0f 92       	push	r0
    3f0e:	11 24       	eor	r1, r1
    3f10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f14:	0f 92       	push	r0
    3f16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f1e:	0f 92       	push	r0
    3f20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f28:	0f 92       	push	r0
    3f2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f32:	0f 92       	push	r0
    3f34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f38:	2f 93       	push	r18
    3f3a:	3f 93       	push	r19
    3f3c:	4f 93       	push	r20
    3f3e:	5f 93       	push	r21
    3f40:	6f 93       	push	r22
    3f42:	7f 93       	push	r23
    3f44:	8f 93       	push	r24
    3f46:	9f 93       	push	r25
    3f48:	af 93       	push	r26
    3f4a:	bf 93       	push	r27
    3f4c:	ef 93       	push	r30
    3f4e:	ff 93       	push	r31
    3f50:	cf 93       	push	r28
    3f52:	df 93       	push	r29
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    3f58:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <tc_tcc0_err_callback>
    3f5c:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <tc_tcc0_err_callback+0x1>
    3f60:	89 2b       	or	r24, r25
    3f62:	31 f0       	breq	.+12     	; 0x3f70 <__vector_15+0x6c>
		tc_tcc0_err_callback();
    3f64:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <tc_tcc0_err_callback>
    3f68:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <tc_tcc0_err_callback+0x1>
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	19 95       	eicall
	}
}
    3f70:	00 00       	nop
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	ff 91       	pop	r31
    3f78:	ef 91       	pop	r30
    3f7a:	bf 91       	pop	r27
    3f7c:	af 91       	pop	r26
    3f7e:	9f 91       	pop	r25
    3f80:	8f 91       	pop	r24
    3f82:	7f 91       	pop	r23
    3f84:	6f 91       	pop	r22
    3f86:	5f 91       	pop	r21
    3f88:	4f 91       	pop	r20
    3f8a:	3f 91       	pop	r19
    3f8c:	2f 91       	pop	r18
    3f8e:	0f 90       	pop	r0
    3f90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f94:	0f 90       	pop	r0
    3f96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f9a:	0f 90       	pop	r0
    3f9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3fa0:	0f 90       	pop	r0
    3fa2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3fa6:	0f 90       	pop	r0
    3fa8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3fac:	0f 90       	pop	r0
    3fae:	1f 90       	pop	r1
    3fb0:	18 95       	reti

00003fb2 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    3fb2:	1f 92       	push	r1
    3fb4:	0f 92       	push	r0
    3fb6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3fba:	0f 92       	push	r0
    3fbc:	11 24       	eor	r1, r1
    3fbe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3fc2:	0f 92       	push	r0
    3fc4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3fc8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3fcc:	0f 92       	push	r0
    3fce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3fd2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3fd6:	0f 92       	push	r0
    3fd8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3fdc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3fe0:	0f 92       	push	r0
    3fe2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3fe6:	2f 93       	push	r18
    3fe8:	3f 93       	push	r19
    3fea:	4f 93       	push	r20
    3fec:	5f 93       	push	r21
    3fee:	6f 93       	push	r22
    3ff0:	7f 93       	push	r23
    3ff2:	8f 93       	push	r24
    3ff4:	9f 93       	push	r25
    3ff6:	af 93       	push	r26
    3ff8:	bf 93       	push	r27
    3ffa:	ef 93       	push	r30
    3ffc:	ff 93       	push	r31
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    4006:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <tc_tcc0_cca_callback>
    400a:	90 91 0d 22 	lds	r25, 0x220D	; 0x80220d <tc_tcc0_cca_callback+0x1>
    400e:	89 2b       	or	r24, r25
    4010:	31 f0       	breq	.+12     	; 0x401e <__stack+0x1f>
		tc_tcc0_cca_callback();
    4012:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <tc_tcc0_cca_callback>
    4016:	90 91 0d 22 	lds	r25, 0x220D	; 0x80220d <tc_tcc0_cca_callback+0x1>
    401a:	fc 01       	movw	r30, r24
    401c:	19 95       	eicall
	}
}
    401e:	00 00       	nop
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	ff 91       	pop	r31
    4026:	ef 91       	pop	r30
    4028:	bf 91       	pop	r27
    402a:	af 91       	pop	r26
    402c:	9f 91       	pop	r25
    402e:	8f 91       	pop	r24
    4030:	7f 91       	pop	r23
    4032:	6f 91       	pop	r22
    4034:	5f 91       	pop	r21
    4036:	4f 91       	pop	r20
    4038:	3f 91       	pop	r19
    403a:	2f 91       	pop	r18
    403c:	0f 90       	pop	r0
    403e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4042:	0f 90       	pop	r0
    4044:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4048:	0f 90       	pop	r0
    404a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    404e:	0f 90       	pop	r0
    4050:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4054:	0f 90       	pop	r0
    4056:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    405a:	0f 90       	pop	r0
    405c:	1f 90       	pop	r1
    405e:	18 95       	reti

00004060 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    4060:	1f 92       	push	r1
    4062:	0f 92       	push	r0
    4064:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4068:	0f 92       	push	r0
    406a:	11 24       	eor	r1, r1
    406c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4070:	0f 92       	push	r0
    4072:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4076:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    407a:	0f 92       	push	r0
    407c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4080:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4084:	0f 92       	push	r0
    4086:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    408a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    408e:	0f 92       	push	r0
    4090:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4094:	2f 93       	push	r18
    4096:	3f 93       	push	r19
    4098:	4f 93       	push	r20
    409a:	5f 93       	push	r21
    409c:	6f 93       	push	r22
    409e:	7f 93       	push	r23
    40a0:	8f 93       	push	r24
    40a2:	9f 93       	push	r25
    40a4:	af 93       	push	r26
    40a6:	bf 93       	push	r27
    40a8:	ef 93       	push	r30
    40aa:	ff 93       	push	r31
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    40b4:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <tc_tcc0_ccb_callback>
    40b8:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <tc_tcc0_ccb_callback+0x1>
    40bc:	89 2b       	or	r24, r25
    40be:	31 f0       	breq	.+12     	; 0x40cc <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    40c0:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <tc_tcc0_ccb_callback>
    40c4:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <tc_tcc0_ccb_callback+0x1>
    40c8:	fc 01       	movw	r30, r24
    40ca:	19 95       	eicall
	}
}
    40cc:	00 00       	nop
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	ff 91       	pop	r31
    40d4:	ef 91       	pop	r30
    40d6:	bf 91       	pop	r27
    40d8:	af 91       	pop	r26
    40da:	9f 91       	pop	r25
    40dc:	8f 91       	pop	r24
    40de:	7f 91       	pop	r23
    40e0:	6f 91       	pop	r22
    40e2:	5f 91       	pop	r21
    40e4:	4f 91       	pop	r20
    40e6:	3f 91       	pop	r19
    40e8:	2f 91       	pop	r18
    40ea:	0f 90       	pop	r0
    40ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40f0:	0f 90       	pop	r0
    40f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40f6:	0f 90       	pop	r0
    40f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40fc:	0f 90       	pop	r0
    40fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4102:	0f 90       	pop	r0
    4104:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4108:	0f 90       	pop	r0
    410a:	1f 90       	pop	r1
    410c:	18 95       	reti

0000410e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    410e:	1f 92       	push	r1
    4110:	0f 92       	push	r0
    4112:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4116:	0f 92       	push	r0
    4118:	11 24       	eor	r1, r1
    411a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    411e:	0f 92       	push	r0
    4120:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4124:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4128:	0f 92       	push	r0
    412a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    412e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4132:	0f 92       	push	r0
    4134:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4138:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    413c:	0f 92       	push	r0
    413e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4142:	2f 93       	push	r18
    4144:	3f 93       	push	r19
    4146:	4f 93       	push	r20
    4148:	5f 93       	push	r21
    414a:	6f 93       	push	r22
    414c:	7f 93       	push	r23
    414e:	8f 93       	push	r24
    4150:	9f 93       	push	r25
    4152:	af 93       	push	r26
    4154:	bf 93       	push	r27
    4156:	ef 93       	push	r30
    4158:	ff 93       	push	r31
    415a:	cf 93       	push	r28
    415c:	df 93       	push	r29
    415e:	cd b7       	in	r28, 0x3d	; 61
    4160:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    4162:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <tc_tcc0_ccc_callback>
    4166:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <tc_tcc0_ccc_callback+0x1>
    416a:	89 2b       	or	r24, r25
    416c:	31 f0       	breq	.+12     	; 0x417a <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    416e:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <tc_tcc0_ccc_callback>
    4172:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <tc_tcc0_ccc_callback+0x1>
    4176:	fc 01       	movw	r30, r24
    4178:	19 95       	eicall
	}
}
    417a:	00 00       	nop
    417c:	df 91       	pop	r29
    417e:	cf 91       	pop	r28
    4180:	ff 91       	pop	r31
    4182:	ef 91       	pop	r30
    4184:	bf 91       	pop	r27
    4186:	af 91       	pop	r26
    4188:	9f 91       	pop	r25
    418a:	8f 91       	pop	r24
    418c:	7f 91       	pop	r23
    418e:	6f 91       	pop	r22
    4190:	5f 91       	pop	r21
    4192:	4f 91       	pop	r20
    4194:	3f 91       	pop	r19
    4196:	2f 91       	pop	r18
    4198:	0f 90       	pop	r0
    419a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    419e:	0f 90       	pop	r0
    41a0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    41a4:	0f 90       	pop	r0
    41a6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    41aa:	0f 90       	pop	r0
    41ac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    41b0:	0f 90       	pop	r0
    41b2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    41b6:	0f 90       	pop	r0
    41b8:	1f 90       	pop	r1
    41ba:	18 95       	reti

000041bc <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    41bc:	1f 92       	push	r1
    41be:	0f 92       	push	r0
    41c0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    41c4:	0f 92       	push	r0
    41c6:	11 24       	eor	r1, r1
    41c8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    41cc:	0f 92       	push	r0
    41ce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    41d2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    41d6:	0f 92       	push	r0
    41d8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    41dc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    41e0:	0f 92       	push	r0
    41e2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    41e6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    41ea:	0f 92       	push	r0
    41ec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    41f0:	2f 93       	push	r18
    41f2:	3f 93       	push	r19
    41f4:	4f 93       	push	r20
    41f6:	5f 93       	push	r21
    41f8:	6f 93       	push	r22
    41fa:	7f 93       	push	r23
    41fc:	8f 93       	push	r24
    41fe:	9f 93       	push	r25
    4200:	af 93       	push	r26
    4202:	bf 93       	push	r27
    4204:	ef 93       	push	r30
    4206:	ff 93       	push	r31
    4208:	cf 93       	push	r28
    420a:	df 93       	push	r29
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    4210:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <tc_tcc0_ccd_callback>
    4214:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <tc_tcc0_ccd_callback+0x1>
    4218:	89 2b       	or	r24, r25
    421a:	31 f0       	breq	.+12     	; 0x4228 <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    421c:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <tc_tcc0_ccd_callback>
    4220:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <tc_tcc0_ccd_callback+0x1>
    4224:	fc 01       	movw	r30, r24
    4226:	19 95       	eicall
	}
}
    4228:	00 00       	nop
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	ff 91       	pop	r31
    4230:	ef 91       	pop	r30
    4232:	bf 91       	pop	r27
    4234:	af 91       	pop	r26
    4236:	9f 91       	pop	r25
    4238:	8f 91       	pop	r24
    423a:	7f 91       	pop	r23
    423c:	6f 91       	pop	r22
    423e:	5f 91       	pop	r21
    4240:	4f 91       	pop	r20
    4242:	3f 91       	pop	r19
    4244:	2f 91       	pop	r18
    4246:	0f 90       	pop	r0
    4248:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    424c:	0f 90       	pop	r0
    424e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4252:	0f 90       	pop	r0
    4254:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4258:	0f 90       	pop	r0
    425a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    425e:	0f 90       	pop	r0
    4260:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4264:	0f 90       	pop	r0
    4266:	1f 90       	pop	r1
    4268:	18 95       	reti

0000426a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    426a:	1f 92       	push	r1
    426c:	0f 92       	push	r0
    426e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4272:	0f 92       	push	r0
    4274:	11 24       	eor	r1, r1
    4276:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    427a:	0f 92       	push	r0
    427c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4280:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4284:	0f 92       	push	r0
    4286:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    428a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    428e:	0f 92       	push	r0
    4290:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4294:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4298:	0f 92       	push	r0
    429a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    429e:	2f 93       	push	r18
    42a0:	3f 93       	push	r19
    42a2:	4f 93       	push	r20
    42a4:	5f 93       	push	r21
    42a6:	6f 93       	push	r22
    42a8:	7f 93       	push	r23
    42aa:	8f 93       	push	r24
    42ac:	9f 93       	push	r25
    42ae:	af 93       	push	r26
    42b0:	bf 93       	push	r27
    42b2:	ef 93       	push	r30
    42b4:	ff 93       	push	r31
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    42be:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <tc_tcc1_ovf_callback>
    42c2:	90 91 15 22 	lds	r25, 0x2215	; 0x802215 <tc_tcc1_ovf_callback+0x1>
    42c6:	89 2b       	or	r24, r25
    42c8:	31 f0       	breq	.+12     	; 0x42d6 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    42ca:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <tc_tcc1_ovf_callback>
    42ce:	90 91 15 22 	lds	r25, 0x2215	; 0x802215 <tc_tcc1_ovf_callback+0x1>
    42d2:	fc 01       	movw	r30, r24
    42d4:	19 95       	eicall
	}
}
    42d6:	00 00       	nop
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	ff 91       	pop	r31
    42de:	ef 91       	pop	r30
    42e0:	bf 91       	pop	r27
    42e2:	af 91       	pop	r26
    42e4:	9f 91       	pop	r25
    42e6:	8f 91       	pop	r24
    42e8:	7f 91       	pop	r23
    42ea:	6f 91       	pop	r22
    42ec:	5f 91       	pop	r21
    42ee:	4f 91       	pop	r20
    42f0:	3f 91       	pop	r19
    42f2:	2f 91       	pop	r18
    42f4:	0f 90       	pop	r0
    42f6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    42fa:	0f 90       	pop	r0
    42fc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4300:	0f 90       	pop	r0
    4302:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4306:	0f 90       	pop	r0
    4308:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    430c:	0f 90       	pop	r0
    430e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4312:	0f 90       	pop	r0
    4314:	1f 90       	pop	r1
    4316:	18 95       	reti

00004318 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    4318:	1f 92       	push	r1
    431a:	0f 92       	push	r0
    431c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4320:	0f 92       	push	r0
    4322:	11 24       	eor	r1, r1
    4324:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4328:	0f 92       	push	r0
    432a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    432e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4332:	0f 92       	push	r0
    4334:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4338:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    433c:	0f 92       	push	r0
    433e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4342:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4346:	0f 92       	push	r0
    4348:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    434c:	2f 93       	push	r18
    434e:	3f 93       	push	r19
    4350:	4f 93       	push	r20
    4352:	5f 93       	push	r21
    4354:	6f 93       	push	r22
    4356:	7f 93       	push	r23
    4358:	8f 93       	push	r24
    435a:	9f 93       	push	r25
    435c:	af 93       	push	r26
    435e:	bf 93       	push	r27
    4360:	ef 93       	push	r30
    4362:	ff 93       	push	r31
    4364:	cf 93       	push	r28
    4366:	df 93       	push	r29
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    436c:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <tc_tcc1_err_callback>
    4370:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <tc_tcc1_err_callback+0x1>
    4374:	89 2b       	or	r24, r25
    4376:	31 f0       	breq	.+12     	; 0x4384 <__vector_21+0x6c>
		tc_tcc1_err_callback();
    4378:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <tc_tcc1_err_callback>
    437c:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <tc_tcc1_err_callback+0x1>
    4380:	fc 01       	movw	r30, r24
    4382:	19 95       	eicall
	}
}
    4384:	00 00       	nop
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	ff 91       	pop	r31
    438c:	ef 91       	pop	r30
    438e:	bf 91       	pop	r27
    4390:	af 91       	pop	r26
    4392:	9f 91       	pop	r25
    4394:	8f 91       	pop	r24
    4396:	7f 91       	pop	r23
    4398:	6f 91       	pop	r22
    439a:	5f 91       	pop	r21
    439c:	4f 91       	pop	r20
    439e:	3f 91       	pop	r19
    43a0:	2f 91       	pop	r18
    43a2:	0f 90       	pop	r0
    43a4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43a8:	0f 90       	pop	r0
    43aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43ae:	0f 90       	pop	r0
    43b0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    43b4:	0f 90       	pop	r0
    43b6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    43ba:	0f 90       	pop	r0
    43bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    43c0:	0f 90       	pop	r0
    43c2:	1f 90       	pop	r1
    43c4:	18 95       	reti

000043c6 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    43c6:	1f 92       	push	r1
    43c8:	0f 92       	push	r0
    43ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    43ce:	0f 92       	push	r0
    43d0:	11 24       	eor	r1, r1
    43d2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    43d6:	0f 92       	push	r0
    43d8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    43dc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    43e0:	0f 92       	push	r0
    43e2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    43e6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43ea:	0f 92       	push	r0
    43ec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43f0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43f4:	0f 92       	push	r0
    43f6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43fa:	2f 93       	push	r18
    43fc:	3f 93       	push	r19
    43fe:	4f 93       	push	r20
    4400:	5f 93       	push	r21
    4402:	6f 93       	push	r22
    4404:	7f 93       	push	r23
    4406:	8f 93       	push	r24
    4408:	9f 93       	push	r25
    440a:	af 93       	push	r26
    440c:	bf 93       	push	r27
    440e:	ef 93       	push	r30
    4410:	ff 93       	push	r31
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    441a:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <tc_tcc1_cca_callback>
    441e:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <tc_tcc1_cca_callback+0x1>
    4422:	89 2b       	or	r24, r25
    4424:	31 f0       	breq	.+12     	; 0x4432 <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    4426:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <tc_tcc1_cca_callback>
    442a:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <tc_tcc1_cca_callback+0x1>
    442e:	fc 01       	movw	r30, r24
    4430:	19 95       	eicall
	}
}
    4432:	00 00       	nop
    4434:	df 91       	pop	r29
    4436:	cf 91       	pop	r28
    4438:	ff 91       	pop	r31
    443a:	ef 91       	pop	r30
    443c:	bf 91       	pop	r27
    443e:	af 91       	pop	r26
    4440:	9f 91       	pop	r25
    4442:	8f 91       	pop	r24
    4444:	7f 91       	pop	r23
    4446:	6f 91       	pop	r22
    4448:	5f 91       	pop	r21
    444a:	4f 91       	pop	r20
    444c:	3f 91       	pop	r19
    444e:	2f 91       	pop	r18
    4450:	0f 90       	pop	r0
    4452:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4456:	0f 90       	pop	r0
    4458:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    445c:	0f 90       	pop	r0
    445e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4462:	0f 90       	pop	r0
    4464:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4468:	0f 90       	pop	r0
    446a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    446e:	0f 90       	pop	r0
    4470:	1f 90       	pop	r1
    4472:	18 95       	reti

00004474 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    4474:	1f 92       	push	r1
    4476:	0f 92       	push	r0
    4478:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    447c:	0f 92       	push	r0
    447e:	11 24       	eor	r1, r1
    4480:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4484:	0f 92       	push	r0
    4486:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    448a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    448e:	0f 92       	push	r0
    4490:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4494:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4498:	0f 92       	push	r0
    449a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    449e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    44a2:	0f 92       	push	r0
    44a4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    44a8:	2f 93       	push	r18
    44aa:	3f 93       	push	r19
    44ac:	4f 93       	push	r20
    44ae:	5f 93       	push	r21
    44b0:	6f 93       	push	r22
    44b2:	7f 93       	push	r23
    44b4:	8f 93       	push	r24
    44b6:	9f 93       	push	r25
    44b8:	af 93       	push	r26
    44ba:	bf 93       	push	r27
    44bc:	ef 93       	push	r30
    44be:	ff 93       	push	r31
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    44c8:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <tc_tcc1_ccb_callback>
    44cc:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <tc_tcc1_ccb_callback+0x1>
    44d0:	89 2b       	or	r24, r25
    44d2:	31 f0       	breq	.+12     	; 0x44e0 <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    44d4:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <tc_tcc1_ccb_callback>
    44d8:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <tc_tcc1_ccb_callback+0x1>
    44dc:	fc 01       	movw	r30, r24
    44de:	19 95       	eicall
	}
}
    44e0:	00 00       	nop
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	ff 91       	pop	r31
    44e8:	ef 91       	pop	r30
    44ea:	bf 91       	pop	r27
    44ec:	af 91       	pop	r26
    44ee:	9f 91       	pop	r25
    44f0:	8f 91       	pop	r24
    44f2:	7f 91       	pop	r23
    44f4:	6f 91       	pop	r22
    44f6:	5f 91       	pop	r21
    44f8:	4f 91       	pop	r20
    44fa:	3f 91       	pop	r19
    44fc:	2f 91       	pop	r18
    44fe:	0f 90       	pop	r0
    4500:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4504:	0f 90       	pop	r0
    4506:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    450a:	0f 90       	pop	r0
    450c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4510:	0f 90       	pop	r0
    4512:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4516:	0f 90       	pop	r0
    4518:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    451c:	0f 90       	pop	r0
    451e:	1f 90       	pop	r1
    4520:	18 95       	reti

00004522 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    4522:	1f 92       	push	r1
    4524:	0f 92       	push	r0
    4526:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    452a:	0f 92       	push	r0
    452c:	11 24       	eor	r1, r1
    452e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4532:	0f 92       	push	r0
    4534:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4538:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    453c:	0f 92       	push	r0
    453e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4542:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4546:	0f 92       	push	r0
    4548:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    454c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4550:	0f 92       	push	r0
    4552:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4556:	2f 93       	push	r18
    4558:	3f 93       	push	r19
    455a:	4f 93       	push	r20
    455c:	5f 93       	push	r21
    455e:	6f 93       	push	r22
    4560:	7f 93       	push	r23
    4562:	8f 93       	push	r24
    4564:	9f 93       	push	r25
    4566:	af 93       	push	r26
    4568:	bf 93       	push	r27
    456a:	ef 93       	push	r30
    456c:	ff 93       	push	r31
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    4576:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <tc_tcd0_ovf_callback>
    457a:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <tc_tcd0_ovf_callback+0x1>
    457e:	89 2b       	or	r24, r25
    4580:	31 f0       	breq	.+12     	; 0x458e <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    4582:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <tc_tcd0_ovf_callback>
    4586:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <tc_tcd0_ovf_callback+0x1>
    458a:	fc 01       	movw	r30, r24
    458c:	19 95       	eicall
	}
}
    458e:	00 00       	nop
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	ff 91       	pop	r31
    4596:	ef 91       	pop	r30
    4598:	bf 91       	pop	r27
    459a:	af 91       	pop	r26
    459c:	9f 91       	pop	r25
    459e:	8f 91       	pop	r24
    45a0:	7f 91       	pop	r23
    45a2:	6f 91       	pop	r22
    45a4:	5f 91       	pop	r21
    45a6:	4f 91       	pop	r20
    45a8:	3f 91       	pop	r19
    45aa:	2f 91       	pop	r18
    45ac:	0f 90       	pop	r0
    45ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    45b2:	0f 90       	pop	r0
    45b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45b8:	0f 90       	pop	r0
    45ba:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45be:	0f 90       	pop	r0
    45c0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    45c4:	0f 90       	pop	r0
    45c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    45ca:	0f 90       	pop	r0
    45cc:	1f 90       	pop	r1
    45ce:	18 95       	reti

000045d0 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    45d0:	1f 92       	push	r1
    45d2:	0f 92       	push	r0
    45d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    45d8:	0f 92       	push	r0
    45da:	11 24       	eor	r1, r1
    45dc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    45e0:	0f 92       	push	r0
    45e2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    45e6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45ea:	0f 92       	push	r0
    45ec:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45f4:	0f 92       	push	r0
    45f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45fa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    45fe:	0f 92       	push	r0
    4600:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4604:	2f 93       	push	r18
    4606:	3f 93       	push	r19
    4608:	4f 93       	push	r20
    460a:	5f 93       	push	r21
    460c:	6f 93       	push	r22
    460e:	7f 93       	push	r23
    4610:	8f 93       	push	r24
    4612:	9f 93       	push	r25
    4614:	af 93       	push	r26
    4616:	bf 93       	push	r27
    4618:	ef 93       	push	r30
    461a:	ff 93       	push	r31
    461c:	cf 93       	push	r28
    461e:	df 93       	push	r29
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    4624:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <tc_tcd0_err_callback>
    4628:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <tc_tcd0_err_callback+0x1>
    462c:	89 2b       	or	r24, r25
    462e:	31 f0       	breq	.+12     	; 0x463c <__vector_78+0x6c>
		tc_tcd0_err_callback();
    4630:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <tc_tcd0_err_callback>
    4634:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <tc_tcd0_err_callback+0x1>
    4638:	fc 01       	movw	r30, r24
    463a:	19 95       	eicall
	}
}
    463c:	00 00       	nop
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	ff 91       	pop	r31
    4644:	ef 91       	pop	r30
    4646:	bf 91       	pop	r27
    4648:	af 91       	pop	r26
    464a:	9f 91       	pop	r25
    464c:	8f 91       	pop	r24
    464e:	7f 91       	pop	r23
    4650:	6f 91       	pop	r22
    4652:	5f 91       	pop	r21
    4654:	4f 91       	pop	r20
    4656:	3f 91       	pop	r19
    4658:	2f 91       	pop	r18
    465a:	0f 90       	pop	r0
    465c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4660:	0f 90       	pop	r0
    4662:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4666:	0f 90       	pop	r0
    4668:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    466c:	0f 90       	pop	r0
    466e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4672:	0f 90       	pop	r0
    4674:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4678:	0f 90       	pop	r0
    467a:	1f 90       	pop	r1
    467c:	18 95       	reti

0000467e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    467e:	1f 92       	push	r1
    4680:	0f 92       	push	r0
    4682:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4686:	0f 92       	push	r0
    4688:	11 24       	eor	r1, r1
    468a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    468e:	0f 92       	push	r0
    4690:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4694:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4698:	0f 92       	push	r0
    469a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    469e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    46a2:	0f 92       	push	r0
    46a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    46a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    46ac:	0f 92       	push	r0
    46ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    46b2:	2f 93       	push	r18
    46b4:	3f 93       	push	r19
    46b6:	4f 93       	push	r20
    46b8:	5f 93       	push	r21
    46ba:	6f 93       	push	r22
    46bc:	7f 93       	push	r23
    46be:	8f 93       	push	r24
    46c0:	9f 93       	push	r25
    46c2:	af 93       	push	r26
    46c4:	bf 93       	push	r27
    46c6:	ef 93       	push	r30
    46c8:	ff 93       	push	r31
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    46d2:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <tc_tcd0_cca_callback>
    46d6:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <tc_tcd0_cca_callback+0x1>
    46da:	89 2b       	or	r24, r25
    46dc:	31 f0       	breq	.+12     	; 0x46ea <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    46de:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <tc_tcd0_cca_callback>
    46e2:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <tc_tcd0_cca_callback+0x1>
    46e6:	fc 01       	movw	r30, r24
    46e8:	19 95       	eicall
	}
}
    46ea:	00 00       	nop
    46ec:	df 91       	pop	r29
    46ee:	cf 91       	pop	r28
    46f0:	ff 91       	pop	r31
    46f2:	ef 91       	pop	r30
    46f4:	bf 91       	pop	r27
    46f6:	af 91       	pop	r26
    46f8:	9f 91       	pop	r25
    46fa:	8f 91       	pop	r24
    46fc:	7f 91       	pop	r23
    46fe:	6f 91       	pop	r22
    4700:	5f 91       	pop	r21
    4702:	4f 91       	pop	r20
    4704:	3f 91       	pop	r19
    4706:	2f 91       	pop	r18
    4708:	0f 90       	pop	r0
    470a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    470e:	0f 90       	pop	r0
    4710:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4714:	0f 90       	pop	r0
    4716:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    471a:	0f 90       	pop	r0
    471c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4720:	0f 90       	pop	r0
    4722:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4726:	0f 90       	pop	r0
    4728:	1f 90       	pop	r1
    472a:	18 95       	reti

0000472c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    472c:	1f 92       	push	r1
    472e:	0f 92       	push	r0
    4730:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4734:	0f 92       	push	r0
    4736:	11 24       	eor	r1, r1
    4738:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    473c:	0f 92       	push	r0
    473e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4742:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4746:	0f 92       	push	r0
    4748:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    474c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4750:	0f 92       	push	r0
    4752:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4756:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    475a:	0f 92       	push	r0
    475c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4760:	2f 93       	push	r18
    4762:	3f 93       	push	r19
    4764:	4f 93       	push	r20
    4766:	5f 93       	push	r21
    4768:	6f 93       	push	r22
    476a:	7f 93       	push	r23
    476c:	8f 93       	push	r24
    476e:	9f 93       	push	r25
    4770:	af 93       	push	r26
    4772:	bf 93       	push	r27
    4774:	ef 93       	push	r30
    4776:	ff 93       	push	r31
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    4780:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <tc_tcd0_ccb_callback>
    4784:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <tc_tcd0_ccb_callback+0x1>
    4788:	89 2b       	or	r24, r25
    478a:	31 f0       	breq	.+12     	; 0x4798 <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    478c:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <tc_tcd0_ccb_callback>
    4790:	90 91 23 22 	lds	r25, 0x2223	; 0x802223 <tc_tcd0_ccb_callback+0x1>
    4794:	fc 01       	movw	r30, r24
    4796:	19 95       	eicall
	}
}
    4798:	00 00       	nop
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	ff 91       	pop	r31
    47a0:	ef 91       	pop	r30
    47a2:	bf 91       	pop	r27
    47a4:	af 91       	pop	r26
    47a6:	9f 91       	pop	r25
    47a8:	8f 91       	pop	r24
    47aa:	7f 91       	pop	r23
    47ac:	6f 91       	pop	r22
    47ae:	5f 91       	pop	r21
    47b0:	4f 91       	pop	r20
    47b2:	3f 91       	pop	r19
    47b4:	2f 91       	pop	r18
    47b6:	0f 90       	pop	r0
    47b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47bc:	0f 90       	pop	r0
    47be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    47c2:	0f 90       	pop	r0
    47c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47c8:	0f 90       	pop	r0
    47ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47ce:	0f 90       	pop	r0
    47d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47d4:	0f 90       	pop	r0
    47d6:	1f 90       	pop	r1
    47d8:	18 95       	reti

000047da <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    47da:	1f 92       	push	r1
    47dc:	0f 92       	push	r0
    47de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47e2:	0f 92       	push	r0
    47e4:	11 24       	eor	r1, r1
    47e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47ea:	0f 92       	push	r0
    47ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47f4:	0f 92       	push	r0
    47f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    47fe:	0f 92       	push	r0
    4800:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4804:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4808:	0f 92       	push	r0
    480a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    480e:	2f 93       	push	r18
    4810:	3f 93       	push	r19
    4812:	4f 93       	push	r20
    4814:	5f 93       	push	r21
    4816:	6f 93       	push	r22
    4818:	7f 93       	push	r23
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	af 93       	push	r26
    4820:	bf 93       	push	r27
    4822:	ef 93       	push	r30
    4824:	ff 93       	push	r31
    4826:	cf 93       	push	r28
    4828:	df 93       	push	r29
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    482e:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <tc_tcd0_ccc_callback>
    4832:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <tc_tcd0_ccc_callback+0x1>
    4836:	89 2b       	or	r24, r25
    4838:	31 f0       	breq	.+12     	; 0x4846 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    483a:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <tc_tcd0_ccc_callback>
    483e:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <tc_tcd0_ccc_callback+0x1>
    4842:	fc 01       	movw	r30, r24
    4844:	19 95       	eicall
	}
}
    4846:	00 00       	nop
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	ff 91       	pop	r31
    484e:	ef 91       	pop	r30
    4850:	bf 91       	pop	r27
    4852:	af 91       	pop	r26
    4854:	9f 91       	pop	r25
    4856:	8f 91       	pop	r24
    4858:	7f 91       	pop	r23
    485a:	6f 91       	pop	r22
    485c:	5f 91       	pop	r21
    485e:	4f 91       	pop	r20
    4860:	3f 91       	pop	r19
    4862:	2f 91       	pop	r18
    4864:	0f 90       	pop	r0
    4866:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    486a:	0f 90       	pop	r0
    486c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4870:	0f 90       	pop	r0
    4872:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4876:	0f 90       	pop	r0
    4878:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    487c:	0f 90       	pop	r0
    487e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4882:	0f 90       	pop	r0
    4884:	1f 90       	pop	r1
    4886:	18 95       	reti

00004888 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    4888:	1f 92       	push	r1
    488a:	0f 92       	push	r0
    488c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4890:	0f 92       	push	r0
    4892:	11 24       	eor	r1, r1
    4894:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4898:	0f 92       	push	r0
    489a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    489e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    48a2:	0f 92       	push	r0
    48a4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    48a8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    48ac:	0f 92       	push	r0
    48ae:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    48b2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    48b6:	0f 92       	push	r0
    48b8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    48bc:	2f 93       	push	r18
    48be:	3f 93       	push	r19
    48c0:	4f 93       	push	r20
    48c2:	5f 93       	push	r21
    48c4:	6f 93       	push	r22
    48c6:	7f 93       	push	r23
    48c8:	8f 93       	push	r24
    48ca:	9f 93       	push	r25
    48cc:	af 93       	push	r26
    48ce:	bf 93       	push	r27
    48d0:	ef 93       	push	r30
    48d2:	ff 93       	push	r31
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    48dc:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <tc_tcd0_ccd_callback>
    48e0:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <tc_tcd0_ccd_callback+0x1>
    48e4:	89 2b       	or	r24, r25
    48e6:	31 f0       	breq	.+12     	; 0x48f4 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    48e8:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <tc_tcd0_ccd_callback>
    48ec:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <tc_tcd0_ccd_callback+0x1>
    48f0:	fc 01       	movw	r30, r24
    48f2:	19 95       	eicall
	}
}
    48f4:	00 00       	nop
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	ff 91       	pop	r31
    48fc:	ef 91       	pop	r30
    48fe:	bf 91       	pop	r27
    4900:	af 91       	pop	r26
    4902:	9f 91       	pop	r25
    4904:	8f 91       	pop	r24
    4906:	7f 91       	pop	r23
    4908:	6f 91       	pop	r22
    490a:	5f 91       	pop	r21
    490c:	4f 91       	pop	r20
    490e:	3f 91       	pop	r19
    4910:	2f 91       	pop	r18
    4912:	0f 90       	pop	r0
    4914:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4918:	0f 90       	pop	r0
    491a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    491e:	0f 90       	pop	r0
    4920:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4924:	0f 90       	pop	r0
    4926:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    492a:	0f 90       	pop	r0
    492c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4930:	0f 90       	pop	r0
    4932:	1f 90       	pop	r1
    4934:	18 95       	reti

00004936 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    4936:	1f 92       	push	r1
    4938:	0f 92       	push	r0
    493a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    493e:	0f 92       	push	r0
    4940:	11 24       	eor	r1, r1
    4942:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4946:	0f 92       	push	r0
    4948:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    494c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4950:	0f 92       	push	r0
    4952:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4956:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    495a:	0f 92       	push	r0
    495c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4960:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4964:	0f 92       	push	r0
    4966:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    496a:	2f 93       	push	r18
    496c:	3f 93       	push	r19
    496e:	4f 93       	push	r20
    4970:	5f 93       	push	r21
    4972:	6f 93       	push	r22
    4974:	7f 93       	push	r23
    4976:	8f 93       	push	r24
    4978:	9f 93       	push	r25
    497a:	af 93       	push	r26
    497c:	bf 93       	push	r27
    497e:	ef 93       	push	r30
    4980:	ff 93       	push	r31
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	cd b7       	in	r28, 0x3d	; 61
    4988:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    498a:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <tc_tcd1_ovf_callback>
    498e:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <tc_tcd1_ovf_callback+0x1>
    4992:	89 2b       	or	r24, r25
    4994:	31 f0       	breq	.+12     	; 0x49a2 <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    4996:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <tc_tcd1_ovf_callback>
    499a:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <tc_tcd1_ovf_callback+0x1>
    499e:	fc 01       	movw	r30, r24
    49a0:	19 95       	eicall
	}
}
    49a2:	00 00       	nop
    49a4:	df 91       	pop	r29
    49a6:	cf 91       	pop	r28
    49a8:	ff 91       	pop	r31
    49aa:	ef 91       	pop	r30
    49ac:	bf 91       	pop	r27
    49ae:	af 91       	pop	r26
    49b0:	9f 91       	pop	r25
    49b2:	8f 91       	pop	r24
    49b4:	7f 91       	pop	r23
    49b6:	6f 91       	pop	r22
    49b8:	5f 91       	pop	r21
    49ba:	4f 91       	pop	r20
    49bc:	3f 91       	pop	r19
    49be:	2f 91       	pop	r18
    49c0:	0f 90       	pop	r0
    49c2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    49c6:	0f 90       	pop	r0
    49c8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    49cc:	0f 90       	pop	r0
    49ce:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49d2:	0f 90       	pop	r0
    49d4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49d8:	0f 90       	pop	r0
    49da:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    49de:	0f 90       	pop	r0
    49e0:	1f 90       	pop	r1
    49e2:	18 95       	reti

000049e4 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    49e4:	1f 92       	push	r1
    49e6:	0f 92       	push	r0
    49e8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    49ec:	0f 92       	push	r0
    49ee:	11 24       	eor	r1, r1
    49f0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49f4:	0f 92       	push	r0
    49f6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49fa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49fe:	0f 92       	push	r0
    4a00:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a04:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a08:	0f 92       	push	r0
    4a0a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a0e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a12:	0f 92       	push	r0
    4a14:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a18:	2f 93       	push	r18
    4a1a:	3f 93       	push	r19
    4a1c:	4f 93       	push	r20
    4a1e:	5f 93       	push	r21
    4a20:	6f 93       	push	r22
    4a22:	7f 93       	push	r23
    4a24:	8f 93       	push	r24
    4a26:	9f 93       	push	r25
    4a28:	af 93       	push	r26
    4a2a:	bf 93       	push	r27
    4a2c:	ef 93       	push	r30
    4a2e:	ff 93       	push	r31
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    4a38:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <tc_tcd1_err_callback>
    4a3c:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <tc_tcd1_err_callback+0x1>
    4a40:	89 2b       	or	r24, r25
    4a42:	31 f0       	breq	.+12     	; 0x4a50 <__vector_84+0x6c>
		tc_tcd1_err_callback();
    4a44:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <tc_tcd1_err_callback>
    4a48:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <tc_tcd1_err_callback+0x1>
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	19 95       	eicall
	}
}
    4a50:	00 00       	nop
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	ff 91       	pop	r31
    4a58:	ef 91       	pop	r30
    4a5a:	bf 91       	pop	r27
    4a5c:	af 91       	pop	r26
    4a5e:	9f 91       	pop	r25
    4a60:	8f 91       	pop	r24
    4a62:	7f 91       	pop	r23
    4a64:	6f 91       	pop	r22
    4a66:	5f 91       	pop	r21
    4a68:	4f 91       	pop	r20
    4a6a:	3f 91       	pop	r19
    4a6c:	2f 91       	pop	r18
    4a6e:	0f 90       	pop	r0
    4a70:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a74:	0f 90       	pop	r0
    4a76:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a7a:	0f 90       	pop	r0
    4a7c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a80:	0f 90       	pop	r0
    4a82:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a86:	0f 90       	pop	r0
    4a88:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a8c:	0f 90       	pop	r0
    4a8e:	1f 90       	pop	r1
    4a90:	18 95       	reti

00004a92 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    4a92:	1f 92       	push	r1
    4a94:	0f 92       	push	r0
    4a96:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a9a:	0f 92       	push	r0
    4a9c:	11 24       	eor	r1, r1
    4a9e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4aa2:	0f 92       	push	r0
    4aa4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4aa8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4aac:	0f 92       	push	r0
    4aae:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ab2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ab6:	0f 92       	push	r0
    4ab8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4abc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ac0:	0f 92       	push	r0
    4ac2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ac6:	2f 93       	push	r18
    4ac8:	3f 93       	push	r19
    4aca:	4f 93       	push	r20
    4acc:	5f 93       	push	r21
    4ace:	6f 93       	push	r22
    4ad0:	7f 93       	push	r23
    4ad2:	8f 93       	push	r24
    4ad4:	9f 93       	push	r25
    4ad6:	af 93       	push	r26
    4ad8:	bf 93       	push	r27
    4ada:	ef 93       	push	r30
    4adc:	ff 93       	push	r31
    4ade:	cf 93       	push	r28
    4ae0:	df 93       	push	r29
    4ae2:	cd b7       	in	r28, 0x3d	; 61
    4ae4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    4ae6:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <tc_tcd1_cca_callback>
    4aea:	90 91 2d 22 	lds	r25, 0x222D	; 0x80222d <tc_tcd1_cca_callback+0x1>
    4aee:	89 2b       	or	r24, r25
    4af0:	31 f0       	breq	.+12     	; 0x4afe <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    4af2:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <tc_tcd1_cca_callback>
    4af6:	90 91 2d 22 	lds	r25, 0x222D	; 0x80222d <tc_tcd1_cca_callback+0x1>
    4afa:	fc 01       	movw	r30, r24
    4afc:	19 95       	eicall
	}
}
    4afe:	00 00       	nop
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	ff 91       	pop	r31
    4b06:	ef 91       	pop	r30
    4b08:	bf 91       	pop	r27
    4b0a:	af 91       	pop	r26
    4b0c:	9f 91       	pop	r25
    4b0e:	8f 91       	pop	r24
    4b10:	7f 91       	pop	r23
    4b12:	6f 91       	pop	r22
    4b14:	5f 91       	pop	r21
    4b16:	4f 91       	pop	r20
    4b18:	3f 91       	pop	r19
    4b1a:	2f 91       	pop	r18
    4b1c:	0f 90       	pop	r0
    4b1e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b22:	0f 90       	pop	r0
    4b24:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b28:	0f 90       	pop	r0
    4b2a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b2e:	0f 90       	pop	r0
    4b30:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b34:	0f 90       	pop	r0
    4b36:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b3a:	0f 90       	pop	r0
    4b3c:	1f 90       	pop	r1
    4b3e:	18 95       	reti

00004b40 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    4b40:	1f 92       	push	r1
    4b42:	0f 92       	push	r0
    4b44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b48:	0f 92       	push	r0
    4b4a:	11 24       	eor	r1, r1
    4b4c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b50:	0f 92       	push	r0
    4b52:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b56:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b5a:	0f 92       	push	r0
    4b5c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b60:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b64:	0f 92       	push	r0
    4b66:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b6a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b6e:	0f 92       	push	r0
    4b70:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b74:	2f 93       	push	r18
    4b76:	3f 93       	push	r19
    4b78:	4f 93       	push	r20
    4b7a:	5f 93       	push	r21
    4b7c:	6f 93       	push	r22
    4b7e:	7f 93       	push	r23
    4b80:	8f 93       	push	r24
    4b82:	9f 93       	push	r25
    4b84:	af 93       	push	r26
    4b86:	bf 93       	push	r27
    4b88:	ef 93       	push	r30
    4b8a:	ff 93       	push	r31
    4b8c:	cf 93       	push	r28
    4b8e:	df 93       	push	r29
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    4b94:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <tc_tcd1_ccb_callback>
    4b98:	90 91 2f 22 	lds	r25, 0x222F	; 0x80222f <tc_tcd1_ccb_callback+0x1>
    4b9c:	89 2b       	or	r24, r25
    4b9e:	31 f0       	breq	.+12     	; 0x4bac <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    4ba0:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <tc_tcd1_ccb_callback>
    4ba4:	90 91 2f 22 	lds	r25, 0x222F	; 0x80222f <tc_tcd1_ccb_callback+0x1>
    4ba8:	fc 01       	movw	r30, r24
    4baa:	19 95       	eicall
	}
}
    4bac:	00 00       	nop
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	ff 91       	pop	r31
    4bb4:	ef 91       	pop	r30
    4bb6:	bf 91       	pop	r27
    4bb8:	af 91       	pop	r26
    4bba:	9f 91       	pop	r25
    4bbc:	8f 91       	pop	r24
    4bbe:	7f 91       	pop	r23
    4bc0:	6f 91       	pop	r22
    4bc2:	5f 91       	pop	r21
    4bc4:	4f 91       	pop	r20
    4bc6:	3f 91       	pop	r19
    4bc8:	2f 91       	pop	r18
    4bca:	0f 90       	pop	r0
    4bcc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4bd0:	0f 90       	pop	r0
    4bd2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4bd6:	0f 90       	pop	r0
    4bd8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4bdc:	0f 90       	pop	r0
    4bde:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4be2:	0f 90       	pop	r0
    4be4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4be8:	0f 90       	pop	r0
    4bea:	1f 90       	pop	r1
    4bec:	18 95       	reti

00004bee <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    4bee:	1f 92       	push	r1
    4bf0:	0f 92       	push	r0
    4bf2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4bf6:	0f 92       	push	r0
    4bf8:	11 24       	eor	r1, r1
    4bfa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bfe:	0f 92       	push	r0
    4c00:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c04:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c08:	0f 92       	push	r0
    4c0a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c0e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c12:	0f 92       	push	r0
    4c14:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c18:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c1c:	0f 92       	push	r0
    4c1e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c22:	2f 93       	push	r18
    4c24:	3f 93       	push	r19
    4c26:	4f 93       	push	r20
    4c28:	5f 93       	push	r21
    4c2a:	6f 93       	push	r22
    4c2c:	7f 93       	push	r23
    4c2e:	8f 93       	push	r24
    4c30:	9f 93       	push	r25
    4c32:	af 93       	push	r26
    4c34:	bf 93       	push	r27
    4c36:	ef 93       	push	r30
    4c38:	ff 93       	push	r31
    4c3a:	cf 93       	push	r28
    4c3c:	df 93       	push	r29
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    4c42:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <tc_tce0_ovf_callback>
    4c46:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <tc_tce0_ovf_callback+0x1>
    4c4a:	89 2b       	or	r24, r25
    4c4c:	31 f0       	breq	.+12     	; 0x4c5a <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    4c4e:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <tc_tce0_ovf_callback>
    4c52:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <tc_tce0_ovf_callback+0x1>
    4c56:	fc 01       	movw	r30, r24
    4c58:	19 95       	eicall
	}
}
    4c5a:	00 00       	nop
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	ff 91       	pop	r31
    4c62:	ef 91       	pop	r30
    4c64:	bf 91       	pop	r27
    4c66:	af 91       	pop	r26
    4c68:	9f 91       	pop	r25
    4c6a:	8f 91       	pop	r24
    4c6c:	7f 91       	pop	r23
    4c6e:	6f 91       	pop	r22
    4c70:	5f 91       	pop	r21
    4c72:	4f 91       	pop	r20
    4c74:	3f 91       	pop	r19
    4c76:	2f 91       	pop	r18
    4c78:	0f 90       	pop	r0
    4c7a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c7e:	0f 90       	pop	r0
    4c80:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c84:	0f 90       	pop	r0
    4c86:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c8a:	0f 90       	pop	r0
    4c8c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c90:	0f 90       	pop	r0
    4c92:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c96:	0f 90       	pop	r0
    4c98:	1f 90       	pop	r1
    4c9a:	18 95       	reti

00004c9c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    4c9c:	1f 92       	push	r1
    4c9e:	0f 92       	push	r0
    4ca0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ca4:	0f 92       	push	r0
    4ca6:	11 24       	eor	r1, r1
    4ca8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4cac:	0f 92       	push	r0
    4cae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4cb2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4cb6:	0f 92       	push	r0
    4cb8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4cbc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4cc0:	0f 92       	push	r0
    4cc2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4cc6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4cca:	0f 92       	push	r0
    4ccc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4cd0:	2f 93       	push	r18
    4cd2:	3f 93       	push	r19
    4cd4:	4f 93       	push	r20
    4cd6:	5f 93       	push	r21
    4cd8:	6f 93       	push	r22
    4cda:	7f 93       	push	r23
    4cdc:	8f 93       	push	r24
    4cde:	9f 93       	push	r25
    4ce0:	af 93       	push	r26
    4ce2:	bf 93       	push	r27
    4ce4:	ef 93       	push	r30
    4ce6:	ff 93       	push	r31
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    4cf0:	80 91 32 22 	lds	r24, 0x2232	; 0x802232 <tc_tce0_err_callback>
    4cf4:	90 91 33 22 	lds	r25, 0x2233	; 0x802233 <tc_tce0_err_callback+0x1>
    4cf8:	89 2b       	or	r24, r25
    4cfa:	31 f0       	breq	.+12     	; 0x4d08 <__vector_48+0x6c>
		tc_tce0_err_callback();
    4cfc:	80 91 32 22 	lds	r24, 0x2232	; 0x802232 <tc_tce0_err_callback>
    4d00:	90 91 33 22 	lds	r25, 0x2233	; 0x802233 <tc_tce0_err_callback+0x1>
    4d04:	fc 01       	movw	r30, r24
    4d06:	19 95       	eicall
	}
}
    4d08:	00 00       	nop
    4d0a:	df 91       	pop	r29
    4d0c:	cf 91       	pop	r28
    4d0e:	ff 91       	pop	r31
    4d10:	ef 91       	pop	r30
    4d12:	bf 91       	pop	r27
    4d14:	af 91       	pop	r26
    4d16:	9f 91       	pop	r25
    4d18:	8f 91       	pop	r24
    4d1a:	7f 91       	pop	r23
    4d1c:	6f 91       	pop	r22
    4d1e:	5f 91       	pop	r21
    4d20:	4f 91       	pop	r20
    4d22:	3f 91       	pop	r19
    4d24:	2f 91       	pop	r18
    4d26:	0f 90       	pop	r0
    4d28:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d2c:	0f 90       	pop	r0
    4d2e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d32:	0f 90       	pop	r0
    4d34:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d38:	0f 90       	pop	r0
    4d3a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d3e:	0f 90       	pop	r0
    4d40:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d44:	0f 90       	pop	r0
    4d46:	1f 90       	pop	r1
    4d48:	18 95       	reti

00004d4a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    4d4a:	1f 92       	push	r1
    4d4c:	0f 92       	push	r0
    4d4e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d52:	0f 92       	push	r0
    4d54:	11 24       	eor	r1, r1
    4d56:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d5a:	0f 92       	push	r0
    4d5c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d60:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d64:	0f 92       	push	r0
    4d66:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d6a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d6e:	0f 92       	push	r0
    4d70:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d74:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d78:	0f 92       	push	r0
    4d7a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d7e:	2f 93       	push	r18
    4d80:	3f 93       	push	r19
    4d82:	4f 93       	push	r20
    4d84:	5f 93       	push	r21
    4d86:	6f 93       	push	r22
    4d88:	7f 93       	push	r23
    4d8a:	8f 93       	push	r24
    4d8c:	9f 93       	push	r25
    4d8e:	af 93       	push	r26
    4d90:	bf 93       	push	r27
    4d92:	ef 93       	push	r30
    4d94:	ff 93       	push	r31
    4d96:	cf 93       	push	r28
    4d98:	df 93       	push	r29
    4d9a:	cd b7       	in	r28, 0x3d	; 61
    4d9c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    4d9e:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <tc_tce0_cca_callback>
    4da2:	90 91 35 22 	lds	r25, 0x2235	; 0x802235 <tc_tce0_cca_callback+0x1>
    4da6:	89 2b       	or	r24, r25
    4da8:	31 f0       	breq	.+12     	; 0x4db6 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    4daa:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <tc_tce0_cca_callback>
    4dae:	90 91 35 22 	lds	r25, 0x2235	; 0x802235 <tc_tce0_cca_callback+0x1>
    4db2:	fc 01       	movw	r30, r24
    4db4:	19 95       	eicall
	}
}
    4db6:	00 00       	nop
    4db8:	df 91       	pop	r29
    4dba:	cf 91       	pop	r28
    4dbc:	ff 91       	pop	r31
    4dbe:	ef 91       	pop	r30
    4dc0:	bf 91       	pop	r27
    4dc2:	af 91       	pop	r26
    4dc4:	9f 91       	pop	r25
    4dc6:	8f 91       	pop	r24
    4dc8:	7f 91       	pop	r23
    4dca:	6f 91       	pop	r22
    4dcc:	5f 91       	pop	r21
    4dce:	4f 91       	pop	r20
    4dd0:	3f 91       	pop	r19
    4dd2:	2f 91       	pop	r18
    4dd4:	0f 90       	pop	r0
    4dd6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4dda:	0f 90       	pop	r0
    4ddc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4de0:	0f 90       	pop	r0
    4de2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4de6:	0f 90       	pop	r0
    4de8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4dec:	0f 90       	pop	r0
    4dee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4df2:	0f 90       	pop	r0
    4df4:	1f 90       	pop	r1
    4df6:	18 95       	reti

00004df8 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    4df8:	1f 92       	push	r1
    4dfa:	0f 92       	push	r0
    4dfc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e00:	0f 92       	push	r0
    4e02:	11 24       	eor	r1, r1
    4e04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e08:	0f 92       	push	r0
    4e0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e12:	0f 92       	push	r0
    4e14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e1c:	0f 92       	push	r0
    4e1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e26:	0f 92       	push	r0
    4e28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e2c:	2f 93       	push	r18
    4e2e:	3f 93       	push	r19
    4e30:	4f 93       	push	r20
    4e32:	5f 93       	push	r21
    4e34:	6f 93       	push	r22
    4e36:	7f 93       	push	r23
    4e38:	8f 93       	push	r24
    4e3a:	9f 93       	push	r25
    4e3c:	af 93       	push	r26
    4e3e:	bf 93       	push	r27
    4e40:	ef 93       	push	r30
    4e42:	ff 93       	push	r31
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	cd b7       	in	r28, 0x3d	; 61
    4e4a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    4e4c:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <tc_tce0_ccb_callback>
    4e50:	90 91 37 22 	lds	r25, 0x2237	; 0x802237 <tc_tce0_ccb_callback+0x1>
    4e54:	89 2b       	or	r24, r25
    4e56:	31 f0       	breq	.+12     	; 0x4e64 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    4e58:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <tc_tce0_ccb_callback>
    4e5c:	90 91 37 22 	lds	r25, 0x2237	; 0x802237 <tc_tce0_ccb_callback+0x1>
    4e60:	fc 01       	movw	r30, r24
    4e62:	19 95       	eicall
	}
}
    4e64:	00 00       	nop
    4e66:	df 91       	pop	r29
    4e68:	cf 91       	pop	r28
    4e6a:	ff 91       	pop	r31
    4e6c:	ef 91       	pop	r30
    4e6e:	bf 91       	pop	r27
    4e70:	af 91       	pop	r26
    4e72:	9f 91       	pop	r25
    4e74:	8f 91       	pop	r24
    4e76:	7f 91       	pop	r23
    4e78:	6f 91       	pop	r22
    4e7a:	5f 91       	pop	r21
    4e7c:	4f 91       	pop	r20
    4e7e:	3f 91       	pop	r19
    4e80:	2f 91       	pop	r18
    4e82:	0f 90       	pop	r0
    4e84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e88:	0f 90       	pop	r0
    4e8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e8e:	0f 90       	pop	r0
    4e90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e94:	0f 90       	pop	r0
    4e96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e9a:	0f 90       	pop	r0
    4e9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ea0:	0f 90       	pop	r0
    4ea2:	1f 90       	pop	r1
    4ea4:	18 95       	reti

00004ea6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    4ea6:	1f 92       	push	r1
    4ea8:	0f 92       	push	r0
    4eaa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4eae:	0f 92       	push	r0
    4eb0:	11 24       	eor	r1, r1
    4eb2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4eb6:	0f 92       	push	r0
    4eb8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ebc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ec0:	0f 92       	push	r0
    4ec2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ec6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4eca:	0f 92       	push	r0
    4ecc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ed0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ed4:	0f 92       	push	r0
    4ed6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4eda:	2f 93       	push	r18
    4edc:	3f 93       	push	r19
    4ede:	4f 93       	push	r20
    4ee0:	5f 93       	push	r21
    4ee2:	6f 93       	push	r22
    4ee4:	7f 93       	push	r23
    4ee6:	8f 93       	push	r24
    4ee8:	9f 93       	push	r25
    4eea:	af 93       	push	r26
    4eec:	bf 93       	push	r27
    4eee:	ef 93       	push	r30
    4ef0:	ff 93       	push	r31
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	cd b7       	in	r28, 0x3d	; 61
    4ef8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    4efa:	80 91 38 22 	lds	r24, 0x2238	; 0x802238 <tc_tce0_ccc_callback>
    4efe:	90 91 39 22 	lds	r25, 0x2239	; 0x802239 <tc_tce0_ccc_callback+0x1>
    4f02:	89 2b       	or	r24, r25
    4f04:	31 f0       	breq	.+12     	; 0x4f12 <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    4f06:	80 91 38 22 	lds	r24, 0x2238	; 0x802238 <tc_tce0_ccc_callback>
    4f0a:	90 91 39 22 	lds	r25, 0x2239	; 0x802239 <tc_tce0_ccc_callback+0x1>
    4f0e:	fc 01       	movw	r30, r24
    4f10:	19 95       	eicall
	}
}
    4f12:	00 00       	nop
    4f14:	df 91       	pop	r29
    4f16:	cf 91       	pop	r28
    4f18:	ff 91       	pop	r31
    4f1a:	ef 91       	pop	r30
    4f1c:	bf 91       	pop	r27
    4f1e:	af 91       	pop	r26
    4f20:	9f 91       	pop	r25
    4f22:	8f 91       	pop	r24
    4f24:	7f 91       	pop	r23
    4f26:	6f 91       	pop	r22
    4f28:	5f 91       	pop	r21
    4f2a:	4f 91       	pop	r20
    4f2c:	3f 91       	pop	r19
    4f2e:	2f 91       	pop	r18
    4f30:	0f 90       	pop	r0
    4f32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f36:	0f 90       	pop	r0
    4f38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f3c:	0f 90       	pop	r0
    4f3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f42:	0f 90       	pop	r0
    4f44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f48:	0f 90       	pop	r0
    4f4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f4e:	0f 90       	pop	r0
    4f50:	1f 90       	pop	r1
    4f52:	18 95       	reti

00004f54 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    4f54:	1f 92       	push	r1
    4f56:	0f 92       	push	r0
    4f58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f5c:	0f 92       	push	r0
    4f5e:	11 24       	eor	r1, r1
    4f60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f64:	0f 92       	push	r0
    4f66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f6e:	0f 92       	push	r0
    4f70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f78:	0f 92       	push	r0
    4f7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f82:	0f 92       	push	r0
    4f84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f88:	2f 93       	push	r18
    4f8a:	3f 93       	push	r19
    4f8c:	4f 93       	push	r20
    4f8e:	5f 93       	push	r21
    4f90:	6f 93       	push	r22
    4f92:	7f 93       	push	r23
    4f94:	8f 93       	push	r24
    4f96:	9f 93       	push	r25
    4f98:	af 93       	push	r26
    4f9a:	bf 93       	push	r27
    4f9c:	ef 93       	push	r30
    4f9e:	ff 93       	push	r31
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    4fa8:	80 91 3a 22 	lds	r24, 0x223A	; 0x80223a <tc_tce0_ccd_callback>
    4fac:	90 91 3b 22 	lds	r25, 0x223B	; 0x80223b <tc_tce0_ccd_callback+0x1>
    4fb0:	89 2b       	or	r24, r25
    4fb2:	31 f0       	breq	.+12     	; 0x4fc0 <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    4fb4:	80 91 3a 22 	lds	r24, 0x223A	; 0x80223a <tc_tce0_ccd_callback>
    4fb8:	90 91 3b 22 	lds	r25, 0x223B	; 0x80223b <tc_tce0_ccd_callback+0x1>
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	19 95       	eicall
	}
}
    4fc0:	00 00       	nop
    4fc2:	df 91       	pop	r29
    4fc4:	cf 91       	pop	r28
    4fc6:	ff 91       	pop	r31
    4fc8:	ef 91       	pop	r30
    4fca:	bf 91       	pop	r27
    4fcc:	af 91       	pop	r26
    4fce:	9f 91       	pop	r25
    4fd0:	8f 91       	pop	r24
    4fd2:	7f 91       	pop	r23
    4fd4:	6f 91       	pop	r22
    4fd6:	5f 91       	pop	r21
    4fd8:	4f 91       	pop	r20
    4fda:	3f 91       	pop	r19
    4fdc:	2f 91       	pop	r18
    4fde:	0f 90       	pop	r0
    4fe0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4fe4:	0f 90       	pop	r0
    4fe6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4fea:	0f 90       	pop	r0
    4fec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ff0:	0f 90       	pop	r0
    4ff2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ff6:	0f 90       	pop	r0
    4ff8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ffc:	0f 90       	pop	r0
    4ffe:	1f 90       	pop	r1
    5000:	18 95       	reti

00005002 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    5002:	1f 92       	push	r1
    5004:	0f 92       	push	r0
    5006:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    500a:	0f 92       	push	r0
    500c:	11 24       	eor	r1, r1
    500e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5012:	0f 92       	push	r0
    5014:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5018:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    501c:	0f 92       	push	r0
    501e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5022:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5026:	0f 92       	push	r0
    5028:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    502c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5030:	0f 92       	push	r0
    5032:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5036:	2f 93       	push	r18
    5038:	3f 93       	push	r19
    503a:	4f 93       	push	r20
    503c:	5f 93       	push	r21
    503e:	6f 93       	push	r22
    5040:	7f 93       	push	r23
    5042:	8f 93       	push	r24
    5044:	9f 93       	push	r25
    5046:	af 93       	push	r26
    5048:	bf 93       	push	r27
    504a:	ef 93       	push	r30
    504c:	ff 93       	push	r31
    504e:	cf 93       	push	r28
    5050:	df 93       	push	r29
    5052:	cd b7       	in	r28, 0x3d	; 61
    5054:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    5056:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <tc_tce1_ovf_callback>
    505a:	90 91 3d 22 	lds	r25, 0x223D	; 0x80223d <tc_tce1_ovf_callback+0x1>
    505e:	89 2b       	or	r24, r25
    5060:	31 f0       	breq	.+12     	; 0x506e <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    5062:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <tc_tce1_ovf_callback>
    5066:	90 91 3d 22 	lds	r25, 0x223D	; 0x80223d <tc_tce1_ovf_callback+0x1>
    506a:	fc 01       	movw	r30, r24
    506c:	19 95       	eicall
	}
}
    506e:	00 00       	nop
    5070:	df 91       	pop	r29
    5072:	cf 91       	pop	r28
    5074:	ff 91       	pop	r31
    5076:	ef 91       	pop	r30
    5078:	bf 91       	pop	r27
    507a:	af 91       	pop	r26
    507c:	9f 91       	pop	r25
    507e:	8f 91       	pop	r24
    5080:	7f 91       	pop	r23
    5082:	6f 91       	pop	r22
    5084:	5f 91       	pop	r21
    5086:	4f 91       	pop	r20
    5088:	3f 91       	pop	r19
    508a:	2f 91       	pop	r18
    508c:	0f 90       	pop	r0
    508e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5092:	0f 90       	pop	r0
    5094:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5098:	0f 90       	pop	r0
    509a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    509e:	0f 90       	pop	r0
    50a0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    50a4:	0f 90       	pop	r0
    50a6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    50aa:	0f 90       	pop	r0
    50ac:	1f 90       	pop	r1
    50ae:	18 95       	reti

000050b0 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    50b0:	1f 92       	push	r1
    50b2:	0f 92       	push	r0
    50b4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    50b8:	0f 92       	push	r0
    50ba:	11 24       	eor	r1, r1
    50bc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    50c0:	0f 92       	push	r0
    50c2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    50c6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    50ca:	0f 92       	push	r0
    50cc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    50d0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50d4:	0f 92       	push	r0
    50d6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50da:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50de:	0f 92       	push	r0
    50e0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50e4:	2f 93       	push	r18
    50e6:	3f 93       	push	r19
    50e8:	4f 93       	push	r20
    50ea:	5f 93       	push	r21
    50ec:	6f 93       	push	r22
    50ee:	7f 93       	push	r23
    50f0:	8f 93       	push	r24
    50f2:	9f 93       	push	r25
    50f4:	af 93       	push	r26
    50f6:	bf 93       	push	r27
    50f8:	ef 93       	push	r30
    50fa:	ff 93       	push	r31
    50fc:	cf 93       	push	r28
    50fe:	df 93       	push	r29
    5100:	cd b7       	in	r28, 0x3d	; 61
    5102:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    5104:	80 91 3e 22 	lds	r24, 0x223E	; 0x80223e <tc_tce1_err_callback>
    5108:	90 91 3f 22 	lds	r25, 0x223F	; 0x80223f <tc_tce1_err_callback+0x1>
    510c:	89 2b       	or	r24, r25
    510e:	31 f0       	breq	.+12     	; 0x511c <__vector_54+0x6c>
		tc_tce1_err_callback();
    5110:	80 91 3e 22 	lds	r24, 0x223E	; 0x80223e <tc_tce1_err_callback>
    5114:	90 91 3f 22 	lds	r25, 0x223F	; 0x80223f <tc_tce1_err_callback+0x1>
    5118:	fc 01       	movw	r30, r24
    511a:	19 95       	eicall
	}
}
    511c:	00 00       	nop
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	ff 91       	pop	r31
    5124:	ef 91       	pop	r30
    5126:	bf 91       	pop	r27
    5128:	af 91       	pop	r26
    512a:	9f 91       	pop	r25
    512c:	8f 91       	pop	r24
    512e:	7f 91       	pop	r23
    5130:	6f 91       	pop	r22
    5132:	5f 91       	pop	r21
    5134:	4f 91       	pop	r20
    5136:	3f 91       	pop	r19
    5138:	2f 91       	pop	r18
    513a:	0f 90       	pop	r0
    513c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5140:	0f 90       	pop	r0
    5142:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5146:	0f 90       	pop	r0
    5148:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    514c:	0f 90       	pop	r0
    514e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5152:	0f 90       	pop	r0
    5154:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5158:	0f 90       	pop	r0
    515a:	1f 90       	pop	r1
    515c:	18 95       	reti

0000515e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    515e:	1f 92       	push	r1
    5160:	0f 92       	push	r0
    5162:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5166:	0f 92       	push	r0
    5168:	11 24       	eor	r1, r1
    516a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    516e:	0f 92       	push	r0
    5170:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5174:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5178:	0f 92       	push	r0
    517a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    517e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5182:	0f 92       	push	r0
    5184:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5188:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    518c:	0f 92       	push	r0
    518e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5192:	2f 93       	push	r18
    5194:	3f 93       	push	r19
    5196:	4f 93       	push	r20
    5198:	5f 93       	push	r21
    519a:	6f 93       	push	r22
    519c:	7f 93       	push	r23
    519e:	8f 93       	push	r24
    51a0:	9f 93       	push	r25
    51a2:	af 93       	push	r26
    51a4:	bf 93       	push	r27
    51a6:	ef 93       	push	r30
    51a8:	ff 93       	push	r31
    51aa:	cf 93       	push	r28
    51ac:	df 93       	push	r29
    51ae:	cd b7       	in	r28, 0x3d	; 61
    51b0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    51b2:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <tc_tce1_cca_callback>
    51b6:	90 91 41 22 	lds	r25, 0x2241	; 0x802241 <tc_tce1_cca_callback+0x1>
    51ba:	89 2b       	or	r24, r25
    51bc:	31 f0       	breq	.+12     	; 0x51ca <__vector_55+0x6c>
		tc_tce1_cca_callback();
    51be:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <tc_tce1_cca_callback>
    51c2:	90 91 41 22 	lds	r25, 0x2241	; 0x802241 <tc_tce1_cca_callback+0x1>
    51c6:	fc 01       	movw	r30, r24
    51c8:	19 95       	eicall
	}
}
    51ca:	00 00       	nop
    51cc:	df 91       	pop	r29
    51ce:	cf 91       	pop	r28
    51d0:	ff 91       	pop	r31
    51d2:	ef 91       	pop	r30
    51d4:	bf 91       	pop	r27
    51d6:	af 91       	pop	r26
    51d8:	9f 91       	pop	r25
    51da:	8f 91       	pop	r24
    51dc:	7f 91       	pop	r23
    51de:	6f 91       	pop	r22
    51e0:	5f 91       	pop	r21
    51e2:	4f 91       	pop	r20
    51e4:	3f 91       	pop	r19
    51e6:	2f 91       	pop	r18
    51e8:	0f 90       	pop	r0
    51ea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    51ee:	0f 90       	pop	r0
    51f0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    51f4:	0f 90       	pop	r0
    51f6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    51fa:	0f 90       	pop	r0
    51fc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5200:	0f 90       	pop	r0
    5202:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5206:	0f 90       	pop	r0
    5208:	1f 90       	pop	r1
    520a:	18 95       	reti

0000520c <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    520c:	1f 92       	push	r1
    520e:	0f 92       	push	r0
    5210:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5214:	0f 92       	push	r0
    5216:	11 24       	eor	r1, r1
    5218:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    521c:	0f 92       	push	r0
    521e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5222:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5226:	0f 92       	push	r0
    5228:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    522c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5230:	0f 92       	push	r0
    5232:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5236:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    523a:	0f 92       	push	r0
    523c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5240:	2f 93       	push	r18
    5242:	3f 93       	push	r19
    5244:	4f 93       	push	r20
    5246:	5f 93       	push	r21
    5248:	6f 93       	push	r22
    524a:	7f 93       	push	r23
    524c:	8f 93       	push	r24
    524e:	9f 93       	push	r25
    5250:	af 93       	push	r26
    5252:	bf 93       	push	r27
    5254:	ef 93       	push	r30
    5256:	ff 93       	push	r31
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	cd b7       	in	r28, 0x3d	; 61
    525e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    5260:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <tc_tce1_ccb_callback>
    5264:	90 91 43 22 	lds	r25, 0x2243	; 0x802243 <tc_tce1_ccb_callback+0x1>
    5268:	89 2b       	or	r24, r25
    526a:	31 f0       	breq	.+12     	; 0x5278 <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    526c:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <tc_tce1_ccb_callback>
    5270:	90 91 43 22 	lds	r25, 0x2243	; 0x802243 <tc_tce1_ccb_callback+0x1>
    5274:	fc 01       	movw	r30, r24
    5276:	19 95       	eicall
	}
}
    5278:	00 00       	nop
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	ff 91       	pop	r31
    5280:	ef 91       	pop	r30
    5282:	bf 91       	pop	r27
    5284:	af 91       	pop	r26
    5286:	9f 91       	pop	r25
    5288:	8f 91       	pop	r24
    528a:	7f 91       	pop	r23
    528c:	6f 91       	pop	r22
    528e:	5f 91       	pop	r21
    5290:	4f 91       	pop	r20
    5292:	3f 91       	pop	r19
    5294:	2f 91       	pop	r18
    5296:	0f 90       	pop	r0
    5298:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    529c:	0f 90       	pop	r0
    529e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52a2:	0f 90       	pop	r0
    52a4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52a8:	0f 90       	pop	r0
    52aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52ae:	0f 90       	pop	r0
    52b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    52b4:	0f 90       	pop	r0
    52b6:	1f 90       	pop	r1
    52b8:	18 95       	reti

000052ba <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    52ba:	1f 92       	push	r1
    52bc:	0f 92       	push	r0
    52be:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    52c2:	0f 92       	push	r0
    52c4:	11 24       	eor	r1, r1
    52c6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52ca:	0f 92       	push	r0
    52cc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52d0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52d4:	0f 92       	push	r0
    52d6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52da:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52de:	0f 92       	push	r0
    52e0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    52e8:	0f 92       	push	r0
    52ea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    52ee:	2f 93       	push	r18
    52f0:	3f 93       	push	r19
    52f2:	4f 93       	push	r20
    52f4:	5f 93       	push	r21
    52f6:	6f 93       	push	r22
    52f8:	7f 93       	push	r23
    52fa:	8f 93       	push	r24
    52fc:	9f 93       	push	r25
    52fe:	af 93       	push	r26
    5300:	bf 93       	push	r27
    5302:	ef 93       	push	r30
    5304:	ff 93       	push	r31
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	cd b7       	in	r28, 0x3d	; 61
    530c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    530e:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <tc_tcf0_ovf_callback>
    5312:	90 91 45 22 	lds	r25, 0x2245	; 0x802245 <tc_tcf0_ovf_callback+0x1>
    5316:	89 2b       	or	r24, r25
    5318:	31 f0       	breq	.+12     	; 0x5326 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    531a:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <tc_tcf0_ovf_callback>
    531e:	90 91 45 22 	lds	r25, 0x2245	; 0x802245 <tc_tcf0_ovf_callback+0x1>
    5322:	fc 01       	movw	r30, r24
    5324:	19 95       	eicall
	}
}
    5326:	00 00       	nop
    5328:	df 91       	pop	r29
    532a:	cf 91       	pop	r28
    532c:	ff 91       	pop	r31
    532e:	ef 91       	pop	r30
    5330:	bf 91       	pop	r27
    5332:	af 91       	pop	r26
    5334:	9f 91       	pop	r25
    5336:	8f 91       	pop	r24
    5338:	7f 91       	pop	r23
    533a:	6f 91       	pop	r22
    533c:	5f 91       	pop	r21
    533e:	4f 91       	pop	r20
    5340:	3f 91       	pop	r19
    5342:	2f 91       	pop	r18
    5344:	0f 90       	pop	r0
    5346:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    534a:	0f 90       	pop	r0
    534c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5350:	0f 90       	pop	r0
    5352:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5356:	0f 90       	pop	r0
    5358:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    535c:	0f 90       	pop	r0
    535e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5362:	0f 90       	pop	r0
    5364:	1f 90       	pop	r1
    5366:	18 95       	reti

00005368 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    5368:	1f 92       	push	r1
    536a:	0f 92       	push	r0
    536c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5370:	0f 92       	push	r0
    5372:	11 24       	eor	r1, r1
    5374:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5378:	0f 92       	push	r0
    537a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    537e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5382:	0f 92       	push	r0
    5384:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5388:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    538c:	0f 92       	push	r0
    538e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5392:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5396:	0f 92       	push	r0
    5398:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    539c:	2f 93       	push	r18
    539e:	3f 93       	push	r19
    53a0:	4f 93       	push	r20
    53a2:	5f 93       	push	r21
    53a4:	6f 93       	push	r22
    53a6:	7f 93       	push	r23
    53a8:	8f 93       	push	r24
    53aa:	9f 93       	push	r25
    53ac:	af 93       	push	r26
    53ae:	bf 93       	push	r27
    53b0:	ef 93       	push	r30
    53b2:	ff 93       	push	r31
    53b4:	cf 93       	push	r28
    53b6:	df 93       	push	r29
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    53bc:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <tc_tcf0_err_callback>
    53c0:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <tc_tcf0_err_callback+0x1>
    53c4:	89 2b       	or	r24, r25
    53c6:	31 f0       	breq	.+12     	; 0x53d4 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    53c8:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <tc_tcf0_err_callback>
    53cc:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <tc_tcf0_err_callback+0x1>
    53d0:	fc 01       	movw	r30, r24
    53d2:	19 95       	eicall
	}
}
    53d4:	00 00       	nop
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	ff 91       	pop	r31
    53dc:	ef 91       	pop	r30
    53de:	bf 91       	pop	r27
    53e0:	af 91       	pop	r26
    53e2:	9f 91       	pop	r25
    53e4:	8f 91       	pop	r24
    53e6:	7f 91       	pop	r23
    53e8:	6f 91       	pop	r22
    53ea:	5f 91       	pop	r21
    53ec:	4f 91       	pop	r20
    53ee:	3f 91       	pop	r19
    53f0:	2f 91       	pop	r18
    53f2:	0f 90       	pop	r0
    53f4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    53f8:	0f 90       	pop	r0
    53fa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    53fe:	0f 90       	pop	r0
    5400:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5404:	0f 90       	pop	r0
    5406:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    540a:	0f 90       	pop	r0
    540c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5410:	0f 90       	pop	r0
    5412:	1f 90       	pop	r1
    5414:	18 95       	reti

00005416 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    5416:	1f 92       	push	r1
    5418:	0f 92       	push	r0
    541a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    541e:	0f 92       	push	r0
    5420:	11 24       	eor	r1, r1
    5422:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5426:	0f 92       	push	r0
    5428:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    542c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5430:	0f 92       	push	r0
    5432:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5436:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    543a:	0f 92       	push	r0
    543c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5440:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5444:	0f 92       	push	r0
    5446:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    544a:	2f 93       	push	r18
    544c:	3f 93       	push	r19
    544e:	4f 93       	push	r20
    5450:	5f 93       	push	r21
    5452:	6f 93       	push	r22
    5454:	7f 93       	push	r23
    5456:	8f 93       	push	r24
    5458:	9f 93       	push	r25
    545a:	af 93       	push	r26
    545c:	bf 93       	push	r27
    545e:	ef 93       	push	r30
    5460:	ff 93       	push	r31
    5462:	cf 93       	push	r28
    5464:	df 93       	push	r29
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    546a:	80 91 48 22 	lds	r24, 0x2248	; 0x802248 <tc_tcf0_cca_callback>
    546e:	90 91 49 22 	lds	r25, 0x2249	; 0x802249 <tc_tcf0_cca_callback+0x1>
    5472:	89 2b       	or	r24, r25
    5474:	31 f0       	breq	.+12     	; 0x5482 <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    5476:	80 91 48 22 	lds	r24, 0x2248	; 0x802248 <tc_tcf0_cca_callback>
    547a:	90 91 49 22 	lds	r25, 0x2249	; 0x802249 <tc_tcf0_cca_callback+0x1>
    547e:	fc 01       	movw	r30, r24
    5480:	19 95       	eicall
	}
}
    5482:	00 00       	nop
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	ff 91       	pop	r31
    548a:	ef 91       	pop	r30
    548c:	bf 91       	pop	r27
    548e:	af 91       	pop	r26
    5490:	9f 91       	pop	r25
    5492:	8f 91       	pop	r24
    5494:	7f 91       	pop	r23
    5496:	6f 91       	pop	r22
    5498:	5f 91       	pop	r21
    549a:	4f 91       	pop	r20
    549c:	3f 91       	pop	r19
    549e:	2f 91       	pop	r18
    54a0:	0f 90       	pop	r0
    54a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    54a6:	0f 90       	pop	r0
    54a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54ac:	0f 90       	pop	r0
    54ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54b2:	0f 90       	pop	r0
    54b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54b8:	0f 90       	pop	r0
    54ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    54be:	0f 90       	pop	r0
    54c0:	1f 90       	pop	r1
    54c2:	18 95       	reti

000054c4 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    54c4:	1f 92       	push	r1
    54c6:	0f 92       	push	r0
    54c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    54cc:	0f 92       	push	r0
    54ce:	11 24       	eor	r1, r1
    54d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54d4:	0f 92       	push	r0
    54d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54de:	0f 92       	push	r0
    54e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54e8:	0f 92       	push	r0
    54ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    54f2:	0f 92       	push	r0
    54f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    54f8:	2f 93       	push	r18
    54fa:	3f 93       	push	r19
    54fc:	4f 93       	push	r20
    54fe:	5f 93       	push	r21
    5500:	6f 93       	push	r22
    5502:	7f 93       	push	r23
    5504:	8f 93       	push	r24
    5506:	9f 93       	push	r25
    5508:	af 93       	push	r26
    550a:	bf 93       	push	r27
    550c:	ef 93       	push	r30
    550e:	ff 93       	push	r31
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
    5514:	cd b7       	in	r28, 0x3d	; 61
    5516:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    5518:	80 91 4a 22 	lds	r24, 0x224A	; 0x80224a <tc_tcf0_ccb_callback>
    551c:	90 91 4b 22 	lds	r25, 0x224B	; 0x80224b <tc_tcf0_ccb_callback+0x1>
    5520:	89 2b       	or	r24, r25
    5522:	31 f0       	breq	.+12     	; 0x5530 <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    5524:	80 91 4a 22 	lds	r24, 0x224A	; 0x80224a <tc_tcf0_ccb_callback>
    5528:	90 91 4b 22 	lds	r25, 0x224B	; 0x80224b <tc_tcf0_ccb_callback+0x1>
    552c:	fc 01       	movw	r30, r24
    552e:	19 95       	eicall
	}
}
    5530:	00 00       	nop
    5532:	df 91       	pop	r29
    5534:	cf 91       	pop	r28
    5536:	ff 91       	pop	r31
    5538:	ef 91       	pop	r30
    553a:	bf 91       	pop	r27
    553c:	af 91       	pop	r26
    553e:	9f 91       	pop	r25
    5540:	8f 91       	pop	r24
    5542:	7f 91       	pop	r23
    5544:	6f 91       	pop	r22
    5546:	5f 91       	pop	r21
    5548:	4f 91       	pop	r20
    554a:	3f 91       	pop	r19
    554c:	2f 91       	pop	r18
    554e:	0f 90       	pop	r0
    5550:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5554:	0f 90       	pop	r0
    5556:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    555a:	0f 90       	pop	r0
    555c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5560:	0f 90       	pop	r0
    5562:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5566:	0f 90       	pop	r0
    5568:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    556c:	0f 90       	pop	r0
    556e:	1f 90       	pop	r1
    5570:	18 95       	reti

00005572 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    5572:	1f 92       	push	r1
    5574:	0f 92       	push	r0
    5576:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    557a:	0f 92       	push	r0
    557c:	11 24       	eor	r1, r1
    557e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5582:	0f 92       	push	r0
    5584:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5588:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    558c:	0f 92       	push	r0
    558e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5592:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5596:	0f 92       	push	r0
    5598:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    559c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    55a0:	0f 92       	push	r0
    55a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    55a6:	2f 93       	push	r18
    55a8:	3f 93       	push	r19
    55aa:	4f 93       	push	r20
    55ac:	5f 93       	push	r21
    55ae:	6f 93       	push	r22
    55b0:	7f 93       	push	r23
    55b2:	8f 93       	push	r24
    55b4:	9f 93       	push	r25
    55b6:	af 93       	push	r26
    55b8:	bf 93       	push	r27
    55ba:	ef 93       	push	r30
    55bc:	ff 93       	push	r31
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    55c6:	80 91 4c 22 	lds	r24, 0x224C	; 0x80224c <tc_tcf0_ccc_callback>
    55ca:	90 91 4d 22 	lds	r25, 0x224D	; 0x80224d <tc_tcf0_ccc_callback+0x1>
    55ce:	89 2b       	or	r24, r25
    55d0:	31 f0       	breq	.+12     	; 0x55de <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    55d2:	80 91 4c 22 	lds	r24, 0x224C	; 0x80224c <tc_tcf0_ccc_callback>
    55d6:	90 91 4d 22 	lds	r25, 0x224D	; 0x80224d <tc_tcf0_ccc_callback+0x1>
    55da:	fc 01       	movw	r30, r24
    55dc:	19 95       	eicall
	}
}
    55de:	00 00       	nop
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	ff 91       	pop	r31
    55e6:	ef 91       	pop	r30
    55e8:	bf 91       	pop	r27
    55ea:	af 91       	pop	r26
    55ec:	9f 91       	pop	r25
    55ee:	8f 91       	pop	r24
    55f0:	7f 91       	pop	r23
    55f2:	6f 91       	pop	r22
    55f4:	5f 91       	pop	r21
    55f6:	4f 91       	pop	r20
    55f8:	3f 91       	pop	r19
    55fa:	2f 91       	pop	r18
    55fc:	0f 90       	pop	r0
    55fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5602:	0f 90       	pop	r0
    5604:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5608:	0f 90       	pop	r0
    560a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    560e:	0f 90       	pop	r0
    5610:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5614:	0f 90       	pop	r0
    5616:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    561a:	0f 90       	pop	r0
    561c:	1f 90       	pop	r1
    561e:	18 95       	reti

00005620 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    5620:	1f 92       	push	r1
    5622:	0f 92       	push	r0
    5624:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5628:	0f 92       	push	r0
    562a:	11 24       	eor	r1, r1
    562c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5630:	0f 92       	push	r0
    5632:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5636:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    563a:	0f 92       	push	r0
    563c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5640:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5644:	0f 92       	push	r0
    5646:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    564a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    564e:	0f 92       	push	r0
    5650:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5654:	2f 93       	push	r18
    5656:	3f 93       	push	r19
    5658:	4f 93       	push	r20
    565a:	5f 93       	push	r21
    565c:	6f 93       	push	r22
    565e:	7f 93       	push	r23
    5660:	8f 93       	push	r24
    5662:	9f 93       	push	r25
    5664:	af 93       	push	r26
    5666:	bf 93       	push	r27
    5668:	ef 93       	push	r30
    566a:	ff 93       	push	r31
    566c:	cf 93       	push	r28
    566e:	df 93       	push	r29
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    5674:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <tc_tcf0_ccd_callback>
    5678:	90 91 4f 22 	lds	r25, 0x224F	; 0x80224f <tc_tcf0_ccd_callback+0x1>
    567c:	89 2b       	or	r24, r25
    567e:	31 f0       	breq	.+12     	; 0x568c <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    5680:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <tc_tcf0_ccd_callback>
    5684:	90 91 4f 22 	lds	r25, 0x224F	; 0x80224f <tc_tcf0_ccd_callback+0x1>
    5688:	fc 01       	movw	r30, r24
    568a:	19 95       	eicall
	}
}
    568c:	00 00       	nop
    568e:	df 91       	pop	r29
    5690:	cf 91       	pop	r28
    5692:	ff 91       	pop	r31
    5694:	ef 91       	pop	r30
    5696:	bf 91       	pop	r27
    5698:	af 91       	pop	r26
    569a:	9f 91       	pop	r25
    569c:	8f 91       	pop	r24
    569e:	7f 91       	pop	r23
    56a0:	6f 91       	pop	r22
    56a2:	5f 91       	pop	r21
    56a4:	4f 91       	pop	r20
    56a6:	3f 91       	pop	r19
    56a8:	2f 91       	pop	r18
    56aa:	0f 90       	pop	r0
    56ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    56b0:	0f 90       	pop	r0
    56b2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    56b6:	0f 90       	pop	r0
    56b8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56bc:	0f 90       	pop	r0
    56be:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56c2:	0f 90       	pop	r0
    56c4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    56c8:	0f 90       	pop	r0
    56ca:	1f 90       	pop	r1
    56cc:	18 95       	reti

000056ce <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    56ce:	1f 92       	push	r1
    56d0:	0f 92       	push	r0
    56d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    56d6:	0f 92       	push	r0
    56d8:	11 24       	eor	r1, r1
    56da:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56de:	0f 92       	push	r0
    56e0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56e4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56e8:	0f 92       	push	r0
    56ea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56ee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    56f2:	0f 92       	push	r0
    56f4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    56f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    56fc:	0f 92       	push	r0
    56fe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5702:	2f 93       	push	r18
    5704:	3f 93       	push	r19
    5706:	4f 93       	push	r20
    5708:	5f 93       	push	r21
    570a:	6f 93       	push	r22
    570c:	7f 93       	push	r23
    570e:	8f 93       	push	r24
    5710:	9f 93       	push	r25
    5712:	af 93       	push	r26
    5714:	bf 93       	push	r27
    5716:	ef 93       	push	r30
    5718:	ff 93       	push	r31
    571a:	cf 93       	push	r28
    571c:	df 93       	push	r29
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    5722:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <tc_tcf1_ovf_callback>
    5726:	90 91 51 22 	lds	r25, 0x2251	; 0x802251 <tc_tcf1_ovf_callback+0x1>
    572a:	89 2b       	or	r24, r25
    572c:	31 f0       	breq	.+12     	; 0x573a <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    572e:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <tc_tcf1_ovf_callback>
    5732:	90 91 51 22 	lds	r25, 0x2251	; 0x802251 <tc_tcf1_ovf_callback+0x1>
    5736:	fc 01       	movw	r30, r24
    5738:	19 95       	eicall
	}
}
    573a:	00 00       	nop
    573c:	df 91       	pop	r29
    573e:	cf 91       	pop	r28
    5740:	ff 91       	pop	r31
    5742:	ef 91       	pop	r30
    5744:	bf 91       	pop	r27
    5746:	af 91       	pop	r26
    5748:	9f 91       	pop	r25
    574a:	8f 91       	pop	r24
    574c:	7f 91       	pop	r23
    574e:	6f 91       	pop	r22
    5750:	5f 91       	pop	r21
    5752:	4f 91       	pop	r20
    5754:	3f 91       	pop	r19
    5756:	2f 91       	pop	r18
    5758:	0f 90       	pop	r0
    575a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    575e:	0f 90       	pop	r0
    5760:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5764:	0f 90       	pop	r0
    5766:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    576a:	0f 90       	pop	r0
    576c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5770:	0f 90       	pop	r0
    5772:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5776:	0f 90       	pop	r0
    5778:	1f 90       	pop	r1
    577a:	18 95       	reti

0000577c <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    577c:	1f 92       	push	r1
    577e:	0f 92       	push	r0
    5780:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5784:	0f 92       	push	r0
    5786:	11 24       	eor	r1, r1
    5788:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    578c:	0f 92       	push	r0
    578e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5792:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5796:	0f 92       	push	r0
    5798:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    579c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    57a0:	0f 92       	push	r0
    57a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    57a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    57aa:	0f 92       	push	r0
    57ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    57b0:	2f 93       	push	r18
    57b2:	3f 93       	push	r19
    57b4:	4f 93       	push	r20
    57b6:	5f 93       	push	r21
    57b8:	6f 93       	push	r22
    57ba:	7f 93       	push	r23
    57bc:	8f 93       	push	r24
    57be:	9f 93       	push	r25
    57c0:	af 93       	push	r26
    57c2:	bf 93       	push	r27
    57c4:	ef 93       	push	r30
    57c6:	ff 93       	push	r31
    57c8:	cf 93       	push	r28
    57ca:	df 93       	push	r29
    57cc:	cd b7       	in	r28, 0x3d	; 61
    57ce:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    57d0:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <tc_tcf1_err_callback>
    57d4:	90 91 53 22 	lds	r25, 0x2253	; 0x802253 <tc_tcf1_err_callback+0x1>
    57d8:	89 2b       	or	r24, r25
    57da:	31 f0       	breq	.+12     	; 0x57e8 <__vector_115+0x6c>
		tc_tcf1_err_callback();
    57dc:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <tc_tcf1_err_callback>
    57e0:	90 91 53 22 	lds	r25, 0x2253	; 0x802253 <tc_tcf1_err_callback+0x1>
    57e4:	fc 01       	movw	r30, r24
    57e6:	19 95       	eicall
	}
}
    57e8:	00 00       	nop
    57ea:	df 91       	pop	r29
    57ec:	cf 91       	pop	r28
    57ee:	ff 91       	pop	r31
    57f0:	ef 91       	pop	r30
    57f2:	bf 91       	pop	r27
    57f4:	af 91       	pop	r26
    57f6:	9f 91       	pop	r25
    57f8:	8f 91       	pop	r24
    57fa:	7f 91       	pop	r23
    57fc:	6f 91       	pop	r22
    57fe:	5f 91       	pop	r21
    5800:	4f 91       	pop	r20
    5802:	3f 91       	pop	r19
    5804:	2f 91       	pop	r18
    5806:	0f 90       	pop	r0
    5808:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    580c:	0f 90       	pop	r0
    580e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5812:	0f 90       	pop	r0
    5814:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5818:	0f 90       	pop	r0
    581a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    581e:	0f 90       	pop	r0
    5820:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5824:	0f 90       	pop	r0
    5826:	1f 90       	pop	r1
    5828:	18 95       	reti

0000582a <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    582a:	1f 92       	push	r1
    582c:	0f 92       	push	r0
    582e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5832:	0f 92       	push	r0
    5834:	11 24       	eor	r1, r1
    5836:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    583a:	0f 92       	push	r0
    583c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5840:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5844:	0f 92       	push	r0
    5846:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    584a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    584e:	0f 92       	push	r0
    5850:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5854:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5858:	0f 92       	push	r0
    585a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    585e:	2f 93       	push	r18
    5860:	3f 93       	push	r19
    5862:	4f 93       	push	r20
    5864:	5f 93       	push	r21
    5866:	6f 93       	push	r22
    5868:	7f 93       	push	r23
    586a:	8f 93       	push	r24
    586c:	9f 93       	push	r25
    586e:	af 93       	push	r26
    5870:	bf 93       	push	r27
    5872:	ef 93       	push	r30
    5874:	ff 93       	push	r31
    5876:	cf 93       	push	r28
    5878:	df 93       	push	r29
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    587e:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <tc_tcf1_cca_callback>
    5882:	90 91 55 22 	lds	r25, 0x2255	; 0x802255 <tc_tcf1_cca_callback+0x1>
    5886:	89 2b       	or	r24, r25
    5888:	31 f0       	breq	.+12     	; 0x5896 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    588a:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <tc_tcf1_cca_callback>
    588e:	90 91 55 22 	lds	r25, 0x2255	; 0x802255 <tc_tcf1_cca_callback+0x1>
    5892:	fc 01       	movw	r30, r24
    5894:	19 95       	eicall
	}
}
    5896:	00 00       	nop
    5898:	df 91       	pop	r29
    589a:	cf 91       	pop	r28
    589c:	ff 91       	pop	r31
    589e:	ef 91       	pop	r30
    58a0:	bf 91       	pop	r27
    58a2:	af 91       	pop	r26
    58a4:	9f 91       	pop	r25
    58a6:	8f 91       	pop	r24
    58a8:	7f 91       	pop	r23
    58aa:	6f 91       	pop	r22
    58ac:	5f 91       	pop	r21
    58ae:	4f 91       	pop	r20
    58b0:	3f 91       	pop	r19
    58b2:	2f 91       	pop	r18
    58b4:	0f 90       	pop	r0
    58b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    58ba:	0f 90       	pop	r0
    58bc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    58c0:	0f 90       	pop	r0
    58c2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    58c6:	0f 90       	pop	r0
    58c8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58cc:	0f 90       	pop	r0
    58ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    58d2:	0f 90       	pop	r0
    58d4:	1f 90       	pop	r1
    58d6:	18 95       	reti

000058d8 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    58d8:	1f 92       	push	r1
    58da:	0f 92       	push	r0
    58dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    58e0:	0f 92       	push	r0
    58e2:	11 24       	eor	r1, r1
    58e4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58e8:	0f 92       	push	r0
    58ea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58ee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    58f2:	0f 92       	push	r0
    58f4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    58f8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    58fc:	0f 92       	push	r0
    58fe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5902:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5906:	0f 92       	push	r0
    5908:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    590c:	2f 93       	push	r18
    590e:	3f 93       	push	r19
    5910:	4f 93       	push	r20
    5912:	5f 93       	push	r21
    5914:	6f 93       	push	r22
    5916:	7f 93       	push	r23
    5918:	8f 93       	push	r24
    591a:	9f 93       	push	r25
    591c:	af 93       	push	r26
    591e:	bf 93       	push	r27
    5920:	ef 93       	push	r30
    5922:	ff 93       	push	r31
    5924:	cf 93       	push	r28
    5926:	df 93       	push	r29
    5928:	cd b7       	in	r28, 0x3d	; 61
    592a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    592c:	80 91 56 22 	lds	r24, 0x2256	; 0x802256 <tc_tcf1_ccb_callback>
    5930:	90 91 57 22 	lds	r25, 0x2257	; 0x802257 <tc_tcf1_ccb_callback+0x1>
    5934:	89 2b       	or	r24, r25
    5936:	31 f0       	breq	.+12     	; 0x5944 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    5938:	80 91 56 22 	lds	r24, 0x2256	; 0x802256 <tc_tcf1_ccb_callback>
    593c:	90 91 57 22 	lds	r25, 0x2257	; 0x802257 <tc_tcf1_ccb_callback+0x1>
    5940:	fc 01       	movw	r30, r24
    5942:	19 95       	eicall
	}
}
    5944:	00 00       	nop
    5946:	df 91       	pop	r29
    5948:	cf 91       	pop	r28
    594a:	ff 91       	pop	r31
    594c:	ef 91       	pop	r30
    594e:	bf 91       	pop	r27
    5950:	af 91       	pop	r26
    5952:	9f 91       	pop	r25
    5954:	8f 91       	pop	r24
    5956:	7f 91       	pop	r23
    5958:	6f 91       	pop	r22
    595a:	5f 91       	pop	r21
    595c:	4f 91       	pop	r20
    595e:	3f 91       	pop	r19
    5960:	2f 91       	pop	r18
    5962:	0f 90       	pop	r0
    5964:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5968:	0f 90       	pop	r0
    596a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    596e:	0f 90       	pop	r0
    5970:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5974:	0f 90       	pop	r0
    5976:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    597a:	0f 90       	pop	r0
    597c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5980:	0f 90       	pop	r0
    5982:	1f 90       	pop	r1
    5984:	18 95       	reti

00005986 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
    598a:	1f 92       	push	r1
    598c:	cd b7       	in	r28, 0x3d	; 61
    598e:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    5990:	8f e3       	ldi	r24, 0x3F	; 63
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	fc 01       	movw	r30, r24
    5996:	80 81       	ld	r24, Z
    5998:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    599a:	f8 94       	cli
	return flags;
    599c:	89 81       	ldd	r24, Y+1	; 0x01
}
    599e:	0f 90       	pop	r0
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	08 95       	ret

000059a6 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
    59aa:	1f 92       	push	r1
    59ac:	cd b7       	in	r28, 0x3d	; 61
    59ae:	de b7       	in	r29, 0x3e	; 62
    59b0:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    59b2:	8f e3       	ldi	r24, 0x3F	; 63
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	29 81       	ldd	r18, Y+1	; 0x01
    59b8:	fc 01       	movw	r30, r24
    59ba:	20 83       	st	Z, r18
}
    59bc:	00 00       	nop
    59be:	0f 90       	pop	r0
    59c0:	df 91       	pop	r29
    59c2:	cf 91       	pop	r28
    59c4:	08 95       	ret

000059c6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    59c6:	1f 92       	push	r1
    59c8:	0f 92       	push	r0
    59ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    59ce:	0f 92       	push	r0
    59d0:	11 24       	eor	r1, r1
    59d2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    59d6:	0f 92       	push	r0
    59d8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    59dc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    59e0:	0f 92       	push	r0
    59e2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    59e6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    59ea:	0f 92       	push	r0
    59ec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    59f0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    59f4:	0f 92       	push	r0
    59f6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    59fa:	2f 93       	push	r18
    59fc:	3f 93       	push	r19
    59fe:	4f 93       	push	r20
    5a00:	5f 93       	push	r21
    5a02:	6f 93       	push	r22
    5a04:	7f 93       	push	r23
    5a06:	8f 93       	push	r24
    5a08:	9f 93       	push	r25
    5a0a:	af 93       	push	r26
    5a0c:	bf 93       	push	r27
    5a0e:	ef 93       	push	r30
    5a10:	ff 93       	push	r31
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
    5a16:	cd b7       	in	r28, 0x3d	; 61
    5a18:	de b7       	in	r29, 0x3e	; 62
    5a1a:	43 d2       	rcall	.+1158   	; 0x5ea2 <twim_interrupt_handler>
    5a1c:	00 00       	nop
    5a1e:	df 91       	pop	r29
    5a20:	cf 91       	pop	r28
    5a22:	ff 91       	pop	r31
    5a24:	ef 91       	pop	r30
    5a26:	bf 91       	pop	r27
    5a28:	af 91       	pop	r26
    5a2a:	9f 91       	pop	r25
    5a2c:	8f 91       	pop	r24
    5a2e:	7f 91       	pop	r23
    5a30:	6f 91       	pop	r22
    5a32:	5f 91       	pop	r21
    5a34:	4f 91       	pop	r20
    5a36:	3f 91       	pop	r19
    5a38:	2f 91       	pop	r18
    5a3a:	0f 90       	pop	r0
    5a3c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a40:	0f 90       	pop	r0
    5a42:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a46:	0f 90       	pop	r0
    5a48:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a4c:	0f 90       	pop	r0
    5a4e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a52:	0f 90       	pop	r0
    5a54:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5a58:	0f 90       	pop	r0
    5a5a:	1f 90       	pop	r1
    5a5c:	18 95       	reti

00005a5e <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    5a5e:	1f 92       	push	r1
    5a60:	0f 92       	push	r0
    5a62:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5a66:	0f 92       	push	r0
    5a68:	11 24       	eor	r1, r1
    5a6a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a6e:	0f 92       	push	r0
    5a70:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a74:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a78:	0f 92       	push	r0
    5a7a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a7e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a82:	0f 92       	push	r0
    5a84:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a88:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a8c:	0f 92       	push	r0
    5a8e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a92:	2f 93       	push	r18
    5a94:	3f 93       	push	r19
    5a96:	4f 93       	push	r20
    5a98:	5f 93       	push	r21
    5a9a:	6f 93       	push	r22
    5a9c:	7f 93       	push	r23
    5a9e:	8f 93       	push	r24
    5aa0:	9f 93       	push	r25
    5aa2:	af 93       	push	r26
    5aa4:	bf 93       	push	r27
    5aa6:	ef 93       	push	r30
    5aa8:	ff 93       	push	r31
    5aaa:	cf 93       	push	r28
    5aac:	df 93       	push	r29
    5aae:	cd b7       	in	r28, 0x3d	; 61
    5ab0:	de b7       	in	r29, 0x3e	; 62
    5ab2:	f7 d1       	rcall	.+1006   	; 0x5ea2 <twim_interrupt_handler>
    5ab4:	00 00       	nop
    5ab6:	df 91       	pop	r29
    5ab8:	cf 91       	pop	r28
    5aba:	ff 91       	pop	r31
    5abc:	ef 91       	pop	r30
    5abe:	bf 91       	pop	r27
    5ac0:	af 91       	pop	r26
    5ac2:	9f 91       	pop	r25
    5ac4:	8f 91       	pop	r24
    5ac6:	7f 91       	pop	r23
    5ac8:	6f 91       	pop	r22
    5aca:	5f 91       	pop	r21
    5acc:	4f 91       	pop	r20
    5ace:	3f 91       	pop	r19
    5ad0:	2f 91       	pop	r18
    5ad2:	0f 90       	pop	r0
    5ad4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ad8:	0f 90       	pop	r0
    5ada:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ade:	0f 90       	pop	r0
    5ae0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ae4:	0f 90       	pop	r0
    5ae6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5aea:	0f 90       	pop	r0
    5aec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5af0:	0f 90       	pop	r0
    5af2:	1f 90       	pop	r1
    5af4:	18 95       	reti

00005af6 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    5af6:	1f 92       	push	r1
    5af8:	0f 92       	push	r0
    5afa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5afe:	0f 92       	push	r0
    5b00:	11 24       	eor	r1, r1
    5b02:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b06:	0f 92       	push	r0
    5b08:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b0c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b10:	0f 92       	push	r0
    5b12:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b16:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b1a:	0f 92       	push	r0
    5b1c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b20:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b24:	0f 92       	push	r0
    5b26:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b2a:	2f 93       	push	r18
    5b2c:	3f 93       	push	r19
    5b2e:	4f 93       	push	r20
    5b30:	5f 93       	push	r21
    5b32:	6f 93       	push	r22
    5b34:	7f 93       	push	r23
    5b36:	8f 93       	push	r24
    5b38:	9f 93       	push	r25
    5b3a:	af 93       	push	r26
    5b3c:	bf 93       	push	r27
    5b3e:	ef 93       	push	r30
    5b40:	ff 93       	push	r31
    5b42:	cf 93       	push	r28
    5b44:	df 93       	push	r29
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	ab d1       	rcall	.+854    	; 0x5ea2 <twim_interrupt_handler>
    5b4c:	00 00       	nop
    5b4e:	df 91       	pop	r29
    5b50:	cf 91       	pop	r28
    5b52:	ff 91       	pop	r31
    5b54:	ef 91       	pop	r30
    5b56:	bf 91       	pop	r27
    5b58:	af 91       	pop	r26
    5b5a:	9f 91       	pop	r25
    5b5c:	8f 91       	pop	r24
    5b5e:	7f 91       	pop	r23
    5b60:	6f 91       	pop	r22
    5b62:	5f 91       	pop	r21
    5b64:	4f 91       	pop	r20
    5b66:	3f 91       	pop	r19
    5b68:	2f 91       	pop	r18
    5b6a:	0f 90       	pop	r0
    5b6c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b70:	0f 90       	pop	r0
    5b72:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b76:	0f 90       	pop	r0
    5b78:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b7c:	0f 90       	pop	r0
    5b7e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b82:	0f 90       	pop	r0
    5b84:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5b88:	0f 90       	pop	r0
    5b8a:	1f 90       	pop	r1
    5b8c:	18 95       	reti

00005b8e <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    5b8e:	1f 92       	push	r1
    5b90:	0f 92       	push	r0
    5b92:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5b96:	0f 92       	push	r0
    5b98:	11 24       	eor	r1, r1
    5b9a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b9e:	0f 92       	push	r0
    5ba0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5ba4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ba8:	0f 92       	push	r0
    5baa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5bae:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5bb2:	0f 92       	push	r0
    5bb4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5bb8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5bbc:	0f 92       	push	r0
    5bbe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5bc2:	2f 93       	push	r18
    5bc4:	3f 93       	push	r19
    5bc6:	4f 93       	push	r20
    5bc8:	5f 93       	push	r21
    5bca:	6f 93       	push	r22
    5bcc:	7f 93       	push	r23
    5bce:	8f 93       	push	r24
    5bd0:	9f 93       	push	r25
    5bd2:	af 93       	push	r26
    5bd4:	bf 93       	push	r27
    5bd6:	ef 93       	push	r30
    5bd8:	ff 93       	push	r31
    5bda:	cf 93       	push	r28
    5bdc:	df 93       	push	r29
    5bde:	cd b7       	in	r28, 0x3d	; 61
    5be0:	de b7       	in	r29, 0x3e	; 62
    5be2:	5f d1       	rcall	.+702    	; 0x5ea2 <twim_interrupt_handler>
    5be4:	00 00       	nop
    5be6:	df 91       	pop	r29
    5be8:	cf 91       	pop	r28
    5bea:	ff 91       	pop	r31
    5bec:	ef 91       	pop	r30
    5bee:	bf 91       	pop	r27
    5bf0:	af 91       	pop	r26
    5bf2:	9f 91       	pop	r25
    5bf4:	8f 91       	pop	r24
    5bf6:	7f 91       	pop	r23
    5bf8:	6f 91       	pop	r22
    5bfa:	5f 91       	pop	r21
    5bfc:	4f 91       	pop	r20
    5bfe:	3f 91       	pop	r19
    5c00:	2f 91       	pop	r18
    5c02:	0f 90       	pop	r0
    5c04:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5c08:	0f 90       	pop	r0
    5c0a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c0e:	0f 90       	pop	r0
    5c10:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5c14:	0f 90       	pop	r0
    5c16:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c1a:	0f 90       	pop	r0
    5c1c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5c20:	0f 90       	pop	r0
    5c22:	1f 90       	pop	r1
    5c24:	18 95       	reti

00005c26 <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    5c26:	cf 93       	push	r28
    5c28:	df 93       	push	r29
    5c2a:	1f 92       	push	r1
    5c2c:	1f 92       	push	r1
    5c2e:	cd b7       	in	r28, 0x3d	; 61
    5c30:	de b7       	in	r29, 0x3e	; 62
    5c32:	89 83       	std	Y+1, r24	; 0x01
    5c34:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5c36:	89 81       	ldd	r24, Y+1	; 0x01
    5c38:	9a 81       	ldd	r25, Y+2	; 0x02
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	84 81       	ldd	r24, Z+4	; 0x04
    5c3e:	88 2f       	mov	r24, r24
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	83 70       	andi	r24, 0x03	; 3
    5c44:	99 27       	eor	r25, r25
    5c46:	21 e0       	ldi	r18, 0x01	; 1
    5c48:	01 97       	sbiw	r24, 0x01	; 1
    5c4a:	09 f0       	breq	.+2      	; 0x5c4e <twim_idle+0x28>
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    5c50:	0f 90       	pop	r0
    5c52:	0f 90       	pop	r0
    5c54:	df 91       	pop	r29
    5c56:	cf 91       	pop	r28
    5c58:	08 95       	ret

00005c5a <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    5c5a:	cf 93       	push	r28
    5c5c:	df 93       	push	r29
    5c5e:	1f 92       	push	r1
    5c60:	1f 92       	push	r1
    5c62:	cd b7       	in	r28, 0x3d	; 61
    5c64:	de b7       	in	r29, 0x3e	; 62
    5c66:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    5c68:	05 c0       	rjmp	.+10     	; 0x5c74 <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    5c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c6c:	88 23       	and	r24, r24
    5c6e:	11 f0       	breq	.+4      	; 0x5c74 <twim_acquire+0x1a>
    5c70:	86 ef       	ldi	r24, 0xF6	; 246
    5c72:	0f c0       	rjmp	.+30     	; 0x5c92 <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    5c74:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <transfer+0x9>
    5c78:	88 23       	and	r24, r24
    5c7a:	b9 f7       	brne	.-18     	; 0x5c6a <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    5c7c:	84 de       	rcall	.-760    	; 0x5986 <cpu_irq_save>
    5c7e:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    5c80:	81 e0       	ldi	r24, 0x01	; 1
    5c82:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    5c86:	80 e8       	ldi	r24, 0x80	; 128
    5c88:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <transfer+0xa>

	cpu_irq_restore (flags);
    5c8c:	89 81       	ldd	r24, Y+1	; 0x01
    5c8e:	8b de       	rcall	.-746    	; 0x59a6 <cpu_irq_restore>

	return STATUS_OK;
    5c90:	80 e0       	ldi	r24, 0x00	; 0
}
    5c92:	0f 90       	pop	r0
    5c94:	0f 90       	pop	r0
    5c96:	df 91       	pop	r29
    5c98:	cf 91       	pop	r28
    5c9a:	08 95       	ret

00005c9c <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    5c9c:	cf 93       	push	r28
    5c9e:	df 93       	push	r29
    5ca0:	1f 92       	push	r1
    5ca2:	cd b7       	in	r28, 0x3d	; 61
    5ca4:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    5ca6:	00 00       	nop
    5ca8:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <transfer+0xa>
    5cac:	80 38       	cpi	r24, 0x80	; 128
    5cae:	e1 f3       	breq	.-8      	; 0x5ca8 <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    5cb0:	00 c0       	rjmp	.+0      	; 0x5cb2 <twim_release+0x16>
    5cb2:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5cb6:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5cba:	b5 df       	rcall	.-150    	; 0x5c26 <twim_idle>
    5cbc:	98 2f       	mov	r25, r24
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	89 27       	eor	r24, r25
    5cc2:	88 23       	and	r24, r24
    5cc4:	b1 f7       	brne	.-20     	; 0x5cb2 <twim_release+0x16>

	status_code_t const status = transfer.status;
    5cc6:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <transfer+0xa>
    5cca:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    5ccc:	10 92 61 22 	sts	0x2261, r1	; 0x802261 <transfer+0x9>

	return status;
    5cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    5cd2:	0f 90       	pop	r0
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	08 95       	ret

00005cda <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	cd b7       	in	r28, 0x3d	; 61
    5ce0:	de b7       	in	r29, 0x3e	; 62
    5ce2:	28 97       	sbiw	r28, 0x08	; 8
    5ce4:	cd bf       	out	0x3d, r28	; 61
    5ce6:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    5ce8:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5cec:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5cf0:	89 83       	std	Y+1, r24	; 0x01
    5cf2:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    5cf4:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <transfer+0x2>
    5cf8:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <transfer+0x3>
    5cfc:	8b 83       	std	Y+3, r24	; 0x03
    5cfe:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    5d00:	20 91 5c 22 	lds	r18, 0x225C	; 0x80225c <transfer+0x4>
    5d04:	30 91 5d 22 	lds	r19, 0x225D	; 0x80225d <transfer+0x5>
    5d08:	8b 81       	ldd	r24, Y+3	; 0x03
    5d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d0c:	fc 01       	movw	r30, r24
    5d0e:	84 81       	ldd	r24, Z+4	; 0x04
    5d10:	95 81       	ldd	r25, Z+5	; 0x05
    5d12:	28 17       	cp	r18, r24
    5d14:	39 07       	cpc	r19, r25
    5d16:	e4 f4       	brge	.+56     	; 0x5d50 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    5d18:	8b 81       	ldd	r24, Y+3	; 0x03
    5d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d1c:	01 96       	adiw	r24, 0x01	; 1
    5d1e:	8d 83       	std	Y+5, r24	; 0x05
    5d20:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    5d22:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <transfer+0x4>
    5d26:	90 91 5d 22 	lds	r25, 0x225D	; 0x80225d <transfer+0x5>
    5d2a:	9c 01       	movw	r18, r24
    5d2c:	2f 5f       	subi	r18, 0xFF	; 255
    5d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d30:	20 93 5c 22 	sts	0x225C, r18	; 0x80225c <transfer+0x4>
    5d34:	30 93 5d 22 	sts	0x225D, r19	; 0x80225d <transfer+0x5>
    5d38:	9c 01       	movw	r18, r24
    5d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5d3e:	82 0f       	add	r24, r18
    5d40:	93 1f       	adc	r25, r19
    5d42:	fc 01       	movw	r30, r24
    5d44:	20 81       	ld	r18, Z
    5d46:	89 81       	ldd	r24, Y+1	; 0x01
    5d48:	9a 81       	ldd	r25, Y+2	; 0x02
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    5d4e:	3f c0       	rjmp	.+126    	; 0x5dce <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    5d50:	20 91 5e 22 	lds	r18, 0x225E	; 0x80225e <transfer+0x6>
    5d54:	30 91 5f 22 	lds	r19, 0x225F	; 0x80225f <transfer+0x7>
    5d58:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d5c:	fc 01       	movw	r30, r24
    5d5e:	80 85       	ldd	r24, Z+8	; 0x08
    5d60:	91 85       	ldd	r25, Z+9	; 0x09
    5d62:	28 17       	cp	r18, r24
    5d64:	39 07       	cpc	r19, r25
    5d66:	60 f5       	brcc	.+88     	; 0x5dc0 <twim_write_handler+0xe6>

		if (transfer.read) {
    5d68:	80 91 60 22 	lds	r24, 0x2260	; 0x802260 <transfer+0x8>
    5d6c:	88 23       	and	r24, r24
    5d6e:	59 f0       	breq	.+22     	; 0x5d86 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    5d70:	89 81       	ldd	r24, Y+1	; 0x01
    5d72:	9a 81       	ldd	r25, Y+2	; 0x02
    5d74:	fc 01       	movw	r30, r24
    5d76:	86 81       	ldd	r24, Z+6	; 0x06
    5d78:	28 2f       	mov	r18, r24
    5d7a:	21 60       	ori	r18, 0x01	; 1
    5d7c:	89 81       	ldd	r24, Y+1	; 0x01
    5d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d80:	fc 01       	movw	r30, r24
    5d82:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    5d84:	24 c0       	rjmp	.+72     	; 0x5dce <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    5d86:	8b 81       	ldd	r24, Y+3	; 0x03
    5d88:	9c 81       	ldd	r25, Y+4	; 0x04
    5d8a:	fc 01       	movw	r30, r24
    5d8c:	86 81       	ldd	r24, Z+6	; 0x06
    5d8e:	97 81       	ldd	r25, Z+7	; 0x07
    5d90:	8f 83       	std	Y+7, r24	; 0x07
    5d92:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    5d94:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <transfer+0x6>
    5d98:	90 91 5f 22 	lds	r25, 0x225F	; 0x80225f <transfer+0x7>
    5d9c:	9c 01       	movw	r18, r24
    5d9e:	2f 5f       	subi	r18, 0xFF	; 255
    5da0:	3f 4f       	sbci	r19, 0xFF	; 255
    5da2:	20 93 5e 22 	sts	0x225E, r18	; 0x80225e <transfer+0x6>
    5da6:	30 93 5f 22 	sts	0x225F, r19	; 0x80225f <transfer+0x7>
    5daa:	2f 81       	ldd	r18, Y+7	; 0x07
    5dac:	38 85       	ldd	r19, Y+8	; 0x08
    5dae:	82 0f       	add	r24, r18
    5db0:	93 1f       	adc	r25, r19
    5db2:	fc 01       	movw	r30, r24
    5db4:	20 81       	ld	r18, Z
    5db6:	89 81       	ldd	r24, Y+1	; 0x01
    5db8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dba:	fc 01       	movw	r30, r24
    5dbc:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    5dbe:	07 c0       	rjmp	.+14     	; 0x5dce <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5dc0:	89 81       	ldd	r24, Y+1	; 0x01
    5dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc4:	23 e0       	ldi	r18, 0x03	; 3
    5dc6:	fc 01       	movw	r30, r24
    5dc8:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    5dca:	10 92 62 22 	sts	0x2262, r1	; 0x802262 <transfer+0xa>
	}
}
    5dce:	00 00       	nop
    5dd0:	28 96       	adiw	r28, 0x08	; 8
    5dd2:	cd bf       	out	0x3d, r28	; 61
    5dd4:	de bf       	out	0x3e, r29	; 62
    5dd6:	df 91       	pop	r29
    5dd8:	cf 91       	pop	r28
    5dda:	08 95       	ret

00005ddc <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
    5de0:	00 d0       	rcall	.+0      	; 0x5de2 <twim_read_handler+0x6>
    5de2:	00 d0       	rcall	.+0      	; 0x5de4 <twim_read_handler+0x8>
    5de4:	cd b7       	in	r28, 0x3d	; 61
    5de6:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    5de8:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5dec:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5df0:	89 83       	std	Y+1, r24	; 0x01
    5df2:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    5df4:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <transfer+0x2>
    5df8:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <transfer+0x3>
    5dfc:	8b 83       	std	Y+3, r24	; 0x03
    5dfe:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    5e00:	20 91 5e 22 	lds	r18, 0x225E	; 0x80225e <transfer+0x6>
    5e04:	30 91 5f 22 	lds	r19, 0x225F	; 0x80225f <transfer+0x7>
    5e08:	8b 81       	ldd	r24, Y+3	; 0x03
    5e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e0c:	fc 01       	movw	r30, r24
    5e0e:	80 85       	ldd	r24, Z+8	; 0x08
    5e10:	91 85       	ldd	r25, Z+9	; 0x09
    5e12:	28 17       	cp	r18, r24
    5e14:	39 07       	cpc	r19, r25
    5e16:	b0 f5       	brcc	.+108    	; 0x5e84 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    5e18:	8b 81       	ldd	r24, Y+3	; 0x03
    5e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	86 81       	ldd	r24, Z+6	; 0x06
    5e20:	97 81       	ldd	r25, Z+7	; 0x07
    5e22:	8d 83       	std	Y+5, r24	; 0x05
    5e24:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    5e26:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <transfer+0x6>
    5e2a:	90 91 5f 22 	lds	r25, 0x225F	; 0x80225f <transfer+0x7>
    5e2e:	9c 01       	movw	r18, r24
    5e30:	2f 5f       	subi	r18, 0xFF	; 255
    5e32:	3f 4f       	sbci	r19, 0xFF	; 255
    5e34:	20 93 5e 22 	sts	0x225E, r18	; 0x80225e <transfer+0x6>
    5e38:	30 93 5f 22 	sts	0x225F, r19	; 0x80225f <transfer+0x7>
    5e3c:	2d 81       	ldd	r18, Y+5	; 0x05
    5e3e:	3e 81       	ldd	r19, Y+6	; 0x06
    5e40:	82 0f       	add	r24, r18
    5e42:	93 1f       	adc	r25, r19
    5e44:	29 81       	ldd	r18, Y+1	; 0x01
    5e46:	3a 81       	ldd	r19, Y+2	; 0x02
    5e48:	f9 01       	movw	r30, r18
    5e4a:	27 81       	ldd	r18, Z+7	; 0x07
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    5e50:	20 91 5e 22 	lds	r18, 0x225E	; 0x80225e <transfer+0x6>
    5e54:	30 91 5f 22 	lds	r19, 0x225F	; 0x80225f <transfer+0x7>
    5e58:	8b 81       	ldd	r24, Y+3	; 0x03
    5e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	80 85       	ldd	r24, Z+8	; 0x08
    5e60:	91 85       	ldd	r25, Z+9	; 0x09
    5e62:	28 17       	cp	r18, r24
    5e64:	39 07       	cpc	r19, r25
    5e66:	30 f4       	brcc	.+12     	; 0x5e74 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5e68:	89 81       	ldd	r24, Y+1	; 0x01
    5e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e6c:	22 e0       	ldi	r18, 0x02	; 2
    5e6e:	fc 01       	movw	r30, r24
    5e70:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    5e72:	10 c0       	rjmp	.+32     	; 0x5e94 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    5e74:	89 81       	ldd	r24, Y+1	; 0x01
    5e76:	9a 81       	ldd	r25, Y+2	; 0x02
    5e78:	27 e0       	ldi	r18, 0x07	; 7
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    5e7e:	10 92 62 22 	sts	0x2262, r1	; 0x802262 <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    5e82:	08 c0       	rjmp	.+16     	; 0x5e94 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
    5e86:	9a 81       	ldd	r25, Y+2	; 0x02
    5e88:	23 e0       	ldi	r18, 0x03	; 3
    5e8a:	fc 01       	movw	r30, r24
    5e8c:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    5e8e:	89 ef       	ldi	r24, 0xF9	; 249
    5e90:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <transfer+0xa>
	}
}
    5e94:	00 00       	nop
    5e96:	26 96       	adiw	r28, 0x06	; 6
    5e98:	cd bf       	out	0x3d, r28	; 61
    5e9a:	de bf       	out	0x3e, r29	; 62
    5e9c:	df 91       	pop	r29
    5e9e:	cf 91       	pop	r28
    5ea0:	08 95       	ret

00005ea2 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	1f 92       	push	r1
    5ea8:	cd b7       	in	r28, 0x3d	; 61
    5eaa:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    5eac:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5eb0:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5eb4:	fc 01       	movw	r30, r24
    5eb6:	84 81       	ldd	r24, Z+4	; 0x04
    5eb8:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    5eba:	89 81       	ldd	r24, Y+1	; 0x01
    5ebc:	88 2f       	mov	r24, r24
    5ebe:	90 e0       	ldi	r25, 0x00	; 0
    5ec0:	88 70       	andi	r24, 0x08	; 8
    5ec2:	99 27       	eor	r25, r25
    5ec4:	89 2b       	or	r24, r25
    5ec6:	99 f0       	breq	.+38     	; 0x5eee <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    5ec8:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5ecc:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5ed0:	29 81       	ldd	r18, Y+1	; 0x01
    5ed2:	28 60       	ori	r18, 0x08	; 8
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    5ed8:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5edc:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5ee0:	23 e0       	ldi	r18, 0x03	; 3
    5ee2:	fc 01       	movw	r30, r24
    5ee4:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    5ee6:	86 ef       	ldi	r24, 0xF6	; 246
    5ee8:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    5eec:	2a c0       	rjmp	.+84     	; 0x5f42 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    5eee:	89 81       	ldd	r24, Y+1	; 0x01
    5ef0:	88 2f       	mov	r24, r24
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	84 70       	andi	r24, 0x04	; 4
    5ef6:	99 27       	eor	r25, r25
    5ef8:	89 2b       	or	r24, r25
    5efa:	39 f4       	brne	.+14     	; 0x5f0a <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    5efc:	89 81       	ldd	r24, Y+1	; 0x01
    5efe:	88 2f       	mov	r24, r24
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	80 71       	andi	r24, 0x10	; 16
    5f04:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    5f06:	89 2b       	or	r24, r25
    5f08:	59 f0       	breq	.+22     	; 0x5f20 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5f0a:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    5f0e:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    5f12:	23 e0       	ldi	r18, 0x03	; 3
    5f14:	fc 01       	movw	r30, r24
    5f16:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    5f18:	8f ef       	ldi	r24, 0xFF	; 255
    5f1a:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    5f1e:	11 c0       	rjmp	.+34     	; 0x5f42 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    5f20:	89 81       	ldd	r24, Y+1	; 0x01
    5f22:	88 2f       	mov	r24, r24
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	80 74       	andi	r24, 0x40	; 64
    5f28:	99 27       	eor	r25, r25
    5f2a:	89 2b       	or	r24, r25
    5f2c:	11 f0       	breq	.+4      	; 0x5f32 <twim_interrupt_handler+0x90>

		twim_write_handler();
    5f2e:	d5 de       	rcall	.-598    	; 0x5cda <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    5f30:	08 c0       	rjmp	.+16     	; 0x5f42 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    5f32:	89 81       	ldd	r24, Y+1	; 0x01
    5f34:	88 23       	and	r24, r24

		twim_read_handler();
    5f36:	14 f4       	brge	.+4      	; 0x5f3c <twim_interrupt_handler+0x9a>
    5f38:	51 df       	rcall	.-350    	; 0x5ddc <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    5f3a:	03 c0       	rjmp	.+6      	; 0x5f42 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    5f3c:	8b ef       	ldi	r24, 0xFB	; 251
    5f3e:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <transfer+0xa>
	}
}
    5f42:	00 00       	nop
    5f44:	0f 90       	pop	r0
    5f46:	df 91       	pop	r29
    5f48:	cf 91       	pop	r28
    5f4a:	08 95       	ret

00005f4c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    5f4c:	cf 93       	push	r28
    5f4e:	df 93       	push	r29
    5f50:	cd b7       	in	r28, 0x3d	; 61
    5f52:	de b7       	in	r29, 0x3e	; 62
    5f54:	25 97       	sbiw	r28, 0x05	; 5
    5f56:	cd bf       	out	0x3d, r28	; 61
    5f58:	de bf       	out	0x3e, r29	; 62
    5f5a:	8a 83       	std	Y+2, r24	; 0x02
    5f5c:	9b 83       	std	Y+3, r25	; 0x03
    5f5e:	6c 83       	std	Y+4, r22	; 0x04
    5f60:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    5f62:	88 eb       	ldi	r24, 0xB8	; 184
    5f64:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    5f66:	8c 81       	ldd	r24, Y+4	; 0x04
    5f68:	9d 81       	ldd	r25, Y+5	; 0x05
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	84 81       	ldd	r24, Z+4	; 0x04
    5f6e:	95 81       	ldd	r25, Z+5	; 0x05
    5f70:	a6 81       	ldd	r26, Z+6	; 0x06
    5f72:	b7 81       	ldd	r27, Z+7	; 0x07
    5f74:	28 2f       	mov	r18, r24
    5f76:	8a 81       	ldd	r24, Y+2	; 0x02
    5f78:	9b 81       	ldd	r25, Y+3	; 0x03
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    5f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f80:	9b 81       	ldd	r25, Y+3	; 0x03
    5f82:	29 81       	ldd	r18, Y+1	; 0x01
    5f84:	fc 01       	movw	r30, r24
    5f86:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    5f88:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f8c:	21 e0       	ldi	r18, 0x01	; 1
    5f8e:	fc 01       	movw	r30, r24
    5f90:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    5f92:	10 92 61 22 	sts	0x2261, r1	; 0x802261 <transfer+0x9>
	transfer.status    = STATUS_OK;
    5f96:	10 92 62 22 	sts	0x2262, r1	; 0x802262 <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    5f9a:	80 ea       	ldi	r24, 0xA0	; 160
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	20 ea       	ldi	r18, 0xA0	; 160
    5fa0:	30 e0       	ldi	r19, 0x00	; 0
    5fa2:	f9 01       	movw	r30, r18
    5fa4:	22 81       	ldd	r18, Z+2	; 0x02
    5fa6:	22 60       	ori	r18, 0x02	; 2
    5fa8:	fc 01       	movw	r30, r24
    5faa:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    5fac:	78 94       	sei

	return STATUS_OK;
    5fae:	80 e0       	ldi	r24, 0x00	; 0
}
    5fb0:	25 96       	adiw	r28, 0x05	; 5
    5fb2:	cd bf       	out	0x3d, r28	; 61
    5fb4:	de bf       	out	0x3e, r29	; 62
    5fb6:	df 91       	pop	r29
    5fb8:	cf 91       	pop	r28
    5fba:	08 95       	ret

00005fbc <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    5fbc:	cf 93       	push	r28
    5fbe:	df 93       	push	r29
    5fc0:	cd b7       	in	r28, 0x3d	; 61
    5fc2:	de b7       	in	r29, 0x3e	; 62
    5fc4:	27 97       	sbiw	r28, 0x07	; 7
    5fc6:	cd bf       	out	0x3d, r28	; 61
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	8b 83       	std	Y+3, r24	; 0x03
    5fcc:	9c 83       	std	Y+4, r25	; 0x04
    5fce:	6d 83       	std	Y+5, r22	; 0x05
    5fd0:	7e 83       	std	Y+6, r23	; 0x06
    5fd2:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    5fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    5fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    5fd8:	89 2b       	or	r24, r25
    5fda:	21 f0       	breq	.+8      	; 0x5fe4 <twi_master_transfer+0x28>
    5fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    5fde:	9e 81       	ldd	r25, Y+6	; 0x06
    5fe0:	89 2b       	or	r24, r25
    5fe2:	11 f4       	brne	.+4      	; 0x5fe8 <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    5fe4:	88 ef       	ldi	r24, 0xF8	; 248
    5fe6:	49 c0       	rjmp	.+146    	; 0x607a <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    5fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    5fea:	9e 81       	ldd	r25, Y+6	; 0x06
    5fec:	fc 01       	movw	r30, r24
    5fee:	82 85       	ldd	r24, Z+10	; 0x0a
    5ff0:	34 de       	rcall	.-920    	; 0x5c5a <twim_acquire>
    5ff2:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    5ff4:	89 81       	ldd	r24, Y+1	; 0x01
    5ff6:	88 23       	and	r24, r24
    5ff8:	09 f0       	breq	.+2      	; 0x5ffc <twi_master_transfer+0x40>
    5ffa:	3e c0       	rjmp	.+124    	; 0x6078 <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    5ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    6000:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <transfer>
    6004:	90 93 59 22 	sts	0x2259, r25	; 0x802259 <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    6008:	8d 81       	ldd	r24, Y+5	; 0x05
    600a:	9e 81       	ldd	r25, Y+6	; 0x06
    600c:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <transfer+0x2>
    6010:	90 93 5b 22 	sts	0x225B, r25	; 0x80225b <transfer+0x3>
		transfer.addr_count  = 0;
    6014:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <transfer+0x4>
    6018:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <transfer+0x5>
		transfer.data_count  = 0;
    601c:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <transfer+0x6>
    6020:	10 92 5f 22 	sts	0x225F, r1	; 0x80225f <transfer+0x7>
		transfer.read        = read;
    6024:	8f 81       	ldd	r24, Y+7	; 0x07
    6026:	80 93 60 22 	sts	0x2260, r24	; 0x802260 <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    602a:	8d 81       	ldd	r24, Y+5	; 0x05
    602c:	9e 81       	ldd	r25, Y+6	; 0x06
    602e:	fc 01       	movw	r30, r24
    6030:	80 81       	ld	r24, Z
    6032:	88 0f       	add	r24, r24
    6034:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    6036:	8d 81       	ldd	r24, Y+5	; 0x05
    6038:	9e 81       	ldd	r25, Y+6	; 0x06
    603a:	fc 01       	movw	r30, r24
    603c:	84 81       	ldd	r24, Z+4	; 0x04
    603e:	95 81       	ldd	r25, Z+5	; 0x05
    6040:	89 2b       	or	r24, r25
    6042:	29 f4       	brne	.+10     	; 0x604e <twi_master_transfer+0x92>
    6044:	9f 81       	ldd	r25, Y+7	; 0x07
    6046:	81 e0       	ldi	r24, 0x01	; 1
    6048:	89 27       	eor	r24, r25
    604a:	88 23       	and	r24, r24
    604c:	41 f0       	breq	.+16     	; 0x605e <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    604e:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    6052:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    6056:	2a 81       	ldd	r18, Y+2	; 0x02
    6058:	fc 01       	movw	r30, r24
    605a:	26 83       	std	Z+6, r18	; 0x06
    605c:	0b c0       	rjmp	.+22     	; 0x6074 <twi_master_transfer+0xb8>
		} else if (read) {
    605e:	8f 81       	ldd	r24, Y+7	; 0x07
    6060:	88 23       	and	r24, r24
    6062:	41 f0       	breq	.+16     	; 0x6074 <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    6064:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <transfer>
    6068:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <transfer+0x1>
    606c:	2a 81       	ldd	r18, Y+2	; 0x02
    606e:	21 60       	ori	r18, 0x01	; 1
    6070:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    6072:	26 83       	std	Z+6, r18	; 0x06
    6074:	13 de       	rcall	.-986    	; 0x5c9c <twim_release>
    6076:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    6078:	89 81       	ldd	r24, Y+1	; 0x01
}
    607a:	27 96       	adiw	r28, 0x07	; 7
    607c:	cd bf       	out	0x3d, r28	; 61
    607e:	de bf       	out	0x3e, r29	; 62
    6080:	df 91       	pop	r29
    6082:	cf 91       	pop	r28
    6084:	08 95       	ret

00006086 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    6086:	cf 93       	push	r28
    6088:	df 93       	push	r29
    608a:	1f 92       	push	r1
    608c:	1f 92       	push	r1
    608e:	cd b7       	in	r28, 0x3d	; 61
    6090:	de b7       	in	r29, 0x3e	; 62
    6092:	89 83       	std	Y+1, r24	; 0x01
    6094:	9a 83       	std	Y+2, r25	; 0x02
    6096:	89 81       	ldd	r24, Y+1	; 0x01
    6098:	9a 81       	ldd	r25, Y+2	; 0x02
    609a:	fc 01       	movw	r30, r24
    609c:	84 81       	ldd	r24, Z+4	; 0x04
    609e:	28 2f       	mov	r18, r24
    60a0:	20 61       	ori	r18, 0x10	; 16
    60a2:	89 81       	ldd	r24, Y+1	; 0x01
    60a4:	9a 81       	ldd	r25, Y+2	; 0x02
    60a6:	fc 01       	movw	r30, r24
    60a8:	24 83       	std	Z+4, r18	; 0x04
    60aa:	00 00       	nop
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <usart_format_set>:
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	cd b7       	in	r28, 0x3d	; 61
    60bc:	de b7       	in	r29, 0x3e	; 62
    60be:	25 97       	sbiw	r28, 0x05	; 5
    60c0:	cd bf       	out	0x3d, r28	; 61
    60c2:	de bf       	out	0x3e, r29	; 62
    60c4:	89 83       	std	Y+1, r24	; 0x01
    60c6:	9a 83       	std	Y+2, r25	; 0x02
    60c8:	6b 83       	std	Y+3, r22	; 0x03
    60ca:	4c 83       	std	Y+4, r20	; 0x04
    60cc:	2d 83       	std	Y+5, r18	; 0x05
    60ce:	9b 81       	ldd	r25, Y+3	; 0x03
    60d0:	8c 81       	ldd	r24, Y+4	; 0x04
    60d2:	89 2b       	or	r24, r25
    60d4:	98 2f       	mov	r25, r24
    60d6:	8d 81       	ldd	r24, Y+5	; 0x05
    60d8:	88 23       	and	r24, r24
    60da:	11 f0       	breq	.+4      	; 0x60e0 <usart_format_set+0x2a>
    60dc:	88 e0       	ldi	r24, 0x08	; 8
    60de:	01 c0       	rjmp	.+2      	; 0x60e2 <usart_format_set+0x2c>
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	89 2b       	or	r24, r25
    60e4:	28 2f       	mov	r18, r24
    60e6:	89 81       	ldd	r24, Y+1	; 0x01
    60e8:	9a 81       	ldd	r25, Y+2	; 0x02
    60ea:	fc 01       	movw	r30, r24
    60ec:	25 83       	std	Z+5, r18	; 0x05
    60ee:	00 00       	nop
    60f0:	25 96       	adiw	r28, 0x05	; 5
    60f2:	cd bf       	out	0x3d, r28	; 61
    60f4:	de bf       	out	0x3e, r29	; 62
    60f6:	df 91       	pop	r29
    60f8:	cf 91       	pop	r28
    60fa:	08 95       	ret

000060fc <usart_tx_enable>:
    60fc:	cf 93       	push	r28
    60fe:	df 93       	push	r29
    6100:	1f 92       	push	r1
    6102:	1f 92       	push	r1
    6104:	cd b7       	in	r28, 0x3d	; 61
    6106:	de b7       	in	r29, 0x3e	; 62
    6108:	89 83       	std	Y+1, r24	; 0x01
    610a:	9a 83       	std	Y+2, r25	; 0x02
    610c:	89 81       	ldd	r24, Y+1	; 0x01
    610e:	9a 81       	ldd	r25, Y+2	; 0x02
    6110:	fc 01       	movw	r30, r24
    6112:	84 81       	ldd	r24, Z+4	; 0x04
    6114:	28 2f       	mov	r18, r24
    6116:	28 60       	ori	r18, 0x08	; 8
    6118:	89 81       	ldd	r24, Y+1	; 0x01
    611a:	9a 81       	ldd	r25, Y+2	; 0x02
    611c:	fc 01       	movw	r30, r24
    611e:	24 83       	std	Z+4, r18	; 0x04
    6120:	00 00       	nop
    6122:	0f 90       	pop	r0
    6124:	0f 90       	pop	r0
    6126:	df 91       	pop	r29
    6128:	cf 91       	pop	r28
    612a:	08 95       	ret

0000612c <usart_set_mode>:
    612c:	cf 93       	push	r28
    612e:	df 93       	push	r29
    6130:	00 d0       	rcall	.+0      	; 0x6132 <usart_set_mode+0x6>
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
    6136:	89 83       	std	Y+1, r24	; 0x01
    6138:	9a 83       	std	Y+2, r25	; 0x02
    613a:	6b 83       	std	Y+3, r22	; 0x03
    613c:	89 81       	ldd	r24, Y+1	; 0x01
    613e:	9a 81       	ldd	r25, Y+2	; 0x02
    6140:	fc 01       	movw	r30, r24
    6142:	85 81       	ldd	r24, Z+5	; 0x05
    6144:	98 2f       	mov	r25, r24
    6146:	9f 73       	andi	r25, 0x3F	; 63
    6148:	8b 81       	ldd	r24, Y+3	; 0x03
    614a:	89 2b       	or	r24, r25
    614c:	28 2f       	mov	r18, r24
    614e:	89 81       	ldd	r24, Y+1	; 0x01
    6150:	9a 81       	ldd	r25, Y+2	; 0x02
    6152:	fc 01       	movw	r30, r24
    6154:	25 83       	std	Z+5, r18	; 0x05
    6156:	00 00       	nop
    6158:	23 96       	adiw	r28, 0x03	; 3
    615a:	cd bf       	out	0x3d, r28	; 61
    615c:	de bf       	out	0x3e, r29	; 62
    615e:	df 91       	pop	r29
    6160:	cf 91       	pop	r28
    6162:	08 95       	ret

00006164 <usart_data_register_is_empty>:
    6164:	cf 93       	push	r28
    6166:	df 93       	push	r29
    6168:	1f 92       	push	r1
    616a:	1f 92       	push	r1
    616c:	cd b7       	in	r28, 0x3d	; 61
    616e:	de b7       	in	r29, 0x3e	; 62
    6170:	89 83       	std	Y+1, r24	; 0x01
    6172:	9a 83       	std	Y+2, r25	; 0x02
    6174:	89 81       	ldd	r24, Y+1	; 0x01
    6176:	9a 81       	ldd	r25, Y+2	; 0x02
    6178:	fc 01       	movw	r30, r24
    617a:	81 81       	ldd	r24, Z+1	; 0x01
    617c:	88 2f       	mov	r24, r24
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	80 72       	andi	r24, 0x20	; 32
    6182:	99 27       	eor	r25, r25
    6184:	21 e0       	ldi	r18, 0x01	; 1
    6186:	89 2b       	or	r24, r25
    6188:	09 f4       	brne	.+2      	; 0x618c <usart_data_register_is_empty+0x28>
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	82 2f       	mov	r24, r18
    618e:	0f 90       	pop	r0
    6190:	0f 90       	pop	r0
    6192:	df 91       	pop	r29
    6194:	cf 91       	pop	r28
    6196:	08 95       	ret

00006198 <usart_rx_is_complete>:
    6198:	cf 93       	push	r28
    619a:	df 93       	push	r29
    619c:	1f 92       	push	r1
    619e:	1f 92       	push	r1
    61a0:	cd b7       	in	r28, 0x3d	; 61
    61a2:	de b7       	in	r29, 0x3e	; 62
    61a4:	89 83       	std	Y+1, r24	; 0x01
    61a6:	9a 83       	std	Y+2, r25	; 0x02
    61a8:	89 81       	ldd	r24, Y+1	; 0x01
    61aa:	9a 81       	ldd	r25, Y+2	; 0x02
    61ac:	fc 01       	movw	r30, r24
    61ae:	81 81       	ldd	r24, Z+1	; 0x01
    61b0:	88 2f       	mov	r24, r24
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	80 78       	andi	r24, 0x80	; 128
    61b6:	99 27       	eor	r25, r25
    61b8:	21 e0       	ldi	r18, 0x01	; 1
    61ba:	89 2b       	or	r24, r25
    61bc:	09 f4       	brne	.+2      	; 0x61c0 <usart_rx_is_complete+0x28>
    61be:	20 e0       	ldi	r18, 0x00	; 0
    61c0:	82 2f       	mov	r24, r18
    61c2:	0f 90       	pop	r0
    61c4:	0f 90       	pop	r0
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	08 95       	ret

000061cc <sysclk_get_main_hz>:
    61cc:	cf 93       	push	r28
    61ce:	df 93       	push	r29
    61d0:	cd b7       	in	r28, 0x3d	; 61
    61d2:	de b7       	in	r29, 0x3e	; 62
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	98 e4       	ldi	r25, 0x48	; 72
    61d8:	a8 ee       	ldi	r26, 0xE8	; 232
    61da:	b1 e0       	ldi	r27, 0x01	; 1
    61dc:	bc 01       	movw	r22, r24
    61de:	cd 01       	movw	r24, r26
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	08 95       	ret

000061e6 <sysclk_get_per4_hz>:
    61e6:	cf 93       	push	r28
    61e8:	df 93       	push	r29
    61ea:	1f 92       	push	r1
    61ec:	cd b7       	in	r28, 0x3d	; 61
    61ee:	de b7       	in	r29, 0x3e	; 62
    61f0:	19 82       	std	Y+1, r1	; 0x01
    61f2:	ec df       	rcall	.-40     	; 0x61cc <sysclk_get_main_hz>
    61f4:	dc 01       	movw	r26, r24
    61f6:	cb 01       	movw	r24, r22
    61f8:	29 81       	ldd	r18, Y+1	; 0x01
    61fa:	22 2f       	mov	r18, r18
    61fc:	30 e0       	ldi	r19, 0x00	; 0
    61fe:	04 c0       	rjmp	.+8      	; 0x6208 <sysclk_get_per4_hz+0x22>
    6200:	b6 95       	lsr	r27
    6202:	a7 95       	ror	r26
    6204:	97 95       	ror	r25
    6206:	87 95       	ror	r24
    6208:	2a 95       	dec	r18
    620a:	d2 f7       	brpl	.-12     	; 0x6200 <sysclk_get_per4_hz+0x1a>
    620c:	bc 01       	movw	r22, r24
    620e:	cd 01       	movw	r24, r26
    6210:	0f 90       	pop	r0
    6212:	df 91       	pop	r29
    6214:	cf 91       	pop	r28
    6216:	08 95       	ret

00006218 <sysclk_get_per2_hz>:
    6218:	cf 93       	push	r28
    621a:	df 93       	push	r29
    621c:	cd b7       	in	r28, 0x3d	; 61
    621e:	de b7       	in	r29, 0x3e	; 62
    6220:	e2 df       	rcall	.-60     	; 0x61e6 <sysclk_get_per4_hz>
    6222:	dc 01       	movw	r26, r24
    6224:	cb 01       	movw	r24, r22
    6226:	bc 01       	movw	r22, r24
    6228:	cd 01       	movw	r24, r26
    622a:	df 91       	pop	r29
    622c:	cf 91       	pop	r28
    622e:	08 95       	ret

00006230 <sysclk_get_per_hz>:
    6230:	cf 93       	push	r28
    6232:	df 93       	push	r29
    6234:	cd b7       	in	r28, 0x3d	; 61
    6236:	de b7       	in	r29, 0x3e	; 62
    6238:	ef df       	rcall	.-34     	; 0x6218 <sysclk_get_per2_hz>
    623a:	dc 01       	movw	r26, r24
    623c:	cb 01       	movw	r24, r22
    623e:	bc 01       	movw	r22, r24
    6240:	cd 01       	movw	r24, r26
    6242:	df 91       	pop	r29
    6244:	cf 91       	pop	r28
    6246:	08 95       	ret

00006248 <sysclk_enable_peripheral_clock>:
    6248:	cf 93       	push	r28
    624a:	df 93       	push	r29
    624c:	1f 92       	push	r1
    624e:	1f 92       	push	r1
    6250:	cd b7       	in	r28, 0x3d	; 61
    6252:	de b7       	in	r29, 0x3e	; 62
    6254:	89 83       	std	Y+1, r24	; 0x01
    6256:	9a 83       	std	Y+2, r25	; 0x02
    6258:	89 81       	ldd	r24, Y+1	; 0x01
    625a:	9a 81       	ldd	r25, Y+2	; 0x02
    625c:	89 2b       	or	r24, r25
    625e:	09 f4       	brne	.+2      	; 0x6262 <sysclk_enable_peripheral_clock+0x1a>
    6260:	85 c1       	rjmp	.+778    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6262:	89 81       	ldd	r24, Y+1	; 0x01
    6264:	9a 81       	ldd	r25, Y+2	; 0x02
    6266:	80 3c       	cpi	r24, 0xC0	; 192
    6268:	91 05       	cpc	r25, r1
    626a:	29 f4       	brne	.+10     	; 0x6276 <sysclk_enable_peripheral_clock+0x2e>
    626c:	60 e1       	ldi	r22, 0x10	; 16
    626e:	80 e0       	ldi	r24, 0x00	; 0
    6270:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6274:	7b c1       	rjmp	.+758    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6276:	89 81       	ldd	r24, Y+1	; 0x01
    6278:	9a 81       	ldd	r25, Y+2	; 0x02
    627a:	80 34       	cpi	r24, 0x40	; 64
    627c:	94 40       	sbci	r25, 0x04	; 4
    627e:	29 f4       	brne	.+10     	; 0x628a <sysclk_enable_peripheral_clock+0x42>
    6280:	68 e0       	ldi	r22, 0x08	; 8
    6282:	80 e0       	ldi	r24, 0x00	; 0
    6284:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6288:	71 c1       	rjmp	.+738    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    628a:	89 81       	ldd	r24, Y+1	; 0x01
    628c:	9a 81       	ldd	r25, Y+2	; 0x02
    628e:	81 15       	cp	r24, r1
    6290:	94 40       	sbci	r25, 0x04	; 4
    6292:	29 f4       	brne	.+10     	; 0x629e <sysclk_enable_peripheral_clock+0x56>
    6294:	64 e0       	ldi	r22, 0x04	; 4
    6296:	80 e0       	ldi	r24, 0x00	; 0
    6298:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    629c:	67 c1       	rjmp	.+718    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    629e:	89 81       	ldd	r24, Y+1	; 0x01
    62a0:	9a 81       	ldd	r25, Y+2	; 0x02
    62a2:	80 38       	cpi	r24, 0x80	; 128
    62a4:	91 40       	sbci	r25, 0x01	; 1
    62a6:	29 f4       	brne	.+10     	; 0x62b2 <sysclk_enable_peripheral_clock+0x6a>
    62a8:	62 e0       	ldi	r22, 0x02	; 2
    62aa:	80 e0       	ldi	r24, 0x00	; 0
    62ac:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    62b0:	5d c1       	rjmp	.+698    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    62b2:	89 81       	ldd	r24, Y+1	; 0x01
    62b4:	9a 81       	ldd	r25, Y+2	; 0x02
    62b6:	81 15       	cp	r24, r1
    62b8:	91 40       	sbci	r25, 0x01	; 1
    62ba:	29 f4       	brne	.+10     	; 0x62c6 <sysclk_enable_peripheral_clock+0x7e>
    62bc:	61 e0       	ldi	r22, 0x01	; 1
    62be:	80 e0       	ldi	r24, 0x00	; 0
    62c0:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    62c4:	53 c1       	rjmp	.+678    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    62c6:	89 81       	ldd	r24, Y+1	; 0x01
    62c8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ca:	80 38       	cpi	r24, 0x80	; 128
    62cc:	93 40       	sbci	r25, 0x03	; 3
    62ce:	29 f4       	brne	.+10     	; 0x62da <sysclk_enable_peripheral_clock+0x92>
    62d0:	61 e0       	ldi	r22, 0x01	; 1
    62d2:	81 e0       	ldi	r24, 0x01	; 1
    62d4:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    62d8:	49 c1       	rjmp	.+658    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    62da:	89 81       	ldd	r24, Y+1	; 0x01
    62dc:	9a 81       	ldd	r25, Y+2	; 0x02
    62de:	80 39       	cpi	r24, 0x90	; 144
    62e0:	93 40       	sbci	r25, 0x03	; 3
    62e2:	29 f4       	brne	.+10     	; 0x62ee <sysclk_enable_peripheral_clock+0xa6>
    62e4:	61 e0       	ldi	r22, 0x01	; 1
    62e6:	82 e0       	ldi	r24, 0x02	; 2
    62e8:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    62ec:	3f c1       	rjmp	.+638    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    62ee:	89 81       	ldd	r24, Y+1	; 0x01
    62f0:	9a 81       	ldd	r25, Y+2	; 0x02
    62f2:	81 15       	cp	r24, r1
    62f4:	92 40       	sbci	r25, 0x02	; 2
    62f6:	29 f4       	brne	.+10     	; 0x6302 <sysclk_enable_peripheral_clock+0xba>
    62f8:	62 e0       	ldi	r22, 0x02	; 2
    62fa:	81 e0       	ldi	r24, 0x01	; 1
    62fc:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6300:	35 c1       	rjmp	.+618    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6302:	89 81       	ldd	r24, Y+1	; 0x01
    6304:	9a 81       	ldd	r25, Y+2	; 0x02
    6306:	80 34       	cpi	r24, 0x40	; 64
    6308:	92 40       	sbci	r25, 0x02	; 2
    630a:	29 f4       	brne	.+10     	; 0x6316 <sysclk_enable_peripheral_clock+0xce>
    630c:	62 e0       	ldi	r22, 0x02	; 2
    630e:	82 e0       	ldi	r24, 0x02	; 2
    6310:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6314:	2b c1       	rjmp	.+598    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6316:	89 81       	ldd	r24, Y+1	; 0x01
    6318:	9a 81       	ldd	r25, Y+2	; 0x02
    631a:	81 15       	cp	r24, r1
    631c:	93 40       	sbci	r25, 0x03	; 3
    631e:	29 f4       	brne	.+10     	; 0x632a <sysclk_enable_peripheral_clock+0xe2>
    6320:	64 e0       	ldi	r22, 0x04	; 4
    6322:	81 e0       	ldi	r24, 0x01	; 1
    6324:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6328:	21 c1       	rjmp	.+578    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    632a:	89 81       	ldd	r24, Y+1	; 0x01
    632c:	9a 81       	ldd	r25, Y+2	; 0x02
    632e:	80 32       	cpi	r24, 0x20	; 32
    6330:	93 40       	sbci	r25, 0x03	; 3
    6332:	29 f4       	brne	.+10     	; 0x633e <sysclk_enable_peripheral_clock+0xf6>
    6334:	64 e0       	ldi	r22, 0x04	; 4
    6336:	82 e0       	ldi	r24, 0x02	; 2
    6338:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    633c:	17 c1       	rjmp	.+558    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    633e:	89 81       	ldd	r24, Y+1	; 0x01
    6340:	9a 81       	ldd	r25, Y+2	; 0x02
    6342:	81 15       	cp	r24, r1
    6344:	98 40       	sbci	r25, 0x08	; 8
    6346:	29 f4       	brne	.+10     	; 0x6352 <sysclk_enable_peripheral_clock+0x10a>
    6348:	61 e0       	ldi	r22, 0x01	; 1
    634a:	83 e0       	ldi	r24, 0x03	; 3
    634c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6350:	0d c1       	rjmp	.+538    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6352:	89 81       	ldd	r24, Y+1	; 0x01
    6354:	9a 81       	ldd	r25, Y+2	; 0x02
    6356:	81 15       	cp	r24, r1
    6358:	99 40       	sbci	r25, 0x09	; 9
    635a:	29 f4       	brne	.+10     	; 0x6366 <sysclk_enable_peripheral_clock+0x11e>
    635c:	61 e0       	ldi	r22, 0x01	; 1
    635e:	84 e0       	ldi	r24, 0x04	; 4
    6360:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6364:	03 c1       	rjmp	.+518    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6366:	89 81       	ldd	r24, Y+1	; 0x01
    6368:	9a 81       	ldd	r25, Y+2	; 0x02
    636a:	81 15       	cp	r24, r1
    636c:	9a 40       	sbci	r25, 0x0A	; 10
    636e:	29 f4       	brne	.+10     	; 0x637a <sysclk_enable_peripheral_clock+0x132>
    6370:	61 e0       	ldi	r22, 0x01	; 1
    6372:	85 e0       	ldi	r24, 0x05	; 5
    6374:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6378:	f9 c0       	rjmp	.+498    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    637a:	89 81       	ldd	r24, Y+1	; 0x01
    637c:	9a 81       	ldd	r25, Y+2	; 0x02
    637e:	81 15       	cp	r24, r1
    6380:	9b 40       	sbci	r25, 0x0B	; 11
    6382:	29 f4       	brne	.+10     	; 0x638e <sysclk_enable_peripheral_clock+0x146>
    6384:	61 e0       	ldi	r22, 0x01	; 1
    6386:	86 e0       	ldi	r24, 0x06	; 6
    6388:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    638c:	ef c0       	rjmp	.+478    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    638e:	89 81       	ldd	r24, Y+1	; 0x01
    6390:	9a 81       	ldd	r25, Y+2	; 0x02
    6392:	80 34       	cpi	r24, 0x40	; 64
    6394:	98 40       	sbci	r25, 0x08	; 8
    6396:	29 f4       	brne	.+10     	; 0x63a2 <sysclk_enable_peripheral_clock+0x15a>
    6398:	62 e0       	ldi	r22, 0x02	; 2
    639a:	83 e0       	ldi	r24, 0x03	; 3
    639c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    63a0:	e5 c0       	rjmp	.+458    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    63a2:	89 81       	ldd	r24, Y+1	; 0x01
    63a4:	9a 81       	ldd	r25, Y+2	; 0x02
    63a6:	80 34       	cpi	r24, 0x40	; 64
    63a8:	99 40       	sbci	r25, 0x09	; 9
    63aa:	29 f4       	brne	.+10     	; 0x63b6 <sysclk_enable_peripheral_clock+0x16e>
    63ac:	62 e0       	ldi	r22, 0x02	; 2
    63ae:	84 e0       	ldi	r24, 0x04	; 4
    63b0:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    63b4:	db c0       	rjmp	.+438    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    63b6:	89 81       	ldd	r24, Y+1	; 0x01
    63b8:	9a 81       	ldd	r25, Y+2	; 0x02
    63ba:	80 34       	cpi	r24, 0x40	; 64
    63bc:	9a 40       	sbci	r25, 0x0A	; 10
    63be:	29 f4       	brne	.+10     	; 0x63ca <sysclk_enable_peripheral_clock+0x182>
    63c0:	62 e0       	ldi	r22, 0x02	; 2
    63c2:	85 e0       	ldi	r24, 0x05	; 5
    63c4:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    63c8:	d1 c0       	rjmp	.+418    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    63ca:	89 81       	ldd	r24, Y+1	; 0x01
    63cc:	9a 81       	ldd	r25, Y+2	; 0x02
    63ce:	80 34       	cpi	r24, 0x40	; 64
    63d0:	9b 40       	sbci	r25, 0x0B	; 11
    63d2:	29 f4       	brne	.+10     	; 0x63de <sysclk_enable_peripheral_clock+0x196>
    63d4:	62 e0       	ldi	r22, 0x02	; 2
    63d6:	86 e0       	ldi	r24, 0x06	; 6
    63d8:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    63dc:	c7 c0       	rjmp	.+398    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    63de:	89 81       	ldd	r24, Y+1	; 0x01
    63e0:	9a 81       	ldd	r25, Y+2	; 0x02
    63e2:	80 39       	cpi	r24, 0x90	; 144
    63e4:	98 40       	sbci	r25, 0x08	; 8
    63e6:	29 f4       	brne	.+10     	; 0x63f2 <sysclk_enable_peripheral_clock+0x1aa>
    63e8:	64 e0       	ldi	r22, 0x04	; 4
    63ea:	83 e0       	ldi	r24, 0x03	; 3
    63ec:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    63f0:	bd c0       	rjmp	.+378    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    63f2:	89 81       	ldd	r24, Y+1	; 0x01
    63f4:	9a 81       	ldd	r25, Y+2	; 0x02
    63f6:	80 39       	cpi	r24, 0x90	; 144
    63f8:	99 40       	sbci	r25, 0x09	; 9
    63fa:	29 f4       	brne	.+10     	; 0x6406 <sysclk_enable_peripheral_clock+0x1be>
    63fc:	64 e0       	ldi	r22, 0x04	; 4
    63fe:	84 e0       	ldi	r24, 0x04	; 4
    6400:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6404:	b3 c0       	rjmp	.+358    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6406:	89 81       	ldd	r24, Y+1	; 0x01
    6408:	9a 81       	ldd	r25, Y+2	; 0x02
    640a:	80 39       	cpi	r24, 0x90	; 144
    640c:	9a 40       	sbci	r25, 0x0A	; 10
    640e:	29 f4       	brne	.+10     	; 0x641a <sysclk_enable_peripheral_clock+0x1d2>
    6410:	64 e0       	ldi	r22, 0x04	; 4
    6412:	85 e0       	ldi	r24, 0x05	; 5
    6414:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6418:	a9 c0       	rjmp	.+338    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    641a:	89 81       	ldd	r24, Y+1	; 0x01
    641c:	9a 81       	ldd	r25, Y+2	; 0x02
    641e:	80 39       	cpi	r24, 0x90	; 144
    6420:	9b 40       	sbci	r25, 0x0B	; 11
    6422:	29 f4       	brne	.+10     	; 0x642e <sysclk_enable_peripheral_clock+0x1e6>
    6424:	64 e0       	ldi	r22, 0x04	; 4
    6426:	86 e0       	ldi	r24, 0x06	; 6
    6428:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    642c:	9f c0       	rjmp	.+318    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    642e:	89 81       	ldd	r24, Y+1	; 0x01
    6430:	9a 81       	ldd	r25, Y+2	; 0x02
    6432:	80 3c       	cpi	r24, 0xC0	; 192
    6434:	98 40       	sbci	r25, 0x08	; 8
    6436:	29 f4       	brne	.+10     	; 0x6442 <sysclk_enable_peripheral_clock+0x1fa>
    6438:	68 e0       	ldi	r22, 0x08	; 8
    643a:	83 e0       	ldi	r24, 0x03	; 3
    643c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6440:	95 c0       	rjmp	.+298    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6442:	89 81       	ldd	r24, Y+1	; 0x01
    6444:	9a 81       	ldd	r25, Y+2	; 0x02
    6446:	80 3c       	cpi	r24, 0xC0	; 192
    6448:	99 40       	sbci	r25, 0x09	; 9
    644a:	29 f4       	brne	.+10     	; 0x6456 <sysclk_enable_peripheral_clock+0x20e>
    644c:	68 e0       	ldi	r22, 0x08	; 8
    644e:	84 e0       	ldi	r24, 0x04	; 4
    6450:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6454:	8b c0       	rjmp	.+278    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6456:	89 81       	ldd	r24, Y+1	; 0x01
    6458:	9a 81       	ldd	r25, Y+2	; 0x02
    645a:	80 3c       	cpi	r24, 0xC0	; 192
    645c:	9a 40       	sbci	r25, 0x0A	; 10
    645e:	29 f4       	brne	.+10     	; 0x646a <sysclk_enable_peripheral_clock+0x222>
    6460:	68 e0       	ldi	r22, 0x08	; 8
    6462:	85 e0       	ldi	r24, 0x05	; 5
    6464:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6468:	81 c0       	rjmp	.+258    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    646a:	89 81       	ldd	r24, Y+1	; 0x01
    646c:	9a 81       	ldd	r25, Y+2	; 0x02
    646e:	80 3c       	cpi	r24, 0xC0	; 192
    6470:	9b 40       	sbci	r25, 0x0B	; 11
    6472:	29 f4       	brne	.+10     	; 0x647e <sysclk_enable_peripheral_clock+0x236>
    6474:	68 e0       	ldi	r22, 0x08	; 8
    6476:	86 e0       	ldi	r24, 0x06	; 6
    6478:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    647c:	77 c0       	rjmp	.+238    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    647e:	89 81       	ldd	r24, Y+1	; 0x01
    6480:	9a 81       	ldd	r25, Y+2	; 0x02
    6482:	80 3a       	cpi	r24, 0xA0	; 160
    6484:	98 40       	sbci	r25, 0x08	; 8
    6486:	29 f4       	brne	.+10     	; 0x6492 <sysclk_enable_peripheral_clock+0x24a>
    6488:	60 e1       	ldi	r22, 0x10	; 16
    648a:	83 e0       	ldi	r24, 0x03	; 3
    648c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6490:	6d c0       	rjmp	.+218    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6492:	89 81       	ldd	r24, Y+1	; 0x01
    6494:	9a 81       	ldd	r25, Y+2	; 0x02
    6496:	80 3a       	cpi	r24, 0xA0	; 160
    6498:	99 40       	sbci	r25, 0x09	; 9
    649a:	29 f4       	brne	.+10     	; 0x64a6 <sysclk_enable_peripheral_clock+0x25e>
    649c:	60 e1       	ldi	r22, 0x10	; 16
    649e:	84 e0       	ldi	r24, 0x04	; 4
    64a0:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    64a4:	63 c0       	rjmp	.+198    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    64a6:	89 81       	ldd	r24, Y+1	; 0x01
    64a8:	9a 81       	ldd	r25, Y+2	; 0x02
    64aa:	80 3a       	cpi	r24, 0xA0	; 160
    64ac:	9a 40       	sbci	r25, 0x0A	; 10
    64ae:	29 f4       	brne	.+10     	; 0x64ba <sysclk_enable_peripheral_clock+0x272>
    64b0:	60 e1       	ldi	r22, 0x10	; 16
    64b2:	85 e0       	ldi	r24, 0x05	; 5
    64b4:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    64b8:	59 c0       	rjmp	.+178    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    64ba:	89 81       	ldd	r24, Y+1	; 0x01
    64bc:	9a 81       	ldd	r25, Y+2	; 0x02
    64be:	80 3a       	cpi	r24, 0xA0	; 160
    64c0:	9b 40       	sbci	r25, 0x0B	; 11
    64c2:	29 f4       	brne	.+10     	; 0x64ce <sysclk_enable_peripheral_clock+0x286>
    64c4:	60 e1       	ldi	r22, 0x10	; 16
    64c6:	86 e0       	ldi	r24, 0x06	; 6
    64c8:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    64cc:	4f c0       	rjmp	.+158    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    64ce:	89 81       	ldd	r24, Y+1	; 0x01
    64d0:	9a 81       	ldd	r25, Y+2	; 0x02
    64d2:	80 3b       	cpi	r24, 0xB0	; 176
    64d4:	98 40       	sbci	r25, 0x08	; 8
    64d6:	29 f4       	brne	.+10     	; 0x64e2 <sysclk_enable_peripheral_clock+0x29a>
    64d8:	60 e2       	ldi	r22, 0x20	; 32
    64da:	83 e0       	ldi	r24, 0x03	; 3
    64dc:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    64e0:	45 c0       	rjmp	.+138    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    64e2:	89 81       	ldd	r24, Y+1	; 0x01
    64e4:	9a 81       	ldd	r25, Y+2	; 0x02
    64e6:	80 3b       	cpi	r24, 0xB0	; 176
    64e8:	99 40       	sbci	r25, 0x09	; 9
    64ea:	29 f4       	brne	.+10     	; 0x64f6 <sysclk_enable_peripheral_clock+0x2ae>
    64ec:	60 e2       	ldi	r22, 0x20	; 32
    64ee:	84 e0       	ldi	r24, 0x04	; 4
    64f0:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    64f4:	3b c0       	rjmp	.+118    	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    64f6:	89 81       	ldd	r24, Y+1	; 0x01
    64f8:	9a 81       	ldd	r25, Y+2	; 0x02
    64fa:	80 3b       	cpi	r24, 0xB0	; 176
    64fc:	9a 40       	sbci	r25, 0x0A	; 10
    64fe:	29 f4       	brne	.+10     	; 0x650a <sysclk_enable_peripheral_clock+0x2c2>
    6500:	60 e2       	ldi	r22, 0x20	; 32
    6502:	85 e0       	ldi	r24, 0x05	; 5
    6504:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6508:	31 c0       	rjmp	.+98     	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    650a:	89 81       	ldd	r24, Y+1	; 0x01
    650c:	9a 81       	ldd	r25, Y+2	; 0x02
    650e:	80 3b       	cpi	r24, 0xB0	; 176
    6510:	9b 40       	sbci	r25, 0x0B	; 11
    6512:	29 f4       	brne	.+10     	; 0x651e <sysclk_enable_peripheral_clock+0x2d6>
    6514:	60 e2       	ldi	r22, 0x20	; 32
    6516:	86 e0       	ldi	r24, 0x06	; 6
    6518:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    651c:	27 c0       	rjmp	.+78     	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    651e:	89 81       	ldd	r24, Y+1	; 0x01
    6520:	9a 81       	ldd	r25, Y+2	; 0x02
    6522:	80 38       	cpi	r24, 0x80	; 128
    6524:	94 40       	sbci	r25, 0x04	; 4
    6526:	29 f4       	brne	.+10     	; 0x6532 <sysclk_enable_peripheral_clock+0x2ea>
    6528:	60 e4       	ldi	r22, 0x40	; 64
    652a:	83 e0       	ldi	r24, 0x03	; 3
    652c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6530:	1d c0       	rjmp	.+58     	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6532:	89 81       	ldd	r24, Y+1	; 0x01
    6534:	9a 81       	ldd	r25, Y+2	; 0x02
    6536:	80 39       	cpi	r24, 0x90	; 144
    6538:	94 40       	sbci	r25, 0x04	; 4
    653a:	29 f4       	brne	.+10     	; 0x6546 <sysclk_enable_peripheral_clock+0x2fe>
    653c:	60 e4       	ldi	r22, 0x40	; 64
    653e:	84 e0       	ldi	r24, 0x04	; 4
    6540:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6544:	13 c0       	rjmp	.+38     	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6546:	89 81       	ldd	r24, Y+1	; 0x01
    6548:	9a 81       	ldd	r25, Y+2	; 0x02
    654a:	80 3a       	cpi	r24, 0xA0	; 160
    654c:	94 40       	sbci	r25, 0x04	; 4
    654e:	29 f4       	brne	.+10     	; 0x655a <sysclk_enable_peripheral_clock+0x312>
    6550:	60 e4       	ldi	r22, 0x40	; 64
    6552:	85 e0       	ldi	r24, 0x05	; 5
    6554:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6558:	09 c0       	rjmp	.+18     	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    655a:	89 81       	ldd	r24, Y+1	; 0x01
    655c:	9a 81       	ldd	r25, Y+2	; 0x02
    655e:	80 3b       	cpi	r24, 0xB0	; 176
    6560:	94 40       	sbci	r25, 0x04	; 4
    6562:	21 f4       	brne	.+8      	; 0x656c <sysclk_enable_peripheral_clock+0x324>
    6564:	60 e4       	ldi	r22, 0x40	; 64
    6566:	86 e0       	ldi	r24, 0x06	; 6
    6568:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    656c:	00 00       	nop
    656e:	0f 90       	pop	r0
    6570:	0f 90       	pop	r0
    6572:	df 91       	pop	r29
    6574:	cf 91       	pop	r28
    6576:	08 95       	ret

00006578 <usart_init_rs232>:
    6578:	0f 93       	push	r16
    657a:	1f 93       	push	r17
    657c:	cf 93       	push	r28
    657e:	df 93       	push	r29
    6580:	cd b7       	in	r28, 0x3d	; 61
    6582:	de b7       	in	r29, 0x3e	; 62
    6584:	25 97       	sbiw	r28, 0x05	; 5
    6586:	cd bf       	out	0x3d, r28	; 61
    6588:	de bf       	out	0x3e, r29	; 62
    658a:	8a 83       	std	Y+2, r24	; 0x02
    658c:	9b 83       	std	Y+3, r25	; 0x03
    658e:	6c 83       	std	Y+4, r22	; 0x04
    6590:	7d 83       	std	Y+5, r23	; 0x05
    6592:	8a 81       	ldd	r24, Y+2	; 0x02
    6594:	9b 81       	ldd	r25, Y+3	; 0x03
    6596:	58 de       	rcall	.-848    	; 0x6248 <sysclk_enable_peripheral_clock>
    6598:	8a 81       	ldd	r24, Y+2	; 0x02
    659a:	9b 81       	ldd	r25, Y+3	; 0x03
    659c:	60 e0       	ldi	r22, 0x00	; 0
    659e:	c6 dd       	rcall	.-1140   	; 0x612c <usart_set_mode>
    65a0:	8c 81       	ldd	r24, Y+4	; 0x04
    65a2:	9d 81       	ldd	r25, Y+5	; 0x05
    65a4:	fc 01       	movw	r30, r24
    65a6:	26 81       	ldd	r18, Z+6	; 0x06
    65a8:	8c 81       	ldd	r24, Y+4	; 0x04
    65aa:	9d 81       	ldd	r25, Y+5	; 0x05
    65ac:	fc 01       	movw	r30, r24
    65ae:	45 81       	ldd	r20, Z+5	; 0x05
    65b0:	8c 81       	ldd	r24, Y+4	; 0x04
    65b2:	9d 81       	ldd	r25, Y+5	; 0x05
    65b4:	fc 01       	movw	r30, r24
    65b6:	34 81       	ldd	r19, Z+4	; 0x04
    65b8:	8a 81       	ldd	r24, Y+2	; 0x02
    65ba:	9b 81       	ldd	r25, Y+3	; 0x03
    65bc:	63 2f       	mov	r22, r19
    65be:	7b dd       	rcall	.-1290   	; 0x60b6 <usart_format_set>
    65c0:	37 de       	rcall	.-914    	; 0x6230 <sysclk_get_per_hz>
    65c2:	9b 01       	movw	r18, r22
    65c4:	ac 01       	movw	r20, r24
    65c6:	8c 81       	ldd	r24, Y+4	; 0x04
    65c8:	9d 81       	ldd	r25, Y+5	; 0x05
    65ca:	fc 01       	movw	r30, r24
    65cc:	80 81       	ld	r24, Z
    65ce:	91 81       	ldd	r25, Z+1	; 0x01
    65d0:	a2 81       	ldd	r26, Z+2	; 0x02
    65d2:	b3 81       	ldd	r27, Z+3	; 0x03
    65d4:	ea 81       	ldd	r30, Y+2	; 0x02
    65d6:	fb 81       	ldd	r31, Y+3	; 0x03
    65d8:	89 01       	movw	r16, r18
    65da:	9a 01       	movw	r18, r20
    65dc:	ac 01       	movw	r20, r24
    65de:	bd 01       	movw	r22, r26
    65e0:	cf 01       	movw	r24, r30
    65e2:	48 d0       	rcall	.+144    	; 0x6674 <usart_set_baudrate>
    65e4:	89 83       	std	Y+1, r24	; 0x01
    65e6:	8a 81       	ldd	r24, Y+2	; 0x02
    65e8:	9b 81       	ldd	r25, Y+3	; 0x03
    65ea:	88 dd       	rcall	.-1264   	; 0x60fc <usart_tx_enable>
    65ec:	8a 81       	ldd	r24, Y+2	; 0x02
    65ee:	9b 81       	ldd	r25, Y+3	; 0x03
    65f0:	4a dd       	rcall	.-1388   	; 0x6086 <usart_rx_enable>
    65f2:	89 81       	ldd	r24, Y+1	; 0x01
    65f4:	25 96       	adiw	r28, 0x05	; 5
    65f6:	cd bf       	out	0x3d, r28	; 61
    65f8:	de bf       	out	0x3e, r29	; 62
    65fa:	df 91       	pop	r29
    65fc:	cf 91       	pop	r28
    65fe:	1f 91       	pop	r17
    6600:	0f 91       	pop	r16
    6602:	08 95       	ret

00006604 <usart_putchar>:
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	00 d0       	rcall	.+0      	; 0x660a <usart_putchar+0x6>
    660a:	cd b7       	in	r28, 0x3d	; 61
    660c:	de b7       	in	r29, 0x3e	; 62
    660e:	89 83       	std	Y+1, r24	; 0x01
    6610:	9a 83       	std	Y+2, r25	; 0x02
    6612:	6b 83       	std	Y+3, r22	; 0x03
    6614:	00 00       	nop
    6616:	89 81       	ldd	r24, Y+1	; 0x01
    6618:	9a 81       	ldd	r25, Y+2	; 0x02
    661a:	a4 dd       	rcall	.-1208   	; 0x6164 <usart_data_register_is_empty>
    661c:	98 2f       	mov	r25, r24
    661e:	81 e0       	ldi	r24, 0x01	; 1
    6620:	89 27       	eor	r24, r25
    6622:	88 23       	and	r24, r24
    6624:	c1 f7       	brne	.-16     	; 0x6616 <usart_putchar+0x12>
    6626:	89 81       	ldd	r24, Y+1	; 0x01
    6628:	9a 81       	ldd	r25, Y+2	; 0x02
    662a:	2b 81       	ldd	r18, Y+3	; 0x03
    662c:	fc 01       	movw	r30, r24
    662e:	20 83       	st	Z, r18
    6630:	80 e0       	ldi	r24, 0x00	; 0
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	23 96       	adiw	r28, 0x03	; 3
    6636:	cd bf       	out	0x3d, r28	; 61
    6638:	de bf       	out	0x3e, r29	; 62
    663a:	df 91       	pop	r29
    663c:	cf 91       	pop	r28
    663e:	08 95       	ret

00006640 <usart_getchar>:
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	1f 92       	push	r1
    6646:	1f 92       	push	r1
    6648:	cd b7       	in	r28, 0x3d	; 61
    664a:	de b7       	in	r29, 0x3e	; 62
    664c:	89 83       	std	Y+1, r24	; 0x01
    664e:	9a 83       	std	Y+2, r25	; 0x02
    6650:	00 00       	nop
    6652:	89 81       	ldd	r24, Y+1	; 0x01
    6654:	9a 81       	ldd	r25, Y+2	; 0x02
    6656:	a0 dd       	rcall	.-1216   	; 0x6198 <usart_rx_is_complete>
    6658:	98 2f       	mov	r25, r24
    665a:	81 e0       	ldi	r24, 0x01	; 1
    665c:	89 27       	eor	r24, r25
    665e:	88 23       	and	r24, r24
    6660:	c1 f7       	brne	.-16     	; 0x6652 <usart_getchar+0x12>
    6662:	89 81       	ldd	r24, Y+1	; 0x01
    6664:	9a 81       	ldd	r25, Y+2	; 0x02
    6666:	fc 01       	movw	r30, r24
    6668:	80 81       	ld	r24, Z
    666a:	0f 90       	pop	r0
    666c:	0f 90       	pop	r0
    666e:	df 91       	pop	r29
    6670:	cf 91       	pop	r28
    6672:	08 95       	ret

00006674 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    6674:	ef 92       	push	r14
    6676:	ff 92       	push	r15
    6678:	0f 93       	push	r16
    667a:	1f 93       	push	r17
    667c:	cf 93       	push	r28
    667e:	df 93       	push	r29
    6680:	cd b7       	in	r28, 0x3d	; 61
    6682:	de b7       	in	r29, 0x3e	; 62
    6684:	6f 97       	sbiw	r28, 0x1f	; 31
    6686:	cd bf       	out	0x3d, r28	; 61
    6688:	de bf       	out	0x3e, r29	; 62
    668a:	8e 8b       	std	Y+22, r24	; 0x16
    668c:	9f 8b       	std	Y+23, r25	; 0x17
    668e:	48 8f       	std	Y+24, r20	; 0x18
    6690:	59 8f       	std	Y+25, r21	; 0x19
    6692:	6a 8f       	std	Y+26, r22	; 0x1a
    6694:	7b 8f       	std	Y+27, r23	; 0x1b
    6696:	0c 8f       	std	Y+28, r16	; 0x1c
    6698:	1d 8f       	std	Y+29, r17	; 0x1d
    669a:	2e 8f       	std	Y+30, r18	; 0x1e
    669c:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    669e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    66a2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    66a4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    66a6:	68 94       	set
    66a8:	12 f8       	bld	r1, 2
    66aa:	b6 95       	lsr	r27
    66ac:	a7 95       	ror	r26
    66ae:	97 95       	ror	r25
    66b0:	87 95       	ror	r24
    66b2:	16 94       	lsr	r1
    66b4:	d1 f7       	brne	.-12     	; 0x66aa <usart_set_baudrate+0x36>
    66b6:	8e 87       	std	Y+14, r24	; 0x0e
    66b8:	9f 87       	std	Y+15, r25	; 0x0f
    66ba:	a8 8b       	std	Y+16, r26	; 0x10
    66bc:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    66be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    66c2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    66c4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    66c6:	07 2e       	mov	r0, r23
    66c8:	76 e1       	ldi	r23, 0x16	; 22
    66ca:	b6 95       	lsr	r27
    66cc:	a7 95       	ror	r26
    66ce:	97 95       	ror	r25
    66d0:	87 95       	ror	r24
    66d2:	7a 95       	dec	r23
    66d4:	d1 f7       	brne	.-12     	; 0x66ca <usart_set_baudrate+0x56>
    66d6:	70 2d       	mov	r23, r0
    66d8:	8a 87       	std	Y+10, r24	; 0x0a
    66da:	9b 87       	std	Y+11, r25	; 0x0b
    66dc:	ac 87       	std	Y+12, r26	; 0x0c
    66de:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    66e0:	8e 89       	ldd	r24, Y+22	; 0x16
    66e2:	9f 89       	ldd	r25, Y+23	; 0x17
    66e4:	fc 01       	movw	r30, r24
    66e6:	84 81       	ldd	r24, Z+4	; 0x04
    66e8:	88 2f       	mov	r24, r24
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	84 70       	andi	r24, 0x04	; 4
    66ee:	99 27       	eor	r25, r25
    66f0:	89 2b       	or	r24, r25
    66f2:	c1 f4       	brne	.+48     	; 0x6724 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    66f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    66f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    66f8:	a8 89       	ldd	r26, Y+16	; 0x10
    66fa:	b9 89       	ldd	r27, Y+17	; 0x11
    66fc:	b6 95       	lsr	r27
    66fe:	a7 95       	ror	r26
    6700:	97 95       	ror	r25
    6702:	87 95       	ror	r24
    6704:	8e 87       	std	Y+14, r24	; 0x0e
    6706:	9f 87       	std	Y+15, r25	; 0x0f
    6708:	a8 8b       	std	Y+16, r26	; 0x10
    670a:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    670c:	8a 85       	ldd	r24, Y+10	; 0x0a
    670e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6710:	ac 85       	ldd	r26, Y+12	; 0x0c
    6712:	bd 85       	ldd	r27, Y+13	; 0x0d
    6714:	b6 95       	lsr	r27
    6716:	a7 95       	ror	r26
    6718:	97 95       	ror	r25
    671a:	87 95       	ror	r24
    671c:	8a 87       	std	Y+10, r24	; 0x0a
    671e:	9b 87       	std	Y+11, r25	; 0x0b
    6720:	ac 87       	std	Y+12, r26	; 0x0c
    6722:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    6724:	28 8d       	ldd	r18, Y+24	; 0x18
    6726:	39 8d       	ldd	r19, Y+25	; 0x19
    6728:	4a 8d       	ldd	r20, Y+26	; 0x1a
    672a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    672c:	8e 85       	ldd	r24, Y+14	; 0x0e
    672e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6730:	a8 89       	ldd	r26, Y+16	; 0x10
    6732:	b9 89       	ldd	r27, Y+17	; 0x11
    6734:	82 17       	cp	r24, r18
    6736:	93 07       	cpc	r25, r19
    6738:	a4 07       	cpc	r26, r20
    673a:	b5 07       	cpc	r27, r21
    673c:	68 f0       	brcs	.+26     	; 0x6758 <usart_set_baudrate+0xe4>
    673e:	28 8d       	ldd	r18, Y+24	; 0x18
    6740:	39 8d       	ldd	r19, Y+25	; 0x19
    6742:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6744:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6746:	8a 85       	ldd	r24, Y+10	; 0x0a
    6748:	9b 85       	ldd	r25, Y+11	; 0x0b
    674a:	ac 85       	ldd	r26, Y+12	; 0x0c
    674c:	bd 85       	ldd	r27, Y+13	; 0x0d
    674e:	28 17       	cp	r18, r24
    6750:	39 07       	cpc	r19, r25
    6752:	4a 07       	cpc	r20, r26
    6754:	5b 07       	cpc	r21, r27
    6756:	10 f4       	brcc	.+4      	; 0x675c <usart_set_baudrate+0xe8>
		return false;
    6758:	80 e0       	ldi	r24, 0x00	; 0
    675a:	40 c1       	rjmp	.+640    	; 0x69dc <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    675c:	8e 89       	ldd	r24, Y+22	; 0x16
    675e:	9f 89       	ldd	r25, Y+23	; 0x17
    6760:	fc 01       	movw	r30, r24
    6762:	84 81       	ldd	r24, Z+4	; 0x04
    6764:	88 2f       	mov	r24, r24
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	84 70       	andi	r24, 0x04	; 4
    676a:	99 27       	eor	r25, r25
    676c:	89 2b       	or	r24, r25
    676e:	61 f4       	brne	.+24     	; 0x6788 <usart_set_baudrate+0x114>
		baud *= 2;
    6770:	88 8d       	ldd	r24, Y+24	; 0x18
    6772:	99 8d       	ldd	r25, Y+25	; 0x19
    6774:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6776:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6778:	88 0f       	add	r24, r24
    677a:	99 1f       	adc	r25, r25
    677c:	aa 1f       	adc	r26, r26
    677e:	bb 1f       	adc	r27, r27
    6780:	88 8f       	std	Y+24, r24	; 0x18
    6782:	99 8f       	std	Y+25, r25	; 0x19
    6784:	aa 8f       	std	Y+26, r26	; 0x1a
    6786:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    6788:	8f ef       	ldi	r24, 0xFF	; 255
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	a0 e0       	ldi	r26, 0x00	; 0
    678e:	b0 e0       	ldi	r27, 0x00	; 0
    6790:	8e 83       	std	Y+6, r24	; 0x06
    6792:	9f 83       	std	Y+7, r25	; 0x07
    6794:	a8 87       	std	Y+8, r26	; 0x08
    6796:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    6798:	8c 8d       	ldd	r24, Y+28	; 0x1c
    679a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    679c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    679e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    67a0:	28 8d       	ldd	r18, Y+24	; 0x18
    67a2:	39 8d       	ldd	r19, Y+25	; 0x19
    67a4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    67a6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    67a8:	bc 01       	movw	r22, r24
    67aa:	cd 01       	movw	r24, r26
    67ac:	0e 94 66 45 	call	0x8acc	; 0x8acc <__udivmodsi4>
    67b0:	da 01       	movw	r26, r20
    67b2:	c9 01       	movw	r24, r18
    67b4:	8a 8b       	std	Y+18, r24	; 0x12
    67b6:	9b 8b       	std	Y+19, r25	; 0x13
    67b8:	ac 8b       	std	Y+20, r26	; 0x14
    67ba:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    67bc:	89 ef       	ldi	r24, 0xF9	; 249
    67be:	89 83       	std	Y+1, r24	; 0x01
    67c0:	28 c0       	rjmp	.+80     	; 0x6812 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    67c2:	2a 89       	ldd	r18, Y+18	; 0x12
    67c4:	3b 89       	ldd	r19, Y+19	; 0x13
    67c6:	4c 89       	ldd	r20, Y+20	; 0x14
    67c8:	5d 89       	ldd	r21, Y+21	; 0x15
    67ca:	8e 81       	ldd	r24, Y+6	; 0x06
    67cc:	9f 81       	ldd	r25, Y+7	; 0x07
    67ce:	a8 85       	ldd	r26, Y+8	; 0x08
    67d0:	b9 85       	ldd	r27, Y+9	; 0x09
    67d2:	28 17       	cp	r18, r24
    67d4:	39 07       	cpc	r19, r25
    67d6:	4a 07       	cpc	r20, r26
    67d8:	5b 07       	cpc	r21, r27
    67da:	f8 f0       	brcs	.+62     	; 0x681a <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    67dc:	8e 81       	ldd	r24, Y+6	; 0x06
    67de:	9f 81       	ldd	r25, Y+7	; 0x07
    67e0:	a8 85       	ldd	r26, Y+8	; 0x08
    67e2:	b9 85       	ldd	r27, Y+9	; 0x09
    67e4:	88 0f       	add	r24, r24
    67e6:	99 1f       	adc	r25, r25
    67e8:	aa 1f       	adc	r26, r26
    67ea:	bb 1f       	adc	r27, r27
    67ec:	8e 83       	std	Y+6, r24	; 0x06
    67ee:	9f 83       	std	Y+7, r25	; 0x07
    67f0:	a8 87       	std	Y+8, r26	; 0x08
    67f2:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    67f4:	89 81       	ldd	r24, Y+1	; 0x01
    67f6:	8d 3f       	cpi	r24, 0xFD	; 253
    67f8:	4c f4       	brge	.+18     	; 0x680c <usart_set_baudrate+0x198>
			limit |= 1;
    67fa:	8e 81       	ldd	r24, Y+6	; 0x06
    67fc:	9f 81       	ldd	r25, Y+7	; 0x07
    67fe:	a8 85       	ldd	r26, Y+8	; 0x08
    6800:	b9 85       	ldd	r27, Y+9	; 0x09
    6802:	81 60       	ori	r24, 0x01	; 1
    6804:	8e 83       	std	Y+6, r24	; 0x06
    6806:	9f 83       	std	Y+7, r25	; 0x07
    6808:	a8 87       	std	Y+8, r26	; 0x08
    680a:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    680c:	89 81       	ldd	r24, Y+1	; 0x01
    680e:	8f 5f       	subi	r24, 0xFF	; 255
    6810:	89 83       	std	Y+1, r24	; 0x01
    6812:	89 81       	ldd	r24, Y+1	; 0x01
    6814:	87 30       	cpi	r24, 0x07	; 7
    6816:	ac f2       	brlt	.-86     	; 0x67c2 <usart_set_baudrate+0x14e>
    6818:	01 c0       	rjmp	.+2      	; 0x681c <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    681a:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    681c:	89 81       	ldd	r24, Y+1	; 0x01
    681e:	88 23       	and	r24, r24
    6820:	0c f0       	brlt	.+2      	; 0x6824 <usart_set_baudrate+0x1b0>
    6822:	8a c0       	rjmp	.+276    	; 0x6938 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    6824:	88 8d       	ldd	r24, Y+24	; 0x18
    6826:	99 8d       	ldd	r25, Y+25	; 0x19
    6828:	aa 8d       	ldd	r26, Y+26	; 0x1a
    682a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    682c:	88 0f       	add	r24, r24
    682e:	99 1f       	adc	r25, r25
    6830:	aa 1f       	adc	r26, r26
    6832:	bb 1f       	adc	r27, r27
    6834:	88 0f       	add	r24, r24
    6836:	99 1f       	adc	r25, r25
    6838:	aa 1f       	adc	r26, r26
    683a:	bb 1f       	adc	r27, r27
    683c:	88 0f       	add	r24, r24
    683e:	99 1f       	adc	r25, r25
    6840:	aa 1f       	adc	r26, r26
    6842:	bb 1f       	adc	r27, r27
    6844:	9c 01       	movw	r18, r24
    6846:	ad 01       	movw	r20, r26
    6848:	8c 8d       	ldd	r24, Y+28	; 0x1c
    684a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    684c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    684e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6850:	82 1b       	sub	r24, r18
    6852:	93 0b       	sbc	r25, r19
    6854:	a4 0b       	sbc	r26, r20
    6856:	b5 0b       	sbc	r27, r21
    6858:	8c 8f       	std	Y+28, r24	; 0x1c
    685a:	9d 8f       	std	Y+29, r25	; 0x1d
    685c:	ae 8f       	std	Y+30, r26	; 0x1e
    685e:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    6860:	89 81       	ldd	r24, Y+1	; 0x01
    6862:	8e 3f       	cpi	r24, 0xFE	; 254
    6864:	94 f5       	brge	.+100    	; 0x68ca <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    6866:	89 81       	ldd	r24, Y+1	; 0x01
    6868:	08 2e       	mov	r0, r24
    686a:	00 0c       	add	r0, r0
    686c:	99 0b       	sbc	r25, r25
    686e:	2d ef       	ldi	r18, 0xFD	; 253
    6870:	3f ef       	ldi	r19, 0xFF	; 255
    6872:	28 1b       	sub	r18, r24
    6874:	39 0b       	sbc	r19, r25
    6876:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6878:	9d 8d       	ldd	r25, Y+29	; 0x1d
    687a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    687c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    687e:	7c 01       	movw	r14, r24
    6880:	8d 01       	movw	r16, r26
    6882:	04 c0       	rjmp	.+8      	; 0x688c <usart_set_baudrate+0x218>
    6884:	ee 0c       	add	r14, r14
    6886:	ff 1c       	adc	r15, r15
    6888:	00 1f       	adc	r16, r16
    688a:	11 1f       	adc	r17, r17
    688c:	2a 95       	dec	r18
    688e:	d2 f7       	brpl	.-12     	; 0x6884 <usart_set_baudrate+0x210>
    6890:	a8 01       	movw	r20, r16
    6892:	97 01       	movw	r18, r14
    6894:	88 8d       	ldd	r24, Y+24	; 0x18
    6896:	99 8d       	ldd	r25, Y+25	; 0x19
    6898:	aa 8d       	ldd	r26, Y+26	; 0x1a
    689a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    689c:	b6 95       	lsr	r27
    689e:	a7 95       	ror	r26
    68a0:	97 95       	ror	r25
    68a2:	87 95       	ror	r24
    68a4:	82 0f       	add	r24, r18
    68a6:	93 1f       	adc	r25, r19
    68a8:	a4 1f       	adc	r26, r20
    68aa:	b5 1f       	adc	r27, r21
    68ac:	28 8d       	ldd	r18, Y+24	; 0x18
    68ae:	39 8d       	ldd	r19, Y+25	; 0x19
    68b0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    68b2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    68b4:	bc 01       	movw	r22, r24
    68b6:	cd 01       	movw	r24, r26
    68b8:	0e 94 66 45 	call	0x8acc	; 0x8acc <__udivmodsi4>
    68bc:	da 01       	movw	r26, r20
    68be:	c9 01       	movw	r24, r18
    68c0:	8a 83       	std	Y+2, r24	; 0x02
    68c2:	9b 83       	std	Y+3, r25	; 0x03
    68c4:	ac 83       	std	Y+4, r26	; 0x04
    68c6:	bd 83       	std	Y+5, r27	; 0x05
    68c8:	70 c0       	rjmp	.+224    	; 0x69aa <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    68ca:	89 81       	ldd	r24, Y+1	; 0x01
    68cc:	08 2e       	mov	r0, r24
    68ce:	00 0c       	add	r0, r0
    68d0:	99 0b       	sbc	r25, r25
    68d2:	9c 01       	movw	r18, r24
    68d4:	2d 5f       	subi	r18, 0xFD	; 253
    68d6:	3f 4f       	sbci	r19, 0xFF	; 255
    68d8:	88 8d       	ldd	r24, Y+24	; 0x18
    68da:	99 8d       	ldd	r25, Y+25	; 0x19
    68dc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    68de:	bb 8d       	ldd	r27, Y+27	; 0x1b
    68e0:	04 c0       	rjmp	.+8      	; 0x68ea <usart_set_baudrate+0x276>
    68e2:	88 0f       	add	r24, r24
    68e4:	99 1f       	adc	r25, r25
    68e6:	aa 1f       	adc	r26, r26
    68e8:	bb 1f       	adc	r27, r27
    68ea:	2a 95       	dec	r18
    68ec:	d2 f7       	brpl	.-12     	; 0x68e2 <usart_set_baudrate+0x26e>
    68ee:	88 8f       	std	Y+24, r24	; 0x18
    68f0:	99 8f       	std	Y+25, r25	; 0x19
    68f2:	aa 8f       	std	Y+26, r26	; 0x1a
    68f4:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    68f6:	88 8d       	ldd	r24, Y+24	; 0x18
    68f8:	99 8d       	ldd	r25, Y+25	; 0x19
    68fa:	aa 8d       	ldd	r26, Y+26	; 0x1a
    68fc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    68fe:	9c 01       	movw	r18, r24
    6900:	ad 01       	movw	r20, r26
    6902:	56 95       	lsr	r21
    6904:	47 95       	ror	r20
    6906:	37 95       	ror	r19
    6908:	27 95       	ror	r18
    690a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    690c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    690e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6910:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6912:	82 0f       	add	r24, r18
    6914:	93 1f       	adc	r25, r19
    6916:	a4 1f       	adc	r26, r20
    6918:	b5 1f       	adc	r27, r21
    691a:	28 8d       	ldd	r18, Y+24	; 0x18
    691c:	39 8d       	ldd	r19, Y+25	; 0x19
    691e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6920:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6922:	bc 01       	movw	r22, r24
    6924:	cd 01       	movw	r24, r26
    6926:	0e 94 66 45 	call	0x8acc	; 0x8acc <__udivmodsi4>
    692a:	da 01       	movw	r26, r20
    692c:	c9 01       	movw	r24, r18
    692e:	8a 83       	std	Y+2, r24	; 0x02
    6930:	9b 83       	std	Y+3, r25	; 0x03
    6932:	ac 83       	std	Y+4, r26	; 0x04
    6934:	bd 83       	std	Y+5, r27	; 0x05
    6936:	39 c0       	rjmp	.+114    	; 0x69aa <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    6938:	89 81       	ldd	r24, Y+1	; 0x01
    693a:	08 2e       	mov	r0, r24
    693c:	00 0c       	add	r0, r0
    693e:	99 0b       	sbc	r25, r25
    6940:	9c 01       	movw	r18, r24
    6942:	2d 5f       	subi	r18, 0xFD	; 253
    6944:	3f 4f       	sbci	r19, 0xFF	; 255
    6946:	88 8d       	ldd	r24, Y+24	; 0x18
    6948:	99 8d       	ldd	r25, Y+25	; 0x19
    694a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    694c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    694e:	04 c0       	rjmp	.+8      	; 0x6958 <usart_set_baudrate+0x2e4>
    6950:	88 0f       	add	r24, r24
    6952:	99 1f       	adc	r25, r25
    6954:	aa 1f       	adc	r26, r26
    6956:	bb 1f       	adc	r27, r27
    6958:	2a 95       	dec	r18
    695a:	d2 f7       	brpl	.-12     	; 0x6950 <usart_set_baudrate+0x2dc>
    695c:	88 8f       	std	Y+24, r24	; 0x18
    695e:	99 8f       	std	Y+25, r25	; 0x19
    6960:	aa 8f       	std	Y+26, r26	; 0x1a
    6962:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    6964:	88 8d       	ldd	r24, Y+24	; 0x18
    6966:	99 8d       	ldd	r25, Y+25	; 0x19
    6968:	aa 8d       	ldd	r26, Y+26	; 0x1a
    696a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    696c:	9c 01       	movw	r18, r24
    696e:	ad 01       	movw	r20, r26
    6970:	56 95       	lsr	r21
    6972:	47 95       	ror	r20
    6974:	37 95       	ror	r19
    6976:	27 95       	ror	r18
    6978:	8c 8d       	ldd	r24, Y+28	; 0x1c
    697a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    697c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    697e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6980:	82 0f       	add	r24, r18
    6982:	93 1f       	adc	r25, r19
    6984:	a4 1f       	adc	r26, r20
    6986:	b5 1f       	adc	r27, r21
    6988:	28 8d       	ldd	r18, Y+24	; 0x18
    698a:	39 8d       	ldd	r19, Y+25	; 0x19
    698c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    698e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6990:	bc 01       	movw	r22, r24
    6992:	cd 01       	movw	r24, r26
    6994:	0e 94 66 45 	call	0x8acc	; 0x8acc <__udivmodsi4>
    6998:	da 01       	movw	r26, r20
    699a:	c9 01       	movw	r24, r18
    699c:	01 97       	sbiw	r24, 0x01	; 1
    699e:	a1 09       	sbc	r26, r1
    69a0:	b1 09       	sbc	r27, r1
    69a2:	8a 83       	std	Y+2, r24	; 0x02
    69a4:	9b 83       	std	Y+3, r25	; 0x03
    69a6:	ac 83       	std	Y+4, r26	; 0x04
    69a8:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    69aa:	8a 81       	ldd	r24, Y+2	; 0x02
    69ac:	9b 81       	ldd	r25, Y+3	; 0x03
    69ae:	ac 81       	ldd	r26, Y+4	; 0x04
    69b0:	bd 81       	ldd	r27, Y+5	; 0x05
    69b2:	89 2f       	mov	r24, r25
    69b4:	9a 2f       	mov	r25, r26
    69b6:	ab 2f       	mov	r26, r27
    69b8:	bb 27       	eor	r27, r27
    69ba:	98 2f       	mov	r25, r24
    69bc:	9f 70       	andi	r25, 0x0F	; 15
    69be:	89 81       	ldd	r24, Y+1	; 0x01
    69c0:	82 95       	swap	r24
    69c2:	80 7f       	andi	r24, 0xF0	; 240
    69c4:	29 2f       	mov	r18, r25
    69c6:	28 2b       	or	r18, r24
    69c8:	8e 89       	ldd	r24, Y+22	; 0x16
    69ca:	9f 89       	ldd	r25, Y+23	; 0x17
    69cc:	fc 01       	movw	r30, r24
    69ce:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    69d0:	2a 81       	ldd	r18, Y+2	; 0x02
    69d2:	8e 89       	ldd	r24, Y+22	; 0x16
    69d4:	9f 89       	ldd	r25, Y+23	; 0x17
    69d6:	fc 01       	movw	r30, r24
    69d8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    69da:	81 e0       	ldi	r24, 0x01	; 1
}
    69dc:	6f 96       	adiw	r28, 0x1f	; 31
    69de:	cd bf       	out	0x3d, r28	; 61
    69e0:	de bf       	out	0x3e, r29	; 62
    69e2:	df 91       	pop	r29
    69e4:	cf 91       	pop	r28
    69e6:	1f 91       	pop	r17
    69e8:	0f 91       	pop	r16
    69ea:	ff 90       	pop	r15
    69ec:	ef 90       	pop	r14
    69ee:	08 95       	ret

000069f0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    69f0:	cf 93       	push	r28
    69f2:	df 93       	push	r29
    69f4:	00 d0       	rcall	.+0      	; 0x69f6 <ioport_configure_port_pin+0x6>
    69f6:	00 d0       	rcall	.+0      	; 0x69f8 <ioport_configure_port_pin+0x8>
    69f8:	cd b7       	in	r28, 0x3d	; 61
    69fa:	de b7       	in	r29, 0x3e	; 62
    69fc:	8a 83       	std	Y+2, r24	; 0x02
    69fe:	9b 83       	std	Y+3, r25	; 0x03
    6a00:	6c 83       	std	Y+4, r22	; 0x04
    6a02:	4d 83       	std	Y+5, r20	; 0x05
    6a04:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    6a06:	19 82       	std	Y+1, r1	; 0x01
    6a08:	20 c0       	rjmp	.+64     	; 0x6a4a <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    6a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a0c:	88 2f       	mov	r24, r24
    6a0e:	90 e0       	ldi	r25, 0x00	; 0
    6a10:	29 81       	ldd	r18, Y+1	; 0x01
    6a12:	22 2f       	mov	r18, r18
    6a14:	30 e0       	ldi	r19, 0x00	; 0
    6a16:	02 c0       	rjmp	.+4      	; 0x6a1c <ioport_configure_port_pin+0x2c>
    6a18:	95 95       	asr	r25
    6a1a:	87 95       	ror	r24
    6a1c:	2a 95       	dec	r18
    6a1e:	e2 f7       	brpl	.-8      	; 0x6a18 <ioport_configure_port_pin+0x28>
    6a20:	81 70       	andi	r24, 0x01	; 1
    6a22:	99 27       	eor	r25, r25
    6a24:	89 2b       	or	r24, r25
    6a26:	71 f0       	breq	.+28     	; 0x6a44 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    6a28:	89 81       	ldd	r24, Y+1	; 0x01
    6a2a:	88 2f       	mov	r24, r24
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	40 96       	adiw	r24, 0x10	; 16
    6a30:	2a 81       	ldd	r18, Y+2	; 0x02
    6a32:	3b 81       	ldd	r19, Y+3	; 0x03
    6a34:	82 0f       	add	r24, r18
    6a36:	93 1f       	adc	r25, r19
    6a38:	2d 81       	ldd	r18, Y+5	; 0x05
    6a3a:	3e 81       	ldd	r19, Y+6	; 0x06
    6a3c:	23 2f       	mov	r18, r19
    6a3e:	33 27       	eor	r19, r19
    6a40:	fc 01       	movw	r30, r24
    6a42:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    6a44:	89 81       	ldd	r24, Y+1	; 0x01
    6a46:	8f 5f       	subi	r24, 0xFF	; 255
    6a48:	89 83       	std	Y+1, r24	; 0x01
    6a4a:	89 81       	ldd	r24, Y+1	; 0x01
    6a4c:	88 30       	cpi	r24, 0x08	; 8
    6a4e:	e8 f2       	brcs	.-70     	; 0x6a0a <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    6a50:	8d 81       	ldd	r24, Y+5	; 0x05
    6a52:	9e 81       	ldd	r25, Y+6	; 0x06
    6a54:	81 70       	andi	r24, 0x01	; 1
    6a56:	99 27       	eor	r25, r25
    6a58:	89 2b       	or	r24, r25
    6a5a:	d1 f0       	breq	.+52     	; 0x6a90 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    6a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a60:	82 70       	andi	r24, 0x02	; 2
    6a62:	99 27       	eor	r25, r25
    6a64:	89 2b       	or	r24, r25
    6a66:	39 f0       	breq	.+14     	; 0x6a76 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    6a68:	8a 81       	ldd	r24, Y+2	; 0x02
    6a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a6c:	05 96       	adiw	r24, 0x05	; 5
    6a6e:	2c 81       	ldd	r18, Y+4	; 0x04
    6a70:	fc 01       	movw	r30, r24
    6a72:	20 83       	st	Z, r18
    6a74:	06 c0       	rjmp	.+12     	; 0x6a82 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    6a76:	8a 81       	ldd	r24, Y+2	; 0x02
    6a78:	9b 81       	ldd	r25, Y+3	; 0x03
    6a7a:	06 96       	adiw	r24, 0x06	; 6
    6a7c:	2c 81       	ldd	r18, Y+4	; 0x04
    6a7e:	fc 01       	movw	r30, r24
    6a80:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    6a82:	8a 81       	ldd	r24, Y+2	; 0x02
    6a84:	9b 81       	ldd	r25, Y+3	; 0x03
    6a86:	01 96       	adiw	r24, 0x01	; 1
    6a88:	2c 81       	ldd	r18, Y+4	; 0x04
    6a8a:	fc 01       	movw	r30, r24
    6a8c:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    6a8e:	06 c0       	rjmp	.+12     	; 0x6a9c <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    6a90:	8a 81       	ldd	r24, Y+2	; 0x02
    6a92:	9b 81       	ldd	r25, Y+3	; 0x03
    6a94:	02 96       	adiw	r24, 0x02	; 2
    6a96:	2c 81       	ldd	r18, Y+4	; 0x04
    6a98:	fc 01       	movw	r30, r24
    6a9a:	20 83       	st	Z, r18
	}
}
    6a9c:	00 00       	nop
    6a9e:	26 96       	adiw	r28, 0x06	; 6
    6aa0:	cd bf       	out	0x3d, r28	; 61
    6aa2:	de bf       	out	0x3e, r29	; 62
    6aa4:	df 91       	pop	r29
    6aa6:	cf 91       	pop	r28
    6aa8:	08 95       	ret

00006aaa <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    6aaa:	cf 93       	push	r28
    6aac:	df 93       	push	r29
    6aae:	cd b7       	in	r28, 0x3d	; 61
    6ab0:	de b7       	in	r29, 0x3e	; 62
    6ab2:	27 97       	sbiw	r28, 0x07	; 7
    6ab4:	cd bf       	out	0x3d, r28	; 61
    6ab6:	de bf       	out	0x3e, r29	; 62
    6ab8:	8d 83       	std	Y+5, r24	; 0x05
    6aba:	6e 83       	std	Y+6, r22	; 0x06
    6abc:	7f 83       	std	Y+7, r23	; 0x07
    6abe:	8d 81       	ldd	r24, Y+5	; 0x05
    6ac0:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    6ac2:	89 81       	ldd	r24, Y+1	; 0x01
    6ac4:	88 2f       	mov	r24, r24
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	9c 01       	movw	r18, r24
    6aca:	27 70       	andi	r18, 0x07	; 7
    6acc:	33 27       	eor	r19, r19
    6ace:	81 e0       	ldi	r24, 0x01	; 1
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
    6ad2:	02 c0       	rjmp	.+4      	; 0x6ad8 <ioport_configure_pin+0x2e>
    6ad4:	88 0f       	add	r24, r24
    6ad6:	99 1f       	adc	r25, r25
    6ad8:	2a 95       	dec	r18
    6ada:	e2 f7       	brpl	.-8      	; 0x6ad4 <ioport_configure_pin+0x2a>
    6adc:	68 2f       	mov	r22, r24
    6ade:	8d 81       	ldd	r24, Y+5	; 0x05
    6ae0:	8a 83       	std	Y+2, r24	; 0x02
    6ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae4:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    6ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ae8:	86 95       	lsr	r24
    6aea:	86 95       	lsr	r24
    6aec:	86 95       	lsr	r24
    6aee:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    6af0:	8c 81       	ldd	r24, Y+4	; 0x04
    6af2:	88 2f       	mov	r24, r24
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	88 0f       	add	r24, r24
    6af8:	99 1f       	adc	r25, r25
    6afa:	82 95       	swap	r24
    6afc:	92 95       	swap	r25
    6afe:	90 7f       	andi	r25, 0xF0	; 240
    6b00:	98 27       	eor	r25, r24
    6b02:	80 7f       	andi	r24, 0xF0	; 240
    6b04:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    6b06:	9a 5f       	subi	r25, 0xFA	; 250
    6b08:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    6b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    6b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    6b0e:	ac 01       	movw	r20, r24
    6b10:	c9 01       	movw	r24, r18
    6b12:	6e df       	rcall	.-292    	; 0x69f0 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    6b14:	00 00       	nop
    6b16:	27 96       	adiw	r28, 0x07	; 7
    6b18:	cd bf       	out	0x3d, r28	; 61
    6b1a:	de bf       	out	0x3e, r29	; 62
    6b1c:	df 91       	pop	r29
    6b1e:	cf 91       	pop	r28
    6b20:	08 95       	ret

00006b22 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    6b22:	cf 93       	push	r28
    6b24:	df 93       	push	r29
    6b26:	cd b7       	in	r28, 0x3d	; 61
    6b28:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    6b2a:	63 e0       	ldi	r22, 0x03	; 3
    6b2c:	70 e0       	ldi	r23, 0x00	; 0
    6b2e:	83 e7       	ldi	r24, 0x73	; 115
    6b30:	bc df       	rcall	.-136    	; 0x6aaa <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    6b32:	60 e0       	ldi	r22, 0x00	; 0
    6b34:	78 e1       	ldi	r23, 0x18	; 24
    6b36:	82 e7       	ldi	r24, 0x72	; 114
    6b38:	b8 df       	rcall	.-144    	; 0x6aaa <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    6b3a:	00 00       	nop
    6b3c:	df 91       	pop	r29
    6b3e:	cf 91       	pop	r28
    6b40:	08 95       	ret

00006b42 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    6b42:	cf 93       	push	r28
    6b44:	df 93       	push	r29
    6b46:	1f 92       	push	r1
    6b48:	1f 92       	push	r1
    6b4a:	cd b7       	in	r28, 0x3d	; 61
    6b4c:	de b7       	in	r29, 0x3e	; 62
    6b4e:	89 83       	std	Y+1, r24	; 0x01
    6b50:	9a 83       	std	Y+2, r25	; 0x02
    6b52:	89 81       	ldd	r24, Y+1	; 0x01
    6b54:	9a 81       	ldd	r25, Y+2	; 0x02
    6b56:	89 2b       	or	r24, r25
    6b58:	09 f4       	brne	.+2      	; 0x6b5c <sysclk_enable_peripheral_clock+0x1a>
    6b5a:	85 c1       	rjmp	.+778    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6b5c:	89 81       	ldd	r24, Y+1	; 0x01
    6b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b60:	80 3c       	cpi	r24, 0xC0	; 192
    6b62:	91 05       	cpc	r25, r1
    6b64:	29 f4       	brne	.+10     	; 0x6b70 <sysclk_enable_peripheral_clock+0x2e>
    6b66:	60 e1       	ldi	r22, 0x10	; 16
    6b68:	80 e0       	ldi	r24, 0x00	; 0
    6b6a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6b6e:	7b c1       	rjmp	.+758    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6b70:	89 81       	ldd	r24, Y+1	; 0x01
    6b72:	9a 81       	ldd	r25, Y+2	; 0x02
    6b74:	80 34       	cpi	r24, 0x40	; 64
    6b76:	94 40       	sbci	r25, 0x04	; 4
    6b78:	29 f4       	brne	.+10     	; 0x6b84 <sysclk_enable_peripheral_clock+0x42>
    6b7a:	68 e0       	ldi	r22, 0x08	; 8
    6b7c:	80 e0       	ldi	r24, 0x00	; 0
    6b7e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6b82:	71 c1       	rjmp	.+738    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6b84:	89 81       	ldd	r24, Y+1	; 0x01
    6b86:	9a 81       	ldd	r25, Y+2	; 0x02
    6b88:	81 15       	cp	r24, r1
    6b8a:	94 40       	sbci	r25, 0x04	; 4
    6b8c:	29 f4       	brne	.+10     	; 0x6b98 <sysclk_enable_peripheral_clock+0x56>
    6b8e:	64 e0       	ldi	r22, 0x04	; 4
    6b90:	80 e0       	ldi	r24, 0x00	; 0
    6b92:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6b96:	67 c1       	rjmp	.+718    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6b98:	89 81       	ldd	r24, Y+1	; 0x01
    6b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    6b9c:	80 38       	cpi	r24, 0x80	; 128
    6b9e:	91 40       	sbci	r25, 0x01	; 1
    6ba0:	29 f4       	brne	.+10     	; 0x6bac <sysclk_enable_peripheral_clock+0x6a>
    6ba2:	62 e0       	ldi	r22, 0x02	; 2
    6ba4:	80 e0       	ldi	r24, 0x00	; 0
    6ba6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6baa:	5d c1       	rjmp	.+698    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6bac:	89 81       	ldd	r24, Y+1	; 0x01
    6bae:	9a 81       	ldd	r25, Y+2	; 0x02
    6bb0:	81 15       	cp	r24, r1
    6bb2:	91 40       	sbci	r25, 0x01	; 1
    6bb4:	29 f4       	brne	.+10     	; 0x6bc0 <sysclk_enable_peripheral_clock+0x7e>
    6bb6:	61 e0       	ldi	r22, 0x01	; 1
    6bb8:	80 e0       	ldi	r24, 0x00	; 0
    6bba:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6bbe:	53 c1       	rjmp	.+678    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6bc0:	89 81       	ldd	r24, Y+1	; 0x01
    6bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    6bc4:	80 38       	cpi	r24, 0x80	; 128
    6bc6:	93 40       	sbci	r25, 0x03	; 3
    6bc8:	29 f4       	brne	.+10     	; 0x6bd4 <sysclk_enable_peripheral_clock+0x92>
    6bca:	61 e0       	ldi	r22, 0x01	; 1
    6bcc:	81 e0       	ldi	r24, 0x01	; 1
    6bce:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6bd2:	49 c1       	rjmp	.+658    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6bd4:	89 81       	ldd	r24, Y+1	; 0x01
    6bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd8:	80 39       	cpi	r24, 0x90	; 144
    6bda:	93 40       	sbci	r25, 0x03	; 3
    6bdc:	29 f4       	brne	.+10     	; 0x6be8 <sysclk_enable_peripheral_clock+0xa6>
    6bde:	61 e0       	ldi	r22, 0x01	; 1
    6be0:	82 e0       	ldi	r24, 0x02	; 2
    6be2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6be6:	3f c1       	rjmp	.+638    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6be8:	89 81       	ldd	r24, Y+1	; 0x01
    6bea:	9a 81       	ldd	r25, Y+2	; 0x02
    6bec:	81 15       	cp	r24, r1
    6bee:	92 40       	sbci	r25, 0x02	; 2
    6bf0:	29 f4       	brne	.+10     	; 0x6bfc <sysclk_enable_peripheral_clock+0xba>
    6bf2:	62 e0       	ldi	r22, 0x02	; 2
    6bf4:	81 e0       	ldi	r24, 0x01	; 1
    6bf6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6bfa:	35 c1       	rjmp	.+618    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6bfc:	89 81       	ldd	r24, Y+1	; 0x01
    6bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    6c00:	80 34       	cpi	r24, 0x40	; 64
    6c02:	92 40       	sbci	r25, 0x02	; 2
    6c04:	29 f4       	brne	.+10     	; 0x6c10 <sysclk_enable_peripheral_clock+0xce>
    6c06:	62 e0       	ldi	r22, 0x02	; 2
    6c08:	82 e0       	ldi	r24, 0x02	; 2
    6c0a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c0e:	2b c1       	rjmp	.+598    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c10:	89 81       	ldd	r24, Y+1	; 0x01
    6c12:	9a 81       	ldd	r25, Y+2	; 0x02
    6c14:	81 15       	cp	r24, r1
    6c16:	93 40       	sbci	r25, 0x03	; 3
    6c18:	29 f4       	brne	.+10     	; 0x6c24 <sysclk_enable_peripheral_clock+0xe2>
    6c1a:	64 e0       	ldi	r22, 0x04	; 4
    6c1c:	81 e0       	ldi	r24, 0x01	; 1
    6c1e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c22:	21 c1       	rjmp	.+578    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c24:	89 81       	ldd	r24, Y+1	; 0x01
    6c26:	9a 81       	ldd	r25, Y+2	; 0x02
    6c28:	80 32       	cpi	r24, 0x20	; 32
    6c2a:	93 40       	sbci	r25, 0x03	; 3
    6c2c:	29 f4       	brne	.+10     	; 0x6c38 <sysclk_enable_peripheral_clock+0xf6>
    6c2e:	64 e0       	ldi	r22, 0x04	; 4
    6c30:	82 e0       	ldi	r24, 0x02	; 2
    6c32:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c36:	17 c1       	rjmp	.+558    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c38:	89 81       	ldd	r24, Y+1	; 0x01
    6c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c3c:	81 15       	cp	r24, r1
    6c3e:	98 40       	sbci	r25, 0x08	; 8
    6c40:	29 f4       	brne	.+10     	; 0x6c4c <sysclk_enable_peripheral_clock+0x10a>
    6c42:	61 e0       	ldi	r22, 0x01	; 1
    6c44:	83 e0       	ldi	r24, 0x03	; 3
    6c46:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c4a:	0d c1       	rjmp	.+538    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c4c:	89 81       	ldd	r24, Y+1	; 0x01
    6c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    6c50:	81 15       	cp	r24, r1
    6c52:	99 40       	sbci	r25, 0x09	; 9
    6c54:	29 f4       	brne	.+10     	; 0x6c60 <sysclk_enable_peripheral_clock+0x11e>
    6c56:	61 e0       	ldi	r22, 0x01	; 1
    6c58:	84 e0       	ldi	r24, 0x04	; 4
    6c5a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c5e:	03 c1       	rjmp	.+518    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c60:	89 81       	ldd	r24, Y+1	; 0x01
    6c62:	9a 81       	ldd	r25, Y+2	; 0x02
    6c64:	81 15       	cp	r24, r1
    6c66:	9a 40       	sbci	r25, 0x0A	; 10
    6c68:	29 f4       	brne	.+10     	; 0x6c74 <sysclk_enable_peripheral_clock+0x132>
    6c6a:	61 e0       	ldi	r22, 0x01	; 1
    6c6c:	85 e0       	ldi	r24, 0x05	; 5
    6c6e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c72:	f9 c0       	rjmp	.+498    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c74:	89 81       	ldd	r24, Y+1	; 0x01
    6c76:	9a 81       	ldd	r25, Y+2	; 0x02
    6c78:	81 15       	cp	r24, r1
    6c7a:	9b 40       	sbci	r25, 0x0B	; 11
    6c7c:	29 f4       	brne	.+10     	; 0x6c88 <sysclk_enable_peripheral_clock+0x146>
    6c7e:	61 e0       	ldi	r22, 0x01	; 1
    6c80:	86 e0       	ldi	r24, 0x06	; 6
    6c82:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c86:	ef c0       	rjmp	.+478    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c88:	89 81       	ldd	r24, Y+1	; 0x01
    6c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c8c:	80 34       	cpi	r24, 0x40	; 64
    6c8e:	98 40       	sbci	r25, 0x08	; 8
    6c90:	29 f4       	brne	.+10     	; 0x6c9c <sysclk_enable_peripheral_clock+0x15a>
    6c92:	62 e0       	ldi	r22, 0x02	; 2
    6c94:	83 e0       	ldi	r24, 0x03	; 3
    6c96:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6c9a:	e5 c0       	rjmp	.+458    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6c9c:	89 81       	ldd	r24, Y+1	; 0x01
    6c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    6ca0:	80 34       	cpi	r24, 0x40	; 64
    6ca2:	99 40       	sbci	r25, 0x09	; 9
    6ca4:	29 f4       	brne	.+10     	; 0x6cb0 <sysclk_enable_peripheral_clock+0x16e>
    6ca6:	62 e0       	ldi	r22, 0x02	; 2
    6ca8:	84 e0       	ldi	r24, 0x04	; 4
    6caa:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6cae:	db c0       	rjmp	.+438    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6cb0:	89 81       	ldd	r24, Y+1	; 0x01
    6cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6cb4:	80 34       	cpi	r24, 0x40	; 64
    6cb6:	9a 40       	sbci	r25, 0x0A	; 10
    6cb8:	29 f4       	brne	.+10     	; 0x6cc4 <sysclk_enable_peripheral_clock+0x182>
    6cba:	62 e0       	ldi	r22, 0x02	; 2
    6cbc:	85 e0       	ldi	r24, 0x05	; 5
    6cbe:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6cc2:	d1 c0       	rjmp	.+418    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6cc4:	89 81       	ldd	r24, Y+1	; 0x01
    6cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cc8:	80 34       	cpi	r24, 0x40	; 64
    6cca:	9b 40       	sbci	r25, 0x0B	; 11
    6ccc:	29 f4       	brne	.+10     	; 0x6cd8 <sysclk_enable_peripheral_clock+0x196>
    6cce:	62 e0       	ldi	r22, 0x02	; 2
    6cd0:	86 e0       	ldi	r24, 0x06	; 6
    6cd2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6cd6:	c7 c0       	rjmp	.+398    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6cd8:	89 81       	ldd	r24, Y+1	; 0x01
    6cda:	9a 81       	ldd	r25, Y+2	; 0x02
    6cdc:	80 39       	cpi	r24, 0x90	; 144
    6cde:	98 40       	sbci	r25, 0x08	; 8
    6ce0:	29 f4       	brne	.+10     	; 0x6cec <sysclk_enable_peripheral_clock+0x1aa>
    6ce2:	64 e0       	ldi	r22, 0x04	; 4
    6ce4:	83 e0       	ldi	r24, 0x03	; 3
    6ce6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6cea:	bd c0       	rjmp	.+378    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6cec:	89 81       	ldd	r24, Y+1	; 0x01
    6cee:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf0:	80 39       	cpi	r24, 0x90	; 144
    6cf2:	99 40       	sbci	r25, 0x09	; 9
    6cf4:	29 f4       	brne	.+10     	; 0x6d00 <sysclk_enable_peripheral_clock+0x1be>
    6cf6:	64 e0       	ldi	r22, 0x04	; 4
    6cf8:	84 e0       	ldi	r24, 0x04	; 4
    6cfa:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6cfe:	b3 c0       	rjmp	.+358    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d00:	89 81       	ldd	r24, Y+1	; 0x01
    6d02:	9a 81       	ldd	r25, Y+2	; 0x02
    6d04:	80 39       	cpi	r24, 0x90	; 144
    6d06:	9a 40       	sbci	r25, 0x0A	; 10
    6d08:	29 f4       	brne	.+10     	; 0x6d14 <sysclk_enable_peripheral_clock+0x1d2>
    6d0a:	64 e0       	ldi	r22, 0x04	; 4
    6d0c:	85 e0       	ldi	r24, 0x05	; 5
    6d0e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d12:	a9 c0       	rjmp	.+338    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d14:	89 81       	ldd	r24, Y+1	; 0x01
    6d16:	9a 81       	ldd	r25, Y+2	; 0x02
    6d18:	80 39       	cpi	r24, 0x90	; 144
    6d1a:	9b 40       	sbci	r25, 0x0B	; 11
    6d1c:	29 f4       	brne	.+10     	; 0x6d28 <sysclk_enable_peripheral_clock+0x1e6>
    6d1e:	64 e0       	ldi	r22, 0x04	; 4
    6d20:	86 e0       	ldi	r24, 0x06	; 6
    6d22:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d26:	9f c0       	rjmp	.+318    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d28:	89 81       	ldd	r24, Y+1	; 0x01
    6d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d2c:	80 3c       	cpi	r24, 0xC0	; 192
    6d2e:	98 40       	sbci	r25, 0x08	; 8
    6d30:	29 f4       	brne	.+10     	; 0x6d3c <sysclk_enable_peripheral_clock+0x1fa>
    6d32:	68 e0       	ldi	r22, 0x08	; 8
    6d34:	83 e0       	ldi	r24, 0x03	; 3
    6d36:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d3a:	95 c0       	rjmp	.+298    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d3c:	89 81       	ldd	r24, Y+1	; 0x01
    6d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d40:	80 3c       	cpi	r24, 0xC0	; 192
    6d42:	99 40       	sbci	r25, 0x09	; 9
    6d44:	29 f4       	brne	.+10     	; 0x6d50 <sysclk_enable_peripheral_clock+0x20e>
    6d46:	68 e0       	ldi	r22, 0x08	; 8
    6d48:	84 e0       	ldi	r24, 0x04	; 4
    6d4a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d4e:	8b c0       	rjmp	.+278    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d50:	89 81       	ldd	r24, Y+1	; 0x01
    6d52:	9a 81       	ldd	r25, Y+2	; 0x02
    6d54:	80 3c       	cpi	r24, 0xC0	; 192
    6d56:	9a 40       	sbci	r25, 0x0A	; 10
    6d58:	29 f4       	brne	.+10     	; 0x6d64 <sysclk_enable_peripheral_clock+0x222>
    6d5a:	68 e0       	ldi	r22, 0x08	; 8
    6d5c:	85 e0       	ldi	r24, 0x05	; 5
    6d5e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d62:	81 c0       	rjmp	.+258    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d64:	89 81       	ldd	r24, Y+1	; 0x01
    6d66:	9a 81       	ldd	r25, Y+2	; 0x02
    6d68:	80 3c       	cpi	r24, 0xC0	; 192
    6d6a:	9b 40       	sbci	r25, 0x0B	; 11
    6d6c:	29 f4       	brne	.+10     	; 0x6d78 <sysclk_enable_peripheral_clock+0x236>
    6d6e:	68 e0       	ldi	r22, 0x08	; 8
    6d70:	86 e0       	ldi	r24, 0x06	; 6
    6d72:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d76:	77 c0       	rjmp	.+238    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d78:	89 81       	ldd	r24, Y+1	; 0x01
    6d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d7c:	80 3a       	cpi	r24, 0xA0	; 160
    6d7e:	98 40       	sbci	r25, 0x08	; 8
    6d80:	29 f4       	brne	.+10     	; 0x6d8c <sysclk_enable_peripheral_clock+0x24a>
    6d82:	60 e1       	ldi	r22, 0x10	; 16
    6d84:	83 e0       	ldi	r24, 0x03	; 3
    6d86:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d8a:	6d c0       	rjmp	.+218    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6d8c:	89 81       	ldd	r24, Y+1	; 0x01
    6d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d90:	80 3a       	cpi	r24, 0xA0	; 160
    6d92:	99 40       	sbci	r25, 0x09	; 9
    6d94:	29 f4       	brne	.+10     	; 0x6da0 <sysclk_enable_peripheral_clock+0x25e>
    6d96:	60 e1       	ldi	r22, 0x10	; 16
    6d98:	84 e0       	ldi	r24, 0x04	; 4
    6d9a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6d9e:	63 c0       	rjmp	.+198    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6da0:	89 81       	ldd	r24, Y+1	; 0x01
    6da2:	9a 81       	ldd	r25, Y+2	; 0x02
    6da4:	80 3a       	cpi	r24, 0xA0	; 160
    6da6:	9a 40       	sbci	r25, 0x0A	; 10
    6da8:	29 f4       	brne	.+10     	; 0x6db4 <sysclk_enable_peripheral_clock+0x272>
    6daa:	60 e1       	ldi	r22, 0x10	; 16
    6dac:	85 e0       	ldi	r24, 0x05	; 5
    6dae:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6db2:	59 c0       	rjmp	.+178    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6db4:	89 81       	ldd	r24, Y+1	; 0x01
    6db6:	9a 81       	ldd	r25, Y+2	; 0x02
    6db8:	80 3a       	cpi	r24, 0xA0	; 160
    6dba:	9b 40       	sbci	r25, 0x0B	; 11
    6dbc:	29 f4       	brne	.+10     	; 0x6dc8 <sysclk_enable_peripheral_clock+0x286>
    6dbe:	60 e1       	ldi	r22, 0x10	; 16
    6dc0:	86 e0       	ldi	r24, 0x06	; 6
    6dc2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6dc6:	4f c0       	rjmp	.+158    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6dc8:	89 81       	ldd	r24, Y+1	; 0x01
    6dca:	9a 81       	ldd	r25, Y+2	; 0x02
    6dcc:	80 3b       	cpi	r24, 0xB0	; 176
    6dce:	98 40       	sbci	r25, 0x08	; 8
    6dd0:	29 f4       	brne	.+10     	; 0x6ddc <sysclk_enable_peripheral_clock+0x29a>
    6dd2:	60 e2       	ldi	r22, 0x20	; 32
    6dd4:	83 e0       	ldi	r24, 0x03	; 3
    6dd6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6dda:	45 c0       	rjmp	.+138    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6ddc:	89 81       	ldd	r24, Y+1	; 0x01
    6dde:	9a 81       	ldd	r25, Y+2	; 0x02
    6de0:	80 3b       	cpi	r24, 0xB0	; 176
    6de2:	99 40       	sbci	r25, 0x09	; 9
    6de4:	29 f4       	brne	.+10     	; 0x6df0 <sysclk_enable_peripheral_clock+0x2ae>
    6de6:	60 e2       	ldi	r22, 0x20	; 32
    6de8:	84 e0       	ldi	r24, 0x04	; 4
    6dea:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6dee:	3b c0       	rjmp	.+118    	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6df0:	89 81       	ldd	r24, Y+1	; 0x01
    6df2:	9a 81       	ldd	r25, Y+2	; 0x02
    6df4:	80 3b       	cpi	r24, 0xB0	; 176
    6df6:	9a 40       	sbci	r25, 0x0A	; 10
    6df8:	29 f4       	brne	.+10     	; 0x6e04 <sysclk_enable_peripheral_clock+0x2c2>
    6dfa:	60 e2       	ldi	r22, 0x20	; 32
    6dfc:	85 e0       	ldi	r24, 0x05	; 5
    6dfe:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6e02:	31 c0       	rjmp	.+98     	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6e04:	89 81       	ldd	r24, Y+1	; 0x01
    6e06:	9a 81       	ldd	r25, Y+2	; 0x02
    6e08:	80 3b       	cpi	r24, 0xB0	; 176
    6e0a:	9b 40       	sbci	r25, 0x0B	; 11
    6e0c:	29 f4       	brne	.+10     	; 0x6e18 <sysclk_enable_peripheral_clock+0x2d6>
    6e0e:	60 e2       	ldi	r22, 0x20	; 32
    6e10:	86 e0       	ldi	r24, 0x06	; 6
    6e12:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6e16:	27 c0       	rjmp	.+78     	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6e18:	89 81       	ldd	r24, Y+1	; 0x01
    6e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e1c:	80 38       	cpi	r24, 0x80	; 128
    6e1e:	94 40       	sbci	r25, 0x04	; 4
    6e20:	29 f4       	brne	.+10     	; 0x6e2c <sysclk_enable_peripheral_clock+0x2ea>
    6e22:	60 e4       	ldi	r22, 0x40	; 64
    6e24:	83 e0       	ldi	r24, 0x03	; 3
    6e26:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6e2a:	1d c0       	rjmp	.+58     	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6e2c:	89 81       	ldd	r24, Y+1	; 0x01
    6e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e30:	80 39       	cpi	r24, 0x90	; 144
    6e32:	94 40       	sbci	r25, 0x04	; 4
    6e34:	29 f4       	brne	.+10     	; 0x6e40 <sysclk_enable_peripheral_clock+0x2fe>
    6e36:	60 e4       	ldi	r22, 0x40	; 64
    6e38:	84 e0       	ldi	r24, 0x04	; 4
    6e3a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6e3e:	13 c0       	rjmp	.+38     	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6e40:	89 81       	ldd	r24, Y+1	; 0x01
    6e42:	9a 81       	ldd	r25, Y+2	; 0x02
    6e44:	80 3a       	cpi	r24, 0xA0	; 160
    6e46:	94 40       	sbci	r25, 0x04	; 4
    6e48:	29 f4       	brne	.+10     	; 0x6e54 <sysclk_enable_peripheral_clock+0x312>
    6e4a:	60 e4       	ldi	r22, 0x40	; 64
    6e4c:	85 e0       	ldi	r24, 0x05	; 5
    6e4e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6e52:	09 c0       	rjmp	.+18     	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6e54:	89 81       	ldd	r24, Y+1	; 0x01
    6e56:	9a 81       	ldd	r25, Y+2	; 0x02
    6e58:	80 3b       	cpi	r24, 0xB0	; 176
    6e5a:	94 40       	sbci	r25, 0x04	; 4
    6e5c:	21 f4       	brne	.+8      	; 0x6e66 <sysclk_enable_peripheral_clock+0x324>
    6e5e:	60 e4       	ldi	r22, 0x40	; 64
    6e60:	86 e0       	ldi	r24, 0x06	; 6
    6e62:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6e66:	00 00       	nop
    6e68:	0f 90       	pop	r0
    6e6a:	0f 90       	pop	r0
    6e6c:	df 91       	pop	r29
    6e6e:	cf 91       	pop	r28
    6e70:	08 95       	ret

00006e72 <usart_serial_init>:
    6e72:	cf 93       	push	r28
    6e74:	df 93       	push	r29
    6e76:	cd b7       	in	r28, 0x3d	; 61
    6e78:	de b7       	in	r29, 0x3e	; 62
    6e7a:	2b 97       	sbiw	r28, 0x0b	; 11
    6e7c:	cd bf       	out	0x3d, r28	; 61
    6e7e:	de bf       	out	0x3e, r29	; 62
    6e80:	88 87       	std	Y+8, r24	; 0x08
    6e82:	99 87       	std	Y+9, r25	; 0x09
    6e84:	6a 87       	std	Y+10, r22	; 0x0a
    6e86:	7b 87       	std	Y+11, r23	; 0x0b
    6e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    6e8c:	fc 01       	movw	r30, r24
    6e8e:	84 81       	ldd	r24, Z+4	; 0x04
    6e90:	8d 83       	std	Y+5, r24	; 0x05
    6e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    6e96:	fc 01       	movw	r30, r24
    6e98:	85 81       	ldd	r24, Z+5	; 0x05
    6e9a:	8e 83       	std	Y+6, r24	; 0x06
    6e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6ea0:	fc 01       	movw	r30, r24
    6ea2:	86 81       	ldd	r24, Z+6	; 0x06
    6ea4:	8f 83       	std	Y+7, r24	; 0x07
    6ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
    6ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
    6eaa:	fc 01       	movw	r30, r24
    6eac:	80 81       	ld	r24, Z
    6eae:	91 81       	ldd	r25, Z+1	; 0x01
    6eb0:	a2 81       	ldd	r26, Z+2	; 0x02
    6eb2:	b3 81       	ldd	r27, Z+3	; 0x03
    6eb4:	89 83       	std	Y+1, r24	; 0x01
    6eb6:	9a 83       	std	Y+2, r25	; 0x02
    6eb8:	ab 83       	std	Y+3, r26	; 0x03
    6eba:	bc 83       	std	Y+4, r27	; 0x04
    6ebc:	88 85       	ldd	r24, Y+8	; 0x08
    6ebe:	99 85       	ldd	r25, Y+9	; 0x09
    6ec0:	80 3a       	cpi	r24, 0xA0	; 160
    6ec2:	98 40       	sbci	r25, 0x08	; 8
    6ec4:	21 f4       	brne	.+8      	; 0x6ece <usart_serial_init+0x5c>
    6ec6:	60 e1       	ldi	r22, 0x10	; 16
    6ec8:	83 e0       	ldi	r24, 0x03	; 3
    6eca:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6ece:	88 85       	ldd	r24, Y+8	; 0x08
    6ed0:	99 85       	ldd	r25, Y+9	; 0x09
    6ed2:	80 3b       	cpi	r24, 0xB0	; 176
    6ed4:	98 40       	sbci	r25, 0x08	; 8
    6ed6:	21 f4       	brne	.+8      	; 0x6ee0 <usart_serial_init+0x6e>
    6ed8:	60 e2       	ldi	r22, 0x20	; 32
    6eda:	83 e0       	ldi	r24, 0x03	; 3
    6edc:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6ee0:	88 85       	ldd	r24, Y+8	; 0x08
    6ee2:	99 85       	ldd	r25, Y+9	; 0x09
    6ee4:	80 3a       	cpi	r24, 0xA0	; 160
    6ee6:	99 40       	sbci	r25, 0x09	; 9
    6ee8:	21 f4       	brne	.+8      	; 0x6ef2 <usart_serial_init+0x80>
    6eea:	60 e1       	ldi	r22, 0x10	; 16
    6eec:	84 e0       	ldi	r24, 0x04	; 4
    6eee:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6ef2:	88 85       	ldd	r24, Y+8	; 0x08
    6ef4:	99 85       	ldd	r25, Y+9	; 0x09
    6ef6:	80 3b       	cpi	r24, 0xB0	; 176
    6ef8:	99 40       	sbci	r25, 0x09	; 9
    6efa:	21 f4       	brne	.+8      	; 0x6f04 <usart_serial_init+0x92>
    6efc:	60 e2       	ldi	r22, 0x20	; 32
    6efe:	84 e0       	ldi	r24, 0x04	; 4
    6f00:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6f04:	88 85       	ldd	r24, Y+8	; 0x08
    6f06:	99 85       	ldd	r25, Y+9	; 0x09
    6f08:	80 3a       	cpi	r24, 0xA0	; 160
    6f0a:	9a 40       	sbci	r25, 0x0A	; 10
    6f0c:	21 f4       	brne	.+8      	; 0x6f16 <usart_serial_init+0xa4>
    6f0e:	60 e1       	ldi	r22, 0x10	; 16
    6f10:	85 e0       	ldi	r24, 0x05	; 5
    6f12:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6f16:	88 85       	ldd	r24, Y+8	; 0x08
    6f18:	99 85       	ldd	r25, Y+9	; 0x09
    6f1a:	80 3b       	cpi	r24, 0xB0	; 176
    6f1c:	9a 40       	sbci	r25, 0x0A	; 10
    6f1e:	21 f4       	brne	.+8      	; 0x6f28 <usart_serial_init+0xb6>
    6f20:	60 e2       	ldi	r22, 0x20	; 32
    6f22:	85 e0       	ldi	r24, 0x05	; 5
    6f24:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6f28:	88 85       	ldd	r24, Y+8	; 0x08
    6f2a:	99 85       	ldd	r25, Y+9	; 0x09
    6f2c:	80 3a       	cpi	r24, 0xA0	; 160
    6f2e:	9b 40       	sbci	r25, 0x0B	; 11
    6f30:	21 f4       	brne	.+8      	; 0x6f3a <usart_serial_init+0xc8>
    6f32:	60 e1       	ldi	r22, 0x10	; 16
    6f34:	86 e0       	ldi	r24, 0x06	; 6
    6f36:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6f3a:	88 85       	ldd	r24, Y+8	; 0x08
    6f3c:	99 85       	ldd	r25, Y+9	; 0x09
    6f3e:	80 3b       	cpi	r24, 0xB0	; 176
    6f40:	9b 40       	sbci	r25, 0x0B	; 11
    6f42:	21 f4       	brne	.+8      	; 0x6f4c <usart_serial_init+0xda>
    6f44:	60 e2       	ldi	r22, 0x20	; 32
    6f46:	86 e0       	ldi	r24, 0x06	; 6
    6f48:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
    6f4c:	88 85       	ldd	r24, Y+8	; 0x08
    6f4e:	99 85       	ldd	r25, Y+9	; 0x09
    6f50:	9e 01       	movw	r18, r28
    6f52:	2f 5f       	subi	r18, 0xFF	; 255
    6f54:	3f 4f       	sbci	r19, 0xFF	; 255
    6f56:	b9 01       	movw	r22, r18
    6f58:	0f db       	rcall	.-2530   	; 0x6578 <usart_init_rs232>
    6f5a:	88 23       	and	r24, r24
    6f5c:	11 f0       	breq	.+4      	; 0x6f62 <usart_serial_init+0xf0>
    6f5e:	81 e0       	ldi	r24, 0x01	; 1
    6f60:	01 c0       	rjmp	.+2      	; 0x6f64 <usart_serial_init+0xf2>
    6f62:	80 e0       	ldi	r24, 0x00	; 0
    6f64:	2b 96       	adiw	r28, 0x0b	; 11
    6f66:	cd bf       	out	0x3d, r28	; 61
    6f68:	de bf       	out	0x3e, r29	; 62
    6f6a:	df 91       	pop	r29
    6f6c:	cf 91       	pop	r28
    6f6e:	08 95       	ret

00006f70 <usart_serial_putchar>:
    6f70:	cf 93       	push	r28
    6f72:	df 93       	push	r29
    6f74:	00 d0       	rcall	.+0      	; 0x6f76 <usart_serial_putchar+0x6>
    6f76:	cd b7       	in	r28, 0x3d	; 61
    6f78:	de b7       	in	r29, 0x3e	; 62
    6f7a:	89 83       	std	Y+1, r24	; 0x01
    6f7c:	9a 83       	std	Y+2, r25	; 0x02
    6f7e:	6b 83       	std	Y+3, r22	; 0x03
    6f80:	89 81       	ldd	r24, Y+1	; 0x01
    6f82:	9a 81       	ldd	r25, Y+2	; 0x02
    6f84:	6b 81       	ldd	r22, Y+3	; 0x03
    6f86:	3e db       	rcall	.-2436   	; 0x6604 <usart_putchar>
    6f88:	23 96       	adiw	r28, 0x03	; 3
    6f8a:	cd bf       	out	0x3d, r28	; 61
    6f8c:	de bf       	out	0x3e, r29	; 62
    6f8e:	df 91       	pop	r29
    6f90:	cf 91       	pop	r28
    6f92:	08 95       	ret

00006f94 <usart_serial_getchar>:
    6f94:	cf 93       	push	r28
    6f96:	df 93       	push	r29
    6f98:	00 d0       	rcall	.+0      	; 0x6f9a <usart_serial_getchar+0x6>
    6f9a:	1f 92       	push	r1
    6f9c:	cd b7       	in	r28, 0x3d	; 61
    6f9e:	de b7       	in	r29, 0x3e	; 62
    6fa0:	89 83       	std	Y+1, r24	; 0x01
    6fa2:	9a 83       	std	Y+2, r25	; 0x02
    6fa4:	6b 83       	std	Y+3, r22	; 0x03
    6fa6:	7c 83       	std	Y+4, r23	; 0x04
    6fa8:	89 81       	ldd	r24, Y+1	; 0x01
    6faa:	9a 81       	ldd	r25, Y+2	; 0x02
    6fac:	49 db       	rcall	.-2414   	; 0x6640 <usart_getchar>
    6fae:	28 2f       	mov	r18, r24
    6fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    6fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    6fb4:	fc 01       	movw	r30, r24
    6fb6:	20 83       	st	Z, r18
    6fb8:	00 00       	nop
    6fba:	24 96       	adiw	r28, 0x04	; 4
    6fbc:	cd bf       	out	0x3d, r28	; 61
    6fbe:	de bf       	out	0x3e, r29	; 62
    6fc0:	df 91       	pop	r29
    6fc2:	cf 91       	pop	r28
    6fc4:	08 95       	ret

00006fc6 <stdio_serial_init>:
    6fc6:	cf 93       	push	r28
    6fc8:	df 93       	push	r29
    6fca:	00 d0       	rcall	.+0      	; 0x6fcc <stdio_serial_init+0x6>
    6fcc:	1f 92       	push	r1
    6fce:	cd b7       	in	r28, 0x3d	; 61
    6fd0:	de b7       	in	r29, 0x3e	; 62
    6fd2:	89 83       	std	Y+1, r24	; 0x01
    6fd4:	9a 83       	std	Y+2, r25	; 0x02
    6fd6:	6b 83       	std	Y+3, r22	; 0x03
    6fd8:	7c 83       	std	Y+4, r23	; 0x04
    6fda:	89 81       	ldd	r24, Y+1	; 0x01
    6fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    6fde:	80 93 9d 22 	sts	0x229D, r24	; 0x80229d <stdio_base>
    6fe2:	90 93 9e 22 	sts	0x229E, r25	; 0x80229e <stdio_base+0x1>
    6fe6:	88 eb       	ldi	r24, 0xB8	; 184
    6fe8:	97 e3       	ldi	r25, 0x37	; 55
    6fea:	80 93 9b 22 	sts	0x229B, r24	; 0x80229b <ptr_put>
    6fee:	90 93 9c 22 	sts	0x229C, r25	; 0x80229c <ptr_put+0x1>
    6ff2:	8a ec       	ldi	r24, 0xCA	; 202
    6ff4:	97 e3       	ldi	r25, 0x37	; 55
    6ff6:	80 93 99 22 	sts	0x2299, r24	; 0x802299 <ptr_get>
    6ffa:	90 93 9a 22 	sts	0x229A, r25	; 0x80229a <ptr_get+0x1>
    6ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    7000:	3c 81       	ldd	r19, Y+4	; 0x04
    7002:	89 81       	ldd	r24, Y+1	; 0x01
    7004:	9a 81       	ldd	r25, Y+2	; 0x02
    7006:	b9 01       	movw	r22, r18
    7008:	34 df       	rcall	.-408    	; 0x6e72 <usart_serial_init>
    700a:	6c ee       	ldi	r22, 0xEC	; 236
    700c:	7d e1       	ldi	r23, 0x1D	; 29
    700e:	8b e0       	ldi	r24, 0x0B	; 11
    7010:	9e e1       	ldi	r25, 0x1E	; 30
    7012:	0e 94 92 48 	call	0x9124	; 0x9124 <fdevopen>
    7016:	00 00       	nop
    7018:	24 96       	adiw	r28, 0x04	; 4
    701a:	cd bf       	out	0x3d, r28	; 61
    701c:	de bf       	out	0x3e, r29	; 62
    701e:	df 91       	pop	r29
    7020:	cf 91       	pop	r28
    7022:	08 95       	ret

00007024 <uart_init>:
    7024:	cf 93       	push	r28
    7026:	df 93       	push	r29
    7028:	1f 92       	push	r1
    702a:	1f 92       	push	r1
    702c:	cd b7       	in	r28, 0x3d	; 61
    702e:	de b7       	in	r29, 0x3e	; 62
    7030:	89 83       	std	Y+1, r24	; 0x01
    7032:	9a 83       	std	Y+2, r25	; 0x02
    7034:	89 81       	ldd	r24, Y+1	; 0x01
    7036:	9a 81       	ldd	r25, Y+2	; 0x02
    7038:	fc 01       	movw	r30, r24
    703a:	86 81       	ldd	r24, Z+6	; 0x06
    703c:	97 81       	ldd	r25, Z+7	; 0x07
    703e:	a0 85       	ldd	r26, Z+8	; 0x08
    7040:	b1 85       	ldd	r27, Z+9	; 0x09
    7042:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6595>
    7046:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6595+0x1>
    704a:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6595+0x2>
    704e:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6595+0x3>
    7052:	89 81       	ldd	r24, Y+1	; 0x01
    7054:	9a 81       	ldd	r25, Y+2	; 0x02
    7056:	fc 01       	movw	r30, r24
    7058:	80 81       	ld	r24, Z
    705a:	91 81       	ldd	r25, Z+1	; 0x01
    705c:	29 81       	ldd	r18, Y+1	; 0x01
    705e:	3a 81       	ldd	r19, Y+2	; 0x02
    7060:	f9 01       	movw	r30, r18
    7062:	20 81       	ld	r18, Z
    7064:	31 81       	ldd	r19, Z+1	; 0x01
    7066:	f9 01       	movw	r30, r18
    7068:	40 81       	ld	r20, Z
    706a:	29 81       	ldd	r18, Y+1	; 0x01
    706c:	3a 81       	ldd	r19, Y+2	; 0x02
    706e:	f9 01       	movw	r30, r18
    7070:	25 81       	ldd	r18, Z+5	; 0x05
    7072:	24 2b       	or	r18, r20
    7074:	fc 01       	movw	r30, r24
    7076:	20 83       	st	Z, r18
    7078:	89 81       	ldd	r24, Y+1	; 0x01
    707a:	9a 81       	ldd	r25, Y+2	; 0x02
    707c:	fc 01       	movw	r30, r24
    707e:	80 81       	ld	r24, Z
    7080:	91 81       	ldd	r25, Z+1	; 0x01
    7082:	29 81       	ldd	r18, Y+1	; 0x01
    7084:	3a 81       	ldd	r19, Y+2	; 0x02
    7086:	f9 01       	movw	r30, r18
    7088:	20 81       	ld	r18, Z
    708a:	31 81       	ldd	r19, Z+1	; 0x01
    708c:	f9 01       	movw	r30, r18
    708e:	44 81       	ldd	r20, Z+4	; 0x04
    7090:	29 81       	ldd	r18, Y+1	; 0x01
    7092:	3a 81       	ldd	r19, Y+2	; 0x02
    7094:	f9 01       	movw	r30, r18
    7096:	25 81       	ldd	r18, Z+5	; 0x05
    7098:	24 2b       	or	r18, r20
    709a:	fc 01       	movw	r30, r24
    709c:	24 83       	std	Z+4, r18	; 0x04
    709e:	89 81       	ldd	r24, Y+1	; 0x01
    70a0:	9a 81       	ldd	r25, Y+2	; 0x02
    70a2:	fc 01       	movw	r30, r24
    70a4:	80 81       	ld	r24, Z
    70a6:	91 81       	ldd	r25, Z+1	; 0x01
    70a8:	29 81       	ldd	r18, Y+1	; 0x01
    70aa:	3a 81       	ldd	r19, Y+2	; 0x02
    70ac:	f9 01       	movw	r30, r18
    70ae:	20 81       	ld	r18, Z
    70b0:	31 81       	ldd	r19, Z+1	; 0x01
    70b2:	f9 01       	movw	r30, r18
    70b4:	20 81       	ld	r18, Z
    70b6:	42 2f       	mov	r20, r18
    70b8:	29 81       	ldd	r18, Y+1	; 0x01
    70ba:	3a 81       	ldd	r19, Y+2	; 0x02
    70bc:	f9 01       	movw	r30, r18
    70be:	24 81       	ldd	r18, Z+4	; 0x04
    70c0:	20 95       	com	r18
    70c2:	24 23       	and	r18, r20
    70c4:	fc 01       	movw	r30, r24
    70c6:	20 83       	st	Z, r18
    70c8:	89 81       	ldd	r24, Y+1	; 0x01
    70ca:	9a 81       	ldd	r25, Y+2	; 0x02
    70cc:	fc 01       	movw	r30, r24
    70ce:	82 81       	ldd	r24, Z+2	; 0x02
    70d0:	93 81       	ldd	r25, Z+3	; 0x03
    70d2:	37 dd       	rcall	.-1426   	; 0x6b42 <sysclk_enable_peripheral_clock>
    70d4:	89 81       	ldd	r24, Y+1	; 0x01
    70d6:	9a 81       	ldd	r25, Y+2	; 0x02
    70d8:	fc 01       	movw	r30, r24
    70da:	82 81       	ldd	r24, Z+2	; 0x02
    70dc:	93 81       	ldd	r25, Z+3	; 0x03
    70de:	66 e0       	ldi	r22, 0x06	; 6
    70e0:	70 e2       	ldi	r23, 0x20	; 32
    70e2:	c7 de       	rcall	.-626    	; 0x6e72 <usart_serial_init>
    70e4:	00 00       	nop
    70e6:	0f 90       	pop	r0
    70e8:	0f 90       	pop	r0
    70ea:	df 91       	pop	r29
    70ec:	cf 91       	pop	r28
    70ee:	08 95       	ret

000070f0 <uart_terminal_init>:

void uart_terminal_init()
{
    70f0:	cf 93       	push	r28
    70f2:	df 93       	push	r29
    70f4:	cd b7       	in	r28, 0x3d	; 61
    70f6:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    70f8:	80 ea       	ldi	r24, 0xA0	; 160
    70fa:	9a e0       	ldi	r25, 0x0A	; 10
    70fc:	22 dd       	rcall	.-1468   	; 0x6b42 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    70fe:	80 e8       	ldi	r24, 0x80	; 128
    7100:	96 e0       	ldi	r25, 0x06	; 6
    7102:	20 e8       	ldi	r18, 0x80	; 128
    7104:	36 e0       	ldi	r19, 0x06	; 6
    7106:	f9 01       	movw	r30, r18
    7108:	20 81       	ld	r18, Z
    710a:	28 60       	ori	r18, 0x08	; 8
    710c:	fc 01       	movw	r30, r24
    710e:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    7110:	6d e0       	ldi	r22, 0x0D	; 13
    7112:	70 e2       	ldi	r23, 0x20	; 32
    7114:	80 ea       	ldi	r24, 0xA0	; 160
    7116:	9a e0       	ldi	r25, 0x0A	; 10
    7118:	56 df       	rcall	.-340    	; 0x6fc6 <stdio_serial_init>
	
}
    711a:	00 00       	nop
    711c:	df 91       	pop	r29
    711e:	cf 91       	pop	r28
    7120:	08 95       	ret

00007122 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    7122:	cf 93       	push	r28
    7124:	df 93       	push	r29
    7126:	cd b7       	in	r28, 0x3d	; 61
    7128:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    712a:	80 e0       	ldi	r24, 0x00	; 0
    712c:	98 e4       	ldi	r25, 0x48	; 72
    712e:	a8 ee       	ldi	r26, 0xE8	; 232
    7130:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    7132:	bc 01       	movw	r22, r24
    7134:	cd 01       	movw	r24, r26
    7136:	df 91       	pop	r29
    7138:	cf 91       	pop	r28
    713a:	08 95       	ret

0000713c <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    713c:	cf 93       	push	r28
    713e:	df 93       	push	r29
    7140:	1f 92       	push	r1
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    7146:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    7148:	ec df       	rcall	.-40     	; 0x7122 <sysclk_get_main_hz>
    714a:	dc 01       	movw	r26, r24
    714c:	cb 01       	movw	r24, r22
    714e:	29 81       	ldd	r18, Y+1	; 0x01
    7150:	22 2f       	mov	r18, r18
    7152:	30 e0       	ldi	r19, 0x00	; 0
    7154:	04 c0       	rjmp	.+8      	; 0x715e <sysclk_get_per4_hz+0x22>
    7156:	b6 95       	lsr	r27
    7158:	a7 95       	ror	r26
    715a:	97 95       	ror	r25
    715c:	87 95       	ror	r24
    715e:	2a 95       	dec	r18
    7160:	d2 f7       	brpl	.-12     	; 0x7156 <sysclk_get_per4_hz+0x1a>
}
    7162:	bc 01       	movw	r22, r24
    7164:	cd 01       	movw	r24, r26
    7166:	0f 90       	pop	r0
    7168:	df 91       	pop	r29
    716a:	cf 91       	pop	r28
    716c:	08 95       	ret

0000716e <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    716e:	cf 93       	push	r28
    7170:	df 93       	push	r29
    7172:	cd b7       	in	r28, 0x3d	; 61
    7174:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    7176:	e2 df       	rcall	.-60     	; 0x713c <sysclk_get_per4_hz>
    7178:	dc 01       	movw	r26, r24
    717a:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    717c:	bc 01       	movw	r22, r24
    717e:	cd 01       	movw	r24, r26
    7180:	df 91       	pop	r29
    7182:	cf 91       	pop	r28
    7184:	08 95       	ret

00007186 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    7186:	cf 93       	push	r28
    7188:	df 93       	push	r29
    718a:	cd b7       	in	r28, 0x3d	; 61
    718c:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    718e:	ef df       	rcall	.-34     	; 0x716e <sysclk_get_per2_hz>
    7190:	dc 01       	movw	r26, r24
    7192:	cb 01       	movw	r24, r22
}
    7194:	bc 01       	movw	r22, r24
    7196:	cd 01       	movw	r24, r26
    7198:	df 91       	pop	r29
    719a:	cf 91       	pop	r28
    719c:	08 95       	ret

0000719e <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    719e:	cf 93       	push	r28
    71a0:	df 93       	push	r29
    71a2:	cd b7       	in	r28, 0x3d	; 61
    71a4:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    71a6:	ef df       	rcall	.-34     	; 0x7186 <sysclk_get_per_hz>
    71a8:	dc 01       	movw	r26, r24
    71aa:	cb 01       	movw	r24, r22
}
    71ac:	bc 01       	movw	r22, r24
    71ae:	cd 01       	movw	r24, r26
    71b0:	df 91       	pop	r29
    71b2:	cf 91       	pop	r28
    71b4:	08 95       	ret

000071b6 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    71b6:	cf 93       	push	r28
    71b8:	df 93       	push	r29
    71ba:	1f 92       	push	r1
    71bc:	1f 92       	push	r1
    71be:	cd b7       	in	r28, 0x3d	; 61
    71c0:	de b7       	in	r29, 0x3e	; 62
    71c2:	89 83       	std	Y+1, r24	; 0x01
    71c4:	9a 83       	std	Y+2, r25	; 0x02
	if (module == NULL) {
    71c6:	89 81       	ldd	r24, Y+1	; 0x01
    71c8:	9a 81       	ldd	r25, Y+2	; 0x02
    71ca:	89 2b       	or	r24, r25
    71cc:	09 f4       	brne	.+2      	; 0x71d0 <sysclk_enable_peripheral_clock+0x1a>
    71ce:	85 c1       	rjmp	.+778    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    71d0:	89 81       	ldd	r24, Y+1	; 0x01
    71d2:	9a 81       	ldd	r25, Y+2	; 0x02
    71d4:	80 3c       	cpi	r24, 0xC0	; 192
    71d6:	91 05       	cpc	r25, r1
    71d8:	29 f4       	brne	.+10     	; 0x71e4 <sysclk_enable_peripheral_clock+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    71da:	60 e1       	ldi	r22, 0x10	; 16
    71dc:	80 e0       	ldi	r24, 0x00	; 0
    71de:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    71e2:	7b c1       	rjmp	.+758    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &AES) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    71e4:	89 81       	ldd	r24, Y+1	; 0x01
    71e6:	9a 81       	ldd	r25, Y+2	; 0x02
    71e8:	80 34       	cpi	r24, 0x40	; 64
    71ea:	94 40       	sbci	r25, 0x04	; 4
    71ec:	29 f4       	brne	.+10     	; 0x71f8 <sysclk_enable_peripheral_clock+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    71ee:	68 e0       	ldi	r22, 0x08	; 8
    71f0:	80 e0       	ldi	r24, 0x00	; 0
    71f2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    71f6:	71 c1       	rjmp	.+738    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    71f8:	89 81       	ldd	r24, Y+1	; 0x01
    71fa:	9a 81       	ldd	r25, Y+2	; 0x02
    71fc:	81 15       	cp	r24, r1
    71fe:	94 40       	sbci	r25, 0x04	; 4
    7200:	29 f4       	brne	.+10     	; 0x720c <sysclk_enable_peripheral_clock+0x56>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    7202:	64 e0       	ldi	r22, 0x04	; 4
    7204:	80 e0       	ldi	r24, 0x00	; 0
    7206:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    720a:	67 c1       	rjmp	.+718    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    720c:	89 81       	ldd	r24, Y+1	; 0x01
    720e:	9a 81       	ldd	r25, Y+2	; 0x02
    7210:	80 38       	cpi	r24, 0x80	; 128
    7212:	91 40       	sbci	r25, 0x01	; 1
    7214:	29 f4       	brne	.+10     	; 0x7220 <sysclk_enable_peripheral_clock+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    7216:	62 e0       	ldi	r22, 0x02	; 2
    7218:	80 e0       	ldi	r24, 0x00	; 0
    721a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    721e:	5d c1       	rjmp	.+698    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &EVSYS) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    7220:	89 81       	ldd	r24, Y+1	; 0x01
    7222:	9a 81       	ldd	r25, Y+2	; 0x02
    7224:	81 15       	cp	r24, r1
    7226:	91 40       	sbci	r25, 0x01	; 1
    7228:	29 f4       	brne	.+10     	; 0x7234 <sysclk_enable_peripheral_clock+0x7e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    722a:	61 e0       	ldi	r22, 0x01	; 1
    722c:	80 e0       	ldi	r24, 0x00	; 0
    722e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7232:	53 c1       	rjmp	.+678    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    7234:	89 81       	ldd	r24, Y+1	; 0x01
    7236:	9a 81       	ldd	r25, Y+2	; 0x02
    7238:	80 38       	cpi	r24, 0x80	; 128
    723a:	93 40       	sbci	r25, 0x03	; 3
    723c:	29 f4       	brne	.+10     	; 0x7248 <sysclk_enable_peripheral_clock+0x92>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    723e:	61 e0       	ldi	r22, 0x01	; 1
    7240:	81 e0       	ldi	r24, 0x01	; 1
    7242:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7246:	49 c1       	rjmp	.+658    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ACA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    7248:	89 81       	ldd	r24, Y+1	; 0x01
    724a:	9a 81       	ldd	r25, Y+2	; 0x02
    724c:	80 39       	cpi	r24, 0x90	; 144
    724e:	93 40       	sbci	r25, 0x03	; 3
    7250:	29 f4       	brne	.+10     	; 0x725c <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    7252:	61 e0       	ldi	r22, 0x01	; 1
    7254:	82 e0       	ldi	r24, 0x02	; 2
    7256:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    725a:	3f c1       	rjmp	.+638    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    725c:	89 81       	ldd	r24, Y+1	; 0x01
    725e:	9a 81       	ldd	r25, Y+2	; 0x02
    7260:	81 15       	cp	r24, r1
    7262:	92 40       	sbci	r25, 0x02	; 2
    7264:	29 f4       	brne	.+10     	; 0x7270 <sysclk_enable_peripheral_clock+0xba>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    7266:	62 e0       	ldi	r22, 0x02	; 2
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    726e:	35 c1       	rjmp	.+618    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    7270:	89 81       	ldd	r24, Y+1	; 0x01
    7272:	9a 81       	ldd	r25, Y+2	; 0x02
    7274:	80 34       	cpi	r24, 0x40	; 64
    7276:	92 40       	sbci	r25, 0x02	; 2
    7278:	29 f4       	brne	.+10     	; 0x7284 <sysclk_enable_peripheral_clock+0xce>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    727a:	62 e0       	ldi	r22, 0x02	; 2
    727c:	82 e0       	ldi	r24, 0x02	; 2
    727e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7282:	2b c1       	rjmp	.+598    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    7284:	89 81       	ldd	r24, Y+1	; 0x01
    7286:	9a 81       	ldd	r25, Y+2	; 0x02
    7288:	81 15       	cp	r24, r1
    728a:	93 40       	sbci	r25, 0x03	; 3
    728c:	29 f4       	brne	.+10     	; 0x7298 <sysclk_enable_peripheral_clock+0xe2>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    728e:	64 e0       	ldi	r22, 0x04	; 4
    7290:	81 e0       	ldi	r24, 0x01	; 1
    7292:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7296:	21 c1       	rjmp	.+578    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    7298:	89 81       	ldd	r24, Y+1	; 0x01
    729a:	9a 81       	ldd	r25, Y+2	; 0x02
    729c:	80 32       	cpi	r24, 0x20	; 32
    729e:	93 40       	sbci	r25, 0x03	; 3
    72a0:	29 f4       	brne	.+10     	; 0x72ac <sysclk_enable_peripheral_clock+0xf6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    72a2:	64 e0       	ldi	r22, 0x04	; 4
    72a4:	82 e0       	ldi	r24, 0x02	; 2
    72a6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    72aa:	17 c1       	rjmp	.+558    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    72ac:	89 81       	ldd	r24, Y+1	; 0x01
    72ae:	9a 81       	ldd	r25, Y+2	; 0x02
    72b0:	81 15       	cp	r24, r1
    72b2:	98 40       	sbci	r25, 0x08	; 8
    72b4:	29 f4       	brne	.+10     	; 0x72c0 <sysclk_enable_peripheral_clock+0x10a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    72b6:	61 e0       	ldi	r22, 0x01	; 1
    72b8:	83 e0       	ldi	r24, 0x03	; 3
    72ba:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    72be:	0d c1       	rjmp	.+538    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    72c0:	89 81       	ldd	r24, Y+1	; 0x01
    72c2:	9a 81       	ldd	r25, Y+2	; 0x02
    72c4:	81 15       	cp	r24, r1
    72c6:	99 40       	sbci	r25, 0x09	; 9
    72c8:	29 f4       	brne	.+10     	; 0x72d4 <sysclk_enable_peripheral_clock+0x11e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    72ca:	61 e0       	ldi	r22, 0x01	; 1
    72cc:	84 e0       	ldi	r24, 0x04	; 4
    72ce:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    72d2:	03 c1       	rjmp	.+518    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    72d4:	89 81       	ldd	r24, Y+1	; 0x01
    72d6:	9a 81       	ldd	r25, Y+2	; 0x02
    72d8:	81 15       	cp	r24, r1
    72da:	9a 40       	sbci	r25, 0x0A	; 10
    72dc:	29 f4       	brne	.+10     	; 0x72e8 <sysclk_enable_peripheral_clock+0x132>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    72de:	61 e0       	ldi	r22, 0x01	; 1
    72e0:	85 e0       	ldi	r24, 0x05	; 5
    72e2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    72e6:	f9 c0       	rjmp	.+498    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    72e8:	89 81       	ldd	r24, Y+1	; 0x01
    72ea:	9a 81       	ldd	r25, Y+2	; 0x02
    72ec:	81 15       	cp	r24, r1
    72ee:	9b 40       	sbci	r25, 0x0B	; 11
    72f0:	29 f4       	brne	.+10     	; 0x72fc <sysclk_enable_peripheral_clock+0x146>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    72f2:	61 e0       	ldi	r22, 0x01	; 1
    72f4:	86 e0       	ldi	r24, 0x06	; 6
    72f6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    72fa:	ef c0       	rjmp	.+478    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    72fc:	89 81       	ldd	r24, Y+1	; 0x01
    72fe:	9a 81       	ldd	r25, Y+2	; 0x02
    7300:	80 34       	cpi	r24, 0x40	; 64
    7302:	98 40       	sbci	r25, 0x08	; 8
    7304:	29 f4       	brne	.+10     	; 0x7310 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    7306:	62 e0       	ldi	r22, 0x02	; 2
    7308:	83 e0       	ldi	r24, 0x03	; 3
    730a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    730e:	e5 c0       	rjmp	.+458    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    7310:	89 81       	ldd	r24, Y+1	; 0x01
    7312:	9a 81       	ldd	r25, Y+2	; 0x02
    7314:	80 34       	cpi	r24, 0x40	; 64
    7316:	99 40       	sbci	r25, 0x09	; 9
    7318:	29 f4       	brne	.+10     	; 0x7324 <sysclk_enable_peripheral_clock+0x16e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    731a:	62 e0       	ldi	r22, 0x02	; 2
    731c:	84 e0       	ldi	r24, 0x04	; 4
    731e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7322:	db c0       	rjmp	.+438    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    7324:	89 81       	ldd	r24, Y+1	; 0x01
    7326:	9a 81       	ldd	r25, Y+2	; 0x02
    7328:	80 34       	cpi	r24, 0x40	; 64
    732a:	9a 40       	sbci	r25, 0x0A	; 10
    732c:	29 f4       	brne	.+10     	; 0x7338 <sysclk_enable_peripheral_clock+0x182>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    732e:	62 e0       	ldi	r22, 0x02	; 2
    7330:	85 e0       	ldi	r24, 0x05	; 5
    7332:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7336:	d1 c0       	rjmp	.+418    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    7338:	89 81       	ldd	r24, Y+1	; 0x01
    733a:	9a 81       	ldd	r25, Y+2	; 0x02
    733c:	80 34       	cpi	r24, 0x40	; 64
    733e:	9b 40       	sbci	r25, 0x0B	; 11
    7340:	29 f4       	brne	.+10     	; 0x734c <sysclk_enable_peripheral_clock+0x196>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    7342:	62 e0       	ldi	r22, 0x02	; 2
    7344:	86 e0       	ldi	r24, 0x06	; 6
    7346:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    734a:	c7 c0       	rjmp	.+398    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    734c:	89 81       	ldd	r24, Y+1	; 0x01
    734e:	9a 81       	ldd	r25, Y+2	; 0x02
    7350:	80 39       	cpi	r24, 0x90	; 144
    7352:	98 40       	sbci	r25, 0x08	; 8
    7354:	29 f4       	brne	.+10     	; 0x7360 <sysclk_enable_peripheral_clock+0x1aa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    7356:	64 e0       	ldi	r22, 0x04	; 4
    7358:	83 e0       	ldi	r24, 0x03	; 3
    735a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    735e:	bd c0       	rjmp	.+378    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESC) {
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    7360:	89 81       	ldd	r24, Y+1	; 0x01
    7362:	9a 81       	ldd	r25, Y+2	; 0x02
    7364:	80 39       	cpi	r24, 0x90	; 144
    7366:	99 40       	sbci	r25, 0x09	; 9
    7368:	29 f4       	brne	.+10     	; 0x7374 <sysclk_enable_peripheral_clock+0x1be>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    736a:	64 e0       	ldi	r22, 0x04	; 4
    736c:	84 e0       	ldi	r24, 0x04	; 4
    736e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7372:	b3 c0       	rjmp	.+358    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESD) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    7374:	89 81       	ldd	r24, Y+1	; 0x01
    7376:	9a 81       	ldd	r25, Y+2	; 0x02
    7378:	80 39       	cpi	r24, 0x90	; 144
    737a:	9a 40       	sbci	r25, 0x0A	; 10
    737c:	29 f4       	brne	.+10     	; 0x7388 <sysclk_enable_peripheral_clock+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    737e:	64 e0       	ldi	r22, 0x04	; 4
    7380:	85 e0       	ldi	r24, 0x05	; 5
    7382:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7386:	a9 c0       	rjmp	.+338    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    7388:	89 81       	ldd	r24, Y+1	; 0x01
    738a:	9a 81       	ldd	r25, Y+2	; 0x02
    738c:	80 39       	cpi	r24, 0x90	; 144
    738e:	9b 40       	sbci	r25, 0x0B	; 11
    7390:	29 f4       	brne	.+10     	; 0x739c <sysclk_enable_peripheral_clock+0x1e6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    7392:	64 e0       	ldi	r22, 0x04	; 4
    7394:	86 e0       	ldi	r24, 0x06	; 6
    7396:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    739a:	9f c0       	rjmp	.+318    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    739c:	89 81       	ldd	r24, Y+1	; 0x01
    739e:	9a 81       	ldd	r25, Y+2	; 0x02
    73a0:	80 3c       	cpi	r24, 0xC0	; 192
    73a2:	98 40       	sbci	r25, 0x08	; 8
    73a4:	29 f4       	brne	.+10     	; 0x73b0 <sysclk_enable_peripheral_clock+0x1fa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    73a6:	68 e0       	ldi	r22, 0x08	; 8
    73a8:	83 e0       	ldi	r24, 0x03	; 3
    73aa:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    73ae:	95 c0       	rjmp	.+298    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    73b0:	89 81       	ldd	r24, Y+1	; 0x01
    73b2:	9a 81       	ldd	r25, Y+2	; 0x02
    73b4:	80 3c       	cpi	r24, 0xC0	; 192
    73b6:	99 40       	sbci	r25, 0x09	; 9
    73b8:	29 f4       	brne	.+10     	; 0x73c4 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    73ba:	68 e0       	ldi	r22, 0x08	; 8
    73bc:	84 e0       	ldi	r24, 0x04	; 4
    73be:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    73c2:	8b c0       	rjmp	.+278    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    73c4:	89 81       	ldd	r24, Y+1	; 0x01
    73c6:	9a 81       	ldd	r25, Y+2	; 0x02
    73c8:	80 3c       	cpi	r24, 0xC0	; 192
    73ca:	9a 40       	sbci	r25, 0x0A	; 10
    73cc:	29 f4       	brne	.+10     	; 0x73d8 <sysclk_enable_peripheral_clock+0x222>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    73ce:	68 e0       	ldi	r22, 0x08	; 8
    73d0:	85 e0       	ldi	r24, 0x05	; 5
    73d2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    73d6:	81 c0       	rjmp	.+258    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    73d8:	89 81       	ldd	r24, Y+1	; 0x01
    73da:	9a 81       	ldd	r25, Y+2	; 0x02
    73dc:	80 3c       	cpi	r24, 0xC0	; 192
    73de:	9b 40       	sbci	r25, 0x0B	; 11
    73e0:	29 f4       	brne	.+10     	; 0x73ec <sysclk_enable_peripheral_clock+0x236>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    73e2:	68 e0       	ldi	r22, 0x08	; 8
    73e4:	86 e0       	ldi	r24, 0x06	; 6
    73e6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    73ea:	77 c0       	rjmp	.+238    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    73ec:	89 81       	ldd	r24, Y+1	; 0x01
    73ee:	9a 81       	ldd	r25, Y+2	; 0x02
    73f0:	80 3a       	cpi	r24, 0xA0	; 160
    73f2:	98 40       	sbci	r25, 0x08	; 8
    73f4:	29 f4       	brne	.+10     	; 0x7400 <sysclk_enable_peripheral_clock+0x24a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    73f6:	60 e1       	ldi	r22, 0x10	; 16
    73f8:	83 e0       	ldi	r24, 0x03	; 3
    73fa:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    73fe:	6d c0       	rjmp	.+218    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    7400:	89 81       	ldd	r24, Y+1	; 0x01
    7402:	9a 81       	ldd	r25, Y+2	; 0x02
    7404:	80 3a       	cpi	r24, 0xA0	; 160
    7406:	99 40       	sbci	r25, 0x09	; 9
    7408:	29 f4       	brne	.+10     	; 0x7414 <sysclk_enable_peripheral_clock+0x25e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    740a:	60 e1       	ldi	r22, 0x10	; 16
    740c:	84 e0       	ldi	r24, 0x04	; 4
    740e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7412:	63 c0       	rjmp	.+198    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    7414:	89 81       	ldd	r24, Y+1	; 0x01
    7416:	9a 81       	ldd	r25, Y+2	; 0x02
    7418:	80 3a       	cpi	r24, 0xA0	; 160
    741a:	9a 40       	sbci	r25, 0x0A	; 10
    741c:	29 f4       	brne	.+10     	; 0x7428 <sysclk_enable_peripheral_clock+0x272>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    741e:	60 e1       	ldi	r22, 0x10	; 16
    7420:	85 e0       	ldi	r24, 0x05	; 5
    7422:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7426:	59 c0       	rjmp	.+178    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    7428:	89 81       	ldd	r24, Y+1	; 0x01
    742a:	9a 81       	ldd	r25, Y+2	; 0x02
    742c:	80 3a       	cpi	r24, 0xA0	; 160
    742e:	9b 40       	sbci	r25, 0x0B	; 11
    7430:	29 f4       	brne	.+10     	; 0x743c <sysclk_enable_peripheral_clock+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    7432:	60 e1       	ldi	r22, 0x10	; 16
    7434:	86 e0       	ldi	r24, 0x06	; 6
    7436:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    743a:	4f c0       	rjmp	.+158    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    743c:	89 81       	ldd	r24, Y+1	; 0x01
    743e:	9a 81       	ldd	r25, Y+2	; 0x02
    7440:	80 3b       	cpi	r24, 0xB0	; 176
    7442:	98 40       	sbci	r25, 0x08	; 8
    7444:	29 f4       	brne	.+10     	; 0x7450 <sysclk_enable_peripheral_clock+0x29a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    7446:	60 e2       	ldi	r22, 0x20	; 32
    7448:	83 e0       	ldi	r24, 0x03	; 3
    744a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    744e:	45 c0       	rjmp	.+138    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    7450:	89 81       	ldd	r24, Y+1	; 0x01
    7452:	9a 81       	ldd	r25, Y+2	; 0x02
    7454:	80 3b       	cpi	r24, 0xB0	; 176
    7456:	99 40       	sbci	r25, 0x09	; 9
    7458:	29 f4       	brne	.+10     	; 0x7464 <sysclk_enable_peripheral_clock+0x2ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    745a:	60 e2       	ldi	r22, 0x20	; 32
    745c:	84 e0       	ldi	r24, 0x04	; 4
    745e:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7462:	3b c0       	rjmp	.+118    	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    7464:	89 81       	ldd	r24, Y+1	; 0x01
    7466:	9a 81       	ldd	r25, Y+2	; 0x02
    7468:	80 3b       	cpi	r24, 0xB0	; 176
    746a:	9a 40       	sbci	r25, 0x0A	; 10
    746c:	29 f4       	brne	.+10     	; 0x7478 <sysclk_enable_peripheral_clock+0x2c2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    746e:	60 e2       	ldi	r22, 0x20	; 32
    7470:	85 e0       	ldi	r24, 0x05	; 5
    7472:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    7476:	31 c0       	rjmp	.+98     	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    7478:	89 81       	ldd	r24, Y+1	; 0x01
    747a:	9a 81       	ldd	r25, Y+2	; 0x02
    747c:	80 3b       	cpi	r24, 0xB0	; 176
    747e:	9b 40       	sbci	r25, 0x0B	; 11
    7480:	29 f4       	brne	.+10     	; 0x748c <sysclk_enable_peripheral_clock+0x2d6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    7482:	60 e2       	ldi	r22, 0x20	; 32
    7484:	86 e0       	ldi	r24, 0x06	; 6
    7486:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    748a:	27 c0       	rjmp	.+78     	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    748c:	89 81       	ldd	r24, Y+1	; 0x01
    748e:	9a 81       	ldd	r25, Y+2	; 0x02
    7490:	80 38       	cpi	r24, 0x80	; 128
    7492:	94 40       	sbci	r25, 0x04	; 4
    7494:	29 f4       	brne	.+10     	; 0x74a0 <sysclk_enable_peripheral_clock+0x2ea>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    7496:	60 e4       	ldi	r22, 0x40	; 64
    7498:	83 e0       	ldi	r24, 0x03	; 3
    749a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    749e:	1d c0       	rjmp	.+58     	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    74a0:	89 81       	ldd	r24, Y+1	; 0x01
    74a2:	9a 81       	ldd	r25, Y+2	; 0x02
    74a4:	80 39       	cpi	r24, 0x90	; 144
    74a6:	94 40       	sbci	r25, 0x04	; 4
    74a8:	29 f4       	brne	.+10     	; 0x74b4 <sysclk_enable_peripheral_clock+0x2fe>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    74aa:	60 e4       	ldi	r22, 0x40	; 64
    74ac:	84 e0       	ldi	r24, 0x04	; 4
    74ae:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    74b2:	13 c0       	rjmp	.+38     	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    74b4:	89 81       	ldd	r24, Y+1	; 0x01
    74b6:	9a 81       	ldd	r25, Y+2	; 0x02
    74b8:	80 3a       	cpi	r24, 0xA0	; 160
    74ba:	94 40       	sbci	r25, 0x04	; 4
    74bc:	29 f4       	brne	.+10     	; 0x74c8 <sysclk_enable_peripheral_clock+0x312>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    74be:	60 e4       	ldi	r22, 0x40	; 64
    74c0:	85 e0       	ldi	r24, 0x05	; 5
    74c2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    74c6:	09 c0       	rjmp	.+18     	; 0x74da <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    74c8:	89 81       	ldd	r24, Y+1	; 0x01
    74ca:	9a 81       	ldd	r25, Y+2	; 0x02
    74cc:	80 3b       	cpi	r24, 0xB0	; 176
    74ce:	94 40       	sbci	r25, 0x04	; 4
    74d0:	21 f4       	brne	.+8      	; 0x74da <sysclk_enable_peripheral_clock+0x324>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    74d2:	60 e4       	ldi	r22, 0x40	; 64
    74d4:	86 e0       	ldi	r24, 0x06	; 6
    74d6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    74da:	00 00       	nop
    74dc:	0f 90       	pop	r0
    74de:	0f 90       	pop	r0
    74e0:	df 91       	pop	r29
    74e2:	cf 91       	pop	r28
    74e4:	08 95       	ret

000074e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    74e6:	04 c0       	rjmp	.+8      	; 0x74f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    74e8:	61 50       	subi	r22, 0x01	; 1
    74ea:	71 09       	sbc	r23, r1
    74ec:	81 09       	sbc	r24, r1
    74ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    74f0:	61 15       	cp	r22, r1
    74f2:	71 05       	cpc	r23, r1
    74f4:	81 05       	cpc	r24, r1
    74f6:	91 05       	cpc	r25, r1
    74f8:	b9 f7       	brne	.-18     	; 0x74e8 <__portable_avr_delay_cycles+0x2>
    74fa:	08 95       	ret

000074fc <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    74fc:	cf 93       	push	r28
    74fe:	df 93       	push	r29
    7500:	cd b7       	in	r28, 0x3d	; 61
    7502:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    7504:	80 ea       	ldi	r24, 0xA0	; 160
    7506:	90 e0       	ldi	r25, 0x00	; 0
    7508:	27 e0       	ldi	r18, 0x07	; 7
    750a:	fc 01       	movw	r30, r24
    750c:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    750e:	00 00       	nop
    7510:	df 91       	pop	r29
    7512:	cf 91       	pop	r28
    7514:	08 95       	ret

00007516 <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    7516:	cf 93       	push	r28
    7518:	df 93       	push	r29
    751a:	1f 92       	push	r1
    751c:	cd b7       	in	r28, 0x3d	; 61
    751e:	de b7       	in	r29, 0x3e	; 62
    7520:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    7522:	89 81       	ldd	r24, Y+1	; 0x01
    7524:	88 2f       	mov	r24, r24
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	00 97       	sbiw	r24, 0x00	; 0
    752a:	19 f0       	breq	.+6      	; 0x7532 <pmic_set_scheduling+0x1c>
    752c:	01 97       	sbiw	r24, 0x01	; 1
    752e:	79 f0       	breq	.+30     	; 0x754e <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    7530:	18 c0       	rjmp	.+48     	; 0x7562 <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    7532:	80 ea       	ldi	r24, 0xA0	; 160
    7534:	90 e0       	ldi	r25, 0x00	; 0
    7536:	20 ea       	ldi	r18, 0xA0	; 160
    7538:	30 e0       	ldi	r19, 0x00	; 0
    753a:	f9 01       	movw	r30, r18
    753c:	22 81       	ldd	r18, Z+2	; 0x02
    753e:	2f 77       	andi	r18, 0x7F	; 127
    7540:	fc 01       	movw	r30, r24
    7542:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    7544:	80 ea       	ldi	r24, 0xA0	; 160
    7546:	90 e0       	ldi	r25, 0x00	; 0
    7548:	fc 01       	movw	r30, r24
    754a:	11 82       	std	Z+1, r1	; 0x01
		break;
    754c:	0a c0       	rjmp	.+20     	; 0x7562 <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    754e:	80 ea       	ldi	r24, 0xA0	; 160
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	20 ea       	ldi	r18, 0xA0	; 160
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	f9 01       	movw	r30, r18
    7558:	22 81       	ldd	r18, Z+2	; 0x02
    755a:	20 68       	ori	r18, 0x80	; 128
    755c:	fc 01       	movw	r30, r24
    755e:	22 83       	std	Z+2, r18	; 0x02
		break;
    7560:	00 00       	nop

	default:
		break;
	};
}
    7562:	00 00       	nop
    7564:	0f 90       	pop	r0
    7566:	df 91       	pop	r29
    7568:	cf 91       	pop	r28
    756a:	08 95       	ret

0000756c <main>:


void print_calibration_data(void);

int main (void)
{
    756c:	2f 92       	push	r2
    756e:	3f 92       	push	r3
    7570:	4f 92       	push	r4
    7572:	5f 92       	push	r5
    7574:	6f 92       	push	r6
    7576:	7f 92       	push	r7
    7578:	8f 92       	push	r8
    757a:	9f 92       	push	r9
    757c:	af 92       	push	r10
    757e:	bf 92       	push	r11
    7580:	cf 92       	push	r12
    7582:	df 92       	push	r13
    7584:	ef 92       	push	r14
    7586:	ff 92       	push	r15
    7588:	0f 93       	push	r16
    758a:	1f 93       	push	r17
    758c:	cf 93       	push	r28
    758e:	df 93       	push	r29
    7590:	cd b7       	in	r28, 0x3d	; 61
    7592:	de b7       	in	r29, 0x3e	; 62
    7594:	ce 54       	subi	r28, 0x4E	; 78
    7596:	d1 09       	sbc	r29, r1
    7598:	cd bf       	out	0x3d, r28	; 61
    759a:	de bf       	out	0x3e, r29	; 62
	
	
	
	
	uint16_t packetCount = 0;
    759c:	19 82       	std	Y+1, r1	; 0x01
    759e:	1a 82       	std	Y+2, r1	; 0x02
	
	board_init();
    75a0:	c0 da       	rcall	.-2688   	; 0x6b22 <board_init>
	sysclk_init();
    75a2:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <sysclk_init>
	
	
	//sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	//sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	//sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	sysclk_enable_module(SYSCLK_PORT_F, PR_TWI_bm);
    75a6:	60 e4       	ldi	r22, 0x40	; 64
    75a8:	86 e0       	ldi	r24, 0x06	; 6
    75aa:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <sysclk_enable_module>

	//sysclk_enable_peripheral_clock(&USARTE0);

	
	
	uart_terminal_init();
    75ae:	a0 dd       	rcall	.-1216   	; 0x70f0 <uart_terminal_init>
	newOLogInit();
    75b0:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <newOLogInit>
	printf("uart is working\n");
    75b4:	87 e2       	ldi	r24, 0x27	; 39
    75b6:	91 e2       	ldi	r25, 0x21	; 33
    75b8:	0e 94 2b 49 	call	0x9256	; 0x9256 <puts>
	
	char* telemetryString = (char*)malloc(255 * sizeof(char)) ;
    75bc:	8f ef       	ldi	r24, 0xFF	; 255
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    75c4:	8b 83       	std	Y+3, r24	; 0x03
    75c6:	9c 83       	std	Y+4, r25	; 0x04
	*telemetryString = "\0";
    75c8:	84 e1       	ldi	r24, 0x14	; 20
    75ca:	90 e2       	ldi	r25, 0x20	; 32
    75cc:	28 2f       	mov	r18, r24
    75ce:	8b 81       	ldd	r24, Y+3	; 0x03
    75d0:	9c 81       	ldd	r25, Y+4	; 0x04
    75d2:	fc 01       	movw	r30, r24
    75d4:	20 83       	st	Z, r18
	char* s_teamID = "2118";
    75d6:	87 e3       	ldi	r24, 0x37	; 55
    75d8:	91 e2       	ldi	r25, 0x21	; 33
    75da:	8d 83       	std	Y+5, r24	; 0x05
    75dc:	9e 83       	std	Y+6, r25	; 0x06
	char* s_missionTime = (char*)malloc(10 * sizeof(char));
    75de:	8a e0       	ldi	r24, 0x0A	; 10
    75e0:	90 e0       	ldi	r25, 0x00	; 0
    75e2:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    75e6:	8f 83       	std	Y+7, r24	; 0x07
    75e8:	98 87       	std	Y+8, r25	; 0x08
	char* s_packetCount =(char*)malloc(10 * sizeof(char));
    75ea:	8a e0       	ldi	r24, 0x0A	; 10
    75ec:	90 e0       	ldi	r25, 0x00	; 0
    75ee:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    75f2:	89 87       	std	Y+9, r24	; 0x09
    75f4:	9a 87       	std	Y+10, r25	; 0x0a
	char* s_altitude= (char*)malloc(10 * sizeof(char));
    75f6:	8a e0       	ldi	r24, 0x0A	; 10
    75f8:	90 e0       	ldi	r25, 0x00	; 0
    75fa:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    75fe:	8b 87       	std	Y+11, r24	; 0x0b
    7600:	9c 87       	std	Y+12, r25	; 0x0c
	char* s_pressure= (char*)malloc(10 * sizeof(char));
    7602:	8a e0       	ldi	r24, 0x0A	; 10
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    760a:	8d 87       	std	Y+13, r24	; 0x0d
    760c:	9e 87       	std	Y+14, r25	; 0x0e
	char* s_temp= (char*)malloc(10 * sizeof(char));
    760e:	8a e0       	ldi	r24, 0x0A	; 10
    7610:	90 e0       	ldi	r25, 0x00	; 0
    7612:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    7616:	8f 87       	std	Y+15, r24	; 0x0f
    7618:	98 8b       	std	Y+16, r25	; 0x10
	char* s_voltage= (char*)malloc(10 * sizeof(char));
    761a:	8a e0       	ldi	r24, 0x0A	; 10
    761c:	90 e0       	ldi	r25, 0x00	; 0
    761e:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    7622:	89 8b       	std	Y+17, r24	; 0x11
    7624:	9a 8b       	std	Y+18, r25	; 0x12
	char* s_gpsTime= (char*)malloc(10 * sizeof(char));
    7626:	8a e0       	ldi	r24, 0x0A	; 10
    7628:	90 e0       	ldi	r25, 0x00	; 0
    762a:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    762e:	8b 8b       	std	Y+19, r24	; 0x13
    7630:	9c 8b       	std	Y+20, r25	; 0x14
	char* s_gpsLat= (char*)malloc(10 * sizeof(char));
    7632:	8a e0       	ldi	r24, 0x0A	; 10
    7634:	90 e0       	ldi	r25, 0x00	; 0
    7636:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    763a:	8d 8b       	std	Y+21, r24	; 0x15
    763c:	9e 8b       	std	Y+22, r25	; 0x16
	char* s_gpsLong= (char*)malloc(10 * sizeof(char));
    763e:	8a e0       	ldi	r24, 0x0A	; 10
    7640:	90 e0       	ldi	r25, 0x00	; 0
    7642:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    7646:	8f 8b       	std	Y+23, r24	; 0x17
    7648:	98 8f       	std	Y+24, r25	; 0x18
	char* s_gpsAlt= (char*)malloc(10 * sizeof(char));
    764a:	8a e0       	ldi	r24, 0x0A	; 10
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    7652:	89 8f       	std	Y+25, r24	; 0x19
    7654:	9a 8f       	std	Y+26, r25	; 0x1a
	char* s_gpsSats= (char*)malloc(10 * sizeof(char));
    7656:	8a e0       	ldi	r24, 0x0A	; 10
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    765e:	8b 8f       	std	Y+27, r24	; 0x1b
    7660:	9c 8f       	std	Y+28, r25	; 0x1c
	char* s_pitch= (char*)malloc(10 * sizeof(char));
    7662:	8a e0       	ldi	r24, 0x0A	; 10
    7664:	90 e0       	ldi	r25, 0x00	; 0
    7666:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    766a:	8d 8f       	std	Y+29, r24	; 0x1d
    766c:	9e 8f       	std	Y+30, r25	; 0x1e
	char* s_roll= (char*)malloc(10 * sizeof(char));
    766e:	8a e0       	ldi	r24, 0x0A	; 10
    7670:	90 e0       	ldi	r25, 0x00	; 0
    7672:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    7676:	8f 8f       	std	Y+31, r24	; 0x1f
    7678:	98 a3       	std	Y+32, r25	; 0x20
	char* s_spinRate= (char*)malloc(10 * sizeof(char));
    767a:	8a e0       	ldi	r24, 0x0A	; 10
    767c:	90 e0       	ldi	r25, 0x00	; 0
    767e:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    7682:	89 a3       	std	Y+33, r24	; 0x21
    7684:	9a a3       	std	Y+34, r25	; 0x22
	char* s_flightState= (char*)malloc(10 * sizeof(char));
    7686:	8a e0       	ldi	r24, 0x0A	; 10
    7688:	90 e0       	ldi	r25, 0x00	; 0
    768a:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    768e:	8b a3       	std	Y+35, r24	; 0x23
    7690:	9c a3       	std	Y+36, r25	; 0x24
	char* s_cardinalDir= (char*)malloc(10 * sizeof(char));
    7692:	8a e0       	ldi	r24, 0x0A	; 10
    7694:	90 e0       	ldi	r25, 0x00	; 0
    7696:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <malloc>
    769a:	8d a3       	std	Y+37, r24	; 0x25
	
	pmic_init();
    769c:	9e a3       	std	Y+38, r25	; 0x26
    769e:	2e df       	rcall	.-420    	; 0x74fc <pmic_init>
	delay_ms(1000);
    76a0:	7e dd       	rcall	.-1284   	; 0x719e <sysclk_get_cpu_hz>
    76a2:	dc 01       	movw	r26, r24
    76a4:	cb 01       	movw	r24, r22
    76a6:	8c 01       	movw	r16, r24
    76a8:	9d 01       	movw	r18, r26
    76aa:	40 e0       	ldi	r20, 0x00	; 0
    76ac:	50 e0       	ldi	r21, 0x00	; 0
    76ae:	ba 01       	movw	r22, r20
    76b0:	0f a7       	std	Y+47, r16	; 0x2f
    76b2:	18 ab       	std	Y+48, r17	; 0x30
    76b4:	29 ab       	std	Y+49, r18	; 0x31
    76b6:	3a ab       	std	Y+50, r19	; 0x32
    76b8:	4b ab       	std	Y+51, r20	; 0x33
    76ba:	5c ab       	std	Y+52, r21	; 0x34
    76bc:	6d ab       	std	Y+53, r22	; 0x35
    76be:	7e ab       	std	Y+54, r23	; 0x36
    76c0:	2f a4       	ldd	r2, Y+47	; 0x2f
    76c2:	38 a8       	ldd	r3, Y+48	; 0x30
    76c4:	49 a8       	ldd	r4, Y+49	; 0x31
    76c6:	5a a8       	ldd	r5, Y+50	; 0x32
    76c8:	6b a8       	ldd	r6, Y+51	; 0x33
    76ca:	7c a8       	ldd	r7, Y+52	; 0x34
    76cc:	8d a8       	ldd	r8, Y+53	; 0x35
    76ce:	9e a8       	ldd	r9, Y+54	; 0x36
    76d0:	22 2d       	mov	r18, r2
    76d2:	33 2d       	mov	r19, r3
    76d4:	44 2d       	mov	r20, r4
    76d6:	55 2d       	mov	r21, r5
    76d8:	66 2d       	mov	r22, r6
    76da:	77 2d       	mov	r23, r7
    76dc:	88 2d       	mov	r24, r8
    76de:	99 2d       	mov	r25, r9
    76e0:	02 e0       	ldi	r16, 0x02	; 2
    76e2:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__ashldi3>
    76e6:	a2 2e       	mov	r10, r18
    76e8:	b3 2e       	mov	r11, r19
    76ea:	c4 2e       	mov	r12, r20
    76ec:	d5 2e       	mov	r13, r21
    76ee:	e6 2e       	mov	r14, r22
    76f0:	f7 2e       	mov	r15, r23
    76f2:	08 2f       	mov	r16, r24
    76f4:	19 2f       	mov	r17, r25
    76f6:	2a 2c       	mov	r2, r10
    76f8:	3b 2c       	mov	r3, r11
    76fa:	4c 2c       	mov	r4, r12
    76fc:	5d 2c       	mov	r5, r13
    76fe:	6e 2c       	mov	r6, r14
    7700:	7f 2c       	mov	r7, r15
    7702:	80 2e       	mov	r8, r16
    7704:	91 2e       	mov	r9, r17
    7706:	22 2d       	mov	r18, r2
    7708:	33 2d       	mov	r19, r3
    770a:	44 2d       	mov	r20, r4
    770c:	55 2d       	mov	r21, r5
    770e:	66 2d       	mov	r22, r6
    7710:	77 2d       	mov	r23, r7
    7712:	88 2d       	mov	r24, r8
    7714:	99 2d       	mov	r25, r9
    7716:	05 e0       	ldi	r16, 0x05	; 5
    7718:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__ashldi3>
    771c:	a2 2e       	mov	r10, r18
    771e:	b3 2e       	mov	r11, r19
    7720:	c4 2e       	mov	r12, r20
    7722:	d5 2e       	mov	r13, r21
    7724:	e6 2e       	mov	r14, r22
    7726:	f7 2e       	mov	r15, r23
    7728:	08 2f       	mov	r16, r24
    772a:	19 2f       	mov	r17, r25
    772c:	2a 2d       	mov	r18, r10
    772e:	3b 2d       	mov	r19, r11
    7730:	4c 2d       	mov	r20, r12
    7732:	5d 2d       	mov	r21, r13
    7734:	6e 2d       	mov	r22, r14
    7736:	7f 2d       	mov	r23, r15
    7738:	80 2f       	mov	r24, r16
    773a:	91 2f       	mov	r25, r17
    773c:	a2 2c       	mov	r10, r2
    773e:	b3 2c       	mov	r11, r3
    7740:	c4 2c       	mov	r12, r4
    7742:	d5 2c       	mov	r13, r5
    7744:	e6 2c       	mov	r14, r6
    7746:	f7 2c       	mov	r15, r7
    7748:	08 2d       	mov	r16, r8
    774a:	19 2d       	mov	r17, r9
    774c:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <__subdi3>
    7750:	a2 2e       	mov	r10, r18
    7752:	b3 2e       	mov	r11, r19
    7754:	c4 2e       	mov	r12, r20
    7756:	d5 2e       	mov	r13, r21
    7758:	e6 2e       	mov	r14, r22
    775a:	f7 2e       	mov	r15, r23
    775c:	08 2f       	mov	r16, r24
    775e:	19 2f       	mov	r17, r25
    7760:	2a 2d       	mov	r18, r10
    7762:	3b 2d       	mov	r19, r11
    7764:	4c 2d       	mov	r20, r12
    7766:	5d 2d       	mov	r21, r13
    7768:	6e 2d       	mov	r22, r14
    776a:	7f 2d       	mov	r23, r15
    776c:	80 2f       	mov	r24, r16
    776e:	91 2f       	mov	r25, r17
    7770:	af a4       	ldd	r10, Y+47	; 0x2f
    7772:	b8 a8       	ldd	r11, Y+48	; 0x30
    7774:	c9 a8       	ldd	r12, Y+49	; 0x31
    7776:	da a8       	ldd	r13, Y+50	; 0x32
    7778:	eb a8       	ldd	r14, Y+51	; 0x33
    777a:	fc a8       	ldd	r15, Y+52	; 0x34
    777c:	0d a9       	ldd	r16, Y+53	; 0x35
    777e:	1e a9       	ldd	r17, Y+54	; 0x36
    7780:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <__adddi3>
    7784:	a2 2e       	mov	r10, r18
    7786:	b3 2e       	mov	r11, r19
    7788:	c4 2e       	mov	r12, r20
    778a:	d5 2e       	mov	r13, r21
    778c:	e6 2e       	mov	r14, r22
    778e:	f7 2e       	mov	r15, r23
    7790:	08 2f       	mov	r16, r24
    7792:	19 2f       	mov	r17, r25
    7794:	2a 2d       	mov	r18, r10
    7796:	3b 2d       	mov	r19, r11
    7798:	4c 2d       	mov	r20, r12
    779a:	5d 2d       	mov	r21, r13
    779c:	6e 2d       	mov	r22, r14
    779e:	7f 2d       	mov	r23, r15
    77a0:	80 2f       	mov	r24, r16
    77a2:	91 2f       	mov	r25, r17
    77a4:	03 e0       	ldi	r16, 0x03	; 3
    77a6:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__ashldi3>
    77aa:	22 2e       	mov	r2, r18
    77ac:	33 2e       	mov	r3, r19
    77ae:	44 2e       	mov	r4, r20
    77b0:	55 2e       	mov	r5, r21
    77b2:	66 2e       	mov	r6, r22
    77b4:	77 2e       	mov	r7, r23
    77b6:	88 2e       	mov	r8, r24
    77b8:	99 2e       	mov	r9, r25
    77ba:	a2 2c       	mov	r10, r2
    77bc:	b3 2c       	mov	r11, r3
    77be:	c4 2c       	mov	r12, r4
    77c0:	d5 2c       	mov	r13, r5
    77c2:	e6 2c       	mov	r14, r6
    77c4:	f7 2c       	mov	r15, r7
    77c6:	08 2d       	mov	r16, r8
    77c8:	19 2d       	mov	r17, r9
    77ca:	2a 2c       	mov	r2, r10
    77cc:	3b 2c       	mov	r3, r11
    77ce:	4c 2c       	mov	r4, r12
    77d0:	5d 2c       	mov	r5, r13
    77d2:	6e 2c       	mov	r6, r14
    77d4:	7f 2c       	mov	r7, r15
    77d6:	80 2e       	mov	r8, r16
    77d8:	91 2e       	mov	r9, r17
    77da:	0f 2e       	mov	r0, r31
    77dc:	f6 e0       	ldi	r31, 0x06	; 6
    77de:	af 2e       	mov	r10, r31
    77e0:	f0 2d       	mov	r31, r0
    77e2:	b1 2c       	mov	r11, r1
    77e4:	c1 2c       	mov	r12, r1
    77e6:	d1 2c       	mov	r13, r1
    77e8:	e1 2c       	mov	r14, r1
    77ea:	f1 2c       	mov	r15, r1
    77ec:	00 e0       	ldi	r16, 0x00	; 0
    77ee:	10 e0       	ldi	r17, 0x00	; 0
    77f0:	22 2d       	mov	r18, r2
    77f2:	33 2d       	mov	r19, r3
    77f4:	44 2d       	mov	r20, r4
    77f6:	55 2d       	mov	r21, r5
    77f8:	66 2d       	mov	r22, r6
    77fa:	77 2d       	mov	r23, r7
    77fc:	88 2d       	mov	r24, r8
    77fe:	99 2d       	mov	r25, r9
    7800:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__udivdi3>
    7804:	22 2e       	mov	r2, r18
    7806:	33 2e       	mov	r3, r19
    7808:	44 2e       	mov	r4, r20
    780a:	55 2e       	mov	r5, r21
    780c:	66 2e       	mov	r6, r22
    780e:	77 2e       	mov	r7, r23
    7810:	88 2e       	mov	r8, r24
    7812:	99 2e       	mov	r9, r25
    7814:	a2 2c       	mov	r10, r2
    7816:	b3 2c       	mov	r11, r3
    7818:	c4 2c       	mov	r12, r4
    781a:	d5 2c       	mov	r13, r5
    781c:	e6 2c       	mov	r14, r6
    781e:	f7 2c       	mov	r15, r7
    7820:	08 2d       	mov	r16, r8
    7822:	19 2d       	mov	r17, r9
    7824:	2a 2d       	mov	r18, r10
    7826:	3b 2d       	mov	r19, r11
    7828:	4c 2d       	mov	r20, r12
    782a:	5d 2d       	mov	r21, r13
    782c:	6e 2d       	mov	r22, r14
    782e:	7f 2d       	mov	r23, r15
    7830:	80 2f       	mov	r24, r16
    7832:	91 2f       	mov	r25, r17
    7834:	29 51       	subi	r18, 0x19	; 25
    7836:	3c 4f       	sbci	r19, 0xFC	; 252
    7838:	4f 4f       	sbci	r20, 0xFF	; 255
    783a:	5f 4f       	sbci	r21, 0xFF	; 255
    783c:	6f 4f       	sbci	r22, 0xFF	; 255
    783e:	7f 4f       	sbci	r23, 0xFF	; 255
    7840:	8f 4f       	sbci	r24, 0xFF	; 255
    7842:	9f 4f       	sbci	r25, 0xFF	; 255
    7844:	a2 2e       	mov	r10, r18
    7846:	b3 2e       	mov	r11, r19
    7848:	c4 2e       	mov	r12, r20
    784a:	d5 2e       	mov	r13, r21
    784c:	e6 2e       	mov	r14, r22
    784e:	f7 2e       	mov	r15, r23
    7850:	08 2f       	mov	r16, r24
    7852:	19 2f       	mov	r17, r25
    7854:	2a 2d       	mov	r18, r10
    7856:	3b 2d       	mov	r19, r11
    7858:	4c 2d       	mov	r20, r12
    785a:	5d 2d       	mov	r21, r13
    785c:	6e 2d       	mov	r22, r14
    785e:	7f 2d       	mov	r23, r15
    7860:	80 2f       	mov	r24, r16
    7862:	91 2f       	mov	r25, r17
    7864:	36 d4       	rcall	.+2156   	; 0x80d2 <__floatundisf>
    7866:	dc 01       	movw	r26, r24
    7868:	cb 01       	movw	r24, r22
    786a:	20 e0       	ldi	r18, 0x00	; 0
    786c:	30 e0       	ldi	r19, 0x00	; 0
    786e:	4a e7       	ldi	r20, 0x7A	; 122
    7870:	54 e4       	ldi	r21, 0x44	; 68
    7872:	bc 01       	movw	r22, r24
    7874:	cd 01       	movw	r24, r26
    7876:	1d d3       	rcall	.+1594   	; 0x7eb2 <__divsf3>
    7878:	dc 01       	movw	r26, r24
    787a:	cb 01       	movw	r24, r22
    787c:	bc 01       	movw	r22, r24
    787e:	cd 01       	movw	r24, r26
    7880:	85 d3       	rcall	.+1802   	; 0x7f8c <__fixunssfdi>
    7882:	a2 2e       	mov	r10, r18
    7884:	b3 2e       	mov	r11, r19
    7886:	c4 2e       	mov	r12, r20
    7888:	d5 2e       	mov	r13, r21
    788a:	e6 2e       	mov	r14, r22
    788c:	f7 2e       	mov	r15, r23
    788e:	08 2f       	mov	r16, r24
    7890:	19 2f       	mov	r17, r25
    7892:	d6 01       	movw	r26, r12
    7894:	c5 01       	movw	r24, r10
    7896:	bc 01       	movw	r22, r24
    7898:	cd 01       	movw	r24, r26
    789a:	25 de       	rcall	.-950    	; 0x74e6 <__portable_avr_delay_cycles>
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    789c:	81 e0       	ldi	r24, 0x01	; 1
    789e:	3b de       	rcall	.-906    	; 0x7516 <pmic_set_scheduling>
	cpu_irq_enable();
    78a0:	78 94       	sei
	
	printf("\tpmic Init\n");
    78a2:	8c e3       	ldi	r24, 0x3C	; 60
    78a4:	91 e2       	ldi	r25, 0x21	; 33
    78a6:	0e 94 2b 49 	call	0x9256	; 0x9256 <puts>
	
	//I2CInit(115200,0x28);
	//delay_ms(1000);
	sysclk_enable_peripheral_clock(&TWIF);
    78aa:	80 eb       	ldi	r24, 0xB0	; 176
    78ac:	94 e0       	ldi	r25, 0x04	; 4
    78ae:	83 dc       	rcall	.-1786   	; 0x71b6 <sysclk_enable_peripheral_clock>
    78b0:	0e 94 78 18 	call	0x30f0	; 0x30f0 <imu_init>
	
	imu_init();
    78b4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <xbee_init>
	xbee_init();
    78b8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <thermistor_init>
	
	thermistor_init();
    78bc:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <volt_init>
	volt_init();
    78c0:	87 e4       	ldi	r24, 0x47	; 71
	printf("\tXbee Init\n");
    78c2:	91 e2       	ldi	r25, 0x21	; 33
    78c4:	0e 94 2b 49 	call	0x9256	; 0x9256 <puts>
		
	while (1) 
	{
	
		
		imu_update();
    78c8:	0e 94 1d 19 	call	0x323a	; 0x323a <imu_update>
		
		printf("Pitch: %i\nRoll: %i\nYaw: %i\n",(int)imu_pitch(), (int)imu_roll(), (int)imu_heading());
    78cc:	0e 94 59 19 	call	0x32b2	; 0x32b2 <imu_heading>
    78d0:	dc 01       	movw	r26, r24
    78d2:	cb 01       	movw	r24, r22
    78d4:	bc 01       	movw	r22, r24
    78d6:	cd 01       	movw	r24, r26
    78d8:	8e d3       	rcall	.+1820   	; 0x7ff6 <__fixsfsi>
    78da:	dc 01       	movw	r26, r24
    78dc:	cb 01       	movw	r24, r22
    78de:	7c 01       	movw	r14, r24
    78e0:	0e 94 37 19 	call	0x326e	; 0x326e <imu_roll>
    78e4:	dc 01       	movw	r26, r24
    78e6:	cb 01       	movw	r24, r22
    78e8:	bc 01       	movw	r22, r24
    78ea:	cd 01       	movw	r24, r26
    78ec:	84 d3       	rcall	.+1800   	; 0x7ff6 <__fixsfsi>
    78ee:	dc 01       	movw	r26, r24
    78f0:	cb 01       	movw	r24, r22
    78f2:	8c 01       	movw	r16, r24
    78f4:	0e 94 48 19 	call	0x3290	; 0x3290 <imu_pitch>
    78f8:	dc 01       	movw	r26, r24
    78fa:	cb 01       	movw	r24, r22
    78fc:	bc 01       	movw	r22, r24
    78fe:	cd 01       	movw	r24, r26
    7900:	7a d3       	rcall	.+1780   	; 0x7ff6 <__fixsfsi>
    7902:	dc 01       	movw	r26, r24
    7904:	cb 01       	movw	r24, r22
    7906:	2f 2d       	mov	r18, r15
    7908:	2f 93       	push	r18
    790a:	2e 2d       	mov	r18, r14
    790c:	2f 93       	push	r18
    790e:	21 2f       	mov	r18, r17
    7910:	2f 93       	push	r18
    7912:	20 2f       	mov	r18, r16
    7914:	2f 93       	push	r18
    7916:	29 2f       	mov	r18, r25
    7918:	2f 93       	push	r18
    791a:	8f 93       	push	r24
    791c:	82 e5       	ldi	r24, 0x52	; 82
    791e:	91 e2       	ldi	r25, 0x21	; 33
    7920:	89 2f       	mov	r24, r25
    7922:	8f 93       	push	r24
    7924:	82 e5       	ldi	r24, 0x52	; 82
    7926:	91 e2       	ldi	r25, 0x21	; 33
    7928:	8f 93       	push	r24
    792a:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    792e:	2d b7       	in	r18, 0x3d	; 61
    7930:	3e b7       	in	r19, 0x3e	; 62
    7932:	28 5f       	subi	r18, 0xF8	; 248
    7934:	3f 4f       	sbci	r19, 0xFF	; 255
    7936:	cd bf       	out	0x3d, r28	; 61
    7938:	de bf       	out	0x3e, r29	; 62
    793a:	0e 94 85 19 	call	0x330a	; 0x330a <imu_sys_cal>
		printf("CALBRATION STATUSES:  Accel: %u, Gyro: %u, Mag: %u, Sys: %u\n", imu_accel_cal(), imu_gyro_cal(), imu_mag_cal(), imu_sys_cal());
    793e:	c8 2e       	mov	r12, r24
    7940:	d1 2c       	mov	r13, r1
    7942:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <imu_mag_cal>
    7946:	e8 2e       	mov	r14, r24
    7948:	f1 2c       	mov	r15, r1
    794a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <imu_gyro_cal>
    794e:	08 2f       	mov	r16, r24
    7950:	10 e0       	ldi	r17, 0x00	; 0
    7952:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <imu_accel_cal>
    7956:	88 2f       	mov	r24, r24
    7958:	90 e0       	ldi	r25, 0x00	; 0
    795a:	2d 2d       	mov	r18, r13
    795c:	2f 93       	push	r18
    795e:	2c 2d       	mov	r18, r12
    7960:	2f 93       	push	r18
    7962:	2f 2d       	mov	r18, r15
    7964:	2f 93       	push	r18
    7966:	2e 2d       	mov	r18, r14
    7968:	2f 93       	push	r18
    796a:	21 2f       	mov	r18, r17
    796c:	2f 93       	push	r18
    796e:	20 2f       	mov	r18, r16
    7970:	2f 93       	push	r18
    7972:	29 2f       	mov	r18, r25
    7974:	2f 93       	push	r18
    7976:	8f 93       	push	r24
    7978:	8e e6       	ldi	r24, 0x6E	; 110
    797a:	91 e2       	ldi	r25, 0x21	; 33
    797c:	89 2f       	mov	r24, r25
    797e:	8f 93       	push	r24
    7980:	8e e6       	ldi	r24, 0x6E	; 110
    7982:	91 e2       	ldi	r25, 0x21	; 33
    7984:	8f 93       	push	r24
    7986:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    798a:	4d b7       	in	r20, 0x3d	; 61
    798c:	5e b7       	in	r21, 0x3e	; 62
    798e:	46 5f       	subi	r20, 0xF6	; 246
    7990:	5f 4f       	sbci	r21, 0xFF	; 255
    7992:	cd bf       	out	0x3d, r28	; 61
    7994:	de bf       	out	0x3e, r29	; 62
    7996:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <getTemperature>
		
		
		
		temp = getTemperature();
    799a:	dc 01       	movw	r26, r24
    799c:	cb 01       	movw	r24, r22
    799e:	8f a3       	std	Y+39, r24	; 0x27
    79a0:	98 a7       	std	Y+40, r25	; 0x28
    79a2:	a9 a7       	std	Y+41, r26	; 0x29
    79a4:	ba a7       	std	Y+42, r27	; 0x2a
    79a6:	8a a5       	ldd	r24, Y+42	; 0x2a
		printf("temp: %f\n", temp);
    79a8:	8f 93       	push	r24
    79aa:	89 a5       	ldd	r24, Y+41	; 0x29
    79ac:	8f 93       	push	r24
    79ae:	88 a5       	ldd	r24, Y+40	; 0x28
    79b0:	8f 93       	push	r24
    79b2:	8f a1       	ldd	r24, Y+39	; 0x27
    79b4:	8f 93       	push	r24
    79b6:	8b ea       	ldi	r24, 0xAB	; 171
    79b8:	91 e2       	ldi	r25, 0x21	; 33
    79ba:	89 2f       	mov	r24, r25
    79bc:	8f 93       	push	r24
    79be:	8b ea       	ldi	r24, 0xAB	; 171
    79c0:	91 e2       	ldi	r25, 0x21	; 33
    79c2:	8f 93       	push	r24
    79c4:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    79c8:	0f 90       	pop	r0
    79ca:	0f 90       	pop	r0
    79cc:	0f 90       	pop	r0
    79ce:	0f 90       	pop	r0
    79d0:	0f 90       	pop	r0
    79d2:	0f 90       	pop	r0
    79d4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <getVoltage>
		
		voltage = getVoltage();
    79d8:	dc 01       	movw	r26, r24
    79da:	cb 01       	movw	r24, r22
    79dc:	8b a7       	std	Y+43, r24	; 0x2b
    79de:	9c a7       	std	Y+44, r25	; 0x2c
    79e0:	ad a7       	std	Y+45, r26	; 0x2d
    79e2:	be a7       	std	Y+46, r27	; 0x2e
    79e4:	8e a5       	ldd	r24, Y+46	; 0x2e
		printf("volt: %f\n",voltage);
    79e6:	8f 93       	push	r24
    79e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    79ea:	8f 93       	push	r24
    79ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    79ee:	8f 93       	push	r24
    79f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    79f2:	8f 93       	push	r24
    79f4:	85 eb       	ldi	r24, 0xB5	; 181
    79f6:	91 e2       	ldi	r25, 0x21	; 33
    79f8:	89 2f       	mov	r24, r25
    79fa:	8f 93       	push	r24
    79fc:	85 eb       	ldi	r24, 0xB5	; 181
    79fe:	91 e2       	ldi	r25, 0x21	; 33
    7a00:	8f 93       	push	r24
    7a02:	0e 94 18 49 	call	0x9230	; 0x9230 <printf>
    7a06:	0f 90       	pop	r0
    7a08:	0f 90       	pop	r0
    7a0a:	0f 90       	pop	r0
    7a0c:	0f 90       	pop	r0
    7a0e:	0f 90       	pop	r0
    7a10:	0f 90       	pop	r0
    7a12:	8f 81       	ldd	r24, Y+7	; 0x07
			
		//print_calibration_data();
		
		
	
		sprintf(s_missionTime, " ");
    7a14:	98 85       	ldd	r25, Y+8	; 0x08
    7a16:	20 e2       	ldi	r18, 0x20	; 32
    7a18:	30 e0       	ldi	r19, 0x00	; 0
    7a1a:	fc 01       	movw	r30, r24
    7a1c:	20 83       	st	Z, r18
    7a1e:	31 83       	std	Z+1, r19	; 0x01
    7a20:	89 85       	ldd	r24, Y+9	; 0x09
		sprintf(s_packetCount, " ");
    7a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a24:	20 e2       	ldi	r18, 0x20	; 32
    7a26:	30 e0       	ldi	r19, 0x00	; 0
    7a28:	fc 01       	movw	r30, r24
    7a2a:	20 83       	st	Z, r18
    7a2c:	31 83       	std	Z+1, r19	; 0x01
    7a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
		sprintf(s_altitude, " ");
    7a30:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a32:	20 e2       	ldi	r18, 0x20	; 32
    7a34:	30 e0       	ldi	r19, 0x00	; 0
    7a36:	fc 01       	movw	r30, r24
    7a38:	20 83       	st	Z, r18
    7a3a:	31 83       	std	Z+1, r19	; 0x01
    7a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
		sprintf(s_pressure, " ");
    7a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a40:	20 e2       	ldi	r18, 0x20	; 32
    7a42:	30 e0       	ldi	r19, 0x00	; 0
    7a44:	fc 01       	movw	r30, r24
    7a46:	20 83       	st	Z, r18
    7a48:	31 83       	std	Z+1, r19	; 0x01
    7a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
		sprintf(s_temp, " ");
    7a4c:	98 89       	ldd	r25, Y+16	; 0x10
    7a4e:	20 e2       	ldi	r18, 0x20	; 32
    7a50:	30 e0       	ldi	r19, 0x00	; 0
    7a52:	fc 01       	movw	r30, r24
    7a54:	20 83       	st	Z, r18
    7a56:	31 83       	std	Z+1, r19	; 0x01
    7a58:	89 89       	ldd	r24, Y+17	; 0x11
		sprintf(s_voltage, " ");
    7a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    7a5c:	20 e2       	ldi	r18, 0x20	; 32
    7a5e:	30 e0       	ldi	r19, 0x00	; 0
    7a60:	fc 01       	movw	r30, r24
    7a62:	20 83       	st	Z, r18
    7a64:	31 83       	std	Z+1, r19	; 0x01
    7a66:	8b 89       	ldd	r24, Y+19	; 0x13
		sprintf(s_gpsTime, " ");
    7a68:	9c 89       	ldd	r25, Y+20	; 0x14
    7a6a:	20 e2       	ldi	r18, 0x20	; 32
    7a6c:	30 e0       	ldi	r19, 0x00	; 0
    7a6e:	fc 01       	movw	r30, r24
    7a70:	20 83       	st	Z, r18
    7a72:	31 83       	std	Z+1, r19	; 0x01
    7a74:	8d 89       	ldd	r24, Y+21	; 0x15
		sprintf(s_gpsLat, " ");
    7a76:	9e 89       	ldd	r25, Y+22	; 0x16
    7a78:	20 e2       	ldi	r18, 0x20	; 32
    7a7a:	30 e0       	ldi	r19, 0x00	; 0
    7a7c:	fc 01       	movw	r30, r24
    7a7e:	20 83       	st	Z, r18
    7a80:	31 83       	std	Z+1, r19	; 0x01
    7a82:	8f 89       	ldd	r24, Y+23	; 0x17
		sprintf(s_gpsLong, " ");
    7a84:	98 8d       	ldd	r25, Y+24	; 0x18
    7a86:	20 e2       	ldi	r18, 0x20	; 32
    7a88:	30 e0       	ldi	r19, 0x00	; 0
    7a8a:	fc 01       	movw	r30, r24
    7a8c:	20 83       	st	Z, r18
    7a8e:	31 83       	std	Z+1, r19	; 0x01
    7a90:	89 8d       	ldd	r24, Y+25	; 0x19
		sprintf(s_gpsAlt, " ");
    7a92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7a94:	20 e2       	ldi	r18, 0x20	; 32
    7a96:	30 e0       	ldi	r19, 0x00	; 0
    7a98:	fc 01       	movw	r30, r24
    7a9a:	20 83       	st	Z, r18
    7a9c:	31 83       	std	Z+1, r19	; 0x01
    7a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
		sprintf(s_gpsSats, " ");
    7aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7aa2:	20 e2       	ldi	r18, 0x20	; 32
    7aa4:	30 e0       	ldi	r19, 0x00	; 0
    7aa6:	fc 01       	movw	r30, r24
    7aa8:	20 83       	st	Z, r18
    7aaa:	31 83       	std	Z+1, r19	; 0x01
    7aac:	8d 8d       	ldd	r24, Y+29	; 0x1d
		sprintf(s_pitch, " ");
    7aae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7ab0:	20 e2       	ldi	r18, 0x20	; 32
    7ab2:	30 e0       	ldi	r19, 0x00	; 0
    7ab4:	fc 01       	movw	r30, r24
    7ab6:	20 83       	st	Z, r18
    7ab8:	31 83       	std	Z+1, r19	; 0x01
    7aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
		sprintf(s_roll, " ");
    7abc:	98 a1       	ldd	r25, Y+32	; 0x20
    7abe:	20 e2       	ldi	r18, 0x20	; 32
    7ac0:	30 e0       	ldi	r19, 0x00	; 0
    7ac2:	fc 01       	movw	r30, r24
    7ac4:	20 83       	st	Z, r18
    7ac6:	31 83       	std	Z+1, r19	; 0x01
    7ac8:	89 a1       	ldd	r24, Y+33	; 0x21
		sprintf(s_spinRate, " ");
    7aca:	9a a1       	ldd	r25, Y+34	; 0x22
    7acc:	20 e2       	ldi	r18, 0x20	; 32
    7ace:	30 e0       	ldi	r19, 0x00	; 0
    7ad0:	fc 01       	movw	r30, r24
    7ad2:	20 83       	st	Z, r18
    7ad4:	31 83       	std	Z+1, r19	; 0x01
    7ad6:	8b a1       	ldd	r24, Y+35	; 0x23
		sprintf(s_flightState, " ");
    7ad8:	9c a1       	ldd	r25, Y+36	; 0x24
    7ada:	20 e2       	ldi	r18, 0x20	; 32
    7adc:	30 e0       	ldi	r19, 0x00	; 0
    7ade:	fc 01       	movw	r30, r24
    7ae0:	20 83       	st	Z, r18
    7ae2:	31 83       	std	Z+1, r19	; 0x01
    7ae4:	8d a1       	ldd	r24, Y+37	; 0x25
		sprintf(s_cardinalDir, " ");
    7ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    7ae8:	20 e2       	ldi	r18, 0x20	; 32
    7aea:	30 e0       	ldi	r19, 0x00	; 0
    7aec:	fc 01       	movw	r30, r24
    7aee:	20 83       	st	Z, r18
    7af0:	31 83       	std	Z+1, r19	; 0x01
    7af2:	8e a1       	ldd	r24, Y+38	; 0x26
		
		
		sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,",
    7af4:	8f 93       	push	r24
    7af6:	8d a1       	ldd	r24, Y+37	; 0x25
    7af8:	8f 93       	push	r24
    7afa:	8c a1       	ldd	r24, Y+36	; 0x24
    7afc:	8f 93       	push	r24
    7afe:	8b a1       	ldd	r24, Y+35	; 0x23
    7b00:	8f 93       	push	r24
    7b02:	8a a1       	ldd	r24, Y+34	; 0x22
    7b04:	8f 93       	push	r24
    7b06:	89 a1       	ldd	r24, Y+33	; 0x21
    7b08:	8f 93       	push	r24
    7b0a:	88 a1       	ldd	r24, Y+32	; 0x20
    7b0c:	8f 93       	push	r24
    7b0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7b10:	8f 93       	push	r24
    7b12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7b14:	8f 93       	push	r24
    7b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7b18:	8f 93       	push	r24
    7b1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7b1c:	8f 93       	push	r24
    7b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7b20:	8f 93       	push	r24
    7b22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7b24:	8f 93       	push	r24
    7b26:	89 8d       	ldd	r24, Y+25	; 0x19
    7b28:	8f 93       	push	r24
    7b2a:	88 8d       	ldd	r24, Y+24	; 0x18
    7b2c:	8f 93       	push	r24
    7b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    7b30:	8f 93       	push	r24
    7b32:	8e 89       	ldd	r24, Y+22	; 0x16
    7b34:	8f 93       	push	r24
    7b36:	8d 89       	ldd	r24, Y+21	; 0x15
    7b38:	8f 93       	push	r24
    7b3a:	8c 89       	ldd	r24, Y+20	; 0x14
    7b3c:	8f 93       	push	r24
    7b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    7b40:	8f 93       	push	r24
    7b42:	8a 89       	ldd	r24, Y+18	; 0x12
    7b44:	8f 93       	push	r24
    7b46:	89 89       	ldd	r24, Y+17	; 0x11
    7b48:	8f 93       	push	r24
    7b4a:	88 89       	ldd	r24, Y+16	; 0x10
    7b4c:	8f 93       	push	r24
    7b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b50:	8f 93       	push	r24
    7b52:	8e 85       	ldd	r24, Y+14	; 0x0e
    7b54:	8f 93       	push	r24
    7b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    7b58:	8f 93       	push	r24
    7b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    7b5c:	8f 93       	push	r24
    7b5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7b60:	8f 93       	push	r24
    7b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b64:	8f 93       	push	r24
    7b66:	89 85       	ldd	r24, Y+9	; 0x09
    7b68:	8f 93       	push	r24
    7b6a:	88 85       	ldd	r24, Y+8	; 0x08
    7b6c:	8f 93       	push	r24
    7b6e:	8f 81       	ldd	r24, Y+7	; 0x07
    7b70:	8f 93       	push	r24
    7b72:	8e 81       	ldd	r24, Y+6	; 0x06
    7b74:	8f 93       	push	r24
    7b76:	8d 81       	ldd	r24, Y+5	; 0x05
    7b78:	8f 93       	push	r24
    7b7a:	8f eb       	ldi	r24, 0xBF	; 191
    7b7c:	91 e2       	ldi	r25, 0x21	; 33
    7b7e:	89 2f       	mov	r24, r25
    7b80:	8f 93       	push	r24
    7b82:	8f eb       	ldi	r24, 0xBF	; 191
    7b84:	91 e2       	ldi	r25, 0x21	; 33
    7b86:	8f 93       	push	r24
    7b88:	8c 81       	ldd	r24, Y+4	; 0x04
    7b8a:	8f 93       	push	r24
    7b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b8e:	8f 93       	push	r24
    7b90:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <sprintf>
    7b94:	0d b7       	in	r16, 0x3d	; 61
    7b96:	1e b7       	in	r17, 0x3e	; 62
    7b98:	0a 5d       	subi	r16, 0xDA	; 218
    7b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    7b9c:	cd bf       	out	0x3d, r28	; 61
    7b9e:	de bf       	out	0x3e, r29	; 62
			s_roll,
			s_spinRate,
			s_flightState,
			s_cardinalDir);
		
		xbeeWrite(telemetryString);
    7ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ba4:	0e 94 09 1c 	call	0x3812	; 0x3812 <xbeeWrite>
	
		
		delay_ms(50);
    7ba8:	fa da       	rcall	.-2572   	; 0x719e <sysclk_get_cpu_hz>
    7baa:	dc 01       	movw	r26, r24
    7bac:	cb 01       	movw	r24, r22
    7bae:	9c 01       	movw	r18, r24
    7bb0:	ad 01       	movw	r20, r26
    7bb2:	60 e0       	ldi	r22, 0x00	; 0
    7bb4:	70 e0       	ldi	r23, 0x00	; 0
    7bb6:	cb 01       	movw	r24, r22
    7bb8:	82 2e       	mov	r8, r18
    7bba:	93 2e       	mov	r9, r19
    7bbc:	a4 2e       	mov	r10, r20
    7bbe:	b5 2e       	mov	r11, r21
    7bc0:	c6 2e       	mov	r12, r22
    7bc2:	d7 2e       	mov	r13, r23
    7bc4:	e8 2e       	mov	r14, r24
    7bc6:	f9 2e       	mov	r15, r25
    7bc8:	28 2d       	mov	r18, r8
    7bca:	39 2d       	mov	r19, r9
    7bcc:	4a 2d       	mov	r20, r10
    7bce:	5b 2d       	mov	r21, r11
    7bd0:	6c 2d       	mov	r22, r12
    7bd2:	7d 2d       	mov	r23, r13
    7bd4:	8e 2d       	mov	r24, r14
    7bd6:	9f 2d       	mov	r25, r15
    7bd8:	01 e0       	ldi	r16, 0x01	; 1
    7bda:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__ashldi3>
    7bde:	2f ab       	std	Y+55, r18	; 0x37
    7be0:	38 af       	std	Y+56, r19	; 0x38
    7be2:	49 af       	std	Y+57, r20	; 0x39
    7be4:	5a af       	std	Y+58, r21	; 0x3a
    7be6:	6b af       	std	Y+59, r22	; 0x3b
    7be8:	7c af       	std	Y+60, r23	; 0x3c
    7bea:	8d af       	std	Y+61, r24	; 0x3d
    7bec:	9e af       	std	Y+62, r25	; 0x3e
    7bee:	8f a8       	ldd	r8, Y+55	; 0x37
    7bf0:	98 ac       	ldd	r9, Y+56	; 0x38
    7bf2:	a9 ac       	ldd	r10, Y+57	; 0x39
    7bf4:	ba ac       	ldd	r11, Y+58	; 0x3a
    7bf6:	cb ac       	ldd	r12, Y+59	; 0x3b
    7bf8:	dc ac       	ldd	r13, Y+60	; 0x3c
    7bfa:	ed ac       	ldd	r14, Y+61	; 0x3d
    7bfc:	fe ac       	ldd	r15, Y+62	; 0x3e
    7bfe:	28 2d       	mov	r18, r8
    7c00:	39 2d       	mov	r19, r9
    7c02:	4a 2d       	mov	r20, r10
    7c04:	5b 2d       	mov	r21, r11
    7c06:	6c 2d       	mov	r22, r12
    7c08:	7d 2d       	mov	r23, r13
    7c0a:	8e 2d       	mov	r24, r14
    7c0c:	9f 2d       	mov	r25, r15
    7c0e:	02 e0       	ldi	r16, 0x02	; 2
    7c10:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__ashldi3>
    7c14:	2f af       	std	Y+63, r18	; 0x3f
    7c16:	21 96       	adiw	r28, 0x01	; 1
    7c18:	3f af       	std	Y+63, r19	; 0x3f
    7c1a:	21 97       	sbiw	r28, 0x01	; 1
    7c1c:	22 96       	adiw	r28, 0x02	; 2
    7c1e:	4f af       	std	Y+63, r20	; 0x3f
    7c20:	22 97       	sbiw	r28, 0x02	; 2
    7c22:	23 96       	adiw	r28, 0x03	; 3
    7c24:	5f af       	std	Y+63, r21	; 0x3f
    7c26:	23 97       	sbiw	r28, 0x03	; 3
    7c28:	24 96       	adiw	r28, 0x04	; 4
    7c2a:	6f af       	std	Y+63, r22	; 0x3f
    7c2c:	24 97       	sbiw	r28, 0x04	; 4
    7c2e:	25 96       	adiw	r28, 0x05	; 5
    7c30:	7f af       	std	Y+63, r23	; 0x3f
    7c32:	25 97       	sbiw	r28, 0x05	; 5
    7c34:	26 96       	adiw	r28, 0x06	; 6
    7c36:	8f af       	std	Y+63, r24	; 0x3f
    7c38:	26 97       	sbiw	r28, 0x06	; 6
    7c3a:	27 96       	adiw	r28, 0x07	; 7
    7c3c:	9f af       	std	Y+63, r25	; 0x3f
    7c3e:	27 97       	sbiw	r28, 0x07	; 7
    7c40:	28 2d       	mov	r18, r8
    7c42:	39 2d       	mov	r19, r9
    7c44:	4a 2d       	mov	r20, r10
    7c46:	5b 2d       	mov	r21, r11
    7c48:	6c 2d       	mov	r22, r12
    7c4a:	7d 2d       	mov	r23, r13
    7c4c:	8e 2d       	mov	r24, r14
    7c4e:	9f 2d       	mov	r25, r15
    7c50:	af ac       	ldd	r10, Y+63	; 0x3f
    7c52:	21 96       	adiw	r28, 0x01	; 1
    7c54:	bf ac       	ldd	r11, Y+63	; 0x3f
    7c56:	21 97       	sbiw	r28, 0x01	; 1
    7c58:	22 96       	adiw	r28, 0x02	; 2
    7c5a:	cf ac       	ldd	r12, Y+63	; 0x3f
    7c5c:	22 97       	sbiw	r28, 0x02	; 2
    7c5e:	23 96       	adiw	r28, 0x03	; 3
    7c60:	df ac       	ldd	r13, Y+63	; 0x3f
    7c62:	23 97       	sbiw	r28, 0x03	; 3
    7c64:	24 96       	adiw	r28, 0x04	; 4
    7c66:	ef ac       	ldd	r14, Y+63	; 0x3f
    7c68:	24 97       	sbiw	r28, 0x04	; 4
    7c6a:	25 96       	adiw	r28, 0x05	; 5
    7c6c:	ff ac       	ldd	r15, Y+63	; 0x3f
    7c6e:	25 97       	sbiw	r28, 0x05	; 5
    7c70:	26 96       	adiw	r28, 0x06	; 6
    7c72:	0f ad       	ldd	r16, Y+63	; 0x3f
    7c74:	26 97       	sbiw	r28, 0x06	; 6
    7c76:	27 96       	adiw	r28, 0x07	; 7
    7c78:	1f ad       	ldd	r17, Y+63	; 0x3f
    7c7a:	27 97       	sbiw	r28, 0x07	; 7
    7c7c:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <__adddi3>
    7c80:	82 2e       	mov	r8, r18
    7c82:	93 2e       	mov	r9, r19
    7c84:	a4 2e       	mov	r10, r20
    7c86:	b5 2e       	mov	r11, r21
    7c88:	c6 2e       	mov	r12, r22
    7c8a:	d7 2e       	mov	r13, r23
    7c8c:	e8 2e       	mov	r14, r24
    7c8e:	f9 2e       	mov	r15, r25
    7c90:	28 2d       	mov	r18, r8
    7c92:	39 2d       	mov	r19, r9
    7c94:	4a 2d       	mov	r20, r10
    7c96:	5b 2d       	mov	r21, r11
    7c98:	6c 2d       	mov	r22, r12
    7c9a:	7d 2d       	mov	r23, r13
    7c9c:	8e 2d       	mov	r24, r14
    7c9e:	9f 2d       	mov	r25, r15
    7ca0:	02 e0       	ldi	r16, 0x02	; 2
    7ca2:	e5 d7       	rcall	.+4042   	; 0x8c6e <__ashldi3>
    7ca4:	28 96       	adiw	r28, 0x08	; 8
    7ca6:	2f af       	std	Y+63, r18	; 0x3f
    7ca8:	28 97       	sbiw	r28, 0x08	; 8
    7caa:	29 96       	adiw	r28, 0x09	; 9
    7cac:	3f af       	std	Y+63, r19	; 0x3f
    7cae:	29 97       	sbiw	r28, 0x09	; 9
    7cb0:	2a 96       	adiw	r28, 0x0a	; 10
    7cb2:	4f af       	std	Y+63, r20	; 0x3f
    7cb4:	2a 97       	sbiw	r28, 0x0a	; 10
    7cb6:	2b 96       	adiw	r28, 0x0b	; 11
    7cb8:	5f af       	std	Y+63, r21	; 0x3f
    7cba:	2b 97       	sbiw	r28, 0x0b	; 11
    7cbc:	2c 96       	adiw	r28, 0x0c	; 12
    7cbe:	6f af       	std	Y+63, r22	; 0x3f
    7cc0:	2c 97       	sbiw	r28, 0x0c	; 12
    7cc2:	2d 96       	adiw	r28, 0x0d	; 13
    7cc4:	7f af       	std	Y+63, r23	; 0x3f
    7cc6:	2d 97       	sbiw	r28, 0x0d	; 13
    7cc8:	2e 96       	adiw	r28, 0x0e	; 14
    7cca:	8f af       	std	Y+63, r24	; 0x3f
    7ccc:	2e 97       	sbiw	r28, 0x0e	; 14
    7cce:	2f 96       	adiw	r28, 0x0f	; 15
    7cd0:	9f af       	std	Y+63, r25	; 0x3f
    7cd2:	2f 97       	sbiw	r28, 0x0f	; 15
    7cd4:	28 2d       	mov	r18, r8
    7cd6:	39 2d       	mov	r19, r9
    7cd8:	4a 2d       	mov	r20, r10
    7cda:	5b 2d       	mov	r21, r11
    7cdc:	6c 2d       	mov	r22, r12
    7cde:	7d 2d       	mov	r23, r13
    7ce0:	8e 2d       	mov	r24, r14
    7ce2:	9f 2d       	mov	r25, r15
    7ce4:	28 96       	adiw	r28, 0x08	; 8
    7ce6:	af ac       	ldd	r10, Y+63	; 0x3f
    7ce8:	28 97       	sbiw	r28, 0x08	; 8
    7cea:	29 96       	adiw	r28, 0x09	; 9
    7cec:	bf ac       	ldd	r11, Y+63	; 0x3f
    7cee:	29 97       	sbiw	r28, 0x09	; 9
    7cf0:	2a 96       	adiw	r28, 0x0a	; 10
    7cf2:	cf ac       	ldd	r12, Y+63	; 0x3f
    7cf4:	2a 97       	sbiw	r28, 0x0a	; 10
    7cf6:	2b 96       	adiw	r28, 0x0b	; 11
    7cf8:	df ac       	ldd	r13, Y+63	; 0x3f
    7cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    7cfc:	2c 96       	adiw	r28, 0x0c	; 12
    7cfe:	ef ac       	ldd	r14, Y+63	; 0x3f
    7d00:	2c 97       	sbiw	r28, 0x0c	; 12
    7d02:	2d 96       	adiw	r28, 0x0d	; 13
    7d04:	ff ac       	ldd	r15, Y+63	; 0x3f
    7d06:	2d 97       	sbiw	r28, 0x0d	; 13
    7d08:	2e 96       	adiw	r28, 0x0e	; 14
    7d0a:	0f ad       	ldd	r16, Y+63	; 0x3f
    7d0c:	2e 97       	sbiw	r28, 0x0e	; 14
    7d0e:	2f 96       	adiw	r28, 0x0f	; 15
    7d10:	1f ad       	ldd	r17, Y+63	; 0x3f
    7d12:	2f 97       	sbiw	r28, 0x0f	; 15
    7d14:	c5 d7       	rcall	.+3978   	; 0x8ca0 <__adddi3>
    7d16:	22 2e       	mov	r2, r18
    7d18:	33 2e       	mov	r3, r19
    7d1a:	44 2e       	mov	r4, r20
    7d1c:	55 2e       	mov	r5, r21
    7d1e:	66 2e       	mov	r6, r22
    7d20:	77 2e       	mov	r7, r23
    7d22:	88 2e       	mov	r8, r24
    7d24:	99 2e       	mov	r9, r25
    7d26:	0f 2e       	mov	r0, r31
    7d28:	f6 e0       	ldi	r31, 0x06	; 6
    7d2a:	af 2e       	mov	r10, r31
    7d2c:	f0 2d       	mov	r31, r0
    7d2e:	b1 2c       	mov	r11, r1
    7d30:	c1 2c       	mov	r12, r1
    7d32:	d1 2c       	mov	r13, r1
    7d34:	e1 2c       	mov	r14, r1
    7d36:	f1 2c       	mov	r15, r1
    7d38:	00 e0       	ldi	r16, 0x00	; 0
    7d3a:	10 e0       	ldi	r17, 0x00	; 0
    7d3c:	22 2d       	mov	r18, r2
    7d3e:	33 2d       	mov	r19, r3
    7d40:	44 2d       	mov	r20, r4
    7d42:	55 2d       	mov	r21, r5
    7d44:	66 2d       	mov	r22, r6
    7d46:	77 2d       	mov	r23, r7
    7d48:	88 2d       	mov	r24, r8
    7d4a:	99 2d       	mov	r25, r9
    7d4c:	34 d7       	rcall	.+3688   	; 0x8bb6 <__udivdi3>
    7d4e:	22 2e       	mov	r2, r18
    7d50:	33 2e       	mov	r3, r19
    7d52:	44 2e       	mov	r4, r20
    7d54:	55 2e       	mov	r5, r21
    7d56:	66 2e       	mov	r6, r22
    7d58:	77 2e       	mov	r7, r23
    7d5a:	88 2e       	mov	r8, r24
    7d5c:	99 2e       	mov	r9, r25
    7d5e:	a2 2c       	mov	r10, r2
    7d60:	b3 2c       	mov	r11, r3
    7d62:	c4 2c       	mov	r12, r4
    7d64:	d5 2c       	mov	r13, r5
    7d66:	e6 2c       	mov	r14, r6
    7d68:	f7 2c       	mov	r15, r7
    7d6a:	08 2d       	mov	r16, r8
    7d6c:	19 2d       	mov	r17, r9
    7d6e:	2a 2d       	mov	r18, r10
    7d70:	3b 2d       	mov	r19, r11
    7d72:	4c 2d       	mov	r20, r12
    7d74:	5d 2d       	mov	r21, r13
    7d76:	6e 2d       	mov	r22, r14
    7d78:	7f 2d       	mov	r23, r15
    7d7a:	80 2f       	mov	r24, r16
    7d7c:	91 2f       	mov	r25, r17
    7d7e:	29 51       	subi	r18, 0x19	; 25
    7d80:	3c 4f       	sbci	r19, 0xFC	; 252
    7d82:	4f 4f       	sbci	r20, 0xFF	; 255
    7d84:	5f 4f       	sbci	r21, 0xFF	; 255
    7d86:	6f 4f       	sbci	r22, 0xFF	; 255
    7d88:	7f 4f       	sbci	r23, 0xFF	; 255
    7d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    7d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d8e:	a2 2e       	mov	r10, r18
    7d90:	b3 2e       	mov	r11, r19
    7d92:	c4 2e       	mov	r12, r20
    7d94:	d5 2e       	mov	r13, r21
    7d96:	e6 2e       	mov	r14, r22
    7d98:	f7 2e       	mov	r15, r23
    7d9a:	08 2f       	mov	r16, r24
    7d9c:	19 2f       	mov	r17, r25
    7d9e:	2a 2d       	mov	r18, r10
    7da0:	3b 2d       	mov	r19, r11
    7da2:	4c 2d       	mov	r20, r12
    7da4:	5d 2d       	mov	r21, r13
    7da6:	6e 2d       	mov	r22, r14
    7da8:	7f 2d       	mov	r23, r15
    7daa:	80 2f       	mov	r24, r16
    7dac:	91 2f       	mov	r25, r17
    7dae:	91 d1       	rcall	.+802    	; 0x80d2 <__floatundisf>
    7db0:	dc 01       	movw	r26, r24
    7db2:	cb 01       	movw	r24, r22
    7db4:	20 e0       	ldi	r18, 0x00	; 0
    7db6:	30 e0       	ldi	r19, 0x00	; 0
    7db8:	4a e7       	ldi	r20, 0x7A	; 122
    7dba:	54 e4       	ldi	r21, 0x44	; 68
    7dbc:	bc 01       	movw	r22, r24
    7dbe:	cd 01       	movw	r24, r26
    7dc0:	78 d0       	rcall	.+240    	; 0x7eb2 <__divsf3>
    7dc2:	dc 01       	movw	r26, r24
    7dc4:	cb 01       	movw	r24, r22
    7dc6:	bc 01       	movw	r22, r24
    7dc8:	cd 01       	movw	r24, r26
    7dca:	e0 d0       	rcall	.+448    	; 0x7f8c <__fixunssfdi>
    7dcc:	a2 2e       	mov	r10, r18
    7dce:	b3 2e       	mov	r11, r19
    7dd0:	c4 2e       	mov	r12, r20
    7dd2:	d5 2e       	mov	r13, r21
    7dd4:	e6 2e       	mov	r14, r22
    7dd6:	f7 2e       	mov	r15, r23
    7dd8:	08 2f       	mov	r16, r24
    7dda:	19 2f       	mov	r17, r25
    7ddc:	d6 01       	movw	r26, r12
    7dde:	c5 01       	movw	r24, r10
    7de0:	bc 01       	movw	r22, r24
    7de2:	cd 01       	movw	r24, r26
    7de4:	80 db       	rcall	.-2304   	; 0x74e6 <__portable_avr_delay_cycles>
    7de6:	70 cd       	rjmp	.-1312   	; 0x78c8 <main+0x35c>

00007de8 <__subsf3>:

		
	
							
	}
    7de8:	50 58       	subi	r21, 0x80	; 128

00007dea <__addsf3>:
    7dea:	bb 27       	eor	r27, r27
    7dec:	aa 27       	eor	r26, r26
    7dee:	0e d0       	rcall	.+28     	; 0x7e0c <__addsf3x>
    7df0:	d5 c1       	rjmp	.+938    	; 0x819c <__fp_round>
    7df2:	c6 d1       	rcall	.+908    	; 0x8180 <__fp_pscA>
    7df4:	30 f0       	brcs	.+12     	; 0x7e02 <__addsf3+0x18>
    7df6:	cb d1       	rcall	.+918    	; 0x818e <__fp_pscB>
    7df8:	20 f0       	brcs	.+8      	; 0x7e02 <__addsf3+0x18>
    7dfa:	31 f4       	brne	.+12     	; 0x7e08 <__addsf3+0x1e>
    7dfc:	9f 3f       	cpi	r25, 0xFF	; 255
    7dfe:	11 f4       	brne	.+4      	; 0x7e04 <__addsf3+0x1a>
    7e00:	1e f4       	brtc	.+6      	; 0x7e08 <__addsf3+0x1e>
    7e02:	ab c1       	rjmp	.+854    	; 0x815a <__fp_nan>
    7e04:	0e f4       	brtc	.+2      	; 0x7e08 <__addsf3+0x1e>
    7e06:	e0 95       	com	r30
    7e08:	e7 fb       	bst	r30, 7
    7e0a:	a1 c1       	rjmp	.+834    	; 0x814e <__fp_inf>

00007e0c <__addsf3x>:
    7e0c:	e9 2f       	mov	r30, r25
    7e0e:	d7 d1       	rcall	.+942    	; 0x81be <__fp_split3>
    7e10:	80 f3       	brcs	.-32     	; 0x7df2 <__addsf3+0x8>
    7e12:	ba 17       	cp	r27, r26
    7e14:	62 07       	cpc	r22, r18
    7e16:	73 07       	cpc	r23, r19
    7e18:	84 07       	cpc	r24, r20
    7e1a:	95 07       	cpc	r25, r21
    7e1c:	18 f0       	brcs	.+6      	; 0x7e24 <__addsf3x+0x18>
    7e1e:	71 f4       	brne	.+28     	; 0x7e3c <__addsf3x+0x30>
    7e20:	9e f5       	brtc	.+102    	; 0x7e88 <__addsf3x+0x7c>
    7e22:	ef c1       	rjmp	.+990    	; 0x8202 <__fp_zero>
    7e24:	0e f4       	brtc	.+2      	; 0x7e28 <__addsf3x+0x1c>
    7e26:	e0 95       	com	r30
    7e28:	0b 2e       	mov	r0, r27
    7e2a:	ba 2f       	mov	r27, r26
    7e2c:	a0 2d       	mov	r26, r0
    7e2e:	0b 01       	movw	r0, r22
    7e30:	b9 01       	movw	r22, r18
    7e32:	90 01       	movw	r18, r0
    7e34:	0c 01       	movw	r0, r24
    7e36:	ca 01       	movw	r24, r20
    7e38:	a0 01       	movw	r20, r0
    7e3a:	11 24       	eor	r1, r1
    7e3c:	ff 27       	eor	r31, r31
    7e3e:	59 1b       	sub	r21, r25
    7e40:	99 f0       	breq	.+38     	; 0x7e68 <__addsf3x+0x5c>
    7e42:	59 3f       	cpi	r21, 0xF9	; 249
    7e44:	50 f4       	brcc	.+20     	; 0x7e5a <__addsf3x+0x4e>
    7e46:	50 3e       	cpi	r21, 0xE0	; 224
    7e48:	68 f1       	brcs	.+90     	; 0x7ea4 <__addsf3x+0x98>
    7e4a:	1a 16       	cp	r1, r26
    7e4c:	f0 40       	sbci	r31, 0x00	; 0
    7e4e:	a2 2f       	mov	r26, r18
    7e50:	23 2f       	mov	r18, r19
    7e52:	34 2f       	mov	r19, r20
    7e54:	44 27       	eor	r20, r20
    7e56:	58 5f       	subi	r21, 0xF8	; 248
    7e58:	f3 cf       	rjmp	.-26     	; 0x7e40 <__addsf3x+0x34>
    7e5a:	46 95       	lsr	r20
    7e5c:	37 95       	ror	r19
    7e5e:	27 95       	ror	r18
    7e60:	a7 95       	ror	r26
    7e62:	f0 40       	sbci	r31, 0x00	; 0
    7e64:	53 95       	inc	r21
    7e66:	c9 f7       	brne	.-14     	; 0x7e5a <__addsf3x+0x4e>
    7e68:	7e f4       	brtc	.+30     	; 0x7e88 <__addsf3x+0x7c>
    7e6a:	1f 16       	cp	r1, r31
    7e6c:	ba 0b       	sbc	r27, r26
    7e6e:	62 0b       	sbc	r22, r18
    7e70:	73 0b       	sbc	r23, r19
    7e72:	84 0b       	sbc	r24, r20
    7e74:	ba f0       	brmi	.+46     	; 0x7ea4 <__addsf3x+0x98>
    7e76:	91 50       	subi	r25, 0x01	; 1
    7e78:	a1 f0       	breq	.+40     	; 0x7ea2 <__addsf3x+0x96>
    7e7a:	ff 0f       	add	r31, r31
    7e7c:	bb 1f       	adc	r27, r27
    7e7e:	66 1f       	adc	r22, r22
    7e80:	77 1f       	adc	r23, r23
    7e82:	88 1f       	adc	r24, r24
    7e84:	c2 f7       	brpl	.-16     	; 0x7e76 <__addsf3x+0x6a>
    7e86:	0e c0       	rjmp	.+28     	; 0x7ea4 <__addsf3x+0x98>
    7e88:	ba 0f       	add	r27, r26
    7e8a:	62 1f       	adc	r22, r18
    7e8c:	73 1f       	adc	r23, r19
    7e8e:	84 1f       	adc	r24, r20
    7e90:	48 f4       	brcc	.+18     	; 0x7ea4 <__addsf3x+0x98>
    7e92:	87 95       	ror	r24
    7e94:	77 95       	ror	r23
    7e96:	67 95       	ror	r22
    7e98:	b7 95       	ror	r27
    7e9a:	f7 95       	ror	r31
    7e9c:	9e 3f       	cpi	r25, 0xFE	; 254
    7e9e:	08 f0       	brcs	.+2      	; 0x7ea2 <__addsf3x+0x96>
    7ea0:	b3 cf       	rjmp	.-154    	; 0x7e08 <__addsf3+0x1e>
    7ea2:	93 95       	inc	r25
    7ea4:	88 0f       	add	r24, r24
    7ea6:	08 f0       	brcs	.+2      	; 0x7eaa <__addsf3x+0x9e>
    7ea8:	99 27       	eor	r25, r25
    7eaa:	ee 0f       	add	r30, r30
    7eac:	97 95       	ror	r25
    7eae:	87 95       	ror	r24
    7eb0:	08 95       	ret

00007eb2 <__divsf3>:
    7eb2:	0c d0       	rcall	.+24     	; 0x7ecc <__divsf3x>
    7eb4:	73 c1       	rjmp	.+742    	; 0x819c <__fp_round>
    7eb6:	6b d1       	rcall	.+726    	; 0x818e <__fp_pscB>
    7eb8:	40 f0       	brcs	.+16     	; 0x7eca <__divsf3+0x18>
    7eba:	62 d1       	rcall	.+708    	; 0x8180 <__fp_pscA>
    7ebc:	30 f0       	brcs	.+12     	; 0x7eca <__divsf3+0x18>
    7ebe:	21 f4       	brne	.+8      	; 0x7ec8 <__divsf3+0x16>
    7ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    7ec2:	19 f0       	breq	.+6      	; 0x7eca <__divsf3+0x18>
    7ec4:	44 c1       	rjmp	.+648    	; 0x814e <__fp_inf>
    7ec6:	51 11       	cpse	r21, r1
    7ec8:	9d c1       	rjmp	.+826    	; 0x8204 <__fp_szero>
    7eca:	47 c1       	rjmp	.+654    	; 0x815a <__fp_nan>

00007ecc <__divsf3x>:
    7ecc:	78 d1       	rcall	.+752    	; 0x81be <__fp_split3>
    7ece:	98 f3       	brcs	.-26     	; 0x7eb6 <__divsf3+0x4>

00007ed0 <__divsf3_pse>:
    7ed0:	99 23       	and	r25, r25
    7ed2:	c9 f3       	breq	.-14     	; 0x7ec6 <__divsf3+0x14>
    7ed4:	55 23       	and	r21, r21
    7ed6:	b1 f3       	breq	.-20     	; 0x7ec4 <__divsf3+0x12>
    7ed8:	95 1b       	sub	r25, r21
    7eda:	55 0b       	sbc	r21, r21
    7edc:	bb 27       	eor	r27, r27
    7ede:	aa 27       	eor	r26, r26
    7ee0:	62 17       	cp	r22, r18
    7ee2:	73 07       	cpc	r23, r19
    7ee4:	84 07       	cpc	r24, r20
    7ee6:	38 f0       	brcs	.+14     	; 0x7ef6 <__divsf3_pse+0x26>
    7ee8:	9f 5f       	subi	r25, 0xFF	; 255
    7eea:	5f 4f       	sbci	r21, 0xFF	; 255
    7eec:	22 0f       	add	r18, r18
    7eee:	33 1f       	adc	r19, r19
    7ef0:	44 1f       	adc	r20, r20
    7ef2:	aa 1f       	adc	r26, r26
    7ef4:	a9 f3       	breq	.-22     	; 0x7ee0 <__divsf3_pse+0x10>
    7ef6:	33 d0       	rcall	.+102    	; 0x7f5e <__divsf3_pse+0x8e>
    7ef8:	0e 2e       	mov	r0, r30
    7efa:	3a f0       	brmi	.+14     	; 0x7f0a <__divsf3_pse+0x3a>
    7efc:	e0 e8       	ldi	r30, 0x80	; 128
    7efe:	30 d0       	rcall	.+96     	; 0x7f60 <__divsf3_pse+0x90>
    7f00:	91 50       	subi	r25, 0x01	; 1
    7f02:	50 40       	sbci	r21, 0x00	; 0
    7f04:	e6 95       	lsr	r30
    7f06:	00 1c       	adc	r0, r0
    7f08:	ca f7       	brpl	.-14     	; 0x7efc <__divsf3_pse+0x2c>
    7f0a:	29 d0       	rcall	.+82     	; 0x7f5e <__divsf3_pse+0x8e>
    7f0c:	fe 2f       	mov	r31, r30
    7f0e:	27 d0       	rcall	.+78     	; 0x7f5e <__divsf3_pse+0x8e>
    7f10:	66 0f       	add	r22, r22
    7f12:	77 1f       	adc	r23, r23
    7f14:	88 1f       	adc	r24, r24
    7f16:	bb 1f       	adc	r27, r27
    7f18:	26 17       	cp	r18, r22
    7f1a:	37 07       	cpc	r19, r23
    7f1c:	48 07       	cpc	r20, r24
    7f1e:	ab 07       	cpc	r26, r27
    7f20:	b0 e8       	ldi	r27, 0x80	; 128
    7f22:	09 f0       	breq	.+2      	; 0x7f26 <__divsf3_pse+0x56>
    7f24:	bb 0b       	sbc	r27, r27
    7f26:	80 2d       	mov	r24, r0
    7f28:	bf 01       	movw	r22, r30
    7f2a:	ff 27       	eor	r31, r31
    7f2c:	93 58       	subi	r25, 0x83	; 131
    7f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    7f30:	2a f0       	brmi	.+10     	; 0x7f3c <__divsf3_pse+0x6c>
    7f32:	9e 3f       	cpi	r25, 0xFE	; 254
    7f34:	51 05       	cpc	r21, r1
    7f36:	68 f0       	brcs	.+26     	; 0x7f52 <__divsf3_pse+0x82>
    7f38:	0a c1       	rjmp	.+532    	; 0x814e <__fp_inf>
    7f3a:	64 c1       	rjmp	.+712    	; 0x8204 <__fp_szero>
    7f3c:	5f 3f       	cpi	r21, 0xFF	; 255
    7f3e:	ec f3       	brlt	.-6      	; 0x7f3a <__divsf3_pse+0x6a>
    7f40:	98 3e       	cpi	r25, 0xE8	; 232
    7f42:	dc f3       	brlt	.-10     	; 0x7f3a <__divsf3_pse+0x6a>
    7f44:	86 95       	lsr	r24
    7f46:	77 95       	ror	r23
    7f48:	67 95       	ror	r22
    7f4a:	b7 95       	ror	r27
    7f4c:	f7 95       	ror	r31
    7f4e:	9f 5f       	subi	r25, 0xFF	; 255
    7f50:	c9 f7       	brne	.-14     	; 0x7f44 <__divsf3_pse+0x74>
    7f52:	88 0f       	add	r24, r24
    7f54:	91 1d       	adc	r25, r1
    7f56:	96 95       	lsr	r25
    7f58:	87 95       	ror	r24
    7f5a:	97 f9       	bld	r25, 7
    7f5c:	08 95       	ret
    7f5e:	e1 e0       	ldi	r30, 0x01	; 1
    7f60:	66 0f       	add	r22, r22
    7f62:	77 1f       	adc	r23, r23
    7f64:	88 1f       	adc	r24, r24
    7f66:	bb 1f       	adc	r27, r27
    7f68:	62 17       	cp	r22, r18
    7f6a:	73 07       	cpc	r23, r19
    7f6c:	84 07       	cpc	r24, r20
    7f6e:	ba 07       	cpc	r27, r26
    7f70:	20 f0       	brcs	.+8      	; 0x7f7a <__divsf3_pse+0xaa>
    7f72:	62 1b       	sub	r22, r18
    7f74:	73 0b       	sbc	r23, r19
    7f76:	84 0b       	sbc	r24, r20
    7f78:	ba 0b       	sbc	r27, r26
    7f7a:	ee 1f       	adc	r30, r30
    7f7c:	88 f7       	brcc	.-30     	; 0x7f60 <__divsf3_pse+0x90>
    7f7e:	e0 95       	com	r30
    7f80:	08 95       	ret

00007f82 <__fixsfdi>:
    7f82:	be e3       	ldi	r27, 0x3E	; 62
    7f84:	04 d0       	rcall	.+8      	; 0x7f8e <__fixunssfdi+0x2>
    7f86:	08 f4       	brcc	.+2      	; 0x7f8a <__fixsfdi+0x8>
    7f88:	90 e8       	ldi	r25, 0x80	; 128
    7f8a:	08 95       	ret

00007f8c <__fixunssfdi>:
    7f8c:	bf e3       	ldi	r27, 0x3F	; 63
    7f8e:	22 27       	eor	r18, r18
    7f90:	33 27       	eor	r19, r19
    7f92:	a9 01       	movw	r20, r18
    7f94:	1c d1       	rcall	.+568    	; 0x81ce <__fp_splitA>
    7f96:	58 f1       	brcs	.+86     	; 0x7fee <__fixunssfdi+0x62>
    7f98:	9f 57       	subi	r25, 0x7F	; 127
    7f9a:	40 f1       	brcs	.+80     	; 0x7fec <__fixunssfdi+0x60>
    7f9c:	b9 17       	cp	r27, r25
    7f9e:	38 f1       	brcs	.+78     	; 0x7fee <__fixunssfdi+0x62>
    7fa0:	bf e3       	ldi	r27, 0x3F	; 63
    7fa2:	b9 1b       	sub	r27, r25
    7fa4:	99 27       	eor	r25, r25
    7fa6:	b8 50       	subi	r27, 0x08	; 8
    7fa8:	3a f4       	brpl	.+14     	; 0x7fb8 <__fixunssfdi+0x2c>
    7faa:	66 0f       	add	r22, r22
    7fac:	77 1f       	adc	r23, r23
    7fae:	88 1f       	adc	r24, r24
    7fb0:	99 1f       	adc	r25, r25
    7fb2:	b3 95       	inc	r27
    7fb4:	d2 f3       	brmi	.-12     	; 0x7faa <__fixunssfdi+0x1e>
    7fb6:	16 c0       	rjmp	.+44     	; 0x7fe4 <__fixunssfdi+0x58>
    7fb8:	b8 50       	subi	r27, 0x08	; 8
    7fba:	4a f0       	brmi	.+18     	; 0x7fce <__fixunssfdi+0x42>
    7fbc:	23 2f       	mov	r18, r19
    7fbe:	34 2f       	mov	r19, r20
    7fc0:	45 2f       	mov	r20, r21
    7fc2:	56 2f       	mov	r21, r22
    7fc4:	67 2f       	mov	r22, r23
    7fc6:	78 2f       	mov	r23, r24
    7fc8:	88 27       	eor	r24, r24
    7fca:	b8 50       	subi	r27, 0x08	; 8
    7fcc:	ba f7       	brpl	.-18     	; 0x7fbc <__fixunssfdi+0x30>
    7fce:	b8 5f       	subi	r27, 0xF8	; 248
    7fd0:	49 f0       	breq	.+18     	; 0x7fe4 <__fixunssfdi+0x58>
    7fd2:	86 95       	lsr	r24
    7fd4:	77 95       	ror	r23
    7fd6:	67 95       	ror	r22
    7fd8:	57 95       	ror	r21
    7fda:	47 95       	ror	r20
    7fdc:	37 95       	ror	r19
    7fde:	27 95       	ror	r18
    7fe0:	ba 95       	dec	r27
    7fe2:	b9 f7       	brne	.-18     	; 0x7fd2 <__fixunssfdi+0x46>
    7fe4:	0e f4       	brtc	.+2      	; 0x7fe8 <__fixunssfdi+0x5c>
    7fe6:	bc d0       	rcall	.+376    	; 0x8160 <__fp_negdi>
    7fe8:	88 94       	clc
    7fea:	08 95       	ret
    7fec:	88 94       	clc
    7fee:	60 e0       	ldi	r22, 0x00	; 0
    7ff0:	70 e0       	ldi	r23, 0x00	; 0
    7ff2:	cb 01       	movw	r24, r22
    7ff4:	08 95       	ret

00007ff6 <__fixsfsi>:
    7ff6:	04 d0       	rcall	.+8      	; 0x8000 <__fixunssfsi>
    7ff8:	68 94       	set
    7ffa:	b1 11       	cpse	r27, r1
    7ffc:	03 c1       	rjmp	.+518    	; 0x8204 <__fp_szero>
    7ffe:	08 95       	ret

00008000 <__fixunssfsi>:
    8000:	e6 d0       	rcall	.+460    	; 0x81ce <__fp_splitA>
    8002:	88 f0       	brcs	.+34     	; 0x8026 <__fixunssfsi+0x26>
    8004:	9f 57       	subi	r25, 0x7F	; 127
    8006:	90 f0       	brcs	.+36     	; 0x802c <__fixunssfsi+0x2c>
    8008:	b9 2f       	mov	r27, r25
    800a:	99 27       	eor	r25, r25
    800c:	b7 51       	subi	r27, 0x17	; 23
    800e:	a0 f0       	brcs	.+40     	; 0x8038 <__fixunssfsi+0x38>
    8010:	d1 f0       	breq	.+52     	; 0x8046 <__fixunssfsi+0x46>
    8012:	66 0f       	add	r22, r22
    8014:	77 1f       	adc	r23, r23
    8016:	88 1f       	adc	r24, r24
    8018:	99 1f       	adc	r25, r25
    801a:	1a f0       	brmi	.+6      	; 0x8022 <__fixunssfsi+0x22>
    801c:	ba 95       	dec	r27
    801e:	c9 f7       	brne	.-14     	; 0x8012 <__fixunssfsi+0x12>
    8020:	12 c0       	rjmp	.+36     	; 0x8046 <__fixunssfsi+0x46>
    8022:	b1 30       	cpi	r27, 0x01	; 1
    8024:	81 f0       	breq	.+32     	; 0x8046 <__fixunssfsi+0x46>
    8026:	ed d0       	rcall	.+474    	; 0x8202 <__fp_zero>
    8028:	b1 e0       	ldi	r27, 0x01	; 1
    802a:	08 95       	ret
    802c:	ea c0       	rjmp	.+468    	; 0x8202 <__fp_zero>
    802e:	67 2f       	mov	r22, r23
    8030:	78 2f       	mov	r23, r24
    8032:	88 27       	eor	r24, r24
    8034:	b8 5f       	subi	r27, 0xF8	; 248
    8036:	39 f0       	breq	.+14     	; 0x8046 <__fixunssfsi+0x46>
    8038:	b9 3f       	cpi	r27, 0xF9	; 249
    803a:	cc f3       	brlt	.-14     	; 0x802e <__fixunssfsi+0x2e>
    803c:	86 95       	lsr	r24
    803e:	77 95       	ror	r23
    8040:	67 95       	ror	r22
    8042:	b3 95       	inc	r27
    8044:	d9 f7       	brne	.-10     	; 0x803c <__fixunssfsi+0x3c>
    8046:	3e f4       	brtc	.+14     	; 0x8056 <__fixunssfsi+0x56>
    8048:	90 95       	com	r25
    804a:	80 95       	com	r24
    804c:	70 95       	com	r23
    804e:	61 95       	neg	r22
    8050:	7f 4f       	sbci	r23, 0xFF	; 255
    8052:	8f 4f       	sbci	r24, 0xFF	; 255
    8054:	9f 4f       	sbci	r25, 0xFF	; 255
    8056:	08 95       	ret

00008058 <__floatunsisf>:
    8058:	e8 94       	clt
    805a:	09 c0       	rjmp	.+18     	; 0x806e <__floatsisf+0x12>

0000805c <__floatsisf>:
    805c:	97 fb       	bst	r25, 7
    805e:	3e f4       	brtc	.+14     	; 0x806e <__floatsisf+0x12>
    8060:	90 95       	com	r25
    8062:	80 95       	com	r24
    8064:	70 95       	com	r23
    8066:	61 95       	neg	r22
    8068:	7f 4f       	sbci	r23, 0xFF	; 255
    806a:	8f 4f       	sbci	r24, 0xFF	; 255
    806c:	9f 4f       	sbci	r25, 0xFF	; 255
    806e:	99 23       	and	r25, r25
    8070:	a9 f0       	breq	.+42     	; 0x809c <__floatsisf+0x40>
    8072:	f9 2f       	mov	r31, r25
    8074:	96 e9       	ldi	r25, 0x96	; 150
    8076:	bb 27       	eor	r27, r27
    8078:	93 95       	inc	r25
    807a:	f6 95       	lsr	r31
    807c:	87 95       	ror	r24
    807e:	77 95       	ror	r23
    8080:	67 95       	ror	r22
    8082:	b7 95       	ror	r27
    8084:	f1 11       	cpse	r31, r1
    8086:	f8 cf       	rjmp	.-16     	; 0x8078 <__floatsisf+0x1c>
    8088:	fa f4       	brpl	.+62     	; 0x80c8 <__floatsisf+0x6c>
    808a:	bb 0f       	add	r27, r27
    808c:	11 f4       	brne	.+4      	; 0x8092 <__floatsisf+0x36>
    808e:	60 ff       	sbrs	r22, 0
    8090:	1b c0       	rjmp	.+54     	; 0x80c8 <__floatsisf+0x6c>
    8092:	6f 5f       	subi	r22, 0xFF	; 255
    8094:	7f 4f       	sbci	r23, 0xFF	; 255
    8096:	8f 4f       	sbci	r24, 0xFF	; 255
    8098:	9f 4f       	sbci	r25, 0xFF	; 255
    809a:	16 c0       	rjmp	.+44     	; 0x80c8 <__floatsisf+0x6c>
    809c:	88 23       	and	r24, r24
    809e:	11 f0       	breq	.+4      	; 0x80a4 <__floatsisf+0x48>
    80a0:	96 e9       	ldi	r25, 0x96	; 150
    80a2:	11 c0       	rjmp	.+34     	; 0x80c6 <__floatsisf+0x6a>
    80a4:	77 23       	and	r23, r23
    80a6:	21 f0       	breq	.+8      	; 0x80b0 <__floatsisf+0x54>
    80a8:	9e e8       	ldi	r25, 0x8E	; 142
    80aa:	87 2f       	mov	r24, r23
    80ac:	76 2f       	mov	r23, r22
    80ae:	05 c0       	rjmp	.+10     	; 0x80ba <__floatsisf+0x5e>
    80b0:	66 23       	and	r22, r22
    80b2:	71 f0       	breq	.+28     	; 0x80d0 <__floatsisf+0x74>
    80b4:	96 e8       	ldi	r25, 0x86	; 134
    80b6:	86 2f       	mov	r24, r22
    80b8:	70 e0       	ldi	r23, 0x00	; 0
    80ba:	60 e0       	ldi	r22, 0x00	; 0
    80bc:	2a f0       	brmi	.+10     	; 0x80c8 <__floatsisf+0x6c>
    80be:	9a 95       	dec	r25
    80c0:	66 0f       	add	r22, r22
    80c2:	77 1f       	adc	r23, r23
    80c4:	88 1f       	adc	r24, r24
    80c6:	da f7       	brpl	.-10     	; 0x80be <__floatsisf+0x62>
    80c8:	88 0f       	add	r24, r24
    80ca:	96 95       	lsr	r25
    80cc:	87 95       	ror	r24
    80ce:	97 f9       	bld	r25, 7
    80d0:	08 95       	ret

000080d2 <__floatundisf>:
    80d2:	e8 94       	clt

000080d4 <__fp_di2sf>:
    80d4:	f9 2f       	mov	r31, r25
    80d6:	96 eb       	ldi	r25, 0xB6	; 182
    80d8:	ff 23       	and	r31, r31
    80da:	81 f0       	breq	.+32     	; 0x80fc <__fp_di2sf+0x28>
    80dc:	12 16       	cp	r1, r18
    80de:	13 06       	cpc	r1, r19
    80e0:	14 06       	cpc	r1, r20
    80e2:	44 0b       	sbc	r20, r20
    80e4:	93 95       	inc	r25
    80e6:	f6 95       	lsr	r31
    80e8:	87 95       	ror	r24
    80ea:	77 95       	ror	r23
    80ec:	67 95       	ror	r22
    80ee:	57 95       	ror	r21
    80f0:	40 40       	sbci	r20, 0x00	; 0
    80f2:	ff 23       	and	r31, r31
    80f4:	b9 f7       	brne	.-18     	; 0x80e4 <__fp_di2sf+0x10>
    80f6:	1b c0       	rjmp	.+54     	; 0x812e <__fp_di2sf+0x5a>
    80f8:	99 27       	eor	r25, r25
    80fa:	08 95       	ret
    80fc:	88 23       	and	r24, r24
    80fe:	51 f4       	brne	.+20     	; 0x8114 <__fp_di2sf+0x40>
    8100:	98 50       	subi	r25, 0x08	; 8
    8102:	d2 f7       	brpl	.-12     	; 0x80f8 <__fp_di2sf+0x24>
    8104:	87 2b       	or	r24, r23
    8106:	76 2f       	mov	r23, r22
    8108:	65 2f       	mov	r22, r21
    810a:	54 2f       	mov	r21, r20
    810c:	43 2f       	mov	r20, r19
    810e:	32 2f       	mov	r19, r18
    8110:	20 e0       	ldi	r18, 0x00	; 0
    8112:	b1 f3       	breq	.-20     	; 0x8100 <__fp_di2sf+0x2c>
    8114:	12 16       	cp	r1, r18
    8116:	13 06       	cpc	r1, r19
    8118:	14 06       	cpc	r1, r20
    811a:	44 0b       	sbc	r20, r20
    811c:	88 23       	and	r24, r24
    811e:	3a f0       	brmi	.+14     	; 0x812e <__fp_di2sf+0x5a>
    8120:	9a 95       	dec	r25
    8122:	44 0f       	add	r20, r20
    8124:	55 1f       	adc	r21, r21
    8126:	66 1f       	adc	r22, r22
    8128:	77 1f       	adc	r23, r23
    812a:	88 1f       	adc	r24, r24
    812c:	ca f7       	brpl	.-14     	; 0x8120 <__fp_di2sf+0x4c>
    812e:	55 23       	and	r21, r21
    8130:	4a f4       	brpl	.+18     	; 0x8144 <__fp_di2sf+0x70>
    8132:	44 0f       	add	r20, r20
    8134:	55 1f       	adc	r21, r21
    8136:	11 f4       	brne	.+4      	; 0x813c <__fp_di2sf+0x68>
    8138:	60 ff       	sbrs	r22, 0
    813a:	04 c0       	rjmp	.+8      	; 0x8144 <__fp_di2sf+0x70>
    813c:	6f 5f       	subi	r22, 0xFF	; 255
    813e:	7f 4f       	sbci	r23, 0xFF	; 255
    8140:	8f 4f       	sbci	r24, 0xFF	; 255
    8142:	9f 4f       	sbci	r25, 0xFF	; 255
    8144:	88 0f       	add	r24, r24
    8146:	96 95       	lsr	r25
    8148:	87 95       	ror	r24
    814a:	97 f9       	bld	r25, 7
    814c:	08 95       	ret

0000814e <__fp_inf>:
    814e:	97 f9       	bld	r25, 7
    8150:	9f 67       	ori	r25, 0x7F	; 127
    8152:	80 e8       	ldi	r24, 0x80	; 128
    8154:	70 e0       	ldi	r23, 0x00	; 0
    8156:	60 e0       	ldi	r22, 0x00	; 0
    8158:	08 95       	ret

0000815a <__fp_nan>:
    815a:	9f ef       	ldi	r25, 0xFF	; 255
    815c:	80 ec       	ldi	r24, 0xC0	; 192
    815e:	08 95       	ret

00008160 <__fp_negdi>:
    8160:	90 95       	com	r25
    8162:	80 95       	com	r24
    8164:	70 95       	com	r23
    8166:	60 95       	com	r22
    8168:	50 95       	com	r21
    816a:	40 95       	com	r20
    816c:	30 95       	com	r19
    816e:	21 95       	neg	r18
    8170:	3f 4f       	sbci	r19, 0xFF	; 255
    8172:	4f 4f       	sbci	r20, 0xFF	; 255
    8174:	5f 4f       	sbci	r21, 0xFF	; 255
    8176:	6f 4f       	sbci	r22, 0xFF	; 255
    8178:	7f 4f       	sbci	r23, 0xFF	; 255
    817a:	8f 4f       	sbci	r24, 0xFF	; 255
    817c:	9f 4f       	sbci	r25, 0xFF	; 255
    817e:	08 95       	ret

00008180 <__fp_pscA>:
    8180:	00 24       	eor	r0, r0
    8182:	0a 94       	dec	r0
    8184:	16 16       	cp	r1, r22
    8186:	17 06       	cpc	r1, r23
    8188:	18 06       	cpc	r1, r24
    818a:	09 06       	cpc	r0, r25
    818c:	08 95       	ret

0000818e <__fp_pscB>:
    818e:	00 24       	eor	r0, r0
    8190:	0a 94       	dec	r0
    8192:	12 16       	cp	r1, r18
    8194:	13 06       	cpc	r1, r19
    8196:	14 06       	cpc	r1, r20
    8198:	05 06       	cpc	r0, r21
    819a:	08 95       	ret

0000819c <__fp_round>:
    819c:	09 2e       	mov	r0, r25
    819e:	03 94       	inc	r0
    81a0:	00 0c       	add	r0, r0
    81a2:	11 f4       	brne	.+4      	; 0x81a8 <__fp_round+0xc>
    81a4:	88 23       	and	r24, r24
    81a6:	52 f0       	brmi	.+20     	; 0x81bc <__fp_round+0x20>
    81a8:	bb 0f       	add	r27, r27
    81aa:	40 f4       	brcc	.+16     	; 0x81bc <__fp_round+0x20>
    81ac:	bf 2b       	or	r27, r31
    81ae:	11 f4       	brne	.+4      	; 0x81b4 <__fp_round+0x18>
    81b0:	60 ff       	sbrs	r22, 0
    81b2:	04 c0       	rjmp	.+8      	; 0x81bc <__fp_round+0x20>
    81b4:	6f 5f       	subi	r22, 0xFF	; 255
    81b6:	7f 4f       	sbci	r23, 0xFF	; 255
    81b8:	8f 4f       	sbci	r24, 0xFF	; 255
    81ba:	9f 4f       	sbci	r25, 0xFF	; 255
    81bc:	08 95       	ret

000081be <__fp_split3>:
    81be:	57 fd       	sbrc	r21, 7
    81c0:	90 58       	subi	r25, 0x80	; 128
    81c2:	44 0f       	add	r20, r20
    81c4:	55 1f       	adc	r21, r21
    81c6:	59 f0       	breq	.+22     	; 0x81de <__fp_splitA+0x10>
    81c8:	5f 3f       	cpi	r21, 0xFF	; 255
    81ca:	71 f0       	breq	.+28     	; 0x81e8 <__fp_splitA+0x1a>
    81cc:	47 95       	ror	r20

000081ce <__fp_splitA>:
    81ce:	88 0f       	add	r24, r24
    81d0:	97 fb       	bst	r25, 7
    81d2:	99 1f       	adc	r25, r25
    81d4:	61 f0       	breq	.+24     	; 0x81ee <__fp_splitA+0x20>
    81d6:	9f 3f       	cpi	r25, 0xFF	; 255
    81d8:	79 f0       	breq	.+30     	; 0x81f8 <__fp_splitA+0x2a>
    81da:	87 95       	ror	r24
    81dc:	08 95       	ret
    81de:	12 16       	cp	r1, r18
    81e0:	13 06       	cpc	r1, r19
    81e2:	14 06       	cpc	r1, r20
    81e4:	55 1f       	adc	r21, r21
    81e6:	f2 cf       	rjmp	.-28     	; 0x81cc <__fp_split3+0xe>
    81e8:	46 95       	lsr	r20
    81ea:	f1 df       	rcall	.-30     	; 0x81ce <__fp_splitA>
    81ec:	08 c0       	rjmp	.+16     	; 0x81fe <__fp_splitA+0x30>
    81ee:	16 16       	cp	r1, r22
    81f0:	17 06       	cpc	r1, r23
    81f2:	18 06       	cpc	r1, r24
    81f4:	99 1f       	adc	r25, r25
    81f6:	f1 cf       	rjmp	.-30     	; 0x81da <__fp_splitA+0xc>
    81f8:	86 95       	lsr	r24
    81fa:	71 05       	cpc	r23, r1
    81fc:	61 05       	cpc	r22, r1
    81fe:	08 94       	sec
    8200:	08 95       	ret

00008202 <__fp_zero>:
    8202:	e8 94       	clt

00008204 <__fp_szero>:
    8204:	bb 27       	eor	r27, r27
    8206:	66 27       	eor	r22, r22
    8208:	77 27       	eor	r23, r23
    820a:	cb 01       	movw	r24, r22
    820c:	97 f9       	bld	r25, 7
    820e:	08 95       	ret
    8210:	0e f0       	brts	.+2      	; 0x8214 <__fp_szero+0x10>
    8212:	a6 c0       	rjmp	.+332    	; 0x8360 <__fp_mpack>
    8214:	a2 cf       	rjmp	.-188    	; 0x815a <__fp_nan>
    8216:	68 94       	set
    8218:	9a cf       	rjmp	.-204    	; 0x814e <__fp_inf>

0000821a <log>:
    821a:	d9 df       	rcall	.-78     	; 0x81ce <__fp_splitA>
    821c:	c8 f3       	brcs	.-14     	; 0x8210 <__fp_szero+0xc>
    821e:	99 23       	and	r25, r25
    8220:	d1 f3       	breq	.-12     	; 0x8216 <__fp_szero+0x12>
    8222:	c6 f3       	brts	.-16     	; 0x8214 <__fp_szero+0x10>
    8224:	df 93       	push	r29
    8226:	cf 93       	push	r28
    8228:	1f 93       	push	r17
    822a:	0f 93       	push	r16
    822c:	ff 92       	push	r15
    822e:	c9 2f       	mov	r28, r25
    8230:	dd 27       	eor	r29, r29
    8232:	88 23       	and	r24, r24
    8234:	2a f0       	brmi	.+10     	; 0x8240 <log+0x26>
    8236:	21 97       	sbiw	r28, 0x01	; 1
    8238:	66 0f       	add	r22, r22
    823a:	77 1f       	adc	r23, r23
    823c:	88 1f       	adc	r24, r24
    823e:	da f7       	brpl	.-10     	; 0x8236 <log+0x1c>
    8240:	20 e0       	ldi	r18, 0x00	; 0
    8242:	30 e0       	ldi	r19, 0x00	; 0
    8244:	40 e8       	ldi	r20, 0x80	; 128
    8246:	5f eb       	ldi	r21, 0xBF	; 191
    8248:	9f e3       	ldi	r25, 0x3F	; 63
    824a:	88 39       	cpi	r24, 0x98	; 152
    824c:	20 f0       	brcs	.+8      	; 0x8256 <log+0x3c>
    824e:	80 3e       	cpi	r24, 0xE0	; 224
    8250:	30 f0       	brcs	.+12     	; 0x825e <log+0x44>
    8252:	21 96       	adiw	r28, 0x01	; 1
    8254:	8f 77       	andi	r24, 0x7F	; 127
    8256:	c9 dd       	rcall	.-1134   	; 0x7dea <__addsf3>
    8258:	ec ef       	ldi	r30, 0xFC	; 252
    825a:	f1 e0       	ldi	r31, 0x01	; 1
    825c:	03 c0       	rjmp	.+6      	; 0x8264 <log+0x4a>
    825e:	c5 dd       	rcall	.-1142   	; 0x7dea <__addsf3>
    8260:	e9 e2       	ldi	r30, 0x29	; 41
    8262:	f2 e0       	ldi	r31, 0x02	; 2
    8264:	8b d0       	rcall	.+278    	; 0x837c <__fp_powser>
    8266:	8b 01       	movw	r16, r22
    8268:	be 01       	movw	r22, r28
    826a:	ec 01       	movw	r28, r24
    826c:	fb 2e       	mov	r15, r27
    826e:	6f 57       	subi	r22, 0x7F	; 127
    8270:	71 09       	sbc	r23, r1
    8272:	75 95       	asr	r23
    8274:	77 1f       	adc	r23, r23
    8276:	88 0b       	sbc	r24, r24
    8278:	99 0b       	sbc	r25, r25
    827a:	f0 de       	rcall	.-544    	; 0x805c <__floatsisf>
    827c:	28 e1       	ldi	r18, 0x18	; 24
    827e:	32 e7       	ldi	r19, 0x72	; 114
    8280:	41 e3       	ldi	r20, 0x31	; 49
    8282:	5f e3       	ldi	r21, 0x3F	; 63
    8284:	16 d0       	rcall	.+44     	; 0x82b2 <__mulsf3x>
    8286:	af 2d       	mov	r26, r15
    8288:	98 01       	movw	r18, r16
    828a:	ae 01       	movw	r20, r28
    828c:	ff 90       	pop	r15
    828e:	0f 91       	pop	r16
    8290:	1f 91       	pop	r17
    8292:	cf 91       	pop	r28
    8294:	df 91       	pop	r29
    8296:	ba dd       	rcall	.-1164   	; 0x7e0c <__addsf3x>
    8298:	81 cf       	rjmp	.-254    	; 0x819c <__fp_round>

0000829a <__mulsf3>:
    829a:	0b d0       	rcall	.+22     	; 0x82b2 <__mulsf3x>
    829c:	7f cf       	rjmp	.-258    	; 0x819c <__fp_round>
    829e:	70 df       	rcall	.-288    	; 0x8180 <__fp_pscA>
    82a0:	28 f0       	brcs	.+10     	; 0x82ac <__mulsf3+0x12>
    82a2:	75 df       	rcall	.-278    	; 0x818e <__fp_pscB>
    82a4:	18 f0       	brcs	.+6      	; 0x82ac <__mulsf3+0x12>
    82a6:	95 23       	and	r25, r21
    82a8:	09 f0       	breq	.+2      	; 0x82ac <__mulsf3+0x12>
    82aa:	51 cf       	rjmp	.-350    	; 0x814e <__fp_inf>
    82ac:	56 cf       	rjmp	.-340    	; 0x815a <__fp_nan>
    82ae:	11 24       	eor	r1, r1
    82b0:	a9 cf       	rjmp	.-174    	; 0x8204 <__fp_szero>

000082b2 <__mulsf3x>:
    82b2:	85 df       	rcall	.-246    	; 0x81be <__fp_split3>
    82b4:	a0 f3       	brcs	.-24     	; 0x829e <__mulsf3+0x4>

000082b6 <__mulsf3_pse>:
    82b6:	95 9f       	mul	r25, r21
    82b8:	d1 f3       	breq	.-12     	; 0x82ae <__mulsf3+0x14>
    82ba:	95 0f       	add	r25, r21
    82bc:	50 e0       	ldi	r21, 0x00	; 0
    82be:	55 1f       	adc	r21, r21
    82c0:	62 9f       	mul	r22, r18
    82c2:	f0 01       	movw	r30, r0
    82c4:	72 9f       	mul	r23, r18
    82c6:	bb 27       	eor	r27, r27
    82c8:	f0 0d       	add	r31, r0
    82ca:	b1 1d       	adc	r27, r1
    82cc:	63 9f       	mul	r22, r19
    82ce:	aa 27       	eor	r26, r26
    82d0:	f0 0d       	add	r31, r0
    82d2:	b1 1d       	adc	r27, r1
    82d4:	aa 1f       	adc	r26, r26
    82d6:	64 9f       	mul	r22, r20
    82d8:	66 27       	eor	r22, r22
    82da:	b0 0d       	add	r27, r0
    82dc:	a1 1d       	adc	r26, r1
    82de:	66 1f       	adc	r22, r22
    82e0:	82 9f       	mul	r24, r18
    82e2:	22 27       	eor	r18, r18
    82e4:	b0 0d       	add	r27, r0
    82e6:	a1 1d       	adc	r26, r1
    82e8:	62 1f       	adc	r22, r18
    82ea:	73 9f       	mul	r23, r19
    82ec:	b0 0d       	add	r27, r0
    82ee:	a1 1d       	adc	r26, r1
    82f0:	62 1f       	adc	r22, r18
    82f2:	83 9f       	mul	r24, r19
    82f4:	a0 0d       	add	r26, r0
    82f6:	61 1d       	adc	r22, r1
    82f8:	22 1f       	adc	r18, r18
    82fa:	74 9f       	mul	r23, r20
    82fc:	33 27       	eor	r19, r19
    82fe:	a0 0d       	add	r26, r0
    8300:	61 1d       	adc	r22, r1
    8302:	23 1f       	adc	r18, r19
    8304:	84 9f       	mul	r24, r20
    8306:	60 0d       	add	r22, r0
    8308:	21 1d       	adc	r18, r1
    830a:	82 2f       	mov	r24, r18
    830c:	76 2f       	mov	r23, r22
    830e:	6a 2f       	mov	r22, r26
    8310:	11 24       	eor	r1, r1
    8312:	9f 57       	subi	r25, 0x7F	; 127
    8314:	50 40       	sbci	r21, 0x00	; 0
    8316:	8a f0       	brmi	.+34     	; 0x833a <__mulsf3_pse+0x84>
    8318:	e1 f0       	breq	.+56     	; 0x8352 <__mulsf3_pse+0x9c>
    831a:	88 23       	and	r24, r24
    831c:	4a f0       	brmi	.+18     	; 0x8330 <__mulsf3_pse+0x7a>
    831e:	ee 0f       	add	r30, r30
    8320:	ff 1f       	adc	r31, r31
    8322:	bb 1f       	adc	r27, r27
    8324:	66 1f       	adc	r22, r22
    8326:	77 1f       	adc	r23, r23
    8328:	88 1f       	adc	r24, r24
    832a:	91 50       	subi	r25, 0x01	; 1
    832c:	50 40       	sbci	r21, 0x00	; 0
    832e:	a9 f7       	brne	.-22     	; 0x831a <__mulsf3_pse+0x64>
    8330:	9e 3f       	cpi	r25, 0xFE	; 254
    8332:	51 05       	cpc	r21, r1
    8334:	70 f0       	brcs	.+28     	; 0x8352 <__mulsf3_pse+0x9c>
    8336:	0b cf       	rjmp	.-490    	; 0x814e <__fp_inf>
    8338:	65 cf       	rjmp	.-310    	; 0x8204 <__fp_szero>
    833a:	5f 3f       	cpi	r21, 0xFF	; 255
    833c:	ec f3       	brlt	.-6      	; 0x8338 <__mulsf3_pse+0x82>
    833e:	98 3e       	cpi	r25, 0xE8	; 232
    8340:	dc f3       	brlt	.-10     	; 0x8338 <__mulsf3_pse+0x82>
    8342:	86 95       	lsr	r24
    8344:	77 95       	ror	r23
    8346:	67 95       	ror	r22
    8348:	b7 95       	ror	r27
    834a:	f7 95       	ror	r31
    834c:	e7 95       	ror	r30
    834e:	9f 5f       	subi	r25, 0xFF	; 255
    8350:	c1 f7       	brne	.-16     	; 0x8342 <__mulsf3_pse+0x8c>
    8352:	fe 2b       	or	r31, r30
    8354:	88 0f       	add	r24, r24
    8356:	91 1d       	adc	r25, r1
    8358:	96 95       	lsr	r25
    835a:	87 95       	ror	r24
    835c:	97 f9       	bld	r25, 7
    835e:	08 95       	ret

00008360 <__fp_mpack>:
    8360:	9f 3f       	cpi	r25, 0xFF	; 255
    8362:	31 f0       	breq	.+12     	; 0x8370 <__fp_mpack_finite+0xc>

00008364 <__fp_mpack_finite>:
    8364:	91 50       	subi	r25, 0x01	; 1
    8366:	20 f4       	brcc	.+8      	; 0x8370 <__fp_mpack_finite+0xc>
    8368:	87 95       	ror	r24
    836a:	77 95       	ror	r23
    836c:	67 95       	ror	r22
    836e:	b7 95       	ror	r27
    8370:	88 0f       	add	r24, r24
    8372:	91 1d       	adc	r25, r1
    8374:	96 95       	lsr	r25
    8376:	87 95       	ror	r24
    8378:	97 f9       	bld	r25, 7
    837a:	08 95       	ret

0000837c <__fp_powser>:
    837c:	df 93       	push	r29
    837e:	cf 93       	push	r28
    8380:	1f 93       	push	r17
    8382:	0f 93       	push	r16
    8384:	ff 92       	push	r15
    8386:	ef 92       	push	r14
    8388:	df 92       	push	r13
    838a:	7b 01       	movw	r14, r22
    838c:	8c 01       	movw	r16, r24
    838e:	68 94       	set
    8390:	05 c0       	rjmp	.+10     	; 0x839c <__fp_powser+0x20>
    8392:	da 2e       	mov	r13, r26
    8394:	ef 01       	movw	r28, r30
    8396:	8d df       	rcall	.-230    	; 0x82b2 <__mulsf3x>
    8398:	fe 01       	movw	r30, r28
    839a:	e8 94       	clt
    839c:	a5 91       	lpm	r26, Z+
    839e:	25 91       	lpm	r18, Z+
    83a0:	35 91       	lpm	r19, Z+
    83a2:	45 91       	lpm	r20, Z+
    83a4:	55 91       	lpm	r21, Z+
    83a6:	ae f3       	brts	.-22     	; 0x8392 <__fp_powser+0x16>
    83a8:	ef 01       	movw	r28, r30
    83aa:	30 dd       	rcall	.-1440   	; 0x7e0c <__addsf3x>
    83ac:	fe 01       	movw	r30, r28
    83ae:	97 01       	movw	r18, r14
    83b0:	a8 01       	movw	r20, r16
    83b2:	da 94       	dec	r13
    83b4:	79 f7       	brne	.-34     	; 0x8394 <__fp_powser+0x18>
    83b6:	df 90       	pop	r13
    83b8:	ef 90       	pop	r14
    83ba:	ff 90       	pop	r15
    83bc:	0f 91       	pop	r16
    83be:	1f 91       	pop	r17
    83c0:	cf 91       	pop	r28
    83c2:	df 91       	pop	r29
    83c4:	08 95       	ret

000083c6 <vfprintf>:
    83c6:	2f 92       	push	r2
    83c8:	3f 92       	push	r3
    83ca:	4f 92       	push	r4
    83cc:	5f 92       	push	r5
    83ce:	6f 92       	push	r6
    83d0:	7f 92       	push	r7
    83d2:	8f 92       	push	r8
    83d4:	9f 92       	push	r9
    83d6:	af 92       	push	r10
    83d8:	bf 92       	push	r11
    83da:	cf 92       	push	r12
    83dc:	df 92       	push	r13
    83de:	ef 92       	push	r14
    83e0:	ff 92       	push	r15
    83e2:	0f 93       	push	r16
    83e4:	1f 93       	push	r17
    83e6:	cf 93       	push	r28
    83e8:	df 93       	push	r29
    83ea:	cd b7       	in	r28, 0x3d	; 61
    83ec:	de b7       	in	r29, 0x3e	; 62
    83ee:	60 97       	sbiw	r28, 0x10	; 16
    83f0:	cd bf       	out	0x3d, r28	; 61
    83f2:	de bf       	out	0x3e, r29	; 62
    83f4:	7c 01       	movw	r14, r24
    83f6:	1b 01       	movw	r2, r22
    83f8:	6a 01       	movw	r12, r20
    83fa:	fc 01       	movw	r30, r24
    83fc:	16 82       	std	Z+6, r1	; 0x06
    83fe:	17 82       	std	Z+7, r1	; 0x07
    8400:	83 81       	ldd	r24, Z+3	; 0x03
    8402:	81 ff       	sbrs	r24, 1
    8404:	2a c3       	rjmp	.+1620   	; 0x8a5a <vfprintf+0x694>
    8406:	9e 01       	movw	r18, r28
    8408:	2f 5f       	subi	r18, 0xFF	; 255
    840a:	3f 4f       	sbci	r19, 0xFF	; 255
    840c:	39 01       	movw	r6, r18
    840e:	f7 01       	movw	r30, r14
    8410:	93 81       	ldd	r25, Z+3	; 0x03
    8412:	f1 01       	movw	r30, r2
    8414:	93 fd       	sbrc	r25, 3
    8416:	85 91       	lpm	r24, Z+
    8418:	93 ff       	sbrs	r25, 3
    841a:	81 91       	ld	r24, Z+
    841c:	1f 01       	movw	r2, r30
    841e:	88 23       	and	r24, r24
    8420:	09 f4       	brne	.+2      	; 0x8424 <vfprintf+0x5e>
    8422:	17 c3       	rjmp	.+1582   	; 0x8a52 <vfprintf+0x68c>
    8424:	85 32       	cpi	r24, 0x25	; 37
    8426:	39 f4       	brne	.+14     	; 0x8436 <vfprintf+0x70>
    8428:	93 fd       	sbrc	r25, 3
    842a:	85 91       	lpm	r24, Z+
    842c:	93 ff       	sbrs	r25, 3
    842e:	81 91       	ld	r24, Z+
    8430:	1f 01       	movw	r2, r30
    8432:	85 32       	cpi	r24, 0x25	; 37
    8434:	31 f4       	brne	.+12     	; 0x8442 <vfprintf+0x7c>
    8436:	b7 01       	movw	r22, r14
    8438:	90 e0       	ldi	r25, 0x00	; 0
    843a:	be d6       	rcall	.+3452   	; 0x91b8 <fputc>
    843c:	56 01       	movw	r10, r12
    843e:	65 01       	movw	r12, r10
    8440:	e6 cf       	rjmp	.-52     	; 0x840e <vfprintf+0x48>
    8442:	10 e0       	ldi	r17, 0x00	; 0
    8444:	51 2c       	mov	r5, r1
    8446:	91 2c       	mov	r9, r1
    8448:	ff e1       	ldi	r31, 0x1F	; 31
    844a:	f9 15       	cp	r31, r9
    844c:	d8 f0       	brcs	.+54     	; 0x8484 <vfprintf+0xbe>
    844e:	8b 32       	cpi	r24, 0x2B	; 43
    8450:	79 f0       	breq	.+30     	; 0x8470 <vfprintf+0xaa>
    8452:	38 f4       	brcc	.+14     	; 0x8462 <vfprintf+0x9c>
    8454:	80 32       	cpi	r24, 0x20	; 32
    8456:	79 f0       	breq	.+30     	; 0x8476 <vfprintf+0xb0>
    8458:	83 32       	cpi	r24, 0x23	; 35
    845a:	a1 f4       	brne	.+40     	; 0x8484 <vfprintf+0xbe>
    845c:	f9 2d       	mov	r31, r9
    845e:	f0 61       	ori	r31, 0x10	; 16
    8460:	2e c0       	rjmp	.+92     	; 0x84be <vfprintf+0xf8>
    8462:	8d 32       	cpi	r24, 0x2D	; 45
    8464:	61 f0       	breq	.+24     	; 0x847e <vfprintf+0xb8>
    8466:	80 33       	cpi	r24, 0x30	; 48
    8468:	69 f4       	brne	.+26     	; 0x8484 <vfprintf+0xbe>
    846a:	29 2d       	mov	r18, r9
    846c:	21 60       	ori	r18, 0x01	; 1
    846e:	2d c0       	rjmp	.+90     	; 0x84ca <vfprintf+0x104>
    8470:	39 2d       	mov	r19, r9
    8472:	32 60       	ori	r19, 0x02	; 2
    8474:	93 2e       	mov	r9, r19
    8476:	89 2d       	mov	r24, r9
    8478:	84 60       	ori	r24, 0x04	; 4
    847a:	98 2e       	mov	r9, r24
    847c:	2a c0       	rjmp	.+84     	; 0x84d2 <vfprintf+0x10c>
    847e:	e9 2d       	mov	r30, r9
    8480:	e8 60       	ori	r30, 0x08	; 8
    8482:	15 c0       	rjmp	.+42     	; 0x84ae <vfprintf+0xe8>
    8484:	97 fc       	sbrc	r9, 7
    8486:	2d c0       	rjmp	.+90     	; 0x84e2 <vfprintf+0x11c>
    8488:	20 ed       	ldi	r18, 0xD0	; 208
    848a:	28 0f       	add	r18, r24
    848c:	2a 30       	cpi	r18, 0x0A	; 10
    848e:	88 f4       	brcc	.+34     	; 0x84b2 <vfprintf+0xec>
    8490:	96 fe       	sbrs	r9, 6
    8492:	06 c0       	rjmp	.+12     	; 0x84a0 <vfprintf+0xda>
    8494:	3a e0       	ldi	r19, 0x0A	; 10
    8496:	13 9f       	mul	r17, r19
    8498:	20 0d       	add	r18, r0
    849a:	11 24       	eor	r1, r1
    849c:	12 2f       	mov	r17, r18
    849e:	19 c0       	rjmp	.+50     	; 0x84d2 <vfprintf+0x10c>
    84a0:	8a e0       	ldi	r24, 0x0A	; 10
    84a2:	58 9e       	mul	r5, r24
    84a4:	20 0d       	add	r18, r0
    84a6:	11 24       	eor	r1, r1
    84a8:	52 2e       	mov	r5, r18
    84aa:	e9 2d       	mov	r30, r9
    84ac:	e0 62       	ori	r30, 0x20	; 32
    84ae:	9e 2e       	mov	r9, r30
    84b0:	10 c0       	rjmp	.+32     	; 0x84d2 <vfprintf+0x10c>
    84b2:	8e 32       	cpi	r24, 0x2E	; 46
    84b4:	31 f4       	brne	.+12     	; 0x84c2 <vfprintf+0xfc>
    84b6:	96 fc       	sbrc	r9, 6
    84b8:	cc c2       	rjmp	.+1432   	; 0x8a52 <vfprintf+0x68c>
    84ba:	f9 2d       	mov	r31, r9
    84bc:	f0 64       	ori	r31, 0x40	; 64
    84be:	9f 2e       	mov	r9, r31
    84c0:	08 c0       	rjmp	.+16     	; 0x84d2 <vfprintf+0x10c>
    84c2:	8c 36       	cpi	r24, 0x6C	; 108
    84c4:	21 f4       	brne	.+8      	; 0x84ce <vfprintf+0x108>
    84c6:	29 2d       	mov	r18, r9
    84c8:	20 68       	ori	r18, 0x80	; 128
    84ca:	92 2e       	mov	r9, r18
    84cc:	02 c0       	rjmp	.+4      	; 0x84d2 <vfprintf+0x10c>
    84ce:	88 36       	cpi	r24, 0x68	; 104
    84d0:	41 f4       	brne	.+16     	; 0x84e2 <vfprintf+0x11c>
    84d2:	f1 01       	movw	r30, r2
    84d4:	93 fd       	sbrc	r25, 3
    84d6:	85 91       	lpm	r24, Z+
    84d8:	93 ff       	sbrs	r25, 3
    84da:	81 91       	ld	r24, Z+
    84dc:	1f 01       	movw	r2, r30
    84de:	81 11       	cpse	r24, r1
    84e0:	b3 cf       	rjmp	.-154    	; 0x8448 <vfprintf+0x82>
    84e2:	9b eb       	ldi	r25, 0xBB	; 187
    84e4:	98 0f       	add	r25, r24
    84e6:	93 30       	cpi	r25, 0x03	; 3
    84e8:	20 f4       	brcc	.+8      	; 0x84f2 <vfprintf+0x12c>
    84ea:	99 2d       	mov	r25, r9
    84ec:	90 61       	ori	r25, 0x10	; 16
    84ee:	80 5e       	subi	r24, 0xE0	; 224
    84f0:	07 c0       	rjmp	.+14     	; 0x8500 <vfprintf+0x13a>
    84f2:	9b e9       	ldi	r25, 0x9B	; 155
    84f4:	98 0f       	add	r25, r24
    84f6:	93 30       	cpi	r25, 0x03	; 3
    84f8:	08 f0       	brcs	.+2      	; 0x84fc <vfprintf+0x136>
    84fa:	59 c1       	rjmp	.+690    	; 0x87ae <vfprintf+0x3e8>
    84fc:	99 2d       	mov	r25, r9
    84fe:	9f 7e       	andi	r25, 0xEF	; 239
    8500:	96 ff       	sbrs	r25, 6
    8502:	16 e0       	ldi	r17, 0x06	; 6
    8504:	9f 73       	andi	r25, 0x3F	; 63
    8506:	99 2e       	mov	r9, r25
    8508:	85 36       	cpi	r24, 0x65	; 101
    850a:	19 f4       	brne	.+6      	; 0x8512 <vfprintf+0x14c>
    850c:	90 64       	ori	r25, 0x40	; 64
    850e:	99 2e       	mov	r9, r25
    8510:	08 c0       	rjmp	.+16     	; 0x8522 <vfprintf+0x15c>
    8512:	86 36       	cpi	r24, 0x66	; 102
    8514:	21 f4       	brne	.+8      	; 0x851e <vfprintf+0x158>
    8516:	39 2f       	mov	r19, r25
    8518:	30 68       	ori	r19, 0x80	; 128
    851a:	93 2e       	mov	r9, r19
    851c:	02 c0       	rjmp	.+4      	; 0x8522 <vfprintf+0x15c>
    851e:	11 11       	cpse	r17, r1
    8520:	11 50       	subi	r17, 0x01	; 1
    8522:	97 fe       	sbrs	r9, 7
    8524:	07 c0       	rjmp	.+14     	; 0x8534 <vfprintf+0x16e>
    8526:	1c 33       	cpi	r17, 0x3C	; 60
    8528:	50 f4       	brcc	.+20     	; 0x853e <vfprintf+0x178>
    852a:	44 24       	eor	r4, r4
    852c:	43 94       	inc	r4
    852e:	41 0e       	add	r4, r17
    8530:	27 e0       	ldi	r18, 0x07	; 7
    8532:	0b c0       	rjmp	.+22     	; 0x854a <vfprintf+0x184>
    8534:	18 30       	cpi	r17, 0x08	; 8
    8536:	38 f0       	brcs	.+14     	; 0x8546 <vfprintf+0x180>
    8538:	27 e0       	ldi	r18, 0x07	; 7
    853a:	17 e0       	ldi	r17, 0x07	; 7
    853c:	05 c0       	rjmp	.+10     	; 0x8548 <vfprintf+0x182>
    853e:	27 e0       	ldi	r18, 0x07	; 7
    8540:	9c e3       	ldi	r25, 0x3C	; 60
    8542:	49 2e       	mov	r4, r25
    8544:	02 c0       	rjmp	.+4      	; 0x854a <vfprintf+0x184>
    8546:	21 2f       	mov	r18, r17
    8548:	41 2c       	mov	r4, r1
    854a:	56 01       	movw	r10, r12
    854c:	84 e0       	ldi	r24, 0x04	; 4
    854e:	a8 0e       	add	r10, r24
    8550:	b1 1c       	adc	r11, r1
    8552:	f6 01       	movw	r30, r12
    8554:	60 81       	ld	r22, Z
    8556:	71 81       	ldd	r23, Z+1	; 0x01
    8558:	82 81       	ldd	r24, Z+2	; 0x02
    855a:	93 81       	ldd	r25, Z+3	; 0x03
    855c:	04 2d       	mov	r16, r4
    855e:	a3 01       	movw	r20, r6
    8560:	e1 d4       	rcall	.+2498   	; 0x8f24 <__ftoa_engine>
    8562:	6c 01       	movw	r12, r24
    8564:	f9 81       	ldd	r31, Y+1	; 0x01
    8566:	fc 87       	std	Y+12, r31	; 0x0c
    8568:	f0 ff       	sbrs	r31, 0
    856a:	02 c0       	rjmp	.+4      	; 0x8570 <vfprintf+0x1aa>
    856c:	f3 ff       	sbrs	r31, 3
    856e:	06 c0       	rjmp	.+12     	; 0x857c <vfprintf+0x1b6>
    8570:	91 fc       	sbrc	r9, 1
    8572:	06 c0       	rjmp	.+12     	; 0x8580 <vfprintf+0x1ba>
    8574:	92 fe       	sbrs	r9, 2
    8576:	06 c0       	rjmp	.+12     	; 0x8584 <vfprintf+0x1be>
    8578:	00 e2       	ldi	r16, 0x20	; 32
    857a:	05 c0       	rjmp	.+10     	; 0x8586 <vfprintf+0x1c0>
    857c:	0d e2       	ldi	r16, 0x2D	; 45
    857e:	03 c0       	rjmp	.+6      	; 0x8586 <vfprintf+0x1c0>
    8580:	0b e2       	ldi	r16, 0x2B	; 43
    8582:	01 c0       	rjmp	.+2      	; 0x8586 <vfprintf+0x1c0>
    8584:	00 e0       	ldi	r16, 0x00	; 0
    8586:	8c 85       	ldd	r24, Y+12	; 0x0c
    8588:	8c 70       	andi	r24, 0x0C	; 12
    858a:	19 f0       	breq	.+6      	; 0x8592 <vfprintf+0x1cc>
    858c:	01 11       	cpse	r16, r1
    858e:	43 c2       	rjmp	.+1158   	; 0x8a16 <vfprintf+0x650>
    8590:	80 c2       	rjmp	.+1280   	; 0x8a92 <vfprintf+0x6cc>
    8592:	97 fe       	sbrs	r9, 7
    8594:	10 c0       	rjmp	.+32     	; 0x85b6 <vfprintf+0x1f0>
    8596:	4c 0c       	add	r4, r12
    8598:	fc 85       	ldd	r31, Y+12	; 0x0c
    859a:	f4 ff       	sbrs	r31, 4
    859c:	04 c0       	rjmp	.+8      	; 0x85a6 <vfprintf+0x1e0>
    859e:	8a 81       	ldd	r24, Y+2	; 0x02
    85a0:	81 33       	cpi	r24, 0x31	; 49
    85a2:	09 f4       	brne	.+2      	; 0x85a6 <vfprintf+0x1e0>
    85a4:	4a 94       	dec	r4
    85a6:	14 14       	cp	r1, r4
    85a8:	74 f5       	brge	.+92     	; 0x8606 <vfprintf+0x240>
    85aa:	28 e0       	ldi	r18, 0x08	; 8
    85ac:	24 15       	cp	r18, r4
    85ae:	78 f5       	brcc	.+94     	; 0x860e <vfprintf+0x248>
    85b0:	88 e0       	ldi	r24, 0x08	; 8
    85b2:	48 2e       	mov	r4, r24
    85b4:	2c c0       	rjmp	.+88     	; 0x860e <vfprintf+0x248>
    85b6:	96 fc       	sbrc	r9, 6
    85b8:	2a c0       	rjmp	.+84     	; 0x860e <vfprintf+0x248>
    85ba:	81 2f       	mov	r24, r17
    85bc:	90 e0       	ldi	r25, 0x00	; 0
    85be:	8c 15       	cp	r24, r12
    85c0:	9d 05       	cpc	r25, r13
    85c2:	9c f0       	brlt	.+38     	; 0x85ea <vfprintf+0x224>
    85c4:	3c ef       	ldi	r19, 0xFC	; 252
    85c6:	c3 16       	cp	r12, r19
    85c8:	3f ef       	ldi	r19, 0xFF	; 255
    85ca:	d3 06       	cpc	r13, r19
    85cc:	74 f0       	brlt	.+28     	; 0x85ea <vfprintf+0x224>
    85ce:	89 2d       	mov	r24, r9
    85d0:	80 68       	ori	r24, 0x80	; 128
    85d2:	98 2e       	mov	r9, r24
    85d4:	0a c0       	rjmp	.+20     	; 0x85ea <vfprintf+0x224>
    85d6:	e2 e0       	ldi	r30, 0x02	; 2
    85d8:	f0 e0       	ldi	r31, 0x00	; 0
    85da:	ec 0f       	add	r30, r28
    85dc:	fd 1f       	adc	r31, r29
    85de:	e1 0f       	add	r30, r17
    85e0:	f1 1d       	adc	r31, r1
    85e2:	80 81       	ld	r24, Z
    85e4:	80 33       	cpi	r24, 0x30	; 48
    85e6:	19 f4       	brne	.+6      	; 0x85ee <vfprintf+0x228>
    85e8:	11 50       	subi	r17, 0x01	; 1
    85ea:	11 11       	cpse	r17, r1
    85ec:	f4 cf       	rjmp	.-24     	; 0x85d6 <vfprintf+0x210>
    85ee:	97 fe       	sbrs	r9, 7
    85f0:	0e c0       	rjmp	.+28     	; 0x860e <vfprintf+0x248>
    85f2:	44 24       	eor	r4, r4
    85f4:	43 94       	inc	r4
    85f6:	41 0e       	add	r4, r17
    85f8:	81 2f       	mov	r24, r17
    85fa:	90 e0       	ldi	r25, 0x00	; 0
    85fc:	c8 16       	cp	r12, r24
    85fe:	d9 06       	cpc	r13, r25
    8600:	2c f4       	brge	.+10     	; 0x860c <vfprintf+0x246>
    8602:	1c 19       	sub	r17, r12
    8604:	04 c0       	rjmp	.+8      	; 0x860e <vfprintf+0x248>
    8606:	44 24       	eor	r4, r4
    8608:	43 94       	inc	r4
    860a:	01 c0       	rjmp	.+2      	; 0x860e <vfprintf+0x248>
    860c:	10 e0       	ldi	r17, 0x00	; 0
    860e:	97 fe       	sbrs	r9, 7
    8610:	06 c0       	rjmp	.+12     	; 0x861e <vfprintf+0x258>
    8612:	1c 14       	cp	r1, r12
    8614:	1d 04       	cpc	r1, r13
    8616:	34 f4       	brge	.+12     	; 0x8624 <vfprintf+0x25e>
    8618:	c6 01       	movw	r24, r12
    861a:	01 96       	adiw	r24, 0x01	; 1
    861c:	05 c0       	rjmp	.+10     	; 0x8628 <vfprintf+0x262>
    861e:	85 e0       	ldi	r24, 0x05	; 5
    8620:	90 e0       	ldi	r25, 0x00	; 0
    8622:	02 c0       	rjmp	.+4      	; 0x8628 <vfprintf+0x262>
    8624:	81 e0       	ldi	r24, 0x01	; 1
    8626:	90 e0       	ldi	r25, 0x00	; 0
    8628:	01 11       	cpse	r16, r1
    862a:	01 96       	adiw	r24, 0x01	; 1
    862c:	11 23       	and	r17, r17
    862e:	31 f0       	breq	.+12     	; 0x863c <vfprintf+0x276>
    8630:	21 2f       	mov	r18, r17
    8632:	30 e0       	ldi	r19, 0x00	; 0
    8634:	2f 5f       	subi	r18, 0xFF	; 255
    8636:	3f 4f       	sbci	r19, 0xFF	; 255
    8638:	82 0f       	add	r24, r18
    863a:	93 1f       	adc	r25, r19
    863c:	25 2d       	mov	r18, r5
    863e:	30 e0       	ldi	r19, 0x00	; 0
    8640:	82 17       	cp	r24, r18
    8642:	93 07       	cpc	r25, r19
    8644:	14 f4       	brge	.+4      	; 0x864a <vfprintf+0x284>
    8646:	58 1a       	sub	r5, r24
    8648:	01 c0       	rjmp	.+2      	; 0x864c <vfprintf+0x286>
    864a:	51 2c       	mov	r5, r1
    864c:	89 2d       	mov	r24, r9
    864e:	89 70       	andi	r24, 0x09	; 9
    8650:	41 f4       	brne	.+16     	; 0x8662 <vfprintf+0x29c>
    8652:	55 20       	and	r5, r5
    8654:	31 f0       	breq	.+12     	; 0x8662 <vfprintf+0x29c>
    8656:	b7 01       	movw	r22, r14
    8658:	80 e2       	ldi	r24, 0x20	; 32
    865a:	90 e0       	ldi	r25, 0x00	; 0
    865c:	ad d5       	rcall	.+2906   	; 0x91b8 <fputc>
    865e:	5a 94       	dec	r5
    8660:	f8 cf       	rjmp	.-16     	; 0x8652 <vfprintf+0x28c>
    8662:	00 23       	and	r16, r16
    8664:	21 f0       	breq	.+8      	; 0x866e <vfprintf+0x2a8>
    8666:	b7 01       	movw	r22, r14
    8668:	80 2f       	mov	r24, r16
    866a:	90 e0       	ldi	r25, 0x00	; 0
    866c:	a5 d5       	rcall	.+2890   	; 0x91b8 <fputc>
    866e:	93 fc       	sbrc	r9, 3
    8670:	08 c0       	rjmp	.+16     	; 0x8682 <vfprintf+0x2bc>
    8672:	55 20       	and	r5, r5
    8674:	31 f0       	breq	.+12     	; 0x8682 <vfprintf+0x2bc>
    8676:	b7 01       	movw	r22, r14
    8678:	80 e3       	ldi	r24, 0x30	; 48
    867a:	90 e0       	ldi	r25, 0x00	; 0
    867c:	9d d5       	rcall	.+2874   	; 0x91b8 <fputc>
    867e:	5a 94       	dec	r5
    8680:	f8 cf       	rjmp	.-16     	; 0x8672 <vfprintf+0x2ac>
    8682:	97 fe       	sbrs	r9, 7
    8684:	4a c0       	rjmp	.+148    	; 0x871a <vfprintf+0x354>
    8686:	46 01       	movw	r8, r12
    8688:	d7 fe       	sbrs	r13, 7
    868a:	02 c0       	rjmp	.+4      	; 0x8690 <vfprintf+0x2ca>
    868c:	81 2c       	mov	r8, r1
    868e:	91 2c       	mov	r9, r1
    8690:	c6 01       	movw	r24, r12
    8692:	88 19       	sub	r24, r8
    8694:	99 09       	sbc	r25, r9
    8696:	f3 01       	movw	r30, r6
    8698:	e8 0f       	add	r30, r24
    869a:	f9 1f       	adc	r31, r25
    869c:	ed 87       	std	Y+13, r30	; 0x0d
    869e:	fe 87       	std	Y+14, r31	; 0x0e
    86a0:	96 01       	movw	r18, r12
    86a2:	24 19       	sub	r18, r4
    86a4:	31 09       	sbc	r19, r1
    86a6:	2f 87       	std	Y+15, r18	; 0x0f
    86a8:	38 8b       	std	Y+16, r19	; 0x10
    86aa:	01 2f       	mov	r16, r17
    86ac:	10 e0       	ldi	r17, 0x00	; 0
    86ae:	11 95       	neg	r17
    86b0:	01 95       	neg	r16
    86b2:	11 09       	sbc	r17, r1
    86b4:	3f ef       	ldi	r19, 0xFF	; 255
    86b6:	83 16       	cp	r8, r19
    86b8:	93 06       	cpc	r9, r19
    86ba:	21 f4       	brne	.+8      	; 0x86c4 <vfprintf+0x2fe>
    86bc:	b7 01       	movw	r22, r14
    86be:	8e e2       	ldi	r24, 0x2E	; 46
    86c0:	90 e0       	ldi	r25, 0x00	; 0
    86c2:	7a d5       	rcall	.+2804   	; 0x91b8 <fputc>
    86c4:	c8 14       	cp	r12, r8
    86c6:	d9 04       	cpc	r13, r9
    86c8:	4c f0       	brlt	.+18     	; 0x86dc <vfprintf+0x316>
    86ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    86cc:	98 89       	ldd	r25, Y+16	; 0x10
    86ce:	88 15       	cp	r24, r8
    86d0:	99 05       	cpc	r25, r9
    86d2:	24 f4       	brge	.+8      	; 0x86dc <vfprintf+0x316>
    86d4:	ed 85       	ldd	r30, Y+13	; 0x0d
    86d6:	fe 85       	ldd	r31, Y+14	; 0x0e
    86d8:	81 81       	ldd	r24, Z+1	; 0x01
    86da:	01 c0       	rjmp	.+2      	; 0x86de <vfprintf+0x318>
    86dc:	80 e3       	ldi	r24, 0x30	; 48
    86de:	f1 e0       	ldi	r31, 0x01	; 1
    86e0:	8f 1a       	sub	r8, r31
    86e2:	91 08       	sbc	r9, r1
    86e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    86e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    86e8:	2f 5f       	subi	r18, 0xFF	; 255
    86ea:	3f 4f       	sbci	r19, 0xFF	; 255
    86ec:	2d 87       	std	Y+13, r18	; 0x0d
    86ee:	3e 87       	std	Y+14, r19	; 0x0e
    86f0:	80 16       	cp	r8, r16
    86f2:	91 06       	cpc	r9, r17
    86f4:	24 f0       	brlt	.+8      	; 0x86fe <vfprintf+0x338>
    86f6:	b7 01       	movw	r22, r14
    86f8:	90 e0       	ldi	r25, 0x00	; 0
    86fa:	5e d5       	rcall	.+2748   	; 0x91b8 <fputc>
    86fc:	db cf       	rjmp	.-74     	; 0x86b4 <vfprintf+0x2ee>
    86fe:	c8 14       	cp	r12, r8
    8700:	d9 04       	cpc	r13, r9
    8702:	41 f4       	brne	.+16     	; 0x8714 <vfprintf+0x34e>
    8704:	9a 81       	ldd	r25, Y+2	; 0x02
    8706:	96 33       	cpi	r25, 0x36	; 54
    8708:	20 f4       	brcc	.+8      	; 0x8712 <vfprintf+0x34c>
    870a:	95 33       	cpi	r25, 0x35	; 53
    870c:	19 f4       	brne	.+6      	; 0x8714 <vfprintf+0x34e>
    870e:	3c 85       	ldd	r19, Y+12	; 0x0c
    8710:	34 ff       	sbrs	r19, 4
    8712:	81 e3       	ldi	r24, 0x31	; 49
    8714:	b7 01       	movw	r22, r14
    8716:	90 e0       	ldi	r25, 0x00	; 0
    8718:	48 c0       	rjmp	.+144    	; 0x87aa <vfprintf+0x3e4>
    871a:	8a 81       	ldd	r24, Y+2	; 0x02
    871c:	81 33       	cpi	r24, 0x31	; 49
    871e:	19 f0       	breq	.+6      	; 0x8726 <vfprintf+0x360>
    8720:	9c 85       	ldd	r25, Y+12	; 0x0c
    8722:	9f 7e       	andi	r25, 0xEF	; 239
    8724:	9c 87       	std	Y+12, r25	; 0x0c
    8726:	b7 01       	movw	r22, r14
    8728:	90 e0       	ldi	r25, 0x00	; 0
    872a:	46 d5       	rcall	.+2700   	; 0x91b8 <fputc>
    872c:	11 11       	cpse	r17, r1
    872e:	05 c0       	rjmp	.+10     	; 0x873a <vfprintf+0x374>
    8730:	94 fc       	sbrc	r9, 4
    8732:	16 c0       	rjmp	.+44     	; 0x8760 <vfprintf+0x39a>
    8734:	85 e6       	ldi	r24, 0x65	; 101
    8736:	90 e0       	ldi	r25, 0x00	; 0
    8738:	15 c0       	rjmp	.+42     	; 0x8764 <vfprintf+0x39e>
    873a:	b7 01       	movw	r22, r14
    873c:	8e e2       	ldi	r24, 0x2E	; 46
    873e:	90 e0       	ldi	r25, 0x00	; 0
    8740:	3b d5       	rcall	.+2678   	; 0x91b8 <fputc>
    8742:	1e 5f       	subi	r17, 0xFE	; 254
    8744:	82 e0       	ldi	r24, 0x02	; 2
    8746:	01 e0       	ldi	r16, 0x01	; 1
    8748:	08 0f       	add	r16, r24
    874a:	f3 01       	movw	r30, r6
    874c:	e8 0f       	add	r30, r24
    874e:	f1 1d       	adc	r31, r1
    8750:	80 81       	ld	r24, Z
    8752:	b7 01       	movw	r22, r14
    8754:	90 e0       	ldi	r25, 0x00	; 0
    8756:	30 d5       	rcall	.+2656   	; 0x91b8 <fputc>
    8758:	80 2f       	mov	r24, r16
    875a:	01 13       	cpse	r16, r17
    875c:	f4 cf       	rjmp	.-24     	; 0x8746 <vfprintf+0x380>
    875e:	e8 cf       	rjmp	.-48     	; 0x8730 <vfprintf+0x36a>
    8760:	85 e4       	ldi	r24, 0x45	; 69
    8762:	90 e0       	ldi	r25, 0x00	; 0
    8764:	b7 01       	movw	r22, r14
    8766:	28 d5       	rcall	.+2640   	; 0x91b8 <fputc>
    8768:	d7 fc       	sbrc	r13, 7
    876a:	06 c0       	rjmp	.+12     	; 0x8778 <vfprintf+0x3b2>
    876c:	c1 14       	cp	r12, r1
    876e:	d1 04       	cpc	r13, r1
    8770:	41 f4       	brne	.+16     	; 0x8782 <vfprintf+0x3bc>
    8772:	ec 85       	ldd	r30, Y+12	; 0x0c
    8774:	e4 ff       	sbrs	r30, 4
    8776:	05 c0       	rjmp	.+10     	; 0x8782 <vfprintf+0x3bc>
    8778:	d1 94       	neg	r13
    877a:	c1 94       	neg	r12
    877c:	d1 08       	sbc	r13, r1
    877e:	8d e2       	ldi	r24, 0x2D	; 45
    8780:	01 c0       	rjmp	.+2      	; 0x8784 <vfprintf+0x3be>
    8782:	8b e2       	ldi	r24, 0x2B	; 43
    8784:	b7 01       	movw	r22, r14
    8786:	90 e0       	ldi	r25, 0x00	; 0
    8788:	17 d5       	rcall	.+2606   	; 0x91b8 <fputc>
    878a:	80 e3       	ldi	r24, 0x30	; 48
    878c:	2a e0       	ldi	r18, 0x0A	; 10
    878e:	c2 16       	cp	r12, r18
    8790:	d1 04       	cpc	r13, r1
    8792:	2c f0       	brlt	.+10     	; 0x879e <vfprintf+0x3d8>
    8794:	8f 5f       	subi	r24, 0xFF	; 255
    8796:	fa e0       	ldi	r31, 0x0A	; 10
    8798:	cf 1a       	sub	r12, r31
    879a:	d1 08       	sbc	r13, r1
    879c:	f7 cf       	rjmp	.-18     	; 0x878c <vfprintf+0x3c6>
    879e:	b7 01       	movw	r22, r14
    87a0:	90 e0       	ldi	r25, 0x00	; 0
    87a2:	0a d5       	rcall	.+2580   	; 0x91b8 <fputc>
    87a4:	b7 01       	movw	r22, r14
    87a6:	c6 01       	movw	r24, r12
    87a8:	c0 96       	adiw	r24, 0x30	; 48
    87aa:	06 d5       	rcall	.+2572   	; 0x91b8 <fputc>
    87ac:	49 c1       	rjmp	.+658    	; 0x8a40 <vfprintf+0x67a>
    87ae:	83 36       	cpi	r24, 0x63	; 99
    87b0:	31 f0       	breq	.+12     	; 0x87be <vfprintf+0x3f8>
    87b2:	83 37       	cpi	r24, 0x73	; 115
    87b4:	79 f0       	breq	.+30     	; 0x87d4 <vfprintf+0x40e>
    87b6:	83 35       	cpi	r24, 0x53	; 83
    87b8:	09 f0       	breq	.+2      	; 0x87bc <vfprintf+0x3f6>
    87ba:	52 c0       	rjmp	.+164    	; 0x8860 <vfprintf+0x49a>
    87bc:	1f c0       	rjmp	.+62     	; 0x87fc <vfprintf+0x436>
    87be:	56 01       	movw	r10, r12
    87c0:	32 e0       	ldi	r19, 0x02	; 2
    87c2:	a3 0e       	add	r10, r19
    87c4:	b1 1c       	adc	r11, r1
    87c6:	f6 01       	movw	r30, r12
    87c8:	80 81       	ld	r24, Z
    87ca:	89 83       	std	Y+1, r24	; 0x01
    87cc:	01 e0       	ldi	r16, 0x01	; 1
    87ce:	10 e0       	ldi	r17, 0x00	; 0
    87d0:	63 01       	movw	r12, r6
    87d2:	11 c0       	rjmp	.+34     	; 0x87f6 <vfprintf+0x430>
    87d4:	56 01       	movw	r10, r12
    87d6:	f2 e0       	ldi	r31, 0x02	; 2
    87d8:	af 0e       	add	r10, r31
    87da:	b1 1c       	adc	r11, r1
    87dc:	f6 01       	movw	r30, r12
    87de:	c0 80       	ld	r12, Z
    87e0:	d1 80       	ldd	r13, Z+1	; 0x01
    87e2:	96 fe       	sbrs	r9, 6
    87e4:	03 c0       	rjmp	.+6      	; 0x87ec <vfprintf+0x426>
    87e6:	61 2f       	mov	r22, r17
    87e8:	70 e0       	ldi	r23, 0x00	; 0
    87ea:	02 c0       	rjmp	.+4      	; 0x87f0 <vfprintf+0x42a>
    87ec:	6f ef       	ldi	r22, 0xFF	; 255
    87ee:	7f ef       	ldi	r23, 0xFF	; 255
    87f0:	c6 01       	movw	r24, r12
    87f2:	8d d4       	rcall	.+2330   	; 0x910e <strnlen>
    87f4:	8c 01       	movw	r16, r24
    87f6:	f9 2d       	mov	r31, r9
    87f8:	ff 77       	andi	r31, 0x7F	; 127
    87fa:	13 c0       	rjmp	.+38     	; 0x8822 <vfprintf+0x45c>
    87fc:	56 01       	movw	r10, r12
    87fe:	22 e0       	ldi	r18, 0x02	; 2
    8800:	a2 0e       	add	r10, r18
    8802:	b1 1c       	adc	r11, r1
    8804:	f6 01       	movw	r30, r12
    8806:	c0 80       	ld	r12, Z
    8808:	d1 80       	ldd	r13, Z+1	; 0x01
    880a:	96 fe       	sbrs	r9, 6
    880c:	03 c0       	rjmp	.+6      	; 0x8814 <vfprintf+0x44e>
    880e:	61 2f       	mov	r22, r17
    8810:	70 e0       	ldi	r23, 0x00	; 0
    8812:	02 c0       	rjmp	.+4      	; 0x8818 <vfprintf+0x452>
    8814:	6f ef       	ldi	r22, 0xFF	; 255
    8816:	7f ef       	ldi	r23, 0xFF	; 255
    8818:	c6 01       	movw	r24, r12
    881a:	5c d4       	rcall	.+2232   	; 0x90d4 <strnlen_P>
    881c:	8c 01       	movw	r16, r24
    881e:	f9 2d       	mov	r31, r9
    8820:	f0 68       	ori	r31, 0x80	; 128
    8822:	9f 2e       	mov	r9, r31
    8824:	f3 fd       	sbrc	r31, 3
    8826:	18 c0       	rjmp	.+48     	; 0x8858 <vfprintf+0x492>
    8828:	85 2d       	mov	r24, r5
    882a:	90 e0       	ldi	r25, 0x00	; 0
    882c:	08 17       	cp	r16, r24
    882e:	19 07       	cpc	r17, r25
    8830:	98 f4       	brcc	.+38     	; 0x8858 <vfprintf+0x492>
    8832:	b7 01       	movw	r22, r14
    8834:	80 e2       	ldi	r24, 0x20	; 32
    8836:	90 e0       	ldi	r25, 0x00	; 0
    8838:	bf d4       	rcall	.+2430   	; 0x91b8 <fputc>
    883a:	5a 94       	dec	r5
    883c:	f5 cf       	rjmp	.-22     	; 0x8828 <vfprintf+0x462>
    883e:	f6 01       	movw	r30, r12
    8840:	97 fc       	sbrc	r9, 7
    8842:	85 91       	lpm	r24, Z+
    8844:	97 fe       	sbrs	r9, 7
    8846:	81 91       	ld	r24, Z+
    8848:	6f 01       	movw	r12, r30
    884a:	b7 01       	movw	r22, r14
    884c:	90 e0       	ldi	r25, 0x00	; 0
    884e:	b4 d4       	rcall	.+2408   	; 0x91b8 <fputc>
    8850:	51 10       	cpse	r5, r1
    8852:	5a 94       	dec	r5
    8854:	01 50       	subi	r16, 0x01	; 1
    8856:	11 09       	sbc	r17, r1
    8858:	01 15       	cp	r16, r1
    885a:	11 05       	cpc	r17, r1
    885c:	81 f7       	brne	.-32     	; 0x883e <vfprintf+0x478>
    885e:	f0 c0       	rjmp	.+480    	; 0x8a40 <vfprintf+0x67a>
    8860:	84 36       	cpi	r24, 0x64	; 100
    8862:	11 f0       	breq	.+4      	; 0x8868 <vfprintf+0x4a2>
    8864:	89 36       	cpi	r24, 0x69	; 105
    8866:	59 f5       	brne	.+86     	; 0x88be <vfprintf+0x4f8>
    8868:	56 01       	movw	r10, r12
    886a:	97 fe       	sbrs	r9, 7
    886c:	09 c0       	rjmp	.+18     	; 0x8880 <vfprintf+0x4ba>
    886e:	24 e0       	ldi	r18, 0x04	; 4
    8870:	a2 0e       	add	r10, r18
    8872:	b1 1c       	adc	r11, r1
    8874:	f6 01       	movw	r30, r12
    8876:	60 81       	ld	r22, Z
    8878:	71 81       	ldd	r23, Z+1	; 0x01
    887a:	82 81       	ldd	r24, Z+2	; 0x02
    887c:	93 81       	ldd	r25, Z+3	; 0x03
    887e:	0a c0       	rjmp	.+20     	; 0x8894 <vfprintf+0x4ce>
    8880:	f2 e0       	ldi	r31, 0x02	; 2
    8882:	af 0e       	add	r10, r31
    8884:	b1 1c       	adc	r11, r1
    8886:	f6 01       	movw	r30, r12
    8888:	60 81       	ld	r22, Z
    888a:	71 81       	ldd	r23, Z+1	; 0x01
    888c:	07 2e       	mov	r0, r23
    888e:	00 0c       	add	r0, r0
    8890:	88 0b       	sbc	r24, r24
    8892:	99 0b       	sbc	r25, r25
    8894:	f9 2d       	mov	r31, r9
    8896:	ff 76       	andi	r31, 0x6F	; 111
    8898:	9f 2e       	mov	r9, r31
    889a:	97 ff       	sbrs	r25, 7
    889c:	09 c0       	rjmp	.+18     	; 0x88b0 <vfprintf+0x4ea>
    889e:	90 95       	com	r25
    88a0:	80 95       	com	r24
    88a2:	70 95       	com	r23
    88a4:	61 95       	neg	r22
    88a6:	7f 4f       	sbci	r23, 0xFF	; 255
    88a8:	8f 4f       	sbci	r24, 0xFF	; 255
    88aa:	9f 4f       	sbci	r25, 0xFF	; 255
    88ac:	f0 68       	ori	r31, 0x80	; 128
    88ae:	9f 2e       	mov	r9, r31
    88b0:	2a e0       	ldi	r18, 0x0A	; 10
    88b2:	30 e0       	ldi	r19, 0x00	; 0
    88b4:	a3 01       	movw	r20, r6
    88b6:	27 d5       	rcall	.+2638   	; 0x9306 <__ultoa_invert>
    88b8:	c8 2e       	mov	r12, r24
    88ba:	c6 18       	sub	r12, r6
    88bc:	3e c0       	rjmp	.+124    	; 0x893a <vfprintf+0x574>
    88be:	09 2d       	mov	r16, r9
    88c0:	85 37       	cpi	r24, 0x75	; 117
    88c2:	21 f4       	brne	.+8      	; 0x88cc <vfprintf+0x506>
    88c4:	0f 7e       	andi	r16, 0xEF	; 239
    88c6:	2a e0       	ldi	r18, 0x0A	; 10
    88c8:	30 e0       	ldi	r19, 0x00	; 0
    88ca:	1d c0       	rjmp	.+58     	; 0x8906 <vfprintf+0x540>
    88cc:	09 7f       	andi	r16, 0xF9	; 249
    88ce:	8f 36       	cpi	r24, 0x6F	; 111
    88d0:	91 f0       	breq	.+36     	; 0x88f6 <vfprintf+0x530>
    88d2:	18 f4       	brcc	.+6      	; 0x88da <vfprintf+0x514>
    88d4:	88 35       	cpi	r24, 0x58	; 88
    88d6:	59 f0       	breq	.+22     	; 0x88ee <vfprintf+0x528>
    88d8:	bc c0       	rjmp	.+376    	; 0x8a52 <vfprintf+0x68c>
    88da:	80 37       	cpi	r24, 0x70	; 112
    88dc:	19 f0       	breq	.+6      	; 0x88e4 <vfprintf+0x51e>
    88de:	88 37       	cpi	r24, 0x78	; 120
    88e0:	11 f0       	breq	.+4      	; 0x88e6 <vfprintf+0x520>
    88e2:	b7 c0       	rjmp	.+366    	; 0x8a52 <vfprintf+0x68c>
    88e4:	00 61       	ori	r16, 0x10	; 16
    88e6:	04 ff       	sbrs	r16, 4
    88e8:	09 c0       	rjmp	.+18     	; 0x88fc <vfprintf+0x536>
    88ea:	04 60       	ori	r16, 0x04	; 4
    88ec:	07 c0       	rjmp	.+14     	; 0x88fc <vfprintf+0x536>
    88ee:	94 fe       	sbrs	r9, 4
    88f0:	08 c0       	rjmp	.+16     	; 0x8902 <vfprintf+0x53c>
    88f2:	06 60       	ori	r16, 0x06	; 6
    88f4:	06 c0       	rjmp	.+12     	; 0x8902 <vfprintf+0x53c>
    88f6:	28 e0       	ldi	r18, 0x08	; 8
    88f8:	30 e0       	ldi	r19, 0x00	; 0
    88fa:	05 c0       	rjmp	.+10     	; 0x8906 <vfprintf+0x540>
    88fc:	20 e1       	ldi	r18, 0x10	; 16
    88fe:	30 e0       	ldi	r19, 0x00	; 0
    8900:	02 c0       	rjmp	.+4      	; 0x8906 <vfprintf+0x540>
    8902:	20 e1       	ldi	r18, 0x10	; 16
    8904:	32 e0       	ldi	r19, 0x02	; 2
    8906:	56 01       	movw	r10, r12
    8908:	07 ff       	sbrs	r16, 7
    890a:	09 c0       	rjmp	.+18     	; 0x891e <vfprintf+0x558>
    890c:	84 e0       	ldi	r24, 0x04	; 4
    890e:	a8 0e       	add	r10, r24
    8910:	b1 1c       	adc	r11, r1
    8912:	f6 01       	movw	r30, r12
    8914:	60 81       	ld	r22, Z
    8916:	71 81       	ldd	r23, Z+1	; 0x01
    8918:	82 81       	ldd	r24, Z+2	; 0x02
    891a:	93 81       	ldd	r25, Z+3	; 0x03
    891c:	08 c0       	rjmp	.+16     	; 0x892e <vfprintf+0x568>
    891e:	f2 e0       	ldi	r31, 0x02	; 2
    8920:	af 0e       	add	r10, r31
    8922:	b1 1c       	adc	r11, r1
    8924:	f6 01       	movw	r30, r12
    8926:	60 81       	ld	r22, Z
    8928:	71 81       	ldd	r23, Z+1	; 0x01
    892a:	80 e0       	ldi	r24, 0x00	; 0
    892c:	90 e0       	ldi	r25, 0x00	; 0
    892e:	a3 01       	movw	r20, r6
    8930:	ea d4       	rcall	.+2516   	; 0x9306 <__ultoa_invert>
    8932:	c8 2e       	mov	r12, r24
    8934:	c6 18       	sub	r12, r6
    8936:	0f 77       	andi	r16, 0x7F	; 127
    8938:	90 2e       	mov	r9, r16
    893a:	96 fe       	sbrs	r9, 6
    893c:	0b c0       	rjmp	.+22     	; 0x8954 <vfprintf+0x58e>
    893e:	09 2d       	mov	r16, r9
    8940:	0e 7f       	andi	r16, 0xFE	; 254
    8942:	c1 16       	cp	r12, r17
    8944:	50 f4       	brcc	.+20     	; 0x895a <vfprintf+0x594>
    8946:	94 fe       	sbrs	r9, 4
    8948:	0a c0       	rjmp	.+20     	; 0x895e <vfprintf+0x598>
    894a:	92 fc       	sbrc	r9, 2
    894c:	08 c0       	rjmp	.+16     	; 0x895e <vfprintf+0x598>
    894e:	09 2d       	mov	r16, r9
    8950:	0e 7e       	andi	r16, 0xEE	; 238
    8952:	05 c0       	rjmp	.+10     	; 0x895e <vfprintf+0x598>
    8954:	dc 2c       	mov	r13, r12
    8956:	09 2d       	mov	r16, r9
    8958:	03 c0       	rjmp	.+6      	; 0x8960 <vfprintf+0x59a>
    895a:	dc 2c       	mov	r13, r12
    895c:	01 c0       	rjmp	.+2      	; 0x8960 <vfprintf+0x59a>
    895e:	d1 2e       	mov	r13, r17
    8960:	04 ff       	sbrs	r16, 4
    8962:	0d c0       	rjmp	.+26     	; 0x897e <vfprintf+0x5b8>
    8964:	fe 01       	movw	r30, r28
    8966:	ec 0d       	add	r30, r12
    8968:	f1 1d       	adc	r31, r1
    896a:	80 81       	ld	r24, Z
    896c:	80 33       	cpi	r24, 0x30	; 48
    896e:	11 f4       	brne	.+4      	; 0x8974 <vfprintf+0x5ae>
    8970:	09 7e       	andi	r16, 0xE9	; 233
    8972:	09 c0       	rjmp	.+18     	; 0x8986 <vfprintf+0x5c0>
    8974:	02 ff       	sbrs	r16, 2
    8976:	06 c0       	rjmp	.+12     	; 0x8984 <vfprintf+0x5be>
    8978:	d3 94       	inc	r13
    897a:	d3 94       	inc	r13
    897c:	04 c0       	rjmp	.+8      	; 0x8986 <vfprintf+0x5c0>
    897e:	80 2f       	mov	r24, r16
    8980:	86 78       	andi	r24, 0x86	; 134
    8982:	09 f0       	breq	.+2      	; 0x8986 <vfprintf+0x5c0>
    8984:	d3 94       	inc	r13
    8986:	03 fd       	sbrc	r16, 3
    8988:	10 c0       	rjmp	.+32     	; 0x89aa <vfprintf+0x5e4>
    898a:	00 ff       	sbrs	r16, 0
    898c:	06 c0       	rjmp	.+12     	; 0x899a <vfprintf+0x5d4>
    898e:	1c 2d       	mov	r17, r12
    8990:	d5 14       	cp	r13, r5
    8992:	78 f4       	brcc	.+30     	; 0x89b2 <vfprintf+0x5ec>
    8994:	15 0d       	add	r17, r5
    8996:	1d 19       	sub	r17, r13
    8998:	0c c0       	rjmp	.+24     	; 0x89b2 <vfprintf+0x5ec>
    899a:	d5 14       	cp	r13, r5
    899c:	50 f4       	brcc	.+20     	; 0x89b2 <vfprintf+0x5ec>
    899e:	b7 01       	movw	r22, r14
    89a0:	80 e2       	ldi	r24, 0x20	; 32
    89a2:	90 e0       	ldi	r25, 0x00	; 0
    89a4:	09 d4       	rcall	.+2066   	; 0x91b8 <fputc>
    89a6:	d3 94       	inc	r13
    89a8:	f8 cf       	rjmp	.-16     	; 0x899a <vfprintf+0x5d4>
    89aa:	d5 14       	cp	r13, r5
    89ac:	10 f4       	brcc	.+4      	; 0x89b2 <vfprintf+0x5ec>
    89ae:	5d 18       	sub	r5, r13
    89b0:	01 c0       	rjmp	.+2      	; 0x89b4 <vfprintf+0x5ee>
    89b2:	51 2c       	mov	r5, r1
    89b4:	04 ff       	sbrs	r16, 4
    89b6:	0f c0       	rjmp	.+30     	; 0x89d6 <vfprintf+0x610>
    89b8:	b7 01       	movw	r22, r14
    89ba:	80 e3       	ldi	r24, 0x30	; 48
    89bc:	90 e0       	ldi	r25, 0x00	; 0
    89be:	fc d3       	rcall	.+2040   	; 0x91b8 <fputc>
    89c0:	02 ff       	sbrs	r16, 2
    89c2:	16 c0       	rjmp	.+44     	; 0x89f0 <vfprintf+0x62a>
    89c4:	01 fd       	sbrc	r16, 1
    89c6:	03 c0       	rjmp	.+6      	; 0x89ce <vfprintf+0x608>
    89c8:	88 e7       	ldi	r24, 0x78	; 120
    89ca:	90 e0       	ldi	r25, 0x00	; 0
    89cc:	02 c0       	rjmp	.+4      	; 0x89d2 <vfprintf+0x60c>
    89ce:	88 e5       	ldi	r24, 0x58	; 88
    89d0:	90 e0       	ldi	r25, 0x00	; 0
    89d2:	b7 01       	movw	r22, r14
    89d4:	0c c0       	rjmp	.+24     	; 0x89ee <vfprintf+0x628>
    89d6:	80 2f       	mov	r24, r16
    89d8:	86 78       	andi	r24, 0x86	; 134
    89da:	51 f0       	breq	.+20     	; 0x89f0 <vfprintf+0x62a>
    89dc:	01 ff       	sbrs	r16, 1
    89de:	02 c0       	rjmp	.+4      	; 0x89e4 <vfprintf+0x61e>
    89e0:	8b e2       	ldi	r24, 0x2B	; 43
    89e2:	01 c0       	rjmp	.+2      	; 0x89e6 <vfprintf+0x620>
    89e4:	80 e2       	ldi	r24, 0x20	; 32
    89e6:	07 fd       	sbrc	r16, 7
    89e8:	8d e2       	ldi	r24, 0x2D	; 45
    89ea:	b7 01       	movw	r22, r14
    89ec:	90 e0       	ldi	r25, 0x00	; 0
    89ee:	e4 d3       	rcall	.+1992   	; 0x91b8 <fputc>
    89f0:	c1 16       	cp	r12, r17
    89f2:	30 f4       	brcc	.+12     	; 0x8a00 <vfprintf+0x63a>
    89f4:	b7 01       	movw	r22, r14
    89f6:	80 e3       	ldi	r24, 0x30	; 48
    89f8:	90 e0       	ldi	r25, 0x00	; 0
    89fa:	de d3       	rcall	.+1980   	; 0x91b8 <fputc>
    89fc:	11 50       	subi	r17, 0x01	; 1
    89fe:	f8 cf       	rjmp	.-16     	; 0x89f0 <vfprintf+0x62a>
    8a00:	ca 94       	dec	r12
    8a02:	f3 01       	movw	r30, r6
    8a04:	ec 0d       	add	r30, r12
    8a06:	f1 1d       	adc	r31, r1
    8a08:	80 81       	ld	r24, Z
    8a0a:	b7 01       	movw	r22, r14
    8a0c:	90 e0       	ldi	r25, 0x00	; 0
    8a0e:	d4 d3       	rcall	.+1960   	; 0x91b8 <fputc>
    8a10:	c1 10       	cpse	r12, r1
    8a12:	f6 cf       	rjmp	.-20     	; 0x8a00 <vfprintf+0x63a>
    8a14:	15 c0       	rjmp	.+42     	; 0x8a40 <vfprintf+0x67a>
    8a16:	f4 e0       	ldi	r31, 0x04	; 4
    8a18:	f5 15       	cp	r31, r5
    8a1a:	50 f5       	brcc	.+84     	; 0x8a70 <vfprintf+0x6aa>
    8a1c:	84 e0       	ldi	r24, 0x04	; 4
    8a1e:	58 1a       	sub	r5, r24
    8a20:	93 fe       	sbrs	r9, 3
    8a22:	1e c0       	rjmp	.+60     	; 0x8a60 <vfprintf+0x69a>
    8a24:	01 11       	cpse	r16, r1
    8a26:	25 c0       	rjmp	.+74     	; 0x8a72 <vfprintf+0x6ac>
    8a28:	2c 85       	ldd	r18, Y+12	; 0x0c
    8a2a:	23 ff       	sbrs	r18, 3
    8a2c:	27 c0       	rjmp	.+78     	; 0x8a7c <vfprintf+0x6b6>
    8a2e:	06 e5       	ldi	r16, 0x56	; 86
    8a30:	12 e0       	ldi	r17, 0x02	; 2
    8a32:	39 2d       	mov	r19, r9
    8a34:	30 71       	andi	r19, 0x10	; 16
    8a36:	93 2e       	mov	r9, r19
    8a38:	f8 01       	movw	r30, r16
    8a3a:	84 91       	lpm	r24, Z
    8a3c:	81 11       	cpse	r24, r1
    8a3e:	21 c0       	rjmp	.+66     	; 0x8a82 <vfprintf+0x6bc>
    8a40:	55 20       	and	r5, r5
    8a42:	09 f4       	brne	.+2      	; 0x8a46 <vfprintf+0x680>
    8a44:	fc cc       	rjmp	.-1544   	; 0x843e <vfprintf+0x78>
    8a46:	b7 01       	movw	r22, r14
    8a48:	80 e2       	ldi	r24, 0x20	; 32
    8a4a:	90 e0       	ldi	r25, 0x00	; 0
    8a4c:	b5 d3       	rcall	.+1898   	; 0x91b8 <fputc>
    8a4e:	5a 94       	dec	r5
    8a50:	f7 cf       	rjmp	.-18     	; 0x8a40 <vfprintf+0x67a>
    8a52:	f7 01       	movw	r30, r14
    8a54:	86 81       	ldd	r24, Z+6	; 0x06
    8a56:	97 81       	ldd	r25, Z+7	; 0x07
    8a58:	23 c0       	rjmp	.+70     	; 0x8aa0 <vfprintf+0x6da>
    8a5a:	8f ef       	ldi	r24, 0xFF	; 255
    8a5c:	9f ef       	ldi	r25, 0xFF	; 255
    8a5e:	20 c0       	rjmp	.+64     	; 0x8aa0 <vfprintf+0x6da>
    8a60:	b7 01       	movw	r22, r14
    8a62:	80 e2       	ldi	r24, 0x20	; 32
    8a64:	90 e0       	ldi	r25, 0x00	; 0
    8a66:	a8 d3       	rcall	.+1872   	; 0x91b8 <fputc>
    8a68:	5a 94       	dec	r5
    8a6a:	51 10       	cpse	r5, r1
    8a6c:	f9 cf       	rjmp	.-14     	; 0x8a60 <vfprintf+0x69a>
    8a6e:	da cf       	rjmp	.-76     	; 0x8a24 <vfprintf+0x65e>
    8a70:	51 2c       	mov	r5, r1
    8a72:	b7 01       	movw	r22, r14
    8a74:	80 2f       	mov	r24, r16
    8a76:	90 e0       	ldi	r25, 0x00	; 0
    8a78:	9f d3       	rcall	.+1854   	; 0x91b8 <fputc>
    8a7a:	d6 cf       	rjmp	.-84     	; 0x8a28 <vfprintf+0x662>
    8a7c:	0a e5       	ldi	r16, 0x5A	; 90
    8a7e:	12 e0       	ldi	r17, 0x02	; 2
    8a80:	d8 cf       	rjmp	.-80     	; 0x8a32 <vfprintf+0x66c>
    8a82:	91 10       	cpse	r9, r1
    8a84:	80 52       	subi	r24, 0x20	; 32
    8a86:	b7 01       	movw	r22, r14
    8a88:	90 e0       	ldi	r25, 0x00	; 0
    8a8a:	96 d3       	rcall	.+1836   	; 0x91b8 <fputc>
    8a8c:	0f 5f       	subi	r16, 0xFF	; 255
    8a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    8a90:	d3 cf       	rjmp	.-90     	; 0x8a38 <vfprintf+0x672>
    8a92:	23 e0       	ldi	r18, 0x03	; 3
    8a94:	25 15       	cp	r18, r5
    8a96:	10 f4       	brcc	.+4      	; 0x8a9c <vfprintf+0x6d6>
    8a98:	83 e0       	ldi	r24, 0x03	; 3
    8a9a:	c1 cf       	rjmp	.-126    	; 0x8a1e <vfprintf+0x658>
    8a9c:	51 2c       	mov	r5, r1
    8a9e:	c4 cf       	rjmp	.-120    	; 0x8a28 <vfprintf+0x662>
    8aa0:	60 96       	adiw	r28, 0x10	; 16
    8aa2:	cd bf       	out	0x3d, r28	; 61
    8aa4:	de bf       	out	0x3e, r29	; 62
    8aa6:	df 91       	pop	r29
    8aa8:	cf 91       	pop	r28
    8aaa:	1f 91       	pop	r17
    8aac:	0f 91       	pop	r16
    8aae:	ff 90       	pop	r15
    8ab0:	ef 90       	pop	r14
    8ab2:	df 90       	pop	r13
    8ab4:	cf 90       	pop	r12
    8ab6:	bf 90       	pop	r11
    8ab8:	af 90       	pop	r10
    8aba:	9f 90       	pop	r9
    8abc:	8f 90       	pop	r8
    8abe:	7f 90       	pop	r7
    8ac0:	6f 90       	pop	r6
    8ac2:	5f 90       	pop	r5
    8ac4:	4f 90       	pop	r4
    8ac6:	3f 90       	pop	r3
    8ac8:	2f 90       	pop	r2
    8aca:	08 95       	ret

00008acc <__udivmodsi4>:
    8acc:	a1 e2       	ldi	r26, 0x21	; 33
    8ace:	1a 2e       	mov	r1, r26
    8ad0:	aa 1b       	sub	r26, r26
    8ad2:	bb 1b       	sub	r27, r27
    8ad4:	fd 01       	movw	r30, r26
    8ad6:	0d c0       	rjmp	.+26     	; 0x8af2 <__udivmodsi4_ep>

00008ad8 <__udivmodsi4_loop>:
    8ad8:	aa 1f       	adc	r26, r26
    8ada:	bb 1f       	adc	r27, r27
    8adc:	ee 1f       	adc	r30, r30
    8ade:	ff 1f       	adc	r31, r31
    8ae0:	a2 17       	cp	r26, r18
    8ae2:	b3 07       	cpc	r27, r19
    8ae4:	e4 07       	cpc	r30, r20
    8ae6:	f5 07       	cpc	r31, r21
    8ae8:	20 f0       	brcs	.+8      	; 0x8af2 <__udivmodsi4_ep>
    8aea:	a2 1b       	sub	r26, r18
    8aec:	b3 0b       	sbc	r27, r19
    8aee:	e4 0b       	sbc	r30, r20
    8af0:	f5 0b       	sbc	r31, r21

00008af2 <__udivmodsi4_ep>:
    8af2:	66 1f       	adc	r22, r22
    8af4:	77 1f       	adc	r23, r23
    8af6:	88 1f       	adc	r24, r24
    8af8:	99 1f       	adc	r25, r25
    8afa:	1a 94       	dec	r1
    8afc:	69 f7       	brne	.-38     	; 0x8ad8 <__udivmodsi4_loop>
    8afe:	60 95       	com	r22
    8b00:	70 95       	com	r23
    8b02:	80 95       	com	r24
    8b04:	90 95       	com	r25
    8b06:	9b 01       	movw	r18, r22
    8b08:	ac 01       	movw	r20, r24
    8b0a:	bd 01       	movw	r22, r26
    8b0c:	cf 01       	movw	r24, r30
    8b0e:	08 95       	ret

00008b10 <__muldi3>:
    8b10:	df 93       	push	r29
    8b12:	cf 93       	push	r28
    8b14:	1f 93       	push	r17
    8b16:	0f 93       	push	r16
    8b18:	9a 9d       	mul	r25, r10
    8b1a:	f0 2d       	mov	r31, r0
    8b1c:	21 9f       	mul	r18, r17
    8b1e:	f0 0d       	add	r31, r0
    8b20:	8b 9d       	mul	r24, r11
    8b22:	f0 0d       	add	r31, r0
    8b24:	8a 9d       	mul	r24, r10
    8b26:	e0 2d       	mov	r30, r0
    8b28:	f1 0d       	add	r31, r1
    8b2a:	03 9f       	mul	r16, r19
    8b2c:	f0 0d       	add	r31, r0
    8b2e:	02 9f       	mul	r16, r18
    8b30:	e0 0d       	add	r30, r0
    8b32:	f1 1d       	adc	r31, r1
    8b34:	4e 9d       	mul	r20, r14
    8b36:	e0 0d       	add	r30, r0
    8b38:	f1 1d       	adc	r31, r1
    8b3a:	5e 9d       	mul	r21, r14
    8b3c:	f0 0d       	add	r31, r0
    8b3e:	4f 9d       	mul	r20, r15
    8b40:	f0 0d       	add	r31, r0
    8b42:	7f 93       	push	r23
    8b44:	6f 93       	push	r22
    8b46:	bf 92       	push	r11
    8b48:	af 92       	push	r10
    8b4a:	5f 93       	push	r21
    8b4c:	4f 93       	push	r20
    8b4e:	d5 01       	movw	r26, r10
    8b50:	b9 d0       	rcall	.+370    	; 0x8cc4 <__umulhisi3>
    8b52:	8b 01       	movw	r16, r22
    8b54:	ac 01       	movw	r20, r24
    8b56:	d7 01       	movw	r26, r14
    8b58:	b5 d0       	rcall	.+362    	; 0x8cc4 <__umulhisi3>
    8b5a:	eb 01       	movw	r28, r22
    8b5c:	e8 0f       	add	r30, r24
    8b5e:	f9 1f       	adc	r31, r25
    8b60:	d6 01       	movw	r26, r12
    8b62:	1f d0       	rcall	.+62     	; 0x8ba2 <__muldi3_6>
    8b64:	2f 91       	pop	r18
    8b66:	3f 91       	pop	r19
    8b68:	d6 01       	movw	r26, r12
    8b6a:	ac d0       	rcall	.+344    	; 0x8cc4 <__umulhisi3>
    8b6c:	c6 0f       	add	r28, r22
    8b6e:	d7 1f       	adc	r29, r23
    8b70:	e8 1f       	adc	r30, r24
    8b72:	f9 1f       	adc	r31, r25
    8b74:	af 91       	pop	r26
    8b76:	bf 91       	pop	r27
    8b78:	14 d0       	rcall	.+40     	; 0x8ba2 <__muldi3_6>
    8b7a:	2f 91       	pop	r18
    8b7c:	3f 91       	pop	r19
    8b7e:	a2 d0       	rcall	.+324    	; 0x8cc4 <__umulhisi3>
    8b80:	c6 0f       	add	r28, r22
    8b82:	d7 1f       	adc	r29, r23
    8b84:	e8 1f       	adc	r30, r24
    8b86:	f9 1f       	adc	r31, r25
    8b88:	d6 01       	movw	r26, r12
    8b8a:	9c d0       	rcall	.+312    	; 0x8cc4 <__umulhisi3>
    8b8c:	e6 0f       	add	r30, r22
    8b8e:	f7 1f       	adc	r31, r23
    8b90:	98 01       	movw	r18, r16
    8b92:	be 01       	movw	r22, r28
    8b94:	cf 01       	movw	r24, r30
    8b96:	11 24       	eor	r1, r1
    8b98:	0f 91       	pop	r16
    8b9a:	1f 91       	pop	r17
    8b9c:	cf 91       	pop	r28
    8b9e:	df 91       	pop	r29
    8ba0:	08 95       	ret

00008ba2 <__muldi3_6>:
    8ba2:	90 d0       	rcall	.+288    	; 0x8cc4 <__umulhisi3>
    8ba4:	46 0f       	add	r20, r22
    8ba6:	57 1f       	adc	r21, r23
    8ba8:	c8 1f       	adc	r28, r24
    8baa:	d9 1f       	adc	r29, r25
    8bac:	08 f4       	brcc	.+2      	; 0x8bb0 <__muldi3_6+0xe>
    8bae:	31 96       	adiw	r30, 0x01	; 1
    8bb0:	08 95       	ret

00008bb2 <__umoddi3>:
    8bb2:	68 94       	set
    8bb4:	01 c0       	rjmp	.+2      	; 0x8bb8 <__udivdi3_umoddi3>

00008bb6 <__udivdi3>:
    8bb6:	e8 94       	clt

00008bb8 <__udivdi3_umoddi3>:
    8bb8:	8f 92       	push	r8
    8bba:	9f 92       	push	r9
    8bbc:	cf 93       	push	r28
    8bbe:	df 93       	push	r29
    8bc0:	05 d0       	rcall	.+10     	; 0x8bcc <__udivmod64>
    8bc2:	df 91       	pop	r29
    8bc4:	cf 91       	pop	r28
    8bc6:	9f 90       	pop	r9
    8bc8:	8f 90       	pop	r8
    8bca:	08 95       	ret

00008bcc <__udivmod64>:
    8bcc:	88 24       	eor	r8, r8
    8bce:	99 24       	eor	r9, r9
    8bd0:	f4 01       	movw	r30, r8
    8bd2:	e4 01       	movw	r28, r8
    8bd4:	b0 e4       	ldi	r27, 0x40	; 64
    8bd6:	9f 93       	push	r25
    8bd8:	aa 27       	eor	r26, r26
    8bda:	9a 15       	cp	r25, r10
    8bdc:	8b 04       	cpc	r8, r11
    8bde:	9c 04       	cpc	r9, r12
    8be0:	ed 05       	cpc	r30, r13
    8be2:	fe 05       	cpc	r31, r14
    8be4:	cf 05       	cpc	r28, r15
    8be6:	d0 07       	cpc	r29, r16
    8be8:	a1 07       	cpc	r26, r17
    8bea:	98 f4       	brcc	.+38     	; 0x8c12 <__udivmod64+0x46>
    8bec:	ad 2f       	mov	r26, r29
    8bee:	dc 2f       	mov	r29, r28
    8bf0:	cf 2f       	mov	r28, r31
    8bf2:	fe 2f       	mov	r31, r30
    8bf4:	e9 2d       	mov	r30, r9
    8bf6:	98 2c       	mov	r9, r8
    8bf8:	89 2e       	mov	r8, r25
    8bfa:	98 2f       	mov	r25, r24
    8bfc:	87 2f       	mov	r24, r23
    8bfe:	76 2f       	mov	r23, r22
    8c00:	65 2f       	mov	r22, r21
    8c02:	54 2f       	mov	r21, r20
    8c04:	43 2f       	mov	r20, r19
    8c06:	32 2f       	mov	r19, r18
    8c08:	22 27       	eor	r18, r18
    8c0a:	b8 50       	subi	r27, 0x08	; 8
    8c0c:	31 f7       	brne	.-52     	; 0x8bda <__udivmod64+0xe>
    8c0e:	bf 91       	pop	r27
    8c10:	27 c0       	rjmp	.+78     	; 0x8c60 <__udivmod64+0x94>
    8c12:	1b 2e       	mov	r1, r27
    8c14:	bf 91       	pop	r27
    8c16:	bb 27       	eor	r27, r27
    8c18:	22 0f       	add	r18, r18
    8c1a:	33 1f       	adc	r19, r19
    8c1c:	44 1f       	adc	r20, r20
    8c1e:	55 1f       	adc	r21, r21
    8c20:	66 1f       	adc	r22, r22
    8c22:	77 1f       	adc	r23, r23
    8c24:	88 1f       	adc	r24, r24
    8c26:	99 1f       	adc	r25, r25
    8c28:	88 1c       	adc	r8, r8
    8c2a:	99 1c       	adc	r9, r9
    8c2c:	ee 1f       	adc	r30, r30
    8c2e:	ff 1f       	adc	r31, r31
    8c30:	cc 1f       	adc	r28, r28
    8c32:	dd 1f       	adc	r29, r29
    8c34:	aa 1f       	adc	r26, r26
    8c36:	bb 1f       	adc	r27, r27
    8c38:	8a 14       	cp	r8, r10
    8c3a:	9b 04       	cpc	r9, r11
    8c3c:	ec 05       	cpc	r30, r12
    8c3e:	fd 05       	cpc	r31, r13
    8c40:	ce 05       	cpc	r28, r14
    8c42:	df 05       	cpc	r29, r15
    8c44:	a0 07       	cpc	r26, r16
    8c46:	b1 07       	cpc	r27, r17
    8c48:	48 f0       	brcs	.+18     	; 0x8c5c <__udivmod64+0x90>
    8c4a:	8a 18       	sub	r8, r10
    8c4c:	9b 08       	sbc	r9, r11
    8c4e:	ec 09       	sbc	r30, r12
    8c50:	fd 09       	sbc	r31, r13
    8c52:	ce 09       	sbc	r28, r14
    8c54:	df 09       	sbc	r29, r15
    8c56:	a0 0b       	sbc	r26, r16
    8c58:	b1 0b       	sbc	r27, r17
    8c5a:	21 60       	ori	r18, 0x01	; 1
    8c5c:	1a 94       	dec	r1
    8c5e:	e1 f6       	brne	.-72     	; 0x8c18 <__udivmod64+0x4c>
    8c60:	2e f4       	brtc	.+10     	; 0x8c6c <__udivmod64+0xa0>
    8c62:	94 01       	movw	r18, r8
    8c64:	af 01       	movw	r20, r30
    8c66:	be 01       	movw	r22, r28
    8c68:	cd 01       	movw	r24, r26
    8c6a:	00 0c       	add	r0, r0
    8c6c:	08 95       	ret

00008c6e <__ashldi3>:
    8c6e:	0f 93       	push	r16
    8c70:	08 30       	cpi	r16, 0x08	; 8
    8c72:	90 f0       	brcs	.+36     	; 0x8c98 <__ashldi3+0x2a>
    8c74:	98 2f       	mov	r25, r24
    8c76:	87 2f       	mov	r24, r23
    8c78:	76 2f       	mov	r23, r22
    8c7a:	65 2f       	mov	r22, r21
    8c7c:	54 2f       	mov	r21, r20
    8c7e:	43 2f       	mov	r20, r19
    8c80:	32 2f       	mov	r19, r18
    8c82:	22 27       	eor	r18, r18
    8c84:	08 50       	subi	r16, 0x08	; 8
    8c86:	f4 cf       	rjmp	.-24     	; 0x8c70 <__ashldi3+0x2>
    8c88:	22 0f       	add	r18, r18
    8c8a:	33 1f       	adc	r19, r19
    8c8c:	44 1f       	adc	r20, r20
    8c8e:	55 1f       	adc	r21, r21
    8c90:	66 1f       	adc	r22, r22
    8c92:	77 1f       	adc	r23, r23
    8c94:	88 1f       	adc	r24, r24
    8c96:	99 1f       	adc	r25, r25
    8c98:	0a 95       	dec	r16
    8c9a:	b2 f7       	brpl	.-20     	; 0x8c88 <__ashldi3+0x1a>
    8c9c:	0f 91       	pop	r16
    8c9e:	08 95       	ret

00008ca0 <__adddi3>:
    8ca0:	2a 0d       	add	r18, r10
    8ca2:	3b 1d       	adc	r19, r11
    8ca4:	4c 1d       	adc	r20, r12
    8ca6:	5d 1d       	adc	r21, r13
    8ca8:	6e 1d       	adc	r22, r14
    8caa:	7f 1d       	adc	r23, r15
    8cac:	80 1f       	adc	r24, r16
    8cae:	91 1f       	adc	r25, r17
    8cb0:	08 95       	ret

00008cb2 <__subdi3>:
    8cb2:	2a 19       	sub	r18, r10
    8cb4:	3b 09       	sbc	r19, r11
    8cb6:	4c 09       	sbc	r20, r12
    8cb8:	5d 09       	sbc	r21, r13
    8cba:	6e 09       	sbc	r22, r14
    8cbc:	7f 09       	sbc	r23, r15
    8cbe:	80 0b       	sbc	r24, r16
    8cc0:	91 0b       	sbc	r25, r17
    8cc2:	08 95       	ret

00008cc4 <__umulhisi3>:
    8cc4:	a2 9f       	mul	r26, r18
    8cc6:	b0 01       	movw	r22, r0
    8cc8:	b3 9f       	mul	r27, r19
    8cca:	c0 01       	movw	r24, r0
    8ccc:	a3 9f       	mul	r26, r19
    8cce:	70 0d       	add	r23, r0
    8cd0:	81 1d       	adc	r24, r1
    8cd2:	11 24       	eor	r1, r1
    8cd4:	91 1d       	adc	r25, r1
    8cd6:	b2 9f       	mul	r27, r18
    8cd8:	70 0d       	add	r23, r0
    8cda:	81 1d       	adc	r24, r1
    8cdc:	11 24       	eor	r1, r1
    8cde:	91 1d       	adc	r25, r1
    8ce0:	08 95       	ret

00008ce2 <malloc>:
    8ce2:	0f 93       	push	r16
    8ce4:	1f 93       	push	r17
    8ce6:	cf 93       	push	r28
    8ce8:	df 93       	push	r29
    8cea:	82 30       	cpi	r24, 0x02	; 2
    8cec:	91 05       	cpc	r25, r1
    8cee:	10 f4       	brcc	.+4      	; 0x8cf4 <malloc+0x12>
    8cf0:	82 e0       	ldi	r24, 0x02	; 2
    8cf2:	90 e0       	ldi	r25, 0x00	; 0
    8cf4:	e0 91 a9 22 	lds	r30, 0x22A9	; 0x8022a9 <__flp>
    8cf8:	f0 91 aa 22 	lds	r31, 0x22AA	; 0x8022aa <__flp+0x1>
    8cfc:	20 e0       	ldi	r18, 0x00	; 0
    8cfe:	30 e0       	ldi	r19, 0x00	; 0
    8d00:	a0 e0       	ldi	r26, 0x00	; 0
    8d02:	b0 e0       	ldi	r27, 0x00	; 0
    8d04:	30 97       	sbiw	r30, 0x00	; 0
    8d06:	19 f1       	breq	.+70     	; 0x8d4e <malloc+0x6c>
    8d08:	40 81       	ld	r20, Z
    8d0a:	51 81       	ldd	r21, Z+1	; 0x01
    8d0c:	02 81       	ldd	r16, Z+2	; 0x02
    8d0e:	13 81       	ldd	r17, Z+3	; 0x03
    8d10:	48 17       	cp	r20, r24
    8d12:	59 07       	cpc	r21, r25
    8d14:	c8 f0       	brcs	.+50     	; 0x8d48 <malloc+0x66>
    8d16:	84 17       	cp	r24, r20
    8d18:	95 07       	cpc	r25, r21
    8d1a:	69 f4       	brne	.+26     	; 0x8d36 <malloc+0x54>
    8d1c:	10 97       	sbiw	r26, 0x00	; 0
    8d1e:	31 f0       	breq	.+12     	; 0x8d2c <malloc+0x4a>
    8d20:	12 96       	adiw	r26, 0x02	; 2
    8d22:	0c 93       	st	X, r16
    8d24:	12 97       	sbiw	r26, 0x02	; 2
    8d26:	13 96       	adiw	r26, 0x03	; 3
    8d28:	1c 93       	st	X, r17
    8d2a:	27 c0       	rjmp	.+78     	; 0x8d7a <malloc+0x98>
    8d2c:	00 93 a9 22 	sts	0x22A9, r16	; 0x8022a9 <__flp>
    8d30:	10 93 aa 22 	sts	0x22AA, r17	; 0x8022aa <__flp+0x1>
    8d34:	22 c0       	rjmp	.+68     	; 0x8d7a <malloc+0x98>
    8d36:	21 15       	cp	r18, r1
    8d38:	31 05       	cpc	r19, r1
    8d3a:	19 f0       	breq	.+6      	; 0x8d42 <malloc+0x60>
    8d3c:	42 17       	cp	r20, r18
    8d3e:	53 07       	cpc	r21, r19
    8d40:	18 f4       	brcc	.+6      	; 0x8d48 <malloc+0x66>
    8d42:	9a 01       	movw	r18, r20
    8d44:	bd 01       	movw	r22, r26
    8d46:	ef 01       	movw	r28, r30
    8d48:	df 01       	movw	r26, r30
    8d4a:	f8 01       	movw	r30, r16
    8d4c:	db cf       	rjmp	.-74     	; 0x8d04 <malloc+0x22>
    8d4e:	21 15       	cp	r18, r1
    8d50:	31 05       	cpc	r19, r1
    8d52:	f9 f0       	breq	.+62     	; 0x8d92 <malloc+0xb0>
    8d54:	28 1b       	sub	r18, r24
    8d56:	39 0b       	sbc	r19, r25
    8d58:	24 30       	cpi	r18, 0x04	; 4
    8d5a:	31 05       	cpc	r19, r1
    8d5c:	80 f4       	brcc	.+32     	; 0x8d7e <malloc+0x9c>
    8d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    8d60:	9b 81       	ldd	r25, Y+3	; 0x03
    8d62:	61 15       	cp	r22, r1
    8d64:	71 05       	cpc	r23, r1
    8d66:	21 f0       	breq	.+8      	; 0x8d70 <malloc+0x8e>
    8d68:	fb 01       	movw	r30, r22
    8d6a:	82 83       	std	Z+2, r24	; 0x02
    8d6c:	93 83       	std	Z+3, r25	; 0x03
    8d6e:	04 c0       	rjmp	.+8      	; 0x8d78 <malloc+0x96>
    8d70:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <__flp>
    8d74:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <__flp+0x1>
    8d78:	fe 01       	movw	r30, r28
    8d7a:	32 96       	adiw	r30, 0x02	; 2
    8d7c:	44 c0       	rjmp	.+136    	; 0x8e06 <malloc+0x124>
    8d7e:	fe 01       	movw	r30, r28
    8d80:	e2 0f       	add	r30, r18
    8d82:	f3 1f       	adc	r31, r19
    8d84:	81 93       	st	Z+, r24
    8d86:	91 93       	st	Z+, r25
    8d88:	22 50       	subi	r18, 0x02	; 2
    8d8a:	31 09       	sbc	r19, r1
    8d8c:	28 83       	st	Y, r18
    8d8e:	39 83       	std	Y+1, r19	; 0x01
    8d90:	3a c0       	rjmp	.+116    	; 0x8e06 <malloc+0x124>
    8d92:	20 91 a7 22 	lds	r18, 0x22A7	; 0x8022a7 <__brkval>
    8d96:	30 91 a8 22 	lds	r19, 0x22A8	; 0x8022a8 <__brkval+0x1>
    8d9a:	23 2b       	or	r18, r19
    8d9c:	41 f4       	brne	.+16     	; 0x8dae <malloc+0xcc>
    8d9e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    8da2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    8da6:	20 93 a7 22 	sts	0x22A7, r18	; 0x8022a7 <__brkval>
    8daa:	30 93 a8 22 	sts	0x22A8, r19	; 0x8022a8 <__brkval+0x1>
    8dae:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    8db2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    8db6:	21 15       	cp	r18, r1
    8db8:	31 05       	cpc	r19, r1
    8dba:	41 f4       	brne	.+16     	; 0x8dcc <malloc+0xea>
    8dbc:	2d b7       	in	r18, 0x3d	; 61
    8dbe:	3e b7       	in	r19, 0x3e	; 62
    8dc0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    8dc4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    8dc8:	24 1b       	sub	r18, r20
    8dca:	35 0b       	sbc	r19, r21
    8dcc:	e0 91 a7 22 	lds	r30, 0x22A7	; 0x8022a7 <__brkval>
    8dd0:	f0 91 a8 22 	lds	r31, 0x22A8	; 0x8022a8 <__brkval+0x1>
    8dd4:	e2 17       	cp	r30, r18
    8dd6:	f3 07       	cpc	r31, r19
    8dd8:	a0 f4       	brcc	.+40     	; 0x8e02 <malloc+0x120>
    8dda:	2e 1b       	sub	r18, r30
    8ddc:	3f 0b       	sbc	r19, r31
    8dde:	28 17       	cp	r18, r24
    8de0:	39 07       	cpc	r19, r25
    8de2:	78 f0       	brcs	.+30     	; 0x8e02 <malloc+0x120>
    8de4:	ac 01       	movw	r20, r24
    8de6:	4e 5f       	subi	r20, 0xFE	; 254
    8de8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dea:	24 17       	cp	r18, r20
    8dec:	35 07       	cpc	r19, r21
    8dee:	48 f0       	brcs	.+18     	; 0x8e02 <malloc+0x120>
    8df0:	4e 0f       	add	r20, r30
    8df2:	5f 1f       	adc	r21, r31
    8df4:	40 93 a7 22 	sts	0x22A7, r20	; 0x8022a7 <__brkval>
    8df8:	50 93 a8 22 	sts	0x22A8, r21	; 0x8022a8 <__brkval+0x1>
    8dfc:	81 93       	st	Z+, r24
    8dfe:	91 93       	st	Z+, r25
    8e00:	02 c0       	rjmp	.+4      	; 0x8e06 <malloc+0x124>
    8e02:	e0 e0       	ldi	r30, 0x00	; 0
    8e04:	f0 e0       	ldi	r31, 0x00	; 0
    8e06:	cf 01       	movw	r24, r30
    8e08:	df 91       	pop	r29
    8e0a:	cf 91       	pop	r28
    8e0c:	1f 91       	pop	r17
    8e0e:	0f 91       	pop	r16
    8e10:	08 95       	ret

00008e12 <free>:
    8e12:	cf 93       	push	r28
    8e14:	df 93       	push	r29
    8e16:	00 97       	sbiw	r24, 0x00	; 0
    8e18:	09 f4       	brne	.+2      	; 0x8e1c <free+0xa>
    8e1a:	81 c0       	rjmp	.+258    	; 0x8f1e <free+0x10c>
    8e1c:	fc 01       	movw	r30, r24
    8e1e:	32 97       	sbiw	r30, 0x02	; 2
    8e20:	12 82       	std	Z+2, r1	; 0x02
    8e22:	13 82       	std	Z+3, r1	; 0x03
    8e24:	a0 91 a9 22 	lds	r26, 0x22A9	; 0x8022a9 <__flp>
    8e28:	b0 91 aa 22 	lds	r27, 0x22AA	; 0x8022aa <__flp+0x1>
    8e2c:	10 97       	sbiw	r26, 0x00	; 0
    8e2e:	81 f4       	brne	.+32     	; 0x8e50 <free+0x3e>
    8e30:	20 81       	ld	r18, Z
    8e32:	31 81       	ldd	r19, Z+1	; 0x01
    8e34:	82 0f       	add	r24, r18
    8e36:	93 1f       	adc	r25, r19
    8e38:	20 91 a7 22 	lds	r18, 0x22A7	; 0x8022a7 <__brkval>
    8e3c:	30 91 a8 22 	lds	r19, 0x22A8	; 0x8022a8 <__brkval+0x1>
    8e40:	28 17       	cp	r18, r24
    8e42:	39 07       	cpc	r19, r25
    8e44:	51 f5       	brne	.+84     	; 0x8e9a <free+0x88>
    8e46:	e0 93 a7 22 	sts	0x22A7, r30	; 0x8022a7 <__brkval>
    8e4a:	f0 93 a8 22 	sts	0x22A8, r31	; 0x8022a8 <__brkval+0x1>
    8e4e:	67 c0       	rjmp	.+206    	; 0x8f1e <free+0x10c>
    8e50:	ed 01       	movw	r28, r26
    8e52:	20 e0       	ldi	r18, 0x00	; 0
    8e54:	30 e0       	ldi	r19, 0x00	; 0
    8e56:	ce 17       	cp	r28, r30
    8e58:	df 07       	cpc	r29, r31
    8e5a:	40 f4       	brcc	.+16     	; 0x8e6c <free+0x5a>
    8e5c:	4a 81       	ldd	r20, Y+2	; 0x02
    8e5e:	5b 81       	ldd	r21, Y+3	; 0x03
    8e60:	9e 01       	movw	r18, r28
    8e62:	41 15       	cp	r20, r1
    8e64:	51 05       	cpc	r21, r1
    8e66:	f1 f0       	breq	.+60     	; 0x8ea4 <free+0x92>
    8e68:	ea 01       	movw	r28, r20
    8e6a:	f5 cf       	rjmp	.-22     	; 0x8e56 <free+0x44>
    8e6c:	c2 83       	std	Z+2, r28	; 0x02
    8e6e:	d3 83       	std	Z+3, r29	; 0x03
    8e70:	40 81       	ld	r20, Z
    8e72:	51 81       	ldd	r21, Z+1	; 0x01
    8e74:	84 0f       	add	r24, r20
    8e76:	95 1f       	adc	r25, r21
    8e78:	c8 17       	cp	r28, r24
    8e7a:	d9 07       	cpc	r29, r25
    8e7c:	59 f4       	brne	.+22     	; 0x8e94 <free+0x82>
    8e7e:	88 81       	ld	r24, Y
    8e80:	99 81       	ldd	r25, Y+1	; 0x01
    8e82:	84 0f       	add	r24, r20
    8e84:	95 1f       	adc	r25, r21
    8e86:	02 96       	adiw	r24, 0x02	; 2
    8e88:	80 83       	st	Z, r24
    8e8a:	91 83       	std	Z+1, r25	; 0x01
    8e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    8e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    8e90:	82 83       	std	Z+2, r24	; 0x02
    8e92:	93 83       	std	Z+3, r25	; 0x03
    8e94:	21 15       	cp	r18, r1
    8e96:	31 05       	cpc	r19, r1
    8e98:	29 f4       	brne	.+10     	; 0x8ea4 <free+0x92>
    8e9a:	e0 93 a9 22 	sts	0x22A9, r30	; 0x8022a9 <__flp>
    8e9e:	f0 93 aa 22 	sts	0x22AA, r31	; 0x8022aa <__flp+0x1>
    8ea2:	3d c0       	rjmp	.+122    	; 0x8f1e <free+0x10c>
    8ea4:	e9 01       	movw	r28, r18
    8ea6:	ea 83       	std	Y+2, r30	; 0x02
    8ea8:	fb 83       	std	Y+3, r31	; 0x03
    8eaa:	49 91       	ld	r20, Y+
    8eac:	59 91       	ld	r21, Y+
    8eae:	c4 0f       	add	r28, r20
    8eb0:	d5 1f       	adc	r29, r21
    8eb2:	ec 17       	cp	r30, r28
    8eb4:	fd 07       	cpc	r31, r29
    8eb6:	61 f4       	brne	.+24     	; 0x8ed0 <free+0xbe>
    8eb8:	80 81       	ld	r24, Z
    8eba:	91 81       	ldd	r25, Z+1	; 0x01
    8ebc:	84 0f       	add	r24, r20
    8ebe:	95 1f       	adc	r25, r21
    8ec0:	02 96       	adiw	r24, 0x02	; 2
    8ec2:	e9 01       	movw	r28, r18
    8ec4:	88 83       	st	Y, r24
    8ec6:	99 83       	std	Y+1, r25	; 0x01
    8ec8:	82 81       	ldd	r24, Z+2	; 0x02
    8eca:	93 81       	ldd	r25, Z+3	; 0x03
    8ecc:	8a 83       	std	Y+2, r24	; 0x02
    8ece:	9b 83       	std	Y+3, r25	; 0x03
    8ed0:	e0 e0       	ldi	r30, 0x00	; 0
    8ed2:	f0 e0       	ldi	r31, 0x00	; 0
    8ed4:	12 96       	adiw	r26, 0x02	; 2
    8ed6:	8d 91       	ld	r24, X+
    8ed8:	9c 91       	ld	r25, X
    8eda:	13 97       	sbiw	r26, 0x03	; 3
    8edc:	00 97       	sbiw	r24, 0x00	; 0
    8ede:	19 f0       	breq	.+6      	; 0x8ee6 <free+0xd4>
    8ee0:	fd 01       	movw	r30, r26
    8ee2:	dc 01       	movw	r26, r24
    8ee4:	f7 cf       	rjmp	.-18     	; 0x8ed4 <free+0xc2>
    8ee6:	8d 91       	ld	r24, X+
    8ee8:	9c 91       	ld	r25, X
    8eea:	11 97       	sbiw	r26, 0x01	; 1
    8eec:	9d 01       	movw	r18, r26
    8eee:	2e 5f       	subi	r18, 0xFE	; 254
    8ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ef2:	82 0f       	add	r24, r18
    8ef4:	93 1f       	adc	r25, r19
    8ef6:	20 91 a7 22 	lds	r18, 0x22A7	; 0x8022a7 <__brkval>
    8efa:	30 91 a8 22 	lds	r19, 0x22A8	; 0x8022a8 <__brkval+0x1>
    8efe:	28 17       	cp	r18, r24
    8f00:	39 07       	cpc	r19, r25
    8f02:	69 f4       	brne	.+26     	; 0x8f1e <free+0x10c>
    8f04:	30 97       	sbiw	r30, 0x00	; 0
    8f06:	29 f4       	brne	.+10     	; 0x8f12 <free+0x100>
    8f08:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <__flp>
    8f0c:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <__flp+0x1>
    8f10:	02 c0       	rjmp	.+4      	; 0x8f16 <free+0x104>
    8f12:	12 82       	std	Z+2, r1	; 0x02
    8f14:	13 82       	std	Z+3, r1	; 0x03
    8f16:	a0 93 a7 22 	sts	0x22A7, r26	; 0x8022a7 <__brkval>
    8f1a:	b0 93 a8 22 	sts	0x22A8, r27	; 0x8022a8 <__brkval+0x1>
    8f1e:	df 91       	pop	r29
    8f20:	cf 91       	pop	r28
    8f22:	08 95       	ret

00008f24 <__ftoa_engine>:
    8f24:	28 30       	cpi	r18, 0x08	; 8
    8f26:	08 f0       	brcs	.+2      	; 0x8f2a <__ftoa_engine+0x6>
    8f28:	27 e0       	ldi	r18, 0x07	; 7
    8f2a:	33 27       	eor	r19, r19
    8f2c:	da 01       	movw	r26, r20
    8f2e:	99 0f       	add	r25, r25
    8f30:	31 1d       	adc	r19, r1
    8f32:	87 fd       	sbrc	r24, 7
    8f34:	91 60       	ori	r25, 0x01	; 1
    8f36:	00 96       	adiw	r24, 0x00	; 0
    8f38:	61 05       	cpc	r22, r1
    8f3a:	71 05       	cpc	r23, r1
    8f3c:	39 f4       	brne	.+14     	; 0x8f4c <__ftoa_engine+0x28>
    8f3e:	32 60       	ori	r19, 0x02	; 2
    8f40:	2e 5f       	subi	r18, 0xFE	; 254
    8f42:	3d 93       	st	X+, r19
    8f44:	30 e3       	ldi	r19, 0x30	; 48
    8f46:	2a 95       	dec	r18
    8f48:	e1 f7       	brne	.-8      	; 0x8f42 <__ftoa_engine+0x1e>
    8f4a:	08 95       	ret
    8f4c:	9f 3f       	cpi	r25, 0xFF	; 255
    8f4e:	30 f0       	brcs	.+12     	; 0x8f5c <__ftoa_engine+0x38>
    8f50:	80 38       	cpi	r24, 0x80	; 128
    8f52:	71 05       	cpc	r23, r1
    8f54:	61 05       	cpc	r22, r1
    8f56:	09 f0       	breq	.+2      	; 0x8f5a <__ftoa_engine+0x36>
    8f58:	3c 5f       	subi	r19, 0xFC	; 252
    8f5a:	3c 5f       	subi	r19, 0xFC	; 252
    8f5c:	3d 93       	st	X+, r19
    8f5e:	91 30       	cpi	r25, 0x01	; 1
    8f60:	08 f0       	brcs	.+2      	; 0x8f64 <__ftoa_engine+0x40>
    8f62:	80 68       	ori	r24, 0x80	; 128
    8f64:	91 1d       	adc	r25, r1
    8f66:	df 93       	push	r29
    8f68:	cf 93       	push	r28
    8f6a:	1f 93       	push	r17
    8f6c:	0f 93       	push	r16
    8f6e:	ff 92       	push	r15
    8f70:	ef 92       	push	r14
    8f72:	19 2f       	mov	r17, r25
    8f74:	98 7f       	andi	r25, 0xF8	; 248
    8f76:	96 95       	lsr	r25
    8f78:	e9 2f       	mov	r30, r25
    8f7a:	96 95       	lsr	r25
    8f7c:	96 95       	lsr	r25
    8f7e:	e9 0f       	add	r30, r25
    8f80:	ff 27       	eor	r31, r31
    8f82:	e8 54       	subi	r30, 0x48	; 72
    8f84:	fd 4f       	sbci	r31, 0xFD	; 253
    8f86:	99 27       	eor	r25, r25
    8f88:	33 27       	eor	r19, r19
    8f8a:	ee 24       	eor	r14, r14
    8f8c:	ff 24       	eor	r15, r15
    8f8e:	a7 01       	movw	r20, r14
    8f90:	e7 01       	movw	r28, r14
    8f92:	05 90       	lpm	r0, Z+
    8f94:	08 94       	sec
    8f96:	07 94       	ror	r0
    8f98:	28 f4       	brcc	.+10     	; 0x8fa4 <__ftoa_engine+0x80>
    8f9a:	36 0f       	add	r19, r22
    8f9c:	e7 1e       	adc	r14, r23
    8f9e:	f8 1e       	adc	r15, r24
    8fa0:	49 1f       	adc	r20, r25
    8fa2:	51 1d       	adc	r21, r1
    8fa4:	66 0f       	add	r22, r22
    8fa6:	77 1f       	adc	r23, r23
    8fa8:	88 1f       	adc	r24, r24
    8faa:	99 1f       	adc	r25, r25
    8fac:	06 94       	lsr	r0
    8fae:	a1 f7       	brne	.-24     	; 0x8f98 <__ftoa_engine+0x74>
    8fb0:	05 90       	lpm	r0, Z+
    8fb2:	07 94       	ror	r0
    8fb4:	28 f4       	brcc	.+10     	; 0x8fc0 <__ftoa_engine+0x9c>
    8fb6:	e7 0e       	add	r14, r23
    8fb8:	f8 1e       	adc	r15, r24
    8fba:	49 1f       	adc	r20, r25
    8fbc:	56 1f       	adc	r21, r22
    8fbe:	c1 1d       	adc	r28, r1
    8fc0:	77 0f       	add	r23, r23
    8fc2:	88 1f       	adc	r24, r24
    8fc4:	99 1f       	adc	r25, r25
    8fc6:	66 1f       	adc	r22, r22
    8fc8:	06 94       	lsr	r0
    8fca:	a1 f7       	brne	.-24     	; 0x8fb4 <__ftoa_engine+0x90>
    8fcc:	05 90       	lpm	r0, Z+
    8fce:	07 94       	ror	r0
    8fd0:	28 f4       	brcc	.+10     	; 0x8fdc <__ftoa_engine+0xb8>
    8fd2:	f8 0e       	add	r15, r24
    8fd4:	49 1f       	adc	r20, r25
    8fd6:	56 1f       	adc	r21, r22
    8fd8:	c7 1f       	adc	r28, r23
    8fda:	d1 1d       	adc	r29, r1
    8fdc:	88 0f       	add	r24, r24
    8fde:	99 1f       	adc	r25, r25
    8fe0:	66 1f       	adc	r22, r22
    8fe2:	77 1f       	adc	r23, r23
    8fe4:	06 94       	lsr	r0
    8fe6:	a1 f7       	brne	.-24     	; 0x8fd0 <__ftoa_engine+0xac>
    8fe8:	05 90       	lpm	r0, Z+
    8fea:	07 94       	ror	r0
    8fec:	20 f4       	brcc	.+8      	; 0x8ff6 <__ftoa_engine+0xd2>
    8fee:	49 0f       	add	r20, r25
    8ff0:	56 1f       	adc	r21, r22
    8ff2:	c7 1f       	adc	r28, r23
    8ff4:	d8 1f       	adc	r29, r24
    8ff6:	99 0f       	add	r25, r25
    8ff8:	66 1f       	adc	r22, r22
    8ffa:	77 1f       	adc	r23, r23
    8ffc:	88 1f       	adc	r24, r24
    8ffe:	06 94       	lsr	r0
    9000:	a9 f7       	brne	.-22     	; 0x8fec <__ftoa_engine+0xc8>
    9002:	84 91       	lpm	r24, Z
    9004:	10 95       	com	r17
    9006:	17 70       	andi	r17, 0x07	; 7
    9008:	41 f0       	breq	.+16     	; 0x901a <__ftoa_engine+0xf6>
    900a:	d6 95       	lsr	r29
    900c:	c7 95       	ror	r28
    900e:	57 95       	ror	r21
    9010:	47 95       	ror	r20
    9012:	f7 94       	ror	r15
    9014:	e7 94       	ror	r14
    9016:	1a 95       	dec	r17
    9018:	c1 f7       	brne	.-16     	; 0x900a <__ftoa_engine+0xe6>
    901a:	ee e5       	ldi	r30, 0x5E	; 94
    901c:	f2 e0       	ldi	r31, 0x02	; 2
    901e:	68 94       	set
    9020:	15 90       	lpm	r1, Z+
    9022:	15 91       	lpm	r17, Z+
    9024:	35 91       	lpm	r19, Z+
    9026:	65 91       	lpm	r22, Z+
    9028:	95 91       	lpm	r25, Z+
    902a:	05 90       	lpm	r0, Z+
    902c:	7f e2       	ldi	r23, 0x2F	; 47
    902e:	73 95       	inc	r23
    9030:	e1 18       	sub	r14, r1
    9032:	f1 0a       	sbc	r15, r17
    9034:	43 0b       	sbc	r20, r19
    9036:	56 0b       	sbc	r21, r22
    9038:	c9 0b       	sbc	r28, r25
    903a:	d0 09       	sbc	r29, r0
    903c:	c0 f7       	brcc	.-16     	; 0x902e <__ftoa_engine+0x10a>
    903e:	e1 0c       	add	r14, r1
    9040:	f1 1e       	adc	r15, r17
    9042:	43 1f       	adc	r20, r19
    9044:	56 1f       	adc	r21, r22
    9046:	c9 1f       	adc	r28, r25
    9048:	d0 1d       	adc	r29, r0
    904a:	7e f4       	brtc	.+30     	; 0x906a <__ftoa_engine+0x146>
    904c:	70 33       	cpi	r23, 0x30	; 48
    904e:	11 f4       	brne	.+4      	; 0x9054 <__ftoa_engine+0x130>
    9050:	8a 95       	dec	r24
    9052:	e6 cf       	rjmp	.-52     	; 0x9020 <__ftoa_engine+0xfc>
    9054:	e8 94       	clt
    9056:	01 50       	subi	r16, 0x01	; 1
    9058:	30 f0       	brcs	.+12     	; 0x9066 <__ftoa_engine+0x142>
    905a:	08 0f       	add	r16, r24
    905c:	0a f4       	brpl	.+2      	; 0x9060 <__ftoa_engine+0x13c>
    905e:	00 27       	eor	r16, r16
    9060:	02 17       	cp	r16, r18
    9062:	08 f4       	brcc	.+2      	; 0x9066 <__ftoa_engine+0x142>
    9064:	20 2f       	mov	r18, r16
    9066:	23 95       	inc	r18
    9068:	02 2f       	mov	r16, r18
    906a:	7a 33       	cpi	r23, 0x3A	; 58
    906c:	28 f0       	brcs	.+10     	; 0x9078 <__ftoa_engine+0x154>
    906e:	79 e3       	ldi	r23, 0x39	; 57
    9070:	7d 93       	st	X+, r23
    9072:	2a 95       	dec	r18
    9074:	e9 f7       	brne	.-6      	; 0x9070 <__ftoa_engine+0x14c>
    9076:	10 c0       	rjmp	.+32     	; 0x9098 <__ftoa_engine+0x174>
    9078:	7d 93       	st	X+, r23
    907a:	2a 95       	dec	r18
    907c:	89 f6       	brne	.-94     	; 0x9020 <__ftoa_engine+0xfc>
    907e:	06 94       	lsr	r0
    9080:	97 95       	ror	r25
    9082:	67 95       	ror	r22
    9084:	37 95       	ror	r19
    9086:	17 95       	ror	r17
    9088:	17 94       	ror	r1
    908a:	e1 18       	sub	r14, r1
    908c:	f1 0a       	sbc	r15, r17
    908e:	43 0b       	sbc	r20, r19
    9090:	56 0b       	sbc	r21, r22
    9092:	c9 0b       	sbc	r28, r25
    9094:	d0 09       	sbc	r29, r0
    9096:	98 f0       	brcs	.+38     	; 0x90be <__ftoa_engine+0x19a>
    9098:	23 95       	inc	r18
    909a:	7e 91       	ld	r23, -X
    909c:	73 95       	inc	r23
    909e:	7a 33       	cpi	r23, 0x3A	; 58
    90a0:	08 f0       	brcs	.+2      	; 0x90a4 <__ftoa_engine+0x180>
    90a2:	70 e3       	ldi	r23, 0x30	; 48
    90a4:	7c 93       	st	X, r23
    90a6:	20 13       	cpse	r18, r16
    90a8:	b8 f7       	brcc	.-18     	; 0x9098 <__ftoa_engine+0x174>
    90aa:	7e 91       	ld	r23, -X
    90ac:	70 61       	ori	r23, 0x10	; 16
    90ae:	7d 93       	st	X+, r23
    90b0:	30 f0       	brcs	.+12     	; 0x90be <__ftoa_engine+0x19a>
    90b2:	83 95       	inc	r24
    90b4:	71 e3       	ldi	r23, 0x31	; 49
    90b6:	7d 93       	st	X+, r23
    90b8:	70 e3       	ldi	r23, 0x30	; 48
    90ba:	2a 95       	dec	r18
    90bc:	e1 f7       	brne	.-8      	; 0x90b6 <__ftoa_engine+0x192>
    90be:	11 24       	eor	r1, r1
    90c0:	ef 90       	pop	r14
    90c2:	ff 90       	pop	r15
    90c4:	0f 91       	pop	r16
    90c6:	1f 91       	pop	r17
    90c8:	cf 91       	pop	r28
    90ca:	df 91       	pop	r29
    90cc:	99 27       	eor	r25, r25
    90ce:	87 fd       	sbrc	r24, 7
    90d0:	90 95       	com	r25
    90d2:	08 95       	ret

000090d4 <strnlen_P>:
    90d4:	fc 01       	movw	r30, r24
    90d6:	05 90       	lpm	r0, Z+
    90d8:	61 50       	subi	r22, 0x01	; 1
    90da:	70 40       	sbci	r23, 0x00	; 0
    90dc:	01 10       	cpse	r0, r1
    90de:	d8 f7       	brcc	.-10     	; 0x90d6 <strnlen_P+0x2>
    90e0:	80 95       	com	r24
    90e2:	90 95       	com	r25
    90e4:	8e 0f       	add	r24, r30
    90e6:	9f 1f       	adc	r25, r31
    90e8:	08 95       	ret

000090ea <memcpy>:
    90ea:	fb 01       	movw	r30, r22
    90ec:	dc 01       	movw	r26, r24
    90ee:	02 c0       	rjmp	.+4      	; 0x90f4 <memcpy+0xa>
    90f0:	01 90       	ld	r0, Z+
    90f2:	0d 92       	st	X+, r0
    90f4:	41 50       	subi	r20, 0x01	; 1
    90f6:	50 40       	sbci	r21, 0x00	; 0
    90f8:	d8 f7       	brcc	.-10     	; 0x90f0 <memcpy+0x6>
    90fa:	08 95       	ret

000090fc <strlen>:
    90fc:	fc 01       	movw	r30, r24
    90fe:	01 90       	ld	r0, Z+
    9100:	00 20       	and	r0, r0
    9102:	e9 f7       	brne	.-6      	; 0x90fe <strlen+0x2>
    9104:	80 95       	com	r24
    9106:	90 95       	com	r25
    9108:	8e 0f       	add	r24, r30
    910a:	9f 1f       	adc	r25, r31
    910c:	08 95       	ret

0000910e <strnlen>:
    910e:	fc 01       	movw	r30, r24
    9110:	61 50       	subi	r22, 0x01	; 1
    9112:	70 40       	sbci	r23, 0x00	; 0
    9114:	01 90       	ld	r0, Z+
    9116:	01 10       	cpse	r0, r1
    9118:	d8 f7       	brcc	.-10     	; 0x9110 <strnlen+0x2>
    911a:	80 95       	com	r24
    911c:	90 95       	com	r25
    911e:	8e 0f       	add	r24, r30
    9120:	9f 1f       	adc	r25, r31
    9122:	08 95       	ret

00009124 <fdevopen>:
    9124:	0f 93       	push	r16
    9126:	1f 93       	push	r17
    9128:	cf 93       	push	r28
    912a:	df 93       	push	r29
    912c:	00 97       	sbiw	r24, 0x00	; 0
    912e:	31 f4       	brne	.+12     	; 0x913c <fdevopen+0x18>
    9130:	61 15       	cp	r22, r1
    9132:	71 05       	cpc	r23, r1
    9134:	19 f4       	brne	.+6      	; 0x913c <fdevopen+0x18>
    9136:	80 e0       	ldi	r24, 0x00	; 0
    9138:	90 e0       	ldi	r25, 0x00	; 0
    913a:	39 c0       	rjmp	.+114    	; 0x91ae <fdevopen+0x8a>
    913c:	8b 01       	movw	r16, r22
    913e:	ec 01       	movw	r28, r24
    9140:	6e e0       	ldi	r22, 0x0E	; 14
    9142:	70 e0       	ldi	r23, 0x00	; 0
    9144:	81 e0       	ldi	r24, 0x01	; 1
    9146:	90 e0       	ldi	r25, 0x00	; 0
    9148:	3c d1       	rcall	.+632    	; 0x93c2 <calloc>
    914a:	fc 01       	movw	r30, r24
    914c:	89 2b       	or	r24, r25
    914e:	99 f3       	breq	.-26     	; 0x9136 <fdevopen+0x12>
    9150:	80 e8       	ldi	r24, 0x80	; 128
    9152:	83 83       	std	Z+3, r24	; 0x03
    9154:	01 15       	cp	r16, r1
    9156:	11 05       	cpc	r17, r1
    9158:	71 f0       	breq	.+28     	; 0x9176 <fdevopen+0x52>
    915a:	02 87       	std	Z+10, r16	; 0x0a
    915c:	13 87       	std	Z+11, r17	; 0x0b
    915e:	81 e8       	ldi	r24, 0x81	; 129
    9160:	83 83       	std	Z+3, r24	; 0x03
    9162:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <__iob>
    9166:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <__iob+0x1>
    916a:	89 2b       	or	r24, r25
    916c:	21 f4       	brne	.+8      	; 0x9176 <fdevopen+0x52>
    916e:	e0 93 ab 22 	sts	0x22AB, r30	; 0x8022ab <__iob>
    9172:	f0 93 ac 22 	sts	0x22AC, r31	; 0x8022ac <__iob+0x1>
    9176:	20 97       	sbiw	r28, 0x00	; 0
    9178:	c9 f0       	breq	.+50     	; 0x91ac <fdevopen+0x88>
    917a:	c0 87       	std	Z+8, r28	; 0x08
    917c:	d1 87       	std	Z+9, r29	; 0x09
    917e:	83 81       	ldd	r24, Z+3	; 0x03
    9180:	82 60       	ori	r24, 0x02	; 2
    9182:	83 83       	std	Z+3, r24	; 0x03
    9184:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <__iob+0x2>
    9188:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <__iob+0x3>
    918c:	89 2b       	or	r24, r25
    918e:	71 f4       	brne	.+28     	; 0x91ac <fdevopen+0x88>
    9190:	e0 93 ad 22 	sts	0x22AD, r30	; 0x8022ad <__iob+0x2>
    9194:	f0 93 ae 22 	sts	0x22AE, r31	; 0x8022ae <__iob+0x3>
    9198:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <__iob+0x4>
    919c:	90 91 b0 22 	lds	r25, 0x22B0	; 0x8022b0 <__iob+0x5>
    91a0:	89 2b       	or	r24, r25
    91a2:	21 f4       	brne	.+8      	; 0x91ac <fdevopen+0x88>
    91a4:	e0 93 af 22 	sts	0x22AF, r30	; 0x8022af <__iob+0x4>
    91a8:	f0 93 b0 22 	sts	0x22B0, r31	; 0x8022b0 <__iob+0x5>
    91ac:	cf 01       	movw	r24, r30
    91ae:	df 91       	pop	r29
    91b0:	cf 91       	pop	r28
    91b2:	1f 91       	pop	r17
    91b4:	0f 91       	pop	r16
    91b6:	08 95       	ret

000091b8 <fputc>:
    91b8:	0f 93       	push	r16
    91ba:	1f 93       	push	r17
    91bc:	cf 93       	push	r28
    91be:	df 93       	push	r29
    91c0:	fb 01       	movw	r30, r22
    91c2:	23 81       	ldd	r18, Z+3	; 0x03
    91c4:	21 fd       	sbrc	r18, 1
    91c6:	03 c0       	rjmp	.+6      	; 0x91ce <fputc+0x16>
    91c8:	8f ef       	ldi	r24, 0xFF	; 255
    91ca:	9f ef       	ldi	r25, 0xFF	; 255
    91cc:	2c c0       	rjmp	.+88     	; 0x9226 <fputc+0x6e>
    91ce:	22 ff       	sbrs	r18, 2
    91d0:	16 c0       	rjmp	.+44     	; 0x91fe <fputc+0x46>
    91d2:	46 81       	ldd	r20, Z+6	; 0x06
    91d4:	57 81       	ldd	r21, Z+7	; 0x07
    91d6:	24 81       	ldd	r18, Z+4	; 0x04
    91d8:	35 81       	ldd	r19, Z+5	; 0x05
    91da:	42 17       	cp	r20, r18
    91dc:	53 07       	cpc	r21, r19
    91de:	44 f4       	brge	.+16     	; 0x91f0 <fputc+0x38>
    91e0:	a0 81       	ld	r26, Z
    91e2:	b1 81       	ldd	r27, Z+1	; 0x01
    91e4:	9d 01       	movw	r18, r26
    91e6:	2f 5f       	subi	r18, 0xFF	; 255
    91e8:	3f 4f       	sbci	r19, 0xFF	; 255
    91ea:	20 83       	st	Z, r18
    91ec:	31 83       	std	Z+1, r19	; 0x01
    91ee:	8c 93       	st	X, r24
    91f0:	26 81       	ldd	r18, Z+6	; 0x06
    91f2:	37 81       	ldd	r19, Z+7	; 0x07
    91f4:	2f 5f       	subi	r18, 0xFF	; 255
    91f6:	3f 4f       	sbci	r19, 0xFF	; 255
    91f8:	26 83       	std	Z+6, r18	; 0x06
    91fa:	37 83       	std	Z+7, r19	; 0x07
    91fc:	14 c0       	rjmp	.+40     	; 0x9226 <fputc+0x6e>
    91fe:	8b 01       	movw	r16, r22
    9200:	ec 01       	movw	r28, r24
    9202:	fb 01       	movw	r30, r22
    9204:	00 84       	ldd	r0, Z+8	; 0x08
    9206:	f1 85       	ldd	r31, Z+9	; 0x09
    9208:	e0 2d       	mov	r30, r0
    920a:	19 95       	eicall
    920c:	89 2b       	or	r24, r25
    920e:	e1 f6       	brne	.-72     	; 0x91c8 <fputc+0x10>
    9210:	d8 01       	movw	r26, r16
    9212:	16 96       	adiw	r26, 0x06	; 6
    9214:	8d 91       	ld	r24, X+
    9216:	9c 91       	ld	r25, X
    9218:	17 97       	sbiw	r26, 0x07	; 7
    921a:	01 96       	adiw	r24, 0x01	; 1
    921c:	16 96       	adiw	r26, 0x06	; 6
    921e:	8d 93       	st	X+, r24
    9220:	9c 93       	st	X, r25
    9222:	17 97       	sbiw	r26, 0x07	; 7
    9224:	ce 01       	movw	r24, r28
    9226:	df 91       	pop	r29
    9228:	cf 91       	pop	r28
    922a:	1f 91       	pop	r17
    922c:	0f 91       	pop	r16
    922e:	08 95       	ret

00009230 <printf>:
    9230:	cf 93       	push	r28
    9232:	df 93       	push	r29
    9234:	cd b7       	in	r28, 0x3d	; 61
    9236:	de b7       	in	r29, 0x3e	; 62
    9238:	ae 01       	movw	r20, r28
    923a:	4a 5f       	subi	r20, 0xFA	; 250
    923c:	5f 4f       	sbci	r21, 0xFF	; 255
    923e:	fa 01       	movw	r30, r20
    9240:	61 91       	ld	r22, Z+
    9242:	71 91       	ld	r23, Z+
    9244:	af 01       	movw	r20, r30
    9246:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <__iob+0x2>
    924a:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <__iob+0x3>
    924e:	bb d8       	rcall	.-3722   	; 0x83c6 <vfprintf>
    9250:	df 91       	pop	r29
    9252:	cf 91       	pop	r28
    9254:	08 95       	ret

00009256 <puts>:
    9256:	0f 93       	push	r16
    9258:	1f 93       	push	r17
    925a:	cf 93       	push	r28
    925c:	df 93       	push	r29
    925e:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <__iob+0x2>
    9262:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <__iob+0x3>
    9266:	23 81       	ldd	r18, Z+3	; 0x03
    9268:	21 ff       	sbrs	r18, 1
    926a:	1b c0       	rjmp	.+54     	; 0x92a2 <puts+0x4c>
    926c:	8c 01       	movw	r16, r24
    926e:	d0 e0       	ldi	r29, 0x00	; 0
    9270:	c0 e0       	ldi	r28, 0x00	; 0
    9272:	f8 01       	movw	r30, r16
    9274:	81 91       	ld	r24, Z+
    9276:	8f 01       	movw	r16, r30
    9278:	60 91 ad 22 	lds	r22, 0x22AD	; 0x8022ad <__iob+0x2>
    927c:	70 91 ae 22 	lds	r23, 0x22AE	; 0x8022ae <__iob+0x3>
    9280:	db 01       	movw	r26, r22
    9282:	18 96       	adiw	r26, 0x08	; 8
    9284:	ed 91       	ld	r30, X+
    9286:	fc 91       	ld	r31, X
    9288:	19 97       	sbiw	r26, 0x09	; 9
    928a:	88 23       	and	r24, r24
    928c:	31 f0       	breq	.+12     	; 0x929a <puts+0x44>
    928e:	19 95       	eicall
    9290:	89 2b       	or	r24, r25
    9292:	79 f3       	breq	.-34     	; 0x9272 <puts+0x1c>
    9294:	df ef       	ldi	r29, 0xFF	; 255
    9296:	cf ef       	ldi	r28, 0xFF	; 255
    9298:	ec cf       	rjmp	.-40     	; 0x9272 <puts+0x1c>
    929a:	8a e0       	ldi	r24, 0x0A	; 10
    929c:	19 95       	eicall
    929e:	89 2b       	or	r24, r25
    92a0:	19 f0       	breq	.+6      	; 0x92a8 <puts+0x52>
    92a2:	8f ef       	ldi	r24, 0xFF	; 255
    92a4:	9f ef       	ldi	r25, 0xFF	; 255
    92a6:	02 c0       	rjmp	.+4      	; 0x92ac <puts+0x56>
    92a8:	8d 2f       	mov	r24, r29
    92aa:	9c 2f       	mov	r25, r28
    92ac:	df 91       	pop	r29
    92ae:	cf 91       	pop	r28
    92b0:	1f 91       	pop	r17
    92b2:	0f 91       	pop	r16
    92b4:	08 95       	ret

000092b6 <sprintf>:
    92b6:	0f 93       	push	r16
    92b8:	1f 93       	push	r17
    92ba:	cf 93       	push	r28
    92bc:	df 93       	push	r29
    92be:	cd b7       	in	r28, 0x3d	; 61
    92c0:	de b7       	in	r29, 0x3e	; 62
    92c2:	2e 97       	sbiw	r28, 0x0e	; 14
    92c4:	cd bf       	out	0x3d, r28	; 61
    92c6:	de bf       	out	0x3e, r29	; 62
    92c8:	0e 89       	ldd	r16, Y+22	; 0x16
    92ca:	1f 89       	ldd	r17, Y+23	; 0x17
    92cc:	86 e0       	ldi	r24, 0x06	; 6
    92ce:	8c 83       	std	Y+4, r24	; 0x04
    92d0:	09 83       	std	Y+1, r16	; 0x01
    92d2:	1a 83       	std	Y+2, r17	; 0x02
    92d4:	8f ef       	ldi	r24, 0xFF	; 255
    92d6:	9f e7       	ldi	r25, 0x7F	; 127
    92d8:	8d 83       	std	Y+5, r24	; 0x05
    92da:	9e 83       	std	Y+6, r25	; 0x06
    92dc:	ae 01       	movw	r20, r28
    92de:	46 5e       	subi	r20, 0xE6	; 230
    92e0:	5f 4f       	sbci	r21, 0xFF	; 255
    92e2:	68 8d       	ldd	r22, Y+24	; 0x18
    92e4:	79 8d       	ldd	r23, Y+25	; 0x19
    92e6:	ce 01       	movw	r24, r28
    92e8:	01 96       	adiw	r24, 0x01	; 1
    92ea:	6d d8       	rcall	.-3878   	; 0x83c6 <vfprintf>
    92ec:	ef 81       	ldd	r30, Y+7	; 0x07
    92ee:	f8 85       	ldd	r31, Y+8	; 0x08
    92f0:	e0 0f       	add	r30, r16
    92f2:	f1 1f       	adc	r31, r17
    92f4:	10 82       	st	Z, r1
    92f6:	2e 96       	adiw	r28, 0x0e	; 14
    92f8:	cd bf       	out	0x3d, r28	; 61
    92fa:	de bf       	out	0x3e, r29	; 62
    92fc:	df 91       	pop	r29
    92fe:	cf 91       	pop	r28
    9300:	1f 91       	pop	r17
    9302:	0f 91       	pop	r16
    9304:	08 95       	ret

00009306 <__ultoa_invert>:
    9306:	fa 01       	movw	r30, r20
    9308:	aa 27       	eor	r26, r26
    930a:	28 30       	cpi	r18, 0x08	; 8
    930c:	51 f1       	breq	.+84     	; 0x9362 <__ultoa_invert+0x5c>
    930e:	20 31       	cpi	r18, 0x10	; 16
    9310:	81 f1       	breq	.+96     	; 0x9372 <__ultoa_invert+0x6c>
    9312:	e8 94       	clt
    9314:	6f 93       	push	r22
    9316:	6e 7f       	andi	r22, 0xFE	; 254
    9318:	6e 5f       	subi	r22, 0xFE	; 254
    931a:	7f 4f       	sbci	r23, 0xFF	; 255
    931c:	8f 4f       	sbci	r24, 0xFF	; 255
    931e:	9f 4f       	sbci	r25, 0xFF	; 255
    9320:	af 4f       	sbci	r26, 0xFF	; 255
    9322:	b1 e0       	ldi	r27, 0x01	; 1
    9324:	3e d0       	rcall	.+124    	; 0x93a2 <__ultoa_invert+0x9c>
    9326:	b4 e0       	ldi	r27, 0x04	; 4
    9328:	3c d0       	rcall	.+120    	; 0x93a2 <__ultoa_invert+0x9c>
    932a:	67 0f       	add	r22, r23
    932c:	78 1f       	adc	r23, r24
    932e:	89 1f       	adc	r24, r25
    9330:	9a 1f       	adc	r25, r26
    9332:	a1 1d       	adc	r26, r1
    9334:	68 0f       	add	r22, r24
    9336:	79 1f       	adc	r23, r25
    9338:	8a 1f       	adc	r24, r26
    933a:	91 1d       	adc	r25, r1
    933c:	a1 1d       	adc	r26, r1
    933e:	6a 0f       	add	r22, r26
    9340:	71 1d       	adc	r23, r1
    9342:	81 1d       	adc	r24, r1
    9344:	91 1d       	adc	r25, r1
    9346:	a1 1d       	adc	r26, r1
    9348:	20 d0       	rcall	.+64     	; 0x938a <__ultoa_invert+0x84>
    934a:	09 f4       	brne	.+2      	; 0x934e <__ultoa_invert+0x48>
    934c:	68 94       	set
    934e:	3f 91       	pop	r19
    9350:	2a e0       	ldi	r18, 0x0A	; 10
    9352:	26 9f       	mul	r18, r22
    9354:	11 24       	eor	r1, r1
    9356:	30 19       	sub	r19, r0
    9358:	30 5d       	subi	r19, 0xD0	; 208
    935a:	31 93       	st	Z+, r19
    935c:	de f6       	brtc	.-74     	; 0x9314 <__ultoa_invert+0xe>
    935e:	cf 01       	movw	r24, r30
    9360:	08 95       	ret
    9362:	46 2f       	mov	r20, r22
    9364:	47 70       	andi	r20, 0x07	; 7
    9366:	40 5d       	subi	r20, 0xD0	; 208
    9368:	41 93       	st	Z+, r20
    936a:	b3 e0       	ldi	r27, 0x03	; 3
    936c:	0f d0       	rcall	.+30     	; 0x938c <__ultoa_invert+0x86>
    936e:	c9 f7       	brne	.-14     	; 0x9362 <__ultoa_invert+0x5c>
    9370:	f6 cf       	rjmp	.-20     	; 0x935e <__ultoa_invert+0x58>
    9372:	46 2f       	mov	r20, r22
    9374:	4f 70       	andi	r20, 0x0F	; 15
    9376:	40 5d       	subi	r20, 0xD0	; 208
    9378:	4a 33       	cpi	r20, 0x3A	; 58
    937a:	18 f0       	brcs	.+6      	; 0x9382 <__ultoa_invert+0x7c>
    937c:	49 5d       	subi	r20, 0xD9	; 217
    937e:	31 fd       	sbrc	r19, 1
    9380:	40 52       	subi	r20, 0x20	; 32
    9382:	41 93       	st	Z+, r20
    9384:	02 d0       	rcall	.+4      	; 0x938a <__ultoa_invert+0x84>
    9386:	a9 f7       	brne	.-22     	; 0x9372 <__ultoa_invert+0x6c>
    9388:	ea cf       	rjmp	.-44     	; 0x935e <__ultoa_invert+0x58>
    938a:	b4 e0       	ldi	r27, 0x04	; 4
    938c:	a6 95       	lsr	r26
    938e:	97 95       	ror	r25
    9390:	87 95       	ror	r24
    9392:	77 95       	ror	r23
    9394:	67 95       	ror	r22
    9396:	ba 95       	dec	r27
    9398:	c9 f7       	brne	.-14     	; 0x938c <__ultoa_invert+0x86>
    939a:	00 97       	sbiw	r24, 0x00	; 0
    939c:	61 05       	cpc	r22, r1
    939e:	71 05       	cpc	r23, r1
    93a0:	08 95       	ret
    93a2:	9b 01       	movw	r18, r22
    93a4:	ac 01       	movw	r20, r24
    93a6:	0a 2e       	mov	r0, r26
    93a8:	06 94       	lsr	r0
    93aa:	57 95       	ror	r21
    93ac:	47 95       	ror	r20
    93ae:	37 95       	ror	r19
    93b0:	27 95       	ror	r18
    93b2:	ba 95       	dec	r27
    93b4:	c9 f7       	brne	.-14     	; 0x93a8 <__ultoa_invert+0xa2>
    93b6:	62 0f       	add	r22, r18
    93b8:	73 1f       	adc	r23, r19
    93ba:	84 1f       	adc	r24, r20
    93bc:	95 1f       	adc	r25, r21
    93be:	a0 1d       	adc	r26, r0
    93c0:	08 95       	ret

000093c2 <calloc>:
    93c2:	0f 93       	push	r16
    93c4:	1f 93       	push	r17
    93c6:	cf 93       	push	r28
    93c8:	df 93       	push	r29
    93ca:	86 9f       	mul	r24, r22
    93cc:	80 01       	movw	r16, r0
    93ce:	87 9f       	mul	r24, r23
    93d0:	10 0d       	add	r17, r0
    93d2:	96 9f       	mul	r25, r22
    93d4:	10 0d       	add	r17, r0
    93d6:	11 24       	eor	r1, r1
    93d8:	c8 01       	movw	r24, r16
    93da:	83 dc       	rcall	.-1786   	; 0x8ce2 <malloc>
    93dc:	ec 01       	movw	r28, r24
    93de:	00 97       	sbiw	r24, 0x00	; 0
    93e0:	21 f0       	breq	.+8      	; 0x93ea <calloc+0x28>
    93e2:	a8 01       	movw	r20, r16
    93e4:	60 e0       	ldi	r22, 0x00	; 0
    93e6:	70 e0       	ldi	r23, 0x00	; 0
    93e8:	06 d0       	rcall	.+12     	; 0x93f6 <memset>
    93ea:	ce 01       	movw	r24, r28
    93ec:	df 91       	pop	r29
    93ee:	cf 91       	pop	r28
    93f0:	1f 91       	pop	r17
    93f2:	0f 91       	pop	r16
    93f4:	08 95       	ret

000093f6 <memset>:
    93f6:	dc 01       	movw	r26, r24
    93f8:	01 c0       	rjmp	.+2      	; 0x93fc <memset+0x6>
    93fa:	6d 93       	st	X+, r22
    93fc:	41 50       	subi	r20, 0x01	; 1
    93fe:	50 40       	sbci	r21, 0x00	; 0
    9400:	e0 f7       	brcc	.-8      	; 0x93fa <memset+0x4>
    9402:	08 95       	ret

00009404 <_exit>:
    9404:	f8 94       	cli

00009406 <__stop_program>:
    9406:	ff cf       	rjmp	.-2      	; 0x9406 <__stop_program>
