
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00802000  00002f08  00002f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00802036  00802036  00002fd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00003070  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010332  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000057ef  00000000  00000000  00013812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007593  00000000  00000000  00019001  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001664  00000000  00000000  00020594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003e7d5  00000000  00000000  00021bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004593  00000000  00000000  000603cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00064960  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000eb97  00000000  00000000  00064d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c1       	rjmp	.+792    	; 0x342 <__vector_10>
      2a:	00 00       	nop
      2c:	ad c1       	rjmp	.+858    	; 0x388 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_13>
      38:	2b c2       	rjmp	.+1110   	; 0x490 <__vector_14>
      3a:	00 00       	nop
      3c:	61 c2       	rjmp	.+1218   	; 0x500 <__vector_15>
      3e:	00 00       	nop
      40:	97 c2       	rjmp	.+1326   	; 0x570 <__vector_16>
      42:	00 00       	nop
      44:	cd c2       	rjmp	.+1434   	; 0x5e0 <__vector_17>
      46:	00 00       	nop
      48:	03 c3       	rjmp	.+1542   	; 0x650 <__vector_18>
      4a:	00 00       	nop
      4c:	39 c3       	rjmp	.+1650   	; 0x6c0 <__vector_19>
      4e:	00 00       	nop
      50:	6f c3       	rjmp	.+1758   	; 0x730 <__vector_20>
      52:	00 00       	nop
      54:	a5 c3       	rjmp	.+1866   	; 0x7a0 <__vector_21>
      56:	00 00       	nop
      58:	db c3       	rjmp	.+1974   	; 0x810 <__vector_22>
      5a:	00 00       	nop
      5c:	11 c4       	rjmp	.+2082   	; 0x880 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_46>
      bc:	49 c6       	rjmp	.+3218   	; 0xd50 <__vector_47>
      be:	00 00       	nop
      c0:	7f c6       	rjmp	.+3326   	; 0xdc0 <__vector_48>
      c2:	00 00       	nop
      c4:	b5 c6       	rjmp	.+3434   	; 0xe30 <__vector_49>
      c6:	00 00       	nop
      c8:	eb c6       	rjmp	.+3542   	; 0xea0 <__vector_50>
      ca:	00 00       	nop
      cc:	21 c7       	rjmp	.+3650   	; 0xf10 <__vector_51>
      ce:	00 00       	nop
      d0:	57 c7       	rjmp	.+3758   	; 0xf80 <__vector_52>
      d2:	00 00       	nop
      d4:	8d c7       	rjmp	.+3866   	; 0xff0 <__vector_53>
      d6:	00 00       	nop
      d8:	c3 c7       	rjmp	.+3974   	; 0x1060 <__vector_54>
      da:	00 00       	nop
      dc:	f9 c7       	rjmp	.+4082   	; 0x10d0 <__vector_55>
      de:	00 00       	nop
      e0:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_76>
     134:	dd c3       	rjmp	.+1978   	; 0x8f0 <__vector_77>
     136:	00 00       	nop
     138:	13 c4       	rjmp	.+2086   	; 0x960 <__vector_78>
     13a:	00 00       	nop
     13c:	49 c4       	rjmp	.+2194   	; 0x9d0 <__vector_79>
     13e:	00 00       	nop
     140:	7f c4       	rjmp	.+2302   	; 0xa40 <__vector_80>
     142:	00 00       	nop
     144:	b5 c4       	rjmp	.+2410   	; 0xab0 <__vector_81>
     146:	00 00       	nop
     148:	eb c4       	rjmp	.+2518   	; 0xb20 <__vector_82>
     14a:	00 00       	nop
     14c:	21 c5       	rjmp	.+2626   	; 0xb90 <__vector_83>
     14e:	00 00       	nop
     150:	57 c5       	rjmp	.+2734   	; 0xc00 <__vector_84>
     152:	00 00       	nop
     154:	8d c5       	rjmp	.+2842   	; 0xc70 <__vector_85>
     156:	00 00       	nop
     158:	c3 c5       	rjmp	.+2950   	; 0xce0 <__vector_86>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_107>
     1b0:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_108>
     1b4:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_109>
     1b8:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_110>
     1bc:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_111>
     1c0:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_112>
     1c4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_113>
     1c8:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_114>
     1cc:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_115>
     1d0:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_116>
     1d4:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e0       	ldi	r30, 0x08	; 8
     21c:	ff e2       	ldi	r31, 0x2F	; 47
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a6 33       	cpi	r26, 0x36	; 54
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a6 e3       	ldi	r26, 0x36	; 54
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	aa 3a       	cpi	r26, 0xAA	; 170
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 be 12 	call	0x257c	; 0x257c <main>
     244:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	1f 92       	push	r1
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     25c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     260:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     264:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     268:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     26c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     270:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     274:	8f b7       	in	r24, 0x3f	; 63
     276:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     278:	f8 94       	cli
	return flags;
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	82 60       	ori	r24, 0x02	; 2
     284:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     286:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     288:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     28a:	81 ff       	sbrs	r24, 1
     28c:	fd cf       	rjmp	.-6      	; 0x288 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	80 e4       	ldi	r24, 0x40	; 64
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	50 d0       	rcall	.+160    	; 0x336 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     296:	8f b7       	in	r24, 0x3f	; 63
     298:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     29a:	f8 94       	cli
	return flags;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     29e:	e0 e5       	ldi	r30, 0x50	; 80
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8e 7f       	andi	r24, 0xFE	; 254
     2a6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	1f 92       	push	r1
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2be:	9f b7       	in	r25, 0x3f	; 63
     2c0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     2c2:	f8 94       	cli
	return flags;
     2c4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     2c6:	e8 2f       	mov	r30, r24
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	e0 59       	subi	r30, 0x90	; 144
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	60 95       	com	r22
     2d0:	80 81       	ld	r24, Z
     2d2:	68 23       	and	r22, r24
     2d4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2d6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	1f 92       	push	r1
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2ea:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <stdio_base>
     2ee:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <stdio_base+0x1>
     2f2:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <ptr_get>
     2f6:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <ptr_get+0x1>
     2fa:	be 01       	movw	r22, r28
     2fc:	6f 5f       	subi	r22, 0xFF	; 255
     2fe:	7f 4f       	sbci	r23, 0xFF	; 255
     300:	19 95       	eicall
	return c;
     302:	89 81       	ldd	r24, Y+1	; 0x01
}
     304:	08 2e       	mov	r0, r24
     306:	00 0c       	add	r0, r0
     308:	99 0b       	sbc	r25, r25
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     312:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     314:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <stdio_base>
     318:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <stdio_base+0x1>
     31c:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <ptr_put>
     320:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <ptr_put+0x1>
     324:	19 95       	eicall
     326:	99 23       	and	r25, r25
     328:	1c f0       	brlt	.+6      	; 0x330 <_write+0x1e>
		return -1;
	}
	return 1;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     334:	08 95       	ret

00000336 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     336:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     338:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     33a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     33c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     33e:	60 83       	st	Z, r22
	ret                             // Return to caller
     340:	08 95       	ret

00000342 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	08 b6       	in	r0, 0x38	; 56
     34e:	0f 92       	push	r0
     350:	18 be       	out	0x38, r1	; 56
     352:	0b b6       	in	r0, 0x3b	; 59
     354:	0f 92       	push	r0
     356:	1b be       	out	0x3b, r1	; 59
     358:	8f 93       	push	r24
     35a:	9f 93       	push	r25
     35c:	ef 93       	push	r30
     35e:	ff 93       	push	r31
	rtc_data.counter_high++;
     360:	e7 e9       	ldi	r30, 0x97	; 151
     362:	f0 e2       	ldi	r31, 0x20	; 32
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	80 83       	st	Z, r24
     36c:	91 83       	std	Z+1, r25	; 0x01
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	0f 90       	pop	r0
     378:	0b be       	out	0x3b, r0	; 59
     37a:	0f 90       	pop	r0
     37c:	08 be       	out	0x38, r0	; 56
     37e:	0f 90       	pop	r0
     380:	0f be       	out	0x3f, r0	; 63
     382:	0f 90       	pop	r0
     384:	1f 90       	pop	r1
     386:	18 95       	reti

00000388 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	08 b6       	in	r0, 0x38	; 56
     394:	0f 92       	push	r0
     396:	18 be       	out	0x38, r1	; 56
     398:	09 b6       	in	r0, 0x39	; 57
     39a:	0f 92       	push	r0
     39c:	19 be       	out	0x39, r1	; 57
     39e:	0b b6       	in	r0, 0x3b	; 59
     3a0:	0f 92       	push	r0
     3a2:	1b be       	out	0x3b, r1	; 59
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     3c8:	e7 e9       	ldi	r30, 0x97	; 151
     3ca:	f0 e2       	ldi	r31, 0x20	; 32
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	22 81       	ldd	r18, Z+2	; 0x02
     3d2:	33 81       	ldd	r19, Z+3	; 0x03
     3d4:	82 17       	cp	r24, r18
     3d6:	93 07       	cpc	r25, r19
     3d8:	f0 f1       	brcs	.+124    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     3e0:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <rtc_data+0x6>
     3e4:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <rtc_data+0x7>
     3e8:	30 97       	sbiw	r30, 0x00	; 0
     3ea:	a9 f1       	breq	.+106    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     3ec:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     3f0:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	99 27       	eor	r25, r25
     3fc:	88 27       	eor	r24, r24
     3fe:	ab 01       	movw	r20, r22
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8c 01       	movw	r16, r24
     406:	9d 01       	movw	r18, r26
     408:	04 2b       	or	r16, r20
     40a:	15 2b       	or	r17, r21
     40c:	26 2b       	or	r18, r22
     40e:	37 2b       	or	r19, r23
     410:	c9 01       	movw	r24, r18
     412:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     414:	a7 e9       	ldi	r26, 0x97	; 151
     416:	b0 e2       	ldi	r27, 0x20	; 32
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	0d 91       	ld	r16, X+
     41c:	1c 91       	ld	r17, X
     41e:	13 97       	sbiw	r26, 0x03	; 3
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	98 01       	movw	r18, r16
     426:	11 27       	eor	r17, r17
     428:	00 27       	eor	r16, r16
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	cd 90       	ld	r12, X+
     42e:	dc 90       	ld	r13, X
     430:	15 97       	sbiw	r26, 0x05	; 5
     432:	e1 2c       	mov	r14, r1
     434:	f1 2c       	mov	r15, r1
     436:	0c 29       	or	r16, r12
     438:	1d 29       	or	r17, r13
     43a:	2e 29       	or	r18, r14
     43c:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     43e:	06 17       	cp	r16, r22
     440:	17 07       	cpc	r17, r23
     442:	28 07       	cpc	r18, r24
     444:	39 07       	cpc	r19, r25
     446:	30 f0       	brcs	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				count = alarm + 1;
     448:	c9 01       	movw	r24, r18
     44a:	b8 01       	movw	r22, r16
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	8f 4f       	sbci	r24, 0xFF	; 255
     452:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     454:	19 95       	eicall
		}
	}
}
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	bf 91       	pop	r27
     45c:	af 91       	pop	r26
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	7f 91       	pop	r23
     464:	6f 91       	pop	r22
     466:	5f 91       	pop	r21
     468:	4f 91       	pop	r20
     46a:	3f 91       	pop	r19
     46c:	2f 91       	pop	r18
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     4c4:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <tc_tcc0_ovf_callback>
     4c8:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <tc_tcc0_ovf_callback+0x1>
     4cc:	30 97       	sbiw	r30, 0x00	; 0
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     4d0:	19 95       	eicall
	}
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	0b be       	out	0x3b, r0	; 59
     4ee:	0f 90       	pop	r0
     4f0:	09 be       	out	0x39, r0	; 57
     4f2:	0f 90       	pop	r0
     4f4:	08 be       	out	0x38, r0	; 56
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	08 b6       	in	r0, 0x38	; 56
     50c:	0f 92       	push	r0
     50e:	18 be       	out	0x38, r1	; 56
     510:	09 b6       	in	r0, 0x39	; 57
     512:	0f 92       	push	r0
     514:	19 be       	out	0x39, r1	; 57
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	1b be       	out	0x3b, r1	; 59
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	4f 93       	push	r20
     522:	5f 93       	push	r21
     524:	6f 93       	push	r22
     526:	7f 93       	push	r23
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	af 93       	push	r26
     52e:	bf 93       	push	r27
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     534:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <tc_tcc0_err_callback>
     538:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <tc_tcc0_err_callback+0x1>
     53c:	30 97       	sbiw	r30, 0x00	; 0
     53e:	09 f0       	breq	.+2      	; 0x542 <__vector_15+0x42>
		tc_tcc0_err_callback();
     540:	19 95       	eicall
	}
}
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0b be       	out	0x3b, r0	; 59
     55e:	0f 90       	pop	r0
     560:	09 be       	out	0x39, r0	; 57
     562:	0f 90       	pop	r0
     564:	08 be       	out	0x38, r0	; 56
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	08 b6       	in	r0, 0x38	; 56
     57c:	0f 92       	push	r0
     57e:	18 be       	out	0x38, r1	; 56
     580:	09 b6       	in	r0, 0x39	; 57
     582:	0f 92       	push	r0
     584:	19 be       	out	0x39, r1	; 57
     586:	0b b6       	in	r0, 0x3b	; 59
     588:	0f 92       	push	r0
     58a:	1b be       	out	0x3b, r1	; 59
     58c:	2f 93       	push	r18
     58e:	3f 93       	push	r19
     590:	4f 93       	push	r20
     592:	5f 93       	push	r21
     594:	6f 93       	push	r22
     596:	7f 93       	push	r23
     598:	8f 93       	push	r24
     59a:	9f 93       	push	r25
     59c:	af 93       	push	r26
     59e:	bf 93       	push	r27
     5a0:	ef 93       	push	r30
     5a2:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     5a4:	e0 91 80 20 	lds	r30, 0x2080	; 0x802080 <tc_tcc0_cca_callback>
     5a8:	f0 91 81 20 	lds	r31, 0x2081	; 0x802081 <tc_tcc0_cca_callback+0x1>
     5ac:	30 97       	sbiw	r30, 0x00	; 0
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     5b0:	19 95       	eicall
	}
}
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0b be       	out	0x3b, r0	; 59
     5ce:	0f 90       	pop	r0
     5d0:	09 be       	out	0x39, r0	; 57
     5d2:	0f 90       	pop	r0
     5d4:	08 be       	out	0x38, r0	; 56
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	08 b6       	in	r0, 0x38	; 56
     5ec:	0f 92       	push	r0
     5ee:	18 be       	out	0x38, r1	; 56
     5f0:	09 b6       	in	r0, 0x39	; 57
     5f2:	0f 92       	push	r0
     5f4:	19 be       	out	0x39, r1	; 57
     5f6:	0b b6       	in	r0, 0x3b	; 59
     5f8:	0f 92       	push	r0
     5fa:	1b be       	out	0x3b, r1	; 59
     5fc:	2f 93       	push	r18
     5fe:	3f 93       	push	r19
     600:	4f 93       	push	r20
     602:	5f 93       	push	r21
     604:	6f 93       	push	r22
     606:	7f 93       	push	r23
     608:	8f 93       	push	r24
     60a:	9f 93       	push	r25
     60c:	af 93       	push	r26
     60e:	bf 93       	push	r27
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     614:	e0 91 7e 20 	lds	r30, 0x207E	; 0x80207e <tc_tcc0_ccb_callback>
     618:	f0 91 7f 20 	lds	r31, 0x207F	; 0x80207f <tc_tcc0_ccb_callback+0x1>
     61c:	30 97       	sbiw	r30, 0x00	; 0
     61e:	09 f0       	breq	.+2      	; 0x622 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     620:	19 95       	eicall
	}
}
     622:	ff 91       	pop	r31
     624:	ef 91       	pop	r30
     626:	bf 91       	pop	r27
     628:	af 91       	pop	r26
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	7f 91       	pop	r23
     630:	6f 91       	pop	r22
     632:	5f 91       	pop	r21
     634:	4f 91       	pop	r20
     636:	3f 91       	pop	r19
     638:	2f 91       	pop	r18
     63a:	0f 90       	pop	r0
     63c:	0b be       	out	0x3b, r0	; 59
     63e:	0f 90       	pop	r0
     640:	09 be       	out	0x39, r0	; 57
     642:	0f 90       	pop	r0
     644:	08 be       	out	0x38, r0	; 56
     646:	0f 90       	pop	r0
     648:	0f be       	out	0x3f, r0	; 63
     64a:	0f 90       	pop	r0
     64c:	1f 90       	pop	r1
     64e:	18 95       	reti

00000650 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	08 b6       	in	r0, 0x38	; 56
     65c:	0f 92       	push	r0
     65e:	18 be       	out	0x38, r1	; 56
     660:	09 b6       	in	r0, 0x39	; 57
     662:	0f 92       	push	r0
     664:	19 be       	out	0x39, r1	; 57
     666:	0b b6       	in	r0, 0x3b	; 59
     668:	0f 92       	push	r0
     66a:	1b be       	out	0x3b, r1	; 59
     66c:	2f 93       	push	r18
     66e:	3f 93       	push	r19
     670:	4f 93       	push	r20
     672:	5f 93       	push	r21
     674:	6f 93       	push	r22
     676:	7f 93       	push	r23
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	af 93       	push	r26
     67e:	bf 93       	push	r27
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     684:	e0 91 7c 20 	lds	r30, 0x207C	; 0x80207c <tc_tcc0_ccc_callback>
     688:	f0 91 7d 20 	lds	r31, 0x207D	; 0x80207d <tc_tcc0_ccc_callback+0x1>
     68c:	30 97       	sbiw	r30, 0x00	; 0
     68e:	09 f0       	breq	.+2      	; 0x692 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     690:	19 95       	eicall
	}
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0b be       	out	0x3b, r0	; 59
     6ae:	0f 90       	pop	r0
     6b0:	09 be       	out	0x39, r0	; 57
     6b2:	0f 90       	pop	r0
     6b4:	08 be       	out	0x38, r0	; 56
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	0f 90       	pop	r0
     6bc:	1f 90       	pop	r1
     6be:	18 95       	reti

000006c0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     6c0:	1f 92       	push	r1
     6c2:	0f 92       	push	r0
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	0f 92       	push	r0
     6c8:	11 24       	eor	r1, r1
     6ca:	08 b6       	in	r0, 0x38	; 56
     6cc:	0f 92       	push	r0
     6ce:	18 be       	out	0x38, r1	; 56
     6d0:	09 b6       	in	r0, 0x39	; 57
     6d2:	0f 92       	push	r0
     6d4:	19 be       	out	0x39, r1	; 57
     6d6:	0b b6       	in	r0, 0x3b	; 59
     6d8:	0f 92       	push	r0
     6da:	1b be       	out	0x3b, r1	; 59
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     6f4:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <tc_tcc0_ccd_callback>
     6f8:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <tc_tcc0_ccd_callback+0x1>
     6fc:	30 97       	sbiw	r30, 0x00	; 0
     6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     700:	19 95       	eicall
	}
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	0b be       	out	0x3b, r0	; 59
     71e:	0f 90       	pop	r0
     720:	09 be       	out	0x39, r0	; 57
     722:	0f 90       	pop	r0
     724:	08 be       	out	0x38, r0	; 56
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	08 b6       	in	r0, 0x38	; 56
     73c:	0f 92       	push	r0
     73e:	18 be       	out	0x38, r1	; 56
     740:	09 b6       	in	r0, 0x39	; 57
     742:	0f 92       	push	r0
     744:	19 be       	out	0x39, r1	; 57
     746:	0b b6       	in	r0, 0x3b	; 59
     748:	0f 92       	push	r0
     74a:	1b be       	out	0x3b, r1	; 59
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     764:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <tc_tcc1_ovf_callback>
     768:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <tc_tcc1_ovf_callback+0x1>
     76c:	30 97       	sbiw	r30, 0x00	; 0
     76e:	09 f0       	breq	.+2      	; 0x772 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     770:	19 95       	eicall
	}
}
     772:	ff 91       	pop	r31
     774:	ef 91       	pop	r30
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	7f 91       	pop	r23
     780:	6f 91       	pop	r22
     782:	5f 91       	pop	r21
     784:	4f 91       	pop	r20
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	0b be       	out	0x3b, r0	; 59
     78e:	0f 90       	pop	r0
     790:	09 be       	out	0x39, r0	; 57
     792:	0f 90       	pop	r0
     794:	08 be       	out	0x38, r0	; 56
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	08 b6       	in	r0, 0x38	; 56
     7ac:	0f 92       	push	r0
     7ae:	18 be       	out	0x38, r1	; 56
     7b0:	09 b6       	in	r0, 0x39	; 57
     7b2:	0f 92       	push	r0
     7b4:	19 be       	out	0x39, r1	; 57
     7b6:	0b b6       	in	r0, 0x3b	; 59
     7b8:	0f 92       	push	r0
     7ba:	1b be       	out	0x3b, r1	; 59
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     7d4:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <tc_tcc1_err_callback>
     7d8:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <tc_tcc1_err_callback+0x1>
     7dc:	30 97       	sbiw	r30, 0x00	; 0
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_21+0x42>
		tc_tcc1_err_callback();
     7e0:	19 95       	eicall
	}
}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	09 be       	out	0x39, r0	; 57
     802:	0f 90       	pop	r0
     804:	08 be       	out	0x38, r0	; 56
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	08 b6       	in	r0, 0x38	; 56
     81c:	0f 92       	push	r0
     81e:	18 be       	out	0x38, r1	; 56
     820:	09 b6       	in	r0, 0x39	; 57
     822:	0f 92       	push	r0
     824:	19 be       	out	0x39, r1	; 57
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	1b be       	out	0x3b, r1	; 59
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     844:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <tc_tcc1_cca_callback>
     848:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <tc_tcc1_cca_callback+0x1>
     84c:	30 97       	sbiw	r30, 0x00	; 0
     84e:	09 f0       	breq	.+2      	; 0x852 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     850:	19 95       	eicall
	}
}
     852:	ff 91       	pop	r31
     854:	ef 91       	pop	r30
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	7f 91       	pop	r23
     860:	6f 91       	pop	r22
     862:	5f 91       	pop	r21
     864:	4f 91       	pop	r20
     866:	3f 91       	pop	r19
     868:	2f 91       	pop	r18
     86a:	0f 90       	pop	r0
     86c:	0b be       	out	0x3b, r0	; 59
     86e:	0f 90       	pop	r0
     870:	09 be       	out	0x39, r0	; 57
     872:	0f 90       	pop	r0
     874:	08 be       	out	0x38, r0	; 56
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	0f 90       	pop	r0
     87c:	1f 90       	pop	r1
     87e:	18 95       	reti

00000880 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	11 24       	eor	r1, r1
     88a:	08 b6       	in	r0, 0x38	; 56
     88c:	0f 92       	push	r0
     88e:	18 be       	out	0x38, r1	; 56
     890:	09 b6       	in	r0, 0x39	; 57
     892:	0f 92       	push	r0
     894:	19 be       	out	0x39, r1	; 57
     896:	0b b6       	in	r0, 0x3b	; 59
     898:	0f 92       	push	r0
     89a:	1b be       	out	0x3b, r1	; 59
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     8b4:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcc1_ccb_callback>
     8b8:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcc1_ccb_callback+0x1>
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	09 f0       	breq	.+2      	; 0x8c2 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     8c0:	19 95       	eicall
	}
}
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	bf 91       	pop	r27
     8c8:	af 91       	pop	r26
     8ca:	9f 91       	pop	r25
     8cc:	8f 91       	pop	r24
     8ce:	7f 91       	pop	r23
     8d0:	6f 91       	pop	r22
     8d2:	5f 91       	pop	r21
     8d4:	4f 91       	pop	r20
     8d6:	3f 91       	pop	r19
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0b be       	out	0x3b, r0	; 59
     8de:	0f 90       	pop	r0
     8e0:	09 be       	out	0x39, r0	; 57
     8e2:	0f 90       	pop	r0
     8e4:	08 be       	out	0x38, r0	; 56
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	0f 90       	pop	r0
     8ec:	1f 90       	pop	r1
     8ee:	18 95       	reti

000008f0 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	08 b6       	in	r0, 0x38	; 56
     8fc:	0f 92       	push	r0
     8fe:	18 be       	out	0x38, r1	; 56
     900:	09 b6       	in	r0, 0x39	; 57
     902:	0f 92       	push	r0
     904:	19 be       	out	0x39, r1	; 57
     906:	0b b6       	in	r0, 0x3b	; 59
     908:	0f 92       	push	r0
     90a:	1b be       	out	0x3b, r1	; 59
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     924:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcd0_ovf_callback>
     928:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcd0_ovf_callback+0x1>
     92c:	30 97       	sbiw	r30, 0x00	; 0
     92e:	09 f0       	breq	.+2      	; 0x932 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     930:	19 95       	eicall
	}
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0b be       	out	0x3b, r0	; 59
     94e:	0f 90       	pop	r0
     950:	09 be       	out	0x39, r0	; 57
     952:	0f 90       	pop	r0
     954:	08 be       	out	0x38, r0	; 56
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	08 b6       	in	r0, 0x38	; 56
     96c:	0f 92       	push	r0
     96e:	18 be       	out	0x38, r1	; 56
     970:	09 b6       	in	r0, 0x39	; 57
     972:	0f 92       	push	r0
     974:	19 be       	out	0x39, r1	; 57
     976:	0b b6       	in	r0, 0x3b	; 59
     978:	0f 92       	push	r0
     97a:	1b be       	out	0x3b, r1	; 59
     97c:	2f 93       	push	r18
     97e:	3f 93       	push	r19
     980:	4f 93       	push	r20
     982:	5f 93       	push	r21
     984:	6f 93       	push	r22
     986:	7f 93       	push	r23
     988:	8f 93       	push	r24
     98a:	9f 93       	push	r25
     98c:	af 93       	push	r26
     98e:	bf 93       	push	r27
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     994:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcd0_err_callback>
     998:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcd0_err_callback+0x1>
     99c:	30 97       	sbiw	r30, 0x00	; 0
     99e:	09 f0       	breq	.+2      	; 0x9a2 <__vector_78+0x42>
		tc_tcd0_err_callback();
     9a0:	19 95       	eicall
	}
}
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	bf 91       	pop	r27
     9a8:	af 91       	pop	r26
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	7f 91       	pop	r23
     9b0:	6f 91       	pop	r22
     9b2:	5f 91       	pop	r21
     9b4:	4f 91       	pop	r20
     9b6:	3f 91       	pop	r19
     9b8:	2f 91       	pop	r18
     9ba:	0f 90       	pop	r0
     9bc:	0b be       	out	0x3b, r0	; 59
     9be:	0f 90       	pop	r0
     9c0:	09 be       	out	0x39, r0	; 57
     9c2:	0f 90       	pop	r0
     9c4:	08 be       	out	0x38, r0	; 56
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	08 b6       	in	r0, 0x38	; 56
     9dc:	0f 92       	push	r0
     9de:	18 be       	out	0x38, r1	; 56
     9e0:	09 b6       	in	r0, 0x39	; 57
     9e2:	0f 92       	push	r0
     9e4:	19 be       	out	0x39, r1	; 57
     9e6:	0b b6       	in	r0, 0x3b	; 59
     9e8:	0f 92       	push	r0
     9ea:	1b be       	out	0x3b, r1	; 59
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     a04:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcd0_cca_callback>
     a08:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcd0_cca_callback+0x1>
     a0c:	30 97       	sbiw	r30, 0x00	; 0
     a0e:	09 f0       	breq	.+2      	; 0xa12 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     a10:	19 95       	eicall
	}
}
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	0b be       	out	0x3b, r0	; 59
     a2e:	0f 90       	pop	r0
     a30:	09 be       	out	0x39, r0	; 57
     a32:	0f 90       	pop	r0
     a34:	08 be       	out	0x38, r0	; 56
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	08 b6       	in	r0, 0x38	; 56
     a4c:	0f 92       	push	r0
     a4e:	18 be       	out	0x38, r1	; 56
     a50:	09 b6       	in	r0, 0x39	; 57
     a52:	0f 92       	push	r0
     a54:	19 be       	out	0x39, r1	; 57
     a56:	0b b6       	in	r0, 0x3b	; 59
     a58:	0f 92       	push	r0
     a5a:	1b be       	out	0x3b, r1	; 59
     a5c:	2f 93       	push	r18
     a5e:	3f 93       	push	r19
     a60:	4f 93       	push	r20
     a62:	5f 93       	push	r21
     a64:	6f 93       	push	r22
     a66:	7f 93       	push	r23
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	af 93       	push	r26
     a6e:	bf 93       	push	r27
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     a74:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcd0_ccb_callback>
     a78:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcd0_ccb_callback+0x1>
     a7c:	30 97       	sbiw	r30, 0x00	; 0
     a7e:	09 f0       	breq	.+2      	; 0xa82 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     a80:	19 95       	eicall
	}
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0b be       	out	0x3b, r0	; 59
     a9e:	0f 90       	pop	r0
     aa0:	09 be       	out	0x39, r0	; 57
     aa2:	0f 90       	pop	r0
     aa4:	08 be       	out	0x38, r0	; 56
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	08 b6       	in	r0, 0x38	; 56
     abc:	0f 92       	push	r0
     abe:	18 be       	out	0x38, r1	; 56
     ac0:	09 b6       	in	r0, 0x39	; 57
     ac2:	0f 92       	push	r0
     ac4:	19 be       	out	0x39, r1	; 57
     ac6:	0b b6       	in	r0, 0x3b	; 59
     ac8:	0f 92       	push	r0
     aca:	1b be       	out	0x3b, r1	; 59
     acc:	2f 93       	push	r18
     ace:	3f 93       	push	r19
     ad0:	4f 93       	push	r20
     ad2:	5f 93       	push	r21
     ad4:	6f 93       	push	r22
     ad6:	7f 93       	push	r23
     ad8:	8f 93       	push	r24
     ada:	9f 93       	push	r25
     adc:	af 93       	push	r26
     ade:	bf 93       	push	r27
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     ae4:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcd0_ccc_callback>
     ae8:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcd0_ccc_callback+0x1>
     aec:	30 97       	sbiw	r30, 0x00	; 0
     aee:	09 f0       	breq	.+2      	; 0xaf2 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     af0:	19 95       	eicall
	}
}
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	bf 91       	pop	r27
     af8:	af 91       	pop	r26
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	7f 91       	pop	r23
     b00:	6f 91       	pop	r22
     b02:	5f 91       	pop	r21
     b04:	4f 91       	pop	r20
     b06:	3f 91       	pop	r19
     b08:	2f 91       	pop	r18
     b0a:	0f 90       	pop	r0
     b0c:	0b be       	out	0x3b, r0	; 59
     b0e:	0f 90       	pop	r0
     b10:	09 be       	out	0x39, r0	; 57
     b12:	0f 90       	pop	r0
     b14:	08 be       	out	0x38, r0	; 56
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	08 b6       	in	r0, 0x38	; 56
     b2c:	0f 92       	push	r0
     b2e:	18 be       	out	0x38, r1	; 56
     b30:	09 b6       	in	r0, 0x39	; 57
     b32:	0f 92       	push	r0
     b34:	19 be       	out	0x39, r1	; 57
     b36:	0b b6       	in	r0, 0x3b	; 59
     b38:	0f 92       	push	r0
     b3a:	1b be       	out	0x3b, r1	; 59
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     b54:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcd0_ccd_callback>
     b58:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcd0_ccd_callback+0x1>
     b5c:	30 97       	sbiw	r30, 0x00	; 0
     b5e:	09 f0       	breq	.+2      	; 0xb62 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     b60:	19 95       	eicall
	}
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0b be       	out	0x3b, r0	; 59
     b7e:	0f 90       	pop	r0
     b80:	09 be       	out	0x39, r0	; 57
     b82:	0f 90       	pop	r0
     b84:	08 be       	out	0x38, r0	; 56
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	08 b6       	in	r0, 0x38	; 56
     b9c:	0f 92       	push	r0
     b9e:	18 be       	out	0x38, r1	; 56
     ba0:	09 b6       	in	r0, 0x39	; 57
     ba2:	0f 92       	push	r0
     ba4:	19 be       	out	0x39, r1	; 57
     ba6:	0b b6       	in	r0, 0x3b	; 59
     ba8:	0f 92       	push	r0
     baa:	1b be       	out	0x3b, r1	; 59
     bac:	2f 93       	push	r18
     bae:	3f 93       	push	r19
     bb0:	4f 93       	push	r20
     bb2:	5f 93       	push	r21
     bb4:	6f 93       	push	r22
     bb6:	7f 93       	push	r23
     bb8:	8f 93       	push	r24
     bba:	9f 93       	push	r25
     bbc:	af 93       	push	r26
     bbe:	bf 93       	push	r27
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     bc4:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcd1_ovf_callback>
     bc8:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcd1_ovf_callback+0x1>
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     bd0:	19 95       	eicall
	}
}
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0b be       	out	0x3b, r0	; 59
     bee:	0f 90       	pop	r0
     bf0:	09 be       	out	0x39, r0	; 57
     bf2:	0f 90       	pop	r0
     bf4:	08 be       	out	0x38, r0	; 56
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	08 b6       	in	r0, 0x38	; 56
     c0c:	0f 92       	push	r0
     c0e:	18 be       	out	0x38, r1	; 56
     c10:	09 b6       	in	r0, 0x39	; 57
     c12:	0f 92       	push	r0
     c14:	19 be       	out	0x39, r1	; 57
     c16:	0b b6       	in	r0, 0x3b	; 59
     c18:	0f 92       	push	r0
     c1a:	1b be       	out	0x3b, r1	; 59
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     c34:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcd1_err_callback>
     c38:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcd1_err_callback+0x1>
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	09 f0       	breq	.+2      	; 0xc42 <__vector_84+0x42>
		tc_tcd1_err_callback();
     c40:	19 95       	eicall
	}
}
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0b be       	out	0x3b, r0	; 59
     c5e:	0f 90       	pop	r0
     c60:	09 be       	out	0x39, r0	; 57
     c62:	0f 90       	pop	r0
     c64:	08 be       	out	0x38, r0	; 56
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	08 b6       	in	r0, 0x38	; 56
     c7c:	0f 92       	push	r0
     c7e:	18 be       	out	0x38, r1	; 56
     c80:	09 b6       	in	r0, 0x39	; 57
     c82:	0f 92       	push	r0
     c84:	19 be       	out	0x39, r1	; 57
     c86:	0b b6       	in	r0, 0x3b	; 59
     c88:	0f 92       	push	r0
     c8a:	1b be       	out	0x3b, r1	; 59
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     ca4:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcd1_cca_callback>
     ca8:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcd1_cca_callback+0x1>
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	09 f0       	breq	.+2      	; 0xcb2 <__vector_85+0x42>
		tc_tcd1_cca_callback();
     cb0:	19 95       	eicall
	}
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0b be       	out	0x3b, r0	; 59
     cce:	0f 90       	pop	r0
     cd0:	09 be       	out	0x39, r0	; 57
     cd2:	0f 90       	pop	r0
     cd4:	08 be       	out	0x38, r0	; 56
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0
     cdc:	1f 90       	pop	r1
     cde:	18 95       	reti

00000ce0 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     ce0:	1f 92       	push	r1
     ce2:	0f 92       	push	r0
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	0f 92       	push	r0
     ce8:	11 24       	eor	r1, r1
     cea:	08 b6       	in	r0, 0x38	; 56
     cec:	0f 92       	push	r0
     cee:	18 be       	out	0x38, r1	; 56
     cf0:	09 b6       	in	r0, 0x39	; 57
     cf2:	0f 92       	push	r0
     cf4:	19 be       	out	0x39, r1	; 57
     cf6:	0b b6       	in	r0, 0x3b	; 59
     cf8:	0f 92       	push	r0
     cfa:	1b be       	out	0x3b, r1	; 59
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     d14:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcd1_ccb_callback>
     d18:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcd1_ccb_callback+0x1>
     d1c:	30 97       	sbiw	r30, 0x00	; 0
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     d20:	19 95       	eicall
	}
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0b be       	out	0x3b, r0	; 59
     d3e:	0f 90       	pop	r0
     d40:	09 be       	out	0x39, r0	; 57
     d42:	0f 90       	pop	r0
     d44:	08 be       	out	0x38, r0	; 56
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	08 b6       	in	r0, 0x38	; 56
     d5c:	0f 92       	push	r0
     d5e:	18 be       	out	0x38, r1	; 56
     d60:	09 b6       	in	r0, 0x39	; 57
     d62:	0f 92       	push	r0
     d64:	19 be       	out	0x39, r1	; 57
     d66:	0b b6       	in	r0, 0x3b	; 59
     d68:	0f 92       	push	r0
     d6a:	1b be       	out	0x3b, r1	; 59
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     d84:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tce0_ovf_callback>
     d88:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tce0_ovf_callback+0x1>
     d8c:	30 97       	sbiw	r30, 0x00	; 0
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__vector_47+0x42>
		tc_tce0_ovf_callback();
     d90:	19 95       	eicall
	}
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	09 be       	out	0x39, r0	; 57
     db2:	0f 90       	pop	r0
     db4:	08 be       	out	0x38, r0	; 56
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	08 b6       	in	r0, 0x38	; 56
     dcc:	0f 92       	push	r0
     dce:	18 be       	out	0x38, r1	; 56
     dd0:	09 b6       	in	r0, 0x39	; 57
     dd2:	0f 92       	push	r0
     dd4:	19 be       	out	0x39, r1	; 57
     dd6:	0b b6       	in	r0, 0x3b	; 59
     dd8:	0f 92       	push	r0
     dda:	1b be       	out	0x3b, r1	; 59
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     df4:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tce0_err_callback>
     df8:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tce0_err_callback+0x1>
     dfc:	30 97       	sbiw	r30, 0x00	; 0
     dfe:	09 f0       	breq	.+2      	; 0xe02 <__vector_48+0x42>
		tc_tce0_err_callback();
     e00:	19 95       	eicall
	}
}
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	bf 91       	pop	r27
     e08:	af 91       	pop	r26
     e0a:	9f 91       	pop	r25
     e0c:	8f 91       	pop	r24
     e0e:	7f 91       	pop	r23
     e10:	6f 91       	pop	r22
     e12:	5f 91       	pop	r21
     e14:	4f 91       	pop	r20
     e16:	3f 91       	pop	r19
     e18:	2f 91       	pop	r18
     e1a:	0f 90       	pop	r0
     e1c:	0b be       	out	0x3b, r0	; 59
     e1e:	0f 90       	pop	r0
     e20:	09 be       	out	0x39, r0	; 57
     e22:	0f 90       	pop	r0
     e24:	08 be       	out	0x38, r0	; 56
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	08 b6       	in	r0, 0x38	; 56
     e3c:	0f 92       	push	r0
     e3e:	18 be       	out	0x38, r1	; 56
     e40:	09 b6       	in	r0, 0x39	; 57
     e42:	0f 92       	push	r0
     e44:	19 be       	out	0x39, r1	; 57
     e46:	0b b6       	in	r0, 0x3b	; 59
     e48:	0f 92       	push	r0
     e4a:	1b be       	out	0x3b, r1	; 59
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     e64:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tce0_cca_callback>
     e68:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tce0_cca_callback+0x1>
     e6c:	30 97       	sbiw	r30, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <__vector_49+0x42>
		tc_tce0_cca_callback();
     e70:	19 95       	eicall
	}
}
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	09 be       	out	0x39, r0	; 57
     e92:	0f 90       	pop	r0
     e94:	08 be       	out	0x38, r0	; 56
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	08 b6       	in	r0, 0x38	; 56
     eac:	0f 92       	push	r0
     eae:	18 be       	out	0x38, r1	; 56
     eb0:	09 b6       	in	r0, 0x39	; 57
     eb2:	0f 92       	push	r0
     eb4:	19 be       	out	0x39, r1	; 57
     eb6:	0b b6       	in	r0, 0x3b	; 59
     eb8:	0f 92       	push	r0
     eba:	1b be       	out	0x3b, r1	; 59
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     ed4:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tce0_ccb_callback>
     ed8:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tce0_ccb_callback+0x1>
     edc:	30 97       	sbiw	r30, 0x00	; 0
     ede:	09 f0       	breq	.+2      	; 0xee2 <__vector_50+0x42>
		tc_tce0_ccb_callback();
     ee0:	19 95       	eicall
	}
}
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0b be       	out	0x3b, r0	; 59
     efe:	0f 90       	pop	r0
     f00:	09 be       	out	0x39, r0	; 57
     f02:	0f 90       	pop	r0
     f04:	08 be       	out	0x38, r0	; 56
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	08 b6       	in	r0, 0x38	; 56
     f1c:	0f 92       	push	r0
     f1e:	18 be       	out	0x38, r1	; 56
     f20:	09 b6       	in	r0, 0x39	; 57
     f22:	0f 92       	push	r0
     f24:	19 be       	out	0x39, r1	; 57
     f26:	0b b6       	in	r0, 0x3b	; 59
     f28:	0f 92       	push	r0
     f2a:	1b be       	out	0x3b, r1	; 59
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     f44:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tce0_ccc_callback>
     f48:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tce0_ccc_callback+0x1>
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__vector_51+0x42>
		tc_tce0_ccc_callback();
     f50:	19 95       	eicall
	}
}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0b be       	out	0x3b, r0	; 59
     f6e:	0f 90       	pop	r0
     f70:	09 be       	out	0x39, r0	; 57
     f72:	0f 90       	pop	r0
     f74:	08 be       	out	0x38, r0	; 56
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	08 b6       	in	r0, 0x38	; 56
     f8c:	0f 92       	push	r0
     f8e:	18 be       	out	0x38, r1	; 56
     f90:	09 b6       	in	r0, 0x39	; 57
     f92:	0f 92       	push	r0
     f94:	19 be       	out	0x39, r1	; 57
     f96:	0b b6       	in	r0, 0x3b	; 59
     f98:	0f 92       	push	r0
     f9a:	1b be       	out	0x3b, r1	; 59
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     fb4:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tce0_ccd_callback>
     fb8:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tce0_ccd_callback+0x1>
     fbc:	30 97       	sbiw	r30, 0x00	; 0
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <__vector_52+0x42>
		tc_tce0_ccd_callback();
     fc0:	19 95       	eicall
	}
}
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0b be       	out	0x3b, r0	; 59
     fde:	0f 90       	pop	r0
     fe0:	09 be       	out	0x39, r0	; 57
     fe2:	0f 90       	pop	r0
     fe4:	08 be       	out	0x38, r0	; 56
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	08 b6       	in	r0, 0x38	; 56
     ffc:	0f 92       	push	r0
     ffe:	18 be       	out	0x38, r1	; 56
    1000:	09 b6       	in	r0, 0x39	; 57
    1002:	0f 92       	push	r0
    1004:	19 be       	out	0x39, r1	; 57
    1006:	0b b6       	in	r0, 0x3b	; 59
    1008:	0f 92       	push	r0
    100a:	1b be       	out	0x3b, r1	; 59
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1024:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tce1_ovf_callback>
    1028:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tce1_ovf_callback+0x1>
    102c:	30 97       	sbiw	r30, 0x00	; 0
    102e:	09 f0       	breq	.+2      	; 0x1032 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1030:	19 95       	eicall
	}
}
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0b be       	out	0x3b, r0	; 59
    104e:	0f 90       	pop	r0
    1050:	09 be       	out	0x39, r0	; 57
    1052:	0f 90       	pop	r0
    1054:	08 be       	out	0x38, r0	; 56
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	08 b6       	in	r0, 0x38	; 56
    106c:	0f 92       	push	r0
    106e:	18 be       	out	0x38, r1	; 56
    1070:	09 b6       	in	r0, 0x39	; 57
    1072:	0f 92       	push	r0
    1074:	19 be       	out	0x39, r1	; 57
    1076:	0b b6       	in	r0, 0x3b	; 59
    1078:	0f 92       	push	r0
    107a:	1b be       	out	0x3b, r1	; 59
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1094:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tce1_err_callback>
    1098:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tce1_err_callback+0x1>
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <__vector_54+0x42>
		tc_tce1_err_callback();
    10a0:	19 95       	eicall
	}
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0b be       	out	0x3b, r0	; 59
    10be:	0f 90       	pop	r0
    10c0:	09 be       	out	0x39, r0	; 57
    10c2:	0f 90       	pop	r0
    10c4:	08 be       	out	0x38, r0	; 56
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	08 b6       	in	r0, 0x38	; 56
    10dc:	0f 92       	push	r0
    10de:	18 be       	out	0x38, r1	; 56
    10e0:	09 b6       	in	r0, 0x39	; 57
    10e2:	0f 92       	push	r0
    10e4:	19 be       	out	0x39, r1	; 57
    10e6:	0b b6       	in	r0, 0x3b	; 59
    10e8:	0f 92       	push	r0
    10ea:	1b be       	out	0x3b, r1	; 59
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1104:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tce1_cca_callback>
    1108:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tce1_cca_callback+0x1>
    110c:	30 97       	sbiw	r30, 0x00	; 0
    110e:	09 f0       	breq	.+2      	; 0x1112 <__vector_55+0x42>
		tc_tce1_cca_callback();
    1110:	19 95       	eicall
	}
}
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0b be       	out	0x3b, r0	; 59
    112e:	0f 90       	pop	r0
    1130:	09 be       	out	0x39, r0	; 57
    1132:	0f 90       	pop	r0
    1134:	08 be       	out	0x38, r0	; 56
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	08 b6       	in	r0, 0x38	; 56
    114c:	0f 92       	push	r0
    114e:	18 be       	out	0x38, r1	; 56
    1150:	09 b6       	in	r0, 0x39	; 57
    1152:	0f 92       	push	r0
    1154:	19 be       	out	0x39, r1	; 57
    1156:	0b b6       	in	r0, 0x3b	; 59
    1158:	0f 92       	push	r0
    115a:	1b be       	out	0x3b, r1	; 59
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	4f 93       	push	r20
    1162:	5f 93       	push	r21
    1164:	6f 93       	push	r22
    1166:	7f 93       	push	r23
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    1170:	ef 93       	push	r30
    1172:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1174:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tce1_ccb_callback>
    1178:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tce1_ccb_callback+0x1>
    117c:	30 97       	sbiw	r30, 0x00	; 0
    117e:	09 f0       	breq	.+2      	; 0x1182 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1180:	19 95       	eicall
	}
}
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	bf 91       	pop	r27
    1188:	af 91       	pop	r26
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	7f 91       	pop	r23
    1190:	6f 91       	pop	r22
    1192:	5f 91       	pop	r21
    1194:	4f 91       	pop	r20
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	0f 90       	pop	r0
    119c:	0b be       	out	0x3b, r0	; 59
    119e:	0f 90       	pop	r0
    11a0:	09 be       	out	0x39, r0	; 57
    11a2:	0f 90       	pop	r0
    11a4:	08 be       	out	0x38, r0	; 56
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	08 b6       	in	r0, 0x38	; 56
    11bc:	0f 92       	push	r0
    11be:	18 be       	out	0x38, r1	; 56
    11c0:	09 b6       	in	r0, 0x39	; 57
    11c2:	0f 92       	push	r0
    11c4:	19 be       	out	0x39, r1	; 57
    11c6:	0b b6       	in	r0, 0x3b	; 59
    11c8:	0f 92       	push	r0
    11ca:	1b be       	out	0x3b, r1	; 59
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    11e4:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcf0_ovf_callback>
    11e8:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcf0_ovf_callback+0x1>
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    11f0:	19 95       	eicall
	}
}
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0b be       	out	0x3b, r0	; 59
    120e:	0f 90       	pop	r0
    1210:	09 be       	out	0x39, r0	; 57
    1212:	0f 90       	pop	r0
    1214:	08 be       	out	0x38, r0	; 56
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	08 b6       	in	r0, 0x38	; 56
    122c:	0f 92       	push	r0
    122e:	18 be       	out	0x38, r1	; 56
    1230:	09 b6       	in	r0, 0x39	; 57
    1232:	0f 92       	push	r0
    1234:	19 be       	out	0x39, r1	; 57
    1236:	0b b6       	in	r0, 0x3b	; 59
    1238:	0f 92       	push	r0
    123a:	1b be       	out	0x3b, r1	; 59
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1254:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcf0_err_callback>
    1258:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcf0_err_callback+0x1>
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	09 f0       	breq	.+2      	; 0x1262 <__vector_109+0x42>
		tc_tcf0_err_callback();
    1260:	19 95       	eicall
	}
}
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0b be       	out	0x3b, r0	; 59
    127e:	0f 90       	pop	r0
    1280:	09 be       	out	0x39, r0	; 57
    1282:	0f 90       	pop	r0
    1284:	08 be       	out	0x38, r0	; 56
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	08 b6       	in	r0, 0x38	; 56
    129c:	0f 92       	push	r0
    129e:	18 be       	out	0x38, r1	; 56
    12a0:	09 b6       	in	r0, 0x39	; 57
    12a2:	0f 92       	push	r0
    12a4:	19 be       	out	0x39, r1	; 57
    12a6:	0b b6       	in	r0, 0x3b	; 59
    12a8:	0f 92       	push	r0
    12aa:	1b be       	out	0x3b, r1	; 59
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    12c4:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcf0_cca_callback>
    12c8:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcf0_cca_callback+0x1>
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    12d0:	19 95       	eicall
	}
}
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0b be       	out	0x3b, r0	; 59
    12ee:	0f 90       	pop	r0
    12f0:	09 be       	out	0x39, r0	; 57
    12f2:	0f 90       	pop	r0
    12f4:	08 be       	out	0x38, r0	; 56
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	0f 90       	pop	r0
    12fc:	1f 90       	pop	r1
    12fe:	18 95       	reti

00001300 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	08 b6       	in	r0, 0x38	; 56
    130c:	0f 92       	push	r0
    130e:	18 be       	out	0x38, r1	; 56
    1310:	09 b6       	in	r0, 0x39	; 57
    1312:	0f 92       	push	r0
    1314:	19 be       	out	0x39, r1	; 57
    1316:	0b b6       	in	r0, 0x3b	; 59
    1318:	0f 92       	push	r0
    131a:	1b be       	out	0x3b, r1	; 59
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1334:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcf0_ccb_callback>
    1338:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcf0_ccb_callback+0x1>
    133c:	30 97       	sbiw	r30, 0x00	; 0
    133e:	09 f0       	breq	.+2      	; 0x1342 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1340:	19 95       	eicall
	}
}
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0b be       	out	0x3b, r0	; 59
    135e:	0f 90       	pop	r0
    1360:	09 be       	out	0x39, r0	; 57
    1362:	0f 90       	pop	r0
    1364:	08 be       	out	0x38, r0	; 56
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	08 b6       	in	r0, 0x38	; 56
    137c:	0f 92       	push	r0
    137e:	18 be       	out	0x38, r1	; 56
    1380:	09 b6       	in	r0, 0x39	; 57
    1382:	0f 92       	push	r0
    1384:	19 be       	out	0x39, r1	; 57
    1386:	0b b6       	in	r0, 0x3b	; 59
    1388:	0f 92       	push	r0
    138a:	1b be       	out	0x3b, r1	; 59
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    13a4:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcf0_ccc_callback>
    13a8:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcf0_ccc_callback+0x1>
    13ac:	30 97       	sbiw	r30, 0x00	; 0
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    13b0:	19 95       	eicall
	}
}
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	bf 91       	pop	r27
    13b8:	af 91       	pop	r26
    13ba:	9f 91       	pop	r25
    13bc:	8f 91       	pop	r24
    13be:	7f 91       	pop	r23
    13c0:	6f 91       	pop	r22
    13c2:	5f 91       	pop	r21
    13c4:	4f 91       	pop	r20
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0b be       	out	0x3b, r0	; 59
    13ce:	0f 90       	pop	r0
    13d0:	09 be       	out	0x39, r0	; 57
    13d2:	0f 90       	pop	r0
    13d4:	08 be       	out	0x38, r0	; 56
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	08 b6       	in	r0, 0x38	; 56
    13ec:	0f 92       	push	r0
    13ee:	18 be       	out	0x38, r1	; 56
    13f0:	09 b6       	in	r0, 0x39	; 57
    13f2:	0f 92       	push	r0
    13f4:	19 be       	out	0x39, r1	; 57
    13f6:	0b b6       	in	r0, 0x3b	; 59
    13f8:	0f 92       	push	r0
    13fa:	1b be       	out	0x3b, r1	; 59
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1414:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcf0_ccd_callback>
    1418:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcf0_ccd_callback+0x1>
    141c:	30 97       	sbiw	r30, 0x00	; 0
    141e:	09 f0       	breq	.+2      	; 0x1422 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1420:	19 95       	eicall
	}
}
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0b be       	out	0x3b, r0	; 59
    143e:	0f 90       	pop	r0
    1440:	09 be       	out	0x39, r0	; 57
    1442:	0f 90       	pop	r0
    1444:	08 be       	out	0x38, r0	; 56
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	08 b6       	in	r0, 0x38	; 56
    145c:	0f 92       	push	r0
    145e:	18 be       	out	0x38, r1	; 56
    1460:	09 b6       	in	r0, 0x39	; 57
    1462:	0f 92       	push	r0
    1464:	19 be       	out	0x39, r1	; 57
    1466:	0b b6       	in	r0, 0x3b	; 59
    1468:	0f 92       	push	r0
    146a:	1b be       	out	0x3b, r1	; 59
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1484:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcf1_ovf_callback>
    1488:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcf1_ovf_callback+0x1>
    148c:	30 97       	sbiw	r30, 0x00	; 0
    148e:	09 f0       	breq	.+2      	; 0x1492 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1490:	19 95       	eicall
	}
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0b be       	out	0x3b, r0	; 59
    14ae:	0f 90       	pop	r0
    14b0:	09 be       	out	0x39, r0	; 57
    14b2:	0f 90       	pop	r0
    14b4:	08 be       	out	0x38, r0	; 56
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	08 b6       	in	r0, 0x38	; 56
    14cc:	0f 92       	push	r0
    14ce:	18 be       	out	0x38, r1	; 56
    14d0:	09 b6       	in	r0, 0x39	; 57
    14d2:	0f 92       	push	r0
    14d4:	19 be       	out	0x39, r1	; 57
    14d6:	0b b6       	in	r0, 0x3b	; 59
    14d8:	0f 92       	push	r0
    14da:	1b be       	out	0x3b, r1	; 59
    14dc:	2f 93       	push	r18
    14de:	3f 93       	push	r19
    14e0:	4f 93       	push	r20
    14e2:	5f 93       	push	r21
    14e4:	6f 93       	push	r22
    14e6:	7f 93       	push	r23
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
    14ec:	af 93       	push	r26
    14ee:	bf 93       	push	r27
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    14f4:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tcf1_err_callback>
    14f8:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tcf1_err_callback+0x1>
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	09 f0       	breq	.+2      	; 0x1502 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1500:	19 95       	eicall
	}
}
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0b be       	out	0x3b, r0	; 59
    151e:	0f 90       	pop	r0
    1520:	09 be       	out	0x39, r0	; 57
    1522:	0f 90       	pop	r0
    1524:	08 be       	out	0x38, r0	; 56
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	08 b6       	in	r0, 0x38	; 56
    153c:	0f 92       	push	r0
    153e:	18 be       	out	0x38, r1	; 56
    1540:	09 b6       	in	r0, 0x39	; 57
    1542:	0f 92       	push	r0
    1544:	19 be       	out	0x39, r1	; 57
    1546:	0b b6       	in	r0, 0x3b	; 59
    1548:	0f 92       	push	r0
    154a:	1b be       	out	0x3b, r1	; 59
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1564:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcf1_cca_callback>
    1568:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcf1_cca_callback+0x1>
    156c:	30 97       	sbiw	r30, 0x00	; 0
    156e:	09 f0       	breq	.+2      	; 0x1572 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1570:	19 95       	eicall
	}
}
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0b be       	out	0x3b, r0	; 59
    158e:	0f 90       	pop	r0
    1590:	09 be       	out	0x39, r0	; 57
    1592:	0f 90       	pop	r0
    1594:	08 be       	out	0x38, r0	; 56
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	08 b6       	in	r0, 0x38	; 56
    15ac:	0f 92       	push	r0
    15ae:	18 be       	out	0x38, r1	; 56
    15b0:	09 b6       	in	r0, 0x39	; 57
    15b2:	0f 92       	push	r0
    15b4:	19 be       	out	0x39, r1	; 57
    15b6:	0b b6       	in	r0, 0x3b	; 59
    15b8:	0f 92       	push	r0
    15ba:	1b be       	out	0x3b, r1	; 59
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    15d4:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <__data_end>
    15d8:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <__data_end+0x1>
    15dc:	30 97       	sbiw	r30, 0x00	; 0
    15de:	09 f0       	breq	.+2      	; 0x15e2 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    15e0:	19 95       	eicall
	}
}
    15e2:	ff 91       	pop	r31
    15e4:	ef 91       	pop	r30
    15e6:	bf 91       	pop	r27
    15e8:	af 91       	pop	r26
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	7f 91       	pop	r23
    15f0:	6f 91       	pop	r22
    15f2:	5f 91       	pop	r21
    15f4:	4f 91       	pop	r20
    15f6:	3f 91       	pop	r19
    15f8:	2f 91       	pop	r18
    15fa:	0f 90       	pop	r0
    15fc:	0b be       	out	0x3b, r0	; 59
    15fe:	0f 90       	pop	r0
    1600:	09 be       	out	0x39, r0	; 57
    1602:	0f 90       	pop	r0
    1604:	08 be       	out	0x38, r0	; 56
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1614:	e0 91 86 20 	lds	r30, 0x2086	; 0x802086 <transfer>
    1618:	f0 91 87 20 	lds	r31, 0x2087	; 0x802087 <transfer+0x1>
    161c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    161e:	83 ff       	sbrs	r24, 3
    1620:	08 c0       	rjmp	.+16     	; 0x1632 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1622:	88 60       	ori	r24, 0x08	; 8
    1624:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    162a:	86 ef       	ldi	r24, 0xF6	; 246
    162c:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <transfer+0xa>
    1630:	83 c0       	rjmp	.+262    	; 0x1738 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1632:	98 2f       	mov	r25, r24
    1634:	94 71       	andi	r25, 0x14	; 20
    1636:	31 f0       	breq	.+12     	; 0x1644 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <transfer+0xa>
    1642:	7a c0       	rjmp	.+244    	; 0x1738 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1644:	86 ff       	sbrs	r24, 6
    1646:	43 c0       	rjmp	.+134    	; 0x16ce <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1648:	c6 e8       	ldi	r28, 0x86	; 134
    164a:	d0 e2       	ldi	r29, 0x20	; 32
    164c:	aa 81       	ldd	r26, Y+2	; 0x02
    164e:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	14 96       	adiw	r26, 0x04	; 4
    1656:	2d 91       	ld	r18, X+
    1658:	3c 91       	ld	r19, X
    165a:	15 97       	sbiw	r26, 0x05	; 5
    165c:	82 17       	cp	r24, r18
    165e:	93 07       	cpc	r25, r19
    1660:	6c f4       	brge	.+26     	; 0x167c <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1662:	9c 01       	movw	r18, r24
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	20 93 8a 20 	sts	0x208A, r18	; 0x80208a <transfer+0x4>
    166c:	30 93 8b 20 	sts	0x208B, r19	; 0x80208b <transfer+0x5>
    1670:	a8 0f       	add	r26, r24
    1672:	b9 1f       	adc	r27, r25
    1674:	11 96       	adiw	r26, 0x01	; 1
    1676:	8c 91       	ld	r24, X
    1678:	87 83       	std	Z+7, r24	; 0x07
    167a:	5e c0       	rjmp	.+188    	; 0x1738 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    167c:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <transfer+0x6>
    1680:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <transfer+0x7>
    1684:	18 96       	adiw	r26, 0x08	; 8
    1686:	2d 91       	ld	r18, X+
    1688:	3c 91       	ld	r19, X
    168a:	19 97       	sbiw	r26, 0x09	; 9
    168c:	82 17       	cp	r24, r18
    168e:	93 07       	cpc	r25, r19
    1690:	c8 f4       	brcc	.+50     	; 0x16c4 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1692:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <transfer+0x8>
    1696:	22 23       	and	r18, r18
    1698:	21 f0       	breq	.+8      	; 0x16a2 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    169a:	86 81       	ldd	r24, Z+6	; 0x06
    169c:	81 60       	ori	r24, 0x01	; 1
    169e:	86 83       	std	Z+6, r24	; 0x06
    16a0:	4b c0       	rjmp	.+150    	; 0x1738 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    16a2:	16 96       	adiw	r26, 0x06	; 6
    16a4:	2d 91       	ld	r18, X+
    16a6:	3c 91       	ld	r19, X
    16a8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    16aa:	ac 01       	movw	r20, r24
    16ac:	4f 5f       	subi	r20, 0xFF	; 255
    16ae:	5f 4f       	sbci	r21, 0xFF	; 255
    16b0:	40 93 8c 20 	sts	0x208C, r20	; 0x80208c <transfer+0x6>
    16b4:	50 93 8d 20 	sts	0x208D, r21	; 0x80208d <transfer+0x7>
    16b8:	d9 01       	movw	r26, r18
    16ba:	a8 0f       	add	r26, r24
    16bc:	b9 1f       	adc	r27, r25
    16be:	8c 91       	ld	r24, X
    16c0:	87 83       	std	Z+7, r24	; 0x07
    16c2:	3a c0       	rjmp	.+116    	; 0x1738 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    16c8:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <transfer+0xa>
    16cc:	35 c0       	rjmp	.+106    	; 0x1738 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    16ce:	88 23       	and	r24, r24
    16d0:	84 f5       	brge	.+96     	; 0x1732 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    16d2:	a6 e8       	ldi	r26, 0x86	; 134
    16d4:	b0 e2       	ldi	r27, 0x20	; 32
    16d6:	12 96       	adiw	r26, 0x02	; 2
    16d8:	cd 91       	ld	r28, X+
    16da:	dc 91       	ld	r29, X
    16dc:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    16de:	16 96       	adiw	r26, 0x06	; 6
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	17 97       	sbiw	r26, 0x07	; 7
    16e6:	28 85       	ldd	r18, Y+8	; 0x08
    16e8:	39 85       	ldd	r19, Y+9	; 0x09
    16ea:	82 17       	cp	r24, r18
    16ec:	93 07       	cpc	r25, r19
    16ee:	d8 f4       	brcc	.+54     	; 0x1726 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    16f0:	6e 81       	ldd	r22, Y+6	; 0x06
    16f2:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    16f4:	9c 01       	movw	r18, r24
    16f6:	2f 5f       	subi	r18, 0xFF	; 255
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	20 93 8c 20 	sts	0x208C, r18	; 0x80208c <transfer+0x6>
    16fe:	30 93 8d 20 	sts	0x208D, r19	; 0x80208d <transfer+0x7>
    1702:	47 81       	ldd	r20, Z+7	; 0x07
    1704:	db 01       	movw	r26, r22
    1706:	a8 0f       	add	r26, r24
    1708:	b9 1f       	adc	r27, r25
    170a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	99 85       	ldd	r25, Y+9	; 0x09
    1710:	28 17       	cp	r18, r24
    1712:	39 07       	cpc	r19, r25
    1714:	18 f4       	brcc	.+6      	; 0x171c <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	83 83       	std	Z+3, r24	; 0x03
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    171c:	87 e0       	ldi	r24, 0x07	; 7
    171e:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1720:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <transfer+0xa>
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    172a:	89 ef       	ldi	r24, 0xF9	; 249
    172c:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <transfer+0xa>
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1732:	8b ef       	ldi	r24, 0xFB	; 251
    1734:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <transfer+0xa>
	}
}
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	08 b6       	in	r0, 0x38	; 56
    174a:	0f 92       	push	r0
    174c:	18 be       	out	0x38, r1	; 56
    174e:	09 b6       	in	r0, 0x39	; 57
    1750:	0f 92       	push	r0
    1752:	19 be       	out	0x39, r1	; 57
    1754:	0b b6       	in	r0, 0x3b	; 59
    1756:	0f 92       	push	r0
    1758:	1b be       	out	0x3b, r1	; 59
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
    1772:	4e df       	rcall	.-356    	; 0x1610 <twim_interrupt_handler>
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0b be       	out	0x3b, r0	; 59
    1790:	0f 90       	pop	r0
    1792:	09 be       	out	0x39, r0	; 57
    1794:	0f 90       	pop	r0
    1796:	08 be       	out	0x38, r0	; 56
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	08 b6       	in	r0, 0x38	; 56
    17ae:	0f 92       	push	r0
    17b0:	18 be       	out	0x38, r1	; 56
    17b2:	09 b6       	in	r0, 0x39	; 57
    17b4:	0f 92       	push	r0
    17b6:	19 be       	out	0x39, r1	; 57
    17b8:	0b b6       	in	r0, 0x3b	; 59
    17ba:	0f 92       	push	r0
    17bc:	1b be       	out	0x3b, r1	; 59
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	1c df       	rcall	.-456    	; 0x1610 <twim_interrupt_handler>
    17d8:	ff 91       	pop	r31
    17da:	ef 91       	pop	r30
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0b be       	out	0x3b, r0	; 59
    17f4:	0f 90       	pop	r0
    17f6:	09 be       	out	0x39, r0	; 57
    17f8:	0f 90       	pop	r0
    17fa:	08 be       	out	0x38, r0	; 56
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	08 b6       	in	r0, 0x38	; 56
    1812:	0f 92       	push	r0
    1814:	18 be       	out	0x38, r1	; 56
    1816:	09 b6       	in	r0, 0x39	; 57
    1818:	0f 92       	push	r0
    181a:	19 be       	out	0x39, r1	; 57
    181c:	0b b6       	in	r0, 0x3b	; 59
    181e:	0f 92       	push	r0
    1820:	1b be       	out	0x3b, r1	; 59
    1822:	2f 93       	push	r18
    1824:	3f 93       	push	r19
    1826:	4f 93       	push	r20
    1828:	5f 93       	push	r21
    182a:	6f 93       	push	r22
    182c:	7f 93       	push	r23
    182e:	8f 93       	push	r24
    1830:	9f 93       	push	r25
    1832:	af 93       	push	r26
    1834:	bf 93       	push	r27
    1836:	ef 93       	push	r30
    1838:	ff 93       	push	r31
    183a:	ea de       	rcall	.-556    	; 0x1610 <twim_interrupt_handler>
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0b be       	out	0x3b, r0	; 59
    1858:	0f 90       	pop	r0
    185a:	09 be       	out	0x39, r0	; 57
    185c:	0f 90       	pop	r0
    185e:	08 be       	out	0x38, r0	; 56
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	0f 90       	pop	r0
    1866:	1f 90       	pop	r1
    1868:	18 95       	reti

0000186a <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	08 b6       	in	r0, 0x38	; 56
    1876:	0f 92       	push	r0
    1878:	18 be       	out	0x38, r1	; 56
    187a:	09 b6       	in	r0, 0x39	; 57
    187c:	0f 92       	push	r0
    187e:	19 be       	out	0x39, r1	; 57
    1880:	0b b6       	in	r0, 0x3b	; 59
    1882:	0f 92       	push	r0
    1884:	1b be       	out	0x3b, r1	; 59
    1886:	2f 93       	push	r18
    1888:	3f 93       	push	r19
    188a:	4f 93       	push	r20
    188c:	5f 93       	push	r21
    188e:	6f 93       	push	r22
    1890:	7f 93       	push	r23
    1892:	8f 93       	push	r24
    1894:	9f 93       	push	r25
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
    189e:	b8 de       	rcall	.-656    	; 0x1610 <twim_interrupt_handler>
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0b be       	out	0x3b, r0	; 59
    18bc:	0f 90       	pop	r0
    18be:	09 be       	out	0x39, r0	; 57
    18c0:	0f 90       	pop	r0
    18c2:	08 be       	out	0x38, r0	; 56
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    18ce:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    18d0:	db 01       	movw	r26, r22
    18d2:	14 96       	adiw	r26, 0x04	; 4
    18d4:	8c 91       	ld	r24, X
    18d6:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    18d8:	88 eb       	ldi	r24, 0xB8	; 184
    18da:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    18e0:	e6 e8       	ldi	r30, 0x86	; 134
    18e2:	f0 e2       	ldi	r31, 0x20	; 32
    18e4:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    18e6:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    18e8:	e0 ea       	ldi	r30, 0xA0	; 160
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	82 60       	ori	r24, 0x02	; 2
    18f0:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    18f2:	78 94       	sei

	return STATUS_OK;
}
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	08 95       	ret

000018f8 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	1f 92       	push	r1
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9c 01       	movw	r18, r24
    1904:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1906:	89 2b       	or	r24, r25
    1908:	09 f4       	brne	.+2      	; 0x190c <twi_master_transfer+0x14>
    190a:	51 c0       	rjmp	.+162    	; 0x19ae <twi_master_transfer+0xb6>
    190c:	30 97       	sbiw	r30, 0x00	; 0
    190e:	09 f4       	brne	.+2      	; 0x1912 <twi_master_transfer+0x1a>
    1910:	50 c0       	rjmp	.+160    	; 0x19b2 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1912:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1914:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <transfer+0x9>
    1918:	88 23       	and	r24, r24
    191a:	19 f0       	breq	.+6      	; 0x1922 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    191c:	99 23       	and	r25, r25
    191e:	f1 f3       	breq	.-4      	; 0x191c <twi_master_transfer+0x24>
    1920:	4a c0       	rjmp	.+148    	; 0x19b6 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1922:	8f b7       	in	r24, 0x3f	; 63
    1924:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1926:	f8 94       	cli
	return flags;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    192a:	a6 e8       	ldi	r26, 0x86	; 134
    192c:	b0 e2       	ldi	r27, 0x20	; 32
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	19 96       	adiw	r26, 0x09	; 9
    1932:	9c 93       	st	X, r25
    1934:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1936:	90 e8       	ldi	r25, 0x80	; 128
    1938:	1a 96       	adiw	r26, 0x0a	; 10
    193a:	9c 93       	st	X, r25
    193c:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    193e:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1940:	2d 93       	st	X+, r18
    1942:	3c 93       	st	X, r19
    1944:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1946:	12 96       	adiw	r26, 0x02	; 2
    1948:	6d 93       	st	X+, r22
    194a:	7c 93       	st	X, r23
    194c:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    194e:	14 96       	adiw	r26, 0x04	; 4
    1950:	1d 92       	st	X+, r1
    1952:	1c 92       	st	X, r1
    1954:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1956:	16 96       	adiw	r26, 0x06	; 6
    1958:	1d 92       	st	X+, r1
    195a:	1c 92       	st	X, r1
    195c:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    195e:	18 96       	adiw	r26, 0x08	; 8
    1960:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1962:	80 81       	ld	r24, Z
    1964:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1966:	64 81       	ldd	r22, Z+4	; 0x04
    1968:	75 81       	ldd	r23, Z+5	; 0x05
    196a:	67 2b       	or	r22, r23
    196c:	11 f4       	brne	.+4      	; 0x1972 <twi_master_transfer+0x7a>
    196e:	41 11       	cpse	r20, r1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1972:	f9 01       	movw	r30, r18
    1974:	86 83       	std	Z+6, r24	; 0x06
    1976:	03 c0       	rjmp	.+6      	; 0x197e <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1978:	81 60       	ori	r24, 0x01	; 1
    197a:	f9 01       	movw	r30, r18
    197c:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    197e:	e6 e8       	ldi	r30, 0x86	; 134
    1980:	f0 e2       	ldi	r31, 0x20	; 32
    1982:	92 85       	ldd	r25, Z+10	; 0x0a
    1984:	90 38       	cpi	r25, 0x80	; 128
    1986:	e9 f3       	breq	.-6      	; 0x1982 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1988:	f9 01       	movw	r30, r18
    198a:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    198c:	83 70       	andi	r24, 0x03	; 3
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	49 f0       	breq	.+18     	; 0x19a4 <twi_master_transfer+0xac>
    1992:	a6 e8       	ldi	r26, 0x86	; 134
    1994:	b0 e2       	ldi	r27, 0x20	; 32
    1996:	ed 91       	ld	r30, X+
    1998:	fc 91       	ld	r31, X
    199a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    199c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    199e:	83 70       	andi	r24, 0x03	; 3
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    19a4:	e6 e8       	ldi	r30, 0x86	; 134
    19a6:	f0 e2       	ldi	r31, 0x20	; 32
    19a8:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    19aa:	11 86       	std	Z+9, r1	; 0x09
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    19ae:	88 ef       	ldi	r24, 0xF8	; 248
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <twi_master_transfer+0xc0>
    19b2:	88 ef       	ldi	r24, 0xF8	; 248
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    19b6:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    19b8:	0f 90       	pop	r0
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    19c0:	fc 01       	movw	r30, r24
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	95 ff       	sbrs	r25, 5
    19c6:	fd cf       	rjmp	.-6      	; 0x19c2 <usart_putchar+0x2>
    19c8:	60 83       	st	Z, r22
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	08 95       	ret

000019d0 <usart_getchar>:
    19d0:	fc 01       	movw	r30, r24
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	99 23       	and	r25, r25
    19d6:	ec f7       	brge	.-6      	; 0x19d2 <usart_getchar+0x2>
    19d8:	80 81       	ld	r24, Z
    19da:	08 95       	ret

000019dc <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    19dc:	4f 92       	push	r4
    19de:	5f 92       	push	r5
    19e0:	6f 92       	push	r6
    19e2:	7f 92       	push	r7
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	7c 01       	movw	r14, r24
    19f8:	4a 01       	movw	r8, r20
    19fa:	5b 01       	movw	r10, r22
    19fc:	28 01       	movw	r4, r16
    19fe:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a00:	fc 01       	movw	r30, r24
    1a02:	84 81       	ldd	r24, Z+4	; 0x04
    1a04:	82 ff       	sbrs	r24, 2
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1a08:	d9 01       	movw	r26, r18
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	68 94       	set
    1a0e:	12 f8       	bld	r1, 2
    1a10:	b6 95       	lsr	r27
    1a12:	a7 95       	ror	r26
    1a14:	97 95       	ror	r25
    1a16:	87 95       	ror	r24
    1a18:	16 94       	lsr	r1
    1a1a:	d1 f7       	brne	.-12     	; 0x1a10 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	a8 01       	movw	r20, r16
    1a20:	03 2e       	mov	r0, r19
    1a22:	36 e1       	ldi	r19, 0x16	; 22
    1a24:	76 95       	lsr	r23
    1a26:	67 95       	ror	r22
    1a28:	57 95       	ror	r21
    1a2a:	47 95       	ror	r20
    1a2c:	3a 95       	dec	r19
    1a2e:	d1 f7       	brne	.-12     	; 0x1a24 <usart_set_baudrate+0x48>
    1a30:	30 2d       	mov	r19, r0
    1a32:	15 c0       	rjmp	.+42     	; 0x1a5e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1a34:	d9 01       	movw	r26, r18
    1a36:	c8 01       	movw	r24, r16
    1a38:	68 94       	set
    1a3a:	13 f8       	bld	r1, 3
    1a3c:	b6 95       	lsr	r27
    1a3e:	a7 95       	ror	r26
    1a40:	97 95       	ror	r25
    1a42:	87 95       	ror	r24
    1a44:	16 94       	lsr	r1
    1a46:	d1 f7       	brne	.-12     	; 0x1a3c <usart_set_baudrate+0x60>
		min_rate /= 2;
    1a48:	b9 01       	movw	r22, r18
    1a4a:	a8 01       	movw	r20, r16
    1a4c:	03 2e       	mov	r0, r19
    1a4e:	37 e1       	ldi	r19, 0x17	; 23
    1a50:	76 95       	lsr	r23
    1a52:	67 95       	ror	r22
    1a54:	57 95       	ror	r21
    1a56:	47 95       	ror	r20
    1a58:	3a 95       	dec	r19
    1a5a:	d1 f7       	brne	.-12     	; 0x1a50 <usart_set_baudrate+0x74>
    1a5c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1a5e:	88 15       	cp	r24, r8
    1a60:	99 05       	cpc	r25, r9
    1a62:	aa 05       	cpc	r26, r10
    1a64:	bb 05       	cpc	r27, r11
    1a66:	08 f4       	brcc	.+2      	; 0x1a6a <usart_set_baudrate+0x8e>
    1a68:	a2 c0       	rjmp	.+324    	; 0x1bae <usart_set_baudrate+0x1d2>
    1a6a:	84 16       	cp	r8, r20
    1a6c:	95 06       	cpc	r9, r21
    1a6e:	a6 06       	cpc	r10, r22
    1a70:	b7 06       	cpc	r11, r23
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <usart_set_baudrate+0x9a>
    1a74:	9e c0       	rjmp	.+316    	; 0x1bb2 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a76:	f7 01       	movw	r30, r14
    1a78:	84 81       	ldd	r24, Z+4	; 0x04
    1a7a:	82 fd       	sbrc	r24, 2
    1a7c:	04 c0       	rjmp	.+8      	; 0x1a86 <usart_set_baudrate+0xaa>
		baud *= 2;
    1a7e:	88 0c       	add	r8, r8
    1a80:	99 1c       	adc	r9, r9
    1a82:	aa 1c       	adc	r10, r10
    1a84:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1a86:	c3 01       	movw	r24, r6
    1a88:	b2 01       	movw	r22, r4
    1a8a:	a5 01       	movw	r20, r10
    1a8c:	94 01       	movw	r18, r8
    1a8e:	a2 d5       	rcall	.+2884   	; 0x25d4 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1a90:	2f 3f       	cpi	r18, 0xFF	; 255
    1a92:	31 05       	cpc	r19, r1
    1a94:	41 05       	cpc	r20, r1
    1a96:	51 05       	cpc	r21, r1
    1a98:	08 f4       	brcc	.+2      	; 0x1a9c <usart_set_baudrate+0xc0>
    1a9a:	8d c0       	rjmp	.+282    	; 0x1bb6 <usart_set_baudrate+0x1da>
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	c9 ef       	ldi	r28, 0xF9	; 249
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <usart_set_baudrate+0xd6>
    1aa8:	28 17       	cp	r18, r24
    1aaa:	39 07       	cpc	r19, r25
    1aac:	4a 07       	cpc	r20, r26
    1aae:	5b 07       	cpc	r21, r27
    1ab0:	58 f0       	brcs	.+22     	; 0x1ac8 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	aa 1f       	adc	r26, r26
    1ab8:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1aba:	cd 3f       	cpi	r28, 0xFD	; 253
    1abc:	0c f4       	brge	.+2      	; 0x1ac0 <usart_set_baudrate+0xe4>
			limit |= 1;
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1ac2:	c7 30       	cpi	r28, 0x07	; 7
    1ac4:	89 f7       	brne	.-30     	; 0x1aa8 <usart_set_baudrate+0xcc>
    1ac6:	4d c0       	rjmp	.+154    	; 0x1b62 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1ac8:	cc 23       	and	r28, r28
    1aca:	0c f0       	brlt	.+2      	; 0x1ace <usart_set_baudrate+0xf2>
    1acc:	4a c0       	rjmp	.+148    	; 0x1b62 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ace:	d5 01       	movw	r26, r10
    1ad0:	c4 01       	movw	r24, r8
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	aa 1f       	adc	r26, r26
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	aa 1f       	adc	r26, r26
    1ae8:	bb 1f       	adc	r27, r27
    1aea:	48 1a       	sub	r4, r24
    1aec:	59 0a       	sbc	r5, r25
    1aee:	6a 0a       	sbc	r6, r26
    1af0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1af2:	ce 3f       	cpi	r28, 0xFE	; 254
    1af4:	ec f4       	brge	.+58     	; 0x1b30 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1af6:	8d ef       	ldi	r24, 0xFD	; 253
    1af8:	9f ef       	ldi	r25, 0xFF	; 255
    1afa:	8c 1b       	sub	r24, r28
    1afc:	91 09       	sbc	r25, r1
    1afe:	c7 fd       	sbrc	r28, 7
    1b00:	93 95       	inc	r25
    1b02:	04 c0       	rjmp	.+8      	; 0x1b0c <usart_set_baudrate+0x130>
    1b04:	44 0c       	add	r4, r4
    1b06:	55 1c       	adc	r5, r5
    1b08:	66 1c       	adc	r6, r6
    1b0a:	77 1c       	adc	r7, r7
    1b0c:	8a 95       	dec	r24
    1b0e:	d2 f7       	brpl	.-12     	; 0x1b04 <usart_set_baudrate+0x128>
    1b10:	d5 01       	movw	r26, r10
    1b12:	c4 01       	movw	r24, r8
    1b14:	b6 95       	lsr	r27
    1b16:	a7 95       	ror	r26
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	64 0d       	add	r22, r4
    1b22:	75 1d       	adc	r23, r5
    1b24:	86 1d       	adc	r24, r6
    1b26:	97 1d       	adc	r25, r7
    1b28:	a5 01       	movw	r20, r10
    1b2a:	94 01       	movw	r18, r8
    1b2c:	53 d5       	rcall	.+2726   	; 0x25d4 <__udivmodsi4>
    1b2e:	35 c0       	rjmp	.+106    	; 0x1b9a <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	8c 0f       	add	r24, r28
    1b34:	a5 01       	movw	r20, r10
    1b36:	94 01       	movw	r18, r8
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <usart_set_baudrate+0x166>
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	44 1f       	adc	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	8a 95       	dec	r24
    1b44:	d2 f7       	brpl	.-12     	; 0x1b3a <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    1b46:	da 01       	movw	r26, r20
    1b48:	c9 01       	movw	r24, r18
    1b4a:	b6 95       	lsr	r27
    1b4c:	a7 95       	ror	r26
    1b4e:	97 95       	ror	r25
    1b50:	87 95       	ror	r24
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	64 0d       	add	r22, r4
    1b58:	75 1d       	adc	r23, r5
    1b5a:	86 1d       	adc	r24, r6
    1b5c:	97 1d       	adc	r25, r7
    1b5e:	3a d5       	rcall	.+2676   	; 0x25d4 <__udivmodsi4>
    1b60:	1c c0       	rjmp	.+56     	; 0x1b9a <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	8c 0f       	add	r24, r28
    1b66:	a5 01       	movw	r20, r10
    1b68:	94 01       	movw	r18, r8
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <usart_set_baudrate+0x198>
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	44 1f       	adc	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	8a 95       	dec	r24
    1b76:	d2 f7       	brpl	.-12     	; 0x1b6c <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    1b78:	da 01       	movw	r26, r20
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	b6 95       	lsr	r27
    1b7e:	a7 95       	ror	r26
    1b80:	97 95       	ror	r25
    1b82:	87 95       	ror	r24
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	64 0d       	add	r22, r4
    1b8a:	75 1d       	adc	r23, r5
    1b8c:	86 1d       	adc	r24, r6
    1b8e:	97 1d       	adc	r25, r7
    1b90:	21 d5       	rcall	.+2626   	; 0x25d4 <__udivmodsi4>
    1b92:	21 50       	subi	r18, 0x01	; 1
    1b94:	31 09       	sbc	r19, r1
    1b96:	41 09       	sbc	r20, r1
    1b98:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1b9a:	83 2f       	mov	r24, r19
    1b9c:	8f 70       	andi	r24, 0x0F	; 15
    1b9e:	c2 95       	swap	r28
    1ba0:	c0 7f       	andi	r28, 0xF0	; 240
    1ba2:	c8 2b       	or	r28, r24
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1ba8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	18 c0       	rjmp	.+48     	; 0x1bde <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	16 c0       	rjmp	.+44     	; 0x1bde <usart_set_baudrate+0x202>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1bb6:	d5 01       	movw	r26, r10
    1bb8:	c4 01       	movw	r24, r8
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	bb 1f       	adc	r27, r27
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	aa 1f       	adc	r26, r26
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	aa 1f       	adc	r26, r26
    1bd0:	bb 1f       	adc	r27, r27
    1bd2:	48 1a       	sub	r4, r24
    1bd4:	59 0a       	sbc	r5, r25
    1bd6:	6a 0a       	sbc	r6, r26
    1bd8:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1bda:	c9 ef       	ldi	r28, 0xF9	; 249
    1bdc:	8c cf       	rjmp	.-232    	; 0x1af6 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	bf 90       	pop	r11
    1bea:	af 90       	pop	r10
    1bec:	9f 90       	pop	r9
    1bee:	8f 90       	pop	r8
    1bf0:	7f 90       	pop	r7
    1bf2:	6f 90       	pop	r6
    1bf4:	5f 90       	pop	r5
    1bf6:	4f 90       	pop	r4
    1bf8:	08 95       	ret

00001bfa <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	ec 01       	movw	r28, r24
    1c04:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <usart_init_rs232+0x12>
    1c0a:	5d c1       	rjmp	.+698    	; 0x1ec6 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1c0c:	80 3c       	cpi	r24, 0xC0	; 192
    1c0e:	91 05       	cpc	r25, r1
    1c10:	29 f4       	brne	.+10     	; 0x1c1c <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1c12:	60 e1       	ldi	r22, 0x10	; 16
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c1a:	55 c1       	rjmp	.+682    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1c1c:	c0 34       	cpi	r28, 0x40	; 64
    1c1e:	84 e0       	ldi	r24, 0x04	; 4
    1c20:	d8 07       	cpc	r29, r24
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1c24:	68 e0       	ldi	r22, 0x08	; 8
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c2c:	4c c1       	rjmp	.+664    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1c2e:	c1 15       	cp	r28, r1
    1c30:	e4 e0       	ldi	r30, 0x04	; 4
    1c32:	de 07       	cpc	r29, r30
    1c34:	29 f4       	brne	.+10     	; 0x1c40 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1c36:	64 e0       	ldi	r22, 0x04	; 4
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c3e:	43 c1       	rjmp	.+646    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1c40:	c0 38       	cpi	r28, 0x80	; 128
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	df 07       	cpc	r29, r31
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c50:	3a c1       	rjmp	.+628    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1c52:	c1 15       	cp	r28, r1
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	d8 07       	cpc	r29, r24
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c62:	31 c1       	rjmp	.+610    	; 0x1ec6 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1c64:	c0 38       	cpi	r28, 0x80	; 128
    1c66:	e3 e0       	ldi	r30, 0x03	; 3
    1c68:	de 07       	cpc	r29, r30
    1c6a:	29 f4       	brne	.+10     	; 0x1c76 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c74:	28 c1       	rjmp	.+592    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1c76:	c0 39       	cpi	r28, 0x90	; 144
    1c78:	f3 e0       	ldi	r31, 0x03	; 3
    1c7a:	df 07       	cpc	r29, r31
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c86:	1f c1       	rjmp	.+574    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1c88:	c1 15       	cp	r28, r1
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	d8 07       	cpc	r29, r24
    1c8e:	29 f4       	brne	.+10     	; 0x1c9a <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1c90:	62 e0       	ldi	r22, 0x02	; 2
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1c98:	16 c1       	rjmp	.+556    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1c9a:	c0 34       	cpi	r28, 0x40	; 64
    1c9c:	e2 e0       	ldi	r30, 0x02	; 2
    1c9e:	de 07       	cpc	r29, r30
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1caa:	0d c1       	rjmp	.+538    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1cac:	c1 15       	cp	r28, r1
    1cae:	f3 e0       	ldi	r31, 0x03	; 3
    1cb0:	df 07       	cpc	r29, r31
    1cb2:	29 f4       	brne	.+10     	; 0x1cbe <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cbc:	04 c1       	rjmp	.+520    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1cbe:	c0 32       	cpi	r28, 0x20	; 32
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	d8 07       	cpc	r29, r24
    1cc4:	29 f4       	brne	.+10     	; 0x1cd0 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cce:	fb c0       	rjmp	.+502    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1cd0:	c1 15       	cp	r28, r1
    1cd2:	e8 e0       	ldi	r30, 0x08	; 8
    1cd4:	de 07       	cpc	r29, r30
    1cd6:	29 f4       	brne	.+10     	; 0x1ce2 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ce0:	f2 c0       	rjmp	.+484    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1ce2:	c1 15       	cp	r28, r1
    1ce4:	f9 e0       	ldi	r31, 0x09	; 9
    1ce6:	df 07       	cpc	r29, r31
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1cf2:	e9 c0       	rjmp	.+466    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1cf4:	c1 15       	cp	r28, r1
    1cf6:	8a e0       	ldi	r24, 0x0A	; 10
    1cf8:	d8 07       	cpc	r29, r24
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	85 e0       	ldi	r24, 0x05	; 5
    1d00:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d04:	e0 c0       	rjmp	.+448    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1d06:	c1 15       	cp	r28, r1
    1d08:	eb e0       	ldi	r30, 0x0B	; 11
    1d0a:	de 07       	cpc	r29, r30
    1d0c:	29 f4       	brne	.+10     	; 0x1d18 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d16:	d7 c0       	rjmp	.+430    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1d18:	c0 34       	cpi	r28, 0x40	; 64
    1d1a:	f8 e0       	ldi	r31, 0x08	; 8
    1d1c:	df 07       	cpc	r29, r31
    1d1e:	29 f4       	brne	.+10     	; 0x1d2a <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d28:	ce c0       	rjmp	.+412    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1d2a:	c0 34       	cpi	r28, 0x40	; 64
    1d2c:	89 e0       	ldi	r24, 0x09	; 9
    1d2e:	d8 07       	cpc	r29, r24
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d3a:	c5 c0       	rjmp	.+394    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1d3c:	c0 34       	cpi	r28, 0x40	; 64
    1d3e:	ea e0       	ldi	r30, 0x0A	; 10
    1d40:	de 07       	cpc	r29, r30
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1d44:	62 e0       	ldi	r22, 0x02	; 2
    1d46:	85 e0       	ldi	r24, 0x05	; 5
    1d48:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d4c:	bc c0       	rjmp	.+376    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1d4e:	c0 34       	cpi	r28, 0x40	; 64
    1d50:	fb e0       	ldi	r31, 0x0B	; 11
    1d52:	df 07       	cpc	r29, r31
    1d54:	29 f4       	brne	.+10     	; 0x1d60 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	86 e0       	ldi	r24, 0x06	; 6
    1d5a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d5e:	b3 c0       	rjmp	.+358    	; 0x1ec6 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1d60:	c0 39       	cpi	r28, 0x90	; 144
    1d62:	88 e0       	ldi	r24, 0x08	; 8
    1d64:	d8 07       	cpc	r29, r24
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1d68:	64 e0       	ldi	r22, 0x04	; 4
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d70:	aa c0       	rjmp	.+340    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1d72:	c0 39       	cpi	r28, 0x90	; 144
    1d74:	e9 e0       	ldi	r30, 0x09	; 9
    1d76:	de 07       	cpc	r29, r30
    1d78:	29 f4       	brne	.+10     	; 0x1d84 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1d7a:	64 e0       	ldi	r22, 0x04	; 4
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d82:	a1 c0       	rjmp	.+322    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1d84:	c0 39       	cpi	r28, 0x90	; 144
    1d86:	fa e0       	ldi	r31, 0x0A	; 10
    1d88:	df 07       	cpc	r29, r31
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1d8c:	64 e0       	ldi	r22, 0x04	; 4
    1d8e:	85 e0       	ldi	r24, 0x05	; 5
    1d90:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1d94:	98 c0       	rjmp	.+304    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1d96:	c0 39       	cpi	r28, 0x90	; 144
    1d98:	8b e0       	ldi	r24, 0x0B	; 11
    1d9a:	d8 07       	cpc	r29, r24
    1d9c:	29 f4       	brne	.+10     	; 0x1da8 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1d9e:	64 e0       	ldi	r22, 0x04	; 4
    1da0:	86 e0       	ldi	r24, 0x06	; 6
    1da2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1da6:	8f c0       	rjmp	.+286    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1da8:	c0 3c       	cpi	r28, 0xC0	; 192
    1daa:	e8 e0       	ldi	r30, 0x08	; 8
    1dac:	de 07       	cpc	r29, r30
    1dae:	29 f4       	brne	.+10     	; 0x1dba <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1db0:	68 e0       	ldi	r22, 0x08	; 8
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1db8:	86 c0       	rjmp	.+268    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1dba:	c0 3c       	cpi	r28, 0xC0	; 192
    1dbc:	f9 e0       	ldi	r31, 0x09	; 9
    1dbe:	df 07       	cpc	r29, r31
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1dc2:	68 e0       	ldi	r22, 0x08	; 8
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1dca:	7d c0       	rjmp	.+250    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1dcc:	c0 3c       	cpi	r28, 0xC0	; 192
    1dce:	8a e0       	ldi	r24, 0x0A	; 10
    1dd0:	d8 07       	cpc	r29, r24
    1dd2:	29 f4       	brne	.+10     	; 0x1dde <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1dd4:	68 e0       	ldi	r22, 0x08	; 8
    1dd6:	85 e0       	ldi	r24, 0x05	; 5
    1dd8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ddc:	74 c0       	rjmp	.+232    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1dde:	c0 3c       	cpi	r28, 0xC0	; 192
    1de0:	eb e0       	ldi	r30, 0x0B	; 11
    1de2:	de 07       	cpc	r29, r30
    1de4:	29 f4       	brne	.+10     	; 0x1df0 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1de6:	68 e0       	ldi	r22, 0x08	; 8
    1de8:	86 e0       	ldi	r24, 0x06	; 6
    1dea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1dee:	6b c0       	rjmp	.+214    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1df0:	c0 3a       	cpi	r28, 0xA0	; 160
    1df2:	f8 e0       	ldi	r31, 0x08	; 8
    1df4:	df 07       	cpc	r29, r31
    1df6:	29 f4       	brne	.+10     	; 0x1e02 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1df8:	60 e1       	ldi	r22, 0x10	; 16
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e00:	62 c0       	rjmp	.+196    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1e02:	c0 3a       	cpi	r28, 0xA0	; 160
    1e04:	89 e0       	ldi	r24, 0x09	; 9
    1e06:	d8 07       	cpc	r29, r24
    1e08:	29 f4       	brne	.+10     	; 0x1e14 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1e0a:	60 e1       	ldi	r22, 0x10	; 16
    1e0c:	84 e0       	ldi	r24, 0x04	; 4
    1e0e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e12:	59 c0       	rjmp	.+178    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1e14:	c0 3a       	cpi	r28, 0xA0	; 160
    1e16:	ea e0       	ldi	r30, 0x0A	; 10
    1e18:	de 07       	cpc	r29, r30
    1e1a:	29 f4       	brne	.+10     	; 0x1e26 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1e1c:	60 e1       	ldi	r22, 0x10	; 16
    1e1e:	85 e0       	ldi	r24, 0x05	; 5
    1e20:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e24:	50 c0       	rjmp	.+160    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1e26:	c0 3a       	cpi	r28, 0xA0	; 160
    1e28:	fb e0       	ldi	r31, 0x0B	; 11
    1e2a:	df 07       	cpc	r29, r31
    1e2c:	29 f4       	brne	.+10     	; 0x1e38 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1e2e:	60 e1       	ldi	r22, 0x10	; 16
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e36:	47 c0       	rjmp	.+142    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1e38:	c0 3b       	cpi	r28, 0xB0	; 176
    1e3a:	88 e0       	ldi	r24, 0x08	; 8
    1e3c:	d8 07       	cpc	r29, r24
    1e3e:	29 f4       	brne	.+10     	; 0x1e4a <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1e40:	60 e2       	ldi	r22, 0x20	; 32
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e48:	3e c0       	rjmp	.+124    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1e4a:	c0 3b       	cpi	r28, 0xB0	; 176
    1e4c:	e9 e0       	ldi	r30, 0x09	; 9
    1e4e:	de 07       	cpc	r29, r30
    1e50:	29 f4       	brne	.+10     	; 0x1e5c <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1e52:	60 e2       	ldi	r22, 0x20	; 32
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e5a:	35 c0       	rjmp	.+106    	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1e5c:	c0 3b       	cpi	r28, 0xB0	; 176
    1e5e:	fa e0       	ldi	r31, 0x0A	; 10
    1e60:	df 07       	cpc	r29, r31
    1e62:	29 f4       	brne	.+10     	; 0x1e6e <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1e64:	60 e2       	ldi	r22, 0x20	; 32
    1e66:	85 e0       	ldi	r24, 0x05	; 5
    1e68:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e6c:	2c c0       	rjmp	.+88     	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1e6e:	c0 3b       	cpi	r28, 0xB0	; 176
    1e70:	8b e0       	ldi	r24, 0x0B	; 11
    1e72:	d8 07       	cpc	r29, r24
    1e74:	29 f4       	brne	.+10     	; 0x1e80 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1e76:	60 e2       	ldi	r22, 0x20	; 32
    1e78:	86 e0       	ldi	r24, 0x06	; 6
    1e7a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e7e:	23 c0       	rjmp	.+70     	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1e80:	c0 38       	cpi	r28, 0x80	; 128
    1e82:	e4 e0       	ldi	r30, 0x04	; 4
    1e84:	de 07       	cpc	r29, r30
    1e86:	29 f4       	brne	.+10     	; 0x1e92 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1e88:	60 e4       	ldi	r22, 0x40	; 64
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1e90:	1a c0       	rjmp	.+52     	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1e92:	c0 39       	cpi	r28, 0x90	; 144
    1e94:	f4 e0       	ldi	r31, 0x04	; 4
    1e96:	df 07       	cpc	r29, r31
    1e98:	29 f4       	brne	.+10     	; 0x1ea4 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1e9a:	60 e4       	ldi	r22, 0x40	; 64
    1e9c:	84 e0       	ldi	r24, 0x04	; 4
    1e9e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1ea2:	11 c0       	rjmp	.+34     	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1ea4:	c0 3a       	cpi	r28, 0xA0	; 160
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	d8 07       	cpc	r29, r24
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1eac:	60 e4       	ldi	r22, 0x40	; 64
    1eae:	85 e0       	ldi	r24, 0x05	; 5
    1eb0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1eb6:	c0 3b       	cpi	r28, 0xB0	; 176
    1eb8:	e4 e0       	ldi	r30, 0x04	; 4
    1eba:	de 07       	cpc	r29, r30
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1ebe:	60 e4       	ldi	r22, 0x40	; 64
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
    1ec2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	8f 73       	andi	r24, 0x3F	; 63
    1eca:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1ecc:	f8 01       	movw	r30, r16
    1ece:	95 81       	ldd	r25, Z+5	; 0x05
    1ed0:	84 81       	ldd	r24, Z+4	; 0x04
    1ed2:	89 2b       	or	r24, r25
    1ed4:	96 81       	ldd	r25, Z+6	; 0x06
    1ed6:	91 11       	cpse	r25, r1
    1ed8:	98 e0       	ldi	r25, 0x08	; 8
    1eda:	89 2b       	or	r24, r25
    1edc:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1ede:	f8 01       	movw	r30, r16
    1ee0:	40 81       	ld	r20, Z
    1ee2:	51 81       	ldd	r21, Z+1	; 0x01
    1ee4:	62 81       	ldd	r22, Z+2	; 0x02
    1ee6:	73 81       	ldd	r23, Z+3	; 0x03
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	18 e4       	ldi	r17, 0x48	; 72
    1eec:	28 ee       	ldi	r18, 0xE8	; 232
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	74 dd       	rcall	.-1304   	; 0x19dc <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	98 60       	ori	r25, 0x08	; 8
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	90 61       	ori	r25, 0x10	; 16
    1efe:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1f14:	c6 2f       	mov	r28, r22
    1f16:	d0 e0       	ldi	r29, 0x00	; 0
    1f18:	de 01       	movw	r26, r28
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <ioport_configure_port_pin+0x18>
    1f1e:	b5 95       	asr	r27
    1f20:	a7 95       	ror	r26
    1f22:	0a 94       	dec	r0
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <ioport_configure_port_pin+0x14>
    1f26:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f28:	50 8b       	std	Z+16, r21	; 0x10
    1f2a:	2f 5f       	subi	r18, 0xFF	; 255
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1f30:	28 30       	cpi	r18, 0x08	; 8
    1f32:	31 05       	cpc	r19, r1
    1f34:	89 f7       	brne	.-30     	; 0x1f18 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1f36:	40 ff       	sbrs	r20, 0
    1f38:	0a c0       	rjmp	.+20     	; 0x1f4e <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1f3a:	41 ff       	sbrs	r20, 1
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1f3e:	fc 01       	movw	r30, r24
    1f40:	65 83       	std	Z+5, r22	; 0x05
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1f44:	fc 01       	movw	r30, r24
    1f46:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1f48:	fc 01       	movw	r30, r24
    1f4a:	61 83       	std	Z+1, r22	; 0x01
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1f4e:	fc 01       	movw	r30, r24
    1f50:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1f58:	43 e0       	ldi	r20, 0x03	; 3
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	68 e0       	ldi	r22, 0x08	; 8
    1f5e:	80 ec       	ldi	r24, 0xC0	; 192
    1f60:	97 e0       	ldi	r25, 0x07	; 7
    1f62:	d3 df       	rcall	.-90     	; 0x1f0a <ioport_configure_port_pin>
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	58 e1       	ldi	r21, 0x18	; 24
    1f68:	64 e0       	ldi	r22, 0x04	; 4
    1f6a:	80 ec       	ldi	r24, 0xC0	; 192
    1f6c:	97 e0       	ldi	r25, 0x07	; 7
    1f6e:	cd cf       	rjmp	.-102    	; 0x1f0a <ioport_configure_port_pin>
    1f70:	08 95       	ret

00001f72 <I2CInit>:
		.chip         = address,      // TWI slave bus address
		.buffer       = (void *)Data, // transfer data source buffer
		.length       = sizeof(Data)  // transfer data size (bytes)
	};
	while (twi_master_write(&MYI2C, &packet_write) != TWI_SUCCESS);//transfers data and waits until transfer is finished to do anything else
}
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	29 97       	sbiw	r28, 0x09	; 9
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	40 93 9f 20 	sts	0x209F, r20	; 0x80209f <busAddress>
    1f88:	8e 01       	movw	r16, r28
    1f8a:	0f 5f       	subi	r16, 0xFF	; 255
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	29 e0       	ldi	r18, 0x09	; 9
    1f90:	f8 01       	movw	r30, r16
    1f92:	11 92       	st	Z+, r1
    1f94:	2a 95       	dec	r18
    1f96:	e9 f7       	brne	.-6      	; 0x1f92 <I2CInit+0x20>
    1f98:	69 83       	std	Y+1, r22	; 0x01
    1f9a:	7a 83       	std	Y+2, r23	; 0x02
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	9c 83       	std	Y+4, r25	; 0x04
    1fa0:	49 87       	std	Y+9, r20	; 0x09
    1fa2:	9b 01       	movw	r18, r22
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	44 1f       	adc	r20, r20
    1fac:	55 1f       	adc	r21, r21
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	78 e4       	ldi	r23, 0x48	; 72
    1fb2:	88 ee       	ldi	r24, 0xE8	; 232
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	0e d3       	rcall	.+1564   	; 0x25d4 <__udivmodsi4>
    1fb8:	da 01       	movw	r26, r20
    1fba:	c9 01       	movw	r24, r18
    1fbc:	05 97       	sbiw	r24, 0x05	; 5
    1fbe:	a1 09       	sbc	r26, r1
    1fc0:	b1 09       	sbc	r27, r1
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	af 83       	std	Y+7, r26	; 0x07
    1fc8:	b8 87       	std	Y+8, r27	; 0x08
    1fca:	60 e4       	ldi	r22, 0x40	; 64
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    1fd2:	b8 01       	movw	r22, r16
    1fd4:	80 e8       	ldi	r24, 0x80	; 128
    1fd6:	94 e0       	ldi	r25, 0x04	; 4
    1fd8:	7a dc       	rcall	.-1804   	; 0x18ce <twi_master_init>
    1fda:	29 96       	adiw	r28, 0x09	; 9
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <twi_read>:

//reads using two wire interface. address is the 7 bit identifier for each device. Data is the array the data will be stored in.
//returns the status of the transfer
status_code_t twi_read(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	de bf       	out	0x3e, r29	; 62
	twi_package_t packet_read = 
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	31 96       	adiw	r30, 0x01	; 1
    1ffc:	2b e0       	ldi	r18, 0x0B	; 11
    1ffe:	df 01       	movw	r26, r30
    2000:	1d 92       	st	X+, r1
    2002:	2a 95       	dec	r18
    2004:	e9 f7       	brne	.-6      	; 0x2000 <twi_read+0x16>
    2006:	69 83       	std	Y+1, r22	; 0x01
    2008:	4a 83       	std	Y+2, r20	; 0x02
    200a:	21 e0       	ldi	r18, 0x01	; 1
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	2d 83       	std	Y+5, r18	; 0x05
    2010:	3e 83       	std	Y+6, r19	; 0x06
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	29 87       	std	Y+9, r18	; 0x09
    2018:	3a 87       	std	Y+10, r19	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	bf 01       	movw	r22, r30
    201e:	80 e8       	ldi	r24, 0x80	; 128
    2020:	94 e0       	ldi	r25, 0x04	; 4
    2022:	6a dc       	rcall	.-1836   	; 0x18f8 <twi_master_transfer>
		.buffer       = Data,          // transfer data destination buffer
		.length       = 1        // transfer data size (bytes)
	};
	return twi_master_read(&MYI2C, &packet_read); //preform read and return the status of the read
	
}
    2024:	2b 96       	adiw	r28, 0x0b	; 11
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <BNO_Read>:
		I2CInit(BN0_BAUD_HZ,BN0_ADDR);
	}
	twi_write(data,BN0_ADDR,memAddress);//writes data to the sensor
}
void BNO_Read(uint8_t * data,uint8_t memAddress)
{
    2030:	46 2f       	mov	r20, r22
	twi_read(data,BN0_ADDR,memAddress);
    2032:	68 e2       	ldi	r22, 0x28	; 40
    2034:	da cf       	rjmp	.-76     	; 0x1fea <twi_read>
    2036:	08 95       	ret

00002038 <WhoAmIBNO>:
}

//who am I register
uint8_t WhoAmIBNO()
{
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	1f 92       	push	r1
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0xFF;
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	89 83       	std	Y+1, r24	; 0x01
	BNO_Read(&data,0x02);
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	ce 01       	movw	r24, r28
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	f1 df       	rcall	.-30     	; 0x2030 <BNO_Read>
	return data;
}
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	0f 90       	pop	r0
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	eb 01       	movw	r28, r22
    205e:	b8 dc       	rcall	.-1680   	; 0x19d0 <usart_getchar>
    2060:	88 83       	st	Y, r24
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	08 95       	ret

00002068 <usart_serial_putchar>:
    2068:	ab cc       	rjmp	.-1706   	; 0x19c0 <usart_putchar>
    206a:	08 95       	ret

0000206c <uart_init>:
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	27 97       	sbiw	r28, 0x07	; 7
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	7c 01       	movw	r14, r24
    2084:	fc 01       	movw	r30, r24
    2086:	86 81       	ldd	r24, Z+6	; 0x06
    2088:	97 81       	ldd	r25, Z+7	; 0x07
    208a:	a0 85       	ldd	r26, Z+8	; 0x08
    208c:	b1 85       	ldd	r27, Z+9	; 0x09
    208e:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <usart_options.6251>
    2092:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <usart_options.6251+0x1>
    2096:	a0 93 0f 20 	sts	0x200F, r26	; 0x80200f <usart_options.6251+0x2>
    209a:	b0 93 10 20 	sts	0x2010, r27	; 0x802010 <usart_options.6251+0x3>
    209e:	01 90       	ld	r0, Z+
    20a0:	f0 81       	ld	r31, Z
    20a2:	e0 2d       	mov	r30, r0
    20a4:	90 81       	ld	r25, Z
    20a6:	d7 01       	movw	r26, r14
    20a8:	15 96       	adiw	r26, 0x05	; 5
    20aa:	8c 91       	ld	r24, X
    20ac:	15 97       	sbiw	r26, 0x05	; 5
    20ae:	89 2b       	or	r24, r25
    20b0:	80 83       	st	Z, r24
    20b2:	ed 91       	ld	r30, X+
    20b4:	fc 91       	ld	r31, X
    20b6:	11 97       	sbiw	r26, 0x01	; 1
    20b8:	94 81       	ldd	r25, Z+4	; 0x04
    20ba:	15 96       	adiw	r26, 0x05	; 5
    20bc:	8c 91       	ld	r24, X
    20be:	15 97       	sbiw	r26, 0x05	; 5
    20c0:	89 2b       	or	r24, r25
    20c2:	84 83       	std	Z+4, r24	; 0x04
    20c4:	ed 91       	ld	r30, X+
    20c6:	fc 91       	ld	r31, X
    20c8:	11 97       	sbiw	r26, 0x01	; 1
    20ca:	90 81       	ld	r25, Z
    20cc:	14 96       	adiw	r26, 0x04	; 4
    20ce:	8c 91       	ld	r24, X
    20d0:	14 97       	sbiw	r26, 0x04	; 4
    20d2:	80 95       	com	r24
    20d4:	89 23       	and	r24, r25
    20d6:	80 83       	st	Z, r24
    20d8:	12 96       	adiw	r26, 0x02	; 2
    20da:	0d 91       	ld	r16, X+
    20dc:	1c 91       	ld	r17, X
    20de:	13 97       	sbiw	r26, 0x03	; 3
    20e0:	01 15       	cp	r16, r1
    20e2:	11 05       	cpc	r17, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <uart_init+0x7c>
    20e6:	c5 c1       	rjmp	.+906    	; 0x2472 <uart_init+0x406>
    20e8:	00 3c       	cpi	r16, 0xC0	; 192
    20ea:	11 05       	cpc	r17, r1
    20ec:	29 f4       	brne	.+10     	; 0x20f8 <uart_init+0x8c>
    20ee:	60 e1       	ldi	r22, 0x10	; 16
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    20f6:	54 c1       	rjmp	.+680    	; 0x23a0 <uart_init+0x334>
    20f8:	00 34       	cpi	r16, 0x40	; 64
    20fa:	b4 e0       	ldi	r27, 0x04	; 4
    20fc:	1b 07       	cpc	r17, r27
    20fe:	29 f4       	brne	.+10     	; 0x210a <uart_init+0x9e>
    2100:	68 e0       	ldi	r22, 0x08	; 8
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2108:	4b c1       	rjmp	.+662    	; 0x23a0 <uart_init+0x334>
    210a:	01 15       	cp	r16, r1
    210c:	e4 e0       	ldi	r30, 0x04	; 4
    210e:	1e 07       	cpc	r17, r30
    2110:	29 f4       	brne	.+10     	; 0x211c <uart_init+0xb0>
    2112:	64 e0       	ldi	r22, 0x04	; 4
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    211a:	42 c1       	rjmp	.+644    	; 0x23a0 <uart_init+0x334>
    211c:	00 38       	cpi	r16, 0x80	; 128
    211e:	f1 e0       	ldi	r31, 0x01	; 1
    2120:	1f 07       	cpc	r17, r31
    2122:	29 f4       	brne	.+10     	; 0x212e <uart_init+0xc2>
    2124:	62 e0       	ldi	r22, 0x02	; 2
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    212c:	39 c1       	rjmp	.+626    	; 0x23a0 <uart_init+0x334>
    212e:	01 15       	cp	r16, r1
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	18 07       	cpc	r17, r24
    2134:	29 f4       	brne	.+10     	; 0x2140 <uart_init+0xd4>
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    213e:	30 c1       	rjmp	.+608    	; 0x23a0 <uart_init+0x334>
    2140:	00 38       	cpi	r16, 0x80	; 128
    2142:	a3 e0       	ldi	r26, 0x03	; 3
    2144:	1a 07       	cpc	r17, r26
    2146:	29 f4       	brne	.+10     	; 0x2152 <uart_init+0xe6>
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2150:	27 c1       	rjmp	.+590    	; 0x23a0 <uart_init+0x334>
    2152:	00 39       	cpi	r16, 0x90	; 144
    2154:	b3 e0       	ldi	r27, 0x03	; 3
    2156:	1b 07       	cpc	r17, r27
    2158:	29 f4       	brne	.+10     	; 0x2164 <uart_init+0xf8>
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2162:	1e c1       	rjmp	.+572    	; 0x23a0 <uart_init+0x334>
    2164:	01 15       	cp	r16, r1
    2166:	e2 e0       	ldi	r30, 0x02	; 2
    2168:	1e 07       	cpc	r17, r30
    216a:	29 f4       	brne	.+10     	; 0x2176 <uart_init+0x10a>
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2174:	15 c1       	rjmp	.+554    	; 0x23a0 <uart_init+0x334>
    2176:	00 34       	cpi	r16, 0x40	; 64
    2178:	f2 e0       	ldi	r31, 0x02	; 2
    217a:	1f 07       	cpc	r17, r31
    217c:	29 f4       	brne	.+10     	; 0x2188 <uart_init+0x11c>
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2186:	0c c1       	rjmp	.+536    	; 0x23a0 <uart_init+0x334>
    2188:	01 15       	cp	r16, r1
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	18 07       	cpc	r17, r24
    218e:	29 f4       	brne	.+10     	; 0x219a <uart_init+0x12e>
    2190:	64 e0       	ldi	r22, 0x04	; 4
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2198:	03 c1       	rjmp	.+518    	; 0x23a0 <uart_init+0x334>
    219a:	00 32       	cpi	r16, 0x20	; 32
    219c:	a3 e0       	ldi	r26, 0x03	; 3
    219e:	1a 07       	cpc	r17, r26
    21a0:	29 f4       	brne	.+10     	; 0x21ac <uart_init+0x140>
    21a2:	64 e0       	ldi	r22, 0x04	; 4
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21aa:	fa c0       	rjmp	.+500    	; 0x23a0 <uart_init+0x334>
    21ac:	01 15       	cp	r16, r1
    21ae:	b8 e0       	ldi	r27, 0x08	; 8
    21b0:	1b 07       	cpc	r17, r27
    21b2:	29 f4       	brne	.+10     	; 0x21be <uart_init+0x152>
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21bc:	f1 c0       	rjmp	.+482    	; 0x23a0 <uart_init+0x334>
    21be:	01 15       	cp	r16, r1
    21c0:	e9 e0       	ldi	r30, 0x09	; 9
    21c2:	1e 07       	cpc	r17, r30
    21c4:	29 f4       	brne	.+10     	; 0x21d0 <uart_init+0x164>
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	84 e0       	ldi	r24, 0x04	; 4
    21ca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21ce:	e8 c0       	rjmp	.+464    	; 0x23a0 <uart_init+0x334>
    21d0:	01 15       	cp	r16, r1
    21d2:	fa e0       	ldi	r31, 0x0A	; 10
    21d4:	1f 07       	cpc	r17, r31
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <uart_init+0x176>
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	85 e0       	ldi	r24, 0x05	; 5
    21dc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21e0:	df c0       	rjmp	.+446    	; 0x23a0 <uart_init+0x334>
    21e2:	01 15       	cp	r16, r1
    21e4:	8b e0       	ldi	r24, 0x0B	; 11
    21e6:	18 07       	cpc	r17, r24
    21e8:	29 f4       	brne	.+10     	; 0x21f4 <uart_init+0x188>
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	86 e0       	ldi	r24, 0x06	; 6
    21ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    21f2:	d6 c0       	rjmp	.+428    	; 0x23a0 <uart_init+0x334>
    21f4:	00 34       	cpi	r16, 0x40	; 64
    21f6:	a8 e0       	ldi	r26, 0x08	; 8
    21f8:	1a 07       	cpc	r17, r26
    21fa:	29 f4       	brne	.+10     	; 0x2206 <uart_init+0x19a>
    21fc:	62 e0       	ldi	r22, 0x02	; 2
    21fe:	83 e0       	ldi	r24, 0x03	; 3
    2200:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2204:	cd c0       	rjmp	.+410    	; 0x23a0 <uart_init+0x334>
    2206:	00 34       	cpi	r16, 0x40	; 64
    2208:	b9 e0       	ldi	r27, 0x09	; 9
    220a:	1b 07       	cpc	r17, r27
    220c:	29 f4       	brne	.+10     	; 0x2218 <uart_init+0x1ac>
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	84 e0       	ldi	r24, 0x04	; 4
    2212:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2216:	c4 c0       	rjmp	.+392    	; 0x23a0 <uart_init+0x334>
    2218:	00 34       	cpi	r16, 0x40	; 64
    221a:	ea e0       	ldi	r30, 0x0A	; 10
    221c:	1e 07       	cpc	r17, r30
    221e:	29 f4       	brne	.+10     	; 0x222a <uart_init+0x1be>
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	85 e0       	ldi	r24, 0x05	; 5
    2224:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2228:	bb c0       	rjmp	.+374    	; 0x23a0 <uart_init+0x334>
    222a:	00 34       	cpi	r16, 0x40	; 64
    222c:	fb e0       	ldi	r31, 0x0B	; 11
    222e:	1f 07       	cpc	r17, r31
    2230:	29 f4       	brne	.+10     	; 0x223c <uart_init+0x1d0>
    2232:	62 e0       	ldi	r22, 0x02	; 2
    2234:	86 e0       	ldi	r24, 0x06	; 6
    2236:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    223a:	b2 c0       	rjmp	.+356    	; 0x23a0 <uart_init+0x334>
    223c:	00 39       	cpi	r16, 0x90	; 144
    223e:	88 e0       	ldi	r24, 0x08	; 8
    2240:	18 07       	cpc	r17, r24
    2242:	29 f4       	brne	.+10     	; 0x224e <uart_init+0x1e2>
    2244:	64 e0       	ldi	r22, 0x04	; 4
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    224c:	a9 c0       	rjmp	.+338    	; 0x23a0 <uart_init+0x334>
    224e:	00 39       	cpi	r16, 0x90	; 144
    2250:	a9 e0       	ldi	r26, 0x09	; 9
    2252:	1a 07       	cpc	r17, r26
    2254:	29 f4       	brne	.+10     	; 0x2260 <uart_init+0x1f4>
    2256:	64 e0       	ldi	r22, 0x04	; 4
    2258:	84 e0       	ldi	r24, 0x04	; 4
    225a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    225e:	a0 c0       	rjmp	.+320    	; 0x23a0 <uart_init+0x334>
    2260:	00 39       	cpi	r16, 0x90	; 144
    2262:	ba e0       	ldi	r27, 0x0A	; 10
    2264:	1b 07       	cpc	r17, r27
    2266:	29 f4       	brne	.+10     	; 0x2272 <uart_init+0x206>
    2268:	64 e0       	ldi	r22, 0x04	; 4
    226a:	85 e0       	ldi	r24, 0x05	; 5
    226c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2270:	97 c0       	rjmp	.+302    	; 0x23a0 <uart_init+0x334>
    2272:	00 39       	cpi	r16, 0x90	; 144
    2274:	eb e0       	ldi	r30, 0x0B	; 11
    2276:	1e 07       	cpc	r17, r30
    2278:	29 f4       	brne	.+10     	; 0x2284 <uart_init+0x218>
    227a:	64 e0       	ldi	r22, 0x04	; 4
    227c:	86 e0       	ldi	r24, 0x06	; 6
    227e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2282:	8e c0       	rjmp	.+284    	; 0x23a0 <uart_init+0x334>
    2284:	00 3c       	cpi	r16, 0xC0	; 192
    2286:	f8 e0       	ldi	r31, 0x08	; 8
    2288:	1f 07       	cpc	r17, r31
    228a:	29 f4       	brne	.+10     	; 0x2296 <uart_init+0x22a>
    228c:	68 e0       	ldi	r22, 0x08	; 8
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2294:	85 c0       	rjmp	.+266    	; 0x23a0 <uart_init+0x334>
    2296:	00 3c       	cpi	r16, 0xC0	; 192
    2298:	89 e0       	ldi	r24, 0x09	; 9
    229a:	18 07       	cpc	r17, r24
    229c:	29 f4       	brne	.+10     	; 0x22a8 <uart_init+0x23c>
    229e:	68 e0       	ldi	r22, 0x08	; 8
    22a0:	84 e0       	ldi	r24, 0x04	; 4
    22a2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    22a6:	7c c0       	rjmp	.+248    	; 0x23a0 <uart_init+0x334>
    22a8:	00 3c       	cpi	r16, 0xC0	; 192
    22aa:	aa e0       	ldi	r26, 0x0A	; 10
    22ac:	1a 07       	cpc	r17, r26
    22ae:	29 f4       	brne	.+10     	; 0x22ba <uart_init+0x24e>
    22b0:	68 e0       	ldi	r22, 0x08	; 8
    22b2:	85 e0       	ldi	r24, 0x05	; 5
    22b4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    22b8:	73 c0       	rjmp	.+230    	; 0x23a0 <uart_init+0x334>
    22ba:	00 3c       	cpi	r16, 0xC0	; 192
    22bc:	bb e0       	ldi	r27, 0x0B	; 11
    22be:	1b 07       	cpc	r17, r27
    22c0:	29 f4       	brne	.+10     	; 0x22cc <uart_init+0x260>
    22c2:	68 e0       	ldi	r22, 0x08	; 8
    22c4:	86 e0       	ldi	r24, 0x06	; 6
    22c6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    22ca:	6a c0       	rjmp	.+212    	; 0x23a0 <uart_init+0x334>
    22cc:	00 3a       	cpi	r16, 0xA0	; 160
    22ce:	e8 e0       	ldi	r30, 0x08	; 8
    22d0:	1e 07       	cpc	r17, r30
    22d2:	29 f4       	brne	.+10     	; 0x22de <uart_init+0x272>
    22d4:	60 e1       	ldi	r22, 0x10	; 16
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    22dc:	61 c0       	rjmp	.+194    	; 0x23a0 <uart_init+0x334>
    22de:	00 3a       	cpi	r16, 0xA0	; 160
    22e0:	f9 e0       	ldi	r31, 0x09	; 9
    22e2:	1f 07       	cpc	r17, r31
    22e4:	29 f4       	brne	.+10     	; 0x22f0 <uart_init+0x284>
    22e6:	60 e1       	ldi	r22, 0x10	; 16
    22e8:	84 e0       	ldi	r24, 0x04	; 4
    22ea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    22ee:	58 c0       	rjmp	.+176    	; 0x23a0 <uart_init+0x334>
    22f0:	00 3a       	cpi	r16, 0xA0	; 160
    22f2:	8a e0       	ldi	r24, 0x0A	; 10
    22f4:	18 07       	cpc	r17, r24
    22f6:	29 f4       	brne	.+10     	; 0x2302 <uart_init+0x296>
    22f8:	60 e1       	ldi	r22, 0x10	; 16
    22fa:	85 e0       	ldi	r24, 0x05	; 5
    22fc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2300:	4f c0       	rjmp	.+158    	; 0x23a0 <uart_init+0x334>
    2302:	00 3a       	cpi	r16, 0xA0	; 160
    2304:	ab e0       	ldi	r26, 0x0B	; 11
    2306:	1a 07       	cpc	r17, r26
    2308:	29 f4       	brne	.+10     	; 0x2314 <uart_init+0x2a8>
    230a:	60 e1       	ldi	r22, 0x10	; 16
    230c:	86 e0       	ldi	r24, 0x06	; 6
    230e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2312:	46 c0       	rjmp	.+140    	; 0x23a0 <uart_init+0x334>
    2314:	00 3b       	cpi	r16, 0xB0	; 176
    2316:	b8 e0       	ldi	r27, 0x08	; 8
    2318:	1b 07       	cpc	r17, r27
    231a:	29 f4       	brne	.+10     	; 0x2326 <uart_init+0x2ba>
    231c:	60 e2       	ldi	r22, 0x20	; 32
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2324:	3d c0       	rjmp	.+122    	; 0x23a0 <uart_init+0x334>
    2326:	00 3b       	cpi	r16, 0xB0	; 176
    2328:	e9 e0       	ldi	r30, 0x09	; 9
    232a:	1e 07       	cpc	r17, r30
    232c:	29 f4       	brne	.+10     	; 0x2338 <uart_init+0x2cc>
    232e:	60 e2       	ldi	r22, 0x20	; 32
    2330:	84 e0       	ldi	r24, 0x04	; 4
    2332:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2336:	34 c0       	rjmp	.+104    	; 0x23a0 <uart_init+0x334>
    2338:	00 3b       	cpi	r16, 0xB0	; 176
    233a:	fa e0       	ldi	r31, 0x0A	; 10
    233c:	1f 07       	cpc	r17, r31
    233e:	29 f4       	brne	.+10     	; 0x234a <uart_init+0x2de>
    2340:	60 e2       	ldi	r22, 0x20	; 32
    2342:	85 e0       	ldi	r24, 0x05	; 5
    2344:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2348:	2b c0       	rjmp	.+86     	; 0x23a0 <uart_init+0x334>
    234a:	00 3b       	cpi	r16, 0xB0	; 176
    234c:	8b e0       	ldi	r24, 0x0B	; 11
    234e:	18 07       	cpc	r17, r24
    2350:	29 f4       	brne	.+10     	; 0x235c <uart_init+0x2f0>
    2352:	60 e2       	ldi	r22, 0x20	; 32
    2354:	86 e0       	ldi	r24, 0x06	; 6
    2356:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    235a:	22 c0       	rjmp	.+68     	; 0x23a0 <uart_init+0x334>
    235c:	00 38       	cpi	r16, 0x80	; 128
    235e:	a4 e0       	ldi	r26, 0x04	; 4
    2360:	1a 07       	cpc	r17, r26
    2362:	29 f4       	brne	.+10     	; 0x236e <uart_init+0x302>
    2364:	60 e4       	ldi	r22, 0x40	; 64
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    236c:	19 c0       	rjmp	.+50     	; 0x23a0 <uart_init+0x334>
    236e:	00 39       	cpi	r16, 0x90	; 144
    2370:	b4 e0       	ldi	r27, 0x04	; 4
    2372:	1b 07       	cpc	r17, r27
    2374:	29 f4       	brne	.+10     	; 0x2380 <uart_init+0x314>
    2376:	60 e4       	ldi	r22, 0x40	; 64
    2378:	84 e0       	ldi	r24, 0x04	; 4
    237a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    237e:	10 c0       	rjmp	.+32     	; 0x23a0 <uart_init+0x334>
    2380:	00 3a       	cpi	r16, 0xA0	; 160
    2382:	e4 e0       	ldi	r30, 0x04	; 4
    2384:	1e 07       	cpc	r17, r30
    2386:	29 f4       	brne	.+10     	; 0x2392 <uart_init+0x326>
    2388:	60 e4       	ldi	r22, 0x40	; 64
    238a:	85 e0       	ldi	r24, 0x05	; 5
    238c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2390:	07 c0       	rjmp	.+14     	; 0x23a0 <uart_init+0x334>
    2392:	00 3b       	cpi	r16, 0xB0	; 176
    2394:	14 40       	sbci	r17, 0x04	; 4
    2396:	21 f4       	brne	.+8      	; 0x23a0 <uart_init+0x334>
    2398:	60 e4       	ldi	r22, 0x40	; 64
    239a:	86 e0       	ldi	r24, 0x06	; 6
    239c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    23a0:	d7 01       	movw	r26, r14
    23a2:	12 96       	adiw	r26, 0x02	; 2
    23a4:	0d 91       	ld	r16, X+
    23a6:	1c 91       	ld	r17, X
    23a8:	13 97       	sbiw	r26, 0x03	; 3
    23aa:	ed e0       	ldi	r30, 0x0D	; 13
    23ac:	f0 e2       	ldi	r31, 0x20	; 32
    23ae:	84 81       	ldd	r24, Z+4	; 0x04
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	85 81       	ldd	r24, Z+5	; 0x05
    23b4:	8e 83       	std	Y+6, r24	; 0x06
    23b6:	86 81       	ldd	r24, Z+6	; 0x06
    23b8:	8f 83       	std	Y+7, r24	; 0x07
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	a2 81       	ldd	r26, Z+2	; 0x02
    23c0:	b3 81       	ldd	r27, Z+3	; 0x03
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	ab 83       	std	Y+3, r26	; 0x03
    23c8:	bc 83       	std	Y+4, r27	; 0x04
    23ca:	78 01       	movw	r14, r16
    23cc:	00 3a       	cpi	r16, 0xA0	; 160
    23ce:	b8 e0       	ldi	r27, 0x08	; 8
    23d0:	1b 07       	cpc	r17, r27
    23d2:	29 f4       	brne	.+10     	; 0x23de <uart_init+0x372>
    23d4:	60 e1       	ldi	r22, 0x10	; 16
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    23dc:	13 c0       	rjmp	.+38     	; 0x2404 <uart_init+0x398>
    23de:	00 3b       	cpi	r16, 0xB0	; 176
    23e0:	e8 e0       	ldi	r30, 0x08	; 8
    23e2:	1e 07       	cpc	r17, r30
    23e4:	29 f4       	brne	.+10     	; 0x23f0 <uart_init+0x384>
    23e6:	60 e2       	ldi	r22, 0x20	; 32
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    23ee:	14 c0       	rjmp	.+40     	; 0x2418 <uart_init+0x3ac>
    23f0:	f0 ea       	ldi	r31, 0xA0	; 160
    23f2:	ef 16       	cp	r14, r31
    23f4:	f9 e0       	ldi	r31, 0x09	; 9
    23f6:	ff 06       	cpc	r15, r31
    23f8:	29 f4       	brne	.+10     	; 0x2404 <uart_init+0x398>
    23fa:	60 e1       	ldi	r22, 0x10	; 16
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <uart_init+0x3c0>
    2404:	80 eb       	ldi	r24, 0xB0	; 176
    2406:	e8 16       	cp	r14, r24
    2408:	89 e0       	ldi	r24, 0x09	; 9
    240a:	f8 06       	cpc	r15, r24
    240c:	29 f4       	brne	.+10     	; 0x2418 <uart_init+0x3ac>
    240e:	60 e2       	ldi	r22, 0x20	; 32
    2410:	84 e0       	ldi	r24, 0x04	; 4
    2412:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <uart_init+0x3d4>
    2418:	a0 ea       	ldi	r26, 0xA0	; 160
    241a:	ea 16       	cp	r14, r26
    241c:	aa e0       	ldi	r26, 0x0A	; 10
    241e:	fa 06       	cpc	r15, r26
    2420:	29 f4       	brne	.+10     	; 0x242c <uart_init+0x3c0>
    2422:	60 e1       	ldi	r22, 0x10	; 16
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <uart_init+0x3e8>
    242c:	b0 eb       	ldi	r27, 0xB0	; 176
    242e:	eb 16       	cp	r14, r27
    2430:	ba e0       	ldi	r27, 0x0A	; 10
    2432:	fb 06       	cpc	r15, r27
    2434:	29 f4       	brne	.+10     	; 0x2440 <uart_init+0x3d4>
    2436:	60 e2       	ldi	r22, 0x20	; 32
    2438:	85 e0       	ldi	r24, 0x05	; 5
    243a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    243e:	13 c0       	rjmp	.+38     	; 0x2466 <uart_init+0x3fa>
    2440:	e0 ea       	ldi	r30, 0xA0	; 160
    2442:	ee 16       	cp	r14, r30
    2444:	eb e0       	ldi	r30, 0x0B	; 11
    2446:	fe 06       	cpc	r15, r30
    2448:	29 f4       	brne	.+10     	; 0x2454 <uart_init+0x3e8>
    244a:	60 e1       	ldi	r22, 0x10	; 16
    244c:	86 e0       	ldi	r24, 0x06	; 6
    244e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2452:	09 c0       	rjmp	.+18     	; 0x2466 <uart_init+0x3fa>
    2454:	f0 eb       	ldi	r31, 0xB0	; 176
    2456:	ef 16       	cp	r14, r31
    2458:	fb e0       	ldi	r31, 0x0B	; 11
    245a:	ff 06       	cpc	r15, r31
    245c:	21 f4       	brne	.+8      	; 0x2466 <uart_init+0x3fa>
    245e:	60 e2       	ldi	r22, 0x20	; 32
    2460:	86 e0       	ldi	r24, 0x06	; 6
    2462:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
    2466:	be 01       	movw	r22, r28
    2468:	6f 5f       	subi	r22, 0xFF	; 255
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	c8 01       	movw	r24, r16
    246e:	c5 db       	rcall	.-2166   	; 0x1bfa <usart_init_rs232>
    2470:	13 c0       	rjmp	.+38     	; 0x2498 <uart_init+0x42c>
    2472:	ed e0       	ldi	r30, 0x0D	; 13
    2474:	f0 e2       	ldi	r31, 0x20	; 32
    2476:	84 81       	ldd	r24, Z+4	; 0x04
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	85 81       	ldd	r24, Z+5	; 0x05
    247c:	8e 83       	std	Y+6, r24	; 0x06
    247e:	86 81       	ldd	r24, Z+6	; 0x06
    2480:	8f 83       	std	Y+7, r24	; 0x07
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	a2 81       	ldd	r26, Z+2	; 0x02
    2488:	b3 81       	ldd	r27, Z+3	; 0x03
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	ab 83       	std	Y+3, r26	; 0x03
    2490:	bc 83       	std	Y+4, r27	; 0x04
    2492:	e1 2c       	mov	r14, r1
    2494:	f1 2c       	mov	r15, r1
    2496:	ac cf       	rjmp	.-168    	; 0x23f0 <uart_init+0x384>
    2498:	27 96       	adiw	r28, 0x07	; 7
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	08 95       	ret

000024ac <openlog_init>:
    24ac:	fc 01       	movw	r30, r24
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	92 ec       	ldi	r25, 0xC2	; 194
    24b2:	a1 e0       	ldi	r26, 0x01	; 1
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	86 83       	std	Z+6, r24	; 0x06
    24b8:	97 83       	std	Z+7, r25	; 0x07
    24ba:	a0 87       	std	Z+8, r26	; 0x08
    24bc:	b1 87       	std	Z+9, r27	; 0x09
    24be:	80 e4       	ldi	r24, 0x40	; 64
    24c0:	96 e0       	ldi	r25, 0x06	; 6
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 ea       	ldi	r24, 0xA0	; 160
    24c8:	98 e0       	ldi	r25, 0x08	; 8
    24ca:	82 83       	std	Z+2, r24	; 0x02
    24cc:	93 83       	std	Z+3, r25	; 0x03
    24ce:	88 e0       	ldi	r24, 0x08	; 8
    24d0:	85 83       	std	Z+5, r24	; 0x05
    24d2:	84 e0       	ldi	r24, 0x04	; 4
    24d4:	84 83       	std	Z+4, r24	; 0x04
    24d6:	08 95       	ret

000024d8 <uart_terminal_init>:

void uart_terminal_init()
{
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	27 97       	sbiw	r28, 0x07	; 7
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    24e6:	60 e1       	ldi	r22, 0x10	; 16
    24e8:	85 e0       	ldi	r24, 0x05	; 5
    24ea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    24ee:	e0 e8       	ldi	r30, 0x80	; 128
    24f0:	f6 e0       	ldi	r31, 0x06	; 6
    24f2:	80 81       	ld	r24, Z
    24f4:	88 60       	ori	r24, 0x08	; 8
    24f6:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    24f8:	80 ea       	ldi	r24, 0xA0	; 160
    24fa:	9a e0       	ldi	r25, 0x0A	; 10
    24fc:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <stdio_base>
    2500:	90 93 96 20 	sts	0x2096, r25	; 0x802096 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2504:	84 e3       	ldi	r24, 0x34	; 52
    2506:	90 e1       	ldi	r25, 0x10	; 16
    2508:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <ptr_put>
    250c:	90 93 94 20 	sts	0x2094, r25	; 0x802094 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2510:	8c e2       	ldi	r24, 0x2C	; 44
    2512:	90 e1       	ldi	r25, 0x10	; 16
    2514:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <ptr_get>
    2518:	90 93 92 20 	sts	0x2092, r25	; 0x802092 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    251c:	e6 e0       	ldi	r30, 0x06	; 6
    251e:	f0 e2       	ldi	r31, 0x20	; 32
    2520:	84 81       	ldd	r24, Z+4	; 0x04
    2522:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2524:	85 81       	ldd	r24, Z+5	; 0x05
    2526:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2528:	86 81       	ldd	r24, Z+6	; 0x06
    252a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	a2 81       	ldd	r26, Z+2	; 0x02
    2532:	b3 81       	ldd	r27, Z+3	; 0x03
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	ab 83       	std	Y+3, r26	; 0x03
    253a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    253c:	60 e1       	ldi	r22, 0x10	; 16
    253e:	85 e0       	ldi	r24, 0x05	; 5
    2540:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2544:	be 01       	movw	r22, r28
    2546:	6f 5f       	subi	r22, 0xFF	; 255
    2548:	7f 4f       	sbci	r23, 0xFF	; 255
    254a:	80 ea       	ldi	r24, 0xA0	; 160
    254c:	9a e0       	ldi	r25, 0x0A	; 10
    254e:	55 db       	rcall	.-2390   	; 0x1bfa <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2550:	60 e7       	ldi	r22, 0x70	; 112
    2552:	71 e0       	ldi	r23, 0x01	; 1
    2554:	89 e8       	ldi	r24, 0x89	; 137
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	5f d0       	rcall	.+190    	; 0x2618 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
}
    255a:	27 96       	adiw	r28, 0x07	; 7
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	08 95       	ret

00002566 <__portable_avr_delay_cycles>:
}
/*	Brief : The delay routine
 *	\param : delay in ms
*/
void BNO055_delay_msek(u32 msek)
{
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <__portable_avr_delay_cycles+0xa>
    2568:	61 50       	subi	r22, 0x01	; 1
    256a:	71 09       	sbc	r23, r1
    256c:	81 09       	sbc	r24, r1
    256e:	91 09       	sbc	r25, r1
    2570:	61 15       	cp	r22, r1
    2572:	71 05       	cpc	r23, r1
    2574:	81 05       	cpc	r24, r1
    2576:	91 05       	cpc	r25, r1
    2578:	b9 f7       	brne	.-18     	; 0x2568 <__portable_avr_delay_cycles+0x2>
    257a:	08 95       	ret

0000257c <main>:
	/*Here you can write your own delay routine*/
}


int main (void)
{
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	2a 97       	sbiw	r28, 0x0a	; 10
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	de bf       	out	0x3e, r29	; 62
	//bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);//NDOF
	//
	//struct bno055_euler_float_t eulerData;
	//bno055_convert_float_euler_hpr_deg(&eulerData);
	
	sysclk_init();
    258a:	0e 94 25 01 	call	0x24a	; 0x24a <sysclk_init>
	board_init();
    258e:	e4 dc       	rcall	.-1592   	; 0x1f58 <board_init>
	uart_device openLog;
	openlog_init(&openLog);
    2590:	ce 01       	movw	r24, r28
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	8b df       	rcall	.-234    	; 0x24ac <openlog_init>
	uart_init(&openLog);
    2596:	ce 01       	movw	r24, r28
    2598:	01 96       	adiw	r24, 0x01	; 1
	uart_terminal_init();
    259a:	68 dd       	rcall	.-1328   	; 0x206c <uart_init>
	printf("uart is working\n");
    259c:	9d df       	rcall	.-198    	; 0x24d8 <uart_terminal_init>
    259e:	84 e1       	ldi	r24, 0x14	; 20
    25a0:	90 e2       	ldi	r25, 0x20	; 32
    25a2:	97 d0       	rcall	.+302    	; 0x26d2 <puts>
	I2CInit(BN0_BAUD_HZ,BN0_ADDR);
    25a4:	48 e2       	ldi	r20, 0x28	; 40
    25a6:	60 e8       	ldi	r22, 0x80	; 128
    25a8:	7a e1       	ldi	r23, 0x1A	; 26
    25aa:	86 e0       	ldi	r24, 0x06	; 6
    25ac:	90 e0       	ldi	r25, 0x00	; 0
	//BNO055_Config();
	uint16_t acel[]={0,0,0};
	while (1) {
		
		printf("the data is %x \n",WhoAmIBNO());
    25ae:	e1 dc       	rcall	.-1598   	; 0x1f72 <I2CInit>
    25b0:	04 e2       	ldi	r16, 0x24	; 36
    25b2:	10 e2       	ldi	r17, 0x20	; 32
    25b4:	41 dd       	rcall	.-1406   	; 0x2038 <WhoAmIBNO>
    25b6:	1f 92       	push	r1
    25b8:	8f 93       	push	r24
    25ba:	1f 93       	push	r17
    25bc:	0f 93       	push	r16
		delay_ms(500);
    25be:	76 d0       	rcall	.+236    	; 0x26ac <printf>
    25c0:	6b ea       	ldi	r22, 0xAB	; 171
    25c2:	70 eb       	ldi	r23, 0xB0	; 176
    25c4:	88 e2       	ldi	r24, 0x28	; 40
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	ce df       	rcall	.-100    	; 0x2566 <__portable_avr_delay_cycles>
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	f0 cf       	rjmp	.-32     	; 0x25b4 <main+0x38>

000025d4 <__udivmodsi4>:
    25d4:	a1 e2       	ldi	r26, 0x21	; 33
    25d6:	1a 2e       	mov	r1, r26
    25d8:	aa 1b       	sub	r26, r26
    25da:	bb 1b       	sub	r27, r27
    25dc:	fd 01       	movw	r30, r26
    25de:	0d c0       	rjmp	.+26     	; 0x25fa <__udivmodsi4_ep>

000025e0 <__udivmodsi4_loop>:
    25e0:	aa 1f       	adc	r26, r26
    25e2:	bb 1f       	adc	r27, r27
    25e4:	ee 1f       	adc	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	a2 17       	cp	r26, r18
    25ea:	b3 07       	cpc	r27, r19
    25ec:	e4 07       	cpc	r30, r20
    25ee:	f5 07       	cpc	r31, r21
    25f0:	20 f0       	brcs	.+8      	; 0x25fa <__udivmodsi4_ep>
    25f2:	a2 1b       	sub	r26, r18
    25f4:	b3 0b       	sbc	r27, r19
    25f6:	e4 0b       	sbc	r30, r20
    25f8:	f5 0b       	sbc	r31, r21

000025fa <__udivmodsi4_ep>:
    25fa:	66 1f       	adc	r22, r22
    25fc:	77 1f       	adc	r23, r23
    25fe:	88 1f       	adc	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	1a 94       	dec	r1
    2604:	69 f7       	brne	.-38     	; 0x25e0 <__udivmodsi4_loop>
    2606:	60 95       	com	r22
    2608:	70 95       	com	r23
    260a:	80 95       	com	r24
    260c:	90 95       	com	r25
    260e:	9b 01       	movw	r18, r22
    2610:	ac 01       	movw	r20, r24
    2612:	bd 01       	movw	r22, r26
    2614:	cf 01       	movw	r24, r30
    2616:	08 95       	ret

00002618 <fdevopen>:
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	31 f4       	brne	.+12     	; 0x2630 <fdevopen+0x18>
    2624:	61 15       	cp	r22, r1
    2626:	71 05       	cpc	r23, r1
    2628:	19 f4       	brne	.+6      	; 0x2630 <fdevopen+0x18>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	39 c0       	rjmp	.+114    	; 0x26a2 <fdevopen+0x8a>
    2630:	8b 01       	movw	r16, r22
    2632:	ec 01       	movw	r28, r24
    2634:	6e e0       	ldi	r22, 0x0E	; 14
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	71 d2       	rcall	.+1250   	; 0x2b20 <calloc>
    263e:	fc 01       	movw	r30, r24
    2640:	89 2b       	or	r24, r25
    2642:	99 f3       	breq	.-26     	; 0x262a <fdevopen+0x12>
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	83 83       	std	Z+3, r24	; 0x03
    2648:	01 15       	cp	r16, r1
    264a:	11 05       	cpc	r17, r1
    264c:	71 f0       	breq	.+28     	; 0x266a <fdevopen+0x52>
    264e:	02 87       	std	Z+10, r16	; 0x0a
    2650:	13 87       	std	Z+11, r17	; 0x0b
    2652:	81 e8       	ldi	r24, 0x81	; 129
    2654:	83 83       	std	Z+3, r24	; 0x03
    2656:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <__iob>
    265a:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <__iob+0x1>
    265e:	89 2b       	or	r24, r25
    2660:	21 f4       	brne	.+8      	; 0x266a <fdevopen+0x52>
    2662:	e0 93 a0 20 	sts	0x20A0, r30	; 0x8020a0 <__iob>
    2666:	f0 93 a1 20 	sts	0x20A1, r31	; 0x8020a1 <__iob+0x1>
    266a:	20 97       	sbiw	r28, 0x00	; 0
    266c:	c9 f0       	breq	.+50     	; 0x26a0 <fdevopen+0x88>
    266e:	c0 87       	std	Z+8, r28	; 0x08
    2670:	d1 87       	std	Z+9, r29	; 0x09
    2672:	83 81       	ldd	r24, Z+3	; 0x03
    2674:	82 60       	ori	r24, 0x02	; 2
    2676:	83 83       	std	Z+3, r24	; 0x03
    2678:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__iob+0x2>
    267c:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <__iob+0x3>
    2680:	89 2b       	or	r24, r25
    2682:	71 f4       	brne	.+28     	; 0x26a0 <fdevopen+0x88>
    2684:	e0 93 a2 20 	sts	0x20A2, r30	; 0x8020a2 <__iob+0x2>
    2688:	f0 93 a3 20 	sts	0x20A3, r31	; 0x8020a3 <__iob+0x3>
    268c:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <__iob+0x4>
    2690:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <__iob+0x5>
    2694:	89 2b       	or	r24, r25
    2696:	21 f4       	brne	.+8      	; 0x26a0 <fdevopen+0x88>
    2698:	e0 93 a4 20 	sts	0x20A4, r30	; 0x8020a4 <__iob+0x4>
    269c:	f0 93 a5 20 	sts	0x20A5, r31	; 0x8020a5 <__iob+0x5>
    26a0:	cf 01       	movw	r24, r30
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <printf>:
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	ae 01       	movw	r20, r28
    26b6:	4a 5f       	subi	r20, 0xFA	; 250
    26b8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ba:	fa 01       	movw	r30, r20
    26bc:	61 91       	ld	r22, Z+
    26be:	71 91       	ld	r23, Z+
    26c0:	af 01       	movw	r20, r30
    26c2:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__iob+0x2>
    26c6:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <__iob+0x3>
    26ca:	33 d0       	rcall	.+102    	; 0x2732 <vfprintf>
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	08 95       	ret

000026d2 <puts>:
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	e0 91 a2 20 	lds	r30, 0x20A2	; 0x8020a2 <__iob+0x2>
    26de:	f0 91 a3 20 	lds	r31, 0x20A3	; 0x8020a3 <__iob+0x3>
    26e2:	23 81       	ldd	r18, Z+3	; 0x03
    26e4:	21 ff       	sbrs	r18, 1
    26e6:	1b c0       	rjmp	.+54     	; 0x271e <puts+0x4c>
    26e8:	8c 01       	movw	r16, r24
    26ea:	d0 e0       	ldi	r29, 0x00	; 0
    26ec:	c0 e0       	ldi	r28, 0x00	; 0
    26ee:	f8 01       	movw	r30, r16
    26f0:	81 91       	ld	r24, Z+
    26f2:	8f 01       	movw	r16, r30
    26f4:	60 91 a2 20 	lds	r22, 0x20A2	; 0x8020a2 <__iob+0x2>
    26f8:	70 91 a3 20 	lds	r23, 0x20A3	; 0x8020a3 <__iob+0x3>
    26fc:	db 01       	movw	r26, r22
    26fe:	18 96       	adiw	r26, 0x08	; 8
    2700:	ed 91       	ld	r30, X+
    2702:	fc 91       	ld	r31, X
    2704:	19 97       	sbiw	r26, 0x09	; 9
    2706:	88 23       	and	r24, r24
    2708:	31 f0       	breq	.+12     	; 0x2716 <puts+0x44>
    270a:	19 95       	eicall
    270c:	89 2b       	or	r24, r25
    270e:	79 f3       	breq	.-34     	; 0x26ee <puts+0x1c>
    2710:	df ef       	ldi	r29, 0xFF	; 255
    2712:	cf ef       	ldi	r28, 0xFF	; 255
    2714:	ec cf       	rjmp	.-40     	; 0x26ee <puts+0x1c>
    2716:	8a e0       	ldi	r24, 0x0A	; 10
    2718:	19 95       	eicall
    271a:	89 2b       	or	r24, r25
    271c:	19 f0       	breq	.+6      	; 0x2724 <puts+0x52>
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	9f ef       	ldi	r25, 0xFF	; 255
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <puts+0x56>
    2724:	8d 2f       	mov	r24, r29
    2726:	9c 2f       	mov	r25, r28
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret

00002732 <vfprintf>:
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	2b 97       	sbiw	r28, 0x0b	; 11
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	6c 01       	movw	r12, r24
    2762:	7b 01       	movw	r14, r22
    2764:	8a 01       	movw	r16, r20
    2766:	fc 01       	movw	r30, r24
    2768:	16 82       	std	Z+6, r1	; 0x06
    276a:	17 82       	std	Z+7, r1	; 0x07
    276c:	83 81       	ldd	r24, Z+3	; 0x03
    276e:	81 ff       	sbrs	r24, 1
    2770:	bf c1       	rjmp	.+894    	; 0x2af0 <vfprintf+0x3be>
    2772:	ce 01       	movw	r24, r28
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	3c 01       	movw	r6, r24
    2778:	f6 01       	movw	r30, r12
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	f7 01       	movw	r30, r14
    277e:	93 fd       	sbrc	r25, 3
    2780:	85 91       	lpm	r24, Z+
    2782:	93 ff       	sbrs	r25, 3
    2784:	81 91       	ld	r24, Z+
    2786:	7f 01       	movw	r14, r30
    2788:	88 23       	and	r24, r24
    278a:	09 f4       	brne	.+2      	; 0x278e <vfprintf+0x5c>
    278c:	ad c1       	rjmp	.+858    	; 0x2ae8 <vfprintf+0x3b6>
    278e:	85 32       	cpi	r24, 0x25	; 37
    2790:	39 f4       	brne	.+14     	; 0x27a0 <vfprintf+0x6e>
    2792:	93 fd       	sbrc	r25, 3
    2794:	85 91       	lpm	r24, Z+
    2796:	93 ff       	sbrs	r25, 3
    2798:	81 91       	ld	r24, Z+
    279a:	7f 01       	movw	r14, r30
    279c:	85 32       	cpi	r24, 0x25	; 37
    279e:	21 f4       	brne	.+8      	; 0x27a8 <vfprintf+0x76>
    27a0:	b6 01       	movw	r22, r12
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	15 d3       	rcall	.+1578   	; 0x2dd0 <fputc>
    27a6:	e8 cf       	rjmp	.-48     	; 0x2778 <vfprintf+0x46>
    27a8:	91 2c       	mov	r9, r1
    27aa:	21 2c       	mov	r2, r1
    27ac:	31 2c       	mov	r3, r1
    27ae:	ff e1       	ldi	r31, 0x1F	; 31
    27b0:	f3 15       	cp	r31, r3
    27b2:	d8 f0       	brcs	.+54     	; 0x27ea <vfprintf+0xb8>
    27b4:	8b 32       	cpi	r24, 0x2B	; 43
    27b6:	79 f0       	breq	.+30     	; 0x27d6 <vfprintf+0xa4>
    27b8:	38 f4       	brcc	.+14     	; 0x27c8 <vfprintf+0x96>
    27ba:	80 32       	cpi	r24, 0x20	; 32
    27bc:	79 f0       	breq	.+30     	; 0x27dc <vfprintf+0xaa>
    27be:	83 32       	cpi	r24, 0x23	; 35
    27c0:	a1 f4       	brne	.+40     	; 0x27ea <vfprintf+0xb8>
    27c2:	23 2d       	mov	r18, r3
    27c4:	20 61       	ori	r18, 0x10	; 16
    27c6:	1d c0       	rjmp	.+58     	; 0x2802 <vfprintf+0xd0>
    27c8:	8d 32       	cpi	r24, 0x2D	; 45
    27ca:	61 f0       	breq	.+24     	; 0x27e4 <vfprintf+0xb2>
    27cc:	80 33       	cpi	r24, 0x30	; 48
    27ce:	69 f4       	brne	.+26     	; 0x27ea <vfprintf+0xb8>
    27d0:	23 2d       	mov	r18, r3
    27d2:	21 60       	ori	r18, 0x01	; 1
    27d4:	16 c0       	rjmp	.+44     	; 0x2802 <vfprintf+0xd0>
    27d6:	83 2d       	mov	r24, r3
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	38 2e       	mov	r3, r24
    27dc:	e3 2d       	mov	r30, r3
    27de:	e4 60       	ori	r30, 0x04	; 4
    27e0:	3e 2e       	mov	r3, r30
    27e2:	2a c0       	rjmp	.+84     	; 0x2838 <vfprintf+0x106>
    27e4:	f3 2d       	mov	r31, r3
    27e6:	f8 60       	ori	r31, 0x08	; 8
    27e8:	1d c0       	rjmp	.+58     	; 0x2824 <vfprintf+0xf2>
    27ea:	37 fc       	sbrc	r3, 7
    27ec:	2d c0       	rjmp	.+90     	; 0x2848 <vfprintf+0x116>
    27ee:	20 ed       	ldi	r18, 0xD0	; 208
    27f0:	28 0f       	add	r18, r24
    27f2:	2a 30       	cpi	r18, 0x0A	; 10
    27f4:	40 f0       	brcs	.+16     	; 0x2806 <vfprintf+0xd4>
    27f6:	8e 32       	cpi	r24, 0x2E	; 46
    27f8:	b9 f4       	brne	.+46     	; 0x2828 <vfprintf+0xf6>
    27fa:	36 fc       	sbrc	r3, 6
    27fc:	75 c1       	rjmp	.+746    	; 0x2ae8 <vfprintf+0x3b6>
    27fe:	23 2d       	mov	r18, r3
    2800:	20 64       	ori	r18, 0x40	; 64
    2802:	32 2e       	mov	r3, r18
    2804:	19 c0       	rjmp	.+50     	; 0x2838 <vfprintf+0x106>
    2806:	36 fe       	sbrs	r3, 6
    2808:	06 c0       	rjmp	.+12     	; 0x2816 <vfprintf+0xe4>
    280a:	8a e0       	ldi	r24, 0x0A	; 10
    280c:	98 9e       	mul	r9, r24
    280e:	20 0d       	add	r18, r0
    2810:	11 24       	eor	r1, r1
    2812:	92 2e       	mov	r9, r18
    2814:	11 c0       	rjmp	.+34     	; 0x2838 <vfprintf+0x106>
    2816:	ea e0       	ldi	r30, 0x0A	; 10
    2818:	2e 9e       	mul	r2, r30
    281a:	20 0d       	add	r18, r0
    281c:	11 24       	eor	r1, r1
    281e:	22 2e       	mov	r2, r18
    2820:	f3 2d       	mov	r31, r3
    2822:	f0 62       	ori	r31, 0x20	; 32
    2824:	3f 2e       	mov	r3, r31
    2826:	08 c0       	rjmp	.+16     	; 0x2838 <vfprintf+0x106>
    2828:	8c 36       	cpi	r24, 0x6C	; 108
    282a:	21 f4       	brne	.+8      	; 0x2834 <vfprintf+0x102>
    282c:	83 2d       	mov	r24, r3
    282e:	80 68       	ori	r24, 0x80	; 128
    2830:	38 2e       	mov	r3, r24
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <vfprintf+0x106>
    2834:	88 36       	cpi	r24, 0x68	; 104
    2836:	41 f4       	brne	.+16     	; 0x2848 <vfprintf+0x116>
    2838:	f7 01       	movw	r30, r14
    283a:	93 fd       	sbrc	r25, 3
    283c:	85 91       	lpm	r24, Z+
    283e:	93 ff       	sbrs	r25, 3
    2840:	81 91       	ld	r24, Z+
    2842:	7f 01       	movw	r14, r30
    2844:	81 11       	cpse	r24, r1
    2846:	b3 cf       	rjmp	.-154    	; 0x27ae <vfprintf+0x7c>
    2848:	98 2f       	mov	r25, r24
    284a:	9f 7d       	andi	r25, 0xDF	; 223
    284c:	95 54       	subi	r25, 0x45	; 69
    284e:	93 30       	cpi	r25, 0x03	; 3
    2850:	28 f4       	brcc	.+10     	; 0x285c <vfprintf+0x12a>
    2852:	0c 5f       	subi	r16, 0xFC	; 252
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	9f e3       	ldi	r25, 0x3F	; 63
    2858:	99 83       	std	Y+1, r25	; 0x01
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <vfprintf+0x144>
    285c:	83 36       	cpi	r24, 0x63	; 99
    285e:	31 f0       	breq	.+12     	; 0x286c <vfprintf+0x13a>
    2860:	83 37       	cpi	r24, 0x73	; 115
    2862:	71 f0       	breq	.+28     	; 0x2880 <vfprintf+0x14e>
    2864:	83 35       	cpi	r24, 0x53	; 83
    2866:	09 f0       	breq	.+2      	; 0x286a <vfprintf+0x138>
    2868:	55 c0       	rjmp	.+170    	; 0x2914 <vfprintf+0x1e2>
    286a:	20 c0       	rjmp	.+64     	; 0x28ac <vfprintf+0x17a>
    286c:	f8 01       	movw	r30, r16
    286e:	80 81       	ld	r24, Z
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	0e 5f       	subi	r16, 0xFE	; 254
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	88 24       	eor	r8, r8
    2878:	83 94       	inc	r8
    287a:	91 2c       	mov	r9, r1
    287c:	53 01       	movw	r10, r6
    287e:	12 c0       	rjmp	.+36     	; 0x28a4 <vfprintf+0x172>
    2880:	28 01       	movw	r4, r16
    2882:	f2 e0       	ldi	r31, 0x02	; 2
    2884:	4f 0e       	add	r4, r31
    2886:	51 1c       	adc	r5, r1
    2888:	f8 01       	movw	r30, r16
    288a:	a0 80       	ld	r10, Z
    288c:	b1 80       	ldd	r11, Z+1	; 0x01
    288e:	36 fe       	sbrs	r3, 6
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <vfprintf+0x166>
    2892:	69 2d       	mov	r22, r9
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x16a>
    2898:	6f ef       	ldi	r22, 0xFF	; 255
    289a:	7f ef       	ldi	r23, 0xFF	; 255
    289c:	c5 01       	movw	r24, r10
    289e:	8d d2       	rcall	.+1306   	; 0x2dba <strnlen>
    28a0:	4c 01       	movw	r8, r24
    28a2:	82 01       	movw	r16, r4
    28a4:	f3 2d       	mov	r31, r3
    28a6:	ff 77       	andi	r31, 0x7F	; 127
    28a8:	3f 2e       	mov	r3, r31
    28aa:	15 c0       	rjmp	.+42     	; 0x28d6 <vfprintf+0x1a4>
    28ac:	28 01       	movw	r4, r16
    28ae:	22 e0       	ldi	r18, 0x02	; 2
    28b0:	42 0e       	add	r4, r18
    28b2:	51 1c       	adc	r5, r1
    28b4:	f8 01       	movw	r30, r16
    28b6:	a0 80       	ld	r10, Z
    28b8:	b1 80       	ldd	r11, Z+1	; 0x01
    28ba:	36 fe       	sbrs	r3, 6
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <vfprintf+0x192>
    28be:	69 2d       	mov	r22, r9
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <vfprintf+0x196>
    28c4:	6f ef       	ldi	r22, 0xFF	; 255
    28c6:	7f ef       	ldi	r23, 0xFF	; 255
    28c8:	c5 01       	movw	r24, r10
    28ca:	65 d2       	rcall	.+1226   	; 0x2d96 <strnlen_P>
    28cc:	4c 01       	movw	r8, r24
    28ce:	f3 2d       	mov	r31, r3
    28d0:	f0 68       	ori	r31, 0x80	; 128
    28d2:	3f 2e       	mov	r3, r31
    28d4:	82 01       	movw	r16, r4
    28d6:	33 fc       	sbrc	r3, 3
    28d8:	19 c0       	rjmp	.+50     	; 0x290c <vfprintf+0x1da>
    28da:	82 2d       	mov	r24, r2
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	88 16       	cp	r8, r24
    28e0:	99 06       	cpc	r9, r25
    28e2:	a0 f4       	brcc	.+40     	; 0x290c <vfprintf+0x1da>
    28e4:	b6 01       	movw	r22, r12
    28e6:	80 e2       	ldi	r24, 0x20	; 32
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	72 d2       	rcall	.+1252   	; 0x2dd0 <fputc>
    28ec:	2a 94       	dec	r2
    28ee:	f5 cf       	rjmp	.-22     	; 0x28da <vfprintf+0x1a8>
    28f0:	f5 01       	movw	r30, r10
    28f2:	37 fc       	sbrc	r3, 7
    28f4:	85 91       	lpm	r24, Z+
    28f6:	37 fe       	sbrs	r3, 7
    28f8:	81 91       	ld	r24, Z+
    28fa:	5f 01       	movw	r10, r30
    28fc:	b6 01       	movw	r22, r12
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	67 d2       	rcall	.+1230   	; 0x2dd0 <fputc>
    2902:	21 10       	cpse	r2, r1
    2904:	2a 94       	dec	r2
    2906:	21 e0       	ldi	r18, 0x01	; 1
    2908:	82 1a       	sub	r8, r18
    290a:	91 08       	sbc	r9, r1
    290c:	81 14       	cp	r8, r1
    290e:	91 04       	cpc	r9, r1
    2910:	79 f7       	brne	.-34     	; 0x28f0 <vfprintf+0x1be>
    2912:	e1 c0       	rjmp	.+450    	; 0x2ad6 <vfprintf+0x3a4>
    2914:	84 36       	cpi	r24, 0x64	; 100
    2916:	11 f0       	breq	.+4      	; 0x291c <vfprintf+0x1ea>
    2918:	89 36       	cpi	r24, 0x69	; 105
    291a:	39 f5       	brne	.+78     	; 0x296a <vfprintf+0x238>
    291c:	f8 01       	movw	r30, r16
    291e:	37 fe       	sbrs	r3, 7
    2920:	07 c0       	rjmp	.+14     	; 0x2930 <vfprintf+0x1fe>
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	0c 5f       	subi	r16, 0xFC	; 252
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	08 c0       	rjmp	.+16     	; 0x2940 <vfprintf+0x20e>
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	07 2e       	mov	r0, r23
    2936:	00 0c       	add	r0, r0
    2938:	88 0b       	sbc	r24, r24
    293a:	99 0b       	sbc	r25, r25
    293c:	0e 5f       	subi	r16, 0xFE	; 254
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	f3 2d       	mov	r31, r3
    2942:	ff 76       	andi	r31, 0x6F	; 111
    2944:	3f 2e       	mov	r3, r31
    2946:	97 ff       	sbrs	r25, 7
    2948:	09 c0       	rjmp	.+18     	; 0x295c <vfprintf+0x22a>
    294a:	90 95       	com	r25
    294c:	80 95       	com	r24
    294e:	70 95       	com	r23
    2950:	61 95       	neg	r22
    2952:	7f 4f       	sbci	r23, 0xFF	; 255
    2954:	8f 4f       	sbci	r24, 0xFF	; 255
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	f0 68       	ori	r31, 0x80	; 128
    295a:	3f 2e       	mov	r3, r31
    295c:	2a e0       	ldi	r18, 0x0A	; 10
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	a3 01       	movw	r20, r6
    2962:	72 d2       	rcall	.+1252   	; 0x2e48 <__ultoa_invert>
    2964:	88 2e       	mov	r8, r24
    2966:	86 18       	sub	r8, r6
    2968:	44 c0       	rjmp	.+136    	; 0x29f2 <vfprintf+0x2c0>
    296a:	85 37       	cpi	r24, 0x75	; 117
    296c:	31 f4       	brne	.+12     	; 0x297a <vfprintf+0x248>
    296e:	23 2d       	mov	r18, r3
    2970:	2f 7e       	andi	r18, 0xEF	; 239
    2972:	b2 2e       	mov	r11, r18
    2974:	2a e0       	ldi	r18, 0x0A	; 10
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	25 c0       	rjmp	.+74     	; 0x29c4 <vfprintf+0x292>
    297a:	93 2d       	mov	r25, r3
    297c:	99 7f       	andi	r25, 0xF9	; 249
    297e:	b9 2e       	mov	r11, r25
    2980:	8f 36       	cpi	r24, 0x6F	; 111
    2982:	c1 f0       	breq	.+48     	; 0x29b4 <vfprintf+0x282>
    2984:	18 f4       	brcc	.+6      	; 0x298c <vfprintf+0x25a>
    2986:	88 35       	cpi	r24, 0x58	; 88
    2988:	79 f0       	breq	.+30     	; 0x29a8 <vfprintf+0x276>
    298a:	ae c0       	rjmp	.+348    	; 0x2ae8 <vfprintf+0x3b6>
    298c:	80 37       	cpi	r24, 0x70	; 112
    298e:	19 f0       	breq	.+6      	; 0x2996 <vfprintf+0x264>
    2990:	88 37       	cpi	r24, 0x78	; 120
    2992:	21 f0       	breq	.+8      	; 0x299c <vfprintf+0x26a>
    2994:	a9 c0       	rjmp	.+338    	; 0x2ae8 <vfprintf+0x3b6>
    2996:	e9 2f       	mov	r30, r25
    2998:	e0 61       	ori	r30, 0x10	; 16
    299a:	be 2e       	mov	r11, r30
    299c:	b4 fe       	sbrs	r11, 4
    299e:	0d c0       	rjmp	.+26     	; 0x29ba <vfprintf+0x288>
    29a0:	fb 2d       	mov	r31, r11
    29a2:	f4 60       	ori	r31, 0x04	; 4
    29a4:	bf 2e       	mov	r11, r31
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <vfprintf+0x288>
    29a8:	34 fe       	sbrs	r3, 4
    29aa:	0a c0       	rjmp	.+20     	; 0x29c0 <vfprintf+0x28e>
    29ac:	29 2f       	mov	r18, r25
    29ae:	26 60       	ori	r18, 0x06	; 6
    29b0:	b2 2e       	mov	r11, r18
    29b2:	06 c0       	rjmp	.+12     	; 0x29c0 <vfprintf+0x28e>
    29b4:	28 e0       	ldi	r18, 0x08	; 8
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <vfprintf+0x292>
    29ba:	20 e1       	ldi	r18, 0x10	; 16
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <vfprintf+0x292>
    29c0:	20 e1       	ldi	r18, 0x10	; 16
    29c2:	32 e0       	ldi	r19, 0x02	; 2
    29c4:	f8 01       	movw	r30, r16
    29c6:	b7 fe       	sbrs	r11, 7
    29c8:	07 c0       	rjmp	.+14     	; 0x29d8 <vfprintf+0x2a6>
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	0c 5f       	subi	r16, 0xFC	; 252
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	06 c0       	rjmp	.+12     	; 0x29e4 <vfprintf+0x2b2>
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 5f       	subi	r16, 0xFE	; 254
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	a3 01       	movw	r20, r6
    29e6:	30 d2       	rcall	.+1120   	; 0x2e48 <__ultoa_invert>
    29e8:	88 2e       	mov	r8, r24
    29ea:	86 18       	sub	r8, r6
    29ec:	fb 2d       	mov	r31, r11
    29ee:	ff 77       	andi	r31, 0x7F	; 127
    29f0:	3f 2e       	mov	r3, r31
    29f2:	36 fe       	sbrs	r3, 6
    29f4:	0d c0       	rjmp	.+26     	; 0x2a10 <vfprintf+0x2de>
    29f6:	23 2d       	mov	r18, r3
    29f8:	2e 7f       	andi	r18, 0xFE	; 254
    29fa:	a2 2e       	mov	r10, r18
    29fc:	89 14       	cp	r8, r9
    29fe:	58 f4       	brcc	.+22     	; 0x2a16 <vfprintf+0x2e4>
    2a00:	34 fe       	sbrs	r3, 4
    2a02:	0b c0       	rjmp	.+22     	; 0x2a1a <vfprintf+0x2e8>
    2a04:	32 fc       	sbrc	r3, 2
    2a06:	09 c0       	rjmp	.+18     	; 0x2a1a <vfprintf+0x2e8>
    2a08:	83 2d       	mov	r24, r3
    2a0a:	8e 7e       	andi	r24, 0xEE	; 238
    2a0c:	a8 2e       	mov	r10, r24
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <vfprintf+0x2e8>
    2a10:	b8 2c       	mov	r11, r8
    2a12:	a3 2c       	mov	r10, r3
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <vfprintf+0x2ea>
    2a16:	b8 2c       	mov	r11, r8
    2a18:	01 c0       	rjmp	.+2      	; 0x2a1c <vfprintf+0x2ea>
    2a1a:	b9 2c       	mov	r11, r9
    2a1c:	a4 fe       	sbrs	r10, 4
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <vfprintf+0x30c>
    2a20:	fe 01       	movw	r30, r28
    2a22:	e8 0d       	add	r30, r8
    2a24:	f1 1d       	adc	r31, r1
    2a26:	80 81       	ld	r24, Z
    2a28:	80 33       	cpi	r24, 0x30	; 48
    2a2a:	21 f4       	brne	.+8      	; 0x2a34 <vfprintf+0x302>
    2a2c:	9a 2d       	mov	r25, r10
    2a2e:	99 7e       	andi	r25, 0xE9	; 233
    2a30:	a9 2e       	mov	r10, r25
    2a32:	09 c0       	rjmp	.+18     	; 0x2a46 <vfprintf+0x314>
    2a34:	a2 fe       	sbrs	r10, 2
    2a36:	06 c0       	rjmp	.+12     	; 0x2a44 <vfprintf+0x312>
    2a38:	b3 94       	inc	r11
    2a3a:	b3 94       	inc	r11
    2a3c:	04 c0       	rjmp	.+8      	; 0x2a46 <vfprintf+0x314>
    2a3e:	8a 2d       	mov	r24, r10
    2a40:	86 78       	andi	r24, 0x86	; 134
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <vfprintf+0x314>
    2a44:	b3 94       	inc	r11
    2a46:	a3 fc       	sbrc	r10, 3
    2a48:	10 c0       	rjmp	.+32     	; 0x2a6a <vfprintf+0x338>
    2a4a:	a0 fe       	sbrs	r10, 0
    2a4c:	06 c0       	rjmp	.+12     	; 0x2a5a <vfprintf+0x328>
    2a4e:	b2 14       	cp	r11, r2
    2a50:	80 f4       	brcc	.+32     	; 0x2a72 <vfprintf+0x340>
    2a52:	28 0c       	add	r2, r8
    2a54:	92 2c       	mov	r9, r2
    2a56:	9b 18       	sub	r9, r11
    2a58:	0d c0       	rjmp	.+26     	; 0x2a74 <vfprintf+0x342>
    2a5a:	b2 14       	cp	r11, r2
    2a5c:	58 f4       	brcc	.+22     	; 0x2a74 <vfprintf+0x342>
    2a5e:	b6 01       	movw	r22, r12
    2a60:	80 e2       	ldi	r24, 0x20	; 32
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	b5 d1       	rcall	.+874    	; 0x2dd0 <fputc>
    2a66:	b3 94       	inc	r11
    2a68:	f8 cf       	rjmp	.-16     	; 0x2a5a <vfprintf+0x328>
    2a6a:	b2 14       	cp	r11, r2
    2a6c:	18 f4       	brcc	.+6      	; 0x2a74 <vfprintf+0x342>
    2a6e:	2b 18       	sub	r2, r11
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <vfprintf+0x344>
    2a72:	98 2c       	mov	r9, r8
    2a74:	21 2c       	mov	r2, r1
    2a76:	a4 fe       	sbrs	r10, 4
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <vfprintf+0x366>
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	80 e3       	ldi	r24, 0x30	; 48
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a7 d1       	rcall	.+846    	; 0x2dd0 <fputc>
    2a82:	a2 fe       	sbrs	r10, 2
    2a84:	16 c0       	rjmp	.+44     	; 0x2ab2 <vfprintf+0x380>
    2a86:	a1 fc       	sbrc	r10, 1
    2a88:	03 c0       	rjmp	.+6      	; 0x2a90 <vfprintf+0x35e>
    2a8a:	88 e7       	ldi	r24, 0x78	; 120
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <vfprintf+0x362>
    2a90:	88 e5       	ldi	r24, 0x58	; 88
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	b6 01       	movw	r22, r12
    2a96:	0c c0       	rjmp	.+24     	; 0x2ab0 <vfprintf+0x37e>
    2a98:	8a 2d       	mov	r24, r10
    2a9a:	86 78       	andi	r24, 0x86	; 134
    2a9c:	51 f0       	breq	.+20     	; 0x2ab2 <vfprintf+0x380>
    2a9e:	a1 fe       	sbrs	r10, 1
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <vfprintf+0x374>
    2aa2:	8b e2       	ldi	r24, 0x2B	; 43
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <vfprintf+0x376>
    2aa6:	80 e2       	ldi	r24, 0x20	; 32
    2aa8:	a7 fc       	sbrc	r10, 7
    2aaa:	8d e2       	ldi	r24, 0x2D	; 45
    2aac:	b6 01       	movw	r22, r12
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	8f d1       	rcall	.+798    	; 0x2dd0 <fputc>
    2ab2:	89 14       	cp	r8, r9
    2ab4:	30 f4       	brcc	.+12     	; 0x2ac2 <vfprintf+0x390>
    2ab6:	b6 01       	movw	r22, r12
    2ab8:	80 e3       	ldi	r24, 0x30	; 48
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	89 d1       	rcall	.+786    	; 0x2dd0 <fputc>
    2abe:	9a 94       	dec	r9
    2ac0:	f8 cf       	rjmp	.-16     	; 0x2ab2 <vfprintf+0x380>
    2ac2:	8a 94       	dec	r8
    2ac4:	f3 01       	movw	r30, r6
    2ac6:	e8 0d       	add	r30, r8
    2ac8:	f1 1d       	adc	r31, r1
    2aca:	80 81       	ld	r24, Z
    2acc:	b6 01       	movw	r22, r12
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	7f d1       	rcall	.+766    	; 0x2dd0 <fputc>
    2ad2:	81 10       	cpse	r8, r1
    2ad4:	f6 cf       	rjmp	.-20     	; 0x2ac2 <vfprintf+0x390>
    2ad6:	22 20       	and	r2, r2
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <vfprintf+0x3aa>
    2ada:	4e ce       	rjmp	.-868    	; 0x2778 <vfprintf+0x46>
    2adc:	b6 01       	movw	r22, r12
    2ade:	80 e2       	ldi	r24, 0x20	; 32
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	76 d1       	rcall	.+748    	; 0x2dd0 <fputc>
    2ae4:	2a 94       	dec	r2
    2ae6:	f7 cf       	rjmp	.-18     	; 0x2ad6 <vfprintf+0x3a4>
    2ae8:	f6 01       	movw	r30, r12
    2aea:	86 81       	ldd	r24, Z+6	; 0x06
    2aec:	97 81       	ldd	r25, Z+7	; 0x07
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <vfprintf+0x3c2>
    2af0:	8f ef       	ldi	r24, 0xFF	; 255
    2af2:	9f ef       	ldi	r25, 0xFF	; 255
    2af4:	2b 96       	adiw	r28, 0x0b	; 11
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	bf 90       	pop	r11
    2b0c:	af 90       	pop	r10
    2b0e:	9f 90       	pop	r9
    2b10:	8f 90       	pop	r8
    2b12:	7f 90       	pop	r7
    2b14:	6f 90       	pop	r6
    2b16:	5f 90       	pop	r5
    2b18:	4f 90       	pop	r4
    2b1a:	3f 90       	pop	r3
    2b1c:	2f 90       	pop	r2
    2b1e:	08 95       	ret

00002b20 <calloc>:
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	86 9f       	mul	r24, r22
    2b2a:	80 01       	movw	r16, r0
    2b2c:	87 9f       	mul	r24, r23
    2b2e:	10 0d       	add	r17, r0
    2b30:	96 9f       	mul	r25, r22
    2b32:	10 0d       	add	r17, r0
    2b34:	11 24       	eor	r1, r1
    2b36:	c8 01       	movw	r24, r16
    2b38:	0d d0       	rcall	.+26     	; 0x2b54 <malloc>
    2b3a:	ec 01       	movw	r28, r24
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	21 f0       	breq	.+8      	; 0x2b48 <calloc+0x28>
    2b40:	a8 01       	movw	r20, r16
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	32 d1       	rcall	.+612    	; 0x2dac <memset>
    2b48:	ce 01       	movw	r24, r28
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	08 95       	ret

00002b54 <malloc>:
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	82 30       	cpi	r24, 0x02	; 2
    2b5e:	91 05       	cpc	r25, r1
    2b60:	10 f4       	brcc	.+4      	; 0x2b66 <malloc+0x12>
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	e0 91 a8 20 	lds	r30, 0x20A8	; 0x8020a8 <__flp>
    2b6a:	f0 91 a9 20 	lds	r31, 0x20A9	; 0x8020a9 <__flp+0x1>
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	a0 e0       	ldi	r26, 0x00	; 0
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	30 97       	sbiw	r30, 0x00	; 0
    2b78:	19 f1       	breq	.+70     	; 0x2bc0 <malloc+0x6c>
    2b7a:	40 81       	ld	r20, Z
    2b7c:	51 81       	ldd	r21, Z+1	; 0x01
    2b7e:	02 81       	ldd	r16, Z+2	; 0x02
    2b80:	13 81       	ldd	r17, Z+3	; 0x03
    2b82:	48 17       	cp	r20, r24
    2b84:	59 07       	cpc	r21, r25
    2b86:	c8 f0       	brcs	.+50     	; 0x2bba <malloc+0x66>
    2b88:	84 17       	cp	r24, r20
    2b8a:	95 07       	cpc	r25, r21
    2b8c:	69 f4       	brne	.+26     	; 0x2ba8 <malloc+0x54>
    2b8e:	10 97       	sbiw	r26, 0x00	; 0
    2b90:	31 f0       	breq	.+12     	; 0x2b9e <malloc+0x4a>
    2b92:	12 96       	adiw	r26, 0x02	; 2
    2b94:	0c 93       	st	X, r16
    2b96:	12 97       	sbiw	r26, 0x02	; 2
    2b98:	13 96       	adiw	r26, 0x03	; 3
    2b9a:	1c 93       	st	X, r17
    2b9c:	27 c0       	rjmp	.+78     	; 0x2bec <malloc+0x98>
    2b9e:	00 93 a8 20 	sts	0x20A8, r16	; 0x8020a8 <__flp>
    2ba2:	10 93 a9 20 	sts	0x20A9, r17	; 0x8020a9 <__flp+0x1>
    2ba6:	22 c0       	rjmp	.+68     	; 0x2bec <malloc+0x98>
    2ba8:	21 15       	cp	r18, r1
    2baa:	31 05       	cpc	r19, r1
    2bac:	19 f0       	breq	.+6      	; 0x2bb4 <malloc+0x60>
    2bae:	42 17       	cp	r20, r18
    2bb0:	53 07       	cpc	r21, r19
    2bb2:	18 f4       	brcc	.+6      	; 0x2bba <malloc+0x66>
    2bb4:	9a 01       	movw	r18, r20
    2bb6:	bd 01       	movw	r22, r26
    2bb8:	ef 01       	movw	r28, r30
    2bba:	df 01       	movw	r26, r30
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	db cf       	rjmp	.-74     	; 0x2b76 <malloc+0x22>
    2bc0:	21 15       	cp	r18, r1
    2bc2:	31 05       	cpc	r19, r1
    2bc4:	f9 f0       	breq	.+62     	; 0x2c04 <malloc+0xb0>
    2bc6:	28 1b       	sub	r18, r24
    2bc8:	39 0b       	sbc	r19, r25
    2bca:	24 30       	cpi	r18, 0x04	; 4
    2bcc:	31 05       	cpc	r19, r1
    2bce:	80 f4       	brcc	.+32     	; 0x2bf0 <malloc+0x9c>
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd4:	61 15       	cp	r22, r1
    2bd6:	71 05       	cpc	r23, r1
    2bd8:	21 f0       	breq	.+8      	; 0x2be2 <malloc+0x8e>
    2bda:	fb 01       	movw	r30, r22
    2bdc:	82 83       	std	Z+2, r24	; 0x02
    2bde:	93 83       	std	Z+3, r25	; 0x03
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <malloc+0x96>
    2be2:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <__flp>
    2be6:	90 93 a9 20 	sts	0x20A9, r25	; 0x8020a9 <__flp+0x1>
    2bea:	fe 01       	movw	r30, r28
    2bec:	32 96       	adiw	r30, 0x02	; 2
    2bee:	44 c0       	rjmp	.+136    	; 0x2c78 <malloc+0x124>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e2 0f       	add	r30, r18
    2bf4:	f3 1f       	adc	r31, r19
    2bf6:	81 93       	st	Z+, r24
    2bf8:	91 93       	st	Z+, r25
    2bfa:	22 50       	subi	r18, 0x02	; 2
    2bfc:	31 09       	sbc	r19, r1
    2bfe:	28 83       	st	Y, r18
    2c00:	39 83       	std	Y+1, r19	; 0x01
    2c02:	3a c0       	rjmp	.+116    	; 0x2c78 <malloc+0x124>
    2c04:	20 91 a6 20 	lds	r18, 0x20A6	; 0x8020a6 <__brkval>
    2c08:	30 91 a7 20 	lds	r19, 0x20A7	; 0x8020a7 <__brkval+0x1>
    2c0c:	23 2b       	or	r18, r19
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <malloc+0xcc>
    2c10:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2c14:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2c18:	20 93 a6 20 	sts	0x20A6, r18	; 0x8020a6 <__brkval>
    2c1c:	30 93 a7 20 	sts	0x20A7, r19	; 0x8020a7 <__brkval+0x1>
    2c20:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2c24:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2c28:	21 15       	cp	r18, r1
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	41 f4       	brne	.+16     	; 0x2c3e <malloc+0xea>
    2c2e:	2d b7       	in	r18, 0x3d	; 61
    2c30:	3e b7       	in	r19, 0x3e	; 62
    2c32:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2c36:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2c3a:	24 1b       	sub	r18, r20
    2c3c:	35 0b       	sbc	r19, r21
    2c3e:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <__brkval>
    2c42:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <__brkval+0x1>
    2c46:	e2 17       	cp	r30, r18
    2c48:	f3 07       	cpc	r31, r19
    2c4a:	a0 f4       	brcc	.+40     	; 0x2c74 <malloc+0x120>
    2c4c:	2e 1b       	sub	r18, r30
    2c4e:	3f 0b       	sbc	r19, r31
    2c50:	28 17       	cp	r18, r24
    2c52:	39 07       	cpc	r19, r25
    2c54:	78 f0       	brcs	.+30     	; 0x2c74 <malloc+0x120>
    2c56:	ac 01       	movw	r20, r24
    2c58:	4e 5f       	subi	r20, 0xFE	; 254
    2c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5c:	24 17       	cp	r18, r20
    2c5e:	35 07       	cpc	r19, r21
    2c60:	48 f0       	brcs	.+18     	; 0x2c74 <malloc+0x120>
    2c62:	4e 0f       	add	r20, r30
    2c64:	5f 1f       	adc	r21, r31
    2c66:	40 93 a6 20 	sts	0x20A6, r20	; 0x8020a6 <__brkval>
    2c6a:	50 93 a7 20 	sts	0x20A7, r21	; 0x8020a7 <__brkval+0x1>
    2c6e:	81 93       	st	Z+, r24
    2c70:	91 93       	st	Z+, r25
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <malloc+0x124>
    2c74:	e0 e0       	ldi	r30, 0x00	; 0
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	cf 01       	movw	r24, r30
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <free>:
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <free+0xa>
    2c8c:	81 c0       	rjmp	.+258    	; 0x2d90 <free+0x10c>
    2c8e:	fc 01       	movw	r30, r24
    2c90:	32 97       	sbiw	r30, 0x02	; 2
    2c92:	12 82       	std	Z+2, r1	; 0x02
    2c94:	13 82       	std	Z+3, r1	; 0x03
    2c96:	a0 91 a8 20 	lds	r26, 0x20A8	; 0x8020a8 <__flp>
    2c9a:	b0 91 a9 20 	lds	r27, 0x20A9	; 0x8020a9 <__flp+0x1>
    2c9e:	10 97       	sbiw	r26, 0x00	; 0
    2ca0:	81 f4       	brne	.+32     	; 0x2cc2 <free+0x3e>
    2ca2:	20 81       	ld	r18, Z
    2ca4:	31 81       	ldd	r19, Z+1	; 0x01
    2ca6:	82 0f       	add	r24, r18
    2ca8:	93 1f       	adc	r25, r19
    2caa:	20 91 a6 20 	lds	r18, 0x20A6	; 0x8020a6 <__brkval>
    2cae:	30 91 a7 20 	lds	r19, 0x20A7	; 0x8020a7 <__brkval+0x1>
    2cb2:	28 17       	cp	r18, r24
    2cb4:	39 07       	cpc	r19, r25
    2cb6:	51 f5       	brne	.+84     	; 0x2d0c <free+0x88>
    2cb8:	e0 93 a6 20 	sts	0x20A6, r30	; 0x8020a6 <__brkval>
    2cbc:	f0 93 a7 20 	sts	0x20A7, r31	; 0x8020a7 <__brkval+0x1>
    2cc0:	67 c0       	rjmp	.+206    	; 0x2d90 <free+0x10c>
    2cc2:	ed 01       	movw	r28, r26
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	ce 17       	cp	r28, r30
    2cca:	df 07       	cpc	r29, r31
    2ccc:	40 f4       	brcc	.+16     	; 0x2cde <free+0x5a>
    2cce:	4a 81       	ldd	r20, Y+2	; 0x02
    2cd0:	5b 81       	ldd	r21, Y+3	; 0x03
    2cd2:	9e 01       	movw	r18, r28
    2cd4:	41 15       	cp	r20, r1
    2cd6:	51 05       	cpc	r21, r1
    2cd8:	f1 f0       	breq	.+60     	; 0x2d16 <free+0x92>
    2cda:	ea 01       	movw	r28, r20
    2cdc:	f5 cf       	rjmp	.-22     	; 0x2cc8 <free+0x44>
    2cde:	c2 83       	std	Z+2, r28	; 0x02
    2ce0:	d3 83       	std	Z+3, r29	; 0x03
    2ce2:	40 81       	ld	r20, Z
    2ce4:	51 81       	ldd	r21, Z+1	; 0x01
    2ce6:	84 0f       	add	r24, r20
    2ce8:	95 1f       	adc	r25, r21
    2cea:	c8 17       	cp	r28, r24
    2cec:	d9 07       	cpc	r29, r25
    2cee:	59 f4       	brne	.+22     	; 0x2d06 <free+0x82>
    2cf0:	88 81       	ld	r24, Y
    2cf2:	99 81       	ldd	r25, Y+1	; 0x01
    2cf4:	84 0f       	add	r24, r20
    2cf6:	95 1f       	adc	r25, r21
    2cf8:	02 96       	adiw	r24, 0x02	; 2
    2cfa:	80 83       	st	Z, r24
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	82 83       	std	Z+2, r24	; 0x02
    2d04:	93 83       	std	Z+3, r25	; 0x03
    2d06:	21 15       	cp	r18, r1
    2d08:	31 05       	cpc	r19, r1
    2d0a:	29 f4       	brne	.+10     	; 0x2d16 <free+0x92>
    2d0c:	e0 93 a8 20 	sts	0x20A8, r30	; 0x8020a8 <__flp>
    2d10:	f0 93 a9 20 	sts	0x20A9, r31	; 0x8020a9 <__flp+0x1>
    2d14:	3d c0       	rjmp	.+122    	; 0x2d90 <free+0x10c>
    2d16:	e9 01       	movw	r28, r18
    2d18:	ea 83       	std	Y+2, r30	; 0x02
    2d1a:	fb 83       	std	Y+3, r31	; 0x03
    2d1c:	49 91       	ld	r20, Y+
    2d1e:	59 91       	ld	r21, Y+
    2d20:	c4 0f       	add	r28, r20
    2d22:	d5 1f       	adc	r29, r21
    2d24:	ec 17       	cp	r30, r28
    2d26:	fd 07       	cpc	r31, r29
    2d28:	61 f4       	brne	.+24     	; 0x2d42 <free+0xbe>
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	84 0f       	add	r24, r20
    2d30:	95 1f       	adc	r25, r21
    2d32:	02 96       	adiw	r24, 0x02	; 2
    2d34:	e9 01       	movw	r28, r18
    2d36:	88 83       	st	Y, r24
    2d38:	99 83       	std	Y+1, r25	; 0x01
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
    2d40:	9b 83       	std	Y+3, r25	; 0x03
    2d42:	e0 e0       	ldi	r30, 0x00	; 0
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	12 96       	adiw	r26, 0x02	; 2
    2d48:	8d 91       	ld	r24, X+
    2d4a:	9c 91       	ld	r25, X
    2d4c:	13 97       	sbiw	r26, 0x03	; 3
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	19 f0       	breq	.+6      	; 0x2d58 <free+0xd4>
    2d52:	fd 01       	movw	r30, r26
    2d54:	dc 01       	movw	r26, r24
    2d56:	f7 cf       	rjmp	.-18     	; 0x2d46 <free+0xc2>
    2d58:	8d 91       	ld	r24, X+
    2d5a:	9c 91       	ld	r25, X
    2d5c:	11 97       	sbiw	r26, 0x01	; 1
    2d5e:	9d 01       	movw	r18, r26
    2d60:	2e 5f       	subi	r18, 0xFE	; 254
    2d62:	3f 4f       	sbci	r19, 0xFF	; 255
    2d64:	82 0f       	add	r24, r18
    2d66:	93 1f       	adc	r25, r19
    2d68:	20 91 a6 20 	lds	r18, 0x20A6	; 0x8020a6 <__brkval>
    2d6c:	30 91 a7 20 	lds	r19, 0x20A7	; 0x8020a7 <__brkval+0x1>
    2d70:	28 17       	cp	r18, r24
    2d72:	39 07       	cpc	r19, r25
    2d74:	69 f4       	brne	.+26     	; 0x2d90 <free+0x10c>
    2d76:	30 97       	sbiw	r30, 0x00	; 0
    2d78:	29 f4       	brne	.+10     	; 0x2d84 <free+0x100>
    2d7a:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <__flp>
    2d7e:	10 92 a9 20 	sts	0x20A9, r1	; 0x8020a9 <__flp+0x1>
    2d82:	02 c0       	rjmp	.+4      	; 0x2d88 <free+0x104>
    2d84:	12 82       	std	Z+2, r1	; 0x02
    2d86:	13 82       	std	Z+3, r1	; 0x03
    2d88:	a0 93 a6 20 	sts	0x20A6, r26	; 0x8020a6 <__brkval>
    2d8c:	b0 93 a7 20 	sts	0x20A7, r27	; 0x8020a7 <__brkval+0x1>
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	08 95       	ret

00002d96 <strnlen_P>:
    2d96:	fc 01       	movw	r30, r24
    2d98:	05 90       	lpm	r0, Z+
    2d9a:	61 50       	subi	r22, 0x01	; 1
    2d9c:	70 40       	sbci	r23, 0x00	; 0
    2d9e:	01 10       	cpse	r0, r1
    2da0:	d8 f7       	brcc	.-10     	; 0x2d98 <strnlen_P+0x2>
    2da2:	80 95       	com	r24
    2da4:	90 95       	com	r25
    2da6:	8e 0f       	add	r24, r30
    2da8:	9f 1f       	adc	r25, r31
    2daa:	08 95       	ret

00002dac <memset>:
    2dac:	dc 01       	movw	r26, r24
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <memset+0x6>
    2db0:	6d 93       	st	X+, r22
    2db2:	41 50       	subi	r20, 0x01	; 1
    2db4:	50 40       	sbci	r21, 0x00	; 0
    2db6:	e0 f7       	brcc	.-8      	; 0x2db0 <memset+0x4>
    2db8:	08 95       	ret

00002dba <strnlen>:
    2dba:	fc 01       	movw	r30, r24
    2dbc:	61 50       	subi	r22, 0x01	; 1
    2dbe:	70 40       	sbci	r23, 0x00	; 0
    2dc0:	01 90       	ld	r0, Z+
    2dc2:	01 10       	cpse	r0, r1
    2dc4:	d8 f7       	brcc	.-10     	; 0x2dbc <strnlen+0x2>
    2dc6:	80 95       	com	r24
    2dc8:	90 95       	com	r25
    2dca:	8e 0f       	add	r24, r30
    2dcc:	9f 1f       	adc	r25, r31
    2dce:	08 95       	ret

00002dd0 <fputc>:
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	fb 01       	movw	r30, r22
    2dda:	23 81       	ldd	r18, Z+3	; 0x03
    2ddc:	21 fd       	sbrc	r18, 1
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <fputc+0x16>
    2de0:	8f ef       	ldi	r24, 0xFF	; 255
    2de2:	9f ef       	ldi	r25, 0xFF	; 255
    2de4:	2c c0       	rjmp	.+88     	; 0x2e3e <fputc+0x6e>
    2de6:	22 ff       	sbrs	r18, 2
    2de8:	16 c0       	rjmp	.+44     	; 0x2e16 <fputc+0x46>
    2dea:	46 81       	ldd	r20, Z+6	; 0x06
    2dec:	57 81       	ldd	r21, Z+7	; 0x07
    2dee:	24 81       	ldd	r18, Z+4	; 0x04
    2df0:	35 81       	ldd	r19, Z+5	; 0x05
    2df2:	42 17       	cp	r20, r18
    2df4:	53 07       	cpc	r21, r19
    2df6:	44 f4       	brge	.+16     	; 0x2e08 <fputc+0x38>
    2df8:	a0 81       	ld	r26, Z
    2dfa:	b1 81       	ldd	r27, Z+1	; 0x01
    2dfc:	9d 01       	movw	r18, r26
    2dfe:	2f 5f       	subi	r18, 0xFF	; 255
    2e00:	3f 4f       	sbci	r19, 0xFF	; 255
    2e02:	20 83       	st	Z, r18
    2e04:	31 83       	std	Z+1, r19	; 0x01
    2e06:	8c 93       	st	X, r24
    2e08:	26 81       	ldd	r18, Z+6	; 0x06
    2e0a:	37 81       	ldd	r19, Z+7	; 0x07
    2e0c:	2f 5f       	subi	r18, 0xFF	; 255
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e10:	26 83       	std	Z+6, r18	; 0x06
    2e12:	37 83       	std	Z+7, r19	; 0x07
    2e14:	14 c0       	rjmp	.+40     	; 0x2e3e <fputc+0x6e>
    2e16:	8b 01       	movw	r16, r22
    2e18:	ec 01       	movw	r28, r24
    2e1a:	fb 01       	movw	r30, r22
    2e1c:	00 84       	ldd	r0, Z+8	; 0x08
    2e1e:	f1 85       	ldd	r31, Z+9	; 0x09
    2e20:	e0 2d       	mov	r30, r0
    2e22:	19 95       	eicall
    2e24:	89 2b       	or	r24, r25
    2e26:	e1 f6       	brne	.-72     	; 0x2de0 <fputc+0x10>
    2e28:	d8 01       	movw	r26, r16
    2e2a:	16 96       	adiw	r26, 0x06	; 6
    2e2c:	8d 91       	ld	r24, X+
    2e2e:	9c 91       	ld	r25, X
    2e30:	17 97       	sbiw	r26, 0x07	; 7
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	16 96       	adiw	r26, 0x06	; 6
    2e36:	8d 93       	st	X+, r24
    2e38:	9c 93       	st	X, r25
    2e3a:	17 97       	sbiw	r26, 0x07	; 7
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	08 95       	ret

00002e48 <__ultoa_invert>:
    2e48:	fa 01       	movw	r30, r20
    2e4a:	aa 27       	eor	r26, r26
    2e4c:	28 30       	cpi	r18, 0x08	; 8
    2e4e:	51 f1       	breq	.+84     	; 0x2ea4 <__ultoa_invert+0x5c>
    2e50:	20 31       	cpi	r18, 0x10	; 16
    2e52:	81 f1       	breq	.+96     	; 0x2eb4 <__ultoa_invert+0x6c>
    2e54:	e8 94       	clt
    2e56:	6f 93       	push	r22
    2e58:	6e 7f       	andi	r22, 0xFE	; 254
    2e5a:	6e 5f       	subi	r22, 0xFE	; 254
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e60:	9f 4f       	sbci	r25, 0xFF	; 255
    2e62:	af 4f       	sbci	r26, 0xFF	; 255
    2e64:	b1 e0       	ldi	r27, 0x01	; 1
    2e66:	3e d0       	rcall	.+124    	; 0x2ee4 <__ultoa_invert+0x9c>
    2e68:	b4 e0       	ldi	r27, 0x04	; 4
    2e6a:	3c d0       	rcall	.+120    	; 0x2ee4 <__ultoa_invert+0x9c>
    2e6c:	67 0f       	add	r22, r23
    2e6e:	78 1f       	adc	r23, r24
    2e70:	89 1f       	adc	r24, r25
    2e72:	9a 1f       	adc	r25, r26
    2e74:	a1 1d       	adc	r26, r1
    2e76:	68 0f       	add	r22, r24
    2e78:	79 1f       	adc	r23, r25
    2e7a:	8a 1f       	adc	r24, r26
    2e7c:	91 1d       	adc	r25, r1
    2e7e:	a1 1d       	adc	r26, r1
    2e80:	6a 0f       	add	r22, r26
    2e82:	71 1d       	adc	r23, r1
    2e84:	81 1d       	adc	r24, r1
    2e86:	91 1d       	adc	r25, r1
    2e88:	a1 1d       	adc	r26, r1
    2e8a:	20 d0       	rcall	.+64     	; 0x2ecc <__ultoa_invert+0x84>
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <__ultoa_invert+0x48>
    2e8e:	68 94       	set
    2e90:	3f 91       	pop	r19
    2e92:	2a e0       	ldi	r18, 0x0A	; 10
    2e94:	26 9f       	mul	r18, r22
    2e96:	11 24       	eor	r1, r1
    2e98:	30 19       	sub	r19, r0
    2e9a:	30 5d       	subi	r19, 0xD0	; 208
    2e9c:	31 93       	st	Z+, r19
    2e9e:	de f6       	brtc	.-74     	; 0x2e56 <__ultoa_invert+0xe>
    2ea0:	cf 01       	movw	r24, r30
    2ea2:	08 95       	ret
    2ea4:	46 2f       	mov	r20, r22
    2ea6:	47 70       	andi	r20, 0x07	; 7
    2ea8:	40 5d       	subi	r20, 0xD0	; 208
    2eaa:	41 93       	st	Z+, r20
    2eac:	b3 e0       	ldi	r27, 0x03	; 3
    2eae:	0f d0       	rcall	.+30     	; 0x2ece <__ultoa_invert+0x86>
    2eb0:	c9 f7       	brne	.-14     	; 0x2ea4 <__ultoa_invert+0x5c>
    2eb2:	f6 cf       	rjmp	.-20     	; 0x2ea0 <__ultoa_invert+0x58>
    2eb4:	46 2f       	mov	r20, r22
    2eb6:	4f 70       	andi	r20, 0x0F	; 15
    2eb8:	40 5d       	subi	r20, 0xD0	; 208
    2eba:	4a 33       	cpi	r20, 0x3A	; 58
    2ebc:	18 f0       	brcs	.+6      	; 0x2ec4 <__ultoa_invert+0x7c>
    2ebe:	49 5d       	subi	r20, 0xD9	; 217
    2ec0:	31 fd       	sbrc	r19, 1
    2ec2:	40 52       	subi	r20, 0x20	; 32
    2ec4:	41 93       	st	Z+, r20
    2ec6:	02 d0       	rcall	.+4      	; 0x2ecc <__ultoa_invert+0x84>
    2ec8:	a9 f7       	brne	.-22     	; 0x2eb4 <__ultoa_invert+0x6c>
    2eca:	ea cf       	rjmp	.-44     	; 0x2ea0 <__ultoa_invert+0x58>
    2ecc:	b4 e0       	ldi	r27, 0x04	; 4
    2ece:	a6 95       	lsr	r26
    2ed0:	97 95       	ror	r25
    2ed2:	87 95       	ror	r24
    2ed4:	77 95       	ror	r23
    2ed6:	67 95       	ror	r22
    2ed8:	ba 95       	dec	r27
    2eda:	c9 f7       	brne	.-14     	; 0x2ece <__ultoa_invert+0x86>
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	61 05       	cpc	r22, r1
    2ee0:	71 05       	cpc	r23, r1
    2ee2:	08 95       	ret
    2ee4:	9b 01       	movw	r18, r22
    2ee6:	ac 01       	movw	r20, r24
    2ee8:	0a 2e       	mov	r0, r26
    2eea:	06 94       	lsr	r0
    2eec:	57 95       	ror	r21
    2eee:	47 95       	ror	r20
    2ef0:	37 95       	ror	r19
    2ef2:	27 95       	ror	r18
    2ef4:	ba 95       	dec	r27
    2ef6:	c9 f7       	brne	.-14     	; 0x2eea <__ultoa_invert+0xa2>
    2ef8:	62 0f       	add	r22, r18
    2efa:	73 1f       	adc	r23, r19
    2efc:	84 1f       	adc	r24, r20
    2efe:	95 1f       	adc	r25, r21
    2f00:	a0 1d       	adc	r26, r0
    2f02:	08 95       	ret

00002f04 <_exit>:
    2f04:	f8 94       	cli

00002f06 <__stop_program>:
    2f06:	ff cf       	rjmp	.-2      	; 0x2f06 <__stop_program>
