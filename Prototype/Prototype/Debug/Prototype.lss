
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00802000  00005890  00005924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000119  008020ba  008020ba  000059de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000059de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000738  00000000  00000000  00005a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eff6  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005873  00000000  00000000  000151ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009a02  00000000  00000000  0001aa21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002748  00000000  00000000  00024424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0004053f  00000000  00000000  00026b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005849  00000000  00000000  000670ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0006c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003253  00000000  00000000  0006cf64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_10>
      2c:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_11>
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__vector_13>
      38:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_14>
      3c:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_15>
      40:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__vector_16>
      44:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_17>
      48:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_18>
      4c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_19>
      50:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_20>
      54:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_21>
      58:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__vector_22>
      5c:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	87 c3       	rjmp	.+1806   	; 0x7ac <__vector_39>
      9e:	00 00       	nop
      a0:	11 c4       	rjmp	.+2082   	; 0x8c4 <__vector_40>
      a2:	00 00       	nop
      a4:	9b c4       	rjmp	.+2358   	; 0x9dc <__vector_41>
      a6:	00 00       	nop
      a8:	25 c5       	rjmp	.+2634   	; 0xaf4 <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__vector_46>
      bc:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_47>
      c0:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__vector_48>
      c4:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_49>
      c8:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__vector_50>
      cc:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__vector_51>
      d0:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__vector_52>
      d4:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__vector_53>
      d8:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__vector_54>
      dc:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_55>
      e0:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__vector_56>
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2a c1       	rjmp	.+596    	; 0x34a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	17 c1       	rjmp	.+558    	; 0x34c <__vector_71>
     11e:	00 00       	nop
     120:	a1 c1       	rjmp	.+834    	; 0x464 <__vector_72>
     122:	00 00       	nop
     124:	2b c2       	rjmp	.+1110   	; 0x57c <__vector_73>
     126:	00 00       	nop
     128:	b5 c2       	rjmp	.+1386   	; 0x694 <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_76>
     134:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_77>
     138:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__vector_78>
     13c:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_79>
     140:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__vector_80>
     144:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_81>
     148:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_82>
     14c:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_83>
     150:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_84>
     154:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__vector_85>
     158:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__vector_107>
     1b0:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__vector_108>
     1b4:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__vector_109>
     1b8:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__vector_110>
     1bc:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_111>
     1c0:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__vector_112>
     1c4:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__vector_113>
     1c8:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__vector_114>
     1cc:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__vector_115>
     1d0:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__vector_116>
     1d4:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__vector_117>
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	17 c5       	rjmp	.+2606   	; 0xc0c <__vector_119>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ae c5       	rjmp	.+2908   	; 0xd46 <__vector_122>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e0 e9       	ldi	r30, 0x90	; 144
     31e:	f8 e5       	ldi	r31, 0x58	; 88
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	aa 3b       	cpi	r26, 0xBA	; 186
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	21 e2       	ldi	r18, 0x21	; 33
     334:	aa eb       	ldi	r26, 0xBA	; 186
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a3 3d       	cpi	r26, 0xD3	; 211
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 5d 22 	call	0x44ba	; 0x44ba <main>
     346:	0c 94 46 2c 	jmp	0x588c	; 0x588c <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     35c:	0f 92       	push	r0
     35e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     362:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     366:	0f 92       	push	r0
     368:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     36c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     370:	0f 92       	push	r0
     372:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     376:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     37a:	0f 92       	push	r0
     37c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     380:	2f 93       	push	r18
     382:	3f 93       	push	r19
     384:	4f 93       	push	r20
     386:	5f 93       	push	r21
     388:	6f 93       	push	r22
     38a:	7f 93       	push	r23
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
     390:	af 93       	push	r26
     392:	bf 93       	push	r27
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <__vector_71+0x52>
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3a4:	20 91 21 21 	lds	r18, 0x2121	; 0x802121 <adca_callback>
     3a8:	30 91 22 21 	lds	r19, 0x2122	; 0x802122 <adca_callback+0x1>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     3b8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	83 70       	andi	r24, 0x03	; 3
     3c2:	99 27       	eor	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	39 f4       	brne	.+14     	; 0x3d6 <__vector_71+0x8a>
		index += 2;
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	8e 5f       	subi	r24, 0xFE	; 254
     3cc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     3ce:	8b 81       	ldd	r24, Y+3	; 0x03
     3d0:	86 95       	lsr	r24
     3d2:	86 95       	lsr	r24
     3d4:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	81 70       	andi	r24, 0x01	; 1
     3de:	99 27       	eor	r25, r25
     3e0:	89 2b       	or	r24, r25
     3e2:	19 f4       	brne	.+6      	; 0x3ea <__vector_71+0x9e>
		index++;
     3e4:	8c 81       	ldd	r24, Y+4	; 0x04
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	ac 01       	movw	r20, r24
     3f0:	40 5e       	subi	r20, 0xE0	; 224
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	84 0f       	add	r24, r20
     408:	95 1f       	adc	r25, r21
     40a:	fc 01       	movw	r30, r24
     40c:	84 81       	ldd	r24, Z+4	; 0x04
     40e:	95 81       	ldd	r25, Z+5	; 0x05
     410:	ac 01       	movw	r20, r24
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	f9 01       	movw	r30, r18
     41a:	19 95       	eicall
}
     41c:	00 00       	nop
     41e:	24 96       	adiw	r28, 0x04	; 4
     420:	cd bf       	out	0x3d, r28	; 61
     422:	de bf       	out	0x3e, r29	; 62
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     446:	0f 90       	pop	r0
     448:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     44c:	0f 90       	pop	r0
     44e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     452:	0f 90       	pop	r0
     454:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     458:	0f 90       	pop	r0
     45a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     474:	0f 92       	push	r0
     476:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     47a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     47e:	0f 92       	push	r0
     480:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     484:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     488:	0f 92       	push	r0
     48a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     48e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     492:	0f 92       	push	r0
     494:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	ef 93       	push	r30
     4ae:	ff 93       	push	r31
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <__vector_72+0x52>
     4b6:	1f 92       	push	r1
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     4bc:	20 91 21 21 	lds	r18, 0x2121	; 0x802121 <adca_callback>
     4c0:	30 91 22 21 	lds	r19, 0x2122	; 0x802122 <adca_callback+0x1>
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     4d0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	83 70       	andi	r24, 0x03	; 3
     4da:	99 27       	eor	r25, r25
     4dc:	89 2b       	or	r24, r25
     4de:	39 f4       	brne	.+14     	; 0x4ee <__vector_72+0x8a>
		index += 2;
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	8e 5f       	subi	r24, 0xFE	; 254
     4e4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	86 95       	lsr	r24
     4ea:	86 95       	lsr	r24
     4ec:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     4ee:	8b 81       	ldd	r24, Y+3	; 0x03
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	99 27       	eor	r25, r25
     4f8:	89 2b       	or	r24, r25
     4fa:	19 f4       	brne	.+6      	; 0x502 <__vector_72+0x9e>
		index++;
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	ac 01       	movw	r20, r24
     508:	40 5e       	subi	r20, 0xE0	; 224
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	84 0f       	add	r24, r20
     520:	95 1f       	adc	r25, r21
     522:	fc 01       	movw	r30, r24
     524:	84 81       	ldd	r24, Z+4	; 0x04
     526:	95 81       	ldd	r25, Z+5	; 0x05
     528:	ac 01       	movw	r20, r24
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	f9 01       	movw	r30, r18
     532:	19 95       	eicall
}
     534:	00 00       	nop
     536:	24 96       	adiw	r28, 0x04	; 4
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	7f 91       	pop	r23
     54e:	6f 91       	pop	r22
     550:	5f 91       	pop	r21
     552:	4f 91       	pop	r20
     554:	3f 91       	pop	r19
     556:	2f 91       	pop	r18
     558:	0f 90       	pop	r0
     55a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     55e:	0f 90       	pop	r0
     560:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     564:	0f 90       	pop	r0
     566:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     56a:	0f 90       	pop	r0
     56c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     570:	0f 90       	pop	r0
     572:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     58c:	0f 92       	push	r0
     58e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     592:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     596:	0f 92       	push	r0
     598:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     59c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     5a0:	0f 92       	push	r0
     5a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     5a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     5aa:	0f 92       	push	r0
     5ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <__vector_73+0x52>
     5ce:	1f 92       	push	r1
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5d4:	20 91 21 21 	lds	r18, 0x2121	; 0x802121 <adca_callback>
     5d8:	30 91 22 21 	lds	r19, 0x2122	; 0x802122 <adca_callback+0x1>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     5e8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	88 2f       	mov	r24, r24
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	83 70       	andi	r24, 0x03	; 3
     5f2:	99 27       	eor	r25, r25
     5f4:	89 2b       	or	r24, r25
     5f6:	39 f4       	brne	.+14     	; 0x606 <__vector_73+0x8a>
		index += 2;
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	8e 5f       	subi	r24, 0xFE	; 254
     5fc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	86 95       	lsr	r24
     602:	86 95       	lsr	r24
     604:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	88 2f       	mov	r24, r24
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	81 70       	andi	r24, 0x01	; 1
     60e:	99 27       	eor	r25, r25
     610:	89 2b       	or	r24, r25
     612:	19 f4       	brne	.+6      	; 0x61a <__vector_73+0x9e>
		index++;
     614:	8c 81       	ldd	r24, Y+4	; 0x04
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	ac 01       	movw	r20, r24
     620:	40 5e       	subi	r20, 0xE0	; 224
     622:	5f 4f       	sbci	r21, 0xFF	; 255
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	84 0f       	add	r24, r20
     638:	95 1f       	adc	r25, r21
     63a:	fc 01       	movw	r30, r24
     63c:	84 81       	ldd	r24, Z+4	; 0x04
     63e:	95 81       	ldd	r25, Z+5	; 0x05
     640:	ac 01       	movw	r20, r24
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	f9 01       	movw	r30, r18
     64a:	19 95       	eicall
}
     64c:	00 00       	nop
     64e:	24 96       	adiw	r28, 0x04	; 4
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     676:	0f 90       	pop	r0
     678:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     67c:	0f 90       	pop	r0
     67e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     682:	0f 90       	pop	r0
     684:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     688:	0f 90       	pop	r0
     68a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6a4:	0f 92       	push	r0
     6a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     6ae:	0f 92       	push	r0
     6b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     6b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6b8:	0f 92       	push	r0
     6ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6c2:	0f 92       	push	r0
     6c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	4f 93       	push	r20
     6ce:	5f 93       	push	r21
     6d0:	6f 93       	push	r22
     6d2:	7f 93       	push	r23
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27
     6dc:	ef 93       	push	r30
     6de:	ff 93       	push	r31
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <__vector_74+0x52>
     6e6:	1f 92       	push	r1
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     6ec:	20 91 21 21 	lds	r18, 0x2121	; 0x802121 <adca_callback>
     6f0:	30 91 22 21 	lds	r19, 0x2122	; 0x802122 <adca_callback+0x1>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	88 e0       	ldi	r24, 0x08	; 8
     6fe:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     700:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	88 2f       	mov	r24, r24
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	83 70       	andi	r24, 0x03	; 3
     70a:	99 27       	eor	r25, r25
     70c:	89 2b       	or	r24, r25
     70e:	39 f4       	brne	.+14     	; 0x71e <__vector_74+0x8a>
		index += 2;
     710:	8c 81       	ldd	r24, Y+4	; 0x04
     712:	8e 5f       	subi	r24, 0xFE	; 254
     714:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	86 95       	lsr	r24
     71a:	86 95       	lsr	r24
     71c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	88 2f       	mov	r24, r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	81 70       	andi	r24, 0x01	; 1
     726:	99 27       	eor	r25, r25
     728:	89 2b       	or	r24, r25
     72a:	19 f4       	brne	.+6      	; 0x732 <__vector_74+0x9e>
		index++;
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	ac 01       	movw	r20, r24
     738:	40 5e       	subi	r20, 0xE0	; 224
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	8c 81       	ldd	r24, Y+4	; 0x04
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	84 0f       	add	r24, r20
     750:	95 1f       	adc	r25, r21
     752:	fc 01       	movw	r30, r24
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	95 81       	ldd	r25, Z+5	; 0x05
     758:	ac 01       	movw	r20, r24
     75a:	68 e0       	ldi	r22, 0x08	; 8
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	f9 01       	movw	r30, r18
     762:	19 95       	eicall
}
     764:	00 00       	nop
     766:	24 96       	adiw	r28, 0x04	; 4
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     78e:	0f 90       	pop	r0
     790:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     794:	0f 90       	pop	r0
     796:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     79a:	0f 90       	pop	r0
     79c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7a0:	0f 90       	pop	r0
     7a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7bc:	0f 92       	push	r0
     7be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7c6:	0f 92       	push	r0
     7c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7d0:	0f 92       	push	r0
     7d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7da:	0f 92       	push	r0
     7dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <__vector_39+0x52>
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     804:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <adcb_callback>
     808:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <adcb_callback+0x1>
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     818:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	83 70       	andi	r24, 0x03	; 3
     822:	99 27       	eor	r25, r25
     824:	89 2b       	or	r24, r25
     826:	39 f4       	brne	.+14     	; 0x836 <__vector_39+0x8a>
		index += 2;
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	8e 5f       	subi	r24, 0xFE	; 254
     82c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	86 95       	lsr	r24
     832:	86 95       	lsr	r24
     834:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	88 2f       	mov	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	81 70       	andi	r24, 0x01	; 1
     83e:	99 27       	eor	r25, r25
     840:	89 2b       	or	r24, r25
     842:	19 f4       	brne	.+6      	; 0x84a <__vector_39+0x9e>
		index++;
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	ac 01       	movw	r20, r24
     850:	40 5e       	subi	r20, 0xE0	; 224
     852:	5f 4f       	sbci	r21, 0xFF	; 255
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	88 2f       	mov	r24, r24
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	84 0f       	add	r24, r20
     868:	95 1f       	adc	r25, r21
     86a:	fc 01       	movw	r30, r24
     86c:	84 81       	ldd	r24, Z+4	; 0x04
     86e:	95 81       	ldd	r25, Z+5	; 0x05
     870:	ac 01       	movw	r20, r24
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	80 e4       	ldi	r24, 0x40	; 64
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	f9 01       	movw	r30, r18
     87a:	19 95       	eicall
}
     87c:	00 00       	nop
     87e:	24 96       	adiw	r28, 0x04	; 4
     880:	cd bf       	out	0x3d, r28	; 61
     882:	de bf       	out	0x3e, r29	; 62
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	0f 90       	pop	r0
     8a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a6:	0f 90       	pop	r0
     8a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8ac:	0f 90       	pop	r0
     8ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8b2:	0f 90       	pop	r0
     8b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8b8:	0f 90       	pop	r0
     8ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8d4:	0f 92       	push	r0
     8d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8de:	0f 92       	push	r0
     8e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8e8:	0f 92       	push	r0
     8ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8f2:	0f 92       	push	r0
     8f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <__vector_40+0x52>
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     91c:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <adcb_callback>
     920:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <adcb_callback+0x1>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     930:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	83 70       	andi	r24, 0x03	; 3
     93a:	99 27       	eor	r25, r25
     93c:	89 2b       	or	r24, r25
     93e:	39 f4       	brne	.+14     	; 0x94e <__vector_40+0x8a>
		index += 2;
     940:	8c 81       	ldd	r24, Y+4	; 0x04
     942:	8e 5f       	subi	r24, 0xFE	; 254
     944:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	86 95       	lsr	r24
     94a:	86 95       	lsr	r24
     94c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	81 70       	andi	r24, 0x01	; 1
     956:	99 27       	eor	r25, r25
     958:	89 2b       	or	r24, r25
     95a:	19 f4       	brne	.+6      	; 0x962 <__vector_40+0x9e>
		index++;
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	ac 01       	movw	r20, r24
     968:	40 5e       	subi	r20, 0xE0	; 224
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
     96c:	8c 81       	ldd	r24, Y+4	; 0x04
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	84 0f       	add	r24, r20
     980:	95 1f       	adc	r25, r21
     982:	fc 01       	movw	r30, r24
     984:	84 81       	ldd	r24, Z+4	; 0x04
     986:	95 81       	ldd	r25, Z+5	; 0x05
     988:	ac 01       	movw	r20, r24
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	80 e4       	ldi	r24, 0x40	; 64
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	f9 01       	movw	r30, r18
     992:	19 95       	eicall
}
     994:	00 00       	nop
     996:	24 96       	adiw	r28, 0x04	; 4
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9be:	0f 90       	pop	r0
     9c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9c4:	0f 90       	pop	r0
     9c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9ca:	0f 90       	pop	r0
     9cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9d0:	0f 90       	pop	r0
     9d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9ec:	0f 92       	push	r0
     9ee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9f2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9f6:	0f 92       	push	r0
     9f8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9fc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a00:	0f 92       	push	r0
     a02:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a06:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a0a:	0f 92       	push	r0
     a0c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <__vector_41+0x52>
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a34:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <adcb_callback>
     a38:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <adcb_callback+0x1>
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     a48:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	88 2f       	mov	r24, r24
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	83 70       	andi	r24, 0x03	; 3
     a52:	99 27       	eor	r25, r25
     a54:	89 2b       	or	r24, r25
     a56:	39 f4       	brne	.+14     	; 0xa66 <__vector_41+0x8a>
		index += 2;
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	8e 5f       	subi	r24, 0xFE	; 254
     a5c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	86 95       	lsr	r24
     a62:	86 95       	lsr	r24
     a64:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	81 70       	andi	r24, 0x01	; 1
     a6e:	99 27       	eor	r25, r25
     a70:	89 2b       	or	r24, r25
     a72:	19 f4       	brne	.+6      	; 0xa7a <__vector_41+0x9e>
		index++;
     a74:	8c 81       	ldd	r24, Y+4	; 0x04
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	ac 01       	movw	r20, r24
     a80:	40 5e       	subi	r20, 0xE0	; 224
     a82:	5f 4f       	sbci	r21, 0xFF	; 255
     a84:	8c 81       	ldd	r24, Y+4	; 0x04
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	84 0f       	add	r24, r20
     a98:	95 1f       	adc	r25, r21
     a9a:	fc 01       	movw	r30, r24
     a9c:	84 81       	ldd	r24, Z+4	; 0x04
     a9e:	95 81       	ldd	r25, Z+5	; 0x05
     aa0:	ac 01       	movw	r20, r24
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	80 e4       	ldi	r24, 0x40	; 64
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	f9 01       	movw	r30, r18
     aaa:	19 95       	eicall
}
     aac:	00 00       	nop
     aae:	24 96       	adiw	r28, 0x04	; 4
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad6:	0f 90       	pop	r0
     ad8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     adc:	0f 90       	pop	r0
     ade:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ae2:	0f 90       	pop	r0
     ae4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ae8:	0f 90       	pop	r0
     aea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b04:	0f 92       	push	r0
     b06:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b0a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b0e:	0f 92       	push	r0
     b10:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b14:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b18:	0f 92       	push	r0
     b1a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b1e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b22:	0f 92       	push	r0
     b24:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <__vector_42+0x52>
     b46:	1f 92       	push	r1
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b4c:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <adcb_callback>
     b50:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <adcb_callback+0x1>
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     b60:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 2f       	mov	r24, r24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	83 70       	andi	r24, 0x03	; 3
     b6a:	99 27       	eor	r25, r25
     b6c:	89 2b       	or	r24, r25
     b6e:	39 f4       	brne	.+14     	; 0xb7e <__vector_42+0x8a>
		index += 2;
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	8e 5f       	subi	r24, 0xFE	; 254
     b74:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	86 95       	lsr	r24
     b7a:	86 95       	lsr	r24
     b7c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	81 70       	andi	r24, 0x01	; 1
     b86:	99 27       	eor	r25, r25
     b88:	89 2b       	or	r24, r25
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__vector_42+0x9e>
		index++;
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	ac 01       	movw	r20, r24
     b98:	40 5e       	subi	r20, 0xE0	; 224
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	84 0f       	add	r24, r20
     bb0:	95 1f       	adc	r25, r21
     bb2:	fc 01       	movw	r30, r24
     bb4:	84 81       	ldd	r24, Z+4	; 0x04
     bb6:	95 81       	ldd	r25, Z+5	; 0x05
     bb8:	ac 01       	movw	r20, r24
     bba:	68 e0       	ldi	r22, 0x08	; 8
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	f9 01       	movw	r30, r18
     bc2:	19 95       	eicall
}
     bc4:	00 00       	nop
     bc6:	24 96       	adiw	r28, 0x04	; 4
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bee:	0f 90       	pop	r0
     bf0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bf4:	0f 90       	pop	r0
     bf6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bfa:	0f 90       	pop	r0
     bfc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c00:	0f 90       	pop	r0
     c02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_119>:
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
	if(DEBUG) printf("%s \n",(const)data);
}

ISR(READ_INTURUPT)
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c1c:	0f 92       	push	r0
     c1e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c26:	0f 92       	push	r0
     c28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c30:	0f 92       	push	r0
     c32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
     c46:	80 ea       	ldi	r24, 0xA0	; 160
     c48:	9b e0       	ldi	r25, 0x0B	; 11
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <XbeeRx>
     c52:	00 00       	nop
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	0f 90       	pop	r0
     c62:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c66:	0f 90       	pop	r0
     c68:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c6c:	0f 90       	pop	r0
     c6e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c72:	0f 90       	pop	r0
     c74:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <usart_set_rx_interrupt_level>:
		printf("GPS Initialized");
}
void gps_write(char * data,size_t length)
{
	usart_serial_write_packet(gps_uart.Usart,data,length);
}
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	00 d0       	rcall	.+0      	; 0xc84 <usart_set_rx_interrupt_level+0x6>
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	6b 83       	std	Y+3, r22	; 0x03
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	83 81       	ldd	r24, Z+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	2f 7c       	andi	r18, 0xCF	; 207
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	82 95       	swap	r24
     ca2:	92 95       	swap	r25
     ca4:	90 7f       	andi	r25, 0xF0	; 240
     ca6:	98 27       	eor	r25, r24
     ca8:	80 7f       	andi	r24, 0xF0	; 240
     caa:	98 27       	eor	r25, r24
     cac:	82 2b       	or	r24, r18
     cae:	28 2f       	mov	r18, r24
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	fc 01       	movw	r30, r24
     cb6:	23 83       	std	Z+3, r18	; 0x03
     cb8:	00 00       	nop
     cba:	23 96       	adiw	r28, 0x03	; 3
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <gps_init>:
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	80 e8       	ldi	r24, 0x80	; 128
     cd0:	95 e2       	ldi	r25, 0x25	; 37
     cd2:	a0 e0       	ldi	r26, 0x00	; 0
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <__data_end+0x6>
     cda:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <__data_end+0x7>
     cde:	a0 93 c2 20 	sts	0x20C2, r26	; 0x8020c2 <__data_end+0x8>
     ce2:	b0 93 c3 20 	sts	0x20C3, r27	; 0x8020c3 <__data_end+0x9>
     ce6:	80 ea       	ldi	r24, 0xA0	; 160
     ce8:	96 e0       	ldi	r25, 0x06	; 6
     cea:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <__data_end>
     cee:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <__data_end+0x1>
     cf2:	80 eb       	ldi	r24, 0xB0	; 176
     cf4:	9b e0       	ldi	r25, 0x0B	; 11
     cf6:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <__data_end+0x2>
     cfa:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <__data_end+0x3>
     cfe:	80 e8       	ldi	r24, 0x80	; 128
     d00:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <__data_end+0x5>
     d04:	80 e4       	ldi	r24, 0x40	; 64
     d06:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <__data_end+0x4>
     d0a:	8a eb       	ldi	r24, 0xBA	; 186
     d0c:	90 e2       	ldi	r25, 0x20	; 32
     d0e:	0e 94 49 21 	call	0x4292	; 0x4292 <uart_init>
     d12:	80 eb       	ldi	r24, 0xB0	; 176
     d14:	9b e0       	ldi	r25, 0x0B	; 11
     d16:	24 e1       	ldi	r18, 0x14	; 20
     d18:	fc 01       	movw	r30, r24
     d1a:	23 83       	std	Z+3, r18	; 0x03
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	80 eb       	ldi	r24, 0xB0	; 176
     d20:	9b e0       	ldi	r25, 0x0B	; 11
     d22:	ad df       	rcall	.-166    	; 0xc7e <usart_set_rx_interrupt_level>
     d24:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <is_gps_rx_triggered>
     d28:	84 e1       	ldi	r24, 0x14	; 20
     d2a:	90 e2       	ldi	r25, 0x20	; 32
     d2c:	89 2f       	mov	r24, r25
     d2e:	8f 93       	push	r24
     d30:	84 e1       	ldi	r24, 0x14	; 20
     d32:	90 e2       	ldi	r25, 0x20	; 32
     d34:	8f 93       	push	r24
     d36:	0e 94 84 2b 	call	0x5708	; 0x5708 <printf>
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	00 00       	nop
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <__vector_122>:
ISR(GPS_RX_INTERUPT)
{
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d56:	0f 92       	push	r0
     d58:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d5c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d60:	0f 92       	push	r0
     d62:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d66:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d6a:	0f 92       	push	r0
     d6c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d70:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d74:	0f 92       	push	r0
     d76:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	rxdata=GPS_UART.DATA;
     d9a:	80 eb       	ldi	r24, 0xB0	; 176
     d9c:	9b e0       	ldi	r25, 0x0B	; 11
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	80 93 74 21 	sts	0x2174, r24	; 0x802174 <rxdata>
	printf("\nthe data is: %c",rxdata);
     da6:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <rxdata>
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	29 2f       	mov	r18, r25
     db0:	2f 93       	push	r18
     db2:	8f 93       	push	r24
     db4:	84 e2       	ldi	r24, 0x24	; 36
     db6:	90 e2       	ldi	r25, 0x20	; 32
     db8:	89 2f       	mov	r24, r25
     dba:	8f 93       	push	r24
     dbc:	84 e2       	ldi	r24, 0x24	; 36
     dbe:	90 e2       	ldi	r25, 0x20	; 32
     dc0:	8f 93       	push	r24
     dc2:	0e 94 84 2b 	call	0x5708	; 0x5708 <printf>
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
	is_gps_rx_triggered=1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <is_gps_rx_triggered>
}
     dd4:	00 00       	nop
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     df8:	0f 90       	pop	r0
     dfa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dfe:	0f 90       	pop	r0
     e00:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e04:	0f 90       	pop	r0
     e06:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e0a:	0f 90       	pop	r0
     e0c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     e20:	8f e3       	ldi	r24, 0x3F	; 63
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	fc 01       	movw	r30, r24
     e26:	80 81       	ld	r24, Z
     e28:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e2a:	f8 94       	cli
	return flags;
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	1f 92       	push	r1
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     e42:	8f e3       	ldi	r24, 0x3F	; 63
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	29 81       	ldd	r18, Y+1	; 0x01
     e48:	fc 01       	movw	r30, r24
     e4a:	20 83       	st	Z, r18
}
     e4c:	00 00       	nop
     e4e:	0f 90       	pop	r0
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	1f 92       	push	r1
     e5c:	1f 92       	push	r1
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     e64:	d8 df       	rcall	.-80     	; 0xe16 <cpu_irq_save>
     e66:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     e68:	80 e5       	ldi	r24, 0x50	; 80
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	20 e5       	ldi	r18, 0x50	; 80
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	f9 01       	movw	r30, r18
     e72:	30 81       	ld	r19, Z
     e74:	2a 81       	ldd	r18, Y+2	; 0x02
     e76:	23 2b       	or	r18, r19
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	db df       	rcall	.-74     	; 0xe36 <cpu_irq_restore>
}
     e80:	00 00       	nop
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	1f 92       	push	r1
     e92:	1f 92       	push	r1
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     e9a:	80 e5       	ldi	r24, 0x50	; 80
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	22 e0       	ldi	r18, 0x02	; 2
     ea0:	fc 01       	movw	r30, r24
     ea2:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
     ea4:	b8 df       	rcall	.-144    	; 0xe16 <cpu_irq_save>
     ea6:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     ea8:	80 e5       	ldi	r24, 0x50	; 80
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	20 e5       	ldi	r18, 0x50	; 80
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	f9 01       	movw	r30, r18
     eb2:	30 81       	ld	r19, Z
     eb4:	2a 81       	ldd	r18, Y+2	; 0x02
     eb6:	23 2b       	or	r18, r19
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	bb df       	rcall	.-138    	; 0xe36 <cpu_irq_restore>
}
     ec0:	00 00       	nop
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	1f 92       	push	r1
     ed2:	1f 92       	push	r1
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     eda:	9d df       	rcall	.-198    	; 0xe16 <cpu_irq_save>
     edc:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
     ede:	80 e5       	ldi	r24, 0x50	; 80
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	20 e5       	ldi	r18, 0x50	; 80
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	32 2f       	mov	r19, r18
     eec:	2a 81       	ldd	r18, Y+2	; 0x02
     eee:	20 95       	com	r18
     ef0:	23 23       	and	r18, r19
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9e df       	rcall	.-196    	; 0xe36 <cpu_irq_restore>
}
     efa:	00 00       	nop
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	1f 92       	push	r1
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	19 f0       	breq	.+6      	; 0xf1e <osc_enable+0x18>
		osc_enable_internal(id);
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9d df       	rcall	.-198    	; 0xe56 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	b5 df       	rcall	.-150    	; 0xe8c <osc_enable_external>
	}
}
     f22:	00 00       	nop
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	1f 92       	push	r1
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f38:	80 e5       	ldi	r24, 0x50	; 80
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	98 23       	and	r25, r24
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	99 23       	and	r25, r25
     f48:	09 f4       	brne	.+2      	; 0xf4c <osc_is_ready+0x20>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
}
     f4c:	0f 90       	pop	r0
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	1f 92       	push	r1
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
     f60:	00 00       	nop
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	e3 df       	rcall	.-58     	; 0xf2c <osc_is_ready>
     f66:	98 2f       	mov	r25, r24
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	89 27       	eor	r24, r25
     f6c:	88 23       	and	r24, r24
     f6e:	c9 f7       	brne	.-14     	; 0xf62 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
     f70:	00 00       	nop
     f72:	0f 90       	pop	r0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	1f 92       	push	r1
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	8a 30       	cpi	r24, 0x0A	; 10
     f8e:	91 05       	cpc	r25, r1
     f90:	a1 f0       	breq	.+40     	; 0xfba <sysclk_rtcsrc_enable+0x40>
     f92:	8b 30       	cpi	r24, 0x0B	; 11
     f94:	91 05       	cpc	r25, r1
     f96:	34 f4       	brge	.+12     	; 0xfa4 <sysclk_rtcsrc_enable+0x2a>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	91 05       	cpc	r25, r1
     f9c:	71 f0       	breq	.+28     	; 0xfba <sysclk_rtcsrc_enable+0x40>
     f9e:	04 97       	sbiw	r24, 0x04	; 4
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <sysclk_rtcsrc_enable+0x36>
     fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <sysclk_rtcsrc_enable+0x4a>
     fa4:	8c 30       	cpi	r24, 0x0C	; 12
     fa6:	91 05       	cpc	r25, r1
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <sysclk_rtcsrc_enable+0x36>
     faa:	0e 97       	sbiw	r24, 0x0e	; 14
     fac:	31 f0       	breq	.+12     	; 0xfba <sysclk_rtcsrc_enable+0x40>
     fae:	0a c0       	rjmp	.+20     	; 0xfc4 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	a9 df       	rcall	.-174    	; 0xf06 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	ce df       	rcall	.-100    	; 0xf54 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <sysclk_rtcsrc_enable+0x4a>
     fba:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
     fbc:	a4 df       	rcall	.-184    	; 0xf06 <osc_enable>
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	c9 df       	rcall	.-110    	; 0xf54 <osc_wait_ready>
		break;
     fc2:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     fc4:	80 e4       	ldi	r24, 0x40	; 64
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	29 81       	ldd	r18, Y+1	; 0x01
     fca:	21 60       	ori	r18, 0x01	; 1
     fcc:	fc 01       	movw	r30, r24
     fce:	23 83       	std	Z+3, r18	; 0x03
}
     fd0:	00 00       	nop
     fd2:	0f 90       	pop	r0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <sysclk_init+0x6>
     fe0:	1f 92       	push	r1
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     fe6:	80 e7       	ldi	r24, 0x70	; 112
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
     fee:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     ff0:	1b 82       	std	Y+3, r1	; 0x03
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <sysclk_init+0x34>
		*(reg++) = 0xff;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	9c 01       	movw	r18, r24
     ffa:	2f 5f       	subi	r18, 0xFF	; 255
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	29 83       	std	Y+1, r18	; 0x01
    1000:	3a 83       	std	Y+2, r19	; 0x02
    1002:	2f ef       	ldi	r18, 0xFF	; 255
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	8b 83       	std	Y+3, r24	; 0x03
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	87 30       	cpi	r24, 0x07	; 7
    1012:	80 f3       	brcs	.-32     	; 0xff4 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	77 df       	rcall	.-274    	; 0xf06 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	9c df       	rcall	.-200    	; 0xf54 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    101c:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	80 e4       	ldi	r24, 0x40	; 64
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	70 d0       	rcall	.+224    	; 0x1106 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    102a:	11 f4       	brne	.+4      	; 0x1030 <sysclk_init+0x56>
    102c:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    102e:	4e df       	rcall	.-356    	; 0xecc <osc_disable>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	a3 df       	rcall	.-186    	; 0xf7a <sysclk_rtcsrc_enable>
#endif
}
    1034:	24 96       	adiw	r28, 0x04	; 4
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	00 d0       	rcall	.+0      	; 0x1046 <sysclk_enable_module+0x6>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	8a 83       	std	Y+2, r24	; 0x02
    104c:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    104e:	e3 de       	rcall	.-570    	; 0xe16 <cpu_irq_save>
    1050:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 59       	subi	r24, 0x90	; 144
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	2a 81       	ldd	r18, Y+2	; 0x02
    105e:	22 2f       	mov	r18, r18
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	20 59       	subi	r18, 0x90	; 144
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	f9 01       	movw	r30, r18
    1068:	20 81       	ld	r18, Z
    106a:	32 2f       	mov	r19, r18
    106c:	2b 81       	ldd	r18, Y+3	; 0x03
    106e:	20 95       	com	r18
    1070:	23 23       	and	r18, r19
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	de de       	rcall	.-580    	; 0xe36 <cpu_irq_restore>
}
    107a:	00 00       	nop
    107c:	23 96       	adiw	r28, 0x03	; 3
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	00 d0       	rcall	.+0      	; 0x108e <_read+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	8a 83       	std	Y+2, r24	; 0x02
    1094:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    1096:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <ptr_get>
    109a:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <ptr_get+0x1>
    109e:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <stdio_base>
    10a2:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <stdio_base+0x1>
    10a6:	ae 01       	movw	r20, r28
    10a8:	4f 5f       	subi	r20, 0xFF	; 255
    10aa:	5f 4f       	sbci	r21, 0xFF	; 255
    10ac:	ba 01       	movw	r22, r20
    10ae:	f9 01       	movw	r30, r18
    10b0:	19 95       	eicall
	return c;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	08 2e       	mov	r0, r24
    10b6:	00 0c       	add	r0, r0
    10b8:	99 0b       	sbc	r25, r25
}
    10ba:	23 96       	adiw	r28, 0x03	; 3
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <_write+0x6>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	6a 83       	std	Y+2, r22	; 0x02
    10d4:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    10d6:	20 91 bd 21 	lds	r18, 0x21BD	; 0x8021bd <ptr_put>
    10da:	30 91 be 21 	lds	r19, 0x21BE	; 0x8021be <ptr_put+0x1>
    10de:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <stdio_base>
    10e2:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <stdio_base+0x1>
    10e6:	69 81       	ldd	r22, Y+1	; 0x01
    10e8:	f9 01       	movw	r30, r18
    10ea:	19 95       	eicall
    10ec:	99 23       	and	r25, r25
    10ee:	1c f4       	brge	.+6      	; 0x10f6 <_write+0x30>
		return -1;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <_write+0x34>
	}
	return 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
}
    10fa:	23 96       	adiw	r28, 0x03	; 3
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1106:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1108:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    110a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    110c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    110e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1110:	08 95       	ret

00001112 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1122:	0f 92       	push	r0
    1124:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1128:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    112c:	0f 92       	push	r0
    112e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    113e:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <rtc_data>
    1142:	90 91 c2 21 	lds	r25, 0x21C2	; 0x8021c2 <rtc_data+0x1>
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <rtc_data>
    114c:	90 93 c2 21 	sts	0x21C2, r25	; 0x8021c2 <rtc_data+0x1>
}
    1150:	00 00       	nop
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	0f 90       	pop	r0
    115c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1160:	0f 90       	pop	r0
    1162:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1166:	0f 90       	pop	r0
    1168:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1182:	0f 92       	push	r0
    1184:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1188:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    118c:	0f 92       	push	r0
    118e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1192:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1196:	0f 92       	push	r0
    1198:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    119c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11a0:	0f 92       	push	r0
    11a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	28 97       	sbiw	r28, 0x08	; 8
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    11cc:	20 91 c1 21 	lds	r18, 0x21C1	; 0x8021c1 <rtc_data>
    11d0:	30 91 c2 21 	lds	r19, 0x21C2	; 0x8021c2 <rtc_data+0x1>
    11d4:	80 91 c3 21 	lds	r24, 0x21C3	; 0x8021c3 <rtc_data+0x2>
    11d8:	90 91 c4 21 	lds	r25, 0x21C4	; 0x8021c4 <rtc_data+0x3>
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <__vector_11+0x72>
    11e2:	63 c0       	rjmp	.+198    	; 0x12aa <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    11ee:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <rtc_data+0x6>
    11f2:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <rtc_data+0x7>
    11f6:	89 2b       	or	r24, r25
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__vector_11+0x8a>
    11fa:	57 c0       	rjmp	.+174    	; 0x12aa <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    11fc:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <rtc_data>
    1200:	90 91 c2 21 	lds	r25, 0x21C2	; 0x8021c2 <rtc_data+0x1>
    1204:	cc 01       	movw	r24, r24
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ac 01       	movw	r20, r24
    120c:	33 27       	eor	r19, r19
    120e:	22 27       	eor	r18, r18
					| RTC.CNT;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	94 e0       	ldi	r25, 0x04	; 4
    1214:	fc 01       	movw	r30, r24
    1216:	80 85       	ldd	r24, Z+8	; 0x08
    1218:	91 85       	ldd	r25, Z+9	; 0x09
    121a:	cc 01       	movw	r24, r24
    121c:	a0 e0       	ldi	r26, 0x00	; 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    1220:	82 2b       	or	r24, r18
    1222:	93 2b       	or	r25, r19
    1224:	a4 2b       	or	r26, r20
    1226:	b5 2b       	or	r27, r21
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	ab 83       	std	Y+3, r26	; 0x03
    122e:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    1230:	80 91 c3 21 	lds	r24, 0x21C3	; 0x8021c3 <rtc_data+0x2>
    1234:	90 91 c4 21 	lds	r25, 0x21C4	; 0x8021c4 <rtc_data+0x3>
    1238:	cc 01       	movw	r24, r24
    123a:	a0 e0       	ldi	r26, 0x00	; 0
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ac 01       	movw	r20, r24
    1240:	33 27       	eor	r19, r19
    1242:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    1244:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <rtc_data+0x4>
    1248:	90 91 c6 21 	lds	r25, 0x21C6	; 0x8021c6 <rtc_data+0x5>
    124c:	cc 01       	movw	r24, r24
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    1252:	82 2b       	or	r24, r18
    1254:	93 2b       	or	r25, r19
    1256:	a4 2b       	or	r26, r20
    1258:	b5 2b       	or	r27, r21
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	af 83       	std	Y+7, r26	; 0x07
    1260:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	4f 81       	ldd	r20, Y+7	; 0x07
    1268:	58 85       	ldd	r21, Y+8	; 0x08
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	ab 81       	ldd	r26, Y+3	; 0x03
    1270:	bc 81       	ldd	r27, Y+4	; 0x04
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	4a 07       	cpc	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	58 f0       	brcs	.+22     	; 0x1292 <__vector_11+0x120>
				count = alarm + 1;
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	af 81       	ldd	r26, Y+7	; 0x07
    1282:	b8 85       	ldd	r27, Y+8	; 0x08
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	a1 1d       	adc	r26, r1
    1288:	b1 1d       	adc	r27, r1
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	ab 83       	std	Y+3, r26	; 0x03
    1290:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    1292:	20 91 c7 21 	lds	r18, 0x21C7	; 0x8021c7 <rtc_data+0x6>
    1296:	30 91 c8 21 	lds	r19, 0x21C8	; 0x8021c8 <rtc_data+0x7>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	ab 81       	ldd	r26, Y+3	; 0x03
    12a0:	bc 81       	ldd	r27, Y+4	; 0x04
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	f9 01       	movw	r30, r18
    12a8:	19 95       	eicall
		}
	}
}
    12aa:	00 00       	nop
    12ac:	28 96       	adiw	r28, 0x08	; 8
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12d4:	0f 90       	pop	r0
    12d6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12da:	0f 90       	pop	r0
    12dc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12e0:	0f 90       	pop	r0
    12e2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12e6:	0f 90       	pop	r0
    12e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1302:	0f 92       	push	r0
    1304:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1308:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    130c:	0f 92       	push	r0
    130e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1312:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1316:	0f 92       	push	r0
    1318:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    131c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1320:	0f 92       	push	r0
    1322:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    1346:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcc0_ovf_callback>
    134a:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcc0_ovf_callback+0x1>
    134e:	89 2b       	or	r24, r25
    1350:	31 f0       	breq	.+12     	; 0x135e <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    1352:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcc0_ovf_callback>
    1356:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcc0_ovf_callback+0x1>
    135a:	fc 01       	movw	r30, r24
    135c:	19 95       	eicall
	}
}
    135e:	00 00       	nop
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1382:	0f 90       	pop	r0
    1384:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1388:	0f 90       	pop	r0
    138a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    138e:	0f 90       	pop	r0
    1390:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1394:	0f 90       	pop	r0
    1396:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13a8:	0f 92       	push	r0
    13aa:	11 24       	eor	r1, r1
    13ac:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13b0:	0f 92       	push	r0
    13b2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13b6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13ba:	0f 92       	push	r0
    13bc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13c0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13c4:	0f 92       	push	r0
    13c6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ca:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13ce:	0f 92       	push	r0
    13d0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    13f4:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcc0_err_callback>
    13f8:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcc0_err_callback+0x1>
    13fc:	89 2b       	or	r24, r25
    13fe:	31 f0       	breq	.+12     	; 0x140c <__vector_15+0x6c>
		tc_tcc0_err_callback();
    1400:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcc0_err_callback>
    1404:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcc0_err_callback+0x1>
    1408:	fc 01       	movw	r30, r24
    140a:	19 95       	eicall
	}
}
    140c:	00 00       	nop
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1430:	0f 90       	pop	r0
    1432:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1436:	0f 90       	pop	r0
    1438:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    143c:	0f 90       	pop	r0
    143e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1442:	0f 90       	pop	r0
    1444:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    144e:	1f 92       	push	r1
    1450:	0f 92       	push	r0
    1452:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    145e:	0f 92       	push	r0
    1460:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1464:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1468:	0f 92       	push	r0
    146a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    146e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1472:	0f 92       	push	r0
    1474:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1478:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    147c:	0f 92       	push	r0
    147e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    14a2:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcc0_cca_callback>
    14a6:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcc0_cca_callback+0x1>
    14aa:	89 2b       	or	r24, r25
    14ac:	31 f0       	breq	.+12     	; 0x14ba <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    14ae:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcc0_cca_callback>
    14b2:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcc0_cca_callback+0x1>
    14b6:	fc 01       	movw	r30, r24
    14b8:	19 95       	eicall
	}
}
    14ba:	00 00       	nop
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	bf 91       	pop	r27
    14c6:	af 91       	pop	r26
    14c8:	9f 91       	pop	r25
    14ca:	8f 91       	pop	r24
    14cc:	7f 91       	pop	r23
    14ce:	6f 91       	pop	r22
    14d0:	5f 91       	pop	r21
    14d2:	4f 91       	pop	r20
    14d4:	3f 91       	pop	r19
    14d6:	2f 91       	pop	r18
    14d8:	0f 90       	pop	r0
    14da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14de:	0f 90       	pop	r0
    14e0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14e4:	0f 90       	pop	r0
    14e6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    14ea:	0f 90       	pop	r0
    14ec:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    14f0:	0f 90       	pop	r0
    14f2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    150c:	0f 92       	push	r0
    150e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1512:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1516:	0f 92       	push	r0
    1518:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    151c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1520:	0f 92       	push	r0
    1522:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1526:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    152a:	0f 92       	push	r0
    152c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    1550:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tcc0_ccb_callback>
    1554:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tcc0_ccb_callback+0x1>
    1558:	89 2b       	or	r24, r25
    155a:	31 f0       	breq	.+12     	; 0x1568 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    155c:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tcc0_ccb_callback>
    1560:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tcc0_ccb_callback+0x1>
    1564:	fc 01       	movw	r30, r24
    1566:	19 95       	eicall
	}
}
    1568:	00 00       	nop
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	bf 91       	pop	r27
    1574:	af 91       	pop	r26
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	7f 91       	pop	r23
    157c:	6f 91       	pop	r22
    157e:	5f 91       	pop	r21
    1580:	4f 91       	pop	r20
    1582:	3f 91       	pop	r19
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    158c:	0f 90       	pop	r0
    158e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1592:	0f 90       	pop	r0
    1594:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1598:	0f 90       	pop	r0
    159a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    159e:	0f 90       	pop	r0
    15a0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15ba:	0f 92       	push	r0
    15bc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15c0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15c4:	0f 92       	push	r0
    15c6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15ca:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15ce:	0f 92       	push	r0
    15d0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15d4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15d8:	0f 92       	push	r0
    15da:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15de:	2f 93       	push	r18
    15e0:	3f 93       	push	r19
    15e2:	4f 93       	push	r20
    15e4:	5f 93       	push	r21
    15e6:	6f 93       	push	r22
    15e8:	7f 93       	push	r23
    15ea:	8f 93       	push	r24
    15ec:	9f 93       	push	r25
    15ee:	af 93       	push	r26
    15f0:	bf 93       	push	r27
    15f2:	ef 93       	push	r30
    15f4:	ff 93       	push	r31
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    15fe:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tcc0_ccc_callback>
    1602:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tcc0_ccc_callback+0x1>
    1606:	89 2b       	or	r24, r25
    1608:	31 f0       	breq	.+12     	; 0x1616 <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    160a:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tcc0_ccc_callback>
    160e:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tcc0_ccc_callback+0x1>
    1612:	fc 01       	movw	r30, r24
    1614:	19 95       	eicall
	}
}
    1616:	00 00       	nop
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    163a:	0f 90       	pop	r0
    163c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1640:	0f 90       	pop	r0
    1642:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1646:	0f 90       	pop	r0
    1648:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    164c:	0f 90       	pop	r0
    164e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1668:	0f 92       	push	r0
    166a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    166e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1672:	0f 92       	push	r0
    1674:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1678:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    167c:	0f 92       	push	r0
    167e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1682:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1686:	0f 92       	push	r0
    1688:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    16ac:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tcc0_ccd_callback>
    16b0:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tcc0_ccd_callback+0x1>
    16b4:	89 2b       	or	r24, r25
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    16b8:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tcc0_ccd_callback>
    16bc:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tcc0_ccd_callback+0x1>
    16c0:	fc 01       	movw	r30, r24
    16c2:	19 95       	eicall
	}
}
    16c4:	00 00       	nop
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	ff 91       	pop	r31
    16cc:	ef 91       	pop	r30
    16ce:	bf 91       	pop	r27
    16d0:	af 91       	pop	r26
    16d2:	9f 91       	pop	r25
    16d4:	8f 91       	pop	r24
    16d6:	7f 91       	pop	r23
    16d8:	6f 91       	pop	r22
    16da:	5f 91       	pop	r21
    16dc:	4f 91       	pop	r20
    16de:	3f 91       	pop	r19
    16e0:	2f 91       	pop	r18
    16e2:	0f 90       	pop	r0
    16e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16e8:	0f 90       	pop	r0
    16ea:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16ee:	0f 90       	pop	r0
    16f0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    16f4:	0f 90       	pop	r0
    16f6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    16fa:	0f 90       	pop	r0
    16fc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1716:	0f 92       	push	r0
    1718:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    171c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1720:	0f 92       	push	r0
    1722:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1726:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    172a:	0f 92       	push	r0
    172c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1730:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1734:	0f 92       	push	r0
    1736:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    175a:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tcc1_ovf_callback>
    175e:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tcc1_ovf_callback+0x1>
    1762:	89 2b       	or	r24, r25
    1764:	31 f0       	breq	.+12     	; 0x1772 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    1766:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tcc1_ovf_callback>
    176a:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tcc1_ovf_callback+0x1>
    176e:	fc 01       	movw	r30, r24
    1770:	19 95       	eicall
	}
}
    1772:	00 00       	nop
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1796:	0f 90       	pop	r0
    1798:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    179c:	0f 90       	pop	r0
    179e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17a2:	0f 90       	pop	r0
    17a4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17a8:	0f 90       	pop	r0
    17aa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17bc:	0f 92       	push	r0
    17be:	11 24       	eor	r1, r1
    17c0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17c4:	0f 92       	push	r0
    17c6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17ca:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17ce:	0f 92       	push	r0
    17d0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17d4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17d8:	0f 92       	push	r0
    17da:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17de:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    17e2:	0f 92       	push	r0
    17e4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    1808:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tcc1_err_callback>
    180c:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tcc1_err_callback+0x1>
    1810:	89 2b       	or	r24, r25
    1812:	31 f0       	breq	.+12     	; 0x1820 <__vector_21+0x6c>
		tc_tcc1_err_callback();
    1814:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tcc1_err_callback>
    1818:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tcc1_err_callback+0x1>
    181c:	fc 01       	movw	r30, r24
    181e:	19 95       	eicall
	}
}
    1820:	00 00       	nop
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1844:	0f 90       	pop	r0
    1846:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    184a:	0f 90       	pop	r0
    184c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1850:	0f 90       	pop	r0
    1852:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1856:	0f 90       	pop	r0
    1858:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    185c:	0f 90       	pop	r0
    185e:	1f 90       	pop	r1
    1860:	18 95       	reti

00001862 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1862:	1f 92       	push	r1
    1864:	0f 92       	push	r0
    1866:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1872:	0f 92       	push	r0
    1874:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1878:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    187c:	0f 92       	push	r0
    187e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1882:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1886:	0f 92       	push	r0
    1888:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    188c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1890:	0f 92       	push	r0
    1892:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1896:	2f 93       	push	r18
    1898:	3f 93       	push	r19
    189a:	4f 93       	push	r20
    189c:	5f 93       	push	r21
    189e:	6f 93       	push	r22
    18a0:	7f 93       	push	r23
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	ef 93       	push	r30
    18ac:	ff 93       	push	r31
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    18b6:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <tc_tcc1_cca_callback>
    18ba:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <tc_tcc1_cca_callback+0x1>
    18be:	89 2b       	or	r24, r25
    18c0:	31 f0       	breq	.+12     	; 0x18ce <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    18c2:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <tc_tcc1_cca_callback>
    18c6:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <tc_tcc1_cca_callback+0x1>
    18ca:	fc 01       	movw	r30, r24
    18cc:	19 95       	eicall
	}
}
    18ce:	00 00       	nop
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	ff 91       	pop	r31
    18d6:	ef 91       	pop	r30
    18d8:	bf 91       	pop	r27
    18da:	af 91       	pop	r26
    18dc:	9f 91       	pop	r25
    18de:	8f 91       	pop	r24
    18e0:	7f 91       	pop	r23
    18e2:	6f 91       	pop	r22
    18e4:	5f 91       	pop	r21
    18e6:	4f 91       	pop	r20
    18e8:	3f 91       	pop	r19
    18ea:	2f 91       	pop	r18
    18ec:	0f 90       	pop	r0
    18ee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18f2:	0f 90       	pop	r0
    18f4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18f8:	0f 90       	pop	r0
    18fa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18fe:	0f 90       	pop	r0
    1900:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1904:	0f 90       	pop	r0
    1906:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1920:	0f 92       	push	r0
    1922:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1926:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    192a:	0f 92       	push	r0
    192c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1930:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1934:	0f 92       	push	r0
    1936:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    193a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    193e:	0f 92       	push	r0
    1940:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1944:	2f 93       	push	r18
    1946:	3f 93       	push	r19
    1948:	4f 93       	push	r20
    194a:	5f 93       	push	r21
    194c:	6f 93       	push	r22
    194e:	7f 93       	push	r23
    1950:	8f 93       	push	r24
    1952:	9f 93       	push	r25
    1954:	af 93       	push	r26
    1956:	bf 93       	push	r27
    1958:	ef 93       	push	r30
    195a:	ff 93       	push	r31
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    1964:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <tc_tcc1_ccb_callback>
    1968:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <tc_tcc1_ccb_callback+0x1>
    196c:	89 2b       	or	r24, r25
    196e:	31 f0       	breq	.+12     	; 0x197c <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    1970:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <tc_tcc1_ccb_callback>
    1974:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <tc_tcc1_ccb_callback+0x1>
    1978:	fc 01       	movw	r30, r24
    197a:	19 95       	eicall
	}
}
    197c:	00 00       	nop
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	bf 91       	pop	r27
    1988:	af 91       	pop	r26
    198a:	9f 91       	pop	r25
    198c:	8f 91       	pop	r24
    198e:	7f 91       	pop	r23
    1990:	6f 91       	pop	r22
    1992:	5f 91       	pop	r21
    1994:	4f 91       	pop	r20
    1996:	3f 91       	pop	r19
    1998:	2f 91       	pop	r18
    199a:	0f 90       	pop	r0
    199c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19a0:	0f 90       	pop	r0
    19a2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19a6:	0f 90       	pop	r0
    19a8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19ac:	0f 90       	pop	r0
    19ae:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19b2:	0f 90       	pop	r0
    19b4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19ce:	0f 92       	push	r0
    19d0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19d4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19d8:	0f 92       	push	r0
    19da:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19de:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19e2:	0f 92       	push	r0
    19e4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19e8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19ec:	0f 92       	push	r0
    19ee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19f2:	2f 93       	push	r18
    19f4:	3f 93       	push	r19
    19f6:	4f 93       	push	r20
    19f8:	5f 93       	push	r21
    19fa:	6f 93       	push	r22
    19fc:	7f 93       	push	r23
    19fe:	8f 93       	push	r24
    1a00:	9f 93       	push	r25
    1a02:	af 93       	push	r26
    1a04:	bf 93       	push	r27
    1a06:	ef 93       	push	r30
    1a08:	ff 93       	push	r31
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    1a12:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <tc_tcd0_ovf_callback>
    1a16:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <tc_tcd0_ovf_callback+0x1>
    1a1a:	89 2b       	or	r24, r25
    1a1c:	31 f0       	breq	.+12     	; 0x1a2a <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    1a1e:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <tc_tcd0_ovf_callback>
    1a22:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <tc_tcd0_ovf_callback+0x1>
    1a26:	fc 01       	movw	r30, r24
    1a28:	19 95       	eicall
	}
}
    1a2a:	00 00       	nop
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a4e:	0f 90       	pop	r0
    1a50:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a54:	0f 90       	pop	r0
    1a56:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a5a:	0f 90       	pop	r0
    1a5c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a60:	0f 90       	pop	r0
    1a62:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1a6c:	1f 92       	push	r1
    1a6e:	0f 92       	push	r0
    1a70:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a74:	0f 92       	push	r0
    1a76:	11 24       	eor	r1, r1
    1a78:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a7c:	0f 92       	push	r0
    1a7e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a82:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a86:	0f 92       	push	r0
    1a88:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a8c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a90:	0f 92       	push	r0
    1a92:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a96:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a9a:	0f 92       	push	r0
    1a9c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    1ac0:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <tc_tcd0_err_callback>
    1ac4:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <tc_tcd0_err_callback+0x1>
    1ac8:	89 2b       	or	r24, r25
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <__vector_78+0x6c>
		tc_tcd0_err_callback();
    1acc:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <tc_tcd0_err_callback>
    1ad0:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <tc_tcd0_err_callback+0x1>
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	19 95       	eicall
	}
}
    1ad8:	00 00       	nop
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	bf 91       	pop	r27
    1ae4:	af 91       	pop	r26
    1ae6:	9f 91       	pop	r25
    1ae8:	8f 91       	pop	r24
    1aea:	7f 91       	pop	r23
    1aec:	6f 91       	pop	r22
    1aee:	5f 91       	pop	r21
    1af0:	4f 91       	pop	r20
    1af2:	3f 91       	pop	r19
    1af4:	2f 91       	pop	r18
    1af6:	0f 90       	pop	r0
    1af8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1afc:	0f 90       	pop	r0
    1afe:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b02:	0f 90       	pop	r0
    1b04:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b08:	0f 90       	pop	r0
    1b0a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b0e:	0f 90       	pop	r0
    1b10:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b2a:	0f 92       	push	r0
    1b2c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b30:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b34:	0f 92       	push	r0
    1b36:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b3a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b3e:	0f 92       	push	r0
    1b40:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b44:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b48:	0f 92       	push	r0
    1b4a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b4e:	2f 93       	push	r18
    1b50:	3f 93       	push	r19
    1b52:	4f 93       	push	r20
    1b54:	5f 93       	push	r21
    1b56:	6f 93       	push	r22
    1b58:	7f 93       	push	r23
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	af 93       	push	r26
    1b60:	bf 93       	push	r27
    1b62:	ef 93       	push	r30
    1b64:	ff 93       	push	r31
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    1b6e:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <tc_tcd0_cca_callback>
    1b72:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <tc_tcd0_cca_callback+0x1>
    1b76:	89 2b       	or	r24, r25
    1b78:	31 f0       	breq	.+12     	; 0x1b86 <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    1b7a:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <tc_tcd0_cca_callback>
    1b7e:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <tc_tcd0_cca_callback+0x1>
    1b82:	fc 01       	movw	r30, r24
    1b84:	19 95       	eicall
	}
}
    1b86:	00 00       	nop
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	bf 91       	pop	r27
    1b92:	af 91       	pop	r26
    1b94:	9f 91       	pop	r25
    1b96:	8f 91       	pop	r24
    1b98:	7f 91       	pop	r23
    1b9a:	6f 91       	pop	r22
    1b9c:	5f 91       	pop	r21
    1b9e:	4f 91       	pop	r20
    1ba0:	3f 91       	pop	r19
    1ba2:	2f 91       	pop	r18
    1ba4:	0f 90       	pop	r0
    1ba6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1baa:	0f 90       	pop	r0
    1bac:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bb0:	0f 90       	pop	r0
    1bb2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1bb6:	0f 90       	pop	r0
    1bb8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bbc:	0f 90       	pop	r0
    1bbe:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bc2:	0f 90       	pop	r0
    1bc4:	1f 90       	pop	r1
    1bc6:	18 95       	reti

00001bc8 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1bc8:	1f 92       	push	r1
    1bca:	0f 92       	push	r0
    1bcc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bd0:	0f 92       	push	r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bd8:	0f 92       	push	r0
    1bda:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bde:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1be2:	0f 92       	push	r0
    1be4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1be8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bec:	0f 92       	push	r0
    1bee:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bf2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1bf6:	0f 92       	push	r0
    1bf8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1bfc:	2f 93       	push	r18
    1bfe:	3f 93       	push	r19
    1c00:	4f 93       	push	r20
    1c02:	5f 93       	push	r21
    1c04:	6f 93       	push	r22
    1c06:	7f 93       	push	r23
    1c08:	8f 93       	push	r24
    1c0a:	9f 93       	push	r25
    1c0c:	af 93       	push	r26
    1c0e:	bf 93       	push	r27
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    1c1c:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <tc_tcd0_ccb_callback>
    1c20:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <tc_tcd0_ccb_callback+0x1>
    1c24:	89 2b       	or	r24, r25
    1c26:	31 f0       	breq	.+12     	; 0x1c34 <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    1c28:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <tc_tcd0_ccb_callback>
    1c2c:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <tc_tcd0_ccb_callback+0x1>
    1c30:	fc 01       	movw	r30, r24
    1c32:	19 95       	eicall
	}
}
    1c34:	00 00       	nop
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	ff 91       	pop	r31
    1c3c:	ef 91       	pop	r30
    1c3e:	bf 91       	pop	r27
    1c40:	af 91       	pop	r26
    1c42:	9f 91       	pop	r25
    1c44:	8f 91       	pop	r24
    1c46:	7f 91       	pop	r23
    1c48:	6f 91       	pop	r22
    1c4a:	5f 91       	pop	r21
    1c4c:	4f 91       	pop	r20
    1c4e:	3f 91       	pop	r19
    1c50:	2f 91       	pop	r18
    1c52:	0f 90       	pop	r0
    1c54:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c58:	0f 90       	pop	r0
    1c5a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c5e:	0f 90       	pop	r0
    1c60:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c64:	0f 90       	pop	r0
    1c66:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c6a:	0f 90       	pop	r0
    1c6c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c86:	0f 92       	push	r0
    1c88:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c8c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c90:	0f 92       	push	r0
    1c92:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c96:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c9a:	0f 92       	push	r0
    1c9c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ca0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ca4:	0f 92       	push	r0
    1ca6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1caa:	2f 93       	push	r18
    1cac:	3f 93       	push	r19
    1cae:	4f 93       	push	r20
    1cb0:	5f 93       	push	r21
    1cb2:	6f 93       	push	r22
    1cb4:	7f 93       	push	r23
    1cb6:	8f 93       	push	r24
    1cb8:	9f 93       	push	r25
    1cba:	af 93       	push	r26
    1cbc:	bf 93       	push	r27
    1cbe:	ef 93       	push	r30
    1cc0:	ff 93       	push	r31
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    1cca:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <tc_tcd0_ccc_callback>
    1cce:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <tc_tcd0_ccc_callback+0x1>
    1cd2:	89 2b       	or	r24, r25
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    1cd6:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <tc_tcd0_ccc_callback>
    1cda:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <tc_tcd0_ccc_callback+0x1>
    1cde:	fc 01       	movw	r30, r24
    1ce0:	19 95       	eicall
	}
}
    1ce2:	00 00       	nop
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d06:	0f 90       	pop	r0
    1d08:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d0c:	0f 90       	pop	r0
    1d0e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d12:	0f 90       	pop	r0
    1d14:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d18:	0f 90       	pop	r0
    1d1a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d34:	0f 92       	push	r0
    1d36:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d3a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d3e:	0f 92       	push	r0
    1d40:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d44:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d48:	0f 92       	push	r0
    1d4a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d4e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d52:	0f 92       	push	r0
    1d54:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d58:	2f 93       	push	r18
    1d5a:	3f 93       	push	r19
    1d5c:	4f 93       	push	r20
    1d5e:	5f 93       	push	r21
    1d60:	6f 93       	push	r22
    1d62:	7f 93       	push	r23
    1d64:	8f 93       	push	r24
    1d66:	9f 93       	push	r25
    1d68:	af 93       	push	r26
    1d6a:	bf 93       	push	r27
    1d6c:	ef 93       	push	r30
    1d6e:	ff 93       	push	r31
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    1d78:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <tc_tcd0_ccd_callback>
    1d7c:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <tc_tcd0_ccd_callback+0x1>
    1d80:	89 2b       	or	r24, r25
    1d82:	31 f0       	breq	.+12     	; 0x1d90 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    1d84:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <tc_tcd0_ccd_callback>
    1d88:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <tc_tcd0_ccd_callback+0x1>
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	19 95       	eicall
	}
}
    1d90:	00 00       	nop
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	7f 91       	pop	r23
    1da4:	6f 91       	pop	r22
    1da6:	5f 91       	pop	r21
    1da8:	4f 91       	pop	r20
    1daa:	3f 91       	pop	r19
    1dac:	2f 91       	pop	r18
    1dae:	0f 90       	pop	r0
    1db0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1db4:	0f 90       	pop	r0
    1db6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1dba:	0f 90       	pop	r0
    1dbc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1dc0:	0f 90       	pop	r0
    1dc2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1dc6:	0f 90       	pop	r0
    1dc8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1dcc:	0f 90       	pop	r0
    1dce:	1f 90       	pop	r1
    1dd0:	18 95       	reti

00001dd2 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1dda:	0f 92       	push	r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1de2:	0f 92       	push	r0
    1de4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1de8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1dec:	0f 92       	push	r0
    1dee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1df2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1df6:	0f 92       	push	r0
    1df8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1dfc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e00:	0f 92       	push	r0
    1e02:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e06:	2f 93       	push	r18
    1e08:	3f 93       	push	r19
    1e0a:	4f 93       	push	r20
    1e0c:	5f 93       	push	r21
    1e0e:	6f 93       	push	r22
    1e10:	7f 93       	push	r23
    1e12:	8f 93       	push	r24
    1e14:	9f 93       	push	r25
    1e16:	af 93       	push	r26
    1e18:	bf 93       	push	r27
    1e1a:	ef 93       	push	r30
    1e1c:	ff 93       	push	r31
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    1e26:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <tc_tcd1_ovf_callback>
    1e2a:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <tc_tcd1_ovf_callback+0x1>
    1e2e:	89 2b       	or	r24, r25
    1e30:	31 f0       	breq	.+12     	; 0x1e3e <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    1e32:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <tc_tcd1_ovf_callback>
    1e36:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <tc_tcd1_ovf_callback+0x1>
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	19 95       	eicall
	}
}
    1e3e:	00 00       	nop
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e62:	0f 90       	pop	r0
    1e64:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e68:	0f 90       	pop	r0
    1e6a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e6e:	0f 90       	pop	r0
    1e70:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e74:	0f 90       	pop	r0
    1e76:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e88:	0f 92       	push	r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e90:	0f 92       	push	r0
    1e92:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e96:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e9a:	0f 92       	push	r0
    1e9c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ea0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ea4:	0f 92       	push	r0
    1ea6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1eaa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1eae:	0f 92       	push	r0
    1eb0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1eb4:	2f 93       	push	r18
    1eb6:	3f 93       	push	r19
    1eb8:	4f 93       	push	r20
    1eba:	5f 93       	push	r21
    1ebc:	6f 93       	push	r22
    1ebe:	7f 93       	push	r23
    1ec0:	8f 93       	push	r24
    1ec2:	9f 93       	push	r25
    1ec4:	af 93       	push	r26
    1ec6:	bf 93       	push	r27
    1ec8:	ef 93       	push	r30
    1eca:	ff 93       	push	r31
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    1ed4:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <tc_tcd1_err_callback>
    1ed8:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <tc_tcd1_err_callback+0x1>
    1edc:	89 2b       	or	r24, r25
    1ede:	31 f0       	breq	.+12     	; 0x1eec <__vector_84+0x6c>
		tc_tcd1_err_callback();
    1ee0:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <tc_tcd1_err_callback>
    1ee4:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <tc_tcd1_err_callback+0x1>
    1ee8:	fc 01       	movw	r30, r24
    1eea:	19 95       	eicall
	}
}
    1eec:	00 00       	nop
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	ff 91       	pop	r31
    1ef4:	ef 91       	pop	r30
    1ef6:	bf 91       	pop	r27
    1ef8:	af 91       	pop	r26
    1efa:	9f 91       	pop	r25
    1efc:	8f 91       	pop	r24
    1efe:	7f 91       	pop	r23
    1f00:	6f 91       	pop	r22
    1f02:	5f 91       	pop	r21
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	0f 90       	pop	r0
    1f0c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f10:	0f 90       	pop	r0
    1f12:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f16:	0f 90       	pop	r0
    1f18:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f1c:	0f 90       	pop	r0
    1f1e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f22:	0f 90       	pop	r0
    1f24:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f28:	0f 90       	pop	r0
    1f2a:	1f 90       	pop	r1
    1f2c:	18 95       	reti

00001f2e <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1f2e:	1f 92       	push	r1
    1f30:	0f 92       	push	r0
    1f32:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f36:	0f 92       	push	r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f3e:	0f 92       	push	r0
    1f40:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f44:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f48:	0f 92       	push	r0
    1f4a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f4e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f52:	0f 92       	push	r0
    1f54:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f58:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f5c:	0f 92       	push	r0
    1f5e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f62:	2f 93       	push	r18
    1f64:	3f 93       	push	r19
    1f66:	4f 93       	push	r20
    1f68:	5f 93       	push	r21
    1f6a:	6f 93       	push	r22
    1f6c:	7f 93       	push	r23
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	af 93       	push	r26
    1f74:	bf 93       	push	r27
    1f76:	ef 93       	push	r30
    1f78:	ff 93       	push	r31
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    1f82:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <tc_tcd1_cca_callback>
    1f86:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <tc_tcd1_cca_callback+0x1>
    1f8a:	89 2b       	or	r24, r25
    1f8c:	31 f0       	breq	.+12     	; 0x1f9a <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    1f8e:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <tc_tcd1_cca_callback>
    1f92:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <tc_tcd1_cca_callback+0x1>
    1f96:	fc 01       	movw	r30, r24
    1f98:	19 95       	eicall
	}
}
    1f9a:	00 00       	nop
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	ff 91       	pop	r31
    1fa2:	ef 91       	pop	r30
    1fa4:	bf 91       	pop	r27
    1fa6:	af 91       	pop	r26
    1fa8:	9f 91       	pop	r25
    1faa:	8f 91       	pop	r24
    1fac:	7f 91       	pop	r23
    1fae:	6f 91       	pop	r22
    1fb0:	5f 91       	pop	r21
    1fb2:	4f 91       	pop	r20
    1fb4:	3f 91       	pop	r19
    1fb6:	2f 91       	pop	r18
    1fb8:	0f 90       	pop	r0
    1fba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1fbe:	0f 90       	pop	r0
    1fc0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1fc4:	0f 90       	pop	r0
    1fc6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1fca:	0f 90       	pop	r0
    1fcc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1fd0:	0f 90       	pop	r0
    1fd2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1fd6:	0f 90       	pop	r0
    1fd8:	1f 90       	pop	r1
    1fda:	18 95       	reti

00001fdc <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1fdc:	1f 92       	push	r1
    1fde:	0f 92       	push	r0
    1fe0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1fec:	0f 92       	push	r0
    1fee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ff2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ff6:	0f 92       	push	r0
    1ff8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ffc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2000:	0f 92       	push	r0
    2002:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2006:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    200a:	0f 92       	push	r0
    200c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2010:	2f 93       	push	r18
    2012:	3f 93       	push	r19
    2014:	4f 93       	push	r20
    2016:	5f 93       	push	r21
    2018:	6f 93       	push	r22
    201a:	7f 93       	push	r23
    201c:	8f 93       	push	r24
    201e:	9f 93       	push	r25
    2020:	af 93       	push	r26
    2022:	bf 93       	push	r27
    2024:	ef 93       	push	r30
    2026:	ff 93       	push	r31
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    2030:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <tc_tcd1_ccb_callback>
    2034:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <tc_tcd1_ccb_callback+0x1>
    2038:	89 2b       	or	r24, r25
    203a:	31 f0       	breq	.+12     	; 0x2048 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    203c:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <tc_tcd1_ccb_callback>
    2040:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <tc_tcd1_ccb_callback+0x1>
    2044:	fc 01       	movw	r30, r24
    2046:	19 95       	eicall
	}
}
    2048:	00 00       	nop
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	ff 91       	pop	r31
    2050:	ef 91       	pop	r30
    2052:	bf 91       	pop	r27
    2054:	af 91       	pop	r26
    2056:	9f 91       	pop	r25
    2058:	8f 91       	pop	r24
    205a:	7f 91       	pop	r23
    205c:	6f 91       	pop	r22
    205e:	5f 91       	pop	r21
    2060:	4f 91       	pop	r20
    2062:	3f 91       	pop	r19
    2064:	2f 91       	pop	r18
    2066:	0f 90       	pop	r0
    2068:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    206c:	0f 90       	pop	r0
    206e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2072:	0f 90       	pop	r0
    2074:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2078:	0f 90       	pop	r0
    207a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    207e:	0f 90       	pop	r0
    2080:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2092:	0f 92       	push	r0
    2094:	11 24       	eor	r1, r1
    2096:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    209a:	0f 92       	push	r0
    209c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20a4:	0f 92       	push	r0
    20a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20ae:	0f 92       	push	r0
    20b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20b8:	0f 92       	push	r0
    20ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20be:	2f 93       	push	r18
    20c0:	3f 93       	push	r19
    20c2:	4f 93       	push	r20
    20c4:	5f 93       	push	r21
    20c6:	6f 93       	push	r22
    20c8:	7f 93       	push	r23
    20ca:	8f 93       	push	r24
    20cc:	9f 93       	push	r25
    20ce:	af 93       	push	r26
    20d0:	bf 93       	push	r27
    20d2:	ef 93       	push	r30
    20d4:	ff 93       	push	r31
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    20de:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <tc_tce0_ovf_callback>
    20e2:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <tc_tce0_ovf_callback+0x1>
    20e6:	89 2b       	or	r24, r25
    20e8:	31 f0       	breq	.+12     	; 0x20f6 <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    20ea:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <tc_tce0_ovf_callback>
    20ee:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <tc_tce0_ovf_callback+0x1>
    20f2:	fc 01       	movw	r30, r24
    20f4:	19 95       	eicall
	}
}
    20f6:	00 00       	nop
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	ff 91       	pop	r31
    20fe:	ef 91       	pop	r30
    2100:	bf 91       	pop	r27
    2102:	af 91       	pop	r26
    2104:	9f 91       	pop	r25
    2106:	8f 91       	pop	r24
    2108:	7f 91       	pop	r23
    210a:	6f 91       	pop	r22
    210c:	5f 91       	pop	r21
    210e:	4f 91       	pop	r20
    2110:	3f 91       	pop	r19
    2112:	2f 91       	pop	r18
    2114:	0f 90       	pop	r0
    2116:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    211a:	0f 90       	pop	r0
    211c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2120:	0f 90       	pop	r0
    2122:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2126:	0f 90       	pop	r0
    2128:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    212c:	0f 90       	pop	r0
    212e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2132:	0f 90       	pop	r0
    2134:	1f 90       	pop	r1
    2136:	18 95       	reti

00002138 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    2138:	1f 92       	push	r1
    213a:	0f 92       	push	r0
    213c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2140:	0f 92       	push	r0
    2142:	11 24       	eor	r1, r1
    2144:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2148:	0f 92       	push	r0
    214a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    214e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2152:	0f 92       	push	r0
    2154:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2158:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    215c:	0f 92       	push	r0
    215e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2162:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2166:	0f 92       	push	r0
    2168:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    218c:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <tc_tce0_err_callback>
    2190:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <tc_tce0_err_callback+0x1>
    2194:	89 2b       	or	r24, r25
    2196:	31 f0       	breq	.+12     	; 0x21a4 <__vector_48+0x6c>
		tc_tce0_err_callback();
    2198:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <tc_tce0_err_callback>
    219c:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <tc_tce0_err_callback+0x1>
    21a0:	fc 01       	movw	r30, r24
    21a2:	19 95       	eicall
	}
}
    21a4:	00 00       	nop
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	ff 91       	pop	r31
    21ac:	ef 91       	pop	r30
    21ae:	bf 91       	pop	r27
    21b0:	af 91       	pop	r26
    21b2:	9f 91       	pop	r25
    21b4:	8f 91       	pop	r24
    21b6:	7f 91       	pop	r23
    21b8:	6f 91       	pop	r22
    21ba:	5f 91       	pop	r21
    21bc:	4f 91       	pop	r20
    21be:	3f 91       	pop	r19
    21c0:	2f 91       	pop	r18
    21c2:	0f 90       	pop	r0
    21c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21c8:	0f 90       	pop	r0
    21ca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    21ce:	0f 90       	pop	r0
    21d0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    21d4:	0f 90       	pop	r0
    21d6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    21da:	0f 90       	pop	r0
    21dc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    21ee:	0f 92       	push	r0
    21f0:	11 24       	eor	r1, r1
    21f2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    21f6:	0f 92       	push	r0
    21f8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    21fc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2200:	0f 92       	push	r0
    2202:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2206:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    220a:	0f 92       	push	r0
    220c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2210:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2214:	0f 92       	push	r0
    2216:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    221a:	2f 93       	push	r18
    221c:	3f 93       	push	r19
    221e:	4f 93       	push	r20
    2220:	5f 93       	push	r21
    2222:	6f 93       	push	r22
    2224:	7f 93       	push	r23
    2226:	8f 93       	push	r24
    2228:	9f 93       	push	r25
    222a:	af 93       	push	r26
    222c:	bf 93       	push	r27
    222e:	ef 93       	push	r30
    2230:	ff 93       	push	r31
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    223a:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <tc_tce0_cca_callback>
    223e:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <tc_tce0_cca_callback+0x1>
    2242:	89 2b       	or	r24, r25
    2244:	31 f0       	breq	.+12     	; 0x2252 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    2246:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <tc_tce0_cca_callback>
    224a:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <tc_tce0_cca_callback+0x1>
    224e:	fc 01       	movw	r30, r24
    2250:	19 95       	eicall
	}
}
    2252:	00 00       	nop
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	ff 91       	pop	r31
    225a:	ef 91       	pop	r30
    225c:	bf 91       	pop	r27
    225e:	af 91       	pop	r26
    2260:	9f 91       	pop	r25
    2262:	8f 91       	pop	r24
    2264:	7f 91       	pop	r23
    2266:	6f 91       	pop	r22
    2268:	5f 91       	pop	r21
    226a:	4f 91       	pop	r20
    226c:	3f 91       	pop	r19
    226e:	2f 91       	pop	r18
    2270:	0f 90       	pop	r0
    2272:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2276:	0f 90       	pop	r0
    2278:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    227c:	0f 90       	pop	r0
    227e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2282:	0f 90       	pop	r0
    2284:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2288:	0f 90       	pop	r0
    228a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    228e:	0f 90       	pop	r0
    2290:	1f 90       	pop	r1
    2292:	18 95       	reti

00002294 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    2294:	1f 92       	push	r1
    2296:	0f 92       	push	r0
    2298:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    229c:	0f 92       	push	r0
    229e:	11 24       	eor	r1, r1
    22a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22a4:	0f 92       	push	r0
    22a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22ae:	0f 92       	push	r0
    22b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22b8:	0f 92       	push	r0
    22ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22c2:	0f 92       	push	r0
    22c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22c8:	2f 93       	push	r18
    22ca:	3f 93       	push	r19
    22cc:	4f 93       	push	r20
    22ce:	5f 93       	push	r21
    22d0:	6f 93       	push	r22
    22d2:	7f 93       	push	r23
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    22e8:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <tc_tce0_ccb_callback>
    22ec:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <tc_tce0_ccb_callback+0x1>
    22f0:	89 2b       	or	r24, r25
    22f2:	31 f0       	breq	.+12     	; 0x2300 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    22f4:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <tc_tce0_ccb_callback>
    22f8:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <tc_tce0_ccb_callback+0x1>
    22fc:	fc 01       	movw	r30, r24
    22fe:	19 95       	eicall
	}
}
    2300:	00 00       	nop
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	ff 91       	pop	r31
    2308:	ef 91       	pop	r30
    230a:	bf 91       	pop	r27
    230c:	af 91       	pop	r26
    230e:	9f 91       	pop	r25
    2310:	8f 91       	pop	r24
    2312:	7f 91       	pop	r23
    2314:	6f 91       	pop	r22
    2316:	5f 91       	pop	r21
    2318:	4f 91       	pop	r20
    231a:	3f 91       	pop	r19
    231c:	2f 91       	pop	r18
    231e:	0f 90       	pop	r0
    2320:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2324:	0f 90       	pop	r0
    2326:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    232a:	0f 90       	pop	r0
    232c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2330:	0f 90       	pop	r0
    2332:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2336:	0f 90       	pop	r0
    2338:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    233c:	0f 90       	pop	r0
    233e:	1f 90       	pop	r1
    2340:	18 95       	reti

00002342 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    2342:	1f 92       	push	r1
    2344:	0f 92       	push	r0
    2346:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    234a:	0f 92       	push	r0
    234c:	11 24       	eor	r1, r1
    234e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2352:	0f 92       	push	r0
    2354:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2358:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    235c:	0f 92       	push	r0
    235e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2362:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2366:	0f 92       	push	r0
    2368:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    236c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2370:	0f 92       	push	r0
    2372:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2376:	2f 93       	push	r18
    2378:	3f 93       	push	r19
    237a:	4f 93       	push	r20
    237c:	5f 93       	push	r21
    237e:	6f 93       	push	r22
    2380:	7f 93       	push	r23
    2382:	8f 93       	push	r24
    2384:	9f 93       	push	r25
    2386:	af 93       	push	r26
    2388:	bf 93       	push	r27
    238a:	ef 93       	push	r30
    238c:	ff 93       	push	r31
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    2396:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <tc_tce0_ccc_callback>
    239a:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <tc_tce0_ccc_callback+0x1>
    239e:	89 2b       	or	r24, r25
    23a0:	31 f0       	breq	.+12     	; 0x23ae <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    23a2:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <tc_tce0_ccc_callback>
    23a6:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <tc_tce0_ccc_callback+0x1>
    23aa:	fc 01       	movw	r30, r24
    23ac:	19 95       	eicall
	}
}
    23ae:	00 00       	nop
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	ff 91       	pop	r31
    23b6:	ef 91       	pop	r30
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	0f 90       	pop	r0
    23ce:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23d2:	0f 90       	pop	r0
    23d4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23d8:	0f 90       	pop	r0
    23da:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23de:	0f 90       	pop	r0
    23e0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    23e4:	0f 90       	pop	r0
    23e6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    23ea:	0f 90       	pop	r0
    23ec:	1f 90       	pop	r1
    23ee:	18 95       	reti

000023f0 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    23f0:	1f 92       	push	r1
    23f2:	0f 92       	push	r0
    23f4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2400:	0f 92       	push	r0
    2402:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2406:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    240a:	0f 92       	push	r0
    240c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2410:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2414:	0f 92       	push	r0
    2416:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    241a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    241e:	0f 92       	push	r0
    2420:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2424:	2f 93       	push	r18
    2426:	3f 93       	push	r19
    2428:	4f 93       	push	r20
    242a:	5f 93       	push	r21
    242c:	6f 93       	push	r22
    242e:	7f 93       	push	r23
    2430:	8f 93       	push	r24
    2432:	9f 93       	push	r25
    2434:	af 93       	push	r26
    2436:	bf 93       	push	r27
    2438:	ef 93       	push	r30
    243a:	ff 93       	push	r31
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    2444:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <tc_tce0_ccd_callback>
    2448:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <tc_tce0_ccd_callback+0x1>
    244c:	89 2b       	or	r24, r25
    244e:	31 f0       	breq	.+12     	; 0x245c <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    2450:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <tc_tce0_ccd_callback>
    2454:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <tc_tce0_ccd_callback+0x1>
    2458:	fc 01       	movw	r30, r24
    245a:	19 95       	eicall
	}
}
    245c:	00 00       	nop
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2480:	0f 90       	pop	r0
    2482:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2486:	0f 90       	pop	r0
    2488:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    248c:	0f 90       	pop	r0
    248e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2492:	0f 90       	pop	r0
    2494:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2498:	0f 90       	pop	r0
    249a:	1f 90       	pop	r1
    249c:	18 95       	reti

0000249e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    249e:	1f 92       	push	r1
    24a0:	0f 92       	push	r0
    24a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24a6:	0f 92       	push	r0
    24a8:	11 24       	eor	r1, r1
    24aa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24ae:	0f 92       	push	r0
    24b0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24b4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24b8:	0f 92       	push	r0
    24ba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24be:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24c2:	0f 92       	push	r0
    24c4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24c8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24cc:	0f 92       	push	r0
    24ce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24d2:	2f 93       	push	r18
    24d4:	3f 93       	push	r19
    24d6:	4f 93       	push	r20
    24d8:	5f 93       	push	r21
    24da:	6f 93       	push	r22
    24dc:	7f 93       	push	r23
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    24f2:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <tc_tce1_ovf_callback>
    24f6:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <tc_tce1_ovf_callback+0x1>
    24fa:	89 2b       	or	r24, r25
    24fc:	31 f0       	breq	.+12     	; 0x250a <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    24fe:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <tc_tce1_ovf_callback>
    2502:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <tc_tce1_ovf_callback+0x1>
    2506:	fc 01       	movw	r30, r24
    2508:	19 95       	eicall
	}
}
    250a:	00 00       	nop
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	ff 91       	pop	r31
    2512:	ef 91       	pop	r30
    2514:	bf 91       	pop	r27
    2516:	af 91       	pop	r26
    2518:	9f 91       	pop	r25
    251a:	8f 91       	pop	r24
    251c:	7f 91       	pop	r23
    251e:	6f 91       	pop	r22
    2520:	5f 91       	pop	r21
    2522:	4f 91       	pop	r20
    2524:	3f 91       	pop	r19
    2526:	2f 91       	pop	r18
    2528:	0f 90       	pop	r0
    252a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    252e:	0f 90       	pop	r0
    2530:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2534:	0f 90       	pop	r0
    2536:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    253a:	0f 90       	pop	r0
    253c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2540:	0f 90       	pop	r0
    2542:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2546:	0f 90       	pop	r0
    2548:	1f 90       	pop	r1
    254a:	18 95       	reti

0000254c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    254c:	1f 92       	push	r1
    254e:	0f 92       	push	r0
    2550:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    255c:	0f 92       	push	r0
    255e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2562:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2566:	0f 92       	push	r0
    2568:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    256c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2570:	0f 92       	push	r0
    2572:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2576:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    257a:	0f 92       	push	r0
    257c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    25a0:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <tc_tce1_err_callback>
    25a4:	90 91 fb 20 	lds	r25, 0x20FB	; 0x8020fb <tc_tce1_err_callback+0x1>
    25a8:	89 2b       	or	r24, r25
    25aa:	31 f0       	breq	.+12     	; 0x25b8 <__vector_54+0x6c>
		tc_tce1_err_callback();
    25ac:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <tc_tce1_err_callback>
    25b0:	90 91 fb 20 	lds	r25, 0x20FB	; 0x8020fb <tc_tce1_err_callback+0x1>
    25b4:	fc 01       	movw	r30, r24
    25b6:	19 95       	eicall
	}
}
    25b8:	00 00       	nop
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25dc:	0f 90       	pop	r0
    25de:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25e2:	0f 90       	pop	r0
    25e4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25e8:	0f 90       	pop	r0
    25ea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25ee:	0f 90       	pop	r0
    25f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    25f4:	0f 90       	pop	r0
    25f6:	1f 90       	pop	r1
    25f8:	18 95       	reti

000025fa <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2602:	0f 92       	push	r0
    2604:	11 24       	eor	r1, r1
    2606:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    260a:	0f 92       	push	r0
    260c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2610:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2614:	0f 92       	push	r0
    2616:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    261a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    261e:	0f 92       	push	r0
    2620:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2624:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2628:	0f 92       	push	r0
    262a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    262e:	2f 93       	push	r18
    2630:	3f 93       	push	r19
    2632:	4f 93       	push	r20
    2634:	5f 93       	push	r21
    2636:	6f 93       	push	r22
    2638:	7f 93       	push	r23
    263a:	8f 93       	push	r24
    263c:	9f 93       	push	r25
    263e:	af 93       	push	r26
    2640:	bf 93       	push	r27
    2642:	ef 93       	push	r30
    2644:	ff 93       	push	r31
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    264e:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <tc_tce1_cca_callback>
    2652:	90 91 fd 20 	lds	r25, 0x20FD	; 0x8020fd <tc_tce1_cca_callback+0x1>
    2656:	89 2b       	or	r24, r25
    2658:	31 f0       	breq	.+12     	; 0x2666 <__vector_55+0x6c>
		tc_tce1_cca_callback();
    265a:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <tc_tce1_cca_callback>
    265e:	90 91 fd 20 	lds	r25, 0x20FD	; 0x8020fd <tc_tce1_cca_callback+0x1>
    2662:	fc 01       	movw	r30, r24
    2664:	19 95       	eicall
	}
}
    2666:	00 00       	nop
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    268a:	0f 90       	pop	r0
    268c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2690:	0f 90       	pop	r0
    2692:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2696:	0f 90       	pop	r0
    2698:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    269c:	0f 90       	pop	r0
    269e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26a2:	0f 90       	pop	r0
    26a4:	1f 90       	pop	r1
    26a6:	18 95       	reti

000026a8 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    26a8:	1f 92       	push	r1
    26aa:	0f 92       	push	r0
    26ac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26b8:	0f 92       	push	r0
    26ba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26be:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26c2:	0f 92       	push	r0
    26c4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26c8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    26cc:	0f 92       	push	r0
    26ce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    26d2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    26d6:	0f 92       	push	r0
    26d8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    26dc:	2f 93       	push	r18
    26de:	3f 93       	push	r19
    26e0:	4f 93       	push	r20
    26e2:	5f 93       	push	r21
    26e4:	6f 93       	push	r22
    26e6:	7f 93       	push	r23
    26e8:	8f 93       	push	r24
    26ea:	9f 93       	push	r25
    26ec:	af 93       	push	r26
    26ee:	bf 93       	push	r27
    26f0:	ef 93       	push	r30
    26f2:	ff 93       	push	r31
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    26fc:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <tc_tce1_ccb_callback>
    2700:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <tc_tce1_ccb_callback+0x1>
    2704:	89 2b       	or	r24, r25
    2706:	31 f0       	breq	.+12     	; 0x2714 <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    2708:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <tc_tce1_ccb_callback>
    270c:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <tc_tce1_ccb_callback+0x1>
    2710:	fc 01       	movw	r30, r24
    2712:	19 95       	eicall
	}
}
    2714:	00 00       	nop
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	ff 91       	pop	r31
    271c:	ef 91       	pop	r30
    271e:	bf 91       	pop	r27
    2720:	af 91       	pop	r26
    2722:	9f 91       	pop	r25
    2724:	8f 91       	pop	r24
    2726:	7f 91       	pop	r23
    2728:	6f 91       	pop	r22
    272a:	5f 91       	pop	r21
    272c:	4f 91       	pop	r20
    272e:	3f 91       	pop	r19
    2730:	2f 91       	pop	r18
    2732:	0f 90       	pop	r0
    2734:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2738:	0f 90       	pop	r0
    273a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    273e:	0f 90       	pop	r0
    2740:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2744:	0f 90       	pop	r0
    2746:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    274a:	0f 90       	pop	r0
    274c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    2756:	1f 92       	push	r1
    2758:	0f 92       	push	r0
    275a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    275e:	0f 92       	push	r0
    2760:	11 24       	eor	r1, r1
    2762:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2766:	0f 92       	push	r0
    2768:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    276c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2770:	0f 92       	push	r0
    2772:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2776:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    277a:	0f 92       	push	r0
    277c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2780:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2784:	0f 92       	push	r0
    2786:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    278a:	2f 93       	push	r18
    278c:	3f 93       	push	r19
    278e:	4f 93       	push	r20
    2790:	5f 93       	push	r21
    2792:	6f 93       	push	r22
    2794:	7f 93       	push	r23
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	af 93       	push	r26
    279c:	bf 93       	push	r27
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    27aa:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <tc_tcf0_ovf_callback>
    27ae:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <tc_tcf0_ovf_callback+0x1>
    27b2:	89 2b       	or	r24, r25
    27b4:	31 f0       	breq	.+12     	; 0x27c2 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    27b6:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <tc_tcf0_ovf_callback>
    27ba:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <tc_tcf0_ovf_callback+0x1>
    27be:	fc 01       	movw	r30, r24
    27c0:	19 95       	eicall
	}
}
    27c2:	00 00       	nop
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	ff 91       	pop	r31
    27ca:	ef 91       	pop	r30
    27cc:	bf 91       	pop	r27
    27ce:	af 91       	pop	r26
    27d0:	9f 91       	pop	r25
    27d2:	8f 91       	pop	r24
    27d4:	7f 91       	pop	r23
    27d6:	6f 91       	pop	r22
    27d8:	5f 91       	pop	r21
    27da:	4f 91       	pop	r20
    27dc:	3f 91       	pop	r19
    27de:	2f 91       	pop	r18
    27e0:	0f 90       	pop	r0
    27e2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27e6:	0f 90       	pop	r0
    27e8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27ec:	0f 90       	pop	r0
    27ee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27f2:	0f 90       	pop	r0
    27f4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    27f8:	0f 90       	pop	r0
    27fa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    27fe:	0f 90       	pop	r0
    2800:	1f 90       	pop	r1
    2802:	18 95       	reti

00002804 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    2804:	1f 92       	push	r1
    2806:	0f 92       	push	r0
    2808:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    280c:	0f 92       	push	r0
    280e:	11 24       	eor	r1, r1
    2810:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2814:	0f 92       	push	r0
    2816:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    281a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    281e:	0f 92       	push	r0
    2820:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2824:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2828:	0f 92       	push	r0
    282a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    282e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2832:	0f 92       	push	r0
    2834:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2838:	2f 93       	push	r18
    283a:	3f 93       	push	r19
    283c:	4f 93       	push	r20
    283e:	5f 93       	push	r21
    2840:	6f 93       	push	r22
    2842:	7f 93       	push	r23
    2844:	8f 93       	push	r24
    2846:	9f 93       	push	r25
    2848:	af 93       	push	r26
    284a:	bf 93       	push	r27
    284c:	ef 93       	push	r30
    284e:	ff 93       	push	r31
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    2858:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <tc_tcf0_err_callback>
    285c:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <tc_tcf0_err_callback+0x1>
    2860:	89 2b       	or	r24, r25
    2862:	31 f0       	breq	.+12     	; 0x2870 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    2864:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <tc_tcf0_err_callback>
    2868:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <tc_tcf0_err_callback+0x1>
    286c:	fc 01       	movw	r30, r24
    286e:	19 95       	eicall
	}
}
    2870:	00 00       	nop
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	ff 91       	pop	r31
    2878:	ef 91       	pop	r30
    287a:	bf 91       	pop	r27
    287c:	af 91       	pop	r26
    287e:	9f 91       	pop	r25
    2880:	8f 91       	pop	r24
    2882:	7f 91       	pop	r23
    2884:	6f 91       	pop	r22
    2886:	5f 91       	pop	r21
    2888:	4f 91       	pop	r20
    288a:	3f 91       	pop	r19
    288c:	2f 91       	pop	r18
    288e:	0f 90       	pop	r0
    2890:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2894:	0f 90       	pop	r0
    2896:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    289a:	0f 90       	pop	r0
    289c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28a0:	0f 90       	pop	r0
    28a2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28a6:	0f 90       	pop	r0
    28a8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28ac:	0f 90       	pop	r0
    28ae:	1f 90       	pop	r1
    28b0:	18 95       	reti

000028b2 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    28b2:	1f 92       	push	r1
    28b4:	0f 92       	push	r0
    28b6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28c2:	0f 92       	push	r0
    28c4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28c8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28cc:	0f 92       	push	r0
    28ce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28d2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28d6:	0f 92       	push	r0
    28d8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28dc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    28e0:	0f 92       	push	r0
    28e2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    28e6:	2f 93       	push	r18
    28e8:	3f 93       	push	r19
    28ea:	4f 93       	push	r20
    28ec:	5f 93       	push	r21
    28ee:	6f 93       	push	r22
    28f0:	7f 93       	push	r23
    28f2:	8f 93       	push	r24
    28f4:	9f 93       	push	r25
    28f6:	af 93       	push	r26
    28f8:	bf 93       	push	r27
    28fa:	ef 93       	push	r30
    28fc:	ff 93       	push	r31
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    2906:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <tc_tcf0_cca_callback>
    290a:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <tc_tcf0_cca_callback+0x1>
    290e:	89 2b       	or	r24, r25
    2910:	31 f0       	breq	.+12     	; 0x291e <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    2912:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <tc_tcf0_cca_callback>
    2916:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <tc_tcf0_cca_callback+0x1>
    291a:	fc 01       	movw	r30, r24
    291c:	19 95       	eicall
	}
}
    291e:	00 00       	nop
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	ff 91       	pop	r31
    2926:	ef 91       	pop	r30
    2928:	bf 91       	pop	r27
    292a:	af 91       	pop	r26
    292c:	9f 91       	pop	r25
    292e:	8f 91       	pop	r24
    2930:	7f 91       	pop	r23
    2932:	6f 91       	pop	r22
    2934:	5f 91       	pop	r21
    2936:	4f 91       	pop	r20
    2938:	3f 91       	pop	r19
    293a:	2f 91       	pop	r18
    293c:	0f 90       	pop	r0
    293e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2942:	0f 90       	pop	r0
    2944:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2948:	0f 90       	pop	r0
    294a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    294e:	0f 90       	pop	r0
    2950:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2954:	0f 90       	pop	r0
    2956:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2968:	0f 92       	push	r0
    296a:	11 24       	eor	r1, r1
    296c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2970:	0f 92       	push	r0
    2972:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2976:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    297a:	0f 92       	push	r0
    297c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2980:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2984:	0f 92       	push	r0
    2986:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    298a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    298e:	0f 92       	push	r0
    2990:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2994:	2f 93       	push	r18
    2996:	3f 93       	push	r19
    2998:	4f 93       	push	r20
    299a:	5f 93       	push	r21
    299c:	6f 93       	push	r22
    299e:	7f 93       	push	r23
    29a0:	8f 93       	push	r24
    29a2:	9f 93       	push	r25
    29a4:	af 93       	push	r26
    29a6:	bf 93       	push	r27
    29a8:	ef 93       	push	r30
    29aa:	ff 93       	push	r31
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    29b4:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <tc_tcf0_ccb_callback>
    29b8:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <tc_tcf0_ccb_callback+0x1>
    29bc:	89 2b       	or	r24, r25
    29be:	31 f0       	breq	.+12     	; 0x29cc <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    29c0:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <tc_tcf0_ccb_callback>
    29c4:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <tc_tcf0_ccb_callback+0x1>
    29c8:	fc 01       	movw	r30, r24
    29ca:	19 95       	eicall
	}
}
    29cc:	00 00       	nop
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	ff 91       	pop	r31
    29d4:	ef 91       	pop	r30
    29d6:	bf 91       	pop	r27
    29d8:	af 91       	pop	r26
    29da:	9f 91       	pop	r25
    29dc:	8f 91       	pop	r24
    29de:	7f 91       	pop	r23
    29e0:	6f 91       	pop	r22
    29e2:	5f 91       	pop	r21
    29e4:	4f 91       	pop	r20
    29e6:	3f 91       	pop	r19
    29e8:	2f 91       	pop	r18
    29ea:	0f 90       	pop	r0
    29ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29f0:	0f 90       	pop	r0
    29f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29f6:	0f 90       	pop	r0
    29f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29fc:	0f 90       	pop	r0
    29fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a02:	0f 90       	pop	r0
    2a04:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti

00002a0e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    2a0e:	1f 92       	push	r1
    2a10:	0f 92       	push	r0
    2a12:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a16:	0f 92       	push	r0
    2a18:	11 24       	eor	r1, r1
    2a1a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a1e:	0f 92       	push	r0
    2a20:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a24:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a28:	0f 92       	push	r0
    2a2a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a2e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a32:	0f 92       	push	r0
    2a34:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a38:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a3c:	0f 92       	push	r0
    2a3e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a42:	2f 93       	push	r18
    2a44:	3f 93       	push	r19
    2a46:	4f 93       	push	r20
    2a48:	5f 93       	push	r21
    2a4a:	6f 93       	push	r22
    2a4c:	7f 93       	push	r23
    2a4e:	8f 93       	push	r24
    2a50:	9f 93       	push	r25
    2a52:	af 93       	push	r26
    2a54:	bf 93       	push	r27
    2a56:	ef 93       	push	r30
    2a58:	ff 93       	push	r31
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    2a62:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <tc_tcf0_ccc_callback>
    2a66:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <tc_tcf0_ccc_callback+0x1>
    2a6a:	89 2b       	or	r24, r25
    2a6c:	31 f0       	breq	.+12     	; 0x2a7a <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    2a6e:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <tc_tcf0_ccc_callback>
    2a72:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <tc_tcf0_ccc_callback+0x1>
    2a76:	fc 01       	movw	r30, r24
    2a78:	19 95       	eicall
	}
}
    2a7a:	00 00       	nop
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	ff 91       	pop	r31
    2a82:	ef 91       	pop	r30
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	9f 91       	pop	r25
    2a8a:	8f 91       	pop	r24
    2a8c:	7f 91       	pop	r23
    2a8e:	6f 91       	pop	r22
    2a90:	5f 91       	pop	r21
    2a92:	4f 91       	pop	r20
    2a94:	3f 91       	pop	r19
    2a96:	2f 91       	pop	r18
    2a98:	0f 90       	pop	r0
    2a9a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a9e:	0f 90       	pop	r0
    2aa0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2aa4:	0f 90       	pop	r0
    2aa6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2aaa:	0f 90       	pop	r0
    2aac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ab0:	0f 90       	pop	r0
    2ab2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ab6:	0f 90       	pop	r0
    2ab8:	1f 90       	pop	r1
    2aba:	18 95       	reti

00002abc <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    2abc:	1f 92       	push	r1
    2abe:	0f 92       	push	r0
    2ac0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ac4:	0f 92       	push	r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2acc:	0f 92       	push	r0
    2ace:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ad2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ad6:	0f 92       	push	r0
    2ad8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2adc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ae0:	0f 92       	push	r0
    2ae2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ae6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2aea:	0f 92       	push	r0
    2aec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2af0:	2f 93       	push	r18
    2af2:	3f 93       	push	r19
    2af4:	4f 93       	push	r20
    2af6:	5f 93       	push	r21
    2af8:	6f 93       	push	r22
    2afa:	7f 93       	push	r23
    2afc:	8f 93       	push	r24
    2afe:	9f 93       	push	r25
    2b00:	af 93       	push	r26
    2b02:	bf 93       	push	r27
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    2b10:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <tc_tcf0_ccd_callback>
    2b14:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <tc_tcf0_ccd_callback+0x1>
    2b18:	89 2b       	or	r24, r25
    2b1a:	31 f0       	breq	.+12     	; 0x2b28 <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    2b1c:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <tc_tcf0_ccd_callback>
    2b20:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <tc_tcf0_ccd_callback+0x1>
    2b24:	fc 01       	movw	r30, r24
    2b26:	19 95       	eicall
	}
}
    2b28:	00 00       	nop
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	ff 91       	pop	r31
    2b30:	ef 91       	pop	r30
    2b32:	bf 91       	pop	r27
    2b34:	af 91       	pop	r26
    2b36:	9f 91       	pop	r25
    2b38:	8f 91       	pop	r24
    2b3a:	7f 91       	pop	r23
    2b3c:	6f 91       	pop	r22
    2b3e:	5f 91       	pop	r21
    2b40:	4f 91       	pop	r20
    2b42:	3f 91       	pop	r19
    2b44:	2f 91       	pop	r18
    2b46:	0f 90       	pop	r0
    2b48:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b4c:	0f 90       	pop	r0
    2b4e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b52:	0f 90       	pop	r0
    2b54:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b58:	0f 90       	pop	r0
    2b5a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b5e:	0f 90       	pop	r0
    2b60:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b64:	0f 90       	pop	r0
    2b66:	1f 90       	pop	r1
    2b68:	18 95       	reti

00002b6a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    2b6a:	1f 92       	push	r1
    2b6c:	0f 92       	push	r0
    2b6e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b72:	0f 92       	push	r0
    2b74:	11 24       	eor	r1, r1
    2b76:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b7a:	0f 92       	push	r0
    2b7c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b80:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b84:	0f 92       	push	r0
    2b86:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b8a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b8e:	0f 92       	push	r0
    2b90:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b94:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b98:	0f 92       	push	r0
    2b9a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b9e:	2f 93       	push	r18
    2ba0:	3f 93       	push	r19
    2ba2:	4f 93       	push	r20
    2ba4:	5f 93       	push	r21
    2ba6:	6f 93       	push	r22
    2ba8:	7f 93       	push	r23
    2baa:	8f 93       	push	r24
    2bac:	9f 93       	push	r25
    2bae:	af 93       	push	r26
    2bb0:	bf 93       	push	r27
    2bb2:	ef 93       	push	r30
    2bb4:	ff 93       	push	r31
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    2bbe:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <tc_tcf1_ovf_callback>
    2bc2:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <tc_tcf1_ovf_callback+0x1>
    2bc6:	89 2b       	or	r24, r25
    2bc8:	31 f0       	breq	.+12     	; 0x2bd6 <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    2bca:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <tc_tcf1_ovf_callback>
    2bce:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <tc_tcf1_ovf_callback+0x1>
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	19 95       	eicall
	}
}
    2bd6:	00 00       	nop
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	ff 91       	pop	r31
    2bde:	ef 91       	pop	r30
    2be0:	bf 91       	pop	r27
    2be2:	af 91       	pop	r26
    2be4:	9f 91       	pop	r25
    2be6:	8f 91       	pop	r24
    2be8:	7f 91       	pop	r23
    2bea:	6f 91       	pop	r22
    2bec:	5f 91       	pop	r21
    2bee:	4f 91       	pop	r20
    2bf0:	3f 91       	pop	r19
    2bf2:	2f 91       	pop	r18
    2bf4:	0f 90       	pop	r0
    2bf6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bfa:	0f 90       	pop	r0
    2bfc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c00:	0f 90       	pop	r0
    2c02:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c06:	0f 90       	pop	r0
    2c08:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c0c:	0f 90       	pop	r0
    2c0e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c12:	0f 90       	pop	r0
    2c14:	1f 90       	pop	r1
    2c16:	18 95       	reti

00002c18 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    2c18:	1f 92       	push	r1
    2c1a:	0f 92       	push	r0
    2c1c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c20:	0f 92       	push	r0
    2c22:	11 24       	eor	r1, r1
    2c24:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c28:	0f 92       	push	r0
    2c2a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c2e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c32:	0f 92       	push	r0
    2c34:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c38:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c3c:	0f 92       	push	r0
    2c3e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c42:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c46:	0f 92       	push	r0
    2c48:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c4c:	2f 93       	push	r18
    2c4e:	3f 93       	push	r19
    2c50:	4f 93       	push	r20
    2c52:	5f 93       	push	r21
    2c54:	6f 93       	push	r22
    2c56:	7f 93       	push	r23
    2c58:	8f 93       	push	r24
    2c5a:	9f 93       	push	r25
    2c5c:	af 93       	push	r26
    2c5e:	bf 93       	push	r27
    2c60:	ef 93       	push	r30
    2c62:	ff 93       	push	r31
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    2c6c:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <tc_tcf1_err_callback>
    2c70:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <tc_tcf1_err_callback+0x1>
    2c74:	89 2b       	or	r24, r25
    2c76:	31 f0       	breq	.+12     	; 0x2c84 <__vector_115+0x6c>
		tc_tcf1_err_callback();
    2c78:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <tc_tcf1_err_callback>
    2c7c:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <tc_tcf1_err_callback+0x1>
    2c80:	fc 01       	movw	r30, r24
    2c82:	19 95       	eicall
	}
}
    2c84:	00 00       	nop
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	ff 91       	pop	r31
    2c8c:	ef 91       	pop	r30
    2c8e:	bf 91       	pop	r27
    2c90:	af 91       	pop	r26
    2c92:	9f 91       	pop	r25
    2c94:	8f 91       	pop	r24
    2c96:	7f 91       	pop	r23
    2c98:	6f 91       	pop	r22
    2c9a:	5f 91       	pop	r21
    2c9c:	4f 91       	pop	r20
    2c9e:	3f 91       	pop	r19
    2ca0:	2f 91       	pop	r18
    2ca2:	0f 90       	pop	r0
    2ca4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ca8:	0f 90       	pop	r0
    2caa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2cae:	0f 90       	pop	r0
    2cb0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2cb4:	0f 90       	pop	r0
    2cb6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2cba:	0f 90       	pop	r0
    2cbc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2cc0:	0f 90       	pop	r0
    2cc2:	1f 90       	pop	r1
    2cc4:	18 95       	reti

00002cc6 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    2cc6:	1f 92       	push	r1
    2cc8:	0f 92       	push	r0
    2cca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2cce:	0f 92       	push	r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2cd6:	0f 92       	push	r0
    2cd8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2cdc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ce0:	0f 92       	push	r0
    2ce2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ce6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2cea:	0f 92       	push	r0
    2cec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2cf0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2cf4:	0f 92       	push	r0
    2cf6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2cfa:	2f 93       	push	r18
    2cfc:	3f 93       	push	r19
    2cfe:	4f 93       	push	r20
    2d00:	5f 93       	push	r21
    2d02:	6f 93       	push	r22
    2d04:	7f 93       	push	r23
    2d06:	8f 93       	push	r24
    2d08:	9f 93       	push	r25
    2d0a:	af 93       	push	r26
    2d0c:	bf 93       	push	r27
    2d0e:	ef 93       	push	r30
    2d10:	ff 93       	push	r31
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    2d1a:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <tc_tcf1_cca_callback>
    2d1e:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <tc_tcf1_cca_callback+0x1>
    2d22:	89 2b       	or	r24, r25
    2d24:	31 f0       	breq	.+12     	; 0x2d32 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    2d26:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <tc_tcf1_cca_callback>
    2d2a:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <tc_tcf1_cca_callback+0x1>
    2d2e:	fc 01       	movw	r30, r24
    2d30:	19 95       	eicall
	}
}
    2d32:	00 00       	nop
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	ff 91       	pop	r31
    2d3a:	ef 91       	pop	r30
    2d3c:	bf 91       	pop	r27
    2d3e:	af 91       	pop	r26
    2d40:	9f 91       	pop	r25
    2d42:	8f 91       	pop	r24
    2d44:	7f 91       	pop	r23
    2d46:	6f 91       	pop	r22
    2d48:	5f 91       	pop	r21
    2d4a:	4f 91       	pop	r20
    2d4c:	3f 91       	pop	r19
    2d4e:	2f 91       	pop	r18
    2d50:	0f 90       	pop	r0
    2d52:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d56:	0f 90       	pop	r0
    2d58:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d5c:	0f 90       	pop	r0
    2d5e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d62:	0f 90       	pop	r0
    2d64:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d68:	0f 90       	pop	r0
    2d6a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d6e:	0f 90       	pop	r0
    2d70:	1f 90       	pop	r1
    2d72:	18 95       	reti

00002d74 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    2d74:	1f 92       	push	r1
    2d76:	0f 92       	push	r0
    2d78:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d7c:	0f 92       	push	r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d84:	0f 92       	push	r0
    2d86:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d8a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d8e:	0f 92       	push	r0
    2d90:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d94:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d98:	0f 92       	push	r0
    2d9a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d9e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2da2:	0f 92       	push	r0
    2da4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2da8:	2f 93       	push	r18
    2daa:	3f 93       	push	r19
    2dac:	4f 93       	push	r20
    2dae:	5f 93       	push	r21
    2db0:	6f 93       	push	r22
    2db2:	7f 93       	push	r23
    2db4:	8f 93       	push	r24
    2db6:	9f 93       	push	r25
    2db8:	af 93       	push	r26
    2dba:	bf 93       	push	r27
    2dbc:	ef 93       	push	r30
    2dbe:	ff 93       	push	r31
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    2dc8:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <tc_tcf1_ccb_callback>
    2dcc:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <tc_tcf1_ccb_callback+0x1>
    2dd0:	89 2b       	or	r24, r25
    2dd2:	31 f0       	breq	.+12     	; 0x2de0 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    2dd4:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <tc_tcf1_ccb_callback>
    2dd8:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <tc_tcf1_ccb_callback+0x1>
    2ddc:	fc 01       	movw	r30, r24
    2dde:	19 95       	eicall
	}
}
    2de0:	00 00       	nop
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	ff 91       	pop	r31
    2de8:	ef 91       	pop	r30
    2dea:	bf 91       	pop	r27
    2dec:	af 91       	pop	r26
    2dee:	9f 91       	pop	r25
    2df0:	8f 91       	pop	r24
    2df2:	7f 91       	pop	r23
    2df4:	6f 91       	pop	r22
    2df6:	5f 91       	pop	r21
    2df8:	4f 91       	pop	r20
    2dfa:	3f 91       	pop	r19
    2dfc:	2f 91       	pop	r18
    2dfe:	0f 90       	pop	r0
    2e00:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e04:	0f 90       	pop	r0
    2e06:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e0a:	0f 90       	pop	r0
    2e0c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e10:	0f 90       	pop	r0
    2e12:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e16:	0f 90       	pop	r0
    2e18:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e1c:	0f 90       	pop	r0
    2e1e:	1f 90       	pop	r1
    2e20:	18 95       	reti

00002e22 <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    2e22:	1f 92       	push	r1
    2e24:	0f 92       	push	r0
    2e26:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e2a:	0f 92       	push	r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e32:	0f 92       	push	r0
    2e34:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e38:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e3c:	0f 92       	push	r0
    2e3e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e42:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e46:	0f 92       	push	r0
    2e48:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e4c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e50:	0f 92       	push	r0
    2e52:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e56:	2f 93       	push	r18
    2e58:	3f 93       	push	r19
    2e5a:	4f 93       	push	r20
    2e5c:	5f 93       	push	r21
    2e5e:	6f 93       	push	r22
    2e60:	7f 93       	push	r23
    2e62:	8f 93       	push	r24
    2e64:	9f 93       	push	r25
    2e66:	af 93       	push	r26
    2e68:	bf 93       	push	r27
    2e6a:	ef 93       	push	r30
    2e6c:	ff 93       	push	r31
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	e9 d1       	rcall	.+978    	; 0x324a <twim_interrupt_handler>
    2e78:	00 00       	nop
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	ff 91       	pop	r31
    2e80:	ef 91       	pop	r30
    2e82:	bf 91       	pop	r27
    2e84:	af 91       	pop	r26
    2e86:	9f 91       	pop	r25
    2e88:	8f 91       	pop	r24
    2e8a:	7f 91       	pop	r23
    2e8c:	6f 91       	pop	r22
    2e8e:	5f 91       	pop	r21
    2e90:	4f 91       	pop	r20
    2e92:	3f 91       	pop	r19
    2e94:	2f 91       	pop	r18
    2e96:	0f 90       	pop	r0
    2e98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e9c:	0f 90       	pop	r0
    2e9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ea2:	0f 90       	pop	r0
    2ea4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ea8:	0f 90       	pop	r0
    2eaa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2eae:	0f 90       	pop	r0
    2eb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2eb4:	0f 90       	pop	r0
    2eb6:	1f 90       	pop	r1
    2eb8:	18 95       	reti

00002eba <__vector_76>:
    2eba:	1f 92       	push	r1
    2ebc:	0f 92       	push	r0
    2ebe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ec2:	0f 92       	push	r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2eca:	0f 92       	push	r0
    2ecc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ed0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ed4:	0f 92       	push	r0
    2ed6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2eda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ede:	0f 92       	push	r0
    2ee0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ee4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ee8:	0f 92       	push	r0
    2eea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	9d d1       	rcall	.+826    	; 0x324a <twim_interrupt_handler>
    2f10:	00 00       	nop
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	bf 91       	pop	r27
    2f1c:	af 91       	pop	r26
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	7f 91       	pop	r23
    2f24:	6f 91       	pop	r22
    2f26:	5f 91       	pop	r21
    2f28:	4f 91       	pop	r20
    2f2a:	3f 91       	pop	r19
    2f2c:	2f 91       	pop	r18
    2f2e:	0f 90       	pop	r0
    2f30:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f34:	0f 90       	pop	r0
    2f36:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f3a:	0f 90       	pop	r0
    2f3c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f40:	0f 90       	pop	r0
    2f42:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f46:	0f 90       	pop	r0
    2f48:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f4c:	0f 90       	pop	r0
    2f4e:	1f 90       	pop	r1
    2f50:	18 95       	reti

00002f52 <__vector_46>:
    2f52:	1f 92       	push	r1
    2f54:	0f 92       	push	r0
    2f56:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f5a:	0f 92       	push	r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f62:	0f 92       	push	r0
    2f64:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f68:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f6c:	0f 92       	push	r0
    2f6e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f72:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f76:	0f 92       	push	r0
    2f78:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f7c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f80:	0f 92       	push	r0
    2f82:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f86:	2f 93       	push	r18
    2f88:	3f 93       	push	r19
    2f8a:	4f 93       	push	r20
    2f8c:	5f 93       	push	r21
    2f8e:	6f 93       	push	r22
    2f90:	7f 93       	push	r23
    2f92:	8f 93       	push	r24
    2f94:	9f 93       	push	r25
    2f96:	af 93       	push	r26
    2f98:	bf 93       	push	r27
    2f9a:	ef 93       	push	r30
    2f9c:	ff 93       	push	r31
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	51 d1       	rcall	.+674    	; 0x324a <twim_interrupt_handler>
    2fa8:	00 00       	nop
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	ff 91       	pop	r31
    2fb0:	ef 91       	pop	r30
    2fb2:	bf 91       	pop	r27
    2fb4:	af 91       	pop	r26
    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	7f 91       	pop	r23
    2fbc:	6f 91       	pop	r22
    2fbe:	5f 91       	pop	r21
    2fc0:	4f 91       	pop	r20
    2fc2:	3f 91       	pop	r19
    2fc4:	2f 91       	pop	r18
    2fc6:	0f 90       	pop	r0
    2fc8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fcc:	0f 90       	pop	r0
    2fce:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fd2:	0f 90       	pop	r0
    2fd4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fd8:	0f 90       	pop	r0
    2fda:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fde:	0f 90       	pop	r0
    2fe0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fe4:	0f 90       	pop	r0
    2fe6:	1f 90       	pop	r1
    2fe8:	18 95       	reti

00002fea <__vector_107>:
    2fea:	1f 92       	push	r1
    2fec:	0f 92       	push	r0
    2fee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ff2:	0f 92       	push	r0
    2ff4:	11 24       	eor	r1, r1
    2ff6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ffa:	0f 92       	push	r0
    2ffc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3000:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3004:	0f 92       	push	r0
    3006:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    300a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    300e:	0f 92       	push	r0
    3010:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3014:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3018:	0f 92       	push	r0
    301a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    301e:	2f 93       	push	r18
    3020:	3f 93       	push	r19
    3022:	4f 93       	push	r20
    3024:	5f 93       	push	r21
    3026:	6f 93       	push	r22
    3028:	7f 93       	push	r23
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	af 93       	push	r26
    3030:	bf 93       	push	r27
    3032:	ef 93       	push	r30
    3034:	ff 93       	push	r31
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	05 d1       	rcall	.+522    	; 0x324a <twim_interrupt_handler>
    3040:	00 00       	nop
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	ff 91       	pop	r31
    3048:	ef 91       	pop	r30
    304a:	bf 91       	pop	r27
    304c:	af 91       	pop	r26
    304e:	9f 91       	pop	r25
    3050:	8f 91       	pop	r24
    3052:	7f 91       	pop	r23
    3054:	6f 91       	pop	r22
    3056:	5f 91       	pop	r21
    3058:	4f 91       	pop	r20
    305a:	3f 91       	pop	r19
    305c:	2f 91       	pop	r18
    305e:	0f 90       	pop	r0
    3060:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3064:	0f 90       	pop	r0
    3066:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    306a:	0f 90       	pop	r0
    306c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3070:	0f 90       	pop	r0
    3072:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3076:	0f 90       	pop	r0
    3078:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    307c:	0f 90       	pop	r0
    307e:	1f 90       	pop	r1
    3080:	18 95       	reti

00003082 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    3082:	cf 93       	push	r28
    3084:	df 93       	push	r29
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	28 97       	sbiw	r28, 0x08	; 8
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    3090:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer>
    3094:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x1>
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    309c:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <transfer+0x2>
    30a0:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <transfer+0x3>
    30a4:	8b 83       	std	Y+3, r24	; 0x03
    30a6:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    30a8:	20 91 18 21 	lds	r18, 0x2118	; 0x802118 <transfer+0x4>
    30ac:	30 91 19 21 	lds	r19, 0x2119	; 0x802119 <transfer+0x5>
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	fc 01       	movw	r30, r24
    30b6:	84 81       	ldd	r24, Z+4	; 0x04
    30b8:	95 81       	ldd	r25, Z+5	; 0x05
    30ba:	28 17       	cp	r18, r24
    30bc:	39 07       	cpc	r19, r25
    30be:	e4 f4       	brge	.+56     	; 0x30f8 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    30ca:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <transfer+0x4>
    30ce:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <transfer+0x5>
    30d2:	9c 01       	movw	r18, r24
    30d4:	2f 5f       	subi	r18, 0xFF	; 255
    30d6:	3f 4f       	sbci	r19, 0xFF	; 255
    30d8:	20 93 18 21 	sts	0x2118, r18	; 0x802118 <transfer+0x4>
    30dc:	30 93 19 21 	sts	0x2119, r19	; 0x802119 <transfer+0x5>
    30e0:	9c 01       	movw	r18, r24
    30e2:	8d 81       	ldd	r24, Y+5	; 0x05
    30e4:	9e 81       	ldd	r25, Y+6	; 0x06
    30e6:	82 0f       	add	r24, r18
    30e8:	93 1f       	adc	r25, r19
    30ea:	fc 01       	movw	r30, r24
    30ec:	20 81       	ld	r18, Z
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	fc 01       	movw	r30, r24
    30f4:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    30f6:	3f c0       	rjmp	.+126    	; 0x3176 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    30f8:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <transfer+0x6>
    30fc:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <transfer+0x7>
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	9c 81       	ldd	r25, Y+4	; 0x04
    3104:	fc 01       	movw	r30, r24
    3106:	80 85       	ldd	r24, Z+8	; 0x08
    3108:	91 85       	ldd	r25, Z+9	; 0x09
    310a:	28 17       	cp	r18, r24
    310c:	39 07       	cpc	r19, r25
    310e:	60 f5       	brcc	.+88     	; 0x3168 <twim_write_handler+0xe6>

		if (transfer.read) {
    3110:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <transfer+0x8>
    3114:	88 23       	and	r24, r24
    3116:	59 f0       	breq	.+22     	; 0x312e <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	fc 01       	movw	r30, r24
    311e:	86 81       	ldd	r24, Z+6	; 0x06
    3120:	28 2f       	mov	r18, r24
    3122:	21 60       	ori	r18, 0x01	; 1
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	fc 01       	movw	r30, r24
    312a:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    312c:	24 c0       	rjmp	.+72     	; 0x3176 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	9c 81       	ldd	r25, Y+4	; 0x04
    3132:	fc 01       	movw	r30, r24
    3134:	86 81       	ldd	r24, Z+6	; 0x06
    3136:	97 81       	ldd	r25, Z+7	; 0x07
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    313c:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <transfer+0x6>
    3140:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <transfer+0x7>
    3144:	9c 01       	movw	r18, r24
    3146:	2f 5f       	subi	r18, 0xFF	; 255
    3148:	3f 4f       	sbci	r19, 0xFF	; 255
    314a:	20 93 1a 21 	sts	0x211A, r18	; 0x80211a <transfer+0x6>
    314e:	30 93 1b 21 	sts	0x211B, r19	; 0x80211b <transfer+0x7>
    3152:	2f 81       	ldd	r18, Y+7	; 0x07
    3154:	38 85       	ldd	r19, Y+8	; 0x08
    3156:	82 0f       	add	r24, r18
    3158:	93 1f       	adc	r25, r19
    315a:	fc 01       	movw	r30, r24
    315c:	20 81       	ld	r18, Z
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	9a 81       	ldd	r25, Y+2	; 0x02
    3162:	fc 01       	movw	r30, r24
    3164:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3166:	07 c0       	rjmp	.+14     	; 0x3176 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	23 e0       	ldi	r18, 0x03	; 3
    316e:	fc 01       	movw	r30, r24
    3170:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    3172:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <transfer+0xa>
	}
}
    3176:	00 00       	nop
    3178:	28 96       	adiw	r28, 0x08	; 8
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	08 95       	ret

00003184 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	00 d0       	rcall	.+0      	; 0x318a <twim_read_handler+0x6>
    318a:	00 d0       	rcall	.+0      	; 0x318c <twim_read_handler+0x8>
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    3190:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer>
    3194:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x1>
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    319c:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <transfer+0x2>
    31a0:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <transfer+0x3>
    31a4:	8b 83       	std	Y+3, r24	; 0x03
    31a6:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    31a8:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <transfer+0x6>
    31ac:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <transfer+0x7>
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	fc 01       	movw	r30, r24
    31b6:	80 85       	ldd	r24, Z+8	; 0x08
    31b8:	91 85       	ldd	r25, Z+9	; 0x09
    31ba:	28 17       	cp	r18, r24
    31bc:	39 07       	cpc	r19, r25
    31be:	b0 f5       	brcc	.+108    	; 0x322c <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	fc 01       	movw	r30, r24
    31c6:	86 81       	ldd	r24, Z+6	; 0x06
    31c8:	97 81       	ldd	r25, Z+7	; 0x07
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    31ce:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <transfer+0x6>
    31d2:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <transfer+0x7>
    31d6:	9c 01       	movw	r18, r24
    31d8:	2f 5f       	subi	r18, 0xFF	; 255
    31da:	3f 4f       	sbci	r19, 0xFF	; 255
    31dc:	20 93 1a 21 	sts	0x211A, r18	; 0x80211a <transfer+0x6>
    31e0:	30 93 1b 21 	sts	0x211B, r19	; 0x80211b <transfer+0x7>
    31e4:	2d 81       	ldd	r18, Y+5	; 0x05
    31e6:	3e 81       	ldd	r19, Y+6	; 0x06
    31e8:	82 0f       	add	r24, r18
    31ea:	93 1f       	adc	r25, r19
    31ec:	29 81       	ldd	r18, Y+1	; 0x01
    31ee:	3a 81       	ldd	r19, Y+2	; 0x02
    31f0:	f9 01       	movw	r30, r18
    31f2:	27 81       	ldd	r18, Z+7	; 0x07
    31f4:	fc 01       	movw	r30, r24
    31f6:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    31f8:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <transfer+0x6>
    31fc:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <transfer+0x7>
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	fc 01       	movw	r30, r24
    3206:	80 85       	ldd	r24, Z+8	; 0x08
    3208:	91 85       	ldd	r25, Z+9	; 0x09
    320a:	28 17       	cp	r18, r24
    320c:	39 07       	cpc	r19, r25
    320e:	30 f4       	brcc	.+12     	; 0x321c <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	22 e0       	ldi	r18, 0x02	; 2
    3216:	fc 01       	movw	r30, r24
    3218:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    321a:	10 c0       	rjmp	.+32     	; 0x323c <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	27 e0       	ldi	r18, 0x07	; 7
    3222:	fc 01       	movw	r30, r24
    3224:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    3226:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    322a:	08 c0       	rjmp	.+16     	; 0x323c <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	23 e0       	ldi	r18, 0x03	; 3
    3232:	fc 01       	movw	r30, r24
    3234:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3236:	89 ef       	ldi	r24, 0xF9	; 249
    3238:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <transfer+0xa>
	}
}
    323c:	00 00       	nop
    323e:	26 96       	adiw	r28, 0x06	; 6
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	08 95       	ret

0000324a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	1f 92       	push	r1
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    3254:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer>
    3258:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x1>
    325c:	fc 01       	movw	r30, r24
    325e:	84 81       	ldd	r24, Z+4	; 0x04
    3260:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	88 70       	andi	r24, 0x08	; 8
    326a:	99 27       	eor	r25, r25
    326c:	89 2b       	or	r24, r25
    326e:	99 f0       	breq	.+38     	; 0x3296 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    3270:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer>
    3274:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x1>
    3278:	29 81       	ldd	r18, Y+1	; 0x01
    327a:	28 60       	ori	r18, 0x08	; 8
    327c:	fc 01       	movw	r30, r24
    327e:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    3280:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer>
    3284:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x1>
    3288:	23 e0       	ldi	r18, 0x03	; 3
    328a:	fc 01       	movw	r30, r24
    328c:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    328e:	86 ef       	ldi	r24, 0xF6	; 246
    3290:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3294:	2a c0       	rjmp	.+84     	; 0x32ea <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	88 2f       	mov	r24, r24
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	84 70       	andi	r24, 0x04	; 4
    329e:	99 27       	eor	r25, r25
    32a0:	89 2b       	or	r24, r25
    32a2:	39 f4       	brne	.+14     	; 0x32b2 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	88 2f       	mov	r24, r24
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	80 71       	andi	r24, 0x10	; 16
    32ac:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    32ae:	89 2b       	or	r24, r25
    32b0:	59 f0       	breq	.+22     	; 0x32c8 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    32b2:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer>
    32b6:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x1>
    32ba:	23 e0       	ldi	r18, 0x03	; 3
    32bc:	fc 01       	movw	r30, r24
    32be:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    32c6:	11 c0       	rjmp	.+34     	; 0x32ea <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	88 2f       	mov	r24, r24
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	80 74       	andi	r24, 0x40	; 64
    32d0:	99 27       	eor	r25, r25
    32d2:	89 2b       	or	r24, r25
    32d4:	11 f0       	breq	.+4      	; 0x32da <twim_interrupt_handler+0x90>

		twim_write_handler();
    32d6:	d5 de       	rcall	.-598    	; 0x3082 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    32d8:	08 c0       	rjmp	.+16     	; 0x32ea <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	88 23       	and	r24, r24

		twim_read_handler();
    32de:	14 f4       	brge	.+4      	; 0x32e4 <twim_interrupt_handler+0x9a>
    32e0:	51 df       	rcall	.-350    	; 0x3184 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    32e2:	03 c0       	rjmp	.+6      	; 0x32ea <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    32e4:	8b ef       	ldi	r24, 0xFB	; 251
    32e6:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <transfer+0xa>
	}
}
    32ea:	00 00       	nop
    32ec:	0f 90       	pop	r0
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	1f 92       	push	r1
    32fa:	1f 92       	push	r1
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	9a 81       	ldd	r25, Y+2	; 0x02
    3308:	fc 01       	movw	r30, r24
    330a:	84 81       	ldd	r24, Z+4	; 0x04
    330c:	28 2f       	mov	r18, r24
    330e:	20 61       	ori	r18, 0x10	; 16
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	fc 01       	movw	r30, r24
    3316:	24 83       	std	Z+4, r18	; 0x04
    3318:	00 00       	nop
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	08 95       	ret

00003324 <usart_format_set>:
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	25 97       	sbiw	r28, 0x05	; 5
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	6b 83       	std	Y+3, r22	; 0x03
    3338:	4c 83       	std	Y+4, r20	; 0x04
    333a:	2d 83       	std	Y+5, r18	; 0x05
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	8c 81       	ldd	r24, Y+4	; 0x04
    3340:	89 2b       	or	r24, r25
    3342:	98 2f       	mov	r25, r24
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	88 23       	and	r24, r24
    3348:	11 f0       	breq	.+4      	; 0x334e <usart_format_set+0x2a>
    334a:	88 e0       	ldi	r24, 0x08	; 8
    334c:	01 c0       	rjmp	.+2      	; 0x3350 <usart_format_set+0x2c>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	89 2b       	or	r24, r25
    3352:	28 2f       	mov	r18, r24
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	fc 01       	movw	r30, r24
    335a:	25 83       	std	Z+5, r18	; 0x05
    335c:	00 00       	nop
    335e:	25 96       	adiw	r28, 0x05	; 5
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <usart_tx_enable>:
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	1f 92       	push	r1
    3370:	1f 92       	push	r1
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	9a 81       	ldd	r25, Y+2	; 0x02
    337e:	fc 01       	movw	r30, r24
    3380:	84 81       	ldd	r24, Z+4	; 0x04
    3382:	28 2f       	mov	r18, r24
    3384:	28 60       	ori	r18, 0x08	; 8
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	9a 81       	ldd	r25, Y+2	; 0x02
    338a:	fc 01       	movw	r30, r24
    338c:	24 83       	std	Z+4, r18	; 0x04
    338e:	00 00       	nop
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	08 95       	ret

0000339a <usart_set_mode>:
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <usart_set_mode+0x6>
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	6b 83       	std	Y+3, r22	; 0x03
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	9a 81       	ldd	r25, Y+2	; 0x02
    33ae:	fc 01       	movw	r30, r24
    33b0:	85 81       	ldd	r24, Z+5	; 0x05
    33b2:	98 2f       	mov	r25, r24
    33b4:	9f 73       	andi	r25, 0x3F	; 63
    33b6:	8b 81       	ldd	r24, Y+3	; 0x03
    33b8:	89 2b       	or	r24, r25
    33ba:	28 2f       	mov	r18, r24
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	fc 01       	movw	r30, r24
    33c2:	25 83       	std	Z+5, r18	; 0x05
    33c4:	00 00       	nop
    33c6:	23 96       	adiw	r28, 0x03	; 3
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	08 95       	ret

000033d2 <usart_data_register_is_empty>:
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	1f 92       	push	r1
    33d8:	1f 92       	push	r1
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	9a 83       	std	Y+2, r25	; 0x02
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	9a 81       	ldd	r25, Y+2	; 0x02
    33e6:	fc 01       	movw	r30, r24
    33e8:	81 81       	ldd	r24, Z+1	; 0x01
    33ea:	88 2f       	mov	r24, r24
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	80 72       	andi	r24, 0x20	; 32
    33f0:	99 27       	eor	r25, r25
    33f2:	21 e0       	ldi	r18, 0x01	; 1
    33f4:	89 2b       	or	r24, r25
    33f6:	09 f4       	brne	.+2      	; 0x33fa <usart_data_register_is_empty+0x28>
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	82 2f       	mov	r24, r18
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	08 95       	ret

00003406 <usart_rx_is_complete>:
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
    340a:	1f 92       	push	r1
    340c:	1f 92       	push	r1
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	9a 83       	std	Y+2, r25	; 0x02
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	fc 01       	movw	r30, r24
    341c:	81 81       	ldd	r24, Z+1	; 0x01
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	80 78       	andi	r24, 0x80	; 128
    3424:	99 27       	eor	r25, r25
    3426:	21 e0       	ldi	r18, 0x01	; 1
    3428:	89 2b       	or	r24, r25
    342a:	09 f4       	brne	.+2      	; 0x342e <usart_rx_is_complete+0x28>
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	82 2f       	mov	r24, r18
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	08 95       	ret

0000343a <sysclk_get_main_hz>:
    343a:	cf 93       	push	r28
    343c:	df 93       	push	r29
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	98 e4       	ldi	r25, 0x48	; 72
    3446:	a8 ee       	ldi	r26, 0xE8	; 232
    3448:	b1 e0       	ldi	r27, 0x01	; 1
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	08 95       	ret

00003454 <sysclk_get_per4_hz>:
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	1f 92       	push	r1
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	19 82       	std	Y+1, r1	; 0x01
    3460:	ec df       	rcall	.-40     	; 0x343a <sysclk_get_main_hz>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	29 81       	ldd	r18, Y+1	; 0x01
    3468:	22 2f       	mov	r18, r18
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <sysclk_get_per4_hz+0x22>
    346e:	b6 95       	lsr	r27
    3470:	a7 95       	ror	r26
    3472:	97 95       	ror	r25
    3474:	87 95       	ror	r24
    3476:	2a 95       	dec	r18
    3478:	d2 f7       	brpl	.-12     	; 0x346e <sysclk_get_per4_hz+0x1a>
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0f 90       	pop	r0
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	08 95       	ret

00003486 <sysclk_get_per2_hz>:
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	e2 df       	rcall	.-60     	; 0x3454 <sysclk_get_per4_hz>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	bc 01       	movw	r22, r24
    3496:	cd 01       	movw	r24, r26
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <sysclk_get_per_hz>:
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	ef df       	rcall	.-34     	; 0x3486 <sysclk_get_per2_hz>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	08 95       	ret

000034b6 <sysclk_enable_peripheral_clock>:
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	1f 92       	push	r1
    34bc:	1f 92       	push	r1
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ca:	89 2b       	or	r24, r25
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <sysclk_enable_peripheral_clock+0x1a>
    34ce:	85 c1       	rjmp	.+778    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	9a 81       	ldd	r25, Y+2	; 0x02
    34d4:	80 3c       	cpi	r24, 0xC0	; 192
    34d6:	91 05       	cpc	r25, r1
    34d8:	29 f4       	brne	.+10     	; 0x34e4 <sysclk_enable_peripheral_clock+0x2e>
    34da:	60 e1       	ldi	r22, 0x10	; 16
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    34e2:	7b c1       	rjmp	.+758    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	9a 81       	ldd	r25, Y+2	; 0x02
    34e8:	80 34       	cpi	r24, 0x40	; 64
    34ea:	94 40       	sbci	r25, 0x04	; 4
    34ec:	29 f4       	brne	.+10     	; 0x34f8 <sysclk_enable_peripheral_clock+0x42>
    34ee:	68 e0       	ldi	r22, 0x08	; 8
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    34f6:	71 c1       	rjmp	.+738    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	9a 81       	ldd	r25, Y+2	; 0x02
    34fc:	81 15       	cp	r24, r1
    34fe:	94 40       	sbci	r25, 0x04	; 4
    3500:	29 f4       	brne	.+10     	; 0x350c <sysclk_enable_peripheral_clock+0x56>
    3502:	64 e0       	ldi	r22, 0x04	; 4
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    350a:	67 c1       	rjmp	.+718    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	9a 81       	ldd	r25, Y+2	; 0x02
    3510:	80 38       	cpi	r24, 0x80	; 128
    3512:	91 40       	sbci	r25, 0x01	; 1
    3514:	29 f4       	brne	.+10     	; 0x3520 <sysclk_enable_peripheral_clock+0x6a>
    3516:	62 e0       	ldi	r22, 0x02	; 2
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    351e:	5d c1       	rjmp	.+698    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	81 15       	cp	r24, r1
    3526:	91 40       	sbci	r25, 0x01	; 1
    3528:	29 f4       	brne	.+10     	; 0x3534 <sysclk_enable_peripheral_clock+0x7e>
    352a:	61 e0       	ldi	r22, 0x01	; 1
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3532:	53 c1       	rjmp	.+678    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	9a 81       	ldd	r25, Y+2	; 0x02
    3538:	80 38       	cpi	r24, 0x80	; 128
    353a:	93 40       	sbci	r25, 0x03	; 3
    353c:	29 f4       	brne	.+10     	; 0x3548 <sysclk_enable_peripheral_clock+0x92>
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3546:	49 c1       	rjmp	.+658    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	80 39       	cpi	r24, 0x90	; 144
    354e:	93 40       	sbci	r25, 0x03	; 3
    3550:	29 f4       	brne	.+10     	; 0x355c <sysclk_enable_peripheral_clock+0xa6>
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    355a:	3f c1       	rjmp	.+638    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	81 15       	cp	r24, r1
    3562:	92 40       	sbci	r25, 0x02	; 2
    3564:	29 f4       	brne	.+10     	; 0x3570 <sysclk_enable_peripheral_clock+0xba>
    3566:	62 e0       	ldi	r22, 0x02	; 2
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    356e:	35 c1       	rjmp	.+618    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	80 34       	cpi	r24, 0x40	; 64
    3576:	92 40       	sbci	r25, 0x02	; 2
    3578:	29 f4       	brne	.+10     	; 0x3584 <sysclk_enable_peripheral_clock+0xce>
    357a:	62 e0       	ldi	r22, 0x02	; 2
    357c:	82 e0       	ldi	r24, 0x02	; 2
    357e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3582:	2b c1       	rjmp	.+598    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	9a 81       	ldd	r25, Y+2	; 0x02
    3588:	81 15       	cp	r24, r1
    358a:	93 40       	sbci	r25, 0x03	; 3
    358c:	29 f4       	brne	.+10     	; 0x3598 <sysclk_enable_peripheral_clock+0xe2>
    358e:	64 e0       	ldi	r22, 0x04	; 4
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3596:	21 c1       	rjmp	.+578    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	80 32       	cpi	r24, 0x20	; 32
    359e:	93 40       	sbci	r25, 0x03	; 3
    35a0:	29 f4       	brne	.+10     	; 0x35ac <sysclk_enable_peripheral_clock+0xf6>
    35a2:	64 e0       	ldi	r22, 0x04	; 4
    35a4:	82 e0       	ldi	r24, 0x02	; 2
    35a6:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    35aa:	17 c1       	rjmp	.+558    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	9a 81       	ldd	r25, Y+2	; 0x02
    35b0:	81 15       	cp	r24, r1
    35b2:	98 40       	sbci	r25, 0x08	; 8
    35b4:	29 f4       	brne	.+10     	; 0x35c0 <sysclk_enable_peripheral_clock+0x10a>
    35b6:	61 e0       	ldi	r22, 0x01	; 1
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    35be:	0d c1       	rjmp	.+538    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	81 15       	cp	r24, r1
    35c6:	99 40       	sbci	r25, 0x09	; 9
    35c8:	29 f4       	brne	.+10     	; 0x35d4 <sysclk_enable_peripheral_clock+0x11e>
    35ca:	61 e0       	ldi	r22, 0x01	; 1
    35cc:	84 e0       	ldi	r24, 0x04	; 4
    35ce:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    35d2:	03 c1       	rjmp	.+518    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	9a 81       	ldd	r25, Y+2	; 0x02
    35d8:	81 15       	cp	r24, r1
    35da:	9a 40       	sbci	r25, 0x0A	; 10
    35dc:	29 f4       	brne	.+10     	; 0x35e8 <sysclk_enable_peripheral_clock+0x132>
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	85 e0       	ldi	r24, 0x05	; 5
    35e2:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    35e6:	f9 c0       	rjmp	.+498    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	81 15       	cp	r24, r1
    35ee:	9b 40       	sbci	r25, 0x0B	; 11
    35f0:	29 f4       	brne	.+10     	; 0x35fc <sysclk_enable_peripheral_clock+0x146>
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	86 e0       	ldi	r24, 0x06	; 6
    35f6:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    35fa:	ef c0       	rjmp	.+478    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3600:	80 34       	cpi	r24, 0x40	; 64
    3602:	98 40       	sbci	r25, 0x08	; 8
    3604:	29 f4       	brne	.+10     	; 0x3610 <sysclk_enable_peripheral_clock+0x15a>
    3606:	62 e0       	ldi	r22, 0x02	; 2
    3608:	83 e0       	ldi	r24, 0x03	; 3
    360a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    360e:	e5 c0       	rjmp	.+458    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	9a 81       	ldd	r25, Y+2	; 0x02
    3614:	80 34       	cpi	r24, 0x40	; 64
    3616:	99 40       	sbci	r25, 0x09	; 9
    3618:	29 f4       	brne	.+10     	; 0x3624 <sysclk_enable_peripheral_clock+0x16e>
    361a:	62 e0       	ldi	r22, 0x02	; 2
    361c:	84 e0       	ldi	r24, 0x04	; 4
    361e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3622:	db c0       	rjmp	.+438    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	9a 81       	ldd	r25, Y+2	; 0x02
    3628:	80 34       	cpi	r24, 0x40	; 64
    362a:	9a 40       	sbci	r25, 0x0A	; 10
    362c:	29 f4       	brne	.+10     	; 0x3638 <sysclk_enable_peripheral_clock+0x182>
    362e:	62 e0       	ldi	r22, 0x02	; 2
    3630:	85 e0       	ldi	r24, 0x05	; 5
    3632:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3636:	d1 c0       	rjmp	.+418    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	9a 81       	ldd	r25, Y+2	; 0x02
    363c:	80 34       	cpi	r24, 0x40	; 64
    363e:	9b 40       	sbci	r25, 0x0B	; 11
    3640:	29 f4       	brne	.+10     	; 0x364c <sysclk_enable_peripheral_clock+0x196>
    3642:	62 e0       	ldi	r22, 0x02	; 2
    3644:	86 e0       	ldi	r24, 0x06	; 6
    3646:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    364a:	c7 c0       	rjmp	.+398    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	80 39       	cpi	r24, 0x90	; 144
    3652:	98 40       	sbci	r25, 0x08	; 8
    3654:	29 f4       	brne	.+10     	; 0x3660 <sysclk_enable_peripheral_clock+0x1aa>
    3656:	64 e0       	ldi	r22, 0x04	; 4
    3658:	83 e0       	ldi	r24, 0x03	; 3
    365a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    365e:	bd c0       	rjmp	.+378    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	80 39       	cpi	r24, 0x90	; 144
    3666:	99 40       	sbci	r25, 0x09	; 9
    3668:	29 f4       	brne	.+10     	; 0x3674 <sysclk_enable_peripheral_clock+0x1be>
    366a:	64 e0       	ldi	r22, 0x04	; 4
    366c:	84 e0       	ldi	r24, 0x04	; 4
    366e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3672:	b3 c0       	rjmp	.+358    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	9a 81       	ldd	r25, Y+2	; 0x02
    3678:	80 39       	cpi	r24, 0x90	; 144
    367a:	9a 40       	sbci	r25, 0x0A	; 10
    367c:	29 f4       	brne	.+10     	; 0x3688 <sysclk_enable_peripheral_clock+0x1d2>
    367e:	64 e0       	ldi	r22, 0x04	; 4
    3680:	85 e0       	ldi	r24, 0x05	; 5
    3682:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3686:	a9 c0       	rjmp	.+338    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	9a 81       	ldd	r25, Y+2	; 0x02
    368c:	80 39       	cpi	r24, 0x90	; 144
    368e:	9b 40       	sbci	r25, 0x0B	; 11
    3690:	29 f4       	brne	.+10     	; 0x369c <sysclk_enable_peripheral_clock+0x1e6>
    3692:	64 e0       	ldi	r22, 0x04	; 4
    3694:	86 e0       	ldi	r24, 0x06	; 6
    3696:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    369a:	9f c0       	rjmp	.+318    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	80 3c       	cpi	r24, 0xC0	; 192
    36a2:	98 40       	sbci	r25, 0x08	; 8
    36a4:	29 f4       	brne	.+10     	; 0x36b0 <sysclk_enable_peripheral_clock+0x1fa>
    36a6:	68 e0       	ldi	r22, 0x08	; 8
    36a8:	83 e0       	ldi	r24, 0x03	; 3
    36aa:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    36ae:	95 c0       	rjmp	.+298    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	9a 81       	ldd	r25, Y+2	; 0x02
    36b4:	80 3c       	cpi	r24, 0xC0	; 192
    36b6:	99 40       	sbci	r25, 0x09	; 9
    36b8:	29 f4       	brne	.+10     	; 0x36c4 <sysclk_enable_peripheral_clock+0x20e>
    36ba:	68 e0       	ldi	r22, 0x08	; 8
    36bc:	84 e0       	ldi	r24, 0x04	; 4
    36be:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    36c2:	8b c0       	rjmp	.+278    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	80 3c       	cpi	r24, 0xC0	; 192
    36ca:	9a 40       	sbci	r25, 0x0A	; 10
    36cc:	29 f4       	brne	.+10     	; 0x36d8 <sysclk_enable_peripheral_clock+0x222>
    36ce:	68 e0       	ldi	r22, 0x08	; 8
    36d0:	85 e0       	ldi	r24, 0x05	; 5
    36d2:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    36d6:	81 c0       	rjmp	.+258    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	80 3c       	cpi	r24, 0xC0	; 192
    36de:	9b 40       	sbci	r25, 0x0B	; 11
    36e0:	29 f4       	brne	.+10     	; 0x36ec <sysclk_enable_peripheral_clock+0x236>
    36e2:	68 e0       	ldi	r22, 0x08	; 8
    36e4:	86 e0       	ldi	r24, 0x06	; 6
    36e6:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    36ea:	77 c0       	rjmp	.+238    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	80 3a       	cpi	r24, 0xA0	; 160
    36f2:	98 40       	sbci	r25, 0x08	; 8
    36f4:	29 f4       	brne	.+10     	; 0x3700 <sysclk_enable_peripheral_clock+0x24a>
    36f6:	60 e1       	ldi	r22, 0x10	; 16
    36f8:	83 e0       	ldi	r24, 0x03	; 3
    36fa:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    36fe:	6d c0       	rjmp	.+218    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	80 3a       	cpi	r24, 0xA0	; 160
    3706:	99 40       	sbci	r25, 0x09	; 9
    3708:	29 f4       	brne	.+10     	; 0x3714 <sysclk_enable_peripheral_clock+0x25e>
    370a:	60 e1       	ldi	r22, 0x10	; 16
    370c:	84 e0       	ldi	r24, 0x04	; 4
    370e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3712:	63 c0       	rjmp	.+198    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	80 3a       	cpi	r24, 0xA0	; 160
    371a:	9a 40       	sbci	r25, 0x0A	; 10
    371c:	29 f4       	brne	.+10     	; 0x3728 <sysclk_enable_peripheral_clock+0x272>
    371e:	60 e1       	ldi	r22, 0x10	; 16
    3720:	85 e0       	ldi	r24, 0x05	; 5
    3722:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3726:	59 c0       	rjmp	.+178    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	80 3a       	cpi	r24, 0xA0	; 160
    372e:	9b 40       	sbci	r25, 0x0B	; 11
    3730:	29 f4       	brne	.+10     	; 0x373c <sysclk_enable_peripheral_clock+0x286>
    3732:	60 e1       	ldi	r22, 0x10	; 16
    3734:	86 e0       	ldi	r24, 0x06	; 6
    3736:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    373a:	4f c0       	rjmp	.+158    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	80 3b       	cpi	r24, 0xB0	; 176
    3742:	98 40       	sbci	r25, 0x08	; 8
    3744:	29 f4       	brne	.+10     	; 0x3750 <sysclk_enable_peripheral_clock+0x29a>
    3746:	60 e2       	ldi	r22, 0x20	; 32
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    374e:	45 c0       	rjmp	.+138    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	9a 81       	ldd	r25, Y+2	; 0x02
    3754:	80 3b       	cpi	r24, 0xB0	; 176
    3756:	99 40       	sbci	r25, 0x09	; 9
    3758:	29 f4       	brne	.+10     	; 0x3764 <sysclk_enable_peripheral_clock+0x2ae>
    375a:	60 e2       	ldi	r22, 0x20	; 32
    375c:	84 e0       	ldi	r24, 0x04	; 4
    375e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3762:	3b c0       	rjmp	.+118    	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	9a 81       	ldd	r25, Y+2	; 0x02
    3768:	80 3b       	cpi	r24, 0xB0	; 176
    376a:	9a 40       	sbci	r25, 0x0A	; 10
    376c:	29 f4       	brne	.+10     	; 0x3778 <sysclk_enable_peripheral_clock+0x2c2>
    376e:	60 e2       	ldi	r22, 0x20	; 32
    3770:	85 e0       	ldi	r24, 0x05	; 5
    3772:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3776:	31 c0       	rjmp	.+98     	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	9a 81       	ldd	r25, Y+2	; 0x02
    377c:	80 3b       	cpi	r24, 0xB0	; 176
    377e:	9b 40       	sbci	r25, 0x0B	; 11
    3780:	29 f4       	brne	.+10     	; 0x378c <sysclk_enable_peripheral_clock+0x2d6>
    3782:	60 e2       	ldi	r22, 0x20	; 32
    3784:	86 e0       	ldi	r24, 0x06	; 6
    3786:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    378a:	27 c0       	rjmp	.+78     	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	80 38       	cpi	r24, 0x80	; 128
    3792:	94 40       	sbci	r25, 0x04	; 4
    3794:	29 f4       	brne	.+10     	; 0x37a0 <sysclk_enable_peripheral_clock+0x2ea>
    3796:	60 e4       	ldi	r22, 0x40	; 64
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    379e:	1d c0       	rjmp	.+58     	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	80 39       	cpi	r24, 0x90	; 144
    37a6:	94 40       	sbci	r25, 0x04	; 4
    37a8:	29 f4       	brne	.+10     	; 0x37b4 <sysclk_enable_peripheral_clock+0x2fe>
    37aa:	60 e4       	ldi	r22, 0x40	; 64
    37ac:	84 e0       	ldi	r24, 0x04	; 4
    37ae:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    37b2:	13 c0       	rjmp	.+38     	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	80 3a       	cpi	r24, 0xA0	; 160
    37ba:	94 40       	sbci	r25, 0x04	; 4
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <sysclk_enable_peripheral_clock+0x312>
    37be:	60 e4       	ldi	r22, 0x40	; 64
    37c0:	85 e0       	ldi	r24, 0x05	; 5
    37c2:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    37c6:	09 c0       	rjmp	.+18     	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	80 3b       	cpi	r24, 0xB0	; 176
    37ce:	94 40       	sbci	r25, 0x04	; 4
    37d0:	21 f4       	brne	.+8      	; 0x37da <sysclk_enable_peripheral_clock+0x324>
    37d2:	60 e4       	ldi	r22, 0x40	; 64
    37d4:	86 e0       	ldi	r24, 0x06	; 6
    37d6:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    37da:	00 00       	nop
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	08 95       	ret

000037e6 <usart_init_rs232>:
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	25 97       	sbiw	r28, 0x05	; 5
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	8a 83       	std	Y+2, r24	; 0x02
    37fa:	9b 83       	std	Y+3, r25	; 0x03
    37fc:	6c 83       	std	Y+4, r22	; 0x04
    37fe:	7d 83       	std	Y+5, r23	; 0x05
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	9b 81       	ldd	r25, Y+3	; 0x03
    3804:	58 de       	rcall	.-848    	; 0x34b6 <sysclk_enable_peripheral_clock>
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	9b 81       	ldd	r25, Y+3	; 0x03
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	c6 dd       	rcall	.-1140   	; 0x339a <usart_set_mode>
    380e:	8c 81       	ldd	r24, Y+4	; 0x04
    3810:	9d 81       	ldd	r25, Y+5	; 0x05
    3812:	fc 01       	movw	r30, r24
    3814:	26 81       	ldd	r18, Z+6	; 0x06
    3816:	8c 81       	ldd	r24, Y+4	; 0x04
    3818:	9d 81       	ldd	r25, Y+5	; 0x05
    381a:	fc 01       	movw	r30, r24
    381c:	45 81       	ldd	r20, Z+5	; 0x05
    381e:	8c 81       	ldd	r24, Y+4	; 0x04
    3820:	9d 81       	ldd	r25, Y+5	; 0x05
    3822:	fc 01       	movw	r30, r24
    3824:	34 81       	ldd	r19, Z+4	; 0x04
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	63 2f       	mov	r22, r19
    382c:	7b dd       	rcall	.-1290   	; 0x3324 <usart_format_set>
    382e:	37 de       	rcall	.-914    	; 0x349e <sysclk_get_per_hz>
    3830:	9b 01       	movw	r18, r22
    3832:	ac 01       	movw	r20, r24
    3834:	8c 81       	ldd	r24, Y+4	; 0x04
    3836:	9d 81       	ldd	r25, Y+5	; 0x05
    3838:	fc 01       	movw	r30, r24
    383a:	80 81       	ld	r24, Z
    383c:	91 81       	ldd	r25, Z+1	; 0x01
    383e:	a2 81       	ldd	r26, Z+2	; 0x02
    3840:	b3 81       	ldd	r27, Z+3	; 0x03
    3842:	ea 81       	ldd	r30, Y+2	; 0x02
    3844:	fb 81       	ldd	r31, Y+3	; 0x03
    3846:	89 01       	movw	r16, r18
    3848:	9a 01       	movw	r18, r20
    384a:	ac 01       	movw	r20, r24
    384c:	bd 01       	movw	r22, r26
    384e:	cf 01       	movw	r24, r30
    3850:	48 d0       	rcall	.+144    	; 0x38e2 <usart_set_baudrate>
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	9b 81       	ldd	r25, Y+3	; 0x03
    3858:	88 dd       	rcall	.-1264   	; 0x336a <usart_tx_enable>
    385a:	8a 81       	ldd	r24, Y+2	; 0x02
    385c:	9b 81       	ldd	r25, Y+3	; 0x03
    385e:	4a dd       	rcall	.-1388   	; 0x32f4 <usart_rx_enable>
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	25 96       	adiw	r28, 0x05	; 5
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	08 95       	ret

00003872 <usart_putchar>:
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	00 d0       	rcall	.+0      	; 0x3878 <usart_putchar+0x6>
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	89 83       	std	Y+1, r24	; 0x01
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	6b 83       	std	Y+3, r22	; 0x03
    3882:	00 00       	nop
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
    3888:	a4 dd       	rcall	.-1208   	; 0x33d2 <usart_data_register_is_empty>
    388a:	98 2f       	mov	r25, r24
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	89 27       	eor	r24, r25
    3890:	88 23       	and	r24, r24
    3892:	c1 f7       	brne	.-16     	; 0x3884 <usart_putchar+0x12>
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	9a 81       	ldd	r25, Y+2	; 0x02
    3898:	2b 81       	ldd	r18, Y+3	; 0x03
    389a:	fc 01       	movw	r30, r24
    389c:	20 83       	st	Z, r18
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	23 96       	adiw	r28, 0x03	; 3
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	08 95       	ret

000038ae <usart_getchar>:
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	1f 92       	push	r1
    38b4:	1f 92       	push	r1
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	9a 83       	std	Y+2, r25	; 0x02
    38be:	00 00       	nop
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	9a 81       	ldd	r25, Y+2	; 0x02
    38c4:	a0 dd       	rcall	.-1216   	; 0x3406 <usart_rx_is_complete>
    38c6:	98 2f       	mov	r25, r24
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	89 27       	eor	r24, r25
    38cc:	88 23       	and	r24, r24
    38ce:	c1 f7       	brne	.-16     	; 0x38c0 <usart_getchar+0x12>
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	fc 01       	movw	r30, r24
    38d6:	80 81       	ld	r24, Z
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	08 95       	ret

000038e2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    38e2:	ef 92       	push	r14
    38e4:	ff 92       	push	r15
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	6f 97       	sbiw	r28, 0x1f	; 31
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	8e 8b       	std	Y+22, r24	; 0x16
    38fa:	9f 8b       	std	Y+23, r25	; 0x17
    38fc:	48 8f       	std	Y+24, r20	; 0x18
    38fe:	59 8f       	std	Y+25, r21	; 0x19
    3900:	6a 8f       	std	Y+26, r22	; 0x1a
    3902:	7b 8f       	std	Y+27, r23	; 0x1b
    3904:	0c 8f       	std	Y+28, r16	; 0x1c
    3906:	1d 8f       	std	Y+29, r17	; 0x1d
    3908:	2e 8f       	std	Y+30, r18	; 0x1e
    390a:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    390c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    390e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3910:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3912:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3914:	68 94       	set
    3916:	12 f8       	bld	r1, 2
    3918:	b6 95       	lsr	r27
    391a:	a7 95       	ror	r26
    391c:	97 95       	ror	r25
    391e:	87 95       	ror	r24
    3920:	16 94       	lsr	r1
    3922:	d1 f7       	brne	.-12     	; 0x3918 <usart_set_baudrate+0x36>
    3924:	8e 87       	std	Y+14, r24	; 0x0e
    3926:	9f 87       	std	Y+15, r25	; 0x0f
    3928:	a8 8b       	std	Y+16, r26	; 0x10
    392a:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    392c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    392e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3930:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3932:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3934:	07 2e       	mov	r0, r23
    3936:	76 e1       	ldi	r23, 0x16	; 22
    3938:	b6 95       	lsr	r27
    393a:	a7 95       	ror	r26
    393c:	97 95       	ror	r25
    393e:	87 95       	ror	r24
    3940:	7a 95       	dec	r23
    3942:	d1 f7       	brne	.-12     	; 0x3938 <usart_set_baudrate+0x56>
    3944:	70 2d       	mov	r23, r0
    3946:	8a 87       	std	Y+10, r24	; 0x0a
    3948:	9b 87       	std	Y+11, r25	; 0x0b
    394a:	ac 87       	std	Y+12, r26	; 0x0c
    394c:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    394e:	8e 89       	ldd	r24, Y+22	; 0x16
    3950:	9f 89       	ldd	r25, Y+23	; 0x17
    3952:	fc 01       	movw	r30, r24
    3954:	84 81       	ldd	r24, Z+4	; 0x04
    3956:	88 2f       	mov	r24, r24
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	84 70       	andi	r24, 0x04	; 4
    395c:	99 27       	eor	r25, r25
    395e:	89 2b       	or	r24, r25
    3960:	c1 f4       	brne	.+48     	; 0x3992 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    3962:	8e 85       	ldd	r24, Y+14	; 0x0e
    3964:	9f 85       	ldd	r25, Y+15	; 0x0f
    3966:	a8 89       	ldd	r26, Y+16	; 0x10
    3968:	b9 89       	ldd	r27, Y+17	; 0x11
    396a:	b6 95       	lsr	r27
    396c:	a7 95       	ror	r26
    396e:	97 95       	ror	r25
    3970:	87 95       	ror	r24
    3972:	8e 87       	std	Y+14, r24	; 0x0e
    3974:	9f 87       	std	Y+15, r25	; 0x0f
    3976:	a8 8b       	std	Y+16, r26	; 0x10
    3978:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    397a:	8a 85       	ldd	r24, Y+10	; 0x0a
    397c:	9b 85       	ldd	r25, Y+11	; 0x0b
    397e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3980:	bd 85       	ldd	r27, Y+13	; 0x0d
    3982:	b6 95       	lsr	r27
    3984:	a7 95       	ror	r26
    3986:	97 95       	ror	r25
    3988:	87 95       	ror	r24
    398a:	8a 87       	std	Y+10, r24	; 0x0a
    398c:	9b 87       	std	Y+11, r25	; 0x0b
    398e:	ac 87       	std	Y+12, r26	; 0x0c
    3990:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3992:	28 8d       	ldd	r18, Y+24	; 0x18
    3994:	39 8d       	ldd	r19, Y+25	; 0x19
    3996:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3998:	5b 8d       	ldd	r21, Y+27	; 0x1b
    399a:	8e 85       	ldd	r24, Y+14	; 0x0e
    399c:	9f 85       	ldd	r25, Y+15	; 0x0f
    399e:	a8 89       	ldd	r26, Y+16	; 0x10
    39a0:	b9 89       	ldd	r27, Y+17	; 0x11
    39a2:	82 17       	cp	r24, r18
    39a4:	93 07       	cpc	r25, r19
    39a6:	a4 07       	cpc	r26, r20
    39a8:	b5 07       	cpc	r27, r21
    39aa:	68 f0       	brcs	.+26     	; 0x39c6 <usart_set_baudrate+0xe4>
    39ac:	28 8d       	ldd	r18, Y+24	; 0x18
    39ae:	39 8d       	ldd	r19, Y+25	; 0x19
    39b0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    39b2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    39b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b8:	ac 85       	ldd	r26, Y+12	; 0x0c
    39ba:	bd 85       	ldd	r27, Y+13	; 0x0d
    39bc:	28 17       	cp	r18, r24
    39be:	39 07       	cpc	r19, r25
    39c0:	4a 07       	cpc	r20, r26
    39c2:	5b 07       	cpc	r21, r27
    39c4:	10 f4       	brcc	.+4      	; 0x39ca <usart_set_baudrate+0xe8>
		return false;
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	40 c1       	rjmp	.+640    	; 0x3c4a <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    39ca:	8e 89       	ldd	r24, Y+22	; 0x16
    39cc:	9f 89       	ldd	r25, Y+23	; 0x17
    39ce:	fc 01       	movw	r30, r24
    39d0:	84 81       	ldd	r24, Z+4	; 0x04
    39d2:	88 2f       	mov	r24, r24
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	84 70       	andi	r24, 0x04	; 4
    39d8:	99 27       	eor	r25, r25
    39da:	89 2b       	or	r24, r25
    39dc:	61 f4       	brne	.+24     	; 0x39f6 <usart_set_baudrate+0x114>
		baud *= 2;
    39de:	88 8d       	ldd	r24, Y+24	; 0x18
    39e0:	99 8d       	ldd	r25, Y+25	; 0x19
    39e2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    39e4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    39e6:	88 0f       	add	r24, r24
    39e8:	99 1f       	adc	r25, r25
    39ea:	aa 1f       	adc	r26, r26
    39ec:	bb 1f       	adc	r27, r27
    39ee:	88 8f       	std	Y+24, r24	; 0x18
    39f0:	99 8f       	std	Y+25, r25	; 0x19
    39f2:	aa 8f       	std	Y+26, r26	; 0x1a
    39f4:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    39f6:	8f ef       	ldi	r24, 0xFF	; 255
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a0 e0       	ldi	r26, 0x00	; 0
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	8e 83       	std	Y+6, r24	; 0x06
    3a00:	9f 83       	std	Y+7, r25	; 0x07
    3a02:	a8 87       	std	Y+8, r26	; 0x08
    3a04:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    3a06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a0a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3a0c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3a0e:	28 8d       	ldd	r18, Y+24	; 0x18
    3a10:	39 8d       	ldd	r19, Y+25	; 0x19
    3a12:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3a14:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    3a1e:	da 01       	movw	r26, r20
    3a20:	c9 01       	movw	r24, r18
    3a22:	8a 8b       	std	Y+18, r24	; 0x12
    3a24:	9b 8b       	std	Y+19, r25	; 0x13
    3a26:	ac 8b       	std	Y+20, r26	; 0x14
    3a28:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    3a2a:	89 ef       	ldi	r24, 0xF9	; 249
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	28 c0       	rjmp	.+80     	; 0x3a80 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    3a30:	2a 89       	ldd	r18, Y+18	; 0x12
    3a32:	3b 89       	ldd	r19, Y+19	; 0x13
    3a34:	4c 89       	ldd	r20, Y+20	; 0x14
    3a36:	5d 89       	ldd	r21, Y+21	; 0x15
    3a38:	8e 81       	ldd	r24, Y+6	; 0x06
    3a3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a3c:	a8 85       	ldd	r26, Y+8	; 0x08
    3a3e:	b9 85       	ldd	r27, Y+9	; 0x09
    3a40:	28 17       	cp	r18, r24
    3a42:	39 07       	cpc	r19, r25
    3a44:	4a 07       	cpc	r20, r26
    3a46:	5b 07       	cpc	r21, r27
    3a48:	f8 f0       	brcs	.+62     	; 0x3a88 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    3a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4e:	a8 85       	ldd	r26, Y+8	; 0x08
    3a50:	b9 85       	ldd	r27, Y+9	; 0x09
    3a52:	88 0f       	add	r24, r24
    3a54:	99 1f       	adc	r25, r25
    3a56:	aa 1f       	adc	r26, r26
    3a58:	bb 1f       	adc	r27, r27
    3a5a:	8e 83       	std	Y+6, r24	; 0x06
    3a5c:	9f 83       	std	Y+7, r25	; 0x07
    3a5e:	a8 87       	std	Y+8, r26	; 0x08
    3a60:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	8d 3f       	cpi	r24, 0xFD	; 253
    3a66:	4c f4       	brge	.+18     	; 0x3a7a <usart_set_baudrate+0x198>
			limit |= 1;
    3a68:	8e 81       	ldd	r24, Y+6	; 0x06
    3a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a6c:	a8 85       	ldd	r26, Y+8	; 0x08
    3a6e:	b9 85       	ldd	r27, Y+9	; 0x09
    3a70:	81 60       	ori	r24, 0x01	; 1
    3a72:	8e 83       	std	Y+6, r24	; 0x06
    3a74:	9f 83       	std	Y+7, r25	; 0x07
    3a76:	a8 87       	std	Y+8, r26	; 0x08
    3a78:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	8f 5f       	subi	r24, 0xFF	; 255
    3a7e:	89 83       	std	Y+1, r24	; 0x01
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	87 30       	cpi	r24, 0x07	; 7
    3a84:	ac f2       	brlt	.-86     	; 0x3a30 <usart_set_baudrate+0x14e>
    3a86:	01 c0       	rjmp	.+2      	; 0x3a8a <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    3a88:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	88 23       	and	r24, r24
    3a8e:	0c f0       	brlt	.+2      	; 0x3a92 <usart_set_baudrate+0x1b0>
    3a90:	8a c0       	rjmp	.+276    	; 0x3ba6 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3a92:	88 8d       	ldd	r24, Y+24	; 0x18
    3a94:	99 8d       	ldd	r25, Y+25	; 0x19
    3a96:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a98:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	aa 1f       	adc	r26, r26
    3aa0:	bb 1f       	adc	r27, r27
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	aa 1f       	adc	r26, r26
    3aa8:	bb 1f       	adc	r27, r27
    3aaa:	88 0f       	add	r24, r24
    3aac:	99 1f       	adc	r25, r25
    3aae:	aa 1f       	adc	r26, r26
    3ab0:	bb 1f       	adc	r27, r27
    3ab2:	9c 01       	movw	r18, r24
    3ab4:	ad 01       	movw	r20, r26
    3ab6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ab8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3aba:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3abc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3abe:	82 1b       	sub	r24, r18
    3ac0:	93 0b       	sbc	r25, r19
    3ac2:	a4 0b       	sbc	r26, r20
    3ac4:	b5 0b       	sbc	r27, r21
    3ac6:	8c 8f       	std	Y+28, r24	; 0x1c
    3ac8:	9d 8f       	std	Y+29, r25	; 0x1d
    3aca:	ae 8f       	std	Y+30, r26	; 0x1e
    3acc:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	8e 3f       	cpi	r24, 0xFE	; 254
    3ad2:	94 f5       	brge	.+100    	; 0x3b38 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	08 2e       	mov	r0, r24
    3ad8:	00 0c       	add	r0, r0
    3ada:	99 0b       	sbc	r25, r25
    3adc:	2d ef       	ldi	r18, 0xFD	; 253
    3ade:	3f ef       	ldi	r19, 0xFF	; 255
    3ae0:	28 1b       	sub	r18, r24
    3ae2:	39 0b       	sbc	r19, r25
    3ae4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ae6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ae8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3aea:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3aec:	7c 01       	movw	r14, r24
    3aee:	8d 01       	movw	r16, r26
    3af0:	04 c0       	rjmp	.+8      	; 0x3afa <usart_set_baudrate+0x218>
    3af2:	ee 0c       	add	r14, r14
    3af4:	ff 1c       	adc	r15, r15
    3af6:	00 1f       	adc	r16, r16
    3af8:	11 1f       	adc	r17, r17
    3afa:	2a 95       	dec	r18
    3afc:	d2 f7       	brpl	.-12     	; 0x3af2 <usart_set_baudrate+0x210>
    3afe:	a8 01       	movw	r20, r16
    3b00:	97 01       	movw	r18, r14
    3b02:	88 8d       	ldd	r24, Y+24	; 0x18
    3b04:	99 8d       	ldd	r25, Y+25	; 0x19
    3b06:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b08:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b0a:	b6 95       	lsr	r27
    3b0c:	a7 95       	ror	r26
    3b0e:	97 95       	ror	r25
    3b10:	87 95       	ror	r24
    3b12:	82 0f       	add	r24, r18
    3b14:	93 1f       	adc	r25, r19
    3b16:	a4 1f       	adc	r26, r20
    3b18:	b5 1f       	adc	r27, r21
    3b1a:	28 8d       	ldd	r18, Y+24	; 0x18
    3b1c:	39 8d       	ldd	r19, Y+25	; 0x19
    3b1e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3b20:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    3b2a:	da 01       	movw	r26, r20
    3b2c:	c9 01       	movw	r24, r18
    3b2e:	8a 83       	std	Y+2, r24	; 0x02
    3b30:	9b 83       	std	Y+3, r25	; 0x03
    3b32:	ac 83       	std	Y+4, r26	; 0x04
    3b34:	bd 83       	std	Y+5, r27	; 0x05
    3b36:	70 c0       	rjmp	.+224    	; 0x3c18 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	08 2e       	mov	r0, r24
    3b3c:	00 0c       	add	r0, r0
    3b3e:	99 0b       	sbc	r25, r25
    3b40:	9c 01       	movw	r18, r24
    3b42:	2d 5f       	subi	r18, 0xFD	; 253
    3b44:	3f 4f       	sbci	r19, 0xFF	; 255
    3b46:	88 8d       	ldd	r24, Y+24	; 0x18
    3b48:	99 8d       	ldd	r25, Y+25	; 0x19
    3b4a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b4c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b4e:	04 c0       	rjmp	.+8      	; 0x3b58 <usart_set_baudrate+0x276>
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	aa 1f       	adc	r26, r26
    3b56:	bb 1f       	adc	r27, r27
    3b58:	2a 95       	dec	r18
    3b5a:	d2 f7       	brpl	.-12     	; 0x3b50 <usart_set_baudrate+0x26e>
    3b5c:	88 8f       	std	Y+24, r24	; 0x18
    3b5e:	99 8f       	std	Y+25, r25	; 0x19
    3b60:	aa 8f       	std	Y+26, r26	; 0x1a
    3b62:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    3b64:	88 8d       	ldd	r24, Y+24	; 0x18
    3b66:	99 8d       	ldd	r25, Y+25	; 0x19
    3b68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b6c:	9c 01       	movw	r18, r24
    3b6e:	ad 01       	movw	r20, r26
    3b70:	56 95       	lsr	r21
    3b72:	47 95       	ror	r20
    3b74:	37 95       	ror	r19
    3b76:	27 95       	ror	r18
    3b78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b7c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3b7e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3b80:	82 0f       	add	r24, r18
    3b82:	93 1f       	adc	r25, r19
    3b84:	a4 1f       	adc	r26, r20
    3b86:	b5 1f       	adc	r27, r21
    3b88:	28 8d       	ldd	r18, Y+24	; 0x18
    3b8a:	39 8d       	ldd	r19, Y+25	; 0x19
    3b8c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3b8e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3b90:	bc 01       	movw	r22, r24
    3b92:	cd 01       	movw	r24, r26
    3b94:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    3b98:	da 01       	movw	r26, r20
    3b9a:	c9 01       	movw	r24, r18
    3b9c:	8a 83       	std	Y+2, r24	; 0x02
    3b9e:	9b 83       	std	Y+3, r25	; 0x03
    3ba0:	ac 83       	std	Y+4, r26	; 0x04
    3ba2:	bd 83       	std	Y+5, r27	; 0x05
    3ba4:	39 c0       	rjmp	.+114    	; 0x3c18 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	08 2e       	mov	r0, r24
    3baa:	00 0c       	add	r0, r0
    3bac:	99 0b       	sbc	r25, r25
    3bae:	9c 01       	movw	r18, r24
    3bb0:	2d 5f       	subi	r18, 0xFD	; 253
    3bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb4:	88 8d       	ldd	r24, Y+24	; 0x18
    3bb6:	99 8d       	ldd	r25, Y+25	; 0x19
    3bb8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3bba:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3bbc:	04 c0       	rjmp	.+8      	; 0x3bc6 <usart_set_baudrate+0x2e4>
    3bbe:	88 0f       	add	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	aa 1f       	adc	r26, r26
    3bc4:	bb 1f       	adc	r27, r27
    3bc6:	2a 95       	dec	r18
    3bc8:	d2 f7       	brpl	.-12     	; 0x3bbe <usart_set_baudrate+0x2dc>
    3bca:	88 8f       	std	Y+24, r24	; 0x18
    3bcc:	99 8f       	std	Y+25, r25	; 0x19
    3bce:	aa 8f       	std	Y+26, r26	; 0x1a
    3bd0:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    3bd2:	88 8d       	ldd	r24, Y+24	; 0x18
    3bd4:	99 8d       	ldd	r25, Y+25	; 0x19
    3bd6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3bd8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3bda:	9c 01       	movw	r18, r24
    3bdc:	ad 01       	movw	r20, r26
    3bde:	56 95       	lsr	r21
    3be0:	47 95       	ror	r20
    3be2:	37 95       	ror	r19
    3be4:	27 95       	ror	r18
    3be6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3be8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bea:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3bec:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3bee:	82 0f       	add	r24, r18
    3bf0:	93 1f       	adc	r25, r19
    3bf2:	a4 1f       	adc	r26, r20
    3bf4:	b5 1f       	adc	r27, r21
    3bf6:	28 8d       	ldd	r18, Y+24	; 0x18
    3bf8:	39 8d       	ldd	r19, Y+25	; 0x19
    3bfa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3bfc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3bfe:	bc 01       	movw	r22, r24
    3c00:	cd 01       	movw	r24, r26
    3c02:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    3c06:	da 01       	movw	r26, r20
    3c08:	c9 01       	movw	r24, r18
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	a1 09       	sbc	r26, r1
    3c0e:	b1 09       	sbc	r27, r1
    3c10:	8a 83       	std	Y+2, r24	; 0x02
    3c12:	9b 83       	std	Y+3, r25	; 0x03
    3c14:	ac 83       	std	Y+4, r26	; 0x04
    3c16:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1c:	ac 81       	ldd	r26, Y+4	; 0x04
    3c1e:	bd 81       	ldd	r27, Y+5	; 0x05
    3c20:	89 2f       	mov	r24, r25
    3c22:	9a 2f       	mov	r25, r26
    3c24:	ab 2f       	mov	r26, r27
    3c26:	bb 27       	eor	r27, r27
    3c28:	98 2f       	mov	r25, r24
    3c2a:	9f 70       	andi	r25, 0x0F	; 15
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	82 95       	swap	r24
    3c30:	80 7f       	andi	r24, 0xF0	; 240
    3c32:	29 2f       	mov	r18, r25
    3c34:	28 2b       	or	r18, r24
    3c36:	8e 89       	ldd	r24, Y+22	; 0x16
    3c38:	9f 89       	ldd	r25, Y+23	; 0x17
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3c3e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c40:	8e 89       	ldd	r24, Y+22	; 0x16
    3c42:	9f 89       	ldd	r25, Y+23	; 0x17
    3c44:	fc 01       	movw	r30, r24
    3c46:	26 83       	std	Z+6, r18	; 0x06

	return true;
    3c48:	81 e0       	ldi	r24, 0x01	; 1
}
    3c4a:	6f 96       	adiw	r28, 0x1f	; 31
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	ff 90       	pop	r15
    3c5a:	ef 90       	pop	r14
    3c5c:	08 95       	ret

00003c5e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <ioport_configure_port_pin+0x6>
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <ioport_configure_port_pin+0x8>
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
    3c6c:	9b 83       	std	Y+3, r25	; 0x03
    3c6e:	6c 83       	std	Y+4, r22	; 0x04
    3c70:	4d 83       	std	Y+5, r20	; 0x05
    3c72:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3c74:	19 82       	std	Y+1, r1	; 0x01
    3c76:	20 c0       	rjmp	.+64     	; 0x3cb8 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    3c78:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	29 81       	ldd	r18, Y+1	; 0x01
    3c80:	22 2f       	mov	r18, r18
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <ioport_configure_port_pin+0x2c>
    3c86:	95 95       	asr	r25
    3c88:	87 95       	ror	r24
    3c8a:	2a 95       	dec	r18
    3c8c:	e2 f7       	brpl	.-8      	; 0x3c86 <ioport_configure_port_pin+0x28>
    3c8e:	81 70       	andi	r24, 0x01	; 1
    3c90:	99 27       	eor	r25, r25
    3c92:	89 2b       	or	r24, r25
    3c94:	71 f0       	breq	.+28     	; 0x3cb2 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	88 2f       	mov	r24, r24
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	40 96       	adiw	r24, 0x10	; 16
    3c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    3ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ca2:	82 0f       	add	r24, r18
    3ca4:	93 1f       	adc	r25, r19
    3ca6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ca8:	3e 81       	ldd	r19, Y+6	; 0x06
    3caa:	23 2f       	mov	r18, r19
    3cac:	33 27       	eor	r19, r19
    3cae:	fc 01       	movw	r30, r24
    3cb0:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	8f 5f       	subi	r24, 0xFF	; 255
    3cb6:	89 83       	std	Y+1, r24	; 0x01
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	88 30       	cpi	r24, 0x08	; 8
    3cbc:	e8 f2       	brcs	.-70     	; 0x3c78 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc2:	81 70       	andi	r24, 0x01	; 1
    3cc4:	99 27       	eor	r25, r25
    3cc6:	89 2b       	or	r24, r25
    3cc8:	d1 f0       	breq	.+52     	; 0x3cfe <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    3cca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cce:	82 70       	andi	r24, 0x02	; 2
    3cd0:	99 27       	eor	r25, r25
    3cd2:	89 2b       	or	r24, r25
    3cd4:	39 f0       	breq	.+14     	; 0x3ce4 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    3cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cda:	05 96       	adiw	r24, 0x05	; 5
    3cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    3cde:	fc 01       	movw	r30, r24
    3ce0:	20 83       	st	Z, r18
    3ce2:	06 c0       	rjmp	.+12     	; 0x3cf0 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce8:	06 96       	adiw	r24, 0x06	; 6
    3cea:	2c 81       	ldd	r18, Y+4	; 0x04
    3cec:	fc 01       	movw	r30, r24
    3cee:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf4:	01 96       	adiw	r24, 0x01	; 1
    3cf6:	2c 81       	ldd	r18, Y+4	; 0x04
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    3cfc:	06 c0       	rjmp	.+12     	; 0x3d0a <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	9b 81       	ldd	r25, Y+3	; 0x03
    3d02:	02 96       	adiw	r24, 0x02	; 2
    3d04:	2c 81       	ldd	r18, Y+4	; 0x04
    3d06:	fc 01       	movw	r30, r24
    3d08:	20 83       	st	Z, r18
	}
}
    3d0a:	00 00       	nop
    3d0c:	26 96       	adiw	r28, 0x06	; 6
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	08 95       	ret

00003d18 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	27 97       	sbiw	r28, 0x07	; 7
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	8d 83       	std	Y+5, r24	; 0x05
    3d28:	6e 83       	std	Y+6, r22	; 0x06
    3d2a:	7f 83       	std	Y+7, r23	; 0x07
    3d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2e:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3d30:	89 81       	ldd	r24, Y+1	; 0x01
    3d32:	88 2f       	mov	r24, r24
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	9c 01       	movw	r18, r24
    3d38:	27 70       	andi	r18, 0x07	; 7
    3d3a:	33 27       	eor	r19, r19
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <ioport_configure_pin+0x2e>
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	2a 95       	dec	r18
    3d48:	e2 f7       	brpl	.-8      	; 0x3d42 <ioport_configure_pin+0x2a>
    3d4a:	68 2f       	mov	r22, r24
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	8a 83       	std	Y+2, r24	; 0x02
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	86 95       	lsr	r24
    3d58:	86 95       	lsr	r24
    3d5a:	86 95       	lsr	r24
    3d5c:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    3d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	82 95       	swap	r24
    3d6a:	92 95       	swap	r25
    3d6c:	90 7f       	andi	r25, 0xF0	; 240
    3d6e:	98 27       	eor	r25, r24
    3d70:	80 7f       	andi	r24, 0xF0	; 240
    3d72:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    3d74:	9a 5f       	subi	r25, 0xFA	; 250
    3d76:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    3d78:	8e 81       	ldd	r24, Y+6	; 0x06
    3d7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	c9 01       	movw	r24, r18
    3d80:	6e df       	rcall	.-292    	; 0x3c5e <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    3d82:	00 00       	nop
    3d84:	27 96       	adiw	r28, 0x07	; 7
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	df 91       	pop	r29
    3d8c:	cf 91       	pop	r28
    3d8e:	08 95       	ret

00003d90 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    3d90:	cf 93       	push	r28
    3d92:	df 93       	push	r29
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    3d98:	63 e0       	ldi	r22, 0x03	; 3
    3d9a:	70 e0       	ldi	r23, 0x00	; 0
    3d9c:	83 e7       	ldi	r24, 0x73	; 115
    3d9e:	bc df       	rcall	.-136    	; 0x3d18 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	78 e1       	ldi	r23, 0x18	; 24
    3da4:	82 e7       	ldi	r24, 0x72	; 114
    3da6:	b8 df       	rcall	.-144    	; 0x3d18 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    3da8:	00 00       	nop
    3daa:	df 91       	pop	r29
    3dac:	cf 91       	pop	r28
    3dae:	08 95       	ret

00003db0 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	1f 92       	push	r1
    3db6:	1f 92       	push	r1
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	89 83       	std	Y+1, r24	; 0x01
    3dbe:	9a 83       	std	Y+2, r25	; 0x02
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc4:	89 2b       	or	r24, r25
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <sysclk_enable_peripheral_clock+0x1a>
    3dc8:	85 c1       	rjmp	.+778    	; 0x40d4 <__stack+0xd5>
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	80 3c       	cpi	r24, 0xC0	; 192
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	29 f4       	brne	.+10     	; 0x3dde <sysclk_enable_peripheral_clock+0x2e>
    3dd4:	60 e1       	ldi	r22, 0x10	; 16
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3ddc:	7b c1       	rjmp	.+758    	; 0x40d4 <__stack+0xd5>
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	80 34       	cpi	r24, 0x40	; 64
    3de4:	94 40       	sbci	r25, 0x04	; 4
    3de6:	29 f4       	brne	.+10     	; 0x3df2 <sysclk_enable_peripheral_clock+0x42>
    3de8:	68 e0       	ldi	r22, 0x08	; 8
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3df0:	71 c1       	rjmp	.+738    	; 0x40d4 <__stack+0xd5>
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	9a 81       	ldd	r25, Y+2	; 0x02
    3df6:	81 15       	cp	r24, r1
    3df8:	94 40       	sbci	r25, 0x04	; 4
    3dfa:	29 f4       	brne	.+10     	; 0x3e06 <sysclk_enable_peripheral_clock+0x56>
    3dfc:	64 e0       	ldi	r22, 0x04	; 4
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e04:	67 c1       	rjmp	.+718    	; 0x40d4 <__stack+0xd5>
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0a:	80 38       	cpi	r24, 0x80	; 128
    3e0c:	91 40       	sbci	r25, 0x01	; 1
    3e0e:	29 f4       	brne	.+10     	; 0x3e1a <sysclk_enable_peripheral_clock+0x6a>
    3e10:	62 e0       	ldi	r22, 0x02	; 2
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e18:	5d c1       	rjmp	.+698    	; 0x40d4 <__stack+0xd5>
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1e:	81 15       	cp	r24, r1
    3e20:	91 40       	sbci	r25, 0x01	; 1
    3e22:	29 f4       	brne	.+10     	; 0x3e2e <sysclk_enable_peripheral_clock+0x7e>
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e2c:	53 c1       	rjmp	.+678    	; 0x40d4 <__stack+0xd5>
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	9a 81       	ldd	r25, Y+2	; 0x02
    3e32:	80 38       	cpi	r24, 0x80	; 128
    3e34:	93 40       	sbci	r25, 0x03	; 3
    3e36:	29 f4       	brne	.+10     	; 0x3e42 <sysclk_enable_peripheral_clock+0x92>
    3e38:	61 e0       	ldi	r22, 0x01	; 1
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e40:	49 c1       	rjmp	.+658    	; 0x40d4 <__stack+0xd5>
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	80 39       	cpi	r24, 0x90	; 144
    3e48:	93 40       	sbci	r25, 0x03	; 3
    3e4a:	29 f4       	brne	.+10     	; 0x3e56 <sysclk_enable_peripheral_clock+0xa6>
    3e4c:	61 e0       	ldi	r22, 0x01	; 1
    3e4e:	82 e0       	ldi	r24, 0x02	; 2
    3e50:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e54:	3f c1       	rjmp	.+638    	; 0x40d4 <__stack+0xd5>
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5a:	81 15       	cp	r24, r1
    3e5c:	92 40       	sbci	r25, 0x02	; 2
    3e5e:	29 f4       	brne	.+10     	; 0x3e6a <sysclk_enable_peripheral_clock+0xba>
    3e60:	62 e0       	ldi	r22, 0x02	; 2
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e68:	35 c1       	rjmp	.+618    	; 0x40d4 <__stack+0xd5>
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6e:	80 34       	cpi	r24, 0x40	; 64
    3e70:	92 40       	sbci	r25, 0x02	; 2
    3e72:	29 f4       	brne	.+10     	; 0x3e7e <sysclk_enable_peripheral_clock+0xce>
    3e74:	62 e0       	ldi	r22, 0x02	; 2
    3e76:	82 e0       	ldi	r24, 0x02	; 2
    3e78:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e7c:	2b c1       	rjmp	.+598    	; 0x40d4 <__stack+0xd5>
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	9a 81       	ldd	r25, Y+2	; 0x02
    3e82:	81 15       	cp	r24, r1
    3e84:	93 40       	sbci	r25, 0x03	; 3
    3e86:	29 f4       	brne	.+10     	; 0x3e92 <sysclk_enable_peripheral_clock+0xe2>
    3e88:	64 e0       	ldi	r22, 0x04	; 4
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3e90:	21 c1       	rjmp	.+578    	; 0x40d4 <__stack+0xd5>
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	9a 81       	ldd	r25, Y+2	; 0x02
    3e96:	80 32       	cpi	r24, 0x20	; 32
    3e98:	93 40       	sbci	r25, 0x03	; 3
    3e9a:	29 f4       	brne	.+10     	; 0x3ea6 <sysclk_enable_peripheral_clock+0xf6>
    3e9c:	64 e0       	ldi	r22, 0x04	; 4
    3e9e:	82 e0       	ldi	r24, 0x02	; 2
    3ea0:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3ea4:	17 c1       	rjmp	.+558    	; 0x40d4 <__stack+0xd5>
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eaa:	81 15       	cp	r24, r1
    3eac:	98 40       	sbci	r25, 0x08	; 8
    3eae:	29 f4       	brne	.+10     	; 0x3eba <sysclk_enable_peripheral_clock+0x10a>
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	83 e0       	ldi	r24, 0x03	; 3
    3eb4:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3eb8:	0d c1       	rjmp	.+538    	; 0x40d4 <__stack+0xd5>
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebe:	81 15       	cp	r24, r1
    3ec0:	99 40       	sbci	r25, 0x09	; 9
    3ec2:	29 f4       	brne	.+10     	; 0x3ece <sysclk_enable_peripheral_clock+0x11e>
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	84 e0       	ldi	r24, 0x04	; 4
    3ec8:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3ecc:	03 c1       	rjmp	.+518    	; 0x40d4 <__stack+0xd5>
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	81 15       	cp	r24, r1
    3ed4:	9a 40       	sbci	r25, 0x0A	; 10
    3ed6:	29 f4       	brne	.+10     	; 0x3ee2 <sysclk_enable_peripheral_clock+0x132>
    3ed8:	61 e0       	ldi	r22, 0x01	; 1
    3eda:	85 e0       	ldi	r24, 0x05	; 5
    3edc:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3ee0:	f9 c0       	rjmp	.+498    	; 0x40d4 <__stack+0xd5>
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee6:	81 15       	cp	r24, r1
    3ee8:	9b 40       	sbci	r25, 0x0B	; 11
    3eea:	29 f4       	brne	.+10     	; 0x3ef6 <sysclk_enable_peripheral_clock+0x146>
    3eec:	61 e0       	ldi	r22, 0x01	; 1
    3eee:	86 e0       	ldi	r24, 0x06	; 6
    3ef0:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3ef4:	ef c0       	rjmp	.+478    	; 0x40d4 <__stack+0xd5>
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    3efa:	80 34       	cpi	r24, 0x40	; 64
    3efc:	98 40       	sbci	r25, 0x08	; 8
    3efe:	29 f4       	brne	.+10     	; 0x3f0a <sysclk_enable_peripheral_clock+0x15a>
    3f00:	62 e0       	ldi	r22, 0x02	; 2
    3f02:	83 e0       	ldi	r24, 0x03	; 3
    3f04:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f08:	e5 c0       	rjmp	.+458    	; 0x40d4 <__stack+0xd5>
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0e:	80 34       	cpi	r24, 0x40	; 64
    3f10:	99 40       	sbci	r25, 0x09	; 9
    3f12:	29 f4       	brne	.+10     	; 0x3f1e <sysclk_enable_peripheral_clock+0x16e>
    3f14:	62 e0       	ldi	r22, 0x02	; 2
    3f16:	84 e0       	ldi	r24, 0x04	; 4
    3f18:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f1c:	db c0       	rjmp	.+438    	; 0x40d4 <__stack+0xd5>
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	80 34       	cpi	r24, 0x40	; 64
    3f24:	9a 40       	sbci	r25, 0x0A	; 10
    3f26:	29 f4       	brne	.+10     	; 0x3f32 <sysclk_enable_peripheral_clock+0x182>
    3f28:	62 e0       	ldi	r22, 0x02	; 2
    3f2a:	85 e0       	ldi	r24, 0x05	; 5
    3f2c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f30:	d1 c0       	rjmp	.+418    	; 0x40d4 <__stack+0xd5>
    3f32:	89 81       	ldd	r24, Y+1	; 0x01
    3f34:	9a 81       	ldd	r25, Y+2	; 0x02
    3f36:	80 34       	cpi	r24, 0x40	; 64
    3f38:	9b 40       	sbci	r25, 0x0B	; 11
    3f3a:	29 f4       	brne	.+10     	; 0x3f46 <sysclk_enable_peripheral_clock+0x196>
    3f3c:	62 e0       	ldi	r22, 0x02	; 2
    3f3e:	86 e0       	ldi	r24, 0x06	; 6
    3f40:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f44:	c7 c0       	rjmp	.+398    	; 0x40d4 <__stack+0xd5>
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	80 39       	cpi	r24, 0x90	; 144
    3f4c:	98 40       	sbci	r25, 0x08	; 8
    3f4e:	29 f4       	brne	.+10     	; 0x3f5a <sysclk_enable_peripheral_clock+0x1aa>
    3f50:	64 e0       	ldi	r22, 0x04	; 4
    3f52:	83 e0       	ldi	r24, 0x03	; 3
    3f54:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f58:	bd c0       	rjmp	.+378    	; 0x40d4 <__stack+0xd5>
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5e:	80 39       	cpi	r24, 0x90	; 144
    3f60:	99 40       	sbci	r25, 0x09	; 9
    3f62:	29 f4       	brne	.+10     	; 0x3f6e <sysclk_enable_peripheral_clock+0x1be>
    3f64:	64 e0       	ldi	r22, 0x04	; 4
    3f66:	84 e0       	ldi	r24, 0x04	; 4
    3f68:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f6c:	b3 c0       	rjmp	.+358    	; 0x40d4 <__stack+0xd5>
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	9a 81       	ldd	r25, Y+2	; 0x02
    3f72:	80 39       	cpi	r24, 0x90	; 144
    3f74:	9a 40       	sbci	r25, 0x0A	; 10
    3f76:	29 f4       	brne	.+10     	; 0x3f82 <sysclk_enable_peripheral_clock+0x1d2>
    3f78:	64 e0       	ldi	r22, 0x04	; 4
    3f7a:	85 e0       	ldi	r24, 0x05	; 5
    3f7c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f80:	a9 c0       	rjmp	.+338    	; 0x40d4 <__stack+0xd5>
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	9a 81       	ldd	r25, Y+2	; 0x02
    3f86:	80 39       	cpi	r24, 0x90	; 144
    3f88:	9b 40       	sbci	r25, 0x0B	; 11
    3f8a:	29 f4       	brne	.+10     	; 0x3f96 <sysclk_enable_peripheral_clock+0x1e6>
    3f8c:	64 e0       	ldi	r22, 0x04	; 4
    3f8e:	86 e0       	ldi	r24, 0x06	; 6
    3f90:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3f94:	9f c0       	rjmp	.+318    	; 0x40d4 <__stack+0xd5>
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9a:	80 3c       	cpi	r24, 0xC0	; 192
    3f9c:	98 40       	sbci	r25, 0x08	; 8
    3f9e:	29 f4       	brne	.+10     	; 0x3faa <sysclk_enable_peripheral_clock+0x1fa>
    3fa0:	68 e0       	ldi	r22, 0x08	; 8
    3fa2:	83 e0       	ldi	r24, 0x03	; 3
    3fa4:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3fa8:	95 c0       	rjmp	.+298    	; 0x40d4 <__stack+0xd5>
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	9a 81       	ldd	r25, Y+2	; 0x02
    3fae:	80 3c       	cpi	r24, 0xC0	; 192
    3fb0:	99 40       	sbci	r25, 0x09	; 9
    3fb2:	29 f4       	brne	.+10     	; 0x3fbe <sysclk_enable_peripheral_clock+0x20e>
    3fb4:	68 e0       	ldi	r22, 0x08	; 8
    3fb6:	84 e0       	ldi	r24, 0x04	; 4
    3fb8:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3fbc:	8b c0       	rjmp	.+278    	; 0x40d4 <__stack+0xd5>
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	80 3c       	cpi	r24, 0xC0	; 192
    3fc4:	9a 40       	sbci	r25, 0x0A	; 10
    3fc6:	29 f4       	brne	.+10     	; 0x3fd2 <sysclk_enable_peripheral_clock+0x222>
    3fc8:	68 e0       	ldi	r22, 0x08	; 8
    3fca:	85 e0       	ldi	r24, 0x05	; 5
    3fcc:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3fd0:	81 c0       	rjmp	.+258    	; 0x40d4 <__stack+0xd5>
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd6:	80 3c       	cpi	r24, 0xC0	; 192
    3fd8:	9b 40       	sbci	r25, 0x0B	; 11
    3fda:	29 f4       	brne	.+10     	; 0x3fe6 <sysclk_enable_peripheral_clock+0x236>
    3fdc:	68 e0       	ldi	r22, 0x08	; 8
    3fde:	86 e0       	ldi	r24, 0x06	; 6
    3fe0:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3fe4:	77 c0       	rjmp	.+238    	; 0x40d4 <__stack+0xd5>
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	80 3a       	cpi	r24, 0xA0	; 160
    3fec:	98 40       	sbci	r25, 0x08	; 8
    3fee:	29 f4       	brne	.+10     	; 0x3ffa <sysclk_enable_peripheral_clock+0x24a>
    3ff0:	60 e1       	ldi	r22, 0x10	; 16
    3ff2:	83 e0       	ldi	r24, 0x03	; 3
    3ff4:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    3ff8:	6d c0       	rjmp	.+218    	; 0x40d4 <__stack+0xd5>
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	80 3a       	cpi	r24, 0xA0	; 160
    4000:	99 40       	sbci	r25, 0x09	; 9
    4002:	29 f4       	brne	.+10     	; 0x400e <__stack+0xf>
    4004:	60 e1       	ldi	r22, 0x10	; 16
    4006:	84 e0       	ldi	r24, 0x04	; 4
    4008:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    400c:	63 c0       	rjmp	.+198    	; 0x40d4 <__stack+0xd5>
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	9a 81       	ldd	r25, Y+2	; 0x02
    4012:	80 3a       	cpi	r24, 0xA0	; 160
    4014:	9a 40       	sbci	r25, 0x0A	; 10
    4016:	29 f4       	brne	.+10     	; 0x4022 <__stack+0x23>
    4018:	60 e1       	ldi	r22, 0x10	; 16
    401a:	85 e0       	ldi	r24, 0x05	; 5
    401c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4020:	59 c0       	rjmp	.+178    	; 0x40d4 <__stack+0xd5>
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	80 3a       	cpi	r24, 0xA0	; 160
    4028:	9b 40       	sbci	r25, 0x0B	; 11
    402a:	29 f4       	brne	.+10     	; 0x4036 <__stack+0x37>
    402c:	60 e1       	ldi	r22, 0x10	; 16
    402e:	86 e0       	ldi	r24, 0x06	; 6
    4030:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4034:	4f c0       	rjmp	.+158    	; 0x40d4 <__stack+0xd5>
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	80 3b       	cpi	r24, 0xB0	; 176
    403c:	98 40       	sbci	r25, 0x08	; 8
    403e:	29 f4       	brne	.+10     	; 0x404a <__stack+0x4b>
    4040:	60 e2       	ldi	r22, 0x20	; 32
    4042:	83 e0       	ldi	r24, 0x03	; 3
    4044:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4048:	45 c0       	rjmp	.+138    	; 0x40d4 <__stack+0xd5>
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	80 3b       	cpi	r24, 0xB0	; 176
    4050:	99 40       	sbci	r25, 0x09	; 9
    4052:	29 f4       	brne	.+10     	; 0x405e <__stack+0x5f>
    4054:	60 e2       	ldi	r22, 0x20	; 32
    4056:	84 e0       	ldi	r24, 0x04	; 4
    4058:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    405c:	3b c0       	rjmp	.+118    	; 0x40d4 <__stack+0xd5>
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	9a 81       	ldd	r25, Y+2	; 0x02
    4062:	80 3b       	cpi	r24, 0xB0	; 176
    4064:	9a 40       	sbci	r25, 0x0A	; 10
    4066:	29 f4       	brne	.+10     	; 0x4072 <__stack+0x73>
    4068:	60 e2       	ldi	r22, 0x20	; 32
    406a:	85 e0       	ldi	r24, 0x05	; 5
    406c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4070:	31 c0       	rjmp	.+98     	; 0x40d4 <__stack+0xd5>
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	80 3b       	cpi	r24, 0xB0	; 176
    4078:	9b 40       	sbci	r25, 0x0B	; 11
    407a:	29 f4       	brne	.+10     	; 0x4086 <__stack+0x87>
    407c:	60 e2       	ldi	r22, 0x20	; 32
    407e:	86 e0       	ldi	r24, 0x06	; 6
    4080:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4084:	27 c0       	rjmp	.+78     	; 0x40d4 <__stack+0xd5>
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	9a 81       	ldd	r25, Y+2	; 0x02
    408a:	80 38       	cpi	r24, 0x80	; 128
    408c:	94 40       	sbci	r25, 0x04	; 4
    408e:	29 f4       	brne	.+10     	; 0x409a <__stack+0x9b>
    4090:	60 e4       	ldi	r22, 0x40	; 64
    4092:	83 e0       	ldi	r24, 0x03	; 3
    4094:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4098:	1d c0       	rjmp	.+58     	; 0x40d4 <__stack+0xd5>
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	80 39       	cpi	r24, 0x90	; 144
    40a0:	94 40       	sbci	r25, 0x04	; 4
    40a2:	29 f4       	brne	.+10     	; 0x40ae <__stack+0xaf>
    40a4:	60 e4       	ldi	r22, 0x40	; 64
    40a6:	84 e0       	ldi	r24, 0x04	; 4
    40a8:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    40ac:	13 c0       	rjmp	.+38     	; 0x40d4 <__stack+0xd5>
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	9a 81       	ldd	r25, Y+2	; 0x02
    40b2:	80 3a       	cpi	r24, 0xA0	; 160
    40b4:	94 40       	sbci	r25, 0x04	; 4
    40b6:	29 f4       	brne	.+10     	; 0x40c2 <__stack+0xc3>
    40b8:	60 e4       	ldi	r22, 0x40	; 64
    40ba:	85 e0       	ldi	r24, 0x05	; 5
    40bc:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    40c0:	09 c0       	rjmp	.+18     	; 0x40d4 <__stack+0xd5>
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	80 3b       	cpi	r24, 0xB0	; 176
    40c8:	94 40       	sbci	r25, 0x04	; 4
    40ca:	21 f4       	brne	.+8      	; 0x40d4 <__stack+0xd5>
    40cc:	60 e4       	ldi	r22, 0x40	; 64
    40ce:	86 e0       	ldi	r24, 0x06	; 6
    40d0:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    40d4:	00 00       	nop
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	08 95       	ret

000040e0 <usart_serial_init>:
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	2b 97       	sbiw	r28, 0x0b	; 11
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	88 87       	std	Y+8, r24	; 0x08
    40f0:	99 87       	std	Y+9, r25	; 0x09
    40f2:	6a 87       	std	Y+10, r22	; 0x0a
    40f4:	7b 87       	std	Y+11, r23	; 0x0b
    40f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    40fa:	fc 01       	movw	r30, r24
    40fc:	84 81       	ldd	r24, Z+4	; 0x04
    40fe:	8d 83       	std	Y+5, r24	; 0x05
    4100:	8a 85       	ldd	r24, Y+10	; 0x0a
    4102:	9b 85       	ldd	r25, Y+11	; 0x0b
    4104:	fc 01       	movw	r30, r24
    4106:	85 81       	ldd	r24, Z+5	; 0x05
    4108:	8e 83       	std	Y+6, r24	; 0x06
    410a:	8a 85       	ldd	r24, Y+10	; 0x0a
    410c:	9b 85       	ldd	r25, Y+11	; 0x0b
    410e:	fc 01       	movw	r30, r24
    4110:	86 81       	ldd	r24, Z+6	; 0x06
    4112:	8f 83       	std	Y+7, r24	; 0x07
    4114:	8a 85       	ldd	r24, Y+10	; 0x0a
    4116:	9b 85       	ldd	r25, Y+11	; 0x0b
    4118:	fc 01       	movw	r30, r24
    411a:	80 81       	ld	r24, Z
    411c:	91 81       	ldd	r25, Z+1	; 0x01
    411e:	a2 81       	ldd	r26, Z+2	; 0x02
    4120:	b3 81       	ldd	r27, Z+3	; 0x03
    4122:	89 83       	std	Y+1, r24	; 0x01
    4124:	9a 83       	std	Y+2, r25	; 0x02
    4126:	ab 83       	std	Y+3, r26	; 0x03
    4128:	bc 83       	std	Y+4, r27	; 0x04
    412a:	88 85       	ldd	r24, Y+8	; 0x08
    412c:	99 85       	ldd	r25, Y+9	; 0x09
    412e:	80 3a       	cpi	r24, 0xA0	; 160
    4130:	98 40       	sbci	r25, 0x08	; 8
    4132:	21 f4       	brne	.+8      	; 0x413c <usart_serial_init+0x5c>
    4134:	60 e1       	ldi	r22, 0x10	; 16
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    413c:	88 85       	ldd	r24, Y+8	; 0x08
    413e:	99 85       	ldd	r25, Y+9	; 0x09
    4140:	80 3b       	cpi	r24, 0xB0	; 176
    4142:	98 40       	sbci	r25, 0x08	; 8
    4144:	21 f4       	brne	.+8      	; 0x414e <usart_serial_init+0x6e>
    4146:	60 e2       	ldi	r22, 0x20	; 32
    4148:	83 e0       	ldi	r24, 0x03	; 3
    414a:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    414e:	88 85       	ldd	r24, Y+8	; 0x08
    4150:	99 85       	ldd	r25, Y+9	; 0x09
    4152:	80 3a       	cpi	r24, 0xA0	; 160
    4154:	99 40       	sbci	r25, 0x09	; 9
    4156:	21 f4       	brne	.+8      	; 0x4160 <usart_serial_init+0x80>
    4158:	60 e1       	ldi	r22, 0x10	; 16
    415a:	84 e0       	ldi	r24, 0x04	; 4
    415c:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4160:	88 85       	ldd	r24, Y+8	; 0x08
    4162:	99 85       	ldd	r25, Y+9	; 0x09
    4164:	80 3b       	cpi	r24, 0xB0	; 176
    4166:	99 40       	sbci	r25, 0x09	; 9
    4168:	21 f4       	brne	.+8      	; 0x4172 <usart_serial_init+0x92>
    416a:	60 e2       	ldi	r22, 0x20	; 32
    416c:	84 e0       	ldi	r24, 0x04	; 4
    416e:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4172:	88 85       	ldd	r24, Y+8	; 0x08
    4174:	99 85       	ldd	r25, Y+9	; 0x09
    4176:	80 3a       	cpi	r24, 0xA0	; 160
    4178:	9a 40       	sbci	r25, 0x0A	; 10
    417a:	21 f4       	brne	.+8      	; 0x4184 <usart_serial_init+0xa4>
    417c:	60 e1       	ldi	r22, 0x10	; 16
    417e:	85 e0       	ldi	r24, 0x05	; 5
    4180:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4184:	88 85       	ldd	r24, Y+8	; 0x08
    4186:	99 85       	ldd	r25, Y+9	; 0x09
    4188:	80 3b       	cpi	r24, 0xB0	; 176
    418a:	9a 40       	sbci	r25, 0x0A	; 10
    418c:	21 f4       	brne	.+8      	; 0x4196 <usart_serial_init+0xb6>
    418e:	60 e2       	ldi	r22, 0x20	; 32
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    4196:	88 85       	ldd	r24, Y+8	; 0x08
    4198:	99 85       	ldd	r25, Y+9	; 0x09
    419a:	80 3a       	cpi	r24, 0xA0	; 160
    419c:	9b 40       	sbci	r25, 0x0B	; 11
    419e:	21 f4       	brne	.+8      	; 0x41a8 <usart_serial_init+0xc8>
    41a0:	60 e1       	ldi	r22, 0x10	; 16
    41a2:	86 e0       	ldi	r24, 0x06	; 6
    41a4:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    41a8:	88 85       	ldd	r24, Y+8	; 0x08
    41aa:	99 85       	ldd	r25, Y+9	; 0x09
    41ac:	80 3b       	cpi	r24, 0xB0	; 176
    41ae:	9b 40       	sbci	r25, 0x0B	; 11
    41b0:	21 f4       	brne	.+8      	; 0x41ba <usart_serial_init+0xda>
    41b2:	60 e2       	ldi	r22, 0x20	; 32
    41b4:	86 e0       	ldi	r24, 0x06	; 6
    41b6:	0e 94 20 08 	call	0x1040	; 0x1040 <sysclk_enable_module>
    41ba:	88 85       	ldd	r24, Y+8	; 0x08
    41bc:	99 85       	ldd	r25, Y+9	; 0x09
    41be:	9e 01       	movw	r18, r28
    41c0:	2f 5f       	subi	r18, 0xFF	; 255
    41c2:	3f 4f       	sbci	r19, 0xFF	; 255
    41c4:	b9 01       	movw	r22, r18
    41c6:	0f db       	rcall	.-2530   	; 0x37e6 <usart_init_rs232>
    41c8:	88 23       	and	r24, r24
    41ca:	11 f0       	breq	.+4      	; 0x41d0 <usart_serial_init+0xf0>
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	01 c0       	rjmp	.+2      	; 0x41d2 <usart_serial_init+0xf2>
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	2b 96       	adiw	r28, 0x0b	; 11
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	08 95       	ret

000041de <usart_serial_putchar>:
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <usart_serial_putchar+0x6>
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	89 83       	std	Y+1, r24	; 0x01
    41ea:	9a 83       	std	Y+2, r25	; 0x02
    41ec:	6b 83       	std	Y+3, r22	; 0x03
    41ee:	89 81       	ldd	r24, Y+1	; 0x01
    41f0:	9a 81       	ldd	r25, Y+2	; 0x02
    41f2:	6b 81       	ldd	r22, Y+3	; 0x03
    41f4:	3e db       	rcall	.-2436   	; 0x3872 <usart_putchar>
    41f6:	23 96       	adiw	r28, 0x03	; 3
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	08 95       	ret

00004202 <usart_serial_getchar>:
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	00 d0       	rcall	.+0      	; 0x4208 <usart_serial_getchar+0x6>
    4208:	1f 92       	push	r1
    420a:	cd b7       	in	r28, 0x3d	; 61
    420c:	de b7       	in	r29, 0x3e	; 62
    420e:	89 83       	std	Y+1, r24	; 0x01
    4210:	9a 83       	std	Y+2, r25	; 0x02
    4212:	6b 83       	std	Y+3, r22	; 0x03
    4214:	7c 83       	std	Y+4, r23	; 0x04
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	49 db       	rcall	.-2414   	; 0x38ae <usart_getchar>
    421c:	28 2f       	mov	r18, r24
    421e:	8b 81       	ldd	r24, Y+3	; 0x03
    4220:	9c 81       	ldd	r25, Y+4	; 0x04
    4222:	fc 01       	movw	r30, r24
    4224:	20 83       	st	Z, r18
    4226:	00 00       	nop
    4228:	24 96       	adiw	r28, 0x04	; 4
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	08 95       	ret

00004234 <stdio_serial_init>:
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	00 d0       	rcall	.+0      	; 0x423a <stdio_serial_init+0x6>
    423a:	1f 92       	push	r1
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	9a 83       	std	Y+2, r25	; 0x02
    4244:	6b 83       	std	Y+3, r22	; 0x03
    4246:	7c 83       	std	Y+4, r23	; 0x04
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	9a 81       	ldd	r25, Y+2	; 0x02
    424c:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <stdio_base>
    4250:	90 93 c0 21 	sts	0x21C0, r25	; 0x8021c0 <stdio_base+0x1>
    4254:	8f ee       	ldi	r24, 0xEF	; 239
    4256:	90 e2       	ldi	r25, 0x20	; 32
    4258:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <ptr_put>
    425c:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <ptr_put+0x1>
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	91 e2       	ldi	r25, 0x21	; 33
    4264:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <ptr_get>
    4268:	90 93 bc 21 	sts	0x21BC, r25	; 0x8021bc <ptr_get+0x1>
    426c:	2b 81       	ldd	r18, Y+3	; 0x03
    426e:	3c 81       	ldd	r19, Y+4	; 0x04
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	9a 81       	ldd	r25, Y+2	; 0x02
    4274:	b9 01       	movw	r22, r18
    4276:	34 df       	rcall	.-408    	; 0x40e0 <usart_serial_init>
    4278:	64 e4       	ldi	r22, 0x44	; 68
    427a:	78 e0       	ldi	r23, 0x08	; 8
    427c:	83 e6       	ldi	r24, 0x63	; 99
    427e:	98 e0       	ldi	r25, 0x08	; 8
    4280:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <fdevopen>
    4284:	00 00       	nop
    4286:	24 96       	adiw	r28, 0x04	; 4
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	08 95       	ret

00004292 <uart_init>:
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	1f 92       	push	r1
    4298:	1f 92       	push	r1
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
    429e:	89 83       	std	Y+1, r24	; 0x01
    42a0:	9a 83       	std	Y+2, r25	; 0x02
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	fc 01       	movw	r30, r24
    42a8:	86 81       	ldd	r24, Z+6	; 0x06
    42aa:	97 81       	ldd	r25, Z+7	; 0x07
    42ac:	a0 85       	ldd	r26, Z+8	; 0x08
    42ae:	b1 85       	ldd	r27, Z+9	; 0x09
    42b0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6719>
    42b4:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6719+0x1>
    42b8:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6719+0x2>
    42bc:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6719+0x3>
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	9a 81       	ldd	r25, Y+2	; 0x02
    42c4:	fc 01       	movw	r30, r24
    42c6:	80 81       	ld	r24, Z
    42c8:	91 81       	ldd	r25, Z+1	; 0x01
    42ca:	29 81       	ldd	r18, Y+1	; 0x01
    42cc:	3a 81       	ldd	r19, Y+2	; 0x02
    42ce:	f9 01       	movw	r30, r18
    42d0:	20 81       	ld	r18, Z
    42d2:	31 81       	ldd	r19, Z+1	; 0x01
    42d4:	f9 01       	movw	r30, r18
    42d6:	40 81       	ld	r20, Z
    42d8:	29 81       	ldd	r18, Y+1	; 0x01
    42da:	3a 81       	ldd	r19, Y+2	; 0x02
    42dc:	f9 01       	movw	r30, r18
    42de:	25 81       	ldd	r18, Z+5	; 0x05
    42e0:	24 2b       	or	r18, r20
    42e2:	fc 01       	movw	r30, r24
    42e4:	20 83       	st	Z, r18
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	fc 01       	movw	r30, r24
    42ec:	80 81       	ld	r24, Z
    42ee:	91 81       	ldd	r25, Z+1	; 0x01
    42f0:	29 81       	ldd	r18, Y+1	; 0x01
    42f2:	3a 81       	ldd	r19, Y+2	; 0x02
    42f4:	f9 01       	movw	r30, r18
    42f6:	20 81       	ld	r18, Z
    42f8:	31 81       	ldd	r19, Z+1	; 0x01
    42fa:	f9 01       	movw	r30, r18
    42fc:	44 81       	ldd	r20, Z+4	; 0x04
    42fe:	29 81       	ldd	r18, Y+1	; 0x01
    4300:	3a 81       	ldd	r19, Y+2	; 0x02
    4302:	f9 01       	movw	r30, r18
    4304:	25 81       	ldd	r18, Z+5	; 0x05
    4306:	24 2b       	or	r18, r20
    4308:	fc 01       	movw	r30, r24
    430a:	24 83       	std	Z+4, r18	; 0x04
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	9a 81       	ldd	r25, Y+2	; 0x02
    4310:	fc 01       	movw	r30, r24
    4312:	80 81       	ld	r24, Z
    4314:	91 81       	ldd	r25, Z+1	; 0x01
    4316:	29 81       	ldd	r18, Y+1	; 0x01
    4318:	3a 81       	ldd	r19, Y+2	; 0x02
    431a:	f9 01       	movw	r30, r18
    431c:	20 81       	ld	r18, Z
    431e:	31 81       	ldd	r19, Z+1	; 0x01
    4320:	f9 01       	movw	r30, r18
    4322:	20 81       	ld	r18, Z
    4324:	42 2f       	mov	r20, r18
    4326:	29 81       	ldd	r18, Y+1	; 0x01
    4328:	3a 81       	ldd	r19, Y+2	; 0x02
    432a:	f9 01       	movw	r30, r18
    432c:	24 81       	ldd	r18, Z+4	; 0x04
    432e:	20 95       	com	r18
    4330:	24 23       	and	r18, r20
    4332:	fc 01       	movw	r30, r24
    4334:	20 83       	st	Z, r18
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	9a 81       	ldd	r25, Y+2	; 0x02
    433a:	fc 01       	movw	r30, r24
    433c:	82 81       	ldd	r24, Z+2	; 0x02
    433e:	93 81       	ldd	r25, Z+3	; 0x03
    4340:	37 dd       	rcall	.-1426   	; 0x3db0 <sysclk_enable_peripheral_clock>
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	9a 81       	ldd	r25, Y+2	; 0x02
    4346:	fc 01       	movw	r30, r24
    4348:	82 81       	ldd	r24, Z+2	; 0x02
    434a:	93 81       	ldd	r25, Z+3	; 0x03
    434c:	66 e0       	ldi	r22, 0x06	; 6
    434e:	70 e2       	ldi	r23, 0x20	; 32
    4350:	c7 de       	rcall	.-626    	; 0x40e0 <usart_serial_init>
    4352:	00 00       	nop
    4354:	0f 90       	pop	r0
    4356:	0f 90       	pop	r0
    4358:	df 91       	pop	r29
    435a:	cf 91       	pop	r28
    435c:	08 95       	ret

0000435e <uart_terminal_init>:

void uart_terminal_init()
{
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    4366:	80 ea       	ldi	r24, 0xA0	; 160
    4368:	9a e0       	ldi	r25, 0x0A	; 10
    436a:	22 dd       	rcall	.-1468   	; 0x3db0 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    436c:	80 e8       	ldi	r24, 0x80	; 128
    436e:	96 e0       	ldi	r25, 0x06	; 6
    4370:	20 e8       	ldi	r18, 0x80	; 128
    4372:	36 e0       	ldi	r19, 0x06	; 6
    4374:	f9 01       	movw	r30, r18
    4376:	20 81       	ld	r18, Z
    4378:	28 60       	ori	r18, 0x08	; 8
    437a:	fc 01       	movw	r30, r24
    437c:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    437e:	6d e0       	ldi	r22, 0x0D	; 13
    4380:	70 e2       	ldi	r23, 0x20	; 32
    4382:	80 ea       	ldi	r24, 0xA0	; 160
    4384:	9a e0       	ldi	r25, 0x0A	; 10
    4386:	56 df       	rcall	.-340    	; 0x4234 <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    4388:	85 e3       	ldi	r24, 0x35	; 53
    438a:	90 e2       	ldi	r25, 0x20	; 32
    438c:	0e 94 97 2b 	call	0x572e	; 0x572e <puts>
		printf("UART Initialized\n");
    4390:	8a e5       	ldi	r24, 0x5A	; 90
    4392:	90 e2       	ldi	r25, 0x20	; 32
    4394:	0e 94 97 2b 	call	0x572e	; 0x572e <puts>
	}
}
    4398:	00 00       	nop
    439a:	df 91       	pop	r29
    439c:	cf 91       	pop	r28
    439e:	08 95       	ret

000043a0 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	98 e4       	ldi	r25, 0x48	; 72
    43ac:	a8 ee       	ldi	r26, 0xE8	; 232
    43ae:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    43b0:	bc 01       	movw	r22, r24
    43b2:	cd 01       	movw	r24, r26
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	08 95       	ret

000043ba <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	1f 92       	push	r1
    43c0:	cd b7       	in	r28, 0x3d	; 61
    43c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    43c4:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    43c6:	ec df       	rcall	.-40     	; 0x43a0 <sysclk_get_main_hz>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	29 81       	ldd	r18, Y+1	; 0x01
    43ce:	22 2f       	mov	r18, r18
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	04 c0       	rjmp	.+8      	; 0x43dc <sysclk_get_per4_hz+0x22>
    43d4:	b6 95       	lsr	r27
    43d6:	a7 95       	ror	r26
    43d8:	97 95       	ror	r25
    43da:	87 95       	ror	r24
    43dc:	2a 95       	dec	r18
    43de:	d2 f7       	brpl	.-12     	; 0x43d4 <sysclk_get_per4_hz+0x1a>
}
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	0f 90       	pop	r0
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	08 95       	ret

000043ec <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    43f4:	e2 df       	rcall	.-60     	; 0x43ba <sysclk_get_per4_hz>
    43f6:	dc 01       	movw	r26, r24
    43f8:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    43fa:	bc 01       	movw	r22, r24
    43fc:	cd 01       	movw	r24, r26
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	08 95       	ret

00004404 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    440c:	ef df       	rcall	.-34     	; 0x43ec <sysclk_get_per2_hz>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
}
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	df 91       	pop	r29
    4418:	cf 91       	pop	r28
    441a:	08 95       	ret

0000441c <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    4424:	ef df       	rcall	.-34     	; 0x4404 <sysclk_get_per_hz>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
}
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	df 91       	pop	r29
    4430:	cf 91       	pop	r28
    4432:	08 95       	ret

00004434 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4434:	04 c0       	rjmp	.+8      	; 0x443e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4436:	61 50       	subi	r22, 0x01	; 1
    4438:	71 09       	sbc	r23, r1
    443a:	81 09       	sbc	r24, r1
    443c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    443e:	61 15       	cp	r22, r1
    4440:	71 05       	cpc	r23, r1
    4442:	81 05       	cpc	r24, r1
    4444:	91 05       	cpc	r25, r1
    4446:	b9 f7       	brne	.-18     	; 0x4436 <__portable_avr_delay_cycles+0x2>
    4448:	08 95       	ret

0000444a <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    4452:	80 ea       	ldi	r24, 0xA0	; 160
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	27 e0       	ldi	r18, 0x07	; 7
    4458:	fc 01       	movw	r30, r24
    445a:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    445c:	00 00       	nop
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	08 95       	ret

00004464 <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	1f 92       	push	r1
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
    446e:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	88 2f       	mov	r24, r24
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	00 97       	sbiw	r24, 0x00	; 0
    4478:	19 f0       	breq	.+6      	; 0x4480 <pmic_set_scheduling+0x1c>
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	79 f0       	breq	.+30     	; 0x449c <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    447e:	18 c0       	rjmp	.+48     	; 0x44b0 <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    4480:	80 ea       	ldi	r24, 0xA0	; 160
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	20 ea       	ldi	r18, 0xA0	; 160
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	f9 01       	movw	r30, r18
    448a:	22 81       	ldd	r18, Z+2	; 0x02
    448c:	2f 77       	andi	r18, 0x7F	; 127
    448e:	fc 01       	movw	r30, r24
    4490:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    4492:	80 ea       	ldi	r24, 0xA0	; 160
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	fc 01       	movw	r30, r24
    4498:	11 82       	std	Z+1, r1	; 0x01
		break;
    449a:	0a c0       	rjmp	.+20     	; 0x44b0 <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    449c:	80 ea       	ldi	r24, 0xA0	; 160
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	20 ea       	ldi	r18, 0xA0	; 160
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	f9 01       	movw	r30, r18
    44a6:	22 81       	ldd	r18, Z+2	; 0x02
    44a8:	20 68       	ori	r18, 0x80	; 128
    44aa:	fc 01       	movw	r30, r24
    44ac:	22 83       	std	Z+2, r18	; 0x02
		break;
    44ae:	00 00       	nop

	default:
		break;
	};
}
    44b0:	00 00       	nop
    44b2:	0f 90       	pop	r0
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	08 95       	ret

000044ba <main>:


void print_calibration_data(void);

int main (void)
{
    44ba:	2f 92       	push	r2
    44bc:	3f 92       	push	r3
    44be:	4f 92       	push	r4
    44c0:	5f 92       	push	r5
    44c2:	6f 92       	push	r6
    44c4:	7f 92       	push	r7
    44c6:	8f 92       	push	r8
    44c8:	9f 92       	push	r9
    44ca:	af 92       	push	r10
    44cc:	bf 92       	push	r11
    44ce:	cf 92       	push	r12
    44d0:	df 92       	push	r13
    44d2:	ef 92       	push	r14
    44d4:	ff 92       	push	r15
    44d6:	0f 93       	push	r16
    44d8:	1f 93       	push	r17
    44da:	cf 93       	push	r28
    44dc:	df 93       	push	r29
    44de:	cd b7       	in	r28, 0x3d	; 61
    44e0:	de b7       	in	r29, 0x3e	; 62
    44e2:	28 97       	sbiw	r28, 0x08	; 8
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	de bf       	out	0x3e, r29	; 62
	board_init();
    44e8:	53 dc       	rcall	.-1882   	; 0x3d90 <board_init>
	sysclk_init();
    44ea:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    44ee:	37 df       	rcall	.-402    	; 0x435e <uart_terminal_init>
	//newOLogInit();
	
	printf("uart is working\n");
    44f0:	8b e6       	ldi	r24, 0x6B	; 107
    44f2:	90 e2       	ldi	r25, 0x20	; 32
    44f4:	0e 94 97 2b 	call	0x572e	; 0x572e <puts>
	//spi_init();

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    44f8:	a8 df       	rcall	.-176    	; 0x444a <pmic_init>
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	b3 df       	rcall	.-154    	; 0x4464 <pmic_set_scheduling>
	irq_initialize_vectors();
    44fe:	80 ea       	ldi	r24, 0xA0	; 160
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	27 e0       	ldi	r18, 0x07	; 7
    4504:	fc 01       	movw	r30, r24
	cpu_irq_enable();
    4506:	22 83       	std	Z+2, r18	; 0x02
	gps_init();
    4508:	78 94       	sei
    450a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <gps_init>
		
		
		//write_telem_to_xbee();
		
		
		delay_ms(1000);
    450e:	86 df       	rcall	.-244    	; 0x441c <sysclk_get_cpu_hz>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	8c 01       	movw	r16, r24
    4516:	9d 01       	movw	r18, r26
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	ba 01       	movw	r22, r20
    451e:	09 83       	std	Y+1, r16	; 0x01
    4520:	1a 83       	std	Y+2, r17	; 0x02
    4522:	2b 83       	std	Y+3, r18	; 0x03
    4524:	3c 83       	std	Y+4, r19	; 0x04
    4526:	4d 83       	std	Y+5, r20	; 0x05
    4528:	5e 83       	std	Y+6, r21	; 0x06
    452a:	6f 83       	std	Y+7, r22	; 0x07
    452c:	78 87       	std	Y+8, r23	; 0x08
    452e:	29 80       	ldd	r2, Y+1	; 0x01
    4530:	3a 80       	ldd	r3, Y+2	; 0x02
    4532:	4b 80       	ldd	r4, Y+3	; 0x03
    4534:	5c 80       	ldd	r5, Y+4	; 0x04
    4536:	6d 80       	ldd	r6, Y+5	; 0x05
    4538:	7e 80       	ldd	r7, Y+6	; 0x06
    453a:	8f 80       	ldd	r8, Y+7	; 0x07
    453c:	98 84       	ldd	r9, Y+8	; 0x08
    453e:	22 2d       	mov	r18, r2
    4540:	33 2d       	mov	r19, r3
    4542:	44 2d       	mov	r20, r4
    4544:	55 2d       	mov	r21, r5
    4546:	66 2d       	mov	r22, r6
    4548:	77 2d       	mov	r23, r7
    454a:	88 2d       	mov	r24, r8
    454c:	99 2d       	mov	r25, r9
    454e:	02 e0       	ldi	r16, 0x02	; 2
    4550:	1b d6       	rcall	.+3126   	; 0x5188 <__ashldi3>
    4552:	a2 2e       	mov	r10, r18
    4554:	b3 2e       	mov	r11, r19
    4556:	c4 2e       	mov	r12, r20
    4558:	d5 2e       	mov	r13, r21
    455a:	e6 2e       	mov	r14, r22
    455c:	f7 2e       	mov	r15, r23
    455e:	08 2f       	mov	r16, r24
    4560:	19 2f       	mov	r17, r25
    4562:	2a 2c       	mov	r2, r10
    4564:	3b 2c       	mov	r3, r11
    4566:	4c 2c       	mov	r4, r12
    4568:	5d 2c       	mov	r5, r13
    456a:	6e 2c       	mov	r6, r14
    456c:	7f 2c       	mov	r7, r15
    456e:	80 2e       	mov	r8, r16
    4570:	91 2e       	mov	r9, r17
    4572:	22 2d       	mov	r18, r2
    4574:	33 2d       	mov	r19, r3
    4576:	44 2d       	mov	r20, r4
    4578:	55 2d       	mov	r21, r5
    457a:	66 2d       	mov	r22, r6
    457c:	77 2d       	mov	r23, r7
    457e:	88 2d       	mov	r24, r8
    4580:	99 2d       	mov	r25, r9
    4582:	05 e0       	ldi	r16, 0x05	; 5
    4584:	01 d6       	rcall	.+3074   	; 0x5188 <__ashldi3>
    4586:	a2 2e       	mov	r10, r18
    4588:	b3 2e       	mov	r11, r19
    458a:	c4 2e       	mov	r12, r20
    458c:	d5 2e       	mov	r13, r21
    458e:	e6 2e       	mov	r14, r22
    4590:	f7 2e       	mov	r15, r23
    4592:	08 2f       	mov	r16, r24
    4594:	19 2f       	mov	r17, r25
    4596:	2a 2d       	mov	r18, r10
    4598:	3b 2d       	mov	r19, r11
    459a:	4c 2d       	mov	r20, r12
    459c:	5d 2d       	mov	r21, r13
    459e:	6e 2d       	mov	r22, r14
    45a0:	7f 2d       	mov	r23, r15
    45a2:	80 2f       	mov	r24, r16
    45a4:	91 2f       	mov	r25, r17
    45a6:	a2 2c       	mov	r10, r2
    45a8:	b3 2c       	mov	r11, r3
    45aa:	c4 2c       	mov	r12, r4
    45ac:	d5 2c       	mov	r13, r5
    45ae:	e6 2c       	mov	r14, r6
    45b0:	f7 2c       	mov	r15, r7
    45b2:	08 2d       	mov	r16, r8
    45b4:	19 2d       	mov	r17, r9
    45b6:	0a d6       	rcall	.+3092   	; 0x51cc <__subdi3>
    45b8:	a2 2e       	mov	r10, r18
    45ba:	b3 2e       	mov	r11, r19
    45bc:	c4 2e       	mov	r12, r20
    45be:	d5 2e       	mov	r13, r21
    45c0:	e6 2e       	mov	r14, r22
    45c2:	f7 2e       	mov	r15, r23
    45c4:	08 2f       	mov	r16, r24
    45c6:	19 2f       	mov	r17, r25
    45c8:	2a 2d       	mov	r18, r10
    45ca:	3b 2d       	mov	r19, r11
    45cc:	4c 2d       	mov	r20, r12
    45ce:	5d 2d       	mov	r21, r13
    45d0:	6e 2d       	mov	r22, r14
    45d2:	7f 2d       	mov	r23, r15
    45d4:	80 2f       	mov	r24, r16
    45d6:	91 2f       	mov	r25, r17
    45d8:	a9 80       	ldd	r10, Y+1	; 0x01
    45da:	ba 80       	ldd	r11, Y+2	; 0x02
    45dc:	cb 80       	ldd	r12, Y+3	; 0x03
    45de:	dc 80       	ldd	r13, Y+4	; 0x04
    45e0:	ed 80       	ldd	r14, Y+5	; 0x05
    45e2:	fe 80       	ldd	r15, Y+6	; 0x06
    45e4:	0f 81       	ldd	r16, Y+7	; 0x07
    45e6:	18 85       	ldd	r17, Y+8	; 0x08
    45e8:	e8 d5       	rcall	.+3024   	; 0x51ba <__adddi3>
    45ea:	a2 2e       	mov	r10, r18
    45ec:	b3 2e       	mov	r11, r19
    45ee:	c4 2e       	mov	r12, r20
    45f0:	d5 2e       	mov	r13, r21
    45f2:	e6 2e       	mov	r14, r22
    45f4:	f7 2e       	mov	r15, r23
    45f6:	08 2f       	mov	r16, r24
    45f8:	19 2f       	mov	r17, r25
    45fa:	2a 2d       	mov	r18, r10
    45fc:	3b 2d       	mov	r19, r11
    45fe:	4c 2d       	mov	r20, r12
    4600:	5d 2d       	mov	r21, r13
    4602:	6e 2d       	mov	r22, r14
    4604:	7f 2d       	mov	r23, r15
    4606:	80 2f       	mov	r24, r16
    4608:	91 2f       	mov	r25, r17
    460a:	03 e0       	ldi	r16, 0x03	; 3
    460c:	bd d5       	rcall	.+2938   	; 0x5188 <__ashldi3>
    460e:	22 2e       	mov	r2, r18
    4610:	33 2e       	mov	r3, r19
    4612:	44 2e       	mov	r4, r20
    4614:	55 2e       	mov	r5, r21
    4616:	66 2e       	mov	r6, r22
    4618:	77 2e       	mov	r7, r23
    461a:	88 2e       	mov	r8, r24
    461c:	99 2e       	mov	r9, r25
    461e:	a2 2c       	mov	r10, r2
    4620:	b3 2c       	mov	r11, r3
    4622:	c4 2c       	mov	r12, r4
    4624:	d5 2c       	mov	r13, r5
    4626:	e6 2c       	mov	r14, r6
    4628:	f7 2c       	mov	r15, r7
    462a:	08 2d       	mov	r16, r8
    462c:	19 2d       	mov	r17, r9
    462e:	2a 2c       	mov	r2, r10
    4630:	3b 2c       	mov	r3, r11
    4632:	4c 2c       	mov	r4, r12
    4634:	5d 2c       	mov	r5, r13
    4636:	6e 2c       	mov	r6, r14
    4638:	7f 2c       	mov	r7, r15
    463a:	80 2e       	mov	r8, r16
    463c:	91 2e       	mov	r9, r17
    463e:	0f 2e       	mov	r0, r31
    4640:	f6 e0       	ldi	r31, 0x06	; 6
    4642:	af 2e       	mov	r10, r31
    4644:	f0 2d       	mov	r31, r0
    4646:	b1 2c       	mov	r11, r1
    4648:	c1 2c       	mov	r12, r1
    464a:	d1 2c       	mov	r13, r1
    464c:	e1 2c       	mov	r14, r1
    464e:	f1 2c       	mov	r15, r1
    4650:	00 e0       	ldi	r16, 0x00	; 0
    4652:	10 e0       	ldi	r17, 0x00	; 0
    4654:	22 2d       	mov	r18, r2
    4656:	33 2d       	mov	r19, r3
    4658:	44 2d       	mov	r20, r4
    465a:	55 2d       	mov	r21, r5
    465c:	66 2d       	mov	r22, r6
    465e:	77 2d       	mov	r23, r7
    4660:	88 2d       	mov	r24, r8
    4662:	99 2d       	mov	r25, r9
    4664:	35 d5       	rcall	.+2666   	; 0x50d0 <__udivdi3>
    4666:	22 2e       	mov	r2, r18
    4668:	33 2e       	mov	r3, r19
    466a:	44 2e       	mov	r4, r20
    466c:	55 2e       	mov	r5, r21
    466e:	66 2e       	mov	r6, r22
    4670:	77 2e       	mov	r7, r23
    4672:	88 2e       	mov	r8, r24
    4674:	99 2e       	mov	r9, r25
    4676:	a2 2c       	mov	r10, r2
    4678:	b3 2c       	mov	r11, r3
    467a:	c4 2c       	mov	r12, r4
    467c:	d5 2c       	mov	r13, r5
    467e:	e6 2c       	mov	r14, r6
    4680:	f7 2c       	mov	r15, r7
    4682:	08 2d       	mov	r16, r8
    4684:	19 2d       	mov	r17, r9
    4686:	2a 2d       	mov	r18, r10
    4688:	3b 2d       	mov	r19, r11
    468a:	4c 2d       	mov	r20, r12
    468c:	5d 2d       	mov	r21, r13
    468e:	6e 2d       	mov	r22, r14
    4690:	7f 2d       	mov	r23, r15
    4692:	80 2f       	mov	r24, r16
    4694:	91 2f       	mov	r25, r17
    4696:	29 51       	subi	r18, 0x19	; 25
    4698:	3c 4f       	sbci	r19, 0xFC	; 252
    469a:	4f 4f       	sbci	r20, 0xFF	; 255
    469c:	5f 4f       	sbci	r21, 0xFF	; 255
    469e:	6f 4f       	sbci	r22, 0xFF	; 255
    46a0:	7f 4f       	sbci	r23, 0xFF	; 255
    46a2:	8f 4f       	sbci	r24, 0xFF	; 255
    46a4:	9f 4f       	sbci	r25, 0xFF	; 255
    46a6:	a2 2e       	mov	r10, r18
    46a8:	b3 2e       	mov	r11, r19
    46aa:	c4 2e       	mov	r12, r20
    46ac:	d5 2e       	mov	r13, r21
    46ae:	e6 2e       	mov	r14, r22
    46b0:	f7 2e       	mov	r15, r23
    46b2:	08 2f       	mov	r16, r24
    46b4:	19 2f       	mov	r17, r25
    46b6:	2a 2d       	mov	r18, r10
    46b8:	3b 2d       	mov	r19, r11
    46ba:	4c 2d       	mov	r20, r12
    46bc:	5d 2d       	mov	r21, r13
    46be:	6e 2d       	mov	r22, r14
    46c0:	7f 2d       	mov	r23, r15
    46c2:	80 2f       	mov	r24, r16
    46c4:	91 2f       	mov	r25, r17
    46c6:	be d0       	rcall	.+380    	; 0x4844 <__floatundisf>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	4a e7       	ldi	r20, 0x7A	; 122
    46d2:	54 e4       	ldi	r21, 0x44	; 68
    46d4:	bc 01       	movw	r22, r24
    46d6:	cd 01       	movw	r24, r26
    46d8:	13 d0       	rcall	.+38     	; 0x4700 <__divsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	bc 01       	movw	r22, r24
    46e0:	cd 01       	movw	r24, r26
    46e2:	7b d0       	rcall	.+246    	; 0x47da <__fixunssfdi>
    46e4:	a2 2e       	mov	r10, r18
    46e6:	b3 2e       	mov	r11, r19
    46e8:	c4 2e       	mov	r12, r20
    46ea:	d5 2e       	mov	r13, r21
    46ec:	e6 2e       	mov	r14, r22
    46ee:	f7 2e       	mov	r15, r23
    46f0:	08 2f       	mov	r16, r24
    46f2:	19 2f       	mov	r17, r25
    46f4:	d6 01       	movw	r26, r12
    46f6:	c5 01       	movw	r24, r10
    46f8:	bc 01       	movw	r22, r24
    46fa:	cd 01       	movw	r24, r26
    46fc:	9b de       	rcall	.-714    	; 0x4434 <__portable_avr_delay_cycles>


		
	
							
	}
    46fe:	07 cf       	rjmp	.-498    	; 0x450e <main+0x54>

00004700 <__divsf3>:
    4700:	0c d0       	rcall	.+24     	; 0x471a <__divsf3x>
    4702:	05 c1       	rjmp	.+522    	; 0x490e <__fp_round>
    4704:	fd d0       	rcall	.+506    	; 0x4900 <__fp_pscB>
    4706:	40 f0       	brcs	.+16     	; 0x4718 <__divsf3+0x18>
    4708:	f4 d0       	rcall	.+488    	; 0x48f2 <__fp_pscA>
    470a:	30 f0       	brcs	.+12     	; 0x4718 <__divsf3+0x18>
    470c:	21 f4       	brne	.+8      	; 0x4716 <__divsf3+0x16>
    470e:	5f 3f       	cpi	r21, 0xFF	; 255
    4710:	19 f0       	breq	.+6      	; 0x4718 <__divsf3+0x18>
    4712:	d6 c0       	rjmp	.+428    	; 0x48c0 <__fp_inf>
    4714:	51 11       	cpse	r21, r1
    4716:	2f c1       	rjmp	.+606    	; 0x4976 <__fp_szero>
    4718:	d9 c0       	rjmp	.+434    	; 0x48cc <__fp_nan>

0000471a <__divsf3x>:
    471a:	0a d1       	rcall	.+532    	; 0x4930 <__fp_split3>
    471c:	98 f3       	brcs	.-26     	; 0x4704 <__divsf3+0x4>

0000471e <__divsf3_pse>:
    471e:	99 23       	and	r25, r25
    4720:	c9 f3       	breq	.-14     	; 0x4714 <__divsf3+0x14>
    4722:	55 23       	and	r21, r21
    4724:	b1 f3       	breq	.-20     	; 0x4712 <__divsf3+0x12>
    4726:	95 1b       	sub	r25, r21
    4728:	55 0b       	sbc	r21, r21
    472a:	bb 27       	eor	r27, r27
    472c:	aa 27       	eor	r26, r26
    472e:	62 17       	cp	r22, r18
    4730:	73 07       	cpc	r23, r19
    4732:	84 07       	cpc	r24, r20
    4734:	38 f0       	brcs	.+14     	; 0x4744 <__divsf3_pse+0x26>
    4736:	9f 5f       	subi	r25, 0xFF	; 255
    4738:	5f 4f       	sbci	r21, 0xFF	; 255
    473a:	22 0f       	add	r18, r18
    473c:	33 1f       	adc	r19, r19
    473e:	44 1f       	adc	r20, r20
    4740:	aa 1f       	adc	r26, r26
    4742:	a9 f3       	breq	.-22     	; 0x472e <__divsf3_pse+0x10>
    4744:	33 d0       	rcall	.+102    	; 0x47ac <__divsf3_pse+0x8e>
    4746:	0e 2e       	mov	r0, r30
    4748:	3a f0       	brmi	.+14     	; 0x4758 <__divsf3_pse+0x3a>
    474a:	e0 e8       	ldi	r30, 0x80	; 128
    474c:	30 d0       	rcall	.+96     	; 0x47ae <__divsf3_pse+0x90>
    474e:	91 50       	subi	r25, 0x01	; 1
    4750:	50 40       	sbci	r21, 0x00	; 0
    4752:	e6 95       	lsr	r30
    4754:	00 1c       	adc	r0, r0
    4756:	ca f7       	brpl	.-14     	; 0x474a <__divsf3_pse+0x2c>
    4758:	29 d0       	rcall	.+82     	; 0x47ac <__divsf3_pse+0x8e>
    475a:	fe 2f       	mov	r31, r30
    475c:	27 d0       	rcall	.+78     	; 0x47ac <__divsf3_pse+0x8e>
    475e:	66 0f       	add	r22, r22
    4760:	77 1f       	adc	r23, r23
    4762:	88 1f       	adc	r24, r24
    4764:	bb 1f       	adc	r27, r27
    4766:	26 17       	cp	r18, r22
    4768:	37 07       	cpc	r19, r23
    476a:	48 07       	cpc	r20, r24
    476c:	ab 07       	cpc	r26, r27
    476e:	b0 e8       	ldi	r27, 0x80	; 128
    4770:	09 f0       	breq	.+2      	; 0x4774 <__divsf3_pse+0x56>
    4772:	bb 0b       	sbc	r27, r27
    4774:	80 2d       	mov	r24, r0
    4776:	bf 01       	movw	r22, r30
    4778:	ff 27       	eor	r31, r31
    477a:	93 58       	subi	r25, 0x83	; 131
    477c:	5f 4f       	sbci	r21, 0xFF	; 255
    477e:	2a f0       	brmi	.+10     	; 0x478a <__divsf3_pse+0x6c>
    4780:	9e 3f       	cpi	r25, 0xFE	; 254
    4782:	51 05       	cpc	r21, r1
    4784:	68 f0       	brcs	.+26     	; 0x47a0 <__divsf3_pse+0x82>
    4786:	9c c0       	rjmp	.+312    	; 0x48c0 <__fp_inf>
    4788:	f6 c0       	rjmp	.+492    	; 0x4976 <__fp_szero>
    478a:	5f 3f       	cpi	r21, 0xFF	; 255
    478c:	ec f3       	brlt	.-6      	; 0x4788 <__divsf3_pse+0x6a>
    478e:	98 3e       	cpi	r25, 0xE8	; 232
    4790:	dc f3       	brlt	.-10     	; 0x4788 <__divsf3_pse+0x6a>
    4792:	86 95       	lsr	r24
    4794:	77 95       	ror	r23
    4796:	67 95       	ror	r22
    4798:	b7 95       	ror	r27
    479a:	f7 95       	ror	r31
    479c:	9f 5f       	subi	r25, 0xFF	; 255
    479e:	c9 f7       	brne	.-14     	; 0x4792 <__divsf3_pse+0x74>
    47a0:	88 0f       	add	r24, r24
    47a2:	91 1d       	adc	r25, r1
    47a4:	96 95       	lsr	r25
    47a6:	87 95       	ror	r24
    47a8:	97 f9       	bld	r25, 7
    47aa:	08 95       	ret
    47ac:	e1 e0       	ldi	r30, 0x01	; 1
    47ae:	66 0f       	add	r22, r22
    47b0:	77 1f       	adc	r23, r23
    47b2:	88 1f       	adc	r24, r24
    47b4:	bb 1f       	adc	r27, r27
    47b6:	62 17       	cp	r22, r18
    47b8:	73 07       	cpc	r23, r19
    47ba:	84 07       	cpc	r24, r20
    47bc:	ba 07       	cpc	r27, r26
    47be:	20 f0       	brcs	.+8      	; 0x47c8 <__divsf3_pse+0xaa>
    47c0:	62 1b       	sub	r22, r18
    47c2:	73 0b       	sbc	r23, r19
    47c4:	84 0b       	sbc	r24, r20
    47c6:	ba 0b       	sbc	r27, r26
    47c8:	ee 1f       	adc	r30, r30
    47ca:	88 f7       	brcc	.-30     	; 0x47ae <__divsf3_pse+0x90>
    47cc:	e0 95       	com	r30
    47ce:	08 95       	ret

000047d0 <__fixsfdi>:
    47d0:	be e3       	ldi	r27, 0x3E	; 62
    47d2:	04 d0       	rcall	.+8      	; 0x47dc <__fixunssfdi+0x2>
    47d4:	08 f4       	brcc	.+2      	; 0x47d8 <__fixsfdi+0x8>
    47d6:	90 e8       	ldi	r25, 0x80	; 128
    47d8:	08 95       	ret

000047da <__fixunssfdi>:
    47da:	bf e3       	ldi	r27, 0x3F	; 63
    47dc:	22 27       	eor	r18, r18
    47de:	33 27       	eor	r19, r19
    47e0:	a9 01       	movw	r20, r18
    47e2:	ae d0       	rcall	.+348    	; 0x4940 <__fp_splitA>
    47e4:	58 f1       	brcs	.+86     	; 0x483c <__fixunssfdi+0x62>
    47e6:	9f 57       	subi	r25, 0x7F	; 127
    47e8:	40 f1       	brcs	.+80     	; 0x483a <__fixunssfdi+0x60>
    47ea:	b9 17       	cp	r27, r25
    47ec:	38 f1       	brcs	.+78     	; 0x483c <__fixunssfdi+0x62>
    47ee:	bf e3       	ldi	r27, 0x3F	; 63
    47f0:	b9 1b       	sub	r27, r25
    47f2:	99 27       	eor	r25, r25
    47f4:	b8 50       	subi	r27, 0x08	; 8
    47f6:	3a f4       	brpl	.+14     	; 0x4806 <__fixunssfdi+0x2c>
    47f8:	66 0f       	add	r22, r22
    47fa:	77 1f       	adc	r23, r23
    47fc:	88 1f       	adc	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	b3 95       	inc	r27
    4802:	d2 f3       	brmi	.-12     	; 0x47f8 <__fixunssfdi+0x1e>
    4804:	16 c0       	rjmp	.+44     	; 0x4832 <__fixunssfdi+0x58>
    4806:	b8 50       	subi	r27, 0x08	; 8
    4808:	4a f0       	brmi	.+18     	; 0x481c <__fixunssfdi+0x42>
    480a:	23 2f       	mov	r18, r19
    480c:	34 2f       	mov	r19, r20
    480e:	45 2f       	mov	r20, r21
    4810:	56 2f       	mov	r21, r22
    4812:	67 2f       	mov	r22, r23
    4814:	78 2f       	mov	r23, r24
    4816:	88 27       	eor	r24, r24
    4818:	b8 50       	subi	r27, 0x08	; 8
    481a:	ba f7       	brpl	.-18     	; 0x480a <__fixunssfdi+0x30>
    481c:	b8 5f       	subi	r27, 0xF8	; 248
    481e:	49 f0       	breq	.+18     	; 0x4832 <__fixunssfdi+0x58>
    4820:	86 95       	lsr	r24
    4822:	77 95       	ror	r23
    4824:	67 95       	ror	r22
    4826:	57 95       	ror	r21
    4828:	47 95       	ror	r20
    482a:	37 95       	ror	r19
    482c:	27 95       	ror	r18
    482e:	ba 95       	dec	r27
    4830:	b9 f7       	brne	.-18     	; 0x4820 <__fixunssfdi+0x46>
    4832:	0e f4       	brtc	.+2      	; 0x4836 <__fixunssfdi+0x5c>
    4834:	4e d0       	rcall	.+156    	; 0x48d2 <__fp_negdi>
    4836:	88 94       	clc
    4838:	08 95       	ret
    483a:	88 94       	clc
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	70 e0       	ldi	r23, 0x00	; 0
    4840:	cb 01       	movw	r24, r22
    4842:	08 95       	ret

00004844 <__floatundisf>:
    4844:	e8 94       	clt

00004846 <__fp_di2sf>:
    4846:	f9 2f       	mov	r31, r25
    4848:	96 eb       	ldi	r25, 0xB6	; 182
    484a:	ff 23       	and	r31, r31
    484c:	81 f0       	breq	.+32     	; 0x486e <__fp_di2sf+0x28>
    484e:	12 16       	cp	r1, r18
    4850:	13 06       	cpc	r1, r19
    4852:	14 06       	cpc	r1, r20
    4854:	44 0b       	sbc	r20, r20
    4856:	93 95       	inc	r25
    4858:	f6 95       	lsr	r31
    485a:	87 95       	ror	r24
    485c:	77 95       	ror	r23
    485e:	67 95       	ror	r22
    4860:	57 95       	ror	r21
    4862:	40 40       	sbci	r20, 0x00	; 0
    4864:	ff 23       	and	r31, r31
    4866:	b9 f7       	brne	.-18     	; 0x4856 <__fp_di2sf+0x10>
    4868:	1b c0       	rjmp	.+54     	; 0x48a0 <__fp_di2sf+0x5a>
    486a:	99 27       	eor	r25, r25
    486c:	08 95       	ret
    486e:	88 23       	and	r24, r24
    4870:	51 f4       	brne	.+20     	; 0x4886 <__fp_di2sf+0x40>
    4872:	98 50       	subi	r25, 0x08	; 8
    4874:	d2 f7       	brpl	.-12     	; 0x486a <__fp_di2sf+0x24>
    4876:	87 2b       	or	r24, r23
    4878:	76 2f       	mov	r23, r22
    487a:	65 2f       	mov	r22, r21
    487c:	54 2f       	mov	r21, r20
    487e:	43 2f       	mov	r20, r19
    4880:	32 2f       	mov	r19, r18
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	b1 f3       	breq	.-20     	; 0x4872 <__fp_di2sf+0x2c>
    4886:	12 16       	cp	r1, r18
    4888:	13 06       	cpc	r1, r19
    488a:	14 06       	cpc	r1, r20
    488c:	44 0b       	sbc	r20, r20
    488e:	88 23       	and	r24, r24
    4890:	3a f0       	brmi	.+14     	; 0x48a0 <__fp_di2sf+0x5a>
    4892:	9a 95       	dec	r25
    4894:	44 0f       	add	r20, r20
    4896:	55 1f       	adc	r21, r21
    4898:	66 1f       	adc	r22, r22
    489a:	77 1f       	adc	r23, r23
    489c:	88 1f       	adc	r24, r24
    489e:	ca f7       	brpl	.-14     	; 0x4892 <__fp_di2sf+0x4c>
    48a0:	55 23       	and	r21, r21
    48a2:	4a f4       	brpl	.+18     	; 0x48b6 <__fp_di2sf+0x70>
    48a4:	44 0f       	add	r20, r20
    48a6:	55 1f       	adc	r21, r21
    48a8:	11 f4       	brne	.+4      	; 0x48ae <__fp_di2sf+0x68>
    48aa:	60 ff       	sbrs	r22, 0
    48ac:	04 c0       	rjmp	.+8      	; 0x48b6 <__fp_di2sf+0x70>
    48ae:	6f 5f       	subi	r22, 0xFF	; 255
    48b0:	7f 4f       	sbci	r23, 0xFF	; 255
    48b2:	8f 4f       	sbci	r24, 0xFF	; 255
    48b4:	9f 4f       	sbci	r25, 0xFF	; 255
    48b6:	88 0f       	add	r24, r24
    48b8:	96 95       	lsr	r25
    48ba:	87 95       	ror	r24
    48bc:	97 f9       	bld	r25, 7
    48be:	08 95       	ret

000048c0 <__fp_inf>:
    48c0:	97 f9       	bld	r25, 7
    48c2:	9f 67       	ori	r25, 0x7F	; 127
    48c4:	80 e8       	ldi	r24, 0x80	; 128
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	08 95       	ret

000048cc <__fp_nan>:
    48cc:	9f ef       	ldi	r25, 0xFF	; 255
    48ce:	80 ec       	ldi	r24, 0xC0	; 192
    48d0:	08 95       	ret

000048d2 <__fp_negdi>:
    48d2:	90 95       	com	r25
    48d4:	80 95       	com	r24
    48d6:	70 95       	com	r23
    48d8:	60 95       	com	r22
    48da:	50 95       	com	r21
    48dc:	40 95       	com	r20
    48de:	30 95       	com	r19
    48e0:	21 95       	neg	r18
    48e2:	3f 4f       	sbci	r19, 0xFF	; 255
    48e4:	4f 4f       	sbci	r20, 0xFF	; 255
    48e6:	5f 4f       	sbci	r21, 0xFF	; 255
    48e8:	6f 4f       	sbci	r22, 0xFF	; 255
    48ea:	7f 4f       	sbci	r23, 0xFF	; 255
    48ec:	8f 4f       	sbci	r24, 0xFF	; 255
    48ee:	9f 4f       	sbci	r25, 0xFF	; 255
    48f0:	08 95       	ret

000048f2 <__fp_pscA>:
    48f2:	00 24       	eor	r0, r0
    48f4:	0a 94       	dec	r0
    48f6:	16 16       	cp	r1, r22
    48f8:	17 06       	cpc	r1, r23
    48fa:	18 06       	cpc	r1, r24
    48fc:	09 06       	cpc	r0, r25
    48fe:	08 95       	ret

00004900 <__fp_pscB>:
    4900:	00 24       	eor	r0, r0
    4902:	0a 94       	dec	r0
    4904:	12 16       	cp	r1, r18
    4906:	13 06       	cpc	r1, r19
    4908:	14 06       	cpc	r1, r20
    490a:	05 06       	cpc	r0, r21
    490c:	08 95       	ret

0000490e <__fp_round>:
    490e:	09 2e       	mov	r0, r25
    4910:	03 94       	inc	r0
    4912:	00 0c       	add	r0, r0
    4914:	11 f4       	brne	.+4      	; 0x491a <__fp_round+0xc>
    4916:	88 23       	and	r24, r24
    4918:	52 f0       	brmi	.+20     	; 0x492e <__fp_round+0x20>
    491a:	bb 0f       	add	r27, r27
    491c:	40 f4       	brcc	.+16     	; 0x492e <__fp_round+0x20>
    491e:	bf 2b       	or	r27, r31
    4920:	11 f4       	brne	.+4      	; 0x4926 <__fp_round+0x18>
    4922:	60 ff       	sbrs	r22, 0
    4924:	04 c0       	rjmp	.+8      	; 0x492e <__fp_round+0x20>
    4926:	6f 5f       	subi	r22, 0xFF	; 255
    4928:	7f 4f       	sbci	r23, 0xFF	; 255
    492a:	8f 4f       	sbci	r24, 0xFF	; 255
    492c:	9f 4f       	sbci	r25, 0xFF	; 255
    492e:	08 95       	ret

00004930 <__fp_split3>:
    4930:	57 fd       	sbrc	r21, 7
    4932:	90 58       	subi	r25, 0x80	; 128
    4934:	44 0f       	add	r20, r20
    4936:	55 1f       	adc	r21, r21
    4938:	59 f0       	breq	.+22     	; 0x4950 <__fp_splitA+0x10>
    493a:	5f 3f       	cpi	r21, 0xFF	; 255
    493c:	71 f0       	breq	.+28     	; 0x495a <__fp_splitA+0x1a>
    493e:	47 95       	ror	r20

00004940 <__fp_splitA>:
    4940:	88 0f       	add	r24, r24
    4942:	97 fb       	bst	r25, 7
    4944:	99 1f       	adc	r25, r25
    4946:	61 f0       	breq	.+24     	; 0x4960 <__fp_splitA+0x20>
    4948:	9f 3f       	cpi	r25, 0xFF	; 255
    494a:	79 f0       	breq	.+30     	; 0x496a <__fp_splitA+0x2a>
    494c:	87 95       	ror	r24
    494e:	08 95       	ret
    4950:	12 16       	cp	r1, r18
    4952:	13 06       	cpc	r1, r19
    4954:	14 06       	cpc	r1, r20
    4956:	55 1f       	adc	r21, r21
    4958:	f2 cf       	rjmp	.-28     	; 0x493e <__fp_split3+0xe>
    495a:	46 95       	lsr	r20
    495c:	f1 df       	rcall	.-30     	; 0x4940 <__fp_splitA>
    495e:	08 c0       	rjmp	.+16     	; 0x4970 <__fp_splitA+0x30>
    4960:	16 16       	cp	r1, r22
    4962:	17 06       	cpc	r1, r23
    4964:	18 06       	cpc	r1, r24
    4966:	99 1f       	adc	r25, r25
    4968:	f1 cf       	rjmp	.-30     	; 0x494c <__fp_splitA+0xc>
    496a:	86 95       	lsr	r24
    496c:	71 05       	cpc	r23, r1
    496e:	61 05       	cpc	r22, r1
    4970:	08 94       	sec
    4972:	08 95       	ret

00004974 <__fp_zero>:
    4974:	e8 94       	clt

00004976 <__fp_szero>:
    4976:	bb 27       	eor	r27, r27
    4978:	66 27       	eor	r22, r22
    497a:	77 27       	eor	r23, r23
    497c:	cb 01       	movw	r24, r22
    497e:	97 f9       	bld	r25, 7
    4980:	08 95       	ret

00004982 <vfprintf>:
    4982:	2f 92       	push	r2
    4984:	3f 92       	push	r3
    4986:	4f 92       	push	r4
    4988:	5f 92       	push	r5
    498a:	6f 92       	push	r6
    498c:	7f 92       	push	r7
    498e:	8f 92       	push	r8
    4990:	9f 92       	push	r9
    4992:	af 92       	push	r10
    4994:	bf 92       	push	r11
    4996:	cf 92       	push	r12
    4998:	df 92       	push	r13
    499a:	ef 92       	push	r14
    499c:	ff 92       	push	r15
    499e:	0f 93       	push	r16
    49a0:	1f 93       	push	r17
    49a2:	cf 93       	push	r28
    49a4:	df 93       	push	r29
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	60 97       	sbiw	r28, 0x10	; 16
    49ac:	cd bf       	out	0x3d, r28	; 61
    49ae:	de bf       	out	0x3e, r29	; 62
    49b0:	7c 01       	movw	r14, r24
    49b2:	1b 01       	movw	r2, r22
    49b4:	6a 01       	movw	r12, r20
    49b6:	fc 01       	movw	r30, r24
    49b8:	16 82       	std	Z+6, r1	; 0x06
    49ba:	17 82       	std	Z+7, r1	; 0x07
    49bc:	83 81       	ldd	r24, Z+3	; 0x03
    49be:	81 ff       	sbrs	r24, 1
    49c0:	2a c3       	rjmp	.+1620   	; 0x5016 <vfprintf+0x694>
    49c2:	9e 01       	movw	r18, r28
    49c4:	2f 5f       	subi	r18, 0xFF	; 255
    49c6:	3f 4f       	sbci	r19, 0xFF	; 255
    49c8:	39 01       	movw	r6, r18
    49ca:	f7 01       	movw	r30, r14
    49cc:	93 81       	ldd	r25, Z+3	; 0x03
    49ce:	f1 01       	movw	r30, r2
    49d0:	93 fd       	sbrc	r25, 3
    49d2:	85 91       	lpm	r24, Z+
    49d4:	93 ff       	sbrs	r25, 3
    49d6:	81 91       	ld	r24, Z+
    49d8:	1f 01       	movw	r2, r30
    49da:	88 23       	and	r24, r24
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <vfprintf+0x5e>
    49de:	17 c3       	rjmp	.+1582   	; 0x500e <vfprintf+0x68c>
    49e0:	85 32       	cpi	r24, 0x25	; 37
    49e2:	39 f4       	brne	.+14     	; 0x49f2 <vfprintf+0x70>
    49e4:	93 fd       	sbrc	r25, 3
    49e6:	85 91       	lpm	r24, Z+
    49e8:	93 ff       	sbrs	r25, 3
    49ea:	81 91       	ld	r24, Z+
    49ec:	1f 01       	movw	r2, r30
    49ee:	85 32       	cpi	r24, 0x25	; 37
    49f0:	31 f4       	brne	.+12     	; 0x49fe <vfprintf+0x7c>
    49f2:	b7 01       	movw	r22, r14
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	4c d6       	rcall	.+3224   	; 0x5690 <fputc>
    49f8:	56 01       	movw	r10, r12
    49fa:	65 01       	movw	r12, r10
    49fc:	e6 cf       	rjmp	.-52     	; 0x49ca <vfprintf+0x48>
    49fe:	10 e0       	ldi	r17, 0x00	; 0
    4a00:	51 2c       	mov	r5, r1
    4a02:	91 2c       	mov	r9, r1
    4a04:	ff e1       	ldi	r31, 0x1F	; 31
    4a06:	f9 15       	cp	r31, r9
    4a08:	d8 f0       	brcs	.+54     	; 0x4a40 <vfprintf+0xbe>
    4a0a:	8b 32       	cpi	r24, 0x2B	; 43
    4a0c:	79 f0       	breq	.+30     	; 0x4a2c <vfprintf+0xaa>
    4a0e:	38 f4       	brcc	.+14     	; 0x4a1e <vfprintf+0x9c>
    4a10:	80 32       	cpi	r24, 0x20	; 32
    4a12:	79 f0       	breq	.+30     	; 0x4a32 <vfprintf+0xb0>
    4a14:	83 32       	cpi	r24, 0x23	; 35
    4a16:	a1 f4       	brne	.+40     	; 0x4a40 <vfprintf+0xbe>
    4a18:	f9 2d       	mov	r31, r9
    4a1a:	f0 61       	ori	r31, 0x10	; 16
    4a1c:	2e c0       	rjmp	.+92     	; 0x4a7a <vfprintf+0xf8>
    4a1e:	8d 32       	cpi	r24, 0x2D	; 45
    4a20:	61 f0       	breq	.+24     	; 0x4a3a <vfprintf+0xb8>
    4a22:	80 33       	cpi	r24, 0x30	; 48
    4a24:	69 f4       	brne	.+26     	; 0x4a40 <vfprintf+0xbe>
    4a26:	29 2d       	mov	r18, r9
    4a28:	21 60       	ori	r18, 0x01	; 1
    4a2a:	2d c0       	rjmp	.+90     	; 0x4a86 <vfprintf+0x104>
    4a2c:	39 2d       	mov	r19, r9
    4a2e:	32 60       	ori	r19, 0x02	; 2
    4a30:	93 2e       	mov	r9, r19
    4a32:	89 2d       	mov	r24, r9
    4a34:	84 60       	ori	r24, 0x04	; 4
    4a36:	98 2e       	mov	r9, r24
    4a38:	2a c0       	rjmp	.+84     	; 0x4a8e <vfprintf+0x10c>
    4a3a:	e9 2d       	mov	r30, r9
    4a3c:	e8 60       	ori	r30, 0x08	; 8
    4a3e:	15 c0       	rjmp	.+42     	; 0x4a6a <vfprintf+0xe8>
    4a40:	97 fc       	sbrc	r9, 7
    4a42:	2d c0       	rjmp	.+90     	; 0x4a9e <vfprintf+0x11c>
    4a44:	20 ed       	ldi	r18, 0xD0	; 208
    4a46:	28 0f       	add	r18, r24
    4a48:	2a 30       	cpi	r18, 0x0A	; 10
    4a4a:	88 f4       	brcc	.+34     	; 0x4a6e <vfprintf+0xec>
    4a4c:	96 fe       	sbrs	r9, 6
    4a4e:	06 c0       	rjmp	.+12     	; 0x4a5c <vfprintf+0xda>
    4a50:	3a e0       	ldi	r19, 0x0A	; 10
    4a52:	13 9f       	mul	r17, r19
    4a54:	20 0d       	add	r18, r0
    4a56:	11 24       	eor	r1, r1
    4a58:	12 2f       	mov	r17, r18
    4a5a:	19 c0       	rjmp	.+50     	; 0x4a8e <vfprintf+0x10c>
    4a5c:	8a e0       	ldi	r24, 0x0A	; 10
    4a5e:	58 9e       	mul	r5, r24
    4a60:	20 0d       	add	r18, r0
    4a62:	11 24       	eor	r1, r1
    4a64:	52 2e       	mov	r5, r18
    4a66:	e9 2d       	mov	r30, r9
    4a68:	e0 62       	ori	r30, 0x20	; 32
    4a6a:	9e 2e       	mov	r9, r30
    4a6c:	10 c0       	rjmp	.+32     	; 0x4a8e <vfprintf+0x10c>
    4a6e:	8e 32       	cpi	r24, 0x2E	; 46
    4a70:	31 f4       	brne	.+12     	; 0x4a7e <vfprintf+0xfc>
    4a72:	96 fc       	sbrc	r9, 6
    4a74:	cc c2       	rjmp	.+1432   	; 0x500e <vfprintf+0x68c>
    4a76:	f9 2d       	mov	r31, r9
    4a78:	f0 64       	ori	r31, 0x40	; 64
    4a7a:	9f 2e       	mov	r9, r31
    4a7c:	08 c0       	rjmp	.+16     	; 0x4a8e <vfprintf+0x10c>
    4a7e:	8c 36       	cpi	r24, 0x6C	; 108
    4a80:	21 f4       	brne	.+8      	; 0x4a8a <vfprintf+0x108>
    4a82:	29 2d       	mov	r18, r9
    4a84:	20 68       	ori	r18, 0x80	; 128
    4a86:	92 2e       	mov	r9, r18
    4a88:	02 c0       	rjmp	.+4      	; 0x4a8e <vfprintf+0x10c>
    4a8a:	88 36       	cpi	r24, 0x68	; 104
    4a8c:	41 f4       	brne	.+16     	; 0x4a9e <vfprintf+0x11c>
    4a8e:	f1 01       	movw	r30, r2
    4a90:	93 fd       	sbrc	r25, 3
    4a92:	85 91       	lpm	r24, Z+
    4a94:	93 ff       	sbrs	r25, 3
    4a96:	81 91       	ld	r24, Z+
    4a98:	1f 01       	movw	r2, r30
    4a9a:	81 11       	cpse	r24, r1
    4a9c:	b3 cf       	rjmp	.-154    	; 0x4a04 <vfprintf+0x82>
    4a9e:	9b eb       	ldi	r25, 0xBB	; 187
    4aa0:	98 0f       	add	r25, r24
    4aa2:	93 30       	cpi	r25, 0x03	; 3
    4aa4:	20 f4       	brcc	.+8      	; 0x4aae <vfprintf+0x12c>
    4aa6:	99 2d       	mov	r25, r9
    4aa8:	90 61       	ori	r25, 0x10	; 16
    4aaa:	80 5e       	subi	r24, 0xE0	; 224
    4aac:	07 c0       	rjmp	.+14     	; 0x4abc <vfprintf+0x13a>
    4aae:	9b e9       	ldi	r25, 0x9B	; 155
    4ab0:	98 0f       	add	r25, r24
    4ab2:	93 30       	cpi	r25, 0x03	; 3
    4ab4:	08 f0       	brcs	.+2      	; 0x4ab8 <vfprintf+0x136>
    4ab6:	59 c1       	rjmp	.+690    	; 0x4d6a <vfprintf+0x3e8>
    4ab8:	99 2d       	mov	r25, r9
    4aba:	9f 7e       	andi	r25, 0xEF	; 239
    4abc:	96 ff       	sbrs	r25, 6
    4abe:	16 e0       	ldi	r17, 0x06	; 6
    4ac0:	9f 73       	andi	r25, 0x3F	; 63
    4ac2:	99 2e       	mov	r9, r25
    4ac4:	85 36       	cpi	r24, 0x65	; 101
    4ac6:	19 f4       	brne	.+6      	; 0x4ace <vfprintf+0x14c>
    4ac8:	90 64       	ori	r25, 0x40	; 64
    4aca:	99 2e       	mov	r9, r25
    4acc:	08 c0       	rjmp	.+16     	; 0x4ade <vfprintf+0x15c>
    4ace:	86 36       	cpi	r24, 0x66	; 102
    4ad0:	21 f4       	brne	.+8      	; 0x4ada <vfprintf+0x158>
    4ad2:	39 2f       	mov	r19, r25
    4ad4:	30 68       	ori	r19, 0x80	; 128
    4ad6:	93 2e       	mov	r9, r19
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <vfprintf+0x15c>
    4ada:	11 11       	cpse	r17, r1
    4adc:	11 50       	subi	r17, 0x01	; 1
    4ade:	97 fe       	sbrs	r9, 7
    4ae0:	07 c0       	rjmp	.+14     	; 0x4af0 <vfprintf+0x16e>
    4ae2:	1c 33       	cpi	r17, 0x3C	; 60
    4ae4:	50 f4       	brcc	.+20     	; 0x4afa <vfprintf+0x178>
    4ae6:	44 24       	eor	r4, r4
    4ae8:	43 94       	inc	r4
    4aea:	41 0e       	add	r4, r17
    4aec:	27 e0       	ldi	r18, 0x07	; 7
    4aee:	0b c0       	rjmp	.+22     	; 0x4b06 <vfprintf+0x184>
    4af0:	18 30       	cpi	r17, 0x08	; 8
    4af2:	38 f0       	brcs	.+14     	; 0x4b02 <vfprintf+0x180>
    4af4:	27 e0       	ldi	r18, 0x07	; 7
    4af6:	17 e0       	ldi	r17, 0x07	; 7
    4af8:	05 c0       	rjmp	.+10     	; 0x4b04 <vfprintf+0x182>
    4afa:	27 e0       	ldi	r18, 0x07	; 7
    4afc:	9c e3       	ldi	r25, 0x3C	; 60
    4afe:	49 2e       	mov	r4, r25
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <vfprintf+0x184>
    4b02:	21 2f       	mov	r18, r17
    4b04:	41 2c       	mov	r4, r1
    4b06:	56 01       	movw	r10, r12
    4b08:	84 e0       	ldi	r24, 0x04	; 4
    4b0a:	a8 0e       	add	r10, r24
    4b0c:	b1 1c       	adc	r11, r1
    4b0e:	f6 01       	movw	r30, r12
    4b10:	60 81       	ld	r22, Z
    4b12:	71 81       	ldd	r23, Z+1	; 0x01
    4b14:	82 81       	ldd	r24, Z+2	; 0x02
    4b16:	93 81       	ldd	r25, Z+3	; 0x03
    4b18:	04 2d       	mov	r16, r4
    4b1a:	a3 01       	movw	r20, r6
    4b1c:	81 d4       	rcall	.+2306   	; 0x5420 <__ftoa_engine>
    4b1e:	6c 01       	movw	r12, r24
    4b20:	f9 81       	ldd	r31, Y+1	; 0x01
    4b22:	fc 87       	std	Y+12, r31	; 0x0c
    4b24:	f0 ff       	sbrs	r31, 0
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <vfprintf+0x1aa>
    4b28:	f3 ff       	sbrs	r31, 3
    4b2a:	06 c0       	rjmp	.+12     	; 0x4b38 <vfprintf+0x1b6>
    4b2c:	91 fc       	sbrc	r9, 1
    4b2e:	06 c0       	rjmp	.+12     	; 0x4b3c <vfprintf+0x1ba>
    4b30:	92 fe       	sbrs	r9, 2
    4b32:	06 c0       	rjmp	.+12     	; 0x4b40 <vfprintf+0x1be>
    4b34:	00 e2       	ldi	r16, 0x20	; 32
    4b36:	05 c0       	rjmp	.+10     	; 0x4b42 <vfprintf+0x1c0>
    4b38:	0d e2       	ldi	r16, 0x2D	; 45
    4b3a:	03 c0       	rjmp	.+6      	; 0x4b42 <vfprintf+0x1c0>
    4b3c:	0b e2       	ldi	r16, 0x2B	; 43
    4b3e:	01 c0       	rjmp	.+2      	; 0x4b42 <vfprintf+0x1c0>
    4b40:	00 e0       	ldi	r16, 0x00	; 0
    4b42:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b44:	8c 70       	andi	r24, 0x0C	; 12
    4b46:	19 f0       	breq	.+6      	; 0x4b4e <vfprintf+0x1cc>
    4b48:	01 11       	cpse	r16, r1
    4b4a:	43 c2       	rjmp	.+1158   	; 0x4fd2 <vfprintf+0x650>
    4b4c:	80 c2       	rjmp	.+1280   	; 0x504e <vfprintf+0x6cc>
    4b4e:	97 fe       	sbrs	r9, 7
    4b50:	10 c0       	rjmp	.+32     	; 0x4b72 <vfprintf+0x1f0>
    4b52:	4c 0c       	add	r4, r12
    4b54:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b56:	f4 ff       	sbrs	r31, 4
    4b58:	04 c0       	rjmp	.+8      	; 0x4b62 <vfprintf+0x1e0>
    4b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5c:	81 33       	cpi	r24, 0x31	; 49
    4b5e:	09 f4       	brne	.+2      	; 0x4b62 <vfprintf+0x1e0>
    4b60:	4a 94       	dec	r4
    4b62:	14 14       	cp	r1, r4
    4b64:	74 f5       	brge	.+92     	; 0x4bc2 <vfprintf+0x240>
    4b66:	28 e0       	ldi	r18, 0x08	; 8
    4b68:	24 15       	cp	r18, r4
    4b6a:	78 f5       	brcc	.+94     	; 0x4bca <vfprintf+0x248>
    4b6c:	88 e0       	ldi	r24, 0x08	; 8
    4b6e:	48 2e       	mov	r4, r24
    4b70:	2c c0       	rjmp	.+88     	; 0x4bca <vfprintf+0x248>
    4b72:	96 fc       	sbrc	r9, 6
    4b74:	2a c0       	rjmp	.+84     	; 0x4bca <vfprintf+0x248>
    4b76:	81 2f       	mov	r24, r17
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	8c 15       	cp	r24, r12
    4b7c:	9d 05       	cpc	r25, r13
    4b7e:	9c f0       	brlt	.+38     	; 0x4ba6 <vfprintf+0x224>
    4b80:	3c ef       	ldi	r19, 0xFC	; 252
    4b82:	c3 16       	cp	r12, r19
    4b84:	3f ef       	ldi	r19, 0xFF	; 255
    4b86:	d3 06       	cpc	r13, r19
    4b88:	74 f0       	brlt	.+28     	; 0x4ba6 <vfprintf+0x224>
    4b8a:	89 2d       	mov	r24, r9
    4b8c:	80 68       	ori	r24, 0x80	; 128
    4b8e:	98 2e       	mov	r9, r24
    4b90:	0a c0       	rjmp	.+20     	; 0x4ba6 <vfprintf+0x224>
    4b92:	e2 e0       	ldi	r30, 0x02	; 2
    4b94:	f0 e0       	ldi	r31, 0x00	; 0
    4b96:	ec 0f       	add	r30, r28
    4b98:	fd 1f       	adc	r31, r29
    4b9a:	e1 0f       	add	r30, r17
    4b9c:	f1 1d       	adc	r31, r1
    4b9e:	80 81       	ld	r24, Z
    4ba0:	80 33       	cpi	r24, 0x30	; 48
    4ba2:	19 f4       	brne	.+6      	; 0x4baa <vfprintf+0x228>
    4ba4:	11 50       	subi	r17, 0x01	; 1
    4ba6:	11 11       	cpse	r17, r1
    4ba8:	f4 cf       	rjmp	.-24     	; 0x4b92 <vfprintf+0x210>
    4baa:	97 fe       	sbrs	r9, 7
    4bac:	0e c0       	rjmp	.+28     	; 0x4bca <vfprintf+0x248>
    4bae:	44 24       	eor	r4, r4
    4bb0:	43 94       	inc	r4
    4bb2:	41 0e       	add	r4, r17
    4bb4:	81 2f       	mov	r24, r17
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	c8 16       	cp	r12, r24
    4bba:	d9 06       	cpc	r13, r25
    4bbc:	2c f4       	brge	.+10     	; 0x4bc8 <vfprintf+0x246>
    4bbe:	1c 19       	sub	r17, r12
    4bc0:	04 c0       	rjmp	.+8      	; 0x4bca <vfprintf+0x248>
    4bc2:	44 24       	eor	r4, r4
    4bc4:	43 94       	inc	r4
    4bc6:	01 c0       	rjmp	.+2      	; 0x4bca <vfprintf+0x248>
    4bc8:	10 e0       	ldi	r17, 0x00	; 0
    4bca:	97 fe       	sbrs	r9, 7
    4bcc:	06 c0       	rjmp	.+12     	; 0x4bda <vfprintf+0x258>
    4bce:	1c 14       	cp	r1, r12
    4bd0:	1d 04       	cpc	r1, r13
    4bd2:	34 f4       	brge	.+12     	; 0x4be0 <vfprintf+0x25e>
    4bd4:	c6 01       	movw	r24, r12
    4bd6:	01 96       	adiw	r24, 0x01	; 1
    4bd8:	05 c0       	rjmp	.+10     	; 0x4be4 <vfprintf+0x262>
    4bda:	85 e0       	ldi	r24, 0x05	; 5
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	02 c0       	rjmp	.+4      	; 0x4be4 <vfprintf+0x262>
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	01 11       	cpse	r16, r1
    4be6:	01 96       	adiw	r24, 0x01	; 1
    4be8:	11 23       	and	r17, r17
    4bea:	31 f0       	breq	.+12     	; 0x4bf8 <vfprintf+0x276>
    4bec:	21 2f       	mov	r18, r17
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	2f 5f       	subi	r18, 0xFF	; 255
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	82 0f       	add	r24, r18
    4bf6:	93 1f       	adc	r25, r19
    4bf8:	25 2d       	mov	r18, r5
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	82 17       	cp	r24, r18
    4bfe:	93 07       	cpc	r25, r19
    4c00:	14 f4       	brge	.+4      	; 0x4c06 <vfprintf+0x284>
    4c02:	58 1a       	sub	r5, r24
    4c04:	01 c0       	rjmp	.+2      	; 0x4c08 <vfprintf+0x286>
    4c06:	51 2c       	mov	r5, r1
    4c08:	89 2d       	mov	r24, r9
    4c0a:	89 70       	andi	r24, 0x09	; 9
    4c0c:	41 f4       	brne	.+16     	; 0x4c1e <vfprintf+0x29c>
    4c0e:	55 20       	and	r5, r5
    4c10:	31 f0       	breq	.+12     	; 0x4c1e <vfprintf+0x29c>
    4c12:	b7 01       	movw	r22, r14
    4c14:	80 e2       	ldi	r24, 0x20	; 32
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	3b d5       	rcall	.+2678   	; 0x5690 <fputc>
    4c1a:	5a 94       	dec	r5
    4c1c:	f8 cf       	rjmp	.-16     	; 0x4c0e <vfprintf+0x28c>
    4c1e:	00 23       	and	r16, r16
    4c20:	21 f0       	breq	.+8      	; 0x4c2a <vfprintf+0x2a8>
    4c22:	b7 01       	movw	r22, r14
    4c24:	80 2f       	mov	r24, r16
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	33 d5       	rcall	.+2662   	; 0x5690 <fputc>
    4c2a:	93 fc       	sbrc	r9, 3
    4c2c:	08 c0       	rjmp	.+16     	; 0x4c3e <vfprintf+0x2bc>
    4c2e:	55 20       	and	r5, r5
    4c30:	31 f0       	breq	.+12     	; 0x4c3e <vfprintf+0x2bc>
    4c32:	b7 01       	movw	r22, r14
    4c34:	80 e3       	ldi	r24, 0x30	; 48
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	2b d5       	rcall	.+2646   	; 0x5690 <fputc>
    4c3a:	5a 94       	dec	r5
    4c3c:	f8 cf       	rjmp	.-16     	; 0x4c2e <vfprintf+0x2ac>
    4c3e:	97 fe       	sbrs	r9, 7
    4c40:	4a c0       	rjmp	.+148    	; 0x4cd6 <vfprintf+0x354>
    4c42:	46 01       	movw	r8, r12
    4c44:	d7 fe       	sbrs	r13, 7
    4c46:	02 c0       	rjmp	.+4      	; 0x4c4c <vfprintf+0x2ca>
    4c48:	81 2c       	mov	r8, r1
    4c4a:	91 2c       	mov	r9, r1
    4c4c:	c6 01       	movw	r24, r12
    4c4e:	88 19       	sub	r24, r8
    4c50:	99 09       	sbc	r25, r9
    4c52:	f3 01       	movw	r30, r6
    4c54:	e8 0f       	add	r30, r24
    4c56:	f9 1f       	adc	r31, r25
    4c58:	ed 87       	std	Y+13, r30	; 0x0d
    4c5a:	fe 87       	std	Y+14, r31	; 0x0e
    4c5c:	96 01       	movw	r18, r12
    4c5e:	24 19       	sub	r18, r4
    4c60:	31 09       	sbc	r19, r1
    4c62:	2f 87       	std	Y+15, r18	; 0x0f
    4c64:	38 8b       	std	Y+16, r19	; 0x10
    4c66:	01 2f       	mov	r16, r17
    4c68:	10 e0       	ldi	r17, 0x00	; 0
    4c6a:	11 95       	neg	r17
    4c6c:	01 95       	neg	r16
    4c6e:	11 09       	sbc	r17, r1
    4c70:	3f ef       	ldi	r19, 0xFF	; 255
    4c72:	83 16       	cp	r8, r19
    4c74:	93 06       	cpc	r9, r19
    4c76:	21 f4       	brne	.+8      	; 0x4c80 <vfprintf+0x2fe>
    4c78:	b7 01       	movw	r22, r14
    4c7a:	8e e2       	ldi	r24, 0x2E	; 46
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	08 d5       	rcall	.+2576   	; 0x5690 <fputc>
    4c80:	c8 14       	cp	r12, r8
    4c82:	d9 04       	cpc	r13, r9
    4c84:	4c f0       	brlt	.+18     	; 0x4c98 <vfprintf+0x316>
    4c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c88:	98 89       	ldd	r25, Y+16	; 0x10
    4c8a:	88 15       	cp	r24, r8
    4c8c:	99 05       	cpc	r25, r9
    4c8e:	24 f4       	brge	.+8      	; 0x4c98 <vfprintf+0x316>
    4c90:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c92:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c94:	81 81       	ldd	r24, Z+1	; 0x01
    4c96:	01 c0       	rjmp	.+2      	; 0x4c9a <vfprintf+0x318>
    4c98:	80 e3       	ldi	r24, 0x30	; 48
    4c9a:	f1 e0       	ldi	r31, 0x01	; 1
    4c9c:	8f 1a       	sub	r8, r31
    4c9e:	91 08       	sbc	r9, r1
    4ca0:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ca2:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ca4:	2f 5f       	subi	r18, 0xFF	; 255
    4ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca8:	2d 87       	std	Y+13, r18	; 0x0d
    4caa:	3e 87       	std	Y+14, r19	; 0x0e
    4cac:	80 16       	cp	r8, r16
    4cae:	91 06       	cpc	r9, r17
    4cb0:	24 f0       	brlt	.+8      	; 0x4cba <vfprintf+0x338>
    4cb2:	b7 01       	movw	r22, r14
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	ec d4       	rcall	.+2520   	; 0x5690 <fputc>
    4cb8:	db cf       	rjmp	.-74     	; 0x4c70 <vfprintf+0x2ee>
    4cba:	c8 14       	cp	r12, r8
    4cbc:	d9 04       	cpc	r13, r9
    4cbe:	41 f4       	brne	.+16     	; 0x4cd0 <vfprintf+0x34e>
    4cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc2:	96 33       	cpi	r25, 0x36	; 54
    4cc4:	20 f4       	brcc	.+8      	; 0x4cce <vfprintf+0x34c>
    4cc6:	95 33       	cpi	r25, 0x35	; 53
    4cc8:	19 f4       	brne	.+6      	; 0x4cd0 <vfprintf+0x34e>
    4cca:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ccc:	34 ff       	sbrs	r19, 4
    4cce:	81 e3       	ldi	r24, 0x31	; 49
    4cd0:	b7 01       	movw	r22, r14
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	48 c0       	rjmp	.+144    	; 0x4d66 <vfprintf+0x3e4>
    4cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd8:	81 33       	cpi	r24, 0x31	; 49
    4cda:	19 f0       	breq	.+6      	; 0x4ce2 <vfprintf+0x360>
    4cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cde:	9f 7e       	andi	r25, 0xEF	; 239
    4ce0:	9c 87       	std	Y+12, r25	; 0x0c
    4ce2:	b7 01       	movw	r22, r14
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	d4 d4       	rcall	.+2472   	; 0x5690 <fputc>
    4ce8:	11 11       	cpse	r17, r1
    4cea:	05 c0       	rjmp	.+10     	; 0x4cf6 <vfprintf+0x374>
    4cec:	94 fc       	sbrc	r9, 4
    4cee:	16 c0       	rjmp	.+44     	; 0x4d1c <vfprintf+0x39a>
    4cf0:	85 e6       	ldi	r24, 0x65	; 101
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	15 c0       	rjmp	.+42     	; 0x4d20 <vfprintf+0x39e>
    4cf6:	b7 01       	movw	r22, r14
    4cf8:	8e e2       	ldi	r24, 0x2E	; 46
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	c9 d4       	rcall	.+2450   	; 0x5690 <fputc>
    4cfe:	1e 5f       	subi	r17, 0xFE	; 254
    4d00:	82 e0       	ldi	r24, 0x02	; 2
    4d02:	01 e0       	ldi	r16, 0x01	; 1
    4d04:	08 0f       	add	r16, r24
    4d06:	f3 01       	movw	r30, r6
    4d08:	e8 0f       	add	r30, r24
    4d0a:	f1 1d       	adc	r31, r1
    4d0c:	80 81       	ld	r24, Z
    4d0e:	b7 01       	movw	r22, r14
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	be d4       	rcall	.+2428   	; 0x5690 <fputc>
    4d14:	80 2f       	mov	r24, r16
    4d16:	01 13       	cpse	r16, r17
    4d18:	f4 cf       	rjmp	.-24     	; 0x4d02 <vfprintf+0x380>
    4d1a:	e8 cf       	rjmp	.-48     	; 0x4cec <vfprintf+0x36a>
    4d1c:	85 e4       	ldi	r24, 0x45	; 69
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	b7 01       	movw	r22, r14
    4d22:	b6 d4       	rcall	.+2412   	; 0x5690 <fputc>
    4d24:	d7 fc       	sbrc	r13, 7
    4d26:	06 c0       	rjmp	.+12     	; 0x4d34 <vfprintf+0x3b2>
    4d28:	c1 14       	cp	r12, r1
    4d2a:	d1 04       	cpc	r13, r1
    4d2c:	41 f4       	brne	.+16     	; 0x4d3e <vfprintf+0x3bc>
    4d2e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d30:	e4 ff       	sbrs	r30, 4
    4d32:	05 c0       	rjmp	.+10     	; 0x4d3e <vfprintf+0x3bc>
    4d34:	d1 94       	neg	r13
    4d36:	c1 94       	neg	r12
    4d38:	d1 08       	sbc	r13, r1
    4d3a:	8d e2       	ldi	r24, 0x2D	; 45
    4d3c:	01 c0       	rjmp	.+2      	; 0x4d40 <vfprintf+0x3be>
    4d3e:	8b e2       	ldi	r24, 0x2B	; 43
    4d40:	b7 01       	movw	r22, r14
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	a5 d4       	rcall	.+2378   	; 0x5690 <fputc>
    4d46:	80 e3       	ldi	r24, 0x30	; 48
    4d48:	2a e0       	ldi	r18, 0x0A	; 10
    4d4a:	c2 16       	cp	r12, r18
    4d4c:	d1 04       	cpc	r13, r1
    4d4e:	2c f0       	brlt	.+10     	; 0x4d5a <vfprintf+0x3d8>
    4d50:	8f 5f       	subi	r24, 0xFF	; 255
    4d52:	fa e0       	ldi	r31, 0x0A	; 10
    4d54:	cf 1a       	sub	r12, r31
    4d56:	d1 08       	sbc	r13, r1
    4d58:	f7 cf       	rjmp	.-18     	; 0x4d48 <vfprintf+0x3c6>
    4d5a:	b7 01       	movw	r22, r14
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	98 d4       	rcall	.+2352   	; 0x5690 <fputc>
    4d60:	b7 01       	movw	r22, r14
    4d62:	c6 01       	movw	r24, r12
    4d64:	c0 96       	adiw	r24, 0x30	; 48
    4d66:	94 d4       	rcall	.+2344   	; 0x5690 <fputc>
    4d68:	49 c1       	rjmp	.+658    	; 0x4ffc <vfprintf+0x67a>
    4d6a:	83 36       	cpi	r24, 0x63	; 99
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <vfprintf+0x3f8>
    4d6e:	83 37       	cpi	r24, 0x73	; 115
    4d70:	79 f0       	breq	.+30     	; 0x4d90 <vfprintf+0x40e>
    4d72:	83 35       	cpi	r24, 0x53	; 83
    4d74:	09 f0       	breq	.+2      	; 0x4d78 <vfprintf+0x3f6>
    4d76:	52 c0       	rjmp	.+164    	; 0x4e1c <vfprintf+0x49a>
    4d78:	1f c0       	rjmp	.+62     	; 0x4db8 <vfprintf+0x436>
    4d7a:	56 01       	movw	r10, r12
    4d7c:	32 e0       	ldi	r19, 0x02	; 2
    4d7e:	a3 0e       	add	r10, r19
    4d80:	b1 1c       	adc	r11, r1
    4d82:	f6 01       	movw	r30, r12
    4d84:	80 81       	ld	r24, Z
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	01 e0       	ldi	r16, 0x01	; 1
    4d8a:	10 e0       	ldi	r17, 0x00	; 0
    4d8c:	63 01       	movw	r12, r6
    4d8e:	11 c0       	rjmp	.+34     	; 0x4db2 <vfprintf+0x430>
    4d90:	56 01       	movw	r10, r12
    4d92:	f2 e0       	ldi	r31, 0x02	; 2
    4d94:	af 0e       	add	r10, r31
    4d96:	b1 1c       	adc	r11, r1
    4d98:	f6 01       	movw	r30, r12
    4d9a:	c0 80       	ld	r12, Z
    4d9c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d9e:	96 fe       	sbrs	r9, 6
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <vfprintf+0x426>
    4da2:	61 2f       	mov	r22, r17
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <vfprintf+0x42a>
    4da8:	6f ef       	ldi	r22, 0xFF	; 255
    4daa:	7f ef       	ldi	r23, 0xFF	; 255
    4dac:	c6 01       	movw	r24, r12
    4dae:	1b d4       	rcall	.+2102   	; 0x55e6 <strnlen>
    4db0:	8c 01       	movw	r16, r24
    4db2:	f9 2d       	mov	r31, r9
    4db4:	ff 77       	andi	r31, 0x7F	; 127
    4db6:	13 c0       	rjmp	.+38     	; 0x4dde <vfprintf+0x45c>
    4db8:	56 01       	movw	r10, r12
    4dba:	22 e0       	ldi	r18, 0x02	; 2
    4dbc:	a2 0e       	add	r10, r18
    4dbe:	b1 1c       	adc	r11, r1
    4dc0:	f6 01       	movw	r30, r12
    4dc2:	c0 80       	ld	r12, Z
    4dc4:	d1 80       	ldd	r13, Z+1	; 0x01
    4dc6:	96 fe       	sbrs	r9, 6
    4dc8:	03 c0       	rjmp	.+6      	; 0x4dd0 <vfprintf+0x44e>
    4dca:	61 2f       	mov	r22, r17
    4dcc:	70 e0       	ldi	r23, 0x00	; 0
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <vfprintf+0x452>
    4dd0:	6f ef       	ldi	r22, 0xFF	; 255
    4dd2:	7f ef       	ldi	r23, 0xFF	; 255
    4dd4:	c6 01       	movw	r24, r12
    4dd6:	fc d3       	rcall	.+2040   	; 0x55d0 <strnlen_P>
    4dd8:	8c 01       	movw	r16, r24
    4dda:	f9 2d       	mov	r31, r9
    4ddc:	f0 68       	ori	r31, 0x80	; 128
    4dde:	9f 2e       	mov	r9, r31
    4de0:	f3 fd       	sbrc	r31, 3
    4de2:	18 c0       	rjmp	.+48     	; 0x4e14 <vfprintf+0x492>
    4de4:	85 2d       	mov	r24, r5
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	08 17       	cp	r16, r24
    4dea:	19 07       	cpc	r17, r25
    4dec:	98 f4       	brcc	.+38     	; 0x4e14 <vfprintf+0x492>
    4dee:	b7 01       	movw	r22, r14
    4df0:	80 e2       	ldi	r24, 0x20	; 32
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	4d d4       	rcall	.+2202   	; 0x5690 <fputc>
    4df6:	5a 94       	dec	r5
    4df8:	f5 cf       	rjmp	.-22     	; 0x4de4 <vfprintf+0x462>
    4dfa:	f6 01       	movw	r30, r12
    4dfc:	97 fc       	sbrc	r9, 7
    4dfe:	85 91       	lpm	r24, Z+
    4e00:	97 fe       	sbrs	r9, 7
    4e02:	81 91       	ld	r24, Z+
    4e04:	6f 01       	movw	r12, r30
    4e06:	b7 01       	movw	r22, r14
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	42 d4       	rcall	.+2180   	; 0x5690 <fputc>
    4e0c:	51 10       	cpse	r5, r1
    4e0e:	5a 94       	dec	r5
    4e10:	01 50       	subi	r16, 0x01	; 1
    4e12:	11 09       	sbc	r17, r1
    4e14:	01 15       	cp	r16, r1
    4e16:	11 05       	cpc	r17, r1
    4e18:	81 f7       	brne	.-32     	; 0x4dfa <vfprintf+0x478>
    4e1a:	f0 c0       	rjmp	.+480    	; 0x4ffc <vfprintf+0x67a>
    4e1c:	84 36       	cpi	r24, 0x64	; 100
    4e1e:	11 f0       	breq	.+4      	; 0x4e24 <vfprintf+0x4a2>
    4e20:	89 36       	cpi	r24, 0x69	; 105
    4e22:	59 f5       	brne	.+86     	; 0x4e7a <vfprintf+0x4f8>
    4e24:	56 01       	movw	r10, r12
    4e26:	97 fe       	sbrs	r9, 7
    4e28:	09 c0       	rjmp	.+18     	; 0x4e3c <vfprintf+0x4ba>
    4e2a:	24 e0       	ldi	r18, 0x04	; 4
    4e2c:	a2 0e       	add	r10, r18
    4e2e:	b1 1c       	adc	r11, r1
    4e30:	f6 01       	movw	r30, r12
    4e32:	60 81       	ld	r22, Z
    4e34:	71 81       	ldd	r23, Z+1	; 0x01
    4e36:	82 81       	ldd	r24, Z+2	; 0x02
    4e38:	93 81       	ldd	r25, Z+3	; 0x03
    4e3a:	0a c0       	rjmp	.+20     	; 0x4e50 <vfprintf+0x4ce>
    4e3c:	f2 e0       	ldi	r31, 0x02	; 2
    4e3e:	af 0e       	add	r10, r31
    4e40:	b1 1c       	adc	r11, r1
    4e42:	f6 01       	movw	r30, r12
    4e44:	60 81       	ld	r22, Z
    4e46:	71 81       	ldd	r23, Z+1	; 0x01
    4e48:	07 2e       	mov	r0, r23
    4e4a:	00 0c       	add	r0, r0
    4e4c:	88 0b       	sbc	r24, r24
    4e4e:	99 0b       	sbc	r25, r25
    4e50:	f9 2d       	mov	r31, r9
    4e52:	ff 76       	andi	r31, 0x6F	; 111
    4e54:	9f 2e       	mov	r9, r31
    4e56:	97 ff       	sbrs	r25, 7
    4e58:	09 c0       	rjmp	.+18     	; 0x4e6c <vfprintf+0x4ea>
    4e5a:	90 95       	com	r25
    4e5c:	80 95       	com	r24
    4e5e:	70 95       	com	r23
    4e60:	61 95       	neg	r22
    4e62:	7f 4f       	sbci	r23, 0xFF	; 255
    4e64:	8f 4f       	sbci	r24, 0xFF	; 255
    4e66:	9f 4f       	sbci	r25, 0xFF	; 255
    4e68:	f0 68       	ori	r31, 0x80	; 128
    4e6a:	9f 2e       	mov	r9, r31
    4e6c:	2a e0       	ldi	r18, 0x0A	; 10
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	a3 01       	movw	r20, r6
    4e72:	8d d4       	rcall	.+2330   	; 0x578e <__ultoa_invert>
    4e74:	c8 2e       	mov	r12, r24
    4e76:	c6 18       	sub	r12, r6
    4e78:	3e c0       	rjmp	.+124    	; 0x4ef6 <vfprintf+0x574>
    4e7a:	09 2d       	mov	r16, r9
    4e7c:	85 37       	cpi	r24, 0x75	; 117
    4e7e:	21 f4       	brne	.+8      	; 0x4e88 <vfprintf+0x506>
    4e80:	0f 7e       	andi	r16, 0xEF	; 239
    4e82:	2a e0       	ldi	r18, 0x0A	; 10
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	1d c0       	rjmp	.+58     	; 0x4ec2 <vfprintf+0x540>
    4e88:	09 7f       	andi	r16, 0xF9	; 249
    4e8a:	8f 36       	cpi	r24, 0x6F	; 111
    4e8c:	91 f0       	breq	.+36     	; 0x4eb2 <vfprintf+0x530>
    4e8e:	18 f4       	brcc	.+6      	; 0x4e96 <vfprintf+0x514>
    4e90:	88 35       	cpi	r24, 0x58	; 88
    4e92:	59 f0       	breq	.+22     	; 0x4eaa <vfprintf+0x528>
    4e94:	bc c0       	rjmp	.+376    	; 0x500e <vfprintf+0x68c>
    4e96:	80 37       	cpi	r24, 0x70	; 112
    4e98:	19 f0       	breq	.+6      	; 0x4ea0 <vfprintf+0x51e>
    4e9a:	88 37       	cpi	r24, 0x78	; 120
    4e9c:	11 f0       	breq	.+4      	; 0x4ea2 <vfprintf+0x520>
    4e9e:	b7 c0       	rjmp	.+366    	; 0x500e <vfprintf+0x68c>
    4ea0:	00 61       	ori	r16, 0x10	; 16
    4ea2:	04 ff       	sbrs	r16, 4
    4ea4:	09 c0       	rjmp	.+18     	; 0x4eb8 <vfprintf+0x536>
    4ea6:	04 60       	ori	r16, 0x04	; 4
    4ea8:	07 c0       	rjmp	.+14     	; 0x4eb8 <vfprintf+0x536>
    4eaa:	94 fe       	sbrs	r9, 4
    4eac:	08 c0       	rjmp	.+16     	; 0x4ebe <vfprintf+0x53c>
    4eae:	06 60       	ori	r16, 0x06	; 6
    4eb0:	06 c0       	rjmp	.+12     	; 0x4ebe <vfprintf+0x53c>
    4eb2:	28 e0       	ldi	r18, 0x08	; 8
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	05 c0       	rjmp	.+10     	; 0x4ec2 <vfprintf+0x540>
    4eb8:	20 e1       	ldi	r18, 0x10	; 16
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	02 c0       	rjmp	.+4      	; 0x4ec2 <vfprintf+0x540>
    4ebe:	20 e1       	ldi	r18, 0x10	; 16
    4ec0:	32 e0       	ldi	r19, 0x02	; 2
    4ec2:	56 01       	movw	r10, r12
    4ec4:	07 ff       	sbrs	r16, 7
    4ec6:	09 c0       	rjmp	.+18     	; 0x4eda <vfprintf+0x558>
    4ec8:	84 e0       	ldi	r24, 0x04	; 4
    4eca:	a8 0e       	add	r10, r24
    4ecc:	b1 1c       	adc	r11, r1
    4ece:	f6 01       	movw	r30, r12
    4ed0:	60 81       	ld	r22, Z
    4ed2:	71 81       	ldd	r23, Z+1	; 0x01
    4ed4:	82 81       	ldd	r24, Z+2	; 0x02
    4ed6:	93 81       	ldd	r25, Z+3	; 0x03
    4ed8:	08 c0       	rjmp	.+16     	; 0x4eea <vfprintf+0x568>
    4eda:	f2 e0       	ldi	r31, 0x02	; 2
    4edc:	af 0e       	add	r10, r31
    4ede:	b1 1c       	adc	r11, r1
    4ee0:	f6 01       	movw	r30, r12
    4ee2:	60 81       	ld	r22, Z
    4ee4:	71 81       	ldd	r23, Z+1	; 0x01
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	a3 01       	movw	r20, r6
    4eec:	50 d4       	rcall	.+2208   	; 0x578e <__ultoa_invert>
    4eee:	c8 2e       	mov	r12, r24
    4ef0:	c6 18       	sub	r12, r6
    4ef2:	0f 77       	andi	r16, 0x7F	; 127
    4ef4:	90 2e       	mov	r9, r16
    4ef6:	96 fe       	sbrs	r9, 6
    4ef8:	0b c0       	rjmp	.+22     	; 0x4f10 <vfprintf+0x58e>
    4efa:	09 2d       	mov	r16, r9
    4efc:	0e 7f       	andi	r16, 0xFE	; 254
    4efe:	c1 16       	cp	r12, r17
    4f00:	50 f4       	brcc	.+20     	; 0x4f16 <vfprintf+0x594>
    4f02:	94 fe       	sbrs	r9, 4
    4f04:	0a c0       	rjmp	.+20     	; 0x4f1a <vfprintf+0x598>
    4f06:	92 fc       	sbrc	r9, 2
    4f08:	08 c0       	rjmp	.+16     	; 0x4f1a <vfprintf+0x598>
    4f0a:	09 2d       	mov	r16, r9
    4f0c:	0e 7e       	andi	r16, 0xEE	; 238
    4f0e:	05 c0       	rjmp	.+10     	; 0x4f1a <vfprintf+0x598>
    4f10:	dc 2c       	mov	r13, r12
    4f12:	09 2d       	mov	r16, r9
    4f14:	03 c0       	rjmp	.+6      	; 0x4f1c <vfprintf+0x59a>
    4f16:	dc 2c       	mov	r13, r12
    4f18:	01 c0       	rjmp	.+2      	; 0x4f1c <vfprintf+0x59a>
    4f1a:	d1 2e       	mov	r13, r17
    4f1c:	04 ff       	sbrs	r16, 4
    4f1e:	0d c0       	rjmp	.+26     	; 0x4f3a <vfprintf+0x5b8>
    4f20:	fe 01       	movw	r30, r28
    4f22:	ec 0d       	add	r30, r12
    4f24:	f1 1d       	adc	r31, r1
    4f26:	80 81       	ld	r24, Z
    4f28:	80 33       	cpi	r24, 0x30	; 48
    4f2a:	11 f4       	brne	.+4      	; 0x4f30 <vfprintf+0x5ae>
    4f2c:	09 7e       	andi	r16, 0xE9	; 233
    4f2e:	09 c0       	rjmp	.+18     	; 0x4f42 <vfprintf+0x5c0>
    4f30:	02 ff       	sbrs	r16, 2
    4f32:	06 c0       	rjmp	.+12     	; 0x4f40 <vfprintf+0x5be>
    4f34:	d3 94       	inc	r13
    4f36:	d3 94       	inc	r13
    4f38:	04 c0       	rjmp	.+8      	; 0x4f42 <vfprintf+0x5c0>
    4f3a:	80 2f       	mov	r24, r16
    4f3c:	86 78       	andi	r24, 0x86	; 134
    4f3e:	09 f0       	breq	.+2      	; 0x4f42 <vfprintf+0x5c0>
    4f40:	d3 94       	inc	r13
    4f42:	03 fd       	sbrc	r16, 3
    4f44:	10 c0       	rjmp	.+32     	; 0x4f66 <vfprintf+0x5e4>
    4f46:	00 ff       	sbrs	r16, 0
    4f48:	06 c0       	rjmp	.+12     	; 0x4f56 <vfprintf+0x5d4>
    4f4a:	1c 2d       	mov	r17, r12
    4f4c:	d5 14       	cp	r13, r5
    4f4e:	78 f4       	brcc	.+30     	; 0x4f6e <vfprintf+0x5ec>
    4f50:	15 0d       	add	r17, r5
    4f52:	1d 19       	sub	r17, r13
    4f54:	0c c0       	rjmp	.+24     	; 0x4f6e <vfprintf+0x5ec>
    4f56:	d5 14       	cp	r13, r5
    4f58:	50 f4       	brcc	.+20     	; 0x4f6e <vfprintf+0x5ec>
    4f5a:	b7 01       	movw	r22, r14
    4f5c:	80 e2       	ldi	r24, 0x20	; 32
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	97 d3       	rcall	.+1838   	; 0x5690 <fputc>
    4f62:	d3 94       	inc	r13
    4f64:	f8 cf       	rjmp	.-16     	; 0x4f56 <vfprintf+0x5d4>
    4f66:	d5 14       	cp	r13, r5
    4f68:	10 f4       	brcc	.+4      	; 0x4f6e <vfprintf+0x5ec>
    4f6a:	5d 18       	sub	r5, r13
    4f6c:	01 c0       	rjmp	.+2      	; 0x4f70 <vfprintf+0x5ee>
    4f6e:	51 2c       	mov	r5, r1
    4f70:	04 ff       	sbrs	r16, 4
    4f72:	0f c0       	rjmp	.+30     	; 0x4f92 <vfprintf+0x610>
    4f74:	b7 01       	movw	r22, r14
    4f76:	80 e3       	ldi	r24, 0x30	; 48
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	8a d3       	rcall	.+1812   	; 0x5690 <fputc>
    4f7c:	02 ff       	sbrs	r16, 2
    4f7e:	16 c0       	rjmp	.+44     	; 0x4fac <vfprintf+0x62a>
    4f80:	01 fd       	sbrc	r16, 1
    4f82:	03 c0       	rjmp	.+6      	; 0x4f8a <vfprintf+0x608>
    4f84:	88 e7       	ldi	r24, 0x78	; 120
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <vfprintf+0x60c>
    4f8a:	88 e5       	ldi	r24, 0x58	; 88
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	b7 01       	movw	r22, r14
    4f90:	0c c0       	rjmp	.+24     	; 0x4faa <vfprintf+0x628>
    4f92:	80 2f       	mov	r24, r16
    4f94:	86 78       	andi	r24, 0x86	; 134
    4f96:	51 f0       	breq	.+20     	; 0x4fac <vfprintf+0x62a>
    4f98:	01 ff       	sbrs	r16, 1
    4f9a:	02 c0       	rjmp	.+4      	; 0x4fa0 <vfprintf+0x61e>
    4f9c:	8b e2       	ldi	r24, 0x2B	; 43
    4f9e:	01 c0       	rjmp	.+2      	; 0x4fa2 <vfprintf+0x620>
    4fa0:	80 e2       	ldi	r24, 0x20	; 32
    4fa2:	07 fd       	sbrc	r16, 7
    4fa4:	8d e2       	ldi	r24, 0x2D	; 45
    4fa6:	b7 01       	movw	r22, r14
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	72 d3       	rcall	.+1764   	; 0x5690 <fputc>
    4fac:	c1 16       	cp	r12, r17
    4fae:	30 f4       	brcc	.+12     	; 0x4fbc <vfprintf+0x63a>
    4fb0:	b7 01       	movw	r22, r14
    4fb2:	80 e3       	ldi	r24, 0x30	; 48
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	6c d3       	rcall	.+1752   	; 0x5690 <fputc>
    4fb8:	11 50       	subi	r17, 0x01	; 1
    4fba:	f8 cf       	rjmp	.-16     	; 0x4fac <vfprintf+0x62a>
    4fbc:	ca 94       	dec	r12
    4fbe:	f3 01       	movw	r30, r6
    4fc0:	ec 0d       	add	r30, r12
    4fc2:	f1 1d       	adc	r31, r1
    4fc4:	80 81       	ld	r24, Z
    4fc6:	b7 01       	movw	r22, r14
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	62 d3       	rcall	.+1732   	; 0x5690 <fputc>
    4fcc:	c1 10       	cpse	r12, r1
    4fce:	f6 cf       	rjmp	.-20     	; 0x4fbc <vfprintf+0x63a>
    4fd0:	15 c0       	rjmp	.+42     	; 0x4ffc <vfprintf+0x67a>
    4fd2:	f4 e0       	ldi	r31, 0x04	; 4
    4fd4:	f5 15       	cp	r31, r5
    4fd6:	50 f5       	brcc	.+84     	; 0x502c <vfprintf+0x6aa>
    4fd8:	84 e0       	ldi	r24, 0x04	; 4
    4fda:	58 1a       	sub	r5, r24
    4fdc:	93 fe       	sbrs	r9, 3
    4fde:	1e c0       	rjmp	.+60     	; 0x501c <vfprintf+0x69a>
    4fe0:	01 11       	cpse	r16, r1
    4fe2:	25 c0       	rjmp	.+74     	; 0x502e <vfprintf+0x6ac>
    4fe4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4fe6:	23 ff       	sbrs	r18, 3
    4fe8:	27 c0       	rjmp	.+78     	; 0x5038 <vfprintf+0x6b6>
    4fea:	0c ef       	ldi	r16, 0xFC	; 252
    4fec:	11 e0       	ldi	r17, 0x01	; 1
    4fee:	39 2d       	mov	r19, r9
    4ff0:	30 71       	andi	r19, 0x10	; 16
    4ff2:	93 2e       	mov	r9, r19
    4ff4:	f8 01       	movw	r30, r16
    4ff6:	84 91       	lpm	r24, Z
    4ff8:	81 11       	cpse	r24, r1
    4ffa:	21 c0       	rjmp	.+66     	; 0x503e <vfprintf+0x6bc>
    4ffc:	55 20       	and	r5, r5
    4ffe:	09 f4       	brne	.+2      	; 0x5002 <vfprintf+0x680>
    5000:	fc cc       	rjmp	.-1544   	; 0x49fa <vfprintf+0x78>
    5002:	b7 01       	movw	r22, r14
    5004:	80 e2       	ldi	r24, 0x20	; 32
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	43 d3       	rcall	.+1670   	; 0x5690 <fputc>
    500a:	5a 94       	dec	r5
    500c:	f7 cf       	rjmp	.-18     	; 0x4ffc <vfprintf+0x67a>
    500e:	f7 01       	movw	r30, r14
    5010:	86 81       	ldd	r24, Z+6	; 0x06
    5012:	97 81       	ldd	r25, Z+7	; 0x07
    5014:	23 c0       	rjmp	.+70     	; 0x505c <vfprintf+0x6da>
    5016:	8f ef       	ldi	r24, 0xFF	; 255
    5018:	9f ef       	ldi	r25, 0xFF	; 255
    501a:	20 c0       	rjmp	.+64     	; 0x505c <vfprintf+0x6da>
    501c:	b7 01       	movw	r22, r14
    501e:	80 e2       	ldi	r24, 0x20	; 32
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	36 d3       	rcall	.+1644   	; 0x5690 <fputc>
    5024:	5a 94       	dec	r5
    5026:	51 10       	cpse	r5, r1
    5028:	f9 cf       	rjmp	.-14     	; 0x501c <vfprintf+0x69a>
    502a:	da cf       	rjmp	.-76     	; 0x4fe0 <vfprintf+0x65e>
    502c:	51 2c       	mov	r5, r1
    502e:	b7 01       	movw	r22, r14
    5030:	80 2f       	mov	r24, r16
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	2d d3       	rcall	.+1626   	; 0x5690 <fputc>
    5036:	d6 cf       	rjmp	.-84     	; 0x4fe4 <vfprintf+0x662>
    5038:	00 e0       	ldi	r16, 0x00	; 0
    503a:	12 e0       	ldi	r17, 0x02	; 2
    503c:	d8 cf       	rjmp	.-80     	; 0x4fee <vfprintf+0x66c>
    503e:	91 10       	cpse	r9, r1
    5040:	80 52       	subi	r24, 0x20	; 32
    5042:	b7 01       	movw	r22, r14
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	24 d3       	rcall	.+1608   	; 0x5690 <fputc>
    5048:	0f 5f       	subi	r16, 0xFF	; 255
    504a:	1f 4f       	sbci	r17, 0xFF	; 255
    504c:	d3 cf       	rjmp	.-90     	; 0x4ff4 <vfprintf+0x672>
    504e:	23 e0       	ldi	r18, 0x03	; 3
    5050:	25 15       	cp	r18, r5
    5052:	10 f4       	brcc	.+4      	; 0x5058 <vfprintf+0x6d6>
    5054:	83 e0       	ldi	r24, 0x03	; 3
    5056:	c1 cf       	rjmp	.-126    	; 0x4fda <vfprintf+0x658>
    5058:	51 2c       	mov	r5, r1
    505a:	c4 cf       	rjmp	.-120    	; 0x4fe4 <vfprintf+0x662>
    505c:	60 96       	adiw	r28, 0x10	; 16
    505e:	cd bf       	out	0x3d, r28	; 61
    5060:	de bf       	out	0x3e, r29	; 62
    5062:	df 91       	pop	r29
    5064:	cf 91       	pop	r28
    5066:	1f 91       	pop	r17
    5068:	0f 91       	pop	r16
    506a:	ff 90       	pop	r15
    506c:	ef 90       	pop	r14
    506e:	df 90       	pop	r13
    5070:	cf 90       	pop	r12
    5072:	bf 90       	pop	r11
    5074:	af 90       	pop	r10
    5076:	9f 90       	pop	r9
    5078:	8f 90       	pop	r8
    507a:	7f 90       	pop	r7
    507c:	6f 90       	pop	r6
    507e:	5f 90       	pop	r5
    5080:	4f 90       	pop	r4
    5082:	3f 90       	pop	r3
    5084:	2f 90       	pop	r2
    5086:	08 95       	ret

00005088 <__udivmodsi4>:
    5088:	a1 e2       	ldi	r26, 0x21	; 33
    508a:	1a 2e       	mov	r1, r26
    508c:	aa 1b       	sub	r26, r26
    508e:	bb 1b       	sub	r27, r27
    5090:	fd 01       	movw	r30, r26
    5092:	0d c0       	rjmp	.+26     	; 0x50ae <__udivmodsi4_ep>

00005094 <__udivmodsi4_loop>:
    5094:	aa 1f       	adc	r26, r26
    5096:	bb 1f       	adc	r27, r27
    5098:	ee 1f       	adc	r30, r30
    509a:	ff 1f       	adc	r31, r31
    509c:	a2 17       	cp	r26, r18
    509e:	b3 07       	cpc	r27, r19
    50a0:	e4 07       	cpc	r30, r20
    50a2:	f5 07       	cpc	r31, r21
    50a4:	20 f0       	brcs	.+8      	; 0x50ae <__udivmodsi4_ep>
    50a6:	a2 1b       	sub	r26, r18
    50a8:	b3 0b       	sbc	r27, r19
    50aa:	e4 0b       	sbc	r30, r20
    50ac:	f5 0b       	sbc	r31, r21

000050ae <__udivmodsi4_ep>:
    50ae:	66 1f       	adc	r22, r22
    50b0:	77 1f       	adc	r23, r23
    50b2:	88 1f       	adc	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	1a 94       	dec	r1
    50b8:	69 f7       	brne	.-38     	; 0x5094 <__udivmodsi4_loop>
    50ba:	60 95       	com	r22
    50bc:	70 95       	com	r23
    50be:	80 95       	com	r24
    50c0:	90 95       	com	r25
    50c2:	9b 01       	movw	r18, r22
    50c4:	ac 01       	movw	r20, r24
    50c6:	bd 01       	movw	r22, r26
    50c8:	cf 01       	movw	r24, r30
    50ca:	08 95       	ret

000050cc <__umoddi3>:
    50cc:	68 94       	set
    50ce:	01 c0       	rjmp	.+2      	; 0x50d2 <__udivdi3_umoddi3>

000050d0 <__udivdi3>:
    50d0:	e8 94       	clt

000050d2 <__udivdi3_umoddi3>:
    50d2:	8f 92       	push	r8
    50d4:	9f 92       	push	r9
    50d6:	cf 93       	push	r28
    50d8:	df 93       	push	r29
    50da:	05 d0       	rcall	.+10     	; 0x50e6 <__udivmod64>
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	9f 90       	pop	r9
    50e2:	8f 90       	pop	r8
    50e4:	08 95       	ret

000050e6 <__udivmod64>:
    50e6:	88 24       	eor	r8, r8
    50e8:	99 24       	eor	r9, r9
    50ea:	f4 01       	movw	r30, r8
    50ec:	e4 01       	movw	r28, r8
    50ee:	b0 e4       	ldi	r27, 0x40	; 64
    50f0:	9f 93       	push	r25
    50f2:	aa 27       	eor	r26, r26
    50f4:	9a 15       	cp	r25, r10
    50f6:	8b 04       	cpc	r8, r11
    50f8:	9c 04       	cpc	r9, r12
    50fa:	ed 05       	cpc	r30, r13
    50fc:	fe 05       	cpc	r31, r14
    50fe:	cf 05       	cpc	r28, r15
    5100:	d0 07       	cpc	r29, r16
    5102:	a1 07       	cpc	r26, r17
    5104:	98 f4       	brcc	.+38     	; 0x512c <__udivmod64+0x46>
    5106:	ad 2f       	mov	r26, r29
    5108:	dc 2f       	mov	r29, r28
    510a:	cf 2f       	mov	r28, r31
    510c:	fe 2f       	mov	r31, r30
    510e:	e9 2d       	mov	r30, r9
    5110:	98 2c       	mov	r9, r8
    5112:	89 2e       	mov	r8, r25
    5114:	98 2f       	mov	r25, r24
    5116:	87 2f       	mov	r24, r23
    5118:	76 2f       	mov	r23, r22
    511a:	65 2f       	mov	r22, r21
    511c:	54 2f       	mov	r21, r20
    511e:	43 2f       	mov	r20, r19
    5120:	32 2f       	mov	r19, r18
    5122:	22 27       	eor	r18, r18
    5124:	b8 50       	subi	r27, 0x08	; 8
    5126:	31 f7       	brne	.-52     	; 0x50f4 <__udivmod64+0xe>
    5128:	bf 91       	pop	r27
    512a:	27 c0       	rjmp	.+78     	; 0x517a <__udivmod64+0x94>
    512c:	1b 2e       	mov	r1, r27
    512e:	bf 91       	pop	r27
    5130:	bb 27       	eor	r27, r27
    5132:	22 0f       	add	r18, r18
    5134:	33 1f       	adc	r19, r19
    5136:	44 1f       	adc	r20, r20
    5138:	55 1f       	adc	r21, r21
    513a:	66 1f       	adc	r22, r22
    513c:	77 1f       	adc	r23, r23
    513e:	88 1f       	adc	r24, r24
    5140:	99 1f       	adc	r25, r25
    5142:	88 1c       	adc	r8, r8
    5144:	99 1c       	adc	r9, r9
    5146:	ee 1f       	adc	r30, r30
    5148:	ff 1f       	adc	r31, r31
    514a:	cc 1f       	adc	r28, r28
    514c:	dd 1f       	adc	r29, r29
    514e:	aa 1f       	adc	r26, r26
    5150:	bb 1f       	adc	r27, r27
    5152:	8a 14       	cp	r8, r10
    5154:	9b 04       	cpc	r9, r11
    5156:	ec 05       	cpc	r30, r12
    5158:	fd 05       	cpc	r31, r13
    515a:	ce 05       	cpc	r28, r14
    515c:	df 05       	cpc	r29, r15
    515e:	a0 07       	cpc	r26, r16
    5160:	b1 07       	cpc	r27, r17
    5162:	48 f0       	brcs	.+18     	; 0x5176 <__udivmod64+0x90>
    5164:	8a 18       	sub	r8, r10
    5166:	9b 08       	sbc	r9, r11
    5168:	ec 09       	sbc	r30, r12
    516a:	fd 09       	sbc	r31, r13
    516c:	ce 09       	sbc	r28, r14
    516e:	df 09       	sbc	r29, r15
    5170:	a0 0b       	sbc	r26, r16
    5172:	b1 0b       	sbc	r27, r17
    5174:	21 60       	ori	r18, 0x01	; 1
    5176:	1a 94       	dec	r1
    5178:	e1 f6       	brne	.-72     	; 0x5132 <__udivmod64+0x4c>
    517a:	2e f4       	brtc	.+10     	; 0x5186 <__udivmod64+0xa0>
    517c:	94 01       	movw	r18, r8
    517e:	af 01       	movw	r20, r30
    5180:	be 01       	movw	r22, r28
    5182:	cd 01       	movw	r24, r26
    5184:	00 0c       	add	r0, r0
    5186:	08 95       	ret

00005188 <__ashldi3>:
    5188:	0f 93       	push	r16
    518a:	08 30       	cpi	r16, 0x08	; 8
    518c:	90 f0       	brcs	.+36     	; 0x51b2 <__ashldi3+0x2a>
    518e:	98 2f       	mov	r25, r24
    5190:	87 2f       	mov	r24, r23
    5192:	76 2f       	mov	r23, r22
    5194:	65 2f       	mov	r22, r21
    5196:	54 2f       	mov	r21, r20
    5198:	43 2f       	mov	r20, r19
    519a:	32 2f       	mov	r19, r18
    519c:	22 27       	eor	r18, r18
    519e:	08 50       	subi	r16, 0x08	; 8
    51a0:	f4 cf       	rjmp	.-24     	; 0x518a <__ashldi3+0x2>
    51a2:	22 0f       	add	r18, r18
    51a4:	33 1f       	adc	r19, r19
    51a6:	44 1f       	adc	r20, r20
    51a8:	55 1f       	adc	r21, r21
    51aa:	66 1f       	adc	r22, r22
    51ac:	77 1f       	adc	r23, r23
    51ae:	88 1f       	adc	r24, r24
    51b0:	99 1f       	adc	r25, r25
    51b2:	0a 95       	dec	r16
    51b4:	b2 f7       	brpl	.-20     	; 0x51a2 <__ashldi3+0x1a>
    51b6:	0f 91       	pop	r16
    51b8:	08 95       	ret

000051ba <__adddi3>:
    51ba:	2a 0d       	add	r18, r10
    51bc:	3b 1d       	adc	r19, r11
    51be:	4c 1d       	adc	r20, r12
    51c0:	5d 1d       	adc	r21, r13
    51c2:	6e 1d       	adc	r22, r14
    51c4:	7f 1d       	adc	r23, r15
    51c6:	80 1f       	adc	r24, r16
    51c8:	91 1f       	adc	r25, r17
    51ca:	08 95       	ret

000051cc <__subdi3>:
    51cc:	2a 19       	sub	r18, r10
    51ce:	3b 09       	sbc	r19, r11
    51d0:	4c 09       	sbc	r20, r12
    51d2:	5d 09       	sbc	r21, r13
    51d4:	6e 09       	sbc	r22, r14
    51d6:	7f 09       	sbc	r23, r15
    51d8:	80 0b       	sbc	r24, r16
    51da:	91 0b       	sbc	r25, r17
    51dc:	08 95       	ret

000051de <malloc>:
    51de:	0f 93       	push	r16
    51e0:	1f 93       	push	r17
    51e2:	cf 93       	push	r28
    51e4:	df 93       	push	r29
    51e6:	82 30       	cpi	r24, 0x02	; 2
    51e8:	91 05       	cpc	r25, r1
    51ea:	10 f4       	brcc	.+4      	; 0x51f0 <malloc+0x12>
    51ec:	82 e0       	ldi	r24, 0x02	; 2
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	e0 91 cb 21 	lds	r30, 0x21CB	; 0x8021cb <__flp>
    51f4:	f0 91 cc 21 	lds	r31, 0x21CC	; 0x8021cc <__flp+0x1>
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	a0 e0       	ldi	r26, 0x00	; 0
    51fe:	b0 e0       	ldi	r27, 0x00	; 0
    5200:	30 97       	sbiw	r30, 0x00	; 0
    5202:	19 f1       	breq	.+70     	; 0x524a <malloc+0x6c>
    5204:	40 81       	ld	r20, Z
    5206:	51 81       	ldd	r21, Z+1	; 0x01
    5208:	02 81       	ldd	r16, Z+2	; 0x02
    520a:	13 81       	ldd	r17, Z+3	; 0x03
    520c:	48 17       	cp	r20, r24
    520e:	59 07       	cpc	r21, r25
    5210:	c8 f0       	brcs	.+50     	; 0x5244 <malloc+0x66>
    5212:	84 17       	cp	r24, r20
    5214:	95 07       	cpc	r25, r21
    5216:	69 f4       	brne	.+26     	; 0x5232 <malloc+0x54>
    5218:	10 97       	sbiw	r26, 0x00	; 0
    521a:	31 f0       	breq	.+12     	; 0x5228 <malloc+0x4a>
    521c:	12 96       	adiw	r26, 0x02	; 2
    521e:	0c 93       	st	X, r16
    5220:	12 97       	sbiw	r26, 0x02	; 2
    5222:	13 96       	adiw	r26, 0x03	; 3
    5224:	1c 93       	st	X, r17
    5226:	27 c0       	rjmp	.+78     	; 0x5276 <malloc+0x98>
    5228:	00 93 cb 21 	sts	0x21CB, r16	; 0x8021cb <__flp>
    522c:	10 93 cc 21 	sts	0x21CC, r17	; 0x8021cc <__flp+0x1>
    5230:	22 c0       	rjmp	.+68     	; 0x5276 <malloc+0x98>
    5232:	21 15       	cp	r18, r1
    5234:	31 05       	cpc	r19, r1
    5236:	19 f0       	breq	.+6      	; 0x523e <malloc+0x60>
    5238:	42 17       	cp	r20, r18
    523a:	53 07       	cpc	r21, r19
    523c:	18 f4       	brcc	.+6      	; 0x5244 <malloc+0x66>
    523e:	9a 01       	movw	r18, r20
    5240:	bd 01       	movw	r22, r26
    5242:	ef 01       	movw	r28, r30
    5244:	df 01       	movw	r26, r30
    5246:	f8 01       	movw	r30, r16
    5248:	db cf       	rjmp	.-74     	; 0x5200 <malloc+0x22>
    524a:	21 15       	cp	r18, r1
    524c:	31 05       	cpc	r19, r1
    524e:	f9 f0       	breq	.+62     	; 0x528e <malloc+0xb0>
    5250:	28 1b       	sub	r18, r24
    5252:	39 0b       	sbc	r19, r25
    5254:	24 30       	cpi	r18, 0x04	; 4
    5256:	31 05       	cpc	r19, r1
    5258:	80 f4       	brcc	.+32     	; 0x527a <malloc+0x9c>
    525a:	8a 81       	ldd	r24, Y+2	; 0x02
    525c:	9b 81       	ldd	r25, Y+3	; 0x03
    525e:	61 15       	cp	r22, r1
    5260:	71 05       	cpc	r23, r1
    5262:	21 f0       	breq	.+8      	; 0x526c <malloc+0x8e>
    5264:	fb 01       	movw	r30, r22
    5266:	82 83       	std	Z+2, r24	; 0x02
    5268:	93 83       	std	Z+3, r25	; 0x03
    526a:	04 c0       	rjmp	.+8      	; 0x5274 <malloc+0x96>
    526c:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <__flp>
    5270:	90 93 cc 21 	sts	0x21CC, r25	; 0x8021cc <__flp+0x1>
    5274:	fe 01       	movw	r30, r28
    5276:	32 96       	adiw	r30, 0x02	; 2
    5278:	44 c0       	rjmp	.+136    	; 0x5302 <malloc+0x124>
    527a:	fe 01       	movw	r30, r28
    527c:	e2 0f       	add	r30, r18
    527e:	f3 1f       	adc	r31, r19
    5280:	81 93       	st	Z+, r24
    5282:	91 93       	st	Z+, r25
    5284:	22 50       	subi	r18, 0x02	; 2
    5286:	31 09       	sbc	r19, r1
    5288:	28 83       	st	Y, r18
    528a:	39 83       	std	Y+1, r19	; 0x01
    528c:	3a c0       	rjmp	.+116    	; 0x5302 <malloc+0x124>
    528e:	20 91 c9 21 	lds	r18, 0x21C9	; 0x8021c9 <__brkval>
    5292:	30 91 ca 21 	lds	r19, 0x21CA	; 0x8021ca <__brkval+0x1>
    5296:	23 2b       	or	r18, r19
    5298:	41 f4       	brne	.+16     	; 0x52aa <malloc+0xcc>
    529a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    529e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    52a2:	20 93 c9 21 	sts	0x21C9, r18	; 0x8021c9 <__brkval>
    52a6:	30 93 ca 21 	sts	0x21CA, r19	; 0x8021ca <__brkval+0x1>
    52aa:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    52ae:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    52b2:	21 15       	cp	r18, r1
    52b4:	31 05       	cpc	r19, r1
    52b6:	41 f4       	brne	.+16     	; 0x52c8 <malloc+0xea>
    52b8:	2d b7       	in	r18, 0x3d	; 61
    52ba:	3e b7       	in	r19, 0x3e	; 62
    52bc:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    52c0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    52c4:	24 1b       	sub	r18, r20
    52c6:	35 0b       	sbc	r19, r21
    52c8:	e0 91 c9 21 	lds	r30, 0x21C9	; 0x8021c9 <__brkval>
    52cc:	f0 91 ca 21 	lds	r31, 0x21CA	; 0x8021ca <__brkval+0x1>
    52d0:	e2 17       	cp	r30, r18
    52d2:	f3 07       	cpc	r31, r19
    52d4:	a0 f4       	brcc	.+40     	; 0x52fe <malloc+0x120>
    52d6:	2e 1b       	sub	r18, r30
    52d8:	3f 0b       	sbc	r19, r31
    52da:	28 17       	cp	r18, r24
    52dc:	39 07       	cpc	r19, r25
    52de:	78 f0       	brcs	.+30     	; 0x52fe <malloc+0x120>
    52e0:	ac 01       	movw	r20, r24
    52e2:	4e 5f       	subi	r20, 0xFE	; 254
    52e4:	5f 4f       	sbci	r21, 0xFF	; 255
    52e6:	24 17       	cp	r18, r20
    52e8:	35 07       	cpc	r19, r21
    52ea:	48 f0       	brcs	.+18     	; 0x52fe <malloc+0x120>
    52ec:	4e 0f       	add	r20, r30
    52ee:	5f 1f       	adc	r21, r31
    52f0:	40 93 c9 21 	sts	0x21C9, r20	; 0x8021c9 <__brkval>
    52f4:	50 93 ca 21 	sts	0x21CA, r21	; 0x8021ca <__brkval+0x1>
    52f8:	81 93       	st	Z+, r24
    52fa:	91 93       	st	Z+, r25
    52fc:	02 c0       	rjmp	.+4      	; 0x5302 <malloc+0x124>
    52fe:	e0 e0       	ldi	r30, 0x00	; 0
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	cf 01       	movw	r24, r30
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	1f 91       	pop	r17
    530a:	0f 91       	pop	r16
    530c:	08 95       	ret

0000530e <free>:
    530e:	cf 93       	push	r28
    5310:	df 93       	push	r29
    5312:	00 97       	sbiw	r24, 0x00	; 0
    5314:	09 f4       	brne	.+2      	; 0x5318 <free+0xa>
    5316:	81 c0       	rjmp	.+258    	; 0x541a <free+0x10c>
    5318:	fc 01       	movw	r30, r24
    531a:	32 97       	sbiw	r30, 0x02	; 2
    531c:	12 82       	std	Z+2, r1	; 0x02
    531e:	13 82       	std	Z+3, r1	; 0x03
    5320:	a0 91 cb 21 	lds	r26, 0x21CB	; 0x8021cb <__flp>
    5324:	b0 91 cc 21 	lds	r27, 0x21CC	; 0x8021cc <__flp+0x1>
    5328:	10 97       	sbiw	r26, 0x00	; 0
    532a:	81 f4       	brne	.+32     	; 0x534c <free+0x3e>
    532c:	20 81       	ld	r18, Z
    532e:	31 81       	ldd	r19, Z+1	; 0x01
    5330:	82 0f       	add	r24, r18
    5332:	93 1f       	adc	r25, r19
    5334:	20 91 c9 21 	lds	r18, 0x21C9	; 0x8021c9 <__brkval>
    5338:	30 91 ca 21 	lds	r19, 0x21CA	; 0x8021ca <__brkval+0x1>
    533c:	28 17       	cp	r18, r24
    533e:	39 07       	cpc	r19, r25
    5340:	51 f5       	brne	.+84     	; 0x5396 <free+0x88>
    5342:	e0 93 c9 21 	sts	0x21C9, r30	; 0x8021c9 <__brkval>
    5346:	f0 93 ca 21 	sts	0x21CA, r31	; 0x8021ca <__brkval+0x1>
    534a:	67 c0       	rjmp	.+206    	; 0x541a <free+0x10c>
    534c:	ed 01       	movw	r28, r26
    534e:	20 e0       	ldi	r18, 0x00	; 0
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	ce 17       	cp	r28, r30
    5354:	df 07       	cpc	r29, r31
    5356:	40 f4       	brcc	.+16     	; 0x5368 <free+0x5a>
    5358:	4a 81       	ldd	r20, Y+2	; 0x02
    535a:	5b 81       	ldd	r21, Y+3	; 0x03
    535c:	9e 01       	movw	r18, r28
    535e:	41 15       	cp	r20, r1
    5360:	51 05       	cpc	r21, r1
    5362:	f1 f0       	breq	.+60     	; 0x53a0 <free+0x92>
    5364:	ea 01       	movw	r28, r20
    5366:	f5 cf       	rjmp	.-22     	; 0x5352 <free+0x44>
    5368:	c2 83       	std	Z+2, r28	; 0x02
    536a:	d3 83       	std	Z+3, r29	; 0x03
    536c:	40 81       	ld	r20, Z
    536e:	51 81       	ldd	r21, Z+1	; 0x01
    5370:	84 0f       	add	r24, r20
    5372:	95 1f       	adc	r25, r21
    5374:	c8 17       	cp	r28, r24
    5376:	d9 07       	cpc	r29, r25
    5378:	59 f4       	brne	.+22     	; 0x5390 <free+0x82>
    537a:	88 81       	ld	r24, Y
    537c:	99 81       	ldd	r25, Y+1	; 0x01
    537e:	84 0f       	add	r24, r20
    5380:	95 1f       	adc	r25, r21
    5382:	02 96       	adiw	r24, 0x02	; 2
    5384:	80 83       	st	Z, r24
    5386:	91 83       	std	Z+1, r25	; 0x01
    5388:	8a 81       	ldd	r24, Y+2	; 0x02
    538a:	9b 81       	ldd	r25, Y+3	; 0x03
    538c:	82 83       	std	Z+2, r24	; 0x02
    538e:	93 83       	std	Z+3, r25	; 0x03
    5390:	21 15       	cp	r18, r1
    5392:	31 05       	cpc	r19, r1
    5394:	29 f4       	brne	.+10     	; 0x53a0 <free+0x92>
    5396:	e0 93 cb 21 	sts	0x21CB, r30	; 0x8021cb <__flp>
    539a:	f0 93 cc 21 	sts	0x21CC, r31	; 0x8021cc <__flp+0x1>
    539e:	3d c0       	rjmp	.+122    	; 0x541a <free+0x10c>
    53a0:	e9 01       	movw	r28, r18
    53a2:	ea 83       	std	Y+2, r30	; 0x02
    53a4:	fb 83       	std	Y+3, r31	; 0x03
    53a6:	49 91       	ld	r20, Y+
    53a8:	59 91       	ld	r21, Y+
    53aa:	c4 0f       	add	r28, r20
    53ac:	d5 1f       	adc	r29, r21
    53ae:	ec 17       	cp	r30, r28
    53b0:	fd 07       	cpc	r31, r29
    53b2:	61 f4       	brne	.+24     	; 0x53cc <free+0xbe>
    53b4:	80 81       	ld	r24, Z
    53b6:	91 81       	ldd	r25, Z+1	; 0x01
    53b8:	84 0f       	add	r24, r20
    53ba:	95 1f       	adc	r25, r21
    53bc:	02 96       	adiw	r24, 0x02	; 2
    53be:	e9 01       	movw	r28, r18
    53c0:	88 83       	st	Y, r24
    53c2:	99 83       	std	Y+1, r25	; 0x01
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	8a 83       	std	Y+2, r24	; 0x02
    53ca:	9b 83       	std	Y+3, r25	; 0x03
    53cc:	e0 e0       	ldi	r30, 0x00	; 0
    53ce:	f0 e0       	ldi	r31, 0x00	; 0
    53d0:	12 96       	adiw	r26, 0x02	; 2
    53d2:	8d 91       	ld	r24, X+
    53d4:	9c 91       	ld	r25, X
    53d6:	13 97       	sbiw	r26, 0x03	; 3
    53d8:	00 97       	sbiw	r24, 0x00	; 0
    53da:	19 f0       	breq	.+6      	; 0x53e2 <free+0xd4>
    53dc:	fd 01       	movw	r30, r26
    53de:	dc 01       	movw	r26, r24
    53e0:	f7 cf       	rjmp	.-18     	; 0x53d0 <free+0xc2>
    53e2:	8d 91       	ld	r24, X+
    53e4:	9c 91       	ld	r25, X
    53e6:	11 97       	sbiw	r26, 0x01	; 1
    53e8:	9d 01       	movw	r18, r26
    53ea:	2e 5f       	subi	r18, 0xFE	; 254
    53ec:	3f 4f       	sbci	r19, 0xFF	; 255
    53ee:	82 0f       	add	r24, r18
    53f0:	93 1f       	adc	r25, r19
    53f2:	20 91 c9 21 	lds	r18, 0x21C9	; 0x8021c9 <__brkval>
    53f6:	30 91 ca 21 	lds	r19, 0x21CA	; 0x8021ca <__brkval+0x1>
    53fa:	28 17       	cp	r18, r24
    53fc:	39 07       	cpc	r19, r25
    53fe:	69 f4       	brne	.+26     	; 0x541a <free+0x10c>
    5400:	30 97       	sbiw	r30, 0x00	; 0
    5402:	29 f4       	brne	.+10     	; 0x540e <free+0x100>
    5404:	10 92 cb 21 	sts	0x21CB, r1	; 0x8021cb <__flp>
    5408:	10 92 cc 21 	sts	0x21CC, r1	; 0x8021cc <__flp+0x1>
    540c:	02 c0       	rjmp	.+4      	; 0x5412 <free+0x104>
    540e:	12 82       	std	Z+2, r1	; 0x02
    5410:	13 82       	std	Z+3, r1	; 0x03
    5412:	a0 93 c9 21 	sts	0x21C9, r26	; 0x8021c9 <__brkval>
    5416:	b0 93 ca 21 	sts	0x21CA, r27	; 0x8021ca <__brkval+0x1>
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	08 95       	ret

00005420 <__ftoa_engine>:
    5420:	28 30       	cpi	r18, 0x08	; 8
    5422:	08 f0       	brcs	.+2      	; 0x5426 <__ftoa_engine+0x6>
    5424:	27 e0       	ldi	r18, 0x07	; 7
    5426:	33 27       	eor	r19, r19
    5428:	da 01       	movw	r26, r20
    542a:	99 0f       	add	r25, r25
    542c:	31 1d       	adc	r19, r1
    542e:	87 fd       	sbrc	r24, 7
    5430:	91 60       	ori	r25, 0x01	; 1
    5432:	00 96       	adiw	r24, 0x00	; 0
    5434:	61 05       	cpc	r22, r1
    5436:	71 05       	cpc	r23, r1
    5438:	39 f4       	brne	.+14     	; 0x5448 <__ftoa_engine+0x28>
    543a:	32 60       	ori	r19, 0x02	; 2
    543c:	2e 5f       	subi	r18, 0xFE	; 254
    543e:	3d 93       	st	X+, r19
    5440:	30 e3       	ldi	r19, 0x30	; 48
    5442:	2a 95       	dec	r18
    5444:	e1 f7       	brne	.-8      	; 0x543e <__ftoa_engine+0x1e>
    5446:	08 95       	ret
    5448:	9f 3f       	cpi	r25, 0xFF	; 255
    544a:	30 f0       	brcs	.+12     	; 0x5458 <__ftoa_engine+0x38>
    544c:	80 38       	cpi	r24, 0x80	; 128
    544e:	71 05       	cpc	r23, r1
    5450:	61 05       	cpc	r22, r1
    5452:	09 f0       	breq	.+2      	; 0x5456 <__ftoa_engine+0x36>
    5454:	3c 5f       	subi	r19, 0xFC	; 252
    5456:	3c 5f       	subi	r19, 0xFC	; 252
    5458:	3d 93       	st	X+, r19
    545a:	91 30       	cpi	r25, 0x01	; 1
    545c:	08 f0       	brcs	.+2      	; 0x5460 <__ftoa_engine+0x40>
    545e:	80 68       	ori	r24, 0x80	; 128
    5460:	91 1d       	adc	r25, r1
    5462:	df 93       	push	r29
    5464:	cf 93       	push	r28
    5466:	1f 93       	push	r17
    5468:	0f 93       	push	r16
    546a:	ff 92       	push	r15
    546c:	ef 92       	push	r14
    546e:	19 2f       	mov	r17, r25
    5470:	98 7f       	andi	r25, 0xF8	; 248
    5472:	96 95       	lsr	r25
    5474:	e9 2f       	mov	r30, r25
    5476:	96 95       	lsr	r25
    5478:	96 95       	lsr	r25
    547a:	e9 0f       	add	r30, r25
    547c:	ff 27       	eor	r31, r31
    547e:	e2 5a       	subi	r30, 0xA2	; 162
    5480:	fd 4f       	sbci	r31, 0xFD	; 253
    5482:	99 27       	eor	r25, r25
    5484:	33 27       	eor	r19, r19
    5486:	ee 24       	eor	r14, r14
    5488:	ff 24       	eor	r15, r15
    548a:	a7 01       	movw	r20, r14
    548c:	e7 01       	movw	r28, r14
    548e:	05 90       	lpm	r0, Z+
    5490:	08 94       	sec
    5492:	07 94       	ror	r0
    5494:	28 f4       	brcc	.+10     	; 0x54a0 <__ftoa_engine+0x80>
    5496:	36 0f       	add	r19, r22
    5498:	e7 1e       	adc	r14, r23
    549a:	f8 1e       	adc	r15, r24
    549c:	49 1f       	adc	r20, r25
    549e:	51 1d       	adc	r21, r1
    54a0:	66 0f       	add	r22, r22
    54a2:	77 1f       	adc	r23, r23
    54a4:	88 1f       	adc	r24, r24
    54a6:	99 1f       	adc	r25, r25
    54a8:	06 94       	lsr	r0
    54aa:	a1 f7       	brne	.-24     	; 0x5494 <__ftoa_engine+0x74>
    54ac:	05 90       	lpm	r0, Z+
    54ae:	07 94       	ror	r0
    54b0:	28 f4       	brcc	.+10     	; 0x54bc <__ftoa_engine+0x9c>
    54b2:	e7 0e       	add	r14, r23
    54b4:	f8 1e       	adc	r15, r24
    54b6:	49 1f       	adc	r20, r25
    54b8:	56 1f       	adc	r21, r22
    54ba:	c1 1d       	adc	r28, r1
    54bc:	77 0f       	add	r23, r23
    54be:	88 1f       	adc	r24, r24
    54c0:	99 1f       	adc	r25, r25
    54c2:	66 1f       	adc	r22, r22
    54c4:	06 94       	lsr	r0
    54c6:	a1 f7       	brne	.-24     	; 0x54b0 <__ftoa_engine+0x90>
    54c8:	05 90       	lpm	r0, Z+
    54ca:	07 94       	ror	r0
    54cc:	28 f4       	brcc	.+10     	; 0x54d8 <__ftoa_engine+0xb8>
    54ce:	f8 0e       	add	r15, r24
    54d0:	49 1f       	adc	r20, r25
    54d2:	56 1f       	adc	r21, r22
    54d4:	c7 1f       	adc	r28, r23
    54d6:	d1 1d       	adc	r29, r1
    54d8:	88 0f       	add	r24, r24
    54da:	99 1f       	adc	r25, r25
    54dc:	66 1f       	adc	r22, r22
    54de:	77 1f       	adc	r23, r23
    54e0:	06 94       	lsr	r0
    54e2:	a1 f7       	brne	.-24     	; 0x54cc <__ftoa_engine+0xac>
    54e4:	05 90       	lpm	r0, Z+
    54e6:	07 94       	ror	r0
    54e8:	20 f4       	brcc	.+8      	; 0x54f2 <__ftoa_engine+0xd2>
    54ea:	49 0f       	add	r20, r25
    54ec:	56 1f       	adc	r21, r22
    54ee:	c7 1f       	adc	r28, r23
    54f0:	d8 1f       	adc	r29, r24
    54f2:	99 0f       	add	r25, r25
    54f4:	66 1f       	adc	r22, r22
    54f6:	77 1f       	adc	r23, r23
    54f8:	88 1f       	adc	r24, r24
    54fa:	06 94       	lsr	r0
    54fc:	a9 f7       	brne	.-22     	; 0x54e8 <__ftoa_engine+0xc8>
    54fe:	84 91       	lpm	r24, Z
    5500:	10 95       	com	r17
    5502:	17 70       	andi	r17, 0x07	; 7
    5504:	41 f0       	breq	.+16     	; 0x5516 <__ftoa_engine+0xf6>
    5506:	d6 95       	lsr	r29
    5508:	c7 95       	ror	r28
    550a:	57 95       	ror	r21
    550c:	47 95       	ror	r20
    550e:	f7 94       	ror	r15
    5510:	e7 94       	ror	r14
    5512:	1a 95       	dec	r17
    5514:	c1 f7       	brne	.-16     	; 0x5506 <__ftoa_engine+0xe6>
    5516:	e4 e0       	ldi	r30, 0x04	; 4
    5518:	f2 e0       	ldi	r31, 0x02	; 2
    551a:	68 94       	set
    551c:	15 90       	lpm	r1, Z+
    551e:	15 91       	lpm	r17, Z+
    5520:	35 91       	lpm	r19, Z+
    5522:	65 91       	lpm	r22, Z+
    5524:	95 91       	lpm	r25, Z+
    5526:	05 90       	lpm	r0, Z+
    5528:	7f e2       	ldi	r23, 0x2F	; 47
    552a:	73 95       	inc	r23
    552c:	e1 18       	sub	r14, r1
    552e:	f1 0a       	sbc	r15, r17
    5530:	43 0b       	sbc	r20, r19
    5532:	56 0b       	sbc	r21, r22
    5534:	c9 0b       	sbc	r28, r25
    5536:	d0 09       	sbc	r29, r0
    5538:	c0 f7       	brcc	.-16     	; 0x552a <__ftoa_engine+0x10a>
    553a:	e1 0c       	add	r14, r1
    553c:	f1 1e       	adc	r15, r17
    553e:	43 1f       	adc	r20, r19
    5540:	56 1f       	adc	r21, r22
    5542:	c9 1f       	adc	r28, r25
    5544:	d0 1d       	adc	r29, r0
    5546:	7e f4       	brtc	.+30     	; 0x5566 <__ftoa_engine+0x146>
    5548:	70 33       	cpi	r23, 0x30	; 48
    554a:	11 f4       	brne	.+4      	; 0x5550 <__ftoa_engine+0x130>
    554c:	8a 95       	dec	r24
    554e:	e6 cf       	rjmp	.-52     	; 0x551c <__ftoa_engine+0xfc>
    5550:	e8 94       	clt
    5552:	01 50       	subi	r16, 0x01	; 1
    5554:	30 f0       	brcs	.+12     	; 0x5562 <__ftoa_engine+0x142>
    5556:	08 0f       	add	r16, r24
    5558:	0a f4       	brpl	.+2      	; 0x555c <__ftoa_engine+0x13c>
    555a:	00 27       	eor	r16, r16
    555c:	02 17       	cp	r16, r18
    555e:	08 f4       	brcc	.+2      	; 0x5562 <__ftoa_engine+0x142>
    5560:	20 2f       	mov	r18, r16
    5562:	23 95       	inc	r18
    5564:	02 2f       	mov	r16, r18
    5566:	7a 33       	cpi	r23, 0x3A	; 58
    5568:	28 f0       	brcs	.+10     	; 0x5574 <__ftoa_engine+0x154>
    556a:	79 e3       	ldi	r23, 0x39	; 57
    556c:	7d 93       	st	X+, r23
    556e:	2a 95       	dec	r18
    5570:	e9 f7       	brne	.-6      	; 0x556c <__ftoa_engine+0x14c>
    5572:	10 c0       	rjmp	.+32     	; 0x5594 <__ftoa_engine+0x174>
    5574:	7d 93       	st	X+, r23
    5576:	2a 95       	dec	r18
    5578:	89 f6       	brne	.-94     	; 0x551c <__ftoa_engine+0xfc>
    557a:	06 94       	lsr	r0
    557c:	97 95       	ror	r25
    557e:	67 95       	ror	r22
    5580:	37 95       	ror	r19
    5582:	17 95       	ror	r17
    5584:	17 94       	ror	r1
    5586:	e1 18       	sub	r14, r1
    5588:	f1 0a       	sbc	r15, r17
    558a:	43 0b       	sbc	r20, r19
    558c:	56 0b       	sbc	r21, r22
    558e:	c9 0b       	sbc	r28, r25
    5590:	d0 09       	sbc	r29, r0
    5592:	98 f0       	brcs	.+38     	; 0x55ba <__ftoa_engine+0x19a>
    5594:	23 95       	inc	r18
    5596:	7e 91       	ld	r23, -X
    5598:	73 95       	inc	r23
    559a:	7a 33       	cpi	r23, 0x3A	; 58
    559c:	08 f0       	brcs	.+2      	; 0x55a0 <__ftoa_engine+0x180>
    559e:	70 e3       	ldi	r23, 0x30	; 48
    55a0:	7c 93       	st	X, r23
    55a2:	20 13       	cpse	r18, r16
    55a4:	b8 f7       	brcc	.-18     	; 0x5594 <__ftoa_engine+0x174>
    55a6:	7e 91       	ld	r23, -X
    55a8:	70 61       	ori	r23, 0x10	; 16
    55aa:	7d 93       	st	X+, r23
    55ac:	30 f0       	brcs	.+12     	; 0x55ba <__ftoa_engine+0x19a>
    55ae:	83 95       	inc	r24
    55b0:	71 e3       	ldi	r23, 0x31	; 49
    55b2:	7d 93       	st	X+, r23
    55b4:	70 e3       	ldi	r23, 0x30	; 48
    55b6:	2a 95       	dec	r18
    55b8:	e1 f7       	brne	.-8      	; 0x55b2 <__ftoa_engine+0x192>
    55ba:	11 24       	eor	r1, r1
    55bc:	ef 90       	pop	r14
    55be:	ff 90       	pop	r15
    55c0:	0f 91       	pop	r16
    55c2:	1f 91       	pop	r17
    55c4:	cf 91       	pop	r28
    55c6:	df 91       	pop	r29
    55c8:	99 27       	eor	r25, r25
    55ca:	87 fd       	sbrc	r24, 7
    55cc:	90 95       	com	r25
    55ce:	08 95       	ret

000055d0 <strnlen_P>:
    55d0:	fc 01       	movw	r30, r24
    55d2:	05 90       	lpm	r0, Z+
    55d4:	61 50       	subi	r22, 0x01	; 1
    55d6:	70 40       	sbci	r23, 0x00	; 0
    55d8:	01 10       	cpse	r0, r1
    55da:	d8 f7       	brcc	.-10     	; 0x55d2 <strnlen_P+0x2>
    55dc:	80 95       	com	r24
    55de:	90 95       	com	r25
    55e0:	8e 0f       	add	r24, r30
    55e2:	9f 1f       	adc	r25, r31
    55e4:	08 95       	ret

000055e6 <strnlen>:
    55e6:	fc 01       	movw	r30, r24
    55e8:	61 50       	subi	r22, 0x01	; 1
    55ea:	70 40       	sbci	r23, 0x00	; 0
    55ec:	01 90       	ld	r0, Z+
    55ee:	01 10       	cpse	r0, r1
    55f0:	d8 f7       	brcc	.-10     	; 0x55e8 <strnlen+0x2>
    55f2:	80 95       	com	r24
    55f4:	90 95       	com	r25
    55f6:	8e 0f       	add	r24, r30
    55f8:	9f 1f       	adc	r25, r31
    55fa:	08 95       	ret

000055fc <fdevopen>:
    55fc:	0f 93       	push	r16
    55fe:	1f 93       	push	r17
    5600:	cf 93       	push	r28
    5602:	df 93       	push	r29
    5604:	00 97       	sbiw	r24, 0x00	; 0
    5606:	31 f4       	brne	.+12     	; 0x5614 <fdevopen+0x18>
    5608:	61 15       	cp	r22, r1
    560a:	71 05       	cpc	r23, r1
    560c:	19 f4       	brne	.+6      	; 0x5614 <fdevopen+0x18>
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	39 c0       	rjmp	.+114    	; 0x5686 <fdevopen+0x8a>
    5614:	8b 01       	movw	r16, r22
    5616:	ec 01       	movw	r28, r24
    5618:	6e e0       	ldi	r22, 0x0E	; 14
    561a:	70 e0       	ldi	r23, 0x00	; 0
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	14 d1       	rcall	.+552    	; 0x584a <calloc>
    5622:	fc 01       	movw	r30, r24
    5624:	89 2b       	or	r24, r25
    5626:	99 f3       	breq	.-26     	; 0x560e <fdevopen+0x12>
    5628:	80 e8       	ldi	r24, 0x80	; 128
    562a:	83 83       	std	Z+3, r24	; 0x03
    562c:	01 15       	cp	r16, r1
    562e:	11 05       	cpc	r17, r1
    5630:	71 f0       	breq	.+28     	; 0x564e <fdevopen+0x52>
    5632:	02 87       	std	Z+10, r16	; 0x0a
    5634:	13 87       	std	Z+11, r17	; 0x0b
    5636:	81 e8       	ldi	r24, 0x81	; 129
    5638:	83 83       	std	Z+3, r24	; 0x03
    563a:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <__iob>
    563e:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <__iob+0x1>
    5642:	89 2b       	or	r24, r25
    5644:	21 f4       	brne	.+8      	; 0x564e <fdevopen+0x52>
    5646:	e0 93 cd 21 	sts	0x21CD, r30	; 0x8021cd <__iob>
    564a:	f0 93 ce 21 	sts	0x21CE, r31	; 0x8021ce <__iob+0x1>
    564e:	20 97       	sbiw	r28, 0x00	; 0
    5650:	c9 f0       	breq	.+50     	; 0x5684 <fdevopen+0x88>
    5652:	c0 87       	std	Z+8, r28	; 0x08
    5654:	d1 87       	std	Z+9, r29	; 0x09
    5656:	83 81       	ldd	r24, Z+3	; 0x03
    5658:	82 60       	ori	r24, 0x02	; 2
    565a:	83 83       	std	Z+3, r24	; 0x03
    565c:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <__iob+0x2>
    5660:	90 91 d0 21 	lds	r25, 0x21D0	; 0x8021d0 <__iob+0x3>
    5664:	89 2b       	or	r24, r25
    5666:	71 f4       	brne	.+28     	; 0x5684 <fdevopen+0x88>
    5668:	e0 93 cf 21 	sts	0x21CF, r30	; 0x8021cf <__iob+0x2>
    566c:	f0 93 d0 21 	sts	0x21D0, r31	; 0x8021d0 <__iob+0x3>
    5670:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <__iob+0x4>
    5674:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <__iob+0x5>
    5678:	89 2b       	or	r24, r25
    567a:	21 f4       	brne	.+8      	; 0x5684 <fdevopen+0x88>
    567c:	e0 93 d1 21 	sts	0x21D1, r30	; 0x8021d1 <__iob+0x4>
    5680:	f0 93 d2 21 	sts	0x21D2, r31	; 0x8021d2 <__iob+0x5>
    5684:	cf 01       	movw	r24, r30
    5686:	df 91       	pop	r29
    5688:	cf 91       	pop	r28
    568a:	1f 91       	pop	r17
    568c:	0f 91       	pop	r16
    568e:	08 95       	ret

00005690 <fputc>:
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	fb 01       	movw	r30, r22
    569a:	23 81       	ldd	r18, Z+3	; 0x03
    569c:	21 fd       	sbrc	r18, 1
    569e:	03 c0       	rjmp	.+6      	; 0x56a6 <fputc+0x16>
    56a0:	8f ef       	ldi	r24, 0xFF	; 255
    56a2:	9f ef       	ldi	r25, 0xFF	; 255
    56a4:	2c c0       	rjmp	.+88     	; 0x56fe <fputc+0x6e>
    56a6:	22 ff       	sbrs	r18, 2
    56a8:	16 c0       	rjmp	.+44     	; 0x56d6 <fputc+0x46>
    56aa:	46 81       	ldd	r20, Z+6	; 0x06
    56ac:	57 81       	ldd	r21, Z+7	; 0x07
    56ae:	24 81       	ldd	r18, Z+4	; 0x04
    56b0:	35 81       	ldd	r19, Z+5	; 0x05
    56b2:	42 17       	cp	r20, r18
    56b4:	53 07       	cpc	r21, r19
    56b6:	44 f4       	brge	.+16     	; 0x56c8 <fputc+0x38>
    56b8:	a0 81       	ld	r26, Z
    56ba:	b1 81       	ldd	r27, Z+1	; 0x01
    56bc:	9d 01       	movw	r18, r26
    56be:	2f 5f       	subi	r18, 0xFF	; 255
    56c0:	3f 4f       	sbci	r19, 0xFF	; 255
    56c2:	20 83       	st	Z, r18
    56c4:	31 83       	std	Z+1, r19	; 0x01
    56c6:	8c 93       	st	X, r24
    56c8:	26 81       	ldd	r18, Z+6	; 0x06
    56ca:	37 81       	ldd	r19, Z+7	; 0x07
    56cc:	2f 5f       	subi	r18, 0xFF	; 255
    56ce:	3f 4f       	sbci	r19, 0xFF	; 255
    56d0:	26 83       	std	Z+6, r18	; 0x06
    56d2:	37 83       	std	Z+7, r19	; 0x07
    56d4:	14 c0       	rjmp	.+40     	; 0x56fe <fputc+0x6e>
    56d6:	8b 01       	movw	r16, r22
    56d8:	ec 01       	movw	r28, r24
    56da:	fb 01       	movw	r30, r22
    56dc:	00 84       	ldd	r0, Z+8	; 0x08
    56de:	f1 85       	ldd	r31, Z+9	; 0x09
    56e0:	e0 2d       	mov	r30, r0
    56e2:	19 95       	eicall
    56e4:	89 2b       	or	r24, r25
    56e6:	e1 f6       	brne	.-72     	; 0x56a0 <fputc+0x10>
    56e8:	d8 01       	movw	r26, r16
    56ea:	16 96       	adiw	r26, 0x06	; 6
    56ec:	8d 91       	ld	r24, X+
    56ee:	9c 91       	ld	r25, X
    56f0:	17 97       	sbiw	r26, 0x07	; 7
    56f2:	01 96       	adiw	r24, 0x01	; 1
    56f4:	16 96       	adiw	r26, 0x06	; 6
    56f6:	8d 93       	st	X+, r24
    56f8:	9c 93       	st	X, r25
    56fa:	17 97       	sbiw	r26, 0x07	; 7
    56fc:	ce 01       	movw	r24, r28
    56fe:	df 91       	pop	r29
    5700:	cf 91       	pop	r28
    5702:	1f 91       	pop	r17
    5704:	0f 91       	pop	r16
    5706:	08 95       	ret

00005708 <printf>:
    5708:	cf 93       	push	r28
    570a:	df 93       	push	r29
    570c:	cd b7       	in	r28, 0x3d	; 61
    570e:	de b7       	in	r29, 0x3e	; 62
    5710:	ae 01       	movw	r20, r28
    5712:	4a 5f       	subi	r20, 0xFA	; 250
    5714:	5f 4f       	sbci	r21, 0xFF	; 255
    5716:	fa 01       	movw	r30, r20
    5718:	61 91       	ld	r22, Z+
    571a:	71 91       	ld	r23, Z+
    571c:	af 01       	movw	r20, r30
    571e:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <__iob+0x2>
    5722:	90 91 d0 21 	lds	r25, 0x21D0	; 0x8021d0 <__iob+0x3>
    5726:	2d d9       	rcall	.-3494   	; 0x4982 <vfprintf>
    5728:	df 91       	pop	r29
    572a:	cf 91       	pop	r28
    572c:	08 95       	ret

0000572e <puts>:
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	e0 91 cf 21 	lds	r30, 0x21CF	; 0x8021cf <__iob+0x2>
    573a:	f0 91 d0 21 	lds	r31, 0x21D0	; 0x8021d0 <__iob+0x3>
    573e:	23 81       	ldd	r18, Z+3	; 0x03
    5740:	21 ff       	sbrs	r18, 1
    5742:	1b c0       	rjmp	.+54     	; 0x577a <puts+0x4c>
    5744:	8c 01       	movw	r16, r24
    5746:	d0 e0       	ldi	r29, 0x00	; 0
    5748:	c0 e0       	ldi	r28, 0x00	; 0
    574a:	f8 01       	movw	r30, r16
    574c:	81 91       	ld	r24, Z+
    574e:	8f 01       	movw	r16, r30
    5750:	60 91 cf 21 	lds	r22, 0x21CF	; 0x8021cf <__iob+0x2>
    5754:	70 91 d0 21 	lds	r23, 0x21D0	; 0x8021d0 <__iob+0x3>
    5758:	db 01       	movw	r26, r22
    575a:	18 96       	adiw	r26, 0x08	; 8
    575c:	ed 91       	ld	r30, X+
    575e:	fc 91       	ld	r31, X
    5760:	19 97       	sbiw	r26, 0x09	; 9
    5762:	88 23       	and	r24, r24
    5764:	31 f0       	breq	.+12     	; 0x5772 <puts+0x44>
    5766:	19 95       	eicall
    5768:	89 2b       	or	r24, r25
    576a:	79 f3       	breq	.-34     	; 0x574a <puts+0x1c>
    576c:	df ef       	ldi	r29, 0xFF	; 255
    576e:	cf ef       	ldi	r28, 0xFF	; 255
    5770:	ec cf       	rjmp	.-40     	; 0x574a <puts+0x1c>
    5772:	8a e0       	ldi	r24, 0x0A	; 10
    5774:	19 95       	eicall
    5776:	89 2b       	or	r24, r25
    5778:	19 f0       	breq	.+6      	; 0x5780 <puts+0x52>
    577a:	8f ef       	ldi	r24, 0xFF	; 255
    577c:	9f ef       	ldi	r25, 0xFF	; 255
    577e:	02 c0       	rjmp	.+4      	; 0x5784 <puts+0x56>
    5780:	8d 2f       	mov	r24, r29
    5782:	9c 2f       	mov	r25, r28
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	1f 91       	pop	r17
    578a:	0f 91       	pop	r16
    578c:	08 95       	ret

0000578e <__ultoa_invert>:
    578e:	fa 01       	movw	r30, r20
    5790:	aa 27       	eor	r26, r26
    5792:	28 30       	cpi	r18, 0x08	; 8
    5794:	51 f1       	breq	.+84     	; 0x57ea <__ultoa_invert+0x5c>
    5796:	20 31       	cpi	r18, 0x10	; 16
    5798:	81 f1       	breq	.+96     	; 0x57fa <__ultoa_invert+0x6c>
    579a:	e8 94       	clt
    579c:	6f 93       	push	r22
    579e:	6e 7f       	andi	r22, 0xFE	; 254
    57a0:	6e 5f       	subi	r22, 0xFE	; 254
    57a2:	7f 4f       	sbci	r23, 0xFF	; 255
    57a4:	8f 4f       	sbci	r24, 0xFF	; 255
    57a6:	9f 4f       	sbci	r25, 0xFF	; 255
    57a8:	af 4f       	sbci	r26, 0xFF	; 255
    57aa:	b1 e0       	ldi	r27, 0x01	; 1
    57ac:	3e d0       	rcall	.+124    	; 0x582a <__ultoa_invert+0x9c>
    57ae:	b4 e0       	ldi	r27, 0x04	; 4
    57b0:	3c d0       	rcall	.+120    	; 0x582a <__ultoa_invert+0x9c>
    57b2:	67 0f       	add	r22, r23
    57b4:	78 1f       	adc	r23, r24
    57b6:	89 1f       	adc	r24, r25
    57b8:	9a 1f       	adc	r25, r26
    57ba:	a1 1d       	adc	r26, r1
    57bc:	68 0f       	add	r22, r24
    57be:	79 1f       	adc	r23, r25
    57c0:	8a 1f       	adc	r24, r26
    57c2:	91 1d       	adc	r25, r1
    57c4:	a1 1d       	adc	r26, r1
    57c6:	6a 0f       	add	r22, r26
    57c8:	71 1d       	adc	r23, r1
    57ca:	81 1d       	adc	r24, r1
    57cc:	91 1d       	adc	r25, r1
    57ce:	a1 1d       	adc	r26, r1
    57d0:	20 d0       	rcall	.+64     	; 0x5812 <__ultoa_invert+0x84>
    57d2:	09 f4       	brne	.+2      	; 0x57d6 <__ultoa_invert+0x48>
    57d4:	68 94       	set
    57d6:	3f 91       	pop	r19
    57d8:	2a e0       	ldi	r18, 0x0A	; 10
    57da:	26 9f       	mul	r18, r22
    57dc:	11 24       	eor	r1, r1
    57de:	30 19       	sub	r19, r0
    57e0:	30 5d       	subi	r19, 0xD0	; 208
    57e2:	31 93       	st	Z+, r19
    57e4:	de f6       	brtc	.-74     	; 0x579c <__ultoa_invert+0xe>
    57e6:	cf 01       	movw	r24, r30
    57e8:	08 95       	ret
    57ea:	46 2f       	mov	r20, r22
    57ec:	47 70       	andi	r20, 0x07	; 7
    57ee:	40 5d       	subi	r20, 0xD0	; 208
    57f0:	41 93       	st	Z+, r20
    57f2:	b3 e0       	ldi	r27, 0x03	; 3
    57f4:	0f d0       	rcall	.+30     	; 0x5814 <__ultoa_invert+0x86>
    57f6:	c9 f7       	brne	.-14     	; 0x57ea <__ultoa_invert+0x5c>
    57f8:	f6 cf       	rjmp	.-20     	; 0x57e6 <__ultoa_invert+0x58>
    57fa:	46 2f       	mov	r20, r22
    57fc:	4f 70       	andi	r20, 0x0F	; 15
    57fe:	40 5d       	subi	r20, 0xD0	; 208
    5800:	4a 33       	cpi	r20, 0x3A	; 58
    5802:	18 f0       	brcs	.+6      	; 0x580a <__ultoa_invert+0x7c>
    5804:	49 5d       	subi	r20, 0xD9	; 217
    5806:	31 fd       	sbrc	r19, 1
    5808:	40 52       	subi	r20, 0x20	; 32
    580a:	41 93       	st	Z+, r20
    580c:	02 d0       	rcall	.+4      	; 0x5812 <__ultoa_invert+0x84>
    580e:	a9 f7       	brne	.-22     	; 0x57fa <__ultoa_invert+0x6c>
    5810:	ea cf       	rjmp	.-44     	; 0x57e6 <__ultoa_invert+0x58>
    5812:	b4 e0       	ldi	r27, 0x04	; 4
    5814:	a6 95       	lsr	r26
    5816:	97 95       	ror	r25
    5818:	87 95       	ror	r24
    581a:	77 95       	ror	r23
    581c:	67 95       	ror	r22
    581e:	ba 95       	dec	r27
    5820:	c9 f7       	brne	.-14     	; 0x5814 <__ultoa_invert+0x86>
    5822:	00 97       	sbiw	r24, 0x00	; 0
    5824:	61 05       	cpc	r22, r1
    5826:	71 05       	cpc	r23, r1
    5828:	08 95       	ret
    582a:	9b 01       	movw	r18, r22
    582c:	ac 01       	movw	r20, r24
    582e:	0a 2e       	mov	r0, r26
    5830:	06 94       	lsr	r0
    5832:	57 95       	ror	r21
    5834:	47 95       	ror	r20
    5836:	37 95       	ror	r19
    5838:	27 95       	ror	r18
    583a:	ba 95       	dec	r27
    583c:	c9 f7       	brne	.-14     	; 0x5830 <__ultoa_invert+0xa2>
    583e:	62 0f       	add	r22, r18
    5840:	73 1f       	adc	r23, r19
    5842:	84 1f       	adc	r24, r20
    5844:	95 1f       	adc	r25, r21
    5846:	a0 1d       	adc	r26, r0
    5848:	08 95       	ret

0000584a <calloc>:
    584a:	0f 93       	push	r16
    584c:	1f 93       	push	r17
    584e:	cf 93       	push	r28
    5850:	df 93       	push	r29
    5852:	86 9f       	mul	r24, r22
    5854:	80 01       	movw	r16, r0
    5856:	87 9f       	mul	r24, r23
    5858:	10 0d       	add	r17, r0
    585a:	96 9f       	mul	r25, r22
    585c:	10 0d       	add	r17, r0
    585e:	11 24       	eor	r1, r1
    5860:	c8 01       	movw	r24, r16
    5862:	bd dc       	rcall	.-1670   	; 0x51de <malloc>
    5864:	ec 01       	movw	r28, r24
    5866:	00 97       	sbiw	r24, 0x00	; 0
    5868:	21 f0       	breq	.+8      	; 0x5872 <calloc+0x28>
    586a:	a8 01       	movw	r20, r16
    586c:	60 e0       	ldi	r22, 0x00	; 0
    586e:	70 e0       	ldi	r23, 0x00	; 0
    5870:	06 d0       	rcall	.+12     	; 0x587e <memset>
    5872:	ce 01       	movw	r24, r28
    5874:	df 91       	pop	r29
    5876:	cf 91       	pop	r28
    5878:	1f 91       	pop	r17
    587a:	0f 91       	pop	r16
    587c:	08 95       	ret

0000587e <memset>:
    587e:	dc 01       	movw	r26, r24
    5880:	01 c0       	rjmp	.+2      	; 0x5884 <memset+0x6>
    5882:	6d 93       	st	X+, r22
    5884:	41 50       	subi	r20, 0x01	; 1
    5886:	50 40       	sbci	r21, 0x00	; 0
    5888:	e0 f7       	brcc	.-8      	; 0x5882 <memset+0x4>
    588a:	08 95       	ret

0000588c <_exit>:
    588c:	f8 94       	cli

0000588e <__stop_program>:
    588e:	ff cf       	rjmp	.-2      	; 0x588e <__stop_program>
