
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007bfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00802000  00007bfc  00007c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000601  00802084  00802084  00007d14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007d14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00007db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015dc9  00000000  00000000  00008860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006886  00000000  00000000  0001e629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000efda  00000000  00000000  00024eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003464  00000000  00000000  00033e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000418b6  00000000  00000000  000372f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000073e9  00000000  00000000  00078ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b8  00000000  00000000  0007ff8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000eca2  00000000  00000000  00080947  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__vector_10>
      2c:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__vector_11>
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 81 26 	jmp	0x4d02	; 0x4d02 <__vector_13>
      38:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__vector_14>
      3c:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__vector_15>
      40:	0c 94 97 19 	jmp	0x332e	; 0x332e <__vector_16>
      44:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__vector_17>
      48:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__vector_18>
      4c:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__vector_19>
      50:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__vector_20>
      54:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__vector_21>
      58:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__vector_22>
      5c:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1a c6       	rjmp	.+3124   	; 0xcd2 <__vector_39>
      9e:	00 00       	nop
      a0:	a4 c6       	rjmp	.+3400   	; 0xdea <__vector_40>
      a2:	00 00       	nop
      a4:	2e c7       	rjmp	.+3676   	; 0xf02 <__vector_41>
      a6:	00 00       	nop
      a8:	b8 c7       	rjmp	.+3952   	; 0x101a <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__vector_46>
      bc:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__vector_47>
      c0:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <__vector_48>
      c4:	0c 94 63 20 	jmp	0x40c6	; 0x40c6 <__vector_49>
      c8:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__vector_50>
      cc:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__vector_51>
      d0:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__vector_52>
      d4:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__vector_53>
      d8:	0c 94 16 22 	jmp	0x442c	; 0x442c <__vector_54>
      dc:	0c 94 6d 22 	jmp	0x44da	; 0x44da <__vector_55>
      e0:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__vector_56>
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2a c1       	rjmp	.+596    	; 0x34a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	aa c3       	rjmp	.+1876   	; 0x872 <__vector_71>
     11e:	00 00       	nop
     120:	34 c4       	rjmp	.+2152   	; 0x98a <__vector_72>
     122:	00 00       	nop
     124:	be c4       	rjmp	.+2428   	; 0xaa2 <__vector_73>
     126:	00 00       	nop
     128:	48 c5       	rjmp	.+2704   	; 0xbba <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__vector_76>
     134:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__vector_77>
     138:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <__vector_78>
     13c:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__vector_79>
     140:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <__vector_80>
     144:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__vector_81>
     148:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__vector_82>
     14c:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__vector_83>
     150:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__vector_84>
     154:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__vector_85>
     158:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__vector_107>
     1b0:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__vector_108>
     1b4:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__vector_109>
     1b8:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <__vector_110>
     1bc:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__vector_111>
     1c0:	0c 94 77 24 	jmp	0x48ee	; 0x48ee <__vector_112>
     1c4:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__vector_113>
     1c8:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <__vector_114>
     1cc:	0c 94 7c 25 	jmp	0x4af8	; 0x4af8 <__vector_115>
     1d0:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__vector_116>
     1d4:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <__vector_117>
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__vector_119>
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	d1 c7       	rjmp	.+4002   	; 0x118c <__vector_122>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_124>
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	ec ef       	ldi	r30, 0xFC	; 252
     31e:	fb e7       	ldi	r31, 0x7B	; 123
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a4 38       	cpi	r26, 0x84	; 132
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	26 e2       	ldi	r18, 0x26	; 38
     334:	a4 e8       	ldi	r26, 0x84	; 132
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a5 38       	cpi	r26, 0x85	; 133
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 b2 31 	call	0x6364	; 0x6364 <main>
     346:	0c 94 fc 3d 	jmp	0x7bf8	; 0x7bf8 <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <ioport_set_pin_low>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_low(port_pin_t pin)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	2a 97       	sbiw	r28, 0x0a	; 10
     356:	cd bf       	out	0x3d, r28	; 61
     358:	de bf       	out	0x3e, r29	; 62
     35a:	8a 87       	std	Y+10, r24	; 0x0a
     35c:	8a 85       	ldd	r24, Y+10	; 0x0a
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	1a 82       	std	Y+2, r1	; 0x02
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8b 83       	std	Y+3, r24	; 0x03
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	86 95       	lsr	r24
     36e:	86 95       	lsr	r24
     370:	86 95       	lsr	r24
     372:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     374:	8d 81       	ldd	r24, Y+5	; 0x05
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	82 95       	swap	r24
     380:	92 95       	swap	r25
     382:	90 7f       	andi	r25, 0xF0	; 240
     384:	98 27       	eor	r25, r24
     386:	80 7f       	andi	r24, 0xF0	; 240
     388:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     38a:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     38c:	8e 83       	std	Y+6, r24	; 0x06
     38e:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	88 23       	and	r24, r24
     394:	a9 f0       	breq	.+42     	; 0x3c0 <ioport_set_pin_low+0x74>
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     39a:	88 85       	ldd	r24, Y+8	; 0x08
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	9c 01       	movw	r18, r24
     3a2:	27 70       	andi	r18, 0x07	; 7
     3a4:	33 27       	eor	r19, r19
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <ioport_set_pin_low+0x64>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	2a 95       	dec	r18
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <ioport_set_pin_low+0x60>
     3b4:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	fc 01       	movw	r30, r24
     3bc:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, false);
}
     3be:	14 c0       	rjmp	.+40     	; 0x3e8 <ioport_set_pin_low+0x9c>
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3c4:	89 85       	ldd	r24, Y+9	; 0x09
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9c 01       	movw	r18, r24
     3cc:	27 70       	andi	r18, 0x07	; 7
     3ce:	33 27       	eor	r19, r19
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <ioport_set_pin_low+0x8e>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	2a 95       	dec	r18
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <ioport_set_pin_low+0x8a>
     3de:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     3e0:	8e 81       	ldd	r24, Y+6	; 0x06
     3e2:	9f 81       	ldd	r25, Y+7	; 0x07
     3e4:	fc 01       	movw	r30, r24
     3e6:	26 83       	std	Z+6, r18	; 0x06
     3e8:	00 00       	nop
     3ea:	2a 96       	adiw	r28, 0x0a	; 10
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	2a 97       	sbiw	r28, 0x0a	; 10
     400:	cd bf       	out	0x3d, r28	; 61
     402:	de bf       	out	0x3e, r29	; 62
     404:	8a 87       	std	Y+10, r24	; 0x0a
     406:	8a 85       	ldd	r24, Y+10	; 0x0a
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8a 83       	std	Y+2, r24	; 0x02
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	86 95       	lsr	r24
     41a:	86 95       	lsr	r24
     41c:	86 95       	lsr	r24
     41e:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     420:	8d 81       	ldd	r24, Y+5	; 0x05
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 95       	swap	r24
     42c:	92 95       	swap	r25
     42e:	90 7f       	andi	r25, 0xF0	; 240
     430:	98 27       	eor	r25, r24
     432:	80 7f       	andi	r24, 0xF0	; 240
     434:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     436:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     438:	8e 83       	std	Y+6, r24	; 0x06
     43a:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	88 23       	and	r24, r24
     440:	a9 f0       	breq	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     446:	88 85       	ldd	r24, Y+8	; 0x08
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9c 01       	movw	r18, r24
     44e:	27 70       	andi	r18, 0x07	; 7
     450:	33 27       	eor	r19, r19
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	2a 95       	dec	r18
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     462:	8e 81       	ldd	r24, Y+6	; 0x06
     464:	9f 81       	ldd	r25, Y+7	; 0x07
     466:	fc 01       	movw	r30, r24
     468:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, true);
}
     46a:	14 c0       	rjmp	.+40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     470:	89 85       	ldd	r24, Y+9	; 0x09
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9c 01       	movw	r18, r24
     478:	27 70       	andi	r18, 0x07	; 7
     47a:	33 27       	eor	r19, r19
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	2a 95       	dec	r18
     488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     48a:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     48c:	8e 81       	ldd	r24, Y+6	; 0x06
     48e:	9f 81       	ldd	r25, Y+7	; 0x07
     490:	fc 01       	movw	r30, r24
     492:	26 83       	std	Z+6, r18	; 0x06
     494:	00 00       	nop
     496:	2a 96       	adiw	r28, 0x0a	; 10
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <spi_put+0x6>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	6b 83       	std	Y+3, r22	; 0x03
	spi->DATA = data;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	2b 81       	ldd	r18, Y+3	; 0x03
     4b8:	fc 01       	movw	r30, r24
     4ba:	23 83       	std	Z+3, r18	; 0x03
}
     4bc:	00 00       	nop
     4be:	23 96       	adiw	r28, 0x03	; 3
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	1f 92       	push	r1
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	9a 83       	std	Y+2, r25	; 0x02
	return spi->DATA;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	fc 01       	movw	r30, r24
     4e0:	83 81       	ldd	r24, Z+3	; 0x03
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <spi_is_tx_ok>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	1f 92       	push	r1
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	9a 83       	std	Y+2, r25	; 0x02
	return spi->STATUS & SPI_IF_bm ? true : false;
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	fc 01       	movw	r30, r24
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	88 1f       	adc	r24, r24
     506:	88 27       	eor	r24, r24
     508:	88 1f       	adc	r24, r24
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <spi_enable_master_mode>:
 * \param spi Base address of the SPI instance.
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	1f 92       	push	r1
     51a:	1f 92       	push	r1
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_MASTER_bm;
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	28 2f       	mov	r18, r24
     52e:	20 61       	ori	r18, 0x10	; 16
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
}
     538:	00 00       	nop
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <spi_read_single>:
 * \param spi Base address of the SPI instance.
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <spi_read_single+0x6>
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	6b 83       	std	Y+3, r22	; 0x03
     556:	7c 83       	std	Y+4, r23	; 0x04
	*data=spi_get(spi);
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	b6 df       	rcall	.-148    	; 0x4ca <spi_get>
     55e:	28 2f       	mov	r18, r24
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
}
     568:	00 00       	nop
     56a:	24 96       	adiw	r28, 0x04	; 4
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	de bf       	out	0x3e, r29	; 62
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <spi_is_rx_full>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
inline static bool spi_is_rx_full(SPI_t *spi)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	1f 92       	push	r1
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	89 83       	std	Y+1, r24	; 0x01
     584:	9a 83       	std	Y+2, r25	; 0x02
	return spi_is_tx_ok(spi);
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	b0 df       	rcall	.-160    	; 0x4ec <spi_is_tx_ok>
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	98 e4       	ldi	r25, 0x48	; 72
     5a2:	a8 ee       	ldi	r26, 0xE8	; 232
     5a4:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     5ba:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     5bc:	ec df       	rcall	.-40     	; 0x596 <sysclk_get_main_hz>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	22 2f       	mov	r18, r18
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <sysclk_get_per4_hz+0x22>
     5ca:	b6 95       	lsr	r27
     5cc:	a7 95       	ror	r26
     5ce:	97 95       	ror	r25
     5d0:	87 95       	ror	r24
     5d2:	2a 95       	dec	r18
     5d4:	d2 f7       	brpl	.-12     	; 0x5ca <sysclk_get_per4_hz+0x1a>
}
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     5ea:	e2 df       	rcall	.-60     	; 0x5b0 <sysclk_get_per4_hz>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     602:	ef df       	rcall	.-34     	; 0x5e2 <sysclk_get_per2_hz>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
}
     608:	bc 01       	movw	r22, r24
     60a:	cd 01       	movw	r24, r26
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
     61a:	ef df       	rcall	.-34     	; 0x5fa <sysclk_get_per_hz>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
}
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	1f 92       	push	r1
     630:	1f 92       	push	r1
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	9a 83       	std	Y+2, r25	; 0x02
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	80 3c       	cpi	r24, 0xC0	; 192
     640:	98 40       	sbci	r25, 0x08	; 8
     642:	21 f4       	brne	.+8      	; 0x64c <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     644:	68 e0       	ldi	r22, 0x08	; 8
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	80 3c       	cpi	r24, 0xC0	; 192
     652:	99 40       	sbci	r25, 0x09	; 9
     654:	21 f4       	brne	.+8      	; 0x65e <spi_master_init+0x34>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	if ((uint16_t)spi == (uint16_t)&SPIE) {
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	80 3c       	cpi	r24, 0xC0	; 192
     664:	9a 40       	sbci	r25, 0x0A	; 10
     666:	21 f4       	brne	.+8      	; 0x670 <spi_master_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E, PR_SPI_bm);
     668:	68 e0       	ldi	r22, 0x08	; 8
     66a:	85 e0       	ldi	r24, 0x05	; 5
     66c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	if ((uint16_t)spi == (uint16_t)&SPIF) {
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	80 3c       	cpi	r24, 0xC0	; 192
     676:	9b 40       	sbci	r25, 0x0B	; 11
     678:	21 f4       	brne	.+8      	; 0x682 <spi_master_init+0x58>
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
     67a:	68 e0       	ldi	r22, 0x08	; 8
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
	}
#endif
	spi_enable_master_mode(spi);
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	46 df       	rcall	.-372    	; 0x514 <spi_enable_master_mode>
}
     688:	00 00       	nop
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	2d 97       	sbiw	r28, 0x0d	; 13
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	6b 83       	std	Y+3, r22	; 0x03
     6b4:	7c 83       	std	Y+4, r23	; 0x04
     6b6:	4d 83       	std	Y+5, r20	; 0x05
     6b8:	0e 83       	std	Y+6, r16	; 0x06
     6ba:	1f 83       	std	Y+7, r17	; 0x07
     6bc:	28 87       	std	Y+8, r18	; 0x08
     6be:	39 87       	std	Y+9, r19	; 0x09
     6c0:	ca 86       	std	Y+10, r12	; 0x0a
     6c2:	db 86       	std	Y+11, r13	; 0x0b
     6c4:	ec 86       	std	Y+12, r14	; 0x0c
     6c6:	fd 86       	std	Y+13, r15	; 0x0d
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     6c8:	a4 df       	rcall	.-184    	; 0x612 <sysclk_get_cpu_hz>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	8e 81       	ldd	r24, Y+6	; 0x06
     6d0:	9f 81       	ldd	r25, Y+7	; 0x07
     6d2:	a8 85       	ldd	r26, Y+8	; 0x08
     6d4:	b9 85       	ldd	r27, Y+9	; 0x09
     6d6:	e9 81       	ldd	r30, Y+1	; 0x01
     6d8:	fa 81       	ldd	r31, Y+2	; 0x02
     6da:	89 01       	movw	r16, r18
     6dc:	9a 01       	movw	r18, r20
     6de:	ac 01       	movw	r20, r24
     6e0:	bd 01       	movw	r22, r26
     6e2:	cf 01       	movw	r24, r30
     6e4:	0e 94 71 18 	call	0x30e2	; 0x30e2 <spi_xmega_set_baud_div>
     6e8:	88 23       	and	r24, r24
     6ea:	ac f0       	brlt	.+42     	; 0x716 <spi_master_setup_device+0x82>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	28 2f       	mov	r18, r24
     6f6:	23 7f       	andi	r18, 0xF3	; 243
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     706:	8c 70       	andi	r24, 0x0C	; 12
     708:	82 2b       	or	r24, r18
     70a:	28 2f       	mov	r18, r24
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
     714:	01 c0       	rjmp	.+2      	; 0x718 <spi_master_setup_device+0x84>
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
		Assert(false);
		return;
     716:	00 00       	nop
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     718:	2d 96       	adiw	r28, 0x0d	; 13
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	8c 83       	std	Y+4, r24	; 0x04
     740:	9d 83       	std	Y+5, r25	; 0x05
     742:	6e 83       	std	Y+6, r22	; 0x06
     744:	7f 83       	std	Y+7, r23	; 0x07
     746:	48 87       	std	Y+8, r20	; 0x08
     748:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     74a:	1b c0       	rjmp	.+54     	; 0x782 <spi_write_packet+0x52>
		spi_write_single(spi, *data++);
     74c:	8e 81       	ldd	r24, Y+6	; 0x06
     74e:	9f 81       	ldd	r25, Y+7	; 0x07
     750:	9c 01       	movw	r18, r24
     752:	2f 5f       	subi	r18, 0xFF	; 255
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	2e 83       	std	Y+6, r18	; 0x06
     758:	3f 83       	std	Y+7, r19	; 0x07
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8c 81       	ldd	r24, Y+4	; 0x04
     760:	9d 81       	ldd	r25, Y+5	; 0x05
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	2b 83       	std	Y+3, r18	; 0x03
 * \param data The data byte to be loaded
 *
 */
__always_inline static void spi_write_single(SPI_t *spi, uint8_t data)
{
	spi_put(spi,data);
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	6b 81       	ldd	r22, Y+3	; 0x03
     76e:	99 de       	rcall	.-718    	; 0x4a2 <spi_put>
		
		while (!spi_is_rx_full(spi)) {
     770:	00 00       	nop
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	9d 81       	ldd	r25, Y+5	; 0x05
     776:	ff de       	rcall	.-514    	; 0x576 <spi_is_rx_full>
     778:	98 2f       	mov	r25, r24
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 27       	eor	r24, r25
     77e:	88 23       	and	r24, r24
     780:	c1 f7       	brne	.-16     	; 0x772 <spi_write_packet+0x42>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     782:	88 85       	ldd	r24, Y+8	; 0x08
     784:	99 85       	ldd	r25, Y+9	; 0x09
     786:	9c 01       	movw	r18, r24
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	31 09       	sbc	r19, r1
     78c:	28 87       	std	Y+8, r18	; 0x08
     78e:	39 87       	std	Y+9, r19	; 0x09
     790:	89 2b       	or	r24, r25
     792:	e1 f6       	brne	.-72     	; 0x74c <spi_write_packet+0x1c>
		
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
     794:	80 e0       	ldi	r24, 0x00	; 0
}
     796:	29 96       	adiw	r28, 0x09	; 9
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	29 97       	sbiw	r28, 0x09	; 9
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	8c 83       	std	Y+4, r24	; 0x04
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	6e 83       	std	Y+6, r22	; 0x06
     7b6:	7f 83       	std	Y+7, r23	; 0x07
     7b8:	48 87       	std	Y+8, r20	; 0x08
     7ba:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     7bc:	1e c0       	rjmp	.+60     	; 0x7fa <spi_read_packet+0x58>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	8b 83       	std	Y+3, r24	; 0x03
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	6b 81       	ldd	r22, Y+3	; 0x03
     7d0:	68 de       	rcall	.-816    	; 0x4a2 <spi_put>
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     7d2:	00 00       	nop
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	9d 81       	ldd	r25, Y+5	; 0x05
     7d8:	ce de       	rcall	.-612    	; 0x576 <spi_is_rx_full>
     7da:	98 2f       	mov	r25, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 27       	eor	r24, r25
     7e0:	88 23       	and	r24, r24
     7e2:	c1 f7       	brne	.-16     	; 0x7d4 <spi_read_packet+0x32>
		}
		
		spi_read_single(spi, data);
     7e4:	2e 81       	ldd	r18, Y+6	; 0x06
     7e6:	3f 81       	ldd	r19, Y+7	; 0x07
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	9d 81       	ldd	r25, Y+5	; 0x05
     7ec:	b9 01       	movw	r22, r18
     7ee:	aa de       	rcall	.-684    	; 0x544 <spi_read_single>
		data++;
     7f0:	8e 81       	ldd	r24, Y+6	; 0x06
     7f2:	9f 81       	ldd	r25, Y+7	; 0x07
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	8e 83       	std	Y+6, r24	; 0x06
     7f8:	9f 83       	std	Y+7, r25	; 0x07
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     7fa:	88 85       	ldd	r24, Y+8	; 0x08
     7fc:	99 85       	ldd	r25, Y+9	; 0x09
     7fe:	9c 01       	movw	r18, r24
     800:	21 50       	subi	r18, 0x01	; 1
     802:	31 09       	sbc	r19, r1
     804:	28 87       	std	Y+8, r18	; 0x08
     806:	39 87       	std	Y+9, r19	; 0x09
     808:	89 2b       	or	r24, r25
     80a:	c9 f6       	brne	.-78     	; 0x7be <spi_read_packet+0x1c>
		
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
     80c:	80 e0       	ldi	r24, 0x00	; 0
}
     80e:	29 96       	adiw	r28, 0x09	; 9
     810:	cd bf       	out	0x3d, r28	; 61
     812:	de bf       	out	0x3e, r29	; 62
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <spi_select_device+0x6>
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	6b 83       	std	Y+3, r22	; 0x03
     82c:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_low(device->id);
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	8a dd       	rcall	.-1260   	; 0x34c <ioport_set_pin_low>
}
     838:	00 00       	nop
     83a:	24 96       	adiw	r28, 0x04	; 4
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	de bf       	out	0x3e, r29	; 62
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <spi_deselect_device+0x6>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	9a 83       	std	Y+2, r25	; 0x02
     856:	6b 83       	std	Y+3, r22	; 0x03
     858:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_high(device->id);
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	c9 dd       	rcall	.-1134   	; 0x3f6 <ioport_set_pin_high>
}
     864:	00 00       	nop
     866:	24 96       	adiw	r28, 0x04	; 4
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     882:	0f 92       	push	r0
     884:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     888:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     88c:	0f 92       	push	r0
     88e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     892:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     896:	0f 92       	push	r0
     898:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     89c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a0:	0f 92       	push	r0
     8a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <__vector_71+0x52>
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     8ca:	20 91 e1 20 	lds	r18, 0x20E1	; 0x8020e1 <adca_callback>
     8ce:	30 91 e2 20 	lds	r19, 0x20E2	; 0x8020e2 <adca_callback+0x1>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8de:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	83 70       	andi	r24, 0x03	; 3
     8e8:	99 27       	eor	r25, r25
     8ea:	89 2b       	or	r24, r25
     8ec:	39 f4       	brne	.+14     	; 0x8fc <__vector_71+0x8a>
		index += 2;
     8ee:	8c 81       	ldd	r24, Y+4	; 0x04
     8f0:	8e 5f       	subi	r24, 0xFE	; 254
     8f2:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	86 95       	lsr	r24
     8f8:	86 95       	lsr	r24
     8fa:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	81 70       	andi	r24, 0x01	; 1
     904:	99 27       	eor	r25, r25
     906:	89 2b       	or	r24, r25
     908:	19 f4       	brne	.+6      	; 0x910 <__vector_71+0x9e>
		index++;
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	ac 01       	movw	r20, r24
     916:	40 5e       	subi	r20, 0xE0	; 224
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	8c 81       	ldd	r24, Y+4	; 0x04
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	84 0f       	add	r24, r20
     92e:	95 1f       	adc	r25, r21
     930:	fc 01       	movw	r30, r24
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	95 81       	ldd	r25, Z+5	; 0x05
     936:	ac 01       	movw	r20, r24
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	f9 01       	movw	r30, r18
     940:	19 95       	eicall
}
     942:	00 00       	nop
     944:	24 96       	adiw	r28, 0x04	; 4
     946:	cd bf       	out	0x3d, r28	; 61
     948:	de bf       	out	0x3e, r29	; 62
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     96c:	0f 90       	pop	r0
     96e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     972:	0f 90       	pop	r0
     974:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     978:	0f 90       	pop	r0
     97a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     97e:	0f 90       	pop	r0
     980:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     99a:	0f 92       	push	r0
     99c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9a4:	0f 92       	push	r0
     9a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9ae:	0f 92       	push	r0
     9b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9b8:	0f 92       	push	r0
     9ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <__vector_72+0x52>
     9dc:	1f 92       	push	r1
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     9e2:	20 91 e1 20 	lds	r18, 0x20E1	; 0x8020e1 <adca_callback>
     9e6:	30 91 e2 20 	lds	r19, 0x20E2	; 0x8020e2 <adca_callback+0x1>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     9f6:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	83 70       	andi	r24, 0x03	; 3
     a00:	99 27       	eor	r25, r25
     a02:	89 2b       	or	r24, r25
     a04:	39 f4       	brne	.+14     	; 0xa14 <__vector_72+0x8a>
		index += 2;
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	8e 5f       	subi	r24, 0xFE	; 254
     a0a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	86 95       	lsr	r24
     a10:	86 95       	lsr	r24
     a12:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	81 70       	andi	r24, 0x01	; 1
     a1c:	99 27       	eor	r25, r25
     a1e:	89 2b       	or	r24, r25
     a20:	19 f4       	brne	.+6      	; 0xa28 <__vector_72+0x9e>
		index++;
     a22:	8c 81       	ldd	r24, Y+4	; 0x04
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	ac 01       	movw	r20, r24
     a2e:	40 5e       	subi	r20, 0xE0	; 224
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	8c 81       	ldd	r24, Y+4	; 0x04
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	fc 01       	movw	r30, r24
     a4a:	84 81       	ldd	r24, Z+4	; 0x04
     a4c:	95 81       	ldd	r25, Z+5	; 0x05
     a4e:	ac 01       	movw	r20, r24
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	f9 01       	movw	r30, r18
     a58:	19 95       	eicall
}
     a5a:	00 00       	nop
     a5c:	24 96       	adiw	r28, 0x04	; 4
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a84:	0f 90       	pop	r0
     a86:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a8a:	0f 90       	pop	r0
     a8c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a90:	0f 90       	pop	r0
     a92:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a96:	0f 90       	pop	r0
     a98:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ab2:	0f 92       	push	r0
     ab4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ab8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     abc:	0f 92       	push	r0
     abe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ac2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ac6:	0f 92       	push	r0
     ac8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     acc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad0:	0f 92       	push	r0
     ad2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <__vector_73+0x52>
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     afa:	20 91 e1 20 	lds	r18, 0x20E1	; 0x8020e1 <adca_callback>
     afe:	30 91 e2 20 	lds	r19, 0x20E2	; 0x8020e2 <adca_callback+0x1>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     b0e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	88 2f       	mov	r24, r24
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	83 70       	andi	r24, 0x03	; 3
     b18:	99 27       	eor	r25, r25
     b1a:	89 2b       	or	r24, r25
     b1c:	39 f4       	brne	.+14     	; 0xb2c <__vector_73+0x8a>
		index += 2;
     b1e:	8c 81       	ldd	r24, Y+4	; 0x04
     b20:	8e 5f       	subi	r24, 0xFE	; 254
     b22:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	86 95       	lsr	r24
     b28:	86 95       	lsr	r24
     b2a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     b2c:	8b 81       	ldd	r24, Y+3	; 0x03
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	81 70       	andi	r24, 0x01	; 1
     b34:	99 27       	eor	r25, r25
     b36:	89 2b       	or	r24, r25
     b38:	19 f4       	brne	.+6      	; 0xb40 <__vector_73+0x9e>
		index++;
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	ac 01       	movw	r20, r24
     b46:	40 5e       	subi	r20, 0xE0	; 224
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	8c 81       	ldd	r24, Y+4	; 0x04
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	84 0f       	add	r24, r20
     b5e:	95 1f       	adc	r25, r21
     b60:	fc 01       	movw	r30, r24
     b62:	84 81       	ldd	r24, Z+4	; 0x04
     b64:	95 81       	ldd	r25, Z+5	; 0x05
     b66:	ac 01       	movw	r20, r24
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	f9 01       	movw	r30, r18
     b70:	19 95       	eicall
}
     b72:	00 00       	nop
     b74:	24 96       	adiw	r28, 0x04	; 4
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b9c:	0f 90       	pop	r0
     b9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ba2:	0f 90       	pop	r0
     ba4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ba8:	0f 90       	pop	r0
     baa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bae:	0f 90       	pop	r0
     bb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bca:	0f 92       	push	r0
     bcc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bd0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bd4:	0f 92       	push	r0
     bd6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bde:	0f 92       	push	r0
     be0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     be4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     be8:	0f 92       	push	r0
     bea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bee:	2f 93       	push	r18
     bf0:	3f 93       	push	r19
     bf2:	4f 93       	push	r20
     bf4:	5f 93       	push	r21
     bf6:	6f 93       	push	r22
     bf8:	7f 93       	push	r23
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
     c02:	ef 93       	push	r30
     c04:	ff 93       	push	r31
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <__vector_74+0x52>
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     c12:	20 91 e1 20 	lds	r18, 0x20E1	; 0x8020e1 <adca_callback>
     c16:	30 91 e2 20 	lds	r19, 0x20E2	; 0x8020e2 <adca_callback+0x1>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c26:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	83 70       	andi	r24, 0x03	; 3
     c30:	99 27       	eor	r25, r25
     c32:	89 2b       	or	r24, r25
     c34:	39 f4       	brne	.+14     	; 0xc44 <__vector_74+0x8a>
		index += 2;
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	8e 5f       	subi	r24, 0xFE	; 254
     c3a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	81 70       	andi	r24, 0x01	; 1
     c4c:	99 27       	eor	r25, r25
     c4e:	89 2b       	or	r24, r25
     c50:	19 f4       	brne	.+6      	; 0xc58 <__vector_74+0x9e>
		index++;
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	ac 01       	movw	r20, r24
     c5e:	40 5e       	subi	r20, 0xE0	; 224
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	84 0f       	add	r24, r20
     c76:	95 1f       	adc	r25, r21
     c78:	fc 01       	movw	r30, r24
     c7a:	84 81       	ldd	r24, Z+4	; 0x04
     c7c:	95 81       	ldd	r25, Z+5	; 0x05
     c7e:	ac 01       	movw	r20, r24
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	f9 01       	movw	r30, r18
     c88:	19 95       	eicall
}
     c8a:	00 00       	nop
     c8c:	24 96       	adiw	r28, 0x04	; 4
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cb4:	0f 90       	pop	r0
     cb6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cba:	0f 90       	pop	r0
     cbc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cc0:	0f 90       	pop	r0
     cc2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     cc6:	0f 90       	pop	r0
     cc8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ce2:	0f 92       	push	r0
     ce4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ce8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cec:	0f 92       	push	r0
     cee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cf2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cf6:	0f 92       	push	r0
     cf8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cfc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d00:	0f 92       	push	r0
     d02:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	00 d0       	rcall	.+0      	; 0xd24 <__vector_39+0x52>
     d24:	1f 92       	push	r1
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     d2a:	20 91 df 20 	lds	r18, 0x20DF	; 0x8020df <adcb_callback>
     d2e:	30 91 e0 20 	lds	r19, 0x20E0	; 0x8020e0 <adcb_callback+0x1>
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d3e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	83 70       	andi	r24, 0x03	; 3
     d48:	99 27       	eor	r25, r25
     d4a:	89 2b       	or	r24, r25
     d4c:	39 f4       	brne	.+14     	; 0xd5c <__vector_39+0x8a>
		index += 2;
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	8e 5f       	subi	r24, 0xFE	; 254
     d52:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	81 70       	andi	r24, 0x01	; 1
     d64:	99 27       	eor	r25, r25
     d66:	89 2b       	or	r24, r25
     d68:	19 f4       	brne	.+6      	; 0xd70 <__vector_39+0x9e>
		index++;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	ac 01       	movw	r20, r24
     d76:	40 5e       	subi	r20, 0xE0	; 224
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	84 0f       	add	r24, r20
     d8e:	95 1f       	adc	r25, r21
     d90:	fc 01       	movw	r30, r24
     d92:	84 81       	ldd	r24, Z+4	; 0x04
     d94:	95 81       	ldd	r25, Z+5	; 0x05
     d96:	ac 01       	movw	r20, r24
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	80 e4       	ldi	r24, 0x40	; 64
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	f9 01       	movw	r30, r18
     da0:	19 95       	eicall
}
     da2:	00 00       	nop
     da4:	24 96       	adiw	r28, 0x04	; 4
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dcc:	0f 90       	pop	r0
     dce:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dd2:	0f 90       	pop	r0
     dd4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dd8:	0f 90       	pop	r0
     dda:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dde:	0f 90       	pop	r0
     de0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dfa:	0f 92       	push	r0
     dfc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e00:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e04:	0f 92       	push	r0
     e06:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e0a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e0e:	0f 92       	push	r0
     e10:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e14:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e18:	0f 92       	push	r0
     e1a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <__vector_40+0x52>
     e3c:	1f 92       	push	r1
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     e42:	20 91 df 20 	lds	r18, 0x20DF	; 0x8020df <adcb_callback>
     e46:	30 91 e0 20 	lds	r19, 0x20E0	; 0x8020e0 <adcb_callback+0x1>
     e4a:	80 e4       	ldi	r24, 0x40	; 64
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     e56:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	83 70       	andi	r24, 0x03	; 3
     e60:	99 27       	eor	r25, r25
     e62:	89 2b       	or	r24, r25
     e64:	39 f4       	brne	.+14     	; 0xe74 <__vector_40+0x8a>
		index += 2;
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	8e 5f       	subi	r24, 0xFE	; 254
     e6a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	86 95       	lsr	r24
     e70:	86 95       	lsr	r24
     e72:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	81 70       	andi	r24, 0x01	; 1
     e7c:	99 27       	eor	r25, r25
     e7e:	89 2b       	or	r24, r25
     e80:	19 f4       	brne	.+6      	; 0xe88 <__vector_40+0x9e>
		index++;
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	ac 01       	movw	r20, r24
     e8e:	40 5e       	subi	r20, 0xE0	; 224
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	84 0f       	add	r24, r20
     ea6:	95 1f       	adc	r25, r21
     ea8:	fc 01       	movw	r30, r24
     eaa:	84 81       	ldd	r24, Z+4	; 0x04
     eac:	95 81       	ldd	r25, Z+5	; 0x05
     eae:	ac 01       	movw	r20, r24
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	80 e4       	ldi	r24, 0x40	; 64
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	f9 01       	movw	r30, r18
     eb8:	19 95       	eicall
}
     eba:	00 00       	nop
     ebc:	24 96       	adiw	r28, 0x04	; 4
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	0f 90       	pop	r0
     ee0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ee4:	0f 90       	pop	r0
     ee6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     eea:	0f 90       	pop	r0
     eec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ef0:	0f 90       	pop	r0
     ef2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ef6:	0f 90       	pop	r0
     ef8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f12:	0f 92       	push	r0
     f14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f1c:	0f 92       	push	r0
     f1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f26:	0f 92       	push	r0
     f28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f30:	0f 92       	push	r0
     f32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <__vector_41+0x52>
     f54:	1f 92       	push	r1
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     f5a:	20 91 df 20 	lds	r18, 0x20DF	; 0x8020df <adcb_callback>
     f5e:	30 91 e0 20 	lds	r19, 0x20E0	; 0x8020e0 <adcb_callback+0x1>
     f62:	80 e4       	ldi	r24, 0x40	; 64
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f6e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	83 70       	andi	r24, 0x03	; 3
     f78:	99 27       	eor	r25, r25
     f7a:	89 2b       	or	r24, r25
     f7c:	39 f4       	brne	.+14     	; 0xf8c <__vector_41+0x8a>
		index += 2;
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	8e 5f       	subi	r24, 0xFE	; 254
     f82:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	86 95       	lsr	r24
     f88:	86 95       	lsr	r24
     f8a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	99 27       	eor	r25, r25
     f96:	89 2b       	or	r24, r25
     f98:	19 f4       	brne	.+6      	; 0xfa0 <__vector_41+0x9e>
		index++;
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	ac 01       	movw	r20, r24
     fa6:	40 5e       	subi	r20, 0xE0	; 224
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	84 0f       	add	r24, r20
     fbe:	95 1f       	adc	r25, r21
     fc0:	fc 01       	movw	r30, r24
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	95 81       	ldd	r25, Z+5	; 0x05
     fc6:	ac 01       	movw	r20, r24
     fc8:	64 e0       	ldi	r22, 0x04	; 4
     fca:	80 e4       	ldi	r24, 0x40	; 64
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	f9 01       	movw	r30, r18
     fd0:	19 95       	eicall
}
     fd2:	00 00       	nop
     fd4:	24 96       	adiw	r28, 0x04	; 4
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ffc:	0f 90       	pop	r0
     ffe:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1002:	0f 90       	pop	r0
    1004:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1008:	0f 90       	pop	r0
    100a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    100e:	0f 90       	pop	r0
    1010:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    102a:	0f 92       	push	r0
    102c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1030:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1034:	0f 92       	push	r0
    1036:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    103a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    103e:	0f 92       	push	r0
    1040:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1044:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1048:	0f 92       	push	r0
    104a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	00 d0       	rcall	.+0      	; 0x106c <__vector_42+0x52>
    106c:	1f 92       	push	r1
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1072:	20 91 df 20 	lds	r18, 0x20DF	; 0x8020df <adcb_callback>
    1076:	30 91 e0 20 	lds	r19, 0x20E0	; 0x8020e0 <adcb_callback+0x1>
    107a:	80 e4       	ldi	r24, 0x40	; 64
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	88 e0       	ldi	r24, 0x08	; 8
    1084:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1086:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	83 70       	andi	r24, 0x03	; 3
    1090:	99 27       	eor	r25, r25
    1092:	89 2b       	or	r24, r25
    1094:	39 f4       	brne	.+14     	; 0x10a4 <__vector_42+0x8a>
		index += 2;
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	8e 5f       	subi	r24, 0xFE	; 254
    109a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	86 95       	lsr	r24
    10a0:	86 95       	lsr	r24
    10a2:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	99 27       	eor	r25, r25
    10ae:	89 2b       	or	r24, r25
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <__vector_42+0x9e>
		index++;
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	ac 01       	movw	r20, r24
    10be:	40 5e       	subi	r20, 0xE0	; 224
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	84 0f       	add	r24, r20
    10d6:	95 1f       	adc	r25, r21
    10d8:	fc 01       	movw	r30, r24
    10da:	84 81       	ldd	r24, Z+4	; 0x04
    10dc:	95 81       	ldd	r25, Z+5	; 0x05
    10de:	ac 01       	movw	r20, r24
    10e0:	68 e0       	ldi	r22, 0x08	; 8
    10e2:	80 e4       	ldi	r24, 0x40	; 64
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	f9 01       	movw	r30, r18
    10e8:	19 95       	eicall
}
    10ea:	00 00       	nop
    10ec:	24 96       	adiw	r28, 0x04	; 4
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	ff 91       	pop	r31
    10f8:	ef 91       	pop	r30
    10fa:	bf 91       	pop	r27
    10fc:	af 91       	pop	r26
    10fe:	9f 91       	pop	r25
    1100:	8f 91       	pop	r24
    1102:	7f 91       	pop	r23
    1104:	6f 91       	pop	r22
    1106:	5f 91       	pop	r21
    1108:	4f 91       	pop	r20
    110a:	3f 91       	pop	r19
    110c:	2f 91       	pop	r18
    110e:	0f 90       	pop	r0
    1110:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1114:	0f 90       	pop	r0
    1116:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    111a:	0f 90       	pop	r0
    111c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1120:	0f 90       	pop	r0
    1122:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1126:	0f 90       	pop	r0
    1128:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <init_gps_interrupts>:
#include <string.h>
#include "gps.h"
#include "gps_interrupts.h"

void init_gps_interrupts(void)
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	1f 92       	push	r1
    1138:	1f 92       	push	r1
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
    113e:	80 eb       	ldi	r24, 0xB0	; 176
    1140:	9b e0       	ldi	r25, 0x0B	; 11
    1142:	24 e1       	ldi	r18, 0x14	; 20
    1144:	fc 01       	movw	r30, r24
    1146:	23 83       	std	Z+3, r18	; 0x03
	gpgga_index = 0;
    1148:	10 92 4a 26 	sts	0x264A, r1	; 0x80264a <gpgga_index>
	uint8_t dollar_counter = 0;
    114c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t current_sentence = SENTENCE_NONE;
    114e:	1a 82       	std	Y+2, r1	; 0x02
	last_finished = SENTENCE_NONE;
    1150:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <last_finished>
	
}
    1154:	00 00       	nop
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <init_gps_buffers>:

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	51 e0       	ldi	r21, 0x01	; 1
    116c:	6d ea       	ldi	r22, 0xAD	; 173
    116e:	74 e2       	ldi	r23, 0x24	; 36
    1170:	8d e4       	ldi	r24, 0x4D	; 77
    1172:	94 e2       	ldi	r25, 0x24	; 36
    1174:	9a d4       	rcall	.+2356   	; 0x1aaa <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
    1176:	40 e4       	ldi	r20, 0x40	; 64
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	6d ea       	ldi	r22, 0xAD	; 173
    117c:	75 e2       	ldi	r23, 0x25	; 37
    117e:	8d ee       	ldi	r24, 0xED	; 237
    1180:	95 e2       	ldi	r25, 0x25	; 37
    1182:	93 d4       	rcall	.+2342   	; 0x1aaa <rbu8_init>
}
    1184:	00 00       	nop
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <__vector_122>:

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
    118c:	1f 92       	push	r1
    118e:	0f 92       	push	r0
    1190:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    119c:	0f 92       	push	r0
    119e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11a2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11a6:	0f 92       	push	r0
    11a8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11ac:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11b0:	0f 92       	push	r0
    11b2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11b6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11ba:	0f 92       	push	r0
    11bc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	1f 92       	push	r1
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t ch = GPS_USART.DATA;
    11e2:	80 eb       	ldi	r24, 0xB0	; 176
    11e4:	9b e0       	ldi	r25, 0x0B	; 11
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	89 83       	std	Y+1, r24	; 0x01
	
	//printf("%c\n",ch);
	printf("%c""\0", (char)ch);
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	08 2e       	mov	r0, r24
    11f0:	00 0c       	add	r0, r0
    11f2:	99 0b       	sbc	r25, r25
    11f4:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <putchar>
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
    11f8:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <current_sentence>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	71 f4       	brne	.+28     	; 0x121c <__vector_122+0x90>
	{
		gpgga_buff[gpgga_index] = ch;
    1200:	80 91 4a 26 	lds	r24, 0x264A	; 0x80264a <gpgga_index>
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	8b 50       	subi	r24, 0x0B	; 11
    120a:	9a 4d       	sbci	r25, 0xDA	; 218
    120c:	29 81       	ldd	r18, Y+1	; 0x01
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
		gpgga_index++;
    1212:	80 91 4a 26 	lds	r24, 0x264A	; 0x80264a <gpgga_index>
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	80 93 4a 26 	sts	0x264A, r24	; 0x80264a <gpgga_index>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
	}	
	
	if (ch == '\n')
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	8a 30       	cpi	r24, 0x0A	; 10
    1220:	49 f4       	brne	.+18     	; 0x1234 <__vector_122+0xa8>
	{
		last_finished = current_sentence;
    1222:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <current_sentence>
    1226:	80 93 55 24 	sts	0x2455, r24	; 0x802455 <last_finished>
		current_sentence = SENTENCE_NONE;
    122a:	10 92 ac 24 	sts	0x24AC, r1	; 0x8024ac <current_sentence>
		dollar_counter = 0;
    122e:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <dollar_counter>
    1232:	0a c0       	rjmp	.+20     	; 0x1248 <__vector_122+0xbc>
	}
	else if (ch == '$' && current_sentence == SENTENCE_NONE)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	84 32       	cpi	r24, 0x24	; 36
    1238:	39 f4       	brne	.+14     	; 0x1248 <__vector_122+0xbc>
    123a:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <current_sentence>
    123e:	88 23       	and	r24, r24
    1240:	19 f4       	brne	.+6      	; 0x1248 <__vector_122+0xbc>
	{
		dollar_counter = 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <dollar_counter>
	}
	
	if (dollar_counter > 0)
    1248:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <dollar_counter>
    124c:	88 23       	and	r24, r24
    124e:	01 f1       	breq	.+64     	; 0x1290 <__vector_122+0x104>
	{
		if (dollar_counter == 5 && ch == 'G' )
    1250:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <dollar_counter>
    1254:	85 30       	cpi	r24, 0x05	; 5
    1256:	b9 f4       	brne	.+46     	; 0x1286 <__vector_122+0xfa>
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	87 34       	cpi	r24, 0x47	; 71
    125c:	a1 f4       	brne	.+40     	; 0x1286 <__vector_122+0xfa>
		{
			current_sentence= SENTENCE_GPGGA;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 ac 24 	sts	0x24AC, r24	; 0x8024ac <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
    1264:	45 e0       	ldi	r20, 0x05	; 5
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	6a e1       	ldi	r22, 0x1A	; 26
    126a:	70 e2       	ldi	r23, 0x20	; 32
    126c:	85 ef       	ldi	r24, 0xF5	; 245
    126e:	95 e2       	ldi	r25, 0x25	; 37
    1270:	0e 94 92 3c 	call	0x7924	; 0x7924 <memcpy>
			gpgga_index = 5;
    1274:	85 e0       	ldi	r24, 0x05	; 5
    1276:	80 93 4a 26 	sts	0x264A, r24	; 0x80264a <gpgga_index>
			dollar_counter++;
    127a:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <dollar_counter>
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <dollar_counter>
			dollar_counter++;
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <__vector_122+0x104>
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
    1286:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <dollar_counter>
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    1290:	00 00       	nop
    1292:	0f 90       	pop	r0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12b6:	0f 90       	pop	r0
    12b8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12bc:	0f 90       	pop	r0
    12be:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12c2:	0f 90       	pop	r0
    12c4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12c8:	0f 90       	pop	r0
    12ca:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <__vector_124>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12e4:	0f 92       	push	r0
    12e6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12ea:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12ee:	0f 92       	push	r0
    12f0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12f4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12f8:	0f 92       	push	r0
    12fa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12fe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1302:	0f 92       	push	r0
    1304:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	60 eb       	ldi	r22, 0xB0	; 176
    132e:	7b e0       	ldi	r23, 0x0B	; 11
    1330:	8d ee       	ldi	r24, 0xED	; 237
    1332:	95 e2       	ldi	r25, 0x25	; 37
    1334:	e5 d3       	rcall	.+1994   	; 0x1b00 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	8d ee       	ldi	r24, 0xED	; 237
    133c:	95 e2       	ldi	r25, 0x25	; 37
    133e:	4d d4       	rcall	.+2202   	; 0x1bda <rbu8_delete_oldest>
    1340:	00 00       	nop
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1364:	0f 90       	pop	r0
    1366:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    136a:	0f 90       	pop	r0
    136c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1370:	0f 90       	pop	r0
    1372:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1376:	0f 90       	pop	r0
    1378:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	98 e4       	ldi	r25, 0x48	; 72
    138e:	a8 ee       	ldi	r26, 0xE8	; 232
    1390:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	1f 92       	push	r1
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    13a6:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    13a8:	ec df       	rcall	.-40     	; 0x1382 <sysclk_get_main_hz>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	29 81       	ldd	r18, Y+1	; 0x01
    13b0:	22 2f       	mov	r18, r18
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <sysclk_get_per4_hz+0x22>
    13b6:	b6 95       	lsr	r27
    13b8:	a7 95       	ror	r26
    13ba:	97 95       	ror	r25
    13bc:	87 95       	ror	r24
    13be:	2a 95       	dec	r18
    13c0:	d2 f7       	brpl	.-12     	; 0x13b6 <sysclk_get_per4_hz+0x1a>
}
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    13d6:	e2 df       	rcall	.-60     	; 0x139c <sysclk_get_per4_hz>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    13ee:	ef df       	rcall	.-34     	; 0x13ce <sysclk_get_per2_hz>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
}
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    1406:	ef df       	rcall	.-34     	; 0x13e6 <sysclk_get_per_hz>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
}
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1418:	61 50       	subi	r22, 0x01	; 1
    141a:	71 09       	sbc	r23, r1
    141c:	81 09       	sbc	r24, r1
    141e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1420:	61 15       	cp	r22, r1
    1422:	71 05       	cpc	r23, r1
    1424:	81 05       	cpc	r24, r1
    1426:	91 05       	cpc	r25, r1
    1428:	b9 f7       	brne	.-18     	; 0x1418 <__portable_avr_delay_cycles+0x2>
    142a:	08 95       	ret

0000142c <spi_enable>:
/*! \brief Enables the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	1f 92       	push	r1
    1432:	1f 92       	push	r1
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_ENABLE_bm;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	fc 01       	movw	r30, r24
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	20 64       	ori	r18, 0x40	; 64
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
}
    1450:	00 00       	nop
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <spi_init_pins>:

uint8_t commands [2] = {0x48, 0x58};
uint8_t read_buffer [2*3];
	
void spi_init_pins(void)
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	ioport_configure_port_pin(&PORTC, PIN1_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    1464:	43 e0       	ldi	r20, 0x03	; 3
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	80 e4       	ldi	r24, 0x40	; 64
    146c:	96 e0       	ldi	r25, 0x06	; 6
    146e:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <ioport_configure_port_pin>
	
	ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_PULL_UP|IOPORT_DIR_INPUT);
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	58 e1       	ldi	r21, 0x18	; 24
    1476:	60 e1       	ldi	r22, 0x10	; 16
    1478:	80 e4       	ldi	r24, 0x40	; 64
    147a:	96 e0       	ldi	r25, 0x06	; 6
    147c:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    1480:	43 e0       	ldi	r20, 0x03	; 3
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	60 e2       	ldi	r22, 0x20	; 32
    1486:	80 e4       	ldi	r24, 0x40	; 64
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	60 e4       	ldi	r22, 0x40	; 64
    1494:	80 e4       	ldi	r24, 0x40	; 64
    1496:	96 e0       	ldi	r25, 0x06	; 6
    1498:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    149c:	43 e0       	ldi	r20, 0x03	; 3
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	60 e8       	ldi	r22, 0x80	; 128
    14a2:	80 e4       	ldi	r24, 0x40	; 64
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <ioport_configure_port_pin>
	
}
    14aa:	00 00       	nop
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <spi_init_module>:

void spi_init_module(void)
{
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	1f 92       	push	r1
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	spi_init_pins();
    14c8:	c9 df       	rcall	.-110    	; 0x145c <spi_init_pins>
	struct spi_device  spi_device_cong = {
    14ca:	81 e1       	ldi	r24, 0x11	; 17
    14cc:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
		
	spi_master_init(&MS5607_SPI_PORT);
    14ce:	80 ec       	ldi	r24, 0xC0	; 192
    14d0:	98 e0       	ldi	r25, 0x08	; 8
    14d2:	ab d8       	rcall	.-3754   	; 0x62a <spi_master_init>
	spi_master_setup_device(&MS5607_SPI_PORT, &spi_device_cong, SPI_MODE_0, 1000000,0);
    14d4:	c1 2c       	mov	r12, r1
    14d6:	d1 2c       	mov	r13, r1
    14d8:	76 01       	movw	r14, r12
    14da:	00 e4       	ldi	r16, 0x40	; 64
    14dc:	12 e4       	ldi	r17, 0x42	; 66
    14de:	2f e0       	ldi	r18, 0x0F	; 15
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	bc 01       	movw	r22, r24
    14ea:	80 ec       	ldi	r24, 0xC0	; 192
    14ec:	98 e0       	ldi	r25, 0x08	; 8
    14ee:	d2 d8       	rcall	.-3676   	; 0x694 <spi_master_setup_device>
	spi_enable(&MS5607_SPI_PORT);
    14f0:	80 ec       	ldi	r24, 0xC0	; 192
    14f2:	98 e0       	ldi	r25, 0x08	; 8
    14f4:	9b df       	rcall	.-202    	; 0x142c <spi_enable>
    14f6:	41 e0       	ldi	r20, 0x01	; 1
	spi_write_packet(&MS5607_SPI_PORT, "0x1e", 1); //reset
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	60 e2       	ldi	r22, 0x20	; 32
    14fc:	70 e2       	ldi	r23, 0x20	; 32
    14fe:	80 ec       	ldi	r24, 0xC0	; 192
    1500:	98 e0       	ldi	r25, 0x08	; 8
    1502:	16 d9       	rcall	.-3540   	; 0x730 <spi_write_packet>
	prom_read();
    1504:	16 d0       	rcall	.+44     	; 0x1532 <prom_read>
    1506:	85 e2       	ldi	r24, 0x25	; 37
	
	printf("spi init");
    1508:	90 e2       	ldi	r25, 0x20	; 32
    150a:	89 2f       	mov	r24, r25
    150c:	8f 93       	push	r24
    150e:	85 e2       	ldi	r24, 0x25	; 37
    1510:	90 e2       	ldi	r25, 0x20	; 32
    1512:	8f 93       	push	r24
    1514:	0e 94 35 3d 	call	0x7a6a	; 0x7a6a <printf>
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	00 00       	nop
}
    151e:	0f 90       	pop	r0
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	08 95       	ret

00001532 <prom_read>:
    1532:	2f 92       	push	r2

void prom_read(void)
{
    1534:	3f 92       	push	r3
    1536:	4f 92       	push	r4
    1538:	5f 92       	push	r5
    153a:	6f 92       	push	r6
    153c:	7f 92       	push	r7
    153e:	8f 92       	push	r8
    1540:	9f 92       	push	r9
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	a4 97       	sbiw	r28, 0x24	; 36
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	de bf       	out	0x3e, r29	; 62
	struct spi_device  spi_device_cong = {
    1560:	81 e1       	ldi	r24, 0x11	; 17
    1562:	8a 83       	std	Y+2, r24	; 0x02
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    1564:	ce 01       	movw	r24, r28
    1566:	02 96       	adiw	r24, 0x02	; 2
    1568:	bc 01       	movw	r22, r24
    156a:	80 ec       	ldi	r24, 0xC0	; 192
    156c:	98 e0       	ldi	r25, 0x08	; 8
    156e:	55 d9       	rcall	.-3414   	; 0x81a <spi_select_device>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
    1570:	86 e0       	ldi	r24, 0x06	; 6
    1572:	e4 e1       	ldi	r30, 0x14	; 20
    1574:	f0 e2       	ldi	r31, 0x20	; 32
    1576:	de 01       	movw	r26, r28
    1578:	13 96       	adiw	r26, 0x03	; 3
    157a:	01 90       	ld	r0, Z+
    157c:	0d 92       	st	X+, r0
    157e:	8a 95       	dec	r24
    1580:	e1 f7       	brne	.-8      	; 0x157a <prom_read+0x48>
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    1582:	19 82       	std	Y+1, r1	; 0x01
    1584:	e3 c1       	rjmp	.+966    	; 0x194c <prom_read+0x41a>
	{
		
		spi_write_packet(&MS5607_SPI_PORT, prom_commands_c[i], 1);
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9e 01       	movw	r18, r28
    158e:	2d 5f       	subi	r18, 0xFD	; 253
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	fc 01       	movw	r30, r24
    1598:	80 81       	ld	r24, Z
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	bc 01       	movw	r22, r24
    15a4:	80 ec       	ldi	r24, 0xC0	; 192
    15a6:	98 e0       	ldi	r25, 0x08	; 8
		delay_ms(25);
    15a8:	c3 d8       	rcall	.-3706   	; 0x730 <spi_write_packet>
    15aa:	29 df       	rcall	.-430    	; 0x13fe <sysclk_get_cpu_hz>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8c 01       	movw	r16, r24
    15b2:	9d 01       	movw	r18, r26
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	ba 01       	movw	r22, r20
    15ba:	0d 8b       	std	Y+21, r16	; 0x15
    15bc:	1e 8b       	std	Y+22, r17	; 0x16
    15be:	2f 8b       	std	Y+23, r18	; 0x17
    15c0:	38 8f       	std	Y+24, r19	; 0x18
    15c2:	49 8f       	std	Y+25, r20	; 0x19
    15c4:	5a 8f       	std	Y+26, r21	; 0x1a
    15c6:	6b 8f       	std	Y+27, r22	; 0x1b
    15c8:	7c 8f       	std	Y+28, r23	; 0x1c
    15ca:	2d 88       	ldd	r2, Y+21	; 0x15
    15cc:	3e 88       	ldd	r3, Y+22	; 0x16
    15ce:	4f 88       	ldd	r4, Y+23	; 0x17
    15d0:	58 8c       	ldd	r5, Y+24	; 0x18
    15d2:	69 8c       	ldd	r6, Y+25	; 0x19
    15d4:	7a 8c       	ldd	r7, Y+26	; 0x1a
    15d6:	8b 8c       	ldd	r8, Y+27	; 0x1b
    15d8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    15da:	22 2d       	mov	r18, r2
    15dc:	33 2d       	mov	r19, r3
    15de:	44 2d       	mov	r20, r4
    15e0:	55 2d       	mov	r21, r5
    15e2:	66 2d       	mov	r22, r6
    15e4:	77 2d       	mov	r23, r7
    15e6:	88 2d       	mov	r24, r8
    15e8:	99 2d       	mov	r25, r9
    15ea:	03 e0       	ldi	r16, 0x03	; 3
    15ec:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <__ashldi3>
    15f0:	a2 2e       	mov	r10, r18
    15f2:	b3 2e       	mov	r11, r19
    15f4:	c4 2e       	mov	r12, r20
    15f6:	d5 2e       	mov	r13, r21
    15f8:	e6 2e       	mov	r14, r22
    15fa:	f7 2e       	mov	r15, r23
    15fc:	08 2f       	mov	r16, r24
    15fe:	19 2f       	mov	r17, r25
    1600:	2a 2c       	mov	r2, r10
    1602:	3b 2c       	mov	r3, r11
    1604:	4c 2c       	mov	r4, r12
    1606:	5d 2c       	mov	r5, r13
    1608:	6e 2c       	mov	r6, r14
    160a:	7f 2c       	mov	r7, r15
    160c:	80 2e       	mov	r8, r16
    160e:	91 2e       	mov	r9, r17
    1610:	22 2d       	mov	r18, r2
    1612:	33 2d       	mov	r19, r3
    1614:	44 2d       	mov	r20, r4
    1616:	55 2d       	mov	r21, r5
    1618:	66 2d       	mov	r22, r6
    161a:	77 2d       	mov	r23, r7
    161c:	88 2d       	mov	r24, r8
    161e:	99 2d       	mov	r25, r9
    1620:	02 e0       	ldi	r16, 0x02	; 2
    1622:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <__ashldi3>
    1626:	a2 2e       	mov	r10, r18
    1628:	b3 2e       	mov	r11, r19
    162a:	c4 2e       	mov	r12, r20
    162c:	d5 2e       	mov	r13, r21
    162e:	e6 2e       	mov	r14, r22
    1630:	f7 2e       	mov	r15, r23
    1632:	08 2f       	mov	r16, r24
    1634:	19 2f       	mov	r17, r25
    1636:	2a 2d       	mov	r18, r10
    1638:	3b 2d       	mov	r19, r11
    163a:	4c 2d       	mov	r20, r12
    163c:	5d 2d       	mov	r21, r13
    163e:	6e 2d       	mov	r22, r14
    1640:	7f 2d       	mov	r23, r15
    1642:	80 2f       	mov	r24, r16
    1644:	91 2f       	mov	r25, r17
    1646:	a2 2c       	mov	r10, r2
    1648:	b3 2c       	mov	r11, r3
    164a:	c4 2c       	mov	r12, r4
    164c:	d5 2c       	mov	r13, r5
    164e:	e6 2c       	mov	r14, r6
    1650:	f7 2c       	mov	r15, r7
    1652:	08 2d       	mov	r16, r8
    1654:	19 2d       	mov	r17, r9
    1656:	0e 94 76 3a 	call	0x74ec	; 0x74ec <__subdi3>
    165a:	a2 2e       	mov	r10, r18
    165c:	b3 2e       	mov	r11, r19
    165e:	c4 2e       	mov	r12, r20
    1660:	d5 2e       	mov	r13, r21
    1662:	e6 2e       	mov	r14, r22
    1664:	f7 2e       	mov	r15, r23
    1666:	08 2f       	mov	r16, r24
    1668:	19 2f       	mov	r17, r25
    166a:	2a 2d       	mov	r18, r10
    166c:	3b 2d       	mov	r19, r11
    166e:	4c 2d       	mov	r20, r12
    1670:	5d 2d       	mov	r21, r13
    1672:	6e 2d       	mov	r22, r14
    1674:	7f 2d       	mov	r23, r15
    1676:	80 2f       	mov	r24, r16
    1678:	91 2f       	mov	r25, r17
    167a:	ad 88       	ldd	r10, Y+21	; 0x15
    167c:	be 88       	ldd	r11, Y+22	; 0x16
    167e:	cf 88       	ldd	r12, Y+23	; 0x17
    1680:	d8 8c       	ldd	r13, Y+24	; 0x18
    1682:	e9 8c       	ldd	r14, Y+25	; 0x19
    1684:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1686:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1688:	1c 8d       	ldd	r17, Y+28	; 0x1c
    168a:	0e 94 6d 3a 	call	0x74da	; 0x74da <__adddi3>
    168e:	22 2e       	mov	r2, r18
    1690:	33 2e       	mov	r3, r19
    1692:	44 2e       	mov	r4, r20
    1694:	55 2e       	mov	r5, r21
    1696:	66 2e       	mov	r6, r22
    1698:	77 2e       	mov	r7, r23
    169a:	88 2e       	mov	r8, r24
    169c:	99 2e       	mov	r9, r25
    169e:	0f 2e       	mov	r0, r31
    16a0:	f6 e0       	ldi	r31, 0x06	; 6
    16a2:	af 2e       	mov	r10, r31
    16a4:	f0 2d       	mov	r31, r0
    16a6:	b1 2c       	mov	r11, r1
    16a8:	c1 2c       	mov	r12, r1
    16aa:	d1 2c       	mov	r13, r1
    16ac:	e1 2c       	mov	r14, r1
    16ae:	f1 2c       	mov	r15, r1
    16b0:	00 e0       	ldi	r16, 0x00	; 0
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	22 2d       	mov	r18, r2
    16b6:	33 2d       	mov	r19, r3
    16b8:	44 2d       	mov	r20, r4
    16ba:	55 2d       	mov	r21, r5
    16bc:	66 2d       	mov	r22, r6
    16be:	77 2d       	mov	r23, r7
    16c0:	88 2d       	mov	r24, r8
    16c2:	99 2d       	mov	r25, r9
    16c4:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <__udivdi3>
    16c8:	22 2e       	mov	r2, r18
    16ca:	33 2e       	mov	r3, r19
    16cc:	44 2e       	mov	r4, r20
    16ce:	55 2e       	mov	r5, r21
    16d0:	66 2e       	mov	r6, r22
    16d2:	77 2e       	mov	r7, r23
    16d4:	88 2e       	mov	r8, r24
    16d6:	99 2e       	mov	r9, r25
    16d8:	a2 2c       	mov	r10, r2
    16da:	b3 2c       	mov	r11, r3
    16dc:	c4 2c       	mov	r12, r4
    16de:	d5 2c       	mov	r13, r5
    16e0:	e6 2c       	mov	r14, r6
    16e2:	f7 2c       	mov	r15, r7
    16e4:	08 2d       	mov	r16, r8
    16e6:	19 2d       	mov	r17, r9
    16e8:	2a 2d       	mov	r18, r10
    16ea:	3b 2d       	mov	r19, r11
    16ec:	4c 2d       	mov	r20, r12
    16ee:	5d 2d       	mov	r21, r13
    16f0:	6e 2d       	mov	r22, r14
    16f2:	7f 2d       	mov	r23, r15
    16f4:	80 2f       	mov	r24, r16
    16f6:	91 2f       	mov	r25, r17
    16f8:	29 51       	subi	r18, 0x19	; 25
    16fa:	3c 4f       	sbci	r19, 0xFC	; 252
    16fc:	4f 4f       	sbci	r20, 0xFF	; 255
    16fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1700:	6f 4f       	sbci	r22, 0xFF	; 255
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	a2 2e       	mov	r10, r18
    170a:	b3 2e       	mov	r11, r19
    170c:	c4 2e       	mov	r12, r20
    170e:	d5 2e       	mov	r13, r21
    1710:	e6 2e       	mov	r14, r22
    1712:	f7 2e       	mov	r15, r23
    1714:	08 2f       	mov	r16, r24
    1716:	19 2f       	mov	r17, r25
    1718:	2a 2d       	mov	r18, r10
    171a:	3b 2d       	mov	r19, r11
    171c:	4c 2d       	mov	r20, r12
    171e:	5d 2d       	mov	r21, r13
    1720:	6e 2d       	mov	r22, r14
    1722:	7f 2d       	mov	r23, r15
    1724:	80 2f       	mov	r24, r16
    1726:	91 2f       	mov	r25, r17
    1728:	0e 94 22 35 	call	0x6a44	; 0x6a44 <__floatundisf>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a e7       	ldi	r20, 0x7A	; 122
    1736:	54 e4       	ldi	r21, 0x44	; 68
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 17 34 	call	0x682e	; 0x682e <__divsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	0e 94 84 34 	call	0x6908	; 0x6908 <__fixunssfdi>
    174c:	a2 2e       	mov	r10, r18
    174e:	b3 2e       	mov	r11, r19
    1750:	c4 2e       	mov	r12, r20
    1752:	d5 2e       	mov	r13, r21
    1754:	e6 2e       	mov	r14, r22
    1756:	f7 2e       	mov	r15, r23
    1758:	08 2f       	mov	r16, r24
    175a:	19 2f       	mov	r17, r25
    175c:	d6 01       	movw	r26, r12
    175e:	c5 01       	movw	r24, r10
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	58 de       	rcall	.-848    	; 0x1416 <__portable_avr_delay_cycles>
		spi_read_packet(&MS5607_SPI_PORT, prom_c_read_buffer[i], 2);
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9e 01       	movw	r18, r28
    176e:	27 5f       	subi	r18, 0xF7	; 247
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	fc 01       	movw	r30, r24
    1778:	80 81       	ld	r24, Z
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	42 e0       	ldi	r20, 0x02	; 2
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	bc 01       	movw	r22, r24
    1784:	80 ec       	ldi	r24, 0xC0	; 192
    1786:	98 e0       	ldi	r25, 0x08	; 8
		delay_ms(25);
    1788:	0c d8       	rcall	.-4072   	; 0x7a2 <spi_read_packet>
    178a:	39 de       	rcall	.-910    	; 0x13fe <sysclk_get_cpu_hz>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8c 01       	movw	r16, r24
    1792:	9d 01       	movw	r18, r26
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	ba 01       	movw	r22, r20
    179a:	0d 8f       	std	Y+29, r16	; 0x1d
    179c:	1e 8f       	std	Y+30, r17	; 0x1e
    179e:	2f 8f       	std	Y+31, r18	; 0x1f
    17a0:	38 a3       	std	Y+32, r19	; 0x20
    17a2:	49 a3       	std	Y+33, r20	; 0x21
    17a4:	5a a3       	std	Y+34, r21	; 0x22
    17a6:	6b a3       	std	Y+35, r22	; 0x23
    17a8:	7c a3       	std	Y+36, r23	; 0x24
    17aa:	2d 8c       	ldd	r2, Y+29	; 0x1d
    17ac:	3e 8c       	ldd	r3, Y+30	; 0x1e
    17ae:	4f 8c       	ldd	r4, Y+31	; 0x1f
    17b0:	58 a0       	ldd	r5, Y+32	; 0x20
    17b2:	69 a0       	ldd	r6, Y+33	; 0x21
    17b4:	7a a0       	ldd	r7, Y+34	; 0x22
    17b6:	8b a0       	ldd	r8, Y+35	; 0x23
    17b8:	9c a0       	ldd	r9, Y+36	; 0x24
    17ba:	22 2d       	mov	r18, r2
    17bc:	33 2d       	mov	r19, r3
    17be:	44 2d       	mov	r20, r4
    17c0:	55 2d       	mov	r21, r5
    17c2:	66 2d       	mov	r22, r6
    17c4:	77 2d       	mov	r23, r7
    17c6:	88 2d       	mov	r24, r8
    17c8:	99 2d       	mov	r25, r9
    17ca:	03 e0       	ldi	r16, 0x03	; 3
    17cc:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <__ashldi3>
    17d0:	a2 2e       	mov	r10, r18
    17d2:	b3 2e       	mov	r11, r19
    17d4:	c4 2e       	mov	r12, r20
    17d6:	d5 2e       	mov	r13, r21
    17d8:	e6 2e       	mov	r14, r22
    17da:	f7 2e       	mov	r15, r23
    17dc:	08 2f       	mov	r16, r24
    17de:	19 2f       	mov	r17, r25
    17e0:	2a 2c       	mov	r2, r10
    17e2:	3b 2c       	mov	r3, r11
    17e4:	4c 2c       	mov	r4, r12
    17e6:	5d 2c       	mov	r5, r13
    17e8:	6e 2c       	mov	r6, r14
    17ea:	7f 2c       	mov	r7, r15
    17ec:	80 2e       	mov	r8, r16
    17ee:	91 2e       	mov	r9, r17
    17f0:	22 2d       	mov	r18, r2
    17f2:	33 2d       	mov	r19, r3
    17f4:	44 2d       	mov	r20, r4
    17f6:	55 2d       	mov	r21, r5
    17f8:	66 2d       	mov	r22, r6
    17fa:	77 2d       	mov	r23, r7
    17fc:	88 2d       	mov	r24, r8
    17fe:	99 2d       	mov	r25, r9
    1800:	02 e0       	ldi	r16, 0x02	; 2
    1802:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <__ashldi3>
    1806:	a2 2e       	mov	r10, r18
    1808:	b3 2e       	mov	r11, r19
    180a:	c4 2e       	mov	r12, r20
    180c:	d5 2e       	mov	r13, r21
    180e:	e6 2e       	mov	r14, r22
    1810:	f7 2e       	mov	r15, r23
    1812:	08 2f       	mov	r16, r24
    1814:	19 2f       	mov	r17, r25
    1816:	2a 2d       	mov	r18, r10
    1818:	3b 2d       	mov	r19, r11
    181a:	4c 2d       	mov	r20, r12
    181c:	5d 2d       	mov	r21, r13
    181e:	6e 2d       	mov	r22, r14
    1820:	7f 2d       	mov	r23, r15
    1822:	80 2f       	mov	r24, r16
    1824:	91 2f       	mov	r25, r17
    1826:	a2 2c       	mov	r10, r2
    1828:	b3 2c       	mov	r11, r3
    182a:	c4 2c       	mov	r12, r4
    182c:	d5 2c       	mov	r13, r5
    182e:	e6 2c       	mov	r14, r6
    1830:	f7 2c       	mov	r15, r7
    1832:	08 2d       	mov	r16, r8
    1834:	19 2d       	mov	r17, r9
    1836:	0e 94 76 3a 	call	0x74ec	; 0x74ec <__subdi3>
    183a:	a2 2e       	mov	r10, r18
    183c:	b3 2e       	mov	r11, r19
    183e:	c4 2e       	mov	r12, r20
    1840:	d5 2e       	mov	r13, r21
    1842:	e6 2e       	mov	r14, r22
    1844:	f7 2e       	mov	r15, r23
    1846:	08 2f       	mov	r16, r24
    1848:	19 2f       	mov	r17, r25
    184a:	2a 2d       	mov	r18, r10
    184c:	3b 2d       	mov	r19, r11
    184e:	4c 2d       	mov	r20, r12
    1850:	5d 2d       	mov	r21, r13
    1852:	6e 2d       	mov	r22, r14
    1854:	7f 2d       	mov	r23, r15
    1856:	80 2f       	mov	r24, r16
    1858:	91 2f       	mov	r25, r17
    185a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    185c:	be 8c       	ldd	r11, Y+30	; 0x1e
    185e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    1860:	d8 a0       	ldd	r13, Y+32	; 0x20
    1862:	e9 a0       	ldd	r14, Y+33	; 0x21
    1864:	fa a0       	ldd	r15, Y+34	; 0x22
    1866:	0b a1       	ldd	r16, Y+35	; 0x23
    1868:	1c a1       	ldd	r17, Y+36	; 0x24
    186a:	0e 94 6d 3a 	call	0x74da	; 0x74da <__adddi3>
    186e:	22 2e       	mov	r2, r18
    1870:	33 2e       	mov	r3, r19
    1872:	44 2e       	mov	r4, r20
    1874:	55 2e       	mov	r5, r21
    1876:	66 2e       	mov	r6, r22
    1878:	77 2e       	mov	r7, r23
    187a:	88 2e       	mov	r8, r24
    187c:	99 2e       	mov	r9, r25
    187e:	0f 2e       	mov	r0, r31
    1880:	f6 e0       	ldi	r31, 0x06	; 6
    1882:	af 2e       	mov	r10, r31
    1884:	f0 2d       	mov	r31, r0
    1886:	b1 2c       	mov	r11, r1
    1888:	c1 2c       	mov	r12, r1
    188a:	d1 2c       	mov	r13, r1
    188c:	e1 2c       	mov	r14, r1
    188e:	f1 2c       	mov	r15, r1
    1890:	00 e0       	ldi	r16, 0x00	; 0
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	22 2d       	mov	r18, r2
    1896:	33 2d       	mov	r19, r3
    1898:	44 2d       	mov	r20, r4
    189a:	55 2d       	mov	r21, r5
    189c:	66 2d       	mov	r22, r6
    189e:	77 2d       	mov	r23, r7
    18a0:	88 2d       	mov	r24, r8
    18a2:	99 2d       	mov	r25, r9
    18a4:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <__udivdi3>
    18a8:	22 2e       	mov	r2, r18
    18aa:	33 2e       	mov	r3, r19
    18ac:	44 2e       	mov	r4, r20
    18ae:	55 2e       	mov	r5, r21
    18b0:	66 2e       	mov	r6, r22
    18b2:	77 2e       	mov	r7, r23
    18b4:	88 2e       	mov	r8, r24
    18b6:	99 2e       	mov	r9, r25
    18b8:	a2 2c       	mov	r10, r2
    18ba:	b3 2c       	mov	r11, r3
    18bc:	c4 2c       	mov	r12, r4
    18be:	d5 2c       	mov	r13, r5
    18c0:	e6 2c       	mov	r14, r6
    18c2:	f7 2c       	mov	r15, r7
    18c4:	08 2d       	mov	r16, r8
    18c6:	19 2d       	mov	r17, r9
    18c8:	2a 2d       	mov	r18, r10
    18ca:	3b 2d       	mov	r19, r11
    18cc:	4c 2d       	mov	r20, r12
    18ce:	5d 2d       	mov	r21, r13
    18d0:	6e 2d       	mov	r22, r14
    18d2:	7f 2d       	mov	r23, r15
    18d4:	80 2f       	mov	r24, r16
    18d6:	91 2f       	mov	r25, r17
    18d8:	29 51       	subi	r18, 0x19	; 25
    18da:	3c 4f       	sbci	r19, 0xFC	; 252
    18dc:	4f 4f       	sbci	r20, 0xFF	; 255
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    18e0:	6f 4f       	sbci	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	a2 2e       	mov	r10, r18
    18ea:	b3 2e       	mov	r11, r19
    18ec:	c4 2e       	mov	r12, r20
    18ee:	d5 2e       	mov	r13, r21
    18f0:	e6 2e       	mov	r14, r22
    18f2:	f7 2e       	mov	r15, r23
    18f4:	08 2f       	mov	r16, r24
    18f6:	19 2f       	mov	r17, r25
    18f8:	2a 2d       	mov	r18, r10
    18fa:	3b 2d       	mov	r19, r11
    18fc:	4c 2d       	mov	r20, r12
    18fe:	5d 2d       	mov	r21, r13
    1900:	6e 2d       	mov	r22, r14
    1902:	7f 2d       	mov	r23, r15
    1904:	80 2f       	mov	r24, r16
    1906:	91 2f       	mov	r25, r17
    1908:	0e 94 22 35 	call	0x6a44	; 0x6a44 <__floatundisf>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a e7       	ldi	r20, 0x7A	; 122
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 17 34 	call	0x682e	; 0x682e <__divsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 84 34 	call	0x6908	; 0x6908 <__fixunssfdi>
    192c:	a2 2e       	mov	r10, r18
    192e:	b3 2e       	mov	r11, r19
    1930:	c4 2e       	mov	r12, r20
    1932:	d5 2e       	mov	r13, r21
    1934:	e6 2e       	mov	r14, r22
    1936:	f7 2e       	mov	r15, r23
    1938:	08 2f       	mov	r16, r24
    193a:	19 2f       	mov	r17, r25
    193c:	d6 01       	movw	r26, r12
    193e:	c5 01       	movw	r24, r10
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	68 dd       	rcall	.-1328   	; 0x1416 <__portable_avr_delay_cycles>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	87 30       	cpi	r24, 0x07	; 7
    1950:	08 f4       	brcc	.+2      	; 0x1954 <prom_read+0x422>
    1952:	19 ce       	rjmp	.-974    	; 0x1586 <prom_read+0x54>
		
	}

	
	
	C1 = prom_c_read_buffer[0]<<8 |prom_c_read_buffer[1];
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	38 2f       	mov	r19, r24
    195c:	22 27       	eor	r18, r18
    195e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	82 2b       	or	r24, r18
    1966:	93 2b       	or	r25, r19
    1968:	80 93 4c 26 	sts	0x264C, r24	; 0x80264c <C1>
    196c:	90 93 4d 26 	sts	0x264D, r25	; 0x80264d <C1+0x1>
	C2 = prom_c_read_buffer[2]<<8 |prom_c_read_buffer[3];
    1970:	8b 85       	ldd	r24, Y+11	; 0x0b
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	38 2f       	mov	r19, r24
    1978:	22 27       	eor	r18, r18
    197a:	8c 85       	ldd	r24, Y+12	; 0x0c
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	82 2b       	or	r24, r18
    1982:	93 2b       	or	r25, r19
    1984:	80 93 50 26 	sts	0x2650, r24	; 0x802650 <C2>
    1988:	90 93 51 26 	sts	0x2651, r25	; 0x802651 <C2+0x1>
	C3 = prom_c_read_buffer[4]<<8 |prom_c_read_buffer[5];
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	38 2f       	mov	r19, r24
    1994:	22 27       	eor	r18, r18
    1996:	8e 85       	ldd	r24, Y+14	; 0x0e
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	82 2b       	or	r24, r18
    199e:	93 2b       	or	r25, r19
    19a0:	80 93 4e 26 	sts	0x264E, r24	; 0x80264e <C3>
    19a4:	90 93 4f 26 	sts	0x264F, r25	; 0x80264f <C3+0x1>
	C4 = prom_c_read_buffer[6]<<8 |prom_c_read_buffer[7];
    19a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	38 2f       	mov	r19, r24
    19b0:	22 27       	eor	r18, r18
    19b2:	88 89       	ldd	r24, Y+16	; 0x10
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	82 2b       	or	r24, r18
    19ba:	93 2b       	or	r25, r19
    19bc:	80 93 60 26 	sts	0x2660, r24	; 0x802660 <C4>
    19c0:	90 93 61 26 	sts	0x2661, r25	; 0x802661 <C4+0x1>
	C5 = prom_c_read_buffer[8]<<8 |prom_c_read_buffer[9];
    19c4:	89 89       	ldd	r24, Y+17	; 0x11
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	38 2f       	mov	r19, r24
    19cc:	22 27       	eor	r18, r18
    19ce:	8a 89       	ldd	r24, Y+18	; 0x12
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	82 2b       	or	r24, r18
    19d6:	93 2b       	or	r25, r19
    19d8:	80 93 5e 26 	sts	0x265E, r24	; 0x80265e <C5>
    19dc:	90 93 5f 26 	sts	0x265F, r25	; 0x80265f <C5+0x1>
	C6 = prom_c_read_buffer[10]<<8 |prom_c_read_buffer[11];
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	38 2f       	mov	r19, r24
    19e8:	22 27       	eor	r18, r18
    19ea:	8c 89       	ldd	r24, Y+20	; 0x14
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	82 2b       	or	r24, r18
    19f2:	93 2b       	or	r25, r19
    19f4:	80 93 52 26 	sts	0x2652, r24	; 0x802652 <C6>
    19f8:	90 93 53 26 	sts	0x2653, r25	; 0x802653 <C6+0x1>
	
	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    19fc:	ce 01       	movw	r24, r28
    19fe:	02 96       	adiw	r24, 0x02	; 2
    1a00:	bc 01       	movw	r22, r24
    1a02:	80 ec       	ldi	r24, 0xC0	; 192
    1a04:	98 e0       	ldi	r25, 0x08	; 8
    1a06:	0e 94 23 04 	call	0x846	; 0x846 <spi_deselect_device>
	

	
}
    1a0a:	00 00       	nop
    1a0c:	a4 96       	adiw	r28, 0x24	; 36
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	bf 90       	pop	r11
    1a24:	af 90       	pop	r10
    1a26:	9f 90       	pop	r9
    1a28:	8f 90       	pop	r8
    1a2a:	7f 90       	pop	r7
    1a2c:	6f 90       	pop	r6
    1a2e:	5f 90       	pop	r5
    1a30:	4f 90       	pop	r4
    1a32:	3f 90       	pop	r3
    1a34:	2f 90       	pop	r2
    1a36:	08 95       	ret

00001a38 <__vector_119>:
	xbeeWrite(telemetryString);
}


ISR(READ_INTURUPT)
{
    1a38:	1f 92       	push	r1
    1a3a:	0f 92       	push	r0
    1a3c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a40:	0f 92       	push	r0
    1a42:	11 24       	eor	r1, r1
    1a44:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a48:	0f 92       	push	r0
    1a4a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a4e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a52:	0f 92       	push	r0
    1a54:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a58:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a5c:	0f 92       	push	r0
    1a5e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    1a72:	80 ea       	ldi	r24, 0xA0	; 160
    1a74:	9b e0       	ldi	r25, 0x0B	; 11
    1a76:	fc 01       	movw	r30, r24
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 93 66 26 	sts	0x2666, r24	; 0x802666 <XbeeRx>
    1a7e:	00 00       	nop
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	ff 91       	pop	r31
    1a86:	ef 91       	pop	r30
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	0f 90       	pop	r0
    1a8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a92:	0f 90       	pop	r0
    1a94:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a98:	0f 90       	pop	r0
    1a9a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a9e:	0f 90       	pop	r0
    1aa0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <rbu8_init+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <rbu8_init+0x8>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	6b 83       	std	Y+3, r22	; 0x03
    1abc:	7c 83       	std	Y+4, r23	; 0x04
    1abe:	4d 83       	std	Y+5, r20	; 0x05
    1ac0:	5e 83       	std	Y+6, r21	; 0x06
	buffer->head = 0; //Beginning of array
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	12 82       	std	Z+2, r1	; 0x02
    1aca:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	14 82       	std	Z+4, r1	; 0x04
    1ad4:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ade:	fc 01       	movw	r30, r24
    1ae0:	26 83       	std	Z+6, r18	; 0x06
    1ae2:	37 83       	std	Z+7, r19	; 0x07
	buffer->array_length = backing_array_length;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aea:	3e 81       	ldd	r19, Y+6	; 0x06
    1aec:	fc 01       	movw	r30, r24
    1aee:	20 83       	st	Z, r18
    1af0:	31 83       	std	Z+1, r19	; 0x01
}
    1af2:	00 00       	nop
    1af4:	26 96       	adiw	r28, 0x06	; 6
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	2a 97       	sbiw	r28, 0x0a	; 10
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	6f 83       	std	Y+7, r22	; 0x07
    1b14:	78 87       	std	Y+8, r23	; 0x08
    1b16:	49 87       	std	Y+9, r20	; 0x09
    1b18:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t index = buffer->tail;
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	fc 01       	movw	r30, r24
    1b20:	84 81       	ldd	r24, Z+4	; 0x04
    1b22:	95 81       	ldd	r25, Z+5	; 0x05
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	9a 83       	std	Y+2, r25	; 0x02
	uint16_t i = 0;
    1b28:	1b 82       	std	Y+3, r1	; 0x03
    1b2a:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    1b2c:	1b 82       	std	Y+3, r1	; 0x03
    1b2e:	1c 82       	std	Y+4, r1	; 0x04
    1b30:	2d c0       	rjmp	.+90     	; 0x1b8c <rbu8_read+0x8c>
	{

		dest[i] = buffer->buffer[index];
    1b32:	2f 81       	ldd	r18, Y+7	; 0x07
    1b34:	38 85       	ldd	r19, Y+8	; 0x08
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b40:	3e 81       	ldd	r19, Y+6	; 0x06
    1b42:	f9 01       	movw	r30, r18
    1b44:	46 81       	ldd	r20, Z+6	; 0x06
    1b46:	57 81       	ldd	r21, Z+7	; 0x07
    1b48:	29 81       	ldd	r18, Y+1	; 0x01
    1b4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b4c:	24 0f       	add	r18, r20
    1b4e:	35 1f       	adc	r19, r21
    1b50:	f9 01       	movw	r30, r18
    1b52:	20 81       	ld	r18, Z
    1b54:	fc 01       	movw	r30, r24
    1b56:	20 83       	st	Z, r18
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	9c 01       	movw	r18, r24
    1b64:	21 50       	subi	r18, 0x01	; 1
    1b66:	31 09       	sbc	r19, r1
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	28 17       	cp	r18, r24
    1b6e:	39 07       	cpc	r19, r25
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <rbu8_read+0x78>
		{
			index = 0;
    1b72:	19 82       	std	Y+1, r1	; 0x01
    1b74:	1a 82       	std	Y+2, r1	; 0x02
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <rbu8_read+0x82>
		}
		else
		{
			index++;
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	9a 83       	std	Y+2, r25	; 0x02
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	8c d0       	rcall	.+280    	; 0x1caa <rbu8_length>
    1b92:	9c 01       	movw	r18, r24
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	28 17       	cp	r18, r24
    1b9a:	39 07       	cpc	r19, r25
    1b9c:	20 f4       	brcc	.+8      	; 0x1ba6 <rbu8_read+0xa6>
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	83 d0       	rcall	.+262    	; 0x1caa <rbu8_length>
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <rbu8_read+0xaa>
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bac:	3c 81       	ldd	r19, Y+4	; 0x04
    1bae:	28 17       	cp	r18, r24
    1bb0:	39 07       	cpc	r19, r25
    1bb2:	08 f4       	brcc	.+2      	; 0x1bb6 <rbu8_read+0xb6>
    1bb4:	be cf       	rjmp	.-132    	; 0x1b32 <rbu8_read+0x32>
		{
			index++;
		}
		
	}
	if (length > rbu8_length(buffer))
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	77 d0       	rcall	.+238    	; 0x1caa <rbu8_length>
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	10 f4       	brcc	.+4      	; 0x1bcc <rbu8_read+0xcc>
		return 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <rbu8_read+0xce>
	else
		return 0;
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
}
    1bce:	2a 96       	adiw	r28, 0x0a	; 10
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <rbu8_delete_oldest+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <rbu8_delete_oldest+0x8>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	6d 83       	std	Y+5, r22	; 0x05
    1bec:	7e 83       	std	Y+6, r23	; 0x06
	uint16_t move_distance = min(length, rbu8_length(buffer));
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	5b d0       	rcall	.+182    	; 0x1caa <rbu8_length>
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	82 17       	cp	r24, r18
    1bfc:	93 07       	cpc	r25, r19
    1bfe:	20 f0       	brcs	.+8      	; 0x1c08 <rbu8_delete_oldest+0x2e>
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	52 d0       	rcall	.+164    	; 0x1caa <rbu8_length>
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <rbu8_delete_oldest+0x32>
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
	if (move_distance >= rbu8_length(buffer))
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	4a d0       	rcall	.+148    	; 0x1caa <rbu8_length>
    1c16:	9c 01       	movw	r18, r24
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	82 17       	cp	r24, r18
    1c1e:	93 07       	cpc	r25, r19
    1c20:	20 f1       	brcs	.+72     	; 0x1c6a <rbu8_delete_oldest+0x90>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	fc 01       	movw	r30, r24
    1c28:	24 81       	ldd	r18, Z+4	; 0x04
    1c2a:	35 81       	ldd	r19, Z+5	; 0x05
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	a9 01       	movw	r20, r18
    1c32:	48 0f       	add	r20, r24
    1c34:	59 1f       	adc	r21, r25
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	20 81       	ld	r18, Z
    1c3e:	31 81       	ldd	r19, Z+1	; 0x01
    1c40:	ca 01       	movw	r24, r20
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 b6 39 	call	0x736c	; 0x736c <__udivmodhi4>
    1c48:	9c 01       	movw	r18, r24
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	fc 01       	movw	r30, r24
    1c50:	24 83       	std	Z+4, r18	; 0x04
    1c52:	35 83       	std	Z+5, r19	; 0x05
		buffer->head = buffer->tail;
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	fc 01       	movw	r30, r24
    1c5a:	24 81       	ldd	r18, Z+4	; 0x04
    1c5c:	35 81       	ldd	r19, Z+5	; 0x05
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	fc 01       	movw	r30, r24
    1c64:	22 83       	std	Z+2, r18	; 0x02
    1c66:	33 83       	std	Z+3, r19	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    1c68:	19 c0       	rjmp	.+50     	; 0x1c9c <rbu8_delete_oldest+0xc2>
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
		buffer->head = buffer->tail;
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	fc 01       	movw	r30, r24
    1c70:	24 81       	ldd	r18, Z+4	; 0x04
    1c72:	35 81       	ldd	r19, Z+5	; 0x05
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	a9 01       	movw	r20, r18
    1c7a:	48 0f       	add	r20, r24
    1c7c:	59 1f       	adc	r21, r25
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	fc 01       	movw	r30, r24
    1c84:	20 81       	ld	r18, Z
    1c86:	31 81       	ldd	r19, Z+1	; 0x01
    1c88:	ca 01       	movw	r24, r20
    1c8a:	b9 01       	movw	r22, r18
    1c8c:	0e 94 b6 39 	call	0x736c	; 0x736c <__udivmodhi4>
    1c90:	9c 01       	movw	r18, r24
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	fc 01       	movw	r30, r24
    1c98:	24 83       	std	Z+4, r18	; 0x04
    1c9a:	35 83       	std	Z+5, r19	; 0x05
	}
}
    1c9c:	00 00       	nop
    1c9e:	26 96       	adiw	r28, 0x06	; 6
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	1f 92       	push	r1
    1cb0:	1f 92       	push	r1
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
	if (buffer->head >= buffer->tail)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	22 81       	ldd	r18, Z+2	; 0x02
    1cc2:	33 81       	ldd	r19, Z+3	; 0x03
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	fc 01       	movw	r30, r24
    1cca:	84 81       	ldd	r24, Z+4	; 0x04
    1ccc:	95 81       	ldd	r25, Z+5	; 0x05
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	78 f0       	brcs	.+30     	; 0x1cf2 <rbu8_length+0x48>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	fc 01       	movw	r30, r24
    1cda:	22 81       	ldd	r18, Z+2	; 0x02
    1cdc:	33 81       	ldd	r19, Z+3	; 0x03
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	84 81       	ldd	r24, Z+4	; 0x04
    1ce6:	95 81       	ldd	r25, Z+5	; 0x05
    1ce8:	a9 01       	movw	r20, r18
    1cea:	48 1b       	sub	r20, r24
    1cec:	59 0b       	sbc	r21, r25
    1cee:	ca 01       	movw	r24, r20
    1cf0:	15 c0       	rjmp	.+42     	; 0x1d1c <rbu8_length+0x72>
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	fc 01       	movw	r30, r24
    1d02:	42 81       	ldd	r20, Z+2	; 0x02
    1d04:	53 81       	ldd	r21, Z+3	; 0x03
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	84 81       	ldd	r24, Z+4	; 0x04
    1d0e:	95 81       	ldd	r25, Z+5	; 0x05
    1d10:	ba 01       	movw	r22, r20
    1d12:	68 1b       	sub	r22, r24
    1d14:	79 0b       	sbc	r23, r25
    1d16:	cb 01       	movw	r24, r22
    1d18:	82 0f       	add	r24, r18
    1d1a:	93 1f       	adc	r25, r19
	}
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <sysclk_enable_peripheral_clock>:
		{
			return i;
		}
	}
	return i+1;
}
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	1f 92       	push	r1
    1d2c:	1f 92       	push	r1
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	89 2b       	or	r24, r25
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <sysclk_enable_peripheral_clock+0x1a>
    1d3e:	5e c1       	rjmp	.+700    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	80 3c       	cpi	r24, 0xC0	; 192
    1d46:	91 05       	cpc	r25, r1
    1d48:	21 f4       	brne	.+8      	; 0x1d52 <sysclk_enable_peripheral_clock+0x2c>
    1d4a:	60 e1       	ldi	r22, 0x10	; 16
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	b2 d7       	rcall	.+3940   	; 0x2cb4 <sysclk_enable_module>
    1d50:	55 c1       	rjmp	.+682    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	80 34       	cpi	r24, 0x40	; 64
    1d58:	94 40       	sbci	r25, 0x04	; 4
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <sysclk_enable_peripheral_clock+0x3e>
    1d5c:	68 e0       	ldi	r22, 0x08	; 8
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	a9 d7       	rcall	.+3922   	; 0x2cb4 <sysclk_enable_module>
    1d62:	4c c1       	rjmp	.+664    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	81 15       	cp	r24, r1
    1d6a:	94 40       	sbci	r25, 0x04	; 4
    1d6c:	21 f4       	brne	.+8      	; 0x1d76 <sysclk_enable_peripheral_clock+0x50>
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	a0 d7       	rcall	.+3904   	; 0x2cb4 <sysclk_enable_module>
    1d74:	43 c1       	rjmp	.+646    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	80 38       	cpi	r24, 0x80	; 128
    1d7c:	91 40       	sbci	r25, 0x01	; 1
    1d7e:	21 f4       	brne	.+8      	; 0x1d88 <sysclk_enable_peripheral_clock+0x62>
    1d80:	62 e0       	ldi	r22, 0x02	; 2
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	97 d7       	rcall	.+3886   	; 0x2cb4 <sysclk_enable_module>
    1d86:	3a c1       	rjmp	.+628    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	81 15       	cp	r24, r1
    1d8e:	91 40       	sbci	r25, 0x01	; 1
    1d90:	21 f4       	brne	.+8      	; 0x1d9a <sysclk_enable_peripheral_clock+0x74>
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	8e d7       	rcall	.+3868   	; 0x2cb4 <sysclk_enable_module>
    1d98:	31 c1       	rjmp	.+610    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	80 38       	cpi	r24, 0x80	; 128
    1da0:	93 40       	sbci	r25, 0x03	; 3
    1da2:	21 f4       	brne	.+8      	; 0x1dac <sysclk_enable_peripheral_clock+0x86>
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	85 d7       	rcall	.+3850   	; 0x2cb4 <sysclk_enable_module>
    1daa:	28 c1       	rjmp	.+592    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	80 39       	cpi	r24, 0x90	; 144
    1db2:	93 40       	sbci	r25, 0x03	; 3
    1db4:	21 f4       	brne	.+8      	; 0x1dbe <sysclk_enable_peripheral_clock+0x98>
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	7c d7       	rcall	.+3832   	; 0x2cb4 <sysclk_enable_module>
    1dbc:	1f c1       	rjmp	.+574    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	81 15       	cp	r24, r1
    1dc4:	92 40       	sbci	r25, 0x02	; 2
    1dc6:	21 f4       	brne	.+8      	; 0x1dd0 <sysclk_enable_peripheral_clock+0xaa>
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	73 d7       	rcall	.+3814   	; 0x2cb4 <sysclk_enable_module>
    1dce:	16 c1       	rjmp	.+556    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	80 34       	cpi	r24, 0x40	; 64
    1dd6:	92 40       	sbci	r25, 0x02	; 2
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <sysclk_enable_peripheral_clock+0xbc>
    1dda:	62 e0       	ldi	r22, 0x02	; 2
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	6a d7       	rcall	.+3796   	; 0x2cb4 <sysclk_enable_module>
    1de0:	0d c1       	rjmp	.+538    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	81 15       	cp	r24, r1
    1de8:	93 40       	sbci	r25, 0x03	; 3
    1dea:	21 f4       	brne	.+8      	; 0x1df4 <sysclk_enable_peripheral_clock+0xce>
    1dec:	64 e0       	ldi	r22, 0x04	; 4
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	61 d7       	rcall	.+3778   	; 0x2cb4 <sysclk_enable_module>
    1df2:	04 c1       	rjmp	.+520    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	80 32       	cpi	r24, 0x20	; 32
    1dfa:	93 40       	sbci	r25, 0x03	; 3
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <sysclk_enable_peripheral_clock+0xe0>
    1dfe:	64 e0       	ldi	r22, 0x04	; 4
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	58 d7       	rcall	.+3760   	; 0x2cb4 <sysclk_enable_module>
    1e04:	fb c0       	rjmp	.+502    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	81 15       	cp	r24, r1
    1e0c:	98 40       	sbci	r25, 0x08	; 8
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <sysclk_enable_peripheral_clock+0xf2>
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	4f d7       	rcall	.+3742   	; 0x2cb4 <sysclk_enable_module>
    1e16:	f2 c0       	rjmp	.+484    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	81 15       	cp	r24, r1
    1e1e:	99 40       	sbci	r25, 0x09	; 9
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <sysclk_enable_peripheral_clock+0x104>
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	84 e0       	ldi	r24, 0x04	; 4
    1e26:	46 d7       	rcall	.+3724   	; 0x2cb4 <sysclk_enable_module>
    1e28:	e9 c0       	rjmp	.+466    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	81 15       	cp	r24, r1
    1e30:	9a 40       	sbci	r25, 0x0A	; 10
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <sysclk_enable_peripheral_clock+0x116>
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	85 e0       	ldi	r24, 0x05	; 5
    1e38:	3d d7       	rcall	.+3706   	; 0x2cb4 <sysclk_enable_module>
    1e3a:	e0 c0       	rjmp	.+448    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	81 15       	cp	r24, r1
    1e42:	9b 40       	sbci	r25, 0x0B	; 11
    1e44:	21 f4       	brne	.+8      	; 0x1e4e <sysclk_enable_peripheral_clock+0x128>
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	86 e0       	ldi	r24, 0x06	; 6
    1e4a:	34 d7       	rcall	.+3688   	; 0x2cb4 <sysclk_enable_module>
    1e4c:	d7 c0       	rjmp	.+430    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
    1e52:	80 34       	cpi	r24, 0x40	; 64
    1e54:	98 40       	sbci	r25, 0x08	; 8
    1e56:	21 f4       	brne	.+8      	; 0x1e60 <sysclk_enable_peripheral_clock+0x13a>
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	2b d7       	rcall	.+3670   	; 0x2cb4 <sysclk_enable_module>
    1e5e:	ce c0       	rjmp	.+412    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	80 34       	cpi	r24, 0x40	; 64
    1e66:	99 40       	sbci	r25, 0x09	; 9
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <sysclk_enable_peripheral_clock+0x14c>
    1e6a:	62 e0       	ldi	r22, 0x02	; 2
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	22 d7       	rcall	.+3652   	; 0x2cb4 <sysclk_enable_module>
    1e70:	c5 c0       	rjmp	.+394    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	80 34       	cpi	r24, 0x40	; 64
    1e78:	9a 40       	sbci	r25, 0x0A	; 10
    1e7a:	21 f4       	brne	.+8      	; 0x1e84 <sysclk_enable_peripheral_clock+0x15e>
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	85 e0       	ldi	r24, 0x05	; 5
    1e80:	19 d7       	rcall	.+3634   	; 0x2cb4 <sysclk_enable_module>
    1e82:	bc c0       	rjmp	.+376    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	80 34       	cpi	r24, 0x40	; 64
    1e8a:	9b 40       	sbci	r25, 0x0B	; 11
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <sysclk_enable_peripheral_clock+0x170>
    1e8e:	62 e0       	ldi	r22, 0x02	; 2
    1e90:	86 e0       	ldi	r24, 0x06	; 6
    1e92:	10 d7       	rcall	.+3616   	; 0x2cb4 <sysclk_enable_module>
    1e94:	b3 c0       	rjmp	.+358    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	80 39       	cpi	r24, 0x90	; 144
    1e9c:	98 40       	sbci	r25, 0x08	; 8
    1e9e:	21 f4       	brne	.+8      	; 0x1ea8 <sysclk_enable_peripheral_clock+0x182>
    1ea0:	64 e0       	ldi	r22, 0x04	; 4
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	07 d7       	rcall	.+3598   	; 0x2cb4 <sysclk_enable_module>
    1ea6:	aa c0       	rjmp	.+340    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	80 39       	cpi	r24, 0x90	; 144
    1eae:	99 40       	sbci	r25, 0x09	; 9
    1eb0:	21 f4       	brne	.+8      	; 0x1eba <sysclk_enable_peripheral_clock+0x194>
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	fe d6       	rcall	.+3580   	; 0x2cb4 <sysclk_enable_module>
    1eb8:	a1 c0       	rjmp	.+322    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebe:	80 39       	cpi	r24, 0x90	; 144
    1ec0:	9a 40       	sbci	r25, 0x0A	; 10
    1ec2:	21 f4       	brne	.+8      	; 0x1ecc <sysclk_enable_peripheral_clock+0x1a6>
    1ec4:	64 e0       	ldi	r22, 0x04	; 4
    1ec6:	85 e0       	ldi	r24, 0x05	; 5
    1ec8:	f5 d6       	rcall	.+3562   	; 0x2cb4 <sysclk_enable_module>
    1eca:	98 c0       	rjmp	.+304    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	80 39       	cpi	r24, 0x90	; 144
    1ed2:	9b 40       	sbci	r25, 0x0B	; 11
    1ed4:	21 f4       	brne	.+8      	; 0x1ede <sysclk_enable_peripheral_clock+0x1b8>
    1ed6:	64 e0       	ldi	r22, 0x04	; 4
    1ed8:	86 e0       	ldi	r24, 0x06	; 6
    1eda:	ec d6       	rcall	.+3544   	; 0x2cb4 <sysclk_enable_module>
    1edc:	8f c0       	rjmp	.+286    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee2:	80 3c       	cpi	r24, 0xC0	; 192
    1ee4:	98 40       	sbci	r25, 0x08	; 8
    1ee6:	21 f4       	brne	.+8      	; 0x1ef0 <sysclk_enable_peripheral_clock+0x1ca>
    1ee8:	68 e0       	ldi	r22, 0x08	; 8
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	e3 d6       	rcall	.+3526   	; 0x2cb4 <sysclk_enable_module>
    1eee:	86 c0       	rjmp	.+268    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	80 3c       	cpi	r24, 0xC0	; 192
    1ef6:	99 40       	sbci	r25, 0x09	; 9
    1ef8:	21 f4       	brne	.+8      	; 0x1f02 <sysclk_enable_peripheral_clock+0x1dc>
    1efa:	68 e0       	ldi	r22, 0x08	; 8
    1efc:	84 e0       	ldi	r24, 0x04	; 4
    1efe:	da d6       	rcall	.+3508   	; 0x2cb4 <sysclk_enable_module>
    1f00:	7d c0       	rjmp	.+250    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	80 3c       	cpi	r24, 0xC0	; 192
    1f08:	9a 40       	sbci	r25, 0x0A	; 10
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <sysclk_enable_peripheral_clock+0x1ee>
    1f0c:	68 e0       	ldi	r22, 0x08	; 8
    1f0e:	85 e0       	ldi	r24, 0x05	; 5
    1f10:	d1 d6       	rcall	.+3490   	; 0x2cb4 <sysclk_enable_module>
    1f12:	74 c0       	rjmp	.+232    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	80 3c       	cpi	r24, 0xC0	; 192
    1f1a:	9b 40       	sbci	r25, 0x0B	; 11
    1f1c:	21 f4       	brne	.+8      	; 0x1f26 <sysclk_enable_peripheral_clock+0x200>
    1f1e:	68 e0       	ldi	r22, 0x08	; 8
    1f20:	86 e0       	ldi	r24, 0x06	; 6
    1f22:	c8 d6       	rcall	.+3472   	; 0x2cb4 <sysclk_enable_module>
    1f24:	6b c0       	rjmp	.+214    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	80 3a       	cpi	r24, 0xA0	; 160
    1f2c:	98 40       	sbci	r25, 0x08	; 8
    1f2e:	21 f4       	brne	.+8      	; 0x1f38 <sysclk_enable_peripheral_clock+0x212>
    1f30:	60 e1       	ldi	r22, 0x10	; 16
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	bf d6       	rcall	.+3454   	; 0x2cb4 <sysclk_enable_module>
    1f36:	62 c0       	rjmp	.+196    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	80 3a       	cpi	r24, 0xA0	; 160
    1f3e:	99 40       	sbci	r25, 0x09	; 9
    1f40:	21 f4       	brne	.+8      	; 0x1f4a <sysclk_enable_peripheral_clock+0x224>
    1f42:	60 e1       	ldi	r22, 0x10	; 16
    1f44:	84 e0       	ldi	r24, 0x04	; 4
    1f46:	b6 d6       	rcall	.+3436   	; 0x2cb4 <sysclk_enable_module>
    1f48:	59 c0       	rjmp	.+178    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	80 3a       	cpi	r24, 0xA0	; 160
    1f50:	9a 40       	sbci	r25, 0x0A	; 10
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <sysclk_enable_peripheral_clock+0x236>
    1f54:	60 e1       	ldi	r22, 0x10	; 16
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	ad d6       	rcall	.+3418   	; 0x2cb4 <sysclk_enable_module>
    1f5a:	50 c0       	rjmp	.+160    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	80 3a       	cpi	r24, 0xA0	; 160
    1f62:	9b 40       	sbci	r25, 0x0B	; 11
    1f64:	21 f4       	brne	.+8      	; 0x1f6e <sysclk_enable_peripheral_clock+0x248>
    1f66:	60 e1       	ldi	r22, 0x10	; 16
    1f68:	86 e0       	ldi	r24, 0x06	; 6
    1f6a:	a4 d6       	rcall	.+3400   	; 0x2cb4 <sysclk_enable_module>
    1f6c:	47 c0       	rjmp	.+142    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	80 3b       	cpi	r24, 0xB0	; 176
    1f74:	98 40       	sbci	r25, 0x08	; 8
    1f76:	21 f4       	brne	.+8      	; 0x1f80 <sysclk_enable_peripheral_clock+0x25a>
    1f78:	60 e2       	ldi	r22, 0x20	; 32
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	9b d6       	rcall	.+3382   	; 0x2cb4 <sysclk_enable_module>
    1f7e:	3e c0       	rjmp	.+124    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	80 3b       	cpi	r24, 0xB0	; 176
    1f86:	99 40       	sbci	r25, 0x09	; 9
    1f88:	21 f4       	brne	.+8      	; 0x1f92 <sysclk_enable_peripheral_clock+0x26c>
    1f8a:	60 e2       	ldi	r22, 0x20	; 32
    1f8c:	84 e0       	ldi	r24, 0x04	; 4
    1f8e:	92 d6       	rcall	.+3364   	; 0x2cb4 <sysclk_enable_module>
    1f90:	35 c0       	rjmp	.+106    	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	80 3b       	cpi	r24, 0xB0	; 176
    1f98:	9a 40       	sbci	r25, 0x0A	; 10
    1f9a:	21 f4       	brne	.+8      	; 0x1fa4 <sysclk_enable_peripheral_clock+0x27e>
    1f9c:	60 e2       	ldi	r22, 0x20	; 32
    1f9e:	85 e0       	ldi	r24, 0x05	; 5
    1fa0:	89 d6       	rcall	.+3346   	; 0x2cb4 <sysclk_enable_module>
    1fa2:	2c c0       	rjmp	.+88     	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	80 3b       	cpi	r24, 0xB0	; 176
    1faa:	9b 40       	sbci	r25, 0x0B	; 11
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <sysclk_enable_peripheral_clock+0x290>
    1fae:	60 e2       	ldi	r22, 0x20	; 32
    1fb0:	86 e0       	ldi	r24, 0x06	; 6
    1fb2:	80 d6       	rcall	.+3328   	; 0x2cb4 <sysclk_enable_module>
    1fb4:	23 c0       	rjmp	.+70     	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	80 38       	cpi	r24, 0x80	; 128
    1fbc:	94 40       	sbci	r25, 0x04	; 4
    1fbe:	21 f4       	brne	.+8      	; 0x1fc8 <sysclk_enable_peripheral_clock+0x2a2>
    1fc0:	60 e4       	ldi	r22, 0x40	; 64
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	77 d6       	rcall	.+3310   	; 0x2cb4 <sysclk_enable_module>
    1fc6:	1a c0       	rjmp	.+52     	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	80 39       	cpi	r24, 0x90	; 144
    1fce:	94 40       	sbci	r25, 0x04	; 4
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <sysclk_enable_peripheral_clock+0x2b4>
    1fd2:	60 e4       	ldi	r22, 0x40	; 64
    1fd4:	84 e0       	ldi	r24, 0x04	; 4
    1fd6:	6e d6       	rcall	.+3292   	; 0x2cb4 <sysclk_enable_module>
    1fd8:	11 c0       	rjmp	.+34     	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	80 3a       	cpi	r24, 0xA0	; 160
    1fe0:	94 40       	sbci	r25, 0x04	; 4
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <sysclk_enable_peripheral_clock+0x2c6>
    1fe4:	60 e4       	ldi	r22, 0x40	; 64
    1fe6:	85 e0       	ldi	r24, 0x05	; 5
    1fe8:	65 d6       	rcall	.+3274   	; 0x2cb4 <sysclk_enable_module>
    1fea:	08 c0       	rjmp	.+16     	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	80 3b       	cpi	r24, 0xB0	; 176
    1ff2:	94 40       	sbci	r25, 0x04	; 4
    1ff4:	19 f4       	brne	.+6      	; 0x1ffc <sysclk_enable_peripheral_clock+0x2d6>
    1ff6:	60 e4       	ldi	r22, 0x40	; 64
    1ff8:	86 e0       	ldi	r24, 0x06	; 6
    1ffa:	5c d6       	rcall	.+3256   	; 0x2cb4 <sysclk_enable_module>
    1ffc:	00 00       	nop
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <ioport_set_pin_high>:
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	2a 97       	sbiw	r28, 0x0a	; 10
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	8a 87       	std	Y+10, r24	; 0x0a
    2018:	8a 85       	ldd	r24, Y+10	; 0x0a
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	8b 83       	std	Y+3, r24	; 0x03
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	86 95       	lsr	r24
    202c:	86 95       	lsr	r24
    202e:	86 95       	lsr	r24
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	82 95       	swap	r24
    203e:	92 95       	swap	r25
    2040:	90 7f       	andi	r25, 0xF0	; 240
    2042:	98 27       	eor	r25, r24
    2044:	80 7f       	andi	r24, 0xF0	; 240
    2046:	98 27       	eor	r25, r24
    2048:	9a 5f       	subi	r25, 0xFA	; 250
    204a:	8e 83       	std	Y+6, r24	; 0x06
    204c:	9f 83       	std	Y+7, r25	; 0x07
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	88 23       	and	r24, r24
    2052:	a9 f0       	breq	.+42     	; 0x207e <ioport_set_pin_high+0x76>
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	88 87       	std	Y+8, r24	; 0x08
    2058:	88 85       	ldd	r24, Y+8	; 0x08
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 01       	movw	r18, r24
    2060:	27 70       	andi	r18, 0x07	; 7
    2062:	33 27       	eor	r19, r19
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 c0       	rjmp	.+4      	; 0x206e <ioport_set_pin_high+0x66>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	2a 95       	dec	r18
    2070:	e2 f7       	brpl	.-8      	; 0x206a <ioport_set_pin_high+0x62>
    2072:	28 2f       	mov	r18, r24
    2074:	8e 81       	ldd	r24, Y+6	; 0x06
    2076:	9f 81       	ldd	r25, Y+7	; 0x07
    2078:	fc 01       	movw	r30, r24
    207a:	25 83       	std	Z+5, r18	; 0x05
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <ioport_set_pin_high+0x9e>
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	89 87       	std	Y+9, r24	; 0x09
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 01       	movw	r18, r24
    208a:	27 70       	andi	r18, 0x07	; 7
    208c:	33 27       	eor	r19, r19
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <ioport_set_pin_high+0x90>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	2a 95       	dec	r18
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <ioport_set_pin_high+0x8c>
    209c:	28 2f       	mov	r18, r24
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	fc 01       	movw	r30, r24
    20a4:	26 83       	std	Z+6, r18	; 0x06
    20a6:	00 00       	nop
    20a8:	2a 96       	adiw	r28, 0x0a	; 10
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <usart_serial_init>:
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	2b 97       	sbiw	r28, 0x0b	; 11
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	88 87       	std	Y+8, r24	; 0x08
    20c4:	99 87       	std	Y+9, r25	; 0x09
    20c6:	6a 87       	std	Y+10, r22	; 0x0a
    20c8:	7b 87       	std	Y+11, r23	; 0x0b
    20ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    20cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ce:	fc 01       	movw	r30, r24
    20d0:	84 81       	ldd	r24, Z+4	; 0x04
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d8:	fc 01       	movw	r30, r24
    20da:	85 81       	ldd	r24, Z+5	; 0x05
    20dc:	8e 83       	std	Y+6, r24	; 0x06
    20de:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e2:	fc 01       	movw	r30, r24
    20e4:	86 81       	ldd	r24, Z+6	; 0x06
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ec:	fc 01       	movw	r30, r24
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	a2 81       	ldd	r26, Z+2	; 0x02
    20f4:	b3 81       	ldd	r27, Z+3	; 0x03
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	ab 83       	std	Y+3, r26	; 0x03
    20fc:	bc 83       	std	Y+4, r27	; 0x04
    20fe:	88 85       	ldd	r24, Y+8	; 0x08
    2100:	99 85       	ldd	r25, Y+9	; 0x09
    2102:	80 3a       	cpi	r24, 0xA0	; 160
    2104:	98 40       	sbci	r25, 0x08	; 8
    2106:	19 f4       	brne	.+6      	; 0x210e <usart_serial_init+0x5a>
    2108:	60 e1       	ldi	r22, 0x10	; 16
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	d3 d5       	rcall	.+2982   	; 0x2cb4 <sysclk_enable_module>
    210e:	88 85       	ldd	r24, Y+8	; 0x08
    2110:	99 85       	ldd	r25, Y+9	; 0x09
    2112:	80 3b       	cpi	r24, 0xB0	; 176
    2114:	98 40       	sbci	r25, 0x08	; 8
    2116:	19 f4       	brne	.+6      	; 0x211e <usart_serial_init+0x6a>
    2118:	60 e2       	ldi	r22, 0x20	; 32
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	cb d5       	rcall	.+2966   	; 0x2cb4 <sysclk_enable_module>
    211e:	88 85       	ldd	r24, Y+8	; 0x08
    2120:	99 85       	ldd	r25, Y+9	; 0x09
    2122:	80 3a       	cpi	r24, 0xA0	; 160
    2124:	99 40       	sbci	r25, 0x09	; 9
    2126:	19 f4       	brne	.+6      	; 0x212e <usart_serial_init+0x7a>
    2128:	60 e1       	ldi	r22, 0x10	; 16
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	c3 d5       	rcall	.+2950   	; 0x2cb4 <sysclk_enable_module>
    212e:	88 85       	ldd	r24, Y+8	; 0x08
    2130:	99 85       	ldd	r25, Y+9	; 0x09
    2132:	80 3b       	cpi	r24, 0xB0	; 176
    2134:	99 40       	sbci	r25, 0x09	; 9
    2136:	19 f4       	brne	.+6      	; 0x213e <usart_serial_init+0x8a>
    2138:	60 e2       	ldi	r22, 0x20	; 32
    213a:	84 e0       	ldi	r24, 0x04	; 4
    213c:	bb d5       	rcall	.+2934   	; 0x2cb4 <sysclk_enable_module>
    213e:	88 85       	ldd	r24, Y+8	; 0x08
    2140:	99 85       	ldd	r25, Y+9	; 0x09
    2142:	80 3a       	cpi	r24, 0xA0	; 160
    2144:	9a 40       	sbci	r25, 0x0A	; 10
    2146:	19 f4       	brne	.+6      	; 0x214e <usart_serial_init+0x9a>
    2148:	60 e1       	ldi	r22, 0x10	; 16
    214a:	85 e0       	ldi	r24, 0x05	; 5
    214c:	b3 d5       	rcall	.+2918   	; 0x2cb4 <sysclk_enable_module>
    214e:	88 85       	ldd	r24, Y+8	; 0x08
    2150:	99 85       	ldd	r25, Y+9	; 0x09
    2152:	80 3b       	cpi	r24, 0xB0	; 176
    2154:	9a 40       	sbci	r25, 0x0A	; 10
    2156:	19 f4       	brne	.+6      	; 0x215e <usart_serial_init+0xaa>
    2158:	60 e2       	ldi	r22, 0x20	; 32
    215a:	85 e0       	ldi	r24, 0x05	; 5
    215c:	ab d5       	rcall	.+2902   	; 0x2cb4 <sysclk_enable_module>
    215e:	88 85       	ldd	r24, Y+8	; 0x08
    2160:	99 85       	ldd	r25, Y+9	; 0x09
    2162:	80 3a       	cpi	r24, 0xA0	; 160
    2164:	9b 40       	sbci	r25, 0x0B	; 11
    2166:	19 f4       	brne	.+6      	; 0x216e <usart_serial_init+0xba>
    2168:	60 e1       	ldi	r22, 0x10	; 16
    216a:	86 e0       	ldi	r24, 0x06	; 6
    216c:	a3 d5       	rcall	.+2886   	; 0x2cb4 <sysclk_enable_module>
    216e:	88 85       	ldd	r24, Y+8	; 0x08
    2170:	99 85       	ldd	r25, Y+9	; 0x09
    2172:	80 3b       	cpi	r24, 0xB0	; 176
    2174:	9b 40       	sbci	r25, 0x0B	; 11
    2176:	19 f4       	brne	.+6      	; 0x217e <usart_serial_init+0xca>
    2178:	60 e2       	ldi	r22, 0x20	; 32
    217a:	86 e0       	ldi	r24, 0x06	; 6
    217c:	9b d5       	rcall	.+2870   	; 0x2cb4 <sysclk_enable_module>
    217e:	88 85       	ldd	r24, Y+8	; 0x08
    2180:	99 85       	ldd	r25, Y+9	; 0x09
    2182:	9e 01       	movw	r18, r28
    2184:	2f 5f       	subi	r18, 0xFF	; 255
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	b9 01       	movw	r22, r18
    218a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <usart_init_rs232>
    218e:	88 23       	and	r24, r24
    2190:	11 f0       	breq	.+4      	; 0x2196 <usart_serial_init+0xe2>
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <usart_serial_init+0xe4>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	2b 96       	adiw	r28, 0x0b	; 11
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	08 95       	ret

000021a4 <init_GPS_pins_and_usart>:
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	80 ea       	ldi	r24, 0xA0	; 160
    21ae:	96 e0       	ldi	r25, 0x06	; 6
    21b0:	20 ea       	ldi	r18, 0xA0	; 160
    21b2:	36 e0       	ldi	r19, 0x06	; 6
    21b4:	f9 01       	movw	r30, r18
    21b6:	20 81       	ld	r18, Z
    21b8:	20 68       	ori	r18, 0x80	; 128
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
    21be:	80 ea       	ldi	r24, 0xA0	; 160
    21c0:	96 e0       	ldi	r25, 0x06	; 6
    21c2:	20 ea       	ldi	r18, 0xA0	; 160
    21c4:	36 e0       	ldi	r19, 0x06	; 6
    21c6:	f9 01       	movw	r30, r18
    21c8:	20 81       	ld	r18, Z
    21ca:	2f 7b       	andi	r18, 0xBF	; 191
    21cc:	fc 01       	movw	r30, r24
    21ce:	20 83       	st	Z, r18
    21d0:	8f e2       	ldi	r24, 0x2F	; 47
    21d2:	1a df       	rcall	.-460    	; 0x2008 <ioport_set_pin_high>
    21d4:	80 eb       	ldi	r24, 0xB0	; 176
    21d6:	9b e0       	ldi	r25, 0x0B	; 11
    21d8:	a6 dd       	rcall	.-1204   	; 0x1d26 <sysclk_enable_peripheral_clock>
    21da:	66 e0       	ldi	r22, 0x06	; 6
    21dc:	70 e2       	ldi	r23, 0x20	; 32
    21de:	80 eb       	ldi	r24, 0xB0	; 176
    21e0:	9b e0       	ldi	r25, 0x0B	; 11
    21e2:	68 df       	rcall	.-304    	; 0x20b4 <usart_serial_init>
    21e4:	00 00       	nop
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <startswith>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	25 97       	sbiw	r28, 0x05	; 5
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	6c 83       	std	Y+4, r22	; 0x04
    2200:	7d 83       	std	Y+5, r23	; 0x05
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	2c 81       	ldd	r18, Y+4	; 0x04
    220c:	3d 81       	ldd	r19, Y+5	; 0x05
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	fc 01       	movw	r30, r24
    2214:	80 81       	ld	r24, Z
    2216:	88 23       	and	r24, r24
    2218:	11 f4       	brne	.+4      	; 0x221e <startswith+0x32>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	20 c0       	rjmp	.+64     	; 0x225e <startswith+0x72>
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	2c 81       	ldd	r18, Y+4	; 0x04
    2226:	3d 81       	ldd	r19, Y+5	; 0x05
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	fc 01       	movw	r30, r24
    222e:	80 81       	ld	r24, Z
    2230:	28 2f       	mov	r18, r24
    2232:	88 0f       	add	r24, r24
    2234:	33 0b       	sbc	r19, r19
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	4a 81       	ldd	r20, Y+2	; 0x02
    223e:	5b 81       	ldd	r21, Y+3	; 0x03
    2240:	84 0f       	add	r24, r20
    2242:	95 1f       	adc	r25, r21
    2244:	fc 01       	movw	r30, r24
    2246:	80 81       	ld	r24, Z
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	28 17       	cp	r18, r24
    224e:	39 07       	cpc	r19, r25
    2250:	11 f0       	breq	.+4      	; 0x2256 <startswith+0x6a>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	04 c0       	rjmp	.+8      	; 0x225e <startswith+0x72>
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	8f 5f       	subi	r24, 0xFF	; 255
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	d3 cf       	rjmp	.-90     	; 0x2204 <startswith+0x18>
    225e:	25 96       	adiw	r28, 0x05	; 5
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    226a:	8f 92       	push	r8
    226c:	9f 92       	push	r9
    226e:	af 92       	push	r10
    2270:	bf 92       	push	r11
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	ec 97       	sbiw	r28, 0x3c	; 60
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	88 af       	std	Y+56, r24	; 0x38
    228e:	99 af       	std	Y+57, r25	; 0x39
    2290:	6a af       	std	Y+58, r22	; 0x3a
    2292:	7b af       	std	Y+59, r23	; 0x3b
    2294:	4c af       	std	Y+60, r20	; 0x3c
	int8_t countcommas=0;
    2296:	19 82       	std	Y+1, r1	; 0x01
	GPS_data_t GPSData;
	uint8_t first_comma_position=0;
    2298:	1b 86       	std	Y+11, r1	; 0x0b
	uint8_t second_comma_position=0;
    229a:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t third_comma_position=0;
    229c:	1d 86       	std	Y+13, r1	; 0x0d
	uint8_t fourth_comma_position=0;
    229e:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t fifth_comma_position=0;
    22a0:	1f 86       	std	Y+15, r1	; 0x0f
	uint8_t comma7=0;
    22a2:	18 8a       	std	Y+16, r1	; 0x10
	uint8_t comma8=0;
    22a4:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t comma9=0;
    22a6:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t comma10=0;
    22a8:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t commab=0;
    22aa:	1c 8a       	std	Y+20, r1	; 0x14
	uint8_t commac=0;
    22ac:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t speedwritten=0;
    22ae:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t heightwritten=0;
    22b0:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t no_of_sateliiteswritten=0;
    22b2:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t comma_position=0;
    22b4:	19 8e       	std	Y+25, r1	; 0x19
	int a=0;
    22b6:	1a 82       	std	Y+2, r1	; 0x02
    22b8:	1b 82       	std	Y+3, r1	; 0x03
	if (startswith(NMEA_sentence, "$GPGGA"))
    22ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    22bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    22be:	66 e3       	ldi	r22, 0x36	; 54
    22c0:	70 e2       	ldi	r23, 0x20	; 32
    22c2:	94 df       	rcall	.-216    	; 0x21ec <startswith>
    22c4:	88 23       	and	r24, r24
    22c6:	09 f4       	brne	.+2      	; 0x22ca <getGPSDatafromNMEA+0x60>
    22c8:	c4 c3       	rjmp	.+1928   	; 0x2a52 <getGPSDatafromNMEA+0x7e8>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    22ca:	1a 82       	std	Y+2, r1	; 0x02
    22cc:	1b 82       	std	Y+3, r1	; 0x03
    22ce:	b8 c3       	rjmp	.+1904   	; 0x2a40 <getGPSDatafromNMEA+0x7d6>
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	9b 81       	ldd	r25, Y+3	; 0x03
    22d4:	2a ad       	ldd	r18, Y+58	; 0x3a
    22d6:	3b ad       	ldd	r19, Y+59	; 0x3b
    22d8:	82 0f       	add	r24, r18
    22da:	93 1f       	adc	r25, r19
    22dc:	fc 01       	movw	r30, r24
    22de:	80 81       	ld	r24, Z
    22e0:	8c 32       	cpi	r24, 0x2C	; 44
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <getGPSDatafromNMEA+0x7c>
    22e4:	a8 c3       	rjmp	.+1872   	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
			{
				//printf("gfhghhf");
				countcommas++;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	89 83       	std	Y+1, r24	; 0x01
				if (countcommas == 1)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <getGPSDatafromNMEA+0x8a>
    22f2:	5b c0       	rjmp	.+182    	; 0x23aa <getGPSDatafromNMEA+0x140>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	2a ad       	ldd	r18, Y+58	; 0x3a
    22fc:	3b ad       	ldd	r19, Y+59	; 0x3b
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	fc 01       	movw	r30, r24
    2304:	80 81       	ld	r24, Z
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	c0 97       	sbiw	r24, 0x30	; 48
    230c:	88 0f       	add	r24, r24
    230e:	98 2f       	mov	r25, r24
    2310:	99 0f       	add	r25, r25
    2312:	99 0f       	add	r25, r25
    2314:	48 2f       	mov	r20, r24
    2316:	49 0f       	add	r20, r25
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	9b 81       	ldd	r25, Y+3	; 0x03
    231c:	02 96       	adiw	r24, 0x02	; 2
    231e:	2a ad       	ldd	r18, Y+58	; 0x3a
    2320:	3b ad       	ldd	r19, Y+59	; 0x3b
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	fc 01       	movw	r30, r24
    2328:	80 81       	ld	r24, Z
    232a:	84 0f       	add	r24, r20
    232c:	80 53       	subi	r24, 0x30	; 48
    232e:	8c ab       	std	Y+52, r24	; 0x34
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	03 96       	adiw	r24, 0x03	; 3
    2336:	2a ad       	ldd	r18, Y+58	; 0x3a
    2338:	3b ad       	ldd	r19, Y+59	; 0x3b
    233a:	82 0f       	add	r24, r18
    233c:	93 1f       	adc	r25, r19
    233e:	fc 01       	movw	r30, r24
    2340:	80 81       	ld	r24, Z
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	c0 97       	sbiw	r24, 0x30	; 48
    2348:	88 0f       	add	r24, r24
    234a:	98 2f       	mov	r25, r24
    234c:	99 0f       	add	r25, r25
    234e:	99 0f       	add	r25, r25
    2350:	48 2f       	mov	r20, r24
    2352:	49 0f       	add	r20, r25
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	04 96       	adiw	r24, 0x04	; 4
    235a:	2a ad       	ldd	r18, Y+58	; 0x3a
    235c:	3b ad       	ldd	r19, Y+59	; 0x3b
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	fc 01       	movw	r30, r24
    2364:	80 81       	ld	r24, Z
    2366:	84 0f       	add	r24, r20
    2368:	80 53       	subi	r24, 0x30	; 48
    236a:	8d ab       	std	Y+53, r24	; 0x35
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	05 96       	adiw	r24, 0x05	; 5
    2372:	2a ad       	ldd	r18, Y+58	; 0x3a
    2374:	3b ad       	ldd	r19, Y+59	; 0x3b
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	fc 01       	movw	r30, r24
    237c:	80 81       	ld	r24, Z
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	c0 97       	sbiw	r24, 0x30	; 48
    2384:	88 0f       	add	r24, r24
    2386:	98 2f       	mov	r25, r24
    2388:	99 0f       	add	r25, r25
    238a:	99 0f       	add	r25, r25
    238c:	48 2f       	mov	r20, r24
    238e:	49 0f       	add	r20, r25
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	06 96       	adiw	r24, 0x06	; 6
    2396:	2a ad       	ldd	r18, Y+58	; 0x3a
    2398:	3b ad       	ldd	r19, Y+59	; 0x3b
    239a:	82 0f       	add	r24, r18
    239c:	93 1f       	adc	r25, r19
    239e:	fc 01       	movw	r30, r24
    23a0:	80 81       	ld	r24, Z
    23a2:	84 0f       	add	r24, r20
    23a4:	80 53       	subi	r24, 0x30	; 48
    23a6:	8e ab       	std	Y+54, r24	; 0x36
    23a8:	46 c3       	rjmp	.+1676   	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <getGPSDatafromNMEA+0x148>
    23b0:	2c c1       	rjmp	.+600    	; 0x260a <getGPSDatafromNMEA+0x3a0>
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	2a ad       	ldd	r18, Y+58	; 0x3a
    23ba:	3b ad       	ldd	r19, Y+59	; 0x3b
    23bc:	82 0f       	add	r24, r18
    23be:	93 1f       	adc	r25, r19
    23c0:	fc 01       	movw	r30, r24
    23c2:	80 81       	ld	r24, Z
    23c4:	8c 32       	cpi	r24, 0x2C	; 44
    23c6:	09 f4       	brne	.+2      	; 0x23ca <getGPSDatafromNMEA+0x160>
    23c8:	20 c1       	rjmp	.+576    	; 0x260a <getGPSDatafromNMEA+0x3a0>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	2a ad       	ldd	r18, Y+58	; 0x3a
    23d2:	3b ad       	ldd	r19, Y+59	; 0x3b
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	fc 01       	movw	r30, r24
    23da:	80 81       	ld	r24, Z
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	c0 97       	sbiw	r24, 0x30	; 48
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	9c 01       	movw	r18, r24
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	22 0f       	add	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	28 0f       	add	r18, r24
    23f2:	39 1f       	adc	r19, r25
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	9b 81       	ldd	r25, Y+3	; 0x03
    23f8:	02 96       	adiw	r24, 0x02	; 2
    23fa:	4a ad       	ldd	r20, Y+58	; 0x3a
    23fc:	5b ad       	ldd	r21, Y+59	; 0x3b
    23fe:	84 0f       	add	r24, r20
    2400:	95 1f       	adc	r25, r21
    2402:	fc 01       	movw	r30, r24
    2404:	80 81       	ld	r24, Z
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	c0 97       	sbiw	r24, 0x30	; 48
    240c:	82 0f       	add	r24, r18
    240e:	93 1f       	adc	r25, r19
    2410:	8a 8f       	std	Y+26, r24	; 0x1a
    2412:	9b 8f       	std	Y+27, r25	; 0x1b
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	9b 81       	ldd	r25, Y+3	; 0x03
    2418:	03 96       	adiw	r24, 0x03	; 3
    241a:	2a ad       	ldd	r18, Y+58	; 0x3a
    241c:	3b ad       	ldd	r19, Y+59	; 0x3b
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	fc 01       	movw	r30, r24
    2424:	80 81       	ld	r24, Z
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	c0 97       	sbiw	r24, 0x30	; 48
    242c:	09 2e       	mov	r0, r25
    242e:	00 0c       	add	r0, r0
    2430:	aa 0b       	sbc	r26, r26
    2432:	bb 0b       	sbc	r27, r27
    2434:	9c 01       	movw	r18, r24
    2436:	ad 01       	movw	r20, r26
    2438:	60 ea       	ldi	r22, 0xA0	; 160
    243a:	76 e8       	ldi	r23, 0x86	; 134
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 a7 39 	call	0x734e	; 0x734e <__mulsi3>
    2444:	7b 01       	movw	r14, r22
    2446:	8c 01       	movw	r16, r24
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	04 96       	adiw	r24, 0x04	; 4
    244e:	2a ad       	ldd	r18, Y+58	; 0x3a
    2450:	3b ad       	ldd	r19, Y+59	; 0x3b
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	fc 01       	movw	r30, r24
    2458:	80 81       	ld	r24, Z
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	c0 97       	sbiw	r24, 0x30	; 48
    2460:	9c 01       	movw	r18, r24
    2462:	99 0f       	add	r25, r25
    2464:	44 0b       	sbc	r20, r20
    2466:	55 0b       	sbc	r21, r21
    2468:	80 e1       	ldi	r24, 0x10	; 16
    246a:	97 e2       	ldi	r25, 0x27	; 39
    246c:	dc 01       	movw	r26, r24
    246e:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <__muluhisi3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	e8 0e       	add	r14, r24
    2478:	f9 1e       	adc	r15, r25
    247a:	0a 1f       	adc	r16, r26
    247c:	1b 1f       	adc	r17, r27
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	9b 81       	ldd	r25, Y+3	; 0x03
    2482:	06 96       	adiw	r24, 0x06	; 6
    2484:	2a ad       	ldd	r18, Y+58	; 0x3a
    2486:	3b ad       	ldd	r19, Y+59	; 0x3b
    2488:	82 0f       	add	r24, r18
    248a:	93 1f       	adc	r25, r19
    248c:	fc 01       	movw	r30, r24
    248e:	80 81       	ld	r24, Z
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	c0 97       	sbiw	r24, 0x30	; 48
    2496:	9c 01       	movw	r18, r24
    2498:	99 0f       	add	r25, r25
    249a:	44 0b       	sbc	r20, r20
    249c:	55 0b       	sbc	r21, r21
    249e:	88 ee       	ldi	r24, 0xE8	; 232
    24a0:	93 e0       	ldi	r25, 0x03	; 3
    24a2:	dc 01       	movw	r26, r24
    24a4:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <__muluhisi3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	e8 0e       	add	r14, r24
    24ae:	f9 1e       	adc	r15, r25
    24b0:	0a 1f       	adc	r16, r26
    24b2:	1b 1f       	adc	r17, r27
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	07 96       	adiw	r24, 0x07	; 7
    24ba:	2a ad       	ldd	r18, Y+58	; 0x3a
    24bc:	3b ad       	ldd	r19, Y+59	; 0x3b
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	fc 01       	movw	r30, r24
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	c0 97       	sbiw	r24, 0x30	; 48
    24cc:	9c 01       	movw	r18, r24
    24ce:	99 0f       	add	r25, r25
    24d0:	44 0b       	sbc	r20, r20
    24d2:	55 0b       	sbc	r21, r21
    24d4:	84 e6       	ldi	r24, 0x64	; 100
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	dc 01       	movw	r26, r24
    24da:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <__muluhisi3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	a8 01       	movw	r20, r16
    24e4:	97 01       	movw	r18, r14
    24e6:	28 0f       	add	r18, r24
    24e8:	39 1f       	adc	r19, r25
    24ea:	4a 1f       	adc	r20, r26
    24ec:	5b 1f       	adc	r21, r27
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	08 96       	adiw	r24, 0x08	; 8
    24f4:	6a ad       	ldd	r22, Y+58	; 0x3a
    24f6:	7b ad       	ldd	r23, Y+59	; 0x3b
    24f8:	86 0f       	add	r24, r22
    24fa:	97 1f       	adc	r25, r23
    24fc:	fc 01       	movw	r30, r24
    24fe:	80 81       	ld	r24, Z
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	c0 97       	sbiw	r24, 0x30	; 48
    2506:	09 2e       	mov	r0, r25
    2508:	00 0c       	add	r0, r0
    250a:	aa 0b       	sbc	r26, r26
    250c:	bb 0b       	sbc	r27, r27
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	aa 1f       	adc	r26, r26
    2514:	bb 1f       	adc	r27, r27
    2516:	7c 01       	movw	r14, r24
    2518:	8d 01       	movw	r16, r26
    251a:	ee 0c       	add	r14, r14
    251c:	ff 1c       	adc	r15, r15
    251e:	00 1f       	adc	r16, r16
    2520:	11 1f       	adc	r17, r17
    2522:	ee 0c       	add	r14, r14
    2524:	ff 1c       	adc	r15, r15
    2526:	00 1f       	adc	r16, r16
    2528:	11 1f       	adc	r17, r17
    252a:	8e 0d       	add	r24, r14
    252c:	9f 1d       	adc	r25, r15
    252e:	a0 1f       	adc	r26, r16
    2530:	b1 1f       	adc	r27, r17
    2532:	28 0f       	add	r18, r24
    2534:	39 1f       	adc	r19, r25
    2536:	4a 1f       	adc	r20, r26
    2538:	5b 1f       	adc	r21, r27
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	09 96       	adiw	r24, 0x09	; 9
    2540:	6a ad       	ldd	r22, Y+58	; 0x3a
    2542:	7b ad       	ldd	r23, Y+59	; 0x3b
    2544:	86 0f       	add	r24, r22
    2546:	97 1f       	adc	r25, r23
    2548:	fc 01       	movw	r30, r24
    254a:	80 81       	ld	r24, Z
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	c0 97       	sbiw	r24, 0x30	; 48
    2552:	09 2e       	mov	r0, r25
    2554:	00 0c       	add	r0, r0
    2556:	aa 0b       	sbc	r26, r26
    2558:	bb 0b       	sbc	r27, r27
    255a:	82 0f       	add	r24, r18
    255c:	93 1f       	adc	r25, r19
    255e:	a4 1f       	adc	r26, r20
    2560:	b5 1f       	adc	r27, r21
    2562:	8c 8f       	std	Y+28, r24	; 0x1c
    2564:	9d 8f       	std	Y+29, r25	; 0x1d
    2566:	ae 8f       	std	Y+30, r26	; 0x1e
    2568:	bf 8f       	std	Y+31, r27	; 0x1f
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	0b 96       	adiw	r24, 0x0b	; 11
    2570:	2a ad       	ldd	r18, Y+58	; 0x3a
    2572:	3b ad       	ldd	r19, Y+59	; 0x3b
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	fc 01       	movw	r30, r24
    257a:	80 81       	ld	r24, Z
    257c:	8e 34       	cpi	r24, 0x4E	; 78
    257e:	49 f4       	brne	.+18     	; 0x2592 <getGPSDatafromNMEA+0x328>
    2580:	0f 2e       	mov	r0, r31
    2582:	c1 2c       	mov	r12, r1
    2584:	d1 2c       	mov	r13, r1
    2586:	f0 e8       	ldi	r31, 0x80	; 128
    2588:	ef 2e       	mov	r14, r31
    258a:	ff e3       	ldi	r31, 0x3F	; 63
    258c:	ff 2e       	mov	r15, r31
    258e:	f0 2d       	mov	r31, r0
    2590:	08 c0       	rjmp	.+16     	; 0x25a2 <getGPSDatafromNMEA+0x338>
    2592:	0f 2e       	mov	r0, r31
    2594:	c1 2c       	mov	r12, r1
    2596:	d1 2c       	mov	r13, r1
    2598:	f0 e8       	ldi	r31, 0x80	; 128
    259a:	ef 2e       	mov	r14, r31
    259c:	ff eb       	ldi	r31, 0xBF	; 191
    259e:	ff 2e       	mov	r15, r31
    25a0:	f0 2d       	mov	r31, r0
    25a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25a6:	cc 01       	movw	r24, r24
    25a8:	a0 e0       	ldi	r26, 0x00	; 0
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__floatunsisf>
    25b4:	4b 01       	movw	r8, r22
    25b6:	5c 01       	movw	r10, r24
    25b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25bc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25be:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__floatunsisf>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	3c e7       	ldi	r19, 0x7C	; 124
    25d0:	42 e1       	ldi	r20, 0x12	; 18
    25d2:	59 e4       	ldi	r21, 0x49	; 73
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 17 34 	call	0x682e	; 0x682e <__divsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9c 01       	movw	r18, r24
    25e2:	ad 01       	movw	r20, r26
    25e4:	c5 01       	movw	r24, r10
    25e6:	b4 01       	movw	r22, r8
    25e8:	0e 94 b3 33 	call	0x6766	; 0x6766 <__addsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 01       	movw	r18, r24
    25f2:	ad 01       	movw	r20, r26
    25f4:	c7 01       	movw	r24, r14
    25f6:	b6 01       	movw	r22, r12
    25f8:	0e 94 c1 35 	call	0x6b82	; 0x6b82 <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	89 a3       	std	Y+33, r24	; 0x21
    2602:	9a a3       	std	Y+34, r25	; 0x22
    2604:	ab a3       	std	Y+35, r26	; 0x23
    2606:	bc a3       	std	Y+36, r27	; 0x24
    2608:	16 c2       	rjmp	.+1068   	; 0x2a36 <getGPSDatafromNMEA+0x7cc>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	29 f4       	brne	.+10     	; 0x261a <getGPSDatafromNMEA+0x3b0>
				{
					GPSData.latdecimal = 0.0;
    2610:	19 a2       	std	Y+33, r1	; 0x21
    2612:	1a a2       	std	Y+34, r1	; 0x22
    2614:	1b a2       	std	Y+35, r1	; 0x23
    2616:	1c a2       	std	Y+36, r1	; 0x24
    2618:	0e c2       	rjmp	.+1052   	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	84 30       	cpi	r24, 0x04	; 4
    261e:	09 f0       	breq	.+2      	; 0x2622 <getGPSDatafromNMEA+0x3b8>
    2620:	40 c1       	rjmp	.+640    	; 0x28a2 <getGPSDatafromNMEA+0x638>
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	2a ad       	ldd	r18, Y+58	; 0x3a
    262a:	3b ad       	ldd	r19, Y+59	; 0x3b
    262c:	82 0f       	add	r24, r18
    262e:	93 1f       	adc	r25, r19
    2630:	fc 01       	movw	r30, r24
    2632:	80 81       	ld	r24, Z
    2634:	8c 32       	cpi	r24, 0x2C	; 44
    2636:	09 f4       	brne	.+2      	; 0x263a <getGPSDatafromNMEA+0x3d0>
    2638:	34 c1       	rjmp	.+616    	; 0x28a2 <getGPSDatafromNMEA+0x638>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	2a ad       	ldd	r18, Y+58	; 0x3a
    2642:	3b ad       	ldd	r19, Y+59	; 0x3b
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	c0 97       	sbiw	r24, 0x30	; 48
    2652:	44 e6       	ldi	r20, 0x64	; 100
    2654:	48 9f       	mul	r20, r24
    2656:	90 01       	movw	r18, r0
    2658:	49 9f       	mul	r20, r25
    265a:	30 0d       	add	r19, r0
    265c:	11 24       	eor	r1, r1
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	9b 81       	ldd	r25, Y+3	; 0x03
    2662:	02 96       	adiw	r24, 0x02	; 2
    2664:	4a ad       	ldd	r20, Y+58	; 0x3a
    2666:	5b ad       	ldd	r21, Y+59	; 0x3b
    2668:	84 0f       	add	r24, r20
    266a:	95 1f       	adc	r25, r21
    266c:	fc 01       	movw	r30, r24
    266e:	80 81       	ld	r24, Z
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	c0 97       	sbiw	r24, 0x30	; 48
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	ac 01       	movw	r20, r24
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	44 0f       	add	r20, r20
    2682:	55 1f       	adc	r21, r21
    2684:	84 0f       	add	r24, r20
    2686:	95 1f       	adc	r25, r21
    2688:	28 0f       	add	r18, r24
    268a:	39 1f       	adc	r19, r25
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	03 96       	adiw	r24, 0x03	; 3
    2692:	4a ad       	ldd	r20, Y+58	; 0x3a
    2694:	5b ad       	ldd	r21, Y+59	; 0x3b
    2696:	84 0f       	add	r24, r20
    2698:	95 1f       	adc	r25, r21
    269a:	fc 01       	movw	r30, r24
    269c:	80 81       	ld	r24, Z
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	c0 97       	sbiw	r24, 0x30	; 48
    26a4:	82 0f       	add	r24, r18
    26a6:	93 1f       	adc	r25, r19
    26a8:	8d a3       	std	Y+37, r24	; 0x25
    26aa:	9e a3       	std	Y+38, r25	; 0x26
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	04 96       	adiw	r24, 0x04	; 4
    26b2:	2a ad       	ldd	r18, Y+58	; 0x3a
    26b4:	3b ad       	ldd	r19, Y+59	; 0x3b
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	fc 01       	movw	r30, r24
    26bc:	80 81       	ld	r24, Z
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	c0 97       	sbiw	r24, 0x30	; 48
    26c4:	09 2e       	mov	r0, r25
    26c6:	00 0c       	add	r0, r0
    26c8:	aa 0b       	sbc	r26, r26
    26ca:	bb 0b       	sbc	r27, r27
    26cc:	9c 01       	movw	r18, r24
    26ce:	ad 01       	movw	r20, r26
    26d0:	60 ea       	ldi	r22, 0xA0	; 160
    26d2:	76 e8       	ldi	r23, 0x86	; 134
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 a7 39 	call	0x734e	; 0x734e <__mulsi3>
    26dc:	7b 01       	movw	r14, r22
    26de:	8c 01       	movw	r16, r24
					+ 10000l*(NMEA_sentence[a+5] - '0')
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	9b 81       	ldd	r25, Y+3	; 0x03
    26e4:	05 96       	adiw	r24, 0x05	; 5
    26e6:	2a ad       	ldd	r18, Y+58	; 0x3a
    26e8:	3b ad       	ldd	r19, Y+59	; 0x3b
    26ea:	82 0f       	add	r24, r18
    26ec:	93 1f       	adc	r25, r19
    26ee:	fc 01       	movw	r30, r24
    26f0:	80 81       	ld	r24, Z
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	c0 97       	sbiw	r24, 0x30	; 48
    26f8:	9c 01       	movw	r18, r24
    26fa:	99 0f       	add	r25, r25
    26fc:	44 0b       	sbc	r20, r20
    26fe:	55 0b       	sbc	r21, r21
    2700:	80 e1       	ldi	r24, 0x10	; 16
    2702:	97 e2       	ldi	r25, 0x27	; 39
    2704:	dc 01       	movw	r26, r24
    2706:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <__muluhisi3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	e8 0e       	add	r14, r24
    2710:	f9 1e       	adc	r15, r25
    2712:	0a 1f       	adc	r16, r26
    2714:	1b 1f       	adc	r17, r27
					+ 1000l*(NMEA_sentence[a+7] - '0')
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	9b 81       	ldd	r25, Y+3	; 0x03
    271a:	07 96       	adiw	r24, 0x07	; 7
    271c:	2a ad       	ldd	r18, Y+58	; 0x3a
    271e:	3b ad       	ldd	r19, Y+59	; 0x3b
    2720:	82 0f       	add	r24, r18
    2722:	93 1f       	adc	r25, r19
    2724:	fc 01       	movw	r30, r24
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	c0 97       	sbiw	r24, 0x30	; 48
    272e:	9c 01       	movw	r18, r24
    2730:	99 0f       	add	r25, r25
    2732:	44 0b       	sbc	r20, r20
    2734:	55 0b       	sbc	r21, r21
    2736:	88 ee       	ldi	r24, 0xE8	; 232
    2738:	93 e0       	ldi	r25, 0x03	; 3
    273a:	dc 01       	movw	r26, r24
    273c:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <__muluhisi3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	e8 0e       	add	r14, r24
    2746:	f9 1e       	adc	r15, r25
    2748:	0a 1f       	adc	r16, r26
    274a:	1b 1f       	adc	r17, r27
					+ 100l*(NMEA_sentence[a+8] - '0')
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
    2750:	08 96       	adiw	r24, 0x08	; 8
    2752:	2a ad       	ldd	r18, Y+58	; 0x3a
    2754:	3b ad       	ldd	r19, Y+59	; 0x3b
    2756:	82 0f       	add	r24, r18
    2758:	93 1f       	adc	r25, r19
    275a:	fc 01       	movw	r30, r24
    275c:	80 81       	ld	r24, Z
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	c0 97       	sbiw	r24, 0x30	; 48
    2764:	9c 01       	movw	r18, r24
    2766:	99 0f       	add	r25, r25
    2768:	44 0b       	sbc	r20, r20
    276a:	55 0b       	sbc	r21, r21
    276c:	84 e6       	ldi	r24, 0x64	; 100
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	dc 01       	movw	r26, r24
    2772:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <__muluhisi3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	a8 01       	movw	r20, r16
    277c:	97 01       	movw	r18, r14
    277e:	28 0f       	add	r18, r24
    2780:	39 1f       	adc	r19, r25
    2782:	4a 1f       	adc	r20, r26
    2784:	5b 1f       	adc	r21, r27
					+ 10l*(NMEA_sentence[a+9] - '0')
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	09 96       	adiw	r24, 0x09	; 9
    278c:	6a ad       	ldd	r22, Y+58	; 0x3a
    278e:	7b ad       	ldd	r23, Y+59	; 0x3b
    2790:	86 0f       	add	r24, r22
    2792:	97 1f       	adc	r25, r23
    2794:	fc 01       	movw	r30, r24
    2796:	80 81       	ld	r24, Z
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	c0 97       	sbiw	r24, 0x30	; 48
    279e:	09 2e       	mov	r0, r25
    27a0:	00 0c       	add	r0, r0
    27a2:	aa 0b       	sbc	r26, r26
    27a4:	bb 0b       	sbc	r27, r27
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	aa 1f       	adc	r26, r26
    27ac:	bb 1f       	adc	r27, r27
    27ae:	7c 01       	movw	r14, r24
    27b0:	8d 01       	movw	r16, r26
    27b2:	ee 0c       	add	r14, r14
    27b4:	ff 1c       	adc	r15, r15
    27b6:	00 1f       	adc	r16, r16
    27b8:	11 1f       	adc	r17, r17
    27ba:	ee 0c       	add	r14, r14
    27bc:	ff 1c       	adc	r15, r15
    27be:	00 1f       	adc	r16, r16
    27c0:	11 1f       	adc	r17, r17
    27c2:	8e 0d       	add	r24, r14
    27c4:	9f 1d       	adc	r25, r15
    27c6:	a0 1f       	adc	r26, r16
    27c8:	b1 1f       	adc	r27, r17
    27ca:	28 0f       	add	r18, r24
    27cc:	39 1f       	adc	r19, r25
    27ce:	4a 1f       	adc	r20, r26
    27d0:	5b 1f       	adc	r21, r27
					+ (NMEA_sentence[a+10] - '0');
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	0a 96       	adiw	r24, 0x0a	; 10
    27d8:	6a ad       	ldd	r22, Y+58	; 0x3a
    27da:	7b ad       	ldd	r23, Y+59	; 0x3b
    27dc:	86 0f       	add	r24, r22
    27de:	97 1f       	adc	r25, r23
    27e0:	fc 01       	movw	r30, r24
    27e2:	80 81       	ld	r24, Z
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	c0 97       	sbiw	r24, 0x30	; 48
    27ea:	09 2e       	mov	r0, r25
    27ec:	00 0c       	add	r0, r0
    27ee:	aa 0b       	sbc	r26, r26
    27f0:	bb 0b       	sbc	r27, r27
    27f2:	82 0f       	add	r24, r18
    27f4:	93 1f       	adc	r25, r19
    27f6:	a4 1f       	adc	r26, r20
    27f8:	b5 1f       	adc	r27, r21
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    27fa:	8f a3       	std	Y+39, r24	; 0x27
    27fc:	98 a7       	std	Y+40, r25	; 0x28
    27fe:	a9 a7       	std	Y+41, r26	; 0x29
    2800:	ba a7       	std	Y+42, r27	; 0x2a
					+ 1000l*(NMEA_sentence[a+7] - '0')
					+ 100l*(NMEA_sentence[a+8] - '0')
					+ 10l*(NMEA_sentence[a+9] - '0')
					+ (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	9b 81       	ldd	r25, Y+3	; 0x03
    2806:	0c 96       	adiw	r24, 0x0c	; 12
    2808:	2a ad       	ldd	r18, Y+58	; 0x3a
    280a:	3b ad       	ldd	r19, Y+59	; 0x3b
    280c:	82 0f       	add	r24, r18
    280e:	93 1f       	adc	r25, r19
    2810:	fc 01       	movw	r30, r24
    2812:	80 81       	ld	r24, Z
    2814:	85 34       	cpi	r24, 0x45	; 69
    2816:	49 f4       	brne	.+18     	; 0x282a <getGPSDatafromNMEA+0x5c0>
    2818:	0f 2e       	mov	r0, r31
    281a:	c1 2c       	mov	r12, r1
    281c:	d1 2c       	mov	r13, r1
    281e:	f0 e8       	ldi	r31, 0x80	; 128
    2820:	ef 2e       	mov	r14, r31
    2822:	ff e3       	ldi	r31, 0x3F	; 63
    2824:	ff 2e       	mov	r15, r31
    2826:	f0 2d       	mov	r31, r0
    2828:	08 c0       	rjmp	.+16     	; 0x283a <getGPSDatafromNMEA+0x5d0>
    282a:	0f 2e       	mov	r0, r31
    282c:	c1 2c       	mov	r12, r1
    282e:	d1 2c       	mov	r13, r1
    2830:	f0 e8       	ldi	r31, 0x80	; 128
    2832:	ef 2e       	mov	r14, r31
    2834:	ff eb       	ldi	r31, 0xBF	; 191
    2836:	ff 2e       	mov	r15, r31
    2838:	f0 2d       	mov	r31, r0
    283a:	8d a1       	ldd	r24, Y+37	; 0x25
    283c:	9e a1       	ldd	r25, Y+38	; 0x26
    283e:	cc 01       	movw	r24, r24
    2840:	a0 e0       	ldi	r26, 0x00	; 0
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__floatunsisf>
    284c:	4b 01       	movw	r8, r22
    284e:	5c 01       	movw	r10, r24
    2850:	8f a1       	ldd	r24, Y+39	; 0x27
    2852:	98 a5       	ldd	r25, Y+40	; 0x28
    2854:	a9 a5       	ldd	r26, Y+41	; 0x29
    2856:	ba a5       	ldd	r27, Y+42	; 0x2a
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__floatunsisf>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3c e7       	ldi	r19, 0x7C	; 124
    2868:	42 e1       	ldi	r20, 0x12	; 18
    286a:	59 e4       	ldi	r21, 0x49	; 73
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 17 34 	call	0x682e	; 0x682e <__divsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9c 01       	movw	r18, r24
    287a:	ad 01       	movw	r20, r26
    287c:	c5 01       	movw	r24, r10
    287e:	b4 01       	movw	r22, r8
    2880:	0e 94 b3 33 	call	0x6766	; 0x6766 <__addsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9c 01       	movw	r18, r24
    288a:	ad 01       	movw	r20, r26
    288c:	c7 01       	movw	r24, r14
    288e:	b6 01       	movw	r22, r12
    2890:	0e 94 c1 35 	call	0x6b82	; 0x6b82 <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	8c a7       	std	Y+44, r24	; 0x2c
    289a:	9d a7       	std	Y+45, r25	; 0x2d
    289c:	ae a7       	std	Y+46, r26	; 0x2e
    289e:	bf a7       	std	Y+47, r27	; 0x2f
    28a0:	ca c0       	rjmp	.+404    	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	84 30       	cpi	r24, 0x04	; 4
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <getGPSDatafromNMEA+0x648>
				{
					GPSData.londecimal = 0.0;
    28a8:	1c a6       	std	Y+44, r1	; 0x2c
    28aa:	1d a6       	std	Y+45, r1	; 0x2d
    28ac:	1e a6       	std	Y+46, r1	; 0x2e
    28ae:	1f a6       	std	Y+47, r1	; 0x2f
    28b0:	c2 c0       	rjmp	.+388    	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
				}
				else if (countcommas == 6)
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	86 30       	cpi	r24, 0x06	; 6
    28b6:	61 f4       	brne	.+24     	; 0x28d0 <getGPSDatafromNMEA+0x666>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	9b 81       	ldd	r25, Y+3	; 0x03
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	2a ad       	ldd	r18, Y+58	; 0x3a
    28c0:	3b ad       	ldd	r19, Y+59	; 0x3b
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	fc 01       	movw	r30, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	80 53       	subi	r24, 0x30	; 48
    28cc:	8f ab       	std	Y+55, r24	; 0x37
    28ce:	b3 c0       	rjmp	.+358    	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
				}
				else if (countcommas == 9)
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	89 30       	cpi	r24, 0x09	; 9
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <getGPSDatafromNMEA+0x66e>
    28d6:	af c0       	rjmp	.+350    	; 0x2a36 <getGPSDatafromNMEA+0x7cc>
				{
					uint8_t period_reached = 0;
    28d8:	1c 82       	std	Y+4, r1	; 0x04
					uint8_t period_counter;
					float altitude = 0;
    28da:	1e 82       	std	Y+6, r1	; 0x06
    28dc:	1f 82       	std	Y+7, r1	; 0x07
    28de:	18 86       	std	Y+8, r1	; 0x08
    28e0:	19 86       	std	Y+9, r1	; 0x09
					uint8_t inc = 0;
    28e2:	1a 86       	std	Y+10, r1	; 0x0a
					while (NMEA_sentence[a + inc + 1] != ',')
    28e4:	8f c0       	rjmp	.+286    	; 0x2a04 <getGPSDatafromNMEA+0x79a>
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    28e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	9b 81       	ldd	r25, Y+3	; 0x03
    28f0:	82 0f       	add	r24, r18
    28f2:	93 1f       	adc	r25, r19
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	2a ad       	ldd	r18, Y+58	; 0x3a
    28f8:	3b ad       	ldd	r19, Y+59	; 0x3b
    28fa:	82 0f       	add	r24, r18
    28fc:	93 1f       	adc	r25, r19
    28fe:	fc 01       	movw	r30, r24
    2900:	80 81       	ld	r24, Z
    2902:	8e 32       	cpi	r24, 0x2E	; 46
    2904:	29 f4       	brne	.+10     	; 0x2910 <getGPSDatafromNMEA+0x6a6>
						{
							period_reached = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	8c 83       	std	Y+4, r24	; 0x04
							period_counter = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	77 c0       	rjmp	.+238    	; 0x29fe <getGPSDatafromNMEA+0x794>
						}
						else if (!period_reached)
    2910:	8c 81       	ldd	r24, Y+4	; 0x04
    2912:	88 23       	and	r24, r24
    2914:	d1 f5       	brne	.+116    	; 0x298a <getGPSDatafromNMEA+0x720>
						{
							altitude *= 10;
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	6e 81       	ldd	r22, Y+6	; 0x06
    2920:	7f 81       	ldd	r23, Y+7	; 0x07
    2922:	88 85       	ldd	r24, Y+8	; 0x08
    2924:	99 85       	ldd	r25, Y+9	; 0x09
    2926:	0e 94 c1 35 	call	0x6b82	; 0x6b82 <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	8e 83       	std	Y+6, r24	; 0x06
    2930:	9f 83       	std	Y+7, r25	; 0x07
    2932:	a8 87       	std	Y+8, r26	; 0x08
    2934:	b9 87       	std	Y+9, r27	; 0x09
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    2936:	8a 85       	ldd	r24, Y+10	; 0x0a
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	2a ad       	ldd	r18, Y+58	; 0x3a
    2948:	3b ad       	ldd	r19, Y+59	; 0x3b
    294a:	82 0f       	add	r24, r18
    294c:	93 1f       	adc	r25, r19
    294e:	fc 01       	movw	r30, r24
    2950:	80 81       	ld	r24, Z
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	c0 97       	sbiw	r24, 0x30	; 48
    2958:	09 2e       	mov	r0, r25
    295a:	00 0c       	add	r0, r0
    295c:	aa 0b       	sbc	r26, r26
    295e:	bb 0b       	sbc	r27, r27
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__floatsisf>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	9c 01       	movw	r18, r24
    296e:	ad 01       	movw	r20, r26
    2970:	6e 81       	ldd	r22, Y+6	; 0x06
    2972:	7f 81       	ldd	r23, Y+7	; 0x07
    2974:	88 85       	ldd	r24, Y+8	; 0x08
    2976:	99 85       	ldd	r25, Y+9	; 0x09
    2978:	0e 94 b3 33 	call	0x6766	; 0x6766 <__addsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8e 83       	std	Y+6, r24	; 0x06
    2982:	9f 83       	std	Y+7, r25	; 0x07
    2984:	a8 87       	std	Y+8, r26	; 0x08
    2986:	b9 87       	std	Y+9, r27	; 0x09
    2988:	3a c0       	rjmp	.+116    	; 0x29fe <getGPSDatafromNMEA+0x794>
						}
						else if (period_reached && period_counter == 1)
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	88 23       	and	r24, r24
    298e:	b9 f1       	breq	.+110    	; 0x29fe <getGPSDatafromNMEA+0x794>
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	a1 f5       	brne	.+104    	; 0x29fe <getGPSDatafromNMEA+0x794>
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    2996:	8a 85       	ldd	r24, Y+10	; 0x0a
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	2a ad       	ldd	r18, Y+58	; 0x3a
    29a8:	3b ad       	ldd	r19, Y+59	; 0x3b
    29aa:	82 0f       	add	r24, r18
    29ac:	93 1f       	adc	r25, r19
    29ae:	fc 01       	movw	r30, r24
    29b0:	80 81       	ld	r24, Z
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	c0 97       	sbiw	r24, 0x30	; 48
    29b8:	09 2e       	mov	r0, r25
    29ba:	00 0c       	add	r0, r0
    29bc:	aa 0b       	sbc	r26, r26
    29be:	bb 0b       	sbc	r27, r27
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__floatsisf>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 17 34 	call	0x682e	; 0x682e <__divsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9c 01       	movw	r18, r24
    29e2:	ad 01       	movw	r20, r26
    29e4:	6e 81       	ldd	r22, Y+6	; 0x06
    29e6:	7f 81       	ldd	r23, Y+7	; 0x07
    29e8:	88 85       	ldd	r24, Y+8	; 0x08
    29ea:	99 85       	ldd	r25, Y+9	; 0x09
    29ec:	0e 94 b3 33 	call	0x6766	; 0x6766 <__addsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8e 83       	std	Y+6, r24	; 0x06
    29f6:	9f 83       	std	Y+7, r25	; 0x07
    29f8:	a8 87       	std	Y+8, r26	; 0x08
    29fa:	b9 87       	std	Y+9, r27	; 0x09
							break;
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <getGPSDatafromNMEA+0x7bc>
						}
						
						inc++;
    29fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	8a 87       	std	Y+10, r24	; 0x0a
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    2a04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0e:	82 0f       	add	r24, r18
    2a10:	93 1f       	adc	r25, r19
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	2a ad       	ldd	r18, Y+58	; 0x3a
    2a16:	3b ad       	ldd	r19, Y+59	; 0x3b
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	80 81       	ld	r24, Z
    2a20:	8c 32       	cpi	r24, 0x2C	; 44
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <getGPSDatafromNMEA+0x7bc>
    2a24:	60 cf       	rjmp	.-320    	; 0x28e6 <getGPSDatafromNMEA+0x67c>
							break;
						}
						
						inc++;
					}
					GPSData.altitude = altitude;
    2a26:	8e 81       	ldd	r24, Y+6	; 0x06
    2a28:	9f 81       	ldd	r25, Y+7	; 0x07
    2a2a:	a8 85       	ldd	r26, Y+8	; 0x08
    2a2c:	b9 85       	ldd	r27, Y+9	; 0x09
    2a2e:	88 ab       	std	Y+48, r24	; 0x30
    2a30:	99 ab       	std	Y+49, r25	; 0x31
    2a32:	aa ab       	std	Y+50, r26	; 0x32
    2a34:	bb ab       	std	Y+51, r27	; 0x33
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
    2a3e:	9b 83       	std	Y+3, r25	; 0x03
    2a40:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	82 17       	cp	r24, r18
    2a4c:	93 07       	cpc	r25, r19
    2a4e:	0c f4       	brge	.+2      	; 0x2a52 <getGPSDatafromNMEA+0x7e8>
    2a50:	3f cc       	rjmp	.-1922   	; 0x22d0 <getGPSDatafromNMEA+0x66>
	
	
	
	//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
	//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
	return GPSData;
    2a52:	88 ad       	ldd	r24, Y+56	; 0x38
    2a54:	99 ad       	ldd	r25, Y+57	; 0x39
    2a56:	2e e1       	ldi	r18, 0x1E	; 30
    2a58:	fe 01       	movw	r30, r28
    2a5a:	7a 96       	adiw	r30, 0x1a	; 26
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	01 90       	ld	r0, Z+
    2a60:	0d 92       	st	X+, r0
    2a62:	2a 95       	dec	r18
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <getGPSDatafromNMEA+0x7f4>


}
    2a66:	88 ad       	ldd	r24, Y+56	; 0x38
    2a68:	99 ad       	ldd	r25, Y+57	; 0x39
    2a6a:	ec 96       	adiw	r28, 0x3c	; 60
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	9f 90       	pop	r9
    2a86:	8f 90       	pop	r8
    2a88:	08 95       	ret

00002a8a <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	1f 92       	push	r1
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    2a94:	8f e3       	ldi	r24, 0x3F	; 63
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	fc 01       	movw	r30, r24
    2a9a:	80 81       	ld	r24, Z
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2a9e:	f8 94       	cli
	return flags;
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa2:	0f 90       	pop	r0
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	1f 92       	push	r1
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    2ab6:	8f e3       	ldi	r24, 0x3F	; 63
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	29 81       	ldd	r18, Y+1	; 0x01
    2abc:	fc 01       	movw	r30, r24
    2abe:	20 83       	st	Z, r18
}
    2ac0:	00 00       	nop
    2ac2:	0f 90       	pop	r0
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	08 95       	ret

00002aca <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	1f 92       	push	r1
    2ad0:	1f 92       	push	r1
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    2ad8:	d8 df       	rcall	.-80     	; 0x2a8a <cpu_irq_save>
    2ada:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    2adc:	80 e5       	ldi	r24, 0x50	; 80
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	20 e5       	ldi	r18, 0x50	; 80
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	f9 01       	movw	r30, r18
    2ae6:	30 81       	ld	r19, Z
    2ae8:	2a 81       	ldd	r18, Y+2	; 0x02
    2aea:	23 2b       	or	r18, r19
    2aec:	fc 01       	movw	r30, r24
    2aee:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	db df       	rcall	.-74     	; 0x2aaa <cpu_irq_restore>
}
    2af4:	00 00       	nop
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	08 95       	ret

00002b00 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	1f 92       	push	r1
    2b06:	1f 92       	push	r1
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    2b0e:	80 e5       	ldi	r24, 0x50	; 80
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	22 e0       	ldi	r18, 0x02	; 2
    2b14:	fc 01       	movw	r30, r24
    2b16:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    2b18:	b8 df       	rcall	.-144    	; 0x2a8a <cpu_irq_save>
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    2b1c:	80 e5       	ldi	r24, 0x50	; 80
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	20 e5       	ldi	r18, 0x50	; 80
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	f9 01       	movw	r30, r18
    2b26:	30 81       	ld	r19, Z
    2b28:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2a:	23 2b       	or	r18, r19
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	bb df       	rcall	.-138    	; 0x2aaa <cpu_irq_restore>
}
    2b34:	00 00       	nop
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	08 95       	ret

00002b40 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	1f 92       	push	r1
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    2b4e:	9d df       	rcall	.-198    	; 0x2a8a <cpu_irq_save>
    2b50:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    2b52:	80 e5       	ldi	r24, 0x50	; 80
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	20 e5       	ldi	r18, 0x50	; 80
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	f9 01       	movw	r30, r18
    2b5c:	20 81       	ld	r18, Z
    2b5e:	32 2f       	mov	r19, r18
    2b60:	2a 81       	ldd	r18, Y+2	; 0x02
    2b62:	20 95       	com	r18
    2b64:	23 23       	and	r18, r19
    2b66:	fc 01       	movw	r30, r24
    2b68:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9e df       	rcall	.-196    	; 0x2aaa <cpu_irq_restore>
}
    2b6e:	00 00       	nop
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	1f 92       	push	r1
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	88 30       	cpi	r24, 0x08	; 8
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <osc_enable+0x18>
		osc_enable_internal(id);
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9d df       	rcall	.-198    	; 0x2aca <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	b5 df       	rcall	.-150    	; 0x2b00 <osc_enable_external>
	}
}
    2b96:	00 00       	nop
    2b98:	0f 90       	pop	r0
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	08 95       	ret

00002ba0 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	1f 92       	push	r1
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2bac:	80 e5       	ldi	r24, 0x50	; 80
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	98 23       	and	r25, r24
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	99 23       	and	r25, r25
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <osc_is_ready+0x20>
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
}
    2bc0:	0f 90       	pop	r0
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	1f 92       	push	r1
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    2bd4:	00 00       	nop
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	e3 df       	rcall	.-58     	; 0x2ba0 <osc_is_ready>
    2bda:	98 2f       	mov	r25, r24
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	89 27       	eor	r24, r25
    2be0:	88 23       	and	r24, r24
    2be2:	c9 f7       	brne	.-14     	; 0x2bd6 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    2be4:	00 00       	nop
    2be6:	0f 90       	pop	r0
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret

00002bee <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	1f 92       	push	r1
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	8a 30       	cpi	r24, 0x0A	; 10
    2c02:	91 05       	cpc	r25, r1
    2c04:	a1 f0       	breq	.+40     	; 0x2c2e <sysclk_rtcsrc_enable+0x40>
    2c06:	8b 30       	cpi	r24, 0x0B	; 11
    2c08:	91 05       	cpc	r25, r1
    2c0a:	34 f4       	brge	.+12     	; 0x2c18 <sysclk_rtcsrc_enable+0x2a>
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	91 05       	cpc	r25, r1
    2c10:	71 f0       	breq	.+28     	; 0x2c2e <sysclk_rtcsrc_enable+0x40>
    2c12:	04 97       	sbiw	r24, 0x04	; 4
    2c14:	39 f0       	breq	.+14     	; 0x2c24 <sysclk_rtcsrc_enable+0x36>
    2c16:	10 c0       	rjmp	.+32     	; 0x2c38 <sysclk_rtcsrc_enable+0x4a>
    2c18:	8c 30       	cpi	r24, 0x0C	; 12
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	19 f0       	breq	.+6      	; 0x2c24 <sysclk_rtcsrc_enable+0x36>
    2c1e:	0e 97       	sbiw	r24, 0x0e	; 14
    2c20:	31 f0       	breq	.+12     	; 0x2c2e <sysclk_rtcsrc_enable+0x40>
    2c22:	0a c0       	rjmp	.+20     	; 0x2c38 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    2c24:	84 e0       	ldi	r24, 0x04	; 4
    2c26:	a9 df       	rcall	.-174    	; 0x2b7a <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    2c28:	84 e0       	ldi	r24, 0x04	; 4
    2c2a:	ce df       	rcall	.-100    	; 0x2bc8 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    2c2c:	05 c0       	rjmp	.+10     	; 0x2c38 <sysclk_rtcsrc_enable+0x4a>
    2c2e:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    2c30:	a4 df       	rcall	.-184    	; 0x2b7a <osc_enable>
    2c32:	88 e0       	ldi	r24, 0x08	; 8
    2c34:	c9 df       	rcall	.-110    	; 0x2bc8 <osc_wait_ready>
		break;
    2c36:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    2c38:	80 e4       	ldi	r24, 0x40	; 64
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	29 81       	ldd	r18, Y+1	; 0x01
    2c3e:	21 60       	ori	r18, 0x01	; 1
    2c40:	fc 01       	movw	r30, r24
    2c42:	23 83       	std	Z+3, r18	; 0x03
}
    2c44:	00 00       	nop
    2c46:	0f 90       	pop	r0
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	08 95       	ret

00002c4e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <sysclk_init+0x6>
    2c54:	1f 92       	push	r1
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    2c5a:	80 e7       	ldi	r24, 0x70	; 112
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    2c62:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    2c64:	1b 82       	std	Y+3, r1	; 0x03
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <sysclk_init+0x34>
		*(reg++) = 0xff;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	29 83       	std	Y+1, r18	; 0x01
    2c74:	3a 83       	std	Y+2, r19	; 0x02
    2c76:	2f ef       	ldi	r18, 0xFF	; 255
    2c78:	fc 01       	movw	r30, r24
    2c7a:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	8b 83       	std	Y+3, r24	; 0x03
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	87 30       	cpi	r24, 0x07	; 7
    2c86:	80 f3       	brcs	.-32     	; 0x2c68 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	77 df       	rcall	.-274    	; 0x2b7a <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	9c df       	rcall	.-200    	; 0x2bc8 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    2c90:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2c92:	61 e0       	ldi	r22, 0x01	; 1
    2c94:	80 e4       	ldi	r24, 0x40	; 64
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	70 d0       	rcall	.+224    	; 0x2d7a <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    2c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9c:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <sysclk_init+0x56>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    2ca2:	4e df       	rcall	.-356    	; 0x2b40 <osc_disable>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	a3 df       	rcall	.-186    	; 0x2bee <sysclk_rtcsrc_enable>
#endif
}
    2ca8:	24 96       	adiw	r28, 0x04	; 4
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

00002cb4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <sysclk_enable_module+0x6>
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	8a 83       	std	Y+2, r24	; 0x02
    2cc0:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    2cc2:	e3 de       	rcall	.-570    	; 0x2a8a <cpu_irq_save>
    2cc4:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	80 59       	subi	r24, 0x90	; 144
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd2:	22 2f       	mov	r18, r18
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	20 59       	subi	r18, 0x90	; 144
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	f9 01       	movw	r30, r18
    2cdc:	20 81       	ld	r18, Z
    2cde:	32 2f       	mov	r19, r18
    2ce0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce2:	20 95       	com	r18
    2ce4:	23 23       	and	r18, r19
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	de de       	rcall	.-580    	; 0x2aaa <cpu_irq_restore>
}
    2cee:	00 00       	nop
    2cf0:	23 96       	adiw	r28, 0x03	; 3
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	08 95       	ret

00002cfc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <_read+0x6>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    2d0a:	20 91 6d 26 	lds	r18, 0x266D	; 0x80266d <ptr_get>
    2d0e:	30 91 6e 26 	lds	r19, 0x266E	; 0x80266e <ptr_get+0x1>
    2d12:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <stdio_base>
    2d16:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <stdio_base+0x1>
    2d1a:	ae 01       	movw	r20, r28
    2d1c:	4f 5f       	subi	r20, 0xFF	; 255
    2d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d20:	ba 01       	movw	r22, r20
    2d22:	f9 01       	movw	r30, r18
    2d24:	19 95       	eicall
	return c;
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	08 2e       	mov	r0, r24
    2d2a:	00 0c       	add	r0, r0
    2d2c:	99 0b       	sbc	r25, r25
}
    2d2e:	23 96       	adiw	r28, 0x03	; 3
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	08 95       	ret

00002d3a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <_write+0x6>
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	6a 83       	std	Y+2, r22	; 0x02
    2d48:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    2d4a:	20 91 6f 26 	lds	r18, 0x266F	; 0x80266f <ptr_put>
    2d4e:	30 91 70 26 	lds	r19, 0x2670	; 0x802670 <ptr_put+0x1>
    2d52:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <stdio_base>
    2d56:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <stdio_base+0x1>
    2d5a:	69 81       	ldd	r22, Y+1	; 0x01
    2d5c:	f9 01       	movw	r30, r18
    2d5e:	19 95       	eicall
    2d60:	99 23       	and	r25, r25
    2d62:	1c f4       	brge	.+6      	; 0x2d6a <_write+0x30>
		return -1;
    2d64:	8f ef       	ldi	r24, 0xFF	; 255
    2d66:	9f ef       	ldi	r25, 0xFF	; 255
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <_write+0x34>
	}
	return 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
}
    2d6e:	23 96       	adiw	r28, 0x03	; 3
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	08 95       	ret

00002d7a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2d7a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2d7c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2d7e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2d80:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2d82:	60 83       	st	Z, r22
	ret                             // Return to caller
    2d84:	08 95       	ret

00002d86 <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	1f 92       	push	r1
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	8f e3       	ldi	r24, 0x3F	; 63
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	fc 01       	movw	r30, r24
    2d96:	80 81       	ld	r24, Z
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	f8 94       	cli
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	0f 90       	pop	r0
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	08 95       	ret

00002da6 <cpu_irq_restore>:
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	1f 92       	push	r1
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	8f e3       	ldi	r24, 0x3F	; 63
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	29 81       	ldd	r18, Y+1	; 0x01
    2db8:	fc 01       	movw	r30, r24
    2dba:	20 83       	st	Z, r18
    2dbc:	00 00       	nop
    2dbe:	0f 90       	pop	r0
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	08 95       	ret

00002dc6 <sleepmgr_lock_mode>:
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	1f 92       	push	r1
    2dcc:	1f 92       	push	r1
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	89 59       	subi	r24, 0x99	; 153
    2ddc:	99 4d       	sbci	r25, 0xD9	; 217
    2dde:	fc 01       	movw	r30, r24
    2de0:	80 81       	ld	r24, Z
    2de2:	8f 3f       	cpi	r24, 0xFF	; 255
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <sleepmgr_lock_mode+0x22>
    2de6:	ff cf       	rjmp	.-2      	; 0x2de6 <sleepmgr_lock_mode+0x20>
    2de8:	ce df       	rcall	.-100    	; 0x2d86 <cpu_irq_save>
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	88 2f       	mov	r24, r24
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9c 01       	movw	r18, r24
    2df4:	29 59       	subi	r18, 0x99	; 153
    2df6:	39 4d       	sbci	r19, 0xD9	; 217
    2df8:	f9 01       	movw	r30, r18
    2dfa:	20 81       	ld	r18, Z
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	89 59       	subi	r24, 0x99	; 153
    2e00:	99 4d       	sbci	r25, 0xD9	; 217
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 83       	st	Z, r18
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	ce df       	rcall	.-100    	; 0x2da6 <cpu_irq_restore>
    2e0a:	00 00       	nop
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	08 95       	ret

00002e16 <rtc_get_time>:
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	25 97       	sbiw	r28, 0x05	; 5
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	00 00       	nop
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	94 e0       	ldi	r25, 0x04	; 4
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	81 81       	ldd	r24, Z+1	; 0x01
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	81 70       	andi	r24, 0x01	; 1
    2e34:	99 27       	eor	r25, r25
    2e36:	21 e0       	ldi	r18, 0x01	; 1
    2e38:	89 2b       	or	r24, r25
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <rtc_get_time+0x28>
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	22 23       	and	r18, r18
    2e40:	91 f7       	brne	.-28     	; 0x2e26 <rtc_get_time+0x10>
    2e42:	a1 df       	rcall	.-190    	; 0x2d86 <cpu_irq_save>
    2e44:	8b 83       	std	Y+3, r24	; 0x03
    2e46:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <rtc_data>
    2e4a:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <rtc_data+0x1>
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	94 e0       	ldi	r25, 0x04	; 4
    2e56:	fc 01       	movw	r30, r24
    2e58:	80 85       	ldd	r24, Z+8	; 0x08
    2e5a:	91 85       	ldd	r25, Z+9	; 0x09
    2e5c:	8c 83       	std	Y+4, r24	; 0x04
    2e5e:	9d 83       	std	Y+5, r25	; 0x05
    2e60:	8c 81       	ldd	r24, Y+4	; 0x04
    2e62:	9d 81       	ldd	r25, Y+5	; 0x05
    2e64:	89 2b       	or	r24, r25
    2e66:	79 f4       	brne	.+30     	; 0x2e86 <rtc_get_time+0x70>
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	94 e0       	ldi	r25, 0x04	; 4
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	83 81       	ldd	r24, Z+3	; 0x03
    2e70:	88 2f       	mov	r24, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	81 70       	andi	r24, 0x01	; 1
    2e76:	99 27       	eor	r25, r25
    2e78:	89 2b       	or	r24, r25
    2e7a:	29 f0       	breq	.+10     	; 0x2e86 <rtc_get_time+0x70>
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	8e df       	rcall	.-228    	; 0x2da6 <cpu_irq_restore>
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8e:	cc 01       	movw	r24, r24
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	ac 01       	movw	r20, r24
    2e96:	33 27       	eor	r19, r19
    2e98:	22 27       	eor	r18, r18
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	cc 01       	movw	r24, r24
    2ea0:	a0 e0       	ldi	r26, 0x00	; 0
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	82 2b       	or	r24, r18
    2ea6:	93 2b       	or	r25, r19
    2ea8:	a4 2b       	or	r26, r20
    2eaa:	b5 2b       	or	r27, r21
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	25 96       	adiw	r28, 0x05	; 5
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2ec4:	64 e0       	ldi	r22, 0x04	; 4
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	f5 de       	rcall	.-534    	; 0x2cb4 <sysclk_enable_module>
	RTC.PER = 0xffff;
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	94 e0       	ldi	r25, 0x04	; 4
    2ece:	2f ef       	ldi	r18, 0xFF	; 255
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	22 87       	std	Z+10, r18	; 0x0a
    2ed6:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	94 e0       	ldi	r25, 0x04	; 4
    2edc:	fc 01       	movw	r30, r24
    2ede:	10 86       	std	Z+8, r1	; 0x08
    2ee0:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	70 df       	rcall	.-288    	; 0x2dc6 <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	94 e0       	ldi	r25, 0x04	; 4
    2eea:	21 e0       	ldi	r18, 0x01	; 1
    2eec:	fc 01       	movw	r30, r24
    2eee:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	94 e0       	ldi	r25, 0x04	; 4
    2ef4:	25 e0       	ldi	r18, 0x05	; 5
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 83       	st	Z, r18
}
    2efa:	00 00       	nop
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    2f02:	1f 92       	push	r1
    2f04:	0f 92       	push	r0
    2f06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f12:	0f 92       	push	r0
    2f14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f1c:	0f 92       	push	r0
    2f1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    2f2e:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <rtc_data>
    2f32:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <rtc_data+0x1>
    2f36:	01 96       	adiw	r24, 0x01	; 1
    2f38:	80 93 73 26 	sts	0x2673, r24	; 0x802673 <rtc_data>
    2f3c:	90 93 74 26 	sts	0x2674, r25	; 0x802674 <rtc_data+0x1>
}
    2f40:	00 00       	nop
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	0f 90       	pop	r0
    2f4c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f50:	0f 90       	pop	r0
    2f52:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f56:	0f 90       	pop	r0
    2f58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f5c:	0f 90       	pop	r0
    2f5e:	1f 90       	pop	r1
    2f60:	18 95       	reti

00002f62 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    2f62:	1f 92       	push	r1
    2f64:	0f 92       	push	r0
    2f66:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f6a:	0f 92       	push	r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f72:	0f 92       	push	r0
    2f74:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f78:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f7c:	0f 92       	push	r0
    2f7e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f82:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f86:	0f 92       	push	r0
    2f88:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f8c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f90:	0f 92       	push	r0
    2f92:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f96:	2f 93       	push	r18
    2f98:	3f 93       	push	r19
    2f9a:	4f 93       	push	r20
    2f9c:	5f 93       	push	r21
    2f9e:	6f 93       	push	r22
    2fa0:	7f 93       	push	r23
    2fa2:	8f 93       	push	r24
    2fa4:	9f 93       	push	r25
    2fa6:	af 93       	push	r26
    2fa8:	bf 93       	push	r27
    2faa:	ef 93       	push	r30
    2fac:	ff 93       	push	r31
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	28 97       	sbiw	r28, 0x08	; 8
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    2fbc:	20 91 73 26 	lds	r18, 0x2673	; 0x802673 <rtc_data>
    2fc0:	30 91 74 26 	lds	r19, 0x2674	; 0x802674 <rtc_data+0x1>
    2fc4:	80 91 75 26 	lds	r24, 0x2675	; 0x802675 <rtc_data+0x2>
    2fc8:	90 91 76 26 	lds	r25, 0x2676	; 0x802676 <rtc_data+0x3>
    2fcc:	28 17       	cp	r18, r24
    2fce:	39 07       	cpc	r19, r25
    2fd0:	08 f4       	brcc	.+2      	; 0x2fd4 <__vector_11+0x72>
    2fd2:	63 c0       	rjmp	.+198    	; 0x309a <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	94 e0       	ldi	r25, 0x04	; 4
    2fd8:	21 e0       	ldi	r18, 0x01	; 1
    2fda:	fc 01       	movw	r30, r24
    2fdc:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    2fde:	80 91 79 26 	lds	r24, 0x2679	; 0x802679 <rtc_data+0x6>
    2fe2:	90 91 7a 26 	lds	r25, 0x267A	; 0x80267a <rtc_data+0x7>
    2fe6:	89 2b       	or	r24, r25
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <__vector_11+0x8a>
    2fea:	57 c0       	rjmp	.+174    	; 0x309a <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2fec:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <rtc_data>
    2ff0:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <rtc_data+0x1>
    2ff4:	cc 01       	movw	r24, r24
    2ff6:	a0 e0       	ldi	r26, 0x00	; 0
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	ac 01       	movw	r20, r24
    2ffc:	33 27       	eor	r19, r19
    2ffe:	22 27       	eor	r18, r18
					| RTC.CNT;
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	94 e0       	ldi	r25, 0x04	; 4
    3004:	fc 01       	movw	r30, r24
    3006:	80 85       	ldd	r24, Z+8	; 0x08
    3008:	91 85       	ldd	r25, Z+9	; 0x09
    300a:	cc 01       	movw	r24, r24
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    3010:	82 2b       	or	r24, r18
    3012:	93 2b       	or	r25, r19
    3014:	a4 2b       	or	r26, r20
    3016:	b5 2b       	or	r27, r21
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	ab 83       	std	Y+3, r26	; 0x03
    301e:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    3020:	80 91 75 26 	lds	r24, 0x2675	; 0x802675 <rtc_data+0x2>
    3024:	90 91 76 26 	lds	r25, 0x2676	; 0x802676 <rtc_data+0x3>
    3028:	cc 01       	movw	r24, r24
    302a:	a0 e0       	ldi	r26, 0x00	; 0
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	ac 01       	movw	r20, r24
    3030:	33 27       	eor	r19, r19
    3032:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    3034:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <rtc_data+0x4>
    3038:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <rtc_data+0x5>
    303c:	cc 01       	movw	r24, r24
    303e:	a0 e0       	ldi	r26, 0x00	; 0
    3040:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    3042:	82 2b       	or	r24, r18
    3044:	93 2b       	or	r25, r19
    3046:	a4 2b       	or	r26, r20
    3048:	b5 2b       	or	r27, r21
    304a:	8d 83       	std	Y+5, r24	; 0x05
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	af 83       	std	Y+7, r26	; 0x07
    3050:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    3052:	2d 81       	ldd	r18, Y+5	; 0x05
    3054:	3e 81       	ldd	r19, Y+6	; 0x06
    3056:	4f 81       	ldd	r20, Y+7	; 0x07
    3058:	58 85       	ldd	r21, Y+8	; 0x08
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	ab 81       	ldd	r26, Y+3	; 0x03
    3060:	bc 81       	ldd	r27, Y+4	; 0x04
    3062:	28 17       	cp	r18, r24
    3064:	39 07       	cpc	r19, r25
    3066:	4a 07       	cpc	r20, r26
    3068:	5b 07       	cpc	r21, r27
    306a:	58 f0       	brcs	.+22     	; 0x3082 <__vector_11+0x120>
				count = alarm + 1;
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	af 81       	ldd	r26, Y+7	; 0x07
    3072:	b8 85       	ldd	r27, Y+8	; 0x08
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	a1 1d       	adc	r26, r1
    3078:	b1 1d       	adc	r27, r1
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	ab 83       	std	Y+3, r26	; 0x03
    3080:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    3082:	20 91 79 26 	lds	r18, 0x2679	; 0x802679 <rtc_data+0x6>
    3086:	30 91 7a 26 	lds	r19, 0x267A	; 0x80267a <rtc_data+0x7>
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	9a 81       	ldd	r25, Y+2	; 0x02
    308e:	ab 81       	ldd	r26, Y+3	; 0x03
    3090:	bc 81       	ldd	r27, Y+4	; 0x04
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	f9 01       	movw	r30, r18
    3098:	19 95       	eicall
		}
	}
}
    309a:	00 00       	nop
    309c:	28 96       	adiw	r28, 0x08	; 8
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	ff 91       	pop	r31
    30a8:	ef 91       	pop	r30
    30aa:	bf 91       	pop	r27
    30ac:	af 91       	pop	r26
    30ae:	9f 91       	pop	r25
    30b0:	8f 91       	pop	r24
    30b2:	7f 91       	pop	r23
    30b4:	6f 91       	pop	r22
    30b6:	5f 91       	pop	r21
    30b8:	4f 91       	pop	r20
    30ba:	3f 91       	pop	r19
    30bc:	2f 91       	pop	r18
    30be:	0f 90       	pop	r0
    30c0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    30c4:	0f 90       	pop	r0
    30c6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    30ca:	0f 90       	pop	r0
    30cc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    30d0:	0f 90       	pop	r0
    30d2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    30d6:	0f 90       	pop	r0
    30d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    30dc:	0f 90       	pop	r0
    30de:	1f 90       	pop	r1
    30e0:	18 95       	reti

000030e2 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	60 97       	sbiw	r28, 0x10	; 16
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	8f 83       	std	Y+7, r24	; 0x07
    30f6:	98 87       	std	Y+8, r25	; 0x08
    30f8:	49 87       	std	Y+9, r20	; 0x09
    30fa:	5a 87       	std	Y+10, r21	; 0x0a
    30fc:	6b 87       	std	Y+11, r22	; 0x0b
    30fe:	7c 87       	std	Y+12, r23	; 0x0c
    3100:	0d 87       	std	Y+13, r16	; 0x0d
    3102:	1e 87       	std	Y+14, r17	; 0x0e
    3104:	2f 87       	std	Y+15, r18	; 0x0f
    3106:	38 8b       	std	Y+16, r19	; 0x10

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    3108:	2d 85       	ldd	r18, Y+13	; 0x0d
    310a:	3e 85       	ldd	r19, Y+14	; 0x0e
    310c:	4f 85       	ldd	r20, Y+15	; 0x0f
    310e:	58 89       	ldd	r21, Y+16	; 0x10
    3110:	89 85       	ldd	r24, Y+9	; 0x09
    3112:	9a 85       	ldd	r25, Y+10	; 0x0a
    3114:	ab 85       	ldd	r26, Y+11	; 0x0b
    3116:	bc 85       	ldd	r27, Y+12	; 0x0c
    3118:	82 0f       	add	r24, r18
    311a:	93 1f       	adc	r25, r19
    311c:	a4 1f       	adc	r26, r20
    311e:	b5 1f       	adc	r27, r21
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	a1 09       	sbc	r26, r1
    3124:	b1 09       	sbc	r27, r1
    3126:	29 85       	ldd	r18, Y+9	; 0x09
    3128:	3a 85       	ldd	r19, Y+10	; 0x0a
    312a:	4b 85       	ldd	r20, Y+11	; 0x0b
    312c:	5c 85       	ldd	r21, Y+12	; 0x0c
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	0e 94 ca 39 	call	0x7394	; 0x7394 <__udivmodsi4>
    3136:	da 01       	movw	r26, r20
    3138:	c9 01       	movw	r24, r18
    313a:	8a 83       	std	Y+2, r24	; 0x02
    313c:	9b 83       	std	Y+3, r25	; 0x03
    313e:	ac 83       	std	Y+4, r26	; 0x04
    3140:	bd 83       	std	Y+5, r27	; 0x05

	if (divisor > 128) {
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	9b 81       	ldd	r25, Y+3	; 0x03
    3146:	ac 81       	ldd	r26, Y+4	; 0x04
    3148:	bd 81       	ldd	r27, Y+5	; 0x05
    314a:	81 38       	cpi	r24, 0x81	; 129
    314c:	91 05       	cpc	r25, r1
    314e:	a1 05       	cpc	r26, r1
    3150:	b1 05       	cpc	r27, r1
    3152:	10 f0       	brcs	.+4      	; 0x3158 <spi_xmega_set_baud_div+0x76>
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    3154:	8f ef       	ldi	r24, 0xFF	; 255
    3156:	35 c0       	rjmp	.+106    	; 0x31c2 <spi_xmega_set_baud_div+0xe0>

	/*
	 * We now know that the divisor is 128 or lower so move it into a 8-bit
	 * variable to make sure the following comparison is more optimized.
	 */
	divisor_8bit = divisor;
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    315c:	8e 81       	ldd	r24, Y+6	; 0x06
    315e:	81 34       	cpi	r24, 0x41	; 65
    3160:	18 f0       	brcs	.+6      	; 0x3168 <spi_xmega_set_baud_div+0x86>
		ctrl = SPI_PRESCALER_DIV128_gc;
    3162:	83 e0       	ldi	r24, 0x03	; 3
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	1f c0       	rjmp	.+62     	; 0x31a6 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 32) {
    3168:	8e 81       	ldd	r24, Y+6	; 0x06
    316a:	81 32       	cpi	r24, 0x21	; 33
    316c:	18 f0       	brcs	.+6      	; 0x3174 <spi_xmega_set_baud_div+0x92>
		ctrl = SPI_PRESCALER_DIV64_gc;
    316e:	82 e0       	ldi	r24, 0x02	; 2
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	19 c0       	rjmp	.+50     	; 0x31a6 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 16) {
    3174:	8e 81       	ldd	r24, Y+6	; 0x06
    3176:	81 31       	cpi	r24, 0x11	; 17
    3178:	18 f0       	brcs	.+6      	; 0x3180 <spi_xmega_set_baud_div+0x9e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    317a:	82 e8       	ldi	r24, 0x82	; 130
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	13 c0       	rjmp	.+38     	; 0x31a6 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 8) {
    3180:	8e 81       	ldd	r24, Y+6	; 0x06
    3182:	89 30       	cpi	r24, 0x09	; 9
    3184:	18 f0       	brcs	.+6      	; 0x318c <spi_xmega_set_baud_div+0xaa>
		ctrl = SPI_PRESCALER_DIV16_gc;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 4) {
    318c:	8e 81       	ldd	r24, Y+6	; 0x06
    318e:	85 30       	cpi	r24, 0x05	; 5
    3190:	18 f0       	brcs	.+6      	; 0x3198 <spi_xmega_set_baud_div+0xb6>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    3192:	81 e8       	ldi	r24, 0x81	; 129
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 2) {
    3198:	8e 81       	ldd	r24, Y+6	; 0x06
    319a:	83 30       	cpi	r24, 0x03	; 3
    319c:	10 f0       	brcs	.+4      	; 0x31a2 <spi_xmega_set_baud_div+0xc0>
		ctrl = SPI_PRESCALER_DIV4_gc;
    319e:	19 82       	std	Y+1, r1	; 0x01
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <spi_xmega_set_baud_div+0xc4>
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    31a2:	80 e8       	ldi	r24, 0x80	; 128
    31a4:	89 83       	std	Y+1, r24	; 0x01
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    31a6:	8f 81       	ldd	r24, Y+7	; 0x07
    31a8:	98 85       	ldd	r25, Y+8	; 0x08
    31aa:	fc 01       	movw	r30, r24
    31ac:	80 81       	ld	r24, Z
    31ae:	98 2f       	mov	r25, r24
    31b0:	9c 77       	andi	r25, 0x7C	; 124
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	89 2b       	or	r24, r25
    31b6:	28 2f       	mov	r18, r24
    31b8:	8f 81       	ldd	r24, Y+7	; 0x07
    31ba:	98 85       	ldd	r25, Y+8	; 0x08
    31bc:	fc 01       	movw	r30, r24
    31be:	20 83       	st	Z, r18

	return 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
}
    31c2:	60 96       	adiw	r28, 0x10	; 16
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	08 95       	ret

000031d2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    31d2:	1f 92       	push	r1
    31d4:	0f 92       	push	r0
    31d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31da:	0f 92       	push	r0
    31dc:	11 24       	eor	r1, r1
    31de:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31e2:	0f 92       	push	r0
    31e4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31e8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31ec:	0f 92       	push	r0
    31ee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    31f2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31f6:	0f 92       	push	r0
    31f8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31fc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3200:	0f 92       	push	r0
    3202:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3206:	2f 93       	push	r18
    3208:	3f 93       	push	r19
    320a:	4f 93       	push	r20
    320c:	5f 93       	push	r21
    320e:	6f 93       	push	r22
    3210:	7f 93       	push	r23
    3212:	8f 93       	push	r24
    3214:	9f 93       	push	r25
    3216:	af 93       	push	r26
    3218:	bf 93       	push	r27
    321a:	ef 93       	push	r30
    321c:	ff 93       	push	r31
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    3226:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <__data_end>
    322a:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <__data_end+0x1>
    322e:	89 2b       	or	r24, r25
    3230:	31 f0       	breq	.+12     	; 0x323e <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    3232:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <__data_end>
    3236:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <__data_end+0x1>
    323a:	fc 01       	movw	r30, r24
    323c:	19 95       	eicall
	}
}
    323e:	00 00       	nop
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	ff 91       	pop	r31
    3246:	ef 91       	pop	r30
    3248:	bf 91       	pop	r27
    324a:	af 91       	pop	r26
    324c:	9f 91       	pop	r25
    324e:	8f 91       	pop	r24
    3250:	7f 91       	pop	r23
    3252:	6f 91       	pop	r22
    3254:	5f 91       	pop	r21
    3256:	4f 91       	pop	r20
    3258:	3f 91       	pop	r19
    325a:	2f 91       	pop	r18
    325c:	0f 90       	pop	r0
    325e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3262:	0f 90       	pop	r0
    3264:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3268:	0f 90       	pop	r0
    326a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    326e:	0f 90       	pop	r0
    3270:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3274:	0f 90       	pop	r0
    3276:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    327a:	0f 90       	pop	r0
    327c:	1f 90       	pop	r1
    327e:	18 95       	reti

00003280 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    3280:	1f 92       	push	r1
    3282:	0f 92       	push	r0
    3284:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3288:	0f 92       	push	r0
    328a:	11 24       	eor	r1, r1
    328c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3290:	0f 92       	push	r0
    3292:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3296:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    329a:	0f 92       	push	r0
    329c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    32a0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    32a4:	0f 92       	push	r0
    32a6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    32aa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    32ae:	0f 92       	push	r0
    32b0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    32b4:	2f 93       	push	r18
    32b6:	3f 93       	push	r19
    32b8:	4f 93       	push	r20
    32ba:	5f 93       	push	r21
    32bc:	6f 93       	push	r22
    32be:	7f 93       	push	r23
    32c0:	8f 93       	push	r24
    32c2:	9f 93       	push	r25
    32c4:	af 93       	push	r26
    32c6:	bf 93       	push	r27
    32c8:	ef 93       	push	r30
    32ca:	ff 93       	push	r31
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    32d4:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcc0_err_callback>
    32d8:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcc0_err_callback+0x1>
    32dc:	89 2b       	or	r24, r25
    32de:	31 f0       	breq	.+12     	; 0x32ec <__vector_15+0x6c>
		tc_tcc0_err_callback();
    32e0:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcc0_err_callback>
    32e4:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcc0_err_callback+0x1>
    32e8:	fc 01       	movw	r30, r24
    32ea:	19 95       	eicall
	}
}
    32ec:	00 00       	nop
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	ff 91       	pop	r31
    32f4:	ef 91       	pop	r30
    32f6:	bf 91       	pop	r27
    32f8:	af 91       	pop	r26
    32fa:	9f 91       	pop	r25
    32fc:	8f 91       	pop	r24
    32fe:	7f 91       	pop	r23
    3300:	6f 91       	pop	r22
    3302:	5f 91       	pop	r21
    3304:	4f 91       	pop	r20
    3306:	3f 91       	pop	r19
    3308:	2f 91       	pop	r18
    330a:	0f 90       	pop	r0
    330c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3310:	0f 90       	pop	r0
    3312:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3316:	0f 90       	pop	r0
    3318:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    331c:	0f 90       	pop	r0
    331e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3322:	0f 90       	pop	r0
    3324:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3328:	0f 90       	pop	r0
    332a:	1f 90       	pop	r1
    332c:	18 95       	reti

0000332e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    332e:	1f 92       	push	r1
    3330:	0f 92       	push	r0
    3332:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3336:	0f 92       	push	r0
    3338:	11 24       	eor	r1, r1
    333a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    333e:	0f 92       	push	r0
    3340:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3344:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3348:	0f 92       	push	r0
    334a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    334e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3352:	0f 92       	push	r0
    3354:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3358:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    335c:	0f 92       	push	r0
    335e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3362:	2f 93       	push	r18
    3364:	3f 93       	push	r19
    3366:	4f 93       	push	r20
    3368:	5f 93       	push	r21
    336a:	6f 93       	push	r22
    336c:	7f 93       	push	r23
    336e:	8f 93       	push	r24
    3370:	9f 93       	push	r25
    3372:	af 93       	push	r26
    3374:	bf 93       	push	r27
    3376:	ef 93       	push	r30
    3378:	ff 93       	push	r31
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    3382:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcc0_cca_callback>
    3386:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcc0_cca_callback+0x1>
    338a:	89 2b       	or	r24, r25
    338c:	31 f0       	breq	.+12     	; 0x339a <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    338e:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcc0_cca_callback>
    3392:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcc0_cca_callback+0x1>
    3396:	fc 01       	movw	r30, r24
    3398:	19 95       	eicall
	}
}
    339a:	00 00       	nop
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	ff 91       	pop	r31
    33a2:	ef 91       	pop	r30
    33a4:	bf 91       	pop	r27
    33a6:	af 91       	pop	r26
    33a8:	9f 91       	pop	r25
    33aa:	8f 91       	pop	r24
    33ac:	7f 91       	pop	r23
    33ae:	6f 91       	pop	r22
    33b0:	5f 91       	pop	r21
    33b2:	4f 91       	pop	r20
    33b4:	3f 91       	pop	r19
    33b6:	2f 91       	pop	r18
    33b8:	0f 90       	pop	r0
    33ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    33be:	0f 90       	pop	r0
    33c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    33c4:	0f 90       	pop	r0
    33c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33ca:	0f 90       	pop	r0
    33cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33d0:	0f 90       	pop	r0
    33d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33d6:	0f 90       	pop	r0
    33d8:	1f 90       	pop	r1
    33da:	18 95       	reti

000033dc <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    33dc:	1f 92       	push	r1
    33de:	0f 92       	push	r0
    33e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33e4:	0f 92       	push	r0
    33e6:	11 24       	eor	r1, r1
    33e8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33ec:	0f 92       	push	r0
    33ee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    33f2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33f6:	0f 92       	push	r0
    33f8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    33fc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3400:	0f 92       	push	r0
    3402:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3406:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    340a:	0f 92       	push	r0
    340c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3410:	2f 93       	push	r18
    3412:	3f 93       	push	r19
    3414:	4f 93       	push	r20
    3416:	5f 93       	push	r21
    3418:	6f 93       	push	r22
    341a:	7f 93       	push	r23
    341c:	8f 93       	push	r24
    341e:	9f 93       	push	r25
    3420:	af 93       	push	r26
    3422:	bf 93       	push	r27
    3424:	ef 93       	push	r30
    3426:	ff 93       	push	r31
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    3430:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcc0_ccb_callback>
    3434:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcc0_ccb_callback+0x1>
    3438:	89 2b       	or	r24, r25
    343a:	31 f0       	breq	.+12     	; 0x3448 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    343c:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcc0_ccb_callback>
    3440:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcc0_ccb_callback+0x1>
    3444:	fc 01       	movw	r30, r24
    3446:	19 95       	eicall
	}
}
    3448:	00 00       	nop
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	ff 91       	pop	r31
    3450:	ef 91       	pop	r30
    3452:	bf 91       	pop	r27
    3454:	af 91       	pop	r26
    3456:	9f 91       	pop	r25
    3458:	8f 91       	pop	r24
    345a:	7f 91       	pop	r23
    345c:	6f 91       	pop	r22
    345e:	5f 91       	pop	r21
    3460:	4f 91       	pop	r20
    3462:	3f 91       	pop	r19
    3464:	2f 91       	pop	r18
    3466:	0f 90       	pop	r0
    3468:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    346c:	0f 90       	pop	r0
    346e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3472:	0f 90       	pop	r0
    3474:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3478:	0f 90       	pop	r0
    347a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    347e:	0f 90       	pop	r0
    3480:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3484:	0f 90       	pop	r0
    3486:	1f 90       	pop	r1
    3488:	18 95       	reti

0000348a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    348a:	1f 92       	push	r1
    348c:	0f 92       	push	r0
    348e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3492:	0f 92       	push	r0
    3494:	11 24       	eor	r1, r1
    3496:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    349a:	0f 92       	push	r0
    349c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    34a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    34a4:	0f 92       	push	r0
    34a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    34aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34ae:	0f 92       	push	r0
    34b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34b8:	0f 92       	push	r0
    34ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34be:	2f 93       	push	r18
    34c0:	3f 93       	push	r19
    34c2:	4f 93       	push	r20
    34c4:	5f 93       	push	r21
    34c6:	6f 93       	push	r22
    34c8:	7f 93       	push	r23
    34ca:	8f 93       	push	r24
    34cc:	9f 93       	push	r25
    34ce:	af 93       	push	r26
    34d0:	bf 93       	push	r27
    34d2:	ef 93       	push	r30
    34d4:	ff 93       	push	r31
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    34de:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcc0_ccc_callback>
    34e2:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcc0_ccc_callback+0x1>
    34e6:	89 2b       	or	r24, r25
    34e8:	31 f0       	breq	.+12     	; 0x34f6 <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    34ea:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcc0_ccc_callback>
    34ee:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcc0_ccc_callback+0x1>
    34f2:	fc 01       	movw	r30, r24
    34f4:	19 95       	eicall
	}
}
    34f6:	00 00       	nop
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	ff 91       	pop	r31
    34fe:	ef 91       	pop	r30
    3500:	bf 91       	pop	r27
    3502:	af 91       	pop	r26
    3504:	9f 91       	pop	r25
    3506:	8f 91       	pop	r24
    3508:	7f 91       	pop	r23
    350a:	6f 91       	pop	r22
    350c:	5f 91       	pop	r21
    350e:	4f 91       	pop	r20
    3510:	3f 91       	pop	r19
    3512:	2f 91       	pop	r18
    3514:	0f 90       	pop	r0
    3516:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    351a:	0f 90       	pop	r0
    351c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3520:	0f 90       	pop	r0
    3522:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3526:	0f 90       	pop	r0
    3528:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    352c:	0f 90       	pop	r0
    352e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3532:	0f 90       	pop	r0
    3534:	1f 90       	pop	r1
    3536:	18 95       	reti

00003538 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    3538:	1f 92       	push	r1
    353a:	0f 92       	push	r0
    353c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3540:	0f 92       	push	r0
    3542:	11 24       	eor	r1, r1
    3544:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3548:	0f 92       	push	r0
    354a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    354e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3552:	0f 92       	push	r0
    3554:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3558:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    355c:	0f 92       	push	r0
    355e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3562:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3566:	0f 92       	push	r0
    3568:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    356c:	2f 93       	push	r18
    356e:	3f 93       	push	r19
    3570:	4f 93       	push	r20
    3572:	5f 93       	push	r21
    3574:	6f 93       	push	r22
    3576:	7f 93       	push	r23
    3578:	8f 93       	push	r24
    357a:	9f 93       	push	r25
    357c:	af 93       	push	r26
    357e:	bf 93       	push	r27
    3580:	ef 93       	push	r30
    3582:	ff 93       	push	r31
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    358c:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcc0_ccd_callback>
    3590:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcc0_ccd_callback+0x1>
    3594:	89 2b       	or	r24, r25
    3596:	31 f0       	breq	.+12     	; 0x35a4 <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    3598:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcc0_ccd_callback>
    359c:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcc0_ccd_callback+0x1>
    35a0:	fc 01       	movw	r30, r24
    35a2:	19 95       	eicall
	}
}
    35a4:	00 00       	nop
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	ff 91       	pop	r31
    35ac:	ef 91       	pop	r30
    35ae:	bf 91       	pop	r27
    35b0:	af 91       	pop	r26
    35b2:	9f 91       	pop	r25
    35b4:	8f 91       	pop	r24
    35b6:	7f 91       	pop	r23
    35b8:	6f 91       	pop	r22
    35ba:	5f 91       	pop	r21
    35bc:	4f 91       	pop	r20
    35be:	3f 91       	pop	r19
    35c0:	2f 91       	pop	r18
    35c2:	0f 90       	pop	r0
    35c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    35c8:	0f 90       	pop	r0
    35ca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    35ce:	0f 90       	pop	r0
    35d0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    35d4:	0f 90       	pop	r0
    35d6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35da:	0f 90       	pop	r0
    35dc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

000035e6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    35e6:	1f 92       	push	r1
    35e8:	0f 92       	push	r0
    35ea:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35f6:	0f 92       	push	r0
    35f8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    35fc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3600:	0f 92       	push	r0
    3602:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3606:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    360a:	0f 92       	push	r0
    360c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3610:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3614:	0f 92       	push	r0
    3616:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    361a:	2f 93       	push	r18
    361c:	3f 93       	push	r19
    361e:	4f 93       	push	r20
    3620:	5f 93       	push	r21
    3622:	6f 93       	push	r22
    3624:	7f 93       	push	r23
    3626:	8f 93       	push	r24
    3628:	9f 93       	push	r25
    362a:	af 93       	push	r26
    362c:	bf 93       	push	r27
    362e:	ef 93       	push	r30
    3630:	ff 93       	push	r31
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    363a:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcc1_ovf_callback>
    363e:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcc1_ovf_callback+0x1>
    3642:	89 2b       	or	r24, r25
    3644:	31 f0       	breq	.+12     	; 0x3652 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    3646:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcc1_ovf_callback>
    364a:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcc1_ovf_callback+0x1>
    364e:	fc 01       	movw	r30, r24
    3650:	19 95       	eicall
	}
}
    3652:	00 00       	nop
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	ff 91       	pop	r31
    365a:	ef 91       	pop	r30
    365c:	bf 91       	pop	r27
    365e:	af 91       	pop	r26
    3660:	9f 91       	pop	r25
    3662:	8f 91       	pop	r24
    3664:	7f 91       	pop	r23
    3666:	6f 91       	pop	r22
    3668:	5f 91       	pop	r21
    366a:	4f 91       	pop	r20
    366c:	3f 91       	pop	r19
    366e:	2f 91       	pop	r18
    3670:	0f 90       	pop	r0
    3672:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3676:	0f 90       	pop	r0
    3678:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    367c:	0f 90       	pop	r0
    367e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3682:	0f 90       	pop	r0
    3684:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3688:	0f 90       	pop	r0
    368a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    368e:	0f 90       	pop	r0
    3690:	1f 90       	pop	r1
    3692:	18 95       	reti

00003694 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    3694:	1f 92       	push	r1
    3696:	0f 92       	push	r0
    3698:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    369c:	0f 92       	push	r0
    369e:	11 24       	eor	r1, r1
    36a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    36a4:	0f 92       	push	r0
    36a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    36aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    36ae:	0f 92       	push	r0
    36b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    36b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    36b8:	0f 92       	push	r0
    36ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    36be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    36c2:	0f 92       	push	r0
    36c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    36c8:	2f 93       	push	r18
    36ca:	3f 93       	push	r19
    36cc:	4f 93       	push	r20
    36ce:	5f 93       	push	r21
    36d0:	6f 93       	push	r22
    36d2:	7f 93       	push	r23
    36d4:	8f 93       	push	r24
    36d6:	9f 93       	push	r25
    36d8:	af 93       	push	r26
    36da:	bf 93       	push	r27
    36dc:	ef 93       	push	r30
    36de:	ff 93       	push	r31
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    36e8:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tcc1_err_callback>
    36ec:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tcc1_err_callback+0x1>
    36f0:	89 2b       	or	r24, r25
    36f2:	31 f0       	breq	.+12     	; 0x3700 <__vector_21+0x6c>
		tc_tcc1_err_callback();
    36f4:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tcc1_err_callback>
    36f8:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tcc1_err_callback+0x1>
    36fc:	fc 01       	movw	r30, r24
    36fe:	19 95       	eicall
	}
}
    3700:	00 00       	nop
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	ff 91       	pop	r31
    3708:	ef 91       	pop	r30
    370a:	bf 91       	pop	r27
    370c:	af 91       	pop	r26
    370e:	9f 91       	pop	r25
    3710:	8f 91       	pop	r24
    3712:	7f 91       	pop	r23
    3714:	6f 91       	pop	r22
    3716:	5f 91       	pop	r21
    3718:	4f 91       	pop	r20
    371a:	3f 91       	pop	r19
    371c:	2f 91       	pop	r18
    371e:	0f 90       	pop	r0
    3720:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3724:	0f 90       	pop	r0
    3726:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    372a:	0f 90       	pop	r0
    372c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3730:	0f 90       	pop	r0
    3732:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3736:	0f 90       	pop	r0
    3738:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    373c:	0f 90       	pop	r0
    373e:	1f 90       	pop	r1
    3740:	18 95       	reti

00003742 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    3742:	1f 92       	push	r1
    3744:	0f 92       	push	r0
    3746:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    374a:	0f 92       	push	r0
    374c:	11 24       	eor	r1, r1
    374e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3752:	0f 92       	push	r0
    3754:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3758:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    375c:	0f 92       	push	r0
    375e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3762:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3766:	0f 92       	push	r0
    3768:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    376c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3770:	0f 92       	push	r0
    3772:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3776:	2f 93       	push	r18
    3778:	3f 93       	push	r19
    377a:	4f 93       	push	r20
    377c:	5f 93       	push	r21
    377e:	6f 93       	push	r22
    3780:	7f 93       	push	r23
    3782:	8f 93       	push	r24
    3784:	9f 93       	push	r25
    3786:	af 93       	push	r26
    3788:	bf 93       	push	r27
    378a:	ef 93       	push	r30
    378c:	ff 93       	push	r31
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    3796:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tcc1_cca_callback>
    379a:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tcc1_cca_callback+0x1>
    379e:	89 2b       	or	r24, r25
    37a0:	31 f0       	breq	.+12     	; 0x37ae <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    37a2:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tcc1_cca_callback>
    37a6:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tcc1_cca_callback+0x1>
    37aa:	fc 01       	movw	r30, r24
    37ac:	19 95       	eicall
	}
}
    37ae:	00 00       	nop
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	ff 91       	pop	r31
    37b6:	ef 91       	pop	r30
    37b8:	bf 91       	pop	r27
    37ba:	af 91       	pop	r26
    37bc:	9f 91       	pop	r25
    37be:	8f 91       	pop	r24
    37c0:	7f 91       	pop	r23
    37c2:	6f 91       	pop	r22
    37c4:	5f 91       	pop	r21
    37c6:	4f 91       	pop	r20
    37c8:	3f 91       	pop	r19
    37ca:	2f 91       	pop	r18
    37cc:	0f 90       	pop	r0
    37ce:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    37d2:	0f 90       	pop	r0
    37d4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    37d8:	0f 90       	pop	r0
    37da:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    37de:	0f 90       	pop	r0
    37e0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    37e4:	0f 90       	pop	r0
    37e6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    37ea:	0f 90       	pop	r0
    37ec:	1f 90       	pop	r1
    37ee:	18 95       	reti

000037f0 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    37f0:	1f 92       	push	r1
    37f2:	0f 92       	push	r0
    37f4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    37f8:	0f 92       	push	r0
    37fa:	11 24       	eor	r1, r1
    37fc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3800:	0f 92       	push	r0
    3802:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3806:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    380a:	0f 92       	push	r0
    380c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3810:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3814:	0f 92       	push	r0
    3816:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    381a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    381e:	0f 92       	push	r0
    3820:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3824:	2f 93       	push	r18
    3826:	3f 93       	push	r19
    3828:	4f 93       	push	r20
    382a:	5f 93       	push	r21
    382c:	6f 93       	push	r22
    382e:	7f 93       	push	r23
    3830:	8f 93       	push	r24
    3832:	9f 93       	push	r25
    3834:	af 93       	push	r26
    3836:	bf 93       	push	r27
    3838:	ef 93       	push	r30
    383a:	ff 93       	push	r31
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    3844:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tcc1_ccb_callback>
    3848:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tcc1_ccb_callback+0x1>
    384c:	89 2b       	or	r24, r25
    384e:	31 f0       	breq	.+12     	; 0x385c <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    3850:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tcc1_ccb_callback>
    3854:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tcc1_ccb_callback+0x1>
    3858:	fc 01       	movw	r30, r24
    385a:	19 95       	eicall
	}
}
    385c:	00 00       	nop
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	ff 91       	pop	r31
    3864:	ef 91       	pop	r30
    3866:	bf 91       	pop	r27
    3868:	af 91       	pop	r26
    386a:	9f 91       	pop	r25
    386c:	8f 91       	pop	r24
    386e:	7f 91       	pop	r23
    3870:	6f 91       	pop	r22
    3872:	5f 91       	pop	r21
    3874:	4f 91       	pop	r20
    3876:	3f 91       	pop	r19
    3878:	2f 91       	pop	r18
    387a:	0f 90       	pop	r0
    387c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3880:	0f 90       	pop	r0
    3882:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3886:	0f 90       	pop	r0
    3888:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    388c:	0f 90       	pop	r0
    388e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3892:	0f 90       	pop	r0
    3894:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3898:	0f 90       	pop	r0
    389a:	1f 90       	pop	r1
    389c:	18 95       	reti

0000389e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    389e:	1f 92       	push	r1
    38a0:	0f 92       	push	r0
    38a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    38a6:	0f 92       	push	r0
    38a8:	11 24       	eor	r1, r1
    38aa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    38ae:	0f 92       	push	r0
    38b0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    38b4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    38b8:	0f 92       	push	r0
    38ba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    38be:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    38c2:	0f 92       	push	r0
    38c4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    38c8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38cc:	0f 92       	push	r0
    38ce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    38d2:	2f 93       	push	r18
    38d4:	3f 93       	push	r19
    38d6:	4f 93       	push	r20
    38d8:	5f 93       	push	r21
    38da:	6f 93       	push	r22
    38dc:	7f 93       	push	r23
    38de:	8f 93       	push	r24
    38e0:	9f 93       	push	r25
    38e2:	af 93       	push	r26
    38e4:	bf 93       	push	r27
    38e6:	ef 93       	push	r30
    38e8:	ff 93       	push	r31
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    38f2:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tcd0_ovf_callback>
    38f6:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tcd0_ovf_callback+0x1>
    38fa:	89 2b       	or	r24, r25
    38fc:	31 f0       	breq	.+12     	; 0x390a <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    38fe:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tcd0_ovf_callback>
    3902:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tcd0_ovf_callback+0x1>
    3906:	fc 01       	movw	r30, r24
    3908:	19 95       	eicall
	}
}
    390a:	00 00       	nop
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	ff 91       	pop	r31
    3912:	ef 91       	pop	r30
    3914:	bf 91       	pop	r27
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	7f 91       	pop	r23
    391e:	6f 91       	pop	r22
    3920:	5f 91       	pop	r21
    3922:	4f 91       	pop	r20
    3924:	3f 91       	pop	r19
    3926:	2f 91       	pop	r18
    3928:	0f 90       	pop	r0
    392a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    392e:	0f 90       	pop	r0
    3930:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3934:	0f 90       	pop	r0
    3936:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    393a:	0f 90       	pop	r0
    393c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3940:	0f 90       	pop	r0
    3942:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3946:	0f 90       	pop	r0
    3948:	1f 90       	pop	r1
    394a:	18 95       	reti

0000394c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    394c:	1f 92       	push	r1
    394e:	0f 92       	push	r0
    3950:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3954:	0f 92       	push	r0
    3956:	11 24       	eor	r1, r1
    3958:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    395c:	0f 92       	push	r0
    395e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3962:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3966:	0f 92       	push	r0
    3968:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    396c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3970:	0f 92       	push	r0
    3972:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3976:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    397a:	0f 92       	push	r0
    397c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3980:	2f 93       	push	r18
    3982:	3f 93       	push	r19
    3984:	4f 93       	push	r20
    3986:	5f 93       	push	r21
    3988:	6f 93       	push	r22
    398a:	7f 93       	push	r23
    398c:	8f 93       	push	r24
    398e:	9f 93       	push	r25
    3990:	af 93       	push	r26
    3992:	bf 93       	push	r27
    3994:	ef 93       	push	r30
    3996:	ff 93       	push	r31
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    39a0:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tcd0_err_callback>
    39a4:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tcd0_err_callback+0x1>
    39a8:	89 2b       	or	r24, r25
    39aa:	31 f0       	breq	.+12     	; 0x39b8 <__vector_78+0x6c>
		tc_tcd0_err_callback();
    39ac:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tcd0_err_callback>
    39b0:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tcd0_err_callback+0x1>
    39b4:	fc 01       	movw	r30, r24
    39b6:	19 95       	eicall
	}
}
    39b8:	00 00       	nop
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	ff 91       	pop	r31
    39c0:	ef 91       	pop	r30
    39c2:	bf 91       	pop	r27
    39c4:	af 91       	pop	r26
    39c6:	9f 91       	pop	r25
    39c8:	8f 91       	pop	r24
    39ca:	7f 91       	pop	r23
    39cc:	6f 91       	pop	r22
    39ce:	5f 91       	pop	r21
    39d0:	4f 91       	pop	r20
    39d2:	3f 91       	pop	r19
    39d4:	2f 91       	pop	r18
    39d6:	0f 90       	pop	r0
    39d8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    39dc:	0f 90       	pop	r0
    39de:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    39e2:	0f 90       	pop	r0
    39e4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    39e8:	0f 90       	pop	r0
    39ea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    39ee:	0f 90       	pop	r0
    39f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    39f4:	0f 90       	pop	r0
    39f6:	1f 90       	pop	r1
    39f8:	18 95       	reti

000039fa <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    39fa:	1f 92       	push	r1
    39fc:	0f 92       	push	r0
    39fe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3a02:	0f 92       	push	r0
    3a04:	11 24       	eor	r1, r1
    3a06:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a0a:	0f 92       	push	r0
    3a0c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a10:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a14:	0f 92       	push	r0
    3a16:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a1a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a1e:	0f 92       	push	r0
    3a20:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a24:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a28:	0f 92       	push	r0
    3a2a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a2e:	2f 93       	push	r18
    3a30:	3f 93       	push	r19
    3a32:	4f 93       	push	r20
    3a34:	5f 93       	push	r21
    3a36:	6f 93       	push	r22
    3a38:	7f 93       	push	r23
    3a3a:	8f 93       	push	r24
    3a3c:	9f 93       	push	r25
    3a3e:	af 93       	push	r26
    3a40:	bf 93       	push	r27
    3a42:	ef 93       	push	r30
    3a44:	ff 93       	push	r31
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    3a4e:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tcd0_cca_callback>
    3a52:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tcd0_cca_callback+0x1>
    3a56:	89 2b       	or	r24, r25
    3a58:	31 f0       	breq	.+12     	; 0x3a66 <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    3a5a:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tcd0_cca_callback>
    3a5e:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tcd0_cca_callback+0x1>
    3a62:	fc 01       	movw	r30, r24
    3a64:	19 95       	eicall
	}
}
    3a66:	00 00       	nop
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	ff 91       	pop	r31
    3a6e:	ef 91       	pop	r30
    3a70:	bf 91       	pop	r27
    3a72:	af 91       	pop	r26
    3a74:	9f 91       	pop	r25
    3a76:	8f 91       	pop	r24
    3a78:	7f 91       	pop	r23
    3a7a:	6f 91       	pop	r22
    3a7c:	5f 91       	pop	r21
    3a7e:	4f 91       	pop	r20
    3a80:	3f 91       	pop	r19
    3a82:	2f 91       	pop	r18
    3a84:	0f 90       	pop	r0
    3a86:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3a8a:	0f 90       	pop	r0
    3a8c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3a90:	0f 90       	pop	r0
    3a92:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3a96:	0f 90       	pop	r0
    3a98:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3a9c:	0f 90       	pop	r0
    3a9e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3aa2:	0f 90       	pop	r0
    3aa4:	1f 90       	pop	r1
    3aa6:	18 95       	reti

00003aa8 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    3aa8:	1f 92       	push	r1
    3aaa:	0f 92       	push	r0
    3aac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3ab0:	0f 92       	push	r0
    3ab2:	11 24       	eor	r1, r1
    3ab4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ab8:	0f 92       	push	r0
    3aba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3abe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ac2:	0f 92       	push	r0
    3ac4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ac8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3acc:	0f 92       	push	r0
    3ace:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ad2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ad6:	0f 92       	push	r0
    3ad8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3adc:	2f 93       	push	r18
    3ade:	3f 93       	push	r19
    3ae0:	4f 93       	push	r20
    3ae2:	5f 93       	push	r21
    3ae4:	6f 93       	push	r22
    3ae6:	7f 93       	push	r23
    3ae8:	8f 93       	push	r24
    3aea:	9f 93       	push	r25
    3aec:	af 93       	push	r26
    3aee:	bf 93       	push	r27
    3af0:	ef 93       	push	r30
    3af2:	ff 93       	push	r31
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    3afc:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tcd0_ccb_callback>
    3b00:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tcd0_ccb_callback+0x1>
    3b04:	89 2b       	or	r24, r25
    3b06:	31 f0       	breq	.+12     	; 0x3b14 <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    3b08:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tcd0_ccb_callback>
    3b0c:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tcd0_ccb_callback+0x1>
    3b10:	fc 01       	movw	r30, r24
    3b12:	19 95       	eicall
	}
}
    3b14:	00 00       	nop
    3b16:	df 91       	pop	r29
    3b18:	cf 91       	pop	r28
    3b1a:	ff 91       	pop	r31
    3b1c:	ef 91       	pop	r30
    3b1e:	bf 91       	pop	r27
    3b20:	af 91       	pop	r26
    3b22:	9f 91       	pop	r25
    3b24:	8f 91       	pop	r24
    3b26:	7f 91       	pop	r23
    3b28:	6f 91       	pop	r22
    3b2a:	5f 91       	pop	r21
    3b2c:	4f 91       	pop	r20
    3b2e:	3f 91       	pop	r19
    3b30:	2f 91       	pop	r18
    3b32:	0f 90       	pop	r0
    3b34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b38:	0f 90       	pop	r0
    3b3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b3e:	0f 90       	pop	r0
    3b40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b44:	0f 90       	pop	r0
    3b46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b4a:	0f 90       	pop	r0
    3b4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3b50:	0f 90       	pop	r0
    3b52:	1f 90       	pop	r1
    3b54:	18 95       	reti

00003b56 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    3b56:	1f 92       	push	r1
    3b58:	0f 92       	push	r0
    3b5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3b5e:	0f 92       	push	r0
    3b60:	11 24       	eor	r1, r1
    3b62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b66:	0f 92       	push	r0
    3b68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3b6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b70:	0f 92       	push	r0
    3b72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3b76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b7a:	0f 92       	push	r0
    3b7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3b80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b84:	0f 92       	push	r0
    3b86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3b8a:	2f 93       	push	r18
    3b8c:	3f 93       	push	r19
    3b8e:	4f 93       	push	r20
    3b90:	5f 93       	push	r21
    3b92:	6f 93       	push	r22
    3b94:	7f 93       	push	r23
    3b96:	8f 93       	push	r24
    3b98:	9f 93       	push	r25
    3b9a:	af 93       	push	r26
    3b9c:	bf 93       	push	r27
    3b9e:	ef 93       	push	r30
    3ba0:	ff 93       	push	r31
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    3baa:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tcd0_ccc_callback>
    3bae:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tcd0_ccc_callback+0x1>
    3bb2:	89 2b       	or	r24, r25
    3bb4:	31 f0       	breq	.+12     	; 0x3bc2 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    3bb6:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tcd0_ccc_callback>
    3bba:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tcd0_ccc_callback+0x1>
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	19 95       	eicall
	}
}
    3bc2:	00 00       	nop
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	ff 91       	pop	r31
    3bca:	ef 91       	pop	r30
    3bcc:	bf 91       	pop	r27
    3bce:	af 91       	pop	r26
    3bd0:	9f 91       	pop	r25
    3bd2:	8f 91       	pop	r24
    3bd4:	7f 91       	pop	r23
    3bd6:	6f 91       	pop	r22
    3bd8:	5f 91       	pop	r21
    3bda:	4f 91       	pop	r20
    3bdc:	3f 91       	pop	r19
    3bde:	2f 91       	pop	r18
    3be0:	0f 90       	pop	r0
    3be2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3be6:	0f 90       	pop	r0
    3be8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3bec:	0f 90       	pop	r0
    3bee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3bf2:	0f 90       	pop	r0
    3bf4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3bf8:	0f 90       	pop	r0
    3bfa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3bfe:	0f 90       	pop	r0
    3c00:	1f 90       	pop	r1
    3c02:	18 95       	reti

00003c04 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    3c04:	1f 92       	push	r1
    3c06:	0f 92       	push	r0
    3c08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3c0c:	0f 92       	push	r0
    3c0e:	11 24       	eor	r1, r1
    3c10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3c14:	0f 92       	push	r0
    3c16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3c1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3c1e:	0f 92       	push	r0
    3c20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3c24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c28:	0f 92       	push	r0
    3c2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3c32:	0f 92       	push	r0
    3c34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3c38:	2f 93       	push	r18
    3c3a:	3f 93       	push	r19
    3c3c:	4f 93       	push	r20
    3c3e:	5f 93       	push	r21
    3c40:	6f 93       	push	r22
    3c42:	7f 93       	push	r23
    3c44:	8f 93       	push	r24
    3c46:	9f 93       	push	r25
    3c48:	af 93       	push	r26
    3c4a:	bf 93       	push	r27
    3c4c:	ef 93       	push	r30
    3c4e:	ff 93       	push	r31
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    3c58:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tcd0_ccd_callback>
    3c5c:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tcd0_ccd_callback+0x1>
    3c60:	89 2b       	or	r24, r25
    3c62:	31 f0       	breq	.+12     	; 0x3c70 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    3c64:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tcd0_ccd_callback>
    3c68:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tcd0_ccd_callback+0x1>
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	19 95       	eicall
	}
}
    3c70:	00 00       	nop
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	ff 91       	pop	r31
    3c78:	ef 91       	pop	r30
    3c7a:	bf 91       	pop	r27
    3c7c:	af 91       	pop	r26
    3c7e:	9f 91       	pop	r25
    3c80:	8f 91       	pop	r24
    3c82:	7f 91       	pop	r23
    3c84:	6f 91       	pop	r22
    3c86:	5f 91       	pop	r21
    3c88:	4f 91       	pop	r20
    3c8a:	3f 91       	pop	r19
    3c8c:	2f 91       	pop	r18
    3c8e:	0f 90       	pop	r0
    3c90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3c94:	0f 90       	pop	r0
    3c96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3c9a:	0f 90       	pop	r0
    3c9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ca0:	0f 90       	pop	r0
    3ca2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ca6:	0f 90       	pop	r0
    3ca8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3cac:	0f 90       	pop	r0
    3cae:	1f 90       	pop	r1
    3cb0:	18 95       	reti

00003cb2 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    3cb2:	1f 92       	push	r1
    3cb4:	0f 92       	push	r0
    3cb6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3cba:	0f 92       	push	r0
    3cbc:	11 24       	eor	r1, r1
    3cbe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3cc2:	0f 92       	push	r0
    3cc4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3cc8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ccc:	0f 92       	push	r0
    3cce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3cd2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3cd6:	0f 92       	push	r0
    3cd8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3cdc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ce0:	0f 92       	push	r0
    3ce2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ce6:	2f 93       	push	r18
    3ce8:	3f 93       	push	r19
    3cea:	4f 93       	push	r20
    3cec:	5f 93       	push	r21
    3cee:	6f 93       	push	r22
    3cf0:	7f 93       	push	r23
    3cf2:	8f 93       	push	r24
    3cf4:	9f 93       	push	r25
    3cf6:	af 93       	push	r26
    3cf8:	bf 93       	push	r27
    3cfa:	ef 93       	push	r30
    3cfc:	ff 93       	push	r31
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    3d06:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tcd1_ovf_callback>
    3d0a:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tcd1_ovf_callback+0x1>
    3d0e:	89 2b       	or	r24, r25
    3d10:	31 f0       	breq	.+12     	; 0x3d1e <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    3d12:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tcd1_ovf_callback>
    3d16:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tcd1_ovf_callback+0x1>
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	19 95       	eicall
	}
}
    3d1e:	00 00       	nop
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	ff 91       	pop	r31
    3d26:	ef 91       	pop	r30
    3d28:	bf 91       	pop	r27
    3d2a:	af 91       	pop	r26
    3d2c:	9f 91       	pop	r25
    3d2e:	8f 91       	pop	r24
    3d30:	7f 91       	pop	r23
    3d32:	6f 91       	pop	r22
    3d34:	5f 91       	pop	r21
    3d36:	4f 91       	pop	r20
    3d38:	3f 91       	pop	r19
    3d3a:	2f 91       	pop	r18
    3d3c:	0f 90       	pop	r0
    3d3e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d42:	0f 90       	pop	r0
    3d44:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d48:	0f 90       	pop	r0
    3d4a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3d4e:	0f 90       	pop	r0
    3d50:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3d54:	0f 90       	pop	r0
    3d56:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3d5a:	0f 90       	pop	r0
    3d5c:	1f 90       	pop	r1
    3d5e:	18 95       	reti

00003d60 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    3d60:	1f 92       	push	r1
    3d62:	0f 92       	push	r0
    3d64:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3d68:	0f 92       	push	r0
    3d6a:	11 24       	eor	r1, r1
    3d6c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3d70:	0f 92       	push	r0
    3d72:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3d76:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3d7a:	0f 92       	push	r0
    3d7c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3d80:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d84:	0f 92       	push	r0
    3d86:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3d8a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d8e:	0f 92       	push	r0
    3d90:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3d94:	2f 93       	push	r18
    3d96:	3f 93       	push	r19
    3d98:	4f 93       	push	r20
    3d9a:	5f 93       	push	r21
    3d9c:	6f 93       	push	r22
    3d9e:	7f 93       	push	r23
    3da0:	8f 93       	push	r24
    3da2:	9f 93       	push	r25
    3da4:	af 93       	push	r26
    3da6:	bf 93       	push	r27
    3da8:	ef 93       	push	r30
    3daa:	ff 93       	push	r31
    3dac:	cf 93       	push	r28
    3dae:	df 93       	push	r29
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    3db4:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcd1_err_callback>
    3db8:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcd1_err_callback+0x1>
    3dbc:	89 2b       	or	r24, r25
    3dbe:	31 f0       	breq	.+12     	; 0x3dcc <__vector_84+0x6c>
		tc_tcd1_err_callback();
    3dc0:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcd1_err_callback>
    3dc4:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcd1_err_callback+0x1>
    3dc8:	fc 01       	movw	r30, r24
    3dca:	19 95       	eicall
	}
}
    3dcc:	00 00       	nop
    3dce:	df 91       	pop	r29
    3dd0:	cf 91       	pop	r28
    3dd2:	ff 91       	pop	r31
    3dd4:	ef 91       	pop	r30
    3dd6:	bf 91       	pop	r27
    3dd8:	af 91       	pop	r26
    3dda:	9f 91       	pop	r25
    3ddc:	8f 91       	pop	r24
    3dde:	7f 91       	pop	r23
    3de0:	6f 91       	pop	r22
    3de2:	5f 91       	pop	r21
    3de4:	4f 91       	pop	r20
    3de6:	3f 91       	pop	r19
    3de8:	2f 91       	pop	r18
    3dea:	0f 90       	pop	r0
    3dec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3df0:	0f 90       	pop	r0
    3df2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3df6:	0f 90       	pop	r0
    3df8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3dfc:	0f 90       	pop	r0
    3dfe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e02:	0f 90       	pop	r0
    3e04:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3e08:	0f 90       	pop	r0
    3e0a:	1f 90       	pop	r1
    3e0c:	18 95       	reti

00003e0e <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    3e0e:	1f 92       	push	r1
    3e10:	0f 92       	push	r0
    3e12:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3e16:	0f 92       	push	r0
    3e18:	11 24       	eor	r1, r1
    3e1a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e1e:	0f 92       	push	r0
    3e20:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3e24:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e28:	0f 92       	push	r0
    3e2a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3e2e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e32:	0f 92       	push	r0
    3e34:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3e38:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e3c:	0f 92       	push	r0
    3e3e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e42:	2f 93       	push	r18
    3e44:	3f 93       	push	r19
    3e46:	4f 93       	push	r20
    3e48:	5f 93       	push	r21
    3e4a:	6f 93       	push	r22
    3e4c:	7f 93       	push	r23
    3e4e:	8f 93       	push	r24
    3e50:	9f 93       	push	r25
    3e52:	af 93       	push	r26
    3e54:	bf 93       	push	r27
    3e56:	ef 93       	push	r30
    3e58:	ff 93       	push	r31
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    3e62:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcd1_cca_callback>
    3e66:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcd1_cca_callback+0x1>
    3e6a:	89 2b       	or	r24, r25
    3e6c:	31 f0       	breq	.+12     	; 0x3e7a <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    3e6e:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcd1_cca_callback>
    3e72:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcd1_cca_callback+0x1>
    3e76:	fc 01       	movw	r30, r24
    3e78:	19 95       	eicall
	}
}
    3e7a:	00 00       	nop
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	ff 91       	pop	r31
    3e82:	ef 91       	pop	r30
    3e84:	bf 91       	pop	r27
    3e86:	af 91       	pop	r26
    3e88:	9f 91       	pop	r25
    3e8a:	8f 91       	pop	r24
    3e8c:	7f 91       	pop	r23
    3e8e:	6f 91       	pop	r22
    3e90:	5f 91       	pop	r21
    3e92:	4f 91       	pop	r20
    3e94:	3f 91       	pop	r19
    3e96:	2f 91       	pop	r18
    3e98:	0f 90       	pop	r0
    3e9a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e9e:	0f 90       	pop	r0
    3ea0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ea4:	0f 90       	pop	r0
    3ea6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3eaa:	0f 90       	pop	r0
    3eac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3eb0:	0f 90       	pop	r0
    3eb2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3eb6:	0f 90       	pop	r0
    3eb8:	1f 90       	pop	r1
    3eba:	18 95       	reti

00003ebc <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    3ebc:	1f 92       	push	r1
    3ebe:	0f 92       	push	r0
    3ec0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3ec4:	0f 92       	push	r0
    3ec6:	11 24       	eor	r1, r1
    3ec8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ecc:	0f 92       	push	r0
    3ece:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3ed2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3ed6:	0f 92       	push	r0
    3ed8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3edc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ee0:	0f 92       	push	r0
    3ee2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3ee6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3eea:	0f 92       	push	r0
    3eec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ef0:	2f 93       	push	r18
    3ef2:	3f 93       	push	r19
    3ef4:	4f 93       	push	r20
    3ef6:	5f 93       	push	r21
    3ef8:	6f 93       	push	r22
    3efa:	7f 93       	push	r23
    3efc:	8f 93       	push	r24
    3efe:	9f 93       	push	r25
    3f00:	af 93       	push	r26
    3f02:	bf 93       	push	r27
    3f04:	ef 93       	push	r30
    3f06:	ff 93       	push	r31
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    3f10:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcd1_ccb_callback>
    3f14:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcd1_ccb_callback+0x1>
    3f18:	89 2b       	or	r24, r25
    3f1a:	31 f0       	breq	.+12     	; 0x3f28 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    3f1c:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcd1_ccb_callback>
    3f20:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcd1_ccb_callback+0x1>
    3f24:	fc 01       	movw	r30, r24
    3f26:	19 95       	eicall
	}
}
    3f28:	00 00       	nop
    3f2a:	df 91       	pop	r29
    3f2c:	cf 91       	pop	r28
    3f2e:	ff 91       	pop	r31
    3f30:	ef 91       	pop	r30
    3f32:	bf 91       	pop	r27
    3f34:	af 91       	pop	r26
    3f36:	9f 91       	pop	r25
    3f38:	8f 91       	pop	r24
    3f3a:	7f 91       	pop	r23
    3f3c:	6f 91       	pop	r22
    3f3e:	5f 91       	pop	r21
    3f40:	4f 91       	pop	r20
    3f42:	3f 91       	pop	r19
    3f44:	2f 91       	pop	r18
    3f46:	0f 90       	pop	r0
    3f48:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f4c:	0f 90       	pop	r0
    3f4e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f52:	0f 90       	pop	r0
    3f54:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f58:	0f 90       	pop	r0
    3f5a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f5e:	0f 90       	pop	r0
    3f60:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3f64:	0f 90       	pop	r0
    3f66:	1f 90       	pop	r1
    3f68:	18 95       	reti

00003f6a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    3f6a:	1f 92       	push	r1
    3f6c:	0f 92       	push	r0
    3f6e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3f72:	0f 92       	push	r0
    3f74:	11 24       	eor	r1, r1
    3f76:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f7a:	0f 92       	push	r0
    3f7c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3f80:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f84:	0f 92       	push	r0
    3f86:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3f8a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f8e:	0f 92       	push	r0
    3f90:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3f94:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f98:	0f 92       	push	r0
    3f9a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f9e:	2f 93       	push	r18
    3fa0:	3f 93       	push	r19
    3fa2:	4f 93       	push	r20
    3fa4:	5f 93       	push	r21
    3fa6:	6f 93       	push	r22
    3fa8:	7f 93       	push	r23
    3faa:	8f 93       	push	r24
    3fac:	9f 93       	push	r25
    3fae:	af 93       	push	r26
    3fb0:	bf 93       	push	r27
    3fb2:	ef 93       	push	r30
    3fb4:	ff 93       	push	r31
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    3fbe:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tce0_ovf_callback>
    3fc2:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tce0_ovf_callback+0x1>
    3fc6:	89 2b       	or	r24, r25
    3fc8:	31 f0       	breq	.+12     	; 0x3fd6 <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    3fca:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tce0_ovf_callback>
    3fce:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tce0_ovf_callback+0x1>
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	19 95       	eicall
	}
}
    3fd6:	00 00       	nop
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	ff 91       	pop	r31
    3fde:	ef 91       	pop	r30
    3fe0:	bf 91       	pop	r27
    3fe2:	af 91       	pop	r26
    3fe4:	9f 91       	pop	r25
    3fe6:	8f 91       	pop	r24
    3fe8:	7f 91       	pop	r23
    3fea:	6f 91       	pop	r22
    3fec:	5f 91       	pop	r21
    3fee:	4f 91       	pop	r20
    3ff0:	3f 91       	pop	r19
    3ff2:	2f 91       	pop	r18
    3ff4:	0f 90       	pop	r0
    3ff6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ffa:	0f 90       	pop	r0
    3ffc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4000:	0f 90       	pop	r0
    4002:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4006:	0f 90       	pop	r0
    4008:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    400c:	0f 90       	pop	r0
    400e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4012:	0f 90       	pop	r0
    4014:	1f 90       	pop	r1
    4016:	18 95       	reti

00004018 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    4018:	1f 92       	push	r1
    401a:	0f 92       	push	r0
    401c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4020:	0f 92       	push	r0
    4022:	11 24       	eor	r1, r1
    4024:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4028:	0f 92       	push	r0
    402a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    402e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4032:	0f 92       	push	r0
    4034:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4038:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    403c:	0f 92       	push	r0
    403e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4042:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4046:	0f 92       	push	r0
    4048:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    404c:	2f 93       	push	r18
    404e:	3f 93       	push	r19
    4050:	4f 93       	push	r20
    4052:	5f 93       	push	r21
    4054:	6f 93       	push	r22
    4056:	7f 93       	push	r23
    4058:	8f 93       	push	r24
    405a:	9f 93       	push	r25
    405c:	af 93       	push	r26
    405e:	bf 93       	push	r27
    4060:	ef 93       	push	r30
    4062:	ff 93       	push	r31
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    406c:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tce0_err_callback>
    4070:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tce0_err_callback+0x1>
    4074:	89 2b       	or	r24, r25
    4076:	31 f0       	breq	.+12     	; 0x4084 <__vector_48+0x6c>
		tc_tce0_err_callback();
    4078:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tce0_err_callback>
    407c:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tce0_err_callback+0x1>
    4080:	fc 01       	movw	r30, r24
    4082:	19 95       	eicall
	}
}
    4084:	00 00       	nop
    4086:	df 91       	pop	r29
    4088:	cf 91       	pop	r28
    408a:	ff 91       	pop	r31
    408c:	ef 91       	pop	r30
    408e:	bf 91       	pop	r27
    4090:	af 91       	pop	r26
    4092:	9f 91       	pop	r25
    4094:	8f 91       	pop	r24
    4096:	7f 91       	pop	r23
    4098:	6f 91       	pop	r22
    409a:	5f 91       	pop	r21
    409c:	4f 91       	pop	r20
    409e:	3f 91       	pop	r19
    40a0:	2f 91       	pop	r18
    40a2:	0f 90       	pop	r0
    40a4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40a8:	0f 90       	pop	r0
    40aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40ae:	0f 90       	pop	r0
    40b0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40b4:	0f 90       	pop	r0
    40b6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40ba:	0f 90       	pop	r0
    40bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    40c0:	0f 90       	pop	r0
    40c2:	1f 90       	pop	r1
    40c4:	18 95       	reti

000040c6 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    40c6:	1f 92       	push	r1
    40c8:	0f 92       	push	r0
    40ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    40ce:	0f 92       	push	r0
    40d0:	11 24       	eor	r1, r1
    40d2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40d6:	0f 92       	push	r0
    40d8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40dc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40e0:	0f 92       	push	r0
    40e2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40e6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40ea:	0f 92       	push	r0
    40ec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40f0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40f4:	0f 92       	push	r0
    40f6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40fa:	2f 93       	push	r18
    40fc:	3f 93       	push	r19
    40fe:	4f 93       	push	r20
    4100:	5f 93       	push	r21
    4102:	6f 93       	push	r22
    4104:	7f 93       	push	r23
    4106:	8f 93       	push	r24
    4108:	9f 93       	push	r25
    410a:	af 93       	push	r26
    410c:	bf 93       	push	r27
    410e:	ef 93       	push	r30
    4110:	ff 93       	push	r31
    4112:	cf 93       	push	r28
    4114:	df 93       	push	r29
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    411a:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tce0_cca_callback>
    411e:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tce0_cca_callback+0x1>
    4122:	89 2b       	or	r24, r25
    4124:	31 f0       	breq	.+12     	; 0x4132 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    4126:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tce0_cca_callback>
    412a:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tce0_cca_callback+0x1>
    412e:	fc 01       	movw	r30, r24
    4130:	19 95       	eicall
	}
}
    4132:	00 00       	nop
    4134:	df 91       	pop	r29
    4136:	cf 91       	pop	r28
    4138:	ff 91       	pop	r31
    413a:	ef 91       	pop	r30
    413c:	bf 91       	pop	r27
    413e:	af 91       	pop	r26
    4140:	9f 91       	pop	r25
    4142:	8f 91       	pop	r24
    4144:	7f 91       	pop	r23
    4146:	6f 91       	pop	r22
    4148:	5f 91       	pop	r21
    414a:	4f 91       	pop	r20
    414c:	3f 91       	pop	r19
    414e:	2f 91       	pop	r18
    4150:	0f 90       	pop	r0
    4152:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4156:	0f 90       	pop	r0
    4158:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    415c:	0f 90       	pop	r0
    415e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4162:	0f 90       	pop	r0
    4164:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4168:	0f 90       	pop	r0
    416a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    416e:	0f 90       	pop	r0
    4170:	1f 90       	pop	r1
    4172:	18 95       	reti

00004174 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    4174:	1f 92       	push	r1
    4176:	0f 92       	push	r0
    4178:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    417c:	0f 92       	push	r0
    417e:	11 24       	eor	r1, r1
    4180:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4184:	0f 92       	push	r0
    4186:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    418a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    418e:	0f 92       	push	r0
    4190:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4194:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4198:	0f 92       	push	r0
    419a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    419e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    41a2:	0f 92       	push	r0
    41a4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    41a8:	2f 93       	push	r18
    41aa:	3f 93       	push	r19
    41ac:	4f 93       	push	r20
    41ae:	5f 93       	push	r21
    41b0:	6f 93       	push	r22
    41b2:	7f 93       	push	r23
    41b4:	8f 93       	push	r24
    41b6:	9f 93       	push	r25
    41b8:	af 93       	push	r26
    41ba:	bf 93       	push	r27
    41bc:	ef 93       	push	r30
    41be:	ff 93       	push	r31
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    41c8:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tce0_ccb_callback>
    41cc:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tce0_ccb_callback+0x1>
    41d0:	89 2b       	or	r24, r25
    41d2:	31 f0       	breq	.+12     	; 0x41e0 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    41d4:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tce0_ccb_callback>
    41d8:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tce0_ccb_callback+0x1>
    41dc:	fc 01       	movw	r30, r24
    41de:	19 95       	eicall
	}
}
    41e0:	00 00       	nop
    41e2:	df 91       	pop	r29
    41e4:	cf 91       	pop	r28
    41e6:	ff 91       	pop	r31
    41e8:	ef 91       	pop	r30
    41ea:	bf 91       	pop	r27
    41ec:	af 91       	pop	r26
    41ee:	9f 91       	pop	r25
    41f0:	8f 91       	pop	r24
    41f2:	7f 91       	pop	r23
    41f4:	6f 91       	pop	r22
    41f6:	5f 91       	pop	r21
    41f8:	4f 91       	pop	r20
    41fa:	3f 91       	pop	r19
    41fc:	2f 91       	pop	r18
    41fe:	0f 90       	pop	r0
    4200:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4204:	0f 90       	pop	r0
    4206:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    420a:	0f 90       	pop	r0
    420c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4210:	0f 90       	pop	r0
    4212:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4216:	0f 90       	pop	r0
    4218:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    421c:	0f 90       	pop	r0
    421e:	1f 90       	pop	r1
    4220:	18 95       	reti

00004222 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    4222:	1f 92       	push	r1
    4224:	0f 92       	push	r0
    4226:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    422a:	0f 92       	push	r0
    422c:	11 24       	eor	r1, r1
    422e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4232:	0f 92       	push	r0
    4234:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4238:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    423c:	0f 92       	push	r0
    423e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4242:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4246:	0f 92       	push	r0
    4248:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    424c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4250:	0f 92       	push	r0
    4252:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4256:	2f 93       	push	r18
    4258:	3f 93       	push	r19
    425a:	4f 93       	push	r20
    425c:	5f 93       	push	r21
    425e:	6f 93       	push	r22
    4260:	7f 93       	push	r23
    4262:	8f 93       	push	r24
    4264:	9f 93       	push	r25
    4266:	af 93       	push	r26
    4268:	bf 93       	push	r27
    426a:	ef 93       	push	r30
    426c:	ff 93       	push	r31
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    4276:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tce0_ccc_callback>
    427a:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tce0_ccc_callback+0x1>
    427e:	89 2b       	or	r24, r25
    4280:	31 f0       	breq	.+12     	; 0x428e <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    4282:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tce0_ccc_callback>
    4286:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tce0_ccc_callback+0x1>
    428a:	fc 01       	movw	r30, r24
    428c:	19 95       	eicall
	}
}
    428e:	00 00       	nop
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	ff 91       	pop	r31
    4296:	ef 91       	pop	r30
    4298:	bf 91       	pop	r27
    429a:	af 91       	pop	r26
    429c:	9f 91       	pop	r25
    429e:	8f 91       	pop	r24
    42a0:	7f 91       	pop	r23
    42a2:	6f 91       	pop	r22
    42a4:	5f 91       	pop	r21
    42a6:	4f 91       	pop	r20
    42a8:	3f 91       	pop	r19
    42aa:	2f 91       	pop	r18
    42ac:	0f 90       	pop	r0
    42ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    42b2:	0f 90       	pop	r0
    42b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    42b8:	0f 90       	pop	r0
    42ba:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    42be:	0f 90       	pop	r0
    42c0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    42c4:	0f 90       	pop	r0
    42c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    42ca:	0f 90       	pop	r0
    42cc:	1f 90       	pop	r1
    42ce:	18 95       	reti

000042d0 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    42d0:	1f 92       	push	r1
    42d2:	0f 92       	push	r0
    42d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    42d8:	0f 92       	push	r0
    42da:	11 24       	eor	r1, r1
    42dc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    42e0:	0f 92       	push	r0
    42e2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    42e6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    42ea:	0f 92       	push	r0
    42ec:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    42f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    42f4:	0f 92       	push	r0
    42f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    42fa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    42fe:	0f 92       	push	r0
    4300:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4304:	2f 93       	push	r18
    4306:	3f 93       	push	r19
    4308:	4f 93       	push	r20
    430a:	5f 93       	push	r21
    430c:	6f 93       	push	r22
    430e:	7f 93       	push	r23
    4310:	8f 93       	push	r24
    4312:	9f 93       	push	r25
    4314:	af 93       	push	r26
    4316:	bf 93       	push	r27
    4318:	ef 93       	push	r30
    431a:	ff 93       	push	r31
    431c:	cf 93       	push	r28
    431e:	df 93       	push	r29
    4320:	cd b7       	in	r28, 0x3d	; 61
    4322:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    4324:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tce0_ccd_callback>
    4328:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tce0_ccd_callback+0x1>
    432c:	89 2b       	or	r24, r25
    432e:	31 f0       	breq	.+12     	; 0x433c <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    4330:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tce0_ccd_callback>
    4334:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tce0_ccd_callback+0x1>
    4338:	fc 01       	movw	r30, r24
    433a:	19 95       	eicall
	}
}
    433c:	00 00       	nop
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	ff 91       	pop	r31
    4344:	ef 91       	pop	r30
    4346:	bf 91       	pop	r27
    4348:	af 91       	pop	r26
    434a:	9f 91       	pop	r25
    434c:	8f 91       	pop	r24
    434e:	7f 91       	pop	r23
    4350:	6f 91       	pop	r22
    4352:	5f 91       	pop	r21
    4354:	4f 91       	pop	r20
    4356:	3f 91       	pop	r19
    4358:	2f 91       	pop	r18
    435a:	0f 90       	pop	r0
    435c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4360:	0f 90       	pop	r0
    4362:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4366:	0f 90       	pop	r0
    4368:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    436c:	0f 90       	pop	r0
    436e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4372:	0f 90       	pop	r0
    4374:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4378:	0f 90       	pop	r0
    437a:	1f 90       	pop	r1
    437c:	18 95       	reti

0000437e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    437e:	1f 92       	push	r1
    4380:	0f 92       	push	r0
    4382:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4386:	0f 92       	push	r0
    4388:	11 24       	eor	r1, r1
    438a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    438e:	0f 92       	push	r0
    4390:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4394:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4398:	0f 92       	push	r0
    439a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    439e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43a2:	0f 92       	push	r0
    43a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43ac:	0f 92       	push	r0
    43ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43b2:	2f 93       	push	r18
    43b4:	3f 93       	push	r19
    43b6:	4f 93       	push	r20
    43b8:	5f 93       	push	r21
    43ba:	6f 93       	push	r22
    43bc:	7f 93       	push	r23
    43be:	8f 93       	push	r24
    43c0:	9f 93       	push	r25
    43c2:	af 93       	push	r26
    43c4:	bf 93       	push	r27
    43c6:	ef 93       	push	r30
    43c8:	ff 93       	push	r31
    43ca:	cf 93       	push	r28
    43cc:	df 93       	push	r29
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    43d2:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tce1_ovf_callback>
    43d6:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tce1_ovf_callback+0x1>
    43da:	89 2b       	or	r24, r25
    43dc:	31 f0       	breq	.+12     	; 0x43ea <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    43de:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tce1_ovf_callback>
    43e2:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tce1_ovf_callback+0x1>
    43e6:	fc 01       	movw	r30, r24
    43e8:	19 95       	eicall
	}
}
    43ea:	00 00       	nop
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	ff 91       	pop	r31
    43f2:	ef 91       	pop	r30
    43f4:	bf 91       	pop	r27
    43f6:	af 91       	pop	r26
    43f8:	9f 91       	pop	r25
    43fa:	8f 91       	pop	r24
    43fc:	7f 91       	pop	r23
    43fe:	6f 91       	pop	r22
    4400:	5f 91       	pop	r21
    4402:	4f 91       	pop	r20
    4404:	3f 91       	pop	r19
    4406:	2f 91       	pop	r18
    4408:	0f 90       	pop	r0
    440a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    440e:	0f 90       	pop	r0
    4410:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4414:	0f 90       	pop	r0
    4416:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    441a:	0f 90       	pop	r0
    441c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4420:	0f 90       	pop	r0
    4422:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4426:	0f 90       	pop	r0
    4428:	1f 90       	pop	r1
    442a:	18 95       	reti

0000442c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    442c:	1f 92       	push	r1
    442e:	0f 92       	push	r0
    4430:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4434:	0f 92       	push	r0
    4436:	11 24       	eor	r1, r1
    4438:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    443c:	0f 92       	push	r0
    443e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4442:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4446:	0f 92       	push	r0
    4448:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    444c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4450:	0f 92       	push	r0
    4452:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4456:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    445a:	0f 92       	push	r0
    445c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4460:	2f 93       	push	r18
    4462:	3f 93       	push	r19
    4464:	4f 93       	push	r20
    4466:	5f 93       	push	r21
    4468:	6f 93       	push	r22
    446a:	7f 93       	push	r23
    446c:	8f 93       	push	r24
    446e:	9f 93       	push	r25
    4470:	af 93       	push	r26
    4472:	bf 93       	push	r27
    4474:	ef 93       	push	r30
    4476:	ff 93       	push	r31
    4478:	cf 93       	push	r28
    447a:	df 93       	push	r29
    447c:	cd b7       	in	r28, 0x3d	; 61
    447e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    4480:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tce1_err_callback>
    4484:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tce1_err_callback+0x1>
    4488:	89 2b       	or	r24, r25
    448a:	31 f0       	breq	.+12     	; 0x4498 <__vector_54+0x6c>
		tc_tce1_err_callback();
    448c:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tce1_err_callback>
    4490:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tce1_err_callback+0x1>
    4494:	fc 01       	movw	r30, r24
    4496:	19 95       	eicall
	}
}
    4498:	00 00       	nop
    449a:	df 91       	pop	r29
    449c:	cf 91       	pop	r28
    449e:	ff 91       	pop	r31
    44a0:	ef 91       	pop	r30
    44a2:	bf 91       	pop	r27
    44a4:	af 91       	pop	r26
    44a6:	9f 91       	pop	r25
    44a8:	8f 91       	pop	r24
    44aa:	7f 91       	pop	r23
    44ac:	6f 91       	pop	r22
    44ae:	5f 91       	pop	r21
    44b0:	4f 91       	pop	r20
    44b2:	3f 91       	pop	r19
    44b4:	2f 91       	pop	r18
    44b6:	0f 90       	pop	r0
    44b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    44bc:	0f 90       	pop	r0
    44be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    44c2:	0f 90       	pop	r0
    44c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    44c8:	0f 90       	pop	r0
    44ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    44ce:	0f 90       	pop	r0
    44d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    44d4:	0f 90       	pop	r0
    44d6:	1f 90       	pop	r1
    44d8:	18 95       	reti

000044da <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    44da:	1f 92       	push	r1
    44dc:	0f 92       	push	r0
    44de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    44e2:	0f 92       	push	r0
    44e4:	11 24       	eor	r1, r1
    44e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    44ea:	0f 92       	push	r0
    44ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    44f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    44f4:	0f 92       	push	r0
    44f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    44fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    44fe:	0f 92       	push	r0
    4500:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4504:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4508:	0f 92       	push	r0
    450a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    450e:	2f 93       	push	r18
    4510:	3f 93       	push	r19
    4512:	4f 93       	push	r20
    4514:	5f 93       	push	r21
    4516:	6f 93       	push	r22
    4518:	7f 93       	push	r23
    451a:	8f 93       	push	r24
    451c:	9f 93       	push	r25
    451e:	af 93       	push	r26
    4520:	bf 93       	push	r27
    4522:	ef 93       	push	r30
    4524:	ff 93       	push	r31
    4526:	cf 93       	push	r28
    4528:	df 93       	push	r29
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    452e:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tce1_cca_callback>
    4532:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tce1_cca_callback+0x1>
    4536:	89 2b       	or	r24, r25
    4538:	31 f0       	breq	.+12     	; 0x4546 <__vector_55+0x6c>
		tc_tce1_cca_callback();
    453a:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tce1_cca_callback>
    453e:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tce1_cca_callback+0x1>
    4542:	fc 01       	movw	r30, r24
    4544:	19 95       	eicall
	}
}
    4546:	00 00       	nop
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	ff 91       	pop	r31
    454e:	ef 91       	pop	r30
    4550:	bf 91       	pop	r27
    4552:	af 91       	pop	r26
    4554:	9f 91       	pop	r25
    4556:	8f 91       	pop	r24
    4558:	7f 91       	pop	r23
    455a:	6f 91       	pop	r22
    455c:	5f 91       	pop	r21
    455e:	4f 91       	pop	r20
    4560:	3f 91       	pop	r19
    4562:	2f 91       	pop	r18
    4564:	0f 90       	pop	r0
    4566:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    456a:	0f 90       	pop	r0
    456c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4570:	0f 90       	pop	r0
    4572:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4576:	0f 90       	pop	r0
    4578:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    457c:	0f 90       	pop	r0
    457e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4582:	0f 90       	pop	r0
    4584:	1f 90       	pop	r1
    4586:	18 95       	reti

00004588 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    4588:	1f 92       	push	r1
    458a:	0f 92       	push	r0
    458c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4590:	0f 92       	push	r0
    4592:	11 24       	eor	r1, r1
    4594:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4598:	0f 92       	push	r0
    459a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    459e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45a2:	0f 92       	push	r0
    45a4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45a8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45ac:	0f 92       	push	r0
    45ae:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45b2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    45b6:	0f 92       	push	r0
    45b8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    45bc:	2f 93       	push	r18
    45be:	3f 93       	push	r19
    45c0:	4f 93       	push	r20
    45c2:	5f 93       	push	r21
    45c4:	6f 93       	push	r22
    45c6:	7f 93       	push	r23
    45c8:	8f 93       	push	r24
    45ca:	9f 93       	push	r25
    45cc:	af 93       	push	r26
    45ce:	bf 93       	push	r27
    45d0:	ef 93       	push	r30
    45d2:	ff 93       	push	r31
    45d4:	cf 93       	push	r28
    45d6:	df 93       	push	r29
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    45dc:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tce1_ccb_callback>
    45e0:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tce1_ccb_callback+0x1>
    45e4:	89 2b       	or	r24, r25
    45e6:	31 f0       	breq	.+12     	; 0x45f4 <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    45e8:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tce1_ccb_callback>
    45ec:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tce1_ccb_callback+0x1>
    45f0:	fc 01       	movw	r30, r24
    45f2:	19 95       	eicall
	}
}
    45f4:	00 00       	nop
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	ff 91       	pop	r31
    45fc:	ef 91       	pop	r30
    45fe:	bf 91       	pop	r27
    4600:	af 91       	pop	r26
    4602:	9f 91       	pop	r25
    4604:	8f 91       	pop	r24
    4606:	7f 91       	pop	r23
    4608:	6f 91       	pop	r22
    460a:	5f 91       	pop	r21
    460c:	4f 91       	pop	r20
    460e:	3f 91       	pop	r19
    4610:	2f 91       	pop	r18
    4612:	0f 90       	pop	r0
    4614:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4618:	0f 90       	pop	r0
    461a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    461e:	0f 90       	pop	r0
    4620:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4624:	0f 90       	pop	r0
    4626:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    462a:	0f 90       	pop	r0
    462c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4630:	0f 90       	pop	r0
    4632:	1f 90       	pop	r1
    4634:	18 95       	reti

00004636 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    4636:	1f 92       	push	r1
    4638:	0f 92       	push	r0
    463a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    463e:	0f 92       	push	r0
    4640:	11 24       	eor	r1, r1
    4642:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4646:	0f 92       	push	r0
    4648:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    464c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4650:	0f 92       	push	r0
    4652:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4656:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    465a:	0f 92       	push	r0
    465c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4660:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4664:	0f 92       	push	r0
    4666:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    466a:	2f 93       	push	r18
    466c:	3f 93       	push	r19
    466e:	4f 93       	push	r20
    4670:	5f 93       	push	r21
    4672:	6f 93       	push	r22
    4674:	7f 93       	push	r23
    4676:	8f 93       	push	r24
    4678:	9f 93       	push	r25
    467a:	af 93       	push	r26
    467c:	bf 93       	push	r27
    467e:	ef 93       	push	r30
    4680:	ff 93       	push	r31
    4682:	cf 93       	push	r28
    4684:	df 93       	push	r29
    4686:	cd b7       	in	r28, 0x3d	; 61
    4688:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    468a:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcf0_ovf_callback>
    468e:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcf0_ovf_callback+0x1>
    4692:	89 2b       	or	r24, r25
    4694:	31 f0       	breq	.+12     	; 0x46a2 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    4696:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcf0_ovf_callback>
    469a:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcf0_ovf_callback+0x1>
    469e:	fc 01       	movw	r30, r24
    46a0:	19 95       	eicall
	}
}
    46a2:	00 00       	nop
    46a4:	df 91       	pop	r29
    46a6:	cf 91       	pop	r28
    46a8:	ff 91       	pop	r31
    46aa:	ef 91       	pop	r30
    46ac:	bf 91       	pop	r27
    46ae:	af 91       	pop	r26
    46b0:	9f 91       	pop	r25
    46b2:	8f 91       	pop	r24
    46b4:	7f 91       	pop	r23
    46b6:	6f 91       	pop	r22
    46b8:	5f 91       	pop	r21
    46ba:	4f 91       	pop	r20
    46bc:	3f 91       	pop	r19
    46be:	2f 91       	pop	r18
    46c0:	0f 90       	pop	r0
    46c2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    46c6:	0f 90       	pop	r0
    46c8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    46cc:	0f 90       	pop	r0
    46ce:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    46d2:	0f 90       	pop	r0
    46d4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    46d8:	0f 90       	pop	r0
    46da:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    46de:	0f 90       	pop	r0
    46e0:	1f 90       	pop	r1
    46e2:	18 95       	reti

000046e4 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    46e4:	1f 92       	push	r1
    46e6:	0f 92       	push	r0
    46e8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    46ec:	0f 92       	push	r0
    46ee:	11 24       	eor	r1, r1
    46f0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    46f4:	0f 92       	push	r0
    46f6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    46fa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    46fe:	0f 92       	push	r0
    4700:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4704:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4708:	0f 92       	push	r0
    470a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    470e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4712:	0f 92       	push	r0
    4714:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4718:	2f 93       	push	r18
    471a:	3f 93       	push	r19
    471c:	4f 93       	push	r20
    471e:	5f 93       	push	r21
    4720:	6f 93       	push	r22
    4722:	7f 93       	push	r23
    4724:	8f 93       	push	r24
    4726:	9f 93       	push	r25
    4728:	af 93       	push	r26
    472a:	bf 93       	push	r27
    472c:	ef 93       	push	r30
    472e:	ff 93       	push	r31
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	cd b7       	in	r28, 0x3d	; 61
    4736:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    4738:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcf0_err_callback>
    473c:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcf0_err_callback+0x1>
    4740:	89 2b       	or	r24, r25
    4742:	31 f0       	breq	.+12     	; 0x4750 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    4744:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcf0_err_callback>
    4748:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcf0_err_callback+0x1>
    474c:	fc 01       	movw	r30, r24
    474e:	19 95       	eicall
	}
}
    4750:	00 00       	nop
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	ff 91       	pop	r31
    4758:	ef 91       	pop	r30
    475a:	bf 91       	pop	r27
    475c:	af 91       	pop	r26
    475e:	9f 91       	pop	r25
    4760:	8f 91       	pop	r24
    4762:	7f 91       	pop	r23
    4764:	6f 91       	pop	r22
    4766:	5f 91       	pop	r21
    4768:	4f 91       	pop	r20
    476a:	3f 91       	pop	r19
    476c:	2f 91       	pop	r18
    476e:	0f 90       	pop	r0
    4770:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4774:	0f 90       	pop	r0
    4776:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    477a:	0f 90       	pop	r0
    477c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4780:	0f 90       	pop	r0
    4782:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4786:	0f 90       	pop	r0
    4788:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    478c:	0f 90       	pop	r0
    478e:	1f 90       	pop	r1
    4790:	18 95       	reti

00004792 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    4792:	1f 92       	push	r1
    4794:	0f 92       	push	r0
    4796:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    479a:	0f 92       	push	r0
    479c:	11 24       	eor	r1, r1
    479e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47a2:	0f 92       	push	r0
    47a4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47a8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47ac:	0f 92       	push	r0
    47ae:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47b2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    47b6:	0f 92       	push	r0
    47b8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    47bc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47c0:	0f 92       	push	r0
    47c2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47c6:	2f 93       	push	r18
    47c8:	3f 93       	push	r19
    47ca:	4f 93       	push	r20
    47cc:	5f 93       	push	r21
    47ce:	6f 93       	push	r22
    47d0:	7f 93       	push	r23
    47d2:	8f 93       	push	r24
    47d4:	9f 93       	push	r25
    47d6:	af 93       	push	r26
    47d8:	bf 93       	push	r27
    47da:	ef 93       	push	r30
    47dc:	ff 93       	push	r31
    47de:	cf 93       	push	r28
    47e0:	df 93       	push	r29
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    47e6:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcf0_cca_callback>
    47ea:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcf0_cca_callback+0x1>
    47ee:	89 2b       	or	r24, r25
    47f0:	31 f0       	breq	.+12     	; 0x47fe <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    47f2:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcf0_cca_callback>
    47f6:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcf0_cca_callback+0x1>
    47fa:	fc 01       	movw	r30, r24
    47fc:	19 95       	eicall
	}
}
    47fe:	00 00       	nop
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	ff 91       	pop	r31
    4806:	ef 91       	pop	r30
    4808:	bf 91       	pop	r27
    480a:	af 91       	pop	r26
    480c:	9f 91       	pop	r25
    480e:	8f 91       	pop	r24
    4810:	7f 91       	pop	r23
    4812:	6f 91       	pop	r22
    4814:	5f 91       	pop	r21
    4816:	4f 91       	pop	r20
    4818:	3f 91       	pop	r19
    481a:	2f 91       	pop	r18
    481c:	0f 90       	pop	r0
    481e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4822:	0f 90       	pop	r0
    4824:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4828:	0f 90       	pop	r0
    482a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    482e:	0f 90       	pop	r0
    4830:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4834:	0f 90       	pop	r0
    4836:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    483a:	0f 90       	pop	r0
    483c:	1f 90       	pop	r1
    483e:	18 95       	reti

00004840 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    4840:	1f 92       	push	r1
    4842:	0f 92       	push	r0
    4844:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4848:	0f 92       	push	r0
    484a:	11 24       	eor	r1, r1
    484c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4850:	0f 92       	push	r0
    4852:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4856:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    485a:	0f 92       	push	r0
    485c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4860:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4864:	0f 92       	push	r0
    4866:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    486a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    486e:	0f 92       	push	r0
    4870:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4874:	2f 93       	push	r18
    4876:	3f 93       	push	r19
    4878:	4f 93       	push	r20
    487a:	5f 93       	push	r21
    487c:	6f 93       	push	r22
    487e:	7f 93       	push	r23
    4880:	8f 93       	push	r24
    4882:	9f 93       	push	r25
    4884:	af 93       	push	r26
    4886:	bf 93       	push	r27
    4888:	ef 93       	push	r30
    488a:	ff 93       	push	r31
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	cd b7       	in	r28, 0x3d	; 61
    4892:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    4894:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcf0_ccb_callback>
    4898:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcf0_ccb_callback+0x1>
    489c:	89 2b       	or	r24, r25
    489e:	31 f0       	breq	.+12     	; 0x48ac <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    48a0:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcf0_ccb_callback>
    48a4:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcf0_ccb_callback+0x1>
    48a8:	fc 01       	movw	r30, r24
    48aa:	19 95       	eicall
	}
}
    48ac:	00 00       	nop
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	ff 91       	pop	r31
    48b4:	ef 91       	pop	r30
    48b6:	bf 91       	pop	r27
    48b8:	af 91       	pop	r26
    48ba:	9f 91       	pop	r25
    48bc:	8f 91       	pop	r24
    48be:	7f 91       	pop	r23
    48c0:	6f 91       	pop	r22
    48c2:	5f 91       	pop	r21
    48c4:	4f 91       	pop	r20
    48c6:	3f 91       	pop	r19
    48c8:	2f 91       	pop	r18
    48ca:	0f 90       	pop	r0
    48cc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    48d0:	0f 90       	pop	r0
    48d2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    48d6:	0f 90       	pop	r0
    48d8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    48dc:	0f 90       	pop	r0
    48de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    48e2:	0f 90       	pop	r0
    48e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    48e8:	0f 90       	pop	r0
    48ea:	1f 90       	pop	r1
    48ec:	18 95       	reti

000048ee <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    48ee:	1f 92       	push	r1
    48f0:	0f 92       	push	r0
    48f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    48f6:	0f 92       	push	r0
    48f8:	11 24       	eor	r1, r1
    48fa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    48fe:	0f 92       	push	r0
    4900:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4904:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4908:	0f 92       	push	r0
    490a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    490e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4912:	0f 92       	push	r0
    4914:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4918:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    491c:	0f 92       	push	r0
    491e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4922:	2f 93       	push	r18
    4924:	3f 93       	push	r19
    4926:	4f 93       	push	r20
    4928:	5f 93       	push	r21
    492a:	6f 93       	push	r22
    492c:	7f 93       	push	r23
    492e:	8f 93       	push	r24
    4930:	9f 93       	push	r25
    4932:	af 93       	push	r26
    4934:	bf 93       	push	r27
    4936:	ef 93       	push	r30
    4938:	ff 93       	push	r31
    493a:	cf 93       	push	r28
    493c:	df 93       	push	r29
    493e:	cd b7       	in	r28, 0x3d	; 61
    4940:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    4942:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcf0_ccc_callback>
    4946:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcf0_ccc_callback+0x1>
    494a:	89 2b       	or	r24, r25
    494c:	31 f0       	breq	.+12     	; 0x495a <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    494e:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcf0_ccc_callback>
    4952:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcf0_ccc_callback+0x1>
    4956:	fc 01       	movw	r30, r24
    4958:	19 95       	eicall
	}
}
    495a:	00 00       	nop
    495c:	df 91       	pop	r29
    495e:	cf 91       	pop	r28
    4960:	ff 91       	pop	r31
    4962:	ef 91       	pop	r30
    4964:	bf 91       	pop	r27
    4966:	af 91       	pop	r26
    4968:	9f 91       	pop	r25
    496a:	8f 91       	pop	r24
    496c:	7f 91       	pop	r23
    496e:	6f 91       	pop	r22
    4970:	5f 91       	pop	r21
    4972:	4f 91       	pop	r20
    4974:	3f 91       	pop	r19
    4976:	2f 91       	pop	r18
    4978:	0f 90       	pop	r0
    497a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    497e:	0f 90       	pop	r0
    4980:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4984:	0f 90       	pop	r0
    4986:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    498a:	0f 90       	pop	r0
    498c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4990:	0f 90       	pop	r0
    4992:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4996:	0f 90       	pop	r0
    4998:	1f 90       	pop	r1
    499a:	18 95       	reti

0000499c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    499c:	1f 92       	push	r1
    499e:	0f 92       	push	r0
    49a0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    49a4:	0f 92       	push	r0
    49a6:	11 24       	eor	r1, r1
    49a8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49ac:	0f 92       	push	r0
    49ae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49b2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49b6:	0f 92       	push	r0
    49b8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49bc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    49c0:	0f 92       	push	r0
    49c2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    49c6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    49ca:	0f 92       	push	r0
    49cc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    49d0:	2f 93       	push	r18
    49d2:	3f 93       	push	r19
    49d4:	4f 93       	push	r20
    49d6:	5f 93       	push	r21
    49d8:	6f 93       	push	r22
    49da:	7f 93       	push	r23
    49dc:	8f 93       	push	r24
    49de:	9f 93       	push	r25
    49e0:	af 93       	push	r26
    49e2:	bf 93       	push	r27
    49e4:	ef 93       	push	r30
    49e6:	ff 93       	push	r31
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    49f0:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tcf0_ccd_callback>
    49f4:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tcf0_ccd_callback+0x1>
    49f8:	89 2b       	or	r24, r25
    49fa:	31 f0       	breq	.+12     	; 0x4a08 <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    49fc:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tcf0_ccd_callback>
    4a00:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tcf0_ccd_callback+0x1>
    4a04:	fc 01       	movw	r30, r24
    4a06:	19 95       	eicall
	}
}
    4a08:	00 00       	nop
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	ff 91       	pop	r31
    4a10:	ef 91       	pop	r30
    4a12:	bf 91       	pop	r27
    4a14:	af 91       	pop	r26
    4a16:	9f 91       	pop	r25
    4a18:	8f 91       	pop	r24
    4a1a:	7f 91       	pop	r23
    4a1c:	6f 91       	pop	r22
    4a1e:	5f 91       	pop	r21
    4a20:	4f 91       	pop	r20
    4a22:	3f 91       	pop	r19
    4a24:	2f 91       	pop	r18
    4a26:	0f 90       	pop	r0
    4a28:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a2c:	0f 90       	pop	r0
    4a2e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a32:	0f 90       	pop	r0
    4a34:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a38:	0f 90       	pop	r0
    4a3a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a3e:	0f 90       	pop	r0
    4a40:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a44:	0f 90       	pop	r0
    4a46:	1f 90       	pop	r1
    4a48:	18 95       	reti

00004a4a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    4a4a:	1f 92       	push	r1
    4a4c:	0f 92       	push	r0
    4a4e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a52:	0f 92       	push	r0
    4a54:	11 24       	eor	r1, r1
    4a56:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a5a:	0f 92       	push	r0
    4a5c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a60:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a64:	0f 92       	push	r0
    4a66:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a6a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a6e:	0f 92       	push	r0
    4a70:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a74:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a78:	0f 92       	push	r0
    4a7a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a7e:	2f 93       	push	r18
    4a80:	3f 93       	push	r19
    4a82:	4f 93       	push	r20
    4a84:	5f 93       	push	r21
    4a86:	6f 93       	push	r22
    4a88:	7f 93       	push	r23
    4a8a:	8f 93       	push	r24
    4a8c:	9f 93       	push	r25
    4a8e:	af 93       	push	r26
    4a90:	bf 93       	push	r27
    4a92:	ef 93       	push	r30
    4a94:	ff 93       	push	r31
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    4a9e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tcf1_ovf_callback>
    4aa2:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tcf1_ovf_callback+0x1>
    4aa6:	89 2b       	or	r24, r25
    4aa8:	31 f0       	breq	.+12     	; 0x4ab6 <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    4aaa:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tcf1_ovf_callback>
    4aae:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tcf1_ovf_callback+0x1>
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	19 95       	eicall
	}
}
    4ab6:	00 00       	nop
    4ab8:	df 91       	pop	r29
    4aba:	cf 91       	pop	r28
    4abc:	ff 91       	pop	r31
    4abe:	ef 91       	pop	r30
    4ac0:	bf 91       	pop	r27
    4ac2:	af 91       	pop	r26
    4ac4:	9f 91       	pop	r25
    4ac6:	8f 91       	pop	r24
    4ac8:	7f 91       	pop	r23
    4aca:	6f 91       	pop	r22
    4acc:	5f 91       	pop	r21
    4ace:	4f 91       	pop	r20
    4ad0:	3f 91       	pop	r19
    4ad2:	2f 91       	pop	r18
    4ad4:	0f 90       	pop	r0
    4ad6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ada:	0f 90       	pop	r0
    4adc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ae0:	0f 90       	pop	r0
    4ae2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ae6:	0f 90       	pop	r0
    4ae8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4aec:	0f 90       	pop	r0
    4aee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4af2:	0f 90       	pop	r0
    4af4:	1f 90       	pop	r1
    4af6:	18 95       	reti

00004af8 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    4af8:	1f 92       	push	r1
    4afa:	0f 92       	push	r0
    4afc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b00:	0f 92       	push	r0
    4b02:	11 24       	eor	r1, r1
    4b04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b08:	0f 92       	push	r0
    4b0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b12:	0f 92       	push	r0
    4b14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b1c:	0f 92       	push	r0
    4b1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b26:	0f 92       	push	r0
    4b28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b2c:	2f 93       	push	r18
    4b2e:	3f 93       	push	r19
    4b30:	4f 93       	push	r20
    4b32:	5f 93       	push	r21
    4b34:	6f 93       	push	r22
    4b36:	7f 93       	push	r23
    4b38:	8f 93       	push	r24
    4b3a:	9f 93       	push	r25
    4b3c:	af 93       	push	r26
    4b3e:	bf 93       	push	r27
    4b40:	ef 93       	push	r30
    4b42:	ff 93       	push	r31
    4b44:	cf 93       	push	r28
    4b46:	df 93       	push	r29
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    4b4c:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tcf1_err_callback>
    4b50:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tcf1_err_callback+0x1>
    4b54:	89 2b       	or	r24, r25
    4b56:	31 f0       	breq	.+12     	; 0x4b64 <__vector_115+0x6c>
		tc_tcf1_err_callback();
    4b58:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tcf1_err_callback>
    4b5c:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tcf1_err_callback+0x1>
    4b60:	fc 01       	movw	r30, r24
    4b62:	19 95       	eicall
	}
}
    4b64:	00 00       	nop
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	ff 91       	pop	r31
    4b6c:	ef 91       	pop	r30
    4b6e:	bf 91       	pop	r27
    4b70:	af 91       	pop	r26
    4b72:	9f 91       	pop	r25
    4b74:	8f 91       	pop	r24
    4b76:	7f 91       	pop	r23
    4b78:	6f 91       	pop	r22
    4b7a:	5f 91       	pop	r21
    4b7c:	4f 91       	pop	r20
    4b7e:	3f 91       	pop	r19
    4b80:	2f 91       	pop	r18
    4b82:	0f 90       	pop	r0
    4b84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b88:	0f 90       	pop	r0
    4b8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b8e:	0f 90       	pop	r0
    4b90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b94:	0f 90       	pop	r0
    4b96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b9a:	0f 90       	pop	r0
    4b9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ba0:	0f 90       	pop	r0
    4ba2:	1f 90       	pop	r1
    4ba4:	18 95       	reti

00004ba6 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    4ba6:	1f 92       	push	r1
    4ba8:	0f 92       	push	r0
    4baa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4bae:	0f 92       	push	r0
    4bb0:	11 24       	eor	r1, r1
    4bb2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bb6:	0f 92       	push	r0
    4bb8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bbc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4bc0:	0f 92       	push	r0
    4bc2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4bc6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4bca:	0f 92       	push	r0
    4bcc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4bd0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4bd4:	0f 92       	push	r0
    4bd6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4bda:	2f 93       	push	r18
    4bdc:	3f 93       	push	r19
    4bde:	4f 93       	push	r20
    4be0:	5f 93       	push	r21
    4be2:	6f 93       	push	r22
    4be4:	7f 93       	push	r23
    4be6:	8f 93       	push	r24
    4be8:	9f 93       	push	r25
    4bea:	af 93       	push	r26
    4bec:	bf 93       	push	r27
    4bee:	ef 93       	push	r30
    4bf0:	ff 93       	push	r31
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    4bfa:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tcf1_cca_callback>
    4bfe:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tcf1_cca_callback+0x1>
    4c02:	89 2b       	or	r24, r25
    4c04:	31 f0       	breq	.+12     	; 0x4c12 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    4c06:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tcf1_cca_callback>
    4c0a:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tcf1_cca_callback+0x1>
    4c0e:	fc 01       	movw	r30, r24
    4c10:	19 95       	eicall
	}
}
    4c12:	00 00       	nop
    4c14:	df 91       	pop	r29
    4c16:	cf 91       	pop	r28
    4c18:	ff 91       	pop	r31
    4c1a:	ef 91       	pop	r30
    4c1c:	bf 91       	pop	r27
    4c1e:	af 91       	pop	r26
    4c20:	9f 91       	pop	r25
    4c22:	8f 91       	pop	r24
    4c24:	7f 91       	pop	r23
    4c26:	6f 91       	pop	r22
    4c28:	5f 91       	pop	r21
    4c2a:	4f 91       	pop	r20
    4c2c:	3f 91       	pop	r19
    4c2e:	2f 91       	pop	r18
    4c30:	0f 90       	pop	r0
    4c32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c36:	0f 90       	pop	r0
    4c38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c3c:	0f 90       	pop	r0
    4c3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c42:	0f 90       	pop	r0
    4c44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c48:	0f 90       	pop	r0
    4c4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c4e:	0f 90       	pop	r0
    4c50:	1f 90       	pop	r1
    4c52:	18 95       	reti

00004c54 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    4c54:	1f 92       	push	r1
    4c56:	0f 92       	push	r0
    4c58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c5c:	0f 92       	push	r0
    4c5e:	11 24       	eor	r1, r1
    4c60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c64:	0f 92       	push	r0
    4c66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c6e:	0f 92       	push	r0
    4c70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c78:	0f 92       	push	r0
    4c7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c82:	0f 92       	push	r0
    4c84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c88:	2f 93       	push	r18
    4c8a:	3f 93       	push	r19
    4c8c:	4f 93       	push	r20
    4c8e:	5f 93       	push	r21
    4c90:	6f 93       	push	r22
    4c92:	7f 93       	push	r23
    4c94:	8f 93       	push	r24
    4c96:	9f 93       	push	r25
    4c98:	af 93       	push	r26
    4c9a:	bf 93       	push	r27
    4c9c:	ef 93       	push	r30
    4c9e:	ff 93       	push	r31
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    4ca8:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tcf1_ccb_callback>
    4cac:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tcf1_ccb_callback+0x1>
    4cb0:	89 2b       	or	r24, r25
    4cb2:	31 f0       	breq	.+12     	; 0x4cc0 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    4cb4:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tcf1_ccb_callback>
    4cb8:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tcf1_ccb_callback+0x1>
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	19 95       	eicall
	}
}
    4cc0:	00 00       	nop
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	ff 91       	pop	r31
    4cc8:	ef 91       	pop	r30
    4cca:	bf 91       	pop	r27
    4ccc:	af 91       	pop	r26
    4cce:	9f 91       	pop	r25
    4cd0:	8f 91       	pop	r24
    4cd2:	7f 91       	pop	r23
    4cd4:	6f 91       	pop	r22
    4cd6:	5f 91       	pop	r21
    4cd8:	4f 91       	pop	r20
    4cda:	3f 91       	pop	r19
    4cdc:	2f 91       	pop	r18
    4cde:	0f 90       	pop	r0
    4ce0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ce4:	0f 90       	pop	r0
    4ce6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4cea:	0f 90       	pop	r0
    4cec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4cf0:	0f 90       	pop	r0
    4cf2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4cf6:	0f 90       	pop	r0
    4cf8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4cfc:	0f 90       	pop	r0
    4cfe:	1f 90       	pop	r1
    4d00:	18 95       	reti

00004d02 <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    4d02:	1f 92       	push	r1
    4d04:	0f 92       	push	r0
    4d06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d0a:	0f 92       	push	r0
    4d0c:	11 24       	eor	r1, r1
    4d0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d12:	0f 92       	push	r0
    4d14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d1c:	0f 92       	push	r0
    4d1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d26:	0f 92       	push	r0
    4d28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d30:	0f 92       	push	r0
    4d32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d36:	2f 93       	push	r18
    4d38:	3f 93       	push	r19
    4d3a:	4f 93       	push	r20
    4d3c:	5f 93       	push	r21
    4d3e:	6f 93       	push	r22
    4d40:	7f 93       	push	r23
    4d42:	8f 93       	push	r24
    4d44:	9f 93       	push	r25
    4d46:	af 93       	push	r26
    4d48:	bf 93       	push	r27
    4d4a:	ef 93       	push	r30
    4d4c:	ff 93       	push	r31
    4d4e:	cf 93       	push	r28
    4d50:	df 93       	push	r29
    4d52:	cd b7       	in	r28, 0x3d	; 61
    4d54:	de b7       	in	r29, 0x3e	; 62
    4d56:	e9 d1       	rcall	.+978    	; 0x512a <twim_interrupt_handler>
    4d58:	00 00       	nop
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	ff 91       	pop	r31
    4d60:	ef 91       	pop	r30
    4d62:	bf 91       	pop	r27
    4d64:	af 91       	pop	r26
    4d66:	9f 91       	pop	r25
    4d68:	8f 91       	pop	r24
    4d6a:	7f 91       	pop	r23
    4d6c:	6f 91       	pop	r22
    4d6e:	5f 91       	pop	r21
    4d70:	4f 91       	pop	r20
    4d72:	3f 91       	pop	r19
    4d74:	2f 91       	pop	r18
    4d76:	0f 90       	pop	r0
    4d78:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d7c:	0f 90       	pop	r0
    4d7e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d82:	0f 90       	pop	r0
    4d84:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d88:	0f 90       	pop	r0
    4d8a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d8e:	0f 90       	pop	r0
    4d90:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d94:	0f 90       	pop	r0
    4d96:	1f 90       	pop	r1
    4d98:	18 95       	reti

00004d9a <__vector_76>:
    4d9a:	1f 92       	push	r1
    4d9c:	0f 92       	push	r0
    4d9e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4da2:	0f 92       	push	r0
    4da4:	11 24       	eor	r1, r1
    4da6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4daa:	0f 92       	push	r0
    4dac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4db0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4db4:	0f 92       	push	r0
    4db6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4dba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4dbe:	0f 92       	push	r0
    4dc0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4dc4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4dc8:	0f 92       	push	r0
    4dca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4dce:	2f 93       	push	r18
    4dd0:	3f 93       	push	r19
    4dd2:	4f 93       	push	r20
    4dd4:	5f 93       	push	r21
    4dd6:	6f 93       	push	r22
    4dd8:	7f 93       	push	r23
    4dda:	8f 93       	push	r24
    4ddc:	9f 93       	push	r25
    4dde:	af 93       	push	r26
    4de0:	bf 93       	push	r27
    4de2:	ef 93       	push	r30
    4de4:	ff 93       	push	r31
    4de6:	cf 93       	push	r28
    4de8:	df 93       	push	r29
    4dea:	cd b7       	in	r28, 0x3d	; 61
    4dec:	de b7       	in	r29, 0x3e	; 62
    4dee:	9d d1       	rcall	.+826    	; 0x512a <twim_interrupt_handler>
    4df0:	00 00       	nop
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	ff 91       	pop	r31
    4df8:	ef 91       	pop	r30
    4dfa:	bf 91       	pop	r27
    4dfc:	af 91       	pop	r26
    4dfe:	9f 91       	pop	r25
    4e00:	8f 91       	pop	r24
    4e02:	7f 91       	pop	r23
    4e04:	6f 91       	pop	r22
    4e06:	5f 91       	pop	r21
    4e08:	4f 91       	pop	r20
    4e0a:	3f 91       	pop	r19
    4e0c:	2f 91       	pop	r18
    4e0e:	0f 90       	pop	r0
    4e10:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e14:	0f 90       	pop	r0
    4e16:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e1a:	0f 90       	pop	r0
    4e1c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e20:	0f 90       	pop	r0
    4e22:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e26:	0f 90       	pop	r0
    4e28:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e2c:	0f 90       	pop	r0
    4e2e:	1f 90       	pop	r1
    4e30:	18 95       	reti

00004e32 <__vector_46>:
    4e32:	1f 92       	push	r1
    4e34:	0f 92       	push	r0
    4e36:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e3a:	0f 92       	push	r0
    4e3c:	11 24       	eor	r1, r1
    4e3e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e42:	0f 92       	push	r0
    4e44:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e48:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e4c:	0f 92       	push	r0
    4e4e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e52:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e56:	0f 92       	push	r0
    4e58:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e5c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e60:	0f 92       	push	r0
    4e62:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e66:	2f 93       	push	r18
    4e68:	3f 93       	push	r19
    4e6a:	4f 93       	push	r20
    4e6c:	5f 93       	push	r21
    4e6e:	6f 93       	push	r22
    4e70:	7f 93       	push	r23
    4e72:	8f 93       	push	r24
    4e74:	9f 93       	push	r25
    4e76:	af 93       	push	r26
    4e78:	bf 93       	push	r27
    4e7a:	ef 93       	push	r30
    4e7c:	ff 93       	push	r31
    4e7e:	cf 93       	push	r28
    4e80:	df 93       	push	r29
    4e82:	cd b7       	in	r28, 0x3d	; 61
    4e84:	de b7       	in	r29, 0x3e	; 62
    4e86:	51 d1       	rcall	.+674    	; 0x512a <twim_interrupt_handler>
    4e88:	00 00       	nop
    4e8a:	df 91       	pop	r29
    4e8c:	cf 91       	pop	r28
    4e8e:	ff 91       	pop	r31
    4e90:	ef 91       	pop	r30
    4e92:	bf 91       	pop	r27
    4e94:	af 91       	pop	r26
    4e96:	9f 91       	pop	r25
    4e98:	8f 91       	pop	r24
    4e9a:	7f 91       	pop	r23
    4e9c:	6f 91       	pop	r22
    4e9e:	5f 91       	pop	r21
    4ea0:	4f 91       	pop	r20
    4ea2:	3f 91       	pop	r19
    4ea4:	2f 91       	pop	r18
    4ea6:	0f 90       	pop	r0
    4ea8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4eac:	0f 90       	pop	r0
    4eae:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4eb2:	0f 90       	pop	r0
    4eb4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4eb8:	0f 90       	pop	r0
    4eba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ebe:	0f 90       	pop	r0
    4ec0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ec4:	0f 90       	pop	r0
    4ec6:	1f 90       	pop	r1
    4ec8:	18 95       	reti

00004eca <__vector_107>:
    4eca:	1f 92       	push	r1
    4ecc:	0f 92       	push	r0
    4ece:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4ed2:	0f 92       	push	r0
    4ed4:	11 24       	eor	r1, r1
    4ed6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4eda:	0f 92       	push	r0
    4edc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ee0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ee4:	0f 92       	push	r0
    4ee6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4eea:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4eee:	0f 92       	push	r0
    4ef0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ef4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ef8:	0f 92       	push	r0
    4efa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4efe:	2f 93       	push	r18
    4f00:	3f 93       	push	r19
    4f02:	4f 93       	push	r20
    4f04:	5f 93       	push	r21
    4f06:	6f 93       	push	r22
    4f08:	7f 93       	push	r23
    4f0a:	8f 93       	push	r24
    4f0c:	9f 93       	push	r25
    4f0e:	af 93       	push	r26
    4f10:	bf 93       	push	r27
    4f12:	ef 93       	push	r30
    4f14:	ff 93       	push	r31
    4f16:	cf 93       	push	r28
    4f18:	df 93       	push	r29
    4f1a:	cd b7       	in	r28, 0x3d	; 61
    4f1c:	de b7       	in	r29, 0x3e	; 62
    4f1e:	05 d1       	rcall	.+522    	; 0x512a <twim_interrupt_handler>
    4f20:	00 00       	nop
    4f22:	df 91       	pop	r29
    4f24:	cf 91       	pop	r28
    4f26:	ff 91       	pop	r31
    4f28:	ef 91       	pop	r30
    4f2a:	bf 91       	pop	r27
    4f2c:	af 91       	pop	r26
    4f2e:	9f 91       	pop	r25
    4f30:	8f 91       	pop	r24
    4f32:	7f 91       	pop	r23
    4f34:	6f 91       	pop	r22
    4f36:	5f 91       	pop	r21
    4f38:	4f 91       	pop	r20
    4f3a:	3f 91       	pop	r19
    4f3c:	2f 91       	pop	r18
    4f3e:	0f 90       	pop	r0
    4f40:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f44:	0f 90       	pop	r0
    4f46:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f4a:	0f 90       	pop	r0
    4f4c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f50:	0f 90       	pop	r0
    4f52:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f56:	0f 90       	pop	r0
    4f58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f5c:	0f 90       	pop	r0
    4f5e:	1f 90       	pop	r1
    4f60:	18 95       	reti

00004f62 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    4f62:	cf 93       	push	r28
    4f64:	df 93       	push	r29
    4f66:	cd b7       	in	r28, 0x3d	; 61
    4f68:	de b7       	in	r29, 0x3e	; 62
    4f6a:	28 97       	sbiw	r28, 0x08	; 8
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    4f70:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <transfer>
    4f74:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <transfer+0x1>
    4f78:	89 83       	std	Y+1, r24	; 0x01
    4f7a:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    4f7c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <transfer+0x2>
    4f80:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <transfer+0x3>
    4f84:	8b 83       	std	Y+3, r24	; 0x03
    4f86:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    4f88:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <transfer+0x4>
    4f8c:	30 91 d9 20 	lds	r19, 0x20D9	; 0x8020d9 <transfer+0x5>
    4f90:	8b 81       	ldd	r24, Y+3	; 0x03
    4f92:	9c 81       	ldd	r25, Y+4	; 0x04
    4f94:	fc 01       	movw	r30, r24
    4f96:	84 81       	ldd	r24, Z+4	; 0x04
    4f98:	95 81       	ldd	r25, Z+5	; 0x05
    4f9a:	28 17       	cp	r18, r24
    4f9c:	39 07       	cpc	r19, r25
    4f9e:	e4 f4       	brge	.+56     	; 0x4fd8 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    4fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa4:	01 96       	adiw	r24, 0x01	; 1
    4fa6:	8d 83       	std	Y+5, r24	; 0x05
    4fa8:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    4faa:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <transfer+0x4>
    4fae:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <transfer+0x5>
    4fb2:	9c 01       	movw	r18, r24
    4fb4:	2f 5f       	subi	r18, 0xFF	; 255
    4fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb8:	20 93 d8 20 	sts	0x20D8, r18	; 0x8020d8 <transfer+0x4>
    4fbc:	30 93 d9 20 	sts	0x20D9, r19	; 0x8020d9 <transfer+0x5>
    4fc0:	9c 01       	movw	r18, r24
    4fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc6:	82 0f       	add	r24, r18
    4fc8:	93 1f       	adc	r25, r19
    4fca:	fc 01       	movw	r30, r24
    4fcc:	20 81       	ld	r18, Z
    4fce:	89 81       	ldd	r24, Y+1	; 0x01
    4fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    4fd6:	3f c0       	rjmp	.+126    	; 0x5056 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    4fd8:	20 91 da 20 	lds	r18, 0x20DA	; 0x8020da <transfer+0x6>
    4fdc:	30 91 db 20 	lds	r19, 0x20DB	; 0x8020db <transfer+0x7>
    4fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	80 85       	ldd	r24, Z+8	; 0x08
    4fe8:	91 85       	ldd	r25, Z+9	; 0x09
    4fea:	28 17       	cp	r18, r24
    4fec:	39 07       	cpc	r19, r25
    4fee:	60 f5       	brcc	.+88     	; 0x5048 <twim_write_handler+0xe6>

		if (transfer.read) {
    4ff0:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <transfer+0x8>
    4ff4:	88 23       	and	r24, r24
    4ff6:	59 f0       	breq	.+22     	; 0x500e <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4ff8:	89 81       	ldd	r24, Y+1	; 0x01
    4ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	86 81       	ldd	r24, Z+6	; 0x06
    5000:	28 2f       	mov	r18, r24
    5002:	21 60       	ori	r18, 0x01	; 1
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	9a 81       	ldd	r25, Y+2	; 0x02
    5008:	fc 01       	movw	r30, r24
    500a:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    500c:	24 c0       	rjmp	.+72     	; 0x5056 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    500e:	8b 81       	ldd	r24, Y+3	; 0x03
    5010:	9c 81       	ldd	r25, Y+4	; 0x04
    5012:	fc 01       	movw	r30, r24
    5014:	86 81       	ldd	r24, Z+6	; 0x06
    5016:	97 81       	ldd	r25, Z+7	; 0x07
    5018:	8f 83       	std	Y+7, r24	; 0x07
    501a:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    501c:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <transfer+0x6>
    5020:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <transfer+0x7>
    5024:	9c 01       	movw	r18, r24
    5026:	2f 5f       	subi	r18, 0xFF	; 255
    5028:	3f 4f       	sbci	r19, 0xFF	; 255
    502a:	20 93 da 20 	sts	0x20DA, r18	; 0x8020da <transfer+0x6>
    502e:	30 93 db 20 	sts	0x20DB, r19	; 0x8020db <transfer+0x7>
    5032:	2f 81       	ldd	r18, Y+7	; 0x07
    5034:	38 85       	ldd	r19, Y+8	; 0x08
    5036:	82 0f       	add	r24, r18
    5038:	93 1f       	adc	r25, r19
    503a:	fc 01       	movw	r30, r24
    503c:	20 81       	ld	r18, Z
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	fc 01       	movw	r30, r24
    5044:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    5046:	07 c0       	rjmp	.+14     	; 0x5056 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	9a 81       	ldd	r25, Y+2	; 0x02
    504c:	23 e0       	ldi	r18, 0x03	; 3
    504e:	fc 01       	movw	r30, r24
    5050:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    5052:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <transfer+0xa>
	}
}
    5056:	00 00       	nop
    5058:	28 96       	adiw	r28, 0x08	; 8
    505a:	cd bf       	out	0x3d, r28	; 61
    505c:	de bf       	out	0x3e, r29	; 62
    505e:	df 91       	pop	r29
    5060:	cf 91       	pop	r28
    5062:	08 95       	ret

00005064 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	00 d0       	rcall	.+0      	; 0x506a <twim_read_handler+0x6>
    506a:	00 d0       	rcall	.+0      	; 0x506c <twim_read_handler+0x8>
    506c:	cd b7       	in	r28, 0x3d	; 61
    506e:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    5070:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <transfer>
    5074:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <transfer+0x1>
    5078:	89 83       	std	Y+1, r24	; 0x01
    507a:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    507c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <transfer+0x2>
    5080:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <transfer+0x3>
    5084:	8b 83       	std	Y+3, r24	; 0x03
    5086:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    5088:	20 91 da 20 	lds	r18, 0x20DA	; 0x8020da <transfer+0x6>
    508c:	30 91 db 20 	lds	r19, 0x20DB	; 0x8020db <transfer+0x7>
    5090:	8b 81       	ldd	r24, Y+3	; 0x03
    5092:	9c 81       	ldd	r25, Y+4	; 0x04
    5094:	fc 01       	movw	r30, r24
    5096:	80 85       	ldd	r24, Z+8	; 0x08
    5098:	91 85       	ldd	r25, Z+9	; 0x09
    509a:	28 17       	cp	r18, r24
    509c:	39 07       	cpc	r19, r25
    509e:	b0 f5       	brcc	.+108    	; 0x510c <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    50a0:	8b 81       	ldd	r24, Y+3	; 0x03
    50a2:	9c 81       	ldd	r25, Y+4	; 0x04
    50a4:	fc 01       	movw	r30, r24
    50a6:	86 81       	ldd	r24, Z+6	; 0x06
    50a8:	97 81       	ldd	r25, Z+7	; 0x07
    50aa:	8d 83       	std	Y+5, r24	; 0x05
    50ac:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    50ae:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <transfer+0x6>
    50b2:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <transfer+0x7>
    50b6:	9c 01       	movw	r18, r24
    50b8:	2f 5f       	subi	r18, 0xFF	; 255
    50ba:	3f 4f       	sbci	r19, 0xFF	; 255
    50bc:	20 93 da 20 	sts	0x20DA, r18	; 0x8020da <transfer+0x6>
    50c0:	30 93 db 20 	sts	0x20DB, r19	; 0x8020db <transfer+0x7>
    50c4:	2d 81       	ldd	r18, Y+5	; 0x05
    50c6:	3e 81       	ldd	r19, Y+6	; 0x06
    50c8:	82 0f       	add	r24, r18
    50ca:	93 1f       	adc	r25, r19
    50cc:	29 81       	ldd	r18, Y+1	; 0x01
    50ce:	3a 81       	ldd	r19, Y+2	; 0x02
    50d0:	f9 01       	movw	r30, r18
    50d2:	27 81       	ldd	r18, Z+7	; 0x07
    50d4:	fc 01       	movw	r30, r24
    50d6:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    50d8:	20 91 da 20 	lds	r18, 0x20DA	; 0x8020da <transfer+0x6>
    50dc:	30 91 db 20 	lds	r19, 0x20DB	; 0x8020db <transfer+0x7>
    50e0:	8b 81       	ldd	r24, Y+3	; 0x03
    50e2:	9c 81       	ldd	r25, Y+4	; 0x04
    50e4:	fc 01       	movw	r30, r24
    50e6:	80 85       	ldd	r24, Z+8	; 0x08
    50e8:	91 85       	ldd	r25, Z+9	; 0x09
    50ea:	28 17       	cp	r18, r24
    50ec:	39 07       	cpc	r19, r25
    50ee:	30 f4       	brcc	.+12     	; 0x50fc <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    50f0:	89 81       	ldd	r24, Y+1	; 0x01
    50f2:	9a 81       	ldd	r25, Y+2	; 0x02
    50f4:	22 e0       	ldi	r18, 0x02	; 2
    50f6:	fc 01       	movw	r30, r24
    50f8:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    50fa:	10 c0       	rjmp	.+32     	; 0x511c <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    50fc:	89 81       	ldd	r24, Y+1	; 0x01
    50fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5100:	27 e0       	ldi	r18, 0x07	; 7
    5102:	fc 01       	movw	r30, r24
    5104:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    5106:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    510a:	08 c0       	rjmp	.+16     	; 0x511c <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	9a 81       	ldd	r25, Y+2	; 0x02
    5110:	23 e0       	ldi	r18, 0x03	; 3
    5112:	fc 01       	movw	r30, r24
    5114:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    5116:	89 ef       	ldi	r24, 0xF9	; 249
    5118:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <transfer+0xa>
	}
}
    511c:	00 00       	nop
    511e:	26 96       	adiw	r28, 0x06	; 6
    5120:	cd bf       	out	0x3d, r28	; 61
    5122:	de bf       	out	0x3e, r29	; 62
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	08 95       	ret

0000512a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    512a:	cf 93       	push	r28
    512c:	df 93       	push	r29
    512e:	1f 92       	push	r1
    5130:	cd b7       	in	r28, 0x3d	; 61
    5132:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    5134:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <transfer>
    5138:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <transfer+0x1>
    513c:	fc 01       	movw	r30, r24
    513e:	84 81       	ldd	r24, Z+4	; 0x04
    5140:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    5142:	89 81       	ldd	r24, Y+1	; 0x01
    5144:	88 2f       	mov	r24, r24
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	88 70       	andi	r24, 0x08	; 8
    514a:	99 27       	eor	r25, r25
    514c:	89 2b       	or	r24, r25
    514e:	99 f0       	breq	.+38     	; 0x5176 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    5150:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <transfer>
    5154:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <transfer+0x1>
    5158:	29 81       	ldd	r18, Y+1	; 0x01
    515a:	28 60       	ori	r18, 0x08	; 8
    515c:	fc 01       	movw	r30, r24
    515e:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    5160:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <transfer>
    5164:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <transfer+0x1>
    5168:	23 e0       	ldi	r18, 0x03	; 3
    516a:	fc 01       	movw	r30, r24
    516c:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    516e:	86 ef       	ldi	r24, 0xF6	; 246
    5170:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    5174:	2a c0       	rjmp	.+84     	; 0x51ca <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    5176:	89 81       	ldd	r24, Y+1	; 0x01
    5178:	88 2f       	mov	r24, r24
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	84 70       	andi	r24, 0x04	; 4
    517e:	99 27       	eor	r25, r25
    5180:	89 2b       	or	r24, r25
    5182:	39 f4       	brne	.+14     	; 0x5192 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	88 2f       	mov	r24, r24
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	80 71       	andi	r24, 0x10	; 16
    518c:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    518e:	89 2b       	or	r24, r25
    5190:	59 f0       	breq	.+22     	; 0x51a8 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5192:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <transfer>
    5196:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <transfer+0x1>
    519a:	23 e0       	ldi	r18, 0x03	; 3
    519c:	fc 01       	movw	r30, r24
    519e:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    51a0:	8f ef       	ldi	r24, 0xFF	; 255
    51a2:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    51a6:	11 c0       	rjmp	.+34     	; 0x51ca <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    51a8:	89 81       	ldd	r24, Y+1	; 0x01
    51aa:	88 2f       	mov	r24, r24
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	80 74       	andi	r24, 0x40	; 64
    51b0:	99 27       	eor	r25, r25
    51b2:	89 2b       	or	r24, r25
    51b4:	11 f0       	breq	.+4      	; 0x51ba <twim_interrupt_handler+0x90>

		twim_write_handler();
    51b6:	d5 de       	rcall	.-598    	; 0x4f62 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    51b8:	08 c0       	rjmp	.+16     	; 0x51ca <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	88 23       	and	r24, r24

		twim_read_handler();
    51be:	14 f4       	brge	.+4      	; 0x51c4 <twim_interrupt_handler+0x9a>
    51c0:	51 df       	rcall	.-350    	; 0x5064 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    51c2:	03 c0       	rjmp	.+6      	; 0x51ca <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    51c4:	8b ef       	ldi	r24, 0xFB	; 251
    51c6:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <transfer+0xa>
	}
}
    51ca:	00 00       	nop
    51cc:	0f 90       	pop	r0
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	08 95       	ret

000051d4 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    51d4:	cf 93       	push	r28
    51d6:	df 93       	push	r29
    51d8:	1f 92       	push	r1
    51da:	1f 92       	push	r1
    51dc:	cd b7       	in	r28, 0x3d	; 61
    51de:	de b7       	in	r29, 0x3e	; 62
    51e0:	89 83       	std	Y+1, r24	; 0x01
    51e2:	9a 83       	std	Y+2, r25	; 0x02
    51e4:	89 81       	ldd	r24, Y+1	; 0x01
    51e6:	9a 81       	ldd	r25, Y+2	; 0x02
    51e8:	fc 01       	movw	r30, r24
    51ea:	84 81       	ldd	r24, Z+4	; 0x04
    51ec:	28 2f       	mov	r18, r24
    51ee:	20 61       	ori	r18, 0x10	; 16
    51f0:	89 81       	ldd	r24, Y+1	; 0x01
    51f2:	9a 81       	ldd	r25, Y+2	; 0x02
    51f4:	fc 01       	movw	r30, r24
    51f6:	24 83       	std	Z+4, r18	; 0x04
    51f8:	00 00       	nop
    51fa:	0f 90       	pop	r0
    51fc:	0f 90       	pop	r0
    51fe:	df 91       	pop	r29
    5200:	cf 91       	pop	r28
    5202:	08 95       	ret

00005204 <usart_format_set>:
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	cd b7       	in	r28, 0x3d	; 61
    520a:	de b7       	in	r29, 0x3e	; 62
    520c:	25 97       	sbiw	r28, 0x05	; 5
    520e:	cd bf       	out	0x3d, r28	; 61
    5210:	de bf       	out	0x3e, r29	; 62
    5212:	89 83       	std	Y+1, r24	; 0x01
    5214:	9a 83       	std	Y+2, r25	; 0x02
    5216:	6b 83       	std	Y+3, r22	; 0x03
    5218:	4c 83       	std	Y+4, r20	; 0x04
    521a:	2d 83       	std	Y+5, r18	; 0x05
    521c:	9b 81       	ldd	r25, Y+3	; 0x03
    521e:	8c 81       	ldd	r24, Y+4	; 0x04
    5220:	89 2b       	or	r24, r25
    5222:	98 2f       	mov	r25, r24
    5224:	8d 81       	ldd	r24, Y+5	; 0x05
    5226:	88 23       	and	r24, r24
    5228:	11 f0       	breq	.+4      	; 0x522e <usart_format_set+0x2a>
    522a:	88 e0       	ldi	r24, 0x08	; 8
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <usart_format_set+0x2c>
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	89 2b       	or	r24, r25
    5232:	28 2f       	mov	r18, r24
    5234:	89 81       	ldd	r24, Y+1	; 0x01
    5236:	9a 81       	ldd	r25, Y+2	; 0x02
    5238:	fc 01       	movw	r30, r24
    523a:	25 83       	std	Z+5, r18	; 0x05
    523c:	00 00       	nop
    523e:	25 96       	adiw	r28, 0x05	; 5
    5240:	cd bf       	out	0x3d, r28	; 61
    5242:	de bf       	out	0x3e, r29	; 62
    5244:	df 91       	pop	r29
    5246:	cf 91       	pop	r28
    5248:	08 95       	ret

0000524a <usart_tx_enable>:
    524a:	cf 93       	push	r28
    524c:	df 93       	push	r29
    524e:	1f 92       	push	r1
    5250:	1f 92       	push	r1
    5252:	cd b7       	in	r28, 0x3d	; 61
    5254:	de b7       	in	r29, 0x3e	; 62
    5256:	89 83       	std	Y+1, r24	; 0x01
    5258:	9a 83       	std	Y+2, r25	; 0x02
    525a:	89 81       	ldd	r24, Y+1	; 0x01
    525c:	9a 81       	ldd	r25, Y+2	; 0x02
    525e:	fc 01       	movw	r30, r24
    5260:	84 81       	ldd	r24, Z+4	; 0x04
    5262:	28 2f       	mov	r18, r24
    5264:	28 60       	ori	r18, 0x08	; 8
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	9a 81       	ldd	r25, Y+2	; 0x02
    526a:	fc 01       	movw	r30, r24
    526c:	24 83       	std	Z+4, r18	; 0x04
    526e:	00 00       	nop
    5270:	0f 90       	pop	r0
    5272:	0f 90       	pop	r0
    5274:	df 91       	pop	r29
    5276:	cf 91       	pop	r28
    5278:	08 95       	ret

0000527a <usart_set_mode>:
    527a:	cf 93       	push	r28
    527c:	df 93       	push	r29
    527e:	00 d0       	rcall	.+0      	; 0x5280 <usart_set_mode+0x6>
    5280:	cd b7       	in	r28, 0x3d	; 61
    5282:	de b7       	in	r29, 0x3e	; 62
    5284:	89 83       	std	Y+1, r24	; 0x01
    5286:	9a 83       	std	Y+2, r25	; 0x02
    5288:	6b 83       	std	Y+3, r22	; 0x03
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	9a 81       	ldd	r25, Y+2	; 0x02
    528e:	fc 01       	movw	r30, r24
    5290:	85 81       	ldd	r24, Z+5	; 0x05
    5292:	98 2f       	mov	r25, r24
    5294:	9f 73       	andi	r25, 0x3F	; 63
    5296:	8b 81       	ldd	r24, Y+3	; 0x03
    5298:	89 2b       	or	r24, r25
    529a:	28 2f       	mov	r18, r24
    529c:	89 81       	ldd	r24, Y+1	; 0x01
    529e:	9a 81       	ldd	r25, Y+2	; 0x02
    52a0:	fc 01       	movw	r30, r24
    52a2:	25 83       	std	Z+5, r18	; 0x05
    52a4:	00 00       	nop
    52a6:	23 96       	adiw	r28, 0x03	; 3
    52a8:	cd bf       	out	0x3d, r28	; 61
    52aa:	de bf       	out	0x3e, r29	; 62
    52ac:	df 91       	pop	r29
    52ae:	cf 91       	pop	r28
    52b0:	08 95       	ret

000052b2 <usart_data_register_is_empty>:
    52b2:	cf 93       	push	r28
    52b4:	df 93       	push	r29
    52b6:	1f 92       	push	r1
    52b8:	1f 92       	push	r1
    52ba:	cd b7       	in	r28, 0x3d	; 61
    52bc:	de b7       	in	r29, 0x3e	; 62
    52be:	89 83       	std	Y+1, r24	; 0x01
    52c0:	9a 83       	std	Y+2, r25	; 0x02
    52c2:	89 81       	ldd	r24, Y+1	; 0x01
    52c4:	9a 81       	ldd	r25, Y+2	; 0x02
    52c6:	fc 01       	movw	r30, r24
    52c8:	81 81       	ldd	r24, Z+1	; 0x01
    52ca:	88 2f       	mov	r24, r24
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	80 72       	andi	r24, 0x20	; 32
    52d0:	99 27       	eor	r25, r25
    52d2:	21 e0       	ldi	r18, 0x01	; 1
    52d4:	89 2b       	or	r24, r25
    52d6:	09 f4       	brne	.+2      	; 0x52da <usart_data_register_is_empty+0x28>
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	82 2f       	mov	r24, r18
    52dc:	0f 90       	pop	r0
    52de:	0f 90       	pop	r0
    52e0:	df 91       	pop	r29
    52e2:	cf 91       	pop	r28
    52e4:	08 95       	ret

000052e6 <usart_rx_is_complete>:
    52e6:	cf 93       	push	r28
    52e8:	df 93       	push	r29
    52ea:	1f 92       	push	r1
    52ec:	1f 92       	push	r1
    52ee:	cd b7       	in	r28, 0x3d	; 61
    52f0:	de b7       	in	r29, 0x3e	; 62
    52f2:	89 83       	std	Y+1, r24	; 0x01
    52f4:	9a 83       	std	Y+2, r25	; 0x02
    52f6:	89 81       	ldd	r24, Y+1	; 0x01
    52f8:	9a 81       	ldd	r25, Y+2	; 0x02
    52fa:	fc 01       	movw	r30, r24
    52fc:	81 81       	ldd	r24, Z+1	; 0x01
    52fe:	88 2f       	mov	r24, r24
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	80 78       	andi	r24, 0x80	; 128
    5304:	99 27       	eor	r25, r25
    5306:	21 e0       	ldi	r18, 0x01	; 1
    5308:	89 2b       	or	r24, r25
    530a:	09 f4       	brne	.+2      	; 0x530e <usart_rx_is_complete+0x28>
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	82 2f       	mov	r24, r18
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	df 91       	pop	r29
    5316:	cf 91       	pop	r28
    5318:	08 95       	ret

0000531a <sysclk_get_main_hz>:
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	cd b7       	in	r28, 0x3d	; 61
    5320:	de b7       	in	r29, 0x3e	; 62
    5322:	80 e0       	ldi	r24, 0x00	; 0
    5324:	98 e4       	ldi	r25, 0x48	; 72
    5326:	a8 ee       	ldi	r26, 0xE8	; 232
    5328:	b1 e0       	ldi	r27, 0x01	; 1
    532a:	bc 01       	movw	r22, r24
    532c:	cd 01       	movw	r24, r26
    532e:	df 91       	pop	r29
    5330:	cf 91       	pop	r28
    5332:	08 95       	ret

00005334 <sysclk_get_per4_hz>:
    5334:	cf 93       	push	r28
    5336:	df 93       	push	r29
    5338:	1f 92       	push	r1
    533a:	cd b7       	in	r28, 0x3d	; 61
    533c:	de b7       	in	r29, 0x3e	; 62
    533e:	19 82       	std	Y+1, r1	; 0x01
    5340:	ec df       	rcall	.-40     	; 0x531a <sysclk_get_main_hz>
    5342:	dc 01       	movw	r26, r24
    5344:	cb 01       	movw	r24, r22
    5346:	29 81       	ldd	r18, Y+1	; 0x01
    5348:	22 2f       	mov	r18, r18
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	04 c0       	rjmp	.+8      	; 0x5356 <sysclk_get_per4_hz+0x22>
    534e:	b6 95       	lsr	r27
    5350:	a7 95       	ror	r26
    5352:	97 95       	ror	r25
    5354:	87 95       	ror	r24
    5356:	2a 95       	dec	r18
    5358:	d2 f7       	brpl	.-12     	; 0x534e <sysclk_get_per4_hz+0x1a>
    535a:	bc 01       	movw	r22, r24
    535c:	cd 01       	movw	r24, r26
    535e:	0f 90       	pop	r0
    5360:	df 91       	pop	r29
    5362:	cf 91       	pop	r28
    5364:	08 95       	ret

00005366 <sysclk_get_per2_hz>:
    5366:	cf 93       	push	r28
    5368:	df 93       	push	r29
    536a:	cd b7       	in	r28, 0x3d	; 61
    536c:	de b7       	in	r29, 0x3e	; 62
    536e:	e2 df       	rcall	.-60     	; 0x5334 <sysclk_get_per4_hz>
    5370:	dc 01       	movw	r26, r24
    5372:	cb 01       	movw	r24, r22
    5374:	bc 01       	movw	r22, r24
    5376:	cd 01       	movw	r24, r26
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	08 95       	ret

0000537e <sysclk_get_per_hz>:
    537e:	cf 93       	push	r28
    5380:	df 93       	push	r29
    5382:	cd b7       	in	r28, 0x3d	; 61
    5384:	de b7       	in	r29, 0x3e	; 62
    5386:	ef df       	rcall	.-34     	; 0x5366 <sysclk_get_per2_hz>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	bc 01       	movw	r22, r24
    538e:	cd 01       	movw	r24, r26
    5390:	df 91       	pop	r29
    5392:	cf 91       	pop	r28
    5394:	08 95       	ret

00005396 <sysclk_enable_peripheral_clock>:
    5396:	cf 93       	push	r28
    5398:	df 93       	push	r29
    539a:	1f 92       	push	r1
    539c:	1f 92       	push	r1
    539e:	cd b7       	in	r28, 0x3d	; 61
    53a0:	de b7       	in	r29, 0x3e	; 62
    53a2:	89 83       	std	Y+1, r24	; 0x01
    53a4:	9a 83       	std	Y+2, r25	; 0x02
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
    53a8:	9a 81       	ldd	r25, Y+2	; 0x02
    53aa:	89 2b       	or	r24, r25
    53ac:	09 f4       	brne	.+2      	; 0x53b0 <sysclk_enable_peripheral_clock+0x1a>
    53ae:	85 c1       	rjmp	.+778    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    53b0:	89 81       	ldd	r24, Y+1	; 0x01
    53b2:	9a 81       	ldd	r25, Y+2	; 0x02
    53b4:	80 3c       	cpi	r24, 0xC0	; 192
    53b6:	91 05       	cpc	r25, r1
    53b8:	29 f4       	brne	.+10     	; 0x53c4 <sysclk_enable_peripheral_clock+0x2e>
    53ba:	60 e1       	ldi	r22, 0x10	; 16
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    53c2:	7b c1       	rjmp	.+758    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	9a 81       	ldd	r25, Y+2	; 0x02
    53c8:	80 34       	cpi	r24, 0x40	; 64
    53ca:	94 40       	sbci	r25, 0x04	; 4
    53cc:	29 f4       	brne	.+10     	; 0x53d8 <sysclk_enable_peripheral_clock+0x42>
    53ce:	68 e0       	ldi	r22, 0x08	; 8
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    53d6:	71 c1       	rjmp	.+738    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    53d8:	89 81       	ldd	r24, Y+1	; 0x01
    53da:	9a 81       	ldd	r25, Y+2	; 0x02
    53dc:	81 15       	cp	r24, r1
    53de:	94 40       	sbci	r25, 0x04	; 4
    53e0:	29 f4       	brne	.+10     	; 0x53ec <sysclk_enable_peripheral_clock+0x56>
    53e2:	64 e0       	ldi	r22, 0x04	; 4
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    53ea:	67 c1       	rjmp	.+718    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	9a 81       	ldd	r25, Y+2	; 0x02
    53f0:	80 38       	cpi	r24, 0x80	; 128
    53f2:	91 40       	sbci	r25, 0x01	; 1
    53f4:	29 f4       	brne	.+10     	; 0x5400 <sysclk_enable_peripheral_clock+0x6a>
    53f6:	62 e0       	ldi	r22, 0x02	; 2
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    53fe:	5d c1       	rjmp	.+698    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5400:	89 81       	ldd	r24, Y+1	; 0x01
    5402:	9a 81       	ldd	r25, Y+2	; 0x02
    5404:	81 15       	cp	r24, r1
    5406:	91 40       	sbci	r25, 0x01	; 1
    5408:	29 f4       	brne	.+10     	; 0x5414 <sysclk_enable_peripheral_clock+0x7e>
    540a:	61 e0       	ldi	r22, 0x01	; 1
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5412:	53 c1       	rjmp	.+678    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5414:	89 81       	ldd	r24, Y+1	; 0x01
    5416:	9a 81       	ldd	r25, Y+2	; 0x02
    5418:	80 38       	cpi	r24, 0x80	; 128
    541a:	93 40       	sbci	r25, 0x03	; 3
    541c:	29 f4       	brne	.+10     	; 0x5428 <sysclk_enable_peripheral_clock+0x92>
    541e:	61 e0       	ldi	r22, 0x01	; 1
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5426:	49 c1       	rjmp	.+658    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	9a 81       	ldd	r25, Y+2	; 0x02
    542c:	80 39       	cpi	r24, 0x90	; 144
    542e:	93 40       	sbci	r25, 0x03	; 3
    5430:	29 f4       	brne	.+10     	; 0x543c <sysclk_enable_peripheral_clock+0xa6>
    5432:	61 e0       	ldi	r22, 0x01	; 1
    5434:	82 e0       	ldi	r24, 0x02	; 2
    5436:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    543a:	3f c1       	rjmp	.+638    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    543c:	89 81       	ldd	r24, Y+1	; 0x01
    543e:	9a 81       	ldd	r25, Y+2	; 0x02
    5440:	81 15       	cp	r24, r1
    5442:	92 40       	sbci	r25, 0x02	; 2
    5444:	29 f4       	brne	.+10     	; 0x5450 <sysclk_enable_peripheral_clock+0xba>
    5446:	62 e0       	ldi	r22, 0x02	; 2
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    544e:	35 c1       	rjmp	.+618    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	9a 81       	ldd	r25, Y+2	; 0x02
    5454:	80 34       	cpi	r24, 0x40	; 64
    5456:	92 40       	sbci	r25, 0x02	; 2
    5458:	29 f4       	brne	.+10     	; 0x5464 <sysclk_enable_peripheral_clock+0xce>
    545a:	62 e0       	ldi	r22, 0x02	; 2
    545c:	82 e0       	ldi	r24, 0x02	; 2
    545e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5462:	2b c1       	rjmp	.+598    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5464:	89 81       	ldd	r24, Y+1	; 0x01
    5466:	9a 81       	ldd	r25, Y+2	; 0x02
    5468:	81 15       	cp	r24, r1
    546a:	93 40       	sbci	r25, 0x03	; 3
    546c:	29 f4       	brne	.+10     	; 0x5478 <sysclk_enable_peripheral_clock+0xe2>
    546e:	64 e0       	ldi	r22, 0x04	; 4
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5476:	21 c1       	rjmp	.+578    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5478:	89 81       	ldd	r24, Y+1	; 0x01
    547a:	9a 81       	ldd	r25, Y+2	; 0x02
    547c:	80 32       	cpi	r24, 0x20	; 32
    547e:	93 40       	sbci	r25, 0x03	; 3
    5480:	29 f4       	brne	.+10     	; 0x548c <sysclk_enable_peripheral_clock+0xf6>
    5482:	64 e0       	ldi	r22, 0x04	; 4
    5484:	82 e0       	ldi	r24, 0x02	; 2
    5486:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    548a:	17 c1       	rjmp	.+558    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    548c:	89 81       	ldd	r24, Y+1	; 0x01
    548e:	9a 81       	ldd	r25, Y+2	; 0x02
    5490:	81 15       	cp	r24, r1
    5492:	98 40       	sbci	r25, 0x08	; 8
    5494:	29 f4       	brne	.+10     	; 0x54a0 <sysclk_enable_peripheral_clock+0x10a>
    5496:	61 e0       	ldi	r22, 0x01	; 1
    5498:	83 e0       	ldi	r24, 0x03	; 3
    549a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    549e:	0d c1       	rjmp	.+538    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    54a0:	89 81       	ldd	r24, Y+1	; 0x01
    54a2:	9a 81       	ldd	r25, Y+2	; 0x02
    54a4:	81 15       	cp	r24, r1
    54a6:	99 40       	sbci	r25, 0x09	; 9
    54a8:	29 f4       	brne	.+10     	; 0x54b4 <sysclk_enable_peripheral_clock+0x11e>
    54aa:	61 e0       	ldi	r22, 0x01	; 1
    54ac:	84 e0       	ldi	r24, 0x04	; 4
    54ae:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    54b2:	03 c1       	rjmp	.+518    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    54b4:	89 81       	ldd	r24, Y+1	; 0x01
    54b6:	9a 81       	ldd	r25, Y+2	; 0x02
    54b8:	81 15       	cp	r24, r1
    54ba:	9a 40       	sbci	r25, 0x0A	; 10
    54bc:	29 f4       	brne	.+10     	; 0x54c8 <sysclk_enable_peripheral_clock+0x132>
    54be:	61 e0       	ldi	r22, 0x01	; 1
    54c0:	85 e0       	ldi	r24, 0x05	; 5
    54c2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    54c6:	f9 c0       	rjmp	.+498    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    54c8:	89 81       	ldd	r24, Y+1	; 0x01
    54ca:	9a 81       	ldd	r25, Y+2	; 0x02
    54cc:	81 15       	cp	r24, r1
    54ce:	9b 40       	sbci	r25, 0x0B	; 11
    54d0:	29 f4       	brne	.+10     	; 0x54dc <sysclk_enable_peripheral_clock+0x146>
    54d2:	61 e0       	ldi	r22, 0x01	; 1
    54d4:	86 e0       	ldi	r24, 0x06	; 6
    54d6:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    54da:	ef c0       	rjmp	.+478    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
    54de:	9a 81       	ldd	r25, Y+2	; 0x02
    54e0:	80 34       	cpi	r24, 0x40	; 64
    54e2:	98 40       	sbci	r25, 0x08	; 8
    54e4:	29 f4       	brne	.+10     	; 0x54f0 <sysclk_enable_peripheral_clock+0x15a>
    54e6:	62 e0       	ldi	r22, 0x02	; 2
    54e8:	83 e0       	ldi	r24, 0x03	; 3
    54ea:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    54ee:	e5 c0       	rjmp	.+458    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    54f0:	89 81       	ldd	r24, Y+1	; 0x01
    54f2:	9a 81       	ldd	r25, Y+2	; 0x02
    54f4:	80 34       	cpi	r24, 0x40	; 64
    54f6:	99 40       	sbci	r25, 0x09	; 9
    54f8:	29 f4       	brne	.+10     	; 0x5504 <sysclk_enable_peripheral_clock+0x16e>
    54fa:	62 e0       	ldi	r22, 0x02	; 2
    54fc:	84 e0       	ldi	r24, 0x04	; 4
    54fe:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5502:	db c0       	rjmp	.+438    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5504:	89 81       	ldd	r24, Y+1	; 0x01
    5506:	9a 81       	ldd	r25, Y+2	; 0x02
    5508:	80 34       	cpi	r24, 0x40	; 64
    550a:	9a 40       	sbci	r25, 0x0A	; 10
    550c:	29 f4       	brne	.+10     	; 0x5518 <sysclk_enable_peripheral_clock+0x182>
    550e:	62 e0       	ldi	r22, 0x02	; 2
    5510:	85 e0       	ldi	r24, 0x05	; 5
    5512:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5516:	d1 c0       	rjmp	.+418    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5518:	89 81       	ldd	r24, Y+1	; 0x01
    551a:	9a 81       	ldd	r25, Y+2	; 0x02
    551c:	80 34       	cpi	r24, 0x40	; 64
    551e:	9b 40       	sbci	r25, 0x0B	; 11
    5520:	29 f4       	brne	.+10     	; 0x552c <sysclk_enable_peripheral_clock+0x196>
    5522:	62 e0       	ldi	r22, 0x02	; 2
    5524:	86 e0       	ldi	r24, 0x06	; 6
    5526:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    552a:	c7 c0       	rjmp	.+398    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	9a 81       	ldd	r25, Y+2	; 0x02
    5530:	80 39       	cpi	r24, 0x90	; 144
    5532:	98 40       	sbci	r25, 0x08	; 8
    5534:	29 f4       	brne	.+10     	; 0x5540 <sysclk_enable_peripheral_clock+0x1aa>
    5536:	64 e0       	ldi	r22, 0x04	; 4
    5538:	83 e0       	ldi	r24, 0x03	; 3
    553a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    553e:	bd c0       	rjmp	.+378    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5540:	89 81       	ldd	r24, Y+1	; 0x01
    5542:	9a 81       	ldd	r25, Y+2	; 0x02
    5544:	80 39       	cpi	r24, 0x90	; 144
    5546:	99 40       	sbci	r25, 0x09	; 9
    5548:	29 f4       	brne	.+10     	; 0x5554 <sysclk_enable_peripheral_clock+0x1be>
    554a:	64 e0       	ldi	r22, 0x04	; 4
    554c:	84 e0       	ldi	r24, 0x04	; 4
    554e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5552:	b3 c0       	rjmp	.+358    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5554:	89 81       	ldd	r24, Y+1	; 0x01
    5556:	9a 81       	ldd	r25, Y+2	; 0x02
    5558:	80 39       	cpi	r24, 0x90	; 144
    555a:	9a 40       	sbci	r25, 0x0A	; 10
    555c:	29 f4       	brne	.+10     	; 0x5568 <sysclk_enable_peripheral_clock+0x1d2>
    555e:	64 e0       	ldi	r22, 0x04	; 4
    5560:	85 e0       	ldi	r24, 0x05	; 5
    5562:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5566:	a9 c0       	rjmp	.+338    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5568:	89 81       	ldd	r24, Y+1	; 0x01
    556a:	9a 81       	ldd	r25, Y+2	; 0x02
    556c:	80 39       	cpi	r24, 0x90	; 144
    556e:	9b 40       	sbci	r25, 0x0B	; 11
    5570:	29 f4       	brne	.+10     	; 0x557c <sysclk_enable_peripheral_clock+0x1e6>
    5572:	64 e0       	ldi	r22, 0x04	; 4
    5574:	86 e0       	ldi	r24, 0x06	; 6
    5576:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    557a:	9f c0       	rjmp	.+318    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	9a 81       	ldd	r25, Y+2	; 0x02
    5580:	80 3c       	cpi	r24, 0xC0	; 192
    5582:	98 40       	sbci	r25, 0x08	; 8
    5584:	29 f4       	brne	.+10     	; 0x5590 <sysclk_enable_peripheral_clock+0x1fa>
    5586:	68 e0       	ldi	r22, 0x08	; 8
    5588:	83 e0       	ldi	r24, 0x03	; 3
    558a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    558e:	95 c0       	rjmp	.+298    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5590:	89 81       	ldd	r24, Y+1	; 0x01
    5592:	9a 81       	ldd	r25, Y+2	; 0x02
    5594:	80 3c       	cpi	r24, 0xC0	; 192
    5596:	99 40       	sbci	r25, 0x09	; 9
    5598:	29 f4       	brne	.+10     	; 0x55a4 <sysclk_enable_peripheral_clock+0x20e>
    559a:	68 e0       	ldi	r22, 0x08	; 8
    559c:	84 e0       	ldi	r24, 0x04	; 4
    559e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    55a2:	8b c0       	rjmp	.+278    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    55a4:	89 81       	ldd	r24, Y+1	; 0x01
    55a6:	9a 81       	ldd	r25, Y+2	; 0x02
    55a8:	80 3c       	cpi	r24, 0xC0	; 192
    55aa:	9a 40       	sbci	r25, 0x0A	; 10
    55ac:	29 f4       	brne	.+10     	; 0x55b8 <sysclk_enable_peripheral_clock+0x222>
    55ae:	68 e0       	ldi	r22, 0x08	; 8
    55b0:	85 e0       	ldi	r24, 0x05	; 5
    55b2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    55b6:	81 c0       	rjmp	.+258    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    55b8:	89 81       	ldd	r24, Y+1	; 0x01
    55ba:	9a 81       	ldd	r25, Y+2	; 0x02
    55bc:	80 3c       	cpi	r24, 0xC0	; 192
    55be:	9b 40       	sbci	r25, 0x0B	; 11
    55c0:	29 f4       	brne	.+10     	; 0x55cc <sysclk_enable_peripheral_clock+0x236>
    55c2:	68 e0       	ldi	r22, 0x08	; 8
    55c4:	86 e0       	ldi	r24, 0x06	; 6
    55c6:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    55ca:	77 c0       	rjmp	.+238    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	9a 81       	ldd	r25, Y+2	; 0x02
    55d0:	80 3a       	cpi	r24, 0xA0	; 160
    55d2:	98 40       	sbci	r25, 0x08	; 8
    55d4:	29 f4       	brne	.+10     	; 0x55e0 <sysclk_enable_peripheral_clock+0x24a>
    55d6:	60 e1       	ldi	r22, 0x10	; 16
    55d8:	83 e0       	ldi	r24, 0x03	; 3
    55da:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    55de:	6d c0       	rjmp	.+218    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    55e0:	89 81       	ldd	r24, Y+1	; 0x01
    55e2:	9a 81       	ldd	r25, Y+2	; 0x02
    55e4:	80 3a       	cpi	r24, 0xA0	; 160
    55e6:	99 40       	sbci	r25, 0x09	; 9
    55e8:	29 f4       	brne	.+10     	; 0x55f4 <sysclk_enable_peripheral_clock+0x25e>
    55ea:	60 e1       	ldi	r22, 0x10	; 16
    55ec:	84 e0       	ldi	r24, 0x04	; 4
    55ee:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    55f2:	63 c0       	rjmp	.+198    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    55f4:	89 81       	ldd	r24, Y+1	; 0x01
    55f6:	9a 81       	ldd	r25, Y+2	; 0x02
    55f8:	80 3a       	cpi	r24, 0xA0	; 160
    55fa:	9a 40       	sbci	r25, 0x0A	; 10
    55fc:	29 f4       	brne	.+10     	; 0x5608 <sysclk_enable_peripheral_clock+0x272>
    55fe:	60 e1       	ldi	r22, 0x10	; 16
    5600:	85 e0       	ldi	r24, 0x05	; 5
    5602:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5606:	59 c0       	rjmp	.+178    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	80 3a       	cpi	r24, 0xA0	; 160
    560e:	9b 40       	sbci	r25, 0x0B	; 11
    5610:	29 f4       	brne	.+10     	; 0x561c <sysclk_enable_peripheral_clock+0x286>
    5612:	60 e1       	ldi	r22, 0x10	; 16
    5614:	86 e0       	ldi	r24, 0x06	; 6
    5616:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    561a:	4f c0       	rjmp	.+158    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    561c:	89 81       	ldd	r24, Y+1	; 0x01
    561e:	9a 81       	ldd	r25, Y+2	; 0x02
    5620:	80 3b       	cpi	r24, 0xB0	; 176
    5622:	98 40       	sbci	r25, 0x08	; 8
    5624:	29 f4       	brne	.+10     	; 0x5630 <sysclk_enable_peripheral_clock+0x29a>
    5626:	60 e2       	ldi	r22, 0x20	; 32
    5628:	83 e0       	ldi	r24, 0x03	; 3
    562a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    562e:	45 c0       	rjmp	.+138    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5630:	89 81       	ldd	r24, Y+1	; 0x01
    5632:	9a 81       	ldd	r25, Y+2	; 0x02
    5634:	80 3b       	cpi	r24, 0xB0	; 176
    5636:	99 40       	sbci	r25, 0x09	; 9
    5638:	29 f4       	brne	.+10     	; 0x5644 <sysclk_enable_peripheral_clock+0x2ae>
    563a:	60 e2       	ldi	r22, 0x20	; 32
    563c:	84 e0       	ldi	r24, 0x04	; 4
    563e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5642:	3b c0       	rjmp	.+118    	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5644:	89 81       	ldd	r24, Y+1	; 0x01
    5646:	9a 81       	ldd	r25, Y+2	; 0x02
    5648:	80 3b       	cpi	r24, 0xB0	; 176
    564a:	9a 40       	sbci	r25, 0x0A	; 10
    564c:	29 f4       	brne	.+10     	; 0x5658 <sysclk_enable_peripheral_clock+0x2c2>
    564e:	60 e2       	ldi	r22, 0x20	; 32
    5650:	85 e0       	ldi	r24, 0x05	; 5
    5652:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5656:	31 c0       	rjmp	.+98     	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5658:	89 81       	ldd	r24, Y+1	; 0x01
    565a:	9a 81       	ldd	r25, Y+2	; 0x02
    565c:	80 3b       	cpi	r24, 0xB0	; 176
    565e:	9b 40       	sbci	r25, 0x0B	; 11
    5660:	29 f4       	brne	.+10     	; 0x566c <sysclk_enable_peripheral_clock+0x2d6>
    5662:	60 e2       	ldi	r22, 0x20	; 32
    5664:	86 e0       	ldi	r24, 0x06	; 6
    5666:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    566a:	27 c0       	rjmp	.+78     	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    566c:	89 81       	ldd	r24, Y+1	; 0x01
    566e:	9a 81       	ldd	r25, Y+2	; 0x02
    5670:	80 38       	cpi	r24, 0x80	; 128
    5672:	94 40       	sbci	r25, 0x04	; 4
    5674:	29 f4       	brne	.+10     	; 0x5680 <sysclk_enable_peripheral_clock+0x2ea>
    5676:	60 e4       	ldi	r22, 0x40	; 64
    5678:	83 e0       	ldi	r24, 0x03	; 3
    567a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    567e:	1d c0       	rjmp	.+58     	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5680:	89 81       	ldd	r24, Y+1	; 0x01
    5682:	9a 81       	ldd	r25, Y+2	; 0x02
    5684:	80 39       	cpi	r24, 0x90	; 144
    5686:	94 40       	sbci	r25, 0x04	; 4
    5688:	29 f4       	brne	.+10     	; 0x5694 <sysclk_enable_peripheral_clock+0x2fe>
    568a:	60 e4       	ldi	r22, 0x40	; 64
    568c:	84 e0       	ldi	r24, 0x04	; 4
    568e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5692:	13 c0       	rjmp	.+38     	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	9a 81       	ldd	r25, Y+2	; 0x02
    5698:	80 3a       	cpi	r24, 0xA0	; 160
    569a:	94 40       	sbci	r25, 0x04	; 4
    569c:	29 f4       	brne	.+10     	; 0x56a8 <sysclk_enable_peripheral_clock+0x312>
    569e:	60 e4       	ldi	r22, 0x40	; 64
    56a0:	85 e0       	ldi	r24, 0x05	; 5
    56a2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    56a6:	09 c0       	rjmp	.+18     	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    56a8:	89 81       	ldd	r24, Y+1	; 0x01
    56aa:	9a 81       	ldd	r25, Y+2	; 0x02
    56ac:	80 3b       	cpi	r24, 0xB0	; 176
    56ae:	94 40       	sbci	r25, 0x04	; 4
    56b0:	21 f4       	brne	.+8      	; 0x56ba <sysclk_enable_peripheral_clock+0x324>
    56b2:	60 e4       	ldi	r22, 0x40	; 64
    56b4:	86 e0       	ldi	r24, 0x06	; 6
    56b6:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    56ba:	00 00       	nop
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	df 91       	pop	r29
    56c2:	cf 91       	pop	r28
    56c4:	08 95       	ret

000056c6 <usart_init_rs232>:
    56c6:	0f 93       	push	r16
    56c8:	1f 93       	push	r17
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    56d2:	25 97       	sbiw	r28, 0x05	; 5
    56d4:	cd bf       	out	0x3d, r28	; 61
    56d6:	de bf       	out	0x3e, r29	; 62
    56d8:	8a 83       	std	Y+2, r24	; 0x02
    56da:	9b 83       	std	Y+3, r25	; 0x03
    56dc:	6c 83       	std	Y+4, r22	; 0x04
    56de:	7d 83       	std	Y+5, r23	; 0x05
    56e0:	8a 81       	ldd	r24, Y+2	; 0x02
    56e2:	9b 81       	ldd	r25, Y+3	; 0x03
    56e4:	58 de       	rcall	.-848    	; 0x5396 <sysclk_enable_peripheral_clock>
    56e6:	8a 81       	ldd	r24, Y+2	; 0x02
    56e8:	9b 81       	ldd	r25, Y+3	; 0x03
    56ea:	60 e0       	ldi	r22, 0x00	; 0
    56ec:	c6 dd       	rcall	.-1140   	; 0x527a <usart_set_mode>
    56ee:	8c 81       	ldd	r24, Y+4	; 0x04
    56f0:	9d 81       	ldd	r25, Y+5	; 0x05
    56f2:	fc 01       	movw	r30, r24
    56f4:	26 81       	ldd	r18, Z+6	; 0x06
    56f6:	8c 81       	ldd	r24, Y+4	; 0x04
    56f8:	9d 81       	ldd	r25, Y+5	; 0x05
    56fa:	fc 01       	movw	r30, r24
    56fc:	45 81       	ldd	r20, Z+5	; 0x05
    56fe:	8c 81       	ldd	r24, Y+4	; 0x04
    5700:	9d 81       	ldd	r25, Y+5	; 0x05
    5702:	fc 01       	movw	r30, r24
    5704:	34 81       	ldd	r19, Z+4	; 0x04
    5706:	8a 81       	ldd	r24, Y+2	; 0x02
    5708:	9b 81       	ldd	r25, Y+3	; 0x03
    570a:	63 2f       	mov	r22, r19
    570c:	7b dd       	rcall	.-1290   	; 0x5204 <usart_format_set>
    570e:	37 de       	rcall	.-914    	; 0x537e <sysclk_get_per_hz>
    5710:	9b 01       	movw	r18, r22
    5712:	ac 01       	movw	r20, r24
    5714:	8c 81       	ldd	r24, Y+4	; 0x04
    5716:	9d 81       	ldd	r25, Y+5	; 0x05
    5718:	fc 01       	movw	r30, r24
    571a:	80 81       	ld	r24, Z
    571c:	91 81       	ldd	r25, Z+1	; 0x01
    571e:	a2 81       	ldd	r26, Z+2	; 0x02
    5720:	b3 81       	ldd	r27, Z+3	; 0x03
    5722:	ea 81       	ldd	r30, Y+2	; 0x02
    5724:	fb 81       	ldd	r31, Y+3	; 0x03
    5726:	89 01       	movw	r16, r18
    5728:	9a 01       	movw	r18, r20
    572a:	ac 01       	movw	r20, r24
    572c:	bd 01       	movw	r22, r26
    572e:	cf 01       	movw	r24, r30
    5730:	48 d0       	rcall	.+144    	; 0x57c2 <usart_set_baudrate>
    5732:	89 83       	std	Y+1, r24	; 0x01
    5734:	8a 81       	ldd	r24, Y+2	; 0x02
    5736:	9b 81       	ldd	r25, Y+3	; 0x03
    5738:	88 dd       	rcall	.-1264   	; 0x524a <usart_tx_enable>
    573a:	8a 81       	ldd	r24, Y+2	; 0x02
    573c:	9b 81       	ldd	r25, Y+3	; 0x03
    573e:	4a dd       	rcall	.-1388   	; 0x51d4 <usart_rx_enable>
    5740:	89 81       	ldd	r24, Y+1	; 0x01
    5742:	25 96       	adiw	r28, 0x05	; 5
    5744:	cd bf       	out	0x3d, r28	; 61
    5746:	de bf       	out	0x3e, r29	; 62
    5748:	df 91       	pop	r29
    574a:	cf 91       	pop	r28
    574c:	1f 91       	pop	r17
    574e:	0f 91       	pop	r16
    5750:	08 95       	ret

00005752 <usart_putchar>:
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	00 d0       	rcall	.+0      	; 0x5758 <usart_putchar+0x6>
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
    575c:	89 83       	std	Y+1, r24	; 0x01
    575e:	9a 83       	std	Y+2, r25	; 0x02
    5760:	6b 83       	std	Y+3, r22	; 0x03
    5762:	00 00       	nop
    5764:	89 81       	ldd	r24, Y+1	; 0x01
    5766:	9a 81       	ldd	r25, Y+2	; 0x02
    5768:	a4 dd       	rcall	.-1208   	; 0x52b2 <usart_data_register_is_empty>
    576a:	98 2f       	mov	r25, r24
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	89 27       	eor	r24, r25
    5770:	88 23       	and	r24, r24
    5772:	c1 f7       	brne	.-16     	; 0x5764 <usart_putchar+0x12>
    5774:	89 81       	ldd	r24, Y+1	; 0x01
    5776:	9a 81       	ldd	r25, Y+2	; 0x02
    5778:	2b 81       	ldd	r18, Y+3	; 0x03
    577a:	fc 01       	movw	r30, r24
    577c:	20 83       	st	Z, r18
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	23 96       	adiw	r28, 0x03	; 3
    5784:	cd bf       	out	0x3d, r28	; 61
    5786:	de bf       	out	0x3e, r29	; 62
    5788:	df 91       	pop	r29
    578a:	cf 91       	pop	r28
    578c:	08 95       	ret

0000578e <usart_getchar>:
    578e:	cf 93       	push	r28
    5790:	df 93       	push	r29
    5792:	1f 92       	push	r1
    5794:	1f 92       	push	r1
    5796:	cd b7       	in	r28, 0x3d	; 61
    5798:	de b7       	in	r29, 0x3e	; 62
    579a:	89 83       	std	Y+1, r24	; 0x01
    579c:	9a 83       	std	Y+2, r25	; 0x02
    579e:	00 00       	nop
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	9a 81       	ldd	r25, Y+2	; 0x02
    57a4:	a0 dd       	rcall	.-1216   	; 0x52e6 <usart_rx_is_complete>
    57a6:	98 2f       	mov	r25, r24
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	89 27       	eor	r24, r25
    57ac:	88 23       	and	r24, r24
    57ae:	c1 f7       	brne	.-16     	; 0x57a0 <usart_getchar+0x12>
    57b0:	89 81       	ldd	r24, Y+1	; 0x01
    57b2:	9a 81       	ldd	r25, Y+2	; 0x02
    57b4:	fc 01       	movw	r30, r24
    57b6:	80 81       	ld	r24, Z
    57b8:	0f 90       	pop	r0
    57ba:	0f 90       	pop	r0
    57bc:	df 91       	pop	r29
    57be:	cf 91       	pop	r28
    57c0:	08 95       	ret

000057c2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    57c2:	ef 92       	push	r14
    57c4:	ff 92       	push	r15
    57c6:	0f 93       	push	r16
    57c8:	1f 93       	push	r17
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	6f 97       	sbiw	r28, 0x1f	; 31
    57d4:	cd bf       	out	0x3d, r28	; 61
    57d6:	de bf       	out	0x3e, r29	; 62
    57d8:	8e 8b       	std	Y+22, r24	; 0x16
    57da:	9f 8b       	std	Y+23, r25	; 0x17
    57dc:	48 8f       	std	Y+24, r20	; 0x18
    57de:	59 8f       	std	Y+25, r21	; 0x19
    57e0:	6a 8f       	std	Y+26, r22	; 0x1a
    57e2:	7b 8f       	std	Y+27, r23	; 0x1b
    57e4:	0c 8f       	std	Y+28, r16	; 0x1c
    57e6:	1d 8f       	std	Y+29, r17	; 0x1d
    57e8:	2e 8f       	std	Y+30, r18	; 0x1e
    57ea:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    57ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    57ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    57f0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    57f2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    57f4:	68 94       	set
    57f6:	12 f8       	bld	r1, 2
    57f8:	b6 95       	lsr	r27
    57fa:	a7 95       	ror	r26
    57fc:	97 95       	ror	r25
    57fe:	87 95       	ror	r24
    5800:	16 94       	lsr	r1
    5802:	d1 f7       	brne	.-12     	; 0x57f8 <usart_set_baudrate+0x36>
    5804:	8e 87       	std	Y+14, r24	; 0x0e
    5806:	9f 87       	std	Y+15, r25	; 0x0f
    5808:	a8 8b       	std	Y+16, r26	; 0x10
    580a:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    580c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    580e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5810:	ae 8d       	ldd	r26, Y+30	; 0x1e
    5812:	bf 8d       	ldd	r27, Y+31	; 0x1f
    5814:	07 2e       	mov	r0, r23
    5816:	76 e1       	ldi	r23, 0x16	; 22
    5818:	b6 95       	lsr	r27
    581a:	a7 95       	ror	r26
    581c:	97 95       	ror	r25
    581e:	87 95       	ror	r24
    5820:	7a 95       	dec	r23
    5822:	d1 f7       	brne	.-12     	; 0x5818 <usart_set_baudrate+0x56>
    5824:	70 2d       	mov	r23, r0
    5826:	8a 87       	std	Y+10, r24	; 0x0a
    5828:	9b 87       	std	Y+11, r25	; 0x0b
    582a:	ac 87       	std	Y+12, r26	; 0x0c
    582c:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    582e:	8e 89       	ldd	r24, Y+22	; 0x16
    5830:	9f 89       	ldd	r25, Y+23	; 0x17
    5832:	fc 01       	movw	r30, r24
    5834:	84 81       	ldd	r24, Z+4	; 0x04
    5836:	88 2f       	mov	r24, r24
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	84 70       	andi	r24, 0x04	; 4
    583c:	99 27       	eor	r25, r25
    583e:	89 2b       	or	r24, r25
    5840:	c1 f4       	brne	.+48     	; 0x5872 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    5842:	8e 85       	ldd	r24, Y+14	; 0x0e
    5844:	9f 85       	ldd	r25, Y+15	; 0x0f
    5846:	a8 89       	ldd	r26, Y+16	; 0x10
    5848:	b9 89       	ldd	r27, Y+17	; 0x11
    584a:	b6 95       	lsr	r27
    584c:	a7 95       	ror	r26
    584e:	97 95       	ror	r25
    5850:	87 95       	ror	r24
    5852:	8e 87       	std	Y+14, r24	; 0x0e
    5854:	9f 87       	std	Y+15, r25	; 0x0f
    5856:	a8 8b       	std	Y+16, r26	; 0x10
    5858:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    585a:	8a 85       	ldd	r24, Y+10	; 0x0a
    585c:	9b 85       	ldd	r25, Y+11	; 0x0b
    585e:	ac 85       	ldd	r26, Y+12	; 0x0c
    5860:	bd 85       	ldd	r27, Y+13	; 0x0d
    5862:	b6 95       	lsr	r27
    5864:	a7 95       	ror	r26
    5866:	97 95       	ror	r25
    5868:	87 95       	ror	r24
    586a:	8a 87       	std	Y+10, r24	; 0x0a
    586c:	9b 87       	std	Y+11, r25	; 0x0b
    586e:	ac 87       	std	Y+12, r26	; 0x0c
    5870:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    5872:	28 8d       	ldd	r18, Y+24	; 0x18
    5874:	39 8d       	ldd	r19, Y+25	; 0x19
    5876:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5878:	5b 8d       	ldd	r21, Y+27	; 0x1b
    587a:	8e 85       	ldd	r24, Y+14	; 0x0e
    587c:	9f 85       	ldd	r25, Y+15	; 0x0f
    587e:	a8 89       	ldd	r26, Y+16	; 0x10
    5880:	b9 89       	ldd	r27, Y+17	; 0x11
    5882:	82 17       	cp	r24, r18
    5884:	93 07       	cpc	r25, r19
    5886:	a4 07       	cpc	r26, r20
    5888:	b5 07       	cpc	r27, r21
    588a:	68 f0       	brcs	.+26     	; 0x58a6 <usart_set_baudrate+0xe4>
    588c:	28 8d       	ldd	r18, Y+24	; 0x18
    588e:	39 8d       	ldd	r19, Y+25	; 0x19
    5890:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5892:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5894:	8a 85       	ldd	r24, Y+10	; 0x0a
    5896:	9b 85       	ldd	r25, Y+11	; 0x0b
    5898:	ac 85       	ldd	r26, Y+12	; 0x0c
    589a:	bd 85       	ldd	r27, Y+13	; 0x0d
    589c:	28 17       	cp	r18, r24
    589e:	39 07       	cpc	r19, r25
    58a0:	4a 07       	cpc	r20, r26
    58a2:	5b 07       	cpc	r21, r27
    58a4:	10 f4       	brcc	.+4      	; 0x58aa <usart_set_baudrate+0xe8>
		return false;
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	40 c1       	rjmp	.+640    	; 0x5b2a <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    58aa:	8e 89       	ldd	r24, Y+22	; 0x16
    58ac:	9f 89       	ldd	r25, Y+23	; 0x17
    58ae:	fc 01       	movw	r30, r24
    58b0:	84 81       	ldd	r24, Z+4	; 0x04
    58b2:	88 2f       	mov	r24, r24
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	84 70       	andi	r24, 0x04	; 4
    58b8:	99 27       	eor	r25, r25
    58ba:	89 2b       	or	r24, r25
    58bc:	61 f4       	brne	.+24     	; 0x58d6 <usart_set_baudrate+0x114>
		baud *= 2;
    58be:	88 8d       	ldd	r24, Y+24	; 0x18
    58c0:	99 8d       	ldd	r25, Y+25	; 0x19
    58c2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    58c4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    58c6:	88 0f       	add	r24, r24
    58c8:	99 1f       	adc	r25, r25
    58ca:	aa 1f       	adc	r26, r26
    58cc:	bb 1f       	adc	r27, r27
    58ce:	88 8f       	std	Y+24, r24	; 0x18
    58d0:	99 8f       	std	Y+25, r25	; 0x19
    58d2:	aa 8f       	std	Y+26, r26	; 0x1a
    58d4:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    58d6:	8f ef       	ldi	r24, 0xFF	; 255
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	a0 e0       	ldi	r26, 0x00	; 0
    58dc:	b0 e0       	ldi	r27, 0x00	; 0
    58de:	8e 83       	std	Y+6, r24	; 0x06
    58e0:	9f 83       	std	Y+7, r25	; 0x07
    58e2:	a8 87       	std	Y+8, r26	; 0x08
    58e4:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    58e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    58ea:	ae 8d       	ldd	r26, Y+30	; 0x1e
    58ec:	bf 8d       	ldd	r27, Y+31	; 0x1f
    58ee:	28 8d       	ldd	r18, Y+24	; 0x18
    58f0:	39 8d       	ldd	r19, Y+25	; 0x19
    58f2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    58f4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    58f6:	bc 01       	movw	r22, r24
    58f8:	cd 01       	movw	r24, r26
    58fa:	0e 94 ca 39 	call	0x7394	; 0x7394 <__udivmodsi4>
    58fe:	da 01       	movw	r26, r20
    5900:	c9 01       	movw	r24, r18
    5902:	8a 8b       	std	Y+18, r24	; 0x12
    5904:	9b 8b       	std	Y+19, r25	; 0x13
    5906:	ac 8b       	std	Y+20, r26	; 0x14
    5908:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    590a:	89 ef       	ldi	r24, 0xF9	; 249
    590c:	89 83       	std	Y+1, r24	; 0x01
    590e:	28 c0       	rjmp	.+80     	; 0x5960 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    5910:	2a 89       	ldd	r18, Y+18	; 0x12
    5912:	3b 89       	ldd	r19, Y+19	; 0x13
    5914:	4c 89       	ldd	r20, Y+20	; 0x14
    5916:	5d 89       	ldd	r21, Y+21	; 0x15
    5918:	8e 81       	ldd	r24, Y+6	; 0x06
    591a:	9f 81       	ldd	r25, Y+7	; 0x07
    591c:	a8 85       	ldd	r26, Y+8	; 0x08
    591e:	b9 85       	ldd	r27, Y+9	; 0x09
    5920:	28 17       	cp	r18, r24
    5922:	39 07       	cpc	r19, r25
    5924:	4a 07       	cpc	r20, r26
    5926:	5b 07       	cpc	r21, r27
    5928:	f8 f0       	brcs	.+62     	; 0x5968 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    592a:	8e 81       	ldd	r24, Y+6	; 0x06
    592c:	9f 81       	ldd	r25, Y+7	; 0x07
    592e:	a8 85       	ldd	r26, Y+8	; 0x08
    5930:	b9 85       	ldd	r27, Y+9	; 0x09
    5932:	88 0f       	add	r24, r24
    5934:	99 1f       	adc	r25, r25
    5936:	aa 1f       	adc	r26, r26
    5938:	bb 1f       	adc	r27, r27
    593a:	8e 83       	std	Y+6, r24	; 0x06
    593c:	9f 83       	std	Y+7, r25	; 0x07
    593e:	a8 87       	std	Y+8, r26	; 0x08
    5940:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	8d 3f       	cpi	r24, 0xFD	; 253
    5946:	4c f4       	brge	.+18     	; 0x595a <usart_set_baudrate+0x198>
			limit |= 1;
    5948:	8e 81       	ldd	r24, Y+6	; 0x06
    594a:	9f 81       	ldd	r25, Y+7	; 0x07
    594c:	a8 85       	ldd	r26, Y+8	; 0x08
    594e:	b9 85       	ldd	r27, Y+9	; 0x09
    5950:	81 60       	ori	r24, 0x01	; 1
    5952:	8e 83       	std	Y+6, r24	; 0x06
    5954:	9f 83       	std	Y+7, r25	; 0x07
    5956:	a8 87       	std	Y+8, r26	; 0x08
    5958:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    595a:	89 81       	ldd	r24, Y+1	; 0x01
    595c:	8f 5f       	subi	r24, 0xFF	; 255
    595e:	89 83       	std	Y+1, r24	; 0x01
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	87 30       	cpi	r24, 0x07	; 7
    5964:	ac f2       	brlt	.-86     	; 0x5910 <usart_set_baudrate+0x14e>
    5966:	01 c0       	rjmp	.+2      	; 0x596a <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    5968:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    596a:	89 81       	ldd	r24, Y+1	; 0x01
    596c:	88 23       	and	r24, r24
    596e:	0c f0       	brlt	.+2      	; 0x5972 <usart_set_baudrate+0x1b0>
    5970:	8a c0       	rjmp	.+276    	; 0x5a86 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    5972:	88 8d       	ldd	r24, Y+24	; 0x18
    5974:	99 8d       	ldd	r25, Y+25	; 0x19
    5976:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5978:	bb 8d       	ldd	r27, Y+27	; 0x1b
    597a:	88 0f       	add	r24, r24
    597c:	99 1f       	adc	r25, r25
    597e:	aa 1f       	adc	r26, r26
    5980:	bb 1f       	adc	r27, r27
    5982:	88 0f       	add	r24, r24
    5984:	99 1f       	adc	r25, r25
    5986:	aa 1f       	adc	r26, r26
    5988:	bb 1f       	adc	r27, r27
    598a:	88 0f       	add	r24, r24
    598c:	99 1f       	adc	r25, r25
    598e:	aa 1f       	adc	r26, r26
    5990:	bb 1f       	adc	r27, r27
    5992:	9c 01       	movw	r18, r24
    5994:	ad 01       	movw	r20, r26
    5996:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5998:	9d 8d       	ldd	r25, Y+29	; 0x1d
    599a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    599c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    599e:	82 1b       	sub	r24, r18
    59a0:	93 0b       	sbc	r25, r19
    59a2:	a4 0b       	sbc	r26, r20
    59a4:	b5 0b       	sbc	r27, r21
    59a6:	8c 8f       	std	Y+28, r24	; 0x1c
    59a8:	9d 8f       	std	Y+29, r25	; 0x1d
    59aa:	ae 8f       	std	Y+30, r26	; 0x1e
    59ac:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    59ae:	89 81       	ldd	r24, Y+1	; 0x01
    59b0:	8e 3f       	cpi	r24, 0xFE	; 254
    59b2:	94 f5       	brge	.+100    	; 0x5a18 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    59b4:	89 81       	ldd	r24, Y+1	; 0x01
    59b6:	08 2e       	mov	r0, r24
    59b8:	00 0c       	add	r0, r0
    59ba:	99 0b       	sbc	r25, r25
    59bc:	2d ef       	ldi	r18, 0xFD	; 253
    59be:	3f ef       	ldi	r19, 0xFF	; 255
    59c0:	28 1b       	sub	r18, r24
    59c2:	39 0b       	sbc	r19, r25
    59c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    59c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    59c8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    59ca:	bf 8d       	ldd	r27, Y+31	; 0x1f
    59cc:	7c 01       	movw	r14, r24
    59ce:	8d 01       	movw	r16, r26
    59d0:	04 c0       	rjmp	.+8      	; 0x59da <usart_set_baudrate+0x218>
    59d2:	ee 0c       	add	r14, r14
    59d4:	ff 1c       	adc	r15, r15
    59d6:	00 1f       	adc	r16, r16
    59d8:	11 1f       	adc	r17, r17
    59da:	2a 95       	dec	r18
    59dc:	d2 f7       	brpl	.-12     	; 0x59d2 <usart_set_baudrate+0x210>
    59de:	a8 01       	movw	r20, r16
    59e0:	97 01       	movw	r18, r14
    59e2:	88 8d       	ldd	r24, Y+24	; 0x18
    59e4:	99 8d       	ldd	r25, Y+25	; 0x19
    59e6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    59e8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    59ea:	b6 95       	lsr	r27
    59ec:	a7 95       	ror	r26
    59ee:	97 95       	ror	r25
    59f0:	87 95       	ror	r24
    59f2:	82 0f       	add	r24, r18
    59f4:	93 1f       	adc	r25, r19
    59f6:	a4 1f       	adc	r26, r20
    59f8:	b5 1f       	adc	r27, r21
    59fa:	28 8d       	ldd	r18, Y+24	; 0x18
    59fc:	39 8d       	ldd	r19, Y+25	; 0x19
    59fe:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5a00:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5a02:	bc 01       	movw	r22, r24
    5a04:	cd 01       	movw	r24, r26
    5a06:	0e 94 ca 39 	call	0x7394	; 0x7394 <__udivmodsi4>
    5a0a:	da 01       	movw	r26, r20
    5a0c:	c9 01       	movw	r24, r18
    5a0e:	8a 83       	std	Y+2, r24	; 0x02
    5a10:	9b 83       	std	Y+3, r25	; 0x03
    5a12:	ac 83       	std	Y+4, r26	; 0x04
    5a14:	bd 83       	std	Y+5, r27	; 0x05
    5a16:	70 c0       	rjmp	.+224    	; 0x5af8 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    5a18:	89 81       	ldd	r24, Y+1	; 0x01
    5a1a:	08 2e       	mov	r0, r24
    5a1c:	00 0c       	add	r0, r0
    5a1e:	99 0b       	sbc	r25, r25
    5a20:	9c 01       	movw	r18, r24
    5a22:	2d 5f       	subi	r18, 0xFD	; 253
    5a24:	3f 4f       	sbci	r19, 0xFF	; 255
    5a26:	88 8d       	ldd	r24, Y+24	; 0x18
    5a28:	99 8d       	ldd	r25, Y+25	; 0x19
    5a2a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5a2c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5a2e:	04 c0       	rjmp	.+8      	; 0x5a38 <usart_set_baudrate+0x276>
    5a30:	88 0f       	add	r24, r24
    5a32:	99 1f       	adc	r25, r25
    5a34:	aa 1f       	adc	r26, r26
    5a36:	bb 1f       	adc	r27, r27
    5a38:	2a 95       	dec	r18
    5a3a:	d2 f7       	brpl	.-12     	; 0x5a30 <usart_set_baudrate+0x26e>
    5a3c:	88 8f       	std	Y+24, r24	; 0x18
    5a3e:	99 8f       	std	Y+25, r25	; 0x19
    5a40:	aa 8f       	std	Y+26, r26	; 0x1a
    5a42:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    5a44:	88 8d       	ldd	r24, Y+24	; 0x18
    5a46:	99 8d       	ldd	r25, Y+25	; 0x19
    5a48:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5a4a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5a4c:	9c 01       	movw	r18, r24
    5a4e:	ad 01       	movw	r20, r26
    5a50:	56 95       	lsr	r21
    5a52:	47 95       	ror	r20
    5a54:	37 95       	ror	r19
    5a56:	27 95       	ror	r18
    5a58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5a5c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    5a5e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    5a60:	82 0f       	add	r24, r18
    5a62:	93 1f       	adc	r25, r19
    5a64:	a4 1f       	adc	r26, r20
    5a66:	b5 1f       	adc	r27, r21
    5a68:	28 8d       	ldd	r18, Y+24	; 0x18
    5a6a:	39 8d       	ldd	r19, Y+25	; 0x19
    5a6c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5a6e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5a70:	bc 01       	movw	r22, r24
    5a72:	cd 01       	movw	r24, r26
    5a74:	0e 94 ca 39 	call	0x7394	; 0x7394 <__udivmodsi4>
    5a78:	da 01       	movw	r26, r20
    5a7a:	c9 01       	movw	r24, r18
    5a7c:	8a 83       	std	Y+2, r24	; 0x02
    5a7e:	9b 83       	std	Y+3, r25	; 0x03
    5a80:	ac 83       	std	Y+4, r26	; 0x04
    5a82:	bd 83       	std	Y+5, r27	; 0x05
    5a84:	39 c0       	rjmp	.+114    	; 0x5af8 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    5a86:	89 81       	ldd	r24, Y+1	; 0x01
    5a88:	08 2e       	mov	r0, r24
    5a8a:	00 0c       	add	r0, r0
    5a8c:	99 0b       	sbc	r25, r25
    5a8e:	9c 01       	movw	r18, r24
    5a90:	2d 5f       	subi	r18, 0xFD	; 253
    5a92:	3f 4f       	sbci	r19, 0xFF	; 255
    5a94:	88 8d       	ldd	r24, Y+24	; 0x18
    5a96:	99 8d       	ldd	r25, Y+25	; 0x19
    5a98:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5a9a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5a9c:	04 c0       	rjmp	.+8      	; 0x5aa6 <usart_set_baudrate+0x2e4>
    5a9e:	88 0f       	add	r24, r24
    5aa0:	99 1f       	adc	r25, r25
    5aa2:	aa 1f       	adc	r26, r26
    5aa4:	bb 1f       	adc	r27, r27
    5aa6:	2a 95       	dec	r18
    5aa8:	d2 f7       	brpl	.-12     	; 0x5a9e <usart_set_baudrate+0x2dc>
    5aaa:	88 8f       	std	Y+24, r24	; 0x18
    5aac:	99 8f       	std	Y+25, r25	; 0x19
    5aae:	aa 8f       	std	Y+26, r26	; 0x1a
    5ab0:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    5ab2:	88 8d       	ldd	r24, Y+24	; 0x18
    5ab4:	99 8d       	ldd	r25, Y+25	; 0x19
    5ab6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5ab8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5aba:	9c 01       	movw	r18, r24
    5abc:	ad 01       	movw	r20, r26
    5abe:	56 95       	lsr	r21
    5ac0:	47 95       	ror	r20
    5ac2:	37 95       	ror	r19
    5ac4:	27 95       	ror	r18
    5ac6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5ac8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5aca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    5acc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    5ace:	82 0f       	add	r24, r18
    5ad0:	93 1f       	adc	r25, r19
    5ad2:	a4 1f       	adc	r26, r20
    5ad4:	b5 1f       	adc	r27, r21
    5ad6:	28 8d       	ldd	r18, Y+24	; 0x18
    5ad8:	39 8d       	ldd	r19, Y+25	; 0x19
    5ada:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5adc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5ade:	bc 01       	movw	r22, r24
    5ae0:	cd 01       	movw	r24, r26
    5ae2:	0e 94 ca 39 	call	0x7394	; 0x7394 <__udivmodsi4>
    5ae6:	da 01       	movw	r26, r20
    5ae8:	c9 01       	movw	r24, r18
    5aea:	01 97       	sbiw	r24, 0x01	; 1
    5aec:	a1 09       	sbc	r26, r1
    5aee:	b1 09       	sbc	r27, r1
    5af0:	8a 83       	std	Y+2, r24	; 0x02
    5af2:	9b 83       	std	Y+3, r25	; 0x03
    5af4:	ac 83       	std	Y+4, r26	; 0x04
    5af6:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    5af8:	8a 81       	ldd	r24, Y+2	; 0x02
    5afa:	9b 81       	ldd	r25, Y+3	; 0x03
    5afc:	ac 81       	ldd	r26, Y+4	; 0x04
    5afe:	bd 81       	ldd	r27, Y+5	; 0x05
    5b00:	89 2f       	mov	r24, r25
    5b02:	9a 2f       	mov	r25, r26
    5b04:	ab 2f       	mov	r26, r27
    5b06:	bb 27       	eor	r27, r27
    5b08:	98 2f       	mov	r25, r24
    5b0a:	9f 70       	andi	r25, 0x0F	; 15
    5b0c:	89 81       	ldd	r24, Y+1	; 0x01
    5b0e:	82 95       	swap	r24
    5b10:	80 7f       	andi	r24, 0xF0	; 240
    5b12:	29 2f       	mov	r18, r25
    5b14:	28 2b       	or	r18, r24
    5b16:	8e 89       	ldd	r24, Y+22	; 0x16
    5b18:	9f 89       	ldd	r25, Y+23	; 0x17
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    5b1e:	2a 81       	ldd	r18, Y+2	; 0x02
    5b20:	8e 89       	ldd	r24, Y+22	; 0x16
    5b22:	9f 89       	ldd	r25, Y+23	; 0x17
    5b24:	fc 01       	movw	r30, r24
    5b26:	26 83       	std	Z+6, r18	; 0x06

	return true;
    5b28:	81 e0       	ldi	r24, 0x01	; 1
}
    5b2a:	6f 96       	adiw	r28, 0x1f	; 31
    5b2c:	cd bf       	out	0x3d, r28	; 61
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	df 91       	pop	r29
    5b32:	cf 91       	pop	r28
    5b34:	1f 91       	pop	r17
    5b36:	0f 91       	pop	r16
    5b38:	ff 90       	pop	r15
    5b3a:	ef 90       	pop	r14
    5b3c:	08 95       	ret

00005b3e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    5b3e:	cf 93       	push	r28
    5b40:	df 93       	push	r29
    5b42:	00 d0       	rcall	.+0      	; 0x5b44 <ioport_configure_port_pin+0x6>
    5b44:	00 d0       	rcall	.+0      	; 0x5b46 <ioport_configure_port_pin+0x8>
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	8a 83       	std	Y+2, r24	; 0x02
    5b4c:	9b 83       	std	Y+3, r25	; 0x03
    5b4e:	6c 83       	std	Y+4, r22	; 0x04
    5b50:	4d 83       	std	Y+5, r20	; 0x05
    5b52:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    5b54:	19 82       	std	Y+1, r1	; 0x01
    5b56:	20 c0       	rjmp	.+64     	; 0x5b98 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    5b58:	8c 81       	ldd	r24, Y+4	; 0x04
    5b5a:	88 2f       	mov	r24, r24
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	29 81       	ldd	r18, Y+1	; 0x01
    5b60:	22 2f       	mov	r18, r18
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	02 c0       	rjmp	.+4      	; 0x5b6a <ioport_configure_port_pin+0x2c>
    5b66:	95 95       	asr	r25
    5b68:	87 95       	ror	r24
    5b6a:	2a 95       	dec	r18
    5b6c:	e2 f7       	brpl	.-8      	; 0x5b66 <ioport_configure_port_pin+0x28>
    5b6e:	81 70       	andi	r24, 0x01	; 1
    5b70:	99 27       	eor	r25, r25
    5b72:	89 2b       	or	r24, r25
    5b74:	71 f0       	breq	.+28     	; 0x5b92 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    5b76:	89 81       	ldd	r24, Y+1	; 0x01
    5b78:	88 2f       	mov	r24, r24
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	40 96       	adiw	r24, 0x10	; 16
    5b7e:	2a 81       	ldd	r18, Y+2	; 0x02
    5b80:	3b 81       	ldd	r19, Y+3	; 0x03
    5b82:	82 0f       	add	r24, r18
    5b84:	93 1f       	adc	r25, r19
    5b86:	2d 81       	ldd	r18, Y+5	; 0x05
    5b88:	3e 81       	ldd	r19, Y+6	; 0x06
    5b8a:	23 2f       	mov	r18, r19
    5b8c:	33 27       	eor	r19, r19
    5b8e:	fc 01       	movw	r30, r24
    5b90:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    5b92:	89 81       	ldd	r24, Y+1	; 0x01
    5b94:	8f 5f       	subi	r24, 0xFF	; 255
    5b96:	89 83       	std	Y+1, r24	; 0x01
    5b98:	89 81       	ldd	r24, Y+1	; 0x01
    5b9a:	88 30       	cpi	r24, 0x08	; 8
    5b9c:	e8 f2       	brcs	.-70     	; 0x5b58 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    5b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba2:	81 70       	andi	r24, 0x01	; 1
    5ba4:	99 27       	eor	r25, r25
    5ba6:	89 2b       	or	r24, r25
    5ba8:	d1 f0       	breq	.+52     	; 0x5bde <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    5baa:	8d 81       	ldd	r24, Y+5	; 0x05
    5bac:	9e 81       	ldd	r25, Y+6	; 0x06
    5bae:	82 70       	andi	r24, 0x02	; 2
    5bb0:	99 27       	eor	r25, r25
    5bb2:	89 2b       	or	r24, r25
    5bb4:	39 f0       	breq	.+14     	; 0x5bc4 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    5bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    5bba:	05 96       	adiw	r24, 0x05	; 5
    5bbc:	2c 81       	ldd	r18, Y+4	; 0x04
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	20 83       	st	Z, r18
    5bc2:	06 c0       	rjmp	.+12     	; 0x5bd0 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    5bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    5bc8:	06 96       	adiw	r24, 0x06	; 6
    5bca:	2c 81       	ldd	r18, Y+4	; 0x04
    5bcc:	fc 01       	movw	r30, r24
    5bce:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    5bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    5bd4:	01 96       	adiw	r24, 0x01	; 1
    5bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    5bd8:	fc 01       	movw	r30, r24
    5bda:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    5bdc:	06 c0       	rjmp	.+12     	; 0x5bea <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    5bde:	8a 81       	ldd	r24, Y+2	; 0x02
    5be0:	9b 81       	ldd	r25, Y+3	; 0x03
    5be2:	02 96       	adiw	r24, 0x02	; 2
    5be4:	2c 81       	ldd	r18, Y+4	; 0x04
    5be6:	fc 01       	movw	r30, r24
    5be8:	20 83       	st	Z, r18
	}
}
    5bea:	00 00       	nop
    5bec:	26 96       	adiw	r28, 0x06	; 6
    5bee:	cd bf       	out	0x3d, r28	; 61
    5bf0:	de bf       	out	0x3e, r29	; 62
    5bf2:	df 91       	pop	r29
    5bf4:	cf 91       	pop	r28
    5bf6:	08 95       	ret

00005bf8 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	cd b7       	in	r28, 0x3d	; 61
    5bfe:	de b7       	in	r29, 0x3e	; 62
    5c00:	27 97       	sbiw	r28, 0x07	; 7
    5c02:	cd bf       	out	0x3d, r28	; 61
    5c04:	de bf       	out	0x3e, r29	; 62
    5c06:	8d 83       	std	Y+5, r24	; 0x05
    5c08:	6e 83       	std	Y+6, r22	; 0x06
    5c0a:	7f 83       	std	Y+7, r23	; 0x07
    5c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c0e:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    5c10:	89 81       	ldd	r24, Y+1	; 0x01
    5c12:	88 2f       	mov	r24, r24
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	9c 01       	movw	r18, r24
    5c18:	27 70       	andi	r18, 0x07	; 7
    5c1a:	33 27       	eor	r19, r19
    5c1c:	81 e0       	ldi	r24, 0x01	; 1
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	02 c0       	rjmp	.+4      	; 0x5c26 <ioport_configure_pin+0x2e>
    5c22:	88 0f       	add	r24, r24
    5c24:	99 1f       	adc	r25, r25
    5c26:	2a 95       	dec	r18
    5c28:	e2 f7       	brpl	.-8      	; 0x5c22 <ioport_configure_pin+0x2a>
    5c2a:	68 2f       	mov	r22, r24
    5c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c2e:	8a 83       	std	Y+2, r24	; 0x02
    5c30:	8a 81       	ldd	r24, Y+2	; 0x02
    5c32:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    5c34:	8b 81       	ldd	r24, Y+3	; 0x03
    5c36:	86 95       	lsr	r24
    5c38:	86 95       	lsr	r24
    5c3a:	86 95       	lsr	r24
    5c3c:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    5c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    5c40:	88 2f       	mov	r24, r24
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	88 0f       	add	r24, r24
    5c46:	99 1f       	adc	r25, r25
    5c48:	82 95       	swap	r24
    5c4a:	92 95       	swap	r25
    5c4c:	90 7f       	andi	r25, 0xF0	; 240
    5c4e:	98 27       	eor	r25, r24
    5c50:	80 7f       	andi	r24, 0xF0	; 240
    5c52:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    5c54:	9a 5f       	subi	r25, 0xFA	; 250
    5c56:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    5c58:	8e 81       	ldd	r24, Y+6	; 0x06
    5c5a:	9f 81       	ldd	r25, Y+7	; 0x07
    5c5c:	ac 01       	movw	r20, r24
    5c5e:	c9 01       	movw	r24, r18
    5c60:	6e df       	rcall	.-292    	; 0x5b3e <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    5c62:	00 00       	nop
    5c64:	27 96       	adiw	r28, 0x07	; 7
    5c66:	cd bf       	out	0x3d, r28	; 61
    5c68:	de bf       	out	0x3e, r29	; 62
    5c6a:	df 91       	pop	r29
    5c6c:	cf 91       	pop	r28
    5c6e:	08 95       	ret

00005c70 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	cd b7       	in	r28, 0x3d	; 61
    5c76:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    5c78:	63 e0       	ldi	r22, 0x03	; 3
    5c7a:	70 e0       	ldi	r23, 0x00	; 0
    5c7c:	83 e7       	ldi	r24, 0x73	; 115
    5c7e:	bc df       	rcall	.-136    	; 0x5bf8 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    5c80:	60 e0       	ldi	r22, 0x00	; 0
    5c82:	78 e1       	ldi	r23, 0x18	; 24
    5c84:	82 e7       	ldi	r24, 0x72	; 114
    5c86:	b8 df       	rcall	.-144    	; 0x5bf8 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    5c88:	00 00       	nop
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	08 95       	ret

00005c90 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device, uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    5c90:	cf 93       	push	r28
    5c92:	df 93       	push	r29
    5c94:	1f 92       	push	r1
    5c96:	1f 92       	push	r1
    5c98:	cd b7       	in	r28, 0x3d	; 61
    5c9a:	de b7       	in	r29, 0x3e	; 62
    5c9c:	89 83       	std	Y+1, r24	; 0x01
    5c9e:	9a 83       	std	Y+2, r25	; 0x02
    5ca0:	89 81       	ldd	r24, Y+1	; 0x01
    5ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca4:	89 2b       	or	r24, r25
    5ca6:	09 f4       	brne	.+2      	; 0x5caa <sysclk_enable_peripheral_clock+0x1a>
    5ca8:	85 c1       	rjmp	.+778    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	9a 81       	ldd	r25, Y+2	; 0x02
    5cae:	80 3c       	cpi	r24, 0xC0	; 192
    5cb0:	91 05       	cpc	r25, r1
    5cb2:	29 f4       	brne	.+10     	; 0x5cbe <sysclk_enable_peripheral_clock+0x2e>
    5cb4:	60 e1       	ldi	r22, 0x10	; 16
    5cb6:	80 e0       	ldi	r24, 0x00	; 0
    5cb8:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5cbc:	7b c1       	rjmp	.+758    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5cbe:	89 81       	ldd	r24, Y+1	; 0x01
    5cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc2:	80 34       	cpi	r24, 0x40	; 64
    5cc4:	94 40       	sbci	r25, 0x04	; 4
    5cc6:	29 f4       	brne	.+10     	; 0x5cd2 <sysclk_enable_peripheral_clock+0x42>
    5cc8:	68 e0       	ldi	r22, 0x08	; 8
    5cca:	80 e0       	ldi	r24, 0x00	; 0
    5ccc:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5cd0:	71 c1       	rjmp	.+738    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5cd2:	89 81       	ldd	r24, Y+1	; 0x01
    5cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd6:	81 15       	cp	r24, r1
    5cd8:	94 40       	sbci	r25, 0x04	; 4
    5cda:	29 f4       	brne	.+10     	; 0x5ce6 <sysclk_enable_peripheral_clock+0x56>
    5cdc:	64 e0       	ldi	r22, 0x04	; 4
    5cde:	80 e0       	ldi	r24, 0x00	; 0
    5ce0:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5ce4:	67 c1       	rjmp	.+718    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5ce6:	89 81       	ldd	r24, Y+1	; 0x01
    5ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cea:	80 38       	cpi	r24, 0x80	; 128
    5cec:	91 40       	sbci	r25, 0x01	; 1
    5cee:	29 f4       	brne	.+10     	; 0x5cfa <sysclk_enable_peripheral_clock+0x6a>
    5cf0:	62 e0       	ldi	r22, 0x02	; 2
    5cf2:	80 e0       	ldi	r24, 0x00	; 0
    5cf4:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5cf8:	5d c1       	rjmp	.+698    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5cfa:	89 81       	ldd	r24, Y+1	; 0x01
    5cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    5cfe:	81 15       	cp	r24, r1
    5d00:	91 40       	sbci	r25, 0x01	; 1
    5d02:	29 f4       	brne	.+10     	; 0x5d0e <sysclk_enable_peripheral_clock+0x7e>
    5d04:	61 e0       	ldi	r22, 0x01	; 1
    5d06:	80 e0       	ldi	r24, 0x00	; 0
    5d08:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d0c:	53 c1       	rjmp	.+678    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d0e:	89 81       	ldd	r24, Y+1	; 0x01
    5d10:	9a 81       	ldd	r25, Y+2	; 0x02
    5d12:	80 38       	cpi	r24, 0x80	; 128
    5d14:	93 40       	sbci	r25, 0x03	; 3
    5d16:	29 f4       	brne	.+10     	; 0x5d22 <sysclk_enable_peripheral_clock+0x92>
    5d18:	61 e0       	ldi	r22, 0x01	; 1
    5d1a:	81 e0       	ldi	r24, 0x01	; 1
    5d1c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d20:	49 c1       	rjmp	.+658    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d22:	89 81       	ldd	r24, Y+1	; 0x01
    5d24:	9a 81       	ldd	r25, Y+2	; 0x02
    5d26:	80 39       	cpi	r24, 0x90	; 144
    5d28:	93 40       	sbci	r25, 0x03	; 3
    5d2a:	29 f4       	brne	.+10     	; 0x5d36 <sysclk_enable_peripheral_clock+0xa6>
    5d2c:	61 e0       	ldi	r22, 0x01	; 1
    5d2e:	82 e0       	ldi	r24, 0x02	; 2
    5d30:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d34:	3f c1       	rjmp	.+638    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d36:	89 81       	ldd	r24, Y+1	; 0x01
    5d38:	9a 81       	ldd	r25, Y+2	; 0x02
    5d3a:	81 15       	cp	r24, r1
    5d3c:	92 40       	sbci	r25, 0x02	; 2
    5d3e:	29 f4       	brne	.+10     	; 0x5d4a <sysclk_enable_peripheral_clock+0xba>
    5d40:	62 e0       	ldi	r22, 0x02	; 2
    5d42:	81 e0       	ldi	r24, 0x01	; 1
    5d44:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d48:	35 c1       	rjmp	.+618    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d4a:	89 81       	ldd	r24, Y+1	; 0x01
    5d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d4e:	80 34       	cpi	r24, 0x40	; 64
    5d50:	92 40       	sbci	r25, 0x02	; 2
    5d52:	29 f4       	brne	.+10     	; 0x5d5e <sysclk_enable_peripheral_clock+0xce>
    5d54:	62 e0       	ldi	r22, 0x02	; 2
    5d56:	82 e0       	ldi	r24, 0x02	; 2
    5d58:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d5c:	2b c1       	rjmp	.+598    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d5e:	89 81       	ldd	r24, Y+1	; 0x01
    5d60:	9a 81       	ldd	r25, Y+2	; 0x02
    5d62:	81 15       	cp	r24, r1
    5d64:	93 40       	sbci	r25, 0x03	; 3
    5d66:	29 f4       	brne	.+10     	; 0x5d72 <sysclk_enable_peripheral_clock+0xe2>
    5d68:	64 e0       	ldi	r22, 0x04	; 4
    5d6a:	81 e0       	ldi	r24, 0x01	; 1
    5d6c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d70:	21 c1       	rjmp	.+578    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d72:	89 81       	ldd	r24, Y+1	; 0x01
    5d74:	9a 81       	ldd	r25, Y+2	; 0x02
    5d76:	80 32       	cpi	r24, 0x20	; 32
    5d78:	93 40       	sbci	r25, 0x03	; 3
    5d7a:	29 f4       	brne	.+10     	; 0x5d86 <sysclk_enable_peripheral_clock+0xf6>
    5d7c:	64 e0       	ldi	r22, 0x04	; 4
    5d7e:	82 e0       	ldi	r24, 0x02	; 2
    5d80:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d84:	17 c1       	rjmp	.+558    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d86:	89 81       	ldd	r24, Y+1	; 0x01
    5d88:	9a 81       	ldd	r25, Y+2	; 0x02
    5d8a:	81 15       	cp	r24, r1
    5d8c:	98 40       	sbci	r25, 0x08	; 8
    5d8e:	29 f4       	brne	.+10     	; 0x5d9a <sysclk_enable_peripheral_clock+0x10a>
    5d90:	61 e0       	ldi	r22, 0x01	; 1
    5d92:	83 e0       	ldi	r24, 0x03	; 3
    5d94:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5d98:	0d c1       	rjmp	.+538    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5d9a:	89 81       	ldd	r24, Y+1	; 0x01
    5d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d9e:	81 15       	cp	r24, r1
    5da0:	99 40       	sbci	r25, 0x09	; 9
    5da2:	29 f4       	brne	.+10     	; 0x5dae <sysclk_enable_peripheral_clock+0x11e>
    5da4:	61 e0       	ldi	r22, 0x01	; 1
    5da6:	84 e0       	ldi	r24, 0x04	; 4
    5da8:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5dac:	03 c1       	rjmp	.+518    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5dae:	89 81       	ldd	r24, Y+1	; 0x01
    5db0:	9a 81       	ldd	r25, Y+2	; 0x02
    5db2:	81 15       	cp	r24, r1
    5db4:	9a 40       	sbci	r25, 0x0A	; 10
    5db6:	29 f4       	brne	.+10     	; 0x5dc2 <sysclk_enable_peripheral_clock+0x132>
    5db8:	61 e0       	ldi	r22, 0x01	; 1
    5dba:	85 e0       	ldi	r24, 0x05	; 5
    5dbc:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5dc0:	f9 c0       	rjmp	.+498    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5dc2:	89 81       	ldd	r24, Y+1	; 0x01
    5dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc6:	81 15       	cp	r24, r1
    5dc8:	9b 40       	sbci	r25, 0x0B	; 11
    5dca:	29 f4       	brne	.+10     	; 0x5dd6 <sysclk_enable_peripheral_clock+0x146>
    5dcc:	61 e0       	ldi	r22, 0x01	; 1
    5dce:	86 e0       	ldi	r24, 0x06	; 6
    5dd0:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5dd4:	ef c0       	rjmp	.+478    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5dd6:	89 81       	ldd	r24, Y+1	; 0x01
    5dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dda:	80 34       	cpi	r24, 0x40	; 64
    5ddc:	98 40       	sbci	r25, 0x08	; 8
    5dde:	29 f4       	brne	.+10     	; 0x5dea <sysclk_enable_peripheral_clock+0x15a>
    5de0:	62 e0       	ldi	r22, 0x02	; 2
    5de2:	83 e0       	ldi	r24, 0x03	; 3
    5de4:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5de8:	e5 c0       	rjmp	.+458    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5dea:	89 81       	ldd	r24, Y+1	; 0x01
    5dec:	9a 81       	ldd	r25, Y+2	; 0x02
    5dee:	80 34       	cpi	r24, 0x40	; 64
    5df0:	99 40       	sbci	r25, 0x09	; 9
    5df2:	29 f4       	brne	.+10     	; 0x5dfe <sysclk_enable_peripheral_clock+0x16e>
    5df4:	62 e0       	ldi	r22, 0x02	; 2
    5df6:	84 e0       	ldi	r24, 0x04	; 4
    5df8:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5dfc:	db c0       	rjmp	.+438    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	9a 81       	ldd	r25, Y+2	; 0x02
    5e02:	80 34       	cpi	r24, 0x40	; 64
    5e04:	9a 40       	sbci	r25, 0x0A	; 10
    5e06:	29 f4       	brne	.+10     	; 0x5e12 <sysclk_enable_peripheral_clock+0x182>
    5e08:	62 e0       	ldi	r22, 0x02	; 2
    5e0a:	85 e0       	ldi	r24, 0x05	; 5
    5e0c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e10:	d1 c0       	rjmp	.+418    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	9a 81       	ldd	r25, Y+2	; 0x02
    5e16:	80 34       	cpi	r24, 0x40	; 64
    5e18:	9b 40       	sbci	r25, 0x0B	; 11
    5e1a:	29 f4       	brne	.+10     	; 0x5e26 <sysclk_enable_peripheral_clock+0x196>
    5e1c:	62 e0       	ldi	r22, 0x02	; 2
    5e1e:	86 e0       	ldi	r24, 0x06	; 6
    5e20:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e24:	c7 c0       	rjmp	.+398    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e26:	89 81       	ldd	r24, Y+1	; 0x01
    5e28:	9a 81       	ldd	r25, Y+2	; 0x02
    5e2a:	80 39       	cpi	r24, 0x90	; 144
    5e2c:	98 40       	sbci	r25, 0x08	; 8
    5e2e:	29 f4       	brne	.+10     	; 0x5e3a <sysclk_enable_peripheral_clock+0x1aa>
    5e30:	64 e0       	ldi	r22, 0x04	; 4
    5e32:	83 e0       	ldi	r24, 0x03	; 3
    5e34:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e38:	bd c0       	rjmp	.+378    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
    5e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3e:	80 39       	cpi	r24, 0x90	; 144
    5e40:	99 40       	sbci	r25, 0x09	; 9
    5e42:	29 f4       	brne	.+10     	; 0x5e4e <sysclk_enable_peripheral_clock+0x1be>
    5e44:	64 e0       	ldi	r22, 0x04	; 4
    5e46:	84 e0       	ldi	r24, 0x04	; 4
    5e48:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e4c:	b3 c0       	rjmp	.+358    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e4e:	89 81       	ldd	r24, Y+1	; 0x01
    5e50:	9a 81       	ldd	r25, Y+2	; 0x02
    5e52:	80 39       	cpi	r24, 0x90	; 144
    5e54:	9a 40       	sbci	r25, 0x0A	; 10
    5e56:	29 f4       	brne	.+10     	; 0x5e62 <sysclk_enable_peripheral_clock+0x1d2>
    5e58:	64 e0       	ldi	r22, 0x04	; 4
    5e5a:	85 e0       	ldi	r24, 0x05	; 5
    5e5c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e60:	a9 c0       	rjmp	.+338    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e62:	89 81       	ldd	r24, Y+1	; 0x01
    5e64:	9a 81       	ldd	r25, Y+2	; 0x02
    5e66:	80 39       	cpi	r24, 0x90	; 144
    5e68:	9b 40       	sbci	r25, 0x0B	; 11
    5e6a:	29 f4       	brne	.+10     	; 0x5e76 <sysclk_enable_peripheral_clock+0x1e6>
    5e6c:	64 e0       	ldi	r22, 0x04	; 4
    5e6e:	86 e0       	ldi	r24, 0x06	; 6
    5e70:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e74:	9f c0       	rjmp	.+318    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e76:	89 81       	ldd	r24, Y+1	; 0x01
    5e78:	9a 81       	ldd	r25, Y+2	; 0x02
    5e7a:	80 3c       	cpi	r24, 0xC0	; 192
    5e7c:	98 40       	sbci	r25, 0x08	; 8
    5e7e:	29 f4       	brne	.+10     	; 0x5e8a <sysclk_enable_peripheral_clock+0x1fa>
    5e80:	68 e0       	ldi	r22, 0x08	; 8
    5e82:	83 e0       	ldi	r24, 0x03	; 3
    5e84:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e88:	95 c0       	rjmp	.+298    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e8a:	89 81       	ldd	r24, Y+1	; 0x01
    5e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e8e:	80 3c       	cpi	r24, 0xC0	; 192
    5e90:	99 40       	sbci	r25, 0x09	; 9
    5e92:	29 f4       	brne	.+10     	; 0x5e9e <sysclk_enable_peripheral_clock+0x20e>
    5e94:	68 e0       	ldi	r22, 0x08	; 8
    5e96:	84 e0       	ldi	r24, 0x04	; 4
    5e98:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5e9c:	8b c0       	rjmp	.+278    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5e9e:	89 81       	ldd	r24, Y+1	; 0x01
    5ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea2:	80 3c       	cpi	r24, 0xC0	; 192
    5ea4:	9a 40       	sbci	r25, 0x0A	; 10
    5ea6:	29 f4       	brne	.+10     	; 0x5eb2 <sysclk_enable_peripheral_clock+0x222>
    5ea8:	68 e0       	ldi	r22, 0x08	; 8
    5eaa:	85 e0       	ldi	r24, 0x05	; 5
    5eac:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5eb0:	81 c0       	rjmp	.+258    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5eb2:	89 81       	ldd	r24, Y+1	; 0x01
    5eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb6:	80 3c       	cpi	r24, 0xC0	; 192
    5eb8:	9b 40       	sbci	r25, 0x0B	; 11
    5eba:	29 f4       	brne	.+10     	; 0x5ec6 <sysclk_enable_peripheral_clock+0x236>
    5ebc:	68 e0       	ldi	r22, 0x08	; 8
    5ebe:	86 e0       	ldi	r24, 0x06	; 6
    5ec0:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5ec4:	77 c0       	rjmp	.+238    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5ec6:	89 81       	ldd	r24, Y+1	; 0x01
    5ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eca:	80 3a       	cpi	r24, 0xA0	; 160
    5ecc:	98 40       	sbci	r25, 0x08	; 8
    5ece:	29 f4       	brne	.+10     	; 0x5eda <sysclk_enable_peripheral_clock+0x24a>
    5ed0:	60 e1       	ldi	r22, 0x10	; 16
    5ed2:	83 e0       	ldi	r24, 0x03	; 3
    5ed4:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5ed8:	6d c0       	rjmp	.+218    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5eda:	89 81       	ldd	r24, Y+1	; 0x01
    5edc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ede:	80 3a       	cpi	r24, 0xA0	; 160
    5ee0:	99 40       	sbci	r25, 0x09	; 9
    5ee2:	29 f4       	brne	.+10     	; 0x5eee <sysclk_enable_peripheral_clock+0x25e>
    5ee4:	60 e1       	ldi	r22, 0x10	; 16
    5ee6:	84 e0       	ldi	r24, 0x04	; 4
    5ee8:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5eec:	63 c0       	rjmp	.+198    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5eee:	89 81       	ldd	r24, Y+1	; 0x01
    5ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ef2:	80 3a       	cpi	r24, 0xA0	; 160
    5ef4:	9a 40       	sbci	r25, 0x0A	; 10
    5ef6:	29 f4       	brne	.+10     	; 0x5f02 <sysclk_enable_peripheral_clock+0x272>
    5ef8:	60 e1       	ldi	r22, 0x10	; 16
    5efa:	85 e0       	ldi	r24, 0x05	; 5
    5efc:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f00:	59 c0       	rjmp	.+178    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f02:	89 81       	ldd	r24, Y+1	; 0x01
    5f04:	9a 81       	ldd	r25, Y+2	; 0x02
    5f06:	80 3a       	cpi	r24, 0xA0	; 160
    5f08:	9b 40       	sbci	r25, 0x0B	; 11
    5f0a:	29 f4       	brne	.+10     	; 0x5f16 <sysclk_enable_peripheral_clock+0x286>
    5f0c:	60 e1       	ldi	r22, 0x10	; 16
    5f0e:	86 e0       	ldi	r24, 0x06	; 6
    5f10:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f14:	4f c0       	rjmp	.+158    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f16:	89 81       	ldd	r24, Y+1	; 0x01
    5f18:	9a 81       	ldd	r25, Y+2	; 0x02
    5f1a:	80 3b       	cpi	r24, 0xB0	; 176
    5f1c:	98 40       	sbci	r25, 0x08	; 8
    5f1e:	29 f4       	brne	.+10     	; 0x5f2a <sysclk_enable_peripheral_clock+0x29a>
    5f20:	60 e2       	ldi	r22, 0x20	; 32
    5f22:	83 e0       	ldi	r24, 0x03	; 3
    5f24:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f28:	45 c0       	rjmp	.+138    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f2a:	89 81       	ldd	r24, Y+1	; 0x01
    5f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f2e:	80 3b       	cpi	r24, 0xB0	; 176
    5f30:	99 40       	sbci	r25, 0x09	; 9
    5f32:	29 f4       	brne	.+10     	; 0x5f3e <sysclk_enable_peripheral_clock+0x2ae>
    5f34:	60 e2       	ldi	r22, 0x20	; 32
    5f36:	84 e0       	ldi	r24, 0x04	; 4
    5f38:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f3c:	3b c0       	rjmp	.+118    	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f3e:	89 81       	ldd	r24, Y+1	; 0x01
    5f40:	9a 81       	ldd	r25, Y+2	; 0x02
    5f42:	80 3b       	cpi	r24, 0xB0	; 176
    5f44:	9a 40       	sbci	r25, 0x0A	; 10
    5f46:	29 f4       	brne	.+10     	; 0x5f52 <sysclk_enable_peripheral_clock+0x2c2>
    5f48:	60 e2       	ldi	r22, 0x20	; 32
    5f4a:	85 e0       	ldi	r24, 0x05	; 5
    5f4c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f50:	31 c0       	rjmp	.+98     	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f52:	89 81       	ldd	r24, Y+1	; 0x01
    5f54:	9a 81       	ldd	r25, Y+2	; 0x02
    5f56:	80 3b       	cpi	r24, 0xB0	; 176
    5f58:	9b 40       	sbci	r25, 0x0B	; 11
    5f5a:	29 f4       	brne	.+10     	; 0x5f66 <sysclk_enable_peripheral_clock+0x2d6>
    5f5c:	60 e2       	ldi	r22, 0x20	; 32
    5f5e:	86 e0       	ldi	r24, 0x06	; 6
    5f60:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f64:	27 c0       	rjmp	.+78     	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f66:	89 81       	ldd	r24, Y+1	; 0x01
    5f68:	9a 81       	ldd	r25, Y+2	; 0x02
    5f6a:	80 38       	cpi	r24, 0x80	; 128
    5f6c:	94 40       	sbci	r25, 0x04	; 4
    5f6e:	29 f4       	brne	.+10     	; 0x5f7a <sysclk_enable_peripheral_clock+0x2ea>
    5f70:	60 e4       	ldi	r22, 0x40	; 64
    5f72:	83 e0       	ldi	r24, 0x03	; 3
    5f74:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f78:	1d c0       	rjmp	.+58     	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f7a:	89 81       	ldd	r24, Y+1	; 0x01
    5f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f7e:	80 39       	cpi	r24, 0x90	; 144
    5f80:	94 40       	sbci	r25, 0x04	; 4
    5f82:	29 f4       	brne	.+10     	; 0x5f8e <sysclk_enable_peripheral_clock+0x2fe>
    5f84:	60 e4       	ldi	r22, 0x40	; 64
    5f86:	84 e0       	ldi	r24, 0x04	; 4
    5f88:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5f8c:	13 c0       	rjmp	.+38     	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5f8e:	89 81       	ldd	r24, Y+1	; 0x01
    5f90:	9a 81       	ldd	r25, Y+2	; 0x02
    5f92:	80 3a       	cpi	r24, 0xA0	; 160
    5f94:	94 40       	sbci	r25, 0x04	; 4
    5f96:	29 f4       	brne	.+10     	; 0x5fa2 <sysclk_enable_peripheral_clock+0x312>
    5f98:	60 e4       	ldi	r22, 0x40	; 64
    5f9a:	85 e0       	ldi	r24, 0x05	; 5
    5f9c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5fa0:	09 c0       	rjmp	.+18     	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5fa2:	89 81       	ldd	r24, Y+1	; 0x01
    5fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa6:	80 3b       	cpi	r24, 0xB0	; 176
    5fa8:	94 40       	sbci	r25, 0x04	; 4
    5faa:	21 f4       	brne	.+8      	; 0x5fb4 <sysclk_enable_peripheral_clock+0x324>
    5fac:	60 e4       	ldi	r22, 0x40	; 64
    5fae:	86 e0       	ldi	r24, 0x06	; 6
    5fb0:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    5fb4:	00 00       	nop
    5fb6:	0f 90       	pop	r0
    5fb8:	0f 90       	pop	r0
    5fba:	df 91       	pop	r29
    5fbc:	cf 91       	pop	r28
    5fbe:	08 95       	ret

00005fc0 <usart_serial_init>:
    5fc0:	cf 93       	push	r28
    5fc2:	df 93       	push	r29
    5fc4:	cd b7       	in	r28, 0x3d	; 61
    5fc6:	de b7       	in	r29, 0x3e	; 62
    5fc8:	2b 97       	sbiw	r28, 0x0b	; 11
    5fca:	cd bf       	out	0x3d, r28	; 61
    5fcc:	de bf       	out	0x3e, r29	; 62
    5fce:	88 87       	std	Y+8, r24	; 0x08
    5fd0:	99 87       	std	Y+9, r25	; 0x09
    5fd2:	6a 87       	std	Y+10, r22	; 0x0a
    5fd4:	7b 87       	std	Y+11, r23	; 0x0b
    5fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fda:	fc 01       	movw	r30, r24
    5fdc:	84 81       	ldd	r24, Z+4	; 0x04
    5fde:	8d 83       	std	Y+5, r24	; 0x05
    5fe0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fe2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fe4:	fc 01       	movw	r30, r24
    5fe6:	85 81       	ldd	r24, Z+5	; 0x05
    5fe8:	8e 83       	std	Y+6, r24	; 0x06
    5fea:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fec:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fee:	fc 01       	movw	r30, r24
    5ff0:	86 81       	ldd	r24, Z+6	; 0x06
    5ff2:	8f 83       	std	Y+7, r24	; 0x07
    5ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	80 81       	ld	r24, Z
    5ffc:	91 81       	ldd	r25, Z+1	; 0x01
    5ffe:	a2 81       	ldd	r26, Z+2	; 0x02
    6000:	b3 81       	ldd	r27, Z+3	; 0x03
    6002:	89 83       	std	Y+1, r24	; 0x01
    6004:	9a 83       	std	Y+2, r25	; 0x02
    6006:	ab 83       	std	Y+3, r26	; 0x03
    6008:	bc 83       	std	Y+4, r27	; 0x04
    600a:	88 85       	ldd	r24, Y+8	; 0x08
    600c:	99 85       	ldd	r25, Y+9	; 0x09
    600e:	80 3a       	cpi	r24, 0xA0	; 160
    6010:	98 40       	sbci	r25, 0x08	; 8
    6012:	21 f4       	brne	.+8      	; 0x601c <usart_serial_init+0x5c>
    6014:	60 e1       	ldi	r22, 0x10	; 16
    6016:	83 e0       	ldi	r24, 0x03	; 3
    6018:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    601c:	88 85       	ldd	r24, Y+8	; 0x08
    601e:	99 85       	ldd	r25, Y+9	; 0x09
    6020:	80 3b       	cpi	r24, 0xB0	; 176
    6022:	98 40       	sbci	r25, 0x08	; 8
    6024:	21 f4       	brne	.+8      	; 0x602e <usart_serial_init+0x6e>
    6026:	60 e2       	ldi	r22, 0x20	; 32
    6028:	83 e0       	ldi	r24, 0x03	; 3
    602a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    602e:	88 85       	ldd	r24, Y+8	; 0x08
    6030:	99 85       	ldd	r25, Y+9	; 0x09
    6032:	80 3a       	cpi	r24, 0xA0	; 160
    6034:	99 40       	sbci	r25, 0x09	; 9
    6036:	21 f4       	brne	.+8      	; 0x6040 <usart_serial_init+0x80>
    6038:	60 e1       	ldi	r22, 0x10	; 16
    603a:	84 e0       	ldi	r24, 0x04	; 4
    603c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    6040:	88 85       	ldd	r24, Y+8	; 0x08
    6042:	99 85       	ldd	r25, Y+9	; 0x09
    6044:	80 3b       	cpi	r24, 0xB0	; 176
    6046:	99 40       	sbci	r25, 0x09	; 9
    6048:	21 f4       	brne	.+8      	; 0x6052 <usart_serial_init+0x92>
    604a:	60 e2       	ldi	r22, 0x20	; 32
    604c:	84 e0       	ldi	r24, 0x04	; 4
    604e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    6052:	88 85       	ldd	r24, Y+8	; 0x08
    6054:	99 85       	ldd	r25, Y+9	; 0x09
    6056:	80 3a       	cpi	r24, 0xA0	; 160
    6058:	9a 40       	sbci	r25, 0x0A	; 10
    605a:	21 f4       	brne	.+8      	; 0x6064 <usart_serial_init+0xa4>
    605c:	60 e1       	ldi	r22, 0x10	; 16
    605e:	85 e0       	ldi	r24, 0x05	; 5
    6060:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    6064:	88 85       	ldd	r24, Y+8	; 0x08
    6066:	99 85       	ldd	r25, Y+9	; 0x09
    6068:	80 3b       	cpi	r24, 0xB0	; 176
    606a:	9a 40       	sbci	r25, 0x0A	; 10
    606c:	21 f4       	brne	.+8      	; 0x6076 <usart_serial_init+0xb6>
    606e:	60 e2       	ldi	r22, 0x20	; 32
    6070:	85 e0       	ldi	r24, 0x05	; 5
    6072:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    6076:	88 85       	ldd	r24, Y+8	; 0x08
    6078:	99 85       	ldd	r25, Y+9	; 0x09
    607a:	80 3a       	cpi	r24, 0xA0	; 160
    607c:	9b 40       	sbci	r25, 0x0B	; 11
    607e:	21 f4       	brne	.+8      	; 0x6088 <usart_serial_init+0xc8>
    6080:	60 e1       	ldi	r22, 0x10	; 16
    6082:	86 e0       	ldi	r24, 0x06	; 6
    6084:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    6088:	88 85       	ldd	r24, Y+8	; 0x08
    608a:	99 85       	ldd	r25, Y+9	; 0x09
    608c:	80 3b       	cpi	r24, 0xB0	; 176
    608e:	9b 40       	sbci	r25, 0x0B	; 11
    6090:	21 f4       	brne	.+8      	; 0x609a <usart_serial_init+0xda>
    6092:	60 e2       	ldi	r22, 0x20	; 32
    6094:	86 e0       	ldi	r24, 0x06	; 6
    6096:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <sysclk_enable_module>
    609a:	88 85       	ldd	r24, Y+8	; 0x08
    609c:	99 85       	ldd	r25, Y+9	; 0x09
    609e:	9e 01       	movw	r18, r28
    60a0:	2f 5f       	subi	r18, 0xFF	; 255
    60a2:	3f 4f       	sbci	r19, 0xFF	; 255
    60a4:	b9 01       	movw	r22, r18
    60a6:	0f db       	rcall	.-2530   	; 0x56c6 <usart_init_rs232>
    60a8:	88 23       	and	r24, r24
    60aa:	11 f0       	breq	.+4      	; 0x60b0 <usart_serial_init+0xf0>
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	01 c0       	rjmp	.+2      	; 0x60b2 <usart_serial_init+0xf2>
    60b0:	80 e0       	ldi	r24, 0x00	; 0
    60b2:	2b 96       	adiw	r28, 0x0b	; 11
    60b4:	cd bf       	out	0x3d, r28	; 61
    60b6:	de bf       	out	0x3e, r29	; 62
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	08 95       	ret

000060be <usart_serial_putchar>:
    60be:	cf 93       	push	r28
    60c0:	df 93       	push	r29
    60c2:	00 d0       	rcall	.+0      	; 0x60c4 <usart_serial_putchar+0x6>
    60c4:	cd b7       	in	r28, 0x3d	; 61
    60c6:	de b7       	in	r29, 0x3e	; 62
    60c8:	89 83       	std	Y+1, r24	; 0x01
    60ca:	9a 83       	std	Y+2, r25	; 0x02
    60cc:	6b 83       	std	Y+3, r22	; 0x03
    60ce:	89 81       	ldd	r24, Y+1	; 0x01
    60d0:	9a 81       	ldd	r25, Y+2	; 0x02
    60d2:	6b 81       	ldd	r22, Y+3	; 0x03
    60d4:	3e db       	rcall	.-2436   	; 0x5752 <usart_putchar>
    60d6:	23 96       	adiw	r28, 0x03	; 3
    60d8:	cd bf       	out	0x3d, r28	; 61
    60da:	de bf       	out	0x3e, r29	; 62
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	08 95       	ret

000060e2 <usart_serial_getchar>:
    60e2:	cf 93       	push	r28
    60e4:	df 93       	push	r29
    60e6:	00 d0       	rcall	.+0      	; 0x60e8 <usart_serial_getchar+0x6>
    60e8:	1f 92       	push	r1
    60ea:	cd b7       	in	r28, 0x3d	; 61
    60ec:	de b7       	in	r29, 0x3e	; 62
    60ee:	89 83       	std	Y+1, r24	; 0x01
    60f0:	9a 83       	std	Y+2, r25	; 0x02
    60f2:	6b 83       	std	Y+3, r22	; 0x03
    60f4:	7c 83       	std	Y+4, r23	; 0x04
    60f6:	89 81       	ldd	r24, Y+1	; 0x01
    60f8:	9a 81       	ldd	r25, Y+2	; 0x02
    60fa:	49 db       	rcall	.-2414   	; 0x578e <usart_getchar>
    60fc:	28 2f       	mov	r18, r24
    60fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6100:	9c 81       	ldd	r25, Y+4	; 0x04
    6102:	fc 01       	movw	r30, r24
    6104:	20 83       	st	Z, r18
    6106:	00 00       	nop
    6108:	24 96       	adiw	r28, 0x04	; 4
    610a:	cd bf       	out	0x3d, r28	; 61
    610c:	de bf       	out	0x3e, r29	; 62
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	08 95       	ret

00006114 <stdio_serial_init>:
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	00 d0       	rcall	.+0      	; 0x611a <stdio_serial_init+0x6>
    611a:	1f 92       	push	r1
    611c:	cd b7       	in	r28, 0x3d	; 61
    611e:	de b7       	in	r29, 0x3e	; 62
    6120:	89 83       	std	Y+1, r24	; 0x01
    6122:	9a 83       	std	Y+2, r25	; 0x02
    6124:	6b 83       	std	Y+3, r22	; 0x03
    6126:	7c 83       	std	Y+4, r23	; 0x04
    6128:	89 81       	ldd	r24, Y+1	; 0x01
    612a:	9a 81       	ldd	r25, Y+2	; 0x02
    612c:	80 93 71 26 	sts	0x2671, r24	; 0x802671 <stdio_base>
    6130:	90 93 72 26 	sts	0x2672, r25	; 0x802672 <stdio_base+0x1>
    6134:	8f e5       	ldi	r24, 0x5F	; 95
    6136:	90 e3       	ldi	r25, 0x30	; 48
    6138:	80 93 6f 26 	sts	0x266F, r24	; 0x80266f <ptr_put>
    613c:	90 93 70 26 	sts	0x2670, r25	; 0x802670 <ptr_put+0x1>
    6140:	81 e7       	ldi	r24, 0x71	; 113
    6142:	90 e3       	ldi	r25, 0x30	; 48
    6144:	80 93 6d 26 	sts	0x266D, r24	; 0x80266d <ptr_get>
    6148:	90 93 6e 26 	sts	0x266E, r25	; 0x80266e <ptr_get+0x1>
    614c:	2b 81       	ldd	r18, Y+3	; 0x03
    614e:	3c 81       	ldd	r19, Y+4	; 0x04
    6150:	89 81       	ldd	r24, Y+1	; 0x01
    6152:	9a 81       	ldd	r25, Y+2	; 0x02
    6154:	b9 01       	movw	r22, r18
    6156:	34 df       	rcall	.-408    	; 0x5fc0 <usart_serial_init>
    6158:	6e e7       	ldi	r22, 0x7E	; 126
    615a:	76 e1       	ldi	r23, 0x16	; 22
    615c:	8d e9       	ldi	r24, 0x9D	; 157
    615e:	96 e1       	ldi	r25, 0x16	; 22
    6160:	0e 94 af 3c 	call	0x795e	; 0x795e <fdevopen>
    6164:	00 00       	nop
    6166:	24 96       	adiw	r28, 0x04	; 4
    6168:	cd bf       	out	0x3d, r28	; 61
    616a:	de bf       	out	0x3e, r29	; 62
    616c:	df 91       	pop	r29
    616e:	cf 91       	pop	r28
    6170:	08 95       	ret

00006172 <uart_terminal_init>:

void uart_terminal_init()
{
    6172:	cf 93       	push	r28
    6174:	df 93       	push	r29
    6176:	cd b7       	in	r28, 0x3d	; 61
    6178:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    617a:	80 ea       	ldi	r24, 0xA0	; 160
    617c:	9a e0       	ldi	r25, 0x0A	; 10
    617e:	88 dd       	rcall	.-1264   	; 0x5c90 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    6180:	80 e8       	ldi	r24, 0x80	; 128
    6182:	96 e0       	ldi	r25, 0x06	; 6
    6184:	20 e8       	ldi	r18, 0x80	; 128
    6186:	36 e0       	ldi	r19, 0x06	; 6
    6188:	f9 01       	movw	r30, r18
    618a:	20 81       	ld	r18, Z
    618c:	28 60       	ori	r18, 0x08	; 8
    618e:	fc 01       	movw	r30, r24
    6190:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    6192:	6d e0       	ldi	r22, 0x0D	; 13
    6194:	70 e2       	ldi	r23, 0x20	; 32
    6196:	80 ea       	ldi	r24, 0xA0	; 160
    6198:	9a e0       	ldi	r25, 0x0A	; 10
    619a:	bc df       	rcall	.-136    	; 0x6114 <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    619c:	8d e3       	ldi	r24, 0x3D	; 61
    619e:	90 e2       	ldi	r25, 0x20	; 32
    61a0:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <puts>
		printf("UART Initialized\n");
    61a4:	82 e6       	ldi	r24, 0x62	; 98
    61a6:	90 e2       	ldi	r25, 0x20	; 32
    61a8:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <puts>
	}
}
    61ac:	00 00       	nop
    61ae:	df 91       	pop	r29
    61b0:	cf 91       	pop	r28
    61b2:	08 95       	ret

000061b4 <sysclk_get_main_hz>:
		&& altitude > FS3_MAX_ALTITUDE)
	{
			buzz_on();
			blockTransmission = true;
	}
}
    61b4:	cf 93       	push	r28
    61b6:	df 93       	push	r29
    61b8:	cd b7       	in	r28, 0x3d	; 61
    61ba:	de b7       	in	r29, 0x3e	; 62
    61bc:	80 e0       	ldi	r24, 0x00	; 0
    61be:	98 e4       	ldi	r25, 0x48	; 72
    61c0:	a8 ee       	ldi	r26, 0xE8	; 232
    61c2:	b1 e0       	ldi	r27, 0x01	; 1
    61c4:	bc 01       	movw	r22, r24
    61c6:	cd 01       	movw	r24, r26
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	08 95       	ret

000061ce <sysclk_get_per4_hz>:
    61ce:	cf 93       	push	r28
    61d0:	df 93       	push	r29
    61d2:	1f 92       	push	r1
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
    61d8:	19 82       	std	Y+1, r1	; 0x01
    61da:	ec df       	rcall	.-40     	; 0x61b4 <sysclk_get_main_hz>
    61dc:	dc 01       	movw	r26, r24
    61de:	cb 01       	movw	r24, r22
    61e0:	29 81       	ldd	r18, Y+1	; 0x01
    61e2:	22 2f       	mov	r18, r18
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	04 c0       	rjmp	.+8      	; 0x61f0 <sysclk_get_per4_hz+0x22>
    61e8:	b6 95       	lsr	r27
    61ea:	a7 95       	ror	r26
    61ec:	97 95       	ror	r25
    61ee:	87 95       	ror	r24
    61f0:	2a 95       	dec	r18
    61f2:	d2 f7       	brpl	.-12     	; 0x61e8 <sysclk_get_per4_hz+0x1a>
    61f4:	bc 01       	movw	r22, r24
    61f6:	cd 01       	movw	r24, r26
    61f8:	0f 90       	pop	r0
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	08 95       	ret

00006200 <sysclk_get_per2_hz>:
    6200:	cf 93       	push	r28
    6202:	df 93       	push	r29
    6204:	cd b7       	in	r28, 0x3d	; 61
    6206:	de b7       	in	r29, 0x3e	; 62
    6208:	e2 df       	rcall	.-60     	; 0x61ce <sysclk_get_per4_hz>
    620a:	dc 01       	movw	r26, r24
    620c:	cb 01       	movw	r24, r22
    620e:	bc 01       	movw	r22, r24
    6210:	cd 01       	movw	r24, r26
    6212:	df 91       	pop	r29
    6214:	cf 91       	pop	r28
    6216:	08 95       	ret

00006218 <sysclk_get_per_hz>:
    6218:	cf 93       	push	r28
    621a:	df 93       	push	r29
    621c:	cd b7       	in	r28, 0x3d	; 61
    621e:	de b7       	in	r29, 0x3e	; 62
    6220:	ef df       	rcall	.-34     	; 0x6200 <sysclk_get_per2_hz>
    6222:	dc 01       	movw	r26, r24
    6224:	cb 01       	movw	r24, r22
    6226:	bc 01       	movw	r22, r24
    6228:	cd 01       	movw	r24, r26
    622a:	df 91       	pop	r29
    622c:	cf 91       	pop	r28
    622e:	08 95       	ret

00006230 <sysclk_get_cpu_hz>:
    6230:	cf 93       	push	r28
    6232:	df 93       	push	r29
    6234:	cd b7       	in	r28, 0x3d	; 61
    6236:	de b7       	in	r29, 0x3e	; 62
    6238:	ef df       	rcall	.-34     	; 0x6218 <sysclk_get_per_hz>
    623a:	dc 01       	movw	r26, r24
    623c:	cb 01       	movw	r24, r22
    623e:	bc 01       	movw	r22, r24
    6240:	cd 01       	movw	r24, r26
    6242:	df 91       	pop	r29
    6244:	cf 91       	pop	r28
    6246:	08 95       	ret

00006248 <__portable_avr_delay_cycles>:
    6248:	04 c0       	rjmp	.+8      	; 0x6252 <__portable_avr_delay_cycles+0xa>
    624a:	61 50       	subi	r22, 0x01	; 1
    624c:	71 09       	sbc	r23, r1
    624e:	81 09       	sbc	r24, r1
    6250:	91 09       	sbc	r25, r1
    6252:	61 15       	cp	r22, r1
    6254:	71 05       	cpc	r23, r1
    6256:	81 05       	cpc	r24, r1
    6258:	91 05       	cpc	r25, r1
    625a:	b9 f7       	brne	.-18     	; 0x624a <__portable_avr_delay_cycles+0x2>
    625c:	08 95       	ret

0000625e <pmic_init>:
    625e:	cf 93       	push	r28
    6260:	df 93       	push	r29
    6262:	cd b7       	in	r28, 0x3d	; 61
    6264:	de b7       	in	r29, 0x3e	; 62
    6266:	80 ea       	ldi	r24, 0xA0	; 160
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	27 e0       	ldi	r18, 0x07	; 7
    626c:	fc 01       	movw	r30, r24
    626e:	22 83       	std	Z+2, r18	; 0x02
    6270:	00 00       	nop
    6272:	df 91       	pop	r29
    6274:	cf 91       	pop	r28
    6276:	08 95       	ret

00006278 <pmic_set_scheduling>:
    6278:	cf 93       	push	r28
    627a:	df 93       	push	r29
    627c:	1f 92       	push	r1
    627e:	cd b7       	in	r28, 0x3d	; 61
    6280:	de b7       	in	r29, 0x3e	; 62
    6282:	89 83       	std	Y+1, r24	; 0x01
    6284:	89 81       	ldd	r24, Y+1	; 0x01
    6286:	88 2f       	mov	r24, r24
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	00 97       	sbiw	r24, 0x00	; 0
    628c:	19 f0       	breq	.+6      	; 0x6294 <pmic_set_scheduling+0x1c>
    628e:	01 97       	sbiw	r24, 0x01	; 1
    6290:	79 f0       	breq	.+30     	; 0x62b0 <pmic_set_scheduling+0x38>
    6292:	18 c0       	rjmp	.+48     	; 0x62c4 <pmic_set_scheduling+0x4c>
    6294:	80 ea       	ldi	r24, 0xA0	; 160
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	20 ea       	ldi	r18, 0xA0	; 160
    629a:	30 e0       	ldi	r19, 0x00	; 0
    629c:	f9 01       	movw	r30, r18
    629e:	22 81       	ldd	r18, Z+2	; 0x02
    62a0:	2f 77       	andi	r18, 0x7F	; 127
    62a2:	fc 01       	movw	r30, r24
    62a4:	22 83       	std	Z+2, r18	; 0x02
    62a6:	80 ea       	ldi	r24, 0xA0	; 160
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	fc 01       	movw	r30, r24
    62ac:	11 82       	std	Z+1, r1	; 0x01
    62ae:	0a c0       	rjmp	.+20     	; 0x62c4 <pmic_set_scheduling+0x4c>
    62b0:	80 ea       	ldi	r24, 0xA0	; 160
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	20 ea       	ldi	r18, 0xA0	; 160
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    62b8:	f9 01       	movw	r30, r18
    62ba:	22 81       	ldd	r18, Z+2	; 0x02
    62bc:	20 68       	ori	r18, 0x80	; 128
    62be:	fc 01       	movw	r30, r24
    62c0:	22 83       	std	Z+2, r18	; 0x02
    62c2:	00 00       	nop
    62c4:	00 00       	nop
    62c6:	0f 90       	pop	r0
    62c8:	df 91       	pop	r29
    62ca:	cf 91       	pop	r28
    62cc:	08 95       	ret

000062ce <__iCliRetVal>:
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    62d2:	cd b7       	in	r28, 0x3d	; 61
    62d4:	de b7       	in	r29, 0x3e	; 62
    62d6:	f8 94       	cli
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	df 91       	pop	r29
    62dc:	cf 91       	pop	r28
    62de:	08 95       	ret

000062e0 <__iRestore>:
    62e0:	cf 93       	push	r28
    62e2:	df 93       	push	r29
    62e4:	1f 92       	push	r1
    62e6:	1f 92       	push	r1
    62e8:	cd b7       	in	r28, 0x3d	; 61
    62ea:	de b7       	in	r29, 0x3e	; 62
    62ec:	89 83       	std	Y+1, r24	; 0x01
    62ee:	9a 83       	std	Y+2, r25	; 0x02
    62f0:	8f e3       	ldi	r24, 0x3F	; 63
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	29 81       	ldd	r18, Y+1	; 0x01
    62f6:	3a 81       	ldd	r19, Y+2	; 0x02
    62f8:	f9 01       	movw	r30, r18
    62fa:	20 81       	ld	r18, Z
    62fc:	fc 01       	movw	r30, r24
    62fe:	20 83       	st	Z, r18
    6300:	00 00       	nop
    6302:	0f 90       	pop	r0
    6304:	0f 90       	pop	r0
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	08 95       	ret

0000630c <packetlen>:
    630c:	cf 93       	push	r28
    630e:	df 93       	push	r29
    6310:	00 d0       	rcall	.+0      	; 0x6312 <packetlen+0x6>
    6312:	1f 92       	push	r1
    6314:	cd b7       	in	r28, 0x3d	; 61
    6316:	de b7       	in	r29, 0x3e	; 62
    6318:	8b 83       	std	Y+3, r24	; 0x03
    631a:	9c 83       	std	Y+4, r25	; 0x04
    631c:	19 82       	std	Y+1, r1	; 0x01
    631e:	1a 82       	std	Y+2, r1	; 0x02
    6320:	19 82       	std	Y+1, r1	; 0x01
    6322:	1a 82       	std	Y+2, r1	; 0x02
    6324:	12 c0       	rjmp	.+36     	; 0x634a <packetlen+0x3e>
    6326:	2b 81       	ldd	r18, Y+3	; 0x03
    6328:	3c 81       	ldd	r19, Y+4	; 0x04
    632a:	89 81       	ldd	r24, Y+1	; 0x01
    632c:	9a 81       	ldd	r25, Y+2	; 0x02
    632e:	82 0f       	add	r24, r18
    6330:	93 1f       	adc	r25, r19
    6332:	fc 01       	movw	r30, r24
    6334:	80 81       	ld	r24, Z
    6336:	8a 30       	cpi	r24, 0x0A	; 10
    6338:	19 f4       	brne	.+6      	; 0x6340 <packetlen+0x34>
    633a:	89 81       	ldd	r24, Y+1	; 0x01
    633c:	9a 81       	ldd	r25, Y+2	; 0x02
    633e:	0c c0       	rjmp	.+24     	; 0x6358 <packetlen+0x4c>
    6340:	89 81       	ldd	r24, Y+1	; 0x01
    6342:	9a 81       	ldd	r25, Y+2	; 0x02
    6344:	01 96       	adiw	r24, 0x01	; 1
    6346:	89 83       	std	Y+1, r24	; 0x01
    6348:	9a 83       	std	Y+2, r25	; 0x02
    634a:	89 81       	ldd	r24, Y+1	; 0x01
    634c:	9a 81       	ldd	r25, Y+2	; 0x02
    634e:	81 15       	cp	r24, r1
    6350:	94 40       	sbci	r25, 0x04	; 4
    6352:	48 f3       	brcs	.-46     	; 0x6326 <packetlen+0x1a>
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	94 e0       	ldi	r25, 0x04	; 4
    6358:	24 96       	adiw	r28, 0x04	; 4
    635a:	cd bf       	out	0x3d, r28	; 61
    635c:	de bf       	out	0x3e, r29	; 62
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	08 95       	ret

00006364 <main>:




int main (void)
{
    6364:	2f 92       	push	r2
    6366:	3f 92       	push	r3
    6368:	4f 92       	push	r4
    636a:	5f 92       	push	r5
    636c:	6f 92       	push	r6
    636e:	7f 92       	push	r7
    6370:	8f 92       	push	r8
    6372:	9f 92       	push	r9
    6374:	af 92       	push	r10
    6376:	bf 92       	push	r11
    6378:	cf 92       	push	r12
    637a:	df 92       	push	r13
    637c:	ef 92       	push	r14
    637e:	ff 92       	push	r15
    6380:	0f 93       	push	r16
    6382:	1f 93       	push	r17
    6384:	cf 93       	push	r28
    6386:	df 93       	push	r29
    6388:	cd b7       	in	r28, 0x3d	; 61
    638a:	de b7       	in	r29, 0x3e	; 62
    638c:	c2 54       	subi	r28, 0x42	; 66
    638e:	d1 09       	sbc	r29, r1
    6390:	cd bf       	out	0x3d, r28	; 61
    6392:	de bf       	out	0x3e, r29	; 62
	blockTransmission = false;
    6394:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <blockTransmission>
	board_init();
    6398:	6b dc       	rcall	.-1834   	; 0x5c70 <board_init>
	//TODO: HANDLE RESETS
	
	
	**/
	
	sysclk_init();
    639a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sysclk_init>
	rtc_init();
    639e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <rtc_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    63a2:	e7 de       	rcall	.-562    	; 0x6172 <uart_terminal_init>
	//newOLogInit();

	if(DEBUG) printf("uart is working\n");
    63a4:	83 e7       	ldi	r24, 0x73	; 115
    63a6:	90 e2       	ldi	r25, 0x20	; 32
    63a8:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <puts>
	

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    63ac:	58 df       	rcall	.-336    	; 0x625e <pmic_init>
    63ae:	81 e0       	ldi	r24, 0x01	; 1
    63b0:	63 df       	rcall	.-314    	; 0x6278 <pmic_set_scheduling>
	cpu_irq_enable();
    63b2:	78 94       	sei
	
	init_GPS_pins_and_usart();
    63b4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <init_GPS_pins_and_usart>
	init_gps_interrupts();
    63b8:	0e 94 99 08 	call	0x1132	; 0x1132 <init_gps_interrupts>
	init_gps_buffers();	
    63bc:	0e 94 b0 08 	call	0x1160	; 0x1160 <init_gps_buffers>
	//delay_s(1);
	//xbee_init();
	//servo_init();
	//thermistor_init();
	//volt_init();
	spi_init_module();
    63c0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <spi_init_module>
		
		
		/***
		Get Telemetry - Part of every flight state
		***/
		missionTime = (float)rtc_get_time()/10.0;
    63c4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <rtc_get_time>
    63c8:	dc 01       	movw	r26, r24
    63ca:	cb 01       	movw	r24, r22
    63cc:	bc 01       	movw	r22, r24
    63ce:	cd 01       	movw	r24, r26
    63d0:	fc d2       	rcall	.+1528   	; 0x69ca <__floatunsisf>
    63d2:	dc 01       	movw	r26, r24
    63d4:	cb 01       	movw	r24, r22
    63d6:	20 e0       	ldi	r18, 0x00	; 0
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	40 e2       	ldi	r20, 0x20	; 32
    63dc:	51 e4       	ldi	r21, 0x41	; 65
    63de:	bc 01       	movw	r22, r24
    63e0:	cd 01       	movw	r24, r26
    63e2:	25 d2       	rcall	.+1098   	; 0x682e <__divsf3>
    63e4:	dc 01       	movw	r26, r24
    63e6:	cb 01       	movw	r24, r22
    63e8:	80 93 f3 20 	sts	0x20F3, r24	; 0x8020f3 <missionTime>
    63ec:	90 93 f4 20 	sts	0x20F4, r25	; 0x8020f4 <missionTime+0x1>
    63f0:	a0 93 f5 20 	sts	0x20F5, r26	; 0x8020f5 <missionTime+0x2>
    63f4:	b0 93 f6 20 	sts	0x20F6, r27	; 0x8020f6 <missionTime+0x3>
		//pressure = getPressure();
		//printf("%f\n", pressure);
		//printf("is it me?");
		if (last_finished != SENTENCE_NONE)
    63f8:	80 91 55 24 	lds	r24, 0x2455	; 0x802455 <last_finished>
    63fc:	88 23       	and	r24, r24
    63fe:	09 f4       	brne	.+2      	; 0x6402 <main+0x9e>
    6400:	c4 c0       	rjmp	.+392    	; 0x658a <main+0x226>
		{
			//printf("Is it you?");
			if (last_finished == SENTENCE_GPGGA)
    6402:	80 91 55 24 	lds	r24, 0x2455	; 0x802455 <last_finished>
    6406:	81 30       	cpi	r24, 0x01	; 1
    6408:	09 f0       	breq	.+2      	; 0x640c <main+0xa8>
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    640a:	bf c0       	rjmp	.+382    	; 0x658a <main+0x226>
    640c:	8f e3       	ldi	r24, 0x3F	; 63
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	fc 01       	movw	r30, r24
    6412:	80 81       	ld	r24, Z
    6414:	89 a7       	std	Y+41, r24	; 0x29
    6416:	5b df       	rcall	.-330    	; 0x62ce <__iCliRetVal>
    6418:	89 83       	std	Y+1, r24	; 0x01
    641a:	0a c0       	rjmp	.+20     	; 0x6430 <main+0xcc>
				{
					memcpy(gpstmp, gpgga_buff, 85);
    641c:	85 e5       	ldi	r24, 0x55	; 85
    641e:	e5 ef       	ldi	r30, 0xF5	; 245
    6420:	f5 e2       	ldi	r31, 0x25	; 37
    6422:	a4 e3       	ldi	r26, 0x34	; 52
    6424:	b1 e2       	ldi	r27, 0x21	; 33
    6426:	01 90       	ld	r0, Z+
    6428:	0d 92       	st	X+, r0
    642a:	8a 95       	dec	r24
			//printf("Is it you?");
			if (last_finished == SENTENCE_GPGGA)
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    642c:	e1 f7       	brne	.-8      	; 0x6426 <main+0xc2>
    642e:	19 82       	std	Y+1, r1	; 0x01
    6430:	89 81       	ldd	r24, Y+1	; 0x01
    6432:	88 23       	and	r24, r24
    6434:	99 f7       	brne	.-26     	; 0x641c <main+0xb8>
    6436:	ce 01       	movw	r24, r28
    6438:	89 96       	adiw	r24, 0x29	; 41
				{
					memcpy(gpstmp, gpgga_buff, 85);
				}
				gpstmp[packetlen(gpstmp)] = '\0';
    643a:	52 df       	rcall	.-348    	; 0x62e0 <__iRestore>
    643c:	84 e3       	ldi	r24, 0x34	; 52
    643e:	91 e2       	ldi	r25, 0x21	; 33
    6440:	65 df       	rcall	.-310    	; 0x630c <packetlen>
    6442:	8c 5c       	subi	r24, 0xCC	; 204
    6444:	9e 4d       	sbci	r25, 0xDE	; 222
    6446:	fc 01       	movw	r30, r24
    6448:	10 82       	st	Z, r1
				//printf(gpstmp);
				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    644a:	84 e3       	ldi	r24, 0x34	; 52
    644c:	91 e2       	ldi	r25, 0x21	; 33
    644e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <strlen>
    6452:	28 2f       	mov	r18, r24
    6454:	ce 01       	movw	r24, r28
    6456:	0b 96       	adiw	r24, 0x0b	; 11
    6458:	42 2f       	mov	r20, r18
    645a:	64 e3       	ldi	r22, 0x34	; 52
    645c:	71 e2       	ldi	r23, 0x21	; 33
    645e:	0e 94 35 11 	call	0x226a	; 0x226a <getGPSDatafromNMEA>
				GPSAlt =	gps_data.altitude;
    6462:	89 a1       	ldd	r24, Y+33	; 0x21
    6464:	9a a1       	ldd	r25, Y+34	; 0x22
    6466:	ab a1       	ldd	r26, Y+35	; 0x23
    6468:	bc a1       	ldd	r27, Y+36	; 0x24
    646a:	bc 01       	movw	r22, r24
    646c:	cd 01       	movw	r24, r26
    646e:	81 d2       	rcall	.+1282   	; 0x6972 <__fixunssfsi>
    6470:	dc 01       	movw	r26, r24
    6472:	cb 01       	movw	r24, r22
    6474:	80 93 99 23 	sts	0x2399, r24	; 0x802399 <GPSAlt>
    6478:	90 93 9a 23 	sts	0x239A, r25	; 0x80239a <GPSAlt+0x1>
    647c:	a0 93 9b 23 	sts	0x239B, r26	; 0x80239b <GPSAlt+0x2>
    6480:	b0 93 9c 23 	sts	0x239C, r27	; 0x80239c <GPSAlt+0x3>
				
				GPSLat =	gps_data.latdecimal;
    6484:	8a 89       	ldd	r24, Y+18	; 0x12
    6486:	9b 89       	ldd	r25, Y+19	; 0x13
    6488:	ac 89       	ldd	r26, Y+20	; 0x14
    648a:	bd 89       	ldd	r27, Y+21	; 0x15
    648c:	bc 01       	movw	r22, r24
    648e:	cd 01       	movw	r24, r26
    6490:	70 d2       	rcall	.+1248   	; 0x6972 <__fixunssfsi>
    6492:	dc 01       	movw	r26, r24
    6494:	cb 01       	movw	r24, r22
    6496:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <GPSLat>
    649a:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <GPSLat+0x1>
    649e:	a0 93 05 21 	sts	0x2105, r26	; 0x802105 <GPSLat+0x2>
    64a2:	b0 93 06 21 	sts	0x2106, r27	; 0x802106 <GPSLat+0x3>
				GPSLong=	gps_data.londecimal;
    64a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    64a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    64aa:	af 8d       	ldd	r26, Y+31	; 0x1f
    64ac:	b8 a1       	ldd	r27, Y+32	; 0x20
    64ae:	bc 01       	movw	r22, r24
    64b0:	cd 01       	movw	r24, r26
    64b2:	5f d2       	rcall	.+1214   	; 0x6972 <__fixunssfsi>
    64b4:	dc 01       	movw	r26, r24
    64b6:	cb 01       	movw	r24, r22
    64b8:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <GPSLong>
    64bc:	90 93 96 21 	sts	0x2196, r25	; 0x802196 <GPSLong+0x1>
    64c0:	a0 93 97 21 	sts	0x2197, r26	; 0x802197 <GPSLong+0x2>
    64c4:	b0 93 98 21 	sts	0x2198, r27	; 0x802198 <GPSLong+0x3>
				
				last_finished = SENTENCE_NONE;
    64c8:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <last_finished>
				
				if (gps_data.fix_status)
    64cc:	88 a5       	ldd	r24, Y+40	; 0x28
    64ce:	88 23       	and	r24, r24
    64d0:	09 f4       	brne	.+2      	; 0x64d4 <main+0x170>
				{
					uint32_t GPS_secs = 3600 * (uint32_t)gps_data.hour + 60 * (uint32_t)gps_data.minutes + (uint32_t)gps_data.seconds;
    64d2:	5b c0       	rjmp	.+182    	; 0x658a <main+0x226>
    64d4:	8d a1       	ldd	r24, Y+37	; 0x25
    64d6:	28 2f       	mov	r18, r24
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	40 e0       	ldi	r20, 0x00	; 0
    64dc:	50 e0       	ldi	r21, 0x00	; 0
    64de:	80 e1       	ldi	r24, 0x10	; 16
    64e0:	9e e0       	ldi	r25, 0x0E	; 14
    64e2:	dc 01       	movw	r26, r24
    64e4:	79 d7       	rcall	.+3826   	; 0x73d8 <__muluhisi3>
    64e6:	7b 01       	movw	r14, r22
    64e8:	8c 01       	movw	r16, r24
    64ea:	8e a1       	ldd	r24, Y+38	; 0x26
    64ec:	28 2f       	mov	r18, r24
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	40 e0       	ldi	r20, 0x00	; 0
    64f2:	50 e0       	ldi	r21, 0x00	; 0
    64f4:	8c e3       	ldi	r24, 0x3C	; 60
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	dc 01       	movw	r26, r24
    64fa:	6e d7       	rcall	.+3804   	; 0x73d8 <__muluhisi3>
    64fc:	dc 01       	movw	r26, r24
    64fe:	cb 01       	movw	r24, r22
    6500:	a8 01       	movw	r20, r16
    6502:	97 01       	movw	r18, r14
    6504:	28 0f       	add	r18, r24
    6506:	39 1f       	adc	r19, r25
    6508:	4a 1f       	adc	r20, r26
    650a:	5b 1f       	adc	r21, r27
    650c:	8f a1       	ldd	r24, Y+39	; 0x27
    650e:	88 2f       	mov	r24, r24
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	a0 e0       	ldi	r26, 0x00	; 0
    6514:	b0 e0       	ldi	r27, 0x00	; 0
    6516:	82 0f       	add	r24, r18
    6518:	93 1f       	adc	r25, r19
    651a:	a4 1f       	adc	r26, r20
    651c:	b5 1f       	adc	r27, r21
    651e:	8f 83       	std	Y+7, r24	; 0x07
    6520:	98 87       	std	Y+8, r25	; 0x08
    6522:	a9 87       	std	Y+9, r26	; 0x09
					uint32_t safetime;
					ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    6524:	ba 87       	std	Y+10, r27	; 0x0a
    6526:	8f e3       	ldi	r24, 0x3F	; 63
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	fc 01       	movw	r30, r24
    652c:	80 81       	ld	r24, Z
    652e:	8a a7       	std	Y+42, r24	; 0x2a
    6530:	ce de       	rcall	.-612    	; 0x62ce <__iCliRetVal>
    6532:	8e 83       	std	Y+6, r24	; 0x06
					{
						safetime = rtc_get_time();
    6534:	09 c0       	rjmp	.+18     	; 0x6548 <main+0x1e4>
    6536:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <rtc_get_time>
    653a:	dc 01       	movw	r26, r24
    653c:	cb 01       	movw	r24, r22
    653e:	8a 83       	std	Y+2, r24	; 0x02
    6540:	9b 83       	std	Y+3, r25	; 0x03
    6542:	ac 83       	std	Y+4, r26	; 0x04
				
				if (gps_data.fix_status)
				{
					uint32_t GPS_secs = 3600 * (uint32_t)gps_data.hour + 60 * (uint32_t)gps_data.minutes + (uint32_t)gps_data.seconds;
					uint32_t safetime;
					ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    6544:	bd 83       	std	Y+5, r27	; 0x05
    6546:	1e 82       	std	Y+6, r1	; 0x06
    6548:	8e 81       	ldd	r24, Y+6	; 0x06
    654a:	88 23       	and	r24, r24
    654c:	a1 f7       	brne	.-24     	; 0x6536 <main+0x1d2>
    654e:	ce 01       	movw	r24, r28
    6550:	8a 96       	adiw	r24, 0x2a	; 42
    6552:	c6 de       	rcall	.-628    	; 0x62e0 <__iRestore>
					{
						safetime = rtc_get_time();
					}
					gps_local_delta = GPS_secs - safetime;
    6554:	2f 81       	ldd	r18, Y+7	; 0x07
    6556:	38 85       	ldd	r19, Y+8	; 0x08
    6558:	49 85       	ldd	r20, Y+9	; 0x09
    655a:	5a 85       	ldd	r21, Y+10	; 0x0a
    655c:	8a 81       	ldd	r24, Y+2	; 0x02
    655e:	9b 81       	ldd	r25, Y+3	; 0x03
    6560:	ac 81       	ldd	r26, Y+4	; 0x04
    6562:	bd 81       	ldd	r27, Y+5	; 0x05
    6564:	79 01       	movw	r14, r18
    6566:	8a 01       	movw	r16, r20
    6568:	e8 1a       	sub	r14, r24
    656a:	f9 0a       	sbc	r15, r25
    656c:	0a 0b       	sbc	r16, r26
    656e:	1b 0b       	sbc	r17, r27
    6570:	d8 01       	movw	r26, r16
    6572:	c7 01       	movw	r24, r14
    6574:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <gps_local_delta>
    6578:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <gps_local_delta+0x1>
    657c:	a0 93 01 21 	sts	0x2101, r26	; 0x802101 <gps_local_delta+0x2>
    6580:	b0 93 02 21 	sts	0x2102, r27	; 0x802102 <gps_local_delta+0x3>
					got_good_time = 1;
    6584:	81 e0       	ldi	r24, 0x01	; 1
    6586:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <got_good_time>
				break;
			
		};*/
		
			
		delay_ms(50);		
    658a:	52 de       	rcall	.-860    	; 0x6230 <sysclk_get_cpu_hz>
    658c:	dc 01       	movw	r26, r24
    658e:	cb 01       	movw	r24, r22
    6590:	9c 01       	movw	r18, r24
    6592:	ad 01       	movw	r20, r26
    6594:	60 e0       	ldi	r22, 0x00	; 0
    6596:	70 e0       	ldi	r23, 0x00	; 0
    6598:	cb 01       	movw	r24, r22
    659a:	82 2e       	mov	r8, r18
    659c:	93 2e       	mov	r9, r19
    659e:	a4 2e       	mov	r10, r20
    65a0:	b5 2e       	mov	r11, r21
    65a2:	c6 2e       	mov	r12, r22
    65a4:	d7 2e       	mov	r13, r23
    65a6:	e8 2e       	mov	r14, r24
    65a8:	f9 2e       	mov	r15, r25
    65aa:	28 2d       	mov	r18, r8
    65ac:	39 2d       	mov	r19, r9
    65ae:	4a 2d       	mov	r20, r10
    65b0:	5b 2d       	mov	r21, r11
    65b2:	6c 2d       	mov	r22, r12
    65b4:	7d 2d       	mov	r23, r13
    65b6:	8e 2d       	mov	r24, r14
    65b8:	9f 2d       	mov	r25, r15
    65ba:	01 e0       	ldi	r16, 0x01	; 1
    65bc:	75 d7       	rcall	.+3818   	; 0x74a8 <__ashldi3>
    65be:	2b a7       	std	Y+43, r18	; 0x2b
    65c0:	3c a7       	std	Y+44, r19	; 0x2c
    65c2:	4d a7       	std	Y+45, r20	; 0x2d
    65c4:	5e a7       	std	Y+46, r21	; 0x2e
    65c6:	6f a7       	std	Y+47, r22	; 0x2f
    65c8:	78 ab       	std	Y+48, r23	; 0x30
    65ca:	89 ab       	std	Y+49, r24	; 0x31
    65cc:	9a ab       	std	Y+50, r25	; 0x32
    65ce:	8b a4       	ldd	r8, Y+43	; 0x2b
    65d0:	9c a4       	ldd	r9, Y+44	; 0x2c
    65d2:	ad a4       	ldd	r10, Y+45	; 0x2d
    65d4:	be a4       	ldd	r11, Y+46	; 0x2e
    65d6:	cf a4       	ldd	r12, Y+47	; 0x2f
    65d8:	d8 a8       	ldd	r13, Y+48	; 0x30
    65da:	e9 a8       	ldd	r14, Y+49	; 0x31
    65dc:	fa a8       	ldd	r15, Y+50	; 0x32
    65de:	28 2d       	mov	r18, r8
    65e0:	39 2d       	mov	r19, r9
    65e2:	4a 2d       	mov	r20, r10
    65e4:	5b 2d       	mov	r21, r11
    65e6:	6c 2d       	mov	r22, r12
    65e8:	7d 2d       	mov	r23, r13
    65ea:	8e 2d       	mov	r24, r14
    65ec:	9f 2d       	mov	r25, r15
    65ee:	02 e0       	ldi	r16, 0x02	; 2
    65f0:	5b d7       	rcall	.+3766   	; 0x74a8 <__ashldi3>
    65f2:	2b ab       	std	Y+51, r18	; 0x33
    65f4:	3c ab       	std	Y+52, r19	; 0x34
    65f6:	4d ab       	std	Y+53, r20	; 0x35
    65f8:	5e ab       	std	Y+54, r21	; 0x36
    65fa:	6f ab       	std	Y+55, r22	; 0x37
    65fc:	78 af       	std	Y+56, r23	; 0x38
    65fe:	89 af       	std	Y+57, r24	; 0x39
    6600:	9a af       	std	Y+58, r25	; 0x3a
    6602:	28 2d       	mov	r18, r8
    6604:	39 2d       	mov	r19, r9
    6606:	4a 2d       	mov	r20, r10
    6608:	5b 2d       	mov	r21, r11
    660a:	6c 2d       	mov	r22, r12
    660c:	7d 2d       	mov	r23, r13
    660e:	8e 2d       	mov	r24, r14
    6610:	9f 2d       	mov	r25, r15
    6612:	ab a8       	ldd	r10, Y+51	; 0x33
    6614:	bc a8       	ldd	r11, Y+52	; 0x34
    6616:	cd a8       	ldd	r12, Y+53	; 0x35
    6618:	de a8       	ldd	r13, Y+54	; 0x36
    661a:	ef a8       	ldd	r14, Y+55	; 0x37
    661c:	f8 ac       	ldd	r15, Y+56	; 0x38
    661e:	09 ad       	ldd	r16, Y+57	; 0x39
    6620:	1a ad       	ldd	r17, Y+58	; 0x3a
    6622:	5b d7       	rcall	.+3766   	; 0x74da <__adddi3>
    6624:	82 2e       	mov	r8, r18
    6626:	93 2e       	mov	r9, r19
    6628:	a4 2e       	mov	r10, r20
    662a:	b5 2e       	mov	r11, r21
    662c:	c6 2e       	mov	r12, r22
    662e:	d7 2e       	mov	r13, r23
    6630:	e8 2e       	mov	r14, r24
    6632:	f9 2e       	mov	r15, r25
    6634:	28 2d       	mov	r18, r8
    6636:	39 2d       	mov	r19, r9
    6638:	4a 2d       	mov	r20, r10
    663a:	5b 2d       	mov	r21, r11
    663c:	6c 2d       	mov	r22, r12
    663e:	7d 2d       	mov	r23, r13
    6640:	8e 2d       	mov	r24, r14
    6642:	9f 2d       	mov	r25, r15
    6644:	02 e0       	ldi	r16, 0x02	; 2
    6646:	30 d7       	rcall	.+3680   	; 0x74a8 <__ashldi3>
    6648:	2b af       	std	Y+59, r18	; 0x3b
    664a:	3c af       	std	Y+60, r19	; 0x3c
    664c:	4d af       	std	Y+61, r20	; 0x3d
    664e:	5e af       	std	Y+62, r21	; 0x3e
    6650:	6f af       	std	Y+63, r22	; 0x3f
    6652:	21 96       	adiw	r28, 0x01	; 1
    6654:	7f af       	std	Y+63, r23	; 0x3f
    6656:	21 97       	sbiw	r28, 0x01	; 1
    6658:	22 96       	adiw	r28, 0x02	; 2
    665a:	8f af       	std	Y+63, r24	; 0x3f
    665c:	22 97       	sbiw	r28, 0x02	; 2
    665e:	23 96       	adiw	r28, 0x03	; 3
    6660:	9f af       	std	Y+63, r25	; 0x3f
    6662:	23 97       	sbiw	r28, 0x03	; 3
    6664:	28 2d       	mov	r18, r8
    6666:	39 2d       	mov	r19, r9
    6668:	4a 2d       	mov	r20, r10
    666a:	5b 2d       	mov	r21, r11
    666c:	6c 2d       	mov	r22, r12
    666e:	7d 2d       	mov	r23, r13
    6670:	8e 2d       	mov	r24, r14
    6672:	9f 2d       	mov	r25, r15
    6674:	ab ac       	ldd	r10, Y+59	; 0x3b
    6676:	bc ac       	ldd	r11, Y+60	; 0x3c
    6678:	cd ac       	ldd	r12, Y+61	; 0x3d
    667a:	de ac       	ldd	r13, Y+62	; 0x3e
    667c:	ef ac       	ldd	r14, Y+63	; 0x3f
    667e:	21 96       	adiw	r28, 0x01	; 1
    6680:	ff ac       	ldd	r15, Y+63	; 0x3f
    6682:	21 97       	sbiw	r28, 0x01	; 1
    6684:	22 96       	adiw	r28, 0x02	; 2
    6686:	0f ad       	ldd	r16, Y+63	; 0x3f
    6688:	22 97       	sbiw	r28, 0x02	; 2
    668a:	23 96       	adiw	r28, 0x03	; 3
    668c:	1f ad       	ldd	r17, Y+63	; 0x3f
    668e:	23 97       	sbiw	r28, 0x03	; 3
    6690:	24 d7       	rcall	.+3656   	; 0x74da <__adddi3>
    6692:	22 2e       	mov	r2, r18
    6694:	33 2e       	mov	r3, r19
    6696:	44 2e       	mov	r4, r20
    6698:	55 2e       	mov	r5, r21
    669a:	66 2e       	mov	r6, r22
    669c:	77 2e       	mov	r7, r23
    669e:	88 2e       	mov	r8, r24
    66a0:	99 2e       	mov	r9, r25
    66a2:	0f 2e       	mov	r0, r31
    66a4:	f6 e0       	ldi	r31, 0x06	; 6
    66a6:	af 2e       	mov	r10, r31
    66a8:	f0 2d       	mov	r31, r0
    66aa:	b1 2c       	mov	r11, r1
    66ac:	c1 2c       	mov	r12, r1
    66ae:	d1 2c       	mov	r13, r1
    66b0:	e1 2c       	mov	r14, r1
    66b2:	f1 2c       	mov	r15, r1
    66b4:	00 e0       	ldi	r16, 0x00	; 0
    66b6:	10 e0       	ldi	r17, 0x00	; 0
    66b8:	22 2d       	mov	r18, r2
    66ba:	33 2d       	mov	r19, r3
    66bc:	44 2d       	mov	r20, r4
    66be:	55 2d       	mov	r21, r5
    66c0:	66 2d       	mov	r22, r6
    66c2:	77 2d       	mov	r23, r7
    66c4:	88 2d       	mov	r24, r8
    66c6:	99 2d       	mov	r25, r9
    66c8:	93 d6       	rcall	.+3366   	; 0x73f0 <__udivdi3>
    66ca:	22 2e       	mov	r2, r18
    66cc:	33 2e       	mov	r3, r19
    66ce:	44 2e       	mov	r4, r20
    66d0:	55 2e       	mov	r5, r21
    66d2:	66 2e       	mov	r6, r22
    66d4:	77 2e       	mov	r7, r23
    66d6:	88 2e       	mov	r8, r24
    66d8:	99 2e       	mov	r9, r25
    66da:	a2 2c       	mov	r10, r2
    66dc:	b3 2c       	mov	r11, r3
    66de:	c4 2c       	mov	r12, r4
    66e0:	d5 2c       	mov	r13, r5
    66e2:	e6 2c       	mov	r14, r6
    66e4:	f7 2c       	mov	r15, r7
    66e6:	08 2d       	mov	r16, r8
    66e8:	19 2d       	mov	r17, r9
    66ea:	2a 2d       	mov	r18, r10
    66ec:	3b 2d       	mov	r19, r11
    66ee:	4c 2d       	mov	r20, r12
    66f0:	5d 2d       	mov	r21, r13
    66f2:	6e 2d       	mov	r22, r14
    66f4:	7f 2d       	mov	r23, r15
    66f6:	80 2f       	mov	r24, r16
    66f8:	91 2f       	mov	r25, r17
    66fa:	29 51       	subi	r18, 0x19	; 25
    66fc:	3c 4f       	sbci	r19, 0xFC	; 252
    66fe:	4f 4f       	sbci	r20, 0xFF	; 255
    6700:	5f 4f       	sbci	r21, 0xFF	; 255
    6702:	6f 4f       	sbci	r22, 0xFF	; 255
    6704:	7f 4f       	sbci	r23, 0xFF	; 255
    6706:	8f 4f       	sbci	r24, 0xFF	; 255
    6708:	9f 4f       	sbci	r25, 0xFF	; 255
    670a:	a2 2e       	mov	r10, r18
    670c:	b3 2e       	mov	r11, r19
    670e:	c4 2e       	mov	r12, r20
    6710:	d5 2e       	mov	r13, r21
    6712:	e6 2e       	mov	r14, r22
    6714:	f7 2e       	mov	r15, r23
    6716:	08 2f       	mov	r16, r24
    6718:	19 2f       	mov	r17, r25
    671a:	2a 2d       	mov	r18, r10
    671c:	3b 2d       	mov	r19, r11
    671e:	4c 2d       	mov	r20, r12
    6720:	5d 2d       	mov	r21, r13
    6722:	6e 2d       	mov	r22, r14
    6724:	7f 2d       	mov	r23, r15
    6726:	80 2f       	mov	r24, r16
    6728:	91 2f       	mov	r25, r17
    672a:	8c d1       	rcall	.+792    	; 0x6a44 <__floatundisf>
    672c:	dc 01       	movw	r26, r24
    672e:	cb 01       	movw	r24, r22
    6730:	20 e0       	ldi	r18, 0x00	; 0
    6732:	30 e0       	ldi	r19, 0x00	; 0
    6734:	4a e7       	ldi	r20, 0x7A	; 122
    6736:	54 e4       	ldi	r21, 0x44	; 68
    6738:	bc 01       	movw	r22, r24
    673a:	cd 01       	movw	r24, r26
    673c:	78 d0       	rcall	.+240    	; 0x682e <__divsf3>
    673e:	dc 01       	movw	r26, r24
    6740:	cb 01       	movw	r24, r22
    6742:	bc 01       	movw	r22, r24
    6744:	cd 01       	movw	r24, r26
    6746:	e0 d0       	rcall	.+448    	; 0x6908 <__fixunssfdi>
    6748:	a2 2e       	mov	r10, r18
    674a:	b3 2e       	mov	r11, r19
    674c:	c4 2e       	mov	r12, r20
    674e:	d5 2e       	mov	r13, r21
    6750:	e6 2e       	mov	r14, r22
    6752:	f7 2e       	mov	r15, r23
    6754:	08 2f       	mov	r16, r24
    6756:	19 2f       	mov	r17, r25
    6758:	d6 01       	movw	r26, r12
    675a:	c5 01       	movw	r24, r10
    675c:	bc 01       	movw	r22, r24
    675e:	cd 01       	movw	r24, r26
    6760:	73 dd       	rcall	.-1306   	; 0x6248 <__portable_avr_delay_cycles>
	}
    6762:	30 ce       	rjmp	.-928    	; 0x63c4 <main+0x60>

00006764 <__subsf3>:
    6764:	50 58       	subi	r21, 0x80	; 128

00006766 <__addsf3>:
    6766:	bb 27       	eor	r27, r27
    6768:	aa 27       	eor	r26, r26
    676a:	0e d0       	rcall	.+28     	; 0x6788 <__addsf3x>
    676c:	d0 c1       	rjmp	.+928    	; 0x6b0e <__fp_round>
    676e:	c1 d1       	rcall	.+898    	; 0x6af2 <__fp_pscA>
    6770:	30 f0       	brcs	.+12     	; 0x677e <__addsf3+0x18>
    6772:	c6 d1       	rcall	.+908    	; 0x6b00 <__fp_pscB>
    6774:	20 f0       	brcs	.+8      	; 0x677e <__addsf3+0x18>
    6776:	31 f4       	brne	.+12     	; 0x6784 <__addsf3+0x1e>
    6778:	9f 3f       	cpi	r25, 0xFF	; 255
    677a:	11 f4       	brne	.+4      	; 0x6780 <__addsf3+0x1a>
    677c:	1e f4       	brtc	.+6      	; 0x6784 <__addsf3+0x1e>
    677e:	a6 c1       	rjmp	.+844    	; 0x6acc <__fp_nan>
    6780:	0e f4       	brtc	.+2      	; 0x6784 <__addsf3+0x1e>
    6782:	e0 95       	com	r30
    6784:	e7 fb       	bst	r30, 7
    6786:	9c c1       	rjmp	.+824    	; 0x6ac0 <__fp_inf>

00006788 <__addsf3x>:
    6788:	e9 2f       	mov	r30, r25
    678a:	d2 d1       	rcall	.+932    	; 0x6b30 <__fp_split3>
    678c:	80 f3       	brcs	.-32     	; 0x676e <__addsf3+0x8>
    678e:	ba 17       	cp	r27, r26
    6790:	62 07       	cpc	r22, r18
    6792:	73 07       	cpc	r23, r19
    6794:	84 07       	cpc	r24, r20
    6796:	95 07       	cpc	r25, r21
    6798:	18 f0       	brcs	.+6      	; 0x67a0 <__addsf3x+0x18>
    679a:	71 f4       	brne	.+28     	; 0x67b8 <__addsf3x+0x30>
    679c:	9e f5       	brtc	.+102    	; 0x6804 <__addsf3x+0x7c>
    679e:	ea c1       	rjmp	.+980    	; 0x6b74 <__fp_zero>
    67a0:	0e f4       	brtc	.+2      	; 0x67a4 <__addsf3x+0x1c>
    67a2:	e0 95       	com	r30
    67a4:	0b 2e       	mov	r0, r27
    67a6:	ba 2f       	mov	r27, r26
    67a8:	a0 2d       	mov	r26, r0
    67aa:	0b 01       	movw	r0, r22
    67ac:	b9 01       	movw	r22, r18
    67ae:	90 01       	movw	r18, r0
    67b0:	0c 01       	movw	r0, r24
    67b2:	ca 01       	movw	r24, r20
    67b4:	a0 01       	movw	r20, r0
    67b6:	11 24       	eor	r1, r1
    67b8:	ff 27       	eor	r31, r31
    67ba:	59 1b       	sub	r21, r25
    67bc:	99 f0       	breq	.+38     	; 0x67e4 <__addsf3x+0x5c>
    67be:	59 3f       	cpi	r21, 0xF9	; 249
    67c0:	50 f4       	brcc	.+20     	; 0x67d6 <__addsf3x+0x4e>
    67c2:	50 3e       	cpi	r21, 0xE0	; 224
    67c4:	68 f1       	brcs	.+90     	; 0x6820 <__addsf3x+0x98>
    67c6:	1a 16       	cp	r1, r26
    67c8:	f0 40       	sbci	r31, 0x00	; 0
    67ca:	a2 2f       	mov	r26, r18
    67cc:	23 2f       	mov	r18, r19
    67ce:	34 2f       	mov	r19, r20
    67d0:	44 27       	eor	r20, r20
    67d2:	58 5f       	subi	r21, 0xF8	; 248
    67d4:	f3 cf       	rjmp	.-26     	; 0x67bc <__addsf3x+0x34>
    67d6:	46 95       	lsr	r20
    67d8:	37 95       	ror	r19
    67da:	27 95       	ror	r18
    67dc:	a7 95       	ror	r26
    67de:	f0 40       	sbci	r31, 0x00	; 0
    67e0:	53 95       	inc	r21
    67e2:	c9 f7       	brne	.-14     	; 0x67d6 <__addsf3x+0x4e>
    67e4:	7e f4       	brtc	.+30     	; 0x6804 <__addsf3x+0x7c>
    67e6:	1f 16       	cp	r1, r31
    67e8:	ba 0b       	sbc	r27, r26
    67ea:	62 0b       	sbc	r22, r18
    67ec:	73 0b       	sbc	r23, r19
    67ee:	84 0b       	sbc	r24, r20
    67f0:	ba f0       	brmi	.+46     	; 0x6820 <__addsf3x+0x98>
    67f2:	91 50       	subi	r25, 0x01	; 1
    67f4:	a1 f0       	breq	.+40     	; 0x681e <__addsf3x+0x96>
    67f6:	ff 0f       	add	r31, r31
    67f8:	bb 1f       	adc	r27, r27
    67fa:	66 1f       	adc	r22, r22
    67fc:	77 1f       	adc	r23, r23
    67fe:	88 1f       	adc	r24, r24
    6800:	c2 f7       	brpl	.-16     	; 0x67f2 <__addsf3x+0x6a>
    6802:	0e c0       	rjmp	.+28     	; 0x6820 <__addsf3x+0x98>
    6804:	ba 0f       	add	r27, r26
    6806:	62 1f       	adc	r22, r18
    6808:	73 1f       	adc	r23, r19
    680a:	84 1f       	adc	r24, r20
    680c:	48 f4       	brcc	.+18     	; 0x6820 <__addsf3x+0x98>
    680e:	87 95       	ror	r24
    6810:	77 95       	ror	r23
    6812:	67 95       	ror	r22
    6814:	b7 95       	ror	r27
    6816:	f7 95       	ror	r31
    6818:	9e 3f       	cpi	r25, 0xFE	; 254
    681a:	08 f0       	brcs	.+2      	; 0x681e <__addsf3x+0x96>
    681c:	b3 cf       	rjmp	.-154    	; 0x6784 <__addsf3+0x1e>
    681e:	93 95       	inc	r25
    6820:	88 0f       	add	r24, r24
    6822:	08 f0       	brcs	.+2      	; 0x6826 <__addsf3x+0x9e>
    6824:	99 27       	eor	r25, r25
    6826:	ee 0f       	add	r30, r30
    6828:	97 95       	ror	r25
    682a:	87 95       	ror	r24
    682c:	08 95       	ret

0000682e <__divsf3>:
    682e:	0c d0       	rcall	.+24     	; 0x6848 <__divsf3x>
    6830:	6e c1       	rjmp	.+732    	; 0x6b0e <__fp_round>
    6832:	66 d1       	rcall	.+716    	; 0x6b00 <__fp_pscB>
    6834:	40 f0       	brcs	.+16     	; 0x6846 <__divsf3+0x18>
    6836:	5d d1       	rcall	.+698    	; 0x6af2 <__fp_pscA>
    6838:	30 f0       	brcs	.+12     	; 0x6846 <__divsf3+0x18>
    683a:	21 f4       	brne	.+8      	; 0x6844 <__divsf3+0x16>
    683c:	5f 3f       	cpi	r21, 0xFF	; 255
    683e:	19 f0       	breq	.+6      	; 0x6846 <__divsf3+0x18>
    6840:	3f c1       	rjmp	.+638    	; 0x6ac0 <__fp_inf>
    6842:	51 11       	cpse	r21, r1
    6844:	98 c1       	rjmp	.+816    	; 0x6b76 <__fp_szero>
    6846:	42 c1       	rjmp	.+644    	; 0x6acc <__fp_nan>

00006848 <__divsf3x>:
    6848:	73 d1       	rcall	.+742    	; 0x6b30 <__fp_split3>
    684a:	98 f3       	brcs	.-26     	; 0x6832 <__divsf3+0x4>

0000684c <__divsf3_pse>:
    684c:	99 23       	and	r25, r25
    684e:	c9 f3       	breq	.-14     	; 0x6842 <__divsf3+0x14>
    6850:	55 23       	and	r21, r21
    6852:	b1 f3       	breq	.-20     	; 0x6840 <__divsf3+0x12>
    6854:	95 1b       	sub	r25, r21
    6856:	55 0b       	sbc	r21, r21
    6858:	bb 27       	eor	r27, r27
    685a:	aa 27       	eor	r26, r26
    685c:	62 17       	cp	r22, r18
    685e:	73 07       	cpc	r23, r19
    6860:	84 07       	cpc	r24, r20
    6862:	38 f0       	brcs	.+14     	; 0x6872 <__divsf3_pse+0x26>
    6864:	9f 5f       	subi	r25, 0xFF	; 255
    6866:	5f 4f       	sbci	r21, 0xFF	; 255
    6868:	22 0f       	add	r18, r18
    686a:	33 1f       	adc	r19, r19
    686c:	44 1f       	adc	r20, r20
    686e:	aa 1f       	adc	r26, r26
    6870:	a9 f3       	breq	.-22     	; 0x685c <__divsf3_pse+0x10>
    6872:	33 d0       	rcall	.+102    	; 0x68da <__divsf3_pse+0x8e>
    6874:	0e 2e       	mov	r0, r30
    6876:	3a f0       	brmi	.+14     	; 0x6886 <__divsf3_pse+0x3a>
    6878:	e0 e8       	ldi	r30, 0x80	; 128
    687a:	30 d0       	rcall	.+96     	; 0x68dc <__divsf3_pse+0x90>
    687c:	91 50       	subi	r25, 0x01	; 1
    687e:	50 40       	sbci	r21, 0x00	; 0
    6880:	e6 95       	lsr	r30
    6882:	00 1c       	adc	r0, r0
    6884:	ca f7       	brpl	.-14     	; 0x6878 <__divsf3_pse+0x2c>
    6886:	29 d0       	rcall	.+82     	; 0x68da <__divsf3_pse+0x8e>
    6888:	fe 2f       	mov	r31, r30
    688a:	27 d0       	rcall	.+78     	; 0x68da <__divsf3_pse+0x8e>
    688c:	66 0f       	add	r22, r22
    688e:	77 1f       	adc	r23, r23
    6890:	88 1f       	adc	r24, r24
    6892:	bb 1f       	adc	r27, r27
    6894:	26 17       	cp	r18, r22
    6896:	37 07       	cpc	r19, r23
    6898:	48 07       	cpc	r20, r24
    689a:	ab 07       	cpc	r26, r27
    689c:	b0 e8       	ldi	r27, 0x80	; 128
    689e:	09 f0       	breq	.+2      	; 0x68a2 <__divsf3_pse+0x56>
    68a0:	bb 0b       	sbc	r27, r27
    68a2:	80 2d       	mov	r24, r0
    68a4:	bf 01       	movw	r22, r30
    68a6:	ff 27       	eor	r31, r31
    68a8:	93 58       	subi	r25, 0x83	; 131
    68aa:	5f 4f       	sbci	r21, 0xFF	; 255
    68ac:	2a f0       	brmi	.+10     	; 0x68b8 <__divsf3_pse+0x6c>
    68ae:	9e 3f       	cpi	r25, 0xFE	; 254
    68b0:	51 05       	cpc	r21, r1
    68b2:	68 f0       	brcs	.+26     	; 0x68ce <__divsf3_pse+0x82>
    68b4:	05 c1       	rjmp	.+522    	; 0x6ac0 <__fp_inf>
    68b6:	5f c1       	rjmp	.+702    	; 0x6b76 <__fp_szero>
    68b8:	5f 3f       	cpi	r21, 0xFF	; 255
    68ba:	ec f3       	brlt	.-6      	; 0x68b6 <__divsf3_pse+0x6a>
    68bc:	98 3e       	cpi	r25, 0xE8	; 232
    68be:	dc f3       	brlt	.-10     	; 0x68b6 <__divsf3_pse+0x6a>
    68c0:	86 95       	lsr	r24
    68c2:	77 95       	ror	r23
    68c4:	67 95       	ror	r22
    68c6:	b7 95       	ror	r27
    68c8:	f7 95       	ror	r31
    68ca:	9f 5f       	subi	r25, 0xFF	; 255
    68cc:	c9 f7       	brne	.-14     	; 0x68c0 <__divsf3_pse+0x74>
    68ce:	88 0f       	add	r24, r24
    68d0:	91 1d       	adc	r25, r1
    68d2:	96 95       	lsr	r25
    68d4:	87 95       	ror	r24
    68d6:	97 f9       	bld	r25, 7
    68d8:	08 95       	ret
    68da:	e1 e0       	ldi	r30, 0x01	; 1
    68dc:	66 0f       	add	r22, r22
    68de:	77 1f       	adc	r23, r23
    68e0:	88 1f       	adc	r24, r24
    68e2:	bb 1f       	adc	r27, r27
    68e4:	62 17       	cp	r22, r18
    68e6:	73 07       	cpc	r23, r19
    68e8:	84 07       	cpc	r24, r20
    68ea:	ba 07       	cpc	r27, r26
    68ec:	20 f0       	brcs	.+8      	; 0x68f6 <__divsf3_pse+0xaa>
    68ee:	62 1b       	sub	r22, r18
    68f0:	73 0b       	sbc	r23, r19
    68f2:	84 0b       	sbc	r24, r20
    68f4:	ba 0b       	sbc	r27, r26
    68f6:	ee 1f       	adc	r30, r30
    68f8:	88 f7       	brcc	.-30     	; 0x68dc <__divsf3_pse+0x90>
    68fa:	e0 95       	com	r30
    68fc:	08 95       	ret

000068fe <__fixsfdi>:
    68fe:	be e3       	ldi	r27, 0x3E	; 62
    6900:	04 d0       	rcall	.+8      	; 0x690a <__fixunssfdi+0x2>
    6902:	08 f4       	brcc	.+2      	; 0x6906 <__fixsfdi+0x8>
    6904:	90 e8       	ldi	r25, 0x80	; 128
    6906:	08 95       	ret

00006908 <__fixunssfdi>:
    6908:	bf e3       	ldi	r27, 0x3F	; 63
    690a:	22 27       	eor	r18, r18
    690c:	33 27       	eor	r19, r19
    690e:	a9 01       	movw	r20, r18
    6910:	17 d1       	rcall	.+558    	; 0x6b40 <__fp_splitA>
    6912:	58 f1       	brcs	.+86     	; 0x696a <__fixunssfdi+0x62>
    6914:	9f 57       	subi	r25, 0x7F	; 127
    6916:	40 f1       	brcs	.+80     	; 0x6968 <__fixunssfdi+0x60>
    6918:	b9 17       	cp	r27, r25
    691a:	38 f1       	brcs	.+78     	; 0x696a <__fixunssfdi+0x62>
    691c:	bf e3       	ldi	r27, 0x3F	; 63
    691e:	b9 1b       	sub	r27, r25
    6920:	99 27       	eor	r25, r25
    6922:	b8 50       	subi	r27, 0x08	; 8
    6924:	3a f4       	brpl	.+14     	; 0x6934 <__fixunssfdi+0x2c>
    6926:	66 0f       	add	r22, r22
    6928:	77 1f       	adc	r23, r23
    692a:	88 1f       	adc	r24, r24
    692c:	99 1f       	adc	r25, r25
    692e:	b3 95       	inc	r27
    6930:	d2 f3       	brmi	.-12     	; 0x6926 <__fixunssfdi+0x1e>
    6932:	16 c0       	rjmp	.+44     	; 0x6960 <__fixunssfdi+0x58>
    6934:	b8 50       	subi	r27, 0x08	; 8
    6936:	4a f0       	brmi	.+18     	; 0x694a <__fixunssfdi+0x42>
    6938:	23 2f       	mov	r18, r19
    693a:	34 2f       	mov	r19, r20
    693c:	45 2f       	mov	r20, r21
    693e:	56 2f       	mov	r21, r22
    6940:	67 2f       	mov	r22, r23
    6942:	78 2f       	mov	r23, r24
    6944:	88 27       	eor	r24, r24
    6946:	b8 50       	subi	r27, 0x08	; 8
    6948:	ba f7       	brpl	.-18     	; 0x6938 <__fixunssfdi+0x30>
    694a:	b8 5f       	subi	r27, 0xF8	; 248
    694c:	49 f0       	breq	.+18     	; 0x6960 <__fixunssfdi+0x58>
    694e:	86 95       	lsr	r24
    6950:	77 95       	ror	r23
    6952:	67 95       	ror	r22
    6954:	57 95       	ror	r21
    6956:	47 95       	ror	r20
    6958:	37 95       	ror	r19
    695a:	27 95       	ror	r18
    695c:	ba 95       	dec	r27
    695e:	b9 f7       	brne	.-18     	; 0x694e <__fixunssfdi+0x46>
    6960:	0e f4       	brtc	.+2      	; 0x6964 <__fixunssfdi+0x5c>
    6962:	b7 d0       	rcall	.+366    	; 0x6ad2 <__fp_negdi>
    6964:	88 94       	clc
    6966:	08 95       	ret
    6968:	88 94       	clc
    696a:	60 e0       	ldi	r22, 0x00	; 0
    696c:	70 e0       	ldi	r23, 0x00	; 0
    696e:	cb 01       	movw	r24, r22
    6970:	08 95       	ret

00006972 <__fixunssfsi>:
    6972:	e6 d0       	rcall	.+460    	; 0x6b40 <__fp_splitA>
    6974:	88 f0       	brcs	.+34     	; 0x6998 <__fixunssfsi+0x26>
    6976:	9f 57       	subi	r25, 0x7F	; 127
    6978:	90 f0       	brcs	.+36     	; 0x699e <__fixunssfsi+0x2c>
    697a:	b9 2f       	mov	r27, r25
    697c:	99 27       	eor	r25, r25
    697e:	b7 51       	subi	r27, 0x17	; 23
    6980:	a0 f0       	brcs	.+40     	; 0x69aa <__fixunssfsi+0x38>
    6982:	d1 f0       	breq	.+52     	; 0x69b8 <__fixunssfsi+0x46>
    6984:	66 0f       	add	r22, r22
    6986:	77 1f       	adc	r23, r23
    6988:	88 1f       	adc	r24, r24
    698a:	99 1f       	adc	r25, r25
    698c:	1a f0       	brmi	.+6      	; 0x6994 <__fixunssfsi+0x22>
    698e:	ba 95       	dec	r27
    6990:	c9 f7       	brne	.-14     	; 0x6984 <__fixunssfsi+0x12>
    6992:	12 c0       	rjmp	.+36     	; 0x69b8 <__fixunssfsi+0x46>
    6994:	b1 30       	cpi	r27, 0x01	; 1
    6996:	81 f0       	breq	.+32     	; 0x69b8 <__fixunssfsi+0x46>
    6998:	ed d0       	rcall	.+474    	; 0x6b74 <__fp_zero>
    699a:	b1 e0       	ldi	r27, 0x01	; 1
    699c:	08 95       	ret
    699e:	ea c0       	rjmp	.+468    	; 0x6b74 <__fp_zero>
    69a0:	67 2f       	mov	r22, r23
    69a2:	78 2f       	mov	r23, r24
    69a4:	88 27       	eor	r24, r24
    69a6:	b8 5f       	subi	r27, 0xF8	; 248
    69a8:	39 f0       	breq	.+14     	; 0x69b8 <__fixunssfsi+0x46>
    69aa:	b9 3f       	cpi	r27, 0xF9	; 249
    69ac:	cc f3       	brlt	.-14     	; 0x69a0 <__fixunssfsi+0x2e>
    69ae:	86 95       	lsr	r24
    69b0:	77 95       	ror	r23
    69b2:	67 95       	ror	r22
    69b4:	b3 95       	inc	r27
    69b6:	d9 f7       	brne	.-10     	; 0x69ae <__fixunssfsi+0x3c>
    69b8:	3e f4       	brtc	.+14     	; 0x69c8 <__fixunssfsi+0x56>
    69ba:	90 95       	com	r25
    69bc:	80 95       	com	r24
    69be:	70 95       	com	r23
    69c0:	61 95       	neg	r22
    69c2:	7f 4f       	sbci	r23, 0xFF	; 255
    69c4:	8f 4f       	sbci	r24, 0xFF	; 255
    69c6:	9f 4f       	sbci	r25, 0xFF	; 255
    69c8:	08 95       	ret

000069ca <__floatunsisf>:
    69ca:	e8 94       	clt
    69cc:	09 c0       	rjmp	.+18     	; 0x69e0 <__floatsisf+0x12>

000069ce <__floatsisf>:
    69ce:	97 fb       	bst	r25, 7
    69d0:	3e f4       	brtc	.+14     	; 0x69e0 <__floatsisf+0x12>
    69d2:	90 95       	com	r25
    69d4:	80 95       	com	r24
    69d6:	70 95       	com	r23
    69d8:	61 95       	neg	r22
    69da:	7f 4f       	sbci	r23, 0xFF	; 255
    69dc:	8f 4f       	sbci	r24, 0xFF	; 255
    69de:	9f 4f       	sbci	r25, 0xFF	; 255
    69e0:	99 23       	and	r25, r25
    69e2:	a9 f0       	breq	.+42     	; 0x6a0e <__floatsisf+0x40>
    69e4:	f9 2f       	mov	r31, r25
    69e6:	96 e9       	ldi	r25, 0x96	; 150
    69e8:	bb 27       	eor	r27, r27
    69ea:	93 95       	inc	r25
    69ec:	f6 95       	lsr	r31
    69ee:	87 95       	ror	r24
    69f0:	77 95       	ror	r23
    69f2:	67 95       	ror	r22
    69f4:	b7 95       	ror	r27
    69f6:	f1 11       	cpse	r31, r1
    69f8:	f8 cf       	rjmp	.-16     	; 0x69ea <__floatsisf+0x1c>
    69fa:	fa f4       	brpl	.+62     	; 0x6a3a <__floatsisf+0x6c>
    69fc:	bb 0f       	add	r27, r27
    69fe:	11 f4       	brne	.+4      	; 0x6a04 <__floatsisf+0x36>
    6a00:	60 ff       	sbrs	r22, 0
    6a02:	1b c0       	rjmp	.+54     	; 0x6a3a <__floatsisf+0x6c>
    6a04:	6f 5f       	subi	r22, 0xFF	; 255
    6a06:	7f 4f       	sbci	r23, 0xFF	; 255
    6a08:	8f 4f       	sbci	r24, 0xFF	; 255
    6a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a0c:	16 c0       	rjmp	.+44     	; 0x6a3a <__floatsisf+0x6c>
    6a0e:	88 23       	and	r24, r24
    6a10:	11 f0       	breq	.+4      	; 0x6a16 <__floatsisf+0x48>
    6a12:	96 e9       	ldi	r25, 0x96	; 150
    6a14:	11 c0       	rjmp	.+34     	; 0x6a38 <__floatsisf+0x6a>
    6a16:	77 23       	and	r23, r23
    6a18:	21 f0       	breq	.+8      	; 0x6a22 <__floatsisf+0x54>
    6a1a:	9e e8       	ldi	r25, 0x8E	; 142
    6a1c:	87 2f       	mov	r24, r23
    6a1e:	76 2f       	mov	r23, r22
    6a20:	05 c0       	rjmp	.+10     	; 0x6a2c <__floatsisf+0x5e>
    6a22:	66 23       	and	r22, r22
    6a24:	71 f0       	breq	.+28     	; 0x6a42 <__floatsisf+0x74>
    6a26:	96 e8       	ldi	r25, 0x86	; 134
    6a28:	86 2f       	mov	r24, r22
    6a2a:	70 e0       	ldi	r23, 0x00	; 0
    6a2c:	60 e0       	ldi	r22, 0x00	; 0
    6a2e:	2a f0       	brmi	.+10     	; 0x6a3a <__floatsisf+0x6c>
    6a30:	9a 95       	dec	r25
    6a32:	66 0f       	add	r22, r22
    6a34:	77 1f       	adc	r23, r23
    6a36:	88 1f       	adc	r24, r24
    6a38:	da f7       	brpl	.-10     	; 0x6a30 <__floatsisf+0x62>
    6a3a:	88 0f       	add	r24, r24
    6a3c:	96 95       	lsr	r25
    6a3e:	87 95       	ror	r24
    6a40:	97 f9       	bld	r25, 7
    6a42:	08 95       	ret

00006a44 <__floatundisf>:
    6a44:	e8 94       	clt

00006a46 <__fp_di2sf>:
    6a46:	f9 2f       	mov	r31, r25
    6a48:	96 eb       	ldi	r25, 0xB6	; 182
    6a4a:	ff 23       	and	r31, r31
    6a4c:	81 f0       	breq	.+32     	; 0x6a6e <__fp_di2sf+0x28>
    6a4e:	12 16       	cp	r1, r18
    6a50:	13 06       	cpc	r1, r19
    6a52:	14 06       	cpc	r1, r20
    6a54:	44 0b       	sbc	r20, r20
    6a56:	93 95       	inc	r25
    6a58:	f6 95       	lsr	r31
    6a5a:	87 95       	ror	r24
    6a5c:	77 95       	ror	r23
    6a5e:	67 95       	ror	r22
    6a60:	57 95       	ror	r21
    6a62:	40 40       	sbci	r20, 0x00	; 0
    6a64:	ff 23       	and	r31, r31
    6a66:	b9 f7       	brne	.-18     	; 0x6a56 <__fp_di2sf+0x10>
    6a68:	1b c0       	rjmp	.+54     	; 0x6aa0 <__fp_di2sf+0x5a>
    6a6a:	99 27       	eor	r25, r25
    6a6c:	08 95       	ret
    6a6e:	88 23       	and	r24, r24
    6a70:	51 f4       	brne	.+20     	; 0x6a86 <__fp_di2sf+0x40>
    6a72:	98 50       	subi	r25, 0x08	; 8
    6a74:	d2 f7       	brpl	.-12     	; 0x6a6a <__fp_di2sf+0x24>
    6a76:	87 2b       	or	r24, r23
    6a78:	76 2f       	mov	r23, r22
    6a7a:	65 2f       	mov	r22, r21
    6a7c:	54 2f       	mov	r21, r20
    6a7e:	43 2f       	mov	r20, r19
    6a80:	32 2f       	mov	r19, r18
    6a82:	20 e0       	ldi	r18, 0x00	; 0
    6a84:	b1 f3       	breq	.-20     	; 0x6a72 <__fp_di2sf+0x2c>
    6a86:	12 16       	cp	r1, r18
    6a88:	13 06       	cpc	r1, r19
    6a8a:	14 06       	cpc	r1, r20
    6a8c:	44 0b       	sbc	r20, r20
    6a8e:	88 23       	and	r24, r24
    6a90:	3a f0       	brmi	.+14     	; 0x6aa0 <__fp_di2sf+0x5a>
    6a92:	9a 95       	dec	r25
    6a94:	44 0f       	add	r20, r20
    6a96:	55 1f       	adc	r21, r21
    6a98:	66 1f       	adc	r22, r22
    6a9a:	77 1f       	adc	r23, r23
    6a9c:	88 1f       	adc	r24, r24
    6a9e:	ca f7       	brpl	.-14     	; 0x6a92 <__fp_di2sf+0x4c>
    6aa0:	55 23       	and	r21, r21
    6aa2:	4a f4       	brpl	.+18     	; 0x6ab6 <__fp_di2sf+0x70>
    6aa4:	44 0f       	add	r20, r20
    6aa6:	55 1f       	adc	r21, r21
    6aa8:	11 f4       	brne	.+4      	; 0x6aae <__fp_di2sf+0x68>
    6aaa:	60 ff       	sbrs	r22, 0
    6aac:	04 c0       	rjmp	.+8      	; 0x6ab6 <__fp_di2sf+0x70>
    6aae:	6f 5f       	subi	r22, 0xFF	; 255
    6ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab6:	88 0f       	add	r24, r24
    6ab8:	96 95       	lsr	r25
    6aba:	87 95       	ror	r24
    6abc:	97 f9       	bld	r25, 7
    6abe:	08 95       	ret

00006ac0 <__fp_inf>:
    6ac0:	97 f9       	bld	r25, 7
    6ac2:	9f 67       	ori	r25, 0x7F	; 127
    6ac4:	80 e8       	ldi	r24, 0x80	; 128
    6ac6:	70 e0       	ldi	r23, 0x00	; 0
    6ac8:	60 e0       	ldi	r22, 0x00	; 0
    6aca:	08 95       	ret

00006acc <__fp_nan>:
    6acc:	9f ef       	ldi	r25, 0xFF	; 255
    6ace:	80 ec       	ldi	r24, 0xC0	; 192
    6ad0:	08 95       	ret

00006ad2 <__fp_negdi>:
    6ad2:	90 95       	com	r25
    6ad4:	80 95       	com	r24
    6ad6:	70 95       	com	r23
    6ad8:	60 95       	com	r22
    6ada:	50 95       	com	r21
    6adc:	40 95       	com	r20
    6ade:	30 95       	com	r19
    6ae0:	21 95       	neg	r18
    6ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae4:	4f 4f       	sbci	r20, 0xFF	; 255
    6ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ae8:	6f 4f       	sbci	r22, 0xFF	; 255
    6aea:	7f 4f       	sbci	r23, 0xFF	; 255
    6aec:	8f 4f       	sbci	r24, 0xFF	; 255
    6aee:	9f 4f       	sbci	r25, 0xFF	; 255
    6af0:	08 95       	ret

00006af2 <__fp_pscA>:
    6af2:	00 24       	eor	r0, r0
    6af4:	0a 94       	dec	r0
    6af6:	16 16       	cp	r1, r22
    6af8:	17 06       	cpc	r1, r23
    6afa:	18 06       	cpc	r1, r24
    6afc:	09 06       	cpc	r0, r25
    6afe:	08 95       	ret

00006b00 <__fp_pscB>:
    6b00:	00 24       	eor	r0, r0
    6b02:	0a 94       	dec	r0
    6b04:	12 16       	cp	r1, r18
    6b06:	13 06       	cpc	r1, r19
    6b08:	14 06       	cpc	r1, r20
    6b0a:	05 06       	cpc	r0, r21
    6b0c:	08 95       	ret

00006b0e <__fp_round>:
    6b0e:	09 2e       	mov	r0, r25
    6b10:	03 94       	inc	r0
    6b12:	00 0c       	add	r0, r0
    6b14:	11 f4       	brne	.+4      	; 0x6b1a <__fp_round+0xc>
    6b16:	88 23       	and	r24, r24
    6b18:	52 f0       	brmi	.+20     	; 0x6b2e <__fp_round+0x20>
    6b1a:	bb 0f       	add	r27, r27
    6b1c:	40 f4       	brcc	.+16     	; 0x6b2e <__fp_round+0x20>
    6b1e:	bf 2b       	or	r27, r31
    6b20:	11 f4       	brne	.+4      	; 0x6b26 <__fp_round+0x18>
    6b22:	60 ff       	sbrs	r22, 0
    6b24:	04 c0       	rjmp	.+8      	; 0x6b2e <__fp_round+0x20>
    6b26:	6f 5f       	subi	r22, 0xFF	; 255
    6b28:	7f 4f       	sbci	r23, 0xFF	; 255
    6b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    6b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b2e:	08 95       	ret

00006b30 <__fp_split3>:
    6b30:	57 fd       	sbrc	r21, 7
    6b32:	90 58       	subi	r25, 0x80	; 128
    6b34:	44 0f       	add	r20, r20
    6b36:	55 1f       	adc	r21, r21
    6b38:	59 f0       	breq	.+22     	; 0x6b50 <__fp_splitA+0x10>
    6b3a:	5f 3f       	cpi	r21, 0xFF	; 255
    6b3c:	71 f0       	breq	.+28     	; 0x6b5a <__fp_splitA+0x1a>
    6b3e:	47 95       	ror	r20

00006b40 <__fp_splitA>:
    6b40:	88 0f       	add	r24, r24
    6b42:	97 fb       	bst	r25, 7
    6b44:	99 1f       	adc	r25, r25
    6b46:	61 f0       	breq	.+24     	; 0x6b60 <__fp_splitA+0x20>
    6b48:	9f 3f       	cpi	r25, 0xFF	; 255
    6b4a:	79 f0       	breq	.+30     	; 0x6b6a <__fp_splitA+0x2a>
    6b4c:	87 95       	ror	r24
    6b4e:	08 95       	ret
    6b50:	12 16       	cp	r1, r18
    6b52:	13 06       	cpc	r1, r19
    6b54:	14 06       	cpc	r1, r20
    6b56:	55 1f       	adc	r21, r21
    6b58:	f2 cf       	rjmp	.-28     	; 0x6b3e <__fp_split3+0xe>
    6b5a:	46 95       	lsr	r20
    6b5c:	f1 df       	rcall	.-30     	; 0x6b40 <__fp_splitA>
    6b5e:	08 c0       	rjmp	.+16     	; 0x6b70 <__fp_splitA+0x30>
    6b60:	16 16       	cp	r1, r22
    6b62:	17 06       	cpc	r1, r23
    6b64:	18 06       	cpc	r1, r24
    6b66:	99 1f       	adc	r25, r25
    6b68:	f1 cf       	rjmp	.-30     	; 0x6b4c <__fp_splitA+0xc>
    6b6a:	86 95       	lsr	r24
    6b6c:	71 05       	cpc	r23, r1
    6b6e:	61 05       	cpc	r22, r1
    6b70:	08 94       	sec
    6b72:	08 95       	ret

00006b74 <__fp_zero>:
    6b74:	e8 94       	clt

00006b76 <__fp_szero>:
    6b76:	bb 27       	eor	r27, r27
    6b78:	66 27       	eor	r22, r22
    6b7a:	77 27       	eor	r23, r23
    6b7c:	cb 01       	movw	r24, r22
    6b7e:	97 f9       	bld	r25, 7
    6b80:	08 95       	ret

00006b82 <__mulsf3>:
    6b82:	0b d0       	rcall	.+22     	; 0x6b9a <__mulsf3x>
    6b84:	c4 cf       	rjmp	.-120    	; 0x6b0e <__fp_round>
    6b86:	b5 df       	rcall	.-150    	; 0x6af2 <__fp_pscA>
    6b88:	28 f0       	brcs	.+10     	; 0x6b94 <__mulsf3+0x12>
    6b8a:	ba df       	rcall	.-140    	; 0x6b00 <__fp_pscB>
    6b8c:	18 f0       	brcs	.+6      	; 0x6b94 <__mulsf3+0x12>
    6b8e:	95 23       	and	r25, r21
    6b90:	09 f0       	breq	.+2      	; 0x6b94 <__mulsf3+0x12>
    6b92:	96 cf       	rjmp	.-212    	; 0x6ac0 <__fp_inf>
    6b94:	9b cf       	rjmp	.-202    	; 0x6acc <__fp_nan>
    6b96:	11 24       	eor	r1, r1
    6b98:	ee cf       	rjmp	.-36     	; 0x6b76 <__fp_szero>

00006b9a <__mulsf3x>:
    6b9a:	ca df       	rcall	.-108    	; 0x6b30 <__fp_split3>
    6b9c:	a0 f3       	brcs	.-24     	; 0x6b86 <__mulsf3+0x4>

00006b9e <__mulsf3_pse>:
    6b9e:	95 9f       	mul	r25, r21
    6ba0:	d1 f3       	breq	.-12     	; 0x6b96 <__mulsf3+0x14>
    6ba2:	95 0f       	add	r25, r21
    6ba4:	50 e0       	ldi	r21, 0x00	; 0
    6ba6:	55 1f       	adc	r21, r21
    6ba8:	62 9f       	mul	r22, r18
    6baa:	f0 01       	movw	r30, r0
    6bac:	72 9f       	mul	r23, r18
    6bae:	bb 27       	eor	r27, r27
    6bb0:	f0 0d       	add	r31, r0
    6bb2:	b1 1d       	adc	r27, r1
    6bb4:	63 9f       	mul	r22, r19
    6bb6:	aa 27       	eor	r26, r26
    6bb8:	f0 0d       	add	r31, r0
    6bba:	b1 1d       	adc	r27, r1
    6bbc:	aa 1f       	adc	r26, r26
    6bbe:	64 9f       	mul	r22, r20
    6bc0:	66 27       	eor	r22, r22
    6bc2:	b0 0d       	add	r27, r0
    6bc4:	a1 1d       	adc	r26, r1
    6bc6:	66 1f       	adc	r22, r22
    6bc8:	82 9f       	mul	r24, r18
    6bca:	22 27       	eor	r18, r18
    6bcc:	b0 0d       	add	r27, r0
    6bce:	a1 1d       	adc	r26, r1
    6bd0:	62 1f       	adc	r22, r18
    6bd2:	73 9f       	mul	r23, r19
    6bd4:	b0 0d       	add	r27, r0
    6bd6:	a1 1d       	adc	r26, r1
    6bd8:	62 1f       	adc	r22, r18
    6bda:	83 9f       	mul	r24, r19
    6bdc:	a0 0d       	add	r26, r0
    6bde:	61 1d       	adc	r22, r1
    6be0:	22 1f       	adc	r18, r18
    6be2:	74 9f       	mul	r23, r20
    6be4:	33 27       	eor	r19, r19
    6be6:	a0 0d       	add	r26, r0
    6be8:	61 1d       	adc	r22, r1
    6bea:	23 1f       	adc	r18, r19
    6bec:	84 9f       	mul	r24, r20
    6bee:	60 0d       	add	r22, r0
    6bf0:	21 1d       	adc	r18, r1
    6bf2:	82 2f       	mov	r24, r18
    6bf4:	76 2f       	mov	r23, r22
    6bf6:	6a 2f       	mov	r22, r26
    6bf8:	11 24       	eor	r1, r1
    6bfa:	9f 57       	subi	r25, 0x7F	; 127
    6bfc:	50 40       	sbci	r21, 0x00	; 0
    6bfe:	8a f0       	brmi	.+34     	; 0x6c22 <__mulsf3_pse+0x84>
    6c00:	e1 f0       	breq	.+56     	; 0x6c3a <__mulsf3_pse+0x9c>
    6c02:	88 23       	and	r24, r24
    6c04:	4a f0       	brmi	.+18     	; 0x6c18 <__mulsf3_pse+0x7a>
    6c06:	ee 0f       	add	r30, r30
    6c08:	ff 1f       	adc	r31, r31
    6c0a:	bb 1f       	adc	r27, r27
    6c0c:	66 1f       	adc	r22, r22
    6c0e:	77 1f       	adc	r23, r23
    6c10:	88 1f       	adc	r24, r24
    6c12:	91 50       	subi	r25, 0x01	; 1
    6c14:	50 40       	sbci	r21, 0x00	; 0
    6c16:	a9 f7       	brne	.-22     	; 0x6c02 <__mulsf3_pse+0x64>
    6c18:	9e 3f       	cpi	r25, 0xFE	; 254
    6c1a:	51 05       	cpc	r21, r1
    6c1c:	70 f0       	brcs	.+28     	; 0x6c3a <__mulsf3_pse+0x9c>
    6c1e:	50 cf       	rjmp	.-352    	; 0x6ac0 <__fp_inf>
    6c20:	aa cf       	rjmp	.-172    	; 0x6b76 <__fp_szero>
    6c22:	5f 3f       	cpi	r21, 0xFF	; 255
    6c24:	ec f3       	brlt	.-6      	; 0x6c20 <__mulsf3_pse+0x82>
    6c26:	98 3e       	cpi	r25, 0xE8	; 232
    6c28:	dc f3       	brlt	.-10     	; 0x6c20 <__mulsf3_pse+0x82>
    6c2a:	86 95       	lsr	r24
    6c2c:	77 95       	ror	r23
    6c2e:	67 95       	ror	r22
    6c30:	b7 95       	ror	r27
    6c32:	f7 95       	ror	r31
    6c34:	e7 95       	ror	r30
    6c36:	9f 5f       	subi	r25, 0xFF	; 255
    6c38:	c1 f7       	brne	.-16     	; 0x6c2a <__mulsf3_pse+0x8c>
    6c3a:	fe 2b       	or	r31, r30
    6c3c:	88 0f       	add	r24, r24
    6c3e:	91 1d       	adc	r25, r1
    6c40:	96 95       	lsr	r25
    6c42:	87 95       	ror	r24
    6c44:	97 f9       	bld	r25, 7
    6c46:	08 95       	ret

00006c48 <vfprintf>:
    6c48:	2f 92       	push	r2
    6c4a:	3f 92       	push	r3
    6c4c:	4f 92       	push	r4
    6c4e:	5f 92       	push	r5
    6c50:	6f 92       	push	r6
    6c52:	7f 92       	push	r7
    6c54:	8f 92       	push	r8
    6c56:	9f 92       	push	r9
    6c58:	af 92       	push	r10
    6c5a:	bf 92       	push	r11
    6c5c:	cf 92       	push	r12
    6c5e:	df 92       	push	r13
    6c60:	ef 92       	push	r14
    6c62:	ff 92       	push	r15
    6c64:	0f 93       	push	r16
    6c66:	1f 93       	push	r17
    6c68:	cf 93       	push	r28
    6c6a:	df 93       	push	r29
    6c6c:	cd b7       	in	r28, 0x3d	; 61
    6c6e:	de b7       	in	r29, 0x3e	; 62
    6c70:	60 97       	sbiw	r28, 0x10	; 16
    6c72:	cd bf       	out	0x3d, r28	; 61
    6c74:	de bf       	out	0x3e, r29	; 62
    6c76:	7c 01       	movw	r14, r24
    6c78:	1b 01       	movw	r2, r22
    6c7a:	6a 01       	movw	r12, r20
    6c7c:	fc 01       	movw	r30, r24
    6c7e:	16 82       	std	Z+6, r1	; 0x06
    6c80:	17 82       	std	Z+7, r1	; 0x07
    6c82:	83 81       	ldd	r24, Z+3	; 0x03
    6c84:	81 ff       	sbrs	r24, 1
    6c86:	2a c3       	rjmp	.+1620   	; 0x72dc <vfprintf+0x694>
    6c88:	9e 01       	movw	r18, r28
    6c8a:	2f 5f       	subi	r18, 0xFF	; 255
    6c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c8e:	39 01       	movw	r6, r18
    6c90:	f7 01       	movw	r30, r14
    6c92:	93 81       	ldd	r25, Z+3	; 0x03
    6c94:	f1 01       	movw	r30, r2
    6c96:	93 fd       	sbrc	r25, 3
    6c98:	85 91       	lpm	r24, Z+
    6c9a:	93 ff       	sbrs	r25, 3
    6c9c:	81 91       	ld	r24, Z+
    6c9e:	1f 01       	movw	r2, r30
    6ca0:	88 23       	and	r24, r24
    6ca2:	09 f4       	brne	.+2      	; 0x6ca6 <vfprintf+0x5e>
    6ca4:	17 c3       	rjmp	.+1582   	; 0x72d4 <vfprintf+0x68c>
    6ca6:	85 32       	cpi	r24, 0x25	; 37
    6ca8:	39 f4       	brne	.+14     	; 0x6cb8 <vfprintf+0x70>
    6caa:	93 fd       	sbrc	r25, 3
    6cac:	85 91       	lpm	r24, Z+
    6cae:	93 ff       	sbrs	r25, 3
    6cb0:	81 91       	ld	r24, Z+
    6cb2:	1f 01       	movw	r2, r30
    6cb4:	85 32       	cpi	r24, 0x25	; 37
    6cb6:	31 f4       	brne	.+12     	; 0x6cc4 <vfprintf+0x7c>
    6cb8:	b7 01       	movw	r22, r14
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	9a d6       	rcall	.+3380   	; 0x79f2 <fputc>
    6cbe:	56 01       	movw	r10, r12
    6cc0:	65 01       	movw	r12, r10
    6cc2:	e6 cf       	rjmp	.-52     	; 0x6c90 <vfprintf+0x48>
    6cc4:	10 e0       	ldi	r17, 0x00	; 0
    6cc6:	51 2c       	mov	r5, r1
    6cc8:	91 2c       	mov	r9, r1
    6cca:	ff e1       	ldi	r31, 0x1F	; 31
    6ccc:	f9 15       	cp	r31, r9
    6cce:	d8 f0       	brcs	.+54     	; 0x6d06 <vfprintf+0xbe>
    6cd0:	8b 32       	cpi	r24, 0x2B	; 43
    6cd2:	79 f0       	breq	.+30     	; 0x6cf2 <vfprintf+0xaa>
    6cd4:	38 f4       	brcc	.+14     	; 0x6ce4 <vfprintf+0x9c>
    6cd6:	80 32       	cpi	r24, 0x20	; 32
    6cd8:	79 f0       	breq	.+30     	; 0x6cf8 <vfprintf+0xb0>
    6cda:	83 32       	cpi	r24, 0x23	; 35
    6cdc:	a1 f4       	brne	.+40     	; 0x6d06 <vfprintf+0xbe>
    6cde:	f9 2d       	mov	r31, r9
    6ce0:	f0 61       	ori	r31, 0x10	; 16
    6ce2:	2e c0       	rjmp	.+92     	; 0x6d40 <vfprintf+0xf8>
    6ce4:	8d 32       	cpi	r24, 0x2D	; 45
    6ce6:	61 f0       	breq	.+24     	; 0x6d00 <vfprintf+0xb8>
    6ce8:	80 33       	cpi	r24, 0x30	; 48
    6cea:	69 f4       	brne	.+26     	; 0x6d06 <vfprintf+0xbe>
    6cec:	29 2d       	mov	r18, r9
    6cee:	21 60       	ori	r18, 0x01	; 1
    6cf0:	2d c0       	rjmp	.+90     	; 0x6d4c <vfprintf+0x104>
    6cf2:	39 2d       	mov	r19, r9
    6cf4:	32 60       	ori	r19, 0x02	; 2
    6cf6:	93 2e       	mov	r9, r19
    6cf8:	89 2d       	mov	r24, r9
    6cfa:	84 60       	ori	r24, 0x04	; 4
    6cfc:	98 2e       	mov	r9, r24
    6cfe:	2a c0       	rjmp	.+84     	; 0x6d54 <vfprintf+0x10c>
    6d00:	e9 2d       	mov	r30, r9
    6d02:	e8 60       	ori	r30, 0x08	; 8
    6d04:	15 c0       	rjmp	.+42     	; 0x6d30 <vfprintf+0xe8>
    6d06:	97 fc       	sbrc	r9, 7
    6d08:	2d c0       	rjmp	.+90     	; 0x6d64 <vfprintf+0x11c>
    6d0a:	20 ed       	ldi	r18, 0xD0	; 208
    6d0c:	28 0f       	add	r18, r24
    6d0e:	2a 30       	cpi	r18, 0x0A	; 10
    6d10:	88 f4       	brcc	.+34     	; 0x6d34 <vfprintf+0xec>
    6d12:	96 fe       	sbrs	r9, 6
    6d14:	06 c0       	rjmp	.+12     	; 0x6d22 <vfprintf+0xda>
    6d16:	3a e0       	ldi	r19, 0x0A	; 10
    6d18:	13 9f       	mul	r17, r19
    6d1a:	20 0d       	add	r18, r0
    6d1c:	11 24       	eor	r1, r1
    6d1e:	12 2f       	mov	r17, r18
    6d20:	19 c0       	rjmp	.+50     	; 0x6d54 <vfprintf+0x10c>
    6d22:	8a e0       	ldi	r24, 0x0A	; 10
    6d24:	58 9e       	mul	r5, r24
    6d26:	20 0d       	add	r18, r0
    6d28:	11 24       	eor	r1, r1
    6d2a:	52 2e       	mov	r5, r18
    6d2c:	e9 2d       	mov	r30, r9
    6d2e:	e0 62       	ori	r30, 0x20	; 32
    6d30:	9e 2e       	mov	r9, r30
    6d32:	10 c0       	rjmp	.+32     	; 0x6d54 <vfprintf+0x10c>
    6d34:	8e 32       	cpi	r24, 0x2E	; 46
    6d36:	31 f4       	brne	.+12     	; 0x6d44 <vfprintf+0xfc>
    6d38:	96 fc       	sbrc	r9, 6
    6d3a:	cc c2       	rjmp	.+1432   	; 0x72d4 <vfprintf+0x68c>
    6d3c:	f9 2d       	mov	r31, r9
    6d3e:	f0 64       	ori	r31, 0x40	; 64
    6d40:	9f 2e       	mov	r9, r31
    6d42:	08 c0       	rjmp	.+16     	; 0x6d54 <vfprintf+0x10c>
    6d44:	8c 36       	cpi	r24, 0x6C	; 108
    6d46:	21 f4       	brne	.+8      	; 0x6d50 <vfprintf+0x108>
    6d48:	29 2d       	mov	r18, r9
    6d4a:	20 68       	ori	r18, 0x80	; 128
    6d4c:	92 2e       	mov	r9, r18
    6d4e:	02 c0       	rjmp	.+4      	; 0x6d54 <vfprintf+0x10c>
    6d50:	88 36       	cpi	r24, 0x68	; 104
    6d52:	41 f4       	brne	.+16     	; 0x6d64 <vfprintf+0x11c>
    6d54:	f1 01       	movw	r30, r2
    6d56:	93 fd       	sbrc	r25, 3
    6d58:	85 91       	lpm	r24, Z+
    6d5a:	93 ff       	sbrs	r25, 3
    6d5c:	81 91       	ld	r24, Z+
    6d5e:	1f 01       	movw	r2, r30
    6d60:	81 11       	cpse	r24, r1
    6d62:	b3 cf       	rjmp	.-154    	; 0x6cca <vfprintf+0x82>
    6d64:	9b eb       	ldi	r25, 0xBB	; 187
    6d66:	98 0f       	add	r25, r24
    6d68:	93 30       	cpi	r25, 0x03	; 3
    6d6a:	20 f4       	brcc	.+8      	; 0x6d74 <vfprintf+0x12c>
    6d6c:	99 2d       	mov	r25, r9
    6d6e:	90 61       	ori	r25, 0x10	; 16
    6d70:	80 5e       	subi	r24, 0xE0	; 224
    6d72:	07 c0       	rjmp	.+14     	; 0x6d82 <vfprintf+0x13a>
    6d74:	9b e9       	ldi	r25, 0x9B	; 155
    6d76:	98 0f       	add	r25, r24
    6d78:	93 30       	cpi	r25, 0x03	; 3
    6d7a:	08 f0       	brcs	.+2      	; 0x6d7e <vfprintf+0x136>
    6d7c:	59 c1       	rjmp	.+690    	; 0x7030 <vfprintf+0x3e8>
    6d7e:	99 2d       	mov	r25, r9
    6d80:	9f 7e       	andi	r25, 0xEF	; 239
    6d82:	96 ff       	sbrs	r25, 6
    6d84:	16 e0       	ldi	r17, 0x06	; 6
    6d86:	9f 73       	andi	r25, 0x3F	; 63
    6d88:	99 2e       	mov	r9, r25
    6d8a:	85 36       	cpi	r24, 0x65	; 101
    6d8c:	19 f4       	brne	.+6      	; 0x6d94 <vfprintf+0x14c>
    6d8e:	90 64       	ori	r25, 0x40	; 64
    6d90:	99 2e       	mov	r9, r25
    6d92:	08 c0       	rjmp	.+16     	; 0x6da4 <vfprintf+0x15c>
    6d94:	86 36       	cpi	r24, 0x66	; 102
    6d96:	21 f4       	brne	.+8      	; 0x6da0 <vfprintf+0x158>
    6d98:	39 2f       	mov	r19, r25
    6d9a:	30 68       	ori	r19, 0x80	; 128
    6d9c:	93 2e       	mov	r9, r19
    6d9e:	02 c0       	rjmp	.+4      	; 0x6da4 <vfprintf+0x15c>
    6da0:	11 11       	cpse	r17, r1
    6da2:	11 50       	subi	r17, 0x01	; 1
    6da4:	97 fe       	sbrs	r9, 7
    6da6:	07 c0       	rjmp	.+14     	; 0x6db6 <vfprintf+0x16e>
    6da8:	1c 33       	cpi	r17, 0x3C	; 60
    6daa:	50 f4       	brcc	.+20     	; 0x6dc0 <vfprintf+0x178>
    6dac:	44 24       	eor	r4, r4
    6dae:	43 94       	inc	r4
    6db0:	41 0e       	add	r4, r17
    6db2:	27 e0       	ldi	r18, 0x07	; 7
    6db4:	0b c0       	rjmp	.+22     	; 0x6dcc <vfprintf+0x184>
    6db6:	18 30       	cpi	r17, 0x08	; 8
    6db8:	38 f0       	brcs	.+14     	; 0x6dc8 <vfprintf+0x180>
    6dba:	27 e0       	ldi	r18, 0x07	; 7
    6dbc:	17 e0       	ldi	r17, 0x07	; 7
    6dbe:	05 c0       	rjmp	.+10     	; 0x6dca <vfprintf+0x182>
    6dc0:	27 e0       	ldi	r18, 0x07	; 7
    6dc2:	9c e3       	ldi	r25, 0x3C	; 60
    6dc4:	49 2e       	mov	r4, r25
    6dc6:	02 c0       	rjmp	.+4      	; 0x6dcc <vfprintf+0x184>
    6dc8:	21 2f       	mov	r18, r17
    6dca:	41 2c       	mov	r4, r1
    6dcc:	56 01       	movw	r10, r12
    6dce:	84 e0       	ldi	r24, 0x04	; 4
    6dd0:	a8 0e       	add	r10, r24
    6dd2:	b1 1c       	adc	r11, r1
    6dd4:	f6 01       	movw	r30, r12
    6dd6:	60 81       	ld	r22, Z
    6dd8:	71 81       	ldd	r23, Z+1	; 0x01
    6dda:	82 81       	ldd	r24, Z+2	; 0x02
    6ddc:	93 81       	ldd	r25, Z+3	; 0x03
    6dde:	04 2d       	mov	r16, r4
    6de0:	a3 01       	movw	r20, r6
    6de2:	bd d4       	rcall	.+2426   	; 0x775e <__ftoa_engine>
    6de4:	6c 01       	movw	r12, r24
    6de6:	f9 81       	ldd	r31, Y+1	; 0x01
    6de8:	fc 87       	std	Y+12, r31	; 0x0c
    6dea:	f0 ff       	sbrs	r31, 0
    6dec:	02 c0       	rjmp	.+4      	; 0x6df2 <vfprintf+0x1aa>
    6dee:	f3 ff       	sbrs	r31, 3
    6df0:	06 c0       	rjmp	.+12     	; 0x6dfe <vfprintf+0x1b6>
    6df2:	91 fc       	sbrc	r9, 1
    6df4:	06 c0       	rjmp	.+12     	; 0x6e02 <vfprintf+0x1ba>
    6df6:	92 fe       	sbrs	r9, 2
    6df8:	06 c0       	rjmp	.+12     	; 0x6e06 <vfprintf+0x1be>
    6dfa:	00 e2       	ldi	r16, 0x20	; 32
    6dfc:	05 c0       	rjmp	.+10     	; 0x6e08 <vfprintf+0x1c0>
    6dfe:	0d e2       	ldi	r16, 0x2D	; 45
    6e00:	03 c0       	rjmp	.+6      	; 0x6e08 <vfprintf+0x1c0>
    6e02:	0b e2       	ldi	r16, 0x2B	; 43
    6e04:	01 c0       	rjmp	.+2      	; 0x6e08 <vfprintf+0x1c0>
    6e06:	00 e0       	ldi	r16, 0x00	; 0
    6e08:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e0a:	8c 70       	andi	r24, 0x0C	; 12
    6e0c:	19 f0       	breq	.+6      	; 0x6e14 <vfprintf+0x1cc>
    6e0e:	01 11       	cpse	r16, r1
    6e10:	43 c2       	rjmp	.+1158   	; 0x7298 <vfprintf+0x650>
    6e12:	80 c2       	rjmp	.+1280   	; 0x7314 <vfprintf+0x6cc>
    6e14:	97 fe       	sbrs	r9, 7
    6e16:	10 c0       	rjmp	.+32     	; 0x6e38 <vfprintf+0x1f0>
    6e18:	4c 0c       	add	r4, r12
    6e1a:	fc 85       	ldd	r31, Y+12	; 0x0c
    6e1c:	f4 ff       	sbrs	r31, 4
    6e1e:	04 c0       	rjmp	.+8      	; 0x6e28 <vfprintf+0x1e0>
    6e20:	8a 81       	ldd	r24, Y+2	; 0x02
    6e22:	81 33       	cpi	r24, 0x31	; 49
    6e24:	09 f4       	brne	.+2      	; 0x6e28 <vfprintf+0x1e0>
    6e26:	4a 94       	dec	r4
    6e28:	14 14       	cp	r1, r4
    6e2a:	74 f5       	brge	.+92     	; 0x6e88 <vfprintf+0x240>
    6e2c:	28 e0       	ldi	r18, 0x08	; 8
    6e2e:	24 15       	cp	r18, r4
    6e30:	78 f5       	brcc	.+94     	; 0x6e90 <vfprintf+0x248>
    6e32:	88 e0       	ldi	r24, 0x08	; 8
    6e34:	48 2e       	mov	r4, r24
    6e36:	2c c0       	rjmp	.+88     	; 0x6e90 <vfprintf+0x248>
    6e38:	96 fc       	sbrc	r9, 6
    6e3a:	2a c0       	rjmp	.+84     	; 0x6e90 <vfprintf+0x248>
    6e3c:	81 2f       	mov	r24, r17
    6e3e:	90 e0       	ldi	r25, 0x00	; 0
    6e40:	8c 15       	cp	r24, r12
    6e42:	9d 05       	cpc	r25, r13
    6e44:	9c f0       	brlt	.+38     	; 0x6e6c <vfprintf+0x224>
    6e46:	3c ef       	ldi	r19, 0xFC	; 252
    6e48:	c3 16       	cp	r12, r19
    6e4a:	3f ef       	ldi	r19, 0xFF	; 255
    6e4c:	d3 06       	cpc	r13, r19
    6e4e:	74 f0       	brlt	.+28     	; 0x6e6c <vfprintf+0x224>
    6e50:	89 2d       	mov	r24, r9
    6e52:	80 68       	ori	r24, 0x80	; 128
    6e54:	98 2e       	mov	r9, r24
    6e56:	0a c0       	rjmp	.+20     	; 0x6e6c <vfprintf+0x224>
    6e58:	e2 e0       	ldi	r30, 0x02	; 2
    6e5a:	f0 e0       	ldi	r31, 0x00	; 0
    6e5c:	ec 0f       	add	r30, r28
    6e5e:	fd 1f       	adc	r31, r29
    6e60:	e1 0f       	add	r30, r17
    6e62:	f1 1d       	adc	r31, r1
    6e64:	80 81       	ld	r24, Z
    6e66:	80 33       	cpi	r24, 0x30	; 48
    6e68:	19 f4       	brne	.+6      	; 0x6e70 <vfprintf+0x228>
    6e6a:	11 50       	subi	r17, 0x01	; 1
    6e6c:	11 11       	cpse	r17, r1
    6e6e:	f4 cf       	rjmp	.-24     	; 0x6e58 <vfprintf+0x210>
    6e70:	97 fe       	sbrs	r9, 7
    6e72:	0e c0       	rjmp	.+28     	; 0x6e90 <vfprintf+0x248>
    6e74:	44 24       	eor	r4, r4
    6e76:	43 94       	inc	r4
    6e78:	41 0e       	add	r4, r17
    6e7a:	81 2f       	mov	r24, r17
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	c8 16       	cp	r12, r24
    6e80:	d9 06       	cpc	r13, r25
    6e82:	2c f4       	brge	.+10     	; 0x6e8e <vfprintf+0x246>
    6e84:	1c 19       	sub	r17, r12
    6e86:	04 c0       	rjmp	.+8      	; 0x6e90 <vfprintf+0x248>
    6e88:	44 24       	eor	r4, r4
    6e8a:	43 94       	inc	r4
    6e8c:	01 c0       	rjmp	.+2      	; 0x6e90 <vfprintf+0x248>
    6e8e:	10 e0       	ldi	r17, 0x00	; 0
    6e90:	97 fe       	sbrs	r9, 7
    6e92:	06 c0       	rjmp	.+12     	; 0x6ea0 <vfprintf+0x258>
    6e94:	1c 14       	cp	r1, r12
    6e96:	1d 04       	cpc	r1, r13
    6e98:	34 f4       	brge	.+12     	; 0x6ea6 <vfprintf+0x25e>
    6e9a:	c6 01       	movw	r24, r12
    6e9c:	01 96       	adiw	r24, 0x01	; 1
    6e9e:	05 c0       	rjmp	.+10     	; 0x6eaa <vfprintf+0x262>
    6ea0:	85 e0       	ldi	r24, 0x05	; 5
    6ea2:	90 e0       	ldi	r25, 0x00	; 0
    6ea4:	02 c0       	rjmp	.+4      	; 0x6eaa <vfprintf+0x262>
    6ea6:	81 e0       	ldi	r24, 0x01	; 1
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	01 11       	cpse	r16, r1
    6eac:	01 96       	adiw	r24, 0x01	; 1
    6eae:	11 23       	and	r17, r17
    6eb0:	31 f0       	breq	.+12     	; 0x6ebe <vfprintf+0x276>
    6eb2:	21 2f       	mov	r18, r17
    6eb4:	30 e0       	ldi	r19, 0x00	; 0
    6eb6:	2f 5f       	subi	r18, 0xFF	; 255
    6eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eba:	82 0f       	add	r24, r18
    6ebc:	93 1f       	adc	r25, r19
    6ebe:	25 2d       	mov	r18, r5
    6ec0:	30 e0       	ldi	r19, 0x00	; 0
    6ec2:	82 17       	cp	r24, r18
    6ec4:	93 07       	cpc	r25, r19
    6ec6:	14 f4       	brge	.+4      	; 0x6ecc <vfprintf+0x284>
    6ec8:	58 1a       	sub	r5, r24
    6eca:	01 c0       	rjmp	.+2      	; 0x6ece <vfprintf+0x286>
    6ecc:	51 2c       	mov	r5, r1
    6ece:	89 2d       	mov	r24, r9
    6ed0:	89 70       	andi	r24, 0x09	; 9
    6ed2:	41 f4       	brne	.+16     	; 0x6ee4 <vfprintf+0x29c>
    6ed4:	55 20       	and	r5, r5
    6ed6:	31 f0       	breq	.+12     	; 0x6ee4 <vfprintf+0x29c>
    6ed8:	b7 01       	movw	r22, r14
    6eda:	80 e2       	ldi	r24, 0x20	; 32
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	89 d5       	rcall	.+2834   	; 0x79f2 <fputc>
    6ee0:	5a 94       	dec	r5
    6ee2:	f8 cf       	rjmp	.-16     	; 0x6ed4 <vfprintf+0x28c>
    6ee4:	00 23       	and	r16, r16
    6ee6:	21 f0       	breq	.+8      	; 0x6ef0 <vfprintf+0x2a8>
    6ee8:	b7 01       	movw	r22, r14
    6eea:	80 2f       	mov	r24, r16
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	81 d5       	rcall	.+2818   	; 0x79f2 <fputc>
    6ef0:	93 fc       	sbrc	r9, 3
    6ef2:	08 c0       	rjmp	.+16     	; 0x6f04 <vfprintf+0x2bc>
    6ef4:	55 20       	and	r5, r5
    6ef6:	31 f0       	breq	.+12     	; 0x6f04 <vfprintf+0x2bc>
    6ef8:	b7 01       	movw	r22, r14
    6efa:	80 e3       	ldi	r24, 0x30	; 48
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	79 d5       	rcall	.+2802   	; 0x79f2 <fputc>
    6f00:	5a 94       	dec	r5
    6f02:	f8 cf       	rjmp	.-16     	; 0x6ef4 <vfprintf+0x2ac>
    6f04:	97 fe       	sbrs	r9, 7
    6f06:	4a c0       	rjmp	.+148    	; 0x6f9c <vfprintf+0x354>
    6f08:	46 01       	movw	r8, r12
    6f0a:	d7 fe       	sbrs	r13, 7
    6f0c:	02 c0       	rjmp	.+4      	; 0x6f12 <vfprintf+0x2ca>
    6f0e:	81 2c       	mov	r8, r1
    6f10:	91 2c       	mov	r9, r1
    6f12:	c6 01       	movw	r24, r12
    6f14:	88 19       	sub	r24, r8
    6f16:	99 09       	sbc	r25, r9
    6f18:	f3 01       	movw	r30, r6
    6f1a:	e8 0f       	add	r30, r24
    6f1c:	f9 1f       	adc	r31, r25
    6f1e:	ed 87       	std	Y+13, r30	; 0x0d
    6f20:	fe 87       	std	Y+14, r31	; 0x0e
    6f22:	96 01       	movw	r18, r12
    6f24:	24 19       	sub	r18, r4
    6f26:	31 09       	sbc	r19, r1
    6f28:	2f 87       	std	Y+15, r18	; 0x0f
    6f2a:	38 8b       	std	Y+16, r19	; 0x10
    6f2c:	01 2f       	mov	r16, r17
    6f2e:	10 e0       	ldi	r17, 0x00	; 0
    6f30:	11 95       	neg	r17
    6f32:	01 95       	neg	r16
    6f34:	11 09       	sbc	r17, r1
    6f36:	3f ef       	ldi	r19, 0xFF	; 255
    6f38:	83 16       	cp	r8, r19
    6f3a:	93 06       	cpc	r9, r19
    6f3c:	21 f4       	brne	.+8      	; 0x6f46 <vfprintf+0x2fe>
    6f3e:	b7 01       	movw	r22, r14
    6f40:	8e e2       	ldi	r24, 0x2E	; 46
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	56 d5       	rcall	.+2732   	; 0x79f2 <fputc>
    6f46:	c8 14       	cp	r12, r8
    6f48:	d9 04       	cpc	r13, r9
    6f4a:	4c f0       	brlt	.+18     	; 0x6f5e <vfprintf+0x316>
    6f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f4e:	98 89       	ldd	r25, Y+16	; 0x10
    6f50:	88 15       	cp	r24, r8
    6f52:	99 05       	cpc	r25, r9
    6f54:	24 f4       	brge	.+8      	; 0x6f5e <vfprintf+0x316>
    6f56:	ed 85       	ldd	r30, Y+13	; 0x0d
    6f58:	fe 85       	ldd	r31, Y+14	; 0x0e
    6f5a:	81 81       	ldd	r24, Z+1	; 0x01
    6f5c:	01 c0       	rjmp	.+2      	; 0x6f60 <vfprintf+0x318>
    6f5e:	80 e3       	ldi	r24, 0x30	; 48
    6f60:	f1 e0       	ldi	r31, 0x01	; 1
    6f62:	8f 1a       	sub	r8, r31
    6f64:	91 08       	sbc	r9, r1
    6f66:	2d 85       	ldd	r18, Y+13	; 0x0d
    6f68:	3e 85       	ldd	r19, Y+14	; 0x0e
    6f6a:	2f 5f       	subi	r18, 0xFF	; 255
    6f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f6e:	2d 87       	std	Y+13, r18	; 0x0d
    6f70:	3e 87       	std	Y+14, r19	; 0x0e
    6f72:	80 16       	cp	r8, r16
    6f74:	91 06       	cpc	r9, r17
    6f76:	24 f0       	brlt	.+8      	; 0x6f80 <vfprintf+0x338>
    6f78:	b7 01       	movw	r22, r14
    6f7a:	90 e0       	ldi	r25, 0x00	; 0
    6f7c:	3a d5       	rcall	.+2676   	; 0x79f2 <fputc>
    6f7e:	db cf       	rjmp	.-74     	; 0x6f36 <vfprintf+0x2ee>
    6f80:	c8 14       	cp	r12, r8
    6f82:	d9 04       	cpc	r13, r9
    6f84:	41 f4       	brne	.+16     	; 0x6f96 <vfprintf+0x34e>
    6f86:	9a 81       	ldd	r25, Y+2	; 0x02
    6f88:	96 33       	cpi	r25, 0x36	; 54
    6f8a:	20 f4       	brcc	.+8      	; 0x6f94 <vfprintf+0x34c>
    6f8c:	95 33       	cpi	r25, 0x35	; 53
    6f8e:	19 f4       	brne	.+6      	; 0x6f96 <vfprintf+0x34e>
    6f90:	3c 85       	ldd	r19, Y+12	; 0x0c
    6f92:	34 ff       	sbrs	r19, 4
    6f94:	81 e3       	ldi	r24, 0x31	; 49
    6f96:	b7 01       	movw	r22, r14
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	48 c0       	rjmp	.+144    	; 0x702c <vfprintf+0x3e4>
    6f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6f9e:	81 33       	cpi	r24, 0x31	; 49
    6fa0:	19 f0       	breq	.+6      	; 0x6fa8 <vfprintf+0x360>
    6fa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6fa4:	9f 7e       	andi	r25, 0xEF	; 239
    6fa6:	9c 87       	std	Y+12, r25	; 0x0c
    6fa8:	b7 01       	movw	r22, r14
    6faa:	90 e0       	ldi	r25, 0x00	; 0
    6fac:	22 d5       	rcall	.+2628   	; 0x79f2 <fputc>
    6fae:	11 11       	cpse	r17, r1
    6fb0:	05 c0       	rjmp	.+10     	; 0x6fbc <vfprintf+0x374>
    6fb2:	94 fc       	sbrc	r9, 4
    6fb4:	16 c0       	rjmp	.+44     	; 0x6fe2 <vfprintf+0x39a>
    6fb6:	85 e6       	ldi	r24, 0x65	; 101
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	15 c0       	rjmp	.+42     	; 0x6fe6 <vfprintf+0x39e>
    6fbc:	b7 01       	movw	r22, r14
    6fbe:	8e e2       	ldi	r24, 0x2E	; 46
    6fc0:	90 e0       	ldi	r25, 0x00	; 0
    6fc2:	17 d5       	rcall	.+2606   	; 0x79f2 <fputc>
    6fc4:	1e 5f       	subi	r17, 0xFE	; 254
    6fc6:	82 e0       	ldi	r24, 0x02	; 2
    6fc8:	01 e0       	ldi	r16, 0x01	; 1
    6fca:	08 0f       	add	r16, r24
    6fcc:	f3 01       	movw	r30, r6
    6fce:	e8 0f       	add	r30, r24
    6fd0:	f1 1d       	adc	r31, r1
    6fd2:	80 81       	ld	r24, Z
    6fd4:	b7 01       	movw	r22, r14
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	0c d5       	rcall	.+2584   	; 0x79f2 <fputc>
    6fda:	80 2f       	mov	r24, r16
    6fdc:	01 13       	cpse	r16, r17
    6fde:	f4 cf       	rjmp	.-24     	; 0x6fc8 <vfprintf+0x380>
    6fe0:	e8 cf       	rjmp	.-48     	; 0x6fb2 <vfprintf+0x36a>
    6fe2:	85 e4       	ldi	r24, 0x45	; 69
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	b7 01       	movw	r22, r14
    6fe8:	04 d5       	rcall	.+2568   	; 0x79f2 <fputc>
    6fea:	d7 fc       	sbrc	r13, 7
    6fec:	06 c0       	rjmp	.+12     	; 0x6ffa <vfprintf+0x3b2>
    6fee:	c1 14       	cp	r12, r1
    6ff0:	d1 04       	cpc	r13, r1
    6ff2:	41 f4       	brne	.+16     	; 0x7004 <vfprintf+0x3bc>
    6ff4:	ec 85       	ldd	r30, Y+12	; 0x0c
    6ff6:	e4 ff       	sbrs	r30, 4
    6ff8:	05 c0       	rjmp	.+10     	; 0x7004 <vfprintf+0x3bc>
    6ffa:	d1 94       	neg	r13
    6ffc:	c1 94       	neg	r12
    6ffe:	d1 08       	sbc	r13, r1
    7000:	8d e2       	ldi	r24, 0x2D	; 45
    7002:	01 c0       	rjmp	.+2      	; 0x7006 <vfprintf+0x3be>
    7004:	8b e2       	ldi	r24, 0x2B	; 43
    7006:	b7 01       	movw	r22, r14
    7008:	90 e0       	ldi	r25, 0x00	; 0
    700a:	f3 d4       	rcall	.+2534   	; 0x79f2 <fputc>
    700c:	80 e3       	ldi	r24, 0x30	; 48
    700e:	2a e0       	ldi	r18, 0x0A	; 10
    7010:	c2 16       	cp	r12, r18
    7012:	d1 04       	cpc	r13, r1
    7014:	2c f0       	brlt	.+10     	; 0x7020 <vfprintf+0x3d8>
    7016:	8f 5f       	subi	r24, 0xFF	; 255
    7018:	fa e0       	ldi	r31, 0x0A	; 10
    701a:	cf 1a       	sub	r12, r31
    701c:	d1 08       	sbc	r13, r1
    701e:	f7 cf       	rjmp	.-18     	; 0x700e <vfprintf+0x3c6>
    7020:	b7 01       	movw	r22, r14
    7022:	90 e0       	ldi	r25, 0x00	; 0
    7024:	e6 d4       	rcall	.+2508   	; 0x79f2 <fputc>
    7026:	b7 01       	movw	r22, r14
    7028:	c6 01       	movw	r24, r12
    702a:	c0 96       	adiw	r24, 0x30	; 48
    702c:	e2 d4       	rcall	.+2500   	; 0x79f2 <fputc>
    702e:	49 c1       	rjmp	.+658    	; 0x72c2 <vfprintf+0x67a>
    7030:	83 36       	cpi	r24, 0x63	; 99
    7032:	31 f0       	breq	.+12     	; 0x7040 <vfprintf+0x3f8>
    7034:	83 37       	cpi	r24, 0x73	; 115
    7036:	79 f0       	breq	.+30     	; 0x7056 <vfprintf+0x40e>
    7038:	83 35       	cpi	r24, 0x53	; 83
    703a:	09 f0       	breq	.+2      	; 0x703e <vfprintf+0x3f6>
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <vfprintf+0x49a>
    703e:	1f c0       	rjmp	.+62     	; 0x707e <vfprintf+0x436>
    7040:	56 01       	movw	r10, r12
    7042:	32 e0       	ldi	r19, 0x02	; 2
    7044:	a3 0e       	add	r10, r19
    7046:	b1 1c       	adc	r11, r1
    7048:	f6 01       	movw	r30, r12
    704a:	80 81       	ld	r24, Z
    704c:	89 83       	std	Y+1, r24	; 0x01
    704e:	01 e0       	ldi	r16, 0x01	; 1
    7050:	10 e0       	ldi	r17, 0x00	; 0
    7052:	63 01       	movw	r12, r6
    7054:	11 c0       	rjmp	.+34     	; 0x7078 <vfprintf+0x430>
    7056:	56 01       	movw	r10, r12
    7058:	f2 e0       	ldi	r31, 0x02	; 2
    705a:	af 0e       	add	r10, r31
    705c:	b1 1c       	adc	r11, r1
    705e:	f6 01       	movw	r30, r12
    7060:	c0 80       	ld	r12, Z
    7062:	d1 80       	ldd	r13, Z+1	; 0x01
    7064:	96 fe       	sbrs	r9, 6
    7066:	03 c0       	rjmp	.+6      	; 0x706e <vfprintf+0x426>
    7068:	61 2f       	mov	r22, r17
    706a:	70 e0       	ldi	r23, 0x00	; 0
    706c:	02 c0       	rjmp	.+4      	; 0x7072 <vfprintf+0x42a>
    706e:	6f ef       	ldi	r22, 0xFF	; 255
    7070:	7f ef       	ldi	r23, 0xFF	; 255
    7072:	c6 01       	movw	r24, r12
    7074:	69 d4       	rcall	.+2258   	; 0x7948 <strnlen>
    7076:	8c 01       	movw	r16, r24
    7078:	f9 2d       	mov	r31, r9
    707a:	ff 77       	andi	r31, 0x7F	; 127
    707c:	13 c0       	rjmp	.+38     	; 0x70a4 <vfprintf+0x45c>
    707e:	56 01       	movw	r10, r12
    7080:	22 e0       	ldi	r18, 0x02	; 2
    7082:	a2 0e       	add	r10, r18
    7084:	b1 1c       	adc	r11, r1
    7086:	f6 01       	movw	r30, r12
    7088:	c0 80       	ld	r12, Z
    708a:	d1 80       	ldd	r13, Z+1	; 0x01
    708c:	96 fe       	sbrs	r9, 6
    708e:	03 c0       	rjmp	.+6      	; 0x7096 <vfprintf+0x44e>
    7090:	61 2f       	mov	r22, r17
    7092:	70 e0       	ldi	r23, 0x00	; 0
    7094:	02 c0       	rjmp	.+4      	; 0x709a <vfprintf+0x452>
    7096:	6f ef       	ldi	r22, 0xFF	; 255
    7098:	7f ef       	ldi	r23, 0xFF	; 255
    709a:	c6 01       	movw	r24, r12
    709c:	38 d4       	rcall	.+2160   	; 0x790e <strnlen_P>
    709e:	8c 01       	movw	r16, r24
    70a0:	f9 2d       	mov	r31, r9
    70a2:	f0 68       	ori	r31, 0x80	; 128
    70a4:	9f 2e       	mov	r9, r31
    70a6:	f3 fd       	sbrc	r31, 3
    70a8:	18 c0       	rjmp	.+48     	; 0x70da <vfprintf+0x492>
    70aa:	85 2d       	mov	r24, r5
    70ac:	90 e0       	ldi	r25, 0x00	; 0
    70ae:	08 17       	cp	r16, r24
    70b0:	19 07       	cpc	r17, r25
    70b2:	98 f4       	brcc	.+38     	; 0x70da <vfprintf+0x492>
    70b4:	b7 01       	movw	r22, r14
    70b6:	80 e2       	ldi	r24, 0x20	; 32
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	9b d4       	rcall	.+2358   	; 0x79f2 <fputc>
    70bc:	5a 94       	dec	r5
    70be:	f5 cf       	rjmp	.-22     	; 0x70aa <vfprintf+0x462>
    70c0:	f6 01       	movw	r30, r12
    70c2:	97 fc       	sbrc	r9, 7
    70c4:	85 91       	lpm	r24, Z+
    70c6:	97 fe       	sbrs	r9, 7
    70c8:	81 91       	ld	r24, Z+
    70ca:	6f 01       	movw	r12, r30
    70cc:	b7 01       	movw	r22, r14
    70ce:	90 e0       	ldi	r25, 0x00	; 0
    70d0:	90 d4       	rcall	.+2336   	; 0x79f2 <fputc>
    70d2:	51 10       	cpse	r5, r1
    70d4:	5a 94       	dec	r5
    70d6:	01 50       	subi	r16, 0x01	; 1
    70d8:	11 09       	sbc	r17, r1
    70da:	01 15       	cp	r16, r1
    70dc:	11 05       	cpc	r17, r1
    70de:	81 f7       	brne	.-32     	; 0x70c0 <vfprintf+0x478>
    70e0:	f0 c0       	rjmp	.+480    	; 0x72c2 <vfprintf+0x67a>
    70e2:	84 36       	cpi	r24, 0x64	; 100
    70e4:	11 f0       	breq	.+4      	; 0x70ea <vfprintf+0x4a2>
    70e6:	89 36       	cpi	r24, 0x69	; 105
    70e8:	59 f5       	brne	.+86     	; 0x7140 <vfprintf+0x4f8>
    70ea:	56 01       	movw	r10, r12
    70ec:	97 fe       	sbrs	r9, 7
    70ee:	09 c0       	rjmp	.+18     	; 0x7102 <vfprintf+0x4ba>
    70f0:	24 e0       	ldi	r18, 0x04	; 4
    70f2:	a2 0e       	add	r10, r18
    70f4:	b1 1c       	adc	r11, r1
    70f6:	f6 01       	movw	r30, r12
    70f8:	60 81       	ld	r22, Z
    70fa:	71 81       	ldd	r23, Z+1	; 0x01
    70fc:	82 81       	ldd	r24, Z+2	; 0x02
    70fe:	93 81       	ldd	r25, Z+3	; 0x03
    7100:	0a c0       	rjmp	.+20     	; 0x7116 <vfprintf+0x4ce>
    7102:	f2 e0       	ldi	r31, 0x02	; 2
    7104:	af 0e       	add	r10, r31
    7106:	b1 1c       	adc	r11, r1
    7108:	f6 01       	movw	r30, r12
    710a:	60 81       	ld	r22, Z
    710c:	71 81       	ldd	r23, Z+1	; 0x01
    710e:	07 2e       	mov	r0, r23
    7110:	00 0c       	add	r0, r0
    7112:	88 0b       	sbc	r24, r24
    7114:	99 0b       	sbc	r25, r25
    7116:	f9 2d       	mov	r31, r9
    7118:	ff 76       	andi	r31, 0x6F	; 111
    711a:	9f 2e       	mov	r9, r31
    711c:	97 ff       	sbrs	r25, 7
    711e:	09 c0       	rjmp	.+18     	; 0x7132 <vfprintf+0x4ea>
    7120:	90 95       	com	r25
    7122:	80 95       	com	r24
    7124:	70 95       	com	r23
    7126:	61 95       	neg	r22
    7128:	7f 4f       	sbci	r23, 0xFF	; 255
    712a:	8f 4f       	sbci	r24, 0xFF	; 255
    712c:	9f 4f       	sbci	r25, 0xFF	; 255
    712e:	f0 68       	ori	r31, 0x80	; 128
    7130:	9f 2e       	mov	r9, r31
    7132:	2a e0       	ldi	r18, 0x0A	; 10
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	a3 01       	movw	r20, r6
    7138:	e0 d4       	rcall	.+2496   	; 0x7afa <__ultoa_invert>
    713a:	c8 2e       	mov	r12, r24
    713c:	c6 18       	sub	r12, r6
    713e:	3e c0       	rjmp	.+124    	; 0x71bc <vfprintf+0x574>
    7140:	09 2d       	mov	r16, r9
    7142:	85 37       	cpi	r24, 0x75	; 117
    7144:	21 f4       	brne	.+8      	; 0x714e <vfprintf+0x506>
    7146:	0f 7e       	andi	r16, 0xEF	; 239
    7148:	2a e0       	ldi	r18, 0x0A	; 10
    714a:	30 e0       	ldi	r19, 0x00	; 0
    714c:	1d c0       	rjmp	.+58     	; 0x7188 <vfprintf+0x540>
    714e:	09 7f       	andi	r16, 0xF9	; 249
    7150:	8f 36       	cpi	r24, 0x6F	; 111
    7152:	91 f0       	breq	.+36     	; 0x7178 <vfprintf+0x530>
    7154:	18 f4       	brcc	.+6      	; 0x715c <vfprintf+0x514>
    7156:	88 35       	cpi	r24, 0x58	; 88
    7158:	59 f0       	breq	.+22     	; 0x7170 <vfprintf+0x528>
    715a:	bc c0       	rjmp	.+376    	; 0x72d4 <vfprintf+0x68c>
    715c:	80 37       	cpi	r24, 0x70	; 112
    715e:	19 f0       	breq	.+6      	; 0x7166 <vfprintf+0x51e>
    7160:	88 37       	cpi	r24, 0x78	; 120
    7162:	11 f0       	breq	.+4      	; 0x7168 <vfprintf+0x520>
    7164:	b7 c0       	rjmp	.+366    	; 0x72d4 <vfprintf+0x68c>
    7166:	00 61       	ori	r16, 0x10	; 16
    7168:	04 ff       	sbrs	r16, 4
    716a:	09 c0       	rjmp	.+18     	; 0x717e <vfprintf+0x536>
    716c:	04 60       	ori	r16, 0x04	; 4
    716e:	07 c0       	rjmp	.+14     	; 0x717e <vfprintf+0x536>
    7170:	94 fe       	sbrs	r9, 4
    7172:	08 c0       	rjmp	.+16     	; 0x7184 <vfprintf+0x53c>
    7174:	06 60       	ori	r16, 0x06	; 6
    7176:	06 c0       	rjmp	.+12     	; 0x7184 <vfprintf+0x53c>
    7178:	28 e0       	ldi	r18, 0x08	; 8
    717a:	30 e0       	ldi	r19, 0x00	; 0
    717c:	05 c0       	rjmp	.+10     	; 0x7188 <vfprintf+0x540>
    717e:	20 e1       	ldi	r18, 0x10	; 16
    7180:	30 e0       	ldi	r19, 0x00	; 0
    7182:	02 c0       	rjmp	.+4      	; 0x7188 <vfprintf+0x540>
    7184:	20 e1       	ldi	r18, 0x10	; 16
    7186:	32 e0       	ldi	r19, 0x02	; 2
    7188:	56 01       	movw	r10, r12
    718a:	07 ff       	sbrs	r16, 7
    718c:	09 c0       	rjmp	.+18     	; 0x71a0 <vfprintf+0x558>
    718e:	84 e0       	ldi	r24, 0x04	; 4
    7190:	a8 0e       	add	r10, r24
    7192:	b1 1c       	adc	r11, r1
    7194:	f6 01       	movw	r30, r12
    7196:	60 81       	ld	r22, Z
    7198:	71 81       	ldd	r23, Z+1	; 0x01
    719a:	82 81       	ldd	r24, Z+2	; 0x02
    719c:	93 81       	ldd	r25, Z+3	; 0x03
    719e:	08 c0       	rjmp	.+16     	; 0x71b0 <vfprintf+0x568>
    71a0:	f2 e0       	ldi	r31, 0x02	; 2
    71a2:	af 0e       	add	r10, r31
    71a4:	b1 1c       	adc	r11, r1
    71a6:	f6 01       	movw	r30, r12
    71a8:	60 81       	ld	r22, Z
    71aa:	71 81       	ldd	r23, Z+1	; 0x01
    71ac:	80 e0       	ldi	r24, 0x00	; 0
    71ae:	90 e0       	ldi	r25, 0x00	; 0
    71b0:	a3 01       	movw	r20, r6
    71b2:	a3 d4       	rcall	.+2374   	; 0x7afa <__ultoa_invert>
    71b4:	c8 2e       	mov	r12, r24
    71b6:	c6 18       	sub	r12, r6
    71b8:	0f 77       	andi	r16, 0x7F	; 127
    71ba:	90 2e       	mov	r9, r16
    71bc:	96 fe       	sbrs	r9, 6
    71be:	0b c0       	rjmp	.+22     	; 0x71d6 <vfprintf+0x58e>
    71c0:	09 2d       	mov	r16, r9
    71c2:	0e 7f       	andi	r16, 0xFE	; 254
    71c4:	c1 16       	cp	r12, r17
    71c6:	50 f4       	brcc	.+20     	; 0x71dc <vfprintf+0x594>
    71c8:	94 fe       	sbrs	r9, 4
    71ca:	0a c0       	rjmp	.+20     	; 0x71e0 <vfprintf+0x598>
    71cc:	92 fc       	sbrc	r9, 2
    71ce:	08 c0       	rjmp	.+16     	; 0x71e0 <vfprintf+0x598>
    71d0:	09 2d       	mov	r16, r9
    71d2:	0e 7e       	andi	r16, 0xEE	; 238
    71d4:	05 c0       	rjmp	.+10     	; 0x71e0 <vfprintf+0x598>
    71d6:	dc 2c       	mov	r13, r12
    71d8:	09 2d       	mov	r16, r9
    71da:	03 c0       	rjmp	.+6      	; 0x71e2 <vfprintf+0x59a>
    71dc:	dc 2c       	mov	r13, r12
    71de:	01 c0       	rjmp	.+2      	; 0x71e2 <vfprintf+0x59a>
    71e0:	d1 2e       	mov	r13, r17
    71e2:	04 ff       	sbrs	r16, 4
    71e4:	0d c0       	rjmp	.+26     	; 0x7200 <vfprintf+0x5b8>
    71e6:	fe 01       	movw	r30, r28
    71e8:	ec 0d       	add	r30, r12
    71ea:	f1 1d       	adc	r31, r1
    71ec:	80 81       	ld	r24, Z
    71ee:	80 33       	cpi	r24, 0x30	; 48
    71f0:	11 f4       	brne	.+4      	; 0x71f6 <vfprintf+0x5ae>
    71f2:	09 7e       	andi	r16, 0xE9	; 233
    71f4:	09 c0       	rjmp	.+18     	; 0x7208 <vfprintf+0x5c0>
    71f6:	02 ff       	sbrs	r16, 2
    71f8:	06 c0       	rjmp	.+12     	; 0x7206 <vfprintf+0x5be>
    71fa:	d3 94       	inc	r13
    71fc:	d3 94       	inc	r13
    71fe:	04 c0       	rjmp	.+8      	; 0x7208 <vfprintf+0x5c0>
    7200:	80 2f       	mov	r24, r16
    7202:	86 78       	andi	r24, 0x86	; 134
    7204:	09 f0       	breq	.+2      	; 0x7208 <vfprintf+0x5c0>
    7206:	d3 94       	inc	r13
    7208:	03 fd       	sbrc	r16, 3
    720a:	10 c0       	rjmp	.+32     	; 0x722c <vfprintf+0x5e4>
    720c:	00 ff       	sbrs	r16, 0
    720e:	06 c0       	rjmp	.+12     	; 0x721c <vfprintf+0x5d4>
    7210:	1c 2d       	mov	r17, r12
    7212:	d5 14       	cp	r13, r5
    7214:	78 f4       	brcc	.+30     	; 0x7234 <vfprintf+0x5ec>
    7216:	15 0d       	add	r17, r5
    7218:	1d 19       	sub	r17, r13
    721a:	0c c0       	rjmp	.+24     	; 0x7234 <vfprintf+0x5ec>
    721c:	d5 14       	cp	r13, r5
    721e:	50 f4       	brcc	.+20     	; 0x7234 <vfprintf+0x5ec>
    7220:	b7 01       	movw	r22, r14
    7222:	80 e2       	ldi	r24, 0x20	; 32
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	e5 d3       	rcall	.+1994   	; 0x79f2 <fputc>
    7228:	d3 94       	inc	r13
    722a:	f8 cf       	rjmp	.-16     	; 0x721c <vfprintf+0x5d4>
    722c:	d5 14       	cp	r13, r5
    722e:	10 f4       	brcc	.+4      	; 0x7234 <vfprintf+0x5ec>
    7230:	5d 18       	sub	r5, r13
    7232:	01 c0       	rjmp	.+2      	; 0x7236 <vfprintf+0x5ee>
    7234:	51 2c       	mov	r5, r1
    7236:	04 ff       	sbrs	r16, 4
    7238:	0f c0       	rjmp	.+30     	; 0x7258 <vfprintf+0x610>
    723a:	b7 01       	movw	r22, r14
    723c:	80 e3       	ldi	r24, 0x30	; 48
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	d8 d3       	rcall	.+1968   	; 0x79f2 <fputc>
    7242:	02 ff       	sbrs	r16, 2
    7244:	16 c0       	rjmp	.+44     	; 0x7272 <vfprintf+0x62a>
    7246:	01 fd       	sbrc	r16, 1
    7248:	03 c0       	rjmp	.+6      	; 0x7250 <vfprintf+0x608>
    724a:	88 e7       	ldi	r24, 0x78	; 120
    724c:	90 e0       	ldi	r25, 0x00	; 0
    724e:	02 c0       	rjmp	.+4      	; 0x7254 <vfprintf+0x60c>
    7250:	88 e5       	ldi	r24, 0x58	; 88
    7252:	90 e0       	ldi	r25, 0x00	; 0
    7254:	b7 01       	movw	r22, r14
    7256:	0c c0       	rjmp	.+24     	; 0x7270 <vfprintf+0x628>
    7258:	80 2f       	mov	r24, r16
    725a:	86 78       	andi	r24, 0x86	; 134
    725c:	51 f0       	breq	.+20     	; 0x7272 <vfprintf+0x62a>
    725e:	01 ff       	sbrs	r16, 1
    7260:	02 c0       	rjmp	.+4      	; 0x7266 <vfprintf+0x61e>
    7262:	8b e2       	ldi	r24, 0x2B	; 43
    7264:	01 c0       	rjmp	.+2      	; 0x7268 <vfprintf+0x620>
    7266:	80 e2       	ldi	r24, 0x20	; 32
    7268:	07 fd       	sbrc	r16, 7
    726a:	8d e2       	ldi	r24, 0x2D	; 45
    726c:	b7 01       	movw	r22, r14
    726e:	90 e0       	ldi	r25, 0x00	; 0
    7270:	c0 d3       	rcall	.+1920   	; 0x79f2 <fputc>
    7272:	c1 16       	cp	r12, r17
    7274:	30 f4       	brcc	.+12     	; 0x7282 <vfprintf+0x63a>
    7276:	b7 01       	movw	r22, r14
    7278:	80 e3       	ldi	r24, 0x30	; 48
    727a:	90 e0       	ldi	r25, 0x00	; 0
    727c:	ba d3       	rcall	.+1908   	; 0x79f2 <fputc>
    727e:	11 50       	subi	r17, 0x01	; 1
    7280:	f8 cf       	rjmp	.-16     	; 0x7272 <vfprintf+0x62a>
    7282:	ca 94       	dec	r12
    7284:	f3 01       	movw	r30, r6
    7286:	ec 0d       	add	r30, r12
    7288:	f1 1d       	adc	r31, r1
    728a:	80 81       	ld	r24, Z
    728c:	b7 01       	movw	r22, r14
    728e:	90 e0       	ldi	r25, 0x00	; 0
    7290:	b0 d3       	rcall	.+1888   	; 0x79f2 <fputc>
    7292:	c1 10       	cpse	r12, r1
    7294:	f6 cf       	rjmp	.-20     	; 0x7282 <vfprintf+0x63a>
    7296:	15 c0       	rjmp	.+42     	; 0x72c2 <vfprintf+0x67a>
    7298:	f4 e0       	ldi	r31, 0x04	; 4
    729a:	f5 15       	cp	r31, r5
    729c:	50 f5       	brcc	.+84     	; 0x72f2 <vfprintf+0x6aa>
    729e:	84 e0       	ldi	r24, 0x04	; 4
    72a0:	58 1a       	sub	r5, r24
    72a2:	93 fe       	sbrs	r9, 3
    72a4:	1e c0       	rjmp	.+60     	; 0x72e2 <vfprintf+0x69a>
    72a6:	01 11       	cpse	r16, r1
    72a8:	25 c0       	rjmp	.+74     	; 0x72f4 <vfprintf+0x6ac>
    72aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    72ac:	23 ff       	sbrs	r18, 3
    72ae:	27 c0       	rjmp	.+78     	; 0x72fe <vfprintf+0x6b6>
    72b0:	0c ef       	ldi	r16, 0xFC	; 252
    72b2:	11 e0       	ldi	r17, 0x01	; 1
    72b4:	39 2d       	mov	r19, r9
    72b6:	30 71       	andi	r19, 0x10	; 16
    72b8:	93 2e       	mov	r9, r19
    72ba:	f8 01       	movw	r30, r16
    72bc:	84 91       	lpm	r24, Z
    72be:	81 11       	cpse	r24, r1
    72c0:	21 c0       	rjmp	.+66     	; 0x7304 <vfprintf+0x6bc>
    72c2:	55 20       	and	r5, r5
    72c4:	09 f4       	brne	.+2      	; 0x72c8 <vfprintf+0x680>
    72c6:	fc cc       	rjmp	.-1544   	; 0x6cc0 <vfprintf+0x78>
    72c8:	b7 01       	movw	r22, r14
    72ca:	80 e2       	ldi	r24, 0x20	; 32
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	91 d3       	rcall	.+1826   	; 0x79f2 <fputc>
    72d0:	5a 94       	dec	r5
    72d2:	f7 cf       	rjmp	.-18     	; 0x72c2 <vfprintf+0x67a>
    72d4:	f7 01       	movw	r30, r14
    72d6:	86 81       	ldd	r24, Z+6	; 0x06
    72d8:	97 81       	ldd	r25, Z+7	; 0x07
    72da:	23 c0       	rjmp	.+70     	; 0x7322 <vfprintf+0x6da>
    72dc:	8f ef       	ldi	r24, 0xFF	; 255
    72de:	9f ef       	ldi	r25, 0xFF	; 255
    72e0:	20 c0       	rjmp	.+64     	; 0x7322 <vfprintf+0x6da>
    72e2:	b7 01       	movw	r22, r14
    72e4:	80 e2       	ldi	r24, 0x20	; 32
    72e6:	90 e0       	ldi	r25, 0x00	; 0
    72e8:	84 d3       	rcall	.+1800   	; 0x79f2 <fputc>
    72ea:	5a 94       	dec	r5
    72ec:	51 10       	cpse	r5, r1
    72ee:	f9 cf       	rjmp	.-14     	; 0x72e2 <vfprintf+0x69a>
    72f0:	da cf       	rjmp	.-76     	; 0x72a6 <vfprintf+0x65e>
    72f2:	51 2c       	mov	r5, r1
    72f4:	b7 01       	movw	r22, r14
    72f6:	80 2f       	mov	r24, r16
    72f8:	90 e0       	ldi	r25, 0x00	; 0
    72fa:	7b d3       	rcall	.+1782   	; 0x79f2 <fputc>
    72fc:	d6 cf       	rjmp	.-84     	; 0x72aa <vfprintf+0x662>
    72fe:	00 e0       	ldi	r16, 0x00	; 0
    7300:	12 e0       	ldi	r17, 0x02	; 2
    7302:	d8 cf       	rjmp	.-80     	; 0x72b4 <vfprintf+0x66c>
    7304:	91 10       	cpse	r9, r1
    7306:	80 52       	subi	r24, 0x20	; 32
    7308:	b7 01       	movw	r22, r14
    730a:	90 e0       	ldi	r25, 0x00	; 0
    730c:	72 d3       	rcall	.+1764   	; 0x79f2 <fputc>
    730e:	0f 5f       	subi	r16, 0xFF	; 255
    7310:	1f 4f       	sbci	r17, 0xFF	; 255
    7312:	d3 cf       	rjmp	.-90     	; 0x72ba <vfprintf+0x672>
    7314:	23 e0       	ldi	r18, 0x03	; 3
    7316:	25 15       	cp	r18, r5
    7318:	10 f4       	brcc	.+4      	; 0x731e <vfprintf+0x6d6>
    731a:	83 e0       	ldi	r24, 0x03	; 3
    731c:	c1 cf       	rjmp	.-126    	; 0x72a0 <vfprintf+0x658>
    731e:	51 2c       	mov	r5, r1
    7320:	c4 cf       	rjmp	.-120    	; 0x72aa <vfprintf+0x662>
    7322:	60 96       	adiw	r28, 0x10	; 16
    7324:	cd bf       	out	0x3d, r28	; 61
    7326:	de bf       	out	0x3e, r29	; 62
    7328:	df 91       	pop	r29
    732a:	cf 91       	pop	r28
    732c:	1f 91       	pop	r17
    732e:	0f 91       	pop	r16
    7330:	ff 90       	pop	r15
    7332:	ef 90       	pop	r14
    7334:	df 90       	pop	r13
    7336:	cf 90       	pop	r12
    7338:	bf 90       	pop	r11
    733a:	af 90       	pop	r10
    733c:	9f 90       	pop	r9
    733e:	8f 90       	pop	r8
    7340:	7f 90       	pop	r7
    7342:	6f 90       	pop	r6
    7344:	5f 90       	pop	r5
    7346:	4f 90       	pop	r4
    7348:	3f 90       	pop	r3
    734a:	2f 90       	pop	r2
    734c:	08 95       	ret

0000734e <__mulsi3>:
    734e:	db 01       	movw	r26, r22
    7350:	8f 93       	push	r24
    7352:	9f 93       	push	r25
    7354:	41 d0       	rcall	.+130    	; 0x73d8 <__muluhisi3>
    7356:	bf 91       	pop	r27
    7358:	af 91       	pop	r26
    735a:	a2 9f       	mul	r26, r18
    735c:	80 0d       	add	r24, r0
    735e:	91 1d       	adc	r25, r1
    7360:	a3 9f       	mul	r26, r19
    7362:	90 0d       	add	r25, r0
    7364:	b2 9f       	mul	r27, r18
    7366:	90 0d       	add	r25, r0
    7368:	11 24       	eor	r1, r1
    736a:	08 95       	ret

0000736c <__udivmodhi4>:
    736c:	aa 1b       	sub	r26, r26
    736e:	bb 1b       	sub	r27, r27
    7370:	51 e1       	ldi	r21, 0x11	; 17
    7372:	07 c0       	rjmp	.+14     	; 0x7382 <__udivmodhi4_ep>

00007374 <__udivmodhi4_loop>:
    7374:	aa 1f       	adc	r26, r26
    7376:	bb 1f       	adc	r27, r27
    7378:	a6 17       	cp	r26, r22
    737a:	b7 07       	cpc	r27, r23
    737c:	10 f0       	brcs	.+4      	; 0x7382 <__udivmodhi4_ep>
    737e:	a6 1b       	sub	r26, r22
    7380:	b7 0b       	sbc	r27, r23

00007382 <__udivmodhi4_ep>:
    7382:	88 1f       	adc	r24, r24
    7384:	99 1f       	adc	r25, r25
    7386:	5a 95       	dec	r21
    7388:	a9 f7       	brne	.-22     	; 0x7374 <__udivmodhi4_loop>
    738a:	80 95       	com	r24
    738c:	90 95       	com	r25
    738e:	bc 01       	movw	r22, r24
    7390:	cd 01       	movw	r24, r26
    7392:	08 95       	ret

00007394 <__udivmodsi4>:
    7394:	a1 e2       	ldi	r26, 0x21	; 33
    7396:	1a 2e       	mov	r1, r26
    7398:	aa 1b       	sub	r26, r26
    739a:	bb 1b       	sub	r27, r27
    739c:	fd 01       	movw	r30, r26
    739e:	0d c0       	rjmp	.+26     	; 0x73ba <__udivmodsi4_ep>

000073a0 <__udivmodsi4_loop>:
    73a0:	aa 1f       	adc	r26, r26
    73a2:	bb 1f       	adc	r27, r27
    73a4:	ee 1f       	adc	r30, r30
    73a6:	ff 1f       	adc	r31, r31
    73a8:	a2 17       	cp	r26, r18
    73aa:	b3 07       	cpc	r27, r19
    73ac:	e4 07       	cpc	r30, r20
    73ae:	f5 07       	cpc	r31, r21
    73b0:	20 f0       	brcs	.+8      	; 0x73ba <__udivmodsi4_ep>
    73b2:	a2 1b       	sub	r26, r18
    73b4:	b3 0b       	sbc	r27, r19
    73b6:	e4 0b       	sbc	r30, r20
    73b8:	f5 0b       	sbc	r31, r21

000073ba <__udivmodsi4_ep>:
    73ba:	66 1f       	adc	r22, r22
    73bc:	77 1f       	adc	r23, r23
    73be:	88 1f       	adc	r24, r24
    73c0:	99 1f       	adc	r25, r25
    73c2:	1a 94       	dec	r1
    73c4:	69 f7       	brne	.-38     	; 0x73a0 <__udivmodsi4_loop>
    73c6:	60 95       	com	r22
    73c8:	70 95       	com	r23
    73ca:	80 95       	com	r24
    73cc:	90 95       	com	r25
    73ce:	9b 01       	movw	r18, r22
    73d0:	ac 01       	movw	r20, r24
    73d2:	bd 01       	movw	r22, r26
    73d4:	cf 01       	movw	r24, r30
    73d6:	08 95       	ret

000073d8 <__muluhisi3>:
    73d8:	92 d0       	rcall	.+292    	; 0x74fe <__umulhisi3>
    73da:	a5 9f       	mul	r26, r21
    73dc:	90 0d       	add	r25, r0
    73de:	b4 9f       	mul	r27, r20
    73e0:	90 0d       	add	r25, r0
    73e2:	a4 9f       	mul	r26, r20
    73e4:	80 0d       	add	r24, r0
    73e6:	91 1d       	adc	r25, r1
    73e8:	11 24       	eor	r1, r1
    73ea:	08 95       	ret

000073ec <__umoddi3>:
    73ec:	68 94       	set
    73ee:	01 c0       	rjmp	.+2      	; 0x73f2 <__udivdi3_umoddi3>

000073f0 <__udivdi3>:
    73f0:	e8 94       	clt

000073f2 <__udivdi3_umoddi3>:
    73f2:	8f 92       	push	r8
    73f4:	9f 92       	push	r9
    73f6:	cf 93       	push	r28
    73f8:	df 93       	push	r29
    73fa:	05 d0       	rcall	.+10     	; 0x7406 <__udivmod64>
    73fc:	df 91       	pop	r29
    73fe:	cf 91       	pop	r28
    7400:	9f 90       	pop	r9
    7402:	8f 90       	pop	r8
    7404:	08 95       	ret

00007406 <__udivmod64>:
    7406:	88 24       	eor	r8, r8
    7408:	99 24       	eor	r9, r9
    740a:	f4 01       	movw	r30, r8
    740c:	e4 01       	movw	r28, r8
    740e:	b0 e4       	ldi	r27, 0x40	; 64
    7410:	9f 93       	push	r25
    7412:	aa 27       	eor	r26, r26
    7414:	9a 15       	cp	r25, r10
    7416:	8b 04       	cpc	r8, r11
    7418:	9c 04       	cpc	r9, r12
    741a:	ed 05       	cpc	r30, r13
    741c:	fe 05       	cpc	r31, r14
    741e:	cf 05       	cpc	r28, r15
    7420:	d0 07       	cpc	r29, r16
    7422:	a1 07       	cpc	r26, r17
    7424:	98 f4       	brcc	.+38     	; 0x744c <__udivmod64+0x46>
    7426:	ad 2f       	mov	r26, r29
    7428:	dc 2f       	mov	r29, r28
    742a:	cf 2f       	mov	r28, r31
    742c:	fe 2f       	mov	r31, r30
    742e:	e9 2d       	mov	r30, r9
    7430:	98 2c       	mov	r9, r8
    7432:	89 2e       	mov	r8, r25
    7434:	98 2f       	mov	r25, r24
    7436:	87 2f       	mov	r24, r23
    7438:	76 2f       	mov	r23, r22
    743a:	65 2f       	mov	r22, r21
    743c:	54 2f       	mov	r21, r20
    743e:	43 2f       	mov	r20, r19
    7440:	32 2f       	mov	r19, r18
    7442:	22 27       	eor	r18, r18
    7444:	b8 50       	subi	r27, 0x08	; 8
    7446:	31 f7       	brne	.-52     	; 0x7414 <__udivmod64+0xe>
    7448:	bf 91       	pop	r27
    744a:	27 c0       	rjmp	.+78     	; 0x749a <__udivmod64+0x94>
    744c:	1b 2e       	mov	r1, r27
    744e:	bf 91       	pop	r27
    7450:	bb 27       	eor	r27, r27
    7452:	22 0f       	add	r18, r18
    7454:	33 1f       	adc	r19, r19
    7456:	44 1f       	adc	r20, r20
    7458:	55 1f       	adc	r21, r21
    745a:	66 1f       	adc	r22, r22
    745c:	77 1f       	adc	r23, r23
    745e:	88 1f       	adc	r24, r24
    7460:	99 1f       	adc	r25, r25
    7462:	88 1c       	adc	r8, r8
    7464:	99 1c       	adc	r9, r9
    7466:	ee 1f       	adc	r30, r30
    7468:	ff 1f       	adc	r31, r31
    746a:	cc 1f       	adc	r28, r28
    746c:	dd 1f       	adc	r29, r29
    746e:	aa 1f       	adc	r26, r26
    7470:	bb 1f       	adc	r27, r27
    7472:	8a 14       	cp	r8, r10
    7474:	9b 04       	cpc	r9, r11
    7476:	ec 05       	cpc	r30, r12
    7478:	fd 05       	cpc	r31, r13
    747a:	ce 05       	cpc	r28, r14
    747c:	df 05       	cpc	r29, r15
    747e:	a0 07       	cpc	r26, r16
    7480:	b1 07       	cpc	r27, r17
    7482:	48 f0       	brcs	.+18     	; 0x7496 <__udivmod64+0x90>
    7484:	8a 18       	sub	r8, r10
    7486:	9b 08       	sbc	r9, r11
    7488:	ec 09       	sbc	r30, r12
    748a:	fd 09       	sbc	r31, r13
    748c:	ce 09       	sbc	r28, r14
    748e:	df 09       	sbc	r29, r15
    7490:	a0 0b       	sbc	r26, r16
    7492:	b1 0b       	sbc	r27, r17
    7494:	21 60       	ori	r18, 0x01	; 1
    7496:	1a 94       	dec	r1
    7498:	e1 f6       	brne	.-72     	; 0x7452 <__udivmod64+0x4c>
    749a:	2e f4       	brtc	.+10     	; 0x74a6 <__udivmod64+0xa0>
    749c:	94 01       	movw	r18, r8
    749e:	af 01       	movw	r20, r30
    74a0:	be 01       	movw	r22, r28
    74a2:	cd 01       	movw	r24, r26
    74a4:	00 0c       	add	r0, r0
    74a6:	08 95       	ret

000074a8 <__ashldi3>:
    74a8:	0f 93       	push	r16
    74aa:	08 30       	cpi	r16, 0x08	; 8
    74ac:	90 f0       	brcs	.+36     	; 0x74d2 <__ashldi3+0x2a>
    74ae:	98 2f       	mov	r25, r24
    74b0:	87 2f       	mov	r24, r23
    74b2:	76 2f       	mov	r23, r22
    74b4:	65 2f       	mov	r22, r21
    74b6:	54 2f       	mov	r21, r20
    74b8:	43 2f       	mov	r20, r19
    74ba:	32 2f       	mov	r19, r18
    74bc:	22 27       	eor	r18, r18
    74be:	08 50       	subi	r16, 0x08	; 8
    74c0:	f4 cf       	rjmp	.-24     	; 0x74aa <__ashldi3+0x2>
    74c2:	22 0f       	add	r18, r18
    74c4:	33 1f       	adc	r19, r19
    74c6:	44 1f       	adc	r20, r20
    74c8:	55 1f       	adc	r21, r21
    74ca:	66 1f       	adc	r22, r22
    74cc:	77 1f       	adc	r23, r23
    74ce:	88 1f       	adc	r24, r24
    74d0:	99 1f       	adc	r25, r25
    74d2:	0a 95       	dec	r16
    74d4:	b2 f7       	brpl	.-20     	; 0x74c2 <__ashldi3+0x1a>
    74d6:	0f 91       	pop	r16
    74d8:	08 95       	ret

000074da <__adddi3>:
    74da:	2a 0d       	add	r18, r10
    74dc:	3b 1d       	adc	r19, r11
    74de:	4c 1d       	adc	r20, r12
    74e0:	5d 1d       	adc	r21, r13
    74e2:	6e 1d       	adc	r22, r14
    74e4:	7f 1d       	adc	r23, r15
    74e6:	80 1f       	adc	r24, r16
    74e8:	91 1f       	adc	r25, r17
    74ea:	08 95       	ret

000074ec <__subdi3>:
    74ec:	2a 19       	sub	r18, r10
    74ee:	3b 09       	sbc	r19, r11
    74f0:	4c 09       	sbc	r20, r12
    74f2:	5d 09       	sbc	r21, r13
    74f4:	6e 09       	sbc	r22, r14
    74f6:	7f 09       	sbc	r23, r15
    74f8:	80 0b       	sbc	r24, r16
    74fa:	91 0b       	sbc	r25, r17
    74fc:	08 95       	ret

000074fe <__umulhisi3>:
    74fe:	a2 9f       	mul	r26, r18
    7500:	b0 01       	movw	r22, r0
    7502:	b3 9f       	mul	r27, r19
    7504:	c0 01       	movw	r24, r0
    7506:	a3 9f       	mul	r26, r19
    7508:	70 0d       	add	r23, r0
    750a:	81 1d       	adc	r24, r1
    750c:	11 24       	eor	r1, r1
    750e:	91 1d       	adc	r25, r1
    7510:	b2 9f       	mul	r27, r18
    7512:	70 0d       	add	r23, r0
    7514:	81 1d       	adc	r24, r1
    7516:	11 24       	eor	r1, r1
    7518:	91 1d       	adc	r25, r1
    751a:	08 95       	ret

0000751c <malloc>:
    751c:	0f 93       	push	r16
    751e:	1f 93       	push	r17
    7520:	cf 93       	push	r28
    7522:	df 93       	push	r29
    7524:	82 30       	cpi	r24, 0x02	; 2
    7526:	91 05       	cpc	r25, r1
    7528:	10 f4       	brcc	.+4      	; 0x752e <malloc+0x12>
    752a:	82 e0       	ldi	r24, 0x02	; 2
    752c:	90 e0       	ldi	r25, 0x00	; 0
    752e:	e0 91 7d 26 	lds	r30, 0x267D	; 0x80267d <__flp>
    7532:	f0 91 7e 26 	lds	r31, 0x267E	; 0x80267e <__flp+0x1>
    7536:	20 e0       	ldi	r18, 0x00	; 0
    7538:	30 e0       	ldi	r19, 0x00	; 0
    753a:	a0 e0       	ldi	r26, 0x00	; 0
    753c:	b0 e0       	ldi	r27, 0x00	; 0
    753e:	30 97       	sbiw	r30, 0x00	; 0
    7540:	19 f1       	breq	.+70     	; 0x7588 <malloc+0x6c>
    7542:	40 81       	ld	r20, Z
    7544:	51 81       	ldd	r21, Z+1	; 0x01
    7546:	02 81       	ldd	r16, Z+2	; 0x02
    7548:	13 81       	ldd	r17, Z+3	; 0x03
    754a:	48 17       	cp	r20, r24
    754c:	59 07       	cpc	r21, r25
    754e:	c8 f0       	brcs	.+50     	; 0x7582 <malloc+0x66>
    7550:	84 17       	cp	r24, r20
    7552:	95 07       	cpc	r25, r21
    7554:	69 f4       	brne	.+26     	; 0x7570 <malloc+0x54>
    7556:	10 97       	sbiw	r26, 0x00	; 0
    7558:	31 f0       	breq	.+12     	; 0x7566 <malloc+0x4a>
    755a:	12 96       	adiw	r26, 0x02	; 2
    755c:	0c 93       	st	X, r16
    755e:	12 97       	sbiw	r26, 0x02	; 2
    7560:	13 96       	adiw	r26, 0x03	; 3
    7562:	1c 93       	st	X, r17
    7564:	27 c0       	rjmp	.+78     	; 0x75b4 <malloc+0x98>
    7566:	00 93 7d 26 	sts	0x267D, r16	; 0x80267d <__flp>
    756a:	10 93 7e 26 	sts	0x267E, r17	; 0x80267e <__flp+0x1>
    756e:	22 c0       	rjmp	.+68     	; 0x75b4 <malloc+0x98>
    7570:	21 15       	cp	r18, r1
    7572:	31 05       	cpc	r19, r1
    7574:	19 f0       	breq	.+6      	; 0x757c <malloc+0x60>
    7576:	42 17       	cp	r20, r18
    7578:	53 07       	cpc	r21, r19
    757a:	18 f4       	brcc	.+6      	; 0x7582 <malloc+0x66>
    757c:	9a 01       	movw	r18, r20
    757e:	bd 01       	movw	r22, r26
    7580:	ef 01       	movw	r28, r30
    7582:	df 01       	movw	r26, r30
    7584:	f8 01       	movw	r30, r16
    7586:	db cf       	rjmp	.-74     	; 0x753e <malloc+0x22>
    7588:	21 15       	cp	r18, r1
    758a:	31 05       	cpc	r19, r1
    758c:	f9 f0       	breq	.+62     	; 0x75cc <malloc+0xb0>
    758e:	28 1b       	sub	r18, r24
    7590:	39 0b       	sbc	r19, r25
    7592:	24 30       	cpi	r18, 0x04	; 4
    7594:	31 05       	cpc	r19, r1
    7596:	80 f4       	brcc	.+32     	; 0x75b8 <malloc+0x9c>
    7598:	8a 81       	ldd	r24, Y+2	; 0x02
    759a:	9b 81       	ldd	r25, Y+3	; 0x03
    759c:	61 15       	cp	r22, r1
    759e:	71 05       	cpc	r23, r1
    75a0:	21 f0       	breq	.+8      	; 0x75aa <malloc+0x8e>
    75a2:	fb 01       	movw	r30, r22
    75a4:	82 83       	std	Z+2, r24	; 0x02
    75a6:	93 83       	std	Z+3, r25	; 0x03
    75a8:	04 c0       	rjmp	.+8      	; 0x75b2 <malloc+0x96>
    75aa:	80 93 7d 26 	sts	0x267D, r24	; 0x80267d <__flp>
    75ae:	90 93 7e 26 	sts	0x267E, r25	; 0x80267e <__flp+0x1>
    75b2:	fe 01       	movw	r30, r28
    75b4:	32 96       	adiw	r30, 0x02	; 2
    75b6:	44 c0       	rjmp	.+136    	; 0x7640 <malloc+0x124>
    75b8:	fe 01       	movw	r30, r28
    75ba:	e2 0f       	add	r30, r18
    75bc:	f3 1f       	adc	r31, r19
    75be:	81 93       	st	Z+, r24
    75c0:	91 93       	st	Z+, r25
    75c2:	22 50       	subi	r18, 0x02	; 2
    75c4:	31 09       	sbc	r19, r1
    75c6:	28 83       	st	Y, r18
    75c8:	39 83       	std	Y+1, r19	; 0x01
    75ca:	3a c0       	rjmp	.+116    	; 0x7640 <malloc+0x124>
    75cc:	20 91 7b 26 	lds	r18, 0x267B	; 0x80267b <__brkval>
    75d0:	30 91 7c 26 	lds	r19, 0x267C	; 0x80267c <__brkval+0x1>
    75d4:	23 2b       	or	r18, r19
    75d6:	41 f4       	brne	.+16     	; 0x75e8 <malloc+0xcc>
    75d8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    75dc:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    75e0:	20 93 7b 26 	sts	0x267B, r18	; 0x80267b <__brkval>
    75e4:	30 93 7c 26 	sts	0x267C, r19	; 0x80267c <__brkval+0x1>
    75e8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    75ec:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    75f0:	21 15       	cp	r18, r1
    75f2:	31 05       	cpc	r19, r1
    75f4:	41 f4       	brne	.+16     	; 0x7606 <malloc+0xea>
    75f6:	2d b7       	in	r18, 0x3d	; 61
    75f8:	3e b7       	in	r19, 0x3e	; 62
    75fa:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    75fe:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    7602:	24 1b       	sub	r18, r20
    7604:	35 0b       	sbc	r19, r21
    7606:	e0 91 7b 26 	lds	r30, 0x267B	; 0x80267b <__brkval>
    760a:	f0 91 7c 26 	lds	r31, 0x267C	; 0x80267c <__brkval+0x1>
    760e:	e2 17       	cp	r30, r18
    7610:	f3 07       	cpc	r31, r19
    7612:	a0 f4       	brcc	.+40     	; 0x763c <malloc+0x120>
    7614:	2e 1b       	sub	r18, r30
    7616:	3f 0b       	sbc	r19, r31
    7618:	28 17       	cp	r18, r24
    761a:	39 07       	cpc	r19, r25
    761c:	78 f0       	brcs	.+30     	; 0x763c <malloc+0x120>
    761e:	ac 01       	movw	r20, r24
    7620:	4e 5f       	subi	r20, 0xFE	; 254
    7622:	5f 4f       	sbci	r21, 0xFF	; 255
    7624:	24 17       	cp	r18, r20
    7626:	35 07       	cpc	r19, r21
    7628:	48 f0       	brcs	.+18     	; 0x763c <malloc+0x120>
    762a:	4e 0f       	add	r20, r30
    762c:	5f 1f       	adc	r21, r31
    762e:	40 93 7b 26 	sts	0x267B, r20	; 0x80267b <__brkval>
    7632:	50 93 7c 26 	sts	0x267C, r21	; 0x80267c <__brkval+0x1>
    7636:	81 93       	st	Z+, r24
    7638:	91 93       	st	Z+, r25
    763a:	02 c0       	rjmp	.+4      	; 0x7640 <malloc+0x124>
    763c:	e0 e0       	ldi	r30, 0x00	; 0
    763e:	f0 e0       	ldi	r31, 0x00	; 0
    7640:	cf 01       	movw	r24, r30
    7642:	df 91       	pop	r29
    7644:	cf 91       	pop	r28
    7646:	1f 91       	pop	r17
    7648:	0f 91       	pop	r16
    764a:	08 95       	ret

0000764c <free>:
    764c:	cf 93       	push	r28
    764e:	df 93       	push	r29
    7650:	00 97       	sbiw	r24, 0x00	; 0
    7652:	09 f4       	brne	.+2      	; 0x7656 <free+0xa>
    7654:	81 c0       	rjmp	.+258    	; 0x7758 <free+0x10c>
    7656:	fc 01       	movw	r30, r24
    7658:	32 97       	sbiw	r30, 0x02	; 2
    765a:	12 82       	std	Z+2, r1	; 0x02
    765c:	13 82       	std	Z+3, r1	; 0x03
    765e:	a0 91 7d 26 	lds	r26, 0x267D	; 0x80267d <__flp>
    7662:	b0 91 7e 26 	lds	r27, 0x267E	; 0x80267e <__flp+0x1>
    7666:	10 97       	sbiw	r26, 0x00	; 0
    7668:	81 f4       	brne	.+32     	; 0x768a <free+0x3e>
    766a:	20 81       	ld	r18, Z
    766c:	31 81       	ldd	r19, Z+1	; 0x01
    766e:	82 0f       	add	r24, r18
    7670:	93 1f       	adc	r25, r19
    7672:	20 91 7b 26 	lds	r18, 0x267B	; 0x80267b <__brkval>
    7676:	30 91 7c 26 	lds	r19, 0x267C	; 0x80267c <__brkval+0x1>
    767a:	28 17       	cp	r18, r24
    767c:	39 07       	cpc	r19, r25
    767e:	51 f5       	brne	.+84     	; 0x76d4 <free+0x88>
    7680:	e0 93 7b 26 	sts	0x267B, r30	; 0x80267b <__brkval>
    7684:	f0 93 7c 26 	sts	0x267C, r31	; 0x80267c <__brkval+0x1>
    7688:	67 c0       	rjmp	.+206    	; 0x7758 <free+0x10c>
    768a:	ed 01       	movw	r28, r26
    768c:	20 e0       	ldi	r18, 0x00	; 0
    768e:	30 e0       	ldi	r19, 0x00	; 0
    7690:	ce 17       	cp	r28, r30
    7692:	df 07       	cpc	r29, r31
    7694:	40 f4       	brcc	.+16     	; 0x76a6 <free+0x5a>
    7696:	4a 81       	ldd	r20, Y+2	; 0x02
    7698:	5b 81       	ldd	r21, Y+3	; 0x03
    769a:	9e 01       	movw	r18, r28
    769c:	41 15       	cp	r20, r1
    769e:	51 05       	cpc	r21, r1
    76a0:	f1 f0       	breq	.+60     	; 0x76de <free+0x92>
    76a2:	ea 01       	movw	r28, r20
    76a4:	f5 cf       	rjmp	.-22     	; 0x7690 <free+0x44>
    76a6:	c2 83       	std	Z+2, r28	; 0x02
    76a8:	d3 83       	std	Z+3, r29	; 0x03
    76aa:	40 81       	ld	r20, Z
    76ac:	51 81       	ldd	r21, Z+1	; 0x01
    76ae:	84 0f       	add	r24, r20
    76b0:	95 1f       	adc	r25, r21
    76b2:	c8 17       	cp	r28, r24
    76b4:	d9 07       	cpc	r29, r25
    76b6:	59 f4       	brne	.+22     	; 0x76ce <free+0x82>
    76b8:	88 81       	ld	r24, Y
    76ba:	99 81       	ldd	r25, Y+1	; 0x01
    76bc:	84 0f       	add	r24, r20
    76be:	95 1f       	adc	r25, r21
    76c0:	02 96       	adiw	r24, 0x02	; 2
    76c2:	80 83       	st	Z, r24
    76c4:	91 83       	std	Z+1, r25	; 0x01
    76c6:	8a 81       	ldd	r24, Y+2	; 0x02
    76c8:	9b 81       	ldd	r25, Y+3	; 0x03
    76ca:	82 83       	std	Z+2, r24	; 0x02
    76cc:	93 83       	std	Z+3, r25	; 0x03
    76ce:	21 15       	cp	r18, r1
    76d0:	31 05       	cpc	r19, r1
    76d2:	29 f4       	brne	.+10     	; 0x76de <free+0x92>
    76d4:	e0 93 7d 26 	sts	0x267D, r30	; 0x80267d <__flp>
    76d8:	f0 93 7e 26 	sts	0x267E, r31	; 0x80267e <__flp+0x1>
    76dc:	3d c0       	rjmp	.+122    	; 0x7758 <free+0x10c>
    76de:	e9 01       	movw	r28, r18
    76e0:	ea 83       	std	Y+2, r30	; 0x02
    76e2:	fb 83       	std	Y+3, r31	; 0x03
    76e4:	49 91       	ld	r20, Y+
    76e6:	59 91       	ld	r21, Y+
    76e8:	c4 0f       	add	r28, r20
    76ea:	d5 1f       	adc	r29, r21
    76ec:	ec 17       	cp	r30, r28
    76ee:	fd 07       	cpc	r31, r29
    76f0:	61 f4       	brne	.+24     	; 0x770a <free+0xbe>
    76f2:	80 81       	ld	r24, Z
    76f4:	91 81       	ldd	r25, Z+1	; 0x01
    76f6:	84 0f       	add	r24, r20
    76f8:	95 1f       	adc	r25, r21
    76fa:	02 96       	adiw	r24, 0x02	; 2
    76fc:	e9 01       	movw	r28, r18
    76fe:	88 83       	st	Y, r24
    7700:	99 83       	std	Y+1, r25	; 0x01
    7702:	82 81       	ldd	r24, Z+2	; 0x02
    7704:	93 81       	ldd	r25, Z+3	; 0x03
    7706:	8a 83       	std	Y+2, r24	; 0x02
    7708:	9b 83       	std	Y+3, r25	; 0x03
    770a:	e0 e0       	ldi	r30, 0x00	; 0
    770c:	f0 e0       	ldi	r31, 0x00	; 0
    770e:	12 96       	adiw	r26, 0x02	; 2
    7710:	8d 91       	ld	r24, X+
    7712:	9c 91       	ld	r25, X
    7714:	13 97       	sbiw	r26, 0x03	; 3
    7716:	00 97       	sbiw	r24, 0x00	; 0
    7718:	19 f0       	breq	.+6      	; 0x7720 <free+0xd4>
    771a:	fd 01       	movw	r30, r26
    771c:	dc 01       	movw	r26, r24
    771e:	f7 cf       	rjmp	.-18     	; 0x770e <free+0xc2>
    7720:	8d 91       	ld	r24, X+
    7722:	9c 91       	ld	r25, X
    7724:	11 97       	sbiw	r26, 0x01	; 1
    7726:	9d 01       	movw	r18, r26
    7728:	2e 5f       	subi	r18, 0xFE	; 254
    772a:	3f 4f       	sbci	r19, 0xFF	; 255
    772c:	82 0f       	add	r24, r18
    772e:	93 1f       	adc	r25, r19
    7730:	20 91 7b 26 	lds	r18, 0x267B	; 0x80267b <__brkval>
    7734:	30 91 7c 26 	lds	r19, 0x267C	; 0x80267c <__brkval+0x1>
    7738:	28 17       	cp	r18, r24
    773a:	39 07       	cpc	r19, r25
    773c:	69 f4       	brne	.+26     	; 0x7758 <free+0x10c>
    773e:	30 97       	sbiw	r30, 0x00	; 0
    7740:	29 f4       	brne	.+10     	; 0x774c <free+0x100>
    7742:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <__flp>
    7746:	10 92 7e 26 	sts	0x267E, r1	; 0x80267e <__flp+0x1>
    774a:	02 c0       	rjmp	.+4      	; 0x7750 <free+0x104>
    774c:	12 82       	std	Z+2, r1	; 0x02
    774e:	13 82       	std	Z+3, r1	; 0x03
    7750:	a0 93 7b 26 	sts	0x267B, r26	; 0x80267b <__brkval>
    7754:	b0 93 7c 26 	sts	0x267C, r27	; 0x80267c <__brkval+0x1>
    7758:	df 91       	pop	r29
    775a:	cf 91       	pop	r28
    775c:	08 95       	ret

0000775e <__ftoa_engine>:
    775e:	28 30       	cpi	r18, 0x08	; 8
    7760:	08 f0       	brcs	.+2      	; 0x7764 <__ftoa_engine+0x6>
    7762:	27 e0       	ldi	r18, 0x07	; 7
    7764:	33 27       	eor	r19, r19
    7766:	da 01       	movw	r26, r20
    7768:	99 0f       	add	r25, r25
    776a:	31 1d       	adc	r19, r1
    776c:	87 fd       	sbrc	r24, 7
    776e:	91 60       	ori	r25, 0x01	; 1
    7770:	00 96       	adiw	r24, 0x00	; 0
    7772:	61 05       	cpc	r22, r1
    7774:	71 05       	cpc	r23, r1
    7776:	39 f4       	brne	.+14     	; 0x7786 <__ftoa_engine+0x28>
    7778:	32 60       	ori	r19, 0x02	; 2
    777a:	2e 5f       	subi	r18, 0xFE	; 254
    777c:	3d 93       	st	X+, r19
    777e:	30 e3       	ldi	r19, 0x30	; 48
    7780:	2a 95       	dec	r18
    7782:	e1 f7       	brne	.-8      	; 0x777c <__ftoa_engine+0x1e>
    7784:	08 95       	ret
    7786:	9f 3f       	cpi	r25, 0xFF	; 255
    7788:	30 f0       	brcs	.+12     	; 0x7796 <__ftoa_engine+0x38>
    778a:	80 38       	cpi	r24, 0x80	; 128
    778c:	71 05       	cpc	r23, r1
    778e:	61 05       	cpc	r22, r1
    7790:	09 f0       	breq	.+2      	; 0x7794 <__ftoa_engine+0x36>
    7792:	3c 5f       	subi	r19, 0xFC	; 252
    7794:	3c 5f       	subi	r19, 0xFC	; 252
    7796:	3d 93       	st	X+, r19
    7798:	91 30       	cpi	r25, 0x01	; 1
    779a:	08 f0       	brcs	.+2      	; 0x779e <__ftoa_engine+0x40>
    779c:	80 68       	ori	r24, 0x80	; 128
    779e:	91 1d       	adc	r25, r1
    77a0:	df 93       	push	r29
    77a2:	cf 93       	push	r28
    77a4:	1f 93       	push	r17
    77a6:	0f 93       	push	r16
    77a8:	ff 92       	push	r15
    77aa:	ef 92       	push	r14
    77ac:	19 2f       	mov	r17, r25
    77ae:	98 7f       	andi	r25, 0xF8	; 248
    77b0:	96 95       	lsr	r25
    77b2:	e9 2f       	mov	r30, r25
    77b4:	96 95       	lsr	r25
    77b6:	96 95       	lsr	r25
    77b8:	e9 0f       	add	r30, r25
    77ba:	ff 27       	eor	r31, r31
    77bc:	e2 5a       	subi	r30, 0xA2	; 162
    77be:	fd 4f       	sbci	r31, 0xFD	; 253
    77c0:	99 27       	eor	r25, r25
    77c2:	33 27       	eor	r19, r19
    77c4:	ee 24       	eor	r14, r14
    77c6:	ff 24       	eor	r15, r15
    77c8:	a7 01       	movw	r20, r14
    77ca:	e7 01       	movw	r28, r14
    77cc:	05 90       	lpm	r0, Z+
    77ce:	08 94       	sec
    77d0:	07 94       	ror	r0
    77d2:	28 f4       	brcc	.+10     	; 0x77de <__ftoa_engine+0x80>
    77d4:	36 0f       	add	r19, r22
    77d6:	e7 1e       	adc	r14, r23
    77d8:	f8 1e       	adc	r15, r24
    77da:	49 1f       	adc	r20, r25
    77dc:	51 1d       	adc	r21, r1
    77de:	66 0f       	add	r22, r22
    77e0:	77 1f       	adc	r23, r23
    77e2:	88 1f       	adc	r24, r24
    77e4:	99 1f       	adc	r25, r25
    77e6:	06 94       	lsr	r0
    77e8:	a1 f7       	brne	.-24     	; 0x77d2 <__ftoa_engine+0x74>
    77ea:	05 90       	lpm	r0, Z+
    77ec:	07 94       	ror	r0
    77ee:	28 f4       	brcc	.+10     	; 0x77fa <__ftoa_engine+0x9c>
    77f0:	e7 0e       	add	r14, r23
    77f2:	f8 1e       	adc	r15, r24
    77f4:	49 1f       	adc	r20, r25
    77f6:	56 1f       	adc	r21, r22
    77f8:	c1 1d       	adc	r28, r1
    77fa:	77 0f       	add	r23, r23
    77fc:	88 1f       	adc	r24, r24
    77fe:	99 1f       	adc	r25, r25
    7800:	66 1f       	adc	r22, r22
    7802:	06 94       	lsr	r0
    7804:	a1 f7       	brne	.-24     	; 0x77ee <__ftoa_engine+0x90>
    7806:	05 90       	lpm	r0, Z+
    7808:	07 94       	ror	r0
    780a:	28 f4       	brcc	.+10     	; 0x7816 <__ftoa_engine+0xb8>
    780c:	f8 0e       	add	r15, r24
    780e:	49 1f       	adc	r20, r25
    7810:	56 1f       	adc	r21, r22
    7812:	c7 1f       	adc	r28, r23
    7814:	d1 1d       	adc	r29, r1
    7816:	88 0f       	add	r24, r24
    7818:	99 1f       	adc	r25, r25
    781a:	66 1f       	adc	r22, r22
    781c:	77 1f       	adc	r23, r23
    781e:	06 94       	lsr	r0
    7820:	a1 f7       	brne	.-24     	; 0x780a <__ftoa_engine+0xac>
    7822:	05 90       	lpm	r0, Z+
    7824:	07 94       	ror	r0
    7826:	20 f4       	brcc	.+8      	; 0x7830 <__ftoa_engine+0xd2>
    7828:	49 0f       	add	r20, r25
    782a:	56 1f       	adc	r21, r22
    782c:	c7 1f       	adc	r28, r23
    782e:	d8 1f       	adc	r29, r24
    7830:	99 0f       	add	r25, r25
    7832:	66 1f       	adc	r22, r22
    7834:	77 1f       	adc	r23, r23
    7836:	88 1f       	adc	r24, r24
    7838:	06 94       	lsr	r0
    783a:	a9 f7       	brne	.-22     	; 0x7826 <__ftoa_engine+0xc8>
    783c:	84 91       	lpm	r24, Z
    783e:	10 95       	com	r17
    7840:	17 70       	andi	r17, 0x07	; 7
    7842:	41 f0       	breq	.+16     	; 0x7854 <__ftoa_engine+0xf6>
    7844:	d6 95       	lsr	r29
    7846:	c7 95       	ror	r28
    7848:	57 95       	ror	r21
    784a:	47 95       	ror	r20
    784c:	f7 94       	ror	r15
    784e:	e7 94       	ror	r14
    7850:	1a 95       	dec	r17
    7852:	c1 f7       	brne	.-16     	; 0x7844 <__ftoa_engine+0xe6>
    7854:	e4 e0       	ldi	r30, 0x04	; 4
    7856:	f2 e0       	ldi	r31, 0x02	; 2
    7858:	68 94       	set
    785a:	15 90       	lpm	r1, Z+
    785c:	15 91       	lpm	r17, Z+
    785e:	35 91       	lpm	r19, Z+
    7860:	65 91       	lpm	r22, Z+
    7862:	95 91       	lpm	r25, Z+
    7864:	05 90       	lpm	r0, Z+
    7866:	7f e2       	ldi	r23, 0x2F	; 47
    7868:	73 95       	inc	r23
    786a:	e1 18       	sub	r14, r1
    786c:	f1 0a       	sbc	r15, r17
    786e:	43 0b       	sbc	r20, r19
    7870:	56 0b       	sbc	r21, r22
    7872:	c9 0b       	sbc	r28, r25
    7874:	d0 09       	sbc	r29, r0
    7876:	c0 f7       	brcc	.-16     	; 0x7868 <__ftoa_engine+0x10a>
    7878:	e1 0c       	add	r14, r1
    787a:	f1 1e       	adc	r15, r17
    787c:	43 1f       	adc	r20, r19
    787e:	56 1f       	adc	r21, r22
    7880:	c9 1f       	adc	r28, r25
    7882:	d0 1d       	adc	r29, r0
    7884:	7e f4       	brtc	.+30     	; 0x78a4 <__ftoa_engine+0x146>
    7886:	70 33       	cpi	r23, 0x30	; 48
    7888:	11 f4       	brne	.+4      	; 0x788e <__ftoa_engine+0x130>
    788a:	8a 95       	dec	r24
    788c:	e6 cf       	rjmp	.-52     	; 0x785a <__ftoa_engine+0xfc>
    788e:	e8 94       	clt
    7890:	01 50       	subi	r16, 0x01	; 1
    7892:	30 f0       	brcs	.+12     	; 0x78a0 <__ftoa_engine+0x142>
    7894:	08 0f       	add	r16, r24
    7896:	0a f4       	brpl	.+2      	; 0x789a <__ftoa_engine+0x13c>
    7898:	00 27       	eor	r16, r16
    789a:	02 17       	cp	r16, r18
    789c:	08 f4       	brcc	.+2      	; 0x78a0 <__ftoa_engine+0x142>
    789e:	20 2f       	mov	r18, r16
    78a0:	23 95       	inc	r18
    78a2:	02 2f       	mov	r16, r18
    78a4:	7a 33       	cpi	r23, 0x3A	; 58
    78a6:	28 f0       	brcs	.+10     	; 0x78b2 <__ftoa_engine+0x154>
    78a8:	79 e3       	ldi	r23, 0x39	; 57
    78aa:	7d 93       	st	X+, r23
    78ac:	2a 95       	dec	r18
    78ae:	e9 f7       	brne	.-6      	; 0x78aa <__ftoa_engine+0x14c>
    78b0:	10 c0       	rjmp	.+32     	; 0x78d2 <__ftoa_engine+0x174>
    78b2:	7d 93       	st	X+, r23
    78b4:	2a 95       	dec	r18
    78b6:	89 f6       	brne	.-94     	; 0x785a <__ftoa_engine+0xfc>
    78b8:	06 94       	lsr	r0
    78ba:	97 95       	ror	r25
    78bc:	67 95       	ror	r22
    78be:	37 95       	ror	r19
    78c0:	17 95       	ror	r17
    78c2:	17 94       	ror	r1
    78c4:	e1 18       	sub	r14, r1
    78c6:	f1 0a       	sbc	r15, r17
    78c8:	43 0b       	sbc	r20, r19
    78ca:	56 0b       	sbc	r21, r22
    78cc:	c9 0b       	sbc	r28, r25
    78ce:	d0 09       	sbc	r29, r0
    78d0:	98 f0       	brcs	.+38     	; 0x78f8 <__ftoa_engine+0x19a>
    78d2:	23 95       	inc	r18
    78d4:	7e 91       	ld	r23, -X
    78d6:	73 95       	inc	r23
    78d8:	7a 33       	cpi	r23, 0x3A	; 58
    78da:	08 f0       	brcs	.+2      	; 0x78de <__ftoa_engine+0x180>
    78dc:	70 e3       	ldi	r23, 0x30	; 48
    78de:	7c 93       	st	X, r23
    78e0:	20 13       	cpse	r18, r16
    78e2:	b8 f7       	brcc	.-18     	; 0x78d2 <__ftoa_engine+0x174>
    78e4:	7e 91       	ld	r23, -X
    78e6:	70 61       	ori	r23, 0x10	; 16
    78e8:	7d 93       	st	X+, r23
    78ea:	30 f0       	brcs	.+12     	; 0x78f8 <__ftoa_engine+0x19a>
    78ec:	83 95       	inc	r24
    78ee:	71 e3       	ldi	r23, 0x31	; 49
    78f0:	7d 93       	st	X+, r23
    78f2:	70 e3       	ldi	r23, 0x30	; 48
    78f4:	2a 95       	dec	r18
    78f6:	e1 f7       	brne	.-8      	; 0x78f0 <__ftoa_engine+0x192>
    78f8:	11 24       	eor	r1, r1
    78fa:	ef 90       	pop	r14
    78fc:	ff 90       	pop	r15
    78fe:	0f 91       	pop	r16
    7900:	1f 91       	pop	r17
    7902:	cf 91       	pop	r28
    7904:	df 91       	pop	r29
    7906:	99 27       	eor	r25, r25
    7908:	87 fd       	sbrc	r24, 7
    790a:	90 95       	com	r25
    790c:	08 95       	ret

0000790e <strnlen_P>:
    790e:	fc 01       	movw	r30, r24
    7910:	05 90       	lpm	r0, Z+
    7912:	61 50       	subi	r22, 0x01	; 1
    7914:	70 40       	sbci	r23, 0x00	; 0
    7916:	01 10       	cpse	r0, r1
    7918:	d8 f7       	brcc	.-10     	; 0x7910 <strnlen_P+0x2>
    791a:	80 95       	com	r24
    791c:	90 95       	com	r25
    791e:	8e 0f       	add	r24, r30
    7920:	9f 1f       	adc	r25, r31
    7922:	08 95       	ret

00007924 <memcpy>:
    7924:	fb 01       	movw	r30, r22
    7926:	dc 01       	movw	r26, r24
    7928:	02 c0       	rjmp	.+4      	; 0x792e <memcpy+0xa>
    792a:	01 90       	ld	r0, Z+
    792c:	0d 92       	st	X+, r0
    792e:	41 50       	subi	r20, 0x01	; 1
    7930:	50 40       	sbci	r21, 0x00	; 0
    7932:	d8 f7       	brcc	.-10     	; 0x792a <memcpy+0x6>
    7934:	08 95       	ret

00007936 <strlen>:
    7936:	fc 01       	movw	r30, r24
    7938:	01 90       	ld	r0, Z+
    793a:	00 20       	and	r0, r0
    793c:	e9 f7       	brne	.-6      	; 0x7938 <strlen+0x2>
    793e:	80 95       	com	r24
    7940:	90 95       	com	r25
    7942:	8e 0f       	add	r24, r30
    7944:	9f 1f       	adc	r25, r31
    7946:	08 95       	ret

00007948 <strnlen>:
    7948:	fc 01       	movw	r30, r24
    794a:	61 50       	subi	r22, 0x01	; 1
    794c:	70 40       	sbci	r23, 0x00	; 0
    794e:	01 90       	ld	r0, Z+
    7950:	01 10       	cpse	r0, r1
    7952:	d8 f7       	brcc	.-10     	; 0x794a <strnlen+0x2>
    7954:	80 95       	com	r24
    7956:	90 95       	com	r25
    7958:	8e 0f       	add	r24, r30
    795a:	9f 1f       	adc	r25, r31
    795c:	08 95       	ret

0000795e <fdevopen>:
    795e:	0f 93       	push	r16
    7960:	1f 93       	push	r17
    7962:	cf 93       	push	r28
    7964:	df 93       	push	r29
    7966:	00 97       	sbiw	r24, 0x00	; 0
    7968:	31 f4       	brne	.+12     	; 0x7976 <fdevopen+0x18>
    796a:	61 15       	cp	r22, r1
    796c:	71 05       	cpc	r23, r1
    796e:	19 f4       	brne	.+6      	; 0x7976 <fdevopen+0x18>
    7970:	80 e0       	ldi	r24, 0x00	; 0
    7972:	90 e0       	ldi	r25, 0x00	; 0
    7974:	39 c0       	rjmp	.+114    	; 0x79e8 <fdevopen+0x8a>
    7976:	8b 01       	movw	r16, r22
    7978:	ec 01       	movw	r28, r24
    797a:	6e e0       	ldi	r22, 0x0E	; 14
    797c:	70 e0       	ldi	r23, 0x00	; 0
    797e:	81 e0       	ldi	r24, 0x01	; 1
    7980:	90 e0       	ldi	r25, 0x00	; 0
    7982:	19 d1       	rcall	.+562    	; 0x7bb6 <calloc>
    7984:	fc 01       	movw	r30, r24
    7986:	89 2b       	or	r24, r25
    7988:	99 f3       	breq	.-26     	; 0x7970 <fdevopen+0x12>
    798a:	80 e8       	ldi	r24, 0x80	; 128
    798c:	83 83       	std	Z+3, r24	; 0x03
    798e:	01 15       	cp	r16, r1
    7990:	11 05       	cpc	r17, r1
    7992:	71 f0       	breq	.+28     	; 0x79b0 <fdevopen+0x52>
    7994:	02 87       	std	Z+10, r16	; 0x0a
    7996:	13 87       	std	Z+11, r17	; 0x0b
    7998:	81 e8       	ldi	r24, 0x81	; 129
    799a:	83 83       	std	Z+3, r24	; 0x03
    799c:	80 91 7f 26 	lds	r24, 0x267F	; 0x80267f <__iob>
    79a0:	90 91 80 26 	lds	r25, 0x2680	; 0x802680 <__iob+0x1>
    79a4:	89 2b       	or	r24, r25
    79a6:	21 f4       	brne	.+8      	; 0x79b0 <fdevopen+0x52>
    79a8:	e0 93 7f 26 	sts	0x267F, r30	; 0x80267f <__iob>
    79ac:	f0 93 80 26 	sts	0x2680, r31	; 0x802680 <__iob+0x1>
    79b0:	20 97       	sbiw	r28, 0x00	; 0
    79b2:	c9 f0       	breq	.+50     	; 0x79e6 <fdevopen+0x88>
    79b4:	c0 87       	std	Z+8, r28	; 0x08
    79b6:	d1 87       	std	Z+9, r29	; 0x09
    79b8:	83 81       	ldd	r24, Z+3	; 0x03
    79ba:	82 60       	ori	r24, 0x02	; 2
    79bc:	83 83       	std	Z+3, r24	; 0x03
    79be:	80 91 81 26 	lds	r24, 0x2681	; 0x802681 <__iob+0x2>
    79c2:	90 91 82 26 	lds	r25, 0x2682	; 0x802682 <__iob+0x3>
    79c6:	89 2b       	or	r24, r25
    79c8:	71 f4       	brne	.+28     	; 0x79e6 <fdevopen+0x88>
    79ca:	e0 93 81 26 	sts	0x2681, r30	; 0x802681 <__iob+0x2>
    79ce:	f0 93 82 26 	sts	0x2682, r31	; 0x802682 <__iob+0x3>
    79d2:	80 91 83 26 	lds	r24, 0x2683	; 0x802683 <__iob+0x4>
    79d6:	90 91 84 26 	lds	r25, 0x2684	; 0x802684 <__iob+0x5>
    79da:	89 2b       	or	r24, r25
    79dc:	21 f4       	brne	.+8      	; 0x79e6 <fdevopen+0x88>
    79de:	e0 93 83 26 	sts	0x2683, r30	; 0x802683 <__iob+0x4>
    79e2:	f0 93 84 26 	sts	0x2684, r31	; 0x802684 <__iob+0x5>
    79e6:	cf 01       	movw	r24, r30
    79e8:	df 91       	pop	r29
    79ea:	cf 91       	pop	r28
    79ec:	1f 91       	pop	r17
    79ee:	0f 91       	pop	r16
    79f0:	08 95       	ret

000079f2 <fputc>:
    79f2:	0f 93       	push	r16
    79f4:	1f 93       	push	r17
    79f6:	cf 93       	push	r28
    79f8:	df 93       	push	r29
    79fa:	fb 01       	movw	r30, r22
    79fc:	23 81       	ldd	r18, Z+3	; 0x03
    79fe:	21 fd       	sbrc	r18, 1
    7a00:	03 c0       	rjmp	.+6      	; 0x7a08 <fputc+0x16>
    7a02:	8f ef       	ldi	r24, 0xFF	; 255
    7a04:	9f ef       	ldi	r25, 0xFF	; 255
    7a06:	2c c0       	rjmp	.+88     	; 0x7a60 <fputc+0x6e>
    7a08:	22 ff       	sbrs	r18, 2
    7a0a:	16 c0       	rjmp	.+44     	; 0x7a38 <fputc+0x46>
    7a0c:	46 81       	ldd	r20, Z+6	; 0x06
    7a0e:	57 81       	ldd	r21, Z+7	; 0x07
    7a10:	24 81       	ldd	r18, Z+4	; 0x04
    7a12:	35 81       	ldd	r19, Z+5	; 0x05
    7a14:	42 17       	cp	r20, r18
    7a16:	53 07       	cpc	r21, r19
    7a18:	44 f4       	brge	.+16     	; 0x7a2a <fputc+0x38>
    7a1a:	a0 81       	ld	r26, Z
    7a1c:	b1 81       	ldd	r27, Z+1	; 0x01
    7a1e:	9d 01       	movw	r18, r26
    7a20:	2f 5f       	subi	r18, 0xFF	; 255
    7a22:	3f 4f       	sbci	r19, 0xFF	; 255
    7a24:	20 83       	st	Z, r18
    7a26:	31 83       	std	Z+1, r19	; 0x01
    7a28:	8c 93       	st	X, r24
    7a2a:	26 81       	ldd	r18, Z+6	; 0x06
    7a2c:	37 81       	ldd	r19, Z+7	; 0x07
    7a2e:	2f 5f       	subi	r18, 0xFF	; 255
    7a30:	3f 4f       	sbci	r19, 0xFF	; 255
    7a32:	26 83       	std	Z+6, r18	; 0x06
    7a34:	37 83       	std	Z+7, r19	; 0x07
    7a36:	14 c0       	rjmp	.+40     	; 0x7a60 <fputc+0x6e>
    7a38:	8b 01       	movw	r16, r22
    7a3a:	ec 01       	movw	r28, r24
    7a3c:	fb 01       	movw	r30, r22
    7a3e:	00 84       	ldd	r0, Z+8	; 0x08
    7a40:	f1 85       	ldd	r31, Z+9	; 0x09
    7a42:	e0 2d       	mov	r30, r0
    7a44:	19 95       	eicall
    7a46:	89 2b       	or	r24, r25
    7a48:	e1 f6       	brne	.-72     	; 0x7a02 <fputc+0x10>
    7a4a:	d8 01       	movw	r26, r16
    7a4c:	16 96       	adiw	r26, 0x06	; 6
    7a4e:	8d 91       	ld	r24, X+
    7a50:	9c 91       	ld	r25, X
    7a52:	17 97       	sbiw	r26, 0x07	; 7
    7a54:	01 96       	adiw	r24, 0x01	; 1
    7a56:	16 96       	adiw	r26, 0x06	; 6
    7a58:	8d 93       	st	X+, r24
    7a5a:	9c 93       	st	X, r25
    7a5c:	17 97       	sbiw	r26, 0x07	; 7
    7a5e:	ce 01       	movw	r24, r28
    7a60:	df 91       	pop	r29
    7a62:	cf 91       	pop	r28
    7a64:	1f 91       	pop	r17
    7a66:	0f 91       	pop	r16
    7a68:	08 95       	ret

00007a6a <printf>:
    7a6a:	cf 93       	push	r28
    7a6c:	df 93       	push	r29
    7a6e:	cd b7       	in	r28, 0x3d	; 61
    7a70:	de b7       	in	r29, 0x3e	; 62
    7a72:	ae 01       	movw	r20, r28
    7a74:	4a 5f       	subi	r20, 0xFA	; 250
    7a76:	5f 4f       	sbci	r21, 0xFF	; 255
    7a78:	fa 01       	movw	r30, r20
    7a7a:	61 91       	ld	r22, Z+
    7a7c:	71 91       	ld	r23, Z+
    7a7e:	af 01       	movw	r20, r30
    7a80:	80 91 81 26 	lds	r24, 0x2681	; 0x802681 <__iob+0x2>
    7a84:	90 91 82 26 	lds	r25, 0x2682	; 0x802682 <__iob+0x3>
    7a88:	df d8       	rcall	.-3650   	; 0x6c48 <vfprintf>
    7a8a:	df 91       	pop	r29
    7a8c:	cf 91       	pop	r28
    7a8e:	08 95       	ret

00007a90 <putchar>:
    7a90:	60 91 81 26 	lds	r22, 0x2681	; 0x802681 <__iob+0x2>
    7a94:	70 91 82 26 	lds	r23, 0x2682	; 0x802682 <__iob+0x3>
    7a98:	ac cf       	rjmp	.-168    	; 0x79f2 <fputc>

00007a9a <puts>:
    7a9a:	0f 93       	push	r16
    7a9c:	1f 93       	push	r17
    7a9e:	cf 93       	push	r28
    7aa0:	df 93       	push	r29
    7aa2:	e0 91 81 26 	lds	r30, 0x2681	; 0x802681 <__iob+0x2>
    7aa6:	f0 91 82 26 	lds	r31, 0x2682	; 0x802682 <__iob+0x3>
    7aaa:	23 81       	ldd	r18, Z+3	; 0x03
    7aac:	21 ff       	sbrs	r18, 1
    7aae:	1b c0       	rjmp	.+54     	; 0x7ae6 <puts+0x4c>
    7ab0:	8c 01       	movw	r16, r24
    7ab2:	d0 e0       	ldi	r29, 0x00	; 0
    7ab4:	c0 e0       	ldi	r28, 0x00	; 0
    7ab6:	f8 01       	movw	r30, r16
    7ab8:	81 91       	ld	r24, Z+
    7aba:	8f 01       	movw	r16, r30
    7abc:	60 91 81 26 	lds	r22, 0x2681	; 0x802681 <__iob+0x2>
    7ac0:	70 91 82 26 	lds	r23, 0x2682	; 0x802682 <__iob+0x3>
    7ac4:	db 01       	movw	r26, r22
    7ac6:	18 96       	adiw	r26, 0x08	; 8
    7ac8:	ed 91       	ld	r30, X+
    7aca:	fc 91       	ld	r31, X
    7acc:	19 97       	sbiw	r26, 0x09	; 9
    7ace:	88 23       	and	r24, r24
    7ad0:	31 f0       	breq	.+12     	; 0x7ade <puts+0x44>
    7ad2:	19 95       	eicall
    7ad4:	89 2b       	or	r24, r25
    7ad6:	79 f3       	breq	.-34     	; 0x7ab6 <puts+0x1c>
    7ad8:	df ef       	ldi	r29, 0xFF	; 255
    7ada:	cf ef       	ldi	r28, 0xFF	; 255
    7adc:	ec cf       	rjmp	.-40     	; 0x7ab6 <puts+0x1c>
    7ade:	8a e0       	ldi	r24, 0x0A	; 10
    7ae0:	19 95       	eicall
    7ae2:	89 2b       	or	r24, r25
    7ae4:	19 f0       	breq	.+6      	; 0x7aec <puts+0x52>
    7ae6:	8f ef       	ldi	r24, 0xFF	; 255
    7ae8:	9f ef       	ldi	r25, 0xFF	; 255
    7aea:	02 c0       	rjmp	.+4      	; 0x7af0 <puts+0x56>
    7aec:	8d 2f       	mov	r24, r29
    7aee:	9c 2f       	mov	r25, r28
    7af0:	df 91       	pop	r29
    7af2:	cf 91       	pop	r28
    7af4:	1f 91       	pop	r17
    7af6:	0f 91       	pop	r16
    7af8:	08 95       	ret

00007afa <__ultoa_invert>:
    7afa:	fa 01       	movw	r30, r20
    7afc:	aa 27       	eor	r26, r26
    7afe:	28 30       	cpi	r18, 0x08	; 8
    7b00:	51 f1       	breq	.+84     	; 0x7b56 <__ultoa_invert+0x5c>
    7b02:	20 31       	cpi	r18, 0x10	; 16
    7b04:	81 f1       	breq	.+96     	; 0x7b66 <__ultoa_invert+0x6c>
    7b06:	e8 94       	clt
    7b08:	6f 93       	push	r22
    7b0a:	6e 7f       	andi	r22, 0xFE	; 254
    7b0c:	6e 5f       	subi	r22, 0xFE	; 254
    7b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b10:	8f 4f       	sbci	r24, 0xFF	; 255
    7b12:	9f 4f       	sbci	r25, 0xFF	; 255
    7b14:	af 4f       	sbci	r26, 0xFF	; 255
    7b16:	b1 e0       	ldi	r27, 0x01	; 1
    7b18:	3e d0       	rcall	.+124    	; 0x7b96 <__ultoa_invert+0x9c>
    7b1a:	b4 e0       	ldi	r27, 0x04	; 4
    7b1c:	3c d0       	rcall	.+120    	; 0x7b96 <__ultoa_invert+0x9c>
    7b1e:	67 0f       	add	r22, r23
    7b20:	78 1f       	adc	r23, r24
    7b22:	89 1f       	adc	r24, r25
    7b24:	9a 1f       	adc	r25, r26
    7b26:	a1 1d       	adc	r26, r1
    7b28:	68 0f       	add	r22, r24
    7b2a:	79 1f       	adc	r23, r25
    7b2c:	8a 1f       	adc	r24, r26
    7b2e:	91 1d       	adc	r25, r1
    7b30:	a1 1d       	adc	r26, r1
    7b32:	6a 0f       	add	r22, r26
    7b34:	71 1d       	adc	r23, r1
    7b36:	81 1d       	adc	r24, r1
    7b38:	91 1d       	adc	r25, r1
    7b3a:	a1 1d       	adc	r26, r1
    7b3c:	20 d0       	rcall	.+64     	; 0x7b7e <__ultoa_invert+0x84>
    7b3e:	09 f4       	brne	.+2      	; 0x7b42 <__ultoa_invert+0x48>
    7b40:	68 94       	set
    7b42:	3f 91       	pop	r19
    7b44:	2a e0       	ldi	r18, 0x0A	; 10
    7b46:	26 9f       	mul	r18, r22
    7b48:	11 24       	eor	r1, r1
    7b4a:	30 19       	sub	r19, r0
    7b4c:	30 5d       	subi	r19, 0xD0	; 208
    7b4e:	31 93       	st	Z+, r19
    7b50:	de f6       	brtc	.-74     	; 0x7b08 <__ultoa_invert+0xe>
    7b52:	cf 01       	movw	r24, r30
    7b54:	08 95       	ret
    7b56:	46 2f       	mov	r20, r22
    7b58:	47 70       	andi	r20, 0x07	; 7
    7b5a:	40 5d       	subi	r20, 0xD0	; 208
    7b5c:	41 93       	st	Z+, r20
    7b5e:	b3 e0       	ldi	r27, 0x03	; 3
    7b60:	0f d0       	rcall	.+30     	; 0x7b80 <__ultoa_invert+0x86>
    7b62:	c9 f7       	brne	.-14     	; 0x7b56 <__ultoa_invert+0x5c>
    7b64:	f6 cf       	rjmp	.-20     	; 0x7b52 <__ultoa_invert+0x58>
    7b66:	46 2f       	mov	r20, r22
    7b68:	4f 70       	andi	r20, 0x0F	; 15
    7b6a:	40 5d       	subi	r20, 0xD0	; 208
    7b6c:	4a 33       	cpi	r20, 0x3A	; 58
    7b6e:	18 f0       	brcs	.+6      	; 0x7b76 <__ultoa_invert+0x7c>
    7b70:	49 5d       	subi	r20, 0xD9	; 217
    7b72:	31 fd       	sbrc	r19, 1
    7b74:	40 52       	subi	r20, 0x20	; 32
    7b76:	41 93       	st	Z+, r20
    7b78:	02 d0       	rcall	.+4      	; 0x7b7e <__ultoa_invert+0x84>
    7b7a:	a9 f7       	brne	.-22     	; 0x7b66 <__ultoa_invert+0x6c>
    7b7c:	ea cf       	rjmp	.-44     	; 0x7b52 <__ultoa_invert+0x58>
    7b7e:	b4 e0       	ldi	r27, 0x04	; 4
    7b80:	a6 95       	lsr	r26
    7b82:	97 95       	ror	r25
    7b84:	87 95       	ror	r24
    7b86:	77 95       	ror	r23
    7b88:	67 95       	ror	r22
    7b8a:	ba 95       	dec	r27
    7b8c:	c9 f7       	brne	.-14     	; 0x7b80 <__ultoa_invert+0x86>
    7b8e:	00 97       	sbiw	r24, 0x00	; 0
    7b90:	61 05       	cpc	r22, r1
    7b92:	71 05       	cpc	r23, r1
    7b94:	08 95       	ret
    7b96:	9b 01       	movw	r18, r22
    7b98:	ac 01       	movw	r20, r24
    7b9a:	0a 2e       	mov	r0, r26
    7b9c:	06 94       	lsr	r0
    7b9e:	57 95       	ror	r21
    7ba0:	47 95       	ror	r20
    7ba2:	37 95       	ror	r19
    7ba4:	27 95       	ror	r18
    7ba6:	ba 95       	dec	r27
    7ba8:	c9 f7       	brne	.-14     	; 0x7b9c <__ultoa_invert+0xa2>
    7baa:	62 0f       	add	r22, r18
    7bac:	73 1f       	adc	r23, r19
    7bae:	84 1f       	adc	r24, r20
    7bb0:	95 1f       	adc	r25, r21
    7bb2:	a0 1d       	adc	r26, r0
    7bb4:	08 95       	ret

00007bb6 <calloc>:
    7bb6:	0f 93       	push	r16
    7bb8:	1f 93       	push	r17
    7bba:	cf 93       	push	r28
    7bbc:	df 93       	push	r29
    7bbe:	86 9f       	mul	r24, r22
    7bc0:	80 01       	movw	r16, r0
    7bc2:	87 9f       	mul	r24, r23
    7bc4:	10 0d       	add	r17, r0
    7bc6:	96 9f       	mul	r25, r22
    7bc8:	10 0d       	add	r17, r0
    7bca:	11 24       	eor	r1, r1
    7bcc:	c8 01       	movw	r24, r16
    7bce:	a6 dc       	rcall	.-1716   	; 0x751c <malloc>
    7bd0:	ec 01       	movw	r28, r24
    7bd2:	00 97       	sbiw	r24, 0x00	; 0
    7bd4:	21 f0       	breq	.+8      	; 0x7bde <calloc+0x28>
    7bd6:	a8 01       	movw	r20, r16
    7bd8:	60 e0       	ldi	r22, 0x00	; 0
    7bda:	70 e0       	ldi	r23, 0x00	; 0
    7bdc:	06 d0       	rcall	.+12     	; 0x7bea <memset>
    7bde:	ce 01       	movw	r24, r28
    7be0:	df 91       	pop	r29
    7be2:	cf 91       	pop	r28
    7be4:	1f 91       	pop	r17
    7be6:	0f 91       	pop	r16
    7be8:	08 95       	ret

00007bea <memset>:
    7bea:	dc 01       	movw	r26, r24
    7bec:	01 c0       	rjmp	.+2      	; 0x7bf0 <memset+0x6>
    7bee:	6d 93       	st	X+, r22
    7bf0:	41 50       	subi	r20, 0x01	; 1
    7bf2:	50 40       	sbci	r21, 0x00	; 0
    7bf4:	e0 f7       	brcc	.-8      	; 0x7bee <memset+0x4>
    7bf6:	08 95       	ret

00007bf8 <_exit>:
    7bf8:	f8 94       	cli

00007bfa <__stop_program>:
    7bfa:	ff cf       	rjmp	.-2      	; 0x7bfa <__stop_program>
