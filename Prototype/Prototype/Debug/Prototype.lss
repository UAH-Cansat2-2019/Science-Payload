
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bc76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000029c  00802000  0000bc76  0000bd0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000652  0080229c  0080229c  0000bfa6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bfa6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c004  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001338  00000000  00000000  0000c048  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020580  00000000  00000000  0000d380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006e6a  00000000  00000000  0002d900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001bde9  00000000  00000000  0003476a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000054c8  00000000  00000000  00050554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00043f32  00000000  00000000  00055a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bacf  00000000  00000000  0009994e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011d8  00000000  00000000  000a5420  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009962  00000000  00000000  000a65f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c1       	rjmp	.+942    	; 0x3b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c1       	rjmp	.+938    	; 0x3b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c1       	rjmp	.+934    	; 0x3b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c1       	rjmp	.+930    	; 0x3b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c1       	rjmp	.+926    	; 0x3b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c1       	rjmp	.+922    	; 0x3b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c1       	rjmp	.+918    	; 0x3b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c1       	rjmp	.+914    	; 0x3b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c1       	rjmp	.+910    	; 0x3b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 17 32 	jmp	0x642e	; 0x642e <__vector_10>
      2c:	0c 94 47 32 	jmp	0x648e	; 0x648e <__vector_11>
      30:	c1 c1       	rjmp	.+898    	; 0x3b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 01 42 	jmp	0x8402	; 0x8402 <__vector_13>
      38:	0c 94 4f 33 	jmp	0x669e	; 0x669e <__vector_14>
      3c:	0c 94 a6 33 	jmp	0x674c	; 0x674c <__vector_15>
      40:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__vector_16>
      44:	0c 94 54 34 	jmp	0x68a8	; 0x68a8 <__vector_17>
      48:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__vector_18>
      4c:	0c 94 02 35 	jmp	0x6a04	; 0x6a04 <__vector_19>
      50:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <__vector_20>
      54:	0c 94 b0 35 	jmp	0x6b60	; 0x6b60 <__vector_21>
      58:	0c 94 07 36 	jmp	0x6c0e	; 0x6c0e <__vector_22>
      5c:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__vector_23>
      60:	a9 c1       	rjmp	.+850    	; 0x3b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__vector_25>
      68:	a5 c1       	rjmp	.+842    	; 0x3b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c1       	rjmp	.+838    	; 0x3b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c1       	rjmp	.+834    	; 0x3b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c1       	rjmp	.+830    	; 0x3b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c1       	rjmp	.+826    	; 0x3b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c1       	rjmp	.+822    	; 0x3b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	99 c1       	rjmp	.+818    	; 0x3b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	97 c1       	rjmp	.+814    	; 0x3b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	95 c1       	rjmp	.+810    	; 0x3b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 c1       	rjmp	.+806    	; 0x3b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	91 c1       	rjmp	.+802    	; 0x3b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c1       	rjmp	.+798    	; 0x3b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c1       	rjmp	.+794    	; 0x3b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	64 c5       	rjmp	.+2760   	; 0xb66 <__vector_39>
      9e:	00 00       	nop
      a0:	ee c5       	rjmp	.+3036   	; 0xc7e <__vector_40>
      a2:	00 00       	nop
      a4:	78 c6       	rjmp	.+3312   	; 0xd96 <__vector_41>
      a6:	00 00       	nop
      a8:	02 c7       	rjmp	.+3588   	; 0xeae <__vector_42>
      aa:	00 00       	nop
      ac:	83 c1       	rjmp	.+774    	; 0x3b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	81 c1       	rjmp	.+770    	; 0x3b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7f c1       	rjmp	.+766    	; 0x3b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 99 42 	jmp	0x8532	; 0x8532 <__vector_46>
      bc:	0c 94 1b 3a 	jmp	0x7436	; 0x7436 <__vector_47>
      c0:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__vector_48>
      c4:	0c 94 c9 3a 	jmp	0x7592	; 0x7592 <__vector_49>
      c8:	0c 94 20 3b 	jmp	0x7640	; 0x7640 <__vector_50>
      cc:	0c 94 77 3b 	jmp	0x76ee	; 0x76ee <__vector_51>
      d0:	0c 94 ce 3b 	jmp	0x779c	; 0x779c <__vector_52>
      d4:	0c 94 25 3c 	jmp	0x784a	; 0x784a <__vector_53>
      d8:	0c 94 7c 3c 	jmp	0x78f8	; 0x78f8 <__vector_54>
      dc:	0c 94 d3 3c 	jmp	0x79a6	; 0x79a6 <__vector_55>
      e0:	0c 94 2a 3d 	jmp	0x7a54	; 0x7a54 <__vector_56>
      e4:	67 c1       	rjmp	.+718    	; 0x3b4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	65 c1       	rjmp	.+714    	; 0x3b4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	63 c1       	rjmp	.+710    	; 0x3b4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	61 c1       	rjmp	.+706    	; 0x3b4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	5f c1       	rjmp	.+702    	; 0x3b4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	5d c1       	rjmp	.+698    	; 0x3b4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	5b c1       	rjmp	.+694    	; 0x3b4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	59 c1       	rjmp	.+690    	; 0x3b4 <__bad_interrupt>
     102:	00 00       	nop
     104:	57 c1       	rjmp	.+686    	; 0x3b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c1       	rjmp	.+682    	; 0x3b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c1       	rjmp	.+678    	; 0x3b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c1       	rjmp	.+674    	; 0x3b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c1       	rjmp	.+670    	; 0x3b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	4d c1       	rjmp	.+666    	; 0x3b4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f4 c2       	rjmp	.+1512   	; 0x706 <__vector_71>
     11e:	00 00       	nop
     120:	7e c3       	rjmp	.+1788   	; 0x81e <__vector_72>
     122:	00 00       	nop
     124:	08 c4       	rjmp	.+2064   	; 0x936 <__vector_73>
     126:	00 00       	nop
     128:	92 c4       	rjmp	.+2340   	; 0xa4e <__vector_74>
     12a:	00 00       	nop
     12c:	43 c1       	rjmp	.+646    	; 0x3b4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 4d 42 	jmp	0x849a	; 0x849a <__vector_76>
     134:	0c 94 b5 36 	jmp	0x6d6a	; 0x6d6a <__vector_77>
     138:	0c 94 0c 37 	jmp	0x6e18	; 0x6e18 <__vector_78>
     13c:	0c 94 63 37 	jmp	0x6ec6	; 0x6ec6 <__vector_79>
     140:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__vector_80>
     144:	0c 94 11 38 	jmp	0x7022	; 0x7022 <__vector_81>
     148:	0c 94 68 38 	jmp	0x70d0	; 0x70d0 <__vector_82>
     14c:	0c 94 bf 38 	jmp	0x717e	; 0x717e <__vector_83>
     150:	0c 94 16 39 	jmp	0x722c	; 0x722c <__vector_84>
     154:	0c 94 6d 39 	jmp	0x72da	; 0x72da <__vector_85>
     158:	0c 94 c4 39 	jmp	0x7388	; 0x7388 <__vector_86>
     15c:	2b c1       	rjmp	.+598    	; 0x3b4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	29 c1       	rjmp	.+594    	; 0x3b4 <__bad_interrupt>
     162:	00 00       	nop
     164:	27 c1       	rjmp	.+590    	; 0x3b4 <__bad_interrupt>
     166:	00 00       	nop
     168:	25 c1       	rjmp	.+586    	; 0x3b4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	23 c1       	rjmp	.+582    	; 0x3b4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	21 c1       	rjmp	.+578    	; 0x3b4 <__bad_interrupt>
     172:	00 00       	nop
     174:	1f c1       	rjmp	.+574    	; 0x3b4 <__bad_interrupt>
     176:	00 00       	nop
     178:	1d c1       	rjmp	.+570    	; 0x3b4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	1b c1       	rjmp	.+566    	; 0x3b4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	19 c1       	rjmp	.+562    	; 0x3b4 <__bad_interrupt>
     182:	00 00       	nop
     184:	17 c1       	rjmp	.+558    	; 0x3b4 <__bad_interrupt>
     186:	00 00       	nop
     188:	15 c1       	rjmp	.+554    	; 0x3b4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	13 c1       	rjmp	.+550    	; 0x3b4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	11 c1       	rjmp	.+546    	; 0x3b4 <__bad_interrupt>
     192:	00 00       	nop
     194:	0f c1       	rjmp	.+542    	; 0x3b4 <__bad_interrupt>
     196:	00 00       	nop
     198:	0d c1       	rjmp	.+538    	; 0x3b4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	0b c1       	rjmp	.+534    	; 0x3b4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	09 c1       	rjmp	.+530    	; 0x3b4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	07 c1       	rjmp	.+526    	; 0x3b4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	05 c1       	rjmp	.+522    	; 0x3b4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 e5 42 	jmp	0x85ca	; 0x85ca <__vector_107>
     1b0:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <__vector_108>
     1b4:	0c 94 d8 3d 	jmp	0x7bb0	; 0x7bb0 <__vector_109>
     1b8:	0c 94 2f 3e 	jmp	0x7c5e	; 0x7c5e <__vector_110>
     1bc:	0c 94 86 3e 	jmp	0x7d0c	; 0x7d0c <__vector_111>
     1c0:	0c 94 dd 3e 	jmp	0x7dba	; 0x7dba <__vector_112>
     1c4:	0c 94 34 3f 	jmp	0x7e68	; 0x7e68 <__vector_113>
     1c8:	0c 94 8b 3f 	jmp	0x7f16	; 0x7f16 <__vector_114>
     1cc:	0c 94 e2 3f 	jmp	0x7fc4	; 0x7fc4 <__vector_115>
     1d0:	0c 94 39 40 	jmp	0x8072	; 0x8072 <__vector_116>
     1d4:	0c 94 90 40 	jmp	0x8120	; 0x8120 <__vector_117>
     1d8:	ed c0       	rjmp	.+474    	; 0x3b4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	eb c0       	rjmp	.+470    	; 0x3b4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e9 c0       	rjmp	.+466    	; 0x3b4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	e7 c0       	rjmp	.+462    	; 0x3b4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__vector_122>
     1ec:	e3 c0       	rjmp	.+454    	; 0x3b4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__vector_124>
     1f4:	df c0       	rjmp	.+446    	; 0x3b4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	dd c0       	rjmp	.+442    	; 0x3b4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	fa 0b       	sbc	r31, r26
     1fe:	1b 0c       	add	r1, r11
     200:	3c 0c       	add	r3, r12
     202:	5d 0c       	add	r5, r13
     204:	7e 0c       	add	r7, r14
     206:	9f 0c       	add	r9, r15
     208:	c0 0c       	add	r12, r0
     20a:	e1 0c       	add	r14, r1
     20c:	08 00       	.word	0x0008	; ????
     20e:	00 00       	nop
     210:	be 92       	st	-X, r11
     212:	24 49       	sbci	r18, 0x94	; 148
     214:	12 3e       	cpi	r17, 0xE2	; 226
     216:	ab aa       	std	Y+51, r10	; 0x33
     218:	aa 2a       	or	r10, r26
     21a:	be cd       	rjmp	.-1156   	; 0xfffffd98 <__eeprom_end+0xff7efd98>
     21c:	cc cc       	rjmp	.-1640   	; 0xfffffbb6 <__eeprom_end+0xff7efbb6>
     21e:	4c 3e       	cpi	r20, 0xEC	; 236
     220:	00 00       	nop
     222:	00 80       	ld	r0, Z
     224:	be ab       	std	Y+54, r27	; 0x36
     226:	aa aa       	std	Y+50, r10	; 0x32
     228:	aa 3e       	cpi	r26, 0xEA	; 234
     22a:	00 00       	nop
     22c:	00 00       	nop
     22e:	bf 00       	.word	0x00bf	; ????
     230:	00 00       	nop
     232:	80 3f       	cpi	r24, 0xF0	; 240
     234:	00 00       	nop
     236:	00 00       	nop
     238:	00 08       	sbc	r0, r0
     23a:	41 78       	andi	r20, 0x81	; 129
     23c:	d3 bb       	out	0x13, r29	; 19
     23e:	43 87       	std	Z+11, r20	; 0x0b
     240:	d1 13       	cpse	r29, r17
     242:	3d 19       	sub	r19, r13
     244:	0e 3c       	cpi	r16, 0xCE	; 206
     246:	c3 bd       	out	0x23, r28	; 35
     248:	42 82       	std	Z+2, r4	; 0x02
     24a:	ad 2b       	or	r26, r29
     24c:	3e 68       	ori	r19, 0x8E	; 142
     24e:	ec 82       	std	Y+4, r14	; 0x04
     250:	76 be       	out	0x36, r7	; 54
     252:	d9 8f       	std	Y+25, r29	; 0x19
     254:	e1 a9       	ldd	r30, Z+49	; 0x31
     256:	3e 4c       	sbci	r19, 0xCE	; 206
     258:	80 ef       	ldi	r24, 0xF0	; 240
     25a:	ff be       	out	0x3f, r15	; 63
     25c:	01 c4       	rjmp	.+2050   	; 0xa60 <__vector_74+0x12>
     25e:	ff 7f       	andi	r31, 0xFF	; 255
     260:	3f 00       	.word	0x003f	; ????
     262:	00 00       	nop
	...

00000266 <__trampolines_end>:
     266:	6e 61       	ori	r22, 0x1E	; 30
     268:	6e 00       	.word	0x006e	; ????

0000026a <__c.2332>:
     26a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     27a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     28a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     29a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     30a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     31a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     32a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     33a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     34a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     35a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df e3       	ldi	r29, 0x3F	; 63
     372:	de bf       	out	0x3e, r29	; 62
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	0c bf       	out	0x3c, r16	; 60
     378:	18 be       	out	0x38, r1	; 56
     37a:	19 be       	out	0x39, r1	; 57
     37c:	1a be       	out	0x3a, r1	; 58
     37e:	1b be       	out	0x3b, r1	; 59

00000380 <__do_copy_data>:
     380:	12 e2       	ldi	r17, 0x22	; 34
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	b0 e2       	ldi	r27, 0x20	; 32
     386:	e6 e7       	ldi	r30, 0x76	; 118
     388:	fc eb       	ldi	r31, 0xBC	; 188
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	0b bf       	out	0x3b, r16	; 59
     38e:	02 c0       	rjmp	.+4      	; 0x394 <__do_copy_data+0x14>
     390:	07 90       	elpm	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	ac 39       	cpi	r26, 0x9C	; 156
     396:	b1 07       	cpc	r27, r17
     398:	d9 f7       	brne	.-10     	; 0x390 <__do_copy_data+0x10>
     39a:	1b be       	out	0x3b, r1	; 59

0000039c <__do_clear_bss>:
     39c:	28 e2       	ldi	r18, 0x28	; 40
     39e:	ac e9       	ldi	r26, 0x9C	; 156
     3a0:	b2 e2       	ldi	r27, 0x22	; 34
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <.do_clear_bss_start>

000003a4 <.do_clear_bss_loop>:
     3a4:	1d 92       	st	X+, r1

000003a6 <.do_clear_bss_start>:
     3a6:	ae 3e       	cpi	r26, 0xEE	; 238
     3a8:	b2 07       	cpc	r27, r18
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <.do_clear_bss_loop>
     3ac:	0e 94 77 50 	call	0xa0ee	; 0xa0ee <main>
     3b0:	0c 94 39 5e 	jmp	0xbc72	; 0xbc72 <_exit>

000003b4 <__bad_interrupt>:
     3b4:	25 ce       	rjmp	.-950    	; 0x0 <__vectors>

000003b6 <cpu_irq_save>:
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	1f 92       	push	r1
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	8f e3       	ldi	r24, 0x3F	; 63
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	f8 94       	cli
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <cpu_irq_restore>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	89 83       	std	Y+1, r24	; 0x01
     3e2:	8f e3       	ldi	r24, 0x3F	; 63
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	29 81       	ldd	r18, Y+1	; 0x01
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
     3ec:	00 00       	nop
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <sleepmgr_lock_mode>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	1f 92       	push	r1
     3fc:	1f 92       	push	r1
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	8a 83       	std	Y+2, r24	; 0x02
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	88 2f       	mov	r24, r24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 53       	subi	r24, 0x30	; 48
     40c:	97 4d       	sbci	r25, 0xD7	; 215
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	8f 3f       	cpi	r24, 0xFF	; 255
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	ff cf       	rjmp	.-2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     418:	ce df       	rcall	.-100    	; 0x3b6 <cpu_irq_save>
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	88 2f       	mov	r24, r24
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	9c 01       	movw	r18, r24
     424:	20 53       	subi	r18, 0x30	; 48
     426:	37 4d       	sbci	r19, 0xD7	; 215
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	2f 5f       	subi	r18, 0xFF	; 255
     42e:	80 53       	subi	r24, 0x30	; 48
     430:	97 4d       	sbci	r25, 0xD7	; 215
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	ce df       	rcall	.-100    	; 0x3d6 <cpu_irq_restore>
     43a:	00 00       	nop
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <sleepmgr_unlock_mode>:
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	1f 92       	push	r1
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	8a 83       	std	Y+2, r24	; 0x02
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 53       	subi	r24, 0x30	; 48
     45c:	97 4d       	sbci	r25, 0xD7	; 215
     45e:	fc 01       	movw	r30, r24
     460:	80 81       	ld	r24, Z
     462:	88 23       	and	r24, r24
     464:	09 f4       	brne	.+2      	; 0x468 <sleepmgr_unlock_mode+0x22>
     466:	ff cf       	rjmp	.-2      	; 0x466 <sleepmgr_unlock_mode+0x20>
     468:	a6 df       	rcall	.-180    	; 0x3b6 <cpu_irq_save>
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	9c 01       	movw	r18, r24
     474:	20 53       	subi	r18, 0x30	; 48
     476:	37 4d       	sbci	r19, 0xD7	; 215
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	80 53       	subi	r24, 0x30	; 48
     480:	97 4d       	sbci	r25, 0xD7	; 215
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	a6 df       	rcall	.-180    	; 0x3d6 <cpu_irq_restore>
     48a:	00 00       	nop
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	81 15       	cp	r24, r1
     4ac:	92 40       	sbci	r25, 0x02	; 2
     4ae:	69 f4       	brne	.+26     	; 0x4ca <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     4b0:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <__data_end>
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	98 0f       	add	r25, r24
     4b8:	90 93 9c 22 	sts	0x229C, r25	; 0x80229c <__data_end>
     4bc:	88 23       	and	r24, r24
     4be:	b1 f4       	brne	.+44     	; 0x4ec <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	80 34       	cpi	r24, 0x40	; 64
     4d0:	92 40       	sbci	r25, 0x02	; 2
     4d2:	61 f4       	brne	.+24     	; 0x4ec <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     4d4:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <adcb_enable_count>
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	98 0f       	add	r25, r24
     4dc:	90 93 9d 22 	sts	0x229D, r25	; 0x80229d <adcb_enable_count>
     4e0:	88 23       	and	r24, r24
     4e2:	21 f4       	brne	.+8      	; 0x4ec <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4e4:	62 e0       	ldi	r22, 0x02	; 2
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	81 15       	cp	r24, r1
     50e:	92 40       	sbci	r25, 0x02	; 2
     510:	71 f4       	brne	.+28     	; 0x52e <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     512:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <__data_end>
     516:	81 50       	subi	r24, 0x01	; 1
     518:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <__data_end>
     51c:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <__data_end>
     520:	88 23       	and	r24, r24
     522:	b9 f4       	brne	.+46     	; 0x552 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     524:	62 e0       	ldi	r22, 0x02	; 2
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 ab 30 	call	0x6156	; 0x6156 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     52c:	12 c0       	rjmp	.+36     	; 0x552 <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	80 34       	cpi	r24, 0x40	; 64
     534:	92 40       	sbci	r25, 0x02	; 2
     536:	69 f4       	brne	.+26     	; 0x552 <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     538:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <adcb_enable_count>
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	80 93 9d 22 	sts	0x229D, r24	; 0x80229d <adcb_enable_count>
     542:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <adcb_enable_count>
     546:	88 23       	and	r24, r24
     548:	21 f4       	brne	.+8      	; 0x552 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	0e 94 ab 30 	call	0x6156	; 0x6156 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     552:	00 00       	nop
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	00 d0       	rcall	.+0      	; 0x564 <adc_enable+0x6>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	8a 83       	std	Y+2, r24	; 0x02
     56a:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     56c:	24 df       	rcall	.-440    	; 0x3b6 <cpu_irq_save>
     56e:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	9b 81       	ldd	r25, Y+3	; 0x03
     574:	90 df       	rcall	.-224    	; 0x496 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	9b 81       	ldd	r25, Y+3	; 0x03
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	28 2f       	mov	r18, r24
     580:	21 60       	ori	r18, 0x01	; 1
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	9b 81       	ldd	r25, Y+3	; 0x03
     586:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
     588:	20 83       	st	Z, r18
     58a:	89 81       	ldd	r24, Y+1	; 0x01

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
     58c:	24 df       	rcall	.-440    	; 0x3d6 <cpu_irq_restore>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	32 df       	rcall	.-412    	; 0x3f6 <sleepmgr_lock_mode>
}
     592:	00 00       	nop
     594:	23 96       	adiw	r28, 0x03	; 3
     596:	cd bf       	out	0x3d, r28	; 61
     598:	de bf       	out	0x3e, r29	; 62
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <adc_disable+0x6>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     5ae:	03 df       	rcall	.-506    	; 0x3b6 <cpu_irq_save>
     5b0:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA &= ~ADC_ENABLE_bm;
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	9b 81       	ldd	r25, Y+3	; 0x03
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	28 2f       	mov	r18, r24
     5bc:	2e 7f       	andi	r18, 0xFE	; 254
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ca:	96 df       	rcall	.-212    	; 0x4f8 <adc_disable_clock>
	cpu_irq_restore(flags);
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	03 df       	rcall	.-506    	; 0x3d6 <cpu_irq_restore>

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	39 df       	rcall	.-398    	; 0x446 <sleepmgr_unlock_mode>
     5d4:	00 00       	nop
}
     5d6:	23 96       	adiw	r28, 0x03	; 3
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     5ec:	8f e3       	ldi	r24, 0x3F	; 63
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     5f6:	f8 94       	cli
	return flags;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     60e:	8f e3       	ldi	r24, 0x3F	; 63
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	29 81       	ldd	r18, Y+1	; 0x01
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
}
     618:	00 00       	nop
     61a:	0f 90       	pop	r0
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	bc 01       	movw	r22, r24
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 4f 31 	call	0x629e	; 0x629e <nvm_read_byte>
}
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <adc_get_calibration_data+0x6>
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	91 05       	cpc	r25, r1
     65a:	e9 f0       	breq	.+58     	; 0x696 <adc_get_calibration_data+0x52>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	91 05       	cpc	r25, r1
     660:	89 f1       	breq	.+98     	; 0x6c4 <adc_get_calibration_data+0x80>
     662:	89 2b       	or	r24, r25
     664:	09 f0       	breq	.+2      	; 0x668 <adc_get_calibration_data+0x24>
     666:	45 c0       	rjmp	.+138    	; 0x6f2 <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     668:	81 e2       	ldi	r24, 0x21	; 33
     66a:	db df       	rcall	.-74     	; 0x622 <nvm_read_production_signature_row>
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	98 2f       	mov	r25, r24
     67a:	88 27       	eor	r24, r24
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
     680:	80 e2       	ldi	r24, 0x20	; 32
     682:	cf df       	rcall	.-98     	; 0x622 <nvm_read_production_signature_row>
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	29 81       	ldd	r18, Y+1	; 0x01
     68a:	3a 81       	ldd	r19, Y+2	; 0x02
     68c:	82 2b       	or	r24, r18
     68e:	93 2b       	or	r25, r19
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     694:	30 c0       	rjmp	.+96     	; 0x6f6 <adc_get_calibration_data+0xb2>
     696:	85 e2       	ldi	r24, 0x25	; 37
     698:	c4 df       	rcall	.-120    	; 0x622 <nvm_read_production_signature_row>
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	98 2f       	mov	r25, r24
     6a8:	88 27       	eor	r24, r24
     6aa:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
     6ac:	9a 83       	std	Y+2, r25	; 0x02
     6ae:	84 e2       	ldi	r24, 0x24	; 36
     6b0:	b8 df       	rcall	.-144    	; 0x622 <nvm_read_production_signature_row>
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ba:	82 2b       	or	r24, r18
     6bc:	93 2b       	or	r25, r19
     6be:	89 83       	std	Y+1, r24	; 0x01
		break;
     6c0:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
     6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <adc_get_calibration_data+0xb2>
     6c4:	8f e2       	ldi	r24, 0x2F	; 47
     6c6:	ad df       	rcall	.-166    	; 0x622 <nvm_read_production_signature_row>
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	98 2f       	mov	r25, r24
     6d6:	88 27       	eor	r24, r24
     6d8:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	8e e2       	ldi	r24, 0x2E	; 46
     6de:	a1 df       	rcall	.-190    	; 0x622 <nvm_read_production_signature_row>
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	29 81       	ldd	r18, Y+1	; 0x01
     6e6:	3a 81       	ldd	r19, Y+2	; 0x02
     6e8:	82 2b       	or	r24, r18
     6ea:	93 2b       	or	r25, r19
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	9a 83       	std	Y+2, r25	; 0x02
		break;
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     6f2:	19 82       	std	Y+1, r1	; 0x01
     6f4:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6fa:	23 96       	adiw	r28, 0x03	; 3
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     716:	0f 92       	push	r0
     718:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     71c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     720:	0f 92       	push	r0
     722:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     726:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     72a:	0f 92       	push	r0
     72c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     730:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     734:	0f 92       	push	r0
     736:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     73a:	2f 93       	push	r18
     73c:	3f 93       	push	r19
     73e:	4f 93       	push	r20
     740:	5f 93       	push	r21
     742:	6f 93       	push	r22
     744:	7f 93       	push	r23
     746:	8f 93       	push	r24
     748:	9f 93       	push	r25
     74a:	af 93       	push	r26
     74c:	bf 93       	push	r27
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	00 d0       	rcall	.+0      	; 0x758 <__vector_71+0x52>
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     75e:	20 91 11 23 	lds	r18, 0x2311	; 0x802311 <adca_callback>
     762:	30 91 12 23 	lds	r19, 0x2312	; 0x802312 <adca_callback+0x1>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     772:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	83 70       	andi	r24, 0x03	; 3
     77c:	99 27       	eor	r25, r25
     77e:	89 2b       	or	r24, r25
     780:	39 f4       	brne	.+14     	; 0x790 <__vector_71+0x8a>
		index += 2;
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	8e 5f       	subi	r24, 0xFE	; 254
     786:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	86 95       	lsr	r24
     78c:	86 95       	lsr	r24
     78e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     790:	8b 81       	ldd	r24, Y+3	; 0x03
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	81 70       	andi	r24, 0x01	; 1
     798:	99 27       	eor	r25, r25
     79a:	89 2b       	or	r24, r25
     79c:	19 f4       	brne	.+6      	; 0x7a4 <__vector_71+0x9e>
		index++;
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	ac 01       	movw	r20, r24
     7aa:	40 5e       	subi	r20, 0xE0	; 224
     7ac:	5f 4f       	sbci	r21, 0xFF	; 255
     7ae:	8c 81       	ldd	r24, Y+4	; 0x04
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	84 0f       	add	r24, r20
     7c2:	95 1f       	adc	r25, r21
     7c4:	fc 01       	movw	r30, r24
     7c6:	84 81       	ldd	r24, Z+4	; 0x04
     7c8:	95 81       	ldd	r25, Z+5	; 0x05
     7ca:	ac 01       	movw	r20, r24
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	f9 01       	movw	r30, r18
     7d4:	19 95       	eicall
}
     7d6:	00 00       	nop
     7d8:	24 96       	adiw	r28, 0x04	; 4
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     800:	0f 90       	pop	r0
     802:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     806:	0f 90       	pop	r0
     808:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     80c:	0f 90       	pop	r0
     80e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     812:	0f 90       	pop	r0
     814:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     82e:	0f 92       	push	r0
     830:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     834:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     838:	0f 92       	push	r0
     83a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     83e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     842:	0f 92       	push	r0
     844:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     848:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     84c:	0f 92       	push	r0
     84e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     852:	2f 93       	push	r18
     854:	3f 93       	push	r19
     856:	4f 93       	push	r20
     858:	5f 93       	push	r21
     85a:	6f 93       	push	r22
     85c:	7f 93       	push	r23
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <__vector_72+0x52>
     870:	1f 92       	push	r1
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     876:	20 91 11 23 	lds	r18, 0x2311	; 0x802311 <adca_callback>
     87a:	30 91 12 23 	lds	r19, 0x2312	; 0x802312 <adca_callback+0x1>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     88a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	83 70       	andi	r24, 0x03	; 3
     894:	99 27       	eor	r25, r25
     896:	89 2b       	or	r24, r25
     898:	39 f4       	brne	.+14     	; 0x8a8 <__vector_72+0x8a>
		index += 2;
     89a:	8c 81       	ldd	r24, Y+4	; 0x04
     89c:	8e 5f       	subi	r24, 0xFE	; 254
     89e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	86 95       	lsr	r24
     8a4:	86 95       	lsr	r24
     8a6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	81 70       	andi	r24, 0x01	; 1
     8b0:	99 27       	eor	r25, r25
     8b2:	89 2b       	or	r24, r25
     8b4:	19 f4       	brne	.+6      	; 0x8bc <__vector_72+0x9e>
		index++;
     8b6:	8c 81       	ldd	r24, Y+4	; 0x04
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	ac 01       	movw	r20, r24
     8c2:	40 5e       	subi	r20, 0xE0	; 224
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	8c 81       	ldd	r24, Y+4	; 0x04
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	84 0f       	add	r24, r20
     8da:	95 1f       	adc	r25, r21
     8dc:	fc 01       	movw	r30, r24
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	95 81       	ldd	r25, Z+5	; 0x05
     8e2:	ac 01       	movw	r20, r24
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	f9 01       	movw	r30, r18
     8ec:	19 95       	eicall
}
     8ee:	00 00       	nop
     8f0:	24 96       	adiw	r28, 0x04	; 4
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	bf 91       	pop	r27
     900:	af 91       	pop	r26
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	7f 91       	pop	r23
     908:	6f 91       	pop	r22
     90a:	5f 91       	pop	r21
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     918:	0f 90       	pop	r0
     91a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     91e:	0f 90       	pop	r0
     920:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     924:	0f 90       	pop	r0
     926:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     92a:	0f 90       	pop	r0
     92c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     946:	0f 92       	push	r0
     948:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     94c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     950:	0f 92       	push	r0
     952:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     956:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     95a:	0f 92       	push	r0
     95c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     960:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     964:	0f 92       	push	r0
     966:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	4f 93       	push	r20
     970:	5f 93       	push	r21
     972:	6f 93       	push	r22
     974:	7f 93       	push	r23
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	00 d0       	rcall	.+0      	; 0x988 <__vector_73+0x52>
     988:	1f 92       	push	r1
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     98e:	20 91 11 23 	lds	r18, 0x2311	; 0x802311 <adca_callback>
     992:	30 91 12 23 	lds	r19, 0x2312	; 0x802312 <adca_callback+0x1>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     9a2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	83 70       	andi	r24, 0x03	; 3
     9ac:	99 27       	eor	r25, r25
     9ae:	89 2b       	or	r24, r25
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <__vector_73+0x8a>
		index += 2;
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	8e 5f       	subi	r24, 0xFE	; 254
     9b6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	81 70       	andi	r24, 0x01	; 1
     9c8:	99 27       	eor	r25, r25
     9ca:	89 2b       	or	r24, r25
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <__vector_73+0x9e>
		index++;
     9ce:	8c 81       	ldd	r24, Y+4	; 0x04
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	ac 01       	movw	r20, r24
     9da:	40 5e       	subi	r20, 0xE0	; 224
     9dc:	5f 4f       	sbci	r21, 0xFF	; 255
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	84 0f       	add	r24, r20
     9f2:	95 1f       	adc	r25, r21
     9f4:	fc 01       	movw	r30, r24
     9f6:	84 81       	ldd	r24, Z+4	; 0x04
     9f8:	95 81       	ldd	r25, Z+5	; 0x05
     9fa:	ac 01       	movw	r20, r24
     9fc:	64 e0       	ldi	r22, 0x04	; 4
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	f9 01       	movw	r30, r18
     a04:	19 95       	eicall
}
     a06:	00 00       	nop
     a08:	24 96       	adiw	r28, 0x04	; 4
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a30:	0f 90       	pop	r0
     a32:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a36:	0f 90       	pop	r0
     a38:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a3c:	0f 90       	pop	r0
     a3e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a42:	0f 90       	pop	r0
     a44:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a5e:	0f 92       	push	r0
     a60:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a64:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a68:	0f 92       	push	r0
     a6a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a6e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a72:	0f 92       	push	r0
     a74:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a78:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a7c:	0f 92       	push	r0
     a7e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <__vector_74+0x52>
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     aa6:	20 91 11 23 	lds	r18, 0x2311	; 0x802311 <adca_callback>
     aaa:	30 91 12 23 	lds	r19, 0x2312	; 0x802312 <adca_callback+0x1>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	9a 83       	std	Y+2, r25	; 0x02
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     aba:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	83 70       	andi	r24, 0x03	; 3
     ac4:	99 27       	eor	r25, r25
     ac6:	89 2b       	or	r24, r25
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__vector_74+0x8a>
		index += 2;
     aca:	8c 81       	ldd	r24, Y+4	; 0x04
     acc:	8e 5f       	subi	r24, 0xFE	; 254
     ace:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	86 95       	lsr	r24
     ad4:	86 95       	lsr	r24
     ad6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	88 2f       	mov	r24, r24
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	81 70       	andi	r24, 0x01	; 1
     ae0:	99 27       	eor	r25, r25
     ae2:	89 2b       	or	r24, r25
     ae4:	19 f4       	brne	.+6      	; 0xaec <__vector_74+0x9e>
		index++;
     ae6:	8c 81       	ldd	r24, Y+4	; 0x04
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	ac 01       	movw	r20, r24
     af2:	40 5e       	subi	r20, 0xE0	; 224
     af4:	5f 4f       	sbci	r21, 0xFF	; 255
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	88 2f       	mov	r24, r24
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	84 0f       	add	r24, r20
     b0a:	95 1f       	adc	r25, r21
     b0c:	fc 01       	movw	r30, r24
     b0e:	84 81       	ldd	r24, Z+4	; 0x04
     b10:	95 81       	ldd	r25, Z+5	; 0x05
     b12:	ac 01       	movw	r20, r24
     b14:	68 e0       	ldi	r22, 0x08	; 8
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	f9 01       	movw	r30, r18
     b1c:	19 95       	eicall
}
     b1e:	00 00       	nop
     b20:	24 96       	adiw	r28, 0x04	; 4
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b48:	0f 90       	pop	r0
     b4a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b4e:	0f 90       	pop	r0
     b50:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b54:	0f 90       	pop	r0
     b56:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b5a:	0f 90       	pop	r0
     b5c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b76:	0f 92       	push	r0
     b78:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b7c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b80:	0f 92       	push	r0
     b82:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b86:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b8a:	0f 92       	push	r0
     b8c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b90:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b94:	0f 92       	push	r0
     b96:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b9a:	2f 93       	push	r18
     b9c:	3f 93       	push	r19
     b9e:	4f 93       	push	r20
     ba0:	5f 93       	push	r21
     ba2:	6f 93       	push	r22
     ba4:	7f 93       	push	r23
     ba6:	8f 93       	push	r24
     ba8:	9f 93       	push	r25
     baa:	af 93       	push	r26
     bac:	bf 93       	push	r27
     bae:	ef 93       	push	r30
     bb0:	ff 93       	push	r31
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <__vector_39+0x52>
     bb8:	1f 92       	push	r1
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     bbe:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <adcb_callback>
     bc2:	30 91 10 23 	lds	r19, 0x2310	; 0x802310 <adcb_callback+0x1>
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     bd2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	83 70       	andi	r24, 0x03	; 3
     bdc:	99 27       	eor	r25, r25
     bde:	89 2b       	or	r24, r25
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__vector_39+0x8a>
		index += 2;
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	8e 5f       	subi	r24, 0xFE	; 254
     be6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	86 95       	lsr	r24
     bec:	86 95       	lsr	r24
     bee:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	99 27       	eor	r25, r25
     bfa:	89 2b       	or	r24, r25
     bfc:	19 f4       	brne	.+6      	; 0xc04 <__vector_39+0x9e>
		index++;
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	ac 01       	movw	r20, r24
     c0a:	40 5e       	subi	r20, 0xE0	; 224
     c0c:	5f 4f       	sbci	r21, 0xFF	; 255
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	84 0f       	add	r24, r20
     c22:	95 1f       	adc	r25, r21
     c24:	fc 01       	movw	r30, r24
     c26:	84 81       	ldd	r24, Z+4	; 0x04
     c28:	95 81       	ldd	r25, Z+5	; 0x05
     c2a:	ac 01       	movw	r20, r24
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	80 e4       	ldi	r24, 0x40	; 64
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	f9 01       	movw	r30, r18
     c34:	19 95       	eicall
}
     c36:	00 00       	nop
     c38:	24 96       	adiw	r28, 0x04	; 4
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c60:	0f 90       	pop	r0
     c62:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c66:	0f 90       	pop	r0
     c68:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c6c:	0f 90       	pop	r0
     c6e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c72:	0f 90       	pop	r0
     c74:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c8e:	0f 92       	push	r0
     c90:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c94:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c98:	0f 92       	push	r0
     c9a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c9e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ca2:	0f 92       	push	r0
     ca4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ca8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cac:	0f 92       	push	r0
     cae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <__vector_40+0x52>
     cd0:	1f 92       	push	r1
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     cd6:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <adcb_callback>
     cda:	30 91 10 23 	lds	r19, 0x2310	; 0x802310 <adcb_callback+0x1>
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cea:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	83 70       	andi	r24, 0x03	; 3
     cf4:	99 27       	eor	r25, r25
     cf6:	89 2b       	or	r24, r25
     cf8:	39 f4       	brne	.+14     	; 0xd08 <__vector_40+0x8a>
		index += 2;
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	8e 5f       	subi	r24, 0xFE	; 254
     cfe:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	86 95       	lsr	r24
     d04:	86 95       	lsr	r24
     d06:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	81 70       	andi	r24, 0x01	; 1
     d10:	99 27       	eor	r25, r25
     d12:	89 2b       	or	r24, r25
     d14:	19 f4       	brne	.+6      	; 0xd1c <__vector_40+0x9e>
		index++;
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	ac 01       	movw	r20, r24
     d22:	40 5e       	subi	r20, 0xE0	; 224
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	84 0f       	add	r24, r20
     d3a:	95 1f       	adc	r25, r21
     d3c:	fc 01       	movw	r30, r24
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	95 81       	ldd	r25, Z+5	; 0x05
     d42:	ac 01       	movw	r20, r24
     d44:	62 e0       	ldi	r22, 0x02	; 2
     d46:	80 e4       	ldi	r24, 0x40	; 64
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	f9 01       	movw	r30, r18
     d4c:	19 95       	eicall
}
     d4e:	00 00       	nop
     d50:	24 96       	adiw	r28, 0x04	; 4
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	0f 90       	pop	r0
     d74:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d78:	0f 90       	pop	r0
     d7a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d7e:	0f 90       	pop	r0
     d80:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d84:	0f 90       	pop	r0
     d86:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d8a:	0f 90       	pop	r0
     d8c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     da6:	0f 92       	push	r0
     da8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dac:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     db0:	0f 92       	push	r0
     db2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     db6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dba:	0f 92       	push	r0
     dbc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dc0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dc4:	0f 92       	push	r0
     dc6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <__vector_41+0x52>
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     dee:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <adcb_callback>
     df2:	30 91 10 23 	lds	r19, 0x2310	; 0x802310 <adcb_callback+0x1>
     df6:	80 e4       	ldi	r24, 0x40	; 64
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     e02:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	83 70       	andi	r24, 0x03	; 3
     e0c:	99 27       	eor	r25, r25
     e0e:	89 2b       	or	r24, r25
     e10:	39 f4       	brne	.+14     	; 0xe20 <__vector_41+0x8a>
		index += 2;
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	8e 5f       	subi	r24, 0xFE	; 254
     e16:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	86 95       	lsr	r24
     e1c:	86 95       	lsr	r24
     e1e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	81 70       	andi	r24, 0x01	; 1
     e28:	99 27       	eor	r25, r25
     e2a:	89 2b       	or	r24, r25
     e2c:	19 f4       	brne	.+6      	; 0xe34 <__vector_41+0x9e>
		index++;
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	ac 01       	movw	r20, r24
     e3a:	40 5e       	subi	r20, 0xE0	; 224
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	84 0f       	add	r24, r20
     e52:	95 1f       	adc	r25, r21
     e54:	fc 01       	movw	r30, r24
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	95 81       	ldd	r25, Z+5	; 0x05
     e5a:	ac 01       	movw	r20, r24
     e5c:	64 e0       	ldi	r22, 0x04	; 4
     e5e:	80 e4       	ldi	r24, 0x40	; 64
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	f9 01       	movw	r30, r18
     e64:	19 95       	eicall
}
     e66:	00 00       	nop
     e68:	24 96       	adiw	r28, 0x04	; 4
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e90:	0f 90       	pop	r0
     e92:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e96:	0f 90       	pop	r0
     e98:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e9c:	0f 90       	pop	r0
     e9e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ea2:	0f 90       	pop	r0
     ea4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ebe:	0f 92       	push	r0
     ec0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ec4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ec8:	0f 92       	push	r0
     eca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ece:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ed2:	0f 92       	push	r0
     ed4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ed8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     edc:	0f 92       	push	r0
     ede:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	00 d0       	rcall	.+0      	; 0xf00 <__vector_42+0x52>
     f00:	1f 92       	push	r1
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     f06:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <adcb_callback>
     f0a:	30 91 10 23 	lds	r19, 0x2310	; 0x802310 <adcb_callback+0x1>
     f0e:	80 e4       	ldi	r24, 0x40	; 64
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	88 e0       	ldi	r24, 0x08	; 8
     f18:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f1a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	83 70       	andi	r24, 0x03	; 3
     f24:	99 27       	eor	r25, r25
     f26:	89 2b       	or	r24, r25
     f28:	39 f4       	brne	.+14     	; 0xf38 <__vector_42+0x8a>
		index += 2;
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	8e 5f       	subi	r24, 0xFE	; 254
     f2e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	86 95       	lsr	r24
     f34:	86 95       	lsr	r24
     f36:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	81 70       	andi	r24, 0x01	; 1
     f40:	99 27       	eor	r25, r25
     f42:	89 2b       	or	r24, r25
     f44:	19 f4       	brne	.+6      	; 0xf4c <__vector_42+0x9e>
		index++;
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	ac 01       	movw	r20, r24
     f52:	40 5e       	subi	r20, 0xE0	; 224
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	84 0f       	add	r24, r20
     f6a:	95 1f       	adc	r25, r21
     f6c:	fc 01       	movw	r30, r24
     f6e:	84 81       	ldd	r24, Z+4	; 0x04
     f70:	95 81       	ldd	r25, Z+5	; 0x05
     f72:	ac 01       	movw	r20, r24
     f74:	68 e0       	ldi	r22, 0x08	; 8
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	f9 01       	movw	r30, r18
     f7c:	19 95       	eicall
}
     f7e:	00 00       	nop
     f80:	24 96       	adiw	r28, 0x04	; 4
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fa8:	0f 90       	pop	r0
     faa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fae:	0f 90       	pop	r0
     fb0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fb4:	0f 90       	pop	r0
     fb6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fba:	0f 90       	pop	r0
     fbc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	28 97       	sbiw	r28, 0x08	; 8
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	6f 83       	std	Y+7, r22	; 0x07
     fda:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	81 15       	cp	r24, r1
     fe2:	92 40       	sbci	r25, 0x02	; 2
     fe4:	29 f4       	brne	.+10     	; 0xff0 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	2d db       	rcall	.-2470   	; 0x644 <adc_get_calibration_data>
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	0a c0       	rjmp	.+20     	; 0x1004 <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	80 34       	cpi	r24, 0x40	; 64
     ff6:	92 40       	sbci	r25, 0x02	; 2
     ff8:	09 f0       	breq	.+2      	; 0xffc <adc_write_configuration+0x36>
     ffa:	56 c0       	rjmp	.+172    	; 0x10a8 <adc_write_configuration+0xe2>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	22 db       	rcall	.-2492   	; 0x644 <adc_get_calibration_data>
    1000:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	ee da       	rcall	.-2596   	; 0x5e2 <cpu_irq_save>
	adc_enable_clock(adc);
    1006:	8b 83       	std	Y+3, r24	; 0x03
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	44 da       	rcall	.-2936   	; 0x496 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	fc 01       	movw	r30, r24
    1014:	80 81       	ld	r24, Z
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	22 e0       	ldi	r18, 0x02	; 2
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
	adc->CAL = cal;
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	29 81       	ldd	r18, Y+1	; 0x01
    102a:	3a 81       	ldd	r19, Y+2	; 0x02
    102c:	fc 01       	movw	r30, r24
    102e:	24 87       	std	Z+12, r18	; 0x0c
    1030:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    1032:	8f 81       	ldd	r24, Y+7	; 0x07
    1034:	98 85       	ldd	r25, Y+8	; 0x08
    1036:	fc 01       	movw	r30, r24
    1038:	25 81       	ldd	r18, Z+5	; 0x05
    103a:	36 81       	ldd	r19, Z+6	; 0x06
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	fc 01       	movw	r30, r24
    1042:	20 8f       	std	Z+24, r18	; 0x18
    1044:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	fc 01       	movw	r30, r24
    104c:	22 81       	ldd	r18, Z+2	; 0x02
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	fc 01       	movw	r30, r24
    1054:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	fc 01       	movw	r30, r24
    105c:	24 81       	ldd	r18, Z+4	; 0x04
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	fc 01       	movw	r30, r24
    1064:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    1066:	8f 81       	ldd	r24, Y+7	; 0x07
    1068:	98 85       	ldd	r25, Y+8	; 0x08
    106a:	fc 01       	movw	r30, r24
    106c:	23 81       	ldd	r18, Z+3	; 0x03
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	fc 01       	movw	r30, r24
    1074:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	98 85       	ldd	r25, Y+8	; 0x08
    107a:	fc 01       	movw	r30, r24
    107c:	21 81       	ldd	r18, Z+1	; 0x01
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	fc 01       	movw	r30, r24
    1084:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	98 85       	ldd	r25, Y+8	; 0x08
    108a:	fc 01       	movw	r30, r24
    108c:	90 81       	ld	r25, Z
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	29 2f       	mov	r18, r25
    1092:	28 2b       	or	r18, r24
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	fc 01       	movw	r30, r24

	adc_disable_clock(adc);
    109a:	20 83       	st	Z, r18
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06

	cpu_irq_restore(flags);
    10a0:	2b da       	rcall	.-2986   	; 0x4f8 <adc_disable_clock>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	ae da       	rcall	.-2724   	; 0x602 <cpu_irq_restore>
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <adc_write_configuration+0xe4>
	} else
#endif

	{
		Assert(0);
		return;
    10a8:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	25 97       	sbiw	r28, 0x05	; 5
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	9b 83       	std	Y+3, r25	; 0x03
    10c8:	6c 83       	std	Y+4, r22	; 0x04
    10ca:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    10cc:	8a da       	rcall	.-2796   	; 0x5e2 <cpu_irq_save>
    10ce:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	e0 d9       	rcall	.-3136   	; 0x496 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	fc 01       	movw	r30, r24
    10dc:	80 81       	ld	r24, Z
    10de:	28 2f       	mov	r18, r24
    10e0:	20 7c       	andi	r18, 0xC0	; 192
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 8d       	ldd	r18, Z+24	; 0x18
    10f2:	31 8d       	ldd	r19, Z+25	; 0x19
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	fc 01       	movw	r30, r24
    10fa:	25 83       	std	Z+5, r18	; 0x05
    10fc:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	fc 01       	movw	r30, r24
    1104:	22 81       	ldd	r18, Z+2	; 0x02
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	fc 01       	movw	r30, r24
    110c:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	fc 01       	movw	r30, r24
    1114:	24 81       	ldd	r18, Z+4	; 0x04
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	fc 01       	movw	r30, r24
    111c:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	fc 01       	movw	r30, r24
    1124:	23 81       	ldd	r18, Z+3	; 0x03
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	fc 01       	movw	r30, r24
    112c:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	fc 01       	movw	r30, r24
    1134:	21 81       	ldd	r18, Z+1	; 0x01
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	fc 01       	movw	r30, r24
    113c:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03

	cpu_irq_restore(flags);
    1142:	da d9       	rcall	.-3148   	; 0x4f8 <adc_disable_clock>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	5d da       	rcall	.-2886   	; 0x602 <cpu_irq_restore>
}
    1148:	00 00       	nop
    114a:	25 96       	adiw	r28, 0x05	; 5
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	2c 97       	sbiw	r28, 0x0c	; 12
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	88 87       	std	Y+8, r24	; 0x08
    1166:	99 87       	std	Y+9, r25	; 0x09
    1168:	6a 87       	std	Y+10, r22	; 0x0a
    116a:	4b 87       	std	Y+11, r20	; 0x0b
    116c:	5c 87       	std	Y+12, r21	; 0x0c
    116e:	88 85       	ldd	r24, Y+8	; 0x08
    1170:	99 85       	ldd	r25, Y+9	; 0x09
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8a 85       	ldd	r24, Y+10	; 0x0a
    1178:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    117a:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	83 70       	andi	r24, 0x03	; 3
    1184:	99 27       	eor	r25, r25
    1186:	89 2b       	or	r24, r25
    1188:	39 f4       	brne	.+14     	; 0x1198 <adcch_write_configuration+0x42>
		index += 2;
    118a:	8f 81       	ldd	r24, Y+7	; 0x07
    118c:	8e 5f       	subi	r24, 0xFE	; 254
    118e:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1190:	8e 81       	ldd	r24, Y+6	; 0x06
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	99 27       	eor	r25, r25
    11a2:	89 2b       	or	r24, r25
    11a4:	19 f4       	brne	.+6      	; 0x11ac <adcch_write_configuration+0x56>
		index++;
    11a6:	8f 81       	ldd	r24, Y+7	; 0x07
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	9c 01       	movw	r18, r24
    11b2:	20 5e       	subi	r18, 0xE0	; 224
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	8f 81       	ldd	r24, Y+7	; 0x07
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    11d0:	08 da       	rcall	.-3056   	; 0x5e2 <cpu_irq_save>
    11d2:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    11d4:	88 85       	ldd	r24, Y+8	; 0x08
    11d6:	99 85       	ldd	r25, Y+9	; 0x09
    11d8:	5e d9       	rcall	.-3396   	; 0x496 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    11da:	8b 85       	ldd	r24, Y+11	; 0x0b
    11dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11de:	fc 01       	movw	r30, r24
    11e0:	20 81       	ld	r18, Z
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	fc 01       	movw	r30, r24
    11e8:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    11ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ee:	fc 01       	movw	r30, r24
    11f0:	22 81       	ldd	r18, Z+2	; 0x02
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	fc 01       	movw	r30, r24
    11f8:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    11fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fe:	fc 01       	movw	r30, r24
    1200:	21 81       	ldd	r18, Z+1	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	fc 01       	movw	r30, r24
    1208:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    120a:	8a 85       	ldd	r24, Y+10	; 0x0a
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	81 70       	andi	r24, 0x01	; 1
    1212:	99 27       	eor	r25, r25
    1214:	89 2b       	or	r24, r25
    1216:	41 f0       	breq	.+16     	; 0x1228 <adcch_write_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1218:	8b 85       	ldd	r24, Y+11	; 0x0b
    121a:	9c 85       	ldd	r25, Y+12	; 0x0c
    121c:	fc 01       	movw	r30, r24
    121e:	23 81       	ldd	r18, Z+3	; 0x03
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	fc 01       	movw	r30, r24
    1226:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
    1228:	88 85       	ldd	r24, Y+8	; 0x08
    122a:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    122c:	65 d9       	rcall	.-3382   	; 0x4f8 <adc_disable_clock>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	e8 d9       	rcall	.-3120   	; 0x602 <cpu_irq_restore>
}
    1232:	00 00       	nop
    1234:	2c 96       	adiw	r28, 0x0c	; 12
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	2c 97       	sbiw	r28, 0x0c	; 12
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	88 87       	std	Y+8, r24	; 0x08
    1250:	99 87       	std	Y+9, r25	; 0x09
    1252:	6a 87       	std	Y+10, r22	; 0x0a
    1254:	4b 87       	std	Y+11, r20	; 0x0b
    1256:	5c 87       	std	Y+12, r21	; 0x0c
    1258:	88 85       	ldd	r24, Y+8	; 0x08
    125a:	99 85       	ldd	r25, Y+9	; 0x09
    125c:	8c 83       	std	Y+4, r24	; 0x04
    125e:	9d 83       	std	Y+5, r25	; 0x05
    1260:	8a 85       	ldd	r24, Y+10	; 0x0a
    1262:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1264:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	83 70       	andi	r24, 0x03	; 3
    126e:	99 27       	eor	r25, r25
    1270:	89 2b       	or	r24, r25
    1272:	39 f4       	brne	.+14     	; 0x1282 <adcch_read_configuration+0x42>
		index += 2;
    1274:	8f 81       	ldd	r24, Y+7	; 0x07
    1276:	8e 5f       	subi	r24, 0xFE	; 254
    1278:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	99 27       	eor	r25, r25
    128c:	89 2b       	or	r24, r25
    128e:	19 f4       	brne	.+6      	; 0x1296 <adcch_read_configuration+0x56>
		index++;
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	9c 01       	movw	r18, r24
    129c:	20 5e       	subi	r18, 0xE0	; 224
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	8f 81       	ldd	r24, Y+7	; 0x07
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	82 0f       	add	r24, r18
    12b4:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    12ba:	93 d9       	rcall	.-3290   	; 0x5e2 <cpu_irq_save>
    12bc:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    12be:	88 85       	ldd	r24, Y+8	; 0x08
    12c0:	99 85       	ldd	r25, Y+9	; 0x09
    12c2:	e9 d8       	rcall	.-3630   	; 0x496 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 81       	ld	r18, Z
    12cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	fc 01       	movw	r30, r24
    12da:	22 81       	ldd	r18, Z+2	; 0x02
    12dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12de:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e0:	fc 01       	movw	r30, r24
    12e2:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	fc 01       	movw	r30, r24
    12ea:	21 81       	ldd	r18, Z+1	; 0x01
    12ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f0:	fc 01       	movw	r30, r24
    12f2:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    12f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	99 27       	eor	r25, r25
    12fe:	89 2b       	or	r24, r25
    1300:	41 f0       	breq	.+16     	; 0x1312 <adcch_read_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	fc 01       	movw	r30, r24
    1308:	26 81       	ldd	r18, Z+6	; 0x06
    130a:	8b 85       	ldd	r24, Y+11	; 0x0b
    130c:	9c 85       	ldd	r25, Y+12	; 0x0c
    130e:	fc 01       	movw	r30, r24
    1310:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
    1312:	88 85       	ldd	r24, Y+8	; 0x08
    1314:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    1316:	f0 d8       	rcall	.-3616   	; 0x4f8 <adc_disable_clock>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	73 d9       	rcall	.-3354   	; 0x602 <cpu_irq_restore>
}
    131c:	00 00       	nop
    131e:	2c 96       	adiw	r28, 0x0c	; 12
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	9c e6       	ldi	r25, 0x6C	; 108
    1336:	ac ed       	ldi	r26, 0xDC	; 220
    1338:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    134e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1350:	ec df       	rcall	.-40     	; 0x132a <sysclk_get_main_hz>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	29 81       	ldd	r18, Y+1	; 0x01
    1358:	22 2f       	mov	r18, r18
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <sysclk_get_per4_hz+0x22>
    135e:	b6 95       	lsr	r27
    1360:	a7 95       	ror	r26
    1362:	97 95       	ror	r25
    1364:	87 95       	ror	r24
    1366:	2a 95       	dec	r18
    1368:	d2 f7       	brpl	.-12     	; 0x135e <sysclk_get_per4_hz+0x1a>
}
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    137e:	e2 df       	rcall	.-60     	; 0x1344 <sysclk_get_per4_hz>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    1396:	ef df       	rcall	.-34     	; 0x1376 <sysclk_get_per2_hz>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
}
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    13ae:	ef df       	rcall	.-34     	; 0x138e <sysclk_get_per_hz>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
}
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <tc_write_clock_source+0x6>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    13d6:	98 2f       	mov	r25, r24
    13d8:	90 7f       	andi	r25, 0xF0	; 240
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	89 2b       	or	r24, r25
    13de:	28 2f       	mov	r18, r24
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    13e8:	00 00       	nop
    13ea:	23 96       	adiw	r28, 0x03	; 3
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <tc_write_period+0x6>
    13fc:	1f 92       	push	r1
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	6b 83       	std	Y+3, r22	; 0x03
    1408:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	fc 01       	movw	r30, r24
    1414:	26 a3       	std	Z+38, r18	; 0x26
    1416:	37 a3       	std	Z+39, r19	; 0x27
}
    1418:	00 00       	nop
    141a:	24 96       	adiw	r28, 0x04	; 4
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	08 95       	ret

00001426 <tc_enable_cc_channels>:
 * \param tc Pointer to TC module.
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <tc_enable_cc_channels+0x6>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	6b 83       	std	Y+3, r22	; 0x03
	if (tc_is_tc0(void *tc)) {
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	80 74       	andi	r24, 0x40	; 64
    143c:	99 27       	eor	r25, r25
    143e:	89 2b       	or	r24, r25
    1440:	61 f4       	brne	.+24     	; 0x145a <tc_enable_cc_channels+0x34>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	fc 01       	movw	r30, r24
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	29 2f       	mov	r18, r25
    144e:	28 2b       	or	r18, r24
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	fc 01       	movw	r30, r24
    1456:	21 83       	std	Z+1, r18	; 0x01
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <tc_enable_cc_channels+0x5a>
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
	} else if (tc_is_tc1(void *tc)) {
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	80 74       	andi	r24, 0x40	; 64
    1460:	99 27       	eor	r25, r25
    1462:	89 2b       	or	r24, r25
    1464:	69 f0       	breq	.+26     	; 0x1480 <tc_enable_cc_channels+0x5a>
		((TC1_t *)tc)->CTRLB |=
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	fc 01       	movw	r30, r24
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	98 2f       	mov	r25, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	80 73       	andi	r24, 0x30	; 48
    1474:	89 2b       	or	r24, r25
    1476:	28 2f       	mov	r18, r24
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	fc 01       	movw	r30, r24
    147e:	21 83       	std	Z+1, r18	; 0x01
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
    1480:	00 00       	nop
    1482:	23 96       	adiw	r28, 0x03	; 3
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	25 97       	sbiw	r28, 0x05	; 5
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	6b 83       	std	Y+3, r22	; 0x03
    14a2:	4c 83       	std	Y+4, r20	; 0x04
    14a4:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	80 74       	andi	r24, 0x40	; 64
    14ac:	99 27       	eor	r25, r25
    14ae:	89 2b       	or	r24, r25
    14b0:	99 f5       	brne	.+102    	; 0x1518 <tc_write_cc_buffer+0x8a>
		switch (channel_index) {
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	a1 f0       	breq	.+40     	; 0x14e6 <tc_write_cc_buffer+0x58>
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	1c f4       	brge	.+6      	; 0x14ca <tc_write_cc_buffer+0x3c>
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	39 f0       	breq	.+14     	; 0x14d6 <tc_write_cc_buffer+0x48>
    14c8:	46 c0       	rjmp	.+140    	; 0x1556 <tc_write_cc_buffer+0xc8>
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	91 05       	cpc	r25, r1
    14ce:	99 f0       	breq	.+38     	; 0x14f6 <tc_write_cc_buffer+0x68>
    14d0:	04 97       	sbiw	r24, 0x04	; 4
    14d2:	c9 f0       	breq	.+50     	; 0x1506 <tc_write_cc_buffer+0x78>
    14d4:	40 c0       	rjmp	.+128    	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	fc 01       	movw	r30, r24
    14e0:	20 af       	std	Z+56, r18	; 0x38
    14e2:	31 af       	std	Z+57, r19	; 0x39
			break;
    14e4:	38 c0       	rjmp	.+112    	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	2c 81       	ldd	r18, Y+4	; 0x04
    14ec:	3d 81       	ldd	r19, Y+5	; 0x05
    14ee:	fc 01       	movw	r30, r24
    14f0:	22 af       	std	Z+58, r18	; 0x3a
    14f2:	33 af       	std	Z+59, r19	; 0x3b
			break;
    14f4:	30 c0       	rjmp	.+96     	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	3d 81       	ldd	r19, Y+5	; 0x05
    14fe:	fc 01       	movw	r30, r24
    1500:	24 af       	std	Z+60, r18	; 0x3c
    1502:	35 af       	std	Z+61, r19	; 0x3d
			break;
    1504:	28 c0       	rjmp	.+80     	; 0x1556 <tc_write_cc_buffer+0xc8>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	fc 01       	movw	r30, r24
    1510:	26 af       	std	Z+62, r18	; 0x3e
    1512:	37 af       	std	Z+63, r19	; 0x3f
			break;
    1514:	00 00       	nop
    1516:	1f c0       	rjmp	.+62     	; 0x1556 <tc_write_cc_buffer+0xc8>
		}
	} else if (tc_is_tc1(void *tc)) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	80 74       	andi	r24, 0x40	; 64
    151e:	99 27       	eor	r25, r25
    1520:	89 2b       	or	r24, r25
    1522:	c9 f0       	breq	.+50     	; 0x1556 <tc_write_cc_buffer+0xc8>
			switch (channel_index) {
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	19 f0       	breq	.+6      	; 0x1536 <tc_write_cc_buffer+0xa8>
    1530:	02 97       	sbiw	r24, 0x02	; 2
    1532:	49 f0       	breq	.+18     	; 0x1546 <tc_write_cc_buffer+0xb8>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
				break;
			default:
				return;
    1534:	10 c0       	rjmp	.+32     	; 0x1556 <tc_write_cc_buffer+0xc8>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	fc 01       	movw	r30, r24
    1540:	20 af       	std	Z+56, r18	; 0x38
    1542:	31 af       	std	Z+57, r19	; 0x39
				break;
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <tc_write_cc_buffer+0xc8>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	fc 01       	movw	r30, r24
    1550:	22 af       	std	Z+58, r18	; 0x3a
    1552:	33 af       	std	Z+59, r19	; 0x3b
				break;
    1554:	00 00       	nop
			default:
				return;
			}
		}
}
    1556:	25 96       	adiw	r28, 0x05	; 5
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	00 d0       	rcall	.+0      	; 0x1568 <tc_set_wgm+0x6>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	fc 01       	movw	r30, r24
    1578:	81 81       	ldd	r24, Z+1	; 0x01
    157a:	98 2f       	mov	r25, r24
    157c:	98 7f       	andi	r25, 0xF8	; 248
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	89 2b       	or	r24, r25
    1582:	28 2f       	mov	r18, r24
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	21 83       	std	Z+1, r18	; 0x01
}
    158c:	00 00       	nop
    158e:	23 96       	adiw	r28, 0x03	; 3
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <pwm_set_duty_cycle_percent+0x6>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	fc 01       	movw	r30, r24
    15b0:	85 81       	ldd	r24, Z+5	; 0x05
    15b2:	96 81       	ldd	r25, Z+6	; 0x06
    15b4:	9c 01       	movw	r18, r24
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <__mulsi3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
    15d0:	24 e6       	ldi	r18, 0x64	; 100
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    15e0:	da 01       	movw	r26, r20
    15e2:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    15e4:	9c 01       	movw	r18, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	fc 01       	movw	r30, r24
    15ec:	62 81       	ldd	r22, Z+2	; 0x02
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	fc 01       	movw	r30, r24
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	a9 01       	movw	r20, r18
    15fa:	49 df       	rcall	.-366    	; 0x148e <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
    15fc:	00 00       	nop
    15fe:	23 96       	adiw	r28, 0x03	; 3
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	2c 97       	sbiw	r28, 0x0c	; 12
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	89 87       	std	Y+9, r24	; 0x09
    1622:	9a 87       	std	Y+10, r25	; 0x0a
    1624:	6b 87       	std	Y+11, r22	; 0x0b
    1626:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t cpu_hz = sysclk_get_cpu_hz();
    1628:	be de       	rcall	.-644    	; 0x13a6 <sysclk_get_cpu_hz>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8b 83       	std	Y+3, r24	; 0x03
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	ad 83       	std	Y+5, r26	; 0x05
    1634:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1636:	8b 85       	ldd	r24, Y+11	; 0x0b
    1638:	9c 85       	ldd	r25, Y+12	; 0x0c
    163a:	9c 01       	movw	r18, r24
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	ad 81       	ldd	r26, Y+5	; 0x05
    1646:	be 81       	ldd	r27, Y+6	; 0x06
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    1650:	da 01       	movw	r26, r20
    1652:	c9 01       	movw	r24, r18
    1654:	2f ef       	ldi	r18, 0xFF	; 255
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    1664:	da 01       	movw	r26, r20
    1666:	c9 01       	movw	r24, r18
    1668:	8f 83       	std	Y+7, r24	; 0x07
    166a:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
    166c:	8f 81       	ldd	r24, Y+7	; 0x07
    166e:	98 85       	ldd	r25, Y+8	; 0x08
    1670:	89 2b       	or	r24, r25
    1672:	51 f4       	brne	.+20     	; 0x1688 <pwm_set_frequency+0x7e>
		dividor = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	21 e0       	ldi	r18, 0x01	; 1
    1682:	fc 01       	movw	r30, r24
    1684:	24 83       	std	Z+4, r18	; 0x04
    1686:	52 c0       	rjmp	.+164    	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 2) {
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	02 97       	sbiw	r24, 0x02	; 2
    168e:	50 f4       	brcc	.+20     	; 0x16a4 <pwm_set_frequency+0x9a>
		dividor = 2;
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	22 e0       	ldi	r18, 0x02	; 2
    169e:	fc 01       	movw	r30, r24
    16a0:	24 83       	std	Z+4, r18	; 0x04
    16a2:	44 c0       	rjmp	.+136    	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 4) {
    16a4:	8f 81       	ldd	r24, Y+7	; 0x07
    16a6:	98 85       	ldd	r25, Y+8	; 0x08
    16a8:	04 97       	sbiw	r24, 0x04	; 4
    16aa:	50 f4       	brcc	.+20     	; 0x16c0 <pwm_set_frequency+0xb6>
		dividor = 4;
    16ac:	84 e0       	ldi	r24, 0x04	; 4
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	23 e0       	ldi	r18, 0x03	; 3
    16ba:	fc 01       	movw	r30, r24
    16bc:	24 83       	std	Z+4, r18	; 0x04
    16be:	36 c0       	rjmp	.+108    	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 8) {
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	08 97       	sbiw	r24, 0x08	; 8
    16c6:	50 f4       	brcc	.+20     	; 0x16dc <pwm_set_frequency+0xd2>
		dividor = 8;
    16c8:	88 e0       	ldi	r24, 0x08	; 8
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	24 e0       	ldi	r18, 0x04	; 4
    16d6:	fc 01       	movw	r30, r24
    16d8:	24 83       	std	Z+4, r18	; 0x04
    16da:	28 c0       	rjmp	.+80     	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 64) {
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	98 85       	ldd	r25, Y+8	; 0x08
    16e0:	80 34       	cpi	r24, 0x40	; 64
    16e2:	91 05       	cpc	r25, r1
    16e4:	50 f4       	brcc	.+20     	; 0x16fa <pwm_set_frequency+0xf0>
		dividor = 64;
    16e6:	80 e4       	ldi	r24, 0x40	; 64
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	25 e0       	ldi	r18, 0x05	; 5
    16f4:	fc 01       	movw	r30, r24
    16f6:	24 83       	std	Z+4, r18	; 0x04
    16f8:	19 c0       	rjmp	.+50     	; 0x172c <pwm_set_frequency+0x122>
	} else if (smallest_div < 256) {
    16fa:	8f 81       	ldd	r24, Y+7	; 0x07
    16fc:	98 85       	ldd	r25, Y+8	; 0x08
    16fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1700:	91 05       	cpc	r25, r1
    1702:	09 f0       	breq	.+2      	; 0x1706 <pwm_set_frequency+0xfc>
    1704:	50 f4       	brcc	.+20     	; 0x171a <pwm_set_frequency+0x110>
		dividor = 256;
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	26 e0       	ldi	r18, 0x06	; 6
    1714:	fc 01       	movw	r30, r24
    1716:	24 83       	std	Z+4, r18	; 0x04
    1718:	09 c0       	rjmp	.+18     	; 0x172c <pwm_set_frequency+0x122>
	} else {
		dividor = 1024;
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	94 e0       	ldi	r25, 0x04	; 4
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	27 e0       	ldi	r18, 0x07	; 7
    1728:	fc 01       	movw	r30, r24
    172a:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	9c 01       	movw	r18, r24
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	ad 81       	ldd	r26, Y+5	; 0x05
    173c:	be 81       	ldd	r27, Y+6	; 0x06
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    1746:	da 01       	movw	r26, r20
    1748:	c9 01       	movw	r24, r18
    174a:	7c 01       	movw	r14, r24
    174c:	8d 01       	movw	r16, r26
    174e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1750:	9c 85       	ldd	r25, Y+12	; 0x0c
    1752:	9c 01       	movw	r18, r24
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	c8 01       	movw	r24, r16
    175a:	b7 01       	movw	r22, r14
    175c:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    1760:	da 01       	movw	r26, r20
    1762:	c9 01       	movw	r24, r18
    1764:	9c 01       	movw	r18, r24
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	fc 01       	movw	r30, r24
    176c:	25 83       	std	Z+5, r18	; 0x05
    176e:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	fc 01       	movw	r30, r24
    1776:	85 81       	ldd	r24, Z+5	; 0x05
    1778:	96 81       	ldd	r25, Z+6	; 0x06
    177a:	84 36       	cpi	r24, 0x64	; 100
    177c:	91 05       	cpc	r25, r1
    177e:	48 f4       	brcc	.+18     	; 0x1792 <pwm_set_frequency+0x188>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	fc 01       	movw	r30, r24
    1786:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	fc 01       	movw	r30, r24
    178e:	15 82       	std	Z+5, r1	; 0x05
    1790:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
}
    1792:	00 00       	nop
    1794:	2c 96       	adiw	r28, 0x0c	; 12
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	27 97       	sbiw	r28, 0x07	; 7
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	6c 83       	std	Y+4, r22	; 0x04
    17bc:	4d 83       	std	Y+5, r20	; 0x05
    17be:	2e 83       	std	Y+6, r18	; 0x06
    17c0:	3f 83       	std	Y+7, r19	; 0x07
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
    17c2:	19 82       	std	Y+1, r1	; 0x01

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	09 2e       	mov	r0, r25
    17cc:	00 0c       	add	r0, r0
    17ce:	aa 0b       	sbc	r26, r26
    17d0:	bb 0b       	sbc	r27, r27
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	27 e0       	ldi	r18, 0x07	; 7
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	84 1b       	sub	r24, r20
    17dc:	95 0b       	sbc	r25, r21
    17de:	28 17       	cp	r18, r24
    17e0:	39 07       	cpc	r19, r25
    17e2:	08 f4       	brcc	.+2      	; 0x17e6 <pwm_init+0x3e>
    17e4:	0f c1       	rjmp	.+542    	; 0x1a04 <pwm_init+0x25c>
    17e6:	fc 01       	movw	r30, r24
    17e8:	88 27       	eor	r24, r24
    17ea:	e2 50       	subi	r30, 0x02	; 2
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	0c 94 b5 59 	jmp	0xb36a	; 0xb36a <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	38 e0       	ldi	r19, 0x08	; 8
    17fc:	fc 01       	movw	r30, r24
    17fe:	20 83       	st	Z, r18
    1800:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	96 e0       	ldi	r25, 0x06	; 6
    1806:	20 e4       	ldi	r18, 0x40	; 64
    1808:	36 e0       	ldi	r19, 0x06	; 6
    180a:	f9 01       	movw	r30, r18
    180c:	20 81       	ld	r18, Z
    180e:	62 2f       	mov	r22, r18
    1810:	2d 81       	ldd	r18, Y+5	; 0x05
    1812:	22 2f       	mov	r18, r18
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	41 50       	subi	r20, 0x01	; 1
    181a:	51 09       	sbc	r21, r1
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <pwm_init+0x7e>
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	4a 95       	dec	r20
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <pwm_init+0x7a>
    182a:	26 2b       	or	r18, r22
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
		num_chan = 4;
    1830:	84 e0       	ldi	r24, 0x04	; 4
    1832:	89 83       	std	Y+1, r24	; 0x01
		break;
    1834:	e8 c0       	rjmp	.+464    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	9b 81       	ldd	r25, Y+3	; 0x03
    183a:	20 e4       	ldi	r18, 0x40	; 64
    183c:	38 e0       	ldi	r19, 0x08	; 8
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
    1842:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1844:	80 e4       	ldi	r24, 0x40	; 64
    1846:	96 e0       	ldi	r25, 0x06	; 6
    1848:	20 e4       	ldi	r18, 0x40	; 64
    184a:	36 e0       	ldi	r19, 0x06	; 6
    184c:	f9 01       	movw	r30, r18
    184e:	20 81       	ld	r18, Z
    1850:	62 2f       	mov	r22, r18
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	22 2f       	mov	r18, r18
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	4d 5f       	subi	r20, 0xFD	; 253
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <pwm_init+0xc0>
    1864:	22 0f       	add	r18, r18
    1866:	33 1f       	adc	r19, r19
    1868:	4a 95       	dec	r20
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <pwm_init+0xbc>
    186c:	26 2b       	or	r18, r22
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18
		num_chan = 2;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 83       	std	Y+1, r24	; 0x01
		break;
    1876:	c7 c0       	rjmp	.+398    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	39 e0       	ldi	r19, 0x09	; 9
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
    1884:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1886:	80 e6       	ldi	r24, 0x60	; 96
    1888:	96 e0       	ldi	r25, 0x06	; 6
    188a:	20 e6       	ldi	r18, 0x60	; 96
    188c:	36 e0       	ldi	r19, 0x06	; 6
    188e:	f9 01       	movw	r30, r18
    1890:	20 81       	ld	r18, Z
    1892:	62 2f       	mov	r22, r18
    1894:	2d 81       	ldd	r18, Y+5	; 0x05
    1896:	22 2f       	mov	r18, r18
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	41 50       	subi	r20, 0x01	; 1
    189e:	51 09       	sbc	r21, r1
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <pwm_init+0x102>
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	4a 95       	dec	r20
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <pwm_init+0xfe>
    18ae:	26 2b       	or	r18, r22
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
		num_chan = 4;
    18b4:	84 e0       	ldi	r24, 0x04	; 4
    18b6:	89 83       	std	Y+1, r24	; 0x01
		break;
    18b8:	a6 c0       	rjmp	.+332    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	20 e4       	ldi	r18, 0x40	; 64
    18c0:	39 e0       	ldi	r19, 0x09	; 9
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
    18c6:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    18c8:	80 e6       	ldi	r24, 0x60	; 96
    18ca:	96 e0       	ldi	r25, 0x06	; 6
    18cc:	20 e6       	ldi	r18, 0x60	; 96
    18ce:	36 e0       	ldi	r19, 0x06	; 6
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	62 2f       	mov	r22, r18
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	22 2f       	mov	r18, r18
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	4d 5f       	subi	r20, 0xFD	; 253
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <pwm_init+0x144>
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	4a 95       	dec	r20
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <pwm_init+0x140>
    18f0:	26 2b       	or	r18, r22
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 83       	st	Z, r18
		num_chan = 2;
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	89 83       	std	Y+1, r24	; 0x01
		break;
    18fa:	85 c0       	rjmp	.+266    	; 0x1a06 <pwm_init+0x25e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3a e0       	ldi	r19, 0x0A	; 10
    1904:	fc 01       	movw	r30, r24
    1906:	20 83       	st	Z, r18
    1908:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    190a:	80 e8       	ldi	r24, 0x80	; 128
    190c:	96 e0       	ldi	r25, 0x06	; 6
    190e:	20 e8       	ldi	r18, 0x80	; 128
    1910:	36 e0       	ldi	r19, 0x06	; 6
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	62 2f       	mov	r22, r18
    1918:	2d 81       	ldd	r18, Y+5	; 0x05
    191a:	22 2f       	mov	r18, r18
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	41 50       	subi	r20, 0x01	; 1
    1922:	51 09       	sbc	r21, r1
    1924:	21 e0       	ldi	r18, 0x01	; 1
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <pwm_init+0x186>
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	4a 95       	dec	r20
    1930:	e2 f7       	brpl	.-8      	; 0x192a <pwm_init+0x182>
    1932:	26 2b       	or	r18, r22
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18
		num_chan = 4;
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	89 83       	std	Y+1, r24	; 0x01
		break;
    193c:	64 c0       	rjmp	.+200    	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	20 e4       	ldi	r18, 0x40	; 64
    1944:	3a e0       	ldi	r19, 0x0A	; 10
    1946:	fc 01       	movw	r30, r24
    1948:	20 83       	st	Z, r18
    194a:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	96 e0       	ldi	r25, 0x06	; 6
    1950:	20 e8       	ldi	r18, 0x80	; 128
    1952:	36 e0       	ldi	r19, 0x06	; 6
    1954:	f9 01       	movw	r30, r18
    1956:	20 81       	ld	r18, Z
    1958:	62 2f       	mov	r22, r18
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	22 2f       	mov	r18, r18
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	a9 01       	movw	r20, r18
    1962:	4d 5f       	subi	r20, 0xFD	; 253
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <pwm_init+0x1c8>
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	4a 95       	dec	r20
    1972:	e2 f7       	brpl	.-8      	; 0x196c <pwm_init+0x1c4>
    1974:	26 2b       	or	r18, r22
    1976:	fc 01       	movw	r30, r24
    1978:	20 83       	st	Z, r18
		num_chan = 2;
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	89 83       	std	Y+1, r24	; 0x01
		break;
    197e:	43 c0       	rjmp	.+134    	; 0x1a06 <pwm_init+0x25e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3b e0       	ldi	r19, 0x0B	; 11
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18
    198c:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    198e:	80 ea       	ldi	r24, 0xA0	; 160
    1990:	96 e0       	ldi	r25, 0x06	; 6
    1992:	20 ea       	ldi	r18, 0xA0	; 160
    1994:	36 e0       	ldi	r19, 0x06	; 6
    1996:	f9 01       	movw	r30, r18
    1998:	20 81       	ld	r18, Z
    199a:	62 2f       	mov	r22, r18
    199c:	2d 81       	ldd	r18, Y+5	; 0x05
    199e:	22 2f       	mov	r18, r18
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	a9 01       	movw	r20, r18
    19a4:	41 50       	subi	r20, 0x01	; 1
    19a6:	51 09       	sbc	r21, r1
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <pwm_init+0x20a>
    19ae:	22 0f       	add	r18, r18
    19b0:	33 1f       	adc	r19, r19
    19b2:	4a 95       	dec	r20
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <pwm_init+0x206>
    19b6:	26 2b       	or	r18, r22
    19b8:	fc 01       	movw	r30, r24
    19ba:	20 83       	st	Z, r18
		num_chan = 4;
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	89 83       	std	Y+1, r24	; 0x01
		break;
    19c0:	22 c0       	rjmp	.+68     	; 0x1a06 <pwm_init+0x25e>
#endif
#if defined(TCF1)
	case PWM_TCF1:
		config->tc = &TCF1;
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	20 e4       	ldi	r18, 0x40	; 64
    19c8:	3b e0       	ldi	r19, 0x0B	; 11
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 83       	st	Z, r18
    19ce:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel+3));
    19d0:	80 ea       	ldi	r24, 0xA0	; 160
    19d2:	96 e0       	ldi	r25, 0x06	; 6
    19d4:	20 ea       	ldi	r18, 0xA0	; 160
    19d6:	36 e0       	ldi	r19, 0x06	; 6
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	62 2f       	mov	r22, r18
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	22 2f       	mov	r18, r18
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	a9 01       	movw	r20, r18
    19e6:	4d 5f       	subi	r20, 0xFD	; 253
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <pwm_init+0x24c>
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	4a 95       	dec	r20
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <pwm_init+0x248>
    19f8:	26 2b       	or	r18, r22
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
		num_chan = 2;
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	89 83       	std	Y+1, r24	; 0x01
		break;
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <pwm_init+0x25e>
#endif
	default:
		Assert(false);
		break;
    1a04:	00 00       	nop
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	22 83       	std	Z+2, r18	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	91 05       	cpc	r25, r1
    1a1a:	91 f0       	breq	.+36     	; 0x1a40 <pwm_init+0x298>
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	91 05       	cpc	r25, r1
    1a20:	1c f4       	brge	.+6      	; 0x1a28 <pwm_init+0x280>
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	39 f0       	breq	.+14     	; 0x1a34 <pwm_init+0x28c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
		break;
	default:
		Assert(false);
		break;
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <pwm_init+0x2bc>
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;

	/* Set the correct cc_mask */
	switch (channel) {
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	79 f0       	breq	.+30     	; 0x1a4c <pwm_init+0x2a4>
    1a2e:	04 97       	sbiw	r24, 0x04	; 4
    1a30:	99 f0       	breq	.+38     	; 0x1a58 <pwm_init+0x2b0>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
		break;
	default:
		Assert(false);
		break;
    1a32:	18 c0       	rjmp	.+48     	; 0x1a64 <pwm_init+0x2bc>
	config->channel = channel;

	/* Set the correct cc_mask */
	switch (channel) {
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	20 e1       	ldi	r18, 0x10	; 16
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <pwm_init+0x2bc>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	9b 81       	ldd	r25, Y+3	; 0x03
    1a44:	20 e2       	ldi	r18, 0x20	; 32
    1a46:	fc 01       	movw	r30, r24
    1a48:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <pwm_init+0x2bc>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a50:	20 e4       	ldi	r18, 0x40	; 64
    1a52:	fc 01       	movw	r30, r24
    1a54:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <pwm_init+0x2bc>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	20 e8       	ldi	r18, 0x80	; 128
    1a5e:	fc 01       	movw	r30, r24
    1a60:	23 83       	std	Z+3, r18	; 0x03
		break;
    1a62:	00 00       	nop
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	fc 01       	movw	r30, r24
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	0e 94 e7 40 	call	0x81ce	; 0x81ce <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	fc 01       	movw	r30, r24
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	63 e0       	ldi	r22, 0x03	; 3
    1a7e:	71 dd       	rcall	.-1310   	; 0x1562 <tc_set_wgm>

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	fc 01       	movw	r30, r24
    1a86:	15 82       	std	Z+5, r1	; 0x05
    1a88:	16 82       	std	Z+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	fc 01       	movw	r30, r24
    1a90:	14 82       	std	Z+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	8f dc       	rcall	.-1762   	; 0x13be <tc_write_clock_source>

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa2:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	af dd       	rcall	.-1186   	; 0x160a <pwm_set_frequency>
}
    1aac:	00 00       	nop
    1aae:	27 96       	adiw	r28, 0x07	; 7
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <pwm_start+0x6>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	6b 83       	std	Y+3, r22	; 0x03
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad0:	64 dd       	rcall	.-1336   	; 0x159a <pwm_set_duty_cycle_percent>
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	25 81       	ldd	r18, Z+5	; 0x05
    1ada:	36 81       	ldd	r19, Z+6	; 0x06
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	86 dc       	rcall	.-1780   	; 0x13f6 <tc_write_period>
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	fc 01       	movw	r30, r24
    1af0:	23 81       	ldd	r18, Z+3	; 0x03
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	62 2f       	mov	r22, r18
    1afe:	93 dc       	rcall	.-1754   	; 0x1426 <tc_enable_cc_channels>
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	fc 01       	movw	r30, r24
    1b06:	24 81       	ldd	r18, Z+4	; 0x04
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	62 2f       	mov	r22, r18
    1b14:	54 dc       	rcall	.-1880   	; 0x13be <tc_write_clock_source>
}
    1b16:	00 00       	nop
    1b18:	23 96       	adiw	r28, 0x03	; 3
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	1f 92       	push	r1
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    1b2e:	8f e3       	ldi	r24, 0x3F	; 63
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	fc 01       	movw	r30, r24
    1b34:	80 81       	ld	r24, Z
    1b36:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b38:	f8 94       	cli
	return flags;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	1f 92       	push	r1
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    1b50:	8f e3       	ldi	r24, 0x3F	; 63
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
}
    1b5a:	00 00       	nop
    1b5c:	0f 90       	pop	r0
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	9c e6       	ldi	r25, 0x6C	; 108
    1b70:	ac ed       	ldi	r26, 0xDC	; 220
    1b72:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	1f 92       	push	r1
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    1b88:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1b8a:	ec df       	rcall	.-40     	; 0x1b64 <sysclk_get_main_hz>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	29 81       	ldd	r18, Y+1	; 0x01
    1b92:	22 2f       	mov	r18, r18
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <sysclk_get_per4_hz+0x22>
    1b98:	b6 95       	lsr	r27
    1b9a:	a7 95       	ror	r26
    1b9c:	97 95       	ror	r25
    1b9e:	87 95       	ror	r24
    1ba0:	2a 95       	dec	r18
    1ba2:	d2 f7       	brpl	.-12     	; 0x1b98 <sysclk_get_per4_hz+0x1a>
}
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0f 90       	pop	r0
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    1bb8:	e2 df       	rcall	.-60     	; 0x1b7e <sysclk_get_per4_hz>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    1bd0:	ef df       	rcall	.-34     	; 0x1bb0 <sysclk_get_per2_hz>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
}
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <adc_start_conversion+0x6>
    1be6:	1f 92       	push	r1
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
    1bf2:	98 df       	rcall	.-208    	; 0x1b24 <cpu_irq_save>
    1bf4:	89 83       	std	Y+1, r24	; 0x01
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	82 2b       	or	r24, r18
    1c10:	28 2f       	mov	r18, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
#endif
	cpu_irq_restore(flags);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	93 df       	rcall	.-218    	; 0x1b44 <cpu_irq_restore>
}
    1c1e:	00 00       	nop
    1c20:	24 96       	adiw	r28, 0x04	; 4
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <adc_get_interrupt_flag+0x6>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	fc 01       	movw	r30, r24
    1c42:	96 81       	ldd	r25, Z+6	; 0x06
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	89 23       	and	r24, r25
}
    1c48:	23 96       	adiw	r28, 0x03	; 3
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	08 95       	ret

00001c54 <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <adc_clear_interrupt_flag+0x6>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	26 83       	std	Z+6, r18	; 0x06
}
    1c6e:	00 00       	nop
    1c70:	23 96       	adiw	r28, 0x03	; 3
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <adc_wait_for_interrupt_flag+0x6>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	6b 81       	ldd	r22, Y+3	; 0x03
    1c92:	cc df       	rcall	.-104    	; 0x1c2c <adc_get_interrupt_flag>
    1c94:	98 2f       	mov	r25, r24
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	98 17       	cp	r25, r24
    1c9a:	c1 f7       	brne	.-16     	; 0x1c8c <adc_wait_for_interrupt_flag+0x10>
	adc_clear_interrupt_flag(adc, ch_mask);
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ca2:	d8 df       	rcall	.-80     	; 0x1c54 <adc_clear_interrupt_flag>
}
    1ca4:	00 00       	nop
    1ca6:	23 96       	adiw	r28, 0x03	; 3
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	2d 97       	sbiw	r28, 0x0d	; 13
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	88 87       	std	Y+8, r24	; 0x08
    1cc2:	99 87       	std	Y+9, r25	; 0x09
    1cc4:	4a 87       	std	Y+10, r20	; 0x0a
    1cc6:	5b 87       	std	Y+11, r21	; 0x0b
    1cc8:	6c 87       	std	Y+12, r22	; 0x0c
    1cca:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    1ccc:	7d df       	rcall	.-262    	; 0x1bc8 <sysclk_get_per_hz>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	ac 83       	std	Y+4, r26	; 0x04
    1cd8:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	ac 81       	ldd	r26, Y+4	; 0x04
    1ce0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ce2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ce4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ce6:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ce8:	5d 85       	ldd	r21, Y+13	; 0x0d
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    1cf2:	da 01       	movw	r26, r20
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	8e 83       	std	Y+6, r24	; 0x06
    1cf8:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	05 97       	sbiw	r24, 0x05	; 5
    1d00:	10 f4       	brcc	.+4      	; 0x1d06 <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    1d02:	19 82       	std	Y+1, r1	; 0x01
    1d04:	2f c0       	rjmp	.+94     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    1d06:	8e 81       	ldd	r24, Y+6	; 0x06
    1d08:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0a:	09 97       	sbiw	r24, 0x09	; 9
    1d0c:	18 f4       	brcc	.+6      	; 0x1d14 <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	28 c0       	rjmp	.+80     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	41 97       	sbiw	r24, 0x11	; 17
    1d1a:	18 f4       	brcc	.+6      	; 0x1d22 <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	21 c0       	rjmp	.+66     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	9f 81       	ldd	r25, Y+7	; 0x07
    1d26:	81 97       	sbiw	r24, 0x21	; 33
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	1a c0       	rjmp	.+52     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
    1d32:	9f 81       	ldd	r25, Y+7	; 0x07
    1d34:	81 34       	cpi	r24, 0x41	; 65
    1d36:	91 05       	cpc	r25, r1
    1d38:	18 f4       	brcc	.+6      	; 0x1d40 <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	12 c0       	rjmp	.+36     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	9f 81       	ldd	r25, Y+7	; 0x07
    1d44:	81 38       	cpi	r24, 0x81	; 129
    1d46:	91 05       	cpc	r25, r1
    1d48:	18 f4       	brcc	.+6      	; 0x1d50 <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    1d50:	8e 81       	ldd	r24, Y+6	; 0x06
    1d52:	9f 81       	ldd	r25, Y+7	; 0x07
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 40       	sbci	r25, 0x01	; 1
    1d58:	18 f4       	brcc	.+6      	; 0x1d60 <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    1d60:	87 e0       	ldi	r24, 0x07	; 7
    1d62:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    1d64:	88 85       	ldd	r24, Y+8	; 0x08
    1d66:	99 85       	ldd	r25, Y+9	; 0x09
    1d68:	29 81       	ldd	r18, Y+1	; 0x01
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	24 83       	std	Z+4, r18	; 0x04
}
    1d6e:	00 00       	nop
    1d70:	2d 96       	adiw	r28, 0x0d	; 13
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	25 97       	sbiw	r28, 0x05	; 5
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
    1d90:	4c 83       	std	Y+4, r20	; 0x04
    1d92:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	fc 01       	movw	r30, r24
    1d9a:	81 81       	ldd	r24, Z+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	29 7e       	andi	r18, 0xE9	; 233
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	fc 01       	movw	r30, r24
    1da6:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	fc 01       	movw	r30, r24
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	2c 81       	ldd	r18, Y+4	; 0x04
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	82 2b       	or	r24, r18
    1db6:	29 2f       	mov	r18, r25
    1db8:	28 2b       	or	r18, r24
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	28 2f       	mov	r18, r24
    1dcc:	2f 78       	andi	r18, 0x8F	; 143
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	fc 01       	movw	r30, r24
    1ddc:	92 81       	ldd	r25, Z+2	; 0x02
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	29 2f       	mov	r18, r25
    1de2:	28 2b       	or	r18, r24
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	fc 01       	movw	r30, r24
    1dea:	22 83       	std	Z+2, r18	; 0x02
}
    1dec:	00 00       	nop
    1dee:	25 96       	adiw	r28, 0x05	; 5
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	25 97       	sbiw	r28, 0x05	; 5
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	6b 83       	std	Y+3, r22	; 0x03
    1e0e:	4c 83       	std	Y+4, r20	; 0x04
    1e10:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	11 f1       	breq	.+68     	; 0x1e62 <adc_set_conversion_trigger+0x68>
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	91 05       	cpc	r25, r1
    1e22:	2c f4       	brge	.+10     	; 0x1e2e <adc_set_conversion_trigger+0x34>
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <adc_set_conversion_trigger+0x4a>
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	b9 f1       	breq	.+110    	; 0x1e9a <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    1e2c:	a9 c0       	rjmp	.+338    	; 0x1f80 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	91 05       	cpc	r25, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <adc_set_conversion_trigger+0x3c>
    1e34:	53 c0       	rjmp	.+166    	; 0x1edc <adc_set_conversion_trigger+0xe2>
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	91 05       	cpc	r25, r1
    1e3a:	d4 f1       	brlt	.+116    	; 0x1eb0 <adc_set_conversion_trigger+0xb6>
    1e3c:	05 97       	sbiw	r24, 0x05	; 5
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <adc_set_conversion_trigger+0x48>
    1e40:	76 c0       	rjmp	.+236    	; 0x1f2e <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    1e42:	9e c0       	rjmp	.+316    	; 0x1f80 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	fc 01       	movw	r30, r24
    1e4a:	81 81       	ldd	r24, Z+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	27 7f       	andi	r18, 0xF7	; 247
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	fc 01       	movw	r30, r24
    1e56:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	13 82       	std	Z+3, r1	; 0x03
		break;
    1e60:	8f c0       	rjmp	.+286    	; 0x1f80 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	27 7f       	andi	r18, 0xF7	; 247
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	fc 01       	movw	r30, r24
    1e74:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	98 2f       	mov	r25, r24
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	89 2b       	or	r24, r25
    1e8e:	28 2f       	mov	r18, r24
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	fc 01       	movw	r30, r24
    1e96:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    1e98:	73 c0       	rjmp	.+230    	; 0x1f80 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	28 60       	ori	r18, 0x08	; 8
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	fc 01       	movw	r30, r24
    1eac:	21 83       	std	Z+1, r18	; 0x01
		break;
    1eae:	68 c0       	rjmp	.+208    	; 0x1f80 <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	28 60       	ori	r18, 0x08	; 8
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	81 50       	subi	r24, 0x01	; 1
    1ec8:	28 2f       	mov	r18, r24
    1eca:	22 95       	swap	r18
    1ecc:	22 0f       	add	r18, r18
    1ece:	22 0f       	add	r18, r18
    1ed0:	20 7c       	andi	r18, 0xC0	; 192
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	23 83       	std	Z+3, r18	; 0x03
		break;
    1eda:	52 c0       	rjmp	.+164    	; 0x1f80 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	81 81       	ldd	r24, Z+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	27 7f       	andi	r18, 0xF7	; 247
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	fc 01       	movw	r30, r24
    1eee:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	00 24       	eor	r0, r0
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	07 94       	ror	r0
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	07 94       	ror	r0
    1f06:	98 2f       	mov	r25, r24
    1f08:	80 2d       	mov	r24, r0
    1f0a:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1f1e:	82 2b       	or	r24, r18
    1f20:	85 60       	ori	r24, 0x05	; 5
    1f22:	28 2f       	mov	r18, r24
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	fc 01       	movw	r30, r24
    1f2a:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    1f2c:	29 c0       	rjmp	.+82     	; 0x1f80 <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	fc 01       	movw	r30, r24
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	28 2f       	mov	r18, r24
    1f38:	27 7f       	andi	r18, 0xF7	; 247
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	fc 01       	movw	r30, r24
    1f40:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	00 24       	eor	r0, r0
    1f4c:	96 95       	lsr	r25
    1f4e:	87 95       	ror	r24
    1f50:	07 94       	ror	r0
    1f52:	96 95       	lsr	r25
    1f54:	87 95       	ror	r24
    1f56:	07 94       	ror	r0
    1f58:	98 2f       	mov	r25, r24
    1f5a:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1f5c:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1f70:	82 2b       	or	r24, r18
    1f72:	86 60       	ori	r24, 0x06	; 6
    1f74:	28 2f       	mov	r18, r24
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    1f7e:	00 00       	nop

	default:
		Assert(0);
	}
}
    1f80:	00 00       	nop
    1f82:	25 96       	adiw	r28, 0x05	; 5
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	1f 92       	push	r1
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	51 f1       	breq	.+84     	; 0x1ffa <adcch_get_gain_setting+0x6c>
    1fa6:	89 30       	cpi	r24, 0x09	; 9
    1fa8:	91 05       	cpc	r25, r1
    1faa:	7c f4       	brge	.+30     	; 0x1fca <adcch_get_gain_setting+0x3c>
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	f1 f0       	breq	.+60     	; 0x1fee <adcch_get_gain_setting+0x60>
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	1c f4       	brge	.+6      	; 0x1fbe <adcch_get_gain_setting+0x30>
    1fb8:	89 2b       	or	r24, r25
    1fba:	b9 f0       	breq	.+46     	; 0x1fea <adcch_get_gain_setting+0x5c>
    1fbc:	28 c0       	rjmp	.+80     	; 0x200e <adcch_get_gain_setting+0x80>
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	b9 f0       	breq	.+46     	; 0x1ff2 <adcch_get_gain_setting+0x64>
    1fc4:	04 97       	sbiw	r24, 0x04	; 4
    1fc6:	b9 f0       	breq	.+46     	; 0x1ff6 <adcch_get_gain_setting+0x68>
    1fc8:	22 c0       	rjmp	.+68     	; 0x200e <adcch_get_gain_setting+0x80>
    1fca:	80 32       	cpi	r24, 0x20	; 32
    1fcc:	91 05       	cpc	r25, r1
    1fce:	c9 f0       	breq	.+50     	; 0x2002 <adcch_get_gain_setting+0x74>
    1fd0:	81 32       	cpi	r24, 0x21	; 33
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	1c f4       	brge	.+6      	; 0x1fdc <adcch_get_gain_setting+0x4e>
    1fd6:	40 97       	sbiw	r24, 0x10	; 16
    1fd8:	91 f0       	breq	.+36     	; 0x1ffe <adcch_get_gain_setting+0x70>
    1fda:	19 c0       	rjmp	.+50     	; 0x200e <adcch_get_gain_setting+0x80>
    1fdc:	80 34       	cpi	r24, 0x40	; 64
    1fde:	91 05       	cpc	r25, r1
    1fe0:	91 f0       	breq	.+36     	; 0x2006 <adcch_get_gain_setting+0x78>
    1fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	89 f0       	breq	.+34     	; 0x200a <adcch_get_gain_setting+0x7c>
    1fe8:	12 c0       	rjmp	.+36     	; 0x200e <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    1fea:	8c e1       	ldi	r24, 0x1C	; 28
    1fec:	11 c0       	rjmp	.+34     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    1ff6:	88 e0       	ldi	r24, 0x08	; 8
    1ff8:	0b c0       	rjmp	.+22     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    1ffa:	8c e0       	ldi	r24, 0x0C	; 12
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    1ffe:	80 e1       	ldi	r24, 0x10	; 16
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    2002:	84 e1       	ldi	r24, 0x14	; 20
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    2006:	88 e1       	ldi	r24, 0x18	; 24
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    200e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2010:	0f 90       	pop	r0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	25 97       	sbiw	r28, 0x05	; 5
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	6b 83       	std	Y+3, r22	; 0x03
    202c:	4c 83       	std	Y+4, r20	; 0x04
    202e:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	80 31       	cpi	r24, 0x10	; 16
    2034:	78 f0       	brcs	.+30     	; 0x2054 <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	fc 01       	movw	r30, r24
    203c:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	80 51       	subi	r24, 0x10	; 16
    2042:	28 2f       	mov	r18, r24
    2044:	22 0f       	add	r18, r18
    2046:	22 0f       	add	r18, r18
    2048:	22 0f       	add	r18, r18
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	fc 01       	movw	r30, r24
    2050:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2052:	87 c0       	rjmp	.+270    	; 0x2162 <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	8a 30       	cpi	r24, 0x0A	; 10
    2058:	79 f4       	brne	.+30     	; 0x2078 <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	fc 01       	movw	r30, r24
    2062:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	28 2f       	mov	r18, r24
    2068:	22 0f       	add	r18, r18
    206a:	22 0f       	add	r18, r18
    206c:	22 0f       	add	r18, r18
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	fc 01       	movw	r30, r24
    2074:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2076:	75 c0       	rjmp	.+234    	; 0x2162 <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	b8 f4       	brcc	.+46     	; 0x20ac <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	22 e0       	ldi	r18, 0x02	; 2
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	98 2f       	mov	r25, r24
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	89 2b       	or	r24, r25
    20a0:	28 2f       	mov	r18, r24
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	fc 01       	movw	r30, r24
    20a8:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    20aa:	5b c0       	rjmp	.+182    	; 0x2162 <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	88 30       	cpi	r24, 0x08	; 8
    20b0:	d8 f4       	brcc	.+54     	; 0x20e8 <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	6c df       	rcall	.-296    	; 0x1f8e <adcch_get_gain_setting>
    20b6:	28 2f       	mov	r18, r24
    20b8:	23 60       	ori	r18, 0x03	; 3
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	98 2f       	mov	r25, r24
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	84 50       	subi	r24, 0x04	; 4
    20da:	89 2b       	or	r24, r25
    20dc:	28 2f       	mov	r18, r24
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	fc 01       	movw	r30, r24
    20e4:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    20e6:	3d c0       	rjmp	.+122    	; 0x2162 <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	e1 f4       	brne	.+56     	; 0x2126 <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	22 e0       	ldi	r18, 0x02	; 2
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	98 2f       	mov	r25, r24
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	88 30       	cpi	r24, 0x08	; 8
    2110:	11 f4       	brne	.+4      	; 0x2116 <adcch_set_input+0xfe>
    2112:	85 e0       	ldi	r24, 0x05	; 5
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <adcch_set_input+0x100>
    2116:	87 e0       	ldi	r24, 0x07	; 7
    2118:	89 2b       	or	r24, r25
    211a:	28 2f       	mov	r18, r24
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2124:	1e c0       	rjmp	.+60     	; 0x2162 <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	32 df       	rcall	.-412    	; 0x1f8e <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    212a:	28 2f       	mov	r18, r24
    212c:	23 60       	ori	r18, 0x03	; 3
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	fc 01       	movw	r30, r24
    2134:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	98 2f       	mov	r25, r24
    214a:	8c 81       	ldd	r24, Y+4	; 0x04
    214c:	89 30       	cpi	r24, 0x09	; 9
    214e:	11 f4       	brne	.+4      	; 0x2154 <adcch_set_input+0x13c>
    2150:	84 e0       	ldi	r24, 0x04	; 4
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <adcch_set_input+0x13e>
    2154:	87 e0       	ldi	r24, 0x07	; 7
    2156:	89 2b       	or	r24, r25
    2158:	28 2f       	mov	r18, r24
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	fc 01       	movw	r30, r24
    2160:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    2162:	00 00       	nop
    2164:	25 96       	adiw	r28, 0x05	; 5
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask)
{
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	2e 97       	sbiw	r28, 0x0e	; 14
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	8c 87       	std	Y+12, r24	; 0x0c
    2180:	9d 87       	std	Y+13, r25	; 0x0d
    2182:	6e 87       	std	Y+14, r22	; 0x0e
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    2184:	8c 85       	ldd	r24, Y+12	; 0x0c
    2186:	9d 85       	ldd	r25, Y+13	; 0x0d
    2188:	9e 01       	movw	r18, r28
    218a:	2f 5f       	subi	r18, 0xFF	; 255
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	b9 01       	movw	r22, r18
    2190:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    2194:	9e 01       	movw	r18, r28
    2196:	28 5f       	subi	r18, 0xF8	; 248
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	8c 85       	ldd	r24, Y+12	; 0x0c
    219c:	9d 85       	ldd	r25, Y+13	; 0x0d
    219e:	a9 01       	movw	r20, r18
    21a0:	6e 85       	ldd	r22, Y+14	; 0x0e
    21a2:	4e d8       	rcall	.-3940   	; 0x1240 <adcch_read_configuration>
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
    21a4:	20 e1       	ldi	r18, 0x10	; 16
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	ce 01       	movw	r24, r28
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	e6 dd       	rcall	.-1076   	; 0x1d7c <adc_set_conversion_parameters>
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	ce 01       	movw	r24, r28
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	1f de       	rcall	.-962    	; 0x1dfa <adc_set_conversion_trigger>
	adc_set_clock_rate(&adc_conf, 200000UL);
    21bc:	40 e4       	ldi	r20, 0x40	; 64
    21be:	5d e0       	ldi	r21, 0x0D	; 13
    21c0:	63 e0       	ldi	r22, 0x03	; 3
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	74 dd       	rcall	.-1304   	; 0x1cb2 <adc_set_clock_rate>
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 0);
    21ca:	ce 01       	movw	r24, r28
    21cc:	08 96       	adiw	r24, 0x08	; 8
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	4a e0       	ldi	r20, 0x0A	; 10
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	21 df       	rcall	.-446    	; 0x2018 <adcch_set_input>
	adc_write_configuration(adc, &adc_conf);
    21d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    21d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    21da:	9e 01       	movw	r18, r28
    21dc:	2f 5f       	subi	r18, 0xFF	; 255
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	b9 01       	movw	r22, r18
    21e2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    21e6:	9e 01       	movw	r18, r28
    21e8:	28 5f       	subi	r18, 0xF8	; 248
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    21ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    21f0:	a9 01       	movw	r20, r18
    21f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    21f4:	0e 94 ab 08 	call	0x1156	; 0x1156 <adcch_write_configuration>
	
	
}
    21f8:	00 00       	nop
    21fa:	2e 96       	adiw	r28, 0x0e	; 14
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <thermistor_init>:
void thermistor_init(void)
{
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	adc_init(&THERM_ADC,THERM_ADC_CH);
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	92 e0       	ldi	r25, 0x02	; 2
    2214:	ad df       	rcall	.-166    	; 0x2170 <adc_init>
	
	if(DEBUG) printf("Thermistor Initialized.\n");
    2216:	8f e4       	ldi	r24, 0x4F	; 79
    2218:	90 e2       	ldi	r25, 0x20	; 32
    221a:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
}
    221e:	00 00       	nop
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <volt_init>:
void volt_init(void)
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	adc_init(&VOLT_ADC,VOLT_ADC_CH);
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	80 e4       	ldi	r24, 0x40	; 64
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	9d df       	rcall	.-198    	; 0x2170 <adc_init>
	
	if(DEBUG) printf("Voltage Initialized.\n");
    2236:	87 e6       	ldi	r24, 0x67	; 103
    2238:	90 e2       	ldi	r25, 0x20	; 32
    223a:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
}
    223e:	00 00       	nop
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	08 95       	ret

00002246 <getADCRead>:


float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	29 97       	sbiw	r28, 0x09	; 9
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	98 87       	std	Y+8, r25	; 0x08
    2258:	69 87       	std	Y+9, r22	; 0x09
		adc_enable(adc);
    225a:	8f 81       	ldd	r24, Y+7	; 0x07
    225c:	98 85       	ldd	r25, Y+8	; 0x08
    225e:	0e 94 af 02 	call	0x55e	; 0x55e <adc_enable>
		
		
		adc_start_conversion(adc, ch_mask);
    2262:	8f 81       	ldd	r24, Y+7	; 0x07
    2264:	98 85       	ldd	r25, Y+8	; 0x08
    2266:	69 85       	ldd	r22, Y+9	; 0x09
    2268:	bb dc       	rcall	.-1674   	; 0x1be0 <adc_start_conversion>
		adc_wait_for_interrupt_flag(adc, ch_mask);
    226a:	8f 81       	ldd	r24, Y+7	; 0x07
    226c:	98 85       	ldd	r25, Y+8	; 0x08
    226e:	69 85       	ldd	r22, Y+9	; 0x09
    2270:	05 dd       	rcall	.-1526   	; 0x1c7c <adc_wait_for_interrupt_flag>
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	8d 83       	std	Y+5, r24	; 0x05
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    227e:	1e 82       	std	Y+6, r1	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	83 70       	andi	r24, 0x03	; 3
    2288:	99 27       	eor	r25, r25
    228a:	89 2b       	or	r24, r25
    228c:	39 f4       	brne	.+14     	; 0x229c <getADCRead+0x56>
		index += 2;
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	8e 5f       	subi	r24, 0xFE	; 254
    2292:	8e 83       	std	Y+6, r24	; 0x06
		ch_mask >>= 2;
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	86 95       	lsr	r24
    2298:	86 95       	lsr	r24
    229a:	8d 83       	std	Y+5, r24	; 0x05
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	99 27       	eor	r25, r25
    22a6:	89 2b       	or	r24, r25
    22a8:	19 f4       	brne	.+6      	; 0x22b0 <getADCRead+0x6a>
		index++;
    22aa:	8e 81       	ldd	r24, Y+6	; 0x06
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	9c 01       	movw	r18, r24
    22b6:	20 5e       	subi	r18, 0xE0	; 224
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
		uint16_t adcReading = adc_get_result(adc, ch_mask);
    22d0:	fc 01       	movw	r30, r24
    22d2:	84 81       	ldd	r24, Z+4	; 0x04
    22d4:	95 81       	ldd	r25, Z+5	; 0x05
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	9a 83       	std	Y+2, r25	; 0x02
		//printf("ADC reading = %u\n", adcReading);
		//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
		//printf("voltage: %f \n", voltage);
		
		adc_disable(adc);
    22da:	8f 81       	ldd	r24, Y+7	; 0x07
    22dc:	98 85       	ldd	r25, Y+8	; 0x08
    22de:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <adc_disable>
		return adcReading;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	cc 01       	movw	r24, r24
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
	
}
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	29 96       	adiw	r28, 0x09	; 9
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <getVoltage>:
float getVoltage(void)
{
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	00 d0       	rcall	.+0      	; 0x230e <getVoltage+0x6>
    230e:	1f 92       	push	r1
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	float adc_val = getADCRead(&VOLT_ADC,VOLT_ADC_CH)/4096.0*2;
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	80 e4       	ldi	r24, 0x40	; 64
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	95 df       	rcall	.-214    	; 0x2246 <getADCRead>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	55 e4       	ldi	r21, 0x45	; 69
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 01       	movw	r18, r24
    2336:	ad 01       	movw	r20, r26
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	ab 83       	std	Y+3, r26	; 0x03
    234a:	bc 83       	std	Y+4, r27	; 0x04
	if(DEBUG && DEBUG_ADC) printf("volt: %f\n",adc_val);
	return adc_val;
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	ab 81       	ldd	r26, Y+3	; 0x03
    2352:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	24 96       	adiw	r28, 0x04	; 4
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	08 95       	ret

00002364 <getTemperature>:
float getTemperature(void)
{
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	28 97       	sbiw	r28, 0x08	; 8
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	de bf       	out	0x3e, r29	; 62
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	92 e0       	ldi	r25, 0x02	; 2
    2378:	66 df       	rcall	.-308    	; 0x2246 <getADCRead>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	25 ee       	ldi	r18, 0xE5	; 229
    2380:	30 ed       	ldi	r19, 0xD0	; 208
    2382:	42 e2       	ldi	r20, 0x22	; 34
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	ab 83       	std	Y+3, r26	; 0x03
    2398:	bc 83       	std	Y+4, r27	; 0x04
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
    239a:	29 81       	ldd	r18, Y+1	; 0x01
    239c:	3a 81       	ldd	r19, Y+2	; 0x02
    239e:	4b 81       	ldd	r20, Y+3	; 0x03
    23a0:	5c 81       	ldd	r21, Y+4	; 0x04
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	80 e8       	ldi	r24, 0x80	; 128
    23a8:	95 e4       	ldi	r25, 0x45	; 69
    23aa:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__subsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 fb 54 	call	0xa9f6	; 0xa9f6 <log>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	2c e7       	ldi	r18, 0x7C	; 124
    23d4:	34 ed       	ldi	r19, 0xD4	; 212
    23d6:	43 e8       	ldi	r20, 0x83	; 131
    23d8:	59 e3       	ldi	r21, 0x39	; 57
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	2f e0       	ldi	r18, 0x0F	; 15
    23e8:	3f ec       	ldi	r19, 0xCF	; 207
    23ea:	4b e5       	ldi	r20, 0x5B	; 91
    23ec:	5b e3       	ldi	r21, 0x3B	; 59
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9c 01       	movw	r18, r24
    23fc:	ad 01       	movw	r20, r26
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	80 e8       	ldi	r24, 0x80	; 128
    2404:	9f e3       	ldi	r25, 0x3F	; 63
    2406:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 c6 53 	call	0xa78c	; 0xa78c <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	af 83       	std	Y+7, r26	; 0x07
    2420:	b8 87       	std	Y+8, r27	; 0x08
	if(DEBUG && DEBUG_ADC) printf("temp: %f\n", temperature-273.15);
	return (temperature - 273.15);
    2422:	6d 81       	ldd	r22, Y+5	; 0x05
    2424:	7e 81       	ldd	r23, Y+6	; 0x06
    2426:	8f 81       	ldd	r24, Y+7	; 0x07
    2428:	98 85       	ldd	r25, Y+8	; 0x08
    242a:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	23 e3       	ldi	r18, 0x33	; 51
    2434:	33 e9       	ldi	r19, 0x93	; 147
    2436:	48 e8       	ldi	r20, 0x88	; 136
    2438:	53 e4       	ldi	r21, 0x43	; 67
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__subsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
	
	
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	28 96       	adiw	r28, 0x08	; 8
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <bno055_init>:
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	return com_rslt;
}
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	27 97       	sbiw	r28, 0x07	; 7
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	8e 83       	std	Y+6, r24	; 0x06
    2466:	9f 83       	std	Y+7, r25	; 0x07
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	1a 82       	std	Y+2, r1	; 0x02
    246e:	1b 82       	std	Y+3, r1	; 0x03
    2470:	1c 82       	std	Y+4, r1	; 0x04
    2472:	1d 82       	std	Y+5, r1	; 0x05
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	80 93 9e 22 	sts	0x229E, r24	; 0x80229e <p_bno055>
    247c:	90 93 9f 22 	sts	0x229F, r25	; 0x80229f <p_bno055+0x1>
    2480:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2484:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2488:	dc 01       	movw	r26, r24
    248a:	19 96       	adiw	r26, 0x09	; 9
    248c:	ed 91       	ld	r30, X+
    248e:	fc 91       	ld	r31, X
    2490:	1a 97       	sbiw	r26, 0x0a	; 10
    2492:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2496:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    249a:	dc 01       	movw	r26, r24
    249c:	18 96       	adiw	r26, 0x08	; 8
    249e:	3c 91       	ld	r19, X
    24a0:	ce 01       	movw	r24, r28
    24a2:	03 96       	adiw	r24, 0x03	; 3
    24a4:	21 e0       	ldi	r18, 0x01	; 1
    24a6:	ac 01       	movw	r20, r24
    24a8:	67 e0       	ldi	r22, 0x07	; 7
    24aa:	83 2f       	mov	r24, r19
    24ac:	19 95       	eicall
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    24b4:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    24b8:	dc 01       	movw	r26, r24
    24ba:	1b 96       	adiw	r26, 0x0b	; 11
    24bc:	ed 91       	ld	r30, X+
    24be:	fc 91       	ld	r31, X
    24c0:	1c 97       	sbiw	r26, 0x0c	; 12
    24c2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    24c6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    24ca:	dc 01       	movw	r26, r24
    24cc:	18 96       	adiw	r26, 0x08	; 8
    24ce:	3c 91       	ld	r19, X
    24d0:	ce 01       	movw	r24, r28
    24d2:	02 96       	adiw	r24, 0x02	; 2
    24d4:	21 e0       	ldi	r18, 0x01	; 1
    24d6:	ac 01       	movw	r20, r24
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	83 2f       	mov	r24, r19
    24dc:	19 95       	eicall
    24de:	98 2f       	mov	r25, r24
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	89 0f       	add	r24, r25
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    24ea:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    24ee:	2a 81       	ldd	r18, Y+2	; 0x02
    24f0:	fc 01       	movw	r30, r24
    24f2:	20 83       	st	Z, r18
    24f4:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    24f8:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    24fc:	dc 01       	movw	r26, r24
    24fe:	1b 96       	adiw	r26, 0x0b	; 11
    2500:	ed 91       	ld	r30, X+
    2502:	fc 91       	ld	r31, X
    2504:	1c 97       	sbiw	r26, 0x0c	; 12
    2506:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    250a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    250e:	dc 01       	movw	r26, r24
    2510:	18 96       	adiw	r26, 0x08	; 8
    2512:	3c 91       	ld	r19, X
    2514:	ce 01       	movw	r24, r28
    2516:	02 96       	adiw	r24, 0x02	; 2
    2518:	21 e0       	ldi	r18, 0x01	; 1
    251a:	ac 01       	movw	r20, r24
    251c:	61 e0       	ldi	r22, 0x01	; 1
    251e:	83 2f       	mov	r24, r19
    2520:	19 95       	eicall
    2522:	98 2f       	mov	r25, r24
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	89 0f       	add	r24, r25
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    252e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2532:	2a 81       	ldd	r18, Y+2	; 0x02
    2534:	fc 01       	movw	r30, r24
    2536:	24 83       	std	Z+4, r18	; 0x04
    2538:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    253c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2540:	dc 01       	movw	r26, r24
    2542:	1b 96       	adiw	r26, 0x0b	; 11
    2544:	ed 91       	ld	r30, X+
    2546:	fc 91       	ld	r31, X
    2548:	1c 97       	sbiw	r26, 0x0c	; 12
    254a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    254e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2552:	dc 01       	movw	r26, r24
    2554:	18 96       	adiw	r26, 0x08	; 8
    2556:	3c 91       	ld	r19, X
    2558:	ce 01       	movw	r24, r28
    255a:	02 96       	adiw	r24, 0x02	; 2
    255c:	21 e0       	ldi	r18, 0x01	; 1
    255e:	ac 01       	movw	r20, r24
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	83 2f       	mov	r24, r19
    2564:	19 95       	eicall
    2566:	98 2f       	mov	r25, r24
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	89 0f       	add	r24, r25
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2572:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2576:	2a 81       	ldd	r18, Y+2	; 0x02
    2578:	fc 01       	movw	r30, r24
    257a:	25 83       	std	Z+5, r18	; 0x05
    257c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2580:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2584:	dc 01       	movw	r26, r24
    2586:	1b 96       	adiw	r26, 0x0b	; 11
    2588:	ed 91       	ld	r30, X+
    258a:	fc 91       	ld	r31, X
    258c:	1c 97       	sbiw	r26, 0x0c	; 12
    258e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2592:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2596:	dc 01       	movw	r26, r24
    2598:	18 96       	adiw	r26, 0x08	; 8
    259a:	3c 91       	ld	r19, X
    259c:	ce 01       	movw	r24, r28
    259e:	02 96       	adiw	r24, 0x02	; 2
    25a0:	21 e0       	ldi	r18, 0x01	; 1
    25a2:	ac 01       	movw	r20, r24
    25a4:	63 e0       	ldi	r22, 0x03	; 3
    25a6:	83 2f       	mov	r24, r19
    25a8:	19 95       	eicall
    25aa:	98 2f       	mov	r25, r24
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	89 0f       	add	r24, r25
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    25b6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    25ba:	2a 81       	ldd	r18, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	26 83       	std	Z+6, r18	; 0x06
    25c0:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    25c4:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    25c8:	dc 01       	movw	r26, r24
    25ca:	1b 96       	adiw	r26, 0x0b	; 11
    25cc:	ed 91       	ld	r30, X+
    25ce:	fc 91       	ld	r31, X
    25d0:	1c 97       	sbiw	r26, 0x0c	; 12
    25d2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    25d6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    25da:	dc 01       	movw	r26, r24
    25dc:	18 96       	adiw	r26, 0x08	; 8
    25de:	3c 91       	ld	r19, X
    25e0:	ce 01       	movw	r24, r28
    25e2:	02 96       	adiw	r24, 0x02	; 2
    25e4:	21 e0       	ldi	r18, 0x01	; 1
    25e6:	ac 01       	movw	r20, r24
    25e8:	66 e0       	ldi	r22, 0x06	; 6
    25ea:	83 2f       	mov	r24, r19
    25ec:	19 95       	eicall
    25ee:	98 2f       	mov	r25, r24
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	89 0f       	add	r24, r25
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    25fa:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    25fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	27 83       	std	Z+7, r18	; 0x07
    2604:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2608:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    260c:	dc 01       	movw	r26, r24
    260e:	1b 96       	adiw	r26, 0x0b	; 11
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	1c 97       	sbiw	r26, 0x0c	; 12
    2616:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    261a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    261e:	dc 01       	movw	r26, r24
    2620:	18 96       	adiw	r26, 0x08	; 8
    2622:	3c 91       	ld	r19, X
    2624:	ce 01       	movw	r24, r28
    2626:	04 96       	adiw	r24, 0x04	; 4
    2628:	22 e0       	ldi	r18, 0x02	; 2
    262a:	ac 01       	movw	r20, r24
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	83 2f       	mov	r24, r19
    2630:	19 95       	eicall
    2632:	98 2f       	mov	r25, r24
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	89 0f       	add	r24, r25
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	8c 83       	std	Y+4, r24	; 0x04
    263e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2642:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2646:	2d 81       	ldd	r18, Y+5	; 0x05
    2648:	22 2f       	mov	r18, r18
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	52 2f       	mov	r21, r18
    264e:	44 27       	eor	r20, r20
    2650:	2c 81       	ldd	r18, Y+4	; 0x04
    2652:	22 2f       	mov	r18, r18
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	24 2b       	or	r18, r20
    2658:	35 2b       	or	r19, r21
    265a:	fc 01       	movw	r30, r24
    265c:	21 83       	std	Z+1, r18	; 0x01
    265e:	32 83       	std	Z+2, r19	; 0x02
    2660:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2664:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2668:	dc 01       	movw	r26, r24
    266a:	1b 96       	adiw	r26, 0x0b	; 11
    266c:	ed 91       	ld	r30, X+
    266e:	fc 91       	ld	r31, X
    2670:	1c 97       	sbiw	r26, 0x0c	; 12
    2672:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2676:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    267a:	dc 01       	movw	r26, r24
    267c:	18 96       	adiw	r26, 0x08	; 8
    267e:	3c 91       	ld	r19, X
    2680:	ce 01       	movw	r24, r28
    2682:	02 96       	adiw	r24, 0x02	; 2
    2684:	21 e0       	ldi	r18, 0x01	; 1
    2686:	ac 01       	movw	r20, r24
    2688:	67 e0       	ldi	r22, 0x07	; 7
    268a:	83 2f       	mov	r24, r19
    268c:	19 95       	eicall
    268e:	98 2f       	mov	r25, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	89 0f       	add	r24, r25
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    269a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    269e:	2a 81       	ldd	r18, Y+2	; 0x02
    26a0:	fc 01       	movw	r30, r24
    26a2:	23 83       	std	Z+3, r18	; 0x03
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	27 96       	adiw	r28, 0x07	; 7
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <bno055_write_register>:
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	25 97       	sbiw	r28, 0x05	; 5
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	6b 83       	std	Y+3, r22	; 0x03
    26c4:	7c 83       	std	Y+4, r23	; 0x04
    26c6:	4d 83       	std	Y+5, r20	; 0x05
    26c8:	8f ef       	ldi	r24, 0xFF	; 255
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    26d0:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    26d4:	89 2b       	or	r24, r25
    26d6:	11 f4       	brne	.+4      	; 0x26dc <bno055_write_register+0x2a>
    26d8:	81 e8       	ldi	r24, 0x81	; 129
    26da:	19 c0       	rjmp	.+50     	; 0x270e <bno055_write_register+0x5c>
    26dc:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    26e0:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    26e4:	dc 01       	movw	r26, r24
    26e6:	19 96       	adiw	r26, 0x09	; 9
    26e8:	ed 91       	ld	r30, X+
    26ea:	fc 91       	ld	r31, X
    26ec:	1a 97       	sbiw	r26, 0x0a	; 10
    26ee:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    26f2:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    26f6:	dc 01       	movw	r26, r24
    26f8:	18 96       	adiw	r26, 0x08	; 8
    26fa:	3c 91       	ld	r19, X
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	2d 81       	ldd	r18, Y+5	; 0x05
    2702:	ac 01       	movw	r20, r24
    2704:	6a 81       	ldd	r22, Y+2	; 0x02
    2706:	83 2f       	mov	r24, r19
    2708:	19 95       	eicall
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	25 96       	adiw	r28, 0x05	; 5
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	08 95       	ret

0000271a <bno055_write_page_id>:
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	00 d0       	rcall	.+0      	; 0x2720 <bno055_write_page_id+0x6>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	1a 82       	std	Y+2, r1	; 0x02
    272c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2730:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2734:	89 2b       	or	r24, r25
    2736:	11 f4       	brne	.+4      	; 0x273c <bno055_write_page_id+0x22>
    2738:	81 e8       	ldi	r24, 0x81	; 129
    273a:	46 c0       	rjmp	.+140    	; 0x27c8 <bno055_write_page_id+0xae>
    273c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2740:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2744:	dc 01       	movw	r26, r24
    2746:	1b 96       	adiw	r26, 0x0b	; 11
    2748:	ed 91       	ld	r30, X+
    274a:	fc 91       	ld	r31, X
    274c:	1c 97       	sbiw	r26, 0x0c	; 12
    274e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2752:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2756:	dc 01       	movw	r26, r24
    2758:	18 96       	adiw	r26, 0x08	; 8
    275a:	3c 91       	ld	r19, X
    275c:	ce 01       	movw	r24, r28
    275e:	02 96       	adiw	r24, 0x02	; 2
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	ac 01       	movw	r20, r24
    2764:	67 e0       	ldi	r22, 0x07	; 7
    2766:	83 2f       	mov	r24, r19
    2768:	19 95       	eicall
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	88 23       	and	r24, r24
    2770:	41 f5       	brne	.+80     	; 0x27c2 <bno055_write_page_id+0xa8>
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	8a 83       	std	Y+2, r24	; 0x02
    2776:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    277a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    277e:	dc 01       	movw	r26, r24
    2780:	19 96       	adiw	r26, 0x09	; 9
    2782:	ed 91       	ld	r30, X+
    2784:	fc 91       	ld	r31, X
    2786:	1a 97       	sbiw	r26, 0x0a	; 10
    2788:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    278c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2790:	dc 01       	movw	r26, r24
    2792:	18 96       	adiw	r26, 0x08	; 8
    2794:	3c 91       	ld	r19, X
    2796:	ce 01       	movw	r24, r28
    2798:	02 96       	adiw	r24, 0x02	; 2
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	ac 01       	movw	r20, r24
    279e:	67 e0       	ldi	r22, 0x07	; 7
    27a0:	83 2f       	mov	r24, r19
    27a2:	19 95       	eicall
    27a4:	98 2f       	mov	r25, r24
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	89 0f       	add	r24, r25
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	88 23       	and	r24, r24
    27b0:	51 f4       	brne	.+20     	; 0x27c6 <bno055_write_page_id+0xac>
    27b2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    27b6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    27ba:	2b 81       	ldd	r18, Y+3	; 0x03
    27bc:	fc 01       	movw	r30, r24
    27be:	23 83       	std	Z+3, r18	; 0x03
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <bno055_write_page_id+0xac>
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	23 96       	adiw	r28, 0x03	; 3
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <bno055_read_euler_hrp>:
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	2a 97       	sbiw	r28, 0x0a	; 10
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	89 87       	std	Y+9, r24	; 0x09
    27e4:	9a 87       	std	Y+10, r25	; 0x0a
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	26 e0       	ldi	r18, 0x06	; 6
    27ec:	ce 01       	movw	r24, r28
    27ee:	03 96       	adiw	r24, 0x03	; 3
    27f0:	dc 01       	movw	r26, r24
    27f2:	e2 2f       	mov	r30, r18
    27f4:	1d 92       	st	X+, r1
    27f6:	ea 95       	dec	r30
    27f8:	e9 f7       	brne	.-6      	; 0x27f4 <bno055_read_euler_hrp+0x20>
    27fa:	8f ef       	ldi	r24, 0xFF	; 255
    27fc:	8a 83       	std	Y+2, r24	; 0x02
    27fe:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2802:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2806:	89 2b       	or	r24, r25
    2808:	11 f4       	brne	.+4      	; 0x280e <bno055_read_euler_hrp+0x3a>
    280a:	81 e8       	ldi	r24, 0x81	; 129
    280c:	72 c0       	rjmp	.+228    	; 0x28f2 <bno055_read_euler_hrp+0x11e>
    280e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2812:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2816:	dc 01       	movw	r26, r24
    2818:	13 96       	adiw	r26, 0x03	; 3
    281a:	8c 91       	ld	r24, X
    281c:	88 23       	and	r24, r24
    281e:	19 f0       	breq	.+6      	; 0x2826 <bno055_read_euler_hrp+0x52>
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	7b df       	rcall	.-266    	; 0x271a <bno055_write_page_id>
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	88 23       	and	r24, r24
    282a:	49 f0       	breq	.+18     	; 0x283e <bno055_read_euler_hrp+0x6a>
    282c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2830:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2834:	fc 01       	movw	r30, r24
    2836:	83 81       	ldd	r24, Z+3	; 0x03
    2838:	88 23       	and	r24, r24
    283a:	09 f0       	breq	.+2      	; 0x283e <bno055_read_euler_hrp+0x6a>
    283c:	57 c0       	rjmp	.+174    	; 0x28ec <bno055_read_euler_hrp+0x118>
    283e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2842:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2846:	dc 01       	movw	r26, r24
    2848:	1b 96       	adiw	r26, 0x0b	; 11
    284a:	ed 91       	ld	r30, X+
    284c:	fc 91       	ld	r31, X
    284e:	1c 97       	sbiw	r26, 0x0c	; 12
    2850:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2854:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2858:	dc 01       	movw	r26, r24
    285a:	18 96       	adiw	r26, 0x08	; 8
    285c:	3c 91       	ld	r19, X
    285e:	ce 01       	movw	r24, r28
    2860:	03 96       	adiw	r24, 0x03	; 3
    2862:	26 e0       	ldi	r18, 0x06	; 6
    2864:	ac 01       	movw	r20, r24
    2866:	6a e1       	ldi	r22, 0x1A	; 26
    2868:	83 2f       	mov	r24, r19
    286a:	19 95       	eicall
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	8b 83       	std	Y+3, r24	; 0x03
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	8c 83       	std	Y+4, r24	; 0x04
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	08 2e       	mov	r0, r24
    287a:	00 0c       	add	r0, r0
    287c:	99 0b       	sbc	r25, r25
    287e:	38 2f       	mov	r19, r24
    2880:	22 27       	eor	r18, r18
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	28 2b       	or	r18, r24
    288a:	39 2b       	or	r19, r25
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
    2894:	31 83       	std	Z+1, r19	; 0x01
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	8e 83       	std	Y+6, r24	; 0x06
    289e:	8e 81       	ldd	r24, Y+6	; 0x06
    28a0:	08 2e       	mov	r0, r24
    28a2:	00 0c       	add	r0, r0
    28a4:	99 0b       	sbc	r25, r25
    28a6:	38 2f       	mov	r19, r24
    28a8:	22 27       	eor	r18, r18
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	28 2b       	or	r18, r24
    28b2:	39 2b       	or	r19, r25
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	dc 01       	movw	r26, r24
    28ba:	12 96       	adiw	r26, 0x02	; 2
    28bc:	2d 93       	st	X+, r18
    28be:	3c 93       	st	X, r19
    28c0:	13 97       	sbiw	r26, 0x03	; 3
    28c2:	8f 81       	ldd	r24, Y+7	; 0x07
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	88 85       	ldd	r24, Y+8	; 0x08
    28c8:	88 87       	std	Y+8, r24	; 0x08
    28ca:	88 85       	ldd	r24, Y+8	; 0x08
    28cc:	08 2e       	mov	r0, r24
    28ce:	00 0c       	add	r0, r0
    28d0:	99 0b       	sbc	r25, r25
    28d2:	38 2f       	mov	r19, r24
    28d4:	22 27       	eor	r18, r18
    28d6:	8f 81       	ldd	r24, Y+7	; 0x07
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	28 2b       	or	r18, r24
    28de:	39 2b       	or	r19, r25
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	fc 01       	movw	r30, r24
    28e6:	24 83       	std	Z+4, r18	; 0x04
    28e8:	35 83       	std	Z+5, r19	; 0x05
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <bno055_read_euler_hrp+0x11c>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	2a 96       	adiw	r28, 0x0a	; 10
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <bno055_read_linear_accel_xyz>:
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	2a 97       	sbiw	r28, 0x0a	; 10
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	89 87       	std	Y+9, r24	; 0x09
    290e:	9a 87       	std	Y+10, r25	; 0x0a
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	26 e0       	ldi	r18, 0x06	; 6
    2916:	ce 01       	movw	r24, r28
    2918:	03 96       	adiw	r24, 0x03	; 3
    291a:	dc 01       	movw	r26, r24
    291c:	e2 2f       	mov	r30, r18
    291e:	1d 92       	st	X+, r1
    2920:	ea 95       	dec	r30
    2922:	e9 f7       	brne	.-6      	; 0x291e <bno055_read_linear_accel_xyz+0x20>
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    292c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2930:	89 2b       	or	r24, r25
    2932:	11 f4       	brne	.+4      	; 0x2938 <bno055_read_linear_accel_xyz+0x3a>
    2934:	81 e8       	ldi	r24, 0x81	; 129
    2936:	72 c0       	rjmp	.+228    	; 0x2a1c <bno055_read_linear_accel_xyz+0x11e>
    2938:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    293c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2940:	dc 01       	movw	r26, r24
    2942:	13 96       	adiw	r26, 0x03	; 3
    2944:	8c 91       	ld	r24, X
    2946:	88 23       	and	r24, r24
    2948:	19 f0       	breq	.+6      	; 0x2950 <bno055_read_linear_accel_xyz+0x52>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	e6 de       	rcall	.-564    	; 0x271a <bno055_write_page_id>
    294e:	8a 83       	std	Y+2, r24	; 0x02
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	88 23       	and	r24, r24
    2954:	49 f0       	breq	.+18     	; 0x2968 <bno055_read_linear_accel_xyz+0x6a>
    2956:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    295a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    295e:	fc 01       	movw	r30, r24
    2960:	83 81       	ldd	r24, Z+3	; 0x03
    2962:	88 23       	and	r24, r24
    2964:	09 f0       	breq	.+2      	; 0x2968 <bno055_read_linear_accel_xyz+0x6a>
    2966:	57 c0       	rjmp	.+174    	; 0x2a16 <bno055_read_linear_accel_xyz+0x118>
    2968:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    296c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2970:	dc 01       	movw	r26, r24
    2972:	1b 96       	adiw	r26, 0x0b	; 11
    2974:	ed 91       	ld	r30, X+
    2976:	fc 91       	ld	r31, X
    2978:	1c 97       	sbiw	r26, 0x0c	; 12
    297a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    297e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2982:	dc 01       	movw	r26, r24
    2984:	18 96       	adiw	r26, 0x08	; 8
    2986:	3c 91       	ld	r19, X
    2988:	ce 01       	movw	r24, r28
    298a:	03 96       	adiw	r24, 0x03	; 3
    298c:	26 e0       	ldi	r18, 0x06	; 6
    298e:	ac 01       	movw	r20, r24
    2990:	68 e2       	ldi	r22, 0x28	; 40
    2992:	83 2f       	mov	r24, r19
    2994:	19 95       	eicall
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	8b 83       	std	Y+3, r24	; 0x03
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	8c 83       	std	Y+4, r24	; 0x04
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	08 2e       	mov	r0, r24
    29a4:	00 0c       	add	r0, r0
    29a6:	99 0b       	sbc	r25, r25
    29a8:	38 2f       	mov	r19, r24
    29aa:	22 27       	eor	r18, r18
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	28 2b       	or	r18, r24
    29b4:	39 2b       	or	r19, r25
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	fc 01       	movw	r30, r24
    29bc:	20 83       	st	Z, r18
    29be:	31 83       	std	Z+1, r19	; 0x01
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	8e 83       	std	Y+6, r24	; 0x06
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	08 2e       	mov	r0, r24
    29cc:	00 0c       	add	r0, r0
    29ce:	99 0b       	sbc	r25, r25
    29d0:	38 2f       	mov	r19, r24
    29d2:	22 27       	eor	r18, r18
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	28 2b       	or	r18, r24
    29dc:	39 2b       	or	r19, r25
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	dc 01       	movw	r26, r24
    29e4:	12 96       	adiw	r26, 0x02	; 2
    29e6:	2d 93       	st	X+, r18
    29e8:	3c 93       	st	X, r19
    29ea:	13 97       	sbiw	r26, 0x03	; 3
    29ec:	8f 81       	ldd	r24, Y+7	; 0x07
    29ee:	8f 83       	std	Y+7, r24	; 0x07
    29f0:	88 85       	ldd	r24, Y+8	; 0x08
    29f2:	88 87       	std	Y+8, r24	; 0x08
    29f4:	88 85       	ldd	r24, Y+8	; 0x08
    29f6:	08 2e       	mov	r0, r24
    29f8:	00 0c       	add	r0, r0
    29fa:	99 0b       	sbc	r25, r25
    29fc:	38 2f       	mov	r19, r24
    29fe:	22 27       	eor	r18, r18
    2a00:	8f 81       	ldd	r24, Y+7	; 0x07
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	28 2b       	or	r18, r24
    2a08:	39 2b       	or	r19, r25
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	fc 01       	movw	r30, r24
    2a10:	24 83       	std	Z+4, r18	; 0x04
    2a12:	35 83       	std	Z+5, r19	; 0x05
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <bno055_read_linear_accel_xyz+0x11c>
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	2a 96       	adiw	r28, 0x0a	; 10
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	08 95       	ret

00002a28 <bno055_convert_double_euler_hpr_deg>:
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	2a 97       	sbiw	r28, 0x0a	; 10
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	89 87       	std	Y+9, r24	; 0x09
    2a38:	9a 87       	std	Y+10, r25	; 0x0a
    2a3a:	8f ef       	ldi	r24, 0xFF	; 255
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	1a 82       	std	Y+2, r1	; 0x02
    2a40:	1b 82       	std	Y+3, r1	; 0x03
    2a42:	1c 82       	std	Y+4, r1	; 0x04
    2a44:	1d 82       	std	Y+5, r1	; 0x05
    2a46:	1e 82       	std	Y+6, r1	; 0x06
    2a48:	1f 82       	std	Y+7, r1	; 0x07
    2a4a:	18 86       	std	Y+8, r1	; 0x08
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	08 96       	adiw	r24, 0x08	; 8
    2a50:	64 d2       	rcall	.+1224   	; 0x2f1a <bno055_get_euler_unit>
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	88 85       	ldd	r24, Y+8	; 0x08
    2a56:	88 23       	and	r24, r24
    2a58:	31 f0       	breq	.+12     	; 0x2a66 <bno055_convert_double_euler_hpr_deg+0x3e>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	bb d2       	rcall	.+1398   	; 0x2fd4 <bno055_set_euler_unit>
    2a5e:	98 2f       	mov	r25, r24
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	89 0f       	add	r24, r25
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	88 23       	and	r24, r24
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <bno055_convert_double_euler_hpr_deg+0x46>
    2a6c:	66 c0       	rjmp	.+204    	; 0x2b3a <bno055_convert_double_euler_hpr_deg+0x112>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	02 96       	adiw	r24, 0x02	; 2
    2a72:	b0 de       	rcall	.-672    	; 0x27d4 <bno055_read_euler_hrp>
    2a74:	98 2f       	mov	r25, r24
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	89 0f       	add	r24, r25
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	88 23       	and	r24, r24
    2a80:	09 f0       	breq	.+2      	; 0x2a84 <bno055_convert_double_euler_hpr_deg+0x5c>
    2a82:	58 c0       	rjmp	.+176    	; 0x2b34 <bno055_convert_double_euler_hpr_deg+0x10c>
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	09 2e       	mov	r0, r25
    2a8a:	00 0c       	add	r0, r0
    2a8c:	aa 0b       	sbc	r26, r26
    2a8e:	bb 0b       	sbc	r27, r27
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	29 85       	ldd	r18, Y+9	; 0x09
    2ab2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	80 83       	st	Z, r24
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	a2 83       	std	Z+2, r26	; 0x02
    2abc:	b3 83       	std	Z+3, r27	; 0x03
    2abe:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac2:	09 2e       	mov	r0, r25
    2ac4:	00 0c       	add	r0, r0
    2ac6:	aa 0b       	sbc	r26, r26
    2ac8:	bb 0b       	sbc	r27, r27
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	51 e4       	ldi	r21, 0x41	; 65
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	29 85       	ldd	r18, Y+9	; 0x09
    2aec:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aee:	f9 01       	movw	r30, r18
    2af0:	80 87       	std	Z+8, r24	; 0x08
    2af2:	91 87       	std	Z+9, r25	; 0x09
    2af4:	a2 87       	std	Z+10, r26	; 0x0a
    2af6:	b3 87       	std	Z+11, r27	; 0x0b
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	9d 81       	ldd	r25, Y+5	; 0x05
    2afc:	09 2e       	mov	r0, r25
    2afe:	00 0c       	add	r0, r0
    2b00:	aa 0b       	sbc	r26, r26
    2b02:	bb 0b       	sbc	r27, r27
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e8       	ldi	r20, 0x80	; 128
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	29 85       	ldd	r18, Y+9	; 0x09
    2b26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b28:	f9 01       	movw	r30, r18
    2b2a:	84 83       	std	Z+4, r24	; 0x04
    2b2c:	95 83       	std	Z+5, r25	; 0x05
    2b2e:	a6 83       	std	Z+6, r26	; 0x06
    2b30:	b7 83       	std	Z+7, r27	; 0x07
    2b32:	05 c0       	rjmp	.+10     	; 0x2b3e <bno055_convert_double_euler_hpr_deg+0x116>
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <bno055_convert_double_euler_hpr_deg+0x116>
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	2a 96       	adiw	r28, 0x0a	; 10
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	08 95       	ret

00002b4c <bno055_convert_double_linear_accel_xyz_msq>:
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	29 97       	sbiw	r28, 0x09	; 9
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	88 87       	std	Y+8, r24	; 0x08
    2b5c:	99 87       	std	Y+9, r25	; 0x09
    2b5e:	8f ef       	ldi	r24, 0xFF	; 255
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	1a 82       	std	Y+2, r1	; 0x02
    2b64:	1b 82       	std	Y+3, r1	; 0x03
    2b66:	1c 82       	std	Y+4, r1	; 0x04
    2b68:	1d 82       	std	Y+5, r1	; 0x05
    2b6a:	1e 82       	std	Y+6, r1	; 0x06
    2b6c:	1f 82       	std	Y+7, r1	; 0x07
    2b6e:	ce 01       	movw	r24, r28
    2b70:	02 96       	adiw	r24, 0x02	; 2
    2b72:	c5 de       	rcall	.-630    	; 0x28fe <bno055_read_linear_accel_xyz>
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	88 23       	and	r24, r24
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <bno055_convert_double_linear_accel_xyz_msq+0x32>
    2b7c:	58 c0       	rjmp	.+176    	; 0x2c2e <bno055_convert_double_linear_accel_xyz_msq+0xe2>
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	09 2e       	mov	r0, r25
    2b84:	00 0c       	add	r0, r0
    2b86:	aa 0b       	sbc	r26, r26
    2b88:	bb 0b       	sbc	r27, r27
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	48 ec       	ldi	r20, 0xC8	; 200
    2b9c:	52 e4       	ldi	r21, 0x42	; 66
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	28 85       	ldd	r18, Y+8	; 0x08
    2bac:	39 85       	ldd	r19, Y+9	; 0x09
    2bae:	f9 01       	movw	r30, r18
    2bb0:	80 83       	st	Z, r24
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	a2 83       	std	Z+2, r26	; 0x02
    2bb6:	b3 83       	std	Z+3, r27	; 0x03
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	09 2e       	mov	r0, r25
    2bbe:	00 0c       	add	r0, r0
    2bc0:	aa 0b       	sbc	r26, r26
    2bc2:	bb 0b       	sbc	r27, r27
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	48 ec       	ldi	r20, 0xC8	; 200
    2bd6:	52 e4       	ldi	r21, 0x42	; 66
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	28 85       	ldd	r18, Y+8	; 0x08
    2be6:	39 85       	ldd	r19, Y+9	; 0x09
    2be8:	f9 01       	movw	r30, r18
    2bea:	84 83       	std	Z+4, r24	; 0x04
    2bec:	95 83       	std	Z+5, r25	; 0x05
    2bee:	a6 83       	std	Z+6, r26	; 0x06
    2bf0:	b7 83       	std	Z+7, r27	; 0x07
    2bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf6:	09 2e       	mov	r0, r25
    2bf8:	00 0c       	add	r0, r0
    2bfa:	aa 0b       	sbc	r26, r26
    2bfc:	bb 0b       	sbc	r27, r27
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	48 ec       	ldi	r20, 0xC8	; 200
    2c10:	52 e4       	ldi	r21, 0x42	; 66
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	28 85       	ldd	r18, Y+8	; 0x08
    2c20:	39 85       	ldd	r19, Y+9	; 0x09
    2c22:	f9 01       	movw	r30, r18
    2c24:	80 87       	std	Z+8, r24	; 0x08
    2c26:	91 87       	std	Z+9, r25	; 0x09
    2c28:	a2 87       	std	Z+10, r26	; 0x0a
    2c2a:	b3 87       	std	Z+11, r27	; 0x0b
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <bno055_convert_double_linear_accel_xyz_msq+0xe6>
    2c2e:	8f ef       	ldi	r24, 0xFF	; 255
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	29 96       	adiw	r28, 0x09	; 9
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	08 95       	ret

00002c40 <bno055_get_mag_calib_stat>:
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	25 97       	sbiw	r28, 0x05	; 5
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	8c 83       	std	Y+4, r24	; 0x04
    2c50:	9d 83       	std	Y+5, r25	; 0x05
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	1b 82       	std	Y+3, r1	; 0x03
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
    2c5c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2c60:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2c64:	89 2b       	or	r24, r25
    2c66:	11 f4       	brne	.+4      	; 0x2c6c <bno055_get_mag_calib_stat+0x2c>
    2c68:	81 e8       	ldi	r24, 0x81	; 129
    2c6a:	3a c0       	rjmp	.+116    	; 0x2ce0 <bno055_get_mag_calib_stat+0xa0>
    2c6c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2c70:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2c74:	dc 01       	movw	r26, r24
    2c76:	13 96       	adiw	r26, 0x03	; 3
    2c78:	8c 91       	ld	r24, X
    2c7a:	88 23       	and	r24, r24
    2c7c:	19 f0       	breq	.+6      	; 0x2c84 <bno055_get_mag_calib_stat+0x44>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	4c dd       	rcall	.-1384   	; 0x271a <bno055_write_page_id>
    2c82:	8a 83       	std	Y+2, r24	; 0x02
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	88 23       	and	r24, r24
    2c88:	41 f0       	breq	.+16     	; 0x2c9a <bno055_get_mag_calib_stat+0x5a>
    2c8a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2c8e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2c92:	fc 01       	movw	r30, r24
    2c94:	83 81       	ldd	r24, Z+3	; 0x03
    2c96:	88 23       	and	r24, r24
    2c98:	01 f5       	brne	.+64     	; 0x2cda <bno055_get_mag_calib_stat+0x9a>
    2c9a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2c9e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	1b 96       	adiw	r26, 0x0b	; 11
    2ca6:	ed 91       	ld	r30, X+
    2ca8:	fc 91       	ld	r31, X
    2caa:	1c 97       	sbiw	r26, 0x0c	; 12
    2cac:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2cb0:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	18 96       	adiw	r26, 0x08	; 8
    2cb8:	3c 91       	ld	r19, X
    2cba:	ce 01       	movw	r24, r28
    2cbc:	03 96       	adiw	r24, 0x03	; 3
    2cbe:	21 e0       	ldi	r18, 0x01	; 1
    2cc0:	ac 01       	movw	r20, r24
    2cc2:	65 e3       	ldi	r22, 0x35	; 53
    2cc4:	83 2f       	mov	r24, r19
    2cc6:	19 95       	eicall
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	28 2f       	mov	r18, r24
    2cce:	23 70       	andi	r18, 0x03	; 3
    2cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	20 83       	st	Z, r18
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <bno055_get_mag_calib_stat+0x9e>
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	25 96       	adiw	r28, 0x05	; 5
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <bno055_get_accel_calib_stat>:
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	25 97       	sbiw	r28, 0x05	; 5
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	8c 83       	std	Y+4, r24	; 0x04
    2cfc:	9d 83       	std	Y+5, r25	; 0x05
    2cfe:	8f ef       	ldi	r24, 0xFF	; 255
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	1b 82       	std	Y+3, r1	; 0x03
    2d04:	8f ef       	ldi	r24, 0xFF	; 255
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2d0c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2d10:	89 2b       	or	r24, r25
    2d12:	11 f4       	brne	.+4      	; 0x2d18 <bno055_get_accel_calib_stat+0x2c>
    2d14:	81 e8       	ldi	r24, 0x81	; 129
    2d16:	41 c0       	rjmp	.+130    	; 0x2d9a <bno055_get_accel_calib_stat+0xae>
    2d18:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2d1c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2d20:	dc 01       	movw	r26, r24
    2d22:	13 96       	adiw	r26, 0x03	; 3
    2d24:	8c 91       	ld	r24, X
    2d26:	88 23       	and	r24, r24
    2d28:	19 f0       	breq	.+6      	; 0x2d30 <bno055_get_accel_calib_stat+0x44>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	f6 dc       	rcall	.-1556   	; 0x271a <bno055_write_page_id>
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	88 23       	and	r24, r24
    2d34:	41 f0       	breq	.+16     	; 0x2d46 <bno055_get_accel_calib_stat+0x5a>
    2d36:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2d3a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2d3e:	fc 01       	movw	r30, r24
    2d40:	83 81       	ldd	r24, Z+3	; 0x03
    2d42:	88 23       	and	r24, r24
    2d44:	39 f5       	brne	.+78     	; 0x2d94 <bno055_get_accel_calib_stat+0xa8>
    2d46:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2d4a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	1b 96       	adiw	r26, 0x0b	; 11
    2d52:	ed 91       	ld	r30, X+
    2d54:	fc 91       	ld	r31, X
    2d56:	1c 97       	sbiw	r26, 0x0c	; 12
    2d58:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2d5c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2d60:	dc 01       	movw	r26, r24
    2d62:	18 96       	adiw	r26, 0x08	; 8
    2d64:	3c 91       	ld	r19, X
    2d66:	ce 01       	movw	r24, r28
    2d68:	03 96       	adiw	r24, 0x03	; 3
    2d6a:	21 e0       	ldi	r18, 0x01	; 1
    2d6c:	ac 01       	movw	r20, r24
    2d6e:	65 e3       	ldi	r22, 0x35	; 53
    2d70:	83 2f       	mov	r24, r19
    2d72:	19 95       	eicall
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	8c 70       	andi	r24, 0x0C	; 12
    2d7e:	99 27       	eor	r25, r25
    2d80:	95 95       	asr	r25
    2d82:	87 95       	ror	r24
    2d84:	95 95       	asr	r25
    2d86:	87 95       	ror	r24
    2d88:	28 2f       	mov	r18, r24
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8e:	fc 01       	movw	r30, r24
    2d90:	20 83       	st	Z, r18
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <bno055_get_accel_calib_stat+0xac>
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	25 96       	adiw	r28, 0x05	; 5
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	08 95       	ret

00002da6 <bno055_get_gyro_calib_stat>:
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	25 97       	sbiw	r28, 0x05	; 5
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	8c 83       	std	Y+4, r24	; 0x04
    2db6:	9d 83       	std	Y+5, r25	; 0x05
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	1b 82       	std	Y+3, r1	; 0x03
    2dbe:	8f ef       	ldi	r24, 0xFF	; 255
    2dc0:	8a 83       	std	Y+2, r24	; 0x02
    2dc2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2dc6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2dca:	89 2b       	or	r24, r25
    2dcc:	11 f4       	brne	.+4      	; 0x2dd2 <bno055_get_gyro_calib_stat+0x2c>
    2dce:	81 e8       	ldi	r24, 0x81	; 129
    2dd0:	45 c0       	rjmp	.+138    	; 0x2e5c <bno055_get_gyro_calib_stat+0xb6>
    2dd2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2dd6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	13 96       	adiw	r26, 0x03	; 3
    2dde:	8c 91       	ld	r24, X
    2de0:	88 23       	and	r24, r24
    2de2:	19 f0       	breq	.+6      	; 0x2dea <bno055_get_gyro_calib_stat+0x44>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	99 dc       	rcall	.-1742   	; 0x271a <bno055_write_page_id>
    2de8:	8a 83       	std	Y+2, r24	; 0x02
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	88 23       	and	r24, r24
    2dee:	41 f0       	breq	.+16     	; 0x2e00 <bno055_get_gyro_calib_stat+0x5a>
    2df0:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2df4:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2df8:	fc 01       	movw	r30, r24
    2dfa:	83 81       	ldd	r24, Z+3	; 0x03
    2dfc:	88 23       	and	r24, r24
    2dfe:	59 f5       	brne	.+86     	; 0x2e56 <bno055_get_gyro_calib_stat+0xb0>
    2e00:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2e04:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	1b 96       	adiw	r26, 0x0b	; 11
    2e0c:	ed 91       	ld	r30, X+
    2e0e:	fc 91       	ld	r31, X
    2e10:	1c 97       	sbiw	r26, 0x0c	; 12
    2e12:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2e16:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	18 96       	adiw	r26, 0x08	; 8
    2e1e:	3c 91       	ld	r19, X
    2e20:	ce 01       	movw	r24, r28
    2e22:	03 96       	adiw	r24, 0x03	; 3
    2e24:	21 e0       	ldi	r18, 0x01	; 1
    2e26:	ac 01       	movw	r20, r24
    2e28:	65 e3       	ldi	r22, 0x35	; 53
    2e2a:	83 2f       	mov	r24, r19
    2e2c:	19 95       	eicall
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	80 73       	andi	r24, 0x30	; 48
    2e38:	99 27       	eor	r25, r25
    2e3a:	95 95       	asr	r25
    2e3c:	87 95       	ror	r24
    2e3e:	95 95       	asr	r25
    2e40:	87 95       	ror	r24
    2e42:	95 95       	asr	r25
    2e44:	87 95       	ror	r24
    2e46:	95 95       	asr	r25
    2e48:	87 95       	ror	r24
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e50:	fc 01       	movw	r30, r24
    2e52:	20 83       	st	Z, r18
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <bno055_get_gyro_calib_stat+0xb4>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	25 96       	adiw	r28, 0x05	; 5
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <bno055_get_sys_calib_stat>:
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	25 97       	sbiw	r28, 0x05	; 5
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	8c 83       	std	Y+4, r24	; 0x04
    2e78:	9d 83       	std	Y+5, r25	; 0x05
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	1b 82       	std	Y+3, r1	; 0x03
    2e80:	8f ef       	ldi	r24, 0xFF	; 255
    2e82:	8a 83       	std	Y+2, r24	; 0x02
    2e84:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2e88:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2e8c:	89 2b       	or	r24, r25
    2e8e:	11 f4       	brne	.+4      	; 0x2e94 <bno055_get_sys_calib_stat+0x2c>
    2e90:	81 e8       	ldi	r24, 0x81	; 129
    2e92:	3d c0       	rjmp	.+122    	; 0x2f0e <bno055_get_sys_calib_stat+0xa6>
    2e94:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2e98:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	13 96       	adiw	r26, 0x03	; 3
    2ea0:	8c 91       	ld	r24, X
    2ea2:	88 23       	and	r24, r24
    2ea4:	19 f0       	breq	.+6      	; 0x2eac <bno055_get_sys_calib_stat+0x44>
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	38 dc       	rcall	.-1936   	; 0x271a <bno055_write_page_id>
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	88 23       	and	r24, r24
    2eb0:	41 f0       	breq	.+16     	; 0x2ec2 <bno055_get_sys_calib_stat+0x5a>
    2eb2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2eb6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2eba:	fc 01       	movw	r30, r24
    2ebc:	83 81       	ldd	r24, Z+3	; 0x03
    2ebe:	88 23       	and	r24, r24
    2ec0:	19 f5       	brne	.+70     	; 0x2f08 <bno055_get_sys_calib_stat+0xa0>
    2ec2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2ec6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	1b 96       	adiw	r26, 0x0b	; 11
    2ece:	ed 91       	ld	r30, X+
    2ed0:	fc 91       	ld	r31, X
    2ed2:	1c 97       	sbiw	r26, 0x0c	; 12
    2ed4:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2ed8:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2edc:	dc 01       	movw	r26, r24
    2ede:	18 96       	adiw	r26, 0x08	; 8
    2ee0:	3c 91       	ld	r19, X
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	03 96       	adiw	r24, 0x03	; 3
    2ee6:	21 e0       	ldi	r18, 0x01	; 1
    2ee8:	ac 01       	movw	r20, r24
    2eea:	65 e3       	ldi	r22, 0x35	; 53
    2eec:	83 2f       	mov	r24, r19
    2eee:	19 95       	eicall
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	22 95       	swap	r18
    2ef8:	26 95       	lsr	r18
    2efa:	26 95       	lsr	r18
    2efc:	23 70       	andi	r18, 0x03	; 3
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	9d 81       	ldd	r25, Y+5	; 0x05
    2f02:	fc 01       	movw	r30, r24
    2f04:	20 83       	st	Z, r18
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <bno055_get_sys_calib_stat+0xa4>
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	25 96       	adiw	r28, 0x05	; 5
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	08 95       	ret

00002f1a <bno055_get_euler_unit>:
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	25 97       	sbiw	r28, 0x05	; 5
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	8c 83       	std	Y+4, r24	; 0x04
    2f2a:	9d 83       	std	Y+5, r25	; 0x05
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	1b 82       	std	Y+3, r1	; 0x03
    2f32:	8f ef       	ldi	r24, 0xFF	; 255
    2f34:	8a 83       	std	Y+2, r24	; 0x02
    2f36:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2f3a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2f3e:	89 2b       	or	r24, r25
    2f40:	11 f4       	brne	.+4      	; 0x2f46 <bno055_get_euler_unit+0x2c>
    2f42:	81 e8       	ldi	r24, 0x81	; 129
    2f44:	41 c0       	rjmp	.+130    	; 0x2fc8 <bno055_get_euler_unit+0xae>
    2f46:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2f4a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	13 96       	adiw	r26, 0x03	; 3
    2f52:	8c 91       	ld	r24, X
    2f54:	88 23       	and	r24, r24
    2f56:	19 f0       	breq	.+6      	; 0x2f5e <bno055_get_euler_unit+0x44>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	df db       	rcall	.-2114   	; 0x271a <bno055_write_page_id>
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	88 23       	and	r24, r24
    2f62:	41 f0       	breq	.+16     	; 0x2f74 <bno055_get_euler_unit+0x5a>
    2f64:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2f68:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	83 81       	ldd	r24, Z+3	; 0x03
    2f70:	88 23       	and	r24, r24
    2f72:	39 f5       	brne	.+78     	; 0x2fc2 <bno055_get_euler_unit+0xa8>
    2f74:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2f78:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	1b 96       	adiw	r26, 0x0b	; 11
    2f80:	ed 91       	ld	r30, X+
    2f82:	fc 91       	ld	r31, X
    2f84:	1c 97       	sbiw	r26, 0x0c	; 12
    2f86:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2f8a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	18 96       	adiw	r26, 0x08	; 8
    2f92:	3c 91       	ld	r19, X
    2f94:	ce 01       	movw	r24, r28
    2f96:	03 96       	adiw	r24, 0x03	; 3
    2f98:	21 e0       	ldi	r18, 0x01	; 1
    2f9a:	ac 01       	movw	r20, r24
    2f9c:	6b e3       	ldi	r22, 0x3B	; 59
    2f9e:	83 2f       	mov	r24, r19
    2fa0:	19 95       	eicall
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	84 70       	andi	r24, 0x04	; 4
    2fac:	99 27       	eor	r25, r25
    2fae:	95 95       	asr	r25
    2fb0:	87 95       	ror	r24
    2fb2:	95 95       	asr	r25
    2fb4:	87 95       	ror	r24
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fba:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	20 83       	st	Z, r18
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <bno055_get_euler_unit+0xac>
    2fc2:	8f ef       	ldi	r24, 0xFF	; 255
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	25 96       	adiw	r28, 0x05	; 5
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <bno055_set_euler_unit>:
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	25 97       	sbiw	r28, 0x05	; 5
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	1b 82       	std	Y+3, r1	; 0x03
    2fea:	1c 82       	std	Y+4, r1	; 0x04
    2fec:	8f ef       	ldi	r24, 0xFF	; 255
    2fee:	8a 83       	std	Y+2, r24	; 0x02
    2ff0:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    2ff4:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    2ff8:	89 2b       	or	r24, r25
    2ffa:	11 f4       	brne	.+4      	; 0x3000 <bno055_set_euler_unit+0x2c>
    2ffc:	81 e8       	ldi	r24, 0x81	; 129
    2ffe:	68 c0       	rjmp	.+208    	; 0x30d0 <bno055_set_euler_unit+0xfc>
    3000:	ce 01       	movw	r24, r28
    3002:	04 96       	adiw	r24, 0x04	; 4
    3004:	6b d0       	rcall	.+214    	; 0x30dc <bno055_get_operation_mode>
    3006:	8a 83       	std	Y+2, r24	; 0x02
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	88 23       	and	r24, r24
    300c:	09 f0       	breq	.+2      	; 0x3010 <bno055_set_euler_unit+0x3c>
    300e:	54 c0       	rjmp	.+168    	; 0x30b8 <bno055_set_euler_unit+0xe4>
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
    3012:	88 23       	and	r24, r24
    3014:	31 f0       	breq	.+12     	; 0x3022 <bno055_set_euler_unit+0x4e>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	b7 d0       	rcall	.+366    	; 0x3188 <bno055_set_operation_mode>
    301a:	98 2f       	mov	r25, r24
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	89 0f       	add	r24, r25
    3020:	8a 83       	std	Y+2, r24	; 0x02
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	88 23       	and	r24, r24
    3026:	09 f0       	breq	.+2      	; 0x302a <bno055_set_euler_unit+0x56>
    3028:	44 c0       	rjmp	.+136    	; 0x30b2 <bno055_set_euler_unit+0xde>
    302a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    302e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3032:	dc 01       	movw	r26, r24
    3034:	1b 96       	adiw	r26, 0x0b	; 11
    3036:	ed 91       	ld	r30, X+
    3038:	fc 91       	ld	r31, X
    303a:	1c 97       	sbiw	r26, 0x0c	; 12
    303c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3040:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3044:	dc 01       	movw	r26, r24
    3046:	18 96       	adiw	r26, 0x08	; 8
    3048:	3c 91       	ld	r19, X
    304a:	ce 01       	movw	r24, r28
    304c:	03 96       	adiw	r24, 0x03	; 3
    304e:	21 e0       	ldi	r18, 0x01	; 1
    3050:	ac 01       	movw	r20, r24
    3052:	6b e3       	ldi	r22, 0x3B	; 59
    3054:	83 2f       	mov	r24, r19
    3056:	19 95       	eicall
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	88 23       	and	r24, r24
    305e:	71 f5       	brne	.+92     	; 0x30bc <bno055_set_euler_unit+0xe8>
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	28 2f       	mov	r18, r24
    3064:	2b 7f       	andi	r18, 0xFB	; 251
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	84 70       	andi	r24, 0x04	; 4
    3076:	82 2b       	or	r24, r18
    3078:	8b 83       	std	Y+3, r24	; 0x03
    307a:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    307e:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3082:	dc 01       	movw	r26, r24
    3084:	19 96       	adiw	r26, 0x09	; 9
    3086:	ed 91       	ld	r30, X+
    3088:	fc 91       	ld	r31, X
    308a:	1a 97       	sbiw	r26, 0x0a	; 10
    308c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3090:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3094:	dc 01       	movw	r26, r24
    3096:	18 96       	adiw	r26, 0x08	; 8
    3098:	3c 91       	ld	r19, X
    309a:	ce 01       	movw	r24, r28
    309c:	03 96       	adiw	r24, 0x03	; 3
    309e:	21 e0       	ldi	r18, 0x01	; 1
    30a0:	ac 01       	movw	r20, r24
    30a2:	6b e3       	ldi	r22, 0x3B	; 59
    30a4:	83 2f       	mov	r24, r19
    30a6:	19 95       	eicall
    30a8:	98 2f       	mov	r25, r24
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	89 0f       	add	r24, r25
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	05 c0       	rjmp	.+10     	; 0x30bc <bno055_set_euler_unit+0xe8>
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <bno055_set_euler_unit+0xe8>
    30b8:	8f ef       	ldi	r24, 0xFF	; 255
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	8c 81       	ldd	r24, Y+4	; 0x04
    30be:	88 23       	and	r24, r24
    30c0:	31 f0       	breq	.+12     	; 0x30ce <bno055_set_euler_unit+0xfa>
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	61 d0       	rcall	.+194    	; 0x3188 <bno055_set_operation_mode>
    30c6:	98 2f       	mov	r25, r24
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	89 0f       	add	r24, r25
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	25 96       	adiw	r28, 0x05	; 5
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	08 95       	ret

000030dc <bno055_get_operation_mode>:
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	25 97       	sbiw	r28, 0x05	; 5
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	8c 83       	std	Y+4, r24	; 0x04
    30ec:	9d 83       	std	Y+5, r25	; 0x05
    30ee:	8f ef       	ldi	r24, 0xFF	; 255
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	1b 82       	std	Y+3, r1	; 0x03
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	8a 83       	std	Y+2, r24	; 0x02
    30f8:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    30fc:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3100:	89 2b       	or	r24, r25
    3102:	11 f4       	brne	.+4      	; 0x3108 <bno055_get_operation_mode+0x2c>
    3104:	81 e8       	ldi	r24, 0x81	; 129
    3106:	3a c0       	rjmp	.+116    	; 0x317c <bno055_get_operation_mode+0xa0>
    3108:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    310c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3110:	dc 01       	movw	r26, r24
    3112:	13 96       	adiw	r26, 0x03	; 3
    3114:	8c 91       	ld	r24, X
    3116:	88 23       	and	r24, r24
    3118:	19 f0       	breq	.+6      	; 0x3120 <bno055_get_operation_mode+0x44>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	fe da       	rcall	.-2564   	; 0x271a <bno055_write_page_id>
    311e:	8a 83       	std	Y+2, r24	; 0x02
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	88 23       	and	r24, r24
    3124:	41 f0       	breq	.+16     	; 0x3136 <bno055_get_operation_mode+0x5a>
    3126:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    312a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    312e:	fc 01       	movw	r30, r24
    3130:	83 81       	ldd	r24, Z+3	; 0x03
    3132:	88 23       	and	r24, r24
    3134:	01 f5       	brne	.+64     	; 0x3176 <bno055_get_operation_mode+0x9a>
    3136:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    313a:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    313e:	dc 01       	movw	r26, r24
    3140:	1b 96       	adiw	r26, 0x0b	; 11
    3142:	ed 91       	ld	r30, X+
    3144:	fc 91       	ld	r31, X
    3146:	1c 97       	sbiw	r26, 0x0c	; 12
    3148:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    314c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3150:	dc 01       	movw	r26, r24
    3152:	18 96       	adiw	r26, 0x08	; 8
    3154:	3c 91       	ld	r19, X
    3156:	ce 01       	movw	r24, r28
    3158:	03 96       	adiw	r24, 0x03	; 3
    315a:	21 e0       	ldi	r18, 0x01	; 1
    315c:	ac 01       	movw	r20, r24
    315e:	6d e3       	ldi	r22, 0x3D	; 61
    3160:	83 2f       	mov	r24, r19
    3162:	19 95       	eicall
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	28 2f       	mov	r18, r24
    316a:	2f 70       	andi	r18, 0x0F	; 15
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	fc 01       	movw	r30, r24
    3172:	20 83       	st	Z, r18
    3174:	02 c0       	rjmp	.+4      	; 0x317a <bno055_get_operation_mode+0x9e>
    3176:	8f ef       	ldi	r24, 0xFF	; 255
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	25 96       	adiw	r28, 0x05	; 5
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	08 95       	ret

00003188 <bno055_set_operation_mode>:
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	25 97       	sbiw	r28, 0x05	; 5
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	8d 83       	std	Y+5, r24	; 0x05
    3198:	8f ef       	ldi	r24, 0xFF	; 255
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	1b 82       	std	Y+3, r1	; 0x03
    319e:	1c 82       	std	Y+4, r1	; 0x04
    31a0:	8f ef       	ldi	r24, 0xFF	; 255
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    31a8:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    31ac:	89 2b       	or	r24, r25
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <bno055_set_operation_mode+0x2c>
    31b0:	81 e8       	ldi	r24, 0x81	; 129
    31b2:	d9 c0       	rjmp	.+434    	; 0x3366 <bno055_set_operation_mode+0x1de>
    31b4:	ce 01       	movw	r24, r28
    31b6:	04 96       	adiw	r24, 0x04	; 4
    31b8:	91 df       	rcall	.-222    	; 0x30dc <bno055_get_operation_mode>
    31ba:	8a 83       	std	Y+2, r24	; 0x02
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	88 23       	and	r24, r24
    31c0:	09 f0       	breq	.+2      	; 0x31c4 <bno055_set_operation_mode+0x3c>
    31c2:	ce c0       	rjmp	.+412    	; 0x3360 <bno055_set_operation_mode+0x1d8>
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	88 23       	and	r24, r24
    31c8:	09 f0       	breq	.+2      	; 0x31cc <bno055_set_operation_mode+0x44>
    31ca:	4a c0       	rjmp	.+148    	; 0x3260 <bno055_set_operation_mode+0xd8>
    31cc:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    31d0:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    31d4:	dc 01       	movw	r26, r24
    31d6:	1b 96       	adiw	r26, 0x0b	; 11
    31d8:	ed 91       	ld	r30, X+
    31da:	fc 91       	ld	r31, X
    31dc:	1c 97       	sbiw	r26, 0x0c	; 12
    31de:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    31e2:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    31e6:	dc 01       	movw	r26, r24
    31e8:	18 96       	adiw	r26, 0x08	; 8
    31ea:	3c 91       	ld	r19, X
    31ec:	ce 01       	movw	r24, r28
    31ee:	03 96       	adiw	r24, 0x03	; 3
    31f0:	21 e0       	ldi	r18, 0x01	; 1
    31f2:	ac 01       	movw	r20, r24
    31f4:	6d e3       	ldi	r22, 0x3D	; 61
    31f6:	83 2f       	mov	r24, r19
    31f8:	19 95       	eicall
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	88 23       	and	r24, r24
    3200:	09 f0       	breq	.+2      	; 0x3204 <bno055_set_operation_mode+0x7c>
    3202:	b0 c0       	rjmp	.+352    	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	98 2f       	mov	r25, r24
    3208:	90 7f       	andi	r25, 0xF0	; 240
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	8f 70       	andi	r24, 0x0F	; 15
    320e:	89 2b       	or	r24, r25
    3210:	8b 83       	std	Y+3, r24	; 0x03
    3212:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3216:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    321a:	dc 01       	movw	r26, r24
    321c:	19 96       	adiw	r26, 0x09	; 9
    321e:	ed 91       	ld	r30, X+
    3220:	fc 91       	ld	r31, X
    3222:	1a 97       	sbiw	r26, 0x0a	; 10
    3224:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3228:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    322c:	dc 01       	movw	r26, r24
    322e:	18 96       	adiw	r26, 0x08	; 8
    3230:	3c 91       	ld	r19, X
    3232:	ce 01       	movw	r24, r28
    3234:	03 96       	adiw	r24, 0x03	; 3
    3236:	21 e0       	ldi	r18, 0x01	; 1
    3238:	ac 01       	movw	r20, r24
    323a:	6d e3       	ldi	r22, 0x3D	; 61
    323c:	83 2f       	mov	r24, r19
    323e:	19 95       	eicall
    3240:	98 2f       	mov	r25, r24
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	89 0f       	add	r24, r25
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    324c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3250:	fc 01       	movw	r30, r24
    3252:	25 85       	ldd	r18, Z+13	; 0x0d
    3254:	36 85       	ldd	r19, Z+14	; 0x0e
    3256:	88 e5       	ldi	r24, 0x58	; 88
    3258:	92 e0       	ldi	r25, 0x02	; 2
    325a:	f9 01       	movw	r30, r18
    325c:	19 95       	eicall
    325e:	82 c0       	rjmp	.+260    	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3260:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3264:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3268:	dc 01       	movw	r26, r24
    326a:	1b 96       	adiw	r26, 0x0b	; 11
    326c:	ed 91       	ld	r30, X+
    326e:	fc 91       	ld	r31, X
    3270:	1c 97       	sbiw	r26, 0x0c	; 12
    3272:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3276:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    327a:	dc 01       	movw	r26, r24
    327c:	18 96       	adiw	r26, 0x08	; 8
    327e:	3c 91       	ld	r19, X
    3280:	ce 01       	movw	r24, r28
    3282:	03 96       	adiw	r24, 0x03	; 3
    3284:	21 e0       	ldi	r18, 0x01	; 1
    3286:	ac 01       	movw	r20, r24
    3288:	6d e3       	ldi	r22, 0x3D	; 61
    328a:	83 2f       	mov	r24, r19
    328c:	19 95       	eicall
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	88 23       	and	r24, r24
    3294:	c1 f4       	brne	.+48     	; 0x32c6 <bno055_set_operation_mode+0x13e>
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	80 7f       	andi	r24, 0xF0	; 240
    329a:	8b 83       	std	Y+3, r24	; 0x03
    329c:	ce 01       	movw	r24, r28
    329e:	03 96       	adiw	r24, 0x03	; 3
    32a0:	41 e0       	ldi	r20, 0x01	; 1
    32a2:	bc 01       	movw	r22, r24
    32a4:	8d e3       	ldi	r24, 0x3D	; 61
    32a6:	05 da       	rcall	.-3062   	; 0x26b2 <bno055_write_register>
    32a8:	98 2f       	mov	r25, r24
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	89 0f       	add	r24, r25
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    32b4:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    32b8:	fc 01       	movw	r30, r24
    32ba:	25 85       	ldd	r18, Z+13	; 0x0d
    32bc:	36 85       	ldd	r19, Z+14	; 0x0e
    32be:	84 e1       	ldi	r24, 0x14	; 20
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	f9 01       	movw	r30, r18
    32c4:	19 95       	eicall
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	88 23       	and	r24, r24
    32ca:	09 f4       	brne	.+2      	; 0x32ce <bno055_set_operation_mode+0x146>
    32cc:	4b c0       	rjmp	.+150    	; 0x3364 <bno055_set_operation_mode+0x1dc>
    32ce:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    32d2:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    32d6:	dc 01       	movw	r26, r24
    32d8:	1b 96       	adiw	r26, 0x0b	; 11
    32da:	ed 91       	ld	r30, X+
    32dc:	fc 91       	ld	r31, X
    32de:	1c 97       	sbiw	r26, 0x0c	; 12
    32e0:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    32e4:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    32e8:	dc 01       	movw	r26, r24
    32ea:	18 96       	adiw	r26, 0x08	; 8
    32ec:	3c 91       	ld	r19, X
    32ee:	ce 01       	movw	r24, r28
    32f0:	03 96       	adiw	r24, 0x03	; 3
    32f2:	21 e0       	ldi	r18, 0x01	; 1
    32f4:	ac 01       	movw	r20, r24
    32f6:	6d e3       	ldi	r22, 0x3D	; 61
    32f8:	83 2f       	mov	r24, r19
    32fa:	19 95       	eicall
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	88 23       	and	r24, r24
    3302:	81 f5       	brne	.+96     	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3304:	8b 81       	ldd	r24, Y+3	; 0x03
    3306:	98 2f       	mov	r25, r24
    3308:	90 7f       	andi	r25, 0xF0	; 240
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	8f 70       	andi	r24, 0x0F	; 15
    330e:	89 2b       	or	r24, r25
    3310:	8b 83       	std	Y+3, r24	; 0x03
    3312:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3316:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    331a:	dc 01       	movw	r26, r24
    331c:	19 96       	adiw	r26, 0x09	; 9
    331e:	ed 91       	ld	r30, X+
    3320:	fc 91       	ld	r31, X
    3322:	1a 97       	sbiw	r26, 0x0a	; 10
    3324:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3328:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    332c:	dc 01       	movw	r26, r24
    332e:	18 96       	adiw	r26, 0x08	; 8
    3330:	3c 91       	ld	r19, X
    3332:	ce 01       	movw	r24, r28
    3334:	03 96       	adiw	r24, 0x03	; 3
    3336:	21 e0       	ldi	r18, 0x01	; 1
    3338:	ac 01       	movw	r20, r24
    333a:	6d e3       	ldi	r22, 0x3D	; 61
    333c:	83 2f       	mov	r24, r19
    333e:	19 95       	eicall
    3340:	98 2f       	mov	r25, r24
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	89 0f       	add	r24, r25
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    334c:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3350:	fc 01       	movw	r30, r24
    3352:	25 85       	ldd	r18, Z+13	; 0x0d
    3354:	36 85       	ldd	r19, Z+14	; 0x0e
    3356:	88 e5       	ldi	r24, 0x58	; 88
    3358:	92 e0       	ldi	r25, 0x02	; 2
    335a:	f9 01       	movw	r30, r18
    335c:	19 95       	eicall
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <bno055_set_operation_mode+0x1dc>
    3360:	8f ef       	ldi	r24, 0xFF	; 255
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	25 96       	adiw	r28, 0x05	; 5
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <bno055_set_power_mode>:
 *	@note For detailed about LOWPOWER mode
 *	refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	25 97       	sbiw	r28, 0x05	; 5
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	8d 83       	std	Y+5, r24	; 0x05
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    3382:	8f ef       	ldi	r24, 0xFF	; 255
    3384:	89 83       	std	Y+1, r24	; 0x01
u8 data_u8r = BNO055_INIT_VALUE;
    3386:	1b 82       	std	Y+3, r1	; 0x03
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    3388:	1c 82       	std	Y+4, r1	; 0x04
s8 stat_s8 = BNO055_ERROR;
    338a:	8f ef       	ldi	r24, 0xFF	; 255
    338c:	8a 83       	std	Y+2, r24	; 0x02
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    338e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3392:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3396:	89 2b       	or	r24, r25
    3398:	11 f4       	brne	.+4      	; 0x339e <bno055_set_power_mode+0x2c>
	return BNO055_E_NULL_PTR;
    339a:	81 e8       	ldi	r24, 0x81	; 129
    339c:	62 c0       	rjmp	.+196    	; 0x3462 <bno055_set_power_mode+0xf0>
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    339e:	ce 01       	movw	r24, r28
    33a0:	04 96       	adiw	r24, 0x04	; 4
    33a2:	9c de       	rcall	.-712    	; 0x30dc <bno055_get_operation_mode>
    33a4:	8a 83       	std	Y+2, r24	; 0x02
		if (stat_s8 == BNO055_SUCCESS) {
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	88 23       	and	r24, r24
    33aa:	09 f0       	breq	.+2      	; 0x33ae <bno055_set_power_mode+0x3c>
    33ac:	4e c0       	rjmp	.+156    	; 0x344a <bno055_set_power_mode+0xd8>
			if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    33ae:	8c 81       	ldd	r24, Y+4	; 0x04
    33b0:	88 23       	and	r24, r24
    33b2:	31 f0       	breq	.+12     	; 0x33c0 <bno055_set_power_mode+0x4e>
				stat_s8 += bno055_set_operation_mode
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	e8 de       	rcall	.-560    	; 0x3188 <bno055_set_operation_mode>
    33b8:	98 2f       	mov	r25, r24
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	89 0f       	add	r24, r25
    33be:	8a 83       	std	Y+2, r24	; 0x02
				(BNO055_OPERATION_MODE_CONFIG);
			if (stat_s8 == BNO055_SUCCESS) {
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	88 23       	and	r24, r24
    33c4:	09 f0       	breq	.+2      	; 0x33c8 <bno055_set_power_mode+0x56>
    33c6:	3e c0       	rjmp	.+124    	; 0x3444 <bno055_set_power_mode+0xd2>
				/* Write the value of power mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    33c8:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    33cc:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    33d0:	dc 01       	movw	r26, r24
    33d2:	1b 96       	adiw	r26, 0x0b	; 11
    33d4:	ed 91       	ld	r30, X+
    33d6:	fc 91       	ld	r31, X
    33d8:	1c 97       	sbiw	r26, 0x0c	; 12
    33da:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    33de:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    33e2:	dc 01       	movw	r26, r24
    33e4:	18 96       	adiw	r26, 0x08	; 8
    33e6:	3c 91       	ld	r19, X
    33e8:	ce 01       	movw	r24, r28
    33ea:	03 96       	adiw	r24, 0x03	; 3
    33ec:	21 e0       	ldi	r18, 0x01	; 1
    33ee:	ac 01       	movw	r20, r24
    33f0:	6e e3       	ldi	r22, 0x3E	; 62
    33f2:	83 2f       	mov	r24, r19
    33f4:	19 95       	eicall
    33f6:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_POWER_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	88 23       	and	r24, r24
    33fc:	41 f5       	brne	.+80     	; 0x344e <bno055_set_power_mode+0xdc>
					data_u8r =
    33fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3400:	98 2f       	mov	r25, r24
    3402:	9c 7f       	andi	r25, 0xFC	; 252
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	83 70       	andi	r24, 0x03	; 3
    3408:	89 2b       	or	r24, r25
    340a:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    340c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3410:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3414:	dc 01       	movw	r26, r24
    3416:	19 96       	adiw	r26, 0x09	; 9
    3418:	ed 91       	ld	r30, X+
    341a:	fc 91       	ld	r31, X
    341c:	1a 97       	sbiw	r26, 0x0a	; 10
    341e:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <p_bno055>
    3422:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <p_bno055+0x1>
    3426:	dc 01       	movw	r26, r24
    3428:	18 96       	adiw	r26, 0x08	; 8
    342a:	3c 91       	ld	r19, X
    342c:	ce 01       	movw	r24, r28
    342e:	03 96       	adiw	r24, 0x03	; 3
    3430:	21 e0       	ldi	r18, 0x01	; 1
    3432:	ac 01       	movw	r20, r24
    3434:	6e e3       	ldi	r22, 0x3E	; 62
    3436:	83 2f       	mov	r24, r19
    3438:	19 95       	eicall
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
					data_u8r =
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
    343a:	98 2f       	mov	r25, r24
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	89 0f       	add	r24, r25
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	05 c0       	rjmp	.+10     	; 0x344e <bno055_set_power_mode+0xdc>
					BNO055_POWER_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
				}
			} else {
			com_rslt = BNO055_ERROR;
    3444:	8f ef       	ldi	r24, 0xFF	; 255
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	02 c0       	rjmp	.+4      	; 0x344e <bno055_set_power_mode+0xdc>
			}
		} else {
		com_rslt = BNO055_ERROR;
    344a:	8f ef       	ldi	r24, 0xFF	; 255
    344c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    344e:	8c 81       	ldd	r24, Y+4	; 0x04
    3450:	88 23       	and	r24, r24
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
    3452:	31 f0       	breq	.+12     	; 0x3460 <bno055_set_power_mode+0xee>
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	98 de       	rcall	.-720    	; 0x3188 <bno055_set_operation_mode>
    3458:	98 2f       	mov	r25, r24
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	89 0f       	add	r24, r25
    345e:	89 83       	std	Y+1, r24	; 0x01
		(prev_opmode_u8);
	return com_rslt;
    3460:	89 81       	ldd	r24, Y+1	; 0x01
}
    3462:	25 96       	adiw	r28, 0x05	; 5
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	08 95       	ret

0000346e <init_gps_interrupts>:
#include <string.h>
#include "gps.h"
#include "gps_interrupts.h"

void init_gps_interrupts(void)
{
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	1f 92       	push	r1
    3474:	1f 92       	push	r1
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
    347a:	80 eb       	ldi	r24, 0xB0	; 176
    347c:	9b e0       	ldi	r25, 0x0B	; 11
    347e:	24 e1       	ldi	r18, 0x14	; 20
    3480:	fc 01       	movw	r30, r24
    3482:	23 83       	std	Z+3, r18	; 0x03
	gpgga_index = 0;
    3484:	10 92 7b 28 	sts	0x287B, r1	; 0x80287b <gpgga_index>
	uint8_t dollar_counter = 0;
    3488:	19 82       	std	Y+1, r1	; 0x01
	uint8_t current_sentence = SENTENCE_NONE;
    348a:	1a 82       	std	Y+2, r1	; 0x02
	last_finished = SENTENCE_NONE;
    348c:	10 92 86 26 	sts	0x2686, r1	; 0x802686 <last_finished>
	
}
    3490:	00 00       	nop
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	08 95       	ret

0000349c <init_gps_buffers>:

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	51 e0       	ldi	r21, 0x01	; 1
    34a8:	6e ed       	ldi	r22, 0xDE	; 222
    34aa:	76 e2       	ldi	r23, 0x26	; 38
    34ac:	8e e7       	ldi	r24, 0x7E	; 126
    34ae:	96 e2       	ldi	r25, 0x26	; 38
    34b0:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
    34b4:	40 e4       	ldi	r20, 0x40	; 64
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	6e ed       	ldi	r22, 0xDE	; 222
    34ba:	77 e2       	ldi	r23, 0x27	; 39
    34bc:	8e e1       	ldi	r24, 0x1E	; 30
    34be:	98 e2       	ldi	r25, 0x28	; 40
    34c0:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <rbu8_init>
}
    34c4:	00 00       	nop
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <__vector_122>:

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
    34cc:	1f 92       	push	r1
    34ce:	0f 92       	push	r0
    34d0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    34d4:	0f 92       	push	r0
    34d6:	11 24       	eor	r1, r1
    34d8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    34dc:	0f 92       	push	r0
    34de:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    34e2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    34e6:	0f 92       	push	r0
    34e8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    34ec:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34f0:	0f 92       	push	r0
    34f2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    34f6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34fa:	0f 92       	push	r0
    34fc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3500:	2f 93       	push	r18
    3502:	3f 93       	push	r19
    3504:	4f 93       	push	r20
    3506:	5f 93       	push	r21
    3508:	6f 93       	push	r22
    350a:	7f 93       	push	r23
    350c:	8f 93       	push	r24
    350e:	9f 93       	push	r25
    3510:	af 93       	push	r26
    3512:	bf 93       	push	r27
    3514:	ef 93       	push	r30
    3516:	ff 93       	push	r31
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	1f 92       	push	r1
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t ch = GPS_USART.DATA;
    3522:	80 eb       	ldi	r24, 0xB0	; 176
    3524:	9b e0       	ldi	r25, 0x0B	; 11
    3526:	fc 01       	movw	r30, r24
    3528:	80 81       	ld	r24, Z
    352a:	89 83       	std	Y+1, r24	; 0x01
	
	//printf("%c\n",ch);
	//printf("%c""\0", (char)ch);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
    352c:	80 91 dd 26 	lds	r24, 0x26DD	; 0x8026dd <current_sentence>
    3530:	81 30       	cpi	r24, 0x01	; 1
    3532:	41 f5       	brne	.+80     	; 0x3584 <__vector_122+0xb8>
	{
		if (ch == '\n')
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	8a 30       	cpi	r24, 0x0A	; 10
    3538:	b1 f4       	brne	.+44     	; 0x3566 <__vector_122+0x9a>
		{
			
			rbu8_write(gpgga_buff, &gps_receive_buffer, gpgga_index);
    353a:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <gpgga_index>
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	ac 01       	movw	r20, r24
    3544:	6e e7       	ldi	r22, 0x7E	; 126
    3546:	76 e2       	ldi	r23, 0x26	; 38
    3548:	86 e2       	ldi	r24, 0x26	; 38
    354a:	98 e2       	ldi	r25, 0x28	; 40
    354c:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <rbu8_write>
			last_finished = current_sentence;
    3550:	80 91 dd 26 	lds	r24, 0x26DD	; 0x8026dd <current_sentence>
    3554:	80 93 86 26 	sts	0x2686, r24	; 0x802686 <last_finished>
			gpgga_index=0;
    3558:	10 92 7b 28 	sts	0x287B, r1	; 0x80287b <gpgga_index>
			current_sentence = SENTENCE_WAIT;
    355c:	85 e0       	ldi	r24, 0x05	; 5
    355e:	80 93 dd 26 	sts	0x26DD, r24	; 0x8026dd <current_sentence>
			dollar_counter = 0;
    3562:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <dollar_counter>
		}
		
		gpgga_buff[gpgga_index] = ch;
    3566:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <gpgga_index>
    356a:	88 2f       	mov	r24, r24
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	8a 5d       	subi	r24, 0xDA	; 218
    3570:	97 4d       	sbci	r25, 0xD7	; 215
    3572:	29 81       	ldd	r18, Y+1	; 0x01
    3574:	fc 01       	movw	r30, r24
    3576:	20 83       	st	Z, r18
		gpgga_index++;
    3578:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <gpgga_index>
    357c:	8f 5f       	subi	r24, 0xFF	; 255
    357e:	80 93 7b 28 	sts	0x287B, r24	; 0x80287b <gpgga_index>
    3582:	0a c0       	rjmp	.+20     	; 0x3598 <__vector_122+0xcc>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
		
	

	}
	else if (ch == '$' && current_sentence == SENTENCE_NONE)
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	84 32       	cpi	r24, 0x24	; 36
    3588:	39 f4       	brne	.+14     	; 0x3598 <__vector_122+0xcc>
    358a:	80 91 dd 26 	lds	r24, 0x26DD	; 0x8026dd <current_sentence>
    358e:	88 23       	and	r24, r24
    3590:	19 f4       	brne	.+6      	; 0x3598 <__vector_122+0xcc>
	{
		dollar_counter = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	80 93 7d 26 	sts	0x267D, r24	; 0x80267d <dollar_counter>
	}
	
	if (dollar_counter > 0 && current_sentence == SENTENCE_NONE)
    3598:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <dollar_counter>
    359c:	88 23       	and	r24, r24
    359e:	21 f1       	breq	.+72     	; 0x35e8 <__vector_122+0x11c>
    35a0:	80 91 dd 26 	lds	r24, 0x26DD	; 0x8026dd <current_sentence>
    35a4:	88 23       	and	r24, r24
    35a6:	01 f5       	brne	.+64     	; 0x35e8 <__vector_122+0x11c>
	{
		if (dollar_counter == 5 && ch == 'G' )
    35a8:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <dollar_counter>
    35ac:	85 30       	cpi	r24, 0x05	; 5
    35ae:	b9 f4       	brne	.+46     	; 0x35de <__vector_122+0x112>
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	87 34       	cpi	r24, 0x47	; 71
    35b4:	a1 f4       	brne	.+40     	; 0x35de <__vector_122+0x112>
		{
			current_sentence= SENTENCE_GPGGA;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	80 93 dd 26 	sts	0x26DD, r24	; 0x8026dd <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
    35bc:	45 e0       	ldi	r20, 0x05	; 5
    35be:	50 e0       	ldi	r21, 0x00	; 0
    35c0:	6c e7       	ldi	r22, 0x7C	; 124
    35c2:	70 e2       	ldi	r23, 0x20	; 32
    35c4:	86 e2       	ldi	r24, 0x26	; 38
    35c6:	98 e2       	ldi	r25, 0x28	; 40
    35c8:	0e 94 ac 5c 	call	0xb958	; 0xb958 <memcpy>
			gpgga_index = 5;
    35cc:	85 e0       	ldi	r24, 0x05	; 5
    35ce:	80 93 7b 28 	sts	0x287B, r24	; 0x80287b <gpgga_index>
			dollar_counter++;
    35d2:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <dollar_counter>
    35d6:	8f 5f       	subi	r24, 0xFF	; 255
    35d8:	80 93 7d 26 	sts	0x267D, r24	; 0x80267d <dollar_counter>
			dollar_counter++;
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    35dc:	05 c0       	rjmp	.+10     	; 0x35e8 <__vector_122+0x11c>
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
    35de:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <dollar_counter>
    35e2:	8f 5f       	subi	r24, 0xFF	; 255
    35e4:	80 93 7d 26 	sts	0x267D, r24	; 0x80267d <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    35e8:	00 00       	nop
    35ea:	0f 90       	pop	r0
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	ff 91       	pop	r31
    35f2:	ef 91       	pop	r30
    35f4:	bf 91       	pop	r27
    35f6:	af 91       	pop	r26
    35f8:	9f 91       	pop	r25
    35fa:	8f 91       	pop	r24
    35fc:	7f 91       	pop	r23
    35fe:	6f 91       	pop	r22
    3600:	5f 91       	pop	r21
    3602:	4f 91       	pop	r20
    3604:	3f 91       	pop	r19
    3606:	2f 91       	pop	r18
    3608:	0f 90       	pop	r0
    360a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    360e:	0f 90       	pop	r0
    3610:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3614:	0f 90       	pop	r0
    3616:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    361a:	0f 90       	pop	r0
    361c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3620:	0f 90       	pop	r0
    3622:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3626:	0f 90       	pop	r0
    3628:	1f 90       	pop	r1
    362a:	18 95       	reti

0000362c <__vector_124>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
    362c:	1f 92       	push	r1
    362e:	0f 92       	push	r0
    3630:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3634:	0f 92       	push	r0
    3636:	11 24       	eor	r1, r1
    3638:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    363c:	0f 92       	push	r0
    363e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3642:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3646:	0f 92       	push	r0
    3648:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    364c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3650:	0f 92       	push	r0
    3652:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3656:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    365a:	0f 92       	push	r0
    365c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3660:	2f 93       	push	r18
    3662:	3f 93       	push	r19
    3664:	4f 93       	push	r20
    3666:	5f 93       	push	r21
    3668:	6f 93       	push	r22
    366a:	7f 93       	push	r23
    366c:	8f 93       	push	r24
    366e:	9f 93       	push	r25
    3670:	af 93       	push	r26
    3672:	bf 93       	push	r27
    3674:	ef 93       	push	r30
    3676:	ff 93       	push	r31
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
    3680:	41 e0       	ldi	r20, 0x01	; 1
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	60 eb       	ldi	r22, 0xB0	; 176
    3686:	7b e0       	ldi	r23, 0x0B	; 11
    3688:	8e e1       	ldi	r24, 0x1E	; 30
    368a:	98 e2       	ldi	r25, 0x28	; 40
    368c:	0e 94 09 27 	call	0x4e12	; 0x4e12 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
    3690:	61 e0       	ldi	r22, 0x01	; 1
    3692:	70 e0       	ldi	r23, 0x00	; 0
    3694:	8e e1       	ldi	r24, 0x1E	; 30
    3696:	98 e2       	ldi	r25, 0x28	; 40
    3698:	0e 94 76 27 	call	0x4eec	; 0x4eec <rbu8_delete_oldest>
    369c:	00 00       	nop
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	ff 91       	pop	r31
    36a4:	ef 91       	pop	r30
    36a6:	bf 91       	pop	r27
    36a8:	af 91       	pop	r26
    36aa:	9f 91       	pop	r25
    36ac:	8f 91       	pop	r24
    36ae:	7f 91       	pop	r23
    36b0:	6f 91       	pop	r22
    36b2:	5f 91       	pop	r21
    36b4:	4f 91       	pop	r20
    36b6:	3f 91       	pop	r19
    36b8:	2f 91       	pop	r18
    36ba:	0f 90       	pop	r0
    36bc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    36c0:	0f 90       	pop	r0
    36c2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    36c6:	0f 90       	pop	r0
    36c8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    36cc:	0f 90       	pop	r0
    36ce:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    36d2:	0f 90       	pop	r0
    36d4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    36d8:	0f 90       	pop	r0
    36da:	1f 90       	pop	r1
    36dc:	18 95       	reti

000036de <sysclk_get_main_hz>:
}

uint8_t imu_sys_cal()
{
	return sys_calib;
}
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	9c e6       	ldi	r25, 0x6C	; 108
    36ea:	ac ed       	ldi	r26, 0xDC	; 220
    36ec:	b2 e0       	ldi	r27, 0x02	; 2
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	08 95       	ret

000036f8 <sysclk_get_per4_hz>:
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	1f 92       	push	r1
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	19 82       	std	Y+1, r1	; 0x01
    3704:	ec df       	rcall	.-40     	; 0x36de <sysclk_get_main_hz>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	29 81       	ldd	r18, Y+1	; 0x01
    370c:	22 2f       	mov	r18, r18
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	04 c0       	rjmp	.+8      	; 0x371a <sysclk_get_per4_hz+0x22>
    3712:	b6 95       	lsr	r27
    3714:	a7 95       	ror	r26
    3716:	97 95       	ror	r25
    3718:	87 95       	ror	r24
    371a:	2a 95       	dec	r18
    371c:	d2 f7       	brpl	.-12     	; 0x3712 <sysclk_get_per4_hz+0x1a>
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0f 90       	pop	r0
    3724:	df 91       	pop	r29
    3726:	cf 91       	pop	r28
    3728:	08 95       	ret

0000372a <sysclk_get_per2_hz>:
    372a:	cf 93       	push	r28
    372c:	df 93       	push	r29
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	e2 df       	rcall	.-60     	; 0x36f8 <sysclk_get_per4_hz>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	bc 01       	movw	r22, r24
    373a:	cd 01       	movw	r24, r26
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	08 95       	ret

00003742 <sysclk_get_per_hz>:
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	ef df       	rcall	.-34     	; 0x372a <sysclk_get_per2_hz>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	08 95       	ret

0000375a <sysclk_get_cpu_hz>:
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	ef df       	rcall	.-34     	; 0x3742 <sysclk_get_per_hz>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	df 91       	pop	r29
    376e:	cf 91       	pop	r28
    3770:	08 95       	ret

00003772 <sysclk_enable_peripheral_clock>:
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	1f 92       	push	r1
    3778:	1f 92       	push	r1
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	89 2b       	or	r24, r25
    3788:	09 f4       	brne	.+2      	; 0x378c <sysclk_enable_peripheral_clock+0x1a>
    378a:	85 c1       	rjmp	.+778    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	80 3c       	cpi	r24, 0xC0	; 192
    3792:	91 05       	cpc	r25, r1
    3794:	29 f4       	brne	.+10     	; 0x37a0 <sysclk_enable_peripheral_clock+0x2e>
    3796:	60 e1       	ldi	r22, 0x10	; 16
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    379e:	7b c1       	rjmp	.+758    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	80 34       	cpi	r24, 0x40	; 64
    37a6:	94 40       	sbci	r25, 0x04	; 4
    37a8:	29 f4       	brne	.+10     	; 0x37b4 <sysclk_enable_peripheral_clock+0x42>
    37aa:	68 e0       	ldi	r22, 0x08	; 8
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    37b2:	71 c1       	rjmp	.+738    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	81 15       	cp	r24, r1
    37ba:	94 40       	sbci	r25, 0x04	; 4
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <sysclk_enable_peripheral_clock+0x56>
    37be:	64 e0       	ldi	r22, 0x04	; 4
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    37c6:	67 c1       	rjmp	.+718    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	80 38       	cpi	r24, 0x80	; 128
    37ce:	91 40       	sbci	r25, 0x01	; 1
    37d0:	29 f4       	brne	.+10     	; 0x37dc <sysclk_enable_peripheral_clock+0x6a>
    37d2:	62 e0       	ldi	r22, 0x02	; 2
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    37da:	5d c1       	rjmp	.+698    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	9a 81       	ldd	r25, Y+2	; 0x02
    37e0:	81 15       	cp	r24, r1
    37e2:	91 40       	sbci	r25, 0x01	; 1
    37e4:	29 f4       	brne	.+10     	; 0x37f0 <sysclk_enable_peripheral_clock+0x7e>
    37e6:	61 e0       	ldi	r22, 0x01	; 1
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    37ee:	53 c1       	rjmp	.+678    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	9a 81       	ldd	r25, Y+2	; 0x02
    37f4:	80 38       	cpi	r24, 0x80	; 128
    37f6:	93 40       	sbci	r25, 0x03	; 3
    37f8:	29 f4       	brne	.+10     	; 0x3804 <sysclk_enable_peripheral_clock+0x92>
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3802:	49 c1       	rjmp	.+658    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	80 39       	cpi	r24, 0x90	; 144
    380a:	93 40       	sbci	r25, 0x03	; 3
    380c:	29 f4       	brne	.+10     	; 0x3818 <sysclk_enable_peripheral_clock+0xa6>
    380e:	61 e0       	ldi	r22, 0x01	; 1
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3816:	3f c1       	rjmp	.+638    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	9a 81       	ldd	r25, Y+2	; 0x02
    381c:	81 15       	cp	r24, r1
    381e:	92 40       	sbci	r25, 0x02	; 2
    3820:	29 f4       	brne	.+10     	; 0x382c <sysclk_enable_peripheral_clock+0xba>
    3822:	62 e0       	ldi	r22, 0x02	; 2
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    382a:	35 c1       	rjmp	.+618    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	9a 81       	ldd	r25, Y+2	; 0x02
    3830:	80 34       	cpi	r24, 0x40	; 64
    3832:	92 40       	sbci	r25, 0x02	; 2
    3834:	29 f4       	brne	.+10     	; 0x3840 <sysclk_enable_peripheral_clock+0xce>
    3836:	62 e0       	ldi	r22, 0x02	; 2
    3838:	82 e0       	ldi	r24, 0x02	; 2
    383a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    383e:	2b c1       	rjmp	.+598    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	81 15       	cp	r24, r1
    3846:	93 40       	sbci	r25, 0x03	; 3
    3848:	29 f4       	brne	.+10     	; 0x3854 <sysclk_enable_peripheral_clock+0xe2>
    384a:	64 e0       	ldi	r22, 0x04	; 4
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3852:	21 c1       	rjmp	.+578    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	9a 81       	ldd	r25, Y+2	; 0x02
    3858:	80 32       	cpi	r24, 0x20	; 32
    385a:	93 40       	sbci	r25, 0x03	; 3
    385c:	29 f4       	brne	.+10     	; 0x3868 <sysclk_enable_peripheral_clock+0xf6>
    385e:	64 e0       	ldi	r22, 0x04	; 4
    3860:	82 e0       	ldi	r24, 0x02	; 2
    3862:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3866:	17 c1       	rjmp	.+558    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	81 15       	cp	r24, r1
    386e:	98 40       	sbci	r25, 0x08	; 8
    3870:	29 f4       	brne	.+10     	; 0x387c <sysclk_enable_peripheral_clock+0x10a>
    3872:	61 e0       	ldi	r22, 0x01	; 1
    3874:	83 e0       	ldi	r24, 0x03	; 3
    3876:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    387a:	0d c1       	rjmp	.+538    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	9a 81       	ldd	r25, Y+2	; 0x02
    3880:	81 15       	cp	r24, r1
    3882:	99 40       	sbci	r25, 0x09	; 9
    3884:	29 f4       	brne	.+10     	; 0x3890 <sysclk_enable_peripheral_clock+0x11e>
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	84 e0       	ldi	r24, 0x04	; 4
    388a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    388e:	03 c1       	rjmp	.+518    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	81 15       	cp	r24, r1
    3896:	9a 40       	sbci	r25, 0x0A	; 10
    3898:	29 f4       	brne	.+10     	; 0x38a4 <sysclk_enable_peripheral_clock+0x132>
    389a:	61 e0       	ldi	r22, 0x01	; 1
    389c:	85 e0       	ldi	r24, 0x05	; 5
    389e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    38a2:	f9 c0       	rjmp	.+498    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	81 15       	cp	r24, r1
    38aa:	9b 40       	sbci	r25, 0x0B	; 11
    38ac:	29 f4       	brne	.+10     	; 0x38b8 <sysclk_enable_peripheral_clock+0x146>
    38ae:	61 e0       	ldi	r22, 0x01	; 1
    38b0:	86 e0       	ldi	r24, 0x06	; 6
    38b2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    38b6:	ef c0       	rjmp	.+478    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	80 34       	cpi	r24, 0x40	; 64
    38be:	98 40       	sbci	r25, 0x08	; 8
    38c0:	29 f4       	brne	.+10     	; 0x38cc <sysclk_enable_peripheral_clock+0x15a>
    38c2:	62 e0       	ldi	r22, 0x02	; 2
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    38ca:	e5 c0       	rjmp	.+458    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	9a 81       	ldd	r25, Y+2	; 0x02
    38d0:	80 34       	cpi	r24, 0x40	; 64
    38d2:	99 40       	sbci	r25, 0x09	; 9
    38d4:	29 f4       	brne	.+10     	; 0x38e0 <sysclk_enable_peripheral_clock+0x16e>
    38d6:	62 e0       	ldi	r22, 0x02	; 2
    38d8:	84 e0       	ldi	r24, 0x04	; 4
    38da:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    38de:	db c0       	rjmp	.+438    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	80 34       	cpi	r24, 0x40	; 64
    38e6:	9a 40       	sbci	r25, 0x0A	; 10
    38e8:	29 f4       	brne	.+10     	; 0x38f4 <sysclk_enable_peripheral_clock+0x182>
    38ea:	62 e0       	ldi	r22, 0x02	; 2
    38ec:	85 e0       	ldi	r24, 0x05	; 5
    38ee:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    38f2:	d1 c0       	rjmp	.+418    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	80 34       	cpi	r24, 0x40	; 64
    38fa:	9b 40       	sbci	r25, 0x0B	; 11
    38fc:	29 f4       	brne	.+10     	; 0x3908 <sysclk_enable_peripheral_clock+0x196>
    38fe:	62 e0       	ldi	r22, 0x02	; 2
    3900:	86 e0       	ldi	r24, 0x06	; 6
    3902:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3906:	c7 c0       	rjmp	.+398    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	9a 81       	ldd	r25, Y+2	; 0x02
    390c:	80 39       	cpi	r24, 0x90	; 144
    390e:	98 40       	sbci	r25, 0x08	; 8
    3910:	29 f4       	brne	.+10     	; 0x391c <sysclk_enable_peripheral_clock+0x1aa>
    3912:	64 e0       	ldi	r22, 0x04	; 4
    3914:	83 e0       	ldi	r24, 0x03	; 3
    3916:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    391a:	bd c0       	rjmp	.+378    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	80 39       	cpi	r24, 0x90	; 144
    3922:	99 40       	sbci	r25, 0x09	; 9
    3924:	29 f4       	brne	.+10     	; 0x3930 <sysclk_enable_peripheral_clock+0x1be>
    3926:	64 e0       	ldi	r22, 0x04	; 4
    3928:	84 e0       	ldi	r24, 0x04	; 4
    392a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    392e:	b3 c0       	rjmp	.+358    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	80 39       	cpi	r24, 0x90	; 144
    3936:	9a 40       	sbci	r25, 0x0A	; 10
    3938:	29 f4       	brne	.+10     	; 0x3944 <sysclk_enable_peripheral_clock+0x1d2>
    393a:	64 e0       	ldi	r22, 0x04	; 4
    393c:	85 e0       	ldi	r24, 0x05	; 5
    393e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3942:	a9 c0       	rjmp	.+338    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	80 39       	cpi	r24, 0x90	; 144
    394a:	9b 40       	sbci	r25, 0x0B	; 11
    394c:	29 f4       	brne	.+10     	; 0x3958 <sysclk_enable_peripheral_clock+0x1e6>
    394e:	64 e0       	ldi	r22, 0x04	; 4
    3950:	86 e0       	ldi	r24, 0x06	; 6
    3952:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3956:	9f c0       	rjmp	.+318    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	9a 81       	ldd	r25, Y+2	; 0x02
    395c:	80 3c       	cpi	r24, 0xC0	; 192
    395e:	98 40       	sbci	r25, 0x08	; 8
    3960:	29 f4       	brne	.+10     	; 0x396c <sysclk_enable_peripheral_clock+0x1fa>
    3962:	68 e0       	ldi	r22, 0x08	; 8
    3964:	83 e0       	ldi	r24, 0x03	; 3
    3966:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    396a:	95 c0       	rjmp	.+298    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	80 3c       	cpi	r24, 0xC0	; 192
    3972:	99 40       	sbci	r25, 0x09	; 9
    3974:	29 f4       	brne	.+10     	; 0x3980 <sysclk_enable_peripheral_clock+0x20e>
    3976:	68 e0       	ldi	r22, 0x08	; 8
    3978:	84 e0       	ldi	r24, 0x04	; 4
    397a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    397e:	8b c0       	rjmp	.+278    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	80 3c       	cpi	r24, 0xC0	; 192
    3986:	9a 40       	sbci	r25, 0x0A	; 10
    3988:	29 f4       	brne	.+10     	; 0x3994 <sysclk_enable_peripheral_clock+0x222>
    398a:	68 e0       	ldi	r22, 0x08	; 8
    398c:	85 e0       	ldi	r24, 0x05	; 5
    398e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3992:	81 c0       	rjmp	.+258    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	80 3c       	cpi	r24, 0xC0	; 192
    399a:	9b 40       	sbci	r25, 0x0B	; 11
    399c:	29 f4       	brne	.+10     	; 0x39a8 <sysclk_enable_peripheral_clock+0x236>
    399e:	68 e0       	ldi	r22, 0x08	; 8
    39a0:	86 e0       	ldi	r24, 0x06	; 6
    39a2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    39a6:	77 c0       	rjmp	.+238    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	80 3a       	cpi	r24, 0xA0	; 160
    39ae:	98 40       	sbci	r25, 0x08	; 8
    39b0:	29 f4       	brne	.+10     	; 0x39bc <sysclk_enable_peripheral_clock+0x24a>
    39b2:	60 e1       	ldi	r22, 0x10	; 16
    39b4:	83 e0       	ldi	r24, 0x03	; 3
    39b6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    39ba:	6d c0       	rjmp	.+218    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
    39be:	9a 81       	ldd	r25, Y+2	; 0x02
    39c0:	80 3a       	cpi	r24, 0xA0	; 160
    39c2:	99 40       	sbci	r25, 0x09	; 9
    39c4:	29 f4       	brne	.+10     	; 0x39d0 <sysclk_enable_peripheral_clock+0x25e>
    39c6:	60 e1       	ldi	r22, 0x10	; 16
    39c8:	84 e0       	ldi	r24, 0x04	; 4
    39ca:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    39ce:	63 c0       	rjmp	.+198    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	80 3a       	cpi	r24, 0xA0	; 160
    39d6:	9a 40       	sbci	r25, 0x0A	; 10
    39d8:	29 f4       	brne	.+10     	; 0x39e4 <sysclk_enable_peripheral_clock+0x272>
    39da:	60 e1       	ldi	r22, 0x10	; 16
    39dc:	85 e0       	ldi	r24, 0x05	; 5
    39de:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    39e2:	59 c0       	rjmp	.+178    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
    39e6:	9a 81       	ldd	r25, Y+2	; 0x02
    39e8:	80 3a       	cpi	r24, 0xA0	; 160
    39ea:	9b 40       	sbci	r25, 0x0B	; 11
    39ec:	29 f4       	brne	.+10     	; 0x39f8 <sysclk_enable_peripheral_clock+0x286>
    39ee:	60 e1       	ldi	r22, 0x10	; 16
    39f0:	86 e0       	ldi	r24, 0x06	; 6
    39f2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    39f6:	4f c0       	rjmp	.+158    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	9a 81       	ldd	r25, Y+2	; 0x02
    39fc:	80 3b       	cpi	r24, 0xB0	; 176
    39fe:	98 40       	sbci	r25, 0x08	; 8
    3a00:	29 f4       	brne	.+10     	; 0x3a0c <sysclk_enable_peripheral_clock+0x29a>
    3a02:	60 e2       	ldi	r22, 0x20	; 32
    3a04:	83 e0       	ldi	r24, 0x03	; 3
    3a06:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a0a:	45 c0       	rjmp	.+138    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a10:	80 3b       	cpi	r24, 0xB0	; 176
    3a12:	99 40       	sbci	r25, 0x09	; 9
    3a14:	29 f4       	brne	.+10     	; 0x3a20 <sysclk_enable_peripheral_clock+0x2ae>
    3a16:	60 e2       	ldi	r22, 0x20	; 32
    3a18:	84 e0       	ldi	r24, 0x04	; 4
    3a1a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a1e:	3b c0       	rjmp	.+118    	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	80 3b       	cpi	r24, 0xB0	; 176
    3a26:	9a 40       	sbci	r25, 0x0A	; 10
    3a28:	29 f4       	brne	.+10     	; 0x3a34 <sysclk_enable_peripheral_clock+0x2c2>
    3a2a:	60 e2       	ldi	r22, 0x20	; 32
    3a2c:	85 e0       	ldi	r24, 0x05	; 5
    3a2e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a32:	31 c0       	rjmp	.+98     	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	80 3b       	cpi	r24, 0xB0	; 176
    3a3a:	9b 40       	sbci	r25, 0x0B	; 11
    3a3c:	29 f4       	brne	.+10     	; 0x3a48 <sysclk_enable_peripheral_clock+0x2d6>
    3a3e:	60 e2       	ldi	r22, 0x20	; 32
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a46:	27 c0       	rjmp	.+78     	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4c:	80 38       	cpi	r24, 0x80	; 128
    3a4e:	94 40       	sbci	r25, 0x04	; 4
    3a50:	29 f4       	brne	.+10     	; 0x3a5c <sysclk_enable_peripheral_clock+0x2ea>
    3a52:	60 e4       	ldi	r22, 0x40	; 64
    3a54:	83 e0       	ldi	r24, 0x03	; 3
    3a56:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a5a:	1d c0       	rjmp	.+58     	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	80 39       	cpi	r24, 0x90	; 144
    3a62:	94 40       	sbci	r25, 0x04	; 4
    3a64:	29 f4       	brne	.+10     	; 0x3a70 <sysclk_enable_peripheral_clock+0x2fe>
    3a66:	60 e4       	ldi	r22, 0x40	; 64
    3a68:	84 e0       	ldi	r24, 0x04	; 4
    3a6a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a6e:	13 c0       	rjmp	.+38     	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	9a 81       	ldd	r25, Y+2	; 0x02
    3a74:	80 3a       	cpi	r24, 0xA0	; 160
    3a76:	94 40       	sbci	r25, 0x04	; 4
    3a78:	29 f4       	brne	.+10     	; 0x3a84 <sysclk_enable_peripheral_clock+0x312>
    3a7a:	60 e4       	ldi	r22, 0x40	; 64
    3a7c:	85 e0       	ldi	r24, 0x05	; 5
    3a7e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a82:	09 c0       	rjmp	.+18     	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	80 3b       	cpi	r24, 0xB0	; 176
    3a8a:	94 40       	sbci	r25, 0x04	; 4
    3a8c:	21 f4       	brne	.+8      	; 0x3a96 <sysclk_enable_peripheral_clock+0x324>
    3a8e:	60 e4       	ldi	r22, 0x40	; 64
    3a90:	86 e0       	ldi	r24, 0x06	; 6
    3a92:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3a96:	00 00       	nop
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	08 95       	ret

00003aa2 <__portable_avr_delay_cycles>:
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <__portable_avr_delay_cycles+0xa>
    3aa4:	61 50       	subi	r22, 0x01	; 1
    3aa6:	71 09       	sbc	r23, r1
    3aa8:	81 09       	sbc	r24, r1
    3aaa:	91 09       	sbc	r25, r1
    3aac:	61 15       	cp	r22, r1
    3aae:	71 05       	cpc	r23, r1
    3ab0:	81 05       	cpc	r24, r1
    3ab2:	91 05       	cpc	r25, r1
    3ab4:	b9 f7       	brne	.-18     	; 0x3aa4 <__portable_avr_delay_cycles+0x2>
    3ab6:	08 95       	ret

00003ab8 <twi_master_read>:
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <twi_master_read+0x6>
    3abe:	1f 92       	push	r1
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	9a 83       	std	Y+2, r25	; 0x02
    3ac8:	6b 83       	std	Y+3, r22	; 0x03
    3aca:	7c 83       	std	Y+4, r23	; 0x04
    3acc:	2b 81       	ldd	r18, Y+3	; 0x03
    3ace:	3c 81       	ldd	r19, Y+4	; 0x04
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	b9 01       	movw	r22, r18
    3ad8:	0e 94 fc 44 	call	0x89f8	; 0x89f8 <twi_master_transfer>
    3adc:	24 96       	adiw	r28, 0x04	; 4
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	08 95       	ret

00003ae8 <twi_master_write>:
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	00 d0       	rcall	.+0      	; 0x3aee <twi_master_write+0x6>
    3aee:	1f 92       	push	r1
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	89 83       	std	Y+1, r24	; 0x01
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	6b 83       	std	Y+3, r22	; 0x03
    3afa:	7c 83       	std	Y+4, r23	; 0x04
    3afc:	2b 81       	ldd	r18, Y+3	; 0x03
    3afe:	3c 81       	ldd	r19, Y+4	; 0x04
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	9a 81       	ldd	r25, Y+2	; 0x02
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	b9 01       	movw	r22, r18
    3b08:	0e 94 fc 44 	call	0x89f8	; 0x89f8 <twi_master_transfer>
    3b0c:	24 96       	adiw	r28, 0x04	; 4
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	08 95       	ret

00003b18 <twi_master_enable>:
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	1f 92       	push	r1
    3b1e:	1f 92       	push	r1
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	9a 83       	std	Y+2, r25	; 0x02
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	81 81       	ldd	r24, Z+1	; 0x01
    3b30:	28 2f       	mov	r18, r24
    3b32:	28 60       	ori	r18, 0x08	; 8
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	9a 81       	ldd	r25, Y+2	; 0x02
    3b38:	fc 01       	movw	r30, r24
    3b3a:	21 83       	std	Z+1, r18	; 0x01
    3b3c:	00 00       	nop
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	08 95       	ret

00003b48 <imu_init>:
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	2c 97       	sbiw	r28, 0x0c	; 12
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <currentVelZ>
    3b5a:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <currentVelZ+0x1>
    3b5e:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <currentVelZ+0x2>
    3b62:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <currentVelZ+0x3>
    3b66:	10 92 b0 28 	sts	0x28B0, r1	; 0x8028b0 <currentPosZ>
    3b6a:	10 92 b1 28 	sts	0x28B1, r1	; 0x8028b1 <currentPosZ+0x1>
    3b6e:	10 92 b2 28 	sts	0x28B2, r1	; 0x8028b2 <currentPosZ+0x2>
    3b72:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <currentPosZ+0x3>
    3b76:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <prevAccZ>
    3b7a:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <prevAccZ+0x1>
    3b7e:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <prevAccZ+0x2>
    3b82:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <prevAccZ+0x3>
    3b86:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <prevVelZ>
    3b8a:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <prevVelZ+0x1>
    3b8e:	10 92 ae 28 	sts	0x28AE, r1	; 0x8028ae <prevVelZ+0x2>
    3b92:	10 92 af 28 	sts	0x28AF, r1	; 0x8028af <prevVelZ+0x3>
    3b96:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <prevPosZ>
    3b9a:	10 92 c4 28 	sts	0x28C4, r1	; 0x8028c4 <prevPosZ+0x1>
    3b9e:	10 92 c5 28 	sts	0x28C5, r1	; 0x8028c5 <prevPosZ+0x2>
    3ba2:	10 92 c6 28 	sts	0x28C6, r1	; 0x8028c6 <prevPosZ+0x3>
    3ba6:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <prevTime>
    3baa:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <prevTime+0x1>
    3bae:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <prevTime+0x2>
    3bb2:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <prevTime+0x3>
    3bb6:	10 92 7d 28 	sts	0x287D, r1	; 0x80287d <prevPrevTime>
    3bba:	10 92 7e 28 	sts	0x287E, r1	; 0x80287e <prevPrevTime+0x1>
    3bbe:	10 92 7f 28 	sts	0x287F, r1	; 0x80287f <prevPrevTime+0x2>
    3bc2:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <prevPrevTime+0x3>
    3bc6:	60 e4       	ldi	r22, 0x40	; 64
    3bc8:	86 e0       	ldi	r24, 0x06	; 6
    3bca:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    3bce:	80 eb       	ldi	r24, 0xB0	; 176
    3bd0:	94 e0       	ldi	r25, 0x04	; 4
    3bd2:	cf dd       	rcall	.-1122   	; 0x3772 <sysclk_enable_peripheral_clock>
    3bd4:	29 e0       	ldi	r18, 0x09	; 9
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	03 96       	adiw	r24, 0x03	; 3
    3bda:	fc 01       	movw	r30, r24
    3bdc:	32 2f       	mov	r19, r18
    3bde:	11 92       	st	Z+, r1
    3be0:	3a 95       	dec	r19
    3be2:	e9 f7       	brne	.-6      	; 0x3bde <imu_init+0x96>
    3be4:	80 e8       	ldi	r24, 0x80	; 128
    3be6:	9a e1       	ldi	r25, 0x1A	; 26
    3be8:	a6 e0       	ldi	r26, 0x06	; 6
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	8b 83       	std	Y+3, r24	; 0x03
    3bee:	9c 83       	std	Y+4, r25	; 0x04
    3bf0:	ad 83       	std	Y+5, r26	; 0x05
    3bf2:	be 83       	std	Y+6, r27	; 0x06
    3bf4:	83 e2       	ldi	r24, 0x23	; 35
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	a0 e0       	ldi	r26, 0x00	; 0
    3bfa:	b0 e0       	ldi	r27, 0x00	; 0
    3bfc:	8f 83       	std	Y+7, r24	; 0x07
    3bfe:	98 87       	std	Y+8, r25	; 0x08
    3c00:	a9 87       	std	Y+9, r26	; 0x09
    3c02:	ba 87       	std	Y+10, r27	; 0x0a
    3c04:	80 eb       	ldi	r24, 0xB0	; 176
    3c06:	94 e0       	ldi	r25, 0x04	; 4
    3c08:	b4 dd       	rcall	.-1176   	; 0x3772 <sysclk_enable_peripheral_clock>
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	03 96       	adiw	r24, 0x03	; 3
    3c0e:	bc 01       	movw	r22, r24
    3c10:	80 eb       	ldi	r24, 0xB0	; 176
    3c12:	94 e0       	ldi	r25, 0x04	; 4
    3c14:	0e 94 c4 44 	call	0x8988	; 0x8988 <twi_master_init>
    3c18:	80 eb       	ldi	r24, 0xB0	; 176
    3c1a:	94 e0       	ldi	r25, 0x04	; 4
    3c1c:	7d df       	rcall	.-262    	; 0x3b18 <twi_master_enable>
    3c1e:	8d e2       	ldi	r24, 0x2D	; 45
    3c20:	90 e2       	ldi	r25, 0x20	; 32
    3c22:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <bno055+0x9>
    3c26:	90 93 8f 28 	sts	0x288F, r25	; 0x80288f <bno055+0xa>
    3c2a:	8f eb       	ldi	r24, 0xBF	; 191
    3c2c:	90 e2       	ldi	r25, 0x20	; 32
    3c2e:	80 93 90 28 	sts	0x2890, r24	; 0x802890 <bno055+0xb>
    3c32:	90 93 91 28 	sts	0x2891, r25	; 0x802891 <bno055+0xc>
    3c36:	83 e4       	ldi	r24, 0x43	; 67
    3c38:	91 e2       	ldi	r25, 0x21	; 33
    3c3a:	80 93 92 28 	sts	0x2892, r24	; 0x802892 <bno055+0xd>
    3c3e:	90 93 93 28 	sts	0x2893, r25	; 0x802893 <bno055+0xe>
    3c42:	88 e2       	ldi	r24, 0x28	; 40
    3c44:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <bno055+0x8>
    3c48:	85 e8       	ldi	r24, 0x85	; 133
    3c4a:	98 e2       	ldi	r25, 0x28	; 40
    3c4c:	0e 94 2b 12 	call	0x2456	; 0x2456 <bno055_init>
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	88 23       	and	r24, r24
    3c56:	a1 f0       	breq	.+40     	; 0x3c80 <imu_init+0x138>
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	08 2e       	mov	r0, r24
    3c5c:	00 0c       	add	r0, r0
    3c5e:	99 0b       	sbc	r25, r25
    3c60:	29 2f       	mov	r18, r25
    3c62:	2f 93       	push	r18
    3c64:	8f 93       	push	r24
    3c66:	82 e8       	ldi	r24, 0x82	; 130
    3c68:	90 e2       	ldi	r25, 0x20	; 32
    3c6a:	89 2f       	mov	r24, r25
    3c6c:	8f 93       	push	r24
    3c6e:	82 e8       	ldi	r24, 0x82	; 130
    3c70:	90 e2       	ldi	r25, 0x20	; 32
    3c72:	8f 93       	push	r24
    3c74:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	77 db       	rcall	.-2322   	; 0x3372 <bno055_set_power_mode>
    3c84:	8c e0       	ldi	r24, 0x0C	; 12
    3c86:	80 da       	rcall	.-2816   	; 0x3188 <bno055_set_operation_mode>
    3c88:	8a 83       	std	Y+2, r24	; 0x02
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	88 23       	and	r24, r24
    3c8e:	a1 f0       	breq	.+40     	; 0x3cb8 <imu_init+0x170>
    3c90:	8a 81       	ldd	r24, Y+2	; 0x02
    3c92:	08 2e       	mov	r0, r24
    3c94:	00 0c       	add	r0, r0
    3c96:	99 0b       	sbc	r25, r25
    3c98:	29 2f       	mov	r18, r25
    3c9a:	2f 93       	push	r18
    3c9c:	8f 93       	push	r24
    3c9e:	86 ea       	ldi	r24, 0xA6	; 166
    3ca0:	90 e2       	ldi	r25, 0x20	; 32
    3ca2:	89 2f       	mov	r24, r25
    3ca4:	8f 93       	push	r24
    3ca6:	86 ea       	ldi	r24, 0xA6	; 166
    3ca8:	90 e2       	ldi	r25, 0x20	; 32
    3caa:	8f 93       	push	r24
    3cac:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	1c 86       	std	Y+12, r1	; 0x0c
    3cba:	ce 01       	movw	r24, r28
    3cbc:	0c 96       	adiw	r24, 0x0c	; 12
    3cbe:	0e da       	rcall	.-3044   	; 0x30dc <bno055_get_operation_mode>
    3cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cc2:	8c 30       	cpi	r24, 0x0C	; 12
    3cc4:	f1 f0       	breq	.+60     	; 0x3d02 <imu_init+0x1ba>
    3cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc8:	28 2f       	mov	r18, r24
    3cca:	88 0f       	add	r24, r24
    3ccc:	33 0b       	sbc	r19, r19
    3cce:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cd0:	88 2f       	mov	r24, r24
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	43 2f       	mov	r20, r19
    3cd6:	4f 93       	push	r20
    3cd8:	2f 93       	push	r18
    3cda:	1f 92       	push	r1
    3cdc:	2c e0       	ldi	r18, 0x0C	; 12
    3cde:	2f 93       	push	r18
    3ce0:	29 2f       	mov	r18, r25
    3ce2:	2f 93       	push	r18
    3ce4:	8f 93       	push	r24
    3ce6:	84 ec       	ldi	r24, 0xC4	; 196
    3ce8:	90 e2       	ldi	r25, 0x20	; 32
    3cea:	89 2f       	mov	r24, r25
    3cec:	8f 93       	push	r24
    3cee:	84 ec       	ldi	r24, 0xC4	; 196
    3cf0:	90 e2       	ldi	r25, 0x20	; 32
    3cf2:	8f 93       	push	r24
    3cf4:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    3cf8:	8d b7       	in	r24, 0x3d	; 61
    3cfa:	9e b7       	in	r25, 0x3e	; 62
    3cfc:	08 96       	adiw	r24, 0x08	; 8
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	8d e0       	ldi	r24, 0x0D	; 13
    3d04:	91 e2       	ldi	r25, 0x21	; 33
    3d06:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
    3d0a:	00 00       	nop
    3d0c:	2c 96       	adiw	r28, 0x0c	; 12
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	08 95       	ret

00003d18 <imu_update>:
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	84 e9       	ldi	r24, 0x94	; 148
    3d2e:	98 e2       	ldi	r25, 0x28	; 40
    3d30:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <bno055_convert_double_linear_accel_xyz_msq>
    3d34:	80 ea       	ldi	r24, 0xA0	; 160
    3d36:	98 e2       	ldi	r25, 0x28	; 40
    3d38:	0e 94 14 15 	call	0x2a28	; 0x2a28 <bno055_convert_double_euler_hpr_deg>
    3d3c:	81 ec       	ldi	r24, 0xC1	; 193
    3d3e:	98 e2       	ldi	r25, 0x28	; 40
    3d40:	0e 94 76 16 	call	0x2cec	; 0x2cec <bno055_get_accel_calib_stat>
    3d44:	87 ec       	ldi	r24, 0xC7	; 199
    3d46:	98 e2       	ldi	r25, 0x28	; 40
    3d48:	2e d8       	rcall	.-4004   	; 0x2da6 <bno055_get_gyro_calib_stat>
    3d4a:	88 eb       	ldi	r24, 0xB8	; 184
    3d4c:	98 e2       	ldi	r25, 0x28	; 40
    3d4e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <bno055_get_mag_calib_stat>
    3d52:	82 ec       	ldi	r24, 0xC2	; 194
    3d54:	98 e2       	ldi	r25, 0x28	; 40
    3d56:	88 d8       	rcall	.-3824   	; 0x2e68 <bno055_get_sys_calib_stat>
    3d58:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <prevTime>
    3d5c:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <prevTime+0x1>
    3d60:	a0 91 b6 28 	lds	r26, 0x28B6	; 0x8028b6 <prevTime+0x2>
    3d64:	b0 91 b7 28 	lds	r27, 0x28B7	; 0x8028b7 <prevTime+0x3>
    3d68:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <prevPrevTime>
    3d6c:	90 93 7e 28 	sts	0x287E, r25	; 0x80287e <prevPrevTime+0x1>
    3d70:	a0 93 7f 28 	sts	0x287F, r26	; 0x80287f <prevPrevTime+0x2>
    3d74:	b0 93 80 28 	sts	0x2880, r27	; 0x802880 <prevPrevTime+0x3>
    3d78:	0e 94 a1 31 	call	0x6342	; 0x6342 <rtc_get_time>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	bc 01       	movw	r22, r24
    3d82:	cd 01       	movw	r24, r26
    3d84:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <prevTime>
    3d90:	90 93 b5 28 	sts	0x28B5, r25	; 0x8028b5 <prevTime+0x1>
    3d94:	a0 93 b6 28 	sts	0x28B6, r26	; 0x8028b6 <prevTime+0x2>
    3d98:	b0 93 b7 28 	sts	0x28B7, r27	; 0x8028b7 <prevTime+0x3>
    3d9c:	80 91 bd 28 	lds	r24, 0x28BD	; 0x8028bd <currentAccZ>
    3da0:	90 91 be 28 	lds	r25, 0x28BE	; 0x8028be <currentAccZ+0x1>
    3da4:	a0 91 bf 28 	lds	r26, 0x28BF	; 0x8028bf <currentAccZ+0x2>
    3da8:	b0 91 c0 28 	lds	r27, 0x28C0	; 0x8028c0 <currentAccZ+0x3>
    3dac:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <prevAccZ>
    3db0:	90 93 ba 28 	sts	0x28BA, r25	; 0x8028ba <prevAccZ+0x1>
    3db4:	a0 93 bb 28 	sts	0x28BB, r26	; 0x8028bb <prevAccZ+0x2>
    3db8:	b0 93 bc 28 	sts	0x28BC, r27	; 0x8028bc <prevAccZ+0x3>
    3dbc:	e8 d0       	rcall	.+464    	; 0x3f8e <imu_accel_z>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <currentAccZ>
    3dc6:	90 93 be 28 	sts	0x28BE, r25	; 0x8028be <currentAccZ+0x1>
    3dca:	a0 93 bf 28 	sts	0x28BF, r26	; 0x8028bf <currentAccZ+0x2>
    3dce:	b0 93 c0 28 	sts	0x28C0, r27	; 0x8028c0 <currentAccZ+0x3>
    3dd2:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <currentVelZ>
    3dd6:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <currentVelZ+0x1>
    3dda:	a0 91 83 28 	lds	r26, 0x2883	; 0x802883 <currentVelZ+0x2>
    3dde:	b0 91 84 28 	lds	r27, 0x2884	; 0x802884 <currentVelZ+0x3>
    3de2:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <prevVelZ>
    3de6:	90 93 ad 28 	sts	0x28AD, r25	; 0x8028ad <prevVelZ+0x1>
    3dea:	a0 93 ae 28 	sts	0x28AE, r26	; 0x8028ae <prevVelZ+0x2>
    3dee:	b0 93 af 28 	sts	0x28AF, r27	; 0x8028af <prevVelZ+0x3>
    3df2:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <prevAccZ>
    3df6:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <prevAccZ+0x1>
    3dfa:	a0 91 bb 28 	lds	r26, 0x28BB	; 0x8028bb <prevAccZ+0x2>
    3dfe:	b0 91 bc 28 	lds	r27, 0x28BC	; 0x8028bc <prevAccZ+0x3>
    3e02:	20 91 bd 28 	lds	r18, 0x28BD	; 0x8028bd <currentAccZ>
    3e06:	30 91 be 28 	lds	r19, 0x28BE	; 0x8028be <currentAccZ+0x1>
    3e0a:	40 91 bf 28 	lds	r20, 0x28BF	; 0x8028bf <currentAccZ+0x2>
    3e0e:	50 91 c0 28 	lds	r21, 0x28C0	; 0x8028c0 <currentAccZ+0x3>
    3e12:	bc 01       	movw	r22, r24
    3e14:	cd 01       	movw	r24, r26
    3e16:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e0       	ldi	r20, 0x00	; 0
    3e24:	50 e4       	ldi	r21, 0x40	; 64
    3e26:	bc 01       	movw	r22, r24
    3e28:	cd 01       	movw	r24, r26
    3e2a:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	6c 01       	movw	r12, r24
    3e34:	7d 01       	movw	r14, r26
    3e36:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <prevTime>
    3e3a:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <prevTime+0x1>
    3e3e:	a0 91 b6 28 	lds	r26, 0x28B6	; 0x8028b6 <prevTime+0x2>
    3e42:	b0 91 b7 28 	lds	r27, 0x28B7	; 0x8028b7 <prevTime+0x3>
    3e46:	20 91 7d 28 	lds	r18, 0x287D	; 0x80287d <prevPrevTime>
    3e4a:	30 91 7e 28 	lds	r19, 0x287E	; 0x80287e <prevPrevTime+0x1>
    3e4e:	40 91 7f 28 	lds	r20, 0x287F	; 0x80287f <prevPrevTime+0x2>
    3e52:	50 91 80 28 	lds	r21, 0x2880	; 0x802880 <prevPrevTime+0x3>
    3e56:	bc 01       	movw	r22, r24
    3e58:	cd 01       	movw	r24, r26
    3e5a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__subsf3>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	9c 01       	movw	r18, r24
    3e64:	ad 01       	movw	r20, r26
    3e66:	c7 01       	movw	r24, r14
    3e68:	b6 01       	movw	r22, r12
    3e6a:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	7c 01       	movw	r14, r24
    3e74:	8d 01       	movw	r16, r26
    3e76:	80 91 ac 28 	lds	r24, 0x28AC	; 0x8028ac <prevVelZ>
    3e7a:	90 91 ad 28 	lds	r25, 0x28AD	; 0x8028ad <prevVelZ+0x1>
    3e7e:	a0 91 ae 28 	lds	r26, 0x28AE	; 0x8028ae <prevVelZ+0x2>
    3e82:	b0 91 af 28 	lds	r27, 0x28AF	; 0x8028af <prevVelZ+0x3>
    3e86:	9c 01       	movw	r18, r24
    3e88:	ad 01       	movw	r20, r26
    3e8a:	c8 01       	movw	r24, r16
    3e8c:	b7 01       	movw	r22, r14
    3e8e:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <currentVelZ>
    3e9a:	90 93 82 28 	sts	0x2882, r25	; 0x802882 <currentVelZ+0x1>
    3e9e:	a0 93 83 28 	sts	0x2883, r26	; 0x802883 <currentVelZ+0x2>
    3ea2:	b0 93 84 28 	sts	0x2884, r27	; 0x802884 <currentVelZ+0x3>
    3ea6:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <currentPosZ>
    3eaa:	90 91 b1 28 	lds	r25, 0x28B1	; 0x8028b1 <currentPosZ+0x1>
    3eae:	a0 91 b2 28 	lds	r26, 0x28B2	; 0x8028b2 <currentPosZ+0x2>
    3eb2:	b0 91 b3 28 	lds	r27, 0x28B3	; 0x8028b3 <currentPosZ+0x3>
    3eb6:	80 93 c3 28 	sts	0x28C3, r24	; 0x8028c3 <prevPosZ>
    3eba:	90 93 c4 28 	sts	0x28C4, r25	; 0x8028c4 <prevPosZ+0x1>
    3ebe:	a0 93 c5 28 	sts	0x28C5, r26	; 0x8028c5 <prevPosZ+0x2>
    3ec2:	b0 93 c6 28 	sts	0x28C6, r27	; 0x8028c6 <prevPosZ+0x3>
    3ec6:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <currentVelZ>
    3eca:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <currentVelZ+0x1>
    3ece:	a0 91 83 28 	lds	r26, 0x2883	; 0x802883 <currentVelZ+0x2>
    3ed2:	b0 91 84 28 	lds	r27, 0x2884	; 0x802884 <currentVelZ+0x3>
    3ed6:	20 91 ac 28 	lds	r18, 0x28AC	; 0x8028ac <prevVelZ>
    3eda:	30 91 ad 28 	lds	r19, 0x28AD	; 0x8028ad <prevVelZ+0x1>
    3ede:	40 91 ae 28 	lds	r20, 0x28AE	; 0x8028ae <prevVelZ+0x2>
    3ee2:	50 91 af 28 	lds	r21, 0x28AF	; 0x8028af <prevVelZ+0x3>
    3ee6:	bc 01       	movw	r22, r24
    3ee8:	cd 01       	movw	r24, r26
    3eea:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	40 e0       	ldi	r20, 0x00	; 0
    3ef8:	50 e4       	ldi	r21, 0x40	; 64
    3efa:	bc 01       	movw	r22, r24
    3efc:	cd 01       	movw	r24, r26
    3efe:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	6c 01       	movw	r12, r24
    3f08:	7d 01       	movw	r14, r26
    3f0a:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <prevTime>
    3f0e:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <prevTime+0x1>
    3f12:	a0 91 b6 28 	lds	r26, 0x28B6	; 0x8028b6 <prevTime+0x2>
    3f16:	b0 91 b7 28 	lds	r27, 0x28B7	; 0x8028b7 <prevTime+0x3>
    3f1a:	20 91 7d 28 	lds	r18, 0x287D	; 0x80287d <prevPrevTime>
    3f1e:	30 91 7e 28 	lds	r19, 0x287E	; 0x80287e <prevPrevTime+0x1>
    3f22:	40 91 7f 28 	lds	r20, 0x287F	; 0x80287f <prevPrevTime+0x2>
    3f26:	50 91 80 28 	lds	r21, 0x2880	; 0x802880 <prevPrevTime+0x3>
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__subsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	9c 01       	movw	r18, r24
    3f38:	ad 01       	movw	r20, r26
    3f3a:	c7 01       	movw	r24, r14
    3f3c:	b6 01       	movw	r22, r12
    3f3e:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	7c 01       	movw	r14, r24
    3f48:	8d 01       	movw	r16, r26
    3f4a:	80 91 c3 28 	lds	r24, 0x28C3	; 0x8028c3 <prevPosZ>
    3f4e:	90 91 c4 28 	lds	r25, 0x28C4	; 0x8028c4 <prevPosZ+0x1>
    3f52:	a0 91 c5 28 	lds	r26, 0x28C5	; 0x8028c5 <prevPosZ+0x2>
    3f56:	b0 91 c6 28 	lds	r27, 0x28C6	; 0x8028c6 <prevPosZ+0x3>
    3f5a:	9c 01       	movw	r18, r24
    3f5c:	ad 01       	movw	r20, r26
    3f5e:	c8 01       	movw	r24, r16
    3f60:	b7 01       	movw	r22, r14
    3f62:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	80 93 b0 28 	sts	0x28B0, r24	; 0x8028b0 <currentPosZ>
    3f6e:	90 93 b1 28 	sts	0x28B1, r25	; 0x8028b1 <currentPosZ+0x1>
    3f72:	a0 93 b2 28 	sts	0x28B2, r26	; 0x8028b2 <currentPosZ+0x2>
    3f76:	b0 93 b3 28 	sts	0x28B3, r27	; 0x8028b3 <currentPosZ+0x3>
    3f7a:	00 00       	nop
    3f7c:	df 91       	pop	r29
    3f7e:	cf 91       	pop	r28
    3f80:	1f 91       	pop	r17
    3f82:	0f 91       	pop	r16
    3f84:	ff 90       	pop	r15
    3f86:	ef 90       	pop	r14
    3f88:	df 90       	pop	r13
    3f8a:	cf 90       	pop	r12
    3f8c:	08 95       	ret

00003f8e <imu_accel_z>:
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	80 91 9c 28 	lds	r24, 0x289C	; 0x80289c <bno055_linear_accel+0x8>
    3f9a:	90 91 9d 28 	lds	r25, 0x289D	; 0x80289d <bno055_linear_accel+0x9>
    3f9e:	a0 91 9e 28 	lds	r26, 0x289E	; 0x80289e <bno055_linear_accel+0xa>
    3fa2:	b0 91 9f 28 	lds	r27, 0x289F	; 0x80289f <bno055_linear_accel+0xb>
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	08 95       	ret

00003fb0 <imu_vel_z>:
    3fb0:	cf 93       	push	r28
    3fb2:	df 93       	push	r29
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <currentVelZ>
    3fbc:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <currentVelZ+0x1>
    3fc0:	a0 91 83 28 	lds	r26, 0x2883	; 0x802883 <currentVelZ+0x2>
    3fc4:	b0 91 84 28 	lds	r27, 0x2884	; 0x802884 <currentVelZ+0x3>
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	08 95       	ret

00003fd2 <imu_pos_z>:
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	cd b7       	in	r28, 0x3d	; 61
    3fd8:	de b7       	in	r29, 0x3e	; 62
    3fda:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <currentPosZ>
    3fde:	90 91 b1 28 	lds	r25, 0x28B1	; 0x8028b1 <currentPosZ+0x1>
    3fe2:	a0 91 b2 28 	lds	r26, 0x28B2	; 0x8028b2 <currentPosZ+0x2>
    3fe6:	b0 91 b3 28 	lds	r27, 0x28B3	; 0x8028b3 <currentPosZ+0x3>
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	08 95       	ret

00003ff4 <imu_roll>:
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <bno055_euler+0x4>
    4000:	90 91 a5 28 	lds	r25, 0x28A5	; 0x8028a5 <bno055_euler+0x5>
    4004:	a0 91 a6 28 	lds	r26, 0x28A6	; 0x8028a6 <bno055_euler+0x6>
    4008:	b0 91 a7 28 	lds	r27, 0x28A7	; 0x8028a7 <bno055_euler+0x7>
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	df 91       	pop	r29
    4012:	cf 91       	pop	r28
    4014:	08 95       	ret

00004016 <imu_pitch>:
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
    401e:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <bno055_euler+0x8>
    4022:	90 91 a9 28 	lds	r25, 0x28A9	; 0x8028a9 <bno055_euler+0x9>
    4026:	a0 91 aa 28 	lds	r26, 0x28AA	; 0x8028aa <bno055_euler+0xa>
    402a:	b0 91 ab 28 	lds	r27, 0x28AB	; 0x8028ab <bno055_euler+0xb>
    402e:	bc 01       	movw	r22, r24
    4030:	cd 01       	movw	r24, r26
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	08 95       	ret

00004038 <imu_heading>:
    4038:	cf 93       	push	r28
    403a:	df 93       	push	r29
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <bno055_euler>
    4044:	90 91 a1 28 	lds	r25, 0x28A1	; 0x8028a1 <bno055_euler+0x1>
    4048:	a0 91 a2 28 	lds	r26, 0x28A2	; 0x8028a2 <bno055_euler+0x2>
    404c:	b0 91 a3 28 	lds	r27, 0x28A3	; 0x8028a3 <bno055_euler+0x3>
    4050:	bc 01       	movw	r22, r24
    4052:	cd 01       	movw	r24, r26
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	08 95       	ret

0000405a <BNO055_I2C_bus_write>:
 *	\param reg_data : It is a value hold in the array,
 *		will be used for write the value into the register
 *	\param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	c2 55       	subi	r28, 0x52	; 82
    4064:	d1 09       	sbc	r29, r1
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	fe 01       	movw	r30, r28
    406c:	e2 5b       	subi	r30, 0xB2	; 178
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	80 83       	st	Z, r24
    4072:	ce 01       	movw	r24, r28
    4074:	81 5b       	subi	r24, 0xB1	; 177
    4076:	9f 4f       	sbci	r25, 0xFF	; 255
    4078:	fc 01       	movw	r30, r24
    407a:	60 83       	st	Z, r22
    407c:	ce 01       	movw	r24, r28
    407e:	80 5b       	subi	r24, 0xB0	; 176
    4080:	9f 4f       	sbci	r25, 0xFF	; 255
    4082:	fc 01       	movw	r30, r24
    4084:	40 83       	st	Z, r20
    4086:	51 83       	std	Z+1, r21	; 0x01
    4088:	ce 01       	movw	r24, r28
    408a:	8e 5a       	subi	r24, 0xAE	; 174
    408c:	9f 4f       	sbci	r25, 0xFF	; 255
    408e:	fc 01       	movw	r30, r24
    4090:	20 83       	st	Z, r18
	s32 BNO055_iERROR = BNO055_INIT_VALUE;
    4092:	19 82       	std	Y+1, r1	; 0x01
    4094:	1a 82       	std	Y+2, r1	; 0x02
// 	{
// 		array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] =
// 			*(reg_data + stringpos);
// 	}

	if(cnt > 1)
    4096:	ce 01       	movw	r24, r28
    4098:	8e 5a       	subi	r24, 0xAE	; 174
    409a:	9f 4f       	sbci	r25, 0xFF	; 255
    409c:	fc 01       	movw	r30, r24
    409e:	80 81       	ld	r24, Z
    40a0:	82 30       	cpi	r24, 0x02	; 2
    40a2:	58 f0       	brcs	.+22     	; 0x40ba <BNO055_I2C_bus_write+0x60>
	{
		printf("The BNO055 Actually does write more than one byte at a time, isn't that surprising.\nI guess it's time to fix the I2C write hack then.");
    40a4:	8e e1       	ldi	r24, 0x1E	; 30
    40a6:	91 e2       	ldi	r25, 0x21	; 33
    40a8:	89 2f       	mov	r24, r25
    40aa:	8f 93       	push	r24
    40ac:	8e e1       	ldi	r24, 0x1E	; 30
    40ae:	91 e2       	ldi	r25, 0x21	; 33
    40b0:	8f 93       	push	r24
    40b2:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
	}

	cnt = cnt + 1;	// BNO055 Discards the first write, so we make the first value 0
    40ba:	ce 01       	movw	r24, r28
    40bc:	8e 5a       	subi	r24, 0xAE	; 174
    40be:	9f 4f       	sbci	r25, 0xFF	; 255
    40c0:	9e 01       	movw	r18, r28
    40c2:	2e 5a       	subi	r18, 0xAE	; 174
    40c4:	3f 4f       	sbci	r19, 0xFF	; 255
    40c6:	f9 01       	movw	r30, r18
    40c8:	20 81       	ld	r18, Z
    40ca:	2f 5f       	subi	r18, 0xFF	; 255
    40cc:	fc 01       	movw	r30, r24
    40ce:	20 83       	st	Z, r18
	array[0] = 0;
    40d0:	1b 82       	std	Y+3, r1	; 0x03
	array[1] = reg_data[0]; // This breaks if it ever sends more than one byte at a time, but I don't think it does;
    40d2:	ce 01       	movw	r24, r28
    40d4:	80 5b       	subi	r24, 0xB0	; 176
    40d6:	9f 4f       	sbci	r25, 0xFF	; 255
    40d8:	fc 01       	movw	r30, r24
    40da:	80 81       	ld	r24, Z
    40dc:	91 81       	ldd	r25, Z+1	; 0x01
    40de:	fc 01       	movw	r30, r24
    40e0:	80 81       	ld	r24, Z
    40e2:	8c 83       	std	Y+4, r24	; 0x04
	*/

	

	twi_package_t readbno055;
	readbno055.addr[0]	   = reg_addr-1; // it's minus one because the BNO055 discards the first write, and the second write one is at the next address 
    40e4:	ce 01       	movw	r24, r28
    40e6:	81 5b       	subi	r24, 0xB1	; 177
    40e8:	9f 4f       	sbci	r25, 0xFF	; 255
    40ea:	fc 01       	movw	r30, r24
    40ec:	80 81       	ld	r24, Z
    40ee:	2f ef       	ldi	r18, 0xFF	; 255
    40f0:	28 0f       	add	r18, r24
    40f2:	ce 01       	movw	r24, r28
    40f4:	8d 5b       	subi	r24, 0xBD	; 189
    40f6:	9f 4f       	sbci	r25, 0xFF	; 255
    40f8:	fc 01       	movw	r30, r24
    40fa:	21 83       	std	Z+1, r18	; 0x01
	readbno055.addr_length = 1;
    40fc:	ce 01       	movw	r24, r28
    40fe:	8d 5b       	subi	r24, 0xBD	; 189
    4100:	9f 4f       	sbci	r25, 0xFF	; 255
    4102:	21 e0       	ldi	r18, 0x01	; 1
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	fc 01       	movw	r30, r24
    4108:	24 83       	std	Z+4, r18	; 0x04
    410a:	35 83       	std	Z+5, r19	; 0x05
	readbno055.chip        = dev_addr;
    410c:	ce 01       	movw	r24, r28
    410e:	82 5b       	subi	r24, 0xB2	; 178
    4110:	9f 4f       	sbci	r25, 0xFF	; 255
    4112:	fc 01       	movw	r30, r24
    4114:	20 81       	ld	r18, Z
    4116:	ce 01       	movw	r24, r28
    4118:	8d 5b       	subi	r24, 0xBD	; 189
    411a:	9f 4f       	sbci	r25, 0xFF	; 255
    411c:	fc 01       	movw	r30, r24
    411e:	20 83       	st	Z, r18
	readbno055.buffer      = array;
    4120:	ce 01       	movw	r24, r28
    4122:	8d 5b       	subi	r24, 0xBD	; 189
    4124:	9f 4f       	sbci	r25, 0xFF	; 255
    4126:	9e 01       	movw	r18, r28
    4128:	2d 5f       	subi	r18, 0xFD	; 253
    412a:	3f 4f       	sbci	r19, 0xFF	; 255
    412c:	fc 01       	movw	r30, r24
    412e:	26 83       	std	Z+6, r18	; 0x06
    4130:	37 83       	std	Z+7, r19	; 0x07
	readbno055.length      = cnt;
    4132:	ce 01       	movw	r24, r28
    4134:	8e 5a       	subi	r24, 0xAE	; 174
    4136:	9f 4f       	sbci	r25, 0xFF	; 255
    4138:	fc 01       	movw	r30, r24
    413a:	80 81       	ld	r24, Z
    413c:	28 2f       	mov	r18, r24
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	ce 01       	movw	r24, r28
    4142:	8d 5b       	subi	r24, 0xBD	; 189
    4144:	9f 4f       	sbci	r25, 0xFF	; 255
    4146:	fc 01       	movw	r30, r24
    4148:	20 87       	std	Z+8, r18	; 0x08
    414a:	31 87       	std	Z+9, r19	; 0x09
	readbno055.no_wait     = false;
    414c:	ce 01       	movw	r24, r28
    414e:	8d 5b       	subi	r24, 0xBD	; 189
    4150:	9f 4f       	sbci	r25, 0xFF	; 255
    4152:	fc 01       	movw	r30, r24
    4154:	12 86       	std	Z+10, r1	; 0x0a


	BNO055_iERROR = (s8)twi_master_write(&IMU_TWI,&readbno055);
    4156:	ce 01       	movw	r24, r28
    4158:	8d 5b       	subi	r24, 0xBD	; 189
    415a:	9f 4f       	sbci	r25, 0xFF	; 255
    415c:	bc 01       	movw	r22, r24
    415e:	80 eb       	ldi	r24, 0xB0	; 176
    4160:	94 e0       	ldi	r25, 0x04	; 4
    4162:	c2 dc       	rcall	.-1660   	; 0x3ae8 <twi_master_write>
    4164:	08 2e       	mov	r0, r24
    4166:	00 0c       	add	r0, r0
    4168:	99 0b       	sbc	r25, r25
    416a:	89 83       	std	Y+1, r24	; 0x01
    416c:	9a 83       	std	Y+2, r25	; 0x02
// 	{
// 		printf(" %x, ",array[i]);
// 	}
// 	printf("\n");

	return (s8)BNO055_iERROR;
    416e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4170:	ce 5a       	subi	r28, 0xAE	; 174
    4172:	df 4f       	sbci	r29, 0xFF	; 255
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	08 95       	ret

0000417e <BNO055_I2C_bus_read>:
 *	\param reg_data : This data read from the sensor,
 *   which is hold in an array
 *	\param cnt : The no of byte of data to be read
 */
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	c2 55       	subi	r28, 0x52	; 82
    4188:	d1 09       	sbc	r29, r1
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	fe 01       	movw	r30, r28
    4190:	e2 5b       	subi	r30, 0xB2	; 178
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	80 83       	st	Z, r24
    4196:	ce 01       	movw	r24, r28
    4198:	81 5b       	subi	r24, 0xB1	; 177
    419a:	9f 4f       	sbci	r25, 0xFF	; 255
    419c:	fc 01       	movw	r30, r24
    419e:	60 83       	st	Z, r22
    41a0:	ce 01       	movw	r24, r28
    41a2:	80 5b       	subi	r24, 0xB0	; 176
    41a4:	9f 4f       	sbci	r25, 0xFF	; 255
    41a6:	fc 01       	movw	r30, r24
    41a8:	40 83       	st	Z, r20
    41aa:	51 83       	std	Z+1, r21	; 0x01
    41ac:	ce 01       	movw	r24, r28
    41ae:	8e 5a       	subi	r24, 0xAE	; 174
    41b0:	9f 4f       	sbci	r25, 0xFF	; 255
    41b2:	fc 01       	movw	r30, r24
    41b4:	20 83       	st	Z, r18
	s32 BNO055_iERROR = BNO055_INIT_VALUE;
    41b6:	19 82       	std	Y+1, r1	; 0x01
    41b8:	1a 82       	std	Y+2, r1	; 0x02
	u8 array[I2C_BUFFER_LEN] = {BNO055_INIT_VALUE};
    41ba:	20 e4       	ldi	r18, 0x40	; 64
    41bc:	ce 01       	movw	r24, r28
    41be:	03 96       	adiw	r24, 0x03	; 3
    41c0:	fc 01       	movw	r30, r24
    41c2:	32 2f       	mov	r19, r18
    41c4:	11 92       	st	Z+, r1
    41c6:	3a 95       	dec	r19
    41c8:	e9 f7       	brne	.-6      	; 0x41c4 <BNO055_I2C_bus_read+0x46>
     * In the driver BNO055_SUCCESS defined as 0
     * and FAILURE defined as -1
	 */

	twi_package_t readbno055;
	readbno055.addr[0]	   = reg_addr;
    41ca:	ce 01       	movw	r24, r28
    41cc:	8d 5b       	subi	r24, 0xBD	; 189
    41ce:	9f 4f       	sbci	r25, 0xFF	; 255
    41d0:	9e 01       	movw	r18, r28
    41d2:	21 5b       	subi	r18, 0xB1	; 177
    41d4:	3f 4f       	sbci	r19, 0xFF	; 255
    41d6:	f9 01       	movw	r30, r18
    41d8:	20 81       	ld	r18, Z
    41da:	fc 01       	movw	r30, r24
    41dc:	21 83       	std	Z+1, r18	; 0x01
	readbno055.addr_length = 1;
    41de:	ce 01       	movw	r24, r28
    41e0:	8d 5b       	subi	r24, 0xBD	; 189
    41e2:	9f 4f       	sbci	r25, 0xFF	; 255
    41e4:	21 e0       	ldi	r18, 0x01	; 1
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	fc 01       	movw	r30, r24
    41ea:	24 83       	std	Z+4, r18	; 0x04
    41ec:	35 83       	std	Z+5, r19	; 0x05
	readbno055.chip        = dev_addr;
    41ee:	ce 01       	movw	r24, r28
    41f0:	82 5b       	subi	r24, 0xB2	; 178
    41f2:	9f 4f       	sbci	r25, 0xFF	; 255
    41f4:	fc 01       	movw	r30, r24
    41f6:	20 81       	ld	r18, Z
    41f8:	ce 01       	movw	r24, r28
    41fa:	8d 5b       	subi	r24, 0xBD	; 189
    41fc:	9f 4f       	sbci	r25, 0xFF	; 255
    41fe:	fc 01       	movw	r30, r24
    4200:	20 83       	st	Z, r18
	readbno055.buffer      = array;
    4202:	ce 01       	movw	r24, r28
    4204:	8d 5b       	subi	r24, 0xBD	; 189
    4206:	9f 4f       	sbci	r25, 0xFF	; 255
    4208:	9e 01       	movw	r18, r28
    420a:	2d 5f       	subi	r18, 0xFD	; 253
    420c:	3f 4f       	sbci	r19, 0xFF	; 255
    420e:	fc 01       	movw	r30, r24
    4210:	26 83       	std	Z+6, r18	; 0x06
    4212:	37 83       	std	Z+7, r19	; 0x07
	readbno055.length      = cnt;
    4214:	ce 01       	movw	r24, r28
    4216:	8e 5a       	subi	r24, 0xAE	; 174
    4218:	9f 4f       	sbci	r25, 0xFF	; 255
    421a:	fc 01       	movw	r30, r24
    421c:	80 81       	ld	r24, Z
    421e:	28 2f       	mov	r18, r24
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	ce 01       	movw	r24, r28
    4224:	8d 5b       	subi	r24, 0xBD	; 189
    4226:	9f 4f       	sbci	r25, 0xFF	; 255
    4228:	fc 01       	movw	r30, r24
    422a:	20 87       	std	Z+8, r18	; 0x08
    422c:	31 87       	std	Z+9, r19	; 0x09
	readbno055.no_wait     = false;
    422e:	ce 01       	movw	r24, r28
    4230:	8d 5b       	subi	r24, 0xBD	; 189
    4232:	9f 4f       	sbci	r25, 0xFF	; 255
    4234:	fc 01       	movw	r30, r24
    4236:	12 86       	std	Z+10, r1	; 0x0a

	BNO055_iERROR = (int8_t) twi_master_read(&IMU_TWI, &readbno055);
    4238:	ce 01       	movw	r24, r28
    423a:	8d 5b       	subi	r24, 0xBD	; 189
    423c:	9f 4f       	sbci	r25, 0xFF	; 255
    423e:	bc 01       	movw	r22, r24
    4240:	80 eb       	ldi	r24, 0xB0	; 176
    4242:	94 e0       	ldi	r25, 0x04	; 4
    4244:	39 dc       	rcall	.-1934   	; 0x3ab8 <twi_master_read>
    4246:	08 2e       	mov	r0, r24
    4248:	00 0c       	add	r0, r0
    424a:	99 0b       	sbc	r25, r25
    424c:	89 83       	std	Y+1, r24	; 0x01
    424e:	9a 83       	std	Y+2, r25	; 0x02
	memcpy(reg_data, array, cnt);
    4250:	ce 01       	movw	r24, r28
    4252:	8e 5a       	subi	r24, 0xAE	; 174
    4254:	9f 4f       	sbci	r25, 0xFF	; 255
    4256:	fc 01       	movw	r30, r24
    4258:	80 81       	ld	r24, Z
    425a:	48 2f       	mov	r20, r24
    425c:	50 e0       	ldi	r21, 0x00	; 0
    425e:	9e 01       	movw	r18, r28
    4260:	2d 5f       	subi	r18, 0xFD	; 253
    4262:	3f 4f       	sbci	r19, 0xFF	; 255
    4264:	ce 01       	movw	r24, r28
    4266:	80 5b       	subi	r24, 0xB0	; 176
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	fc 01       	movw	r30, r24
    426c:	80 81       	ld	r24, Z
    426e:	91 81       	ldd	r25, Z+1	; 0x01
    4270:	b9 01       	movw	r22, r18
    4272:	0e 94 ac 5c 	call	0xb958	; 0xb958 <memcpy>
	
/*	printf("I2C Read: %x\n",array[0]);*/

// 	for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
// 		*(reg_data + stringpos) = array[stringpos];
	return (s8)BNO055_iERROR;
    4276:	89 81       	ldd	r24, Y+1	; 0x01
}
    4278:	ce 5a       	subi	r28, 0xAE	; 174
    427a:	df 4f       	sbci	r29, 0xFF	; 255
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	de bf       	out	0x3e, r29	; 62
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	08 95       	ret

00004286 <BNO055_delay_msek>:

void BNO055_delay_msek(u32 msek)
{
    4286:	2f 92       	push	r2
    4288:	3f 92       	push	r3
    428a:	4f 92       	push	r4
    428c:	5f 92       	push	r5
    428e:	6f 92       	push	r6
    4290:	7f 92       	push	r7
    4292:	8f 92       	push	r8
    4294:	9f 92       	push	r9
    4296:	af 92       	push	r10
    4298:	bf 92       	push	r11
    429a:	cf 92       	push	r12
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	1f 92       	push	r1
    42ac:	1f 92       	push	r1
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	89 83       	std	Y+1, r24	; 0x01
    42b4:	9a 83       	std	Y+2, r25	; 0x02
	delay_ms(msek);
    42b6:	89 81       	ldd	r24, Y+1	; 0x01
    42b8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ba:	89 2b       	or	r24, r25
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <BNO055_delay_msek+0x3a>
    42be:	97 c0       	rjmp	.+302    	; 0x43ee <BNO055_delay_msek+0x168>
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	9a 81       	ldd	r25, Y+2	; 0x02
    42c4:	1c 01       	movw	r2, r24
    42c6:	41 2c       	mov	r4, r1
    42c8:	51 2c       	mov	r5, r1
    42ca:	61 2c       	mov	r6, r1
    42cc:	71 2c       	mov	r7, r1
    42ce:	43 01       	movw	r8, r6
    42d0:	44 da       	rcall	.-2936   	; 0x375a <sysclk_get_cpu_hz>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	9c 01       	movw	r18, r24
    42d8:	ad 01       	movw	r20, r26
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	cb 01       	movw	r24, r22
    42e0:	a2 2e       	mov	r10, r18
    42e2:	b3 2e       	mov	r11, r19
    42e4:	c4 2e       	mov	r12, r20
    42e6:	d5 2e       	mov	r13, r21
    42e8:	e6 2e       	mov	r14, r22
    42ea:	f7 2e       	mov	r15, r23
    42ec:	08 2f       	mov	r16, r24
    42ee:	19 2f       	mov	r17, r25
    42f0:	22 2d       	mov	r18, r2
    42f2:	33 2d       	mov	r19, r3
    42f4:	44 2d       	mov	r20, r4
    42f6:	55 2d       	mov	r21, r5
    42f8:	66 2d       	mov	r22, r6
    42fa:	77 2d       	mov	r23, r7
    42fc:	88 2d       	mov	r24, r8
    42fe:	99 2d       	mov	r25, r9
    4300:	0e 94 c8 59 	call	0xb390	; 0xb390 <__muldi3>
    4304:	a2 2e       	mov	r10, r18
    4306:	b3 2e       	mov	r11, r19
    4308:	c4 2e       	mov	r12, r20
    430a:	d5 2e       	mov	r13, r21
    430c:	e6 2e       	mov	r14, r22
    430e:	f7 2e       	mov	r15, r23
    4310:	08 2f       	mov	r16, r24
    4312:	19 2f       	mov	r17, r25
    4314:	2a 2c       	mov	r2, r10
    4316:	3b 2c       	mov	r3, r11
    4318:	4c 2c       	mov	r4, r12
    431a:	5d 2c       	mov	r5, r13
    431c:	6e 2c       	mov	r6, r14
    431e:	7f 2c       	mov	r7, r15
    4320:	80 2e       	mov	r8, r16
    4322:	91 2e       	mov	r9, r17
    4324:	0f 2e       	mov	r0, r31
    4326:	f6 e0       	ldi	r31, 0x06	; 6
    4328:	af 2e       	mov	r10, r31
    432a:	f0 2d       	mov	r31, r0
    432c:	b1 2c       	mov	r11, r1
    432e:	c1 2c       	mov	r12, r1
    4330:	d1 2c       	mov	r13, r1
    4332:	e1 2c       	mov	r14, r1
    4334:	f1 2c       	mov	r15, r1
    4336:	00 e0       	ldi	r16, 0x00	; 0
    4338:	10 e0       	ldi	r17, 0x00	; 0
    433a:	22 2d       	mov	r18, r2
    433c:	33 2d       	mov	r19, r3
    433e:	44 2d       	mov	r20, r4
    4340:	55 2d       	mov	r21, r5
    4342:	66 2d       	mov	r22, r6
    4344:	77 2d       	mov	r23, r7
    4346:	88 2d       	mov	r24, r8
    4348:	99 2d       	mov	r25, r9
    434a:	0e 94 1b 5a 	call	0xb436	; 0xb436 <__udivdi3>
    434e:	22 2e       	mov	r2, r18
    4350:	33 2e       	mov	r3, r19
    4352:	44 2e       	mov	r4, r20
    4354:	55 2e       	mov	r5, r21
    4356:	66 2e       	mov	r6, r22
    4358:	77 2e       	mov	r7, r23
    435a:	88 2e       	mov	r8, r24
    435c:	99 2e       	mov	r9, r25
    435e:	a2 2c       	mov	r10, r2
    4360:	b3 2c       	mov	r11, r3
    4362:	c4 2c       	mov	r12, r4
    4364:	d5 2c       	mov	r13, r5
    4366:	e6 2c       	mov	r14, r6
    4368:	f7 2c       	mov	r15, r7
    436a:	08 2d       	mov	r16, r8
    436c:	19 2d       	mov	r17, r9
    436e:	2a 2d       	mov	r18, r10
    4370:	3b 2d       	mov	r19, r11
    4372:	4c 2d       	mov	r20, r12
    4374:	5d 2d       	mov	r21, r13
    4376:	6e 2d       	mov	r22, r14
    4378:	7f 2d       	mov	r23, r15
    437a:	80 2f       	mov	r24, r16
    437c:	91 2f       	mov	r25, r17
    437e:	29 51       	subi	r18, 0x19	; 25
    4380:	3c 4f       	sbci	r19, 0xFC	; 252
    4382:	4f 4f       	sbci	r20, 0xFF	; 255
    4384:	5f 4f       	sbci	r21, 0xFF	; 255
    4386:	6f 4f       	sbci	r22, 0xFF	; 255
    4388:	7f 4f       	sbci	r23, 0xFF	; 255
    438a:	8f 4f       	sbci	r24, 0xFF	; 255
    438c:	9f 4f       	sbci	r25, 0xFF	; 255
    438e:	a2 2e       	mov	r10, r18
    4390:	b3 2e       	mov	r11, r19
    4392:	c4 2e       	mov	r12, r20
    4394:	d5 2e       	mov	r13, r21
    4396:	e6 2e       	mov	r14, r22
    4398:	f7 2e       	mov	r15, r23
    439a:	08 2f       	mov	r16, r24
    439c:	19 2f       	mov	r17, r25
    439e:	2a 2d       	mov	r18, r10
    43a0:	3b 2d       	mov	r19, r11
    43a2:	4c 2d       	mov	r20, r12
    43a4:	5d 2d       	mov	r21, r13
    43a6:	6e 2d       	mov	r22, r14
    43a8:	7f 2d       	mov	r23, r15
    43aa:	80 2f       	mov	r24, r16
    43ac:	91 2f       	mov	r25, r17
    43ae:	0e 94 2f 54 	call	0xa85e	; 0xa85e <__floatundisf>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	4a e7       	ldi	r20, 0x7A	; 122
    43bc:	54 e4       	ldi	r21, 0x44	; 68
    43be:	bc 01       	movw	r22, r24
    43c0:	cd 01       	movw	r24, r26
    43c2:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	bc 01       	movw	r22, r24
    43cc:	cd 01       	movw	r24, r26
    43ce:	0e 94 8c 53 	call	0xa718	; 0xa718 <__fixunssfdi>
    43d2:	a2 2e       	mov	r10, r18
    43d4:	b3 2e       	mov	r11, r19
    43d6:	c4 2e       	mov	r12, r20
    43d8:	d5 2e       	mov	r13, r21
    43da:	e6 2e       	mov	r14, r22
    43dc:	f7 2e       	mov	r15, r23
    43de:	08 2f       	mov	r16, r24
    43e0:	19 2f       	mov	r17, r25
    43e2:	d6 01       	movw	r26, r12
    43e4:	c5 01       	movw	r24, r10
    43e6:	bc 01       	movw	r22, r24
    43e8:	cd 01       	movw	r24, r26
    43ea:	5b db       	rcall	.-2378   	; 0x3aa2 <__portable_avr_delay_cycles>
    43ec:	6c c0       	rjmp	.+216    	; 0x44c6 <BNO055_delay_msek+0x240>
	return (s8)BNO055_iERROR;
}

void BNO055_delay_msek(u32 msek)
{
	delay_ms(msek);
    43ee:	b5 d9       	rcall	.-3222   	; 0x375a <sysclk_get_cpu_hz>
    43f0:	dc 01       	movw	r26, r24
    43f2:	cb 01       	movw	r24, r22
    43f4:	1c 01       	movw	r2, r24
    43f6:	2d 01       	movw	r4, r26
    43f8:	61 2c       	mov	r6, r1
    43fa:	71 2c       	mov	r7, r1
    43fc:	43 01       	movw	r8, r6
    43fe:	0f 2e       	mov	r0, r31
    4400:	f6 e0       	ldi	r31, 0x06	; 6
    4402:	af 2e       	mov	r10, r31
    4404:	f0 2d       	mov	r31, r0
    4406:	b1 2c       	mov	r11, r1
    4408:	c1 2c       	mov	r12, r1
    440a:	d1 2c       	mov	r13, r1
    440c:	e1 2c       	mov	r14, r1
    440e:	f1 2c       	mov	r15, r1
    4410:	00 e0       	ldi	r16, 0x00	; 0
    4412:	10 e0       	ldi	r17, 0x00	; 0
    4414:	22 2d       	mov	r18, r2
    4416:	33 2d       	mov	r19, r3
    4418:	44 2d       	mov	r20, r4
    441a:	55 2d       	mov	r21, r5
    441c:	66 2d       	mov	r22, r6
    441e:	77 2d       	mov	r23, r7
    4420:	88 2d       	mov	r24, r8
    4422:	99 2d       	mov	r25, r9
    4424:	0e 94 1b 5a 	call	0xb436	; 0xb436 <__udivdi3>
    4428:	22 2e       	mov	r2, r18
    442a:	33 2e       	mov	r3, r19
    442c:	44 2e       	mov	r4, r20
    442e:	55 2e       	mov	r5, r21
    4430:	66 2e       	mov	r6, r22
    4432:	77 2e       	mov	r7, r23
    4434:	88 2e       	mov	r8, r24
    4436:	99 2e       	mov	r9, r25
    4438:	a2 2c       	mov	r10, r2
    443a:	b3 2c       	mov	r11, r3
    443c:	c4 2c       	mov	r12, r4
    443e:	d5 2c       	mov	r13, r5
    4440:	e6 2c       	mov	r14, r6
    4442:	f7 2c       	mov	r15, r7
    4444:	08 2d       	mov	r16, r8
    4446:	19 2d       	mov	r17, r9
    4448:	2a 2d       	mov	r18, r10
    444a:	3b 2d       	mov	r19, r11
    444c:	4c 2d       	mov	r20, r12
    444e:	5d 2d       	mov	r21, r13
    4450:	6e 2d       	mov	r22, r14
    4452:	7f 2d       	mov	r23, r15
    4454:	80 2f       	mov	r24, r16
    4456:	91 2f       	mov	r25, r17
    4458:	21 5c       	subi	r18, 0xC1	; 193
    445a:	3d 4b       	sbci	r19, 0xBD	; 189
    445c:	40 4f       	sbci	r20, 0xF0	; 240
    445e:	5f 4f       	sbci	r21, 0xFF	; 255
    4460:	6f 4f       	sbci	r22, 0xFF	; 255
    4462:	7f 4f       	sbci	r23, 0xFF	; 255
    4464:	8f 4f       	sbci	r24, 0xFF	; 255
    4466:	9f 4f       	sbci	r25, 0xFF	; 255
    4468:	a2 2e       	mov	r10, r18
    446a:	b3 2e       	mov	r11, r19
    446c:	c4 2e       	mov	r12, r20
    446e:	d5 2e       	mov	r13, r21
    4470:	e6 2e       	mov	r14, r22
    4472:	f7 2e       	mov	r15, r23
    4474:	08 2f       	mov	r16, r24
    4476:	19 2f       	mov	r17, r25
    4478:	2a 2d       	mov	r18, r10
    447a:	3b 2d       	mov	r19, r11
    447c:	4c 2d       	mov	r20, r12
    447e:	5d 2d       	mov	r21, r13
    4480:	6e 2d       	mov	r22, r14
    4482:	7f 2d       	mov	r23, r15
    4484:	80 2f       	mov	r24, r16
    4486:	91 2f       	mov	r25, r17
    4488:	0e 94 2f 54 	call	0xa85e	; 0xa85e <__floatundisf>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	34 e2       	ldi	r19, 0x24	; 36
    4494:	44 e7       	ldi	r20, 0x74	; 116
    4496:	59 e4       	ldi	r21, 0x49	; 73
    4498:	bc 01       	movw	r22, r24
    449a:	cd 01       	movw	r24, r26
    449c:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	0e 94 8c 53 	call	0xa718	; 0xa718 <__fixunssfdi>
    44ac:	a2 2e       	mov	r10, r18
    44ae:	b3 2e       	mov	r11, r19
    44b0:	c4 2e       	mov	r12, r20
    44b2:	d5 2e       	mov	r13, r21
    44b4:	e6 2e       	mov	r14, r22
    44b6:	f7 2e       	mov	r15, r23
    44b8:	08 2f       	mov	r16, r24
    44ba:	19 2f       	mov	r17, r25
    44bc:	d6 01       	movw	r26, r12
    44be:	c5 01       	movw	r24, r10
    44c0:	bc 01       	movw	r22, r24
    44c2:	cd 01       	movw	r24, r26
    44c4:	ee da       	rcall	.-2596   	; 0x3aa2 <__portable_avr_delay_cycles>
    44c6:	00 00       	nop
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	1f 91       	pop	r17
    44d2:	0f 91       	pop	r16
    44d4:	ff 90       	pop	r15
    44d6:	ef 90       	pop	r14
    44d8:	df 90       	pop	r13
    44da:	cf 90       	pop	r12
    44dc:	bf 90       	pop	r11
    44de:	af 90       	pop	r10
    44e0:	9f 90       	pop	r9
    44e2:	8f 90       	pop	r8
    44e4:	7f 90       	pop	r7
    44e6:	6f 90       	pop	r6
    44e8:	5f 90       	pop	r5
    44ea:	4f 90       	pop	r4
    44ec:	3f 90       	pop	r3
    44ee:	2f 90       	pop	r2
    44f0:	08 95       	ret

000044f2 <servo_init>:

#include "mechanisms.h"


void servo_init(void)
{
    44f2:	cf 93       	push	r28
    44f4:	df 93       	push	r29
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
	
	
	pwm_init(&pwm_cfg, SERVO_TC, SERVO_PWM, 500);
    44fa:	24 ef       	ldi	r18, 0xF4	; 244
    44fc:	31 e0       	ldi	r19, 0x01	; 1
    44fe:	41 e0       	ldi	r20, 0x01	; 1
    4500:	64 e0       	ldi	r22, 0x04	; 4
    4502:	88 ec       	ldi	r24, 0xC8	; 200
    4504:	98 e2       	ldi	r25, 0x28	; 40
    4506:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <pwm_init>
	
	if(DEBUG) printf("Servos Initialized.\n");
    450a:	84 ea       	ldi	r24, 0xA4	; 164
    450c:	91 e2       	ldi	r25, 0x21	; 33
    450e:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
}
    4512:	00 00       	nop
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	08 95       	ret

0000451a <set_servo>:

void set_servo(uint16_t dutyCycle)
{
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	1f 92       	push	r1
    4520:	1f 92       	push	r1
    4522:	cd b7       	in	r28, 0x3d	; 61
    4524:	de b7       	in	r29, 0x3e	; 62
    4526:	89 83       	std	Y+1, r24	; 0x01
    4528:	9a 83       	std	Y+2, r25	; 0x02
	pwm_start(&pwm_cfg,dutyCycle);
    452a:	89 81       	ldd	r24, Y+1	; 0x01
    452c:	68 2f       	mov	r22, r24
    452e:	88 ec       	ldi	r24, 0xC8	; 200
    4530:	98 e2       	ldi	r25, 0x28	; 40
    4532:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <pwm_start>
	if(DEBUG) printf("Set Servo to duty cycle of %u\n", dutyCycle);
    4536:	8a 81       	ldd	r24, Y+2	; 0x02
    4538:	8f 93       	push	r24
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	8f 93       	push	r24
    453e:	88 eb       	ldi	r24, 0xB8	; 184
    4540:	91 e2       	ldi	r25, 0x21	; 33
    4542:	89 2f       	mov	r24, r25
    4544:	8f 93       	push	r24
    4546:	88 eb       	ldi	r24, 0xB8	; 184
    4548:	91 e2       	ldi	r25, 0x21	; 33
    454a:	8f 93       	push	r24
    454c:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
}
    4558:	00 00       	nop
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	df 91       	pop	r29
    4560:	cf 91       	pop	r28
    4562:	08 95       	ret

00004564 <buzz_on>:



void buzz_on(void)
{
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    456c:	80 e4       	ldi	r24, 0x40	; 64
    456e:	96 e0       	ldi	r25, 0x06	; 6
    4570:	20 e4       	ldi	r18, 0x40	; 64
    4572:	36 e0       	ldi	r19, 0x06	; 6
    4574:	f9 01       	movw	r30, r18
    4576:	21 81       	ldd	r18, Z+1	; 0x01
    4578:	21 60       	ori	r18, 0x01	; 1
    457a:	fc 01       	movw	r30, r24
    457c:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET |= 0b00000001;
    457e:	80 e4       	ldi	r24, 0x40	; 64
    4580:	96 e0       	ldi	r25, 0x06	; 6
    4582:	20 e4       	ldi	r18, 0x40	; 64
    4584:	36 e0       	ldi	r19, 0x06	; 6
    4586:	f9 01       	movw	r30, r18
    4588:	25 81       	ldd	r18, Z+5	; 0x05
    458a:	21 60       	ori	r18, 0x01	; 1
    458c:	fc 01       	movw	r30, r24
    458e:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer ON\n");
    4590:	87 ed       	ldi	r24, 0xD7	; 215
    4592:	91 e2       	ldi	r25, 0x21	; 33
    4594:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
	
}
    4598:	00 00       	nop
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	08 95       	ret

000045a0 <tc_set_overflow_interrupt_level>:
 * \param level Overflow interrupt level
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	00 d0       	rcall	.+0      	; 0x45a6 <tc_set_overflow_interrupt_level+0x6>
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	89 83       	std	Y+1, r24	; 0x01
    45ac:	9a 83       	std	Y+2, r25	; 0x02
    45ae:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    45b0:	89 81       	ldd	r24, Y+1	; 0x01
    45b2:	9a 81       	ldd	r25, Y+2	; 0x02
    45b4:	fc 01       	movw	r30, r24
    45b6:	86 81       	ldd	r24, Z+6	; 0x06
    45b8:	28 2f       	mov	r18, r24
    45ba:	2c 7f       	andi	r18, 0xFC	; 252
    45bc:	89 81       	ldd	r24, Y+1	; 0x01
    45be:	9a 81       	ldd	r25, Y+2	; 0x02
    45c0:	fc 01       	movw	r30, r24
    45c2:	26 83       	std	Z+6, r18	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    45c4:	89 81       	ldd	r24, Y+1	; 0x01
    45c6:	9a 81       	ldd	r25, Y+2	; 0x02
    45c8:	fc 01       	movw	r30, r24
    45ca:	96 81       	ldd	r25, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	29 2f       	mov	r18, r25
    45d0:	28 2b       	or	r18, r24
    45d2:	89 81       	ldd	r24, Y+1	; 0x01
    45d4:	9a 81       	ldd	r25, Y+2	; 0x02
    45d6:	fc 01       	movw	r30, r24
    45d8:	26 83       	std	Z+6, r18	; 0x06
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
}
    45da:	00 00       	nop
    45dc:	23 96       	adiw	r28, 0x03	; 3
    45de:	cd bf       	out	0x3d, r28	; 61
    45e0:	de bf       	out	0x3e, r29	; 62
    45e2:	df 91       	pop	r29
    45e4:	cf 91       	pop	r28
    45e6:	08 95       	ret

000045e8 <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	00 d0       	rcall	.+0      	; 0x45ee <tc_write_clock_source+0x6>
    45ee:	cd b7       	in	r28, 0x3d	; 61
    45f0:	de b7       	in	r29, 0x3e	; 62
    45f2:	89 83       	std	Y+1, r24	; 0x01
    45f4:	9a 83       	std	Y+2, r25	; 0x02
    45f6:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	9a 81       	ldd	r25, Y+2	; 0x02
    45fc:	fc 01       	movw	r30, r24
    45fe:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    4600:	98 2f       	mov	r25, r24
    4602:	90 7f       	andi	r25, 0xF0	; 240
    4604:	8b 81       	ldd	r24, Y+3	; 0x03
    4606:	89 2b       	or	r24, r25
    4608:	28 2f       	mov	r18, r24
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	fc 01       	movw	r30, r24
    4610:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    4612:	00 00       	nop
    4614:	23 96       	adiw	r28, 0x03	; 3
    4616:	cd bf       	out	0x3d, r28	; 61
    4618:	de bf       	out	0x3e, r29	; 62
    461a:	df 91       	pop	r29
    461c:	cf 91       	pop	r28
    461e:	08 95       	ret

00004620 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	00 d0       	rcall	.+0      	; 0x4626 <tc_write_period+0x6>
    4626:	1f 92       	push	r1
    4628:	cd b7       	in	r28, 0x3d	; 61
    462a:	de b7       	in	r29, 0x3e	; 62
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	9a 83       	std	Y+2, r25	; 0x02
    4630:	6b 83       	std	Y+3, r22	; 0x03
    4632:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	9a 81       	ldd	r25, Y+2	; 0x02
    4638:	2b 81       	ldd	r18, Y+3	; 0x03
    463a:	3c 81       	ldd	r19, Y+4	; 0x04
    463c:	fc 01       	movw	r30, r24
    463e:	26 a3       	std	Z+38, r18	; 0x26
    4640:	37 a3       	std	Z+39, r19	; 0x27
}
    4642:	00 00       	nop
    4644:	24 96       	adiw	r28, 0x04	; 4
    4646:	cd bf       	out	0x3d, r28	; 61
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	08 95       	ret

00004650 <tc_clear_overflow>:
 *
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	1f 92       	push	r1
    4656:	1f 92       	push	r1
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	89 83       	std	Y+1, r24	; 0x01
    465e:	9a 83       	std	Y+2, r25	; 0x02
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    4660:	89 81       	ldd	r24, Y+1	; 0x01
    4662:	9a 81       	ldd	r25, Y+2	; 0x02
    4664:	fc 01       	movw	r30, r24
    4666:	84 85       	ldd	r24, Z+12	; 0x0c
    4668:	28 2f       	mov	r18, r24
    466a:	21 60       	ori	r18, 0x01	; 1
    466c:	89 81       	ldd	r24, Y+1	; 0x01
    466e:	9a 81       	ldd	r25, Y+2	; 0x02
    4670:	fc 01       	movw	r30, r24
    4672:	24 87       	std	Z+12, r18	; 0x0c
}
    4674:	00 00       	nop
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	08 95       	ret

00004680 <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	00 d0       	rcall	.+0      	; 0x4686 <tc_set_wgm+0x6>
    4686:	cd b7       	in	r28, 0x3d	; 61
    4688:	de b7       	in	r29, 0x3e	; 62
    468a:	89 83       	std	Y+1, r24	; 0x01
    468c:	9a 83       	std	Y+2, r25	; 0x02
    468e:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    4690:	89 81       	ldd	r24, Y+1	; 0x01
    4692:	9a 81       	ldd	r25, Y+2	; 0x02
    4694:	fc 01       	movw	r30, r24
    4696:	81 81       	ldd	r24, Z+1	; 0x01
    4698:	98 2f       	mov	r25, r24
    469a:	98 7f       	andi	r25, 0xF8	; 248
    469c:	8b 81       	ldd	r24, Y+3	; 0x03
    469e:	89 2b       	or	r24, r25
    46a0:	28 2f       	mov	r18, r24
    46a2:	89 81       	ldd	r24, Y+1	; 0x01
    46a4:	9a 81       	ldd	r25, Y+2	; 0x02
    46a6:	fc 01       	movw	r30, r24
    46a8:	21 83       	std	Z+1, r18	; 0x01
}
    46aa:	00 00       	nop
    46ac:	23 96       	adiw	r28, 0x03	; 3
    46ae:	cd bf       	out	0x3d, r28	; 61
    46b0:	de bf       	out	0x3e, r29	; 62
    46b2:	df 91       	pop	r29
    46b4:	cf 91       	pop	r28
    46b6:	08 95       	ret

000046b8 <xbee_callback>:

static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

static void xbee_callback(void)
{
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
	write_telem_to_xbee();
    46c0:	9b d0       	rcall	.+310    	; 0x47f8 <write_telem_to_xbee>

		tc_clear_overflow(&XBEE_TC);
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	98 e0       	ldi	r25, 0x08	; 8
    46c6:	c4 df       	rcall	.-120    	; 0x4650 <tc_clear_overflow>
		
	
}
    46c8:	00 00       	nop
    46ca:	df 91       	pop	r29
    46cc:	cf 91       	pop	r28
    46ce:	08 95       	ret

000046d0 <xbee_init>:

void xbee_init()
{
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	cd b7       	in	r28, 0x3d	; 61
    46d6:	de b7       	in	r29, 0x3e	; 62
	xbee_uart.Baud=XBEEBAUD;
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	92 ec       	ldi	r25, 0xC2	; 194
    46dc:	a1 e0       	ldi	r26, 0x01	; 1
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <xbee_uart+0x6>
    46e4:	90 93 a7 22 	sts	0x22A7, r25	; 0x8022a7 <xbee_uart+0x7>
    46e8:	a0 93 a8 22 	sts	0x22A8, r26	; 0x8022a8 <xbee_uart+0x8>
    46ec:	b0 93 a9 22 	sts	0x22A9, r27	; 0x8022a9 <xbee_uart+0x9>
	xbee_uart.Port=P_XBEEPORT;
    46f0:	80 e4       	ldi	r24, 0x40	; 64
    46f2:	96 e0       	ldi	r25, 0x06	; 6
    46f4:	80 93 a0 22 	sts	0x22A0, r24	; 0x8022a0 <xbee_uart>
    46f8:	90 93 a1 22 	sts	0x22A1, r25	; 0x8022a1 <xbee_uart+0x1>
	xbee_uart.Usart=P_XBEEUART;
    46fc:	80 ea       	ldi	r24, 0xA0	; 160
    46fe:	98 e0       	ldi	r25, 0x08	; 8
    4700:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <xbee_uart+0x2>
    4704:	90 93 a3 22 	sts	0x22A3, r25	; 0x8022a3 <xbee_uart+0x3>
	xbee_uart.tx=XBEETXPIN;
    4708:	88 e0       	ldi	r24, 0x08	; 8
    470a:	80 93 a5 22 	sts	0x22A5, r24	; 0x8022a5 <xbee_uart+0x5>
	xbee_uart.rx=XBEERXPIN;
    470e:	84 e0       	ldi	r24, 0x04	; 4
    4710:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <xbee_uart+0x4>
	uart_init(&xbee_uart);
    4714:	80 ea       	ldi	r24, 0xA0	; 160
    4716:	92 e2       	ldi	r25, 0x22	; 34
    4718:	0e 94 30 4d 	call	0x9a60	; 0x9a60 <uart_init>
	XBEE_UART.CTRLA=0x14;
    471c:	80 ea       	ldi	r24, 0xA0	; 160
    471e:	98 e0       	ldi	r25, 0x08	; 8
    4720:	24 e1       	ldi	r18, 0x14	; 20
    4722:	fc 01       	movw	r30, r24
    4724:	23 83       	std	Z+3, r18	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    4726:	8c ee       	ldi	r24, 0xEC	; 236
    4728:	91 e2       	ldi	r25, 0x21	; 33
    472a:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
	
	tc_enable(&XBEE_TC);
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	98 e0       	ldi	r25, 0x08	; 8
    4732:	0e 94 e7 40 	call	0x81ce	; 0x81ce <tc_enable>
	tc_set_overflow_interrupt_callback(&XBEE_TC, xbee_callback);
    4736:	6c e5       	ldi	r22, 0x5C	; 92
    4738:	73 e2       	ldi	r23, 0x23	; 35
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	98 e0       	ldi	r25, 0x08	; 8
    473e:	0e 94 71 41 	call	0x82e2	; 0x82e2 <tc_set_overflow_interrupt_callback>
	tc_set_wgm(&XBEE_TC, TC_WG_NORMAL);
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	98 e0       	ldi	r25, 0x08	; 8
    4748:	9b df       	rcall	.-202    	; 0x4680 <tc_set_wgm>
	tc_write_period(&XBEE_TC, XBEE_WRITE_INTERVAL);
    474a:	62 e3       	ldi	r22, 0x32	; 50
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	98 e0       	ldi	r25, 0x08	; 8
    4752:	66 df       	rcall	.-308    	; 0x4620 <tc_write_period>
	tc_set_overflow_interrupt_level(&XBEE_TC, TC_INT_LVL_LO);
    4754:	61 e0       	ldi	r22, 0x01	; 1
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	98 e0       	ldi	r25, 0x08	; 8
    475a:	22 df       	rcall	.-444    	; 0x45a0 <tc_set_overflow_interrupt_level>
	cpu_irq_enable();
    475c:	78 94       	sei
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
    475e:	61 e0       	ldi	r22, 0x01	; 1
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	98 e0       	ldi	r25, 0x08	; 8
    4764:	41 df       	rcall	.-382    	; 0x45e8 <tc_write_clock_source>
}
    4766:	00 00       	nop
    4768:	df 91       	pop	r29
    476a:	cf 91       	pop	r28
    476c:	08 95       	ret

0000476e <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    476e:	cf 93       	push	r28
    4770:	df 93       	push	r29
    4772:	1f 92       	push	r1
    4774:	1f 92       	push	r1
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	9a 83       	std	Y+2, r25	; 0x02
	if(blockTransmission) return NULL;
    477e:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <blockTransmission>
    4782:	88 23       	and	r24, r24
    4784:	99 f5       	brne	.+102    	; 0x47ec <xbeeWrite+0x7e>
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	9a 81       	ldd	r25, Y+2	; 0x02
    478a:	0e 94 b5 5c 	call	0xb96a	; 0xb96a <strlen>
    478e:	9c 01       	movw	r18, r24
    4790:	89 81       	ldd	r24, Y+1	; 0x01
    4792:	9a 81       	ldd	r25, Y+2	; 0x02
    4794:	a9 01       	movw	r20, r18
    4796:	bc 01       	movw	r22, r24
    4798:	80 ea       	ldi	r24, 0xA0	; 160
    479a:	98 e0       	ldi	r25, 0x08	; 8
    479c:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <usart_serial_write_packet>
	packetCount++;
    47a0:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <packetCount>
    47a4:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <packetCount+0x1>
    47a8:	a0 91 3f 23 	lds	r26, 0x233F	; 0x80233f <packetCount+0x2>
    47ac:	b0 91 40 23 	lds	r27, 0x2340	; 0x802340 <packetCount+0x3>
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	a1 1d       	adc	r26, r1
    47b4:	b1 1d       	adc	r27, r1
    47b6:	80 93 3d 23 	sts	0x233D, r24	; 0x80233d <packetCount>
    47ba:	90 93 3e 23 	sts	0x233E, r25	; 0x80233e <packetCount+0x1>
    47be:	a0 93 3f 23 	sts	0x233F, r26	; 0x80233f <packetCount+0x2>
    47c2:	b0 93 40 23 	sts	0x2340, r27	; 0x802340 <packetCount+0x3>
    if(DEBUG) printf("%s \n",(const)data);
    47c6:	89 81       	ldd	r24, Y+1	; 0x01
    47c8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ca:	29 2f       	mov	r18, r25
    47cc:	2f 93       	push	r18
    47ce:	8f 93       	push	r24
    47d0:	8e ef       	ldi	r24, 0xFE	; 254
    47d2:	91 e2       	ldi	r25, 0x21	; 33
    47d4:	89 2f       	mov	r24, r25
    47d6:	8f 93       	push	r24
    47d8:	8e ef       	ldi	r24, 0xFE	; 254
    47da:	91 e2       	ldi	r25, 0x21	; 33
    47dc:	8f 93       	push	r24
    47de:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	01 c0       	rjmp	.+2      	; 0x47ee <xbeeWrite+0x80>
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
}

void xbeeWrite(uint8_t* data)
{	
	if(blockTransmission) return NULL;
    47ec:	00 00       	nop
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
	packetCount++;
    if(DEBUG) printf("%s \n",(const)data);
}
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	08 95       	ret

000047f8 <write_telem_to_xbee>:

void write_telem_to_xbee()
{
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	c0 54       	subi	r28, 0x40	; 64
    4802:	d3 40       	sbci	r29, 0x03	; 3
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	de bf       	out	0x3e, r29	; 62
	char* telemetryString [255];
	*telemetryString = "\0";
    4808:	8b e1       	ldi	r24, 0x1B	; 27
    480a:	90 e2       	ldi	r25, 0x20	; 32
    480c:	8b 83       	std	Y+3, r24	; 0x03
    480e:	9c 83       	std	Y+4, r25	; 0x04
	char* s_teamID = "2118";
    4810:	83 e0       	ldi	r24, 0x03	; 3
    4812:	92 e2       	ldi	r25, 0x22	; 34
    4814:	89 83       	std	Y+1, r24	; 0x01
    4816:	9a 83       	std	Y+2, r25	; 0x02
	char* s_roll [10];
	char* s_spinRate [10];
	char* s_flightState [10];
	char* s_cardinalDir [10];
	
	sprintf(s_missionTime, "%i", missionTime);
    4818:	80 91 23 23 	lds	r24, 0x2323	; 0x802323 <missionTime>
    481c:	90 91 24 23 	lds	r25, 0x2324	; 0x802324 <missionTime+0x1>
    4820:	a0 91 25 23 	lds	r26, 0x2325	; 0x802325 <missionTime+0x2>
    4824:	b0 91 26 23 	lds	r27, 0x2326	; 0x802326 <missionTime+0x3>
    4828:	2b 2f       	mov	r18, r27
    482a:	2f 93       	push	r18
    482c:	2a 2f       	mov	r18, r26
    482e:	2f 93       	push	r18
    4830:	29 2f       	mov	r18, r25
    4832:	2f 93       	push	r18
    4834:	8f 93       	push	r24
    4836:	88 e0       	ldi	r24, 0x08	; 8
    4838:	92 e2       	ldi	r25, 0x22	; 34
    483a:	89 2f       	mov	r24, r25
    483c:	8f 93       	push	r24
    483e:	88 e0       	ldi	r24, 0x08	; 8
    4840:	92 e2       	ldi	r25, 0x22	; 34
    4842:	8f 93       	push	r24
    4844:	ce 01       	movw	r24, r28
    4846:	8f 5f       	subi	r24, 0xFF	; 255
    4848:	9d 4f       	sbci	r25, 0xFD	; 253
    484a:	29 2f       	mov	r18, r25
    484c:	2f 93       	push	r18
    484e:	8f 93       	push	r24
    4850:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4854:	8d b7       	in	r24, 0x3d	; 61
    4856:	9e b7       	in	r25, 0x3e	; 62
    4858:	08 96       	adiw	r24, 0x08	; 8
    485a:	cd bf       	out	0x3d, r28	; 61
    485c:	de bf       	out	0x3e, r29	; 62
	sprintf(s_packetCount, "%i", packetCount);
    485e:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <packetCount>
    4862:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <packetCount+0x1>
    4866:	a0 91 3f 23 	lds	r26, 0x233F	; 0x80233f <packetCount+0x2>
    486a:	b0 91 40 23 	lds	r27, 0x2340	; 0x802340 <packetCount+0x3>
    486e:	2b 2f       	mov	r18, r27
    4870:	2f 93       	push	r18
    4872:	2a 2f       	mov	r18, r26
    4874:	2f 93       	push	r18
    4876:	29 2f       	mov	r18, r25
    4878:	2f 93       	push	r18
    487a:	8f 93       	push	r24
    487c:	88 e0       	ldi	r24, 0x08	; 8
    487e:	92 e2       	ldi	r25, 0x22	; 34
    4880:	89 2f       	mov	r24, r25
    4882:	8f 93       	push	r24
    4884:	88 e0       	ldi	r24, 0x08	; 8
    4886:	92 e2       	ldi	r25, 0x22	; 34
    4888:	8f 93       	push	r24
    488a:	ce 01       	movw	r24, r28
    488c:	8b 5e       	subi	r24, 0xEB	; 235
    488e:	9d 4f       	sbci	r25, 0xFD	; 253
    4890:	29 2f       	mov	r18, r25
    4892:	2f 93       	push	r18
    4894:	8f 93       	push	r24
    4896:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    489a:	ed b7       	in	r30, 0x3d	; 61
    489c:	fe b7       	in	r31, 0x3e	; 62
    489e:	38 96       	adiw	r30, 0x08	; 8
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	de bf       	out	0x3e, r29	; 62
	sprintf(s_altitude, "%f", altitude);
    48a4:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <altitude>
    48a8:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <altitude+0x1>
    48ac:	a0 91 43 23 	lds	r26, 0x2343	; 0x802343 <altitude+0x2>
    48b0:	b0 91 44 23 	lds	r27, 0x2344	; 0x802344 <altitude+0x3>
    48b4:	2b 2f       	mov	r18, r27
    48b6:	2f 93       	push	r18
    48b8:	2a 2f       	mov	r18, r26
    48ba:	2f 93       	push	r18
    48bc:	29 2f       	mov	r18, r25
    48be:	2f 93       	push	r18
    48c0:	8f 93       	push	r24
    48c2:	8b e0       	ldi	r24, 0x0B	; 11
    48c4:	92 e2       	ldi	r25, 0x22	; 34
    48c6:	89 2f       	mov	r24, r25
    48c8:	8f 93       	push	r24
    48ca:	8b e0       	ldi	r24, 0x0B	; 11
    48cc:	92 e2       	ldi	r25, 0x22	; 34
    48ce:	8f 93       	push	r24
    48d0:	ce 01       	movw	r24, r28
    48d2:	87 5d       	subi	r24, 0xD7	; 215
    48d4:	9d 4f       	sbci	r25, 0xFD	; 253
    48d6:	29 2f       	mov	r18, r25
    48d8:	2f 93       	push	r18
    48da:	8f 93       	push	r24
    48dc:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    48e0:	8d b7       	in	r24, 0x3d	; 61
    48e2:	9e b7       	in	r25, 0x3e	; 62
    48e4:	08 96       	adiw	r24, 0x08	; 8
    48e6:	cd bf       	out	0x3d, r28	; 61
    48e8:	de bf       	out	0x3e, r29	; 62
	sprintf(s_pressure, "%i",pressure);
    48ea:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <pressure>
    48ee:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <pressure+0x1>
    48f2:	a0 91 2d 23 	lds	r26, 0x232D	; 0x80232d <pressure+0x2>
    48f6:	b0 91 2e 23 	lds	r27, 0x232E	; 0x80232e <pressure+0x3>
    48fa:	2b 2f       	mov	r18, r27
    48fc:	2f 93       	push	r18
    48fe:	2a 2f       	mov	r18, r26
    4900:	2f 93       	push	r18
    4902:	29 2f       	mov	r18, r25
    4904:	2f 93       	push	r18
    4906:	8f 93       	push	r24
    4908:	88 e0       	ldi	r24, 0x08	; 8
    490a:	92 e2       	ldi	r25, 0x22	; 34
    490c:	89 2f       	mov	r24, r25
    490e:	8f 93       	push	r24
    4910:	88 e0       	ldi	r24, 0x08	; 8
    4912:	92 e2       	ldi	r25, 0x22	; 34
    4914:	8f 93       	push	r24
    4916:	ce 01       	movw	r24, r28
    4918:	83 5c       	subi	r24, 0xC3	; 195
    491a:	9d 4f       	sbci	r25, 0xFD	; 253
    491c:	29 2f       	mov	r18, r25
    491e:	2f 93       	push	r18
    4920:	8f 93       	push	r24
    4922:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4926:	ed b7       	in	r30, 0x3d	; 61
    4928:	fe b7       	in	r31, 0x3e	; 62
    492a:	38 96       	adiw	r30, 0x08	; 8
    492c:	cd bf       	out	0x3d, r28	; 61
    492e:	de bf       	out	0x3e, r29	; 62
	sprintf(s_temp, "%f", temp);
    4930:	80 91 1f 23 	lds	r24, 0x231F	; 0x80231f <temp>
    4934:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <temp+0x1>
    4938:	a0 91 21 23 	lds	r26, 0x2321	; 0x802321 <temp+0x2>
    493c:	b0 91 22 23 	lds	r27, 0x2322	; 0x802322 <temp+0x3>
    4940:	2b 2f       	mov	r18, r27
    4942:	2f 93       	push	r18
    4944:	2a 2f       	mov	r18, r26
    4946:	2f 93       	push	r18
    4948:	29 2f       	mov	r18, r25
    494a:	2f 93       	push	r18
    494c:	8f 93       	push	r24
    494e:	8b e0       	ldi	r24, 0x0B	; 11
    4950:	92 e2       	ldi	r25, 0x22	; 34
    4952:	89 2f       	mov	r24, r25
    4954:	8f 93       	push	r24
    4956:	8b e0       	ldi	r24, 0x0B	; 11
    4958:	92 e2       	ldi	r25, 0x22	; 34
    495a:	8f 93       	push	r24
    495c:	ce 01       	movw	r24, r28
    495e:	8f 5a       	subi	r24, 0xAF	; 175
    4960:	9d 4f       	sbci	r25, 0xFD	; 253
    4962:	29 2f       	mov	r18, r25
    4964:	2f 93       	push	r18
    4966:	8f 93       	push	r24
    4968:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    496c:	8d b7       	in	r24, 0x3d	; 61
    496e:	9e b7       	in	r25, 0x3e	; 62
    4970:	08 96       	adiw	r24, 0x08	; 8
    4972:	cd bf       	out	0x3d, r28	; 61
    4974:	de bf       	out	0x3e, r29	; 62
	sprintf(s_voltage, "%f", voltage);
    4976:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <voltage>
    497a:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <voltage+0x1>
    497e:	a0 91 29 23 	lds	r26, 0x2329	; 0x802329 <voltage+0x2>
    4982:	b0 91 2a 23 	lds	r27, 0x232A	; 0x80232a <voltage+0x3>
    4986:	2b 2f       	mov	r18, r27
    4988:	2f 93       	push	r18
    498a:	2a 2f       	mov	r18, r26
    498c:	2f 93       	push	r18
    498e:	29 2f       	mov	r18, r25
    4990:	2f 93       	push	r18
    4992:	8f 93       	push	r24
    4994:	8b e0       	ldi	r24, 0x0B	; 11
    4996:	92 e2       	ldi	r25, 0x22	; 34
    4998:	89 2f       	mov	r24, r25
    499a:	8f 93       	push	r24
    499c:	8b e0       	ldi	r24, 0x0B	; 11
    499e:	92 e2       	ldi	r25, 0x22	; 34
    49a0:	8f 93       	push	r24
    49a2:	ce 01       	movw	r24, r28
    49a4:	8b 59       	subi	r24, 0x9B	; 155
    49a6:	9d 4f       	sbci	r25, 0xFD	; 253
    49a8:	29 2f       	mov	r18, r25
    49aa:	2f 93       	push	r18
    49ac:	8f 93       	push	r24
    49ae:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    49b2:	ed b7       	in	r30, 0x3d	; 61
    49b4:	fe b7       	in	r31, 0x3e	; 62
    49b6:	38 96       	adiw	r30, 0x08	; 8
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	de bf       	out	0x3e, r29	; 62
	sprintf(s_gpsTime, " ");
    49bc:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <usart_config.7021+0x224>
    49c0:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <usart_config.7021+0x225>
    49c4:	ce 01       	movw	r24, r28
    49c6:	87 58       	subi	r24, 0x87	; 135
    49c8:	9d 4f       	sbci	r25, 0xFD	; 253
    49ca:	fc 01       	movw	r30, r24
    49cc:	20 83       	st	Z, r18
    49ce:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLat, " ");
    49d0:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <usart_config.7021+0x224>
    49d4:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <usart_config.7021+0x225>
    49d8:	ce 01       	movw	r24, r28
    49da:	83 57       	subi	r24, 0x73	; 115
    49dc:	9d 4f       	sbci	r25, 0xFD	; 253
    49de:	fc 01       	movw	r30, r24
    49e0:	20 83       	st	Z, r18
    49e2:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLong, " ");
    49e4:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <usart_config.7021+0x224>
    49e8:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <usart_config.7021+0x225>
    49ec:	ce 01       	movw	r24, r28
    49ee:	8f 55       	subi	r24, 0x5F	; 95
    49f0:	9d 4f       	sbci	r25, 0xFD	; 253
    49f2:	fc 01       	movw	r30, r24
    49f4:	20 83       	st	Z, r18
    49f6:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsAlt, " ");
    49f8:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <usart_config.7021+0x224>
    49fc:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <usart_config.7021+0x225>
    4a00:	ce 01       	movw	r24, r28
    4a02:	8b 54       	subi	r24, 0x4B	; 75
    4a04:	9d 4f       	sbci	r25, 0xFD	; 253
    4a06:	fc 01       	movw	r30, r24
    4a08:	20 83       	st	Z, r18
    4a0a:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsSats, " ");
    4a0c:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <usart_config.7021+0x224>
    4a10:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <usart_config.7021+0x225>
    4a14:	ce 01       	movw	r24, r28
    4a16:	87 53       	subi	r24, 0x37	; 55
    4a18:	9d 4f       	sbci	r25, 0xFD	; 253
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	20 83       	st	Z, r18
    4a1e:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_pitch, "%f", pitch);
    4a20:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <pitch>
    4a24:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <pitch+0x1>
    4a28:	a0 91 c0 23 	lds	r26, 0x23C0	; 0x8023c0 <pitch+0x2>
    4a2c:	b0 91 c1 23 	lds	r27, 0x23C1	; 0x8023c1 <pitch+0x3>
    4a30:	2b 2f       	mov	r18, r27
    4a32:	2f 93       	push	r18
    4a34:	2a 2f       	mov	r18, r26
    4a36:	2f 93       	push	r18
    4a38:	29 2f       	mov	r18, r25
    4a3a:	2f 93       	push	r18
    4a3c:	8f 93       	push	r24
    4a3e:	8b e0       	ldi	r24, 0x0B	; 11
    4a40:	92 e2       	ldi	r25, 0x22	; 34
    4a42:	89 2f       	mov	r24, r25
    4a44:	8f 93       	push	r24
    4a46:	8b e0       	ldi	r24, 0x0B	; 11
    4a48:	92 e2       	ldi	r25, 0x22	; 34
    4a4a:	8f 93       	push	r24
    4a4c:	ce 01       	movw	r24, r28
    4a4e:	83 52       	subi	r24, 0x23	; 35
    4a50:	9d 4f       	sbci	r25, 0xFD	; 253
    4a52:	29 2f       	mov	r18, r25
    4a54:	2f 93       	push	r18
    4a56:	8f 93       	push	r24
    4a58:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4a5c:	8d b7       	in	r24, 0x3d	; 61
    4a5e:	9e b7       	in	r25, 0x3e	; 62
    4a60:	08 96       	adiw	r24, 0x08	; 8
    4a62:	cd bf       	out	0x3d, r28	; 61
    4a64:	de bf       	out	0x3e, r29	; 62
	sprintf(s_roll, "%f", roll);
    4a66:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <roll>
    4a6a:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <roll+0x1>
    4a6e:	a0 91 c4 23 	lds	r26, 0x23C4	; 0x8023c4 <roll+0x2>
    4a72:	b0 91 c5 23 	lds	r27, 0x23C5	; 0x8023c5 <roll+0x3>
    4a76:	2b 2f       	mov	r18, r27
    4a78:	2f 93       	push	r18
    4a7a:	2a 2f       	mov	r18, r26
    4a7c:	2f 93       	push	r18
    4a7e:	29 2f       	mov	r18, r25
    4a80:	2f 93       	push	r18
    4a82:	8f 93       	push	r24
    4a84:	8b e0       	ldi	r24, 0x0B	; 11
    4a86:	92 e2       	ldi	r25, 0x22	; 34
    4a88:	89 2f       	mov	r24, r25
    4a8a:	8f 93       	push	r24
    4a8c:	8b e0       	ldi	r24, 0x0B	; 11
    4a8e:	92 e2       	ldi	r25, 0x22	; 34
    4a90:	8f 93       	push	r24
    4a92:	ce 01       	movw	r24, r28
    4a94:	8f 50       	subi	r24, 0x0F	; 15
    4a96:	9d 4f       	sbci	r25, 0xFD	; 253
    4a98:	29 2f       	mov	r18, r25
    4a9a:	2f 93       	push	r18
    4a9c:	8f 93       	push	r24
    4a9e:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4aa2:	ed b7       	in	r30, 0x3d	; 61
    4aa4:	fe b7       	in	r31, 0x3e	; 62
    4aa6:	38 96       	adiw	r30, 0x08	; 8
    4aa8:	cd bf       	out	0x3d, r28	; 61
    4aaa:	de bf       	out	0x3e, r29	; 62
	sprintf(s_spinRate, " ");
    4aac:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <usart_config.7021+0x224>
    4ab0:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <usart_config.7021+0x225>
    4ab4:	ce 01       	movw	r24, r28
    4ab6:	8b 5f       	subi	r24, 0xFB	; 251
    4ab8:	9c 4f       	sbci	r25, 0xFC	; 252
    4aba:	fc 01       	movw	r30, r24
    4abc:	20 83       	st	Z, r18
    4abe:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_flightState, "%i", flightState);
    4ac0:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <flightState>
    4ac4:	88 2f       	mov	r24, r24
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	29 2f       	mov	r18, r25
    4aca:	2f 93       	push	r18
    4acc:	8f 93       	push	r24
    4ace:	88 e0       	ldi	r24, 0x08	; 8
    4ad0:	92 e2       	ldi	r25, 0x22	; 34
    4ad2:	89 2f       	mov	r24, r25
    4ad4:	8f 93       	push	r24
    4ad6:	88 e0       	ldi	r24, 0x08	; 8
    4ad8:	92 e2       	ldi	r25, 0x22	; 34
    4ada:	8f 93       	push	r24
    4adc:	ce 01       	movw	r24, r28
    4ade:	87 5e       	subi	r24, 0xE7	; 231
    4ae0:	9c 4f       	sbci	r25, 0xFC	; 252
    4ae2:	29 2f       	mov	r18, r25
    4ae4:	2f 93       	push	r18
    4ae6:	8f 93       	push	r24
    4ae8:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
	sprintf(s_cardinalDir, "%f", heading);
    4af8:	80 91 ce 25 	lds	r24, 0x25CE	; 0x8025ce <heading>
    4afc:	90 91 cf 25 	lds	r25, 0x25CF	; 0x8025cf <heading+0x1>
    4b00:	a0 91 d0 25 	lds	r26, 0x25D0	; 0x8025d0 <heading+0x2>
    4b04:	b0 91 d1 25 	lds	r27, 0x25D1	; 0x8025d1 <heading+0x3>
    4b08:	2b 2f       	mov	r18, r27
    4b0a:	2f 93       	push	r18
    4b0c:	2a 2f       	mov	r18, r26
    4b0e:	2f 93       	push	r18
    4b10:	29 2f       	mov	r18, r25
    4b12:	2f 93       	push	r18
    4b14:	8f 93       	push	r24
    4b16:	8b e0       	ldi	r24, 0x0B	; 11
    4b18:	92 e2       	ldi	r25, 0x22	; 34
    4b1a:	89 2f       	mov	r24, r25
    4b1c:	8f 93       	push	r24
    4b1e:	8b e0       	ldi	r24, 0x0B	; 11
    4b20:	92 e2       	ldi	r25, 0x22	; 34
    4b22:	8f 93       	push	r24
    4b24:	ce 01       	movw	r24, r28
    4b26:	83 5d       	subi	r24, 0xD3	; 211
    4b28:	9c 4f       	sbci	r25, 0xFC	; 252
    4b2a:	29 2f       	mov	r18, r25
    4b2c:	2f 93       	push	r18
    4b2e:	8f 93       	push	r24
    4b30:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4b34:	8d b7       	in	r24, 0x3d	; 61
    4b36:	9e b7       	in	r25, 0x3e	; 62
    4b38:	08 96       	adiw	r24, 0x08	; 8
    4b3a:	cd bf       	out	0x3d, r28	; 61
    4b3c:	de bf       	out	0x3e, r29	; 62
	
	
	sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n\0",
    4b3e:	ce 01       	movw	r24, r28
    4b40:	83 5d       	subi	r24, 0xD3	; 211
    4b42:	9c 4f       	sbci	r25, 0xFC	; 252
    4b44:	29 2f       	mov	r18, r25
    4b46:	2f 93       	push	r18
    4b48:	8f 93       	push	r24
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	87 5e       	subi	r24, 0xE7	; 231
    4b4e:	9c 4f       	sbci	r25, 0xFC	; 252
    4b50:	29 2f       	mov	r18, r25
    4b52:	2f 93       	push	r18
    4b54:	8f 93       	push	r24
    4b56:	ce 01       	movw	r24, r28
    4b58:	8b 5f       	subi	r24, 0xFB	; 251
    4b5a:	9c 4f       	sbci	r25, 0xFC	; 252
    4b5c:	29 2f       	mov	r18, r25
    4b5e:	2f 93       	push	r18
    4b60:	8f 93       	push	r24
    4b62:	ce 01       	movw	r24, r28
    4b64:	8f 50       	subi	r24, 0x0F	; 15
    4b66:	9d 4f       	sbci	r25, 0xFD	; 253
    4b68:	29 2f       	mov	r18, r25
    4b6a:	2f 93       	push	r18
    4b6c:	8f 93       	push	r24
    4b6e:	ce 01       	movw	r24, r28
    4b70:	83 52       	subi	r24, 0x23	; 35
    4b72:	9d 4f       	sbci	r25, 0xFD	; 253
    4b74:	29 2f       	mov	r18, r25
    4b76:	2f 93       	push	r18
    4b78:	8f 93       	push	r24
    4b7a:	ce 01       	movw	r24, r28
    4b7c:	87 53       	subi	r24, 0x37	; 55
    4b7e:	9d 4f       	sbci	r25, 0xFD	; 253
    4b80:	29 2f       	mov	r18, r25
    4b82:	2f 93       	push	r18
    4b84:	8f 93       	push	r24
    4b86:	ce 01       	movw	r24, r28
    4b88:	8b 54       	subi	r24, 0x4B	; 75
    4b8a:	9d 4f       	sbci	r25, 0xFD	; 253
    4b8c:	29 2f       	mov	r18, r25
    4b8e:	2f 93       	push	r18
    4b90:	8f 93       	push	r24
    4b92:	ce 01       	movw	r24, r28
    4b94:	8f 55       	subi	r24, 0x5F	; 95
    4b96:	9d 4f       	sbci	r25, 0xFD	; 253
    4b98:	29 2f       	mov	r18, r25
    4b9a:	2f 93       	push	r18
    4b9c:	8f 93       	push	r24
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	83 57       	subi	r24, 0x73	; 115
    4ba2:	9d 4f       	sbci	r25, 0xFD	; 253
    4ba4:	29 2f       	mov	r18, r25
    4ba6:	2f 93       	push	r18
    4ba8:	8f 93       	push	r24
    4baa:	ce 01       	movw	r24, r28
    4bac:	87 58       	subi	r24, 0x87	; 135
    4bae:	9d 4f       	sbci	r25, 0xFD	; 253
    4bb0:	29 2f       	mov	r18, r25
    4bb2:	2f 93       	push	r18
    4bb4:	8f 93       	push	r24
    4bb6:	ce 01       	movw	r24, r28
    4bb8:	8b 59       	subi	r24, 0x9B	; 155
    4bba:	9d 4f       	sbci	r25, 0xFD	; 253
    4bbc:	29 2f       	mov	r18, r25
    4bbe:	2f 93       	push	r18
    4bc0:	8f 93       	push	r24
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	8f 5a       	subi	r24, 0xAF	; 175
    4bc6:	9d 4f       	sbci	r25, 0xFD	; 253
    4bc8:	29 2f       	mov	r18, r25
    4bca:	2f 93       	push	r18
    4bcc:	8f 93       	push	r24
    4bce:	ce 01       	movw	r24, r28
    4bd0:	83 5c       	subi	r24, 0xC3	; 195
    4bd2:	9d 4f       	sbci	r25, 0xFD	; 253
    4bd4:	29 2f       	mov	r18, r25
    4bd6:	2f 93       	push	r18
    4bd8:	8f 93       	push	r24
    4bda:	ce 01       	movw	r24, r28
    4bdc:	87 5d       	subi	r24, 0xD7	; 215
    4bde:	9d 4f       	sbci	r25, 0xFD	; 253
    4be0:	29 2f       	mov	r18, r25
    4be2:	2f 93       	push	r18
    4be4:	8f 93       	push	r24
    4be6:	ce 01       	movw	r24, r28
    4be8:	8b 5e       	subi	r24, 0xEB	; 235
    4bea:	9d 4f       	sbci	r25, 0xFD	; 253
    4bec:	29 2f       	mov	r18, r25
    4bee:	2f 93       	push	r18
    4bf0:	8f 93       	push	r24
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	8f 5f       	subi	r24, 0xFF	; 255
    4bf6:	9d 4f       	sbci	r25, 0xFD	; 253
    4bf8:	29 2f       	mov	r18, r25
    4bfa:	2f 93       	push	r18
    4bfc:	8f 93       	push	r24
    4bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4c00:	8f 93       	push	r24
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	8f 93       	push	r24
    4c06:	8d e1       	ldi	r24, 0x1D	; 29
    4c08:	90 e2       	ldi	r25, 0x20	; 32
    4c0a:	89 2f       	mov	r24, r25
    4c0c:	8f 93       	push	r24
    4c0e:	8d e1       	ldi	r24, 0x1D	; 29
    4c10:	90 e2       	ldi	r25, 0x20	; 32
    4c12:	8f 93       	push	r24
    4c14:	ce 01       	movw	r24, r28
    4c16:	03 96       	adiw	r24, 0x03	; 3
    4c18:	29 2f       	mov	r18, r25
    4c1a:	2f 93       	push	r18
    4c1c:	8f 93       	push	r24
    4c1e:	0e 94 92 5d 	call	0xbb24	; 0xbb24 <sprintf>
    4c22:	ed b7       	in	r30, 0x3d	; 61
    4c24:	fe b7       	in	r31, 0x3e	; 62
    4c26:	b6 96       	adiw	r30, 0x26	; 38
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	de bf       	out	0x3e, r29	; 62
	s_roll,
	s_spinRate,
	s_flightState,
	s_cardinalDir);
	
	xbeeWrite(telemetryString);
    4c2c:	ce 01       	movw	r24, r28
    4c2e:	03 96       	adiw	r24, 0x03	; 3
    4c30:	9e dd       	rcall	.-1220   	; 0x476e <xbeeWrite>
}
    4c32:	00 00       	nop
    4c34:	c0 5c       	subi	r28, 0xC0	; 192
    4c36:	dc 4f       	sbci	r29, 0xFC	; 252
    4c38:	cd bf       	out	0x3d, r28	; 61
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	df 91       	pop	r29
    4c3e:	cf 91       	pop	r28
    4c40:	08 95       	ret

00004c42 <__vector_25>:


ISR(READ_INTURUPT)
{
    4c42:	1f 92       	push	r1
    4c44:	0f 92       	push	r0
    4c46:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c4a:	0f 92       	push	r0
    4c4c:	11 24       	eor	r1, r1
    4c4e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c52:	0f 92       	push	r0
    4c54:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c58:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c5c:	0f 92       	push	r0
    4c5e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c62:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c66:	0f 92       	push	r0
    4c68:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c6c:	8f 93       	push	r24
    4c6e:	9f 93       	push	r25
    4c70:	ef 93       	push	r30
    4c72:	ff 93       	push	r31
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    4c7c:	80 ea       	ldi	r24, 0xA0	; 160
    4c7e:	98 e0       	ldi	r25, 0x08	; 8
    4c80:	fc 01       	movw	r30, r24
    4c82:	80 81       	ld	r24, Z
    4c84:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <XbeeRx>
    4c88:	00 00       	nop
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	ff 91       	pop	r31
    4c90:	ef 91       	pop	r30
    4c92:	9f 91       	pop	r25
    4c94:	8f 91       	pop	r24
    4c96:	0f 90       	pop	r0
    4c98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c9c:	0f 90       	pop	r0
    4c9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ca2:	0f 90       	pop	r0
    4ca4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4ca8:	0f 90       	pop	r0
    4caa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4cae:	0f 90       	pop	r0
    4cb0:	1f 90       	pop	r1
    4cb2:	18 95       	reti

00004cb4 <rbu8_write>:
	rbu8_write(buffer, data, i);
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
    4cb4:	cf 93       	push	r28
    4cb6:	df 93       	push	r29
    4cb8:	cd b7       	in	r28, 0x3d	; 61
    4cba:	de b7       	in	r29, 0x3e	; 62
    4cbc:	27 97       	sbiw	r28, 0x07	; 7
    4cbe:	cd bf       	out	0x3d, r28	; 61
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	8a 83       	std	Y+2, r24	; 0x02
    4cc4:	9b 83       	std	Y+3, r25	; 0x03
    4cc6:	6c 83       	std	Y+4, r22	; 0x04
    4cc8:	7d 83       	std	Y+5, r23	; 0x05
    4cca:	4e 83       	std	Y+6, r20	; 0x06
    4ccc:	5f 83       	std	Y+7, r21	; 0x07
	for (uint8_t i = 0; i < length; i++)
    4cce:	19 82       	std	Y+1, r1	; 0x01
    4cd0:	65 c0       	rjmp	.+202    	; 0x4d9c <rbu8_write+0xe8>
	{
		buffer->buffer[buffer->head] = data[i]; // data can be not be access greater length-1
    4cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	26 81       	ldd	r18, Z+6	; 0x06
    4cda:	37 81       	ldd	r19, Z+7	; 0x07
    4cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cde:	9b 81       	ldd	r25, Y+3	; 0x03
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	82 81       	ldd	r24, Z+2	; 0x02
    4ce4:	93 81       	ldd	r25, Z+3	; 0x03
    4ce6:	82 0f       	add	r24, r18
    4ce8:	93 1f       	adc	r25, r19
    4cea:	29 81       	ldd	r18, Y+1	; 0x01
    4cec:	22 2f       	mov	r18, r18
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	4c 81       	ldd	r20, Y+4	; 0x04
    4cf2:	5d 81       	ldd	r21, Y+5	; 0x05
    4cf4:	24 0f       	add	r18, r20
    4cf6:	35 1f       	adc	r19, r21
    4cf8:	f9 01       	movw	r30, r18
    4cfa:	20 81       	ld	r18, Z
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	20 83       	st	Z, r18
		buffer->head++;
    4d00:	8a 81       	ldd	r24, Y+2	; 0x02
    4d02:	9b 81       	ldd	r25, Y+3	; 0x03
    4d04:	fc 01       	movw	r30, r24
    4d06:	82 81       	ldd	r24, Z+2	; 0x02
    4d08:	93 81       	ldd	r25, Z+3	; 0x03
    4d0a:	9c 01       	movw	r18, r24
    4d0c:	2f 5f       	subi	r18, 0xFF	; 255
    4d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d10:	8a 81       	ldd	r24, Y+2	; 0x02
    4d12:	9b 81       	ldd	r25, Y+3	; 0x03
    4d14:	fc 01       	movw	r30, r24
    4d16:	22 83       	std	Z+2, r18	; 0x02
    4d18:	33 83       	std	Z+3, r19	; 0x03
		
		if (buffer->head == buffer->array_length) //Next value to write to is beyond the end of the array
    4d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1e:	fc 01       	movw	r30, r24
    4d20:	22 81       	ldd	r18, Z+2	; 0x02
    4d22:	33 81       	ldd	r19, Z+3	; 0x03
    4d24:	8a 81       	ldd	r24, Y+2	; 0x02
    4d26:	9b 81       	ldd	r25, Y+3	; 0x03
    4d28:	fc 01       	movw	r30, r24
    4d2a:	80 81       	ld	r24, Z
    4d2c:	91 81       	ldd	r25, Z+1	; 0x01
    4d2e:	28 17       	cp	r18, r24
    4d30:	39 07       	cpc	r19, r25
    4d32:	29 f4       	brne	.+10     	; 0x4d3e <rbu8_write+0x8a>
		{
			buffer->head = 0;
    4d34:	8a 81       	ldd	r24, Y+2	; 0x02
    4d36:	9b 81       	ldd	r25, Y+3	; 0x03
    4d38:	fc 01       	movw	r30, r24
    4d3a:	12 82       	std	Z+2, r1	; 0x02
    4d3c:	13 82       	std	Z+3, r1	; 0x03
		} // end if
		
		if (buffer->head == buffer->tail)
    4d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d40:	9b 81       	ldd	r25, Y+3	; 0x03
    4d42:	fc 01       	movw	r30, r24
    4d44:	22 81       	ldd	r18, Z+2	; 0x02
    4d46:	33 81       	ldd	r19, Z+3	; 0x03
    4d48:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	84 81       	ldd	r24, Z+4	; 0x04
    4d50:	95 81       	ldd	r25, Z+5	; 0x05
    4d52:	28 17       	cp	r18, r24
    4d54:	39 07       	cpc	r19, r25
    4d56:	f9 f4       	brne	.+62     	; 0x4d96 <rbu8_write+0xe2>
		{
			buffer->tail++;
    4d58:	8a 81       	ldd	r24, Y+2	; 0x02
    4d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	84 81       	ldd	r24, Z+4	; 0x04
    4d60:	95 81       	ldd	r25, Z+5	; 0x05
    4d62:	9c 01       	movw	r18, r24
    4d64:	2f 5f       	subi	r18, 0xFF	; 255
    4d66:	3f 4f       	sbci	r19, 0xFF	; 255
    4d68:	8a 81       	ldd	r24, Y+2	; 0x02
    4d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	24 83       	std	Z+4, r18	; 0x04
    4d70:	35 83       	std	Z+5, r19	; 0x05
			
			if (buffer->tail == buffer->array_length){
    4d72:	8a 81       	ldd	r24, Y+2	; 0x02
    4d74:	9b 81       	ldd	r25, Y+3	; 0x03
    4d76:	fc 01       	movw	r30, r24
    4d78:	24 81       	ldd	r18, Z+4	; 0x04
    4d7a:	35 81       	ldd	r19, Z+5	; 0x05
    4d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d80:	fc 01       	movw	r30, r24
    4d82:	80 81       	ld	r24, Z
    4d84:	91 81       	ldd	r25, Z+1	; 0x01
    4d86:	28 17       	cp	r18, r24
    4d88:	39 07       	cpc	r19, r25
    4d8a:	29 f4       	brne	.+10     	; 0x4d96 <rbu8_write+0xe2>
				buffer->tail = 0;
    4d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d90:	fc 01       	movw	r30, r24
    4d92:	14 82       	std	Z+4, r1	; 0x04
    4d94:	15 82       	std	Z+5, r1	; 0x05
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
	for (uint8_t i = 0; i < length; i++)
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	8f 5f       	subi	r24, 0xFF	; 255
    4d9a:	89 83       	std	Y+1, r24	; 0x01
    4d9c:	89 81       	ldd	r24, Y+1	; 0x01
    4d9e:	28 2f       	mov	r18, r24
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	8e 81       	ldd	r24, Y+6	; 0x06
    4da4:	9f 81       	ldd	r25, Y+7	; 0x07
    4da6:	28 17       	cp	r18, r24
    4da8:	39 07       	cpc	r19, r25
    4daa:	08 f4       	brcc	.+2      	; 0x4dae <rbu8_write+0xfa>
    4dac:	92 cf       	rjmp	.-220    	; 0x4cd2 <rbu8_write+0x1e>
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
			}// end if
		} // end if
	} // end for
} // end write_to_ring_buffer
    4dae:	00 00       	nop
    4db0:	27 96       	adiw	r28, 0x07	; 7
    4db2:	cd bf       	out	0x3d, r28	; 61
    4db4:	de bf       	out	0x3e, r29	; 62
    4db6:	df 91       	pop	r29
    4db8:	cf 91       	pop	r28
    4dba:	08 95       	ret

00004dbc <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
    4dc0:	00 d0       	rcall	.+0      	; 0x4dc2 <rbu8_init+0x6>
    4dc2:	00 d0       	rcall	.+0      	; 0x4dc4 <rbu8_init+0x8>
    4dc4:	cd b7       	in	r28, 0x3d	; 61
    4dc6:	de b7       	in	r29, 0x3e	; 62
    4dc8:	89 83       	std	Y+1, r24	; 0x01
    4dca:	9a 83       	std	Y+2, r25	; 0x02
    4dcc:	6b 83       	std	Y+3, r22	; 0x03
    4dce:	7c 83       	std	Y+4, r23	; 0x04
    4dd0:	4d 83       	std	Y+5, r20	; 0x05
    4dd2:	5e 83       	std	Y+6, r21	; 0x06
	buffer->head = 0; //Beginning of array
    4dd4:	89 81       	ldd	r24, Y+1	; 0x01
    4dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd8:	fc 01       	movw	r30, r24
    4dda:	12 82       	std	Z+2, r1	; 0x02
    4ddc:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    4dde:	89 81       	ldd	r24, Y+1	; 0x01
    4de0:	9a 81       	ldd	r25, Y+2	; 0x02
    4de2:	fc 01       	movw	r30, r24
    4de4:	14 82       	std	Z+4, r1	; 0x04
    4de6:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    4de8:	89 81       	ldd	r24, Y+1	; 0x01
    4dea:	9a 81       	ldd	r25, Y+2	; 0x02
    4dec:	2b 81       	ldd	r18, Y+3	; 0x03
    4dee:	3c 81       	ldd	r19, Y+4	; 0x04
    4df0:	fc 01       	movw	r30, r24
    4df2:	26 83       	std	Z+6, r18	; 0x06
    4df4:	37 83       	std	Z+7, r19	; 0x07
	buffer->array_length = backing_array_length;
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfa:	2d 81       	ldd	r18, Y+5	; 0x05
    4dfc:	3e 81       	ldd	r19, Y+6	; 0x06
    4dfe:	fc 01       	movw	r30, r24
    4e00:	20 83       	st	Z, r18
    4e02:	31 83       	std	Z+1, r19	; 0x01
}
    4e04:	00 00       	nop
    4e06:	26 96       	adiw	r28, 0x06	; 6
    4e08:	cd bf       	out	0x3d, r28	; 61
    4e0a:	de bf       	out	0x3e, r29	; 62
    4e0c:	df 91       	pop	r29
    4e0e:	cf 91       	pop	r28
    4e10:	08 95       	ret

00004e12 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    4e12:	cf 93       	push	r28
    4e14:	df 93       	push	r29
    4e16:	cd b7       	in	r28, 0x3d	; 61
    4e18:	de b7       	in	r29, 0x3e	; 62
    4e1a:	2a 97       	sbiw	r28, 0x0a	; 10
    4e1c:	cd bf       	out	0x3d, r28	; 61
    4e1e:	de bf       	out	0x3e, r29	; 62
    4e20:	8d 83       	std	Y+5, r24	; 0x05
    4e22:	9e 83       	std	Y+6, r25	; 0x06
    4e24:	6f 83       	std	Y+7, r22	; 0x07
    4e26:	78 87       	std	Y+8, r23	; 0x08
    4e28:	49 87       	std	Y+9, r20	; 0x09
    4e2a:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t index = buffer->tail;
    4e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e30:	fc 01       	movw	r30, r24
    4e32:	84 81       	ldd	r24, Z+4	; 0x04
    4e34:	95 81       	ldd	r25, Z+5	; 0x05
    4e36:	89 83       	std	Y+1, r24	; 0x01
    4e38:	9a 83       	std	Y+2, r25	; 0x02
	uint16_t i = 0;
    4e3a:	1b 82       	std	Y+3, r1	; 0x03
    4e3c:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    4e3e:	1b 82       	std	Y+3, r1	; 0x03
    4e40:	1c 82       	std	Y+4, r1	; 0x04
    4e42:	2d c0       	rjmp	.+90     	; 0x4e9e <rbu8_read+0x8c>
	{

		dest[i] = buffer->buffer[index];
    4e44:	2f 81       	ldd	r18, Y+7	; 0x07
    4e46:	38 85       	ldd	r19, Y+8	; 0x08
    4e48:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e4c:	82 0f       	add	r24, r18
    4e4e:	93 1f       	adc	r25, r19
    4e50:	2d 81       	ldd	r18, Y+5	; 0x05
    4e52:	3e 81       	ldd	r19, Y+6	; 0x06
    4e54:	f9 01       	movw	r30, r18
    4e56:	46 81       	ldd	r20, Z+6	; 0x06
    4e58:	57 81       	ldd	r21, Z+7	; 0x07
    4e5a:	29 81       	ldd	r18, Y+1	; 0x01
    4e5c:	3a 81       	ldd	r19, Y+2	; 0x02
    4e5e:	24 0f       	add	r18, r20
    4e60:	35 1f       	adc	r19, r21
    4e62:	f9 01       	movw	r30, r18
    4e64:	20 81       	ld	r18, Z
    4e66:	fc 01       	movw	r30, r24
    4e68:	20 83       	st	Z, r18
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    4e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6e:	fc 01       	movw	r30, r24
    4e70:	80 81       	ld	r24, Z
    4e72:	91 81       	ldd	r25, Z+1	; 0x01
    4e74:	9c 01       	movw	r18, r24
    4e76:	21 50       	subi	r18, 0x01	; 1
    4e78:	31 09       	sbc	r19, r1
    4e7a:	89 81       	ldd	r24, Y+1	; 0x01
    4e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7e:	28 17       	cp	r18, r24
    4e80:	39 07       	cpc	r19, r25
    4e82:	19 f4       	brne	.+6      	; 0x4e8a <rbu8_read+0x78>
		{
			index = 0;
    4e84:	19 82       	std	Y+1, r1	; 0x01
    4e86:	1a 82       	std	Y+2, r1	; 0x02
    4e88:	05 c0       	rjmp	.+10     	; 0x4e94 <rbu8_read+0x82>
		}
		else
		{
			index++;
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8e:	01 96       	adiw	r24, 0x01	; 1
    4e90:	89 83       	std	Y+1, r24	; 0x01
    4e92:	9a 83       	std	Y+2, r25	; 0x02
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    4e94:	8b 81       	ldd	r24, Y+3	; 0x03
    4e96:	9c 81       	ldd	r25, Y+4	; 0x04
    4e98:	01 96       	adiw	r24, 0x01	; 1
    4e9a:	8b 83       	std	Y+3, r24	; 0x03
    4e9c:	9c 83       	std	Y+4, r25	; 0x04
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	8c d0       	rcall	.+280    	; 0x4fbc <rbu8_length>
    4ea4:	9c 01       	movw	r18, r24
    4ea6:	89 85       	ldd	r24, Y+9	; 0x09
    4ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eaa:	28 17       	cp	r18, r24
    4eac:	39 07       	cpc	r19, r25
    4eae:	20 f4       	brcc	.+8      	; 0x4eb8 <rbu8_read+0xa6>
    4eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb4:	83 d0       	rcall	.+262    	; 0x4fbc <rbu8_length>
    4eb6:	02 c0       	rjmp	.+4      	; 0x4ebc <rbu8_read+0xaa>
    4eb8:	89 85       	ldd	r24, Y+9	; 0x09
    4eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    4ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    4ec0:	28 17       	cp	r18, r24
    4ec2:	39 07       	cpc	r19, r25
    4ec4:	08 f4       	brcc	.+2      	; 0x4ec8 <rbu8_read+0xb6>
    4ec6:	be cf       	rjmp	.-132    	; 0x4e44 <rbu8_read+0x32>
		{
			index++;
		}
		
	}
	if (length > rbu8_length(buffer))
    4ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ecc:	77 d0       	rcall	.+238    	; 0x4fbc <rbu8_length>
    4ece:	9c 01       	movw	r18, r24
    4ed0:	89 85       	ldd	r24, Y+9	; 0x09
    4ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ed4:	28 17       	cp	r18, r24
    4ed6:	39 07       	cpc	r19, r25
    4ed8:	10 f4       	brcc	.+4      	; 0x4ede <rbu8_read+0xcc>
		return 1;
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	01 c0       	rjmp	.+2      	; 0x4ee0 <rbu8_read+0xce>
	else
		return 0;
    4ede:	80 e0       	ldi	r24, 0x00	; 0
}
    4ee0:	2a 96       	adiw	r28, 0x0a	; 10
    4ee2:	cd bf       	out	0x3d, r28	; 61
    4ee4:	de bf       	out	0x3e, r29	; 62
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	08 95       	ret

00004eec <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    4eec:	cf 93       	push	r28
    4eee:	df 93       	push	r29
    4ef0:	00 d0       	rcall	.+0      	; 0x4ef2 <rbu8_delete_oldest+0x6>
    4ef2:	00 d0       	rcall	.+0      	; 0x4ef4 <rbu8_delete_oldest+0x8>
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	8b 83       	std	Y+3, r24	; 0x03
    4efa:	9c 83       	std	Y+4, r25	; 0x04
    4efc:	6d 83       	std	Y+5, r22	; 0x05
    4efe:	7e 83       	std	Y+6, r23	; 0x06
	uint16_t move_distance = min(length, rbu8_length(buffer));
    4f00:	8b 81       	ldd	r24, Y+3	; 0x03
    4f02:	9c 81       	ldd	r25, Y+4	; 0x04
    4f04:	5b d0       	rcall	.+182    	; 0x4fbc <rbu8_length>
    4f06:	9c 01       	movw	r18, r24
    4f08:	8d 81       	ldd	r24, Y+5	; 0x05
    4f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0c:	82 17       	cp	r24, r18
    4f0e:	93 07       	cpc	r25, r19
    4f10:	20 f0       	brcs	.+8      	; 0x4f1a <rbu8_delete_oldest+0x2e>
    4f12:	8b 81       	ldd	r24, Y+3	; 0x03
    4f14:	9c 81       	ldd	r25, Y+4	; 0x04
    4f16:	52 d0       	rcall	.+164    	; 0x4fbc <rbu8_length>
    4f18:	02 c0       	rjmp	.+4      	; 0x4f1e <rbu8_delete_oldest+0x32>
    4f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    4f20:	9a 83       	std	Y+2, r25	; 0x02
	if (move_distance >= rbu8_length(buffer))
    4f22:	8b 81       	ldd	r24, Y+3	; 0x03
    4f24:	9c 81       	ldd	r25, Y+4	; 0x04
    4f26:	4a d0       	rcall	.+148    	; 0x4fbc <rbu8_length>
    4f28:	9c 01       	movw	r18, r24
    4f2a:	89 81       	ldd	r24, Y+1	; 0x01
    4f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f2e:	82 17       	cp	r24, r18
    4f30:	93 07       	cpc	r25, r19
    4f32:	20 f1       	brcs	.+72     	; 0x4f7c <rbu8_delete_oldest+0x90>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    4f34:	8b 81       	ldd	r24, Y+3	; 0x03
    4f36:	9c 81       	ldd	r25, Y+4	; 0x04
    4f38:	fc 01       	movw	r30, r24
    4f3a:	24 81       	ldd	r18, Z+4	; 0x04
    4f3c:	35 81       	ldd	r19, Z+5	; 0x05
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	9a 81       	ldd	r25, Y+2	; 0x02
    4f42:	a9 01       	movw	r20, r18
    4f44:	48 0f       	add	r20, r24
    4f46:	59 1f       	adc	r21, r25
    4f48:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4c:	fc 01       	movw	r30, r24
    4f4e:	20 81       	ld	r18, Z
    4f50:	31 81       	ldd	r19, Z+1	; 0x01
    4f52:	ca 01       	movw	r24, r20
    4f54:	b9 01       	movw	r22, r18
    4f56:	0e 94 63 59 	call	0xb2c6	; 0xb2c6 <__udivmodhi4>
    4f5a:	9c 01       	movw	r18, r24
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f60:	fc 01       	movw	r30, r24
    4f62:	24 83       	std	Z+4, r18	; 0x04
    4f64:	35 83       	std	Z+5, r19	; 0x05
		buffer->head = buffer->tail;
    4f66:	8b 81       	ldd	r24, Y+3	; 0x03
    4f68:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	24 81       	ldd	r18, Z+4	; 0x04
    4f6e:	35 81       	ldd	r19, Z+5	; 0x05
    4f70:	8b 81       	ldd	r24, Y+3	; 0x03
    4f72:	9c 81       	ldd	r25, Y+4	; 0x04
    4f74:	fc 01       	movw	r30, r24
    4f76:	22 83       	std	Z+2, r18	; 0x02
    4f78:	33 83       	std	Z+3, r19	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    4f7a:	19 c0       	rjmp	.+50     	; 0x4fae <rbu8_delete_oldest+0xc2>
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
		buffer->head = buffer->tail;
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    4f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f80:	fc 01       	movw	r30, r24
    4f82:	24 81       	ldd	r18, Z+4	; 0x04
    4f84:	35 81       	ldd	r19, Z+5	; 0x05
    4f86:	89 81       	ldd	r24, Y+1	; 0x01
    4f88:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8a:	a9 01       	movw	r20, r18
    4f8c:	48 0f       	add	r20, r24
    4f8e:	59 1f       	adc	r21, r25
    4f90:	8b 81       	ldd	r24, Y+3	; 0x03
    4f92:	9c 81       	ldd	r25, Y+4	; 0x04
    4f94:	fc 01       	movw	r30, r24
    4f96:	20 81       	ld	r18, Z
    4f98:	31 81       	ldd	r19, Z+1	; 0x01
    4f9a:	ca 01       	movw	r24, r20
    4f9c:	b9 01       	movw	r22, r18
    4f9e:	0e 94 63 59 	call	0xb2c6	; 0xb2c6 <__udivmodhi4>
    4fa2:	9c 01       	movw	r18, r24
    4fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa8:	fc 01       	movw	r30, r24
    4faa:	24 83       	std	Z+4, r18	; 0x04
    4fac:	35 83       	std	Z+5, r19	; 0x05
	}
}
    4fae:	00 00       	nop
    4fb0:	26 96       	adiw	r28, 0x06	; 6
    4fb2:	cd bf       	out	0x3d, r28	; 61
    4fb4:	de bf       	out	0x3e, r29	; 62
    4fb6:	df 91       	pop	r29
    4fb8:	cf 91       	pop	r28
    4fba:	08 95       	ret

00004fbc <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    4fbc:	cf 93       	push	r28
    4fbe:	df 93       	push	r29
    4fc0:	1f 92       	push	r1
    4fc2:	1f 92       	push	r1
    4fc4:	cd b7       	in	r28, 0x3d	; 61
    4fc6:	de b7       	in	r29, 0x3e	; 62
    4fc8:	89 83       	std	Y+1, r24	; 0x01
    4fca:	9a 83       	std	Y+2, r25	; 0x02
	if (buffer->head >= buffer->tail)
    4fcc:	89 81       	ldd	r24, Y+1	; 0x01
    4fce:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	22 81       	ldd	r18, Z+2	; 0x02
    4fd4:	33 81       	ldd	r19, Z+3	; 0x03
    4fd6:	89 81       	ldd	r24, Y+1	; 0x01
    4fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fda:	fc 01       	movw	r30, r24
    4fdc:	84 81       	ldd	r24, Z+4	; 0x04
    4fde:	95 81       	ldd	r25, Z+5	; 0x05
    4fe0:	28 17       	cp	r18, r24
    4fe2:	39 07       	cpc	r19, r25
    4fe4:	78 f0       	brcs	.+30     	; 0x5004 <rbu8_length+0x48>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    4fe6:	89 81       	ldd	r24, Y+1	; 0x01
    4fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fea:	fc 01       	movw	r30, r24
    4fec:	22 81       	ldd	r18, Z+2	; 0x02
    4fee:	33 81       	ldd	r19, Z+3	; 0x03
    4ff0:	89 81       	ldd	r24, Y+1	; 0x01
    4ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	84 81       	ldd	r24, Z+4	; 0x04
    4ff8:	95 81       	ldd	r25, Z+5	; 0x05
    4ffa:	a9 01       	movw	r20, r18
    4ffc:	48 1b       	sub	r20, r24
    4ffe:	59 0b       	sbc	r21, r25
    5000:	ca 01       	movw	r24, r20
    5002:	15 c0       	rjmp	.+42     	; 0x502e <rbu8_length+0x72>
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	9a 81       	ldd	r25, Y+2	; 0x02
    5008:	fc 01       	movw	r30, r24
    500a:	20 81       	ld	r18, Z
    500c:	31 81       	ldd	r19, Z+1	; 0x01
    500e:	89 81       	ldd	r24, Y+1	; 0x01
    5010:	9a 81       	ldd	r25, Y+2	; 0x02
    5012:	fc 01       	movw	r30, r24
    5014:	42 81       	ldd	r20, Z+2	; 0x02
    5016:	53 81       	ldd	r21, Z+3	; 0x03
    5018:	89 81       	ldd	r24, Y+1	; 0x01
    501a:	9a 81       	ldd	r25, Y+2	; 0x02
    501c:	fc 01       	movw	r30, r24
    501e:	84 81       	ldd	r24, Z+4	; 0x04
    5020:	95 81       	ldd	r25, Z+5	; 0x05
    5022:	ba 01       	movw	r22, r20
    5024:	68 1b       	sub	r22, r24
    5026:	79 0b       	sbc	r23, r25
    5028:	cb 01       	movw	r24, r22
    502a:	82 0f       	add	r24, r18
    502c:	93 1f       	adc	r25, r19
	}
}
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	df 91       	pop	r29
    5034:	cf 91       	pop	r28
    5036:	08 95       	ret

00005038 <sysclk_enable_peripheral_clock>:
		{
			return i;
		}
	}
	return i+1;
}
    5038:	cf 93       	push	r28
    503a:	df 93       	push	r29
    503c:	1f 92       	push	r1
    503e:	1f 92       	push	r1
    5040:	cd b7       	in	r28, 0x3d	; 61
    5042:	de b7       	in	r29, 0x3e	; 62
    5044:	89 83       	std	Y+1, r24	; 0x01
    5046:	9a 83       	std	Y+2, r25	; 0x02
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	9a 81       	ldd	r25, Y+2	; 0x02
    504c:	89 2b       	or	r24, r25
    504e:	09 f4       	brne	.+2      	; 0x5052 <sysclk_enable_peripheral_clock+0x1a>
    5050:	67 c1       	rjmp	.+718    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	9a 81       	ldd	r25, Y+2	; 0x02
    5056:	80 3c       	cpi	r24, 0xC0	; 192
    5058:	91 05       	cpc	r25, r1
    505a:	29 f4       	brne	.+10     	; 0x5066 <sysclk_enable_peripheral_clock+0x2e>
    505c:	60 e1       	ldi	r22, 0x10	; 16
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    5064:	5d c1       	rjmp	.+698    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	9a 81       	ldd	r25, Y+2	; 0x02
    506a:	80 34       	cpi	r24, 0x40	; 64
    506c:	94 40       	sbci	r25, 0x04	; 4
    506e:	29 f4       	brne	.+10     	; 0x507a <sysclk_enable_peripheral_clock+0x42>
    5070:	68 e0       	ldi	r22, 0x08	; 8
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    5078:	53 c1       	rjmp	.+678    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	9a 81       	ldd	r25, Y+2	; 0x02
    507e:	81 15       	cp	r24, r1
    5080:	94 40       	sbci	r25, 0x04	; 4
    5082:	29 f4       	brne	.+10     	; 0x508e <sysclk_enable_peripheral_clock+0x56>
    5084:	64 e0       	ldi	r22, 0x04	; 4
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    508c:	49 c1       	rjmp	.+658    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	9a 81       	ldd	r25, Y+2	; 0x02
    5092:	80 38       	cpi	r24, 0x80	; 128
    5094:	91 40       	sbci	r25, 0x01	; 1
    5096:	29 f4       	brne	.+10     	; 0x50a2 <sysclk_enable_peripheral_clock+0x6a>
    5098:	62 e0       	ldi	r22, 0x02	; 2
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    50a0:	3f c1       	rjmp	.+638    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	9a 81       	ldd	r25, Y+2	; 0x02
    50a6:	81 15       	cp	r24, r1
    50a8:	91 40       	sbci	r25, 0x01	; 1
    50aa:	29 f4       	brne	.+10     	; 0x50b6 <sysclk_enable_peripheral_clock+0x7e>
    50ac:	61 e0       	ldi	r22, 0x01	; 1
    50ae:	80 e0       	ldi	r24, 0x00	; 0
    50b0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    50b4:	35 c1       	rjmp	.+618    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    50b6:	89 81       	ldd	r24, Y+1	; 0x01
    50b8:	9a 81       	ldd	r25, Y+2	; 0x02
    50ba:	80 38       	cpi	r24, 0x80	; 128
    50bc:	93 40       	sbci	r25, 0x03	; 3
    50be:	29 f4       	brne	.+10     	; 0x50ca <sysclk_enable_peripheral_clock+0x92>
    50c0:	61 e0       	ldi	r22, 0x01	; 1
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    50c8:	2b c1       	rjmp	.+598    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    50ca:	89 81       	ldd	r24, Y+1	; 0x01
    50cc:	9a 81       	ldd	r25, Y+2	; 0x02
    50ce:	80 39       	cpi	r24, 0x90	; 144
    50d0:	93 40       	sbci	r25, 0x03	; 3
    50d2:	29 f4       	brne	.+10     	; 0x50de <sysclk_enable_peripheral_clock+0xa6>
    50d4:	61 e0       	ldi	r22, 0x01	; 1
    50d6:	82 e0       	ldi	r24, 0x02	; 2
    50d8:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    50dc:	21 c1       	rjmp	.+578    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	9a 81       	ldd	r25, Y+2	; 0x02
    50e2:	81 15       	cp	r24, r1
    50e4:	92 40       	sbci	r25, 0x02	; 2
    50e6:	29 f4       	brne	.+10     	; 0x50f2 <sysclk_enable_peripheral_clock+0xba>
    50e8:	62 e0       	ldi	r22, 0x02	; 2
    50ea:	81 e0       	ldi	r24, 0x01	; 1
    50ec:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    50f0:	17 c1       	rjmp	.+558    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    50f2:	89 81       	ldd	r24, Y+1	; 0x01
    50f4:	9a 81       	ldd	r25, Y+2	; 0x02
    50f6:	80 34       	cpi	r24, 0x40	; 64
    50f8:	92 40       	sbci	r25, 0x02	; 2
    50fa:	29 f4       	brne	.+10     	; 0x5106 <sysclk_enable_peripheral_clock+0xce>
    50fc:	62 e0       	ldi	r22, 0x02	; 2
    50fe:	82 e0       	ldi	r24, 0x02	; 2
    5100:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    5104:	0d c1       	rjmp	.+538    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5106:	89 81       	ldd	r24, Y+1	; 0x01
    5108:	9a 81       	ldd	r25, Y+2	; 0x02
    510a:	81 15       	cp	r24, r1
    510c:	93 40       	sbci	r25, 0x03	; 3
    510e:	21 f4       	brne	.+8      	; 0x5118 <sysclk_enable_peripheral_clock+0xe0>
    5110:	64 e0       	ldi	r22, 0x04	; 4
    5112:	81 e0       	ldi	r24, 0x01	; 1
    5114:	fc d7       	rcall	.+4088   	; 0x610e <sysclk_enable_module>
    5116:	04 c1       	rjmp	.+520    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	9a 81       	ldd	r25, Y+2	; 0x02
    511c:	80 32       	cpi	r24, 0x20	; 32
    511e:	93 40       	sbci	r25, 0x03	; 3
    5120:	21 f4       	brne	.+8      	; 0x512a <sysclk_enable_peripheral_clock+0xf2>
    5122:	64 e0       	ldi	r22, 0x04	; 4
    5124:	82 e0       	ldi	r24, 0x02	; 2
    5126:	f3 d7       	rcall	.+4070   	; 0x610e <sysclk_enable_module>
    5128:	fb c0       	rjmp	.+502    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    512a:	89 81       	ldd	r24, Y+1	; 0x01
    512c:	9a 81       	ldd	r25, Y+2	; 0x02
    512e:	81 15       	cp	r24, r1
    5130:	98 40       	sbci	r25, 0x08	; 8
    5132:	21 f4       	brne	.+8      	; 0x513c <sysclk_enable_peripheral_clock+0x104>
    5134:	61 e0       	ldi	r22, 0x01	; 1
    5136:	83 e0       	ldi	r24, 0x03	; 3
    5138:	ea d7       	rcall	.+4052   	; 0x610e <sysclk_enable_module>
    513a:	f2 c0       	rjmp	.+484    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    513c:	89 81       	ldd	r24, Y+1	; 0x01
    513e:	9a 81       	ldd	r25, Y+2	; 0x02
    5140:	81 15       	cp	r24, r1
    5142:	99 40       	sbci	r25, 0x09	; 9
    5144:	21 f4       	brne	.+8      	; 0x514e <sysclk_enable_peripheral_clock+0x116>
    5146:	61 e0       	ldi	r22, 0x01	; 1
    5148:	84 e0       	ldi	r24, 0x04	; 4
    514a:	e1 d7       	rcall	.+4034   	; 0x610e <sysclk_enable_module>
    514c:	e9 c0       	rjmp	.+466    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    514e:	89 81       	ldd	r24, Y+1	; 0x01
    5150:	9a 81       	ldd	r25, Y+2	; 0x02
    5152:	81 15       	cp	r24, r1
    5154:	9a 40       	sbci	r25, 0x0A	; 10
    5156:	21 f4       	brne	.+8      	; 0x5160 <sysclk_enable_peripheral_clock+0x128>
    5158:	61 e0       	ldi	r22, 0x01	; 1
    515a:	85 e0       	ldi	r24, 0x05	; 5
    515c:	d8 d7       	rcall	.+4016   	; 0x610e <sysclk_enable_module>
    515e:	e0 c0       	rjmp	.+448    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5160:	89 81       	ldd	r24, Y+1	; 0x01
    5162:	9a 81       	ldd	r25, Y+2	; 0x02
    5164:	81 15       	cp	r24, r1
    5166:	9b 40       	sbci	r25, 0x0B	; 11
    5168:	21 f4       	brne	.+8      	; 0x5172 <sysclk_enable_peripheral_clock+0x13a>
    516a:	61 e0       	ldi	r22, 0x01	; 1
    516c:	86 e0       	ldi	r24, 0x06	; 6
    516e:	cf d7       	rcall	.+3998   	; 0x610e <sysclk_enable_module>
    5170:	d7 c0       	rjmp	.+430    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5172:	89 81       	ldd	r24, Y+1	; 0x01
    5174:	9a 81       	ldd	r25, Y+2	; 0x02
    5176:	80 34       	cpi	r24, 0x40	; 64
    5178:	98 40       	sbci	r25, 0x08	; 8
    517a:	21 f4       	brne	.+8      	; 0x5184 <sysclk_enable_peripheral_clock+0x14c>
    517c:	62 e0       	ldi	r22, 0x02	; 2
    517e:	83 e0       	ldi	r24, 0x03	; 3
    5180:	c6 d7       	rcall	.+3980   	; 0x610e <sysclk_enable_module>
    5182:	ce c0       	rjmp	.+412    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	9a 81       	ldd	r25, Y+2	; 0x02
    5188:	80 34       	cpi	r24, 0x40	; 64
    518a:	99 40       	sbci	r25, 0x09	; 9
    518c:	21 f4       	brne	.+8      	; 0x5196 <sysclk_enable_peripheral_clock+0x15e>
    518e:	62 e0       	ldi	r22, 0x02	; 2
    5190:	84 e0       	ldi	r24, 0x04	; 4
    5192:	bd d7       	rcall	.+3962   	; 0x610e <sysclk_enable_module>
    5194:	c5 c0       	rjmp	.+394    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	9a 81       	ldd	r25, Y+2	; 0x02
    519a:	80 34       	cpi	r24, 0x40	; 64
    519c:	9a 40       	sbci	r25, 0x0A	; 10
    519e:	21 f4       	brne	.+8      	; 0x51a8 <sysclk_enable_peripheral_clock+0x170>
    51a0:	62 e0       	ldi	r22, 0x02	; 2
    51a2:	85 e0       	ldi	r24, 0x05	; 5
    51a4:	b4 d7       	rcall	.+3944   	; 0x610e <sysclk_enable_module>
    51a6:	bc c0       	rjmp	.+376    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    51a8:	89 81       	ldd	r24, Y+1	; 0x01
    51aa:	9a 81       	ldd	r25, Y+2	; 0x02
    51ac:	80 34       	cpi	r24, 0x40	; 64
    51ae:	9b 40       	sbci	r25, 0x0B	; 11
    51b0:	21 f4       	brne	.+8      	; 0x51ba <sysclk_enable_peripheral_clock+0x182>
    51b2:	62 e0       	ldi	r22, 0x02	; 2
    51b4:	86 e0       	ldi	r24, 0x06	; 6
    51b6:	ab d7       	rcall	.+3926   	; 0x610e <sysclk_enable_module>
    51b8:	b3 c0       	rjmp	.+358    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	9a 81       	ldd	r25, Y+2	; 0x02
    51be:	80 39       	cpi	r24, 0x90	; 144
    51c0:	98 40       	sbci	r25, 0x08	; 8
    51c2:	21 f4       	brne	.+8      	; 0x51cc <sysclk_enable_peripheral_clock+0x194>
    51c4:	64 e0       	ldi	r22, 0x04	; 4
    51c6:	83 e0       	ldi	r24, 0x03	; 3
    51c8:	a2 d7       	rcall	.+3908   	; 0x610e <sysclk_enable_module>
    51ca:	aa c0       	rjmp	.+340    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    51cc:	89 81       	ldd	r24, Y+1	; 0x01
    51ce:	9a 81       	ldd	r25, Y+2	; 0x02
    51d0:	80 39       	cpi	r24, 0x90	; 144
    51d2:	99 40       	sbci	r25, 0x09	; 9
    51d4:	21 f4       	brne	.+8      	; 0x51de <sysclk_enable_peripheral_clock+0x1a6>
    51d6:	64 e0       	ldi	r22, 0x04	; 4
    51d8:	84 e0       	ldi	r24, 0x04	; 4
    51da:	99 d7       	rcall	.+3890   	; 0x610e <sysclk_enable_module>
    51dc:	a1 c0       	rjmp	.+322    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    51de:	89 81       	ldd	r24, Y+1	; 0x01
    51e0:	9a 81       	ldd	r25, Y+2	; 0x02
    51e2:	80 39       	cpi	r24, 0x90	; 144
    51e4:	9a 40       	sbci	r25, 0x0A	; 10
    51e6:	21 f4       	brne	.+8      	; 0x51f0 <sysclk_enable_peripheral_clock+0x1b8>
    51e8:	64 e0       	ldi	r22, 0x04	; 4
    51ea:	85 e0       	ldi	r24, 0x05	; 5
    51ec:	90 d7       	rcall	.+3872   	; 0x610e <sysclk_enable_module>
    51ee:	98 c0       	rjmp	.+304    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    51f0:	89 81       	ldd	r24, Y+1	; 0x01
    51f2:	9a 81       	ldd	r25, Y+2	; 0x02
    51f4:	80 39       	cpi	r24, 0x90	; 144
    51f6:	9b 40       	sbci	r25, 0x0B	; 11
    51f8:	21 f4       	brne	.+8      	; 0x5202 <sysclk_enable_peripheral_clock+0x1ca>
    51fa:	64 e0       	ldi	r22, 0x04	; 4
    51fc:	86 e0       	ldi	r24, 0x06	; 6
    51fe:	87 d7       	rcall	.+3854   	; 0x610e <sysclk_enable_module>
    5200:	8f c0       	rjmp	.+286    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	9a 81       	ldd	r25, Y+2	; 0x02
    5206:	80 3c       	cpi	r24, 0xC0	; 192
    5208:	98 40       	sbci	r25, 0x08	; 8
    520a:	21 f4       	brne	.+8      	; 0x5214 <sysclk_enable_peripheral_clock+0x1dc>
    520c:	68 e0       	ldi	r22, 0x08	; 8
    520e:	83 e0       	ldi	r24, 0x03	; 3
    5210:	7e d7       	rcall	.+3836   	; 0x610e <sysclk_enable_module>
    5212:	86 c0       	rjmp	.+268    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	9a 81       	ldd	r25, Y+2	; 0x02
    5218:	80 3c       	cpi	r24, 0xC0	; 192
    521a:	99 40       	sbci	r25, 0x09	; 9
    521c:	21 f4       	brne	.+8      	; 0x5226 <sysclk_enable_peripheral_clock+0x1ee>
    521e:	68 e0       	ldi	r22, 0x08	; 8
    5220:	84 e0       	ldi	r24, 0x04	; 4
    5222:	75 d7       	rcall	.+3818   	; 0x610e <sysclk_enable_module>
    5224:	7d c0       	rjmp	.+250    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5226:	89 81       	ldd	r24, Y+1	; 0x01
    5228:	9a 81       	ldd	r25, Y+2	; 0x02
    522a:	80 3c       	cpi	r24, 0xC0	; 192
    522c:	9a 40       	sbci	r25, 0x0A	; 10
    522e:	21 f4       	brne	.+8      	; 0x5238 <sysclk_enable_peripheral_clock+0x200>
    5230:	68 e0       	ldi	r22, 0x08	; 8
    5232:	85 e0       	ldi	r24, 0x05	; 5
    5234:	6c d7       	rcall	.+3800   	; 0x610e <sysclk_enable_module>
    5236:	74 c0       	rjmp	.+232    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	9a 81       	ldd	r25, Y+2	; 0x02
    523c:	80 3c       	cpi	r24, 0xC0	; 192
    523e:	9b 40       	sbci	r25, 0x0B	; 11
    5240:	21 f4       	brne	.+8      	; 0x524a <sysclk_enable_peripheral_clock+0x212>
    5242:	68 e0       	ldi	r22, 0x08	; 8
    5244:	86 e0       	ldi	r24, 0x06	; 6
    5246:	63 d7       	rcall	.+3782   	; 0x610e <sysclk_enable_module>
    5248:	6b c0       	rjmp	.+214    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    524a:	89 81       	ldd	r24, Y+1	; 0x01
    524c:	9a 81       	ldd	r25, Y+2	; 0x02
    524e:	80 3a       	cpi	r24, 0xA0	; 160
    5250:	98 40       	sbci	r25, 0x08	; 8
    5252:	21 f4       	brne	.+8      	; 0x525c <sysclk_enable_peripheral_clock+0x224>
    5254:	60 e1       	ldi	r22, 0x10	; 16
    5256:	83 e0       	ldi	r24, 0x03	; 3
    5258:	5a d7       	rcall	.+3764   	; 0x610e <sysclk_enable_module>
    525a:	62 c0       	rjmp	.+196    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    525c:	89 81       	ldd	r24, Y+1	; 0x01
    525e:	9a 81       	ldd	r25, Y+2	; 0x02
    5260:	80 3a       	cpi	r24, 0xA0	; 160
    5262:	99 40       	sbci	r25, 0x09	; 9
    5264:	21 f4       	brne	.+8      	; 0x526e <sysclk_enable_peripheral_clock+0x236>
    5266:	60 e1       	ldi	r22, 0x10	; 16
    5268:	84 e0       	ldi	r24, 0x04	; 4
    526a:	51 d7       	rcall	.+3746   	; 0x610e <sysclk_enable_module>
    526c:	59 c0       	rjmp	.+178    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    526e:	89 81       	ldd	r24, Y+1	; 0x01
    5270:	9a 81       	ldd	r25, Y+2	; 0x02
    5272:	80 3a       	cpi	r24, 0xA0	; 160
    5274:	9a 40       	sbci	r25, 0x0A	; 10
    5276:	21 f4       	brne	.+8      	; 0x5280 <sysclk_enable_peripheral_clock+0x248>
    5278:	60 e1       	ldi	r22, 0x10	; 16
    527a:	85 e0       	ldi	r24, 0x05	; 5
    527c:	48 d7       	rcall	.+3728   	; 0x610e <sysclk_enable_module>
    527e:	50 c0       	rjmp	.+160    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	9a 81       	ldd	r25, Y+2	; 0x02
    5284:	80 3a       	cpi	r24, 0xA0	; 160
    5286:	9b 40       	sbci	r25, 0x0B	; 11
    5288:	21 f4       	brne	.+8      	; 0x5292 <sysclk_enable_peripheral_clock+0x25a>
    528a:	60 e1       	ldi	r22, 0x10	; 16
    528c:	86 e0       	ldi	r24, 0x06	; 6
    528e:	3f d7       	rcall	.+3710   	; 0x610e <sysclk_enable_module>
    5290:	47 c0       	rjmp	.+142    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5292:	89 81       	ldd	r24, Y+1	; 0x01
    5294:	9a 81       	ldd	r25, Y+2	; 0x02
    5296:	80 3b       	cpi	r24, 0xB0	; 176
    5298:	98 40       	sbci	r25, 0x08	; 8
    529a:	21 f4       	brne	.+8      	; 0x52a4 <sysclk_enable_peripheral_clock+0x26c>
    529c:	60 e2       	ldi	r22, 0x20	; 32
    529e:	83 e0       	ldi	r24, 0x03	; 3
    52a0:	36 d7       	rcall	.+3692   	; 0x610e <sysclk_enable_module>
    52a2:	3e c0       	rjmp	.+124    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	9a 81       	ldd	r25, Y+2	; 0x02
    52a8:	80 3b       	cpi	r24, 0xB0	; 176
    52aa:	99 40       	sbci	r25, 0x09	; 9
    52ac:	21 f4       	brne	.+8      	; 0x52b6 <sysclk_enable_peripheral_clock+0x27e>
    52ae:	60 e2       	ldi	r22, 0x20	; 32
    52b0:	84 e0       	ldi	r24, 0x04	; 4
    52b2:	2d d7       	rcall	.+3674   	; 0x610e <sysclk_enable_module>
    52b4:	35 c0       	rjmp	.+106    	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    52b6:	89 81       	ldd	r24, Y+1	; 0x01
    52b8:	9a 81       	ldd	r25, Y+2	; 0x02
    52ba:	80 3b       	cpi	r24, 0xB0	; 176
    52bc:	9a 40       	sbci	r25, 0x0A	; 10
    52be:	21 f4       	brne	.+8      	; 0x52c8 <sysclk_enable_peripheral_clock+0x290>
    52c0:	60 e2       	ldi	r22, 0x20	; 32
    52c2:	85 e0       	ldi	r24, 0x05	; 5
    52c4:	24 d7       	rcall	.+3656   	; 0x610e <sysclk_enable_module>
    52c6:	2c c0       	rjmp	.+88     	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	9a 81       	ldd	r25, Y+2	; 0x02
    52cc:	80 3b       	cpi	r24, 0xB0	; 176
    52ce:	9b 40       	sbci	r25, 0x0B	; 11
    52d0:	21 f4       	brne	.+8      	; 0x52da <sysclk_enable_peripheral_clock+0x2a2>
    52d2:	60 e2       	ldi	r22, 0x20	; 32
    52d4:	86 e0       	ldi	r24, 0x06	; 6
    52d6:	1b d7       	rcall	.+3638   	; 0x610e <sysclk_enable_module>
    52d8:	23 c0       	rjmp	.+70     	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    52da:	89 81       	ldd	r24, Y+1	; 0x01
    52dc:	9a 81       	ldd	r25, Y+2	; 0x02
    52de:	80 38       	cpi	r24, 0x80	; 128
    52e0:	94 40       	sbci	r25, 0x04	; 4
    52e2:	21 f4       	brne	.+8      	; 0x52ec <sysclk_enable_peripheral_clock+0x2b4>
    52e4:	60 e4       	ldi	r22, 0x40	; 64
    52e6:	83 e0       	ldi	r24, 0x03	; 3
    52e8:	12 d7       	rcall	.+3620   	; 0x610e <sysclk_enable_module>
    52ea:	1a c0       	rjmp	.+52     	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    52ec:	89 81       	ldd	r24, Y+1	; 0x01
    52ee:	9a 81       	ldd	r25, Y+2	; 0x02
    52f0:	80 39       	cpi	r24, 0x90	; 144
    52f2:	94 40       	sbci	r25, 0x04	; 4
    52f4:	21 f4       	brne	.+8      	; 0x52fe <sysclk_enable_peripheral_clock+0x2c6>
    52f6:	60 e4       	ldi	r22, 0x40	; 64
    52f8:	84 e0       	ldi	r24, 0x04	; 4
    52fa:	09 d7       	rcall	.+3602   	; 0x610e <sysclk_enable_module>
    52fc:	11 c0       	rjmp	.+34     	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    52fe:	89 81       	ldd	r24, Y+1	; 0x01
    5300:	9a 81       	ldd	r25, Y+2	; 0x02
    5302:	80 3a       	cpi	r24, 0xA0	; 160
    5304:	94 40       	sbci	r25, 0x04	; 4
    5306:	21 f4       	brne	.+8      	; 0x5310 <sysclk_enable_peripheral_clock+0x2d8>
    5308:	60 e4       	ldi	r22, 0x40	; 64
    530a:	85 e0       	ldi	r24, 0x05	; 5
    530c:	00 d7       	rcall	.+3584   	; 0x610e <sysclk_enable_module>
    530e:	08 c0       	rjmp	.+16     	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	9a 81       	ldd	r25, Y+2	; 0x02
    5314:	80 3b       	cpi	r24, 0xB0	; 176
    5316:	94 40       	sbci	r25, 0x04	; 4
    5318:	19 f4       	brne	.+6      	; 0x5320 <sysclk_enable_peripheral_clock+0x2e8>
    531a:	60 e4       	ldi	r22, 0x40	; 64
    531c:	86 e0       	ldi	r24, 0x06	; 6
    531e:	f7 d6       	rcall	.+3566   	; 0x610e <sysclk_enable_module>
    5320:	00 00       	nop
    5322:	0f 90       	pop	r0
    5324:	0f 90       	pop	r0
    5326:	df 91       	pop	r29
    5328:	cf 91       	pop	r28
    532a:	08 95       	ret

0000532c <ioport_set_pin_high>:
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	2a 97       	sbiw	r28, 0x0a	; 10
    5336:	cd bf       	out	0x3d, r28	; 61
    5338:	de bf       	out	0x3e, r29	; 62
    533a:	8a 87       	std	Y+10, r24	; 0x0a
    533c:	8a 85       	ldd	r24, Y+10	; 0x0a
    533e:	89 83       	std	Y+1, r24	; 0x01
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	8a 83       	std	Y+2, r24	; 0x02
    5344:	89 81       	ldd	r24, Y+1	; 0x01
    5346:	8b 83       	std	Y+3, r24	; 0x03
    5348:	8b 81       	ldd	r24, Y+3	; 0x03
    534a:	8c 83       	std	Y+4, r24	; 0x04
    534c:	8c 81       	ldd	r24, Y+4	; 0x04
    534e:	86 95       	lsr	r24
    5350:	86 95       	lsr	r24
    5352:	86 95       	lsr	r24
    5354:	8d 83       	std	Y+5, r24	; 0x05
    5356:	8d 81       	ldd	r24, Y+5	; 0x05
    5358:	88 2f       	mov	r24, r24
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	88 0f       	add	r24, r24
    535e:	99 1f       	adc	r25, r25
    5360:	82 95       	swap	r24
    5362:	92 95       	swap	r25
    5364:	90 7f       	andi	r25, 0xF0	; 240
    5366:	98 27       	eor	r25, r24
    5368:	80 7f       	andi	r24, 0xF0	; 240
    536a:	98 27       	eor	r25, r24
    536c:	9a 5f       	subi	r25, 0xFA	; 250
    536e:	8e 83       	std	Y+6, r24	; 0x06
    5370:	9f 83       	std	Y+7, r25	; 0x07
    5372:	8a 81       	ldd	r24, Y+2	; 0x02
    5374:	88 23       	and	r24, r24
    5376:	a9 f0       	breq	.+42     	; 0x53a2 <ioport_set_pin_high+0x76>
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	88 87       	std	Y+8, r24	; 0x08
    537c:	88 85       	ldd	r24, Y+8	; 0x08
    537e:	88 2f       	mov	r24, r24
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	9c 01       	movw	r18, r24
    5384:	27 70       	andi	r18, 0x07	; 7
    5386:	33 27       	eor	r19, r19
    5388:	81 e0       	ldi	r24, 0x01	; 1
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	02 c0       	rjmp	.+4      	; 0x5392 <ioport_set_pin_high+0x66>
    538e:	88 0f       	add	r24, r24
    5390:	99 1f       	adc	r25, r25
    5392:	2a 95       	dec	r18
    5394:	e2 f7       	brpl	.-8      	; 0x538e <ioport_set_pin_high+0x62>
    5396:	28 2f       	mov	r18, r24
    5398:	8e 81       	ldd	r24, Y+6	; 0x06
    539a:	9f 81       	ldd	r25, Y+7	; 0x07
    539c:	fc 01       	movw	r30, r24
    539e:	25 83       	std	Z+5, r18	; 0x05
    53a0:	14 c0       	rjmp	.+40     	; 0x53ca <ioport_set_pin_high+0x9e>
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	89 87       	std	Y+9, r24	; 0x09
    53a6:	89 85       	ldd	r24, Y+9	; 0x09
    53a8:	88 2f       	mov	r24, r24
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	9c 01       	movw	r18, r24
    53ae:	27 70       	andi	r18, 0x07	; 7
    53b0:	33 27       	eor	r19, r19
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	02 c0       	rjmp	.+4      	; 0x53bc <ioport_set_pin_high+0x90>
    53b8:	88 0f       	add	r24, r24
    53ba:	99 1f       	adc	r25, r25
    53bc:	2a 95       	dec	r18
    53be:	e2 f7       	brpl	.-8      	; 0x53b8 <ioport_set_pin_high+0x8c>
    53c0:	28 2f       	mov	r18, r24
    53c2:	8e 81       	ldd	r24, Y+6	; 0x06
    53c4:	9f 81       	ldd	r25, Y+7	; 0x07
    53c6:	fc 01       	movw	r30, r24
    53c8:	26 83       	std	Z+6, r18	; 0x06
    53ca:	00 00       	nop
    53cc:	2a 96       	adiw	r28, 0x0a	; 10
    53ce:	cd bf       	out	0x3d, r28	; 61
    53d0:	de bf       	out	0x3e, r29	; 62
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	08 95       	ret

000053d8 <usart_serial_init>:
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
    53dc:	cd b7       	in	r28, 0x3d	; 61
    53de:	de b7       	in	r29, 0x3e	; 62
    53e0:	2b 97       	sbiw	r28, 0x0b	; 11
    53e2:	cd bf       	out	0x3d, r28	; 61
    53e4:	de bf       	out	0x3e, r29	; 62
    53e6:	88 87       	std	Y+8, r24	; 0x08
    53e8:	99 87       	std	Y+9, r25	; 0x09
    53ea:	6a 87       	std	Y+10, r22	; 0x0a
    53ec:	7b 87       	std	Y+11, r23	; 0x0b
    53ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    53f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    53f2:	fc 01       	movw	r30, r24
    53f4:	84 81       	ldd	r24, Z+4	; 0x04
    53f6:	8d 83       	std	Y+5, r24	; 0x05
    53f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    53fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    53fc:	fc 01       	movw	r30, r24
    53fe:	85 81       	ldd	r24, Z+5	; 0x05
    5400:	8e 83       	std	Y+6, r24	; 0x06
    5402:	8a 85       	ldd	r24, Y+10	; 0x0a
    5404:	9b 85       	ldd	r25, Y+11	; 0x0b
    5406:	fc 01       	movw	r30, r24
    5408:	86 81       	ldd	r24, Z+6	; 0x06
    540a:	8f 83       	std	Y+7, r24	; 0x07
    540c:	8a 85       	ldd	r24, Y+10	; 0x0a
    540e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5410:	fc 01       	movw	r30, r24
    5412:	80 81       	ld	r24, Z
    5414:	91 81       	ldd	r25, Z+1	; 0x01
    5416:	a2 81       	ldd	r26, Z+2	; 0x02
    5418:	b3 81       	ldd	r27, Z+3	; 0x03
    541a:	89 83       	std	Y+1, r24	; 0x01
    541c:	9a 83       	std	Y+2, r25	; 0x02
    541e:	ab 83       	std	Y+3, r26	; 0x03
    5420:	bc 83       	std	Y+4, r27	; 0x04
    5422:	88 85       	ldd	r24, Y+8	; 0x08
    5424:	99 85       	ldd	r25, Y+9	; 0x09
    5426:	80 3a       	cpi	r24, 0xA0	; 160
    5428:	98 40       	sbci	r25, 0x08	; 8
    542a:	19 f4       	brne	.+6      	; 0x5432 <usart_serial_init+0x5a>
    542c:	60 e1       	ldi	r22, 0x10	; 16
    542e:	83 e0       	ldi	r24, 0x03	; 3
    5430:	6e d6       	rcall	.+3292   	; 0x610e <sysclk_enable_module>
    5432:	88 85       	ldd	r24, Y+8	; 0x08
    5434:	99 85       	ldd	r25, Y+9	; 0x09
    5436:	80 3b       	cpi	r24, 0xB0	; 176
    5438:	98 40       	sbci	r25, 0x08	; 8
    543a:	19 f4       	brne	.+6      	; 0x5442 <usart_serial_init+0x6a>
    543c:	60 e2       	ldi	r22, 0x20	; 32
    543e:	83 e0       	ldi	r24, 0x03	; 3
    5440:	66 d6       	rcall	.+3276   	; 0x610e <sysclk_enable_module>
    5442:	88 85       	ldd	r24, Y+8	; 0x08
    5444:	99 85       	ldd	r25, Y+9	; 0x09
    5446:	80 3a       	cpi	r24, 0xA0	; 160
    5448:	99 40       	sbci	r25, 0x09	; 9
    544a:	19 f4       	brne	.+6      	; 0x5452 <usart_serial_init+0x7a>
    544c:	60 e1       	ldi	r22, 0x10	; 16
    544e:	84 e0       	ldi	r24, 0x04	; 4
    5450:	5e d6       	rcall	.+3260   	; 0x610e <sysclk_enable_module>
    5452:	88 85       	ldd	r24, Y+8	; 0x08
    5454:	99 85       	ldd	r25, Y+9	; 0x09
    5456:	80 3b       	cpi	r24, 0xB0	; 176
    5458:	99 40       	sbci	r25, 0x09	; 9
    545a:	19 f4       	brne	.+6      	; 0x5462 <usart_serial_init+0x8a>
    545c:	60 e2       	ldi	r22, 0x20	; 32
    545e:	84 e0       	ldi	r24, 0x04	; 4
    5460:	56 d6       	rcall	.+3244   	; 0x610e <sysclk_enable_module>
    5462:	88 85       	ldd	r24, Y+8	; 0x08
    5464:	99 85       	ldd	r25, Y+9	; 0x09
    5466:	80 3a       	cpi	r24, 0xA0	; 160
    5468:	9a 40       	sbci	r25, 0x0A	; 10
    546a:	19 f4       	brne	.+6      	; 0x5472 <usart_serial_init+0x9a>
    546c:	60 e1       	ldi	r22, 0x10	; 16
    546e:	85 e0       	ldi	r24, 0x05	; 5
    5470:	4e d6       	rcall	.+3228   	; 0x610e <sysclk_enable_module>
    5472:	88 85       	ldd	r24, Y+8	; 0x08
    5474:	99 85       	ldd	r25, Y+9	; 0x09
    5476:	80 3b       	cpi	r24, 0xB0	; 176
    5478:	9a 40       	sbci	r25, 0x0A	; 10
    547a:	19 f4       	brne	.+6      	; 0x5482 <usart_serial_init+0xaa>
    547c:	60 e2       	ldi	r22, 0x20	; 32
    547e:	85 e0       	ldi	r24, 0x05	; 5
    5480:	46 d6       	rcall	.+3212   	; 0x610e <sysclk_enable_module>
    5482:	88 85       	ldd	r24, Y+8	; 0x08
    5484:	99 85       	ldd	r25, Y+9	; 0x09
    5486:	80 3a       	cpi	r24, 0xA0	; 160
    5488:	9b 40       	sbci	r25, 0x0B	; 11
    548a:	19 f4       	brne	.+6      	; 0x5492 <usart_serial_init+0xba>
    548c:	60 e1       	ldi	r22, 0x10	; 16
    548e:	86 e0       	ldi	r24, 0x06	; 6
    5490:	3e d6       	rcall	.+3196   	; 0x610e <sysclk_enable_module>
    5492:	88 85       	ldd	r24, Y+8	; 0x08
    5494:	99 85       	ldd	r25, Y+9	; 0x09
    5496:	80 3b       	cpi	r24, 0xB0	; 176
    5498:	9b 40       	sbci	r25, 0x0B	; 11
    549a:	19 f4       	brne	.+6      	; 0x54a2 <usart_serial_init+0xca>
    549c:	60 e2       	ldi	r22, 0x20	; 32
    549e:	86 e0       	ldi	r24, 0x06	; 6
    54a0:	36 d6       	rcall	.+3180   	; 0x610e <sysclk_enable_module>
    54a2:	88 85       	ldd	r24, Y+8	; 0x08
    54a4:	99 85       	ldd	r25, Y+9	; 0x09
    54a6:	9e 01       	movw	r18, r28
    54a8:	2f 5f       	subi	r18, 0xFF	; 255
    54aa:	3f 4f       	sbci	r19, 0xFF	; 255
    54ac:	b9 01       	movw	r22, r18
    54ae:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <usart_init_rs232>
    54b2:	88 23       	and	r24, r24
    54b4:	11 f0       	breq	.+4      	; 0x54ba <usart_serial_init+0xe2>
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	01 c0       	rjmp	.+2      	; 0x54bc <usart_serial_init+0xe4>
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	2b 96       	adiw	r28, 0x0b	; 11
    54be:	cd bf       	out	0x3d, r28	; 61
    54c0:	de bf       	out	0x3e, r29	; 62
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	08 95       	ret

000054c8 <init_GPS_pins_and_usart>:
    54c8:	cf 93       	push	r28
    54ca:	df 93       	push	r29
    54cc:	cd b7       	in	r28, 0x3d	; 61
    54ce:	de b7       	in	r29, 0x3e	; 62
    54d0:	80 ea       	ldi	r24, 0xA0	; 160
    54d2:	96 e0       	ldi	r25, 0x06	; 6
    54d4:	20 ea       	ldi	r18, 0xA0	; 160
    54d6:	36 e0       	ldi	r19, 0x06	; 6
    54d8:	f9 01       	movw	r30, r18
    54da:	20 81       	ld	r18, Z
    54dc:	20 68       	ori	r18, 0x80	; 128
    54de:	fc 01       	movw	r30, r24
    54e0:	20 83       	st	Z, r18
    54e2:	80 ea       	ldi	r24, 0xA0	; 160
    54e4:	96 e0       	ldi	r25, 0x06	; 6
    54e6:	20 ea       	ldi	r18, 0xA0	; 160
    54e8:	36 e0       	ldi	r19, 0x06	; 6
    54ea:	f9 01       	movw	r30, r18
    54ec:	20 81       	ld	r18, Z
    54ee:	2f 7b       	andi	r18, 0xBF	; 191
    54f0:	fc 01       	movw	r30, r24
    54f2:	20 83       	st	Z, r18
    54f4:	8f e2       	ldi	r24, 0x2F	; 47
    54f6:	1a df       	rcall	.-460    	; 0x532c <ioport_set_pin_high>
    54f8:	80 eb       	ldi	r24, 0xB0	; 176
    54fa:	9b e0       	ldi	r25, 0x0B	; 11
    54fc:	9d dd       	rcall	.-1222   	; 0x5038 <sysclk_enable_peripheral_clock>
    54fe:	66 e0       	ldi	r22, 0x06	; 6
    5500:	70 e2       	ldi	r23, 0x20	; 32
    5502:	80 eb       	ldi	r24, 0xB0	; 176
    5504:	9b e0       	ldi	r25, 0x0B	; 11
    5506:	68 df       	rcall	.-304    	; 0x53d8 <usart_serial_init>
    5508:	00 00       	nop
    550a:	df 91       	pop	r29
    550c:	cf 91       	pop	r28
    550e:	08 95       	ret

00005510 <startswith>:
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
    5514:	cd b7       	in	r28, 0x3d	; 61
    5516:	de b7       	in	r29, 0x3e	; 62
    5518:	25 97       	sbiw	r28, 0x05	; 5
    551a:	cd bf       	out	0x3d, r28	; 61
    551c:	de bf       	out	0x3e, r29	; 62
    551e:	8a 83       	std	Y+2, r24	; 0x02
    5520:	9b 83       	std	Y+3, r25	; 0x03
    5522:	6c 83       	std	Y+4, r22	; 0x04
    5524:	7d 83       	std	Y+5, r23	; 0x05
    5526:	19 82       	std	Y+1, r1	; 0x01
    5528:	89 81       	ldd	r24, Y+1	; 0x01
    552a:	88 2f       	mov	r24, r24
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	2c 81       	ldd	r18, Y+4	; 0x04
    5530:	3d 81       	ldd	r19, Y+5	; 0x05
    5532:	82 0f       	add	r24, r18
    5534:	93 1f       	adc	r25, r19
    5536:	fc 01       	movw	r30, r24
    5538:	80 81       	ld	r24, Z
    553a:	88 23       	and	r24, r24
    553c:	11 f4       	brne	.+4      	; 0x5542 <startswith+0x32>
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	20 c0       	rjmp	.+64     	; 0x5582 <startswith+0x72>
    5542:	89 81       	ldd	r24, Y+1	; 0x01
    5544:	88 2f       	mov	r24, r24
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	2c 81       	ldd	r18, Y+4	; 0x04
    554a:	3d 81       	ldd	r19, Y+5	; 0x05
    554c:	82 0f       	add	r24, r18
    554e:	93 1f       	adc	r25, r19
    5550:	fc 01       	movw	r30, r24
    5552:	80 81       	ld	r24, Z
    5554:	28 2f       	mov	r18, r24
    5556:	88 0f       	add	r24, r24
    5558:	33 0b       	sbc	r19, r19
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	88 2f       	mov	r24, r24
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	4a 81       	ldd	r20, Y+2	; 0x02
    5562:	5b 81       	ldd	r21, Y+3	; 0x03
    5564:	84 0f       	add	r24, r20
    5566:	95 1f       	adc	r25, r21
    5568:	fc 01       	movw	r30, r24
    556a:	80 81       	ld	r24, Z
    556c:	88 2f       	mov	r24, r24
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	28 17       	cp	r18, r24
    5572:	39 07       	cpc	r19, r25
    5574:	11 f0       	breq	.+4      	; 0x557a <startswith+0x6a>
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	04 c0       	rjmp	.+8      	; 0x5582 <startswith+0x72>
    557a:	89 81       	ldd	r24, Y+1	; 0x01
    557c:	8f 5f       	subi	r24, 0xFF	; 255
    557e:	89 83       	std	Y+1, r24	; 0x01
    5580:	d3 cf       	rjmp	.-90     	; 0x5528 <startswith+0x18>
    5582:	25 96       	adiw	r28, 0x05	; 5
    5584:	cd bf       	out	0x3d, r28	; 61
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	df 91       	pop	r29
    558a:	cf 91       	pop	r28
    558c:	08 95       	ret

0000558e <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    558e:	8f 92       	push	r8
    5590:	9f 92       	push	r9
    5592:	af 92       	push	r10
    5594:	bf 92       	push	r11
    5596:	cf 92       	push	r12
    5598:	df 92       	push	r13
    559a:	ef 92       	push	r14
    559c:	ff 92       	push	r15
    559e:	0f 93       	push	r16
    55a0:	1f 93       	push	r17
    55a2:	cf 93       	push	r28
    55a4:	df 93       	push	r29
    55a6:	cd b7       	in	r28, 0x3d	; 61
    55a8:	de b7       	in	r29, 0x3e	; 62
    55aa:	ed 97       	sbiw	r28, 0x3d	; 61
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	de bf       	out	0x3e, r29	; 62
    55b0:	89 af       	std	Y+57, r24	; 0x39
    55b2:	9a af       	std	Y+58, r25	; 0x3a
    55b4:	6b af       	std	Y+59, r22	; 0x3b
    55b6:	7c af       	std	Y+60, r23	; 0x3c
    55b8:	4d af       	std	Y+61, r20	; 0x3d
	int8_t countcommas=0;
    55ba:	19 82       	std	Y+1, r1	; 0x01
	GPS_data_t GPSData;
	uint8_t first_comma_position=0;
    55bc:	1b 86       	std	Y+11, r1	; 0x0b
	uint8_t second_comma_position=0;
    55be:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t third_comma_position=0;
    55c0:	1d 86       	std	Y+13, r1	; 0x0d
	uint8_t fourth_comma_position=0;
    55c2:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t fifth_comma_position=0;
    55c4:	1f 86       	std	Y+15, r1	; 0x0f
	uint8_t comma7=0;
    55c6:	18 8a       	std	Y+16, r1	; 0x10
	uint8_t comma8=0;
    55c8:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t comma9=0;
    55ca:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t comma10=0;
    55cc:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t commab=0;
    55ce:	1c 8a       	std	Y+20, r1	; 0x14
	uint8_t commac=0;
    55d0:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t speedwritten=0;
    55d2:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t heightwritten=0;
    55d4:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t no_of_sateliiteswritten=0;
    55d6:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t comma_position=0;
    55d8:	19 8e       	std	Y+25, r1	; 0x19
	int a=0;
    55da:	1a 82       	std	Y+2, r1	; 0x02
    55dc:	1b 82       	std	Y+3, r1	; 0x03
	if (startswith(NMEA_sentence, "$GPGGA"))
    55de:	8b ad       	ldd	r24, Y+59	; 0x3b
    55e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    55e2:	6e e0       	ldi	r22, 0x0E	; 14
    55e4:	72 e2       	ldi	r23, 0x22	; 34
    55e6:	94 df       	rcall	.-216    	; 0x5510 <startswith>
    55e8:	88 23       	and	r24, r24
    55ea:	09 f4       	brne	.+2      	; 0x55ee <getGPSDatafromNMEA+0x60>
    55ec:	ca c3       	rjmp	.+1940   	; 0x5d82 <getGPSDatafromNMEA+0x7f4>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    55ee:	1a 82       	std	Y+2, r1	; 0x02
    55f0:	1b 82       	std	Y+3, r1	; 0x03
    55f2:	bc c3       	rjmp	.+1912   	; 0x5d6c <getGPSDatafromNMEA+0x7de>
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    55f4:	8a 81       	ldd	r24, Y+2	; 0x02
    55f6:	9b 81       	ldd	r25, Y+3	; 0x03
    55f8:	2b ad       	ldd	r18, Y+59	; 0x3b
    55fa:	3c ad       	ldd	r19, Y+60	; 0x3c
    55fc:	82 0f       	add	r24, r18
    55fe:	93 1f       	adc	r25, r19
    5600:	fc 01       	movw	r30, r24
    5602:	80 81       	ld	r24, Z
    5604:	8c 32       	cpi	r24, 0x2C	; 44
    5606:	09 f0       	breq	.+2      	; 0x560a <getGPSDatafromNMEA+0x7c>
    5608:	ac c3       	rjmp	.+1880   	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
			{
				//printf("gfhghhf");
				countcommas++;
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	8f 5f       	subi	r24, 0xFF	; 255
    560e:	89 83       	std	Y+1, r24	; 0x01
				if (countcommas == 1)
    5610:	89 81       	ldd	r24, Y+1	; 0x01
    5612:	81 30       	cpi	r24, 0x01	; 1
    5614:	09 f0       	breq	.+2      	; 0x5618 <getGPSDatafromNMEA+0x8a>
    5616:	5b c0       	rjmp	.+182    	; 0x56ce <getGPSDatafromNMEA+0x140>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    5618:	8a 81       	ldd	r24, Y+2	; 0x02
    561a:	9b 81       	ldd	r25, Y+3	; 0x03
    561c:	01 96       	adiw	r24, 0x01	; 1
    561e:	2b ad       	ldd	r18, Y+59	; 0x3b
    5620:	3c ad       	ldd	r19, Y+60	; 0x3c
    5622:	82 0f       	add	r24, r18
    5624:	93 1f       	adc	r25, r19
    5626:	fc 01       	movw	r30, r24
    5628:	80 81       	ld	r24, Z
    562a:	88 2f       	mov	r24, r24
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	c0 97       	sbiw	r24, 0x30	; 48
    5630:	88 0f       	add	r24, r24
    5632:	98 2f       	mov	r25, r24
    5634:	99 0f       	add	r25, r25
    5636:	99 0f       	add	r25, r25
    5638:	48 2f       	mov	r20, r24
    563a:	49 0f       	add	r20, r25
    563c:	8a 81       	ldd	r24, Y+2	; 0x02
    563e:	9b 81       	ldd	r25, Y+3	; 0x03
    5640:	02 96       	adiw	r24, 0x02	; 2
    5642:	2b ad       	ldd	r18, Y+59	; 0x3b
    5644:	3c ad       	ldd	r19, Y+60	; 0x3c
    5646:	82 0f       	add	r24, r18
    5648:	93 1f       	adc	r25, r19
    564a:	fc 01       	movw	r30, r24
    564c:	80 81       	ld	r24, Z
    564e:	84 0f       	add	r24, r20
    5650:	80 53       	subi	r24, 0x30	; 48
    5652:	8c ab       	std	Y+52, r24	; 0x34
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    5654:	8a 81       	ldd	r24, Y+2	; 0x02
    5656:	9b 81       	ldd	r25, Y+3	; 0x03
    5658:	03 96       	adiw	r24, 0x03	; 3
    565a:	2b ad       	ldd	r18, Y+59	; 0x3b
    565c:	3c ad       	ldd	r19, Y+60	; 0x3c
    565e:	82 0f       	add	r24, r18
    5660:	93 1f       	adc	r25, r19
    5662:	fc 01       	movw	r30, r24
    5664:	80 81       	ld	r24, Z
    5666:	88 2f       	mov	r24, r24
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	c0 97       	sbiw	r24, 0x30	; 48
    566c:	88 0f       	add	r24, r24
    566e:	98 2f       	mov	r25, r24
    5670:	99 0f       	add	r25, r25
    5672:	99 0f       	add	r25, r25
    5674:	48 2f       	mov	r20, r24
    5676:	49 0f       	add	r20, r25
    5678:	8a 81       	ldd	r24, Y+2	; 0x02
    567a:	9b 81       	ldd	r25, Y+3	; 0x03
    567c:	04 96       	adiw	r24, 0x04	; 4
    567e:	2b ad       	ldd	r18, Y+59	; 0x3b
    5680:	3c ad       	ldd	r19, Y+60	; 0x3c
    5682:	82 0f       	add	r24, r18
    5684:	93 1f       	adc	r25, r19
    5686:	fc 01       	movw	r30, r24
    5688:	80 81       	ld	r24, Z
    568a:	84 0f       	add	r24, r20
    568c:	80 53       	subi	r24, 0x30	; 48
    568e:	8d ab       	std	Y+53, r24	; 0x35
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    5690:	8a 81       	ldd	r24, Y+2	; 0x02
    5692:	9b 81       	ldd	r25, Y+3	; 0x03
    5694:	05 96       	adiw	r24, 0x05	; 5
    5696:	2b ad       	ldd	r18, Y+59	; 0x3b
    5698:	3c ad       	ldd	r19, Y+60	; 0x3c
    569a:	82 0f       	add	r24, r18
    569c:	93 1f       	adc	r25, r19
    569e:	fc 01       	movw	r30, r24
    56a0:	80 81       	ld	r24, Z
    56a2:	88 2f       	mov	r24, r24
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	c0 97       	sbiw	r24, 0x30	; 48
    56a8:	88 0f       	add	r24, r24
    56aa:	98 2f       	mov	r25, r24
    56ac:	99 0f       	add	r25, r25
    56ae:	99 0f       	add	r25, r25
    56b0:	48 2f       	mov	r20, r24
    56b2:	49 0f       	add	r20, r25
    56b4:	8a 81       	ldd	r24, Y+2	; 0x02
    56b6:	9b 81       	ldd	r25, Y+3	; 0x03
    56b8:	06 96       	adiw	r24, 0x06	; 6
    56ba:	2b ad       	ldd	r18, Y+59	; 0x3b
    56bc:	3c ad       	ldd	r19, Y+60	; 0x3c
    56be:	82 0f       	add	r24, r18
    56c0:	93 1f       	adc	r25, r19
    56c2:	fc 01       	movw	r30, r24
    56c4:	80 81       	ld	r24, Z
    56c6:	84 0f       	add	r24, r20
    56c8:	80 53       	subi	r24, 0x30	; 48
    56ca:	8e ab       	std	Y+54, r24	; 0x36
    56cc:	4a c3       	rjmp	.+1684   	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    56ce:	89 81       	ldd	r24, Y+1	; 0x01
    56d0:	82 30       	cpi	r24, 0x02	; 2
    56d2:	09 f0       	breq	.+2      	; 0x56d6 <getGPSDatafromNMEA+0x148>
    56d4:	2c c1       	rjmp	.+600    	; 0x592e <getGPSDatafromNMEA+0x3a0>
    56d6:	8a 81       	ldd	r24, Y+2	; 0x02
    56d8:	9b 81       	ldd	r25, Y+3	; 0x03
    56da:	01 96       	adiw	r24, 0x01	; 1
    56dc:	2b ad       	ldd	r18, Y+59	; 0x3b
    56de:	3c ad       	ldd	r19, Y+60	; 0x3c
    56e0:	82 0f       	add	r24, r18
    56e2:	93 1f       	adc	r25, r19
    56e4:	fc 01       	movw	r30, r24
    56e6:	80 81       	ld	r24, Z
    56e8:	8c 32       	cpi	r24, 0x2C	; 44
    56ea:	09 f4       	brne	.+2      	; 0x56ee <getGPSDatafromNMEA+0x160>
    56ec:	20 c1       	rjmp	.+576    	; 0x592e <getGPSDatafromNMEA+0x3a0>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    56ee:	8a 81       	ldd	r24, Y+2	; 0x02
    56f0:	9b 81       	ldd	r25, Y+3	; 0x03
    56f2:	01 96       	adiw	r24, 0x01	; 1
    56f4:	2b ad       	ldd	r18, Y+59	; 0x3b
    56f6:	3c ad       	ldd	r19, Y+60	; 0x3c
    56f8:	82 0f       	add	r24, r18
    56fa:	93 1f       	adc	r25, r19
    56fc:	fc 01       	movw	r30, r24
    56fe:	80 81       	ld	r24, Z
    5700:	88 2f       	mov	r24, r24
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	c0 97       	sbiw	r24, 0x30	; 48
    5706:	88 0f       	add	r24, r24
    5708:	99 1f       	adc	r25, r25
    570a:	9c 01       	movw	r18, r24
    570c:	22 0f       	add	r18, r18
    570e:	33 1f       	adc	r19, r19
    5710:	22 0f       	add	r18, r18
    5712:	33 1f       	adc	r19, r19
    5714:	28 0f       	add	r18, r24
    5716:	39 1f       	adc	r19, r25
    5718:	8a 81       	ldd	r24, Y+2	; 0x02
    571a:	9b 81       	ldd	r25, Y+3	; 0x03
    571c:	02 96       	adiw	r24, 0x02	; 2
    571e:	4b ad       	ldd	r20, Y+59	; 0x3b
    5720:	5c ad       	ldd	r21, Y+60	; 0x3c
    5722:	84 0f       	add	r24, r20
    5724:	95 1f       	adc	r25, r21
    5726:	fc 01       	movw	r30, r24
    5728:	80 81       	ld	r24, Z
    572a:	88 2f       	mov	r24, r24
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	c0 97       	sbiw	r24, 0x30	; 48
    5730:	82 0f       	add	r24, r18
    5732:	93 1f       	adc	r25, r19
    5734:	8a 8f       	std	Y+26, r24	; 0x1a
    5736:	9b 8f       	std	Y+27, r25	; 0x1b
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    5738:	8a 81       	ldd	r24, Y+2	; 0x02
    573a:	9b 81       	ldd	r25, Y+3	; 0x03
    573c:	03 96       	adiw	r24, 0x03	; 3
    573e:	2b ad       	ldd	r18, Y+59	; 0x3b
    5740:	3c ad       	ldd	r19, Y+60	; 0x3c
    5742:	82 0f       	add	r24, r18
    5744:	93 1f       	adc	r25, r19
    5746:	fc 01       	movw	r30, r24
    5748:	80 81       	ld	r24, Z
    574a:	88 2f       	mov	r24, r24
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	c0 97       	sbiw	r24, 0x30	; 48
    5750:	09 2e       	mov	r0, r25
    5752:	00 0c       	add	r0, r0
    5754:	aa 0b       	sbc	r26, r26
    5756:	bb 0b       	sbc	r27, r27
    5758:	9c 01       	movw	r18, r24
    575a:	ad 01       	movw	r20, r26
    575c:	60 ea       	ldi	r22, 0xA0	; 160
    575e:	76 e8       	ldi	r23, 0x86	; 134
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <__mulsi3>
    5768:	7b 01       	movw	r14, r22
    576a:	8c 01       	movw	r16, r24
    576c:	8a 81       	ldd	r24, Y+2	; 0x02
    576e:	9b 81       	ldd	r25, Y+3	; 0x03
    5770:	04 96       	adiw	r24, 0x04	; 4
    5772:	2b ad       	ldd	r18, Y+59	; 0x3b
    5774:	3c ad       	ldd	r19, Y+60	; 0x3c
    5776:	82 0f       	add	r24, r18
    5778:	93 1f       	adc	r25, r19
    577a:	fc 01       	movw	r30, r24
    577c:	80 81       	ld	r24, Z
    577e:	88 2f       	mov	r24, r24
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	c0 97       	sbiw	r24, 0x30	; 48
    5784:	9c 01       	movw	r18, r24
    5786:	99 0f       	add	r25, r25
    5788:	44 0b       	sbc	r20, r20
    578a:	55 0b       	sbc	r21, r21
    578c:	80 e1       	ldi	r24, 0x10	; 16
    578e:	97 e2       	ldi	r25, 0x27	; 39
    5790:	dc 01       	movw	r26, r24
    5792:	0e 94 be 59 	call	0xb37c	; 0xb37c <__muluhisi3>
    5796:	dc 01       	movw	r26, r24
    5798:	cb 01       	movw	r24, r22
    579a:	e8 0e       	add	r14, r24
    579c:	f9 1e       	adc	r15, r25
    579e:	0a 1f       	adc	r16, r26
    57a0:	1b 1f       	adc	r17, r27
    57a2:	8a 81       	ldd	r24, Y+2	; 0x02
    57a4:	9b 81       	ldd	r25, Y+3	; 0x03
    57a6:	06 96       	adiw	r24, 0x06	; 6
    57a8:	2b ad       	ldd	r18, Y+59	; 0x3b
    57aa:	3c ad       	ldd	r19, Y+60	; 0x3c
    57ac:	82 0f       	add	r24, r18
    57ae:	93 1f       	adc	r25, r19
    57b0:	fc 01       	movw	r30, r24
    57b2:	80 81       	ld	r24, Z
    57b4:	88 2f       	mov	r24, r24
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	c0 97       	sbiw	r24, 0x30	; 48
    57ba:	9c 01       	movw	r18, r24
    57bc:	99 0f       	add	r25, r25
    57be:	44 0b       	sbc	r20, r20
    57c0:	55 0b       	sbc	r21, r21
    57c2:	88 ee       	ldi	r24, 0xE8	; 232
    57c4:	93 e0       	ldi	r25, 0x03	; 3
    57c6:	dc 01       	movw	r26, r24
    57c8:	0e 94 be 59 	call	0xb37c	; 0xb37c <__muluhisi3>
    57cc:	dc 01       	movw	r26, r24
    57ce:	cb 01       	movw	r24, r22
    57d0:	e8 0e       	add	r14, r24
    57d2:	f9 1e       	adc	r15, r25
    57d4:	0a 1f       	adc	r16, r26
    57d6:	1b 1f       	adc	r17, r27
    57d8:	8a 81       	ldd	r24, Y+2	; 0x02
    57da:	9b 81       	ldd	r25, Y+3	; 0x03
    57dc:	07 96       	adiw	r24, 0x07	; 7
    57de:	2b ad       	ldd	r18, Y+59	; 0x3b
    57e0:	3c ad       	ldd	r19, Y+60	; 0x3c
    57e2:	82 0f       	add	r24, r18
    57e4:	93 1f       	adc	r25, r19
    57e6:	fc 01       	movw	r30, r24
    57e8:	80 81       	ld	r24, Z
    57ea:	88 2f       	mov	r24, r24
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	c0 97       	sbiw	r24, 0x30	; 48
    57f0:	9c 01       	movw	r18, r24
    57f2:	99 0f       	add	r25, r25
    57f4:	44 0b       	sbc	r20, r20
    57f6:	55 0b       	sbc	r21, r21
    57f8:	84 e6       	ldi	r24, 0x64	; 100
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	dc 01       	movw	r26, r24
    57fe:	0e 94 be 59 	call	0xb37c	; 0xb37c <__muluhisi3>
    5802:	dc 01       	movw	r26, r24
    5804:	cb 01       	movw	r24, r22
    5806:	a8 01       	movw	r20, r16
    5808:	97 01       	movw	r18, r14
    580a:	28 0f       	add	r18, r24
    580c:	39 1f       	adc	r19, r25
    580e:	4a 1f       	adc	r20, r26
    5810:	5b 1f       	adc	r21, r27
    5812:	8a 81       	ldd	r24, Y+2	; 0x02
    5814:	9b 81       	ldd	r25, Y+3	; 0x03
    5816:	08 96       	adiw	r24, 0x08	; 8
    5818:	6b ad       	ldd	r22, Y+59	; 0x3b
    581a:	7c ad       	ldd	r23, Y+60	; 0x3c
    581c:	86 0f       	add	r24, r22
    581e:	97 1f       	adc	r25, r23
    5820:	fc 01       	movw	r30, r24
    5822:	80 81       	ld	r24, Z
    5824:	88 2f       	mov	r24, r24
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	c0 97       	sbiw	r24, 0x30	; 48
    582a:	09 2e       	mov	r0, r25
    582c:	00 0c       	add	r0, r0
    582e:	aa 0b       	sbc	r26, r26
    5830:	bb 0b       	sbc	r27, r27
    5832:	88 0f       	add	r24, r24
    5834:	99 1f       	adc	r25, r25
    5836:	aa 1f       	adc	r26, r26
    5838:	bb 1f       	adc	r27, r27
    583a:	7c 01       	movw	r14, r24
    583c:	8d 01       	movw	r16, r26
    583e:	ee 0c       	add	r14, r14
    5840:	ff 1c       	adc	r15, r15
    5842:	00 1f       	adc	r16, r16
    5844:	11 1f       	adc	r17, r17
    5846:	ee 0c       	add	r14, r14
    5848:	ff 1c       	adc	r15, r15
    584a:	00 1f       	adc	r16, r16
    584c:	11 1f       	adc	r17, r17
    584e:	8e 0d       	add	r24, r14
    5850:	9f 1d       	adc	r25, r15
    5852:	a0 1f       	adc	r26, r16
    5854:	b1 1f       	adc	r27, r17
    5856:	28 0f       	add	r18, r24
    5858:	39 1f       	adc	r19, r25
    585a:	4a 1f       	adc	r20, r26
    585c:	5b 1f       	adc	r21, r27
    585e:	8a 81       	ldd	r24, Y+2	; 0x02
    5860:	9b 81       	ldd	r25, Y+3	; 0x03
    5862:	09 96       	adiw	r24, 0x09	; 9
    5864:	6b ad       	ldd	r22, Y+59	; 0x3b
    5866:	7c ad       	ldd	r23, Y+60	; 0x3c
    5868:	86 0f       	add	r24, r22
    586a:	97 1f       	adc	r25, r23
    586c:	fc 01       	movw	r30, r24
    586e:	80 81       	ld	r24, Z
    5870:	88 2f       	mov	r24, r24
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	c0 97       	sbiw	r24, 0x30	; 48
    5876:	09 2e       	mov	r0, r25
    5878:	00 0c       	add	r0, r0
    587a:	aa 0b       	sbc	r26, r26
    587c:	bb 0b       	sbc	r27, r27
    587e:	82 0f       	add	r24, r18
    5880:	93 1f       	adc	r25, r19
    5882:	a4 1f       	adc	r26, r20
    5884:	b5 1f       	adc	r27, r21
    5886:	8c 8f       	std	Y+28, r24	; 0x1c
    5888:	9d 8f       	std	Y+29, r25	; 0x1d
    588a:	ae 8f       	std	Y+30, r26	; 0x1e
    588c:	bf 8f       	std	Y+31, r27	; 0x1f
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    588e:	8a 81       	ldd	r24, Y+2	; 0x02
    5890:	9b 81       	ldd	r25, Y+3	; 0x03
    5892:	0b 96       	adiw	r24, 0x0b	; 11
    5894:	2b ad       	ldd	r18, Y+59	; 0x3b
    5896:	3c ad       	ldd	r19, Y+60	; 0x3c
    5898:	82 0f       	add	r24, r18
    589a:	93 1f       	adc	r25, r19
    589c:	fc 01       	movw	r30, r24
    589e:	80 81       	ld	r24, Z
    58a0:	8e 34       	cpi	r24, 0x4E	; 78
    58a2:	49 f4       	brne	.+18     	; 0x58b6 <getGPSDatafromNMEA+0x328>
    58a4:	0f 2e       	mov	r0, r31
    58a6:	c1 2c       	mov	r12, r1
    58a8:	d1 2c       	mov	r13, r1
    58aa:	f0 e8       	ldi	r31, 0x80	; 128
    58ac:	ef 2e       	mov	r14, r31
    58ae:	ff e3       	ldi	r31, 0x3F	; 63
    58b0:	ff 2e       	mov	r15, r31
    58b2:	f0 2d       	mov	r31, r0
    58b4:	08 c0       	rjmp	.+16     	; 0x58c6 <getGPSDatafromNMEA+0x338>
    58b6:	0f 2e       	mov	r0, r31
    58b8:	c1 2c       	mov	r12, r1
    58ba:	d1 2c       	mov	r13, r1
    58bc:	f0 e8       	ldi	r31, 0x80	; 128
    58be:	ef 2e       	mov	r14, r31
    58c0:	ff eb       	ldi	r31, 0xBF	; 191
    58c2:	ff 2e       	mov	r15, r31
    58c4:	f0 2d       	mov	r31, r0
    58c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    58c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    58ca:	cc 01       	movw	r24, r24
    58cc:	a0 e0       	ldi	r26, 0x00	; 0
    58ce:	b0 e0       	ldi	r27, 0x00	; 0
    58d0:	bc 01       	movw	r22, r24
    58d2:	cd 01       	movw	r24, r26
    58d4:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    58d8:	4b 01       	movw	r8, r22
    58da:	5c 01       	movw	r10, r24
    58dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    58e0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    58e2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    58e4:	bc 01       	movw	r22, r24
    58e6:	cd 01       	movw	r24, r26
    58e8:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    58ec:	dc 01       	movw	r26, r24
    58ee:	cb 01       	movw	r24, r22
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	3c e7       	ldi	r19, 0x7C	; 124
    58f4:	42 e1       	ldi	r20, 0x12	; 18
    58f6:	59 e4       	ldi	r21, 0x49	; 73
    58f8:	bc 01       	movw	r22, r24
    58fa:	cd 01       	movw	r24, r26
    58fc:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    5900:	dc 01       	movw	r26, r24
    5902:	cb 01       	movw	r24, r22
    5904:	9c 01       	movw	r18, r24
    5906:	ad 01       	movw	r20, r26
    5908:	c5 01       	movw	r24, r10
    590a:	b4 01       	movw	r22, r8
    590c:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    5910:	dc 01       	movw	r26, r24
    5912:	cb 01       	movw	r24, r22
    5914:	9c 01       	movw	r18, r24
    5916:	ad 01       	movw	r20, r26
    5918:	c7 01       	movw	r24, r14
    591a:	b6 01       	movw	r22, r12
    591c:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	89 a3       	std	Y+33, r24	; 0x21
    5926:	9a a3       	std	Y+34, r25	; 0x22
    5928:	ab a3       	std	Y+35, r26	; 0x23
    592a:	bc a3       	std	Y+36, r27	; 0x24
    592c:	1a c2       	rjmp	.+1076   	; 0x5d62 <getGPSDatafromNMEA+0x7d4>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
    592e:	89 81       	ldd	r24, Y+1	; 0x01
    5930:	82 30       	cpi	r24, 0x02	; 2
    5932:	29 f4       	brne	.+10     	; 0x593e <getGPSDatafromNMEA+0x3b0>
				{
					GPSData.latdecimal = 0.0;
    5934:	19 a2       	std	Y+33, r1	; 0x21
    5936:	1a a2       	std	Y+34, r1	; 0x22
    5938:	1b a2       	std	Y+35, r1	; 0x23
    593a:	1c a2       	std	Y+36, r1	; 0x24
    593c:	12 c2       	rjmp	.+1060   	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    593e:	89 81       	ldd	r24, Y+1	; 0x01
    5940:	84 30       	cpi	r24, 0x04	; 4
    5942:	09 f0       	breq	.+2      	; 0x5946 <getGPSDatafromNMEA+0x3b8>
    5944:	40 c1       	rjmp	.+640    	; 0x5bc6 <getGPSDatafromNMEA+0x638>
    5946:	8a 81       	ldd	r24, Y+2	; 0x02
    5948:	9b 81       	ldd	r25, Y+3	; 0x03
    594a:	01 96       	adiw	r24, 0x01	; 1
    594c:	2b ad       	ldd	r18, Y+59	; 0x3b
    594e:	3c ad       	ldd	r19, Y+60	; 0x3c
    5950:	82 0f       	add	r24, r18
    5952:	93 1f       	adc	r25, r19
    5954:	fc 01       	movw	r30, r24
    5956:	80 81       	ld	r24, Z
    5958:	8c 32       	cpi	r24, 0x2C	; 44
    595a:	09 f4       	brne	.+2      	; 0x595e <getGPSDatafromNMEA+0x3d0>
    595c:	34 c1       	rjmp	.+616    	; 0x5bc6 <getGPSDatafromNMEA+0x638>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    595e:	8a 81       	ldd	r24, Y+2	; 0x02
    5960:	9b 81       	ldd	r25, Y+3	; 0x03
    5962:	01 96       	adiw	r24, 0x01	; 1
    5964:	2b ad       	ldd	r18, Y+59	; 0x3b
    5966:	3c ad       	ldd	r19, Y+60	; 0x3c
    5968:	82 0f       	add	r24, r18
    596a:	93 1f       	adc	r25, r19
    596c:	fc 01       	movw	r30, r24
    596e:	80 81       	ld	r24, Z
    5970:	88 2f       	mov	r24, r24
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	c0 97       	sbiw	r24, 0x30	; 48
    5976:	44 e6       	ldi	r20, 0x64	; 100
    5978:	48 9f       	mul	r20, r24
    597a:	90 01       	movw	r18, r0
    597c:	49 9f       	mul	r20, r25
    597e:	30 0d       	add	r19, r0
    5980:	11 24       	eor	r1, r1
    5982:	8a 81       	ldd	r24, Y+2	; 0x02
    5984:	9b 81       	ldd	r25, Y+3	; 0x03
    5986:	02 96       	adiw	r24, 0x02	; 2
    5988:	4b ad       	ldd	r20, Y+59	; 0x3b
    598a:	5c ad       	ldd	r21, Y+60	; 0x3c
    598c:	84 0f       	add	r24, r20
    598e:	95 1f       	adc	r25, r21
    5990:	fc 01       	movw	r30, r24
    5992:	80 81       	ld	r24, Z
    5994:	88 2f       	mov	r24, r24
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	c0 97       	sbiw	r24, 0x30	; 48
    599a:	88 0f       	add	r24, r24
    599c:	99 1f       	adc	r25, r25
    599e:	ac 01       	movw	r20, r24
    59a0:	44 0f       	add	r20, r20
    59a2:	55 1f       	adc	r21, r21
    59a4:	44 0f       	add	r20, r20
    59a6:	55 1f       	adc	r21, r21
    59a8:	84 0f       	add	r24, r20
    59aa:	95 1f       	adc	r25, r21
    59ac:	28 0f       	add	r18, r24
    59ae:	39 1f       	adc	r19, r25
    59b0:	8a 81       	ldd	r24, Y+2	; 0x02
    59b2:	9b 81       	ldd	r25, Y+3	; 0x03
    59b4:	03 96       	adiw	r24, 0x03	; 3
    59b6:	4b ad       	ldd	r20, Y+59	; 0x3b
    59b8:	5c ad       	ldd	r21, Y+60	; 0x3c
    59ba:	84 0f       	add	r24, r20
    59bc:	95 1f       	adc	r25, r21
    59be:	fc 01       	movw	r30, r24
    59c0:	80 81       	ld	r24, Z
    59c2:	88 2f       	mov	r24, r24
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	c0 97       	sbiw	r24, 0x30	; 48
    59c8:	82 0f       	add	r24, r18
    59ca:	93 1f       	adc	r25, r19
    59cc:	8d a3       	std	Y+37, r24	; 0x25
    59ce:	9e a3       	std	Y+38, r25	; 0x26
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    59d0:	8a 81       	ldd	r24, Y+2	; 0x02
    59d2:	9b 81       	ldd	r25, Y+3	; 0x03
    59d4:	04 96       	adiw	r24, 0x04	; 4
    59d6:	2b ad       	ldd	r18, Y+59	; 0x3b
    59d8:	3c ad       	ldd	r19, Y+60	; 0x3c
    59da:	82 0f       	add	r24, r18
    59dc:	93 1f       	adc	r25, r19
    59de:	fc 01       	movw	r30, r24
    59e0:	80 81       	ld	r24, Z
    59e2:	88 2f       	mov	r24, r24
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	c0 97       	sbiw	r24, 0x30	; 48
    59e8:	09 2e       	mov	r0, r25
    59ea:	00 0c       	add	r0, r0
    59ec:	aa 0b       	sbc	r26, r26
    59ee:	bb 0b       	sbc	r27, r27
    59f0:	9c 01       	movw	r18, r24
    59f2:	ad 01       	movw	r20, r26
    59f4:	60 ea       	ldi	r22, 0xA0	; 160
    59f6:	76 e8       	ldi	r23, 0x86	; 134
    59f8:	81 e0       	ldi	r24, 0x01	; 1
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	0e 94 54 59 	call	0xb2a8	; 0xb2a8 <__mulsi3>
    5a00:	7b 01       	movw	r14, r22
    5a02:	8c 01       	movw	r16, r24
					+ 10000l*(NMEA_sentence[a+5] - '0')
    5a04:	8a 81       	ldd	r24, Y+2	; 0x02
    5a06:	9b 81       	ldd	r25, Y+3	; 0x03
    5a08:	05 96       	adiw	r24, 0x05	; 5
    5a0a:	2b ad       	ldd	r18, Y+59	; 0x3b
    5a0c:	3c ad       	ldd	r19, Y+60	; 0x3c
    5a0e:	82 0f       	add	r24, r18
    5a10:	93 1f       	adc	r25, r19
    5a12:	fc 01       	movw	r30, r24
    5a14:	80 81       	ld	r24, Z
    5a16:	88 2f       	mov	r24, r24
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	c0 97       	sbiw	r24, 0x30	; 48
    5a1c:	9c 01       	movw	r18, r24
    5a1e:	99 0f       	add	r25, r25
    5a20:	44 0b       	sbc	r20, r20
    5a22:	55 0b       	sbc	r21, r21
    5a24:	80 e1       	ldi	r24, 0x10	; 16
    5a26:	97 e2       	ldi	r25, 0x27	; 39
    5a28:	dc 01       	movw	r26, r24
    5a2a:	0e 94 be 59 	call	0xb37c	; 0xb37c <__muluhisi3>
    5a2e:	dc 01       	movw	r26, r24
    5a30:	cb 01       	movw	r24, r22
    5a32:	e8 0e       	add	r14, r24
    5a34:	f9 1e       	adc	r15, r25
    5a36:	0a 1f       	adc	r16, r26
    5a38:	1b 1f       	adc	r17, r27
					+ 1000l*(NMEA_sentence[a+7] - '0')
    5a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5a3e:	07 96       	adiw	r24, 0x07	; 7
    5a40:	2b ad       	ldd	r18, Y+59	; 0x3b
    5a42:	3c ad       	ldd	r19, Y+60	; 0x3c
    5a44:	82 0f       	add	r24, r18
    5a46:	93 1f       	adc	r25, r19
    5a48:	fc 01       	movw	r30, r24
    5a4a:	80 81       	ld	r24, Z
    5a4c:	88 2f       	mov	r24, r24
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	c0 97       	sbiw	r24, 0x30	; 48
    5a52:	9c 01       	movw	r18, r24
    5a54:	99 0f       	add	r25, r25
    5a56:	44 0b       	sbc	r20, r20
    5a58:	55 0b       	sbc	r21, r21
    5a5a:	88 ee       	ldi	r24, 0xE8	; 232
    5a5c:	93 e0       	ldi	r25, 0x03	; 3
    5a5e:	dc 01       	movw	r26, r24
    5a60:	0e 94 be 59 	call	0xb37c	; 0xb37c <__muluhisi3>
    5a64:	dc 01       	movw	r26, r24
    5a66:	cb 01       	movw	r24, r22
    5a68:	e8 0e       	add	r14, r24
    5a6a:	f9 1e       	adc	r15, r25
    5a6c:	0a 1f       	adc	r16, r26
    5a6e:	1b 1f       	adc	r17, r27
					+ 100l*(NMEA_sentence[a+8] - '0')
    5a70:	8a 81       	ldd	r24, Y+2	; 0x02
    5a72:	9b 81       	ldd	r25, Y+3	; 0x03
    5a74:	08 96       	adiw	r24, 0x08	; 8
    5a76:	2b ad       	ldd	r18, Y+59	; 0x3b
    5a78:	3c ad       	ldd	r19, Y+60	; 0x3c
    5a7a:	82 0f       	add	r24, r18
    5a7c:	93 1f       	adc	r25, r19
    5a7e:	fc 01       	movw	r30, r24
    5a80:	80 81       	ld	r24, Z
    5a82:	88 2f       	mov	r24, r24
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	c0 97       	sbiw	r24, 0x30	; 48
    5a88:	9c 01       	movw	r18, r24
    5a8a:	99 0f       	add	r25, r25
    5a8c:	44 0b       	sbc	r20, r20
    5a8e:	55 0b       	sbc	r21, r21
    5a90:	84 e6       	ldi	r24, 0x64	; 100
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	dc 01       	movw	r26, r24
    5a96:	0e 94 be 59 	call	0xb37c	; 0xb37c <__muluhisi3>
    5a9a:	dc 01       	movw	r26, r24
    5a9c:	cb 01       	movw	r24, r22
    5a9e:	a8 01       	movw	r20, r16
    5aa0:	97 01       	movw	r18, r14
    5aa2:	28 0f       	add	r18, r24
    5aa4:	39 1f       	adc	r19, r25
    5aa6:	4a 1f       	adc	r20, r26
    5aa8:	5b 1f       	adc	r21, r27
					+ 10l*(NMEA_sentence[a+9] - '0')
    5aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    5aac:	9b 81       	ldd	r25, Y+3	; 0x03
    5aae:	09 96       	adiw	r24, 0x09	; 9
    5ab0:	6b ad       	ldd	r22, Y+59	; 0x3b
    5ab2:	7c ad       	ldd	r23, Y+60	; 0x3c
    5ab4:	86 0f       	add	r24, r22
    5ab6:	97 1f       	adc	r25, r23
    5ab8:	fc 01       	movw	r30, r24
    5aba:	80 81       	ld	r24, Z
    5abc:	88 2f       	mov	r24, r24
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	c0 97       	sbiw	r24, 0x30	; 48
    5ac2:	09 2e       	mov	r0, r25
    5ac4:	00 0c       	add	r0, r0
    5ac6:	aa 0b       	sbc	r26, r26
    5ac8:	bb 0b       	sbc	r27, r27
    5aca:	88 0f       	add	r24, r24
    5acc:	99 1f       	adc	r25, r25
    5ace:	aa 1f       	adc	r26, r26
    5ad0:	bb 1f       	adc	r27, r27
    5ad2:	7c 01       	movw	r14, r24
    5ad4:	8d 01       	movw	r16, r26
    5ad6:	ee 0c       	add	r14, r14
    5ad8:	ff 1c       	adc	r15, r15
    5ada:	00 1f       	adc	r16, r16
    5adc:	11 1f       	adc	r17, r17
    5ade:	ee 0c       	add	r14, r14
    5ae0:	ff 1c       	adc	r15, r15
    5ae2:	00 1f       	adc	r16, r16
    5ae4:	11 1f       	adc	r17, r17
    5ae6:	8e 0d       	add	r24, r14
    5ae8:	9f 1d       	adc	r25, r15
    5aea:	a0 1f       	adc	r26, r16
    5aec:	b1 1f       	adc	r27, r17
    5aee:	28 0f       	add	r18, r24
    5af0:	39 1f       	adc	r19, r25
    5af2:	4a 1f       	adc	r20, r26
    5af4:	5b 1f       	adc	r21, r27
					+ (NMEA_sentence[a+10] - '0');
    5af6:	8a 81       	ldd	r24, Y+2	; 0x02
    5af8:	9b 81       	ldd	r25, Y+3	; 0x03
    5afa:	0a 96       	adiw	r24, 0x0a	; 10
    5afc:	6b ad       	ldd	r22, Y+59	; 0x3b
    5afe:	7c ad       	ldd	r23, Y+60	; 0x3c
    5b00:	86 0f       	add	r24, r22
    5b02:	97 1f       	adc	r25, r23
    5b04:	fc 01       	movw	r30, r24
    5b06:	80 81       	ld	r24, Z
    5b08:	88 2f       	mov	r24, r24
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	c0 97       	sbiw	r24, 0x30	; 48
    5b0e:	09 2e       	mov	r0, r25
    5b10:	00 0c       	add	r0, r0
    5b12:	aa 0b       	sbc	r26, r26
    5b14:	bb 0b       	sbc	r27, r27
    5b16:	82 0f       	add	r24, r18
    5b18:	93 1f       	adc	r25, r19
    5b1a:	a4 1f       	adc	r26, r20
    5b1c:	b5 1f       	adc	r27, r21
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    5b1e:	8f a3       	std	Y+39, r24	; 0x27
    5b20:	98 a7       	std	Y+40, r25	; 0x28
    5b22:	a9 a7       	std	Y+41, r26	; 0x29
    5b24:	ba a7       	std	Y+42, r27	; 0x2a
					+ 1000l*(NMEA_sentence[a+7] - '0')
					+ 100l*(NMEA_sentence[a+8] - '0')
					+ 10l*(NMEA_sentence[a+9] - '0')
					+ (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    5b26:	8a 81       	ldd	r24, Y+2	; 0x02
    5b28:	9b 81       	ldd	r25, Y+3	; 0x03
    5b2a:	0c 96       	adiw	r24, 0x0c	; 12
    5b2c:	2b ad       	ldd	r18, Y+59	; 0x3b
    5b2e:	3c ad       	ldd	r19, Y+60	; 0x3c
    5b30:	82 0f       	add	r24, r18
    5b32:	93 1f       	adc	r25, r19
    5b34:	fc 01       	movw	r30, r24
    5b36:	80 81       	ld	r24, Z
    5b38:	85 34       	cpi	r24, 0x45	; 69
    5b3a:	49 f4       	brne	.+18     	; 0x5b4e <getGPSDatafromNMEA+0x5c0>
    5b3c:	0f 2e       	mov	r0, r31
    5b3e:	c1 2c       	mov	r12, r1
    5b40:	d1 2c       	mov	r13, r1
    5b42:	f0 e8       	ldi	r31, 0x80	; 128
    5b44:	ef 2e       	mov	r14, r31
    5b46:	ff e3       	ldi	r31, 0x3F	; 63
    5b48:	ff 2e       	mov	r15, r31
    5b4a:	f0 2d       	mov	r31, r0
    5b4c:	08 c0       	rjmp	.+16     	; 0x5b5e <getGPSDatafromNMEA+0x5d0>
    5b4e:	0f 2e       	mov	r0, r31
    5b50:	c1 2c       	mov	r12, r1
    5b52:	d1 2c       	mov	r13, r1
    5b54:	f0 e8       	ldi	r31, 0x80	; 128
    5b56:	ef 2e       	mov	r14, r31
    5b58:	ff eb       	ldi	r31, 0xBF	; 191
    5b5a:	ff 2e       	mov	r15, r31
    5b5c:	f0 2d       	mov	r31, r0
    5b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    5b60:	9e a1       	ldd	r25, Y+38	; 0x26
    5b62:	cc 01       	movw	r24, r24
    5b64:	a0 e0       	ldi	r26, 0x00	; 0
    5b66:	b0 e0       	ldi	r27, 0x00	; 0
    5b68:	bc 01       	movw	r22, r24
    5b6a:	cd 01       	movw	r24, r26
    5b6c:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    5b70:	4b 01       	movw	r8, r22
    5b72:	5c 01       	movw	r10, r24
    5b74:	8f a1       	ldd	r24, Y+39	; 0x27
    5b76:	98 a5       	ldd	r25, Y+40	; 0x28
    5b78:	a9 a5       	ldd	r26, Y+41	; 0x29
    5b7a:	ba a5       	ldd	r27, Y+42	; 0x2a
    5b7c:	bc 01       	movw	r22, r24
    5b7e:	cd 01       	movw	r24, r26
    5b80:	0e 94 f2 53 	call	0xa7e4	; 0xa7e4 <__floatunsisf>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	20 e0       	ldi	r18, 0x00	; 0
    5b8a:	3c e7       	ldi	r19, 0x7C	; 124
    5b8c:	42 e1       	ldi	r20, 0x12	; 18
    5b8e:	59 e4       	ldi	r21, 0x49	; 73
    5b90:	bc 01       	movw	r22, r24
    5b92:	cd 01       	movw	r24, r26
    5b94:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    5b98:	dc 01       	movw	r26, r24
    5b9a:	cb 01       	movw	r24, r22
    5b9c:	9c 01       	movw	r18, r24
    5b9e:	ad 01       	movw	r20, r26
    5ba0:	c5 01       	movw	r24, r10
    5ba2:	b4 01       	movw	r22, r8
    5ba4:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    5ba8:	dc 01       	movw	r26, r24
    5baa:	cb 01       	movw	r24, r22
    5bac:	9c 01       	movw	r18, r24
    5bae:	ad 01       	movw	r20, r26
    5bb0:	c7 01       	movw	r24, r14
    5bb2:	b6 01       	movw	r22, r12
    5bb4:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    5bb8:	dc 01       	movw	r26, r24
    5bba:	cb 01       	movw	r24, r22
    5bbc:	8c a7       	std	Y+44, r24	; 0x2c
    5bbe:	9d a7       	std	Y+45, r25	; 0x2d
    5bc0:	ae a7       	std	Y+46, r26	; 0x2e
    5bc2:	bf a7       	std	Y+47, r27	; 0x2f
    5bc4:	ce c0       	rjmp	.+412    	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
    5bc6:	89 81       	ldd	r24, Y+1	; 0x01
    5bc8:	84 30       	cpi	r24, 0x04	; 4
    5bca:	29 f4       	brne	.+10     	; 0x5bd6 <getGPSDatafromNMEA+0x648>
				{
					GPSData.londecimal = 0.0;
    5bcc:	1c a6       	std	Y+44, r1	; 0x2c
    5bce:	1d a6       	std	Y+45, r1	; 0x2d
    5bd0:	1e a6       	std	Y+46, r1	; 0x2e
    5bd2:	1f a6       	std	Y+47, r1	; 0x2f
    5bd4:	c6 c0       	rjmp	.+396    	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 6)
    5bd6:	89 81       	ldd	r24, Y+1	; 0x01
    5bd8:	86 30       	cpi	r24, 0x06	; 6
    5bda:	61 f4       	brne	.+24     	; 0x5bf4 <getGPSDatafromNMEA+0x666>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    5bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    5bde:	9b 81       	ldd	r25, Y+3	; 0x03
    5be0:	01 96       	adiw	r24, 0x01	; 1
    5be2:	2b ad       	ldd	r18, Y+59	; 0x3b
    5be4:	3c ad       	ldd	r19, Y+60	; 0x3c
    5be6:	82 0f       	add	r24, r18
    5be8:	93 1f       	adc	r25, r19
    5bea:	fc 01       	movw	r30, r24
    5bec:	80 81       	ld	r24, Z
    5bee:	80 53       	subi	r24, 0x30	; 48
    5bf0:	8f ab       	std	Y+55, r24	; 0x37
    5bf2:	b7 c0       	rjmp	.+366    	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 7)
    5bf4:	89 81       	ldd	r24, Y+1	; 0x01
    5bf6:	87 30       	cpi	r24, 0x07	; 7
    5bf8:	09 f4       	brne	.+2      	; 0x5bfc <getGPSDatafromNMEA+0x66e>
    5bfa:	b3 c0       	rjmp	.+358    	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
				{
					
					
				}
				else if (countcommas == 9)
    5bfc:	89 81       	ldd	r24, Y+1	; 0x01
    5bfe:	89 30       	cpi	r24, 0x09	; 9
    5c00:	09 f0       	breq	.+2      	; 0x5c04 <getGPSDatafromNMEA+0x676>
    5c02:	af c0       	rjmp	.+350    	; 0x5d62 <getGPSDatafromNMEA+0x7d4>
				{
					uint8_t period_reached = 0;
    5c04:	1c 82       	std	Y+4, r1	; 0x04
					uint8_t period_counter;
					float altitude = 0;
    5c06:	1e 82       	std	Y+6, r1	; 0x06
    5c08:	1f 82       	std	Y+7, r1	; 0x07
    5c0a:	18 86       	std	Y+8, r1	; 0x08
    5c0c:	19 86       	std	Y+9, r1	; 0x09
					uint8_t inc = 0;
    5c0e:	1a 86       	std	Y+10, r1	; 0x0a
					while (NMEA_sentence[a + inc + 1] != ',')
    5c10:	8f c0       	rjmp	.+286    	; 0x5d30 <getGPSDatafromNMEA+0x7a2>
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    5c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c14:	28 2f       	mov	r18, r24
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	8a 81       	ldd	r24, Y+2	; 0x02
    5c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c1c:	82 0f       	add	r24, r18
    5c1e:	93 1f       	adc	r25, r19
    5c20:	01 96       	adiw	r24, 0x01	; 1
    5c22:	2b ad       	ldd	r18, Y+59	; 0x3b
    5c24:	3c ad       	ldd	r19, Y+60	; 0x3c
    5c26:	82 0f       	add	r24, r18
    5c28:	93 1f       	adc	r25, r19
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	80 81       	ld	r24, Z
    5c2e:	8e 32       	cpi	r24, 0x2E	; 46
    5c30:	29 f4       	brne	.+10     	; 0x5c3c <getGPSDatafromNMEA+0x6ae>
						{
							period_reached = 1;
    5c32:	81 e0       	ldi	r24, 0x01	; 1
    5c34:	8c 83       	std	Y+4, r24	; 0x04
							period_counter = 1;
    5c36:	81 e0       	ldi	r24, 0x01	; 1
    5c38:	8d 83       	std	Y+5, r24	; 0x05
    5c3a:	77 c0       	rjmp	.+238    	; 0x5d2a <getGPSDatafromNMEA+0x79c>
						}
						else if (!period_reached)
    5c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c3e:	88 23       	and	r24, r24
    5c40:	d1 f5       	brne	.+116    	; 0x5cb6 <getGPSDatafromNMEA+0x728>
						{
							altitude *= 10;
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	40 e2       	ldi	r20, 0x20	; 32
    5c48:	51 e4       	ldi	r21, 0x41	; 65
    5c4a:	6e 81       	ldd	r22, Y+6	; 0x06
    5c4c:	7f 81       	ldd	r23, Y+7	; 0x07
    5c4e:	88 85       	ldd	r24, Y+8	; 0x08
    5c50:	99 85       	ldd	r25, Y+9	; 0x09
    5c52:	0e 94 3b 55 	call	0xaa76	; 0xaa76 <__mulsf3>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	8e 83       	std	Y+6, r24	; 0x06
    5c5c:	9f 83       	std	Y+7, r25	; 0x07
    5c5e:	a8 87       	std	Y+8, r26	; 0x08
    5c60:	b9 87       	std	Y+9, r27	; 0x09
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    5c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c64:	28 2f       	mov	r18, r24
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	8a 81       	ldd	r24, Y+2	; 0x02
    5c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c6c:	82 0f       	add	r24, r18
    5c6e:	93 1f       	adc	r25, r19
    5c70:	01 96       	adiw	r24, 0x01	; 1
    5c72:	2b ad       	ldd	r18, Y+59	; 0x3b
    5c74:	3c ad       	ldd	r19, Y+60	; 0x3c
    5c76:	82 0f       	add	r24, r18
    5c78:	93 1f       	adc	r25, r19
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	80 81       	ld	r24, Z
    5c7e:	88 2f       	mov	r24, r24
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	c0 97       	sbiw	r24, 0x30	; 48
    5c84:	09 2e       	mov	r0, r25
    5c86:	00 0c       	add	r0, r0
    5c88:	aa 0b       	sbc	r26, r26
    5c8a:	bb 0b       	sbc	r27, r27
    5c8c:	bc 01       	movw	r22, r24
    5c8e:	cd 01       	movw	r24, r26
    5c90:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	9c 01       	movw	r18, r24
    5c9a:	ad 01       	movw	r20, r26
    5c9c:	6e 81       	ldd	r22, Y+6	; 0x06
    5c9e:	7f 81       	ldd	r23, Y+7	; 0x07
    5ca0:	88 85       	ldd	r24, Y+8	; 0x08
    5ca2:	99 85       	ldd	r25, Y+9	; 0x09
    5ca4:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    5ca8:	dc 01       	movw	r26, r24
    5caa:	cb 01       	movw	r24, r22
    5cac:	8e 83       	std	Y+6, r24	; 0x06
    5cae:	9f 83       	std	Y+7, r25	; 0x07
    5cb0:	a8 87       	std	Y+8, r26	; 0x08
    5cb2:	b9 87       	std	Y+9, r27	; 0x09
    5cb4:	3a c0       	rjmp	.+116    	; 0x5d2a <getGPSDatafromNMEA+0x79c>
						}
						else if (period_reached && period_counter == 1)
    5cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    5cb8:	88 23       	and	r24, r24
    5cba:	b9 f1       	breq	.+110    	; 0x5d2a <getGPSDatafromNMEA+0x79c>
    5cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    5cbe:	81 30       	cpi	r24, 0x01	; 1
    5cc0:	a1 f5       	brne	.+104    	; 0x5d2a <getGPSDatafromNMEA+0x79c>
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    5cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cc4:	28 2f       	mov	r18, r24
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cca:	9b 81       	ldd	r25, Y+3	; 0x03
    5ccc:	82 0f       	add	r24, r18
    5cce:	93 1f       	adc	r25, r19
    5cd0:	01 96       	adiw	r24, 0x01	; 1
    5cd2:	2b ad       	ldd	r18, Y+59	; 0x3b
    5cd4:	3c ad       	ldd	r19, Y+60	; 0x3c
    5cd6:	82 0f       	add	r24, r18
    5cd8:	93 1f       	adc	r25, r19
    5cda:	fc 01       	movw	r30, r24
    5cdc:	80 81       	ld	r24, Z
    5cde:	88 2f       	mov	r24, r24
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	c0 97       	sbiw	r24, 0x30	; 48
    5ce4:	09 2e       	mov	r0, r25
    5ce6:	00 0c       	add	r0, r0
    5ce8:	aa 0b       	sbc	r26, r26
    5cea:	bb 0b       	sbc	r27, r27
    5cec:	bc 01       	movw	r22, r24
    5cee:	cd 01       	movw	r24, r26
    5cf0:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <__floatsisf>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	40 e2       	ldi	r20, 0x20	; 32
    5cfe:	51 e4       	ldi	r21, 0x41	; 65
    5d00:	bc 01       	movw	r22, r24
    5d02:	cd 01       	movw	r24, r26
    5d04:	0e 94 1f 53 	call	0xa63e	; 0xa63e <__divsf3>
    5d08:	dc 01       	movw	r26, r24
    5d0a:	cb 01       	movw	r24, r22
    5d0c:	9c 01       	movw	r18, r24
    5d0e:	ad 01       	movw	r20, r26
    5d10:	6e 81       	ldd	r22, Y+6	; 0x06
    5d12:	7f 81       	ldd	r23, Y+7	; 0x07
    5d14:	88 85       	ldd	r24, Y+8	; 0x08
    5d16:	99 85       	ldd	r25, Y+9	; 0x09
    5d18:	0e 94 b7 52 	call	0xa56e	; 0xa56e <__addsf3>
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	cb 01       	movw	r24, r22
    5d20:	8e 83       	std	Y+6, r24	; 0x06
    5d22:	9f 83       	std	Y+7, r25	; 0x07
    5d24:	a8 87       	std	Y+8, r26	; 0x08
    5d26:	b9 87       	std	Y+9, r27	; 0x09
							break;
    5d28:	14 c0       	rjmp	.+40     	; 0x5d52 <getGPSDatafromNMEA+0x7c4>
						}
						
						inc++;
    5d2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d2c:	8f 5f       	subi	r24, 0xFF	; 255
    5d2e:	8a 87       	std	Y+10, r24	; 0x0a
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    5d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d32:	28 2f       	mov	r18, r24
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	8a 81       	ldd	r24, Y+2	; 0x02
    5d38:	9b 81       	ldd	r25, Y+3	; 0x03
    5d3a:	82 0f       	add	r24, r18
    5d3c:	93 1f       	adc	r25, r19
    5d3e:	01 96       	adiw	r24, 0x01	; 1
    5d40:	2b ad       	ldd	r18, Y+59	; 0x3b
    5d42:	3c ad       	ldd	r19, Y+60	; 0x3c
    5d44:	82 0f       	add	r24, r18
    5d46:	93 1f       	adc	r25, r19
    5d48:	fc 01       	movw	r30, r24
    5d4a:	80 81       	ld	r24, Z
    5d4c:	8c 32       	cpi	r24, 0x2C	; 44
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <getGPSDatafromNMEA+0x7c4>
    5d50:	60 cf       	rjmp	.-320    	; 0x5c12 <getGPSDatafromNMEA+0x684>
							break;
						}
						
						inc++;
					}
					GPSData.altitude = altitude;
    5d52:	8e 81       	ldd	r24, Y+6	; 0x06
    5d54:	9f 81       	ldd	r25, Y+7	; 0x07
    5d56:	a8 85       	ldd	r26, Y+8	; 0x08
    5d58:	b9 85       	ldd	r27, Y+9	; 0x09
    5d5a:	88 ab       	std	Y+48, r24	; 0x30
    5d5c:	99 ab       	std	Y+49, r25	; 0x31
    5d5e:	aa ab       	std	Y+50, r26	; 0x32
    5d60:	bb ab       	std	Y+51, r27	; 0x33
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    5d62:	8a 81       	ldd	r24, Y+2	; 0x02
    5d64:	9b 81       	ldd	r25, Y+3	; 0x03
    5d66:	01 96       	adiw	r24, 0x01	; 1
    5d68:	8a 83       	std	Y+2, r24	; 0x02
    5d6a:	9b 83       	std	Y+3, r25	; 0x03
    5d6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d6e:	28 2f       	mov	r18, r24
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	8a 81       	ldd	r24, Y+2	; 0x02
    5d74:	9b 81       	ldd	r25, Y+3	; 0x03
    5d76:	82 17       	cp	r24, r18
    5d78:	93 07       	cpc	r25, r19
    5d7a:	0c f4       	brge	.+2      	; 0x5d7e <getGPSDatafromNMEA+0x7f0>
    5d7c:	3b cc       	rjmp	.-1930   	; 0x55f4 <getGPSDatafromNMEA+0x66>
					//printf("Altitudes!\n");
				}
			}
			
		}
		current_sentence = SENTENCE_NONE;
    5d7e:	10 92 dd 26 	sts	0x26DD, r1	; 0x8026dd <current_sentence>
	
	
	
	//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
	//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
	return GPSData;
    5d82:	89 ad       	ldd	r24, Y+57	; 0x39
    5d84:	9a ad       	ldd	r25, Y+58	; 0x3a
    5d86:	2f e1       	ldi	r18, 0x1F	; 31
    5d88:	fe 01       	movw	r30, r28
    5d8a:	7a 96       	adiw	r30, 0x1a	; 26
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	01 90       	ld	r0, Z+
    5d90:	0d 92       	st	X+, r0
    5d92:	2a 95       	dec	r18
    5d94:	e1 f7       	brne	.-8      	; 0x5d8e <getGPSDatafromNMEA+0x800>


}
    5d96:	89 ad       	ldd	r24, Y+57	; 0x39
    5d98:	9a ad       	ldd	r25, Y+58	; 0x3a
    5d9a:	ed 96       	adiw	r28, 0x3d	; 61
    5d9c:	cd bf       	out	0x3d, r28	; 61
    5d9e:	de bf       	out	0x3e, r29	; 62
    5da0:	df 91       	pop	r29
    5da2:	cf 91       	pop	r28
    5da4:	1f 91       	pop	r17
    5da6:	0f 91       	pop	r16
    5da8:	ff 90       	pop	r15
    5daa:	ef 90       	pop	r14
    5dac:	df 90       	pop	r13
    5dae:	cf 90       	pop	r12
    5db0:	bf 90       	pop	r11
    5db2:	af 90       	pop	r10
    5db4:	9f 90       	pop	r9
    5db6:	8f 90       	pop	r8
    5db8:	08 95       	ret

00005dba <newOLogInit>:
#include "uart.h"
static uart_device openLog;


void newOLogInit()//initializes the openLog uart communication interface
{
    5dba:	cf 93       	push	r28
    5dbc:	df 93       	push	r29
    5dbe:	cd b7       	in	r28, 0x3d	; 61
    5dc0:	de b7       	in	r29, 0x3e	; 62
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	92 ec       	ldi	r25, 0xC2	; 194
    5dc6:	a1 e0       	ldi	r26, 0x01	; 1
    5dc8:	b0 e0       	ldi	r27, 0x00	; 0
    5dca:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <openLog+0x6>
    5dce:	90 93 b1 22 	sts	0x22B1, r25	; 0x8022b1 <openLog+0x7>
    5dd2:	a0 93 b2 22 	sts	0x22B2, r26	; 0x8022b2 <openLog+0x8>
    5dd6:	b0 93 b3 22 	sts	0x22B3, r27	; 0x8022b3 <openLog+0x9>
    openLog.Port=P_OPENLOG_PORT;
    5dda:	80 e4       	ldi	r24, 0x40	; 64
    5ddc:	96 e0       	ldi	r25, 0x06	; 6
    5dde:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <openLog>
    5de2:	90 93 ab 22 	sts	0x22AB, r25	; 0x8022ab <openLog+0x1>
	openLog.Usart=P_OPENLOG_UART;
    5de6:	80 ea       	ldi	r24, 0xA0	; 160
    5de8:	98 e0       	ldi	r25, 0x08	; 8
    5dea:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <openLog+0x2>
    5dee:	90 93 ad 22 	sts	0x22AD, r25	; 0x8022ad <openLog+0x3>
	openLog.tx=OPENLOG_TX_PIN;
    5df2:	88 e0       	ldi	r24, 0x08	; 8
    5df4:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <openLog+0x5>
	openLog.rx=OPENLOG_RX_PIN;
    5df8:	84 e0       	ldi	r24, 0x04	; 4
    5dfa:	80 93 ae 22 	sts	0x22AE, r24	; 0x8022ae <openLog+0x4>
	uart_init(&openLog);//function that initializes uart
    5dfe:	8a ea       	ldi	r24, 0xAA	; 170
    5e00:	92 e2       	ldi	r25, 0x22	; 34
    5e02:	0e 94 30 4d 	call	0x9a60	; 0x9a60 <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n");
    5e06:	85 e1       	ldi	r24, 0x15	; 21
    5e08:	92 e2       	ldi	r25, 0x22	; 34
    5e0a:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
}
    5e0e:	00 00       	nop
    5e10:	df 91       	pop	r29
    5e12:	cf 91       	pop	r28
    5e14:	08 95       	ret

00005e16 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    5e16:	cf 93       	push	r28
    5e18:	df 93       	push	r29
    5e1a:	1f 92       	push	r1
    5e1c:	cd b7       	in	r28, 0x3d	; 61
    5e1e:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    5e20:	8f e3       	ldi	r24, 0x3F	; 63
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	fc 01       	movw	r30, r24
    5e26:	80 81       	ld	r24, Z
    5e28:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5e2a:	f8 94       	cli
	return flags;
    5e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5e2e:	0f 90       	pop	r0
    5e30:	df 91       	pop	r29
    5e32:	cf 91       	pop	r28
    5e34:	08 95       	ret

00005e36 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5e36:	cf 93       	push	r28
    5e38:	df 93       	push	r29
    5e3a:	1f 92       	push	r1
    5e3c:	cd b7       	in	r28, 0x3d	; 61
    5e3e:	de b7       	in	r29, 0x3e	; 62
    5e40:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    5e42:	8f e3       	ldi	r24, 0x3F	; 63
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	29 81       	ldd	r18, Y+1	; 0x01
    5e48:	fc 01       	movw	r30, r24
    5e4a:	20 83       	st	Z, r18
}
    5e4c:	00 00       	nop
    5e4e:	0f 90       	pop	r0
    5e50:	df 91       	pop	r29
    5e52:	cf 91       	pop	r28
    5e54:	08 95       	ret

00005e56 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    5e56:	cf 93       	push	r28
    5e58:	df 93       	push	r29
    5e5a:	1f 92       	push	r1
    5e5c:	1f 92       	push	r1
    5e5e:	cd b7       	in	r28, 0x3d	; 61
    5e60:	de b7       	in	r29, 0x3e	; 62
    5e62:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    5e64:	d8 df       	rcall	.-80     	; 0x5e16 <cpu_irq_save>
    5e66:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    5e68:	80 e5       	ldi	r24, 0x50	; 80
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	20 e5       	ldi	r18, 0x50	; 80
    5e6e:	30 e0       	ldi	r19, 0x00	; 0
    5e70:	f9 01       	movw	r30, r18
    5e72:	30 81       	ld	r19, Z
    5e74:	2a 81       	ldd	r18, Y+2	; 0x02
    5e76:	23 2b       	or	r18, r19
    5e78:	fc 01       	movw	r30, r24
    5e7a:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    5e7c:	89 81       	ldd	r24, Y+1	; 0x01
    5e7e:	db df       	rcall	.-74     	; 0x5e36 <cpu_irq_restore>
}
    5e80:	00 00       	nop
    5e82:	0f 90       	pop	r0
    5e84:	0f 90       	pop	r0
    5e86:	df 91       	pop	r29
    5e88:	cf 91       	pop	r28
    5e8a:	08 95       	ret

00005e8c <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    5e8c:	cf 93       	push	r28
    5e8e:	df 93       	push	r29
    5e90:	1f 92       	push	r1
    5e92:	1f 92       	push	r1
    5e94:	cd b7       	in	r28, 0x3d	; 61
    5e96:	de b7       	in	r29, 0x3e	; 62
    5e98:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    5e9a:	80 e5       	ldi	r24, 0x50	; 80
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	22 e0       	ldi	r18, 0x02	; 2
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    5ea4:	b8 df       	rcall	.-144    	; 0x5e16 <cpu_irq_save>
    5ea6:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    5ea8:	80 e5       	ldi	r24, 0x50	; 80
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	20 e5       	ldi	r18, 0x50	; 80
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	f9 01       	movw	r30, r18
    5eb2:	30 81       	ld	r19, Z
    5eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    5eb6:	23 2b       	or	r18, r19
    5eb8:	fc 01       	movw	r30, r24
    5eba:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5ebc:	89 81       	ldd	r24, Y+1	; 0x01
    5ebe:	bb df       	rcall	.-138    	; 0x5e36 <cpu_irq_restore>
}
    5ec0:	00 00       	nop
    5ec2:	0f 90       	pop	r0
    5ec4:	0f 90       	pop	r0
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	08 95       	ret

00005ecc <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	1f 92       	push	r1
    5ed2:	1f 92       	push	r1
    5ed4:	cd b7       	in	r28, 0x3d	; 61
    5ed6:	de b7       	in	r29, 0x3e	; 62
    5ed8:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    5eda:	9d df       	rcall	.-198    	; 0x5e16 <cpu_irq_save>
    5edc:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    5ede:	80 e5       	ldi	r24, 0x50	; 80
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	20 e5       	ldi	r18, 0x50	; 80
    5ee4:	30 e0       	ldi	r19, 0x00	; 0
    5ee6:	f9 01       	movw	r30, r18
    5ee8:	20 81       	ld	r18, Z
    5eea:	32 2f       	mov	r19, r18
    5eec:	2a 81       	ldd	r18, Y+2	; 0x02
    5eee:	20 95       	com	r18
    5ef0:	23 23       	and	r18, r19
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5ef6:	89 81       	ldd	r24, Y+1	; 0x01
    5ef8:	9e df       	rcall	.-196    	; 0x5e36 <cpu_irq_restore>
}
    5efa:	00 00       	nop
    5efc:	0f 90       	pop	r0
    5efe:	0f 90       	pop	r0
    5f00:	df 91       	pop	r29
    5f02:	cf 91       	pop	r28
    5f04:	08 95       	ret

00005f06 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    5f06:	cf 93       	push	r28
    5f08:	df 93       	push	r29
    5f0a:	1f 92       	push	r1
    5f0c:	cd b7       	in	r28, 0x3d	; 61
    5f0e:	de b7       	in	r29, 0x3e	; 62
    5f10:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    5f12:	89 81       	ldd	r24, Y+1	; 0x01
    5f14:	88 30       	cpi	r24, 0x08	; 8
    5f16:	19 f0       	breq	.+6      	; 0x5f1e <osc_enable+0x18>
		osc_enable_internal(id);
    5f18:	89 81       	ldd	r24, Y+1	; 0x01
    5f1a:	9d df       	rcall	.-198    	; 0x5e56 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    5f1c:	02 c0       	rjmp	.+4      	; 0x5f22 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    5f1e:	89 81       	ldd	r24, Y+1	; 0x01
    5f20:	b5 df       	rcall	.-150    	; 0x5e8c <osc_enable_external>
	}
}
    5f22:	00 00       	nop
    5f24:	0f 90       	pop	r0
    5f26:	df 91       	pop	r29
    5f28:	cf 91       	pop	r28
    5f2a:	08 95       	ret

00005f2c <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	1f 92       	push	r1
    5f32:	cd b7       	in	r28, 0x3d	; 61
    5f34:	de b7       	in	r29, 0x3e	; 62
    5f36:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5f38:	80 e5       	ldi	r24, 0x50	; 80
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	fc 01       	movw	r30, r24
    5f3e:	91 81       	ldd	r25, Z+1	; 0x01
    5f40:	89 81       	ldd	r24, Y+1	; 0x01
    5f42:	98 23       	and	r25, r24
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	99 23       	and	r25, r25
    5f48:	09 f4       	brne	.+2      	; 0x5f4c <osc_is_ready+0x20>
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
}
    5f4c:	0f 90       	pop	r0
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	08 95       	ret

00005f54 <osc_user_calibration>:
 * \arg \c OSC_ID_RC2MHZ or \c OSC_ID_RC32MHZ.
 * \param calib The specific calibration value required:
 *
 */
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
    5f54:	cf 93       	push	r28
    5f56:	df 93       	push	r29
    5f58:	00 d0       	rcall	.+0      	; 0x5f5a <osc_user_calibration+0x6>
    5f5a:	cd b7       	in	r28, 0x3d	; 61
    5f5c:	de b7       	in	r29, 0x3e	; 62
    5f5e:	89 83       	std	Y+1, r24	; 0x01
    5f60:	6a 83       	std	Y+2, r22	; 0x02
    5f62:	7b 83       	std	Y+3, r23	; 0x03
	switch (id) {
    5f64:	89 81       	ldd	r24, Y+1	; 0x01
    5f66:	88 2f       	mov	r24, r24
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	81 30       	cpi	r24, 0x01	; 1
    5f6c:	91 05       	cpc	r25, r1
    5f6e:	19 f0       	breq	.+6      	; 0x5f76 <osc_user_calibration+0x22>
    5f70:	02 97       	sbiw	r24, 0x02	; 2
    5f72:	81 f0       	breq	.+32     	; 0x5f94 <osc_user_calibration+0x40>
		break;
#endif

	default:
		Assert(false);
		break;
    5f74:	1e c0       	rjmp	.+60     	; 0x5fb2 <osc_user_calibration+0x5e>
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
	switch (id) {
	case OSC_ID_RC2MHZ:
#if !XMEGA_E
		DFLLRC2M.CALA=LSB(calib);
    5f76:	88 e6       	ldi	r24, 0x68	; 104
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	9e 01       	movw	r18, r28
    5f7c:	2e 5f       	subi	r18, 0xFE	; 254
    5f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f80:	f9 01       	movw	r30, r18
    5f82:	20 81       	ld	r18, Z
    5f84:	fc 01       	movw	r30, r24
    5f86:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC2M.CALB=MSB(calib);
    5f88:	88 e6       	ldi	r24, 0x68	; 104
    5f8a:	90 e0       	ldi	r25, 0x00	; 0
    5f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    5f8e:	fc 01       	movw	r30, r24
    5f90:	23 83       	std	Z+3, r18	; 0x03
#endif
		break;
    5f92:	0f c0       	rjmp	.+30     	; 0x5fb2 <osc_user_calibration+0x5e>

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    5f94:	80 e6       	ldi	r24, 0x60	; 96
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	9e 01       	movw	r18, r28
    5f9a:	2e 5f       	subi	r18, 0xFE	; 254
    5f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f9e:	f9 01       	movw	r30, r18
    5fa0:	20 81       	ld	r18, Z
    5fa2:	fc 01       	movw	r30, r24
    5fa4:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    5fa6:	80 e6       	ldi	r24, 0x60	; 96
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	2b 81       	ldd	r18, Y+3	; 0x03
    5fac:	fc 01       	movw	r30, r24
    5fae:	23 83       	std	Z+3, r18	; 0x03
		break;
    5fb0:	00 00       	nop

	default:
		Assert(false);
		break;
	}
}
    5fb2:	00 00       	nop
    5fb4:	23 96       	adiw	r28, 0x03	; 3
    5fb6:	cd bf       	out	0x3d, r28	; 61
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	df 91       	pop	r29
    5fbc:	cf 91       	pop	r28
    5fbe:	08 95       	ret

00005fc0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    5fc0:	cf 93       	push	r28
    5fc2:	df 93       	push	r29
    5fc4:	1f 92       	push	r1
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
    5fca:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    5fcc:	00 00       	nop
    5fce:	89 81       	ldd	r24, Y+1	; 0x01
    5fd0:	ad df       	rcall	.-166    	; 0x5f2c <osc_is_ready>
    5fd2:	98 2f       	mov	r25, r24
    5fd4:	81 e0       	ldi	r24, 0x01	; 1
    5fd6:	89 27       	eor	r24, r25
    5fd8:	88 23       	and	r24, r24
    5fda:	c9 f7       	brne	.-14     	; 0x5fce <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    5fdc:	00 00       	nop
    5fde:	0f 90       	pop	r0
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	08 95       	ret

00005fe6 <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
    5fea:	1f 92       	push	r1
    5fec:	cd b7       	in	r28, 0x3d	; 61
    5fee:	de b7       	in	r29, 0x3e	; 62
    5ff0:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    5ff2:	89 81       	ldd	r24, Y+1	; 0x01
    5ff4:	88 2f       	mov	r24, r24
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	8a 30       	cpi	r24, 0x0A	; 10
    5ffa:	91 05       	cpc	r25, r1
    5ffc:	a1 f0       	breq	.+40     	; 0x6026 <sysclk_rtcsrc_enable+0x40>
    5ffe:	8b 30       	cpi	r24, 0x0B	; 11
    6000:	91 05       	cpc	r25, r1
    6002:	34 f4       	brge	.+12     	; 0x6010 <sysclk_rtcsrc_enable+0x2a>
    6004:	82 30       	cpi	r24, 0x02	; 2
    6006:	91 05       	cpc	r25, r1
    6008:	71 f0       	breq	.+28     	; 0x6026 <sysclk_rtcsrc_enable+0x40>
    600a:	04 97       	sbiw	r24, 0x04	; 4
    600c:	39 f0       	breq	.+14     	; 0x601c <sysclk_rtcsrc_enable+0x36>
    600e:	10 c0       	rjmp	.+32     	; 0x6030 <sysclk_rtcsrc_enable+0x4a>
    6010:	8c 30       	cpi	r24, 0x0C	; 12
    6012:	91 05       	cpc	r25, r1
    6014:	19 f0       	breq	.+6      	; 0x601c <sysclk_rtcsrc_enable+0x36>
    6016:	0e 97       	sbiw	r24, 0x0e	; 14
    6018:	31 f0       	breq	.+12     	; 0x6026 <sysclk_rtcsrc_enable+0x40>
    601a:	0a c0       	rjmp	.+20     	; 0x6030 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    601c:	84 e0       	ldi	r24, 0x04	; 4
    601e:	73 df       	rcall	.-282    	; 0x5f06 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    6020:	84 e0       	ldi	r24, 0x04	; 4
    6022:	ce df       	rcall	.-100    	; 0x5fc0 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    6024:	05 c0       	rjmp	.+10     	; 0x6030 <sysclk_rtcsrc_enable+0x4a>
    6026:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    6028:	6e df       	rcall	.-292    	; 0x5f06 <osc_enable>
    602a:	88 e0       	ldi	r24, 0x08	; 8
    602c:	c9 df       	rcall	.-110    	; 0x5fc0 <osc_wait_ready>
		break;
    602e:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    6030:	80 e4       	ldi	r24, 0x40	; 64
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	29 81       	ldd	r18, Y+1	; 0x01
    6036:	21 60       	ori	r18, 0x01	; 1
    6038:	fc 01       	movw	r30, r24
    603a:	23 83       	std	Z+3, r18	; 0x03
}
    603c:	00 00       	nop
    603e:	0f 90       	pop	r0
    6040:	df 91       	pop	r29
    6042:	cf 91       	pop	r28
    6044:	08 95       	ret

00006046 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    6046:	cf 93       	push	r28
    6048:	df 93       	push	r29
    604a:	1f 92       	push	r1
    604c:	cd b7       	in	r28, 0x3d	; 61
    604e:	de b7       	in	r29, 0x3e	; 62
    6050:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    6052:	89 81       	ldd	r24, Y+1	; 0x01
    6054:	88 2f       	mov	r24, r24
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	bc 01       	movw	r22, r24
    605a:	82 e0       	ldi	r24, 0x02	; 2
    605c:	20 d1       	rcall	.+576    	; 0x629e <nvm_read_byte>
}
    605e:	0f 90       	pop	r0
    6060:	df 91       	pop	r29
    6062:	cf 91       	pop	r28
    6064:	08 95       	ret

00006066 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    6066:	0f 93       	push	r16
    6068:	1f 93       	push	r17
    606a:	cf 93       	push	r28
    606c:	df 93       	push	r29
    606e:	00 d0       	rcall	.+0      	; 0x6070 <sysclk_init+0xa>
    6070:	00 d0       	rcall	.+0      	; 0x6072 <sysclk_init+0xc>
    6072:	cd b7       	in	r28, 0x3d	; 61
    6074:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    6076:	80 e7       	ldi	r24, 0x70	; 112
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	89 83       	std	Y+1, r24	; 0x01
    607c:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    607e:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    6080:	1b 82       	std	Y+3, r1	; 0x03
    6082:	0d c0       	rjmp	.+26     	; 0x609e <sysclk_init+0x38>
		*(reg++) = 0xff;
    6084:	89 81       	ldd	r24, Y+1	; 0x01
    6086:	9a 81       	ldd	r25, Y+2	; 0x02
    6088:	9c 01       	movw	r18, r24
    608a:	2f 5f       	subi	r18, 0xFF	; 255
    608c:	3f 4f       	sbci	r19, 0xFF	; 255
    608e:	29 83       	std	Y+1, r18	; 0x01
    6090:	3a 83       	std	Y+2, r19	; 0x02
    6092:	2f ef       	ldi	r18, 0xFF	; 255
    6094:	fc 01       	movw	r30, r24
    6096:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    6098:	8b 81       	ldd	r24, Y+3	; 0x03
    609a:	8f 5f       	subi	r24, 0xFF	; 255
    609c:	8b 83       	std	Y+3, r24	; 0x03
    609e:	8b 81       	ldd	r24, Y+3	; 0x03
    60a0:	87 30       	cpi	r24, 0x07	; 7
    60a2:	80 f3       	brcs	.-32     	; 0x6084 <sysclk_init+0x1e>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    60a4:	8e 01       	movw	r16, r28
    60a6:	0b 5f       	subi	r16, 0xFB	; 251
    60a8:	1f 4f       	sbci	r17, 0xFF	; 255
    60aa:	0f 5f       	subi	r16, 0xFF	; 255
    60ac:	1f 4f       	sbci	r17, 0xFF	; 255
    60ae:	8c e1       	ldi	r24, 0x1C	; 28
    60b0:	ca df       	rcall	.-108    	; 0x6046 <nvm_read_production_signature_row>
    60b2:	f8 01       	movw	r30, r16
    60b4:	80 83       	st	Z, r24
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    60b6:	8e 01       	movw	r16, r28
    60b8:	0b 5f       	subi	r16, 0xFB	; 251
    60ba:	1f 4f       	sbci	r17, 0xFF	; 255
    60bc:	8d e1       	ldi	r24, 0x1D	; 29
    60be:	c3 df       	rcall	.-122    	; 0x6046 <nvm_read_production_signature_row>
    60c0:	f8 01       	movw	r30, r16
    60c2:	80 83       	st	Z, r24
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    60c4:	8d 81       	ldd	r24, Y+5	; 0x05
    60c6:	9e 81       	ldd	r25, Y+6	; 0x06
    60c8:	01 96       	adiw	r24, 0x01	; 1
    60ca:	21 f4       	brne	.+8      	; 0x60d4 <sysclk_init+0x6e>
		cal = 0x2340;
    60cc:	80 e4       	ldi	r24, 0x40	; 64
    60ce:	93 e2       	ldi	r25, 0x23	; 35
    60d0:	8d 83       	std	Y+5, r24	; 0x05
    60d2:	9e 83       	std	Y+6, r25	; 0x06
	}
	osc_user_calibration(OSC_ID_RC32MHZ,cal);
    60d4:	8d 81       	ldd	r24, Y+5	; 0x05
    60d6:	9e 81       	ldd	r25, Y+6	; 0x06
    60d8:	bc 01       	movw	r22, r24
    60da:	82 e0       	ldi	r24, 0x02	; 2
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    60dc:	3b df       	rcall	.-394    	; 0x5f54 <osc_user_calibration>
    60de:	82 e0       	ldi	r24, 0x02	; 2
			osc_wait_ready(OSC_ID_RC32MHZ);
    60e0:	12 df       	rcall	.-476    	; 0x5f06 <osc_enable>
    60e2:	82 e0       	ldi	r24, 0x02	; 2
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    60e4:	6d df       	rcall	.-294    	; 0x5fc0 <osc_wait_ready>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    60e6:	00 00       	nop
    60e8:	61 e0       	ldi	r22, 0x01	; 1
    60ea:	80 e4       	ldi	r24, 0x40	; 64
    60ec:	90 e0       	ldi	r25, 0x00	; 0
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    60ee:	d1 d0       	rcall	.+418    	; 0x6292 <ccp_write_io>
    60f0:	8c 81       	ldd	r24, Y+4	; 0x04
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    60f2:	88 23       	and	r24, r24
    60f4:	11 f4       	brne	.+4      	; 0x60fa <sysclk_init+0x94>
    60f6:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    60f8:	e9 de       	rcall	.-558    	; 0x5ecc <osc_disable>
    60fa:	80 e0       	ldi	r24, 0x00	; 0
    60fc:	74 df       	rcall	.-280    	; 0x5fe6 <sysclk_rtcsrc_enable>
#endif
}
    60fe:	26 96       	adiw	r28, 0x06	; 6
    6100:	cd bf       	out	0x3d, r28	; 61
    6102:	de bf       	out	0x3e, r29	; 62
    6104:	df 91       	pop	r29
    6106:	cf 91       	pop	r28
    6108:	1f 91       	pop	r17
    610a:	0f 91       	pop	r16
    610c:	08 95       	ret

0000610e <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    610e:	cf 93       	push	r28
    6110:	df 93       	push	r29
    6112:	00 d0       	rcall	.+0      	; 0x6114 <sysclk_enable_module+0x6>
    6114:	cd b7       	in	r28, 0x3d	; 61
    6116:	de b7       	in	r29, 0x3e	; 62
    6118:	8a 83       	std	Y+2, r24	; 0x02
    611a:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    611c:	7c de       	rcall	.-776    	; 0x5e16 <cpu_irq_save>
    611e:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    6120:	8a 81       	ldd	r24, Y+2	; 0x02
    6122:	88 2f       	mov	r24, r24
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	80 59       	subi	r24, 0x90	; 144
    6128:	9f 4f       	sbci	r25, 0xFF	; 255
    612a:	2a 81       	ldd	r18, Y+2	; 0x02
    612c:	22 2f       	mov	r18, r18
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	20 59       	subi	r18, 0x90	; 144
    6132:	3f 4f       	sbci	r19, 0xFF	; 255
    6134:	f9 01       	movw	r30, r18
    6136:	20 81       	ld	r18, Z
    6138:	32 2f       	mov	r19, r18
    613a:	2b 81       	ldd	r18, Y+3	; 0x03
    613c:	20 95       	com	r18
    613e:	23 23       	and	r18, r19
    6140:	fc 01       	movw	r30, r24
    6142:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    6144:	89 81       	ldd	r24, Y+1	; 0x01
    6146:	77 de       	rcall	.-786    	; 0x5e36 <cpu_irq_restore>
}
    6148:	00 00       	nop
    614a:	23 96       	adiw	r28, 0x03	; 3
    614c:	cd bf       	out	0x3d, r28	; 61
    614e:	de bf       	out	0x3e, r29	; 62
    6150:	df 91       	pop	r29
    6152:	cf 91       	pop	r28
    6154:	08 95       	ret

00006156 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    6156:	cf 93       	push	r28
    6158:	df 93       	push	r29
    615a:	00 d0       	rcall	.+0      	; 0x615c <sysclk_disable_module+0x6>
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
    6160:	8a 83       	std	Y+2, r24	; 0x02
    6162:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    6164:	58 de       	rcall	.-848    	; 0x5e16 <cpu_irq_save>
    6166:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    6168:	8a 81       	ldd	r24, Y+2	; 0x02
    616a:	88 2f       	mov	r24, r24
    616c:	90 e0       	ldi	r25, 0x00	; 0
    616e:	80 59       	subi	r24, 0x90	; 144
    6170:	9f 4f       	sbci	r25, 0xFF	; 255
    6172:	2a 81       	ldd	r18, Y+2	; 0x02
    6174:	22 2f       	mov	r18, r18
    6176:	30 e0       	ldi	r19, 0x00	; 0
    6178:	20 59       	subi	r18, 0x90	; 144
    617a:	3f 4f       	sbci	r19, 0xFF	; 255
    617c:	f9 01       	movw	r30, r18
    617e:	30 81       	ld	r19, Z
    6180:	2b 81       	ldd	r18, Y+3	; 0x03
    6182:	23 2b       	or	r18, r19
    6184:	fc 01       	movw	r30, r24
    6186:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    6188:	89 81       	ldd	r24, Y+1	; 0x01
    618a:	55 de       	rcall	.-854    	; 0x5e36 <cpu_irq_restore>
}
    618c:	00 00       	nop
    618e:	23 96       	adiw	r28, 0x03	; 3
    6190:	cd bf       	out	0x3d, r28	; 61
    6192:	de bf       	out	0x3e, r29	; 62
    6194:	df 91       	pop	r29
    6196:	cf 91       	pop	r28
    6198:	08 95       	ret

0000619a <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    619a:	cf 93       	push	r28
    619c:	df 93       	push	r29
    619e:	00 d0       	rcall	.+0      	; 0x61a0 <usart_serial_putchar+0x6>
    61a0:	cd b7       	in	r28, 0x3d	; 61
    61a2:	de b7       	in	r29, 0x3e	; 62
    61a4:	89 83       	std	Y+1, r24	; 0x01
    61a6:	9a 83       	std	Y+2, r25	; 0x02
    61a8:	6b 83       	std	Y+3, r22	; 0x03
    61aa:	89 81       	ldd	r24, Y+1	; 0x01
    61ac:	9a 81       	ldd	r25, Y+2	; 0x02
    61ae:	6b 81       	ldd	r22, Y+3	; 0x03
    61b0:	0e 94 20 48 	call	0x9040	; 0x9040 <usart_putchar>
    61b4:	23 96       	adiw	r28, 0x03	; 3
    61b6:	cd bf       	out	0x3d, r28	; 61
    61b8:	de bf       	out	0x3e, r29	; 62
    61ba:	df 91       	pop	r29
    61bc:	cf 91       	pop	r28
    61be:	08 95       	ret

000061c0 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    61c0:	cf 93       	push	r28
    61c2:	df 93       	push	r29
    61c4:	00 d0       	rcall	.+0      	; 0x61c6 <usart_serial_write_packet+0x6>
    61c6:	00 d0       	rcall	.+0      	; 0x61c8 <usart_serial_write_packet+0x8>
    61c8:	cd b7       	in	r28, 0x3d	; 61
    61ca:	de b7       	in	r29, 0x3e	; 62
    61cc:	89 83       	std	Y+1, r24	; 0x01
    61ce:	9a 83       	std	Y+2, r25	; 0x02
    61d0:	6b 83       	std	Y+3, r22	; 0x03
    61d2:	7c 83       	std	Y+4, r23	; 0x04
    61d4:	4d 83       	std	Y+5, r20	; 0x05
    61d6:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    61d8:	12 c0       	rjmp	.+36     	; 0x61fe <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    61da:	8b 81       	ldd	r24, Y+3	; 0x03
    61dc:	9c 81       	ldd	r25, Y+4	; 0x04
    61de:	fc 01       	movw	r30, r24
    61e0:	20 81       	ld	r18, Z
    61e2:	89 81       	ldd	r24, Y+1	; 0x01
    61e4:	9a 81       	ldd	r25, Y+2	; 0x02
    61e6:	62 2f       	mov	r22, r18
    61e8:	d8 df       	rcall	.-80     	; 0x619a <usart_serial_putchar>
		len--;
    61ea:	8d 81       	ldd	r24, Y+5	; 0x05
    61ec:	9e 81       	ldd	r25, Y+6	; 0x06
    61ee:	01 97       	sbiw	r24, 0x01	; 1
    61f0:	8d 83       	std	Y+5, r24	; 0x05
    61f2:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    61f4:	8b 81       	ldd	r24, Y+3	; 0x03
    61f6:	9c 81       	ldd	r25, Y+4	; 0x04
    61f8:	01 96       	adiw	r24, 0x01	; 1
    61fa:	8b 83       	std	Y+3, r24	; 0x03
    61fc:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    61fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6200:	9e 81       	ldd	r25, Y+6	; 0x06
    6202:	89 2b       	or	r24, r25
    6204:	51 f7       	brne	.-44     	; 0x61da <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    6206:	80 e0       	ldi	r24, 0x00	; 0
}
    6208:	26 96       	adiw	r28, 0x06	; 6
    620a:	cd bf       	out	0x3d, r28	; 61
    620c:	de bf       	out	0x3e, r29	; 62
    620e:	df 91       	pop	r29
    6210:	cf 91       	pop	r28
    6212:	08 95       	ret

00006214 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    6214:	cf 93       	push	r28
    6216:	df 93       	push	r29
    6218:	00 d0       	rcall	.+0      	; 0x621a <_read+0x6>
    621a:	cd b7       	in	r28, 0x3d	; 61
    621c:	de b7       	in	r29, 0x3e	; 62
    621e:	8a 83       	std	Y+2, r24	; 0x02
    6220:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    6222:	20 91 d6 28 	lds	r18, 0x28D6	; 0x8028d6 <ptr_get>
    6226:	30 91 d7 28 	lds	r19, 0x28D7	; 0x8028d7 <ptr_get+0x1>
    622a:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <stdio_base>
    622e:	90 91 db 28 	lds	r25, 0x28DB	; 0x8028db <stdio_base+0x1>
    6232:	ae 01       	movw	r20, r28
    6234:	4f 5f       	subi	r20, 0xFF	; 255
    6236:	5f 4f       	sbci	r21, 0xFF	; 255
    6238:	ba 01       	movw	r22, r20
    623a:	f9 01       	movw	r30, r18
    623c:	19 95       	eicall
	return c;
    623e:	89 81       	ldd	r24, Y+1	; 0x01
    6240:	08 2e       	mov	r0, r24
    6242:	00 0c       	add	r0, r0
    6244:	99 0b       	sbc	r25, r25
}
    6246:	23 96       	adiw	r28, 0x03	; 3
    6248:	cd bf       	out	0x3d, r28	; 61
    624a:	de bf       	out	0x3e, r29	; 62
    624c:	df 91       	pop	r29
    624e:	cf 91       	pop	r28
    6250:	08 95       	ret

00006252 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    6252:	cf 93       	push	r28
    6254:	df 93       	push	r29
    6256:	00 d0       	rcall	.+0      	; 0x6258 <_write+0x6>
    6258:	cd b7       	in	r28, 0x3d	; 61
    625a:	de b7       	in	r29, 0x3e	; 62
    625c:	89 83       	std	Y+1, r24	; 0x01
    625e:	6a 83       	std	Y+2, r22	; 0x02
    6260:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    6262:	20 91 d8 28 	lds	r18, 0x28D8	; 0x8028d8 <ptr_put>
    6266:	30 91 d9 28 	lds	r19, 0x28D9	; 0x8028d9 <ptr_put+0x1>
    626a:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <stdio_base>
    626e:	90 91 db 28 	lds	r25, 0x28DB	; 0x8028db <stdio_base+0x1>
    6272:	69 81       	ldd	r22, Y+1	; 0x01
    6274:	f9 01       	movw	r30, r18
    6276:	19 95       	eicall
    6278:	99 23       	and	r25, r25
    627a:	1c f4       	brge	.+6      	; 0x6282 <_write+0x30>
		return -1;
    627c:	8f ef       	ldi	r24, 0xFF	; 255
    627e:	9f ef       	ldi	r25, 0xFF	; 255
    6280:	02 c0       	rjmp	.+4      	; 0x6286 <_write+0x34>
	}
	return 1;
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	90 e0       	ldi	r25, 0x00	; 0
}
    6286:	23 96       	adiw	r28, 0x03	; 3
    6288:	cd bf       	out	0x3d, r28	; 61
    628a:	de bf       	out	0x3e, r29	; 62
    628c:	df 91       	pop	r29
    628e:	cf 91       	pop	r28
    6290:	08 95       	ret

00006292 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    6292:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    6294:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    6296:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    6298:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    629a:	60 83       	st	Z, r22
	ret                             // Return to caller
    629c:	08 95       	ret

0000629e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    629e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    62a2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    62a4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    62a6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    62aa:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    62ac:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    62b0:	08 95       	ret

000062b2 <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
    62b6:	1f 92       	push	r1
    62b8:	cd b7       	in	r28, 0x3d	; 61
    62ba:	de b7       	in	r29, 0x3e	; 62
    62bc:	8f e3       	ldi	r24, 0x3F	; 63
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	fc 01       	movw	r30, r24
    62c2:	80 81       	ld	r24, Z
    62c4:	89 83       	std	Y+1, r24	; 0x01
    62c6:	f8 94       	cli
    62c8:	89 81       	ldd	r24, Y+1	; 0x01
    62ca:	0f 90       	pop	r0
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	08 95       	ret

000062d2 <cpu_irq_restore>:
    62d2:	cf 93       	push	r28
    62d4:	df 93       	push	r29
    62d6:	1f 92       	push	r1
    62d8:	cd b7       	in	r28, 0x3d	; 61
    62da:	de b7       	in	r29, 0x3e	; 62
    62dc:	89 83       	std	Y+1, r24	; 0x01
    62de:	8f e3       	ldi	r24, 0x3F	; 63
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	29 81       	ldd	r18, Y+1	; 0x01
    62e4:	fc 01       	movw	r30, r24
    62e6:	20 83       	st	Z, r18
    62e8:	00 00       	nop
    62ea:	0f 90       	pop	r0
    62ec:	df 91       	pop	r29
    62ee:	cf 91       	pop	r28
    62f0:	08 95       	ret

000062f2 <sleepmgr_lock_mode>:
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	1f 92       	push	r1
    62f8:	1f 92       	push	r1
    62fa:	cd b7       	in	r28, 0x3d	; 61
    62fc:	de b7       	in	r29, 0x3e	; 62
    62fe:	8a 83       	std	Y+2, r24	; 0x02
    6300:	8a 81       	ldd	r24, Y+2	; 0x02
    6302:	88 2f       	mov	r24, r24
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	80 53       	subi	r24, 0x30	; 48
    6308:	97 4d       	sbci	r25, 0xD7	; 215
    630a:	fc 01       	movw	r30, r24
    630c:	80 81       	ld	r24, Z
    630e:	8f 3f       	cpi	r24, 0xFF	; 255
    6310:	09 f4       	brne	.+2      	; 0x6314 <sleepmgr_lock_mode+0x22>
    6312:	ff cf       	rjmp	.-2      	; 0x6312 <sleepmgr_lock_mode+0x20>
    6314:	ce df       	rcall	.-100    	; 0x62b2 <cpu_irq_save>
    6316:	89 83       	std	Y+1, r24	; 0x01
    6318:	8a 81       	ldd	r24, Y+2	; 0x02
    631a:	88 2f       	mov	r24, r24
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	9c 01       	movw	r18, r24
    6320:	20 53       	subi	r18, 0x30	; 48
    6322:	37 4d       	sbci	r19, 0xD7	; 215
    6324:	f9 01       	movw	r30, r18
    6326:	20 81       	ld	r18, Z
    6328:	2f 5f       	subi	r18, 0xFF	; 255
    632a:	80 53       	subi	r24, 0x30	; 48
    632c:	97 4d       	sbci	r25, 0xD7	; 215
    632e:	fc 01       	movw	r30, r24
    6330:	20 83       	st	Z, r18
    6332:	89 81       	ldd	r24, Y+1	; 0x01
    6334:	ce df       	rcall	.-100    	; 0x62d2 <cpu_irq_restore>
    6336:	00 00       	nop
    6338:	0f 90       	pop	r0
    633a:	0f 90       	pop	r0
    633c:	df 91       	pop	r29
    633e:	cf 91       	pop	r28
    6340:	08 95       	ret

00006342 <rtc_get_time>:
    6342:	cf 93       	push	r28
    6344:	df 93       	push	r29
    6346:	cd b7       	in	r28, 0x3d	; 61
    6348:	de b7       	in	r29, 0x3e	; 62
    634a:	25 97       	sbiw	r28, 0x05	; 5
    634c:	cd bf       	out	0x3d, r28	; 61
    634e:	de bf       	out	0x3e, r29	; 62
    6350:	00 00       	nop
    6352:	80 e0       	ldi	r24, 0x00	; 0
    6354:	94 e0       	ldi	r25, 0x04	; 4
    6356:	fc 01       	movw	r30, r24
    6358:	81 81       	ldd	r24, Z+1	; 0x01
    635a:	88 2f       	mov	r24, r24
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	81 70       	andi	r24, 0x01	; 1
    6360:	99 27       	eor	r25, r25
    6362:	21 e0       	ldi	r18, 0x01	; 1
    6364:	89 2b       	or	r24, r25
    6366:	09 f4       	brne	.+2      	; 0x636a <rtc_get_time+0x28>
    6368:	20 e0       	ldi	r18, 0x00	; 0
    636a:	22 23       	and	r18, r18
    636c:	91 f7       	brne	.-28     	; 0x6352 <rtc_get_time+0x10>
    636e:	a1 df       	rcall	.-190    	; 0x62b2 <cpu_irq_save>
    6370:	8b 83       	std	Y+3, r24	; 0x03
    6372:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <rtc_data>
    6376:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <rtc_data+0x1>
    637a:	89 83       	std	Y+1, r24	; 0x01
    637c:	9a 83       	std	Y+2, r25	; 0x02
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	94 e0       	ldi	r25, 0x04	; 4
    6382:	fc 01       	movw	r30, r24
    6384:	80 85       	ldd	r24, Z+8	; 0x08
    6386:	91 85       	ldd	r25, Z+9	; 0x09
    6388:	8c 83       	std	Y+4, r24	; 0x04
    638a:	9d 83       	std	Y+5, r25	; 0x05
    638c:	8c 81       	ldd	r24, Y+4	; 0x04
    638e:	9d 81       	ldd	r25, Y+5	; 0x05
    6390:	89 2b       	or	r24, r25
    6392:	79 f4       	brne	.+30     	; 0x63b2 <rtc_get_time+0x70>
    6394:	80 e0       	ldi	r24, 0x00	; 0
    6396:	94 e0       	ldi	r25, 0x04	; 4
    6398:	fc 01       	movw	r30, r24
    639a:	83 81       	ldd	r24, Z+3	; 0x03
    639c:	88 2f       	mov	r24, r24
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	81 70       	andi	r24, 0x01	; 1
    63a2:	99 27       	eor	r25, r25
    63a4:	89 2b       	or	r24, r25
    63a6:	29 f0       	breq	.+10     	; 0x63b2 <rtc_get_time+0x70>
    63a8:	89 81       	ldd	r24, Y+1	; 0x01
    63aa:	9a 81       	ldd	r25, Y+2	; 0x02
    63ac:	01 96       	adiw	r24, 0x01	; 1
    63ae:	89 83       	std	Y+1, r24	; 0x01
    63b0:	9a 83       	std	Y+2, r25	; 0x02
    63b2:	8b 81       	ldd	r24, Y+3	; 0x03
    63b4:	8e df       	rcall	.-228    	; 0x62d2 <cpu_irq_restore>
    63b6:	89 81       	ldd	r24, Y+1	; 0x01
    63b8:	9a 81       	ldd	r25, Y+2	; 0x02
    63ba:	cc 01       	movw	r24, r24
    63bc:	a0 e0       	ldi	r26, 0x00	; 0
    63be:	b0 e0       	ldi	r27, 0x00	; 0
    63c0:	ac 01       	movw	r20, r24
    63c2:	33 27       	eor	r19, r19
    63c4:	22 27       	eor	r18, r18
    63c6:	8c 81       	ldd	r24, Y+4	; 0x04
    63c8:	9d 81       	ldd	r25, Y+5	; 0x05
    63ca:	cc 01       	movw	r24, r24
    63cc:	a0 e0       	ldi	r26, 0x00	; 0
    63ce:	b0 e0       	ldi	r27, 0x00	; 0
    63d0:	82 2b       	or	r24, r18
    63d2:	93 2b       	or	r25, r19
    63d4:	a4 2b       	or	r26, r20
    63d6:	b5 2b       	or	r27, r21
    63d8:	bc 01       	movw	r22, r24
    63da:	cd 01       	movw	r24, r26
    63dc:	25 96       	adiw	r28, 0x05	; 5
    63de:	cd bf       	out	0x3d, r28	; 61
    63e0:	de bf       	out	0x3e, r29	; 62
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	08 95       	ret

000063e8 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    63e8:	cf 93       	push	r28
    63ea:	df 93       	push	r29
    63ec:	cd b7       	in	r28, 0x3d	; 61
    63ee:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    63f0:	64 e0       	ldi	r22, 0x04	; 4
    63f2:	80 e0       	ldi	r24, 0x00	; 0
    63f4:	8c de       	rcall	.-744    	; 0x610e <sysclk_enable_module>
	RTC.PER = 0xffff;
    63f6:	80 e0       	ldi	r24, 0x00	; 0
    63f8:	94 e0       	ldi	r25, 0x04	; 4
    63fa:	2f ef       	ldi	r18, 0xFF	; 255
    63fc:	3f ef       	ldi	r19, 0xFF	; 255
    63fe:	fc 01       	movw	r30, r24
    6400:	22 87       	std	Z+10, r18	; 0x0a
    6402:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    6404:	80 e0       	ldi	r24, 0x00	; 0
    6406:	94 e0       	ldi	r25, 0x04	; 4
    6408:	fc 01       	movw	r30, r24
    640a:	10 86       	std	Z+8, r1	; 0x08
    640c:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    640e:	83 e0       	ldi	r24, 0x03	; 3
    6410:	70 df       	rcall	.-288    	; 0x62f2 <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    6412:	80 e0       	ldi	r24, 0x00	; 0
    6414:	94 e0       	ldi	r25, 0x04	; 4
    6416:	21 e0       	ldi	r18, 0x01	; 1
    6418:	fc 01       	movw	r30, r24
    641a:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    641c:	80 e0       	ldi	r24, 0x00	; 0
    641e:	94 e0       	ldi	r25, 0x04	; 4
    6420:	26 e0       	ldi	r18, 0x06	; 6
    6422:	fc 01       	movw	r30, r24
    6424:	20 83       	st	Z, r18
}
    6426:	00 00       	nop
    6428:	df 91       	pop	r29
    642a:	cf 91       	pop	r28
    642c:	08 95       	ret

0000642e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    642e:	1f 92       	push	r1
    6430:	0f 92       	push	r0
    6432:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6436:	0f 92       	push	r0
    6438:	11 24       	eor	r1, r1
    643a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    643e:	0f 92       	push	r0
    6440:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6444:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6448:	0f 92       	push	r0
    644a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    644e:	8f 93       	push	r24
    6450:	9f 93       	push	r25
    6452:	cf 93       	push	r28
    6454:	df 93       	push	r29
    6456:	cd b7       	in	r28, 0x3d	; 61
    6458:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    645a:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <rtc_data>
    645e:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <rtc_data+0x1>
    6462:	01 96       	adiw	r24, 0x01	; 1
    6464:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <rtc_data>
    6468:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <rtc_data+0x1>
}
    646c:	00 00       	nop
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	9f 91       	pop	r25
    6474:	8f 91       	pop	r24
    6476:	0f 90       	pop	r0
    6478:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    647c:	0f 90       	pop	r0
    647e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6482:	0f 90       	pop	r0
    6484:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6488:	0f 90       	pop	r0
    648a:	1f 90       	pop	r1
    648c:	18 95       	reti

0000648e <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    648e:	1f 92       	push	r1
    6490:	0f 92       	push	r0
    6492:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6496:	0f 92       	push	r0
    6498:	11 24       	eor	r1, r1
    649a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    649e:	0f 92       	push	r0
    64a0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    64a4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    64a8:	0f 92       	push	r0
    64aa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    64ae:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    64b2:	0f 92       	push	r0
    64b4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    64b8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    64bc:	0f 92       	push	r0
    64be:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    64c2:	2f 93       	push	r18
    64c4:	3f 93       	push	r19
    64c6:	4f 93       	push	r20
    64c8:	5f 93       	push	r21
    64ca:	6f 93       	push	r22
    64cc:	7f 93       	push	r23
    64ce:	8f 93       	push	r24
    64d0:	9f 93       	push	r25
    64d2:	af 93       	push	r26
    64d4:	bf 93       	push	r27
    64d6:	ef 93       	push	r30
    64d8:	ff 93       	push	r31
    64da:	cf 93       	push	r28
    64dc:	df 93       	push	r29
    64de:	cd b7       	in	r28, 0x3d	; 61
    64e0:	de b7       	in	r29, 0x3e	; 62
    64e2:	28 97       	sbiw	r28, 0x08	; 8
    64e4:	cd bf       	out	0x3d, r28	; 61
    64e6:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    64e8:	20 91 dc 28 	lds	r18, 0x28DC	; 0x8028dc <rtc_data>
    64ec:	30 91 dd 28 	lds	r19, 0x28DD	; 0x8028dd <rtc_data+0x1>
    64f0:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <rtc_data+0x2>
    64f4:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <rtc_data+0x3>
    64f8:	28 17       	cp	r18, r24
    64fa:	39 07       	cpc	r19, r25
    64fc:	08 f4       	brcc	.+2      	; 0x6500 <__vector_11+0x72>
    64fe:	63 c0       	rjmp	.+198    	; 0x65c6 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    6500:	80 e0       	ldi	r24, 0x00	; 0
    6502:	94 e0       	ldi	r25, 0x04	; 4
    6504:	21 e0       	ldi	r18, 0x01	; 1
    6506:	fc 01       	movw	r30, r24
    6508:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    650a:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <rtc_data+0x6>
    650e:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <rtc_data+0x7>
    6512:	89 2b       	or	r24, r25
    6514:	09 f4       	brne	.+2      	; 0x6518 <__vector_11+0x8a>
    6516:	57 c0       	rjmp	.+174    	; 0x65c6 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    6518:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <rtc_data>
    651c:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <rtc_data+0x1>
    6520:	cc 01       	movw	r24, r24
    6522:	a0 e0       	ldi	r26, 0x00	; 0
    6524:	b0 e0       	ldi	r27, 0x00	; 0
    6526:	ac 01       	movw	r20, r24
    6528:	33 27       	eor	r19, r19
    652a:	22 27       	eor	r18, r18
					| RTC.CNT;
    652c:	80 e0       	ldi	r24, 0x00	; 0
    652e:	94 e0       	ldi	r25, 0x04	; 4
    6530:	fc 01       	movw	r30, r24
    6532:	80 85       	ldd	r24, Z+8	; 0x08
    6534:	91 85       	ldd	r25, Z+9	; 0x09
    6536:	cc 01       	movw	r24, r24
    6538:	a0 e0       	ldi	r26, 0x00	; 0
    653a:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    653c:	82 2b       	or	r24, r18
    653e:	93 2b       	or	r25, r19
    6540:	a4 2b       	or	r26, r20
    6542:	b5 2b       	or	r27, r21
    6544:	89 83       	std	Y+1, r24	; 0x01
    6546:	9a 83       	std	Y+2, r25	; 0x02
    6548:	ab 83       	std	Y+3, r26	; 0x03
    654a:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    654c:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <rtc_data+0x2>
    6550:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <rtc_data+0x3>
    6554:	cc 01       	movw	r24, r24
    6556:	a0 e0       	ldi	r26, 0x00	; 0
    6558:	b0 e0       	ldi	r27, 0x00	; 0
    655a:	ac 01       	movw	r20, r24
    655c:	33 27       	eor	r19, r19
    655e:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    6560:	80 91 e0 28 	lds	r24, 0x28E0	; 0x8028e0 <rtc_data+0x4>
    6564:	90 91 e1 28 	lds	r25, 0x28E1	; 0x8028e1 <rtc_data+0x5>
    6568:	cc 01       	movw	r24, r24
    656a:	a0 e0       	ldi	r26, 0x00	; 0
    656c:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    656e:	82 2b       	or	r24, r18
    6570:	93 2b       	or	r25, r19
    6572:	a4 2b       	or	r26, r20
    6574:	b5 2b       	or	r27, r21
    6576:	8d 83       	std	Y+5, r24	; 0x05
    6578:	9e 83       	std	Y+6, r25	; 0x06
    657a:	af 83       	std	Y+7, r26	; 0x07
    657c:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    657e:	2d 81       	ldd	r18, Y+5	; 0x05
    6580:	3e 81       	ldd	r19, Y+6	; 0x06
    6582:	4f 81       	ldd	r20, Y+7	; 0x07
    6584:	58 85       	ldd	r21, Y+8	; 0x08
    6586:	89 81       	ldd	r24, Y+1	; 0x01
    6588:	9a 81       	ldd	r25, Y+2	; 0x02
    658a:	ab 81       	ldd	r26, Y+3	; 0x03
    658c:	bc 81       	ldd	r27, Y+4	; 0x04
    658e:	28 17       	cp	r18, r24
    6590:	39 07       	cpc	r19, r25
    6592:	4a 07       	cpc	r20, r26
    6594:	5b 07       	cpc	r21, r27
    6596:	58 f0       	brcs	.+22     	; 0x65ae <__vector_11+0x120>
				count = alarm + 1;
    6598:	8d 81       	ldd	r24, Y+5	; 0x05
    659a:	9e 81       	ldd	r25, Y+6	; 0x06
    659c:	af 81       	ldd	r26, Y+7	; 0x07
    659e:	b8 85       	ldd	r27, Y+8	; 0x08
    65a0:	01 96       	adiw	r24, 0x01	; 1
    65a2:	a1 1d       	adc	r26, r1
    65a4:	b1 1d       	adc	r27, r1
    65a6:	89 83       	std	Y+1, r24	; 0x01
    65a8:	9a 83       	std	Y+2, r25	; 0x02
    65aa:	ab 83       	std	Y+3, r26	; 0x03
    65ac:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    65ae:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <rtc_data+0x6>
    65b2:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <rtc_data+0x7>
    65b6:	89 81       	ldd	r24, Y+1	; 0x01
    65b8:	9a 81       	ldd	r25, Y+2	; 0x02
    65ba:	ab 81       	ldd	r26, Y+3	; 0x03
    65bc:	bc 81       	ldd	r27, Y+4	; 0x04
    65be:	bc 01       	movw	r22, r24
    65c0:	cd 01       	movw	r24, r26
    65c2:	f9 01       	movw	r30, r18
    65c4:	19 95       	eicall
		}
	}
}
    65c6:	00 00       	nop
    65c8:	28 96       	adiw	r28, 0x08	; 8
    65ca:	cd bf       	out	0x3d, r28	; 61
    65cc:	de bf       	out	0x3e, r29	; 62
    65ce:	df 91       	pop	r29
    65d0:	cf 91       	pop	r28
    65d2:	ff 91       	pop	r31
    65d4:	ef 91       	pop	r30
    65d6:	bf 91       	pop	r27
    65d8:	af 91       	pop	r26
    65da:	9f 91       	pop	r25
    65dc:	8f 91       	pop	r24
    65de:	7f 91       	pop	r23
    65e0:	6f 91       	pop	r22
    65e2:	5f 91       	pop	r21
    65e4:	4f 91       	pop	r20
    65e6:	3f 91       	pop	r19
    65e8:	2f 91       	pop	r18
    65ea:	0f 90       	pop	r0
    65ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65f0:	0f 90       	pop	r0
    65f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65f6:	0f 90       	pop	r0
    65f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    65fc:	0f 90       	pop	r0
    65fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6602:	0f 90       	pop	r0
    6604:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6608:	0f 90       	pop	r0
    660a:	1f 90       	pop	r1
    660c:	18 95       	reti

0000660e <cpu_irq_save>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    660e:	cf 93       	push	r28
    6610:	df 93       	push	r29
    6612:	1f 92       	push	r1
    6614:	cd b7       	in	r28, 0x3d	; 61
    6616:	de b7       	in	r29, 0x3e	; 62
    6618:	8f e3       	ldi	r24, 0x3F	; 63
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	fc 01       	movw	r30, r24
    661e:	80 81       	ld	r24, Z
    6620:	89 83       	std	Y+1, r24	; 0x01
    6622:	f8 94       	cli
    6624:	89 81       	ldd	r24, Y+1	; 0x01
    6626:	0f 90       	pop	r0
    6628:	df 91       	pop	r29
    662a:	cf 91       	pop	r28
    662c:	08 95       	ret

0000662e <cpu_irq_restore>:
    662e:	cf 93       	push	r28
    6630:	df 93       	push	r29
    6632:	1f 92       	push	r1
    6634:	cd b7       	in	r28, 0x3d	; 61
    6636:	de b7       	in	r29, 0x3e	; 62
    6638:	89 83       	std	Y+1, r24	; 0x01
    663a:	8f e3       	ldi	r24, 0x3F	; 63
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	29 81       	ldd	r18, Y+1	; 0x01
    6640:	fc 01       	movw	r30, r24
    6642:	20 83       	st	Z, r18
    6644:	00 00       	nop
    6646:	0f 90       	pop	r0
    6648:	df 91       	pop	r29
    664a:	cf 91       	pop	r28
    664c:	08 95       	ret

0000664e <sleepmgr_lock_mode>:
    664e:	cf 93       	push	r28
    6650:	df 93       	push	r29
    6652:	1f 92       	push	r1
    6654:	1f 92       	push	r1
    6656:	cd b7       	in	r28, 0x3d	; 61
    6658:	de b7       	in	r29, 0x3e	; 62
    665a:	8a 83       	std	Y+2, r24	; 0x02
    665c:	8a 81       	ldd	r24, Y+2	; 0x02
    665e:	88 2f       	mov	r24, r24
    6660:	90 e0       	ldi	r25, 0x00	; 0
    6662:	80 53       	subi	r24, 0x30	; 48
    6664:	97 4d       	sbci	r25, 0xD7	; 215
    6666:	fc 01       	movw	r30, r24
    6668:	80 81       	ld	r24, Z
    666a:	8f 3f       	cpi	r24, 0xFF	; 255
    666c:	09 f4       	brne	.+2      	; 0x6670 <sleepmgr_lock_mode+0x22>
    666e:	ff cf       	rjmp	.-2      	; 0x666e <sleepmgr_lock_mode+0x20>
    6670:	ce df       	rcall	.-100    	; 0x660e <cpu_irq_save>
    6672:	89 83       	std	Y+1, r24	; 0x01
    6674:	8a 81       	ldd	r24, Y+2	; 0x02
    6676:	88 2f       	mov	r24, r24
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	9c 01       	movw	r18, r24
    667c:	20 53       	subi	r18, 0x30	; 48
    667e:	37 4d       	sbci	r19, 0xD7	; 215
    6680:	f9 01       	movw	r30, r18
    6682:	20 81       	ld	r18, Z
    6684:	2f 5f       	subi	r18, 0xFF	; 255
    6686:	80 53       	subi	r24, 0x30	; 48
    6688:	97 4d       	sbci	r25, 0xD7	; 215
    668a:	fc 01       	movw	r30, r24
    668c:	20 83       	st	Z, r18
    668e:	89 81       	ldd	r24, Y+1	; 0x01
    6690:	ce df       	rcall	.-100    	; 0x662e <cpu_irq_restore>
    6692:	00 00       	nop
    6694:	0f 90       	pop	r0
    6696:	0f 90       	pop	r0
    6698:	df 91       	pop	r29
    669a:	cf 91       	pop	r28
    669c:	08 95       	ret

0000669e <__vector_14>:
    669e:	1f 92       	push	r1
    66a0:	0f 92       	push	r0
    66a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    66a6:	0f 92       	push	r0
    66a8:	11 24       	eor	r1, r1
    66aa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66ae:	0f 92       	push	r0
    66b0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66b4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66b8:	0f 92       	push	r0
    66ba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66be:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66c2:	0f 92       	push	r0
    66c4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66c8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    66cc:	0f 92       	push	r0
    66ce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    66d2:	2f 93       	push	r18
    66d4:	3f 93       	push	r19
    66d6:	4f 93       	push	r20
    66d8:	5f 93       	push	r21
    66da:	6f 93       	push	r22
    66dc:	7f 93       	push	r23
    66de:	8f 93       	push	r24
    66e0:	9f 93       	push	r25
    66e2:	af 93       	push	r26
    66e4:	bf 93       	push	r27
    66e6:	ef 93       	push	r30
    66e8:	ff 93       	push	r31
    66ea:	cf 93       	push	r28
    66ec:	df 93       	push	r29
    66ee:	cd b7       	in	r28, 0x3d	; 61
    66f0:	de b7       	in	r29, 0x3e	; 62
    66f2:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <tc_tcc0_ovf_callback>
    66f6:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <tc_tcc0_ovf_callback+0x1>
    66fa:	89 2b       	or	r24, r25
    66fc:	31 f0       	breq	.+12     	; 0x670a <__vector_14+0x6c>
    66fe:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <tc_tcc0_ovf_callback>
    6702:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <tc_tcc0_ovf_callback+0x1>
    6706:	fc 01       	movw	r30, r24
    6708:	19 95       	eicall
    670a:	00 00       	nop
    670c:	df 91       	pop	r29
    670e:	cf 91       	pop	r28
    6710:	ff 91       	pop	r31
    6712:	ef 91       	pop	r30
    6714:	bf 91       	pop	r27
    6716:	af 91       	pop	r26
    6718:	9f 91       	pop	r25
    671a:	8f 91       	pop	r24
    671c:	7f 91       	pop	r23
    671e:	6f 91       	pop	r22
    6720:	5f 91       	pop	r21
    6722:	4f 91       	pop	r20
    6724:	3f 91       	pop	r19
    6726:	2f 91       	pop	r18
    6728:	0f 90       	pop	r0
    672a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    672e:	0f 90       	pop	r0
    6730:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6734:	0f 90       	pop	r0
    6736:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    673a:	0f 90       	pop	r0
    673c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6740:	0f 90       	pop	r0
    6742:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6746:	0f 90       	pop	r0
    6748:	1f 90       	pop	r1
    674a:	18 95       	reti

0000674c <__vector_15>:
    674c:	1f 92       	push	r1
    674e:	0f 92       	push	r0
    6750:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6754:	0f 92       	push	r0
    6756:	11 24       	eor	r1, r1
    6758:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    675c:	0f 92       	push	r0
    675e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6762:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6766:	0f 92       	push	r0
    6768:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    676c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6770:	0f 92       	push	r0
    6772:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6776:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    677a:	0f 92       	push	r0
    677c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6780:	2f 93       	push	r18
    6782:	3f 93       	push	r19
    6784:	4f 93       	push	r20
    6786:	5f 93       	push	r21
    6788:	6f 93       	push	r22
    678a:	7f 93       	push	r23
    678c:	8f 93       	push	r24
    678e:	9f 93       	push	r25
    6790:	af 93       	push	r26
    6792:	bf 93       	push	r27
    6794:	ef 93       	push	r30
    6796:	ff 93       	push	r31
    6798:	cf 93       	push	r28
    679a:	df 93       	push	r29
    679c:	cd b7       	in	r28, 0x3d	; 61
    679e:	de b7       	in	r29, 0x3e	; 62
    67a0:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <tc_tcc0_err_callback>
    67a4:	90 91 b7 22 	lds	r25, 0x22B7	; 0x8022b7 <tc_tcc0_err_callback+0x1>
    67a8:	89 2b       	or	r24, r25
    67aa:	31 f0       	breq	.+12     	; 0x67b8 <__vector_15+0x6c>
    67ac:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <tc_tcc0_err_callback>
    67b0:	90 91 b7 22 	lds	r25, 0x22B7	; 0x8022b7 <tc_tcc0_err_callback+0x1>
    67b4:	fc 01       	movw	r30, r24
    67b6:	19 95       	eicall
    67b8:	00 00       	nop
    67ba:	df 91       	pop	r29
    67bc:	cf 91       	pop	r28
    67be:	ff 91       	pop	r31
    67c0:	ef 91       	pop	r30
    67c2:	bf 91       	pop	r27
    67c4:	af 91       	pop	r26
    67c6:	9f 91       	pop	r25
    67c8:	8f 91       	pop	r24
    67ca:	7f 91       	pop	r23
    67cc:	6f 91       	pop	r22
    67ce:	5f 91       	pop	r21
    67d0:	4f 91       	pop	r20
    67d2:	3f 91       	pop	r19
    67d4:	2f 91       	pop	r18
    67d6:	0f 90       	pop	r0
    67d8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    67dc:	0f 90       	pop	r0
    67de:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    67e2:	0f 90       	pop	r0
    67e4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    67e8:	0f 90       	pop	r0
    67ea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    67ee:	0f 90       	pop	r0
    67f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    67f4:	0f 90       	pop	r0
    67f6:	1f 90       	pop	r1
    67f8:	18 95       	reti

000067fa <__vector_16>:
    67fa:	1f 92       	push	r1
    67fc:	0f 92       	push	r0
    67fe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6802:	0f 92       	push	r0
    6804:	11 24       	eor	r1, r1
    6806:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    680a:	0f 92       	push	r0
    680c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6810:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6814:	0f 92       	push	r0
    6816:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    681a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    681e:	0f 92       	push	r0
    6820:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6824:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6828:	0f 92       	push	r0
    682a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    682e:	2f 93       	push	r18
    6830:	3f 93       	push	r19
    6832:	4f 93       	push	r20
    6834:	5f 93       	push	r21
    6836:	6f 93       	push	r22
    6838:	7f 93       	push	r23
    683a:	8f 93       	push	r24
    683c:	9f 93       	push	r25
    683e:	af 93       	push	r26
    6840:	bf 93       	push	r27
    6842:	ef 93       	push	r30
    6844:	ff 93       	push	r31
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	cd b7       	in	r28, 0x3d	; 61
    684c:	de b7       	in	r29, 0x3e	; 62
    684e:	80 91 b8 22 	lds	r24, 0x22B8	; 0x8022b8 <tc_tcc0_cca_callback>
    6852:	90 91 b9 22 	lds	r25, 0x22B9	; 0x8022b9 <tc_tcc0_cca_callback+0x1>
    6856:	89 2b       	or	r24, r25
    6858:	31 f0       	breq	.+12     	; 0x6866 <__vector_16+0x6c>
    685a:	80 91 b8 22 	lds	r24, 0x22B8	; 0x8022b8 <tc_tcc0_cca_callback>
    685e:	90 91 b9 22 	lds	r25, 0x22B9	; 0x8022b9 <tc_tcc0_cca_callback+0x1>
    6862:	fc 01       	movw	r30, r24
    6864:	19 95       	eicall
    6866:	00 00       	nop
    6868:	df 91       	pop	r29
    686a:	cf 91       	pop	r28
    686c:	ff 91       	pop	r31
    686e:	ef 91       	pop	r30
    6870:	bf 91       	pop	r27
    6872:	af 91       	pop	r26
    6874:	9f 91       	pop	r25
    6876:	8f 91       	pop	r24
    6878:	7f 91       	pop	r23
    687a:	6f 91       	pop	r22
    687c:	5f 91       	pop	r21
    687e:	4f 91       	pop	r20
    6880:	3f 91       	pop	r19
    6882:	2f 91       	pop	r18
    6884:	0f 90       	pop	r0
    6886:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    688a:	0f 90       	pop	r0
    688c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6890:	0f 90       	pop	r0
    6892:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6896:	0f 90       	pop	r0
    6898:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    689c:	0f 90       	pop	r0
    689e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    68a2:	0f 90       	pop	r0
    68a4:	1f 90       	pop	r1
    68a6:	18 95       	reti

000068a8 <__vector_17>:
    68a8:	1f 92       	push	r1
    68aa:	0f 92       	push	r0
    68ac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    68b0:	0f 92       	push	r0
    68b2:	11 24       	eor	r1, r1
    68b4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68b8:	0f 92       	push	r0
    68ba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68be:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68c2:	0f 92       	push	r0
    68c4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68c8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    68cc:	0f 92       	push	r0
    68ce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    68d2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    68d6:	0f 92       	push	r0
    68d8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    68dc:	2f 93       	push	r18
    68de:	3f 93       	push	r19
    68e0:	4f 93       	push	r20
    68e2:	5f 93       	push	r21
    68e4:	6f 93       	push	r22
    68e6:	7f 93       	push	r23
    68e8:	8f 93       	push	r24
    68ea:	9f 93       	push	r25
    68ec:	af 93       	push	r26
    68ee:	bf 93       	push	r27
    68f0:	ef 93       	push	r30
    68f2:	ff 93       	push	r31
    68f4:	cf 93       	push	r28
    68f6:	df 93       	push	r29
    68f8:	cd b7       	in	r28, 0x3d	; 61
    68fa:	de b7       	in	r29, 0x3e	; 62
    68fc:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <tc_tcc0_ccb_callback>
    6900:	90 91 bb 22 	lds	r25, 0x22BB	; 0x8022bb <tc_tcc0_ccb_callback+0x1>
    6904:	89 2b       	or	r24, r25
    6906:	31 f0       	breq	.+12     	; 0x6914 <__vector_17+0x6c>
    6908:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <tc_tcc0_ccb_callback>
    690c:	90 91 bb 22 	lds	r25, 0x22BB	; 0x8022bb <tc_tcc0_ccb_callback+0x1>
    6910:	fc 01       	movw	r30, r24
    6912:	19 95       	eicall
    6914:	00 00       	nop
    6916:	df 91       	pop	r29
    6918:	cf 91       	pop	r28
    691a:	ff 91       	pop	r31
    691c:	ef 91       	pop	r30
    691e:	bf 91       	pop	r27
    6920:	af 91       	pop	r26
    6922:	9f 91       	pop	r25
    6924:	8f 91       	pop	r24
    6926:	7f 91       	pop	r23
    6928:	6f 91       	pop	r22
    692a:	5f 91       	pop	r21
    692c:	4f 91       	pop	r20
    692e:	3f 91       	pop	r19
    6930:	2f 91       	pop	r18
    6932:	0f 90       	pop	r0
    6934:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6938:	0f 90       	pop	r0
    693a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    693e:	0f 90       	pop	r0
    6940:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6944:	0f 90       	pop	r0
    6946:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    694a:	0f 90       	pop	r0
    694c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6950:	0f 90       	pop	r0
    6952:	1f 90       	pop	r1
    6954:	18 95       	reti

00006956 <__vector_18>:
    6956:	1f 92       	push	r1
    6958:	0f 92       	push	r0
    695a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    695e:	0f 92       	push	r0
    6960:	11 24       	eor	r1, r1
    6962:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6966:	0f 92       	push	r0
    6968:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    696c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6970:	0f 92       	push	r0
    6972:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6976:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    697a:	0f 92       	push	r0
    697c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6980:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6984:	0f 92       	push	r0
    6986:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    698a:	2f 93       	push	r18
    698c:	3f 93       	push	r19
    698e:	4f 93       	push	r20
    6990:	5f 93       	push	r21
    6992:	6f 93       	push	r22
    6994:	7f 93       	push	r23
    6996:	8f 93       	push	r24
    6998:	9f 93       	push	r25
    699a:	af 93       	push	r26
    699c:	bf 93       	push	r27
    699e:	ef 93       	push	r30
    69a0:	ff 93       	push	r31
    69a2:	cf 93       	push	r28
    69a4:	df 93       	push	r29
    69a6:	cd b7       	in	r28, 0x3d	; 61
    69a8:	de b7       	in	r29, 0x3e	; 62
    69aa:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <tc_tcc0_ccc_callback>
    69ae:	90 91 bd 22 	lds	r25, 0x22BD	; 0x8022bd <tc_tcc0_ccc_callback+0x1>
    69b2:	89 2b       	or	r24, r25
    69b4:	31 f0       	breq	.+12     	; 0x69c2 <__vector_18+0x6c>
    69b6:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <tc_tcc0_ccc_callback>
    69ba:	90 91 bd 22 	lds	r25, 0x22BD	; 0x8022bd <tc_tcc0_ccc_callback+0x1>
    69be:	fc 01       	movw	r30, r24
    69c0:	19 95       	eicall
    69c2:	00 00       	nop
    69c4:	df 91       	pop	r29
    69c6:	cf 91       	pop	r28
    69c8:	ff 91       	pop	r31
    69ca:	ef 91       	pop	r30
    69cc:	bf 91       	pop	r27
    69ce:	af 91       	pop	r26
    69d0:	9f 91       	pop	r25
    69d2:	8f 91       	pop	r24
    69d4:	7f 91       	pop	r23
    69d6:	6f 91       	pop	r22
    69d8:	5f 91       	pop	r21
    69da:	4f 91       	pop	r20
    69dc:	3f 91       	pop	r19
    69de:	2f 91       	pop	r18
    69e0:	0f 90       	pop	r0
    69e2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    69e6:	0f 90       	pop	r0
    69e8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    69ec:	0f 90       	pop	r0
    69ee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    69f2:	0f 90       	pop	r0
    69f4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    69f8:	0f 90       	pop	r0
    69fa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    69fe:	0f 90       	pop	r0
    6a00:	1f 90       	pop	r1
    6a02:	18 95       	reti

00006a04 <__vector_19>:
    6a04:	1f 92       	push	r1
    6a06:	0f 92       	push	r0
    6a08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6a0c:	0f 92       	push	r0
    6a0e:	11 24       	eor	r1, r1
    6a10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a14:	0f 92       	push	r0
    6a16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a1e:	0f 92       	push	r0
    6a20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a28:	0f 92       	push	r0
    6a2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a32:	0f 92       	push	r0
    6a34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a38:	2f 93       	push	r18
    6a3a:	3f 93       	push	r19
    6a3c:	4f 93       	push	r20
    6a3e:	5f 93       	push	r21
    6a40:	6f 93       	push	r22
    6a42:	7f 93       	push	r23
    6a44:	8f 93       	push	r24
    6a46:	9f 93       	push	r25
    6a48:	af 93       	push	r26
    6a4a:	bf 93       	push	r27
    6a4c:	ef 93       	push	r30
    6a4e:	ff 93       	push	r31
    6a50:	cf 93       	push	r28
    6a52:	df 93       	push	r29
    6a54:	cd b7       	in	r28, 0x3d	; 61
    6a56:	de b7       	in	r29, 0x3e	; 62
    6a58:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <tc_tcc0_ccd_callback>
    6a5c:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <tc_tcc0_ccd_callback+0x1>
    6a60:	89 2b       	or	r24, r25
    6a62:	31 f0       	breq	.+12     	; 0x6a70 <__vector_19+0x6c>
    6a64:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <tc_tcc0_ccd_callback>
    6a68:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <tc_tcc0_ccd_callback+0x1>
    6a6c:	fc 01       	movw	r30, r24
    6a6e:	19 95       	eicall
    6a70:	00 00       	nop
    6a72:	df 91       	pop	r29
    6a74:	cf 91       	pop	r28
    6a76:	ff 91       	pop	r31
    6a78:	ef 91       	pop	r30
    6a7a:	bf 91       	pop	r27
    6a7c:	af 91       	pop	r26
    6a7e:	9f 91       	pop	r25
    6a80:	8f 91       	pop	r24
    6a82:	7f 91       	pop	r23
    6a84:	6f 91       	pop	r22
    6a86:	5f 91       	pop	r21
    6a88:	4f 91       	pop	r20
    6a8a:	3f 91       	pop	r19
    6a8c:	2f 91       	pop	r18
    6a8e:	0f 90       	pop	r0
    6a90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a94:	0f 90       	pop	r0
    6a96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a9a:	0f 90       	pop	r0
    6a9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6aa0:	0f 90       	pop	r0
    6aa2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6aa6:	0f 90       	pop	r0
    6aa8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6aac:	0f 90       	pop	r0
    6aae:	1f 90       	pop	r1
    6ab0:	18 95       	reti

00006ab2 <__vector_20>:
    6ab2:	1f 92       	push	r1
    6ab4:	0f 92       	push	r0
    6ab6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6aba:	0f 92       	push	r0
    6abc:	11 24       	eor	r1, r1
    6abe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ac2:	0f 92       	push	r0
    6ac4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ac8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6acc:	0f 92       	push	r0
    6ace:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ad2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ad6:	0f 92       	push	r0
    6ad8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6adc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6ae0:	0f 92       	push	r0
    6ae2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6ae6:	2f 93       	push	r18
    6ae8:	3f 93       	push	r19
    6aea:	4f 93       	push	r20
    6aec:	5f 93       	push	r21
    6aee:	6f 93       	push	r22
    6af0:	7f 93       	push	r23
    6af2:	8f 93       	push	r24
    6af4:	9f 93       	push	r25
    6af6:	af 93       	push	r26
    6af8:	bf 93       	push	r27
    6afa:	ef 93       	push	r30
    6afc:	ff 93       	push	r31
    6afe:	cf 93       	push	r28
    6b00:	df 93       	push	r29
    6b02:	cd b7       	in	r28, 0x3d	; 61
    6b04:	de b7       	in	r29, 0x3e	; 62
    6b06:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <tc_tcc1_ovf_callback>
    6b0a:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <tc_tcc1_ovf_callback+0x1>
    6b0e:	89 2b       	or	r24, r25
    6b10:	31 f0       	breq	.+12     	; 0x6b1e <__vector_20+0x6c>
    6b12:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <tc_tcc1_ovf_callback>
    6b16:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <tc_tcc1_ovf_callback+0x1>
    6b1a:	fc 01       	movw	r30, r24
    6b1c:	19 95       	eicall
    6b1e:	00 00       	nop
    6b20:	df 91       	pop	r29
    6b22:	cf 91       	pop	r28
    6b24:	ff 91       	pop	r31
    6b26:	ef 91       	pop	r30
    6b28:	bf 91       	pop	r27
    6b2a:	af 91       	pop	r26
    6b2c:	9f 91       	pop	r25
    6b2e:	8f 91       	pop	r24
    6b30:	7f 91       	pop	r23
    6b32:	6f 91       	pop	r22
    6b34:	5f 91       	pop	r21
    6b36:	4f 91       	pop	r20
    6b38:	3f 91       	pop	r19
    6b3a:	2f 91       	pop	r18
    6b3c:	0f 90       	pop	r0
    6b3e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b42:	0f 90       	pop	r0
    6b44:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b48:	0f 90       	pop	r0
    6b4a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b4e:	0f 90       	pop	r0
    6b50:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b54:	0f 90       	pop	r0
    6b56:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6b5a:	0f 90       	pop	r0
    6b5c:	1f 90       	pop	r1
    6b5e:	18 95       	reti

00006b60 <__vector_21>:
    6b60:	1f 92       	push	r1
    6b62:	0f 92       	push	r0
    6b64:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6b68:	0f 92       	push	r0
    6b6a:	11 24       	eor	r1, r1
    6b6c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b70:	0f 92       	push	r0
    6b72:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b76:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b7a:	0f 92       	push	r0
    6b7c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b80:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b84:	0f 92       	push	r0
    6b86:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b8a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b8e:	0f 92       	push	r0
    6b90:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b94:	2f 93       	push	r18
    6b96:	3f 93       	push	r19
    6b98:	4f 93       	push	r20
    6b9a:	5f 93       	push	r21
    6b9c:	6f 93       	push	r22
    6b9e:	7f 93       	push	r23
    6ba0:	8f 93       	push	r24
    6ba2:	9f 93       	push	r25
    6ba4:	af 93       	push	r26
    6ba6:	bf 93       	push	r27
    6ba8:	ef 93       	push	r30
    6baa:	ff 93       	push	r31
    6bac:	cf 93       	push	r28
    6bae:	df 93       	push	r29
    6bb0:	cd b7       	in	r28, 0x3d	; 61
    6bb2:	de b7       	in	r29, 0x3e	; 62
    6bb4:	80 91 c2 22 	lds	r24, 0x22C2	; 0x8022c2 <tc_tcc1_err_callback>
    6bb8:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <tc_tcc1_err_callback+0x1>
    6bbc:	89 2b       	or	r24, r25
    6bbe:	31 f0       	breq	.+12     	; 0x6bcc <__vector_21+0x6c>
    6bc0:	80 91 c2 22 	lds	r24, 0x22C2	; 0x8022c2 <tc_tcc1_err_callback>
    6bc4:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <tc_tcc1_err_callback+0x1>
    6bc8:	fc 01       	movw	r30, r24
    6bca:	19 95       	eicall
    6bcc:	00 00       	nop
    6bce:	df 91       	pop	r29
    6bd0:	cf 91       	pop	r28
    6bd2:	ff 91       	pop	r31
    6bd4:	ef 91       	pop	r30
    6bd6:	bf 91       	pop	r27
    6bd8:	af 91       	pop	r26
    6bda:	9f 91       	pop	r25
    6bdc:	8f 91       	pop	r24
    6bde:	7f 91       	pop	r23
    6be0:	6f 91       	pop	r22
    6be2:	5f 91       	pop	r21
    6be4:	4f 91       	pop	r20
    6be6:	3f 91       	pop	r19
    6be8:	2f 91       	pop	r18
    6bea:	0f 90       	pop	r0
    6bec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6bf0:	0f 90       	pop	r0
    6bf2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6bf6:	0f 90       	pop	r0
    6bf8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6bfc:	0f 90       	pop	r0
    6bfe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c02:	0f 90       	pop	r0
    6c04:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6c08:	0f 90       	pop	r0
    6c0a:	1f 90       	pop	r1
    6c0c:	18 95       	reti

00006c0e <__vector_22>:
    6c0e:	1f 92       	push	r1
    6c10:	0f 92       	push	r0
    6c12:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6c16:	0f 92       	push	r0
    6c18:	11 24       	eor	r1, r1
    6c1a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c1e:	0f 92       	push	r0
    6c20:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c24:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c28:	0f 92       	push	r0
    6c2a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c2e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c32:	0f 92       	push	r0
    6c34:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c38:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c3c:	0f 92       	push	r0
    6c3e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c42:	2f 93       	push	r18
    6c44:	3f 93       	push	r19
    6c46:	4f 93       	push	r20
    6c48:	5f 93       	push	r21
    6c4a:	6f 93       	push	r22
    6c4c:	7f 93       	push	r23
    6c4e:	8f 93       	push	r24
    6c50:	9f 93       	push	r25
    6c52:	af 93       	push	r26
    6c54:	bf 93       	push	r27
    6c56:	ef 93       	push	r30
    6c58:	ff 93       	push	r31
    6c5a:	cf 93       	push	r28
    6c5c:	df 93       	push	r29
    6c5e:	cd b7       	in	r28, 0x3d	; 61
    6c60:	de b7       	in	r29, 0x3e	; 62
    6c62:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <tc_tcc1_cca_callback>
    6c66:	90 91 c5 22 	lds	r25, 0x22C5	; 0x8022c5 <tc_tcc1_cca_callback+0x1>
    6c6a:	89 2b       	or	r24, r25
    6c6c:	31 f0       	breq	.+12     	; 0x6c7a <__vector_22+0x6c>
    6c6e:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <tc_tcc1_cca_callback>
    6c72:	90 91 c5 22 	lds	r25, 0x22C5	; 0x8022c5 <tc_tcc1_cca_callback+0x1>
    6c76:	fc 01       	movw	r30, r24
    6c78:	19 95       	eicall
    6c7a:	00 00       	nop
    6c7c:	df 91       	pop	r29
    6c7e:	cf 91       	pop	r28
    6c80:	ff 91       	pop	r31
    6c82:	ef 91       	pop	r30
    6c84:	bf 91       	pop	r27
    6c86:	af 91       	pop	r26
    6c88:	9f 91       	pop	r25
    6c8a:	8f 91       	pop	r24
    6c8c:	7f 91       	pop	r23
    6c8e:	6f 91       	pop	r22
    6c90:	5f 91       	pop	r21
    6c92:	4f 91       	pop	r20
    6c94:	3f 91       	pop	r19
    6c96:	2f 91       	pop	r18
    6c98:	0f 90       	pop	r0
    6c9a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c9e:	0f 90       	pop	r0
    6ca0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ca4:	0f 90       	pop	r0
    6ca6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6caa:	0f 90       	pop	r0
    6cac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6cb0:	0f 90       	pop	r0
    6cb2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6cb6:	0f 90       	pop	r0
    6cb8:	1f 90       	pop	r1
    6cba:	18 95       	reti

00006cbc <__vector_23>:
    6cbc:	1f 92       	push	r1
    6cbe:	0f 92       	push	r0
    6cc0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6cc4:	0f 92       	push	r0
    6cc6:	11 24       	eor	r1, r1
    6cc8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ccc:	0f 92       	push	r0
    6cce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6cd2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6cd6:	0f 92       	push	r0
    6cd8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6cdc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ce0:	0f 92       	push	r0
    6ce2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ce6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6cea:	0f 92       	push	r0
    6cec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6cf0:	2f 93       	push	r18
    6cf2:	3f 93       	push	r19
    6cf4:	4f 93       	push	r20
    6cf6:	5f 93       	push	r21
    6cf8:	6f 93       	push	r22
    6cfa:	7f 93       	push	r23
    6cfc:	8f 93       	push	r24
    6cfe:	9f 93       	push	r25
    6d00:	af 93       	push	r26
    6d02:	bf 93       	push	r27
    6d04:	ef 93       	push	r30
    6d06:	ff 93       	push	r31
    6d08:	cf 93       	push	r28
    6d0a:	df 93       	push	r29
    6d0c:	cd b7       	in	r28, 0x3d	; 61
    6d0e:	de b7       	in	r29, 0x3e	; 62
    6d10:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <tc_tcc1_ccb_callback>
    6d14:	90 91 c7 22 	lds	r25, 0x22C7	; 0x8022c7 <tc_tcc1_ccb_callback+0x1>
    6d18:	89 2b       	or	r24, r25
    6d1a:	31 f0       	breq	.+12     	; 0x6d28 <__vector_23+0x6c>
    6d1c:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <tc_tcc1_ccb_callback>
    6d20:	90 91 c7 22 	lds	r25, 0x22C7	; 0x8022c7 <tc_tcc1_ccb_callback+0x1>
    6d24:	fc 01       	movw	r30, r24
    6d26:	19 95       	eicall
    6d28:	00 00       	nop
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	ff 91       	pop	r31
    6d30:	ef 91       	pop	r30
    6d32:	bf 91       	pop	r27
    6d34:	af 91       	pop	r26
    6d36:	9f 91       	pop	r25
    6d38:	8f 91       	pop	r24
    6d3a:	7f 91       	pop	r23
    6d3c:	6f 91       	pop	r22
    6d3e:	5f 91       	pop	r21
    6d40:	4f 91       	pop	r20
    6d42:	3f 91       	pop	r19
    6d44:	2f 91       	pop	r18
    6d46:	0f 90       	pop	r0
    6d48:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d4c:	0f 90       	pop	r0
    6d4e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d52:	0f 90       	pop	r0
    6d54:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d58:	0f 90       	pop	r0
    6d5a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d5e:	0f 90       	pop	r0
    6d60:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6d64:	0f 90       	pop	r0
    6d66:	1f 90       	pop	r1
    6d68:	18 95       	reti

00006d6a <__vector_77>:
    6d6a:	1f 92       	push	r1
    6d6c:	0f 92       	push	r0
    6d6e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6d72:	0f 92       	push	r0
    6d74:	11 24       	eor	r1, r1
    6d76:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d7a:	0f 92       	push	r0
    6d7c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d80:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d84:	0f 92       	push	r0
    6d86:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d8a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d8e:	0f 92       	push	r0
    6d90:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d94:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d98:	0f 92       	push	r0
    6d9a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d9e:	2f 93       	push	r18
    6da0:	3f 93       	push	r19
    6da2:	4f 93       	push	r20
    6da4:	5f 93       	push	r21
    6da6:	6f 93       	push	r22
    6da8:	7f 93       	push	r23
    6daa:	8f 93       	push	r24
    6dac:	9f 93       	push	r25
    6dae:	af 93       	push	r26
    6db0:	bf 93       	push	r27
    6db2:	ef 93       	push	r30
    6db4:	ff 93       	push	r31
    6db6:	cf 93       	push	r28
    6db8:	df 93       	push	r29
    6dba:	cd b7       	in	r28, 0x3d	; 61
    6dbc:	de b7       	in	r29, 0x3e	; 62
    6dbe:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <tc_tcd0_ovf_callback>
    6dc2:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <tc_tcd0_ovf_callback+0x1>
    6dc6:	89 2b       	or	r24, r25
    6dc8:	31 f0       	breq	.+12     	; 0x6dd6 <__vector_77+0x6c>
    6dca:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <tc_tcd0_ovf_callback>
    6dce:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <tc_tcd0_ovf_callback+0x1>
    6dd2:	fc 01       	movw	r30, r24
    6dd4:	19 95       	eicall
    6dd6:	00 00       	nop
    6dd8:	df 91       	pop	r29
    6dda:	cf 91       	pop	r28
    6ddc:	ff 91       	pop	r31
    6dde:	ef 91       	pop	r30
    6de0:	bf 91       	pop	r27
    6de2:	af 91       	pop	r26
    6de4:	9f 91       	pop	r25
    6de6:	8f 91       	pop	r24
    6de8:	7f 91       	pop	r23
    6dea:	6f 91       	pop	r22
    6dec:	5f 91       	pop	r21
    6dee:	4f 91       	pop	r20
    6df0:	3f 91       	pop	r19
    6df2:	2f 91       	pop	r18
    6df4:	0f 90       	pop	r0
    6df6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6dfa:	0f 90       	pop	r0
    6dfc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e00:	0f 90       	pop	r0
    6e02:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e06:	0f 90       	pop	r0
    6e08:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e0c:	0f 90       	pop	r0
    6e0e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6e12:	0f 90       	pop	r0
    6e14:	1f 90       	pop	r1
    6e16:	18 95       	reti

00006e18 <__vector_78>:
    6e18:	1f 92       	push	r1
    6e1a:	0f 92       	push	r0
    6e1c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6e20:	0f 92       	push	r0
    6e22:	11 24       	eor	r1, r1
    6e24:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e28:	0f 92       	push	r0
    6e2a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e2e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e32:	0f 92       	push	r0
    6e34:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e38:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e3c:	0f 92       	push	r0
    6e3e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e42:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e46:	0f 92       	push	r0
    6e48:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e4c:	2f 93       	push	r18
    6e4e:	3f 93       	push	r19
    6e50:	4f 93       	push	r20
    6e52:	5f 93       	push	r21
    6e54:	6f 93       	push	r22
    6e56:	7f 93       	push	r23
    6e58:	8f 93       	push	r24
    6e5a:	9f 93       	push	r25
    6e5c:	af 93       	push	r26
    6e5e:	bf 93       	push	r27
    6e60:	ef 93       	push	r30
    6e62:	ff 93       	push	r31
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	cd b7       	in	r28, 0x3d	; 61
    6e6a:	de b7       	in	r29, 0x3e	; 62
    6e6c:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <tc_tcd0_err_callback>
    6e70:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <tc_tcd0_err_callback+0x1>
    6e74:	89 2b       	or	r24, r25
    6e76:	31 f0       	breq	.+12     	; 0x6e84 <__vector_78+0x6c>
    6e78:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <tc_tcd0_err_callback>
    6e7c:	90 91 cb 22 	lds	r25, 0x22CB	; 0x8022cb <tc_tcd0_err_callback+0x1>
    6e80:	fc 01       	movw	r30, r24
    6e82:	19 95       	eicall
    6e84:	00 00       	nop
    6e86:	df 91       	pop	r29
    6e88:	cf 91       	pop	r28
    6e8a:	ff 91       	pop	r31
    6e8c:	ef 91       	pop	r30
    6e8e:	bf 91       	pop	r27
    6e90:	af 91       	pop	r26
    6e92:	9f 91       	pop	r25
    6e94:	8f 91       	pop	r24
    6e96:	7f 91       	pop	r23
    6e98:	6f 91       	pop	r22
    6e9a:	5f 91       	pop	r21
    6e9c:	4f 91       	pop	r20
    6e9e:	3f 91       	pop	r19
    6ea0:	2f 91       	pop	r18
    6ea2:	0f 90       	pop	r0
    6ea4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6ea8:	0f 90       	pop	r0
    6eaa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6eae:	0f 90       	pop	r0
    6eb0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6eb4:	0f 90       	pop	r0
    6eb6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6eba:	0f 90       	pop	r0
    6ebc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6ec0:	0f 90       	pop	r0
    6ec2:	1f 90       	pop	r1
    6ec4:	18 95       	reti

00006ec6 <__vector_79>:
    6ec6:	1f 92       	push	r1
    6ec8:	0f 92       	push	r0
    6eca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6ece:	0f 92       	push	r0
    6ed0:	11 24       	eor	r1, r1
    6ed2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ed6:	0f 92       	push	r0
    6ed8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6edc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ee0:	0f 92       	push	r0
    6ee2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ee6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6eea:	0f 92       	push	r0
    6eec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ef0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6ef4:	0f 92       	push	r0
    6ef6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6efa:	2f 93       	push	r18
    6efc:	3f 93       	push	r19
    6efe:	4f 93       	push	r20
    6f00:	5f 93       	push	r21
    6f02:	6f 93       	push	r22
    6f04:	7f 93       	push	r23
    6f06:	8f 93       	push	r24
    6f08:	9f 93       	push	r25
    6f0a:	af 93       	push	r26
    6f0c:	bf 93       	push	r27
    6f0e:	ef 93       	push	r30
    6f10:	ff 93       	push	r31
    6f12:	cf 93       	push	r28
    6f14:	df 93       	push	r29
    6f16:	cd b7       	in	r28, 0x3d	; 61
    6f18:	de b7       	in	r29, 0x3e	; 62
    6f1a:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <tc_tcd0_cca_callback>
    6f1e:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <tc_tcd0_cca_callback+0x1>
    6f22:	89 2b       	or	r24, r25
    6f24:	31 f0       	breq	.+12     	; 0x6f32 <__vector_79+0x6c>
    6f26:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <tc_tcd0_cca_callback>
    6f2a:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <tc_tcd0_cca_callback+0x1>
    6f2e:	fc 01       	movw	r30, r24
    6f30:	19 95       	eicall
    6f32:	00 00       	nop
    6f34:	df 91       	pop	r29
    6f36:	cf 91       	pop	r28
    6f38:	ff 91       	pop	r31
    6f3a:	ef 91       	pop	r30
    6f3c:	bf 91       	pop	r27
    6f3e:	af 91       	pop	r26
    6f40:	9f 91       	pop	r25
    6f42:	8f 91       	pop	r24
    6f44:	7f 91       	pop	r23
    6f46:	6f 91       	pop	r22
    6f48:	5f 91       	pop	r21
    6f4a:	4f 91       	pop	r20
    6f4c:	3f 91       	pop	r19
    6f4e:	2f 91       	pop	r18
    6f50:	0f 90       	pop	r0
    6f52:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f56:	0f 90       	pop	r0
    6f58:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f5c:	0f 90       	pop	r0
    6f5e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f62:	0f 90       	pop	r0
    6f64:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f68:	0f 90       	pop	r0
    6f6a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6f6e:	0f 90       	pop	r0
    6f70:	1f 90       	pop	r1
    6f72:	18 95       	reti

00006f74 <__vector_80>:
    6f74:	1f 92       	push	r1
    6f76:	0f 92       	push	r0
    6f78:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6f7c:	0f 92       	push	r0
    6f7e:	11 24       	eor	r1, r1
    6f80:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f84:	0f 92       	push	r0
    6f86:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f8a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f8e:	0f 92       	push	r0
    6f90:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f94:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f98:	0f 92       	push	r0
    6f9a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f9e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6fa2:	0f 92       	push	r0
    6fa4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6fa8:	2f 93       	push	r18
    6faa:	3f 93       	push	r19
    6fac:	4f 93       	push	r20
    6fae:	5f 93       	push	r21
    6fb0:	6f 93       	push	r22
    6fb2:	7f 93       	push	r23
    6fb4:	8f 93       	push	r24
    6fb6:	9f 93       	push	r25
    6fb8:	af 93       	push	r26
    6fba:	bf 93       	push	r27
    6fbc:	ef 93       	push	r30
    6fbe:	ff 93       	push	r31
    6fc0:	cf 93       	push	r28
    6fc2:	df 93       	push	r29
    6fc4:	cd b7       	in	r28, 0x3d	; 61
    6fc6:	de b7       	in	r29, 0x3e	; 62
    6fc8:	80 91 ce 22 	lds	r24, 0x22CE	; 0x8022ce <tc_tcd0_ccb_callback>
    6fcc:	90 91 cf 22 	lds	r25, 0x22CF	; 0x8022cf <tc_tcd0_ccb_callback+0x1>
    6fd0:	89 2b       	or	r24, r25
    6fd2:	31 f0       	breq	.+12     	; 0x6fe0 <__vector_80+0x6c>
    6fd4:	80 91 ce 22 	lds	r24, 0x22CE	; 0x8022ce <tc_tcd0_ccb_callback>
    6fd8:	90 91 cf 22 	lds	r25, 0x22CF	; 0x8022cf <tc_tcd0_ccb_callback+0x1>
    6fdc:	fc 01       	movw	r30, r24
    6fde:	19 95       	eicall
    6fe0:	00 00       	nop
    6fe2:	df 91       	pop	r29
    6fe4:	cf 91       	pop	r28
    6fe6:	ff 91       	pop	r31
    6fe8:	ef 91       	pop	r30
    6fea:	bf 91       	pop	r27
    6fec:	af 91       	pop	r26
    6fee:	9f 91       	pop	r25
    6ff0:	8f 91       	pop	r24
    6ff2:	7f 91       	pop	r23
    6ff4:	6f 91       	pop	r22
    6ff6:	5f 91       	pop	r21
    6ff8:	4f 91       	pop	r20
    6ffa:	3f 91       	pop	r19
    6ffc:	2f 91       	pop	r18
    6ffe:	0f 90       	pop	r0
    7000:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7004:	0f 90       	pop	r0
    7006:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    700a:	0f 90       	pop	r0
    700c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7010:	0f 90       	pop	r0
    7012:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7016:	0f 90       	pop	r0
    7018:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    701c:	0f 90       	pop	r0
    701e:	1f 90       	pop	r1
    7020:	18 95       	reti

00007022 <__vector_81>:
    7022:	1f 92       	push	r1
    7024:	0f 92       	push	r0
    7026:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    702a:	0f 92       	push	r0
    702c:	11 24       	eor	r1, r1
    702e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7032:	0f 92       	push	r0
    7034:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7038:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    703c:	0f 92       	push	r0
    703e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7042:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7046:	0f 92       	push	r0
    7048:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    704c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7050:	0f 92       	push	r0
    7052:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7056:	2f 93       	push	r18
    7058:	3f 93       	push	r19
    705a:	4f 93       	push	r20
    705c:	5f 93       	push	r21
    705e:	6f 93       	push	r22
    7060:	7f 93       	push	r23
    7062:	8f 93       	push	r24
    7064:	9f 93       	push	r25
    7066:	af 93       	push	r26
    7068:	bf 93       	push	r27
    706a:	ef 93       	push	r30
    706c:	ff 93       	push	r31
    706e:	cf 93       	push	r28
    7070:	df 93       	push	r29
    7072:	cd b7       	in	r28, 0x3d	; 61
    7074:	de b7       	in	r29, 0x3e	; 62
    7076:	80 91 d0 22 	lds	r24, 0x22D0	; 0x8022d0 <tc_tcd0_ccc_callback>
    707a:	90 91 d1 22 	lds	r25, 0x22D1	; 0x8022d1 <tc_tcd0_ccc_callback+0x1>
    707e:	89 2b       	or	r24, r25
    7080:	31 f0       	breq	.+12     	; 0x708e <__vector_81+0x6c>
    7082:	80 91 d0 22 	lds	r24, 0x22D0	; 0x8022d0 <tc_tcd0_ccc_callback>
    7086:	90 91 d1 22 	lds	r25, 0x22D1	; 0x8022d1 <tc_tcd0_ccc_callback+0x1>
    708a:	fc 01       	movw	r30, r24
    708c:	19 95       	eicall
    708e:	00 00       	nop
    7090:	df 91       	pop	r29
    7092:	cf 91       	pop	r28
    7094:	ff 91       	pop	r31
    7096:	ef 91       	pop	r30
    7098:	bf 91       	pop	r27
    709a:	af 91       	pop	r26
    709c:	9f 91       	pop	r25
    709e:	8f 91       	pop	r24
    70a0:	7f 91       	pop	r23
    70a2:	6f 91       	pop	r22
    70a4:	5f 91       	pop	r21
    70a6:	4f 91       	pop	r20
    70a8:	3f 91       	pop	r19
    70aa:	2f 91       	pop	r18
    70ac:	0f 90       	pop	r0
    70ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    70b2:	0f 90       	pop	r0
    70b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    70b8:	0f 90       	pop	r0
    70ba:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70be:	0f 90       	pop	r0
    70c0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70c4:	0f 90       	pop	r0
    70c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    70ca:	0f 90       	pop	r0
    70cc:	1f 90       	pop	r1
    70ce:	18 95       	reti

000070d0 <__vector_82>:
    70d0:	1f 92       	push	r1
    70d2:	0f 92       	push	r0
    70d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    70d8:	0f 92       	push	r0
    70da:	11 24       	eor	r1, r1
    70dc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70e0:	0f 92       	push	r0
    70e2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70e6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70ea:	0f 92       	push	r0
    70ec:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    70f4:	0f 92       	push	r0
    70f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    70fa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    70fe:	0f 92       	push	r0
    7100:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7104:	2f 93       	push	r18
    7106:	3f 93       	push	r19
    7108:	4f 93       	push	r20
    710a:	5f 93       	push	r21
    710c:	6f 93       	push	r22
    710e:	7f 93       	push	r23
    7110:	8f 93       	push	r24
    7112:	9f 93       	push	r25
    7114:	af 93       	push	r26
    7116:	bf 93       	push	r27
    7118:	ef 93       	push	r30
    711a:	ff 93       	push	r31
    711c:	cf 93       	push	r28
    711e:	df 93       	push	r29
    7120:	cd b7       	in	r28, 0x3d	; 61
    7122:	de b7       	in	r29, 0x3e	; 62
    7124:	80 91 d2 22 	lds	r24, 0x22D2	; 0x8022d2 <tc_tcd0_ccd_callback>
    7128:	90 91 d3 22 	lds	r25, 0x22D3	; 0x8022d3 <tc_tcd0_ccd_callback+0x1>
    712c:	89 2b       	or	r24, r25
    712e:	31 f0       	breq	.+12     	; 0x713c <__vector_82+0x6c>
    7130:	80 91 d2 22 	lds	r24, 0x22D2	; 0x8022d2 <tc_tcd0_ccd_callback>
    7134:	90 91 d3 22 	lds	r25, 0x22D3	; 0x8022d3 <tc_tcd0_ccd_callback+0x1>
    7138:	fc 01       	movw	r30, r24
    713a:	19 95       	eicall
    713c:	00 00       	nop
    713e:	df 91       	pop	r29
    7140:	cf 91       	pop	r28
    7142:	ff 91       	pop	r31
    7144:	ef 91       	pop	r30
    7146:	bf 91       	pop	r27
    7148:	af 91       	pop	r26
    714a:	9f 91       	pop	r25
    714c:	8f 91       	pop	r24
    714e:	7f 91       	pop	r23
    7150:	6f 91       	pop	r22
    7152:	5f 91       	pop	r21
    7154:	4f 91       	pop	r20
    7156:	3f 91       	pop	r19
    7158:	2f 91       	pop	r18
    715a:	0f 90       	pop	r0
    715c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7160:	0f 90       	pop	r0
    7162:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7166:	0f 90       	pop	r0
    7168:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    716c:	0f 90       	pop	r0
    716e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7172:	0f 90       	pop	r0
    7174:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7178:	0f 90       	pop	r0
    717a:	1f 90       	pop	r1
    717c:	18 95       	reti

0000717e <__vector_83>:
    717e:	1f 92       	push	r1
    7180:	0f 92       	push	r0
    7182:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7186:	0f 92       	push	r0
    7188:	11 24       	eor	r1, r1
    718a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    718e:	0f 92       	push	r0
    7190:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7194:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7198:	0f 92       	push	r0
    719a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    719e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    71a2:	0f 92       	push	r0
    71a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    71a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    71ac:	0f 92       	push	r0
    71ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    71b2:	2f 93       	push	r18
    71b4:	3f 93       	push	r19
    71b6:	4f 93       	push	r20
    71b8:	5f 93       	push	r21
    71ba:	6f 93       	push	r22
    71bc:	7f 93       	push	r23
    71be:	8f 93       	push	r24
    71c0:	9f 93       	push	r25
    71c2:	af 93       	push	r26
    71c4:	bf 93       	push	r27
    71c6:	ef 93       	push	r30
    71c8:	ff 93       	push	r31
    71ca:	cf 93       	push	r28
    71cc:	df 93       	push	r29
    71ce:	cd b7       	in	r28, 0x3d	; 61
    71d0:	de b7       	in	r29, 0x3e	; 62
    71d2:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <tc_tcd1_ovf_callback>
    71d6:	90 91 d5 22 	lds	r25, 0x22D5	; 0x8022d5 <tc_tcd1_ovf_callback+0x1>
    71da:	89 2b       	or	r24, r25
    71dc:	31 f0       	breq	.+12     	; 0x71ea <__vector_83+0x6c>
    71de:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <tc_tcd1_ovf_callback>
    71e2:	90 91 d5 22 	lds	r25, 0x22D5	; 0x8022d5 <tc_tcd1_ovf_callback+0x1>
    71e6:	fc 01       	movw	r30, r24
    71e8:	19 95       	eicall
    71ea:	00 00       	nop
    71ec:	df 91       	pop	r29
    71ee:	cf 91       	pop	r28
    71f0:	ff 91       	pop	r31
    71f2:	ef 91       	pop	r30
    71f4:	bf 91       	pop	r27
    71f6:	af 91       	pop	r26
    71f8:	9f 91       	pop	r25
    71fa:	8f 91       	pop	r24
    71fc:	7f 91       	pop	r23
    71fe:	6f 91       	pop	r22
    7200:	5f 91       	pop	r21
    7202:	4f 91       	pop	r20
    7204:	3f 91       	pop	r19
    7206:	2f 91       	pop	r18
    7208:	0f 90       	pop	r0
    720a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    720e:	0f 90       	pop	r0
    7210:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7214:	0f 90       	pop	r0
    7216:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    721a:	0f 90       	pop	r0
    721c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7220:	0f 90       	pop	r0
    7222:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7226:	0f 90       	pop	r0
    7228:	1f 90       	pop	r1
    722a:	18 95       	reti

0000722c <__vector_84>:
    722c:	1f 92       	push	r1
    722e:	0f 92       	push	r0
    7230:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7234:	0f 92       	push	r0
    7236:	11 24       	eor	r1, r1
    7238:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    723c:	0f 92       	push	r0
    723e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7242:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7246:	0f 92       	push	r0
    7248:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    724c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7250:	0f 92       	push	r0
    7252:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7256:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    725a:	0f 92       	push	r0
    725c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7260:	2f 93       	push	r18
    7262:	3f 93       	push	r19
    7264:	4f 93       	push	r20
    7266:	5f 93       	push	r21
    7268:	6f 93       	push	r22
    726a:	7f 93       	push	r23
    726c:	8f 93       	push	r24
    726e:	9f 93       	push	r25
    7270:	af 93       	push	r26
    7272:	bf 93       	push	r27
    7274:	ef 93       	push	r30
    7276:	ff 93       	push	r31
    7278:	cf 93       	push	r28
    727a:	df 93       	push	r29
    727c:	cd b7       	in	r28, 0x3d	; 61
    727e:	de b7       	in	r29, 0x3e	; 62
    7280:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <tc_tcd1_err_callback>
    7284:	90 91 d7 22 	lds	r25, 0x22D7	; 0x8022d7 <tc_tcd1_err_callback+0x1>
    7288:	89 2b       	or	r24, r25
    728a:	31 f0       	breq	.+12     	; 0x7298 <__vector_84+0x6c>
    728c:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <tc_tcd1_err_callback>
    7290:	90 91 d7 22 	lds	r25, 0x22D7	; 0x8022d7 <tc_tcd1_err_callback+0x1>
    7294:	fc 01       	movw	r30, r24
    7296:	19 95       	eicall
    7298:	00 00       	nop
    729a:	df 91       	pop	r29
    729c:	cf 91       	pop	r28
    729e:	ff 91       	pop	r31
    72a0:	ef 91       	pop	r30
    72a2:	bf 91       	pop	r27
    72a4:	af 91       	pop	r26
    72a6:	9f 91       	pop	r25
    72a8:	8f 91       	pop	r24
    72aa:	7f 91       	pop	r23
    72ac:	6f 91       	pop	r22
    72ae:	5f 91       	pop	r21
    72b0:	4f 91       	pop	r20
    72b2:	3f 91       	pop	r19
    72b4:	2f 91       	pop	r18
    72b6:	0f 90       	pop	r0
    72b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    72bc:	0f 90       	pop	r0
    72be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    72c2:	0f 90       	pop	r0
    72c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    72c8:	0f 90       	pop	r0
    72ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    72ce:	0f 90       	pop	r0
    72d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    72d4:	0f 90       	pop	r0
    72d6:	1f 90       	pop	r1
    72d8:	18 95       	reti

000072da <__vector_85>:
    72da:	1f 92       	push	r1
    72dc:	0f 92       	push	r0
    72de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    72e2:	0f 92       	push	r0
    72e4:	11 24       	eor	r1, r1
    72e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    72ea:	0f 92       	push	r0
    72ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    72f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    72f4:	0f 92       	push	r0
    72f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    72fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    72fe:	0f 92       	push	r0
    7300:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7304:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7308:	0f 92       	push	r0
    730a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    730e:	2f 93       	push	r18
    7310:	3f 93       	push	r19
    7312:	4f 93       	push	r20
    7314:	5f 93       	push	r21
    7316:	6f 93       	push	r22
    7318:	7f 93       	push	r23
    731a:	8f 93       	push	r24
    731c:	9f 93       	push	r25
    731e:	af 93       	push	r26
    7320:	bf 93       	push	r27
    7322:	ef 93       	push	r30
    7324:	ff 93       	push	r31
    7326:	cf 93       	push	r28
    7328:	df 93       	push	r29
    732a:	cd b7       	in	r28, 0x3d	; 61
    732c:	de b7       	in	r29, 0x3e	; 62
    732e:	80 91 d8 22 	lds	r24, 0x22D8	; 0x8022d8 <tc_tcd1_cca_callback>
    7332:	90 91 d9 22 	lds	r25, 0x22D9	; 0x8022d9 <tc_tcd1_cca_callback+0x1>
    7336:	89 2b       	or	r24, r25
    7338:	31 f0       	breq	.+12     	; 0x7346 <__vector_85+0x6c>
    733a:	80 91 d8 22 	lds	r24, 0x22D8	; 0x8022d8 <tc_tcd1_cca_callback>
    733e:	90 91 d9 22 	lds	r25, 0x22D9	; 0x8022d9 <tc_tcd1_cca_callback+0x1>
    7342:	fc 01       	movw	r30, r24
    7344:	19 95       	eicall
    7346:	00 00       	nop
    7348:	df 91       	pop	r29
    734a:	cf 91       	pop	r28
    734c:	ff 91       	pop	r31
    734e:	ef 91       	pop	r30
    7350:	bf 91       	pop	r27
    7352:	af 91       	pop	r26
    7354:	9f 91       	pop	r25
    7356:	8f 91       	pop	r24
    7358:	7f 91       	pop	r23
    735a:	6f 91       	pop	r22
    735c:	5f 91       	pop	r21
    735e:	4f 91       	pop	r20
    7360:	3f 91       	pop	r19
    7362:	2f 91       	pop	r18
    7364:	0f 90       	pop	r0
    7366:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    736a:	0f 90       	pop	r0
    736c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7370:	0f 90       	pop	r0
    7372:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7376:	0f 90       	pop	r0
    7378:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    737c:	0f 90       	pop	r0
    737e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7382:	0f 90       	pop	r0
    7384:	1f 90       	pop	r1
    7386:	18 95       	reti

00007388 <__vector_86>:
    7388:	1f 92       	push	r1
    738a:	0f 92       	push	r0
    738c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7390:	0f 92       	push	r0
    7392:	11 24       	eor	r1, r1
    7394:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7398:	0f 92       	push	r0
    739a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    739e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73a2:	0f 92       	push	r0
    73a4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73a8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73ac:	0f 92       	push	r0
    73ae:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73b2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    73b6:	0f 92       	push	r0
    73b8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    73bc:	2f 93       	push	r18
    73be:	3f 93       	push	r19
    73c0:	4f 93       	push	r20
    73c2:	5f 93       	push	r21
    73c4:	6f 93       	push	r22
    73c6:	7f 93       	push	r23
    73c8:	8f 93       	push	r24
    73ca:	9f 93       	push	r25
    73cc:	af 93       	push	r26
    73ce:	bf 93       	push	r27
    73d0:	ef 93       	push	r30
    73d2:	ff 93       	push	r31
    73d4:	cf 93       	push	r28
    73d6:	df 93       	push	r29
    73d8:	cd b7       	in	r28, 0x3d	; 61
    73da:	de b7       	in	r29, 0x3e	; 62
    73dc:	80 91 da 22 	lds	r24, 0x22DA	; 0x8022da <tc_tcd1_ccb_callback>
    73e0:	90 91 db 22 	lds	r25, 0x22DB	; 0x8022db <tc_tcd1_ccb_callback+0x1>
    73e4:	89 2b       	or	r24, r25
    73e6:	31 f0       	breq	.+12     	; 0x73f4 <__vector_86+0x6c>
    73e8:	80 91 da 22 	lds	r24, 0x22DA	; 0x8022da <tc_tcd1_ccb_callback>
    73ec:	90 91 db 22 	lds	r25, 0x22DB	; 0x8022db <tc_tcd1_ccb_callback+0x1>
    73f0:	fc 01       	movw	r30, r24
    73f2:	19 95       	eicall
    73f4:	00 00       	nop
    73f6:	df 91       	pop	r29
    73f8:	cf 91       	pop	r28
    73fa:	ff 91       	pop	r31
    73fc:	ef 91       	pop	r30
    73fe:	bf 91       	pop	r27
    7400:	af 91       	pop	r26
    7402:	9f 91       	pop	r25
    7404:	8f 91       	pop	r24
    7406:	7f 91       	pop	r23
    7408:	6f 91       	pop	r22
    740a:	5f 91       	pop	r21
    740c:	4f 91       	pop	r20
    740e:	3f 91       	pop	r19
    7410:	2f 91       	pop	r18
    7412:	0f 90       	pop	r0
    7414:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7418:	0f 90       	pop	r0
    741a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    741e:	0f 90       	pop	r0
    7420:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7424:	0f 90       	pop	r0
    7426:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    742a:	0f 90       	pop	r0
    742c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7430:	0f 90       	pop	r0
    7432:	1f 90       	pop	r1
    7434:	18 95       	reti

00007436 <__vector_47>:
    7436:	1f 92       	push	r1
    7438:	0f 92       	push	r0
    743a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    743e:	0f 92       	push	r0
    7440:	11 24       	eor	r1, r1
    7442:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7446:	0f 92       	push	r0
    7448:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    744c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7450:	0f 92       	push	r0
    7452:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7456:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    745a:	0f 92       	push	r0
    745c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7460:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7464:	0f 92       	push	r0
    7466:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    746a:	2f 93       	push	r18
    746c:	3f 93       	push	r19
    746e:	4f 93       	push	r20
    7470:	5f 93       	push	r21
    7472:	6f 93       	push	r22
    7474:	7f 93       	push	r23
    7476:	8f 93       	push	r24
    7478:	9f 93       	push	r25
    747a:	af 93       	push	r26
    747c:	bf 93       	push	r27
    747e:	ef 93       	push	r30
    7480:	ff 93       	push	r31
    7482:	cf 93       	push	r28
    7484:	df 93       	push	r29
    7486:	cd b7       	in	r28, 0x3d	; 61
    7488:	de b7       	in	r29, 0x3e	; 62
    748a:	80 91 dc 22 	lds	r24, 0x22DC	; 0x8022dc <tc_tce0_ovf_callback>
    748e:	90 91 dd 22 	lds	r25, 0x22DD	; 0x8022dd <tc_tce0_ovf_callback+0x1>
    7492:	89 2b       	or	r24, r25
    7494:	31 f0       	breq	.+12     	; 0x74a2 <__vector_47+0x6c>
    7496:	80 91 dc 22 	lds	r24, 0x22DC	; 0x8022dc <tc_tce0_ovf_callback>
    749a:	90 91 dd 22 	lds	r25, 0x22DD	; 0x8022dd <tc_tce0_ovf_callback+0x1>
    749e:	fc 01       	movw	r30, r24
    74a0:	19 95       	eicall
    74a2:	00 00       	nop
    74a4:	df 91       	pop	r29
    74a6:	cf 91       	pop	r28
    74a8:	ff 91       	pop	r31
    74aa:	ef 91       	pop	r30
    74ac:	bf 91       	pop	r27
    74ae:	af 91       	pop	r26
    74b0:	9f 91       	pop	r25
    74b2:	8f 91       	pop	r24
    74b4:	7f 91       	pop	r23
    74b6:	6f 91       	pop	r22
    74b8:	5f 91       	pop	r21
    74ba:	4f 91       	pop	r20
    74bc:	3f 91       	pop	r19
    74be:	2f 91       	pop	r18
    74c0:	0f 90       	pop	r0
    74c2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    74c6:	0f 90       	pop	r0
    74c8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    74cc:	0f 90       	pop	r0
    74ce:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    74d2:	0f 90       	pop	r0
    74d4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    74d8:	0f 90       	pop	r0
    74da:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    74de:	0f 90       	pop	r0
    74e0:	1f 90       	pop	r1
    74e2:	18 95       	reti

000074e4 <__vector_48>:
    74e4:	1f 92       	push	r1
    74e6:	0f 92       	push	r0
    74e8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    74ec:	0f 92       	push	r0
    74ee:	11 24       	eor	r1, r1
    74f0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    74f4:	0f 92       	push	r0
    74f6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    74fa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    74fe:	0f 92       	push	r0
    7500:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7504:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7508:	0f 92       	push	r0
    750a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    750e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7512:	0f 92       	push	r0
    7514:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7518:	2f 93       	push	r18
    751a:	3f 93       	push	r19
    751c:	4f 93       	push	r20
    751e:	5f 93       	push	r21
    7520:	6f 93       	push	r22
    7522:	7f 93       	push	r23
    7524:	8f 93       	push	r24
    7526:	9f 93       	push	r25
    7528:	af 93       	push	r26
    752a:	bf 93       	push	r27
    752c:	ef 93       	push	r30
    752e:	ff 93       	push	r31
    7530:	cf 93       	push	r28
    7532:	df 93       	push	r29
    7534:	cd b7       	in	r28, 0x3d	; 61
    7536:	de b7       	in	r29, 0x3e	; 62
    7538:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <tc_tce0_err_callback>
    753c:	90 91 df 22 	lds	r25, 0x22DF	; 0x8022df <tc_tce0_err_callback+0x1>
    7540:	89 2b       	or	r24, r25
    7542:	31 f0       	breq	.+12     	; 0x7550 <__vector_48+0x6c>
    7544:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <tc_tce0_err_callback>
    7548:	90 91 df 22 	lds	r25, 0x22DF	; 0x8022df <tc_tce0_err_callback+0x1>
    754c:	fc 01       	movw	r30, r24
    754e:	19 95       	eicall
    7550:	00 00       	nop
    7552:	df 91       	pop	r29
    7554:	cf 91       	pop	r28
    7556:	ff 91       	pop	r31
    7558:	ef 91       	pop	r30
    755a:	bf 91       	pop	r27
    755c:	af 91       	pop	r26
    755e:	9f 91       	pop	r25
    7560:	8f 91       	pop	r24
    7562:	7f 91       	pop	r23
    7564:	6f 91       	pop	r22
    7566:	5f 91       	pop	r21
    7568:	4f 91       	pop	r20
    756a:	3f 91       	pop	r19
    756c:	2f 91       	pop	r18
    756e:	0f 90       	pop	r0
    7570:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7574:	0f 90       	pop	r0
    7576:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    757a:	0f 90       	pop	r0
    757c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7580:	0f 90       	pop	r0
    7582:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7586:	0f 90       	pop	r0
    7588:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    758c:	0f 90       	pop	r0
    758e:	1f 90       	pop	r1
    7590:	18 95       	reti

00007592 <__vector_49>:
    7592:	1f 92       	push	r1
    7594:	0f 92       	push	r0
    7596:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    759a:	0f 92       	push	r0
    759c:	11 24       	eor	r1, r1
    759e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75a2:	0f 92       	push	r0
    75a4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75a8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75ac:	0f 92       	push	r0
    75ae:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75b2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75b6:	0f 92       	push	r0
    75b8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75bc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75c0:	0f 92       	push	r0
    75c2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75c6:	2f 93       	push	r18
    75c8:	3f 93       	push	r19
    75ca:	4f 93       	push	r20
    75cc:	5f 93       	push	r21
    75ce:	6f 93       	push	r22
    75d0:	7f 93       	push	r23
    75d2:	8f 93       	push	r24
    75d4:	9f 93       	push	r25
    75d6:	af 93       	push	r26
    75d8:	bf 93       	push	r27
    75da:	ef 93       	push	r30
    75dc:	ff 93       	push	r31
    75de:	cf 93       	push	r28
    75e0:	df 93       	push	r29
    75e2:	cd b7       	in	r28, 0x3d	; 61
    75e4:	de b7       	in	r29, 0x3e	; 62
    75e6:	80 91 e0 22 	lds	r24, 0x22E0	; 0x8022e0 <tc_tce0_cca_callback>
    75ea:	90 91 e1 22 	lds	r25, 0x22E1	; 0x8022e1 <tc_tce0_cca_callback+0x1>
    75ee:	89 2b       	or	r24, r25
    75f0:	31 f0       	breq	.+12     	; 0x75fe <__vector_49+0x6c>
    75f2:	80 91 e0 22 	lds	r24, 0x22E0	; 0x8022e0 <tc_tce0_cca_callback>
    75f6:	90 91 e1 22 	lds	r25, 0x22E1	; 0x8022e1 <tc_tce0_cca_callback+0x1>
    75fa:	fc 01       	movw	r30, r24
    75fc:	19 95       	eicall
    75fe:	00 00       	nop
    7600:	df 91       	pop	r29
    7602:	cf 91       	pop	r28
    7604:	ff 91       	pop	r31
    7606:	ef 91       	pop	r30
    7608:	bf 91       	pop	r27
    760a:	af 91       	pop	r26
    760c:	9f 91       	pop	r25
    760e:	8f 91       	pop	r24
    7610:	7f 91       	pop	r23
    7612:	6f 91       	pop	r22
    7614:	5f 91       	pop	r21
    7616:	4f 91       	pop	r20
    7618:	3f 91       	pop	r19
    761a:	2f 91       	pop	r18
    761c:	0f 90       	pop	r0
    761e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7622:	0f 90       	pop	r0
    7624:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7628:	0f 90       	pop	r0
    762a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    762e:	0f 90       	pop	r0
    7630:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7634:	0f 90       	pop	r0
    7636:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    763a:	0f 90       	pop	r0
    763c:	1f 90       	pop	r1
    763e:	18 95       	reti

00007640 <__vector_50>:
    7640:	1f 92       	push	r1
    7642:	0f 92       	push	r0
    7644:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7648:	0f 92       	push	r0
    764a:	11 24       	eor	r1, r1
    764c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7650:	0f 92       	push	r0
    7652:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7656:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    765a:	0f 92       	push	r0
    765c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7660:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7664:	0f 92       	push	r0
    7666:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    766a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    766e:	0f 92       	push	r0
    7670:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7674:	2f 93       	push	r18
    7676:	3f 93       	push	r19
    7678:	4f 93       	push	r20
    767a:	5f 93       	push	r21
    767c:	6f 93       	push	r22
    767e:	7f 93       	push	r23
    7680:	8f 93       	push	r24
    7682:	9f 93       	push	r25
    7684:	af 93       	push	r26
    7686:	bf 93       	push	r27
    7688:	ef 93       	push	r30
    768a:	ff 93       	push	r31
    768c:	cf 93       	push	r28
    768e:	df 93       	push	r29
    7690:	cd b7       	in	r28, 0x3d	; 61
    7692:	de b7       	in	r29, 0x3e	; 62
    7694:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <tc_tce0_ccb_callback>
    7698:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <tc_tce0_ccb_callback+0x1>
    769c:	89 2b       	or	r24, r25
    769e:	31 f0       	breq	.+12     	; 0x76ac <__vector_50+0x6c>
    76a0:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <tc_tce0_ccb_callback>
    76a4:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <tc_tce0_ccb_callback+0x1>
    76a8:	fc 01       	movw	r30, r24
    76aa:	19 95       	eicall
    76ac:	00 00       	nop
    76ae:	df 91       	pop	r29
    76b0:	cf 91       	pop	r28
    76b2:	ff 91       	pop	r31
    76b4:	ef 91       	pop	r30
    76b6:	bf 91       	pop	r27
    76b8:	af 91       	pop	r26
    76ba:	9f 91       	pop	r25
    76bc:	8f 91       	pop	r24
    76be:	7f 91       	pop	r23
    76c0:	6f 91       	pop	r22
    76c2:	5f 91       	pop	r21
    76c4:	4f 91       	pop	r20
    76c6:	3f 91       	pop	r19
    76c8:	2f 91       	pop	r18
    76ca:	0f 90       	pop	r0
    76cc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    76d0:	0f 90       	pop	r0
    76d2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    76d6:	0f 90       	pop	r0
    76d8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    76dc:	0f 90       	pop	r0
    76de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    76e2:	0f 90       	pop	r0
    76e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    76e8:	0f 90       	pop	r0
    76ea:	1f 90       	pop	r1
    76ec:	18 95       	reti

000076ee <__vector_51>:
    76ee:	1f 92       	push	r1
    76f0:	0f 92       	push	r0
    76f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    76f6:	0f 92       	push	r0
    76f8:	11 24       	eor	r1, r1
    76fa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    76fe:	0f 92       	push	r0
    7700:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7704:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7708:	0f 92       	push	r0
    770a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    770e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7712:	0f 92       	push	r0
    7714:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7718:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    771c:	0f 92       	push	r0
    771e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7722:	2f 93       	push	r18
    7724:	3f 93       	push	r19
    7726:	4f 93       	push	r20
    7728:	5f 93       	push	r21
    772a:	6f 93       	push	r22
    772c:	7f 93       	push	r23
    772e:	8f 93       	push	r24
    7730:	9f 93       	push	r25
    7732:	af 93       	push	r26
    7734:	bf 93       	push	r27
    7736:	ef 93       	push	r30
    7738:	ff 93       	push	r31
    773a:	cf 93       	push	r28
    773c:	df 93       	push	r29
    773e:	cd b7       	in	r28, 0x3d	; 61
    7740:	de b7       	in	r29, 0x3e	; 62
    7742:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <tc_tce0_ccc_callback>
    7746:	90 91 e5 22 	lds	r25, 0x22E5	; 0x8022e5 <tc_tce0_ccc_callback+0x1>
    774a:	89 2b       	or	r24, r25
    774c:	31 f0       	breq	.+12     	; 0x775a <__vector_51+0x6c>
    774e:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <tc_tce0_ccc_callback>
    7752:	90 91 e5 22 	lds	r25, 0x22E5	; 0x8022e5 <tc_tce0_ccc_callback+0x1>
    7756:	fc 01       	movw	r30, r24
    7758:	19 95       	eicall
    775a:	00 00       	nop
    775c:	df 91       	pop	r29
    775e:	cf 91       	pop	r28
    7760:	ff 91       	pop	r31
    7762:	ef 91       	pop	r30
    7764:	bf 91       	pop	r27
    7766:	af 91       	pop	r26
    7768:	9f 91       	pop	r25
    776a:	8f 91       	pop	r24
    776c:	7f 91       	pop	r23
    776e:	6f 91       	pop	r22
    7770:	5f 91       	pop	r21
    7772:	4f 91       	pop	r20
    7774:	3f 91       	pop	r19
    7776:	2f 91       	pop	r18
    7778:	0f 90       	pop	r0
    777a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    777e:	0f 90       	pop	r0
    7780:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7784:	0f 90       	pop	r0
    7786:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    778a:	0f 90       	pop	r0
    778c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7790:	0f 90       	pop	r0
    7792:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7796:	0f 90       	pop	r0
    7798:	1f 90       	pop	r1
    779a:	18 95       	reti

0000779c <__vector_52>:
    779c:	1f 92       	push	r1
    779e:	0f 92       	push	r0
    77a0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    77a4:	0f 92       	push	r0
    77a6:	11 24       	eor	r1, r1
    77a8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77ac:	0f 92       	push	r0
    77ae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77b2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77b6:	0f 92       	push	r0
    77b8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77bc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77c0:	0f 92       	push	r0
    77c2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77c6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    77ca:	0f 92       	push	r0
    77cc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    77d0:	2f 93       	push	r18
    77d2:	3f 93       	push	r19
    77d4:	4f 93       	push	r20
    77d6:	5f 93       	push	r21
    77d8:	6f 93       	push	r22
    77da:	7f 93       	push	r23
    77dc:	8f 93       	push	r24
    77de:	9f 93       	push	r25
    77e0:	af 93       	push	r26
    77e2:	bf 93       	push	r27
    77e4:	ef 93       	push	r30
    77e6:	ff 93       	push	r31
    77e8:	cf 93       	push	r28
    77ea:	df 93       	push	r29
    77ec:	cd b7       	in	r28, 0x3d	; 61
    77ee:	de b7       	in	r29, 0x3e	; 62
    77f0:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <tc_tce0_ccd_callback>
    77f4:	90 91 e7 22 	lds	r25, 0x22E7	; 0x8022e7 <tc_tce0_ccd_callback+0x1>
    77f8:	89 2b       	or	r24, r25
    77fa:	31 f0       	breq	.+12     	; 0x7808 <__vector_52+0x6c>
    77fc:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <tc_tce0_ccd_callback>
    7800:	90 91 e7 22 	lds	r25, 0x22E7	; 0x8022e7 <tc_tce0_ccd_callback+0x1>
    7804:	fc 01       	movw	r30, r24
    7806:	19 95       	eicall
    7808:	00 00       	nop
    780a:	df 91       	pop	r29
    780c:	cf 91       	pop	r28
    780e:	ff 91       	pop	r31
    7810:	ef 91       	pop	r30
    7812:	bf 91       	pop	r27
    7814:	af 91       	pop	r26
    7816:	9f 91       	pop	r25
    7818:	8f 91       	pop	r24
    781a:	7f 91       	pop	r23
    781c:	6f 91       	pop	r22
    781e:	5f 91       	pop	r21
    7820:	4f 91       	pop	r20
    7822:	3f 91       	pop	r19
    7824:	2f 91       	pop	r18
    7826:	0f 90       	pop	r0
    7828:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    782c:	0f 90       	pop	r0
    782e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7832:	0f 90       	pop	r0
    7834:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7838:	0f 90       	pop	r0
    783a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    783e:	0f 90       	pop	r0
    7840:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7844:	0f 90       	pop	r0
    7846:	1f 90       	pop	r1
    7848:	18 95       	reti

0000784a <__vector_53>:
    784a:	1f 92       	push	r1
    784c:	0f 92       	push	r0
    784e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7852:	0f 92       	push	r0
    7854:	11 24       	eor	r1, r1
    7856:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    785a:	0f 92       	push	r0
    785c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7860:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7864:	0f 92       	push	r0
    7866:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    786a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    786e:	0f 92       	push	r0
    7870:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7874:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7878:	0f 92       	push	r0
    787a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    787e:	2f 93       	push	r18
    7880:	3f 93       	push	r19
    7882:	4f 93       	push	r20
    7884:	5f 93       	push	r21
    7886:	6f 93       	push	r22
    7888:	7f 93       	push	r23
    788a:	8f 93       	push	r24
    788c:	9f 93       	push	r25
    788e:	af 93       	push	r26
    7890:	bf 93       	push	r27
    7892:	ef 93       	push	r30
    7894:	ff 93       	push	r31
    7896:	cf 93       	push	r28
    7898:	df 93       	push	r29
    789a:	cd b7       	in	r28, 0x3d	; 61
    789c:	de b7       	in	r29, 0x3e	; 62
    789e:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <tc_tce1_ovf_callback>
    78a2:	90 91 e9 22 	lds	r25, 0x22E9	; 0x8022e9 <tc_tce1_ovf_callback+0x1>
    78a6:	89 2b       	or	r24, r25
    78a8:	31 f0       	breq	.+12     	; 0x78b6 <__vector_53+0x6c>
    78aa:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <tc_tce1_ovf_callback>
    78ae:	90 91 e9 22 	lds	r25, 0x22E9	; 0x8022e9 <tc_tce1_ovf_callback+0x1>
    78b2:	fc 01       	movw	r30, r24
    78b4:	19 95       	eicall
    78b6:	00 00       	nop
    78b8:	df 91       	pop	r29
    78ba:	cf 91       	pop	r28
    78bc:	ff 91       	pop	r31
    78be:	ef 91       	pop	r30
    78c0:	bf 91       	pop	r27
    78c2:	af 91       	pop	r26
    78c4:	9f 91       	pop	r25
    78c6:	8f 91       	pop	r24
    78c8:	7f 91       	pop	r23
    78ca:	6f 91       	pop	r22
    78cc:	5f 91       	pop	r21
    78ce:	4f 91       	pop	r20
    78d0:	3f 91       	pop	r19
    78d2:	2f 91       	pop	r18
    78d4:	0f 90       	pop	r0
    78d6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    78da:	0f 90       	pop	r0
    78dc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    78e0:	0f 90       	pop	r0
    78e2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    78e6:	0f 90       	pop	r0
    78e8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    78ec:	0f 90       	pop	r0
    78ee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    78f2:	0f 90       	pop	r0
    78f4:	1f 90       	pop	r1
    78f6:	18 95       	reti

000078f8 <__vector_54>:
    78f8:	1f 92       	push	r1
    78fa:	0f 92       	push	r0
    78fc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7900:	0f 92       	push	r0
    7902:	11 24       	eor	r1, r1
    7904:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7908:	0f 92       	push	r0
    790a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    790e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7912:	0f 92       	push	r0
    7914:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7918:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    791c:	0f 92       	push	r0
    791e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7922:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7926:	0f 92       	push	r0
    7928:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    792c:	2f 93       	push	r18
    792e:	3f 93       	push	r19
    7930:	4f 93       	push	r20
    7932:	5f 93       	push	r21
    7934:	6f 93       	push	r22
    7936:	7f 93       	push	r23
    7938:	8f 93       	push	r24
    793a:	9f 93       	push	r25
    793c:	af 93       	push	r26
    793e:	bf 93       	push	r27
    7940:	ef 93       	push	r30
    7942:	ff 93       	push	r31
    7944:	cf 93       	push	r28
    7946:	df 93       	push	r29
    7948:	cd b7       	in	r28, 0x3d	; 61
    794a:	de b7       	in	r29, 0x3e	; 62
    794c:	80 91 ea 22 	lds	r24, 0x22EA	; 0x8022ea <tc_tce1_err_callback>
    7950:	90 91 eb 22 	lds	r25, 0x22EB	; 0x8022eb <tc_tce1_err_callback+0x1>
    7954:	89 2b       	or	r24, r25
    7956:	31 f0       	breq	.+12     	; 0x7964 <__vector_54+0x6c>
    7958:	80 91 ea 22 	lds	r24, 0x22EA	; 0x8022ea <tc_tce1_err_callback>
    795c:	90 91 eb 22 	lds	r25, 0x22EB	; 0x8022eb <tc_tce1_err_callback+0x1>
    7960:	fc 01       	movw	r30, r24
    7962:	19 95       	eicall
    7964:	00 00       	nop
    7966:	df 91       	pop	r29
    7968:	cf 91       	pop	r28
    796a:	ff 91       	pop	r31
    796c:	ef 91       	pop	r30
    796e:	bf 91       	pop	r27
    7970:	af 91       	pop	r26
    7972:	9f 91       	pop	r25
    7974:	8f 91       	pop	r24
    7976:	7f 91       	pop	r23
    7978:	6f 91       	pop	r22
    797a:	5f 91       	pop	r21
    797c:	4f 91       	pop	r20
    797e:	3f 91       	pop	r19
    7980:	2f 91       	pop	r18
    7982:	0f 90       	pop	r0
    7984:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7988:	0f 90       	pop	r0
    798a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    798e:	0f 90       	pop	r0
    7990:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7994:	0f 90       	pop	r0
    7996:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    799a:	0f 90       	pop	r0
    799c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    79a0:	0f 90       	pop	r0
    79a2:	1f 90       	pop	r1
    79a4:	18 95       	reti

000079a6 <__vector_55>:
    79a6:	1f 92       	push	r1
    79a8:	0f 92       	push	r0
    79aa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    79ae:	0f 92       	push	r0
    79b0:	11 24       	eor	r1, r1
    79b2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79b6:	0f 92       	push	r0
    79b8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79bc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79c0:	0f 92       	push	r0
    79c2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79c6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    79ca:	0f 92       	push	r0
    79cc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    79d0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    79d4:	0f 92       	push	r0
    79d6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    79da:	2f 93       	push	r18
    79dc:	3f 93       	push	r19
    79de:	4f 93       	push	r20
    79e0:	5f 93       	push	r21
    79e2:	6f 93       	push	r22
    79e4:	7f 93       	push	r23
    79e6:	8f 93       	push	r24
    79e8:	9f 93       	push	r25
    79ea:	af 93       	push	r26
    79ec:	bf 93       	push	r27
    79ee:	ef 93       	push	r30
    79f0:	ff 93       	push	r31
    79f2:	cf 93       	push	r28
    79f4:	df 93       	push	r29
    79f6:	cd b7       	in	r28, 0x3d	; 61
    79f8:	de b7       	in	r29, 0x3e	; 62
    79fa:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <tc_tce1_cca_callback>
    79fe:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <tc_tce1_cca_callback+0x1>
    7a02:	89 2b       	or	r24, r25
    7a04:	31 f0       	breq	.+12     	; 0x7a12 <__vector_55+0x6c>
    7a06:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <tc_tce1_cca_callback>
    7a0a:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <tc_tce1_cca_callback+0x1>
    7a0e:	fc 01       	movw	r30, r24
    7a10:	19 95       	eicall
    7a12:	00 00       	nop
    7a14:	df 91       	pop	r29
    7a16:	cf 91       	pop	r28
    7a18:	ff 91       	pop	r31
    7a1a:	ef 91       	pop	r30
    7a1c:	bf 91       	pop	r27
    7a1e:	af 91       	pop	r26
    7a20:	9f 91       	pop	r25
    7a22:	8f 91       	pop	r24
    7a24:	7f 91       	pop	r23
    7a26:	6f 91       	pop	r22
    7a28:	5f 91       	pop	r21
    7a2a:	4f 91       	pop	r20
    7a2c:	3f 91       	pop	r19
    7a2e:	2f 91       	pop	r18
    7a30:	0f 90       	pop	r0
    7a32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a36:	0f 90       	pop	r0
    7a38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a3c:	0f 90       	pop	r0
    7a3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a42:	0f 90       	pop	r0
    7a44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a48:	0f 90       	pop	r0
    7a4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7a4e:	0f 90       	pop	r0
    7a50:	1f 90       	pop	r1
    7a52:	18 95       	reti

00007a54 <__vector_56>:
    7a54:	1f 92       	push	r1
    7a56:	0f 92       	push	r0
    7a58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7a5c:	0f 92       	push	r0
    7a5e:	11 24       	eor	r1, r1
    7a60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a64:	0f 92       	push	r0
    7a66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a6e:	0f 92       	push	r0
    7a70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a78:	0f 92       	push	r0
    7a7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a82:	0f 92       	push	r0
    7a84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a88:	2f 93       	push	r18
    7a8a:	3f 93       	push	r19
    7a8c:	4f 93       	push	r20
    7a8e:	5f 93       	push	r21
    7a90:	6f 93       	push	r22
    7a92:	7f 93       	push	r23
    7a94:	8f 93       	push	r24
    7a96:	9f 93       	push	r25
    7a98:	af 93       	push	r26
    7a9a:	bf 93       	push	r27
    7a9c:	ef 93       	push	r30
    7a9e:	ff 93       	push	r31
    7aa0:	cf 93       	push	r28
    7aa2:	df 93       	push	r29
    7aa4:	cd b7       	in	r28, 0x3d	; 61
    7aa6:	de b7       	in	r29, 0x3e	; 62
    7aa8:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <tc_tce1_ccb_callback>
    7aac:	90 91 ef 22 	lds	r25, 0x22EF	; 0x8022ef <tc_tce1_ccb_callback+0x1>
    7ab0:	89 2b       	or	r24, r25
    7ab2:	31 f0       	breq	.+12     	; 0x7ac0 <__vector_56+0x6c>
    7ab4:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <tc_tce1_ccb_callback>
    7ab8:	90 91 ef 22 	lds	r25, 0x22EF	; 0x8022ef <tc_tce1_ccb_callback+0x1>
    7abc:	fc 01       	movw	r30, r24
    7abe:	19 95       	eicall
    7ac0:	00 00       	nop
    7ac2:	df 91       	pop	r29
    7ac4:	cf 91       	pop	r28
    7ac6:	ff 91       	pop	r31
    7ac8:	ef 91       	pop	r30
    7aca:	bf 91       	pop	r27
    7acc:	af 91       	pop	r26
    7ace:	9f 91       	pop	r25
    7ad0:	8f 91       	pop	r24
    7ad2:	7f 91       	pop	r23
    7ad4:	6f 91       	pop	r22
    7ad6:	5f 91       	pop	r21
    7ad8:	4f 91       	pop	r20
    7ada:	3f 91       	pop	r19
    7adc:	2f 91       	pop	r18
    7ade:	0f 90       	pop	r0
    7ae0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7ae4:	0f 90       	pop	r0
    7ae6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7aea:	0f 90       	pop	r0
    7aec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7af0:	0f 90       	pop	r0
    7af2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7af6:	0f 90       	pop	r0
    7af8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7afc:	0f 90       	pop	r0
    7afe:	1f 90       	pop	r1
    7b00:	18 95       	reti

00007b02 <__vector_108>:
    7b02:	1f 92       	push	r1
    7b04:	0f 92       	push	r0
    7b06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7b0a:	0f 92       	push	r0
    7b0c:	11 24       	eor	r1, r1
    7b0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7b12:	0f 92       	push	r0
    7b14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7b18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7b1c:	0f 92       	push	r0
    7b1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7b22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7b26:	0f 92       	push	r0
    7b28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7b2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7b30:	0f 92       	push	r0
    7b32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7b36:	2f 93       	push	r18
    7b38:	3f 93       	push	r19
    7b3a:	4f 93       	push	r20
    7b3c:	5f 93       	push	r21
    7b3e:	6f 93       	push	r22
    7b40:	7f 93       	push	r23
    7b42:	8f 93       	push	r24
    7b44:	9f 93       	push	r25
    7b46:	af 93       	push	r26
    7b48:	bf 93       	push	r27
    7b4a:	ef 93       	push	r30
    7b4c:	ff 93       	push	r31
    7b4e:	cf 93       	push	r28
    7b50:	df 93       	push	r29
    7b52:	cd b7       	in	r28, 0x3d	; 61
    7b54:	de b7       	in	r29, 0x3e	; 62
    7b56:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <tc_tcf0_ovf_callback>
    7b5a:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <tc_tcf0_ovf_callback+0x1>
    7b5e:	89 2b       	or	r24, r25
    7b60:	31 f0       	breq	.+12     	; 0x7b6e <__vector_108+0x6c>
    7b62:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <tc_tcf0_ovf_callback>
    7b66:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <tc_tcf0_ovf_callback+0x1>
    7b6a:	fc 01       	movw	r30, r24
    7b6c:	19 95       	eicall
    7b6e:	00 00       	nop
    7b70:	df 91       	pop	r29
    7b72:	cf 91       	pop	r28
    7b74:	ff 91       	pop	r31
    7b76:	ef 91       	pop	r30
    7b78:	bf 91       	pop	r27
    7b7a:	af 91       	pop	r26
    7b7c:	9f 91       	pop	r25
    7b7e:	8f 91       	pop	r24
    7b80:	7f 91       	pop	r23
    7b82:	6f 91       	pop	r22
    7b84:	5f 91       	pop	r21
    7b86:	4f 91       	pop	r20
    7b88:	3f 91       	pop	r19
    7b8a:	2f 91       	pop	r18
    7b8c:	0f 90       	pop	r0
    7b8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7b92:	0f 90       	pop	r0
    7b94:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7b98:	0f 90       	pop	r0
    7b9a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7b9e:	0f 90       	pop	r0
    7ba0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7ba4:	0f 90       	pop	r0
    7ba6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7baa:	0f 90       	pop	r0
    7bac:	1f 90       	pop	r1
    7bae:	18 95       	reti

00007bb0 <__vector_109>:
    7bb0:	1f 92       	push	r1
    7bb2:	0f 92       	push	r0
    7bb4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7bb8:	0f 92       	push	r0
    7bba:	11 24       	eor	r1, r1
    7bbc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7bc0:	0f 92       	push	r0
    7bc2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7bc6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7bca:	0f 92       	push	r0
    7bcc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7bd0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7bd4:	0f 92       	push	r0
    7bd6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7bda:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7bde:	0f 92       	push	r0
    7be0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7be4:	2f 93       	push	r18
    7be6:	3f 93       	push	r19
    7be8:	4f 93       	push	r20
    7bea:	5f 93       	push	r21
    7bec:	6f 93       	push	r22
    7bee:	7f 93       	push	r23
    7bf0:	8f 93       	push	r24
    7bf2:	9f 93       	push	r25
    7bf4:	af 93       	push	r26
    7bf6:	bf 93       	push	r27
    7bf8:	ef 93       	push	r30
    7bfa:	ff 93       	push	r31
    7bfc:	cf 93       	push	r28
    7bfe:	df 93       	push	r29
    7c00:	cd b7       	in	r28, 0x3d	; 61
    7c02:	de b7       	in	r29, 0x3e	; 62
    7c04:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <tc_tcf0_err_callback>
    7c08:	90 91 f3 22 	lds	r25, 0x22F3	; 0x8022f3 <tc_tcf0_err_callback+0x1>
    7c0c:	89 2b       	or	r24, r25
    7c0e:	31 f0       	breq	.+12     	; 0x7c1c <__vector_109+0x6c>
    7c10:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <tc_tcf0_err_callback>
    7c14:	90 91 f3 22 	lds	r25, 0x22F3	; 0x8022f3 <tc_tcf0_err_callback+0x1>
    7c18:	fc 01       	movw	r30, r24
    7c1a:	19 95       	eicall
    7c1c:	00 00       	nop
    7c1e:	df 91       	pop	r29
    7c20:	cf 91       	pop	r28
    7c22:	ff 91       	pop	r31
    7c24:	ef 91       	pop	r30
    7c26:	bf 91       	pop	r27
    7c28:	af 91       	pop	r26
    7c2a:	9f 91       	pop	r25
    7c2c:	8f 91       	pop	r24
    7c2e:	7f 91       	pop	r23
    7c30:	6f 91       	pop	r22
    7c32:	5f 91       	pop	r21
    7c34:	4f 91       	pop	r20
    7c36:	3f 91       	pop	r19
    7c38:	2f 91       	pop	r18
    7c3a:	0f 90       	pop	r0
    7c3c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7c40:	0f 90       	pop	r0
    7c42:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7c46:	0f 90       	pop	r0
    7c48:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7c4c:	0f 90       	pop	r0
    7c4e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7c52:	0f 90       	pop	r0
    7c54:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7c58:	0f 90       	pop	r0
    7c5a:	1f 90       	pop	r1
    7c5c:	18 95       	reti

00007c5e <__vector_110>:
    7c5e:	1f 92       	push	r1
    7c60:	0f 92       	push	r0
    7c62:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7c66:	0f 92       	push	r0
    7c68:	11 24       	eor	r1, r1
    7c6a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7c6e:	0f 92       	push	r0
    7c70:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7c74:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7c78:	0f 92       	push	r0
    7c7a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7c7e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7c82:	0f 92       	push	r0
    7c84:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7c88:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7c8c:	0f 92       	push	r0
    7c8e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7c92:	2f 93       	push	r18
    7c94:	3f 93       	push	r19
    7c96:	4f 93       	push	r20
    7c98:	5f 93       	push	r21
    7c9a:	6f 93       	push	r22
    7c9c:	7f 93       	push	r23
    7c9e:	8f 93       	push	r24
    7ca0:	9f 93       	push	r25
    7ca2:	af 93       	push	r26
    7ca4:	bf 93       	push	r27
    7ca6:	ef 93       	push	r30
    7ca8:	ff 93       	push	r31
    7caa:	cf 93       	push	r28
    7cac:	df 93       	push	r29
    7cae:	cd b7       	in	r28, 0x3d	; 61
    7cb0:	de b7       	in	r29, 0x3e	; 62
    7cb2:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <tc_tcf0_cca_callback>
    7cb6:	90 91 f5 22 	lds	r25, 0x22F5	; 0x8022f5 <tc_tcf0_cca_callback+0x1>
    7cba:	89 2b       	or	r24, r25
    7cbc:	31 f0       	breq	.+12     	; 0x7cca <__vector_110+0x6c>
    7cbe:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <tc_tcf0_cca_callback>
    7cc2:	90 91 f5 22 	lds	r25, 0x22F5	; 0x8022f5 <tc_tcf0_cca_callback+0x1>
    7cc6:	fc 01       	movw	r30, r24
    7cc8:	19 95       	eicall
    7cca:	00 00       	nop
    7ccc:	df 91       	pop	r29
    7cce:	cf 91       	pop	r28
    7cd0:	ff 91       	pop	r31
    7cd2:	ef 91       	pop	r30
    7cd4:	bf 91       	pop	r27
    7cd6:	af 91       	pop	r26
    7cd8:	9f 91       	pop	r25
    7cda:	8f 91       	pop	r24
    7cdc:	7f 91       	pop	r23
    7cde:	6f 91       	pop	r22
    7ce0:	5f 91       	pop	r21
    7ce2:	4f 91       	pop	r20
    7ce4:	3f 91       	pop	r19
    7ce6:	2f 91       	pop	r18
    7ce8:	0f 90       	pop	r0
    7cea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7cee:	0f 90       	pop	r0
    7cf0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7cf4:	0f 90       	pop	r0
    7cf6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7cfa:	0f 90       	pop	r0
    7cfc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d00:	0f 90       	pop	r0
    7d02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7d06:	0f 90       	pop	r0
    7d08:	1f 90       	pop	r1
    7d0a:	18 95       	reti

00007d0c <__vector_111>:
    7d0c:	1f 92       	push	r1
    7d0e:	0f 92       	push	r0
    7d10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7d14:	0f 92       	push	r0
    7d16:	11 24       	eor	r1, r1
    7d18:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d1c:	0f 92       	push	r0
    7d1e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d22:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d26:	0f 92       	push	r0
    7d28:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d2c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d30:	0f 92       	push	r0
    7d32:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d36:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d3a:	0f 92       	push	r0
    7d3c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d40:	2f 93       	push	r18
    7d42:	3f 93       	push	r19
    7d44:	4f 93       	push	r20
    7d46:	5f 93       	push	r21
    7d48:	6f 93       	push	r22
    7d4a:	7f 93       	push	r23
    7d4c:	8f 93       	push	r24
    7d4e:	9f 93       	push	r25
    7d50:	af 93       	push	r26
    7d52:	bf 93       	push	r27
    7d54:	ef 93       	push	r30
    7d56:	ff 93       	push	r31
    7d58:	cf 93       	push	r28
    7d5a:	df 93       	push	r29
    7d5c:	cd b7       	in	r28, 0x3d	; 61
    7d5e:	de b7       	in	r29, 0x3e	; 62
    7d60:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <tc_tcf0_ccb_callback>
    7d64:	90 91 f7 22 	lds	r25, 0x22F7	; 0x8022f7 <tc_tcf0_ccb_callback+0x1>
    7d68:	89 2b       	or	r24, r25
    7d6a:	31 f0       	breq	.+12     	; 0x7d78 <__vector_111+0x6c>
    7d6c:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <tc_tcf0_ccb_callback>
    7d70:	90 91 f7 22 	lds	r25, 0x22F7	; 0x8022f7 <tc_tcf0_ccb_callback+0x1>
    7d74:	fc 01       	movw	r30, r24
    7d76:	19 95       	eicall
    7d78:	00 00       	nop
    7d7a:	df 91       	pop	r29
    7d7c:	cf 91       	pop	r28
    7d7e:	ff 91       	pop	r31
    7d80:	ef 91       	pop	r30
    7d82:	bf 91       	pop	r27
    7d84:	af 91       	pop	r26
    7d86:	9f 91       	pop	r25
    7d88:	8f 91       	pop	r24
    7d8a:	7f 91       	pop	r23
    7d8c:	6f 91       	pop	r22
    7d8e:	5f 91       	pop	r21
    7d90:	4f 91       	pop	r20
    7d92:	3f 91       	pop	r19
    7d94:	2f 91       	pop	r18
    7d96:	0f 90       	pop	r0
    7d98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d9c:	0f 90       	pop	r0
    7d9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7da2:	0f 90       	pop	r0
    7da4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7da8:	0f 90       	pop	r0
    7daa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7dae:	0f 90       	pop	r0
    7db0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7db4:	0f 90       	pop	r0
    7db6:	1f 90       	pop	r1
    7db8:	18 95       	reti

00007dba <__vector_112>:
    7dba:	1f 92       	push	r1
    7dbc:	0f 92       	push	r0
    7dbe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7dc2:	0f 92       	push	r0
    7dc4:	11 24       	eor	r1, r1
    7dc6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7dca:	0f 92       	push	r0
    7dcc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7dd0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7dd4:	0f 92       	push	r0
    7dd6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7dda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7dde:	0f 92       	push	r0
    7de0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7de4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7de8:	0f 92       	push	r0
    7dea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7dee:	2f 93       	push	r18
    7df0:	3f 93       	push	r19
    7df2:	4f 93       	push	r20
    7df4:	5f 93       	push	r21
    7df6:	6f 93       	push	r22
    7df8:	7f 93       	push	r23
    7dfa:	8f 93       	push	r24
    7dfc:	9f 93       	push	r25
    7dfe:	af 93       	push	r26
    7e00:	bf 93       	push	r27
    7e02:	ef 93       	push	r30
    7e04:	ff 93       	push	r31
    7e06:	cf 93       	push	r28
    7e08:	df 93       	push	r29
    7e0a:	cd b7       	in	r28, 0x3d	; 61
    7e0c:	de b7       	in	r29, 0x3e	; 62
    7e0e:	80 91 f8 22 	lds	r24, 0x22F8	; 0x8022f8 <tc_tcf0_ccc_callback>
    7e12:	90 91 f9 22 	lds	r25, 0x22F9	; 0x8022f9 <tc_tcf0_ccc_callback+0x1>
    7e16:	89 2b       	or	r24, r25
    7e18:	31 f0       	breq	.+12     	; 0x7e26 <__vector_112+0x6c>
    7e1a:	80 91 f8 22 	lds	r24, 0x22F8	; 0x8022f8 <tc_tcf0_ccc_callback>
    7e1e:	90 91 f9 22 	lds	r25, 0x22F9	; 0x8022f9 <tc_tcf0_ccc_callback+0x1>
    7e22:	fc 01       	movw	r30, r24
    7e24:	19 95       	eicall
    7e26:	00 00       	nop
    7e28:	df 91       	pop	r29
    7e2a:	cf 91       	pop	r28
    7e2c:	ff 91       	pop	r31
    7e2e:	ef 91       	pop	r30
    7e30:	bf 91       	pop	r27
    7e32:	af 91       	pop	r26
    7e34:	9f 91       	pop	r25
    7e36:	8f 91       	pop	r24
    7e38:	7f 91       	pop	r23
    7e3a:	6f 91       	pop	r22
    7e3c:	5f 91       	pop	r21
    7e3e:	4f 91       	pop	r20
    7e40:	3f 91       	pop	r19
    7e42:	2f 91       	pop	r18
    7e44:	0f 90       	pop	r0
    7e46:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e4a:	0f 90       	pop	r0
    7e4c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e50:	0f 90       	pop	r0
    7e52:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e56:	0f 90       	pop	r0
    7e58:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e5c:	0f 90       	pop	r0
    7e5e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7e62:	0f 90       	pop	r0
    7e64:	1f 90       	pop	r1
    7e66:	18 95       	reti

00007e68 <__vector_113>:
    7e68:	1f 92       	push	r1
    7e6a:	0f 92       	push	r0
    7e6c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7e70:	0f 92       	push	r0
    7e72:	11 24       	eor	r1, r1
    7e74:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e78:	0f 92       	push	r0
    7e7a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e7e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e82:	0f 92       	push	r0
    7e84:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e88:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e8c:	0f 92       	push	r0
    7e8e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e92:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e96:	0f 92       	push	r0
    7e98:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e9c:	2f 93       	push	r18
    7e9e:	3f 93       	push	r19
    7ea0:	4f 93       	push	r20
    7ea2:	5f 93       	push	r21
    7ea4:	6f 93       	push	r22
    7ea6:	7f 93       	push	r23
    7ea8:	8f 93       	push	r24
    7eaa:	9f 93       	push	r25
    7eac:	af 93       	push	r26
    7eae:	bf 93       	push	r27
    7eb0:	ef 93       	push	r30
    7eb2:	ff 93       	push	r31
    7eb4:	cf 93       	push	r28
    7eb6:	df 93       	push	r29
    7eb8:	cd b7       	in	r28, 0x3d	; 61
    7eba:	de b7       	in	r29, 0x3e	; 62
    7ebc:	80 91 fa 22 	lds	r24, 0x22FA	; 0x8022fa <tc_tcf0_ccd_callback>
    7ec0:	90 91 fb 22 	lds	r25, 0x22FB	; 0x8022fb <tc_tcf0_ccd_callback+0x1>
    7ec4:	89 2b       	or	r24, r25
    7ec6:	31 f0       	breq	.+12     	; 0x7ed4 <__vector_113+0x6c>
    7ec8:	80 91 fa 22 	lds	r24, 0x22FA	; 0x8022fa <tc_tcf0_ccd_callback>
    7ecc:	90 91 fb 22 	lds	r25, 0x22FB	; 0x8022fb <tc_tcf0_ccd_callback+0x1>
    7ed0:	fc 01       	movw	r30, r24
    7ed2:	19 95       	eicall
    7ed4:	00 00       	nop
    7ed6:	df 91       	pop	r29
    7ed8:	cf 91       	pop	r28
    7eda:	ff 91       	pop	r31
    7edc:	ef 91       	pop	r30
    7ede:	bf 91       	pop	r27
    7ee0:	af 91       	pop	r26
    7ee2:	9f 91       	pop	r25
    7ee4:	8f 91       	pop	r24
    7ee6:	7f 91       	pop	r23
    7ee8:	6f 91       	pop	r22
    7eea:	5f 91       	pop	r21
    7eec:	4f 91       	pop	r20
    7eee:	3f 91       	pop	r19
    7ef0:	2f 91       	pop	r18
    7ef2:	0f 90       	pop	r0
    7ef4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7ef8:	0f 90       	pop	r0
    7efa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7efe:	0f 90       	pop	r0
    7f00:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f04:	0f 90       	pop	r0
    7f06:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f0a:	0f 90       	pop	r0
    7f0c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7f10:	0f 90       	pop	r0
    7f12:	1f 90       	pop	r1
    7f14:	18 95       	reti

00007f16 <__vector_114>:
    7f16:	1f 92       	push	r1
    7f18:	0f 92       	push	r0
    7f1a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7f1e:	0f 92       	push	r0
    7f20:	11 24       	eor	r1, r1
    7f22:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f26:	0f 92       	push	r0
    7f28:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f2c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f30:	0f 92       	push	r0
    7f32:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f36:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7f3a:	0f 92       	push	r0
    7f3c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7f40:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f44:	0f 92       	push	r0
    7f46:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f4a:	2f 93       	push	r18
    7f4c:	3f 93       	push	r19
    7f4e:	4f 93       	push	r20
    7f50:	5f 93       	push	r21
    7f52:	6f 93       	push	r22
    7f54:	7f 93       	push	r23
    7f56:	8f 93       	push	r24
    7f58:	9f 93       	push	r25
    7f5a:	af 93       	push	r26
    7f5c:	bf 93       	push	r27
    7f5e:	ef 93       	push	r30
    7f60:	ff 93       	push	r31
    7f62:	cf 93       	push	r28
    7f64:	df 93       	push	r29
    7f66:	cd b7       	in	r28, 0x3d	; 61
    7f68:	de b7       	in	r29, 0x3e	; 62
    7f6a:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <tc_tcf1_ovf_callback>
    7f6e:	90 91 fd 22 	lds	r25, 0x22FD	; 0x8022fd <tc_tcf1_ovf_callback+0x1>
    7f72:	89 2b       	or	r24, r25
    7f74:	31 f0       	breq	.+12     	; 0x7f82 <__vector_114+0x6c>
    7f76:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <tc_tcf1_ovf_callback>
    7f7a:	90 91 fd 22 	lds	r25, 0x22FD	; 0x8022fd <tc_tcf1_ovf_callback+0x1>
    7f7e:	fc 01       	movw	r30, r24
    7f80:	19 95       	eicall
    7f82:	00 00       	nop
    7f84:	df 91       	pop	r29
    7f86:	cf 91       	pop	r28
    7f88:	ff 91       	pop	r31
    7f8a:	ef 91       	pop	r30
    7f8c:	bf 91       	pop	r27
    7f8e:	af 91       	pop	r26
    7f90:	9f 91       	pop	r25
    7f92:	8f 91       	pop	r24
    7f94:	7f 91       	pop	r23
    7f96:	6f 91       	pop	r22
    7f98:	5f 91       	pop	r21
    7f9a:	4f 91       	pop	r20
    7f9c:	3f 91       	pop	r19
    7f9e:	2f 91       	pop	r18
    7fa0:	0f 90       	pop	r0
    7fa2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7fa6:	0f 90       	pop	r0
    7fa8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7fac:	0f 90       	pop	r0
    7fae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7fb2:	0f 90       	pop	r0
    7fb4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7fb8:	0f 90       	pop	r0
    7fba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7fbe:	0f 90       	pop	r0
    7fc0:	1f 90       	pop	r1
    7fc2:	18 95       	reti

00007fc4 <__vector_115>:
    7fc4:	1f 92       	push	r1
    7fc6:	0f 92       	push	r0
    7fc8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7fcc:	0f 92       	push	r0
    7fce:	11 24       	eor	r1, r1
    7fd0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7fd4:	0f 92       	push	r0
    7fd6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7fda:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7fde:	0f 92       	push	r0
    7fe0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7fe4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7fe8:	0f 92       	push	r0
    7fea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7fee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7ff2:	0f 92       	push	r0
    7ff4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7ff8:	2f 93       	push	r18
    7ffa:	3f 93       	push	r19
    7ffc:	4f 93       	push	r20
    7ffe:	5f 93       	push	r21
    8000:	6f 93       	push	r22
    8002:	7f 93       	push	r23
    8004:	8f 93       	push	r24
    8006:	9f 93       	push	r25
    8008:	af 93       	push	r26
    800a:	bf 93       	push	r27
    800c:	ef 93       	push	r30
    800e:	ff 93       	push	r31
    8010:	cf 93       	push	r28
    8012:	df 93       	push	r29
    8014:	cd b7       	in	r28, 0x3d	; 61
    8016:	de b7       	in	r29, 0x3e	; 62
    8018:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <tc_tcf1_err_callback>
    801c:	90 91 ff 22 	lds	r25, 0x22FF	; 0x8022ff <tc_tcf1_err_callback+0x1>
    8020:	89 2b       	or	r24, r25
    8022:	31 f0       	breq	.+12     	; 0x8030 <__vector_115+0x6c>
    8024:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <tc_tcf1_err_callback>
    8028:	90 91 ff 22 	lds	r25, 0x22FF	; 0x8022ff <tc_tcf1_err_callback+0x1>
    802c:	fc 01       	movw	r30, r24
    802e:	19 95       	eicall
    8030:	00 00       	nop
    8032:	df 91       	pop	r29
    8034:	cf 91       	pop	r28
    8036:	ff 91       	pop	r31
    8038:	ef 91       	pop	r30
    803a:	bf 91       	pop	r27
    803c:	af 91       	pop	r26
    803e:	9f 91       	pop	r25
    8040:	8f 91       	pop	r24
    8042:	7f 91       	pop	r23
    8044:	6f 91       	pop	r22
    8046:	5f 91       	pop	r21
    8048:	4f 91       	pop	r20
    804a:	3f 91       	pop	r19
    804c:	2f 91       	pop	r18
    804e:	0f 90       	pop	r0
    8050:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8054:	0f 90       	pop	r0
    8056:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    805a:	0f 90       	pop	r0
    805c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8060:	0f 90       	pop	r0
    8062:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8066:	0f 90       	pop	r0
    8068:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    806c:	0f 90       	pop	r0
    806e:	1f 90       	pop	r1
    8070:	18 95       	reti

00008072 <__vector_116>:
    8072:	1f 92       	push	r1
    8074:	0f 92       	push	r0
    8076:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    807a:	0f 92       	push	r0
    807c:	11 24       	eor	r1, r1
    807e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8082:	0f 92       	push	r0
    8084:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8088:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    808c:	0f 92       	push	r0
    808e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8092:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8096:	0f 92       	push	r0
    8098:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    809c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    80a0:	0f 92       	push	r0
    80a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    80a6:	2f 93       	push	r18
    80a8:	3f 93       	push	r19
    80aa:	4f 93       	push	r20
    80ac:	5f 93       	push	r21
    80ae:	6f 93       	push	r22
    80b0:	7f 93       	push	r23
    80b2:	8f 93       	push	r24
    80b4:	9f 93       	push	r25
    80b6:	af 93       	push	r26
    80b8:	bf 93       	push	r27
    80ba:	ef 93       	push	r30
    80bc:	ff 93       	push	r31
    80be:	cf 93       	push	r28
    80c0:	df 93       	push	r29
    80c2:	cd b7       	in	r28, 0x3d	; 61
    80c4:	de b7       	in	r29, 0x3e	; 62
    80c6:	80 91 00 23 	lds	r24, 0x2300	; 0x802300 <tc_tcf1_cca_callback>
    80ca:	90 91 01 23 	lds	r25, 0x2301	; 0x802301 <tc_tcf1_cca_callback+0x1>
    80ce:	89 2b       	or	r24, r25
    80d0:	31 f0       	breq	.+12     	; 0x80de <__vector_116+0x6c>
    80d2:	80 91 00 23 	lds	r24, 0x2300	; 0x802300 <tc_tcf1_cca_callback>
    80d6:	90 91 01 23 	lds	r25, 0x2301	; 0x802301 <tc_tcf1_cca_callback+0x1>
    80da:	fc 01       	movw	r30, r24
    80dc:	19 95       	eicall
    80de:	00 00       	nop
    80e0:	df 91       	pop	r29
    80e2:	cf 91       	pop	r28
    80e4:	ff 91       	pop	r31
    80e6:	ef 91       	pop	r30
    80e8:	bf 91       	pop	r27
    80ea:	af 91       	pop	r26
    80ec:	9f 91       	pop	r25
    80ee:	8f 91       	pop	r24
    80f0:	7f 91       	pop	r23
    80f2:	6f 91       	pop	r22
    80f4:	5f 91       	pop	r21
    80f6:	4f 91       	pop	r20
    80f8:	3f 91       	pop	r19
    80fa:	2f 91       	pop	r18
    80fc:	0f 90       	pop	r0
    80fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8102:	0f 90       	pop	r0
    8104:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8108:	0f 90       	pop	r0
    810a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    810e:	0f 90       	pop	r0
    8110:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8114:	0f 90       	pop	r0
    8116:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    811a:	0f 90       	pop	r0
    811c:	1f 90       	pop	r1
    811e:	18 95       	reti

00008120 <__vector_117>:
    8120:	1f 92       	push	r1
    8122:	0f 92       	push	r0
    8124:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    8128:	0f 92       	push	r0
    812a:	11 24       	eor	r1, r1
    812c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8130:	0f 92       	push	r0
    8132:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8136:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    813a:	0f 92       	push	r0
    813c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8140:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8144:	0f 92       	push	r0
    8146:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    814a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    814e:	0f 92       	push	r0
    8150:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8154:	2f 93       	push	r18
    8156:	3f 93       	push	r19
    8158:	4f 93       	push	r20
    815a:	5f 93       	push	r21
    815c:	6f 93       	push	r22
    815e:	7f 93       	push	r23
    8160:	8f 93       	push	r24
    8162:	9f 93       	push	r25
    8164:	af 93       	push	r26
    8166:	bf 93       	push	r27
    8168:	ef 93       	push	r30
    816a:	ff 93       	push	r31
    816c:	cf 93       	push	r28
    816e:	df 93       	push	r29
    8170:	cd b7       	in	r28, 0x3d	; 61
    8172:	de b7       	in	r29, 0x3e	; 62
    8174:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <tc_tcf1_ccb_callback>
    8178:	90 91 03 23 	lds	r25, 0x2303	; 0x802303 <tc_tcf1_ccb_callback+0x1>
    817c:	89 2b       	or	r24, r25
    817e:	31 f0       	breq	.+12     	; 0x818c <__vector_117+0x6c>
    8180:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <tc_tcf1_ccb_callback>
    8184:	90 91 03 23 	lds	r25, 0x2303	; 0x802303 <tc_tcf1_ccb_callback+0x1>
    8188:	fc 01       	movw	r30, r24
    818a:	19 95       	eicall
    818c:	00 00       	nop
    818e:	df 91       	pop	r29
    8190:	cf 91       	pop	r28
    8192:	ff 91       	pop	r31
    8194:	ef 91       	pop	r30
    8196:	bf 91       	pop	r27
    8198:	af 91       	pop	r26
    819a:	9f 91       	pop	r25
    819c:	8f 91       	pop	r24
    819e:	7f 91       	pop	r23
    81a0:	6f 91       	pop	r22
    81a2:	5f 91       	pop	r21
    81a4:	4f 91       	pop	r20
    81a6:	3f 91       	pop	r19
    81a8:	2f 91       	pop	r18
    81aa:	0f 90       	pop	r0
    81ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    81b0:	0f 90       	pop	r0
    81b2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    81b6:	0f 90       	pop	r0
    81b8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    81bc:	0f 90       	pop	r0
    81be:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    81c2:	0f 90       	pop	r0
    81c4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    81c8:	0f 90       	pop	r0
    81ca:	1f 90       	pop	r1
    81cc:	18 95       	reti

000081ce <tc_enable>:
    81ce:	cf 93       	push	r28
    81d0:	df 93       	push	r29
    81d2:	00 d0       	rcall	.+0      	; 0x81d4 <tc_enable+0x6>
    81d4:	cd b7       	in	r28, 0x3d	; 61
    81d6:	de b7       	in	r29, 0x3e	; 62
    81d8:	8a 83       	std	Y+2, r24	; 0x02
    81da:	9b 83       	std	Y+3, r25	; 0x03
    81dc:	0e 94 07 33 	call	0x660e	; 0x660e <cpu_irq_save>
    81e0:	89 83       	std	Y+1, r24	; 0x01
    81e2:	8a 81       	ldd	r24, Y+2	; 0x02
    81e4:	9b 81       	ldd	r25, Y+3	; 0x03
    81e6:	81 15       	cp	r24, r1
    81e8:	98 40       	sbci	r25, 0x08	; 8
    81ea:	49 f4       	brne	.+18     	; 0x81fe <tc_enable+0x30>
    81ec:	61 e0       	ldi	r22, 0x01	; 1
    81ee:	83 e0       	ldi	r24, 0x03	; 3
    81f0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    81f4:	64 e0       	ldi	r22, 0x04	; 4
    81f6:	83 e0       	ldi	r24, 0x03	; 3
    81f8:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    81fc:	66 c0       	rjmp	.+204    	; 0x82ca <tc_enable+0xfc>
    81fe:	8a 81       	ldd	r24, Y+2	; 0x02
    8200:	9b 81       	ldd	r25, Y+3	; 0x03
    8202:	80 34       	cpi	r24, 0x40	; 64
    8204:	98 40       	sbci	r25, 0x08	; 8
    8206:	49 f4       	brne	.+18     	; 0x821a <tc_enable+0x4c>
    8208:	62 e0       	ldi	r22, 0x02	; 2
    820a:	83 e0       	ldi	r24, 0x03	; 3
    820c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8210:	64 e0       	ldi	r22, 0x04	; 4
    8212:	83 e0       	ldi	r24, 0x03	; 3
    8214:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8218:	58 c0       	rjmp	.+176    	; 0x82ca <tc_enable+0xfc>
    821a:	8a 81       	ldd	r24, Y+2	; 0x02
    821c:	9b 81       	ldd	r25, Y+3	; 0x03
    821e:	81 15       	cp	r24, r1
    8220:	99 40       	sbci	r25, 0x09	; 9
    8222:	49 f4       	brne	.+18     	; 0x8236 <tc_enable+0x68>
    8224:	61 e0       	ldi	r22, 0x01	; 1
    8226:	84 e0       	ldi	r24, 0x04	; 4
    8228:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    822c:	64 e0       	ldi	r22, 0x04	; 4
    822e:	84 e0       	ldi	r24, 0x04	; 4
    8230:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8234:	4a c0       	rjmp	.+148    	; 0x82ca <tc_enable+0xfc>
    8236:	8a 81       	ldd	r24, Y+2	; 0x02
    8238:	9b 81       	ldd	r25, Y+3	; 0x03
    823a:	80 34       	cpi	r24, 0x40	; 64
    823c:	99 40       	sbci	r25, 0x09	; 9
    823e:	49 f4       	brne	.+18     	; 0x8252 <tc_enable+0x84>
    8240:	62 e0       	ldi	r22, 0x02	; 2
    8242:	84 e0       	ldi	r24, 0x04	; 4
    8244:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8248:	64 e0       	ldi	r22, 0x04	; 4
    824a:	84 e0       	ldi	r24, 0x04	; 4
    824c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8250:	3c c0       	rjmp	.+120    	; 0x82ca <tc_enable+0xfc>
    8252:	8a 81       	ldd	r24, Y+2	; 0x02
    8254:	9b 81       	ldd	r25, Y+3	; 0x03
    8256:	81 15       	cp	r24, r1
    8258:	9a 40       	sbci	r25, 0x0A	; 10
    825a:	49 f4       	brne	.+18     	; 0x826e <tc_enable+0xa0>
    825c:	61 e0       	ldi	r22, 0x01	; 1
    825e:	85 e0       	ldi	r24, 0x05	; 5
    8260:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8264:	64 e0       	ldi	r22, 0x04	; 4
    8266:	85 e0       	ldi	r24, 0x05	; 5
    8268:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    826c:	2e c0       	rjmp	.+92     	; 0x82ca <tc_enable+0xfc>
    826e:	8a 81       	ldd	r24, Y+2	; 0x02
    8270:	9b 81       	ldd	r25, Y+3	; 0x03
    8272:	80 34       	cpi	r24, 0x40	; 64
    8274:	9a 40       	sbci	r25, 0x0A	; 10
    8276:	49 f4       	brne	.+18     	; 0x828a <tc_enable+0xbc>
    8278:	62 e0       	ldi	r22, 0x02	; 2
    827a:	85 e0       	ldi	r24, 0x05	; 5
    827c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8280:	64 e0       	ldi	r22, 0x04	; 4
    8282:	85 e0       	ldi	r24, 0x05	; 5
    8284:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8288:	20 c0       	rjmp	.+64     	; 0x82ca <tc_enable+0xfc>
    828a:	8a 81       	ldd	r24, Y+2	; 0x02
    828c:	9b 81       	ldd	r25, Y+3	; 0x03
    828e:	81 15       	cp	r24, r1
    8290:	9b 40       	sbci	r25, 0x0B	; 11
    8292:	49 f4       	brne	.+18     	; 0x82a6 <tc_enable+0xd8>
    8294:	61 e0       	ldi	r22, 0x01	; 1
    8296:	86 e0       	ldi	r24, 0x06	; 6
    8298:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    829c:	64 e0       	ldi	r22, 0x04	; 4
    829e:	86 e0       	ldi	r24, 0x06	; 6
    82a0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    82a4:	12 c0       	rjmp	.+36     	; 0x82ca <tc_enable+0xfc>
    82a6:	8a 81       	ldd	r24, Y+2	; 0x02
    82a8:	9b 81       	ldd	r25, Y+3	; 0x03
    82aa:	80 34       	cpi	r24, 0x40	; 64
    82ac:	9b 40       	sbci	r25, 0x0B	; 11
    82ae:	49 f4       	brne	.+18     	; 0x82c2 <tc_enable+0xf4>
    82b0:	62 e0       	ldi	r22, 0x02	; 2
    82b2:	86 e0       	ldi	r24, 0x06	; 6
    82b4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    82b8:	64 e0       	ldi	r22, 0x04	; 4
    82ba:	86 e0       	ldi	r24, 0x06	; 6
    82bc:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    82c0:	04 c0       	rjmp	.+8      	; 0x82ca <tc_enable+0xfc>
    82c2:	89 81       	ldd	r24, Y+1	; 0x01
    82c4:	0e 94 17 33 	call	0x662e	; 0x662e <cpu_irq_restore>
    82c8:	06 c0       	rjmp	.+12     	; 0x82d6 <tc_enable+0x108>
    82ca:	81 e0       	ldi	r24, 0x01	; 1
    82cc:	0e 94 27 33 	call	0x664e	; 0x664e <sleepmgr_lock_mode>
    82d0:	89 81       	ldd	r24, Y+1	; 0x01
    82d2:	0e 94 17 33 	call	0x662e	; 0x662e <cpu_irq_restore>
    82d6:	23 96       	adiw	r28, 0x03	; 3
    82d8:	cd bf       	out	0x3d, r28	; 61
    82da:	de bf       	out	0x3e, r29	; 62
    82dc:	df 91       	pop	r29
    82de:	cf 91       	pop	r28
    82e0:	08 95       	ret

000082e2 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    82e2:	cf 93       	push	r28
    82e4:	df 93       	push	r29
    82e6:	00 d0       	rcall	.+0      	; 0x82e8 <tc_set_overflow_interrupt_callback+0x6>
    82e8:	1f 92       	push	r1
    82ea:	cd b7       	in	r28, 0x3d	; 61
    82ec:	de b7       	in	r29, 0x3e	; 62
    82ee:	89 83       	std	Y+1, r24	; 0x01
    82f0:	9a 83       	std	Y+2, r25	; 0x02
    82f2:	6b 83       	std	Y+3, r22	; 0x03
    82f4:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    82f6:	89 81       	ldd	r24, Y+1	; 0x01
    82f8:	9a 81       	ldd	r25, Y+2	; 0x02
    82fa:	81 15       	cp	r24, r1
    82fc:	98 40       	sbci	r25, 0x08	; 8
    82fe:	39 f4       	brne	.+14     	; 0x830e <tc_set_overflow_interrupt_callback+0x2c>
		tc_tcc0_ovf_callback = callback;
    8300:	8b 81       	ldd	r24, Y+3	; 0x03
    8302:	9c 81       	ldd	r25, Y+4	; 0x04
    8304:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <tc_tcc0_ovf_callback>
    8308:	90 93 b5 22 	sts	0x22B5, r25	; 0x8022b5 <tc_tcc0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    830c:	53 c0       	rjmp	.+166    	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_ovf_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    830e:	89 81       	ldd	r24, Y+1	; 0x01
    8310:	9a 81       	ldd	r25, Y+2	; 0x02
    8312:	80 34       	cpi	r24, 0x40	; 64
    8314:	98 40       	sbci	r25, 0x08	; 8
    8316:	39 f4       	brne	.+14     	; 0x8326 <tc_set_overflow_interrupt_callback+0x44>
		tc_tcc1_ovf_callback = callback;
    8318:	8b 81       	ldd	r24, Y+3	; 0x03
    831a:	9c 81       	ldd	r25, Y+4	; 0x04
    831c:	80 93 c0 22 	sts	0x22C0, r24	; 0x8022c0 <tc_tcc1_ovf_callback>
    8320:	90 93 c1 22 	sts	0x22C1, r25	; 0x8022c1 <tc_tcc1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    8324:	47 c0       	rjmp	.+142    	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_ovf_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    8326:	89 81       	ldd	r24, Y+1	; 0x01
    8328:	9a 81       	ldd	r25, Y+2	; 0x02
    832a:	81 15       	cp	r24, r1
    832c:	99 40       	sbci	r25, 0x09	; 9
    832e:	39 f4       	brne	.+14     	; 0x833e <tc_set_overflow_interrupt_callback+0x5c>
		tc_tcd0_ovf_callback = callback;
    8330:	8b 81       	ldd	r24, Y+3	; 0x03
    8332:	9c 81       	ldd	r25, Y+4	; 0x04
    8334:	80 93 c8 22 	sts	0x22C8, r24	; 0x8022c8 <tc_tcd0_ovf_callback>
    8338:	90 93 c9 22 	sts	0x22C9, r25	; 0x8022c9 <tc_tcd0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    833c:	3b c0       	rjmp	.+118    	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_ovf_callback = callback;
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    833e:	89 81       	ldd	r24, Y+1	; 0x01
    8340:	9a 81       	ldd	r25, Y+2	; 0x02
    8342:	80 34       	cpi	r24, 0x40	; 64
    8344:	99 40       	sbci	r25, 0x09	; 9
    8346:	39 f4       	brne	.+14     	; 0x8356 <tc_set_overflow_interrupt_callback+0x74>
		tc_tcd1_ovf_callback = callback;
    8348:	8b 81       	ldd	r24, Y+3	; 0x03
    834a:	9c 81       	ldd	r25, Y+4	; 0x04
    834c:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <tc_tcd1_ovf_callback>
    8350:	90 93 d5 22 	sts	0x22D5, r25	; 0x8022d5 <tc_tcd1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    8354:	2f c0       	rjmp	.+94     	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    8356:	89 81       	ldd	r24, Y+1	; 0x01
    8358:	9a 81       	ldd	r25, Y+2	; 0x02
    835a:	81 15       	cp	r24, r1
    835c:	9a 40       	sbci	r25, 0x0A	; 10
    835e:	39 f4       	brne	.+14     	; 0x836e <tc_set_overflow_interrupt_callback+0x8c>
		tc_tce0_ovf_callback = callback;
    8360:	8b 81       	ldd	r24, Y+3	; 0x03
    8362:	9c 81       	ldd	r25, Y+4	; 0x04
    8364:	80 93 dc 22 	sts	0x22DC, r24	; 0x8022dc <tc_tce0_ovf_callback>
    8368:	90 93 dd 22 	sts	0x22DD, r25	; 0x8022dd <tc_tce0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    836c:	23 c0       	rjmp	.+70     	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_ovf_callback = callback;
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    836e:	89 81       	ldd	r24, Y+1	; 0x01
    8370:	9a 81       	ldd	r25, Y+2	; 0x02
    8372:	80 34       	cpi	r24, 0x40	; 64
    8374:	9a 40       	sbci	r25, 0x0A	; 10
    8376:	39 f4       	brne	.+14     	; 0x8386 <tc_set_overflow_interrupt_callback+0xa4>
		tc_tce1_ovf_callback = callback;
    8378:	8b 81       	ldd	r24, Y+3	; 0x03
    837a:	9c 81       	ldd	r25, Y+4	; 0x04
    837c:	80 93 e8 22 	sts	0x22E8, r24	; 0x8022e8 <tc_tce1_ovf_callback>
    8380:	90 93 e9 22 	sts	0x22E9, r25	; 0x8022e9 <tc_tce1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    8384:	17 c0       	rjmp	.+46     	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    8386:	89 81       	ldd	r24, Y+1	; 0x01
    8388:	9a 81       	ldd	r25, Y+2	; 0x02
    838a:	81 15       	cp	r24, r1
    838c:	9b 40       	sbci	r25, 0x0B	; 11
    838e:	39 f4       	brne	.+14     	; 0x839e <tc_set_overflow_interrupt_callback+0xbc>
		tc_tcf0_ovf_callback = callback;
    8390:	8b 81       	ldd	r24, Y+3	; 0x03
    8392:	9c 81       	ldd	r25, Y+4	; 0x04
    8394:	80 93 f0 22 	sts	0x22F0, r24	; 0x8022f0 <tc_tcf0_ovf_callback>
    8398:	90 93 f1 22 	sts	0x22F1, r25	; 0x8022f1 <tc_tcf0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    839c:	0b c0       	rjmp	.+22     	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_ovf_callback = callback;
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    839e:	89 81       	ldd	r24, Y+1	; 0x01
    83a0:	9a 81       	ldd	r25, Y+2	; 0x02
    83a2:	80 34       	cpi	r24, 0x40	; 64
    83a4:	9b 40       	sbci	r25, 0x0B	; 11
    83a6:	31 f4       	brne	.+12     	; 0x83b4 <tc_set_overflow_interrupt_callback+0xd2>
		tc_tcf1_ovf_callback = callback;
    83a8:	8b 81       	ldd	r24, Y+3	; 0x03
    83aa:	9c 81       	ldd	r25, Y+4	; 0x04
    83ac:	80 93 fc 22 	sts	0x22FC, r24	; 0x8022fc <tc_tcf1_ovf_callback>
    83b0:	90 93 fd 22 	sts	0x22FD, r25	; 0x8022fd <tc_tcf1_ovf_callback+0x1>
	} else
#endif
	{}
}
    83b4:	00 00       	nop
    83b6:	24 96       	adiw	r28, 0x04	; 4
    83b8:	cd bf       	out	0x3d, r28	; 61
    83ba:	de bf       	out	0x3e, r29	; 62
    83bc:	df 91       	pop	r29
    83be:	cf 91       	pop	r28
    83c0:	08 95       	ret

000083c2 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    83c2:	cf 93       	push	r28
    83c4:	df 93       	push	r29
    83c6:	1f 92       	push	r1
    83c8:	cd b7       	in	r28, 0x3d	; 61
    83ca:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    83cc:	8f e3       	ldi	r24, 0x3F	; 63
    83ce:	90 e0       	ldi	r25, 0x00	; 0
    83d0:	fc 01       	movw	r30, r24
    83d2:	80 81       	ld	r24, Z
    83d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    83d6:	f8 94       	cli
	return flags;
    83d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    83da:	0f 90       	pop	r0
    83dc:	df 91       	pop	r29
    83de:	cf 91       	pop	r28
    83e0:	08 95       	ret

000083e2 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    83e2:	cf 93       	push	r28
    83e4:	df 93       	push	r29
    83e6:	1f 92       	push	r1
    83e8:	cd b7       	in	r28, 0x3d	; 61
    83ea:	de b7       	in	r29, 0x3e	; 62
    83ec:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    83ee:	8f e3       	ldi	r24, 0x3F	; 63
    83f0:	90 e0       	ldi	r25, 0x00	; 0
    83f2:	29 81       	ldd	r18, Y+1	; 0x01
    83f4:	fc 01       	movw	r30, r24
    83f6:	20 83       	st	Z, r18
}
    83f8:	00 00       	nop
    83fa:	0f 90       	pop	r0
    83fc:	df 91       	pop	r29
    83fe:	cf 91       	pop	r28
    8400:	08 95       	ret

00008402 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    8402:	1f 92       	push	r1
    8404:	0f 92       	push	r0
    8406:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    840a:	0f 92       	push	r0
    840c:	11 24       	eor	r1, r1
    840e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8412:	0f 92       	push	r0
    8414:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8418:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    841c:	0f 92       	push	r0
    841e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8422:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8426:	0f 92       	push	r0
    8428:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    842c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8430:	0f 92       	push	r0
    8432:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8436:	2f 93       	push	r18
    8438:	3f 93       	push	r19
    843a:	4f 93       	push	r20
    843c:	5f 93       	push	r21
    843e:	6f 93       	push	r22
    8440:	7f 93       	push	r23
    8442:	8f 93       	push	r24
    8444:	9f 93       	push	r25
    8446:	af 93       	push	r26
    8448:	bf 93       	push	r27
    844a:	ef 93       	push	r30
    844c:	ff 93       	push	r31
    844e:	cf 93       	push	r28
    8450:	df 93       	push	r29
    8452:	cd b7       	in	r28, 0x3d	; 61
    8454:	de b7       	in	r29, 0x3e	; 62
    8456:	43 d2       	rcall	.+1158   	; 0x88de <twim_interrupt_handler>
    8458:	00 00       	nop
    845a:	df 91       	pop	r29
    845c:	cf 91       	pop	r28
    845e:	ff 91       	pop	r31
    8460:	ef 91       	pop	r30
    8462:	bf 91       	pop	r27
    8464:	af 91       	pop	r26
    8466:	9f 91       	pop	r25
    8468:	8f 91       	pop	r24
    846a:	7f 91       	pop	r23
    846c:	6f 91       	pop	r22
    846e:	5f 91       	pop	r21
    8470:	4f 91       	pop	r20
    8472:	3f 91       	pop	r19
    8474:	2f 91       	pop	r18
    8476:	0f 90       	pop	r0
    8478:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    847c:	0f 90       	pop	r0
    847e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8482:	0f 90       	pop	r0
    8484:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8488:	0f 90       	pop	r0
    848a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    848e:	0f 90       	pop	r0
    8490:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    8494:	0f 90       	pop	r0
    8496:	1f 90       	pop	r1
    8498:	18 95       	reti

0000849a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    849a:	1f 92       	push	r1
    849c:	0f 92       	push	r0
    849e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    84a2:	0f 92       	push	r0
    84a4:	11 24       	eor	r1, r1
    84a6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    84aa:	0f 92       	push	r0
    84ac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    84b0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    84b4:	0f 92       	push	r0
    84b6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    84ba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    84be:	0f 92       	push	r0
    84c0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    84c4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    84c8:	0f 92       	push	r0
    84ca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    84ce:	2f 93       	push	r18
    84d0:	3f 93       	push	r19
    84d2:	4f 93       	push	r20
    84d4:	5f 93       	push	r21
    84d6:	6f 93       	push	r22
    84d8:	7f 93       	push	r23
    84da:	8f 93       	push	r24
    84dc:	9f 93       	push	r25
    84de:	af 93       	push	r26
    84e0:	bf 93       	push	r27
    84e2:	ef 93       	push	r30
    84e4:	ff 93       	push	r31
    84e6:	cf 93       	push	r28
    84e8:	df 93       	push	r29
    84ea:	cd b7       	in	r28, 0x3d	; 61
    84ec:	de b7       	in	r29, 0x3e	; 62
    84ee:	f7 d1       	rcall	.+1006   	; 0x88de <twim_interrupt_handler>
    84f0:	00 00       	nop
    84f2:	df 91       	pop	r29
    84f4:	cf 91       	pop	r28
    84f6:	ff 91       	pop	r31
    84f8:	ef 91       	pop	r30
    84fa:	bf 91       	pop	r27
    84fc:	af 91       	pop	r26
    84fe:	9f 91       	pop	r25
    8500:	8f 91       	pop	r24
    8502:	7f 91       	pop	r23
    8504:	6f 91       	pop	r22
    8506:	5f 91       	pop	r21
    8508:	4f 91       	pop	r20
    850a:	3f 91       	pop	r19
    850c:	2f 91       	pop	r18
    850e:	0f 90       	pop	r0
    8510:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8514:	0f 90       	pop	r0
    8516:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    851a:	0f 90       	pop	r0
    851c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8520:	0f 90       	pop	r0
    8522:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8526:	0f 90       	pop	r0
    8528:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    852c:	0f 90       	pop	r0
    852e:	1f 90       	pop	r1
    8530:	18 95       	reti

00008532 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    8532:	1f 92       	push	r1
    8534:	0f 92       	push	r0
    8536:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    853a:	0f 92       	push	r0
    853c:	11 24       	eor	r1, r1
    853e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8542:	0f 92       	push	r0
    8544:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8548:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    854c:	0f 92       	push	r0
    854e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8552:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8556:	0f 92       	push	r0
    8558:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    855c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8560:	0f 92       	push	r0
    8562:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8566:	2f 93       	push	r18
    8568:	3f 93       	push	r19
    856a:	4f 93       	push	r20
    856c:	5f 93       	push	r21
    856e:	6f 93       	push	r22
    8570:	7f 93       	push	r23
    8572:	8f 93       	push	r24
    8574:	9f 93       	push	r25
    8576:	af 93       	push	r26
    8578:	bf 93       	push	r27
    857a:	ef 93       	push	r30
    857c:	ff 93       	push	r31
    857e:	cf 93       	push	r28
    8580:	df 93       	push	r29
    8582:	cd b7       	in	r28, 0x3d	; 61
    8584:	de b7       	in	r29, 0x3e	; 62
    8586:	ab d1       	rcall	.+854    	; 0x88de <twim_interrupt_handler>
    8588:	00 00       	nop
    858a:	df 91       	pop	r29
    858c:	cf 91       	pop	r28
    858e:	ff 91       	pop	r31
    8590:	ef 91       	pop	r30
    8592:	bf 91       	pop	r27
    8594:	af 91       	pop	r26
    8596:	9f 91       	pop	r25
    8598:	8f 91       	pop	r24
    859a:	7f 91       	pop	r23
    859c:	6f 91       	pop	r22
    859e:	5f 91       	pop	r21
    85a0:	4f 91       	pop	r20
    85a2:	3f 91       	pop	r19
    85a4:	2f 91       	pop	r18
    85a6:	0f 90       	pop	r0
    85a8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    85ac:	0f 90       	pop	r0
    85ae:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    85b2:	0f 90       	pop	r0
    85b4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    85b8:	0f 90       	pop	r0
    85ba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    85be:	0f 90       	pop	r0
    85c0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    85c4:	0f 90       	pop	r0
    85c6:	1f 90       	pop	r1
    85c8:	18 95       	reti

000085ca <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    85ca:	1f 92       	push	r1
    85cc:	0f 92       	push	r0
    85ce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    85d2:	0f 92       	push	r0
    85d4:	11 24       	eor	r1, r1
    85d6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    85da:	0f 92       	push	r0
    85dc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    85e0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    85e4:	0f 92       	push	r0
    85e6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    85ea:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    85ee:	0f 92       	push	r0
    85f0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    85f4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    85f8:	0f 92       	push	r0
    85fa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    85fe:	2f 93       	push	r18
    8600:	3f 93       	push	r19
    8602:	4f 93       	push	r20
    8604:	5f 93       	push	r21
    8606:	6f 93       	push	r22
    8608:	7f 93       	push	r23
    860a:	8f 93       	push	r24
    860c:	9f 93       	push	r25
    860e:	af 93       	push	r26
    8610:	bf 93       	push	r27
    8612:	ef 93       	push	r30
    8614:	ff 93       	push	r31
    8616:	cf 93       	push	r28
    8618:	df 93       	push	r29
    861a:	cd b7       	in	r28, 0x3d	; 61
    861c:	de b7       	in	r29, 0x3e	; 62
    861e:	5f d1       	rcall	.+702    	; 0x88de <twim_interrupt_handler>
    8620:	00 00       	nop
    8622:	df 91       	pop	r29
    8624:	cf 91       	pop	r28
    8626:	ff 91       	pop	r31
    8628:	ef 91       	pop	r30
    862a:	bf 91       	pop	r27
    862c:	af 91       	pop	r26
    862e:	9f 91       	pop	r25
    8630:	8f 91       	pop	r24
    8632:	7f 91       	pop	r23
    8634:	6f 91       	pop	r22
    8636:	5f 91       	pop	r21
    8638:	4f 91       	pop	r20
    863a:	3f 91       	pop	r19
    863c:	2f 91       	pop	r18
    863e:	0f 90       	pop	r0
    8640:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8644:	0f 90       	pop	r0
    8646:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    864a:	0f 90       	pop	r0
    864c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8650:	0f 90       	pop	r0
    8652:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8656:	0f 90       	pop	r0
    8658:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    865c:	0f 90       	pop	r0
    865e:	1f 90       	pop	r1
    8660:	18 95       	reti

00008662 <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    8662:	cf 93       	push	r28
    8664:	df 93       	push	r29
    8666:	1f 92       	push	r1
    8668:	1f 92       	push	r1
    866a:	cd b7       	in	r28, 0x3d	; 61
    866c:	de b7       	in	r29, 0x3e	; 62
    866e:	89 83       	std	Y+1, r24	; 0x01
    8670:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    8672:	89 81       	ldd	r24, Y+1	; 0x01
    8674:	9a 81       	ldd	r25, Y+2	; 0x02
    8676:	fc 01       	movw	r30, r24
    8678:	84 81       	ldd	r24, Z+4	; 0x04
    867a:	88 2f       	mov	r24, r24
    867c:	90 e0       	ldi	r25, 0x00	; 0
    867e:	83 70       	andi	r24, 0x03	; 3
    8680:	99 27       	eor	r25, r25
    8682:	21 e0       	ldi	r18, 0x01	; 1
    8684:	01 97       	sbiw	r24, 0x01	; 1
    8686:	09 f0       	breq	.+2      	; 0x868a <twim_idle+0x28>
    8688:	20 e0       	ldi	r18, 0x00	; 0
    868a:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    868c:	0f 90       	pop	r0
    868e:	0f 90       	pop	r0
    8690:	df 91       	pop	r29
    8692:	cf 91       	pop	r28
    8694:	08 95       	ret

00008696 <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    8696:	cf 93       	push	r28
    8698:	df 93       	push	r29
    869a:	1f 92       	push	r1
    869c:	1f 92       	push	r1
    869e:	cd b7       	in	r28, 0x3d	; 61
    86a0:	de b7       	in	r29, 0x3e	; 62
    86a2:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    86a4:	05 c0       	rjmp	.+10     	; 0x86b0 <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    86a6:	8a 81       	ldd	r24, Y+2	; 0x02
    86a8:	88 23       	and	r24, r24
    86aa:	11 f0       	breq	.+4      	; 0x86b0 <twim_acquire+0x1a>
    86ac:	86 ef       	ldi	r24, 0xF6	; 246
    86ae:	0f c0       	rjmp	.+30     	; 0x86ce <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    86b0:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <transfer+0x9>
    86b4:	88 23       	and	r24, r24
    86b6:	b9 f7       	brne	.-18     	; 0x86a6 <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    86b8:	84 de       	rcall	.-760    	; 0x83c2 <cpu_irq_save>
    86ba:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    86bc:	81 e0       	ldi	r24, 0x01	; 1
    86be:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    86c2:	80 e8       	ldi	r24, 0x80	; 128
    86c4:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <transfer+0xa>

	cpu_irq_restore (flags);
    86c8:	89 81       	ldd	r24, Y+1	; 0x01
    86ca:	8b de       	rcall	.-746    	; 0x83e2 <cpu_irq_restore>

	return STATUS_OK;
    86cc:	80 e0       	ldi	r24, 0x00	; 0
}
    86ce:	0f 90       	pop	r0
    86d0:	0f 90       	pop	r0
    86d2:	df 91       	pop	r29
    86d4:	cf 91       	pop	r28
    86d6:	08 95       	ret

000086d8 <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    86d8:	cf 93       	push	r28
    86da:	df 93       	push	r29
    86dc:	1f 92       	push	r1
    86de:	cd b7       	in	r28, 0x3d	; 61
    86e0:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    86e2:	00 00       	nop
    86e4:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <transfer+0xa>
    86e8:	80 38       	cpi	r24, 0x80	; 128
    86ea:	e1 f3       	breq	.-8      	; 0x86e4 <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    86ec:	00 c0       	rjmp	.+0      	; 0x86ee <twim_release+0x16>
    86ee:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    86f2:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    86f6:	b5 df       	rcall	.-150    	; 0x8662 <twim_idle>
    86f8:	98 2f       	mov	r25, r24
    86fa:	81 e0       	ldi	r24, 0x01	; 1
    86fc:	89 27       	eor	r24, r25
    86fe:	88 23       	and	r24, r24
    8700:	b1 f7       	brne	.-20     	; 0x86ee <twim_release+0x16>

	status_code_t const status = transfer.status;
    8702:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <transfer+0xa>
    8706:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    8708:	10 92 0d 23 	sts	0x230D, r1	; 0x80230d <transfer+0x9>

	return status;
    870c:	89 81       	ldd	r24, Y+1	; 0x01
}
    870e:	0f 90       	pop	r0
    8710:	df 91       	pop	r29
    8712:	cf 91       	pop	r28
    8714:	08 95       	ret

00008716 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    8716:	cf 93       	push	r28
    8718:	df 93       	push	r29
    871a:	cd b7       	in	r28, 0x3d	; 61
    871c:	de b7       	in	r29, 0x3e	; 62
    871e:	28 97       	sbiw	r28, 0x08	; 8
    8720:	cd bf       	out	0x3d, r28	; 61
    8722:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    8724:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    8728:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    872c:	89 83       	std	Y+1, r24	; 0x01
    872e:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    8730:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <transfer+0x2>
    8734:	90 91 07 23 	lds	r25, 0x2307	; 0x802307 <transfer+0x3>
    8738:	8b 83       	std	Y+3, r24	; 0x03
    873a:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    873c:	20 91 08 23 	lds	r18, 0x2308	; 0x802308 <transfer+0x4>
    8740:	30 91 09 23 	lds	r19, 0x2309	; 0x802309 <transfer+0x5>
    8744:	8b 81       	ldd	r24, Y+3	; 0x03
    8746:	9c 81       	ldd	r25, Y+4	; 0x04
    8748:	fc 01       	movw	r30, r24
    874a:	84 81       	ldd	r24, Z+4	; 0x04
    874c:	95 81       	ldd	r25, Z+5	; 0x05
    874e:	28 17       	cp	r18, r24
    8750:	39 07       	cpc	r19, r25
    8752:	e4 f4       	brge	.+56     	; 0x878c <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    8754:	8b 81       	ldd	r24, Y+3	; 0x03
    8756:	9c 81       	ldd	r25, Y+4	; 0x04
    8758:	01 96       	adiw	r24, 0x01	; 1
    875a:	8d 83       	std	Y+5, r24	; 0x05
    875c:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    875e:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <transfer+0x4>
    8762:	90 91 09 23 	lds	r25, 0x2309	; 0x802309 <transfer+0x5>
    8766:	9c 01       	movw	r18, r24
    8768:	2f 5f       	subi	r18, 0xFF	; 255
    876a:	3f 4f       	sbci	r19, 0xFF	; 255
    876c:	20 93 08 23 	sts	0x2308, r18	; 0x802308 <transfer+0x4>
    8770:	30 93 09 23 	sts	0x2309, r19	; 0x802309 <transfer+0x5>
    8774:	9c 01       	movw	r18, r24
    8776:	8d 81       	ldd	r24, Y+5	; 0x05
    8778:	9e 81       	ldd	r25, Y+6	; 0x06
    877a:	82 0f       	add	r24, r18
    877c:	93 1f       	adc	r25, r19
    877e:	fc 01       	movw	r30, r24
    8780:	20 81       	ld	r18, Z
    8782:	89 81       	ldd	r24, Y+1	; 0x01
    8784:	9a 81       	ldd	r25, Y+2	; 0x02
    8786:	fc 01       	movw	r30, r24
    8788:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    878a:	3f c0       	rjmp	.+126    	; 0x880a <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    878c:	20 91 0a 23 	lds	r18, 0x230A	; 0x80230a <transfer+0x6>
    8790:	30 91 0b 23 	lds	r19, 0x230B	; 0x80230b <transfer+0x7>
    8794:	8b 81       	ldd	r24, Y+3	; 0x03
    8796:	9c 81       	ldd	r25, Y+4	; 0x04
    8798:	fc 01       	movw	r30, r24
    879a:	80 85       	ldd	r24, Z+8	; 0x08
    879c:	91 85       	ldd	r25, Z+9	; 0x09
    879e:	28 17       	cp	r18, r24
    87a0:	39 07       	cpc	r19, r25
    87a2:	60 f5       	brcc	.+88     	; 0x87fc <twim_write_handler+0xe6>

		if (transfer.read) {
    87a4:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <transfer+0x8>
    87a8:	88 23       	and	r24, r24
    87aa:	59 f0       	breq	.+22     	; 0x87c2 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    87ac:	89 81       	ldd	r24, Y+1	; 0x01
    87ae:	9a 81       	ldd	r25, Y+2	; 0x02
    87b0:	fc 01       	movw	r30, r24
    87b2:	86 81       	ldd	r24, Z+6	; 0x06
    87b4:	28 2f       	mov	r18, r24
    87b6:	21 60       	ori	r18, 0x01	; 1
    87b8:	89 81       	ldd	r24, Y+1	; 0x01
    87ba:	9a 81       	ldd	r25, Y+2	; 0x02
    87bc:	fc 01       	movw	r30, r24
    87be:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    87c0:	24 c0       	rjmp	.+72     	; 0x880a <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    87c2:	8b 81       	ldd	r24, Y+3	; 0x03
    87c4:	9c 81       	ldd	r25, Y+4	; 0x04
    87c6:	fc 01       	movw	r30, r24
    87c8:	86 81       	ldd	r24, Z+6	; 0x06
    87ca:	97 81       	ldd	r25, Z+7	; 0x07
    87cc:	8f 83       	std	Y+7, r24	; 0x07
    87ce:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    87d0:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <transfer+0x6>
    87d4:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <transfer+0x7>
    87d8:	9c 01       	movw	r18, r24
    87da:	2f 5f       	subi	r18, 0xFF	; 255
    87dc:	3f 4f       	sbci	r19, 0xFF	; 255
    87de:	20 93 0a 23 	sts	0x230A, r18	; 0x80230a <transfer+0x6>
    87e2:	30 93 0b 23 	sts	0x230B, r19	; 0x80230b <transfer+0x7>
    87e6:	2f 81       	ldd	r18, Y+7	; 0x07
    87e8:	38 85       	ldd	r19, Y+8	; 0x08
    87ea:	82 0f       	add	r24, r18
    87ec:	93 1f       	adc	r25, r19
    87ee:	fc 01       	movw	r30, r24
    87f0:	20 81       	ld	r18, Z
    87f2:	89 81       	ldd	r24, Y+1	; 0x01
    87f4:	9a 81       	ldd	r25, Y+2	; 0x02
    87f6:	fc 01       	movw	r30, r24
    87f8:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    87fa:	07 c0       	rjmp	.+14     	; 0x880a <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    87fc:	89 81       	ldd	r24, Y+1	; 0x01
    87fe:	9a 81       	ldd	r25, Y+2	; 0x02
    8800:	23 e0       	ldi	r18, 0x03	; 3
    8802:	fc 01       	movw	r30, r24
    8804:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    8806:	10 92 0e 23 	sts	0x230E, r1	; 0x80230e <transfer+0xa>
	}
}
    880a:	00 00       	nop
    880c:	28 96       	adiw	r28, 0x08	; 8
    880e:	cd bf       	out	0x3d, r28	; 61
    8810:	de bf       	out	0x3e, r29	; 62
    8812:	df 91       	pop	r29
    8814:	cf 91       	pop	r28
    8816:	08 95       	ret

00008818 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    8818:	cf 93       	push	r28
    881a:	df 93       	push	r29
    881c:	00 d0       	rcall	.+0      	; 0x881e <twim_read_handler+0x6>
    881e:	00 d0       	rcall	.+0      	; 0x8820 <twim_read_handler+0x8>
    8820:	cd b7       	in	r28, 0x3d	; 61
    8822:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    8824:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    8828:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    882c:	89 83       	std	Y+1, r24	; 0x01
    882e:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    8830:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <transfer+0x2>
    8834:	90 91 07 23 	lds	r25, 0x2307	; 0x802307 <transfer+0x3>
    8838:	8b 83       	std	Y+3, r24	; 0x03
    883a:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    883c:	20 91 0a 23 	lds	r18, 0x230A	; 0x80230a <transfer+0x6>
    8840:	30 91 0b 23 	lds	r19, 0x230B	; 0x80230b <transfer+0x7>
    8844:	8b 81       	ldd	r24, Y+3	; 0x03
    8846:	9c 81       	ldd	r25, Y+4	; 0x04
    8848:	fc 01       	movw	r30, r24
    884a:	80 85       	ldd	r24, Z+8	; 0x08
    884c:	91 85       	ldd	r25, Z+9	; 0x09
    884e:	28 17       	cp	r18, r24
    8850:	39 07       	cpc	r19, r25
    8852:	b0 f5       	brcc	.+108    	; 0x88c0 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    8854:	8b 81       	ldd	r24, Y+3	; 0x03
    8856:	9c 81       	ldd	r25, Y+4	; 0x04
    8858:	fc 01       	movw	r30, r24
    885a:	86 81       	ldd	r24, Z+6	; 0x06
    885c:	97 81       	ldd	r25, Z+7	; 0x07
    885e:	8d 83       	std	Y+5, r24	; 0x05
    8860:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    8862:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <transfer+0x6>
    8866:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <transfer+0x7>
    886a:	9c 01       	movw	r18, r24
    886c:	2f 5f       	subi	r18, 0xFF	; 255
    886e:	3f 4f       	sbci	r19, 0xFF	; 255
    8870:	20 93 0a 23 	sts	0x230A, r18	; 0x80230a <transfer+0x6>
    8874:	30 93 0b 23 	sts	0x230B, r19	; 0x80230b <transfer+0x7>
    8878:	2d 81       	ldd	r18, Y+5	; 0x05
    887a:	3e 81       	ldd	r19, Y+6	; 0x06
    887c:	82 0f       	add	r24, r18
    887e:	93 1f       	adc	r25, r19
    8880:	29 81       	ldd	r18, Y+1	; 0x01
    8882:	3a 81       	ldd	r19, Y+2	; 0x02
    8884:	f9 01       	movw	r30, r18
    8886:	27 81       	ldd	r18, Z+7	; 0x07
    8888:	fc 01       	movw	r30, r24
    888a:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    888c:	20 91 0a 23 	lds	r18, 0x230A	; 0x80230a <transfer+0x6>
    8890:	30 91 0b 23 	lds	r19, 0x230B	; 0x80230b <transfer+0x7>
    8894:	8b 81       	ldd	r24, Y+3	; 0x03
    8896:	9c 81       	ldd	r25, Y+4	; 0x04
    8898:	fc 01       	movw	r30, r24
    889a:	80 85       	ldd	r24, Z+8	; 0x08
    889c:	91 85       	ldd	r25, Z+9	; 0x09
    889e:	28 17       	cp	r18, r24
    88a0:	39 07       	cpc	r19, r25
    88a2:	30 f4       	brcc	.+12     	; 0x88b0 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    88a4:	89 81       	ldd	r24, Y+1	; 0x01
    88a6:	9a 81       	ldd	r25, Y+2	; 0x02
    88a8:	22 e0       	ldi	r18, 0x02	; 2
    88aa:	fc 01       	movw	r30, r24
    88ac:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    88ae:	10 c0       	rjmp	.+32     	; 0x88d0 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    88b0:	89 81       	ldd	r24, Y+1	; 0x01
    88b2:	9a 81       	ldd	r25, Y+2	; 0x02
    88b4:	27 e0       	ldi	r18, 0x07	; 7
    88b6:	fc 01       	movw	r30, r24
    88b8:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    88ba:	10 92 0e 23 	sts	0x230E, r1	; 0x80230e <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    88be:	08 c0       	rjmp	.+16     	; 0x88d0 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    88c0:	89 81       	ldd	r24, Y+1	; 0x01
    88c2:	9a 81       	ldd	r25, Y+2	; 0x02
    88c4:	23 e0       	ldi	r18, 0x03	; 3
    88c6:	fc 01       	movw	r30, r24
    88c8:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    88ca:	89 ef       	ldi	r24, 0xF9	; 249
    88cc:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <transfer+0xa>
	}
}
    88d0:	00 00       	nop
    88d2:	26 96       	adiw	r28, 0x06	; 6
    88d4:	cd bf       	out	0x3d, r28	; 61
    88d6:	de bf       	out	0x3e, r29	; 62
    88d8:	df 91       	pop	r29
    88da:	cf 91       	pop	r28
    88dc:	08 95       	ret

000088de <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    88de:	cf 93       	push	r28
    88e0:	df 93       	push	r29
    88e2:	1f 92       	push	r1
    88e4:	cd b7       	in	r28, 0x3d	; 61
    88e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    88e8:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    88ec:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    88f0:	fc 01       	movw	r30, r24
    88f2:	84 81       	ldd	r24, Z+4	; 0x04
    88f4:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    88f6:	89 81       	ldd	r24, Y+1	; 0x01
    88f8:	88 2f       	mov	r24, r24
    88fa:	90 e0       	ldi	r25, 0x00	; 0
    88fc:	88 70       	andi	r24, 0x08	; 8
    88fe:	99 27       	eor	r25, r25
    8900:	89 2b       	or	r24, r25
    8902:	99 f0       	breq	.+38     	; 0x892a <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    8904:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    8908:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    890c:	29 81       	ldd	r18, Y+1	; 0x01
    890e:	28 60       	ori	r18, 0x08	; 8
    8910:	fc 01       	movw	r30, r24
    8912:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    8914:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    8918:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    891c:	23 e0       	ldi	r18, 0x03	; 3
    891e:	fc 01       	movw	r30, r24
    8920:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    8922:	86 ef       	ldi	r24, 0xF6	; 246
    8924:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    8928:	2a c0       	rjmp	.+84     	; 0x897e <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    892a:	89 81       	ldd	r24, Y+1	; 0x01
    892c:	88 2f       	mov	r24, r24
    892e:	90 e0       	ldi	r25, 0x00	; 0
    8930:	84 70       	andi	r24, 0x04	; 4
    8932:	99 27       	eor	r25, r25
    8934:	89 2b       	or	r24, r25
    8936:	39 f4       	brne	.+14     	; 0x8946 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    8938:	89 81       	ldd	r24, Y+1	; 0x01
    893a:	88 2f       	mov	r24, r24
    893c:	90 e0       	ldi	r25, 0x00	; 0
    893e:	80 71       	andi	r24, 0x10	; 16
    8940:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    8942:	89 2b       	or	r24, r25
    8944:	59 f0       	breq	.+22     	; 0x895c <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    8946:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    894a:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    894e:	23 e0       	ldi	r18, 0x03	; 3
    8950:	fc 01       	movw	r30, r24
    8952:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    8954:	8f ef       	ldi	r24, 0xFF	; 255
    8956:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    895a:	11 c0       	rjmp	.+34     	; 0x897e <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    895c:	89 81       	ldd	r24, Y+1	; 0x01
    895e:	88 2f       	mov	r24, r24
    8960:	90 e0       	ldi	r25, 0x00	; 0
    8962:	80 74       	andi	r24, 0x40	; 64
    8964:	99 27       	eor	r25, r25
    8966:	89 2b       	or	r24, r25
    8968:	11 f0       	breq	.+4      	; 0x896e <twim_interrupt_handler+0x90>

		twim_write_handler();
    896a:	d5 de       	rcall	.-598    	; 0x8716 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    896c:	08 c0       	rjmp	.+16     	; 0x897e <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    896e:	89 81       	ldd	r24, Y+1	; 0x01
    8970:	88 23       	and	r24, r24

		twim_read_handler();
    8972:	14 f4       	brge	.+4      	; 0x8978 <twim_interrupt_handler+0x9a>
    8974:	51 df       	rcall	.-350    	; 0x8818 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    8976:	03 c0       	rjmp	.+6      	; 0x897e <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    8978:	8b ef       	ldi	r24, 0xFB	; 251
    897a:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <transfer+0xa>
	}
}
    897e:	00 00       	nop
    8980:	0f 90       	pop	r0
    8982:	df 91       	pop	r29
    8984:	cf 91       	pop	r28
    8986:	08 95       	ret

00008988 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    8988:	cf 93       	push	r28
    898a:	df 93       	push	r29
    898c:	cd b7       	in	r28, 0x3d	; 61
    898e:	de b7       	in	r29, 0x3e	; 62
    8990:	25 97       	sbiw	r28, 0x05	; 5
    8992:	cd bf       	out	0x3d, r28	; 61
    8994:	de bf       	out	0x3e, r29	; 62
    8996:	8a 83       	std	Y+2, r24	; 0x02
    8998:	9b 83       	std	Y+3, r25	; 0x03
    899a:	6c 83       	std	Y+4, r22	; 0x04
    899c:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    899e:	88 eb       	ldi	r24, 0xB8	; 184
    89a0:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    89a2:	8c 81       	ldd	r24, Y+4	; 0x04
    89a4:	9d 81       	ldd	r25, Y+5	; 0x05
    89a6:	fc 01       	movw	r30, r24
    89a8:	84 81       	ldd	r24, Z+4	; 0x04
    89aa:	95 81       	ldd	r25, Z+5	; 0x05
    89ac:	a6 81       	ldd	r26, Z+6	; 0x06
    89ae:	b7 81       	ldd	r27, Z+7	; 0x07
    89b0:	28 2f       	mov	r18, r24
    89b2:	8a 81       	ldd	r24, Y+2	; 0x02
    89b4:	9b 81       	ldd	r25, Y+3	; 0x03
    89b6:	fc 01       	movw	r30, r24
    89b8:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    89ba:	8a 81       	ldd	r24, Y+2	; 0x02
    89bc:	9b 81       	ldd	r25, Y+3	; 0x03
    89be:	29 81       	ldd	r18, Y+1	; 0x01
    89c0:	fc 01       	movw	r30, r24
    89c2:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    89c4:	8a 81       	ldd	r24, Y+2	; 0x02
    89c6:	9b 81       	ldd	r25, Y+3	; 0x03
    89c8:	21 e0       	ldi	r18, 0x01	; 1
    89ca:	fc 01       	movw	r30, r24
    89cc:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    89ce:	10 92 0d 23 	sts	0x230D, r1	; 0x80230d <transfer+0x9>
	transfer.status    = STATUS_OK;
    89d2:	10 92 0e 23 	sts	0x230E, r1	; 0x80230e <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    89d6:	80 ea       	ldi	r24, 0xA0	; 160
    89d8:	90 e0       	ldi	r25, 0x00	; 0
    89da:	20 ea       	ldi	r18, 0xA0	; 160
    89dc:	30 e0       	ldi	r19, 0x00	; 0
    89de:	f9 01       	movw	r30, r18
    89e0:	22 81       	ldd	r18, Z+2	; 0x02
    89e2:	22 60       	ori	r18, 0x02	; 2
    89e4:	fc 01       	movw	r30, r24
    89e6:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    89e8:	78 94       	sei

	return STATUS_OK;
    89ea:	80 e0       	ldi	r24, 0x00	; 0
}
    89ec:	25 96       	adiw	r28, 0x05	; 5
    89ee:	cd bf       	out	0x3d, r28	; 61
    89f0:	de bf       	out	0x3e, r29	; 62
    89f2:	df 91       	pop	r29
    89f4:	cf 91       	pop	r28
    89f6:	08 95       	ret

000089f8 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    89f8:	cf 93       	push	r28
    89fa:	df 93       	push	r29
    89fc:	cd b7       	in	r28, 0x3d	; 61
    89fe:	de b7       	in	r29, 0x3e	; 62
    8a00:	27 97       	sbiw	r28, 0x07	; 7
    8a02:	cd bf       	out	0x3d, r28	; 61
    8a04:	de bf       	out	0x3e, r29	; 62
    8a06:	8b 83       	std	Y+3, r24	; 0x03
    8a08:	9c 83       	std	Y+4, r25	; 0x04
    8a0a:	6d 83       	std	Y+5, r22	; 0x05
    8a0c:	7e 83       	std	Y+6, r23	; 0x06
    8a0e:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    8a10:	8b 81       	ldd	r24, Y+3	; 0x03
    8a12:	9c 81       	ldd	r25, Y+4	; 0x04
    8a14:	89 2b       	or	r24, r25
    8a16:	21 f0       	breq	.+8      	; 0x8a20 <twi_master_transfer+0x28>
    8a18:	8d 81       	ldd	r24, Y+5	; 0x05
    8a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    8a1c:	89 2b       	or	r24, r25
    8a1e:	11 f4       	brne	.+4      	; 0x8a24 <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    8a20:	88 ef       	ldi	r24, 0xF8	; 248
    8a22:	49 c0       	rjmp	.+146    	; 0x8ab6 <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    8a24:	8d 81       	ldd	r24, Y+5	; 0x05
    8a26:	9e 81       	ldd	r25, Y+6	; 0x06
    8a28:	fc 01       	movw	r30, r24
    8a2a:	82 85       	ldd	r24, Z+10	; 0x0a
    8a2c:	34 de       	rcall	.-920    	; 0x8696 <twim_acquire>
    8a2e:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    8a30:	89 81       	ldd	r24, Y+1	; 0x01
    8a32:	88 23       	and	r24, r24
    8a34:	09 f0       	breq	.+2      	; 0x8a38 <twi_master_transfer+0x40>
    8a36:	3e c0       	rjmp	.+124    	; 0x8ab4 <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    8a38:	8b 81       	ldd	r24, Y+3	; 0x03
    8a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    8a3c:	80 93 04 23 	sts	0x2304, r24	; 0x802304 <transfer>
    8a40:	90 93 05 23 	sts	0x2305, r25	; 0x802305 <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    8a44:	8d 81       	ldd	r24, Y+5	; 0x05
    8a46:	9e 81       	ldd	r25, Y+6	; 0x06
    8a48:	80 93 06 23 	sts	0x2306, r24	; 0x802306 <transfer+0x2>
    8a4c:	90 93 07 23 	sts	0x2307, r25	; 0x802307 <transfer+0x3>
		transfer.addr_count  = 0;
    8a50:	10 92 08 23 	sts	0x2308, r1	; 0x802308 <transfer+0x4>
    8a54:	10 92 09 23 	sts	0x2309, r1	; 0x802309 <transfer+0x5>
		transfer.data_count  = 0;
    8a58:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <transfer+0x6>
    8a5c:	10 92 0b 23 	sts	0x230B, r1	; 0x80230b <transfer+0x7>
		transfer.read        = read;
    8a60:	8f 81       	ldd	r24, Y+7	; 0x07
    8a62:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    8a66:	8d 81       	ldd	r24, Y+5	; 0x05
    8a68:	9e 81       	ldd	r25, Y+6	; 0x06
    8a6a:	fc 01       	movw	r30, r24
    8a6c:	80 81       	ld	r24, Z
    8a6e:	88 0f       	add	r24, r24
    8a70:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    8a72:	8d 81       	ldd	r24, Y+5	; 0x05
    8a74:	9e 81       	ldd	r25, Y+6	; 0x06
    8a76:	fc 01       	movw	r30, r24
    8a78:	84 81       	ldd	r24, Z+4	; 0x04
    8a7a:	95 81       	ldd	r25, Z+5	; 0x05
    8a7c:	89 2b       	or	r24, r25
    8a7e:	29 f4       	brne	.+10     	; 0x8a8a <twi_master_transfer+0x92>
    8a80:	9f 81       	ldd	r25, Y+7	; 0x07
    8a82:	81 e0       	ldi	r24, 0x01	; 1
    8a84:	89 27       	eor	r24, r25
    8a86:	88 23       	and	r24, r24
    8a88:	41 f0       	breq	.+16     	; 0x8a9a <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    8a8a:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    8a8e:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    8a92:	2a 81       	ldd	r18, Y+2	; 0x02
    8a94:	fc 01       	movw	r30, r24
    8a96:	26 83       	std	Z+6, r18	; 0x06
    8a98:	0b c0       	rjmp	.+22     	; 0x8ab0 <twi_master_transfer+0xb8>
		} else if (read) {
    8a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    8a9c:	88 23       	and	r24, r24
    8a9e:	41 f0       	breq	.+16     	; 0x8ab0 <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    8aa0:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <transfer>
    8aa4:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <transfer+0x1>
    8aa8:	2a 81       	ldd	r18, Y+2	; 0x02
    8aaa:	21 60       	ori	r18, 0x01	; 1
    8aac:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    8aae:	26 83       	std	Z+6, r18	; 0x06
    8ab0:	13 de       	rcall	.-986    	; 0x86d8 <twim_release>
    8ab2:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    8ab4:	89 81       	ldd	r24, Y+1	; 0x01
}
    8ab6:	27 96       	adiw	r28, 0x07	; 7
    8ab8:	cd bf       	out	0x3d, r28	; 61
    8aba:	de bf       	out	0x3e, r29	; 62
    8abc:	df 91       	pop	r29
    8abe:	cf 91       	pop	r28
    8ac0:	08 95       	ret

00008ac2 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    8ac2:	cf 93       	push	r28
    8ac4:	df 93       	push	r29
    8ac6:	1f 92       	push	r1
    8ac8:	1f 92       	push	r1
    8aca:	cd b7       	in	r28, 0x3d	; 61
    8acc:	de b7       	in	r29, 0x3e	; 62
    8ace:	89 83       	std	Y+1, r24	; 0x01
    8ad0:	9a 83       	std	Y+2, r25	; 0x02
    8ad2:	89 81       	ldd	r24, Y+1	; 0x01
    8ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ad6:	fc 01       	movw	r30, r24
    8ad8:	84 81       	ldd	r24, Z+4	; 0x04
    8ada:	28 2f       	mov	r18, r24
    8adc:	20 61       	ori	r18, 0x10	; 16
    8ade:	89 81       	ldd	r24, Y+1	; 0x01
    8ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    8ae2:	fc 01       	movw	r30, r24
    8ae4:	24 83       	std	Z+4, r18	; 0x04
    8ae6:	00 00       	nop
    8ae8:	0f 90       	pop	r0
    8aea:	0f 90       	pop	r0
    8aec:	df 91       	pop	r29
    8aee:	cf 91       	pop	r28
    8af0:	08 95       	ret

00008af2 <usart_format_set>:
    8af2:	cf 93       	push	r28
    8af4:	df 93       	push	r29
    8af6:	cd b7       	in	r28, 0x3d	; 61
    8af8:	de b7       	in	r29, 0x3e	; 62
    8afa:	25 97       	sbiw	r28, 0x05	; 5
    8afc:	cd bf       	out	0x3d, r28	; 61
    8afe:	de bf       	out	0x3e, r29	; 62
    8b00:	89 83       	std	Y+1, r24	; 0x01
    8b02:	9a 83       	std	Y+2, r25	; 0x02
    8b04:	6b 83       	std	Y+3, r22	; 0x03
    8b06:	4c 83       	std	Y+4, r20	; 0x04
    8b08:	2d 83       	std	Y+5, r18	; 0x05
    8b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    8b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    8b0e:	89 2b       	or	r24, r25
    8b10:	98 2f       	mov	r25, r24
    8b12:	8d 81       	ldd	r24, Y+5	; 0x05
    8b14:	88 23       	and	r24, r24
    8b16:	11 f0       	breq	.+4      	; 0x8b1c <usart_format_set+0x2a>
    8b18:	88 e0       	ldi	r24, 0x08	; 8
    8b1a:	01 c0       	rjmp	.+2      	; 0x8b1e <usart_format_set+0x2c>
    8b1c:	80 e0       	ldi	r24, 0x00	; 0
    8b1e:	89 2b       	or	r24, r25
    8b20:	28 2f       	mov	r18, r24
    8b22:	89 81       	ldd	r24, Y+1	; 0x01
    8b24:	9a 81       	ldd	r25, Y+2	; 0x02
    8b26:	fc 01       	movw	r30, r24
    8b28:	25 83       	std	Z+5, r18	; 0x05
    8b2a:	00 00       	nop
    8b2c:	25 96       	adiw	r28, 0x05	; 5
    8b2e:	cd bf       	out	0x3d, r28	; 61
    8b30:	de bf       	out	0x3e, r29	; 62
    8b32:	df 91       	pop	r29
    8b34:	cf 91       	pop	r28
    8b36:	08 95       	ret

00008b38 <usart_tx_enable>:
    8b38:	cf 93       	push	r28
    8b3a:	df 93       	push	r29
    8b3c:	1f 92       	push	r1
    8b3e:	1f 92       	push	r1
    8b40:	cd b7       	in	r28, 0x3d	; 61
    8b42:	de b7       	in	r29, 0x3e	; 62
    8b44:	89 83       	std	Y+1, r24	; 0x01
    8b46:	9a 83       	std	Y+2, r25	; 0x02
    8b48:	89 81       	ldd	r24, Y+1	; 0x01
    8b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    8b4c:	fc 01       	movw	r30, r24
    8b4e:	84 81       	ldd	r24, Z+4	; 0x04
    8b50:	28 2f       	mov	r18, r24
    8b52:	28 60       	ori	r18, 0x08	; 8
    8b54:	89 81       	ldd	r24, Y+1	; 0x01
    8b56:	9a 81       	ldd	r25, Y+2	; 0x02
    8b58:	fc 01       	movw	r30, r24
    8b5a:	24 83       	std	Z+4, r18	; 0x04
    8b5c:	00 00       	nop
    8b5e:	0f 90       	pop	r0
    8b60:	0f 90       	pop	r0
    8b62:	df 91       	pop	r29
    8b64:	cf 91       	pop	r28
    8b66:	08 95       	ret

00008b68 <usart_set_mode>:
    8b68:	cf 93       	push	r28
    8b6a:	df 93       	push	r29
    8b6c:	00 d0       	rcall	.+0      	; 0x8b6e <usart_set_mode+0x6>
    8b6e:	cd b7       	in	r28, 0x3d	; 61
    8b70:	de b7       	in	r29, 0x3e	; 62
    8b72:	89 83       	std	Y+1, r24	; 0x01
    8b74:	9a 83       	std	Y+2, r25	; 0x02
    8b76:	6b 83       	std	Y+3, r22	; 0x03
    8b78:	89 81       	ldd	r24, Y+1	; 0x01
    8b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    8b7c:	fc 01       	movw	r30, r24
    8b7e:	85 81       	ldd	r24, Z+5	; 0x05
    8b80:	98 2f       	mov	r25, r24
    8b82:	9f 73       	andi	r25, 0x3F	; 63
    8b84:	8b 81       	ldd	r24, Y+3	; 0x03
    8b86:	89 2b       	or	r24, r25
    8b88:	28 2f       	mov	r18, r24
    8b8a:	89 81       	ldd	r24, Y+1	; 0x01
    8b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    8b8e:	fc 01       	movw	r30, r24
    8b90:	25 83       	std	Z+5, r18	; 0x05
    8b92:	00 00       	nop
    8b94:	23 96       	adiw	r28, 0x03	; 3
    8b96:	cd bf       	out	0x3d, r28	; 61
    8b98:	de bf       	out	0x3e, r29	; 62
    8b9a:	df 91       	pop	r29
    8b9c:	cf 91       	pop	r28
    8b9e:	08 95       	ret

00008ba0 <usart_data_register_is_empty>:
    8ba0:	cf 93       	push	r28
    8ba2:	df 93       	push	r29
    8ba4:	1f 92       	push	r1
    8ba6:	1f 92       	push	r1
    8ba8:	cd b7       	in	r28, 0x3d	; 61
    8baa:	de b7       	in	r29, 0x3e	; 62
    8bac:	89 83       	std	Y+1, r24	; 0x01
    8bae:	9a 83       	std	Y+2, r25	; 0x02
    8bb0:	89 81       	ldd	r24, Y+1	; 0x01
    8bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    8bb4:	fc 01       	movw	r30, r24
    8bb6:	81 81       	ldd	r24, Z+1	; 0x01
    8bb8:	88 2f       	mov	r24, r24
    8bba:	90 e0       	ldi	r25, 0x00	; 0
    8bbc:	80 72       	andi	r24, 0x20	; 32
    8bbe:	99 27       	eor	r25, r25
    8bc0:	21 e0       	ldi	r18, 0x01	; 1
    8bc2:	89 2b       	or	r24, r25
    8bc4:	09 f4       	brne	.+2      	; 0x8bc8 <usart_data_register_is_empty+0x28>
    8bc6:	20 e0       	ldi	r18, 0x00	; 0
    8bc8:	82 2f       	mov	r24, r18
    8bca:	0f 90       	pop	r0
    8bcc:	0f 90       	pop	r0
    8bce:	df 91       	pop	r29
    8bd0:	cf 91       	pop	r28
    8bd2:	08 95       	ret

00008bd4 <usart_rx_is_complete>:
    8bd4:	cf 93       	push	r28
    8bd6:	df 93       	push	r29
    8bd8:	1f 92       	push	r1
    8bda:	1f 92       	push	r1
    8bdc:	cd b7       	in	r28, 0x3d	; 61
    8bde:	de b7       	in	r29, 0x3e	; 62
    8be0:	89 83       	std	Y+1, r24	; 0x01
    8be2:	9a 83       	std	Y+2, r25	; 0x02
    8be4:	89 81       	ldd	r24, Y+1	; 0x01
    8be6:	9a 81       	ldd	r25, Y+2	; 0x02
    8be8:	fc 01       	movw	r30, r24
    8bea:	81 81       	ldd	r24, Z+1	; 0x01
    8bec:	88 2f       	mov	r24, r24
    8bee:	90 e0       	ldi	r25, 0x00	; 0
    8bf0:	80 78       	andi	r24, 0x80	; 128
    8bf2:	99 27       	eor	r25, r25
    8bf4:	21 e0       	ldi	r18, 0x01	; 1
    8bf6:	89 2b       	or	r24, r25
    8bf8:	09 f4       	brne	.+2      	; 0x8bfc <usart_rx_is_complete+0x28>
    8bfa:	20 e0       	ldi	r18, 0x00	; 0
    8bfc:	82 2f       	mov	r24, r18
    8bfe:	0f 90       	pop	r0
    8c00:	0f 90       	pop	r0
    8c02:	df 91       	pop	r29
    8c04:	cf 91       	pop	r28
    8c06:	08 95       	ret

00008c08 <sysclk_get_main_hz>:
    8c08:	cf 93       	push	r28
    8c0a:	df 93       	push	r29
    8c0c:	cd b7       	in	r28, 0x3d	; 61
    8c0e:	de b7       	in	r29, 0x3e	; 62
    8c10:	80 e0       	ldi	r24, 0x00	; 0
    8c12:	9c e6       	ldi	r25, 0x6C	; 108
    8c14:	ac ed       	ldi	r26, 0xDC	; 220
    8c16:	b2 e0       	ldi	r27, 0x02	; 2
    8c18:	bc 01       	movw	r22, r24
    8c1a:	cd 01       	movw	r24, r26
    8c1c:	df 91       	pop	r29
    8c1e:	cf 91       	pop	r28
    8c20:	08 95       	ret

00008c22 <sysclk_get_per4_hz>:
    8c22:	cf 93       	push	r28
    8c24:	df 93       	push	r29
    8c26:	1f 92       	push	r1
    8c28:	cd b7       	in	r28, 0x3d	; 61
    8c2a:	de b7       	in	r29, 0x3e	; 62
    8c2c:	19 82       	std	Y+1, r1	; 0x01
    8c2e:	ec df       	rcall	.-40     	; 0x8c08 <sysclk_get_main_hz>
    8c30:	dc 01       	movw	r26, r24
    8c32:	cb 01       	movw	r24, r22
    8c34:	29 81       	ldd	r18, Y+1	; 0x01
    8c36:	22 2f       	mov	r18, r18
    8c38:	30 e0       	ldi	r19, 0x00	; 0
    8c3a:	04 c0       	rjmp	.+8      	; 0x8c44 <sysclk_get_per4_hz+0x22>
    8c3c:	b6 95       	lsr	r27
    8c3e:	a7 95       	ror	r26
    8c40:	97 95       	ror	r25
    8c42:	87 95       	ror	r24
    8c44:	2a 95       	dec	r18
    8c46:	d2 f7       	brpl	.-12     	; 0x8c3c <sysclk_get_per4_hz+0x1a>
    8c48:	bc 01       	movw	r22, r24
    8c4a:	cd 01       	movw	r24, r26
    8c4c:	0f 90       	pop	r0
    8c4e:	df 91       	pop	r29
    8c50:	cf 91       	pop	r28
    8c52:	08 95       	ret

00008c54 <sysclk_get_per2_hz>:
    8c54:	cf 93       	push	r28
    8c56:	df 93       	push	r29
    8c58:	cd b7       	in	r28, 0x3d	; 61
    8c5a:	de b7       	in	r29, 0x3e	; 62
    8c5c:	e2 df       	rcall	.-60     	; 0x8c22 <sysclk_get_per4_hz>
    8c5e:	dc 01       	movw	r26, r24
    8c60:	cb 01       	movw	r24, r22
    8c62:	bc 01       	movw	r22, r24
    8c64:	cd 01       	movw	r24, r26
    8c66:	df 91       	pop	r29
    8c68:	cf 91       	pop	r28
    8c6a:	08 95       	ret

00008c6c <sysclk_get_per_hz>:
    8c6c:	cf 93       	push	r28
    8c6e:	df 93       	push	r29
    8c70:	cd b7       	in	r28, 0x3d	; 61
    8c72:	de b7       	in	r29, 0x3e	; 62
    8c74:	ef df       	rcall	.-34     	; 0x8c54 <sysclk_get_per2_hz>
    8c76:	dc 01       	movw	r26, r24
    8c78:	cb 01       	movw	r24, r22
    8c7a:	bc 01       	movw	r22, r24
    8c7c:	cd 01       	movw	r24, r26
    8c7e:	df 91       	pop	r29
    8c80:	cf 91       	pop	r28
    8c82:	08 95       	ret

00008c84 <sysclk_enable_peripheral_clock>:
    8c84:	cf 93       	push	r28
    8c86:	df 93       	push	r29
    8c88:	1f 92       	push	r1
    8c8a:	1f 92       	push	r1
    8c8c:	cd b7       	in	r28, 0x3d	; 61
    8c8e:	de b7       	in	r29, 0x3e	; 62
    8c90:	89 83       	std	Y+1, r24	; 0x01
    8c92:	9a 83       	std	Y+2, r25	; 0x02
    8c94:	89 81       	ldd	r24, Y+1	; 0x01
    8c96:	9a 81       	ldd	r25, Y+2	; 0x02
    8c98:	89 2b       	or	r24, r25
    8c9a:	09 f4       	brne	.+2      	; 0x8c9e <sysclk_enable_peripheral_clock+0x1a>
    8c9c:	85 c1       	rjmp	.+778    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8c9e:	89 81       	ldd	r24, Y+1	; 0x01
    8ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    8ca2:	80 3c       	cpi	r24, 0xC0	; 192
    8ca4:	91 05       	cpc	r25, r1
    8ca6:	29 f4       	brne	.+10     	; 0x8cb2 <sysclk_enable_peripheral_clock+0x2e>
    8ca8:	60 e1       	ldi	r22, 0x10	; 16
    8caa:	80 e0       	ldi	r24, 0x00	; 0
    8cac:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8cb0:	7b c1       	rjmp	.+758    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8cb2:	89 81       	ldd	r24, Y+1	; 0x01
    8cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    8cb6:	80 34       	cpi	r24, 0x40	; 64
    8cb8:	94 40       	sbci	r25, 0x04	; 4
    8cba:	29 f4       	brne	.+10     	; 0x8cc6 <sysclk_enable_peripheral_clock+0x42>
    8cbc:	68 e0       	ldi	r22, 0x08	; 8
    8cbe:	80 e0       	ldi	r24, 0x00	; 0
    8cc0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8cc4:	71 c1       	rjmp	.+738    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8cc6:	89 81       	ldd	r24, Y+1	; 0x01
    8cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    8cca:	81 15       	cp	r24, r1
    8ccc:	94 40       	sbci	r25, 0x04	; 4
    8cce:	29 f4       	brne	.+10     	; 0x8cda <sysclk_enable_peripheral_clock+0x56>
    8cd0:	64 e0       	ldi	r22, 0x04	; 4
    8cd2:	80 e0       	ldi	r24, 0x00	; 0
    8cd4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8cd8:	67 c1       	rjmp	.+718    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8cda:	89 81       	ldd	r24, Y+1	; 0x01
    8cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    8cde:	80 38       	cpi	r24, 0x80	; 128
    8ce0:	91 40       	sbci	r25, 0x01	; 1
    8ce2:	29 f4       	brne	.+10     	; 0x8cee <sysclk_enable_peripheral_clock+0x6a>
    8ce4:	62 e0       	ldi	r22, 0x02	; 2
    8ce6:	80 e0       	ldi	r24, 0x00	; 0
    8ce8:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8cec:	5d c1       	rjmp	.+698    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8cee:	89 81       	ldd	r24, Y+1	; 0x01
    8cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    8cf2:	81 15       	cp	r24, r1
    8cf4:	91 40       	sbci	r25, 0x01	; 1
    8cf6:	29 f4       	brne	.+10     	; 0x8d02 <sysclk_enable_peripheral_clock+0x7e>
    8cf8:	61 e0       	ldi	r22, 0x01	; 1
    8cfa:	80 e0       	ldi	r24, 0x00	; 0
    8cfc:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d00:	53 c1       	rjmp	.+678    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d02:	89 81       	ldd	r24, Y+1	; 0x01
    8d04:	9a 81       	ldd	r25, Y+2	; 0x02
    8d06:	80 38       	cpi	r24, 0x80	; 128
    8d08:	93 40       	sbci	r25, 0x03	; 3
    8d0a:	29 f4       	brne	.+10     	; 0x8d16 <sysclk_enable_peripheral_clock+0x92>
    8d0c:	61 e0       	ldi	r22, 0x01	; 1
    8d0e:	81 e0       	ldi	r24, 0x01	; 1
    8d10:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d14:	49 c1       	rjmp	.+658    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d16:	89 81       	ldd	r24, Y+1	; 0x01
    8d18:	9a 81       	ldd	r25, Y+2	; 0x02
    8d1a:	80 39       	cpi	r24, 0x90	; 144
    8d1c:	93 40       	sbci	r25, 0x03	; 3
    8d1e:	29 f4       	brne	.+10     	; 0x8d2a <sysclk_enable_peripheral_clock+0xa6>
    8d20:	61 e0       	ldi	r22, 0x01	; 1
    8d22:	82 e0       	ldi	r24, 0x02	; 2
    8d24:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d28:	3f c1       	rjmp	.+638    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d2a:	89 81       	ldd	r24, Y+1	; 0x01
    8d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    8d2e:	81 15       	cp	r24, r1
    8d30:	92 40       	sbci	r25, 0x02	; 2
    8d32:	29 f4       	brne	.+10     	; 0x8d3e <sysclk_enable_peripheral_clock+0xba>
    8d34:	62 e0       	ldi	r22, 0x02	; 2
    8d36:	81 e0       	ldi	r24, 0x01	; 1
    8d38:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d3c:	35 c1       	rjmp	.+618    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d3e:	89 81       	ldd	r24, Y+1	; 0x01
    8d40:	9a 81       	ldd	r25, Y+2	; 0x02
    8d42:	80 34       	cpi	r24, 0x40	; 64
    8d44:	92 40       	sbci	r25, 0x02	; 2
    8d46:	29 f4       	brne	.+10     	; 0x8d52 <sysclk_enable_peripheral_clock+0xce>
    8d48:	62 e0       	ldi	r22, 0x02	; 2
    8d4a:	82 e0       	ldi	r24, 0x02	; 2
    8d4c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d50:	2b c1       	rjmp	.+598    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d52:	89 81       	ldd	r24, Y+1	; 0x01
    8d54:	9a 81       	ldd	r25, Y+2	; 0x02
    8d56:	81 15       	cp	r24, r1
    8d58:	93 40       	sbci	r25, 0x03	; 3
    8d5a:	29 f4       	brne	.+10     	; 0x8d66 <sysclk_enable_peripheral_clock+0xe2>
    8d5c:	64 e0       	ldi	r22, 0x04	; 4
    8d5e:	81 e0       	ldi	r24, 0x01	; 1
    8d60:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d64:	21 c1       	rjmp	.+578    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d66:	89 81       	ldd	r24, Y+1	; 0x01
    8d68:	9a 81       	ldd	r25, Y+2	; 0x02
    8d6a:	80 32       	cpi	r24, 0x20	; 32
    8d6c:	93 40       	sbci	r25, 0x03	; 3
    8d6e:	29 f4       	brne	.+10     	; 0x8d7a <sysclk_enable_peripheral_clock+0xf6>
    8d70:	64 e0       	ldi	r22, 0x04	; 4
    8d72:	82 e0       	ldi	r24, 0x02	; 2
    8d74:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d78:	17 c1       	rjmp	.+558    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d7a:	89 81       	ldd	r24, Y+1	; 0x01
    8d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    8d7e:	81 15       	cp	r24, r1
    8d80:	98 40       	sbci	r25, 0x08	; 8
    8d82:	29 f4       	brne	.+10     	; 0x8d8e <sysclk_enable_peripheral_clock+0x10a>
    8d84:	61 e0       	ldi	r22, 0x01	; 1
    8d86:	83 e0       	ldi	r24, 0x03	; 3
    8d88:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8d8c:	0d c1       	rjmp	.+538    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8d8e:	89 81       	ldd	r24, Y+1	; 0x01
    8d90:	9a 81       	ldd	r25, Y+2	; 0x02
    8d92:	81 15       	cp	r24, r1
    8d94:	99 40       	sbci	r25, 0x09	; 9
    8d96:	29 f4       	brne	.+10     	; 0x8da2 <sysclk_enable_peripheral_clock+0x11e>
    8d98:	61 e0       	ldi	r22, 0x01	; 1
    8d9a:	84 e0       	ldi	r24, 0x04	; 4
    8d9c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8da0:	03 c1       	rjmp	.+518    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8da2:	89 81       	ldd	r24, Y+1	; 0x01
    8da4:	9a 81       	ldd	r25, Y+2	; 0x02
    8da6:	81 15       	cp	r24, r1
    8da8:	9a 40       	sbci	r25, 0x0A	; 10
    8daa:	29 f4       	brne	.+10     	; 0x8db6 <sysclk_enable_peripheral_clock+0x132>
    8dac:	61 e0       	ldi	r22, 0x01	; 1
    8dae:	85 e0       	ldi	r24, 0x05	; 5
    8db0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8db4:	f9 c0       	rjmp	.+498    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8db6:	89 81       	ldd	r24, Y+1	; 0x01
    8db8:	9a 81       	ldd	r25, Y+2	; 0x02
    8dba:	81 15       	cp	r24, r1
    8dbc:	9b 40       	sbci	r25, 0x0B	; 11
    8dbe:	29 f4       	brne	.+10     	; 0x8dca <sysclk_enable_peripheral_clock+0x146>
    8dc0:	61 e0       	ldi	r22, 0x01	; 1
    8dc2:	86 e0       	ldi	r24, 0x06	; 6
    8dc4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8dc8:	ef c0       	rjmp	.+478    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8dca:	89 81       	ldd	r24, Y+1	; 0x01
    8dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    8dce:	80 34       	cpi	r24, 0x40	; 64
    8dd0:	98 40       	sbci	r25, 0x08	; 8
    8dd2:	29 f4       	brne	.+10     	; 0x8dde <sysclk_enable_peripheral_clock+0x15a>
    8dd4:	62 e0       	ldi	r22, 0x02	; 2
    8dd6:	83 e0       	ldi	r24, 0x03	; 3
    8dd8:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8ddc:	e5 c0       	rjmp	.+458    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8dde:	89 81       	ldd	r24, Y+1	; 0x01
    8de0:	9a 81       	ldd	r25, Y+2	; 0x02
    8de2:	80 34       	cpi	r24, 0x40	; 64
    8de4:	99 40       	sbci	r25, 0x09	; 9
    8de6:	29 f4       	brne	.+10     	; 0x8df2 <sysclk_enable_peripheral_clock+0x16e>
    8de8:	62 e0       	ldi	r22, 0x02	; 2
    8dea:	84 e0       	ldi	r24, 0x04	; 4
    8dec:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8df0:	db c0       	rjmp	.+438    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8df2:	89 81       	ldd	r24, Y+1	; 0x01
    8df4:	9a 81       	ldd	r25, Y+2	; 0x02
    8df6:	80 34       	cpi	r24, 0x40	; 64
    8df8:	9a 40       	sbci	r25, 0x0A	; 10
    8dfa:	29 f4       	brne	.+10     	; 0x8e06 <sysclk_enable_peripheral_clock+0x182>
    8dfc:	62 e0       	ldi	r22, 0x02	; 2
    8dfe:	85 e0       	ldi	r24, 0x05	; 5
    8e00:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e04:	d1 c0       	rjmp	.+418    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e06:	89 81       	ldd	r24, Y+1	; 0x01
    8e08:	9a 81       	ldd	r25, Y+2	; 0x02
    8e0a:	80 34       	cpi	r24, 0x40	; 64
    8e0c:	9b 40       	sbci	r25, 0x0B	; 11
    8e0e:	29 f4       	brne	.+10     	; 0x8e1a <sysclk_enable_peripheral_clock+0x196>
    8e10:	62 e0       	ldi	r22, 0x02	; 2
    8e12:	86 e0       	ldi	r24, 0x06	; 6
    8e14:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e18:	c7 c0       	rjmp	.+398    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e1a:	89 81       	ldd	r24, Y+1	; 0x01
    8e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    8e1e:	80 39       	cpi	r24, 0x90	; 144
    8e20:	98 40       	sbci	r25, 0x08	; 8
    8e22:	29 f4       	brne	.+10     	; 0x8e2e <sysclk_enable_peripheral_clock+0x1aa>
    8e24:	64 e0       	ldi	r22, 0x04	; 4
    8e26:	83 e0       	ldi	r24, 0x03	; 3
    8e28:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e2c:	bd c0       	rjmp	.+378    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e2e:	89 81       	ldd	r24, Y+1	; 0x01
    8e30:	9a 81       	ldd	r25, Y+2	; 0x02
    8e32:	80 39       	cpi	r24, 0x90	; 144
    8e34:	99 40       	sbci	r25, 0x09	; 9
    8e36:	29 f4       	brne	.+10     	; 0x8e42 <sysclk_enable_peripheral_clock+0x1be>
    8e38:	64 e0       	ldi	r22, 0x04	; 4
    8e3a:	84 e0       	ldi	r24, 0x04	; 4
    8e3c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e40:	b3 c0       	rjmp	.+358    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e42:	89 81       	ldd	r24, Y+1	; 0x01
    8e44:	9a 81       	ldd	r25, Y+2	; 0x02
    8e46:	80 39       	cpi	r24, 0x90	; 144
    8e48:	9a 40       	sbci	r25, 0x0A	; 10
    8e4a:	29 f4       	brne	.+10     	; 0x8e56 <sysclk_enable_peripheral_clock+0x1d2>
    8e4c:	64 e0       	ldi	r22, 0x04	; 4
    8e4e:	85 e0       	ldi	r24, 0x05	; 5
    8e50:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e54:	a9 c0       	rjmp	.+338    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e56:	89 81       	ldd	r24, Y+1	; 0x01
    8e58:	9a 81       	ldd	r25, Y+2	; 0x02
    8e5a:	80 39       	cpi	r24, 0x90	; 144
    8e5c:	9b 40       	sbci	r25, 0x0B	; 11
    8e5e:	29 f4       	brne	.+10     	; 0x8e6a <sysclk_enable_peripheral_clock+0x1e6>
    8e60:	64 e0       	ldi	r22, 0x04	; 4
    8e62:	86 e0       	ldi	r24, 0x06	; 6
    8e64:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e68:	9f c0       	rjmp	.+318    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e6a:	89 81       	ldd	r24, Y+1	; 0x01
    8e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    8e6e:	80 3c       	cpi	r24, 0xC0	; 192
    8e70:	98 40       	sbci	r25, 0x08	; 8
    8e72:	29 f4       	brne	.+10     	; 0x8e7e <sysclk_enable_peripheral_clock+0x1fa>
    8e74:	68 e0       	ldi	r22, 0x08	; 8
    8e76:	83 e0       	ldi	r24, 0x03	; 3
    8e78:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e7c:	95 c0       	rjmp	.+298    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e7e:	89 81       	ldd	r24, Y+1	; 0x01
    8e80:	9a 81       	ldd	r25, Y+2	; 0x02
    8e82:	80 3c       	cpi	r24, 0xC0	; 192
    8e84:	99 40       	sbci	r25, 0x09	; 9
    8e86:	29 f4       	brne	.+10     	; 0x8e92 <sysclk_enable_peripheral_clock+0x20e>
    8e88:	68 e0       	ldi	r22, 0x08	; 8
    8e8a:	84 e0       	ldi	r24, 0x04	; 4
    8e8c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8e90:	8b c0       	rjmp	.+278    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8e92:	89 81       	ldd	r24, Y+1	; 0x01
    8e94:	9a 81       	ldd	r25, Y+2	; 0x02
    8e96:	80 3c       	cpi	r24, 0xC0	; 192
    8e98:	9a 40       	sbci	r25, 0x0A	; 10
    8e9a:	29 f4       	brne	.+10     	; 0x8ea6 <sysclk_enable_peripheral_clock+0x222>
    8e9c:	68 e0       	ldi	r22, 0x08	; 8
    8e9e:	85 e0       	ldi	r24, 0x05	; 5
    8ea0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8ea4:	81 c0       	rjmp	.+258    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8ea6:	89 81       	ldd	r24, Y+1	; 0x01
    8ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    8eaa:	80 3c       	cpi	r24, 0xC0	; 192
    8eac:	9b 40       	sbci	r25, 0x0B	; 11
    8eae:	29 f4       	brne	.+10     	; 0x8eba <sysclk_enable_peripheral_clock+0x236>
    8eb0:	68 e0       	ldi	r22, 0x08	; 8
    8eb2:	86 e0       	ldi	r24, 0x06	; 6
    8eb4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8eb8:	77 c0       	rjmp	.+238    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8eba:	89 81       	ldd	r24, Y+1	; 0x01
    8ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    8ebe:	80 3a       	cpi	r24, 0xA0	; 160
    8ec0:	98 40       	sbci	r25, 0x08	; 8
    8ec2:	29 f4       	brne	.+10     	; 0x8ece <sysclk_enable_peripheral_clock+0x24a>
    8ec4:	60 e1       	ldi	r22, 0x10	; 16
    8ec6:	83 e0       	ldi	r24, 0x03	; 3
    8ec8:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8ecc:	6d c0       	rjmp	.+218    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8ece:	89 81       	ldd	r24, Y+1	; 0x01
    8ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    8ed2:	80 3a       	cpi	r24, 0xA0	; 160
    8ed4:	99 40       	sbci	r25, 0x09	; 9
    8ed6:	29 f4       	brne	.+10     	; 0x8ee2 <sysclk_enable_peripheral_clock+0x25e>
    8ed8:	60 e1       	ldi	r22, 0x10	; 16
    8eda:	84 e0       	ldi	r24, 0x04	; 4
    8edc:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8ee0:	63 c0       	rjmp	.+198    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8ee2:	89 81       	ldd	r24, Y+1	; 0x01
    8ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ee6:	80 3a       	cpi	r24, 0xA0	; 160
    8ee8:	9a 40       	sbci	r25, 0x0A	; 10
    8eea:	29 f4       	brne	.+10     	; 0x8ef6 <sysclk_enable_peripheral_clock+0x272>
    8eec:	60 e1       	ldi	r22, 0x10	; 16
    8eee:	85 e0       	ldi	r24, 0x05	; 5
    8ef0:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8ef4:	59 c0       	rjmp	.+178    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8ef6:	89 81       	ldd	r24, Y+1	; 0x01
    8ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    8efa:	80 3a       	cpi	r24, 0xA0	; 160
    8efc:	9b 40       	sbci	r25, 0x0B	; 11
    8efe:	29 f4       	brne	.+10     	; 0x8f0a <sysclk_enable_peripheral_clock+0x286>
    8f00:	60 e1       	ldi	r22, 0x10	; 16
    8f02:	86 e0       	ldi	r24, 0x06	; 6
    8f04:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f08:	4f c0       	rjmp	.+158    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f0a:	89 81       	ldd	r24, Y+1	; 0x01
    8f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    8f0e:	80 3b       	cpi	r24, 0xB0	; 176
    8f10:	98 40       	sbci	r25, 0x08	; 8
    8f12:	29 f4       	brne	.+10     	; 0x8f1e <sysclk_enable_peripheral_clock+0x29a>
    8f14:	60 e2       	ldi	r22, 0x20	; 32
    8f16:	83 e0       	ldi	r24, 0x03	; 3
    8f18:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f1c:	45 c0       	rjmp	.+138    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f1e:	89 81       	ldd	r24, Y+1	; 0x01
    8f20:	9a 81       	ldd	r25, Y+2	; 0x02
    8f22:	80 3b       	cpi	r24, 0xB0	; 176
    8f24:	99 40       	sbci	r25, 0x09	; 9
    8f26:	29 f4       	brne	.+10     	; 0x8f32 <sysclk_enable_peripheral_clock+0x2ae>
    8f28:	60 e2       	ldi	r22, 0x20	; 32
    8f2a:	84 e0       	ldi	r24, 0x04	; 4
    8f2c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f30:	3b c0       	rjmp	.+118    	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f32:	89 81       	ldd	r24, Y+1	; 0x01
    8f34:	9a 81       	ldd	r25, Y+2	; 0x02
    8f36:	80 3b       	cpi	r24, 0xB0	; 176
    8f38:	9a 40       	sbci	r25, 0x0A	; 10
    8f3a:	29 f4       	brne	.+10     	; 0x8f46 <sysclk_enable_peripheral_clock+0x2c2>
    8f3c:	60 e2       	ldi	r22, 0x20	; 32
    8f3e:	85 e0       	ldi	r24, 0x05	; 5
    8f40:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f44:	31 c0       	rjmp	.+98     	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f46:	89 81       	ldd	r24, Y+1	; 0x01
    8f48:	9a 81       	ldd	r25, Y+2	; 0x02
    8f4a:	80 3b       	cpi	r24, 0xB0	; 176
    8f4c:	9b 40       	sbci	r25, 0x0B	; 11
    8f4e:	29 f4       	brne	.+10     	; 0x8f5a <sysclk_enable_peripheral_clock+0x2d6>
    8f50:	60 e2       	ldi	r22, 0x20	; 32
    8f52:	86 e0       	ldi	r24, 0x06	; 6
    8f54:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f58:	27 c0       	rjmp	.+78     	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f5a:	89 81       	ldd	r24, Y+1	; 0x01
    8f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    8f5e:	80 38       	cpi	r24, 0x80	; 128
    8f60:	94 40       	sbci	r25, 0x04	; 4
    8f62:	29 f4       	brne	.+10     	; 0x8f6e <sysclk_enable_peripheral_clock+0x2ea>
    8f64:	60 e4       	ldi	r22, 0x40	; 64
    8f66:	83 e0       	ldi	r24, 0x03	; 3
    8f68:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f6c:	1d c0       	rjmp	.+58     	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f6e:	89 81       	ldd	r24, Y+1	; 0x01
    8f70:	9a 81       	ldd	r25, Y+2	; 0x02
    8f72:	80 39       	cpi	r24, 0x90	; 144
    8f74:	94 40       	sbci	r25, 0x04	; 4
    8f76:	29 f4       	brne	.+10     	; 0x8f82 <sysclk_enable_peripheral_clock+0x2fe>
    8f78:	60 e4       	ldi	r22, 0x40	; 64
    8f7a:	84 e0       	ldi	r24, 0x04	; 4
    8f7c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f80:	13 c0       	rjmp	.+38     	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f82:	89 81       	ldd	r24, Y+1	; 0x01
    8f84:	9a 81       	ldd	r25, Y+2	; 0x02
    8f86:	80 3a       	cpi	r24, 0xA0	; 160
    8f88:	94 40       	sbci	r25, 0x04	; 4
    8f8a:	29 f4       	brne	.+10     	; 0x8f96 <sysclk_enable_peripheral_clock+0x312>
    8f8c:	60 e4       	ldi	r22, 0x40	; 64
    8f8e:	85 e0       	ldi	r24, 0x05	; 5
    8f90:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8f94:	09 c0       	rjmp	.+18     	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8f96:	89 81       	ldd	r24, Y+1	; 0x01
    8f98:	9a 81       	ldd	r25, Y+2	; 0x02
    8f9a:	80 3b       	cpi	r24, 0xB0	; 176
    8f9c:	94 40       	sbci	r25, 0x04	; 4
    8f9e:	21 f4       	brne	.+8      	; 0x8fa8 <sysclk_enable_peripheral_clock+0x324>
    8fa0:	60 e4       	ldi	r22, 0x40	; 64
    8fa2:	86 e0       	ldi	r24, 0x06	; 6
    8fa4:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    8fa8:	00 00       	nop
    8faa:	0f 90       	pop	r0
    8fac:	0f 90       	pop	r0
    8fae:	df 91       	pop	r29
    8fb0:	cf 91       	pop	r28
    8fb2:	08 95       	ret

00008fb4 <usart_init_rs232>:
    8fb4:	0f 93       	push	r16
    8fb6:	1f 93       	push	r17
    8fb8:	cf 93       	push	r28
    8fba:	df 93       	push	r29
    8fbc:	cd b7       	in	r28, 0x3d	; 61
    8fbe:	de b7       	in	r29, 0x3e	; 62
    8fc0:	25 97       	sbiw	r28, 0x05	; 5
    8fc2:	cd bf       	out	0x3d, r28	; 61
    8fc4:	de bf       	out	0x3e, r29	; 62
    8fc6:	8a 83       	std	Y+2, r24	; 0x02
    8fc8:	9b 83       	std	Y+3, r25	; 0x03
    8fca:	6c 83       	std	Y+4, r22	; 0x04
    8fcc:	7d 83       	std	Y+5, r23	; 0x05
    8fce:	8a 81       	ldd	r24, Y+2	; 0x02
    8fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    8fd2:	58 de       	rcall	.-848    	; 0x8c84 <sysclk_enable_peripheral_clock>
    8fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    8fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    8fd8:	60 e0       	ldi	r22, 0x00	; 0
    8fda:	c6 dd       	rcall	.-1140   	; 0x8b68 <usart_set_mode>
    8fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    8fde:	9d 81       	ldd	r25, Y+5	; 0x05
    8fe0:	fc 01       	movw	r30, r24
    8fe2:	26 81       	ldd	r18, Z+6	; 0x06
    8fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    8fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    8fe8:	fc 01       	movw	r30, r24
    8fea:	45 81       	ldd	r20, Z+5	; 0x05
    8fec:	8c 81       	ldd	r24, Y+4	; 0x04
    8fee:	9d 81       	ldd	r25, Y+5	; 0x05
    8ff0:	fc 01       	movw	r30, r24
    8ff2:	34 81       	ldd	r19, Z+4	; 0x04
    8ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    8ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    8ff8:	63 2f       	mov	r22, r19
    8ffa:	7b dd       	rcall	.-1290   	; 0x8af2 <usart_format_set>
    8ffc:	37 de       	rcall	.-914    	; 0x8c6c <sysclk_get_per_hz>
    8ffe:	9b 01       	movw	r18, r22
    9000:	ac 01       	movw	r20, r24
    9002:	8c 81       	ldd	r24, Y+4	; 0x04
    9004:	9d 81       	ldd	r25, Y+5	; 0x05
    9006:	fc 01       	movw	r30, r24
    9008:	80 81       	ld	r24, Z
    900a:	91 81       	ldd	r25, Z+1	; 0x01
    900c:	a2 81       	ldd	r26, Z+2	; 0x02
    900e:	b3 81       	ldd	r27, Z+3	; 0x03
    9010:	ea 81       	ldd	r30, Y+2	; 0x02
    9012:	fb 81       	ldd	r31, Y+3	; 0x03
    9014:	89 01       	movw	r16, r18
    9016:	9a 01       	movw	r18, r20
    9018:	ac 01       	movw	r20, r24
    901a:	bd 01       	movw	r22, r26
    901c:	cf 01       	movw	r24, r30
    901e:	48 d0       	rcall	.+144    	; 0x90b0 <usart_set_baudrate>
    9020:	89 83       	std	Y+1, r24	; 0x01
    9022:	8a 81       	ldd	r24, Y+2	; 0x02
    9024:	9b 81       	ldd	r25, Y+3	; 0x03
    9026:	88 dd       	rcall	.-1264   	; 0x8b38 <usart_tx_enable>
    9028:	8a 81       	ldd	r24, Y+2	; 0x02
    902a:	9b 81       	ldd	r25, Y+3	; 0x03
    902c:	4a dd       	rcall	.-1388   	; 0x8ac2 <usart_rx_enable>
    902e:	89 81       	ldd	r24, Y+1	; 0x01
    9030:	25 96       	adiw	r28, 0x05	; 5
    9032:	cd bf       	out	0x3d, r28	; 61
    9034:	de bf       	out	0x3e, r29	; 62
    9036:	df 91       	pop	r29
    9038:	cf 91       	pop	r28
    903a:	1f 91       	pop	r17
    903c:	0f 91       	pop	r16
    903e:	08 95       	ret

00009040 <usart_putchar>:
    9040:	cf 93       	push	r28
    9042:	df 93       	push	r29
    9044:	00 d0       	rcall	.+0      	; 0x9046 <usart_putchar+0x6>
    9046:	cd b7       	in	r28, 0x3d	; 61
    9048:	de b7       	in	r29, 0x3e	; 62
    904a:	89 83       	std	Y+1, r24	; 0x01
    904c:	9a 83       	std	Y+2, r25	; 0x02
    904e:	6b 83       	std	Y+3, r22	; 0x03
    9050:	00 00       	nop
    9052:	89 81       	ldd	r24, Y+1	; 0x01
    9054:	9a 81       	ldd	r25, Y+2	; 0x02
    9056:	a4 dd       	rcall	.-1208   	; 0x8ba0 <usart_data_register_is_empty>
    9058:	98 2f       	mov	r25, r24
    905a:	81 e0       	ldi	r24, 0x01	; 1
    905c:	89 27       	eor	r24, r25
    905e:	88 23       	and	r24, r24
    9060:	c1 f7       	brne	.-16     	; 0x9052 <usart_putchar+0x12>
    9062:	89 81       	ldd	r24, Y+1	; 0x01
    9064:	9a 81       	ldd	r25, Y+2	; 0x02
    9066:	2b 81       	ldd	r18, Y+3	; 0x03
    9068:	fc 01       	movw	r30, r24
    906a:	20 83       	st	Z, r18
    906c:	80 e0       	ldi	r24, 0x00	; 0
    906e:	90 e0       	ldi	r25, 0x00	; 0
    9070:	23 96       	adiw	r28, 0x03	; 3
    9072:	cd bf       	out	0x3d, r28	; 61
    9074:	de bf       	out	0x3e, r29	; 62
    9076:	df 91       	pop	r29
    9078:	cf 91       	pop	r28
    907a:	08 95       	ret

0000907c <usart_getchar>:
    907c:	cf 93       	push	r28
    907e:	df 93       	push	r29
    9080:	1f 92       	push	r1
    9082:	1f 92       	push	r1
    9084:	cd b7       	in	r28, 0x3d	; 61
    9086:	de b7       	in	r29, 0x3e	; 62
    9088:	89 83       	std	Y+1, r24	; 0x01
    908a:	9a 83       	std	Y+2, r25	; 0x02
    908c:	00 00       	nop
    908e:	89 81       	ldd	r24, Y+1	; 0x01
    9090:	9a 81       	ldd	r25, Y+2	; 0x02
    9092:	a0 dd       	rcall	.-1216   	; 0x8bd4 <usart_rx_is_complete>
    9094:	98 2f       	mov	r25, r24
    9096:	81 e0       	ldi	r24, 0x01	; 1
    9098:	89 27       	eor	r24, r25
    909a:	88 23       	and	r24, r24
    909c:	c1 f7       	brne	.-16     	; 0x908e <usart_getchar+0x12>
    909e:	89 81       	ldd	r24, Y+1	; 0x01
    90a0:	9a 81       	ldd	r25, Y+2	; 0x02
    90a2:	fc 01       	movw	r30, r24
    90a4:	80 81       	ld	r24, Z
    90a6:	0f 90       	pop	r0
    90a8:	0f 90       	pop	r0
    90aa:	df 91       	pop	r29
    90ac:	cf 91       	pop	r28
    90ae:	08 95       	ret

000090b0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    90b0:	ef 92       	push	r14
    90b2:	ff 92       	push	r15
    90b4:	0f 93       	push	r16
    90b6:	1f 93       	push	r17
    90b8:	cf 93       	push	r28
    90ba:	df 93       	push	r29
    90bc:	cd b7       	in	r28, 0x3d	; 61
    90be:	de b7       	in	r29, 0x3e	; 62
    90c0:	6f 97       	sbiw	r28, 0x1f	; 31
    90c2:	cd bf       	out	0x3d, r28	; 61
    90c4:	de bf       	out	0x3e, r29	; 62
    90c6:	8e 8b       	std	Y+22, r24	; 0x16
    90c8:	9f 8b       	std	Y+23, r25	; 0x17
    90ca:	48 8f       	std	Y+24, r20	; 0x18
    90cc:	59 8f       	std	Y+25, r21	; 0x19
    90ce:	6a 8f       	std	Y+26, r22	; 0x1a
    90d0:	7b 8f       	std	Y+27, r23	; 0x1b
    90d2:	0c 8f       	std	Y+28, r16	; 0x1c
    90d4:	1d 8f       	std	Y+29, r17	; 0x1d
    90d6:	2e 8f       	std	Y+30, r18	; 0x1e
    90d8:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    90da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    90dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    90de:	ae 8d       	ldd	r26, Y+30	; 0x1e
    90e0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    90e2:	68 94       	set
    90e4:	12 f8       	bld	r1, 2
    90e6:	b6 95       	lsr	r27
    90e8:	a7 95       	ror	r26
    90ea:	97 95       	ror	r25
    90ec:	87 95       	ror	r24
    90ee:	16 94       	lsr	r1
    90f0:	d1 f7       	brne	.-12     	; 0x90e6 <usart_set_baudrate+0x36>
    90f2:	8e 87       	std	Y+14, r24	; 0x0e
    90f4:	9f 87       	std	Y+15, r25	; 0x0f
    90f6:	a8 8b       	std	Y+16, r26	; 0x10
    90f8:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    90fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    90fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    90fe:	ae 8d       	ldd	r26, Y+30	; 0x1e
    9100:	bf 8d       	ldd	r27, Y+31	; 0x1f
    9102:	07 2e       	mov	r0, r23
    9104:	76 e1       	ldi	r23, 0x16	; 22
    9106:	b6 95       	lsr	r27
    9108:	a7 95       	ror	r26
    910a:	97 95       	ror	r25
    910c:	87 95       	ror	r24
    910e:	7a 95       	dec	r23
    9110:	d1 f7       	brne	.-12     	; 0x9106 <usart_set_baudrate+0x56>
    9112:	70 2d       	mov	r23, r0
    9114:	8a 87       	std	Y+10, r24	; 0x0a
    9116:	9b 87       	std	Y+11, r25	; 0x0b
    9118:	ac 87       	std	Y+12, r26	; 0x0c
    911a:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    911c:	8e 89       	ldd	r24, Y+22	; 0x16
    911e:	9f 89       	ldd	r25, Y+23	; 0x17
    9120:	fc 01       	movw	r30, r24
    9122:	84 81       	ldd	r24, Z+4	; 0x04
    9124:	88 2f       	mov	r24, r24
    9126:	90 e0       	ldi	r25, 0x00	; 0
    9128:	84 70       	andi	r24, 0x04	; 4
    912a:	99 27       	eor	r25, r25
    912c:	89 2b       	or	r24, r25
    912e:	c1 f4       	brne	.+48     	; 0x9160 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    9130:	8e 85       	ldd	r24, Y+14	; 0x0e
    9132:	9f 85       	ldd	r25, Y+15	; 0x0f
    9134:	a8 89       	ldd	r26, Y+16	; 0x10
    9136:	b9 89       	ldd	r27, Y+17	; 0x11
    9138:	b6 95       	lsr	r27
    913a:	a7 95       	ror	r26
    913c:	97 95       	ror	r25
    913e:	87 95       	ror	r24
    9140:	8e 87       	std	Y+14, r24	; 0x0e
    9142:	9f 87       	std	Y+15, r25	; 0x0f
    9144:	a8 8b       	std	Y+16, r26	; 0x10
    9146:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    9148:	8a 85       	ldd	r24, Y+10	; 0x0a
    914a:	9b 85       	ldd	r25, Y+11	; 0x0b
    914c:	ac 85       	ldd	r26, Y+12	; 0x0c
    914e:	bd 85       	ldd	r27, Y+13	; 0x0d
    9150:	b6 95       	lsr	r27
    9152:	a7 95       	ror	r26
    9154:	97 95       	ror	r25
    9156:	87 95       	ror	r24
    9158:	8a 87       	std	Y+10, r24	; 0x0a
    915a:	9b 87       	std	Y+11, r25	; 0x0b
    915c:	ac 87       	std	Y+12, r26	; 0x0c
    915e:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    9160:	28 8d       	ldd	r18, Y+24	; 0x18
    9162:	39 8d       	ldd	r19, Y+25	; 0x19
    9164:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9166:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9168:	8e 85       	ldd	r24, Y+14	; 0x0e
    916a:	9f 85       	ldd	r25, Y+15	; 0x0f
    916c:	a8 89       	ldd	r26, Y+16	; 0x10
    916e:	b9 89       	ldd	r27, Y+17	; 0x11
    9170:	82 17       	cp	r24, r18
    9172:	93 07       	cpc	r25, r19
    9174:	a4 07       	cpc	r26, r20
    9176:	b5 07       	cpc	r27, r21
    9178:	68 f0       	brcs	.+26     	; 0x9194 <usart_set_baudrate+0xe4>
    917a:	28 8d       	ldd	r18, Y+24	; 0x18
    917c:	39 8d       	ldd	r19, Y+25	; 0x19
    917e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9180:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9182:	8a 85       	ldd	r24, Y+10	; 0x0a
    9184:	9b 85       	ldd	r25, Y+11	; 0x0b
    9186:	ac 85       	ldd	r26, Y+12	; 0x0c
    9188:	bd 85       	ldd	r27, Y+13	; 0x0d
    918a:	28 17       	cp	r18, r24
    918c:	39 07       	cpc	r19, r25
    918e:	4a 07       	cpc	r20, r26
    9190:	5b 07       	cpc	r21, r27
    9192:	10 f4       	brcc	.+4      	; 0x9198 <usart_set_baudrate+0xe8>
		return false;
    9194:	80 e0       	ldi	r24, 0x00	; 0
    9196:	40 c1       	rjmp	.+640    	; 0x9418 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    9198:	8e 89       	ldd	r24, Y+22	; 0x16
    919a:	9f 89       	ldd	r25, Y+23	; 0x17
    919c:	fc 01       	movw	r30, r24
    919e:	84 81       	ldd	r24, Z+4	; 0x04
    91a0:	88 2f       	mov	r24, r24
    91a2:	90 e0       	ldi	r25, 0x00	; 0
    91a4:	84 70       	andi	r24, 0x04	; 4
    91a6:	99 27       	eor	r25, r25
    91a8:	89 2b       	or	r24, r25
    91aa:	61 f4       	brne	.+24     	; 0x91c4 <usart_set_baudrate+0x114>
		baud *= 2;
    91ac:	88 8d       	ldd	r24, Y+24	; 0x18
    91ae:	99 8d       	ldd	r25, Y+25	; 0x19
    91b0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    91b2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    91b4:	88 0f       	add	r24, r24
    91b6:	99 1f       	adc	r25, r25
    91b8:	aa 1f       	adc	r26, r26
    91ba:	bb 1f       	adc	r27, r27
    91bc:	88 8f       	std	Y+24, r24	; 0x18
    91be:	99 8f       	std	Y+25, r25	; 0x19
    91c0:	aa 8f       	std	Y+26, r26	; 0x1a
    91c2:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    91c4:	8f ef       	ldi	r24, 0xFF	; 255
    91c6:	90 e0       	ldi	r25, 0x00	; 0
    91c8:	a0 e0       	ldi	r26, 0x00	; 0
    91ca:	b0 e0       	ldi	r27, 0x00	; 0
    91cc:	8e 83       	std	Y+6, r24	; 0x06
    91ce:	9f 83       	std	Y+7, r25	; 0x07
    91d0:	a8 87       	std	Y+8, r26	; 0x08
    91d2:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    91d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    91d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    91d8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    91da:	bf 8d       	ldd	r27, Y+31	; 0x1f
    91dc:	28 8d       	ldd	r18, Y+24	; 0x18
    91de:	39 8d       	ldd	r19, Y+25	; 0x19
    91e0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    91e2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    91e4:	bc 01       	movw	r22, r24
    91e6:	cd 01       	movw	r24, r26
    91e8:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    91ec:	da 01       	movw	r26, r20
    91ee:	c9 01       	movw	r24, r18
    91f0:	8a 8b       	std	Y+18, r24	; 0x12
    91f2:	9b 8b       	std	Y+19, r25	; 0x13
    91f4:	ac 8b       	std	Y+20, r26	; 0x14
    91f6:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    91f8:	89 ef       	ldi	r24, 0xF9	; 249
    91fa:	89 83       	std	Y+1, r24	; 0x01
    91fc:	28 c0       	rjmp	.+80     	; 0x924e <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    91fe:	2a 89       	ldd	r18, Y+18	; 0x12
    9200:	3b 89       	ldd	r19, Y+19	; 0x13
    9202:	4c 89       	ldd	r20, Y+20	; 0x14
    9204:	5d 89       	ldd	r21, Y+21	; 0x15
    9206:	8e 81       	ldd	r24, Y+6	; 0x06
    9208:	9f 81       	ldd	r25, Y+7	; 0x07
    920a:	a8 85       	ldd	r26, Y+8	; 0x08
    920c:	b9 85       	ldd	r27, Y+9	; 0x09
    920e:	28 17       	cp	r18, r24
    9210:	39 07       	cpc	r19, r25
    9212:	4a 07       	cpc	r20, r26
    9214:	5b 07       	cpc	r21, r27
    9216:	f8 f0       	brcs	.+62     	; 0x9256 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    9218:	8e 81       	ldd	r24, Y+6	; 0x06
    921a:	9f 81       	ldd	r25, Y+7	; 0x07
    921c:	a8 85       	ldd	r26, Y+8	; 0x08
    921e:	b9 85       	ldd	r27, Y+9	; 0x09
    9220:	88 0f       	add	r24, r24
    9222:	99 1f       	adc	r25, r25
    9224:	aa 1f       	adc	r26, r26
    9226:	bb 1f       	adc	r27, r27
    9228:	8e 83       	std	Y+6, r24	; 0x06
    922a:	9f 83       	std	Y+7, r25	; 0x07
    922c:	a8 87       	std	Y+8, r26	; 0x08
    922e:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    9230:	89 81       	ldd	r24, Y+1	; 0x01
    9232:	8d 3f       	cpi	r24, 0xFD	; 253
    9234:	4c f4       	brge	.+18     	; 0x9248 <usart_set_baudrate+0x198>
			limit |= 1;
    9236:	8e 81       	ldd	r24, Y+6	; 0x06
    9238:	9f 81       	ldd	r25, Y+7	; 0x07
    923a:	a8 85       	ldd	r26, Y+8	; 0x08
    923c:	b9 85       	ldd	r27, Y+9	; 0x09
    923e:	81 60       	ori	r24, 0x01	; 1
    9240:	8e 83       	std	Y+6, r24	; 0x06
    9242:	9f 83       	std	Y+7, r25	; 0x07
    9244:	a8 87       	std	Y+8, r26	; 0x08
    9246:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    9248:	89 81       	ldd	r24, Y+1	; 0x01
    924a:	8f 5f       	subi	r24, 0xFF	; 255
    924c:	89 83       	std	Y+1, r24	; 0x01
    924e:	89 81       	ldd	r24, Y+1	; 0x01
    9250:	87 30       	cpi	r24, 0x07	; 7
    9252:	ac f2       	brlt	.-86     	; 0x91fe <usart_set_baudrate+0x14e>
    9254:	01 c0       	rjmp	.+2      	; 0x9258 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    9256:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    9258:	89 81       	ldd	r24, Y+1	; 0x01
    925a:	88 23       	and	r24, r24
    925c:	0c f0       	brlt	.+2      	; 0x9260 <usart_set_baudrate+0x1b0>
    925e:	8a c0       	rjmp	.+276    	; 0x9374 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    9260:	88 8d       	ldd	r24, Y+24	; 0x18
    9262:	99 8d       	ldd	r25, Y+25	; 0x19
    9264:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9266:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9268:	88 0f       	add	r24, r24
    926a:	99 1f       	adc	r25, r25
    926c:	aa 1f       	adc	r26, r26
    926e:	bb 1f       	adc	r27, r27
    9270:	88 0f       	add	r24, r24
    9272:	99 1f       	adc	r25, r25
    9274:	aa 1f       	adc	r26, r26
    9276:	bb 1f       	adc	r27, r27
    9278:	88 0f       	add	r24, r24
    927a:	99 1f       	adc	r25, r25
    927c:	aa 1f       	adc	r26, r26
    927e:	bb 1f       	adc	r27, r27
    9280:	9c 01       	movw	r18, r24
    9282:	ad 01       	movw	r20, r26
    9284:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9286:	9d 8d       	ldd	r25, Y+29	; 0x1d
    9288:	ae 8d       	ldd	r26, Y+30	; 0x1e
    928a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    928c:	82 1b       	sub	r24, r18
    928e:	93 0b       	sbc	r25, r19
    9290:	a4 0b       	sbc	r26, r20
    9292:	b5 0b       	sbc	r27, r21
    9294:	8c 8f       	std	Y+28, r24	; 0x1c
    9296:	9d 8f       	std	Y+29, r25	; 0x1d
    9298:	ae 8f       	std	Y+30, r26	; 0x1e
    929a:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    929c:	89 81       	ldd	r24, Y+1	; 0x01
    929e:	8e 3f       	cpi	r24, 0xFE	; 254
    92a0:	94 f5       	brge	.+100    	; 0x9306 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    92a2:	89 81       	ldd	r24, Y+1	; 0x01
    92a4:	08 2e       	mov	r0, r24
    92a6:	00 0c       	add	r0, r0
    92a8:	99 0b       	sbc	r25, r25
    92aa:	2d ef       	ldi	r18, 0xFD	; 253
    92ac:	3f ef       	ldi	r19, 0xFF	; 255
    92ae:	28 1b       	sub	r18, r24
    92b0:	39 0b       	sbc	r19, r25
    92b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    92b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    92b6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    92b8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    92ba:	7c 01       	movw	r14, r24
    92bc:	8d 01       	movw	r16, r26
    92be:	04 c0       	rjmp	.+8      	; 0x92c8 <usart_set_baudrate+0x218>
    92c0:	ee 0c       	add	r14, r14
    92c2:	ff 1c       	adc	r15, r15
    92c4:	00 1f       	adc	r16, r16
    92c6:	11 1f       	adc	r17, r17
    92c8:	2a 95       	dec	r18
    92ca:	d2 f7       	brpl	.-12     	; 0x92c0 <usart_set_baudrate+0x210>
    92cc:	a8 01       	movw	r20, r16
    92ce:	97 01       	movw	r18, r14
    92d0:	88 8d       	ldd	r24, Y+24	; 0x18
    92d2:	99 8d       	ldd	r25, Y+25	; 0x19
    92d4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    92d6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    92d8:	b6 95       	lsr	r27
    92da:	a7 95       	ror	r26
    92dc:	97 95       	ror	r25
    92de:	87 95       	ror	r24
    92e0:	82 0f       	add	r24, r18
    92e2:	93 1f       	adc	r25, r19
    92e4:	a4 1f       	adc	r26, r20
    92e6:	b5 1f       	adc	r27, r21
    92e8:	28 8d       	ldd	r18, Y+24	; 0x18
    92ea:	39 8d       	ldd	r19, Y+25	; 0x19
    92ec:	4a 8d       	ldd	r20, Y+26	; 0x1a
    92ee:	5b 8d       	ldd	r21, Y+27	; 0x1b
    92f0:	bc 01       	movw	r22, r24
    92f2:	cd 01       	movw	r24, r26
    92f4:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    92f8:	da 01       	movw	r26, r20
    92fa:	c9 01       	movw	r24, r18
    92fc:	8a 83       	std	Y+2, r24	; 0x02
    92fe:	9b 83       	std	Y+3, r25	; 0x03
    9300:	ac 83       	std	Y+4, r26	; 0x04
    9302:	bd 83       	std	Y+5, r27	; 0x05
    9304:	70 c0       	rjmp	.+224    	; 0x93e6 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    9306:	89 81       	ldd	r24, Y+1	; 0x01
    9308:	08 2e       	mov	r0, r24
    930a:	00 0c       	add	r0, r0
    930c:	99 0b       	sbc	r25, r25
    930e:	9c 01       	movw	r18, r24
    9310:	2d 5f       	subi	r18, 0xFD	; 253
    9312:	3f 4f       	sbci	r19, 0xFF	; 255
    9314:	88 8d       	ldd	r24, Y+24	; 0x18
    9316:	99 8d       	ldd	r25, Y+25	; 0x19
    9318:	aa 8d       	ldd	r26, Y+26	; 0x1a
    931a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    931c:	04 c0       	rjmp	.+8      	; 0x9326 <usart_set_baudrate+0x276>
    931e:	88 0f       	add	r24, r24
    9320:	99 1f       	adc	r25, r25
    9322:	aa 1f       	adc	r26, r26
    9324:	bb 1f       	adc	r27, r27
    9326:	2a 95       	dec	r18
    9328:	d2 f7       	brpl	.-12     	; 0x931e <usart_set_baudrate+0x26e>
    932a:	88 8f       	std	Y+24, r24	; 0x18
    932c:	99 8f       	std	Y+25, r25	; 0x19
    932e:	aa 8f       	std	Y+26, r26	; 0x1a
    9330:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    9332:	88 8d       	ldd	r24, Y+24	; 0x18
    9334:	99 8d       	ldd	r25, Y+25	; 0x19
    9336:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9338:	bb 8d       	ldd	r27, Y+27	; 0x1b
    933a:	9c 01       	movw	r18, r24
    933c:	ad 01       	movw	r20, r26
    933e:	56 95       	lsr	r21
    9340:	47 95       	ror	r20
    9342:	37 95       	ror	r19
    9344:	27 95       	ror	r18
    9346:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9348:	9d 8d       	ldd	r25, Y+29	; 0x1d
    934a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    934c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    934e:	82 0f       	add	r24, r18
    9350:	93 1f       	adc	r25, r19
    9352:	a4 1f       	adc	r26, r20
    9354:	b5 1f       	adc	r27, r21
    9356:	28 8d       	ldd	r18, Y+24	; 0x18
    9358:	39 8d       	ldd	r19, Y+25	; 0x19
    935a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    935c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    935e:	bc 01       	movw	r22, r24
    9360:	cd 01       	movw	r24, r26
    9362:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    9366:	da 01       	movw	r26, r20
    9368:	c9 01       	movw	r24, r18
    936a:	8a 83       	std	Y+2, r24	; 0x02
    936c:	9b 83       	std	Y+3, r25	; 0x03
    936e:	ac 83       	std	Y+4, r26	; 0x04
    9370:	bd 83       	std	Y+5, r27	; 0x05
    9372:	39 c0       	rjmp	.+114    	; 0x93e6 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    9374:	89 81       	ldd	r24, Y+1	; 0x01
    9376:	08 2e       	mov	r0, r24
    9378:	00 0c       	add	r0, r0
    937a:	99 0b       	sbc	r25, r25
    937c:	9c 01       	movw	r18, r24
    937e:	2d 5f       	subi	r18, 0xFD	; 253
    9380:	3f 4f       	sbci	r19, 0xFF	; 255
    9382:	88 8d       	ldd	r24, Y+24	; 0x18
    9384:	99 8d       	ldd	r25, Y+25	; 0x19
    9386:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9388:	bb 8d       	ldd	r27, Y+27	; 0x1b
    938a:	04 c0       	rjmp	.+8      	; 0x9394 <usart_set_baudrate+0x2e4>
    938c:	88 0f       	add	r24, r24
    938e:	99 1f       	adc	r25, r25
    9390:	aa 1f       	adc	r26, r26
    9392:	bb 1f       	adc	r27, r27
    9394:	2a 95       	dec	r18
    9396:	d2 f7       	brpl	.-12     	; 0x938c <usart_set_baudrate+0x2dc>
    9398:	88 8f       	std	Y+24, r24	; 0x18
    939a:	99 8f       	std	Y+25, r25	; 0x19
    939c:	aa 8f       	std	Y+26, r26	; 0x1a
    939e:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    93a0:	88 8d       	ldd	r24, Y+24	; 0x18
    93a2:	99 8d       	ldd	r25, Y+25	; 0x19
    93a4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    93a6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    93a8:	9c 01       	movw	r18, r24
    93aa:	ad 01       	movw	r20, r26
    93ac:	56 95       	lsr	r21
    93ae:	47 95       	ror	r20
    93b0:	37 95       	ror	r19
    93b2:	27 95       	ror	r18
    93b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    93b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    93b8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    93ba:	bf 8d       	ldd	r27, Y+31	; 0x1f
    93bc:	82 0f       	add	r24, r18
    93be:	93 1f       	adc	r25, r19
    93c0:	a4 1f       	adc	r26, r20
    93c2:	b5 1f       	adc	r27, r21
    93c4:	28 8d       	ldd	r18, Y+24	; 0x18
    93c6:	39 8d       	ldd	r19, Y+25	; 0x19
    93c8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    93ca:	5b 8d       	ldd	r21, Y+27	; 0x1b
    93cc:	bc 01       	movw	r22, r24
    93ce:	cd 01       	movw	r24, r26
    93d0:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <__udivmodsi4>
    93d4:	da 01       	movw	r26, r20
    93d6:	c9 01       	movw	r24, r18
    93d8:	01 97       	sbiw	r24, 0x01	; 1
    93da:	a1 09       	sbc	r26, r1
    93dc:	b1 09       	sbc	r27, r1
    93de:	8a 83       	std	Y+2, r24	; 0x02
    93e0:	9b 83       	std	Y+3, r25	; 0x03
    93e2:	ac 83       	std	Y+4, r26	; 0x04
    93e4:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    93e6:	8a 81       	ldd	r24, Y+2	; 0x02
    93e8:	9b 81       	ldd	r25, Y+3	; 0x03
    93ea:	ac 81       	ldd	r26, Y+4	; 0x04
    93ec:	bd 81       	ldd	r27, Y+5	; 0x05
    93ee:	89 2f       	mov	r24, r25
    93f0:	9a 2f       	mov	r25, r26
    93f2:	ab 2f       	mov	r26, r27
    93f4:	bb 27       	eor	r27, r27
    93f6:	98 2f       	mov	r25, r24
    93f8:	9f 70       	andi	r25, 0x0F	; 15
    93fa:	89 81       	ldd	r24, Y+1	; 0x01
    93fc:	82 95       	swap	r24
    93fe:	80 7f       	andi	r24, 0xF0	; 240
    9400:	29 2f       	mov	r18, r25
    9402:	28 2b       	or	r18, r24
    9404:	8e 89       	ldd	r24, Y+22	; 0x16
    9406:	9f 89       	ldd	r25, Y+23	; 0x17
    9408:	fc 01       	movw	r30, r24
    940a:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    940c:	2a 81       	ldd	r18, Y+2	; 0x02
    940e:	8e 89       	ldd	r24, Y+22	; 0x16
    9410:	9f 89       	ldd	r25, Y+23	; 0x17
    9412:	fc 01       	movw	r30, r24
    9414:	26 83       	std	Z+6, r18	; 0x06

	return true;
    9416:	81 e0       	ldi	r24, 0x01	; 1
}
    9418:	6f 96       	adiw	r28, 0x1f	; 31
    941a:	cd bf       	out	0x3d, r28	; 61
    941c:	de bf       	out	0x3e, r29	; 62
    941e:	df 91       	pop	r29
    9420:	cf 91       	pop	r28
    9422:	1f 91       	pop	r17
    9424:	0f 91       	pop	r16
    9426:	ff 90       	pop	r15
    9428:	ef 90       	pop	r14
    942a:	08 95       	ret

0000942c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    942c:	cf 93       	push	r28
    942e:	df 93       	push	r29
    9430:	00 d0       	rcall	.+0      	; 0x9432 <ioport_configure_port_pin+0x6>
    9432:	00 d0       	rcall	.+0      	; 0x9434 <ioport_configure_port_pin+0x8>
    9434:	cd b7       	in	r28, 0x3d	; 61
    9436:	de b7       	in	r29, 0x3e	; 62
    9438:	8a 83       	std	Y+2, r24	; 0x02
    943a:	9b 83       	std	Y+3, r25	; 0x03
    943c:	6c 83       	std	Y+4, r22	; 0x04
    943e:	4d 83       	std	Y+5, r20	; 0x05
    9440:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    9442:	19 82       	std	Y+1, r1	; 0x01
    9444:	20 c0       	rjmp	.+64     	; 0x9486 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    9446:	8c 81       	ldd	r24, Y+4	; 0x04
    9448:	88 2f       	mov	r24, r24
    944a:	90 e0       	ldi	r25, 0x00	; 0
    944c:	29 81       	ldd	r18, Y+1	; 0x01
    944e:	22 2f       	mov	r18, r18
    9450:	30 e0       	ldi	r19, 0x00	; 0
    9452:	02 c0       	rjmp	.+4      	; 0x9458 <ioport_configure_port_pin+0x2c>
    9454:	95 95       	asr	r25
    9456:	87 95       	ror	r24
    9458:	2a 95       	dec	r18
    945a:	e2 f7       	brpl	.-8      	; 0x9454 <ioport_configure_port_pin+0x28>
    945c:	81 70       	andi	r24, 0x01	; 1
    945e:	99 27       	eor	r25, r25
    9460:	89 2b       	or	r24, r25
    9462:	71 f0       	breq	.+28     	; 0x9480 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    9464:	89 81       	ldd	r24, Y+1	; 0x01
    9466:	88 2f       	mov	r24, r24
    9468:	90 e0       	ldi	r25, 0x00	; 0
    946a:	40 96       	adiw	r24, 0x10	; 16
    946c:	2a 81       	ldd	r18, Y+2	; 0x02
    946e:	3b 81       	ldd	r19, Y+3	; 0x03
    9470:	82 0f       	add	r24, r18
    9472:	93 1f       	adc	r25, r19
    9474:	2d 81       	ldd	r18, Y+5	; 0x05
    9476:	3e 81       	ldd	r19, Y+6	; 0x06
    9478:	23 2f       	mov	r18, r19
    947a:	33 27       	eor	r19, r19
    947c:	fc 01       	movw	r30, r24
    947e:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    9480:	89 81       	ldd	r24, Y+1	; 0x01
    9482:	8f 5f       	subi	r24, 0xFF	; 255
    9484:	89 83       	std	Y+1, r24	; 0x01
    9486:	89 81       	ldd	r24, Y+1	; 0x01
    9488:	88 30       	cpi	r24, 0x08	; 8
    948a:	e8 f2       	brcs	.-70     	; 0x9446 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    948c:	8d 81       	ldd	r24, Y+5	; 0x05
    948e:	9e 81       	ldd	r25, Y+6	; 0x06
    9490:	81 70       	andi	r24, 0x01	; 1
    9492:	99 27       	eor	r25, r25
    9494:	89 2b       	or	r24, r25
    9496:	d1 f0       	breq	.+52     	; 0x94cc <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    9498:	8d 81       	ldd	r24, Y+5	; 0x05
    949a:	9e 81       	ldd	r25, Y+6	; 0x06
    949c:	82 70       	andi	r24, 0x02	; 2
    949e:	99 27       	eor	r25, r25
    94a0:	89 2b       	or	r24, r25
    94a2:	39 f0       	breq	.+14     	; 0x94b2 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    94a4:	8a 81       	ldd	r24, Y+2	; 0x02
    94a6:	9b 81       	ldd	r25, Y+3	; 0x03
    94a8:	05 96       	adiw	r24, 0x05	; 5
    94aa:	2c 81       	ldd	r18, Y+4	; 0x04
    94ac:	fc 01       	movw	r30, r24
    94ae:	20 83       	st	Z, r18
    94b0:	06 c0       	rjmp	.+12     	; 0x94be <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    94b2:	8a 81       	ldd	r24, Y+2	; 0x02
    94b4:	9b 81       	ldd	r25, Y+3	; 0x03
    94b6:	06 96       	adiw	r24, 0x06	; 6
    94b8:	2c 81       	ldd	r18, Y+4	; 0x04
    94ba:	fc 01       	movw	r30, r24
    94bc:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    94be:	8a 81       	ldd	r24, Y+2	; 0x02
    94c0:	9b 81       	ldd	r25, Y+3	; 0x03
    94c2:	01 96       	adiw	r24, 0x01	; 1
    94c4:	2c 81       	ldd	r18, Y+4	; 0x04
    94c6:	fc 01       	movw	r30, r24
    94c8:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    94ca:	06 c0       	rjmp	.+12     	; 0x94d8 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    94cc:	8a 81       	ldd	r24, Y+2	; 0x02
    94ce:	9b 81       	ldd	r25, Y+3	; 0x03
    94d0:	02 96       	adiw	r24, 0x02	; 2
    94d2:	2c 81       	ldd	r18, Y+4	; 0x04
    94d4:	fc 01       	movw	r30, r24
    94d6:	20 83       	st	Z, r18
	}
}
    94d8:	00 00       	nop
    94da:	26 96       	adiw	r28, 0x06	; 6
    94dc:	cd bf       	out	0x3d, r28	; 61
    94de:	de bf       	out	0x3e, r29	; 62
    94e0:	df 91       	pop	r29
    94e2:	cf 91       	pop	r28
    94e4:	08 95       	ret

000094e6 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    94e6:	cf 93       	push	r28
    94e8:	df 93       	push	r29
    94ea:	cd b7       	in	r28, 0x3d	; 61
    94ec:	de b7       	in	r29, 0x3e	; 62
    94ee:	27 97       	sbiw	r28, 0x07	; 7
    94f0:	cd bf       	out	0x3d, r28	; 61
    94f2:	de bf       	out	0x3e, r29	; 62
    94f4:	8d 83       	std	Y+5, r24	; 0x05
    94f6:	6e 83       	std	Y+6, r22	; 0x06
    94f8:	7f 83       	std	Y+7, r23	; 0x07
    94fa:	8d 81       	ldd	r24, Y+5	; 0x05
    94fc:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    94fe:	89 81       	ldd	r24, Y+1	; 0x01
    9500:	88 2f       	mov	r24, r24
    9502:	90 e0       	ldi	r25, 0x00	; 0
    9504:	9c 01       	movw	r18, r24
    9506:	27 70       	andi	r18, 0x07	; 7
    9508:	33 27       	eor	r19, r19
    950a:	81 e0       	ldi	r24, 0x01	; 1
    950c:	90 e0       	ldi	r25, 0x00	; 0
    950e:	02 c0       	rjmp	.+4      	; 0x9514 <ioport_configure_pin+0x2e>
    9510:	88 0f       	add	r24, r24
    9512:	99 1f       	adc	r25, r25
    9514:	2a 95       	dec	r18
    9516:	e2 f7       	brpl	.-8      	; 0x9510 <ioport_configure_pin+0x2a>
    9518:	68 2f       	mov	r22, r24
    951a:	8d 81       	ldd	r24, Y+5	; 0x05
    951c:	8a 83       	std	Y+2, r24	; 0x02
    951e:	8a 81       	ldd	r24, Y+2	; 0x02
    9520:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    9522:	8b 81       	ldd	r24, Y+3	; 0x03
    9524:	86 95       	lsr	r24
    9526:	86 95       	lsr	r24
    9528:	86 95       	lsr	r24
    952a:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    952c:	8c 81       	ldd	r24, Y+4	; 0x04
    952e:	88 2f       	mov	r24, r24
    9530:	90 e0       	ldi	r25, 0x00	; 0
    9532:	88 0f       	add	r24, r24
    9534:	99 1f       	adc	r25, r25
    9536:	82 95       	swap	r24
    9538:	92 95       	swap	r25
    953a:	90 7f       	andi	r25, 0xF0	; 240
    953c:	98 27       	eor	r25, r24
    953e:	80 7f       	andi	r24, 0xF0	; 240
    9540:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    9542:	9a 5f       	subi	r25, 0xFA	; 250
    9544:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    9546:	8e 81       	ldd	r24, Y+6	; 0x06
    9548:	9f 81       	ldd	r25, Y+7	; 0x07
    954a:	ac 01       	movw	r20, r24
    954c:	c9 01       	movw	r24, r18
    954e:	6e df       	rcall	.-292    	; 0x942c <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    9550:	00 00       	nop
    9552:	27 96       	adiw	r28, 0x07	; 7
    9554:	cd bf       	out	0x3d, r28	; 61
    9556:	de bf       	out	0x3e, r29	; 62
    9558:	df 91       	pop	r29
    955a:	cf 91       	pop	r28
    955c:	08 95       	ret

0000955e <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    955e:	cf 93       	push	r28
    9560:	df 93       	push	r29
    9562:	cd b7       	in	r28, 0x3d	; 61
    9564:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    9566:	63 e0       	ldi	r22, 0x03	; 3
    9568:	70 e0       	ldi	r23, 0x00	; 0
    956a:	83 e7       	ldi	r24, 0x73	; 115
    956c:	bc df       	rcall	.-136    	; 0x94e6 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    956e:	60 e0       	ldi	r22, 0x00	; 0
    9570:	78 e1       	ldi	r23, 0x18	; 24
    9572:	82 e7       	ldi	r24, 0x72	; 114
    9574:	b8 df       	rcall	.-144    	; 0x94e6 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    9576:	00 00       	nop
    9578:	df 91       	pop	r29
    957a:	cf 91       	pop	r28
    957c:	08 95       	ret

0000957e <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device, uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    957e:	cf 93       	push	r28
    9580:	df 93       	push	r29
    9582:	1f 92       	push	r1
    9584:	1f 92       	push	r1
    9586:	cd b7       	in	r28, 0x3d	; 61
    9588:	de b7       	in	r29, 0x3e	; 62
    958a:	89 83       	std	Y+1, r24	; 0x01
    958c:	9a 83       	std	Y+2, r25	; 0x02
    958e:	89 81       	ldd	r24, Y+1	; 0x01
    9590:	9a 81       	ldd	r25, Y+2	; 0x02
    9592:	89 2b       	or	r24, r25
    9594:	09 f4       	brne	.+2      	; 0x9598 <sysclk_enable_peripheral_clock+0x1a>
    9596:	85 c1       	rjmp	.+778    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9598:	89 81       	ldd	r24, Y+1	; 0x01
    959a:	9a 81       	ldd	r25, Y+2	; 0x02
    959c:	80 3c       	cpi	r24, 0xC0	; 192
    959e:	91 05       	cpc	r25, r1
    95a0:	29 f4       	brne	.+10     	; 0x95ac <sysclk_enable_peripheral_clock+0x2e>
    95a2:	60 e1       	ldi	r22, 0x10	; 16
    95a4:	80 e0       	ldi	r24, 0x00	; 0
    95a6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    95aa:	7b c1       	rjmp	.+758    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    95ac:	89 81       	ldd	r24, Y+1	; 0x01
    95ae:	9a 81       	ldd	r25, Y+2	; 0x02
    95b0:	80 34       	cpi	r24, 0x40	; 64
    95b2:	94 40       	sbci	r25, 0x04	; 4
    95b4:	29 f4       	brne	.+10     	; 0x95c0 <sysclk_enable_peripheral_clock+0x42>
    95b6:	68 e0       	ldi	r22, 0x08	; 8
    95b8:	80 e0       	ldi	r24, 0x00	; 0
    95ba:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    95be:	71 c1       	rjmp	.+738    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    95c0:	89 81       	ldd	r24, Y+1	; 0x01
    95c2:	9a 81       	ldd	r25, Y+2	; 0x02
    95c4:	81 15       	cp	r24, r1
    95c6:	94 40       	sbci	r25, 0x04	; 4
    95c8:	29 f4       	brne	.+10     	; 0x95d4 <sysclk_enable_peripheral_clock+0x56>
    95ca:	64 e0       	ldi	r22, 0x04	; 4
    95cc:	80 e0       	ldi	r24, 0x00	; 0
    95ce:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    95d2:	67 c1       	rjmp	.+718    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    95d4:	89 81       	ldd	r24, Y+1	; 0x01
    95d6:	9a 81       	ldd	r25, Y+2	; 0x02
    95d8:	80 38       	cpi	r24, 0x80	; 128
    95da:	91 40       	sbci	r25, 0x01	; 1
    95dc:	29 f4       	brne	.+10     	; 0x95e8 <sysclk_enable_peripheral_clock+0x6a>
    95de:	62 e0       	ldi	r22, 0x02	; 2
    95e0:	80 e0       	ldi	r24, 0x00	; 0
    95e2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    95e6:	5d c1       	rjmp	.+698    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    95e8:	89 81       	ldd	r24, Y+1	; 0x01
    95ea:	9a 81       	ldd	r25, Y+2	; 0x02
    95ec:	81 15       	cp	r24, r1
    95ee:	91 40       	sbci	r25, 0x01	; 1
    95f0:	29 f4       	brne	.+10     	; 0x95fc <sysclk_enable_peripheral_clock+0x7e>
    95f2:	61 e0       	ldi	r22, 0x01	; 1
    95f4:	80 e0       	ldi	r24, 0x00	; 0
    95f6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    95fa:	53 c1       	rjmp	.+678    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    95fc:	89 81       	ldd	r24, Y+1	; 0x01
    95fe:	9a 81       	ldd	r25, Y+2	; 0x02
    9600:	80 38       	cpi	r24, 0x80	; 128
    9602:	93 40       	sbci	r25, 0x03	; 3
    9604:	29 f4       	brne	.+10     	; 0x9610 <sysclk_enable_peripheral_clock+0x92>
    9606:	61 e0       	ldi	r22, 0x01	; 1
    9608:	81 e0       	ldi	r24, 0x01	; 1
    960a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    960e:	49 c1       	rjmp	.+658    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9610:	89 81       	ldd	r24, Y+1	; 0x01
    9612:	9a 81       	ldd	r25, Y+2	; 0x02
    9614:	80 39       	cpi	r24, 0x90	; 144
    9616:	93 40       	sbci	r25, 0x03	; 3
    9618:	29 f4       	brne	.+10     	; 0x9624 <sysclk_enable_peripheral_clock+0xa6>
    961a:	61 e0       	ldi	r22, 0x01	; 1
    961c:	82 e0       	ldi	r24, 0x02	; 2
    961e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9622:	3f c1       	rjmp	.+638    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9624:	89 81       	ldd	r24, Y+1	; 0x01
    9626:	9a 81       	ldd	r25, Y+2	; 0x02
    9628:	81 15       	cp	r24, r1
    962a:	92 40       	sbci	r25, 0x02	; 2
    962c:	29 f4       	brne	.+10     	; 0x9638 <sysclk_enable_peripheral_clock+0xba>
    962e:	62 e0       	ldi	r22, 0x02	; 2
    9630:	81 e0       	ldi	r24, 0x01	; 1
    9632:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9636:	35 c1       	rjmp	.+618    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9638:	89 81       	ldd	r24, Y+1	; 0x01
    963a:	9a 81       	ldd	r25, Y+2	; 0x02
    963c:	80 34       	cpi	r24, 0x40	; 64
    963e:	92 40       	sbci	r25, 0x02	; 2
    9640:	29 f4       	brne	.+10     	; 0x964c <sysclk_enable_peripheral_clock+0xce>
    9642:	62 e0       	ldi	r22, 0x02	; 2
    9644:	82 e0       	ldi	r24, 0x02	; 2
    9646:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    964a:	2b c1       	rjmp	.+598    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    964c:	89 81       	ldd	r24, Y+1	; 0x01
    964e:	9a 81       	ldd	r25, Y+2	; 0x02
    9650:	81 15       	cp	r24, r1
    9652:	93 40       	sbci	r25, 0x03	; 3
    9654:	29 f4       	brne	.+10     	; 0x9660 <sysclk_enable_peripheral_clock+0xe2>
    9656:	64 e0       	ldi	r22, 0x04	; 4
    9658:	81 e0       	ldi	r24, 0x01	; 1
    965a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    965e:	21 c1       	rjmp	.+578    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9660:	89 81       	ldd	r24, Y+1	; 0x01
    9662:	9a 81       	ldd	r25, Y+2	; 0x02
    9664:	80 32       	cpi	r24, 0x20	; 32
    9666:	93 40       	sbci	r25, 0x03	; 3
    9668:	29 f4       	brne	.+10     	; 0x9674 <sysclk_enable_peripheral_clock+0xf6>
    966a:	64 e0       	ldi	r22, 0x04	; 4
    966c:	82 e0       	ldi	r24, 0x02	; 2
    966e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9672:	17 c1       	rjmp	.+558    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9674:	89 81       	ldd	r24, Y+1	; 0x01
    9676:	9a 81       	ldd	r25, Y+2	; 0x02
    9678:	81 15       	cp	r24, r1
    967a:	98 40       	sbci	r25, 0x08	; 8
    967c:	29 f4       	brne	.+10     	; 0x9688 <sysclk_enable_peripheral_clock+0x10a>
    967e:	61 e0       	ldi	r22, 0x01	; 1
    9680:	83 e0       	ldi	r24, 0x03	; 3
    9682:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9686:	0d c1       	rjmp	.+538    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9688:	89 81       	ldd	r24, Y+1	; 0x01
    968a:	9a 81       	ldd	r25, Y+2	; 0x02
    968c:	81 15       	cp	r24, r1
    968e:	99 40       	sbci	r25, 0x09	; 9
    9690:	29 f4       	brne	.+10     	; 0x969c <sysclk_enable_peripheral_clock+0x11e>
    9692:	61 e0       	ldi	r22, 0x01	; 1
    9694:	84 e0       	ldi	r24, 0x04	; 4
    9696:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    969a:	03 c1       	rjmp	.+518    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    969c:	89 81       	ldd	r24, Y+1	; 0x01
    969e:	9a 81       	ldd	r25, Y+2	; 0x02
    96a0:	81 15       	cp	r24, r1
    96a2:	9a 40       	sbci	r25, 0x0A	; 10
    96a4:	29 f4       	brne	.+10     	; 0x96b0 <sysclk_enable_peripheral_clock+0x132>
    96a6:	61 e0       	ldi	r22, 0x01	; 1
    96a8:	85 e0       	ldi	r24, 0x05	; 5
    96aa:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    96ae:	f9 c0       	rjmp	.+498    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    96b0:	89 81       	ldd	r24, Y+1	; 0x01
    96b2:	9a 81       	ldd	r25, Y+2	; 0x02
    96b4:	81 15       	cp	r24, r1
    96b6:	9b 40       	sbci	r25, 0x0B	; 11
    96b8:	29 f4       	brne	.+10     	; 0x96c4 <sysclk_enable_peripheral_clock+0x146>
    96ba:	61 e0       	ldi	r22, 0x01	; 1
    96bc:	86 e0       	ldi	r24, 0x06	; 6
    96be:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    96c2:	ef c0       	rjmp	.+478    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    96c4:	89 81       	ldd	r24, Y+1	; 0x01
    96c6:	9a 81       	ldd	r25, Y+2	; 0x02
    96c8:	80 34       	cpi	r24, 0x40	; 64
    96ca:	98 40       	sbci	r25, 0x08	; 8
    96cc:	29 f4       	brne	.+10     	; 0x96d8 <sysclk_enable_peripheral_clock+0x15a>
    96ce:	62 e0       	ldi	r22, 0x02	; 2
    96d0:	83 e0       	ldi	r24, 0x03	; 3
    96d2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    96d6:	e5 c0       	rjmp	.+458    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    96d8:	89 81       	ldd	r24, Y+1	; 0x01
    96da:	9a 81       	ldd	r25, Y+2	; 0x02
    96dc:	80 34       	cpi	r24, 0x40	; 64
    96de:	99 40       	sbci	r25, 0x09	; 9
    96e0:	29 f4       	brne	.+10     	; 0x96ec <sysclk_enable_peripheral_clock+0x16e>
    96e2:	62 e0       	ldi	r22, 0x02	; 2
    96e4:	84 e0       	ldi	r24, 0x04	; 4
    96e6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    96ea:	db c0       	rjmp	.+438    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    96ec:	89 81       	ldd	r24, Y+1	; 0x01
    96ee:	9a 81       	ldd	r25, Y+2	; 0x02
    96f0:	80 34       	cpi	r24, 0x40	; 64
    96f2:	9a 40       	sbci	r25, 0x0A	; 10
    96f4:	29 f4       	brne	.+10     	; 0x9700 <sysclk_enable_peripheral_clock+0x182>
    96f6:	62 e0       	ldi	r22, 0x02	; 2
    96f8:	85 e0       	ldi	r24, 0x05	; 5
    96fa:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    96fe:	d1 c0       	rjmp	.+418    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9700:	89 81       	ldd	r24, Y+1	; 0x01
    9702:	9a 81       	ldd	r25, Y+2	; 0x02
    9704:	80 34       	cpi	r24, 0x40	; 64
    9706:	9b 40       	sbci	r25, 0x0B	; 11
    9708:	29 f4       	brne	.+10     	; 0x9714 <sysclk_enable_peripheral_clock+0x196>
    970a:	62 e0       	ldi	r22, 0x02	; 2
    970c:	86 e0       	ldi	r24, 0x06	; 6
    970e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9712:	c7 c0       	rjmp	.+398    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9714:	89 81       	ldd	r24, Y+1	; 0x01
    9716:	9a 81       	ldd	r25, Y+2	; 0x02
    9718:	80 39       	cpi	r24, 0x90	; 144
    971a:	98 40       	sbci	r25, 0x08	; 8
    971c:	29 f4       	brne	.+10     	; 0x9728 <sysclk_enable_peripheral_clock+0x1aa>
    971e:	64 e0       	ldi	r22, 0x04	; 4
    9720:	83 e0       	ldi	r24, 0x03	; 3
    9722:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9726:	bd c0       	rjmp	.+378    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9728:	89 81       	ldd	r24, Y+1	; 0x01
    972a:	9a 81       	ldd	r25, Y+2	; 0x02
    972c:	80 39       	cpi	r24, 0x90	; 144
    972e:	99 40       	sbci	r25, 0x09	; 9
    9730:	29 f4       	brne	.+10     	; 0x973c <sysclk_enable_peripheral_clock+0x1be>
    9732:	64 e0       	ldi	r22, 0x04	; 4
    9734:	84 e0       	ldi	r24, 0x04	; 4
    9736:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    973a:	b3 c0       	rjmp	.+358    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    973c:	89 81       	ldd	r24, Y+1	; 0x01
    973e:	9a 81       	ldd	r25, Y+2	; 0x02
    9740:	80 39       	cpi	r24, 0x90	; 144
    9742:	9a 40       	sbci	r25, 0x0A	; 10
    9744:	29 f4       	brne	.+10     	; 0x9750 <sysclk_enable_peripheral_clock+0x1d2>
    9746:	64 e0       	ldi	r22, 0x04	; 4
    9748:	85 e0       	ldi	r24, 0x05	; 5
    974a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    974e:	a9 c0       	rjmp	.+338    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9750:	89 81       	ldd	r24, Y+1	; 0x01
    9752:	9a 81       	ldd	r25, Y+2	; 0x02
    9754:	80 39       	cpi	r24, 0x90	; 144
    9756:	9b 40       	sbci	r25, 0x0B	; 11
    9758:	29 f4       	brne	.+10     	; 0x9764 <sysclk_enable_peripheral_clock+0x1e6>
    975a:	64 e0       	ldi	r22, 0x04	; 4
    975c:	86 e0       	ldi	r24, 0x06	; 6
    975e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9762:	9f c0       	rjmp	.+318    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9764:	89 81       	ldd	r24, Y+1	; 0x01
    9766:	9a 81       	ldd	r25, Y+2	; 0x02
    9768:	80 3c       	cpi	r24, 0xC0	; 192
    976a:	98 40       	sbci	r25, 0x08	; 8
    976c:	29 f4       	brne	.+10     	; 0x9778 <sysclk_enable_peripheral_clock+0x1fa>
    976e:	68 e0       	ldi	r22, 0x08	; 8
    9770:	83 e0       	ldi	r24, 0x03	; 3
    9772:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9776:	95 c0       	rjmp	.+298    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9778:	89 81       	ldd	r24, Y+1	; 0x01
    977a:	9a 81       	ldd	r25, Y+2	; 0x02
    977c:	80 3c       	cpi	r24, 0xC0	; 192
    977e:	99 40       	sbci	r25, 0x09	; 9
    9780:	29 f4       	brne	.+10     	; 0x978c <sysclk_enable_peripheral_clock+0x20e>
    9782:	68 e0       	ldi	r22, 0x08	; 8
    9784:	84 e0       	ldi	r24, 0x04	; 4
    9786:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    978a:	8b c0       	rjmp	.+278    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    978c:	89 81       	ldd	r24, Y+1	; 0x01
    978e:	9a 81       	ldd	r25, Y+2	; 0x02
    9790:	80 3c       	cpi	r24, 0xC0	; 192
    9792:	9a 40       	sbci	r25, 0x0A	; 10
    9794:	29 f4       	brne	.+10     	; 0x97a0 <sysclk_enable_peripheral_clock+0x222>
    9796:	68 e0       	ldi	r22, 0x08	; 8
    9798:	85 e0       	ldi	r24, 0x05	; 5
    979a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    979e:	81 c0       	rjmp	.+258    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    97a0:	89 81       	ldd	r24, Y+1	; 0x01
    97a2:	9a 81       	ldd	r25, Y+2	; 0x02
    97a4:	80 3c       	cpi	r24, 0xC0	; 192
    97a6:	9b 40       	sbci	r25, 0x0B	; 11
    97a8:	29 f4       	brne	.+10     	; 0x97b4 <sysclk_enable_peripheral_clock+0x236>
    97aa:	68 e0       	ldi	r22, 0x08	; 8
    97ac:	86 e0       	ldi	r24, 0x06	; 6
    97ae:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    97b2:	77 c0       	rjmp	.+238    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    97b4:	89 81       	ldd	r24, Y+1	; 0x01
    97b6:	9a 81       	ldd	r25, Y+2	; 0x02
    97b8:	80 3a       	cpi	r24, 0xA0	; 160
    97ba:	98 40       	sbci	r25, 0x08	; 8
    97bc:	29 f4       	brne	.+10     	; 0x97c8 <sysclk_enable_peripheral_clock+0x24a>
    97be:	60 e1       	ldi	r22, 0x10	; 16
    97c0:	83 e0       	ldi	r24, 0x03	; 3
    97c2:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    97c6:	6d c0       	rjmp	.+218    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    97c8:	89 81       	ldd	r24, Y+1	; 0x01
    97ca:	9a 81       	ldd	r25, Y+2	; 0x02
    97cc:	80 3a       	cpi	r24, 0xA0	; 160
    97ce:	99 40       	sbci	r25, 0x09	; 9
    97d0:	29 f4       	brne	.+10     	; 0x97dc <sysclk_enable_peripheral_clock+0x25e>
    97d2:	60 e1       	ldi	r22, 0x10	; 16
    97d4:	84 e0       	ldi	r24, 0x04	; 4
    97d6:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    97da:	63 c0       	rjmp	.+198    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    97dc:	89 81       	ldd	r24, Y+1	; 0x01
    97de:	9a 81       	ldd	r25, Y+2	; 0x02
    97e0:	80 3a       	cpi	r24, 0xA0	; 160
    97e2:	9a 40       	sbci	r25, 0x0A	; 10
    97e4:	29 f4       	brne	.+10     	; 0x97f0 <sysclk_enable_peripheral_clock+0x272>
    97e6:	60 e1       	ldi	r22, 0x10	; 16
    97e8:	85 e0       	ldi	r24, 0x05	; 5
    97ea:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    97ee:	59 c0       	rjmp	.+178    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    97f0:	89 81       	ldd	r24, Y+1	; 0x01
    97f2:	9a 81       	ldd	r25, Y+2	; 0x02
    97f4:	80 3a       	cpi	r24, 0xA0	; 160
    97f6:	9b 40       	sbci	r25, 0x0B	; 11
    97f8:	29 f4       	brne	.+10     	; 0x9804 <sysclk_enable_peripheral_clock+0x286>
    97fa:	60 e1       	ldi	r22, 0x10	; 16
    97fc:	86 e0       	ldi	r24, 0x06	; 6
    97fe:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9802:	4f c0       	rjmp	.+158    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9804:	89 81       	ldd	r24, Y+1	; 0x01
    9806:	9a 81       	ldd	r25, Y+2	; 0x02
    9808:	80 3b       	cpi	r24, 0xB0	; 176
    980a:	98 40       	sbci	r25, 0x08	; 8
    980c:	29 f4       	brne	.+10     	; 0x9818 <sysclk_enable_peripheral_clock+0x29a>
    980e:	60 e2       	ldi	r22, 0x20	; 32
    9810:	83 e0       	ldi	r24, 0x03	; 3
    9812:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9816:	45 c0       	rjmp	.+138    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9818:	89 81       	ldd	r24, Y+1	; 0x01
    981a:	9a 81       	ldd	r25, Y+2	; 0x02
    981c:	80 3b       	cpi	r24, 0xB0	; 176
    981e:	99 40       	sbci	r25, 0x09	; 9
    9820:	29 f4       	brne	.+10     	; 0x982c <sysclk_enable_peripheral_clock+0x2ae>
    9822:	60 e2       	ldi	r22, 0x20	; 32
    9824:	84 e0       	ldi	r24, 0x04	; 4
    9826:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    982a:	3b c0       	rjmp	.+118    	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    982c:	89 81       	ldd	r24, Y+1	; 0x01
    982e:	9a 81       	ldd	r25, Y+2	; 0x02
    9830:	80 3b       	cpi	r24, 0xB0	; 176
    9832:	9a 40       	sbci	r25, 0x0A	; 10
    9834:	29 f4       	brne	.+10     	; 0x9840 <sysclk_enable_peripheral_clock+0x2c2>
    9836:	60 e2       	ldi	r22, 0x20	; 32
    9838:	85 e0       	ldi	r24, 0x05	; 5
    983a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    983e:	31 c0       	rjmp	.+98     	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9840:	89 81       	ldd	r24, Y+1	; 0x01
    9842:	9a 81       	ldd	r25, Y+2	; 0x02
    9844:	80 3b       	cpi	r24, 0xB0	; 176
    9846:	9b 40       	sbci	r25, 0x0B	; 11
    9848:	29 f4       	brne	.+10     	; 0x9854 <sysclk_enable_peripheral_clock+0x2d6>
    984a:	60 e2       	ldi	r22, 0x20	; 32
    984c:	86 e0       	ldi	r24, 0x06	; 6
    984e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9852:	27 c0       	rjmp	.+78     	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9854:	89 81       	ldd	r24, Y+1	; 0x01
    9856:	9a 81       	ldd	r25, Y+2	; 0x02
    9858:	80 38       	cpi	r24, 0x80	; 128
    985a:	94 40       	sbci	r25, 0x04	; 4
    985c:	29 f4       	brne	.+10     	; 0x9868 <sysclk_enable_peripheral_clock+0x2ea>
    985e:	60 e4       	ldi	r22, 0x40	; 64
    9860:	83 e0       	ldi	r24, 0x03	; 3
    9862:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9866:	1d c0       	rjmp	.+58     	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9868:	89 81       	ldd	r24, Y+1	; 0x01
    986a:	9a 81       	ldd	r25, Y+2	; 0x02
    986c:	80 39       	cpi	r24, 0x90	; 144
    986e:	94 40       	sbci	r25, 0x04	; 4
    9870:	29 f4       	brne	.+10     	; 0x987c <sysclk_enable_peripheral_clock+0x2fe>
    9872:	60 e4       	ldi	r22, 0x40	; 64
    9874:	84 e0       	ldi	r24, 0x04	; 4
    9876:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    987a:	13 c0       	rjmp	.+38     	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    987c:	89 81       	ldd	r24, Y+1	; 0x01
    987e:	9a 81       	ldd	r25, Y+2	; 0x02
    9880:	80 3a       	cpi	r24, 0xA0	; 160
    9882:	94 40       	sbci	r25, 0x04	; 4
    9884:	29 f4       	brne	.+10     	; 0x9890 <sysclk_enable_peripheral_clock+0x312>
    9886:	60 e4       	ldi	r22, 0x40	; 64
    9888:	85 e0       	ldi	r24, 0x05	; 5
    988a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    988e:	09 c0       	rjmp	.+18     	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    9890:	89 81       	ldd	r24, Y+1	; 0x01
    9892:	9a 81       	ldd	r25, Y+2	; 0x02
    9894:	80 3b       	cpi	r24, 0xB0	; 176
    9896:	94 40       	sbci	r25, 0x04	; 4
    9898:	21 f4       	brne	.+8      	; 0x98a2 <sysclk_enable_peripheral_clock+0x324>
    989a:	60 e4       	ldi	r22, 0x40	; 64
    989c:	86 e0       	ldi	r24, 0x06	; 6
    989e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    98a2:	00 00       	nop
    98a4:	0f 90       	pop	r0
    98a6:	0f 90       	pop	r0
    98a8:	df 91       	pop	r29
    98aa:	cf 91       	pop	r28
    98ac:	08 95       	ret

000098ae <usart_serial_init>:
    98ae:	cf 93       	push	r28
    98b0:	df 93       	push	r29
    98b2:	cd b7       	in	r28, 0x3d	; 61
    98b4:	de b7       	in	r29, 0x3e	; 62
    98b6:	2b 97       	sbiw	r28, 0x0b	; 11
    98b8:	cd bf       	out	0x3d, r28	; 61
    98ba:	de bf       	out	0x3e, r29	; 62
    98bc:	88 87       	std	Y+8, r24	; 0x08
    98be:	99 87       	std	Y+9, r25	; 0x09
    98c0:	6a 87       	std	Y+10, r22	; 0x0a
    98c2:	7b 87       	std	Y+11, r23	; 0x0b
    98c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    98c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    98c8:	fc 01       	movw	r30, r24
    98ca:	84 81       	ldd	r24, Z+4	; 0x04
    98cc:	8d 83       	std	Y+5, r24	; 0x05
    98ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    98d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    98d2:	fc 01       	movw	r30, r24
    98d4:	85 81       	ldd	r24, Z+5	; 0x05
    98d6:	8e 83       	std	Y+6, r24	; 0x06
    98d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    98da:	9b 85       	ldd	r25, Y+11	; 0x0b
    98dc:	fc 01       	movw	r30, r24
    98de:	86 81       	ldd	r24, Z+6	; 0x06
    98e0:	8f 83       	std	Y+7, r24	; 0x07
    98e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    98e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    98e6:	fc 01       	movw	r30, r24
    98e8:	80 81       	ld	r24, Z
    98ea:	91 81       	ldd	r25, Z+1	; 0x01
    98ec:	a2 81       	ldd	r26, Z+2	; 0x02
    98ee:	b3 81       	ldd	r27, Z+3	; 0x03
    98f0:	89 83       	std	Y+1, r24	; 0x01
    98f2:	9a 83       	std	Y+2, r25	; 0x02
    98f4:	ab 83       	std	Y+3, r26	; 0x03
    98f6:	bc 83       	std	Y+4, r27	; 0x04
    98f8:	88 85       	ldd	r24, Y+8	; 0x08
    98fa:	99 85       	ldd	r25, Y+9	; 0x09
    98fc:	80 3a       	cpi	r24, 0xA0	; 160
    98fe:	98 40       	sbci	r25, 0x08	; 8
    9900:	21 f4       	brne	.+8      	; 0x990a <usart_serial_init+0x5c>
    9902:	60 e1       	ldi	r22, 0x10	; 16
    9904:	83 e0       	ldi	r24, 0x03	; 3
    9906:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    990a:	88 85       	ldd	r24, Y+8	; 0x08
    990c:	99 85       	ldd	r25, Y+9	; 0x09
    990e:	80 3b       	cpi	r24, 0xB0	; 176
    9910:	98 40       	sbci	r25, 0x08	; 8
    9912:	21 f4       	brne	.+8      	; 0x991c <usart_serial_init+0x6e>
    9914:	60 e2       	ldi	r22, 0x20	; 32
    9916:	83 e0       	ldi	r24, 0x03	; 3
    9918:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    991c:	88 85       	ldd	r24, Y+8	; 0x08
    991e:	99 85       	ldd	r25, Y+9	; 0x09
    9920:	80 3a       	cpi	r24, 0xA0	; 160
    9922:	99 40       	sbci	r25, 0x09	; 9
    9924:	21 f4       	brne	.+8      	; 0x992e <usart_serial_init+0x80>
    9926:	60 e1       	ldi	r22, 0x10	; 16
    9928:	84 e0       	ldi	r24, 0x04	; 4
    992a:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    992e:	88 85       	ldd	r24, Y+8	; 0x08
    9930:	99 85       	ldd	r25, Y+9	; 0x09
    9932:	80 3b       	cpi	r24, 0xB0	; 176
    9934:	99 40       	sbci	r25, 0x09	; 9
    9936:	21 f4       	brne	.+8      	; 0x9940 <usart_serial_init+0x92>
    9938:	60 e2       	ldi	r22, 0x20	; 32
    993a:	84 e0       	ldi	r24, 0x04	; 4
    993c:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9940:	88 85       	ldd	r24, Y+8	; 0x08
    9942:	99 85       	ldd	r25, Y+9	; 0x09
    9944:	80 3a       	cpi	r24, 0xA0	; 160
    9946:	9a 40       	sbci	r25, 0x0A	; 10
    9948:	21 f4       	brne	.+8      	; 0x9952 <usart_serial_init+0xa4>
    994a:	60 e1       	ldi	r22, 0x10	; 16
    994c:	85 e0       	ldi	r24, 0x05	; 5
    994e:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9952:	88 85       	ldd	r24, Y+8	; 0x08
    9954:	99 85       	ldd	r25, Y+9	; 0x09
    9956:	80 3b       	cpi	r24, 0xB0	; 176
    9958:	9a 40       	sbci	r25, 0x0A	; 10
    995a:	21 f4       	brne	.+8      	; 0x9964 <usart_serial_init+0xb6>
    995c:	60 e2       	ldi	r22, 0x20	; 32
    995e:	85 e0       	ldi	r24, 0x05	; 5
    9960:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9964:	88 85       	ldd	r24, Y+8	; 0x08
    9966:	99 85       	ldd	r25, Y+9	; 0x09
    9968:	80 3a       	cpi	r24, 0xA0	; 160
    996a:	9b 40       	sbci	r25, 0x0B	; 11
    996c:	21 f4       	brne	.+8      	; 0x9976 <usart_serial_init+0xc8>
    996e:	60 e1       	ldi	r22, 0x10	; 16
    9970:	86 e0       	ldi	r24, 0x06	; 6
    9972:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9976:	88 85       	ldd	r24, Y+8	; 0x08
    9978:	99 85       	ldd	r25, Y+9	; 0x09
    997a:	80 3b       	cpi	r24, 0xB0	; 176
    997c:	9b 40       	sbci	r25, 0x0B	; 11
    997e:	21 f4       	brne	.+8      	; 0x9988 <usart_serial_init+0xda>
    9980:	60 e2       	ldi	r22, 0x20	; 32
    9982:	86 e0       	ldi	r24, 0x06	; 6
    9984:	0e 94 87 30 	call	0x610e	; 0x610e <sysclk_enable_module>
    9988:	88 85       	ldd	r24, Y+8	; 0x08
    998a:	99 85       	ldd	r25, Y+9	; 0x09
    998c:	9e 01       	movw	r18, r28
    998e:	2f 5f       	subi	r18, 0xFF	; 255
    9990:	3f 4f       	sbci	r19, 0xFF	; 255
    9992:	b9 01       	movw	r22, r18
    9994:	0f db       	rcall	.-2530   	; 0x8fb4 <usart_init_rs232>
    9996:	88 23       	and	r24, r24
    9998:	11 f0       	breq	.+4      	; 0x999e <usart_serial_init+0xf0>
    999a:	81 e0       	ldi	r24, 0x01	; 1
    999c:	01 c0       	rjmp	.+2      	; 0x99a0 <usart_serial_init+0xf2>
    999e:	80 e0       	ldi	r24, 0x00	; 0
    99a0:	2b 96       	adiw	r28, 0x0b	; 11
    99a2:	cd bf       	out	0x3d, r28	; 61
    99a4:	de bf       	out	0x3e, r29	; 62
    99a6:	df 91       	pop	r29
    99a8:	cf 91       	pop	r28
    99aa:	08 95       	ret

000099ac <usart_serial_putchar>:
    99ac:	cf 93       	push	r28
    99ae:	df 93       	push	r29
    99b0:	00 d0       	rcall	.+0      	; 0x99b2 <usart_serial_putchar+0x6>
    99b2:	cd b7       	in	r28, 0x3d	; 61
    99b4:	de b7       	in	r29, 0x3e	; 62
    99b6:	89 83       	std	Y+1, r24	; 0x01
    99b8:	9a 83       	std	Y+2, r25	; 0x02
    99ba:	6b 83       	std	Y+3, r22	; 0x03
    99bc:	89 81       	ldd	r24, Y+1	; 0x01
    99be:	9a 81       	ldd	r25, Y+2	; 0x02
    99c0:	6b 81       	ldd	r22, Y+3	; 0x03
    99c2:	3e db       	rcall	.-2436   	; 0x9040 <usart_putchar>
    99c4:	23 96       	adiw	r28, 0x03	; 3
    99c6:	cd bf       	out	0x3d, r28	; 61
    99c8:	de bf       	out	0x3e, r29	; 62
    99ca:	df 91       	pop	r29
    99cc:	cf 91       	pop	r28
    99ce:	08 95       	ret

000099d0 <usart_serial_getchar>:
    99d0:	cf 93       	push	r28
    99d2:	df 93       	push	r29
    99d4:	00 d0       	rcall	.+0      	; 0x99d6 <usart_serial_getchar+0x6>
    99d6:	1f 92       	push	r1
    99d8:	cd b7       	in	r28, 0x3d	; 61
    99da:	de b7       	in	r29, 0x3e	; 62
    99dc:	89 83       	std	Y+1, r24	; 0x01
    99de:	9a 83       	std	Y+2, r25	; 0x02
    99e0:	6b 83       	std	Y+3, r22	; 0x03
    99e2:	7c 83       	std	Y+4, r23	; 0x04
    99e4:	89 81       	ldd	r24, Y+1	; 0x01
    99e6:	9a 81       	ldd	r25, Y+2	; 0x02
    99e8:	49 db       	rcall	.-2414   	; 0x907c <usart_getchar>
    99ea:	28 2f       	mov	r18, r24
    99ec:	8b 81       	ldd	r24, Y+3	; 0x03
    99ee:	9c 81       	ldd	r25, Y+4	; 0x04
    99f0:	fc 01       	movw	r30, r24
    99f2:	20 83       	st	Z, r18
    99f4:	00 00       	nop
    99f6:	24 96       	adiw	r28, 0x04	; 4
    99f8:	cd bf       	out	0x3d, r28	; 61
    99fa:	de bf       	out	0x3e, r29	; 62
    99fc:	df 91       	pop	r29
    99fe:	cf 91       	pop	r28
    9a00:	08 95       	ret

00009a02 <stdio_serial_init>:
    9a02:	cf 93       	push	r28
    9a04:	df 93       	push	r29
    9a06:	00 d0       	rcall	.+0      	; 0x9a08 <stdio_serial_init+0x6>
    9a08:	1f 92       	push	r1
    9a0a:	cd b7       	in	r28, 0x3d	; 61
    9a0c:	de b7       	in	r29, 0x3e	; 62
    9a0e:	89 83       	std	Y+1, r24	; 0x01
    9a10:	9a 83       	std	Y+2, r25	; 0x02
    9a12:	6b 83       	std	Y+3, r22	; 0x03
    9a14:	7c 83       	std	Y+4, r23	; 0x04
    9a16:	89 81       	ldd	r24, Y+1	; 0x01
    9a18:	9a 81       	ldd	r25, Y+2	; 0x02
    9a1a:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <stdio_base>
    9a1e:	90 93 db 28 	sts	0x28DB, r25	; 0x8028db <stdio_base+0x1>
    9a22:	86 ed       	ldi	r24, 0xD6	; 214
    9a24:	9c e4       	ldi	r25, 0x4C	; 76
    9a26:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <ptr_put>
    9a2a:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <ptr_put+0x1>
    9a2e:	88 ee       	ldi	r24, 0xE8	; 232
    9a30:	9c e4       	ldi	r25, 0x4C	; 76
    9a32:	80 93 d6 28 	sts	0x28D6, r24	; 0x8028d6 <ptr_get>
    9a36:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <ptr_get+0x1>
    9a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    9a3c:	3c 81       	ldd	r19, Y+4	; 0x04
    9a3e:	89 81       	ldd	r24, Y+1	; 0x01
    9a40:	9a 81       	ldd	r25, Y+2	; 0x02
    9a42:	b9 01       	movw	r22, r18
    9a44:	34 df       	rcall	.-408    	; 0x98ae <usart_serial_init>
    9a46:	6a e0       	ldi	r22, 0x0A	; 10
    9a48:	71 e3       	ldi	r23, 0x31	; 49
    9a4a:	89 e2       	ldi	r24, 0x29	; 41
    9a4c:	91 e3       	ldi	r25, 0x31	; 49
    9a4e:	0e 94 c9 5c 	call	0xb992	; 0xb992 <fdevopen>
    9a52:	00 00       	nop
    9a54:	24 96       	adiw	r28, 0x04	; 4
    9a56:	cd bf       	out	0x3d, r28	; 61
    9a58:	de bf       	out	0x3e, r29	; 62
    9a5a:	df 91       	pop	r29
    9a5c:	cf 91       	pop	r28
    9a5e:	08 95       	ret

00009a60 <uart_init>:
    9a60:	cf 93       	push	r28
    9a62:	df 93       	push	r29
    9a64:	1f 92       	push	r1
    9a66:	1f 92       	push	r1
    9a68:	cd b7       	in	r28, 0x3d	; 61
    9a6a:	de b7       	in	r29, 0x3e	; 62
    9a6c:	89 83       	std	Y+1, r24	; 0x01
    9a6e:	9a 83       	std	Y+2, r25	; 0x02
    9a70:	89 81       	ldd	r24, Y+1	; 0x01
    9a72:	9a 81       	ldd	r25, Y+2	; 0x02
    9a74:	fc 01       	movw	r30, r24
    9a76:	86 81       	ldd	r24, Z+6	; 0x06
    9a78:	97 81       	ldd	r25, Z+7	; 0x07
    9a7a:	a0 85       	ldd	r26, Z+8	; 0x08
    9a7c:	b1 85       	ldd	r27, Z+9	; 0x09
    9a7e:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <usart_options.6991>
    9a82:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <usart_options.6991+0x1>
    9a86:	a0 93 0f 20 	sts	0x200F, r26	; 0x80200f <usart_options.6991+0x2>
    9a8a:	b0 93 10 20 	sts	0x2010, r27	; 0x802010 <usart_options.6991+0x3>
    9a8e:	89 81       	ldd	r24, Y+1	; 0x01
    9a90:	9a 81       	ldd	r25, Y+2	; 0x02
    9a92:	fc 01       	movw	r30, r24
    9a94:	80 81       	ld	r24, Z
    9a96:	91 81       	ldd	r25, Z+1	; 0x01
    9a98:	29 81       	ldd	r18, Y+1	; 0x01
    9a9a:	3a 81       	ldd	r19, Y+2	; 0x02
    9a9c:	f9 01       	movw	r30, r18
    9a9e:	20 81       	ld	r18, Z
    9aa0:	31 81       	ldd	r19, Z+1	; 0x01
    9aa2:	f9 01       	movw	r30, r18
    9aa4:	40 81       	ld	r20, Z
    9aa6:	29 81       	ldd	r18, Y+1	; 0x01
    9aa8:	3a 81       	ldd	r19, Y+2	; 0x02
    9aaa:	f9 01       	movw	r30, r18
    9aac:	25 81       	ldd	r18, Z+5	; 0x05
    9aae:	24 2b       	or	r18, r20
    9ab0:	fc 01       	movw	r30, r24
    9ab2:	20 83       	st	Z, r18
    9ab4:	89 81       	ldd	r24, Y+1	; 0x01
    9ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    9ab8:	fc 01       	movw	r30, r24
    9aba:	80 81       	ld	r24, Z
    9abc:	91 81       	ldd	r25, Z+1	; 0x01
    9abe:	29 81       	ldd	r18, Y+1	; 0x01
    9ac0:	3a 81       	ldd	r19, Y+2	; 0x02
    9ac2:	f9 01       	movw	r30, r18
    9ac4:	20 81       	ld	r18, Z
    9ac6:	31 81       	ldd	r19, Z+1	; 0x01
    9ac8:	f9 01       	movw	r30, r18
    9aca:	44 81       	ldd	r20, Z+4	; 0x04
    9acc:	29 81       	ldd	r18, Y+1	; 0x01
    9ace:	3a 81       	ldd	r19, Y+2	; 0x02
    9ad0:	f9 01       	movw	r30, r18
    9ad2:	25 81       	ldd	r18, Z+5	; 0x05
    9ad4:	24 2b       	or	r18, r20
    9ad6:	fc 01       	movw	r30, r24
    9ad8:	24 83       	std	Z+4, r18	; 0x04
    9ada:	89 81       	ldd	r24, Y+1	; 0x01
    9adc:	9a 81       	ldd	r25, Y+2	; 0x02
    9ade:	fc 01       	movw	r30, r24
    9ae0:	80 81       	ld	r24, Z
    9ae2:	91 81       	ldd	r25, Z+1	; 0x01
    9ae4:	29 81       	ldd	r18, Y+1	; 0x01
    9ae6:	3a 81       	ldd	r19, Y+2	; 0x02
    9ae8:	f9 01       	movw	r30, r18
    9aea:	20 81       	ld	r18, Z
    9aec:	31 81       	ldd	r19, Z+1	; 0x01
    9aee:	f9 01       	movw	r30, r18
    9af0:	20 81       	ld	r18, Z
    9af2:	42 2f       	mov	r20, r18
    9af4:	29 81       	ldd	r18, Y+1	; 0x01
    9af6:	3a 81       	ldd	r19, Y+2	; 0x02
    9af8:	f9 01       	movw	r30, r18
    9afa:	24 81       	ldd	r18, Z+4	; 0x04
    9afc:	20 95       	com	r18
    9afe:	24 23       	and	r18, r20
    9b00:	fc 01       	movw	r30, r24
    9b02:	20 83       	st	Z, r18
    9b04:	89 81       	ldd	r24, Y+1	; 0x01
    9b06:	9a 81       	ldd	r25, Y+2	; 0x02
    9b08:	fc 01       	movw	r30, r24
    9b0a:	82 81       	ldd	r24, Z+2	; 0x02
    9b0c:	93 81       	ldd	r25, Z+3	; 0x03
    9b0e:	37 dd       	rcall	.-1426   	; 0x957e <sysclk_enable_peripheral_clock>
    9b10:	89 81       	ldd	r24, Y+1	; 0x01
    9b12:	9a 81       	ldd	r25, Y+2	; 0x02
    9b14:	fc 01       	movw	r30, r24
    9b16:	82 81       	ldd	r24, Z+2	; 0x02
    9b18:	93 81       	ldd	r25, Z+3	; 0x03
    9b1a:	6d e0       	ldi	r22, 0x0D	; 13
    9b1c:	70 e2       	ldi	r23, 0x20	; 32
    9b1e:	c7 de       	rcall	.-626    	; 0x98ae <usart_serial_init>
    9b20:	00 00       	nop
    9b22:	0f 90       	pop	r0
    9b24:	0f 90       	pop	r0
    9b26:	df 91       	pop	r29
    9b28:	cf 91       	pop	r28
    9b2a:	08 95       	ret

00009b2c <uart_terminal_init>:

void uart_terminal_init()
{
    9b2c:	cf 93       	push	r28
    9b2e:	df 93       	push	r29
    9b30:	cd b7       	in	r28, 0x3d	; 61
    9b32:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    9b34:	80 ea       	ldi	r24, 0xA0	; 160
    9b36:	9a e0       	ldi	r25, 0x0A	; 10
    9b38:	22 dd       	rcall	.-1468   	; 0x957e <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    9b3a:	80 e8       	ldi	r24, 0x80	; 128
    9b3c:	96 e0       	ldi	r25, 0x06	; 6
    9b3e:	20 e8       	ldi	r18, 0x80	; 128
    9b40:	36 e0       	ldi	r19, 0x06	; 6
    9b42:	f9 01       	movw	r30, r18
    9b44:	20 81       	ld	r18, Z
    9b46:	28 60       	ori	r18, 0x08	; 8
    9b48:	fc 01       	movw	r30, r24
    9b4a:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    9b4c:	64 e1       	ldi	r22, 0x14	; 20
    9b4e:	70 e2       	ldi	r23, 0x20	; 32
    9b50:	80 ea       	ldi	r24, 0xA0	; 160
    9b52:	9a e0       	ldi	r25, 0x0A	; 10
    9b54:	56 df       	rcall	.-340    	; 0x9a02 <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    9b56:	8e e3       	ldi	r24, 0x3E	; 62
    9b58:	92 e2       	ldi	r25, 0x22	; 34
    9b5a:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
		printf("UART Initialized\n");
    9b5e:	83 e6       	ldi	r24, 0x63	; 99
    9b60:	92 e2       	ldi	r25, 0x22	; 34
    9b62:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
	}
}
    9b66:	00 00       	nop
    9b68:	df 91       	pop	r29
    9b6a:	cf 91       	pop	r28
    9b6c:	08 95       	ret

00009b6e <sysclk_get_main_hz>:
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    9b6e:	cf 93       	push	r28
    9b70:	df 93       	push	r29
    9b72:	cd b7       	in	r28, 0x3d	; 61
    9b74:	de b7       	in	r29, 0x3e	; 62
    9b76:	80 e0       	ldi	r24, 0x00	; 0
    9b78:	9c e6       	ldi	r25, 0x6C	; 108
    9b7a:	ac ed       	ldi	r26, 0xDC	; 220
    9b7c:	b2 e0       	ldi	r27, 0x02	; 2
    9b7e:	bc 01       	movw	r22, r24
    9b80:	cd 01       	movw	r24, r26
    9b82:	df 91       	pop	r29
    9b84:	cf 91       	pop	r28
    9b86:	08 95       	ret

00009b88 <sysclk_get_per4_hz>:
    9b88:	cf 93       	push	r28
    9b8a:	df 93       	push	r29
    9b8c:	1f 92       	push	r1
    9b8e:	cd b7       	in	r28, 0x3d	; 61
    9b90:	de b7       	in	r29, 0x3e	; 62
    9b92:	19 82       	std	Y+1, r1	; 0x01
    9b94:	ec df       	rcall	.-40     	; 0x9b6e <sysclk_get_main_hz>
    9b96:	dc 01       	movw	r26, r24
    9b98:	cb 01       	movw	r24, r22
    9b9a:	29 81       	ldd	r18, Y+1	; 0x01
    9b9c:	22 2f       	mov	r18, r18
    9b9e:	30 e0       	ldi	r19, 0x00	; 0
    9ba0:	04 c0       	rjmp	.+8      	; 0x9baa <sysclk_get_per4_hz+0x22>
    9ba2:	b6 95       	lsr	r27
    9ba4:	a7 95       	ror	r26
    9ba6:	97 95       	ror	r25
    9ba8:	87 95       	ror	r24
    9baa:	2a 95       	dec	r18
    9bac:	d2 f7       	brpl	.-12     	; 0x9ba2 <sysclk_get_per4_hz+0x1a>
    9bae:	bc 01       	movw	r22, r24
    9bb0:	cd 01       	movw	r24, r26
    9bb2:	0f 90       	pop	r0
    9bb4:	df 91       	pop	r29
    9bb6:	cf 91       	pop	r28
    9bb8:	08 95       	ret

00009bba <sysclk_get_per2_hz>:
    9bba:	cf 93       	push	r28
    9bbc:	df 93       	push	r29
    9bbe:	cd b7       	in	r28, 0x3d	; 61
    9bc0:	de b7       	in	r29, 0x3e	; 62
    9bc2:	e2 df       	rcall	.-60     	; 0x9b88 <sysclk_get_per4_hz>
    9bc4:	dc 01       	movw	r26, r24
    9bc6:	cb 01       	movw	r24, r22
    9bc8:	bc 01       	movw	r22, r24
    9bca:	cd 01       	movw	r24, r26
    9bcc:	df 91       	pop	r29
    9bce:	cf 91       	pop	r28
    9bd0:	08 95       	ret

00009bd2 <sysclk_get_per_hz>:
    9bd2:	cf 93       	push	r28
    9bd4:	df 93       	push	r29
    9bd6:	cd b7       	in	r28, 0x3d	; 61
    9bd8:	de b7       	in	r29, 0x3e	; 62
    9bda:	ef df       	rcall	.-34     	; 0x9bba <sysclk_get_per2_hz>
    9bdc:	dc 01       	movw	r26, r24
    9bde:	cb 01       	movw	r24, r22
    9be0:	bc 01       	movw	r22, r24
    9be2:	cd 01       	movw	r24, r26
    9be4:	df 91       	pop	r29
    9be6:	cf 91       	pop	r28
    9be8:	08 95       	ret

00009bea <sysclk_get_cpu_hz>:
    9bea:	cf 93       	push	r28
    9bec:	df 93       	push	r29
    9bee:	cd b7       	in	r28, 0x3d	; 61
    9bf0:	de b7       	in	r29, 0x3e	; 62
    9bf2:	ef df       	rcall	.-34     	; 0x9bd2 <sysclk_get_per_hz>
    9bf4:	dc 01       	movw	r26, r24
    9bf6:	cb 01       	movw	r24, r22
    9bf8:	bc 01       	movw	r22, r24
    9bfa:	cd 01       	movw	r24, r26
    9bfc:	df 91       	pop	r29
    9bfe:	cf 91       	pop	r28
    9c00:	08 95       	ret

00009c02 <__portable_avr_delay_cycles>:
    9c02:	04 c0       	rjmp	.+8      	; 0x9c0c <__portable_avr_delay_cycles+0xa>
    9c04:	61 50       	subi	r22, 0x01	; 1
    9c06:	71 09       	sbc	r23, r1
    9c08:	81 09       	sbc	r24, r1
    9c0a:	91 09       	sbc	r25, r1
    9c0c:	61 15       	cp	r22, r1
    9c0e:	71 05       	cpc	r23, r1
    9c10:	81 05       	cpc	r24, r1
    9c12:	91 05       	cpc	r25, r1
    9c14:	b9 f7       	brne	.-18     	; 0x9c04 <__portable_avr_delay_cycles+0x2>
    9c16:	08 95       	ret

00009c18 <pmic_init>:
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29
    9c1c:	cd b7       	in	r28, 0x3d	; 61
    9c1e:	de b7       	in	r29, 0x3e	; 62
    9c20:	80 ea       	ldi	r24, 0xA0	; 160
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	27 e0       	ldi	r18, 0x07	; 7
    9c26:	fc 01       	movw	r30, r24
    9c28:	22 83       	std	Z+2, r18	; 0x02
    9c2a:	00 00       	nop
    9c2c:	df 91       	pop	r29
    9c2e:	cf 91       	pop	r28
    9c30:	08 95       	ret

00009c32 <pmic_set_scheduling>:
    9c32:	cf 93       	push	r28
    9c34:	df 93       	push	r29
    9c36:	1f 92       	push	r1
    9c38:	cd b7       	in	r28, 0x3d	; 61
    9c3a:	de b7       	in	r29, 0x3e	; 62
    9c3c:	89 83       	std	Y+1, r24	; 0x01
    9c3e:	89 81       	ldd	r24, Y+1	; 0x01
    9c40:	88 2f       	mov	r24, r24
    9c42:	90 e0       	ldi	r25, 0x00	; 0
    9c44:	00 97       	sbiw	r24, 0x00	; 0
    9c46:	19 f0       	breq	.+6      	; 0x9c4e <pmic_set_scheduling+0x1c>
    9c48:	01 97       	sbiw	r24, 0x01	; 1
    9c4a:	79 f0       	breq	.+30     	; 0x9c6a <pmic_set_scheduling+0x38>
    9c4c:	18 c0       	rjmp	.+48     	; 0x9c7e <pmic_set_scheduling+0x4c>
    9c4e:	80 ea       	ldi	r24, 0xA0	; 160
    9c50:	90 e0       	ldi	r25, 0x00	; 0
    9c52:	20 ea       	ldi	r18, 0xA0	; 160
    9c54:	30 e0       	ldi	r19, 0x00	; 0
    9c56:	f9 01       	movw	r30, r18
    9c58:	22 81       	ldd	r18, Z+2	; 0x02
    9c5a:	2f 77       	andi	r18, 0x7F	; 127
    9c5c:	fc 01       	movw	r30, r24
    9c5e:	22 83       	std	Z+2, r18	; 0x02
    9c60:	80 ea       	ldi	r24, 0xA0	; 160
    9c62:	90 e0       	ldi	r25, 0x00	; 0
    9c64:	fc 01       	movw	r30, r24
    9c66:	11 82       	std	Z+1, r1	; 0x01
    9c68:	0a c0       	rjmp	.+20     	; 0x9c7e <pmic_set_scheduling+0x4c>
    9c6a:	80 ea       	ldi	r24, 0xA0	; 160
    9c6c:	90 e0       	ldi	r25, 0x00	; 0
    9c6e:	20 ea       	ldi	r18, 0xA0	; 160
    9c70:	30 e0       	ldi	r19, 0x00	; 0
    9c72:	f9 01       	movw	r30, r18
    9c74:	22 81       	ldd	r18, Z+2	; 0x02
    9c76:	20 68       	ori	r18, 0x80	; 128
    9c78:	fc 01       	movw	r30, r24
    9c7a:	22 83       	std	Z+2, r18	; 0x02
    9c7c:	00 00       	nop
    9c7e:	00 00       	nop
    9c80:	0f 90       	pop	r0
    9c82:	df 91       	pop	r29
    9c84:	cf 91       	pop	r28
    9c86:	08 95       	ret

00009c88 <fs_0>:

//#include "asf.h"
void fs_0()
{
    9c88:	cf 93       	push	r28
    9c8a:	df 93       	push	r29
    9c8c:	cd b7       	in	r28, 0x3d	; 61
    9c8e:	de b7       	in	r29, 0x3e	; 62
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
    9c90:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <velocity>
    9c94:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <velocity+0x1>
    9c98:	a0 91 3a 23 	lds	r26, 0x233A	; 0x80233a <velocity+0x2>
    9c9c:	b0 91 3b 23 	lds	r27, 0x233B	; 0x80233b <velocity+0x3>
    9ca0:	20 e0       	ldi	r18, 0x00	; 0
    9ca2:	30 e0       	ldi	r19, 0x00	; 0
    9ca4:	40 e0       	ldi	r20, 0x00	; 0
    9ca6:	50 e4       	ldi	r21, 0x40	; 64
    9ca8:	bc 01       	movw	r22, r24
    9caa:	cd 01       	movw	r24, r26
    9cac:	9b d6       	rcall	.+3382   	; 0xa9e4 <__gesf2>
    9cae:	18 16       	cp	r1, r24
    9cb0:	0c f0       	brlt	.+2      	; 0x9cb4 <fs_0+0x2c>
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    9cb2:	62 c0       	rjmp	.+196    	; 0x9d78 <fs_0+0xf0>
//#include "asf.h"
void fs_0()
{
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
    9cb4:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <accZ>
    9cb8:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <accZ+0x1>
    9cbc:	a0 91 19 23 	lds	r26, 0x2319	; 0x802319 <accZ+0x2>
    9cc0:	b0 91 1a 23 	lds	r27, 0x231A	; 0x80231a <accZ+0x3>
    9cc4:	20 e0       	ldi	r18, 0x00	; 0
    9cc6:	30 e0       	ldi	r19, 0x00	; 0
    9cc8:	40 ea       	ldi	r20, 0xA0	; 160
    9cca:	50 e4       	ldi	r21, 0x40	; 64
    9ccc:	bc 01       	movw	r22, r24
    9cce:	cd 01       	movw	r24, r26
    9cd0:	89 d6       	rcall	.+3346   	; 0xa9e4 <__gesf2>
    9cd2:	18 16       	cp	r1, r24
    9cd4:	0c f0       	brlt	.+2      	; 0x9cd8 <fs_0+0x50>
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    9cd6:	50 c0       	rjmp	.+160    	; 0x9d78 <fs_0+0xf0>
void fs_0()
{
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
    9cd8:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    9cdc:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    9ce0:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    9ce4:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    9ce8:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    9cec:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    9cf0:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    9cf4:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    9cf8:	bc 01       	movw	r22, r24
    9cfa:	cd 01       	movw	r24, r26
    9cfc:	37 d4       	rcall	.+2158   	; 0xa56c <__subsf3>
    9cfe:	dc 01       	movw	r26, r24
    9d00:	cb 01       	movw	r24, r22
    9d02:	bc 01       	movw	r22, r24
    9d04:	cd 01       	movw	r24, r26
    9d06:	3d d5       	rcall	.+2682   	; 0xa782 <__fixsfsi>
    9d08:	dc 01       	movw	r26, r24
    9d0a:	cb 01       	movw	r24, r22
    9d0c:	82 3f       	cpi	r24, 0xF2	; 242
    9d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d10:	9c f1       	brlt	.+102    	; 0x9d78 <fs_0+0xf0>
    9d12:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    9d16:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    9d1a:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    9d1e:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    9d22:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    9d26:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    9d2a:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    9d2e:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    9d32:	bc 01       	movw	r22, r24
    9d34:	cd 01       	movw	r24, r26
    9d36:	1a d4       	rcall	.+2100   	; 0xa56c <__subsf3>
    9d38:	dc 01       	movw	r26, r24
    9d3a:	cb 01       	movw	r24, r22
    9d3c:	bc 01       	movw	r22, r24
    9d3e:	cd 01       	movw	r24, r26
    9d40:	20 d5       	rcall	.+2624   	; 0xa782 <__fixsfsi>
    9d42:	dc 01       	movw	r26, r24
    9d44:	cb 01       	movw	r24, r22
    9d46:	0f 97       	sbiw	r24, 0x0f	; 15
    9d48:	bc f4       	brge	.+46     	; 0x9d78 <fs_0+0xf0>
		&& altitude > FS0_MIN_ALTITUDE)
    9d4a:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <altitude>
    9d4e:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <altitude+0x1>
    9d52:	a0 91 43 23 	lds	r26, 0x2343	; 0x802343 <altitude+0x2>
    9d56:	b0 91 44 23 	lds	r27, 0x2344	; 0x802344 <altitude+0x3>
    9d5a:	20 e0       	ldi	r18, 0x00	; 0
    9d5c:	30 e0       	ldi	r19, 0x00	; 0
    9d5e:	40 e2       	ldi	r20, 0x20	; 32
    9d60:	52 e4       	ldi	r21, 0x42	; 66
    9d62:	bc 01       	movw	r22, r24
    9d64:	cd 01       	movw	r24, r26
    9d66:	3e d6       	rcall	.+3196   	; 0xa9e4 <__gesf2>
    9d68:	18 16       	cp	r1, r24
    9d6a:	0c f0       	brlt	.+2      	; 0x9d6e <fs_0+0xe6>
	{
			flightState ++;
	}
}
    9d6c:	05 c0       	rjmp	.+10     	; 0x9d78 <fs_0+0xf0>
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
    9d6e:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <flightState>
    9d72:	8f 5f       	subi	r24, 0xFF	; 255
    9d74:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <flightState>
	}
}
    9d78:	00 00       	nop
    9d7a:	df 91       	pop	r29
    9d7c:	cf 91       	pop	r28
    9d7e:	08 95       	ret

00009d80 <fs_1>:

void fs_1()
{
    9d80:	cf 93       	push	r28
    9d82:	df 93       	push	r29
    9d84:	cd b7       	in	r28, 0x3d	; 61
    9d86:	de b7       	in	r29, 0x3e	; 62
	// get vertical velocity
	// see if we've found a peak vertical velocity
	// we auto-deploy
	// move to next flight state
	if(velocity < FS1_MAX_VEL 
    9d88:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <velocity>
    9d8c:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <velocity+0x1>
    9d90:	a0 91 3a 23 	lds	r26, 0x233A	; 0x80233a <velocity+0x2>
    9d94:	b0 91 3b 23 	lds	r27, 0x233B	; 0x80233b <velocity+0x3>
    9d98:	20 e0       	ldi	r18, 0x00	; 0
    9d9a:	30 e0       	ldi	r19, 0x00	; 0
    9d9c:	40 e0       	ldi	r20, 0x00	; 0
    9d9e:	50 ec       	ldi	r21, 0xC0	; 192
    9da0:	bc 01       	movw	r22, r24
    9da2:	cd 01       	movw	r24, r26
    9da4:	48 d4       	rcall	.+2192   	; 0xa636 <__cmpsf2>
    9da6:	88 23       	and	r24, r24
    9da8:	0c f0       	brlt	.+2      	; 0x9dac <fs_1+0x2c>
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
		&& altitude > FS1_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    9daa:	83 c0       	rjmp	.+262    	; 0x9eb2 <fs_1+0x132>
	// get vertical velocity
	// see if we've found a peak vertical velocity
	// we auto-deploy
	// move to next flight state
	if(velocity < FS1_MAX_VEL 
		&& abs(accZ - 9.8) < FS1_MAX_ACCEL  
    9dac:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <accZ>
    9db0:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <accZ+0x1>
    9db4:	a0 91 19 23 	lds	r26, 0x2319	; 0x802319 <accZ+0x2>
    9db8:	b0 91 1a 23 	lds	r27, 0x231A	; 0x80231a <accZ+0x3>
    9dbc:	2d ec       	ldi	r18, 0xCD	; 205
    9dbe:	3c ec       	ldi	r19, 0xCC	; 204
    9dc0:	4c e1       	ldi	r20, 0x1C	; 28
    9dc2:	51 e4       	ldi	r21, 0x41	; 65
    9dc4:	bc 01       	movw	r22, r24
    9dc6:	cd 01       	movw	r24, r26
    9dc8:	d1 d3       	rcall	.+1954   	; 0xa56c <__subsf3>
    9dca:	dc 01       	movw	r26, r24
    9dcc:	cb 01       	movw	r24, r22
    9dce:	bc 01       	movw	r22, r24
    9dd0:	cd 01       	movw	r24, r26
    9dd2:	d7 d4       	rcall	.+2478   	; 0xa782 <__fixsfsi>
    9dd4:	dc 01       	movw	r26, r24
    9dd6:	cb 01       	movw	r24, r22
    9dd8:	8f 3f       	cpi	r24, 0xFF	; 255
    9dda:	9f 4f       	sbci	r25, 0xFF	; 255
    9ddc:	0c f4       	brge	.+2      	; 0x9de0 <fs_1+0x60>
    9dde:	69 c0       	rjmp	.+210    	; 0x9eb2 <fs_1+0x132>
    9de0:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <accZ>
    9de4:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <accZ+0x1>
    9de8:	a0 91 19 23 	lds	r26, 0x2319	; 0x802319 <accZ+0x2>
    9dec:	b0 91 1a 23 	lds	r27, 0x231A	; 0x80231a <accZ+0x3>
    9df0:	2d ec       	ldi	r18, 0xCD	; 205
    9df2:	3c ec       	ldi	r19, 0xCC	; 204
    9df4:	4c e1       	ldi	r20, 0x1C	; 28
    9df6:	51 e4       	ldi	r21, 0x41	; 65
    9df8:	bc 01       	movw	r22, r24
    9dfa:	cd 01       	movw	r24, r26
    9dfc:	b7 d3       	rcall	.+1902   	; 0xa56c <__subsf3>
    9dfe:	dc 01       	movw	r26, r24
    9e00:	cb 01       	movw	r24, r22
    9e02:	bc 01       	movw	r22, r24
    9e04:	cd 01       	movw	r24, r26
    9e06:	bd d4       	rcall	.+2426   	; 0xa782 <__fixsfsi>
    9e08:	dc 01       	movw	r26, r24
    9e0a:	cb 01       	movw	r24, r22
    9e0c:	02 97       	sbiw	r24, 0x02	; 2
    9e0e:	0c f0       	brlt	.+2      	; 0x9e12 <fs_1+0x92>
    9e10:	50 c0       	rjmp	.+160    	; 0x9eb2 <fs_1+0x132>
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
    9e12:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    9e16:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    9e1a:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    9e1e:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    9e22:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    9e26:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    9e2a:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    9e2e:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    9e32:	bc 01       	movw	r22, r24
    9e34:	cd 01       	movw	r24, r26
    9e36:	9a d3       	rcall	.+1844   	; 0xa56c <__subsf3>
    9e38:	dc 01       	movw	r26, r24
    9e3a:	cb 01       	movw	r24, r22
    9e3c:	bc 01       	movw	r22, r24
    9e3e:	cd 01       	movw	r24, r26
    9e40:	a0 d4       	rcall	.+2368   	; 0xa782 <__fixsfsi>
    9e42:	dc 01       	movw	r26, r24
    9e44:	cb 01       	movw	r24, r22
    9e46:	8f 3c       	cpi	r24, 0xCF	; 207
    9e48:	9f 4f       	sbci	r25, 0xFF	; 255
    9e4a:	9c f1       	brlt	.+102    	; 0x9eb2 <fs_1+0x132>
    9e4c:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    9e50:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    9e54:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    9e58:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    9e5c:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    9e60:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    9e64:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    9e68:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    9e6c:	bc 01       	movw	r22, r24
    9e6e:	cd 01       	movw	r24, r26
    9e70:	7d d3       	rcall	.+1786   	; 0xa56c <__subsf3>
    9e72:	dc 01       	movw	r26, r24
    9e74:	cb 01       	movw	r24, r22
    9e76:	bc 01       	movw	r22, r24
    9e78:	cd 01       	movw	r24, r26
    9e7a:	83 d4       	rcall	.+2310   	; 0xa782 <__fixsfsi>
    9e7c:	dc 01       	movw	r26, r24
    9e7e:	cb 01       	movw	r24, r22
    9e80:	c2 97       	sbiw	r24, 0x32	; 50
    9e82:	bc f4       	brge	.+46     	; 0x9eb2 <fs_1+0x132>
		&& altitude > FS1_MIN_ALTITUDE)
    9e84:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <altitude>
    9e88:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <altitude+0x1>
    9e8c:	a0 91 43 23 	lds	r26, 0x2343	; 0x802343 <altitude+0x2>
    9e90:	b0 91 44 23 	lds	r27, 0x2344	; 0x802344 <altitude+0x3>
    9e94:	20 e0       	ldi	r18, 0x00	; 0
    9e96:	30 e0       	ldi	r19, 0x00	; 0
    9e98:	40 e2       	ldi	r20, 0x20	; 32
    9e9a:	51 e4       	ldi	r21, 0x41	; 65
    9e9c:	bc 01       	movw	r22, r24
    9e9e:	cd 01       	movw	r24, r26
    9ea0:	a1 d5       	rcall	.+2882   	; 0xa9e4 <__gesf2>
    9ea2:	18 16       	cp	r1, r24
    9ea4:	0c f0       	brlt	.+2      	; 0x9ea8 <fs_1+0x128>
	{
			flightState ++;
	}
}
    9ea6:	05 c0       	rjmp	.+10     	; 0x9eb2 <fs_1+0x132>
	if(velocity < FS1_MAX_VEL 
		&& abs(accZ - 9.8) < FS1_MAX_ACCEL  
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
		&& altitude > FS1_MIN_ALTITUDE)
	{
			flightState ++;
    9ea8:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <flightState>
    9eac:	8f 5f       	subi	r24, 0xFF	; 255
    9eae:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <flightState>
	}
}
    9eb2:	00 00       	nop
    9eb4:	df 91       	pop	r29
    9eb6:	cf 91       	pop	r28
    9eb8:	08 95       	ret

00009eba <fs_2>:
void fs_2()
{
    9eba:	cf 93       	push	r28
    9ebc:	df 93       	push	r29
    9ebe:	cd b7       	in	r28, 0x3d	; 61
    9ec0:	de b7       	in	r29, 0x3e	; 62
	// make sure our velocity is nominal
	// if altitude is just above 450m, trigger servo for deployment (time servo and deployment to see how long it takes for umbilical to disconnect?)
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
    9ec2:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <velocity>
    9ec6:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <velocity+0x1>
    9eca:	a0 91 3a 23 	lds	r26, 0x233A	; 0x80233a <velocity+0x2>
    9ece:	b0 91 3b 23 	lds	r27, 0x233B	; 0x80233b <velocity+0x3>
    9ed2:	20 e0       	ldi	r18, 0x00	; 0
    9ed4:	30 e0       	ldi	r19, 0x00	; 0
    9ed6:	40 e0       	ldi	r20, 0x00	; 0
    9ed8:	50 e4       	ldi	r21, 0x40	; 64
    9eda:	bc 01       	movw	r22, r24
    9edc:	cd 01       	movw	r24, r26
    9ede:	82 d5       	rcall	.+2820   	; 0xa9e4 <__gesf2>
    9ee0:	18 16       	cp	r1, r24
    9ee2:	0c f0       	brlt	.+2      	; 0x9ee6 <fs_2+0x2c>
		&& altitude < FS2_MAX_ALTITUDE)
	{
			set_servo(100);
			flightState ++;
	}
}
    9ee4:	66 c0       	rjmp	.+204    	; 0x9fb2 <fs_2+0xf8>
	// if altitude is just above 450m, trigger servo for deployment (time servo and deployment to see how long it takes for umbilical to disconnect?)
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
    9ee6:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <accZ>
    9eea:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <accZ+0x1>
    9eee:	a0 91 19 23 	lds	r26, 0x2319	; 0x802319 <accZ+0x2>
    9ef2:	b0 91 1a 23 	lds	r27, 0x231A	; 0x80231a <accZ+0x3>
    9ef6:	20 e0       	ldi	r18, 0x00	; 0
    9ef8:	30 e0       	ldi	r19, 0x00	; 0
    9efa:	40 ea       	ldi	r20, 0xA0	; 160
    9efc:	50 ec       	ldi	r21, 0xC0	; 192
    9efe:	bc 01       	movw	r22, r24
    9f00:	cd 01       	movw	r24, r26
    9f02:	70 d5       	rcall	.+2784   	; 0xa9e4 <__gesf2>
    9f04:	18 16       	cp	r1, r24
    9f06:	0c f0       	brlt	.+2      	; 0x9f0a <fs_2+0x50>
		&& altitude < FS2_MAX_ALTITUDE)
	{
			set_servo(100);
			flightState ++;
	}
}
    9f08:	54 c0       	rjmp	.+168    	; 0x9fb2 <fs_2+0xf8>
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
		&& abs(accelHeight - altitude) < FS2_MAX_HEIGHT_DRIFT 
    9f0a:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    9f0e:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    9f12:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    9f16:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    9f1a:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    9f1e:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    9f22:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    9f26:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    9f2a:	bc 01       	movw	r22, r24
    9f2c:	cd 01       	movw	r24, r26
    9f2e:	1e d3       	rcall	.+1596   	; 0xa56c <__subsf3>
    9f30:	dc 01       	movw	r26, r24
    9f32:	cb 01       	movw	r24, r22
    9f34:	bc 01       	movw	r22, r24
    9f36:	cd 01       	movw	r24, r26
    9f38:	24 d4       	rcall	.+2120   	; 0xa782 <__fixsfsi>
    9f3a:	dc 01       	movw	r26, r24
    9f3c:	cb 01       	movw	r24, r22
    9f3e:	8f 3c       	cpi	r24, 0xCF	; 207
    9f40:	9f 4f       	sbci	r25, 0xFF	; 255
    9f42:	bc f1       	brlt	.+110    	; 0x9fb2 <fs_2+0xf8>
    9f44:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    9f48:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    9f4c:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    9f50:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    9f54:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    9f58:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    9f5c:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    9f60:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    9f64:	bc 01       	movw	r22, r24
    9f66:	cd 01       	movw	r24, r26
    9f68:	01 d3       	rcall	.+1538   	; 0xa56c <__subsf3>
    9f6a:	dc 01       	movw	r26, r24
    9f6c:	cb 01       	movw	r24, r22
    9f6e:	bc 01       	movw	r22, r24
    9f70:	cd 01       	movw	r24, r26
    9f72:	07 d4       	rcall	.+2062   	; 0xa782 <__fixsfsi>
    9f74:	dc 01       	movw	r26, r24
    9f76:	cb 01       	movw	r24, r22
    9f78:	c2 97       	sbiw	r24, 0x32	; 50
    9f7a:	dc f4       	brge	.+54     	; 0x9fb2 <fs_2+0xf8>
		&& altitude < FS2_MAX_ALTITUDE)
    9f7c:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <altitude>
    9f80:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <altitude+0x1>
    9f84:	a0 91 43 23 	lds	r26, 0x2343	; 0x802343 <altitude+0x2>
    9f88:	b0 91 44 23 	lds	r27, 0x2344	; 0x802344 <altitude+0x3>
    9f8c:	20 e0       	ldi	r18, 0x00	; 0
    9f8e:	30 e0       	ldi	r19, 0x00	; 0
    9f90:	46 ee       	ldi	r20, 0xE6	; 230
    9f92:	53 e4       	ldi	r21, 0x43	; 67
    9f94:	bc 01       	movw	r22, r24
    9f96:	cd 01       	movw	r24, r26
    9f98:	4e d3       	rcall	.+1692   	; 0xa636 <__cmpsf2>
    9f9a:	88 23       	and	r24, r24
    9f9c:	0c f0       	brlt	.+2      	; 0x9fa0 <fs_2+0xe6>
	{
			set_servo(100);
			flightState ++;
	}
}
    9f9e:	09 c0       	rjmp	.+18     	; 0x9fb2 <fs_2+0xf8>
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
		&& abs(accelHeight - altitude) < FS2_MAX_HEIGHT_DRIFT 
		&& altitude < FS2_MAX_ALTITUDE)
	{
			set_servo(100);
    9fa0:	84 e6       	ldi	r24, 0x64	; 100
    9fa2:	90 e0       	ldi	r25, 0x00	; 0
    9fa4:	0e 94 8d 22 	call	0x451a	; 0x451a <set_servo>
			flightState ++;
    9fa8:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <flightState>
    9fac:	8f 5f       	subi	r24, 0xFF	; 255
    9fae:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <flightState>
	}
}
    9fb2:	00 00       	nop
    9fb4:	df 91       	pop	r29
    9fb6:	cf 91       	pop	r28
    9fb8:	08 95       	ret

00009fba <fs_3>:
void fs_3()
{
    9fba:	cf 93       	push	r28
    9fbc:	df 93       	push	r29
    9fbe:	cd b7       	in	r28, 0x3d	; 61
    9fc0:	de b7       	in	r29, 0x3e	; 62
	// get altitude and vertical velocity
	// check nominal velocity
	// if altitude is < 40m and velocity < 1 m/s -->> landed
	//   Turn buzzer on
	//   stop transmitting
	if(abs(velocity) < FS3_MAX_VEL 
    9fc2:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <velocity>
    9fc6:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <velocity+0x1>
    9fca:	a0 91 3a 23 	lds	r26, 0x233A	; 0x80233a <velocity+0x2>
    9fce:	b0 91 3b 23 	lds	r27, 0x233B	; 0x80233b <velocity+0x3>
    9fd2:	bc 01       	movw	r22, r24
    9fd4:	cd 01       	movw	r24, r26
    9fd6:	d5 d3       	rcall	.+1962   	; 0xa782 <__fixsfsi>
    9fd8:	dc 01       	movw	r26, r24
    9fda:	cb 01       	movw	r24, r22
    9fdc:	8e 3f       	cpi	r24, 0xFE	; 254
    9fde:	9f 4f       	sbci	r25, 0xFF	; 255
    9fe0:	0c f4       	brge	.+2      	; 0x9fe4 <fs_3+0x2a>
    9fe2:	81 c0       	rjmp	.+258    	; 0xa0e6 <fs_3+0x12c>
    9fe4:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <velocity>
    9fe8:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <velocity+0x1>
    9fec:	a0 91 3a 23 	lds	r26, 0x233A	; 0x80233a <velocity+0x2>
    9ff0:	b0 91 3b 23 	lds	r27, 0x233B	; 0x80233b <velocity+0x3>
    9ff4:	bc 01       	movw	r22, r24
    9ff6:	cd 01       	movw	r24, r26
    9ff8:	c4 d3       	rcall	.+1928   	; 0xa782 <__fixsfsi>
    9ffa:	dc 01       	movw	r26, r24
    9ffc:	cb 01       	movw	r24, r22
    9ffe:	03 97       	sbiw	r24, 0x03	; 3
    a000:	0c f0       	brlt	.+2      	; 0xa004 <fs_3+0x4a>
    a002:	71 c0       	rjmp	.+226    	; 0xa0e6 <fs_3+0x12c>
		&& abs(accZ) < FS3_MAX_ACCEL
    a004:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <accZ>
    a008:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <accZ+0x1>
    a00c:	a0 91 19 23 	lds	r26, 0x2319	; 0x802319 <accZ+0x2>
    a010:	b0 91 1a 23 	lds	r27, 0x231A	; 0x80231a <accZ+0x3>
    a014:	bc 01       	movw	r22, r24
    a016:	cd 01       	movw	r24, r26
    a018:	b4 d3       	rcall	.+1896   	; 0xa782 <__fixsfsi>
    a01a:	dc 01       	movw	r26, r24
    a01c:	cb 01       	movw	r24, r22
    a01e:	87 3f       	cpi	r24, 0xF7	; 247
    a020:	9f 4f       	sbci	r25, 0xFF	; 255
    a022:	0c f4       	brge	.+2      	; 0xa026 <fs_3+0x6c>
    a024:	60 c0       	rjmp	.+192    	; 0xa0e6 <fs_3+0x12c>
    a026:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <accZ>
    a02a:	90 91 18 23 	lds	r25, 0x2318	; 0x802318 <accZ+0x1>
    a02e:	a0 91 19 23 	lds	r26, 0x2319	; 0x802319 <accZ+0x2>
    a032:	b0 91 1a 23 	lds	r27, 0x231A	; 0x80231a <accZ+0x3>
    a036:	bc 01       	movw	r22, r24
    a038:	cd 01       	movw	r24, r26
    a03a:	a3 d3       	rcall	.+1862   	; 0xa782 <__fixsfsi>
    a03c:	dc 01       	movw	r26, r24
    a03e:	cb 01       	movw	r24, r22
    a040:	0a 97       	sbiw	r24, 0x0a	; 10
    a042:	0c f0       	brlt	.+2      	; 0xa046 <fs_3+0x8c>
    a044:	50 c0       	rjmp	.+160    	; 0xa0e6 <fs_3+0x12c>
		&& abs(accelHeight - altitude) < FS3_MAX_HEIGHT_DRIFT
    a046:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    a04a:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    a04e:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    a052:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    a056:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    a05a:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    a05e:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    a062:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    a066:	bc 01       	movw	r22, r24
    a068:	cd 01       	movw	r24, r26
    a06a:	80 d2       	rcall	.+1280   	; 0xa56c <__subsf3>
    a06c:	dc 01       	movw	r26, r24
    a06e:	cb 01       	movw	r24, r22
    a070:	bc 01       	movw	r22, r24
    a072:	cd 01       	movw	r24, r26
    a074:	86 d3       	rcall	.+1804   	; 0xa782 <__fixsfsi>
    a076:	dc 01       	movw	r26, r24
    a078:	cb 01       	movw	r24, r22
    a07a:	8f 3c       	cpi	r24, 0xCF	; 207
    a07c:	9f 4f       	sbci	r25, 0xFF	; 255
    a07e:	9c f1       	brlt	.+102    	; 0xa0e6 <fs_3+0x12c>
    a080:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <accelHeight>
    a084:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <accelHeight+0x1>
    a088:	a0 91 15 23 	lds	r26, 0x2315	; 0x802315 <accelHeight+0x2>
    a08c:	b0 91 16 23 	lds	r27, 0x2316	; 0x802316 <accelHeight+0x3>
    a090:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <altitude>
    a094:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <altitude+0x1>
    a098:	40 91 43 23 	lds	r20, 0x2343	; 0x802343 <altitude+0x2>
    a09c:	50 91 44 23 	lds	r21, 0x2344	; 0x802344 <altitude+0x3>
    a0a0:	bc 01       	movw	r22, r24
    a0a2:	cd 01       	movw	r24, r26
    a0a4:	63 d2       	rcall	.+1222   	; 0xa56c <__subsf3>
    a0a6:	dc 01       	movw	r26, r24
    a0a8:	cb 01       	movw	r24, r22
    a0aa:	bc 01       	movw	r22, r24
    a0ac:	cd 01       	movw	r24, r26
    a0ae:	69 d3       	rcall	.+1746   	; 0xa782 <__fixsfsi>
    a0b0:	dc 01       	movw	r26, r24
    a0b2:	cb 01       	movw	r24, r22
    a0b4:	c2 97       	sbiw	r24, 0x32	; 50
    a0b6:	bc f4       	brge	.+46     	; 0xa0e6 <fs_3+0x12c>
		&& altitude > FS3_MAX_ALTITUDE)
    a0b8:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <altitude>
    a0bc:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <altitude+0x1>
    a0c0:	a0 91 43 23 	lds	r26, 0x2343	; 0x802343 <altitude+0x2>
    a0c4:	b0 91 44 23 	lds	r27, 0x2344	; 0x802344 <altitude+0x3>
    a0c8:	20 e0       	ldi	r18, 0x00	; 0
    a0ca:	30 e0       	ldi	r19, 0x00	; 0
    a0cc:	40 ea       	ldi	r20, 0xA0	; 160
    a0ce:	52 e4       	ldi	r21, 0x42	; 66
    a0d0:	bc 01       	movw	r22, r24
    a0d2:	cd 01       	movw	r24, r26
    a0d4:	87 d4       	rcall	.+2318   	; 0xa9e4 <__gesf2>
    a0d6:	18 16       	cp	r1, r24
    a0d8:	0c f0       	brlt	.+2      	; 0xa0dc <fs_3+0x122>
	{
			buzz_on();
			blockTransmission = true;
	}
}
    a0da:	05 c0       	rjmp	.+10     	; 0xa0e6 <fs_3+0x12c>
	if(abs(velocity) < FS3_MAX_VEL 
		&& abs(accZ) < FS3_MAX_ACCEL
		&& abs(accelHeight - altitude) < FS3_MAX_HEIGHT_DRIFT
		&& altitude > FS3_MAX_ALTITUDE)
	{
			buzz_on();
    a0dc:	0e 94 b2 22 	call	0x4564	; 0x4564 <buzz_on>
			blockTransmission = true;
    a0e0:	81 e0       	ldi	r24, 0x01	; 1
    a0e2:	80 93 3c 23 	sts	0x233C, r24	; 0x80233c <blockTransmission>
	}
}
    a0e6:	00 00       	nop
    a0e8:	df 91       	pop	r29
    a0ea:	cf 91       	pop	r28
    a0ec:	08 95       	ret

0000a0ee <main>:




int main (void)
{
    a0ee:	2f 92       	push	r2
    a0f0:	3f 92       	push	r3
    a0f2:	4f 92       	push	r4
    a0f4:	5f 92       	push	r5
    a0f6:	6f 92       	push	r6
    a0f8:	7f 92       	push	r7
    a0fa:	8f 92       	push	r8
    a0fc:	9f 92       	push	r9
    a0fe:	af 92       	push	r10
    a100:	bf 92       	push	r11
    a102:	cf 92       	push	r12
    a104:	df 92       	push	r13
    a106:	ef 92       	push	r14
    a108:	ff 92       	push	r15
    a10a:	0f 93       	push	r16
    a10c:	1f 93       	push	r17
    a10e:	cf 93       	push	r28
    a110:	df 93       	push	r29
    a112:	cd b7       	in	r28, 0x3d	; 61
    a114:	de b7       	in	r29, 0x3e	; 62
    a116:	e8 97       	sbiw	r28, 0x38	; 56
    a118:	cd bf       	out	0x3d, r28	; 61
    a11a:	de bf       	out	0x3e, r29	; 62
	blockTransmission = false;
    a11c:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <blockTransmission>
	board_init();
    a120:	1e da       	rcall	.-3012   	; 0x955e <board_init>
	//TODO: HANDLE RESETS
	
	
	**/
	
	sysclk_init();
    a122:	0e 94 33 30 	call	0x6066	; 0x6066 <sysclk_init>
	rtc_init();
    a126:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <rtc_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    a12a:	00 dd       	rcall	.-1536   	; 0x9b2c <uart_terminal_init>
	newOLogInit();
    a12c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <newOLogInit>

	if(DEBUG) printf("uart is working\n");
    a130:	84 e7       	ldi	r24, 0x74	; 116
    a132:	92 e2       	ldi	r25, 0x22	; 34
    a134:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <puts>
	

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    a138:	6f dd       	rcall	.-1314   	; 0x9c18 <pmic_init>
    a13a:	81 e0       	ldi	r24, 0x01	; 1
    a13c:	7a dd       	rcall	.-1292   	; 0x9c32 <pmic_set_scheduling>
	irq_initialize_vectors();
    a13e:	80 ea       	ldi	r24, 0xA0	; 160
    a140:	90 e0       	ldi	r25, 0x00	; 0
    a142:	27 e0       	ldi	r18, 0x07	; 7
    a144:	fc 01       	movw	r30, r24
    a146:	22 83       	std	Z+2, r18	; 0x02
	cpu_irq_enable();
    a148:	78 94       	sei
	
	init_GPS_pins_and_usart();
    a14a:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <init_GPS_pins_and_usart>
	init_gps_interrupts();
    a14e:	0e 94 37 1a 	call	0x346e	; 0x346e <init_gps_interrupts>
	init_gps_buffers();	
    a152:	0e 94 4e 1a 	call	0x349c	; 0x349c <init_gps_buffers>
	imu_init();
    a156:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <imu_init>
	//delay_s(1);
	xbee_init();
    a15a:	0e 94 68 23 	call	0x46d0	; 0x46d0 <xbee_init>
	
	servo_init();
    a15e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <servo_init>
	thermistor_init();
    a162:	0e 94 03 11 	call	0x2206	; 0x2206 <thermistor_init>
	volt_init();
    a166:	0e 94 13 11 	call	0x2226	; 0x2226 <volt_init>

	uint8_t servoPos = 0;
    a16a:	19 82       	std	Y+1, r1	; 0x01
	//xbeeWrite("hello There!");
	while (true)
	{
		
		
		printf("\ngood morning realterm");
    a16c:	84 e8       	ldi	r24, 0x84	; 132
    a16e:	92 e2       	ldi	r25, 0x22	; 34
    a170:	89 2f       	mov	r24, r25
    a172:	8f 93       	push	r24
    a174:	84 e8       	ldi	r24, 0x84	; 132
    a176:	92 e2       	ldi	r25, 0x22	; 34
    a178:	8f 93       	push	r24
    a17a:	0e 94 4f 5d 	call	0xba9e	; 0xba9e <printf>
    a17e:	0f 90       	pop	r0
    a180:	0f 90       	pop	r0
		//xbeeWrite("hello There! xbee");
		imu_update();
    a182:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <imu_update>
		
		
		/***
		Get Telemetry - Part of every flight state
		***/
		missionTime = ((float)rtc_get_time())/10.0;
    a186:	0e 94 a1 31 	call	0x6342	; 0x6342 <rtc_get_time>
    a18a:	dc 01       	movw	r26, r24
    a18c:	cb 01       	movw	r24, r22
    a18e:	bc 01       	movw	r22, r24
    a190:	cd 01       	movw	r24, r26
    a192:	28 d3       	rcall	.+1616   	; 0xa7e4 <__floatunsisf>
    a194:	dc 01       	movw	r26, r24
    a196:	cb 01       	movw	r24, r22
    a198:	20 e0       	ldi	r18, 0x00	; 0
    a19a:	30 e0       	ldi	r19, 0x00	; 0
    a19c:	40 e2       	ldi	r20, 0x20	; 32
    a19e:	51 e4       	ldi	r21, 0x41	; 65
    a1a0:	bc 01       	movw	r22, r24
    a1a2:	cd 01       	movw	r24, r26
    a1a4:	4c d2       	rcall	.+1176   	; 0xa63e <__divsf3>
    a1a6:	dc 01       	movw	r26, r24
    a1a8:	cb 01       	movw	r24, r22
    a1aa:	80 93 23 23 	sts	0x2323, r24	; 0x802323 <missionTime>
    a1ae:	90 93 24 23 	sts	0x2324, r25	; 0x802324 <missionTime+0x1>
    a1b2:	a0 93 25 23 	sts	0x2325, r26	; 0x802325 <missionTime+0x2>
    a1b6:	b0 93 26 23 	sts	0x2326, r27	; 0x802326 <missionTime+0x3>
		//pressure = getPressure();
		//printf("%f\n", pressure);
		//printf("is it me?");
		
		
		if (last_finished != SENTENCE_NONE)
    a1ba:	80 91 86 26 	lds	r24, 0x2686	; 0x802686 <last_finished>
    a1be:	88 23       	and	r24, r24
    a1c0:	09 f4       	brne	.+2      	; 0xa1c4 <main+0xd6>
    a1c2:	54 c0       	rjmp	.+168    	; 0xa26c <main+0x17e>
		{
			rbu8_read(&gps_receive_buffer,gpstmp,85);
    a1c4:	45 e5       	ldi	r20, 0x55	; 85
    a1c6:	50 e0       	ldi	r21, 0x00	; 0
    a1c8:	65 e6       	ldi	r22, 0x65	; 101
    a1ca:	73 e2       	ldi	r23, 0x23	; 35
    a1cc:	8e e7       	ldi	r24, 0x7E	; 126
    a1ce:	96 e2       	ldi	r25, 0x26	; 38
    a1d0:	0e 94 09 27 	call	0x4e12	; 0x4e12 <rbu8_read>
			GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    a1d4:	85 e6       	ldi	r24, 0x65	; 101
    a1d6:	93 e2       	ldi	r25, 0x23	; 35
    a1d8:	0e 94 b5 5c 	call	0xb96a	; 0xb96a <strlen>
    a1dc:	28 2f       	mov	r18, r24
    a1de:	ce 01       	movw	r24, r28
    a1e0:	02 96       	adiw	r24, 0x02	; 2
    a1e2:	42 2f       	mov	r20, r18
    a1e4:	65 e6       	ldi	r22, 0x65	; 101
    a1e6:	73 e2       	ldi	r23, 0x23	; 35
    a1e8:	0e 94 c7 2a 	call	0x558e	; 0x558e <getGPSDatafromNMEA>
			GPSAlt = gps_data.altitude;
    a1ec:	88 8d       	ldd	r24, Y+24	; 0x18
    a1ee:	99 8d       	ldd	r25, Y+25	; 0x19
    a1f0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a1f2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a1f4:	bc 01       	movw	r22, r24
    a1f6:	cd 01       	movw	r24, r26
    a1f8:	c9 d2       	rcall	.+1426   	; 0xa78c <__fixunssfsi>
    a1fa:	dc 01       	movw	r26, r24
    a1fc:	cb 01       	movw	r24, r22
    a1fe:	80 93 ca 25 	sts	0x25CA, r24	; 0x8025ca <GPSAlt>
    a202:	90 93 cb 25 	sts	0x25CB, r25	; 0x8025cb <GPSAlt+0x1>
    a206:	a0 93 cc 25 	sts	0x25CC, r26	; 0x8025cc <GPSAlt+0x2>
    a20a:	b0 93 cd 25 	sts	0x25CD, r27	; 0x8025cd <GPSAlt+0x3>
			GPSLat = gps_data.latdecimal;
    a20e:	89 85       	ldd	r24, Y+9	; 0x09
    a210:	9a 85       	ldd	r25, Y+10	; 0x0a
    a212:	ab 85       	ldd	r26, Y+11	; 0x0b
    a214:	bc 85       	ldd	r27, Y+12	; 0x0c
    a216:	bc 01       	movw	r22, r24
    a218:	cd 01       	movw	r24, r26
    a21a:	b8 d2       	rcall	.+1392   	; 0xa78c <__fixunssfsi>
    a21c:	dc 01       	movw	r26, r24
    a21e:	cb 01       	movw	r24, r22
    a220:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <GPSLat>
    a224:	90 93 34 23 	sts	0x2334, r25	; 0x802334 <GPSLat+0x1>
    a228:	a0 93 35 23 	sts	0x2335, r26	; 0x802335 <GPSLat+0x2>
    a22c:	b0 93 36 23 	sts	0x2336, r27	; 0x802336 <GPSLat+0x3>
			GPSLong = gps_data.londecimal;
    a230:	8c 89       	ldd	r24, Y+20	; 0x14
    a232:	9d 89       	ldd	r25, Y+21	; 0x15
    a234:	ae 89       	ldd	r26, Y+22	; 0x16
    a236:	bf 89       	ldd	r27, Y+23	; 0x17
    a238:	bc 01       	movw	r22, r24
    a23a:	cd 01       	movw	r24, r26
    a23c:	a7 d2       	rcall	.+1358   	; 0xa78c <__fixunssfsi>
    a23e:	dc 01       	movw	r26, r24
    a240:	cb 01       	movw	r24, r22
    a242:	80 93 c6 23 	sts	0x23C6, r24	; 0x8023c6 <GPSLong>
    a246:	90 93 c7 23 	sts	0x23C7, r25	; 0x8023c7 <GPSLong+0x1>
    a24a:	a0 93 c8 23 	sts	0x23C8, r26	; 0x8023c8 <GPSLong+0x2>
    a24e:	b0 93 c9 23 	sts	0x23C9, r27	; 0x8023c9 <GPSLong+0x3>
    a252:	88 a1       	ldd	r24, Y+32	; 0x20
			GPSSats = gps_data.sats;
    a254:	88 2f       	mov	r24, r24
    a256:	90 e0       	ldi	r25, 0x00	; 0
    a258:	a0 e0       	ldi	r26, 0x00	; 0
    a25a:	b0 e0       	ldi	r27, 0x00	; 0
    a25c:	80 93 ba 23 	sts	0x23BA, r24	; 0x8023ba <GPSSats>
    a260:	90 93 bb 23 	sts	0x23BB, r25	; 0x8023bb <GPSSats+0x1>
    a264:	a0 93 bc 23 	sts	0x23BC, r26	; 0x8023bc <GPSSats+0x2>
    a268:	b0 93 bd 23 	sts	0x23BD, r27	; 0x8023bd <GPSSats+0x3>
    a26c:	0e 94 b2 11 	call	0x2364	; 0x2364 <getTemperature>
			
		}
		//printf("Sats: %u\n",GPSSats);
		////printf("Lat: %u\n",GPSLat);
		////printf("Long: %u\n",GPSLong);
		temp = getTemperature();
    a270:	dc 01       	movw	r26, r24
    a272:	cb 01       	movw	r24, r22
    a274:	80 93 1f 23 	sts	0x231F, r24	; 0x80231f <temp>
    a278:	90 93 20 23 	sts	0x2320, r25	; 0x802320 <temp+0x1>
    a27c:	a0 93 21 23 	sts	0x2321, r26	; 0x802321 <temp+0x2>
    a280:	b0 93 22 23 	sts	0x2322, r27	; 0x802322 <temp+0x3>
    a284:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <pressure>
		altitude = pressure / 9000; // TODO: finish function
    a288:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <pressure+0x1>
    a28c:	a0 91 2d 23 	lds	r26, 0x232D	; 0x80232d <pressure+0x2>
    a290:	b0 91 2e 23 	lds	r27, 0x232E	; 0x80232e <pressure+0x3>
    a294:	28 e2       	ldi	r18, 0x28	; 40
    a296:	33 e2       	ldi	r19, 0x23	; 35
    a298:	40 e0       	ldi	r20, 0x00	; 0
    a29a:	50 e0       	ldi	r21, 0x00	; 0
    a29c:	bc 01       	movw	r22, r24
    a29e:	cd 01       	movw	r24, r26
    a2a0:	0e 94 99 59 	call	0xb332	; 0xb332 <__divmodsi4>
    a2a4:	da 01       	movw	r26, r20
    a2a6:	c9 01       	movw	r24, r18
    a2a8:	bc 01       	movw	r22, r24
    a2aa:	cd 01       	movw	r24, r26
    a2ac:	9d d2       	rcall	.+1338   	; 0xa7e8 <__floatsisf>
    a2ae:	dc 01       	movw	r26, r24
    a2b0:	cb 01       	movw	r24, r22
    a2b2:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <altitude>
    a2b6:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <altitude+0x1>
    a2ba:	a0 93 43 23 	sts	0x2343, r26	; 0x802343 <altitude+0x2>
    a2be:	b0 93 44 23 	sts	0x2344, r27	; 0x802344 <altitude+0x3>
    a2c2:	0e 94 84 11 	call	0x2308	; 0x2308 <getVoltage>
		voltage = getVoltage();
    a2c6:	dc 01       	movw	r26, r24
    a2c8:	cb 01       	movw	r24, r22
    a2ca:	80 93 27 23 	sts	0x2327, r24	; 0x802327 <voltage>
    a2ce:	90 93 28 23 	sts	0x2328, r25	; 0x802328 <voltage+0x1>
    a2d2:	a0 93 29 23 	sts	0x2329, r26	; 0x802329 <voltage+0x2>
    a2d6:	b0 93 2a 23 	sts	0x232A, r27	; 0x80232a <voltage+0x3>
    a2da:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <imu_vel_z>
		velocity = imu_vel_z();
    a2de:	dc 01       	movw	r26, r24
    a2e0:	cb 01       	movw	r24, r22
    a2e2:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <velocity>
    a2e6:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <velocity+0x1>
    a2ea:	a0 93 3a 23 	sts	0x233A, r26	; 0x80233a <velocity+0x2>
    a2ee:	b0 93 3b 23 	sts	0x233B, r27	; 0x80233b <velocity+0x3>
    a2f2:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <imu_pos_z>
		accelHeight = imu_pos_z();
    a2f6:	dc 01       	movw	r26, r24
    a2f8:	cb 01       	movw	r24, r22
    a2fa:	80 93 13 23 	sts	0x2313, r24	; 0x802313 <accelHeight>
    a2fe:	90 93 14 23 	sts	0x2314, r25	; 0x802314 <accelHeight+0x1>
    a302:	a0 93 15 23 	sts	0x2315, r26	; 0x802315 <accelHeight+0x2>
    a306:	b0 93 16 23 	sts	0x2316, r27	; 0x802316 <accelHeight+0x3>
    a30a:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <imu_accel_z>
		accZ = imu_accel_z();
    a30e:	dc 01       	movw	r26, r24
    a310:	cb 01       	movw	r24, r22
    a312:	80 93 17 23 	sts	0x2317, r24	; 0x802317 <accZ>
    a316:	90 93 18 23 	sts	0x2318, r25	; 0x802318 <accZ+0x1>
    a31a:	a0 93 19 23 	sts	0x2319, r26	; 0x802319 <accZ+0x2>
    a31e:	b0 93 1a 23 	sts	0x231A, r27	; 0x80231a <accZ+0x3>
    a322:	0e 94 0b 20 	call	0x4016	; 0x4016 <imu_pitch>
		pitch = imu_pitch();
    a326:	dc 01       	movw	r26, r24
    a328:	cb 01       	movw	r24, r22
    a32a:	80 93 be 23 	sts	0x23BE, r24	; 0x8023be <pitch>
    a32e:	90 93 bf 23 	sts	0x23BF, r25	; 0x8023bf <pitch+0x1>
    a332:	a0 93 c0 23 	sts	0x23C0, r26	; 0x8023c0 <pitch+0x2>
    a336:	b0 93 c1 23 	sts	0x23C1, r27	; 0x8023c1 <pitch+0x3>
    a33a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <imu_roll>
		roll = imu_roll();
    a33e:	dc 01       	movw	r26, r24
    a340:	cb 01       	movw	r24, r22
    a342:	80 93 c2 23 	sts	0x23C2, r24	; 0x8023c2 <roll>
    a346:	90 93 c3 23 	sts	0x23C3, r25	; 0x8023c3 <roll+0x1>
    a34a:	a0 93 c4 23 	sts	0x23C4, r26	; 0x8023c4 <roll+0x2>
    a34e:	b0 93 c5 23 	sts	0x23C5, r27	; 0x8023c5 <roll+0x3>
    a352:	0e 94 1c 20 	call	0x4038	; 0x4038 <imu_heading>
		heading = imu_heading();
    a356:	dc 01       	movw	r26, r24
    a358:	cb 01       	movw	r24, r22
    a35a:	80 93 ce 25 	sts	0x25CE, r24	; 0x8025ce <heading>
    a35e:	90 93 cf 25 	sts	0x25CF, r25	; 0x8025cf <heading+0x1>
    a362:	a0 93 d0 25 	sts	0x25D0, r26	; 0x8025d0 <heading+0x2>
    a366:	b0 93 d1 25 	sts	0x25D1, r27	; 0x8025d1 <heading+0x3>
    a36a:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <flightState>
		
		switch(flightState)
    a36e:	88 2f       	mov	r24, r24
    a370:	90 e0       	ldi	r25, 0x00	; 0
    a372:	81 30       	cpi	r24, 0x01	; 1
    a374:	91 05       	cpc	r25, r1
    a376:	71 f0       	breq	.+28     	; 0xa394 <main+0x2a6>
    a378:	82 30       	cpi	r24, 0x02	; 2
    a37a:	91 05       	cpc	r25, r1
    a37c:	1c f4       	brge	.+6      	; 0xa384 <main+0x296>
    a37e:	89 2b       	or	r24, r25
    a380:	39 f0       	breq	.+14     	; 0xa390 <main+0x2a2>
				break;
		    case 3:
				fs_3();
				break;
			default: 
				break;
    a382:	0e c0       	rjmp	.+28     	; 0xa3a0 <main+0x2b2>
		accZ = imu_accel_z();
		pitch = imu_pitch();
		roll = imu_roll();
		heading = imu_heading();
		
		switch(flightState)
    a384:	82 30       	cpi	r24, 0x02	; 2
    a386:	91 05       	cpc	r25, r1
    a388:	39 f0       	breq	.+14     	; 0xa398 <main+0x2aa>
				break;
		    case 3:
				fs_3();
				break;
			default: 
				break;
    a38a:	03 97       	sbiw	r24, 0x03	; 3
		heading = imu_heading();
		
		switch(flightState)
		{
			case 0:
				fs_0();
    a38c:	39 f0       	breq	.+14     	; 0xa39c <main+0x2ae>
    a38e:	08 c0       	rjmp	.+16     	; 0xa3a0 <main+0x2b2>
				break;
    a390:	7b dc       	rcall	.-1802   	; 0x9c88 <fs_0>
			case 1:
				fs_1();
    a392:	06 c0       	rjmp	.+12     	; 0xa3a0 <main+0x2b2>
    a394:	f5 dc       	rcall	.-1558   	; 0x9d80 <fs_1>
				break;
    a396:	04 c0       	rjmp	.+8      	; 0xa3a0 <main+0x2b2>
			case 2:
				fs_2();
    a398:	90 dd       	rcall	.-1248   	; 0x9eba <fs_2>
    a39a:	02 c0       	rjmp	.+4      	; 0xa3a0 <main+0x2b2>
				break;
    a39c:	0e de       	rcall	.-996    	; 0x9fba <fs_3>
		    case 3:
				fs_3();
    a39e:	00 00       	nop
    a3a0:	24 dc       	rcall	.-1976   	; 0x9bea <sysclk_get_cpu_hz>
				break;
    a3a2:	dc 01       	movw	r26, r24
				break;
			
		};
		
			
		delay_ms(50);		
    a3a4:	cb 01       	movw	r24, r22
    a3a6:	9c 01       	movw	r18, r24
    a3a8:	ad 01       	movw	r20, r26
    a3aa:	60 e0       	ldi	r22, 0x00	; 0
    a3ac:	70 e0       	ldi	r23, 0x00	; 0
    a3ae:	cb 01       	movw	r24, r22
    a3b0:	82 2e       	mov	r8, r18
    a3b2:	93 2e       	mov	r9, r19
    a3b4:	a4 2e       	mov	r10, r20
    a3b6:	b5 2e       	mov	r11, r21
    a3b8:	c6 2e       	mov	r12, r22
    a3ba:	d7 2e       	mov	r13, r23
    a3bc:	e8 2e       	mov	r14, r24
    a3be:	f9 2e       	mov	r15, r25
    a3c0:	28 2d       	mov	r18, r8
    a3c2:	39 2d       	mov	r19, r9
    a3c4:	4a 2d       	mov	r20, r10
    a3c6:	5b 2d       	mov	r21, r11
    a3c8:	6c 2d       	mov	r22, r12
    a3ca:	7d 2d       	mov	r23, r13
    a3cc:	8e 2d       	mov	r24, r14
    a3ce:	9f 2d       	mov	r25, r15
    a3d0:	01 e0       	ldi	r16, 0x01	; 1
    a3d2:	0e 94 77 5a 	call	0xb4ee	; 0xb4ee <__ashldi3>
    a3d6:	29 a3       	std	Y+33, r18	; 0x21
    a3d8:	3a a3       	std	Y+34, r19	; 0x22
    a3da:	4b a3       	std	Y+35, r20	; 0x23
    a3dc:	5c a3       	std	Y+36, r21	; 0x24
    a3de:	6d a3       	std	Y+37, r22	; 0x25
    a3e0:	7e a3       	std	Y+38, r23	; 0x26
    a3e2:	8f a3       	std	Y+39, r24	; 0x27
    a3e4:	98 a7       	std	Y+40, r25	; 0x28
    a3e6:	89 a0       	ldd	r8, Y+33	; 0x21
    a3e8:	9a a0       	ldd	r9, Y+34	; 0x22
    a3ea:	ab a0       	ldd	r10, Y+35	; 0x23
    a3ec:	bc a0       	ldd	r11, Y+36	; 0x24
    a3ee:	cd a0       	ldd	r12, Y+37	; 0x25
    a3f0:	de a0       	ldd	r13, Y+38	; 0x26
    a3f2:	ef a0       	ldd	r14, Y+39	; 0x27
    a3f4:	f8 a4       	ldd	r15, Y+40	; 0x28
    a3f6:	28 2d       	mov	r18, r8
    a3f8:	39 2d       	mov	r19, r9
    a3fa:	4a 2d       	mov	r20, r10
    a3fc:	5b 2d       	mov	r21, r11
    a3fe:	6c 2d       	mov	r22, r12
    a400:	7d 2d       	mov	r23, r13
    a402:	8e 2d       	mov	r24, r14
    a404:	9f 2d       	mov	r25, r15
    a406:	02 e0       	ldi	r16, 0x02	; 2
    a408:	0e 94 77 5a 	call	0xb4ee	; 0xb4ee <__ashldi3>
    a40c:	29 a7       	std	Y+41, r18	; 0x29
    a40e:	3a a7       	std	Y+42, r19	; 0x2a
    a410:	4b a7       	std	Y+43, r20	; 0x2b
    a412:	5c a7       	std	Y+44, r21	; 0x2c
    a414:	6d a7       	std	Y+45, r22	; 0x2d
    a416:	7e a7       	std	Y+46, r23	; 0x2e
    a418:	8f a7       	std	Y+47, r24	; 0x2f
    a41a:	98 ab       	std	Y+48, r25	; 0x30
    a41c:	28 2d       	mov	r18, r8
    a41e:	39 2d       	mov	r19, r9
    a420:	4a 2d       	mov	r20, r10
    a422:	5b 2d       	mov	r21, r11
    a424:	6c 2d       	mov	r22, r12
    a426:	7d 2d       	mov	r23, r13
    a428:	8e 2d       	mov	r24, r14
    a42a:	9f 2d       	mov	r25, r15
    a42c:	a9 a4       	ldd	r10, Y+41	; 0x29
    a42e:	ba a4       	ldd	r11, Y+42	; 0x2a
    a430:	cb a4       	ldd	r12, Y+43	; 0x2b
    a432:	dc a4       	ldd	r13, Y+44	; 0x2c
    a434:	ed a4       	ldd	r14, Y+45	; 0x2d
    a436:	fe a4       	ldd	r15, Y+46	; 0x2e
    a438:	0f a5       	ldd	r16, Y+47	; 0x2f
    a43a:	18 a9       	ldd	r17, Y+48	; 0x30
    a43c:	0e 94 90 5a 	call	0xb520	; 0xb520 <__adddi3>
    a440:	82 2e       	mov	r8, r18
    a442:	93 2e       	mov	r9, r19
    a444:	a4 2e       	mov	r10, r20
    a446:	b5 2e       	mov	r11, r21
    a448:	c6 2e       	mov	r12, r22
    a44a:	d7 2e       	mov	r13, r23
    a44c:	e8 2e       	mov	r14, r24
    a44e:	f9 2e       	mov	r15, r25
    a450:	28 2d       	mov	r18, r8
    a452:	39 2d       	mov	r19, r9
    a454:	4a 2d       	mov	r20, r10
    a456:	5b 2d       	mov	r21, r11
    a458:	6c 2d       	mov	r22, r12
    a45a:	7d 2d       	mov	r23, r13
    a45c:	8e 2d       	mov	r24, r14
    a45e:	9f 2d       	mov	r25, r15
    a460:	02 e0       	ldi	r16, 0x02	; 2
    a462:	0e 94 77 5a 	call	0xb4ee	; 0xb4ee <__ashldi3>
    a466:	29 ab       	std	Y+49, r18	; 0x31
    a468:	3a ab       	std	Y+50, r19	; 0x32
    a46a:	4b ab       	std	Y+51, r20	; 0x33
    a46c:	5c ab       	std	Y+52, r21	; 0x34
    a46e:	6d ab       	std	Y+53, r22	; 0x35
    a470:	7e ab       	std	Y+54, r23	; 0x36
    a472:	8f ab       	std	Y+55, r24	; 0x37
    a474:	98 af       	std	Y+56, r25	; 0x38
    a476:	28 2d       	mov	r18, r8
    a478:	39 2d       	mov	r19, r9
    a47a:	4a 2d       	mov	r20, r10
    a47c:	5b 2d       	mov	r21, r11
    a47e:	6c 2d       	mov	r22, r12
    a480:	7d 2d       	mov	r23, r13
    a482:	8e 2d       	mov	r24, r14
    a484:	9f 2d       	mov	r25, r15
    a486:	a9 a8       	ldd	r10, Y+49	; 0x31
    a488:	ba a8       	ldd	r11, Y+50	; 0x32
    a48a:	cb a8       	ldd	r12, Y+51	; 0x33
    a48c:	dc a8       	ldd	r13, Y+52	; 0x34
    a48e:	ed a8       	ldd	r14, Y+53	; 0x35
    a490:	fe a8       	ldd	r15, Y+54	; 0x36
    a492:	0f a9       	ldd	r16, Y+55	; 0x37
    a494:	18 ad       	ldd	r17, Y+56	; 0x38
    a496:	0e 94 90 5a 	call	0xb520	; 0xb520 <__adddi3>
    a49a:	22 2e       	mov	r2, r18
    a49c:	33 2e       	mov	r3, r19
    a49e:	44 2e       	mov	r4, r20
    a4a0:	55 2e       	mov	r5, r21
    a4a2:	66 2e       	mov	r6, r22
    a4a4:	77 2e       	mov	r7, r23
    a4a6:	88 2e       	mov	r8, r24
    a4a8:	99 2e       	mov	r9, r25
    a4aa:	0f 2e       	mov	r0, r31
    a4ac:	f6 e0       	ldi	r31, 0x06	; 6
    a4ae:	af 2e       	mov	r10, r31
    a4b0:	f0 2d       	mov	r31, r0
    a4b2:	b1 2c       	mov	r11, r1
    a4b4:	c1 2c       	mov	r12, r1
    a4b6:	d1 2c       	mov	r13, r1
    a4b8:	e1 2c       	mov	r14, r1
    a4ba:	f1 2c       	mov	r15, r1
    a4bc:	00 e0       	ldi	r16, 0x00	; 0
    a4be:	10 e0       	ldi	r17, 0x00	; 0
    a4c0:	22 2d       	mov	r18, r2
    a4c2:	33 2d       	mov	r19, r3
    a4c4:	44 2d       	mov	r20, r4
    a4c6:	55 2d       	mov	r21, r5
    a4c8:	66 2d       	mov	r22, r6
    a4ca:	77 2d       	mov	r23, r7
    a4cc:	88 2d       	mov	r24, r8
    a4ce:	99 2d       	mov	r25, r9
    a4d0:	b2 d7       	rcall	.+3940   	; 0xb436 <__udivdi3>
    a4d2:	22 2e       	mov	r2, r18
    a4d4:	33 2e       	mov	r3, r19
    a4d6:	44 2e       	mov	r4, r20
    a4d8:	55 2e       	mov	r5, r21
    a4da:	66 2e       	mov	r6, r22
    a4dc:	77 2e       	mov	r7, r23
    a4de:	88 2e       	mov	r8, r24
    a4e0:	99 2e       	mov	r9, r25
    a4e2:	a2 2c       	mov	r10, r2
    a4e4:	b3 2c       	mov	r11, r3
    a4e6:	c4 2c       	mov	r12, r4
    a4e8:	d5 2c       	mov	r13, r5
    a4ea:	e6 2c       	mov	r14, r6
    a4ec:	f7 2c       	mov	r15, r7
    a4ee:	08 2d       	mov	r16, r8
    a4f0:	19 2d       	mov	r17, r9
    a4f2:	2a 2d       	mov	r18, r10
    a4f4:	3b 2d       	mov	r19, r11
    a4f6:	4c 2d       	mov	r20, r12
    a4f8:	5d 2d       	mov	r21, r13
    a4fa:	6e 2d       	mov	r22, r14
    a4fc:	7f 2d       	mov	r23, r15
    a4fe:	80 2f       	mov	r24, r16
    a500:	91 2f       	mov	r25, r17
    a502:	29 51       	subi	r18, 0x19	; 25
    a504:	3c 4f       	sbci	r19, 0xFC	; 252
    a506:	4f 4f       	sbci	r20, 0xFF	; 255
    a508:	5f 4f       	sbci	r21, 0xFF	; 255
    a50a:	6f 4f       	sbci	r22, 0xFF	; 255
    a50c:	7f 4f       	sbci	r23, 0xFF	; 255
    a50e:	8f 4f       	sbci	r24, 0xFF	; 255
    a510:	9f 4f       	sbci	r25, 0xFF	; 255
    a512:	a2 2e       	mov	r10, r18
    a514:	b3 2e       	mov	r11, r19
    a516:	c4 2e       	mov	r12, r20
    a518:	d5 2e       	mov	r13, r21
    a51a:	e6 2e       	mov	r14, r22
    a51c:	f7 2e       	mov	r15, r23
    a51e:	08 2f       	mov	r16, r24
    a520:	19 2f       	mov	r17, r25
    a522:	2a 2d       	mov	r18, r10
    a524:	3b 2d       	mov	r19, r11
    a526:	4c 2d       	mov	r20, r12
    a528:	5d 2d       	mov	r21, r13
    a52a:	6e 2d       	mov	r22, r14
    a52c:	7f 2d       	mov	r23, r15
    a52e:	80 2f       	mov	r24, r16
    a530:	91 2f       	mov	r25, r17
    a532:	95 d1       	rcall	.+810    	; 0xa85e <__floatundisf>
    a534:	dc 01       	movw	r26, r24
    a536:	cb 01       	movw	r24, r22
    a538:	20 e0       	ldi	r18, 0x00	; 0
    a53a:	30 e0       	ldi	r19, 0x00	; 0
    a53c:	4a e7       	ldi	r20, 0x7A	; 122
    a53e:	54 e4       	ldi	r21, 0x44	; 68
    a540:	bc 01       	movw	r22, r24
    a542:	cd 01       	movw	r24, r26
    a544:	7c d0       	rcall	.+248    	; 0xa63e <__divsf3>
    a546:	dc 01       	movw	r26, r24
    a548:	cb 01       	movw	r24, r22
    a54a:	bc 01       	movw	r22, r24
    a54c:	cd 01       	movw	r24, r26
    a54e:	e4 d0       	rcall	.+456    	; 0xa718 <__fixunssfdi>
    a550:	a2 2e       	mov	r10, r18
    a552:	b3 2e       	mov	r11, r19
    a554:	c4 2e       	mov	r12, r20
    a556:	d5 2e       	mov	r13, r21
    a558:	e6 2e       	mov	r14, r22
    a55a:	f7 2e       	mov	r15, r23
    a55c:	08 2f       	mov	r16, r24
    a55e:	19 2f       	mov	r17, r25
    a560:	d6 01       	movw	r26, r12
    a562:	c5 01       	movw	r24, r10
    a564:	bc 01       	movw	r22, r24
    a566:	cd 01       	movw	r24, r26
    a568:	4c db       	rcall	.-2408   	; 0x9c02 <__portable_avr_delay_cycles>
    a56a:	00 ce       	rjmp	.-1024   	; 0xa16c <main+0x7e>

0000a56c <__subsf3>:
    a56c:	50 58       	subi	r21, 0x80	; 128

0000a56e <__addsf3>:
    a56e:	bb 27       	eor	r27, r27
	}
    a570:	aa 27       	eor	r26, r26
    a572:	0e d0       	rcall	.+28     	; 0xa590 <__addsf3x>
    a574:	fd c1       	rjmp	.+1018   	; 0xa970 <__fp_round>
    a576:	ee d1       	rcall	.+988    	; 0xa954 <__fp_pscA>
    a578:	30 f0       	brcs	.+12     	; 0xa586 <__addsf3+0x18>
    a57a:	f3 d1       	rcall	.+998    	; 0xa962 <__fp_pscB>
    a57c:	20 f0       	brcs	.+8      	; 0xa586 <__addsf3+0x18>
    a57e:	31 f4       	brne	.+12     	; 0xa58c <__addsf3+0x1e>
    a580:	9f 3f       	cpi	r25, 0xFF	; 255
    a582:	11 f4       	brne	.+4      	; 0xa588 <__addsf3+0x1a>
    a584:	1e f4       	brtc	.+6      	; 0xa58c <__addsf3+0x1e>
    a586:	d3 c1       	rjmp	.+934    	; 0xa92e <__fp_nan>
    a588:	0e f4       	brtc	.+2      	; 0xa58c <__addsf3+0x1e>
    a58a:	e0 95       	com	r30
    a58c:	e7 fb       	bst	r30, 7
    a58e:	c9 c1       	rjmp	.+914    	; 0xa922 <__fp_inf>

0000a590 <__addsf3x>:
    a590:	e9 2f       	mov	r30, r25
    a592:	ff d1       	rcall	.+1022   	; 0xa992 <__fp_split3>
    a594:	80 f3       	brcs	.-32     	; 0xa576 <__addsf3+0x8>
    a596:	ba 17       	cp	r27, r26
    a598:	62 07       	cpc	r22, r18
    a59a:	73 07       	cpc	r23, r19
    a59c:	84 07       	cpc	r24, r20
    a59e:	95 07       	cpc	r25, r21
    a5a0:	18 f0       	brcs	.+6      	; 0xa5a8 <__addsf3x+0x18>
    a5a2:	71 f4       	brne	.+28     	; 0xa5c0 <__addsf3x+0x30>
    a5a4:	9e f5       	brtc	.+102    	; 0xa60c <__addsf3x+0x7c>
    a5a6:	17 c2       	rjmp	.+1070   	; 0xa9d6 <__fp_zero>
    a5a8:	0e f4       	brtc	.+2      	; 0xa5ac <__addsf3x+0x1c>
    a5aa:	e0 95       	com	r30
    a5ac:	0b 2e       	mov	r0, r27
    a5ae:	ba 2f       	mov	r27, r26
    a5b0:	a0 2d       	mov	r26, r0
    a5b2:	0b 01       	movw	r0, r22
    a5b4:	b9 01       	movw	r22, r18
    a5b6:	90 01       	movw	r18, r0
    a5b8:	0c 01       	movw	r0, r24
    a5ba:	ca 01       	movw	r24, r20
    a5bc:	a0 01       	movw	r20, r0
    a5be:	11 24       	eor	r1, r1
    a5c0:	ff 27       	eor	r31, r31
    a5c2:	59 1b       	sub	r21, r25
    a5c4:	99 f0       	breq	.+38     	; 0xa5ec <__addsf3x+0x5c>
    a5c6:	59 3f       	cpi	r21, 0xF9	; 249
    a5c8:	50 f4       	brcc	.+20     	; 0xa5de <__addsf3x+0x4e>
    a5ca:	50 3e       	cpi	r21, 0xE0	; 224
    a5cc:	68 f1       	brcs	.+90     	; 0xa628 <__addsf3x+0x98>
    a5ce:	1a 16       	cp	r1, r26
    a5d0:	f0 40       	sbci	r31, 0x00	; 0
    a5d2:	a2 2f       	mov	r26, r18
    a5d4:	23 2f       	mov	r18, r19
    a5d6:	34 2f       	mov	r19, r20
    a5d8:	44 27       	eor	r20, r20
    a5da:	58 5f       	subi	r21, 0xF8	; 248
    a5dc:	f3 cf       	rjmp	.-26     	; 0xa5c4 <__addsf3x+0x34>
    a5de:	46 95       	lsr	r20
    a5e0:	37 95       	ror	r19
    a5e2:	27 95       	ror	r18
    a5e4:	a7 95       	ror	r26
    a5e6:	f0 40       	sbci	r31, 0x00	; 0
    a5e8:	53 95       	inc	r21
    a5ea:	c9 f7       	brne	.-14     	; 0xa5de <__addsf3x+0x4e>
    a5ec:	7e f4       	brtc	.+30     	; 0xa60c <__addsf3x+0x7c>
    a5ee:	1f 16       	cp	r1, r31
    a5f0:	ba 0b       	sbc	r27, r26
    a5f2:	62 0b       	sbc	r22, r18
    a5f4:	73 0b       	sbc	r23, r19
    a5f6:	84 0b       	sbc	r24, r20
    a5f8:	ba f0       	brmi	.+46     	; 0xa628 <__addsf3x+0x98>
    a5fa:	91 50       	subi	r25, 0x01	; 1
    a5fc:	a1 f0       	breq	.+40     	; 0xa626 <__addsf3x+0x96>
    a5fe:	ff 0f       	add	r31, r31
    a600:	bb 1f       	adc	r27, r27
    a602:	66 1f       	adc	r22, r22
    a604:	77 1f       	adc	r23, r23
    a606:	88 1f       	adc	r24, r24
    a608:	c2 f7       	brpl	.-16     	; 0xa5fa <__addsf3x+0x6a>
    a60a:	0e c0       	rjmp	.+28     	; 0xa628 <__addsf3x+0x98>
    a60c:	ba 0f       	add	r27, r26
    a60e:	62 1f       	adc	r22, r18
    a610:	73 1f       	adc	r23, r19
    a612:	84 1f       	adc	r24, r20
    a614:	48 f4       	brcc	.+18     	; 0xa628 <__addsf3x+0x98>
    a616:	87 95       	ror	r24
    a618:	77 95       	ror	r23
    a61a:	67 95       	ror	r22
    a61c:	b7 95       	ror	r27
    a61e:	f7 95       	ror	r31
    a620:	9e 3f       	cpi	r25, 0xFE	; 254
    a622:	08 f0       	brcs	.+2      	; 0xa626 <__addsf3x+0x96>
    a624:	b3 cf       	rjmp	.-154    	; 0xa58c <__addsf3+0x1e>
    a626:	93 95       	inc	r25
    a628:	88 0f       	add	r24, r24
    a62a:	08 f0       	brcs	.+2      	; 0xa62e <__addsf3x+0x9e>
    a62c:	99 27       	eor	r25, r25
    a62e:	ee 0f       	add	r30, r30
    a630:	97 95       	ror	r25
    a632:	87 95       	ror	r24
    a634:	08 95       	ret

0000a636 <__cmpsf2>:
    a636:	51 d1       	rcall	.+674    	; 0xa8da <__fp_cmp>
    a638:	08 f4       	brcc	.+2      	; 0xa63c <__cmpsf2+0x6>
    a63a:	81 e0       	ldi	r24, 0x01	; 1
    a63c:	08 95       	ret

0000a63e <__divsf3>:
    a63e:	0c d0       	rcall	.+24     	; 0xa658 <__divsf3x>
    a640:	97 c1       	rjmp	.+814    	; 0xa970 <__fp_round>
    a642:	8f d1       	rcall	.+798    	; 0xa962 <__fp_pscB>
    a644:	40 f0       	brcs	.+16     	; 0xa656 <__divsf3+0x18>
    a646:	86 d1       	rcall	.+780    	; 0xa954 <__fp_pscA>
    a648:	30 f0       	brcs	.+12     	; 0xa656 <__divsf3+0x18>
    a64a:	21 f4       	brne	.+8      	; 0xa654 <__divsf3+0x16>
    a64c:	5f 3f       	cpi	r21, 0xFF	; 255
    a64e:	19 f0       	breq	.+6      	; 0xa656 <__divsf3+0x18>
    a650:	68 c1       	rjmp	.+720    	; 0xa922 <__fp_inf>
    a652:	51 11       	cpse	r21, r1
    a654:	c1 c1       	rjmp	.+898    	; 0xa9d8 <__fp_szero>
    a656:	6b c1       	rjmp	.+726    	; 0xa92e <__fp_nan>

0000a658 <__divsf3x>:
    a658:	9c d1       	rcall	.+824    	; 0xa992 <__fp_split3>
    a65a:	98 f3       	brcs	.-26     	; 0xa642 <__divsf3+0x4>

0000a65c <__divsf3_pse>:
    a65c:	99 23       	and	r25, r25
    a65e:	c9 f3       	breq	.-14     	; 0xa652 <__divsf3+0x14>
    a660:	55 23       	and	r21, r21
    a662:	b1 f3       	breq	.-20     	; 0xa650 <__divsf3+0x12>
    a664:	95 1b       	sub	r25, r21
    a666:	55 0b       	sbc	r21, r21
    a668:	bb 27       	eor	r27, r27
    a66a:	aa 27       	eor	r26, r26
    a66c:	62 17       	cp	r22, r18
    a66e:	73 07       	cpc	r23, r19
    a670:	84 07       	cpc	r24, r20
    a672:	38 f0       	brcs	.+14     	; 0xa682 <__divsf3_pse+0x26>
    a674:	9f 5f       	subi	r25, 0xFF	; 255
    a676:	5f 4f       	sbci	r21, 0xFF	; 255
    a678:	22 0f       	add	r18, r18
    a67a:	33 1f       	adc	r19, r19
    a67c:	44 1f       	adc	r20, r20
    a67e:	aa 1f       	adc	r26, r26
    a680:	a9 f3       	breq	.-22     	; 0xa66c <__divsf3_pse+0x10>
    a682:	33 d0       	rcall	.+102    	; 0xa6ea <__divsf3_pse+0x8e>
    a684:	0e 2e       	mov	r0, r30
    a686:	3a f0       	brmi	.+14     	; 0xa696 <__divsf3_pse+0x3a>
    a688:	e0 e8       	ldi	r30, 0x80	; 128
    a68a:	30 d0       	rcall	.+96     	; 0xa6ec <__divsf3_pse+0x90>
    a68c:	91 50       	subi	r25, 0x01	; 1
    a68e:	50 40       	sbci	r21, 0x00	; 0
    a690:	e6 95       	lsr	r30
    a692:	00 1c       	adc	r0, r0
    a694:	ca f7       	brpl	.-14     	; 0xa688 <__divsf3_pse+0x2c>
    a696:	29 d0       	rcall	.+82     	; 0xa6ea <__divsf3_pse+0x8e>
    a698:	fe 2f       	mov	r31, r30
    a69a:	27 d0       	rcall	.+78     	; 0xa6ea <__divsf3_pse+0x8e>
    a69c:	66 0f       	add	r22, r22
    a69e:	77 1f       	adc	r23, r23
    a6a0:	88 1f       	adc	r24, r24
    a6a2:	bb 1f       	adc	r27, r27
    a6a4:	26 17       	cp	r18, r22
    a6a6:	37 07       	cpc	r19, r23
    a6a8:	48 07       	cpc	r20, r24
    a6aa:	ab 07       	cpc	r26, r27
    a6ac:	b0 e8       	ldi	r27, 0x80	; 128
    a6ae:	09 f0       	breq	.+2      	; 0xa6b2 <__divsf3_pse+0x56>
    a6b0:	bb 0b       	sbc	r27, r27
    a6b2:	80 2d       	mov	r24, r0
    a6b4:	bf 01       	movw	r22, r30
    a6b6:	ff 27       	eor	r31, r31
    a6b8:	93 58       	subi	r25, 0x83	; 131
    a6ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a6bc:	2a f0       	brmi	.+10     	; 0xa6c8 <__divsf3_pse+0x6c>
    a6be:	9e 3f       	cpi	r25, 0xFE	; 254
    a6c0:	51 05       	cpc	r21, r1
    a6c2:	68 f0       	brcs	.+26     	; 0xa6de <__divsf3_pse+0x82>
    a6c4:	2e c1       	rjmp	.+604    	; 0xa922 <__fp_inf>
    a6c6:	88 c1       	rjmp	.+784    	; 0xa9d8 <__fp_szero>
    a6c8:	5f 3f       	cpi	r21, 0xFF	; 255
    a6ca:	ec f3       	brlt	.-6      	; 0xa6c6 <__divsf3_pse+0x6a>
    a6cc:	98 3e       	cpi	r25, 0xE8	; 232
    a6ce:	dc f3       	brlt	.-10     	; 0xa6c6 <__divsf3_pse+0x6a>
    a6d0:	86 95       	lsr	r24
    a6d2:	77 95       	ror	r23
    a6d4:	67 95       	ror	r22
    a6d6:	b7 95       	ror	r27
    a6d8:	f7 95       	ror	r31
    a6da:	9f 5f       	subi	r25, 0xFF	; 255
    a6dc:	c9 f7       	brne	.-14     	; 0xa6d0 <__divsf3_pse+0x74>
    a6de:	88 0f       	add	r24, r24
    a6e0:	91 1d       	adc	r25, r1
    a6e2:	96 95       	lsr	r25
    a6e4:	87 95       	ror	r24
    a6e6:	97 f9       	bld	r25, 7
    a6e8:	08 95       	ret
    a6ea:	e1 e0       	ldi	r30, 0x01	; 1
    a6ec:	66 0f       	add	r22, r22
    a6ee:	77 1f       	adc	r23, r23
    a6f0:	88 1f       	adc	r24, r24
    a6f2:	bb 1f       	adc	r27, r27
    a6f4:	62 17       	cp	r22, r18
    a6f6:	73 07       	cpc	r23, r19
    a6f8:	84 07       	cpc	r24, r20
    a6fa:	ba 07       	cpc	r27, r26
    a6fc:	20 f0       	brcs	.+8      	; 0xa706 <__divsf3_pse+0xaa>
    a6fe:	62 1b       	sub	r22, r18
    a700:	73 0b       	sbc	r23, r19
    a702:	84 0b       	sbc	r24, r20
    a704:	ba 0b       	sbc	r27, r26
    a706:	ee 1f       	adc	r30, r30
    a708:	88 f7       	brcc	.-30     	; 0xa6ec <__divsf3_pse+0x90>
    a70a:	e0 95       	com	r30
    a70c:	08 95       	ret

0000a70e <__fixsfdi>:
    a70e:	be e3       	ldi	r27, 0x3E	; 62
    a710:	04 d0       	rcall	.+8      	; 0xa71a <__fixunssfdi+0x2>
    a712:	08 f4       	brcc	.+2      	; 0xa716 <__fixsfdi+0x8>
    a714:	90 e8       	ldi	r25, 0x80	; 128
    a716:	08 95       	ret

0000a718 <__fixunssfdi>:
    a718:	bf e3       	ldi	r27, 0x3F	; 63
    a71a:	22 27       	eor	r18, r18
    a71c:	33 27       	eor	r19, r19
    a71e:	a9 01       	movw	r20, r18
    a720:	40 d1       	rcall	.+640    	; 0xa9a2 <__fp_splitA>
    a722:	58 f1       	brcs	.+86     	; 0xa77a <__fixunssfdi+0x62>
    a724:	9f 57       	subi	r25, 0x7F	; 127
    a726:	40 f1       	brcs	.+80     	; 0xa778 <__fixunssfdi+0x60>
    a728:	b9 17       	cp	r27, r25
    a72a:	38 f1       	brcs	.+78     	; 0xa77a <__fixunssfdi+0x62>
    a72c:	bf e3       	ldi	r27, 0x3F	; 63
    a72e:	b9 1b       	sub	r27, r25
    a730:	99 27       	eor	r25, r25
    a732:	b8 50       	subi	r27, 0x08	; 8
    a734:	3a f4       	brpl	.+14     	; 0xa744 <__fixunssfdi+0x2c>
    a736:	66 0f       	add	r22, r22
    a738:	77 1f       	adc	r23, r23
    a73a:	88 1f       	adc	r24, r24
    a73c:	99 1f       	adc	r25, r25
    a73e:	b3 95       	inc	r27
    a740:	d2 f3       	brmi	.-12     	; 0xa736 <__fixunssfdi+0x1e>
    a742:	16 c0       	rjmp	.+44     	; 0xa770 <__fixunssfdi+0x58>
    a744:	b8 50       	subi	r27, 0x08	; 8
    a746:	4a f0       	brmi	.+18     	; 0xa75a <__fixunssfdi+0x42>
    a748:	23 2f       	mov	r18, r19
    a74a:	34 2f       	mov	r19, r20
    a74c:	45 2f       	mov	r20, r21
    a74e:	56 2f       	mov	r21, r22
    a750:	67 2f       	mov	r22, r23
    a752:	78 2f       	mov	r23, r24
    a754:	88 27       	eor	r24, r24
    a756:	b8 50       	subi	r27, 0x08	; 8
    a758:	ba f7       	brpl	.-18     	; 0xa748 <__fixunssfdi+0x30>
    a75a:	b8 5f       	subi	r27, 0xF8	; 248
    a75c:	49 f0       	breq	.+18     	; 0xa770 <__fixunssfdi+0x58>
    a75e:	86 95       	lsr	r24
    a760:	77 95       	ror	r23
    a762:	67 95       	ror	r22
    a764:	57 95       	ror	r21
    a766:	47 95       	ror	r20
    a768:	37 95       	ror	r19
    a76a:	27 95       	ror	r18
    a76c:	ba 95       	dec	r27
    a76e:	b9 f7       	brne	.-18     	; 0xa75e <__fixunssfdi+0x46>
    a770:	0e f4       	brtc	.+2      	; 0xa774 <__fixunssfdi+0x5c>
    a772:	e0 d0       	rcall	.+448    	; 0xa934 <__fp_negdi>
    a774:	88 94       	clc
    a776:	08 95       	ret
    a778:	88 94       	clc
    a77a:	60 e0       	ldi	r22, 0x00	; 0
    a77c:	70 e0       	ldi	r23, 0x00	; 0
    a77e:	cb 01       	movw	r24, r22
    a780:	08 95       	ret

0000a782 <__fixsfsi>:
    a782:	04 d0       	rcall	.+8      	; 0xa78c <__fixunssfsi>
    a784:	68 94       	set
    a786:	b1 11       	cpse	r27, r1
    a788:	27 c1       	rjmp	.+590    	; 0xa9d8 <__fp_szero>
    a78a:	08 95       	ret

0000a78c <__fixunssfsi>:
    a78c:	0a d1       	rcall	.+532    	; 0xa9a2 <__fp_splitA>
    a78e:	88 f0       	brcs	.+34     	; 0xa7b2 <__fixunssfsi+0x26>
    a790:	9f 57       	subi	r25, 0x7F	; 127
    a792:	90 f0       	brcs	.+36     	; 0xa7b8 <__fixunssfsi+0x2c>
    a794:	b9 2f       	mov	r27, r25
    a796:	99 27       	eor	r25, r25
    a798:	b7 51       	subi	r27, 0x17	; 23
    a79a:	a0 f0       	brcs	.+40     	; 0xa7c4 <__fixunssfsi+0x38>
    a79c:	d1 f0       	breq	.+52     	; 0xa7d2 <__fixunssfsi+0x46>
    a79e:	66 0f       	add	r22, r22
    a7a0:	77 1f       	adc	r23, r23
    a7a2:	88 1f       	adc	r24, r24
    a7a4:	99 1f       	adc	r25, r25
    a7a6:	1a f0       	brmi	.+6      	; 0xa7ae <__fixunssfsi+0x22>
    a7a8:	ba 95       	dec	r27
    a7aa:	c9 f7       	brne	.-14     	; 0xa79e <__fixunssfsi+0x12>
    a7ac:	12 c0       	rjmp	.+36     	; 0xa7d2 <__fixunssfsi+0x46>
    a7ae:	b1 30       	cpi	r27, 0x01	; 1
    a7b0:	81 f0       	breq	.+32     	; 0xa7d2 <__fixunssfsi+0x46>
    a7b2:	11 d1       	rcall	.+546    	; 0xa9d6 <__fp_zero>
    a7b4:	b1 e0       	ldi	r27, 0x01	; 1
    a7b6:	08 95       	ret
    a7b8:	0e c1       	rjmp	.+540    	; 0xa9d6 <__fp_zero>
    a7ba:	67 2f       	mov	r22, r23
    a7bc:	78 2f       	mov	r23, r24
    a7be:	88 27       	eor	r24, r24
    a7c0:	b8 5f       	subi	r27, 0xF8	; 248
    a7c2:	39 f0       	breq	.+14     	; 0xa7d2 <__fixunssfsi+0x46>
    a7c4:	b9 3f       	cpi	r27, 0xF9	; 249
    a7c6:	cc f3       	brlt	.-14     	; 0xa7ba <__fixunssfsi+0x2e>
    a7c8:	86 95       	lsr	r24
    a7ca:	77 95       	ror	r23
    a7cc:	67 95       	ror	r22
    a7ce:	b3 95       	inc	r27
    a7d0:	d9 f7       	brne	.-10     	; 0xa7c8 <__fixunssfsi+0x3c>
    a7d2:	3e f4       	brtc	.+14     	; 0xa7e2 <__fixunssfsi+0x56>
    a7d4:	90 95       	com	r25
    a7d6:	80 95       	com	r24
    a7d8:	70 95       	com	r23
    a7da:	61 95       	neg	r22
    a7dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a7de:	8f 4f       	sbci	r24, 0xFF	; 255
    a7e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a7e2:	08 95       	ret

0000a7e4 <__floatunsisf>:
    a7e4:	e8 94       	clt
    a7e6:	09 c0       	rjmp	.+18     	; 0xa7fa <__floatsisf+0x12>

0000a7e8 <__floatsisf>:
    a7e8:	97 fb       	bst	r25, 7
    a7ea:	3e f4       	brtc	.+14     	; 0xa7fa <__floatsisf+0x12>
    a7ec:	90 95       	com	r25
    a7ee:	80 95       	com	r24
    a7f0:	70 95       	com	r23
    a7f2:	61 95       	neg	r22
    a7f4:	7f 4f       	sbci	r23, 0xFF	; 255
    a7f6:	8f 4f       	sbci	r24, 0xFF	; 255
    a7f8:	9f 4f       	sbci	r25, 0xFF	; 255
    a7fa:	99 23       	and	r25, r25
    a7fc:	a9 f0       	breq	.+42     	; 0xa828 <__floatsisf+0x40>
    a7fe:	f9 2f       	mov	r31, r25
    a800:	96 e9       	ldi	r25, 0x96	; 150
    a802:	bb 27       	eor	r27, r27
    a804:	93 95       	inc	r25
    a806:	f6 95       	lsr	r31
    a808:	87 95       	ror	r24
    a80a:	77 95       	ror	r23
    a80c:	67 95       	ror	r22
    a80e:	b7 95       	ror	r27
    a810:	f1 11       	cpse	r31, r1
    a812:	f8 cf       	rjmp	.-16     	; 0xa804 <__floatsisf+0x1c>
    a814:	fa f4       	brpl	.+62     	; 0xa854 <__floatsisf+0x6c>
    a816:	bb 0f       	add	r27, r27
    a818:	11 f4       	brne	.+4      	; 0xa81e <__floatsisf+0x36>
    a81a:	60 ff       	sbrs	r22, 0
    a81c:	1b c0       	rjmp	.+54     	; 0xa854 <__floatsisf+0x6c>
    a81e:	6f 5f       	subi	r22, 0xFF	; 255
    a820:	7f 4f       	sbci	r23, 0xFF	; 255
    a822:	8f 4f       	sbci	r24, 0xFF	; 255
    a824:	9f 4f       	sbci	r25, 0xFF	; 255
    a826:	16 c0       	rjmp	.+44     	; 0xa854 <__floatsisf+0x6c>
    a828:	88 23       	and	r24, r24
    a82a:	11 f0       	breq	.+4      	; 0xa830 <__floatsisf+0x48>
    a82c:	96 e9       	ldi	r25, 0x96	; 150
    a82e:	11 c0       	rjmp	.+34     	; 0xa852 <__floatsisf+0x6a>
    a830:	77 23       	and	r23, r23
    a832:	21 f0       	breq	.+8      	; 0xa83c <__floatsisf+0x54>
    a834:	9e e8       	ldi	r25, 0x8E	; 142
    a836:	87 2f       	mov	r24, r23
    a838:	76 2f       	mov	r23, r22
    a83a:	05 c0       	rjmp	.+10     	; 0xa846 <__floatsisf+0x5e>
    a83c:	66 23       	and	r22, r22
    a83e:	71 f0       	breq	.+28     	; 0xa85c <__floatsisf+0x74>
    a840:	96 e8       	ldi	r25, 0x86	; 134
    a842:	86 2f       	mov	r24, r22
    a844:	70 e0       	ldi	r23, 0x00	; 0
    a846:	60 e0       	ldi	r22, 0x00	; 0
    a848:	2a f0       	brmi	.+10     	; 0xa854 <__floatsisf+0x6c>
    a84a:	9a 95       	dec	r25
    a84c:	66 0f       	add	r22, r22
    a84e:	77 1f       	adc	r23, r23
    a850:	88 1f       	adc	r24, r24
    a852:	da f7       	brpl	.-10     	; 0xa84a <__floatsisf+0x62>
    a854:	88 0f       	add	r24, r24
    a856:	96 95       	lsr	r25
    a858:	87 95       	ror	r24
    a85a:	97 f9       	bld	r25, 7
    a85c:	08 95       	ret

0000a85e <__floatundisf>:
    a85e:	e8 94       	clt

0000a860 <__fp_di2sf>:
    a860:	f9 2f       	mov	r31, r25
    a862:	96 eb       	ldi	r25, 0xB6	; 182
    a864:	ff 23       	and	r31, r31
    a866:	81 f0       	breq	.+32     	; 0xa888 <__fp_di2sf+0x28>
    a868:	12 16       	cp	r1, r18
    a86a:	13 06       	cpc	r1, r19
    a86c:	14 06       	cpc	r1, r20
    a86e:	44 0b       	sbc	r20, r20
    a870:	93 95       	inc	r25
    a872:	f6 95       	lsr	r31
    a874:	87 95       	ror	r24
    a876:	77 95       	ror	r23
    a878:	67 95       	ror	r22
    a87a:	57 95       	ror	r21
    a87c:	40 40       	sbci	r20, 0x00	; 0
    a87e:	ff 23       	and	r31, r31
    a880:	b9 f7       	brne	.-18     	; 0xa870 <__fp_di2sf+0x10>
    a882:	1b c0       	rjmp	.+54     	; 0xa8ba <__fp_di2sf+0x5a>
    a884:	99 27       	eor	r25, r25
    a886:	08 95       	ret
    a888:	88 23       	and	r24, r24
    a88a:	51 f4       	brne	.+20     	; 0xa8a0 <__fp_di2sf+0x40>
    a88c:	98 50       	subi	r25, 0x08	; 8
    a88e:	d2 f7       	brpl	.-12     	; 0xa884 <__fp_di2sf+0x24>
    a890:	87 2b       	or	r24, r23
    a892:	76 2f       	mov	r23, r22
    a894:	65 2f       	mov	r22, r21
    a896:	54 2f       	mov	r21, r20
    a898:	43 2f       	mov	r20, r19
    a89a:	32 2f       	mov	r19, r18
    a89c:	20 e0       	ldi	r18, 0x00	; 0
    a89e:	b1 f3       	breq	.-20     	; 0xa88c <__fp_di2sf+0x2c>
    a8a0:	12 16       	cp	r1, r18
    a8a2:	13 06       	cpc	r1, r19
    a8a4:	14 06       	cpc	r1, r20
    a8a6:	44 0b       	sbc	r20, r20
    a8a8:	88 23       	and	r24, r24
    a8aa:	3a f0       	brmi	.+14     	; 0xa8ba <__fp_di2sf+0x5a>
    a8ac:	9a 95       	dec	r25
    a8ae:	44 0f       	add	r20, r20
    a8b0:	55 1f       	adc	r21, r21
    a8b2:	66 1f       	adc	r22, r22
    a8b4:	77 1f       	adc	r23, r23
    a8b6:	88 1f       	adc	r24, r24
    a8b8:	ca f7       	brpl	.-14     	; 0xa8ac <__fp_di2sf+0x4c>
    a8ba:	55 23       	and	r21, r21
    a8bc:	4a f4       	brpl	.+18     	; 0xa8d0 <__fp_di2sf+0x70>
    a8be:	44 0f       	add	r20, r20
    a8c0:	55 1f       	adc	r21, r21
    a8c2:	11 f4       	brne	.+4      	; 0xa8c8 <__fp_di2sf+0x68>
    a8c4:	60 ff       	sbrs	r22, 0
    a8c6:	04 c0       	rjmp	.+8      	; 0xa8d0 <__fp_di2sf+0x70>
    a8c8:	6f 5f       	subi	r22, 0xFF	; 255
    a8ca:	7f 4f       	sbci	r23, 0xFF	; 255
    a8cc:	8f 4f       	sbci	r24, 0xFF	; 255
    a8ce:	9f 4f       	sbci	r25, 0xFF	; 255
    a8d0:	88 0f       	add	r24, r24
    a8d2:	96 95       	lsr	r25
    a8d4:	87 95       	ror	r24
    a8d6:	97 f9       	bld	r25, 7
    a8d8:	08 95       	ret

0000a8da <__fp_cmp>:
    a8da:	99 0f       	add	r25, r25
    a8dc:	00 08       	sbc	r0, r0
    a8de:	55 0f       	add	r21, r21
    a8e0:	aa 0b       	sbc	r26, r26
    a8e2:	e0 e8       	ldi	r30, 0x80	; 128
    a8e4:	fe ef       	ldi	r31, 0xFE	; 254
    a8e6:	16 16       	cp	r1, r22
    a8e8:	17 06       	cpc	r1, r23
    a8ea:	e8 07       	cpc	r30, r24
    a8ec:	f9 07       	cpc	r31, r25
    a8ee:	c0 f0       	brcs	.+48     	; 0xa920 <__fp_cmp+0x46>
    a8f0:	12 16       	cp	r1, r18
    a8f2:	13 06       	cpc	r1, r19
    a8f4:	e4 07       	cpc	r30, r20
    a8f6:	f5 07       	cpc	r31, r21
    a8f8:	98 f0       	brcs	.+38     	; 0xa920 <__fp_cmp+0x46>
    a8fa:	62 1b       	sub	r22, r18
    a8fc:	73 0b       	sbc	r23, r19
    a8fe:	84 0b       	sbc	r24, r20
    a900:	95 0b       	sbc	r25, r21
    a902:	39 f4       	brne	.+14     	; 0xa912 <__fp_cmp+0x38>
    a904:	0a 26       	eor	r0, r26
    a906:	61 f0       	breq	.+24     	; 0xa920 <__fp_cmp+0x46>
    a908:	23 2b       	or	r18, r19
    a90a:	24 2b       	or	r18, r20
    a90c:	25 2b       	or	r18, r21
    a90e:	21 f4       	brne	.+8      	; 0xa918 <__fp_cmp+0x3e>
    a910:	08 95       	ret
    a912:	0a 26       	eor	r0, r26
    a914:	09 f4       	brne	.+2      	; 0xa918 <__fp_cmp+0x3e>
    a916:	a1 40       	sbci	r26, 0x01	; 1
    a918:	a6 95       	lsr	r26
    a91a:	8f ef       	ldi	r24, 0xFF	; 255
    a91c:	81 1d       	adc	r24, r1
    a91e:	81 1d       	adc	r24, r1
    a920:	08 95       	ret

0000a922 <__fp_inf>:
    a922:	97 f9       	bld	r25, 7
    a924:	9f 67       	ori	r25, 0x7F	; 127
    a926:	80 e8       	ldi	r24, 0x80	; 128
    a928:	70 e0       	ldi	r23, 0x00	; 0
    a92a:	60 e0       	ldi	r22, 0x00	; 0
    a92c:	08 95       	ret

0000a92e <__fp_nan>:
    a92e:	9f ef       	ldi	r25, 0xFF	; 255
    a930:	80 ec       	ldi	r24, 0xC0	; 192
    a932:	08 95       	ret

0000a934 <__fp_negdi>:
    a934:	90 95       	com	r25
    a936:	80 95       	com	r24
    a938:	70 95       	com	r23
    a93a:	60 95       	com	r22
    a93c:	50 95       	com	r21
    a93e:	40 95       	com	r20
    a940:	30 95       	com	r19
    a942:	21 95       	neg	r18
    a944:	3f 4f       	sbci	r19, 0xFF	; 255
    a946:	4f 4f       	sbci	r20, 0xFF	; 255
    a948:	5f 4f       	sbci	r21, 0xFF	; 255
    a94a:	6f 4f       	sbci	r22, 0xFF	; 255
    a94c:	7f 4f       	sbci	r23, 0xFF	; 255
    a94e:	8f 4f       	sbci	r24, 0xFF	; 255
    a950:	9f 4f       	sbci	r25, 0xFF	; 255
    a952:	08 95       	ret

0000a954 <__fp_pscA>:
    a954:	00 24       	eor	r0, r0
    a956:	0a 94       	dec	r0
    a958:	16 16       	cp	r1, r22
    a95a:	17 06       	cpc	r1, r23
    a95c:	18 06       	cpc	r1, r24
    a95e:	09 06       	cpc	r0, r25
    a960:	08 95       	ret

0000a962 <__fp_pscB>:
    a962:	00 24       	eor	r0, r0
    a964:	0a 94       	dec	r0
    a966:	12 16       	cp	r1, r18
    a968:	13 06       	cpc	r1, r19
    a96a:	14 06       	cpc	r1, r20
    a96c:	05 06       	cpc	r0, r21
    a96e:	08 95       	ret

0000a970 <__fp_round>:
    a970:	09 2e       	mov	r0, r25
    a972:	03 94       	inc	r0
    a974:	00 0c       	add	r0, r0
    a976:	11 f4       	brne	.+4      	; 0xa97c <__fp_round+0xc>
    a978:	88 23       	and	r24, r24
    a97a:	52 f0       	brmi	.+20     	; 0xa990 <__fp_round+0x20>
    a97c:	bb 0f       	add	r27, r27
    a97e:	40 f4       	brcc	.+16     	; 0xa990 <__fp_round+0x20>
    a980:	bf 2b       	or	r27, r31
    a982:	11 f4       	brne	.+4      	; 0xa988 <__fp_round+0x18>
    a984:	60 ff       	sbrs	r22, 0
    a986:	04 c0       	rjmp	.+8      	; 0xa990 <__fp_round+0x20>
    a988:	6f 5f       	subi	r22, 0xFF	; 255
    a98a:	7f 4f       	sbci	r23, 0xFF	; 255
    a98c:	8f 4f       	sbci	r24, 0xFF	; 255
    a98e:	9f 4f       	sbci	r25, 0xFF	; 255
    a990:	08 95       	ret

0000a992 <__fp_split3>:
    a992:	57 fd       	sbrc	r21, 7
    a994:	90 58       	subi	r25, 0x80	; 128
    a996:	44 0f       	add	r20, r20
    a998:	55 1f       	adc	r21, r21
    a99a:	59 f0       	breq	.+22     	; 0xa9b2 <__fp_splitA+0x10>
    a99c:	5f 3f       	cpi	r21, 0xFF	; 255
    a99e:	71 f0       	breq	.+28     	; 0xa9bc <__fp_splitA+0x1a>
    a9a0:	47 95       	ror	r20

0000a9a2 <__fp_splitA>:
    a9a2:	88 0f       	add	r24, r24
    a9a4:	97 fb       	bst	r25, 7
    a9a6:	99 1f       	adc	r25, r25
    a9a8:	61 f0       	breq	.+24     	; 0xa9c2 <__fp_splitA+0x20>
    a9aa:	9f 3f       	cpi	r25, 0xFF	; 255
    a9ac:	79 f0       	breq	.+30     	; 0xa9cc <__fp_splitA+0x2a>
    a9ae:	87 95       	ror	r24
    a9b0:	08 95       	ret
    a9b2:	12 16       	cp	r1, r18
    a9b4:	13 06       	cpc	r1, r19
    a9b6:	14 06       	cpc	r1, r20
    a9b8:	55 1f       	adc	r21, r21
    a9ba:	f2 cf       	rjmp	.-28     	; 0xa9a0 <__fp_split3+0xe>
    a9bc:	46 95       	lsr	r20
    a9be:	f1 df       	rcall	.-30     	; 0xa9a2 <__fp_splitA>
    a9c0:	08 c0       	rjmp	.+16     	; 0xa9d2 <__fp_splitA+0x30>
    a9c2:	16 16       	cp	r1, r22
    a9c4:	17 06       	cpc	r1, r23
    a9c6:	18 06       	cpc	r1, r24
    a9c8:	99 1f       	adc	r25, r25
    a9ca:	f1 cf       	rjmp	.-30     	; 0xa9ae <__fp_splitA+0xc>
    a9cc:	86 95       	lsr	r24
    a9ce:	71 05       	cpc	r23, r1
    a9d0:	61 05       	cpc	r22, r1
    a9d2:	08 94       	sec
    a9d4:	08 95       	ret

0000a9d6 <__fp_zero>:
    a9d6:	e8 94       	clt

0000a9d8 <__fp_szero>:
    a9d8:	bb 27       	eor	r27, r27
    a9da:	66 27       	eor	r22, r22
    a9dc:	77 27       	eor	r23, r23
    a9de:	cb 01       	movw	r24, r22
    a9e0:	97 f9       	bld	r25, 7
    a9e2:	08 95       	ret

0000a9e4 <__gesf2>:
    a9e4:	7a df       	rcall	.-268    	; 0xa8da <__fp_cmp>
    a9e6:	08 f4       	brcc	.+2      	; 0xa9ea <__gesf2+0x6>
    a9e8:	8f ef       	ldi	r24, 0xFF	; 255
    a9ea:	08 95       	ret
    a9ec:	0e f0       	brts	.+2      	; 0xa9f0 <__gesf2+0xc>
    a9ee:	a6 c0       	rjmp	.+332    	; 0xab3c <__fp_mpack>
    a9f0:	9e cf       	rjmp	.-196    	; 0xa92e <__fp_nan>
    a9f2:	68 94       	set
    a9f4:	96 cf       	rjmp	.-212    	; 0xa922 <__fp_inf>

0000a9f6 <log>:
    a9f6:	d5 df       	rcall	.-86     	; 0xa9a2 <__fp_splitA>
    a9f8:	c8 f3       	brcs	.-14     	; 0xa9ec <__gesf2+0x8>
    a9fa:	99 23       	and	r25, r25
    a9fc:	d1 f3       	breq	.-12     	; 0xa9f2 <__gesf2+0xe>
    a9fe:	c6 f3       	brts	.-16     	; 0xa9f0 <__gesf2+0xc>
    aa00:	df 93       	push	r29
    aa02:	cf 93       	push	r28
    aa04:	1f 93       	push	r17
    aa06:	0f 93       	push	r16
    aa08:	ff 92       	push	r15
    aa0a:	c9 2f       	mov	r28, r25
    aa0c:	dd 27       	eor	r29, r29
    aa0e:	88 23       	and	r24, r24
    aa10:	2a f0       	brmi	.+10     	; 0xaa1c <log+0x26>
    aa12:	21 97       	sbiw	r28, 0x01	; 1
    aa14:	66 0f       	add	r22, r22
    aa16:	77 1f       	adc	r23, r23
    aa18:	88 1f       	adc	r24, r24
    aa1a:	da f7       	brpl	.-10     	; 0xaa12 <log+0x1c>
    aa1c:	20 e0       	ldi	r18, 0x00	; 0
    aa1e:	30 e0       	ldi	r19, 0x00	; 0
    aa20:	40 e8       	ldi	r20, 0x80	; 128
    aa22:	5f eb       	ldi	r21, 0xBF	; 191
    aa24:	9f e3       	ldi	r25, 0x3F	; 63
    aa26:	88 39       	cpi	r24, 0x98	; 152
    aa28:	20 f0       	brcs	.+8      	; 0xaa32 <log+0x3c>
    aa2a:	80 3e       	cpi	r24, 0xE0	; 224
    aa2c:	30 f0       	brcs	.+12     	; 0xaa3a <log+0x44>
    aa2e:	21 96       	adiw	r28, 0x01	; 1
    aa30:	8f 77       	andi	r24, 0x7F	; 127
    aa32:	9d dd       	rcall	.-1222   	; 0xa56e <__addsf3>
    aa34:	ec e0       	ldi	r30, 0x0C	; 12
    aa36:	f2 e0       	ldi	r31, 0x02	; 2
    aa38:	03 c0       	rjmp	.+6      	; 0xaa40 <log+0x4a>
    aa3a:	99 dd       	rcall	.-1230   	; 0xa56e <__addsf3>
    aa3c:	e9 e3       	ldi	r30, 0x39	; 57
    aa3e:	f2 e0       	ldi	r31, 0x02	; 2
    aa40:	8b d0       	rcall	.+278    	; 0xab58 <__fp_powser>
    aa42:	8b 01       	movw	r16, r22
    aa44:	be 01       	movw	r22, r28
    aa46:	ec 01       	movw	r28, r24
    aa48:	fb 2e       	mov	r15, r27
    aa4a:	6f 57       	subi	r22, 0x7F	; 127
    aa4c:	71 09       	sbc	r23, r1
    aa4e:	75 95       	asr	r23
    aa50:	77 1f       	adc	r23, r23
    aa52:	88 0b       	sbc	r24, r24
    aa54:	99 0b       	sbc	r25, r25
    aa56:	c8 de       	rcall	.-624    	; 0xa7e8 <__floatsisf>
    aa58:	28 e1       	ldi	r18, 0x18	; 24
    aa5a:	32 e7       	ldi	r19, 0x72	; 114
    aa5c:	41 e3       	ldi	r20, 0x31	; 49
    aa5e:	5f e3       	ldi	r21, 0x3F	; 63
    aa60:	16 d0       	rcall	.+44     	; 0xaa8e <__mulsf3x>
    aa62:	af 2d       	mov	r26, r15
    aa64:	98 01       	movw	r18, r16
    aa66:	ae 01       	movw	r20, r28
    aa68:	ff 90       	pop	r15
    aa6a:	0f 91       	pop	r16
    aa6c:	1f 91       	pop	r17
    aa6e:	cf 91       	pop	r28
    aa70:	df 91       	pop	r29
    aa72:	8e dd       	rcall	.-1252   	; 0xa590 <__addsf3x>
    aa74:	7d cf       	rjmp	.-262    	; 0xa970 <__fp_round>

0000aa76 <__mulsf3>:
    aa76:	0b d0       	rcall	.+22     	; 0xaa8e <__mulsf3x>
    aa78:	7b cf       	rjmp	.-266    	; 0xa970 <__fp_round>
    aa7a:	6c df       	rcall	.-296    	; 0xa954 <__fp_pscA>
    aa7c:	28 f0       	brcs	.+10     	; 0xaa88 <__mulsf3+0x12>
    aa7e:	71 df       	rcall	.-286    	; 0xa962 <__fp_pscB>
    aa80:	18 f0       	brcs	.+6      	; 0xaa88 <__mulsf3+0x12>
    aa82:	95 23       	and	r25, r21
    aa84:	09 f0       	breq	.+2      	; 0xaa88 <__mulsf3+0x12>
    aa86:	4d cf       	rjmp	.-358    	; 0xa922 <__fp_inf>
    aa88:	52 cf       	rjmp	.-348    	; 0xa92e <__fp_nan>
    aa8a:	11 24       	eor	r1, r1
    aa8c:	a5 cf       	rjmp	.-182    	; 0xa9d8 <__fp_szero>

0000aa8e <__mulsf3x>:
    aa8e:	81 df       	rcall	.-254    	; 0xa992 <__fp_split3>
    aa90:	a0 f3       	brcs	.-24     	; 0xaa7a <__mulsf3+0x4>

0000aa92 <__mulsf3_pse>:
    aa92:	95 9f       	mul	r25, r21
    aa94:	d1 f3       	breq	.-12     	; 0xaa8a <__mulsf3+0x14>
    aa96:	95 0f       	add	r25, r21
    aa98:	50 e0       	ldi	r21, 0x00	; 0
    aa9a:	55 1f       	adc	r21, r21
    aa9c:	62 9f       	mul	r22, r18
    aa9e:	f0 01       	movw	r30, r0
    aaa0:	72 9f       	mul	r23, r18
    aaa2:	bb 27       	eor	r27, r27
    aaa4:	f0 0d       	add	r31, r0
    aaa6:	b1 1d       	adc	r27, r1
    aaa8:	63 9f       	mul	r22, r19
    aaaa:	aa 27       	eor	r26, r26
    aaac:	f0 0d       	add	r31, r0
    aaae:	b1 1d       	adc	r27, r1
    aab0:	aa 1f       	adc	r26, r26
    aab2:	64 9f       	mul	r22, r20
    aab4:	66 27       	eor	r22, r22
    aab6:	b0 0d       	add	r27, r0
    aab8:	a1 1d       	adc	r26, r1
    aaba:	66 1f       	adc	r22, r22
    aabc:	82 9f       	mul	r24, r18
    aabe:	22 27       	eor	r18, r18
    aac0:	b0 0d       	add	r27, r0
    aac2:	a1 1d       	adc	r26, r1
    aac4:	62 1f       	adc	r22, r18
    aac6:	73 9f       	mul	r23, r19
    aac8:	b0 0d       	add	r27, r0
    aaca:	a1 1d       	adc	r26, r1
    aacc:	62 1f       	adc	r22, r18
    aace:	83 9f       	mul	r24, r19
    aad0:	a0 0d       	add	r26, r0
    aad2:	61 1d       	adc	r22, r1
    aad4:	22 1f       	adc	r18, r18
    aad6:	74 9f       	mul	r23, r20
    aad8:	33 27       	eor	r19, r19
    aada:	a0 0d       	add	r26, r0
    aadc:	61 1d       	adc	r22, r1
    aade:	23 1f       	adc	r18, r19
    aae0:	84 9f       	mul	r24, r20
    aae2:	60 0d       	add	r22, r0
    aae4:	21 1d       	adc	r18, r1
    aae6:	82 2f       	mov	r24, r18
    aae8:	76 2f       	mov	r23, r22
    aaea:	6a 2f       	mov	r22, r26
    aaec:	11 24       	eor	r1, r1
    aaee:	9f 57       	subi	r25, 0x7F	; 127
    aaf0:	50 40       	sbci	r21, 0x00	; 0
    aaf2:	8a f0       	brmi	.+34     	; 0xab16 <__mulsf3_pse+0x84>
    aaf4:	e1 f0       	breq	.+56     	; 0xab2e <__mulsf3_pse+0x9c>
    aaf6:	88 23       	and	r24, r24
    aaf8:	4a f0       	brmi	.+18     	; 0xab0c <__mulsf3_pse+0x7a>
    aafa:	ee 0f       	add	r30, r30
    aafc:	ff 1f       	adc	r31, r31
    aafe:	bb 1f       	adc	r27, r27
    ab00:	66 1f       	adc	r22, r22
    ab02:	77 1f       	adc	r23, r23
    ab04:	88 1f       	adc	r24, r24
    ab06:	91 50       	subi	r25, 0x01	; 1
    ab08:	50 40       	sbci	r21, 0x00	; 0
    ab0a:	a9 f7       	brne	.-22     	; 0xaaf6 <__mulsf3_pse+0x64>
    ab0c:	9e 3f       	cpi	r25, 0xFE	; 254
    ab0e:	51 05       	cpc	r21, r1
    ab10:	70 f0       	brcs	.+28     	; 0xab2e <__mulsf3_pse+0x9c>
    ab12:	07 cf       	rjmp	.-498    	; 0xa922 <__fp_inf>
    ab14:	61 cf       	rjmp	.-318    	; 0xa9d8 <__fp_szero>
    ab16:	5f 3f       	cpi	r21, 0xFF	; 255
    ab18:	ec f3       	brlt	.-6      	; 0xab14 <__mulsf3_pse+0x82>
    ab1a:	98 3e       	cpi	r25, 0xE8	; 232
    ab1c:	dc f3       	brlt	.-10     	; 0xab14 <__mulsf3_pse+0x82>
    ab1e:	86 95       	lsr	r24
    ab20:	77 95       	ror	r23
    ab22:	67 95       	ror	r22
    ab24:	b7 95       	ror	r27
    ab26:	f7 95       	ror	r31
    ab28:	e7 95       	ror	r30
    ab2a:	9f 5f       	subi	r25, 0xFF	; 255
    ab2c:	c1 f7       	brne	.-16     	; 0xab1e <__mulsf3_pse+0x8c>
    ab2e:	fe 2b       	or	r31, r30
    ab30:	88 0f       	add	r24, r24
    ab32:	91 1d       	adc	r25, r1
    ab34:	96 95       	lsr	r25
    ab36:	87 95       	ror	r24
    ab38:	97 f9       	bld	r25, 7
    ab3a:	08 95       	ret

0000ab3c <__fp_mpack>:
    ab3c:	9f 3f       	cpi	r25, 0xFF	; 255
    ab3e:	31 f0       	breq	.+12     	; 0xab4c <__fp_mpack_finite+0xc>

0000ab40 <__fp_mpack_finite>:
    ab40:	91 50       	subi	r25, 0x01	; 1
    ab42:	20 f4       	brcc	.+8      	; 0xab4c <__fp_mpack_finite+0xc>
    ab44:	87 95       	ror	r24
    ab46:	77 95       	ror	r23
    ab48:	67 95       	ror	r22
    ab4a:	b7 95       	ror	r27
    ab4c:	88 0f       	add	r24, r24
    ab4e:	91 1d       	adc	r25, r1
    ab50:	96 95       	lsr	r25
    ab52:	87 95       	ror	r24
    ab54:	97 f9       	bld	r25, 7
    ab56:	08 95       	ret

0000ab58 <__fp_powser>:
    ab58:	df 93       	push	r29
    ab5a:	cf 93       	push	r28
    ab5c:	1f 93       	push	r17
    ab5e:	0f 93       	push	r16
    ab60:	ff 92       	push	r15
    ab62:	ef 92       	push	r14
    ab64:	df 92       	push	r13
    ab66:	7b 01       	movw	r14, r22
    ab68:	8c 01       	movw	r16, r24
    ab6a:	68 94       	set
    ab6c:	05 c0       	rjmp	.+10     	; 0xab78 <__fp_powser+0x20>
    ab6e:	da 2e       	mov	r13, r26
    ab70:	ef 01       	movw	r28, r30
    ab72:	8d df       	rcall	.-230    	; 0xaa8e <__mulsf3x>
    ab74:	fe 01       	movw	r30, r28
    ab76:	e8 94       	clt
    ab78:	a5 91       	lpm	r26, Z+
    ab7a:	25 91       	lpm	r18, Z+
    ab7c:	35 91       	lpm	r19, Z+
    ab7e:	45 91       	lpm	r20, Z+
    ab80:	55 91       	lpm	r21, Z+
    ab82:	ae f3       	brts	.-22     	; 0xab6e <__fp_powser+0x16>
    ab84:	ef 01       	movw	r28, r30
    ab86:	04 dd       	rcall	.-1528   	; 0xa590 <__addsf3x>
    ab88:	fe 01       	movw	r30, r28
    ab8a:	97 01       	movw	r18, r14
    ab8c:	a8 01       	movw	r20, r16
    ab8e:	da 94       	dec	r13
    ab90:	79 f7       	brne	.-34     	; 0xab70 <__fp_powser+0x18>
    ab92:	df 90       	pop	r13
    ab94:	ef 90       	pop	r14
    ab96:	ff 90       	pop	r15
    ab98:	0f 91       	pop	r16
    ab9a:	1f 91       	pop	r17
    ab9c:	cf 91       	pop	r28
    ab9e:	df 91       	pop	r29
    aba0:	08 95       	ret

0000aba2 <vfprintf>:
    aba2:	2f 92       	push	r2
    aba4:	3f 92       	push	r3
    aba6:	4f 92       	push	r4
    aba8:	5f 92       	push	r5
    abaa:	6f 92       	push	r6
    abac:	7f 92       	push	r7
    abae:	8f 92       	push	r8
    abb0:	9f 92       	push	r9
    abb2:	af 92       	push	r10
    abb4:	bf 92       	push	r11
    abb6:	cf 92       	push	r12
    abb8:	df 92       	push	r13
    abba:	ef 92       	push	r14
    abbc:	ff 92       	push	r15
    abbe:	0f 93       	push	r16
    abc0:	1f 93       	push	r17
    abc2:	cf 93       	push	r28
    abc4:	df 93       	push	r29
    abc6:	cd b7       	in	r28, 0x3d	; 61
    abc8:	de b7       	in	r29, 0x3e	; 62
    abca:	60 97       	sbiw	r28, 0x10	; 16
    abcc:	cd bf       	out	0x3d, r28	; 61
    abce:	de bf       	out	0x3e, r29	; 62
    abd0:	7c 01       	movw	r14, r24
    abd2:	1b 01       	movw	r2, r22
    abd4:	6a 01       	movw	r12, r20
    abd6:	fc 01       	movw	r30, r24
    abd8:	16 82       	std	Z+6, r1	; 0x06
    abda:	17 82       	std	Z+7, r1	; 0x07
    abdc:	83 81       	ldd	r24, Z+3	; 0x03
    abde:	81 ff       	sbrs	r24, 1
    abe0:	2a c3       	rjmp	.+1620   	; 0xb236 <vfprintf+0x694>
    abe2:	9e 01       	movw	r18, r28
    abe4:	2f 5f       	subi	r18, 0xFF	; 255
    abe6:	3f 4f       	sbci	r19, 0xFF	; 255
    abe8:	39 01       	movw	r6, r18
    abea:	f7 01       	movw	r30, r14
    abec:	93 81       	ldd	r25, Z+3	; 0x03
    abee:	f1 01       	movw	r30, r2
    abf0:	93 fd       	sbrc	r25, 3
    abf2:	85 91       	lpm	r24, Z+
    abf4:	93 ff       	sbrs	r25, 3
    abf6:	81 91       	ld	r24, Z+
    abf8:	1f 01       	movw	r2, r30
    abfa:	88 23       	and	r24, r24
    abfc:	09 f4       	brne	.+2      	; 0xac00 <vfprintf+0x5e>
    abfe:	17 c3       	rjmp	.+1582   	; 0xb22e <vfprintf+0x68c>
    ac00:	85 32       	cpi	r24, 0x25	; 37
    ac02:	39 f4       	brne	.+14     	; 0xac12 <vfprintf+0x70>
    ac04:	93 fd       	sbrc	r25, 3
    ac06:	85 91       	lpm	r24, Z+
    ac08:	93 ff       	sbrs	r25, 3
    ac0a:	81 91       	ld	r24, Z+
    ac0c:	1f 01       	movw	r2, r30
    ac0e:	85 32       	cpi	r24, 0x25	; 37
    ac10:	31 f4       	brne	.+12     	; 0xac1e <vfprintf+0x7c>
    ac12:	b7 01       	movw	r22, r14
    ac14:	90 e0       	ldi	r25, 0x00	; 0
    ac16:	07 d7       	rcall	.+3598   	; 0xba26 <fputc>
    ac18:	56 01       	movw	r10, r12
    ac1a:	65 01       	movw	r12, r10
    ac1c:	e6 cf       	rjmp	.-52     	; 0xabea <vfprintf+0x48>
    ac1e:	10 e0       	ldi	r17, 0x00	; 0
    ac20:	51 2c       	mov	r5, r1
    ac22:	91 2c       	mov	r9, r1
    ac24:	ff e1       	ldi	r31, 0x1F	; 31
    ac26:	f9 15       	cp	r31, r9
    ac28:	d8 f0       	brcs	.+54     	; 0xac60 <vfprintf+0xbe>
    ac2a:	8b 32       	cpi	r24, 0x2B	; 43
    ac2c:	79 f0       	breq	.+30     	; 0xac4c <vfprintf+0xaa>
    ac2e:	38 f4       	brcc	.+14     	; 0xac3e <vfprintf+0x9c>
    ac30:	80 32       	cpi	r24, 0x20	; 32
    ac32:	79 f0       	breq	.+30     	; 0xac52 <vfprintf+0xb0>
    ac34:	83 32       	cpi	r24, 0x23	; 35
    ac36:	a1 f4       	brne	.+40     	; 0xac60 <vfprintf+0xbe>
    ac38:	f9 2d       	mov	r31, r9
    ac3a:	f0 61       	ori	r31, 0x10	; 16
    ac3c:	2e c0       	rjmp	.+92     	; 0xac9a <vfprintf+0xf8>
    ac3e:	8d 32       	cpi	r24, 0x2D	; 45
    ac40:	61 f0       	breq	.+24     	; 0xac5a <vfprintf+0xb8>
    ac42:	80 33       	cpi	r24, 0x30	; 48
    ac44:	69 f4       	brne	.+26     	; 0xac60 <vfprintf+0xbe>
    ac46:	29 2d       	mov	r18, r9
    ac48:	21 60       	ori	r18, 0x01	; 1
    ac4a:	2d c0       	rjmp	.+90     	; 0xaca6 <vfprintf+0x104>
    ac4c:	39 2d       	mov	r19, r9
    ac4e:	32 60       	ori	r19, 0x02	; 2
    ac50:	93 2e       	mov	r9, r19
    ac52:	89 2d       	mov	r24, r9
    ac54:	84 60       	ori	r24, 0x04	; 4
    ac56:	98 2e       	mov	r9, r24
    ac58:	2a c0       	rjmp	.+84     	; 0xacae <vfprintf+0x10c>
    ac5a:	e9 2d       	mov	r30, r9
    ac5c:	e8 60       	ori	r30, 0x08	; 8
    ac5e:	15 c0       	rjmp	.+42     	; 0xac8a <vfprintf+0xe8>
    ac60:	97 fc       	sbrc	r9, 7
    ac62:	2d c0       	rjmp	.+90     	; 0xacbe <vfprintf+0x11c>
    ac64:	20 ed       	ldi	r18, 0xD0	; 208
    ac66:	28 0f       	add	r18, r24
    ac68:	2a 30       	cpi	r18, 0x0A	; 10
    ac6a:	88 f4       	brcc	.+34     	; 0xac8e <vfprintf+0xec>
    ac6c:	96 fe       	sbrs	r9, 6
    ac6e:	06 c0       	rjmp	.+12     	; 0xac7c <vfprintf+0xda>
    ac70:	3a e0       	ldi	r19, 0x0A	; 10
    ac72:	13 9f       	mul	r17, r19
    ac74:	20 0d       	add	r18, r0
    ac76:	11 24       	eor	r1, r1
    ac78:	12 2f       	mov	r17, r18
    ac7a:	19 c0       	rjmp	.+50     	; 0xacae <vfprintf+0x10c>
    ac7c:	8a e0       	ldi	r24, 0x0A	; 10
    ac7e:	58 9e       	mul	r5, r24
    ac80:	20 0d       	add	r18, r0
    ac82:	11 24       	eor	r1, r1
    ac84:	52 2e       	mov	r5, r18
    ac86:	e9 2d       	mov	r30, r9
    ac88:	e0 62       	ori	r30, 0x20	; 32
    ac8a:	9e 2e       	mov	r9, r30
    ac8c:	10 c0       	rjmp	.+32     	; 0xacae <vfprintf+0x10c>
    ac8e:	8e 32       	cpi	r24, 0x2E	; 46
    ac90:	31 f4       	brne	.+12     	; 0xac9e <vfprintf+0xfc>
    ac92:	96 fc       	sbrc	r9, 6
    ac94:	cc c2       	rjmp	.+1432   	; 0xb22e <vfprintf+0x68c>
    ac96:	f9 2d       	mov	r31, r9
    ac98:	f0 64       	ori	r31, 0x40	; 64
    ac9a:	9f 2e       	mov	r9, r31
    ac9c:	08 c0       	rjmp	.+16     	; 0xacae <vfprintf+0x10c>
    ac9e:	8c 36       	cpi	r24, 0x6C	; 108
    aca0:	21 f4       	brne	.+8      	; 0xacaa <vfprintf+0x108>
    aca2:	29 2d       	mov	r18, r9
    aca4:	20 68       	ori	r18, 0x80	; 128
    aca6:	92 2e       	mov	r9, r18
    aca8:	02 c0       	rjmp	.+4      	; 0xacae <vfprintf+0x10c>
    acaa:	88 36       	cpi	r24, 0x68	; 104
    acac:	41 f4       	brne	.+16     	; 0xacbe <vfprintf+0x11c>
    acae:	f1 01       	movw	r30, r2
    acb0:	93 fd       	sbrc	r25, 3
    acb2:	85 91       	lpm	r24, Z+
    acb4:	93 ff       	sbrs	r25, 3
    acb6:	81 91       	ld	r24, Z+
    acb8:	1f 01       	movw	r2, r30
    acba:	81 11       	cpse	r24, r1
    acbc:	b3 cf       	rjmp	.-154    	; 0xac24 <vfprintf+0x82>
    acbe:	9b eb       	ldi	r25, 0xBB	; 187
    acc0:	98 0f       	add	r25, r24
    acc2:	93 30       	cpi	r25, 0x03	; 3
    acc4:	20 f4       	brcc	.+8      	; 0xacce <vfprintf+0x12c>
    acc6:	99 2d       	mov	r25, r9
    acc8:	90 61       	ori	r25, 0x10	; 16
    acca:	80 5e       	subi	r24, 0xE0	; 224
    accc:	07 c0       	rjmp	.+14     	; 0xacdc <vfprintf+0x13a>
    acce:	9b e9       	ldi	r25, 0x9B	; 155
    acd0:	98 0f       	add	r25, r24
    acd2:	93 30       	cpi	r25, 0x03	; 3
    acd4:	08 f0       	brcs	.+2      	; 0xacd8 <vfprintf+0x136>
    acd6:	59 c1       	rjmp	.+690    	; 0xaf8a <vfprintf+0x3e8>
    acd8:	99 2d       	mov	r25, r9
    acda:	9f 7e       	andi	r25, 0xEF	; 239
    acdc:	96 ff       	sbrs	r25, 6
    acde:	16 e0       	ldi	r17, 0x06	; 6
    ace0:	9f 73       	andi	r25, 0x3F	; 63
    ace2:	99 2e       	mov	r9, r25
    ace4:	85 36       	cpi	r24, 0x65	; 101
    ace6:	19 f4       	brne	.+6      	; 0xacee <vfprintf+0x14c>
    ace8:	90 64       	ori	r25, 0x40	; 64
    acea:	99 2e       	mov	r9, r25
    acec:	08 c0       	rjmp	.+16     	; 0xacfe <vfprintf+0x15c>
    acee:	86 36       	cpi	r24, 0x66	; 102
    acf0:	21 f4       	brne	.+8      	; 0xacfa <vfprintf+0x158>
    acf2:	39 2f       	mov	r19, r25
    acf4:	30 68       	ori	r19, 0x80	; 128
    acf6:	93 2e       	mov	r9, r19
    acf8:	02 c0       	rjmp	.+4      	; 0xacfe <vfprintf+0x15c>
    acfa:	11 11       	cpse	r17, r1
    acfc:	11 50       	subi	r17, 0x01	; 1
    acfe:	97 fe       	sbrs	r9, 7
    ad00:	07 c0       	rjmp	.+14     	; 0xad10 <vfprintf+0x16e>
    ad02:	1c 33       	cpi	r17, 0x3C	; 60
    ad04:	50 f4       	brcc	.+20     	; 0xad1a <vfprintf+0x178>
    ad06:	44 24       	eor	r4, r4
    ad08:	43 94       	inc	r4
    ad0a:	41 0e       	add	r4, r17
    ad0c:	27 e0       	ldi	r18, 0x07	; 7
    ad0e:	0b c0       	rjmp	.+22     	; 0xad26 <vfprintf+0x184>
    ad10:	18 30       	cpi	r17, 0x08	; 8
    ad12:	38 f0       	brcs	.+14     	; 0xad22 <vfprintf+0x180>
    ad14:	27 e0       	ldi	r18, 0x07	; 7
    ad16:	17 e0       	ldi	r17, 0x07	; 7
    ad18:	05 c0       	rjmp	.+10     	; 0xad24 <vfprintf+0x182>
    ad1a:	27 e0       	ldi	r18, 0x07	; 7
    ad1c:	9c e3       	ldi	r25, 0x3C	; 60
    ad1e:	49 2e       	mov	r4, r25
    ad20:	02 c0       	rjmp	.+4      	; 0xad26 <vfprintf+0x184>
    ad22:	21 2f       	mov	r18, r17
    ad24:	41 2c       	mov	r4, r1
    ad26:	56 01       	movw	r10, r12
    ad28:	84 e0       	ldi	r24, 0x04	; 4
    ad2a:	a8 0e       	add	r10, r24
    ad2c:	b1 1c       	adc	r11, r1
    ad2e:	f6 01       	movw	r30, r12
    ad30:	60 81       	ld	r22, Z
    ad32:	71 81       	ldd	r23, Z+1	; 0x01
    ad34:	82 81       	ldd	r24, Z+2	; 0x02
    ad36:	93 81       	ldd	r25, Z+3	; 0x03
    ad38:	04 2d       	mov	r16, r4
    ad3a:	a3 01       	movw	r20, r6
    ad3c:	2a d5       	rcall	.+2644   	; 0xb792 <__ftoa_engine>
    ad3e:	6c 01       	movw	r12, r24
    ad40:	f9 81       	ldd	r31, Y+1	; 0x01
    ad42:	fc 87       	std	Y+12, r31	; 0x0c
    ad44:	f0 ff       	sbrs	r31, 0
    ad46:	02 c0       	rjmp	.+4      	; 0xad4c <vfprintf+0x1aa>
    ad48:	f3 ff       	sbrs	r31, 3
    ad4a:	06 c0       	rjmp	.+12     	; 0xad58 <vfprintf+0x1b6>
    ad4c:	91 fc       	sbrc	r9, 1
    ad4e:	06 c0       	rjmp	.+12     	; 0xad5c <vfprintf+0x1ba>
    ad50:	92 fe       	sbrs	r9, 2
    ad52:	06 c0       	rjmp	.+12     	; 0xad60 <vfprintf+0x1be>
    ad54:	00 e2       	ldi	r16, 0x20	; 32
    ad56:	05 c0       	rjmp	.+10     	; 0xad62 <vfprintf+0x1c0>
    ad58:	0d e2       	ldi	r16, 0x2D	; 45
    ad5a:	03 c0       	rjmp	.+6      	; 0xad62 <vfprintf+0x1c0>
    ad5c:	0b e2       	ldi	r16, 0x2B	; 43
    ad5e:	01 c0       	rjmp	.+2      	; 0xad62 <vfprintf+0x1c0>
    ad60:	00 e0       	ldi	r16, 0x00	; 0
    ad62:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad64:	8c 70       	andi	r24, 0x0C	; 12
    ad66:	19 f0       	breq	.+6      	; 0xad6e <vfprintf+0x1cc>
    ad68:	01 11       	cpse	r16, r1
    ad6a:	43 c2       	rjmp	.+1158   	; 0xb1f2 <vfprintf+0x650>
    ad6c:	80 c2       	rjmp	.+1280   	; 0xb26e <vfprintf+0x6cc>
    ad6e:	97 fe       	sbrs	r9, 7
    ad70:	10 c0       	rjmp	.+32     	; 0xad92 <vfprintf+0x1f0>
    ad72:	4c 0c       	add	r4, r12
    ad74:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad76:	f4 ff       	sbrs	r31, 4
    ad78:	04 c0       	rjmp	.+8      	; 0xad82 <vfprintf+0x1e0>
    ad7a:	8a 81       	ldd	r24, Y+2	; 0x02
    ad7c:	81 33       	cpi	r24, 0x31	; 49
    ad7e:	09 f4       	brne	.+2      	; 0xad82 <vfprintf+0x1e0>
    ad80:	4a 94       	dec	r4
    ad82:	14 14       	cp	r1, r4
    ad84:	74 f5       	brge	.+92     	; 0xade2 <vfprintf+0x240>
    ad86:	28 e0       	ldi	r18, 0x08	; 8
    ad88:	24 15       	cp	r18, r4
    ad8a:	78 f5       	brcc	.+94     	; 0xadea <vfprintf+0x248>
    ad8c:	88 e0       	ldi	r24, 0x08	; 8
    ad8e:	48 2e       	mov	r4, r24
    ad90:	2c c0       	rjmp	.+88     	; 0xadea <vfprintf+0x248>
    ad92:	96 fc       	sbrc	r9, 6
    ad94:	2a c0       	rjmp	.+84     	; 0xadea <vfprintf+0x248>
    ad96:	81 2f       	mov	r24, r17
    ad98:	90 e0       	ldi	r25, 0x00	; 0
    ad9a:	8c 15       	cp	r24, r12
    ad9c:	9d 05       	cpc	r25, r13
    ad9e:	9c f0       	brlt	.+38     	; 0xadc6 <vfprintf+0x224>
    ada0:	3c ef       	ldi	r19, 0xFC	; 252
    ada2:	c3 16       	cp	r12, r19
    ada4:	3f ef       	ldi	r19, 0xFF	; 255
    ada6:	d3 06       	cpc	r13, r19
    ada8:	74 f0       	brlt	.+28     	; 0xadc6 <vfprintf+0x224>
    adaa:	89 2d       	mov	r24, r9
    adac:	80 68       	ori	r24, 0x80	; 128
    adae:	98 2e       	mov	r9, r24
    adb0:	0a c0       	rjmp	.+20     	; 0xadc6 <vfprintf+0x224>
    adb2:	e2 e0       	ldi	r30, 0x02	; 2
    adb4:	f0 e0       	ldi	r31, 0x00	; 0
    adb6:	ec 0f       	add	r30, r28
    adb8:	fd 1f       	adc	r31, r29
    adba:	e1 0f       	add	r30, r17
    adbc:	f1 1d       	adc	r31, r1
    adbe:	80 81       	ld	r24, Z
    adc0:	80 33       	cpi	r24, 0x30	; 48
    adc2:	19 f4       	brne	.+6      	; 0xadca <vfprintf+0x228>
    adc4:	11 50       	subi	r17, 0x01	; 1
    adc6:	11 11       	cpse	r17, r1
    adc8:	f4 cf       	rjmp	.-24     	; 0xadb2 <vfprintf+0x210>
    adca:	97 fe       	sbrs	r9, 7
    adcc:	0e c0       	rjmp	.+28     	; 0xadea <vfprintf+0x248>
    adce:	44 24       	eor	r4, r4
    add0:	43 94       	inc	r4
    add2:	41 0e       	add	r4, r17
    add4:	81 2f       	mov	r24, r17
    add6:	90 e0       	ldi	r25, 0x00	; 0
    add8:	c8 16       	cp	r12, r24
    adda:	d9 06       	cpc	r13, r25
    addc:	2c f4       	brge	.+10     	; 0xade8 <vfprintf+0x246>
    adde:	1c 19       	sub	r17, r12
    ade0:	04 c0       	rjmp	.+8      	; 0xadea <vfprintf+0x248>
    ade2:	44 24       	eor	r4, r4
    ade4:	43 94       	inc	r4
    ade6:	01 c0       	rjmp	.+2      	; 0xadea <vfprintf+0x248>
    ade8:	10 e0       	ldi	r17, 0x00	; 0
    adea:	97 fe       	sbrs	r9, 7
    adec:	06 c0       	rjmp	.+12     	; 0xadfa <vfprintf+0x258>
    adee:	1c 14       	cp	r1, r12
    adf0:	1d 04       	cpc	r1, r13
    adf2:	34 f4       	brge	.+12     	; 0xae00 <vfprintf+0x25e>
    adf4:	c6 01       	movw	r24, r12
    adf6:	01 96       	adiw	r24, 0x01	; 1
    adf8:	05 c0       	rjmp	.+10     	; 0xae04 <vfprintf+0x262>
    adfa:	85 e0       	ldi	r24, 0x05	; 5
    adfc:	90 e0       	ldi	r25, 0x00	; 0
    adfe:	02 c0       	rjmp	.+4      	; 0xae04 <vfprintf+0x262>
    ae00:	81 e0       	ldi	r24, 0x01	; 1
    ae02:	90 e0       	ldi	r25, 0x00	; 0
    ae04:	01 11       	cpse	r16, r1
    ae06:	01 96       	adiw	r24, 0x01	; 1
    ae08:	11 23       	and	r17, r17
    ae0a:	31 f0       	breq	.+12     	; 0xae18 <vfprintf+0x276>
    ae0c:	21 2f       	mov	r18, r17
    ae0e:	30 e0       	ldi	r19, 0x00	; 0
    ae10:	2f 5f       	subi	r18, 0xFF	; 255
    ae12:	3f 4f       	sbci	r19, 0xFF	; 255
    ae14:	82 0f       	add	r24, r18
    ae16:	93 1f       	adc	r25, r19
    ae18:	25 2d       	mov	r18, r5
    ae1a:	30 e0       	ldi	r19, 0x00	; 0
    ae1c:	82 17       	cp	r24, r18
    ae1e:	93 07       	cpc	r25, r19
    ae20:	14 f4       	brge	.+4      	; 0xae26 <vfprintf+0x284>
    ae22:	58 1a       	sub	r5, r24
    ae24:	01 c0       	rjmp	.+2      	; 0xae28 <vfprintf+0x286>
    ae26:	51 2c       	mov	r5, r1
    ae28:	89 2d       	mov	r24, r9
    ae2a:	89 70       	andi	r24, 0x09	; 9
    ae2c:	41 f4       	brne	.+16     	; 0xae3e <vfprintf+0x29c>
    ae2e:	55 20       	and	r5, r5
    ae30:	31 f0       	breq	.+12     	; 0xae3e <vfprintf+0x29c>
    ae32:	b7 01       	movw	r22, r14
    ae34:	80 e2       	ldi	r24, 0x20	; 32
    ae36:	90 e0       	ldi	r25, 0x00	; 0
    ae38:	f6 d5       	rcall	.+3052   	; 0xba26 <fputc>
    ae3a:	5a 94       	dec	r5
    ae3c:	f8 cf       	rjmp	.-16     	; 0xae2e <vfprintf+0x28c>
    ae3e:	00 23       	and	r16, r16
    ae40:	21 f0       	breq	.+8      	; 0xae4a <vfprintf+0x2a8>
    ae42:	b7 01       	movw	r22, r14
    ae44:	80 2f       	mov	r24, r16
    ae46:	90 e0       	ldi	r25, 0x00	; 0
    ae48:	ee d5       	rcall	.+3036   	; 0xba26 <fputc>
    ae4a:	93 fc       	sbrc	r9, 3
    ae4c:	08 c0       	rjmp	.+16     	; 0xae5e <vfprintf+0x2bc>
    ae4e:	55 20       	and	r5, r5
    ae50:	31 f0       	breq	.+12     	; 0xae5e <vfprintf+0x2bc>
    ae52:	b7 01       	movw	r22, r14
    ae54:	80 e3       	ldi	r24, 0x30	; 48
    ae56:	90 e0       	ldi	r25, 0x00	; 0
    ae58:	e6 d5       	rcall	.+3020   	; 0xba26 <fputc>
    ae5a:	5a 94       	dec	r5
    ae5c:	f8 cf       	rjmp	.-16     	; 0xae4e <vfprintf+0x2ac>
    ae5e:	97 fe       	sbrs	r9, 7
    ae60:	4a c0       	rjmp	.+148    	; 0xaef6 <vfprintf+0x354>
    ae62:	46 01       	movw	r8, r12
    ae64:	d7 fe       	sbrs	r13, 7
    ae66:	02 c0       	rjmp	.+4      	; 0xae6c <vfprintf+0x2ca>
    ae68:	81 2c       	mov	r8, r1
    ae6a:	91 2c       	mov	r9, r1
    ae6c:	c6 01       	movw	r24, r12
    ae6e:	88 19       	sub	r24, r8
    ae70:	99 09       	sbc	r25, r9
    ae72:	f3 01       	movw	r30, r6
    ae74:	e8 0f       	add	r30, r24
    ae76:	f9 1f       	adc	r31, r25
    ae78:	ed 87       	std	Y+13, r30	; 0x0d
    ae7a:	fe 87       	std	Y+14, r31	; 0x0e
    ae7c:	96 01       	movw	r18, r12
    ae7e:	24 19       	sub	r18, r4
    ae80:	31 09       	sbc	r19, r1
    ae82:	2f 87       	std	Y+15, r18	; 0x0f
    ae84:	38 8b       	std	Y+16, r19	; 0x10
    ae86:	01 2f       	mov	r16, r17
    ae88:	10 e0       	ldi	r17, 0x00	; 0
    ae8a:	11 95       	neg	r17
    ae8c:	01 95       	neg	r16
    ae8e:	11 09       	sbc	r17, r1
    ae90:	3f ef       	ldi	r19, 0xFF	; 255
    ae92:	83 16       	cp	r8, r19
    ae94:	93 06       	cpc	r9, r19
    ae96:	21 f4       	brne	.+8      	; 0xaea0 <vfprintf+0x2fe>
    ae98:	b7 01       	movw	r22, r14
    ae9a:	8e e2       	ldi	r24, 0x2E	; 46
    ae9c:	90 e0       	ldi	r25, 0x00	; 0
    ae9e:	c3 d5       	rcall	.+2950   	; 0xba26 <fputc>
    aea0:	c8 14       	cp	r12, r8
    aea2:	d9 04       	cpc	r13, r9
    aea4:	4c f0       	brlt	.+18     	; 0xaeb8 <vfprintf+0x316>
    aea6:	8f 85       	ldd	r24, Y+15	; 0x0f
    aea8:	98 89       	ldd	r25, Y+16	; 0x10
    aeaa:	88 15       	cp	r24, r8
    aeac:	99 05       	cpc	r25, r9
    aeae:	24 f4       	brge	.+8      	; 0xaeb8 <vfprintf+0x316>
    aeb0:	ed 85       	ldd	r30, Y+13	; 0x0d
    aeb2:	fe 85       	ldd	r31, Y+14	; 0x0e
    aeb4:	81 81       	ldd	r24, Z+1	; 0x01
    aeb6:	01 c0       	rjmp	.+2      	; 0xaeba <vfprintf+0x318>
    aeb8:	80 e3       	ldi	r24, 0x30	; 48
    aeba:	f1 e0       	ldi	r31, 0x01	; 1
    aebc:	8f 1a       	sub	r8, r31
    aebe:	91 08       	sbc	r9, r1
    aec0:	2d 85       	ldd	r18, Y+13	; 0x0d
    aec2:	3e 85       	ldd	r19, Y+14	; 0x0e
    aec4:	2f 5f       	subi	r18, 0xFF	; 255
    aec6:	3f 4f       	sbci	r19, 0xFF	; 255
    aec8:	2d 87       	std	Y+13, r18	; 0x0d
    aeca:	3e 87       	std	Y+14, r19	; 0x0e
    aecc:	80 16       	cp	r8, r16
    aece:	91 06       	cpc	r9, r17
    aed0:	24 f0       	brlt	.+8      	; 0xaeda <vfprintf+0x338>
    aed2:	b7 01       	movw	r22, r14
    aed4:	90 e0       	ldi	r25, 0x00	; 0
    aed6:	a7 d5       	rcall	.+2894   	; 0xba26 <fputc>
    aed8:	db cf       	rjmp	.-74     	; 0xae90 <vfprintf+0x2ee>
    aeda:	c8 14       	cp	r12, r8
    aedc:	d9 04       	cpc	r13, r9
    aede:	41 f4       	brne	.+16     	; 0xaef0 <vfprintf+0x34e>
    aee0:	9a 81       	ldd	r25, Y+2	; 0x02
    aee2:	96 33       	cpi	r25, 0x36	; 54
    aee4:	20 f4       	brcc	.+8      	; 0xaeee <vfprintf+0x34c>
    aee6:	95 33       	cpi	r25, 0x35	; 53
    aee8:	19 f4       	brne	.+6      	; 0xaef0 <vfprintf+0x34e>
    aeea:	3c 85       	ldd	r19, Y+12	; 0x0c
    aeec:	34 ff       	sbrs	r19, 4
    aeee:	81 e3       	ldi	r24, 0x31	; 49
    aef0:	b7 01       	movw	r22, r14
    aef2:	90 e0       	ldi	r25, 0x00	; 0
    aef4:	48 c0       	rjmp	.+144    	; 0xaf86 <vfprintf+0x3e4>
    aef6:	8a 81       	ldd	r24, Y+2	; 0x02
    aef8:	81 33       	cpi	r24, 0x31	; 49
    aefa:	19 f0       	breq	.+6      	; 0xaf02 <vfprintf+0x360>
    aefc:	9c 85       	ldd	r25, Y+12	; 0x0c
    aefe:	9f 7e       	andi	r25, 0xEF	; 239
    af00:	9c 87       	std	Y+12, r25	; 0x0c
    af02:	b7 01       	movw	r22, r14
    af04:	90 e0       	ldi	r25, 0x00	; 0
    af06:	8f d5       	rcall	.+2846   	; 0xba26 <fputc>
    af08:	11 11       	cpse	r17, r1
    af0a:	05 c0       	rjmp	.+10     	; 0xaf16 <vfprintf+0x374>
    af0c:	94 fc       	sbrc	r9, 4
    af0e:	16 c0       	rjmp	.+44     	; 0xaf3c <vfprintf+0x39a>
    af10:	85 e6       	ldi	r24, 0x65	; 101
    af12:	90 e0       	ldi	r25, 0x00	; 0
    af14:	15 c0       	rjmp	.+42     	; 0xaf40 <vfprintf+0x39e>
    af16:	b7 01       	movw	r22, r14
    af18:	8e e2       	ldi	r24, 0x2E	; 46
    af1a:	90 e0       	ldi	r25, 0x00	; 0
    af1c:	84 d5       	rcall	.+2824   	; 0xba26 <fputc>
    af1e:	1e 5f       	subi	r17, 0xFE	; 254
    af20:	82 e0       	ldi	r24, 0x02	; 2
    af22:	01 e0       	ldi	r16, 0x01	; 1
    af24:	08 0f       	add	r16, r24
    af26:	f3 01       	movw	r30, r6
    af28:	e8 0f       	add	r30, r24
    af2a:	f1 1d       	adc	r31, r1
    af2c:	80 81       	ld	r24, Z
    af2e:	b7 01       	movw	r22, r14
    af30:	90 e0       	ldi	r25, 0x00	; 0
    af32:	79 d5       	rcall	.+2802   	; 0xba26 <fputc>
    af34:	80 2f       	mov	r24, r16
    af36:	01 13       	cpse	r16, r17
    af38:	f4 cf       	rjmp	.-24     	; 0xaf22 <vfprintf+0x380>
    af3a:	e8 cf       	rjmp	.-48     	; 0xaf0c <vfprintf+0x36a>
    af3c:	85 e4       	ldi	r24, 0x45	; 69
    af3e:	90 e0       	ldi	r25, 0x00	; 0
    af40:	b7 01       	movw	r22, r14
    af42:	71 d5       	rcall	.+2786   	; 0xba26 <fputc>
    af44:	d7 fc       	sbrc	r13, 7
    af46:	06 c0       	rjmp	.+12     	; 0xaf54 <vfprintf+0x3b2>
    af48:	c1 14       	cp	r12, r1
    af4a:	d1 04       	cpc	r13, r1
    af4c:	41 f4       	brne	.+16     	; 0xaf5e <vfprintf+0x3bc>
    af4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    af50:	e4 ff       	sbrs	r30, 4
    af52:	05 c0       	rjmp	.+10     	; 0xaf5e <vfprintf+0x3bc>
    af54:	d1 94       	neg	r13
    af56:	c1 94       	neg	r12
    af58:	d1 08       	sbc	r13, r1
    af5a:	8d e2       	ldi	r24, 0x2D	; 45
    af5c:	01 c0       	rjmp	.+2      	; 0xaf60 <vfprintf+0x3be>
    af5e:	8b e2       	ldi	r24, 0x2B	; 43
    af60:	b7 01       	movw	r22, r14
    af62:	90 e0       	ldi	r25, 0x00	; 0
    af64:	60 d5       	rcall	.+2752   	; 0xba26 <fputc>
    af66:	80 e3       	ldi	r24, 0x30	; 48
    af68:	2a e0       	ldi	r18, 0x0A	; 10
    af6a:	c2 16       	cp	r12, r18
    af6c:	d1 04       	cpc	r13, r1
    af6e:	2c f0       	brlt	.+10     	; 0xaf7a <vfprintf+0x3d8>
    af70:	8f 5f       	subi	r24, 0xFF	; 255
    af72:	fa e0       	ldi	r31, 0x0A	; 10
    af74:	cf 1a       	sub	r12, r31
    af76:	d1 08       	sbc	r13, r1
    af78:	f7 cf       	rjmp	.-18     	; 0xaf68 <vfprintf+0x3c6>
    af7a:	b7 01       	movw	r22, r14
    af7c:	90 e0       	ldi	r25, 0x00	; 0
    af7e:	53 d5       	rcall	.+2726   	; 0xba26 <fputc>
    af80:	b7 01       	movw	r22, r14
    af82:	c6 01       	movw	r24, r12
    af84:	c0 96       	adiw	r24, 0x30	; 48
    af86:	4f d5       	rcall	.+2718   	; 0xba26 <fputc>
    af88:	49 c1       	rjmp	.+658    	; 0xb21c <vfprintf+0x67a>
    af8a:	83 36       	cpi	r24, 0x63	; 99
    af8c:	31 f0       	breq	.+12     	; 0xaf9a <vfprintf+0x3f8>
    af8e:	83 37       	cpi	r24, 0x73	; 115
    af90:	79 f0       	breq	.+30     	; 0xafb0 <vfprintf+0x40e>
    af92:	83 35       	cpi	r24, 0x53	; 83
    af94:	09 f0       	breq	.+2      	; 0xaf98 <vfprintf+0x3f6>
    af96:	52 c0       	rjmp	.+164    	; 0xb03c <vfprintf+0x49a>
    af98:	1f c0       	rjmp	.+62     	; 0xafd8 <vfprintf+0x436>
    af9a:	56 01       	movw	r10, r12
    af9c:	32 e0       	ldi	r19, 0x02	; 2
    af9e:	a3 0e       	add	r10, r19
    afa0:	b1 1c       	adc	r11, r1
    afa2:	f6 01       	movw	r30, r12
    afa4:	80 81       	ld	r24, Z
    afa6:	89 83       	std	Y+1, r24	; 0x01
    afa8:	01 e0       	ldi	r16, 0x01	; 1
    afaa:	10 e0       	ldi	r17, 0x00	; 0
    afac:	63 01       	movw	r12, r6
    afae:	11 c0       	rjmp	.+34     	; 0xafd2 <vfprintf+0x430>
    afb0:	56 01       	movw	r10, r12
    afb2:	f2 e0       	ldi	r31, 0x02	; 2
    afb4:	af 0e       	add	r10, r31
    afb6:	b1 1c       	adc	r11, r1
    afb8:	f6 01       	movw	r30, r12
    afba:	c0 80       	ld	r12, Z
    afbc:	d1 80       	ldd	r13, Z+1	; 0x01
    afbe:	96 fe       	sbrs	r9, 6
    afc0:	03 c0       	rjmp	.+6      	; 0xafc8 <vfprintf+0x426>
    afc2:	61 2f       	mov	r22, r17
    afc4:	70 e0       	ldi	r23, 0x00	; 0
    afc6:	02 c0       	rjmp	.+4      	; 0xafcc <vfprintf+0x42a>
    afc8:	6f ef       	ldi	r22, 0xFF	; 255
    afca:	7f ef       	ldi	r23, 0xFF	; 255
    afcc:	c6 01       	movw	r24, r12
    afce:	d6 d4       	rcall	.+2476   	; 0xb97c <strnlen>
    afd0:	8c 01       	movw	r16, r24
    afd2:	f9 2d       	mov	r31, r9
    afd4:	ff 77       	andi	r31, 0x7F	; 127
    afd6:	13 c0       	rjmp	.+38     	; 0xaffe <vfprintf+0x45c>
    afd8:	56 01       	movw	r10, r12
    afda:	22 e0       	ldi	r18, 0x02	; 2
    afdc:	a2 0e       	add	r10, r18
    afde:	b1 1c       	adc	r11, r1
    afe0:	f6 01       	movw	r30, r12
    afe2:	c0 80       	ld	r12, Z
    afe4:	d1 80       	ldd	r13, Z+1	; 0x01
    afe6:	96 fe       	sbrs	r9, 6
    afe8:	03 c0       	rjmp	.+6      	; 0xaff0 <vfprintf+0x44e>
    afea:	61 2f       	mov	r22, r17
    afec:	70 e0       	ldi	r23, 0x00	; 0
    afee:	02 c0       	rjmp	.+4      	; 0xaff4 <vfprintf+0x452>
    aff0:	6f ef       	ldi	r22, 0xFF	; 255
    aff2:	7f ef       	ldi	r23, 0xFF	; 255
    aff4:	c6 01       	movw	r24, r12
    aff6:	a5 d4       	rcall	.+2378   	; 0xb942 <strnlen_P>
    aff8:	8c 01       	movw	r16, r24
    affa:	f9 2d       	mov	r31, r9
    affc:	f0 68       	ori	r31, 0x80	; 128
    affe:	9f 2e       	mov	r9, r31
    b000:	f3 fd       	sbrc	r31, 3
    b002:	18 c0       	rjmp	.+48     	; 0xb034 <vfprintf+0x492>
    b004:	85 2d       	mov	r24, r5
    b006:	90 e0       	ldi	r25, 0x00	; 0
    b008:	08 17       	cp	r16, r24
    b00a:	19 07       	cpc	r17, r25
    b00c:	98 f4       	brcc	.+38     	; 0xb034 <vfprintf+0x492>
    b00e:	b7 01       	movw	r22, r14
    b010:	80 e2       	ldi	r24, 0x20	; 32
    b012:	90 e0       	ldi	r25, 0x00	; 0
    b014:	08 d5       	rcall	.+2576   	; 0xba26 <fputc>
    b016:	5a 94       	dec	r5
    b018:	f5 cf       	rjmp	.-22     	; 0xb004 <vfprintf+0x462>
    b01a:	f6 01       	movw	r30, r12
    b01c:	97 fc       	sbrc	r9, 7
    b01e:	85 91       	lpm	r24, Z+
    b020:	97 fe       	sbrs	r9, 7
    b022:	81 91       	ld	r24, Z+
    b024:	6f 01       	movw	r12, r30
    b026:	b7 01       	movw	r22, r14
    b028:	90 e0       	ldi	r25, 0x00	; 0
    b02a:	fd d4       	rcall	.+2554   	; 0xba26 <fputc>
    b02c:	51 10       	cpse	r5, r1
    b02e:	5a 94       	dec	r5
    b030:	01 50       	subi	r16, 0x01	; 1
    b032:	11 09       	sbc	r17, r1
    b034:	01 15       	cp	r16, r1
    b036:	11 05       	cpc	r17, r1
    b038:	81 f7       	brne	.-32     	; 0xb01a <vfprintf+0x478>
    b03a:	f0 c0       	rjmp	.+480    	; 0xb21c <vfprintf+0x67a>
    b03c:	84 36       	cpi	r24, 0x64	; 100
    b03e:	11 f0       	breq	.+4      	; 0xb044 <vfprintf+0x4a2>
    b040:	89 36       	cpi	r24, 0x69	; 105
    b042:	59 f5       	brne	.+86     	; 0xb09a <vfprintf+0x4f8>
    b044:	56 01       	movw	r10, r12
    b046:	97 fe       	sbrs	r9, 7
    b048:	09 c0       	rjmp	.+18     	; 0xb05c <vfprintf+0x4ba>
    b04a:	24 e0       	ldi	r18, 0x04	; 4
    b04c:	a2 0e       	add	r10, r18
    b04e:	b1 1c       	adc	r11, r1
    b050:	f6 01       	movw	r30, r12
    b052:	60 81       	ld	r22, Z
    b054:	71 81       	ldd	r23, Z+1	; 0x01
    b056:	82 81       	ldd	r24, Z+2	; 0x02
    b058:	93 81       	ldd	r25, Z+3	; 0x03
    b05a:	0a c0       	rjmp	.+20     	; 0xb070 <vfprintf+0x4ce>
    b05c:	f2 e0       	ldi	r31, 0x02	; 2
    b05e:	af 0e       	add	r10, r31
    b060:	b1 1c       	adc	r11, r1
    b062:	f6 01       	movw	r30, r12
    b064:	60 81       	ld	r22, Z
    b066:	71 81       	ldd	r23, Z+1	; 0x01
    b068:	07 2e       	mov	r0, r23
    b06a:	00 0c       	add	r0, r0
    b06c:	88 0b       	sbc	r24, r24
    b06e:	99 0b       	sbc	r25, r25
    b070:	f9 2d       	mov	r31, r9
    b072:	ff 76       	andi	r31, 0x6F	; 111
    b074:	9f 2e       	mov	r9, r31
    b076:	97 ff       	sbrs	r25, 7
    b078:	09 c0       	rjmp	.+18     	; 0xb08c <vfprintf+0x4ea>
    b07a:	90 95       	com	r25
    b07c:	80 95       	com	r24
    b07e:	70 95       	com	r23
    b080:	61 95       	neg	r22
    b082:	7f 4f       	sbci	r23, 0xFF	; 255
    b084:	8f 4f       	sbci	r24, 0xFF	; 255
    b086:	9f 4f       	sbci	r25, 0xFF	; 255
    b088:	f0 68       	ori	r31, 0x80	; 128
    b08a:	9f 2e       	mov	r9, r31
    b08c:	2a e0       	ldi	r18, 0x0A	; 10
    b08e:	30 e0       	ldi	r19, 0x00	; 0
    b090:	a3 01       	movw	r20, r6
    b092:	70 d5       	rcall	.+2784   	; 0xbb74 <__ultoa_invert>
    b094:	c8 2e       	mov	r12, r24
    b096:	c6 18       	sub	r12, r6
    b098:	3e c0       	rjmp	.+124    	; 0xb116 <vfprintf+0x574>
    b09a:	09 2d       	mov	r16, r9
    b09c:	85 37       	cpi	r24, 0x75	; 117
    b09e:	21 f4       	brne	.+8      	; 0xb0a8 <vfprintf+0x506>
    b0a0:	0f 7e       	andi	r16, 0xEF	; 239
    b0a2:	2a e0       	ldi	r18, 0x0A	; 10
    b0a4:	30 e0       	ldi	r19, 0x00	; 0
    b0a6:	1d c0       	rjmp	.+58     	; 0xb0e2 <vfprintf+0x540>
    b0a8:	09 7f       	andi	r16, 0xF9	; 249
    b0aa:	8f 36       	cpi	r24, 0x6F	; 111
    b0ac:	91 f0       	breq	.+36     	; 0xb0d2 <vfprintf+0x530>
    b0ae:	18 f4       	brcc	.+6      	; 0xb0b6 <vfprintf+0x514>
    b0b0:	88 35       	cpi	r24, 0x58	; 88
    b0b2:	59 f0       	breq	.+22     	; 0xb0ca <vfprintf+0x528>
    b0b4:	bc c0       	rjmp	.+376    	; 0xb22e <vfprintf+0x68c>
    b0b6:	80 37       	cpi	r24, 0x70	; 112
    b0b8:	19 f0       	breq	.+6      	; 0xb0c0 <vfprintf+0x51e>
    b0ba:	88 37       	cpi	r24, 0x78	; 120
    b0bc:	11 f0       	breq	.+4      	; 0xb0c2 <vfprintf+0x520>
    b0be:	b7 c0       	rjmp	.+366    	; 0xb22e <vfprintf+0x68c>
    b0c0:	00 61       	ori	r16, 0x10	; 16
    b0c2:	04 ff       	sbrs	r16, 4
    b0c4:	09 c0       	rjmp	.+18     	; 0xb0d8 <vfprintf+0x536>
    b0c6:	04 60       	ori	r16, 0x04	; 4
    b0c8:	07 c0       	rjmp	.+14     	; 0xb0d8 <vfprintf+0x536>
    b0ca:	94 fe       	sbrs	r9, 4
    b0cc:	08 c0       	rjmp	.+16     	; 0xb0de <vfprintf+0x53c>
    b0ce:	06 60       	ori	r16, 0x06	; 6
    b0d0:	06 c0       	rjmp	.+12     	; 0xb0de <vfprintf+0x53c>
    b0d2:	28 e0       	ldi	r18, 0x08	; 8
    b0d4:	30 e0       	ldi	r19, 0x00	; 0
    b0d6:	05 c0       	rjmp	.+10     	; 0xb0e2 <vfprintf+0x540>
    b0d8:	20 e1       	ldi	r18, 0x10	; 16
    b0da:	30 e0       	ldi	r19, 0x00	; 0
    b0dc:	02 c0       	rjmp	.+4      	; 0xb0e2 <vfprintf+0x540>
    b0de:	20 e1       	ldi	r18, 0x10	; 16
    b0e0:	32 e0       	ldi	r19, 0x02	; 2
    b0e2:	56 01       	movw	r10, r12
    b0e4:	07 ff       	sbrs	r16, 7
    b0e6:	09 c0       	rjmp	.+18     	; 0xb0fa <vfprintf+0x558>
    b0e8:	84 e0       	ldi	r24, 0x04	; 4
    b0ea:	a8 0e       	add	r10, r24
    b0ec:	b1 1c       	adc	r11, r1
    b0ee:	f6 01       	movw	r30, r12
    b0f0:	60 81       	ld	r22, Z
    b0f2:	71 81       	ldd	r23, Z+1	; 0x01
    b0f4:	82 81       	ldd	r24, Z+2	; 0x02
    b0f6:	93 81       	ldd	r25, Z+3	; 0x03
    b0f8:	08 c0       	rjmp	.+16     	; 0xb10a <vfprintf+0x568>
    b0fa:	f2 e0       	ldi	r31, 0x02	; 2
    b0fc:	af 0e       	add	r10, r31
    b0fe:	b1 1c       	adc	r11, r1
    b100:	f6 01       	movw	r30, r12
    b102:	60 81       	ld	r22, Z
    b104:	71 81       	ldd	r23, Z+1	; 0x01
    b106:	80 e0       	ldi	r24, 0x00	; 0
    b108:	90 e0       	ldi	r25, 0x00	; 0
    b10a:	a3 01       	movw	r20, r6
    b10c:	33 d5       	rcall	.+2662   	; 0xbb74 <__ultoa_invert>
    b10e:	c8 2e       	mov	r12, r24
    b110:	c6 18       	sub	r12, r6
    b112:	0f 77       	andi	r16, 0x7F	; 127
    b114:	90 2e       	mov	r9, r16
    b116:	96 fe       	sbrs	r9, 6
    b118:	0b c0       	rjmp	.+22     	; 0xb130 <vfprintf+0x58e>
    b11a:	09 2d       	mov	r16, r9
    b11c:	0e 7f       	andi	r16, 0xFE	; 254
    b11e:	c1 16       	cp	r12, r17
    b120:	50 f4       	brcc	.+20     	; 0xb136 <vfprintf+0x594>
    b122:	94 fe       	sbrs	r9, 4
    b124:	0a c0       	rjmp	.+20     	; 0xb13a <vfprintf+0x598>
    b126:	92 fc       	sbrc	r9, 2
    b128:	08 c0       	rjmp	.+16     	; 0xb13a <vfprintf+0x598>
    b12a:	09 2d       	mov	r16, r9
    b12c:	0e 7e       	andi	r16, 0xEE	; 238
    b12e:	05 c0       	rjmp	.+10     	; 0xb13a <vfprintf+0x598>
    b130:	dc 2c       	mov	r13, r12
    b132:	09 2d       	mov	r16, r9
    b134:	03 c0       	rjmp	.+6      	; 0xb13c <vfprintf+0x59a>
    b136:	dc 2c       	mov	r13, r12
    b138:	01 c0       	rjmp	.+2      	; 0xb13c <vfprintf+0x59a>
    b13a:	d1 2e       	mov	r13, r17
    b13c:	04 ff       	sbrs	r16, 4
    b13e:	0d c0       	rjmp	.+26     	; 0xb15a <vfprintf+0x5b8>
    b140:	fe 01       	movw	r30, r28
    b142:	ec 0d       	add	r30, r12
    b144:	f1 1d       	adc	r31, r1
    b146:	80 81       	ld	r24, Z
    b148:	80 33       	cpi	r24, 0x30	; 48
    b14a:	11 f4       	brne	.+4      	; 0xb150 <vfprintf+0x5ae>
    b14c:	09 7e       	andi	r16, 0xE9	; 233
    b14e:	09 c0       	rjmp	.+18     	; 0xb162 <vfprintf+0x5c0>
    b150:	02 ff       	sbrs	r16, 2
    b152:	06 c0       	rjmp	.+12     	; 0xb160 <vfprintf+0x5be>
    b154:	d3 94       	inc	r13
    b156:	d3 94       	inc	r13
    b158:	04 c0       	rjmp	.+8      	; 0xb162 <vfprintf+0x5c0>
    b15a:	80 2f       	mov	r24, r16
    b15c:	86 78       	andi	r24, 0x86	; 134
    b15e:	09 f0       	breq	.+2      	; 0xb162 <vfprintf+0x5c0>
    b160:	d3 94       	inc	r13
    b162:	03 fd       	sbrc	r16, 3
    b164:	10 c0       	rjmp	.+32     	; 0xb186 <vfprintf+0x5e4>
    b166:	00 ff       	sbrs	r16, 0
    b168:	06 c0       	rjmp	.+12     	; 0xb176 <vfprintf+0x5d4>
    b16a:	1c 2d       	mov	r17, r12
    b16c:	d5 14       	cp	r13, r5
    b16e:	78 f4       	brcc	.+30     	; 0xb18e <vfprintf+0x5ec>
    b170:	15 0d       	add	r17, r5
    b172:	1d 19       	sub	r17, r13
    b174:	0c c0       	rjmp	.+24     	; 0xb18e <vfprintf+0x5ec>
    b176:	d5 14       	cp	r13, r5
    b178:	50 f4       	brcc	.+20     	; 0xb18e <vfprintf+0x5ec>
    b17a:	b7 01       	movw	r22, r14
    b17c:	80 e2       	ldi	r24, 0x20	; 32
    b17e:	90 e0       	ldi	r25, 0x00	; 0
    b180:	52 d4       	rcall	.+2212   	; 0xba26 <fputc>
    b182:	d3 94       	inc	r13
    b184:	f8 cf       	rjmp	.-16     	; 0xb176 <vfprintf+0x5d4>
    b186:	d5 14       	cp	r13, r5
    b188:	10 f4       	brcc	.+4      	; 0xb18e <vfprintf+0x5ec>
    b18a:	5d 18       	sub	r5, r13
    b18c:	01 c0       	rjmp	.+2      	; 0xb190 <vfprintf+0x5ee>
    b18e:	51 2c       	mov	r5, r1
    b190:	04 ff       	sbrs	r16, 4
    b192:	0f c0       	rjmp	.+30     	; 0xb1b2 <vfprintf+0x610>
    b194:	b7 01       	movw	r22, r14
    b196:	80 e3       	ldi	r24, 0x30	; 48
    b198:	90 e0       	ldi	r25, 0x00	; 0
    b19a:	45 d4       	rcall	.+2186   	; 0xba26 <fputc>
    b19c:	02 ff       	sbrs	r16, 2
    b19e:	16 c0       	rjmp	.+44     	; 0xb1cc <vfprintf+0x62a>
    b1a0:	01 fd       	sbrc	r16, 1
    b1a2:	03 c0       	rjmp	.+6      	; 0xb1aa <vfprintf+0x608>
    b1a4:	88 e7       	ldi	r24, 0x78	; 120
    b1a6:	90 e0       	ldi	r25, 0x00	; 0
    b1a8:	02 c0       	rjmp	.+4      	; 0xb1ae <vfprintf+0x60c>
    b1aa:	88 e5       	ldi	r24, 0x58	; 88
    b1ac:	90 e0       	ldi	r25, 0x00	; 0
    b1ae:	b7 01       	movw	r22, r14
    b1b0:	0c c0       	rjmp	.+24     	; 0xb1ca <vfprintf+0x628>
    b1b2:	80 2f       	mov	r24, r16
    b1b4:	86 78       	andi	r24, 0x86	; 134
    b1b6:	51 f0       	breq	.+20     	; 0xb1cc <vfprintf+0x62a>
    b1b8:	01 ff       	sbrs	r16, 1
    b1ba:	02 c0       	rjmp	.+4      	; 0xb1c0 <vfprintf+0x61e>
    b1bc:	8b e2       	ldi	r24, 0x2B	; 43
    b1be:	01 c0       	rjmp	.+2      	; 0xb1c2 <vfprintf+0x620>
    b1c0:	80 e2       	ldi	r24, 0x20	; 32
    b1c2:	07 fd       	sbrc	r16, 7
    b1c4:	8d e2       	ldi	r24, 0x2D	; 45
    b1c6:	b7 01       	movw	r22, r14
    b1c8:	90 e0       	ldi	r25, 0x00	; 0
    b1ca:	2d d4       	rcall	.+2138   	; 0xba26 <fputc>
    b1cc:	c1 16       	cp	r12, r17
    b1ce:	30 f4       	brcc	.+12     	; 0xb1dc <vfprintf+0x63a>
    b1d0:	b7 01       	movw	r22, r14
    b1d2:	80 e3       	ldi	r24, 0x30	; 48
    b1d4:	90 e0       	ldi	r25, 0x00	; 0
    b1d6:	27 d4       	rcall	.+2126   	; 0xba26 <fputc>
    b1d8:	11 50       	subi	r17, 0x01	; 1
    b1da:	f8 cf       	rjmp	.-16     	; 0xb1cc <vfprintf+0x62a>
    b1dc:	ca 94       	dec	r12
    b1de:	f3 01       	movw	r30, r6
    b1e0:	ec 0d       	add	r30, r12
    b1e2:	f1 1d       	adc	r31, r1
    b1e4:	80 81       	ld	r24, Z
    b1e6:	b7 01       	movw	r22, r14
    b1e8:	90 e0       	ldi	r25, 0x00	; 0
    b1ea:	1d d4       	rcall	.+2106   	; 0xba26 <fputc>
    b1ec:	c1 10       	cpse	r12, r1
    b1ee:	f6 cf       	rjmp	.-20     	; 0xb1dc <vfprintf+0x63a>
    b1f0:	15 c0       	rjmp	.+42     	; 0xb21c <vfprintf+0x67a>
    b1f2:	f4 e0       	ldi	r31, 0x04	; 4
    b1f4:	f5 15       	cp	r31, r5
    b1f6:	50 f5       	brcc	.+84     	; 0xb24c <vfprintf+0x6aa>
    b1f8:	84 e0       	ldi	r24, 0x04	; 4
    b1fa:	58 1a       	sub	r5, r24
    b1fc:	93 fe       	sbrs	r9, 3
    b1fe:	1e c0       	rjmp	.+60     	; 0xb23c <vfprintf+0x69a>
    b200:	01 11       	cpse	r16, r1
    b202:	25 c0       	rjmp	.+74     	; 0xb24e <vfprintf+0x6ac>
    b204:	2c 85       	ldd	r18, Y+12	; 0x0c
    b206:	23 ff       	sbrs	r18, 3
    b208:	27 c0       	rjmp	.+78     	; 0xb258 <vfprintf+0x6b6>
    b20a:	06 e6       	ldi	r16, 0x66	; 102
    b20c:	12 e0       	ldi	r17, 0x02	; 2
    b20e:	39 2d       	mov	r19, r9
    b210:	30 71       	andi	r19, 0x10	; 16
    b212:	93 2e       	mov	r9, r19
    b214:	f8 01       	movw	r30, r16
    b216:	84 91       	lpm	r24, Z
    b218:	81 11       	cpse	r24, r1
    b21a:	21 c0       	rjmp	.+66     	; 0xb25e <vfprintf+0x6bc>
    b21c:	55 20       	and	r5, r5
    b21e:	09 f4       	brne	.+2      	; 0xb222 <vfprintf+0x680>
    b220:	fc cc       	rjmp	.-1544   	; 0xac1a <vfprintf+0x78>
    b222:	b7 01       	movw	r22, r14
    b224:	80 e2       	ldi	r24, 0x20	; 32
    b226:	90 e0       	ldi	r25, 0x00	; 0
    b228:	fe d3       	rcall	.+2044   	; 0xba26 <fputc>
    b22a:	5a 94       	dec	r5
    b22c:	f7 cf       	rjmp	.-18     	; 0xb21c <vfprintf+0x67a>
    b22e:	f7 01       	movw	r30, r14
    b230:	86 81       	ldd	r24, Z+6	; 0x06
    b232:	97 81       	ldd	r25, Z+7	; 0x07
    b234:	23 c0       	rjmp	.+70     	; 0xb27c <vfprintf+0x6da>
    b236:	8f ef       	ldi	r24, 0xFF	; 255
    b238:	9f ef       	ldi	r25, 0xFF	; 255
    b23a:	20 c0       	rjmp	.+64     	; 0xb27c <vfprintf+0x6da>
    b23c:	b7 01       	movw	r22, r14
    b23e:	80 e2       	ldi	r24, 0x20	; 32
    b240:	90 e0       	ldi	r25, 0x00	; 0
    b242:	f1 d3       	rcall	.+2018   	; 0xba26 <fputc>
    b244:	5a 94       	dec	r5
    b246:	51 10       	cpse	r5, r1
    b248:	f9 cf       	rjmp	.-14     	; 0xb23c <vfprintf+0x69a>
    b24a:	da cf       	rjmp	.-76     	; 0xb200 <vfprintf+0x65e>
    b24c:	51 2c       	mov	r5, r1
    b24e:	b7 01       	movw	r22, r14
    b250:	80 2f       	mov	r24, r16
    b252:	90 e0       	ldi	r25, 0x00	; 0
    b254:	e8 d3       	rcall	.+2000   	; 0xba26 <fputc>
    b256:	d6 cf       	rjmp	.-84     	; 0xb204 <vfprintf+0x662>
    b258:	0a e6       	ldi	r16, 0x6A	; 106
    b25a:	12 e0       	ldi	r17, 0x02	; 2
    b25c:	d8 cf       	rjmp	.-80     	; 0xb20e <vfprintf+0x66c>
    b25e:	91 10       	cpse	r9, r1
    b260:	80 52       	subi	r24, 0x20	; 32
    b262:	b7 01       	movw	r22, r14
    b264:	90 e0       	ldi	r25, 0x00	; 0
    b266:	df d3       	rcall	.+1982   	; 0xba26 <fputc>
    b268:	0f 5f       	subi	r16, 0xFF	; 255
    b26a:	1f 4f       	sbci	r17, 0xFF	; 255
    b26c:	d3 cf       	rjmp	.-90     	; 0xb214 <vfprintf+0x672>
    b26e:	23 e0       	ldi	r18, 0x03	; 3
    b270:	25 15       	cp	r18, r5
    b272:	10 f4       	brcc	.+4      	; 0xb278 <vfprintf+0x6d6>
    b274:	83 e0       	ldi	r24, 0x03	; 3
    b276:	c1 cf       	rjmp	.-126    	; 0xb1fa <vfprintf+0x658>
    b278:	51 2c       	mov	r5, r1
    b27a:	c4 cf       	rjmp	.-120    	; 0xb204 <vfprintf+0x662>
    b27c:	60 96       	adiw	r28, 0x10	; 16
    b27e:	cd bf       	out	0x3d, r28	; 61
    b280:	de bf       	out	0x3e, r29	; 62
    b282:	df 91       	pop	r29
    b284:	cf 91       	pop	r28
    b286:	1f 91       	pop	r17
    b288:	0f 91       	pop	r16
    b28a:	ff 90       	pop	r15
    b28c:	ef 90       	pop	r14
    b28e:	df 90       	pop	r13
    b290:	cf 90       	pop	r12
    b292:	bf 90       	pop	r11
    b294:	af 90       	pop	r10
    b296:	9f 90       	pop	r9
    b298:	8f 90       	pop	r8
    b29a:	7f 90       	pop	r7
    b29c:	6f 90       	pop	r6
    b29e:	5f 90       	pop	r5
    b2a0:	4f 90       	pop	r4
    b2a2:	3f 90       	pop	r3
    b2a4:	2f 90       	pop	r2
    b2a6:	08 95       	ret

0000b2a8 <__mulsi3>:
    b2a8:	db 01       	movw	r26, r22
    b2aa:	8f 93       	push	r24
    b2ac:	9f 93       	push	r25
    b2ae:	66 d0       	rcall	.+204    	; 0xb37c <__muluhisi3>
    b2b0:	bf 91       	pop	r27
    b2b2:	af 91       	pop	r26
    b2b4:	a2 9f       	mul	r26, r18
    b2b6:	80 0d       	add	r24, r0
    b2b8:	91 1d       	adc	r25, r1
    b2ba:	a3 9f       	mul	r26, r19
    b2bc:	90 0d       	add	r25, r0
    b2be:	b2 9f       	mul	r27, r18
    b2c0:	90 0d       	add	r25, r0
    b2c2:	11 24       	eor	r1, r1
    b2c4:	08 95       	ret

0000b2c6 <__udivmodhi4>:
    b2c6:	aa 1b       	sub	r26, r26
    b2c8:	bb 1b       	sub	r27, r27
    b2ca:	51 e1       	ldi	r21, 0x11	; 17
    b2cc:	07 c0       	rjmp	.+14     	; 0xb2dc <__udivmodhi4_ep>

0000b2ce <__udivmodhi4_loop>:
    b2ce:	aa 1f       	adc	r26, r26
    b2d0:	bb 1f       	adc	r27, r27
    b2d2:	a6 17       	cp	r26, r22
    b2d4:	b7 07       	cpc	r27, r23
    b2d6:	10 f0       	brcs	.+4      	; 0xb2dc <__udivmodhi4_ep>
    b2d8:	a6 1b       	sub	r26, r22
    b2da:	b7 0b       	sbc	r27, r23

0000b2dc <__udivmodhi4_ep>:
    b2dc:	88 1f       	adc	r24, r24
    b2de:	99 1f       	adc	r25, r25
    b2e0:	5a 95       	dec	r21
    b2e2:	a9 f7       	brne	.-22     	; 0xb2ce <__udivmodhi4_loop>
    b2e4:	80 95       	com	r24
    b2e6:	90 95       	com	r25
    b2e8:	bc 01       	movw	r22, r24
    b2ea:	cd 01       	movw	r24, r26
    b2ec:	08 95       	ret

0000b2ee <__udivmodsi4>:
    b2ee:	a1 e2       	ldi	r26, 0x21	; 33
    b2f0:	1a 2e       	mov	r1, r26
    b2f2:	aa 1b       	sub	r26, r26
    b2f4:	bb 1b       	sub	r27, r27
    b2f6:	fd 01       	movw	r30, r26
    b2f8:	0d c0       	rjmp	.+26     	; 0xb314 <__udivmodsi4_ep>

0000b2fa <__udivmodsi4_loop>:
    b2fa:	aa 1f       	adc	r26, r26
    b2fc:	bb 1f       	adc	r27, r27
    b2fe:	ee 1f       	adc	r30, r30
    b300:	ff 1f       	adc	r31, r31
    b302:	a2 17       	cp	r26, r18
    b304:	b3 07       	cpc	r27, r19
    b306:	e4 07       	cpc	r30, r20
    b308:	f5 07       	cpc	r31, r21
    b30a:	20 f0       	brcs	.+8      	; 0xb314 <__udivmodsi4_ep>
    b30c:	a2 1b       	sub	r26, r18
    b30e:	b3 0b       	sbc	r27, r19
    b310:	e4 0b       	sbc	r30, r20
    b312:	f5 0b       	sbc	r31, r21

0000b314 <__udivmodsi4_ep>:
    b314:	66 1f       	adc	r22, r22
    b316:	77 1f       	adc	r23, r23
    b318:	88 1f       	adc	r24, r24
    b31a:	99 1f       	adc	r25, r25
    b31c:	1a 94       	dec	r1
    b31e:	69 f7       	brne	.-38     	; 0xb2fa <__udivmodsi4_loop>
    b320:	60 95       	com	r22
    b322:	70 95       	com	r23
    b324:	80 95       	com	r24
    b326:	90 95       	com	r25
    b328:	9b 01       	movw	r18, r22
    b32a:	ac 01       	movw	r20, r24
    b32c:	bd 01       	movw	r22, r26
    b32e:	cf 01       	movw	r24, r30
    b330:	08 95       	ret

0000b332 <__divmodsi4>:
    b332:	05 2e       	mov	r0, r21
    b334:	97 fb       	bst	r25, 7
    b336:	16 f4       	brtc	.+4      	; 0xb33c <__divmodsi4+0xa>
    b338:	00 94       	com	r0
    b33a:	0f d0       	rcall	.+30     	; 0xb35a <__negsi2>
    b33c:	57 fd       	sbrc	r21, 7
    b33e:	05 d0       	rcall	.+10     	; 0xb34a <__divmodsi4_neg2>
    b340:	d6 df       	rcall	.-84     	; 0xb2ee <__udivmodsi4>
    b342:	07 fc       	sbrc	r0, 7
    b344:	02 d0       	rcall	.+4      	; 0xb34a <__divmodsi4_neg2>
    b346:	46 f4       	brtc	.+16     	; 0xb358 <__divmodsi4_exit>
    b348:	08 c0       	rjmp	.+16     	; 0xb35a <__negsi2>

0000b34a <__divmodsi4_neg2>:
    b34a:	50 95       	com	r21
    b34c:	40 95       	com	r20
    b34e:	30 95       	com	r19
    b350:	21 95       	neg	r18
    b352:	3f 4f       	sbci	r19, 0xFF	; 255
    b354:	4f 4f       	sbci	r20, 0xFF	; 255
    b356:	5f 4f       	sbci	r21, 0xFF	; 255

0000b358 <__divmodsi4_exit>:
    b358:	08 95       	ret

0000b35a <__negsi2>:
    b35a:	90 95       	com	r25
    b35c:	80 95       	com	r24
    b35e:	70 95       	com	r23
    b360:	61 95       	neg	r22
    b362:	7f 4f       	sbci	r23, 0xFF	; 255
    b364:	8f 4f       	sbci	r24, 0xFF	; 255
    b366:	9f 4f       	sbci	r25, 0xFF	; 255
    b368:	08 95       	ret

0000b36a <__tablejump2__>:
    b36a:	ee 0f       	add	r30, r30
    b36c:	ff 1f       	adc	r31, r31
    b36e:	88 1f       	adc	r24, r24
    b370:	8b bf       	out	0x3b, r24	; 59
    b372:	07 90       	elpm	r0, Z+
    b374:	f6 91       	elpm	r31, Z
    b376:	e0 2d       	mov	r30, r0
    b378:	1b be       	out	0x3b, r1	; 59
    b37a:	19 94       	eijmp

0000b37c <__muluhisi3>:
    b37c:	da d0       	rcall	.+436    	; 0xb532 <__umulhisi3>
    b37e:	a5 9f       	mul	r26, r21
    b380:	90 0d       	add	r25, r0
    b382:	b4 9f       	mul	r27, r20
    b384:	90 0d       	add	r25, r0
    b386:	a4 9f       	mul	r26, r20
    b388:	80 0d       	add	r24, r0
    b38a:	91 1d       	adc	r25, r1
    b38c:	11 24       	eor	r1, r1
    b38e:	08 95       	ret

0000b390 <__muldi3>:
    b390:	df 93       	push	r29
    b392:	cf 93       	push	r28
    b394:	1f 93       	push	r17
    b396:	0f 93       	push	r16
    b398:	9a 9d       	mul	r25, r10
    b39a:	f0 2d       	mov	r31, r0
    b39c:	21 9f       	mul	r18, r17
    b39e:	f0 0d       	add	r31, r0
    b3a0:	8b 9d       	mul	r24, r11
    b3a2:	f0 0d       	add	r31, r0
    b3a4:	8a 9d       	mul	r24, r10
    b3a6:	e0 2d       	mov	r30, r0
    b3a8:	f1 0d       	add	r31, r1
    b3aa:	03 9f       	mul	r16, r19
    b3ac:	f0 0d       	add	r31, r0
    b3ae:	02 9f       	mul	r16, r18
    b3b0:	e0 0d       	add	r30, r0
    b3b2:	f1 1d       	adc	r31, r1
    b3b4:	4e 9d       	mul	r20, r14
    b3b6:	e0 0d       	add	r30, r0
    b3b8:	f1 1d       	adc	r31, r1
    b3ba:	5e 9d       	mul	r21, r14
    b3bc:	f0 0d       	add	r31, r0
    b3be:	4f 9d       	mul	r20, r15
    b3c0:	f0 0d       	add	r31, r0
    b3c2:	7f 93       	push	r23
    b3c4:	6f 93       	push	r22
    b3c6:	bf 92       	push	r11
    b3c8:	af 92       	push	r10
    b3ca:	5f 93       	push	r21
    b3cc:	4f 93       	push	r20
    b3ce:	d5 01       	movw	r26, r10
    b3d0:	b0 d0       	rcall	.+352    	; 0xb532 <__umulhisi3>
    b3d2:	8b 01       	movw	r16, r22
    b3d4:	ac 01       	movw	r20, r24
    b3d6:	d7 01       	movw	r26, r14
    b3d8:	ac d0       	rcall	.+344    	; 0xb532 <__umulhisi3>
    b3da:	eb 01       	movw	r28, r22
    b3dc:	e8 0f       	add	r30, r24
    b3de:	f9 1f       	adc	r31, r25
    b3e0:	d6 01       	movw	r26, r12
    b3e2:	1f d0       	rcall	.+62     	; 0xb422 <__muldi3_6>
    b3e4:	2f 91       	pop	r18
    b3e6:	3f 91       	pop	r19
    b3e8:	d6 01       	movw	r26, r12
    b3ea:	a3 d0       	rcall	.+326    	; 0xb532 <__umulhisi3>
    b3ec:	c6 0f       	add	r28, r22
    b3ee:	d7 1f       	adc	r29, r23
    b3f0:	e8 1f       	adc	r30, r24
    b3f2:	f9 1f       	adc	r31, r25
    b3f4:	af 91       	pop	r26
    b3f6:	bf 91       	pop	r27
    b3f8:	14 d0       	rcall	.+40     	; 0xb422 <__muldi3_6>
    b3fa:	2f 91       	pop	r18
    b3fc:	3f 91       	pop	r19
    b3fe:	99 d0       	rcall	.+306    	; 0xb532 <__umulhisi3>
    b400:	c6 0f       	add	r28, r22
    b402:	d7 1f       	adc	r29, r23
    b404:	e8 1f       	adc	r30, r24
    b406:	f9 1f       	adc	r31, r25
    b408:	d6 01       	movw	r26, r12
    b40a:	93 d0       	rcall	.+294    	; 0xb532 <__umulhisi3>
    b40c:	e6 0f       	add	r30, r22
    b40e:	f7 1f       	adc	r31, r23
    b410:	98 01       	movw	r18, r16
    b412:	be 01       	movw	r22, r28
    b414:	cf 01       	movw	r24, r30
    b416:	11 24       	eor	r1, r1
    b418:	0f 91       	pop	r16
    b41a:	1f 91       	pop	r17
    b41c:	cf 91       	pop	r28
    b41e:	df 91       	pop	r29
    b420:	08 95       	ret

0000b422 <__muldi3_6>:
    b422:	87 d0       	rcall	.+270    	; 0xb532 <__umulhisi3>
    b424:	46 0f       	add	r20, r22
    b426:	57 1f       	adc	r21, r23
    b428:	c8 1f       	adc	r28, r24
    b42a:	d9 1f       	adc	r29, r25
    b42c:	08 f4       	brcc	.+2      	; 0xb430 <__muldi3_6+0xe>
    b42e:	31 96       	adiw	r30, 0x01	; 1
    b430:	08 95       	ret

0000b432 <__umoddi3>:
    b432:	68 94       	set
    b434:	01 c0       	rjmp	.+2      	; 0xb438 <__udivdi3_umoddi3>

0000b436 <__udivdi3>:
    b436:	e8 94       	clt

0000b438 <__udivdi3_umoddi3>:
    b438:	8f 92       	push	r8
    b43a:	9f 92       	push	r9
    b43c:	cf 93       	push	r28
    b43e:	df 93       	push	r29
    b440:	05 d0       	rcall	.+10     	; 0xb44c <__udivmod64>
    b442:	df 91       	pop	r29
    b444:	cf 91       	pop	r28
    b446:	9f 90       	pop	r9
    b448:	8f 90       	pop	r8
    b44a:	08 95       	ret

0000b44c <__udivmod64>:
    b44c:	88 24       	eor	r8, r8
    b44e:	99 24       	eor	r9, r9
    b450:	f4 01       	movw	r30, r8
    b452:	e4 01       	movw	r28, r8
    b454:	b0 e4       	ldi	r27, 0x40	; 64
    b456:	9f 93       	push	r25
    b458:	aa 27       	eor	r26, r26
    b45a:	9a 15       	cp	r25, r10
    b45c:	8b 04       	cpc	r8, r11
    b45e:	9c 04       	cpc	r9, r12
    b460:	ed 05       	cpc	r30, r13
    b462:	fe 05       	cpc	r31, r14
    b464:	cf 05       	cpc	r28, r15
    b466:	d0 07       	cpc	r29, r16
    b468:	a1 07       	cpc	r26, r17
    b46a:	98 f4       	brcc	.+38     	; 0xb492 <__udivmod64+0x46>
    b46c:	ad 2f       	mov	r26, r29
    b46e:	dc 2f       	mov	r29, r28
    b470:	cf 2f       	mov	r28, r31
    b472:	fe 2f       	mov	r31, r30
    b474:	e9 2d       	mov	r30, r9
    b476:	98 2c       	mov	r9, r8
    b478:	89 2e       	mov	r8, r25
    b47a:	98 2f       	mov	r25, r24
    b47c:	87 2f       	mov	r24, r23
    b47e:	76 2f       	mov	r23, r22
    b480:	65 2f       	mov	r22, r21
    b482:	54 2f       	mov	r21, r20
    b484:	43 2f       	mov	r20, r19
    b486:	32 2f       	mov	r19, r18
    b488:	22 27       	eor	r18, r18
    b48a:	b8 50       	subi	r27, 0x08	; 8
    b48c:	31 f7       	brne	.-52     	; 0xb45a <__udivmod64+0xe>
    b48e:	bf 91       	pop	r27
    b490:	27 c0       	rjmp	.+78     	; 0xb4e0 <__udivmod64+0x94>
    b492:	1b 2e       	mov	r1, r27
    b494:	bf 91       	pop	r27
    b496:	bb 27       	eor	r27, r27
    b498:	22 0f       	add	r18, r18
    b49a:	33 1f       	adc	r19, r19
    b49c:	44 1f       	adc	r20, r20
    b49e:	55 1f       	adc	r21, r21
    b4a0:	66 1f       	adc	r22, r22
    b4a2:	77 1f       	adc	r23, r23
    b4a4:	88 1f       	adc	r24, r24
    b4a6:	99 1f       	adc	r25, r25
    b4a8:	88 1c       	adc	r8, r8
    b4aa:	99 1c       	adc	r9, r9
    b4ac:	ee 1f       	adc	r30, r30
    b4ae:	ff 1f       	adc	r31, r31
    b4b0:	cc 1f       	adc	r28, r28
    b4b2:	dd 1f       	adc	r29, r29
    b4b4:	aa 1f       	adc	r26, r26
    b4b6:	bb 1f       	adc	r27, r27
    b4b8:	8a 14       	cp	r8, r10
    b4ba:	9b 04       	cpc	r9, r11
    b4bc:	ec 05       	cpc	r30, r12
    b4be:	fd 05       	cpc	r31, r13
    b4c0:	ce 05       	cpc	r28, r14
    b4c2:	df 05       	cpc	r29, r15
    b4c4:	a0 07       	cpc	r26, r16
    b4c6:	b1 07       	cpc	r27, r17
    b4c8:	48 f0       	brcs	.+18     	; 0xb4dc <__udivmod64+0x90>
    b4ca:	8a 18       	sub	r8, r10
    b4cc:	9b 08       	sbc	r9, r11
    b4ce:	ec 09       	sbc	r30, r12
    b4d0:	fd 09       	sbc	r31, r13
    b4d2:	ce 09       	sbc	r28, r14
    b4d4:	df 09       	sbc	r29, r15
    b4d6:	a0 0b       	sbc	r26, r16
    b4d8:	b1 0b       	sbc	r27, r17
    b4da:	21 60       	ori	r18, 0x01	; 1
    b4dc:	1a 94       	dec	r1
    b4de:	e1 f6       	brne	.-72     	; 0xb498 <__udivmod64+0x4c>
    b4e0:	2e f4       	brtc	.+10     	; 0xb4ec <__udivmod64+0xa0>
    b4e2:	94 01       	movw	r18, r8
    b4e4:	af 01       	movw	r20, r30
    b4e6:	be 01       	movw	r22, r28
    b4e8:	cd 01       	movw	r24, r26
    b4ea:	00 0c       	add	r0, r0
    b4ec:	08 95       	ret

0000b4ee <__ashldi3>:
    b4ee:	0f 93       	push	r16
    b4f0:	08 30       	cpi	r16, 0x08	; 8
    b4f2:	90 f0       	brcs	.+36     	; 0xb518 <__ashldi3+0x2a>
    b4f4:	98 2f       	mov	r25, r24
    b4f6:	87 2f       	mov	r24, r23
    b4f8:	76 2f       	mov	r23, r22
    b4fa:	65 2f       	mov	r22, r21
    b4fc:	54 2f       	mov	r21, r20
    b4fe:	43 2f       	mov	r20, r19
    b500:	32 2f       	mov	r19, r18
    b502:	22 27       	eor	r18, r18
    b504:	08 50       	subi	r16, 0x08	; 8
    b506:	f4 cf       	rjmp	.-24     	; 0xb4f0 <__ashldi3+0x2>
    b508:	22 0f       	add	r18, r18
    b50a:	33 1f       	adc	r19, r19
    b50c:	44 1f       	adc	r20, r20
    b50e:	55 1f       	adc	r21, r21
    b510:	66 1f       	adc	r22, r22
    b512:	77 1f       	adc	r23, r23
    b514:	88 1f       	adc	r24, r24
    b516:	99 1f       	adc	r25, r25
    b518:	0a 95       	dec	r16
    b51a:	b2 f7       	brpl	.-20     	; 0xb508 <__ashldi3+0x1a>
    b51c:	0f 91       	pop	r16
    b51e:	08 95       	ret

0000b520 <__adddi3>:
    b520:	2a 0d       	add	r18, r10
    b522:	3b 1d       	adc	r19, r11
    b524:	4c 1d       	adc	r20, r12
    b526:	5d 1d       	adc	r21, r13
    b528:	6e 1d       	adc	r22, r14
    b52a:	7f 1d       	adc	r23, r15
    b52c:	80 1f       	adc	r24, r16
    b52e:	91 1f       	adc	r25, r17
    b530:	08 95       	ret

0000b532 <__umulhisi3>:
    b532:	a2 9f       	mul	r26, r18
    b534:	b0 01       	movw	r22, r0
    b536:	b3 9f       	mul	r27, r19
    b538:	c0 01       	movw	r24, r0
    b53a:	a3 9f       	mul	r26, r19
    b53c:	70 0d       	add	r23, r0
    b53e:	81 1d       	adc	r24, r1
    b540:	11 24       	eor	r1, r1
    b542:	91 1d       	adc	r25, r1
    b544:	b2 9f       	mul	r27, r18
    b546:	70 0d       	add	r23, r0
    b548:	81 1d       	adc	r24, r1
    b54a:	11 24       	eor	r1, r1
    b54c:	91 1d       	adc	r25, r1
    b54e:	08 95       	ret

0000b550 <malloc>:
    b550:	0f 93       	push	r16
    b552:	1f 93       	push	r17
    b554:	cf 93       	push	r28
    b556:	df 93       	push	r29
    b558:	82 30       	cpi	r24, 0x02	; 2
    b55a:	91 05       	cpc	r25, r1
    b55c:	10 f4       	brcc	.+4      	; 0xb562 <malloc+0x12>
    b55e:	82 e0       	ldi	r24, 0x02	; 2
    b560:	90 e0       	ldi	r25, 0x00	; 0
    b562:	e0 91 e6 28 	lds	r30, 0x28E6	; 0x8028e6 <__flp>
    b566:	f0 91 e7 28 	lds	r31, 0x28E7	; 0x8028e7 <__flp+0x1>
    b56a:	20 e0       	ldi	r18, 0x00	; 0
    b56c:	30 e0       	ldi	r19, 0x00	; 0
    b56e:	a0 e0       	ldi	r26, 0x00	; 0
    b570:	b0 e0       	ldi	r27, 0x00	; 0
    b572:	30 97       	sbiw	r30, 0x00	; 0
    b574:	19 f1       	breq	.+70     	; 0xb5bc <malloc+0x6c>
    b576:	40 81       	ld	r20, Z
    b578:	51 81       	ldd	r21, Z+1	; 0x01
    b57a:	02 81       	ldd	r16, Z+2	; 0x02
    b57c:	13 81       	ldd	r17, Z+3	; 0x03
    b57e:	48 17       	cp	r20, r24
    b580:	59 07       	cpc	r21, r25
    b582:	c8 f0       	brcs	.+50     	; 0xb5b6 <malloc+0x66>
    b584:	84 17       	cp	r24, r20
    b586:	95 07       	cpc	r25, r21
    b588:	69 f4       	brne	.+26     	; 0xb5a4 <malloc+0x54>
    b58a:	10 97       	sbiw	r26, 0x00	; 0
    b58c:	31 f0       	breq	.+12     	; 0xb59a <malloc+0x4a>
    b58e:	12 96       	adiw	r26, 0x02	; 2
    b590:	0c 93       	st	X, r16
    b592:	12 97       	sbiw	r26, 0x02	; 2
    b594:	13 96       	adiw	r26, 0x03	; 3
    b596:	1c 93       	st	X, r17
    b598:	27 c0       	rjmp	.+78     	; 0xb5e8 <malloc+0x98>
    b59a:	00 93 e6 28 	sts	0x28E6, r16	; 0x8028e6 <__flp>
    b59e:	10 93 e7 28 	sts	0x28E7, r17	; 0x8028e7 <__flp+0x1>
    b5a2:	22 c0       	rjmp	.+68     	; 0xb5e8 <malloc+0x98>
    b5a4:	21 15       	cp	r18, r1
    b5a6:	31 05       	cpc	r19, r1
    b5a8:	19 f0       	breq	.+6      	; 0xb5b0 <malloc+0x60>
    b5aa:	42 17       	cp	r20, r18
    b5ac:	53 07       	cpc	r21, r19
    b5ae:	18 f4       	brcc	.+6      	; 0xb5b6 <malloc+0x66>
    b5b0:	9a 01       	movw	r18, r20
    b5b2:	bd 01       	movw	r22, r26
    b5b4:	ef 01       	movw	r28, r30
    b5b6:	df 01       	movw	r26, r30
    b5b8:	f8 01       	movw	r30, r16
    b5ba:	db cf       	rjmp	.-74     	; 0xb572 <malloc+0x22>
    b5bc:	21 15       	cp	r18, r1
    b5be:	31 05       	cpc	r19, r1
    b5c0:	f9 f0       	breq	.+62     	; 0xb600 <malloc+0xb0>
    b5c2:	28 1b       	sub	r18, r24
    b5c4:	39 0b       	sbc	r19, r25
    b5c6:	24 30       	cpi	r18, 0x04	; 4
    b5c8:	31 05       	cpc	r19, r1
    b5ca:	80 f4       	brcc	.+32     	; 0xb5ec <malloc+0x9c>
    b5cc:	8a 81       	ldd	r24, Y+2	; 0x02
    b5ce:	9b 81       	ldd	r25, Y+3	; 0x03
    b5d0:	61 15       	cp	r22, r1
    b5d2:	71 05       	cpc	r23, r1
    b5d4:	21 f0       	breq	.+8      	; 0xb5de <malloc+0x8e>
    b5d6:	fb 01       	movw	r30, r22
    b5d8:	82 83       	std	Z+2, r24	; 0x02
    b5da:	93 83       	std	Z+3, r25	; 0x03
    b5dc:	04 c0       	rjmp	.+8      	; 0xb5e6 <malloc+0x96>
    b5de:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <__flp>
    b5e2:	90 93 e7 28 	sts	0x28E7, r25	; 0x8028e7 <__flp+0x1>
    b5e6:	fe 01       	movw	r30, r28
    b5e8:	32 96       	adiw	r30, 0x02	; 2
    b5ea:	44 c0       	rjmp	.+136    	; 0xb674 <malloc+0x124>
    b5ec:	fe 01       	movw	r30, r28
    b5ee:	e2 0f       	add	r30, r18
    b5f0:	f3 1f       	adc	r31, r19
    b5f2:	81 93       	st	Z+, r24
    b5f4:	91 93       	st	Z+, r25
    b5f6:	22 50       	subi	r18, 0x02	; 2
    b5f8:	31 09       	sbc	r19, r1
    b5fa:	28 83       	st	Y, r18
    b5fc:	39 83       	std	Y+1, r19	; 0x01
    b5fe:	3a c0       	rjmp	.+116    	; 0xb674 <malloc+0x124>
    b600:	20 91 e4 28 	lds	r18, 0x28E4	; 0x8028e4 <__brkval>
    b604:	30 91 e5 28 	lds	r19, 0x28E5	; 0x8028e5 <__brkval+0x1>
    b608:	23 2b       	or	r18, r19
    b60a:	41 f4       	brne	.+16     	; 0xb61c <malloc+0xcc>
    b60c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    b610:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    b614:	20 93 e4 28 	sts	0x28E4, r18	; 0x8028e4 <__brkval>
    b618:	30 93 e5 28 	sts	0x28E5, r19	; 0x8028e5 <__brkval+0x1>
    b61c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    b620:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    b624:	21 15       	cp	r18, r1
    b626:	31 05       	cpc	r19, r1
    b628:	41 f4       	brne	.+16     	; 0xb63a <malloc+0xea>
    b62a:	2d b7       	in	r18, 0x3d	; 61
    b62c:	3e b7       	in	r19, 0x3e	; 62
    b62e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    b632:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    b636:	24 1b       	sub	r18, r20
    b638:	35 0b       	sbc	r19, r21
    b63a:	e0 91 e4 28 	lds	r30, 0x28E4	; 0x8028e4 <__brkval>
    b63e:	f0 91 e5 28 	lds	r31, 0x28E5	; 0x8028e5 <__brkval+0x1>
    b642:	e2 17       	cp	r30, r18
    b644:	f3 07       	cpc	r31, r19
    b646:	a0 f4       	brcc	.+40     	; 0xb670 <malloc+0x120>
    b648:	2e 1b       	sub	r18, r30
    b64a:	3f 0b       	sbc	r19, r31
    b64c:	28 17       	cp	r18, r24
    b64e:	39 07       	cpc	r19, r25
    b650:	78 f0       	brcs	.+30     	; 0xb670 <malloc+0x120>
    b652:	ac 01       	movw	r20, r24
    b654:	4e 5f       	subi	r20, 0xFE	; 254
    b656:	5f 4f       	sbci	r21, 0xFF	; 255
    b658:	24 17       	cp	r18, r20
    b65a:	35 07       	cpc	r19, r21
    b65c:	48 f0       	brcs	.+18     	; 0xb670 <malloc+0x120>
    b65e:	4e 0f       	add	r20, r30
    b660:	5f 1f       	adc	r21, r31
    b662:	40 93 e4 28 	sts	0x28E4, r20	; 0x8028e4 <__brkval>
    b666:	50 93 e5 28 	sts	0x28E5, r21	; 0x8028e5 <__brkval+0x1>
    b66a:	81 93       	st	Z+, r24
    b66c:	91 93       	st	Z+, r25
    b66e:	02 c0       	rjmp	.+4      	; 0xb674 <malloc+0x124>
    b670:	e0 e0       	ldi	r30, 0x00	; 0
    b672:	f0 e0       	ldi	r31, 0x00	; 0
    b674:	cf 01       	movw	r24, r30
    b676:	df 91       	pop	r29
    b678:	cf 91       	pop	r28
    b67a:	1f 91       	pop	r17
    b67c:	0f 91       	pop	r16
    b67e:	08 95       	ret

0000b680 <free>:
    b680:	cf 93       	push	r28
    b682:	df 93       	push	r29
    b684:	00 97       	sbiw	r24, 0x00	; 0
    b686:	09 f4       	brne	.+2      	; 0xb68a <free+0xa>
    b688:	81 c0       	rjmp	.+258    	; 0xb78c <free+0x10c>
    b68a:	fc 01       	movw	r30, r24
    b68c:	32 97       	sbiw	r30, 0x02	; 2
    b68e:	12 82       	std	Z+2, r1	; 0x02
    b690:	13 82       	std	Z+3, r1	; 0x03
    b692:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <__flp>
    b696:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <__flp+0x1>
    b69a:	10 97       	sbiw	r26, 0x00	; 0
    b69c:	81 f4       	brne	.+32     	; 0xb6be <free+0x3e>
    b69e:	20 81       	ld	r18, Z
    b6a0:	31 81       	ldd	r19, Z+1	; 0x01
    b6a2:	82 0f       	add	r24, r18
    b6a4:	93 1f       	adc	r25, r19
    b6a6:	20 91 e4 28 	lds	r18, 0x28E4	; 0x8028e4 <__brkval>
    b6aa:	30 91 e5 28 	lds	r19, 0x28E5	; 0x8028e5 <__brkval+0x1>
    b6ae:	28 17       	cp	r18, r24
    b6b0:	39 07       	cpc	r19, r25
    b6b2:	51 f5       	brne	.+84     	; 0xb708 <free+0x88>
    b6b4:	e0 93 e4 28 	sts	0x28E4, r30	; 0x8028e4 <__brkval>
    b6b8:	f0 93 e5 28 	sts	0x28E5, r31	; 0x8028e5 <__brkval+0x1>
    b6bc:	67 c0       	rjmp	.+206    	; 0xb78c <free+0x10c>
    b6be:	ed 01       	movw	r28, r26
    b6c0:	20 e0       	ldi	r18, 0x00	; 0
    b6c2:	30 e0       	ldi	r19, 0x00	; 0
    b6c4:	ce 17       	cp	r28, r30
    b6c6:	df 07       	cpc	r29, r31
    b6c8:	40 f4       	brcc	.+16     	; 0xb6da <free+0x5a>
    b6ca:	4a 81       	ldd	r20, Y+2	; 0x02
    b6cc:	5b 81       	ldd	r21, Y+3	; 0x03
    b6ce:	9e 01       	movw	r18, r28
    b6d0:	41 15       	cp	r20, r1
    b6d2:	51 05       	cpc	r21, r1
    b6d4:	f1 f0       	breq	.+60     	; 0xb712 <free+0x92>
    b6d6:	ea 01       	movw	r28, r20
    b6d8:	f5 cf       	rjmp	.-22     	; 0xb6c4 <free+0x44>
    b6da:	c2 83       	std	Z+2, r28	; 0x02
    b6dc:	d3 83       	std	Z+3, r29	; 0x03
    b6de:	40 81       	ld	r20, Z
    b6e0:	51 81       	ldd	r21, Z+1	; 0x01
    b6e2:	84 0f       	add	r24, r20
    b6e4:	95 1f       	adc	r25, r21
    b6e6:	c8 17       	cp	r28, r24
    b6e8:	d9 07       	cpc	r29, r25
    b6ea:	59 f4       	brne	.+22     	; 0xb702 <free+0x82>
    b6ec:	88 81       	ld	r24, Y
    b6ee:	99 81       	ldd	r25, Y+1	; 0x01
    b6f0:	84 0f       	add	r24, r20
    b6f2:	95 1f       	adc	r25, r21
    b6f4:	02 96       	adiw	r24, 0x02	; 2
    b6f6:	80 83       	st	Z, r24
    b6f8:	91 83       	std	Z+1, r25	; 0x01
    b6fa:	8a 81       	ldd	r24, Y+2	; 0x02
    b6fc:	9b 81       	ldd	r25, Y+3	; 0x03
    b6fe:	82 83       	std	Z+2, r24	; 0x02
    b700:	93 83       	std	Z+3, r25	; 0x03
    b702:	21 15       	cp	r18, r1
    b704:	31 05       	cpc	r19, r1
    b706:	29 f4       	brne	.+10     	; 0xb712 <free+0x92>
    b708:	e0 93 e6 28 	sts	0x28E6, r30	; 0x8028e6 <__flp>
    b70c:	f0 93 e7 28 	sts	0x28E7, r31	; 0x8028e7 <__flp+0x1>
    b710:	3d c0       	rjmp	.+122    	; 0xb78c <free+0x10c>
    b712:	e9 01       	movw	r28, r18
    b714:	ea 83       	std	Y+2, r30	; 0x02
    b716:	fb 83       	std	Y+3, r31	; 0x03
    b718:	49 91       	ld	r20, Y+
    b71a:	59 91       	ld	r21, Y+
    b71c:	c4 0f       	add	r28, r20
    b71e:	d5 1f       	adc	r29, r21
    b720:	ec 17       	cp	r30, r28
    b722:	fd 07       	cpc	r31, r29
    b724:	61 f4       	brne	.+24     	; 0xb73e <free+0xbe>
    b726:	80 81       	ld	r24, Z
    b728:	91 81       	ldd	r25, Z+1	; 0x01
    b72a:	84 0f       	add	r24, r20
    b72c:	95 1f       	adc	r25, r21
    b72e:	02 96       	adiw	r24, 0x02	; 2
    b730:	e9 01       	movw	r28, r18
    b732:	88 83       	st	Y, r24
    b734:	99 83       	std	Y+1, r25	; 0x01
    b736:	82 81       	ldd	r24, Z+2	; 0x02
    b738:	93 81       	ldd	r25, Z+3	; 0x03
    b73a:	8a 83       	std	Y+2, r24	; 0x02
    b73c:	9b 83       	std	Y+3, r25	; 0x03
    b73e:	e0 e0       	ldi	r30, 0x00	; 0
    b740:	f0 e0       	ldi	r31, 0x00	; 0
    b742:	12 96       	adiw	r26, 0x02	; 2
    b744:	8d 91       	ld	r24, X+
    b746:	9c 91       	ld	r25, X
    b748:	13 97       	sbiw	r26, 0x03	; 3
    b74a:	00 97       	sbiw	r24, 0x00	; 0
    b74c:	19 f0       	breq	.+6      	; 0xb754 <free+0xd4>
    b74e:	fd 01       	movw	r30, r26
    b750:	dc 01       	movw	r26, r24
    b752:	f7 cf       	rjmp	.-18     	; 0xb742 <free+0xc2>
    b754:	8d 91       	ld	r24, X+
    b756:	9c 91       	ld	r25, X
    b758:	11 97       	sbiw	r26, 0x01	; 1
    b75a:	9d 01       	movw	r18, r26
    b75c:	2e 5f       	subi	r18, 0xFE	; 254
    b75e:	3f 4f       	sbci	r19, 0xFF	; 255
    b760:	82 0f       	add	r24, r18
    b762:	93 1f       	adc	r25, r19
    b764:	20 91 e4 28 	lds	r18, 0x28E4	; 0x8028e4 <__brkval>
    b768:	30 91 e5 28 	lds	r19, 0x28E5	; 0x8028e5 <__brkval+0x1>
    b76c:	28 17       	cp	r18, r24
    b76e:	39 07       	cpc	r19, r25
    b770:	69 f4       	brne	.+26     	; 0xb78c <free+0x10c>
    b772:	30 97       	sbiw	r30, 0x00	; 0
    b774:	29 f4       	brne	.+10     	; 0xb780 <free+0x100>
    b776:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <__flp>
    b77a:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <__flp+0x1>
    b77e:	02 c0       	rjmp	.+4      	; 0xb784 <free+0x104>
    b780:	12 82       	std	Z+2, r1	; 0x02
    b782:	13 82       	std	Z+3, r1	; 0x03
    b784:	a0 93 e4 28 	sts	0x28E4, r26	; 0x8028e4 <__brkval>
    b788:	b0 93 e5 28 	sts	0x28E5, r27	; 0x8028e5 <__brkval+0x1>
    b78c:	df 91       	pop	r29
    b78e:	cf 91       	pop	r28
    b790:	08 95       	ret

0000b792 <__ftoa_engine>:
    b792:	28 30       	cpi	r18, 0x08	; 8
    b794:	08 f0       	brcs	.+2      	; 0xb798 <__ftoa_engine+0x6>
    b796:	27 e0       	ldi	r18, 0x07	; 7
    b798:	33 27       	eor	r19, r19
    b79a:	da 01       	movw	r26, r20
    b79c:	99 0f       	add	r25, r25
    b79e:	31 1d       	adc	r19, r1
    b7a0:	87 fd       	sbrc	r24, 7
    b7a2:	91 60       	ori	r25, 0x01	; 1
    b7a4:	00 96       	adiw	r24, 0x00	; 0
    b7a6:	61 05       	cpc	r22, r1
    b7a8:	71 05       	cpc	r23, r1
    b7aa:	39 f4       	brne	.+14     	; 0xb7ba <__ftoa_engine+0x28>
    b7ac:	32 60       	ori	r19, 0x02	; 2
    b7ae:	2e 5f       	subi	r18, 0xFE	; 254
    b7b0:	3d 93       	st	X+, r19
    b7b2:	30 e3       	ldi	r19, 0x30	; 48
    b7b4:	2a 95       	dec	r18
    b7b6:	e1 f7       	brne	.-8      	; 0xb7b0 <__ftoa_engine+0x1e>
    b7b8:	08 95       	ret
    b7ba:	9f 3f       	cpi	r25, 0xFF	; 255
    b7bc:	30 f0       	brcs	.+12     	; 0xb7ca <__ftoa_engine+0x38>
    b7be:	80 38       	cpi	r24, 0x80	; 128
    b7c0:	71 05       	cpc	r23, r1
    b7c2:	61 05       	cpc	r22, r1
    b7c4:	09 f0       	breq	.+2      	; 0xb7c8 <__ftoa_engine+0x36>
    b7c6:	3c 5f       	subi	r19, 0xFC	; 252
    b7c8:	3c 5f       	subi	r19, 0xFC	; 252
    b7ca:	3d 93       	st	X+, r19
    b7cc:	91 30       	cpi	r25, 0x01	; 1
    b7ce:	08 f0       	brcs	.+2      	; 0xb7d2 <__ftoa_engine+0x40>
    b7d0:	80 68       	ori	r24, 0x80	; 128
    b7d2:	91 1d       	adc	r25, r1
    b7d4:	df 93       	push	r29
    b7d6:	cf 93       	push	r28
    b7d8:	1f 93       	push	r17
    b7da:	0f 93       	push	r16
    b7dc:	ff 92       	push	r15
    b7de:	ef 92       	push	r14
    b7e0:	19 2f       	mov	r17, r25
    b7e2:	98 7f       	andi	r25, 0xF8	; 248
    b7e4:	96 95       	lsr	r25
    b7e6:	e9 2f       	mov	r30, r25
    b7e8:	96 95       	lsr	r25
    b7ea:	96 95       	lsr	r25
    b7ec:	e9 0f       	add	r30, r25
    b7ee:	ff 27       	eor	r31, r31
    b7f0:	e8 53       	subi	r30, 0x38	; 56
    b7f2:	fd 4f       	sbci	r31, 0xFD	; 253
    b7f4:	99 27       	eor	r25, r25
    b7f6:	33 27       	eor	r19, r19
    b7f8:	ee 24       	eor	r14, r14
    b7fa:	ff 24       	eor	r15, r15
    b7fc:	a7 01       	movw	r20, r14
    b7fe:	e7 01       	movw	r28, r14
    b800:	05 90       	lpm	r0, Z+
    b802:	08 94       	sec
    b804:	07 94       	ror	r0
    b806:	28 f4       	brcc	.+10     	; 0xb812 <__ftoa_engine+0x80>
    b808:	36 0f       	add	r19, r22
    b80a:	e7 1e       	adc	r14, r23
    b80c:	f8 1e       	adc	r15, r24
    b80e:	49 1f       	adc	r20, r25
    b810:	51 1d       	adc	r21, r1
    b812:	66 0f       	add	r22, r22
    b814:	77 1f       	adc	r23, r23
    b816:	88 1f       	adc	r24, r24
    b818:	99 1f       	adc	r25, r25
    b81a:	06 94       	lsr	r0
    b81c:	a1 f7       	brne	.-24     	; 0xb806 <__ftoa_engine+0x74>
    b81e:	05 90       	lpm	r0, Z+
    b820:	07 94       	ror	r0
    b822:	28 f4       	brcc	.+10     	; 0xb82e <__ftoa_engine+0x9c>
    b824:	e7 0e       	add	r14, r23
    b826:	f8 1e       	adc	r15, r24
    b828:	49 1f       	adc	r20, r25
    b82a:	56 1f       	adc	r21, r22
    b82c:	c1 1d       	adc	r28, r1
    b82e:	77 0f       	add	r23, r23
    b830:	88 1f       	adc	r24, r24
    b832:	99 1f       	adc	r25, r25
    b834:	66 1f       	adc	r22, r22
    b836:	06 94       	lsr	r0
    b838:	a1 f7       	brne	.-24     	; 0xb822 <__ftoa_engine+0x90>
    b83a:	05 90       	lpm	r0, Z+
    b83c:	07 94       	ror	r0
    b83e:	28 f4       	brcc	.+10     	; 0xb84a <__ftoa_engine+0xb8>
    b840:	f8 0e       	add	r15, r24
    b842:	49 1f       	adc	r20, r25
    b844:	56 1f       	adc	r21, r22
    b846:	c7 1f       	adc	r28, r23
    b848:	d1 1d       	adc	r29, r1
    b84a:	88 0f       	add	r24, r24
    b84c:	99 1f       	adc	r25, r25
    b84e:	66 1f       	adc	r22, r22
    b850:	77 1f       	adc	r23, r23
    b852:	06 94       	lsr	r0
    b854:	a1 f7       	brne	.-24     	; 0xb83e <__ftoa_engine+0xac>
    b856:	05 90       	lpm	r0, Z+
    b858:	07 94       	ror	r0
    b85a:	20 f4       	brcc	.+8      	; 0xb864 <__ftoa_engine+0xd2>
    b85c:	49 0f       	add	r20, r25
    b85e:	56 1f       	adc	r21, r22
    b860:	c7 1f       	adc	r28, r23
    b862:	d8 1f       	adc	r29, r24
    b864:	99 0f       	add	r25, r25
    b866:	66 1f       	adc	r22, r22
    b868:	77 1f       	adc	r23, r23
    b86a:	88 1f       	adc	r24, r24
    b86c:	06 94       	lsr	r0
    b86e:	a9 f7       	brne	.-22     	; 0xb85a <__ftoa_engine+0xc8>
    b870:	84 91       	lpm	r24, Z
    b872:	10 95       	com	r17
    b874:	17 70       	andi	r17, 0x07	; 7
    b876:	41 f0       	breq	.+16     	; 0xb888 <__ftoa_engine+0xf6>
    b878:	d6 95       	lsr	r29
    b87a:	c7 95       	ror	r28
    b87c:	57 95       	ror	r21
    b87e:	47 95       	ror	r20
    b880:	f7 94       	ror	r15
    b882:	e7 94       	ror	r14
    b884:	1a 95       	dec	r17
    b886:	c1 f7       	brne	.-16     	; 0xb878 <__ftoa_engine+0xe6>
    b888:	ee e6       	ldi	r30, 0x6E	; 110
    b88a:	f2 e0       	ldi	r31, 0x02	; 2
    b88c:	68 94       	set
    b88e:	15 90       	lpm	r1, Z+
    b890:	15 91       	lpm	r17, Z+
    b892:	35 91       	lpm	r19, Z+
    b894:	65 91       	lpm	r22, Z+
    b896:	95 91       	lpm	r25, Z+
    b898:	05 90       	lpm	r0, Z+
    b89a:	7f e2       	ldi	r23, 0x2F	; 47
    b89c:	73 95       	inc	r23
    b89e:	e1 18       	sub	r14, r1
    b8a0:	f1 0a       	sbc	r15, r17
    b8a2:	43 0b       	sbc	r20, r19
    b8a4:	56 0b       	sbc	r21, r22
    b8a6:	c9 0b       	sbc	r28, r25
    b8a8:	d0 09       	sbc	r29, r0
    b8aa:	c0 f7       	brcc	.-16     	; 0xb89c <__ftoa_engine+0x10a>
    b8ac:	e1 0c       	add	r14, r1
    b8ae:	f1 1e       	adc	r15, r17
    b8b0:	43 1f       	adc	r20, r19
    b8b2:	56 1f       	adc	r21, r22
    b8b4:	c9 1f       	adc	r28, r25
    b8b6:	d0 1d       	adc	r29, r0
    b8b8:	7e f4       	brtc	.+30     	; 0xb8d8 <__ftoa_engine+0x146>
    b8ba:	70 33       	cpi	r23, 0x30	; 48
    b8bc:	11 f4       	brne	.+4      	; 0xb8c2 <__ftoa_engine+0x130>
    b8be:	8a 95       	dec	r24
    b8c0:	e6 cf       	rjmp	.-52     	; 0xb88e <__ftoa_engine+0xfc>
    b8c2:	e8 94       	clt
    b8c4:	01 50       	subi	r16, 0x01	; 1
    b8c6:	30 f0       	brcs	.+12     	; 0xb8d4 <__ftoa_engine+0x142>
    b8c8:	08 0f       	add	r16, r24
    b8ca:	0a f4       	brpl	.+2      	; 0xb8ce <__ftoa_engine+0x13c>
    b8cc:	00 27       	eor	r16, r16
    b8ce:	02 17       	cp	r16, r18
    b8d0:	08 f4       	brcc	.+2      	; 0xb8d4 <__ftoa_engine+0x142>
    b8d2:	20 2f       	mov	r18, r16
    b8d4:	23 95       	inc	r18
    b8d6:	02 2f       	mov	r16, r18
    b8d8:	7a 33       	cpi	r23, 0x3A	; 58
    b8da:	28 f0       	brcs	.+10     	; 0xb8e6 <__ftoa_engine+0x154>
    b8dc:	79 e3       	ldi	r23, 0x39	; 57
    b8de:	7d 93       	st	X+, r23
    b8e0:	2a 95       	dec	r18
    b8e2:	e9 f7       	brne	.-6      	; 0xb8de <__ftoa_engine+0x14c>
    b8e4:	10 c0       	rjmp	.+32     	; 0xb906 <__ftoa_engine+0x174>
    b8e6:	7d 93       	st	X+, r23
    b8e8:	2a 95       	dec	r18
    b8ea:	89 f6       	brne	.-94     	; 0xb88e <__ftoa_engine+0xfc>
    b8ec:	06 94       	lsr	r0
    b8ee:	97 95       	ror	r25
    b8f0:	67 95       	ror	r22
    b8f2:	37 95       	ror	r19
    b8f4:	17 95       	ror	r17
    b8f6:	17 94       	ror	r1
    b8f8:	e1 18       	sub	r14, r1
    b8fa:	f1 0a       	sbc	r15, r17
    b8fc:	43 0b       	sbc	r20, r19
    b8fe:	56 0b       	sbc	r21, r22
    b900:	c9 0b       	sbc	r28, r25
    b902:	d0 09       	sbc	r29, r0
    b904:	98 f0       	brcs	.+38     	; 0xb92c <__ftoa_engine+0x19a>
    b906:	23 95       	inc	r18
    b908:	7e 91       	ld	r23, -X
    b90a:	73 95       	inc	r23
    b90c:	7a 33       	cpi	r23, 0x3A	; 58
    b90e:	08 f0       	brcs	.+2      	; 0xb912 <__ftoa_engine+0x180>
    b910:	70 e3       	ldi	r23, 0x30	; 48
    b912:	7c 93       	st	X, r23
    b914:	20 13       	cpse	r18, r16
    b916:	b8 f7       	brcc	.-18     	; 0xb906 <__ftoa_engine+0x174>
    b918:	7e 91       	ld	r23, -X
    b91a:	70 61       	ori	r23, 0x10	; 16
    b91c:	7d 93       	st	X+, r23
    b91e:	30 f0       	brcs	.+12     	; 0xb92c <__ftoa_engine+0x19a>
    b920:	83 95       	inc	r24
    b922:	71 e3       	ldi	r23, 0x31	; 49
    b924:	7d 93       	st	X+, r23
    b926:	70 e3       	ldi	r23, 0x30	; 48
    b928:	2a 95       	dec	r18
    b92a:	e1 f7       	brne	.-8      	; 0xb924 <__ftoa_engine+0x192>
    b92c:	11 24       	eor	r1, r1
    b92e:	ef 90       	pop	r14
    b930:	ff 90       	pop	r15
    b932:	0f 91       	pop	r16
    b934:	1f 91       	pop	r17
    b936:	cf 91       	pop	r28
    b938:	df 91       	pop	r29
    b93a:	99 27       	eor	r25, r25
    b93c:	87 fd       	sbrc	r24, 7
    b93e:	90 95       	com	r25
    b940:	08 95       	ret

0000b942 <strnlen_P>:
    b942:	fc 01       	movw	r30, r24
    b944:	05 90       	lpm	r0, Z+
    b946:	61 50       	subi	r22, 0x01	; 1
    b948:	70 40       	sbci	r23, 0x00	; 0
    b94a:	01 10       	cpse	r0, r1
    b94c:	d8 f7       	brcc	.-10     	; 0xb944 <strnlen_P+0x2>
    b94e:	80 95       	com	r24
    b950:	90 95       	com	r25
    b952:	8e 0f       	add	r24, r30
    b954:	9f 1f       	adc	r25, r31
    b956:	08 95       	ret

0000b958 <memcpy>:
    b958:	fb 01       	movw	r30, r22
    b95a:	dc 01       	movw	r26, r24
    b95c:	02 c0       	rjmp	.+4      	; 0xb962 <memcpy+0xa>
    b95e:	01 90       	ld	r0, Z+
    b960:	0d 92       	st	X+, r0
    b962:	41 50       	subi	r20, 0x01	; 1
    b964:	50 40       	sbci	r21, 0x00	; 0
    b966:	d8 f7       	brcc	.-10     	; 0xb95e <memcpy+0x6>
    b968:	08 95       	ret

0000b96a <strlen>:
    b96a:	fc 01       	movw	r30, r24
    b96c:	01 90       	ld	r0, Z+
    b96e:	00 20       	and	r0, r0
    b970:	e9 f7       	brne	.-6      	; 0xb96c <strlen+0x2>
    b972:	80 95       	com	r24
    b974:	90 95       	com	r25
    b976:	8e 0f       	add	r24, r30
    b978:	9f 1f       	adc	r25, r31
    b97a:	08 95       	ret

0000b97c <strnlen>:
    b97c:	fc 01       	movw	r30, r24
    b97e:	61 50       	subi	r22, 0x01	; 1
    b980:	70 40       	sbci	r23, 0x00	; 0
    b982:	01 90       	ld	r0, Z+
    b984:	01 10       	cpse	r0, r1
    b986:	d8 f7       	brcc	.-10     	; 0xb97e <strnlen+0x2>
    b988:	80 95       	com	r24
    b98a:	90 95       	com	r25
    b98c:	8e 0f       	add	r24, r30
    b98e:	9f 1f       	adc	r25, r31
    b990:	08 95       	ret

0000b992 <fdevopen>:
    b992:	0f 93       	push	r16
    b994:	1f 93       	push	r17
    b996:	cf 93       	push	r28
    b998:	df 93       	push	r29
    b99a:	00 97       	sbiw	r24, 0x00	; 0
    b99c:	31 f4       	brne	.+12     	; 0xb9aa <fdevopen+0x18>
    b99e:	61 15       	cp	r22, r1
    b9a0:	71 05       	cpc	r23, r1
    b9a2:	19 f4       	brne	.+6      	; 0xb9aa <fdevopen+0x18>
    b9a4:	80 e0       	ldi	r24, 0x00	; 0
    b9a6:	90 e0       	ldi	r25, 0x00	; 0
    b9a8:	39 c0       	rjmp	.+114    	; 0xba1c <fdevopen+0x8a>
    b9aa:	8b 01       	movw	r16, r22
    b9ac:	ec 01       	movw	r28, r24
    b9ae:	6e e0       	ldi	r22, 0x0E	; 14
    b9b0:	70 e0       	ldi	r23, 0x00	; 0
    b9b2:	81 e0       	ldi	r24, 0x01	; 1
    b9b4:	90 e0       	ldi	r25, 0x00	; 0
    b9b6:	3c d1       	rcall	.+632    	; 0xbc30 <calloc>
    b9b8:	fc 01       	movw	r30, r24
    b9ba:	89 2b       	or	r24, r25
    b9bc:	99 f3       	breq	.-26     	; 0xb9a4 <fdevopen+0x12>
    b9be:	80 e8       	ldi	r24, 0x80	; 128
    b9c0:	83 83       	std	Z+3, r24	; 0x03
    b9c2:	01 15       	cp	r16, r1
    b9c4:	11 05       	cpc	r17, r1
    b9c6:	71 f0       	breq	.+28     	; 0xb9e4 <fdevopen+0x52>
    b9c8:	02 87       	std	Z+10, r16	; 0x0a
    b9ca:	13 87       	std	Z+11, r17	; 0x0b
    b9cc:	81 e8       	ldi	r24, 0x81	; 129
    b9ce:	83 83       	std	Z+3, r24	; 0x03
    b9d0:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <__iob>
    b9d4:	90 91 e9 28 	lds	r25, 0x28E9	; 0x8028e9 <__iob+0x1>
    b9d8:	89 2b       	or	r24, r25
    b9da:	21 f4       	brne	.+8      	; 0xb9e4 <fdevopen+0x52>
    b9dc:	e0 93 e8 28 	sts	0x28E8, r30	; 0x8028e8 <__iob>
    b9e0:	f0 93 e9 28 	sts	0x28E9, r31	; 0x8028e9 <__iob+0x1>
    b9e4:	20 97       	sbiw	r28, 0x00	; 0
    b9e6:	c9 f0       	breq	.+50     	; 0xba1a <fdevopen+0x88>
    b9e8:	c0 87       	std	Z+8, r28	; 0x08
    b9ea:	d1 87       	std	Z+9, r29	; 0x09
    b9ec:	83 81       	ldd	r24, Z+3	; 0x03
    b9ee:	82 60       	ori	r24, 0x02	; 2
    b9f0:	83 83       	std	Z+3, r24	; 0x03
    b9f2:	80 91 ea 28 	lds	r24, 0x28EA	; 0x8028ea <__iob+0x2>
    b9f6:	90 91 eb 28 	lds	r25, 0x28EB	; 0x8028eb <__iob+0x3>
    b9fa:	89 2b       	or	r24, r25
    b9fc:	71 f4       	brne	.+28     	; 0xba1a <fdevopen+0x88>
    b9fe:	e0 93 ea 28 	sts	0x28EA, r30	; 0x8028ea <__iob+0x2>
    ba02:	f0 93 eb 28 	sts	0x28EB, r31	; 0x8028eb <__iob+0x3>
    ba06:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <__iob+0x4>
    ba0a:	90 91 ed 28 	lds	r25, 0x28ED	; 0x8028ed <__iob+0x5>
    ba0e:	89 2b       	or	r24, r25
    ba10:	21 f4       	brne	.+8      	; 0xba1a <fdevopen+0x88>
    ba12:	e0 93 ec 28 	sts	0x28EC, r30	; 0x8028ec <__iob+0x4>
    ba16:	f0 93 ed 28 	sts	0x28ED, r31	; 0x8028ed <__iob+0x5>
    ba1a:	cf 01       	movw	r24, r30
    ba1c:	df 91       	pop	r29
    ba1e:	cf 91       	pop	r28
    ba20:	1f 91       	pop	r17
    ba22:	0f 91       	pop	r16
    ba24:	08 95       	ret

0000ba26 <fputc>:
    ba26:	0f 93       	push	r16
    ba28:	1f 93       	push	r17
    ba2a:	cf 93       	push	r28
    ba2c:	df 93       	push	r29
    ba2e:	fb 01       	movw	r30, r22
    ba30:	23 81       	ldd	r18, Z+3	; 0x03
    ba32:	21 fd       	sbrc	r18, 1
    ba34:	03 c0       	rjmp	.+6      	; 0xba3c <fputc+0x16>
    ba36:	8f ef       	ldi	r24, 0xFF	; 255
    ba38:	9f ef       	ldi	r25, 0xFF	; 255
    ba3a:	2c c0       	rjmp	.+88     	; 0xba94 <fputc+0x6e>
    ba3c:	22 ff       	sbrs	r18, 2
    ba3e:	16 c0       	rjmp	.+44     	; 0xba6c <fputc+0x46>
    ba40:	46 81       	ldd	r20, Z+6	; 0x06
    ba42:	57 81       	ldd	r21, Z+7	; 0x07
    ba44:	24 81       	ldd	r18, Z+4	; 0x04
    ba46:	35 81       	ldd	r19, Z+5	; 0x05
    ba48:	42 17       	cp	r20, r18
    ba4a:	53 07       	cpc	r21, r19
    ba4c:	44 f4       	brge	.+16     	; 0xba5e <fputc+0x38>
    ba4e:	a0 81       	ld	r26, Z
    ba50:	b1 81       	ldd	r27, Z+1	; 0x01
    ba52:	9d 01       	movw	r18, r26
    ba54:	2f 5f       	subi	r18, 0xFF	; 255
    ba56:	3f 4f       	sbci	r19, 0xFF	; 255
    ba58:	20 83       	st	Z, r18
    ba5a:	31 83       	std	Z+1, r19	; 0x01
    ba5c:	8c 93       	st	X, r24
    ba5e:	26 81       	ldd	r18, Z+6	; 0x06
    ba60:	37 81       	ldd	r19, Z+7	; 0x07
    ba62:	2f 5f       	subi	r18, 0xFF	; 255
    ba64:	3f 4f       	sbci	r19, 0xFF	; 255
    ba66:	26 83       	std	Z+6, r18	; 0x06
    ba68:	37 83       	std	Z+7, r19	; 0x07
    ba6a:	14 c0       	rjmp	.+40     	; 0xba94 <fputc+0x6e>
    ba6c:	8b 01       	movw	r16, r22
    ba6e:	ec 01       	movw	r28, r24
    ba70:	fb 01       	movw	r30, r22
    ba72:	00 84       	ldd	r0, Z+8	; 0x08
    ba74:	f1 85       	ldd	r31, Z+9	; 0x09
    ba76:	e0 2d       	mov	r30, r0
    ba78:	19 95       	eicall
    ba7a:	89 2b       	or	r24, r25
    ba7c:	e1 f6       	brne	.-72     	; 0xba36 <fputc+0x10>
    ba7e:	d8 01       	movw	r26, r16
    ba80:	16 96       	adiw	r26, 0x06	; 6
    ba82:	8d 91       	ld	r24, X+
    ba84:	9c 91       	ld	r25, X
    ba86:	17 97       	sbiw	r26, 0x07	; 7
    ba88:	01 96       	adiw	r24, 0x01	; 1
    ba8a:	16 96       	adiw	r26, 0x06	; 6
    ba8c:	8d 93       	st	X+, r24
    ba8e:	9c 93       	st	X, r25
    ba90:	17 97       	sbiw	r26, 0x07	; 7
    ba92:	ce 01       	movw	r24, r28
    ba94:	df 91       	pop	r29
    ba96:	cf 91       	pop	r28
    ba98:	1f 91       	pop	r17
    ba9a:	0f 91       	pop	r16
    ba9c:	08 95       	ret

0000ba9e <printf>:
    ba9e:	cf 93       	push	r28
    baa0:	df 93       	push	r29
    baa2:	cd b7       	in	r28, 0x3d	; 61
    baa4:	de b7       	in	r29, 0x3e	; 62
    baa6:	ae 01       	movw	r20, r28
    baa8:	4a 5f       	subi	r20, 0xFA	; 250
    baaa:	5f 4f       	sbci	r21, 0xFF	; 255
    baac:	fa 01       	movw	r30, r20
    baae:	61 91       	ld	r22, Z+
    bab0:	71 91       	ld	r23, Z+
    bab2:	af 01       	movw	r20, r30
    bab4:	80 91 ea 28 	lds	r24, 0x28EA	; 0x8028ea <__iob+0x2>
    bab8:	90 91 eb 28 	lds	r25, 0x28EB	; 0x8028eb <__iob+0x3>
    babc:	72 d8       	rcall	.-3868   	; 0xaba2 <vfprintf>
    babe:	df 91       	pop	r29
    bac0:	cf 91       	pop	r28
    bac2:	08 95       	ret

0000bac4 <puts>:
    bac4:	0f 93       	push	r16
    bac6:	1f 93       	push	r17
    bac8:	cf 93       	push	r28
    baca:	df 93       	push	r29
    bacc:	e0 91 ea 28 	lds	r30, 0x28EA	; 0x8028ea <__iob+0x2>
    bad0:	f0 91 eb 28 	lds	r31, 0x28EB	; 0x8028eb <__iob+0x3>
    bad4:	23 81       	ldd	r18, Z+3	; 0x03
    bad6:	21 ff       	sbrs	r18, 1
    bad8:	1b c0       	rjmp	.+54     	; 0xbb10 <puts+0x4c>
    bada:	8c 01       	movw	r16, r24
    badc:	d0 e0       	ldi	r29, 0x00	; 0
    bade:	c0 e0       	ldi	r28, 0x00	; 0
    bae0:	f8 01       	movw	r30, r16
    bae2:	81 91       	ld	r24, Z+
    bae4:	8f 01       	movw	r16, r30
    bae6:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <__iob+0x2>
    baea:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <__iob+0x3>
    baee:	db 01       	movw	r26, r22
    baf0:	18 96       	adiw	r26, 0x08	; 8
    baf2:	ed 91       	ld	r30, X+
    baf4:	fc 91       	ld	r31, X
    baf6:	19 97       	sbiw	r26, 0x09	; 9
    baf8:	88 23       	and	r24, r24
    bafa:	31 f0       	breq	.+12     	; 0xbb08 <puts+0x44>
    bafc:	19 95       	eicall
    bafe:	89 2b       	or	r24, r25
    bb00:	79 f3       	breq	.-34     	; 0xbae0 <puts+0x1c>
    bb02:	df ef       	ldi	r29, 0xFF	; 255
    bb04:	cf ef       	ldi	r28, 0xFF	; 255
    bb06:	ec cf       	rjmp	.-40     	; 0xbae0 <puts+0x1c>
    bb08:	8a e0       	ldi	r24, 0x0A	; 10
    bb0a:	19 95       	eicall
    bb0c:	89 2b       	or	r24, r25
    bb0e:	19 f0       	breq	.+6      	; 0xbb16 <puts+0x52>
    bb10:	8f ef       	ldi	r24, 0xFF	; 255
    bb12:	9f ef       	ldi	r25, 0xFF	; 255
    bb14:	02 c0       	rjmp	.+4      	; 0xbb1a <puts+0x56>
    bb16:	8d 2f       	mov	r24, r29
    bb18:	9c 2f       	mov	r25, r28
    bb1a:	df 91       	pop	r29
    bb1c:	cf 91       	pop	r28
    bb1e:	1f 91       	pop	r17
    bb20:	0f 91       	pop	r16
    bb22:	08 95       	ret

0000bb24 <sprintf>:
    bb24:	0f 93       	push	r16
    bb26:	1f 93       	push	r17
    bb28:	cf 93       	push	r28
    bb2a:	df 93       	push	r29
    bb2c:	cd b7       	in	r28, 0x3d	; 61
    bb2e:	de b7       	in	r29, 0x3e	; 62
    bb30:	2e 97       	sbiw	r28, 0x0e	; 14
    bb32:	cd bf       	out	0x3d, r28	; 61
    bb34:	de bf       	out	0x3e, r29	; 62
    bb36:	0e 89       	ldd	r16, Y+22	; 0x16
    bb38:	1f 89       	ldd	r17, Y+23	; 0x17
    bb3a:	86 e0       	ldi	r24, 0x06	; 6
    bb3c:	8c 83       	std	Y+4, r24	; 0x04
    bb3e:	09 83       	std	Y+1, r16	; 0x01
    bb40:	1a 83       	std	Y+2, r17	; 0x02
    bb42:	8f ef       	ldi	r24, 0xFF	; 255
    bb44:	9f e7       	ldi	r25, 0x7F	; 127
    bb46:	8d 83       	std	Y+5, r24	; 0x05
    bb48:	9e 83       	std	Y+6, r25	; 0x06
    bb4a:	ae 01       	movw	r20, r28
    bb4c:	46 5e       	subi	r20, 0xE6	; 230
    bb4e:	5f 4f       	sbci	r21, 0xFF	; 255
    bb50:	68 8d       	ldd	r22, Y+24	; 0x18
    bb52:	79 8d       	ldd	r23, Y+25	; 0x19
    bb54:	ce 01       	movw	r24, r28
    bb56:	01 96       	adiw	r24, 0x01	; 1
    bb58:	24 d8       	rcall	.-4024   	; 0xaba2 <vfprintf>
    bb5a:	ef 81       	ldd	r30, Y+7	; 0x07
    bb5c:	f8 85       	ldd	r31, Y+8	; 0x08
    bb5e:	e0 0f       	add	r30, r16
    bb60:	f1 1f       	adc	r31, r17
    bb62:	10 82       	st	Z, r1
    bb64:	2e 96       	adiw	r28, 0x0e	; 14
    bb66:	cd bf       	out	0x3d, r28	; 61
    bb68:	de bf       	out	0x3e, r29	; 62
    bb6a:	df 91       	pop	r29
    bb6c:	cf 91       	pop	r28
    bb6e:	1f 91       	pop	r17
    bb70:	0f 91       	pop	r16
    bb72:	08 95       	ret

0000bb74 <__ultoa_invert>:
    bb74:	fa 01       	movw	r30, r20
    bb76:	aa 27       	eor	r26, r26
    bb78:	28 30       	cpi	r18, 0x08	; 8
    bb7a:	51 f1       	breq	.+84     	; 0xbbd0 <__ultoa_invert+0x5c>
    bb7c:	20 31       	cpi	r18, 0x10	; 16
    bb7e:	81 f1       	breq	.+96     	; 0xbbe0 <__ultoa_invert+0x6c>
    bb80:	e8 94       	clt
    bb82:	6f 93       	push	r22
    bb84:	6e 7f       	andi	r22, 0xFE	; 254
    bb86:	6e 5f       	subi	r22, 0xFE	; 254
    bb88:	7f 4f       	sbci	r23, 0xFF	; 255
    bb8a:	8f 4f       	sbci	r24, 0xFF	; 255
    bb8c:	9f 4f       	sbci	r25, 0xFF	; 255
    bb8e:	af 4f       	sbci	r26, 0xFF	; 255
    bb90:	b1 e0       	ldi	r27, 0x01	; 1
    bb92:	3e d0       	rcall	.+124    	; 0xbc10 <__ultoa_invert+0x9c>
    bb94:	b4 e0       	ldi	r27, 0x04	; 4
    bb96:	3c d0       	rcall	.+120    	; 0xbc10 <__ultoa_invert+0x9c>
    bb98:	67 0f       	add	r22, r23
    bb9a:	78 1f       	adc	r23, r24
    bb9c:	89 1f       	adc	r24, r25
    bb9e:	9a 1f       	adc	r25, r26
    bba0:	a1 1d       	adc	r26, r1
    bba2:	68 0f       	add	r22, r24
    bba4:	79 1f       	adc	r23, r25
    bba6:	8a 1f       	adc	r24, r26
    bba8:	91 1d       	adc	r25, r1
    bbaa:	a1 1d       	adc	r26, r1
    bbac:	6a 0f       	add	r22, r26
    bbae:	71 1d       	adc	r23, r1
    bbb0:	81 1d       	adc	r24, r1
    bbb2:	91 1d       	adc	r25, r1
    bbb4:	a1 1d       	adc	r26, r1
    bbb6:	20 d0       	rcall	.+64     	; 0xbbf8 <__ultoa_invert+0x84>
    bbb8:	09 f4       	brne	.+2      	; 0xbbbc <__ultoa_invert+0x48>
    bbba:	68 94       	set
    bbbc:	3f 91       	pop	r19
    bbbe:	2a e0       	ldi	r18, 0x0A	; 10
    bbc0:	26 9f       	mul	r18, r22
    bbc2:	11 24       	eor	r1, r1
    bbc4:	30 19       	sub	r19, r0
    bbc6:	30 5d       	subi	r19, 0xD0	; 208
    bbc8:	31 93       	st	Z+, r19
    bbca:	de f6       	brtc	.-74     	; 0xbb82 <__ultoa_invert+0xe>
    bbcc:	cf 01       	movw	r24, r30
    bbce:	08 95       	ret
    bbd0:	46 2f       	mov	r20, r22
    bbd2:	47 70       	andi	r20, 0x07	; 7
    bbd4:	40 5d       	subi	r20, 0xD0	; 208
    bbd6:	41 93       	st	Z+, r20
    bbd8:	b3 e0       	ldi	r27, 0x03	; 3
    bbda:	0f d0       	rcall	.+30     	; 0xbbfa <__ultoa_invert+0x86>
    bbdc:	c9 f7       	brne	.-14     	; 0xbbd0 <__ultoa_invert+0x5c>
    bbde:	f6 cf       	rjmp	.-20     	; 0xbbcc <__ultoa_invert+0x58>
    bbe0:	46 2f       	mov	r20, r22
    bbe2:	4f 70       	andi	r20, 0x0F	; 15
    bbe4:	40 5d       	subi	r20, 0xD0	; 208
    bbe6:	4a 33       	cpi	r20, 0x3A	; 58
    bbe8:	18 f0       	brcs	.+6      	; 0xbbf0 <__ultoa_invert+0x7c>
    bbea:	49 5d       	subi	r20, 0xD9	; 217
    bbec:	31 fd       	sbrc	r19, 1
    bbee:	40 52       	subi	r20, 0x20	; 32
    bbf0:	41 93       	st	Z+, r20
    bbf2:	02 d0       	rcall	.+4      	; 0xbbf8 <__ultoa_invert+0x84>
    bbf4:	a9 f7       	brne	.-22     	; 0xbbe0 <__ultoa_invert+0x6c>
    bbf6:	ea cf       	rjmp	.-44     	; 0xbbcc <__ultoa_invert+0x58>
    bbf8:	b4 e0       	ldi	r27, 0x04	; 4
    bbfa:	a6 95       	lsr	r26
    bbfc:	97 95       	ror	r25
    bbfe:	87 95       	ror	r24
    bc00:	77 95       	ror	r23
    bc02:	67 95       	ror	r22
    bc04:	ba 95       	dec	r27
    bc06:	c9 f7       	brne	.-14     	; 0xbbfa <__ultoa_invert+0x86>
    bc08:	00 97       	sbiw	r24, 0x00	; 0
    bc0a:	61 05       	cpc	r22, r1
    bc0c:	71 05       	cpc	r23, r1
    bc0e:	08 95       	ret
    bc10:	9b 01       	movw	r18, r22
    bc12:	ac 01       	movw	r20, r24
    bc14:	0a 2e       	mov	r0, r26
    bc16:	06 94       	lsr	r0
    bc18:	57 95       	ror	r21
    bc1a:	47 95       	ror	r20
    bc1c:	37 95       	ror	r19
    bc1e:	27 95       	ror	r18
    bc20:	ba 95       	dec	r27
    bc22:	c9 f7       	brne	.-14     	; 0xbc16 <__ultoa_invert+0xa2>
    bc24:	62 0f       	add	r22, r18
    bc26:	73 1f       	adc	r23, r19
    bc28:	84 1f       	adc	r24, r20
    bc2a:	95 1f       	adc	r25, r21
    bc2c:	a0 1d       	adc	r26, r0
    bc2e:	08 95       	ret

0000bc30 <calloc>:
    bc30:	0f 93       	push	r16
    bc32:	1f 93       	push	r17
    bc34:	cf 93       	push	r28
    bc36:	df 93       	push	r29
    bc38:	86 9f       	mul	r24, r22
    bc3a:	80 01       	movw	r16, r0
    bc3c:	87 9f       	mul	r24, r23
    bc3e:	10 0d       	add	r17, r0
    bc40:	96 9f       	mul	r25, r22
    bc42:	10 0d       	add	r17, r0
    bc44:	11 24       	eor	r1, r1
    bc46:	c8 01       	movw	r24, r16
    bc48:	83 dc       	rcall	.-1786   	; 0xb550 <malloc>
    bc4a:	ec 01       	movw	r28, r24
    bc4c:	00 97       	sbiw	r24, 0x00	; 0
    bc4e:	21 f0       	breq	.+8      	; 0xbc58 <calloc+0x28>
    bc50:	a8 01       	movw	r20, r16
    bc52:	60 e0       	ldi	r22, 0x00	; 0
    bc54:	70 e0       	ldi	r23, 0x00	; 0
    bc56:	06 d0       	rcall	.+12     	; 0xbc64 <memset>
    bc58:	ce 01       	movw	r24, r28
    bc5a:	df 91       	pop	r29
    bc5c:	cf 91       	pop	r28
    bc5e:	1f 91       	pop	r17
    bc60:	0f 91       	pop	r16
    bc62:	08 95       	ret

0000bc64 <memset>:
    bc64:	dc 01       	movw	r26, r24
    bc66:	01 c0       	rjmp	.+2      	; 0xbc6a <memset+0x6>
    bc68:	6d 93       	st	X+, r22
    bc6a:	41 50       	subi	r20, 0x01	; 1
    bc6c:	50 40       	sbci	r21, 0x00	; 0
    bc6e:	e0 f7       	brcc	.-8      	; 0xbc68 <memset+0x4>
    bc70:	08 95       	ret

0000bc72 <_exit>:
    bc72:	f8 94       	cli

0000bc74 <__stop_program>:
    bc74:	ff cf       	rjmp	.-2      	; 0xbc74 <__stop_program>
