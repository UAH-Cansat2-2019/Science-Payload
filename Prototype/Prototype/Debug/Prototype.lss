
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00802000  00008e54  00008ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000618  0080219c  0080219c  00009084  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000090e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00009120  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019930  00000000  00000000  00009d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006f9b  00000000  00000000  00023638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012197  00000000  00000000  0002a5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000379c  00000000  00000000  0003c76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00041b14  00000000  00000000  0003ff08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a4b  00000000  00000000  00081a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa8  00000000  00000000  00089468  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000fbaa  00000000  00000000  00089f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__vector_10>
      2c:	0c 94 4c 20 	jmp	0x4098	; 0x4098 <__vector_11>
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 5e 30 	jmp	0x60bc	; 0x60bc <__vector_13>
      38:	0c 94 cc 21 	jmp	0x4398	; 0x4398 <__vector_14>
      3c:	0c 94 23 22 	jmp	0x4446	; 0x4446 <__vector_15>
      40:	0c 94 7a 22 	jmp	0x44f4	; 0x44f4 <__vector_16>
      44:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__vector_17>
      48:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__vector_18>
      4c:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__vector_19>
      50:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__vector_20>
      54:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__vector_21>
      58:	0c 94 84 24 	jmp	0x4908	; 0x4908 <__vector_22>
      5c:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__vector_25>
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	10 c7       	rjmp	.+3616   	; 0xebe <__vector_39>
      9e:	00 00       	nop
      a0:	9a c7       	rjmp	.+3892   	; 0xfd6 <__vector_40>
      a2:	00 00       	nop
      a4:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_41>
      a8:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_42>
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 f6 30 	jmp	0x61ec	; 0x61ec <__vector_46>
      bc:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__vector_47>
      c0:	0c 94 ef 28 	jmp	0x51de	; 0x51de <__vector_48>
      c4:	0c 94 46 29 	jmp	0x528c	; 0x528c <__vector_49>
      c8:	0c 94 9d 29 	jmp	0x533a	; 0x533a <__vector_50>
      cc:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <__vector_51>
      d0:	0c 94 4b 2a 	jmp	0x5496	; 0x5496 <__vector_52>
      d4:	0c 94 a2 2a 	jmp	0x5544	; 0x5544 <__vector_53>
      d8:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__vector_54>
      dc:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__vector_55>
      e0:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <__vector_56>
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2a c1       	rjmp	.+596    	; 0x34a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c4       	rjmp	.+2368   	; 0xa5e <__vector_71>
     11e:	00 00       	nop
     120:	2a c5       	rjmp	.+2644   	; 0xb76 <__vector_72>
     122:	00 00       	nop
     124:	b4 c5       	rjmp	.+2920   	; 0xc8e <__vector_73>
     126:	00 00       	nop
     128:	3e c6       	rjmp	.+3196   	; 0xda6 <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 aa 30 	jmp	0x6154	; 0x6154 <__vector_76>
     134:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__vector_77>
     138:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__vector_78>
     13c:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <__vector_79>
     140:	0c 94 37 26 	jmp	0x4c6e	; 0x4c6e <__vector_80>
     144:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__vector_81>
     148:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__vector_82>
     14c:	0c 94 3c 27 	jmp	0x4e78	; 0x4e78 <__vector_83>
     150:	0c 94 93 27 	jmp	0x4f26	; 0x4f26 <__vector_84>
     154:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <__vector_85>
     158:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 42 31 	jmp	0x6284	; 0x6284 <__vector_107>
     1b0:	0c 94 fe 2b 	jmp	0x57fc	; 0x57fc <__vector_108>
     1b4:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <__vector_109>
     1b8:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <__vector_110>
     1bc:	0c 94 03 2d 	jmp	0x5a06	; 0x5a06 <__vector_111>
     1c0:	0c 94 5a 2d 	jmp	0x5ab4	; 0x5ab4 <__vector_112>
     1c4:	0c 94 b1 2d 	jmp	0x5b62	; 0x5b62 <__vector_113>
     1c8:	0c 94 08 2e 	jmp	0x5c10	; 0x5c10 <__vector_114>
     1cc:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <__vector_115>
     1d0:	0c 94 b6 2e 	jmp	0x5d6c	; 0x5d6c <__vector_116>
     1d4:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <__vector_117>
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b6 c0       	rjmp	.+364    	; 0x34a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__vector_122>
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__vector_124>
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	11 e2       	ldi	r17, 0x21	; 33
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e4 e5       	ldi	r30, 0x54	; 84
     31e:	fe e8       	ldi	r31, 0x8E	; 142
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	ac 39       	cpi	r26, 0x9C	; 156
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	27 e2       	ldi	r18, 0x27	; 39
     334:	ac e9       	ldi	r26, 0x9C	; 156
     336:	b1 e2       	ldi	r27, 0x21	; 33
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a4 3b       	cpi	r26, 0xB4	; 180
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 aa 3b 	call	0x7754	; 0x7754 <main>
     346:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <ioport_set_pin_low>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_low(port_pin_t pin)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	2a 97       	sbiw	r28, 0x0a	; 10
     356:	cd bf       	out	0x3d, r28	; 61
     358:	de bf       	out	0x3e, r29	; 62
     35a:	8a 87       	std	Y+10, r24	; 0x0a
     35c:	8a 85       	ldd	r24, Y+10	; 0x0a
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	1a 82       	std	Y+2, r1	; 0x02
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8b 83       	std	Y+3, r24	; 0x03
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	86 95       	lsr	r24
     36e:	86 95       	lsr	r24
     370:	86 95       	lsr	r24
     372:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     374:	8d 81       	ldd	r24, Y+5	; 0x05
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	82 95       	swap	r24
     380:	92 95       	swap	r25
     382:	90 7f       	andi	r25, 0xF0	; 240
     384:	98 27       	eor	r25, r24
     386:	80 7f       	andi	r24, 0xF0	; 240
     388:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     38a:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     38c:	8e 83       	std	Y+6, r24	; 0x06
     38e:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	88 23       	and	r24, r24
     394:	a9 f0       	breq	.+42     	; 0x3c0 <ioport_set_pin_low+0x74>
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     39a:	88 85       	ldd	r24, Y+8	; 0x08
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	9c 01       	movw	r18, r24
     3a2:	27 70       	andi	r18, 0x07	; 7
     3a4:	33 27       	eor	r19, r19
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <ioport_set_pin_low+0x64>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	2a 95       	dec	r18
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <ioport_set_pin_low+0x60>
     3b4:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	fc 01       	movw	r30, r24
     3bc:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, false);
}
     3be:	14 c0       	rjmp	.+40     	; 0x3e8 <ioport_set_pin_low+0x9c>
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3c4:	89 85       	ldd	r24, Y+9	; 0x09
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9c 01       	movw	r18, r24
     3cc:	27 70       	andi	r18, 0x07	; 7
     3ce:	33 27       	eor	r19, r19
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <ioport_set_pin_low+0x8e>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	2a 95       	dec	r18
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <ioport_set_pin_low+0x8a>
     3de:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     3e0:	8e 81       	ldd	r24, Y+6	; 0x06
     3e2:	9f 81       	ldd	r25, Y+7	; 0x07
     3e4:	fc 01       	movw	r30, r24
     3e6:	26 83       	std	Z+6, r18	; 0x06
     3e8:	00 00       	nop
     3ea:	2a 96       	adiw	r28, 0x0a	; 10
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	2a 97       	sbiw	r28, 0x0a	; 10
     400:	cd bf       	out	0x3d, r28	; 61
     402:	de bf       	out	0x3e, r29	; 62
     404:	8a 87       	std	Y+10, r24	; 0x0a
     406:	8a 85       	ldd	r24, Y+10	; 0x0a
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8a 83       	std	Y+2, r24	; 0x02
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	86 95       	lsr	r24
     41a:	86 95       	lsr	r24
     41c:	86 95       	lsr	r24
     41e:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     420:	8d 81       	ldd	r24, Y+5	; 0x05
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 95       	swap	r24
     42c:	92 95       	swap	r25
     42e:	90 7f       	andi	r25, 0xF0	; 240
     430:	98 27       	eor	r25, r24
     432:	80 7f       	andi	r24, 0xF0	; 240
     434:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     436:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     438:	8e 83       	std	Y+6, r24	; 0x06
     43a:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	88 23       	and	r24, r24
     440:	a9 f0       	breq	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     446:	88 85       	ldd	r24, Y+8	; 0x08
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9c 01       	movw	r18, r24
     44e:	27 70       	andi	r18, 0x07	; 7
     450:	33 27       	eor	r19, r19
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	2a 95       	dec	r18
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     462:	8e 81       	ldd	r24, Y+6	; 0x06
     464:	9f 81       	ldd	r25, Y+7	; 0x07
     466:	fc 01       	movw	r30, r24
     468:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, true);
}
     46a:	14 c0       	rjmp	.+40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     470:	89 85       	ldd	r24, Y+9	; 0x09
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9c 01       	movw	r18, r24
     478:	27 70       	andi	r18, 0x07	; 7
     47a:	33 27       	eor	r19, r19
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	2a 95       	dec	r18
     488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     48a:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     48c:	8e 81       	ldd	r24, Y+6	; 0x06
     48e:	9f 81       	ldd	r25, Y+7	; 0x07
     490:	fc 01       	movw	r30, r24
     492:	26 83       	std	Z+6, r18	; 0x06
     494:	00 00       	nop
     496:	2a 96       	adiw	r28, 0x0a	; 10
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <spi_put+0x6>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	6b 83       	std	Y+3, r22	; 0x03
	spi->DATA = data;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	2b 81       	ldd	r18, Y+3	; 0x03
     4b8:	fc 01       	movw	r30, r24
     4ba:	23 83       	std	Z+3, r18	; 0x03
}
     4bc:	00 00       	nop
     4be:	23 96       	adiw	r28, 0x03	; 3
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	1f 92       	push	r1
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	9a 83       	std	Y+2, r25	; 0x02
	return spi->DATA;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	fc 01       	movw	r30, r24
     4e0:	83 81       	ldd	r24, Z+3	; 0x03
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <spi_is_tx_ok>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	1f 92       	push	r1
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	9a 83       	std	Y+2, r25	; 0x02
	return spi->STATUS & SPI_IF_bm ? true : false;
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	fc 01       	movw	r30, r24
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	88 1f       	adc	r24, r24
     506:	88 27       	eor	r24, r24
     508:	88 1f       	adc	r24, r24
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <spi_enable_master_mode>:
 * \param spi Base address of the SPI instance.
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	1f 92       	push	r1
     51a:	1f 92       	push	r1
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_MASTER_bm;
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	28 2f       	mov	r18, r24
     52e:	20 61       	ori	r18, 0x10	; 16
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
}
     538:	00 00       	nop
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <spi_read_single>:
 * \param spi Base address of the SPI instance.
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <spi_read_single+0x6>
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	6b 83       	std	Y+3, r22	; 0x03
     556:	7c 83       	std	Y+4, r23	; 0x04
	*data=spi_get(spi);
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	b6 df       	rcall	.-148    	; 0x4ca <spi_get>
     55e:	28 2f       	mov	r18, r24
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
}
     568:	00 00       	nop
     56a:	24 96       	adiw	r28, 0x04	; 4
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	de bf       	out	0x3e, r29	; 62
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <spi_is_rx_full>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
inline static bool spi_is_rx_full(SPI_t *spi)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	1f 92       	push	r1
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	89 83       	std	Y+1, r24	; 0x01
     584:	9a 83       	std	Y+2, r25	; 0x02
	return spi_is_tx_ok(spi);
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	b0 df       	rcall	.-160    	; 0x4ec <spi_is_tx_ok>
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	9c e6       	ldi	r25, 0x6C	; 108
     5a2:	ac ed       	ldi	r26, 0xDC	; 220
     5a4:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     5ba:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     5bc:	ec df       	rcall	.-40     	; 0x596 <sysclk_get_main_hz>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	22 2f       	mov	r18, r18
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <sysclk_get_per4_hz+0x22>
     5ca:	b6 95       	lsr	r27
     5cc:	a7 95       	ror	r26
     5ce:	97 95       	ror	r25
     5d0:	87 95       	ror	r24
     5d2:	2a 95       	dec	r18
     5d4:	d2 f7       	brpl	.-12     	; 0x5ca <sysclk_get_per4_hz+0x1a>
}
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     5ea:	e2 df       	rcall	.-60     	; 0x5b0 <sysclk_get_per4_hz>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     602:	ef df       	rcall	.-34     	; 0x5e2 <sysclk_get_per2_hz>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
}
     608:	bc 01       	movw	r22, r24
     60a:	cd 01       	movw	r24, r26
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
     61a:	ef df       	rcall	.-34     	; 0x5fa <sysclk_get_per_hz>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
}
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	1f 92       	push	r1
     630:	1f 92       	push	r1
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	9a 83       	std	Y+2, r25	; 0x02
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	80 3c       	cpi	r24, 0xC0	; 192
     640:	98 40       	sbci	r25, 0x08	; 8
     642:	21 f4       	brne	.+8      	; 0x64c <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     644:	68 e0       	ldi	r22, 0x08	; 8
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	80 3c       	cpi	r24, 0xC0	; 192
     652:	99 40       	sbci	r25, 0x09	; 9
     654:	21 f4       	brne	.+8      	; 0x65e <spi_master_init+0x34>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	if ((uint16_t)spi == (uint16_t)&SPIE) {
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	80 3c       	cpi	r24, 0xC0	; 192
     664:	9a 40       	sbci	r25, 0x0A	; 10
     666:	21 f4       	brne	.+8      	; 0x670 <spi_master_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E, PR_SPI_bm);
     668:	68 e0       	ldi	r22, 0x08	; 8
     66a:	85 e0       	ldi	r24, 0x05	; 5
     66c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	if ((uint16_t)spi == (uint16_t)&SPIF) {
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	80 3c       	cpi	r24, 0xC0	; 192
     676:	9b 40       	sbci	r25, 0x0B	; 11
     678:	21 f4       	brne	.+8      	; 0x682 <spi_master_init+0x58>
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
     67a:	68 e0       	ldi	r22, 0x08	; 8
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	spi_enable_master_mode(spi);
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	46 df       	rcall	.-372    	; 0x514 <spi_enable_master_mode>
}
     688:	00 00       	nop
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	2d 97       	sbiw	r28, 0x0d	; 13
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	6b 83       	std	Y+3, r22	; 0x03
     6b4:	7c 83       	std	Y+4, r23	; 0x04
     6b6:	4d 83       	std	Y+5, r20	; 0x05
     6b8:	0e 83       	std	Y+6, r16	; 0x06
     6ba:	1f 83       	std	Y+7, r17	; 0x07
     6bc:	28 87       	std	Y+8, r18	; 0x08
     6be:	39 87       	std	Y+9, r19	; 0x09
     6c0:	ca 86       	std	Y+10, r12	; 0x0a
     6c2:	db 86       	std	Y+11, r13	; 0x0b
     6c4:	ec 86       	std	Y+12, r14	; 0x0c
     6c6:	fd 86       	std	Y+13, r15	; 0x0d
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     6c8:	a4 df       	rcall	.-184    	; 0x612 <sysclk_get_cpu_hz>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	8e 81       	ldd	r24, Y+6	; 0x06
     6d0:	9f 81       	ldd	r25, Y+7	; 0x07
     6d2:	a8 85       	ldd	r26, Y+8	; 0x08
     6d4:	b9 85       	ldd	r27, Y+9	; 0x09
     6d6:	e9 81       	ldd	r30, Y+1	; 0x01
     6d8:	fa 81       	ldd	r31, Y+2	; 0x02
     6da:	89 01       	movw	r16, r18
     6dc:	9a 01       	movw	r18, r20
     6de:	ac 01       	movw	r20, r24
     6e0:	bd 01       	movw	r22, r26
     6e2:	cf 01       	movw	r24, r30
     6e4:	0e 94 0c 21 	call	0x4218	; 0x4218 <spi_xmega_set_baud_div>
     6e8:	88 23       	and	r24, r24
     6ea:	ac f0       	brlt	.+42     	; 0x716 <spi_master_setup_device+0x82>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	28 2f       	mov	r18, r24
     6f6:	23 7f       	andi	r18, 0xF3	; 243
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     706:	8c 70       	andi	r24, 0x0C	; 12
     708:	82 2b       	or	r24, r18
     70a:	28 2f       	mov	r18, r24
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
     714:	01 c0       	rjmp	.+2      	; 0x718 <spi_master_setup_device+0x84>
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
		Assert(false);
		return;
     716:	00 00       	nop
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     718:	2d 96       	adiw	r28, 0x0d	; 13
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	8c 83       	std	Y+4, r24	; 0x04
     740:	9d 83       	std	Y+5, r25	; 0x05
     742:	6e 83       	std	Y+6, r22	; 0x06
     744:	7f 83       	std	Y+7, r23	; 0x07
     746:	48 87       	std	Y+8, r20	; 0x08
     748:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     74a:	1b c0       	rjmp	.+54     	; 0x782 <spi_write_packet+0x52>
		spi_write_single(spi, *data++);
     74c:	8e 81       	ldd	r24, Y+6	; 0x06
     74e:	9f 81       	ldd	r25, Y+7	; 0x07
     750:	9c 01       	movw	r18, r24
     752:	2f 5f       	subi	r18, 0xFF	; 255
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	2e 83       	std	Y+6, r18	; 0x06
     758:	3f 83       	std	Y+7, r19	; 0x07
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8c 81       	ldd	r24, Y+4	; 0x04
     760:	9d 81       	ldd	r25, Y+5	; 0x05
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	2b 83       	std	Y+3, r18	; 0x03
 * \param data The data byte to be loaded
 *
 */
__always_inline static void spi_write_single(SPI_t *spi, uint8_t data)
{
	spi_put(spi,data);
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	6b 81       	ldd	r22, Y+3	; 0x03
     76e:	99 de       	rcall	.-718    	; 0x4a2 <spi_put>
		
		while (!spi_is_rx_full(spi)) {
     770:	00 00       	nop
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	9d 81       	ldd	r25, Y+5	; 0x05
     776:	ff de       	rcall	.-514    	; 0x576 <spi_is_rx_full>
     778:	98 2f       	mov	r25, r24
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 27       	eor	r24, r25
     77e:	88 23       	and	r24, r24
     780:	c1 f7       	brne	.-16     	; 0x772 <spi_write_packet+0x42>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     782:	88 85       	ldd	r24, Y+8	; 0x08
     784:	99 85       	ldd	r25, Y+9	; 0x09
     786:	9c 01       	movw	r18, r24
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	31 09       	sbc	r19, r1
     78c:	28 87       	std	Y+8, r18	; 0x08
     78e:	39 87       	std	Y+9, r19	; 0x09
     790:	89 2b       	or	r24, r25
     792:	e1 f6       	brne	.-72     	; 0x74c <spi_write_packet+0x1c>
		
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
     794:	80 e0       	ldi	r24, 0x00	; 0
}
     796:	29 96       	adiw	r28, 0x09	; 9
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	29 97       	sbiw	r28, 0x09	; 9
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	8c 83       	std	Y+4, r24	; 0x04
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	6e 83       	std	Y+6, r22	; 0x06
     7b6:	7f 83       	std	Y+7, r23	; 0x07
     7b8:	48 87       	std	Y+8, r20	; 0x08
     7ba:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     7bc:	1e c0       	rjmp	.+60     	; 0x7fa <spi_read_packet+0x58>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	8b 83       	std	Y+3, r24	; 0x03
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	6b 81       	ldd	r22, Y+3	; 0x03
     7d0:	68 de       	rcall	.-816    	; 0x4a2 <spi_put>
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     7d2:	00 00       	nop
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	9d 81       	ldd	r25, Y+5	; 0x05
     7d8:	ce de       	rcall	.-612    	; 0x576 <spi_is_rx_full>
     7da:	98 2f       	mov	r25, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 27       	eor	r24, r25
     7e0:	88 23       	and	r24, r24
     7e2:	c1 f7       	brne	.-16     	; 0x7d4 <spi_read_packet+0x32>
		}
		
		spi_read_single(spi, data);
     7e4:	2e 81       	ldd	r18, Y+6	; 0x06
     7e6:	3f 81       	ldd	r19, Y+7	; 0x07
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	9d 81       	ldd	r25, Y+5	; 0x05
     7ec:	b9 01       	movw	r22, r18
     7ee:	aa de       	rcall	.-684    	; 0x544 <spi_read_single>
		data++;
     7f0:	8e 81       	ldd	r24, Y+6	; 0x06
     7f2:	9f 81       	ldd	r25, Y+7	; 0x07
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	8e 83       	std	Y+6, r24	; 0x06
     7f8:	9f 83       	std	Y+7, r25	; 0x07
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     7fa:	88 85       	ldd	r24, Y+8	; 0x08
     7fc:	99 85       	ldd	r25, Y+9	; 0x09
     7fe:	9c 01       	movw	r18, r24
     800:	21 50       	subi	r18, 0x01	; 1
     802:	31 09       	sbc	r19, r1
     804:	28 87       	std	Y+8, r18	; 0x08
     806:	39 87       	std	Y+9, r19	; 0x09
     808:	89 2b       	or	r24, r25
     80a:	c9 f6       	brne	.-78     	; 0x7be <spi_read_packet+0x1c>
		
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
     80c:	80 e0       	ldi	r24, 0x00	; 0
}
     80e:	29 96       	adiw	r28, 0x09	; 9
     810:	cd bf       	out	0x3d, r28	; 61
     812:	de bf       	out	0x3e, r29	; 62
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <spi_select_device+0x6>
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	6b 83       	std	Y+3, r22	; 0x03
     82c:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_low(device->id);
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	8a dd       	rcall	.-1260   	; 0x34c <ioport_set_pin_low>
}
     838:	00 00       	nop
     83a:	24 96       	adiw	r28, 0x04	; 4
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	de bf       	out	0x3e, r29	; 62
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <spi_deselect_device+0x6>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	9a 83       	std	Y+2, r25	; 0x02
     856:	6b 83       	std	Y+3, r22	; 0x03
     858:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_high(device->id);
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	c9 dd       	rcall	.-1134   	; 0x3f6 <ioport_set_pin_high>
}
     864:	00 00       	nop
     866:	24 96       	adiw	r28, 0x04	; 4
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	1f 92       	push	r1
     878:	1f 92       	push	r1
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	81 15       	cp	r24, r1
     888:	92 40       	sbci	r25, 0x02	; 2
     88a:	69 f4       	brne	.+26     	; 0x8a6 <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     88c:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <__data_end>
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	98 0f       	add	r25, r24
     894:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <__data_end>
     898:	88 23       	and	r24, r24
     89a:	b1 f4       	brne	.+44     	; 0x8c8 <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     89c:	62 e0       	ldi	r22, 0x02	; 2
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     8a4:	11 c0       	rjmp	.+34     	; 0x8c8 <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	80 34       	cpi	r24, 0x40	; 64
     8ac:	92 40       	sbci	r25, 0x02	; 2
     8ae:	61 f4       	brne	.+24     	; 0x8c8 <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     8b0:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <adcb_enable_count>
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	98 0f       	add	r25, r24
     8b8:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <adcb_enable_count>
     8bc:	88 23       	and	r24, r24
     8be:	21 f4       	brne	.+8      	; 0x8c8 <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     8c0:	62 e0       	ldi	r22, 0x02	; 2
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     8c8:	00 00       	nop
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	1f 92       	push	r1
     8da:	1f 92       	push	r1
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	89 83       	std	Y+1, r24	; 0x01
     8e2:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	81 15       	cp	r24, r1
     8ea:	92 40       	sbci	r25, 0x02	; 2
     8ec:	71 f4       	brne	.+28     	; 0x90a <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     8ee:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <__data_end>
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <__data_end>
     8f8:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <__data_end>
     8fc:	88 23       	and	r24, r24
     8fe:	b9 f4       	brne	.+46     	; 0x92e <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     900:	62 e0       	ldi	r22, 0x02	; 2
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     908:	12 c0       	rjmp	.+36     	; 0x92e <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
     90e:	80 34       	cpi	r24, 0x40	; 64
     910:	92 40       	sbci	r25, 0x02	; 2
     912:	69 f4       	brne	.+26     	; 0x92e <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     914:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <adcb_enable_count>
     918:	81 50       	subi	r24, 0x01	; 1
     91a:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <adcb_enable_count>
     91e:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <adcb_enable_count>
     922:	88 23       	and	r24, r24
     924:	21 f4       	brne	.+8      	; 0x92e <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     926:	62 e0       	ldi	r22, 0x02	; 2
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     92e:	00 00       	nop
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	1f 92       	push	r1
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     944:	8f e3       	ldi	r24, 0x3F	; 63
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     94e:	f8 94       	cli
	return flags;
     950:	89 81       	ldd	r24, Y+1	; 0x01
}
     952:	0f 90       	pop	r0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     966:	8f e3       	ldi	r24, 0x3F	; 63
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	29 81       	ldd	r18, Y+1	; 0x01
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
}
     970:	00 00       	nop
     972:	0f 90       	pop	r0
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	1f 92       	push	r1
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	bc 01       	movw	r22, r24
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <nvm_read_byte>
}
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <adc_get_calibration_data+0x6>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	88 2f       	mov	r24, r24
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	91 05       	cpc	r25, r1
     9b2:	e9 f0       	breq	.+58     	; 0x9ee <adc_get_calibration_data+0x52>
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	91 05       	cpc	r25, r1
     9b8:	89 f1       	breq	.+98     	; 0xa1c <adc_get_calibration_data+0x80>
     9ba:	89 2b       	or	r24, r25
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <adc_get_calibration_data+0x24>
     9be:	45 c0       	rjmp	.+138    	; 0xa4a <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     9c0:	81 e2       	ldi	r24, 0x21	; 33
     9c2:	db df       	rcall	.-74     	; 0x97a <nvm_read_production_signature_row>
     9c4:	88 2f       	mov	r24, r24
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	98 2f       	mov	r25, r24
     9d2:	88 27       	eor	r24, r24
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
     9d8:	80 e2       	ldi	r24, 0x20	; 32
     9da:	cf df       	rcall	.-98     	; 0x97a <nvm_read_production_signature_row>
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	3a 81       	ldd	r19, Y+2	; 0x02
     9e4:	82 2b       	or	r24, r18
     9e6:	93 2b       	or	r25, r19
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     9ec:	30 c0       	rjmp	.+96     	; 0xa4e <adc_get_calibration_data+0xb2>
     9ee:	85 e2       	ldi	r24, 0x25	; 37
     9f0:	c4 df       	rcall	.-120    	; 0x97a <nvm_read_production_signature_row>
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	9a 81       	ldd	r25, Y+2	; 0x02
     9fe:	98 2f       	mov	r25, r24
     a00:	88 27       	eor	r24, r24
     a02:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	84 e2       	ldi	r24, 0x24	; 36
     a08:	b8 df       	rcall	.-144    	; 0x97a <nvm_read_production_signature_row>
     a0a:	88 2f       	mov	r24, r24
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	29 81       	ldd	r18, Y+1	; 0x01
     a10:	3a 81       	ldd	r19, Y+2	; 0x02
     a12:	82 2b       	or	r24, r18
     a14:	93 2b       	or	r25, r19
     a16:	89 83       	std	Y+1, r24	; 0x01
		break;
     a18:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
     a1a:	19 c0       	rjmp	.+50     	; 0xa4e <adc_get_calibration_data+0xb2>
     a1c:	8f e2       	ldi	r24, 0x2F	; 47
     a1e:	ad df       	rcall	.-166    	; 0x97a <nvm_read_production_signature_row>
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	98 2f       	mov	r25, r24
     a2e:	88 27       	eor	r24, r24
     a30:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     a32:	9a 83       	std	Y+2, r25	; 0x02
     a34:	8e e2       	ldi	r24, 0x2E	; 46
     a36:	a1 df       	rcall	.-190    	; 0x97a <nvm_read_production_signature_row>
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	3a 81       	ldd	r19, Y+2	; 0x02
     a40:	82 2b       	or	r24, r18
     a42:	93 2b       	or	r25, r19
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	9a 83       	std	Y+2, r25	; 0x02
		break;
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     a4a:	19 82       	std	Y+1, r1	; 0x01
     a4c:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a52:	23 96       	adiw	r28, 0x03	; 3
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     a5e:	1f 92       	push	r1
     a60:	0f 92       	push	r0
     a62:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
     a6a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a6e:	0f 92       	push	r0
     a70:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a74:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a78:	0f 92       	push	r0
     a7a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a7e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a82:	0f 92       	push	r0
     a84:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a88:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a8c:	0f 92       	push	r0
     a8e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	00 d0       	rcall	.+0      	; 0xab0 <__vector_71+0x52>
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     ab6:	20 91 0f 22 	lds	r18, 0x220F	; 0x80220f <adca_callback>
     aba:	30 91 10 22 	lds	r19, 0x2210	; 0x802210 <adca_callback+0x1>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     aca:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	83 70       	andi	r24, 0x03	; 3
     ad4:	99 27       	eor	r25, r25
     ad6:	89 2b       	or	r24, r25
     ad8:	39 f4       	brne	.+14     	; 0xae8 <__vector_71+0x8a>
		index += 2;
     ada:	8c 81       	ldd	r24, Y+4	; 0x04
     adc:	8e 5f       	subi	r24, 0xFE	; 254
     ade:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	86 95       	lsr	r24
     ae4:	86 95       	lsr	r24
     ae6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	81 70       	andi	r24, 0x01	; 1
     af0:	99 27       	eor	r25, r25
     af2:	89 2b       	or	r24, r25
     af4:	19 f4       	brne	.+6      	; 0xafc <__vector_71+0x9e>
		index++;
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	ac 01       	movw	r20, r24
     b02:	40 5e       	subi	r20, 0xE0	; 224
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	88 2f       	mov	r24, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	88 0f       	add	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	84 0f       	add	r24, r20
     b1a:	95 1f       	adc	r25, r21
     b1c:	fc 01       	movw	r30, r24
     b1e:	84 81       	ldd	r24, Z+4	; 0x04
     b20:	95 81       	ldd	r25, Z+5	; 0x05
     b22:	ac 01       	movw	r20, r24
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	f9 01       	movw	r30, r18
     b2c:	19 95       	eicall
}
     b2e:	00 00       	nop
     b30:	24 96       	adiw	r28, 0x04	; 4
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	0f 90       	pop	r0
     b54:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b58:	0f 90       	pop	r0
     b5a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b5e:	0f 90       	pop	r0
     b60:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b64:	0f 90       	pop	r0
     b66:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b6a:	0f 90       	pop	r0
     b6c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b86:	0f 92       	push	r0
     b88:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b8c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b90:	0f 92       	push	r0
     b92:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b96:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b9a:	0f 92       	push	r0
     b9c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ba0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ba4:	0f 92       	push	r0
     ba6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <__vector_72+0x52>
     bc8:	1f 92       	push	r1
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     bce:	20 91 0f 22 	lds	r18, 0x220F	; 0x80220f <adca_callback>
     bd2:	30 91 10 22 	lds	r19, 0x2210	; 0x802210 <adca_callback+0x1>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     be2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	83 70       	andi	r24, 0x03	; 3
     bec:	99 27       	eor	r25, r25
     bee:	89 2b       	or	r24, r25
     bf0:	39 f4       	brne	.+14     	; 0xc00 <__vector_72+0x8a>
		index += 2;
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	8e 5f       	subi	r24, 0xFE	; 254
     bf6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	86 95       	lsr	r24
     bfc:	86 95       	lsr	r24
     bfe:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	81 70       	andi	r24, 0x01	; 1
     c08:	99 27       	eor	r25, r25
     c0a:	89 2b       	or	r24, r25
     c0c:	19 f4       	brne	.+6      	; 0xc14 <__vector_72+0x9e>
		index++;
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	ac 01       	movw	r20, r24
     c1a:	40 5e       	subi	r20, 0xE0	; 224
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	84 0f       	add	r24, r20
     c32:	95 1f       	adc	r25, r21
     c34:	fc 01       	movw	r30, r24
     c36:	84 81       	ldd	r24, Z+4	; 0x04
     c38:	95 81       	ldd	r25, Z+5	; 0x05
     c3a:	ac 01       	movw	r20, r24
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	f9 01       	movw	r30, r18
     c44:	19 95       	eicall
}
     c46:	00 00       	nop
     c48:	24 96       	adiw	r28, 0x04	; 4
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c70:	0f 90       	pop	r0
     c72:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c76:	0f 90       	pop	r0
     c78:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c7c:	0f 90       	pop	r0
     c7e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c82:	0f 90       	pop	r0
     c84:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c9e:	0f 92       	push	r0
     ca0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ca4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ca8:	0f 92       	push	r0
     caa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cae:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cb2:	0f 92       	push	r0
     cb4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cb8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cbc:	0f 92       	push	r0
     cbe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	00 d0       	rcall	.+0      	; 0xce0 <__vector_73+0x52>
     ce0:	1f 92       	push	r1
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     ce6:	20 91 0f 22 	lds	r18, 0x220F	; 0x80220f <adca_callback>
     cea:	30 91 10 22 	lds	r19, 0x2210	; 0x802210 <adca_callback+0x1>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cfa:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	83 70       	andi	r24, 0x03	; 3
     d04:	99 27       	eor	r25, r25
     d06:	89 2b       	or	r24, r25
     d08:	39 f4       	brne	.+14     	; 0xd18 <__vector_73+0x8a>
		index += 2;
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	8e 5f       	subi	r24, 0xFE	; 254
     d0e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	86 95       	lsr	r24
     d14:	86 95       	lsr	r24
     d16:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	81 70       	andi	r24, 0x01	; 1
     d20:	99 27       	eor	r25, r25
     d22:	89 2b       	or	r24, r25
     d24:	19 f4       	brne	.+6      	; 0xd2c <__vector_73+0x9e>
		index++;
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	ac 01       	movw	r20, r24
     d32:	40 5e       	subi	r20, 0xE0	; 224
     d34:	5f 4f       	sbci	r21, 0xFF	; 255
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	84 0f       	add	r24, r20
     d4a:	95 1f       	adc	r25, r21
     d4c:	fc 01       	movw	r30, r24
     d4e:	84 81       	ldd	r24, Z+4	; 0x04
     d50:	95 81       	ldd	r25, Z+5	; 0x05
     d52:	ac 01       	movw	r20, r24
     d54:	64 e0       	ldi	r22, 0x04	; 4
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	f9 01       	movw	r30, r18
     d5c:	19 95       	eicall
}
     d5e:	00 00       	nop
     d60:	24 96       	adiw	r28, 0x04	; 4
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d88:	0f 90       	pop	r0
     d8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d8e:	0f 90       	pop	r0
     d90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d94:	0f 90       	pop	r0
     d96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d9a:	0f 90       	pop	r0
     d9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     db6:	0f 92       	push	r0
     db8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dbc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dc0:	0f 92       	push	r0
     dc2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dc6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dca:	0f 92       	push	r0
     dcc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dd0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dd4:	0f 92       	push	r0
     dd6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dda:	2f 93       	push	r18
     ddc:	3f 93       	push	r19
     dde:	4f 93       	push	r20
     de0:	5f 93       	push	r21
     de2:	6f 93       	push	r22
     de4:	7f 93       	push	r23
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	af 93       	push	r26
     dec:	bf 93       	push	r27
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <__vector_74+0x52>
     df8:	1f 92       	push	r1
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     dfe:	20 91 0f 22 	lds	r18, 0x220F	; 0x80220f <adca_callback>
     e02:	30 91 10 22 	lds	r19, 0x2210	; 0x802210 <adca_callback+0x1>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     e12:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	83 70       	andi	r24, 0x03	; 3
     e1c:	99 27       	eor	r25, r25
     e1e:	89 2b       	or	r24, r25
     e20:	39 f4       	brne	.+14     	; 0xe30 <__vector_74+0x8a>
		index += 2;
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	8e 5f       	subi	r24, 0xFE	; 254
     e26:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	99 27       	eor	r25, r25
     e3a:	89 2b       	or	r24, r25
     e3c:	19 f4       	brne	.+6      	; 0xe44 <__vector_74+0x9e>
		index++;
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	ac 01       	movw	r20, r24
     e4a:	40 5e       	subi	r20, 0xE0	; 224
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	84 0f       	add	r24, r20
     e62:	95 1f       	adc	r25, r21
     e64:	fc 01       	movw	r30, r24
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	95 81       	ldd	r25, Z+5	; 0x05
     e6a:	ac 01       	movw	r20, r24
     e6c:	68 e0       	ldi	r22, 0x08	; 8
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	f9 01       	movw	r30, r18
     e74:	19 95       	eicall
}
     e76:	00 00       	nop
     e78:	24 96       	adiw	r28, 0x04	; 4
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ea0:	0f 90       	pop	r0
     ea2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ea6:	0f 90       	pop	r0
     ea8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     eac:	0f 90       	pop	r0
     eae:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     eb2:	0f 90       	pop	r0
     eb4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ece:	0f 92       	push	r0
     ed0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ed4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ed8:	0f 92       	push	r0
     eda:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ede:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ee2:	0f 92       	push	r0
     ee4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ee8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     eec:	0f 92       	push	r0
     eee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <__vector_39+0x52>
     f10:	1f 92       	push	r1
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     f16:	20 91 0d 22 	lds	r18, 0x220D	; 0x80220d <adcb_callback>
     f1a:	30 91 0e 22 	lds	r19, 0x220E	; 0x80220e <adcb_callback+0x1>
     f1e:	80 e4       	ldi	r24, 0x40	; 64
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     f2a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	83 70       	andi	r24, 0x03	; 3
     f34:	99 27       	eor	r25, r25
     f36:	89 2b       	or	r24, r25
     f38:	39 f4       	brne	.+14     	; 0xf48 <__vector_39+0x8a>
		index += 2;
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	8e 5f       	subi	r24, 0xFE	; 254
     f3e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	81 70       	andi	r24, 0x01	; 1
     f50:	99 27       	eor	r25, r25
     f52:	89 2b       	or	r24, r25
     f54:	19 f4       	brne	.+6      	; 0xf5c <__vector_39+0x9e>
		index++;
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	ac 01       	movw	r20, r24
     f62:	40 5e       	subi	r20, 0xE0	; 224
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	84 0f       	add	r24, r20
     f7a:	95 1f       	adc	r25, r21
     f7c:	fc 01       	movw	r30, r24
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	95 81       	ldd	r25, Z+5	; 0x05
     f82:	ac 01       	movw	r20, r24
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	80 e4       	ldi	r24, 0x40	; 64
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	f9 01       	movw	r30, r18
     f8c:	19 95       	eicall
}
     f8e:	00 00       	nop
     f90:	24 96       	adiw	r28, 0x04	; 4
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fb8:	0f 90       	pop	r0
     fba:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fbe:	0f 90       	pop	r0
     fc0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fc4:	0f 90       	pop	r0
     fc6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fca:	0f 90       	pop	r0
     fcc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fe6:	0f 92       	push	r0
     fe8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fec:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ff0:	0f 92       	push	r0
     ff2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ff6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ffa:	0f 92       	push	r0
     ffc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1000:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1004:	0f 92       	push	r0
    1006:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	00 d0       	rcall	.+0      	; 0x1028 <__vector_40+0x52>
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    102e:	20 91 0d 22 	lds	r18, 0x220D	; 0x80220d <adcb_callback>
    1032:	30 91 0e 22 	lds	r19, 0x220E	; 0x80220e <adcb_callback+0x1>
    1036:	80 e4       	ldi	r24, 0x40	; 64
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1042:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	83 70       	andi	r24, 0x03	; 3
    104c:	99 27       	eor	r25, r25
    104e:	89 2b       	or	r24, r25
    1050:	39 f4       	brne	.+14     	; 0x1060 <__vector_40+0x8a>
		index += 2;
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	8e 5f       	subi	r24, 0xFE	; 254
    1056:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	86 95       	lsr	r24
    105c:	86 95       	lsr	r24
    105e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	99 27       	eor	r25, r25
    106a:	89 2b       	or	r24, r25
    106c:	19 f4       	brne	.+6      	; 0x1074 <__vector_40+0x9e>
		index++;
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	ac 01       	movw	r20, r24
    107a:	40 5e       	subi	r20, 0xE0	; 224
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	84 0f       	add	r24, r20
    1092:	95 1f       	adc	r25, r21
    1094:	fc 01       	movw	r30, r24
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	95 81       	ldd	r25, Z+5	; 0x05
    109a:	ac 01       	movw	r20, r24
    109c:	62 e0       	ldi	r22, 0x02	; 2
    109e:	80 e4       	ldi	r24, 0x40	; 64
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	f9 01       	movw	r30, r18
    10a4:	19 95       	eicall
}
    10a6:	00 00       	nop
    10a8:	24 96       	adiw	r28, 0x04	; 4
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10d0:	0f 90       	pop	r0
    10d2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10d6:	0f 90       	pop	r0
    10d8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    10dc:	0f 90       	pop	r0
    10de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    10e2:	0f 90       	pop	r0
    10e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    10fe:	0f 92       	push	r0
    1100:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1104:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1108:	0f 92       	push	r0
    110a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    110e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1112:	0f 92       	push	r0
    1114:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1118:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    111c:	0f 92       	push	r0
    111e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	00 d0       	rcall	.+0      	; 0x1140 <__vector_41+0x52>
    1140:	1f 92       	push	r1
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1146:	20 91 0d 22 	lds	r18, 0x220D	; 0x80220d <adcb_callback>
    114a:	30 91 0e 22 	lds	r19, 0x220E	; 0x80220e <adcb_callback+0x1>
    114e:	80 e4       	ldi	r24, 0x40	; 64
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    115a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	83 70       	andi	r24, 0x03	; 3
    1164:	99 27       	eor	r25, r25
    1166:	89 2b       	or	r24, r25
    1168:	39 f4       	brne	.+14     	; 0x1178 <__vector_41+0x8a>
		index += 2;
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	8e 5f       	subi	r24, 0xFE	; 254
    116e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	99 27       	eor	r25, r25
    1182:	89 2b       	or	r24, r25
    1184:	19 f4       	brne	.+6      	; 0x118c <__vector_41+0x9e>
		index++;
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	ac 01       	movw	r20, r24
    1192:	40 5e       	subi	r20, 0xE0	; 224
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	84 0f       	add	r24, r20
    11aa:	95 1f       	adc	r25, r21
    11ac:	fc 01       	movw	r30, r24
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	ac 01       	movw	r20, r24
    11b4:	64 e0       	ldi	r22, 0x04	; 4
    11b6:	80 e4       	ldi	r24, 0x40	; 64
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	f9 01       	movw	r30, r18
    11bc:	19 95       	eicall
}
    11be:	00 00       	nop
    11c0:	24 96       	adiw	r28, 0x04	; 4
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11e8:	0f 90       	pop	r0
    11ea:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11ee:	0f 90       	pop	r0
    11f0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11f4:	0f 90       	pop	r0
    11f6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11fa:	0f 90       	pop	r0
    11fc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1216:	0f 92       	push	r0
    1218:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    121c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1220:	0f 92       	push	r0
    1222:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1226:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    122a:	0f 92       	push	r0
    122c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1230:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1234:	0f 92       	push	r0
    1236:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	00 d0       	rcall	.+0      	; 0x1258 <__vector_42+0x52>
    1258:	1f 92       	push	r1
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    125e:	20 91 0d 22 	lds	r18, 0x220D	; 0x80220d <adcb_callback>
    1262:	30 91 0e 22 	lds	r19, 0x220E	; 0x80220e <adcb_callback+0x1>
    1266:	80 e4       	ldi	r24, 0x40	; 64
    1268:	92 e0       	ldi	r25, 0x02	; 2
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	88 e0       	ldi	r24, 0x08	; 8
    1270:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1272:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	83 70       	andi	r24, 0x03	; 3
    127c:	99 27       	eor	r25, r25
    127e:	89 2b       	or	r24, r25
    1280:	39 f4       	brne	.+14     	; 0x1290 <__vector_42+0x8a>
		index += 2;
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	8e 5f       	subi	r24, 0xFE	; 254
    1286:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	86 95       	lsr	r24
    128c:	86 95       	lsr	r24
    128e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	99 27       	eor	r25, r25
    129a:	89 2b       	or	r24, r25
    129c:	19 f4       	brne	.+6      	; 0x12a4 <__vector_42+0x9e>
		index++;
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
    12a2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	ac 01       	movw	r20, r24
    12aa:	40 5e       	subi	r20, 0xE0	; 224
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	84 0f       	add	r24, r20
    12c2:	95 1f       	adc	r25, r21
    12c4:	fc 01       	movw	r30, r24
    12c6:	84 81       	ldd	r24, Z+4	; 0x04
    12c8:	95 81       	ldd	r25, Z+5	; 0x05
    12ca:	ac 01       	movw	r20, r24
    12cc:	68 e0       	ldi	r22, 0x08	; 8
    12ce:	80 e4       	ldi	r24, 0x40	; 64
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	f9 01       	movw	r30, r18
    12d4:	19 95       	eicall
}
    12d6:	00 00       	nop
    12d8:	24 96       	adiw	r28, 0x04	; 4
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	ff 91       	pop	r31
    12e4:	ef 91       	pop	r30
    12e6:	bf 91       	pop	r27
    12e8:	af 91       	pop	r26
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	7f 91       	pop	r23
    12f0:	6f 91       	pop	r22
    12f2:	5f 91       	pop	r21
    12f4:	4f 91       	pop	r20
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	0f 90       	pop	r0
    12fc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1300:	0f 90       	pop	r0
    1302:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1306:	0f 90       	pop	r0
    1308:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    130c:	0f 90       	pop	r0
    130e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1312:	0f 90       	pop	r0
    1314:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	28 97       	sbiw	r28, 0x08	; 8
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	6f 83       	std	Y+7, r22	; 0x07
    1332:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	81 15       	cp	r24, r1
    133a:	92 40       	sbci	r25, 0x02	; 2
    133c:	29 f4       	brne	.+10     	; 0x1348 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	2d db       	rcall	.-2470   	; 0x99c <adc_get_calibration_data>
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	0a c0       	rjmp	.+20     	; 0x135c <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	80 34       	cpi	r24, 0x40	; 64
    134e:	92 40       	sbci	r25, 0x02	; 2
    1350:	09 f0       	breq	.+2      	; 0x1354 <adc_write_configuration+0x36>
    1352:	56 c0       	rjmp	.+172    	; 0x1400 <adc_write_configuration+0xe2>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	22 db       	rcall	.-2492   	; 0x99c <adc_get_calibration_data>
    1358:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	ee da       	rcall	.-2596   	; 0x93a <cpu_irq_save>
	adc_enable_clock(adc);
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	86 da       	rcall	.-2804   	; 0x872 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	22 e0       	ldi	r18, 0x02	; 2
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
	adc->CAL = cal;
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	29 81       	ldd	r18, Y+1	; 0x01
    1382:	3a 81       	ldd	r19, Y+2	; 0x02
    1384:	fc 01       	movw	r30, r24
    1386:	24 87       	std	Z+12, r18	; 0x0c
    1388:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    138a:	8f 81       	ldd	r24, Y+7	; 0x07
    138c:	98 85       	ldd	r25, Y+8	; 0x08
    138e:	fc 01       	movw	r30, r24
    1390:	25 81       	ldd	r18, Z+5	; 0x05
    1392:	36 81       	ldd	r19, Z+6	; 0x06
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	fc 01       	movw	r30, r24
    139a:	20 8f       	std	Z+24, r18	; 0x18
    139c:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    139e:	8f 81       	ldd	r24, Y+7	; 0x07
    13a0:	98 85       	ldd	r25, Y+8	; 0x08
    13a2:	fc 01       	movw	r30, r24
    13a4:	22 81       	ldd	r18, Z+2	; 0x02
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	fc 01       	movw	r30, r24
    13ac:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    13ae:	8f 81       	ldd	r24, Y+7	; 0x07
    13b0:	98 85       	ldd	r25, Y+8	; 0x08
    13b2:	fc 01       	movw	r30, r24
    13b4:	24 81       	ldd	r18, Z+4	; 0x04
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	fc 01       	movw	r30, r24
    13bc:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    13be:	8f 81       	ldd	r24, Y+7	; 0x07
    13c0:	98 85       	ldd	r25, Y+8	; 0x08
    13c2:	fc 01       	movw	r30, r24
    13c4:	23 81       	ldd	r18, Z+3	; 0x03
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	fc 01       	movw	r30, r24
    13cc:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	98 85       	ldd	r25, Y+8	; 0x08
    13d2:	fc 01       	movw	r30, r24
    13d4:	21 81       	ldd	r18, Z+1	; 0x01
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	fc 01       	movw	r30, r24
    13dc:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    13de:	8f 81       	ldd	r24, Y+7	; 0x07
    13e0:	98 85       	ldd	r25, Y+8	; 0x08
    13e2:	fc 01       	movw	r30, r24
    13e4:	90 81       	ld	r25, Z
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	29 2f       	mov	r18, r25
    13ea:	28 2b       	or	r18, r24
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	fc 01       	movw	r30, r24

	adc_disable_clock(adc);
    13f2:	20 83       	st	Z, r18
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06

	cpu_irq_restore(flags);
    13f8:	6d da       	rcall	.-2854   	; 0x8d4 <adc_disable_clock>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	ae da       	rcall	.-2724   	; 0x95a <cpu_irq_restore>
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <adc_write_configuration+0xe4>
	} else
#endif

	{
		Assert(0);
		return;
    1400:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    1402:	28 96       	adiw	r28, 0x08	; 8
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	25 97       	sbiw	r28, 0x05	; 5
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	9b 83       	std	Y+3, r25	; 0x03
    1420:	6c 83       	std	Y+4, r22	; 0x04
    1422:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    1424:	8a da       	rcall	.-2796   	; 0x93a <cpu_irq_save>
    1426:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	22 da       	rcall	.-3004   	; 0x872 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	20 7c       	andi	r18, 0xC0	; 192
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	fc 01       	movw	r30, r24
    1448:	20 8d       	ldd	r18, Z+24	; 0x18
    144a:	31 8d       	ldd	r19, Z+25	; 0x19
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	fc 01       	movw	r30, r24
    1452:	25 83       	std	Z+5, r18	; 0x05
    1454:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	fc 01       	movw	r30, r24
    145c:	22 81       	ldd	r18, Z+2	; 0x02
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	fc 01       	movw	r30, r24
    1464:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	fc 01       	movw	r30, r24
    146c:	24 81       	ldd	r18, Z+4	; 0x04
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	fc 01       	movw	r30, r24
    1474:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	fc 01       	movw	r30, r24
    147c:	23 81       	ldd	r18, Z+3	; 0x03
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	fc 01       	movw	r30, r24
    1484:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	fc 01       	movw	r30, r24
    148c:	21 81       	ldd	r18, Z+1	; 0x01
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	fc 01       	movw	r30, r24
    1494:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	9b 81       	ldd	r25, Y+3	; 0x03

	cpu_irq_restore(flags);
    149a:	1c da       	rcall	.-3016   	; 0x8d4 <adc_disable_clock>
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	5d da       	rcall	.-2886   	; 0x95a <cpu_irq_restore>
}
    14a0:	00 00       	nop
    14a2:	25 96       	adiw	r28, 0x05	; 5
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	2c 97       	sbiw	r28, 0x0c	; 12
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	88 87       	std	Y+8, r24	; 0x08
    14be:	99 87       	std	Y+9, r25	; 0x09
    14c0:	6a 87       	std	Y+10, r22	; 0x0a
    14c2:	4b 87       	std	Y+11, r20	; 0x0b
    14c4:	5c 87       	std	Y+12, r21	; 0x0c
    14c6:	88 85       	ldd	r24, Y+8	; 0x08
    14c8:	99 85       	ldd	r25, Y+9	; 0x09
    14ca:	8c 83       	std	Y+4, r24	; 0x04
    14cc:	9d 83       	std	Y+5, r25	; 0x05
    14ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    14d0:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    14d2:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	83 70       	andi	r24, 0x03	; 3
    14dc:	99 27       	eor	r25, r25
    14de:	89 2b       	or	r24, r25
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <adcch_write_configuration+0x42>
		index += 2;
    14e2:	8f 81       	ldd	r24, Y+7	; 0x07
    14e4:	8e 5f       	subi	r24, 0xFE	; 254
    14e6:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	86 95       	lsr	r24
    14ec:	86 95       	lsr	r24
    14ee:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    14f0:	8e 81       	ldd	r24, Y+6	; 0x06
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	99 27       	eor	r25, r25
    14fa:	89 2b       	or	r24, r25
    14fc:	19 f4       	brne	.+6      	; 0x1504 <adcch_write_configuration+0x56>
		index++;
    14fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1500:	8f 5f       	subi	r24, 0xFF	; 255
    1502:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	9c 01       	movw	r18, r24
    150a:	20 5e       	subi	r18, 0xE0	; 224
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    1528:	08 da       	rcall	.-3056   	; 0x93a <cpu_irq_save>
    152a:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    152c:	88 85       	ldd	r24, Y+8	; 0x08
    152e:	99 85       	ldd	r25, Y+9	; 0x09
    1530:	a0 d9       	rcall	.-3264   	; 0x872 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1532:	8b 85       	ldd	r24, Y+11	; 0x0b
    1534:	9c 85       	ldd	r25, Y+12	; 0x0c
    1536:	fc 01       	movw	r30, r24
    1538:	20 81       	ld	r18, Z
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	fc 01       	movw	r30, r24
    1540:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    1542:	8b 85       	ldd	r24, Y+11	; 0x0b
    1544:	9c 85       	ldd	r25, Y+12	; 0x0c
    1546:	fc 01       	movw	r30, r24
    1548:	22 81       	ldd	r18, Z+2	; 0x02
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	fc 01       	movw	r30, r24
    1550:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1552:	8b 85       	ldd	r24, Y+11	; 0x0b
    1554:	9c 85       	ldd	r25, Y+12	; 0x0c
    1556:	fc 01       	movw	r30, r24
    1558:	21 81       	ldd	r18, Z+1	; 0x01
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	fc 01       	movw	r30, r24
    1560:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    1562:	8a 85       	ldd	r24, Y+10	; 0x0a
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	99 27       	eor	r25, r25
    156c:	89 2b       	or	r24, r25
    156e:	41 f0       	breq	.+16     	; 0x1580 <adcch_write_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1570:	8b 85       	ldd	r24, Y+11	; 0x0b
    1572:	9c 85       	ldd	r25, Y+12	; 0x0c
    1574:	fc 01       	movw	r30, r24
    1576:	23 81       	ldd	r18, Z+3	; 0x03
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	fc 01       	movw	r30, r24
    157e:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
    1580:	88 85       	ldd	r24, Y+8	; 0x08
    1582:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    1584:	a7 d9       	rcall	.-3250   	; 0x8d4 <adc_disable_clock>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	e8 d9       	rcall	.-3120   	; 0x95a <cpu_irq_restore>
}
    158a:	00 00       	nop
    158c:	2c 96       	adiw	r28, 0x0c	; 12
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	2c 97       	sbiw	r28, 0x0c	; 12
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	88 87       	std	Y+8, r24	; 0x08
    15a8:	99 87       	std	Y+9, r25	; 0x09
    15aa:	6a 87       	std	Y+10, r22	; 0x0a
    15ac:	4b 87       	std	Y+11, r20	; 0x0b
    15ae:	5c 87       	std	Y+12, r21	; 0x0c
    15b0:	88 85       	ldd	r24, Y+8	; 0x08
    15b2:	99 85       	ldd	r25, Y+9	; 0x09
    15b4:	8c 83       	std	Y+4, r24	; 0x04
    15b6:	9d 83       	std	Y+5, r25	; 0x05
    15b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ba:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    15bc:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    15be:	8e 81       	ldd	r24, Y+6	; 0x06
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	83 70       	andi	r24, 0x03	; 3
    15c6:	99 27       	eor	r25, r25
    15c8:	89 2b       	or	r24, r25
    15ca:	39 f4       	brne	.+14     	; 0x15da <adcch_read_configuration+0x42>
		index += 2;
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	8e 5f       	subi	r24, 0xFE	; 254
    15d0:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    15d2:	8e 81       	ldd	r24, Y+6	; 0x06
    15d4:	86 95       	lsr	r24
    15d6:	86 95       	lsr	r24
    15d8:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    15da:	8e 81       	ldd	r24, Y+6	; 0x06
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	99 27       	eor	r25, r25
    15e4:	89 2b       	or	r24, r25
    15e6:	19 f4       	brne	.+6      	; 0x15ee <adcch_read_configuration+0x56>
		index++;
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	9c 01       	movw	r18, r24
    15f4:	20 5e       	subi	r18, 0xE0	; 224
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	82 0f       	add	r24, r18
    160c:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    1612:	93 d9       	rcall	.-3290   	; 0x93a <cpu_irq_save>
    1614:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    1616:	88 85       	ldd	r24, Y+8	; 0x08
    1618:	99 85       	ldd	r25, Y+9	; 0x09
    161a:	2b d9       	rcall	.-3498   	; 0x872 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	20 81       	ld	r18, Z
    1624:	8b 85       	ldd	r24, Y+11	; 0x0b
    1626:	9c 85       	ldd	r25, Y+12	; 0x0c
    1628:	fc 01       	movw	r30, r24
    162a:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	fc 01       	movw	r30, r24
    1632:	22 81       	ldd	r18, Z+2	; 0x02
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	fc 01       	movw	r30, r24
    163a:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	fc 01       	movw	r30, r24
    1642:	21 81       	ldd	r18, Z+1	; 0x01
    1644:	8b 85       	ldd	r24, Y+11	; 0x0b
    1646:	9c 85       	ldd	r25, Y+12	; 0x0c
    1648:	fc 01       	movw	r30, r24
    164a:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    164c:	8a 85       	ldd	r24, Y+10	; 0x0a
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	99 27       	eor	r25, r25
    1656:	89 2b       	or	r24, r25
    1658:	41 f0       	breq	.+16     	; 0x166a <adcch_read_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	fc 01       	movw	r30, r24
    1660:	26 81       	ldd	r18, Z+6	; 0x06
    1662:	8b 85       	ldd	r24, Y+11	; 0x0b
    1664:	9c 85       	ldd	r25, Y+12	; 0x0c
    1666:	fc 01       	movw	r30, r24
    1668:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
    166a:	88 85       	ldd	r24, Y+8	; 0x08
    166c:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    166e:	32 d9       	rcall	.-3484   	; 0x8d4 <adc_disable_clock>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	73 d9       	rcall	.-3354   	; 0x95a <cpu_irq_restore>
}
    1674:	00 00       	nop
    1676:	2c 96       	adiw	r28, 0x0c	; 12
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <sysclk_get_main_hz>:
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
	adc_clear_interrupt_flag(adc, ch_mask);
}
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	9c e6       	ldi	r25, 0x6C	; 108
    168e:	ac ed       	ldi	r26, 0xDC	; 220
    1690:	b2 e0       	ldi	r27, 0x02	; 2
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <sysclk_get_per4_hz>:
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	1f 92       	push	r1
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	19 82       	std	Y+1, r1	; 0x01
    16a8:	ec df       	rcall	.-40     	; 0x1682 <sysclk_get_main_hz>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	29 81       	ldd	r18, Y+1	; 0x01
    16b0:	22 2f       	mov	r18, r18
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <sysclk_get_per4_hz+0x22>
    16b6:	b6 95       	lsr	r27
    16b8:	a7 95       	ror	r26
    16ba:	97 95       	ror	r25
    16bc:	87 95       	ror	r24
    16be:	2a 95       	dec	r18
    16c0:	d2 f7       	brpl	.-12     	; 0x16b6 <sysclk_get_per4_hz+0x1a>
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0f 90       	pop	r0
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <sysclk_get_per2_hz>:
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	e2 df       	rcall	.-60     	; 0x169c <sysclk_get_per4_hz>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <sysclk_get_per_hz>:
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	ef df       	rcall	.-34     	; 0x16ce <sysclk_get_per2_hz>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	2d 97       	sbiw	r28, 0x0d	; 13
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	88 87       	std	Y+8, r24	; 0x08
    170e:	99 87       	std	Y+9, r25	; 0x09
    1710:	4a 87       	std	Y+10, r20	; 0x0a
    1712:	5b 87       	std	Y+11, r21	; 0x0b
    1714:	6c 87       	std	Y+12, r22	; 0x0c
    1716:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    1718:	e6 df       	rcall	.-52     	; 0x16e6 <sysclk_get_per_hz>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	9b 83       	std	Y+3, r25	; 0x03
    1722:	ac 83       	std	Y+4, r26	; 0x04
    1724:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	ac 81       	ldd	r26, Y+4	; 0x04
    172c:	bd 81       	ldd	r27, Y+5	; 0x05
    172e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1730:	3b 85       	ldd	r19, Y+11	; 0x0b
    1732:	4c 85       	ldd	r20, Y+12	; 0x0c
    1734:	5d 85       	ldd	r21, Y+13	; 0x0d
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <__udivmodsi4>
    173e:	da 01       	movw	r26, r20
    1740:	c9 01       	movw	r24, r18
    1742:	8e 83       	std	Y+6, r24	; 0x06
    1744:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	9f 81       	ldd	r25, Y+7	; 0x07
    174a:	05 97       	sbiw	r24, 0x05	; 5
    174c:	10 f4       	brcc	.+4      	; 0x1752 <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    174e:	19 82       	std	Y+1, r1	; 0x01
    1750:	2f c0       	rjmp	.+94     	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    1752:	8e 81       	ldd	r24, Y+6	; 0x06
    1754:	9f 81       	ldd	r25, Y+7	; 0x07
    1756:	09 97       	sbiw	r24, 0x09	; 9
    1758:	18 f4       	brcc	.+6      	; 0x1760 <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	28 c0       	rjmp	.+80     	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	9f 81       	ldd	r25, Y+7	; 0x07
    1764:	41 97       	sbiw	r24, 0x11	; 17
    1766:	18 f4       	brcc	.+6      	; 0x176e <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	21 c0       	rjmp	.+66     	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    176e:	8e 81       	ldd	r24, Y+6	; 0x06
    1770:	9f 81       	ldd	r25, Y+7	; 0x07
    1772:	81 97       	sbiw	r24, 0x21	; 33
    1774:	18 f4       	brcc	.+6      	; 0x177c <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	1a c0       	rjmp	.+52     	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	81 34       	cpi	r24, 0x41	; 65
    1782:	91 05       	cpc	r25, r1
    1784:	18 f4       	brcc	.+6      	; 0x178c <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	12 c0       	rjmp	.+36     	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	81 38       	cpi	r24, 0x81	; 129
    1792:	91 05       	cpc	r25, r1
    1794:	18 f4       	brcc	.+6      	; 0x179c <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    1796:	85 e0       	ldi	r24, 0x05	; 5
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	0a c0       	rjmp	.+20     	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	9f 81       	ldd	r25, Y+7	; 0x07
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 40       	sbci	r25, 0x01	; 1
    17a4:	18 f4       	brcc	.+6      	; 0x17ac <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    17ac:	87 e0       	ldi	r24, 0x07	; 7
    17ae:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    17b0:	88 85       	ldd	r24, Y+8	; 0x08
    17b2:	99 85       	ldd	r25, Y+9	; 0x09
    17b4:	29 81       	ldd	r18, Y+1	; 0x01
    17b6:	fc 01       	movw	r30, r24
    17b8:	24 83       	std	Z+4, r18	; 0x04
}
    17ba:	00 00       	nop
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	25 97       	sbiw	r28, 0x05	; 5
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
    17dc:	4c 83       	std	Y+4, r20	; 0x04
    17de:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	fc 01       	movw	r30, r24
    17e6:	81 81       	ldd	r24, Z+1	; 0x01
    17e8:	28 2f       	mov	r18, r24
    17ea:	29 7e       	andi	r18, 0xE9	; 233
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	fc 01       	movw	r30, r24
    17f2:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	fc 01       	movw	r30, r24
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	2c 81       	ldd	r18, Y+4	; 0x04
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	82 2b       	or	r24, r18
    1802:	29 2f       	mov	r18, r25
    1804:	28 2b       	or	r18, r24
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	fc 01       	movw	r30, r24
    180c:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	fc 01       	movw	r30, r24
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	2f 78       	andi	r18, 0x8F	; 143
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	fc 01       	movw	r30, r24
    1828:	92 81       	ldd	r25, Z+2	; 0x02
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	29 2f       	mov	r18, r25
    182e:	28 2b       	or	r18, r24
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	fc 01       	movw	r30, r24
    1836:	22 83       	std	Z+2, r18	; 0x02
}
    1838:	00 00       	nop
    183a:	25 96       	adiw	r28, 0x05	; 5
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	25 97       	sbiw	r28, 0x05	; 5
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	6b 83       	std	Y+3, r22	; 0x03
    185a:	4c 83       	std	Y+4, r20	; 0x04
    185c:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	91 05       	cpc	r25, r1
    1868:	11 f1       	breq	.+68     	; 0x18ae <adc_set_conversion_trigger+0x68>
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	2c f4       	brge	.+10     	; 0x187a <adc_set_conversion_trigger+0x34>
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	71 f0       	breq	.+28     	; 0x1890 <adc_set_conversion_trigger+0x4a>
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	b9 f1       	breq	.+110    	; 0x18e6 <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    1878:	a9 c0       	rjmp	.+338    	; 0x19cc <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <adc_set_conversion_trigger+0x3c>
    1880:	53 c0       	rjmp	.+166    	; 0x1928 <adc_set_conversion_trigger+0xe2>
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	91 05       	cpc	r25, r1
    1886:	d4 f1       	brlt	.+116    	; 0x18fc <adc_set_conversion_trigger+0xb6>
    1888:	05 97       	sbiw	r24, 0x05	; 5
    188a:	09 f4       	brne	.+2      	; 0x188e <adc_set_conversion_trigger+0x48>
    188c:	76 c0       	rjmp	.+236    	; 0x197a <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    188e:	9e c0       	rjmp	.+316    	; 0x19cc <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	81 81       	ldd	r24, Z+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	27 7f       	andi	r18, 0xF7	; 247
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	fc 01       	movw	r30, r24
    18a2:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	fc 01       	movw	r30, r24
    18aa:	13 82       	std	Z+3, r1	; 0x03
		break;
    18ac:	8f c0       	rjmp	.+286    	; 0x19cc <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	fc 01       	movw	r30, r24
    18b4:	81 81       	ldd	r24, Z+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	27 7f       	andi	r18, 0xF7	; 247
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	fc 01       	movw	r30, r24
    18c0:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	98 2f       	mov	r25, r24
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	89 2b       	or	r24, r25
    18da:	28 2f       	mov	r18, r24
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	fc 01       	movw	r30, r24
    18e2:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    18e4:	73 c0       	rjmp	.+230    	; 0x19cc <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	fc 01       	movw	r30, r24
    18ec:	81 81       	ldd	r24, Z+1	; 0x01
    18ee:	28 2f       	mov	r18, r24
    18f0:	28 60       	ori	r18, 0x08	; 8
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	fc 01       	movw	r30, r24
    18f8:	21 83       	std	Z+1, r18	; 0x01
		break;
    18fa:	68 c0       	rjmp	.+208    	; 0x19cc <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	fc 01       	movw	r30, r24
    1902:	81 81       	ldd	r24, Z+1	; 0x01
    1904:	28 2f       	mov	r18, r24
    1906:	28 60       	ori	r18, 0x08	; 8
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	fc 01       	movw	r30, r24
    190e:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	81 50       	subi	r24, 0x01	; 1
    1914:	28 2f       	mov	r18, r24
    1916:	22 95       	swap	r18
    1918:	22 0f       	add	r18, r18
    191a:	22 0f       	add	r18, r18
    191c:	20 7c       	andi	r18, 0xC0	; 192
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	fc 01       	movw	r30, r24
    1924:	23 83       	std	Z+3, r18	; 0x03
		break;
    1926:	52 c0       	rjmp	.+164    	; 0x19cc <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	fc 01       	movw	r30, r24
    192e:	81 81       	ldd	r24, Z+1	; 0x01
    1930:	28 2f       	mov	r18, r24
    1932:	27 7f       	andi	r18, 0xF7	; 247
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	fc 01       	movw	r30, r24
    193a:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	00 24       	eor	r0, r0
    1946:	96 95       	lsr	r25
    1948:	87 95       	ror	r24
    194a:	07 94       	ror	r0
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	07 94       	ror	r0
    1952:	98 2f       	mov	r25, r24
    1954:	80 2d       	mov	r24, r0
    1956:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    196a:	82 2b       	or	r24, r18
    196c:	85 60       	ori	r24, 0x05	; 5
    196e:	28 2f       	mov	r18, r24
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	fc 01       	movw	r30, r24
    1976:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    1978:	29 c0       	rjmp	.+82     	; 0x19cc <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	fc 01       	movw	r30, r24
    1980:	81 81       	ldd	r24, Z+1	; 0x01
    1982:	28 2f       	mov	r18, r24
    1984:	27 7f       	andi	r18, 0xF7	; 247
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	fc 01       	movw	r30, r24
    198c:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	00 24       	eor	r0, r0
    1998:	96 95       	lsr	r25
    199a:	87 95       	ror	r24
    199c:	07 94       	ror	r0
    199e:	96 95       	lsr	r25
    19a0:	87 95       	ror	r24
    19a2:	07 94       	ror	r0
    19a4:	98 2f       	mov	r25, r24
    19a6:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    19a8:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    19bc:	82 2b       	or	r24, r18
    19be:	86 60       	ori	r24, 0x06	; 6
    19c0:	28 2f       	mov	r18, r24
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	fc 01       	movw	r30, r24
    19c8:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    19ca:	00 00       	nop

	default:
		Assert(0);
	}
}
    19cc:	00 00       	nop
    19ce:	25 96       	adiw	r28, 0x05	; 5
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	1f 92       	push	r1
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 30       	cpi	r24, 0x08	; 8
    19ee:	91 05       	cpc	r25, r1
    19f0:	51 f1       	breq	.+84     	; 0x1a46 <adcch_get_gain_setting+0x6c>
    19f2:	89 30       	cpi	r24, 0x09	; 9
    19f4:	91 05       	cpc	r25, r1
    19f6:	7c f4       	brge	.+30     	; 0x1a16 <adcch_get_gain_setting+0x3c>
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	f1 f0       	breq	.+60     	; 0x1a3a <adcch_get_gain_setting+0x60>
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	91 05       	cpc	r25, r1
    1a02:	1c f4       	brge	.+6      	; 0x1a0a <adcch_get_gain_setting+0x30>
    1a04:	89 2b       	or	r24, r25
    1a06:	b9 f0       	breq	.+46     	; 0x1a36 <adcch_get_gain_setting+0x5c>
    1a08:	28 c0       	rjmp	.+80     	; 0x1a5a <adcch_get_gain_setting+0x80>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	b9 f0       	breq	.+46     	; 0x1a3e <adcch_get_gain_setting+0x64>
    1a10:	04 97       	sbiw	r24, 0x04	; 4
    1a12:	b9 f0       	breq	.+46     	; 0x1a42 <adcch_get_gain_setting+0x68>
    1a14:	22 c0       	rjmp	.+68     	; 0x1a5a <adcch_get_gain_setting+0x80>
    1a16:	80 32       	cpi	r24, 0x20	; 32
    1a18:	91 05       	cpc	r25, r1
    1a1a:	c9 f0       	breq	.+50     	; 0x1a4e <adcch_get_gain_setting+0x74>
    1a1c:	81 32       	cpi	r24, 0x21	; 33
    1a1e:	91 05       	cpc	r25, r1
    1a20:	1c f4       	brge	.+6      	; 0x1a28 <adcch_get_gain_setting+0x4e>
    1a22:	40 97       	sbiw	r24, 0x10	; 16
    1a24:	91 f0       	breq	.+36     	; 0x1a4a <adcch_get_gain_setting+0x70>
    1a26:	19 c0       	rjmp	.+50     	; 0x1a5a <adcch_get_gain_setting+0x80>
    1a28:	80 34       	cpi	r24, 0x40	; 64
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	91 f0       	breq	.+36     	; 0x1a52 <adcch_get_gain_setting+0x78>
    1a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a30:	91 05       	cpc	r25, r1
    1a32:	89 f0       	breq	.+34     	; 0x1a56 <adcch_get_gain_setting+0x7c>
    1a34:	12 c0       	rjmp	.+36     	; 0x1a5a <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    1a36:	8c e1       	ldi	r24, 0x1C	; 28
    1a38:	11 c0       	rjmp	.+34     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	0d c0       	rjmp	.+26     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    1a42:	88 e0       	ldi	r24, 0x08	; 8
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    1a46:	8c e0       	ldi	r24, 0x0C	; 12
    1a48:	09 c0       	rjmp	.+18     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    1a4a:	80 e1       	ldi	r24, 0x10	; 16
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    1a4e:	84 e1       	ldi	r24, 0x14	; 20
    1a50:	05 c0       	rjmp	.+10     	; 0x1a5c <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    1a52:	88 e1       	ldi	r24, 0x18	; 24
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1a5c:	0f 90       	pop	r0
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	25 97       	sbiw	r28, 0x05	; 5
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	6b 83       	std	Y+3, r22	; 0x03
    1a78:	4c 83       	std	Y+4, r20	; 0x04
    1a7a:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	80 31       	cpi	r24, 0x10	; 16
    1a80:	78 f0       	brcs	.+30     	; 0x1aa0 <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	fc 01       	movw	r30, r24
    1a88:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	80 51       	subi	r24, 0x10	; 16
    1a8e:	28 2f       	mov	r18, r24
    1a90:	22 0f       	add	r18, r18
    1a92:	22 0f       	add	r18, r18
    1a94:	22 0f       	add	r18, r18
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1a9e:	87 c0       	rjmp	.+270    	; 0x1bae <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	8a 30       	cpi	r24, 0x0A	; 10
    1aa4:	79 f4       	brne	.+30     	; 0x1ac4 <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	21 e0       	ldi	r18, 0x01	; 1
    1aac:	fc 01       	movw	r30, r24
    1aae:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	22 0f       	add	r18, r18
    1ab6:	22 0f       	add	r18, r18
    1ab8:	22 0f       	add	r18, r18
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	fc 01       	movw	r30, r24
    1ac0:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1ac2:	75 c0       	rjmp	.+234    	; 0x1bae <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	b8 f4       	brcc	.+46     	; 0x1af8 <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	22 e0       	ldi	r18, 0x02	; 2
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	89 2b       	or	r24, r25
    1aec:	28 2f       	mov	r18, r24
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	fc 01       	movw	r30, r24
    1af4:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1af6:	5b c0       	rjmp	.+182    	; 0x1bae <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	d8 f4       	brcc	.+54     	; 0x1b34 <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	6c df       	rcall	.-296    	; 0x19da <adcch_get_gain_setting>
    1b02:	28 2f       	mov	r18, r24
    1b04:	23 60       	ori	r18, 0x03	; 3
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	98 2f       	mov	r25, r24
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	84 50       	subi	r24, 0x04	; 4
    1b26:	89 2b       	or	r24, r25
    1b28:	28 2f       	mov	r18, r24
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	fc 01       	movw	r30, r24
    1b30:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1b32:	3d c0       	rjmp	.+122    	; 0x1bae <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	e1 f4       	brne	.+56     	; 0x1b72 <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	22 e0       	ldi	r18, 0x02	; 2
    1b40:	fc 01       	movw	r30, r24
    1b42:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	98 2f       	mov	r25, r24
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	88 30       	cpi	r24, 0x08	; 8
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <adcch_set_input+0xfe>
    1b5e:	85 e0       	ldi	r24, 0x05	; 5
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <adcch_set_input+0x100>
    1b62:	87 e0       	ldi	r24, 0x07	; 7
    1b64:	89 2b       	or	r24, r25
    1b66:	28 2f       	mov	r18, r24
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1b70:	1e c0       	rjmp	.+60     	; 0x1bae <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	32 df       	rcall	.-412    	; 0x19da <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    1b76:	28 2f       	mov	r18, r24
    1b78:	23 60       	ori	r18, 0x03	; 3
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	fc 01       	movw	r30, r24
    1b80:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	98 2f       	mov	r25, r24
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	89 30       	cpi	r24, 0x09	; 9
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <adcch_set_input+0x13c>
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <adcch_set_input+0x13e>
    1ba0:	87 e0       	ldi	r24, 0x07	; 7
    1ba2:	89 2b       	or	r24, r25
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	fc 01       	movw	r30, r24
    1bac:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1bae:	00 00       	nop
    1bb0:	25 96       	adiw	r28, 0x05	; 5
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask)
{
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	2e 97       	sbiw	r28, 0x0e	; 14
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	8c 87       	std	Y+12, r24	; 0x0c
    1bcc:	9d 87       	std	Y+13, r25	; 0x0d
    1bce:	6e 87       	std	Y+14, r22	; 0x0e
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    1bd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bd4:	9e 01       	movw	r18, r28
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	b9 01       	movw	r22, r18
    1bdc:	18 dc       	rcall	.-2000   	; 0x140e <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    1bde:	9e 01       	movw	r18, r28
    1be0:	28 5f       	subi	r18, 0xF8	; 248
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1be6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1be8:	a9 01       	movw	r20, r18
    1bea:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bec:	d5 dc       	rcall	.-1622   	; 0x1598 <adcch_read_configuration>
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
    1bee:	20 e1       	ldi	r18, 0x10	; 16
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	e7 dd       	rcall	.-1074   	; 0x17c8 <adc_set_conversion_parameters>
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	20 de       	rcall	.-960    	; 0x1846 <adc_set_conversion_trigger>
	adc_set_clock_rate(&adc_conf, 200000UL);
    1c06:	40 e4       	ldi	r20, 0x40	; 64
    1c08:	5d e0       	ldi	r21, 0x0D	; 13
    1c0a:	63 e0       	ldi	r22, 0x03	; 3
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	75 dd       	rcall	.-1302   	; 0x16fe <adc_set_clock_rate>
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 0);
    1c14:	ce 01       	movw	r24, r28
    1c16:	08 96       	adiw	r24, 0x08	; 8
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	4a e0       	ldi	r20, 0x0A	; 10
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	22 df       	rcall	.-444    	; 0x1a64 <adcch_set_input>
	adc_write_configuration(adc, &adc_conf);
    1c20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c24:	9e 01       	movw	r18, r28
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	78 db       	rcall	.-2320   	; 0x131e <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    1c2e:	9e 01       	movw	r18, r28
    1c30:	28 5f       	subi	r18, 0xF8	; 248
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c36:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c38:	a9 01       	movw	r20, r18
    1c3a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c3c:	38 dc       	rcall	.-1936   	; 0x14ae <adcch_write_configuration>
	
	
}
    1c3e:	00 00       	nop
    1c40:	2e 96       	adiw	r28, 0x0e	; 14
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	08 95       	ret

00001c4c <thermistor_init>:
void thermistor_init(void)
{
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
	adc_init(&THERM_ADC,THERM_ADC_CH);
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	b0 df       	rcall	.-160    	; 0x1bbc <adc_init>
	
	if(DEBUG) printf("Thermistor Initialized.\n");
    1c5c:	85 e5       	ldi	r24, 0x55	; 85
    1c5e:	90 e2       	ldi	r25, 0x20	; 32
    1c60:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
}
    1c64:	00 00       	nop
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <volt_init>:
void volt_init(void)
{
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
	adc_init(&VOLT_ADC,VOLT_ADC_CH);
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	80 e4       	ldi	r24, 0x40	; 64
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	a0 df       	rcall	.-192    	; 0x1bbc <adc_init>
	
	if(DEBUG) printf("Voltage Initialized.\n");
    1c7c:	8d e6       	ldi	r24, 0x6D	; 109
    1c7e:	90 e2       	ldi	r25, 0x20	; 32
    1c80:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
}
    1c84:	00 00       	nop
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <init_gps_interrupts>:
#include <string.h>
#include "gps.h"
#include "gps_interrupts.h"

void init_gps_interrupts(void)
{
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	1f 92       	push	r1
    1c92:	1f 92       	push	r1
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
    1c98:	80 eb       	ldi	r24, 0xB0	; 176
    1c9a:	9b e0       	ldi	r25, 0x0B	; 11
    1c9c:	24 e1       	ldi	r18, 0x14	; 20
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	23 83       	std	Z+3, r18	; 0x03
	gpgga_index = 0;
    1ca2:	10 92 79 27 	sts	0x2779, r1	; 0x802779 <gpgga_index>
	uint8_t dollar_counter = 0;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t current_sentence = SENTENCE_NONE;
    1ca8:	1a 82       	std	Y+2, r1	; 0x02
	last_finished = SENTENCE_NONE;
    1caa:	10 92 84 25 	sts	0x2584, r1	; 0x802584 <last_finished>
	
}
    1cae:	00 00       	nop
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <init_gps_buffers>:

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	51 e0       	ldi	r21, 0x01	; 1
    1cc6:	6c ed       	ldi	r22, 0xDC	; 220
    1cc8:	75 e2       	ldi	r23, 0x25	; 37
    1cca:	8c e7       	ldi	r24, 0x7C	; 124
    1ccc:	95 e2       	ldi	r25, 0x25	; 37
    1cce:	0e 94 94 19 	call	0x3328	; 0x3328 <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
    1cd2:	40 e4       	ldi	r20, 0x40	; 64
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	6c ed       	ldi	r22, 0xDC	; 220
    1cd8:	76 e2       	ldi	r23, 0x26	; 38
    1cda:	8c e1       	ldi	r24, 0x1C	; 28
    1cdc:	97 e2       	ldi	r25, 0x27	; 39
    1cde:	0e 94 94 19 	call	0x3328	; 0x3328 <rbu8_init>
}
    1ce2:	00 00       	nop
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <__vector_122>:

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
    1cea:	1f 92       	push	r1
    1cec:	0f 92       	push	r0
    1cee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cfa:	0f 92       	push	r0
    1cfc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d00:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d04:	0f 92       	push	r0
    1d06:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d0a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d0e:	0f 92       	push	r0
    1d10:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d14:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d18:	0f 92       	push	r0
    1d1a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	ef 93       	push	r30
    1d34:	ff 93       	push	r31
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	1f 92       	push	r1
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t ch = GPS_USART.DATA;
    1d40:	80 eb       	ldi	r24, 0xB0	; 176
    1d42:	9b e0       	ldi	r25, 0x0B	; 11
    1d44:	fc 01       	movw	r30, r24
    1d46:	80 81       	ld	r24, Z
    1d48:	89 83       	std	Y+1, r24	; 0x01
	
	printf("%c\n",ch);
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	29 2f       	mov	r18, r25
    1d52:	2f 93       	push	r18
    1d54:	8f 93       	push	r24
    1d56:	82 e8       	ldi	r24, 0x82	; 130
    1d58:	90 e2       	ldi	r25, 0x20	; 32
    1d5a:	89 2f       	mov	r24, r25
    1d5c:	8f 93       	push	r24
    1d5e:	82 e8       	ldi	r24, 0x82	; 130
    1d60:	90 e2       	ldi	r25, 0x20	; 32
    1d62:	8f 93       	push	r24
    1d64:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <printf>
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
	//printf("%c""\0", (char)ch);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
    1d70:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <current_sentence>
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	41 f5       	brne	.+80     	; 0x1dc8 <__vector_122+0xde>
	{
		if (ch == '\n')
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	8a 30       	cpi	r24, 0x0A	; 10
    1d7c:	b1 f4       	brne	.+44     	; 0x1daa <__vector_122+0xc0>
		{
			
			rbu8_write(gpgga_buff, &gps_receive_buffer, gpgga_index);
    1d7e:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <gpgga_index>
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	ac 01       	movw	r20, r24
    1d88:	6c e7       	ldi	r22, 0x7C	; 124
    1d8a:	75 e2       	ldi	r23, 0x25	; 37
    1d8c:	84 e2       	ldi	r24, 0x24	; 36
    1d8e:	97 e2       	ldi	r25, 0x27	; 39
    1d90:	0e 94 10 19 	call	0x3220	; 0x3220 <rbu8_write>
			last_finished = current_sentence;
    1d94:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <current_sentence>
    1d98:	80 93 84 25 	sts	0x2584, r24	; 0x802584 <last_finished>
			gpgga_index=0;
    1d9c:	10 92 79 27 	sts	0x2779, r1	; 0x802779 <gpgga_index>
			current_sentence = SENTENCE_WAIT;
    1da0:	85 e0       	ldi	r24, 0x05	; 5
    1da2:	80 93 db 25 	sts	0x25DB, r24	; 0x8025db <current_sentence>
			dollar_counter = 0;
    1da6:	10 92 7b 25 	sts	0x257B, r1	; 0x80257b <dollar_counter>
		}
		
		gpgga_buff[gpgga_index] = ch;
    1daa:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <gpgga_index>
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	8c 5d       	subi	r24, 0xDC	; 220
    1db4:	98 4d       	sbci	r25, 0xD8	; 216
    1db6:	29 81       	ldd	r18, Y+1	; 0x01
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
		gpgga_index++;
    1dbc:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <gpgga_index>
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	80 93 79 27 	sts	0x2779, r24	; 0x802779 <gpgga_index>
    1dc6:	0a c0       	rjmp	.+20     	; 0x1ddc <__vector_122+0xf2>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
		
	

	}
	else if (ch == '$' && current_sentence == SENTENCE_NONE)
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	84 32       	cpi	r24, 0x24	; 36
    1dcc:	39 f4       	brne	.+14     	; 0x1ddc <__vector_122+0xf2>
    1dce:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <current_sentence>
    1dd2:	88 23       	and	r24, r24
    1dd4:	19 f4       	brne	.+6      	; 0x1ddc <__vector_122+0xf2>
	{
		dollar_counter = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <dollar_counter>
	}
	
	if (dollar_counter > 0 && current_sentence == SENTENCE_NONE)
    1ddc:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <dollar_counter>
    1de0:	88 23       	and	r24, r24
    1de2:	21 f1       	breq	.+72     	; 0x1e2c <__vector_122+0x142>
    1de4:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <current_sentence>
    1de8:	88 23       	and	r24, r24
    1dea:	01 f5       	brne	.+64     	; 0x1e2c <__vector_122+0x142>
	{
		if (dollar_counter == 5 && ch == 'G' )
    1dec:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <dollar_counter>
    1df0:	85 30       	cpi	r24, 0x05	; 5
    1df2:	b9 f4       	brne	.+46     	; 0x1e22 <__vector_122+0x138>
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	87 34       	cpi	r24, 0x47	; 71
    1df8:	a1 f4       	brne	.+40     	; 0x1e22 <__vector_122+0x138>
		{
			current_sentence= SENTENCE_GPGGA;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	80 93 db 25 	sts	0x25DB, r24	; 0x8025db <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
    1e00:	45 e0       	ldi	r20, 0x05	; 5
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	66 e8       	ldi	r22, 0x86	; 134
    1e06:	70 e2       	ldi	r23, 0x20	; 32
    1e08:	84 e2       	ldi	r24, 0x24	; 36
    1e0a:	97 e2       	ldi	r25, 0x27	; 39
    1e0c:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <memcpy>
			gpgga_index = 5;
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	80 93 79 27 	sts	0x2779, r24	; 0x802779 <gpgga_index>
			dollar_counter++;
    1e16:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <dollar_counter>
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <dollar_counter>
			dollar_counter++;
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <__vector_122+0x142>
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
    1e22:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <dollar_counter>
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    1e2c:	00 00       	nop
    1e2e:	0f 90       	pop	r0
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	bf 91       	pop	r27
    1e3a:	af 91       	pop	r26
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	7f 91       	pop	r23
    1e42:	6f 91       	pop	r22
    1e44:	5f 91       	pop	r21
    1e46:	4f 91       	pop	r20
    1e48:	3f 91       	pop	r19
    1e4a:	2f 91       	pop	r18
    1e4c:	0f 90       	pop	r0
    1e4e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e52:	0f 90       	pop	r0
    1e54:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e58:	0f 90       	pop	r0
    1e5a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e5e:	0f 90       	pop	r0
    1e60:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e64:	0f 90       	pop	r0
    1e66:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e6a:	0f 90       	pop	r0
    1e6c:	1f 90       	pop	r1
    1e6e:	18 95       	reti

00001e70 <__vector_124>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
    1e70:	1f 92       	push	r1
    1e72:	0f 92       	push	r0
    1e74:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e78:	0f 92       	push	r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e80:	0f 92       	push	r0
    1e82:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e86:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e8a:	0f 92       	push	r0
    1e8c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e90:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e94:	0f 92       	push	r0
    1e96:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e9a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e9e:	0f 92       	push	r0
    1ea0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ea4:	2f 93       	push	r18
    1ea6:	3f 93       	push	r19
    1ea8:	4f 93       	push	r20
    1eaa:	5f 93       	push	r21
    1eac:	6f 93       	push	r22
    1eae:	7f 93       	push	r23
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	60 eb       	ldi	r22, 0xB0	; 176
    1eca:	7b e0       	ldi	r23, 0x0B	; 11
    1ecc:	8c e1       	ldi	r24, 0x1C	; 28
    1ece:	97 e2       	ldi	r25, 0x27	; 39
    1ed0:	0e 94 bf 19 	call	0x337e	; 0x337e <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	8c e1       	ldi	r24, 0x1C	; 28
    1eda:	97 e2       	ldi	r25, 0x27	; 39
    1edc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <rbu8_delete_oldest>
    1ee0:	00 00       	nop
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	bf 91       	pop	r27
    1eec:	af 91       	pop	r26
    1eee:	9f 91       	pop	r25
    1ef0:	8f 91       	pop	r24
    1ef2:	7f 91       	pop	r23
    1ef4:	6f 91       	pop	r22
    1ef6:	5f 91       	pop	r21
    1ef8:	4f 91       	pop	r20
    1efa:	3f 91       	pop	r19
    1efc:	2f 91       	pop	r18
    1efe:	0f 90       	pop	r0
    1f00:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f04:	0f 90       	pop	r0
    1f06:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f0a:	0f 90       	pop	r0
    1f0c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f10:	0f 90       	pop	r0
    1f12:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f16:	0f 90       	pop	r0
    1f18:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	bc 01       	movw	r22, r24
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <nvm_read_byte>
}
    1f3c:	0f 90       	pop	r0
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	08 95       	ret

00001f44 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	1f 92       	push	r1
    1f4a:	1f 92       	push	r1
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	9a 83       	std	Y+2, r25	; 0x02
	if (module == NULL) {
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	89 2b       	or	r24, r25
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <sysclk_enable_peripheral_clock+0x1a>
    1f5c:	85 c1       	rjmp	.+778    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	80 3c       	cpi	r24, 0xC0	; 192
    1f64:	91 05       	cpc	r25, r1
    1f66:	29 f4       	brne	.+10     	; 0x1f72 <sysclk_enable_peripheral_clock+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1f68:	60 e1       	ldi	r22, 0x10	; 16
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1f70:	7b c1       	rjmp	.+758    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &AES) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	80 34       	cpi	r24, 0x40	; 64
    1f78:	94 40       	sbci	r25, 0x04	; 4
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <sysclk_enable_peripheral_clock+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1f7c:	68 e0       	ldi	r22, 0x08	; 8
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1f84:	71 c1       	rjmp	.+738    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	81 15       	cp	r24, r1
    1f8c:	94 40       	sbci	r25, 0x04	; 4
    1f8e:	29 f4       	brne	.+10     	; 0x1f9a <sysclk_enable_peripheral_clock+0x56>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1f90:	64 e0       	ldi	r22, 0x04	; 4
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1f98:	67 c1       	rjmp	.+718    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	80 38       	cpi	r24, 0x80	; 128
    1fa0:	91 40       	sbci	r25, 0x01	; 1
    1fa2:	29 f4       	brne	.+10     	; 0x1fae <sysclk_enable_peripheral_clock+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1fac:	5d c1       	rjmp	.+698    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &EVSYS) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	81 15       	cp	r24, r1
    1fb4:	91 40       	sbci	r25, 0x01	; 1
    1fb6:	29 f4       	brne	.+10     	; 0x1fc2 <sysclk_enable_peripheral_clock+0x7e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1fc0:	53 c1       	rjmp	.+678    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	80 38       	cpi	r24, 0x80	; 128
    1fc8:	93 40       	sbci	r25, 0x03	; 3
    1fca:	29 f4       	brne	.+10     	; 0x1fd6 <sysclk_enable_peripheral_clock+0x92>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1fd4:	49 c1       	rjmp	.+658    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ACA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	80 39       	cpi	r24, 0x90	; 144
    1fdc:	93 40       	sbci	r25, 0x03	; 3
    1fde:	29 f4       	brne	.+10     	; 0x1fea <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1fe8:	3f c1       	rjmp	.+638    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	81 15       	cp	r24, r1
    1ff0:	92 40       	sbci	r25, 0x02	; 2
    1ff2:	29 f4       	brne	.+10     	; 0x1ffe <sysclk_enable_peripheral_clock+0xba>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    1ffc:	35 c1       	rjmp	.+618    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	80 34       	cpi	r24, 0x40	; 64
    2004:	92 40       	sbci	r25, 0x02	; 2
    2006:	29 f4       	brne	.+10     	; 0x2012 <sysclk_enable_peripheral_clock+0xce>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2008:	62 e0       	ldi	r22, 0x02	; 2
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2010:	2b c1       	rjmp	.+598    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	81 15       	cp	r24, r1
    2018:	93 40       	sbci	r25, 0x03	; 3
    201a:	29 f4       	brne	.+10     	; 0x2026 <sysclk_enable_peripheral_clock+0xe2>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    201c:	64 e0       	ldi	r22, 0x04	; 4
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2024:	21 c1       	rjmp	.+578    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	80 32       	cpi	r24, 0x20	; 32
    202c:	93 40       	sbci	r25, 0x03	; 3
    202e:	29 f4       	brne	.+10     	; 0x203a <sysclk_enable_peripheral_clock+0xf6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2030:	64 e0       	ldi	r22, 0x04	; 4
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2038:	17 c1       	rjmp	.+558    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	81 15       	cp	r24, r1
    2040:	98 40       	sbci	r25, 0x08	; 8
    2042:	29 f4       	brne	.+10     	; 0x204e <sysclk_enable_peripheral_clock+0x10a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2044:	61 e0       	ldi	r22, 0x01	; 1
    2046:	83 e0       	ldi	r24, 0x03	; 3
    2048:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    204c:	0d c1       	rjmp	.+538    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	81 15       	cp	r24, r1
    2054:	99 40       	sbci	r25, 0x09	; 9
    2056:	29 f4       	brne	.+10     	; 0x2062 <sysclk_enable_peripheral_clock+0x11e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2060:	03 c1       	rjmp	.+518    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	81 15       	cp	r24, r1
    2068:	9a 40       	sbci	r25, 0x0A	; 10
    206a:	29 f4       	brne	.+10     	; 0x2076 <sysclk_enable_peripheral_clock+0x132>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	85 e0       	ldi	r24, 0x05	; 5
    2070:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2074:	f9 c0       	rjmp	.+498    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	81 15       	cp	r24, r1
    207c:	9b 40       	sbci	r25, 0x0B	; 11
    207e:	29 f4       	brne	.+10     	; 0x208a <sysclk_enable_peripheral_clock+0x146>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2080:	61 e0       	ldi	r22, 0x01	; 1
    2082:	86 e0       	ldi	r24, 0x06	; 6
    2084:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2088:	ef c0       	rjmp	.+478    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	80 34       	cpi	r24, 0x40	; 64
    2090:	98 40       	sbci	r25, 0x08	; 8
    2092:	29 f4       	brne	.+10     	; 0x209e <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    209c:	e5 c0       	rjmp	.+458    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	80 34       	cpi	r24, 0x40	; 64
    20a4:	99 40       	sbci	r25, 0x09	; 9
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <sysclk_enable_peripheral_clock+0x16e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	84 e0       	ldi	r24, 0x04	; 4
    20ac:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    20b0:	db c0       	rjmp	.+438    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	80 34       	cpi	r24, 0x40	; 64
    20b8:	9a 40       	sbci	r25, 0x0A	; 10
    20ba:	29 f4       	brne	.+10     	; 0x20c6 <sysclk_enable_peripheral_clock+0x182>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    20bc:	62 e0       	ldi	r22, 0x02	; 2
    20be:	85 e0       	ldi	r24, 0x05	; 5
    20c0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    20c4:	d1 c0       	rjmp	.+418    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	80 34       	cpi	r24, 0x40	; 64
    20cc:	9b 40       	sbci	r25, 0x0B	; 11
    20ce:	29 f4       	brne	.+10     	; 0x20da <sysclk_enable_peripheral_clock+0x196>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    20d0:	62 e0       	ldi	r22, 0x02	; 2
    20d2:	86 e0       	ldi	r24, 0x06	; 6
    20d4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    20d8:	c7 c0       	rjmp	.+398    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	80 39       	cpi	r24, 0x90	; 144
    20e0:	98 40       	sbci	r25, 0x08	; 8
    20e2:	29 f4       	brne	.+10     	; 0x20ee <sysclk_enable_peripheral_clock+0x1aa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    20e4:	64 e0       	ldi	r22, 0x04	; 4
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    20ec:	bd c0       	rjmp	.+378    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESC) {
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	80 39       	cpi	r24, 0x90	; 144
    20f4:	99 40       	sbci	r25, 0x09	; 9
    20f6:	29 f4       	brne	.+10     	; 0x2102 <sysclk_enable_peripheral_clock+0x1be>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    20f8:	64 e0       	ldi	r22, 0x04	; 4
    20fa:	84 e0       	ldi	r24, 0x04	; 4
    20fc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2100:	b3 c0       	rjmp	.+358    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESD) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	80 39       	cpi	r24, 0x90	; 144
    2108:	9a 40       	sbci	r25, 0x0A	; 10
    210a:	29 f4       	brne	.+10     	; 0x2116 <sysclk_enable_peripheral_clock+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    210c:	64 e0       	ldi	r22, 0x04	; 4
    210e:	85 e0       	ldi	r24, 0x05	; 5
    2110:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2114:	a9 c0       	rjmp	.+338    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	80 39       	cpi	r24, 0x90	; 144
    211c:	9b 40       	sbci	r25, 0x0B	; 11
    211e:	29 f4       	brne	.+10     	; 0x212a <sysclk_enable_peripheral_clock+0x1e6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2120:	64 e0       	ldi	r22, 0x04	; 4
    2122:	86 e0       	ldi	r24, 0x06	; 6
    2124:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2128:	9f c0       	rjmp	.+318    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	80 3c       	cpi	r24, 0xC0	; 192
    2130:	98 40       	sbci	r25, 0x08	; 8
    2132:	29 f4       	brne	.+10     	; 0x213e <sysclk_enable_peripheral_clock+0x1fa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2134:	68 e0       	ldi	r22, 0x08	; 8
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    213c:	95 c0       	rjmp	.+298    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	80 3c       	cpi	r24, 0xC0	; 192
    2144:	99 40       	sbci	r25, 0x09	; 9
    2146:	29 f4       	brne	.+10     	; 0x2152 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2148:	68 e0       	ldi	r22, 0x08	; 8
    214a:	84 e0       	ldi	r24, 0x04	; 4
    214c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2150:	8b c0       	rjmp	.+278    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	80 3c       	cpi	r24, 0xC0	; 192
    2158:	9a 40       	sbci	r25, 0x0A	; 10
    215a:	29 f4       	brne	.+10     	; 0x2166 <sysclk_enable_peripheral_clock+0x222>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    215c:	68 e0       	ldi	r22, 0x08	; 8
    215e:	85 e0       	ldi	r24, 0x05	; 5
    2160:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2164:	81 c0       	rjmp	.+258    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	80 3c       	cpi	r24, 0xC0	; 192
    216c:	9b 40       	sbci	r25, 0x0B	; 11
    216e:	29 f4       	brne	.+10     	; 0x217a <sysclk_enable_peripheral_clock+0x236>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2170:	68 e0       	ldi	r22, 0x08	; 8
    2172:	86 e0       	ldi	r24, 0x06	; 6
    2174:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2178:	77 c0       	rjmp	.+238    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	80 3a       	cpi	r24, 0xA0	; 160
    2180:	98 40       	sbci	r25, 0x08	; 8
    2182:	29 f4       	brne	.+10     	; 0x218e <sysclk_enable_peripheral_clock+0x24a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2184:	60 e1       	ldi	r22, 0x10	; 16
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    218c:	6d c0       	rjmp	.+218    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	80 3a       	cpi	r24, 0xA0	; 160
    2194:	99 40       	sbci	r25, 0x09	; 9
    2196:	29 f4       	brne	.+10     	; 0x21a2 <sysclk_enable_peripheral_clock+0x25e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2198:	60 e1       	ldi	r22, 0x10	; 16
    219a:	84 e0       	ldi	r24, 0x04	; 4
    219c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    21a0:	63 c0       	rjmp	.+198    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	80 3a       	cpi	r24, 0xA0	; 160
    21a8:	9a 40       	sbci	r25, 0x0A	; 10
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <sysclk_enable_peripheral_clock+0x272>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    21ac:	60 e1       	ldi	r22, 0x10	; 16
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    21b4:	59 c0       	rjmp	.+178    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	80 3a       	cpi	r24, 0xA0	; 160
    21bc:	9b 40       	sbci	r25, 0x0B	; 11
    21be:	29 f4       	brne	.+10     	; 0x21ca <sysclk_enable_peripheral_clock+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    21c0:	60 e1       	ldi	r22, 0x10	; 16
    21c2:	86 e0       	ldi	r24, 0x06	; 6
    21c4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    21c8:	4f c0       	rjmp	.+158    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	80 3b       	cpi	r24, 0xB0	; 176
    21d0:	98 40       	sbci	r25, 0x08	; 8
    21d2:	29 f4       	brne	.+10     	; 0x21de <sysclk_enable_peripheral_clock+0x29a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    21d4:	60 e2       	ldi	r22, 0x20	; 32
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    21dc:	45 c0       	rjmp	.+138    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	80 3b       	cpi	r24, 0xB0	; 176
    21e4:	99 40       	sbci	r25, 0x09	; 9
    21e6:	29 f4       	brne	.+10     	; 0x21f2 <sysclk_enable_peripheral_clock+0x2ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    21e8:	60 e2       	ldi	r22, 0x20	; 32
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    21f0:	3b c0       	rjmp	.+118    	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	80 3b       	cpi	r24, 0xB0	; 176
    21f8:	9a 40       	sbci	r25, 0x0A	; 10
    21fa:	29 f4       	brne	.+10     	; 0x2206 <sysclk_enable_peripheral_clock+0x2c2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    21fc:	60 e2       	ldi	r22, 0x20	; 32
    21fe:	85 e0       	ldi	r24, 0x05	; 5
    2200:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2204:	31 c0       	rjmp	.+98     	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	80 3b       	cpi	r24, 0xB0	; 176
    220c:	9b 40       	sbci	r25, 0x0B	; 11
    220e:	29 f4       	brne	.+10     	; 0x221a <sysclk_enable_peripheral_clock+0x2d6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2210:	60 e2       	ldi	r22, 0x20	; 32
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2218:	27 c0       	rjmp	.+78     	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	80 38       	cpi	r24, 0x80	; 128
    2220:	94 40       	sbci	r25, 0x04	; 4
    2222:	29 f4       	brne	.+10     	; 0x222e <sysclk_enable_peripheral_clock+0x2ea>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2224:	60 e4       	ldi	r22, 0x40	; 64
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    222c:	1d c0       	rjmp	.+58     	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	80 39       	cpi	r24, 0x90	; 144
    2234:	94 40       	sbci	r25, 0x04	; 4
    2236:	29 f4       	brne	.+10     	; 0x2242 <sysclk_enable_peripheral_clock+0x2fe>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2238:	60 e4       	ldi	r22, 0x40	; 64
    223a:	84 e0       	ldi	r24, 0x04	; 4
    223c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2240:	13 c0       	rjmp	.+38     	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	80 3a       	cpi	r24, 0xA0	; 160
    2248:	94 40       	sbci	r25, 0x04	; 4
    224a:	29 f4       	brne	.+10     	; 0x2256 <sysclk_enable_peripheral_clock+0x312>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    224c:	60 e4       	ldi	r22, 0x40	; 64
    224e:	85 e0       	ldi	r24, 0x05	; 5
    2250:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	80 3b       	cpi	r24, 0xB0	; 176
    225c:	94 40       	sbci	r25, 0x04	; 4
    225e:	21 f4       	brne	.+8      	; 0x2268 <sysclk_enable_peripheral_clock+0x324>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2260:	60 e4       	ldi	r22, 0x40	; 64
    2262:	86 e0       	ldi	r24, 0x06	; 6
    2264:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    2268:	00 00       	nop
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	00 d0       	rcall	.+0      	; 0x227a <adc_get_calibration_data+0x6>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	91 05       	cpc	r25, r1
    228a:	e9 f0       	breq	.+58     	; 0x22c6 <adc_get_calibration_data+0x52>
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	91 05       	cpc	r25, r1
    2290:	89 f1       	breq	.+98     	; 0x22f4 <adc_get_calibration_data+0x80>
    2292:	89 2b       	or	r24, r25
    2294:	09 f0       	breq	.+2      	; 0x2298 <adc_get_calibration_data+0x24>
    2296:	45 c0       	rjmp	.+138    	; 0x2322 <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2298:	81 e2       	ldi	r24, 0x21	; 33
    229a:	43 de       	rcall	.-890    	; 0x1f22 <nvm_read_production_signature_row>
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	98 2f       	mov	r25, r24
    22aa:	88 27       	eor	r24, r24
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
    22b0:	80 e2       	ldi	r24, 0x20	; 32
    22b2:	37 de       	rcall	.-914    	; 0x1f22 <nvm_read_production_signature_row>
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	29 81       	ldd	r18, Y+1	; 0x01
    22ba:	3a 81       	ldd	r19, Y+2	; 0x02
    22bc:	82 2b       	or	r24, r18
    22be:	93 2b       	or	r25, r19
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    22c4:	30 c0       	rjmp	.+96     	; 0x2326 <adc_get_calibration_data+0xb2>
    22c6:	85 e2       	ldi	r24, 0x25	; 37
    22c8:	2c de       	rcall	.-936    	; 0x1f22 <nvm_read_production_signature_row>
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	98 2f       	mov	r25, r24
    22d8:	88 27       	eor	r24, r24
    22da:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	84 e2       	ldi	r24, 0x24	; 36
    22e0:	20 de       	rcall	.-960    	; 0x1f22 <nvm_read_production_signature_row>
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	29 81       	ldd	r18, Y+1	; 0x01
    22e8:	3a 81       	ldd	r19, Y+2	; 0x02
    22ea:	82 2b       	or	r24, r18
    22ec:	93 2b       	or	r25, r19
    22ee:	89 83       	std	Y+1, r24	; 0x01
		break;
    22f0:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    22f2:	19 c0       	rjmp	.+50     	; 0x2326 <adc_get_calibration_data+0xb2>
    22f4:	8f e2       	ldi	r24, 0x2F	; 47
    22f6:	15 de       	rcall	.-982    	; 0x1f22 <nvm_read_production_signature_row>
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	98 2f       	mov	r25, r24
    2306:	88 27       	eor	r24, r24
    2308:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	8e e2       	ldi	r24, 0x2E	; 46
    230e:	09 de       	rcall	.-1006   	; 0x1f22 <nvm_read_production_signature_row>
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	29 81       	ldd	r18, Y+1	; 0x01
    2316:	3a 81       	ldd	r19, Y+2	; 0x02
    2318:	82 2b       	or	r24, r18
    231a:	93 2b       	or	r25, r19
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	9a 83       	std	Y+2, r25	; 0x02
		break;
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
    2322:	19 82       	std	Y+1, r1	; 0x01
    2324:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
}
    232a:	23 96       	adiw	r28, 0x03	; 3
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <hall_init>:
#include <asf.h>
#include "drivers/Hall_sensor.h"


void hall_init(void)
{
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(&ADCA);
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	92 e0       	ldi	r25, 0x02	; 2
    2346:	fe dd       	rcall	.-1028   	; 0x1f44 <sysclk_enable_peripheral_clock>
	//sets up adc
	PORTA.DIR|=0b00010000;
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	96 e0       	ldi	r25, 0x06	; 6
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	36 e0       	ldi	r19, 0x06	; 6
    2350:	f9 01       	movw	r30, r18
    2352:	20 81       	ld	r18, Z
    2354:	20 61       	ori	r18, 0x10	; 16
    2356:	fc 01       	movw	r30, r24
    2358:	20 83       	st	Z, r18
	ADCA.CTRLA = 0x01;
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	92 e0       	ldi	r25, 0x02	; 2
    235e:	21 e0       	ldi	r18, 0x01	; 1
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
	ADCA.CTRLB = 0x00;//12 bit mode
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	92 e0       	ldi	r25, 0x02	; 2
    2368:	fc 01       	movw	r30, r24
    236a:	11 82       	std	Z+1, r1	; 0x01
	ADCA.PRESCALER = 0x05;//prescalar 128
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	25 e0       	ldi	r18, 0x05	; 5
    2372:	fc 01       	movw	r30, r24
    2374:	24 83       	std	Z+4, r18	; 0x04
	ADCA.REFCTRL=0x10;
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	92 e0       	ldi	r25, 0x02	; 2
    237a:	20 e1       	ldi	r18, 0x10	; 16
    237c:	fc 01       	movw	r30, r24
    237e:	22 83       	std	Z+2, r18	; 0x02
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	12 e0       	ldi	r17, 0x02	; 2
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	76 df       	rcall	.-276    	; 0x2274 <adc_get_calibration_data>
    2388:	f8 01       	movw	r30, r16
    238a:	84 87       	std	Z+12, r24	; 0x0c
    238c:	95 87       	std	Z+13, r25	; 0x0d
	ADCA.CH0.CTRL = 0x01; // single ended input
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	92 e0       	ldi	r25, 0x02	; 2
    2392:	21 e0       	ldi	r18, 0x01	; 1
    2394:	fc 01       	movw	r30, r24
    2396:	20 a3       	std	Z+32, r18	; 0x20
	ADCA.CH0.MUXCTRL = 0x04; // seading ADA pin 4
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	92 e0       	ldi	r25, 0x02	; 2
    239c:	24 e0       	ldi	r18, 0x04	; 4
    239e:	fc 01       	movw	r30, r24
    23a0:	21 a3       	std	Z+33, r18	; 0x21
}
    23a2:	00 00       	nop
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	08 95       	ret

000023ae <hallVoltRead>:

uint16_t hallVoltRead(void)
{
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	1f 92       	push	r1
    23b4:	1f 92       	push	r1
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
	
	ADCA.CH0.CTRL |= 0x80; // start the conversion
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	32 e0       	ldi	r19, 0x02	; 2
    23c2:	f9 01       	movw	r30, r18
    23c4:	20 a1       	ldd	r18, Z+32	; 0x20
    23c6:	20 68       	ori	r18, 0x80	; 128
    23c8:	fc 01       	movw	r30, r24
    23ca:	20 a3       	std	Z+32, r18	; 0x20
	while(!(ADCA.CH0.INTFLAGS)); // wait until the conversion is done
    23cc:	00 00       	nop
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	92 e0       	ldi	r25, 0x02	; 2
    23d2:	fc 01       	movw	r30, r24
    23d4:	83 a1       	ldd	r24, Z+35	; 0x23
    23d6:	88 23       	and	r24, r24
    23d8:	d1 f3       	breq	.-12     	; 0x23ce <hallVoltRead+0x20>
	uint16_t in= ADCA.CH0.RES; // return the 12-bit result as a uint16_t
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	92 e0       	ldi	r25, 0x02	; 2
    23de:	fc 01       	movw	r30, r24
    23e0:	84 a1       	ldd	r24, Z+36	; 0x24
    23e2:	95 a1       	ldd	r25, Z+37	; 0x25
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	9a 83       	std	Y+2, r25	; 0x02
	return in;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
	//printf("\n%u",in);
	//calculates voltage using measured data
	//gives zero if the measurement is so close it yeilds negative
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <buzz_on>:
}



void buzz_on(void)
{
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    23fe:	80 e4       	ldi	r24, 0x40	; 64
    2400:	96 e0       	ldi	r25, 0x06	; 6
    2402:	20 e4       	ldi	r18, 0x40	; 64
    2404:	36 e0       	ldi	r19, 0x06	; 6
    2406:	f9 01       	movw	r30, r18
    2408:	21 81       	ldd	r18, Z+1	; 0x01
    240a:	21 60       	ori	r18, 0x01	; 1
    240c:	fc 01       	movw	r30, r24
    240e:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET |= 0b00000001;
    2410:	80 e4       	ldi	r24, 0x40	; 64
    2412:	96 e0       	ldi	r25, 0x06	; 6
    2414:	20 e4       	ldi	r18, 0x40	; 64
    2416:	36 e0       	ldi	r19, 0x06	; 6
    2418:	f9 01       	movw	r30, r18
    241a:	25 81       	ldd	r18, Z+5	; 0x05
    241c:	21 60       	ori	r18, 0x01	; 1
    241e:	fc 01       	movw	r30, r24
    2420:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer ON\n");
    2422:	8f eb       	ldi	r24, 0xBF	; 191
    2424:	90 e2       	ldi	r25, 0x20	; 32
    2426:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
	
}
    242a:	00 00       	nop
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <buzz_off>:
void buzz_off(void)
{
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    243a:	80 e4       	ldi	r24, 0x40	; 64
    243c:	96 e0       	ldi	r25, 0x06	; 6
    243e:	20 e4       	ldi	r18, 0x40	; 64
    2440:	36 e0       	ldi	r19, 0x06	; 6
    2442:	f9 01       	movw	r30, r18
    2444:	21 81       	ldd	r18, Z+1	; 0x01
    2446:	21 60       	ori	r18, 0x01	; 1
    2448:	fc 01       	movw	r30, r24
    244a:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET &= 0b11111110;
    244c:	80 e4       	ldi	r24, 0x40	; 64
    244e:	96 e0       	ldi	r25, 0x06	; 6
    2450:	20 e4       	ldi	r18, 0x40	; 64
    2452:	36 e0       	ldi	r19, 0x06	; 6
    2454:	f9 01       	movw	r30, r18
    2456:	25 81       	ldd	r18, Z+5	; 0x05
    2458:	2e 7f       	andi	r18, 0xFE	; 254
    245a:	fc 01       	movw	r30, r24
    245c:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer OFF\n");
    245e:	89 ec       	ldi	r24, 0xC9	; 201
    2460:	90 e2       	ldi	r25, 0x20	; 32
    2462:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
    2466:	00 00       	nop
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	9c e6       	ldi	r25, 0x6C	; 108
    247a:	ac ed       	ldi	r26, 0xDC	; 220
    247c:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	1f 92       	push	r1
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    2492:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    2494:	ec df       	rcall	.-40     	; 0x246e <sysclk_get_main_hz>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	29 81       	ldd	r18, Y+1	; 0x01
    249c:	22 2f       	mov	r18, r18
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <sysclk_get_per4_hz+0x22>
    24a2:	b6 95       	lsr	r27
    24a4:	a7 95       	ror	r26
    24a6:	97 95       	ror	r25
    24a8:	87 95       	ror	r24
    24aa:	2a 95       	dec	r18
    24ac:	d2 f7       	brpl	.-12     	; 0x24a2 <sysclk_get_per4_hz+0x1a>
}
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0f 90       	pop	r0
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	08 95       	ret

000024ba <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    24c2:	e2 df       	rcall	.-60     	; 0x2488 <sysclk_get_per4_hz>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    24da:	ef df       	rcall	.-34     	; 0x24ba <sysclk_get_per2_hz>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
}
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	08 95       	ret

000024ea <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    24f2:	ef df       	rcall	.-34     	; 0x24d2 <sysclk_get_per_hz>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
}
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2502:	04 c0       	rjmp	.+8      	; 0x250c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2504:	61 50       	subi	r22, 0x01	; 1
    2506:	71 09       	sbc	r23, r1
    2508:	81 09       	sbc	r24, r1
    250a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    250c:	61 15       	cp	r22, r1
    250e:	71 05       	cpc	r23, r1
    2510:	81 05       	cpc	r24, r1
    2512:	91 05       	cpc	r25, r1
    2514:	b9 f7       	brne	.-18     	; 0x2504 <__portable_avr_delay_cycles+0x2>
    2516:	08 95       	ret

00002518 <spi_enable>:
/*! \brief Enables the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	1f 92       	push	r1
    251e:	1f 92       	push	r1
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_ENABLE_bm;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	fc 01       	movw	r30, r24
    252e:	80 81       	ld	r24, Z
    2530:	28 2f       	mov	r18, r24
    2532:	20 64       	ori	r18, 0x40	; 64
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	9a 81       	ldd	r25, Y+2	; 0x02
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
}
    253c:	00 00       	nop
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <spi_init_pins>:

uint8_t commands [2] = {0x48, 0x58};
uint8_t read_buffer [2*3];
	
void spi_init_pins(void)
{
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	ioport_configure_port_pin(&PORTC, PIN1_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    2550:	43 e0       	ldi	r20, 0x03	; 3
    2552:	50 e0       	ldi	r21, 0x00	; 0
    2554:	62 e0       	ldi	r22, 0x02	; 2
    2556:	80 e4       	ldi	r24, 0x40	; 64
    2558:	96 e0       	ldi	r25, 0x06	; 6
    255a:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <ioport_configure_port_pin>
	
	ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_PULL_UP|IOPORT_DIR_INPUT);
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	58 e1       	ldi	r21, 0x18	; 24
    2562:	60 e1       	ldi	r22, 0x10	; 16
    2564:	80 e4       	ldi	r24, 0x40	; 64
    2566:	96 e0       	ldi	r25, 0x06	; 6
    2568:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    256c:	43 e0       	ldi	r20, 0x03	; 3
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	60 e2       	ldi	r22, 0x20	; 32
    2572:	80 e4       	ldi	r24, 0x40	; 64
    2574:	96 e0       	ldi	r25, 0x06	; 6
    2576:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	50 e0       	ldi	r21, 0x00	; 0
    257e:	60 e4       	ldi	r22, 0x40	; 64
    2580:	80 e4       	ldi	r24, 0x40	; 64
    2582:	96 e0       	ldi	r25, 0x06	; 6
    2584:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    2588:	43 e0       	ldi	r20, 0x03	; 3
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	60 e8       	ldi	r22, 0x80	; 128
    258e:	80 e4       	ldi	r24, 0x40	; 64
    2590:	96 e0       	ldi	r25, 0x06	; 6
    2592:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <ioport_configure_port_pin>
	
}
    2596:	00 00       	nop
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	08 95       	ret

0000259e <spi_init_module>:

void spi_init_module(void)
{
    259e:	cf 92       	push	r12
    25a0:	df 92       	push	r13
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	1f 92       	push	r1
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
	spi_init_pins();
    25b4:	c9 df       	rcall	.-110    	; 0x2548 <spi_init_pins>
	struct spi_device  spi_device_cong = {
    25b6:	81 e1       	ldi	r24, 0x11	; 17
    25b8:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
		
	spi_master_init(&MS5607_SPI_PORT);
    25ba:	80 ec       	ldi	r24, 0xC0	; 192
    25bc:	98 e0       	ldi	r25, 0x08	; 8
    25be:	0e 94 15 03 	call	0x62a	; 0x62a <spi_master_init>
	spi_master_setup_device(&MS5607_SPI_PORT, &spi_device_cong, SPI_MODE_0, 1000000,0);
    25c2:	c1 2c       	mov	r12, r1
    25c4:	d1 2c       	mov	r13, r1
    25c6:	76 01       	movw	r14, r12
    25c8:	00 e4       	ldi	r16, 0x40	; 64
    25ca:	12 e4       	ldi	r17, 0x42	; 66
    25cc:	2f e0       	ldi	r18, 0x0F	; 15
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	ce 01       	movw	r24, r28
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	bc 01       	movw	r22, r24
    25d8:	80 ec       	ldi	r24, 0xC0	; 192
    25da:	98 e0       	ldi	r25, 0x08	; 8
    25dc:	0e 94 4a 03 	call	0x694	; 0x694 <spi_master_setup_device>
	spi_enable(&MS5607_SPI_PORT);
    25e0:	80 ec       	ldi	r24, 0xC0	; 192
    25e2:	98 e0       	ldi	r25, 0x08	; 8
    25e4:	99 df       	rcall	.-206    	; 0x2518 <spi_enable>
	spi_write_packet(&MS5607_SPI_PORT, "0x1e", 1); //reset
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	64 ed       	ldi	r22, 0xD4	; 212
    25ec:	70 e2       	ldi	r23, 0x20	; 32
    25ee:	80 ec       	ldi	r24, 0xC0	; 192
    25f0:	98 e0       	ldi	r25, 0x08	; 8
    25f2:	0e 94 98 03 	call	0x730	; 0x730 <spi_write_packet>
	prom_read();
    25f6:	16 d0       	rcall	.+44     	; 0x2624 <prom_read>
	
	printf("spi init");
    25f8:	89 ed       	ldi	r24, 0xD9	; 217
    25fa:	90 e2       	ldi	r25, 0x20	; 32
    25fc:	89 2f       	mov	r24, r25
    25fe:	8f 93       	push	r24
    2600:	89 ed       	ldi	r24, 0xD9	; 217
    2602:	90 e2       	ldi	r25, 0x20	; 32
    2604:	8f 93       	push	r24
    2606:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <printf>
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
}
    260e:	00 00       	nop
    2610:	0f 90       	pop	r0
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	ff 90       	pop	r15
    261c:	ef 90       	pop	r14
    261e:	df 90       	pop	r13
    2620:	cf 90       	pop	r12
    2622:	08 95       	ret

00002624 <prom_read>:

void prom_read(void)
{
    2624:	2f 92       	push	r2
    2626:	3f 92       	push	r3
    2628:	4f 92       	push	r4
    262a:	5f 92       	push	r5
    262c:	6f 92       	push	r6
    262e:	7f 92       	push	r7
    2630:	8f 92       	push	r8
    2632:	9f 92       	push	r9
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	a4 97       	sbiw	r28, 0x24	; 36
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	de bf       	out	0x3e, r29	; 62
	struct spi_device  spi_device_cong = {
    2652:	81 e1       	ldi	r24, 0x11	; 17
    2654:	8a 83       	std	Y+2, r24	; 0x02
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    2656:	ce 01       	movw	r24, r28
    2658:	02 96       	adiw	r24, 0x02	; 2
    265a:	bc 01       	movw	r22, r24
    265c:	80 ec       	ldi	r24, 0xC0	; 192
    265e:	98 e0       	ldi	r25, 0x08	; 8
    2660:	0e 94 0d 04 	call	0x81a	; 0x81a <spi_select_device>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
    2664:	86 e0       	ldi	r24, 0x06	; 6
    2666:	eb e1       	ldi	r30, 0x1B	; 27
    2668:	f0 e2       	ldi	r31, 0x20	; 32
    266a:	de 01       	movw	r26, r28
    266c:	13 96       	adiw	r26, 0x03	; 3
    266e:	01 90       	ld	r0, Z+
    2670:	0d 92       	st	X+, r0
    2672:	8a 95       	dec	r24
    2674:	e1 f7       	brne	.-8      	; 0x266e <prom_read+0x4a>
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    2676:	19 82       	std	Y+1, r1	; 0x01
    2678:	e5 c1       	rjmp	.+970    	; 0x2a44 <prom_read+0x420>
	{
		
		spi_write_packet(&MS5607_SPI_PORT, prom_commands_c[i], 1);
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9e 01       	movw	r18, r28
    2682:	2d 5f       	subi	r18, 0xFD	; 253
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	82 0f       	add	r24, r18
    2688:	93 1f       	adc	r25, r19
    268a:	fc 01       	movw	r30, r24
    268c:	80 81       	ld	r24, Z
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	bc 01       	movw	r22, r24
    2698:	80 ec       	ldi	r24, 0xC0	; 192
    269a:	98 e0       	ldi	r25, 0x08	; 8
    269c:	0e 94 98 03 	call	0x730	; 0x730 <spi_write_packet>
		delay_ms(25);
    26a0:	24 df       	rcall	.-440    	; 0x24ea <sysclk_get_cpu_hz>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8c 01       	movw	r16, r24
    26a8:	9d 01       	movw	r18, r26
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	ba 01       	movw	r22, r20
    26b0:	0d 8b       	std	Y+21, r16	; 0x15
    26b2:	1e 8b       	std	Y+22, r17	; 0x16
    26b4:	2f 8b       	std	Y+23, r18	; 0x17
    26b6:	38 8f       	std	Y+24, r19	; 0x18
    26b8:	49 8f       	std	Y+25, r20	; 0x19
    26ba:	5a 8f       	std	Y+26, r21	; 0x1a
    26bc:	6b 8f       	std	Y+27, r22	; 0x1b
    26be:	7c 8f       	std	Y+28, r23	; 0x1c
    26c0:	2d 88       	ldd	r2, Y+21	; 0x15
    26c2:	3e 88       	ldd	r3, Y+22	; 0x16
    26c4:	4f 88       	ldd	r4, Y+23	; 0x17
    26c6:	58 8c       	ldd	r5, Y+24	; 0x18
    26c8:	69 8c       	ldd	r6, Y+25	; 0x19
    26ca:	7a 8c       	ldd	r7, Y+26	; 0x1a
    26cc:	8b 8c       	ldd	r8, Y+27	; 0x1b
    26ce:	9c 8c       	ldd	r9, Y+28	; 0x1c
    26d0:	22 2d       	mov	r18, r2
    26d2:	33 2d       	mov	r19, r3
    26d4:	44 2d       	mov	r20, r4
    26d6:	55 2d       	mov	r21, r5
    26d8:	66 2d       	mov	r22, r6
    26da:	77 2d       	mov	r23, r7
    26dc:	88 2d       	mov	r24, r8
    26de:	99 2d       	mov	r25, r9
    26e0:	03 e0       	ldi	r16, 0x03	; 3
    26e2:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__ashldi3>
    26e6:	a2 2e       	mov	r10, r18
    26e8:	b3 2e       	mov	r11, r19
    26ea:	c4 2e       	mov	r12, r20
    26ec:	d5 2e       	mov	r13, r21
    26ee:	e6 2e       	mov	r14, r22
    26f0:	f7 2e       	mov	r15, r23
    26f2:	08 2f       	mov	r16, r24
    26f4:	19 2f       	mov	r17, r25
    26f6:	2a 2c       	mov	r2, r10
    26f8:	3b 2c       	mov	r3, r11
    26fa:	4c 2c       	mov	r4, r12
    26fc:	5d 2c       	mov	r5, r13
    26fe:	6e 2c       	mov	r6, r14
    2700:	7f 2c       	mov	r7, r15
    2702:	80 2e       	mov	r8, r16
    2704:	91 2e       	mov	r9, r17
    2706:	22 2d       	mov	r18, r2
    2708:	33 2d       	mov	r19, r3
    270a:	44 2d       	mov	r20, r4
    270c:	55 2d       	mov	r21, r5
    270e:	66 2d       	mov	r22, r6
    2710:	77 2d       	mov	r23, r7
    2712:	88 2d       	mov	r24, r8
    2714:	99 2d       	mov	r25, r9
    2716:	02 e0       	ldi	r16, 0x02	; 2
    2718:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__ashldi3>
    271c:	a2 2e       	mov	r10, r18
    271e:	b3 2e       	mov	r11, r19
    2720:	c4 2e       	mov	r12, r20
    2722:	d5 2e       	mov	r13, r21
    2724:	e6 2e       	mov	r14, r22
    2726:	f7 2e       	mov	r15, r23
    2728:	08 2f       	mov	r16, r24
    272a:	19 2f       	mov	r17, r25
    272c:	2a 2d       	mov	r18, r10
    272e:	3b 2d       	mov	r19, r11
    2730:	4c 2d       	mov	r20, r12
    2732:	5d 2d       	mov	r21, r13
    2734:	6e 2d       	mov	r22, r14
    2736:	7f 2d       	mov	r23, r15
    2738:	80 2f       	mov	r24, r16
    273a:	91 2f       	mov	r25, r17
    273c:	a2 2c       	mov	r10, r2
    273e:	b3 2c       	mov	r11, r3
    2740:	c4 2c       	mov	r12, r4
    2742:	d5 2c       	mov	r13, r5
    2744:	e6 2c       	mov	r14, r6
    2746:	f7 2c       	mov	r15, r7
    2748:	08 2d       	mov	r16, r8
    274a:	19 2d       	mov	r17, r9
    274c:	0e 94 8e 43 	call	0x871c	; 0x871c <__subdi3>
    2750:	a2 2e       	mov	r10, r18
    2752:	b3 2e       	mov	r11, r19
    2754:	c4 2e       	mov	r12, r20
    2756:	d5 2e       	mov	r13, r21
    2758:	e6 2e       	mov	r14, r22
    275a:	f7 2e       	mov	r15, r23
    275c:	08 2f       	mov	r16, r24
    275e:	19 2f       	mov	r17, r25
    2760:	2a 2d       	mov	r18, r10
    2762:	3b 2d       	mov	r19, r11
    2764:	4c 2d       	mov	r20, r12
    2766:	5d 2d       	mov	r21, r13
    2768:	6e 2d       	mov	r22, r14
    276a:	7f 2d       	mov	r23, r15
    276c:	80 2f       	mov	r24, r16
    276e:	91 2f       	mov	r25, r17
    2770:	ad 88       	ldd	r10, Y+21	; 0x15
    2772:	be 88       	ldd	r11, Y+22	; 0x16
    2774:	cf 88       	ldd	r12, Y+23	; 0x17
    2776:	d8 8c       	ldd	r13, Y+24	; 0x18
    2778:	e9 8c       	ldd	r14, Y+25	; 0x19
    277a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    277c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    277e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2780:	0e 94 85 43 	call	0x870a	; 0x870a <__adddi3>
    2784:	22 2e       	mov	r2, r18
    2786:	33 2e       	mov	r3, r19
    2788:	44 2e       	mov	r4, r20
    278a:	55 2e       	mov	r5, r21
    278c:	66 2e       	mov	r6, r22
    278e:	77 2e       	mov	r7, r23
    2790:	88 2e       	mov	r8, r24
    2792:	99 2e       	mov	r9, r25
    2794:	0f 2e       	mov	r0, r31
    2796:	f6 e0       	ldi	r31, 0x06	; 6
    2798:	af 2e       	mov	r10, r31
    279a:	f0 2d       	mov	r31, r0
    279c:	b1 2c       	mov	r11, r1
    279e:	c1 2c       	mov	r12, r1
    27a0:	d1 2c       	mov	r13, r1
    27a2:	e1 2c       	mov	r14, r1
    27a4:	f1 2c       	mov	r15, r1
    27a6:	00 e0       	ldi	r16, 0x00	; 0
    27a8:	10 e0       	ldi	r17, 0x00	; 0
    27aa:	22 2d       	mov	r18, r2
    27ac:	33 2d       	mov	r19, r3
    27ae:	44 2d       	mov	r20, r4
    27b0:	55 2d       	mov	r21, r5
    27b2:	66 2d       	mov	r22, r6
    27b4:	77 2d       	mov	r23, r7
    27b6:	88 2d       	mov	r24, r8
    27b8:	99 2d       	mov	r25, r9
    27ba:	0e 94 10 43 	call	0x8620	; 0x8620 <__udivdi3>
    27be:	22 2e       	mov	r2, r18
    27c0:	33 2e       	mov	r3, r19
    27c2:	44 2e       	mov	r4, r20
    27c4:	55 2e       	mov	r5, r21
    27c6:	66 2e       	mov	r6, r22
    27c8:	77 2e       	mov	r7, r23
    27ca:	88 2e       	mov	r8, r24
    27cc:	99 2e       	mov	r9, r25
    27ce:	a2 2c       	mov	r10, r2
    27d0:	b3 2c       	mov	r11, r3
    27d2:	c4 2c       	mov	r12, r4
    27d4:	d5 2c       	mov	r13, r5
    27d6:	e6 2c       	mov	r14, r6
    27d8:	f7 2c       	mov	r15, r7
    27da:	08 2d       	mov	r16, r8
    27dc:	19 2d       	mov	r17, r9
    27de:	2a 2d       	mov	r18, r10
    27e0:	3b 2d       	mov	r19, r11
    27e2:	4c 2d       	mov	r20, r12
    27e4:	5d 2d       	mov	r21, r13
    27e6:	6e 2d       	mov	r22, r14
    27e8:	7f 2d       	mov	r23, r15
    27ea:	80 2f       	mov	r24, r16
    27ec:	91 2f       	mov	r25, r17
    27ee:	29 51       	subi	r18, 0x19	; 25
    27f0:	3c 4f       	sbci	r19, 0xFC	; 252
    27f2:	4f 4f       	sbci	r20, 0xFF	; 255
    27f4:	5f 4f       	sbci	r21, 0xFF	; 255
    27f6:	6f 4f       	sbci	r22, 0xFF	; 255
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	8f 4f       	sbci	r24, 0xFF	; 255
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	a2 2e       	mov	r10, r18
    2800:	b3 2e       	mov	r11, r19
    2802:	c4 2e       	mov	r12, r20
    2804:	d5 2e       	mov	r13, r21
    2806:	e6 2e       	mov	r14, r22
    2808:	f7 2e       	mov	r15, r23
    280a:	08 2f       	mov	r16, r24
    280c:	19 2f       	mov	r17, r25
    280e:	2a 2d       	mov	r18, r10
    2810:	3b 2d       	mov	r19, r11
    2812:	4c 2d       	mov	r20, r12
    2814:	5d 2d       	mov	r21, r13
    2816:	6e 2d       	mov	r22, r14
    2818:	7f 2d       	mov	r23, r15
    281a:	80 2f       	mov	r24, r16
    281c:	91 2f       	mov	r25, r17
    281e:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__floatundisf>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a e7       	ldi	r20, 0x7A	; 122
    282c:	54 e4       	ldi	r21, 0x44	; 68
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__divsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <__fixunssfdi>
    2842:	a2 2e       	mov	r10, r18
    2844:	b3 2e       	mov	r11, r19
    2846:	c4 2e       	mov	r12, r20
    2848:	d5 2e       	mov	r13, r21
    284a:	e6 2e       	mov	r14, r22
    284c:	f7 2e       	mov	r15, r23
    284e:	08 2f       	mov	r16, r24
    2850:	19 2f       	mov	r17, r25
    2852:	d6 01       	movw	r26, r12
    2854:	c5 01       	movw	r24, r10
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	53 de       	rcall	.-858    	; 0x2502 <__portable_avr_delay_cycles>
		spi_read_packet(&MS5607_SPI_PORT, prom_c_read_buffer[i], 2);
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9e 01       	movw	r18, r28
    2864:	27 5f       	subi	r18, 0xF7	; 247
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	82 0f       	add	r24, r18
    286a:	93 1f       	adc	r25, r19
    286c:	fc 01       	movw	r30, r24
    286e:	80 81       	ld	r24, Z
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	42 e0       	ldi	r20, 0x02	; 2
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	bc 01       	movw	r22, r24
    287a:	80 ec       	ldi	r24, 0xC0	; 192
    287c:	98 e0       	ldi	r25, 0x08	; 8
    287e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <spi_read_packet>
		delay_ms(25);
    2882:	33 de       	rcall	.-922    	; 0x24ea <sysclk_get_cpu_hz>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8c 01       	movw	r16, r24
    288a:	9d 01       	movw	r18, r26
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	ba 01       	movw	r22, r20
    2892:	0d 8f       	std	Y+29, r16	; 0x1d
    2894:	1e 8f       	std	Y+30, r17	; 0x1e
    2896:	2f 8f       	std	Y+31, r18	; 0x1f
    2898:	38 a3       	std	Y+32, r19	; 0x20
    289a:	49 a3       	std	Y+33, r20	; 0x21
    289c:	5a a3       	std	Y+34, r21	; 0x22
    289e:	6b a3       	std	Y+35, r22	; 0x23
    28a0:	7c a3       	std	Y+36, r23	; 0x24
    28a2:	2d 8c       	ldd	r2, Y+29	; 0x1d
    28a4:	3e 8c       	ldd	r3, Y+30	; 0x1e
    28a6:	4f 8c       	ldd	r4, Y+31	; 0x1f
    28a8:	58 a0       	ldd	r5, Y+32	; 0x20
    28aa:	69 a0       	ldd	r6, Y+33	; 0x21
    28ac:	7a a0       	ldd	r7, Y+34	; 0x22
    28ae:	8b a0       	ldd	r8, Y+35	; 0x23
    28b0:	9c a0       	ldd	r9, Y+36	; 0x24
    28b2:	22 2d       	mov	r18, r2
    28b4:	33 2d       	mov	r19, r3
    28b6:	44 2d       	mov	r20, r4
    28b8:	55 2d       	mov	r21, r5
    28ba:	66 2d       	mov	r22, r6
    28bc:	77 2d       	mov	r23, r7
    28be:	88 2d       	mov	r24, r8
    28c0:	99 2d       	mov	r25, r9
    28c2:	03 e0       	ldi	r16, 0x03	; 3
    28c4:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__ashldi3>
    28c8:	a2 2e       	mov	r10, r18
    28ca:	b3 2e       	mov	r11, r19
    28cc:	c4 2e       	mov	r12, r20
    28ce:	d5 2e       	mov	r13, r21
    28d0:	e6 2e       	mov	r14, r22
    28d2:	f7 2e       	mov	r15, r23
    28d4:	08 2f       	mov	r16, r24
    28d6:	19 2f       	mov	r17, r25
    28d8:	2a 2c       	mov	r2, r10
    28da:	3b 2c       	mov	r3, r11
    28dc:	4c 2c       	mov	r4, r12
    28de:	5d 2c       	mov	r5, r13
    28e0:	6e 2c       	mov	r6, r14
    28e2:	7f 2c       	mov	r7, r15
    28e4:	80 2e       	mov	r8, r16
    28e6:	91 2e       	mov	r9, r17
    28e8:	22 2d       	mov	r18, r2
    28ea:	33 2d       	mov	r19, r3
    28ec:	44 2d       	mov	r20, r4
    28ee:	55 2d       	mov	r21, r5
    28f0:	66 2d       	mov	r22, r6
    28f2:	77 2d       	mov	r23, r7
    28f4:	88 2d       	mov	r24, r8
    28f6:	99 2d       	mov	r25, r9
    28f8:	02 e0       	ldi	r16, 0x02	; 2
    28fa:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__ashldi3>
    28fe:	a2 2e       	mov	r10, r18
    2900:	b3 2e       	mov	r11, r19
    2902:	c4 2e       	mov	r12, r20
    2904:	d5 2e       	mov	r13, r21
    2906:	e6 2e       	mov	r14, r22
    2908:	f7 2e       	mov	r15, r23
    290a:	08 2f       	mov	r16, r24
    290c:	19 2f       	mov	r17, r25
    290e:	2a 2d       	mov	r18, r10
    2910:	3b 2d       	mov	r19, r11
    2912:	4c 2d       	mov	r20, r12
    2914:	5d 2d       	mov	r21, r13
    2916:	6e 2d       	mov	r22, r14
    2918:	7f 2d       	mov	r23, r15
    291a:	80 2f       	mov	r24, r16
    291c:	91 2f       	mov	r25, r17
    291e:	a2 2c       	mov	r10, r2
    2920:	b3 2c       	mov	r11, r3
    2922:	c4 2c       	mov	r12, r4
    2924:	d5 2c       	mov	r13, r5
    2926:	e6 2c       	mov	r14, r6
    2928:	f7 2c       	mov	r15, r7
    292a:	08 2d       	mov	r16, r8
    292c:	19 2d       	mov	r17, r9
    292e:	0e 94 8e 43 	call	0x871c	; 0x871c <__subdi3>
    2932:	a2 2e       	mov	r10, r18
    2934:	b3 2e       	mov	r11, r19
    2936:	c4 2e       	mov	r12, r20
    2938:	d5 2e       	mov	r13, r21
    293a:	e6 2e       	mov	r14, r22
    293c:	f7 2e       	mov	r15, r23
    293e:	08 2f       	mov	r16, r24
    2940:	19 2f       	mov	r17, r25
    2942:	2a 2d       	mov	r18, r10
    2944:	3b 2d       	mov	r19, r11
    2946:	4c 2d       	mov	r20, r12
    2948:	5d 2d       	mov	r21, r13
    294a:	6e 2d       	mov	r22, r14
    294c:	7f 2d       	mov	r23, r15
    294e:	80 2f       	mov	r24, r16
    2950:	91 2f       	mov	r25, r17
    2952:	ad 8c       	ldd	r10, Y+29	; 0x1d
    2954:	be 8c       	ldd	r11, Y+30	; 0x1e
    2956:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2958:	d8 a0       	ldd	r13, Y+32	; 0x20
    295a:	e9 a0       	ldd	r14, Y+33	; 0x21
    295c:	fa a0       	ldd	r15, Y+34	; 0x22
    295e:	0b a1       	ldd	r16, Y+35	; 0x23
    2960:	1c a1       	ldd	r17, Y+36	; 0x24
    2962:	0e 94 85 43 	call	0x870a	; 0x870a <__adddi3>
    2966:	22 2e       	mov	r2, r18
    2968:	33 2e       	mov	r3, r19
    296a:	44 2e       	mov	r4, r20
    296c:	55 2e       	mov	r5, r21
    296e:	66 2e       	mov	r6, r22
    2970:	77 2e       	mov	r7, r23
    2972:	88 2e       	mov	r8, r24
    2974:	99 2e       	mov	r9, r25
    2976:	0f 2e       	mov	r0, r31
    2978:	f6 e0       	ldi	r31, 0x06	; 6
    297a:	af 2e       	mov	r10, r31
    297c:	f0 2d       	mov	r31, r0
    297e:	b1 2c       	mov	r11, r1
    2980:	c1 2c       	mov	r12, r1
    2982:	d1 2c       	mov	r13, r1
    2984:	e1 2c       	mov	r14, r1
    2986:	f1 2c       	mov	r15, r1
    2988:	00 e0       	ldi	r16, 0x00	; 0
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	22 2d       	mov	r18, r2
    298e:	33 2d       	mov	r19, r3
    2990:	44 2d       	mov	r20, r4
    2992:	55 2d       	mov	r21, r5
    2994:	66 2d       	mov	r22, r6
    2996:	77 2d       	mov	r23, r7
    2998:	88 2d       	mov	r24, r8
    299a:	99 2d       	mov	r25, r9
    299c:	0e 94 10 43 	call	0x8620	; 0x8620 <__udivdi3>
    29a0:	22 2e       	mov	r2, r18
    29a2:	33 2e       	mov	r3, r19
    29a4:	44 2e       	mov	r4, r20
    29a6:	55 2e       	mov	r5, r21
    29a8:	66 2e       	mov	r6, r22
    29aa:	77 2e       	mov	r7, r23
    29ac:	88 2e       	mov	r8, r24
    29ae:	99 2e       	mov	r9, r25
    29b0:	a2 2c       	mov	r10, r2
    29b2:	b3 2c       	mov	r11, r3
    29b4:	c4 2c       	mov	r12, r4
    29b6:	d5 2c       	mov	r13, r5
    29b8:	e6 2c       	mov	r14, r6
    29ba:	f7 2c       	mov	r15, r7
    29bc:	08 2d       	mov	r16, r8
    29be:	19 2d       	mov	r17, r9
    29c0:	2a 2d       	mov	r18, r10
    29c2:	3b 2d       	mov	r19, r11
    29c4:	4c 2d       	mov	r20, r12
    29c6:	5d 2d       	mov	r21, r13
    29c8:	6e 2d       	mov	r22, r14
    29ca:	7f 2d       	mov	r23, r15
    29cc:	80 2f       	mov	r24, r16
    29ce:	91 2f       	mov	r25, r17
    29d0:	29 51       	subi	r18, 0x19	; 25
    29d2:	3c 4f       	sbci	r19, 0xFC	; 252
    29d4:	4f 4f       	sbci	r20, 0xFF	; 255
    29d6:	5f 4f       	sbci	r21, 0xFF	; 255
    29d8:	6f 4f       	sbci	r22, 0xFF	; 255
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	8f 4f       	sbci	r24, 0xFF	; 255
    29de:	9f 4f       	sbci	r25, 0xFF	; 255
    29e0:	a2 2e       	mov	r10, r18
    29e2:	b3 2e       	mov	r11, r19
    29e4:	c4 2e       	mov	r12, r20
    29e6:	d5 2e       	mov	r13, r21
    29e8:	e6 2e       	mov	r14, r22
    29ea:	f7 2e       	mov	r15, r23
    29ec:	08 2f       	mov	r16, r24
    29ee:	19 2f       	mov	r17, r25
    29f0:	2a 2d       	mov	r18, r10
    29f2:	3b 2d       	mov	r19, r11
    29f4:	4c 2d       	mov	r20, r12
    29f6:	5d 2d       	mov	r21, r13
    29f8:	6e 2d       	mov	r22, r14
    29fa:	7f 2d       	mov	r23, r15
    29fc:	80 2f       	mov	r24, r16
    29fe:	91 2f       	mov	r25, r17
    2a00:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__floatundisf>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a e7       	ldi	r20, 0x7A	; 122
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__divsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <__fixunssfdi>
    2a24:	a2 2e       	mov	r10, r18
    2a26:	b3 2e       	mov	r11, r19
    2a28:	c4 2e       	mov	r12, r20
    2a2a:	d5 2e       	mov	r13, r21
    2a2c:	e6 2e       	mov	r14, r22
    2a2e:	f7 2e       	mov	r15, r23
    2a30:	08 2f       	mov	r16, r24
    2a32:	19 2f       	mov	r17, r25
    2a34:	d6 01       	movw	r26, r12
    2a36:	c5 01       	movw	r24, r10
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	62 dd       	rcall	.-1340   	; 0x2502 <__portable_avr_delay_cycles>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	8f 5f       	subi	r24, 0xFF	; 255
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	87 30       	cpi	r24, 0x07	; 7
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <prom_read+0x428>
    2a4a:	17 ce       	rjmp	.-978    	; 0x267a <prom_read+0x56>
		
	}

	
	
	C1 = prom_c_read_buffer[0]<<8 |prom_c_read_buffer[1];
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	88 2f       	mov	r24, r24
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	38 2f       	mov	r19, r24
    2a54:	22 27       	eor	r18, r18
    2a56:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	82 2b       	or	r24, r18
    2a5e:	93 2b       	or	r25, r19
    2a60:	80 93 7b 27 	sts	0x277B, r24	; 0x80277b <C1>
    2a64:	90 93 7c 27 	sts	0x277C, r25	; 0x80277c <C1+0x1>
	C2 = prom_c_read_buffer[2]<<8 |prom_c_read_buffer[3];
    2a68:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	38 2f       	mov	r19, r24
    2a70:	22 27       	eor	r18, r18
    2a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	82 2b       	or	r24, r18
    2a7a:	93 2b       	or	r25, r19
    2a7c:	80 93 7f 27 	sts	0x277F, r24	; 0x80277f <C2>
    2a80:	90 93 80 27 	sts	0x2780, r25	; 0x802780 <C2+0x1>
	C3 = prom_c_read_buffer[4]<<8 |prom_c_read_buffer[5];
    2a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	38 2f       	mov	r19, r24
    2a8c:	22 27       	eor	r18, r18
    2a8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	82 2b       	or	r24, r18
    2a96:	93 2b       	or	r25, r19
    2a98:	80 93 7d 27 	sts	0x277D, r24	; 0x80277d <C3>
    2a9c:	90 93 7e 27 	sts	0x277E, r25	; 0x80277e <C3+0x1>
	C4 = prom_c_read_buffer[6]<<8 |prom_c_read_buffer[7];
    2aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa2:	88 2f       	mov	r24, r24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	38 2f       	mov	r19, r24
    2aa8:	22 27       	eor	r18, r18
    2aaa:	88 89       	ldd	r24, Y+16	; 0x10
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	82 2b       	or	r24, r18
    2ab2:	93 2b       	or	r25, r19
    2ab4:	80 93 8f 27 	sts	0x278F, r24	; 0x80278f <C4>
    2ab8:	90 93 90 27 	sts	0x2790, r25	; 0x802790 <C4+0x1>
	C5 = prom_c_read_buffer[8]<<8 |prom_c_read_buffer[9];
    2abc:	89 89       	ldd	r24, Y+17	; 0x11
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	38 2f       	mov	r19, r24
    2ac4:	22 27       	eor	r18, r18
    2ac6:	8a 89       	ldd	r24, Y+18	; 0x12
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	82 2b       	or	r24, r18
    2ace:	93 2b       	or	r25, r19
    2ad0:	80 93 8d 27 	sts	0x278D, r24	; 0x80278d <C5>
    2ad4:	90 93 8e 27 	sts	0x278E, r25	; 0x80278e <C5+0x1>
	C6 = prom_c_read_buffer[10]<<8 |prom_c_read_buffer[11];
    2ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	38 2f       	mov	r19, r24
    2ae0:	22 27       	eor	r18, r18
    2ae2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ae4:	88 2f       	mov	r24, r24
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	82 2b       	or	r24, r18
    2aea:	93 2b       	or	r25, r19
    2aec:	80 93 81 27 	sts	0x2781, r24	; 0x802781 <C6>
    2af0:	90 93 82 27 	sts	0x2782, r25	; 0x802782 <C6+0x1>
	
	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    2af4:	ce 01       	movw	r24, r28
    2af6:	02 96       	adiw	r24, 0x02	; 2
    2af8:	bc 01       	movw	r22, r24
    2afa:	80 ec       	ldi	r24, 0xC0	; 192
    2afc:	98 e0       	ldi	r25, 0x08	; 8
    2afe:	0e 94 23 04 	call	0x846	; 0x846 <spi_deselect_device>
	

	
}
    2b02:	00 00       	nop
    2b04:	a4 96       	adiw	r28, 0x24	; 36
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	9f 90       	pop	r9
    2b20:	8f 90       	pop	r8
    2b22:	7f 90       	pop	r7
    2b24:	6f 90       	pop	r6
    2b26:	5f 90       	pop	r5
    2b28:	4f 90       	pop	r4
    2b2a:	3f 90       	pop	r3
    2b2c:	2f 90       	pop	r2
    2b2e:	08 95       	ret

00002b30 <tc_set_overflow_interrupt_level>:
 * \param level Overflow interrupt level
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <tc_set_overflow_interrupt_level+0x6>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	fc 01       	movw	r30, r24
    2b46:	86 81       	ldd	r24, Z+6	; 0x06
    2b48:	28 2f       	mov	r18, r24
    2b4a:	2c 7f       	andi	r18, 0xFC	; 252
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	fc 01       	movw	r30, r24
    2b52:	26 83       	std	Z+6, r18	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	fc 01       	movw	r30, r24
    2b5a:	96 81       	ldd	r25, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	29 2f       	mov	r18, r25
    2b60:	28 2b       	or	r18, r24
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	fc 01       	movw	r30, r24
    2b68:	26 83       	std	Z+6, r18	; 0x06
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
}
    2b6a:	00 00       	nop
    2b6c:	23 96       	adiw	r28, 0x03	; 3
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	08 95       	ret

00002b78 <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <tc_write_clock_source+0x6>
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	9a 83       	std	Y+2, r25	; 0x02
    2b86:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2b90:	98 2f       	mov	r25, r24
    2b92:	90 7f       	andi	r25, 0xF0	; 240
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	89 2b       	or	r24, r25
    2b98:	28 2f       	mov	r18, r24
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    2ba2:	00 00       	nop
    2ba4:	23 96       	adiw	r28, 0x03	; 3
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <tc_write_period+0x6>
    2bb6:	1f 92       	push	r1
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	6b 83       	std	Y+3, r22	; 0x03
    2bc2:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bca:	3c 81       	ldd	r19, Y+4	; 0x04
    2bcc:	fc 01       	movw	r30, r24
    2bce:	26 a3       	std	Z+38, r18	; 0x26
    2bd0:	37 a3       	std	Z+39, r19	; 0x27
}
    2bd2:	00 00       	nop
    2bd4:	24 96       	adiw	r28, 0x04	; 4
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	08 95       	ret

00002be0 <tc_clear_overflow>:
 *
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	1f 92       	push	r1
    2be6:	1f 92       	push	r1
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	9a 83       	std	Y+2, r25	; 0x02
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	84 85       	ldd	r24, Z+12	; 0x0c
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	21 60       	ori	r18, 0x01	; 1
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	fc 01       	movw	r30, r24
    2c02:	24 87       	std	Z+12, r18	; 0x0c
}
    2c04:	00 00       	nop
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	08 95       	ret

00002c10 <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <tc_set_wgm+0x6>
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	9a 83       	std	Y+2, r25	; 0x02
    2c1e:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	fc 01       	movw	r30, r24
    2c26:	81 81       	ldd	r24, Z+1	; 0x01
    2c28:	98 2f       	mov	r25, r24
    2c2a:	98 7f       	andi	r25, 0xF8	; 248
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	89 2b       	or	r24, r25
    2c30:	28 2f       	mov	r18, r24
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	fc 01       	movw	r30, r24
    2c38:	21 83       	std	Z+1, r18	; 0x01
}
    2c3a:	00 00       	nop
    2c3c:	23 96       	adiw	r28, 0x03	; 3
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <xbee_callback>:

static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

static void xbee_callback(void)
{
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
	write_telem_to_xbee();
    2c50:	89 d0       	rcall	.+274    	; 0x2d64 <write_telem_to_xbee>

		tc_clear_overflow(&XBEE_TC);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	98 e0       	ldi	r25, 0x08	; 8
    2c56:	c4 df       	rcall	.-120    	; 0x2be0 <tc_clear_overflow>
		
	
}
    2c58:	00 00       	nop
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret

00002c60 <xbee_init>:

void xbee_init()
{
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
	xbee_uart.Baud=XBEEBAUD;
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	92 ec       	ldi	r25, 0xC2	; 194
    2c6c:	a1 e0       	ldi	r26, 0x01	; 1
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <xbee_uart+0x6>
    2c74:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <xbee_uart+0x7>
    2c78:	a0 93 a6 21 	sts	0x21A6, r26	; 0x8021a6 <xbee_uart+0x8>
    2c7c:	b0 93 a7 21 	sts	0x21A7, r27	; 0x8021a7 <xbee_uart+0x9>
	xbee_uart.Port=P_XBEEPORT;
    2c80:	80 e4       	ldi	r24, 0x40	; 64
    2c82:	96 e0       	ldi	r25, 0x06	; 6
    2c84:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <xbee_uart>
    2c88:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <xbee_uart+0x1>
	xbee_uart.Usart=P_XBEEUART;
    2c8c:	80 ea       	ldi	r24, 0xA0	; 160
    2c8e:	98 e0       	ldi	r25, 0x08	; 8
    2c90:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <xbee_uart+0x2>
    2c94:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <xbee_uart+0x3>
	xbee_uart.tx=XBEETXPIN;
    2c98:	88 e0       	ldi	r24, 0x08	; 8
    2c9a:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <xbee_uart+0x5>
	xbee_uart.rx=XBEERXPIN;
    2c9e:	84 e0       	ldi	r24, 0x04	; 4
    2ca0:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <xbee_uart+0x4>
	uart_init(&xbee_uart);
    2ca4:	8e e9       	ldi	r24, 0x9E	; 158
    2ca6:	91 e2       	ldi	r25, 0x21	; 33
    2ca8:	0e 94 96 3a 	call	0x752c	; 0x752c <uart_init>
	XBEE_UART.CTRLA=0x14;
    2cac:	80 ea       	ldi	r24, 0xA0	; 160
    2cae:	98 e0       	ldi	r25, 0x08	; 8
    2cb0:	24 e1       	ldi	r18, 0x14	; 20
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	23 83       	std	Z+3, r18	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    2cb6:	86 ee       	ldi	r24, 0xE6	; 230
    2cb8:	90 e2       	ldi	r25, 0x20	; 32
    2cba:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
	
	tc_enable(&XBEE_TC);
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	98 e0       	ldi	r25, 0x08	; 8
    2cc2:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <tc_enable>
	tc_set_overflow_interrupt_callback(&XBEE_TC, xbee_callback);
    2cc6:	64 e2       	ldi	r22, 0x24	; 36
    2cc8:	76 e1       	ldi	r23, 0x16	; 22
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	98 e0       	ldi	r25, 0x08	; 8
    2cce:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <tc_set_overflow_interrupt_callback>
	tc_set_wgm(&XBEE_TC, TC_WG_NORMAL);
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	98 e0       	ldi	r25, 0x08	; 8
    2cd8:	9b df       	rcall	.-202    	; 0x2c10 <tc_set_wgm>
	tc_write_period(&XBEE_TC, XBEE_WRITE_INTERVAL);
    2cda:	61 e1       	ldi	r22, 0x11	; 17
    2cdc:	7a e7       	ldi	r23, 0x7A	; 122
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	98 e0       	ldi	r25, 0x08	; 8
    2ce2:	66 df       	rcall	.-308    	; 0x2bb0 <tc_write_period>
	tc_set_overflow_interrupt_level(&XBEE_TC, TC_INT_LVL_LO);
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	98 e0       	ldi	r25, 0x08	; 8
    2cea:	22 df       	rcall	.-444    	; 0x2b30 <tc_set_overflow_interrupt_level>
	cpu_irq_enable();
    2cec:	78 94       	sei
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	98 e0       	ldi	r25, 0x08	; 8
    2cf4:	41 df       	rcall	.-382    	; 0x2b78 <tc_write_clock_source>
}
    2cf6:	00 00       	nop
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	08 95       	ret

00002cfe <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	1f 92       	push	r1
    2d04:	1f 92       	push	r1
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
	if(blockTransmission) return NULL;
    2d0e:	80 91 3a 22 	lds	r24, 0x223A	; 0x80223a <blockTransmission>
    2d12:	88 23       	and	r24, r24
    2d14:	09 f5       	brne	.+66     	; 0x2d58 <xbeeWrite+0x5a>
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <strlen>
    2d1e:	9c 01       	movw	r18, r24
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	a9 01       	movw	r20, r18
    2d26:	bc 01       	movw	r22, r24
    2d28:	80 ea       	ldi	r24, 0xA0	; 160
    2d2a:	98 e0       	ldi	r25, 0x08	; 8
    2d2c:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <usart_serial_write_packet>
	packetCount++;
    2d30:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <packetCount>
    2d34:	90 91 3c 22 	lds	r25, 0x223C	; 0x80223c <packetCount+0x1>
    2d38:	a0 91 3d 22 	lds	r26, 0x223D	; 0x80223d <packetCount+0x2>
    2d3c:	b0 91 3e 22 	lds	r27, 0x223E	; 0x80223e <packetCount+0x3>
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	a1 1d       	adc	r26, r1
    2d44:	b1 1d       	adc	r27, r1
    2d46:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <packetCount>
    2d4a:	90 93 3c 22 	sts	0x223C, r25	; 0x80223c <packetCount+0x1>
    2d4e:	a0 93 3d 22 	sts	0x223D, r26	; 0x80223d <packetCount+0x2>
    2d52:	b0 93 3e 22 	sts	0x223E, r27	; 0x80223e <packetCount+0x3>
    2d56:	01 c0       	rjmp	.+2      	; 0x2d5a <xbeeWrite+0x5c>
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
}

void xbeeWrite(uint8_t* data)
{	
	if(blockTransmission) return NULL;
    2d58:	00 00       	nop
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
	packetCount++;
   // if(DEBUG) printf("%s \n",(const)data);
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	08 95       	ret

00002d64 <write_telem_to_xbee>:

void write_telem_to_xbee()
{
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	c0 54       	subi	r28, 0x40	; 64
    2d6e:	d3 40       	sbci	r29, 0x03	; 3
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	de bf       	out	0x3e, r29	; 62
	char* telemetryString [255];
	*telemetryString = "\0";
    2d74:	81 e2       	ldi	r24, 0x21	; 33
    2d76:	90 e2       	ldi	r25, 0x20	; 32
    2d78:	8b 83       	std	Y+3, r24	; 0x03
    2d7a:	9c 83       	std	Y+4, r25	; 0x04
	char* s_teamID = "2118";
    2d7c:	88 ef       	ldi	r24, 0xF8	; 248
    2d7e:	90 e2       	ldi	r25, 0x20	; 32
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	9a 83       	std	Y+2, r25	; 0x02
	char* s_roll [10];
	char* s_spinRate [10];
	char* s_flightState [10];
	char* s_cardinalDir [10];
	
	sprintf(s_missionTime, "%i", missionTime);
    2d84:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <missionTime>
    2d88:	90 91 22 22 	lds	r25, 0x2222	; 0x802222 <missionTime+0x1>
    2d8c:	a0 91 23 22 	lds	r26, 0x2223	; 0x802223 <missionTime+0x2>
    2d90:	b0 91 24 22 	lds	r27, 0x2224	; 0x802224 <missionTime+0x3>
    2d94:	2b 2f       	mov	r18, r27
    2d96:	2f 93       	push	r18
    2d98:	2a 2f       	mov	r18, r26
    2d9a:	2f 93       	push	r18
    2d9c:	29 2f       	mov	r18, r25
    2d9e:	2f 93       	push	r18
    2da0:	8f 93       	push	r24
    2da2:	8d ef       	ldi	r24, 0xFD	; 253
    2da4:	90 e2       	ldi	r25, 0x20	; 32
    2da6:	89 2f       	mov	r24, r25
    2da8:	8f 93       	push	r24
    2daa:	8d ef       	ldi	r24, 0xFD	; 253
    2dac:	90 e2       	ldi	r25, 0x20	; 32
    2dae:	8f 93       	push	r24
    2db0:	ce 01       	movw	r24, r28
    2db2:	8f 5f       	subi	r24, 0xFF	; 255
    2db4:	9d 4f       	sbci	r25, 0xFD	; 253
    2db6:	29 2f       	mov	r18, r25
    2db8:	2f 93       	push	r18
    2dba:	8f 93       	push	r24
    2dbc:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2dc0:	8d b7       	in	r24, 0x3d	; 61
    2dc2:	9e b7       	in	r25, 0x3e	; 62
    2dc4:	08 96       	adiw	r24, 0x08	; 8
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	de bf       	out	0x3e, r29	; 62
	sprintf(s_packetCount, "%i", packetCount);
    2dca:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <packetCount>
    2dce:	90 91 3c 22 	lds	r25, 0x223C	; 0x80223c <packetCount+0x1>
    2dd2:	a0 91 3d 22 	lds	r26, 0x223D	; 0x80223d <packetCount+0x2>
    2dd6:	b0 91 3e 22 	lds	r27, 0x223E	; 0x80223e <packetCount+0x3>
    2dda:	2b 2f       	mov	r18, r27
    2ddc:	2f 93       	push	r18
    2dde:	2a 2f       	mov	r18, r26
    2de0:	2f 93       	push	r18
    2de2:	29 2f       	mov	r18, r25
    2de4:	2f 93       	push	r18
    2de6:	8f 93       	push	r24
    2de8:	8d ef       	ldi	r24, 0xFD	; 253
    2dea:	90 e2       	ldi	r25, 0x20	; 32
    2dec:	89 2f       	mov	r24, r25
    2dee:	8f 93       	push	r24
    2df0:	8d ef       	ldi	r24, 0xFD	; 253
    2df2:	90 e2       	ldi	r25, 0x20	; 32
    2df4:	8f 93       	push	r24
    2df6:	ce 01       	movw	r24, r28
    2df8:	8b 5e       	subi	r24, 0xEB	; 235
    2dfa:	9d 4f       	sbci	r25, 0xFD	; 253
    2dfc:	29 2f       	mov	r18, r25
    2dfe:	2f 93       	push	r18
    2e00:	8f 93       	push	r24
    2e02:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2e06:	ed b7       	in	r30, 0x3d	; 61
    2e08:	fe b7       	in	r31, 0x3e	; 62
    2e0a:	38 96       	adiw	r30, 0x08	; 8
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	de bf       	out	0x3e, r29	; 62
	sprintf(s_altitude, "%f", altitude);
    2e10:	80 91 3f 22 	lds	r24, 0x223F	; 0x80223f <altitude>
    2e14:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <altitude+0x1>
    2e18:	a0 91 41 22 	lds	r26, 0x2241	; 0x802241 <altitude+0x2>
    2e1c:	b0 91 42 22 	lds	r27, 0x2242	; 0x802242 <altitude+0x3>
    2e20:	2b 2f       	mov	r18, r27
    2e22:	2f 93       	push	r18
    2e24:	2a 2f       	mov	r18, r26
    2e26:	2f 93       	push	r18
    2e28:	29 2f       	mov	r18, r25
    2e2a:	2f 93       	push	r18
    2e2c:	8f 93       	push	r24
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	91 e2       	ldi	r25, 0x21	; 33
    2e32:	89 2f       	mov	r24, r25
    2e34:	8f 93       	push	r24
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	91 e2       	ldi	r25, 0x21	; 33
    2e3a:	8f 93       	push	r24
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	87 5d       	subi	r24, 0xD7	; 215
    2e40:	9d 4f       	sbci	r25, 0xFD	; 253
    2e42:	29 2f       	mov	r18, r25
    2e44:	2f 93       	push	r18
    2e46:	8f 93       	push	r24
    2e48:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2e4c:	8d b7       	in	r24, 0x3d	; 61
    2e4e:	9e b7       	in	r25, 0x3e	; 62
    2e50:	08 96       	adiw	r24, 0x08	; 8
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	de bf       	out	0x3e, r29	; 62
	sprintf(s_pressure, "%i",pressure);
    2e56:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <pressure>
    2e5a:	90 91 2a 22 	lds	r25, 0x222A	; 0x80222a <pressure+0x1>
    2e5e:	a0 91 2b 22 	lds	r26, 0x222B	; 0x80222b <pressure+0x2>
    2e62:	b0 91 2c 22 	lds	r27, 0x222C	; 0x80222c <pressure+0x3>
    2e66:	2b 2f       	mov	r18, r27
    2e68:	2f 93       	push	r18
    2e6a:	2a 2f       	mov	r18, r26
    2e6c:	2f 93       	push	r18
    2e6e:	29 2f       	mov	r18, r25
    2e70:	2f 93       	push	r18
    2e72:	8f 93       	push	r24
    2e74:	8d ef       	ldi	r24, 0xFD	; 253
    2e76:	90 e2       	ldi	r25, 0x20	; 32
    2e78:	89 2f       	mov	r24, r25
    2e7a:	8f 93       	push	r24
    2e7c:	8d ef       	ldi	r24, 0xFD	; 253
    2e7e:	90 e2       	ldi	r25, 0x20	; 32
    2e80:	8f 93       	push	r24
    2e82:	ce 01       	movw	r24, r28
    2e84:	83 5c       	subi	r24, 0xC3	; 195
    2e86:	9d 4f       	sbci	r25, 0xFD	; 253
    2e88:	29 2f       	mov	r18, r25
    2e8a:	2f 93       	push	r18
    2e8c:	8f 93       	push	r24
    2e8e:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2e92:	ed b7       	in	r30, 0x3d	; 61
    2e94:	fe b7       	in	r31, 0x3e	; 62
    2e96:	38 96       	adiw	r30, 0x08	; 8
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	de bf       	out	0x3e, r29	; 62
	sprintf(s_temp, "%f", temp);
    2e9c:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <temp>
    2ea0:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <temp+0x1>
    2ea4:	a0 91 1f 22 	lds	r26, 0x221F	; 0x80221f <temp+0x2>
    2ea8:	b0 91 20 22 	lds	r27, 0x2220	; 0x802220 <temp+0x3>
    2eac:	2b 2f       	mov	r18, r27
    2eae:	2f 93       	push	r18
    2eb0:	2a 2f       	mov	r18, r26
    2eb2:	2f 93       	push	r18
    2eb4:	29 2f       	mov	r18, r25
    2eb6:	2f 93       	push	r18
    2eb8:	8f 93       	push	r24
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	91 e2       	ldi	r25, 0x21	; 33
    2ebe:	89 2f       	mov	r24, r25
    2ec0:	8f 93       	push	r24
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	91 e2       	ldi	r25, 0x21	; 33
    2ec6:	8f 93       	push	r24
    2ec8:	ce 01       	movw	r24, r28
    2eca:	8f 5a       	subi	r24, 0xAF	; 175
    2ecc:	9d 4f       	sbci	r25, 0xFD	; 253
    2ece:	29 2f       	mov	r18, r25
    2ed0:	2f 93       	push	r18
    2ed2:	8f 93       	push	r24
    2ed4:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2ed8:	8d b7       	in	r24, 0x3d	; 61
    2eda:	9e b7       	in	r25, 0x3e	; 62
    2edc:	08 96       	adiw	r24, 0x08	; 8
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	de bf       	out	0x3e, r29	; 62
	sprintf(s_voltage, "%f", voltage);
    2ee2:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <voltage>
    2ee6:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <voltage+0x1>
    2eea:	a0 91 27 22 	lds	r26, 0x2227	; 0x802227 <voltage+0x2>
    2eee:	b0 91 28 22 	lds	r27, 0x2228	; 0x802228 <voltage+0x3>
    2ef2:	2b 2f       	mov	r18, r27
    2ef4:	2f 93       	push	r18
    2ef6:	2a 2f       	mov	r18, r26
    2ef8:	2f 93       	push	r18
    2efa:	29 2f       	mov	r18, r25
    2efc:	2f 93       	push	r18
    2efe:	8f 93       	push	r24
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	91 e2       	ldi	r25, 0x21	; 33
    2f04:	89 2f       	mov	r24, r25
    2f06:	8f 93       	push	r24
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	91 e2       	ldi	r25, 0x21	; 33
    2f0c:	8f 93       	push	r24
    2f0e:	ce 01       	movw	r24, r28
    2f10:	8b 59       	subi	r24, 0x9B	; 155
    2f12:	9d 4f       	sbci	r25, 0xFD	; 253
    2f14:	29 2f       	mov	r18, r25
    2f16:	2f 93       	push	r18
    2f18:	8f 93       	push	r24
    2f1a:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2f1e:	ed b7       	in	r30, 0x3d	; 61
    2f20:	fe b7       	in	r31, 0x3e	; 62
    2f22:	38 96       	adiw	r30, 0x08	; 8
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	de bf       	out	0x3e, r29	; 62
	sprintf(s_gpsTime, " ");
    2f28:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <usart_config.7021+0x112>
    2f2c:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <usart_config.7021+0x113>
    2f30:	ce 01       	movw	r24, r28
    2f32:	87 58       	subi	r24, 0x87	; 135
    2f34:	9d 4f       	sbci	r25, 0xFD	; 253
    2f36:	fc 01       	movw	r30, r24
    2f38:	20 83       	st	Z, r18
    2f3a:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLat, " ");
    2f3c:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <usart_config.7021+0x112>
    2f40:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <usart_config.7021+0x113>
    2f44:	ce 01       	movw	r24, r28
    2f46:	83 57       	subi	r24, 0x73	; 115
    2f48:	9d 4f       	sbci	r25, 0xFD	; 253
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	20 83       	st	Z, r18
    2f4e:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLong, " ");
    2f50:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <usart_config.7021+0x112>
    2f54:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <usart_config.7021+0x113>
    2f58:	ce 01       	movw	r24, r28
    2f5a:	8f 55       	subi	r24, 0x5F	; 95
    2f5c:	9d 4f       	sbci	r25, 0xFD	; 253
    2f5e:	fc 01       	movw	r30, r24
    2f60:	20 83       	st	Z, r18
    2f62:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsAlt, " ");
    2f64:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <usart_config.7021+0x112>
    2f68:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <usart_config.7021+0x113>
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	8b 54       	subi	r24, 0x4B	; 75
    2f70:	9d 4f       	sbci	r25, 0xFD	; 253
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 83       	st	Z, r18
    2f76:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsSats, " ");
    2f78:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <usart_config.7021+0x112>
    2f7c:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <usart_config.7021+0x113>
    2f80:	ce 01       	movw	r24, r28
    2f82:	87 53       	subi	r24, 0x37	; 55
    2f84:	9d 4f       	sbci	r25, 0xFD	; 253
    2f86:	fc 01       	movw	r30, r24
    2f88:	20 83       	st	Z, r18
    2f8a:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_pitch, "%f", pitch);
    2f8c:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <pitch>
    2f90:	90 91 bd 22 	lds	r25, 0x22BD	; 0x8022bd <pitch+0x1>
    2f94:	a0 91 be 22 	lds	r26, 0x22BE	; 0x8022be <pitch+0x2>
    2f98:	b0 91 bf 22 	lds	r27, 0x22BF	; 0x8022bf <pitch+0x3>
    2f9c:	2b 2f       	mov	r18, r27
    2f9e:	2f 93       	push	r18
    2fa0:	2a 2f       	mov	r18, r26
    2fa2:	2f 93       	push	r18
    2fa4:	29 2f       	mov	r18, r25
    2fa6:	2f 93       	push	r18
    2fa8:	8f 93       	push	r24
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	91 e2       	ldi	r25, 0x21	; 33
    2fae:	89 2f       	mov	r24, r25
    2fb0:	8f 93       	push	r24
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	91 e2       	ldi	r25, 0x21	; 33
    2fb6:	8f 93       	push	r24
    2fb8:	ce 01       	movw	r24, r28
    2fba:	83 52       	subi	r24, 0x23	; 35
    2fbc:	9d 4f       	sbci	r25, 0xFD	; 253
    2fbe:	29 2f       	mov	r18, r25
    2fc0:	2f 93       	push	r18
    2fc2:	8f 93       	push	r24
    2fc4:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    2fc8:	8d b7       	in	r24, 0x3d	; 61
    2fca:	9e b7       	in	r25, 0x3e	; 62
    2fcc:	08 96       	adiw	r24, 0x08	; 8
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	de bf       	out	0x3e, r29	; 62
	sprintf(s_roll, "%f", roll);
    2fd2:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <roll>
    2fd6:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <roll+0x1>
    2fda:	a0 91 c2 22 	lds	r26, 0x22C2	; 0x8022c2 <roll+0x2>
    2fde:	b0 91 c3 22 	lds	r27, 0x22C3	; 0x8022c3 <roll+0x3>
    2fe2:	2b 2f       	mov	r18, r27
    2fe4:	2f 93       	push	r18
    2fe6:	2a 2f       	mov	r18, r26
    2fe8:	2f 93       	push	r18
    2fea:	29 2f       	mov	r18, r25
    2fec:	2f 93       	push	r18
    2fee:	8f 93       	push	r24
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	91 e2       	ldi	r25, 0x21	; 33
    2ff4:	89 2f       	mov	r24, r25
    2ff6:	8f 93       	push	r24
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	91 e2       	ldi	r25, 0x21	; 33
    2ffc:	8f 93       	push	r24
    2ffe:	ce 01       	movw	r24, r28
    3000:	8f 50       	subi	r24, 0x0F	; 15
    3002:	9d 4f       	sbci	r25, 0xFD	; 253
    3004:	29 2f       	mov	r18, r25
    3006:	2f 93       	push	r18
    3008:	8f 93       	push	r24
    300a:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    300e:	ed b7       	in	r30, 0x3d	; 61
    3010:	fe b7       	in	r31, 0x3e	; 62
    3012:	38 96       	adiw	r30, 0x08	; 8
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	de bf       	out	0x3e, r29	; 62
	sprintf(s_spinRate, " ");
    3018:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <usart_config.7021+0x112>
    301c:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <usart_config.7021+0x113>
    3020:	ce 01       	movw	r24, r28
    3022:	8b 5f       	subi	r24, 0xFB	; 251
    3024:	9c 4f       	sbci	r25, 0xFC	; 252
    3026:	fc 01       	movw	r30, r24
    3028:	20 83       	st	Z, r18
    302a:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_flightState, "%i", flightState);
    302c:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <flightState>
    3030:	88 2f       	mov	r24, r24
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	29 2f       	mov	r18, r25
    3036:	2f 93       	push	r18
    3038:	8f 93       	push	r24
    303a:	8d ef       	ldi	r24, 0xFD	; 253
    303c:	90 e2       	ldi	r25, 0x20	; 32
    303e:	89 2f       	mov	r24, r25
    3040:	8f 93       	push	r24
    3042:	8d ef       	ldi	r24, 0xFD	; 253
    3044:	90 e2       	ldi	r25, 0x20	; 32
    3046:	8f 93       	push	r24
    3048:	ce 01       	movw	r24, r28
    304a:	87 5e       	subi	r24, 0xE7	; 231
    304c:	9c 4f       	sbci	r25, 0xFC	; 252
    304e:	29 2f       	mov	r18, r25
    3050:	2f 93       	push	r18
    3052:	8f 93       	push	r24
    3054:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
	sprintf(s_cardinalDir, "%f", heading);
    3064:	80 91 cc 24 	lds	r24, 0x24CC	; 0x8024cc <heading>
    3068:	90 91 cd 24 	lds	r25, 0x24CD	; 0x8024cd <heading+0x1>
    306c:	a0 91 ce 24 	lds	r26, 0x24CE	; 0x8024ce <heading+0x2>
    3070:	b0 91 cf 24 	lds	r27, 0x24CF	; 0x8024cf <heading+0x3>
    3074:	2b 2f       	mov	r18, r27
    3076:	2f 93       	push	r18
    3078:	2a 2f       	mov	r18, r26
    307a:	2f 93       	push	r18
    307c:	29 2f       	mov	r18, r25
    307e:	2f 93       	push	r18
    3080:	8f 93       	push	r24
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	91 e2       	ldi	r25, 0x21	; 33
    3086:	89 2f       	mov	r24, r25
    3088:	8f 93       	push	r24
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	91 e2       	ldi	r25, 0x21	; 33
    308e:	8f 93       	push	r24
    3090:	ce 01       	movw	r24, r28
    3092:	83 5d       	subi	r24, 0xD3	; 211
    3094:	9c 4f       	sbci	r25, 0xFC	; 252
    3096:	29 2f       	mov	r18, r25
    3098:	2f 93       	push	r18
    309a:	8f 93       	push	r24
    309c:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    30a0:	8d b7       	in	r24, 0x3d	; 61
    30a2:	9e b7       	in	r25, 0x3e	; 62
    30a4:	08 96       	adiw	r24, 0x08	; 8
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	de bf       	out	0x3e, r29	; 62
	
	
	sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n\0",
    30aa:	ce 01       	movw	r24, r28
    30ac:	83 5d       	subi	r24, 0xD3	; 211
    30ae:	9c 4f       	sbci	r25, 0xFC	; 252
    30b0:	29 2f       	mov	r18, r25
    30b2:	2f 93       	push	r18
    30b4:	8f 93       	push	r24
    30b6:	ce 01       	movw	r24, r28
    30b8:	87 5e       	subi	r24, 0xE7	; 231
    30ba:	9c 4f       	sbci	r25, 0xFC	; 252
    30bc:	29 2f       	mov	r18, r25
    30be:	2f 93       	push	r18
    30c0:	8f 93       	push	r24
    30c2:	ce 01       	movw	r24, r28
    30c4:	8b 5f       	subi	r24, 0xFB	; 251
    30c6:	9c 4f       	sbci	r25, 0xFC	; 252
    30c8:	29 2f       	mov	r18, r25
    30ca:	2f 93       	push	r18
    30cc:	8f 93       	push	r24
    30ce:	ce 01       	movw	r24, r28
    30d0:	8f 50       	subi	r24, 0x0F	; 15
    30d2:	9d 4f       	sbci	r25, 0xFD	; 253
    30d4:	29 2f       	mov	r18, r25
    30d6:	2f 93       	push	r18
    30d8:	8f 93       	push	r24
    30da:	ce 01       	movw	r24, r28
    30dc:	83 52       	subi	r24, 0x23	; 35
    30de:	9d 4f       	sbci	r25, 0xFD	; 253
    30e0:	29 2f       	mov	r18, r25
    30e2:	2f 93       	push	r18
    30e4:	8f 93       	push	r24
    30e6:	ce 01       	movw	r24, r28
    30e8:	87 53       	subi	r24, 0x37	; 55
    30ea:	9d 4f       	sbci	r25, 0xFD	; 253
    30ec:	29 2f       	mov	r18, r25
    30ee:	2f 93       	push	r18
    30f0:	8f 93       	push	r24
    30f2:	ce 01       	movw	r24, r28
    30f4:	8b 54       	subi	r24, 0x4B	; 75
    30f6:	9d 4f       	sbci	r25, 0xFD	; 253
    30f8:	29 2f       	mov	r18, r25
    30fa:	2f 93       	push	r18
    30fc:	8f 93       	push	r24
    30fe:	ce 01       	movw	r24, r28
    3100:	8f 55       	subi	r24, 0x5F	; 95
    3102:	9d 4f       	sbci	r25, 0xFD	; 253
    3104:	29 2f       	mov	r18, r25
    3106:	2f 93       	push	r18
    3108:	8f 93       	push	r24
    310a:	ce 01       	movw	r24, r28
    310c:	83 57       	subi	r24, 0x73	; 115
    310e:	9d 4f       	sbci	r25, 0xFD	; 253
    3110:	29 2f       	mov	r18, r25
    3112:	2f 93       	push	r18
    3114:	8f 93       	push	r24
    3116:	ce 01       	movw	r24, r28
    3118:	87 58       	subi	r24, 0x87	; 135
    311a:	9d 4f       	sbci	r25, 0xFD	; 253
    311c:	29 2f       	mov	r18, r25
    311e:	2f 93       	push	r18
    3120:	8f 93       	push	r24
    3122:	ce 01       	movw	r24, r28
    3124:	8b 59       	subi	r24, 0x9B	; 155
    3126:	9d 4f       	sbci	r25, 0xFD	; 253
    3128:	29 2f       	mov	r18, r25
    312a:	2f 93       	push	r18
    312c:	8f 93       	push	r24
    312e:	ce 01       	movw	r24, r28
    3130:	8f 5a       	subi	r24, 0xAF	; 175
    3132:	9d 4f       	sbci	r25, 0xFD	; 253
    3134:	29 2f       	mov	r18, r25
    3136:	2f 93       	push	r18
    3138:	8f 93       	push	r24
    313a:	ce 01       	movw	r24, r28
    313c:	83 5c       	subi	r24, 0xC3	; 195
    313e:	9d 4f       	sbci	r25, 0xFD	; 253
    3140:	29 2f       	mov	r18, r25
    3142:	2f 93       	push	r18
    3144:	8f 93       	push	r24
    3146:	ce 01       	movw	r24, r28
    3148:	87 5d       	subi	r24, 0xD7	; 215
    314a:	9d 4f       	sbci	r25, 0xFD	; 253
    314c:	29 2f       	mov	r18, r25
    314e:	2f 93       	push	r18
    3150:	8f 93       	push	r24
    3152:	ce 01       	movw	r24, r28
    3154:	8b 5e       	subi	r24, 0xEB	; 235
    3156:	9d 4f       	sbci	r25, 0xFD	; 253
    3158:	29 2f       	mov	r18, r25
    315a:	2f 93       	push	r18
    315c:	8f 93       	push	r24
    315e:	ce 01       	movw	r24, r28
    3160:	8f 5f       	subi	r24, 0xFF	; 255
    3162:	9d 4f       	sbci	r25, 0xFD	; 253
    3164:	29 2f       	mov	r18, r25
    3166:	2f 93       	push	r18
    3168:	8f 93       	push	r24
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	8f 93       	push	r24
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	8f 93       	push	r24
    3172:	83 e2       	ldi	r24, 0x23	; 35
    3174:	90 e2       	ldi	r25, 0x20	; 32
    3176:	89 2f       	mov	r24, r25
    3178:	8f 93       	push	r24
    317a:	83 e2       	ldi	r24, 0x23	; 35
    317c:	90 e2       	ldi	r25, 0x20	; 32
    317e:	8f 93       	push	r24
    3180:	ce 01       	movw	r24, r28
    3182:	03 96       	adiw	r24, 0x03	; 3
    3184:	29 2f       	mov	r18, r25
    3186:	2f 93       	push	r18
    3188:	8f 93       	push	r24
    318a:	0e 94 81 46 	call	0x8d02	; 0x8d02 <sprintf>
    318e:	ed b7       	in	r30, 0x3d	; 61
    3190:	fe b7       	in	r31, 0x3e	; 62
    3192:	b6 96       	adiw	r30, 0x26	; 38
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	de bf       	out	0x3e, r29	; 62
	s_roll,
	s_spinRate,
	s_flightState,
	s_cardinalDir);
	
	xbeeWrite(telemetryString);
    3198:	ce 01       	movw	r24, r28
    319a:	03 96       	adiw	r24, 0x03	; 3
    319c:	b0 dd       	rcall	.-1184   	; 0x2cfe <xbeeWrite>
}
    319e:	00 00       	nop
    31a0:	c0 5c       	subi	r28, 0xC0	; 192
    31a2:	dc 4f       	sbci	r29, 0xFC	; 252
    31a4:	cd bf       	out	0x3d, r28	; 61
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	08 95       	ret

000031ae <__vector_25>:


ISR(READ_INTURUPT)
{
    31ae:	1f 92       	push	r1
    31b0:	0f 92       	push	r0
    31b2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    31b6:	0f 92       	push	r0
    31b8:	11 24       	eor	r1, r1
    31ba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31be:	0f 92       	push	r0
    31c0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    31c4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31c8:	0f 92       	push	r0
    31ca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    31ce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31d2:	0f 92       	push	r0
    31d4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    31d8:	8f 93       	push	r24
    31da:	9f 93       	push	r25
    31dc:	ef 93       	push	r30
    31de:	ff 93       	push	r31
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    31e8:	80 ea       	ldi	r24, 0xA0	; 160
    31ea:	98 e0       	ldi	r25, 0x08	; 8
    31ec:	fc 01       	movw	r30, r24
    31ee:	80 81       	ld	r24, Z
    31f0:	80 93 95 27 	sts	0x2795, r24	; 0x802795 <XbeeRx>
    31f4:	00 00       	nop
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	ff 91       	pop	r31
    31fc:	ef 91       	pop	r30
    31fe:	9f 91       	pop	r25
    3200:	8f 91       	pop	r24
    3202:	0f 90       	pop	r0
    3204:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3208:	0f 90       	pop	r0
    320a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    320e:	0f 90       	pop	r0
    3210:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3214:	0f 90       	pop	r0
    3216:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    321a:	0f 90       	pop	r0
    321c:	1f 90       	pop	r1
    321e:	18 95       	reti

00003220 <rbu8_write>:
	rbu8_write(buffer, data, i);
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	27 97       	sbiw	r28, 0x07	; 7
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	8a 83       	std	Y+2, r24	; 0x02
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	6c 83       	std	Y+4, r22	; 0x04
    3234:	7d 83       	std	Y+5, r23	; 0x05
    3236:	4e 83       	std	Y+6, r20	; 0x06
    3238:	5f 83       	std	Y+7, r21	; 0x07
	for (uint8_t i = 0; i < length; i++)
    323a:	19 82       	std	Y+1, r1	; 0x01
    323c:	65 c0       	rjmp	.+202    	; 0x3308 <rbu8_write+0xe8>
	{
		buffer->buffer[buffer->head] = data[i]; // data can be not be access greater length-1
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	9b 81       	ldd	r25, Y+3	; 0x03
    3242:	fc 01       	movw	r30, r24
    3244:	26 81       	ldd	r18, Z+6	; 0x06
    3246:	37 81       	ldd	r19, Z+7	; 0x07
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	fc 01       	movw	r30, r24
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	82 0f       	add	r24, r18
    3254:	93 1f       	adc	r25, r19
    3256:	29 81       	ldd	r18, Y+1	; 0x01
    3258:	22 2f       	mov	r18, r18
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	4c 81       	ldd	r20, Y+4	; 0x04
    325e:	5d 81       	ldd	r21, Y+5	; 0x05
    3260:	24 0f       	add	r18, r20
    3262:	35 1f       	adc	r19, r21
    3264:	f9 01       	movw	r30, r18
    3266:	20 81       	ld	r18, Z
    3268:	fc 01       	movw	r30, r24
    326a:	20 83       	st	Z, r18
		buffer->head++;
    326c:	8a 81       	ldd	r24, Y+2	; 0x02
    326e:	9b 81       	ldd	r25, Y+3	; 0x03
    3270:	fc 01       	movw	r30, r24
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	9c 01       	movw	r18, r24
    3278:	2f 5f       	subi	r18, 0xFF	; 255
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	9b 81       	ldd	r25, Y+3	; 0x03
    3280:	fc 01       	movw	r30, r24
    3282:	22 83       	std	Z+2, r18	; 0x02
    3284:	33 83       	std	Z+3, r19	; 0x03
		
		if (buffer->head == buffer->array_length) //Next value to write to is beyond the end of the array
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	fc 01       	movw	r30, r24
    328c:	22 81       	ldd	r18, Z+2	; 0x02
    328e:	33 81       	ldd	r19, Z+3	; 0x03
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	fc 01       	movw	r30, r24
    3296:	80 81       	ld	r24, Z
    3298:	91 81       	ldd	r25, Z+1	; 0x01
    329a:	28 17       	cp	r18, r24
    329c:	39 07       	cpc	r19, r25
    329e:	29 f4       	brne	.+10     	; 0x32aa <rbu8_write+0x8a>
		{
			buffer->head = 0;
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	fc 01       	movw	r30, r24
    32a6:	12 82       	std	Z+2, r1	; 0x02
    32a8:	13 82       	std	Z+3, r1	; 0x03
		} // end if
		
		if (buffer->head == buffer->tail)
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	9b 81       	ldd	r25, Y+3	; 0x03
    32ae:	fc 01       	movw	r30, r24
    32b0:	22 81       	ldd	r18, Z+2	; 0x02
    32b2:	33 81       	ldd	r19, Z+3	; 0x03
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	fc 01       	movw	r30, r24
    32ba:	84 81       	ldd	r24, Z+4	; 0x04
    32bc:	95 81       	ldd	r25, Z+5	; 0x05
    32be:	28 17       	cp	r18, r24
    32c0:	39 07       	cpc	r19, r25
    32c2:	f9 f4       	brne	.+62     	; 0x3302 <rbu8_write+0xe2>
		{
			buffer->tail++;
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	9b 81       	ldd	r25, Y+3	; 0x03
    32c8:	fc 01       	movw	r30, r24
    32ca:	84 81       	ldd	r24, Z+4	; 0x04
    32cc:	95 81       	ldd	r25, Z+5	; 0x05
    32ce:	9c 01       	movw	r18, r24
    32d0:	2f 5f       	subi	r18, 0xFF	; 255
    32d2:	3f 4f       	sbci	r19, 0xFF	; 255
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	fc 01       	movw	r30, r24
    32da:	24 83       	std	Z+4, r18	; 0x04
    32dc:	35 83       	std	Z+5, r19	; 0x05
			
			if (buffer->tail == buffer->array_length){
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	fc 01       	movw	r30, r24
    32e4:	24 81       	ldd	r18, Z+4	; 0x04
    32e6:	35 81       	ldd	r19, Z+5	; 0x05
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	28 17       	cp	r18, r24
    32f4:	39 07       	cpc	r19, r25
    32f6:	29 f4       	brne	.+10     	; 0x3302 <rbu8_write+0xe2>
				buffer->tail = 0;
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	9b 81       	ldd	r25, Y+3	; 0x03
    32fc:	fc 01       	movw	r30, r24
    32fe:	14 82       	std	Z+4, r1	; 0x04
    3300:	15 82       	std	Z+5, r1	; 0x05
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
	for (uint8_t i = 0; i < length; i++)
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	8f 5f       	subi	r24, 0xFF	; 255
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	8e 81       	ldd	r24, Y+6	; 0x06
    3310:	9f 81       	ldd	r25, Y+7	; 0x07
    3312:	28 17       	cp	r18, r24
    3314:	39 07       	cpc	r19, r25
    3316:	08 f4       	brcc	.+2      	; 0x331a <rbu8_write+0xfa>
    3318:	92 cf       	rjmp	.-220    	; 0x323e <rbu8_write+0x1e>
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
			}// end if
		} // end if
	} // end for
} // end write_to_ring_buffer
    331a:	00 00       	nop
    331c:	27 96       	adiw	r28, 0x07	; 7
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	08 95       	ret

00003328 <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	00 d0       	rcall	.+0      	; 0x332e <rbu8_init+0x6>
    332e:	00 d0       	rcall	.+0      	; 0x3330 <rbu8_init+0x8>
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	6b 83       	std	Y+3, r22	; 0x03
    333a:	7c 83       	std	Y+4, r23	; 0x04
    333c:	4d 83       	std	Y+5, r20	; 0x05
    333e:	5e 83       	std	Y+6, r21	; 0x06
	buffer->head = 0; //Beginning of array
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	9a 81       	ldd	r25, Y+2	; 0x02
    3344:	fc 01       	movw	r30, r24
    3346:	12 82       	std	Z+2, r1	; 0x02
    3348:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	fc 01       	movw	r30, r24
    3350:	14 82       	std	Z+4, r1	; 0x04
    3352:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	2b 81       	ldd	r18, Y+3	; 0x03
    335a:	3c 81       	ldd	r19, Y+4	; 0x04
    335c:	fc 01       	movw	r30, r24
    335e:	26 83       	std	Z+6, r18	; 0x06
    3360:	37 83       	std	Z+7, r19	; 0x07
	buffer->array_length = backing_array_length;
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	2d 81       	ldd	r18, Y+5	; 0x05
    3368:	3e 81       	ldd	r19, Y+6	; 0x06
    336a:	fc 01       	movw	r30, r24
    336c:	20 83       	st	Z, r18
    336e:	31 83       	std	Z+1, r19	; 0x01
}
    3370:	00 00       	nop
    3372:	26 96       	adiw	r28, 0x06	; 6
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	08 95       	ret

0000337e <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	2a 97       	sbiw	r28, 0x0a	; 10
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	8d 83       	std	Y+5, r24	; 0x05
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	6f 83       	std	Y+7, r22	; 0x07
    3392:	78 87       	std	Y+8, r23	; 0x08
    3394:	49 87       	std	Y+9, r20	; 0x09
    3396:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t index = buffer->tail;
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	fc 01       	movw	r30, r24
    339e:	84 81       	ldd	r24, Z+4	; 0x04
    33a0:	95 81       	ldd	r25, Z+5	; 0x05
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	9a 83       	std	Y+2, r25	; 0x02
	uint16_t i = 0;
    33a6:	1b 82       	std	Y+3, r1	; 0x03
    33a8:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    33aa:	1b 82       	std	Y+3, r1	; 0x03
    33ac:	1c 82       	std	Y+4, r1	; 0x04
    33ae:	2d c0       	rjmp	.+90     	; 0x340a <rbu8_read+0x8c>
	{

		dest[i] = buffer->buffer[index];
    33b0:	2f 81       	ldd	r18, Y+7	; 0x07
    33b2:	38 85       	ldd	r19, Y+8	; 0x08
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	82 0f       	add	r24, r18
    33ba:	93 1f       	adc	r25, r19
    33bc:	2d 81       	ldd	r18, Y+5	; 0x05
    33be:	3e 81       	ldd	r19, Y+6	; 0x06
    33c0:	f9 01       	movw	r30, r18
    33c2:	46 81       	ldd	r20, Z+6	; 0x06
    33c4:	57 81       	ldd	r21, Z+7	; 0x07
    33c6:	29 81       	ldd	r18, Y+1	; 0x01
    33c8:	3a 81       	ldd	r19, Y+2	; 0x02
    33ca:	24 0f       	add	r18, r20
    33cc:	35 1f       	adc	r19, r21
    33ce:	f9 01       	movw	r30, r18
    33d0:	20 81       	ld	r18, Z
    33d2:	fc 01       	movw	r30, r24
    33d4:	20 83       	st	Z, r18
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    33d6:	8d 81       	ldd	r24, Y+5	; 0x05
    33d8:	9e 81       	ldd	r25, Y+6	; 0x06
    33da:	fc 01       	movw	r30, r24
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	9c 01       	movw	r18, r24
    33e2:	21 50       	subi	r18, 0x01	; 1
    33e4:	31 09       	sbc	r19, r1
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ea:	28 17       	cp	r18, r24
    33ec:	39 07       	cpc	r19, r25
    33ee:	19 f4       	brne	.+6      	; 0x33f6 <rbu8_read+0x78>
		{
			index = 0;
    33f0:	19 82       	std	Y+1, r1	; 0x01
    33f2:	1a 82       	std	Y+2, r1	; 0x02
    33f4:	05 c0       	rjmp	.+10     	; 0x3400 <rbu8_read+0x82>
		}
		else
		{
			index++;
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	9a 83       	std	Y+2, r25	; 0x02
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	9c 81       	ldd	r25, Y+4	; 0x04
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	8b 83       	std	Y+3, r24	; 0x03
    3408:	9c 83       	std	Y+4, r25	; 0x04
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	8c d0       	rcall	.+280    	; 0x3528 <rbu8_length>
    3410:	9c 01       	movw	r18, r24
    3412:	89 85       	ldd	r24, Y+9	; 0x09
    3414:	9a 85       	ldd	r25, Y+10	; 0x0a
    3416:	28 17       	cp	r18, r24
    3418:	39 07       	cpc	r19, r25
    341a:	20 f4       	brcc	.+8      	; 0x3424 <rbu8_read+0xa6>
    341c:	8d 81       	ldd	r24, Y+5	; 0x05
    341e:	9e 81       	ldd	r25, Y+6	; 0x06
    3420:	83 d0       	rcall	.+262    	; 0x3528 <rbu8_length>
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <rbu8_read+0xaa>
    3424:	89 85       	ldd	r24, Y+9	; 0x09
    3426:	9a 85       	ldd	r25, Y+10	; 0x0a
    3428:	2b 81       	ldd	r18, Y+3	; 0x03
    342a:	3c 81       	ldd	r19, Y+4	; 0x04
    342c:	28 17       	cp	r18, r24
    342e:	39 07       	cpc	r19, r25
    3430:	08 f4       	brcc	.+2      	; 0x3434 <rbu8_read+0xb6>
    3432:	be cf       	rjmp	.-132    	; 0x33b0 <rbu8_read+0x32>
		{
			index++;
		}
		
	}
	if (length > rbu8_length(buffer))
    3434:	8d 81       	ldd	r24, Y+5	; 0x05
    3436:	9e 81       	ldd	r25, Y+6	; 0x06
    3438:	77 d0       	rcall	.+238    	; 0x3528 <rbu8_length>
    343a:	9c 01       	movw	r18, r24
    343c:	89 85       	ldd	r24, Y+9	; 0x09
    343e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3440:	28 17       	cp	r18, r24
    3442:	39 07       	cpc	r19, r25
    3444:	10 f4       	brcc	.+4      	; 0x344a <rbu8_read+0xcc>
		return 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	01 c0       	rjmp	.+2      	; 0x344c <rbu8_read+0xce>
	else
		return 0;
    344a:	80 e0       	ldi	r24, 0x00	; 0
}
    344c:	2a 96       	adiw	r28, 0x0a	; 10
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	08 95       	ret

00003458 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	00 d0       	rcall	.+0      	; 0x345e <rbu8_delete_oldest+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <rbu8_delete_oldest+0x8>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	8b 83       	std	Y+3, r24	; 0x03
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	6d 83       	std	Y+5, r22	; 0x05
    346a:	7e 83       	std	Y+6, r23	; 0x06
	uint16_t move_distance = min(length, rbu8_length(buffer));
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	9c 81       	ldd	r25, Y+4	; 0x04
    3470:	5b d0       	rcall	.+182    	; 0x3528 <rbu8_length>
    3472:	9c 01       	movw	r18, r24
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	82 17       	cp	r24, r18
    347a:	93 07       	cpc	r25, r19
    347c:	20 f0       	brcs	.+8      	; 0x3486 <rbu8_delete_oldest+0x2e>
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	9c 81       	ldd	r25, Y+4	; 0x04
    3482:	52 d0       	rcall	.+164    	; 0x3528 <rbu8_length>
    3484:	02 c0       	rjmp	.+4      	; 0x348a <rbu8_delete_oldest+0x32>
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	9e 81       	ldd	r25, Y+6	; 0x06
    348a:	89 83       	std	Y+1, r24	; 0x01
    348c:	9a 83       	std	Y+2, r25	; 0x02
	if (move_distance >= rbu8_length(buffer))
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	4a d0       	rcall	.+148    	; 0x3528 <rbu8_length>
    3494:	9c 01       	movw	r18, r24
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	82 17       	cp	r24, r18
    349c:	93 07       	cpc	r25, r19
    349e:	20 f1       	brcs	.+72     	; 0x34e8 <rbu8_delete_oldest+0x90>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	fc 01       	movw	r30, r24
    34a6:	24 81       	ldd	r18, Z+4	; 0x04
    34a8:	35 81       	ldd	r19, Z+5	; 0x05
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	9a 81       	ldd	r25, Y+2	; 0x02
    34ae:	a9 01       	movw	r20, r18
    34b0:	48 0f       	add	r20, r24
    34b2:	59 1f       	adc	r21, r25
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	fc 01       	movw	r30, r24
    34ba:	20 81       	ld	r18, Z
    34bc:	31 81       	ldd	r19, Z+1	; 0x01
    34be:	ca 01       	movw	r24, r20
    34c0:	b9 01       	movw	r22, r18
    34c2:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <__udivmodhi4>
    34c6:	9c 01       	movw	r18, r24
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	9c 81       	ldd	r25, Y+4	; 0x04
    34cc:	fc 01       	movw	r30, r24
    34ce:	24 83       	std	Z+4, r18	; 0x04
    34d0:	35 83       	std	Z+5, r19	; 0x05
		buffer->head = buffer->tail;
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	fc 01       	movw	r30, r24
    34d8:	24 81       	ldd	r18, Z+4	; 0x04
    34da:	35 81       	ldd	r19, Z+5	; 0x05
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	9c 81       	ldd	r25, Y+4	; 0x04
    34e0:	fc 01       	movw	r30, r24
    34e2:	22 83       	std	Z+2, r18	; 0x02
    34e4:	33 83       	std	Z+3, r19	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    34e6:	19 c0       	rjmp	.+50     	; 0x351a <rbu8_delete_oldest+0xc2>
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
		buffer->head = buffer->tail;
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	fc 01       	movw	r30, r24
    34ee:	24 81       	ldd	r18, Z+4	; 0x04
    34f0:	35 81       	ldd	r19, Z+5	; 0x05
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	a9 01       	movw	r20, r18
    34f8:	48 0f       	add	r20, r24
    34fa:	59 1f       	adc	r21, r25
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	fc 01       	movw	r30, r24
    3502:	20 81       	ld	r18, Z
    3504:	31 81       	ldd	r19, Z+1	; 0x01
    3506:	ca 01       	movw	r24, r20
    3508:	b9 01       	movw	r22, r18
    350a:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <__udivmodhi4>
    350e:	9c 01       	movw	r18, r24
    3510:	8b 81       	ldd	r24, Y+3	; 0x03
    3512:	9c 81       	ldd	r25, Y+4	; 0x04
    3514:	fc 01       	movw	r30, r24
    3516:	24 83       	std	Z+4, r18	; 0x04
    3518:	35 83       	std	Z+5, r19	; 0x05
	}
}
    351a:	00 00       	nop
    351c:	26 96       	adiw	r28, 0x06	; 6
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	08 95       	ret

00003528 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	1f 92       	push	r1
    352e:	1f 92       	push	r1
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	89 83       	std	Y+1, r24	; 0x01
    3536:	9a 83       	std	Y+2, r25	; 0x02
	if (buffer->head >= buffer->tail)
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	fc 01       	movw	r30, r24
    353e:	22 81       	ldd	r18, Z+2	; 0x02
    3540:	33 81       	ldd	r19, Z+3	; 0x03
    3542:	89 81       	ldd	r24, Y+1	; 0x01
    3544:	9a 81       	ldd	r25, Y+2	; 0x02
    3546:	fc 01       	movw	r30, r24
    3548:	84 81       	ldd	r24, Z+4	; 0x04
    354a:	95 81       	ldd	r25, Z+5	; 0x05
    354c:	28 17       	cp	r18, r24
    354e:	39 07       	cpc	r19, r25
    3550:	78 f0       	brcs	.+30     	; 0x3570 <rbu8_length+0x48>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	fc 01       	movw	r30, r24
    3558:	22 81       	ldd	r18, Z+2	; 0x02
    355a:	33 81       	ldd	r19, Z+3	; 0x03
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	fc 01       	movw	r30, r24
    3562:	84 81       	ldd	r24, Z+4	; 0x04
    3564:	95 81       	ldd	r25, Z+5	; 0x05
    3566:	a9 01       	movw	r20, r18
    3568:	48 1b       	sub	r20, r24
    356a:	59 0b       	sbc	r21, r25
    356c:	ca 01       	movw	r24, r20
    356e:	15 c0       	rjmp	.+42     	; 0x359a <rbu8_length+0x72>
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	fc 01       	movw	r30, r24
    3576:	20 81       	ld	r18, Z
    3578:	31 81       	ldd	r19, Z+1	; 0x01
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	9a 81       	ldd	r25, Y+2	; 0x02
    357e:	fc 01       	movw	r30, r24
    3580:	42 81       	ldd	r20, Z+2	; 0x02
    3582:	53 81       	ldd	r21, Z+3	; 0x03
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	9a 81       	ldd	r25, Y+2	; 0x02
    3588:	fc 01       	movw	r30, r24
    358a:	84 81       	ldd	r24, Z+4	; 0x04
    358c:	95 81       	ldd	r25, Z+5	; 0x05
    358e:	ba 01       	movw	r22, r20
    3590:	68 1b       	sub	r22, r24
    3592:	79 0b       	sbc	r23, r25
    3594:	cb 01       	movw	r24, r22
    3596:	82 0f       	add	r24, r18
    3598:	93 1f       	adc	r25, r19
	}
}
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	08 95       	ret

000035a4 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    35a4:	cf 93       	push	r28
    35a6:	df 93       	push	r29
    35a8:	1f 92       	push	r1
    35aa:	1f 92       	push	r1
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	9a 83       	std	Y+2, r25	; 0x02
	if (module == NULL) {
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	9a 81       	ldd	r25, Y+2	; 0x02
    35b8:	89 2b       	or	r24, r25
    35ba:	09 f4       	brne	.+2      	; 0x35be <sysclk_enable_peripheral_clock+0x1a>
    35bc:	5e c1       	rjmp	.+700    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	80 3c       	cpi	r24, 0xC0	; 192
    35c4:	91 05       	cpc	r25, r1
    35c6:	21 f4       	brne	.+8      	; 0x35d0 <sysclk_enable_peripheral_clock+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    35c8:	60 e1       	ldi	r22, 0x10	; 16
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	f8 d3       	rcall	.+2032   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    35ce:	55 c1       	rjmp	.+682    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &AES) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	9a 81       	ldd	r25, Y+2	; 0x02
    35d4:	80 34       	cpi	r24, 0x40	; 64
    35d6:	94 40       	sbci	r25, 0x04	; 4
    35d8:	21 f4       	brne	.+8      	; 0x35e2 <sysclk_enable_peripheral_clock+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    35da:	68 e0       	ldi	r22, 0x08	; 8
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	ef d3       	rcall	.+2014   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    35e0:	4c c1       	rjmp	.+664    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	9a 81       	ldd	r25, Y+2	; 0x02
    35e6:	81 15       	cp	r24, r1
    35e8:	94 40       	sbci	r25, 0x04	; 4
    35ea:	21 f4       	brne	.+8      	; 0x35f4 <sysclk_enable_peripheral_clock+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    35ec:	64 e0       	ldi	r22, 0x04	; 4
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	e6 d3       	rcall	.+1996   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    35f2:	43 c1       	rjmp	.+646    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	80 38       	cpi	r24, 0x80	; 128
    35fa:	91 40       	sbci	r25, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    35fc:	21 f4       	brne	.+8      	; 0x3606 <sysclk_enable_peripheral_clock+0x62>
    35fe:	62 e0       	ldi	r22, 0x02	; 2
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	dd d3       	rcall	.+1978   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    3604:	3a c1       	rjmp	.+628    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &EVSYS) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	81 15       	cp	r24, r1
    360c:	91 40       	sbci	r25, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    360e:	21 f4       	brne	.+8      	; 0x3618 <sysclk_enable_peripheral_clock+0x74>
    3610:	61 e0       	ldi	r22, 0x01	; 1
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	d4 d3       	rcall	.+1960   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    3616:	31 c1       	rjmp	.+610    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	80 38       	cpi	r24, 0x80	; 128
    361e:	93 40       	sbci	r25, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3620:	21 f4       	brne	.+8      	; 0x362a <sysclk_enable_peripheral_clock+0x86>
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	cb d3       	rcall	.+1942   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    3628:	28 c1       	rjmp	.+592    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &ACA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	80 39       	cpi	r24, 0x90	; 144
    3630:	93 40       	sbci	r25, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    3632:	21 f4       	brne	.+8      	; 0x363c <sysclk_enable_peripheral_clock+0x98>
    3634:	61 e0       	ldi	r22, 0x01	; 1
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	c2 d3       	rcall	.+1924   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    363a:	1f c1       	rjmp	.+574    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	9a 81       	ldd	r25, Y+2	; 0x02
    3640:	81 15       	cp	r24, r1
    3642:	92 40       	sbci	r25, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3644:	21 f4       	brne	.+8      	; 0x364e <sysclk_enable_peripheral_clock+0xaa>
    3646:	62 e0       	ldi	r22, 0x02	; 2
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	b9 d3       	rcall	.+1906   	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    364c:	16 c1       	rjmp	.+556    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	80 34       	cpi	r24, 0x40	; 64
    3654:	92 40       	sbci	r25, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    3656:	21 f4       	brne	.+8      	; 0x3660 <sysclk_enable_peripheral_clock+0xbc>
    3658:	62 e0       	ldi	r22, 0x02	; 2
    365a:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
	else {
		Assert(false);
	}
}
    365c:	b0 d3       	rcall	.+1888   	; 0x3dbe <sysclk_enable_module>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    365e:	0d c1       	rjmp	.+538    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	81 15       	cp	r24, r1
    3666:	93 40       	sbci	r25, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    3668:	21 f4       	brne	.+8      	; 0x3672 <sysclk_enable_peripheral_clock+0xce>
    366a:	64 e0       	ldi	r22, 0x04	; 4
    366c:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
	else {
		Assert(false);
	}
}
    366e:	a7 d3       	rcall	.+1870   	; 0x3dbe <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3670:	04 c1       	rjmp	.+520    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	80 32       	cpi	r24, 0x20	; 32
    3678:	93 40       	sbci	r25, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    367a:	21 f4       	brne	.+8      	; 0x3684 <sysclk_enable_peripheral_clock+0xe0>
    367c:	64 e0       	ldi	r22, 0x04	; 4
    367e:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
	else {
		Assert(false);
	}
}
    3680:	9e d3       	rcall	.+1852   	; 0x3dbe <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3682:	fb c0       	rjmp	.+502    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	9a 81       	ldd	r25, Y+2	; 0x02
    3688:	81 15       	cp	r24, r1
    368a:	98 40       	sbci	r25, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    368c:	21 f4       	brne	.+8      	; 0x3696 <sysclk_enable_peripheral_clock+0xf2>
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
	else {
		Assert(false);
	}
}
    3692:	95 d3       	rcall	.+1834   	; 0x3dbe <sysclk_enable_module>
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    3694:	f2 c0       	rjmp	.+484    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	9a 81       	ldd	r25, Y+2	; 0x02
    369a:	81 15       	cp	r24, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    369c:	99 40       	sbci	r25, 0x09	; 9
    369e:	21 f4       	brne	.+8      	; 0x36a8 <sysclk_enable_peripheral_clock+0x104>
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
	else {
		Assert(false);
	}
}
    36a4:	8c d3       	rcall	.+1816   	; 0x3dbe <sysclk_enable_module>
	else if (module == &TCD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    36a6:	e9 c0       	rjmp	.+466    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	81 15       	cp	r24, r1
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    36ae:	9a 40       	sbci	r25, 0x0A	; 10
    36b0:	21 f4       	brne	.+8      	; 0x36ba <sysclk_enable_peripheral_clock+0x116>
    36b2:	61 e0       	ldi	r22, 0x01	; 1
    36b4:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
	else {
		Assert(false);
	}
}
    36b6:	83 d3       	rcall	.+1798   	; 0x3dbe <sysclk_enable_module>
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    36b8:	e0 c0       	rjmp	.+448    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	81 15       	cp	r24, r1
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    36c0:	9b 40       	sbci	r25, 0x0B	; 11
    36c2:	21 f4       	brne	.+8      	; 0x36cc <sysclk_enable_peripheral_clock+0x128>
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
	else {
		Assert(false);
	}
}
    36c8:	7a d3       	rcall	.+1780   	; 0x3dbe <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    36ca:	d7 c0       	rjmp	.+430    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	80 34       	cpi	r24, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    36d2:	98 40       	sbci	r25, 0x08	; 8
    36d4:	21 f4       	brne	.+8      	; 0x36de <sysclk_enable_peripheral_clock+0x13a>
    36d6:	62 e0       	ldi	r22, 0x02	; 2
    36d8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
	else {
		Assert(false);
	}
}
    36da:	71 d3       	rcall	.+1762   	; 0x3dbe <sysclk_enable_module>
	else if (module == &TCC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    36dc:	ce c0       	rjmp	.+412    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	80 34       	cpi	r24, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    36e4:	99 40       	sbci	r25, 0x09	; 9
    36e6:	21 f4       	brne	.+8      	; 0x36f0 <sysclk_enable_peripheral_clock+0x14c>
    36e8:	62 e0       	ldi	r22, 0x02	; 2
    36ea:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    36ec:	68 d3       	rcall	.+1744   	; 0x3dbe <sysclk_enable_module>
    36ee:	c5 c0       	rjmp	.+394    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	80 34       	cpi	r24, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    36f6:	9a 40       	sbci	r25, 0x0A	; 10
    36f8:	21 f4       	brne	.+8      	; 0x3702 <sysclk_enable_peripheral_clock+0x15e>
    36fa:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
	else {
		Assert(false);
	}
}
    36fc:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    36fe:	5f d3       	rcall	.+1726   	; 0x3dbe <sysclk_enable_module>
    3700:	bc c0       	rjmp	.+376    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	80 34       	cpi	r24, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    3708:	9b 40       	sbci	r25, 0x0B	; 11
    370a:	21 f4       	brne	.+8      	; 0x3714 <sysclk_enable_peripheral_clock+0x170>
    370c:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
	else {
		Assert(false);
	}
}
    370e:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3710:	56 d3       	rcall	.+1708   	; 0x3dbe <sysclk_enable_module>
    3712:	b3 c0       	rjmp	.+358    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	80 39       	cpi	r24, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    371a:	98 40       	sbci	r25, 0x08	; 8
    371c:	21 f4       	brne	.+8      	; 0x3726 <sysclk_enable_peripheral_clock+0x182>
    371e:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
	else {
		Assert(false);
	}
}
    3720:	83 e0       	ldi	r24, 0x03	; 3
	else if (module == &HIRESC) {
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3722:	4d d3       	rcall	.+1690   	; 0x3dbe <sysclk_enable_module>
    3724:	aa c0       	rjmp	.+340    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	80 39       	cpi	r24, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    372c:	99 40       	sbci	r25, 0x09	; 9
    372e:	21 f4       	brne	.+8      	; 0x3738 <sysclk_enable_peripheral_clock+0x194>
    3730:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
	else {
		Assert(false);
	}
}
    3732:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &HIRESD) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3734:	44 d3       	rcall	.+1672   	; 0x3dbe <sysclk_enable_module>
    3736:	a1 c0       	rjmp	.+322    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    373c:	80 39       	cpi	r24, 0x90	; 144
    373e:	9a 40       	sbci	r25, 0x0A	; 10
    3740:	21 f4       	brne	.+8      	; 0x374a <sysclk_enable_peripheral_clock+0x1a6>
    3742:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
	else {
		Assert(false);
	}
}
    3744:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    3746:	3b d3       	rcall	.+1654   	; 0x3dbe <sysclk_enable_module>
    3748:	98 c0       	rjmp	.+304    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    374e:	80 39       	cpi	r24, 0x90	; 144
    3750:	9b 40       	sbci	r25, 0x0B	; 11
    3752:	21 f4       	brne	.+8      	; 0x375c <sysclk_enable_peripheral_clock+0x1b8>
    3754:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
	else {
		Assert(false);
	}
}
    3756:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3758:	32 d3       	rcall	.+1636   	; 0x3dbe <sysclk_enable_module>
    375a:	8f c0       	rjmp	.+286    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3760:	80 3c       	cpi	r24, 0xC0	; 192
    3762:	98 40       	sbci	r25, 0x08	; 8
    3764:	21 f4       	brne	.+8      	; 0x376e <sysclk_enable_peripheral_clock+0x1ca>
    3766:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
	else {
		Assert(false);
	}
}
    3768:	83 e0       	ldi	r24, 0x03	; 3
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    376a:	29 d3       	rcall	.+1618   	; 0x3dbe <sysclk_enable_module>
    376c:	86 c0       	rjmp	.+268    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    3772:	80 3c       	cpi	r24, 0xC0	; 192
    3774:	99 40       	sbci	r25, 0x09	; 9
    3776:	21 f4       	brne	.+8      	; 0x3780 <sysclk_enable_peripheral_clock+0x1dc>
    3778:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
	else {
		Assert(false);
	}
}
    377a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    377c:	20 d3       	rcall	.+1600   	; 0x3dbe <sysclk_enable_module>
    377e:	7d c0       	rjmp	.+250    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    3784:	80 3c       	cpi	r24, 0xC0	; 192
    3786:	9a 40       	sbci	r25, 0x0A	; 10
    3788:	21 f4       	brne	.+8      	; 0x3792 <sysclk_enable_peripheral_clock+0x1ee>
    378a:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    378c:	85 e0       	ldi	r24, 0x05	; 5
    378e:	17 d3       	rcall	.+1582   	; 0x3dbe <sysclk_enable_module>
    3790:	74 c0       	rjmp	.+232    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    3796:	80 3c       	cpi	r24, 0xC0	; 192
    3798:	9b 40       	sbci	r25, 0x0B	; 11
    379a:	21 f4       	brne	.+8      	; 0x37a4 <sysclk_enable_peripheral_clock+0x200>
	}
#endif
	else {
		Assert(false);
	}
}
    379c:	68 e0       	ldi	r22, 0x08	; 8
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    379e:	86 e0       	ldi	r24, 0x06	; 6
    37a0:	0e d3       	rcall	.+1564   	; 0x3dbe <sysclk_enable_module>
    37a2:	6b c0       	rjmp	.+214    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    37a8:	80 3a       	cpi	r24, 0xA0	; 160
    37aa:	98 40       	sbci	r25, 0x08	; 8
    37ac:	21 f4       	brne	.+8      	; 0x37b6 <sysclk_enable_peripheral_clock+0x212>
	}
#endif
	else {
		Assert(false);
	}
}
    37ae:	60 e1       	ldi	r22, 0x10	; 16
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	05 d3       	rcall	.+1546   	; 0x3dbe <sysclk_enable_module>
    37b4:	62 c0       	rjmp	.+196    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    37ba:	80 3a       	cpi	r24, 0xA0	; 160
    37bc:	99 40       	sbci	r25, 0x09	; 9
    37be:	21 f4       	brne	.+8      	; 0x37c8 <sysclk_enable_peripheral_clock+0x224>
	}
#endif
	else {
		Assert(false);
	}
}
    37c0:	60 e1       	ldi	r22, 0x10	; 16
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    37c2:	84 e0       	ldi	r24, 0x04	; 4
    37c4:	fc d2       	rcall	.+1528   	; 0x3dbe <sysclk_enable_module>
    37c6:	59 c0       	rjmp	.+178    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    37cc:	80 3a       	cpi	r24, 0xA0	; 160
    37ce:	9a 40       	sbci	r25, 0x0A	; 10
    37d0:	21 f4       	brne	.+8      	; 0x37da <sysclk_enable_peripheral_clock+0x236>
	}
#endif
	else {
		Assert(false);
	}
}
    37d2:	60 e1       	ldi	r22, 0x10	; 16
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    37d4:	85 e0       	ldi	r24, 0x05	; 5
    37d6:	f3 d2       	rcall	.+1510   	; 0x3dbe <sysclk_enable_module>
    37d8:	50 c0       	rjmp	.+160    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    37da:	89 81       	ldd	r24, Y+1	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	80 3a       	cpi	r24, 0xA0	; 160
    37e0:	9b 40       	sbci	r25, 0x0B	; 11
    37e2:	21 f4       	brne	.+8      	; 0x37ec <sysclk_enable_peripheral_clock+0x248>
	}
#endif
	else {
		Assert(false);
	}
}
    37e4:	60 e1       	ldi	r22, 0x10	; 16
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    37e6:	86 e0       	ldi	r24, 0x06	; 6
    37e8:	ea d2       	rcall	.+1492   	; 0x3dbe <sysclk_enable_module>
    37ea:	47 c0       	rjmp	.+142    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	80 3b       	cpi	r24, 0xB0	; 176
    37f2:	98 40       	sbci	r25, 0x08	; 8
    37f4:	21 f4       	brne	.+8      	; 0x37fe <sysclk_enable_peripheral_clock+0x25a>
	}
#endif
	else {
		Assert(false);
	}
}
    37f6:	60 e2       	ldi	r22, 0x20	; 32
	else if (module == &USARTC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    37f8:	83 e0       	ldi	r24, 0x03	; 3
    37fa:	e1 d2       	rcall	.+1474   	; 0x3dbe <sysclk_enable_module>
    37fc:	3e c0       	rjmp	.+124    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	80 3b       	cpi	r24, 0xB0	; 176
    3804:	99 40       	sbci	r25, 0x09	; 9
    3806:	21 f4       	brne	.+8      	; 0x3810 <sysclk_enable_peripheral_clock+0x26c>
	}
#endif
	else {
		Assert(false);
	}
}
    3808:	60 e2       	ldi	r22, 0x20	; 32
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    380a:	84 e0       	ldi	r24, 0x04	; 4
    380c:	d8 d2       	rcall	.+1456   	; 0x3dbe <sysclk_enable_module>
    380e:	35 c0       	rjmp	.+106    	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3810:	89 81       	ldd	r24, Y+1	; 0x01
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	80 3b       	cpi	r24, 0xB0	; 176
    3816:	9a 40       	sbci	r25, 0x0A	; 10
    3818:	21 f4       	brne	.+8      	; 0x3822 <sysclk_enable_peripheral_clock+0x27e>
	}
#endif
	else {
		Assert(false);
	}
}
    381a:	60 e2       	ldi	r22, 0x20	; 32
	else if (module == &USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    381c:	85 e0       	ldi	r24, 0x05	; 5
    381e:	cf d2       	rcall	.+1438   	; 0x3dbe <sysclk_enable_module>
    3820:	2c c0       	rjmp	.+88     	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3822:	89 81       	ldd	r24, Y+1	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	80 3b       	cpi	r24, 0xB0	; 176
    3828:	9b 40       	sbci	r25, 0x0B	; 11
    382a:	21 f4       	brne	.+8      	; 0x3834 <sysclk_enable_peripheral_clock+0x290>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    382c:	60 e2       	ldi	r22, 0x20	; 32
    382e:	86 e0       	ldi	r24, 0x06	; 6
    3830:	c6 d2       	rcall	.+1420   	; 0x3dbe <sysclk_enable_module>
    3832:	23 c0       	rjmp	.+70     	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3834:	89 81       	ldd	r24, Y+1	; 0x01
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3836:	9a 81       	ldd	r25, Y+2	; 0x02
    3838:	80 38       	cpi	r24, 0x80	; 128
    383a:	94 40       	sbci	r25, 0x04	; 4
    383c:	21 f4       	brne	.+8      	; 0x3846 <sysclk_enable_peripheral_clock+0x2a2>
	}
#endif
	else {
		Assert(false);
	}
}
    383e:	60 e4       	ldi	r22, 0x40	; 64
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    3840:	83 e0       	ldi	r24, 0x03	; 3
    3842:	bd d2       	rcall	.+1402   	; 0x3dbe <sysclk_enable_module>
    3844:	1a c0       	rjmp	.+52     	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    384a:	80 39       	cpi	r24, 0x90	; 144
    384c:	94 40       	sbci	r25, 0x04	; 4
    384e:	21 f4       	brne	.+8      	; 0x3858 <sysclk_enable_peripheral_clock+0x2b4>
    3850:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
	else {
		Assert(false);
	}
}
    3852:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3854:	b4 d2       	rcall	.+1384   	; 0x3dbe <sysclk_enable_module>
    3856:	11 c0       	rjmp	.+34     	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	80 3a       	cpi	r24, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    385e:	94 40       	sbci	r25, 0x04	; 4
    3860:	21 f4       	brne	.+8      	; 0x386a <sysclk_enable_peripheral_clock+0x2c6>
    3862:	60 e4       	ldi	r22, 0x40	; 64
    3864:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
	else {
		Assert(false);
	}
}
    3866:	ab d2       	rcall	.+1366   	; 0x3dbe <sysclk_enable_module>
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    3868:	08 c0       	rjmp	.+16     	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	9a 81       	ldd	r25, Y+2	; 0x02
    386e:	80 3b       	cpi	r24, 0xB0	; 176
    3870:	94 40       	sbci	r25, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    3872:	19 f4       	brne	.+6      	; 0x387a <sysclk_enable_peripheral_clock+0x2d6>
    3874:	60 e4       	ldi	r22, 0x40	; 64
    3876:	86 e0       	ldi	r24, 0x06	; 6
    3878:	a2 d2       	rcall	.+1348   	; 0x3dbe <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    387a:	00 00       	nop
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	2a 97       	sbiw	r28, 0x0a	; 10
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	8a 87       	std	Y+10, r24	; 0x0a
    3896:	8a 85       	ldd	r24, Y+10	; 0x0a
    3898:	89 83       	std	Y+1, r24	; 0x01
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	8a 83       	std	Y+2, r24	; 0x02
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	8b 83       	std	Y+3, r24	; 0x03
    38a2:	8b 81       	ldd	r24, Y+3	; 0x03
    38a4:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    38a6:	8c 81       	ldd	r24, Y+4	; 0x04
    38a8:	86 95       	lsr	r24
    38aa:	86 95       	lsr	r24
    38ac:	86 95       	lsr	r24
    38ae:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    38b0:	8d 81       	ldd	r24, Y+5	; 0x05
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	82 95       	swap	r24
    38bc:	92 95       	swap	r25
    38be:	90 7f       	andi	r25, 0xF0	; 240
    38c0:	98 27       	eor	r25, r24
    38c2:	80 7f       	andi	r24, 0xF0	; 240
    38c4:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    38c6:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
    38c8:	8e 83       	std	Y+6, r24	; 0x06
    38ca:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	88 23       	and	r24, r24
    38d0:	a9 f0       	breq	.+42     	; 0x38fc <ioport_set_pin_high+0x76>
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    38d6:	88 85       	ldd	r24, Y+8	; 0x08
    38d8:	88 2f       	mov	r24, r24
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9c 01       	movw	r18, r24
    38de:	27 70       	andi	r18, 0x07	; 7
    38e0:	33 27       	eor	r19, r19
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <ioport_set_pin_high+0x66>
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	2a 95       	dec	r18
    38ee:	e2 f7       	brpl	.-8      	; 0x38e8 <ioport_set_pin_high+0x62>
    38f0:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    38f2:	8e 81       	ldd	r24, Y+6	; 0x06
    38f4:	9f 81       	ldd	r25, Y+7	; 0x07
    38f6:	fc 01       	movw	r30, r24
    38f8:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, true);
}
    38fa:	14 c0       	rjmp	.+40     	; 0x3924 <ioport_set_pin_high+0x9e>
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3900:	89 85       	ldd	r24, Y+9	; 0x09
    3902:	88 2f       	mov	r24, r24
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	9c 01       	movw	r18, r24
    3908:	27 70       	andi	r18, 0x07	; 7
    390a:	33 27       	eor	r19, r19
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <ioport_set_pin_high+0x90>
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	2a 95       	dec	r18
    3918:	e2 f7       	brpl	.-8      	; 0x3912 <ioport_set_pin_high+0x8c>
    391a:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	9f 81       	ldd	r25, Y+7	; 0x07
    3920:	fc 01       	movw	r30, r24
    3922:	26 83       	std	Z+6, r18	; 0x06
    3924:	00 00       	nop
    3926:	2a 96       	adiw	r28, 0x0a	; 10
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	08 95       	ret

00003932 <usart_serial_init>:
 * \retval true if the initialization was successful
 * \retval false if initialization failed (error in baud rate calculation)
 */
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	2b 97       	sbiw	r28, 0x0b	; 11
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	88 87       	std	Y+8, r24	; 0x08
    3942:	99 87       	std	Y+9, r25	; 0x09
    3944:	6a 87       	std	Y+10, r22	; 0x0a
    3946:	7b 87       	std	Y+11, r23	; 0x0b
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3948:	8a 85       	ldd	r24, Y+10	; 0x0a
    394a:	9b 85       	ldd	r25, Y+11	; 0x0b
    394c:	fc 01       	movw	r30, r24
    394e:	84 81       	ldd	r24, Z+4	; 0x04
    3950:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3952:	8a 85       	ldd	r24, Y+10	; 0x0a
    3954:	9b 85       	ldd	r25, Y+11	; 0x0b
    3956:	fc 01       	movw	r30, r24
    3958:	85 81       	ldd	r24, Z+5	; 0x05
    395a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    395c:	8a 85       	ldd	r24, Y+10	; 0x0a
    395e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3960:	fc 01       	movw	r30, r24
    3962:	86 81       	ldd	r24, Z+6	; 0x06
    3964:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    3966:	8a 85       	ldd	r24, Y+10	; 0x0a
    3968:	9b 85       	ldd	r25, Y+11	; 0x0b
    396a:	fc 01       	movw	r30, r24
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	a2 81       	ldd	r26, Z+2	; 0x02
    3972:	b3 81       	ldd	r27, Z+3	; 0x03
    3974:	89 83       	std	Y+1, r24	; 0x01
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	ab 83       	std	Y+3, r26	; 0x03
    397a:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    397c:	88 85       	ldd	r24, Y+8	; 0x08
    397e:	99 85       	ldd	r25, Y+9	; 0x09
    3980:	80 3a       	cpi	r24, 0xA0	; 160
    3982:	98 40       	sbci	r25, 0x08	; 8
    3984:	19 f4       	brne	.+6      	; 0x398c <usart_serial_init+0x5a>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    3986:	60 e1       	ldi	r22, 0x10	; 16
    3988:	83 e0       	ldi	r24, 0x03	; 3
    398a:	19 d2       	rcall	.+1074   	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    398c:	88 85       	ldd	r24, Y+8	; 0x08
    398e:	99 85       	ldd	r25, Y+9	; 0x09
    3990:	80 3b       	cpi	r24, 0xB0	; 176
    3992:	98 40       	sbci	r25, 0x08	; 8
    3994:	19 f4       	brne	.+6      	; 0x399c <usart_serial_init+0x6a>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    3996:	60 e2       	ldi	r22, 0x20	; 32
    3998:	83 e0       	ldi	r24, 0x03	; 3
    399a:	11 d2       	rcall	.+1058   	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    399c:	88 85       	ldd	r24, Y+8	; 0x08
    399e:	99 85       	ldd	r25, Y+9	; 0x09
    39a0:	80 3a       	cpi	r24, 0xA0	; 160
    39a2:	99 40       	sbci	r25, 0x09	; 9
    39a4:	19 f4       	brne	.+6      	; 0x39ac <usart_serial_init+0x7a>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    39a6:	60 e1       	ldi	r22, 0x10	; 16
    39a8:	84 e0       	ldi	r24, 0x04	; 4
    39aa:	09 d2       	rcall	.+1042   	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    39ac:	88 85       	ldd	r24, Y+8	; 0x08
    39ae:	99 85       	ldd	r25, Y+9	; 0x09
    39b0:	80 3b       	cpi	r24, 0xB0	; 176
    39b2:	99 40       	sbci	r25, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    39b4:	19 f4       	brne	.+6      	; 0x39bc <usart_serial_init+0x8a>
    39b6:	60 e2       	ldi	r22, 0x20	; 32
    39b8:	84 e0       	ldi	r24, 0x04	; 4
    39ba:	01 d2       	rcall	.+1026   	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    39bc:	88 85       	ldd	r24, Y+8	; 0x08
    39be:	99 85       	ldd	r25, Y+9	; 0x09
    39c0:	80 3a       	cpi	r24, 0xA0	; 160
    39c2:	9a 40       	sbci	r25, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    39c4:	19 f4       	brne	.+6      	; 0x39cc <usart_serial_init+0x9a>
    39c6:	60 e1       	ldi	r22, 0x10	; 16
    39c8:	85 e0       	ldi	r24, 0x05	; 5
    39ca:	f9 d1       	rcall	.+1010   	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
    39cc:	88 85       	ldd	r24, Y+8	; 0x08
    39ce:	99 85       	ldd	r25, Y+9	; 0x09
    39d0:	80 3b       	cpi	r24, 0xB0	; 176
    39d2:	9a 40       	sbci	r25, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
    39d4:	19 f4       	brne	.+6      	; 0x39dc <usart_serial_init+0xaa>
    39d6:	60 e2       	ldi	r22, 0x20	; 32
    39d8:	85 e0       	ldi	r24, 0x05	; 5
    39da:	f1 d1       	rcall	.+994    	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    39dc:	88 85       	ldd	r24, Y+8	; 0x08
    39de:	99 85       	ldd	r25, Y+9	; 0x09
    39e0:	80 3a       	cpi	r24, 0xA0	; 160
    39e2:	9b 40       	sbci	r25, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    39e4:	19 f4       	brne	.+6      	; 0x39ec <usart_serial_init+0xba>
    39e6:	60 e1       	ldi	r22, 0x10	; 16
    39e8:	86 e0       	ldi	r24, 0x06	; 6
    39ea:	e9 d1       	rcall	.+978    	; 0x3dbe <sysclk_enable_module>
	}
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
    39ec:	88 85       	ldd	r24, Y+8	; 0x08
    39ee:	99 85       	ldd	r25, Y+9	; 0x09
    39f0:	80 3b       	cpi	r24, 0xB0	; 176
    39f2:	9b 40       	sbci	r25, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
    39f4:	19 f4       	brne	.+6      	; 0x39fc <usart_serial_init+0xca>
    39f6:	60 e2       	ldi	r22, 0x20	; 32
    39f8:	86 e0       	ldi	r24, 0x06	; 6
    39fa:	e1 d1       	rcall	.+962    	; 0x3dbe <sysclk_enable_module>
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    39fc:	88 85       	ldd	r24, Y+8	; 0x08
    39fe:	99 85       	ldd	r25, Y+9	; 0x09
    3a00:	9e 01       	movw	r18, r28
    3a02:	2f 5f       	subi	r18, 0xFF	; 255
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
    3a06:	b9 01       	movw	r22, r18
    3a08:	0e 94 40 35 	call	0x6a80	; 0x6a80 <usart_init_rs232>
    3a0c:	88 23       	and	r24, r24
    3a0e:	11 f0       	breq	.+4      	; 0x3a14 <usart_serial_init+0xe2>
		return true;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	01 c0       	rjmp	.+2      	; 0x3a16 <usart_serial_init+0xe4>
	}
	else {
		return false;
    3a14:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3a16:	2b 96       	adiw	r28, 0x0b	; 11
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	de bf       	out	0x3e, r29	; 62
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <init_GPS_pins_and_usart>:
//#include "CommandParse.h"
//#include "tools/satellite_vectors.h"


void init_GPS_pins_and_usart(void)
{
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
	GPS_PORT.DIR |= 0b10000000;
    3a2a:	80 ea       	ldi	r24, 0xA0	; 160
    3a2c:	96 e0       	ldi	r25, 0x06	; 6
    3a2e:	20 ea       	ldi	r18, 0xA0	; 160
    3a30:	36 e0       	ldi	r19, 0x06	; 6
    3a32:	f9 01       	movw	r30, r18
    3a34:	20 81       	ld	r18, Z
    3a36:	20 68       	ori	r18, 0x80	; 128
    3a38:	fc 01       	movw	r30, r24
    3a3a:	20 83       	st	Z, r18
	GPS_PORT.DIR &= 0b10111111;
    3a3c:	80 ea       	ldi	r24, 0xA0	; 160
    3a3e:	96 e0       	ldi	r25, 0x06	; 6
    3a40:	20 ea       	ldi	r18, 0xA0	; 160
    3a42:	36 e0       	ldi	r19, 0x06	; 6
    3a44:	f9 01       	movw	r30, r18
    3a46:	20 81       	ld	r18, Z
    3a48:	2f 7b       	andi	r18, 0xBF	; 191
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	20 83       	st	Z, r18
	ioport_set_pin_high(GPS_SEND_PIN);
    3a4e:	8f e2       	ldi	r24, 0x2F	; 47
    3a50:	1a df       	rcall	.-460    	; 0x3886 <ioport_set_pin_high>
	// 		ioport_set_pin_low(GPS_CONFIG_PIN_16);
	// 	}
	
	
	//Configure USART
	sysclk_enable_peripheral_clock(&GPS_USART);
    3a52:	80 eb       	ldi	r24, 0xB0	; 176
    3a54:	9b e0       	ldi	r25, 0x0B	; 11
    3a56:	a6 dd       	rcall	.-1204   	; 0x35a4 <sysclk_enable_peripheral_clock>
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = 1
	};
	
	usart_serial_init(&GPS_USART, &options);
    3a58:	66 e0       	ldi	r22, 0x06	; 6
    3a5a:	70 e2       	ldi	r23, 0x20	; 32
    3a5c:	80 eb       	ldi	r24, 0xB0	; 176
    3a5e:	9b e0       	ldi	r25, 0x0B	; 11
    3a60:	68 df       	rcall	.-304    	; 0x3932 <usart_serial_init>
}
    3a62:	00 00       	nop
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	08 95       	ret

00003a6a <newOLogInit>:
#include "uart.h"
static uart_device openLog;


void newOLogInit()//initializes the openLog uart communication interface
{
    3a6a:	cf 93       	push	r28
    3a6c:	df 93       	push	r29
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	92 ec       	ldi	r25, 0xC2	; 194
    3a76:	a1 e0       	ldi	r26, 0x01	; 1
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <openLog+0x6>
    3a7e:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <openLog+0x7>
    3a82:	a0 93 b0 21 	sts	0x21B0, r26	; 0x8021b0 <openLog+0x8>
    3a86:	b0 93 b1 21 	sts	0x21B1, r27	; 0x8021b1 <openLog+0x9>
    openLog.Port=P_OPENLOG_PORT;
    3a8a:	80 e4       	ldi	r24, 0x40	; 64
    3a8c:	96 e0       	ldi	r25, 0x06	; 6
    3a8e:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <openLog>
    3a92:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <openLog+0x1>
	openLog.Usart=P_OPENLOG_UART;
    3a96:	80 ea       	ldi	r24, 0xA0	; 160
    3a98:	98 e0       	ldi	r25, 0x08	; 8
    3a9a:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <openLog+0x2>
    3a9e:	90 93 ab 21 	sts	0x21AB, r25	; 0x8021ab <openLog+0x3>
	openLog.tx=OPENLOG_TX_PIN;
    3aa2:	88 e0       	ldi	r24, 0x08	; 8
    3aa4:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <openLog+0x5>
	openLog.rx=OPENLOG_RX_PIN;
    3aa8:	84 e0       	ldi	r24, 0x04	; 4
    3aaa:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <openLog+0x4>
	uart_init(&openLog);//function that initializes uart
    3aae:	88 ea       	ldi	r24, 0xA8	; 168
    3ab0:	91 e2       	ldi	r25, 0x21	; 33
    3ab2:	0e 94 96 3a 	call	0x752c	; 0x752c <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n\0");
    3ab6:	83 e0       	ldi	r24, 0x03	; 3
    3ab8:	91 e2       	ldi	r25, 0x21	; 33
    3aba:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
}
    3abe:	00 00       	nop
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	08 95       	ret

00003ac6 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3ac6:	cf 93       	push	r28
    3ac8:	df 93       	push	r29
    3aca:	1f 92       	push	r1
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    3ad0:	8f e3       	ldi	r24, 0x3F	; 63
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	80 81       	ld	r24, Z
    3ad8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3ada:	f8 94       	cli
	return flags;
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ade:	0f 90       	pop	r0
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	08 95       	ret

00003ae6 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	1f 92       	push	r1
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    3af2:	8f e3       	ldi	r24, 0x3F	; 63
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	29 81       	ldd	r18, Y+1	; 0x01
    3af8:	fc 01       	movw	r30, r24
    3afa:	20 83       	st	Z, r18
}
    3afc:	00 00       	nop
    3afe:	0f 90       	pop	r0
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	08 95       	ret

00003b06 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	1f 92       	push	r1
    3b0c:	1f 92       	push	r1
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    3b14:	d8 df       	rcall	.-80     	; 0x3ac6 <cpu_irq_save>
    3b16:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    3b18:	80 e5       	ldi	r24, 0x50	; 80
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	20 e5       	ldi	r18, 0x50	; 80
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	f9 01       	movw	r30, r18
    3b22:	30 81       	ld	r19, Z
    3b24:	2a 81       	ldd	r18, Y+2	; 0x02
    3b26:	23 2b       	or	r18, r19
    3b28:	fc 01       	movw	r30, r24
    3b2a:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	db df       	rcall	.-74     	; 0x3ae6 <cpu_irq_restore>
}
    3b30:	00 00       	nop
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	08 95       	ret

00003b3c <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	1f 92       	push	r1
    3b42:	1f 92       	push	r1
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3b4a:	80 e5       	ldi	r24, 0x50	; 80
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	22 e0       	ldi	r18, 0x02	; 2
    3b50:	fc 01       	movw	r30, r24
    3b52:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    3b54:	b8 df       	rcall	.-144    	; 0x3ac6 <cpu_irq_save>
    3b56:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    3b58:	80 e5       	ldi	r24, 0x50	; 80
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	20 e5       	ldi	r18, 0x50	; 80
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	f9 01       	movw	r30, r18
    3b62:	30 81       	ld	r19, Z
    3b64:	2a 81       	ldd	r18, Y+2	; 0x02
    3b66:	23 2b       	or	r18, r19
    3b68:	fc 01       	movw	r30, r24
    3b6a:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	bb df       	rcall	.-138    	; 0x3ae6 <cpu_irq_restore>
}
    3b70:	00 00       	nop
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	08 95       	ret

00003b7c <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	1f 92       	push	r1
    3b82:	1f 92       	push	r1
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    3b8a:	9d df       	rcall	.-198    	; 0x3ac6 <cpu_irq_save>
    3b8c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    3b8e:	80 e5       	ldi	r24, 0x50	; 80
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	20 e5       	ldi	r18, 0x50	; 80
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	f9 01       	movw	r30, r18
    3b98:	20 81       	ld	r18, Z
    3b9a:	32 2f       	mov	r19, r18
    3b9c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b9e:	20 95       	com	r18
    3ba0:	23 23       	and	r18, r19
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9e df       	rcall	.-196    	; 0x3ae6 <cpu_irq_restore>
}
    3baa:	00 00       	nop
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	1f 92       	push	r1
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	88 30       	cpi	r24, 0x08	; 8
    3bc6:	19 f0       	breq	.+6      	; 0x3bce <osc_enable+0x18>
		osc_enable_internal(id);
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9d df       	rcall	.-198    	; 0x3b06 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	b5 df       	rcall	.-150    	; 0x3b3c <osc_enable_external>
	}
}
    3bd2:	00 00       	nop
    3bd4:	0f 90       	pop	r0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	08 95       	ret

00003bdc <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	1f 92       	push	r1
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3be8:	80 e5       	ldi	r24, 0x50	; 80
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	fc 01       	movw	r30, r24
    3bee:	91 81       	ldd	r25, Z+1	; 0x01
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	98 23       	and	r25, r24
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	99 23       	and	r25, r25
    3bf8:	09 f4       	brne	.+2      	; 0x3bfc <osc_is_ready+0x20>
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
}
    3bfc:	0f 90       	pop	r0
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	08 95       	ret

00003c04 <osc_user_calibration>:
 * \arg \c OSC_ID_RC2MHZ or \c OSC_ID_RC32MHZ.
 * \param calib The specific calibration value required:
 *
 */
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
    3c04:	cf 93       	push	r28
    3c06:	df 93       	push	r29
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <osc_user_calibration+0x6>
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	89 83       	std	Y+1, r24	; 0x01
    3c10:	6a 83       	std	Y+2, r22	; 0x02
    3c12:	7b 83       	std	Y+3, r23	; 0x03
	switch (id) {
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	88 2f       	mov	r24, r24
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	81 30       	cpi	r24, 0x01	; 1
    3c1c:	91 05       	cpc	r25, r1
    3c1e:	19 f0       	breq	.+6      	; 0x3c26 <osc_user_calibration+0x22>
    3c20:	02 97       	sbiw	r24, 0x02	; 2
    3c22:	81 f0       	breq	.+32     	; 0x3c44 <osc_user_calibration+0x40>
		break;
#endif

	default:
		Assert(false);
		break;
    3c24:	1e c0       	rjmp	.+60     	; 0x3c62 <osc_user_calibration+0x5e>
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
	switch (id) {
	case OSC_ID_RC2MHZ:
#if !XMEGA_E
		DFLLRC2M.CALA=LSB(calib);
    3c26:	88 e6       	ldi	r24, 0x68	; 104
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9e 01       	movw	r18, r28
    3c2c:	2e 5f       	subi	r18, 0xFE	; 254
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	f9 01       	movw	r30, r18
    3c32:	20 81       	ld	r18, Z
    3c34:	fc 01       	movw	r30, r24
    3c36:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC2M.CALB=MSB(calib);
    3c38:	88 e6       	ldi	r24, 0x68	; 104
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    3c3e:	fc 01       	movw	r30, r24
    3c40:	23 83       	std	Z+3, r18	; 0x03
#endif
		break;
    3c42:	0f c0       	rjmp	.+30     	; 0x3c62 <osc_user_calibration+0x5e>

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    3c44:	80 e6       	ldi	r24, 0x60	; 96
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9e 01       	movw	r18, r28
    3c4a:	2e 5f       	subi	r18, 0xFE	; 254
    3c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4e:	f9 01       	movw	r30, r18
    3c50:	20 81       	ld	r18, Z
    3c52:	fc 01       	movw	r30, r24
    3c54:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    3c56:	80 e6       	ldi	r24, 0x60	; 96
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	23 83       	std	Z+3, r18	; 0x03
		break;
    3c60:	00 00       	nop

	default:
		Assert(false);
		break;
	}
}
    3c62:	00 00       	nop
    3c64:	23 96       	adiw	r28, 0x03	; 3
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	08 95       	ret

00003c70 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	1f 92       	push	r1
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    3c7c:	00 00       	nop
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	ad df       	rcall	.-166    	; 0x3bdc <osc_is_ready>
    3c82:	98 2f       	mov	r25, r24
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	89 27       	eor	r24, r25
    3c88:	88 23       	and	r24, r24
    3c8a:	c9 f7       	brne	.-14     	; 0x3c7e <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    3c8c:	00 00       	nop
    3c8e:	0f 90       	pop	r0
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	08 95       	ret

00003c96 <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	1f 92       	push	r1
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	88 2f       	mov	r24, r24
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	8a 30       	cpi	r24, 0x0A	; 10
    3caa:	91 05       	cpc	r25, r1
    3cac:	a1 f0       	breq	.+40     	; 0x3cd6 <sysclk_rtcsrc_enable+0x40>
    3cae:	8b 30       	cpi	r24, 0x0B	; 11
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	34 f4       	brge	.+12     	; 0x3cc0 <sysclk_rtcsrc_enable+0x2a>
    3cb4:	82 30       	cpi	r24, 0x02	; 2
    3cb6:	91 05       	cpc	r25, r1
    3cb8:	71 f0       	breq	.+28     	; 0x3cd6 <sysclk_rtcsrc_enable+0x40>
    3cba:	04 97       	sbiw	r24, 0x04	; 4
    3cbc:	39 f0       	breq	.+14     	; 0x3ccc <sysclk_rtcsrc_enable+0x36>
    3cbe:	10 c0       	rjmp	.+32     	; 0x3ce0 <sysclk_rtcsrc_enable+0x4a>
    3cc0:	8c 30       	cpi	r24, 0x0C	; 12
    3cc2:	91 05       	cpc	r25, r1
    3cc4:	19 f0       	breq	.+6      	; 0x3ccc <sysclk_rtcsrc_enable+0x36>
    3cc6:	0e 97       	sbiw	r24, 0x0e	; 14
    3cc8:	31 f0       	breq	.+12     	; 0x3cd6 <sysclk_rtcsrc_enable+0x40>
    3cca:	0a c0       	rjmp	.+20     	; 0x3ce0 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    3ccc:	84 e0       	ldi	r24, 0x04	; 4
    3cce:	73 df       	rcall	.-282    	; 0x3bb6 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    3cd0:	84 e0       	ldi	r24, 0x04	; 4
    3cd2:	ce df       	rcall	.-100    	; 0x3c70 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    3cd4:	05 c0       	rjmp	.+10     	; 0x3ce0 <sysclk_rtcsrc_enable+0x4a>
    3cd6:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    3cd8:	6e df       	rcall	.-292    	; 0x3bb6 <osc_enable>
    3cda:	88 e0       	ldi	r24, 0x08	; 8
    3cdc:	c9 df       	rcall	.-110    	; 0x3c70 <osc_wait_ready>
		break;
    3cde:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    3ce0:	80 e4       	ldi	r24, 0x40	; 64
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	29 81       	ldd	r18, Y+1	; 0x01
    3ce6:	21 60       	ori	r18, 0x01	; 1
    3ce8:	fc 01       	movw	r30, r24
    3cea:	23 83       	std	Z+3, r18	; 0x03
}
    3cec:	00 00       	nop
    3cee:	0f 90       	pop	r0
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	08 95       	ret

00003cf6 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    3cf6:	cf 93       	push	r28
    3cf8:	df 93       	push	r29
    3cfa:	1f 92       	push	r1
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	88 2f       	mov	r24, r24
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	bc 01       	movw	r22, r24
    3d0a:	82 e0       	ldi	r24, 0x02	; 2
    3d0c:	20 d1       	rcall	.+576    	; 0x3f4e <nvm_read_byte>
}
    3d0e:	0f 90       	pop	r0
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	08 95       	ret

00003d16 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    3d16:	0f 93       	push	r16
    3d18:	1f 93       	push	r17
    3d1a:	cf 93       	push	r28
    3d1c:	df 93       	push	r29
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <sysclk_init+0xa>
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <sysclk_init+0xc>
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    3d26:	80 e7       	ldi	r24, 0x70	; 112
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    3d2c:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    3d2e:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    3d30:	1b 82       	std	Y+3, r1	; 0x03
    3d32:	0d c0       	rjmp	.+26     	; 0x3d4e <sysclk_init+0x38>
		*(reg++) = 0xff;
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	9a 81       	ldd	r25, Y+2	; 0x02
    3d38:	9c 01       	movw	r18, r24
    3d3a:	2f 5f       	subi	r18, 0xFF	; 255
    3d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3e:	29 83       	std	Y+1, r18	; 0x01
    3d40:	3a 83       	std	Y+2, r19	; 0x02
    3d42:	2f ef       	ldi	r18, 0xFF	; 255
    3d44:	fc 01       	movw	r30, r24
    3d46:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    3d48:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4a:	8f 5f       	subi	r24, 0xFF	; 255
    3d4c:	8b 83       	std	Y+3, r24	; 0x03
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	87 30       	cpi	r24, 0x07	; 7
    3d52:	80 f3       	brcs	.-32     	; 0x3d34 <sysclk_init+0x1e>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    3d54:	8e 01       	movw	r16, r28
    3d56:	0b 5f       	subi	r16, 0xFB	; 251
    3d58:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5a:	0f 5f       	subi	r16, 0xFF	; 255
    3d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5e:	8c e1       	ldi	r24, 0x1C	; 28
    3d60:	ca df       	rcall	.-108    	; 0x3cf6 <nvm_read_production_signature_row>
    3d62:	f8 01       	movw	r30, r16
    3d64:	80 83       	st	Z, r24
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    3d66:	8e 01       	movw	r16, r28
    3d68:	0b 5f       	subi	r16, 0xFB	; 251
    3d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6c:	8d e1       	ldi	r24, 0x1D	; 29
    3d6e:	c3 df       	rcall	.-122    	; 0x3cf6 <nvm_read_production_signature_row>
    3d70:	f8 01       	movw	r30, r16
    3d72:	80 83       	st	Z, r24
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    3d74:	8d 81       	ldd	r24, Y+5	; 0x05
    3d76:	9e 81       	ldd	r25, Y+6	; 0x06
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	21 f4       	brne	.+8      	; 0x3d84 <sysclk_init+0x6e>
		cal = 0x2340;
    3d7c:	80 e4       	ldi	r24, 0x40	; 64
    3d7e:	93 e2       	ldi	r25, 0x23	; 35
    3d80:	8d 83       	std	Y+5, r24	; 0x05
    3d82:	9e 83       	std	Y+6, r25	; 0x06
	}
	osc_user_calibration(OSC_ID_RC32MHZ,cal);
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	bc 01       	movw	r22, r24
    3d8a:	82 e0       	ldi	r24, 0x02	; 2
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    3d8c:	3b df       	rcall	.-394    	; 0x3c04 <osc_user_calibration>
    3d8e:	82 e0       	ldi	r24, 0x02	; 2
			osc_wait_ready(OSC_ID_RC32MHZ);
    3d90:	12 df       	rcall	.-476    	; 0x3bb6 <osc_enable>
    3d92:	82 e0       	ldi	r24, 0x02	; 2
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    3d94:	6d df       	rcall	.-294    	; 0x3c70 <osc_wait_ready>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    3d96:	00 00       	nop
    3d98:	61 e0       	ldi	r22, 0x01	; 1
    3d9a:	80 e4       	ldi	r24, 0x40	; 64
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    3d9e:	d1 d0       	rcall	.+418    	; 0x3f42 <ccp_write_io>
    3da0:	8c 81       	ldd	r24, Y+4	; 0x04
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    3da2:	88 23       	and	r24, r24
    3da4:	11 f4       	brne	.+4      	; 0x3daa <sysclk_init+0x94>
    3da6:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    3da8:	e9 de       	rcall	.-558    	; 0x3b7c <osc_disable>
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	74 df       	rcall	.-280    	; 0x3c96 <sysclk_rtcsrc_enable>
#endif
}
    3dae:	26 96       	adiw	r28, 0x06	; 6
    3db0:	cd bf       	out	0x3d, r28	; 61
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	08 95       	ret

00003dbe <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
    3dc2:	00 d0       	rcall	.+0      	; 0x3dc4 <sysclk_enable_module+0x6>
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	8a 83       	std	Y+2, r24	; 0x02
    3dca:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    3dcc:	7c de       	rcall	.-776    	; 0x3ac6 <cpu_irq_save>
    3dce:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	88 2f       	mov	r24, r24
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	80 59       	subi	r24, 0x90	; 144
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	2a 81       	ldd	r18, Y+2	; 0x02
    3ddc:	22 2f       	mov	r18, r18
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	20 59       	subi	r18, 0x90	; 144
    3de2:	3f 4f       	sbci	r19, 0xFF	; 255
    3de4:	f9 01       	movw	r30, r18
    3de6:	20 81       	ld	r18, Z
    3de8:	32 2f       	mov	r19, r18
    3dea:	2b 81       	ldd	r18, Y+3	; 0x03
    3dec:	20 95       	com	r18
    3dee:	23 23       	and	r18, r19
    3df0:	fc 01       	movw	r30, r24
    3df2:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	77 de       	rcall	.-786    	; 0x3ae6 <cpu_irq_restore>
}
    3df8:	00 00       	nop
    3dfa:	23 96       	adiw	r28, 0x03	; 3
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	de bf       	out	0x3e, r29	; 62
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	08 95       	ret

00003e06 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    3e06:	cf 93       	push	r28
    3e08:	df 93       	push	r29
    3e0a:	00 d0       	rcall	.+0      	; 0x3e0c <sysclk_disable_module+0x6>
    3e0c:	cd b7       	in	r28, 0x3d	; 61
    3e0e:	de b7       	in	r29, 0x3e	; 62
    3e10:	8a 83       	std	Y+2, r24	; 0x02
    3e12:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    3e14:	58 de       	rcall	.-848    	; 0x3ac6 <cpu_irq_save>
    3e16:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    3e18:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1a:	88 2f       	mov	r24, r24
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	80 59       	subi	r24, 0x90	; 144
    3e20:	9f 4f       	sbci	r25, 0xFF	; 255
    3e22:	2a 81       	ldd	r18, Y+2	; 0x02
    3e24:	22 2f       	mov	r18, r18
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	20 59       	subi	r18, 0x90	; 144
    3e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2c:	f9 01       	movw	r30, r18
    3e2e:	30 81       	ld	r19, Z
    3e30:	2b 81       	ldd	r18, Y+3	; 0x03
    3e32:	23 2b       	or	r18, r19
    3e34:	fc 01       	movw	r30, r24
    3e36:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	55 de       	rcall	.-854    	; 0x3ae6 <cpu_irq_restore>
}
    3e3c:	00 00       	nop
    3e3e:	23 96       	adiw	r28, 0x03	; 3
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	08 95       	ret

00003e4a <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <usart_serial_putchar+0x6>
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	9a 83       	std	Y+2, r25	; 0x02
    3e58:	6b 83       	std	Y+3, r22	; 0x03
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5e:	6b 81       	ldd	r22, Y+3	; 0x03
    3e60:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <usart_putchar>
    3e64:	23 96       	adiw	r28, 0x03	; 3
    3e66:	cd bf       	out	0x3d, r28	; 61
    3e68:	de bf       	out	0x3e, r29	; 62
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	08 95       	ret

00003e70 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    3e70:	cf 93       	push	r28
    3e72:	df 93       	push	r29
    3e74:	00 d0       	rcall	.+0      	; 0x3e76 <usart_serial_write_packet+0x6>
    3e76:	00 d0       	rcall	.+0      	; 0x3e78 <usart_serial_write_packet+0x8>
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	89 83       	std	Y+1, r24	; 0x01
    3e7e:	9a 83       	std	Y+2, r25	; 0x02
    3e80:	6b 83       	std	Y+3, r22	; 0x03
    3e82:	7c 83       	std	Y+4, r23	; 0x04
    3e84:	4d 83       	std	Y+5, r20	; 0x05
    3e86:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    3e88:	12 c0       	rjmp	.+36     	; 0x3eae <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    3e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8e:	fc 01       	movw	r30, r24
    3e90:	20 81       	ld	r18, Z
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	9a 81       	ldd	r25, Y+2	; 0x02
    3e96:	62 2f       	mov	r22, r18
    3e98:	d8 df       	rcall	.-80     	; 0x3e4a <usart_serial_putchar>
		len--;
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9e:	01 97       	sbiw	r24, 0x01	; 1
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    3ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea8:	01 96       	adiw	r24, 0x01	; 1
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
    3eac:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	89 2b       	or	r24, r25
    3eb4:	51 f7       	brne	.-44     	; 0x3e8a <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
}
    3eb8:	26 96       	adiw	r28, 0x06	; 6
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	08 95       	ret

00003ec4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	00 d0       	rcall	.+0      	; 0x3eca <_read+0x6>
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
    3ece:	8a 83       	std	Y+2, r24	; 0x02
    3ed0:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    3ed2:	20 91 9c 27 	lds	r18, 0x279C	; 0x80279c <ptr_get>
    3ed6:	30 91 9d 27 	lds	r19, 0x279D	; 0x80279d <ptr_get+0x1>
    3eda:	80 91 a0 27 	lds	r24, 0x27A0	; 0x8027a0 <stdio_base>
    3ede:	90 91 a1 27 	lds	r25, 0x27A1	; 0x8027a1 <stdio_base+0x1>
    3ee2:	ae 01       	movw	r20, r28
    3ee4:	4f 5f       	subi	r20, 0xFF	; 255
    3ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee8:	ba 01       	movw	r22, r20
    3eea:	f9 01       	movw	r30, r18
    3eec:	19 95       	eicall
	return c;
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	08 2e       	mov	r0, r24
    3ef2:	00 0c       	add	r0, r0
    3ef4:	99 0b       	sbc	r25, r25
}
    3ef6:	23 96       	adiw	r28, 0x03	; 3
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	08 95       	ret

00003f02 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <_write+0x6>
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	89 83       	std	Y+1, r24	; 0x01
    3f0e:	6a 83       	std	Y+2, r22	; 0x02
    3f10:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    3f12:	20 91 9e 27 	lds	r18, 0x279E	; 0x80279e <ptr_put>
    3f16:	30 91 9f 27 	lds	r19, 0x279F	; 0x80279f <ptr_put+0x1>
    3f1a:	80 91 a0 27 	lds	r24, 0x27A0	; 0x8027a0 <stdio_base>
    3f1e:	90 91 a1 27 	lds	r25, 0x27A1	; 0x8027a1 <stdio_base+0x1>
    3f22:	69 81       	ldd	r22, Y+1	; 0x01
    3f24:	f9 01       	movw	r30, r18
    3f26:	19 95       	eicall
    3f28:	99 23       	and	r25, r25
    3f2a:	1c f4       	brge	.+6      	; 0x3f32 <_write+0x30>
		return -1;
    3f2c:	8f ef       	ldi	r24, 0xFF	; 255
    3f2e:	9f ef       	ldi	r25, 0xFF	; 255
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <_write+0x34>
	}
	return 1;
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
}
    3f36:	23 96       	adiw	r28, 0x03	; 3
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	08 95       	ret

00003f42 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3f42:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3f44:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3f46:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3f48:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3f4a:	60 83       	st	Z, r22
	ret                             // Return to caller
    3f4c:	08 95       	ret

00003f4e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3f4e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3f52:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3f54:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3f56:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3f5a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3f5c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3f60:	08 95       	ret

00003f62 <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    3f62:	cf 93       	push	r28
    3f64:	df 93       	push	r29
    3f66:	1f 92       	push	r1
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	8f e3       	ldi	r24, 0x3F	; 63
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	fc 01       	movw	r30, r24
    3f72:	80 81       	ld	r24, Z
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	f8 94       	cli
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	0f 90       	pop	r0
    3f7c:	df 91       	pop	r29
    3f7e:	cf 91       	pop	r28
    3f80:	08 95       	ret

00003f82 <cpu_irq_restore>:
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	1f 92       	push	r1
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
    3f8c:	89 83       	std	Y+1, r24	; 0x01
    3f8e:	8f e3       	ldi	r24, 0x3F	; 63
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	29 81       	ldd	r18, Y+1	; 0x01
    3f94:	fc 01       	movw	r30, r24
    3f96:	20 83       	st	Z, r18
    3f98:	00 00       	nop
    3f9a:	0f 90       	pop	r0
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	08 95       	ret

00003fa2 <sleepmgr_lock_mode>:
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	1f 92       	push	r1
    3fa8:	1f 92       	push	r1
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	8a 83       	std	Y+2, r24	; 0x02
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	88 2f       	mov	r24, r24
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	8a 56       	subi	r24, 0x6A	; 106
    3fb8:	98 4d       	sbci	r25, 0xD8	; 216
    3fba:	fc 01       	movw	r30, r24
    3fbc:	80 81       	ld	r24, Z
    3fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <sleepmgr_lock_mode+0x22>
    3fc2:	ff cf       	rjmp	.-2      	; 0x3fc2 <sleepmgr_lock_mode+0x20>
    3fc4:	ce df       	rcall	.-100    	; 0x3f62 <cpu_irq_save>
    3fc6:	89 83       	std	Y+1, r24	; 0x01
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	88 2f       	mov	r24, r24
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	9c 01       	movw	r18, r24
    3fd0:	2a 56       	subi	r18, 0x6A	; 106
    3fd2:	38 4d       	sbci	r19, 0xD8	; 216
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	20 81       	ld	r18, Z
    3fd8:	2f 5f       	subi	r18, 0xFF	; 255
    3fda:	8a 56       	subi	r24, 0x6A	; 106
    3fdc:	98 4d       	sbci	r25, 0xD8	; 216
    3fde:	fc 01       	movw	r30, r24
    3fe0:	20 83       	st	Z, r18
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	ce df       	rcall	.-100    	; 0x3f82 <cpu_irq_restore>
    3fe6:	00 00       	nop
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	08 95       	ret

00003ff2 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3ffa:	64 e0       	ldi	r22, 0x04	; 4
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	df de       	rcall	.-578    	; 0x3dbe <sysclk_enable_module>
	RTC.PER = 0xffff;
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	94 e0       	ldi	r25, 0x04	; 4
    4004:	2f ef       	ldi	r18, 0xFF	; 255
    4006:	3f ef       	ldi	r19, 0xFF	; 255
    4008:	fc 01       	movw	r30, r24
    400a:	22 87       	std	Z+10, r18	; 0x0a
    400c:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	94 e0       	ldi	r25, 0x04	; 4
    4012:	fc 01       	movw	r30, r24
    4014:	10 86       	std	Z+8, r1	; 0x08
    4016:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    4018:	83 e0       	ldi	r24, 0x03	; 3
    401a:	c3 df       	rcall	.-122    	; 0x3fa2 <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	94 e0       	ldi	r25, 0x04	; 4
    4020:	21 e0       	ldi	r18, 0x01	; 1
    4022:	fc 01       	movw	r30, r24
    4024:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	94 e0       	ldi	r25, 0x04	; 4
    402a:	27 e0       	ldi	r18, 0x07	; 7
    402c:	fc 01       	movw	r30, r24
    402e:	20 83       	st	Z, r18
}
    4030:	00 00       	nop
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	08 95       	ret

00004038 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    4038:	1f 92       	push	r1
    403a:	0f 92       	push	r0
    403c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4040:	0f 92       	push	r0
    4042:	11 24       	eor	r1, r1
    4044:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4048:	0f 92       	push	r0
    404a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    404e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4052:	0f 92       	push	r0
    4054:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4058:	8f 93       	push	r24
    405a:	9f 93       	push	r25
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    4064:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <rtc_data>
    4068:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <rtc_data+0x1>
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	80 93 a2 27 	sts	0x27A2, r24	; 0x8027a2 <rtc_data>
    4072:	90 93 a3 27 	sts	0x27A3, r25	; 0x8027a3 <rtc_data+0x1>
}
    4076:	00 00       	nop
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	9f 91       	pop	r25
    407e:	8f 91       	pop	r24
    4080:	0f 90       	pop	r0
    4082:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4086:	0f 90       	pop	r0
    4088:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    408c:	0f 90       	pop	r0
    408e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4092:	0f 90       	pop	r0
    4094:	1f 90       	pop	r1
    4096:	18 95       	reti

00004098 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    4098:	1f 92       	push	r1
    409a:	0f 92       	push	r0
    409c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    40a0:	0f 92       	push	r0
    40a2:	11 24       	eor	r1, r1
    40a4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40a8:	0f 92       	push	r0
    40aa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    40ae:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40b2:	0f 92       	push	r0
    40b4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    40b8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40bc:	0f 92       	push	r0
    40be:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    40c2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40c6:	0f 92       	push	r0
    40c8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    40cc:	2f 93       	push	r18
    40ce:	3f 93       	push	r19
    40d0:	4f 93       	push	r20
    40d2:	5f 93       	push	r21
    40d4:	6f 93       	push	r22
    40d6:	7f 93       	push	r23
    40d8:	8f 93       	push	r24
    40da:	9f 93       	push	r25
    40dc:	af 93       	push	r26
    40de:	bf 93       	push	r27
    40e0:	ef 93       	push	r30
    40e2:	ff 93       	push	r31
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
    40ec:	28 97       	sbiw	r28, 0x08	; 8
    40ee:	cd bf       	out	0x3d, r28	; 61
    40f0:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    40f2:	20 91 a2 27 	lds	r18, 0x27A2	; 0x8027a2 <rtc_data>
    40f6:	30 91 a3 27 	lds	r19, 0x27A3	; 0x8027a3 <rtc_data+0x1>
    40fa:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <rtc_data+0x2>
    40fe:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <rtc_data+0x3>
    4102:	28 17       	cp	r18, r24
    4104:	39 07       	cpc	r19, r25
    4106:	08 f4       	brcc	.+2      	; 0x410a <__vector_11+0x72>
    4108:	63 c0       	rjmp	.+198    	; 0x41d0 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	94 e0       	ldi	r25, 0x04	; 4
    410e:	21 e0       	ldi	r18, 0x01	; 1
    4110:	fc 01       	movw	r30, r24
    4112:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    4114:	80 91 a8 27 	lds	r24, 0x27A8	; 0x8027a8 <rtc_data+0x6>
    4118:	90 91 a9 27 	lds	r25, 0x27A9	; 0x8027a9 <rtc_data+0x7>
    411c:	89 2b       	or	r24, r25
    411e:	09 f4       	brne	.+2      	; 0x4122 <__vector_11+0x8a>
    4120:	57 c0       	rjmp	.+174    	; 0x41d0 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    4122:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <rtc_data>
    4126:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <rtc_data+0x1>
    412a:	cc 01       	movw	r24, r24
    412c:	a0 e0       	ldi	r26, 0x00	; 0
    412e:	b0 e0       	ldi	r27, 0x00	; 0
    4130:	ac 01       	movw	r20, r24
    4132:	33 27       	eor	r19, r19
    4134:	22 27       	eor	r18, r18
					| RTC.CNT;
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	94 e0       	ldi	r25, 0x04	; 4
    413a:	fc 01       	movw	r30, r24
    413c:	80 85       	ldd	r24, Z+8	; 0x08
    413e:	91 85       	ldd	r25, Z+9	; 0x09
    4140:	cc 01       	movw	r24, r24
    4142:	a0 e0       	ldi	r26, 0x00	; 0
    4144:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    4146:	82 2b       	or	r24, r18
    4148:	93 2b       	or	r25, r19
    414a:	a4 2b       	or	r26, r20
    414c:	b5 2b       	or	r27, r21
    414e:	89 83       	std	Y+1, r24	; 0x01
    4150:	9a 83       	std	Y+2, r25	; 0x02
    4152:	ab 83       	std	Y+3, r26	; 0x03
    4154:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    4156:	80 91 a4 27 	lds	r24, 0x27A4	; 0x8027a4 <rtc_data+0x2>
    415a:	90 91 a5 27 	lds	r25, 0x27A5	; 0x8027a5 <rtc_data+0x3>
    415e:	cc 01       	movw	r24, r24
    4160:	a0 e0       	ldi	r26, 0x00	; 0
    4162:	b0 e0       	ldi	r27, 0x00	; 0
    4164:	ac 01       	movw	r20, r24
    4166:	33 27       	eor	r19, r19
    4168:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    416a:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <rtc_data+0x4>
    416e:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <rtc_data+0x5>
    4172:	cc 01       	movw	r24, r24
    4174:	a0 e0       	ldi	r26, 0x00	; 0
    4176:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    4178:	82 2b       	or	r24, r18
    417a:	93 2b       	or	r25, r19
    417c:	a4 2b       	or	r26, r20
    417e:	b5 2b       	or	r27, r21
    4180:	8d 83       	std	Y+5, r24	; 0x05
    4182:	9e 83       	std	Y+6, r25	; 0x06
    4184:	af 83       	std	Y+7, r26	; 0x07
    4186:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    4188:	2d 81       	ldd	r18, Y+5	; 0x05
    418a:	3e 81       	ldd	r19, Y+6	; 0x06
    418c:	4f 81       	ldd	r20, Y+7	; 0x07
    418e:	58 85       	ldd	r21, Y+8	; 0x08
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	9a 81       	ldd	r25, Y+2	; 0x02
    4194:	ab 81       	ldd	r26, Y+3	; 0x03
    4196:	bc 81       	ldd	r27, Y+4	; 0x04
    4198:	28 17       	cp	r18, r24
    419a:	39 07       	cpc	r19, r25
    419c:	4a 07       	cpc	r20, r26
    419e:	5b 07       	cpc	r21, r27
    41a0:	58 f0       	brcs	.+22     	; 0x41b8 <__vector_11+0x120>
				count = alarm + 1;
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	9e 81       	ldd	r25, Y+6	; 0x06
    41a6:	af 81       	ldd	r26, Y+7	; 0x07
    41a8:	b8 85       	ldd	r27, Y+8	; 0x08
    41aa:	01 96       	adiw	r24, 0x01	; 1
    41ac:	a1 1d       	adc	r26, r1
    41ae:	b1 1d       	adc	r27, r1
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	ab 83       	std	Y+3, r26	; 0x03
    41b6:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    41b8:	20 91 a8 27 	lds	r18, 0x27A8	; 0x8027a8 <rtc_data+0x6>
    41bc:	30 91 a9 27 	lds	r19, 0x27A9	; 0x8027a9 <rtc_data+0x7>
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	9a 81       	ldd	r25, Y+2	; 0x02
    41c4:	ab 81       	ldd	r26, Y+3	; 0x03
    41c6:	bc 81       	ldd	r27, Y+4	; 0x04
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	f9 01       	movw	r30, r18
    41ce:	19 95       	eicall
		}
	}
}
    41d0:	00 00       	nop
    41d2:	28 96       	adiw	r28, 0x08	; 8
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	ff 91       	pop	r31
    41de:	ef 91       	pop	r30
    41e0:	bf 91       	pop	r27
    41e2:	af 91       	pop	r26
    41e4:	9f 91       	pop	r25
    41e6:	8f 91       	pop	r24
    41e8:	7f 91       	pop	r23
    41ea:	6f 91       	pop	r22
    41ec:	5f 91       	pop	r21
    41ee:	4f 91       	pop	r20
    41f0:	3f 91       	pop	r19
    41f2:	2f 91       	pop	r18
    41f4:	0f 90       	pop	r0
    41f6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    41fa:	0f 90       	pop	r0
    41fc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4200:	0f 90       	pop	r0
    4202:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4206:	0f 90       	pop	r0
    4208:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    420c:	0f 90       	pop	r0
    420e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4212:	0f 90       	pop	r0
    4214:	1f 90       	pop	r1
    4216:	18 95       	reti

00004218 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    4218:	0f 93       	push	r16
    421a:	1f 93       	push	r17
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
    4224:	60 97       	sbiw	r28, 0x10	; 16
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	8f 83       	std	Y+7, r24	; 0x07
    422c:	98 87       	std	Y+8, r25	; 0x08
    422e:	49 87       	std	Y+9, r20	; 0x09
    4230:	5a 87       	std	Y+10, r21	; 0x0a
    4232:	6b 87       	std	Y+11, r22	; 0x0b
    4234:	7c 87       	std	Y+12, r23	; 0x0c
    4236:	0d 87       	std	Y+13, r16	; 0x0d
    4238:	1e 87       	std	Y+14, r17	; 0x0e
    423a:	2f 87       	std	Y+15, r18	; 0x0f
    423c:	38 8b       	std	Y+16, r19	; 0x10

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    423e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4240:	3e 85       	ldd	r19, Y+14	; 0x0e
    4242:	4f 85       	ldd	r20, Y+15	; 0x0f
    4244:	58 89       	ldd	r21, Y+16	; 0x10
    4246:	89 85       	ldd	r24, Y+9	; 0x09
    4248:	9a 85       	ldd	r25, Y+10	; 0x0a
    424a:	ab 85       	ldd	r26, Y+11	; 0x0b
    424c:	bc 85       	ldd	r27, Y+12	; 0x0c
    424e:	82 0f       	add	r24, r18
    4250:	93 1f       	adc	r25, r19
    4252:	a4 1f       	adc	r26, r20
    4254:	b5 1f       	adc	r27, r21
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	a1 09       	sbc	r26, r1
    425a:	b1 09       	sbc	r27, r1
    425c:	29 85       	ldd	r18, Y+9	; 0x09
    425e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4260:	4b 85       	ldd	r20, Y+11	; 0x0b
    4262:	5c 85       	ldd	r21, Y+12	; 0x0c
    4264:	bc 01       	movw	r22, r24
    4266:	cd 01       	movw	r24, r26
    4268:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <__udivmodsi4>
    426c:	da 01       	movw	r26, r20
    426e:	c9 01       	movw	r24, r18
    4270:	8a 83       	std	Y+2, r24	; 0x02
    4272:	9b 83       	std	Y+3, r25	; 0x03
    4274:	ac 83       	std	Y+4, r26	; 0x04
    4276:	bd 83       	std	Y+5, r27	; 0x05

	if (divisor > 128) {
    4278:	8a 81       	ldd	r24, Y+2	; 0x02
    427a:	9b 81       	ldd	r25, Y+3	; 0x03
    427c:	ac 81       	ldd	r26, Y+4	; 0x04
    427e:	bd 81       	ldd	r27, Y+5	; 0x05
    4280:	81 38       	cpi	r24, 0x81	; 129
    4282:	91 05       	cpc	r25, r1
    4284:	a1 05       	cpc	r26, r1
    4286:	b1 05       	cpc	r27, r1
    4288:	10 f0       	brcs	.+4      	; 0x428e <spi_xmega_set_baud_div+0x76>
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    428a:	8f ef       	ldi	r24, 0xFF	; 255
    428c:	35 c0       	rjmp	.+106    	; 0x42f8 <spi_xmega_set_baud_div+0xe0>

	/*
	 * We now know that the divisor is 128 or lower so move it into a 8-bit
	 * variable to make sure the following comparison is more optimized.
	 */
	divisor_8bit = divisor;
    428e:	8a 81       	ldd	r24, Y+2	; 0x02
    4290:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    4292:	8e 81       	ldd	r24, Y+6	; 0x06
    4294:	81 34       	cpi	r24, 0x41	; 65
    4296:	18 f0       	brcs	.+6      	; 0x429e <spi_xmega_set_baud_div+0x86>
		ctrl = SPI_PRESCALER_DIV128_gc;
    4298:	83 e0       	ldi	r24, 0x03	; 3
    429a:	89 83       	std	Y+1, r24	; 0x01
    429c:	1f c0       	rjmp	.+62     	; 0x42dc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 32) {
    429e:	8e 81       	ldd	r24, Y+6	; 0x06
    42a0:	81 32       	cpi	r24, 0x21	; 33
    42a2:	18 f0       	brcs	.+6      	; 0x42aa <spi_xmega_set_baud_div+0x92>
		ctrl = SPI_PRESCALER_DIV64_gc;
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	89 83       	std	Y+1, r24	; 0x01
    42a8:	19 c0       	rjmp	.+50     	; 0x42dc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 16) {
    42aa:	8e 81       	ldd	r24, Y+6	; 0x06
    42ac:	81 31       	cpi	r24, 0x11	; 17
    42ae:	18 f0       	brcs	.+6      	; 0x42b6 <spi_xmega_set_baud_div+0x9e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    42b0:	82 e8       	ldi	r24, 0x82	; 130
    42b2:	89 83       	std	Y+1, r24	; 0x01
    42b4:	13 c0       	rjmp	.+38     	; 0x42dc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 8) {
    42b6:	8e 81       	ldd	r24, Y+6	; 0x06
    42b8:	89 30       	cpi	r24, 0x09	; 9
    42ba:	18 f0       	brcs	.+6      	; 0x42c2 <spi_xmega_set_baud_div+0xaa>
		ctrl = SPI_PRESCALER_DIV16_gc;
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	89 83       	std	Y+1, r24	; 0x01
    42c0:	0d c0       	rjmp	.+26     	; 0x42dc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 4) {
    42c2:	8e 81       	ldd	r24, Y+6	; 0x06
    42c4:	85 30       	cpi	r24, 0x05	; 5
    42c6:	18 f0       	brcs	.+6      	; 0x42ce <spi_xmega_set_baud_div+0xb6>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    42c8:	81 e8       	ldi	r24, 0x81	; 129
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	07 c0       	rjmp	.+14     	; 0x42dc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 2) {
    42ce:	8e 81       	ldd	r24, Y+6	; 0x06
    42d0:	83 30       	cpi	r24, 0x03	; 3
    42d2:	10 f0       	brcs	.+4      	; 0x42d8 <spi_xmega_set_baud_div+0xc0>
		ctrl = SPI_PRESCALER_DIV4_gc;
    42d4:	19 82       	std	Y+1, r1	; 0x01
    42d6:	02 c0       	rjmp	.+4      	; 0x42dc <spi_xmega_set_baud_div+0xc4>
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    42d8:	80 e8       	ldi	r24, 0x80	; 128
    42da:	89 83       	std	Y+1, r24	; 0x01
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    42dc:	8f 81       	ldd	r24, Y+7	; 0x07
    42de:	98 85       	ldd	r25, Y+8	; 0x08
    42e0:	fc 01       	movw	r30, r24
    42e2:	80 81       	ld	r24, Z
    42e4:	98 2f       	mov	r25, r24
    42e6:	9c 77       	andi	r25, 0x7C	; 124
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	89 2b       	or	r24, r25
    42ec:	28 2f       	mov	r18, r24
    42ee:	8f 81       	ldd	r24, Y+7	; 0x07
    42f0:	98 85       	ldd	r25, Y+8	; 0x08
    42f2:	fc 01       	movw	r30, r24
    42f4:	20 83       	st	Z, r18

	return 1;
    42f6:	81 e0       	ldi	r24, 0x01	; 1
}
    42f8:	60 96       	adiw	r28, 0x10	; 16
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	de bf       	out	0x3e, r29	; 62
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	08 95       	ret

00004308 <cpu_irq_save>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    4308:	cf 93       	push	r28
    430a:	df 93       	push	r29
    430c:	1f 92       	push	r1
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
    4312:	8f e3       	ldi	r24, 0x3F	; 63
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	fc 01       	movw	r30, r24
    4318:	80 81       	ld	r24, Z
    431a:	89 83       	std	Y+1, r24	; 0x01
    431c:	f8 94       	cli
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	0f 90       	pop	r0
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	08 95       	ret

00004328 <cpu_irq_restore>:
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	1f 92       	push	r1
    432e:	cd b7       	in	r28, 0x3d	; 61
    4330:	de b7       	in	r29, 0x3e	; 62
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	8f e3       	ldi	r24, 0x3F	; 63
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	29 81       	ldd	r18, Y+1	; 0x01
    433a:	fc 01       	movw	r30, r24
    433c:	20 83       	st	Z, r18
    433e:	00 00       	nop
    4340:	0f 90       	pop	r0
    4342:	df 91       	pop	r29
    4344:	cf 91       	pop	r28
    4346:	08 95       	ret

00004348 <sleepmgr_lock_mode>:
    4348:	cf 93       	push	r28
    434a:	df 93       	push	r29
    434c:	1f 92       	push	r1
    434e:	1f 92       	push	r1
    4350:	cd b7       	in	r28, 0x3d	; 61
    4352:	de b7       	in	r29, 0x3e	; 62
    4354:	8a 83       	std	Y+2, r24	; 0x02
    4356:	8a 81       	ldd	r24, Y+2	; 0x02
    4358:	88 2f       	mov	r24, r24
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	8a 56       	subi	r24, 0x6A	; 106
    435e:	98 4d       	sbci	r25, 0xD8	; 216
    4360:	fc 01       	movw	r30, r24
    4362:	80 81       	ld	r24, Z
    4364:	8f 3f       	cpi	r24, 0xFF	; 255
    4366:	09 f4       	brne	.+2      	; 0x436a <sleepmgr_lock_mode+0x22>
    4368:	ff cf       	rjmp	.-2      	; 0x4368 <sleepmgr_lock_mode+0x20>
    436a:	ce df       	rcall	.-100    	; 0x4308 <cpu_irq_save>
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	8a 81       	ldd	r24, Y+2	; 0x02
    4370:	88 2f       	mov	r24, r24
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	9c 01       	movw	r18, r24
    4376:	2a 56       	subi	r18, 0x6A	; 106
    4378:	38 4d       	sbci	r19, 0xD8	; 216
    437a:	f9 01       	movw	r30, r18
    437c:	20 81       	ld	r18, Z
    437e:	2f 5f       	subi	r18, 0xFF	; 255
    4380:	8a 56       	subi	r24, 0x6A	; 106
    4382:	98 4d       	sbci	r25, 0xD8	; 216
    4384:	fc 01       	movw	r30, r24
    4386:	20 83       	st	Z, r18
    4388:	89 81       	ldd	r24, Y+1	; 0x01
    438a:	ce df       	rcall	.-100    	; 0x4328 <cpu_irq_restore>
    438c:	00 00       	nop
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	df 91       	pop	r29
    4394:	cf 91       	pop	r28
    4396:	08 95       	ret

00004398 <__vector_14>:
    4398:	1f 92       	push	r1
    439a:	0f 92       	push	r0
    439c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    43a0:	0f 92       	push	r0
    43a2:	11 24       	eor	r1, r1
    43a4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    43a8:	0f 92       	push	r0
    43aa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    43ae:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    43b2:	0f 92       	push	r0
    43b4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    43b8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43bc:	0f 92       	push	r0
    43be:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    43c2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43c6:	0f 92       	push	r0
    43c8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43cc:	2f 93       	push	r18
    43ce:	3f 93       	push	r19
    43d0:	4f 93       	push	r20
    43d2:	5f 93       	push	r21
    43d4:	6f 93       	push	r22
    43d6:	7f 93       	push	r23
    43d8:	8f 93       	push	r24
    43da:	9f 93       	push	r25
    43dc:	af 93       	push	r26
    43de:	bf 93       	push	r27
    43e0:	ef 93       	push	r30
    43e2:	ff 93       	push	r31
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
    43ec:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <tc_tcc0_ovf_callback>
    43f0:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <tc_tcc0_ovf_callback+0x1>
    43f4:	89 2b       	or	r24, r25
    43f6:	31 f0       	breq	.+12     	; 0x4404 <__vector_14+0x6c>
    43f8:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <tc_tcc0_ovf_callback>
    43fc:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <tc_tcc0_ovf_callback+0x1>
    4400:	fc 01       	movw	r30, r24
    4402:	19 95       	eicall
    4404:	00 00       	nop
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	ff 91       	pop	r31
    440c:	ef 91       	pop	r30
    440e:	bf 91       	pop	r27
    4410:	af 91       	pop	r26
    4412:	9f 91       	pop	r25
    4414:	8f 91       	pop	r24
    4416:	7f 91       	pop	r23
    4418:	6f 91       	pop	r22
    441a:	5f 91       	pop	r21
    441c:	4f 91       	pop	r20
    441e:	3f 91       	pop	r19
    4420:	2f 91       	pop	r18
    4422:	0f 90       	pop	r0
    4424:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4428:	0f 90       	pop	r0
    442a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    442e:	0f 90       	pop	r0
    4430:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4434:	0f 90       	pop	r0
    4436:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    443a:	0f 90       	pop	r0
    443c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4440:	0f 90       	pop	r0
    4442:	1f 90       	pop	r1
    4444:	18 95       	reti

00004446 <__vector_15>:
    4446:	1f 92       	push	r1
    4448:	0f 92       	push	r0
    444a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    444e:	0f 92       	push	r0
    4450:	11 24       	eor	r1, r1
    4452:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4456:	0f 92       	push	r0
    4458:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    445c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4460:	0f 92       	push	r0
    4462:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4466:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    446a:	0f 92       	push	r0
    446c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4470:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4474:	0f 92       	push	r0
    4476:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    447a:	2f 93       	push	r18
    447c:	3f 93       	push	r19
    447e:	4f 93       	push	r20
    4480:	5f 93       	push	r21
    4482:	6f 93       	push	r22
    4484:	7f 93       	push	r23
    4486:	8f 93       	push	r24
    4488:	9f 93       	push	r25
    448a:	af 93       	push	r26
    448c:	bf 93       	push	r27
    448e:	ef 93       	push	r30
    4490:	ff 93       	push	r31
    4492:	cf 93       	push	r28
    4494:	df 93       	push	r29
    4496:	cd b7       	in	r28, 0x3d	; 61
    4498:	de b7       	in	r29, 0x3e	; 62
    449a:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <tc_tcc0_err_callback>
    449e:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <tc_tcc0_err_callback+0x1>
    44a2:	89 2b       	or	r24, r25
    44a4:	31 f0       	breq	.+12     	; 0x44b2 <__vector_15+0x6c>
    44a6:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <tc_tcc0_err_callback>
    44aa:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <tc_tcc0_err_callback+0x1>
    44ae:	fc 01       	movw	r30, r24
    44b0:	19 95       	eicall
    44b2:	00 00       	nop
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	ff 91       	pop	r31
    44ba:	ef 91       	pop	r30
    44bc:	bf 91       	pop	r27
    44be:	af 91       	pop	r26
    44c0:	9f 91       	pop	r25
    44c2:	8f 91       	pop	r24
    44c4:	7f 91       	pop	r23
    44c6:	6f 91       	pop	r22
    44c8:	5f 91       	pop	r21
    44ca:	4f 91       	pop	r20
    44cc:	3f 91       	pop	r19
    44ce:	2f 91       	pop	r18
    44d0:	0f 90       	pop	r0
    44d2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    44d6:	0f 90       	pop	r0
    44d8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    44dc:	0f 90       	pop	r0
    44de:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    44e2:	0f 90       	pop	r0
    44e4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    44e8:	0f 90       	pop	r0
    44ea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    44ee:	0f 90       	pop	r0
    44f0:	1f 90       	pop	r1
    44f2:	18 95       	reti

000044f4 <__vector_16>:
    44f4:	1f 92       	push	r1
    44f6:	0f 92       	push	r0
    44f8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    44fc:	0f 92       	push	r0
    44fe:	11 24       	eor	r1, r1
    4500:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4504:	0f 92       	push	r0
    4506:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    450a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    450e:	0f 92       	push	r0
    4510:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4514:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4518:	0f 92       	push	r0
    451a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    451e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4522:	0f 92       	push	r0
    4524:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4528:	2f 93       	push	r18
    452a:	3f 93       	push	r19
    452c:	4f 93       	push	r20
    452e:	5f 93       	push	r21
    4530:	6f 93       	push	r22
    4532:	7f 93       	push	r23
    4534:	8f 93       	push	r24
    4536:	9f 93       	push	r25
    4538:	af 93       	push	r26
    453a:	bf 93       	push	r27
    453c:	ef 93       	push	r30
    453e:	ff 93       	push	r31
    4540:	cf 93       	push	r28
    4542:	df 93       	push	r29
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <tc_tcc0_cca_callback>
    454c:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <tc_tcc0_cca_callback+0x1>
    4550:	89 2b       	or	r24, r25
    4552:	31 f0       	breq	.+12     	; 0x4560 <__vector_16+0x6c>
    4554:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <tc_tcc0_cca_callback>
    4558:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <tc_tcc0_cca_callback+0x1>
    455c:	fc 01       	movw	r30, r24
    455e:	19 95       	eicall
    4560:	00 00       	nop
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	ff 91       	pop	r31
    4568:	ef 91       	pop	r30
    456a:	bf 91       	pop	r27
    456c:	af 91       	pop	r26
    456e:	9f 91       	pop	r25
    4570:	8f 91       	pop	r24
    4572:	7f 91       	pop	r23
    4574:	6f 91       	pop	r22
    4576:	5f 91       	pop	r21
    4578:	4f 91       	pop	r20
    457a:	3f 91       	pop	r19
    457c:	2f 91       	pop	r18
    457e:	0f 90       	pop	r0
    4580:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4584:	0f 90       	pop	r0
    4586:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    458a:	0f 90       	pop	r0
    458c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4590:	0f 90       	pop	r0
    4592:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4596:	0f 90       	pop	r0
    4598:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    459c:	0f 90       	pop	r0
    459e:	1f 90       	pop	r1
    45a0:	18 95       	reti

000045a2 <__vector_17>:
    45a2:	1f 92       	push	r1
    45a4:	0f 92       	push	r0
    45a6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    45aa:	0f 92       	push	r0
    45ac:	11 24       	eor	r1, r1
    45ae:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    45b2:	0f 92       	push	r0
    45b4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    45b8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45bc:	0f 92       	push	r0
    45be:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    45c2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45c6:	0f 92       	push	r0
    45c8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    45cc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    45d0:	0f 92       	push	r0
    45d2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    45d6:	2f 93       	push	r18
    45d8:	3f 93       	push	r19
    45da:	4f 93       	push	r20
    45dc:	5f 93       	push	r21
    45de:	6f 93       	push	r22
    45e0:	7f 93       	push	r23
    45e2:	8f 93       	push	r24
    45e4:	9f 93       	push	r25
    45e6:	af 93       	push	r26
    45e8:	bf 93       	push	r27
    45ea:	ef 93       	push	r30
    45ec:	ff 93       	push	r31
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	cd b7       	in	r28, 0x3d	; 61
    45f4:	de b7       	in	r29, 0x3e	; 62
    45f6:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <tc_tcc0_ccb_callback>
    45fa:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <tc_tcc0_ccb_callback+0x1>
    45fe:	89 2b       	or	r24, r25
    4600:	31 f0       	breq	.+12     	; 0x460e <__vector_17+0x6c>
    4602:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <tc_tcc0_ccb_callback>
    4606:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <tc_tcc0_ccb_callback+0x1>
    460a:	fc 01       	movw	r30, r24
    460c:	19 95       	eicall
    460e:	00 00       	nop
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	ff 91       	pop	r31
    4616:	ef 91       	pop	r30
    4618:	bf 91       	pop	r27
    461a:	af 91       	pop	r26
    461c:	9f 91       	pop	r25
    461e:	8f 91       	pop	r24
    4620:	7f 91       	pop	r23
    4622:	6f 91       	pop	r22
    4624:	5f 91       	pop	r21
    4626:	4f 91       	pop	r20
    4628:	3f 91       	pop	r19
    462a:	2f 91       	pop	r18
    462c:	0f 90       	pop	r0
    462e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4632:	0f 90       	pop	r0
    4634:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4638:	0f 90       	pop	r0
    463a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    463e:	0f 90       	pop	r0
    4640:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4644:	0f 90       	pop	r0
    4646:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    464a:	0f 90       	pop	r0
    464c:	1f 90       	pop	r1
    464e:	18 95       	reti

00004650 <__vector_18>:
    4650:	1f 92       	push	r1
    4652:	0f 92       	push	r0
    4654:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4658:	0f 92       	push	r0
    465a:	11 24       	eor	r1, r1
    465c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4660:	0f 92       	push	r0
    4662:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4666:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    466a:	0f 92       	push	r0
    466c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4670:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4674:	0f 92       	push	r0
    4676:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    467a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    467e:	0f 92       	push	r0
    4680:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4684:	2f 93       	push	r18
    4686:	3f 93       	push	r19
    4688:	4f 93       	push	r20
    468a:	5f 93       	push	r21
    468c:	6f 93       	push	r22
    468e:	7f 93       	push	r23
    4690:	8f 93       	push	r24
    4692:	9f 93       	push	r25
    4694:	af 93       	push	r26
    4696:	bf 93       	push	r27
    4698:	ef 93       	push	r30
    469a:	ff 93       	push	r31
    469c:	cf 93       	push	r28
    469e:	df 93       	push	r29
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <tc_tcc0_ccc_callback>
    46a8:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <tc_tcc0_ccc_callback+0x1>
    46ac:	89 2b       	or	r24, r25
    46ae:	31 f0       	breq	.+12     	; 0x46bc <__vector_18+0x6c>
    46b0:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <tc_tcc0_ccc_callback>
    46b4:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <tc_tcc0_ccc_callback+0x1>
    46b8:	fc 01       	movw	r30, r24
    46ba:	19 95       	eicall
    46bc:	00 00       	nop
    46be:	df 91       	pop	r29
    46c0:	cf 91       	pop	r28
    46c2:	ff 91       	pop	r31
    46c4:	ef 91       	pop	r30
    46c6:	bf 91       	pop	r27
    46c8:	af 91       	pop	r26
    46ca:	9f 91       	pop	r25
    46cc:	8f 91       	pop	r24
    46ce:	7f 91       	pop	r23
    46d0:	6f 91       	pop	r22
    46d2:	5f 91       	pop	r21
    46d4:	4f 91       	pop	r20
    46d6:	3f 91       	pop	r19
    46d8:	2f 91       	pop	r18
    46da:	0f 90       	pop	r0
    46dc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    46e0:	0f 90       	pop	r0
    46e2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    46e6:	0f 90       	pop	r0
    46e8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    46ec:	0f 90       	pop	r0
    46ee:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    46f2:	0f 90       	pop	r0
    46f4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    46f8:	0f 90       	pop	r0
    46fa:	1f 90       	pop	r1
    46fc:	18 95       	reti

000046fe <__vector_19>:
    46fe:	1f 92       	push	r1
    4700:	0f 92       	push	r0
    4702:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4706:	0f 92       	push	r0
    4708:	11 24       	eor	r1, r1
    470a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    470e:	0f 92       	push	r0
    4710:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4714:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4718:	0f 92       	push	r0
    471a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    471e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4722:	0f 92       	push	r0
    4724:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4728:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    472c:	0f 92       	push	r0
    472e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4732:	2f 93       	push	r18
    4734:	3f 93       	push	r19
    4736:	4f 93       	push	r20
    4738:	5f 93       	push	r21
    473a:	6f 93       	push	r22
    473c:	7f 93       	push	r23
    473e:	8f 93       	push	r24
    4740:	9f 93       	push	r25
    4742:	af 93       	push	r26
    4744:	bf 93       	push	r27
    4746:	ef 93       	push	r30
    4748:	ff 93       	push	r31
    474a:	cf 93       	push	r28
    474c:	df 93       	push	r29
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <tc_tcc0_ccd_callback>
    4756:	90 91 bd 21 	lds	r25, 0x21BD	; 0x8021bd <tc_tcc0_ccd_callback+0x1>
    475a:	89 2b       	or	r24, r25
    475c:	31 f0       	breq	.+12     	; 0x476a <__vector_19+0x6c>
    475e:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <tc_tcc0_ccd_callback>
    4762:	90 91 bd 21 	lds	r25, 0x21BD	; 0x8021bd <tc_tcc0_ccd_callback+0x1>
    4766:	fc 01       	movw	r30, r24
    4768:	19 95       	eicall
    476a:	00 00       	nop
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	ff 91       	pop	r31
    4772:	ef 91       	pop	r30
    4774:	bf 91       	pop	r27
    4776:	af 91       	pop	r26
    4778:	9f 91       	pop	r25
    477a:	8f 91       	pop	r24
    477c:	7f 91       	pop	r23
    477e:	6f 91       	pop	r22
    4780:	5f 91       	pop	r21
    4782:	4f 91       	pop	r20
    4784:	3f 91       	pop	r19
    4786:	2f 91       	pop	r18
    4788:	0f 90       	pop	r0
    478a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    478e:	0f 90       	pop	r0
    4790:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4794:	0f 90       	pop	r0
    4796:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    479a:	0f 90       	pop	r0
    479c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47a0:	0f 90       	pop	r0
    47a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47a6:	0f 90       	pop	r0
    47a8:	1f 90       	pop	r1
    47aa:	18 95       	reti

000047ac <__vector_20>:
    47ac:	1f 92       	push	r1
    47ae:	0f 92       	push	r0
    47b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47b4:	0f 92       	push	r0
    47b6:	11 24       	eor	r1, r1
    47b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47bc:	0f 92       	push	r0
    47be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    47c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47c6:	0f 92       	push	r0
    47c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    47cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    47d0:	0f 92       	push	r0
    47d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    47d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47da:	0f 92       	push	r0
    47dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47e0:	2f 93       	push	r18
    47e2:	3f 93       	push	r19
    47e4:	4f 93       	push	r20
    47e6:	5f 93       	push	r21
    47e8:	6f 93       	push	r22
    47ea:	7f 93       	push	r23
    47ec:	8f 93       	push	r24
    47ee:	9f 93       	push	r25
    47f0:	af 93       	push	r26
    47f2:	bf 93       	push	r27
    47f4:	ef 93       	push	r30
    47f6:	ff 93       	push	r31
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <tc_tcc1_ovf_callback>
    4804:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <tc_tcc1_ovf_callback+0x1>
    4808:	89 2b       	or	r24, r25
    480a:	31 f0       	breq	.+12     	; 0x4818 <__vector_20+0x6c>
    480c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <tc_tcc1_ovf_callback>
    4810:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <tc_tcc1_ovf_callback+0x1>
    4814:	fc 01       	movw	r30, r24
    4816:	19 95       	eicall
    4818:	00 00       	nop
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	ff 91       	pop	r31
    4820:	ef 91       	pop	r30
    4822:	bf 91       	pop	r27
    4824:	af 91       	pop	r26
    4826:	9f 91       	pop	r25
    4828:	8f 91       	pop	r24
    482a:	7f 91       	pop	r23
    482c:	6f 91       	pop	r22
    482e:	5f 91       	pop	r21
    4830:	4f 91       	pop	r20
    4832:	3f 91       	pop	r19
    4834:	2f 91       	pop	r18
    4836:	0f 90       	pop	r0
    4838:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    483c:	0f 90       	pop	r0
    483e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4842:	0f 90       	pop	r0
    4844:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4848:	0f 90       	pop	r0
    484a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    484e:	0f 90       	pop	r0
    4850:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4854:	0f 90       	pop	r0
    4856:	1f 90       	pop	r1
    4858:	18 95       	reti

0000485a <__vector_21>:
    485a:	1f 92       	push	r1
    485c:	0f 92       	push	r0
    485e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4862:	0f 92       	push	r0
    4864:	11 24       	eor	r1, r1
    4866:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    486a:	0f 92       	push	r0
    486c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4870:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4874:	0f 92       	push	r0
    4876:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    487a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    487e:	0f 92       	push	r0
    4880:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4884:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4888:	0f 92       	push	r0
    488a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    488e:	2f 93       	push	r18
    4890:	3f 93       	push	r19
    4892:	4f 93       	push	r20
    4894:	5f 93       	push	r21
    4896:	6f 93       	push	r22
    4898:	7f 93       	push	r23
    489a:	8f 93       	push	r24
    489c:	9f 93       	push	r25
    489e:	af 93       	push	r26
    48a0:	bf 93       	push	r27
    48a2:	ef 93       	push	r30
    48a4:	ff 93       	push	r31
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <tc_tcc1_err_callback>
    48b2:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <tc_tcc1_err_callback+0x1>
    48b6:	89 2b       	or	r24, r25
    48b8:	31 f0       	breq	.+12     	; 0x48c6 <__vector_21+0x6c>
    48ba:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <tc_tcc1_err_callback>
    48be:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <tc_tcc1_err_callback+0x1>
    48c2:	fc 01       	movw	r30, r24
    48c4:	19 95       	eicall
    48c6:	00 00       	nop
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	ff 91       	pop	r31
    48ce:	ef 91       	pop	r30
    48d0:	bf 91       	pop	r27
    48d2:	af 91       	pop	r26
    48d4:	9f 91       	pop	r25
    48d6:	8f 91       	pop	r24
    48d8:	7f 91       	pop	r23
    48da:	6f 91       	pop	r22
    48dc:	5f 91       	pop	r21
    48de:	4f 91       	pop	r20
    48e0:	3f 91       	pop	r19
    48e2:	2f 91       	pop	r18
    48e4:	0f 90       	pop	r0
    48e6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    48ea:	0f 90       	pop	r0
    48ec:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    48f0:	0f 90       	pop	r0
    48f2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    48f6:	0f 90       	pop	r0
    48f8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    48fc:	0f 90       	pop	r0
    48fe:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4902:	0f 90       	pop	r0
    4904:	1f 90       	pop	r1
    4906:	18 95       	reti

00004908 <__vector_22>:
    4908:	1f 92       	push	r1
    490a:	0f 92       	push	r0
    490c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4910:	0f 92       	push	r0
    4912:	11 24       	eor	r1, r1
    4914:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4918:	0f 92       	push	r0
    491a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    491e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4922:	0f 92       	push	r0
    4924:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4928:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    492c:	0f 92       	push	r0
    492e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4932:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4936:	0f 92       	push	r0
    4938:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    493c:	2f 93       	push	r18
    493e:	3f 93       	push	r19
    4940:	4f 93       	push	r20
    4942:	5f 93       	push	r21
    4944:	6f 93       	push	r22
    4946:	7f 93       	push	r23
    4948:	8f 93       	push	r24
    494a:	9f 93       	push	r25
    494c:	af 93       	push	r26
    494e:	bf 93       	push	r27
    4950:	ef 93       	push	r30
    4952:	ff 93       	push	r31
    4954:	cf 93       	push	r28
    4956:	df 93       	push	r29
    4958:	cd b7       	in	r28, 0x3d	; 61
    495a:	de b7       	in	r29, 0x3e	; 62
    495c:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <tc_tcc1_cca_callback>
    4960:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <tc_tcc1_cca_callback+0x1>
    4964:	89 2b       	or	r24, r25
    4966:	31 f0       	breq	.+12     	; 0x4974 <__vector_22+0x6c>
    4968:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <tc_tcc1_cca_callback>
    496c:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <tc_tcc1_cca_callback+0x1>
    4970:	fc 01       	movw	r30, r24
    4972:	19 95       	eicall
    4974:	00 00       	nop
    4976:	df 91       	pop	r29
    4978:	cf 91       	pop	r28
    497a:	ff 91       	pop	r31
    497c:	ef 91       	pop	r30
    497e:	bf 91       	pop	r27
    4980:	af 91       	pop	r26
    4982:	9f 91       	pop	r25
    4984:	8f 91       	pop	r24
    4986:	7f 91       	pop	r23
    4988:	6f 91       	pop	r22
    498a:	5f 91       	pop	r21
    498c:	4f 91       	pop	r20
    498e:	3f 91       	pop	r19
    4990:	2f 91       	pop	r18
    4992:	0f 90       	pop	r0
    4994:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4998:	0f 90       	pop	r0
    499a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    499e:	0f 90       	pop	r0
    49a0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49a4:	0f 90       	pop	r0
    49a6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49aa:	0f 90       	pop	r0
    49ac:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    49b0:	0f 90       	pop	r0
    49b2:	1f 90       	pop	r1
    49b4:	18 95       	reti

000049b6 <__vector_23>:
    49b6:	1f 92       	push	r1
    49b8:	0f 92       	push	r0
    49ba:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    49be:	0f 92       	push	r0
    49c0:	11 24       	eor	r1, r1
    49c2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49c6:	0f 92       	push	r0
    49c8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    49cc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49d0:	0f 92       	push	r0
    49d2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    49d6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    49da:	0f 92       	push	r0
    49dc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    49e0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    49e4:	0f 92       	push	r0
    49e6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    49ea:	2f 93       	push	r18
    49ec:	3f 93       	push	r19
    49ee:	4f 93       	push	r20
    49f0:	5f 93       	push	r21
    49f2:	6f 93       	push	r22
    49f4:	7f 93       	push	r23
    49f6:	8f 93       	push	r24
    49f8:	9f 93       	push	r25
    49fa:	af 93       	push	r26
    49fc:	bf 93       	push	r27
    49fe:	ef 93       	push	r30
    4a00:	ff 93       	push	r31
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	cd b7       	in	r28, 0x3d	; 61
    4a08:	de b7       	in	r29, 0x3e	; 62
    4a0a:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <tc_tcc1_ccb_callback>
    4a0e:	90 91 c5 21 	lds	r25, 0x21C5	; 0x8021c5 <tc_tcc1_ccb_callback+0x1>
    4a12:	89 2b       	or	r24, r25
    4a14:	31 f0       	breq	.+12     	; 0x4a22 <__vector_23+0x6c>
    4a16:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <tc_tcc1_ccb_callback>
    4a1a:	90 91 c5 21 	lds	r25, 0x21C5	; 0x8021c5 <tc_tcc1_ccb_callback+0x1>
    4a1e:	fc 01       	movw	r30, r24
    4a20:	19 95       	eicall
    4a22:	00 00       	nop
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	ff 91       	pop	r31
    4a2a:	ef 91       	pop	r30
    4a2c:	bf 91       	pop	r27
    4a2e:	af 91       	pop	r26
    4a30:	9f 91       	pop	r25
    4a32:	8f 91       	pop	r24
    4a34:	7f 91       	pop	r23
    4a36:	6f 91       	pop	r22
    4a38:	5f 91       	pop	r21
    4a3a:	4f 91       	pop	r20
    4a3c:	3f 91       	pop	r19
    4a3e:	2f 91       	pop	r18
    4a40:	0f 90       	pop	r0
    4a42:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a46:	0f 90       	pop	r0
    4a48:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a4c:	0f 90       	pop	r0
    4a4e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a52:	0f 90       	pop	r0
    4a54:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a58:	0f 90       	pop	r0
    4a5a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a5e:	0f 90       	pop	r0
    4a60:	1f 90       	pop	r1
    4a62:	18 95       	reti

00004a64 <__vector_77>:
    4a64:	1f 92       	push	r1
    4a66:	0f 92       	push	r0
    4a68:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a6c:	0f 92       	push	r0
    4a6e:	11 24       	eor	r1, r1
    4a70:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a74:	0f 92       	push	r0
    4a76:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a7a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a7e:	0f 92       	push	r0
    4a80:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4a84:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a88:	0f 92       	push	r0
    4a8a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a8e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a92:	0f 92       	push	r0
    4a94:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a98:	2f 93       	push	r18
    4a9a:	3f 93       	push	r19
    4a9c:	4f 93       	push	r20
    4a9e:	5f 93       	push	r21
    4aa0:	6f 93       	push	r22
    4aa2:	7f 93       	push	r23
    4aa4:	8f 93       	push	r24
    4aa6:	9f 93       	push	r25
    4aa8:	af 93       	push	r26
    4aaa:	bf 93       	push	r27
    4aac:	ef 93       	push	r30
    4aae:	ff 93       	push	r31
    4ab0:	cf 93       	push	r28
    4ab2:	df 93       	push	r29
    4ab4:	cd b7       	in	r28, 0x3d	; 61
    4ab6:	de b7       	in	r29, 0x3e	; 62
    4ab8:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <tc_tcd0_ovf_callback>
    4abc:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <tc_tcd0_ovf_callback+0x1>
    4ac0:	89 2b       	or	r24, r25
    4ac2:	31 f0       	breq	.+12     	; 0x4ad0 <__vector_77+0x6c>
    4ac4:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <tc_tcd0_ovf_callback>
    4ac8:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <tc_tcd0_ovf_callback+0x1>
    4acc:	fc 01       	movw	r30, r24
    4ace:	19 95       	eicall
    4ad0:	00 00       	nop
    4ad2:	df 91       	pop	r29
    4ad4:	cf 91       	pop	r28
    4ad6:	ff 91       	pop	r31
    4ad8:	ef 91       	pop	r30
    4ada:	bf 91       	pop	r27
    4adc:	af 91       	pop	r26
    4ade:	9f 91       	pop	r25
    4ae0:	8f 91       	pop	r24
    4ae2:	7f 91       	pop	r23
    4ae4:	6f 91       	pop	r22
    4ae6:	5f 91       	pop	r21
    4ae8:	4f 91       	pop	r20
    4aea:	3f 91       	pop	r19
    4aec:	2f 91       	pop	r18
    4aee:	0f 90       	pop	r0
    4af0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4af4:	0f 90       	pop	r0
    4af6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4afa:	0f 90       	pop	r0
    4afc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b00:	0f 90       	pop	r0
    4b02:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b06:	0f 90       	pop	r0
    4b08:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b0c:	0f 90       	pop	r0
    4b0e:	1f 90       	pop	r1
    4b10:	18 95       	reti

00004b12 <__vector_78>:
    4b12:	1f 92       	push	r1
    4b14:	0f 92       	push	r0
    4b16:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4b1a:	0f 92       	push	r0
    4b1c:	11 24       	eor	r1, r1
    4b1e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b22:	0f 92       	push	r0
    4b24:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4b28:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b2c:	0f 92       	push	r0
    4b2e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4b32:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b36:	0f 92       	push	r0
    4b38:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4b3c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b40:	0f 92       	push	r0
    4b42:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4b46:	2f 93       	push	r18
    4b48:	3f 93       	push	r19
    4b4a:	4f 93       	push	r20
    4b4c:	5f 93       	push	r21
    4b4e:	6f 93       	push	r22
    4b50:	7f 93       	push	r23
    4b52:	8f 93       	push	r24
    4b54:	9f 93       	push	r25
    4b56:	af 93       	push	r26
    4b58:	bf 93       	push	r27
    4b5a:	ef 93       	push	r30
    4b5c:	ff 93       	push	r31
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <tc_tcd0_err_callback>
    4b6a:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <tc_tcd0_err_callback+0x1>
    4b6e:	89 2b       	or	r24, r25
    4b70:	31 f0       	breq	.+12     	; 0x4b7e <__vector_78+0x6c>
    4b72:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <tc_tcd0_err_callback>
    4b76:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <tc_tcd0_err_callback+0x1>
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	19 95       	eicall
    4b7e:	00 00       	nop
    4b80:	df 91       	pop	r29
    4b82:	cf 91       	pop	r28
    4b84:	ff 91       	pop	r31
    4b86:	ef 91       	pop	r30
    4b88:	bf 91       	pop	r27
    4b8a:	af 91       	pop	r26
    4b8c:	9f 91       	pop	r25
    4b8e:	8f 91       	pop	r24
    4b90:	7f 91       	pop	r23
    4b92:	6f 91       	pop	r22
    4b94:	5f 91       	pop	r21
    4b96:	4f 91       	pop	r20
    4b98:	3f 91       	pop	r19
    4b9a:	2f 91       	pop	r18
    4b9c:	0f 90       	pop	r0
    4b9e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ba2:	0f 90       	pop	r0
    4ba4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ba8:	0f 90       	pop	r0
    4baa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4bae:	0f 90       	pop	r0
    4bb0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bb4:	0f 90       	pop	r0
    4bb6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4bba:	0f 90       	pop	r0
    4bbc:	1f 90       	pop	r1
    4bbe:	18 95       	reti

00004bc0 <__vector_79>:
    4bc0:	1f 92       	push	r1
    4bc2:	0f 92       	push	r0
    4bc4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4bc8:	0f 92       	push	r0
    4bca:	11 24       	eor	r1, r1
    4bcc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bd0:	0f 92       	push	r0
    4bd2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4bd6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4bda:	0f 92       	push	r0
    4bdc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4be0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4be4:	0f 92       	push	r0
    4be6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4bea:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4bee:	0f 92       	push	r0
    4bf0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4bf4:	2f 93       	push	r18
    4bf6:	3f 93       	push	r19
    4bf8:	4f 93       	push	r20
    4bfa:	5f 93       	push	r21
    4bfc:	6f 93       	push	r22
    4bfe:	7f 93       	push	r23
    4c00:	8f 93       	push	r24
    4c02:	9f 93       	push	r25
    4c04:	af 93       	push	r26
    4c06:	bf 93       	push	r27
    4c08:	ef 93       	push	r30
    4c0a:	ff 93       	push	r31
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <tc_tcd0_cca_callback>
    4c18:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <tc_tcd0_cca_callback+0x1>
    4c1c:	89 2b       	or	r24, r25
    4c1e:	31 f0       	breq	.+12     	; 0x4c2c <__vector_79+0x6c>
    4c20:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <tc_tcd0_cca_callback>
    4c24:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <tc_tcd0_cca_callback+0x1>
    4c28:	fc 01       	movw	r30, r24
    4c2a:	19 95       	eicall
    4c2c:	00 00       	nop
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	ff 91       	pop	r31
    4c34:	ef 91       	pop	r30
    4c36:	bf 91       	pop	r27
    4c38:	af 91       	pop	r26
    4c3a:	9f 91       	pop	r25
    4c3c:	8f 91       	pop	r24
    4c3e:	7f 91       	pop	r23
    4c40:	6f 91       	pop	r22
    4c42:	5f 91       	pop	r21
    4c44:	4f 91       	pop	r20
    4c46:	3f 91       	pop	r19
    4c48:	2f 91       	pop	r18
    4c4a:	0f 90       	pop	r0
    4c4c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c50:	0f 90       	pop	r0
    4c52:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c56:	0f 90       	pop	r0
    4c58:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c5c:	0f 90       	pop	r0
    4c5e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c62:	0f 90       	pop	r0
    4c64:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c68:	0f 90       	pop	r0
    4c6a:	1f 90       	pop	r1
    4c6c:	18 95       	reti

00004c6e <__vector_80>:
    4c6e:	1f 92       	push	r1
    4c70:	0f 92       	push	r0
    4c72:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4c76:	0f 92       	push	r0
    4c78:	11 24       	eor	r1, r1
    4c7a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c7e:	0f 92       	push	r0
    4c80:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4c84:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c88:	0f 92       	push	r0
    4c8a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4c8e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c92:	0f 92       	push	r0
    4c94:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4c98:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4c9c:	0f 92       	push	r0
    4c9e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ca2:	2f 93       	push	r18
    4ca4:	3f 93       	push	r19
    4ca6:	4f 93       	push	r20
    4ca8:	5f 93       	push	r21
    4caa:	6f 93       	push	r22
    4cac:	7f 93       	push	r23
    4cae:	8f 93       	push	r24
    4cb0:	9f 93       	push	r25
    4cb2:	af 93       	push	r26
    4cb4:	bf 93       	push	r27
    4cb6:	ef 93       	push	r30
    4cb8:	ff 93       	push	r31
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	cd b7       	in	r28, 0x3d	; 61
    4cc0:	de b7       	in	r29, 0x3e	; 62
    4cc2:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <tc_tcd0_ccb_callback>
    4cc6:	90 91 cd 21 	lds	r25, 0x21CD	; 0x8021cd <tc_tcd0_ccb_callback+0x1>
    4cca:	89 2b       	or	r24, r25
    4ccc:	31 f0       	breq	.+12     	; 0x4cda <__vector_80+0x6c>
    4cce:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <tc_tcd0_ccb_callback>
    4cd2:	90 91 cd 21 	lds	r25, 0x21CD	; 0x8021cd <tc_tcd0_ccb_callback+0x1>
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	19 95       	eicall
    4cda:	00 00       	nop
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	ff 91       	pop	r31
    4ce2:	ef 91       	pop	r30
    4ce4:	bf 91       	pop	r27
    4ce6:	af 91       	pop	r26
    4ce8:	9f 91       	pop	r25
    4cea:	8f 91       	pop	r24
    4cec:	7f 91       	pop	r23
    4cee:	6f 91       	pop	r22
    4cf0:	5f 91       	pop	r21
    4cf2:	4f 91       	pop	r20
    4cf4:	3f 91       	pop	r19
    4cf6:	2f 91       	pop	r18
    4cf8:	0f 90       	pop	r0
    4cfa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4cfe:	0f 90       	pop	r0
    4d00:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d04:	0f 90       	pop	r0
    4d06:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d0a:	0f 90       	pop	r0
    4d0c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d10:	0f 90       	pop	r0
    4d12:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d16:	0f 90       	pop	r0
    4d18:	1f 90       	pop	r1
    4d1a:	18 95       	reti

00004d1c <__vector_81>:
    4d1c:	1f 92       	push	r1
    4d1e:	0f 92       	push	r0
    4d20:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4d24:	0f 92       	push	r0
    4d26:	11 24       	eor	r1, r1
    4d28:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d2c:	0f 92       	push	r0
    4d2e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4d32:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d36:	0f 92       	push	r0
    4d38:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4d3c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d40:	0f 92       	push	r0
    4d42:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4d46:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d4a:	0f 92       	push	r0
    4d4c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4d50:	2f 93       	push	r18
    4d52:	3f 93       	push	r19
    4d54:	4f 93       	push	r20
    4d56:	5f 93       	push	r21
    4d58:	6f 93       	push	r22
    4d5a:	7f 93       	push	r23
    4d5c:	8f 93       	push	r24
    4d5e:	9f 93       	push	r25
    4d60:	af 93       	push	r26
    4d62:	bf 93       	push	r27
    4d64:	ef 93       	push	r30
    4d66:	ff 93       	push	r31
    4d68:	cf 93       	push	r28
    4d6a:	df 93       	push	r29
    4d6c:	cd b7       	in	r28, 0x3d	; 61
    4d6e:	de b7       	in	r29, 0x3e	; 62
    4d70:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <tc_tcd0_ccc_callback>
    4d74:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <tc_tcd0_ccc_callback+0x1>
    4d78:	89 2b       	or	r24, r25
    4d7a:	31 f0       	breq	.+12     	; 0x4d88 <__vector_81+0x6c>
    4d7c:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <tc_tcd0_ccc_callback>
    4d80:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <tc_tcd0_ccc_callback+0x1>
    4d84:	fc 01       	movw	r30, r24
    4d86:	19 95       	eicall
    4d88:	00 00       	nop
    4d8a:	df 91       	pop	r29
    4d8c:	cf 91       	pop	r28
    4d8e:	ff 91       	pop	r31
    4d90:	ef 91       	pop	r30
    4d92:	bf 91       	pop	r27
    4d94:	af 91       	pop	r26
    4d96:	9f 91       	pop	r25
    4d98:	8f 91       	pop	r24
    4d9a:	7f 91       	pop	r23
    4d9c:	6f 91       	pop	r22
    4d9e:	5f 91       	pop	r21
    4da0:	4f 91       	pop	r20
    4da2:	3f 91       	pop	r19
    4da4:	2f 91       	pop	r18
    4da6:	0f 90       	pop	r0
    4da8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4dac:	0f 90       	pop	r0
    4dae:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4db2:	0f 90       	pop	r0
    4db4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4db8:	0f 90       	pop	r0
    4dba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4dbe:	0f 90       	pop	r0
    4dc0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4dc4:	0f 90       	pop	r0
    4dc6:	1f 90       	pop	r1
    4dc8:	18 95       	reti

00004dca <__vector_82>:
    4dca:	1f 92       	push	r1
    4dcc:	0f 92       	push	r0
    4dce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4dd2:	0f 92       	push	r0
    4dd4:	11 24       	eor	r1, r1
    4dd6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4dda:	0f 92       	push	r0
    4ddc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4de0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4de4:	0f 92       	push	r0
    4de6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4dea:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4dee:	0f 92       	push	r0
    4df0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4df4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4df8:	0f 92       	push	r0
    4dfa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4dfe:	2f 93       	push	r18
    4e00:	3f 93       	push	r19
    4e02:	4f 93       	push	r20
    4e04:	5f 93       	push	r21
    4e06:	6f 93       	push	r22
    4e08:	7f 93       	push	r23
    4e0a:	8f 93       	push	r24
    4e0c:	9f 93       	push	r25
    4e0e:	af 93       	push	r26
    4e10:	bf 93       	push	r27
    4e12:	ef 93       	push	r30
    4e14:	ff 93       	push	r31
    4e16:	cf 93       	push	r28
    4e18:	df 93       	push	r29
    4e1a:	cd b7       	in	r28, 0x3d	; 61
    4e1c:	de b7       	in	r29, 0x3e	; 62
    4e1e:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <tc_tcd0_ccd_callback>
    4e22:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <tc_tcd0_ccd_callback+0x1>
    4e26:	89 2b       	or	r24, r25
    4e28:	31 f0       	breq	.+12     	; 0x4e36 <__vector_82+0x6c>
    4e2a:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <tc_tcd0_ccd_callback>
    4e2e:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <tc_tcd0_ccd_callback+0x1>
    4e32:	fc 01       	movw	r30, r24
    4e34:	19 95       	eicall
    4e36:	00 00       	nop
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	ff 91       	pop	r31
    4e3e:	ef 91       	pop	r30
    4e40:	bf 91       	pop	r27
    4e42:	af 91       	pop	r26
    4e44:	9f 91       	pop	r25
    4e46:	8f 91       	pop	r24
    4e48:	7f 91       	pop	r23
    4e4a:	6f 91       	pop	r22
    4e4c:	5f 91       	pop	r21
    4e4e:	4f 91       	pop	r20
    4e50:	3f 91       	pop	r19
    4e52:	2f 91       	pop	r18
    4e54:	0f 90       	pop	r0
    4e56:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4e5a:	0f 90       	pop	r0
    4e5c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e60:	0f 90       	pop	r0
    4e62:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e66:	0f 90       	pop	r0
    4e68:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e6c:	0f 90       	pop	r0
    4e6e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e72:	0f 90       	pop	r0
    4e74:	1f 90       	pop	r1
    4e76:	18 95       	reti

00004e78 <__vector_83>:
    4e78:	1f 92       	push	r1
    4e7a:	0f 92       	push	r0
    4e7c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4e80:	0f 92       	push	r0
    4e82:	11 24       	eor	r1, r1
    4e84:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e88:	0f 92       	push	r0
    4e8a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4e8e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e92:	0f 92       	push	r0
    4e94:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4e98:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4e9c:	0f 92       	push	r0
    4e9e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ea2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4ea6:	0f 92       	push	r0
    4ea8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4eac:	2f 93       	push	r18
    4eae:	3f 93       	push	r19
    4eb0:	4f 93       	push	r20
    4eb2:	5f 93       	push	r21
    4eb4:	6f 93       	push	r22
    4eb6:	7f 93       	push	r23
    4eb8:	8f 93       	push	r24
    4eba:	9f 93       	push	r25
    4ebc:	af 93       	push	r26
    4ebe:	bf 93       	push	r27
    4ec0:	ef 93       	push	r30
    4ec2:	ff 93       	push	r31
    4ec4:	cf 93       	push	r28
    4ec6:	df 93       	push	r29
    4ec8:	cd b7       	in	r28, 0x3d	; 61
    4eca:	de b7       	in	r29, 0x3e	; 62
    4ecc:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <tc_tcd1_ovf_callback>
    4ed0:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <tc_tcd1_ovf_callback+0x1>
    4ed4:	89 2b       	or	r24, r25
    4ed6:	31 f0       	breq	.+12     	; 0x4ee4 <__vector_83+0x6c>
    4ed8:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <tc_tcd1_ovf_callback>
    4edc:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <tc_tcd1_ovf_callback+0x1>
    4ee0:	fc 01       	movw	r30, r24
    4ee2:	19 95       	eicall
    4ee4:	00 00       	nop
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	ff 91       	pop	r31
    4eec:	ef 91       	pop	r30
    4eee:	bf 91       	pop	r27
    4ef0:	af 91       	pop	r26
    4ef2:	9f 91       	pop	r25
    4ef4:	8f 91       	pop	r24
    4ef6:	7f 91       	pop	r23
    4ef8:	6f 91       	pop	r22
    4efa:	5f 91       	pop	r21
    4efc:	4f 91       	pop	r20
    4efe:	3f 91       	pop	r19
    4f00:	2f 91       	pop	r18
    4f02:	0f 90       	pop	r0
    4f04:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f08:	0f 90       	pop	r0
    4f0a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f0e:	0f 90       	pop	r0
    4f10:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f14:	0f 90       	pop	r0
    4f16:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f1a:	0f 90       	pop	r0
    4f1c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f20:	0f 90       	pop	r0
    4f22:	1f 90       	pop	r1
    4f24:	18 95       	reti

00004f26 <__vector_84>:
    4f26:	1f 92       	push	r1
    4f28:	0f 92       	push	r0
    4f2a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4f2e:	0f 92       	push	r0
    4f30:	11 24       	eor	r1, r1
    4f32:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f36:	0f 92       	push	r0
    4f38:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4f3c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f40:	0f 92       	push	r0
    4f42:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4f46:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f4a:	0f 92       	push	r0
    4f4c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4f50:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f54:	0f 92       	push	r0
    4f56:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4f5a:	2f 93       	push	r18
    4f5c:	3f 93       	push	r19
    4f5e:	4f 93       	push	r20
    4f60:	5f 93       	push	r21
    4f62:	6f 93       	push	r22
    4f64:	7f 93       	push	r23
    4f66:	8f 93       	push	r24
    4f68:	9f 93       	push	r25
    4f6a:	af 93       	push	r26
    4f6c:	bf 93       	push	r27
    4f6e:	ef 93       	push	r30
    4f70:	ff 93       	push	r31
    4f72:	cf 93       	push	r28
    4f74:	df 93       	push	r29
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62
    4f7a:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <tc_tcd1_err_callback>
    4f7e:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <tc_tcd1_err_callback+0x1>
    4f82:	89 2b       	or	r24, r25
    4f84:	31 f0       	breq	.+12     	; 0x4f92 <__vector_84+0x6c>
    4f86:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <tc_tcd1_err_callback>
    4f8a:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <tc_tcd1_err_callback+0x1>
    4f8e:	fc 01       	movw	r30, r24
    4f90:	19 95       	eicall
    4f92:	00 00       	nop
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	ff 91       	pop	r31
    4f9a:	ef 91       	pop	r30
    4f9c:	bf 91       	pop	r27
    4f9e:	af 91       	pop	r26
    4fa0:	9f 91       	pop	r25
    4fa2:	8f 91       	pop	r24
    4fa4:	7f 91       	pop	r23
    4fa6:	6f 91       	pop	r22
    4fa8:	5f 91       	pop	r21
    4faa:	4f 91       	pop	r20
    4fac:	3f 91       	pop	r19
    4fae:	2f 91       	pop	r18
    4fb0:	0f 90       	pop	r0
    4fb2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4fb6:	0f 90       	pop	r0
    4fb8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4fbc:	0f 90       	pop	r0
    4fbe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4fc2:	0f 90       	pop	r0
    4fc4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4fc8:	0f 90       	pop	r0
    4fca:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4fce:	0f 90       	pop	r0
    4fd0:	1f 90       	pop	r1
    4fd2:	18 95       	reti

00004fd4 <__vector_85>:
    4fd4:	1f 92       	push	r1
    4fd6:	0f 92       	push	r0
    4fd8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4fdc:	0f 92       	push	r0
    4fde:	11 24       	eor	r1, r1
    4fe0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4fe4:	0f 92       	push	r0
    4fe6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4fea:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4fee:	0f 92       	push	r0
    4ff0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    4ff4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ff8:	0f 92       	push	r0
    4ffa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4ffe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5002:	0f 92       	push	r0
    5004:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5008:	2f 93       	push	r18
    500a:	3f 93       	push	r19
    500c:	4f 93       	push	r20
    500e:	5f 93       	push	r21
    5010:	6f 93       	push	r22
    5012:	7f 93       	push	r23
    5014:	8f 93       	push	r24
    5016:	9f 93       	push	r25
    5018:	af 93       	push	r26
    501a:	bf 93       	push	r27
    501c:	ef 93       	push	r30
    501e:	ff 93       	push	r31
    5020:	cf 93       	push	r28
    5022:	df 93       	push	r29
    5024:	cd b7       	in	r28, 0x3d	; 61
    5026:	de b7       	in	r29, 0x3e	; 62
    5028:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <tc_tcd1_cca_callback>
    502c:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <tc_tcd1_cca_callback+0x1>
    5030:	89 2b       	or	r24, r25
    5032:	31 f0       	breq	.+12     	; 0x5040 <__vector_85+0x6c>
    5034:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <tc_tcd1_cca_callback>
    5038:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <tc_tcd1_cca_callback+0x1>
    503c:	fc 01       	movw	r30, r24
    503e:	19 95       	eicall
    5040:	00 00       	nop
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	ff 91       	pop	r31
    5048:	ef 91       	pop	r30
    504a:	bf 91       	pop	r27
    504c:	af 91       	pop	r26
    504e:	9f 91       	pop	r25
    5050:	8f 91       	pop	r24
    5052:	7f 91       	pop	r23
    5054:	6f 91       	pop	r22
    5056:	5f 91       	pop	r21
    5058:	4f 91       	pop	r20
    505a:	3f 91       	pop	r19
    505c:	2f 91       	pop	r18
    505e:	0f 90       	pop	r0
    5060:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5064:	0f 90       	pop	r0
    5066:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    506a:	0f 90       	pop	r0
    506c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5070:	0f 90       	pop	r0
    5072:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5076:	0f 90       	pop	r0
    5078:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    507c:	0f 90       	pop	r0
    507e:	1f 90       	pop	r1
    5080:	18 95       	reti

00005082 <__vector_86>:
    5082:	1f 92       	push	r1
    5084:	0f 92       	push	r0
    5086:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    508a:	0f 92       	push	r0
    508c:	11 24       	eor	r1, r1
    508e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5092:	0f 92       	push	r0
    5094:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5098:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    509c:	0f 92       	push	r0
    509e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    50a2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50a6:	0f 92       	push	r0
    50a8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    50ac:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50b0:	0f 92       	push	r0
    50b2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    50b6:	2f 93       	push	r18
    50b8:	3f 93       	push	r19
    50ba:	4f 93       	push	r20
    50bc:	5f 93       	push	r21
    50be:	6f 93       	push	r22
    50c0:	7f 93       	push	r23
    50c2:	8f 93       	push	r24
    50c4:	9f 93       	push	r25
    50c6:	af 93       	push	r26
    50c8:	bf 93       	push	r27
    50ca:	ef 93       	push	r30
    50cc:	ff 93       	push	r31
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	cd b7       	in	r28, 0x3d	; 61
    50d4:	de b7       	in	r29, 0x3e	; 62
    50d6:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <tc_tcd1_ccb_callback>
    50da:	90 91 d9 21 	lds	r25, 0x21D9	; 0x8021d9 <tc_tcd1_ccb_callback+0x1>
    50de:	89 2b       	or	r24, r25
    50e0:	31 f0       	breq	.+12     	; 0x50ee <__vector_86+0x6c>
    50e2:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <tc_tcd1_ccb_callback>
    50e6:	90 91 d9 21 	lds	r25, 0x21D9	; 0x8021d9 <tc_tcd1_ccb_callback+0x1>
    50ea:	fc 01       	movw	r30, r24
    50ec:	19 95       	eicall
    50ee:	00 00       	nop
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	ff 91       	pop	r31
    50f6:	ef 91       	pop	r30
    50f8:	bf 91       	pop	r27
    50fa:	af 91       	pop	r26
    50fc:	9f 91       	pop	r25
    50fe:	8f 91       	pop	r24
    5100:	7f 91       	pop	r23
    5102:	6f 91       	pop	r22
    5104:	5f 91       	pop	r21
    5106:	4f 91       	pop	r20
    5108:	3f 91       	pop	r19
    510a:	2f 91       	pop	r18
    510c:	0f 90       	pop	r0
    510e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5112:	0f 90       	pop	r0
    5114:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5118:	0f 90       	pop	r0
    511a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    511e:	0f 90       	pop	r0
    5120:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5124:	0f 90       	pop	r0
    5126:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    512a:	0f 90       	pop	r0
    512c:	1f 90       	pop	r1
    512e:	18 95       	reti

00005130 <__vector_47>:
    5130:	1f 92       	push	r1
    5132:	0f 92       	push	r0
    5134:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5138:	0f 92       	push	r0
    513a:	11 24       	eor	r1, r1
    513c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5140:	0f 92       	push	r0
    5142:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5146:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    514a:	0f 92       	push	r0
    514c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5150:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5154:	0f 92       	push	r0
    5156:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    515a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    515e:	0f 92       	push	r0
    5160:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5164:	2f 93       	push	r18
    5166:	3f 93       	push	r19
    5168:	4f 93       	push	r20
    516a:	5f 93       	push	r21
    516c:	6f 93       	push	r22
    516e:	7f 93       	push	r23
    5170:	8f 93       	push	r24
    5172:	9f 93       	push	r25
    5174:	af 93       	push	r26
    5176:	bf 93       	push	r27
    5178:	ef 93       	push	r30
    517a:	ff 93       	push	r31
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62
    5184:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <tc_tce0_ovf_callback>
    5188:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <tc_tce0_ovf_callback+0x1>
    518c:	89 2b       	or	r24, r25
    518e:	31 f0       	breq	.+12     	; 0x519c <__vector_47+0x6c>
    5190:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <tc_tce0_ovf_callback>
    5194:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <tc_tce0_ovf_callback+0x1>
    5198:	fc 01       	movw	r30, r24
    519a:	19 95       	eicall
    519c:	00 00       	nop
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	ff 91       	pop	r31
    51a4:	ef 91       	pop	r30
    51a6:	bf 91       	pop	r27
    51a8:	af 91       	pop	r26
    51aa:	9f 91       	pop	r25
    51ac:	8f 91       	pop	r24
    51ae:	7f 91       	pop	r23
    51b0:	6f 91       	pop	r22
    51b2:	5f 91       	pop	r21
    51b4:	4f 91       	pop	r20
    51b6:	3f 91       	pop	r19
    51b8:	2f 91       	pop	r18
    51ba:	0f 90       	pop	r0
    51bc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    51c0:	0f 90       	pop	r0
    51c2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    51c6:	0f 90       	pop	r0
    51c8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    51cc:	0f 90       	pop	r0
    51ce:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    51d2:	0f 90       	pop	r0
    51d4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    51d8:	0f 90       	pop	r0
    51da:	1f 90       	pop	r1
    51dc:	18 95       	reti

000051de <__vector_48>:
    51de:	1f 92       	push	r1
    51e0:	0f 92       	push	r0
    51e2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    51e6:	0f 92       	push	r0
    51e8:	11 24       	eor	r1, r1
    51ea:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    51ee:	0f 92       	push	r0
    51f0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    51f4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    51f8:	0f 92       	push	r0
    51fa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    51fe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5202:	0f 92       	push	r0
    5204:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5208:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    520c:	0f 92       	push	r0
    520e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5212:	2f 93       	push	r18
    5214:	3f 93       	push	r19
    5216:	4f 93       	push	r20
    5218:	5f 93       	push	r21
    521a:	6f 93       	push	r22
    521c:	7f 93       	push	r23
    521e:	8f 93       	push	r24
    5220:	9f 93       	push	r25
    5222:	af 93       	push	r26
    5224:	bf 93       	push	r27
    5226:	ef 93       	push	r30
    5228:	ff 93       	push	r31
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
    522e:	cd b7       	in	r28, 0x3d	; 61
    5230:	de b7       	in	r29, 0x3e	; 62
    5232:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <tc_tce0_err_callback>
    5236:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <tc_tce0_err_callback+0x1>
    523a:	89 2b       	or	r24, r25
    523c:	31 f0       	breq	.+12     	; 0x524a <__vector_48+0x6c>
    523e:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <tc_tce0_err_callback>
    5242:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <tc_tce0_err_callback+0x1>
    5246:	fc 01       	movw	r30, r24
    5248:	19 95       	eicall
    524a:	00 00       	nop
    524c:	df 91       	pop	r29
    524e:	cf 91       	pop	r28
    5250:	ff 91       	pop	r31
    5252:	ef 91       	pop	r30
    5254:	bf 91       	pop	r27
    5256:	af 91       	pop	r26
    5258:	9f 91       	pop	r25
    525a:	8f 91       	pop	r24
    525c:	7f 91       	pop	r23
    525e:	6f 91       	pop	r22
    5260:	5f 91       	pop	r21
    5262:	4f 91       	pop	r20
    5264:	3f 91       	pop	r19
    5266:	2f 91       	pop	r18
    5268:	0f 90       	pop	r0
    526a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    526e:	0f 90       	pop	r0
    5270:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5274:	0f 90       	pop	r0
    5276:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    527a:	0f 90       	pop	r0
    527c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5280:	0f 90       	pop	r0
    5282:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5286:	0f 90       	pop	r0
    5288:	1f 90       	pop	r1
    528a:	18 95       	reti

0000528c <__vector_49>:
    528c:	1f 92       	push	r1
    528e:	0f 92       	push	r0
    5290:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5294:	0f 92       	push	r0
    5296:	11 24       	eor	r1, r1
    5298:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    529c:	0f 92       	push	r0
    529e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    52a2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52a6:	0f 92       	push	r0
    52a8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    52ac:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52b0:	0f 92       	push	r0
    52b2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    52b6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    52ba:	0f 92       	push	r0
    52bc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    52c0:	2f 93       	push	r18
    52c2:	3f 93       	push	r19
    52c4:	4f 93       	push	r20
    52c6:	5f 93       	push	r21
    52c8:	6f 93       	push	r22
    52ca:	7f 93       	push	r23
    52cc:	8f 93       	push	r24
    52ce:	9f 93       	push	r25
    52d0:	af 93       	push	r26
    52d2:	bf 93       	push	r27
    52d4:	ef 93       	push	r30
    52d6:	ff 93       	push	r31
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
    52e0:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <tc_tce0_cca_callback>
    52e4:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <tc_tce0_cca_callback+0x1>
    52e8:	89 2b       	or	r24, r25
    52ea:	31 f0       	breq	.+12     	; 0x52f8 <__vector_49+0x6c>
    52ec:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <tc_tce0_cca_callback>
    52f0:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <tc_tce0_cca_callback+0x1>
    52f4:	fc 01       	movw	r30, r24
    52f6:	19 95       	eicall
    52f8:	00 00       	nop
    52fa:	df 91       	pop	r29
    52fc:	cf 91       	pop	r28
    52fe:	ff 91       	pop	r31
    5300:	ef 91       	pop	r30
    5302:	bf 91       	pop	r27
    5304:	af 91       	pop	r26
    5306:	9f 91       	pop	r25
    5308:	8f 91       	pop	r24
    530a:	7f 91       	pop	r23
    530c:	6f 91       	pop	r22
    530e:	5f 91       	pop	r21
    5310:	4f 91       	pop	r20
    5312:	3f 91       	pop	r19
    5314:	2f 91       	pop	r18
    5316:	0f 90       	pop	r0
    5318:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    531c:	0f 90       	pop	r0
    531e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5322:	0f 90       	pop	r0
    5324:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5328:	0f 90       	pop	r0
    532a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    532e:	0f 90       	pop	r0
    5330:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5334:	0f 90       	pop	r0
    5336:	1f 90       	pop	r1
    5338:	18 95       	reti

0000533a <__vector_50>:
    533a:	1f 92       	push	r1
    533c:	0f 92       	push	r0
    533e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5342:	0f 92       	push	r0
    5344:	11 24       	eor	r1, r1
    5346:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    534a:	0f 92       	push	r0
    534c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5350:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5354:	0f 92       	push	r0
    5356:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    535a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    535e:	0f 92       	push	r0
    5360:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5364:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5368:	0f 92       	push	r0
    536a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    536e:	2f 93       	push	r18
    5370:	3f 93       	push	r19
    5372:	4f 93       	push	r20
    5374:	5f 93       	push	r21
    5376:	6f 93       	push	r22
    5378:	7f 93       	push	r23
    537a:	8f 93       	push	r24
    537c:	9f 93       	push	r25
    537e:	af 93       	push	r26
    5380:	bf 93       	push	r27
    5382:	ef 93       	push	r30
    5384:	ff 93       	push	r31
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29
    538a:	cd b7       	in	r28, 0x3d	; 61
    538c:	de b7       	in	r29, 0x3e	; 62
    538e:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <tc_tce0_ccb_callback>
    5392:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <tc_tce0_ccb_callback+0x1>
    5396:	89 2b       	or	r24, r25
    5398:	31 f0       	breq	.+12     	; 0x53a6 <__vector_50+0x6c>
    539a:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <tc_tce0_ccb_callback>
    539e:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <tc_tce0_ccb_callback+0x1>
    53a2:	fc 01       	movw	r30, r24
    53a4:	19 95       	eicall
    53a6:	00 00       	nop
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	ff 91       	pop	r31
    53ae:	ef 91       	pop	r30
    53b0:	bf 91       	pop	r27
    53b2:	af 91       	pop	r26
    53b4:	9f 91       	pop	r25
    53b6:	8f 91       	pop	r24
    53b8:	7f 91       	pop	r23
    53ba:	6f 91       	pop	r22
    53bc:	5f 91       	pop	r21
    53be:	4f 91       	pop	r20
    53c0:	3f 91       	pop	r19
    53c2:	2f 91       	pop	r18
    53c4:	0f 90       	pop	r0
    53c6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    53ca:	0f 90       	pop	r0
    53cc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    53d0:	0f 90       	pop	r0
    53d2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    53d6:	0f 90       	pop	r0
    53d8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    53dc:	0f 90       	pop	r0
    53de:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    53e2:	0f 90       	pop	r0
    53e4:	1f 90       	pop	r1
    53e6:	18 95       	reti

000053e8 <__vector_51>:
    53e8:	1f 92       	push	r1
    53ea:	0f 92       	push	r0
    53ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    53f0:	0f 92       	push	r0
    53f2:	11 24       	eor	r1, r1
    53f4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    53f8:	0f 92       	push	r0
    53fa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    53fe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5402:	0f 92       	push	r0
    5404:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5408:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    540c:	0f 92       	push	r0
    540e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5412:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5416:	0f 92       	push	r0
    5418:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    541c:	2f 93       	push	r18
    541e:	3f 93       	push	r19
    5420:	4f 93       	push	r20
    5422:	5f 93       	push	r21
    5424:	6f 93       	push	r22
    5426:	7f 93       	push	r23
    5428:	8f 93       	push	r24
    542a:	9f 93       	push	r25
    542c:	af 93       	push	r26
    542e:	bf 93       	push	r27
    5430:	ef 93       	push	r30
    5432:	ff 93       	push	r31
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <tc_tce0_ccc_callback>
    5440:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <tc_tce0_ccc_callback+0x1>
    5444:	89 2b       	or	r24, r25
    5446:	31 f0       	breq	.+12     	; 0x5454 <__vector_51+0x6c>
    5448:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <tc_tce0_ccc_callback>
    544c:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <tc_tce0_ccc_callback+0x1>
    5450:	fc 01       	movw	r30, r24
    5452:	19 95       	eicall
    5454:	00 00       	nop
    5456:	df 91       	pop	r29
    5458:	cf 91       	pop	r28
    545a:	ff 91       	pop	r31
    545c:	ef 91       	pop	r30
    545e:	bf 91       	pop	r27
    5460:	af 91       	pop	r26
    5462:	9f 91       	pop	r25
    5464:	8f 91       	pop	r24
    5466:	7f 91       	pop	r23
    5468:	6f 91       	pop	r22
    546a:	5f 91       	pop	r21
    546c:	4f 91       	pop	r20
    546e:	3f 91       	pop	r19
    5470:	2f 91       	pop	r18
    5472:	0f 90       	pop	r0
    5474:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5478:	0f 90       	pop	r0
    547a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    547e:	0f 90       	pop	r0
    5480:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5484:	0f 90       	pop	r0
    5486:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    548a:	0f 90       	pop	r0
    548c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5490:	0f 90       	pop	r0
    5492:	1f 90       	pop	r1
    5494:	18 95       	reti

00005496 <__vector_52>:
    5496:	1f 92       	push	r1
    5498:	0f 92       	push	r0
    549a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    549e:	0f 92       	push	r0
    54a0:	11 24       	eor	r1, r1
    54a2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54a6:	0f 92       	push	r0
    54a8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    54ac:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54b0:	0f 92       	push	r0
    54b2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    54b6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54ba:	0f 92       	push	r0
    54bc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    54c0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    54c4:	0f 92       	push	r0
    54c6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    54ca:	2f 93       	push	r18
    54cc:	3f 93       	push	r19
    54ce:	4f 93       	push	r20
    54d0:	5f 93       	push	r21
    54d2:	6f 93       	push	r22
    54d4:	7f 93       	push	r23
    54d6:	8f 93       	push	r24
    54d8:	9f 93       	push	r25
    54da:	af 93       	push	r26
    54dc:	bf 93       	push	r27
    54de:	ef 93       	push	r30
    54e0:	ff 93       	push	r31
    54e2:	cf 93       	push	r28
    54e4:	df 93       	push	r29
    54e6:	cd b7       	in	r28, 0x3d	; 61
    54e8:	de b7       	in	r29, 0x3e	; 62
    54ea:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <tc_tce0_ccd_callback>
    54ee:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <tc_tce0_ccd_callback+0x1>
    54f2:	89 2b       	or	r24, r25
    54f4:	31 f0       	breq	.+12     	; 0x5502 <__vector_52+0x6c>
    54f6:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <tc_tce0_ccd_callback>
    54fa:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <tc_tce0_ccd_callback+0x1>
    54fe:	fc 01       	movw	r30, r24
    5500:	19 95       	eicall
    5502:	00 00       	nop
    5504:	df 91       	pop	r29
    5506:	cf 91       	pop	r28
    5508:	ff 91       	pop	r31
    550a:	ef 91       	pop	r30
    550c:	bf 91       	pop	r27
    550e:	af 91       	pop	r26
    5510:	9f 91       	pop	r25
    5512:	8f 91       	pop	r24
    5514:	7f 91       	pop	r23
    5516:	6f 91       	pop	r22
    5518:	5f 91       	pop	r21
    551a:	4f 91       	pop	r20
    551c:	3f 91       	pop	r19
    551e:	2f 91       	pop	r18
    5520:	0f 90       	pop	r0
    5522:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5526:	0f 90       	pop	r0
    5528:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    552c:	0f 90       	pop	r0
    552e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5532:	0f 90       	pop	r0
    5534:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5538:	0f 90       	pop	r0
    553a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    553e:	0f 90       	pop	r0
    5540:	1f 90       	pop	r1
    5542:	18 95       	reti

00005544 <__vector_53>:
    5544:	1f 92       	push	r1
    5546:	0f 92       	push	r0
    5548:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    554c:	0f 92       	push	r0
    554e:	11 24       	eor	r1, r1
    5550:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5554:	0f 92       	push	r0
    5556:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    555a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    555e:	0f 92       	push	r0
    5560:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5564:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5568:	0f 92       	push	r0
    556a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    556e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5572:	0f 92       	push	r0
    5574:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5578:	2f 93       	push	r18
    557a:	3f 93       	push	r19
    557c:	4f 93       	push	r20
    557e:	5f 93       	push	r21
    5580:	6f 93       	push	r22
    5582:	7f 93       	push	r23
    5584:	8f 93       	push	r24
    5586:	9f 93       	push	r25
    5588:	af 93       	push	r26
    558a:	bf 93       	push	r27
    558c:	ef 93       	push	r30
    558e:	ff 93       	push	r31
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	cd b7       	in	r28, 0x3d	; 61
    5596:	de b7       	in	r29, 0x3e	; 62
    5598:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <tc_tce1_ovf_callback>
    559c:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <tc_tce1_ovf_callback+0x1>
    55a0:	89 2b       	or	r24, r25
    55a2:	31 f0       	breq	.+12     	; 0x55b0 <__vector_53+0x6c>
    55a4:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <tc_tce1_ovf_callback>
    55a8:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <tc_tce1_ovf_callback+0x1>
    55ac:	fc 01       	movw	r30, r24
    55ae:	19 95       	eicall
    55b0:	00 00       	nop
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	ff 91       	pop	r31
    55b8:	ef 91       	pop	r30
    55ba:	bf 91       	pop	r27
    55bc:	af 91       	pop	r26
    55be:	9f 91       	pop	r25
    55c0:	8f 91       	pop	r24
    55c2:	7f 91       	pop	r23
    55c4:	6f 91       	pop	r22
    55c6:	5f 91       	pop	r21
    55c8:	4f 91       	pop	r20
    55ca:	3f 91       	pop	r19
    55cc:	2f 91       	pop	r18
    55ce:	0f 90       	pop	r0
    55d0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    55d4:	0f 90       	pop	r0
    55d6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    55da:	0f 90       	pop	r0
    55dc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    55e0:	0f 90       	pop	r0
    55e2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    55e6:	0f 90       	pop	r0
    55e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    55ec:	0f 90       	pop	r0
    55ee:	1f 90       	pop	r1
    55f0:	18 95       	reti

000055f2 <__vector_54>:
    55f2:	1f 92       	push	r1
    55f4:	0f 92       	push	r0
    55f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    55fa:	0f 92       	push	r0
    55fc:	11 24       	eor	r1, r1
    55fe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5602:	0f 92       	push	r0
    5604:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5608:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    560c:	0f 92       	push	r0
    560e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5612:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5616:	0f 92       	push	r0
    5618:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    561c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5620:	0f 92       	push	r0
    5622:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5626:	2f 93       	push	r18
    5628:	3f 93       	push	r19
    562a:	4f 93       	push	r20
    562c:	5f 93       	push	r21
    562e:	6f 93       	push	r22
    5630:	7f 93       	push	r23
    5632:	8f 93       	push	r24
    5634:	9f 93       	push	r25
    5636:	af 93       	push	r26
    5638:	bf 93       	push	r27
    563a:	ef 93       	push	r30
    563c:	ff 93       	push	r31
    563e:	cf 93       	push	r28
    5640:	df 93       	push	r29
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <tc_tce1_err_callback>
    564a:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <tc_tce1_err_callback+0x1>
    564e:	89 2b       	or	r24, r25
    5650:	31 f0       	breq	.+12     	; 0x565e <__vector_54+0x6c>
    5652:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <tc_tce1_err_callback>
    5656:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <tc_tce1_err_callback+0x1>
    565a:	fc 01       	movw	r30, r24
    565c:	19 95       	eicall
    565e:	00 00       	nop
    5660:	df 91       	pop	r29
    5662:	cf 91       	pop	r28
    5664:	ff 91       	pop	r31
    5666:	ef 91       	pop	r30
    5668:	bf 91       	pop	r27
    566a:	af 91       	pop	r26
    566c:	9f 91       	pop	r25
    566e:	8f 91       	pop	r24
    5670:	7f 91       	pop	r23
    5672:	6f 91       	pop	r22
    5674:	5f 91       	pop	r21
    5676:	4f 91       	pop	r20
    5678:	3f 91       	pop	r19
    567a:	2f 91       	pop	r18
    567c:	0f 90       	pop	r0
    567e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5682:	0f 90       	pop	r0
    5684:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5688:	0f 90       	pop	r0
    568a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    568e:	0f 90       	pop	r0
    5690:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5694:	0f 90       	pop	r0
    5696:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    569a:	0f 90       	pop	r0
    569c:	1f 90       	pop	r1
    569e:	18 95       	reti

000056a0 <__vector_55>:
    56a0:	1f 92       	push	r1
    56a2:	0f 92       	push	r0
    56a4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    56a8:	0f 92       	push	r0
    56aa:	11 24       	eor	r1, r1
    56ac:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56b0:	0f 92       	push	r0
    56b2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    56b6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56ba:	0f 92       	push	r0
    56bc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    56c0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    56c4:	0f 92       	push	r0
    56c6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    56ca:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    56ce:	0f 92       	push	r0
    56d0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    56d4:	2f 93       	push	r18
    56d6:	3f 93       	push	r19
    56d8:	4f 93       	push	r20
    56da:	5f 93       	push	r21
    56dc:	6f 93       	push	r22
    56de:	7f 93       	push	r23
    56e0:	8f 93       	push	r24
    56e2:	9f 93       	push	r25
    56e4:	af 93       	push	r26
    56e6:	bf 93       	push	r27
    56e8:	ef 93       	push	r30
    56ea:	ff 93       	push	r31
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
    56f0:	cd b7       	in	r28, 0x3d	; 61
    56f2:	de b7       	in	r29, 0x3e	; 62
    56f4:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <tc_tce1_cca_callback>
    56f8:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <tc_tce1_cca_callback+0x1>
    56fc:	89 2b       	or	r24, r25
    56fe:	31 f0       	breq	.+12     	; 0x570c <__vector_55+0x6c>
    5700:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <tc_tce1_cca_callback>
    5704:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <tc_tce1_cca_callback+0x1>
    5708:	fc 01       	movw	r30, r24
    570a:	19 95       	eicall
    570c:	00 00       	nop
    570e:	df 91       	pop	r29
    5710:	cf 91       	pop	r28
    5712:	ff 91       	pop	r31
    5714:	ef 91       	pop	r30
    5716:	bf 91       	pop	r27
    5718:	af 91       	pop	r26
    571a:	9f 91       	pop	r25
    571c:	8f 91       	pop	r24
    571e:	7f 91       	pop	r23
    5720:	6f 91       	pop	r22
    5722:	5f 91       	pop	r21
    5724:	4f 91       	pop	r20
    5726:	3f 91       	pop	r19
    5728:	2f 91       	pop	r18
    572a:	0f 90       	pop	r0
    572c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5730:	0f 90       	pop	r0
    5732:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5736:	0f 90       	pop	r0
    5738:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    573c:	0f 90       	pop	r0
    573e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5742:	0f 90       	pop	r0
    5744:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5748:	0f 90       	pop	r0
    574a:	1f 90       	pop	r1
    574c:	18 95       	reti

0000574e <__vector_56>:
    574e:	1f 92       	push	r1
    5750:	0f 92       	push	r0
    5752:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5756:	0f 92       	push	r0
    5758:	11 24       	eor	r1, r1
    575a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    575e:	0f 92       	push	r0
    5760:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5764:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5768:	0f 92       	push	r0
    576a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    576e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5772:	0f 92       	push	r0
    5774:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5778:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    577c:	0f 92       	push	r0
    577e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5782:	2f 93       	push	r18
    5784:	3f 93       	push	r19
    5786:	4f 93       	push	r20
    5788:	5f 93       	push	r21
    578a:	6f 93       	push	r22
    578c:	7f 93       	push	r23
    578e:	8f 93       	push	r24
    5790:	9f 93       	push	r25
    5792:	af 93       	push	r26
    5794:	bf 93       	push	r27
    5796:	ef 93       	push	r30
    5798:	ff 93       	push	r31
    579a:	cf 93       	push	r28
    579c:	df 93       	push	r29
    579e:	cd b7       	in	r28, 0x3d	; 61
    57a0:	de b7       	in	r29, 0x3e	; 62
    57a2:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <tc_tce1_ccb_callback>
    57a6:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <tc_tce1_ccb_callback+0x1>
    57aa:	89 2b       	or	r24, r25
    57ac:	31 f0       	breq	.+12     	; 0x57ba <__vector_56+0x6c>
    57ae:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <tc_tce1_ccb_callback>
    57b2:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <tc_tce1_ccb_callback+0x1>
    57b6:	fc 01       	movw	r30, r24
    57b8:	19 95       	eicall
    57ba:	00 00       	nop
    57bc:	df 91       	pop	r29
    57be:	cf 91       	pop	r28
    57c0:	ff 91       	pop	r31
    57c2:	ef 91       	pop	r30
    57c4:	bf 91       	pop	r27
    57c6:	af 91       	pop	r26
    57c8:	9f 91       	pop	r25
    57ca:	8f 91       	pop	r24
    57cc:	7f 91       	pop	r23
    57ce:	6f 91       	pop	r22
    57d0:	5f 91       	pop	r21
    57d2:	4f 91       	pop	r20
    57d4:	3f 91       	pop	r19
    57d6:	2f 91       	pop	r18
    57d8:	0f 90       	pop	r0
    57da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    57de:	0f 90       	pop	r0
    57e0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    57e4:	0f 90       	pop	r0
    57e6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    57ea:	0f 90       	pop	r0
    57ec:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    57f0:	0f 90       	pop	r0
    57f2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    57f6:	0f 90       	pop	r0
    57f8:	1f 90       	pop	r1
    57fa:	18 95       	reti

000057fc <__vector_108>:
    57fc:	1f 92       	push	r1
    57fe:	0f 92       	push	r0
    5800:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5804:	0f 92       	push	r0
    5806:	11 24       	eor	r1, r1
    5808:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    580c:	0f 92       	push	r0
    580e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5812:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5816:	0f 92       	push	r0
    5818:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    581c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5820:	0f 92       	push	r0
    5822:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5826:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    582a:	0f 92       	push	r0
    582c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5830:	2f 93       	push	r18
    5832:	3f 93       	push	r19
    5834:	4f 93       	push	r20
    5836:	5f 93       	push	r21
    5838:	6f 93       	push	r22
    583a:	7f 93       	push	r23
    583c:	8f 93       	push	r24
    583e:	9f 93       	push	r25
    5840:	af 93       	push	r26
    5842:	bf 93       	push	r27
    5844:	ef 93       	push	r30
    5846:	ff 93       	push	r31
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	cd b7       	in	r28, 0x3d	; 61
    584e:	de b7       	in	r29, 0x3e	; 62
    5850:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <tc_tcf0_ovf_callback>
    5854:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <tc_tcf0_ovf_callback+0x1>
    5858:	89 2b       	or	r24, r25
    585a:	31 f0       	breq	.+12     	; 0x5868 <__vector_108+0x6c>
    585c:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <tc_tcf0_ovf_callback>
    5860:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <tc_tcf0_ovf_callback+0x1>
    5864:	fc 01       	movw	r30, r24
    5866:	19 95       	eicall
    5868:	00 00       	nop
    586a:	df 91       	pop	r29
    586c:	cf 91       	pop	r28
    586e:	ff 91       	pop	r31
    5870:	ef 91       	pop	r30
    5872:	bf 91       	pop	r27
    5874:	af 91       	pop	r26
    5876:	9f 91       	pop	r25
    5878:	8f 91       	pop	r24
    587a:	7f 91       	pop	r23
    587c:	6f 91       	pop	r22
    587e:	5f 91       	pop	r21
    5880:	4f 91       	pop	r20
    5882:	3f 91       	pop	r19
    5884:	2f 91       	pop	r18
    5886:	0f 90       	pop	r0
    5888:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    588c:	0f 90       	pop	r0
    588e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5892:	0f 90       	pop	r0
    5894:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5898:	0f 90       	pop	r0
    589a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    589e:	0f 90       	pop	r0
    58a0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    58a4:	0f 90       	pop	r0
    58a6:	1f 90       	pop	r1
    58a8:	18 95       	reti

000058aa <__vector_109>:
    58aa:	1f 92       	push	r1
    58ac:	0f 92       	push	r0
    58ae:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    58b2:	0f 92       	push	r0
    58b4:	11 24       	eor	r1, r1
    58b6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58ba:	0f 92       	push	r0
    58bc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    58c0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    58c4:	0f 92       	push	r0
    58c6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    58ca:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    58ce:	0f 92       	push	r0
    58d0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    58d4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    58d8:	0f 92       	push	r0
    58da:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    58de:	2f 93       	push	r18
    58e0:	3f 93       	push	r19
    58e2:	4f 93       	push	r20
    58e4:	5f 93       	push	r21
    58e6:	6f 93       	push	r22
    58e8:	7f 93       	push	r23
    58ea:	8f 93       	push	r24
    58ec:	9f 93       	push	r25
    58ee:	af 93       	push	r26
    58f0:	bf 93       	push	r27
    58f2:	ef 93       	push	r30
    58f4:	ff 93       	push	r31
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	cd b7       	in	r28, 0x3d	; 61
    58fc:	de b7       	in	r29, 0x3e	; 62
    58fe:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <tc_tcf0_err_callback>
    5902:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <tc_tcf0_err_callback+0x1>
    5906:	89 2b       	or	r24, r25
    5908:	31 f0       	breq	.+12     	; 0x5916 <__vector_109+0x6c>
    590a:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <tc_tcf0_err_callback>
    590e:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <tc_tcf0_err_callback+0x1>
    5912:	fc 01       	movw	r30, r24
    5914:	19 95       	eicall
    5916:	00 00       	nop
    5918:	df 91       	pop	r29
    591a:	cf 91       	pop	r28
    591c:	ff 91       	pop	r31
    591e:	ef 91       	pop	r30
    5920:	bf 91       	pop	r27
    5922:	af 91       	pop	r26
    5924:	9f 91       	pop	r25
    5926:	8f 91       	pop	r24
    5928:	7f 91       	pop	r23
    592a:	6f 91       	pop	r22
    592c:	5f 91       	pop	r21
    592e:	4f 91       	pop	r20
    5930:	3f 91       	pop	r19
    5932:	2f 91       	pop	r18
    5934:	0f 90       	pop	r0
    5936:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    593a:	0f 90       	pop	r0
    593c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5940:	0f 90       	pop	r0
    5942:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5946:	0f 90       	pop	r0
    5948:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    594c:	0f 90       	pop	r0
    594e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5952:	0f 90       	pop	r0
    5954:	1f 90       	pop	r1
    5956:	18 95       	reti

00005958 <__vector_110>:
    5958:	1f 92       	push	r1
    595a:	0f 92       	push	r0
    595c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5960:	0f 92       	push	r0
    5962:	11 24       	eor	r1, r1
    5964:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5968:	0f 92       	push	r0
    596a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    596e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5972:	0f 92       	push	r0
    5974:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5978:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    597c:	0f 92       	push	r0
    597e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5982:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5986:	0f 92       	push	r0
    5988:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    598c:	2f 93       	push	r18
    598e:	3f 93       	push	r19
    5990:	4f 93       	push	r20
    5992:	5f 93       	push	r21
    5994:	6f 93       	push	r22
    5996:	7f 93       	push	r23
    5998:	8f 93       	push	r24
    599a:	9f 93       	push	r25
    599c:	af 93       	push	r26
    599e:	bf 93       	push	r27
    59a0:	ef 93       	push	r30
    59a2:	ff 93       	push	r31
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	cd b7       	in	r28, 0x3d	; 61
    59aa:	de b7       	in	r29, 0x3e	; 62
    59ac:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <tc_tcf0_cca_callback>
    59b0:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <tc_tcf0_cca_callback+0x1>
    59b4:	89 2b       	or	r24, r25
    59b6:	31 f0       	breq	.+12     	; 0x59c4 <__vector_110+0x6c>
    59b8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <tc_tcf0_cca_callback>
    59bc:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <tc_tcf0_cca_callback+0x1>
    59c0:	fc 01       	movw	r30, r24
    59c2:	19 95       	eicall
    59c4:	00 00       	nop
    59c6:	df 91       	pop	r29
    59c8:	cf 91       	pop	r28
    59ca:	ff 91       	pop	r31
    59cc:	ef 91       	pop	r30
    59ce:	bf 91       	pop	r27
    59d0:	af 91       	pop	r26
    59d2:	9f 91       	pop	r25
    59d4:	8f 91       	pop	r24
    59d6:	7f 91       	pop	r23
    59d8:	6f 91       	pop	r22
    59da:	5f 91       	pop	r21
    59dc:	4f 91       	pop	r20
    59de:	3f 91       	pop	r19
    59e0:	2f 91       	pop	r18
    59e2:	0f 90       	pop	r0
    59e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    59e8:	0f 90       	pop	r0
    59ea:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    59ee:	0f 90       	pop	r0
    59f0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    59f4:	0f 90       	pop	r0
    59f6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    59fa:	0f 90       	pop	r0
    59fc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5a00:	0f 90       	pop	r0
    5a02:	1f 90       	pop	r1
    5a04:	18 95       	reti

00005a06 <__vector_111>:
    5a06:	1f 92       	push	r1
    5a08:	0f 92       	push	r0
    5a0a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5a0e:	0f 92       	push	r0
    5a10:	11 24       	eor	r1, r1
    5a12:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a16:	0f 92       	push	r0
    5a18:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5a1c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a20:	0f 92       	push	r0
    5a22:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5a26:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a2a:	0f 92       	push	r0
    5a2c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a30:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a34:	0f 92       	push	r0
    5a36:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a3a:	2f 93       	push	r18
    5a3c:	3f 93       	push	r19
    5a3e:	4f 93       	push	r20
    5a40:	5f 93       	push	r21
    5a42:	6f 93       	push	r22
    5a44:	7f 93       	push	r23
    5a46:	8f 93       	push	r24
    5a48:	9f 93       	push	r25
    5a4a:	af 93       	push	r26
    5a4c:	bf 93       	push	r27
    5a4e:	ef 93       	push	r30
    5a50:	ff 93       	push	r31
    5a52:	cf 93       	push	r28
    5a54:	df 93       	push	r29
    5a56:	cd b7       	in	r28, 0x3d	; 61
    5a58:	de b7       	in	r29, 0x3e	; 62
    5a5a:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <tc_tcf0_ccb_callback>
    5a5e:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <tc_tcf0_ccb_callback+0x1>
    5a62:	89 2b       	or	r24, r25
    5a64:	31 f0       	breq	.+12     	; 0x5a72 <__vector_111+0x6c>
    5a66:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <tc_tcf0_ccb_callback>
    5a6a:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <tc_tcf0_ccb_callback+0x1>
    5a6e:	fc 01       	movw	r30, r24
    5a70:	19 95       	eicall
    5a72:	00 00       	nop
    5a74:	df 91       	pop	r29
    5a76:	cf 91       	pop	r28
    5a78:	ff 91       	pop	r31
    5a7a:	ef 91       	pop	r30
    5a7c:	bf 91       	pop	r27
    5a7e:	af 91       	pop	r26
    5a80:	9f 91       	pop	r25
    5a82:	8f 91       	pop	r24
    5a84:	7f 91       	pop	r23
    5a86:	6f 91       	pop	r22
    5a88:	5f 91       	pop	r21
    5a8a:	4f 91       	pop	r20
    5a8c:	3f 91       	pop	r19
    5a8e:	2f 91       	pop	r18
    5a90:	0f 90       	pop	r0
    5a92:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5a96:	0f 90       	pop	r0
    5a98:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5a9c:	0f 90       	pop	r0
    5a9e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5aa2:	0f 90       	pop	r0
    5aa4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5aa8:	0f 90       	pop	r0
    5aaa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5aae:	0f 90       	pop	r0
    5ab0:	1f 90       	pop	r1
    5ab2:	18 95       	reti

00005ab4 <__vector_112>:
    5ab4:	1f 92       	push	r1
    5ab6:	0f 92       	push	r0
    5ab8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5abc:	0f 92       	push	r0
    5abe:	11 24       	eor	r1, r1
    5ac0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5ac4:	0f 92       	push	r0
    5ac6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5aca:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ace:	0f 92       	push	r0
    5ad0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5ad4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ad8:	0f 92       	push	r0
    5ada:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ade:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ae2:	0f 92       	push	r0
    5ae4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ae8:	2f 93       	push	r18
    5aea:	3f 93       	push	r19
    5aec:	4f 93       	push	r20
    5aee:	5f 93       	push	r21
    5af0:	6f 93       	push	r22
    5af2:	7f 93       	push	r23
    5af4:	8f 93       	push	r24
    5af6:	9f 93       	push	r25
    5af8:	af 93       	push	r26
    5afa:	bf 93       	push	r27
    5afc:	ef 93       	push	r30
    5afe:	ff 93       	push	r31
    5b00:	cf 93       	push	r28
    5b02:	df 93       	push	r29
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
    5b08:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <tc_tcf0_ccc_callback>
    5b0c:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <tc_tcf0_ccc_callback+0x1>
    5b10:	89 2b       	or	r24, r25
    5b12:	31 f0       	breq	.+12     	; 0x5b20 <__vector_112+0x6c>
    5b14:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <tc_tcf0_ccc_callback>
    5b18:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <tc_tcf0_ccc_callback+0x1>
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	19 95       	eicall
    5b20:	00 00       	nop
    5b22:	df 91       	pop	r29
    5b24:	cf 91       	pop	r28
    5b26:	ff 91       	pop	r31
    5b28:	ef 91       	pop	r30
    5b2a:	bf 91       	pop	r27
    5b2c:	af 91       	pop	r26
    5b2e:	9f 91       	pop	r25
    5b30:	8f 91       	pop	r24
    5b32:	7f 91       	pop	r23
    5b34:	6f 91       	pop	r22
    5b36:	5f 91       	pop	r21
    5b38:	4f 91       	pop	r20
    5b3a:	3f 91       	pop	r19
    5b3c:	2f 91       	pop	r18
    5b3e:	0f 90       	pop	r0
    5b40:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b44:	0f 90       	pop	r0
    5b46:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b4a:	0f 90       	pop	r0
    5b4c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b50:	0f 90       	pop	r0
    5b52:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b56:	0f 90       	pop	r0
    5b58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5b5c:	0f 90       	pop	r0
    5b5e:	1f 90       	pop	r1
    5b60:	18 95       	reti

00005b62 <__vector_113>:
    5b62:	1f 92       	push	r1
    5b64:	0f 92       	push	r0
    5b66:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5b6a:	0f 92       	push	r0
    5b6c:	11 24       	eor	r1, r1
    5b6e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b72:	0f 92       	push	r0
    5b74:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5b78:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b7c:	0f 92       	push	r0
    5b7e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5b82:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b86:	0f 92       	push	r0
    5b88:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5b8c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b90:	0f 92       	push	r0
    5b92:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5b96:	2f 93       	push	r18
    5b98:	3f 93       	push	r19
    5b9a:	4f 93       	push	r20
    5b9c:	5f 93       	push	r21
    5b9e:	6f 93       	push	r22
    5ba0:	7f 93       	push	r23
    5ba2:	8f 93       	push	r24
    5ba4:	9f 93       	push	r25
    5ba6:	af 93       	push	r26
    5ba8:	bf 93       	push	r27
    5baa:	ef 93       	push	r30
    5bac:	ff 93       	push	r31
    5bae:	cf 93       	push	r28
    5bb0:	df 93       	push	r29
    5bb2:	cd b7       	in	r28, 0x3d	; 61
    5bb4:	de b7       	in	r29, 0x3e	; 62
    5bb6:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <tc_tcf0_ccd_callback>
    5bba:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <tc_tcf0_ccd_callback+0x1>
    5bbe:	89 2b       	or	r24, r25
    5bc0:	31 f0       	breq	.+12     	; 0x5bce <__vector_113+0x6c>
    5bc2:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <tc_tcf0_ccd_callback>
    5bc6:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <tc_tcf0_ccd_callback+0x1>
    5bca:	fc 01       	movw	r30, r24
    5bcc:	19 95       	eicall
    5bce:	00 00       	nop
    5bd0:	df 91       	pop	r29
    5bd2:	cf 91       	pop	r28
    5bd4:	ff 91       	pop	r31
    5bd6:	ef 91       	pop	r30
    5bd8:	bf 91       	pop	r27
    5bda:	af 91       	pop	r26
    5bdc:	9f 91       	pop	r25
    5bde:	8f 91       	pop	r24
    5be0:	7f 91       	pop	r23
    5be2:	6f 91       	pop	r22
    5be4:	5f 91       	pop	r21
    5be6:	4f 91       	pop	r20
    5be8:	3f 91       	pop	r19
    5bea:	2f 91       	pop	r18
    5bec:	0f 90       	pop	r0
    5bee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5bf2:	0f 90       	pop	r0
    5bf4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5bf8:	0f 90       	pop	r0
    5bfa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5bfe:	0f 90       	pop	r0
    5c00:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c04:	0f 90       	pop	r0
    5c06:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5c0a:	0f 90       	pop	r0
    5c0c:	1f 90       	pop	r1
    5c0e:	18 95       	reti

00005c10 <__vector_114>:
    5c10:	1f 92       	push	r1
    5c12:	0f 92       	push	r0
    5c14:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5c18:	0f 92       	push	r0
    5c1a:	11 24       	eor	r1, r1
    5c1c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c20:	0f 92       	push	r0
    5c22:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5c26:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5c2a:	0f 92       	push	r0
    5c2c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5c30:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c34:	0f 92       	push	r0
    5c36:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5c3a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5c3e:	0f 92       	push	r0
    5c40:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5c44:	2f 93       	push	r18
    5c46:	3f 93       	push	r19
    5c48:	4f 93       	push	r20
    5c4a:	5f 93       	push	r21
    5c4c:	6f 93       	push	r22
    5c4e:	7f 93       	push	r23
    5c50:	8f 93       	push	r24
    5c52:	9f 93       	push	r25
    5c54:	af 93       	push	r26
    5c56:	bf 93       	push	r27
    5c58:	ef 93       	push	r30
    5c5a:	ff 93       	push	r31
    5c5c:	cf 93       	push	r28
    5c5e:	df 93       	push	r29
    5c60:	cd b7       	in	r28, 0x3d	; 61
    5c62:	de b7       	in	r29, 0x3e	; 62
    5c64:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <tc_tcf1_ovf_callback>
    5c68:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <tc_tcf1_ovf_callback+0x1>
    5c6c:	89 2b       	or	r24, r25
    5c6e:	31 f0       	breq	.+12     	; 0x5c7c <__vector_114+0x6c>
    5c70:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <tc_tcf1_ovf_callback>
    5c74:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <tc_tcf1_ovf_callback+0x1>
    5c78:	fc 01       	movw	r30, r24
    5c7a:	19 95       	eicall
    5c7c:	00 00       	nop
    5c7e:	df 91       	pop	r29
    5c80:	cf 91       	pop	r28
    5c82:	ff 91       	pop	r31
    5c84:	ef 91       	pop	r30
    5c86:	bf 91       	pop	r27
    5c88:	af 91       	pop	r26
    5c8a:	9f 91       	pop	r25
    5c8c:	8f 91       	pop	r24
    5c8e:	7f 91       	pop	r23
    5c90:	6f 91       	pop	r22
    5c92:	5f 91       	pop	r21
    5c94:	4f 91       	pop	r20
    5c96:	3f 91       	pop	r19
    5c98:	2f 91       	pop	r18
    5c9a:	0f 90       	pop	r0
    5c9c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5ca0:	0f 90       	pop	r0
    5ca2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ca6:	0f 90       	pop	r0
    5ca8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5cac:	0f 90       	pop	r0
    5cae:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cb2:	0f 90       	pop	r0
    5cb4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5cb8:	0f 90       	pop	r0
    5cba:	1f 90       	pop	r1
    5cbc:	18 95       	reti

00005cbe <__vector_115>:
    5cbe:	1f 92       	push	r1
    5cc0:	0f 92       	push	r0
    5cc2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5cc6:	0f 92       	push	r0
    5cc8:	11 24       	eor	r1, r1
    5cca:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cce:	0f 92       	push	r0
    5cd0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5cd4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5cd8:	0f 92       	push	r0
    5cda:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5cde:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ce2:	0f 92       	push	r0
    5ce4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5ce8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5cec:	0f 92       	push	r0
    5cee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5cf2:	2f 93       	push	r18
    5cf4:	3f 93       	push	r19
    5cf6:	4f 93       	push	r20
    5cf8:	5f 93       	push	r21
    5cfa:	6f 93       	push	r22
    5cfc:	7f 93       	push	r23
    5cfe:	8f 93       	push	r24
    5d00:	9f 93       	push	r25
    5d02:	af 93       	push	r26
    5d04:	bf 93       	push	r27
    5d06:	ef 93       	push	r30
    5d08:	ff 93       	push	r31
    5d0a:	cf 93       	push	r28
    5d0c:	df 93       	push	r29
    5d0e:	cd b7       	in	r28, 0x3d	; 61
    5d10:	de b7       	in	r29, 0x3e	; 62
    5d12:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <tc_tcf1_err_callback>
    5d16:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <tc_tcf1_err_callback+0x1>
    5d1a:	89 2b       	or	r24, r25
    5d1c:	31 f0       	breq	.+12     	; 0x5d2a <__vector_115+0x6c>
    5d1e:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <tc_tcf1_err_callback>
    5d22:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <tc_tcf1_err_callback+0x1>
    5d26:	fc 01       	movw	r30, r24
    5d28:	19 95       	eicall
    5d2a:	00 00       	nop
    5d2c:	df 91       	pop	r29
    5d2e:	cf 91       	pop	r28
    5d30:	ff 91       	pop	r31
    5d32:	ef 91       	pop	r30
    5d34:	bf 91       	pop	r27
    5d36:	af 91       	pop	r26
    5d38:	9f 91       	pop	r25
    5d3a:	8f 91       	pop	r24
    5d3c:	7f 91       	pop	r23
    5d3e:	6f 91       	pop	r22
    5d40:	5f 91       	pop	r21
    5d42:	4f 91       	pop	r20
    5d44:	3f 91       	pop	r19
    5d46:	2f 91       	pop	r18
    5d48:	0f 90       	pop	r0
    5d4a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d4e:	0f 90       	pop	r0
    5d50:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d54:	0f 90       	pop	r0
    5d56:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d5a:	0f 90       	pop	r0
    5d5c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5d60:	0f 90       	pop	r0
    5d62:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5d66:	0f 90       	pop	r0
    5d68:	1f 90       	pop	r1
    5d6a:	18 95       	reti

00005d6c <__vector_116>:
    5d6c:	1f 92       	push	r1
    5d6e:	0f 92       	push	r0
    5d70:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5d74:	0f 92       	push	r0
    5d76:	11 24       	eor	r1, r1
    5d78:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5d7c:	0f 92       	push	r0
    5d7e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5d82:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d86:	0f 92       	push	r0
    5d88:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5d8c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d90:	0f 92       	push	r0
    5d92:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5d96:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5d9a:	0f 92       	push	r0
    5d9c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5da0:	2f 93       	push	r18
    5da2:	3f 93       	push	r19
    5da4:	4f 93       	push	r20
    5da6:	5f 93       	push	r21
    5da8:	6f 93       	push	r22
    5daa:	7f 93       	push	r23
    5dac:	8f 93       	push	r24
    5dae:	9f 93       	push	r25
    5db0:	af 93       	push	r26
    5db2:	bf 93       	push	r27
    5db4:	ef 93       	push	r30
    5db6:	ff 93       	push	r31
    5db8:	cf 93       	push	r28
    5dba:	df 93       	push	r29
    5dbc:	cd b7       	in	r28, 0x3d	; 61
    5dbe:	de b7       	in	r29, 0x3e	; 62
    5dc0:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <tc_tcf1_cca_callback>
    5dc4:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <tc_tcf1_cca_callback+0x1>
    5dc8:	89 2b       	or	r24, r25
    5dca:	31 f0       	breq	.+12     	; 0x5dd8 <__vector_116+0x6c>
    5dcc:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <tc_tcf1_cca_callback>
    5dd0:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <tc_tcf1_cca_callback+0x1>
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	19 95       	eicall
    5dd8:	00 00       	nop
    5dda:	df 91       	pop	r29
    5ddc:	cf 91       	pop	r28
    5dde:	ff 91       	pop	r31
    5de0:	ef 91       	pop	r30
    5de2:	bf 91       	pop	r27
    5de4:	af 91       	pop	r26
    5de6:	9f 91       	pop	r25
    5de8:	8f 91       	pop	r24
    5dea:	7f 91       	pop	r23
    5dec:	6f 91       	pop	r22
    5dee:	5f 91       	pop	r21
    5df0:	4f 91       	pop	r20
    5df2:	3f 91       	pop	r19
    5df4:	2f 91       	pop	r18
    5df6:	0f 90       	pop	r0
    5df8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5dfc:	0f 90       	pop	r0
    5dfe:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e02:	0f 90       	pop	r0
    5e04:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e08:	0f 90       	pop	r0
    5e0a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e0e:	0f 90       	pop	r0
    5e10:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5e14:	0f 90       	pop	r0
    5e16:	1f 90       	pop	r1
    5e18:	18 95       	reti

00005e1a <__vector_117>:
    5e1a:	1f 92       	push	r1
    5e1c:	0f 92       	push	r0
    5e1e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5e22:	0f 92       	push	r0
    5e24:	11 24       	eor	r1, r1
    5e26:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e2a:	0f 92       	push	r0
    5e2c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5e30:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e34:	0f 92       	push	r0
    5e36:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5e3a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e3e:	0f 92       	push	r0
    5e40:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5e44:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5e48:	0f 92       	push	r0
    5e4a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5e4e:	2f 93       	push	r18
    5e50:	3f 93       	push	r19
    5e52:	4f 93       	push	r20
    5e54:	5f 93       	push	r21
    5e56:	6f 93       	push	r22
    5e58:	7f 93       	push	r23
    5e5a:	8f 93       	push	r24
    5e5c:	9f 93       	push	r25
    5e5e:	af 93       	push	r26
    5e60:	bf 93       	push	r27
    5e62:	ef 93       	push	r30
    5e64:	ff 93       	push	r31
    5e66:	cf 93       	push	r28
    5e68:	df 93       	push	r29
    5e6a:	cd b7       	in	r28, 0x3d	; 61
    5e6c:	de b7       	in	r29, 0x3e	; 62
    5e6e:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <tc_tcf1_ccb_callback>
    5e72:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <tc_tcf1_ccb_callback+0x1>
    5e76:	89 2b       	or	r24, r25
    5e78:	31 f0       	breq	.+12     	; 0x5e86 <__vector_117+0x6c>
    5e7a:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <tc_tcf1_ccb_callback>
    5e7e:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <tc_tcf1_ccb_callback+0x1>
    5e82:	fc 01       	movw	r30, r24
    5e84:	19 95       	eicall
    5e86:	00 00       	nop
    5e88:	df 91       	pop	r29
    5e8a:	cf 91       	pop	r28
    5e8c:	ff 91       	pop	r31
    5e8e:	ef 91       	pop	r30
    5e90:	bf 91       	pop	r27
    5e92:	af 91       	pop	r26
    5e94:	9f 91       	pop	r25
    5e96:	8f 91       	pop	r24
    5e98:	7f 91       	pop	r23
    5e9a:	6f 91       	pop	r22
    5e9c:	5f 91       	pop	r21
    5e9e:	4f 91       	pop	r20
    5ea0:	3f 91       	pop	r19
    5ea2:	2f 91       	pop	r18
    5ea4:	0f 90       	pop	r0
    5ea6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5eaa:	0f 90       	pop	r0
    5eac:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    5eb0:	0f 90       	pop	r0
    5eb2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    5eb6:	0f 90       	pop	r0
    5eb8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    5ebc:	0f 90       	pop	r0
    5ebe:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5ec2:	0f 90       	pop	r0
    5ec4:	1f 90       	pop	r1
    5ec6:	18 95       	reti

00005ec8 <tc_enable>:
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
    5ecc:	00 d0       	rcall	.+0      	; 0x5ece <tc_enable+0x6>
    5ece:	cd b7       	in	r28, 0x3d	; 61
    5ed0:	de b7       	in	r29, 0x3e	; 62
    5ed2:	8a 83       	std	Y+2, r24	; 0x02
    5ed4:	9b 83       	std	Y+3, r25	; 0x03
    5ed6:	0e 94 84 21 	call	0x4308	; 0x4308 <cpu_irq_save>
    5eda:	89 83       	std	Y+1, r24	; 0x01
    5edc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ede:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee0:	81 15       	cp	r24, r1
    5ee2:	98 40       	sbci	r25, 0x08	; 8
    5ee4:	49 f4       	brne	.+18     	; 0x5ef8 <tc_enable+0x30>
    5ee6:	61 e0       	ldi	r22, 0x01	; 1
    5ee8:	83 e0       	ldi	r24, 0x03	; 3
    5eea:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5eee:	64 e0       	ldi	r22, 0x04	; 4
    5ef0:	83 e0       	ldi	r24, 0x03	; 3
    5ef2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5ef6:	66 c0       	rjmp	.+204    	; 0x5fc4 <tc_enable+0xfc>
    5ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    5efa:	9b 81       	ldd	r25, Y+3	; 0x03
    5efc:	80 34       	cpi	r24, 0x40	; 64
    5efe:	98 40       	sbci	r25, 0x08	; 8
    5f00:	49 f4       	brne	.+18     	; 0x5f14 <tc_enable+0x4c>
    5f02:	62 e0       	ldi	r22, 0x02	; 2
    5f04:	83 e0       	ldi	r24, 0x03	; 3
    5f06:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f0a:	64 e0       	ldi	r22, 0x04	; 4
    5f0c:	83 e0       	ldi	r24, 0x03	; 3
    5f0e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f12:	58 c0       	rjmp	.+176    	; 0x5fc4 <tc_enable+0xfc>
    5f14:	8a 81       	ldd	r24, Y+2	; 0x02
    5f16:	9b 81       	ldd	r25, Y+3	; 0x03
    5f18:	81 15       	cp	r24, r1
    5f1a:	99 40       	sbci	r25, 0x09	; 9
    5f1c:	49 f4       	brne	.+18     	; 0x5f30 <tc_enable+0x68>
    5f1e:	61 e0       	ldi	r22, 0x01	; 1
    5f20:	84 e0       	ldi	r24, 0x04	; 4
    5f22:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f26:	64 e0       	ldi	r22, 0x04	; 4
    5f28:	84 e0       	ldi	r24, 0x04	; 4
    5f2a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f2e:	4a c0       	rjmp	.+148    	; 0x5fc4 <tc_enable+0xfc>
    5f30:	8a 81       	ldd	r24, Y+2	; 0x02
    5f32:	9b 81       	ldd	r25, Y+3	; 0x03
    5f34:	80 34       	cpi	r24, 0x40	; 64
    5f36:	99 40       	sbci	r25, 0x09	; 9
    5f38:	49 f4       	brne	.+18     	; 0x5f4c <tc_enable+0x84>
    5f3a:	62 e0       	ldi	r22, 0x02	; 2
    5f3c:	84 e0       	ldi	r24, 0x04	; 4
    5f3e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f42:	64 e0       	ldi	r22, 0x04	; 4
    5f44:	84 e0       	ldi	r24, 0x04	; 4
    5f46:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f4a:	3c c0       	rjmp	.+120    	; 0x5fc4 <tc_enable+0xfc>
    5f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f50:	81 15       	cp	r24, r1
    5f52:	9a 40       	sbci	r25, 0x0A	; 10
    5f54:	49 f4       	brne	.+18     	; 0x5f68 <tc_enable+0xa0>
    5f56:	61 e0       	ldi	r22, 0x01	; 1
    5f58:	85 e0       	ldi	r24, 0x05	; 5
    5f5a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f5e:	64 e0       	ldi	r22, 0x04	; 4
    5f60:	85 e0       	ldi	r24, 0x05	; 5
    5f62:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f66:	2e c0       	rjmp	.+92     	; 0x5fc4 <tc_enable+0xfc>
    5f68:	8a 81       	ldd	r24, Y+2	; 0x02
    5f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f6c:	80 34       	cpi	r24, 0x40	; 64
    5f6e:	9a 40       	sbci	r25, 0x0A	; 10
    5f70:	49 f4       	brne	.+18     	; 0x5f84 <tc_enable+0xbc>
    5f72:	62 e0       	ldi	r22, 0x02	; 2
    5f74:	85 e0       	ldi	r24, 0x05	; 5
    5f76:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f7a:	64 e0       	ldi	r22, 0x04	; 4
    5f7c:	85 e0       	ldi	r24, 0x05	; 5
    5f7e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f82:	20 c0       	rjmp	.+64     	; 0x5fc4 <tc_enable+0xfc>
    5f84:	8a 81       	ldd	r24, Y+2	; 0x02
    5f86:	9b 81       	ldd	r25, Y+3	; 0x03
    5f88:	81 15       	cp	r24, r1
    5f8a:	9b 40       	sbci	r25, 0x0B	; 11
    5f8c:	49 f4       	brne	.+18     	; 0x5fa0 <tc_enable+0xd8>
    5f8e:	61 e0       	ldi	r22, 0x01	; 1
    5f90:	86 e0       	ldi	r24, 0x06	; 6
    5f92:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f96:	64 e0       	ldi	r22, 0x04	; 4
    5f98:	86 e0       	ldi	r24, 0x06	; 6
    5f9a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5f9e:	12 c0       	rjmp	.+36     	; 0x5fc4 <tc_enable+0xfc>
    5fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    5fa4:	80 34       	cpi	r24, 0x40	; 64
    5fa6:	9b 40       	sbci	r25, 0x0B	; 11
    5fa8:	49 f4       	brne	.+18     	; 0x5fbc <tc_enable+0xf4>
    5faa:	62 e0       	ldi	r22, 0x02	; 2
    5fac:	86 e0       	ldi	r24, 0x06	; 6
    5fae:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5fb2:	64 e0       	ldi	r22, 0x04	; 4
    5fb4:	86 e0       	ldi	r24, 0x06	; 6
    5fb6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    5fba:	04 c0       	rjmp	.+8      	; 0x5fc4 <tc_enable+0xfc>
    5fbc:	89 81       	ldd	r24, Y+1	; 0x01
    5fbe:	0e 94 94 21 	call	0x4328	; 0x4328 <cpu_irq_restore>
    5fc2:	06 c0       	rjmp	.+12     	; 0x5fd0 <tc_enable+0x108>
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	0e 94 a4 21 	call	0x4348	; 0x4348 <sleepmgr_lock_mode>
    5fca:	89 81       	ldd	r24, Y+1	; 0x01
    5fcc:	0e 94 94 21 	call	0x4328	; 0x4328 <cpu_irq_restore>
    5fd0:	23 96       	adiw	r28, 0x03	; 3
    5fd2:	cd bf       	out	0x3d, r28	; 61
    5fd4:	de bf       	out	0x3e, r29	; 62
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	08 95       	ret

00005fdc <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	00 d0       	rcall	.+0      	; 0x5fe2 <tc_set_overflow_interrupt_callback+0x6>
    5fe2:	1f 92       	push	r1
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
    5fe8:	89 83       	std	Y+1, r24	; 0x01
    5fea:	9a 83       	std	Y+2, r25	; 0x02
    5fec:	6b 83       	std	Y+3, r22	; 0x03
    5fee:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    5ff0:	89 81       	ldd	r24, Y+1	; 0x01
    5ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff4:	81 15       	cp	r24, r1
    5ff6:	98 40       	sbci	r25, 0x08	; 8
    5ff8:	39 f4       	brne	.+14     	; 0x6008 <tc_set_overflow_interrupt_callback+0x2c>
		tc_tcc0_ovf_callback = callback;
    5ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    5ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ffe:	80 93 b2 21 	sts	0x21B2, r24	; 0x8021b2 <tc_tcc0_ovf_callback>
    6002:	90 93 b3 21 	sts	0x21B3, r25	; 0x8021b3 <tc_tcc0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    6006:	53 c0       	rjmp	.+166    	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_ovf_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6008:	89 81       	ldd	r24, Y+1	; 0x01
    600a:	9a 81       	ldd	r25, Y+2	; 0x02
    600c:	80 34       	cpi	r24, 0x40	; 64
    600e:	98 40       	sbci	r25, 0x08	; 8
    6010:	39 f4       	brne	.+14     	; 0x6020 <tc_set_overflow_interrupt_callback+0x44>
		tc_tcc1_ovf_callback = callback;
    6012:	8b 81       	ldd	r24, Y+3	; 0x03
    6014:	9c 81       	ldd	r25, Y+4	; 0x04
    6016:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <tc_tcc1_ovf_callback>
    601a:	90 93 bf 21 	sts	0x21BF, r25	; 0x8021bf <tc_tcc1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    601e:	47 c0       	rjmp	.+142    	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_ovf_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6020:	89 81       	ldd	r24, Y+1	; 0x01
    6022:	9a 81       	ldd	r25, Y+2	; 0x02
    6024:	81 15       	cp	r24, r1
    6026:	99 40       	sbci	r25, 0x09	; 9
    6028:	39 f4       	brne	.+14     	; 0x6038 <tc_set_overflow_interrupt_callback+0x5c>
		tc_tcd0_ovf_callback = callback;
    602a:	8b 81       	ldd	r24, Y+3	; 0x03
    602c:	9c 81       	ldd	r25, Y+4	; 0x04
    602e:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <tc_tcd0_ovf_callback>
    6032:	90 93 c7 21 	sts	0x21C7, r25	; 0x8021c7 <tc_tcd0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    6036:	3b c0       	rjmp	.+118    	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_ovf_callback = callback;
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    6038:	89 81       	ldd	r24, Y+1	; 0x01
    603a:	9a 81       	ldd	r25, Y+2	; 0x02
    603c:	80 34       	cpi	r24, 0x40	; 64
    603e:	99 40       	sbci	r25, 0x09	; 9
    6040:	39 f4       	brne	.+14     	; 0x6050 <tc_set_overflow_interrupt_callback+0x74>
		tc_tcd1_ovf_callback = callback;
    6042:	8b 81       	ldd	r24, Y+3	; 0x03
    6044:	9c 81       	ldd	r25, Y+4	; 0x04
    6046:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <tc_tcd1_ovf_callback>
    604a:	90 93 d3 21 	sts	0x21D3, r25	; 0x8021d3 <tc_tcd1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    604e:	2f c0       	rjmp	.+94     	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6050:	89 81       	ldd	r24, Y+1	; 0x01
    6052:	9a 81       	ldd	r25, Y+2	; 0x02
    6054:	81 15       	cp	r24, r1
    6056:	9a 40       	sbci	r25, 0x0A	; 10
    6058:	39 f4       	brne	.+14     	; 0x6068 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tce0_ovf_callback = callback;
    605a:	8b 81       	ldd	r24, Y+3	; 0x03
    605c:	9c 81       	ldd	r25, Y+4	; 0x04
    605e:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <tc_tce0_ovf_callback>
    6062:	90 93 db 21 	sts	0x21DB, r25	; 0x8021db <tc_tce0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    6066:	23 c0       	rjmp	.+70     	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_ovf_callback = callback;
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    6068:	89 81       	ldd	r24, Y+1	; 0x01
    606a:	9a 81       	ldd	r25, Y+2	; 0x02
    606c:	80 34       	cpi	r24, 0x40	; 64
    606e:	9a 40       	sbci	r25, 0x0A	; 10
    6070:	39 f4       	brne	.+14     	; 0x6080 <tc_set_overflow_interrupt_callback+0xa4>
		tc_tce1_ovf_callback = callback;
    6072:	8b 81       	ldd	r24, Y+3	; 0x03
    6074:	9c 81       	ldd	r25, Y+4	; 0x04
    6076:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <tc_tce1_ovf_callback>
    607a:	90 93 e7 21 	sts	0x21E7, r25	; 0x8021e7 <tc_tce1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    607e:	17 c0       	rjmp	.+46     	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6080:	89 81       	ldd	r24, Y+1	; 0x01
    6082:	9a 81       	ldd	r25, Y+2	; 0x02
    6084:	81 15       	cp	r24, r1
    6086:	9b 40       	sbci	r25, 0x0B	; 11
    6088:	39 f4       	brne	.+14     	; 0x6098 <tc_set_overflow_interrupt_callback+0xbc>
		tc_tcf0_ovf_callback = callback;
    608a:	8b 81       	ldd	r24, Y+3	; 0x03
    608c:	9c 81       	ldd	r25, Y+4	; 0x04
    608e:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <tc_tcf0_ovf_callback>
    6092:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <tc_tcf0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    6096:	0b c0       	rjmp	.+22     	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_ovf_callback = callback;
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    6098:	89 81       	ldd	r24, Y+1	; 0x01
    609a:	9a 81       	ldd	r25, Y+2	; 0x02
    609c:	80 34       	cpi	r24, 0x40	; 64
    609e:	9b 40       	sbci	r25, 0x0B	; 11
    60a0:	31 f4       	brne	.+12     	; 0x60ae <tc_set_overflow_interrupt_callback+0xd2>
		tc_tcf1_ovf_callback = callback;
    60a2:	8b 81       	ldd	r24, Y+3	; 0x03
    60a4:	9c 81       	ldd	r25, Y+4	; 0x04
    60a6:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <tc_tcf1_ovf_callback>
    60aa:	90 93 fb 21 	sts	0x21FB, r25	; 0x8021fb <tc_tcf1_ovf_callback+0x1>
	} else
#endif
	{}
}
    60ae:	00 00       	nop
    60b0:	24 96       	adiw	r28, 0x04	; 4
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	de bf       	out	0x3e, r29	; 62
    60b6:	df 91       	pop	r29
    60b8:	cf 91       	pop	r28
    60ba:	08 95       	ret

000060bc <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    60bc:	1f 92       	push	r1
    60be:	0f 92       	push	r0
    60c0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    60c4:	0f 92       	push	r0
    60c6:	11 24       	eor	r1, r1
    60c8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    60cc:	0f 92       	push	r0
    60ce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    60d2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    60d6:	0f 92       	push	r0
    60d8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    60dc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    60e0:	0f 92       	push	r0
    60e2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    60e6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60ea:	0f 92       	push	r0
    60ec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60f0:	2f 93       	push	r18
    60f2:	3f 93       	push	r19
    60f4:	4f 93       	push	r20
    60f6:	5f 93       	push	r21
    60f8:	6f 93       	push	r22
    60fa:	7f 93       	push	r23
    60fc:	8f 93       	push	r24
    60fe:	9f 93       	push	r25
    6100:	af 93       	push	r26
    6102:	bf 93       	push	r27
    6104:	ef 93       	push	r30
    6106:	ff 93       	push	r31
    6108:	cf 93       	push	r28
    610a:	df 93       	push	r29
    610c:	cd b7       	in	r28, 0x3d	; 61
    610e:	de b7       	in	r29, 0x3e	; 62
    6110:	e9 d1       	rcall	.+978    	; 0x64e4 <twim_interrupt_handler>
    6112:	00 00       	nop
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	ff 91       	pop	r31
    611a:	ef 91       	pop	r30
    611c:	bf 91       	pop	r27
    611e:	af 91       	pop	r26
    6120:	9f 91       	pop	r25
    6122:	8f 91       	pop	r24
    6124:	7f 91       	pop	r23
    6126:	6f 91       	pop	r22
    6128:	5f 91       	pop	r21
    612a:	4f 91       	pop	r20
    612c:	3f 91       	pop	r19
    612e:	2f 91       	pop	r18
    6130:	0f 90       	pop	r0
    6132:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6136:	0f 90       	pop	r0
    6138:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    613c:	0f 90       	pop	r0
    613e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6142:	0f 90       	pop	r0
    6144:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6148:	0f 90       	pop	r0
    614a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    614e:	0f 90       	pop	r0
    6150:	1f 90       	pop	r1
    6152:	18 95       	reti

00006154 <__vector_76>:
    6154:	1f 92       	push	r1
    6156:	0f 92       	push	r0
    6158:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    615c:	0f 92       	push	r0
    615e:	11 24       	eor	r1, r1
    6160:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6164:	0f 92       	push	r0
    6166:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    616a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    616e:	0f 92       	push	r0
    6170:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6174:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6178:	0f 92       	push	r0
    617a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    617e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6182:	0f 92       	push	r0
    6184:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6188:	2f 93       	push	r18
    618a:	3f 93       	push	r19
    618c:	4f 93       	push	r20
    618e:	5f 93       	push	r21
    6190:	6f 93       	push	r22
    6192:	7f 93       	push	r23
    6194:	8f 93       	push	r24
    6196:	9f 93       	push	r25
    6198:	af 93       	push	r26
    619a:	bf 93       	push	r27
    619c:	ef 93       	push	r30
    619e:	ff 93       	push	r31
    61a0:	cf 93       	push	r28
    61a2:	df 93       	push	r29
    61a4:	cd b7       	in	r28, 0x3d	; 61
    61a6:	de b7       	in	r29, 0x3e	; 62
    61a8:	9d d1       	rcall	.+826    	; 0x64e4 <twim_interrupt_handler>
    61aa:	00 00       	nop
    61ac:	df 91       	pop	r29
    61ae:	cf 91       	pop	r28
    61b0:	ff 91       	pop	r31
    61b2:	ef 91       	pop	r30
    61b4:	bf 91       	pop	r27
    61b6:	af 91       	pop	r26
    61b8:	9f 91       	pop	r25
    61ba:	8f 91       	pop	r24
    61bc:	7f 91       	pop	r23
    61be:	6f 91       	pop	r22
    61c0:	5f 91       	pop	r21
    61c2:	4f 91       	pop	r20
    61c4:	3f 91       	pop	r19
    61c6:	2f 91       	pop	r18
    61c8:	0f 90       	pop	r0
    61ca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    61ce:	0f 90       	pop	r0
    61d0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    61d4:	0f 90       	pop	r0
    61d6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    61da:	0f 90       	pop	r0
    61dc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61e0:	0f 90       	pop	r0
    61e2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    61e6:	0f 90       	pop	r0
    61e8:	1f 90       	pop	r1
    61ea:	18 95       	reti

000061ec <__vector_46>:
    61ec:	1f 92       	push	r1
    61ee:	0f 92       	push	r0
    61f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    61f4:	0f 92       	push	r0
    61f6:	11 24       	eor	r1, r1
    61f8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    61fc:	0f 92       	push	r0
    61fe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6202:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6206:	0f 92       	push	r0
    6208:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    620c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6210:	0f 92       	push	r0
    6212:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6216:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    621a:	0f 92       	push	r0
    621c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6220:	2f 93       	push	r18
    6222:	3f 93       	push	r19
    6224:	4f 93       	push	r20
    6226:	5f 93       	push	r21
    6228:	6f 93       	push	r22
    622a:	7f 93       	push	r23
    622c:	8f 93       	push	r24
    622e:	9f 93       	push	r25
    6230:	af 93       	push	r26
    6232:	bf 93       	push	r27
    6234:	ef 93       	push	r30
    6236:	ff 93       	push	r31
    6238:	cf 93       	push	r28
    623a:	df 93       	push	r29
    623c:	cd b7       	in	r28, 0x3d	; 61
    623e:	de b7       	in	r29, 0x3e	; 62
    6240:	51 d1       	rcall	.+674    	; 0x64e4 <twim_interrupt_handler>
    6242:	00 00       	nop
    6244:	df 91       	pop	r29
    6246:	cf 91       	pop	r28
    6248:	ff 91       	pop	r31
    624a:	ef 91       	pop	r30
    624c:	bf 91       	pop	r27
    624e:	af 91       	pop	r26
    6250:	9f 91       	pop	r25
    6252:	8f 91       	pop	r24
    6254:	7f 91       	pop	r23
    6256:	6f 91       	pop	r22
    6258:	5f 91       	pop	r21
    625a:	4f 91       	pop	r20
    625c:	3f 91       	pop	r19
    625e:	2f 91       	pop	r18
    6260:	0f 90       	pop	r0
    6262:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6266:	0f 90       	pop	r0
    6268:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    626c:	0f 90       	pop	r0
    626e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6272:	0f 90       	pop	r0
    6274:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6278:	0f 90       	pop	r0
    627a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    627e:	0f 90       	pop	r0
    6280:	1f 90       	pop	r1
    6282:	18 95       	reti

00006284 <__vector_107>:
    6284:	1f 92       	push	r1
    6286:	0f 92       	push	r0
    6288:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    628c:	0f 92       	push	r0
    628e:	11 24       	eor	r1, r1
    6290:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6294:	0f 92       	push	r0
    6296:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    629a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    629e:	0f 92       	push	r0
    62a0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    62a4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    62a8:	0f 92       	push	r0
    62aa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    62ae:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62b2:	0f 92       	push	r0
    62b4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62b8:	2f 93       	push	r18
    62ba:	3f 93       	push	r19
    62bc:	4f 93       	push	r20
    62be:	5f 93       	push	r21
    62c0:	6f 93       	push	r22
    62c2:	7f 93       	push	r23
    62c4:	8f 93       	push	r24
    62c6:	9f 93       	push	r25
    62c8:	af 93       	push	r26
    62ca:	bf 93       	push	r27
    62cc:	ef 93       	push	r30
    62ce:	ff 93       	push	r31
    62d0:	cf 93       	push	r28
    62d2:	df 93       	push	r29
    62d4:	cd b7       	in	r28, 0x3d	; 61
    62d6:	de b7       	in	r29, 0x3e	; 62
    62d8:	05 d1       	rcall	.+522    	; 0x64e4 <twim_interrupt_handler>
    62da:	00 00       	nop
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	ff 91       	pop	r31
    62e2:	ef 91       	pop	r30
    62e4:	bf 91       	pop	r27
    62e6:	af 91       	pop	r26
    62e8:	9f 91       	pop	r25
    62ea:	8f 91       	pop	r24
    62ec:	7f 91       	pop	r23
    62ee:	6f 91       	pop	r22
    62f0:	5f 91       	pop	r21
    62f2:	4f 91       	pop	r20
    62f4:	3f 91       	pop	r19
    62f6:	2f 91       	pop	r18
    62f8:	0f 90       	pop	r0
    62fa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62fe:	0f 90       	pop	r0
    6300:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6304:	0f 90       	pop	r0
    6306:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    630a:	0f 90       	pop	r0
    630c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6310:	0f 90       	pop	r0
    6312:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6316:	0f 90       	pop	r0
    6318:	1f 90       	pop	r1
    631a:	18 95       	reti

0000631c <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    631c:	cf 93       	push	r28
    631e:	df 93       	push	r29
    6320:	cd b7       	in	r28, 0x3d	; 61
    6322:	de b7       	in	r29, 0x3e	; 62
    6324:	28 97       	sbiw	r28, 0x08	; 8
    6326:	cd bf       	out	0x3d, r28	; 61
    6328:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    632a:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <transfer>
    632e:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <transfer+0x1>
    6332:	89 83       	std	Y+1, r24	; 0x01
    6334:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    6336:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <transfer+0x2>
    633a:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <transfer+0x3>
    633e:	8b 83       	std	Y+3, r24	; 0x03
    6340:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    6342:	20 91 06 22 	lds	r18, 0x2206	; 0x802206 <transfer+0x4>
    6346:	30 91 07 22 	lds	r19, 0x2207	; 0x802207 <transfer+0x5>
    634a:	8b 81       	ldd	r24, Y+3	; 0x03
    634c:	9c 81       	ldd	r25, Y+4	; 0x04
    634e:	fc 01       	movw	r30, r24
    6350:	84 81       	ldd	r24, Z+4	; 0x04
    6352:	95 81       	ldd	r25, Z+5	; 0x05
    6354:	28 17       	cp	r18, r24
    6356:	39 07       	cpc	r19, r25
    6358:	e4 f4       	brge	.+56     	; 0x6392 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    635a:	8b 81       	ldd	r24, Y+3	; 0x03
    635c:	9c 81       	ldd	r25, Y+4	; 0x04
    635e:	01 96       	adiw	r24, 0x01	; 1
    6360:	8d 83       	std	Y+5, r24	; 0x05
    6362:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    6364:	80 91 06 22 	lds	r24, 0x2206	; 0x802206 <transfer+0x4>
    6368:	90 91 07 22 	lds	r25, 0x2207	; 0x802207 <transfer+0x5>
    636c:	9c 01       	movw	r18, r24
    636e:	2f 5f       	subi	r18, 0xFF	; 255
    6370:	3f 4f       	sbci	r19, 0xFF	; 255
    6372:	20 93 06 22 	sts	0x2206, r18	; 0x802206 <transfer+0x4>
    6376:	30 93 07 22 	sts	0x2207, r19	; 0x802207 <transfer+0x5>
    637a:	9c 01       	movw	r18, r24
    637c:	8d 81       	ldd	r24, Y+5	; 0x05
    637e:	9e 81       	ldd	r25, Y+6	; 0x06
    6380:	82 0f       	add	r24, r18
    6382:	93 1f       	adc	r25, r19
    6384:	fc 01       	movw	r30, r24
    6386:	20 81       	ld	r18, Z
    6388:	89 81       	ldd	r24, Y+1	; 0x01
    638a:	9a 81       	ldd	r25, Y+2	; 0x02
    638c:	fc 01       	movw	r30, r24
    638e:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    6390:	3f c0       	rjmp	.+126    	; 0x6410 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    6392:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <transfer+0x6>
    6396:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <transfer+0x7>
    639a:	8b 81       	ldd	r24, Y+3	; 0x03
    639c:	9c 81       	ldd	r25, Y+4	; 0x04
    639e:	fc 01       	movw	r30, r24
    63a0:	80 85       	ldd	r24, Z+8	; 0x08
    63a2:	91 85       	ldd	r25, Z+9	; 0x09
    63a4:	28 17       	cp	r18, r24
    63a6:	39 07       	cpc	r19, r25
    63a8:	60 f5       	brcc	.+88     	; 0x6402 <twim_write_handler+0xe6>

		if (transfer.read) {
    63aa:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <transfer+0x8>
    63ae:	88 23       	and	r24, r24
    63b0:	59 f0       	breq	.+22     	; 0x63c8 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    63b2:	89 81       	ldd	r24, Y+1	; 0x01
    63b4:	9a 81       	ldd	r25, Y+2	; 0x02
    63b6:	fc 01       	movw	r30, r24
    63b8:	86 81       	ldd	r24, Z+6	; 0x06
    63ba:	28 2f       	mov	r18, r24
    63bc:	21 60       	ori	r18, 0x01	; 1
    63be:	89 81       	ldd	r24, Y+1	; 0x01
    63c0:	9a 81       	ldd	r25, Y+2	; 0x02
    63c2:	fc 01       	movw	r30, r24
    63c4:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    63c6:	24 c0       	rjmp	.+72     	; 0x6410 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    63c8:	8b 81       	ldd	r24, Y+3	; 0x03
    63ca:	9c 81       	ldd	r25, Y+4	; 0x04
    63cc:	fc 01       	movw	r30, r24
    63ce:	86 81       	ldd	r24, Z+6	; 0x06
    63d0:	97 81       	ldd	r25, Z+7	; 0x07
    63d2:	8f 83       	std	Y+7, r24	; 0x07
    63d4:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    63d6:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <transfer+0x6>
    63da:	90 91 09 22 	lds	r25, 0x2209	; 0x802209 <transfer+0x7>
    63de:	9c 01       	movw	r18, r24
    63e0:	2f 5f       	subi	r18, 0xFF	; 255
    63e2:	3f 4f       	sbci	r19, 0xFF	; 255
    63e4:	20 93 08 22 	sts	0x2208, r18	; 0x802208 <transfer+0x6>
    63e8:	30 93 09 22 	sts	0x2209, r19	; 0x802209 <transfer+0x7>
    63ec:	2f 81       	ldd	r18, Y+7	; 0x07
    63ee:	38 85       	ldd	r19, Y+8	; 0x08
    63f0:	82 0f       	add	r24, r18
    63f2:	93 1f       	adc	r25, r19
    63f4:	fc 01       	movw	r30, r24
    63f6:	20 81       	ld	r18, Z
    63f8:	89 81       	ldd	r24, Y+1	; 0x01
    63fa:	9a 81       	ldd	r25, Y+2	; 0x02
    63fc:	fc 01       	movw	r30, r24
    63fe:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    6400:	07 c0       	rjmp	.+14     	; 0x6410 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6402:	89 81       	ldd	r24, Y+1	; 0x01
    6404:	9a 81       	ldd	r25, Y+2	; 0x02
    6406:	23 e0       	ldi	r18, 0x03	; 3
    6408:	fc 01       	movw	r30, r24
    640a:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    640c:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <transfer+0xa>
	}
}
    6410:	00 00       	nop
    6412:	28 96       	adiw	r28, 0x08	; 8
    6414:	cd bf       	out	0x3d, r28	; 61
    6416:	de bf       	out	0x3e, r29	; 62
    6418:	df 91       	pop	r29
    641a:	cf 91       	pop	r28
    641c:	08 95       	ret

0000641e <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
    6422:	00 d0       	rcall	.+0      	; 0x6424 <twim_read_handler+0x6>
    6424:	00 d0       	rcall	.+0      	; 0x6426 <twim_read_handler+0x8>
    6426:	cd b7       	in	r28, 0x3d	; 61
    6428:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    642a:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <transfer>
    642e:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <transfer+0x1>
    6432:	89 83       	std	Y+1, r24	; 0x01
    6434:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    6436:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <transfer+0x2>
    643a:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <transfer+0x3>
    643e:	8b 83       	std	Y+3, r24	; 0x03
    6440:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    6442:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <transfer+0x6>
    6446:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <transfer+0x7>
    644a:	8b 81       	ldd	r24, Y+3	; 0x03
    644c:	9c 81       	ldd	r25, Y+4	; 0x04
    644e:	fc 01       	movw	r30, r24
    6450:	80 85       	ldd	r24, Z+8	; 0x08
    6452:	91 85       	ldd	r25, Z+9	; 0x09
    6454:	28 17       	cp	r18, r24
    6456:	39 07       	cpc	r19, r25
    6458:	b0 f5       	brcc	.+108    	; 0x64c6 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    645a:	8b 81       	ldd	r24, Y+3	; 0x03
    645c:	9c 81       	ldd	r25, Y+4	; 0x04
    645e:	fc 01       	movw	r30, r24
    6460:	86 81       	ldd	r24, Z+6	; 0x06
    6462:	97 81       	ldd	r25, Z+7	; 0x07
    6464:	8d 83       	std	Y+5, r24	; 0x05
    6466:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    6468:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <transfer+0x6>
    646c:	90 91 09 22 	lds	r25, 0x2209	; 0x802209 <transfer+0x7>
    6470:	9c 01       	movw	r18, r24
    6472:	2f 5f       	subi	r18, 0xFF	; 255
    6474:	3f 4f       	sbci	r19, 0xFF	; 255
    6476:	20 93 08 22 	sts	0x2208, r18	; 0x802208 <transfer+0x6>
    647a:	30 93 09 22 	sts	0x2209, r19	; 0x802209 <transfer+0x7>
    647e:	2d 81       	ldd	r18, Y+5	; 0x05
    6480:	3e 81       	ldd	r19, Y+6	; 0x06
    6482:	82 0f       	add	r24, r18
    6484:	93 1f       	adc	r25, r19
    6486:	29 81       	ldd	r18, Y+1	; 0x01
    6488:	3a 81       	ldd	r19, Y+2	; 0x02
    648a:	f9 01       	movw	r30, r18
    648c:	27 81       	ldd	r18, Z+7	; 0x07
    648e:	fc 01       	movw	r30, r24
    6490:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    6492:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <transfer+0x6>
    6496:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <transfer+0x7>
    649a:	8b 81       	ldd	r24, Y+3	; 0x03
    649c:	9c 81       	ldd	r25, Y+4	; 0x04
    649e:	fc 01       	movw	r30, r24
    64a0:	80 85       	ldd	r24, Z+8	; 0x08
    64a2:	91 85       	ldd	r25, Z+9	; 0x09
    64a4:	28 17       	cp	r18, r24
    64a6:	39 07       	cpc	r19, r25
    64a8:	30 f4       	brcc	.+12     	; 0x64b6 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    64aa:	89 81       	ldd	r24, Y+1	; 0x01
    64ac:	9a 81       	ldd	r25, Y+2	; 0x02
    64ae:	22 e0       	ldi	r18, 0x02	; 2
    64b0:	fc 01       	movw	r30, r24
    64b2:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    64b4:	10 c0       	rjmp	.+32     	; 0x64d6 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    64b6:	89 81       	ldd	r24, Y+1	; 0x01
    64b8:	9a 81       	ldd	r25, Y+2	; 0x02
    64ba:	27 e0       	ldi	r18, 0x07	; 7
    64bc:	fc 01       	movw	r30, r24
    64be:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    64c0:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    64c4:	08 c0       	rjmp	.+16     	; 0x64d6 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    64c6:	89 81       	ldd	r24, Y+1	; 0x01
    64c8:	9a 81       	ldd	r25, Y+2	; 0x02
    64ca:	23 e0       	ldi	r18, 0x03	; 3
    64cc:	fc 01       	movw	r30, r24
    64ce:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    64d0:	89 ef       	ldi	r24, 0xF9	; 249
    64d2:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <transfer+0xa>
	}
}
    64d6:	00 00       	nop
    64d8:	26 96       	adiw	r28, 0x06	; 6
    64da:	cd bf       	out	0x3d, r28	; 61
    64dc:	de bf       	out	0x3e, r29	; 62
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	08 95       	ret

000064e4 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    64e4:	cf 93       	push	r28
    64e6:	df 93       	push	r29
    64e8:	1f 92       	push	r1
    64ea:	cd b7       	in	r28, 0x3d	; 61
    64ec:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    64ee:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <transfer>
    64f2:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <transfer+0x1>
    64f6:	fc 01       	movw	r30, r24
    64f8:	84 81       	ldd	r24, Z+4	; 0x04
    64fa:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    64fc:	89 81       	ldd	r24, Y+1	; 0x01
    64fe:	88 2f       	mov	r24, r24
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	88 70       	andi	r24, 0x08	; 8
    6504:	99 27       	eor	r25, r25
    6506:	89 2b       	or	r24, r25
    6508:	99 f0       	breq	.+38     	; 0x6530 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    650a:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <transfer>
    650e:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <transfer+0x1>
    6512:	29 81       	ldd	r18, Y+1	; 0x01
    6514:	28 60       	ori	r18, 0x08	; 8
    6516:	fc 01       	movw	r30, r24
    6518:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    651a:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <transfer>
    651e:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <transfer+0x1>
    6522:	23 e0       	ldi	r18, 0x03	; 3
    6524:	fc 01       	movw	r30, r24
    6526:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    6528:	86 ef       	ldi	r24, 0xF6	; 246
    652a:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    652e:	2a c0       	rjmp	.+84     	; 0x6584 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    6530:	89 81       	ldd	r24, Y+1	; 0x01
    6532:	88 2f       	mov	r24, r24
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	84 70       	andi	r24, 0x04	; 4
    6538:	99 27       	eor	r25, r25
    653a:	89 2b       	or	r24, r25
    653c:	39 f4       	brne	.+14     	; 0x654c <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    653e:	89 81       	ldd	r24, Y+1	; 0x01
    6540:	88 2f       	mov	r24, r24
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	80 71       	andi	r24, 0x10	; 16
    6546:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    6548:	89 2b       	or	r24, r25
    654a:	59 f0       	breq	.+22     	; 0x6562 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    654c:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <transfer>
    6550:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <transfer+0x1>
    6554:	23 e0       	ldi	r18, 0x03	; 3
    6556:	fc 01       	movw	r30, r24
    6558:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    655a:	8f ef       	ldi	r24, 0xFF	; 255
    655c:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    6560:	11 c0       	rjmp	.+34     	; 0x6584 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    6562:	89 81       	ldd	r24, Y+1	; 0x01
    6564:	88 2f       	mov	r24, r24
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	80 74       	andi	r24, 0x40	; 64
    656a:	99 27       	eor	r25, r25
    656c:	89 2b       	or	r24, r25
    656e:	11 f0       	breq	.+4      	; 0x6574 <twim_interrupt_handler+0x90>

		twim_write_handler();
    6570:	d5 de       	rcall	.-598    	; 0x631c <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    6572:	08 c0       	rjmp	.+16     	; 0x6584 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    6574:	89 81       	ldd	r24, Y+1	; 0x01
    6576:	88 23       	and	r24, r24

		twim_read_handler();
    6578:	14 f4       	brge	.+4      	; 0x657e <twim_interrupt_handler+0x9a>
    657a:	51 df       	rcall	.-350    	; 0x641e <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    657c:	03 c0       	rjmp	.+6      	; 0x6584 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    657e:	8b ef       	ldi	r24, 0xFB	; 251
    6580:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <transfer+0xa>
	}
}
    6584:	00 00       	nop
    6586:	0f 90       	pop	r0
    6588:	df 91       	pop	r29
    658a:	cf 91       	pop	r28
    658c:	08 95       	ret

0000658e <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    658e:	cf 93       	push	r28
    6590:	df 93       	push	r29
    6592:	1f 92       	push	r1
    6594:	1f 92       	push	r1
    6596:	cd b7       	in	r28, 0x3d	; 61
    6598:	de b7       	in	r29, 0x3e	; 62
    659a:	89 83       	std	Y+1, r24	; 0x01
    659c:	9a 83       	std	Y+2, r25	; 0x02
    659e:	89 81       	ldd	r24, Y+1	; 0x01
    65a0:	9a 81       	ldd	r25, Y+2	; 0x02
    65a2:	fc 01       	movw	r30, r24
    65a4:	84 81       	ldd	r24, Z+4	; 0x04
    65a6:	28 2f       	mov	r18, r24
    65a8:	20 61       	ori	r18, 0x10	; 16
    65aa:	89 81       	ldd	r24, Y+1	; 0x01
    65ac:	9a 81       	ldd	r25, Y+2	; 0x02
    65ae:	fc 01       	movw	r30, r24
    65b0:	24 83       	std	Z+4, r18	; 0x04
    65b2:	00 00       	nop
    65b4:	0f 90       	pop	r0
    65b6:	0f 90       	pop	r0
    65b8:	df 91       	pop	r29
    65ba:	cf 91       	pop	r28
    65bc:	08 95       	ret

000065be <usart_format_set>:
    65be:	cf 93       	push	r28
    65c0:	df 93       	push	r29
    65c2:	cd b7       	in	r28, 0x3d	; 61
    65c4:	de b7       	in	r29, 0x3e	; 62
    65c6:	25 97       	sbiw	r28, 0x05	; 5
    65c8:	cd bf       	out	0x3d, r28	; 61
    65ca:	de bf       	out	0x3e, r29	; 62
    65cc:	89 83       	std	Y+1, r24	; 0x01
    65ce:	9a 83       	std	Y+2, r25	; 0x02
    65d0:	6b 83       	std	Y+3, r22	; 0x03
    65d2:	4c 83       	std	Y+4, r20	; 0x04
    65d4:	2d 83       	std	Y+5, r18	; 0x05
    65d6:	9b 81       	ldd	r25, Y+3	; 0x03
    65d8:	8c 81       	ldd	r24, Y+4	; 0x04
    65da:	89 2b       	or	r24, r25
    65dc:	98 2f       	mov	r25, r24
    65de:	8d 81       	ldd	r24, Y+5	; 0x05
    65e0:	88 23       	and	r24, r24
    65e2:	11 f0       	breq	.+4      	; 0x65e8 <usart_format_set+0x2a>
    65e4:	88 e0       	ldi	r24, 0x08	; 8
    65e6:	01 c0       	rjmp	.+2      	; 0x65ea <usart_format_set+0x2c>
    65e8:	80 e0       	ldi	r24, 0x00	; 0
    65ea:	89 2b       	or	r24, r25
    65ec:	28 2f       	mov	r18, r24
    65ee:	89 81       	ldd	r24, Y+1	; 0x01
    65f0:	9a 81       	ldd	r25, Y+2	; 0x02
    65f2:	fc 01       	movw	r30, r24
    65f4:	25 83       	std	Z+5, r18	; 0x05
    65f6:	00 00       	nop
    65f8:	25 96       	adiw	r28, 0x05	; 5
    65fa:	cd bf       	out	0x3d, r28	; 61
    65fc:	de bf       	out	0x3e, r29	; 62
    65fe:	df 91       	pop	r29
    6600:	cf 91       	pop	r28
    6602:	08 95       	ret

00006604 <usart_tx_enable>:
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	1f 92       	push	r1
    660a:	1f 92       	push	r1
    660c:	cd b7       	in	r28, 0x3d	; 61
    660e:	de b7       	in	r29, 0x3e	; 62
    6610:	89 83       	std	Y+1, r24	; 0x01
    6612:	9a 83       	std	Y+2, r25	; 0x02
    6614:	89 81       	ldd	r24, Y+1	; 0x01
    6616:	9a 81       	ldd	r25, Y+2	; 0x02
    6618:	fc 01       	movw	r30, r24
    661a:	84 81       	ldd	r24, Z+4	; 0x04
    661c:	28 2f       	mov	r18, r24
    661e:	28 60       	ori	r18, 0x08	; 8
    6620:	89 81       	ldd	r24, Y+1	; 0x01
    6622:	9a 81       	ldd	r25, Y+2	; 0x02
    6624:	fc 01       	movw	r30, r24
    6626:	24 83       	std	Z+4, r18	; 0x04
    6628:	00 00       	nop
    662a:	0f 90       	pop	r0
    662c:	0f 90       	pop	r0
    662e:	df 91       	pop	r29
    6630:	cf 91       	pop	r28
    6632:	08 95       	ret

00006634 <usart_set_mode>:
    6634:	cf 93       	push	r28
    6636:	df 93       	push	r29
    6638:	00 d0       	rcall	.+0      	; 0x663a <usart_set_mode+0x6>
    663a:	cd b7       	in	r28, 0x3d	; 61
    663c:	de b7       	in	r29, 0x3e	; 62
    663e:	89 83       	std	Y+1, r24	; 0x01
    6640:	9a 83       	std	Y+2, r25	; 0x02
    6642:	6b 83       	std	Y+3, r22	; 0x03
    6644:	89 81       	ldd	r24, Y+1	; 0x01
    6646:	9a 81       	ldd	r25, Y+2	; 0x02
    6648:	fc 01       	movw	r30, r24
    664a:	85 81       	ldd	r24, Z+5	; 0x05
    664c:	98 2f       	mov	r25, r24
    664e:	9f 73       	andi	r25, 0x3F	; 63
    6650:	8b 81       	ldd	r24, Y+3	; 0x03
    6652:	89 2b       	or	r24, r25
    6654:	28 2f       	mov	r18, r24
    6656:	89 81       	ldd	r24, Y+1	; 0x01
    6658:	9a 81       	ldd	r25, Y+2	; 0x02
    665a:	fc 01       	movw	r30, r24
    665c:	25 83       	std	Z+5, r18	; 0x05
    665e:	00 00       	nop
    6660:	23 96       	adiw	r28, 0x03	; 3
    6662:	cd bf       	out	0x3d, r28	; 61
    6664:	de bf       	out	0x3e, r29	; 62
    6666:	df 91       	pop	r29
    6668:	cf 91       	pop	r28
    666a:	08 95       	ret

0000666c <usart_data_register_is_empty>:
    666c:	cf 93       	push	r28
    666e:	df 93       	push	r29
    6670:	1f 92       	push	r1
    6672:	1f 92       	push	r1
    6674:	cd b7       	in	r28, 0x3d	; 61
    6676:	de b7       	in	r29, 0x3e	; 62
    6678:	89 83       	std	Y+1, r24	; 0x01
    667a:	9a 83       	std	Y+2, r25	; 0x02
    667c:	89 81       	ldd	r24, Y+1	; 0x01
    667e:	9a 81       	ldd	r25, Y+2	; 0x02
    6680:	fc 01       	movw	r30, r24
    6682:	81 81       	ldd	r24, Z+1	; 0x01
    6684:	88 2f       	mov	r24, r24
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	80 72       	andi	r24, 0x20	; 32
    668a:	99 27       	eor	r25, r25
    668c:	21 e0       	ldi	r18, 0x01	; 1
    668e:	89 2b       	or	r24, r25
    6690:	09 f4       	brne	.+2      	; 0x6694 <usart_data_register_is_empty+0x28>
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	82 2f       	mov	r24, r18
    6696:	0f 90       	pop	r0
    6698:	0f 90       	pop	r0
    669a:	df 91       	pop	r29
    669c:	cf 91       	pop	r28
    669e:	08 95       	ret

000066a0 <usart_rx_is_complete>:
    66a0:	cf 93       	push	r28
    66a2:	df 93       	push	r29
    66a4:	1f 92       	push	r1
    66a6:	1f 92       	push	r1
    66a8:	cd b7       	in	r28, 0x3d	; 61
    66aa:	de b7       	in	r29, 0x3e	; 62
    66ac:	89 83       	std	Y+1, r24	; 0x01
    66ae:	9a 83       	std	Y+2, r25	; 0x02
    66b0:	89 81       	ldd	r24, Y+1	; 0x01
    66b2:	9a 81       	ldd	r25, Y+2	; 0x02
    66b4:	fc 01       	movw	r30, r24
    66b6:	81 81       	ldd	r24, Z+1	; 0x01
    66b8:	88 2f       	mov	r24, r24
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	80 78       	andi	r24, 0x80	; 128
    66be:	99 27       	eor	r25, r25
    66c0:	21 e0       	ldi	r18, 0x01	; 1
    66c2:	89 2b       	or	r24, r25
    66c4:	09 f4       	brne	.+2      	; 0x66c8 <usart_rx_is_complete+0x28>
    66c6:	20 e0       	ldi	r18, 0x00	; 0
    66c8:	82 2f       	mov	r24, r18
    66ca:	0f 90       	pop	r0
    66cc:	0f 90       	pop	r0
    66ce:	df 91       	pop	r29
    66d0:	cf 91       	pop	r28
    66d2:	08 95       	ret

000066d4 <sysclk_get_main_hz>:
    66d4:	cf 93       	push	r28
    66d6:	df 93       	push	r29
    66d8:	cd b7       	in	r28, 0x3d	; 61
    66da:	de b7       	in	r29, 0x3e	; 62
    66dc:	80 e0       	ldi	r24, 0x00	; 0
    66de:	9c e6       	ldi	r25, 0x6C	; 108
    66e0:	ac ed       	ldi	r26, 0xDC	; 220
    66e2:	b2 e0       	ldi	r27, 0x02	; 2
    66e4:	bc 01       	movw	r22, r24
    66e6:	cd 01       	movw	r24, r26
    66e8:	df 91       	pop	r29
    66ea:	cf 91       	pop	r28
    66ec:	08 95       	ret

000066ee <sysclk_get_per4_hz>:
    66ee:	cf 93       	push	r28
    66f0:	df 93       	push	r29
    66f2:	1f 92       	push	r1
    66f4:	cd b7       	in	r28, 0x3d	; 61
    66f6:	de b7       	in	r29, 0x3e	; 62
    66f8:	19 82       	std	Y+1, r1	; 0x01
    66fa:	ec df       	rcall	.-40     	; 0x66d4 <sysclk_get_main_hz>
    66fc:	dc 01       	movw	r26, r24
    66fe:	cb 01       	movw	r24, r22
    6700:	29 81       	ldd	r18, Y+1	; 0x01
    6702:	22 2f       	mov	r18, r18
    6704:	30 e0       	ldi	r19, 0x00	; 0
    6706:	04 c0       	rjmp	.+8      	; 0x6710 <sysclk_get_per4_hz+0x22>
    6708:	b6 95       	lsr	r27
    670a:	a7 95       	ror	r26
    670c:	97 95       	ror	r25
    670e:	87 95       	ror	r24
    6710:	2a 95       	dec	r18
    6712:	d2 f7       	brpl	.-12     	; 0x6708 <sysclk_get_per4_hz+0x1a>
    6714:	bc 01       	movw	r22, r24
    6716:	cd 01       	movw	r24, r26
    6718:	0f 90       	pop	r0
    671a:	df 91       	pop	r29
    671c:	cf 91       	pop	r28
    671e:	08 95       	ret

00006720 <sysclk_get_per2_hz>:
    6720:	cf 93       	push	r28
    6722:	df 93       	push	r29
    6724:	cd b7       	in	r28, 0x3d	; 61
    6726:	de b7       	in	r29, 0x3e	; 62
    6728:	e2 df       	rcall	.-60     	; 0x66ee <sysclk_get_per4_hz>
    672a:	dc 01       	movw	r26, r24
    672c:	cb 01       	movw	r24, r22
    672e:	bc 01       	movw	r22, r24
    6730:	cd 01       	movw	r24, r26
    6732:	df 91       	pop	r29
    6734:	cf 91       	pop	r28
    6736:	08 95       	ret

00006738 <sysclk_get_per_hz>:
    6738:	cf 93       	push	r28
    673a:	df 93       	push	r29
    673c:	cd b7       	in	r28, 0x3d	; 61
    673e:	de b7       	in	r29, 0x3e	; 62
    6740:	ef df       	rcall	.-34     	; 0x6720 <sysclk_get_per2_hz>
    6742:	dc 01       	movw	r26, r24
    6744:	cb 01       	movw	r24, r22
    6746:	bc 01       	movw	r22, r24
    6748:	cd 01       	movw	r24, r26
    674a:	df 91       	pop	r29
    674c:	cf 91       	pop	r28
    674e:	08 95       	ret

00006750 <sysclk_enable_peripheral_clock>:
    6750:	cf 93       	push	r28
    6752:	df 93       	push	r29
    6754:	1f 92       	push	r1
    6756:	1f 92       	push	r1
    6758:	cd b7       	in	r28, 0x3d	; 61
    675a:	de b7       	in	r29, 0x3e	; 62
    675c:	89 83       	std	Y+1, r24	; 0x01
    675e:	9a 83       	std	Y+2, r25	; 0x02
    6760:	89 81       	ldd	r24, Y+1	; 0x01
    6762:	9a 81       	ldd	r25, Y+2	; 0x02
    6764:	89 2b       	or	r24, r25
    6766:	09 f4       	brne	.+2      	; 0x676a <sysclk_enable_peripheral_clock+0x1a>
    6768:	85 c1       	rjmp	.+778    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    676a:	89 81       	ldd	r24, Y+1	; 0x01
    676c:	9a 81       	ldd	r25, Y+2	; 0x02
    676e:	80 3c       	cpi	r24, 0xC0	; 192
    6770:	91 05       	cpc	r25, r1
    6772:	29 f4       	brne	.+10     	; 0x677e <sysclk_enable_peripheral_clock+0x2e>
    6774:	60 e1       	ldi	r22, 0x10	; 16
    6776:	80 e0       	ldi	r24, 0x00	; 0
    6778:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    677c:	7b c1       	rjmp	.+758    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    677e:	89 81       	ldd	r24, Y+1	; 0x01
    6780:	9a 81       	ldd	r25, Y+2	; 0x02
    6782:	80 34       	cpi	r24, 0x40	; 64
    6784:	94 40       	sbci	r25, 0x04	; 4
    6786:	29 f4       	brne	.+10     	; 0x6792 <sysclk_enable_peripheral_clock+0x42>
    6788:	68 e0       	ldi	r22, 0x08	; 8
    678a:	80 e0       	ldi	r24, 0x00	; 0
    678c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6790:	71 c1       	rjmp	.+738    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6792:	89 81       	ldd	r24, Y+1	; 0x01
    6794:	9a 81       	ldd	r25, Y+2	; 0x02
    6796:	81 15       	cp	r24, r1
    6798:	94 40       	sbci	r25, 0x04	; 4
    679a:	29 f4       	brne	.+10     	; 0x67a6 <sysclk_enable_peripheral_clock+0x56>
    679c:	64 e0       	ldi	r22, 0x04	; 4
    679e:	80 e0       	ldi	r24, 0x00	; 0
    67a0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    67a4:	67 c1       	rjmp	.+718    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    67a6:	89 81       	ldd	r24, Y+1	; 0x01
    67a8:	9a 81       	ldd	r25, Y+2	; 0x02
    67aa:	80 38       	cpi	r24, 0x80	; 128
    67ac:	91 40       	sbci	r25, 0x01	; 1
    67ae:	29 f4       	brne	.+10     	; 0x67ba <sysclk_enable_peripheral_clock+0x6a>
    67b0:	62 e0       	ldi	r22, 0x02	; 2
    67b2:	80 e0       	ldi	r24, 0x00	; 0
    67b4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    67b8:	5d c1       	rjmp	.+698    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    67ba:	89 81       	ldd	r24, Y+1	; 0x01
    67bc:	9a 81       	ldd	r25, Y+2	; 0x02
    67be:	81 15       	cp	r24, r1
    67c0:	91 40       	sbci	r25, 0x01	; 1
    67c2:	29 f4       	brne	.+10     	; 0x67ce <sysclk_enable_peripheral_clock+0x7e>
    67c4:	61 e0       	ldi	r22, 0x01	; 1
    67c6:	80 e0       	ldi	r24, 0x00	; 0
    67c8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    67cc:	53 c1       	rjmp	.+678    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    67ce:	89 81       	ldd	r24, Y+1	; 0x01
    67d0:	9a 81       	ldd	r25, Y+2	; 0x02
    67d2:	80 38       	cpi	r24, 0x80	; 128
    67d4:	93 40       	sbci	r25, 0x03	; 3
    67d6:	29 f4       	brne	.+10     	; 0x67e2 <sysclk_enable_peripheral_clock+0x92>
    67d8:	61 e0       	ldi	r22, 0x01	; 1
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    67e0:	49 c1       	rjmp	.+658    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    67e2:	89 81       	ldd	r24, Y+1	; 0x01
    67e4:	9a 81       	ldd	r25, Y+2	; 0x02
    67e6:	80 39       	cpi	r24, 0x90	; 144
    67e8:	93 40       	sbci	r25, 0x03	; 3
    67ea:	29 f4       	brne	.+10     	; 0x67f6 <sysclk_enable_peripheral_clock+0xa6>
    67ec:	61 e0       	ldi	r22, 0x01	; 1
    67ee:	82 e0       	ldi	r24, 0x02	; 2
    67f0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    67f4:	3f c1       	rjmp	.+638    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    67f6:	89 81       	ldd	r24, Y+1	; 0x01
    67f8:	9a 81       	ldd	r25, Y+2	; 0x02
    67fa:	81 15       	cp	r24, r1
    67fc:	92 40       	sbci	r25, 0x02	; 2
    67fe:	29 f4       	brne	.+10     	; 0x680a <sysclk_enable_peripheral_clock+0xba>
    6800:	62 e0       	ldi	r22, 0x02	; 2
    6802:	81 e0       	ldi	r24, 0x01	; 1
    6804:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6808:	35 c1       	rjmp	.+618    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    680a:	89 81       	ldd	r24, Y+1	; 0x01
    680c:	9a 81       	ldd	r25, Y+2	; 0x02
    680e:	80 34       	cpi	r24, 0x40	; 64
    6810:	92 40       	sbci	r25, 0x02	; 2
    6812:	29 f4       	brne	.+10     	; 0x681e <sysclk_enable_peripheral_clock+0xce>
    6814:	62 e0       	ldi	r22, 0x02	; 2
    6816:	82 e0       	ldi	r24, 0x02	; 2
    6818:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    681c:	2b c1       	rjmp	.+598    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    681e:	89 81       	ldd	r24, Y+1	; 0x01
    6820:	9a 81       	ldd	r25, Y+2	; 0x02
    6822:	81 15       	cp	r24, r1
    6824:	93 40       	sbci	r25, 0x03	; 3
    6826:	29 f4       	brne	.+10     	; 0x6832 <sysclk_enable_peripheral_clock+0xe2>
    6828:	64 e0       	ldi	r22, 0x04	; 4
    682a:	81 e0       	ldi	r24, 0x01	; 1
    682c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6830:	21 c1       	rjmp	.+578    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6832:	89 81       	ldd	r24, Y+1	; 0x01
    6834:	9a 81       	ldd	r25, Y+2	; 0x02
    6836:	80 32       	cpi	r24, 0x20	; 32
    6838:	93 40       	sbci	r25, 0x03	; 3
    683a:	29 f4       	brne	.+10     	; 0x6846 <sysclk_enable_peripheral_clock+0xf6>
    683c:	64 e0       	ldi	r22, 0x04	; 4
    683e:	82 e0       	ldi	r24, 0x02	; 2
    6840:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6844:	17 c1       	rjmp	.+558    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6846:	89 81       	ldd	r24, Y+1	; 0x01
    6848:	9a 81       	ldd	r25, Y+2	; 0x02
    684a:	81 15       	cp	r24, r1
    684c:	98 40       	sbci	r25, 0x08	; 8
    684e:	29 f4       	brne	.+10     	; 0x685a <sysclk_enable_peripheral_clock+0x10a>
    6850:	61 e0       	ldi	r22, 0x01	; 1
    6852:	83 e0       	ldi	r24, 0x03	; 3
    6854:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6858:	0d c1       	rjmp	.+538    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    685a:	89 81       	ldd	r24, Y+1	; 0x01
    685c:	9a 81       	ldd	r25, Y+2	; 0x02
    685e:	81 15       	cp	r24, r1
    6860:	99 40       	sbci	r25, 0x09	; 9
    6862:	29 f4       	brne	.+10     	; 0x686e <sysclk_enable_peripheral_clock+0x11e>
    6864:	61 e0       	ldi	r22, 0x01	; 1
    6866:	84 e0       	ldi	r24, 0x04	; 4
    6868:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    686c:	03 c1       	rjmp	.+518    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    686e:	89 81       	ldd	r24, Y+1	; 0x01
    6870:	9a 81       	ldd	r25, Y+2	; 0x02
    6872:	81 15       	cp	r24, r1
    6874:	9a 40       	sbci	r25, 0x0A	; 10
    6876:	29 f4       	brne	.+10     	; 0x6882 <sysclk_enable_peripheral_clock+0x132>
    6878:	61 e0       	ldi	r22, 0x01	; 1
    687a:	85 e0       	ldi	r24, 0x05	; 5
    687c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6880:	f9 c0       	rjmp	.+498    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6882:	89 81       	ldd	r24, Y+1	; 0x01
    6884:	9a 81       	ldd	r25, Y+2	; 0x02
    6886:	81 15       	cp	r24, r1
    6888:	9b 40       	sbci	r25, 0x0B	; 11
    688a:	29 f4       	brne	.+10     	; 0x6896 <sysclk_enable_peripheral_clock+0x146>
    688c:	61 e0       	ldi	r22, 0x01	; 1
    688e:	86 e0       	ldi	r24, 0x06	; 6
    6890:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6894:	ef c0       	rjmp	.+478    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6896:	89 81       	ldd	r24, Y+1	; 0x01
    6898:	9a 81       	ldd	r25, Y+2	; 0x02
    689a:	80 34       	cpi	r24, 0x40	; 64
    689c:	98 40       	sbci	r25, 0x08	; 8
    689e:	29 f4       	brne	.+10     	; 0x68aa <sysclk_enable_peripheral_clock+0x15a>
    68a0:	62 e0       	ldi	r22, 0x02	; 2
    68a2:	83 e0       	ldi	r24, 0x03	; 3
    68a4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    68a8:	e5 c0       	rjmp	.+458    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    68aa:	89 81       	ldd	r24, Y+1	; 0x01
    68ac:	9a 81       	ldd	r25, Y+2	; 0x02
    68ae:	80 34       	cpi	r24, 0x40	; 64
    68b0:	99 40       	sbci	r25, 0x09	; 9
    68b2:	29 f4       	brne	.+10     	; 0x68be <sysclk_enable_peripheral_clock+0x16e>
    68b4:	62 e0       	ldi	r22, 0x02	; 2
    68b6:	84 e0       	ldi	r24, 0x04	; 4
    68b8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    68bc:	db c0       	rjmp	.+438    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    68be:	89 81       	ldd	r24, Y+1	; 0x01
    68c0:	9a 81       	ldd	r25, Y+2	; 0x02
    68c2:	80 34       	cpi	r24, 0x40	; 64
    68c4:	9a 40       	sbci	r25, 0x0A	; 10
    68c6:	29 f4       	brne	.+10     	; 0x68d2 <sysclk_enable_peripheral_clock+0x182>
    68c8:	62 e0       	ldi	r22, 0x02	; 2
    68ca:	85 e0       	ldi	r24, 0x05	; 5
    68cc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    68d0:	d1 c0       	rjmp	.+418    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    68d2:	89 81       	ldd	r24, Y+1	; 0x01
    68d4:	9a 81       	ldd	r25, Y+2	; 0x02
    68d6:	80 34       	cpi	r24, 0x40	; 64
    68d8:	9b 40       	sbci	r25, 0x0B	; 11
    68da:	29 f4       	brne	.+10     	; 0x68e6 <sysclk_enable_peripheral_clock+0x196>
    68dc:	62 e0       	ldi	r22, 0x02	; 2
    68de:	86 e0       	ldi	r24, 0x06	; 6
    68e0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    68e4:	c7 c0       	rjmp	.+398    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    68e6:	89 81       	ldd	r24, Y+1	; 0x01
    68e8:	9a 81       	ldd	r25, Y+2	; 0x02
    68ea:	80 39       	cpi	r24, 0x90	; 144
    68ec:	98 40       	sbci	r25, 0x08	; 8
    68ee:	29 f4       	brne	.+10     	; 0x68fa <sysclk_enable_peripheral_clock+0x1aa>
    68f0:	64 e0       	ldi	r22, 0x04	; 4
    68f2:	83 e0       	ldi	r24, 0x03	; 3
    68f4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    68f8:	bd c0       	rjmp	.+378    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    68fa:	89 81       	ldd	r24, Y+1	; 0x01
    68fc:	9a 81       	ldd	r25, Y+2	; 0x02
    68fe:	80 39       	cpi	r24, 0x90	; 144
    6900:	99 40       	sbci	r25, 0x09	; 9
    6902:	29 f4       	brne	.+10     	; 0x690e <sysclk_enable_peripheral_clock+0x1be>
    6904:	64 e0       	ldi	r22, 0x04	; 4
    6906:	84 e0       	ldi	r24, 0x04	; 4
    6908:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    690c:	b3 c0       	rjmp	.+358    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    690e:	89 81       	ldd	r24, Y+1	; 0x01
    6910:	9a 81       	ldd	r25, Y+2	; 0x02
    6912:	80 39       	cpi	r24, 0x90	; 144
    6914:	9a 40       	sbci	r25, 0x0A	; 10
    6916:	29 f4       	brne	.+10     	; 0x6922 <sysclk_enable_peripheral_clock+0x1d2>
    6918:	64 e0       	ldi	r22, 0x04	; 4
    691a:	85 e0       	ldi	r24, 0x05	; 5
    691c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6920:	a9 c0       	rjmp	.+338    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6922:	89 81       	ldd	r24, Y+1	; 0x01
    6924:	9a 81       	ldd	r25, Y+2	; 0x02
    6926:	80 39       	cpi	r24, 0x90	; 144
    6928:	9b 40       	sbci	r25, 0x0B	; 11
    692a:	29 f4       	brne	.+10     	; 0x6936 <sysclk_enable_peripheral_clock+0x1e6>
    692c:	64 e0       	ldi	r22, 0x04	; 4
    692e:	86 e0       	ldi	r24, 0x06	; 6
    6930:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6934:	9f c0       	rjmp	.+318    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6936:	89 81       	ldd	r24, Y+1	; 0x01
    6938:	9a 81       	ldd	r25, Y+2	; 0x02
    693a:	80 3c       	cpi	r24, 0xC0	; 192
    693c:	98 40       	sbci	r25, 0x08	; 8
    693e:	29 f4       	brne	.+10     	; 0x694a <sysclk_enable_peripheral_clock+0x1fa>
    6940:	68 e0       	ldi	r22, 0x08	; 8
    6942:	83 e0       	ldi	r24, 0x03	; 3
    6944:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6948:	95 c0       	rjmp	.+298    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    694a:	89 81       	ldd	r24, Y+1	; 0x01
    694c:	9a 81       	ldd	r25, Y+2	; 0x02
    694e:	80 3c       	cpi	r24, 0xC0	; 192
    6950:	99 40       	sbci	r25, 0x09	; 9
    6952:	29 f4       	brne	.+10     	; 0x695e <sysclk_enable_peripheral_clock+0x20e>
    6954:	68 e0       	ldi	r22, 0x08	; 8
    6956:	84 e0       	ldi	r24, 0x04	; 4
    6958:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    695c:	8b c0       	rjmp	.+278    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    695e:	89 81       	ldd	r24, Y+1	; 0x01
    6960:	9a 81       	ldd	r25, Y+2	; 0x02
    6962:	80 3c       	cpi	r24, 0xC0	; 192
    6964:	9a 40       	sbci	r25, 0x0A	; 10
    6966:	29 f4       	brne	.+10     	; 0x6972 <sysclk_enable_peripheral_clock+0x222>
    6968:	68 e0       	ldi	r22, 0x08	; 8
    696a:	85 e0       	ldi	r24, 0x05	; 5
    696c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6970:	81 c0       	rjmp	.+258    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6972:	89 81       	ldd	r24, Y+1	; 0x01
    6974:	9a 81       	ldd	r25, Y+2	; 0x02
    6976:	80 3c       	cpi	r24, 0xC0	; 192
    6978:	9b 40       	sbci	r25, 0x0B	; 11
    697a:	29 f4       	brne	.+10     	; 0x6986 <sysclk_enable_peripheral_clock+0x236>
    697c:	68 e0       	ldi	r22, 0x08	; 8
    697e:	86 e0       	ldi	r24, 0x06	; 6
    6980:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6984:	77 c0       	rjmp	.+238    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6986:	89 81       	ldd	r24, Y+1	; 0x01
    6988:	9a 81       	ldd	r25, Y+2	; 0x02
    698a:	80 3a       	cpi	r24, 0xA0	; 160
    698c:	98 40       	sbci	r25, 0x08	; 8
    698e:	29 f4       	brne	.+10     	; 0x699a <sysclk_enable_peripheral_clock+0x24a>
    6990:	60 e1       	ldi	r22, 0x10	; 16
    6992:	83 e0       	ldi	r24, 0x03	; 3
    6994:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6998:	6d c0       	rjmp	.+218    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    699a:	89 81       	ldd	r24, Y+1	; 0x01
    699c:	9a 81       	ldd	r25, Y+2	; 0x02
    699e:	80 3a       	cpi	r24, 0xA0	; 160
    69a0:	99 40       	sbci	r25, 0x09	; 9
    69a2:	29 f4       	brne	.+10     	; 0x69ae <sysclk_enable_peripheral_clock+0x25e>
    69a4:	60 e1       	ldi	r22, 0x10	; 16
    69a6:	84 e0       	ldi	r24, 0x04	; 4
    69a8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    69ac:	63 c0       	rjmp	.+198    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    69ae:	89 81       	ldd	r24, Y+1	; 0x01
    69b0:	9a 81       	ldd	r25, Y+2	; 0x02
    69b2:	80 3a       	cpi	r24, 0xA0	; 160
    69b4:	9a 40       	sbci	r25, 0x0A	; 10
    69b6:	29 f4       	brne	.+10     	; 0x69c2 <sysclk_enable_peripheral_clock+0x272>
    69b8:	60 e1       	ldi	r22, 0x10	; 16
    69ba:	85 e0       	ldi	r24, 0x05	; 5
    69bc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    69c0:	59 c0       	rjmp	.+178    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    69c2:	89 81       	ldd	r24, Y+1	; 0x01
    69c4:	9a 81       	ldd	r25, Y+2	; 0x02
    69c6:	80 3a       	cpi	r24, 0xA0	; 160
    69c8:	9b 40       	sbci	r25, 0x0B	; 11
    69ca:	29 f4       	brne	.+10     	; 0x69d6 <sysclk_enable_peripheral_clock+0x286>
    69cc:	60 e1       	ldi	r22, 0x10	; 16
    69ce:	86 e0       	ldi	r24, 0x06	; 6
    69d0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    69d4:	4f c0       	rjmp	.+158    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    69d6:	89 81       	ldd	r24, Y+1	; 0x01
    69d8:	9a 81       	ldd	r25, Y+2	; 0x02
    69da:	80 3b       	cpi	r24, 0xB0	; 176
    69dc:	98 40       	sbci	r25, 0x08	; 8
    69de:	29 f4       	brne	.+10     	; 0x69ea <sysclk_enable_peripheral_clock+0x29a>
    69e0:	60 e2       	ldi	r22, 0x20	; 32
    69e2:	83 e0       	ldi	r24, 0x03	; 3
    69e4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    69e8:	45 c0       	rjmp	.+138    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    69ea:	89 81       	ldd	r24, Y+1	; 0x01
    69ec:	9a 81       	ldd	r25, Y+2	; 0x02
    69ee:	80 3b       	cpi	r24, 0xB0	; 176
    69f0:	99 40       	sbci	r25, 0x09	; 9
    69f2:	29 f4       	brne	.+10     	; 0x69fe <sysclk_enable_peripheral_clock+0x2ae>
    69f4:	60 e2       	ldi	r22, 0x20	; 32
    69f6:	84 e0       	ldi	r24, 0x04	; 4
    69f8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    69fc:	3b c0       	rjmp	.+118    	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    69fe:	89 81       	ldd	r24, Y+1	; 0x01
    6a00:	9a 81       	ldd	r25, Y+2	; 0x02
    6a02:	80 3b       	cpi	r24, 0xB0	; 176
    6a04:	9a 40       	sbci	r25, 0x0A	; 10
    6a06:	29 f4       	brne	.+10     	; 0x6a12 <sysclk_enable_peripheral_clock+0x2c2>
    6a08:	60 e2       	ldi	r22, 0x20	; 32
    6a0a:	85 e0       	ldi	r24, 0x05	; 5
    6a0c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6a10:	31 c0       	rjmp	.+98     	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6a12:	89 81       	ldd	r24, Y+1	; 0x01
    6a14:	9a 81       	ldd	r25, Y+2	; 0x02
    6a16:	80 3b       	cpi	r24, 0xB0	; 176
    6a18:	9b 40       	sbci	r25, 0x0B	; 11
    6a1a:	29 f4       	brne	.+10     	; 0x6a26 <sysclk_enable_peripheral_clock+0x2d6>
    6a1c:	60 e2       	ldi	r22, 0x20	; 32
    6a1e:	86 e0       	ldi	r24, 0x06	; 6
    6a20:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6a24:	27 c0       	rjmp	.+78     	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6a26:	89 81       	ldd	r24, Y+1	; 0x01
    6a28:	9a 81       	ldd	r25, Y+2	; 0x02
    6a2a:	80 38       	cpi	r24, 0x80	; 128
    6a2c:	94 40       	sbci	r25, 0x04	; 4
    6a2e:	29 f4       	brne	.+10     	; 0x6a3a <sysclk_enable_peripheral_clock+0x2ea>
    6a30:	60 e4       	ldi	r22, 0x40	; 64
    6a32:	83 e0       	ldi	r24, 0x03	; 3
    6a34:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6a38:	1d c0       	rjmp	.+58     	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6a3a:	89 81       	ldd	r24, Y+1	; 0x01
    6a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a3e:	80 39       	cpi	r24, 0x90	; 144
    6a40:	94 40       	sbci	r25, 0x04	; 4
    6a42:	29 f4       	brne	.+10     	; 0x6a4e <sysclk_enable_peripheral_clock+0x2fe>
    6a44:	60 e4       	ldi	r22, 0x40	; 64
    6a46:	84 e0       	ldi	r24, 0x04	; 4
    6a48:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6a4c:	13 c0       	rjmp	.+38     	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6a4e:	89 81       	ldd	r24, Y+1	; 0x01
    6a50:	9a 81       	ldd	r25, Y+2	; 0x02
    6a52:	80 3a       	cpi	r24, 0xA0	; 160
    6a54:	94 40       	sbci	r25, 0x04	; 4
    6a56:	29 f4       	brne	.+10     	; 0x6a62 <sysclk_enable_peripheral_clock+0x312>
    6a58:	60 e4       	ldi	r22, 0x40	; 64
    6a5a:	85 e0       	ldi	r24, 0x05	; 5
    6a5c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6a60:	09 c0       	rjmp	.+18     	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6a62:	89 81       	ldd	r24, Y+1	; 0x01
    6a64:	9a 81       	ldd	r25, Y+2	; 0x02
    6a66:	80 3b       	cpi	r24, 0xB0	; 176
    6a68:	94 40       	sbci	r25, 0x04	; 4
    6a6a:	21 f4       	brne	.+8      	; 0x6a74 <sysclk_enable_peripheral_clock+0x324>
    6a6c:	60 e4       	ldi	r22, 0x40	; 64
    6a6e:	86 e0       	ldi	r24, 0x06	; 6
    6a70:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    6a74:	00 00       	nop
    6a76:	0f 90       	pop	r0
    6a78:	0f 90       	pop	r0
    6a7a:	df 91       	pop	r29
    6a7c:	cf 91       	pop	r28
    6a7e:	08 95       	ret

00006a80 <usart_init_rs232>:
    6a80:	0f 93       	push	r16
    6a82:	1f 93       	push	r17
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	cd b7       	in	r28, 0x3d	; 61
    6a8a:	de b7       	in	r29, 0x3e	; 62
    6a8c:	25 97       	sbiw	r28, 0x05	; 5
    6a8e:	cd bf       	out	0x3d, r28	; 61
    6a90:	de bf       	out	0x3e, r29	; 62
    6a92:	8a 83       	std	Y+2, r24	; 0x02
    6a94:	9b 83       	std	Y+3, r25	; 0x03
    6a96:	6c 83       	std	Y+4, r22	; 0x04
    6a98:	7d 83       	std	Y+5, r23	; 0x05
    6a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    6a9e:	58 de       	rcall	.-848    	; 0x6750 <sysclk_enable_peripheral_clock>
    6aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    6aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    6aa4:	60 e0       	ldi	r22, 0x00	; 0
    6aa6:	c6 dd       	rcall	.-1140   	; 0x6634 <usart_set_mode>
    6aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    6aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    6aac:	fc 01       	movw	r30, r24
    6aae:	26 81       	ldd	r18, Z+6	; 0x06
    6ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    6ab4:	fc 01       	movw	r30, r24
    6ab6:	45 81       	ldd	r20, Z+5	; 0x05
    6ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    6aba:	9d 81       	ldd	r25, Y+5	; 0x05
    6abc:	fc 01       	movw	r30, r24
    6abe:	34 81       	ldd	r19, Z+4	; 0x04
    6ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ac4:	63 2f       	mov	r22, r19
    6ac6:	7b dd       	rcall	.-1290   	; 0x65be <usart_format_set>
    6ac8:	37 de       	rcall	.-914    	; 0x6738 <sysclk_get_per_hz>
    6aca:	9b 01       	movw	r18, r22
    6acc:	ac 01       	movw	r20, r24
    6ace:	8c 81       	ldd	r24, Y+4	; 0x04
    6ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	80 81       	ld	r24, Z
    6ad6:	91 81       	ldd	r25, Z+1	; 0x01
    6ad8:	a2 81       	ldd	r26, Z+2	; 0x02
    6ada:	b3 81       	ldd	r27, Z+3	; 0x03
    6adc:	ea 81       	ldd	r30, Y+2	; 0x02
    6ade:	fb 81       	ldd	r31, Y+3	; 0x03
    6ae0:	89 01       	movw	r16, r18
    6ae2:	9a 01       	movw	r18, r20
    6ae4:	ac 01       	movw	r20, r24
    6ae6:	bd 01       	movw	r22, r26
    6ae8:	cf 01       	movw	r24, r30
    6aea:	48 d0       	rcall	.+144    	; 0x6b7c <usart_set_baudrate>
    6aec:	89 83       	std	Y+1, r24	; 0x01
    6aee:	8a 81       	ldd	r24, Y+2	; 0x02
    6af0:	9b 81       	ldd	r25, Y+3	; 0x03
    6af2:	88 dd       	rcall	.-1264   	; 0x6604 <usart_tx_enable>
    6af4:	8a 81       	ldd	r24, Y+2	; 0x02
    6af6:	9b 81       	ldd	r25, Y+3	; 0x03
    6af8:	4a dd       	rcall	.-1388   	; 0x658e <usart_rx_enable>
    6afa:	89 81       	ldd	r24, Y+1	; 0x01
    6afc:	25 96       	adiw	r28, 0x05	; 5
    6afe:	cd bf       	out	0x3d, r28	; 61
    6b00:	de bf       	out	0x3e, r29	; 62
    6b02:	df 91       	pop	r29
    6b04:	cf 91       	pop	r28
    6b06:	1f 91       	pop	r17
    6b08:	0f 91       	pop	r16
    6b0a:	08 95       	ret

00006b0c <usart_putchar>:
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	00 d0       	rcall	.+0      	; 0x6b12 <usart_putchar+0x6>
    6b12:	cd b7       	in	r28, 0x3d	; 61
    6b14:	de b7       	in	r29, 0x3e	; 62
    6b16:	89 83       	std	Y+1, r24	; 0x01
    6b18:	9a 83       	std	Y+2, r25	; 0x02
    6b1a:	6b 83       	std	Y+3, r22	; 0x03
    6b1c:	00 00       	nop
    6b1e:	89 81       	ldd	r24, Y+1	; 0x01
    6b20:	9a 81       	ldd	r25, Y+2	; 0x02
    6b22:	a4 dd       	rcall	.-1208   	; 0x666c <usart_data_register_is_empty>
    6b24:	98 2f       	mov	r25, r24
    6b26:	81 e0       	ldi	r24, 0x01	; 1
    6b28:	89 27       	eor	r24, r25
    6b2a:	88 23       	and	r24, r24
    6b2c:	c1 f7       	brne	.-16     	; 0x6b1e <usart_putchar+0x12>
    6b2e:	89 81       	ldd	r24, Y+1	; 0x01
    6b30:	9a 81       	ldd	r25, Y+2	; 0x02
    6b32:	2b 81       	ldd	r18, Y+3	; 0x03
    6b34:	fc 01       	movw	r30, r24
    6b36:	20 83       	st	Z, r18
    6b38:	80 e0       	ldi	r24, 0x00	; 0
    6b3a:	90 e0       	ldi	r25, 0x00	; 0
    6b3c:	23 96       	adiw	r28, 0x03	; 3
    6b3e:	cd bf       	out	0x3d, r28	; 61
    6b40:	de bf       	out	0x3e, r29	; 62
    6b42:	df 91       	pop	r29
    6b44:	cf 91       	pop	r28
    6b46:	08 95       	ret

00006b48 <usart_getchar>:
    6b48:	cf 93       	push	r28
    6b4a:	df 93       	push	r29
    6b4c:	1f 92       	push	r1
    6b4e:	1f 92       	push	r1
    6b50:	cd b7       	in	r28, 0x3d	; 61
    6b52:	de b7       	in	r29, 0x3e	; 62
    6b54:	89 83       	std	Y+1, r24	; 0x01
    6b56:	9a 83       	std	Y+2, r25	; 0x02
    6b58:	00 00       	nop
    6b5a:	89 81       	ldd	r24, Y+1	; 0x01
    6b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b5e:	a0 dd       	rcall	.-1216   	; 0x66a0 <usart_rx_is_complete>
    6b60:	98 2f       	mov	r25, r24
    6b62:	81 e0       	ldi	r24, 0x01	; 1
    6b64:	89 27       	eor	r24, r25
    6b66:	88 23       	and	r24, r24
    6b68:	c1 f7       	brne	.-16     	; 0x6b5a <usart_getchar+0x12>
    6b6a:	89 81       	ldd	r24, Y+1	; 0x01
    6b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b6e:	fc 01       	movw	r30, r24
    6b70:	80 81       	ld	r24, Z
    6b72:	0f 90       	pop	r0
    6b74:	0f 90       	pop	r0
    6b76:	df 91       	pop	r29
    6b78:	cf 91       	pop	r28
    6b7a:	08 95       	ret

00006b7c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    6b7c:	ef 92       	push	r14
    6b7e:	ff 92       	push	r15
    6b80:	0f 93       	push	r16
    6b82:	1f 93       	push	r17
    6b84:	cf 93       	push	r28
    6b86:	df 93       	push	r29
    6b88:	cd b7       	in	r28, 0x3d	; 61
    6b8a:	de b7       	in	r29, 0x3e	; 62
    6b8c:	6f 97       	sbiw	r28, 0x1f	; 31
    6b8e:	cd bf       	out	0x3d, r28	; 61
    6b90:	de bf       	out	0x3e, r29	; 62
    6b92:	8e 8b       	std	Y+22, r24	; 0x16
    6b94:	9f 8b       	std	Y+23, r25	; 0x17
    6b96:	48 8f       	std	Y+24, r20	; 0x18
    6b98:	59 8f       	std	Y+25, r21	; 0x19
    6b9a:	6a 8f       	std	Y+26, r22	; 0x1a
    6b9c:	7b 8f       	std	Y+27, r23	; 0x1b
    6b9e:	0c 8f       	std	Y+28, r16	; 0x1c
    6ba0:	1d 8f       	std	Y+29, r17	; 0x1d
    6ba2:	2e 8f       	std	Y+30, r18	; 0x1e
    6ba4:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    6ba6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6ba8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6baa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6bac:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6bae:	68 94       	set
    6bb0:	12 f8       	bld	r1, 2
    6bb2:	b6 95       	lsr	r27
    6bb4:	a7 95       	ror	r26
    6bb6:	97 95       	ror	r25
    6bb8:	87 95       	ror	r24
    6bba:	16 94       	lsr	r1
    6bbc:	d1 f7       	brne	.-12     	; 0x6bb2 <usart_set_baudrate+0x36>
    6bbe:	8e 87       	std	Y+14, r24	; 0x0e
    6bc0:	9f 87       	std	Y+15, r25	; 0x0f
    6bc2:	a8 8b       	std	Y+16, r26	; 0x10
    6bc4:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    6bc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6bc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6bca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6bcc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6bce:	07 2e       	mov	r0, r23
    6bd0:	76 e1       	ldi	r23, 0x16	; 22
    6bd2:	b6 95       	lsr	r27
    6bd4:	a7 95       	ror	r26
    6bd6:	97 95       	ror	r25
    6bd8:	87 95       	ror	r24
    6bda:	7a 95       	dec	r23
    6bdc:	d1 f7       	brne	.-12     	; 0x6bd2 <usart_set_baudrate+0x56>
    6bde:	70 2d       	mov	r23, r0
    6be0:	8a 87       	std	Y+10, r24	; 0x0a
    6be2:	9b 87       	std	Y+11, r25	; 0x0b
    6be4:	ac 87       	std	Y+12, r26	; 0x0c
    6be6:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    6be8:	8e 89       	ldd	r24, Y+22	; 0x16
    6bea:	9f 89       	ldd	r25, Y+23	; 0x17
    6bec:	fc 01       	movw	r30, r24
    6bee:	84 81       	ldd	r24, Z+4	; 0x04
    6bf0:	88 2f       	mov	r24, r24
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	84 70       	andi	r24, 0x04	; 4
    6bf6:	99 27       	eor	r25, r25
    6bf8:	89 2b       	or	r24, r25
    6bfa:	c1 f4       	brne	.+48     	; 0x6c2c <usart_set_baudrate+0xb0>
		max_rate /= 2;
    6bfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    6bfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c00:	a8 89       	ldd	r26, Y+16	; 0x10
    6c02:	b9 89       	ldd	r27, Y+17	; 0x11
    6c04:	b6 95       	lsr	r27
    6c06:	a7 95       	ror	r26
    6c08:	97 95       	ror	r25
    6c0a:	87 95       	ror	r24
    6c0c:	8e 87       	std	Y+14, r24	; 0x0e
    6c0e:	9f 87       	std	Y+15, r25	; 0x0f
    6c10:	a8 8b       	std	Y+16, r26	; 0x10
    6c12:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    6c14:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c16:	9b 85       	ldd	r25, Y+11	; 0x0b
    6c18:	ac 85       	ldd	r26, Y+12	; 0x0c
    6c1a:	bd 85       	ldd	r27, Y+13	; 0x0d
    6c1c:	b6 95       	lsr	r27
    6c1e:	a7 95       	ror	r26
    6c20:	97 95       	ror	r25
    6c22:	87 95       	ror	r24
    6c24:	8a 87       	std	Y+10, r24	; 0x0a
    6c26:	9b 87       	std	Y+11, r25	; 0x0b
    6c28:	ac 87       	std	Y+12, r26	; 0x0c
    6c2a:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    6c2c:	28 8d       	ldd	r18, Y+24	; 0x18
    6c2e:	39 8d       	ldd	r19, Y+25	; 0x19
    6c30:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6c32:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6c34:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c36:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c38:	a8 89       	ldd	r26, Y+16	; 0x10
    6c3a:	b9 89       	ldd	r27, Y+17	; 0x11
    6c3c:	82 17       	cp	r24, r18
    6c3e:	93 07       	cpc	r25, r19
    6c40:	a4 07       	cpc	r26, r20
    6c42:	b5 07       	cpc	r27, r21
    6c44:	68 f0       	brcs	.+26     	; 0x6c60 <usart_set_baudrate+0xe4>
    6c46:	28 8d       	ldd	r18, Y+24	; 0x18
    6c48:	39 8d       	ldd	r19, Y+25	; 0x19
    6c4a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6c4c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c50:	9b 85       	ldd	r25, Y+11	; 0x0b
    6c52:	ac 85       	ldd	r26, Y+12	; 0x0c
    6c54:	bd 85       	ldd	r27, Y+13	; 0x0d
    6c56:	28 17       	cp	r18, r24
    6c58:	39 07       	cpc	r19, r25
    6c5a:	4a 07       	cpc	r20, r26
    6c5c:	5b 07       	cpc	r21, r27
    6c5e:	10 f4       	brcc	.+4      	; 0x6c64 <usart_set_baudrate+0xe8>
		return false;
    6c60:	80 e0       	ldi	r24, 0x00	; 0
    6c62:	40 c1       	rjmp	.+640    	; 0x6ee4 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    6c64:	8e 89       	ldd	r24, Y+22	; 0x16
    6c66:	9f 89       	ldd	r25, Y+23	; 0x17
    6c68:	fc 01       	movw	r30, r24
    6c6a:	84 81       	ldd	r24, Z+4	; 0x04
    6c6c:	88 2f       	mov	r24, r24
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	84 70       	andi	r24, 0x04	; 4
    6c72:	99 27       	eor	r25, r25
    6c74:	89 2b       	or	r24, r25
    6c76:	61 f4       	brne	.+24     	; 0x6c90 <usart_set_baudrate+0x114>
		baud *= 2;
    6c78:	88 8d       	ldd	r24, Y+24	; 0x18
    6c7a:	99 8d       	ldd	r25, Y+25	; 0x19
    6c7c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6c7e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6c80:	88 0f       	add	r24, r24
    6c82:	99 1f       	adc	r25, r25
    6c84:	aa 1f       	adc	r26, r26
    6c86:	bb 1f       	adc	r27, r27
    6c88:	88 8f       	std	Y+24, r24	; 0x18
    6c8a:	99 8f       	std	Y+25, r25	; 0x19
    6c8c:	aa 8f       	std	Y+26, r26	; 0x1a
    6c8e:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    6c90:	8f ef       	ldi	r24, 0xFF	; 255
    6c92:	90 e0       	ldi	r25, 0x00	; 0
    6c94:	a0 e0       	ldi	r26, 0x00	; 0
    6c96:	b0 e0       	ldi	r27, 0x00	; 0
    6c98:	8e 83       	std	Y+6, r24	; 0x06
    6c9a:	9f 83       	std	Y+7, r25	; 0x07
    6c9c:	a8 87       	std	Y+8, r26	; 0x08
    6c9e:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    6ca0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6ca2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6ca4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6ca6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6ca8:	28 8d       	ldd	r18, Y+24	; 0x18
    6caa:	39 8d       	ldd	r19, Y+25	; 0x19
    6cac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6cae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6cb0:	bc 01       	movw	r22, r24
    6cb2:	cd 01       	movw	r24, r26
    6cb4:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <__udivmodsi4>
    6cb8:	da 01       	movw	r26, r20
    6cba:	c9 01       	movw	r24, r18
    6cbc:	8a 8b       	std	Y+18, r24	; 0x12
    6cbe:	9b 8b       	std	Y+19, r25	; 0x13
    6cc0:	ac 8b       	std	Y+20, r26	; 0x14
    6cc2:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    6cc4:	89 ef       	ldi	r24, 0xF9	; 249
    6cc6:	89 83       	std	Y+1, r24	; 0x01
    6cc8:	28 c0       	rjmp	.+80     	; 0x6d1a <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    6cca:	2a 89       	ldd	r18, Y+18	; 0x12
    6ccc:	3b 89       	ldd	r19, Y+19	; 0x13
    6cce:	4c 89       	ldd	r20, Y+20	; 0x14
    6cd0:	5d 89       	ldd	r21, Y+21	; 0x15
    6cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    6cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    6cd6:	a8 85       	ldd	r26, Y+8	; 0x08
    6cd8:	b9 85       	ldd	r27, Y+9	; 0x09
    6cda:	28 17       	cp	r18, r24
    6cdc:	39 07       	cpc	r19, r25
    6cde:	4a 07       	cpc	r20, r26
    6ce0:	5b 07       	cpc	r21, r27
    6ce2:	f8 f0       	brcs	.+62     	; 0x6d22 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    6ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    6ce6:	9f 81       	ldd	r25, Y+7	; 0x07
    6ce8:	a8 85       	ldd	r26, Y+8	; 0x08
    6cea:	b9 85       	ldd	r27, Y+9	; 0x09
    6cec:	88 0f       	add	r24, r24
    6cee:	99 1f       	adc	r25, r25
    6cf0:	aa 1f       	adc	r26, r26
    6cf2:	bb 1f       	adc	r27, r27
    6cf4:	8e 83       	std	Y+6, r24	; 0x06
    6cf6:	9f 83       	std	Y+7, r25	; 0x07
    6cf8:	a8 87       	std	Y+8, r26	; 0x08
    6cfa:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    6cfc:	89 81       	ldd	r24, Y+1	; 0x01
    6cfe:	8d 3f       	cpi	r24, 0xFD	; 253
    6d00:	4c f4       	brge	.+18     	; 0x6d14 <usart_set_baudrate+0x198>
			limit |= 1;
    6d02:	8e 81       	ldd	r24, Y+6	; 0x06
    6d04:	9f 81       	ldd	r25, Y+7	; 0x07
    6d06:	a8 85       	ldd	r26, Y+8	; 0x08
    6d08:	b9 85       	ldd	r27, Y+9	; 0x09
    6d0a:	81 60       	ori	r24, 0x01	; 1
    6d0c:	8e 83       	std	Y+6, r24	; 0x06
    6d0e:	9f 83       	std	Y+7, r25	; 0x07
    6d10:	a8 87       	std	Y+8, r26	; 0x08
    6d12:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    6d14:	89 81       	ldd	r24, Y+1	; 0x01
    6d16:	8f 5f       	subi	r24, 0xFF	; 255
    6d18:	89 83       	std	Y+1, r24	; 0x01
    6d1a:	89 81       	ldd	r24, Y+1	; 0x01
    6d1c:	87 30       	cpi	r24, 0x07	; 7
    6d1e:	ac f2       	brlt	.-86     	; 0x6cca <usart_set_baudrate+0x14e>
    6d20:	01 c0       	rjmp	.+2      	; 0x6d24 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    6d22:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    6d24:	89 81       	ldd	r24, Y+1	; 0x01
    6d26:	88 23       	and	r24, r24
    6d28:	0c f0       	brlt	.+2      	; 0x6d2c <usart_set_baudrate+0x1b0>
    6d2a:	8a c0       	rjmp	.+276    	; 0x6e40 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    6d2c:	88 8d       	ldd	r24, Y+24	; 0x18
    6d2e:	99 8d       	ldd	r25, Y+25	; 0x19
    6d30:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6d32:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6d34:	88 0f       	add	r24, r24
    6d36:	99 1f       	adc	r25, r25
    6d38:	aa 1f       	adc	r26, r26
    6d3a:	bb 1f       	adc	r27, r27
    6d3c:	88 0f       	add	r24, r24
    6d3e:	99 1f       	adc	r25, r25
    6d40:	aa 1f       	adc	r26, r26
    6d42:	bb 1f       	adc	r27, r27
    6d44:	88 0f       	add	r24, r24
    6d46:	99 1f       	adc	r25, r25
    6d48:	aa 1f       	adc	r26, r26
    6d4a:	bb 1f       	adc	r27, r27
    6d4c:	9c 01       	movw	r18, r24
    6d4e:	ad 01       	movw	r20, r26
    6d50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6d52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6d54:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6d56:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6d58:	82 1b       	sub	r24, r18
    6d5a:	93 0b       	sbc	r25, r19
    6d5c:	a4 0b       	sbc	r26, r20
    6d5e:	b5 0b       	sbc	r27, r21
    6d60:	8c 8f       	std	Y+28, r24	; 0x1c
    6d62:	9d 8f       	std	Y+29, r25	; 0x1d
    6d64:	ae 8f       	std	Y+30, r26	; 0x1e
    6d66:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    6d68:	89 81       	ldd	r24, Y+1	; 0x01
    6d6a:	8e 3f       	cpi	r24, 0xFE	; 254
    6d6c:	94 f5       	brge	.+100    	; 0x6dd2 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    6d6e:	89 81       	ldd	r24, Y+1	; 0x01
    6d70:	08 2e       	mov	r0, r24
    6d72:	00 0c       	add	r0, r0
    6d74:	99 0b       	sbc	r25, r25
    6d76:	2d ef       	ldi	r18, 0xFD	; 253
    6d78:	3f ef       	ldi	r19, 0xFF	; 255
    6d7a:	28 1b       	sub	r18, r24
    6d7c:	39 0b       	sbc	r19, r25
    6d7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6d80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6d82:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6d84:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6d86:	7c 01       	movw	r14, r24
    6d88:	8d 01       	movw	r16, r26
    6d8a:	04 c0       	rjmp	.+8      	; 0x6d94 <usart_set_baudrate+0x218>
    6d8c:	ee 0c       	add	r14, r14
    6d8e:	ff 1c       	adc	r15, r15
    6d90:	00 1f       	adc	r16, r16
    6d92:	11 1f       	adc	r17, r17
    6d94:	2a 95       	dec	r18
    6d96:	d2 f7       	brpl	.-12     	; 0x6d8c <usart_set_baudrate+0x210>
    6d98:	a8 01       	movw	r20, r16
    6d9a:	97 01       	movw	r18, r14
    6d9c:	88 8d       	ldd	r24, Y+24	; 0x18
    6d9e:	99 8d       	ldd	r25, Y+25	; 0x19
    6da0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6da2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6da4:	b6 95       	lsr	r27
    6da6:	a7 95       	ror	r26
    6da8:	97 95       	ror	r25
    6daa:	87 95       	ror	r24
    6dac:	82 0f       	add	r24, r18
    6dae:	93 1f       	adc	r25, r19
    6db0:	a4 1f       	adc	r26, r20
    6db2:	b5 1f       	adc	r27, r21
    6db4:	28 8d       	ldd	r18, Y+24	; 0x18
    6db6:	39 8d       	ldd	r19, Y+25	; 0x19
    6db8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6dba:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6dbc:	bc 01       	movw	r22, r24
    6dbe:	cd 01       	movw	r24, r26
    6dc0:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <__udivmodsi4>
    6dc4:	da 01       	movw	r26, r20
    6dc6:	c9 01       	movw	r24, r18
    6dc8:	8a 83       	std	Y+2, r24	; 0x02
    6dca:	9b 83       	std	Y+3, r25	; 0x03
    6dcc:	ac 83       	std	Y+4, r26	; 0x04
    6dce:	bd 83       	std	Y+5, r27	; 0x05
    6dd0:	70 c0       	rjmp	.+224    	; 0x6eb2 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    6dd2:	89 81       	ldd	r24, Y+1	; 0x01
    6dd4:	08 2e       	mov	r0, r24
    6dd6:	00 0c       	add	r0, r0
    6dd8:	99 0b       	sbc	r25, r25
    6dda:	9c 01       	movw	r18, r24
    6ddc:	2d 5f       	subi	r18, 0xFD	; 253
    6dde:	3f 4f       	sbci	r19, 0xFF	; 255
    6de0:	88 8d       	ldd	r24, Y+24	; 0x18
    6de2:	99 8d       	ldd	r25, Y+25	; 0x19
    6de4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6de6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6de8:	04 c0       	rjmp	.+8      	; 0x6df2 <usart_set_baudrate+0x276>
    6dea:	88 0f       	add	r24, r24
    6dec:	99 1f       	adc	r25, r25
    6dee:	aa 1f       	adc	r26, r26
    6df0:	bb 1f       	adc	r27, r27
    6df2:	2a 95       	dec	r18
    6df4:	d2 f7       	brpl	.-12     	; 0x6dea <usart_set_baudrate+0x26e>
    6df6:	88 8f       	std	Y+24, r24	; 0x18
    6df8:	99 8f       	std	Y+25, r25	; 0x19
    6dfa:	aa 8f       	std	Y+26, r26	; 0x1a
    6dfc:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    6dfe:	88 8d       	ldd	r24, Y+24	; 0x18
    6e00:	99 8d       	ldd	r25, Y+25	; 0x19
    6e02:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6e04:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6e06:	9c 01       	movw	r18, r24
    6e08:	ad 01       	movw	r20, r26
    6e0a:	56 95       	lsr	r21
    6e0c:	47 95       	ror	r20
    6e0e:	37 95       	ror	r19
    6e10:	27 95       	ror	r18
    6e12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6e14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6e16:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6e18:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6e1a:	82 0f       	add	r24, r18
    6e1c:	93 1f       	adc	r25, r19
    6e1e:	a4 1f       	adc	r26, r20
    6e20:	b5 1f       	adc	r27, r21
    6e22:	28 8d       	ldd	r18, Y+24	; 0x18
    6e24:	39 8d       	ldd	r19, Y+25	; 0x19
    6e26:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6e28:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6e2a:	bc 01       	movw	r22, r24
    6e2c:	cd 01       	movw	r24, r26
    6e2e:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <__udivmodsi4>
    6e32:	da 01       	movw	r26, r20
    6e34:	c9 01       	movw	r24, r18
    6e36:	8a 83       	std	Y+2, r24	; 0x02
    6e38:	9b 83       	std	Y+3, r25	; 0x03
    6e3a:	ac 83       	std	Y+4, r26	; 0x04
    6e3c:	bd 83       	std	Y+5, r27	; 0x05
    6e3e:	39 c0       	rjmp	.+114    	; 0x6eb2 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    6e40:	89 81       	ldd	r24, Y+1	; 0x01
    6e42:	08 2e       	mov	r0, r24
    6e44:	00 0c       	add	r0, r0
    6e46:	99 0b       	sbc	r25, r25
    6e48:	9c 01       	movw	r18, r24
    6e4a:	2d 5f       	subi	r18, 0xFD	; 253
    6e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e4e:	88 8d       	ldd	r24, Y+24	; 0x18
    6e50:	99 8d       	ldd	r25, Y+25	; 0x19
    6e52:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6e54:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6e56:	04 c0       	rjmp	.+8      	; 0x6e60 <usart_set_baudrate+0x2e4>
    6e58:	88 0f       	add	r24, r24
    6e5a:	99 1f       	adc	r25, r25
    6e5c:	aa 1f       	adc	r26, r26
    6e5e:	bb 1f       	adc	r27, r27
    6e60:	2a 95       	dec	r18
    6e62:	d2 f7       	brpl	.-12     	; 0x6e58 <usart_set_baudrate+0x2dc>
    6e64:	88 8f       	std	Y+24, r24	; 0x18
    6e66:	99 8f       	std	Y+25, r25	; 0x19
    6e68:	aa 8f       	std	Y+26, r26	; 0x1a
    6e6a:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    6e6c:	88 8d       	ldd	r24, Y+24	; 0x18
    6e6e:	99 8d       	ldd	r25, Y+25	; 0x19
    6e70:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6e72:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6e74:	9c 01       	movw	r18, r24
    6e76:	ad 01       	movw	r20, r26
    6e78:	56 95       	lsr	r21
    6e7a:	47 95       	ror	r20
    6e7c:	37 95       	ror	r19
    6e7e:	27 95       	ror	r18
    6e80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6e82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6e84:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6e86:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6e88:	82 0f       	add	r24, r18
    6e8a:	93 1f       	adc	r25, r19
    6e8c:	a4 1f       	adc	r26, r20
    6e8e:	b5 1f       	adc	r27, r21
    6e90:	28 8d       	ldd	r18, Y+24	; 0x18
    6e92:	39 8d       	ldd	r19, Y+25	; 0x19
    6e94:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6e96:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6e98:	bc 01       	movw	r22, r24
    6e9a:	cd 01       	movw	r24, r26
    6e9c:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <__udivmodsi4>
    6ea0:	da 01       	movw	r26, r20
    6ea2:	c9 01       	movw	r24, r18
    6ea4:	01 97       	sbiw	r24, 0x01	; 1
    6ea6:	a1 09       	sbc	r26, r1
    6ea8:	b1 09       	sbc	r27, r1
    6eaa:	8a 83       	std	Y+2, r24	; 0x02
    6eac:	9b 83       	std	Y+3, r25	; 0x03
    6eae:	ac 83       	std	Y+4, r26	; 0x04
    6eb0:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    6eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    6eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    6eb6:	ac 81       	ldd	r26, Y+4	; 0x04
    6eb8:	bd 81       	ldd	r27, Y+5	; 0x05
    6eba:	89 2f       	mov	r24, r25
    6ebc:	9a 2f       	mov	r25, r26
    6ebe:	ab 2f       	mov	r26, r27
    6ec0:	bb 27       	eor	r27, r27
    6ec2:	98 2f       	mov	r25, r24
    6ec4:	9f 70       	andi	r25, 0x0F	; 15
    6ec6:	89 81       	ldd	r24, Y+1	; 0x01
    6ec8:	82 95       	swap	r24
    6eca:	80 7f       	andi	r24, 0xF0	; 240
    6ecc:	29 2f       	mov	r18, r25
    6ece:	28 2b       	or	r18, r24
    6ed0:	8e 89       	ldd	r24, Y+22	; 0x16
    6ed2:	9f 89       	ldd	r25, Y+23	; 0x17
    6ed4:	fc 01       	movw	r30, r24
    6ed6:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    6ed8:	2a 81       	ldd	r18, Y+2	; 0x02
    6eda:	8e 89       	ldd	r24, Y+22	; 0x16
    6edc:	9f 89       	ldd	r25, Y+23	; 0x17
    6ede:	fc 01       	movw	r30, r24
    6ee0:	26 83       	std	Z+6, r18	; 0x06

	return true;
    6ee2:	81 e0       	ldi	r24, 0x01	; 1
}
    6ee4:	6f 96       	adiw	r28, 0x1f	; 31
    6ee6:	cd bf       	out	0x3d, r28	; 61
    6ee8:	de bf       	out	0x3e, r29	; 62
    6eea:	df 91       	pop	r29
    6eec:	cf 91       	pop	r28
    6eee:	1f 91       	pop	r17
    6ef0:	0f 91       	pop	r16
    6ef2:	ff 90       	pop	r15
    6ef4:	ef 90       	pop	r14
    6ef6:	08 95       	ret

00006ef8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    6ef8:	cf 93       	push	r28
    6efa:	df 93       	push	r29
    6efc:	00 d0       	rcall	.+0      	; 0x6efe <ioport_configure_port_pin+0x6>
    6efe:	00 d0       	rcall	.+0      	; 0x6f00 <ioport_configure_port_pin+0x8>
    6f00:	cd b7       	in	r28, 0x3d	; 61
    6f02:	de b7       	in	r29, 0x3e	; 62
    6f04:	8a 83       	std	Y+2, r24	; 0x02
    6f06:	9b 83       	std	Y+3, r25	; 0x03
    6f08:	6c 83       	std	Y+4, r22	; 0x04
    6f0a:	4d 83       	std	Y+5, r20	; 0x05
    6f0c:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    6f0e:	19 82       	std	Y+1, r1	; 0x01
    6f10:	20 c0       	rjmp	.+64     	; 0x6f52 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    6f12:	8c 81       	ldd	r24, Y+4	; 0x04
    6f14:	88 2f       	mov	r24, r24
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	29 81       	ldd	r18, Y+1	; 0x01
    6f1a:	22 2f       	mov	r18, r18
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	02 c0       	rjmp	.+4      	; 0x6f24 <ioport_configure_port_pin+0x2c>
    6f20:	95 95       	asr	r25
    6f22:	87 95       	ror	r24
    6f24:	2a 95       	dec	r18
    6f26:	e2 f7       	brpl	.-8      	; 0x6f20 <ioport_configure_port_pin+0x28>
    6f28:	81 70       	andi	r24, 0x01	; 1
    6f2a:	99 27       	eor	r25, r25
    6f2c:	89 2b       	or	r24, r25
    6f2e:	71 f0       	breq	.+28     	; 0x6f4c <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    6f30:	89 81       	ldd	r24, Y+1	; 0x01
    6f32:	88 2f       	mov	r24, r24
    6f34:	90 e0       	ldi	r25, 0x00	; 0
    6f36:	40 96       	adiw	r24, 0x10	; 16
    6f38:	2a 81       	ldd	r18, Y+2	; 0x02
    6f3a:	3b 81       	ldd	r19, Y+3	; 0x03
    6f3c:	82 0f       	add	r24, r18
    6f3e:	93 1f       	adc	r25, r19
    6f40:	2d 81       	ldd	r18, Y+5	; 0x05
    6f42:	3e 81       	ldd	r19, Y+6	; 0x06
    6f44:	23 2f       	mov	r18, r19
    6f46:	33 27       	eor	r19, r19
    6f48:	fc 01       	movw	r30, r24
    6f4a:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    6f4c:	89 81       	ldd	r24, Y+1	; 0x01
    6f4e:	8f 5f       	subi	r24, 0xFF	; 255
    6f50:	89 83       	std	Y+1, r24	; 0x01
    6f52:	89 81       	ldd	r24, Y+1	; 0x01
    6f54:	88 30       	cpi	r24, 0x08	; 8
    6f56:	e8 f2       	brcs	.-70     	; 0x6f12 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    6f58:	8d 81       	ldd	r24, Y+5	; 0x05
    6f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    6f5c:	81 70       	andi	r24, 0x01	; 1
    6f5e:	99 27       	eor	r25, r25
    6f60:	89 2b       	or	r24, r25
    6f62:	d1 f0       	breq	.+52     	; 0x6f98 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    6f64:	8d 81       	ldd	r24, Y+5	; 0x05
    6f66:	9e 81       	ldd	r25, Y+6	; 0x06
    6f68:	82 70       	andi	r24, 0x02	; 2
    6f6a:	99 27       	eor	r25, r25
    6f6c:	89 2b       	or	r24, r25
    6f6e:	39 f0       	breq	.+14     	; 0x6f7e <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    6f70:	8a 81       	ldd	r24, Y+2	; 0x02
    6f72:	9b 81       	ldd	r25, Y+3	; 0x03
    6f74:	05 96       	adiw	r24, 0x05	; 5
    6f76:	2c 81       	ldd	r18, Y+4	; 0x04
    6f78:	fc 01       	movw	r30, r24
    6f7a:	20 83       	st	Z, r18
    6f7c:	06 c0       	rjmp	.+12     	; 0x6f8a <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    6f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6f80:	9b 81       	ldd	r25, Y+3	; 0x03
    6f82:	06 96       	adiw	r24, 0x06	; 6
    6f84:	2c 81       	ldd	r18, Y+4	; 0x04
    6f86:	fc 01       	movw	r30, r24
    6f88:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    6f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    6f8e:	01 96       	adiw	r24, 0x01	; 1
    6f90:	2c 81       	ldd	r18, Y+4	; 0x04
    6f92:	fc 01       	movw	r30, r24
    6f94:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    6f96:	06 c0       	rjmp	.+12     	; 0x6fa4 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    6f98:	8a 81       	ldd	r24, Y+2	; 0x02
    6f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    6f9c:	02 96       	adiw	r24, 0x02	; 2
    6f9e:	2c 81       	ldd	r18, Y+4	; 0x04
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	20 83       	st	Z, r18
	}
}
    6fa4:	00 00       	nop
    6fa6:	26 96       	adiw	r28, 0x06	; 6
    6fa8:	cd bf       	out	0x3d, r28	; 61
    6faa:	de bf       	out	0x3e, r29	; 62
    6fac:	df 91       	pop	r29
    6fae:	cf 91       	pop	r28
    6fb0:	08 95       	ret

00006fb2 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    6fb2:	cf 93       	push	r28
    6fb4:	df 93       	push	r29
    6fb6:	cd b7       	in	r28, 0x3d	; 61
    6fb8:	de b7       	in	r29, 0x3e	; 62
    6fba:	27 97       	sbiw	r28, 0x07	; 7
    6fbc:	cd bf       	out	0x3d, r28	; 61
    6fbe:	de bf       	out	0x3e, r29	; 62
    6fc0:	8d 83       	std	Y+5, r24	; 0x05
    6fc2:	6e 83       	std	Y+6, r22	; 0x06
    6fc4:	7f 83       	std	Y+7, r23	; 0x07
    6fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    6fc8:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    6fca:	89 81       	ldd	r24, Y+1	; 0x01
    6fcc:	88 2f       	mov	r24, r24
    6fce:	90 e0       	ldi	r25, 0x00	; 0
    6fd0:	9c 01       	movw	r18, r24
    6fd2:	27 70       	andi	r18, 0x07	; 7
    6fd4:	33 27       	eor	r19, r19
    6fd6:	81 e0       	ldi	r24, 0x01	; 1
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	02 c0       	rjmp	.+4      	; 0x6fe0 <ioport_configure_pin+0x2e>
    6fdc:	88 0f       	add	r24, r24
    6fde:	99 1f       	adc	r25, r25
    6fe0:	2a 95       	dec	r18
    6fe2:	e2 f7       	brpl	.-8      	; 0x6fdc <ioport_configure_pin+0x2a>
    6fe4:	68 2f       	mov	r22, r24
    6fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    6fe8:	8a 83       	std	Y+2, r24	; 0x02
    6fea:	8a 81       	ldd	r24, Y+2	; 0x02
    6fec:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    6fee:	8b 81       	ldd	r24, Y+3	; 0x03
    6ff0:	86 95       	lsr	r24
    6ff2:	86 95       	lsr	r24
    6ff4:	86 95       	lsr	r24
    6ff6:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    6ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    6ffa:	88 2f       	mov	r24, r24
    6ffc:	90 e0       	ldi	r25, 0x00	; 0
    6ffe:	88 0f       	add	r24, r24
    7000:	99 1f       	adc	r25, r25
    7002:	82 95       	swap	r24
    7004:	92 95       	swap	r25
    7006:	90 7f       	andi	r25, 0xF0	; 240
    7008:	98 27       	eor	r25, r24
    700a:	80 7f       	andi	r24, 0xF0	; 240
    700c:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    700e:	9a 5f       	subi	r25, 0xFA	; 250
    7010:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    7012:	8e 81       	ldd	r24, Y+6	; 0x06
    7014:	9f 81       	ldd	r25, Y+7	; 0x07
    7016:	ac 01       	movw	r20, r24
    7018:	c9 01       	movw	r24, r18
    701a:	6e df       	rcall	.-292    	; 0x6ef8 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    701c:	00 00       	nop
    701e:	27 96       	adiw	r28, 0x07	; 7
    7020:	cd bf       	out	0x3d, r28	; 61
    7022:	de bf       	out	0x3e, r29	; 62
    7024:	df 91       	pop	r29
    7026:	cf 91       	pop	r28
    7028:	08 95       	ret

0000702a <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    702a:	cf 93       	push	r28
    702c:	df 93       	push	r29
    702e:	cd b7       	in	r28, 0x3d	; 61
    7030:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    7032:	63 e0       	ldi	r22, 0x03	; 3
    7034:	70 e0       	ldi	r23, 0x00	; 0
    7036:	83 e7       	ldi	r24, 0x73	; 115
    7038:	bc df       	rcall	.-136    	; 0x6fb2 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    703a:	60 e0       	ldi	r22, 0x00	; 0
    703c:	78 e1       	ldi	r23, 0x18	; 24
    703e:	82 e7       	ldi	r24, 0x72	; 114
    7040:	b8 df       	rcall	.-144    	; 0x6fb2 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    7042:	00 00       	nop
    7044:	df 91       	pop	r29
    7046:	cf 91       	pop	r28
    7048:	08 95       	ret

0000704a <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device, uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    704a:	cf 93       	push	r28
    704c:	df 93       	push	r29
    704e:	1f 92       	push	r1
    7050:	1f 92       	push	r1
    7052:	cd b7       	in	r28, 0x3d	; 61
    7054:	de b7       	in	r29, 0x3e	; 62
    7056:	89 83       	std	Y+1, r24	; 0x01
    7058:	9a 83       	std	Y+2, r25	; 0x02
    705a:	89 81       	ldd	r24, Y+1	; 0x01
    705c:	9a 81       	ldd	r25, Y+2	; 0x02
    705e:	89 2b       	or	r24, r25
    7060:	09 f4       	brne	.+2      	; 0x7064 <sysclk_enable_peripheral_clock+0x1a>
    7062:	85 c1       	rjmp	.+778    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7064:	89 81       	ldd	r24, Y+1	; 0x01
    7066:	9a 81       	ldd	r25, Y+2	; 0x02
    7068:	80 3c       	cpi	r24, 0xC0	; 192
    706a:	91 05       	cpc	r25, r1
    706c:	29 f4       	brne	.+10     	; 0x7078 <sysclk_enable_peripheral_clock+0x2e>
    706e:	60 e1       	ldi	r22, 0x10	; 16
    7070:	80 e0       	ldi	r24, 0x00	; 0
    7072:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7076:	7b c1       	rjmp	.+758    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7078:	89 81       	ldd	r24, Y+1	; 0x01
    707a:	9a 81       	ldd	r25, Y+2	; 0x02
    707c:	80 34       	cpi	r24, 0x40	; 64
    707e:	94 40       	sbci	r25, 0x04	; 4
    7080:	29 f4       	brne	.+10     	; 0x708c <sysclk_enable_peripheral_clock+0x42>
    7082:	68 e0       	ldi	r22, 0x08	; 8
    7084:	80 e0       	ldi	r24, 0x00	; 0
    7086:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    708a:	71 c1       	rjmp	.+738    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    708c:	89 81       	ldd	r24, Y+1	; 0x01
    708e:	9a 81       	ldd	r25, Y+2	; 0x02
    7090:	81 15       	cp	r24, r1
    7092:	94 40       	sbci	r25, 0x04	; 4
    7094:	29 f4       	brne	.+10     	; 0x70a0 <sysclk_enable_peripheral_clock+0x56>
    7096:	64 e0       	ldi	r22, 0x04	; 4
    7098:	80 e0       	ldi	r24, 0x00	; 0
    709a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    709e:	67 c1       	rjmp	.+718    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    70a0:	89 81       	ldd	r24, Y+1	; 0x01
    70a2:	9a 81       	ldd	r25, Y+2	; 0x02
    70a4:	80 38       	cpi	r24, 0x80	; 128
    70a6:	91 40       	sbci	r25, 0x01	; 1
    70a8:	29 f4       	brne	.+10     	; 0x70b4 <sysclk_enable_peripheral_clock+0x6a>
    70aa:	62 e0       	ldi	r22, 0x02	; 2
    70ac:	80 e0       	ldi	r24, 0x00	; 0
    70ae:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    70b2:	5d c1       	rjmp	.+698    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    70b4:	89 81       	ldd	r24, Y+1	; 0x01
    70b6:	9a 81       	ldd	r25, Y+2	; 0x02
    70b8:	81 15       	cp	r24, r1
    70ba:	91 40       	sbci	r25, 0x01	; 1
    70bc:	29 f4       	brne	.+10     	; 0x70c8 <sysclk_enable_peripheral_clock+0x7e>
    70be:	61 e0       	ldi	r22, 0x01	; 1
    70c0:	80 e0       	ldi	r24, 0x00	; 0
    70c2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    70c6:	53 c1       	rjmp	.+678    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    70c8:	89 81       	ldd	r24, Y+1	; 0x01
    70ca:	9a 81       	ldd	r25, Y+2	; 0x02
    70cc:	80 38       	cpi	r24, 0x80	; 128
    70ce:	93 40       	sbci	r25, 0x03	; 3
    70d0:	29 f4       	brne	.+10     	; 0x70dc <sysclk_enable_peripheral_clock+0x92>
    70d2:	61 e0       	ldi	r22, 0x01	; 1
    70d4:	81 e0       	ldi	r24, 0x01	; 1
    70d6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    70da:	49 c1       	rjmp	.+658    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    70dc:	89 81       	ldd	r24, Y+1	; 0x01
    70de:	9a 81       	ldd	r25, Y+2	; 0x02
    70e0:	80 39       	cpi	r24, 0x90	; 144
    70e2:	93 40       	sbci	r25, 0x03	; 3
    70e4:	29 f4       	brne	.+10     	; 0x70f0 <sysclk_enable_peripheral_clock+0xa6>
    70e6:	61 e0       	ldi	r22, 0x01	; 1
    70e8:	82 e0       	ldi	r24, 0x02	; 2
    70ea:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    70ee:	3f c1       	rjmp	.+638    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    70f0:	89 81       	ldd	r24, Y+1	; 0x01
    70f2:	9a 81       	ldd	r25, Y+2	; 0x02
    70f4:	81 15       	cp	r24, r1
    70f6:	92 40       	sbci	r25, 0x02	; 2
    70f8:	29 f4       	brne	.+10     	; 0x7104 <sysclk_enable_peripheral_clock+0xba>
    70fa:	62 e0       	ldi	r22, 0x02	; 2
    70fc:	81 e0       	ldi	r24, 0x01	; 1
    70fe:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7102:	35 c1       	rjmp	.+618    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7104:	89 81       	ldd	r24, Y+1	; 0x01
    7106:	9a 81       	ldd	r25, Y+2	; 0x02
    7108:	80 34       	cpi	r24, 0x40	; 64
    710a:	92 40       	sbci	r25, 0x02	; 2
    710c:	29 f4       	brne	.+10     	; 0x7118 <sysclk_enable_peripheral_clock+0xce>
    710e:	62 e0       	ldi	r22, 0x02	; 2
    7110:	82 e0       	ldi	r24, 0x02	; 2
    7112:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7116:	2b c1       	rjmp	.+598    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	9a 81       	ldd	r25, Y+2	; 0x02
    711c:	81 15       	cp	r24, r1
    711e:	93 40       	sbci	r25, 0x03	; 3
    7120:	29 f4       	brne	.+10     	; 0x712c <sysclk_enable_peripheral_clock+0xe2>
    7122:	64 e0       	ldi	r22, 0x04	; 4
    7124:	81 e0       	ldi	r24, 0x01	; 1
    7126:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    712a:	21 c1       	rjmp	.+578    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    712c:	89 81       	ldd	r24, Y+1	; 0x01
    712e:	9a 81       	ldd	r25, Y+2	; 0x02
    7130:	80 32       	cpi	r24, 0x20	; 32
    7132:	93 40       	sbci	r25, 0x03	; 3
    7134:	29 f4       	brne	.+10     	; 0x7140 <sysclk_enable_peripheral_clock+0xf6>
    7136:	64 e0       	ldi	r22, 0x04	; 4
    7138:	82 e0       	ldi	r24, 0x02	; 2
    713a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    713e:	17 c1       	rjmp	.+558    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7140:	89 81       	ldd	r24, Y+1	; 0x01
    7142:	9a 81       	ldd	r25, Y+2	; 0x02
    7144:	81 15       	cp	r24, r1
    7146:	98 40       	sbci	r25, 0x08	; 8
    7148:	29 f4       	brne	.+10     	; 0x7154 <sysclk_enable_peripheral_clock+0x10a>
    714a:	61 e0       	ldi	r22, 0x01	; 1
    714c:	83 e0       	ldi	r24, 0x03	; 3
    714e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7152:	0d c1       	rjmp	.+538    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7154:	89 81       	ldd	r24, Y+1	; 0x01
    7156:	9a 81       	ldd	r25, Y+2	; 0x02
    7158:	81 15       	cp	r24, r1
    715a:	99 40       	sbci	r25, 0x09	; 9
    715c:	29 f4       	brne	.+10     	; 0x7168 <sysclk_enable_peripheral_clock+0x11e>
    715e:	61 e0       	ldi	r22, 0x01	; 1
    7160:	84 e0       	ldi	r24, 0x04	; 4
    7162:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7166:	03 c1       	rjmp	.+518    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7168:	89 81       	ldd	r24, Y+1	; 0x01
    716a:	9a 81       	ldd	r25, Y+2	; 0x02
    716c:	81 15       	cp	r24, r1
    716e:	9a 40       	sbci	r25, 0x0A	; 10
    7170:	29 f4       	brne	.+10     	; 0x717c <sysclk_enable_peripheral_clock+0x132>
    7172:	61 e0       	ldi	r22, 0x01	; 1
    7174:	85 e0       	ldi	r24, 0x05	; 5
    7176:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    717a:	f9 c0       	rjmp	.+498    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    717c:	89 81       	ldd	r24, Y+1	; 0x01
    717e:	9a 81       	ldd	r25, Y+2	; 0x02
    7180:	81 15       	cp	r24, r1
    7182:	9b 40       	sbci	r25, 0x0B	; 11
    7184:	29 f4       	brne	.+10     	; 0x7190 <sysclk_enable_peripheral_clock+0x146>
    7186:	61 e0       	ldi	r22, 0x01	; 1
    7188:	86 e0       	ldi	r24, 0x06	; 6
    718a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    718e:	ef c0       	rjmp	.+478    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7190:	89 81       	ldd	r24, Y+1	; 0x01
    7192:	9a 81       	ldd	r25, Y+2	; 0x02
    7194:	80 34       	cpi	r24, 0x40	; 64
    7196:	98 40       	sbci	r25, 0x08	; 8
    7198:	29 f4       	brne	.+10     	; 0x71a4 <sysclk_enable_peripheral_clock+0x15a>
    719a:	62 e0       	ldi	r22, 0x02	; 2
    719c:	83 e0       	ldi	r24, 0x03	; 3
    719e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    71a2:	e5 c0       	rjmp	.+458    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    71a4:	89 81       	ldd	r24, Y+1	; 0x01
    71a6:	9a 81       	ldd	r25, Y+2	; 0x02
    71a8:	80 34       	cpi	r24, 0x40	; 64
    71aa:	99 40       	sbci	r25, 0x09	; 9
    71ac:	29 f4       	brne	.+10     	; 0x71b8 <sysclk_enable_peripheral_clock+0x16e>
    71ae:	62 e0       	ldi	r22, 0x02	; 2
    71b0:	84 e0       	ldi	r24, 0x04	; 4
    71b2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    71b6:	db c0       	rjmp	.+438    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    71b8:	89 81       	ldd	r24, Y+1	; 0x01
    71ba:	9a 81       	ldd	r25, Y+2	; 0x02
    71bc:	80 34       	cpi	r24, 0x40	; 64
    71be:	9a 40       	sbci	r25, 0x0A	; 10
    71c0:	29 f4       	brne	.+10     	; 0x71cc <sysclk_enable_peripheral_clock+0x182>
    71c2:	62 e0       	ldi	r22, 0x02	; 2
    71c4:	85 e0       	ldi	r24, 0x05	; 5
    71c6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    71ca:	d1 c0       	rjmp	.+418    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    71cc:	89 81       	ldd	r24, Y+1	; 0x01
    71ce:	9a 81       	ldd	r25, Y+2	; 0x02
    71d0:	80 34       	cpi	r24, 0x40	; 64
    71d2:	9b 40       	sbci	r25, 0x0B	; 11
    71d4:	29 f4       	brne	.+10     	; 0x71e0 <sysclk_enable_peripheral_clock+0x196>
    71d6:	62 e0       	ldi	r22, 0x02	; 2
    71d8:	86 e0       	ldi	r24, 0x06	; 6
    71da:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    71de:	c7 c0       	rjmp	.+398    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    71e0:	89 81       	ldd	r24, Y+1	; 0x01
    71e2:	9a 81       	ldd	r25, Y+2	; 0x02
    71e4:	80 39       	cpi	r24, 0x90	; 144
    71e6:	98 40       	sbci	r25, 0x08	; 8
    71e8:	29 f4       	brne	.+10     	; 0x71f4 <sysclk_enable_peripheral_clock+0x1aa>
    71ea:	64 e0       	ldi	r22, 0x04	; 4
    71ec:	83 e0       	ldi	r24, 0x03	; 3
    71ee:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    71f2:	bd c0       	rjmp	.+378    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    71f4:	89 81       	ldd	r24, Y+1	; 0x01
    71f6:	9a 81       	ldd	r25, Y+2	; 0x02
    71f8:	80 39       	cpi	r24, 0x90	; 144
    71fa:	99 40       	sbci	r25, 0x09	; 9
    71fc:	29 f4       	brne	.+10     	; 0x7208 <sysclk_enable_peripheral_clock+0x1be>
    71fe:	64 e0       	ldi	r22, 0x04	; 4
    7200:	84 e0       	ldi	r24, 0x04	; 4
    7202:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7206:	b3 c0       	rjmp	.+358    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7208:	89 81       	ldd	r24, Y+1	; 0x01
    720a:	9a 81       	ldd	r25, Y+2	; 0x02
    720c:	80 39       	cpi	r24, 0x90	; 144
    720e:	9a 40       	sbci	r25, 0x0A	; 10
    7210:	29 f4       	brne	.+10     	; 0x721c <sysclk_enable_peripheral_clock+0x1d2>
    7212:	64 e0       	ldi	r22, 0x04	; 4
    7214:	85 e0       	ldi	r24, 0x05	; 5
    7216:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    721a:	a9 c0       	rjmp	.+338    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    721c:	89 81       	ldd	r24, Y+1	; 0x01
    721e:	9a 81       	ldd	r25, Y+2	; 0x02
    7220:	80 39       	cpi	r24, 0x90	; 144
    7222:	9b 40       	sbci	r25, 0x0B	; 11
    7224:	29 f4       	brne	.+10     	; 0x7230 <sysclk_enable_peripheral_clock+0x1e6>
    7226:	64 e0       	ldi	r22, 0x04	; 4
    7228:	86 e0       	ldi	r24, 0x06	; 6
    722a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    722e:	9f c0       	rjmp	.+318    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7230:	89 81       	ldd	r24, Y+1	; 0x01
    7232:	9a 81       	ldd	r25, Y+2	; 0x02
    7234:	80 3c       	cpi	r24, 0xC0	; 192
    7236:	98 40       	sbci	r25, 0x08	; 8
    7238:	29 f4       	brne	.+10     	; 0x7244 <sysclk_enable_peripheral_clock+0x1fa>
    723a:	68 e0       	ldi	r22, 0x08	; 8
    723c:	83 e0       	ldi	r24, 0x03	; 3
    723e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7242:	95 c0       	rjmp	.+298    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7244:	89 81       	ldd	r24, Y+1	; 0x01
    7246:	9a 81       	ldd	r25, Y+2	; 0x02
    7248:	80 3c       	cpi	r24, 0xC0	; 192
    724a:	99 40       	sbci	r25, 0x09	; 9
    724c:	29 f4       	brne	.+10     	; 0x7258 <sysclk_enable_peripheral_clock+0x20e>
    724e:	68 e0       	ldi	r22, 0x08	; 8
    7250:	84 e0       	ldi	r24, 0x04	; 4
    7252:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7256:	8b c0       	rjmp	.+278    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7258:	89 81       	ldd	r24, Y+1	; 0x01
    725a:	9a 81       	ldd	r25, Y+2	; 0x02
    725c:	80 3c       	cpi	r24, 0xC0	; 192
    725e:	9a 40       	sbci	r25, 0x0A	; 10
    7260:	29 f4       	brne	.+10     	; 0x726c <sysclk_enable_peripheral_clock+0x222>
    7262:	68 e0       	ldi	r22, 0x08	; 8
    7264:	85 e0       	ldi	r24, 0x05	; 5
    7266:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    726a:	81 c0       	rjmp	.+258    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    726c:	89 81       	ldd	r24, Y+1	; 0x01
    726e:	9a 81       	ldd	r25, Y+2	; 0x02
    7270:	80 3c       	cpi	r24, 0xC0	; 192
    7272:	9b 40       	sbci	r25, 0x0B	; 11
    7274:	29 f4       	brne	.+10     	; 0x7280 <sysclk_enable_peripheral_clock+0x236>
    7276:	68 e0       	ldi	r22, 0x08	; 8
    7278:	86 e0       	ldi	r24, 0x06	; 6
    727a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    727e:	77 c0       	rjmp	.+238    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7280:	89 81       	ldd	r24, Y+1	; 0x01
    7282:	9a 81       	ldd	r25, Y+2	; 0x02
    7284:	80 3a       	cpi	r24, 0xA0	; 160
    7286:	98 40       	sbci	r25, 0x08	; 8
    7288:	29 f4       	brne	.+10     	; 0x7294 <sysclk_enable_peripheral_clock+0x24a>
    728a:	60 e1       	ldi	r22, 0x10	; 16
    728c:	83 e0       	ldi	r24, 0x03	; 3
    728e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7292:	6d c0       	rjmp	.+218    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7294:	89 81       	ldd	r24, Y+1	; 0x01
    7296:	9a 81       	ldd	r25, Y+2	; 0x02
    7298:	80 3a       	cpi	r24, 0xA0	; 160
    729a:	99 40       	sbci	r25, 0x09	; 9
    729c:	29 f4       	brne	.+10     	; 0x72a8 <sysclk_enable_peripheral_clock+0x25e>
    729e:	60 e1       	ldi	r22, 0x10	; 16
    72a0:	84 e0       	ldi	r24, 0x04	; 4
    72a2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    72a6:	63 c0       	rjmp	.+198    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    72a8:	89 81       	ldd	r24, Y+1	; 0x01
    72aa:	9a 81       	ldd	r25, Y+2	; 0x02
    72ac:	80 3a       	cpi	r24, 0xA0	; 160
    72ae:	9a 40       	sbci	r25, 0x0A	; 10
    72b0:	29 f4       	brne	.+10     	; 0x72bc <sysclk_enable_peripheral_clock+0x272>
    72b2:	60 e1       	ldi	r22, 0x10	; 16
    72b4:	85 e0       	ldi	r24, 0x05	; 5
    72b6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    72ba:	59 c0       	rjmp	.+178    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    72bc:	89 81       	ldd	r24, Y+1	; 0x01
    72be:	9a 81       	ldd	r25, Y+2	; 0x02
    72c0:	80 3a       	cpi	r24, 0xA0	; 160
    72c2:	9b 40       	sbci	r25, 0x0B	; 11
    72c4:	29 f4       	brne	.+10     	; 0x72d0 <sysclk_enable_peripheral_clock+0x286>
    72c6:	60 e1       	ldi	r22, 0x10	; 16
    72c8:	86 e0       	ldi	r24, 0x06	; 6
    72ca:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    72ce:	4f c0       	rjmp	.+158    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    72d0:	89 81       	ldd	r24, Y+1	; 0x01
    72d2:	9a 81       	ldd	r25, Y+2	; 0x02
    72d4:	80 3b       	cpi	r24, 0xB0	; 176
    72d6:	98 40       	sbci	r25, 0x08	; 8
    72d8:	29 f4       	brne	.+10     	; 0x72e4 <sysclk_enable_peripheral_clock+0x29a>
    72da:	60 e2       	ldi	r22, 0x20	; 32
    72dc:	83 e0       	ldi	r24, 0x03	; 3
    72de:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    72e2:	45 c0       	rjmp	.+138    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    72e4:	89 81       	ldd	r24, Y+1	; 0x01
    72e6:	9a 81       	ldd	r25, Y+2	; 0x02
    72e8:	80 3b       	cpi	r24, 0xB0	; 176
    72ea:	99 40       	sbci	r25, 0x09	; 9
    72ec:	29 f4       	brne	.+10     	; 0x72f8 <sysclk_enable_peripheral_clock+0x2ae>
    72ee:	60 e2       	ldi	r22, 0x20	; 32
    72f0:	84 e0       	ldi	r24, 0x04	; 4
    72f2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    72f6:	3b c0       	rjmp	.+118    	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    72f8:	89 81       	ldd	r24, Y+1	; 0x01
    72fa:	9a 81       	ldd	r25, Y+2	; 0x02
    72fc:	80 3b       	cpi	r24, 0xB0	; 176
    72fe:	9a 40       	sbci	r25, 0x0A	; 10
    7300:	29 f4       	brne	.+10     	; 0x730c <sysclk_enable_peripheral_clock+0x2c2>
    7302:	60 e2       	ldi	r22, 0x20	; 32
    7304:	85 e0       	ldi	r24, 0x05	; 5
    7306:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    730a:	31 c0       	rjmp	.+98     	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    730c:	89 81       	ldd	r24, Y+1	; 0x01
    730e:	9a 81       	ldd	r25, Y+2	; 0x02
    7310:	80 3b       	cpi	r24, 0xB0	; 176
    7312:	9b 40       	sbci	r25, 0x0B	; 11
    7314:	29 f4       	brne	.+10     	; 0x7320 <sysclk_enable_peripheral_clock+0x2d6>
    7316:	60 e2       	ldi	r22, 0x20	; 32
    7318:	86 e0       	ldi	r24, 0x06	; 6
    731a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    731e:	27 c0       	rjmp	.+78     	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7320:	89 81       	ldd	r24, Y+1	; 0x01
    7322:	9a 81       	ldd	r25, Y+2	; 0x02
    7324:	80 38       	cpi	r24, 0x80	; 128
    7326:	94 40       	sbci	r25, 0x04	; 4
    7328:	29 f4       	brne	.+10     	; 0x7334 <sysclk_enable_peripheral_clock+0x2ea>
    732a:	60 e4       	ldi	r22, 0x40	; 64
    732c:	83 e0       	ldi	r24, 0x03	; 3
    732e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7332:	1d c0       	rjmp	.+58     	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7334:	89 81       	ldd	r24, Y+1	; 0x01
    7336:	9a 81       	ldd	r25, Y+2	; 0x02
    7338:	80 39       	cpi	r24, 0x90	; 144
    733a:	94 40       	sbci	r25, 0x04	; 4
    733c:	29 f4       	brne	.+10     	; 0x7348 <sysclk_enable_peripheral_clock+0x2fe>
    733e:	60 e4       	ldi	r22, 0x40	; 64
    7340:	84 e0       	ldi	r24, 0x04	; 4
    7342:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7346:	13 c0       	rjmp	.+38     	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7348:	89 81       	ldd	r24, Y+1	; 0x01
    734a:	9a 81       	ldd	r25, Y+2	; 0x02
    734c:	80 3a       	cpi	r24, 0xA0	; 160
    734e:	94 40       	sbci	r25, 0x04	; 4
    7350:	29 f4       	brne	.+10     	; 0x735c <sysclk_enable_peripheral_clock+0x312>
    7352:	60 e4       	ldi	r22, 0x40	; 64
    7354:	85 e0       	ldi	r24, 0x05	; 5
    7356:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    735a:	09 c0       	rjmp	.+18     	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    735c:	89 81       	ldd	r24, Y+1	; 0x01
    735e:	9a 81       	ldd	r25, Y+2	; 0x02
    7360:	80 3b       	cpi	r24, 0xB0	; 176
    7362:	94 40       	sbci	r25, 0x04	; 4
    7364:	21 f4       	brne	.+8      	; 0x736e <sysclk_enable_peripheral_clock+0x324>
    7366:	60 e4       	ldi	r22, 0x40	; 64
    7368:	86 e0       	ldi	r24, 0x06	; 6
    736a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    736e:	00 00       	nop
    7370:	0f 90       	pop	r0
    7372:	0f 90       	pop	r0
    7374:	df 91       	pop	r29
    7376:	cf 91       	pop	r28
    7378:	08 95       	ret

0000737a <usart_serial_init>:
    737a:	cf 93       	push	r28
    737c:	df 93       	push	r29
    737e:	cd b7       	in	r28, 0x3d	; 61
    7380:	de b7       	in	r29, 0x3e	; 62
    7382:	2b 97       	sbiw	r28, 0x0b	; 11
    7384:	cd bf       	out	0x3d, r28	; 61
    7386:	de bf       	out	0x3e, r29	; 62
    7388:	88 87       	std	Y+8, r24	; 0x08
    738a:	99 87       	std	Y+9, r25	; 0x09
    738c:	6a 87       	std	Y+10, r22	; 0x0a
    738e:	7b 87       	std	Y+11, r23	; 0x0b
    7390:	8a 85       	ldd	r24, Y+10	; 0x0a
    7392:	9b 85       	ldd	r25, Y+11	; 0x0b
    7394:	fc 01       	movw	r30, r24
    7396:	84 81       	ldd	r24, Z+4	; 0x04
    7398:	8d 83       	std	Y+5, r24	; 0x05
    739a:	8a 85       	ldd	r24, Y+10	; 0x0a
    739c:	9b 85       	ldd	r25, Y+11	; 0x0b
    739e:	fc 01       	movw	r30, r24
    73a0:	85 81       	ldd	r24, Z+5	; 0x05
    73a2:	8e 83       	std	Y+6, r24	; 0x06
    73a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    73a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    73a8:	fc 01       	movw	r30, r24
    73aa:	86 81       	ldd	r24, Z+6	; 0x06
    73ac:	8f 83       	std	Y+7, r24	; 0x07
    73ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    73b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    73b2:	fc 01       	movw	r30, r24
    73b4:	80 81       	ld	r24, Z
    73b6:	91 81       	ldd	r25, Z+1	; 0x01
    73b8:	a2 81       	ldd	r26, Z+2	; 0x02
    73ba:	b3 81       	ldd	r27, Z+3	; 0x03
    73bc:	89 83       	std	Y+1, r24	; 0x01
    73be:	9a 83       	std	Y+2, r25	; 0x02
    73c0:	ab 83       	std	Y+3, r26	; 0x03
    73c2:	bc 83       	std	Y+4, r27	; 0x04
    73c4:	88 85       	ldd	r24, Y+8	; 0x08
    73c6:	99 85       	ldd	r25, Y+9	; 0x09
    73c8:	80 3a       	cpi	r24, 0xA0	; 160
    73ca:	98 40       	sbci	r25, 0x08	; 8
    73cc:	21 f4       	brne	.+8      	; 0x73d6 <usart_serial_init+0x5c>
    73ce:	60 e1       	ldi	r22, 0x10	; 16
    73d0:	83 e0       	ldi	r24, 0x03	; 3
    73d2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    73d6:	88 85       	ldd	r24, Y+8	; 0x08
    73d8:	99 85       	ldd	r25, Y+9	; 0x09
    73da:	80 3b       	cpi	r24, 0xB0	; 176
    73dc:	98 40       	sbci	r25, 0x08	; 8
    73de:	21 f4       	brne	.+8      	; 0x73e8 <usart_serial_init+0x6e>
    73e0:	60 e2       	ldi	r22, 0x20	; 32
    73e2:	83 e0       	ldi	r24, 0x03	; 3
    73e4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    73e8:	88 85       	ldd	r24, Y+8	; 0x08
    73ea:	99 85       	ldd	r25, Y+9	; 0x09
    73ec:	80 3a       	cpi	r24, 0xA0	; 160
    73ee:	99 40       	sbci	r25, 0x09	; 9
    73f0:	21 f4       	brne	.+8      	; 0x73fa <usart_serial_init+0x80>
    73f2:	60 e1       	ldi	r22, 0x10	; 16
    73f4:	84 e0       	ldi	r24, 0x04	; 4
    73f6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    73fa:	88 85       	ldd	r24, Y+8	; 0x08
    73fc:	99 85       	ldd	r25, Y+9	; 0x09
    73fe:	80 3b       	cpi	r24, 0xB0	; 176
    7400:	99 40       	sbci	r25, 0x09	; 9
    7402:	21 f4       	brne	.+8      	; 0x740c <usart_serial_init+0x92>
    7404:	60 e2       	ldi	r22, 0x20	; 32
    7406:	84 e0       	ldi	r24, 0x04	; 4
    7408:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    740c:	88 85       	ldd	r24, Y+8	; 0x08
    740e:	99 85       	ldd	r25, Y+9	; 0x09
    7410:	80 3a       	cpi	r24, 0xA0	; 160
    7412:	9a 40       	sbci	r25, 0x0A	; 10
    7414:	21 f4       	brne	.+8      	; 0x741e <usart_serial_init+0xa4>
    7416:	60 e1       	ldi	r22, 0x10	; 16
    7418:	85 e0       	ldi	r24, 0x05	; 5
    741a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    741e:	88 85       	ldd	r24, Y+8	; 0x08
    7420:	99 85       	ldd	r25, Y+9	; 0x09
    7422:	80 3b       	cpi	r24, 0xB0	; 176
    7424:	9a 40       	sbci	r25, 0x0A	; 10
    7426:	21 f4       	brne	.+8      	; 0x7430 <usart_serial_init+0xb6>
    7428:	60 e2       	ldi	r22, 0x20	; 32
    742a:	85 e0       	ldi	r24, 0x05	; 5
    742c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7430:	88 85       	ldd	r24, Y+8	; 0x08
    7432:	99 85       	ldd	r25, Y+9	; 0x09
    7434:	80 3a       	cpi	r24, 0xA0	; 160
    7436:	9b 40       	sbci	r25, 0x0B	; 11
    7438:	21 f4       	brne	.+8      	; 0x7442 <usart_serial_init+0xc8>
    743a:	60 e1       	ldi	r22, 0x10	; 16
    743c:	86 e0       	ldi	r24, 0x06	; 6
    743e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7442:	88 85       	ldd	r24, Y+8	; 0x08
    7444:	99 85       	ldd	r25, Y+9	; 0x09
    7446:	80 3b       	cpi	r24, 0xB0	; 176
    7448:	9b 40       	sbci	r25, 0x0B	; 11
    744a:	21 f4       	brne	.+8      	; 0x7454 <usart_serial_init+0xda>
    744c:	60 e2       	ldi	r22, 0x20	; 32
    744e:	86 e0       	ldi	r24, 0x06	; 6
    7450:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <sysclk_enable_module>
    7454:	88 85       	ldd	r24, Y+8	; 0x08
    7456:	99 85       	ldd	r25, Y+9	; 0x09
    7458:	9e 01       	movw	r18, r28
    745a:	2f 5f       	subi	r18, 0xFF	; 255
    745c:	3f 4f       	sbci	r19, 0xFF	; 255
    745e:	b9 01       	movw	r22, r18
    7460:	0f db       	rcall	.-2530   	; 0x6a80 <usart_init_rs232>
    7462:	88 23       	and	r24, r24
    7464:	11 f0       	breq	.+4      	; 0x746a <usart_serial_init+0xf0>
    7466:	81 e0       	ldi	r24, 0x01	; 1
    7468:	01 c0       	rjmp	.+2      	; 0x746c <usart_serial_init+0xf2>
    746a:	80 e0       	ldi	r24, 0x00	; 0
    746c:	2b 96       	adiw	r28, 0x0b	; 11
    746e:	cd bf       	out	0x3d, r28	; 61
    7470:	de bf       	out	0x3e, r29	; 62
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	08 95       	ret

00007478 <usart_serial_putchar>:
    7478:	cf 93       	push	r28
    747a:	df 93       	push	r29
    747c:	00 d0       	rcall	.+0      	; 0x747e <usart_serial_putchar+0x6>
    747e:	cd b7       	in	r28, 0x3d	; 61
    7480:	de b7       	in	r29, 0x3e	; 62
    7482:	89 83       	std	Y+1, r24	; 0x01
    7484:	9a 83       	std	Y+2, r25	; 0x02
    7486:	6b 83       	std	Y+3, r22	; 0x03
    7488:	89 81       	ldd	r24, Y+1	; 0x01
    748a:	9a 81       	ldd	r25, Y+2	; 0x02
    748c:	6b 81       	ldd	r22, Y+3	; 0x03
    748e:	3e db       	rcall	.-2436   	; 0x6b0c <usart_putchar>
    7490:	23 96       	adiw	r28, 0x03	; 3
    7492:	cd bf       	out	0x3d, r28	; 61
    7494:	de bf       	out	0x3e, r29	; 62
    7496:	df 91       	pop	r29
    7498:	cf 91       	pop	r28
    749a:	08 95       	ret

0000749c <usart_serial_getchar>:
    749c:	cf 93       	push	r28
    749e:	df 93       	push	r29
    74a0:	00 d0       	rcall	.+0      	; 0x74a2 <usart_serial_getchar+0x6>
    74a2:	1f 92       	push	r1
    74a4:	cd b7       	in	r28, 0x3d	; 61
    74a6:	de b7       	in	r29, 0x3e	; 62
    74a8:	89 83       	std	Y+1, r24	; 0x01
    74aa:	9a 83       	std	Y+2, r25	; 0x02
    74ac:	6b 83       	std	Y+3, r22	; 0x03
    74ae:	7c 83       	std	Y+4, r23	; 0x04
    74b0:	89 81       	ldd	r24, Y+1	; 0x01
    74b2:	9a 81       	ldd	r25, Y+2	; 0x02
    74b4:	49 db       	rcall	.-2414   	; 0x6b48 <usart_getchar>
    74b6:	28 2f       	mov	r18, r24
    74b8:	8b 81       	ldd	r24, Y+3	; 0x03
    74ba:	9c 81       	ldd	r25, Y+4	; 0x04
    74bc:	fc 01       	movw	r30, r24
    74be:	20 83       	st	Z, r18
    74c0:	00 00       	nop
    74c2:	24 96       	adiw	r28, 0x04	; 4
    74c4:	cd bf       	out	0x3d, r28	; 61
    74c6:	de bf       	out	0x3e, r29	; 62
    74c8:	df 91       	pop	r29
    74ca:	cf 91       	pop	r28
    74cc:	08 95       	ret

000074ce <stdio_serial_init>:
    74ce:	cf 93       	push	r28
    74d0:	df 93       	push	r29
    74d2:	00 d0       	rcall	.+0      	; 0x74d4 <stdio_serial_init+0x6>
    74d4:	1f 92       	push	r1
    74d6:	cd b7       	in	r28, 0x3d	; 61
    74d8:	de b7       	in	r29, 0x3e	; 62
    74da:	89 83       	std	Y+1, r24	; 0x01
    74dc:	9a 83       	std	Y+2, r25	; 0x02
    74de:	6b 83       	std	Y+3, r22	; 0x03
    74e0:	7c 83       	std	Y+4, r23	; 0x04
    74e2:	89 81       	ldd	r24, Y+1	; 0x01
    74e4:	9a 81       	ldd	r25, Y+2	; 0x02
    74e6:	80 93 a0 27 	sts	0x27A0, r24	; 0x8027a0 <stdio_base>
    74ea:	90 93 a1 27 	sts	0x27A1, r25	; 0x8027a1 <stdio_base+0x1>
    74ee:	8c e3       	ldi	r24, 0x3C	; 60
    74f0:	9a e3       	ldi	r25, 0x3A	; 58
    74f2:	80 93 9e 27 	sts	0x279E, r24	; 0x80279e <ptr_put>
    74f6:	90 93 9f 27 	sts	0x279F, r25	; 0x80279f <ptr_put+0x1>
    74fa:	8e e4       	ldi	r24, 0x4E	; 78
    74fc:	9a e3       	ldi	r25, 0x3A	; 58
    74fe:	80 93 9c 27 	sts	0x279C, r24	; 0x80279c <ptr_get>
    7502:	90 93 9d 27 	sts	0x279D, r25	; 0x80279d <ptr_get+0x1>
    7506:	2b 81       	ldd	r18, Y+3	; 0x03
    7508:	3c 81       	ldd	r19, Y+4	; 0x04
    750a:	89 81       	ldd	r24, Y+1	; 0x01
    750c:	9a 81       	ldd	r25, Y+2	; 0x02
    750e:	b9 01       	movw	r22, r18
    7510:	34 df       	rcall	.-408    	; 0x737a <usart_serial_init>
    7512:	62 e6       	ldi	r22, 0x62	; 98
    7514:	7f e1       	ldi	r23, 0x1F	; 31
    7516:	81 e8       	ldi	r24, 0x81	; 129
    7518:	9f e1       	ldi	r25, 0x1F	; 31
    751a:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <fdevopen>
    751e:	00 00       	nop
    7520:	24 96       	adiw	r28, 0x04	; 4
    7522:	cd bf       	out	0x3d, r28	; 61
    7524:	de bf       	out	0x3e, r29	; 62
    7526:	df 91       	pop	r29
    7528:	cf 91       	pop	r28
    752a:	08 95       	ret

0000752c <uart_init>:
    752c:	cf 93       	push	r28
    752e:	df 93       	push	r29
    7530:	1f 92       	push	r1
    7532:	1f 92       	push	r1
    7534:	cd b7       	in	r28, 0x3d	; 61
    7536:	de b7       	in	r29, 0x3e	; 62
    7538:	89 83       	std	Y+1, r24	; 0x01
    753a:	9a 83       	std	Y+2, r25	; 0x02
    753c:	89 81       	ldd	r24, Y+1	; 0x01
    753e:	9a 81       	ldd	r25, Y+2	; 0x02
    7540:	fc 01       	movw	r30, r24
    7542:	86 81       	ldd	r24, Z+6	; 0x06
    7544:	97 81       	ldd	r25, Z+7	; 0x07
    7546:	a0 85       	ldd	r26, Z+8	; 0x08
    7548:	b1 85       	ldd	r27, Z+9	; 0x09
    754a:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <usart_options.6991>
    754e:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <usart_options.6991+0x1>
    7552:	a0 93 0f 20 	sts	0x200F, r26	; 0x80200f <usart_options.6991+0x2>
    7556:	b0 93 10 20 	sts	0x2010, r27	; 0x802010 <usart_options.6991+0x3>
    755a:	89 81       	ldd	r24, Y+1	; 0x01
    755c:	9a 81       	ldd	r25, Y+2	; 0x02
    755e:	fc 01       	movw	r30, r24
    7560:	80 81       	ld	r24, Z
    7562:	91 81       	ldd	r25, Z+1	; 0x01
    7564:	29 81       	ldd	r18, Y+1	; 0x01
    7566:	3a 81       	ldd	r19, Y+2	; 0x02
    7568:	f9 01       	movw	r30, r18
    756a:	20 81       	ld	r18, Z
    756c:	31 81       	ldd	r19, Z+1	; 0x01
    756e:	f9 01       	movw	r30, r18
    7570:	40 81       	ld	r20, Z
    7572:	29 81       	ldd	r18, Y+1	; 0x01
    7574:	3a 81       	ldd	r19, Y+2	; 0x02
    7576:	f9 01       	movw	r30, r18
    7578:	25 81       	ldd	r18, Z+5	; 0x05
    757a:	24 2b       	or	r18, r20
    757c:	fc 01       	movw	r30, r24
    757e:	20 83       	st	Z, r18
    7580:	89 81       	ldd	r24, Y+1	; 0x01
    7582:	9a 81       	ldd	r25, Y+2	; 0x02
    7584:	fc 01       	movw	r30, r24
    7586:	80 81       	ld	r24, Z
    7588:	91 81       	ldd	r25, Z+1	; 0x01
    758a:	29 81       	ldd	r18, Y+1	; 0x01
    758c:	3a 81       	ldd	r19, Y+2	; 0x02
    758e:	f9 01       	movw	r30, r18
    7590:	20 81       	ld	r18, Z
    7592:	31 81       	ldd	r19, Z+1	; 0x01
    7594:	f9 01       	movw	r30, r18
    7596:	44 81       	ldd	r20, Z+4	; 0x04
    7598:	29 81       	ldd	r18, Y+1	; 0x01
    759a:	3a 81       	ldd	r19, Y+2	; 0x02
    759c:	f9 01       	movw	r30, r18
    759e:	25 81       	ldd	r18, Z+5	; 0x05
    75a0:	24 2b       	or	r18, r20
    75a2:	fc 01       	movw	r30, r24
    75a4:	24 83       	std	Z+4, r18	; 0x04
    75a6:	89 81       	ldd	r24, Y+1	; 0x01
    75a8:	9a 81       	ldd	r25, Y+2	; 0x02
    75aa:	fc 01       	movw	r30, r24
    75ac:	80 81       	ld	r24, Z
    75ae:	91 81       	ldd	r25, Z+1	; 0x01
    75b0:	29 81       	ldd	r18, Y+1	; 0x01
    75b2:	3a 81       	ldd	r19, Y+2	; 0x02
    75b4:	f9 01       	movw	r30, r18
    75b6:	20 81       	ld	r18, Z
    75b8:	31 81       	ldd	r19, Z+1	; 0x01
    75ba:	f9 01       	movw	r30, r18
    75bc:	20 81       	ld	r18, Z
    75be:	42 2f       	mov	r20, r18
    75c0:	29 81       	ldd	r18, Y+1	; 0x01
    75c2:	3a 81       	ldd	r19, Y+2	; 0x02
    75c4:	f9 01       	movw	r30, r18
    75c6:	24 81       	ldd	r18, Z+4	; 0x04
    75c8:	20 95       	com	r18
    75ca:	24 23       	and	r18, r20
    75cc:	fc 01       	movw	r30, r24
    75ce:	20 83       	st	Z, r18
    75d0:	89 81       	ldd	r24, Y+1	; 0x01
    75d2:	9a 81       	ldd	r25, Y+2	; 0x02
    75d4:	fc 01       	movw	r30, r24
    75d6:	82 81       	ldd	r24, Z+2	; 0x02
    75d8:	93 81       	ldd	r25, Z+3	; 0x03
    75da:	37 dd       	rcall	.-1426   	; 0x704a <sysclk_enable_peripheral_clock>
    75dc:	89 81       	ldd	r24, Y+1	; 0x01
    75de:	9a 81       	ldd	r25, Y+2	; 0x02
    75e0:	fc 01       	movw	r30, r24
    75e2:	82 81       	ldd	r24, Z+2	; 0x02
    75e4:	93 81       	ldd	r25, Z+3	; 0x03
    75e6:	6d e0       	ldi	r22, 0x0D	; 13
    75e8:	70 e2       	ldi	r23, 0x20	; 32
    75ea:	c7 de       	rcall	.-626    	; 0x737a <usart_serial_init>
    75ec:	00 00       	nop
    75ee:	0f 90       	pop	r0
    75f0:	0f 90       	pop	r0
    75f2:	df 91       	pop	r29
    75f4:	cf 91       	pop	r28
    75f6:	08 95       	ret

000075f8 <uart_terminal_init>:

void uart_terminal_init()
{
    75f8:	cf 93       	push	r28
    75fa:	df 93       	push	r29
    75fc:	cd b7       	in	r28, 0x3d	; 61
    75fe:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    7600:	80 ea       	ldi	r24, 0xA0	; 160
    7602:	9a e0       	ldi	r25, 0x0A	; 10
    7604:	22 dd       	rcall	.-1468   	; 0x704a <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    7606:	80 e8       	ldi	r24, 0x80	; 128
    7608:	96 e0       	ldi	r25, 0x06	; 6
    760a:	20 e8       	ldi	r18, 0x80	; 128
    760c:	36 e0       	ldi	r19, 0x06	; 6
    760e:	f9 01       	movw	r30, r18
    7610:	20 81       	ld	r18, Z
    7612:	28 60       	ori	r18, 0x08	; 8
    7614:	fc 01       	movw	r30, r24
    7616:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    7618:	64 e1       	ldi	r22, 0x14	; 20
    761a:	70 e2       	ldi	r23, 0x20	; 32
    761c:	80 ea       	ldi	r24, 0xA0	; 160
    761e:	9a e0       	ldi	r25, 0x0A	; 10
    7620:	56 df       	rcall	.-340    	; 0x74ce <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    7622:	8c e2       	ldi	r24, 0x2C	; 44
    7624:	91 e2       	ldi	r25, 0x21	; 33
    7626:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
		printf("UART Initialized\n");
    762a:	81 e5       	ldi	r24, 0x51	; 81
    762c:	91 e2       	ldi	r25, 0x21	; 33
    762e:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
	}
}
    7632:	00 00       	nop
    7634:	df 91       	pop	r29
    7636:	cf 91       	pop	r28
    7638:	08 95       	ret

0000763a <sysclk_get_main_hz>:
		&& altitude > FS3_MAX_ALTITUDE)
	{
			buzz_on();
			blockTransmission = true;
	}
}
    763a:	cf 93       	push	r28
    763c:	df 93       	push	r29
    763e:	cd b7       	in	r28, 0x3d	; 61
    7640:	de b7       	in	r29, 0x3e	; 62
    7642:	80 e0       	ldi	r24, 0x00	; 0
    7644:	9c e6       	ldi	r25, 0x6C	; 108
    7646:	ac ed       	ldi	r26, 0xDC	; 220
    7648:	b2 e0       	ldi	r27, 0x02	; 2
    764a:	bc 01       	movw	r22, r24
    764c:	cd 01       	movw	r24, r26
    764e:	df 91       	pop	r29
    7650:	cf 91       	pop	r28
    7652:	08 95       	ret

00007654 <sysclk_get_per4_hz>:
    7654:	cf 93       	push	r28
    7656:	df 93       	push	r29
    7658:	1f 92       	push	r1
    765a:	cd b7       	in	r28, 0x3d	; 61
    765c:	de b7       	in	r29, 0x3e	; 62
    765e:	19 82       	std	Y+1, r1	; 0x01
    7660:	ec df       	rcall	.-40     	; 0x763a <sysclk_get_main_hz>
    7662:	dc 01       	movw	r26, r24
    7664:	cb 01       	movw	r24, r22
    7666:	29 81       	ldd	r18, Y+1	; 0x01
    7668:	22 2f       	mov	r18, r18
    766a:	30 e0       	ldi	r19, 0x00	; 0
    766c:	04 c0       	rjmp	.+8      	; 0x7676 <sysclk_get_per4_hz+0x22>
    766e:	b6 95       	lsr	r27
    7670:	a7 95       	ror	r26
    7672:	97 95       	ror	r25
    7674:	87 95       	ror	r24
    7676:	2a 95       	dec	r18
    7678:	d2 f7       	brpl	.-12     	; 0x766e <sysclk_get_per4_hz+0x1a>
    767a:	bc 01       	movw	r22, r24
    767c:	cd 01       	movw	r24, r26
    767e:	0f 90       	pop	r0
    7680:	df 91       	pop	r29
    7682:	cf 91       	pop	r28
    7684:	08 95       	ret

00007686 <sysclk_get_per2_hz>:
    7686:	cf 93       	push	r28
    7688:	df 93       	push	r29
    768a:	cd b7       	in	r28, 0x3d	; 61
    768c:	de b7       	in	r29, 0x3e	; 62
    768e:	e2 df       	rcall	.-60     	; 0x7654 <sysclk_get_per4_hz>
    7690:	dc 01       	movw	r26, r24
    7692:	cb 01       	movw	r24, r22
    7694:	bc 01       	movw	r22, r24
    7696:	cd 01       	movw	r24, r26
    7698:	df 91       	pop	r29
    769a:	cf 91       	pop	r28
    769c:	08 95       	ret

0000769e <sysclk_get_per_hz>:
    769e:	cf 93       	push	r28
    76a0:	df 93       	push	r29
    76a2:	cd b7       	in	r28, 0x3d	; 61
    76a4:	de b7       	in	r29, 0x3e	; 62
    76a6:	ef df       	rcall	.-34     	; 0x7686 <sysclk_get_per2_hz>
    76a8:	dc 01       	movw	r26, r24
    76aa:	cb 01       	movw	r24, r22
    76ac:	bc 01       	movw	r22, r24
    76ae:	cd 01       	movw	r24, r26
    76b0:	df 91       	pop	r29
    76b2:	cf 91       	pop	r28
    76b4:	08 95       	ret

000076b6 <sysclk_get_cpu_hz>:
    76b6:	cf 93       	push	r28
    76b8:	df 93       	push	r29
    76ba:	cd b7       	in	r28, 0x3d	; 61
    76bc:	de b7       	in	r29, 0x3e	; 62
    76be:	ef df       	rcall	.-34     	; 0x769e <sysclk_get_per_hz>
    76c0:	dc 01       	movw	r26, r24
    76c2:	cb 01       	movw	r24, r22
    76c4:	bc 01       	movw	r22, r24
    76c6:	cd 01       	movw	r24, r26
    76c8:	df 91       	pop	r29
    76ca:	cf 91       	pop	r28
    76cc:	08 95       	ret

000076ce <__portable_avr_delay_cycles>:
    76ce:	04 c0       	rjmp	.+8      	; 0x76d8 <__portable_avr_delay_cycles+0xa>
    76d0:	61 50       	subi	r22, 0x01	; 1
    76d2:	71 09       	sbc	r23, r1
    76d4:	81 09       	sbc	r24, r1
    76d6:	91 09       	sbc	r25, r1
    76d8:	61 15       	cp	r22, r1
    76da:	71 05       	cpc	r23, r1
    76dc:	81 05       	cpc	r24, r1
    76de:	91 05       	cpc	r25, r1
    76e0:	b9 f7       	brne	.-18     	; 0x76d0 <__portable_avr_delay_cycles+0x2>
    76e2:	08 95       	ret

000076e4 <pmic_init>:
    76e4:	cf 93       	push	r28
    76e6:	df 93       	push	r29
    76e8:	cd b7       	in	r28, 0x3d	; 61
    76ea:	de b7       	in	r29, 0x3e	; 62
    76ec:	80 ea       	ldi	r24, 0xA0	; 160
    76ee:	90 e0       	ldi	r25, 0x00	; 0
    76f0:	27 e0       	ldi	r18, 0x07	; 7
    76f2:	fc 01       	movw	r30, r24
    76f4:	22 83       	std	Z+2, r18	; 0x02
    76f6:	00 00       	nop
    76f8:	df 91       	pop	r29
    76fa:	cf 91       	pop	r28
    76fc:	08 95       	ret

000076fe <pmic_set_scheduling>:
    76fe:	cf 93       	push	r28
    7700:	df 93       	push	r29
    7702:	1f 92       	push	r1
    7704:	cd b7       	in	r28, 0x3d	; 61
    7706:	de b7       	in	r29, 0x3e	; 62
    7708:	89 83       	std	Y+1, r24	; 0x01
    770a:	89 81       	ldd	r24, Y+1	; 0x01
    770c:	88 2f       	mov	r24, r24
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	00 97       	sbiw	r24, 0x00	; 0
    7712:	19 f0       	breq	.+6      	; 0x771a <pmic_set_scheduling+0x1c>
    7714:	01 97       	sbiw	r24, 0x01	; 1
    7716:	79 f0       	breq	.+30     	; 0x7736 <pmic_set_scheduling+0x38>
    7718:	18 c0       	rjmp	.+48     	; 0x774a <pmic_set_scheduling+0x4c>
    771a:	80 ea       	ldi	r24, 0xA0	; 160
    771c:	90 e0       	ldi	r25, 0x00	; 0
    771e:	20 ea       	ldi	r18, 0xA0	; 160
    7720:	30 e0       	ldi	r19, 0x00	; 0
    7722:	f9 01       	movw	r30, r18
    7724:	22 81       	ldd	r18, Z+2	; 0x02
    7726:	2f 77       	andi	r18, 0x7F	; 127
    7728:	fc 01       	movw	r30, r24
    772a:	22 83       	std	Z+2, r18	; 0x02
    772c:	80 ea       	ldi	r24, 0xA0	; 160
    772e:	90 e0       	ldi	r25, 0x00	; 0
    7730:	fc 01       	movw	r30, r24
    7732:	11 82       	std	Z+1, r1	; 0x01
    7734:	0a c0       	rjmp	.+20     	; 0x774a <pmic_set_scheduling+0x4c>
    7736:	80 ea       	ldi	r24, 0xA0	; 160
    7738:	90 e0       	ldi	r25, 0x00	; 0
    773a:	20 ea       	ldi	r18, 0xA0	; 160
    773c:	30 e0       	ldi	r19, 0x00	; 0
    773e:	f9 01       	movw	r30, r18
    7740:	22 81       	ldd	r18, Z+2	; 0x02
    7742:	20 68       	ori	r18, 0x80	; 128
    7744:	fc 01       	movw	r30, r24
    7746:	22 83       	std	Z+2, r18	; 0x02
    7748:	00 00       	nop
    774a:	00 00       	nop
    774c:	0f 90       	pop	r0
    774e:	df 91       	pop	r29
    7750:	cf 91       	pop	r28
    7752:	08 95       	ret

00007754 <main>:




int main (void)
{
    7754:	2f 92       	push	r2
    7756:	3f 92       	push	r3
    7758:	4f 92       	push	r4
    775a:	5f 92       	push	r5
    775c:	6f 92       	push	r6
    775e:	7f 92       	push	r7
    7760:	8f 92       	push	r8
    7762:	9f 92       	push	r9
    7764:	af 92       	push	r10
    7766:	bf 92       	push	r11
    7768:	cf 92       	push	r12
    776a:	df 92       	push	r13
    776c:	ef 92       	push	r14
    776e:	ff 92       	push	r15
    7770:	0f 93       	push	r16
    7772:	1f 93       	push	r17
    7774:	cf 93       	push	r28
    7776:	df 93       	push	r29
    7778:	cd b7       	in	r28, 0x3d	; 61
    777a:	de b7       	in	r29, 0x3e	; 62
    777c:	c3 54       	subi	r28, 0x43	; 67
    777e:	d1 09       	sbc	r29, r1
    7780:	cd bf       	out	0x3d, r28	; 61
    7782:	de bf       	out	0x3e, r29	; 62
	blockTransmission = false;
    7784:	10 92 3a 22 	sts	0x223A, r1	; 0x80223a <blockTransmission>
	board_init();
    7788:	50 dc       	rcall	.-1888   	; 0x702a <board_init>
	//TODO: HANDLE RESETS
	
	
	**/
	
	sysclk_init();
    778a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <sysclk_init>
	rtc_init();
    778e:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <rtc_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    7792:	32 df       	rcall	.-412    	; 0x75f8 <uart_terminal_init>
	newOLogInit();
    7794:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <newOLogInit>

	if(DEBUG) printf("uart is working\n");
    7798:	82 e6       	ldi	r24, 0x62	; 98
    779a:	91 e2       	ldi	r25, 0x21	; 33
    779c:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <puts>
	
	
	spi_init_module();
    77a0:	0e 94 cf 12 	call	0x259e	; 0x259e <spi_init_module>
	
	

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    77a4:	9f df       	rcall	.-194    	; 0x76e4 <pmic_init>
    77a6:	81 e0       	ldi	r24, 0x01	; 1
    77a8:	aa df       	rcall	.-172    	; 0x76fe <pmic_set_scheduling>
	irq_initialize_vectors();
    77aa:	80 ea       	ldi	r24, 0xA0	; 160
    77ac:	90 e0       	ldi	r25, 0x00	; 0
    77ae:	27 e0       	ldi	r18, 0x07	; 7
    77b0:	fc 01       	movw	r30, r24
    77b2:	22 83       	std	Z+2, r18	; 0x02
	cpu_irq_enable();
    77b4:	78 94       	sei
	
	init_GPS_pins_and_usart();
    77b6:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <init_GPS_pins_and_usart>
	init_gps_interrupts();
    77ba:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <init_gps_interrupts>
	init_gps_buffers();	
    77be:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <init_gps_buffers>
	//imu_init();
	//delay_s(1);
	xbee_init();
    77c2:	0e 94 30 16 	call	0x2c60	; 0x2c60 <xbee_init>
	

	thermistor_init();
    77c6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <thermistor_init>
	volt_init();
    77ca:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <volt_init>

	uint8_t servoPos = 0;
	//set_servo(0);
	
	buzz_on();
    77ce:	19 82       	std	Y+1, r1	; 0x01
    77d0:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <buzz_on>
	delay_ms(1000);
    77d4:	70 df       	rcall	.-288    	; 0x76b6 <sysclk_get_cpu_hz>
    77d6:	dc 01       	movw	r26, r24
    77d8:	cb 01       	movw	r24, r22
    77da:	8c 01       	movw	r16, r24
    77dc:	9d 01       	movw	r18, r26
    77de:	40 e0       	ldi	r20, 0x00	; 0
    77e0:	50 e0       	ldi	r21, 0x00	; 0
    77e2:	ba 01       	movw	r22, r20
    77e4:	0c ab       	std	Y+52, r16	; 0x34
    77e6:	1d ab       	std	Y+53, r17	; 0x35
    77e8:	2e ab       	std	Y+54, r18	; 0x36
    77ea:	3f ab       	std	Y+55, r19	; 0x37
    77ec:	48 af       	std	Y+56, r20	; 0x38
    77ee:	59 af       	std	Y+57, r21	; 0x39
    77f0:	6a af       	std	Y+58, r22	; 0x3a
    77f2:	7b af       	std	Y+59, r23	; 0x3b
    77f4:	2c a8       	ldd	r2, Y+52	; 0x34
    77f6:	3d a8       	ldd	r3, Y+53	; 0x35
    77f8:	4e a8       	ldd	r4, Y+54	; 0x36
    77fa:	5f a8       	ldd	r5, Y+55	; 0x37
    77fc:	68 ac       	ldd	r6, Y+56	; 0x38
    77fe:	79 ac       	ldd	r7, Y+57	; 0x39
    7800:	8a ac       	ldd	r8, Y+58	; 0x3a
    7802:	9b ac       	ldd	r9, Y+59	; 0x3b
    7804:	22 2d       	mov	r18, r2
    7806:	33 2d       	mov	r19, r3
    7808:	44 2d       	mov	r20, r4
    780a:	55 2d       	mov	r21, r5
    780c:	66 2d       	mov	r22, r6
    780e:	77 2d       	mov	r23, r7
    7810:	88 2d       	mov	r24, r8
    7812:	99 2d       	mov	r25, r9
    7814:	02 e0       	ldi	r16, 0x02	; 2
    7816:	60 d7       	rcall	.+3776   	; 0x86d8 <__ashldi3>
    7818:	a2 2e       	mov	r10, r18
    781a:	b3 2e       	mov	r11, r19
    781c:	c4 2e       	mov	r12, r20
    781e:	d5 2e       	mov	r13, r21
    7820:	e6 2e       	mov	r14, r22
    7822:	f7 2e       	mov	r15, r23
    7824:	08 2f       	mov	r16, r24
    7826:	19 2f       	mov	r17, r25
    7828:	2a 2c       	mov	r2, r10
    782a:	3b 2c       	mov	r3, r11
    782c:	4c 2c       	mov	r4, r12
    782e:	5d 2c       	mov	r5, r13
    7830:	6e 2c       	mov	r6, r14
    7832:	7f 2c       	mov	r7, r15
    7834:	80 2e       	mov	r8, r16
    7836:	91 2e       	mov	r9, r17
    7838:	22 2d       	mov	r18, r2
    783a:	33 2d       	mov	r19, r3
    783c:	44 2d       	mov	r20, r4
    783e:	55 2d       	mov	r21, r5
    7840:	66 2d       	mov	r22, r6
    7842:	77 2d       	mov	r23, r7
    7844:	88 2d       	mov	r24, r8
    7846:	99 2d       	mov	r25, r9
    7848:	05 e0       	ldi	r16, 0x05	; 5
    784a:	46 d7       	rcall	.+3724   	; 0x86d8 <__ashldi3>
    784c:	a2 2e       	mov	r10, r18
    784e:	b3 2e       	mov	r11, r19
    7850:	c4 2e       	mov	r12, r20
    7852:	d5 2e       	mov	r13, r21
    7854:	e6 2e       	mov	r14, r22
    7856:	f7 2e       	mov	r15, r23
    7858:	08 2f       	mov	r16, r24
    785a:	19 2f       	mov	r17, r25
    785c:	2a 2d       	mov	r18, r10
    785e:	3b 2d       	mov	r19, r11
    7860:	4c 2d       	mov	r20, r12
    7862:	5d 2d       	mov	r21, r13
    7864:	6e 2d       	mov	r22, r14
    7866:	7f 2d       	mov	r23, r15
    7868:	80 2f       	mov	r24, r16
    786a:	91 2f       	mov	r25, r17
    786c:	a2 2c       	mov	r10, r2
    786e:	b3 2c       	mov	r11, r3
    7870:	c4 2c       	mov	r12, r4
    7872:	d5 2c       	mov	r13, r5
    7874:	e6 2c       	mov	r14, r6
    7876:	f7 2c       	mov	r15, r7
    7878:	08 2d       	mov	r16, r8
    787a:	19 2d       	mov	r17, r9
    787c:	4f d7       	rcall	.+3742   	; 0x871c <__subdi3>
    787e:	a2 2e       	mov	r10, r18
    7880:	b3 2e       	mov	r11, r19
    7882:	c4 2e       	mov	r12, r20
    7884:	d5 2e       	mov	r13, r21
    7886:	e6 2e       	mov	r14, r22
    7888:	f7 2e       	mov	r15, r23
    788a:	08 2f       	mov	r16, r24
    788c:	19 2f       	mov	r17, r25
    788e:	2a 2d       	mov	r18, r10
    7890:	3b 2d       	mov	r19, r11
    7892:	4c 2d       	mov	r20, r12
    7894:	5d 2d       	mov	r21, r13
    7896:	6e 2d       	mov	r22, r14
    7898:	7f 2d       	mov	r23, r15
    789a:	80 2f       	mov	r24, r16
    789c:	91 2f       	mov	r25, r17
    789e:	ac a8       	ldd	r10, Y+52	; 0x34
    78a0:	bd a8       	ldd	r11, Y+53	; 0x35
    78a2:	ce a8       	ldd	r12, Y+54	; 0x36
    78a4:	df a8       	ldd	r13, Y+55	; 0x37
    78a6:	e8 ac       	ldd	r14, Y+56	; 0x38
    78a8:	f9 ac       	ldd	r15, Y+57	; 0x39
    78aa:	0a ad       	ldd	r16, Y+58	; 0x3a
    78ac:	1b ad       	ldd	r17, Y+59	; 0x3b
    78ae:	2d d7       	rcall	.+3674   	; 0x870a <__adddi3>
    78b0:	a2 2e       	mov	r10, r18
    78b2:	b3 2e       	mov	r11, r19
    78b4:	c4 2e       	mov	r12, r20
    78b6:	d5 2e       	mov	r13, r21
    78b8:	e6 2e       	mov	r14, r22
    78ba:	f7 2e       	mov	r15, r23
    78bc:	08 2f       	mov	r16, r24
    78be:	19 2f       	mov	r17, r25
    78c0:	2a 2d       	mov	r18, r10
    78c2:	3b 2d       	mov	r19, r11
    78c4:	4c 2d       	mov	r20, r12
    78c6:	5d 2d       	mov	r21, r13
    78c8:	6e 2d       	mov	r22, r14
    78ca:	7f 2d       	mov	r23, r15
    78cc:	80 2f       	mov	r24, r16
    78ce:	91 2f       	mov	r25, r17
    78d0:	03 e0       	ldi	r16, 0x03	; 3
    78d2:	02 d7       	rcall	.+3588   	; 0x86d8 <__ashldi3>
    78d4:	22 2e       	mov	r2, r18
    78d6:	33 2e       	mov	r3, r19
    78d8:	44 2e       	mov	r4, r20
    78da:	55 2e       	mov	r5, r21
    78dc:	66 2e       	mov	r6, r22
    78de:	77 2e       	mov	r7, r23
    78e0:	88 2e       	mov	r8, r24
    78e2:	99 2e       	mov	r9, r25
    78e4:	a2 2c       	mov	r10, r2
    78e6:	b3 2c       	mov	r11, r3
    78e8:	c4 2c       	mov	r12, r4
    78ea:	d5 2c       	mov	r13, r5
    78ec:	e6 2c       	mov	r14, r6
    78ee:	f7 2c       	mov	r15, r7
    78f0:	08 2d       	mov	r16, r8
    78f2:	19 2d       	mov	r17, r9
    78f4:	2a 2c       	mov	r2, r10
    78f6:	3b 2c       	mov	r3, r11
    78f8:	4c 2c       	mov	r4, r12
    78fa:	5d 2c       	mov	r5, r13
    78fc:	6e 2c       	mov	r6, r14
    78fe:	7f 2c       	mov	r7, r15
    7900:	80 2e       	mov	r8, r16
    7902:	91 2e       	mov	r9, r17
    7904:	0f 2e       	mov	r0, r31
    7906:	f6 e0       	ldi	r31, 0x06	; 6
    7908:	af 2e       	mov	r10, r31
    790a:	f0 2d       	mov	r31, r0
    790c:	b1 2c       	mov	r11, r1
    790e:	c1 2c       	mov	r12, r1
    7910:	d1 2c       	mov	r13, r1
    7912:	e1 2c       	mov	r14, r1
    7914:	f1 2c       	mov	r15, r1
    7916:	00 e0       	ldi	r16, 0x00	; 0
    7918:	10 e0       	ldi	r17, 0x00	; 0
    791a:	22 2d       	mov	r18, r2
    791c:	33 2d       	mov	r19, r3
    791e:	44 2d       	mov	r20, r4
    7920:	55 2d       	mov	r21, r5
    7922:	66 2d       	mov	r22, r6
    7924:	77 2d       	mov	r23, r7
    7926:	88 2d       	mov	r24, r8
    7928:	99 2d       	mov	r25, r9
    792a:	7a d6       	rcall	.+3316   	; 0x8620 <__udivdi3>
    792c:	22 2e       	mov	r2, r18
    792e:	33 2e       	mov	r3, r19
    7930:	44 2e       	mov	r4, r20
    7932:	55 2e       	mov	r5, r21
    7934:	66 2e       	mov	r6, r22
    7936:	77 2e       	mov	r7, r23
    7938:	88 2e       	mov	r8, r24
    793a:	99 2e       	mov	r9, r25
    793c:	a2 2c       	mov	r10, r2
    793e:	b3 2c       	mov	r11, r3
    7940:	c4 2c       	mov	r12, r4
    7942:	d5 2c       	mov	r13, r5
    7944:	e6 2c       	mov	r14, r6
    7946:	f7 2c       	mov	r15, r7
    7948:	08 2d       	mov	r16, r8
    794a:	19 2d       	mov	r17, r9
    794c:	2a 2d       	mov	r18, r10
    794e:	3b 2d       	mov	r19, r11
    7950:	4c 2d       	mov	r20, r12
    7952:	5d 2d       	mov	r21, r13
    7954:	6e 2d       	mov	r22, r14
    7956:	7f 2d       	mov	r23, r15
    7958:	80 2f       	mov	r24, r16
    795a:	91 2f       	mov	r25, r17
    795c:	29 51       	subi	r18, 0x19	; 25
    795e:	3c 4f       	sbci	r19, 0xFC	; 252
    7960:	4f 4f       	sbci	r20, 0xFF	; 255
    7962:	5f 4f       	sbci	r21, 0xFF	; 255
    7964:	6f 4f       	sbci	r22, 0xFF	; 255
    7966:	7f 4f       	sbci	r23, 0xFF	; 255
    7968:	8f 4f       	sbci	r24, 0xFF	; 255
    796a:	9f 4f       	sbci	r25, 0xFF	; 255
    796c:	a2 2e       	mov	r10, r18
    796e:	b3 2e       	mov	r11, r19
    7970:	c4 2e       	mov	r12, r20
    7972:	d5 2e       	mov	r13, r21
    7974:	e6 2e       	mov	r14, r22
    7976:	f7 2e       	mov	r15, r23
    7978:	08 2f       	mov	r16, r24
    797a:	19 2f       	mov	r17, r25
    797c:	2a 2d       	mov	r18, r10
    797e:	3b 2d       	mov	r19, r11
    7980:	4c 2d       	mov	r20, r12
    7982:	5d 2d       	mov	r21, r13
    7984:	6e 2d       	mov	r22, r14
    7986:	7f 2d       	mov	r23, r15
    7988:	80 2f       	mov	r24, r16
    798a:	91 2f       	mov	r25, r17
    798c:	ef d1       	rcall	.+990    	; 0x7d6c <__floatundisf>
    798e:	dc 01       	movw	r26, r24
    7990:	cb 01       	movw	r24, r22
    7992:	20 e0       	ldi	r18, 0x00	; 0
    7994:	30 e0       	ldi	r19, 0x00	; 0
    7996:	4a e7       	ldi	r20, 0x7A	; 122
    7998:	54 e4       	ldi	r21, 0x44	; 68
    799a:	bc 01       	movw	r22, r24
    799c:	cd 01       	movw	r24, r26
    799e:	44 d1       	rcall	.+648    	; 0x7c28 <__divsf3>
    79a0:	dc 01       	movw	r26, r24
    79a2:	cb 01       	movw	r24, r22
    79a4:	bc 01       	movw	r22, r24
    79a6:	cd 01       	movw	r24, r26
    79a8:	ac d1       	rcall	.+856    	; 0x7d02 <__fixunssfdi>
    79aa:	a2 2e       	mov	r10, r18
    79ac:	b3 2e       	mov	r11, r19
    79ae:	c4 2e       	mov	r12, r20
    79b0:	d5 2e       	mov	r13, r21
    79b2:	e6 2e       	mov	r14, r22
    79b4:	f7 2e       	mov	r15, r23
    79b6:	08 2f       	mov	r16, r24
    79b8:	19 2f       	mov	r17, r25
    79ba:	d6 01       	movw	r26, r12
    79bc:	c5 01       	movw	r24, r10
    79be:	bc 01       	movw	r22, r24
    79c0:	cd 01       	movw	r24, r26
    79c2:	85 de       	rcall	.-758    	; 0x76ce <__portable_avr_delay_cycles>
	buzz_off();
    79c4:	0e 94 19 12 	call	0x2432	; 0x2432 <buzz_off>
	
	/**
		MAIN PROGRAM LOOP	
	**/
	//xbeeWrite("hello There!");
	hall_init();
    79c8:	0e 94 9b 11 	call	0x2336	; 0x2336 <hall_init>
	while (true)
	{
		
		
		printf("\ngood morning realterm");
    79cc:	82 e7       	ldi	r24, 0x72	; 114
    79ce:	91 e2       	ldi	r25, 0x21	; 33
    79d0:	89 2f       	mov	r24, r25
    79d2:	8f 93       	push	r24
    79d4:	82 e7       	ldi	r24, 0x72	; 114
    79d6:	91 e2       	ldi	r25, 0x21	; 33
    79d8:	8f 93       	push	r24
    79da:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <printf>
    79de:	0f 90       	pop	r0
    79e0:	0f 90       	pop	r0
		while(1)
		{
			printf("hall reading %u \n",hallVoltRead());
    79e2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <hallVoltRead>
    79e6:	29 2f       	mov	r18, r25
    79e8:	2f 93       	push	r18
    79ea:	8f 93       	push	r24
    79ec:	89 e8       	ldi	r24, 0x89	; 137
    79ee:	91 e2       	ldi	r25, 0x21	; 33
    79f0:	89 2f       	mov	r24, r25
    79f2:	8f 93       	push	r24
    79f4:	89 e8       	ldi	r24, 0x89	; 137
    79f6:	91 e2       	ldi	r25, 0x21	; 33
    79f8:	8f 93       	push	r24
    79fa:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <printf>
    79fe:	0f 90       	pop	r0
    7a00:	0f 90       	pop	r0
    7a02:	0f 90       	pop	r0
			delay_ms(500);
    7a04:	0f 90       	pop	r0
    7a06:	57 de       	rcall	.-850    	; 0x76b6 <sysclk_get_cpu_hz>
    7a08:	dc 01       	movw	r26, r24
    7a0a:	cb 01       	movw	r24, r22
    7a0c:	8c 01       	movw	r16, r24
    7a0e:	9d 01       	movw	r18, r26
    7a10:	40 e0       	ldi	r20, 0x00	; 0
    7a12:	50 e0       	ldi	r21, 0x00	; 0
    7a14:	ba 01       	movw	r22, r20
    7a16:	0c af       	std	Y+60, r16	; 0x3c
    7a18:	1d af       	std	Y+61, r17	; 0x3d
    7a1a:	2e af       	std	Y+62, r18	; 0x3e
    7a1c:	3f af       	std	Y+63, r19	; 0x3f
    7a1e:	21 96       	adiw	r28, 0x01	; 1
    7a20:	4f af       	std	Y+63, r20	; 0x3f
    7a22:	21 97       	sbiw	r28, 0x01	; 1
    7a24:	22 96       	adiw	r28, 0x02	; 2
    7a26:	5f af       	std	Y+63, r21	; 0x3f
    7a28:	22 97       	sbiw	r28, 0x02	; 2
    7a2a:	23 96       	adiw	r28, 0x03	; 3
    7a2c:	6f af       	std	Y+63, r22	; 0x3f
    7a2e:	23 97       	sbiw	r28, 0x03	; 3
    7a30:	24 96       	adiw	r28, 0x04	; 4
    7a32:	7f af       	std	Y+63, r23	; 0x3f
    7a34:	24 97       	sbiw	r28, 0x04	; 4
    7a36:	2c ac       	ldd	r2, Y+60	; 0x3c
    7a38:	3d ac       	ldd	r3, Y+61	; 0x3d
    7a3a:	4e ac       	ldd	r4, Y+62	; 0x3e
    7a3c:	5f ac       	ldd	r5, Y+63	; 0x3f
    7a3e:	21 96       	adiw	r28, 0x01	; 1
    7a40:	6f ac       	ldd	r6, Y+63	; 0x3f
    7a42:	21 97       	sbiw	r28, 0x01	; 1
    7a44:	22 96       	adiw	r28, 0x02	; 2
    7a46:	7f ac       	ldd	r7, Y+63	; 0x3f
    7a48:	22 97       	sbiw	r28, 0x02	; 2
    7a4a:	23 96       	adiw	r28, 0x03	; 3
    7a4c:	8f ac       	ldd	r8, Y+63	; 0x3f
    7a4e:	23 97       	sbiw	r28, 0x03	; 3
    7a50:	24 96       	adiw	r28, 0x04	; 4
    7a52:	9f ac       	ldd	r9, Y+63	; 0x3f
    7a54:	24 97       	sbiw	r28, 0x04	; 4
    7a56:	22 2d       	mov	r18, r2
    7a58:	33 2d       	mov	r19, r3
    7a5a:	44 2d       	mov	r20, r4
    7a5c:	55 2d       	mov	r21, r5
    7a5e:	66 2d       	mov	r22, r6
    7a60:	77 2d       	mov	r23, r7
    7a62:	88 2d       	mov	r24, r8
    7a64:	99 2d       	mov	r25, r9
    7a66:	02 e0       	ldi	r16, 0x02	; 2
    7a68:	37 d6       	rcall	.+3182   	; 0x86d8 <__ashldi3>
    7a6a:	a2 2e       	mov	r10, r18
    7a6c:	b3 2e       	mov	r11, r19
    7a6e:	c4 2e       	mov	r12, r20
    7a70:	d5 2e       	mov	r13, r21
    7a72:	e6 2e       	mov	r14, r22
    7a74:	f7 2e       	mov	r15, r23
    7a76:	08 2f       	mov	r16, r24
    7a78:	19 2f       	mov	r17, r25
    7a7a:	2a 2c       	mov	r2, r10
    7a7c:	3b 2c       	mov	r3, r11
    7a7e:	4c 2c       	mov	r4, r12
    7a80:	5d 2c       	mov	r5, r13
    7a82:	6e 2c       	mov	r6, r14
    7a84:	7f 2c       	mov	r7, r15
    7a86:	80 2e       	mov	r8, r16
    7a88:	91 2e       	mov	r9, r17
    7a8a:	22 2d       	mov	r18, r2
    7a8c:	33 2d       	mov	r19, r3
    7a8e:	44 2d       	mov	r20, r4
    7a90:	55 2d       	mov	r21, r5
    7a92:	66 2d       	mov	r22, r6
    7a94:	77 2d       	mov	r23, r7
    7a96:	88 2d       	mov	r24, r8
    7a98:	99 2d       	mov	r25, r9
    7a9a:	05 e0       	ldi	r16, 0x05	; 5
    7a9c:	1d d6       	rcall	.+3130   	; 0x86d8 <__ashldi3>
    7a9e:	a2 2e       	mov	r10, r18
    7aa0:	b3 2e       	mov	r11, r19
    7aa2:	c4 2e       	mov	r12, r20
    7aa4:	d5 2e       	mov	r13, r21
    7aa6:	e6 2e       	mov	r14, r22
    7aa8:	f7 2e       	mov	r15, r23
    7aaa:	08 2f       	mov	r16, r24
    7aac:	19 2f       	mov	r17, r25
    7aae:	2a 2d       	mov	r18, r10
    7ab0:	3b 2d       	mov	r19, r11
    7ab2:	4c 2d       	mov	r20, r12
    7ab4:	5d 2d       	mov	r21, r13
    7ab6:	6e 2d       	mov	r22, r14
    7ab8:	7f 2d       	mov	r23, r15
    7aba:	80 2f       	mov	r24, r16
    7abc:	91 2f       	mov	r25, r17
    7abe:	a2 2c       	mov	r10, r2
    7ac0:	b3 2c       	mov	r11, r3
    7ac2:	c4 2c       	mov	r12, r4
    7ac4:	d5 2c       	mov	r13, r5
    7ac6:	e6 2c       	mov	r14, r6
    7ac8:	f7 2c       	mov	r15, r7
    7aca:	08 2d       	mov	r16, r8
    7acc:	19 2d       	mov	r17, r9
    7ace:	26 d6       	rcall	.+3148   	; 0x871c <__subdi3>
    7ad0:	a2 2e       	mov	r10, r18
    7ad2:	b3 2e       	mov	r11, r19
    7ad4:	c4 2e       	mov	r12, r20
    7ad6:	d5 2e       	mov	r13, r21
    7ad8:	e6 2e       	mov	r14, r22
    7ada:	f7 2e       	mov	r15, r23
    7adc:	08 2f       	mov	r16, r24
    7ade:	19 2f       	mov	r17, r25
    7ae0:	2a 2d       	mov	r18, r10
    7ae2:	3b 2d       	mov	r19, r11
    7ae4:	4c 2d       	mov	r20, r12
    7ae6:	5d 2d       	mov	r21, r13
    7ae8:	6e 2d       	mov	r22, r14
    7aea:	7f 2d       	mov	r23, r15
    7aec:	80 2f       	mov	r24, r16
    7aee:	91 2f       	mov	r25, r17
    7af0:	ac ac       	ldd	r10, Y+60	; 0x3c
    7af2:	bd ac       	ldd	r11, Y+61	; 0x3d
    7af4:	ce ac       	ldd	r12, Y+62	; 0x3e
    7af6:	df ac       	ldd	r13, Y+63	; 0x3f
    7af8:	21 96       	adiw	r28, 0x01	; 1
    7afa:	ef ac       	ldd	r14, Y+63	; 0x3f
    7afc:	21 97       	sbiw	r28, 0x01	; 1
    7afe:	22 96       	adiw	r28, 0x02	; 2
    7b00:	ff ac       	ldd	r15, Y+63	; 0x3f
    7b02:	22 97       	sbiw	r28, 0x02	; 2
    7b04:	23 96       	adiw	r28, 0x03	; 3
    7b06:	0f ad       	ldd	r16, Y+63	; 0x3f
    7b08:	23 97       	sbiw	r28, 0x03	; 3
    7b0a:	24 96       	adiw	r28, 0x04	; 4
    7b0c:	1f ad       	ldd	r17, Y+63	; 0x3f
    7b0e:	24 97       	sbiw	r28, 0x04	; 4
    7b10:	fc d5       	rcall	.+3064   	; 0x870a <__adddi3>
    7b12:	a2 2e       	mov	r10, r18
    7b14:	b3 2e       	mov	r11, r19
    7b16:	c4 2e       	mov	r12, r20
    7b18:	d5 2e       	mov	r13, r21
    7b1a:	e6 2e       	mov	r14, r22
    7b1c:	f7 2e       	mov	r15, r23
    7b1e:	08 2f       	mov	r16, r24
    7b20:	19 2f       	mov	r17, r25
    7b22:	2a 2d       	mov	r18, r10
    7b24:	3b 2d       	mov	r19, r11
    7b26:	4c 2d       	mov	r20, r12
    7b28:	5d 2d       	mov	r21, r13
    7b2a:	6e 2d       	mov	r22, r14
    7b2c:	7f 2d       	mov	r23, r15
    7b2e:	80 2f       	mov	r24, r16
    7b30:	91 2f       	mov	r25, r17
    7b32:	02 e0       	ldi	r16, 0x02	; 2
    7b34:	d1 d5       	rcall	.+2978   	; 0x86d8 <__ashldi3>
    7b36:	22 2e       	mov	r2, r18
    7b38:	33 2e       	mov	r3, r19
    7b3a:	44 2e       	mov	r4, r20
    7b3c:	55 2e       	mov	r5, r21
    7b3e:	66 2e       	mov	r6, r22
    7b40:	77 2e       	mov	r7, r23
    7b42:	88 2e       	mov	r8, r24
    7b44:	99 2e       	mov	r9, r25
    7b46:	a2 2c       	mov	r10, r2
    7b48:	b3 2c       	mov	r11, r3
    7b4a:	c4 2c       	mov	r12, r4
    7b4c:	d5 2c       	mov	r13, r5
    7b4e:	e6 2c       	mov	r14, r6
    7b50:	f7 2c       	mov	r15, r7
    7b52:	08 2d       	mov	r16, r8
    7b54:	19 2d       	mov	r17, r9
    7b56:	2a 2c       	mov	r2, r10
    7b58:	3b 2c       	mov	r3, r11
    7b5a:	4c 2c       	mov	r4, r12
    7b5c:	5d 2c       	mov	r5, r13
    7b5e:	6e 2c       	mov	r6, r14
    7b60:	7f 2c       	mov	r7, r15
    7b62:	80 2e       	mov	r8, r16
    7b64:	91 2e       	mov	r9, r17
    7b66:	0f 2e       	mov	r0, r31
    7b68:	f6 e0       	ldi	r31, 0x06	; 6
    7b6a:	af 2e       	mov	r10, r31
    7b6c:	f0 2d       	mov	r31, r0
    7b6e:	b1 2c       	mov	r11, r1
    7b70:	c1 2c       	mov	r12, r1
    7b72:	d1 2c       	mov	r13, r1
    7b74:	e1 2c       	mov	r14, r1
    7b76:	f1 2c       	mov	r15, r1
    7b78:	00 e0       	ldi	r16, 0x00	; 0
    7b7a:	10 e0       	ldi	r17, 0x00	; 0
    7b7c:	22 2d       	mov	r18, r2
    7b7e:	33 2d       	mov	r19, r3
    7b80:	44 2d       	mov	r20, r4
    7b82:	55 2d       	mov	r21, r5
    7b84:	66 2d       	mov	r22, r6
    7b86:	77 2d       	mov	r23, r7
    7b88:	88 2d       	mov	r24, r8
    7b8a:	99 2d       	mov	r25, r9
    7b8c:	49 d5       	rcall	.+2706   	; 0x8620 <__udivdi3>
    7b8e:	22 2e       	mov	r2, r18
    7b90:	33 2e       	mov	r3, r19
    7b92:	44 2e       	mov	r4, r20
    7b94:	55 2e       	mov	r5, r21
    7b96:	66 2e       	mov	r6, r22
    7b98:	77 2e       	mov	r7, r23
    7b9a:	88 2e       	mov	r8, r24
    7b9c:	99 2e       	mov	r9, r25
    7b9e:	a2 2c       	mov	r10, r2
    7ba0:	b3 2c       	mov	r11, r3
    7ba2:	c4 2c       	mov	r12, r4
    7ba4:	d5 2c       	mov	r13, r5
    7ba6:	e6 2c       	mov	r14, r6
    7ba8:	f7 2c       	mov	r15, r7
    7baa:	08 2d       	mov	r16, r8
    7bac:	19 2d       	mov	r17, r9
    7bae:	2a 2d       	mov	r18, r10
    7bb0:	3b 2d       	mov	r19, r11
    7bb2:	4c 2d       	mov	r20, r12
    7bb4:	5d 2d       	mov	r21, r13
    7bb6:	6e 2d       	mov	r22, r14
    7bb8:	7f 2d       	mov	r23, r15
    7bba:	80 2f       	mov	r24, r16
    7bbc:	91 2f       	mov	r25, r17
    7bbe:	29 51       	subi	r18, 0x19	; 25
    7bc0:	3c 4f       	sbci	r19, 0xFC	; 252
    7bc2:	4f 4f       	sbci	r20, 0xFF	; 255
    7bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    7bc6:	6f 4f       	sbci	r22, 0xFF	; 255
    7bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    7bca:	8f 4f       	sbci	r24, 0xFF	; 255
    7bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    7bce:	a2 2e       	mov	r10, r18
    7bd0:	b3 2e       	mov	r11, r19
    7bd2:	c4 2e       	mov	r12, r20
    7bd4:	d5 2e       	mov	r13, r21
    7bd6:	e6 2e       	mov	r14, r22
    7bd8:	f7 2e       	mov	r15, r23
    7bda:	08 2f       	mov	r16, r24
    7bdc:	19 2f       	mov	r17, r25
    7bde:	2a 2d       	mov	r18, r10
    7be0:	3b 2d       	mov	r19, r11
    7be2:	4c 2d       	mov	r20, r12
    7be4:	5d 2d       	mov	r21, r13
    7be6:	6e 2d       	mov	r22, r14
    7be8:	7f 2d       	mov	r23, r15
    7bea:	80 2f       	mov	r24, r16
    7bec:	91 2f       	mov	r25, r17
    7bee:	be d0       	rcall	.+380    	; 0x7d6c <__floatundisf>
    7bf0:	dc 01       	movw	r26, r24
    7bf2:	cb 01       	movw	r24, r22
    7bf4:	20 e0       	ldi	r18, 0x00	; 0
    7bf6:	30 e0       	ldi	r19, 0x00	; 0
    7bf8:	4a e7       	ldi	r20, 0x7A	; 122
    7bfa:	54 e4       	ldi	r21, 0x44	; 68
    7bfc:	bc 01       	movw	r22, r24
    7bfe:	cd 01       	movw	r24, r26
    7c00:	13 d0       	rcall	.+38     	; 0x7c28 <__divsf3>
    7c02:	dc 01       	movw	r26, r24
    7c04:	cb 01       	movw	r24, r22
    7c06:	bc 01       	movw	r22, r24
    7c08:	cd 01       	movw	r24, r26
    7c0a:	7b d0       	rcall	.+246    	; 0x7d02 <__fixunssfdi>
    7c0c:	a2 2e       	mov	r10, r18
    7c0e:	b3 2e       	mov	r11, r19
    7c10:	c4 2e       	mov	r12, r20
    7c12:	d5 2e       	mov	r13, r21
    7c14:	e6 2e       	mov	r14, r22
    7c16:	f7 2e       	mov	r15, r23
    7c18:	08 2f       	mov	r16, r24
    7c1a:	19 2f       	mov	r17, r25
    7c1c:	d6 01       	movw	r26, r12
    7c1e:	c5 01       	movw	r24, r10
    7c20:	bc 01       	movw	r22, r24
    7c22:	cd 01       	movw	r24, r26
    7c24:	54 dd       	rcall	.-1368   	; 0x76ce <__portable_avr_delay_cycles>
		}
    7c26:	dd ce       	rjmp	.-582    	; 0x79e2 <main+0x28e>

00007c28 <__divsf3>:
    7c28:	0c d0       	rcall	.+24     	; 0x7c42 <__divsf3x>
    7c2a:	05 c1       	rjmp	.+522    	; 0x7e36 <__fp_round>
    7c2c:	fd d0       	rcall	.+506    	; 0x7e28 <__fp_pscB>
    7c2e:	40 f0       	brcs	.+16     	; 0x7c40 <__divsf3+0x18>
    7c30:	f4 d0       	rcall	.+488    	; 0x7e1a <__fp_pscA>
    7c32:	30 f0       	brcs	.+12     	; 0x7c40 <__divsf3+0x18>
    7c34:	21 f4       	brne	.+8      	; 0x7c3e <__divsf3+0x16>
    7c36:	5f 3f       	cpi	r21, 0xFF	; 255
    7c38:	19 f0       	breq	.+6      	; 0x7c40 <__divsf3+0x18>
    7c3a:	d6 c0       	rjmp	.+428    	; 0x7de8 <__fp_inf>
    7c3c:	51 11       	cpse	r21, r1
    7c3e:	2f c1       	rjmp	.+606    	; 0x7e9e <__fp_szero>
    7c40:	d9 c0       	rjmp	.+434    	; 0x7df4 <__fp_nan>

00007c42 <__divsf3x>:
    7c42:	0a d1       	rcall	.+532    	; 0x7e58 <__fp_split3>
    7c44:	98 f3       	brcs	.-26     	; 0x7c2c <__divsf3+0x4>

00007c46 <__divsf3_pse>:
    7c46:	99 23       	and	r25, r25
    7c48:	c9 f3       	breq	.-14     	; 0x7c3c <__divsf3+0x14>
    7c4a:	55 23       	and	r21, r21
    7c4c:	b1 f3       	breq	.-20     	; 0x7c3a <__divsf3+0x12>
    7c4e:	95 1b       	sub	r25, r21
    7c50:	55 0b       	sbc	r21, r21
    7c52:	bb 27       	eor	r27, r27
    7c54:	aa 27       	eor	r26, r26
    7c56:	62 17       	cp	r22, r18
    7c58:	73 07       	cpc	r23, r19
    7c5a:	84 07       	cpc	r24, r20
    7c5c:	38 f0       	brcs	.+14     	; 0x7c6c <__divsf3_pse+0x26>
    7c5e:	9f 5f       	subi	r25, 0xFF	; 255
    7c60:	5f 4f       	sbci	r21, 0xFF	; 255
    7c62:	22 0f       	add	r18, r18
    7c64:	33 1f       	adc	r19, r19
    7c66:	44 1f       	adc	r20, r20
    7c68:	aa 1f       	adc	r26, r26
    7c6a:	a9 f3       	breq	.-22     	; 0x7c56 <__divsf3_pse+0x10>
    7c6c:	33 d0       	rcall	.+102    	; 0x7cd4 <__divsf3_pse+0x8e>
    7c6e:	0e 2e       	mov	r0, r30
    7c70:	3a f0       	brmi	.+14     	; 0x7c80 <__divsf3_pse+0x3a>
    7c72:	e0 e8       	ldi	r30, 0x80	; 128
    7c74:	30 d0       	rcall	.+96     	; 0x7cd6 <__divsf3_pse+0x90>
    7c76:	91 50       	subi	r25, 0x01	; 1
    7c78:	50 40       	sbci	r21, 0x00	; 0
    7c7a:	e6 95       	lsr	r30
    7c7c:	00 1c       	adc	r0, r0
    7c7e:	ca f7       	brpl	.-14     	; 0x7c72 <__divsf3_pse+0x2c>
    7c80:	29 d0       	rcall	.+82     	; 0x7cd4 <__divsf3_pse+0x8e>
    7c82:	fe 2f       	mov	r31, r30
    7c84:	27 d0       	rcall	.+78     	; 0x7cd4 <__divsf3_pse+0x8e>
    7c86:	66 0f       	add	r22, r22
    7c88:	77 1f       	adc	r23, r23
    7c8a:	88 1f       	adc	r24, r24
    7c8c:	bb 1f       	adc	r27, r27
    7c8e:	26 17       	cp	r18, r22
    7c90:	37 07       	cpc	r19, r23
    7c92:	48 07       	cpc	r20, r24
    7c94:	ab 07       	cpc	r26, r27
    7c96:	b0 e8       	ldi	r27, 0x80	; 128
    7c98:	09 f0       	breq	.+2      	; 0x7c9c <__divsf3_pse+0x56>
    7c9a:	bb 0b       	sbc	r27, r27
    7c9c:	80 2d       	mov	r24, r0
    7c9e:	bf 01       	movw	r22, r30
    7ca0:	ff 27       	eor	r31, r31
    7ca2:	93 58       	subi	r25, 0x83	; 131
    7ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ca6:	2a f0       	brmi	.+10     	; 0x7cb2 <__divsf3_pse+0x6c>
    7ca8:	9e 3f       	cpi	r25, 0xFE	; 254
    7caa:	51 05       	cpc	r21, r1
    7cac:	68 f0       	brcs	.+26     	; 0x7cc8 <__divsf3_pse+0x82>
    7cae:	9c c0       	rjmp	.+312    	; 0x7de8 <__fp_inf>
    7cb0:	f6 c0       	rjmp	.+492    	; 0x7e9e <__fp_szero>
    7cb2:	5f 3f       	cpi	r21, 0xFF	; 255
    7cb4:	ec f3       	brlt	.-6      	; 0x7cb0 <__divsf3_pse+0x6a>
    7cb6:	98 3e       	cpi	r25, 0xE8	; 232
    7cb8:	dc f3       	brlt	.-10     	; 0x7cb0 <__divsf3_pse+0x6a>
    7cba:	86 95       	lsr	r24
    7cbc:	77 95       	ror	r23
    7cbe:	67 95       	ror	r22
    7cc0:	b7 95       	ror	r27
    7cc2:	f7 95       	ror	r31
    7cc4:	9f 5f       	subi	r25, 0xFF	; 255
    7cc6:	c9 f7       	brne	.-14     	; 0x7cba <__divsf3_pse+0x74>
    7cc8:	88 0f       	add	r24, r24
    7cca:	91 1d       	adc	r25, r1
    7ccc:	96 95       	lsr	r25
    7cce:	87 95       	ror	r24
    7cd0:	97 f9       	bld	r25, 7
    7cd2:	08 95       	ret
    7cd4:	e1 e0       	ldi	r30, 0x01	; 1
    7cd6:	66 0f       	add	r22, r22
    7cd8:	77 1f       	adc	r23, r23
    7cda:	88 1f       	adc	r24, r24
    7cdc:	bb 1f       	adc	r27, r27
    7cde:	62 17       	cp	r22, r18
    7ce0:	73 07       	cpc	r23, r19
    7ce2:	84 07       	cpc	r24, r20
    7ce4:	ba 07       	cpc	r27, r26
    7ce6:	20 f0       	brcs	.+8      	; 0x7cf0 <__divsf3_pse+0xaa>
    7ce8:	62 1b       	sub	r22, r18
    7cea:	73 0b       	sbc	r23, r19
    7cec:	84 0b       	sbc	r24, r20
    7cee:	ba 0b       	sbc	r27, r26
    7cf0:	ee 1f       	adc	r30, r30
    7cf2:	88 f7       	brcc	.-30     	; 0x7cd6 <__divsf3_pse+0x90>
    7cf4:	e0 95       	com	r30
    7cf6:	08 95       	ret

00007cf8 <__fixsfdi>:
    7cf8:	be e3       	ldi	r27, 0x3E	; 62
    7cfa:	04 d0       	rcall	.+8      	; 0x7d04 <__fixunssfdi+0x2>
    7cfc:	08 f4       	brcc	.+2      	; 0x7d00 <__fixsfdi+0x8>
    7cfe:	90 e8       	ldi	r25, 0x80	; 128
    7d00:	08 95       	ret

00007d02 <__fixunssfdi>:
    7d02:	bf e3       	ldi	r27, 0x3F	; 63
    7d04:	22 27       	eor	r18, r18
    7d06:	33 27       	eor	r19, r19
    7d08:	a9 01       	movw	r20, r18
    7d0a:	ae d0       	rcall	.+348    	; 0x7e68 <__fp_splitA>
    7d0c:	58 f1       	brcs	.+86     	; 0x7d64 <__fixunssfdi+0x62>
    7d0e:	9f 57       	subi	r25, 0x7F	; 127
    7d10:	40 f1       	brcs	.+80     	; 0x7d62 <__fixunssfdi+0x60>
    7d12:	b9 17       	cp	r27, r25
    7d14:	38 f1       	brcs	.+78     	; 0x7d64 <__fixunssfdi+0x62>
    7d16:	bf e3       	ldi	r27, 0x3F	; 63
    7d18:	b9 1b       	sub	r27, r25
    7d1a:	99 27       	eor	r25, r25
    7d1c:	b8 50       	subi	r27, 0x08	; 8
    7d1e:	3a f4       	brpl	.+14     	; 0x7d2e <__fixunssfdi+0x2c>
    7d20:	66 0f       	add	r22, r22
    7d22:	77 1f       	adc	r23, r23
    7d24:	88 1f       	adc	r24, r24
    7d26:	99 1f       	adc	r25, r25
    7d28:	b3 95       	inc	r27
    7d2a:	d2 f3       	brmi	.-12     	; 0x7d20 <__fixunssfdi+0x1e>
    7d2c:	16 c0       	rjmp	.+44     	; 0x7d5a <__fixunssfdi+0x58>
    7d2e:	b8 50       	subi	r27, 0x08	; 8
    7d30:	4a f0       	brmi	.+18     	; 0x7d44 <__fixunssfdi+0x42>
    7d32:	23 2f       	mov	r18, r19
    7d34:	34 2f       	mov	r19, r20
    7d36:	45 2f       	mov	r20, r21
    7d38:	56 2f       	mov	r21, r22
    7d3a:	67 2f       	mov	r22, r23
    7d3c:	78 2f       	mov	r23, r24
    7d3e:	88 27       	eor	r24, r24
    7d40:	b8 50       	subi	r27, 0x08	; 8
    7d42:	ba f7       	brpl	.-18     	; 0x7d32 <__fixunssfdi+0x30>
    7d44:	b8 5f       	subi	r27, 0xF8	; 248
    7d46:	49 f0       	breq	.+18     	; 0x7d5a <__fixunssfdi+0x58>
    7d48:	86 95       	lsr	r24
    7d4a:	77 95       	ror	r23
    7d4c:	67 95       	ror	r22
    7d4e:	57 95       	ror	r21
    7d50:	47 95       	ror	r20
    7d52:	37 95       	ror	r19
    7d54:	27 95       	ror	r18
    7d56:	ba 95       	dec	r27
    7d58:	b9 f7       	brne	.-18     	; 0x7d48 <__fixunssfdi+0x46>
    7d5a:	0e f4       	brtc	.+2      	; 0x7d5e <__fixunssfdi+0x5c>
    7d5c:	4e d0       	rcall	.+156    	; 0x7dfa <__fp_negdi>
    7d5e:	88 94       	clc
    7d60:	08 95       	ret
    7d62:	88 94       	clc
    7d64:	60 e0       	ldi	r22, 0x00	; 0
    7d66:	70 e0       	ldi	r23, 0x00	; 0
    7d68:	cb 01       	movw	r24, r22
    7d6a:	08 95       	ret

00007d6c <__floatundisf>:
    7d6c:	e8 94       	clt

00007d6e <__fp_di2sf>:
    7d6e:	f9 2f       	mov	r31, r25
    7d70:	96 eb       	ldi	r25, 0xB6	; 182
    7d72:	ff 23       	and	r31, r31
    7d74:	81 f0       	breq	.+32     	; 0x7d96 <__fp_di2sf+0x28>
    7d76:	12 16       	cp	r1, r18
    7d78:	13 06       	cpc	r1, r19
    7d7a:	14 06       	cpc	r1, r20
    7d7c:	44 0b       	sbc	r20, r20
    7d7e:	93 95       	inc	r25
    7d80:	f6 95       	lsr	r31
    7d82:	87 95       	ror	r24
    7d84:	77 95       	ror	r23
    7d86:	67 95       	ror	r22
    7d88:	57 95       	ror	r21
    7d8a:	40 40       	sbci	r20, 0x00	; 0
    7d8c:	ff 23       	and	r31, r31
    7d8e:	b9 f7       	brne	.-18     	; 0x7d7e <__fp_di2sf+0x10>
    7d90:	1b c0       	rjmp	.+54     	; 0x7dc8 <__fp_di2sf+0x5a>
    7d92:	99 27       	eor	r25, r25
    7d94:	08 95       	ret
    7d96:	88 23       	and	r24, r24
    7d98:	51 f4       	brne	.+20     	; 0x7dae <__fp_di2sf+0x40>
    7d9a:	98 50       	subi	r25, 0x08	; 8
    7d9c:	d2 f7       	brpl	.-12     	; 0x7d92 <__fp_di2sf+0x24>
    7d9e:	87 2b       	or	r24, r23
    7da0:	76 2f       	mov	r23, r22
    7da2:	65 2f       	mov	r22, r21
    7da4:	54 2f       	mov	r21, r20
    7da6:	43 2f       	mov	r20, r19
    7da8:	32 2f       	mov	r19, r18
    7daa:	20 e0       	ldi	r18, 0x00	; 0
    7dac:	b1 f3       	breq	.-20     	; 0x7d9a <__fp_di2sf+0x2c>
    7dae:	12 16       	cp	r1, r18
    7db0:	13 06       	cpc	r1, r19
    7db2:	14 06       	cpc	r1, r20
    7db4:	44 0b       	sbc	r20, r20
    7db6:	88 23       	and	r24, r24
    7db8:	3a f0       	brmi	.+14     	; 0x7dc8 <__fp_di2sf+0x5a>
    7dba:	9a 95       	dec	r25
    7dbc:	44 0f       	add	r20, r20
    7dbe:	55 1f       	adc	r21, r21
    7dc0:	66 1f       	adc	r22, r22
    7dc2:	77 1f       	adc	r23, r23
    7dc4:	88 1f       	adc	r24, r24
    7dc6:	ca f7       	brpl	.-14     	; 0x7dba <__fp_di2sf+0x4c>
    7dc8:	55 23       	and	r21, r21
    7dca:	4a f4       	brpl	.+18     	; 0x7dde <__fp_di2sf+0x70>
    7dcc:	44 0f       	add	r20, r20
    7dce:	55 1f       	adc	r21, r21
    7dd0:	11 f4       	brne	.+4      	; 0x7dd6 <__fp_di2sf+0x68>
    7dd2:	60 ff       	sbrs	r22, 0
    7dd4:	04 c0       	rjmp	.+8      	; 0x7dde <__fp_di2sf+0x70>
    7dd6:	6f 5f       	subi	r22, 0xFF	; 255
    7dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7dda:	8f 4f       	sbci	r24, 0xFF	; 255
    7ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    7dde:	88 0f       	add	r24, r24
    7de0:	96 95       	lsr	r25
    7de2:	87 95       	ror	r24
    7de4:	97 f9       	bld	r25, 7
    7de6:	08 95       	ret

00007de8 <__fp_inf>:
    7de8:	97 f9       	bld	r25, 7
    7dea:	9f 67       	ori	r25, 0x7F	; 127
    7dec:	80 e8       	ldi	r24, 0x80	; 128
    7dee:	70 e0       	ldi	r23, 0x00	; 0
    7df0:	60 e0       	ldi	r22, 0x00	; 0
    7df2:	08 95       	ret

00007df4 <__fp_nan>:
    7df4:	9f ef       	ldi	r25, 0xFF	; 255
    7df6:	80 ec       	ldi	r24, 0xC0	; 192
    7df8:	08 95       	ret

00007dfa <__fp_negdi>:
    7dfa:	90 95       	com	r25
    7dfc:	80 95       	com	r24
    7dfe:	70 95       	com	r23
    7e00:	60 95       	com	r22
    7e02:	50 95       	com	r21
    7e04:	40 95       	com	r20
    7e06:	30 95       	com	r19
    7e08:	21 95       	neg	r18
    7e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e0c:	4f 4f       	sbci	r20, 0xFF	; 255
    7e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e10:	6f 4f       	sbci	r22, 0xFF	; 255
    7e12:	7f 4f       	sbci	r23, 0xFF	; 255
    7e14:	8f 4f       	sbci	r24, 0xFF	; 255
    7e16:	9f 4f       	sbci	r25, 0xFF	; 255
    7e18:	08 95       	ret

00007e1a <__fp_pscA>:
    7e1a:	00 24       	eor	r0, r0
    7e1c:	0a 94       	dec	r0
    7e1e:	16 16       	cp	r1, r22
    7e20:	17 06       	cpc	r1, r23
    7e22:	18 06       	cpc	r1, r24
    7e24:	09 06       	cpc	r0, r25
    7e26:	08 95       	ret

00007e28 <__fp_pscB>:
    7e28:	00 24       	eor	r0, r0
    7e2a:	0a 94       	dec	r0
    7e2c:	12 16       	cp	r1, r18
    7e2e:	13 06       	cpc	r1, r19
    7e30:	14 06       	cpc	r1, r20
    7e32:	05 06       	cpc	r0, r21
    7e34:	08 95       	ret

00007e36 <__fp_round>:
    7e36:	09 2e       	mov	r0, r25
    7e38:	03 94       	inc	r0
    7e3a:	00 0c       	add	r0, r0
    7e3c:	11 f4       	brne	.+4      	; 0x7e42 <__fp_round+0xc>
    7e3e:	88 23       	and	r24, r24
    7e40:	52 f0       	brmi	.+20     	; 0x7e56 <__fp_round+0x20>
    7e42:	bb 0f       	add	r27, r27
    7e44:	40 f4       	brcc	.+16     	; 0x7e56 <__fp_round+0x20>
    7e46:	bf 2b       	or	r27, r31
    7e48:	11 f4       	brne	.+4      	; 0x7e4e <__fp_round+0x18>
    7e4a:	60 ff       	sbrs	r22, 0
    7e4c:	04 c0       	rjmp	.+8      	; 0x7e56 <__fp_round+0x20>
    7e4e:	6f 5f       	subi	r22, 0xFF	; 255
    7e50:	7f 4f       	sbci	r23, 0xFF	; 255
    7e52:	8f 4f       	sbci	r24, 0xFF	; 255
    7e54:	9f 4f       	sbci	r25, 0xFF	; 255
    7e56:	08 95       	ret

00007e58 <__fp_split3>:
    7e58:	57 fd       	sbrc	r21, 7
    7e5a:	90 58       	subi	r25, 0x80	; 128
    7e5c:	44 0f       	add	r20, r20
    7e5e:	55 1f       	adc	r21, r21
    7e60:	59 f0       	breq	.+22     	; 0x7e78 <__fp_splitA+0x10>
    7e62:	5f 3f       	cpi	r21, 0xFF	; 255
    7e64:	71 f0       	breq	.+28     	; 0x7e82 <__fp_splitA+0x1a>
    7e66:	47 95       	ror	r20

00007e68 <__fp_splitA>:
    7e68:	88 0f       	add	r24, r24
    7e6a:	97 fb       	bst	r25, 7
    7e6c:	99 1f       	adc	r25, r25
    7e6e:	61 f0       	breq	.+24     	; 0x7e88 <__fp_splitA+0x20>
    7e70:	9f 3f       	cpi	r25, 0xFF	; 255
    7e72:	79 f0       	breq	.+30     	; 0x7e92 <__fp_splitA+0x2a>
    7e74:	87 95       	ror	r24
    7e76:	08 95       	ret
    7e78:	12 16       	cp	r1, r18
    7e7a:	13 06       	cpc	r1, r19
    7e7c:	14 06       	cpc	r1, r20
    7e7e:	55 1f       	adc	r21, r21
    7e80:	f2 cf       	rjmp	.-28     	; 0x7e66 <__fp_split3+0xe>
    7e82:	46 95       	lsr	r20
    7e84:	f1 df       	rcall	.-30     	; 0x7e68 <__fp_splitA>
    7e86:	08 c0       	rjmp	.+16     	; 0x7e98 <__fp_splitA+0x30>
    7e88:	16 16       	cp	r1, r22
    7e8a:	17 06       	cpc	r1, r23
    7e8c:	18 06       	cpc	r1, r24
    7e8e:	99 1f       	adc	r25, r25
    7e90:	f1 cf       	rjmp	.-30     	; 0x7e74 <__fp_splitA+0xc>
    7e92:	86 95       	lsr	r24
    7e94:	71 05       	cpc	r23, r1
    7e96:	61 05       	cpc	r22, r1
    7e98:	08 94       	sec
    7e9a:	08 95       	ret

00007e9c <__fp_zero>:
    7e9c:	e8 94       	clt

00007e9e <__fp_szero>:
    7e9e:	bb 27       	eor	r27, r27
    7ea0:	66 27       	eor	r22, r22
    7ea2:	77 27       	eor	r23, r23
    7ea4:	cb 01       	movw	r24, r22
    7ea6:	97 f9       	bld	r25, 7
    7ea8:	08 95       	ret

00007eaa <vfprintf>:
    7eaa:	2f 92       	push	r2
    7eac:	3f 92       	push	r3
    7eae:	4f 92       	push	r4
    7eb0:	5f 92       	push	r5
    7eb2:	6f 92       	push	r6
    7eb4:	7f 92       	push	r7
    7eb6:	8f 92       	push	r8
    7eb8:	9f 92       	push	r9
    7eba:	af 92       	push	r10
    7ebc:	bf 92       	push	r11
    7ebe:	cf 92       	push	r12
    7ec0:	df 92       	push	r13
    7ec2:	ef 92       	push	r14
    7ec4:	ff 92       	push	r15
    7ec6:	0f 93       	push	r16
    7ec8:	1f 93       	push	r17
    7eca:	cf 93       	push	r28
    7ecc:	df 93       	push	r29
    7ece:	cd b7       	in	r28, 0x3d	; 61
    7ed0:	de b7       	in	r29, 0x3e	; 62
    7ed2:	60 97       	sbiw	r28, 0x10	; 16
    7ed4:	cd bf       	out	0x3d, r28	; 61
    7ed6:	de bf       	out	0x3e, r29	; 62
    7ed8:	7c 01       	movw	r14, r24
    7eda:	1b 01       	movw	r2, r22
    7edc:	6a 01       	movw	r12, r20
    7ede:	fc 01       	movw	r30, r24
    7ee0:	16 82       	std	Z+6, r1	; 0x06
    7ee2:	17 82       	std	Z+7, r1	; 0x07
    7ee4:	83 81       	ldd	r24, Z+3	; 0x03
    7ee6:	81 ff       	sbrs	r24, 1
    7ee8:	2a c3       	rjmp	.+1620   	; 0x853e <vfprintf+0x694>
    7eea:	9e 01       	movw	r18, r28
    7eec:	2f 5f       	subi	r18, 0xFF	; 255
    7eee:	3f 4f       	sbci	r19, 0xFF	; 255
    7ef0:	39 01       	movw	r6, r18
    7ef2:	f7 01       	movw	r30, r14
    7ef4:	93 81       	ldd	r25, Z+3	; 0x03
    7ef6:	f1 01       	movw	r30, r2
    7ef8:	93 fd       	sbrc	r25, 3
    7efa:	85 91       	lpm	r24, Z+
    7efc:	93 ff       	sbrs	r25, 3
    7efe:	81 91       	ld	r24, Z+
    7f00:	1f 01       	movw	r2, r30
    7f02:	88 23       	and	r24, r24
    7f04:	09 f4       	brne	.+2      	; 0x7f08 <vfprintf+0x5e>
    7f06:	17 c3       	rjmp	.+1582   	; 0x8536 <vfprintf+0x68c>
    7f08:	85 32       	cpi	r24, 0x25	; 37
    7f0a:	39 f4       	brne	.+14     	; 0x7f1a <vfprintf+0x70>
    7f0c:	93 fd       	sbrc	r25, 3
    7f0e:	85 91       	lpm	r24, Z+
    7f10:	93 ff       	sbrs	r25, 3
    7f12:	81 91       	ld	r24, Z+
    7f14:	1f 01       	movw	r2, r30
    7f16:	85 32       	cpi	r24, 0x25	; 37
    7f18:	31 f4       	brne	.+12     	; 0x7f26 <vfprintf+0x7c>
    7f1a:	b7 01       	movw	r22, r14
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	72 d6       	rcall	.+3300   	; 0x8c04 <fputc>
    7f20:	56 01       	movw	r10, r12
    7f22:	65 01       	movw	r12, r10
    7f24:	e6 cf       	rjmp	.-52     	; 0x7ef2 <vfprintf+0x48>
    7f26:	10 e0       	ldi	r17, 0x00	; 0
    7f28:	51 2c       	mov	r5, r1
    7f2a:	91 2c       	mov	r9, r1
    7f2c:	ff e1       	ldi	r31, 0x1F	; 31
    7f2e:	f9 15       	cp	r31, r9
    7f30:	d8 f0       	brcs	.+54     	; 0x7f68 <vfprintf+0xbe>
    7f32:	8b 32       	cpi	r24, 0x2B	; 43
    7f34:	79 f0       	breq	.+30     	; 0x7f54 <vfprintf+0xaa>
    7f36:	38 f4       	brcc	.+14     	; 0x7f46 <vfprintf+0x9c>
    7f38:	80 32       	cpi	r24, 0x20	; 32
    7f3a:	79 f0       	breq	.+30     	; 0x7f5a <vfprintf+0xb0>
    7f3c:	83 32       	cpi	r24, 0x23	; 35
    7f3e:	a1 f4       	brne	.+40     	; 0x7f68 <vfprintf+0xbe>
    7f40:	f9 2d       	mov	r31, r9
    7f42:	f0 61       	ori	r31, 0x10	; 16
    7f44:	2e c0       	rjmp	.+92     	; 0x7fa2 <vfprintf+0xf8>
    7f46:	8d 32       	cpi	r24, 0x2D	; 45
    7f48:	61 f0       	breq	.+24     	; 0x7f62 <vfprintf+0xb8>
    7f4a:	80 33       	cpi	r24, 0x30	; 48
    7f4c:	69 f4       	brne	.+26     	; 0x7f68 <vfprintf+0xbe>
    7f4e:	29 2d       	mov	r18, r9
    7f50:	21 60       	ori	r18, 0x01	; 1
    7f52:	2d c0       	rjmp	.+90     	; 0x7fae <vfprintf+0x104>
    7f54:	39 2d       	mov	r19, r9
    7f56:	32 60       	ori	r19, 0x02	; 2
    7f58:	93 2e       	mov	r9, r19
    7f5a:	89 2d       	mov	r24, r9
    7f5c:	84 60       	ori	r24, 0x04	; 4
    7f5e:	98 2e       	mov	r9, r24
    7f60:	2a c0       	rjmp	.+84     	; 0x7fb6 <vfprintf+0x10c>
    7f62:	e9 2d       	mov	r30, r9
    7f64:	e8 60       	ori	r30, 0x08	; 8
    7f66:	15 c0       	rjmp	.+42     	; 0x7f92 <vfprintf+0xe8>
    7f68:	97 fc       	sbrc	r9, 7
    7f6a:	2d c0       	rjmp	.+90     	; 0x7fc6 <vfprintf+0x11c>
    7f6c:	20 ed       	ldi	r18, 0xD0	; 208
    7f6e:	28 0f       	add	r18, r24
    7f70:	2a 30       	cpi	r18, 0x0A	; 10
    7f72:	88 f4       	brcc	.+34     	; 0x7f96 <vfprintf+0xec>
    7f74:	96 fe       	sbrs	r9, 6
    7f76:	06 c0       	rjmp	.+12     	; 0x7f84 <vfprintf+0xda>
    7f78:	3a e0       	ldi	r19, 0x0A	; 10
    7f7a:	13 9f       	mul	r17, r19
    7f7c:	20 0d       	add	r18, r0
    7f7e:	11 24       	eor	r1, r1
    7f80:	12 2f       	mov	r17, r18
    7f82:	19 c0       	rjmp	.+50     	; 0x7fb6 <vfprintf+0x10c>
    7f84:	8a e0       	ldi	r24, 0x0A	; 10
    7f86:	58 9e       	mul	r5, r24
    7f88:	20 0d       	add	r18, r0
    7f8a:	11 24       	eor	r1, r1
    7f8c:	52 2e       	mov	r5, r18
    7f8e:	e9 2d       	mov	r30, r9
    7f90:	e0 62       	ori	r30, 0x20	; 32
    7f92:	9e 2e       	mov	r9, r30
    7f94:	10 c0       	rjmp	.+32     	; 0x7fb6 <vfprintf+0x10c>
    7f96:	8e 32       	cpi	r24, 0x2E	; 46
    7f98:	31 f4       	brne	.+12     	; 0x7fa6 <vfprintf+0xfc>
    7f9a:	96 fc       	sbrc	r9, 6
    7f9c:	cc c2       	rjmp	.+1432   	; 0x8536 <vfprintf+0x68c>
    7f9e:	f9 2d       	mov	r31, r9
    7fa0:	f0 64       	ori	r31, 0x40	; 64
    7fa2:	9f 2e       	mov	r9, r31
    7fa4:	08 c0       	rjmp	.+16     	; 0x7fb6 <vfprintf+0x10c>
    7fa6:	8c 36       	cpi	r24, 0x6C	; 108
    7fa8:	21 f4       	brne	.+8      	; 0x7fb2 <vfprintf+0x108>
    7faa:	29 2d       	mov	r18, r9
    7fac:	20 68       	ori	r18, 0x80	; 128
    7fae:	92 2e       	mov	r9, r18
    7fb0:	02 c0       	rjmp	.+4      	; 0x7fb6 <vfprintf+0x10c>
    7fb2:	88 36       	cpi	r24, 0x68	; 104
    7fb4:	41 f4       	brne	.+16     	; 0x7fc6 <vfprintf+0x11c>
    7fb6:	f1 01       	movw	r30, r2
    7fb8:	93 fd       	sbrc	r25, 3
    7fba:	85 91       	lpm	r24, Z+
    7fbc:	93 ff       	sbrs	r25, 3
    7fbe:	81 91       	ld	r24, Z+
    7fc0:	1f 01       	movw	r2, r30
    7fc2:	81 11       	cpse	r24, r1
    7fc4:	b3 cf       	rjmp	.-154    	; 0x7f2c <vfprintf+0x82>
    7fc6:	9b eb       	ldi	r25, 0xBB	; 187
    7fc8:	98 0f       	add	r25, r24
    7fca:	93 30       	cpi	r25, 0x03	; 3
    7fcc:	20 f4       	brcc	.+8      	; 0x7fd6 <vfprintf+0x12c>
    7fce:	99 2d       	mov	r25, r9
    7fd0:	90 61       	ori	r25, 0x10	; 16
    7fd2:	80 5e       	subi	r24, 0xE0	; 224
    7fd4:	07 c0       	rjmp	.+14     	; 0x7fe4 <vfprintf+0x13a>
    7fd6:	9b e9       	ldi	r25, 0x9B	; 155
    7fd8:	98 0f       	add	r25, r24
    7fda:	93 30       	cpi	r25, 0x03	; 3
    7fdc:	08 f0       	brcs	.+2      	; 0x7fe0 <vfprintf+0x136>
    7fde:	59 c1       	rjmp	.+690    	; 0x8292 <vfprintf+0x3e8>
    7fe0:	99 2d       	mov	r25, r9
    7fe2:	9f 7e       	andi	r25, 0xEF	; 239
    7fe4:	96 ff       	sbrs	r25, 6
    7fe6:	16 e0       	ldi	r17, 0x06	; 6
    7fe8:	9f 73       	andi	r25, 0x3F	; 63
    7fea:	99 2e       	mov	r9, r25
    7fec:	85 36       	cpi	r24, 0x65	; 101
    7fee:	19 f4       	brne	.+6      	; 0x7ff6 <vfprintf+0x14c>
    7ff0:	90 64       	ori	r25, 0x40	; 64
    7ff2:	99 2e       	mov	r9, r25
    7ff4:	08 c0       	rjmp	.+16     	; 0x8006 <vfprintf+0x15c>
    7ff6:	86 36       	cpi	r24, 0x66	; 102
    7ff8:	21 f4       	brne	.+8      	; 0x8002 <vfprintf+0x158>
    7ffa:	39 2f       	mov	r19, r25
    7ffc:	30 68       	ori	r19, 0x80	; 128
    7ffe:	93 2e       	mov	r9, r19
    8000:	02 c0       	rjmp	.+4      	; 0x8006 <vfprintf+0x15c>
    8002:	11 11       	cpse	r17, r1
    8004:	11 50       	subi	r17, 0x01	; 1
    8006:	97 fe       	sbrs	r9, 7
    8008:	07 c0       	rjmp	.+14     	; 0x8018 <vfprintf+0x16e>
    800a:	1c 33       	cpi	r17, 0x3C	; 60
    800c:	50 f4       	brcc	.+20     	; 0x8022 <vfprintf+0x178>
    800e:	44 24       	eor	r4, r4
    8010:	43 94       	inc	r4
    8012:	41 0e       	add	r4, r17
    8014:	27 e0       	ldi	r18, 0x07	; 7
    8016:	0b c0       	rjmp	.+22     	; 0x802e <vfprintf+0x184>
    8018:	18 30       	cpi	r17, 0x08	; 8
    801a:	38 f0       	brcs	.+14     	; 0x802a <vfprintf+0x180>
    801c:	27 e0       	ldi	r18, 0x07	; 7
    801e:	17 e0       	ldi	r17, 0x07	; 7
    8020:	05 c0       	rjmp	.+10     	; 0x802c <vfprintf+0x182>
    8022:	27 e0       	ldi	r18, 0x07	; 7
    8024:	9c e3       	ldi	r25, 0x3C	; 60
    8026:	49 2e       	mov	r4, r25
    8028:	02 c0       	rjmp	.+4      	; 0x802e <vfprintf+0x184>
    802a:	21 2f       	mov	r18, r17
    802c:	41 2c       	mov	r4, r1
    802e:	56 01       	movw	r10, r12
    8030:	84 e0       	ldi	r24, 0x04	; 4
    8032:	a8 0e       	add	r10, r24
    8034:	b1 1c       	adc	r11, r1
    8036:	f6 01       	movw	r30, r12
    8038:	60 81       	ld	r22, Z
    803a:	71 81       	ldd	r23, Z+1	; 0x01
    803c:	82 81       	ldd	r24, Z+2	; 0x02
    803e:	93 81       	ldd	r25, Z+3	; 0x03
    8040:	04 2d       	mov	r16, r4
    8042:	a3 01       	movw	r20, r6
    8044:	95 d4       	rcall	.+2346   	; 0x8970 <__ftoa_engine>
    8046:	6c 01       	movw	r12, r24
    8048:	f9 81       	ldd	r31, Y+1	; 0x01
    804a:	fc 87       	std	Y+12, r31	; 0x0c
    804c:	f0 ff       	sbrs	r31, 0
    804e:	02 c0       	rjmp	.+4      	; 0x8054 <vfprintf+0x1aa>
    8050:	f3 ff       	sbrs	r31, 3
    8052:	06 c0       	rjmp	.+12     	; 0x8060 <vfprintf+0x1b6>
    8054:	91 fc       	sbrc	r9, 1
    8056:	06 c0       	rjmp	.+12     	; 0x8064 <vfprintf+0x1ba>
    8058:	92 fe       	sbrs	r9, 2
    805a:	06 c0       	rjmp	.+12     	; 0x8068 <vfprintf+0x1be>
    805c:	00 e2       	ldi	r16, 0x20	; 32
    805e:	05 c0       	rjmp	.+10     	; 0x806a <vfprintf+0x1c0>
    8060:	0d e2       	ldi	r16, 0x2D	; 45
    8062:	03 c0       	rjmp	.+6      	; 0x806a <vfprintf+0x1c0>
    8064:	0b e2       	ldi	r16, 0x2B	; 43
    8066:	01 c0       	rjmp	.+2      	; 0x806a <vfprintf+0x1c0>
    8068:	00 e0       	ldi	r16, 0x00	; 0
    806a:	8c 85       	ldd	r24, Y+12	; 0x0c
    806c:	8c 70       	andi	r24, 0x0C	; 12
    806e:	19 f0       	breq	.+6      	; 0x8076 <vfprintf+0x1cc>
    8070:	01 11       	cpse	r16, r1
    8072:	43 c2       	rjmp	.+1158   	; 0x84fa <vfprintf+0x650>
    8074:	80 c2       	rjmp	.+1280   	; 0x8576 <vfprintf+0x6cc>
    8076:	97 fe       	sbrs	r9, 7
    8078:	10 c0       	rjmp	.+32     	; 0x809a <vfprintf+0x1f0>
    807a:	4c 0c       	add	r4, r12
    807c:	fc 85       	ldd	r31, Y+12	; 0x0c
    807e:	f4 ff       	sbrs	r31, 4
    8080:	04 c0       	rjmp	.+8      	; 0x808a <vfprintf+0x1e0>
    8082:	8a 81       	ldd	r24, Y+2	; 0x02
    8084:	81 33       	cpi	r24, 0x31	; 49
    8086:	09 f4       	brne	.+2      	; 0x808a <vfprintf+0x1e0>
    8088:	4a 94       	dec	r4
    808a:	14 14       	cp	r1, r4
    808c:	74 f5       	brge	.+92     	; 0x80ea <vfprintf+0x240>
    808e:	28 e0       	ldi	r18, 0x08	; 8
    8090:	24 15       	cp	r18, r4
    8092:	78 f5       	brcc	.+94     	; 0x80f2 <vfprintf+0x248>
    8094:	88 e0       	ldi	r24, 0x08	; 8
    8096:	48 2e       	mov	r4, r24
    8098:	2c c0       	rjmp	.+88     	; 0x80f2 <vfprintf+0x248>
    809a:	96 fc       	sbrc	r9, 6
    809c:	2a c0       	rjmp	.+84     	; 0x80f2 <vfprintf+0x248>
    809e:	81 2f       	mov	r24, r17
    80a0:	90 e0       	ldi	r25, 0x00	; 0
    80a2:	8c 15       	cp	r24, r12
    80a4:	9d 05       	cpc	r25, r13
    80a6:	9c f0       	brlt	.+38     	; 0x80ce <vfprintf+0x224>
    80a8:	3c ef       	ldi	r19, 0xFC	; 252
    80aa:	c3 16       	cp	r12, r19
    80ac:	3f ef       	ldi	r19, 0xFF	; 255
    80ae:	d3 06       	cpc	r13, r19
    80b0:	74 f0       	brlt	.+28     	; 0x80ce <vfprintf+0x224>
    80b2:	89 2d       	mov	r24, r9
    80b4:	80 68       	ori	r24, 0x80	; 128
    80b6:	98 2e       	mov	r9, r24
    80b8:	0a c0       	rjmp	.+20     	; 0x80ce <vfprintf+0x224>
    80ba:	e2 e0       	ldi	r30, 0x02	; 2
    80bc:	f0 e0       	ldi	r31, 0x00	; 0
    80be:	ec 0f       	add	r30, r28
    80c0:	fd 1f       	adc	r31, r29
    80c2:	e1 0f       	add	r30, r17
    80c4:	f1 1d       	adc	r31, r1
    80c6:	80 81       	ld	r24, Z
    80c8:	80 33       	cpi	r24, 0x30	; 48
    80ca:	19 f4       	brne	.+6      	; 0x80d2 <vfprintf+0x228>
    80cc:	11 50       	subi	r17, 0x01	; 1
    80ce:	11 11       	cpse	r17, r1
    80d0:	f4 cf       	rjmp	.-24     	; 0x80ba <vfprintf+0x210>
    80d2:	97 fe       	sbrs	r9, 7
    80d4:	0e c0       	rjmp	.+28     	; 0x80f2 <vfprintf+0x248>
    80d6:	44 24       	eor	r4, r4
    80d8:	43 94       	inc	r4
    80da:	41 0e       	add	r4, r17
    80dc:	81 2f       	mov	r24, r17
    80de:	90 e0       	ldi	r25, 0x00	; 0
    80e0:	c8 16       	cp	r12, r24
    80e2:	d9 06       	cpc	r13, r25
    80e4:	2c f4       	brge	.+10     	; 0x80f0 <vfprintf+0x246>
    80e6:	1c 19       	sub	r17, r12
    80e8:	04 c0       	rjmp	.+8      	; 0x80f2 <vfprintf+0x248>
    80ea:	44 24       	eor	r4, r4
    80ec:	43 94       	inc	r4
    80ee:	01 c0       	rjmp	.+2      	; 0x80f2 <vfprintf+0x248>
    80f0:	10 e0       	ldi	r17, 0x00	; 0
    80f2:	97 fe       	sbrs	r9, 7
    80f4:	06 c0       	rjmp	.+12     	; 0x8102 <vfprintf+0x258>
    80f6:	1c 14       	cp	r1, r12
    80f8:	1d 04       	cpc	r1, r13
    80fa:	34 f4       	brge	.+12     	; 0x8108 <vfprintf+0x25e>
    80fc:	c6 01       	movw	r24, r12
    80fe:	01 96       	adiw	r24, 0x01	; 1
    8100:	05 c0       	rjmp	.+10     	; 0x810c <vfprintf+0x262>
    8102:	85 e0       	ldi	r24, 0x05	; 5
    8104:	90 e0       	ldi	r25, 0x00	; 0
    8106:	02 c0       	rjmp	.+4      	; 0x810c <vfprintf+0x262>
    8108:	81 e0       	ldi	r24, 0x01	; 1
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	01 11       	cpse	r16, r1
    810e:	01 96       	adiw	r24, 0x01	; 1
    8110:	11 23       	and	r17, r17
    8112:	31 f0       	breq	.+12     	; 0x8120 <vfprintf+0x276>
    8114:	21 2f       	mov	r18, r17
    8116:	30 e0       	ldi	r19, 0x00	; 0
    8118:	2f 5f       	subi	r18, 0xFF	; 255
    811a:	3f 4f       	sbci	r19, 0xFF	; 255
    811c:	82 0f       	add	r24, r18
    811e:	93 1f       	adc	r25, r19
    8120:	25 2d       	mov	r18, r5
    8122:	30 e0       	ldi	r19, 0x00	; 0
    8124:	82 17       	cp	r24, r18
    8126:	93 07       	cpc	r25, r19
    8128:	14 f4       	brge	.+4      	; 0x812e <vfprintf+0x284>
    812a:	58 1a       	sub	r5, r24
    812c:	01 c0       	rjmp	.+2      	; 0x8130 <vfprintf+0x286>
    812e:	51 2c       	mov	r5, r1
    8130:	89 2d       	mov	r24, r9
    8132:	89 70       	andi	r24, 0x09	; 9
    8134:	41 f4       	brne	.+16     	; 0x8146 <vfprintf+0x29c>
    8136:	55 20       	and	r5, r5
    8138:	31 f0       	breq	.+12     	; 0x8146 <vfprintf+0x29c>
    813a:	b7 01       	movw	r22, r14
    813c:	80 e2       	ldi	r24, 0x20	; 32
    813e:	90 e0       	ldi	r25, 0x00	; 0
    8140:	61 d5       	rcall	.+2754   	; 0x8c04 <fputc>
    8142:	5a 94       	dec	r5
    8144:	f8 cf       	rjmp	.-16     	; 0x8136 <vfprintf+0x28c>
    8146:	00 23       	and	r16, r16
    8148:	21 f0       	breq	.+8      	; 0x8152 <vfprintf+0x2a8>
    814a:	b7 01       	movw	r22, r14
    814c:	80 2f       	mov	r24, r16
    814e:	90 e0       	ldi	r25, 0x00	; 0
    8150:	59 d5       	rcall	.+2738   	; 0x8c04 <fputc>
    8152:	93 fc       	sbrc	r9, 3
    8154:	08 c0       	rjmp	.+16     	; 0x8166 <vfprintf+0x2bc>
    8156:	55 20       	and	r5, r5
    8158:	31 f0       	breq	.+12     	; 0x8166 <vfprintf+0x2bc>
    815a:	b7 01       	movw	r22, r14
    815c:	80 e3       	ldi	r24, 0x30	; 48
    815e:	90 e0       	ldi	r25, 0x00	; 0
    8160:	51 d5       	rcall	.+2722   	; 0x8c04 <fputc>
    8162:	5a 94       	dec	r5
    8164:	f8 cf       	rjmp	.-16     	; 0x8156 <vfprintf+0x2ac>
    8166:	97 fe       	sbrs	r9, 7
    8168:	4a c0       	rjmp	.+148    	; 0x81fe <vfprintf+0x354>
    816a:	46 01       	movw	r8, r12
    816c:	d7 fe       	sbrs	r13, 7
    816e:	02 c0       	rjmp	.+4      	; 0x8174 <vfprintf+0x2ca>
    8170:	81 2c       	mov	r8, r1
    8172:	91 2c       	mov	r9, r1
    8174:	c6 01       	movw	r24, r12
    8176:	88 19       	sub	r24, r8
    8178:	99 09       	sbc	r25, r9
    817a:	f3 01       	movw	r30, r6
    817c:	e8 0f       	add	r30, r24
    817e:	f9 1f       	adc	r31, r25
    8180:	ed 87       	std	Y+13, r30	; 0x0d
    8182:	fe 87       	std	Y+14, r31	; 0x0e
    8184:	96 01       	movw	r18, r12
    8186:	24 19       	sub	r18, r4
    8188:	31 09       	sbc	r19, r1
    818a:	2f 87       	std	Y+15, r18	; 0x0f
    818c:	38 8b       	std	Y+16, r19	; 0x10
    818e:	01 2f       	mov	r16, r17
    8190:	10 e0       	ldi	r17, 0x00	; 0
    8192:	11 95       	neg	r17
    8194:	01 95       	neg	r16
    8196:	11 09       	sbc	r17, r1
    8198:	3f ef       	ldi	r19, 0xFF	; 255
    819a:	83 16       	cp	r8, r19
    819c:	93 06       	cpc	r9, r19
    819e:	21 f4       	brne	.+8      	; 0x81a8 <vfprintf+0x2fe>
    81a0:	b7 01       	movw	r22, r14
    81a2:	8e e2       	ldi	r24, 0x2E	; 46
    81a4:	90 e0       	ldi	r25, 0x00	; 0
    81a6:	2e d5       	rcall	.+2652   	; 0x8c04 <fputc>
    81a8:	c8 14       	cp	r12, r8
    81aa:	d9 04       	cpc	r13, r9
    81ac:	4c f0       	brlt	.+18     	; 0x81c0 <vfprintf+0x316>
    81ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    81b0:	98 89       	ldd	r25, Y+16	; 0x10
    81b2:	88 15       	cp	r24, r8
    81b4:	99 05       	cpc	r25, r9
    81b6:	24 f4       	brge	.+8      	; 0x81c0 <vfprintf+0x316>
    81b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    81ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    81bc:	81 81       	ldd	r24, Z+1	; 0x01
    81be:	01 c0       	rjmp	.+2      	; 0x81c2 <vfprintf+0x318>
    81c0:	80 e3       	ldi	r24, 0x30	; 48
    81c2:	f1 e0       	ldi	r31, 0x01	; 1
    81c4:	8f 1a       	sub	r8, r31
    81c6:	91 08       	sbc	r9, r1
    81c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    81ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    81cc:	2f 5f       	subi	r18, 0xFF	; 255
    81ce:	3f 4f       	sbci	r19, 0xFF	; 255
    81d0:	2d 87       	std	Y+13, r18	; 0x0d
    81d2:	3e 87       	std	Y+14, r19	; 0x0e
    81d4:	80 16       	cp	r8, r16
    81d6:	91 06       	cpc	r9, r17
    81d8:	24 f0       	brlt	.+8      	; 0x81e2 <vfprintf+0x338>
    81da:	b7 01       	movw	r22, r14
    81dc:	90 e0       	ldi	r25, 0x00	; 0
    81de:	12 d5       	rcall	.+2596   	; 0x8c04 <fputc>
    81e0:	db cf       	rjmp	.-74     	; 0x8198 <vfprintf+0x2ee>
    81e2:	c8 14       	cp	r12, r8
    81e4:	d9 04       	cpc	r13, r9
    81e6:	41 f4       	brne	.+16     	; 0x81f8 <vfprintf+0x34e>
    81e8:	9a 81       	ldd	r25, Y+2	; 0x02
    81ea:	96 33       	cpi	r25, 0x36	; 54
    81ec:	20 f4       	brcc	.+8      	; 0x81f6 <vfprintf+0x34c>
    81ee:	95 33       	cpi	r25, 0x35	; 53
    81f0:	19 f4       	brne	.+6      	; 0x81f8 <vfprintf+0x34e>
    81f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    81f4:	34 ff       	sbrs	r19, 4
    81f6:	81 e3       	ldi	r24, 0x31	; 49
    81f8:	b7 01       	movw	r22, r14
    81fa:	90 e0       	ldi	r25, 0x00	; 0
    81fc:	48 c0       	rjmp	.+144    	; 0x828e <vfprintf+0x3e4>
    81fe:	8a 81       	ldd	r24, Y+2	; 0x02
    8200:	81 33       	cpi	r24, 0x31	; 49
    8202:	19 f0       	breq	.+6      	; 0x820a <vfprintf+0x360>
    8204:	9c 85       	ldd	r25, Y+12	; 0x0c
    8206:	9f 7e       	andi	r25, 0xEF	; 239
    8208:	9c 87       	std	Y+12, r25	; 0x0c
    820a:	b7 01       	movw	r22, r14
    820c:	90 e0       	ldi	r25, 0x00	; 0
    820e:	fa d4       	rcall	.+2548   	; 0x8c04 <fputc>
    8210:	11 11       	cpse	r17, r1
    8212:	05 c0       	rjmp	.+10     	; 0x821e <vfprintf+0x374>
    8214:	94 fc       	sbrc	r9, 4
    8216:	16 c0       	rjmp	.+44     	; 0x8244 <vfprintf+0x39a>
    8218:	85 e6       	ldi	r24, 0x65	; 101
    821a:	90 e0       	ldi	r25, 0x00	; 0
    821c:	15 c0       	rjmp	.+42     	; 0x8248 <vfprintf+0x39e>
    821e:	b7 01       	movw	r22, r14
    8220:	8e e2       	ldi	r24, 0x2E	; 46
    8222:	90 e0       	ldi	r25, 0x00	; 0
    8224:	ef d4       	rcall	.+2526   	; 0x8c04 <fputc>
    8226:	1e 5f       	subi	r17, 0xFE	; 254
    8228:	82 e0       	ldi	r24, 0x02	; 2
    822a:	01 e0       	ldi	r16, 0x01	; 1
    822c:	08 0f       	add	r16, r24
    822e:	f3 01       	movw	r30, r6
    8230:	e8 0f       	add	r30, r24
    8232:	f1 1d       	adc	r31, r1
    8234:	80 81       	ld	r24, Z
    8236:	b7 01       	movw	r22, r14
    8238:	90 e0       	ldi	r25, 0x00	; 0
    823a:	e4 d4       	rcall	.+2504   	; 0x8c04 <fputc>
    823c:	80 2f       	mov	r24, r16
    823e:	01 13       	cpse	r16, r17
    8240:	f4 cf       	rjmp	.-24     	; 0x822a <vfprintf+0x380>
    8242:	e8 cf       	rjmp	.-48     	; 0x8214 <vfprintf+0x36a>
    8244:	85 e4       	ldi	r24, 0x45	; 69
    8246:	90 e0       	ldi	r25, 0x00	; 0
    8248:	b7 01       	movw	r22, r14
    824a:	dc d4       	rcall	.+2488   	; 0x8c04 <fputc>
    824c:	d7 fc       	sbrc	r13, 7
    824e:	06 c0       	rjmp	.+12     	; 0x825c <vfprintf+0x3b2>
    8250:	c1 14       	cp	r12, r1
    8252:	d1 04       	cpc	r13, r1
    8254:	41 f4       	brne	.+16     	; 0x8266 <vfprintf+0x3bc>
    8256:	ec 85       	ldd	r30, Y+12	; 0x0c
    8258:	e4 ff       	sbrs	r30, 4
    825a:	05 c0       	rjmp	.+10     	; 0x8266 <vfprintf+0x3bc>
    825c:	d1 94       	neg	r13
    825e:	c1 94       	neg	r12
    8260:	d1 08       	sbc	r13, r1
    8262:	8d e2       	ldi	r24, 0x2D	; 45
    8264:	01 c0       	rjmp	.+2      	; 0x8268 <vfprintf+0x3be>
    8266:	8b e2       	ldi	r24, 0x2B	; 43
    8268:	b7 01       	movw	r22, r14
    826a:	90 e0       	ldi	r25, 0x00	; 0
    826c:	cb d4       	rcall	.+2454   	; 0x8c04 <fputc>
    826e:	80 e3       	ldi	r24, 0x30	; 48
    8270:	2a e0       	ldi	r18, 0x0A	; 10
    8272:	c2 16       	cp	r12, r18
    8274:	d1 04       	cpc	r13, r1
    8276:	2c f0       	brlt	.+10     	; 0x8282 <vfprintf+0x3d8>
    8278:	8f 5f       	subi	r24, 0xFF	; 255
    827a:	fa e0       	ldi	r31, 0x0A	; 10
    827c:	cf 1a       	sub	r12, r31
    827e:	d1 08       	sbc	r13, r1
    8280:	f7 cf       	rjmp	.-18     	; 0x8270 <vfprintf+0x3c6>
    8282:	b7 01       	movw	r22, r14
    8284:	90 e0       	ldi	r25, 0x00	; 0
    8286:	be d4       	rcall	.+2428   	; 0x8c04 <fputc>
    8288:	b7 01       	movw	r22, r14
    828a:	c6 01       	movw	r24, r12
    828c:	c0 96       	adiw	r24, 0x30	; 48
    828e:	ba d4       	rcall	.+2420   	; 0x8c04 <fputc>
    8290:	49 c1       	rjmp	.+658    	; 0x8524 <vfprintf+0x67a>
    8292:	83 36       	cpi	r24, 0x63	; 99
    8294:	31 f0       	breq	.+12     	; 0x82a2 <vfprintf+0x3f8>
    8296:	83 37       	cpi	r24, 0x73	; 115
    8298:	79 f0       	breq	.+30     	; 0x82b8 <vfprintf+0x40e>
    829a:	83 35       	cpi	r24, 0x53	; 83
    829c:	09 f0       	breq	.+2      	; 0x82a0 <vfprintf+0x3f6>
    829e:	52 c0       	rjmp	.+164    	; 0x8344 <vfprintf+0x49a>
    82a0:	1f c0       	rjmp	.+62     	; 0x82e0 <vfprintf+0x436>
    82a2:	56 01       	movw	r10, r12
    82a4:	32 e0       	ldi	r19, 0x02	; 2
    82a6:	a3 0e       	add	r10, r19
    82a8:	b1 1c       	adc	r11, r1
    82aa:	f6 01       	movw	r30, r12
    82ac:	80 81       	ld	r24, Z
    82ae:	89 83       	std	Y+1, r24	; 0x01
    82b0:	01 e0       	ldi	r16, 0x01	; 1
    82b2:	10 e0       	ldi	r17, 0x00	; 0
    82b4:	63 01       	movw	r12, r6
    82b6:	11 c0       	rjmp	.+34     	; 0x82da <vfprintf+0x430>
    82b8:	56 01       	movw	r10, r12
    82ba:	f2 e0       	ldi	r31, 0x02	; 2
    82bc:	af 0e       	add	r10, r31
    82be:	b1 1c       	adc	r11, r1
    82c0:	f6 01       	movw	r30, r12
    82c2:	c0 80       	ld	r12, Z
    82c4:	d1 80       	ldd	r13, Z+1	; 0x01
    82c6:	96 fe       	sbrs	r9, 6
    82c8:	03 c0       	rjmp	.+6      	; 0x82d0 <vfprintf+0x426>
    82ca:	61 2f       	mov	r22, r17
    82cc:	70 e0       	ldi	r23, 0x00	; 0
    82ce:	02 c0       	rjmp	.+4      	; 0x82d4 <vfprintf+0x42a>
    82d0:	6f ef       	ldi	r22, 0xFF	; 255
    82d2:	7f ef       	ldi	r23, 0xFF	; 255
    82d4:	c6 01       	movw	r24, r12
    82d6:	41 d4       	rcall	.+2178   	; 0x8b5a <strnlen>
    82d8:	8c 01       	movw	r16, r24
    82da:	f9 2d       	mov	r31, r9
    82dc:	ff 77       	andi	r31, 0x7F	; 127
    82de:	13 c0       	rjmp	.+38     	; 0x8306 <vfprintf+0x45c>
    82e0:	56 01       	movw	r10, r12
    82e2:	22 e0       	ldi	r18, 0x02	; 2
    82e4:	a2 0e       	add	r10, r18
    82e6:	b1 1c       	adc	r11, r1
    82e8:	f6 01       	movw	r30, r12
    82ea:	c0 80       	ld	r12, Z
    82ec:	d1 80       	ldd	r13, Z+1	; 0x01
    82ee:	96 fe       	sbrs	r9, 6
    82f0:	03 c0       	rjmp	.+6      	; 0x82f8 <vfprintf+0x44e>
    82f2:	61 2f       	mov	r22, r17
    82f4:	70 e0       	ldi	r23, 0x00	; 0
    82f6:	02 c0       	rjmp	.+4      	; 0x82fc <vfprintf+0x452>
    82f8:	6f ef       	ldi	r22, 0xFF	; 255
    82fa:	7f ef       	ldi	r23, 0xFF	; 255
    82fc:	c6 01       	movw	r24, r12
    82fe:	10 d4       	rcall	.+2080   	; 0x8b20 <strnlen_P>
    8300:	8c 01       	movw	r16, r24
    8302:	f9 2d       	mov	r31, r9
    8304:	f0 68       	ori	r31, 0x80	; 128
    8306:	9f 2e       	mov	r9, r31
    8308:	f3 fd       	sbrc	r31, 3
    830a:	18 c0       	rjmp	.+48     	; 0x833c <vfprintf+0x492>
    830c:	85 2d       	mov	r24, r5
    830e:	90 e0       	ldi	r25, 0x00	; 0
    8310:	08 17       	cp	r16, r24
    8312:	19 07       	cpc	r17, r25
    8314:	98 f4       	brcc	.+38     	; 0x833c <vfprintf+0x492>
    8316:	b7 01       	movw	r22, r14
    8318:	80 e2       	ldi	r24, 0x20	; 32
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	73 d4       	rcall	.+2278   	; 0x8c04 <fputc>
    831e:	5a 94       	dec	r5
    8320:	f5 cf       	rjmp	.-22     	; 0x830c <vfprintf+0x462>
    8322:	f6 01       	movw	r30, r12
    8324:	97 fc       	sbrc	r9, 7
    8326:	85 91       	lpm	r24, Z+
    8328:	97 fe       	sbrs	r9, 7
    832a:	81 91       	ld	r24, Z+
    832c:	6f 01       	movw	r12, r30
    832e:	b7 01       	movw	r22, r14
    8330:	90 e0       	ldi	r25, 0x00	; 0
    8332:	68 d4       	rcall	.+2256   	; 0x8c04 <fputc>
    8334:	51 10       	cpse	r5, r1
    8336:	5a 94       	dec	r5
    8338:	01 50       	subi	r16, 0x01	; 1
    833a:	11 09       	sbc	r17, r1
    833c:	01 15       	cp	r16, r1
    833e:	11 05       	cpc	r17, r1
    8340:	81 f7       	brne	.-32     	; 0x8322 <vfprintf+0x478>
    8342:	f0 c0       	rjmp	.+480    	; 0x8524 <vfprintf+0x67a>
    8344:	84 36       	cpi	r24, 0x64	; 100
    8346:	11 f0       	breq	.+4      	; 0x834c <vfprintf+0x4a2>
    8348:	89 36       	cpi	r24, 0x69	; 105
    834a:	59 f5       	brne	.+86     	; 0x83a2 <vfprintf+0x4f8>
    834c:	56 01       	movw	r10, r12
    834e:	97 fe       	sbrs	r9, 7
    8350:	09 c0       	rjmp	.+18     	; 0x8364 <vfprintf+0x4ba>
    8352:	24 e0       	ldi	r18, 0x04	; 4
    8354:	a2 0e       	add	r10, r18
    8356:	b1 1c       	adc	r11, r1
    8358:	f6 01       	movw	r30, r12
    835a:	60 81       	ld	r22, Z
    835c:	71 81       	ldd	r23, Z+1	; 0x01
    835e:	82 81       	ldd	r24, Z+2	; 0x02
    8360:	93 81       	ldd	r25, Z+3	; 0x03
    8362:	0a c0       	rjmp	.+20     	; 0x8378 <vfprintf+0x4ce>
    8364:	f2 e0       	ldi	r31, 0x02	; 2
    8366:	af 0e       	add	r10, r31
    8368:	b1 1c       	adc	r11, r1
    836a:	f6 01       	movw	r30, r12
    836c:	60 81       	ld	r22, Z
    836e:	71 81       	ldd	r23, Z+1	; 0x01
    8370:	07 2e       	mov	r0, r23
    8372:	00 0c       	add	r0, r0
    8374:	88 0b       	sbc	r24, r24
    8376:	99 0b       	sbc	r25, r25
    8378:	f9 2d       	mov	r31, r9
    837a:	ff 76       	andi	r31, 0x6F	; 111
    837c:	9f 2e       	mov	r9, r31
    837e:	97 ff       	sbrs	r25, 7
    8380:	09 c0       	rjmp	.+18     	; 0x8394 <vfprintf+0x4ea>
    8382:	90 95       	com	r25
    8384:	80 95       	com	r24
    8386:	70 95       	com	r23
    8388:	61 95       	neg	r22
    838a:	7f 4f       	sbci	r23, 0xFF	; 255
    838c:	8f 4f       	sbci	r24, 0xFF	; 255
    838e:	9f 4f       	sbci	r25, 0xFF	; 255
    8390:	f0 68       	ori	r31, 0x80	; 128
    8392:	9f 2e       	mov	r9, r31
    8394:	2a e0       	ldi	r18, 0x0A	; 10
    8396:	30 e0       	ldi	r19, 0x00	; 0
    8398:	a3 01       	movw	r20, r6
    839a:	db d4       	rcall	.+2486   	; 0x8d52 <__ultoa_invert>
    839c:	c8 2e       	mov	r12, r24
    839e:	c6 18       	sub	r12, r6
    83a0:	3e c0       	rjmp	.+124    	; 0x841e <vfprintf+0x574>
    83a2:	09 2d       	mov	r16, r9
    83a4:	85 37       	cpi	r24, 0x75	; 117
    83a6:	21 f4       	brne	.+8      	; 0x83b0 <vfprintf+0x506>
    83a8:	0f 7e       	andi	r16, 0xEF	; 239
    83aa:	2a e0       	ldi	r18, 0x0A	; 10
    83ac:	30 e0       	ldi	r19, 0x00	; 0
    83ae:	1d c0       	rjmp	.+58     	; 0x83ea <vfprintf+0x540>
    83b0:	09 7f       	andi	r16, 0xF9	; 249
    83b2:	8f 36       	cpi	r24, 0x6F	; 111
    83b4:	91 f0       	breq	.+36     	; 0x83da <vfprintf+0x530>
    83b6:	18 f4       	brcc	.+6      	; 0x83be <vfprintf+0x514>
    83b8:	88 35       	cpi	r24, 0x58	; 88
    83ba:	59 f0       	breq	.+22     	; 0x83d2 <vfprintf+0x528>
    83bc:	bc c0       	rjmp	.+376    	; 0x8536 <vfprintf+0x68c>
    83be:	80 37       	cpi	r24, 0x70	; 112
    83c0:	19 f0       	breq	.+6      	; 0x83c8 <vfprintf+0x51e>
    83c2:	88 37       	cpi	r24, 0x78	; 120
    83c4:	11 f0       	breq	.+4      	; 0x83ca <vfprintf+0x520>
    83c6:	b7 c0       	rjmp	.+366    	; 0x8536 <vfprintf+0x68c>
    83c8:	00 61       	ori	r16, 0x10	; 16
    83ca:	04 ff       	sbrs	r16, 4
    83cc:	09 c0       	rjmp	.+18     	; 0x83e0 <vfprintf+0x536>
    83ce:	04 60       	ori	r16, 0x04	; 4
    83d0:	07 c0       	rjmp	.+14     	; 0x83e0 <vfprintf+0x536>
    83d2:	94 fe       	sbrs	r9, 4
    83d4:	08 c0       	rjmp	.+16     	; 0x83e6 <vfprintf+0x53c>
    83d6:	06 60       	ori	r16, 0x06	; 6
    83d8:	06 c0       	rjmp	.+12     	; 0x83e6 <vfprintf+0x53c>
    83da:	28 e0       	ldi	r18, 0x08	; 8
    83dc:	30 e0       	ldi	r19, 0x00	; 0
    83de:	05 c0       	rjmp	.+10     	; 0x83ea <vfprintf+0x540>
    83e0:	20 e1       	ldi	r18, 0x10	; 16
    83e2:	30 e0       	ldi	r19, 0x00	; 0
    83e4:	02 c0       	rjmp	.+4      	; 0x83ea <vfprintf+0x540>
    83e6:	20 e1       	ldi	r18, 0x10	; 16
    83e8:	32 e0       	ldi	r19, 0x02	; 2
    83ea:	56 01       	movw	r10, r12
    83ec:	07 ff       	sbrs	r16, 7
    83ee:	09 c0       	rjmp	.+18     	; 0x8402 <vfprintf+0x558>
    83f0:	84 e0       	ldi	r24, 0x04	; 4
    83f2:	a8 0e       	add	r10, r24
    83f4:	b1 1c       	adc	r11, r1
    83f6:	f6 01       	movw	r30, r12
    83f8:	60 81       	ld	r22, Z
    83fa:	71 81       	ldd	r23, Z+1	; 0x01
    83fc:	82 81       	ldd	r24, Z+2	; 0x02
    83fe:	93 81       	ldd	r25, Z+3	; 0x03
    8400:	08 c0       	rjmp	.+16     	; 0x8412 <vfprintf+0x568>
    8402:	f2 e0       	ldi	r31, 0x02	; 2
    8404:	af 0e       	add	r10, r31
    8406:	b1 1c       	adc	r11, r1
    8408:	f6 01       	movw	r30, r12
    840a:	60 81       	ld	r22, Z
    840c:	71 81       	ldd	r23, Z+1	; 0x01
    840e:	80 e0       	ldi	r24, 0x00	; 0
    8410:	90 e0       	ldi	r25, 0x00	; 0
    8412:	a3 01       	movw	r20, r6
    8414:	9e d4       	rcall	.+2364   	; 0x8d52 <__ultoa_invert>
    8416:	c8 2e       	mov	r12, r24
    8418:	c6 18       	sub	r12, r6
    841a:	0f 77       	andi	r16, 0x7F	; 127
    841c:	90 2e       	mov	r9, r16
    841e:	96 fe       	sbrs	r9, 6
    8420:	0b c0       	rjmp	.+22     	; 0x8438 <vfprintf+0x58e>
    8422:	09 2d       	mov	r16, r9
    8424:	0e 7f       	andi	r16, 0xFE	; 254
    8426:	c1 16       	cp	r12, r17
    8428:	50 f4       	brcc	.+20     	; 0x843e <vfprintf+0x594>
    842a:	94 fe       	sbrs	r9, 4
    842c:	0a c0       	rjmp	.+20     	; 0x8442 <vfprintf+0x598>
    842e:	92 fc       	sbrc	r9, 2
    8430:	08 c0       	rjmp	.+16     	; 0x8442 <vfprintf+0x598>
    8432:	09 2d       	mov	r16, r9
    8434:	0e 7e       	andi	r16, 0xEE	; 238
    8436:	05 c0       	rjmp	.+10     	; 0x8442 <vfprintf+0x598>
    8438:	dc 2c       	mov	r13, r12
    843a:	09 2d       	mov	r16, r9
    843c:	03 c0       	rjmp	.+6      	; 0x8444 <vfprintf+0x59a>
    843e:	dc 2c       	mov	r13, r12
    8440:	01 c0       	rjmp	.+2      	; 0x8444 <vfprintf+0x59a>
    8442:	d1 2e       	mov	r13, r17
    8444:	04 ff       	sbrs	r16, 4
    8446:	0d c0       	rjmp	.+26     	; 0x8462 <vfprintf+0x5b8>
    8448:	fe 01       	movw	r30, r28
    844a:	ec 0d       	add	r30, r12
    844c:	f1 1d       	adc	r31, r1
    844e:	80 81       	ld	r24, Z
    8450:	80 33       	cpi	r24, 0x30	; 48
    8452:	11 f4       	brne	.+4      	; 0x8458 <vfprintf+0x5ae>
    8454:	09 7e       	andi	r16, 0xE9	; 233
    8456:	09 c0       	rjmp	.+18     	; 0x846a <vfprintf+0x5c0>
    8458:	02 ff       	sbrs	r16, 2
    845a:	06 c0       	rjmp	.+12     	; 0x8468 <vfprintf+0x5be>
    845c:	d3 94       	inc	r13
    845e:	d3 94       	inc	r13
    8460:	04 c0       	rjmp	.+8      	; 0x846a <vfprintf+0x5c0>
    8462:	80 2f       	mov	r24, r16
    8464:	86 78       	andi	r24, 0x86	; 134
    8466:	09 f0       	breq	.+2      	; 0x846a <vfprintf+0x5c0>
    8468:	d3 94       	inc	r13
    846a:	03 fd       	sbrc	r16, 3
    846c:	10 c0       	rjmp	.+32     	; 0x848e <vfprintf+0x5e4>
    846e:	00 ff       	sbrs	r16, 0
    8470:	06 c0       	rjmp	.+12     	; 0x847e <vfprintf+0x5d4>
    8472:	1c 2d       	mov	r17, r12
    8474:	d5 14       	cp	r13, r5
    8476:	78 f4       	brcc	.+30     	; 0x8496 <vfprintf+0x5ec>
    8478:	15 0d       	add	r17, r5
    847a:	1d 19       	sub	r17, r13
    847c:	0c c0       	rjmp	.+24     	; 0x8496 <vfprintf+0x5ec>
    847e:	d5 14       	cp	r13, r5
    8480:	50 f4       	brcc	.+20     	; 0x8496 <vfprintf+0x5ec>
    8482:	b7 01       	movw	r22, r14
    8484:	80 e2       	ldi	r24, 0x20	; 32
    8486:	90 e0       	ldi	r25, 0x00	; 0
    8488:	bd d3       	rcall	.+1914   	; 0x8c04 <fputc>
    848a:	d3 94       	inc	r13
    848c:	f8 cf       	rjmp	.-16     	; 0x847e <vfprintf+0x5d4>
    848e:	d5 14       	cp	r13, r5
    8490:	10 f4       	brcc	.+4      	; 0x8496 <vfprintf+0x5ec>
    8492:	5d 18       	sub	r5, r13
    8494:	01 c0       	rjmp	.+2      	; 0x8498 <vfprintf+0x5ee>
    8496:	51 2c       	mov	r5, r1
    8498:	04 ff       	sbrs	r16, 4
    849a:	0f c0       	rjmp	.+30     	; 0x84ba <vfprintf+0x610>
    849c:	b7 01       	movw	r22, r14
    849e:	80 e3       	ldi	r24, 0x30	; 48
    84a0:	90 e0       	ldi	r25, 0x00	; 0
    84a2:	b0 d3       	rcall	.+1888   	; 0x8c04 <fputc>
    84a4:	02 ff       	sbrs	r16, 2
    84a6:	16 c0       	rjmp	.+44     	; 0x84d4 <vfprintf+0x62a>
    84a8:	01 fd       	sbrc	r16, 1
    84aa:	03 c0       	rjmp	.+6      	; 0x84b2 <vfprintf+0x608>
    84ac:	88 e7       	ldi	r24, 0x78	; 120
    84ae:	90 e0       	ldi	r25, 0x00	; 0
    84b0:	02 c0       	rjmp	.+4      	; 0x84b6 <vfprintf+0x60c>
    84b2:	88 e5       	ldi	r24, 0x58	; 88
    84b4:	90 e0       	ldi	r25, 0x00	; 0
    84b6:	b7 01       	movw	r22, r14
    84b8:	0c c0       	rjmp	.+24     	; 0x84d2 <vfprintf+0x628>
    84ba:	80 2f       	mov	r24, r16
    84bc:	86 78       	andi	r24, 0x86	; 134
    84be:	51 f0       	breq	.+20     	; 0x84d4 <vfprintf+0x62a>
    84c0:	01 ff       	sbrs	r16, 1
    84c2:	02 c0       	rjmp	.+4      	; 0x84c8 <vfprintf+0x61e>
    84c4:	8b e2       	ldi	r24, 0x2B	; 43
    84c6:	01 c0       	rjmp	.+2      	; 0x84ca <vfprintf+0x620>
    84c8:	80 e2       	ldi	r24, 0x20	; 32
    84ca:	07 fd       	sbrc	r16, 7
    84cc:	8d e2       	ldi	r24, 0x2D	; 45
    84ce:	b7 01       	movw	r22, r14
    84d0:	90 e0       	ldi	r25, 0x00	; 0
    84d2:	98 d3       	rcall	.+1840   	; 0x8c04 <fputc>
    84d4:	c1 16       	cp	r12, r17
    84d6:	30 f4       	brcc	.+12     	; 0x84e4 <vfprintf+0x63a>
    84d8:	b7 01       	movw	r22, r14
    84da:	80 e3       	ldi	r24, 0x30	; 48
    84dc:	90 e0       	ldi	r25, 0x00	; 0
    84de:	92 d3       	rcall	.+1828   	; 0x8c04 <fputc>
    84e0:	11 50       	subi	r17, 0x01	; 1
    84e2:	f8 cf       	rjmp	.-16     	; 0x84d4 <vfprintf+0x62a>
    84e4:	ca 94       	dec	r12
    84e6:	f3 01       	movw	r30, r6
    84e8:	ec 0d       	add	r30, r12
    84ea:	f1 1d       	adc	r31, r1
    84ec:	80 81       	ld	r24, Z
    84ee:	b7 01       	movw	r22, r14
    84f0:	90 e0       	ldi	r25, 0x00	; 0
    84f2:	88 d3       	rcall	.+1808   	; 0x8c04 <fputc>
    84f4:	c1 10       	cpse	r12, r1
    84f6:	f6 cf       	rjmp	.-20     	; 0x84e4 <vfprintf+0x63a>
    84f8:	15 c0       	rjmp	.+42     	; 0x8524 <vfprintf+0x67a>
    84fa:	f4 e0       	ldi	r31, 0x04	; 4
    84fc:	f5 15       	cp	r31, r5
    84fe:	50 f5       	brcc	.+84     	; 0x8554 <vfprintf+0x6aa>
    8500:	84 e0       	ldi	r24, 0x04	; 4
    8502:	58 1a       	sub	r5, r24
    8504:	93 fe       	sbrs	r9, 3
    8506:	1e c0       	rjmp	.+60     	; 0x8544 <vfprintf+0x69a>
    8508:	01 11       	cpse	r16, r1
    850a:	25 c0       	rjmp	.+74     	; 0x8556 <vfprintf+0x6ac>
    850c:	2c 85       	ldd	r18, Y+12	; 0x0c
    850e:	23 ff       	sbrs	r18, 3
    8510:	27 c0       	rjmp	.+78     	; 0x8560 <vfprintf+0x6b6>
    8512:	0c ef       	ldi	r16, 0xFC	; 252
    8514:	11 e0       	ldi	r17, 0x01	; 1
    8516:	39 2d       	mov	r19, r9
    8518:	30 71       	andi	r19, 0x10	; 16
    851a:	93 2e       	mov	r9, r19
    851c:	f8 01       	movw	r30, r16
    851e:	84 91       	lpm	r24, Z
    8520:	81 11       	cpse	r24, r1
    8522:	21 c0       	rjmp	.+66     	; 0x8566 <vfprintf+0x6bc>
    8524:	55 20       	and	r5, r5
    8526:	09 f4       	brne	.+2      	; 0x852a <vfprintf+0x680>
    8528:	fc cc       	rjmp	.-1544   	; 0x7f22 <vfprintf+0x78>
    852a:	b7 01       	movw	r22, r14
    852c:	80 e2       	ldi	r24, 0x20	; 32
    852e:	90 e0       	ldi	r25, 0x00	; 0
    8530:	69 d3       	rcall	.+1746   	; 0x8c04 <fputc>
    8532:	5a 94       	dec	r5
    8534:	f7 cf       	rjmp	.-18     	; 0x8524 <vfprintf+0x67a>
    8536:	f7 01       	movw	r30, r14
    8538:	86 81       	ldd	r24, Z+6	; 0x06
    853a:	97 81       	ldd	r25, Z+7	; 0x07
    853c:	23 c0       	rjmp	.+70     	; 0x8584 <vfprintf+0x6da>
    853e:	8f ef       	ldi	r24, 0xFF	; 255
    8540:	9f ef       	ldi	r25, 0xFF	; 255
    8542:	20 c0       	rjmp	.+64     	; 0x8584 <vfprintf+0x6da>
    8544:	b7 01       	movw	r22, r14
    8546:	80 e2       	ldi	r24, 0x20	; 32
    8548:	90 e0       	ldi	r25, 0x00	; 0
    854a:	5c d3       	rcall	.+1720   	; 0x8c04 <fputc>
    854c:	5a 94       	dec	r5
    854e:	51 10       	cpse	r5, r1
    8550:	f9 cf       	rjmp	.-14     	; 0x8544 <vfprintf+0x69a>
    8552:	da cf       	rjmp	.-76     	; 0x8508 <vfprintf+0x65e>
    8554:	51 2c       	mov	r5, r1
    8556:	b7 01       	movw	r22, r14
    8558:	80 2f       	mov	r24, r16
    855a:	90 e0       	ldi	r25, 0x00	; 0
    855c:	53 d3       	rcall	.+1702   	; 0x8c04 <fputc>
    855e:	d6 cf       	rjmp	.-84     	; 0x850c <vfprintf+0x662>
    8560:	00 e0       	ldi	r16, 0x00	; 0
    8562:	12 e0       	ldi	r17, 0x02	; 2
    8564:	d8 cf       	rjmp	.-80     	; 0x8516 <vfprintf+0x66c>
    8566:	91 10       	cpse	r9, r1
    8568:	80 52       	subi	r24, 0x20	; 32
    856a:	b7 01       	movw	r22, r14
    856c:	90 e0       	ldi	r25, 0x00	; 0
    856e:	4a d3       	rcall	.+1684   	; 0x8c04 <fputc>
    8570:	0f 5f       	subi	r16, 0xFF	; 255
    8572:	1f 4f       	sbci	r17, 0xFF	; 255
    8574:	d3 cf       	rjmp	.-90     	; 0x851c <vfprintf+0x672>
    8576:	23 e0       	ldi	r18, 0x03	; 3
    8578:	25 15       	cp	r18, r5
    857a:	10 f4       	brcc	.+4      	; 0x8580 <vfprintf+0x6d6>
    857c:	83 e0       	ldi	r24, 0x03	; 3
    857e:	c1 cf       	rjmp	.-126    	; 0x8502 <vfprintf+0x658>
    8580:	51 2c       	mov	r5, r1
    8582:	c4 cf       	rjmp	.-120    	; 0x850c <vfprintf+0x662>
    8584:	60 96       	adiw	r28, 0x10	; 16
    8586:	cd bf       	out	0x3d, r28	; 61
    8588:	de bf       	out	0x3e, r29	; 62
    858a:	df 91       	pop	r29
    858c:	cf 91       	pop	r28
    858e:	1f 91       	pop	r17
    8590:	0f 91       	pop	r16
    8592:	ff 90       	pop	r15
    8594:	ef 90       	pop	r14
    8596:	df 90       	pop	r13
    8598:	cf 90       	pop	r12
    859a:	bf 90       	pop	r11
    859c:	af 90       	pop	r10
    859e:	9f 90       	pop	r9
    85a0:	8f 90       	pop	r8
    85a2:	7f 90       	pop	r7
    85a4:	6f 90       	pop	r6
    85a6:	5f 90       	pop	r5
    85a8:	4f 90       	pop	r4
    85aa:	3f 90       	pop	r3
    85ac:	2f 90       	pop	r2
    85ae:	08 95       	ret

000085b0 <__udivmodhi4>:
    85b0:	aa 1b       	sub	r26, r26
    85b2:	bb 1b       	sub	r27, r27
    85b4:	51 e1       	ldi	r21, 0x11	; 17
    85b6:	07 c0       	rjmp	.+14     	; 0x85c6 <__udivmodhi4_ep>

000085b8 <__udivmodhi4_loop>:
    85b8:	aa 1f       	adc	r26, r26
    85ba:	bb 1f       	adc	r27, r27
    85bc:	a6 17       	cp	r26, r22
    85be:	b7 07       	cpc	r27, r23
    85c0:	10 f0       	brcs	.+4      	; 0x85c6 <__udivmodhi4_ep>
    85c2:	a6 1b       	sub	r26, r22
    85c4:	b7 0b       	sbc	r27, r23

000085c6 <__udivmodhi4_ep>:
    85c6:	88 1f       	adc	r24, r24
    85c8:	99 1f       	adc	r25, r25
    85ca:	5a 95       	dec	r21
    85cc:	a9 f7       	brne	.-22     	; 0x85b8 <__udivmodhi4_loop>
    85ce:	80 95       	com	r24
    85d0:	90 95       	com	r25
    85d2:	bc 01       	movw	r22, r24
    85d4:	cd 01       	movw	r24, r26
    85d6:	08 95       	ret

000085d8 <__udivmodsi4>:
    85d8:	a1 e2       	ldi	r26, 0x21	; 33
    85da:	1a 2e       	mov	r1, r26
    85dc:	aa 1b       	sub	r26, r26
    85de:	bb 1b       	sub	r27, r27
    85e0:	fd 01       	movw	r30, r26
    85e2:	0d c0       	rjmp	.+26     	; 0x85fe <__udivmodsi4_ep>

000085e4 <__udivmodsi4_loop>:
    85e4:	aa 1f       	adc	r26, r26
    85e6:	bb 1f       	adc	r27, r27
    85e8:	ee 1f       	adc	r30, r30
    85ea:	ff 1f       	adc	r31, r31
    85ec:	a2 17       	cp	r26, r18
    85ee:	b3 07       	cpc	r27, r19
    85f0:	e4 07       	cpc	r30, r20
    85f2:	f5 07       	cpc	r31, r21
    85f4:	20 f0       	brcs	.+8      	; 0x85fe <__udivmodsi4_ep>
    85f6:	a2 1b       	sub	r26, r18
    85f8:	b3 0b       	sbc	r27, r19
    85fa:	e4 0b       	sbc	r30, r20
    85fc:	f5 0b       	sbc	r31, r21

000085fe <__udivmodsi4_ep>:
    85fe:	66 1f       	adc	r22, r22
    8600:	77 1f       	adc	r23, r23
    8602:	88 1f       	adc	r24, r24
    8604:	99 1f       	adc	r25, r25
    8606:	1a 94       	dec	r1
    8608:	69 f7       	brne	.-38     	; 0x85e4 <__udivmodsi4_loop>
    860a:	60 95       	com	r22
    860c:	70 95       	com	r23
    860e:	80 95       	com	r24
    8610:	90 95       	com	r25
    8612:	9b 01       	movw	r18, r22
    8614:	ac 01       	movw	r20, r24
    8616:	bd 01       	movw	r22, r26
    8618:	cf 01       	movw	r24, r30
    861a:	08 95       	ret

0000861c <__umoddi3>:
    861c:	68 94       	set
    861e:	01 c0       	rjmp	.+2      	; 0x8622 <__udivdi3_umoddi3>

00008620 <__udivdi3>:
    8620:	e8 94       	clt

00008622 <__udivdi3_umoddi3>:
    8622:	8f 92       	push	r8
    8624:	9f 92       	push	r9
    8626:	cf 93       	push	r28
    8628:	df 93       	push	r29
    862a:	05 d0       	rcall	.+10     	; 0x8636 <__udivmod64>
    862c:	df 91       	pop	r29
    862e:	cf 91       	pop	r28
    8630:	9f 90       	pop	r9
    8632:	8f 90       	pop	r8
    8634:	08 95       	ret

00008636 <__udivmod64>:
    8636:	88 24       	eor	r8, r8
    8638:	99 24       	eor	r9, r9
    863a:	f4 01       	movw	r30, r8
    863c:	e4 01       	movw	r28, r8
    863e:	b0 e4       	ldi	r27, 0x40	; 64
    8640:	9f 93       	push	r25
    8642:	aa 27       	eor	r26, r26
    8644:	9a 15       	cp	r25, r10
    8646:	8b 04       	cpc	r8, r11
    8648:	9c 04       	cpc	r9, r12
    864a:	ed 05       	cpc	r30, r13
    864c:	fe 05       	cpc	r31, r14
    864e:	cf 05       	cpc	r28, r15
    8650:	d0 07       	cpc	r29, r16
    8652:	a1 07       	cpc	r26, r17
    8654:	98 f4       	brcc	.+38     	; 0x867c <__udivmod64+0x46>
    8656:	ad 2f       	mov	r26, r29
    8658:	dc 2f       	mov	r29, r28
    865a:	cf 2f       	mov	r28, r31
    865c:	fe 2f       	mov	r31, r30
    865e:	e9 2d       	mov	r30, r9
    8660:	98 2c       	mov	r9, r8
    8662:	89 2e       	mov	r8, r25
    8664:	98 2f       	mov	r25, r24
    8666:	87 2f       	mov	r24, r23
    8668:	76 2f       	mov	r23, r22
    866a:	65 2f       	mov	r22, r21
    866c:	54 2f       	mov	r21, r20
    866e:	43 2f       	mov	r20, r19
    8670:	32 2f       	mov	r19, r18
    8672:	22 27       	eor	r18, r18
    8674:	b8 50       	subi	r27, 0x08	; 8
    8676:	31 f7       	brne	.-52     	; 0x8644 <__udivmod64+0xe>
    8678:	bf 91       	pop	r27
    867a:	27 c0       	rjmp	.+78     	; 0x86ca <__udivmod64+0x94>
    867c:	1b 2e       	mov	r1, r27
    867e:	bf 91       	pop	r27
    8680:	bb 27       	eor	r27, r27
    8682:	22 0f       	add	r18, r18
    8684:	33 1f       	adc	r19, r19
    8686:	44 1f       	adc	r20, r20
    8688:	55 1f       	adc	r21, r21
    868a:	66 1f       	adc	r22, r22
    868c:	77 1f       	adc	r23, r23
    868e:	88 1f       	adc	r24, r24
    8690:	99 1f       	adc	r25, r25
    8692:	88 1c       	adc	r8, r8
    8694:	99 1c       	adc	r9, r9
    8696:	ee 1f       	adc	r30, r30
    8698:	ff 1f       	adc	r31, r31
    869a:	cc 1f       	adc	r28, r28
    869c:	dd 1f       	adc	r29, r29
    869e:	aa 1f       	adc	r26, r26
    86a0:	bb 1f       	adc	r27, r27
    86a2:	8a 14       	cp	r8, r10
    86a4:	9b 04       	cpc	r9, r11
    86a6:	ec 05       	cpc	r30, r12
    86a8:	fd 05       	cpc	r31, r13
    86aa:	ce 05       	cpc	r28, r14
    86ac:	df 05       	cpc	r29, r15
    86ae:	a0 07       	cpc	r26, r16
    86b0:	b1 07       	cpc	r27, r17
    86b2:	48 f0       	brcs	.+18     	; 0x86c6 <__udivmod64+0x90>
    86b4:	8a 18       	sub	r8, r10
    86b6:	9b 08       	sbc	r9, r11
    86b8:	ec 09       	sbc	r30, r12
    86ba:	fd 09       	sbc	r31, r13
    86bc:	ce 09       	sbc	r28, r14
    86be:	df 09       	sbc	r29, r15
    86c0:	a0 0b       	sbc	r26, r16
    86c2:	b1 0b       	sbc	r27, r17
    86c4:	21 60       	ori	r18, 0x01	; 1
    86c6:	1a 94       	dec	r1
    86c8:	e1 f6       	brne	.-72     	; 0x8682 <__udivmod64+0x4c>
    86ca:	2e f4       	brtc	.+10     	; 0x86d6 <__udivmod64+0xa0>
    86cc:	94 01       	movw	r18, r8
    86ce:	af 01       	movw	r20, r30
    86d0:	be 01       	movw	r22, r28
    86d2:	cd 01       	movw	r24, r26
    86d4:	00 0c       	add	r0, r0
    86d6:	08 95       	ret

000086d8 <__ashldi3>:
    86d8:	0f 93       	push	r16
    86da:	08 30       	cpi	r16, 0x08	; 8
    86dc:	90 f0       	brcs	.+36     	; 0x8702 <__ashldi3+0x2a>
    86de:	98 2f       	mov	r25, r24
    86e0:	87 2f       	mov	r24, r23
    86e2:	76 2f       	mov	r23, r22
    86e4:	65 2f       	mov	r22, r21
    86e6:	54 2f       	mov	r21, r20
    86e8:	43 2f       	mov	r20, r19
    86ea:	32 2f       	mov	r19, r18
    86ec:	22 27       	eor	r18, r18
    86ee:	08 50       	subi	r16, 0x08	; 8
    86f0:	f4 cf       	rjmp	.-24     	; 0x86da <__ashldi3+0x2>
    86f2:	22 0f       	add	r18, r18
    86f4:	33 1f       	adc	r19, r19
    86f6:	44 1f       	adc	r20, r20
    86f8:	55 1f       	adc	r21, r21
    86fa:	66 1f       	adc	r22, r22
    86fc:	77 1f       	adc	r23, r23
    86fe:	88 1f       	adc	r24, r24
    8700:	99 1f       	adc	r25, r25
    8702:	0a 95       	dec	r16
    8704:	b2 f7       	brpl	.-20     	; 0x86f2 <__ashldi3+0x1a>
    8706:	0f 91       	pop	r16
    8708:	08 95       	ret

0000870a <__adddi3>:
    870a:	2a 0d       	add	r18, r10
    870c:	3b 1d       	adc	r19, r11
    870e:	4c 1d       	adc	r20, r12
    8710:	5d 1d       	adc	r21, r13
    8712:	6e 1d       	adc	r22, r14
    8714:	7f 1d       	adc	r23, r15
    8716:	80 1f       	adc	r24, r16
    8718:	91 1f       	adc	r25, r17
    871a:	08 95       	ret

0000871c <__subdi3>:
    871c:	2a 19       	sub	r18, r10
    871e:	3b 09       	sbc	r19, r11
    8720:	4c 09       	sbc	r20, r12
    8722:	5d 09       	sbc	r21, r13
    8724:	6e 09       	sbc	r22, r14
    8726:	7f 09       	sbc	r23, r15
    8728:	80 0b       	sbc	r24, r16
    872a:	91 0b       	sbc	r25, r17
    872c:	08 95       	ret

0000872e <malloc>:
    872e:	0f 93       	push	r16
    8730:	1f 93       	push	r17
    8732:	cf 93       	push	r28
    8734:	df 93       	push	r29
    8736:	82 30       	cpi	r24, 0x02	; 2
    8738:	91 05       	cpc	r25, r1
    873a:	10 f4       	brcc	.+4      	; 0x8740 <malloc+0x12>
    873c:	82 e0       	ldi	r24, 0x02	; 2
    873e:	90 e0       	ldi	r25, 0x00	; 0
    8740:	e0 91 ac 27 	lds	r30, 0x27AC	; 0x8027ac <__flp>
    8744:	f0 91 ad 27 	lds	r31, 0x27AD	; 0x8027ad <__flp+0x1>
    8748:	20 e0       	ldi	r18, 0x00	; 0
    874a:	30 e0       	ldi	r19, 0x00	; 0
    874c:	a0 e0       	ldi	r26, 0x00	; 0
    874e:	b0 e0       	ldi	r27, 0x00	; 0
    8750:	30 97       	sbiw	r30, 0x00	; 0
    8752:	19 f1       	breq	.+70     	; 0x879a <malloc+0x6c>
    8754:	40 81       	ld	r20, Z
    8756:	51 81       	ldd	r21, Z+1	; 0x01
    8758:	02 81       	ldd	r16, Z+2	; 0x02
    875a:	13 81       	ldd	r17, Z+3	; 0x03
    875c:	48 17       	cp	r20, r24
    875e:	59 07       	cpc	r21, r25
    8760:	c8 f0       	brcs	.+50     	; 0x8794 <malloc+0x66>
    8762:	84 17       	cp	r24, r20
    8764:	95 07       	cpc	r25, r21
    8766:	69 f4       	brne	.+26     	; 0x8782 <malloc+0x54>
    8768:	10 97       	sbiw	r26, 0x00	; 0
    876a:	31 f0       	breq	.+12     	; 0x8778 <malloc+0x4a>
    876c:	12 96       	adiw	r26, 0x02	; 2
    876e:	0c 93       	st	X, r16
    8770:	12 97       	sbiw	r26, 0x02	; 2
    8772:	13 96       	adiw	r26, 0x03	; 3
    8774:	1c 93       	st	X, r17
    8776:	27 c0       	rjmp	.+78     	; 0x87c6 <malloc+0x98>
    8778:	00 93 ac 27 	sts	0x27AC, r16	; 0x8027ac <__flp>
    877c:	10 93 ad 27 	sts	0x27AD, r17	; 0x8027ad <__flp+0x1>
    8780:	22 c0       	rjmp	.+68     	; 0x87c6 <malloc+0x98>
    8782:	21 15       	cp	r18, r1
    8784:	31 05       	cpc	r19, r1
    8786:	19 f0       	breq	.+6      	; 0x878e <malloc+0x60>
    8788:	42 17       	cp	r20, r18
    878a:	53 07       	cpc	r21, r19
    878c:	18 f4       	brcc	.+6      	; 0x8794 <malloc+0x66>
    878e:	9a 01       	movw	r18, r20
    8790:	bd 01       	movw	r22, r26
    8792:	ef 01       	movw	r28, r30
    8794:	df 01       	movw	r26, r30
    8796:	f8 01       	movw	r30, r16
    8798:	db cf       	rjmp	.-74     	; 0x8750 <malloc+0x22>
    879a:	21 15       	cp	r18, r1
    879c:	31 05       	cpc	r19, r1
    879e:	f9 f0       	breq	.+62     	; 0x87de <malloc+0xb0>
    87a0:	28 1b       	sub	r18, r24
    87a2:	39 0b       	sbc	r19, r25
    87a4:	24 30       	cpi	r18, 0x04	; 4
    87a6:	31 05       	cpc	r19, r1
    87a8:	80 f4       	brcc	.+32     	; 0x87ca <malloc+0x9c>
    87aa:	8a 81       	ldd	r24, Y+2	; 0x02
    87ac:	9b 81       	ldd	r25, Y+3	; 0x03
    87ae:	61 15       	cp	r22, r1
    87b0:	71 05       	cpc	r23, r1
    87b2:	21 f0       	breq	.+8      	; 0x87bc <malloc+0x8e>
    87b4:	fb 01       	movw	r30, r22
    87b6:	82 83       	std	Z+2, r24	; 0x02
    87b8:	93 83       	std	Z+3, r25	; 0x03
    87ba:	04 c0       	rjmp	.+8      	; 0x87c4 <malloc+0x96>
    87bc:	80 93 ac 27 	sts	0x27AC, r24	; 0x8027ac <__flp>
    87c0:	90 93 ad 27 	sts	0x27AD, r25	; 0x8027ad <__flp+0x1>
    87c4:	fe 01       	movw	r30, r28
    87c6:	32 96       	adiw	r30, 0x02	; 2
    87c8:	44 c0       	rjmp	.+136    	; 0x8852 <malloc+0x124>
    87ca:	fe 01       	movw	r30, r28
    87cc:	e2 0f       	add	r30, r18
    87ce:	f3 1f       	adc	r31, r19
    87d0:	81 93       	st	Z+, r24
    87d2:	91 93       	st	Z+, r25
    87d4:	22 50       	subi	r18, 0x02	; 2
    87d6:	31 09       	sbc	r19, r1
    87d8:	28 83       	st	Y, r18
    87da:	39 83       	std	Y+1, r19	; 0x01
    87dc:	3a c0       	rjmp	.+116    	; 0x8852 <malloc+0x124>
    87de:	20 91 aa 27 	lds	r18, 0x27AA	; 0x8027aa <__brkval>
    87e2:	30 91 ab 27 	lds	r19, 0x27AB	; 0x8027ab <__brkval+0x1>
    87e6:	23 2b       	or	r18, r19
    87e8:	41 f4       	brne	.+16     	; 0x87fa <malloc+0xcc>
    87ea:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    87ee:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    87f2:	20 93 aa 27 	sts	0x27AA, r18	; 0x8027aa <__brkval>
    87f6:	30 93 ab 27 	sts	0x27AB, r19	; 0x8027ab <__brkval+0x1>
    87fa:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    87fe:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    8802:	21 15       	cp	r18, r1
    8804:	31 05       	cpc	r19, r1
    8806:	41 f4       	brne	.+16     	; 0x8818 <malloc+0xea>
    8808:	2d b7       	in	r18, 0x3d	; 61
    880a:	3e b7       	in	r19, 0x3e	; 62
    880c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    8810:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    8814:	24 1b       	sub	r18, r20
    8816:	35 0b       	sbc	r19, r21
    8818:	e0 91 aa 27 	lds	r30, 0x27AA	; 0x8027aa <__brkval>
    881c:	f0 91 ab 27 	lds	r31, 0x27AB	; 0x8027ab <__brkval+0x1>
    8820:	e2 17       	cp	r30, r18
    8822:	f3 07       	cpc	r31, r19
    8824:	a0 f4       	brcc	.+40     	; 0x884e <malloc+0x120>
    8826:	2e 1b       	sub	r18, r30
    8828:	3f 0b       	sbc	r19, r31
    882a:	28 17       	cp	r18, r24
    882c:	39 07       	cpc	r19, r25
    882e:	78 f0       	brcs	.+30     	; 0x884e <malloc+0x120>
    8830:	ac 01       	movw	r20, r24
    8832:	4e 5f       	subi	r20, 0xFE	; 254
    8834:	5f 4f       	sbci	r21, 0xFF	; 255
    8836:	24 17       	cp	r18, r20
    8838:	35 07       	cpc	r19, r21
    883a:	48 f0       	brcs	.+18     	; 0x884e <malloc+0x120>
    883c:	4e 0f       	add	r20, r30
    883e:	5f 1f       	adc	r21, r31
    8840:	40 93 aa 27 	sts	0x27AA, r20	; 0x8027aa <__brkval>
    8844:	50 93 ab 27 	sts	0x27AB, r21	; 0x8027ab <__brkval+0x1>
    8848:	81 93       	st	Z+, r24
    884a:	91 93       	st	Z+, r25
    884c:	02 c0       	rjmp	.+4      	; 0x8852 <malloc+0x124>
    884e:	e0 e0       	ldi	r30, 0x00	; 0
    8850:	f0 e0       	ldi	r31, 0x00	; 0
    8852:	cf 01       	movw	r24, r30
    8854:	df 91       	pop	r29
    8856:	cf 91       	pop	r28
    8858:	1f 91       	pop	r17
    885a:	0f 91       	pop	r16
    885c:	08 95       	ret

0000885e <free>:
    885e:	cf 93       	push	r28
    8860:	df 93       	push	r29
    8862:	00 97       	sbiw	r24, 0x00	; 0
    8864:	09 f4       	brne	.+2      	; 0x8868 <free+0xa>
    8866:	81 c0       	rjmp	.+258    	; 0x896a <free+0x10c>
    8868:	fc 01       	movw	r30, r24
    886a:	32 97       	sbiw	r30, 0x02	; 2
    886c:	12 82       	std	Z+2, r1	; 0x02
    886e:	13 82       	std	Z+3, r1	; 0x03
    8870:	a0 91 ac 27 	lds	r26, 0x27AC	; 0x8027ac <__flp>
    8874:	b0 91 ad 27 	lds	r27, 0x27AD	; 0x8027ad <__flp+0x1>
    8878:	10 97       	sbiw	r26, 0x00	; 0
    887a:	81 f4       	brne	.+32     	; 0x889c <free+0x3e>
    887c:	20 81       	ld	r18, Z
    887e:	31 81       	ldd	r19, Z+1	; 0x01
    8880:	82 0f       	add	r24, r18
    8882:	93 1f       	adc	r25, r19
    8884:	20 91 aa 27 	lds	r18, 0x27AA	; 0x8027aa <__brkval>
    8888:	30 91 ab 27 	lds	r19, 0x27AB	; 0x8027ab <__brkval+0x1>
    888c:	28 17       	cp	r18, r24
    888e:	39 07       	cpc	r19, r25
    8890:	51 f5       	brne	.+84     	; 0x88e6 <free+0x88>
    8892:	e0 93 aa 27 	sts	0x27AA, r30	; 0x8027aa <__brkval>
    8896:	f0 93 ab 27 	sts	0x27AB, r31	; 0x8027ab <__brkval+0x1>
    889a:	67 c0       	rjmp	.+206    	; 0x896a <free+0x10c>
    889c:	ed 01       	movw	r28, r26
    889e:	20 e0       	ldi	r18, 0x00	; 0
    88a0:	30 e0       	ldi	r19, 0x00	; 0
    88a2:	ce 17       	cp	r28, r30
    88a4:	df 07       	cpc	r29, r31
    88a6:	40 f4       	brcc	.+16     	; 0x88b8 <free+0x5a>
    88a8:	4a 81       	ldd	r20, Y+2	; 0x02
    88aa:	5b 81       	ldd	r21, Y+3	; 0x03
    88ac:	9e 01       	movw	r18, r28
    88ae:	41 15       	cp	r20, r1
    88b0:	51 05       	cpc	r21, r1
    88b2:	f1 f0       	breq	.+60     	; 0x88f0 <free+0x92>
    88b4:	ea 01       	movw	r28, r20
    88b6:	f5 cf       	rjmp	.-22     	; 0x88a2 <free+0x44>
    88b8:	c2 83       	std	Z+2, r28	; 0x02
    88ba:	d3 83       	std	Z+3, r29	; 0x03
    88bc:	40 81       	ld	r20, Z
    88be:	51 81       	ldd	r21, Z+1	; 0x01
    88c0:	84 0f       	add	r24, r20
    88c2:	95 1f       	adc	r25, r21
    88c4:	c8 17       	cp	r28, r24
    88c6:	d9 07       	cpc	r29, r25
    88c8:	59 f4       	brne	.+22     	; 0x88e0 <free+0x82>
    88ca:	88 81       	ld	r24, Y
    88cc:	99 81       	ldd	r25, Y+1	; 0x01
    88ce:	84 0f       	add	r24, r20
    88d0:	95 1f       	adc	r25, r21
    88d2:	02 96       	adiw	r24, 0x02	; 2
    88d4:	80 83       	st	Z, r24
    88d6:	91 83       	std	Z+1, r25	; 0x01
    88d8:	8a 81       	ldd	r24, Y+2	; 0x02
    88da:	9b 81       	ldd	r25, Y+3	; 0x03
    88dc:	82 83       	std	Z+2, r24	; 0x02
    88de:	93 83       	std	Z+3, r25	; 0x03
    88e0:	21 15       	cp	r18, r1
    88e2:	31 05       	cpc	r19, r1
    88e4:	29 f4       	brne	.+10     	; 0x88f0 <free+0x92>
    88e6:	e0 93 ac 27 	sts	0x27AC, r30	; 0x8027ac <__flp>
    88ea:	f0 93 ad 27 	sts	0x27AD, r31	; 0x8027ad <__flp+0x1>
    88ee:	3d c0       	rjmp	.+122    	; 0x896a <free+0x10c>
    88f0:	e9 01       	movw	r28, r18
    88f2:	ea 83       	std	Y+2, r30	; 0x02
    88f4:	fb 83       	std	Y+3, r31	; 0x03
    88f6:	49 91       	ld	r20, Y+
    88f8:	59 91       	ld	r21, Y+
    88fa:	c4 0f       	add	r28, r20
    88fc:	d5 1f       	adc	r29, r21
    88fe:	ec 17       	cp	r30, r28
    8900:	fd 07       	cpc	r31, r29
    8902:	61 f4       	brne	.+24     	; 0x891c <free+0xbe>
    8904:	80 81       	ld	r24, Z
    8906:	91 81       	ldd	r25, Z+1	; 0x01
    8908:	84 0f       	add	r24, r20
    890a:	95 1f       	adc	r25, r21
    890c:	02 96       	adiw	r24, 0x02	; 2
    890e:	e9 01       	movw	r28, r18
    8910:	88 83       	st	Y, r24
    8912:	99 83       	std	Y+1, r25	; 0x01
    8914:	82 81       	ldd	r24, Z+2	; 0x02
    8916:	93 81       	ldd	r25, Z+3	; 0x03
    8918:	8a 83       	std	Y+2, r24	; 0x02
    891a:	9b 83       	std	Y+3, r25	; 0x03
    891c:	e0 e0       	ldi	r30, 0x00	; 0
    891e:	f0 e0       	ldi	r31, 0x00	; 0
    8920:	12 96       	adiw	r26, 0x02	; 2
    8922:	8d 91       	ld	r24, X+
    8924:	9c 91       	ld	r25, X
    8926:	13 97       	sbiw	r26, 0x03	; 3
    8928:	00 97       	sbiw	r24, 0x00	; 0
    892a:	19 f0       	breq	.+6      	; 0x8932 <free+0xd4>
    892c:	fd 01       	movw	r30, r26
    892e:	dc 01       	movw	r26, r24
    8930:	f7 cf       	rjmp	.-18     	; 0x8920 <free+0xc2>
    8932:	8d 91       	ld	r24, X+
    8934:	9c 91       	ld	r25, X
    8936:	11 97       	sbiw	r26, 0x01	; 1
    8938:	9d 01       	movw	r18, r26
    893a:	2e 5f       	subi	r18, 0xFE	; 254
    893c:	3f 4f       	sbci	r19, 0xFF	; 255
    893e:	82 0f       	add	r24, r18
    8940:	93 1f       	adc	r25, r19
    8942:	20 91 aa 27 	lds	r18, 0x27AA	; 0x8027aa <__brkval>
    8946:	30 91 ab 27 	lds	r19, 0x27AB	; 0x8027ab <__brkval+0x1>
    894a:	28 17       	cp	r18, r24
    894c:	39 07       	cpc	r19, r25
    894e:	69 f4       	brne	.+26     	; 0x896a <free+0x10c>
    8950:	30 97       	sbiw	r30, 0x00	; 0
    8952:	29 f4       	brne	.+10     	; 0x895e <free+0x100>
    8954:	10 92 ac 27 	sts	0x27AC, r1	; 0x8027ac <__flp>
    8958:	10 92 ad 27 	sts	0x27AD, r1	; 0x8027ad <__flp+0x1>
    895c:	02 c0       	rjmp	.+4      	; 0x8962 <free+0x104>
    895e:	12 82       	std	Z+2, r1	; 0x02
    8960:	13 82       	std	Z+3, r1	; 0x03
    8962:	a0 93 aa 27 	sts	0x27AA, r26	; 0x8027aa <__brkval>
    8966:	b0 93 ab 27 	sts	0x27AB, r27	; 0x8027ab <__brkval+0x1>
    896a:	df 91       	pop	r29
    896c:	cf 91       	pop	r28
    896e:	08 95       	ret

00008970 <__ftoa_engine>:
    8970:	28 30       	cpi	r18, 0x08	; 8
    8972:	08 f0       	brcs	.+2      	; 0x8976 <__ftoa_engine+0x6>
    8974:	27 e0       	ldi	r18, 0x07	; 7
    8976:	33 27       	eor	r19, r19
    8978:	da 01       	movw	r26, r20
    897a:	99 0f       	add	r25, r25
    897c:	31 1d       	adc	r19, r1
    897e:	87 fd       	sbrc	r24, 7
    8980:	91 60       	ori	r25, 0x01	; 1
    8982:	00 96       	adiw	r24, 0x00	; 0
    8984:	61 05       	cpc	r22, r1
    8986:	71 05       	cpc	r23, r1
    8988:	39 f4       	brne	.+14     	; 0x8998 <__ftoa_engine+0x28>
    898a:	32 60       	ori	r19, 0x02	; 2
    898c:	2e 5f       	subi	r18, 0xFE	; 254
    898e:	3d 93       	st	X+, r19
    8990:	30 e3       	ldi	r19, 0x30	; 48
    8992:	2a 95       	dec	r18
    8994:	e1 f7       	brne	.-8      	; 0x898e <__ftoa_engine+0x1e>
    8996:	08 95       	ret
    8998:	9f 3f       	cpi	r25, 0xFF	; 255
    899a:	30 f0       	brcs	.+12     	; 0x89a8 <__ftoa_engine+0x38>
    899c:	80 38       	cpi	r24, 0x80	; 128
    899e:	71 05       	cpc	r23, r1
    89a0:	61 05       	cpc	r22, r1
    89a2:	09 f0       	breq	.+2      	; 0x89a6 <__ftoa_engine+0x36>
    89a4:	3c 5f       	subi	r19, 0xFC	; 252
    89a6:	3c 5f       	subi	r19, 0xFC	; 252
    89a8:	3d 93       	st	X+, r19
    89aa:	91 30       	cpi	r25, 0x01	; 1
    89ac:	08 f0       	brcs	.+2      	; 0x89b0 <__ftoa_engine+0x40>
    89ae:	80 68       	ori	r24, 0x80	; 128
    89b0:	91 1d       	adc	r25, r1
    89b2:	df 93       	push	r29
    89b4:	cf 93       	push	r28
    89b6:	1f 93       	push	r17
    89b8:	0f 93       	push	r16
    89ba:	ff 92       	push	r15
    89bc:	ef 92       	push	r14
    89be:	19 2f       	mov	r17, r25
    89c0:	98 7f       	andi	r25, 0xF8	; 248
    89c2:	96 95       	lsr	r25
    89c4:	e9 2f       	mov	r30, r25
    89c6:	96 95       	lsr	r25
    89c8:	96 95       	lsr	r25
    89ca:	e9 0f       	add	r30, r25
    89cc:	ff 27       	eor	r31, r31
    89ce:	e2 5a       	subi	r30, 0xA2	; 162
    89d0:	fd 4f       	sbci	r31, 0xFD	; 253
    89d2:	99 27       	eor	r25, r25
    89d4:	33 27       	eor	r19, r19
    89d6:	ee 24       	eor	r14, r14
    89d8:	ff 24       	eor	r15, r15
    89da:	a7 01       	movw	r20, r14
    89dc:	e7 01       	movw	r28, r14
    89de:	05 90       	lpm	r0, Z+
    89e0:	08 94       	sec
    89e2:	07 94       	ror	r0
    89e4:	28 f4       	brcc	.+10     	; 0x89f0 <__ftoa_engine+0x80>
    89e6:	36 0f       	add	r19, r22
    89e8:	e7 1e       	adc	r14, r23
    89ea:	f8 1e       	adc	r15, r24
    89ec:	49 1f       	adc	r20, r25
    89ee:	51 1d       	adc	r21, r1
    89f0:	66 0f       	add	r22, r22
    89f2:	77 1f       	adc	r23, r23
    89f4:	88 1f       	adc	r24, r24
    89f6:	99 1f       	adc	r25, r25
    89f8:	06 94       	lsr	r0
    89fa:	a1 f7       	brne	.-24     	; 0x89e4 <__ftoa_engine+0x74>
    89fc:	05 90       	lpm	r0, Z+
    89fe:	07 94       	ror	r0
    8a00:	28 f4       	brcc	.+10     	; 0x8a0c <__ftoa_engine+0x9c>
    8a02:	e7 0e       	add	r14, r23
    8a04:	f8 1e       	adc	r15, r24
    8a06:	49 1f       	adc	r20, r25
    8a08:	56 1f       	adc	r21, r22
    8a0a:	c1 1d       	adc	r28, r1
    8a0c:	77 0f       	add	r23, r23
    8a0e:	88 1f       	adc	r24, r24
    8a10:	99 1f       	adc	r25, r25
    8a12:	66 1f       	adc	r22, r22
    8a14:	06 94       	lsr	r0
    8a16:	a1 f7       	brne	.-24     	; 0x8a00 <__ftoa_engine+0x90>
    8a18:	05 90       	lpm	r0, Z+
    8a1a:	07 94       	ror	r0
    8a1c:	28 f4       	brcc	.+10     	; 0x8a28 <__ftoa_engine+0xb8>
    8a1e:	f8 0e       	add	r15, r24
    8a20:	49 1f       	adc	r20, r25
    8a22:	56 1f       	adc	r21, r22
    8a24:	c7 1f       	adc	r28, r23
    8a26:	d1 1d       	adc	r29, r1
    8a28:	88 0f       	add	r24, r24
    8a2a:	99 1f       	adc	r25, r25
    8a2c:	66 1f       	adc	r22, r22
    8a2e:	77 1f       	adc	r23, r23
    8a30:	06 94       	lsr	r0
    8a32:	a1 f7       	brne	.-24     	; 0x8a1c <__ftoa_engine+0xac>
    8a34:	05 90       	lpm	r0, Z+
    8a36:	07 94       	ror	r0
    8a38:	20 f4       	brcc	.+8      	; 0x8a42 <__ftoa_engine+0xd2>
    8a3a:	49 0f       	add	r20, r25
    8a3c:	56 1f       	adc	r21, r22
    8a3e:	c7 1f       	adc	r28, r23
    8a40:	d8 1f       	adc	r29, r24
    8a42:	99 0f       	add	r25, r25
    8a44:	66 1f       	adc	r22, r22
    8a46:	77 1f       	adc	r23, r23
    8a48:	88 1f       	adc	r24, r24
    8a4a:	06 94       	lsr	r0
    8a4c:	a9 f7       	brne	.-22     	; 0x8a38 <__ftoa_engine+0xc8>
    8a4e:	84 91       	lpm	r24, Z
    8a50:	10 95       	com	r17
    8a52:	17 70       	andi	r17, 0x07	; 7
    8a54:	41 f0       	breq	.+16     	; 0x8a66 <__ftoa_engine+0xf6>
    8a56:	d6 95       	lsr	r29
    8a58:	c7 95       	ror	r28
    8a5a:	57 95       	ror	r21
    8a5c:	47 95       	ror	r20
    8a5e:	f7 94       	ror	r15
    8a60:	e7 94       	ror	r14
    8a62:	1a 95       	dec	r17
    8a64:	c1 f7       	brne	.-16     	; 0x8a56 <__ftoa_engine+0xe6>
    8a66:	e4 e0       	ldi	r30, 0x04	; 4
    8a68:	f2 e0       	ldi	r31, 0x02	; 2
    8a6a:	68 94       	set
    8a6c:	15 90       	lpm	r1, Z+
    8a6e:	15 91       	lpm	r17, Z+
    8a70:	35 91       	lpm	r19, Z+
    8a72:	65 91       	lpm	r22, Z+
    8a74:	95 91       	lpm	r25, Z+
    8a76:	05 90       	lpm	r0, Z+
    8a78:	7f e2       	ldi	r23, 0x2F	; 47
    8a7a:	73 95       	inc	r23
    8a7c:	e1 18       	sub	r14, r1
    8a7e:	f1 0a       	sbc	r15, r17
    8a80:	43 0b       	sbc	r20, r19
    8a82:	56 0b       	sbc	r21, r22
    8a84:	c9 0b       	sbc	r28, r25
    8a86:	d0 09       	sbc	r29, r0
    8a88:	c0 f7       	brcc	.-16     	; 0x8a7a <__ftoa_engine+0x10a>
    8a8a:	e1 0c       	add	r14, r1
    8a8c:	f1 1e       	adc	r15, r17
    8a8e:	43 1f       	adc	r20, r19
    8a90:	56 1f       	adc	r21, r22
    8a92:	c9 1f       	adc	r28, r25
    8a94:	d0 1d       	adc	r29, r0
    8a96:	7e f4       	brtc	.+30     	; 0x8ab6 <__ftoa_engine+0x146>
    8a98:	70 33       	cpi	r23, 0x30	; 48
    8a9a:	11 f4       	brne	.+4      	; 0x8aa0 <__ftoa_engine+0x130>
    8a9c:	8a 95       	dec	r24
    8a9e:	e6 cf       	rjmp	.-52     	; 0x8a6c <__ftoa_engine+0xfc>
    8aa0:	e8 94       	clt
    8aa2:	01 50       	subi	r16, 0x01	; 1
    8aa4:	30 f0       	brcs	.+12     	; 0x8ab2 <__ftoa_engine+0x142>
    8aa6:	08 0f       	add	r16, r24
    8aa8:	0a f4       	brpl	.+2      	; 0x8aac <__ftoa_engine+0x13c>
    8aaa:	00 27       	eor	r16, r16
    8aac:	02 17       	cp	r16, r18
    8aae:	08 f4       	brcc	.+2      	; 0x8ab2 <__ftoa_engine+0x142>
    8ab0:	20 2f       	mov	r18, r16
    8ab2:	23 95       	inc	r18
    8ab4:	02 2f       	mov	r16, r18
    8ab6:	7a 33       	cpi	r23, 0x3A	; 58
    8ab8:	28 f0       	brcs	.+10     	; 0x8ac4 <__ftoa_engine+0x154>
    8aba:	79 e3       	ldi	r23, 0x39	; 57
    8abc:	7d 93       	st	X+, r23
    8abe:	2a 95       	dec	r18
    8ac0:	e9 f7       	brne	.-6      	; 0x8abc <__ftoa_engine+0x14c>
    8ac2:	10 c0       	rjmp	.+32     	; 0x8ae4 <__ftoa_engine+0x174>
    8ac4:	7d 93       	st	X+, r23
    8ac6:	2a 95       	dec	r18
    8ac8:	89 f6       	brne	.-94     	; 0x8a6c <__ftoa_engine+0xfc>
    8aca:	06 94       	lsr	r0
    8acc:	97 95       	ror	r25
    8ace:	67 95       	ror	r22
    8ad0:	37 95       	ror	r19
    8ad2:	17 95       	ror	r17
    8ad4:	17 94       	ror	r1
    8ad6:	e1 18       	sub	r14, r1
    8ad8:	f1 0a       	sbc	r15, r17
    8ada:	43 0b       	sbc	r20, r19
    8adc:	56 0b       	sbc	r21, r22
    8ade:	c9 0b       	sbc	r28, r25
    8ae0:	d0 09       	sbc	r29, r0
    8ae2:	98 f0       	brcs	.+38     	; 0x8b0a <__ftoa_engine+0x19a>
    8ae4:	23 95       	inc	r18
    8ae6:	7e 91       	ld	r23, -X
    8ae8:	73 95       	inc	r23
    8aea:	7a 33       	cpi	r23, 0x3A	; 58
    8aec:	08 f0       	brcs	.+2      	; 0x8af0 <__ftoa_engine+0x180>
    8aee:	70 e3       	ldi	r23, 0x30	; 48
    8af0:	7c 93       	st	X, r23
    8af2:	20 13       	cpse	r18, r16
    8af4:	b8 f7       	brcc	.-18     	; 0x8ae4 <__ftoa_engine+0x174>
    8af6:	7e 91       	ld	r23, -X
    8af8:	70 61       	ori	r23, 0x10	; 16
    8afa:	7d 93       	st	X+, r23
    8afc:	30 f0       	brcs	.+12     	; 0x8b0a <__ftoa_engine+0x19a>
    8afe:	83 95       	inc	r24
    8b00:	71 e3       	ldi	r23, 0x31	; 49
    8b02:	7d 93       	st	X+, r23
    8b04:	70 e3       	ldi	r23, 0x30	; 48
    8b06:	2a 95       	dec	r18
    8b08:	e1 f7       	brne	.-8      	; 0x8b02 <__ftoa_engine+0x192>
    8b0a:	11 24       	eor	r1, r1
    8b0c:	ef 90       	pop	r14
    8b0e:	ff 90       	pop	r15
    8b10:	0f 91       	pop	r16
    8b12:	1f 91       	pop	r17
    8b14:	cf 91       	pop	r28
    8b16:	df 91       	pop	r29
    8b18:	99 27       	eor	r25, r25
    8b1a:	87 fd       	sbrc	r24, 7
    8b1c:	90 95       	com	r25
    8b1e:	08 95       	ret

00008b20 <strnlen_P>:
    8b20:	fc 01       	movw	r30, r24
    8b22:	05 90       	lpm	r0, Z+
    8b24:	61 50       	subi	r22, 0x01	; 1
    8b26:	70 40       	sbci	r23, 0x00	; 0
    8b28:	01 10       	cpse	r0, r1
    8b2a:	d8 f7       	brcc	.-10     	; 0x8b22 <strnlen_P+0x2>
    8b2c:	80 95       	com	r24
    8b2e:	90 95       	com	r25
    8b30:	8e 0f       	add	r24, r30
    8b32:	9f 1f       	adc	r25, r31
    8b34:	08 95       	ret

00008b36 <memcpy>:
    8b36:	fb 01       	movw	r30, r22
    8b38:	dc 01       	movw	r26, r24
    8b3a:	02 c0       	rjmp	.+4      	; 0x8b40 <memcpy+0xa>
    8b3c:	01 90       	ld	r0, Z+
    8b3e:	0d 92       	st	X+, r0
    8b40:	41 50       	subi	r20, 0x01	; 1
    8b42:	50 40       	sbci	r21, 0x00	; 0
    8b44:	d8 f7       	brcc	.-10     	; 0x8b3c <memcpy+0x6>
    8b46:	08 95       	ret

00008b48 <strlen>:
    8b48:	fc 01       	movw	r30, r24
    8b4a:	01 90       	ld	r0, Z+
    8b4c:	00 20       	and	r0, r0
    8b4e:	e9 f7       	brne	.-6      	; 0x8b4a <strlen+0x2>
    8b50:	80 95       	com	r24
    8b52:	90 95       	com	r25
    8b54:	8e 0f       	add	r24, r30
    8b56:	9f 1f       	adc	r25, r31
    8b58:	08 95       	ret

00008b5a <strnlen>:
    8b5a:	fc 01       	movw	r30, r24
    8b5c:	61 50       	subi	r22, 0x01	; 1
    8b5e:	70 40       	sbci	r23, 0x00	; 0
    8b60:	01 90       	ld	r0, Z+
    8b62:	01 10       	cpse	r0, r1
    8b64:	d8 f7       	brcc	.-10     	; 0x8b5c <strnlen+0x2>
    8b66:	80 95       	com	r24
    8b68:	90 95       	com	r25
    8b6a:	8e 0f       	add	r24, r30
    8b6c:	9f 1f       	adc	r25, r31
    8b6e:	08 95       	ret

00008b70 <fdevopen>:
    8b70:	0f 93       	push	r16
    8b72:	1f 93       	push	r17
    8b74:	cf 93       	push	r28
    8b76:	df 93       	push	r29
    8b78:	00 97       	sbiw	r24, 0x00	; 0
    8b7a:	31 f4       	brne	.+12     	; 0x8b88 <fdevopen+0x18>
    8b7c:	61 15       	cp	r22, r1
    8b7e:	71 05       	cpc	r23, r1
    8b80:	19 f4       	brne	.+6      	; 0x8b88 <fdevopen+0x18>
    8b82:	80 e0       	ldi	r24, 0x00	; 0
    8b84:	90 e0       	ldi	r25, 0x00	; 0
    8b86:	39 c0       	rjmp	.+114    	; 0x8bfa <fdevopen+0x8a>
    8b88:	8b 01       	movw	r16, r22
    8b8a:	ec 01       	movw	r28, r24
    8b8c:	6e e0       	ldi	r22, 0x0E	; 14
    8b8e:	70 e0       	ldi	r23, 0x00	; 0
    8b90:	81 e0       	ldi	r24, 0x01	; 1
    8b92:	90 e0       	ldi	r25, 0x00	; 0
    8b94:	3c d1       	rcall	.+632    	; 0x8e0e <calloc>
    8b96:	fc 01       	movw	r30, r24
    8b98:	89 2b       	or	r24, r25
    8b9a:	99 f3       	breq	.-26     	; 0x8b82 <fdevopen+0x12>
    8b9c:	80 e8       	ldi	r24, 0x80	; 128
    8b9e:	83 83       	std	Z+3, r24	; 0x03
    8ba0:	01 15       	cp	r16, r1
    8ba2:	11 05       	cpc	r17, r1
    8ba4:	71 f0       	breq	.+28     	; 0x8bc2 <fdevopen+0x52>
    8ba6:	02 87       	std	Z+10, r16	; 0x0a
    8ba8:	13 87       	std	Z+11, r17	; 0x0b
    8baa:	81 e8       	ldi	r24, 0x81	; 129
    8bac:	83 83       	std	Z+3, r24	; 0x03
    8bae:	80 91 ae 27 	lds	r24, 0x27AE	; 0x8027ae <__iob>
    8bb2:	90 91 af 27 	lds	r25, 0x27AF	; 0x8027af <__iob+0x1>
    8bb6:	89 2b       	or	r24, r25
    8bb8:	21 f4       	brne	.+8      	; 0x8bc2 <fdevopen+0x52>
    8bba:	e0 93 ae 27 	sts	0x27AE, r30	; 0x8027ae <__iob>
    8bbe:	f0 93 af 27 	sts	0x27AF, r31	; 0x8027af <__iob+0x1>
    8bc2:	20 97       	sbiw	r28, 0x00	; 0
    8bc4:	c9 f0       	breq	.+50     	; 0x8bf8 <fdevopen+0x88>
    8bc6:	c0 87       	std	Z+8, r28	; 0x08
    8bc8:	d1 87       	std	Z+9, r29	; 0x09
    8bca:	83 81       	ldd	r24, Z+3	; 0x03
    8bcc:	82 60       	ori	r24, 0x02	; 2
    8bce:	83 83       	std	Z+3, r24	; 0x03
    8bd0:	80 91 b0 27 	lds	r24, 0x27B0	; 0x8027b0 <__iob+0x2>
    8bd4:	90 91 b1 27 	lds	r25, 0x27B1	; 0x8027b1 <__iob+0x3>
    8bd8:	89 2b       	or	r24, r25
    8bda:	71 f4       	brne	.+28     	; 0x8bf8 <fdevopen+0x88>
    8bdc:	e0 93 b0 27 	sts	0x27B0, r30	; 0x8027b0 <__iob+0x2>
    8be0:	f0 93 b1 27 	sts	0x27B1, r31	; 0x8027b1 <__iob+0x3>
    8be4:	80 91 b2 27 	lds	r24, 0x27B2	; 0x8027b2 <__iob+0x4>
    8be8:	90 91 b3 27 	lds	r25, 0x27B3	; 0x8027b3 <__iob+0x5>
    8bec:	89 2b       	or	r24, r25
    8bee:	21 f4       	brne	.+8      	; 0x8bf8 <fdevopen+0x88>
    8bf0:	e0 93 b2 27 	sts	0x27B2, r30	; 0x8027b2 <__iob+0x4>
    8bf4:	f0 93 b3 27 	sts	0x27B3, r31	; 0x8027b3 <__iob+0x5>
    8bf8:	cf 01       	movw	r24, r30
    8bfa:	df 91       	pop	r29
    8bfc:	cf 91       	pop	r28
    8bfe:	1f 91       	pop	r17
    8c00:	0f 91       	pop	r16
    8c02:	08 95       	ret

00008c04 <fputc>:
    8c04:	0f 93       	push	r16
    8c06:	1f 93       	push	r17
    8c08:	cf 93       	push	r28
    8c0a:	df 93       	push	r29
    8c0c:	fb 01       	movw	r30, r22
    8c0e:	23 81       	ldd	r18, Z+3	; 0x03
    8c10:	21 fd       	sbrc	r18, 1
    8c12:	03 c0       	rjmp	.+6      	; 0x8c1a <fputc+0x16>
    8c14:	8f ef       	ldi	r24, 0xFF	; 255
    8c16:	9f ef       	ldi	r25, 0xFF	; 255
    8c18:	2c c0       	rjmp	.+88     	; 0x8c72 <fputc+0x6e>
    8c1a:	22 ff       	sbrs	r18, 2
    8c1c:	16 c0       	rjmp	.+44     	; 0x8c4a <fputc+0x46>
    8c1e:	46 81       	ldd	r20, Z+6	; 0x06
    8c20:	57 81       	ldd	r21, Z+7	; 0x07
    8c22:	24 81       	ldd	r18, Z+4	; 0x04
    8c24:	35 81       	ldd	r19, Z+5	; 0x05
    8c26:	42 17       	cp	r20, r18
    8c28:	53 07       	cpc	r21, r19
    8c2a:	44 f4       	brge	.+16     	; 0x8c3c <fputc+0x38>
    8c2c:	a0 81       	ld	r26, Z
    8c2e:	b1 81       	ldd	r27, Z+1	; 0x01
    8c30:	9d 01       	movw	r18, r26
    8c32:	2f 5f       	subi	r18, 0xFF	; 255
    8c34:	3f 4f       	sbci	r19, 0xFF	; 255
    8c36:	20 83       	st	Z, r18
    8c38:	31 83       	std	Z+1, r19	; 0x01
    8c3a:	8c 93       	st	X, r24
    8c3c:	26 81       	ldd	r18, Z+6	; 0x06
    8c3e:	37 81       	ldd	r19, Z+7	; 0x07
    8c40:	2f 5f       	subi	r18, 0xFF	; 255
    8c42:	3f 4f       	sbci	r19, 0xFF	; 255
    8c44:	26 83       	std	Z+6, r18	; 0x06
    8c46:	37 83       	std	Z+7, r19	; 0x07
    8c48:	14 c0       	rjmp	.+40     	; 0x8c72 <fputc+0x6e>
    8c4a:	8b 01       	movw	r16, r22
    8c4c:	ec 01       	movw	r28, r24
    8c4e:	fb 01       	movw	r30, r22
    8c50:	00 84       	ldd	r0, Z+8	; 0x08
    8c52:	f1 85       	ldd	r31, Z+9	; 0x09
    8c54:	e0 2d       	mov	r30, r0
    8c56:	19 95       	eicall
    8c58:	89 2b       	or	r24, r25
    8c5a:	e1 f6       	brne	.-72     	; 0x8c14 <fputc+0x10>
    8c5c:	d8 01       	movw	r26, r16
    8c5e:	16 96       	adiw	r26, 0x06	; 6
    8c60:	8d 91       	ld	r24, X+
    8c62:	9c 91       	ld	r25, X
    8c64:	17 97       	sbiw	r26, 0x07	; 7
    8c66:	01 96       	adiw	r24, 0x01	; 1
    8c68:	16 96       	adiw	r26, 0x06	; 6
    8c6a:	8d 93       	st	X+, r24
    8c6c:	9c 93       	st	X, r25
    8c6e:	17 97       	sbiw	r26, 0x07	; 7
    8c70:	ce 01       	movw	r24, r28
    8c72:	df 91       	pop	r29
    8c74:	cf 91       	pop	r28
    8c76:	1f 91       	pop	r17
    8c78:	0f 91       	pop	r16
    8c7a:	08 95       	ret

00008c7c <printf>:
    8c7c:	cf 93       	push	r28
    8c7e:	df 93       	push	r29
    8c80:	cd b7       	in	r28, 0x3d	; 61
    8c82:	de b7       	in	r29, 0x3e	; 62
    8c84:	ae 01       	movw	r20, r28
    8c86:	4a 5f       	subi	r20, 0xFA	; 250
    8c88:	5f 4f       	sbci	r21, 0xFF	; 255
    8c8a:	fa 01       	movw	r30, r20
    8c8c:	61 91       	ld	r22, Z+
    8c8e:	71 91       	ld	r23, Z+
    8c90:	af 01       	movw	r20, r30
    8c92:	80 91 b0 27 	lds	r24, 0x27B0	; 0x8027b0 <__iob+0x2>
    8c96:	90 91 b1 27 	lds	r25, 0x27B1	; 0x8027b1 <__iob+0x3>
    8c9a:	07 d9       	rcall	.-3570   	; 0x7eaa <vfprintf>
    8c9c:	df 91       	pop	r29
    8c9e:	cf 91       	pop	r28
    8ca0:	08 95       	ret

00008ca2 <puts>:
    8ca2:	0f 93       	push	r16
    8ca4:	1f 93       	push	r17
    8ca6:	cf 93       	push	r28
    8ca8:	df 93       	push	r29
    8caa:	e0 91 b0 27 	lds	r30, 0x27B0	; 0x8027b0 <__iob+0x2>
    8cae:	f0 91 b1 27 	lds	r31, 0x27B1	; 0x8027b1 <__iob+0x3>
    8cb2:	23 81       	ldd	r18, Z+3	; 0x03
    8cb4:	21 ff       	sbrs	r18, 1
    8cb6:	1b c0       	rjmp	.+54     	; 0x8cee <puts+0x4c>
    8cb8:	8c 01       	movw	r16, r24
    8cba:	d0 e0       	ldi	r29, 0x00	; 0
    8cbc:	c0 e0       	ldi	r28, 0x00	; 0
    8cbe:	f8 01       	movw	r30, r16
    8cc0:	81 91       	ld	r24, Z+
    8cc2:	8f 01       	movw	r16, r30
    8cc4:	60 91 b0 27 	lds	r22, 0x27B0	; 0x8027b0 <__iob+0x2>
    8cc8:	70 91 b1 27 	lds	r23, 0x27B1	; 0x8027b1 <__iob+0x3>
    8ccc:	db 01       	movw	r26, r22
    8cce:	18 96       	adiw	r26, 0x08	; 8
    8cd0:	ed 91       	ld	r30, X+
    8cd2:	fc 91       	ld	r31, X
    8cd4:	19 97       	sbiw	r26, 0x09	; 9
    8cd6:	88 23       	and	r24, r24
    8cd8:	31 f0       	breq	.+12     	; 0x8ce6 <puts+0x44>
    8cda:	19 95       	eicall
    8cdc:	89 2b       	or	r24, r25
    8cde:	79 f3       	breq	.-34     	; 0x8cbe <puts+0x1c>
    8ce0:	df ef       	ldi	r29, 0xFF	; 255
    8ce2:	cf ef       	ldi	r28, 0xFF	; 255
    8ce4:	ec cf       	rjmp	.-40     	; 0x8cbe <puts+0x1c>
    8ce6:	8a e0       	ldi	r24, 0x0A	; 10
    8ce8:	19 95       	eicall
    8cea:	89 2b       	or	r24, r25
    8cec:	19 f0       	breq	.+6      	; 0x8cf4 <puts+0x52>
    8cee:	8f ef       	ldi	r24, 0xFF	; 255
    8cf0:	9f ef       	ldi	r25, 0xFF	; 255
    8cf2:	02 c0       	rjmp	.+4      	; 0x8cf8 <puts+0x56>
    8cf4:	8d 2f       	mov	r24, r29
    8cf6:	9c 2f       	mov	r25, r28
    8cf8:	df 91       	pop	r29
    8cfa:	cf 91       	pop	r28
    8cfc:	1f 91       	pop	r17
    8cfe:	0f 91       	pop	r16
    8d00:	08 95       	ret

00008d02 <sprintf>:
    8d02:	0f 93       	push	r16
    8d04:	1f 93       	push	r17
    8d06:	cf 93       	push	r28
    8d08:	df 93       	push	r29
    8d0a:	cd b7       	in	r28, 0x3d	; 61
    8d0c:	de b7       	in	r29, 0x3e	; 62
    8d0e:	2e 97       	sbiw	r28, 0x0e	; 14
    8d10:	cd bf       	out	0x3d, r28	; 61
    8d12:	de bf       	out	0x3e, r29	; 62
    8d14:	0e 89       	ldd	r16, Y+22	; 0x16
    8d16:	1f 89       	ldd	r17, Y+23	; 0x17
    8d18:	86 e0       	ldi	r24, 0x06	; 6
    8d1a:	8c 83       	std	Y+4, r24	; 0x04
    8d1c:	09 83       	std	Y+1, r16	; 0x01
    8d1e:	1a 83       	std	Y+2, r17	; 0x02
    8d20:	8f ef       	ldi	r24, 0xFF	; 255
    8d22:	9f e7       	ldi	r25, 0x7F	; 127
    8d24:	8d 83       	std	Y+5, r24	; 0x05
    8d26:	9e 83       	std	Y+6, r25	; 0x06
    8d28:	ae 01       	movw	r20, r28
    8d2a:	46 5e       	subi	r20, 0xE6	; 230
    8d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d2e:	68 8d       	ldd	r22, Y+24	; 0x18
    8d30:	79 8d       	ldd	r23, Y+25	; 0x19
    8d32:	ce 01       	movw	r24, r28
    8d34:	01 96       	adiw	r24, 0x01	; 1
    8d36:	b9 d8       	rcall	.-3726   	; 0x7eaa <vfprintf>
    8d38:	ef 81       	ldd	r30, Y+7	; 0x07
    8d3a:	f8 85       	ldd	r31, Y+8	; 0x08
    8d3c:	e0 0f       	add	r30, r16
    8d3e:	f1 1f       	adc	r31, r17
    8d40:	10 82       	st	Z, r1
    8d42:	2e 96       	adiw	r28, 0x0e	; 14
    8d44:	cd bf       	out	0x3d, r28	; 61
    8d46:	de bf       	out	0x3e, r29	; 62
    8d48:	df 91       	pop	r29
    8d4a:	cf 91       	pop	r28
    8d4c:	1f 91       	pop	r17
    8d4e:	0f 91       	pop	r16
    8d50:	08 95       	ret

00008d52 <__ultoa_invert>:
    8d52:	fa 01       	movw	r30, r20
    8d54:	aa 27       	eor	r26, r26
    8d56:	28 30       	cpi	r18, 0x08	; 8
    8d58:	51 f1       	breq	.+84     	; 0x8dae <__ultoa_invert+0x5c>
    8d5a:	20 31       	cpi	r18, 0x10	; 16
    8d5c:	81 f1       	breq	.+96     	; 0x8dbe <__ultoa_invert+0x6c>
    8d5e:	e8 94       	clt
    8d60:	6f 93       	push	r22
    8d62:	6e 7f       	andi	r22, 0xFE	; 254
    8d64:	6e 5f       	subi	r22, 0xFE	; 254
    8d66:	7f 4f       	sbci	r23, 0xFF	; 255
    8d68:	8f 4f       	sbci	r24, 0xFF	; 255
    8d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8d6c:	af 4f       	sbci	r26, 0xFF	; 255
    8d6e:	b1 e0       	ldi	r27, 0x01	; 1
    8d70:	3e d0       	rcall	.+124    	; 0x8dee <__ultoa_invert+0x9c>
    8d72:	b4 e0       	ldi	r27, 0x04	; 4
    8d74:	3c d0       	rcall	.+120    	; 0x8dee <__ultoa_invert+0x9c>
    8d76:	67 0f       	add	r22, r23
    8d78:	78 1f       	adc	r23, r24
    8d7a:	89 1f       	adc	r24, r25
    8d7c:	9a 1f       	adc	r25, r26
    8d7e:	a1 1d       	adc	r26, r1
    8d80:	68 0f       	add	r22, r24
    8d82:	79 1f       	adc	r23, r25
    8d84:	8a 1f       	adc	r24, r26
    8d86:	91 1d       	adc	r25, r1
    8d88:	a1 1d       	adc	r26, r1
    8d8a:	6a 0f       	add	r22, r26
    8d8c:	71 1d       	adc	r23, r1
    8d8e:	81 1d       	adc	r24, r1
    8d90:	91 1d       	adc	r25, r1
    8d92:	a1 1d       	adc	r26, r1
    8d94:	20 d0       	rcall	.+64     	; 0x8dd6 <__ultoa_invert+0x84>
    8d96:	09 f4       	brne	.+2      	; 0x8d9a <__ultoa_invert+0x48>
    8d98:	68 94       	set
    8d9a:	3f 91       	pop	r19
    8d9c:	2a e0       	ldi	r18, 0x0A	; 10
    8d9e:	26 9f       	mul	r18, r22
    8da0:	11 24       	eor	r1, r1
    8da2:	30 19       	sub	r19, r0
    8da4:	30 5d       	subi	r19, 0xD0	; 208
    8da6:	31 93       	st	Z+, r19
    8da8:	de f6       	brtc	.-74     	; 0x8d60 <__ultoa_invert+0xe>
    8daa:	cf 01       	movw	r24, r30
    8dac:	08 95       	ret
    8dae:	46 2f       	mov	r20, r22
    8db0:	47 70       	andi	r20, 0x07	; 7
    8db2:	40 5d       	subi	r20, 0xD0	; 208
    8db4:	41 93       	st	Z+, r20
    8db6:	b3 e0       	ldi	r27, 0x03	; 3
    8db8:	0f d0       	rcall	.+30     	; 0x8dd8 <__ultoa_invert+0x86>
    8dba:	c9 f7       	brne	.-14     	; 0x8dae <__ultoa_invert+0x5c>
    8dbc:	f6 cf       	rjmp	.-20     	; 0x8daa <__ultoa_invert+0x58>
    8dbe:	46 2f       	mov	r20, r22
    8dc0:	4f 70       	andi	r20, 0x0F	; 15
    8dc2:	40 5d       	subi	r20, 0xD0	; 208
    8dc4:	4a 33       	cpi	r20, 0x3A	; 58
    8dc6:	18 f0       	brcs	.+6      	; 0x8dce <__ultoa_invert+0x7c>
    8dc8:	49 5d       	subi	r20, 0xD9	; 217
    8dca:	31 fd       	sbrc	r19, 1
    8dcc:	40 52       	subi	r20, 0x20	; 32
    8dce:	41 93       	st	Z+, r20
    8dd0:	02 d0       	rcall	.+4      	; 0x8dd6 <__ultoa_invert+0x84>
    8dd2:	a9 f7       	brne	.-22     	; 0x8dbe <__ultoa_invert+0x6c>
    8dd4:	ea cf       	rjmp	.-44     	; 0x8daa <__ultoa_invert+0x58>
    8dd6:	b4 e0       	ldi	r27, 0x04	; 4
    8dd8:	a6 95       	lsr	r26
    8dda:	97 95       	ror	r25
    8ddc:	87 95       	ror	r24
    8dde:	77 95       	ror	r23
    8de0:	67 95       	ror	r22
    8de2:	ba 95       	dec	r27
    8de4:	c9 f7       	brne	.-14     	; 0x8dd8 <__ultoa_invert+0x86>
    8de6:	00 97       	sbiw	r24, 0x00	; 0
    8de8:	61 05       	cpc	r22, r1
    8dea:	71 05       	cpc	r23, r1
    8dec:	08 95       	ret
    8dee:	9b 01       	movw	r18, r22
    8df0:	ac 01       	movw	r20, r24
    8df2:	0a 2e       	mov	r0, r26
    8df4:	06 94       	lsr	r0
    8df6:	57 95       	ror	r21
    8df8:	47 95       	ror	r20
    8dfa:	37 95       	ror	r19
    8dfc:	27 95       	ror	r18
    8dfe:	ba 95       	dec	r27
    8e00:	c9 f7       	brne	.-14     	; 0x8df4 <__ultoa_invert+0xa2>
    8e02:	62 0f       	add	r22, r18
    8e04:	73 1f       	adc	r23, r19
    8e06:	84 1f       	adc	r24, r20
    8e08:	95 1f       	adc	r25, r21
    8e0a:	a0 1d       	adc	r26, r0
    8e0c:	08 95       	ret

00008e0e <calloc>:
    8e0e:	0f 93       	push	r16
    8e10:	1f 93       	push	r17
    8e12:	cf 93       	push	r28
    8e14:	df 93       	push	r29
    8e16:	86 9f       	mul	r24, r22
    8e18:	80 01       	movw	r16, r0
    8e1a:	87 9f       	mul	r24, r23
    8e1c:	10 0d       	add	r17, r0
    8e1e:	96 9f       	mul	r25, r22
    8e20:	10 0d       	add	r17, r0
    8e22:	11 24       	eor	r1, r1
    8e24:	c8 01       	movw	r24, r16
    8e26:	83 dc       	rcall	.-1786   	; 0x872e <malloc>
    8e28:	ec 01       	movw	r28, r24
    8e2a:	00 97       	sbiw	r24, 0x00	; 0
    8e2c:	21 f0       	breq	.+8      	; 0x8e36 <calloc+0x28>
    8e2e:	a8 01       	movw	r20, r16
    8e30:	60 e0       	ldi	r22, 0x00	; 0
    8e32:	70 e0       	ldi	r23, 0x00	; 0
    8e34:	06 d0       	rcall	.+12     	; 0x8e42 <memset>
    8e36:	ce 01       	movw	r24, r28
    8e38:	df 91       	pop	r29
    8e3a:	cf 91       	pop	r28
    8e3c:	1f 91       	pop	r17
    8e3e:	0f 91       	pop	r16
    8e40:	08 95       	ret

00008e42 <memset>:
    8e42:	dc 01       	movw	r26, r24
    8e44:	01 c0       	rjmp	.+2      	; 0x8e48 <memset+0x6>
    8e46:	6d 93       	st	X+, r22
    8e48:	41 50       	subi	r20, 0x01	; 1
    8e4a:	50 40       	sbci	r21, 0x00	; 0
    8e4c:	e0 f7       	brcc	.-8      	; 0x8e46 <memset+0x4>
    8e4e:	08 95       	ret

00008e50 <_exit>:
    8e50:	f8 94       	cli

00008e52 <__stop_program>:
    8e52:	ff cf       	rjmp	.-2      	; 0x8e52 <__stop_program>
