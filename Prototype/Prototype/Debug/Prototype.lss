
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00802000  00005178  0000520c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  0080202e  0080202e  0000523a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000523a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e8  00000000  00000000  000052d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f15e  00000000  00000000  000059c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005510  00000000  00000000  00014b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009289  00000000  00000000  0001a02e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024c0  00000000  00000000  000232b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035859  00000000  00000000  00025778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005206  00000000  00000000  0005afd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  000601d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003d0e  00000000  00000000  00060807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	c4 c2       	rjmp	.+1416   	; 0x5b2 <__vector_10>
      2a:	00 00       	nop
      2c:	f2 c2       	rjmp	.+1508   	; 0x612 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__vector_13>
      38:	ac c3       	rjmp	.+1880   	; 0x792 <__vector_14>
      3a:	00 00       	nop
      3c:	01 c4       	rjmp	.+2050   	; 0x840 <__vector_15>
      3e:	00 00       	nop
      40:	56 c4       	rjmp	.+2220   	; 0x8ee <__vector_16>
      42:	00 00       	nop
      44:	ab c4       	rjmp	.+2390   	; 0x99c <__vector_17>
      46:	00 00       	nop
      48:	00 c5       	rjmp	.+2560   	; 0xa4a <__vector_18>
      4a:	00 00       	nop
      4c:	55 c5       	rjmp	.+2730   	; 0xaf8 <__vector_19>
      4e:	00 00       	nop
      50:	aa c5       	rjmp	.+2900   	; 0xba6 <__vector_20>
      52:	00 00       	nop
      54:	ff c5       	rjmp	.+3070   	; 0xc54 <__vector_21>
      56:	00 00       	nop
      58:	54 c6       	rjmp	.+3240   	; 0xd02 <__vector_22>
      5a:	00 00       	nop
      5c:	a9 c6       	rjmp	.+3410   	; 0xdb0 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__vector_46>
      bc:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__vector_47>
      c0:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_48>
      c4:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_49>
      c8:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_50>
      cc:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_51>
      d0:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_52>
      d4:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_53>
      d8:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_54>
      dc:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_55>
      e0:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_76>
     134:	94 c6       	rjmp	.+3368   	; 0xe5e <__vector_77>
     136:	00 00       	nop
     138:	e9 c6       	rjmp	.+3538   	; 0xf0c <__vector_78>
     13a:	00 00       	nop
     13c:	3e c7       	rjmp	.+3708   	; 0xfba <__vector_79>
     13e:	00 00       	nop
     140:	93 c7       	rjmp	.+3878   	; 0x1068 <__vector_80>
     142:	00 00       	nop
     144:	e8 c7       	rjmp	.+4048   	; 0x1116 <__vector_81>
     146:	00 00       	nop
     148:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_82>
     14c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_83>
     150:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_84>
     154:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_85>
     158:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__vector_107>
     1b0:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_108>
     1b4:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_109>
     1b8:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_110>
     1bc:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__vector_111>
     1c0:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_112>
     1c4:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_113>
     1c8:	0c 94 05 10 	jmp	0x200a	; 0x200a <__vector_114>
     1cc:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__vector_115>
     1d0:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__vector_116>
     1d4:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	65 c0       	rjmp	.+202    	; 0x2a8 <__vector_119>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e7       	ldi	r30, 0x78	; 120
     21c:	f1 e5       	ldi	r31, 0x51	; 81
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 32       	cpi	r26, 0x2E	; 46
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	ae e2       	ldi	r26, 0x2E	; 46
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ad 3a       	cpi	r26, 0xAD	; 173
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <main>
     244:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <xbee_init>:
}

void xbeeWrite(uint8_t data)
{
	usart_putchar(P_XBEEUART,data);
}
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	92 ec       	ldi	r25, 0xC2	; 194
     256:	a1 e0       	ldi	r26, 0x01	; 1
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <__data_end+0x6>
     25e:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <__data_end+0x7>
     262:	a0 93 36 20 	sts	0x2036, r26	; 0x802036 <__data_end+0x8>
     266:	b0 93 37 20 	sts	0x2037, r27	; 0x802037 <__data_end+0x9>
     26a:	80 ea       	ldi	r24, 0xA0	; 160
     26c:	96 e0       	ldi	r25, 0x06	; 6
     26e:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__data_end>
     272:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__data_end+0x1>
     276:	80 ea       	ldi	r24, 0xA0	; 160
     278:	9b e0       	ldi	r25, 0x0B	; 11
     27a:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <__data_end+0x2>
     27e:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <__data_end+0x3>
     282:	88 e0       	ldi	r24, 0x08	; 8
     284:	80 93 33 20 	sts	0x2033, r24	; 0x802033 <__data_end+0x5>
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end+0x4>
     28e:	8e e2       	ldi	r24, 0x2E	; 46
     290:	90 e2       	ldi	r25, 0x20	; 32
     292:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <uart_init>
     296:	80 ea       	ldi	r24, 0xA0	; 160
     298:	9b e0       	ldi	r25, 0x0B	; 11
     29a:	24 e1       	ldi	r18, 0x14	; 20
     29c:	fc 01       	movw	r30, r24
     29e:	23 83       	std	Z+3, r18	; 0x03
     2a0:	00 00       	nop
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <__vector_119>:

ISR(READ_INTURUPT)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     2b8:	0f 92       	push	r0
     2ba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     2be:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     2c2:	0f 92       	push	r0
     2c4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     2c8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     2cc:	0f 92       	push	r0
     2ce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	ef 93       	push	r30
     2d8:	ff 93       	push	r31
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
     2e2:	80 ea       	ldi	r24, 0xA0	; 160
     2e4:	9b e0       	ldi	r25, 0x0B	; 11
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <XbeeRx>
     2ee:	00 00       	nop
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	ff 91       	pop	r31
     2f6:	ef 91       	pop	r30
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	0f 90       	pop	r0
     2fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     302:	0f 90       	pop	r0
     304:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     308:	0f 90       	pop	r0
     30a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     30e:	0f 90       	pop	r0
     310:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     314:	0f 90       	pop	r0
     316:	1f 90       	pop	r1
     318:	18 95       	reti

0000031a <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	1f 92       	push	r1
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     324:	8f e3       	ldi	r24, 0x3F	; 63
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	fc 01       	movw	r30, r24
     32a:	80 81       	ld	r24, Z
     32c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     32e:	f8 94       	cli
	return flags;
     330:	89 81       	ldd	r24, Y+1	; 0x01
}
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	1f 92       	push	r1
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     346:	8f e3       	ldi	r24, 0x3F	; 63
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	29 81       	ldd	r18, Y+1	; 0x01
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
}
     350:	00 00       	nop
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	1f 92       	push	r1
     360:	1f 92       	push	r1
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     368:	d8 df       	rcall	.-80     	; 0x31a <cpu_irq_save>
     36a:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     36c:	80 e5       	ldi	r24, 0x50	; 80
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	20 e5       	ldi	r18, 0x50	; 80
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	f9 01       	movw	r30, r18
     376:	30 81       	ld	r19, Z
     378:	2a 81       	ldd	r18, Y+2	; 0x02
     37a:	23 2b       	or	r18, r19
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	db df       	rcall	.-74     	; 0x33a <cpu_irq_restore>
}
     384:	00 00       	nop
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	1f 92       	push	r1
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     39e:	80 e5       	ldi	r24, 0x50	; 80
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	22 e0       	ldi	r18, 0x02	; 2
     3a4:	fc 01       	movw	r30, r24
     3a6:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
     3a8:	b8 df       	rcall	.-144    	; 0x31a <cpu_irq_save>
     3aa:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     3ac:	80 e5       	ldi	r24, 0x50	; 80
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	20 e5       	ldi	r18, 0x50	; 80
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	30 81       	ld	r19, Z
     3b8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ba:	23 2b       	or	r18, r19
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	bb df       	rcall	.-138    	; 0x33a <cpu_irq_restore>
}
     3c4:	00 00       	nop
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	1f 92       	push	r1
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     3de:	9d df       	rcall	.-198    	; 0x31a <cpu_irq_save>
     3e0:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
     3e2:	80 e5       	ldi	r24, 0x50	; 80
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	20 e5       	ldi	r18, 0x50	; 80
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	32 2f       	mov	r19, r18
     3f0:	2a 81       	ldd	r18, Y+2	; 0x02
     3f2:	20 95       	com	r18
     3f4:	23 23       	and	r18, r19
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	9e df       	rcall	.-196    	; 0x33a <cpu_irq_restore>
}
     3fe:	00 00       	nop
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <osc_enable>:

static inline void osc_enable(uint8_t id)
{
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	1f 92       	push	r1
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	19 f0       	breq	.+6      	; 0x422 <osc_enable+0x18>
		osc_enable_internal(id);
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9d df       	rcall	.-198    	; 0x35a <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
     420:	02 c0       	rjmp	.+4      	; 0x426 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	b5 df       	rcall	.-150    	; 0x390 <osc_enable_external>
	}
}
     426:	00 00       	nop
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	1f 92       	push	r1
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     43c:	80 e5       	ldi	r24, 0x50	; 80
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	fc 01       	movw	r30, r24
     442:	91 81       	ldd	r25, Z+1	; 0x01
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	98 23       	and	r25, r24
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	99 23       	and	r25, r25
     44c:	09 f4       	brne	.+2      	; 0x450 <osc_is_ready+0x20>
     44e:	80 e0       	ldi	r24, 0x00	; 0
}
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	1f 92       	push	r1
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
     464:	00 00       	nop
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	e3 df       	rcall	.-58     	; 0x430 <osc_is_ready>
     46a:	98 2f       	mov	r25, r24
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	89 27       	eor	r24, r25
     470:	88 23       	and	r24, r24
     472:	c9 f7       	brne	.-14     	; 0x466 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
     474:	00 00       	nop
     476:	0f 90       	pop	r0
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	00 d0       	rcall	.+0      	; 0x484 <sysclk_init+0x6>
     484:	1f 92       	push	r1
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     48a:	80 e7       	ldi	r24, 0x70	; 112
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
     492:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     494:	1b 82       	std	Y+3, r1	; 0x03
     496:	0d c0       	rjmp	.+26     	; 0x4b2 <sysclk_init+0x34>
		*(reg++) = 0xff;
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	9c 01       	movw	r18, r24
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	29 83       	std	Y+1, r18	; 0x01
     4a4:	3a 83       	std	Y+2, r19	; 0x02
     4a6:	2f ef       	ldi	r18, 0xFF	; 255
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
     4b0:	8b 83       	std	Y+3, r24	; 0x03
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	87 30       	cpi	r24, 0x07	; 7
     4b6:	80 f3       	brcs	.-32     	; 0x498 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	a7 df       	rcall	.-178    	; 0x40a <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	cc df       	rcall	.-104    	; 0x458 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
     4c0:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	80 e4       	ldi	r24, 0x40	; 64
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	6e d0       	rcall	.+220    	; 0x5a6 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
     4ca:	8c 81       	ldd	r24, Y+4	; 0x04
     4cc:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <sysclk_init+0x56>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	7e df       	rcall	.-260    	; 0x3d0 <osc_disable>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     4d4:	24 96       	adiw	r28, 0x04	; 4
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <sysclk_enable_module+0x6>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	8a 83       	std	Y+2, r24	; 0x02
     4ec:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
     4ee:	15 df       	rcall	.-470    	; 0x31a <cpu_irq_save>
     4f0:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 59       	subi	r24, 0x90	; 144
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	2a 81       	ldd	r18, Y+2	; 0x02
     4fe:	22 2f       	mov	r18, r18
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	20 59       	subi	r18, 0x90	; 144
     504:	3f 4f       	sbci	r19, 0xFF	; 255
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	32 2f       	mov	r19, r18
     50c:	2b 81       	ldd	r18, Y+3	; 0x03
     50e:	20 95       	com	r18
     510:	23 23       	and	r18, r19
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	10 df       	rcall	.-480    	; 0x33a <cpu_irq_restore>
}
     51a:	00 00       	nop
     51c:	23 96       	adiw	r28, 0x03	; 3
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	de bf       	out	0x3e, r29	; 62
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	00 d0       	rcall	.+0      	; 0x52e <_read+0x6>
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	8a 83       	std	Y+2, r24	; 0x02
     534:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
     536:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <ptr_get>
     53a:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <ptr_get+0x1>
     53e:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <stdio_base>
     542:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <stdio_base+0x1>
     546:	ae 01       	movw	r20, r28
     548:	4f 5f       	subi	r20, 0xFF	; 255
     54a:	5f 4f       	sbci	r21, 0xFF	; 255
     54c:	ba 01       	movw	r22, r20
     54e:	f9 01       	movw	r30, r18
     550:	19 95       	eicall
	return c;
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	08 2e       	mov	r0, r24
     556:	00 0c       	add	r0, r0
     558:	99 0b       	sbc	r25, r25
}
     55a:	23 96       	adiw	r28, 0x03	; 3
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	de bf       	out	0x3e, r29	; 62
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	00 d0       	rcall	.+0      	; 0x56c <_write+0x6>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	89 83       	std	Y+1, r24	; 0x01
     572:	6a 83       	std	Y+2, r22	; 0x02
     574:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
     576:	20 91 96 20 	lds	r18, 0x2096	; 0x802096 <ptr_put>
     57a:	30 91 97 20 	lds	r19, 0x2097	; 0x802097 <ptr_put+0x1>
     57e:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <stdio_base>
     582:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <stdio_base+0x1>
     586:	69 81       	ldd	r22, Y+1	; 0x01
     588:	f9 01       	movw	r30, r18
     58a:	19 95       	eicall
     58c:	99 23       	and	r25, r25
     58e:	1c f4       	brge	.+6      	; 0x596 <_write+0x30>
		return -1;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	9f ef       	ldi	r25, 0xFF	; 255
     594:	02 c0       	rjmp	.+4      	; 0x59a <_write+0x34>
	}
	return 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
}
     59a:	23 96       	adiw	r28, 0x03	; 3
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     5a6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     5a8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     5aa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     5ac:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     5ae:	60 83       	st	Z, r22
	ret                             // Return to caller
     5b0:	08 95       	ret

000005b2 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     5b2:	1f 92       	push	r1
     5b4:	0f 92       	push	r0
     5b6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     5c2:	0f 92       	push	r0
     5c4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     5c8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     5cc:	0f 92       	push	r0
     5ce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
     5de:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <rtc_data>
     5e2:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <rtc_data+0x1>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <rtc_data>
     5ec:	90 93 9b 20 	sts	0x209B, r25	; 0x80209b <rtc_data+0x1>
}
     5f0:	00 00       	nop
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	0f 90       	pop	r0
     5fc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     600:	0f 90       	pop	r0
     602:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     606:	0f 90       	pop	r0
     608:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     622:	0f 92       	push	r0
     624:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     628:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     62c:	0f 92       	push	r0
     62e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     632:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     636:	0f 92       	push	r0
     638:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     63c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     640:	0f 92       	push	r0
     642:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	28 97       	sbiw	r28, 0x08	; 8
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     66c:	20 91 9a 20 	lds	r18, 0x209A	; 0x80209a <rtc_data>
     670:	30 91 9b 20 	lds	r19, 0x209B	; 0x80209b <rtc_data+0x1>
     674:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <rtc_data+0x2>
     678:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <rtc_data+0x3>
     67c:	28 17       	cp	r18, r24
     67e:	39 07       	cpc	r19, r25
     680:	08 f4       	brcc	.+2      	; 0x684 <__vector_11+0x72>
     682:	63 c0       	rjmp	.+198    	; 0x74a <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	94 e0       	ldi	r25, 0x04	; 4
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	fc 01       	movw	r30, r24
     68c:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
     68e:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <rtc_data+0x6>
     692:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <rtc_data+0x7>
     696:	89 2b       	or	r24, r25
     698:	09 f4       	brne	.+2      	; 0x69c <__vector_11+0x8a>
     69a:	57 c0       	rjmp	.+174    	; 0x74a <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     69c:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <rtc_data>
     6a0:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <rtc_data+0x1>
     6a4:	cc 01       	movw	r24, r24
     6a6:	a0 e0       	ldi	r26, 0x00	; 0
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	ac 01       	movw	r20, r24
     6ac:	33 27       	eor	r19, r19
     6ae:	22 27       	eor	r18, r18
					| RTC.CNT;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	94 e0       	ldi	r25, 0x04	; 4
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 85       	ldd	r24, Z+8	; 0x08
     6b8:	91 85       	ldd	r25, Z+9	; 0x09
     6ba:	cc 01       	movw	r24, r24
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     6c0:	82 2b       	or	r24, r18
     6c2:	93 2b       	or	r25, r19
     6c4:	a4 2b       	or	r26, r20
     6c6:	b5 2b       	or	r27, r21
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	ab 83       	std	Y+3, r26	; 0x03
     6ce:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     6d0:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <rtc_data+0x2>
     6d4:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <rtc_data+0x3>
     6d8:	cc 01       	movw	r24, r24
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ac 01       	movw	r20, r24
     6e0:	33 27       	eor	r19, r19
     6e2:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
     6e4:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <rtc_data+0x4>
     6e8:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <rtc_data+0x5>
     6ec:	cc 01       	movw	r24, r24
     6ee:	a0 e0       	ldi	r26, 0x00	; 0
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     6f2:	82 2b       	or	r24, r18
     6f4:	93 2b       	or	r25, r19
     6f6:	a4 2b       	or	r26, r20
     6f8:	b5 2b       	or	r27, r21
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	9e 83       	std	Y+6, r25	; 0x06
     6fe:	af 83       	std	Y+7, r26	; 0x07
     700:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     702:	2d 81       	ldd	r18, Y+5	; 0x05
     704:	3e 81       	ldd	r19, Y+6	; 0x06
     706:	4f 81       	ldd	r20, Y+7	; 0x07
     708:	58 85       	ldd	r21, Y+8	; 0x08
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	ab 81       	ldd	r26, Y+3	; 0x03
     710:	bc 81       	ldd	r27, Y+4	; 0x04
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	4a 07       	cpc	r20, r26
     718:	5b 07       	cpc	r21, r27
     71a:	58 f0       	brcs	.+22     	; 0x732 <__vector_11+0x120>
				count = alarm + 1;
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	9e 81       	ldd	r25, Y+6	; 0x06
     720:	af 81       	ldd	r26, Y+7	; 0x07
     722:	b8 85       	ldd	r27, Y+8	; 0x08
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	a1 1d       	adc	r26, r1
     728:	b1 1d       	adc	r27, r1
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	9a 83       	std	Y+2, r25	; 0x02
     72e:	ab 83       	std	Y+3, r26	; 0x03
     730:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
     732:	20 91 a0 20 	lds	r18, 0x20A0	; 0x8020a0 <rtc_data+0x6>
     736:	30 91 a1 20 	lds	r19, 0x20A1	; 0x8020a1 <rtc_data+0x7>
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	ab 81       	ldd	r26, Y+3	; 0x03
     740:	bc 81       	ldd	r27, Y+4	; 0x04
     742:	bc 01       	movw	r22, r24
     744:	cd 01       	movw	r24, r26
     746:	f9 01       	movw	r30, r18
     748:	19 95       	eicall
		}
	}
}
     74a:	00 00       	nop
     74c:	28 96       	adiw	r28, 0x08	; 8
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	de bf       	out	0x3e, r29	; 62
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     774:	0f 90       	pop	r0
     776:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     77a:	0f 90       	pop	r0
     77c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     780:	0f 90       	pop	r0
     782:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     786:	0f 90       	pop	r0
     788:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7a2:	0f 92       	push	r0
     7a4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7a8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7ac:	0f 92       	push	r0
     7ae:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7b2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7b6:	0f 92       	push	r0
     7b8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7bc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7c0:	0f 92       	push	r0
     7c2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7c6:	2f 93       	push	r18
     7c8:	3f 93       	push	r19
     7ca:	4f 93       	push	r20
     7cc:	5f 93       	push	r21
     7ce:	6f 93       	push	r22
     7d0:	7f 93       	push	r23
     7d2:	8f 93       	push	r24
     7d4:	9f 93       	push	r25
     7d6:	af 93       	push	r26
     7d8:	bf 93       	push	r27
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
     7e6:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <tc_tcc0_ovf_callback>
     7ea:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <tc_tcc0_ovf_callback+0x1>
     7ee:	89 2b       	or	r24, r25
     7f0:	31 f0       	breq	.+12     	; 0x7fe <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
     7f2:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <tc_tcc0_ovf_callback>
     7f6:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <tc_tcc0_ovf_callback+0x1>
     7fa:	fc 01       	movw	r30, r24
     7fc:	19 95       	eicall
	}
}
     7fe:	00 00       	nop
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	ff 91       	pop	r31
     806:	ef 91       	pop	r30
     808:	bf 91       	pop	r27
     80a:	af 91       	pop	r26
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	7f 91       	pop	r23
     812:	6f 91       	pop	r22
     814:	5f 91       	pop	r21
     816:	4f 91       	pop	r20
     818:	3f 91       	pop	r19
     81a:	2f 91       	pop	r18
     81c:	0f 90       	pop	r0
     81e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     822:	0f 90       	pop	r0
     824:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     828:	0f 90       	pop	r0
     82a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     82e:	0f 90       	pop	r0
     830:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     834:	0f 90       	pop	r0
     836:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     848:	0f 92       	push	r0
     84a:	11 24       	eor	r1, r1
     84c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     850:	0f 92       	push	r0
     852:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     856:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     85a:	0f 92       	push	r0
     85c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     860:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     864:	0f 92       	push	r0
     866:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     86a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     86e:	0f 92       	push	r0
     870:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
     894:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <tc_tcc0_err_callback>
     898:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <tc_tcc0_err_callback+0x1>
     89c:	89 2b       	or	r24, r25
     89e:	31 f0       	breq	.+12     	; 0x8ac <__vector_15+0x6c>
		tc_tcc0_err_callback();
     8a0:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <tc_tcc0_err_callback>
     8a4:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <tc_tcc0_err_callback+0x1>
     8a8:	fc 01       	movw	r30, r24
     8aa:	19 95       	eicall
	}
}
     8ac:	00 00       	nop
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8d0:	0f 90       	pop	r0
     8d2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8d6:	0f 90       	pop	r0
     8d8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8dc:	0f 90       	pop	r0
     8de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8e2:	0f 90       	pop	r0
     8e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8fe:	0f 92       	push	r0
     900:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     904:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     908:	0f 92       	push	r0
     90a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     90e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     912:	0f 92       	push	r0
     914:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     918:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     91c:	0f 92       	push	r0
     91e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     922:	2f 93       	push	r18
     924:	3f 93       	push	r19
     926:	4f 93       	push	r20
     928:	5f 93       	push	r21
     92a:	6f 93       	push	r22
     92c:	7f 93       	push	r23
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	af 93       	push	r26
     934:	bf 93       	push	r27
     936:	ef 93       	push	r30
     938:	ff 93       	push	r31
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
     942:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <tc_tcc0_cca_callback>
     946:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <tc_tcc0_cca_callback+0x1>
     94a:	89 2b       	or	r24, r25
     94c:	31 f0       	breq	.+12     	; 0x95a <__vector_16+0x6c>
		tc_tcc0_cca_callback();
     94e:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <tc_tcc0_cca_callback>
     952:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <tc_tcc0_cca_callback+0x1>
     956:	fc 01       	movw	r30, r24
     958:	19 95       	eicall
	}
}
     95a:	00 00       	nop
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	7f 91       	pop	r23
     96e:	6f 91       	pop	r22
     970:	5f 91       	pop	r21
     972:	4f 91       	pop	r20
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	0f 90       	pop	r0
     97a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     97e:	0f 90       	pop	r0
     980:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     984:	0f 90       	pop	r0
     986:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     98a:	0f 90       	pop	r0
     98c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     990:	0f 90       	pop	r0
     992:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9a4:	0f 92       	push	r0
     9a6:	11 24       	eor	r1, r1
     9a8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9ac:	0f 92       	push	r0
     9ae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9b2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9b6:	0f 92       	push	r0
     9b8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9bc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9c0:	0f 92       	push	r0
     9c2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9c6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9ca:	0f 92       	push	r0
     9cc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
     9f0:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <tc_tcc0_ccb_callback>
     9f4:	90 91 3f 20 	lds	r25, 0x203F	; 0x80203f <tc_tcc0_ccb_callback+0x1>
     9f8:	89 2b       	or	r24, r25
     9fa:	31 f0       	breq	.+12     	; 0xa08 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
     9fc:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <tc_tcc0_ccb_callback>
     a00:	90 91 3f 20 	lds	r25, 0x203F	; 0x80203f <tc_tcc0_ccb_callback+0x1>
     a04:	fc 01       	movw	r30, r24
     a06:	19 95       	eicall
	}
}
     a08:	00 00       	nop
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a2c:	0f 90       	pop	r0
     a2e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a32:	0f 90       	pop	r0
     a34:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a38:	0f 90       	pop	r0
     a3a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a3e:	0f 90       	pop	r0
     a40:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a44:	0f 90       	pop	r0
     a46:	1f 90       	pop	r1
     a48:	18 95       	reti

00000a4a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     a4a:	1f 92       	push	r1
     a4c:	0f 92       	push	r0
     a4e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a5a:	0f 92       	push	r0
     a5c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a60:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a64:	0f 92       	push	r0
     a66:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a6a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a6e:	0f 92       	push	r0
     a70:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a74:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a78:	0f 92       	push	r0
     a7a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
     a9e:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <tc_tcc0_ccc_callback>
     aa2:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <tc_tcc0_ccc_callback+0x1>
     aa6:	89 2b       	or	r24, r25
     aa8:	31 f0       	breq	.+12     	; 0xab6 <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
     aaa:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <tc_tcc0_ccc_callback>
     aae:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <tc_tcc0_ccc_callback+0x1>
     ab2:	fc 01       	movw	r30, r24
     ab4:	19 95       	eicall
	}
}
     ab6:	00 00       	nop
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	0f 90       	pop	r0
     ad6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ada:	0f 90       	pop	r0
     adc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ae0:	0f 90       	pop	r0
     ae2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ae6:	0f 90       	pop	r0
     ae8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     aec:	0f 90       	pop	r0
     aee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti

00000af8 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b08:	0f 92       	push	r0
     b0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b12:	0f 92       	push	r0
     b14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b1c:	0f 92       	push	r0
     b1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b26:	0f 92       	push	r0
     b28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b2c:	2f 93       	push	r18
     b2e:	3f 93       	push	r19
     b30:	4f 93       	push	r20
     b32:	5f 93       	push	r21
     b34:	6f 93       	push	r22
     b36:	7f 93       	push	r23
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	af 93       	push	r26
     b3e:	bf 93       	push	r27
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
     b4c:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <tc_tcc0_ccd_callback>
     b50:	90 91 43 20 	lds	r25, 0x2043	; 0x802043 <tc_tcc0_ccd_callback+0x1>
     b54:	89 2b       	or	r24, r25
     b56:	31 f0       	breq	.+12     	; 0xb64 <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
     b58:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <tc_tcc0_ccd_callback>
     b5c:	90 91 43 20 	lds	r25, 0x2043	; 0x802043 <tc_tcc0_ccd_callback+0x1>
     b60:	fc 01       	movw	r30, r24
     b62:	19 95       	eicall
	}
}
     b64:	00 00       	nop
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b88:	0f 90       	pop	r0
     b8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b8e:	0f 90       	pop	r0
     b90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b94:	0f 90       	pop	r0
     b96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b9a:	0f 90       	pop	r0
     b9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bb6:	0f 92       	push	r0
     bb8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bbc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bc0:	0f 92       	push	r0
     bc2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bc6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bca:	0f 92       	push	r0
     bcc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bd0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bd4:	0f 92       	push	r0
     bd6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
     bfa:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <tc_tcc1_ovf_callback>
     bfe:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <tc_tcc1_ovf_callback+0x1>
     c02:	89 2b       	or	r24, r25
     c04:	31 f0       	breq	.+12     	; 0xc12 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
     c06:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <tc_tcc1_ovf_callback>
     c0a:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <tc_tcc1_ovf_callback+0x1>
     c0e:	fc 01       	movw	r30, r24
     c10:	19 95       	eicall
	}
}
     c12:	00 00       	nop
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	0f 90       	pop	r0
     c32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c36:	0f 90       	pop	r0
     c38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c3c:	0f 90       	pop	r0
     c3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c42:	0f 90       	pop	r0
     c44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c48:	0f 90       	pop	r0
     c4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c64:	0f 92       	push	r0
     c66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c6e:	0f 92       	push	r0
     c70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c78:	0f 92       	push	r0
     c7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c82:	0f 92       	push	r0
     c84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	ef 93       	push	r30
     c9e:	ff 93       	push	r31
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
     ca8:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <tc_tcc1_err_callback>
     cac:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <tc_tcc1_err_callback+0x1>
     cb0:	89 2b       	or	r24, r25
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <__vector_21+0x6c>
		tc_tcc1_err_callback();
     cb4:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <tc_tcc1_err_callback>
     cb8:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <tc_tcc1_err_callback+0x1>
     cbc:	fc 01       	movw	r30, r24
     cbe:	19 95       	eicall
	}
}
     cc0:	00 00       	nop
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	ff 91       	pop	r31
     cc8:	ef 91       	pop	r30
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	7f 91       	pop	r23
     cd4:	6f 91       	pop	r22
     cd6:	5f 91       	pop	r21
     cd8:	4f 91       	pop	r20
     cda:	3f 91       	pop	r19
     cdc:	2f 91       	pop	r18
     cde:	0f 90       	pop	r0
     ce0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ce4:	0f 90       	pop	r0
     ce6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     cea:	0f 90       	pop	r0
     cec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     cf0:	0f 90       	pop	r0
     cf2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     cf6:	0f 90       	pop	r0
     cf8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d12:	0f 92       	push	r0
     d14:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d18:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d1c:	0f 92       	push	r0
     d1e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d26:	0f 92       	push	r0
     d28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d30:	0f 92       	push	r0
     d32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
     d56:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <tc_tcc1_cca_callback>
     d5a:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <tc_tcc1_cca_callback+0x1>
     d5e:	89 2b       	or	r24, r25
     d60:	31 f0       	breq	.+12     	; 0xd6e <__vector_22+0x6c>
		tc_tcc1_cca_callback();
     d62:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <tc_tcc1_cca_callback>
     d66:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <tc_tcc1_cca_callback+0x1>
     d6a:	fc 01       	movw	r30, r24
     d6c:	19 95       	eicall
	}
}
     d6e:	00 00       	nop
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	ff 91       	pop	r31
     d76:	ef 91       	pop	r30
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	7f 91       	pop	r23
     d82:	6f 91       	pop	r22
     d84:	5f 91       	pop	r21
     d86:	4f 91       	pop	r20
     d88:	3f 91       	pop	r19
     d8a:	2f 91       	pop	r18
     d8c:	0f 90       	pop	r0
     d8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d92:	0f 90       	pop	r0
     d94:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d98:	0f 90       	pop	r0
     d9a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d9e:	0f 90       	pop	r0
     da0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     da4:	0f 90       	pop	r0
     da6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dc0:	0f 92       	push	r0
     dc2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dc6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dca:	0f 92       	push	r0
     dcc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dd0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dd4:	0f 92       	push	r0
     dd6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dda:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dde:	0f 92       	push	r0
     de0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     de4:	2f 93       	push	r18
     de6:	3f 93       	push	r19
     de8:	4f 93       	push	r20
     dea:	5f 93       	push	r21
     dec:	6f 93       	push	r22
     dee:	7f 93       	push	r23
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
     e04:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <tc_tcc1_ccb_callback>
     e08:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <tc_tcc1_ccb_callback+0x1>
     e0c:	89 2b       	or	r24, r25
     e0e:	31 f0       	breq	.+12     	; 0xe1c <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
     e10:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <tc_tcc1_ccb_callback>
     e14:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <tc_tcc1_ccb_callback+0x1>
     e18:	fc 01       	movw	r30, r24
     e1a:	19 95       	eicall
	}
}
     e1c:	00 00       	nop
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	bf 91       	pop	r27
     e28:	af 91       	pop	r26
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	7f 91       	pop	r23
     e30:	6f 91       	pop	r22
     e32:	5f 91       	pop	r21
     e34:	4f 91       	pop	r20
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e40:	0f 90       	pop	r0
     e42:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e46:	0f 90       	pop	r0
     e48:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e4c:	0f 90       	pop	r0
     e4e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e52:	0f 90       	pop	r0
     e54:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e6e:	0f 92       	push	r0
     e70:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e74:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e78:	0f 92       	push	r0
     e7a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e7e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e82:	0f 92       	push	r0
     e84:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e88:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e8c:	0f 92       	push	r0
     e8e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
     eb2:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <tc_tcd0_ovf_callback>
     eb6:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <tc_tcd0_ovf_callback+0x1>
     eba:	89 2b       	or	r24, r25
     ebc:	31 f0       	breq	.+12     	; 0xeca <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
     ebe:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <tc_tcd0_ovf_callback>
     ec2:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <tc_tcd0_ovf_callback+0x1>
     ec6:	fc 01       	movw	r30, r24
     ec8:	19 95       	eicall
	}
}
     eca:	00 00       	nop
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	ff 91       	pop	r31
     ed2:	ef 91       	pop	r30
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     eee:	0f 90       	pop	r0
     ef0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ef4:	0f 90       	pop	r0
     ef6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     efa:	0f 90       	pop	r0
     efc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f00:	0f 90       	pop	r0
     f02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f1c:	0f 92       	push	r0
     f1e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f22:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f26:	0f 92       	push	r0
     f28:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f2c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f30:	0f 92       	push	r0
     f32:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f36:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f3a:	0f 92       	push	r0
     f3c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f40:	2f 93       	push	r18
     f42:	3f 93       	push	r19
     f44:	4f 93       	push	r20
     f46:	5f 93       	push	r21
     f48:	6f 93       	push	r22
     f4a:	7f 93       	push	r23
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
     f50:	af 93       	push	r26
     f52:	bf 93       	push	r27
     f54:	ef 93       	push	r30
     f56:	ff 93       	push	r31
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
     f60:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <tc_tcd0_err_callback>
     f64:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <tc_tcd0_err_callback+0x1>
     f68:	89 2b       	or	r24, r25
     f6a:	31 f0       	breq	.+12     	; 0xf78 <__vector_78+0x6c>
		tc_tcd0_err_callback();
     f6c:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <tc_tcd0_err_callback>
     f70:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <tc_tcd0_err_callback+0x1>
     f74:	fc 01       	movw	r30, r24
     f76:	19 95       	eicall
	}
}
     f78:	00 00       	nop
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f9c:	0f 90       	pop	r0
     f9e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fa2:	0f 90       	pop	r0
     fa4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fa8:	0f 90       	pop	r0
     faa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fae:	0f 90       	pop	r0
     fb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fca:	0f 92       	push	r0
     fcc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fd0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fd4:	0f 92       	push	r0
     fd6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fda:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fde:	0f 92       	push	r0
     fe0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fe4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fe8:	0f 92       	push	r0
     fea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    100e:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <tc_tcd0_cca_callback>
    1012:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <tc_tcd0_cca_callback+0x1>
    1016:	89 2b       	or	r24, r25
    1018:	31 f0       	breq	.+12     	; 0x1026 <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    101a:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <tc_tcd0_cca_callback>
    101e:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <tc_tcd0_cca_callback+0x1>
    1022:	fc 01       	movw	r30, r24
    1024:	19 95       	eicall
	}
}
    1026:	00 00       	nop
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    104a:	0f 90       	pop	r0
    104c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1050:	0f 90       	pop	r0
    1052:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1056:	0f 90       	pop	r0
    1058:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    105c:	0f 90       	pop	r0
    105e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1078:	0f 92       	push	r0
    107a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    107e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1082:	0f 92       	push	r0
    1084:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1088:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    108c:	0f 92       	push	r0
    108e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1092:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1096:	0f 92       	push	r0
    1098:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    10bc:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <tc_tcd0_ccb_callback>
    10c0:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <tc_tcd0_ccb_callback+0x1>
    10c4:	89 2b       	or	r24, r25
    10c6:	31 f0       	breq	.+12     	; 0x10d4 <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    10c8:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <tc_tcd0_ccb_callback>
    10cc:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <tc_tcd0_ccb_callback+0x1>
    10d0:	fc 01       	movw	r30, r24
    10d2:	19 95       	eicall
	}
}
    10d4:	00 00       	nop
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10f8:	0f 90       	pop	r0
    10fa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10fe:	0f 90       	pop	r0
    1100:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1104:	0f 90       	pop	r0
    1106:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    110a:	0f 90       	pop	r0
    110c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1126:	0f 92       	push	r0
    1128:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    112c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1130:	0f 92       	push	r0
    1132:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1136:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    113a:	0f 92       	push	r0
    113c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1140:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1144:	0f 92       	push	r0
    1146:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    116a:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <tc_tcd0_ccc_callback>
    116e:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <tc_tcd0_ccc_callback+0x1>
    1172:	89 2b       	or	r24, r25
    1174:	31 f0       	breq	.+12     	; 0x1182 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    1176:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <tc_tcd0_ccc_callback>
    117a:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <tc_tcd0_ccc_callback+0x1>
    117e:	fc 01       	movw	r30, r24
    1180:	19 95       	eicall
	}
}
    1182:	00 00       	nop
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	bf 91       	pop	r27
    118e:	af 91       	pop	r26
    1190:	9f 91       	pop	r25
    1192:	8f 91       	pop	r24
    1194:	7f 91       	pop	r23
    1196:	6f 91       	pop	r22
    1198:	5f 91       	pop	r21
    119a:	4f 91       	pop	r20
    119c:	3f 91       	pop	r19
    119e:	2f 91       	pop	r18
    11a0:	0f 90       	pop	r0
    11a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11a6:	0f 90       	pop	r0
    11a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11ac:	0f 90       	pop	r0
    11ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11b2:	0f 90       	pop	r0
    11b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11b8:	0f 90       	pop	r0
    11ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11d4:	0f 92       	push	r0
    11d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11de:	0f 92       	push	r0
    11e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11e8:	0f 92       	push	r0
    11ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11f2:	0f 92       	push	r0
    11f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    1218:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <tc_tcd0_ccd_callback>
    121c:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <tc_tcd0_ccd_callback+0x1>
    1220:	89 2b       	or	r24, r25
    1222:	31 f0       	breq	.+12     	; 0x1230 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    1224:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <tc_tcd0_ccd_callback>
    1228:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <tc_tcd0_ccd_callback+0x1>
    122c:	fc 01       	movw	r30, r24
    122e:	19 95       	eicall
	}
}
    1230:	00 00       	nop
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1254:	0f 90       	pop	r0
    1256:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    125a:	0f 90       	pop	r0
    125c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1260:	0f 90       	pop	r0
    1262:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1266:	0f 90       	pop	r0
    1268:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1282:	0f 92       	push	r0
    1284:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1288:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    128c:	0f 92       	push	r0
    128e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1292:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1296:	0f 92       	push	r0
    1298:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    129c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12a0:	0f 92       	push	r0
    12a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    12c6:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <tc_tcd1_ovf_callback>
    12ca:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <tc_tcd1_ovf_callback+0x1>
    12ce:	89 2b       	or	r24, r25
    12d0:	31 f0       	breq	.+12     	; 0x12de <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    12d2:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <tc_tcd1_ovf_callback>
    12d6:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <tc_tcd1_ovf_callback+0x1>
    12da:	fc 01       	movw	r30, r24
    12dc:	19 95       	eicall
	}
}
    12de:	00 00       	nop
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1302:	0f 90       	pop	r0
    1304:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1308:	0f 90       	pop	r0
    130a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    130e:	0f 90       	pop	r0
    1310:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1314:	0f 90       	pop	r0
    1316:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    131a:	0f 90       	pop	r0
    131c:	1f 90       	pop	r1
    131e:	18 95       	reti

00001320 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1328:	0f 92       	push	r0
    132a:	11 24       	eor	r1, r1
    132c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1330:	0f 92       	push	r0
    1332:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1336:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    133a:	0f 92       	push	r0
    133c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1340:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1344:	0f 92       	push	r0
    1346:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    134a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    134e:	0f 92       	push	r0
    1350:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    1374:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <tc_tcd1_err_callback>
    1378:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <tc_tcd1_err_callback+0x1>
    137c:	89 2b       	or	r24, r25
    137e:	31 f0       	breq	.+12     	; 0x138c <__vector_84+0x6c>
		tc_tcd1_err_callback();
    1380:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <tc_tcd1_err_callback>
    1384:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <tc_tcd1_err_callback+0x1>
    1388:	fc 01       	movw	r30, r24
    138a:	19 95       	eicall
	}
}
    138c:	00 00       	nop
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13b0:	0f 90       	pop	r0
    13b2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13b6:	0f 90       	pop	r0
    13b8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13bc:	0f 90       	pop	r0
    13be:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13c2:	0f 90       	pop	r0
    13c4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13de:	0f 92       	push	r0
    13e0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13e4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13e8:	0f 92       	push	r0
    13ea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13ee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13f2:	0f 92       	push	r0
    13f4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13fc:	0f 92       	push	r0
    13fe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    1422:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <tc_tcd1_cca_callback>
    1426:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <tc_tcd1_cca_callback+0x1>
    142a:	89 2b       	or	r24, r25
    142c:	31 f0       	breq	.+12     	; 0x143a <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    142e:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <tc_tcd1_cca_callback>
    1432:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <tc_tcd1_cca_callback+0x1>
    1436:	fc 01       	movw	r30, r24
    1438:	19 95       	eicall
	}
}
    143a:	00 00       	nop
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    145e:	0f 90       	pop	r0
    1460:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1464:	0f 90       	pop	r0
    1466:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    146a:	0f 90       	pop	r0
    146c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1470:	0f 90       	pop	r0
    1472:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    148c:	0f 92       	push	r0
    148e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1492:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1496:	0f 92       	push	r0
    1498:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    149c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14a0:	0f 92       	push	r0
    14a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14aa:	0f 92       	push	r0
    14ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    14d0:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <tc_tcd1_ccb_callback>
    14d4:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <tc_tcd1_ccb_callback+0x1>
    14d8:	89 2b       	or	r24, r25
    14da:	31 f0       	breq	.+12     	; 0x14e8 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    14dc:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <tc_tcd1_ccb_callback>
    14e0:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <tc_tcd1_ccb_callback+0x1>
    14e4:	fc 01       	movw	r30, r24
    14e6:	19 95       	eicall
	}
}
    14e8:	00 00       	nop
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    150c:	0f 90       	pop	r0
    150e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1512:	0f 90       	pop	r0
    1514:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1518:	0f 90       	pop	r0
    151a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    151e:	0f 90       	pop	r0
    1520:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    152a:	1f 92       	push	r1
    152c:	0f 92       	push	r0
    152e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    153a:	0f 92       	push	r0
    153c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1540:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1544:	0f 92       	push	r0
    1546:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    154a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    154e:	0f 92       	push	r0
    1550:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1554:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1558:	0f 92       	push	r0
    155a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    157e:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <tc_tce0_ovf_callback>
    1582:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <tc_tce0_ovf_callback+0x1>
    1586:	89 2b       	or	r24, r25
    1588:	31 f0       	breq	.+12     	; 0x1596 <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    158a:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <tc_tce0_ovf_callback>
    158e:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <tc_tce0_ovf_callback+0x1>
    1592:	fc 01       	movw	r30, r24
    1594:	19 95       	eicall
	}
}
    1596:	00 00       	nop
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15ba:	0f 90       	pop	r0
    15bc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15c0:	0f 90       	pop	r0
    15c2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15c6:	0f 90       	pop	r0
    15c8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15cc:	0f 90       	pop	r0
    15ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15e8:	0f 92       	push	r0
    15ea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15ee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15f2:	0f 92       	push	r0
    15f4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15f8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15fc:	0f 92       	push	r0
    15fe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1602:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1606:	0f 92       	push	r0
    1608:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    160c:	2f 93       	push	r18
    160e:	3f 93       	push	r19
    1610:	4f 93       	push	r20
    1612:	5f 93       	push	r21
    1614:	6f 93       	push	r22
    1616:	7f 93       	push	r23
    1618:	8f 93       	push	r24
    161a:	9f 93       	push	r25
    161c:	af 93       	push	r26
    161e:	bf 93       	push	r27
    1620:	ef 93       	push	r30
    1622:	ff 93       	push	r31
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    162c:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <tc_tce0_err_callback>
    1630:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <tc_tce0_err_callback+0x1>
    1634:	89 2b       	or	r24, r25
    1636:	31 f0       	breq	.+12     	; 0x1644 <__vector_48+0x6c>
		tc_tce0_err_callback();
    1638:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <tc_tce0_err_callback>
    163c:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <tc_tce0_err_callback+0x1>
    1640:	fc 01       	movw	r30, r24
    1642:	19 95       	eicall
	}
}
    1644:	00 00       	nop
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	ff 91       	pop	r31
    164c:	ef 91       	pop	r30
    164e:	bf 91       	pop	r27
    1650:	af 91       	pop	r26
    1652:	9f 91       	pop	r25
    1654:	8f 91       	pop	r24
    1656:	7f 91       	pop	r23
    1658:	6f 91       	pop	r22
    165a:	5f 91       	pop	r21
    165c:	4f 91       	pop	r20
    165e:	3f 91       	pop	r19
    1660:	2f 91       	pop	r18
    1662:	0f 90       	pop	r0
    1664:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1668:	0f 90       	pop	r0
    166a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    166e:	0f 90       	pop	r0
    1670:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1674:	0f 90       	pop	r0
    1676:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    167a:	0f 90       	pop	r0
    167c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1696:	0f 92       	push	r0
    1698:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    169c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    16a0:	0f 92       	push	r0
    16a2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    16a6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16aa:	0f 92       	push	r0
    16ac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16b0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16b4:	0f 92       	push	r0
    16b6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16ba:	2f 93       	push	r18
    16bc:	3f 93       	push	r19
    16be:	4f 93       	push	r20
    16c0:	5f 93       	push	r21
    16c2:	6f 93       	push	r22
    16c4:	7f 93       	push	r23
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	af 93       	push	r26
    16cc:	bf 93       	push	r27
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    16da:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <tc_tce0_cca_callback>
    16de:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <tc_tce0_cca_callback+0x1>
    16e2:	89 2b       	or	r24, r25
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    16e6:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <tc_tce0_cca_callback>
    16ea:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <tc_tce0_cca_callback+0x1>
    16ee:	fc 01       	movw	r30, r24
    16f0:	19 95       	eicall
	}
}
    16f2:	00 00       	nop
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	ff 91       	pop	r31
    16fa:	ef 91       	pop	r30
    16fc:	bf 91       	pop	r27
    16fe:	af 91       	pop	r26
    1700:	9f 91       	pop	r25
    1702:	8f 91       	pop	r24
    1704:	7f 91       	pop	r23
    1706:	6f 91       	pop	r22
    1708:	5f 91       	pop	r21
    170a:	4f 91       	pop	r20
    170c:	3f 91       	pop	r19
    170e:	2f 91       	pop	r18
    1710:	0f 90       	pop	r0
    1712:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1716:	0f 90       	pop	r0
    1718:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    171c:	0f 90       	pop	r0
    171e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1722:	0f 90       	pop	r0
    1724:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1728:	0f 90       	pop	r0
    172a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    172e:	0f 90       	pop	r0
    1730:	1f 90       	pop	r1
    1732:	18 95       	reti

00001734 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    173c:	0f 92       	push	r0
    173e:	11 24       	eor	r1, r1
    1740:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1744:	0f 92       	push	r0
    1746:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    174a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    174e:	0f 92       	push	r0
    1750:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1754:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1758:	0f 92       	push	r0
    175a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    175e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1762:	0f 92       	push	r0
    1764:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    1788:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <tc_tce0_ccb_callback>
    178c:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <tc_tce0_ccb_callback+0x1>
    1790:	89 2b       	or	r24, r25
    1792:	31 f0       	breq	.+12     	; 0x17a0 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    1794:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <tc_tce0_ccb_callback>
    1798:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <tc_tce0_ccb_callback+0x1>
    179c:	fc 01       	movw	r30, r24
    179e:	19 95       	eicall
	}
}
    17a0:	00 00       	nop
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	0f 90       	pop	r0
    17c0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    17c4:	0f 90       	pop	r0
    17c6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17ca:	0f 90       	pop	r0
    17cc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17d0:	0f 90       	pop	r0
    17d2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17d6:	0f 90       	pop	r0
    17d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17f2:	0f 92       	push	r0
    17f4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17f8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17fc:	0f 92       	push	r0
    17fe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1802:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1806:	0f 92       	push	r0
    1808:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    180c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1810:	0f 92       	push	r0
    1812:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    1836:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <tc_tce0_ccc_callback>
    183a:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <tc_tce0_ccc_callback+0x1>
    183e:	89 2b       	or	r24, r25
    1840:	31 f0       	breq	.+12     	; 0x184e <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    1842:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <tc_tce0_ccc_callback>
    1846:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <tc_tce0_ccc_callback+0x1>
    184a:	fc 01       	movw	r30, r24
    184c:	19 95       	eicall
	}
}
    184e:	00 00       	nop
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1872:	0f 90       	pop	r0
    1874:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1878:	0f 90       	pop	r0
    187a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    187e:	0f 90       	pop	r0
    1880:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1884:	0f 90       	pop	r0
    1886:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    18a0:	0f 92       	push	r0
    18a2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    18a6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18aa:	0f 92       	push	r0
    18ac:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18b0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18b4:	0f 92       	push	r0
    18b6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18ba:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18be:	0f 92       	push	r0
    18c0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    18e4:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <tc_tce0_ccd_callback>
    18e8:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <tc_tce0_ccd_callback+0x1>
    18ec:	89 2b       	or	r24, r25
    18ee:	31 f0       	breq	.+12     	; 0x18fc <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    18f0:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <tc_tce0_ccd_callback>
    18f4:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <tc_tce0_ccd_callback+0x1>
    18f8:	fc 01       	movw	r30, r24
    18fa:	19 95       	eicall
	}
}
    18fc:	00 00       	nop
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1920:	0f 90       	pop	r0
    1922:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1926:	0f 90       	pop	r0
    1928:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    192c:	0f 90       	pop	r0
    192e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1932:	0f 90       	pop	r0
    1934:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
    194a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    194e:	0f 92       	push	r0
    1950:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1954:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1958:	0f 92       	push	r0
    195a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    195e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1962:	0f 92       	push	r0
    1964:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1968:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    196c:	0f 92       	push	r0
    196e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    1992:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <tc_tce1_ovf_callback>
    1996:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <tc_tce1_ovf_callback+0x1>
    199a:	89 2b       	or	r24, r25
    199c:	31 f0       	breq	.+12     	; 0x19aa <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    199e:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <tc_tce1_ovf_callback>
    19a2:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <tc_tce1_ovf_callback+0x1>
    19a6:	fc 01       	movw	r30, r24
    19a8:	19 95       	eicall
	}
}
    19aa:	00 00       	nop
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	ff 91       	pop	r31
    19b2:	ef 91       	pop	r30
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	9f 91       	pop	r25
    19ba:	8f 91       	pop	r24
    19bc:	7f 91       	pop	r23
    19be:	6f 91       	pop	r22
    19c0:	5f 91       	pop	r21
    19c2:	4f 91       	pop	r20
    19c4:	3f 91       	pop	r19
    19c6:	2f 91       	pop	r18
    19c8:	0f 90       	pop	r0
    19ca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19ce:	0f 90       	pop	r0
    19d0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19d4:	0f 90       	pop	r0
    19d6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19da:	0f 90       	pop	r0
    19dc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19e0:	0f 90       	pop	r0
    19e2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19f4:	0f 92       	push	r0
    19f6:	11 24       	eor	r1, r1
    19f8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19fc:	0f 92       	push	r0
    19fe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a02:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a06:	0f 92       	push	r0
    1a08:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a0c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a10:	0f 92       	push	r0
    1a12:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a16:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a1a:	0f 92       	push	r0
    1a1c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    1a40:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <tc_tce1_err_callback>
    1a44:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <tc_tce1_err_callback+0x1>
    1a48:	89 2b       	or	r24, r25
    1a4a:	31 f0       	breq	.+12     	; 0x1a58 <__vector_54+0x6c>
		tc_tce1_err_callback();
    1a4c:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <tc_tce1_err_callback>
    1a50:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <tc_tce1_err_callback+0x1>
    1a54:	fc 01       	movw	r30, r24
    1a56:	19 95       	eicall
	}
}
    1a58:	00 00       	nop
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a7c:	0f 90       	pop	r0
    1a7e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a82:	0f 90       	pop	r0
    1a84:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a88:	0f 90       	pop	r0
    1a8a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a8e:	0f 90       	pop	r0
    1a90:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1aa2:	0f 92       	push	r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1aaa:	0f 92       	push	r0
    1aac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ab0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ab4:	0f 92       	push	r0
    1ab6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1aba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1abe:	0f 92       	push	r0
    1ac0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ac4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ac8:	0f 92       	push	r0
    1aca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    1aee:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <tc_tce1_cca_callback>
    1af2:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <tc_tce1_cca_callback+0x1>
    1af6:	89 2b       	or	r24, r25
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <__vector_55+0x6c>
		tc_tce1_cca_callback();
    1afa:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <tc_tce1_cca_callback>
    1afe:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <tc_tce1_cca_callback+0x1>
    1b02:	fc 01       	movw	r30, r24
    1b04:	19 95       	eicall
	}
}
    1b06:	00 00       	nop
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b2a:	0f 90       	pop	r0
    1b2c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b30:	0f 90       	pop	r0
    1b32:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b36:	0f 90       	pop	r0
    1b38:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b3c:	0f 90       	pop	r0
    1b3e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1b48:	1f 92       	push	r1
    1b4a:	0f 92       	push	r0
    1b4c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b50:	0f 92       	push	r0
    1b52:	11 24       	eor	r1, r1
    1b54:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b58:	0f 92       	push	r0
    1b5a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b5e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b62:	0f 92       	push	r0
    1b64:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b68:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b6c:	0f 92       	push	r0
    1b6e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b72:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b76:	0f 92       	push	r0
    1b78:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    1b9c:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <tc_tce1_ccb_callback>
    1ba0:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <tc_tce1_ccb_callback+0x1>
    1ba4:	89 2b       	or	r24, r25
    1ba6:	31 f0       	breq	.+12     	; 0x1bb4 <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    1ba8:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <tc_tce1_ccb_callback>
    1bac:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <tc_tce1_ccb_callback+0x1>
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	19 95       	eicall
	}
}
    1bb4:	00 00       	nop
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1bd8:	0f 90       	pop	r0
    1bda:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bde:	0f 90       	pop	r0
    1be0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1be4:	0f 90       	pop	r0
    1be6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bea:	0f 90       	pop	r0
    1bec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bf0:	0f 90       	pop	r0
    1bf2:	1f 90       	pop	r1
    1bf4:	18 95       	reti

00001bf6 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c06:	0f 92       	push	r0
    1c08:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c0c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c10:	0f 92       	push	r0
    1c12:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c16:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c1a:	0f 92       	push	r0
    1c1c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c20:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c24:	0f 92       	push	r0
    1c26:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c2a:	2f 93       	push	r18
    1c2c:	3f 93       	push	r19
    1c2e:	4f 93       	push	r20
    1c30:	5f 93       	push	r21
    1c32:	6f 93       	push	r22
    1c34:	7f 93       	push	r23
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	af 93       	push	r26
    1c3c:	bf 93       	push	r27
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    1c4a:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <tc_tcf0_ovf_callback>
    1c4e:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <tc_tcf0_ovf_callback+0x1>
    1c52:	89 2b       	or	r24, r25
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    1c56:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <tc_tcf0_ovf_callback>
    1c5a:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <tc_tcf0_ovf_callback+0x1>
    1c5e:	fc 01       	movw	r30, r24
    1c60:	19 95       	eicall
	}
}
    1c62:	00 00       	nop
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c86:	0f 90       	pop	r0
    1c88:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c8c:	0f 90       	pop	r0
    1c8e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c92:	0f 90       	pop	r0
    1c94:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c98:	0f 90       	pop	r0
    1c9a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 90       	pop	r1
    1ca2:	18 95       	reti

00001ca4 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cb4:	0f 92       	push	r0
    1cb6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cba:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cbe:	0f 92       	push	r0
    1cc0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cc4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1cc8:	0f 92       	push	r0
    1cca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1cce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cd2:	0f 92       	push	r0
    1cd4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cd8:	2f 93       	push	r18
    1cda:	3f 93       	push	r19
    1cdc:	4f 93       	push	r20
    1cde:	5f 93       	push	r21
    1ce0:	6f 93       	push	r22
    1ce2:	7f 93       	push	r23
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	ef 93       	push	r30
    1cee:	ff 93       	push	r31
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    1cf8:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcf0_err_callback>
    1cfc:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcf0_err_callback+0x1>
    1d00:	89 2b       	or	r24, r25
    1d02:	31 f0       	breq	.+12     	; 0x1d10 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    1d04:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcf0_err_callback>
    1d08:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcf0_err_callback+0x1>
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	19 95       	eicall
	}
}
    1d10:	00 00       	nop
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	ff 91       	pop	r31
    1d18:	ef 91       	pop	r30
    1d1a:	bf 91       	pop	r27
    1d1c:	af 91       	pop	r26
    1d1e:	9f 91       	pop	r25
    1d20:	8f 91       	pop	r24
    1d22:	7f 91       	pop	r23
    1d24:	6f 91       	pop	r22
    1d26:	5f 91       	pop	r21
    1d28:	4f 91       	pop	r20
    1d2a:	3f 91       	pop	r19
    1d2c:	2f 91       	pop	r18
    1d2e:	0f 90       	pop	r0
    1d30:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d34:	0f 90       	pop	r0
    1d36:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d3a:	0f 90       	pop	r0
    1d3c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d40:	0f 90       	pop	r0
    1d42:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d46:	0f 90       	pop	r0
    1d48:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d62:	0f 92       	push	r0
    1d64:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d68:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d6c:	0f 92       	push	r0
    1d6e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d72:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d76:	0f 92       	push	r0
    1d78:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d7c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d80:	0f 92       	push	r0
    1d82:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    1da6:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcf0_cca_callback>
    1daa:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcf0_cca_callback+0x1>
    1dae:	89 2b       	or	r24, r25
    1db0:	31 f0       	breq	.+12     	; 0x1dbe <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    1db2:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcf0_cca_callback>
    1db6:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcf0_cca_callback+0x1>
    1dba:	fc 01       	movw	r30, r24
    1dbc:	19 95       	eicall
	}
}
    1dbe:	00 00       	nop
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	ff 91       	pop	r31
    1dc6:	ef 91       	pop	r30
    1dc8:	bf 91       	pop	r27
    1dca:	af 91       	pop	r26
    1dcc:	9f 91       	pop	r25
    1dce:	8f 91       	pop	r24
    1dd0:	7f 91       	pop	r23
    1dd2:	6f 91       	pop	r22
    1dd4:	5f 91       	pop	r21
    1dd6:	4f 91       	pop	r20
    1dd8:	3f 91       	pop	r19
    1dda:	2f 91       	pop	r18
    1ddc:	0f 90       	pop	r0
    1dde:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1de2:	0f 90       	pop	r0
    1de4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1de8:	0f 90       	pop	r0
    1dea:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1dee:	0f 90       	pop	r0
    1df0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1df4:	0f 90       	pop	r0
    1df6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1dfa:	0f 90       	pop	r0
    1dfc:	1f 90       	pop	r1
    1dfe:	18 95       	reti

00001e00 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1e00:	1f 92       	push	r1
    1e02:	0f 92       	push	r0
    1e04:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e08:	0f 92       	push	r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e10:	0f 92       	push	r0
    1e12:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e16:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e1a:	0f 92       	push	r0
    1e1c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e20:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e24:	0f 92       	push	r0
    1e26:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e2a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e2e:	0f 92       	push	r0
    1e30:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    1e54:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcf0_ccb_callback>
    1e58:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcf0_ccb_callback+0x1>
    1e5c:	89 2b       	or	r24, r25
    1e5e:	31 f0       	breq	.+12     	; 0x1e6c <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    1e60:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcf0_ccb_callback>
    1e64:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcf0_ccb_callback+0x1>
    1e68:	fc 01       	movw	r30, r24
    1e6a:	19 95       	eicall
	}
}
    1e6c:	00 00       	nop
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	bf 91       	pop	r27
    1e78:	af 91       	pop	r26
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	7f 91       	pop	r23
    1e80:	6f 91       	pop	r22
    1e82:	5f 91       	pop	r21
    1e84:	4f 91       	pop	r20
    1e86:	3f 91       	pop	r19
    1e88:	2f 91       	pop	r18
    1e8a:	0f 90       	pop	r0
    1e8c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e90:	0f 90       	pop	r0
    1e92:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e96:	0f 90       	pop	r0
    1e98:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e9c:	0f 90       	pop	r0
    1e9e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ea2:	0f 90       	pop	r0
    1ea4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ebe:	0f 92       	push	r0
    1ec0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ec4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ec8:	0f 92       	push	r0
    1eca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ece:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ed2:	0f 92       	push	r0
    1ed4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ed8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1edc:	0f 92       	push	r0
    1ede:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ee2:	2f 93       	push	r18
    1ee4:	3f 93       	push	r19
    1ee6:	4f 93       	push	r20
    1ee8:	5f 93       	push	r21
    1eea:	6f 93       	push	r22
    1eec:	7f 93       	push	r23
    1eee:	8f 93       	push	r24
    1ef0:	9f 93       	push	r25
    1ef2:	af 93       	push	r26
    1ef4:	bf 93       	push	r27
    1ef6:	ef 93       	push	r30
    1ef8:	ff 93       	push	r31
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    1f02:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcf0_ccc_callback>
    1f06:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcf0_ccc_callback+0x1>
    1f0a:	89 2b       	or	r24, r25
    1f0c:	31 f0       	breq	.+12     	; 0x1f1a <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    1f0e:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcf0_ccc_callback>
    1f12:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcf0_ccc_callback+0x1>
    1f16:	fc 01       	movw	r30, r24
    1f18:	19 95       	eicall
	}
}
    1f1a:	00 00       	nop
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	ff 91       	pop	r31
    1f22:	ef 91       	pop	r30
    1f24:	bf 91       	pop	r27
    1f26:	af 91       	pop	r26
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	7f 91       	pop	r23
    1f2e:	6f 91       	pop	r22
    1f30:	5f 91       	pop	r21
    1f32:	4f 91       	pop	r20
    1f34:	3f 91       	pop	r19
    1f36:	2f 91       	pop	r18
    1f38:	0f 90       	pop	r0
    1f3a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f3e:	0f 90       	pop	r0
    1f40:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f44:	0f 90       	pop	r0
    1f46:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f4a:	0f 90       	pop	r0
    1f4c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f50:	0f 90       	pop	r0
    1f52:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f64:	0f 92       	push	r0
    1f66:	11 24       	eor	r1, r1
    1f68:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f6c:	0f 92       	push	r0
    1f6e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f72:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f76:	0f 92       	push	r0
    1f78:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f7c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f80:	0f 92       	push	r0
    1f82:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f86:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f8a:	0f 92       	push	r0
    1f8c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f90:	2f 93       	push	r18
    1f92:	3f 93       	push	r19
    1f94:	4f 93       	push	r20
    1f96:	5f 93       	push	r21
    1f98:	6f 93       	push	r22
    1f9a:	7f 93       	push	r23
    1f9c:	8f 93       	push	r24
    1f9e:	9f 93       	push	r25
    1fa0:	af 93       	push	r26
    1fa2:	bf 93       	push	r27
    1fa4:	ef 93       	push	r30
    1fa6:	ff 93       	push	r31
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    1fb0:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcf0_ccd_callback>
    1fb4:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcf0_ccd_callback+0x1>
    1fb8:	89 2b       	or	r24, r25
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    1fbc:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcf0_ccd_callback>
    1fc0:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcf0_ccd_callback+0x1>
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	19 95       	eicall
	}
}
    1fc8:	00 00       	nop
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	7f 91       	pop	r23
    1fdc:	6f 91       	pop	r22
    1fde:	5f 91       	pop	r21
    1fe0:	4f 91       	pop	r20
    1fe2:	3f 91       	pop	r19
    1fe4:	2f 91       	pop	r18
    1fe6:	0f 90       	pop	r0
    1fe8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1fec:	0f 90       	pop	r0
    1fee:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ff2:	0f 90       	pop	r0
    1ff4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ff8:	0f 90       	pop	r0
    1ffa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ffe:	0f 90       	pop	r0
    2000:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2004:	0f 90       	pop	r0
    2006:	1f 90       	pop	r1
    2008:	18 95       	reti

0000200a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    200a:	1f 92       	push	r1
    200c:	0f 92       	push	r0
    200e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    201a:	0f 92       	push	r0
    201c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2020:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2024:	0f 92       	push	r0
    2026:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    202a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    202e:	0f 92       	push	r0
    2030:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2034:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2038:	0f 92       	push	r0
    203a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    203e:	2f 93       	push	r18
    2040:	3f 93       	push	r19
    2042:	4f 93       	push	r20
    2044:	5f 93       	push	r21
    2046:	6f 93       	push	r22
    2048:	7f 93       	push	r23
    204a:	8f 93       	push	r24
    204c:	9f 93       	push	r25
    204e:	af 93       	push	r26
    2050:	bf 93       	push	r27
    2052:	ef 93       	push	r30
    2054:	ff 93       	push	r31
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    205e:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcf1_ovf_callback>
    2062:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcf1_ovf_callback+0x1>
    2066:	89 2b       	or	r24, r25
    2068:	31 f0       	breq	.+12     	; 0x2076 <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    206a:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcf1_ovf_callback>
    206e:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcf1_ovf_callback+0x1>
    2072:	fc 01       	movw	r30, r24
    2074:	19 95       	eicall
	}
}
    2076:	00 00       	nop
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	ff 91       	pop	r31
    207e:	ef 91       	pop	r30
    2080:	bf 91       	pop	r27
    2082:	af 91       	pop	r26
    2084:	9f 91       	pop	r25
    2086:	8f 91       	pop	r24
    2088:	7f 91       	pop	r23
    208a:	6f 91       	pop	r22
    208c:	5f 91       	pop	r21
    208e:	4f 91       	pop	r20
    2090:	3f 91       	pop	r19
    2092:	2f 91       	pop	r18
    2094:	0f 90       	pop	r0
    2096:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    209a:	0f 90       	pop	r0
    209c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20a0:	0f 90       	pop	r0
    20a2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20a6:	0f 90       	pop	r0
    20a8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20ac:	0f 90       	pop	r0
    20ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    20b8:	1f 92       	push	r1
    20ba:	0f 92       	push	r0
    20bc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20c8:	0f 92       	push	r0
    20ca:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20ce:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20d2:	0f 92       	push	r0
    20d4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20d8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20dc:	0f 92       	push	r0
    20de:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20e6:	0f 92       	push	r0
    20e8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20ec:	2f 93       	push	r18
    20ee:	3f 93       	push	r19
    20f0:	4f 93       	push	r20
    20f2:	5f 93       	push	r21
    20f4:	6f 93       	push	r22
    20f6:	7f 93       	push	r23
    20f8:	8f 93       	push	r24
    20fa:	9f 93       	push	r25
    20fc:	af 93       	push	r26
    20fe:	bf 93       	push	r27
    2100:	ef 93       	push	r30
    2102:	ff 93       	push	r31
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    210c:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcf1_err_callback>
    2110:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcf1_err_callback+0x1>
    2114:	89 2b       	or	r24, r25
    2116:	31 f0       	breq	.+12     	; 0x2124 <__vector_115+0x6c>
		tc_tcf1_err_callback();
    2118:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcf1_err_callback>
    211c:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcf1_err_callback+0x1>
    2120:	fc 01       	movw	r30, r24
    2122:	19 95       	eicall
	}
}
    2124:	00 00       	nop
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	ff 91       	pop	r31
    212c:	ef 91       	pop	r30
    212e:	bf 91       	pop	r27
    2130:	af 91       	pop	r26
    2132:	9f 91       	pop	r25
    2134:	8f 91       	pop	r24
    2136:	7f 91       	pop	r23
    2138:	6f 91       	pop	r22
    213a:	5f 91       	pop	r21
    213c:	4f 91       	pop	r20
    213e:	3f 91       	pop	r19
    2140:	2f 91       	pop	r18
    2142:	0f 90       	pop	r0
    2144:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2148:	0f 90       	pop	r0
    214a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    214e:	0f 90       	pop	r0
    2150:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2154:	0f 90       	pop	r0
    2156:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    215a:	0f 90       	pop	r0
    215c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2160:	0f 90       	pop	r0
    2162:	1f 90       	pop	r1
    2164:	18 95       	reti

00002166 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    2166:	1f 92       	push	r1
    2168:	0f 92       	push	r0
    216a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    216e:	0f 92       	push	r0
    2170:	11 24       	eor	r1, r1
    2172:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2176:	0f 92       	push	r0
    2178:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    217c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2180:	0f 92       	push	r0
    2182:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2186:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    218a:	0f 92       	push	r0
    218c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2190:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2194:	0f 92       	push	r0
    2196:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    219a:	2f 93       	push	r18
    219c:	3f 93       	push	r19
    219e:	4f 93       	push	r20
    21a0:	5f 93       	push	r21
    21a2:	6f 93       	push	r22
    21a4:	7f 93       	push	r23
    21a6:	8f 93       	push	r24
    21a8:	9f 93       	push	r25
    21aa:	af 93       	push	r26
    21ac:	bf 93       	push	r27
    21ae:	ef 93       	push	r30
    21b0:	ff 93       	push	r31
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    21ba:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcf1_cca_callback>
    21be:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcf1_cca_callback+0x1>
    21c2:	89 2b       	or	r24, r25
    21c4:	31 f0       	breq	.+12     	; 0x21d2 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    21c6:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcf1_cca_callback>
    21ca:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcf1_cca_callback+0x1>
    21ce:	fc 01       	movw	r30, r24
    21d0:	19 95       	eicall
	}
}
    21d2:	00 00       	nop
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	ff 91       	pop	r31
    21da:	ef 91       	pop	r30
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	9f 91       	pop	r25
    21e2:	8f 91       	pop	r24
    21e4:	7f 91       	pop	r23
    21e6:	6f 91       	pop	r22
    21e8:	5f 91       	pop	r21
    21ea:	4f 91       	pop	r20
    21ec:	3f 91       	pop	r19
    21ee:	2f 91       	pop	r18
    21f0:	0f 90       	pop	r0
    21f2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21f6:	0f 90       	pop	r0
    21f8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    21fc:	0f 90       	pop	r0
    21fe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2202:	0f 90       	pop	r0
    2204:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2208:	0f 90       	pop	r0
    220a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    220e:	0f 90       	pop	r0
    2210:	1f 90       	pop	r1
    2212:	18 95       	reti

00002214 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    221c:	0f 92       	push	r0
    221e:	11 24       	eor	r1, r1
    2220:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2224:	0f 92       	push	r0
    2226:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    222a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    222e:	0f 92       	push	r0
    2230:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2234:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2238:	0f 92       	push	r0
    223a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    223e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2242:	0f 92       	push	r0
    2244:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2248:	2f 93       	push	r18
    224a:	3f 93       	push	r19
    224c:	4f 93       	push	r20
    224e:	5f 93       	push	r21
    2250:	6f 93       	push	r22
    2252:	7f 93       	push	r23
    2254:	8f 93       	push	r24
    2256:	9f 93       	push	r25
    2258:	af 93       	push	r26
    225a:	bf 93       	push	r27
    225c:	ef 93       	push	r30
    225e:	ff 93       	push	r31
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    2268:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcf1_ccb_callback>
    226c:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcf1_ccb_callback+0x1>
    2270:	89 2b       	or	r24, r25
    2272:	31 f0       	breq	.+12     	; 0x2280 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    2274:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcf1_ccb_callback>
    2278:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcf1_ccb_callback+0x1>
    227c:	fc 01       	movw	r30, r24
    227e:	19 95       	eicall
	}
}
    2280:	00 00       	nop
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	ff 91       	pop	r31
    2288:	ef 91       	pop	r30
    228a:	bf 91       	pop	r27
    228c:	af 91       	pop	r26
    228e:	9f 91       	pop	r25
    2290:	8f 91       	pop	r24
    2292:	7f 91       	pop	r23
    2294:	6f 91       	pop	r22
    2296:	5f 91       	pop	r21
    2298:	4f 91       	pop	r20
    229a:	3f 91       	pop	r19
    229c:	2f 91       	pop	r18
    229e:	0f 90       	pop	r0
    22a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22a4:	0f 90       	pop	r0
    22a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22aa:	0f 90       	pop	r0
    22ac:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22b0:	0f 90       	pop	r0
    22b2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22b6:	0f 90       	pop	r0
    22b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22bc:	0f 90       	pop	r0
    22be:	1f 90       	pop	r1
    22c0:	18 95       	reti

000022c2 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	1f 92       	push	r1
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    22cc:	8f e3       	ldi	r24, 0x3F	; 63
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	fc 01       	movw	r30, r24
    22d2:	80 81       	ld	r24, Z
    22d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    22d6:	f8 94       	cli
	return flags;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22da:	0f 90       	pop	r0
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	1f 92       	push	r1
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    22ee:	8f e3       	ldi	r24, 0x3F	; 63
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	29 81       	ldd	r18, Y+1	; 0x01
    22f4:	fc 01       	movw	r30, r24
    22f6:	20 83       	st	Z, r18
}
    22f8:	00 00       	nop
    22fa:	0f 90       	pop	r0
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	08 95       	ret

00002302 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    2302:	1f 92       	push	r1
    2304:	0f 92       	push	r0
    2306:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    230a:	0f 92       	push	r0
    230c:	11 24       	eor	r1, r1
    230e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2312:	0f 92       	push	r0
    2314:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2318:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    231c:	0f 92       	push	r0
    231e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2322:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2326:	0f 92       	push	r0
    2328:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    232c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2330:	0f 92       	push	r0
    2332:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2336:	2f 93       	push	r18
    2338:	3f 93       	push	r19
    233a:	4f 93       	push	r20
    233c:	5f 93       	push	r21
    233e:	6f 93       	push	r22
    2340:	7f 93       	push	r23
    2342:	8f 93       	push	r24
    2344:	9f 93       	push	r25
    2346:	af 93       	push	r26
    2348:	bf 93       	push	r27
    234a:	ef 93       	push	r30
    234c:	ff 93       	push	r31
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	43 d2       	rcall	.+1158   	; 0x27de <twim_interrupt_handler>
    2358:	00 00       	nop
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	7f 91       	pop	r23
    236c:	6f 91       	pop	r22
    236e:	5f 91       	pop	r21
    2370:	4f 91       	pop	r20
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	0f 90       	pop	r0
    2378:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    237c:	0f 90       	pop	r0
    237e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2382:	0f 90       	pop	r0
    2384:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2388:	0f 90       	pop	r0
    238a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    238e:	0f 90       	pop	r0
    2390:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

0000239a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    23a2:	0f 92       	push	r0
    23a4:	11 24       	eor	r1, r1
    23a6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    23aa:	0f 92       	push	r0
    23ac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    23b0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23b4:	0f 92       	push	r0
    23b6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23ba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23be:	0f 92       	push	r0
    23c0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23c4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23c8:	0f 92       	push	r0
    23ca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23ce:	2f 93       	push	r18
    23d0:	3f 93       	push	r19
    23d2:	4f 93       	push	r20
    23d4:	5f 93       	push	r21
    23d6:	6f 93       	push	r22
    23d8:	7f 93       	push	r23
    23da:	8f 93       	push	r24
    23dc:	9f 93       	push	r25
    23de:	af 93       	push	r26
    23e0:	bf 93       	push	r27
    23e2:	ef 93       	push	r30
    23e4:	ff 93       	push	r31
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	f7 d1       	rcall	.+1006   	; 0x27de <twim_interrupt_handler>
    23f0:	00 00       	nop
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	ff 91       	pop	r31
    23f8:	ef 91       	pop	r30
    23fa:	bf 91       	pop	r27
    23fc:	af 91       	pop	r26
    23fe:	9f 91       	pop	r25
    2400:	8f 91       	pop	r24
    2402:	7f 91       	pop	r23
    2404:	6f 91       	pop	r22
    2406:	5f 91       	pop	r21
    2408:	4f 91       	pop	r20
    240a:	3f 91       	pop	r19
    240c:	2f 91       	pop	r18
    240e:	0f 90       	pop	r0
    2410:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2414:	0f 90       	pop	r0
    2416:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    241a:	0f 90       	pop	r0
    241c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2420:	0f 90       	pop	r0
    2422:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2426:	0f 90       	pop	r0
    2428:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    242c:	0f 90       	pop	r0
    242e:	1f 90       	pop	r1
    2430:	18 95       	reti

00002432 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    2432:	1f 92       	push	r1
    2434:	0f 92       	push	r0
    2436:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    243a:	0f 92       	push	r0
    243c:	11 24       	eor	r1, r1
    243e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2442:	0f 92       	push	r0
    2444:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2448:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    244c:	0f 92       	push	r0
    244e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2452:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2456:	0f 92       	push	r0
    2458:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    245c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2460:	0f 92       	push	r0
    2462:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	ab d1       	rcall	.+854    	; 0x27de <twim_interrupt_handler>
    2488:	00 00       	nop
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	ff 91       	pop	r31
    2490:	ef 91       	pop	r30
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	0f 90       	pop	r0
    24a8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24ac:	0f 90       	pop	r0
    24ae:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24b2:	0f 90       	pop	r0
    24b4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24b8:	0f 90       	pop	r0
    24ba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24be:	0f 90       	pop	r0
    24c0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24c4:	0f 90       	pop	r0
    24c6:	1f 90       	pop	r1
    24c8:	18 95       	reti

000024ca <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    24ca:	1f 92       	push	r1
    24cc:	0f 92       	push	r0
    24ce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24da:	0f 92       	push	r0
    24dc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24e0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24e4:	0f 92       	push	r0
    24e6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24ea:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24ee:	0f 92       	push	r0
    24f0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24f4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24f8:	0f 92       	push	r0
    24fa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24fe:	2f 93       	push	r18
    2500:	3f 93       	push	r19
    2502:	4f 93       	push	r20
    2504:	5f 93       	push	r21
    2506:	6f 93       	push	r22
    2508:	7f 93       	push	r23
    250a:	8f 93       	push	r24
    250c:	9f 93       	push	r25
    250e:	af 93       	push	r26
    2510:	bf 93       	push	r27
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	5f d1       	rcall	.+702    	; 0x27de <twim_interrupt_handler>
    2520:	00 00       	nop
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2544:	0f 90       	pop	r0
    2546:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    254a:	0f 90       	pop	r0
    254c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2550:	0f 90       	pop	r0
    2552:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2556:	0f 90       	pop	r0
    2558:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	1f 92       	push	r1
    2568:	1f 92       	push	r1
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	fc 01       	movw	r30, r24
    2578:	84 81       	ldd	r24, Z+4	; 0x04
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	83 70       	andi	r24, 0x03	; 3
    2580:	99 27       	eor	r25, r25
    2582:	21 e0       	ldi	r18, 0x01	; 1
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	09 f0       	breq	.+2      	; 0x258a <twim_idle+0x28>
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	08 95       	ret

00002596 <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	1f 92       	push	r1
    259c:	1f 92       	push	r1
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	88 23       	and	r24, r24
    25aa:	11 f0       	breq	.+4      	; 0x25b0 <twim_acquire+0x1a>
    25ac:	86 ef       	ldi	r24, 0xF6	; 246
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    25b0:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <transfer+0x9>
    25b4:	88 23       	and	r24, r24
    25b6:	b9 f7       	brne	.-18     	; 0x25a6 <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    25b8:	84 de       	rcall	.-760    	; 0x22c2 <cpu_irq_save>
    25ba:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    25c2:	80 e8       	ldi	r24, 0x80	; 128
    25c4:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <transfer+0xa>

	cpu_irq_restore (flags);
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	8b de       	rcall	.-746    	; 0x22e2 <cpu_irq_restore>

	return STATUS_OK;
    25cc:	80 e0       	ldi	r24, 0x00	; 0
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    25d8:	cf 93       	push	r28
    25da:	df 93       	push	r29
    25dc:	1f 92       	push	r1
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    25e2:	00 00       	nop
    25e4:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <transfer+0xa>
    25e8:	80 38       	cpi	r24, 0x80	; 128
    25ea:	e1 f3       	breq	.-8      	; 0x25e4 <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    25ec:	00 c0       	rjmp	.+0      	; 0x25ee <twim_release+0x16>
    25ee:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    25f2:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    25f6:	b5 df       	rcall	.-150    	; 0x2562 <twim_idle>
    25f8:	98 2f       	mov	r25, r24
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	89 27       	eor	r24, r25
    25fe:	88 23       	and	r24, r24
    2600:	b1 f7       	brne	.-20     	; 0x25ee <twim_release+0x16>

	status_code_t const status = transfer.status;
    2602:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <transfer+0xa>
    2606:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    2608:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <transfer+0x9>

	return status;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
}
    260e:	0f 90       	pop	r0
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	08 95       	ret

00002616 <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	28 97       	sbiw	r28, 0x08	; 8
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    2624:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    2628:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    2630:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <transfer+0x2>
    2634:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <transfer+0x3>
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    263c:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <transfer+0x4>
    2640:	30 91 8d 20 	lds	r19, 0x208D	; 0x80208d <transfer+0x5>
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	fc 01       	movw	r30, r24
    264a:	84 81       	ldd	r24, Z+4	; 0x04
    264c:	95 81       	ldd	r25, Z+5	; 0x05
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	e4 f4       	brge	.+56     	; 0x268c <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	01 96       	adiw	r24, 0x01	; 1
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    265e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <transfer+0x4>
    2662:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <transfer+0x5>
    2666:	9c 01       	movw	r18, r24
    2668:	2f 5f       	subi	r18, 0xFF	; 255
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	20 93 8c 20 	sts	0x208C, r18	; 0x80208c <transfer+0x4>
    2670:	30 93 8d 20 	sts	0x208D, r19	; 0x80208d <transfer+0x5>
    2674:	9c 01       	movw	r18, r24
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	fc 01       	movw	r30, r24
    2680:	20 81       	ld	r18, Z
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	fc 01       	movw	r30, r24
    2688:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    268a:	3f c0       	rjmp	.+126    	; 0x270a <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    268c:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <transfer+0x6>
    2690:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <transfer+0x7>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	fc 01       	movw	r30, r24
    269a:	80 85       	ldd	r24, Z+8	; 0x08
    269c:	91 85       	ldd	r25, Z+9	; 0x09
    269e:	28 17       	cp	r18, r24
    26a0:	39 07       	cpc	r19, r25
    26a2:	60 f5       	brcc	.+88     	; 0x26fc <twim_write_handler+0xe6>

		if (transfer.read) {
    26a4:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <transfer+0x8>
    26a8:	88 23       	and	r24, r24
    26aa:	59 f0       	breq	.+22     	; 0x26c2 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	fc 01       	movw	r30, r24
    26b2:	86 81       	ldd	r24, Z+6	; 0x06
    26b4:	28 2f       	mov	r18, r24
    26b6:	21 60       	ori	r18, 0x01	; 1
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	fc 01       	movw	r30, r24
    26be:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    26c0:	24 c0       	rjmp	.+72     	; 0x270a <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	fc 01       	movw	r30, r24
    26c8:	86 81       	ldd	r24, Z+6	; 0x06
    26ca:	97 81       	ldd	r25, Z+7	; 0x07
    26cc:	8f 83       	std	Y+7, r24	; 0x07
    26ce:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    26d0:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <transfer+0x6>
    26d4:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <transfer+0x7>
    26d8:	9c 01       	movw	r18, r24
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	20 93 8e 20 	sts	0x208E, r18	; 0x80208e <transfer+0x6>
    26e2:	30 93 8f 20 	sts	0x208F, r19	; 0x80208f <transfer+0x7>
    26e6:	2f 81       	ldd	r18, Y+7	; 0x07
    26e8:	38 85       	ldd	r19, Y+8	; 0x08
    26ea:	82 0f       	add	r24, r18
    26ec:	93 1f       	adc	r25, r19
    26ee:	fc 01       	movw	r30, r24
    26f0:	20 81       	ld	r18, Z
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	fc 01       	movw	r30, r24
    26f8:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    26fa:	07 c0       	rjmp	.+14     	; 0x270a <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	23 e0       	ldi	r18, 0x03	; 3
    2702:	fc 01       	movw	r30, r24
    2704:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    2706:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <transfer+0xa>
	}
}
    270a:	00 00       	nop
    270c:	28 96       	adiw	r28, 0x08	; 8
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	00 d0       	rcall	.+0      	; 0x271e <twim_read_handler+0x6>
    271e:	00 d0       	rcall	.+0      	; 0x2720 <twim_read_handler+0x8>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    2724:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    2728:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    2730:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <transfer+0x2>
    2734:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <transfer+0x3>
    2738:	8b 83       	std	Y+3, r24	; 0x03
    273a:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    273c:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <transfer+0x6>
    2740:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <transfer+0x7>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	fc 01       	movw	r30, r24
    274a:	80 85       	ldd	r24, Z+8	; 0x08
    274c:	91 85       	ldd	r25, Z+9	; 0x09
    274e:	28 17       	cp	r18, r24
    2750:	39 07       	cpc	r19, r25
    2752:	b0 f5       	brcc	.+108    	; 0x27c0 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	fc 01       	movw	r30, r24
    275a:	86 81       	ldd	r24, Z+6	; 0x06
    275c:	97 81       	ldd	r25, Z+7	; 0x07
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    2762:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <transfer+0x6>
    2766:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <transfer+0x7>
    276a:	9c 01       	movw	r18, r24
    276c:	2f 5f       	subi	r18, 0xFF	; 255
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	20 93 8e 20 	sts	0x208E, r18	; 0x80208e <transfer+0x6>
    2774:	30 93 8f 20 	sts	0x208F, r19	; 0x80208f <transfer+0x7>
    2778:	2d 81       	ldd	r18, Y+5	; 0x05
    277a:	3e 81       	ldd	r19, Y+6	; 0x06
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	29 81       	ldd	r18, Y+1	; 0x01
    2782:	3a 81       	ldd	r19, Y+2	; 0x02
    2784:	f9 01       	movw	r30, r18
    2786:	27 81       	ldd	r18, Z+7	; 0x07
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    278c:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <transfer+0x6>
    2790:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <transfer+0x7>
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	fc 01       	movw	r30, r24
    279a:	80 85       	ldd	r24, Z+8	; 0x08
    279c:	91 85       	ldd	r25, Z+9	; 0x09
    279e:	28 17       	cp	r18, r24
    27a0:	39 07       	cpc	r19, r25
    27a2:	30 f4       	brcc	.+12     	; 0x27b0 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	22 e0       	ldi	r18, 0x02	; 2
    27aa:	fc 01       	movw	r30, r24
    27ac:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	27 e0       	ldi	r18, 0x07	; 7
    27b6:	fc 01       	movw	r30, r24
    27b8:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    27ba:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    27be:	08 c0       	rjmp	.+16     	; 0x27d0 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	23 e0       	ldi	r18, 0x03	; 3
    27c6:	fc 01       	movw	r30, r24
    27c8:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    27ca:	89 ef       	ldi	r24, 0xF9	; 249
    27cc:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <transfer+0xa>
	}
}
    27d0:	00 00       	nop
    27d2:	26 96       	adiw	r28, 0x06	; 6
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	08 95       	ret

000027de <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	1f 92       	push	r1
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    27e8:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    27ec:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    27f0:	fc 01       	movw	r30, r24
    27f2:	84 81       	ldd	r24, Z+4	; 0x04
    27f4:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	88 70       	andi	r24, 0x08	; 8
    27fe:	99 27       	eor	r25, r25
    2800:	89 2b       	or	r24, r25
    2802:	99 f0       	breq	.+38     	; 0x282a <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    2804:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    2808:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    280c:	29 81       	ldd	r18, Y+1	; 0x01
    280e:	28 60       	ori	r18, 0x08	; 8
    2810:	fc 01       	movw	r30, r24
    2812:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    2814:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    2818:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    281c:	23 e0       	ldi	r18, 0x03	; 3
    281e:	fc 01       	movw	r30, r24
    2820:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    2822:	86 ef       	ldi	r24, 0xF6	; 246
    2824:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    2828:	2a c0       	rjmp	.+84     	; 0x287e <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	84 70       	andi	r24, 0x04	; 4
    2832:	99 27       	eor	r25, r25
    2834:	89 2b       	or	r24, r25
    2836:	39 f4       	brne	.+14     	; 0x2846 <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	80 71       	andi	r24, 0x10	; 16
    2840:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    2842:	89 2b       	or	r24, r25
    2844:	59 f0       	breq	.+22     	; 0x285c <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2846:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    284a:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    284e:	23 e0       	ldi	r18, 0x03	; 3
    2850:	fc 01       	movw	r30, r24
    2852:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    285a:	11 c0       	rjmp	.+34     	; 0x287e <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	80 74       	andi	r24, 0x40	; 64
    2864:	99 27       	eor	r25, r25
    2866:	89 2b       	or	r24, r25
    2868:	11 f0       	breq	.+4      	; 0x286e <twim_interrupt_handler+0x90>

		twim_write_handler();
    286a:	d5 de       	rcall	.-598    	; 0x2616 <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    286c:	08 c0       	rjmp	.+16     	; 0x287e <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	88 23       	and	r24, r24

		twim_read_handler();
    2872:	14 f4       	brge	.+4      	; 0x2878 <twim_interrupt_handler+0x9a>
    2874:	51 df       	rcall	.-350    	; 0x2718 <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    2876:	03 c0       	rjmp	.+6      	; 0x287e <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    2878:	8b ef       	ldi	r24, 0xFB	; 251
    287a:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <transfer+0xa>
	}
}
    287e:	00 00       	nop
    2880:	0f 90       	pop	r0
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	25 97       	sbiw	r28, 0x05	; 5
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	8a 83       	std	Y+2, r24	; 0x02
    2898:	9b 83       	std	Y+3, r25	; 0x03
    289a:	6c 83       	std	Y+4, r22	; 0x04
    289c:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    289e:	88 eb       	ldi	r24, 0xB8	; 184
    28a0:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	9d 81       	ldd	r25, Y+5	; 0x05
    28a6:	fc 01       	movw	r30, r24
    28a8:	84 81       	ldd	r24, Z+4	; 0x04
    28aa:	95 81       	ldd	r25, Z+5	; 0x05
    28ac:	a6 81       	ldd	r26, Z+6	; 0x06
    28ae:	b7 81       	ldd	r27, Z+7	; 0x07
    28b0:	28 2f       	mov	r18, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
    28b6:	fc 01       	movw	r30, r24
    28b8:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	29 81       	ldd	r18, Y+1	; 0x01
    28c0:	fc 01       	movw	r30, r24
    28c2:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	9b 81       	ldd	r25, Y+3	; 0x03
    28c8:	21 e0       	ldi	r18, 0x01	; 1
    28ca:	fc 01       	movw	r30, r24
    28cc:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    28ce:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <transfer+0x9>
	transfer.status    = STATUS_OK;
    28d2:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    28d6:	80 ea       	ldi	r24, 0xA0	; 160
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	20 ea       	ldi	r18, 0xA0	; 160
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	f9 01       	movw	r30, r18
    28e0:	22 81       	ldd	r18, Z+2	; 0x02
    28e2:	22 60       	ori	r18, 0x02	; 2
    28e4:	fc 01       	movw	r30, r24
    28e6:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    28e8:	78 94       	sei

	return STATUS_OK;
    28ea:	80 e0       	ldi	r24, 0x00	; 0
}
    28ec:	25 96       	adiw	r28, 0x05	; 5
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	27 97       	sbiw	r28, 0x07	; 7
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	8b 83       	std	Y+3, r24	; 0x03
    2908:	9c 83       	std	Y+4, r25	; 0x04
    290a:	6d 83       	std	Y+5, r22	; 0x05
    290c:	7e 83       	std	Y+6, r23	; 0x06
    290e:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	9c 81       	ldd	r25, Y+4	; 0x04
    2914:	89 2b       	or	r24, r25
    2916:	21 f0       	breq	.+8      	; 0x2920 <twi_master_transfer+0x28>
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	89 2b       	or	r24, r25
    291e:	11 f4       	brne	.+4      	; 0x2924 <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    2920:	88 ef       	ldi	r24, 0xF8	; 248
    2922:	49 c0       	rjmp	.+146    	; 0x29b6 <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	fc 01       	movw	r30, r24
    292a:	82 85       	ldd	r24, Z+10	; 0x0a
    292c:	34 de       	rcall	.-920    	; 0x2596 <twim_acquire>
    292e:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	88 23       	and	r24, r24
    2934:	09 f0       	breq	.+2      	; 0x2938 <twi_master_transfer+0x40>
    2936:	3e c0       	rjmp	.+124    	; 0x29b4 <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <transfer>
    2940:	90 93 89 20 	sts	0x2089, r25	; 0x802089 <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <transfer+0x2>
    294c:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <transfer+0x3>
		transfer.addr_count  = 0;
    2950:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <transfer+0x4>
    2954:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <transfer+0x5>
		transfer.data_count  = 0;
    2958:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <transfer+0x6>
    295c:	10 92 8f 20 	sts	0x208F, r1	; 0x80208f <transfer+0x7>
		transfer.read        = read;
    2960:	8f 81       	ldd	r24, Y+7	; 0x07
    2962:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	fc 01       	movw	r30, r24
    296c:	80 81       	ld	r24, Z
    296e:	88 0f       	add	r24, r24
    2970:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	fc 01       	movw	r30, r24
    2978:	84 81       	ldd	r24, Z+4	; 0x04
    297a:	95 81       	ldd	r25, Z+5	; 0x05
    297c:	89 2b       	or	r24, r25
    297e:	29 f4       	brne	.+10     	; 0x298a <twi_master_transfer+0x92>
    2980:	9f 81       	ldd	r25, Y+7	; 0x07
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	89 27       	eor	r24, r25
    2986:	88 23       	and	r24, r24
    2988:	41 f0       	breq	.+16     	; 0x299a <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    298a:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    298e:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    2992:	2a 81       	ldd	r18, Y+2	; 0x02
    2994:	fc 01       	movw	r30, r24
    2996:	26 83       	std	Z+6, r18	; 0x06
    2998:	0b c0       	rjmp	.+22     	; 0x29b0 <twi_master_transfer+0xb8>
		} else if (read) {
    299a:	8f 81       	ldd	r24, Y+7	; 0x07
    299c:	88 23       	and	r24, r24
    299e:	41 f0       	breq	.+16     	; 0x29b0 <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    29a0:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <transfer>
    29a4:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <transfer+0x1>
    29a8:	2a 81       	ldd	r18, Y+2	; 0x02
    29aa:	21 60       	ori	r18, 0x01	; 1
    29ac:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    29ae:	26 83       	std	Z+6, r18	; 0x06
    29b0:	13 de       	rcall	.-986    	; 0x25d8 <twim_release>
    29b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29b6:	27 96       	adiw	r28, 0x07	; 7
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	08 95       	ret

000029c2 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	1f 92       	push	r1
    29c8:	1f 92       	push	r1
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	9a 81       	ldd	r25, Y+2	; 0x02
    29d6:	fc 01       	movw	r30, r24
    29d8:	84 81       	ldd	r24, Z+4	; 0x04
    29da:	28 2f       	mov	r18, r24
    29dc:	20 61       	ori	r18, 0x10	; 16
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	fc 01       	movw	r30, r24
    29e4:	24 83       	std	Z+4, r18	; 0x04
    29e6:	00 00       	nop
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <usart_format_set>:
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	25 97       	sbiw	r28, 0x05	; 5
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	6b 83       	std	Y+3, r22	; 0x03
    2a06:	4c 83       	std	Y+4, r20	; 0x04
    2a08:	2d 83       	std	Y+5, r18	; 0x05
    2a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	89 2b       	or	r24, r25
    2a10:	98 2f       	mov	r25, r24
    2a12:	8d 81       	ldd	r24, Y+5	; 0x05
    2a14:	88 23       	and	r24, r24
    2a16:	11 f0       	breq	.+4      	; 0x2a1c <usart_format_set+0x2a>
    2a18:	88 e0       	ldi	r24, 0x08	; 8
    2a1a:	01 c0       	rjmp	.+2      	; 0x2a1e <usart_format_set+0x2c>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	89 2b       	or	r24, r25
    2a20:	28 2f       	mov	r18, r24
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	fc 01       	movw	r30, r24
    2a28:	25 83       	std	Z+5, r18	; 0x05
    2a2a:	00 00       	nop
    2a2c:	25 96       	adiw	r28, 0x05	; 5
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	08 95       	ret

00002a38 <usart_tx_enable>:
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	1f 92       	push	r1
    2a3e:	1f 92       	push	r1
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	84 81       	ldd	r24, Z+4	; 0x04
    2a50:	28 2f       	mov	r18, r24
    2a52:	28 60       	ori	r18, 0x08	; 8
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	fc 01       	movw	r30, r24
    2a5a:	24 83       	std	Z+4, r18	; 0x04
    2a5c:	00 00       	nop
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <usart_set_mode>:
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <usart_set_mode+0x6>
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	6b 83       	std	Y+3, r22	; 0x03
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	85 81       	ldd	r24, Z+5	; 0x05
    2a80:	98 2f       	mov	r25, r24
    2a82:	9f 73       	andi	r25, 0x3F	; 63
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	89 2b       	or	r24, r25
    2a88:	28 2f       	mov	r18, r24
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	fc 01       	movw	r30, r24
    2a90:	25 83       	std	Z+5, r18	; 0x05
    2a92:	00 00       	nop
    2a94:	23 96       	adiw	r28, 0x03	; 3
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	08 95       	ret

00002aa0 <usart_data_register_is_empty>:
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	1f 92       	push	r1
    2aa6:	1f 92       	push	r1
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	81 81       	ldd	r24, Z+1	; 0x01
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	80 72       	andi	r24, 0x20	; 32
    2abe:	99 27       	eor	r25, r25
    2ac0:	21 e0       	ldi	r18, 0x01	; 1
    2ac2:	89 2b       	or	r24, r25
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <usart_data_register_is_empty+0x28>
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	82 2f       	mov	r24, r18
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <usart_rx_is_complete>:
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	1f 92       	push	r1
    2ada:	1f 92       	push	r1
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	fc 01       	movw	r30, r24
    2aea:	81 81       	ldd	r24, Z+1	; 0x01
    2aec:	88 2f       	mov	r24, r24
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	80 78       	andi	r24, 0x80	; 128
    2af2:	99 27       	eor	r25, r25
    2af4:	21 e0       	ldi	r18, 0x01	; 1
    2af6:	89 2b       	or	r24, r25
    2af8:	09 f4       	brne	.+2      	; 0x2afc <usart_rx_is_complete+0x28>
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	82 2f       	mov	r24, r18
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	08 95       	ret

00002b08 <sysclk_get_main_hz>:
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	98 e4       	ldi	r25, 0x48	; 72
    2b14:	a8 ee       	ldi	r26, 0xE8	; 232
    2b16:	b1 e0       	ldi	r27, 0x01	; 1
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <sysclk_get_per4_hz>:
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	1f 92       	push	r1
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	19 82       	std	Y+1, r1	; 0x01
    2b2e:	ec df       	rcall	.-40     	; 0x2b08 <sysclk_get_main_hz>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	29 81       	ldd	r18, Y+1	; 0x01
    2b36:	22 2f       	mov	r18, r18
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	04 c0       	rjmp	.+8      	; 0x2b44 <sysclk_get_per4_hz+0x22>
    2b3c:	b6 95       	lsr	r27
    2b3e:	a7 95       	ror	r26
    2b40:	97 95       	ror	r25
    2b42:	87 95       	ror	r24
    2b44:	2a 95       	dec	r18
    2b46:	d2 f7       	brpl	.-12     	; 0x2b3c <sysclk_get_per4_hz+0x1a>
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0f 90       	pop	r0
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	08 95       	ret

00002b54 <sysclk_get_per2_hz>:
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	e2 df       	rcall	.-60     	; 0x2b22 <sysclk_get_per4_hz>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <sysclk_get_per_hz>:
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	ef df       	rcall	.-34     	; 0x2b54 <sysclk_get_per2_hz>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	08 95       	ret

00002b84 <sysclk_enable_peripheral_clock>:
    2b84:	cf 93       	push	r28
    2b86:	df 93       	push	r29
    2b88:	1f 92       	push	r1
    2b8a:	1f 92       	push	r1
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	9a 81       	ldd	r25, Y+2	; 0x02
    2b98:	89 2b       	or	r24, r25
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <sysclk_enable_peripheral_clock+0x1a>
    2b9c:	85 c1       	rjmp	.+778    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	80 3c       	cpi	r24, 0xC0	; 192
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	29 f4       	brne	.+10     	; 0x2bb2 <sysclk_enable_peripheral_clock+0x2e>
    2ba8:	60 e1       	ldi	r22, 0x10	; 16
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2bb0:	7b c1       	rjmp	.+758    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	80 34       	cpi	r24, 0x40	; 64
    2bb8:	94 40       	sbci	r25, 0x04	; 4
    2bba:	29 f4       	brne	.+10     	; 0x2bc6 <sysclk_enable_peripheral_clock+0x42>
    2bbc:	68 e0       	ldi	r22, 0x08	; 8
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2bc4:	71 c1       	rjmp	.+738    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	81 15       	cp	r24, r1
    2bcc:	94 40       	sbci	r25, 0x04	; 4
    2bce:	29 f4       	brne	.+10     	; 0x2bda <sysclk_enable_peripheral_clock+0x56>
    2bd0:	64 e0       	ldi	r22, 0x04	; 4
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2bd8:	67 c1       	rjmp	.+718    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	80 38       	cpi	r24, 0x80	; 128
    2be0:	91 40       	sbci	r25, 0x01	; 1
    2be2:	29 f4       	brne	.+10     	; 0x2bee <sysclk_enable_peripheral_clock+0x6a>
    2be4:	62 e0       	ldi	r22, 0x02	; 2
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2bec:	5d c1       	rjmp	.+698    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf2:	81 15       	cp	r24, r1
    2bf4:	91 40       	sbci	r25, 0x01	; 1
    2bf6:	29 f4       	brne	.+10     	; 0x2c02 <sysclk_enable_peripheral_clock+0x7e>
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c00:	53 c1       	rjmp	.+678    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	80 38       	cpi	r24, 0x80	; 128
    2c08:	93 40       	sbci	r25, 0x03	; 3
    2c0a:	29 f4       	brne	.+10     	; 0x2c16 <sysclk_enable_peripheral_clock+0x92>
    2c0c:	61 e0       	ldi	r22, 0x01	; 1
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c14:	49 c1       	rjmp	.+658    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	80 39       	cpi	r24, 0x90	; 144
    2c1c:	93 40       	sbci	r25, 0x03	; 3
    2c1e:	29 f4       	brne	.+10     	; 0x2c2a <sysclk_enable_peripheral_clock+0xa6>
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c28:	3f c1       	rjmp	.+638    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2e:	81 15       	cp	r24, r1
    2c30:	92 40       	sbci	r25, 0x02	; 2
    2c32:	29 f4       	brne	.+10     	; 0x2c3e <sysclk_enable_peripheral_clock+0xba>
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c3c:	35 c1       	rjmp	.+618    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	80 34       	cpi	r24, 0x40	; 64
    2c44:	92 40       	sbci	r25, 0x02	; 2
    2c46:	29 f4       	brne	.+10     	; 0x2c52 <sysclk_enable_peripheral_clock+0xce>
    2c48:	62 e0       	ldi	r22, 0x02	; 2
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c50:	2b c1       	rjmp	.+598    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	81 15       	cp	r24, r1
    2c58:	93 40       	sbci	r25, 0x03	; 3
    2c5a:	29 f4       	brne	.+10     	; 0x2c66 <sysclk_enable_peripheral_clock+0xe2>
    2c5c:	64 e0       	ldi	r22, 0x04	; 4
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c64:	21 c1       	rjmp	.+578    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6a:	80 32       	cpi	r24, 0x20	; 32
    2c6c:	93 40       	sbci	r25, 0x03	; 3
    2c6e:	29 f4       	brne	.+10     	; 0x2c7a <sysclk_enable_peripheral_clock+0xf6>
    2c70:	64 e0       	ldi	r22, 0x04	; 4
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c78:	17 c1       	rjmp	.+558    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	81 15       	cp	r24, r1
    2c80:	98 40       	sbci	r25, 0x08	; 8
    2c82:	29 f4       	brne	.+10     	; 0x2c8e <sysclk_enable_peripheral_clock+0x10a>
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	83 e0       	ldi	r24, 0x03	; 3
    2c88:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2c8c:	0d c1       	rjmp	.+538    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	81 15       	cp	r24, r1
    2c94:	99 40       	sbci	r25, 0x09	; 9
    2c96:	29 f4       	brne	.+10     	; 0x2ca2 <sysclk_enable_peripheral_clock+0x11e>
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	84 e0       	ldi	r24, 0x04	; 4
    2c9c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2ca0:	03 c1       	rjmp	.+518    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	81 15       	cp	r24, r1
    2ca8:	9a 40       	sbci	r25, 0x0A	; 10
    2caa:	29 f4       	brne	.+10     	; 0x2cb6 <sysclk_enable_peripheral_clock+0x132>
    2cac:	61 e0       	ldi	r22, 0x01	; 1
    2cae:	85 e0       	ldi	r24, 0x05	; 5
    2cb0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2cb4:	f9 c0       	rjmp	.+498    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	81 15       	cp	r24, r1
    2cbc:	9b 40       	sbci	r25, 0x0B	; 11
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <sysclk_enable_peripheral_clock+0x146>
    2cc0:	61 e0       	ldi	r22, 0x01	; 1
    2cc2:	86 e0       	ldi	r24, 0x06	; 6
    2cc4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2cc8:	ef c0       	rjmp	.+478    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	80 34       	cpi	r24, 0x40	; 64
    2cd0:	98 40       	sbci	r25, 0x08	; 8
    2cd2:	29 f4       	brne	.+10     	; 0x2cde <sysclk_enable_peripheral_clock+0x15a>
    2cd4:	62 e0       	ldi	r22, 0x02	; 2
    2cd6:	83 e0       	ldi	r24, 0x03	; 3
    2cd8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2cdc:	e5 c0       	rjmp	.+458    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	80 34       	cpi	r24, 0x40	; 64
    2ce4:	99 40       	sbci	r25, 0x09	; 9
    2ce6:	29 f4       	brne	.+10     	; 0x2cf2 <sysclk_enable_peripheral_clock+0x16e>
    2ce8:	62 e0       	ldi	r22, 0x02	; 2
    2cea:	84 e0       	ldi	r24, 0x04	; 4
    2cec:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2cf0:	db c0       	rjmp	.+438    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	80 34       	cpi	r24, 0x40	; 64
    2cf8:	9a 40       	sbci	r25, 0x0A	; 10
    2cfa:	29 f4       	brne	.+10     	; 0x2d06 <sysclk_enable_peripheral_clock+0x182>
    2cfc:	62 e0       	ldi	r22, 0x02	; 2
    2cfe:	85 e0       	ldi	r24, 0x05	; 5
    2d00:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d04:	d1 c0       	rjmp	.+418    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	80 34       	cpi	r24, 0x40	; 64
    2d0c:	9b 40       	sbci	r25, 0x0B	; 11
    2d0e:	29 f4       	brne	.+10     	; 0x2d1a <sysclk_enable_peripheral_clock+0x196>
    2d10:	62 e0       	ldi	r22, 0x02	; 2
    2d12:	86 e0       	ldi	r24, 0x06	; 6
    2d14:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d18:	c7 c0       	rjmp	.+398    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	80 39       	cpi	r24, 0x90	; 144
    2d20:	98 40       	sbci	r25, 0x08	; 8
    2d22:	29 f4       	brne	.+10     	; 0x2d2e <sysclk_enable_peripheral_clock+0x1aa>
    2d24:	64 e0       	ldi	r22, 0x04	; 4
    2d26:	83 e0       	ldi	r24, 0x03	; 3
    2d28:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d2c:	bd c0       	rjmp	.+378    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	80 39       	cpi	r24, 0x90	; 144
    2d34:	99 40       	sbci	r25, 0x09	; 9
    2d36:	29 f4       	brne	.+10     	; 0x2d42 <sysclk_enable_peripheral_clock+0x1be>
    2d38:	64 e0       	ldi	r22, 0x04	; 4
    2d3a:	84 e0       	ldi	r24, 0x04	; 4
    2d3c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d40:	b3 c0       	rjmp	.+358    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	80 39       	cpi	r24, 0x90	; 144
    2d48:	9a 40       	sbci	r25, 0x0A	; 10
    2d4a:	29 f4       	brne	.+10     	; 0x2d56 <sysclk_enable_peripheral_clock+0x1d2>
    2d4c:	64 e0       	ldi	r22, 0x04	; 4
    2d4e:	85 e0       	ldi	r24, 0x05	; 5
    2d50:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d54:	a9 c0       	rjmp	.+338    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5a:	80 39       	cpi	r24, 0x90	; 144
    2d5c:	9b 40       	sbci	r25, 0x0B	; 11
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <sysclk_enable_peripheral_clock+0x1e6>
    2d60:	64 e0       	ldi	r22, 0x04	; 4
    2d62:	86 e0       	ldi	r24, 0x06	; 6
    2d64:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d68:	9f c0       	rjmp	.+318    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	80 3c       	cpi	r24, 0xC0	; 192
    2d70:	98 40       	sbci	r25, 0x08	; 8
    2d72:	29 f4       	brne	.+10     	; 0x2d7e <sysclk_enable_peripheral_clock+0x1fa>
    2d74:	68 e0       	ldi	r22, 0x08	; 8
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d7c:	95 c0       	rjmp	.+298    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	80 3c       	cpi	r24, 0xC0	; 192
    2d84:	99 40       	sbci	r25, 0x09	; 9
    2d86:	29 f4       	brne	.+10     	; 0x2d92 <sysclk_enable_peripheral_clock+0x20e>
    2d88:	68 e0       	ldi	r22, 0x08	; 8
    2d8a:	84 e0       	ldi	r24, 0x04	; 4
    2d8c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2d90:	8b c0       	rjmp	.+278    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	80 3c       	cpi	r24, 0xC0	; 192
    2d98:	9a 40       	sbci	r25, 0x0A	; 10
    2d9a:	29 f4       	brne	.+10     	; 0x2da6 <sysclk_enable_peripheral_clock+0x222>
    2d9c:	68 e0       	ldi	r22, 0x08	; 8
    2d9e:	85 e0       	ldi	r24, 0x05	; 5
    2da0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2da4:	81 c0       	rjmp	.+258    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	80 3c       	cpi	r24, 0xC0	; 192
    2dac:	9b 40       	sbci	r25, 0x0B	; 11
    2dae:	29 f4       	brne	.+10     	; 0x2dba <sysclk_enable_peripheral_clock+0x236>
    2db0:	68 e0       	ldi	r22, 0x08	; 8
    2db2:	86 e0       	ldi	r24, 0x06	; 6
    2db4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2db8:	77 c0       	rjmp	.+238    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	80 3a       	cpi	r24, 0xA0	; 160
    2dc0:	98 40       	sbci	r25, 0x08	; 8
    2dc2:	29 f4       	brne	.+10     	; 0x2dce <sysclk_enable_peripheral_clock+0x24a>
    2dc4:	60 e1       	ldi	r22, 0x10	; 16
    2dc6:	83 e0       	ldi	r24, 0x03	; 3
    2dc8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2dcc:	6d c0       	rjmp	.+218    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	80 3a       	cpi	r24, 0xA0	; 160
    2dd4:	99 40       	sbci	r25, 0x09	; 9
    2dd6:	29 f4       	brne	.+10     	; 0x2de2 <sysclk_enable_peripheral_clock+0x25e>
    2dd8:	60 e1       	ldi	r22, 0x10	; 16
    2dda:	84 e0       	ldi	r24, 0x04	; 4
    2ddc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2de0:	63 c0       	rjmp	.+198    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	80 3a       	cpi	r24, 0xA0	; 160
    2de8:	9a 40       	sbci	r25, 0x0A	; 10
    2dea:	29 f4       	brne	.+10     	; 0x2df6 <sysclk_enable_peripheral_clock+0x272>
    2dec:	60 e1       	ldi	r22, 0x10	; 16
    2dee:	85 e0       	ldi	r24, 0x05	; 5
    2df0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2df4:	59 c0       	rjmp	.+178    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfa:	80 3a       	cpi	r24, 0xA0	; 160
    2dfc:	9b 40       	sbci	r25, 0x0B	; 11
    2dfe:	29 f4       	brne	.+10     	; 0x2e0a <sysclk_enable_peripheral_clock+0x286>
    2e00:	60 e1       	ldi	r22, 0x10	; 16
    2e02:	86 e0       	ldi	r24, 0x06	; 6
    2e04:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e08:	4f c0       	rjmp	.+158    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	80 3b       	cpi	r24, 0xB0	; 176
    2e10:	98 40       	sbci	r25, 0x08	; 8
    2e12:	29 f4       	brne	.+10     	; 0x2e1e <sysclk_enable_peripheral_clock+0x29a>
    2e14:	60 e2       	ldi	r22, 0x20	; 32
    2e16:	83 e0       	ldi	r24, 0x03	; 3
    2e18:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e1c:	45 c0       	rjmp	.+138    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	80 3b       	cpi	r24, 0xB0	; 176
    2e24:	99 40       	sbci	r25, 0x09	; 9
    2e26:	29 f4       	brne	.+10     	; 0x2e32 <sysclk_enable_peripheral_clock+0x2ae>
    2e28:	60 e2       	ldi	r22, 0x20	; 32
    2e2a:	84 e0       	ldi	r24, 0x04	; 4
    2e2c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e30:	3b c0       	rjmp	.+118    	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	9a 81       	ldd	r25, Y+2	; 0x02
    2e36:	80 3b       	cpi	r24, 0xB0	; 176
    2e38:	9a 40       	sbci	r25, 0x0A	; 10
    2e3a:	29 f4       	brne	.+10     	; 0x2e46 <sysclk_enable_peripheral_clock+0x2c2>
    2e3c:	60 e2       	ldi	r22, 0x20	; 32
    2e3e:	85 e0       	ldi	r24, 0x05	; 5
    2e40:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e44:	31 c0       	rjmp	.+98     	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	80 3b       	cpi	r24, 0xB0	; 176
    2e4c:	9b 40       	sbci	r25, 0x0B	; 11
    2e4e:	29 f4       	brne	.+10     	; 0x2e5a <sysclk_enable_peripheral_clock+0x2d6>
    2e50:	60 e2       	ldi	r22, 0x20	; 32
    2e52:	86 e0       	ldi	r24, 0x06	; 6
    2e54:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e58:	27 c0       	rjmp	.+78     	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	80 38       	cpi	r24, 0x80	; 128
    2e60:	94 40       	sbci	r25, 0x04	; 4
    2e62:	29 f4       	brne	.+10     	; 0x2e6e <sysclk_enable_peripheral_clock+0x2ea>
    2e64:	60 e4       	ldi	r22, 0x40	; 64
    2e66:	83 e0       	ldi	r24, 0x03	; 3
    2e68:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e6c:	1d c0       	rjmp	.+58     	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	80 39       	cpi	r24, 0x90	; 144
    2e74:	94 40       	sbci	r25, 0x04	; 4
    2e76:	29 f4       	brne	.+10     	; 0x2e82 <sysclk_enable_peripheral_clock+0x2fe>
    2e78:	60 e4       	ldi	r22, 0x40	; 64
    2e7a:	84 e0       	ldi	r24, 0x04	; 4
    2e7c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e80:	13 c0       	rjmp	.+38     	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	80 3a       	cpi	r24, 0xA0	; 160
    2e88:	94 40       	sbci	r25, 0x04	; 4
    2e8a:	29 f4       	brne	.+10     	; 0x2e96 <sysclk_enable_peripheral_clock+0x312>
    2e8c:	60 e4       	ldi	r22, 0x40	; 64
    2e8e:	85 e0       	ldi	r24, 0x05	; 5
    2e90:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2e94:	09 c0       	rjmp	.+18     	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	80 3b       	cpi	r24, 0xB0	; 176
    2e9c:	94 40       	sbci	r25, 0x04	; 4
    2e9e:	21 f4       	brne	.+8      	; 0x2ea8 <sysclk_enable_peripheral_clock+0x324>
    2ea0:	60 e4       	ldi	r22, 0x40	; 64
    2ea2:	86 e0       	ldi	r24, 0x06	; 6
    2ea4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    2ea8:	00 00       	nop
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	08 95       	ret

00002eb4 <usart_init_rs232>:
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	25 97       	sbiw	r28, 0x05	; 5
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	8a 83       	std	Y+2, r24	; 0x02
    2ec8:	9b 83       	std	Y+3, r25	; 0x03
    2eca:	6c 83       	std	Y+4, r22	; 0x04
    2ecc:	7d 83       	std	Y+5, r23	; 0x05
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed2:	58 de       	rcall	.-848    	; 0x2b84 <sysclk_enable_peripheral_clock>
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	c6 dd       	rcall	.-1140   	; 0x2a68 <usart_set_mode>
    2edc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ede:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	26 81       	ldd	r18, Z+6	; 0x06
    2ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee8:	fc 01       	movw	r30, r24
    2eea:	45 81       	ldd	r20, Z+5	; 0x05
    2eec:	8c 81       	ldd	r24, Y+4	; 0x04
    2eee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	34 81       	ldd	r19, Z+4	; 0x04
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef8:	63 2f       	mov	r22, r19
    2efa:	7b dd       	rcall	.-1290   	; 0x29f2 <usart_format_set>
    2efc:	37 de       	rcall	.-914    	; 0x2b6c <sysclk_get_per_hz>
    2efe:	9b 01       	movw	r18, r22
    2f00:	ac 01       	movw	r20, r24
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	9d 81       	ldd	r25, Y+5	; 0x05
    2f06:	fc 01       	movw	r30, r24
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	a2 81       	ldd	r26, Z+2	; 0x02
    2f0e:	b3 81       	ldd	r27, Z+3	; 0x03
    2f10:	ea 81       	ldd	r30, Y+2	; 0x02
    2f12:	fb 81       	ldd	r31, Y+3	; 0x03
    2f14:	89 01       	movw	r16, r18
    2f16:	9a 01       	movw	r18, r20
    2f18:	ac 01       	movw	r20, r24
    2f1a:	bd 01       	movw	r22, r26
    2f1c:	cf 01       	movw	r24, r30
    2f1e:	48 d0       	rcall	.+144    	; 0x2fb0 <usart_set_baudrate>
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	9b 81       	ldd	r25, Y+3	; 0x03
    2f26:	88 dd       	rcall	.-1264   	; 0x2a38 <usart_tx_enable>
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2c:	4a dd       	rcall	.-1388   	; 0x29c2 <usart_rx_enable>
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	25 96       	adiw	r28, 0x05	; 5
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <usart_putchar>:
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <usart_putchar+0x6>
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	6b 83       	std	Y+3, r22	; 0x03
    2f50:	00 00       	nop
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	a4 dd       	rcall	.-1208   	; 0x2aa0 <usart_data_register_is_empty>
    2f58:	98 2f       	mov	r25, r24
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	89 27       	eor	r24, r25
    2f5e:	88 23       	and	r24, r24
    2f60:	c1 f7       	brne	.-16     	; 0x2f52 <usart_putchar+0x12>
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	2b 81       	ldd	r18, Y+3	; 0x03
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 83       	st	Z, r18
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	23 96       	adiw	r28, 0x03	; 3
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <usart_getchar>:
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	1f 92       	push	r1
    2f82:	1f 92       	push	r1
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	00 00       	nop
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	a0 dd       	rcall	.-1216   	; 0x2ad4 <usart_rx_is_complete>
    2f94:	98 2f       	mov	r25, r24
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	89 27       	eor	r24, r25
    2f9a:	88 23       	and	r24, r24
    2f9c:	c1 f7       	brne	.-16     	; 0x2f8e <usart_getchar+0x12>
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	80 81       	ld	r24, Z
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	08 95       	ret

00002fb0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	6f 97       	sbiw	r28, 0x1f	; 31
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	8e 8b       	std	Y+22, r24	; 0x16
    2fc8:	9f 8b       	std	Y+23, r25	; 0x17
    2fca:	48 8f       	std	Y+24, r20	; 0x18
    2fcc:	59 8f       	std	Y+25, r21	; 0x19
    2fce:	6a 8f       	std	Y+26, r22	; 0x1a
    2fd0:	7b 8f       	std	Y+27, r23	; 0x1b
    2fd2:	0c 8f       	std	Y+28, r16	; 0x1c
    2fd4:	1d 8f       	std	Y+29, r17	; 0x1d
    2fd6:	2e 8f       	std	Y+30, r18	; 0x1e
    2fd8:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2fda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fde:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2fe0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2fe2:	68 94       	set
    2fe4:	12 f8       	bld	r1, 2
    2fe6:	b6 95       	lsr	r27
    2fe8:	a7 95       	ror	r26
    2fea:	97 95       	ror	r25
    2fec:	87 95       	ror	r24
    2fee:	16 94       	lsr	r1
    2ff0:	d1 f7       	brne	.-12     	; 0x2fe6 <usart_set_baudrate+0x36>
    2ff2:	8e 87       	std	Y+14, r24	; 0x0e
    2ff4:	9f 87       	std	Y+15, r25	; 0x0f
    2ff6:	a8 8b       	std	Y+16, r26	; 0x10
    2ff8:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    2ffa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ffc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ffe:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3000:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3002:	07 2e       	mov	r0, r23
    3004:	76 e1       	ldi	r23, 0x16	; 22
    3006:	b6 95       	lsr	r27
    3008:	a7 95       	ror	r26
    300a:	97 95       	ror	r25
    300c:	87 95       	ror	r24
    300e:	7a 95       	dec	r23
    3010:	d1 f7       	brne	.-12     	; 0x3006 <usart_set_baudrate+0x56>
    3012:	70 2d       	mov	r23, r0
    3014:	8a 87       	std	Y+10, r24	; 0x0a
    3016:	9b 87       	std	Y+11, r25	; 0x0b
    3018:	ac 87       	std	Y+12, r26	; 0x0c
    301a:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    301c:	8e 89       	ldd	r24, Y+22	; 0x16
    301e:	9f 89       	ldd	r25, Y+23	; 0x17
    3020:	fc 01       	movw	r30, r24
    3022:	84 81       	ldd	r24, Z+4	; 0x04
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	84 70       	andi	r24, 0x04	; 4
    302a:	99 27       	eor	r25, r25
    302c:	89 2b       	or	r24, r25
    302e:	c1 f4       	brne	.+48     	; 0x3060 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    3030:	8e 85       	ldd	r24, Y+14	; 0x0e
    3032:	9f 85       	ldd	r25, Y+15	; 0x0f
    3034:	a8 89       	ldd	r26, Y+16	; 0x10
    3036:	b9 89       	ldd	r27, Y+17	; 0x11
    3038:	b6 95       	lsr	r27
    303a:	a7 95       	ror	r26
    303c:	97 95       	ror	r25
    303e:	87 95       	ror	r24
    3040:	8e 87       	std	Y+14, r24	; 0x0e
    3042:	9f 87       	std	Y+15, r25	; 0x0f
    3044:	a8 8b       	std	Y+16, r26	; 0x10
    3046:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    3048:	8a 85       	ldd	r24, Y+10	; 0x0a
    304a:	9b 85       	ldd	r25, Y+11	; 0x0b
    304c:	ac 85       	ldd	r26, Y+12	; 0x0c
    304e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3050:	b6 95       	lsr	r27
    3052:	a7 95       	ror	r26
    3054:	97 95       	ror	r25
    3056:	87 95       	ror	r24
    3058:	8a 87       	std	Y+10, r24	; 0x0a
    305a:	9b 87       	std	Y+11, r25	; 0x0b
    305c:	ac 87       	std	Y+12, r26	; 0x0c
    305e:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3060:	28 8d       	ldd	r18, Y+24	; 0x18
    3062:	39 8d       	ldd	r19, Y+25	; 0x19
    3064:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3066:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3068:	8e 85       	ldd	r24, Y+14	; 0x0e
    306a:	9f 85       	ldd	r25, Y+15	; 0x0f
    306c:	a8 89       	ldd	r26, Y+16	; 0x10
    306e:	b9 89       	ldd	r27, Y+17	; 0x11
    3070:	82 17       	cp	r24, r18
    3072:	93 07       	cpc	r25, r19
    3074:	a4 07       	cpc	r26, r20
    3076:	b5 07       	cpc	r27, r21
    3078:	68 f0       	brcs	.+26     	; 0x3094 <usart_set_baudrate+0xe4>
    307a:	28 8d       	ldd	r18, Y+24	; 0x18
    307c:	39 8d       	ldd	r19, Y+25	; 0x19
    307e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3080:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3082:	8a 85       	ldd	r24, Y+10	; 0x0a
    3084:	9b 85       	ldd	r25, Y+11	; 0x0b
    3086:	ac 85       	ldd	r26, Y+12	; 0x0c
    3088:	bd 85       	ldd	r27, Y+13	; 0x0d
    308a:	28 17       	cp	r18, r24
    308c:	39 07       	cpc	r19, r25
    308e:	4a 07       	cpc	r20, r26
    3090:	5b 07       	cpc	r21, r27
    3092:	10 f4       	brcc	.+4      	; 0x3098 <usart_set_baudrate+0xe8>
		return false;
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	40 c1       	rjmp	.+640    	; 0x3318 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3098:	8e 89       	ldd	r24, Y+22	; 0x16
    309a:	9f 89       	ldd	r25, Y+23	; 0x17
    309c:	fc 01       	movw	r30, r24
    309e:	84 81       	ldd	r24, Z+4	; 0x04
    30a0:	88 2f       	mov	r24, r24
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	84 70       	andi	r24, 0x04	; 4
    30a6:	99 27       	eor	r25, r25
    30a8:	89 2b       	or	r24, r25
    30aa:	61 f4       	brne	.+24     	; 0x30c4 <usart_set_baudrate+0x114>
		baud *= 2;
    30ac:	88 8d       	ldd	r24, Y+24	; 0x18
    30ae:	99 8d       	ldd	r25, Y+25	; 0x19
    30b0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    30b2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	aa 1f       	adc	r26, r26
    30ba:	bb 1f       	adc	r27, r27
    30bc:	88 8f       	std	Y+24, r24	; 0x18
    30be:	99 8f       	std	Y+25, r25	; 0x19
    30c0:	aa 8f       	std	Y+26, r26	; 0x1a
    30c2:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a0 e0       	ldi	r26, 0x00	; 0
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	8e 83       	std	Y+6, r24	; 0x06
    30ce:	9f 83       	std	Y+7, r25	; 0x07
    30d0:	a8 87       	std	Y+8, r26	; 0x08
    30d2:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    30d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30d8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    30da:	bf 8d       	ldd	r27, Y+31	; 0x1f
    30dc:	28 8d       	ldd	r18, Y+24	; 0x18
    30de:	39 8d       	ldd	r19, Y+25	; 0x19
    30e0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    30e2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 99 23 	call	0x4732	; 0x4732 <__udivmodsi4>
    30ec:	da 01       	movw	r26, r20
    30ee:	c9 01       	movw	r24, r18
    30f0:	8a 8b       	std	Y+18, r24	; 0x12
    30f2:	9b 8b       	std	Y+19, r25	; 0x13
    30f4:	ac 8b       	std	Y+20, r26	; 0x14
    30f6:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    30f8:	89 ef       	ldi	r24, 0xF9	; 249
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	28 c0       	rjmp	.+80     	; 0x314e <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    30fe:	2a 89       	ldd	r18, Y+18	; 0x12
    3100:	3b 89       	ldd	r19, Y+19	; 0x13
    3102:	4c 89       	ldd	r20, Y+20	; 0x14
    3104:	5d 89       	ldd	r21, Y+21	; 0x15
    3106:	8e 81       	ldd	r24, Y+6	; 0x06
    3108:	9f 81       	ldd	r25, Y+7	; 0x07
    310a:	a8 85       	ldd	r26, Y+8	; 0x08
    310c:	b9 85       	ldd	r27, Y+9	; 0x09
    310e:	28 17       	cp	r18, r24
    3110:	39 07       	cpc	r19, r25
    3112:	4a 07       	cpc	r20, r26
    3114:	5b 07       	cpc	r21, r27
    3116:	f8 f0       	brcs	.+62     	; 0x3156 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    3118:	8e 81       	ldd	r24, Y+6	; 0x06
    311a:	9f 81       	ldd	r25, Y+7	; 0x07
    311c:	a8 85       	ldd	r26, Y+8	; 0x08
    311e:	b9 85       	ldd	r27, Y+9	; 0x09
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	aa 1f       	adc	r26, r26
    3126:	bb 1f       	adc	r27, r27
    3128:	8e 83       	std	Y+6, r24	; 0x06
    312a:	9f 83       	std	Y+7, r25	; 0x07
    312c:	a8 87       	std	Y+8, r26	; 0x08
    312e:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	8d 3f       	cpi	r24, 0xFD	; 253
    3134:	4c f4       	brge	.+18     	; 0x3148 <usart_set_baudrate+0x198>
			limit |= 1;
    3136:	8e 81       	ldd	r24, Y+6	; 0x06
    3138:	9f 81       	ldd	r25, Y+7	; 0x07
    313a:	a8 85       	ldd	r26, Y+8	; 0x08
    313c:	b9 85       	ldd	r27, Y+9	; 0x09
    313e:	81 60       	ori	r24, 0x01	; 1
    3140:	8e 83       	std	Y+6, r24	; 0x06
    3142:	9f 83       	std	Y+7, r25	; 0x07
    3144:	a8 87       	std	Y+8, r26	; 0x08
    3146:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	8f 5f       	subi	r24, 0xFF	; 255
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	87 30       	cpi	r24, 0x07	; 7
    3152:	ac f2       	brlt	.-86     	; 0x30fe <usart_set_baudrate+0x14e>
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    3156:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	88 23       	and	r24, r24
    315c:	0c f0       	brlt	.+2      	; 0x3160 <usart_set_baudrate+0x1b0>
    315e:	8a c0       	rjmp	.+276    	; 0x3274 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3160:	88 8d       	ldd	r24, Y+24	; 0x18
    3162:	99 8d       	ldd	r25, Y+25	; 0x19
    3164:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3166:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	aa 1f       	adc	r26, r26
    316e:	bb 1f       	adc	r27, r27
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	aa 1f       	adc	r26, r26
    3176:	bb 1f       	adc	r27, r27
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	aa 1f       	adc	r26, r26
    317e:	bb 1f       	adc	r27, r27
    3180:	9c 01       	movw	r18, r24
    3182:	ad 01       	movw	r20, r26
    3184:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3186:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3188:	ae 8d       	ldd	r26, Y+30	; 0x1e
    318a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    318c:	82 1b       	sub	r24, r18
    318e:	93 0b       	sbc	r25, r19
    3190:	a4 0b       	sbc	r26, r20
    3192:	b5 0b       	sbc	r27, r21
    3194:	8c 8f       	std	Y+28, r24	; 0x1c
    3196:	9d 8f       	std	Y+29, r25	; 0x1d
    3198:	ae 8f       	std	Y+30, r26	; 0x1e
    319a:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	8e 3f       	cpi	r24, 0xFE	; 254
    31a0:	94 f5       	brge	.+100    	; 0x3206 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	08 2e       	mov	r0, r24
    31a6:	00 0c       	add	r0, r0
    31a8:	99 0b       	sbc	r25, r25
    31aa:	2d ef       	ldi	r18, 0xFD	; 253
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	28 1b       	sub	r18, r24
    31b0:	39 0b       	sbc	r19, r25
    31b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31b6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    31b8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    31ba:	7c 01       	movw	r14, r24
    31bc:	8d 01       	movw	r16, r26
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <usart_set_baudrate+0x218>
    31c0:	ee 0c       	add	r14, r14
    31c2:	ff 1c       	adc	r15, r15
    31c4:	00 1f       	adc	r16, r16
    31c6:	11 1f       	adc	r17, r17
    31c8:	2a 95       	dec	r18
    31ca:	d2 f7       	brpl	.-12     	; 0x31c0 <usart_set_baudrate+0x210>
    31cc:	a8 01       	movw	r20, r16
    31ce:	97 01       	movw	r18, r14
    31d0:	88 8d       	ldd	r24, Y+24	; 0x18
    31d2:	99 8d       	ldd	r25, Y+25	; 0x19
    31d4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    31d6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    31d8:	b6 95       	lsr	r27
    31da:	a7 95       	ror	r26
    31dc:	97 95       	ror	r25
    31de:	87 95       	ror	r24
    31e0:	82 0f       	add	r24, r18
    31e2:	93 1f       	adc	r25, r19
    31e4:	a4 1f       	adc	r26, r20
    31e6:	b5 1f       	adc	r27, r21
    31e8:	28 8d       	ldd	r18, Y+24	; 0x18
    31ea:	39 8d       	ldd	r19, Y+25	; 0x19
    31ec:	4a 8d       	ldd	r20, Y+26	; 0x1a
    31ee:	5b 8d       	ldd	r21, Y+27	; 0x1b
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	0e 94 99 23 	call	0x4732	; 0x4732 <__udivmodsi4>
    31f8:	da 01       	movw	r26, r20
    31fa:	c9 01       	movw	r24, r18
    31fc:	8a 83       	std	Y+2, r24	; 0x02
    31fe:	9b 83       	std	Y+3, r25	; 0x03
    3200:	ac 83       	std	Y+4, r26	; 0x04
    3202:	bd 83       	std	Y+5, r27	; 0x05
    3204:	70 c0       	rjmp	.+224    	; 0x32e6 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	08 2e       	mov	r0, r24
    320a:	00 0c       	add	r0, r0
    320c:	99 0b       	sbc	r25, r25
    320e:	9c 01       	movw	r18, r24
    3210:	2d 5f       	subi	r18, 0xFD	; 253
    3212:	3f 4f       	sbci	r19, 0xFF	; 255
    3214:	88 8d       	ldd	r24, Y+24	; 0x18
    3216:	99 8d       	ldd	r25, Y+25	; 0x19
    3218:	aa 8d       	ldd	r26, Y+26	; 0x1a
    321a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <usart_set_baudrate+0x276>
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	aa 1f       	adc	r26, r26
    3224:	bb 1f       	adc	r27, r27
    3226:	2a 95       	dec	r18
    3228:	d2 f7       	brpl	.-12     	; 0x321e <usart_set_baudrate+0x26e>
    322a:	88 8f       	std	Y+24, r24	; 0x18
    322c:	99 8f       	std	Y+25, r25	; 0x19
    322e:	aa 8f       	std	Y+26, r26	; 0x1a
    3230:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    3232:	88 8d       	ldd	r24, Y+24	; 0x18
    3234:	99 8d       	ldd	r25, Y+25	; 0x19
    3236:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3238:	bb 8d       	ldd	r27, Y+27	; 0x1b
    323a:	9c 01       	movw	r18, r24
    323c:	ad 01       	movw	r20, r26
    323e:	56 95       	lsr	r21
    3240:	47 95       	ror	r20
    3242:	37 95       	ror	r19
    3244:	27 95       	ror	r18
    3246:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3248:	9d 8d       	ldd	r25, Y+29	; 0x1d
    324a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    324c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    324e:	82 0f       	add	r24, r18
    3250:	93 1f       	adc	r25, r19
    3252:	a4 1f       	adc	r26, r20
    3254:	b5 1f       	adc	r27, r21
    3256:	28 8d       	ldd	r18, Y+24	; 0x18
    3258:	39 8d       	ldd	r19, Y+25	; 0x19
    325a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    325c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 99 23 	call	0x4732	; 0x4732 <__udivmodsi4>
    3266:	da 01       	movw	r26, r20
    3268:	c9 01       	movw	r24, r18
    326a:	8a 83       	std	Y+2, r24	; 0x02
    326c:	9b 83       	std	Y+3, r25	; 0x03
    326e:	ac 83       	std	Y+4, r26	; 0x04
    3270:	bd 83       	std	Y+5, r27	; 0x05
    3272:	39 c0       	rjmp	.+114    	; 0x32e6 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	08 2e       	mov	r0, r24
    3278:	00 0c       	add	r0, r0
    327a:	99 0b       	sbc	r25, r25
    327c:	9c 01       	movw	r18, r24
    327e:	2d 5f       	subi	r18, 0xFD	; 253
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	88 8d       	ldd	r24, Y+24	; 0x18
    3284:	99 8d       	ldd	r25, Y+25	; 0x19
    3286:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3288:	bb 8d       	ldd	r27, Y+27	; 0x1b
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <usart_set_baudrate+0x2e4>
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	aa 1f       	adc	r26, r26
    3292:	bb 1f       	adc	r27, r27
    3294:	2a 95       	dec	r18
    3296:	d2 f7       	brpl	.-12     	; 0x328c <usart_set_baudrate+0x2dc>
    3298:	88 8f       	std	Y+24, r24	; 0x18
    329a:	99 8f       	std	Y+25, r25	; 0x19
    329c:	aa 8f       	std	Y+26, r26	; 0x1a
    329e:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    32a0:	88 8d       	ldd	r24, Y+24	; 0x18
    32a2:	99 8d       	ldd	r25, Y+25	; 0x19
    32a4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    32a6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    32a8:	9c 01       	movw	r18, r24
    32aa:	ad 01       	movw	r20, r26
    32ac:	56 95       	lsr	r21
    32ae:	47 95       	ror	r20
    32b0:	37 95       	ror	r19
    32b2:	27 95       	ror	r18
    32b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32b8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    32ba:	bf 8d       	ldd	r27, Y+31	; 0x1f
    32bc:	82 0f       	add	r24, r18
    32be:	93 1f       	adc	r25, r19
    32c0:	a4 1f       	adc	r26, r20
    32c2:	b5 1f       	adc	r27, r21
    32c4:	28 8d       	ldd	r18, Y+24	; 0x18
    32c6:	39 8d       	ldd	r19, Y+25	; 0x19
    32c8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    32ca:	5b 8d       	ldd	r21, Y+27	; 0x1b
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 99 23 	call	0x4732	; 0x4732 <__udivmodsi4>
    32d4:	da 01       	movw	r26, r20
    32d6:	c9 01       	movw	r24, r18
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	a1 09       	sbc	r26, r1
    32dc:	b1 09       	sbc	r27, r1
    32de:	8a 83       	std	Y+2, r24	; 0x02
    32e0:	9b 83       	std	Y+3, r25	; 0x03
    32e2:	ac 83       	std	Y+4, r26	; 0x04
    32e4:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	ac 81       	ldd	r26, Y+4	; 0x04
    32ec:	bd 81       	ldd	r27, Y+5	; 0x05
    32ee:	89 2f       	mov	r24, r25
    32f0:	9a 2f       	mov	r25, r26
    32f2:	ab 2f       	mov	r26, r27
    32f4:	bb 27       	eor	r27, r27
    32f6:	98 2f       	mov	r25, r24
    32f8:	9f 70       	andi	r25, 0x0F	; 15
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	82 95       	swap	r24
    32fe:	80 7f       	andi	r24, 0xF0	; 240
    3300:	29 2f       	mov	r18, r25
    3302:	28 2b       	or	r18, r24
    3304:	8e 89       	ldd	r24, Y+22	; 0x16
    3306:	9f 89       	ldd	r25, Y+23	; 0x17
    3308:	fc 01       	movw	r30, r24
    330a:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    330c:	2a 81       	ldd	r18, Y+2	; 0x02
    330e:	8e 89       	ldd	r24, Y+22	; 0x16
    3310:	9f 89       	ldd	r25, Y+23	; 0x17
    3312:	fc 01       	movw	r30, r24
    3314:	26 83       	std	Z+6, r18	; 0x06

	return true;
    3316:	81 e0       	ldi	r24, 0x01	; 1
}
    3318:	6f 96       	adiw	r28, 0x1f	; 31
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	08 95       	ret

0000332c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	00 d0       	rcall	.+0      	; 0x3332 <ioport_configure_port_pin+0x6>
    3332:	00 d0       	rcall	.+0      	; 0x3334 <ioport_configure_port_pin+0x8>
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	9b 83       	std	Y+3, r25	; 0x03
    333c:	6c 83       	std	Y+4, r22	; 0x04
    333e:	4d 83       	std	Y+5, r20	; 0x05
    3340:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3342:	19 82       	std	Y+1, r1	; 0x01
    3344:	20 c0       	rjmp	.+64     	; 0x3386 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    3346:	8c 81       	ldd	r24, Y+4	; 0x04
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	29 81       	ldd	r18, Y+1	; 0x01
    334e:	22 2f       	mov	r18, r18
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <ioport_configure_port_pin+0x2c>
    3354:	95 95       	asr	r25
    3356:	87 95       	ror	r24
    3358:	2a 95       	dec	r18
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <ioport_configure_port_pin+0x28>
    335c:	81 70       	andi	r24, 0x01	; 1
    335e:	99 27       	eor	r25, r25
    3360:	89 2b       	or	r24, r25
    3362:	71 f0       	breq	.+28     	; 0x3380 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	40 96       	adiw	r24, 0x10	; 16
    336c:	2a 81       	ldd	r18, Y+2	; 0x02
    336e:	3b 81       	ldd	r19, Y+3	; 0x03
    3370:	82 0f       	add	r24, r18
    3372:	93 1f       	adc	r25, r19
    3374:	2d 81       	ldd	r18, Y+5	; 0x05
    3376:	3e 81       	ldd	r19, Y+6	; 0x06
    3378:	23 2f       	mov	r18, r19
    337a:	33 27       	eor	r19, r19
    337c:	fc 01       	movw	r30, r24
    337e:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	8f 5f       	subi	r24, 0xFF	; 255
    3384:	89 83       	std	Y+1, r24	; 0x01
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	88 30       	cpi	r24, 0x08	; 8
    338a:	e8 f2       	brcs	.-70     	; 0x3346 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	81 70       	andi	r24, 0x01	; 1
    3392:	99 27       	eor	r25, r25
    3394:	89 2b       	or	r24, r25
    3396:	d1 f0       	breq	.+52     	; 0x33cc <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	82 70       	andi	r24, 0x02	; 2
    339e:	99 27       	eor	r25, r25
    33a0:	89 2b       	or	r24, r25
    33a2:	39 f0       	breq	.+14     	; 0x33b2 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	05 96       	adiw	r24, 0x05	; 5
    33aa:	2c 81       	ldd	r18, Y+4	; 0x04
    33ac:	fc 01       	movw	r30, r24
    33ae:	20 83       	st	Z, r18
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	9b 81       	ldd	r25, Y+3	; 0x03
    33b6:	06 96       	adiw	r24, 0x06	; 6
    33b8:	2c 81       	ldd	r18, Y+4	; 0x04
    33ba:	fc 01       	movw	r30, r24
    33bc:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	9b 81       	ldd	r25, Y+3	; 0x03
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	2c 81       	ldd	r18, Y+4	; 0x04
    33c6:	fc 01       	movw	r30, r24
    33c8:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    33ca:	06 c0       	rjmp	.+12     	; 0x33d8 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	9b 81       	ldd	r25, Y+3	; 0x03
    33d0:	02 96       	adiw	r24, 0x02	; 2
    33d2:	2c 81       	ldd	r18, Y+4	; 0x04
    33d4:	fc 01       	movw	r30, r24
    33d6:	20 83       	st	Z, r18
	}
}
    33d8:	00 00       	nop
    33da:	26 96       	adiw	r28, 0x06	; 6
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	08 95       	ret

000033e6 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	27 97       	sbiw	r28, 0x07	; 7
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	8d 83       	std	Y+5, r24	; 0x05
    33f6:	6e 83       	std	Y+6, r22	; 0x06
    33f8:	7f 83       	std	Y+7, r23	; 0x07
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9c 01       	movw	r18, r24
    3406:	27 70       	andi	r18, 0x07	; 7
    3408:	33 27       	eor	r19, r19
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <ioport_configure_pin+0x2e>
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	2a 95       	dec	r18
    3416:	e2 f7       	brpl	.-8      	; 0x3410 <ioport_configure_pin+0x2a>
    3418:	68 2f       	mov	r22, r24
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	8a 83       	std	Y+2, r24	; 0x02
    341e:	8a 81       	ldd	r24, Y+2	; 0x02
    3420:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	86 95       	lsr	r24
    3426:	86 95       	lsr	r24
    3428:	86 95       	lsr	r24
    342a:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    342c:	8c 81       	ldd	r24, Y+4	; 0x04
    342e:	88 2f       	mov	r24, r24
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	82 95       	swap	r24
    3438:	92 95       	swap	r25
    343a:	90 7f       	andi	r25, 0xF0	; 240
    343c:	98 27       	eor	r25, r24
    343e:	80 7f       	andi	r24, 0xF0	; 240
    3440:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    3442:	9a 5f       	subi	r25, 0xFA	; 250
    3444:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    3446:	8e 81       	ldd	r24, Y+6	; 0x06
    3448:	9f 81       	ldd	r25, Y+7	; 0x07
    344a:	ac 01       	movw	r20, r24
    344c:	c9 01       	movw	r24, r18
    344e:	6e df       	rcall	.-292    	; 0x332c <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    3450:	00 00       	nop
    3452:	27 96       	adiw	r28, 0x07	; 7
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

0000345e <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    3466:	63 e0       	ldi	r22, 0x03	; 3
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	83 e7       	ldi	r24, 0x73	; 115
    346c:	bc df       	rcall	.-136    	; 0x33e6 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    346e:	60 e0       	ldi	r22, 0x00	; 0
    3470:	78 e1       	ldi	r23, 0x18	; 24
    3472:	82 e7       	ldi	r24, 0x72	; 114
    3474:	b8 df       	rcall	.-144    	; 0x33e6 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    3476:	00 00       	nop
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <sysclk_get_main_hz>:
		.chip         = address,      // TWI slave bus address
		.buffer       = Data, // transfer data source buffer
		.length       = sizeof(Data)  // transfer data size (bytes)
	};
	while (twi_master_write(&MYI2C, &packet_write) != TWI_SUCCESS) printf("fail");//transfers data and waits until transfer is finished to do anything else
}
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	98 e4       	ldi	r25, 0x48	; 72
    348a:	a8 ee       	ldi	r26, 0xE8	; 232
    348c:	b1 e0       	ldi	r27, 0x01	; 1
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	08 95       	ret

00003498 <sysclk_get_per4_hz>:
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	1f 92       	push	r1
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	19 82       	std	Y+1, r1	; 0x01
    34a4:	ec df       	rcall	.-40     	; 0x347e <sysclk_get_main_hz>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	29 81       	ldd	r18, Y+1	; 0x01
    34ac:	22 2f       	mov	r18, r18
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	04 c0       	rjmp	.+8      	; 0x34ba <sysclk_get_per4_hz+0x22>
    34b2:	b6 95       	lsr	r27
    34b4:	a7 95       	ror	r26
    34b6:	97 95       	ror	r25
    34b8:	87 95       	ror	r24
    34ba:	2a 95       	dec	r18
    34bc:	d2 f7       	brpl	.-12     	; 0x34b2 <sysclk_get_per4_hz+0x1a>
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0f 90       	pop	r0
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <sysclk_get_per2_hz>:
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	e2 df       	rcall	.-60     	; 0x3498 <sysclk_get_per4_hz>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	df 91       	pop	r29
    34de:	cf 91       	pop	r28
    34e0:	08 95       	ret

000034e2 <sysclk_get_per_hz>:
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	ef df       	rcall	.-34     	; 0x34ca <sysclk_get_per2_hz>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	08 95       	ret

000034fa <sysclk_get_cpu_hz>:
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	ef df       	rcall	.-34     	; 0x34e2 <sysclk_get_per_hz>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	bc 01       	movw	r22, r24
    350a:	cd 01       	movw	r24, r26
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	08 95       	ret

00003512 <sysclk_enable_peripheral_clock>:
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	1f 92       	push	r1
    3518:	1f 92       	push	r1
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	9a 81       	ldd	r25, Y+2	; 0x02
    3526:	89 2b       	or	r24, r25
    3528:	09 f4       	brne	.+2      	; 0x352c <sysclk_enable_peripheral_clock+0x1a>
    352a:	85 c1       	rjmp	.+778    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	80 3c       	cpi	r24, 0xC0	; 192
    3532:	91 05       	cpc	r25, r1
    3534:	29 f4       	brne	.+10     	; 0x3540 <sysclk_enable_peripheral_clock+0x2e>
    3536:	60 e1       	ldi	r22, 0x10	; 16
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    353e:	7b c1       	rjmp	.+758    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	9a 81       	ldd	r25, Y+2	; 0x02
    3544:	80 34       	cpi	r24, 0x40	; 64
    3546:	94 40       	sbci	r25, 0x04	; 4
    3548:	29 f4       	brne	.+10     	; 0x3554 <sysclk_enable_peripheral_clock+0x42>
    354a:	68 e0       	ldi	r22, 0x08	; 8
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3552:	71 c1       	rjmp	.+738    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	81 15       	cp	r24, r1
    355a:	94 40       	sbci	r25, 0x04	; 4
    355c:	29 f4       	brne	.+10     	; 0x3568 <sysclk_enable_peripheral_clock+0x56>
    355e:	64 e0       	ldi	r22, 0x04	; 4
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3566:	67 c1       	rjmp	.+718    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	80 38       	cpi	r24, 0x80	; 128
    356e:	91 40       	sbci	r25, 0x01	; 1
    3570:	29 f4       	brne	.+10     	; 0x357c <sysclk_enable_peripheral_clock+0x6a>
    3572:	62 e0       	ldi	r22, 0x02	; 2
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    357a:	5d c1       	rjmp	.+698    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	9a 81       	ldd	r25, Y+2	; 0x02
    3580:	81 15       	cp	r24, r1
    3582:	91 40       	sbci	r25, 0x01	; 1
    3584:	29 f4       	brne	.+10     	; 0x3590 <sysclk_enable_peripheral_clock+0x7e>
    3586:	61 e0       	ldi	r22, 0x01	; 1
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    358e:	53 c1       	rjmp	.+678    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	80 38       	cpi	r24, 0x80	; 128
    3596:	93 40       	sbci	r25, 0x03	; 3
    3598:	29 f4       	brne	.+10     	; 0x35a4 <sysclk_enable_peripheral_clock+0x92>
    359a:	61 e0       	ldi	r22, 0x01	; 1
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    35a2:	49 c1       	rjmp	.+658    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	80 39       	cpi	r24, 0x90	; 144
    35aa:	93 40       	sbci	r25, 0x03	; 3
    35ac:	29 f4       	brne	.+10     	; 0x35b8 <sysclk_enable_peripheral_clock+0xa6>
    35ae:	61 e0       	ldi	r22, 0x01	; 1
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    35b6:	3f c1       	rjmp	.+638    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	9a 81       	ldd	r25, Y+2	; 0x02
    35bc:	81 15       	cp	r24, r1
    35be:	92 40       	sbci	r25, 0x02	; 2
    35c0:	29 f4       	brne	.+10     	; 0x35cc <sysclk_enable_peripheral_clock+0xba>
    35c2:	62 e0       	ldi	r22, 0x02	; 2
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    35ca:	35 c1       	rjmp	.+618    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	80 34       	cpi	r24, 0x40	; 64
    35d2:	92 40       	sbci	r25, 0x02	; 2
    35d4:	29 f4       	brne	.+10     	; 0x35e0 <sysclk_enable_peripheral_clock+0xce>
    35d6:	62 e0       	ldi	r22, 0x02	; 2
    35d8:	82 e0       	ldi	r24, 0x02	; 2
    35da:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    35de:	2b c1       	rjmp	.+598    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	9a 81       	ldd	r25, Y+2	; 0x02
    35e4:	81 15       	cp	r24, r1
    35e6:	93 40       	sbci	r25, 0x03	; 3
    35e8:	29 f4       	brne	.+10     	; 0x35f4 <sysclk_enable_peripheral_clock+0xe2>
    35ea:	64 e0       	ldi	r22, 0x04	; 4
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    35f2:	21 c1       	rjmp	.+578    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	80 32       	cpi	r24, 0x20	; 32
    35fa:	93 40       	sbci	r25, 0x03	; 3
    35fc:	29 f4       	brne	.+10     	; 0x3608 <sysclk_enable_peripheral_clock+0xf6>
    35fe:	64 e0       	ldi	r22, 0x04	; 4
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3606:	17 c1       	rjmp	.+558    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	81 15       	cp	r24, r1
    360e:	98 40       	sbci	r25, 0x08	; 8
    3610:	29 f4       	brne	.+10     	; 0x361c <sysclk_enable_peripheral_clock+0x10a>
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    361a:	0d c1       	rjmp	.+538    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	9a 81       	ldd	r25, Y+2	; 0x02
    3620:	81 15       	cp	r24, r1
    3622:	99 40       	sbci	r25, 0x09	; 9
    3624:	29 f4       	brne	.+10     	; 0x3630 <sysclk_enable_peripheral_clock+0x11e>
    3626:	61 e0       	ldi	r22, 0x01	; 1
    3628:	84 e0       	ldi	r24, 0x04	; 4
    362a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    362e:	03 c1       	rjmp	.+518    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	81 15       	cp	r24, r1
    3636:	9a 40       	sbci	r25, 0x0A	; 10
    3638:	29 f4       	brne	.+10     	; 0x3644 <sysclk_enable_peripheral_clock+0x132>
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	85 e0       	ldi	r24, 0x05	; 5
    363e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3642:	f9 c0       	rjmp	.+498    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	81 15       	cp	r24, r1
    364a:	9b 40       	sbci	r25, 0x0B	; 11
    364c:	29 f4       	brne	.+10     	; 0x3658 <sysclk_enable_peripheral_clock+0x146>
    364e:	61 e0       	ldi	r22, 0x01	; 1
    3650:	86 e0       	ldi	r24, 0x06	; 6
    3652:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3656:	ef c0       	rjmp	.+478    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	9a 81       	ldd	r25, Y+2	; 0x02
    365c:	80 34       	cpi	r24, 0x40	; 64
    365e:	98 40       	sbci	r25, 0x08	; 8
    3660:	29 f4       	brne	.+10     	; 0x366c <sysclk_enable_peripheral_clock+0x15a>
    3662:	62 e0       	ldi	r22, 0x02	; 2
    3664:	83 e0       	ldi	r24, 0x03	; 3
    3666:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    366a:	e5 c0       	rjmp	.+458    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	9a 81       	ldd	r25, Y+2	; 0x02
    3670:	80 34       	cpi	r24, 0x40	; 64
    3672:	99 40       	sbci	r25, 0x09	; 9
    3674:	29 f4       	brne	.+10     	; 0x3680 <sysclk_enable_peripheral_clock+0x16e>
    3676:	62 e0       	ldi	r22, 0x02	; 2
    3678:	84 e0       	ldi	r24, 0x04	; 4
    367a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    367e:	db c0       	rjmp	.+438    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	80 34       	cpi	r24, 0x40	; 64
    3686:	9a 40       	sbci	r25, 0x0A	; 10
    3688:	29 f4       	brne	.+10     	; 0x3694 <sysclk_enable_peripheral_clock+0x182>
    368a:	62 e0       	ldi	r22, 0x02	; 2
    368c:	85 e0       	ldi	r24, 0x05	; 5
    368e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3692:	d1 c0       	rjmp	.+418    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	80 34       	cpi	r24, 0x40	; 64
    369a:	9b 40       	sbci	r25, 0x0B	; 11
    369c:	29 f4       	brne	.+10     	; 0x36a8 <sysclk_enable_peripheral_clock+0x196>
    369e:	62 e0       	ldi	r22, 0x02	; 2
    36a0:	86 e0       	ldi	r24, 0x06	; 6
    36a2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    36a6:	c7 c0       	rjmp	.+398    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	80 39       	cpi	r24, 0x90	; 144
    36ae:	98 40       	sbci	r25, 0x08	; 8
    36b0:	29 f4       	brne	.+10     	; 0x36bc <sysclk_enable_peripheral_clock+0x1aa>
    36b2:	64 e0       	ldi	r22, 0x04	; 4
    36b4:	83 e0       	ldi	r24, 0x03	; 3
    36b6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    36ba:	bd c0       	rjmp	.+378    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	80 39       	cpi	r24, 0x90	; 144
    36c2:	99 40       	sbci	r25, 0x09	; 9
    36c4:	29 f4       	brne	.+10     	; 0x36d0 <sysclk_enable_peripheral_clock+0x1be>
    36c6:	64 e0       	ldi	r22, 0x04	; 4
    36c8:	84 e0       	ldi	r24, 0x04	; 4
    36ca:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    36ce:	b3 c0       	rjmp	.+358    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	80 39       	cpi	r24, 0x90	; 144
    36d6:	9a 40       	sbci	r25, 0x0A	; 10
    36d8:	29 f4       	brne	.+10     	; 0x36e4 <sysclk_enable_peripheral_clock+0x1d2>
    36da:	64 e0       	ldi	r22, 0x04	; 4
    36dc:	85 e0       	ldi	r24, 0x05	; 5
    36de:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    36e2:	a9 c0       	rjmp	.+338    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	80 39       	cpi	r24, 0x90	; 144
    36ea:	9b 40       	sbci	r25, 0x0B	; 11
    36ec:	29 f4       	brne	.+10     	; 0x36f8 <sysclk_enable_peripheral_clock+0x1e6>
    36ee:	64 e0       	ldi	r22, 0x04	; 4
    36f0:	86 e0       	ldi	r24, 0x06	; 6
    36f2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    36f6:	9f c0       	rjmp	.+318    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	80 3c       	cpi	r24, 0xC0	; 192
    36fe:	98 40       	sbci	r25, 0x08	; 8
    3700:	29 f4       	brne	.+10     	; 0x370c <sysclk_enable_peripheral_clock+0x1fa>
    3702:	68 e0       	ldi	r22, 0x08	; 8
    3704:	83 e0       	ldi	r24, 0x03	; 3
    3706:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    370a:	95 c0       	rjmp	.+298    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	9a 81       	ldd	r25, Y+2	; 0x02
    3710:	80 3c       	cpi	r24, 0xC0	; 192
    3712:	99 40       	sbci	r25, 0x09	; 9
    3714:	29 f4       	brne	.+10     	; 0x3720 <sysclk_enable_peripheral_clock+0x20e>
    3716:	68 e0       	ldi	r22, 0x08	; 8
    3718:	84 e0       	ldi	r24, 0x04	; 4
    371a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    371e:	8b c0       	rjmp	.+278    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	9a 81       	ldd	r25, Y+2	; 0x02
    3724:	80 3c       	cpi	r24, 0xC0	; 192
    3726:	9a 40       	sbci	r25, 0x0A	; 10
    3728:	29 f4       	brne	.+10     	; 0x3734 <sysclk_enable_peripheral_clock+0x222>
    372a:	68 e0       	ldi	r22, 0x08	; 8
    372c:	85 e0       	ldi	r24, 0x05	; 5
    372e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3732:	81 c0       	rjmp	.+258    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	80 3c       	cpi	r24, 0xC0	; 192
    373a:	9b 40       	sbci	r25, 0x0B	; 11
    373c:	29 f4       	brne	.+10     	; 0x3748 <sysclk_enable_peripheral_clock+0x236>
    373e:	68 e0       	ldi	r22, 0x08	; 8
    3740:	86 e0       	ldi	r24, 0x06	; 6
    3742:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3746:	77 c0       	rjmp	.+238    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	9a 81       	ldd	r25, Y+2	; 0x02
    374c:	80 3a       	cpi	r24, 0xA0	; 160
    374e:	98 40       	sbci	r25, 0x08	; 8
    3750:	29 f4       	brne	.+10     	; 0x375c <sysclk_enable_peripheral_clock+0x24a>
    3752:	60 e1       	ldi	r22, 0x10	; 16
    3754:	83 e0       	ldi	r24, 0x03	; 3
    3756:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    375a:	6d c0       	rjmp	.+218    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
    3760:	80 3a       	cpi	r24, 0xA0	; 160
    3762:	99 40       	sbci	r25, 0x09	; 9
    3764:	29 f4       	brne	.+10     	; 0x3770 <sysclk_enable_peripheral_clock+0x25e>
    3766:	60 e1       	ldi	r22, 0x10	; 16
    3768:	84 e0       	ldi	r24, 0x04	; 4
    376a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    376e:	63 c0       	rjmp	.+198    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
    3774:	80 3a       	cpi	r24, 0xA0	; 160
    3776:	9a 40       	sbci	r25, 0x0A	; 10
    3778:	29 f4       	brne	.+10     	; 0x3784 <sysclk_enable_peripheral_clock+0x272>
    377a:	60 e1       	ldi	r22, 0x10	; 16
    377c:	85 e0       	ldi	r24, 0x05	; 5
    377e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3782:	59 c0       	rjmp	.+178    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	80 3a       	cpi	r24, 0xA0	; 160
    378a:	9b 40       	sbci	r25, 0x0B	; 11
    378c:	29 f4       	brne	.+10     	; 0x3798 <sysclk_enable_peripheral_clock+0x286>
    378e:	60 e1       	ldi	r22, 0x10	; 16
    3790:	86 e0       	ldi	r24, 0x06	; 6
    3792:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3796:	4f c0       	rjmp	.+158    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	9a 81       	ldd	r25, Y+2	; 0x02
    379c:	80 3b       	cpi	r24, 0xB0	; 176
    379e:	98 40       	sbci	r25, 0x08	; 8
    37a0:	29 f4       	brne	.+10     	; 0x37ac <sysclk_enable_peripheral_clock+0x29a>
    37a2:	60 e2       	ldi	r22, 0x20	; 32
    37a4:	83 e0       	ldi	r24, 0x03	; 3
    37a6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    37aa:	45 c0       	rjmp	.+138    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	9a 81       	ldd	r25, Y+2	; 0x02
    37b0:	80 3b       	cpi	r24, 0xB0	; 176
    37b2:	99 40       	sbci	r25, 0x09	; 9
    37b4:	29 f4       	brne	.+10     	; 0x37c0 <sysclk_enable_peripheral_clock+0x2ae>
    37b6:	60 e2       	ldi	r22, 0x20	; 32
    37b8:	84 e0       	ldi	r24, 0x04	; 4
    37ba:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    37be:	3b c0       	rjmp	.+118    	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	80 3b       	cpi	r24, 0xB0	; 176
    37c6:	9a 40       	sbci	r25, 0x0A	; 10
    37c8:	29 f4       	brne	.+10     	; 0x37d4 <sysclk_enable_peripheral_clock+0x2c2>
    37ca:	60 e2       	ldi	r22, 0x20	; 32
    37cc:	85 e0       	ldi	r24, 0x05	; 5
    37ce:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    37d2:	31 c0       	rjmp	.+98     	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
    37d8:	80 3b       	cpi	r24, 0xB0	; 176
    37da:	9b 40       	sbci	r25, 0x0B	; 11
    37dc:	29 f4       	brne	.+10     	; 0x37e8 <sysclk_enable_peripheral_clock+0x2d6>
    37de:	60 e2       	ldi	r22, 0x20	; 32
    37e0:	86 e0       	ldi	r24, 0x06	; 6
    37e2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    37e6:	27 c0       	rjmp	.+78     	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	80 38       	cpi	r24, 0x80	; 128
    37ee:	94 40       	sbci	r25, 0x04	; 4
    37f0:	29 f4       	brne	.+10     	; 0x37fc <sysclk_enable_peripheral_clock+0x2ea>
    37f2:	60 e4       	ldi	r22, 0x40	; 64
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    37fa:	1d c0       	rjmp	.+58     	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	80 39       	cpi	r24, 0x90	; 144
    3802:	94 40       	sbci	r25, 0x04	; 4
    3804:	29 f4       	brne	.+10     	; 0x3810 <sysclk_enable_peripheral_clock+0x2fe>
    3806:	60 e4       	ldi	r22, 0x40	; 64
    3808:	84 e0       	ldi	r24, 0x04	; 4
    380a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    380e:	13 c0       	rjmp	.+38     	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	80 3a       	cpi	r24, 0xA0	; 160
    3816:	94 40       	sbci	r25, 0x04	; 4
    3818:	29 f4       	brne	.+10     	; 0x3824 <sysclk_enable_peripheral_clock+0x312>
    381a:	60 e4       	ldi	r22, 0x40	; 64
    381c:	85 e0       	ldi	r24, 0x05	; 5
    381e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3822:	09 c0       	rjmp	.+18     	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	9a 81       	ldd	r25, Y+2	; 0x02
    3828:	80 3b       	cpi	r24, 0xB0	; 176
    382a:	94 40       	sbci	r25, 0x04	; 4
    382c:	21 f4       	brne	.+8      	; 0x3836 <sysclk_enable_peripheral_clock+0x324>
    382e:	60 e4       	ldi	r22, 0x40	; 64
    3830:	86 e0       	ldi	r24, 0x06	; 6
    3832:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3836:	00 00       	nop
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	08 95       	ret

00003842 <twi_master_read>:
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	00 d0       	rcall	.+0      	; 0x3848 <twi_master_read+0x6>
    3848:	1f 92       	push	r1
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	6b 83       	std	Y+3, r22	; 0x03
    3854:	7c 83       	std	Y+4, r23	; 0x04
    3856:	2b 81       	ldd	r18, Y+3	; 0x03
    3858:	3c 81       	ldd	r19, Y+4	; 0x04
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	b9 01       	movw	r22, r18
    3862:	4a d8       	rcall	.-3948   	; 0x28f8 <twi_master_transfer>
    3864:	24 96       	adiw	r28, 0x04	; 4
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	08 95       	ret

00003870 <twi_master_setup>:
    3870:	ef 92       	push	r14
    3872:	ff 92       	push	r15
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	00 d0       	rcall	.+0      	; 0x387e <twi_master_setup+0xe>
    387e:	1f 92       	push	r1
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	6b 83       	std	Y+3, r22	; 0x03
    388a:	7c 83       	std	Y+4, r23	; 0x04
    388c:	36 de       	rcall	.-916    	; 0x34fa <sysclk_get_cpu_hz>
    388e:	7b 01       	movw	r14, r22
    3890:	8c 01       	movw	r16, r24
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	9c 81       	ldd	r25, Y+4	; 0x04
    3896:	fc 01       	movw	r30, r24
    3898:	80 81       	ld	r24, Z
    389a:	91 81       	ldd	r25, Z+1	; 0x01
    389c:	a2 81       	ldd	r26, Z+2	; 0x02
    389e:	b3 81       	ldd	r27, Z+3	; 0x03
    38a0:	9c 01       	movw	r18, r24
    38a2:	ad 01       	movw	r20, r26
    38a4:	22 0f       	add	r18, r18
    38a6:	33 1f       	adc	r19, r19
    38a8:	44 1f       	adc	r20, r20
    38aa:	55 1f       	adc	r21, r21
    38ac:	c8 01       	movw	r24, r16
    38ae:	b7 01       	movw	r22, r14
    38b0:	40 d7       	rcall	.+3712   	; 0x4732 <__udivmodsi4>
    38b2:	da 01       	movw	r26, r20
    38b4:	c9 01       	movw	r24, r18
    38b6:	05 97       	sbiw	r24, 0x05	; 5
    38b8:	a1 09       	sbc	r26, r1
    38ba:	b1 09       	sbc	r27, r1
    38bc:	2b 81       	ldd	r18, Y+3	; 0x03
    38be:	3c 81       	ldd	r19, Y+4	; 0x04
    38c0:	f9 01       	movw	r30, r18
    38c2:	84 83       	std	Z+4, r24	; 0x04
    38c4:	95 83       	std	Z+5, r25	; 0x05
    38c6:	a6 83       	std	Z+6, r26	; 0x06
    38c8:	b7 83       	std	Z+7, r27	; 0x07
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	9a 81       	ldd	r25, Y+2	; 0x02
    38ce:	21 de       	rcall	.-958    	; 0x3512 <sysclk_enable_peripheral_clock>
    38d0:	2b 81       	ldd	r18, Y+3	; 0x03
    38d2:	3c 81       	ldd	r19, Y+4	; 0x04
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	b9 01       	movw	r22, r18
    38da:	0e 94 44 14 	call	0x2888	; 0x2888 <twi_master_init>
    38de:	08 2e       	mov	r0, r24
    38e0:	00 0c       	add	r0, r0
    38e2:	99 0b       	sbc	r25, r25
    38e4:	24 96       	adiw	r28, 0x04	; 4
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	1f 91       	pop	r17
    38f0:	0f 91       	pop	r16
    38f2:	ff 90       	pop	r15
    38f4:	ef 90       	pop	r14
    38f6:	08 95       	ret

000038f8 <I2CInit>:
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	2e 97       	sbiw	r28, 0x0e	; 14
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	6a 87       	std	Y+10, r22	; 0x0a
    3908:	7b 87       	std	Y+11, r23	; 0x0b
    390a:	8c 87       	std	Y+12, r24	; 0x0c
    390c:	9d 87       	std	Y+13, r25	; 0x0d
    390e:	4e 87       	std	Y+14, r20	; 0x0e
    3910:	8e 85       	ldd	r24, Y+14	; 0x0e
    3912:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <busAddress>
    3916:	29 e0       	ldi	r18, 0x09	; 9
    3918:	ce 01       	movw	r24, r28
    391a:	01 96       	adiw	r24, 0x01	; 1
    391c:	fc 01       	movw	r30, r24
    391e:	32 2f       	mov	r19, r18
    3920:	11 92       	st	Z+, r1
    3922:	3a 95       	dec	r19
    3924:	e9 f7       	brne	.-6      	; 0x3920 <I2CInit+0x28>
    3926:	8a 85       	ldd	r24, Y+10	; 0x0a
    3928:	9b 85       	ldd	r25, Y+11	; 0x0b
    392a:	ac 85       	ldd	r26, Y+12	; 0x0c
    392c:	bd 85       	ldd	r27, Y+13	; 0x0d
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	ab 83       	std	Y+3, r26	; 0x03
    3934:	bc 83       	std	Y+4, r27	; 0x04
    3936:	8e 85       	ldd	r24, Y+14	; 0x0e
    3938:	89 87       	std	Y+9, r24	; 0x09
    393a:	ce 01       	movw	r24, r28
    393c:	01 96       	adiw	r24, 0x01	; 1
    393e:	bc 01       	movw	r22, r24
    3940:	80 e8       	ldi	r24, 0x80	; 128
    3942:	94 e0       	ldi	r25, 0x04	; 4
    3944:	95 df       	rcall	.-214    	; 0x3870 <twi_master_setup>
    3946:	00 00       	nop
    3948:	2e 96       	adiw	r28, 0x0e	; 14
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <twi_read>:

//reads using two wire interface. address is the 7 bit identifier for each device. Data is the array the data will be stored in.
//returns the status of the transfer
void twi_read(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	2f 97       	sbiw	r28, 0x0f	; 15
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	8c 87       	std	Y+12, r24	; 0x0c
    3964:	9d 87       	std	Y+13, r25	; 0x0d
    3966:	6e 87       	std	Y+14, r22	; 0x0e
    3968:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_read = 
    396a:	2b e0       	ldi	r18, 0x0B	; 11
    396c:	ce 01       	movw	r24, r28
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	fc 01       	movw	r30, r24
    3972:	32 2f       	mov	r19, r18
    3974:	11 92       	st	Z+, r1
    3976:	3a 95       	dec	r19
    3978:	e9 f7       	brne	.-6      	; 0x3974 <twi_read+0x20>
    397a:	8e 85       	ldd	r24, Y+14	; 0x0e
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3980:	8a 83       	std	Y+2, r24	; 0x02
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	8d 83       	std	Y+5, r24	; 0x05
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8c 85       	ldd	r24, Y+12	; 0x0c
    398c:	9d 85       	ldd	r25, Y+13	; 0x0d
    398e:	8f 83       	std	Y+7, r24	; 0x07
    3990:	98 87       	std	Y+8, r25	; 0x08
    3992:	82 e0       	ldi	r24, 0x02	; 2
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	89 87       	std	Y+9, r24	; 0x09
    3998:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,       // TWI slave bus address
		.buffer       = Data,          // transfer data destination buffer
		.length       = sizeof(Data)        // transfer data size (bytes)
	};
	twi_master_read(&MYI2C, &packet_read); //preform read and return the status of the read
    399a:	ce 01       	movw	r24, r28
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	bc 01       	movw	r22, r24
    39a0:	80 e8       	ldi	r24, 0x80	; 128
    39a2:	94 e0       	ldi	r25, 0x04	; 4
    39a4:	4e df       	rcall	.-356    	; 0x3842 <twi_master_read>
	//Data = packet_read.buffer;
	//printf("%d",status);
	
}
    39a6:	00 00       	nop
    39a8:	2f 96       	adiw	r28, 0x0f	; 15
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	de bf       	out	0x3e, r29	; 62
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	08 95       	ret

000039b4 <BNO_Read>:
	twi_write(data,BN0_ADDR,memAddress);//writes data to the sensor
}


void BNO_Read(uint8_t * data,uint8_t memAddress)
{
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <BNO_Read+0x6>
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	6b 83       	std	Y+3, r22	; 0x03
	twi_read(data,BN0_ADDR,memAddress);
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	4b 81       	ldd	r20, Y+3	; 0x03
    39ca:	69 e2       	ldi	r22, 0x29	; 41
    39cc:	c3 df       	rcall	.-122    	; 0x3954 <twi_read>
}
    39ce:	00 00       	nop
    39d0:	23 96       	adiw	r28, 0x03	; 3
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	08 95       	ret

000039dc <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	1f 92       	push	r1
    39e2:	1f 92       	push	r1
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	89 83       	std	Y+1, r24	; 0x01
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	9a 81       	ldd	r25, Y+2	; 0x02
    39f0:	89 2b       	or	r24, r25
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <sysclk_enable_peripheral_clock+0x1a>
    39f4:	85 c1       	rjmp	.+778    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	9a 81       	ldd	r25, Y+2	; 0x02
    39fa:	80 3c       	cpi	r24, 0xC0	; 192
    39fc:	91 05       	cpc	r25, r1
    39fe:	29 f4       	brne	.+10     	; 0x3a0a <sysclk_enable_peripheral_clock+0x2e>
    3a00:	60 e1       	ldi	r22, 0x10	; 16
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a08:	7b c1       	rjmp	.+758    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	80 34       	cpi	r24, 0x40	; 64
    3a10:	94 40       	sbci	r25, 0x04	; 4
    3a12:	29 f4       	brne	.+10     	; 0x3a1e <sysclk_enable_peripheral_clock+0x42>
    3a14:	68 e0       	ldi	r22, 0x08	; 8
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a1c:	71 c1       	rjmp	.+738    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	81 15       	cp	r24, r1
    3a24:	94 40       	sbci	r25, 0x04	; 4
    3a26:	29 f4       	brne	.+10     	; 0x3a32 <sysclk_enable_peripheral_clock+0x56>
    3a28:	64 e0       	ldi	r22, 0x04	; 4
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a30:	67 c1       	rjmp	.+718    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	9a 81       	ldd	r25, Y+2	; 0x02
    3a36:	80 38       	cpi	r24, 0x80	; 128
    3a38:	91 40       	sbci	r25, 0x01	; 1
    3a3a:	29 f4       	brne	.+10     	; 0x3a46 <sysclk_enable_peripheral_clock+0x6a>
    3a3c:	62 e0       	ldi	r22, 0x02	; 2
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a44:	5d c1       	rjmp	.+698    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4a:	81 15       	cp	r24, r1
    3a4c:	91 40       	sbci	r25, 0x01	; 1
    3a4e:	29 f4       	brne	.+10     	; 0x3a5a <sysclk_enable_peripheral_clock+0x7e>
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a58:	53 c1       	rjmp	.+678    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	80 38       	cpi	r24, 0x80	; 128
    3a60:	93 40       	sbci	r25, 0x03	; 3
    3a62:	29 f4       	brne	.+10     	; 0x3a6e <sysclk_enable_peripheral_clock+0x92>
    3a64:	61 e0       	ldi	r22, 0x01	; 1
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a6c:	49 c1       	rjmp	.+658    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	80 39       	cpi	r24, 0x90	; 144
    3a74:	93 40       	sbci	r25, 0x03	; 3
    3a76:	29 f4       	brne	.+10     	; 0x3a82 <sysclk_enable_peripheral_clock+0xa6>
    3a78:	61 e0       	ldi	r22, 0x01	; 1
    3a7a:	82 e0       	ldi	r24, 0x02	; 2
    3a7c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a80:	3f c1       	rjmp	.+638    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	9a 81       	ldd	r25, Y+2	; 0x02
    3a86:	81 15       	cp	r24, r1
    3a88:	92 40       	sbci	r25, 0x02	; 2
    3a8a:	29 f4       	brne	.+10     	; 0x3a96 <sysclk_enable_peripheral_clock+0xba>
    3a8c:	62 e0       	ldi	r22, 0x02	; 2
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3a94:	35 c1       	rjmp	.+618    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	9a 81       	ldd	r25, Y+2	; 0x02
    3a9a:	80 34       	cpi	r24, 0x40	; 64
    3a9c:	92 40       	sbci	r25, 0x02	; 2
    3a9e:	29 f4       	brne	.+10     	; 0x3aaa <sysclk_enable_peripheral_clock+0xce>
    3aa0:	62 e0       	ldi	r22, 0x02	; 2
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3aa8:	2b c1       	rjmp	.+598    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	9a 81       	ldd	r25, Y+2	; 0x02
    3aae:	81 15       	cp	r24, r1
    3ab0:	93 40       	sbci	r25, 0x03	; 3
    3ab2:	29 f4       	brne	.+10     	; 0x3abe <sysclk_enable_peripheral_clock+0xe2>
    3ab4:	64 e0       	ldi	r22, 0x04	; 4
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3abc:	21 c1       	rjmp	.+578    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac2:	80 32       	cpi	r24, 0x20	; 32
    3ac4:	93 40       	sbci	r25, 0x03	; 3
    3ac6:	29 f4       	brne	.+10     	; 0x3ad2 <sysclk_enable_peripheral_clock+0xf6>
    3ac8:	64 e0       	ldi	r22, 0x04	; 4
    3aca:	82 e0       	ldi	r24, 0x02	; 2
    3acc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3ad0:	17 c1       	rjmp	.+558    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad6:	81 15       	cp	r24, r1
    3ad8:	98 40       	sbci	r25, 0x08	; 8
    3ada:	29 f4       	brne	.+10     	; 0x3ae6 <sysclk_enable_peripheral_clock+0x10a>
    3adc:	61 e0       	ldi	r22, 0x01	; 1
    3ade:	83 e0       	ldi	r24, 0x03	; 3
    3ae0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3ae4:	0d c1       	rjmp	.+538    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aea:	81 15       	cp	r24, r1
    3aec:	99 40       	sbci	r25, 0x09	; 9
    3aee:	29 f4       	brne	.+10     	; 0x3afa <sysclk_enable_peripheral_clock+0x11e>
    3af0:	61 e0       	ldi	r22, 0x01	; 1
    3af2:	84 e0       	ldi	r24, 0x04	; 4
    3af4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3af8:	03 c1       	rjmp	.+518    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
    3afe:	81 15       	cp	r24, r1
    3b00:	9a 40       	sbci	r25, 0x0A	; 10
    3b02:	29 f4       	brne	.+10     	; 0x3b0e <sysclk_enable_peripheral_clock+0x132>
    3b04:	61 e0       	ldi	r22, 0x01	; 1
    3b06:	85 e0       	ldi	r24, 0x05	; 5
    3b08:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b0c:	f9 c0       	rjmp	.+498    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	9a 81       	ldd	r25, Y+2	; 0x02
    3b12:	81 15       	cp	r24, r1
    3b14:	9b 40       	sbci	r25, 0x0B	; 11
    3b16:	29 f4       	brne	.+10     	; 0x3b22 <sysclk_enable_peripheral_clock+0x146>
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	86 e0       	ldi	r24, 0x06	; 6
    3b1c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b20:	ef c0       	rjmp	.+478    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	80 34       	cpi	r24, 0x40	; 64
    3b28:	98 40       	sbci	r25, 0x08	; 8
    3b2a:	29 f4       	brne	.+10     	; 0x3b36 <sysclk_enable_peripheral_clock+0x15a>
    3b2c:	62 e0       	ldi	r22, 0x02	; 2
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b34:	e5 c0       	rjmp	.+458    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	80 34       	cpi	r24, 0x40	; 64
    3b3c:	99 40       	sbci	r25, 0x09	; 9
    3b3e:	29 f4       	brne	.+10     	; 0x3b4a <sysclk_enable_peripheral_clock+0x16e>
    3b40:	62 e0       	ldi	r22, 0x02	; 2
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b48:	db c0       	rjmp	.+438    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4e:	80 34       	cpi	r24, 0x40	; 64
    3b50:	9a 40       	sbci	r25, 0x0A	; 10
    3b52:	29 f4       	brne	.+10     	; 0x3b5e <sysclk_enable_peripheral_clock+0x182>
    3b54:	62 e0       	ldi	r22, 0x02	; 2
    3b56:	85 e0       	ldi	r24, 0x05	; 5
    3b58:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b5c:	d1 c0       	rjmp	.+418    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	9a 81       	ldd	r25, Y+2	; 0x02
    3b62:	80 34       	cpi	r24, 0x40	; 64
    3b64:	9b 40       	sbci	r25, 0x0B	; 11
    3b66:	29 f4       	brne	.+10     	; 0x3b72 <sysclk_enable_peripheral_clock+0x196>
    3b68:	62 e0       	ldi	r22, 0x02	; 2
    3b6a:	86 e0       	ldi	r24, 0x06	; 6
    3b6c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b70:	c7 c0       	rjmp	.+398    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	80 39       	cpi	r24, 0x90	; 144
    3b78:	98 40       	sbci	r25, 0x08	; 8
    3b7a:	29 f4       	brne	.+10     	; 0x3b86 <sysclk_enable_peripheral_clock+0x1aa>
    3b7c:	64 e0       	ldi	r22, 0x04	; 4
    3b7e:	83 e0       	ldi	r24, 0x03	; 3
    3b80:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b84:	bd c0       	rjmp	.+378    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8a:	80 39       	cpi	r24, 0x90	; 144
    3b8c:	99 40       	sbci	r25, 0x09	; 9
    3b8e:	29 f4       	brne	.+10     	; 0x3b9a <sysclk_enable_peripheral_clock+0x1be>
    3b90:	64 e0       	ldi	r22, 0x04	; 4
    3b92:	84 e0       	ldi	r24, 0x04	; 4
    3b94:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3b98:	b3 c0       	rjmp	.+358    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	80 39       	cpi	r24, 0x90	; 144
    3ba0:	9a 40       	sbci	r25, 0x0A	; 10
    3ba2:	29 f4       	brne	.+10     	; 0x3bae <sysclk_enable_peripheral_clock+0x1d2>
    3ba4:	64 e0       	ldi	r22, 0x04	; 4
    3ba6:	85 e0       	ldi	r24, 0x05	; 5
    3ba8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3bac:	a9 c0       	rjmp	.+338    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	80 39       	cpi	r24, 0x90	; 144
    3bb4:	9b 40       	sbci	r25, 0x0B	; 11
    3bb6:	29 f4       	brne	.+10     	; 0x3bc2 <sysclk_enable_peripheral_clock+0x1e6>
    3bb8:	64 e0       	ldi	r22, 0x04	; 4
    3bba:	86 e0       	ldi	r24, 0x06	; 6
    3bbc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3bc0:	9f c0       	rjmp	.+318    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	80 3c       	cpi	r24, 0xC0	; 192
    3bc8:	98 40       	sbci	r25, 0x08	; 8
    3bca:	29 f4       	brne	.+10     	; 0x3bd6 <sysclk_enable_peripheral_clock+0x1fa>
    3bcc:	68 e0       	ldi	r22, 0x08	; 8
    3bce:	83 e0       	ldi	r24, 0x03	; 3
    3bd0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3bd4:	95 c0       	rjmp	.+298    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bda:	80 3c       	cpi	r24, 0xC0	; 192
    3bdc:	99 40       	sbci	r25, 0x09	; 9
    3bde:	29 f4       	brne	.+10     	; 0x3bea <sysclk_enable_peripheral_clock+0x20e>
    3be0:	68 e0       	ldi	r22, 0x08	; 8
    3be2:	84 e0       	ldi	r24, 0x04	; 4
    3be4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3be8:	8b c0       	rjmp	.+278    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	80 3c       	cpi	r24, 0xC0	; 192
    3bf0:	9a 40       	sbci	r25, 0x0A	; 10
    3bf2:	29 f4       	brne	.+10     	; 0x3bfe <sysclk_enable_peripheral_clock+0x222>
    3bf4:	68 e0       	ldi	r22, 0x08	; 8
    3bf6:	85 e0       	ldi	r24, 0x05	; 5
    3bf8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3bfc:	81 c0       	rjmp	.+258    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	80 3c       	cpi	r24, 0xC0	; 192
    3c04:	9b 40       	sbci	r25, 0x0B	; 11
    3c06:	29 f4       	brne	.+10     	; 0x3c12 <sysclk_enable_peripheral_clock+0x236>
    3c08:	68 e0       	ldi	r22, 0x08	; 8
    3c0a:	86 e0       	ldi	r24, 0x06	; 6
    3c0c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c10:	77 c0       	rjmp	.+238    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	80 3a       	cpi	r24, 0xA0	; 160
    3c18:	98 40       	sbci	r25, 0x08	; 8
    3c1a:	29 f4       	brne	.+10     	; 0x3c26 <sysclk_enable_peripheral_clock+0x24a>
    3c1c:	60 e1       	ldi	r22, 0x10	; 16
    3c1e:	83 e0       	ldi	r24, 0x03	; 3
    3c20:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c24:	6d c0       	rjmp	.+218    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	80 3a       	cpi	r24, 0xA0	; 160
    3c2c:	99 40       	sbci	r25, 0x09	; 9
    3c2e:	29 f4       	brne	.+10     	; 0x3c3a <sysclk_enable_peripheral_clock+0x25e>
    3c30:	60 e1       	ldi	r22, 0x10	; 16
    3c32:	84 e0       	ldi	r24, 0x04	; 4
    3c34:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c38:	63 c0       	rjmp	.+198    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3e:	80 3a       	cpi	r24, 0xA0	; 160
    3c40:	9a 40       	sbci	r25, 0x0A	; 10
    3c42:	29 f4       	brne	.+10     	; 0x3c4e <sysclk_enable_peripheral_clock+0x272>
    3c44:	60 e1       	ldi	r22, 0x10	; 16
    3c46:	85 e0       	ldi	r24, 0x05	; 5
    3c48:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c4c:	59 c0       	rjmp	.+178    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	9a 81       	ldd	r25, Y+2	; 0x02
    3c52:	80 3a       	cpi	r24, 0xA0	; 160
    3c54:	9b 40       	sbci	r25, 0x0B	; 11
    3c56:	29 f4       	brne	.+10     	; 0x3c62 <sysclk_enable_peripheral_clock+0x286>
    3c58:	60 e1       	ldi	r22, 0x10	; 16
    3c5a:	86 e0       	ldi	r24, 0x06	; 6
    3c5c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c60:	4f c0       	rjmp	.+158    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	9a 81       	ldd	r25, Y+2	; 0x02
    3c66:	80 3b       	cpi	r24, 0xB0	; 176
    3c68:	98 40       	sbci	r25, 0x08	; 8
    3c6a:	29 f4       	brne	.+10     	; 0x3c76 <sysclk_enable_peripheral_clock+0x29a>
    3c6c:	60 e2       	ldi	r22, 0x20	; 32
    3c6e:	83 e0       	ldi	r24, 0x03	; 3
    3c70:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c74:	45 c0       	rjmp	.+138    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7a:	80 3b       	cpi	r24, 0xB0	; 176
    3c7c:	99 40       	sbci	r25, 0x09	; 9
    3c7e:	29 f4       	brne	.+10     	; 0x3c8a <sysclk_enable_peripheral_clock+0x2ae>
    3c80:	60 e2       	ldi	r22, 0x20	; 32
    3c82:	84 e0       	ldi	r24, 0x04	; 4
    3c84:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c88:	3b c0       	rjmp	.+118    	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c8a:	89 81       	ldd	r24, Y+1	; 0x01
    3c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8e:	80 3b       	cpi	r24, 0xB0	; 176
    3c90:	9a 40       	sbci	r25, 0x0A	; 10
    3c92:	29 f4       	brne	.+10     	; 0x3c9e <sysclk_enable_peripheral_clock+0x2c2>
    3c94:	60 e2       	ldi	r22, 0x20	; 32
    3c96:	85 e0       	ldi	r24, 0x05	; 5
    3c98:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3c9c:	31 c0       	rjmp	.+98     	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca2:	80 3b       	cpi	r24, 0xB0	; 176
    3ca4:	9b 40       	sbci	r25, 0x0B	; 11
    3ca6:	29 f4       	brne	.+10     	; 0x3cb2 <sysclk_enable_peripheral_clock+0x2d6>
    3ca8:	60 e2       	ldi	r22, 0x20	; 32
    3caa:	86 e0       	ldi	r24, 0x06	; 6
    3cac:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3cb0:	27 c0       	rjmp	.+78     	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb6:	80 38       	cpi	r24, 0x80	; 128
    3cb8:	94 40       	sbci	r25, 0x04	; 4
    3cba:	29 f4       	brne	.+10     	; 0x3cc6 <sysclk_enable_peripheral_clock+0x2ea>
    3cbc:	60 e4       	ldi	r22, 0x40	; 64
    3cbe:	83 e0       	ldi	r24, 0x03	; 3
    3cc0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3cc4:	1d c0       	rjmp	.+58     	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cca:	80 39       	cpi	r24, 0x90	; 144
    3ccc:	94 40       	sbci	r25, 0x04	; 4
    3cce:	29 f4       	brne	.+10     	; 0x3cda <sysclk_enable_peripheral_clock+0x2fe>
    3cd0:	60 e4       	ldi	r22, 0x40	; 64
    3cd2:	84 e0       	ldi	r24, 0x04	; 4
    3cd4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3cd8:	13 c0       	rjmp	.+38     	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cde:	80 3a       	cpi	r24, 0xA0	; 160
    3ce0:	94 40       	sbci	r25, 0x04	; 4
    3ce2:	29 f4       	brne	.+10     	; 0x3cee <sysclk_enable_peripheral_clock+0x312>
    3ce4:	60 e4       	ldi	r22, 0x40	; 64
    3ce6:	85 e0       	ldi	r24, 0x05	; 5
    3ce8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3cec:	09 c0       	rjmp	.+18     	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf2:	80 3b       	cpi	r24, 0xB0	; 176
    3cf4:	94 40       	sbci	r25, 0x04	; 4
    3cf6:	21 f4       	brne	.+8      	; 0x3d00 <sysclk_enable_peripheral_clock+0x324>
    3cf8:	60 e4       	ldi	r22, 0x40	; 64
    3cfa:	86 e0       	ldi	r24, 0x06	; 6
    3cfc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3d00:	00 00       	nop
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <usart_serial_init>:
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	2b 97       	sbiw	r28, 0x0b	; 11
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	88 87       	std	Y+8, r24	; 0x08
    3d1c:	99 87       	std	Y+9, r25	; 0x09
    3d1e:	6a 87       	std	Y+10, r22	; 0x0a
    3d20:	7b 87       	std	Y+11, r23	; 0x0b
    3d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d26:	fc 01       	movw	r30, r24
    3d28:	84 81       	ldd	r24, Z+4	; 0x04
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
    3d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d30:	fc 01       	movw	r30, r24
    3d32:	85 81       	ldd	r24, Z+5	; 0x05
    3d34:	8e 83       	std	Y+6, r24	; 0x06
    3d36:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d38:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	86 81       	ldd	r24, Z+6	; 0x06
    3d3e:	8f 83       	std	Y+7, r24	; 0x07
    3d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d44:	fc 01       	movw	r30, r24
    3d46:	80 81       	ld	r24, Z
    3d48:	91 81       	ldd	r25, Z+1	; 0x01
    3d4a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d4c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d4e:	89 83       	std	Y+1, r24	; 0x01
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	ab 83       	std	Y+3, r26	; 0x03
    3d54:	bc 83       	std	Y+4, r27	; 0x04
    3d56:	88 85       	ldd	r24, Y+8	; 0x08
    3d58:	99 85       	ldd	r25, Y+9	; 0x09
    3d5a:	80 3a       	cpi	r24, 0xA0	; 160
    3d5c:	98 40       	sbci	r25, 0x08	; 8
    3d5e:	21 f4       	brne	.+8      	; 0x3d68 <usart_serial_init+0x5c>
    3d60:	60 e1       	ldi	r22, 0x10	; 16
    3d62:	83 e0       	ldi	r24, 0x03	; 3
    3d64:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3d68:	88 85       	ldd	r24, Y+8	; 0x08
    3d6a:	99 85       	ldd	r25, Y+9	; 0x09
    3d6c:	80 3b       	cpi	r24, 0xB0	; 176
    3d6e:	98 40       	sbci	r25, 0x08	; 8
    3d70:	21 f4       	brne	.+8      	; 0x3d7a <usart_serial_init+0x6e>
    3d72:	60 e2       	ldi	r22, 0x20	; 32
    3d74:	83 e0       	ldi	r24, 0x03	; 3
    3d76:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3d7a:	88 85       	ldd	r24, Y+8	; 0x08
    3d7c:	99 85       	ldd	r25, Y+9	; 0x09
    3d7e:	80 3a       	cpi	r24, 0xA0	; 160
    3d80:	99 40       	sbci	r25, 0x09	; 9
    3d82:	21 f4       	brne	.+8      	; 0x3d8c <usart_serial_init+0x80>
    3d84:	60 e1       	ldi	r22, 0x10	; 16
    3d86:	84 e0       	ldi	r24, 0x04	; 4
    3d88:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3d8c:	88 85       	ldd	r24, Y+8	; 0x08
    3d8e:	99 85       	ldd	r25, Y+9	; 0x09
    3d90:	80 3b       	cpi	r24, 0xB0	; 176
    3d92:	99 40       	sbci	r25, 0x09	; 9
    3d94:	21 f4       	brne	.+8      	; 0x3d9e <usart_serial_init+0x92>
    3d96:	60 e2       	ldi	r22, 0x20	; 32
    3d98:	84 e0       	ldi	r24, 0x04	; 4
    3d9a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3d9e:	88 85       	ldd	r24, Y+8	; 0x08
    3da0:	99 85       	ldd	r25, Y+9	; 0x09
    3da2:	80 3a       	cpi	r24, 0xA0	; 160
    3da4:	9a 40       	sbci	r25, 0x0A	; 10
    3da6:	21 f4       	brne	.+8      	; 0x3db0 <usart_serial_init+0xa4>
    3da8:	60 e1       	ldi	r22, 0x10	; 16
    3daa:	85 e0       	ldi	r24, 0x05	; 5
    3dac:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3db0:	88 85       	ldd	r24, Y+8	; 0x08
    3db2:	99 85       	ldd	r25, Y+9	; 0x09
    3db4:	80 3b       	cpi	r24, 0xB0	; 176
    3db6:	9a 40       	sbci	r25, 0x0A	; 10
    3db8:	21 f4       	brne	.+8      	; 0x3dc2 <usart_serial_init+0xb6>
    3dba:	60 e2       	ldi	r22, 0x20	; 32
    3dbc:	85 e0       	ldi	r24, 0x05	; 5
    3dbe:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3dc2:	88 85       	ldd	r24, Y+8	; 0x08
    3dc4:	99 85       	ldd	r25, Y+9	; 0x09
    3dc6:	80 3a       	cpi	r24, 0xA0	; 160
    3dc8:	9b 40       	sbci	r25, 0x0B	; 11
    3dca:	21 f4       	brne	.+8      	; 0x3dd4 <usart_serial_init+0xc8>
    3dcc:	60 e1       	ldi	r22, 0x10	; 16
    3dce:	86 e0       	ldi	r24, 0x06	; 6
    3dd0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3dd4:	88 85       	ldd	r24, Y+8	; 0x08
    3dd6:	99 85       	ldd	r25, Y+9	; 0x09
    3dd8:	80 3b       	cpi	r24, 0xB0	; 176
    3dda:	9b 40       	sbci	r25, 0x0B	; 11
    3ddc:	21 f4       	brne	.+8      	; 0x3de6 <usart_serial_init+0xda>
    3dde:	60 e2       	ldi	r22, 0x20	; 32
    3de0:	86 e0       	ldi	r24, 0x06	; 6
    3de2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sysclk_enable_module>
    3de6:	88 85       	ldd	r24, Y+8	; 0x08
    3de8:	99 85       	ldd	r25, Y+9	; 0x09
    3dea:	9e 01       	movw	r18, r28
    3dec:	2f 5f       	subi	r18, 0xFF	; 255
    3dee:	3f 4f       	sbci	r19, 0xFF	; 255
    3df0:	b9 01       	movw	r22, r18
    3df2:	60 d8       	rcall	.-3904   	; 0x2eb4 <usart_init_rs232>
    3df4:	88 23       	and	r24, r24
    3df6:	11 f0       	breq	.+4      	; 0x3dfc <usart_serial_init+0xf0>
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	01 c0       	rjmp	.+2      	; 0x3dfe <usart_serial_init+0xf2>
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	2b 96       	adiw	r28, 0x0b	; 11
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	08 95       	ret

00003e0a <usart_serial_putchar>:
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	00 d0       	rcall	.+0      	; 0x3e10 <usart_serial_putchar+0x6>
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	89 83       	std	Y+1, r24	; 0x01
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	6b 83       	std	Y+3, r22	; 0x03
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1e:	6b 81       	ldd	r22, Y+3	; 0x03
    3e20:	8f d8       	rcall	.-3810   	; 0x2f40 <usart_putchar>
    3e22:	23 96       	adiw	r28, 0x03	; 3
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	08 95       	ret

00003e2e <usart_serial_getchar>:
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
    3e32:	00 d0       	rcall	.+0      	; 0x3e34 <usart_serial_getchar+0x6>
    3e34:	1f 92       	push	r1
    3e36:	cd b7       	in	r28, 0x3d	; 61
    3e38:	de b7       	in	r29, 0x3e	; 62
    3e3a:	89 83       	std	Y+1, r24	; 0x01
    3e3c:	9a 83       	std	Y+2, r25	; 0x02
    3e3e:	6b 83       	std	Y+3, r22	; 0x03
    3e40:	7c 83       	std	Y+4, r23	; 0x04
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	9a d8       	rcall	.-3788   	; 0x2f7c <usart_getchar>
    3e48:	28 2f       	mov	r18, r24
    3e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4e:	fc 01       	movw	r30, r24
    3e50:	20 83       	st	Z, r18
    3e52:	00 00       	nop
    3e54:	24 96       	adiw	r28, 0x04	; 4
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	08 95       	ret

00003e60 <stdio_serial_init>:
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	00 d0       	rcall	.+0      	; 0x3e66 <stdio_serial_init+0x6>
    3e66:	1f 92       	push	r1
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	6b 83       	std	Y+3, r22	; 0x03
    3e72:	7c 83       	std	Y+4, r23	; 0x04
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	9a 81       	ldd	r25, Y+2	; 0x02
    3e78:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <stdio_base>
    3e7c:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <stdio_base+0x1>
    3e80:	85 e0       	ldi	r24, 0x05	; 5
    3e82:	9f e1       	ldi	r25, 0x1F	; 31
    3e84:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <ptr_put>
    3e88:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <ptr_put+0x1>
    3e8c:	87 e1       	ldi	r24, 0x17	; 23
    3e8e:	9f e1       	ldi	r25, 0x1F	; 31
    3e90:	80 93 94 20 	sts	0x2094, r24	; 0x802094 <ptr_get>
    3e94:	90 93 95 20 	sts	0x2095, r25	; 0x802095 <ptr_get+0x1>
    3e98:	2b 81       	ldd	r18, Y+3	; 0x03
    3e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea0:	b9 01       	movw	r22, r18
    3ea2:	34 df       	rcall	.-408    	; 0x3d0c <usart_serial_init>
    3ea4:	64 e9       	ldi	r22, 0x94	; 148
    3ea6:	72 e0       	ldi	r23, 0x02	; 2
    3ea8:	83 eb       	ldi	r24, 0xB3	; 179
    3eaa:	92 e0       	ldi	r25, 0x02	; 2
    3eac:	0e d6       	rcall	.+3100   	; 0x4aca <fdevopen>
    3eae:	00 00       	nop
    3eb0:	24 96       	adiw	r28, 0x04	; 4
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	08 95       	ret

00003ebc <uart_init>:
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	1f 92       	push	r1
    3ec2:	1f 92       	push	r1
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
    3ec8:	89 83       	std	Y+1, r24	; 0x01
    3eca:	9a 83       	std	Y+2, r25	; 0x02
    3ecc:	89 81       	ldd	r24, Y+1	; 0x01
    3ece:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	86 81       	ldd	r24, Z+6	; 0x06
    3ed4:	97 81       	ldd	r25, Z+7	; 0x07
    3ed6:	a0 85       	ldd	r26, Z+8	; 0x08
    3ed8:	b1 85       	ldd	r27, Z+9	; 0x09
    3eda:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6315>
    3ede:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6315+0x1>
    3ee2:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6315+0x2>
    3ee6:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6315+0x3>
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	fc 01       	movw	r30, r24
    3ef0:	80 81       	ld	r24, Z
    3ef2:	91 81       	ldd	r25, Z+1	; 0x01
    3ef4:	29 81       	ldd	r18, Y+1	; 0x01
    3ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    3ef8:	f9 01       	movw	r30, r18
    3efa:	20 81       	ld	r18, Z
    3efc:	31 81       	ldd	r19, Z+1	; 0x01
    3efe:	f9 01       	movw	r30, r18
    3f00:	40 81       	ld	r20, Z
    3f02:	29 81       	ldd	r18, Y+1	; 0x01
    3f04:	3a 81       	ldd	r19, Y+2	; 0x02
    3f06:	f9 01       	movw	r30, r18
    3f08:	25 81       	ldd	r18, Z+5	; 0x05
    3f0a:	24 2b       	or	r18, r20
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	20 83       	st	Z, r18
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	9a 81       	ldd	r25, Y+2	; 0x02
    3f14:	fc 01       	movw	r30, r24
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	29 81       	ldd	r18, Y+1	; 0x01
    3f1c:	3a 81       	ldd	r19, Y+2	; 0x02
    3f1e:	f9 01       	movw	r30, r18
    3f20:	20 81       	ld	r18, Z
    3f22:	31 81       	ldd	r19, Z+1	; 0x01
    3f24:	f9 01       	movw	r30, r18
    3f26:	44 81       	ldd	r20, Z+4	; 0x04
    3f28:	29 81       	ldd	r18, Y+1	; 0x01
    3f2a:	3a 81       	ldd	r19, Y+2	; 0x02
    3f2c:	f9 01       	movw	r30, r18
    3f2e:	25 81       	ldd	r18, Z+5	; 0x05
    3f30:	24 2b       	or	r18, r20
    3f32:	fc 01       	movw	r30, r24
    3f34:	24 83       	std	Z+4, r18	; 0x04
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	29 81       	ldd	r18, Y+1	; 0x01
    3f42:	3a 81       	ldd	r19, Y+2	; 0x02
    3f44:	f9 01       	movw	r30, r18
    3f46:	20 81       	ld	r18, Z
    3f48:	31 81       	ldd	r19, Z+1	; 0x01
    3f4a:	f9 01       	movw	r30, r18
    3f4c:	20 81       	ld	r18, Z
    3f4e:	42 2f       	mov	r20, r18
    3f50:	29 81       	ldd	r18, Y+1	; 0x01
    3f52:	3a 81       	ldd	r19, Y+2	; 0x02
    3f54:	f9 01       	movw	r30, r18
    3f56:	24 81       	ldd	r18, Z+4	; 0x04
    3f58:	20 95       	com	r18
    3f5a:	24 23       	and	r18, r20
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	20 83       	st	Z, r18
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	fc 01       	movw	r30, r24
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	93 81       	ldd	r25, Z+3	; 0x03
    3f6a:	38 dd       	rcall	.-1424   	; 0x39dc <sysclk_enable_peripheral_clock>
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	fc 01       	movw	r30, r24
    3f72:	82 81       	ldd	r24, Z+2	; 0x02
    3f74:	93 81       	ldd	r25, Z+3	; 0x03
    3f76:	66 e0       	ldi	r22, 0x06	; 6
    3f78:	70 e2       	ldi	r23, 0x20	; 32
    3f7a:	c8 de       	rcall	.-624    	; 0x3d0c <usart_serial_init>
    3f7c:	00 00       	nop
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	08 95       	ret

00003f88 <uart_terminal_init>:

void uart_terminal_init()
{
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    3f90:	80 ea       	ldi	r24, 0xA0	; 160
    3f92:	9a e0       	ldi	r25, 0x0A	; 10
    3f94:	23 dd       	rcall	.-1466   	; 0x39dc <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    3f96:	80 e8       	ldi	r24, 0x80	; 128
    3f98:	96 e0       	ldi	r25, 0x06	; 6
    3f9a:	20 e8       	ldi	r18, 0x80	; 128
    3f9c:	36 e0       	ldi	r19, 0x06	; 6
    3f9e:	f9 01       	movw	r30, r18
    3fa0:	20 81       	ld	r18, Z
    3fa2:	28 60       	ori	r18, 0x08	; 8
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    3fa8:	6d e0       	ldi	r22, 0x0D	; 13
    3faa:	70 e2       	ldi	r23, 0x20	; 32
    3fac:	80 ea       	ldi	r24, 0xA0	; 160
    3fae:	9a e0       	ldi	r25, 0x0A	; 10
    3fb0:	57 df       	rcall	.-338    	; 0x3e60 <stdio_serial_init>
	
}
    3fb2:	00 00       	nop
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	08 95       	ret

00003fba <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    3fba:	cf 93       	push	r28
    3fbc:	df 93       	push	r29
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	98 e4       	ldi	r25, 0x48	; 72
    3fc6:	a8 ee       	ldi	r26, 0xE8	; 232
    3fc8:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    3fca:	bc 01       	movw	r22, r24
    3fcc:	cd 01       	movw	r24, r26
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

00003fd4 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	1f 92       	push	r1
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    3fde:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    3fe0:	ec df       	rcall	.-40     	; 0x3fba <sysclk_get_main_hz>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	29 81       	ldd	r18, Y+1	; 0x01
    3fe8:	22 2f       	mov	r18, r18
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	04 c0       	rjmp	.+8      	; 0x3ff6 <sysclk_get_per4_hz+0x22>
    3fee:	b6 95       	lsr	r27
    3ff0:	a7 95       	ror	r26
    3ff2:	97 95       	ror	r25
    3ff4:	87 95       	ror	r24
    3ff6:	2a 95       	dec	r18
    3ff8:	d2 f7       	brpl	.-12     	; 0x3fee <sysclk_get_per4_hz+0x1a>
}
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0f 90       	pop	r0
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	08 95       	ret

00004006 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    400e:	e2 df       	rcall	.-60     	; 0x3fd4 <sysclk_get_per4_hz>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    4014:	bc 01       	movw	r22, r24
    4016:	cd 01       	movw	r24, r26
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	08 95       	ret

0000401e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    4026:	ef df       	rcall	.-34     	; 0x4006 <sysclk_get_per2_hz>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
}
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	08 95       	ret

00004036 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	cd b7       	in	r28, 0x3d	; 61
    403c:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    403e:	ef df       	rcall	.-34     	; 0x401e <sysclk_get_per_hz>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
}
    4044:	bc 01       	movw	r22, r24
    4046:	cd 01       	movw	r24, r26
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	08 95       	ret

0000404e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    404e:	04 c0       	rjmp	.+8      	; 0x4058 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4050:	61 50       	subi	r22, 0x01	; 1
    4052:	71 09       	sbc	r23, r1
    4054:	81 09       	sbc	r24, r1
    4056:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    4058:	61 15       	cp	r22, r1
    405a:	71 05       	cpc	r23, r1
    405c:	81 05       	cpc	r24, r1
    405e:	91 05       	cpc	r25, r1
    4060:	b9 f7       	brne	.-18     	; 0x4050 <__portable_avr_delay_cycles+0x2>
    4062:	08 95       	ret

00004064 <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    406c:	80 ea       	ldi	r24, 0xA0	; 160
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	27 e0       	ldi	r18, 0x07	; 7
    4072:	fc 01       	movw	r30, r24
    4074:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    4076:	00 00       	nop
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	08 95       	ret

0000407e <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	1f 92       	push	r1
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
    4088:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	88 2f       	mov	r24, r24
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	19 f0       	breq	.+6      	; 0x409a <pmic_set_scheduling+0x1c>
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	79 f0       	breq	.+30     	; 0x40b6 <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    4098:	18 c0       	rjmp	.+48     	; 0x40ca <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    409a:	80 ea       	ldi	r24, 0xA0	; 160
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	20 ea       	ldi	r18, 0xA0	; 160
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	f9 01       	movw	r30, r18
    40a4:	22 81       	ldd	r18, Z+2	; 0x02
    40a6:	2f 77       	andi	r18, 0x7F	; 127
    40a8:	fc 01       	movw	r30, r24
    40aa:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    40ac:	80 ea       	ldi	r24, 0xA0	; 160
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	fc 01       	movw	r30, r24
    40b2:	11 82       	std	Z+1, r1	; 0x01
		break;
    40b4:	0a c0       	rjmp	.+20     	; 0x40ca <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    40b6:	80 ea       	ldi	r24, 0xA0	; 160
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	20 ea       	ldi	r18, 0xA0	; 160
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	f9 01       	movw	r30, r18
    40c0:	22 81       	ldd	r18, Z+2	; 0x02
    40c2:	20 68       	ori	r18, 0x80	; 128
    40c4:	fc 01       	movw	r30, r24
    40c6:	22 83       	std	Z+2, r18	; 0x02
		break;
    40c8:	00 00       	nop

	default:
		break;
	};
}
    40ca:	00 00       	nop
    40cc:	0f 90       	pop	r0
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	08 95       	ret

000040d4 <main>:
#include "drivers/Xbee.h"
/************** I2C buffer length******/
volatile extern uint8_t XbeeRx;

int main (void)
{
    40d4:	2f 92       	push	r2
    40d6:	3f 92       	push	r3
    40d8:	4f 92       	push	r4
    40da:	5f 92       	push	r5
    40dc:	6f 92       	push	r6
    40de:	7f 92       	push	r7
    40e0:	8f 92       	push	r8
    40e2:	9f 92       	push	r9
    40e4:	af 92       	push	r10
    40e6:	bf 92       	push	r11
    40e8:	cf 92       	push	r12
    40ea:	df 92       	push	r13
    40ec:	ef 92       	push	r14
    40ee:	ff 92       	push	r15
    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	6f 97       	sbiw	r28, 0x1f	; 31
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	de bf       	out	0x3e, r29	; 62
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	
	
	sysclk_init();
    4102:	0e 94 3f 02 	call	0x47e	; 0x47e <sysclk_init>
	board_init();
    4106:	ab d9       	rcall	.-3242   	; 0x345e <board_init>
	uart_terminal_init();
    4108:	3f df       	rcall	.-386    	; 0x3f88 <uart_terminal_init>
    410a:	84 e1       	ldi	r24, 0x14	; 20
	printf("uart is working\n");
    410c:	90 e2       	ldi	r25, 0x20	; 32
    410e:	3a d5       	rcall	.+2676   	; 0x4b84 <puts>
	
	pmic_init();
    4110:	a9 df       	rcall	.-174    	; 0x4064 <pmic_init>
    4112:	81 e0       	ldi	r24, 0x01	; 1
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    4114:	b4 df       	rcall	.-152    	; 0x407e <pmic_set_scheduling>
    4116:	78 94       	sei
    4118:	49 e2       	ldi	r20, 0x29	; 41
	cpu_irq_enable();
    411a:	60 e0       	ldi	r22, 0x00	; 0
	
	I2CInit(115200,0x29);
    411c:	72 ec       	ldi	r23, 0xC2	; 194
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	ea db       	rcall	.-2092   	; 0x38f8 <I2CInit>
    4124:	0e 94 25 01 	call	0x24a	; 0x24a <xbee_init>
	xbee_init();
    4128:	86 df       	rcall	.-244    	; 0x4036 <sysclk_get_cpu_hz>
	//BNO055_Config();
	delay_ms(20);
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	9c 01       	movw	r18, r24
    4130:	ad 01       	movw	r20, r26
    4132:	60 e0       	ldi	r22, 0x00	; 0
    4134:	70 e0       	ldi	r23, 0x00	; 0
    4136:	cb 01       	movw	r24, r22
    4138:	82 2e       	mov	r8, r18
    413a:	93 2e       	mov	r9, r19
    413c:	a4 2e       	mov	r10, r20
    413e:	b5 2e       	mov	r11, r21
    4140:	c6 2e       	mov	r12, r22
    4142:	d7 2e       	mov	r13, r23
    4144:	e8 2e       	mov	r14, r24
    4146:	f9 2e       	mov	r15, r25
    4148:	28 2d       	mov	r18, r8
    414a:	39 2d       	mov	r19, r9
    414c:	4a 2d       	mov	r20, r10
    414e:	5b 2d       	mov	r21, r11
    4150:	6c 2d       	mov	r22, r12
    4152:	7d 2d       	mov	r23, r13
    4154:	8e 2d       	mov	r24, r14
    4156:	9f 2d       	mov	r25, r15
    4158:	02 e0       	ldi	r16, 0x02	; 2
    415a:	6b d3       	rcall	.+1750   	; 0x4832 <__ashldi3>
    415c:	28 8b       	std	Y+16, r18	; 0x10
    415e:	39 8b       	std	Y+17, r19	; 0x11
    4160:	4a 8b       	std	Y+18, r20	; 0x12
    4162:	5b 8b       	std	Y+19, r21	; 0x13
    4164:	6c 8b       	std	Y+20, r22	; 0x14
    4166:	7d 8b       	std	Y+21, r23	; 0x15
    4168:	8e 8b       	std	Y+22, r24	; 0x16
    416a:	9f 8b       	std	Y+23, r25	; 0x17
    416c:	88 88       	ldd	r8, Y+16	; 0x10
    416e:	99 88       	ldd	r9, Y+17	; 0x11
    4170:	aa 88       	ldd	r10, Y+18	; 0x12
    4172:	bb 88       	ldd	r11, Y+19	; 0x13
    4174:	cc 88       	ldd	r12, Y+20	; 0x14
    4176:	dd 88       	ldd	r13, Y+21	; 0x15
    4178:	ee 88       	ldd	r14, Y+22	; 0x16
    417a:	ff 88       	ldd	r15, Y+23	; 0x17
    417c:	28 2d       	mov	r18, r8
    417e:	39 2d       	mov	r19, r9
    4180:	4a 2d       	mov	r20, r10
    4182:	5b 2d       	mov	r21, r11
    4184:	6c 2d       	mov	r22, r12
    4186:	7d 2d       	mov	r23, r13
    4188:	8e 2d       	mov	r24, r14
    418a:	9f 2d       	mov	r25, r15
    418c:	02 e0       	ldi	r16, 0x02	; 2
    418e:	51 d3       	rcall	.+1698   	; 0x4832 <__ashldi3>
    4190:	28 8f       	std	Y+24, r18	; 0x18
    4192:	39 8f       	std	Y+25, r19	; 0x19
    4194:	4a 8f       	std	Y+26, r20	; 0x1a
    4196:	5b 8f       	std	Y+27, r21	; 0x1b
    4198:	6c 8f       	std	Y+28, r22	; 0x1c
    419a:	7d 8f       	std	Y+29, r23	; 0x1d
    419c:	8e 8f       	std	Y+30, r24	; 0x1e
    419e:	9f 8f       	std	Y+31, r25	; 0x1f
    41a0:	28 2d       	mov	r18, r8
    41a2:	39 2d       	mov	r19, r9
    41a4:	4a 2d       	mov	r20, r10
    41a6:	5b 2d       	mov	r21, r11
    41a8:	6c 2d       	mov	r22, r12
    41aa:	7d 2d       	mov	r23, r13
    41ac:	8e 2d       	mov	r24, r14
    41ae:	9f 2d       	mov	r25, r15
    41b0:	a8 8c       	ldd	r10, Y+24	; 0x18
    41b2:	b9 8c       	ldd	r11, Y+25	; 0x19
    41b4:	ca 8c       	ldd	r12, Y+26	; 0x1a
    41b6:	db 8c       	ldd	r13, Y+27	; 0x1b
    41b8:	ec 8c       	ldd	r14, Y+28	; 0x1c
    41ba:	fd 8c       	ldd	r15, Y+29	; 0x1d
    41bc:	0e 8d       	ldd	r16, Y+30	; 0x1e
    41be:	1f 8d       	ldd	r17, Y+31	; 0x1f
    41c0:	51 d3       	rcall	.+1698   	; 0x4864 <__adddi3>
    41c2:	22 2e       	mov	r2, r18
    41c4:	33 2e       	mov	r3, r19
    41c6:	44 2e       	mov	r4, r20
    41c8:	55 2e       	mov	r5, r21
    41ca:	66 2e       	mov	r6, r22
    41cc:	77 2e       	mov	r7, r23
    41ce:	88 2e       	mov	r8, r24
    41d0:	99 2e       	mov	r9, r25
    41d2:	0f 2e       	mov	r0, r31
    41d4:	f6 e0       	ldi	r31, 0x06	; 6
    41d6:	af 2e       	mov	r10, r31
    41d8:	f0 2d       	mov	r31, r0
    41da:	b1 2c       	mov	r11, r1
    41dc:	c1 2c       	mov	r12, r1
    41de:	d1 2c       	mov	r13, r1
    41e0:	e1 2c       	mov	r14, r1
    41e2:	f1 2c       	mov	r15, r1
    41e4:	00 e0       	ldi	r16, 0x00	; 0
    41e6:	10 e0       	ldi	r17, 0x00	; 0
    41e8:	22 2d       	mov	r18, r2
    41ea:	33 2d       	mov	r19, r3
    41ec:	44 2d       	mov	r20, r4
    41ee:	55 2d       	mov	r21, r5
    41f0:	66 2d       	mov	r22, r6
    41f2:	77 2d       	mov	r23, r7
    41f4:	88 2d       	mov	r24, r8
    41f6:	99 2d       	mov	r25, r9
    41f8:	c0 d2       	rcall	.+1408   	; 0x477a <__udivdi3>
    41fa:	22 2e       	mov	r2, r18
    41fc:	33 2e       	mov	r3, r19
    41fe:	44 2e       	mov	r4, r20
    4200:	55 2e       	mov	r5, r21
    4202:	66 2e       	mov	r6, r22
    4204:	77 2e       	mov	r7, r23
    4206:	88 2e       	mov	r8, r24
    4208:	99 2e       	mov	r9, r25
    420a:	a2 2c       	mov	r10, r2
    420c:	b3 2c       	mov	r11, r3
    420e:	c4 2c       	mov	r12, r4
    4210:	d5 2c       	mov	r13, r5
    4212:	e6 2c       	mov	r14, r6
    4214:	f7 2c       	mov	r15, r7
    4216:	08 2d       	mov	r16, r8
    4218:	19 2d       	mov	r17, r9
    421a:	2a 2d       	mov	r18, r10
    421c:	3b 2d       	mov	r19, r11
    421e:	4c 2d       	mov	r20, r12
    4220:	5d 2d       	mov	r21, r13
    4222:	6e 2d       	mov	r22, r14
    4224:	7f 2d       	mov	r23, r15
    4226:	80 2f       	mov	r24, r16
    4228:	91 2f       	mov	r25, r17
    422a:	29 51       	subi	r18, 0x19	; 25
    422c:	3c 4f       	sbci	r19, 0xFC	; 252
    422e:	4f 4f       	sbci	r20, 0xFF	; 255
    4230:	5f 4f       	sbci	r21, 0xFF	; 255
    4232:	6f 4f       	sbci	r22, 0xFF	; 255
    4234:	7f 4f       	sbci	r23, 0xFF	; 255
    4236:	8f 4f       	sbci	r24, 0xFF	; 255
    4238:	9f 4f       	sbci	r25, 0xFF	; 255
    423a:	a2 2e       	mov	r10, r18
    423c:	b3 2e       	mov	r11, r19
    423e:	c4 2e       	mov	r12, r20
    4240:	d5 2e       	mov	r13, r21
    4242:	e6 2e       	mov	r14, r22
    4244:	f7 2e       	mov	r15, r23
    4246:	08 2f       	mov	r16, r24
    4248:	19 2f       	mov	r17, r25
    424a:	2a 2d       	mov	r18, r10
    424c:	3b 2d       	mov	r19, r11
    424e:	4c 2d       	mov	r20, r12
    4250:	5d 2d       	mov	r21, r13
    4252:	6e 2d       	mov	r22, r14
    4254:	7f 2d       	mov	r23, r15
    4256:	80 2f       	mov	r24, r16
    4258:	91 2f       	mov	r25, r17
    425a:	cc d1       	rcall	.+920    	; 0x45f4 <__floatundisf>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	4a e7       	ldi	r20, 0x7A	; 122
    4266:	54 e4       	ldi	r21, 0x44	; 68
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	21 d1       	rcall	.+578    	; 0x44b0 <__divsf3>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	89 d1       	rcall	.+786    	; 0x458a <__fixunssfdi>
    4278:	a2 2e       	mov	r10, r18
    427a:	b3 2e       	mov	r11, r19
    427c:	c4 2e       	mov	r12, r20
    427e:	d5 2e       	mov	r13, r21
    4280:	e6 2e       	mov	r14, r22
    4282:	f7 2e       	mov	r15, r23
    4284:	08 2f       	mov	r16, r24
    4286:	19 2f       	mov	r17, r25
    4288:	d6 01       	movw	r26, r12
    428a:	c5 01       	movw	r24, r10
    428c:	bc 01       	movw	r22, r24
    428e:	cd 01       	movw	r24, r26
    4290:	de de       	rcall	.-580    	; 0x404e <__portable_avr_delay_cycles>
    4292:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t data;
	int16_t acel[3];
	while (1) 
	{
		BNO_Read(&data,0);
    4294:	ce 01       	movw	r24, r28
    4296:	01 96       	adiw	r24, 0x01	; 1
    4298:	8d db       	rcall	.-2278   	; 0x39b4 <BNO_Read>
    429a:	89 81       	ldd	r24, Y+1	; 0x01
		
		printf("\n id = %i",data);
    429c:	88 2f       	mov	r24, r24
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	29 2f       	mov	r18, r25
    42a2:	2f 93       	push	r18
    42a4:	8f 93       	push	r24
    42a6:	84 e2       	ldi	r24, 0x24	; 36
    42a8:	90 e2       	ldi	r25, 0x20	; 32
    42aa:	89 2f       	mov	r24, r25
    42ac:	8f 93       	push	r24
    42ae:	84 e2       	ldi	r24, 0x24	; 36
    42b0:	90 e2       	ldi	r25, 0x20	; 32
    42b2:	8f 93       	push	r24
    42b4:	54 d4       	rcall	.+2216   	; 0x4b5e <printf>
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	bb de       	rcall	.-650    	; 0x4036 <sysclk_get_cpu_hz>
		//BNO_Read(&data,BNO055_CALIB_STAT_ADDR);
		//printf("Calibstat %i\n",data);
		
		//printf("is calib %u",is_BNO_calib());
		
		delay_ms(500);
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	8c 01       	movw	r16, r24
    42c6:	9d 01       	movw	r18, r26
    42c8:	40 e0       	ldi	r20, 0x00	; 0
    42ca:	50 e0       	ldi	r21, 0x00	; 0
    42cc:	ba 01       	movw	r22, r20
    42ce:	08 87       	std	Y+8, r16	; 0x08
    42d0:	19 87       	std	Y+9, r17	; 0x09
    42d2:	2a 87       	std	Y+10, r18	; 0x0a
    42d4:	3b 87       	std	Y+11, r19	; 0x0b
    42d6:	4c 87       	std	Y+12, r20	; 0x0c
    42d8:	5d 87       	std	Y+13, r21	; 0x0d
    42da:	6e 87       	std	Y+14, r22	; 0x0e
    42dc:	7f 87       	std	Y+15, r23	; 0x0f
    42de:	28 84       	ldd	r2, Y+8	; 0x08
    42e0:	39 84       	ldd	r3, Y+9	; 0x09
    42e2:	4a 84       	ldd	r4, Y+10	; 0x0a
    42e4:	5b 84       	ldd	r5, Y+11	; 0x0b
    42e6:	6c 84       	ldd	r6, Y+12	; 0x0c
    42e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    42ea:	8e 84       	ldd	r8, Y+14	; 0x0e
    42ec:	9f 84       	ldd	r9, Y+15	; 0x0f
    42ee:	22 2d       	mov	r18, r2
    42f0:	33 2d       	mov	r19, r3
    42f2:	44 2d       	mov	r20, r4
    42f4:	55 2d       	mov	r21, r5
    42f6:	66 2d       	mov	r22, r6
    42f8:	77 2d       	mov	r23, r7
    42fa:	88 2d       	mov	r24, r8
    42fc:	99 2d       	mov	r25, r9
    42fe:	02 e0       	ldi	r16, 0x02	; 2
    4300:	98 d2       	rcall	.+1328   	; 0x4832 <__ashldi3>
    4302:	a2 2e       	mov	r10, r18
    4304:	b3 2e       	mov	r11, r19
    4306:	c4 2e       	mov	r12, r20
    4308:	d5 2e       	mov	r13, r21
    430a:	e6 2e       	mov	r14, r22
    430c:	f7 2e       	mov	r15, r23
    430e:	08 2f       	mov	r16, r24
    4310:	19 2f       	mov	r17, r25
    4312:	2a 2c       	mov	r2, r10
    4314:	3b 2c       	mov	r3, r11
    4316:	4c 2c       	mov	r4, r12
    4318:	5d 2c       	mov	r5, r13
    431a:	6e 2c       	mov	r6, r14
    431c:	7f 2c       	mov	r7, r15
    431e:	80 2e       	mov	r8, r16
    4320:	91 2e       	mov	r9, r17
    4322:	22 2d       	mov	r18, r2
    4324:	33 2d       	mov	r19, r3
    4326:	44 2d       	mov	r20, r4
    4328:	55 2d       	mov	r21, r5
    432a:	66 2d       	mov	r22, r6
    432c:	77 2d       	mov	r23, r7
    432e:	88 2d       	mov	r24, r8
    4330:	99 2d       	mov	r25, r9
    4332:	05 e0       	ldi	r16, 0x05	; 5
    4334:	7e d2       	rcall	.+1276   	; 0x4832 <__ashldi3>
    4336:	a2 2e       	mov	r10, r18
    4338:	b3 2e       	mov	r11, r19
    433a:	c4 2e       	mov	r12, r20
    433c:	d5 2e       	mov	r13, r21
    433e:	e6 2e       	mov	r14, r22
    4340:	f7 2e       	mov	r15, r23
    4342:	08 2f       	mov	r16, r24
    4344:	19 2f       	mov	r17, r25
    4346:	2a 2d       	mov	r18, r10
    4348:	3b 2d       	mov	r19, r11
    434a:	4c 2d       	mov	r20, r12
    434c:	5d 2d       	mov	r21, r13
    434e:	6e 2d       	mov	r22, r14
    4350:	7f 2d       	mov	r23, r15
    4352:	80 2f       	mov	r24, r16
    4354:	91 2f       	mov	r25, r17
    4356:	a2 2c       	mov	r10, r2
    4358:	b3 2c       	mov	r11, r3
    435a:	c4 2c       	mov	r12, r4
    435c:	d5 2c       	mov	r13, r5
    435e:	e6 2c       	mov	r14, r6
    4360:	f7 2c       	mov	r15, r7
    4362:	08 2d       	mov	r16, r8
    4364:	19 2d       	mov	r17, r9
    4366:	87 d2       	rcall	.+1294   	; 0x4876 <__subdi3>
    4368:	a2 2e       	mov	r10, r18
    436a:	b3 2e       	mov	r11, r19
    436c:	c4 2e       	mov	r12, r20
    436e:	d5 2e       	mov	r13, r21
    4370:	e6 2e       	mov	r14, r22
    4372:	f7 2e       	mov	r15, r23
    4374:	08 2f       	mov	r16, r24
    4376:	19 2f       	mov	r17, r25
    4378:	2a 2d       	mov	r18, r10
    437a:	3b 2d       	mov	r19, r11
    437c:	4c 2d       	mov	r20, r12
    437e:	5d 2d       	mov	r21, r13
    4380:	6e 2d       	mov	r22, r14
    4382:	7f 2d       	mov	r23, r15
    4384:	80 2f       	mov	r24, r16
    4386:	91 2f       	mov	r25, r17
    4388:	a8 84       	ldd	r10, Y+8	; 0x08
    438a:	b9 84       	ldd	r11, Y+9	; 0x09
    438c:	ca 84       	ldd	r12, Y+10	; 0x0a
    438e:	db 84       	ldd	r13, Y+11	; 0x0b
    4390:	ec 84       	ldd	r14, Y+12	; 0x0c
    4392:	fd 84       	ldd	r15, Y+13	; 0x0d
    4394:	0e 85       	ldd	r16, Y+14	; 0x0e
    4396:	1f 85       	ldd	r17, Y+15	; 0x0f
    4398:	65 d2       	rcall	.+1226   	; 0x4864 <__adddi3>
    439a:	a2 2e       	mov	r10, r18
    439c:	b3 2e       	mov	r11, r19
    439e:	c4 2e       	mov	r12, r20
    43a0:	d5 2e       	mov	r13, r21
    43a2:	e6 2e       	mov	r14, r22
    43a4:	f7 2e       	mov	r15, r23
    43a6:	08 2f       	mov	r16, r24
    43a8:	19 2f       	mov	r17, r25
    43aa:	2a 2d       	mov	r18, r10
    43ac:	3b 2d       	mov	r19, r11
    43ae:	4c 2d       	mov	r20, r12
    43b0:	5d 2d       	mov	r21, r13
    43b2:	6e 2d       	mov	r22, r14
    43b4:	7f 2d       	mov	r23, r15
    43b6:	80 2f       	mov	r24, r16
    43b8:	91 2f       	mov	r25, r17
    43ba:	02 e0       	ldi	r16, 0x02	; 2
    43bc:	3a d2       	rcall	.+1140   	; 0x4832 <__ashldi3>
    43be:	22 2e       	mov	r2, r18
    43c0:	33 2e       	mov	r3, r19
    43c2:	44 2e       	mov	r4, r20
    43c4:	55 2e       	mov	r5, r21
    43c6:	66 2e       	mov	r6, r22
    43c8:	77 2e       	mov	r7, r23
    43ca:	88 2e       	mov	r8, r24
    43cc:	99 2e       	mov	r9, r25
    43ce:	a2 2c       	mov	r10, r2
    43d0:	b3 2c       	mov	r11, r3
    43d2:	c4 2c       	mov	r12, r4
    43d4:	d5 2c       	mov	r13, r5
    43d6:	e6 2c       	mov	r14, r6
    43d8:	f7 2c       	mov	r15, r7
    43da:	08 2d       	mov	r16, r8
    43dc:	19 2d       	mov	r17, r9
    43de:	2a 2c       	mov	r2, r10
    43e0:	3b 2c       	mov	r3, r11
    43e2:	4c 2c       	mov	r4, r12
    43e4:	5d 2c       	mov	r5, r13
    43e6:	6e 2c       	mov	r6, r14
    43e8:	7f 2c       	mov	r7, r15
    43ea:	80 2e       	mov	r8, r16
    43ec:	91 2e       	mov	r9, r17
    43ee:	0f 2e       	mov	r0, r31
    43f0:	f6 e0       	ldi	r31, 0x06	; 6
    43f2:	af 2e       	mov	r10, r31
    43f4:	f0 2d       	mov	r31, r0
    43f6:	b1 2c       	mov	r11, r1
    43f8:	c1 2c       	mov	r12, r1
    43fa:	d1 2c       	mov	r13, r1
    43fc:	e1 2c       	mov	r14, r1
    43fe:	f1 2c       	mov	r15, r1
    4400:	00 e0       	ldi	r16, 0x00	; 0
    4402:	10 e0       	ldi	r17, 0x00	; 0
    4404:	22 2d       	mov	r18, r2
    4406:	33 2d       	mov	r19, r3
    4408:	44 2d       	mov	r20, r4
    440a:	55 2d       	mov	r21, r5
    440c:	66 2d       	mov	r22, r6
    440e:	77 2d       	mov	r23, r7
    4410:	88 2d       	mov	r24, r8
    4412:	99 2d       	mov	r25, r9
    4414:	b2 d1       	rcall	.+868    	; 0x477a <__udivdi3>
    4416:	22 2e       	mov	r2, r18
    4418:	33 2e       	mov	r3, r19
    441a:	44 2e       	mov	r4, r20
    441c:	55 2e       	mov	r5, r21
    441e:	66 2e       	mov	r6, r22
    4420:	77 2e       	mov	r7, r23
    4422:	88 2e       	mov	r8, r24
    4424:	99 2e       	mov	r9, r25
    4426:	a2 2c       	mov	r10, r2
    4428:	b3 2c       	mov	r11, r3
    442a:	c4 2c       	mov	r12, r4
    442c:	d5 2c       	mov	r13, r5
    442e:	e6 2c       	mov	r14, r6
    4430:	f7 2c       	mov	r15, r7
    4432:	08 2d       	mov	r16, r8
    4434:	19 2d       	mov	r17, r9
    4436:	2a 2d       	mov	r18, r10
    4438:	3b 2d       	mov	r19, r11
    443a:	4c 2d       	mov	r20, r12
    443c:	5d 2d       	mov	r21, r13
    443e:	6e 2d       	mov	r22, r14
    4440:	7f 2d       	mov	r23, r15
    4442:	80 2f       	mov	r24, r16
    4444:	91 2f       	mov	r25, r17
    4446:	29 51       	subi	r18, 0x19	; 25
    4448:	3c 4f       	sbci	r19, 0xFC	; 252
    444a:	4f 4f       	sbci	r20, 0xFF	; 255
    444c:	5f 4f       	sbci	r21, 0xFF	; 255
    444e:	6f 4f       	sbci	r22, 0xFF	; 255
    4450:	7f 4f       	sbci	r23, 0xFF	; 255
    4452:	8f 4f       	sbci	r24, 0xFF	; 255
    4454:	9f 4f       	sbci	r25, 0xFF	; 255
    4456:	a2 2e       	mov	r10, r18
    4458:	b3 2e       	mov	r11, r19
    445a:	c4 2e       	mov	r12, r20
    445c:	d5 2e       	mov	r13, r21
    445e:	e6 2e       	mov	r14, r22
    4460:	f7 2e       	mov	r15, r23
    4462:	08 2f       	mov	r16, r24
    4464:	19 2f       	mov	r17, r25
    4466:	2a 2d       	mov	r18, r10
    4468:	3b 2d       	mov	r19, r11
    446a:	4c 2d       	mov	r20, r12
    446c:	5d 2d       	mov	r21, r13
    446e:	6e 2d       	mov	r22, r14
    4470:	7f 2d       	mov	r23, r15
    4472:	80 2f       	mov	r24, r16
    4474:	91 2f       	mov	r25, r17
    4476:	be d0       	rcall	.+380    	; 0x45f4 <__floatundisf>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	4a e7       	ldi	r20, 0x7A	; 122
    4482:	54 e4       	ldi	r21, 0x44	; 68
    4484:	bc 01       	movw	r22, r24
    4486:	cd 01       	movw	r24, r26
    4488:	13 d0       	rcall	.+38     	; 0x44b0 <__divsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	bc 01       	movw	r22, r24
    4490:	cd 01       	movw	r24, r26
    4492:	7b d0       	rcall	.+246    	; 0x458a <__fixunssfdi>
    4494:	a2 2e       	mov	r10, r18
    4496:	b3 2e       	mov	r11, r19
    4498:	c4 2e       	mov	r12, r20
    449a:	d5 2e       	mov	r13, r21
    449c:	e6 2e       	mov	r14, r22
    449e:	f7 2e       	mov	r15, r23
    44a0:	08 2f       	mov	r16, r24
    44a2:	19 2f       	mov	r17, r25
    44a4:	d6 01       	movw	r26, r12
    44a6:	c5 01       	movw	r24, r10
    44a8:	bc 01       	movw	r22, r24
    44aa:	cd 01       	movw	r24, r26
    44ac:	d0 dd       	rcall	.-1120   	; 0x404e <__portable_avr_delay_cycles>
    44ae:	f1 ce       	rjmp	.-542    	; 0x4292 <main+0x1be>

000044b0 <__divsf3>:
    44b0:	0c d0       	rcall	.+24     	; 0x44ca <__divsf3x>
		

	}
    44b2:	05 c1       	rjmp	.+522    	; 0x46be <__fp_round>
    44b4:	fd d0       	rcall	.+506    	; 0x46b0 <__fp_pscB>
    44b6:	40 f0       	brcs	.+16     	; 0x44c8 <__divsf3+0x18>
    44b8:	f4 d0       	rcall	.+488    	; 0x46a2 <__fp_pscA>
    44ba:	30 f0       	brcs	.+12     	; 0x44c8 <__divsf3+0x18>
    44bc:	21 f4       	brne	.+8      	; 0x44c6 <__divsf3+0x16>
    44be:	5f 3f       	cpi	r21, 0xFF	; 255
    44c0:	19 f0       	breq	.+6      	; 0x44c8 <__divsf3+0x18>
    44c2:	d6 c0       	rjmp	.+428    	; 0x4670 <__fp_inf>
    44c4:	51 11       	cpse	r21, r1
    44c6:	2f c1       	rjmp	.+606    	; 0x4726 <__fp_szero>
    44c8:	d9 c0       	rjmp	.+434    	; 0x467c <__fp_nan>

000044ca <__divsf3x>:
    44ca:	0a d1       	rcall	.+532    	; 0x46e0 <__fp_split3>
    44cc:	98 f3       	brcs	.-26     	; 0x44b4 <__divsf3+0x4>

000044ce <__divsf3_pse>:
    44ce:	99 23       	and	r25, r25
    44d0:	c9 f3       	breq	.-14     	; 0x44c4 <__divsf3+0x14>
    44d2:	55 23       	and	r21, r21
    44d4:	b1 f3       	breq	.-20     	; 0x44c2 <__divsf3+0x12>
    44d6:	95 1b       	sub	r25, r21
    44d8:	55 0b       	sbc	r21, r21
    44da:	bb 27       	eor	r27, r27
    44dc:	aa 27       	eor	r26, r26
    44de:	62 17       	cp	r22, r18
    44e0:	73 07       	cpc	r23, r19
    44e2:	84 07       	cpc	r24, r20
    44e4:	38 f0       	brcs	.+14     	; 0x44f4 <__divsf3_pse+0x26>
    44e6:	9f 5f       	subi	r25, 0xFF	; 255
    44e8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ea:	22 0f       	add	r18, r18
    44ec:	33 1f       	adc	r19, r19
    44ee:	44 1f       	adc	r20, r20
    44f0:	aa 1f       	adc	r26, r26
    44f2:	a9 f3       	breq	.-22     	; 0x44de <__divsf3_pse+0x10>
    44f4:	33 d0       	rcall	.+102    	; 0x455c <__divsf3_pse+0x8e>
    44f6:	0e 2e       	mov	r0, r30
    44f8:	3a f0       	brmi	.+14     	; 0x4508 <__divsf3_pse+0x3a>
    44fa:	e0 e8       	ldi	r30, 0x80	; 128
    44fc:	30 d0       	rcall	.+96     	; 0x455e <__divsf3_pse+0x90>
    44fe:	91 50       	subi	r25, 0x01	; 1
    4500:	50 40       	sbci	r21, 0x00	; 0
    4502:	e6 95       	lsr	r30
    4504:	00 1c       	adc	r0, r0
    4506:	ca f7       	brpl	.-14     	; 0x44fa <__divsf3_pse+0x2c>
    4508:	29 d0       	rcall	.+82     	; 0x455c <__divsf3_pse+0x8e>
    450a:	fe 2f       	mov	r31, r30
    450c:	27 d0       	rcall	.+78     	; 0x455c <__divsf3_pse+0x8e>
    450e:	66 0f       	add	r22, r22
    4510:	77 1f       	adc	r23, r23
    4512:	88 1f       	adc	r24, r24
    4514:	bb 1f       	adc	r27, r27
    4516:	26 17       	cp	r18, r22
    4518:	37 07       	cpc	r19, r23
    451a:	48 07       	cpc	r20, r24
    451c:	ab 07       	cpc	r26, r27
    451e:	b0 e8       	ldi	r27, 0x80	; 128
    4520:	09 f0       	breq	.+2      	; 0x4524 <__divsf3_pse+0x56>
    4522:	bb 0b       	sbc	r27, r27
    4524:	80 2d       	mov	r24, r0
    4526:	bf 01       	movw	r22, r30
    4528:	ff 27       	eor	r31, r31
    452a:	93 58       	subi	r25, 0x83	; 131
    452c:	5f 4f       	sbci	r21, 0xFF	; 255
    452e:	2a f0       	brmi	.+10     	; 0x453a <__divsf3_pse+0x6c>
    4530:	9e 3f       	cpi	r25, 0xFE	; 254
    4532:	51 05       	cpc	r21, r1
    4534:	68 f0       	brcs	.+26     	; 0x4550 <__divsf3_pse+0x82>
    4536:	9c c0       	rjmp	.+312    	; 0x4670 <__fp_inf>
    4538:	f6 c0       	rjmp	.+492    	; 0x4726 <__fp_szero>
    453a:	5f 3f       	cpi	r21, 0xFF	; 255
    453c:	ec f3       	brlt	.-6      	; 0x4538 <__divsf3_pse+0x6a>
    453e:	98 3e       	cpi	r25, 0xE8	; 232
    4540:	dc f3       	brlt	.-10     	; 0x4538 <__divsf3_pse+0x6a>
    4542:	86 95       	lsr	r24
    4544:	77 95       	ror	r23
    4546:	67 95       	ror	r22
    4548:	b7 95       	ror	r27
    454a:	f7 95       	ror	r31
    454c:	9f 5f       	subi	r25, 0xFF	; 255
    454e:	c9 f7       	brne	.-14     	; 0x4542 <__divsf3_pse+0x74>
    4550:	88 0f       	add	r24, r24
    4552:	91 1d       	adc	r25, r1
    4554:	96 95       	lsr	r25
    4556:	87 95       	ror	r24
    4558:	97 f9       	bld	r25, 7
    455a:	08 95       	ret
    455c:	e1 e0       	ldi	r30, 0x01	; 1
    455e:	66 0f       	add	r22, r22
    4560:	77 1f       	adc	r23, r23
    4562:	88 1f       	adc	r24, r24
    4564:	bb 1f       	adc	r27, r27
    4566:	62 17       	cp	r22, r18
    4568:	73 07       	cpc	r23, r19
    456a:	84 07       	cpc	r24, r20
    456c:	ba 07       	cpc	r27, r26
    456e:	20 f0       	brcs	.+8      	; 0x4578 <__divsf3_pse+0xaa>
    4570:	62 1b       	sub	r22, r18
    4572:	73 0b       	sbc	r23, r19
    4574:	84 0b       	sbc	r24, r20
    4576:	ba 0b       	sbc	r27, r26
    4578:	ee 1f       	adc	r30, r30
    457a:	88 f7       	brcc	.-30     	; 0x455e <__divsf3_pse+0x90>
    457c:	e0 95       	com	r30
    457e:	08 95       	ret

00004580 <__fixsfdi>:
    4580:	be e3       	ldi	r27, 0x3E	; 62
    4582:	04 d0       	rcall	.+8      	; 0x458c <__fixunssfdi+0x2>
    4584:	08 f4       	brcc	.+2      	; 0x4588 <__fixsfdi+0x8>
    4586:	90 e8       	ldi	r25, 0x80	; 128
    4588:	08 95       	ret

0000458a <__fixunssfdi>:
    458a:	bf e3       	ldi	r27, 0x3F	; 63
    458c:	22 27       	eor	r18, r18
    458e:	33 27       	eor	r19, r19
    4590:	a9 01       	movw	r20, r18
    4592:	ae d0       	rcall	.+348    	; 0x46f0 <__fp_splitA>
    4594:	58 f1       	brcs	.+86     	; 0x45ec <__fixunssfdi+0x62>
    4596:	9f 57       	subi	r25, 0x7F	; 127
    4598:	40 f1       	brcs	.+80     	; 0x45ea <__fixunssfdi+0x60>
    459a:	b9 17       	cp	r27, r25
    459c:	38 f1       	brcs	.+78     	; 0x45ec <__fixunssfdi+0x62>
    459e:	bf e3       	ldi	r27, 0x3F	; 63
    45a0:	b9 1b       	sub	r27, r25
    45a2:	99 27       	eor	r25, r25
    45a4:	b8 50       	subi	r27, 0x08	; 8
    45a6:	3a f4       	brpl	.+14     	; 0x45b6 <__fixunssfdi+0x2c>
    45a8:	66 0f       	add	r22, r22
    45aa:	77 1f       	adc	r23, r23
    45ac:	88 1f       	adc	r24, r24
    45ae:	99 1f       	adc	r25, r25
    45b0:	b3 95       	inc	r27
    45b2:	d2 f3       	brmi	.-12     	; 0x45a8 <__fixunssfdi+0x1e>
    45b4:	16 c0       	rjmp	.+44     	; 0x45e2 <__fixunssfdi+0x58>
    45b6:	b8 50       	subi	r27, 0x08	; 8
    45b8:	4a f0       	brmi	.+18     	; 0x45cc <__fixunssfdi+0x42>
    45ba:	23 2f       	mov	r18, r19
    45bc:	34 2f       	mov	r19, r20
    45be:	45 2f       	mov	r20, r21
    45c0:	56 2f       	mov	r21, r22
    45c2:	67 2f       	mov	r22, r23
    45c4:	78 2f       	mov	r23, r24
    45c6:	88 27       	eor	r24, r24
    45c8:	b8 50       	subi	r27, 0x08	; 8
    45ca:	ba f7       	brpl	.-18     	; 0x45ba <__fixunssfdi+0x30>
    45cc:	b8 5f       	subi	r27, 0xF8	; 248
    45ce:	49 f0       	breq	.+18     	; 0x45e2 <__fixunssfdi+0x58>
    45d0:	86 95       	lsr	r24
    45d2:	77 95       	ror	r23
    45d4:	67 95       	ror	r22
    45d6:	57 95       	ror	r21
    45d8:	47 95       	ror	r20
    45da:	37 95       	ror	r19
    45dc:	27 95       	ror	r18
    45de:	ba 95       	dec	r27
    45e0:	b9 f7       	brne	.-18     	; 0x45d0 <__fixunssfdi+0x46>
    45e2:	0e f4       	brtc	.+2      	; 0x45e6 <__fixunssfdi+0x5c>
    45e4:	4e d0       	rcall	.+156    	; 0x4682 <__fp_negdi>
    45e6:	88 94       	clc
    45e8:	08 95       	ret
    45ea:	88 94       	clc
    45ec:	60 e0       	ldi	r22, 0x00	; 0
    45ee:	70 e0       	ldi	r23, 0x00	; 0
    45f0:	cb 01       	movw	r24, r22
    45f2:	08 95       	ret

000045f4 <__floatundisf>:
    45f4:	e8 94       	clt

000045f6 <__fp_di2sf>:
    45f6:	f9 2f       	mov	r31, r25
    45f8:	96 eb       	ldi	r25, 0xB6	; 182
    45fa:	ff 23       	and	r31, r31
    45fc:	81 f0       	breq	.+32     	; 0x461e <__fp_di2sf+0x28>
    45fe:	12 16       	cp	r1, r18
    4600:	13 06       	cpc	r1, r19
    4602:	14 06       	cpc	r1, r20
    4604:	44 0b       	sbc	r20, r20
    4606:	93 95       	inc	r25
    4608:	f6 95       	lsr	r31
    460a:	87 95       	ror	r24
    460c:	77 95       	ror	r23
    460e:	67 95       	ror	r22
    4610:	57 95       	ror	r21
    4612:	40 40       	sbci	r20, 0x00	; 0
    4614:	ff 23       	and	r31, r31
    4616:	b9 f7       	brne	.-18     	; 0x4606 <__fp_di2sf+0x10>
    4618:	1b c0       	rjmp	.+54     	; 0x4650 <__fp_di2sf+0x5a>
    461a:	99 27       	eor	r25, r25
    461c:	08 95       	ret
    461e:	88 23       	and	r24, r24
    4620:	51 f4       	brne	.+20     	; 0x4636 <__fp_di2sf+0x40>
    4622:	98 50       	subi	r25, 0x08	; 8
    4624:	d2 f7       	brpl	.-12     	; 0x461a <__fp_di2sf+0x24>
    4626:	87 2b       	or	r24, r23
    4628:	76 2f       	mov	r23, r22
    462a:	65 2f       	mov	r22, r21
    462c:	54 2f       	mov	r21, r20
    462e:	43 2f       	mov	r20, r19
    4630:	32 2f       	mov	r19, r18
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	b1 f3       	breq	.-20     	; 0x4622 <__fp_di2sf+0x2c>
    4636:	12 16       	cp	r1, r18
    4638:	13 06       	cpc	r1, r19
    463a:	14 06       	cpc	r1, r20
    463c:	44 0b       	sbc	r20, r20
    463e:	88 23       	and	r24, r24
    4640:	3a f0       	brmi	.+14     	; 0x4650 <__fp_di2sf+0x5a>
    4642:	9a 95       	dec	r25
    4644:	44 0f       	add	r20, r20
    4646:	55 1f       	adc	r21, r21
    4648:	66 1f       	adc	r22, r22
    464a:	77 1f       	adc	r23, r23
    464c:	88 1f       	adc	r24, r24
    464e:	ca f7       	brpl	.-14     	; 0x4642 <__fp_di2sf+0x4c>
    4650:	55 23       	and	r21, r21
    4652:	4a f4       	brpl	.+18     	; 0x4666 <__fp_di2sf+0x70>
    4654:	44 0f       	add	r20, r20
    4656:	55 1f       	adc	r21, r21
    4658:	11 f4       	brne	.+4      	; 0x465e <__fp_di2sf+0x68>
    465a:	60 ff       	sbrs	r22, 0
    465c:	04 c0       	rjmp	.+8      	; 0x4666 <__fp_di2sf+0x70>
    465e:	6f 5f       	subi	r22, 0xFF	; 255
    4660:	7f 4f       	sbci	r23, 0xFF	; 255
    4662:	8f 4f       	sbci	r24, 0xFF	; 255
    4664:	9f 4f       	sbci	r25, 0xFF	; 255
    4666:	88 0f       	add	r24, r24
    4668:	96 95       	lsr	r25
    466a:	87 95       	ror	r24
    466c:	97 f9       	bld	r25, 7
    466e:	08 95       	ret

00004670 <__fp_inf>:
    4670:	97 f9       	bld	r25, 7
    4672:	9f 67       	ori	r25, 0x7F	; 127
    4674:	80 e8       	ldi	r24, 0x80	; 128
    4676:	70 e0       	ldi	r23, 0x00	; 0
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	08 95       	ret

0000467c <__fp_nan>:
    467c:	9f ef       	ldi	r25, 0xFF	; 255
    467e:	80 ec       	ldi	r24, 0xC0	; 192
    4680:	08 95       	ret

00004682 <__fp_negdi>:
    4682:	90 95       	com	r25
    4684:	80 95       	com	r24
    4686:	70 95       	com	r23
    4688:	60 95       	com	r22
    468a:	50 95       	com	r21
    468c:	40 95       	com	r20
    468e:	30 95       	com	r19
    4690:	21 95       	neg	r18
    4692:	3f 4f       	sbci	r19, 0xFF	; 255
    4694:	4f 4f       	sbci	r20, 0xFF	; 255
    4696:	5f 4f       	sbci	r21, 0xFF	; 255
    4698:	6f 4f       	sbci	r22, 0xFF	; 255
    469a:	7f 4f       	sbci	r23, 0xFF	; 255
    469c:	8f 4f       	sbci	r24, 0xFF	; 255
    469e:	9f 4f       	sbci	r25, 0xFF	; 255
    46a0:	08 95       	ret

000046a2 <__fp_pscA>:
    46a2:	00 24       	eor	r0, r0
    46a4:	0a 94       	dec	r0
    46a6:	16 16       	cp	r1, r22
    46a8:	17 06       	cpc	r1, r23
    46aa:	18 06       	cpc	r1, r24
    46ac:	09 06       	cpc	r0, r25
    46ae:	08 95       	ret

000046b0 <__fp_pscB>:
    46b0:	00 24       	eor	r0, r0
    46b2:	0a 94       	dec	r0
    46b4:	12 16       	cp	r1, r18
    46b6:	13 06       	cpc	r1, r19
    46b8:	14 06       	cpc	r1, r20
    46ba:	05 06       	cpc	r0, r21
    46bc:	08 95       	ret

000046be <__fp_round>:
    46be:	09 2e       	mov	r0, r25
    46c0:	03 94       	inc	r0
    46c2:	00 0c       	add	r0, r0
    46c4:	11 f4       	brne	.+4      	; 0x46ca <__fp_round+0xc>
    46c6:	88 23       	and	r24, r24
    46c8:	52 f0       	brmi	.+20     	; 0x46de <__fp_round+0x20>
    46ca:	bb 0f       	add	r27, r27
    46cc:	40 f4       	brcc	.+16     	; 0x46de <__fp_round+0x20>
    46ce:	bf 2b       	or	r27, r31
    46d0:	11 f4       	brne	.+4      	; 0x46d6 <__fp_round+0x18>
    46d2:	60 ff       	sbrs	r22, 0
    46d4:	04 c0       	rjmp	.+8      	; 0x46de <__fp_round+0x20>
    46d6:	6f 5f       	subi	r22, 0xFF	; 255
    46d8:	7f 4f       	sbci	r23, 0xFF	; 255
    46da:	8f 4f       	sbci	r24, 0xFF	; 255
    46dc:	9f 4f       	sbci	r25, 0xFF	; 255
    46de:	08 95       	ret

000046e0 <__fp_split3>:
    46e0:	57 fd       	sbrc	r21, 7
    46e2:	90 58       	subi	r25, 0x80	; 128
    46e4:	44 0f       	add	r20, r20
    46e6:	55 1f       	adc	r21, r21
    46e8:	59 f0       	breq	.+22     	; 0x4700 <__fp_splitA+0x10>
    46ea:	5f 3f       	cpi	r21, 0xFF	; 255
    46ec:	71 f0       	breq	.+28     	; 0x470a <__fp_splitA+0x1a>
    46ee:	47 95       	ror	r20

000046f0 <__fp_splitA>:
    46f0:	88 0f       	add	r24, r24
    46f2:	97 fb       	bst	r25, 7
    46f4:	99 1f       	adc	r25, r25
    46f6:	61 f0       	breq	.+24     	; 0x4710 <__fp_splitA+0x20>
    46f8:	9f 3f       	cpi	r25, 0xFF	; 255
    46fa:	79 f0       	breq	.+30     	; 0x471a <__fp_splitA+0x2a>
    46fc:	87 95       	ror	r24
    46fe:	08 95       	ret
    4700:	12 16       	cp	r1, r18
    4702:	13 06       	cpc	r1, r19
    4704:	14 06       	cpc	r1, r20
    4706:	55 1f       	adc	r21, r21
    4708:	f2 cf       	rjmp	.-28     	; 0x46ee <__fp_split3+0xe>
    470a:	46 95       	lsr	r20
    470c:	f1 df       	rcall	.-30     	; 0x46f0 <__fp_splitA>
    470e:	08 c0       	rjmp	.+16     	; 0x4720 <__fp_splitA+0x30>
    4710:	16 16       	cp	r1, r22
    4712:	17 06       	cpc	r1, r23
    4714:	18 06       	cpc	r1, r24
    4716:	99 1f       	adc	r25, r25
    4718:	f1 cf       	rjmp	.-30     	; 0x46fc <__fp_splitA+0xc>
    471a:	86 95       	lsr	r24
    471c:	71 05       	cpc	r23, r1
    471e:	61 05       	cpc	r22, r1
    4720:	08 94       	sec
    4722:	08 95       	ret

00004724 <__fp_zero>:
    4724:	e8 94       	clt

00004726 <__fp_szero>:
    4726:	bb 27       	eor	r27, r27
    4728:	66 27       	eor	r22, r22
    472a:	77 27       	eor	r23, r23
    472c:	cb 01       	movw	r24, r22
    472e:	97 f9       	bld	r25, 7
    4730:	08 95       	ret

00004732 <__udivmodsi4>:
    4732:	a1 e2       	ldi	r26, 0x21	; 33
    4734:	1a 2e       	mov	r1, r26
    4736:	aa 1b       	sub	r26, r26
    4738:	bb 1b       	sub	r27, r27
    473a:	fd 01       	movw	r30, r26
    473c:	0d c0       	rjmp	.+26     	; 0x4758 <__udivmodsi4_ep>

0000473e <__udivmodsi4_loop>:
    473e:	aa 1f       	adc	r26, r26
    4740:	bb 1f       	adc	r27, r27
    4742:	ee 1f       	adc	r30, r30
    4744:	ff 1f       	adc	r31, r31
    4746:	a2 17       	cp	r26, r18
    4748:	b3 07       	cpc	r27, r19
    474a:	e4 07       	cpc	r30, r20
    474c:	f5 07       	cpc	r31, r21
    474e:	20 f0       	brcs	.+8      	; 0x4758 <__udivmodsi4_ep>
    4750:	a2 1b       	sub	r26, r18
    4752:	b3 0b       	sbc	r27, r19
    4754:	e4 0b       	sbc	r30, r20
    4756:	f5 0b       	sbc	r31, r21

00004758 <__udivmodsi4_ep>:
    4758:	66 1f       	adc	r22, r22
    475a:	77 1f       	adc	r23, r23
    475c:	88 1f       	adc	r24, r24
    475e:	99 1f       	adc	r25, r25
    4760:	1a 94       	dec	r1
    4762:	69 f7       	brne	.-38     	; 0x473e <__udivmodsi4_loop>
    4764:	60 95       	com	r22
    4766:	70 95       	com	r23
    4768:	80 95       	com	r24
    476a:	90 95       	com	r25
    476c:	9b 01       	movw	r18, r22
    476e:	ac 01       	movw	r20, r24
    4770:	bd 01       	movw	r22, r26
    4772:	cf 01       	movw	r24, r30
    4774:	08 95       	ret

00004776 <__umoddi3>:
    4776:	68 94       	set
    4778:	01 c0       	rjmp	.+2      	; 0x477c <__udivdi3_umoddi3>

0000477a <__udivdi3>:
    477a:	e8 94       	clt

0000477c <__udivdi3_umoddi3>:
    477c:	8f 92       	push	r8
    477e:	9f 92       	push	r9
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	05 d0       	rcall	.+10     	; 0x4790 <__udivmod64>
    4786:	df 91       	pop	r29
    4788:	cf 91       	pop	r28
    478a:	9f 90       	pop	r9
    478c:	8f 90       	pop	r8
    478e:	08 95       	ret

00004790 <__udivmod64>:
    4790:	88 24       	eor	r8, r8
    4792:	99 24       	eor	r9, r9
    4794:	f4 01       	movw	r30, r8
    4796:	e4 01       	movw	r28, r8
    4798:	b0 e4       	ldi	r27, 0x40	; 64
    479a:	9f 93       	push	r25
    479c:	aa 27       	eor	r26, r26
    479e:	9a 15       	cp	r25, r10
    47a0:	8b 04       	cpc	r8, r11
    47a2:	9c 04       	cpc	r9, r12
    47a4:	ed 05       	cpc	r30, r13
    47a6:	fe 05       	cpc	r31, r14
    47a8:	cf 05       	cpc	r28, r15
    47aa:	d0 07       	cpc	r29, r16
    47ac:	a1 07       	cpc	r26, r17
    47ae:	98 f4       	brcc	.+38     	; 0x47d6 <__udivmod64+0x46>
    47b0:	ad 2f       	mov	r26, r29
    47b2:	dc 2f       	mov	r29, r28
    47b4:	cf 2f       	mov	r28, r31
    47b6:	fe 2f       	mov	r31, r30
    47b8:	e9 2d       	mov	r30, r9
    47ba:	98 2c       	mov	r9, r8
    47bc:	89 2e       	mov	r8, r25
    47be:	98 2f       	mov	r25, r24
    47c0:	87 2f       	mov	r24, r23
    47c2:	76 2f       	mov	r23, r22
    47c4:	65 2f       	mov	r22, r21
    47c6:	54 2f       	mov	r21, r20
    47c8:	43 2f       	mov	r20, r19
    47ca:	32 2f       	mov	r19, r18
    47cc:	22 27       	eor	r18, r18
    47ce:	b8 50       	subi	r27, 0x08	; 8
    47d0:	31 f7       	brne	.-52     	; 0x479e <__udivmod64+0xe>
    47d2:	bf 91       	pop	r27
    47d4:	27 c0       	rjmp	.+78     	; 0x4824 <__udivmod64+0x94>
    47d6:	1b 2e       	mov	r1, r27
    47d8:	bf 91       	pop	r27
    47da:	bb 27       	eor	r27, r27
    47dc:	22 0f       	add	r18, r18
    47de:	33 1f       	adc	r19, r19
    47e0:	44 1f       	adc	r20, r20
    47e2:	55 1f       	adc	r21, r21
    47e4:	66 1f       	adc	r22, r22
    47e6:	77 1f       	adc	r23, r23
    47e8:	88 1f       	adc	r24, r24
    47ea:	99 1f       	adc	r25, r25
    47ec:	88 1c       	adc	r8, r8
    47ee:	99 1c       	adc	r9, r9
    47f0:	ee 1f       	adc	r30, r30
    47f2:	ff 1f       	adc	r31, r31
    47f4:	cc 1f       	adc	r28, r28
    47f6:	dd 1f       	adc	r29, r29
    47f8:	aa 1f       	adc	r26, r26
    47fa:	bb 1f       	adc	r27, r27
    47fc:	8a 14       	cp	r8, r10
    47fe:	9b 04       	cpc	r9, r11
    4800:	ec 05       	cpc	r30, r12
    4802:	fd 05       	cpc	r31, r13
    4804:	ce 05       	cpc	r28, r14
    4806:	df 05       	cpc	r29, r15
    4808:	a0 07       	cpc	r26, r16
    480a:	b1 07       	cpc	r27, r17
    480c:	48 f0       	brcs	.+18     	; 0x4820 <__udivmod64+0x90>
    480e:	8a 18       	sub	r8, r10
    4810:	9b 08       	sbc	r9, r11
    4812:	ec 09       	sbc	r30, r12
    4814:	fd 09       	sbc	r31, r13
    4816:	ce 09       	sbc	r28, r14
    4818:	df 09       	sbc	r29, r15
    481a:	a0 0b       	sbc	r26, r16
    481c:	b1 0b       	sbc	r27, r17
    481e:	21 60       	ori	r18, 0x01	; 1
    4820:	1a 94       	dec	r1
    4822:	e1 f6       	brne	.-72     	; 0x47dc <__udivmod64+0x4c>
    4824:	2e f4       	brtc	.+10     	; 0x4830 <__udivmod64+0xa0>
    4826:	94 01       	movw	r18, r8
    4828:	af 01       	movw	r20, r30
    482a:	be 01       	movw	r22, r28
    482c:	cd 01       	movw	r24, r26
    482e:	00 0c       	add	r0, r0
    4830:	08 95       	ret

00004832 <__ashldi3>:
    4832:	0f 93       	push	r16
    4834:	08 30       	cpi	r16, 0x08	; 8
    4836:	90 f0       	brcs	.+36     	; 0x485c <__ashldi3+0x2a>
    4838:	98 2f       	mov	r25, r24
    483a:	87 2f       	mov	r24, r23
    483c:	76 2f       	mov	r23, r22
    483e:	65 2f       	mov	r22, r21
    4840:	54 2f       	mov	r21, r20
    4842:	43 2f       	mov	r20, r19
    4844:	32 2f       	mov	r19, r18
    4846:	22 27       	eor	r18, r18
    4848:	08 50       	subi	r16, 0x08	; 8
    484a:	f4 cf       	rjmp	.-24     	; 0x4834 <__ashldi3+0x2>
    484c:	22 0f       	add	r18, r18
    484e:	33 1f       	adc	r19, r19
    4850:	44 1f       	adc	r20, r20
    4852:	55 1f       	adc	r21, r21
    4854:	66 1f       	adc	r22, r22
    4856:	77 1f       	adc	r23, r23
    4858:	88 1f       	adc	r24, r24
    485a:	99 1f       	adc	r25, r25
    485c:	0a 95       	dec	r16
    485e:	b2 f7       	brpl	.-20     	; 0x484c <__ashldi3+0x1a>
    4860:	0f 91       	pop	r16
    4862:	08 95       	ret

00004864 <__adddi3>:
    4864:	2a 0d       	add	r18, r10
    4866:	3b 1d       	adc	r19, r11
    4868:	4c 1d       	adc	r20, r12
    486a:	5d 1d       	adc	r21, r13
    486c:	6e 1d       	adc	r22, r14
    486e:	7f 1d       	adc	r23, r15
    4870:	80 1f       	adc	r24, r16
    4872:	91 1f       	adc	r25, r17
    4874:	08 95       	ret

00004876 <__subdi3>:
    4876:	2a 19       	sub	r18, r10
    4878:	3b 09       	sbc	r19, r11
    487a:	4c 09       	sbc	r20, r12
    487c:	5d 09       	sbc	r21, r13
    487e:	6e 09       	sbc	r22, r14
    4880:	7f 09       	sbc	r23, r15
    4882:	80 0b       	sbc	r24, r16
    4884:	91 0b       	sbc	r25, r17
    4886:	08 95       	ret

00004888 <malloc>:
    4888:	0f 93       	push	r16
    488a:	1f 93       	push	r17
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	82 30       	cpi	r24, 0x02	; 2
    4892:	91 05       	cpc	r25, r1
    4894:	10 f4       	brcc	.+4      	; 0x489a <malloc+0x12>
    4896:	82 e0       	ldi	r24, 0x02	; 2
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <__flp>
    489e:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <__flp+0x1>
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	30 97       	sbiw	r30, 0x00	; 0
    48ac:	19 f1       	breq	.+70     	; 0x48f4 <malloc+0x6c>
    48ae:	40 81       	ld	r20, Z
    48b0:	51 81       	ldd	r21, Z+1	; 0x01
    48b2:	02 81       	ldd	r16, Z+2	; 0x02
    48b4:	13 81       	ldd	r17, Z+3	; 0x03
    48b6:	48 17       	cp	r20, r24
    48b8:	59 07       	cpc	r21, r25
    48ba:	c8 f0       	brcs	.+50     	; 0x48ee <malloc+0x66>
    48bc:	84 17       	cp	r24, r20
    48be:	95 07       	cpc	r25, r21
    48c0:	69 f4       	brne	.+26     	; 0x48dc <malloc+0x54>
    48c2:	10 97       	sbiw	r26, 0x00	; 0
    48c4:	31 f0       	breq	.+12     	; 0x48d2 <malloc+0x4a>
    48c6:	12 96       	adiw	r26, 0x02	; 2
    48c8:	0c 93       	st	X, r16
    48ca:	12 97       	sbiw	r26, 0x02	; 2
    48cc:	13 96       	adiw	r26, 0x03	; 3
    48ce:	1c 93       	st	X, r17
    48d0:	27 c0       	rjmp	.+78     	; 0x4920 <malloc+0x98>
    48d2:	00 93 a5 20 	sts	0x20A5, r16	; 0x8020a5 <__flp>
    48d6:	10 93 a6 20 	sts	0x20A6, r17	; 0x8020a6 <__flp+0x1>
    48da:	22 c0       	rjmp	.+68     	; 0x4920 <malloc+0x98>
    48dc:	21 15       	cp	r18, r1
    48de:	31 05       	cpc	r19, r1
    48e0:	19 f0       	breq	.+6      	; 0x48e8 <malloc+0x60>
    48e2:	42 17       	cp	r20, r18
    48e4:	53 07       	cpc	r21, r19
    48e6:	18 f4       	brcc	.+6      	; 0x48ee <malloc+0x66>
    48e8:	9a 01       	movw	r18, r20
    48ea:	bd 01       	movw	r22, r26
    48ec:	ef 01       	movw	r28, r30
    48ee:	df 01       	movw	r26, r30
    48f0:	f8 01       	movw	r30, r16
    48f2:	db cf       	rjmp	.-74     	; 0x48aa <malloc+0x22>
    48f4:	21 15       	cp	r18, r1
    48f6:	31 05       	cpc	r19, r1
    48f8:	f9 f0       	breq	.+62     	; 0x4938 <malloc+0xb0>
    48fa:	28 1b       	sub	r18, r24
    48fc:	39 0b       	sbc	r19, r25
    48fe:	24 30       	cpi	r18, 0x04	; 4
    4900:	31 05       	cpc	r19, r1
    4902:	80 f4       	brcc	.+32     	; 0x4924 <malloc+0x9c>
    4904:	8a 81       	ldd	r24, Y+2	; 0x02
    4906:	9b 81       	ldd	r25, Y+3	; 0x03
    4908:	61 15       	cp	r22, r1
    490a:	71 05       	cpc	r23, r1
    490c:	21 f0       	breq	.+8      	; 0x4916 <malloc+0x8e>
    490e:	fb 01       	movw	r30, r22
    4910:	82 83       	std	Z+2, r24	; 0x02
    4912:	93 83       	std	Z+3, r25	; 0x03
    4914:	04 c0       	rjmp	.+8      	; 0x491e <malloc+0x96>
    4916:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <__flp>
    491a:	90 93 a6 20 	sts	0x20A6, r25	; 0x8020a6 <__flp+0x1>
    491e:	fe 01       	movw	r30, r28
    4920:	32 96       	adiw	r30, 0x02	; 2
    4922:	44 c0       	rjmp	.+136    	; 0x49ac <malloc+0x124>
    4924:	fe 01       	movw	r30, r28
    4926:	e2 0f       	add	r30, r18
    4928:	f3 1f       	adc	r31, r19
    492a:	81 93       	st	Z+, r24
    492c:	91 93       	st	Z+, r25
    492e:	22 50       	subi	r18, 0x02	; 2
    4930:	31 09       	sbc	r19, r1
    4932:	28 83       	st	Y, r18
    4934:	39 83       	std	Y+1, r19	; 0x01
    4936:	3a c0       	rjmp	.+116    	; 0x49ac <malloc+0x124>
    4938:	20 91 a3 20 	lds	r18, 0x20A3	; 0x8020a3 <__brkval>
    493c:	30 91 a4 20 	lds	r19, 0x20A4	; 0x8020a4 <__brkval+0x1>
    4940:	23 2b       	or	r18, r19
    4942:	41 f4       	brne	.+16     	; 0x4954 <malloc+0xcc>
    4944:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4948:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    494c:	20 93 a3 20 	sts	0x20A3, r18	; 0x8020a3 <__brkval>
    4950:	30 93 a4 20 	sts	0x20A4, r19	; 0x8020a4 <__brkval+0x1>
    4954:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4958:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    495c:	21 15       	cp	r18, r1
    495e:	31 05       	cpc	r19, r1
    4960:	41 f4       	brne	.+16     	; 0x4972 <malloc+0xea>
    4962:	2d b7       	in	r18, 0x3d	; 61
    4964:	3e b7       	in	r19, 0x3e	; 62
    4966:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    496a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    496e:	24 1b       	sub	r18, r20
    4970:	35 0b       	sbc	r19, r21
    4972:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <__brkval>
    4976:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <__brkval+0x1>
    497a:	e2 17       	cp	r30, r18
    497c:	f3 07       	cpc	r31, r19
    497e:	a0 f4       	brcc	.+40     	; 0x49a8 <malloc+0x120>
    4980:	2e 1b       	sub	r18, r30
    4982:	3f 0b       	sbc	r19, r31
    4984:	28 17       	cp	r18, r24
    4986:	39 07       	cpc	r19, r25
    4988:	78 f0       	brcs	.+30     	; 0x49a8 <malloc+0x120>
    498a:	ac 01       	movw	r20, r24
    498c:	4e 5f       	subi	r20, 0xFE	; 254
    498e:	5f 4f       	sbci	r21, 0xFF	; 255
    4990:	24 17       	cp	r18, r20
    4992:	35 07       	cpc	r19, r21
    4994:	48 f0       	brcs	.+18     	; 0x49a8 <malloc+0x120>
    4996:	4e 0f       	add	r20, r30
    4998:	5f 1f       	adc	r21, r31
    499a:	40 93 a3 20 	sts	0x20A3, r20	; 0x8020a3 <__brkval>
    499e:	50 93 a4 20 	sts	0x20A4, r21	; 0x8020a4 <__brkval+0x1>
    49a2:	81 93       	st	Z+, r24
    49a4:	91 93       	st	Z+, r25
    49a6:	02 c0       	rjmp	.+4      	; 0x49ac <malloc+0x124>
    49a8:	e0 e0       	ldi	r30, 0x00	; 0
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	cf 01       	movw	r24, r30
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	08 95       	ret

000049b8 <free>:
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	00 97       	sbiw	r24, 0x00	; 0
    49be:	09 f4       	brne	.+2      	; 0x49c2 <free+0xa>
    49c0:	81 c0       	rjmp	.+258    	; 0x4ac4 <free+0x10c>
    49c2:	fc 01       	movw	r30, r24
    49c4:	32 97       	sbiw	r30, 0x02	; 2
    49c6:	12 82       	std	Z+2, r1	; 0x02
    49c8:	13 82       	std	Z+3, r1	; 0x03
    49ca:	a0 91 a5 20 	lds	r26, 0x20A5	; 0x8020a5 <__flp>
    49ce:	b0 91 a6 20 	lds	r27, 0x20A6	; 0x8020a6 <__flp+0x1>
    49d2:	10 97       	sbiw	r26, 0x00	; 0
    49d4:	81 f4       	brne	.+32     	; 0x49f6 <free+0x3e>
    49d6:	20 81       	ld	r18, Z
    49d8:	31 81       	ldd	r19, Z+1	; 0x01
    49da:	82 0f       	add	r24, r18
    49dc:	93 1f       	adc	r25, r19
    49de:	20 91 a3 20 	lds	r18, 0x20A3	; 0x8020a3 <__brkval>
    49e2:	30 91 a4 20 	lds	r19, 0x20A4	; 0x8020a4 <__brkval+0x1>
    49e6:	28 17       	cp	r18, r24
    49e8:	39 07       	cpc	r19, r25
    49ea:	51 f5       	brne	.+84     	; 0x4a40 <free+0x88>
    49ec:	e0 93 a3 20 	sts	0x20A3, r30	; 0x8020a3 <__brkval>
    49f0:	f0 93 a4 20 	sts	0x20A4, r31	; 0x8020a4 <__brkval+0x1>
    49f4:	67 c0       	rjmp	.+206    	; 0x4ac4 <free+0x10c>
    49f6:	ed 01       	movw	r28, r26
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	ce 17       	cp	r28, r30
    49fe:	df 07       	cpc	r29, r31
    4a00:	40 f4       	brcc	.+16     	; 0x4a12 <free+0x5a>
    4a02:	4a 81       	ldd	r20, Y+2	; 0x02
    4a04:	5b 81       	ldd	r21, Y+3	; 0x03
    4a06:	9e 01       	movw	r18, r28
    4a08:	41 15       	cp	r20, r1
    4a0a:	51 05       	cpc	r21, r1
    4a0c:	f1 f0       	breq	.+60     	; 0x4a4a <free+0x92>
    4a0e:	ea 01       	movw	r28, r20
    4a10:	f5 cf       	rjmp	.-22     	; 0x49fc <free+0x44>
    4a12:	c2 83       	std	Z+2, r28	; 0x02
    4a14:	d3 83       	std	Z+3, r29	; 0x03
    4a16:	40 81       	ld	r20, Z
    4a18:	51 81       	ldd	r21, Z+1	; 0x01
    4a1a:	84 0f       	add	r24, r20
    4a1c:	95 1f       	adc	r25, r21
    4a1e:	c8 17       	cp	r28, r24
    4a20:	d9 07       	cpc	r29, r25
    4a22:	59 f4       	brne	.+22     	; 0x4a3a <free+0x82>
    4a24:	88 81       	ld	r24, Y
    4a26:	99 81       	ldd	r25, Y+1	; 0x01
    4a28:	84 0f       	add	r24, r20
    4a2a:	95 1f       	adc	r25, r21
    4a2c:	02 96       	adiw	r24, 0x02	; 2
    4a2e:	80 83       	st	Z, r24
    4a30:	91 83       	std	Z+1, r25	; 0x01
    4a32:	8a 81       	ldd	r24, Y+2	; 0x02
    4a34:	9b 81       	ldd	r25, Y+3	; 0x03
    4a36:	82 83       	std	Z+2, r24	; 0x02
    4a38:	93 83       	std	Z+3, r25	; 0x03
    4a3a:	21 15       	cp	r18, r1
    4a3c:	31 05       	cpc	r19, r1
    4a3e:	29 f4       	brne	.+10     	; 0x4a4a <free+0x92>
    4a40:	e0 93 a5 20 	sts	0x20A5, r30	; 0x8020a5 <__flp>
    4a44:	f0 93 a6 20 	sts	0x20A6, r31	; 0x8020a6 <__flp+0x1>
    4a48:	3d c0       	rjmp	.+122    	; 0x4ac4 <free+0x10c>
    4a4a:	e9 01       	movw	r28, r18
    4a4c:	ea 83       	std	Y+2, r30	; 0x02
    4a4e:	fb 83       	std	Y+3, r31	; 0x03
    4a50:	49 91       	ld	r20, Y+
    4a52:	59 91       	ld	r21, Y+
    4a54:	c4 0f       	add	r28, r20
    4a56:	d5 1f       	adc	r29, r21
    4a58:	ec 17       	cp	r30, r28
    4a5a:	fd 07       	cpc	r31, r29
    4a5c:	61 f4       	brne	.+24     	; 0x4a76 <free+0xbe>
    4a5e:	80 81       	ld	r24, Z
    4a60:	91 81       	ldd	r25, Z+1	; 0x01
    4a62:	84 0f       	add	r24, r20
    4a64:	95 1f       	adc	r25, r21
    4a66:	02 96       	adiw	r24, 0x02	; 2
    4a68:	e9 01       	movw	r28, r18
    4a6a:	88 83       	st	Y, r24
    4a6c:	99 83       	std	Y+1, r25	; 0x01
    4a6e:	82 81       	ldd	r24, Z+2	; 0x02
    4a70:	93 81       	ldd	r25, Z+3	; 0x03
    4a72:	8a 83       	std	Y+2, r24	; 0x02
    4a74:	9b 83       	std	Y+3, r25	; 0x03
    4a76:	e0 e0       	ldi	r30, 0x00	; 0
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	12 96       	adiw	r26, 0x02	; 2
    4a7c:	8d 91       	ld	r24, X+
    4a7e:	9c 91       	ld	r25, X
    4a80:	13 97       	sbiw	r26, 0x03	; 3
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	19 f0       	breq	.+6      	; 0x4a8c <free+0xd4>
    4a86:	fd 01       	movw	r30, r26
    4a88:	dc 01       	movw	r26, r24
    4a8a:	f7 cf       	rjmp	.-18     	; 0x4a7a <free+0xc2>
    4a8c:	8d 91       	ld	r24, X+
    4a8e:	9c 91       	ld	r25, X
    4a90:	11 97       	sbiw	r26, 0x01	; 1
    4a92:	9d 01       	movw	r18, r26
    4a94:	2e 5f       	subi	r18, 0xFE	; 254
    4a96:	3f 4f       	sbci	r19, 0xFF	; 255
    4a98:	82 0f       	add	r24, r18
    4a9a:	93 1f       	adc	r25, r19
    4a9c:	20 91 a3 20 	lds	r18, 0x20A3	; 0x8020a3 <__brkval>
    4aa0:	30 91 a4 20 	lds	r19, 0x20A4	; 0x8020a4 <__brkval+0x1>
    4aa4:	28 17       	cp	r18, r24
    4aa6:	39 07       	cpc	r19, r25
    4aa8:	69 f4       	brne	.+26     	; 0x4ac4 <free+0x10c>
    4aaa:	30 97       	sbiw	r30, 0x00	; 0
    4aac:	29 f4       	brne	.+10     	; 0x4ab8 <free+0x100>
    4aae:	10 92 a5 20 	sts	0x20A5, r1	; 0x8020a5 <__flp>
    4ab2:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <__flp+0x1>
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <free+0x104>
    4ab8:	12 82       	std	Z+2, r1	; 0x02
    4aba:	13 82       	std	Z+3, r1	; 0x03
    4abc:	a0 93 a3 20 	sts	0x20A3, r26	; 0x8020a3 <__brkval>
    4ac0:	b0 93 a4 20 	sts	0x20A4, r27	; 0x8020a4 <__brkval+0x1>
    4ac4:	df 91       	pop	r29
    4ac6:	cf 91       	pop	r28
    4ac8:	08 95       	ret

00004aca <fdevopen>:
    4aca:	0f 93       	push	r16
    4acc:	1f 93       	push	r17
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	00 97       	sbiw	r24, 0x00	; 0
    4ad4:	31 f4       	brne	.+12     	; 0x4ae2 <fdevopen+0x18>
    4ad6:	61 15       	cp	r22, r1
    4ad8:	71 05       	cpc	r23, r1
    4ada:	19 f4       	brne	.+6      	; 0x4ae2 <fdevopen+0x18>
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	39 c0       	rjmp	.+114    	; 0x4b54 <fdevopen+0x8a>
    4ae2:	8b 01       	movw	r16, r22
    4ae4:	ec 01       	movw	r28, r24
    4ae6:	6e e0       	ldi	r22, 0x0E	; 14
    4ae8:	70 e0       	ldi	r23, 0x00	; 0
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	71 d2       	rcall	.+1250   	; 0x4fd2 <calloc>
    4af0:	fc 01       	movw	r30, r24
    4af2:	89 2b       	or	r24, r25
    4af4:	99 f3       	breq	.-26     	; 0x4adc <fdevopen+0x12>
    4af6:	80 e8       	ldi	r24, 0x80	; 128
    4af8:	83 83       	std	Z+3, r24	; 0x03
    4afa:	01 15       	cp	r16, r1
    4afc:	11 05       	cpc	r17, r1
    4afe:	71 f0       	breq	.+28     	; 0x4b1c <fdevopen+0x52>
    4b00:	02 87       	std	Z+10, r16	; 0x0a
    4b02:	13 87       	std	Z+11, r17	; 0x0b
    4b04:	81 e8       	ldi	r24, 0x81	; 129
    4b06:	83 83       	std	Z+3, r24	; 0x03
    4b08:	80 91 a7 20 	lds	r24, 0x20A7	; 0x8020a7 <__iob>
    4b0c:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <__iob+0x1>
    4b10:	89 2b       	or	r24, r25
    4b12:	21 f4       	brne	.+8      	; 0x4b1c <fdevopen+0x52>
    4b14:	e0 93 a7 20 	sts	0x20A7, r30	; 0x8020a7 <__iob>
    4b18:	f0 93 a8 20 	sts	0x20A8, r31	; 0x8020a8 <__iob+0x1>
    4b1c:	20 97       	sbiw	r28, 0x00	; 0
    4b1e:	c9 f0       	breq	.+50     	; 0x4b52 <fdevopen+0x88>
    4b20:	c0 87       	std	Z+8, r28	; 0x08
    4b22:	d1 87       	std	Z+9, r29	; 0x09
    4b24:	83 81       	ldd	r24, Z+3	; 0x03
    4b26:	82 60       	ori	r24, 0x02	; 2
    4b28:	83 83       	std	Z+3, r24	; 0x03
    4b2a:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <__iob+0x2>
    4b2e:	90 91 aa 20 	lds	r25, 0x20AA	; 0x8020aa <__iob+0x3>
    4b32:	89 2b       	or	r24, r25
    4b34:	71 f4       	brne	.+28     	; 0x4b52 <fdevopen+0x88>
    4b36:	e0 93 a9 20 	sts	0x20A9, r30	; 0x8020a9 <__iob+0x2>
    4b3a:	f0 93 aa 20 	sts	0x20AA, r31	; 0x8020aa <__iob+0x3>
    4b3e:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <__iob+0x4>
    4b42:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <__iob+0x5>
    4b46:	89 2b       	or	r24, r25
    4b48:	21 f4       	brne	.+8      	; 0x4b52 <fdevopen+0x88>
    4b4a:	e0 93 ab 20 	sts	0x20AB, r30	; 0x8020ab <__iob+0x4>
    4b4e:	f0 93 ac 20 	sts	0x20AC, r31	; 0x8020ac <__iob+0x5>
    4b52:	cf 01       	movw	r24, r30
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <printf>:
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	ae 01       	movw	r20, r28
    4b68:	4a 5f       	subi	r20, 0xFA	; 250
    4b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b6c:	fa 01       	movw	r30, r20
    4b6e:	61 91       	ld	r22, Z+
    4b70:	71 91       	ld	r23, Z+
    4b72:	af 01       	movw	r20, r30
    4b74:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <__iob+0x2>
    4b78:	90 91 aa 20 	lds	r25, 0x20AA	; 0x8020aa <__iob+0x3>
    4b7c:	33 d0       	rcall	.+102    	; 0x4be4 <vfprintf>
    4b7e:	df 91       	pop	r29
    4b80:	cf 91       	pop	r28
    4b82:	08 95       	ret

00004b84 <puts>:
    4b84:	0f 93       	push	r16
    4b86:	1f 93       	push	r17
    4b88:	cf 93       	push	r28
    4b8a:	df 93       	push	r29
    4b8c:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <__iob+0x2>
    4b90:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <__iob+0x3>
    4b94:	23 81       	ldd	r18, Z+3	; 0x03
    4b96:	21 ff       	sbrs	r18, 1
    4b98:	1b c0       	rjmp	.+54     	; 0x4bd0 <puts+0x4c>
    4b9a:	8c 01       	movw	r16, r24
    4b9c:	d0 e0       	ldi	r29, 0x00	; 0
    4b9e:	c0 e0       	ldi	r28, 0x00	; 0
    4ba0:	f8 01       	movw	r30, r16
    4ba2:	81 91       	ld	r24, Z+
    4ba4:	8f 01       	movw	r16, r30
    4ba6:	60 91 a9 20 	lds	r22, 0x20A9	; 0x8020a9 <__iob+0x2>
    4baa:	70 91 aa 20 	lds	r23, 0x20AA	; 0x8020aa <__iob+0x3>
    4bae:	db 01       	movw	r26, r22
    4bb0:	18 96       	adiw	r26, 0x08	; 8
    4bb2:	ed 91       	ld	r30, X+
    4bb4:	fc 91       	ld	r31, X
    4bb6:	19 97       	sbiw	r26, 0x09	; 9
    4bb8:	88 23       	and	r24, r24
    4bba:	31 f0       	breq	.+12     	; 0x4bc8 <puts+0x44>
    4bbc:	19 95       	eicall
    4bbe:	89 2b       	or	r24, r25
    4bc0:	79 f3       	breq	.-34     	; 0x4ba0 <puts+0x1c>
    4bc2:	df ef       	ldi	r29, 0xFF	; 255
    4bc4:	cf ef       	ldi	r28, 0xFF	; 255
    4bc6:	ec cf       	rjmp	.-40     	; 0x4ba0 <puts+0x1c>
    4bc8:	8a e0       	ldi	r24, 0x0A	; 10
    4bca:	19 95       	eicall
    4bcc:	89 2b       	or	r24, r25
    4bce:	19 f0       	breq	.+6      	; 0x4bd6 <puts+0x52>
    4bd0:	8f ef       	ldi	r24, 0xFF	; 255
    4bd2:	9f ef       	ldi	r25, 0xFF	; 255
    4bd4:	02 c0       	rjmp	.+4      	; 0x4bda <puts+0x56>
    4bd6:	8d 2f       	mov	r24, r29
    4bd8:	9c 2f       	mov	r25, r28
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	08 95       	ret

00004be4 <vfprintf>:
    4be4:	2f 92       	push	r2
    4be6:	3f 92       	push	r3
    4be8:	4f 92       	push	r4
    4bea:	5f 92       	push	r5
    4bec:	6f 92       	push	r6
    4bee:	7f 92       	push	r7
    4bf0:	8f 92       	push	r8
    4bf2:	9f 92       	push	r9
    4bf4:	af 92       	push	r10
    4bf6:	bf 92       	push	r11
    4bf8:	cf 92       	push	r12
    4bfa:	df 92       	push	r13
    4bfc:	ef 92       	push	r14
    4bfe:	ff 92       	push	r15
    4c00:	0f 93       	push	r16
    4c02:	1f 93       	push	r17
    4c04:	cf 93       	push	r28
    4c06:	df 93       	push	r29
    4c08:	cd b7       	in	r28, 0x3d	; 61
    4c0a:	de b7       	in	r29, 0x3e	; 62
    4c0c:	2b 97       	sbiw	r28, 0x0b	; 11
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	6c 01       	movw	r12, r24
    4c14:	7b 01       	movw	r14, r22
    4c16:	8a 01       	movw	r16, r20
    4c18:	fc 01       	movw	r30, r24
    4c1a:	16 82       	std	Z+6, r1	; 0x06
    4c1c:	17 82       	std	Z+7, r1	; 0x07
    4c1e:	83 81       	ldd	r24, Z+3	; 0x03
    4c20:	81 ff       	sbrs	r24, 1
    4c22:	bf c1       	rjmp	.+894    	; 0x4fa2 <vfprintf+0x3be>
    4c24:	ce 01       	movw	r24, r28
    4c26:	01 96       	adiw	r24, 0x01	; 1
    4c28:	3c 01       	movw	r6, r24
    4c2a:	f6 01       	movw	r30, r12
    4c2c:	93 81       	ldd	r25, Z+3	; 0x03
    4c2e:	f7 01       	movw	r30, r14
    4c30:	93 fd       	sbrc	r25, 3
    4c32:	85 91       	lpm	r24, Z+
    4c34:	93 ff       	sbrs	r25, 3
    4c36:	81 91       	ld	r24, Z+
    4c38:	7f 01       	movw	r14, r30
    4c3a:	88 23       	and	r24, r24
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <vfprintf+0x5c>
    4c3e:	ad c1       	rjmp	.+858    	; 0x4f9a <vfprintf+0x3b6>
    4c40:	85 32       	cpi	r24, 0x25	; 37
    4c42:	39 f4       	brne	.+14     	; 0x4c52 <vfprintf+0x6e>
    4c44:	93 fd       	sbrc	r25, 3
    4c46:	85 91       	lpm	r24, Z+
    4c48:	93 ff       	sbrs	r25, 3
    4c4a:	81 91       	ld	r24, Z+
    4c4c:	7f 01       	movw	r14, r30
    4c4e:	85 32       	cpi	r24, 0x25	; 37
    4c50:	21 f4       	brne	.+8      	; 0x4c5a <vfprintf+0x76>
    4c52:	b6 01       	movw	r22, r12
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	f4 d1       	rcall	.+1000   	; 0x5040 <fputc>
    4c58:	e8 cf       	rjmp	.-48     	; 0x4c2a <vfprintf+0x46>
    4c5a:	91 2c       	mov	r9, r1
    4c5c:	21 2c       	mov	r2, r1
    4c5e:	31 2c       	mov	r3, r1
    4c60:	ff e1       	ldi	r31, 0x1F	; 31
    4c62:	f3 15       	cp	r31, r3
    4c64:	d8 f0       	brcs	.+54     	; 0x4c9c <vfprintf+0xb8>
    4c66:	8b 32       	cpi	r24, 0x2B	; 43
    4c68:	79 f0       	breq	.+30     	; 0x4c88 <vfprintf+0xa4>
    4c6a:	38 f4       	brcc	.+14     	; 0x4c7a <vfprintf+0x96>
    4c6c:	80 32       	cpi	r24, 0x20	; 32
    4c6e:	79 f0       	breq	.+30     	; 0x4c8e <vfprintf+0xaa>
    4c70:	83 32       	cpi	r24, 0x23	; 35
    4c72:	a1 f4       	brne	.+40     	; 0x4c9c <vfprintf+0xb8>
    4c74:	23 2d       	mov	r18, r3
    4c76:	20 61       	ori	r18, 0x10	; 16
    4c78:	1d c0       	rjmp	.+58     	; 0x4cb4 <vfprintf+0xd0>
    4c7a:	8d 32       	cpi	r24, 0x2D	; 45
    4c7c:	61 f0       	breq	.+24     	; 0x4c96 <vfprintf+0xb2>
    4c7e:	80 33       	cpi	r24, 0x30	; 48
    4c80:	69 f4       	brne	.+26     	; 0x4c9c <vfprintf+0xb8>
    4c82:	23 2d       	mov	r18, r3
    4c84:	21 60       	ori	r18, 0x01	; 1
    4c86:	16 c0       	rjmp	.+44     	; 0x4cb4 <vfprintf+0xd0>
    4c88:	83 2d       	mov	r24, r3
    4c8a:	82 60       	ori	r24, 0x02	; 2
    4c8c:	38 2e       	mov	r3, r24
    4c8e:	e3 2d       	mov	r30, r3
    4c90:	e4 60       	ori	r30, 0x04	; 4
    4c92:	3e 2e       	mov	r3, r30
    4c94:	2a c0       	rjmp	.+84     	; 0x4cea <vfprintf+0x106>
    4c96:	f3 2d       	mov	r31, r3
    4c98:	f8 60       	ori	r31, 0x08	; 8
    4c9a:	1d c0       	rjmp	.+58     	; 0x4cd6 <vfprintf+0xf2>
    4c9c:	37 fc       	sbrc	r3, 7
    4c9e:	2d c0       	rjmp	.+90     	; 0x4cfa <vfprintf+0x116>
    4ca0:	20 ed       	ldi	r18, 0xD0	; 208
    4ca2:	28 0f       	add	r18, r24
    4ca4:	2a 30       	cpi	r18, 0x0A	; 10
    4ca6:	40 f0       	brcs	.+16     	; 0x4cb8 <vfprintf+0xd4>
    4ca8:	8e 32       	cpi	r24, 0x2E	; 46
    4caa:	b9 f4       	brne	.+46     	; 0x4cda <vfprintf+0xf6>
    4cac:	36 fc       	sbrc	r3, 6
    4cae:	75 c1       	rjmp	.+746    	; 0x4f9a <vfprintf+0x3b6>
    4cb0:	23 2d       	mov	r18, r3
    4cb2:	20 64       	ori	r18, 0x40	; 64
    4cb4:	32 2e       	mov	r3, r18
    4cb6:	19 c0       	rjmp	.+50     	; 0x4cea <vfprintf+0x106>
    4cb8:	36 fe       	sbrs	r3, 6
    4cba:	06 c0       	rjmp	.+12     	; 0x4cc8 <vfprintf+0xe4>
    4cbc:	8a e0       	ldi	r24, 0x0A	; 10
    4cbe:	98 9e       	mul	r9, r24
    4cc0:	20 0d       	add	r18, r0
    4cc2:	11 24       	eor	r1, r1
    4cc4:	92 2e       	mov	r9, r18
    4cc6:	11 c0       	rjmp	.+34     	; 0x4cea <vfprintf+0x106>
    4cc8:	ea e0       	ldi	r30, 0x0A	; 10
    4cca:	2e 9e       	mul	r2, r30
    4ccc:	20 0d       	add	r18, r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	22 2e       	mov	r2, r18
    4cd2:	f3 2d       	mov	r31, r3
    4cd4:	f0 62       	ori	r31, 0x20	; 32
    4cd6:	3f 2e       	mov	r3, r31
    4cd8:	08 c0       	rjmp	.+16     	; 0x4cea <vfprintf+0x106>
    4cda:	8c 36       	cpi	r24, 0x6C	; 108
    4cdc:	21 f4       	brne	.+8      	; 0x4ce6 <vfprintf+0x102>
    4cde:	83 2d       	mov	r24, r3
    4ce0:	80 68       	ori	r24, 0x80	; 128
    4ce2:	38 2e       	mov	r3, r24
    4ce4:	02 c0       	rjmp	.+4      	; 0x4cea <vfprintf+0x106>
    4ce6:	88 36       	cpi	r24, 0x68	; 104
    4ce8:	41 f4       	brne	.+16     	; 0x4cfa <vfprintf+0x116>
    4cea:	f7 01       	movw	r30, r14
    4cec:	93 fd       	sbrc	r25, 3
    4cee:	85 91       	lpm	r24, Z+
    4cf0:	93 ff       	sbrs	r25, 3
    4cf2:	81 91       	ld	r24, Z+
    4cf4:	7f 01       	movw	r14, r30
    4cf6:	81 11       	cpse	r24, r1
    4cf8:	b3 cf       	rjmp	.-154    	; 0x4c60 <vfprintf+0x7c>
    4cfa:	98 2f       	mov	r25, r24
    4cfc:	9f 7d       	andi	r25, 0xDF	; 223
    4cfe:	95 54       	subi	r25, 0x45	; 69
    4d00:	93 30       	cpi	r25, 0x03	; 3
    4d02:	28 f4       	brcc	.+10     	; 0x4d0e <vfprintf+0x12a>
    4d04:	0c 5f       	subi	r16, 0xFC	; 252
    4d06:	1f 4f       	sbci	r17, 0xFF	; 255
    4d08:	9f e3       	ldi	r25, 0x3F	; 63
    4d0a:	99 83       	std	Y+1, r25	; 0x01
    4d0c:	0d c0       	rjmp	.+26     	; 0x4d28 <vfprintf+0x144>
    4d0e:	83 36       	cpi	r24, 0x63	; 99
    4d10:	31 f0       	breq	.+12     	; 0x4d1e <vfprintf+0x13a>
    4d12:	83 37       	cpi	r24, 0x73	; 115
    4d14:	71 f0       	breq	.+28     	; 0x4d32 <vfprintf+0x14e>
    4d16:	83 35       	cpi	r24, 0x53	; 83
    4d18:	09 f0       	breq	.+2      	; 0x4d1c <vfprintf+0x138>
    4d1a:	55 c0       	rjmp	.+170    	; 0x4dc6 <vfprintf+0x1e2>
    4d1c:	20 c0       	rjmp	.+64     	; 0x4d5e <vfprintf+0x17a>
    4d1e:	f8 01       	movw	r30, r16
    4d20:	80 81       	ld	r24, Z
    4d22:	89 83       	std	Y+1, r24	; 0x01
    4d24:	0e 5f       	subi	r16, 0xFE	; 254
    4d26:	1f 4f       	sbci	r17, 0xFF	; 255
    4d28:	88 24       	eor	r8, r8
    4d2a:	83 94       	inc	r8
    4d2c:	91 2c       	mov	r9, r1
    4d2e:	53 01       	movw	r10, r6
    4d30:	12 c0       	rjmp	.+36     	; 0x4d56 <vfprintf+0x172>
    4d32:	28 01       	movw	r4, r16
    4d34:	f2 e0       	ldi	r31, 0x02	; 2
    4d36:	4f 0e       	add	r4, r31
    4d38:	51 1c       	adc	r5, r1
    4d3a:	f8 01       	movw	r30, r16
    4d3c:	a0 80       	ld	r10, Z
    4d3e:	b1 80       	ldd	r11, Z+1	; 0x01
    4d40:	36 fe       	sbrs	r3, 6
    4d42:	03 c0       	rjmp	.+6      	; 0x4d4a <vfprintf+0x166>
    4d44:	69 2d       	mov	r22, r9
    4d46:	70 e0       	ldi	r23, 0x00	; 0
    4d48:	02 c0       	rjmp	.+4      	; 0x4d4e <vfprintf+0x16a>
    4d4a:	6f ef       	ldi	r22, 0xFF	; 255
    4d4c:	7f ef       	ldi	r23, 0xFF	; 255
    4d4e:	c5 01       	movw	r24, r10
    4d50:	6c d1       	rcall	.+728    	; 0x502a <strnlen>
    4d52:	4c 01       	movw	r8, r24
    4d54:	82 01       	movw	r16, r4
    4d56:	f3 2d       	mov	r31, r3
    4d58:	ff 77       	andi	r31, 0x7F	; 127
    4d5a:	3f 2e       	mov	r3, r31
    4d5c:	15 c0       	rjmp	.+42     	; 0x4d88 <vfprintf+0x1a4>
    4d5e:	28 01       	movw	r4, r16
    4d60:	22 e0       	ldi	r18, 0x02	; 2
    4d62:	42 0e       	add	r4, r18
    4d64:	51 1c       	adc	r5, r1
    4d66:	f8 01       	movw	r30, r16
    4d68:	a0 80       	ld	r10, Z
    4d6a:	b1 80       	ldd	r11, Z+1	; 0x01
    4d6c:	36 fe       	sbrs	r3, 6
    4d6e:	03 c0       	rjmp	.+6      	; 0x4d76 <vfprintf+0x192>
    4d70:	69 2d       	mov	r22, r9
    4d72:	70 e0       	ldi	r23, 0x00	; 0
    4d74:	02 c0       	rjmp	.+4      	; 0x4d7a <vfprintf+0x196>
    4d76:	6f ef       	ldi	r22, 0xFF	; 255
    4d78:	7f ef       	ldi	r23, 0xFF	; 255
    4d7a:	c5 01       	movw	r24, r10
    4d7c:	44 d1       	rcall	.+648    	; 0x5006 <strnlen_P>
    4d7e:	4c 01       	movw	r8, r24
    4d80:	f3 2d       	mov	r31, r3
    4d82:	f0 68       	ori	r31, 0x80	; 128
    4d84:	3f 2e       	mov	r3, r31
    4d86:	82 01       	movw	r16, r4
    4d88:	33 fc       	sbrc	r3, 3
    4d8a:	19 c0       	rjmp	.+50     	; 0x4dbe <vfprintf+0x1da>
    4d8c:	82 2d       	mov	r24, r2
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	88 16       	cp	r8, r24
    4d92:	99 06       	cpc	r9, r25
    4d94:	a0 f4       	brcc	.+40     	; 0x4dbe <vfprintf+0x1da>
    4d96:	b6 01       	movw	r22, r12
    4d98:	80 e2       	ldi	r24, 0x20	; 32
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	51 d1       	rcall	.+674    	; 0x5040 <fputc>
    4d9e:	2a 94       	dec	r2
    4da0:	f5 cf       	rjmp	.-22     	; 0x4d8c <vfprintf+0x1a8>
    4da2:	f5 01       	movw	r30, r10
    4da4:	37 fc       	sbrc	r3, 7
    4da6:	85 91       	lpm	r24, Z+
    4da8:	37 fe       	sbrs	r3, 7
    4daa:	81 91       	ld	r24, Z+
    4dac:	5f 01       	movw	r10, r30
    4dae:	b6 01       	movw	r22, r12
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	46 d1       	rcall	.+652    	; 0x5040 <fputc>
    4db4:	21 10       	cpse	r2, r1
    4db6:	2a 94       	dec	r2
    4db8:	21 e0       	ldi	r18, 0x01	; 1
    4dba:	82 1a       	sub	r8, r18
    4dbc:	91 08       	sbc	r9, r1
    4dbe:	81 14       	cp	r8, r1
    4dc0:	91 04       	cpc	r9, r1
    4dc2:	79 f7       	brne	.-34     	; 0x4da2 <vfprintf+0x1be>
    4dc4:	e1 c0       	rjmp	.+450    	; 0x4f88 <vfprintf+0x3a4>
    4dc6:	84 36       	cpi	r24, 0x64	; 100
    4dc8:	11 f0       	breq	.+4      	; 0x4dce <vfprintf+0x1ea>
    4dca:	89 36       	cpi	r24, 0x69	; 105
    4dcc:	39 f5       	brne	.+78     	; 0x4e1c <vfprintf+0x238>
    4dce:	f8 01       	movw	r30, r16
    4dd0:	37 fe       	sbrs	r3, 7
    4dd2:	07 c0       	rjmp	.+14     	; 0x4de2 <vfprintf+0x1fe>
    4dd4:	60 81       	ld	r22, Z
    4dd6:	71 81       	ldd	r23, Z+1	; 0x01
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	93 81       	ldd	r25, Z+3	; 0x03
    4ddc:	0c 5f       	subi	r16, 0xFC	; 252
    4dde:	1f 4f       	sbci	r17, 0xFF	; 255
    4de0:	08 c0       	rjmp	.+16     	; 0x4df2 <vfprintf+0x20e>
    4de2:	60 81       	ld	r22, Z
    4de4:	71 81       	ldd	r23, Z+1	; 0x01
    4de6:	07 2e       	mov	r0, r23
    4de8:	00 0c       	add	r0, r0
    4dea:	88 0b       	sbc	r24, r24
    4dec:	99 0b       	sbc	r25, r25
    4dee:	0e 5f       	subi	r16, 0xFE	; 254
    4df0:	1f 4f       	sbci	r17, 0xFF	; 255
    4df2:	f3 2d       	mov	r31, r3
    4df4:	ff 76       	andi	r31, 0x6F	; 111
    4df6:	3f 2e       	mov	r3, r31
    4df8:	97 ff       	sbrs	r25, 7
    4dfa:	09 c0       	rjmp	.+18     	; 0x4e0e <vfprintf+0x22a>
    4dfc:	90 95       	com	r25
    4dfe:	80 95       	com	r24
    4e00:	70 95       	com	r23
    4e02:	61 95       	neg	r22
    4e04:	7f 4f       	sbci	r23, 0xFF	; 255
    4e06:	8f 4f       	sbci	r24, 0xFF	; 255
    4e08:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0a:	f0 68       	ori	r31, 0x80	; 128
    4e0c:	3f 2e       	mov	r3, r31
    4e0e:	2a e0       	ldi	r18, 0x0A	; 10
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	a3 01       	movw	r20, r6
    4e14:	51 d1       	rcall	.+674    	; 0x50b8 <__ultoa_invert>
    4e16:	88 2e       	mov	r8, r24
    4e18:	86 18       	sub	r8, r6
    4e1a:	44 c0       	rjmp	.+136    	; 0x4ea4 <vfprintf+0x2c0>
    4e1c:	85 37       	cpi	r24, 0x75	; 117
    4e1e:	31 f4       	brne	.+12     	; 0x4e2c <vfprintf+0x248>
    4e20:	23 2d       	mov	r18, r3
    4e22:	2f 7e       	andi	r18, 0xEF	; 239
    4e24:	b2 2e       	mov	r11, r18
    4e26:	2a e0       	ldi	r18, 0x0A	; 10
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	25 c0       	rjmp	.+74     	; 0x4e76 <vfprintf+0x292>
    4e2c:	93 2d       	mov	r25, r3
    4e2e:	99 7f       	andi	r25, 0xF9	; 249
    4e30:	b9 2e       	mov	r11, r25
    4e32:	8f 36       	cpi	r24, 0x6F	; 111
    4e34:	c1 f0       	breq	.+48     	; 0x4e66 <vfprintf+0x282>
    4e36:	18 f4       	brcc	.+6      	; 0x4e3e <vfprintf+0x25a>
    4e38:	88 35       	cpi	r24, 0x58	; 88
    4e3a:	79 f0       	breq	.+30     	; 0x4e5a <vfprintf+0x276>
    4e3c:	ae c0       	rjmp	.+348    	; 0x4f9a <vfprintf+0x3b6>
    4e3e:	80 37       	cpi	r24, 0x70	; 112
    4e40:	19 f0       	breq	.+6      	; 0x4e48 <vfprintf+0x264>
    4e42:	88 37       	cpi	r24, 0x78	; 120
    4e44:	21 f0       	breq	.+8      	; 0x4e4e <vfprintf+0x26a>
    4e46:	a9 c0       	rjmp	.+338    	; 0x4f9a <vfprintf+0x3b6>
    4e48:	e9 2f       	mov	r30, r25
    4e4a:	e0 61       	ori	r30, 0x10	; 16
    4e4c:	be 2e       	mov	r11, r30
    4e4e:	b4 fe       	sbrs	r11, 4
    4e50:	0d c0       	rjmp	.+26     	; 0x4e6c <vfprintf+0x288>
    4e52:	fb 2d       	mov	r31, r11
    4e54:	f4 60       	ori	r31, 0x04	; 4
    4e56:	bf 2e       	mov	r11, r31
    4e58:	09 c0       	rjmp	.+18     	; 0x4e6c <vfprintf+0x288>
    4e5a:	34 fe       	sbrs	r3, 4
    4e5c:	0a c0       	rjmp	.+20     	; 0x4e72 <vfprintf+0x28e>
    4e5e:	29 2f       	mov	r18, r25
    4e60:	26 60       	ori	r18, 0x06	; 6
    4e62:	b2 2e       	mov	r11, r18
    4e64:	06 c0       	rjmp	.+12     	; 0x4e72 <vfprintf+0x28e>
    4e66:	28 e0       	ldi	r18, 0x08	; 8
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	05 c0       	rjmp	.+10     	; 0x4e76 <vfprintf+0x292>
    4e6c:	20 e1       	ldi	r18, 0x10	; 16
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	02 c0       	rjmp	.+4      	; 0x4e76 <vfprintf+0x292>
    4e72:	20 e1       	ldi	r18, 0x10	; 16
    4e74:	32 e0       	ldi	r19, 0x02	; 2
    4e76:	f8 01       	movw	r30, r16
    4e78:	b7 fe       	sbrs	r11, 7
    4e7a:	07 c0       	rjmp	.+14     	; 0x4e8a <vfprintf+0x2a6>
    4e7c:	60 81       	ld	r22, Z
    4e7e:	71 81       	ldd	r23, Z+1	; 0x01
    4e80:	82 81       	ldd	r24, Z+2	; 0x02
    4e82:	93 81       	ldd	r25, Z+3	; 0x03
    4e84:	0c 5f       	subi	r16, 0xFC	; 252
    4e86:	1f 4f       	sbci	r17, 0xFF	; 255
    4e88:	06 c0       	rjmp	.+12     	; 0x4e96 <vfprintf+0x2b2>
    4e8a:	60 81       	ld	r22, Z
    4e8c:	71 81       	ldd	r23, Z+1	; 0x01
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	0e 5f       	subi	r16, 0xFE	; 254
    4e94:	1f 4f       	sbci	r17, 0xFF	; 255
    4e96:	a3 01       	movw	r20, r6
    4e98:	0f d1       	rcall	.+542    	; 0x50b8 <__ultoa_invert>
    4e9a:	88 2e       	mov	r8, r24
    4e9c:	86 18       	sub	r8, r6
    4e9e:	fb 2d       	mov	r31, r11
    4ea0:	ff 77       	andi	r31, 0x7F	; 127
    4ea2:	3f 2e       	mov	r3, r31
    4ea4:	36 fe       	sbrs	r3, 6
    4ea6:	0d c0       	rjmp	.+26     	; 0x4ec2 <vfprintf+0x2de>
    4ea8:	23 2d       	mov	r18, r3
    4eaa:	2e 7f       	andi	r18, 0xFE	; 254
    4eac:	a2 2e       	mov	r10, r18
    4eae:	89 14       	cp	r8, r9
    4eb0:	58 f4       	brcc	.+22     	; 0x4ec8 <vfprintf+0x2e4>
    4eb2:	34 fe       	sbrs	r3, 4
    4eb4:	0b c0       	rjmp	.+22     	; 0x4ecc <vfprintf+0x2e8>
    4eb6:	32 fc       	sbrc	r3, 2
    4eb8:	09 c0       	rjmp	.+18     	; 0x4ecc <vfprintf+0x2e8>
    4eba:	83 2d       	mov	r24, r3
    4ebc:	8e 7e       	andi	r24, 0xEE	; 238
    4ebe:	a8 2e       	mov	r10, r24
    4ec0:	05 c0       	rjmp	.+10     	; 0x4ecc <vfprintf+0x2e8>
    4ec2:	b8 2c       	mov	r11, r8
    4ec4:	a3 2c       	mov	r10, r3
    4ec6:	03 c0       	rjmp	.+6      	; 0x4ece <vfprintf+0x2ea>
    4ec8:	b8 2c       	mov	r11, r8
    4eca:	01 c0       	rjmp	.+2      	; 0x4ece <vfprintf+0x2ea>
    4ecc:	b9 2c       	mov	r11, r9
    4ece:	a4 fe       	sbrs	r10, 4
    4ed0:	0f c0       	rjmp	.+30     	; 0x4ef0 <vfprintf+0x30c>
    4ed2:	fe 01       	movw	r30, r28
    4ed4:	e8 0d       	add	r30, r8
    4ed6:	f1 1d       	adc	r31, r1
    4ed8:	80 81       	ld	r24, Z
    4eda:	80 33       	cpi	r24, 0x30	; 48
    4edc:	21 f4       	brne	.+8      	; 0x4ee6 <vfprintf+0x302>
    4ede:	9a 2d       	mov	r25, r10
    4ee0:	99 7e       	andi	r25, 0xE9	; 233
    4ee2:	a9 2e       	mov	r10, r25
    4ee4:	09 c0       	rjmp	.+18     	; 0x4ef8 <vfprintf+0x314>
    4ee6:	a2 fe       	sbrs	r10, 2
    4ee8:	06 c0       	rjmp	.+12     	; 0x4ef6 <vfprintf+0x312>
    4eea:	b3 94       	inc	r11
    4eec:	b3 94       	inc	r11
    4eee:	04 c0       	rjmp	.+8      	; 0x4ef8 <vfprintf+0x314>
    4ef0:	8a 2d       	mov	r24, r10
    4ef2:	86 78       	andi	r24, 0x86	; 134
    4ef4:	09 f0       	breq	.+2      	; 0x4ef8 <vfprintf+0x314>
    4ef6:	b3 94       	inc	r11
    4ef8:	a3 fc       	sbrc	r10, 3
    4efa:	10 c0       	rjmp	.+32     	; 0x4f1c <vfprintf+0x338>
    4efc:	a0 fe       	sbrs	r10, 0
    4efe:	06 c0       	rjmp	.+12     	; 0x4f0c <vfprintf+0x328>
    4f00:	b2 14       	cp	r11, r2
    4f02:	80 f4       	brcc	.+32     	; 0x4f24 <vfprintf+0x340>
    4f04:	28 0c       	add	r2, r8
    4f06:	92 2c       	mov	r9, r2
    4f08:	9b 18       	sub	r9, r11
    4f0a:	0d c0       	rjmp	.+26     	; 0x4f26 <vfprintf+0x342>
    4f0c:	b2 14       	cp	r11, r2
    4f0e:	58 f4       	brcc	.+22     	; 0x4f26 <vfprintf+0x342>
    4f10:	b6 01       	movw	r22, r12
    4f12:	80 e2       	ldi	r24, 0x20	; 32
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	94 d0       	rcall	.+296    	; 0x5040 <fputc>
    4f18:	b3 94       	inc	r11
    4f1a:	f8 cf       	rjmp	.-16     	; 0x4f0c <vfprintf+0x328>
    4f1c:	b2 14       	cp	r11, r2
    4f1e:	18 f4       	brcc	.+6      	; 0x4f26 <vfprintf+0x342>
    4f20:	2b 18       	sub	r2, r11
    4f22:	02 c0       	rjmp	.+4      	; 0x4f28 <vfprintf+0x344>
    4f24:	98 2c       	mov	r9, r8
    4f26:	21 2c       	mov	r2, r1
    4f28:	a4 fe       	sbrs	r10, 4
    4f2a:	0f c0       	rjmp	.+30     	; 0x4f4a <vfprintf+0x366>
    4f2c:	b6 01       	movw	r22, r12
    4f2e:	80 e3       	ldi	r24, 0x30	; 48
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	86 d0       	rcall	.+268    	; 0x5040 <fputc>
    4f34:	a2 fe       	sbrs	r10, 2
    4f36:	16 c0       	rjmp	.+44     	; 0x4f64 <vfprintf+0x380>
    4f38:	a1 fc       	sbrc	r10, 1
    4f3a:	03 c0       	rjmp	.+6      	; 0x4f42 <vfprintf+0x35e>
    4f3c:	88 e7       	ldi	r24, 0x78	; 120
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <vfprintf+0x362>
    4f42:	88 e5       	ldi	r24, 0x58	; 88
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	b6 01       	movw	r22, r12
    4f48:	0c c0       	rjmp	.+24     	; 0x4f62 <vfprintf+0x37e>
    4f4a:	8a 2d       	mov	r24, r10
    4f4c:	86 78       	andi	r24, 0x86	; 134
    4f4e:	51 f0       	breq	.+20     	; 0x4f64 <vfprintf+0x380>
    4f50:	a1 fe       	sbrs	r10, 1
    4f52:	02 c0       	rjmp	.+4      	; 0x4f58 <vfprintf+0x374>
    4f54:	8b e2       	ldi	r24, 0x2B	; 43
    4f56:	01 c0       	rjmp	.+2      	; 0x4f5a <vfprintf+0x376>
    4f58:	80 e2       	ldi	r24, 0x20	; 32
    4f5a:	a7 fc       	sbrc	r10, 7
    4f5c:	8d e2       	ldi	r24, 0x2D	; 45
    4f5e:	b6 01       	movw	r22, r12
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	6e d0       	rcall	.+220    	; 0x5040 <fputc>
    4f64:	89 14       	cp	r8, r9
    4f66:	30 f4       	brcc	.+12     	; 0x4f74 <vfprintf+0x390>
    4f68:	b6 01       	movw	r22, r12
    4f6a:	80 e3       	ldi	r24, 0x30	; 48
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	68 d0       	rcall	.+208    	; 0x5040 <fputc>
    4f70:	9a 94       	dec	r9
    4f72:	f8 cf       	rjmp	.-16     	; 0x4f64 <vfprintf+0x380>
    4f74:	8a 94       	dec	r8
    4f76:	f3 01       	movw	r30, r6
    4f78:	e8 0d       	add	r30, r8
    4f7a:	f1 1d       	adc	r31, r1
    4f7c:	80 81       	ld	r24, Z
    4f7e:	b6 01       	movw	r22, r12
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	5e d0       	rcall	.+188    	; 0x5040 <fputc>
    4f84:	81 10       	cpse	r8, r1
    4f86:	f6 cf       	rjmp	.-20     	; 0x4f74 <vfprintf+0x390>
    4f88:	22 20       	and	r2, r2
    4f8a:	09 f4       	brne	.+2      	; 0x4f8e <vfprintf+0x3aa>
    4f8c:	4e ce       	rjmp	.-868    	; 0x4c2a <vfprintf+0x46>
    4f8e:	b6 01       	movw	r22, r12
    4f90:	80 e2       	ldi	r24, 0x20	; 32
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	55 d0       	rcall	.+170    	; 0x5040 <fputc>
    4f96:	2a 94       	dec	r2
    4f98:	f7 cf       	rjmp	.-18     	; 0x4f88 <vfprintf+0x3a4>
    4f9a:	f6 01       	movw	r30, r12
    4f9c:	86 81       	ldd	r24, Z+6	; 0x06
    4f9e:	97 81       	ldd	r25, Z+7	; 0x07
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <vfprintf+0x3c2>
    4fa2:	8f ef       	ldi	r24, 0xFF	; 255
    4fa4:	9f ef       	ldi	r25, 0xFF	; 255
    4fa6:	2b 96       	adiw	r28, 0x0b	; 11
    4fa8:	cd bf       	out	0x3d, r28	; 61
    4faa:	de bf       	out	0x3e, r29	; 62
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	ff 90       	pop	r15
    4fb6:	ef 90       	pop	r14
    4fb8:	df 90       	pop	r13
    4fba:	cf 90       	pop	r12
    4fbc:	bf 90       	pop	r11
    4fbe:	af 90       	pop	r10
    4fc0:	9f 90       	pop	r9
    4fc2:	8f 90       	pop	r8
    4fc4:	7f 90       	pop	r7
    4fc6:	6f 90       	pop	r6
    4fc8:	5f 90       	pop	r5
    4fca:	4f 90       	pop	r4
    4fcc:	3f 90       	pop	r3
    4fce:	2f 90       	pop	r2
    4fd0:	08 95       	ret

00004fd2 <calloc>:
    4fd2:	0f 93       	push	r16
    4fd4:	1f 93       	push	r17
    4fd6:	cf 93       	push	r28
    4fd8:	df 93       	push	r29
    4fda:	86 9f       	mul	r24, r22
    4fdc:	80 01       	movw	r16, r0
    4fde:	87 9f       	mul	r24, r23
    4fe0:	10 0d       	add	r17, r0
    4fe2:	96 9f       	mul	r25, r22
    4fe4:	10 0d       	add	r17, r0
    4fe6:	11 24       	eor	r1, r1
    4fe8:	c8 01       	movw	r24, r16
    4fea:	4e dc       	rcall	.-1892   	; 0x4888 <malloc>
    4fec:	ec 01       	movw	r28, r24
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	21 f0       	breq	.+8      	; 0x4ffa <calloc+0x28>
    4ff2:	a8 01       	movw	r20, r16
    4ff4:	60 e0       	ldi	r22, 0x00	; 0
    4ff6:	70 e0       	ldi	r23, 0x00	; 0
    4ff8:	11 d0       	rcall	.+34     	; 0x501c <memset>
    4ffa:	ce 01       	movw	r24, r28
    4ffc:	df 91       	pop	r29
    4ffe:	cf 91       	pop	r28
    5000:	1f 91       	pop	r17
    5002:	0f 91       	pop	r16
    5004:	08 95       	ret

00005006 <strnlen_P>:
    5006:	fc 01       	movw	r30, r24
    5008:	05 90       	lpm	r0, Z+
    500a:	61 50       	subi	r22, 0x01	; 1
    500c:	70 40       	sbci	r23, 0x00	; 0
    500e:	01 10       	cpse	r0, r1
    5010:	d8 f7       	brcc	.-10     	; 0x5008 <strnlen_P+0x2>
    5012:	80 95       	com	r24
    5014:	90 95       	com	r25
    5016:	8e 0f       	add	r24, r30
    5018:	9f 1f       	adc	r25, r31
    501a:	08 95       	ret

0000501c <memset>:
    501c:	dc 01       	movw	r26, r24
    501e:	01 c0       	rjmp	.+2      	; 0x5022 <memset+0x6>
    5020:	6d 93       	st	X+, r22
    5022:	41 50       	subi	r20, 0x01	; 1
    5024:	50 40       	sbci	r21, 0x00	; 0
    5026:	e0 f7       	brcc	.-8      	; 0x5020 <memset+0x4>
    5028:	08 95       	ret

0000502a <strnlen>:
    502a:	fc 01       	movw	r30, r24
    502c:	61 50       	subi	r22, 0x01	; 1
    502e:	70 40       	sbci	r23, 0x00	; 0
    5030:	01 90       	ld	r0, Z+
    5032:	01 10       	cpse	r0, r1
    5034:	d8 f7       	brcc	.-10     	; 0x502c <strnlen+0x2>
    5036:	80 95       	com	r24
    5038:	90 95       	com	r25
    503a:	8e 0f       	add	r24, r30
    503c:	9f 1f       	adc	r25, r31
    503e:	08 95       	ret

00005040 <fputc>:
    5040:	0f 93       	push	r16
    5042:	1f 93       	push	r17
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	fb 01       	movw	r30, r22
    504a:	23 81       	ldd	r18, Z+3	; 0x03
    504c:	21 fd       	sbrc	r18, 1
    504e:	03 c0       	rjmp	.+6      	; 0x5056 <fputc+0x16>
    5050:	8f ef       	ldi	r24, 0xFF	; 255
    5052:	9f ef       	ldi	r25, 0xFF	; 255
    5054:	2c c0       	rjmp	.+88     	; 0x50ae <fputc+0x6e>
    5056:	22 ff       	sbrs	r18, 2
    5058:	16 c0       	rjmp	.+44     	; 0x5086 <fputc+0x46>
    505a:	46 81       	ldd	r20, Z+6	; 0x06
    505c:	57 81       	ldd	r21, Z+7	; 0x07
    505e:	24 81       	ldd	r18, Z+4	; 0x04
    5060:	35 81       	ldd	r19, Z+5	; 0x05
    5062:	42 17       	cp	r20, r18
    5064:	53 07       	cpc	r21, r19
    5066:	44 f4       	brge	.+16     	; 0x5078 <fputc+0x38>
    5068:	a0 81       	ld	r26, Z
    506a:	b1 81       	ldd	r27, Z+1	; 0x01
    506c:	9d 01       	movw	r18, r26
    506e:	2f 5f       	subi	r18, 0xFF	; 255
    5070:	3f 4f       	sbci	r19, 0xFF	; 255
    5072:	20 83       	st	Z, r18
    5074:	31 83       	std	Z+1, r19	; 0x01
    5076:	8c 93       	st	X, r24
    5078:	26 81       	ldd	r18, Z+6	; 0x06
    507a:	37 81       	ldd	r19, Z+7	; 0x07
    507c:	2f 5f       	subi	r18, 0xFF	; 255
    507e:	3f 4f       	sbci	r19, 0xFF	; 255
    5080:	26 83       	std	Z+6, r18	; 0x06
    5082:	37 83       	std	Z+7, r19	; 0x07
    5084:	14 c0       	rjmp	.+40     	; 0x50ae <fputc+0x6e>
    5086:	8b 01       	movw	r16, r22
    5088:	ec 01       	movw	r28, r24
    508a:	fb 01       	movw	r30, r22
    508c:	00 84       	ldd	r0, Z+8	; 0x08
    508e:	f1 85       	ldd	r31, Z+9	; 0x09
    5090:	e0 2d       	mov	r30, r0
    5092:	19 95       	eicall
    5094:	89 2b       	or	r24, r25
    5096:	e1 f6       	brne	.-72     	; 0x5050 <fputc+0x10>
    5098:	d8 01       	movw	r26, r16
    509a:	16 96       	adiw	r26, 0x06	; 6
    509c:	8d 91       	ld	r24, X+
    509e:	9c 91       	ld	r25, X
    50a0:	17 97       	sbiw	r26, 0x07	; 7
    50a2:	01 96       	adiw	r24, 0x01	; 1
    50a4:	16 96       	adiw	r26, 0x06	; 6
    50a6:	8d 93       	st	X+, r24
    50a8:	9c 93       	st	X, r25
    50aa:	17 97       	sbiw	r26, 0x07	; 7
    50ac:	ce 01       	movw	r24, r28
    50ae:	df 91       	pop	r29
    50b0:	cf 91       	pop	r28
    50b2:	1f 91       	pop	r17
    50b4:	0f 91       	pop	r16
    50b6:	08 95       	ret

000050b8 <__ultoa_invert>:
    50b8:	fa 01       	movw	r30, r20
    50ba:	aa 27       	eor	r26, r26
    50bc:	28 30       	cpi	r18, 0x08	; 8
    50be:	51 f1       	breq	.+84     	; 0x5114 <__ultoa_invert+0x5c>
    50c0:	20 31       	cpi	r18, 0x10	; 16
    50c2:	81 f1       	breq	.+96     	; 0x5124 <__ultoa_invert+0x6c>
    50c4:	e8 94       	clt
    50c6:	6f 93       	push	r22
    50c8:	6e 7f       	andi	r22, 0xFE	; 254
    50ca:	6e 5f       	subi	r22, 0xFE	; 254
    50cc:	7f 4f       	sbci	r23, 0xFF	; 255
    50ce:	8f 4f       	sbci	r24, 0xFF	; 255
    50d0:	9f 4f       	sbci	r25, 0xFF	; 255
    50d2:	af 4f       	sbci	r26, 0xFF	; 255
    50d4:	b1 e0       	ldi	r27, 0x01	; 1
    50d6:	3e d0       	rcall	.+124    	; 0x5154 <__ultoa_invert+0x9c>
    50d8:	b4 e0       	ldi	r27, 0x04	; 4
    50da:	3c d0       	rcall	.+120    	; 0x5154 <__ultoa_invert+0x9c>
    50dc:	67 0f       	add	r22, r23
    50de:	78 1f       	adc	r23, r24
    50e0:	89 1f       	adc	r24, r25
    50e2:	9a 1f       	adc	r25, r26
    50e4:	a1 1d       	adc	r26, r1
    50e6:	68 0f       	add	r22, r24
    50e8:	79 1f       	adc	r23, r25
    50ea:	8a 1f       	adc	r24, r26
    50ec:	91 1d       	adc	r25, r1
    50ee:	a1 1d       	adc	r26, r1
    50f0:	6a 0f       	add	r22, r26
    50f2:	71 1d       	adc	r23, r1
    50f4:	81 1d       	adc	r24, r1
    50f6:	91 1d       	adc	r25, r1
    50f8:	a1 1d       	adc	r26, r1
    50fa:	20 d0       	rcall	.+64     	; 0x513c <__ultoa_invert+0x84>
    50fc:	09 f4       	brne	.+2      	; 0x5100 <__ultoa_invert+0x48>
    50fe:	68 94       	set
    5100:	3f 91       	pop	r19
    5102:	2a e0       	ldi	r18, 0x0A	; 10
    5104:	26 9f       	mul	r18, r22
    5106:	11 24       	eor	r1, r1
    5108:	30 19       	sub	r19, r0
    510a:	30 5d       	subi	r19, 0xD0	; 208
    510c:	31 93       	st	Z+, r19
    510e:	de f6       	brtc	.-74     	; 0x50c6 <__ultoa_invert+0xe>
    5110:	cf 01       	movw	r24, r30
    5112:	08 95       	ret
    5114:	46 2f       	mov	r20, r22
    5116:	47 70       	andi	r20, 0x07	; 7
    5118:	40 5d       	subi	r20, 0xD0	; 208
    511a:	41 93       	st	Z+, r20
    511c:	b3 e0       	ldi	r27, 0x03	; 3
    511e:	0f d0       	rcall	.+30     	; 0x513e <__ultoa_invert+0x86>
    5120:	c9 f7       	brne	.-14     	; 0x5114 <__ultoa_invert+0x5c>
    5122:	f6 cf       	rjmp	.-20     	; 0x5110 <__ultoa_invert+0x58>
    5124:	46 2f       	mov	r20, r22
    5126:	4f 70       	andi	r20, 0x0F	; 15
    5128:	40 5d       	subi	r20, 0xD0	; 208
    512a:	4a 33       	cpi	r20, 0x3A	; 58
    512c:	18 f0       	brcs	.+6      	; 0x5134 <__ultoa_invert+0x7c>
    512e:	49 5d       	subi	r20, 0xD9	; 217
    5130:	31 fd       	sbrc	r19, 1
    5132:	40 52       	subi	r20, 0x20	; 32
    5134:	41 93       	st	Z+, r20
    5136:	02 d0       	rcall	.+4      	; 0x513c <__ultoa_invert+0x84>
    5138:	a9 f7       	brne	.-22     	; 0x5124 <__ultoa_invert+0x6c>
    513a:	ea cf       	rjmp	.-44     	; 0x5110 <__ultoa_invert+0x58>
    513c:	b4 e0       	ldi	r27, 0x04	; 4
    513e:	a6 95       	lsr	r26
    5140:	97 95       	ror	r25
    5142:	87 95       	ror	r24
    5144:	77 95       	ror	r23
    5146:	67 95       	ror	r22
    5148:	ba 95       	dec	r27
    514a:	c9 f7       	brne	.-14     	; 0x513e <__ultoa_invert+0x86>
    514c:	00 97       	sbiw	r24, 0x00	; 0
    514e:	61 05       	cpc	r22, r1
    5150:	71 05       	cpc	r23, r1
    5152:	08 95       	ret
    5154:	9b 01       	movw	r18, r22
    5156:	ac 01       	movw	r20, r24
    5158:	0a 2e       	mov	r0, r26
    515a:	06 94       	lsr	r0
    515c:	57 95       	ror	r21
    515e:	47 95       	ror	r20
    5160:	37 95       	ror	r19
    5162:	27 95       	ror	r18
    5164:	ba 95       	dec	r27
    5166:	c9 f7       	brne	.-14     	; 0x515a <__ultoa_invert+0xa2>
    5168:	62 0f       	add	r22, r18
    516a:	73 1f       	adc	r23, r19
    516c:	84 1f       	adc	r24, r20
    516e:	95 1f       	adc	r25, r21
    5170:	a0 1d       	adc	r26, r0
    5172:	08 95       	ret

00005174 <_exit>:
    5174:	f8 94       	cli

00005176 <__stop_program>:
    5176:	ff cf       	rjmp	.-2      	; 0x5176 <__stop_program>
